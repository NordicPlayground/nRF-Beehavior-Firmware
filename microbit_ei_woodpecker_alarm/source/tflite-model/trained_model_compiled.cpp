/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 30.07.2021 06:17:38

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 6784;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3136 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { -4984, -12343, -3326, -2959, -295, -8475, -379, -930, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 6.2294842791743577e-05, 4.9623173254076391e-05, 4.8970843636197969e-05, 6.2748295022174716e-05, 7.0520538429263979e-05, 9.0810957772191614e-05, 8.9951434347312897e-05, 9.1514142695814371e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { 364, -566, -413, -304, -111, -1619, -786, -481, -93, -345, 284, -368, -177, -1222, -834, -259, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.0006552838021889329, 0.00066123279975727201, 0.00087654258823022246, 0.00084353616693988442, 0.00082097272388637066, 0.00036564341280609369, 0.00048772525042295456, 0.00044212376815266907, 0.00080819905269891024, 0.00038688935455866158, 0.0007954443572089076, 0.00058678531786426902, 0.00061468716012313962, 0.00051624816842377186, 0.00062085210811346769, 0.0008463769918307662, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { -1360, 991, -803, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00095432635862380266, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[3*400] = { 
  -93, -19, 53, -3, -1, -19, -33, 29, 59, -32, -113, -15, 32, 14, -8, 41, -91, -21, 24, -5, 19, 5, -34, 25, 45, -5, -96, -34, 17, -19, -30, 14, -65, -18, -10, -55, 10, -11, -27, 7, 22, -38, -92, -25, 3, -5, -20, 22, -85, -37, 20, -29, -1, -15, -37, 20, 28, -7, -117, -20, 3, -15, 3, 28, -66, -52, 30, -22, 10, -2, -9, 32, 19, -13, -111, -34, 9, 0, -6, 33, -78, -43, 13, -51, 12, -12, 4, 27, 22, -3, -91, -11, 5, -16, -14, 33, -69, -49, 11, -25, 14, -16, -37, 47, 33, -23, -60, -35, -3, 7, -5, 33, -73, -14, -11, -13, 15, 4, -23, 14, 24, -25, -86, 5, 2, -12, -15, 12, -78, -50, -12, -24, 13, -22, -27, 14, 4, -4, -80, -14, 8, -2, -1, 31, -82, -35, 13, -21, 41, -6, -29, 32, -3, -14, -84, 9, 1, -10, -9, 24, -70, -33, 4, -26, 32, -8, -12, 14, 12, -5, -93, -5, 9, -4, -26, 10, -81, -53, 24, 1, 20, 0, -13, 18, 31, -17, -92, -25, 9, -18, -25, 23, -54, -18, -2, 3, 2, -6, -17, 8, 17, -6, -76, 0, 6, -13, -16, 34, -78, -35, 16, -10, 5, -19, -14, 24, 30, -18, -93, -35, 22, 9, 5, 12, -48, -42, 28, 0, 8, 6, -45, 12, 33, -22, -63, -42, 9, 8, -15, 39, -39, -47, -2, 1, 30, -10, -25, 19, 11, -8, -94, -26, 6, -19, -38, 22, -39, -48, 19, -12, 15, -5, -20, 13, 17, -38, -76, -23, 10, -5, -12, 26, -71, -31, 28, -7, 29, -16, -10, 21, 22, -31, -104, -4, -9, -29, -36, 35, -46, -33, 2, -35, 22, -10, -22, 9, 9, -26, -75, -4, 4, -45, -7, 4, -81, -30, 12, -11, 23, 0, -3, 40, 31, -17, -105, -30, 3, -4, -15, 43, -47, -49, 1, -20, -11, 5, -12, 21, 41, -14, -68, -4, 27, -18, -23, 11, -51, -40, 28, 3, 27, -3, -17, 40, 32, -34, -103, -15, -2, -13, -16, 7, -98, -35, 4, -45, 13, -8, -77, 10, 20, -15, -127, 9, 18, -19, -41, 19, -67, -28, 0, -32, 4, -24, -53, 4, 13, -32, -90, -16, 4, -17, -34, 16, -77, -14, 26, -32, 11, -19, -37, 1, 17, -18, -84, -77, 8, -25, -18, 10, 
  -9, 0, -1, -18, -16, -1, -2, -10, -43, 4, -9, 6, 15, 20, 2, -8, 1, -8, -18, 1, -12, -4, -2, -1, 10, -9, 2, -11, 21, 23, -1, -25, 10, -8, -23, 8, -24, 20, 8, -21, -15, 5, -2, -18, 7, 25, 5, -8, 0, -18, -3, 2, -15, -6, 0, -36, -3, 7, 4, -5, 19, 9, 3, -33, 0, -1, -7, -9, -20, -18, 3, -2, -23, -10, -3, -13, 19, 12, 4, -37, 13, -10, 19, 5, -26, -15, -6, 2, -4, -4, 8, 0, 34, 1, 5, -23, 23, 1, -11, 3, -33, -5, 14, -12, -7, -18, 13, -2, 15, 3, -1, -29, 25, -7, 9, 9, -11, -6, 7, -7, 10, 0, 29, -19, 25, 13, -7, 4, 34, -11, -11, 10, -10, 0, -7, -10, 17, -20, 20, -21, 27, 15, 1, -36, 18, -8, -60, 19, -28, 6, 19, -31, 24, -16, 6, -13, 11, 7, -2, -16, 11, -7, -13, 21, -17, 36, -3, -14, -9, -3, 20, -13, 16, 6, 2, -27, 28, -12, -16, 9, -21, 12, -5, -50, 14, 3, 16, -4, 19, 29, 5, -11, 21, -1, -24, -4, -26, 12, -21, -10, -18, -12, 31, -7, -1, -7, -1, -47, 20, -11, -9, 1, -28, -33, 5, -83, -28, 3, 21, -19, 14, 17, -3, -8, 25, -14, -38, 25, -5, 15, 4, -3, 8, -25, 24, 0, -1, 6, 5, -38, 10, -3, -29, 22, -12, 21, 3, -23, 1, -6, 26, -16, 29, 17, 10, -17, 16, -2, -6, 19, -15, 9, 4, -38, 31, -1, 9, -5, 23, 48, 4, -32, 27, 4, -10, 26, -25, 4, 4, 1, 8, -6, 19, -6, 22, 21, 21, -44, 7, 4, -13, 12, -32, 19, 27, -33, 21, -4, 19, 0, 27, 18, 36, -11, 5, 0, -19, -1, -31, 7, 2, -40, -24, -17, 3, -16, 9, 36, 1, -68, 15, 6, -39, -1, -4, 4, 4, 28, -14, -2, 4, -4, 2, 16, 12, -29, 6, 3, 2, 11, -14, -15, 12, -43, -25, -1, 0, 14, 30, 13, 42, 6, 0, -1, -26, 11, -1, -22, 19, 0, 19, 3, -4, 1, 8, 31, 10, -52, 15, 7, -24, -17, -39, 13, 23, -8, 6, 2, 4, 4, 5, 6, 22, -36, -3, 21, -30, 1, 1, 6, 24, -11, -13, 11, -2, 10, -4, 9, 18, -18, 
  20, 3, -9, 13, 30, 4, 0, -10, 6, -3, 17, -6, -28, -25, -6, -17, 3, 19, 24, 0, 12, 6, 2, -28, -40, 19, -1, 24, -26, -22, 5, 24, -3, 14, 45, -1, 21, -7, -6, 9, -6, 12, 10, 25, -16, -28, -5, 1, 8, 20, -1, 1, 8, 7, 5, 15, -12, -2, 8, 5, -20, -8, -3, 21, 10, 18, 5, 8, 14, 16, 1, -17, -1, 16, 15, 18, -14, -15, -12, 21, 0, 18, -13, 1, 17, 13, 3, -28, -7, 4, 5, 1, -29, 1, -1, 7, -15, 8, 18, 3, 28, 7, -2, -22, -9, 25, -12, 16, -7, -10, -3, 17, -22, 14, -7, -5, 7, 6, -5, -8, -36, 9, -21, 25, -21, -10, 9, -8, -19, 15, 17, -9, 12, 7, 4, 3, -8, 23, -5, 21, -26, -17, -7, 13, -12, 12, 50, -19, 12, -7, -6, 0, -16, 20, 1, 20, -13, -6, 0, 5, -6, 14, 21, -17, -1, -29, 11, -6, -5, 6, -8, 15, -18, -6, 15, 24, -15, 13, 7, -12, 13, -14, 3, 28, -31, 4, -10, 6, -22, -23, 4, 0, -11, 7, 22, 0, 21, -18, 25, 3, 5, 16, -23, 13, -1, 7, 8, 19, -8, 19, 12, 4, 18, 34, 0, 47, 11, -6, -10, 22, -22, -26, 5, 8, -17, 16, 31, -24, 5, -19, 2, 1, -32, 26, -17, 14, -2, -10, -4, 28, -3, 14, 31, -25, 8, -7, -3, 1, -8, 9, -12, 18, -31, -7, -3, 10, -8, 15, 6, -9, 5, -4, 3, 18, -34, 7, 3, 14, -27, -55, -2, 12, -18, 6, -1, -23, 19, -6, -6, -13, -32, 9, -8, -1, -13, -11, -4, 4, -1, 1, 15, -11, 24, -13, -24, 15, -36, 4, -14, 2, -31, -3, -22, 11, 0, 5, 18, 8, 21, -13, 3, 8, 2, 25, 10, 14, -13, -36, 2, 29, -10, 9, 32, 0, 6, -8, -8, -42, -9, -1, 2, -4, -9, -12, -11, 22, -5, 5, -9, -12, 2, 17, -6, -3, -5, 7, 9, -4, -29, -17, -34, 9, 11, 8, 21, -6, 6, 32, -13, -9, -23, -10, 17, 2, -23, -37, -6, 23, -5, 1, 26, 13, 33, 7, -19, -2, -4, -3, 4, 1, -8, -2, -15, 23, 13, -19, 14, 6, -10, 2, -22, 11, 5, -9, 14, -4, -6, -10, -13, 10, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,400 } };
const TfArray<1, float> quant5_scale = { 1, { 0.029432320967316628, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[8*1*3*32] = { 
  /* [0][0][][] */ 60,104,26,45,-60,96,67,-12,-12,-120,-104,-108,-60,-83,33,-17,-4,27,53,-7,-54,40,-73,1,37,11,-21,-51,-48,0,-29,31, 58,60,55,50,-32,6,60,29,55,42,26,-11,37,-29,35,-3,22,18,75,-12,37,-14,-127,5,36,-89,-126,-91,-126,-102,-59,-55, -76,-82,-3,6,-2,29,14,-28,-25,-19,-31,-70,-66,-52,-38,7,31,59,76,54,-6,40,13,2,-62,-12,52,56,46,36,-4,-23, 
  /* [1][0][][] */ 15,91,-11,-13,43,-32,15,-27,-14,-12,21,-31,-4,-4,-36,-32,-49,-73,-59,4,-2,15,-26,-47,-75,-91,-69,-72,-20,-3,-29,-63, 127,73,-19,-21,-35,-20,-40,-38,-48,48,57,104,38,21,19,-16,-14,60,19,68,35,58,23,15,-13,-30,34,70,37,-11,-40,-67, 28,46,-49,-56,9,-38,4,15,10,5,65,18,46,26,103,110,18,86,37,12,62,33,37,38,3,-2,31,45,45,-14,-38,-65, 
  /* [2][0][][] */ -4,-127,-68,-40,-21,-77,-25,93,73,48,34,85,-20,-39,9,-126,-28,-74,-86,22,28,68,-50,-66,-3,-42,29,-60,-56,-38,-15,28, 3,-89,13,27,-3,-1,26,12,3,-21,9,33,-62,-84,-81,-92,25,-52,-8,12,99,83,-25,-39,-37,-4,77,26,41,38,11,73, -81,-2,-99,-73,-126,-58,-19,-109,-112,-15,6,-77,-44,-96,-97,-14,75,-50,16,17,43,40,30,-46,-120,-119,-27,-57,-25,-3,-11,17, 
  /* [3][0][][] */ -97,37,2,19,91,15,53,-4,-17,-54,-72,-123,-14,-40,23,9,-3,-17,-91,-28,-26,8,-22,-19,7,-40,-20,-59,12,43,63,79, 78,-122,-46,-40,-69,24,31,30,37,73,-12,25,60,12,92,34,-29,-9,-83,-9,-20,2,-5,17,18,-27,-53,-61,-17,-48,-8,-17, -54,-99,-74,-71,13,69,96,35,32,50,-25,14,-33,-7,127,82,9,17,-31,-4,9,27,23,52,20,-6,-14,5,38,-32,-26,-72, 
  /* [4][0][][] */ 1,22,51,65,26,-62,20,28,15,21,41,-27,38,98,-18,15,12,-40,61,-18,-25,-26,-41,-5,15,43,-28,5,30,-11,23,59, 6,13,59,60,-54,-35,1,12,0,37,5,-52,6,47,-72,-4,-54,-26,56,-14,-62,-56,-39,14,-12,23,-41,10,-7,-54,-33,-8, 28,-10,25,39,-27,-67,39,0,-13,17,8,-46,-48,4,-64,-99,-127,-86,-38,-52,-40,-42,-73,-44,-74,30,-12,-24,8,-34,-39,-43, 
  /* [5][0][][] */ 127,20,24,24,36,47,-4,-21,-13,-17,-23,6,28,12,-13,-4,-22,-10,-2,3,-18,10,9,0,16,12,22,-8,-9,18,14,34, 98,6,-23,-13,15,48,-13,-48,-50,-20,-40,-11,-21,0,-16,4,-49,-13,-4,-36,-31,-25,-29,-15,9,4,20,-14,-22,5,-1,19, 100,47,-14,-14,67,67,4,-4,-12,5,-15,16,-2,23,-14,0,-15,-20,1,-20,-7,-5,-5,-2,25,10,5,2,-3,18,8,33, 
  /* [6][0][][] */ -124,-91,-4,-3,-24,-76,-30,49,38,-80,1,77,24,-41,-20,29,-15,-37,39,25,-34,-47,66,0,-10,22,16,0,-34,9,-25,-15, -127,-73,6,16,-27,-42,-87,63,54,-96,-14,79,-33,-12,-35,27,1,-27,9,-21,-29,-48,32,26,-33,17,-8,8,-47,17,13,-7, -103,-57,4,6,47,-76,-51,44,42,-78,0,60,-21,-20,8,-1,-56,-47,-5,9,-40,-43,69,-9,-3,17,-5,-7,-36,23,16,6, 
  /* [7][0][][] */ 46,30,15,23,-23,-28,-34,12,7,27,-77,-103,-57,-23,62,-8,-77,-22,-6,-11,72,11,27,35,37,-38,28,38,-22,-24,-48,-36, 37,25,-12,-15,-81,3,35,12,9,-31,-81,-68,-55,-67,52,30,3,31,9,-7,-1,9,6,-36,10,-127,-46,-120,-71,-83,13,50, 83,5,15,6,-5,10,32,29,30,47,-8,12,51,-30,17,4,-65,-58,-51,-48,-21,-27,35,57,31,-109,-75,-111,-106,-70,5,91, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,32 } };
const TfArray<8, float> quant6_scale = { 8, { 0.015947479754686356, 0.012703532353043556, 0.01253653597086668, 0.016063563525676727, 0.018053257837891579, 0.023247605189681053, 0.023027567192912102, 0.023427620530128479, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -85,-24,-9,-13,-62,-112,87,-119, -75,-23,-31,-10,0,-80,-1,-117, -70,-57,10,-27,11,-127,70,-111, 
  /* [1][0][][] */ -28,14,30,12,-83,-30,-87,-76, -127,-24,-55,-46,-78,-31,-50,-61, 70,15,66,61,-28,-31,7,78, 
  /* [2][0][][] */ 7,11,14,11,12,3,-5,83, 85,-47,51,-47,-15,-27,21,37, -17,-127,-33,-38,-8,-91,0,-19, 
  /* [3][0][][] */ -70,-34,-3,-9,-11,-1,27,-66, -106,-18,-13,-24,5,5,22,-69, -127,-69,37,2,48,7,12,-92, 
  /* [4][0][][] */ 38,1,51,42,-30,-8,-34,61, -10,-80,14,-62,-23,-18,-10,2, 11,-28,-16,8,-13,-8,-23,127, 
  /* [5][0][][] */ -16,-67,-17,27,-104,56,25,127, 3,-127,7,-57,-71,-14,-37,-16, -1,-70,-45,0,-122,12,1,57, 
  /* [6][0][][] */ 44,-15,69,-51,-41,-40,127,18, 17,2,-12,-63,-84,35,18,-96, -95,-4,-6,-59,-6,-3,-19,-6, 
  /* [7][0][][] */ 39,-127,26,-28,-10,-27,-7,88, -1,-56,30,-9,14,-44,55,-3, 115,-62,23,-33,50,1,-16,124, 
  /* [8][0][][] */ -9,-45,-12,-127,13,-23,27,31, -5,-81,22,-63,25,-3,-40,45, 1,-25,25,-84,32,-2,-44,18, 
  /* [9][0][][] */ 117,-15,37,65,-28,-15,-34,78, -123,30,97,-83,28,-31,29,5, -125,-69,112,-62,-34,-127,-41,-103, 
  /* [10][0][][] */ -93,-9,10,-32,-70,-93,-34,-77, -127,-41,-7,-38,-12,-70,78,-73, -71,-32,35,-13,6,-106,4,-77, 
  /* [11][0][][] */ -76,-15,67,-65,-106,-10,-20,-67, -24,34,37,-31,-92,-21,-32,17, 127,-18,66,53,12,-10,46,15, 
  /* [12][0][][] */ -67,-32,-45,-17,-25,11,44,-127, -63,-30,-9,-23,67,-24,117,-120, -72,-4,-14,0,62,-36,-3,-70, 
  /* [13][0][][] */ -59,-31,-2,4,6,-13,-18,-127, -48,-28,23,9,91,-3,-85,-94, -30,-11,31,21,-4,9,104,-28, 
  /* [14][0][][] */ -70,-20,15,-23,-35,7,23,-127, -23,10,21,-43,72,5,2,-111, -47,16,28,5,10,22,-52,-49, 
  /* [15][0][][] */ 78,-7,25,27,11,-2,-38,91, 15,-23,74,-65,3,-22,-12,25, -16,-127,-15,-105,4,-17,-12,66, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.016798656433820724, 0.016951164230704308, 0.022470779716968536, 0.021624637767672539, 0.021046208217740059, 0.0093735232949256897, 0.012503176927566528, 0.011334151029586792, 0.02071874588727951, 0.0099181784316897392, 0.020391769707202911, 0.015042650513350964, 0.015757933259010315, 0.013234381563961506, 0.015915976837277412, 0.021697463467717171, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 98, 32, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 98, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 49, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 49, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,98,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,98,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.039008107036352158, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,98,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.039008107036352158, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,49,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.039008107036352158, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,49,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.039008107036352158, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,49,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.032424435019493103, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,49,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.032424435019493103, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.032424435019493103, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.032424435019493103, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 1.49577796459198, } };
const TfArray<1, int> quant21_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension13, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension17, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
