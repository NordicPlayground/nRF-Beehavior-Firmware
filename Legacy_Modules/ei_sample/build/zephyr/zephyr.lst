
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   0:	00 6a 02 20 e9 8c 00 00 f5 7e 01 00 bd 8c 00 00     .j. .....~......
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10:	bd 8c 00 00 bd 8c 00 00 bd 8c 00 00 00 00 00 00     ................
	...
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
  2c:	75 84 00 00 bd 8c 00 00 00 00 00 00 e5 83 00 00     u...............
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
  3c:	bd 8c 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
  50:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
  60:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
	if (!fs->sector_size || fs->sector_size % info.size) {
  70:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
	if (fs->sector_count < 2) {
  80:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  90:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
  a0:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
	for (i = 0; i < fs->sector_count; i++) {
  b0:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
  c0:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
			nvs_sector_advance(fs, &addr);
  d0:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
	rc = nvs_recover_last_ate(fs, &addr);
  e0:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................
	fs->data_wra = addr & ADDR_SECT_MASK;
  f0:	e9 85 00 00 e9 85 00 00 e9 85 00 00 e9 85 00 00     ................

Disassembly of section text:

00000100 <memchr>:
	while (fs->ate_wra >= fs->data_wra) {
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
		if (rc) {
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
		if (data8[i] != value) {
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	nvs_sector_advance(fs, &addr);
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
	addr = fs->ate_wra & ADDR_SECT_MASK;
     12a:	f022 0407 	bic.w	r4, r2, #7
	nvs_sector_advance(fs, &addr);
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
	if (rc < 0) {
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
		       (uint16_t)(fs->sector_size - ate_size);
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
		addr = (i << ADDR_SECT_SHIFT) +
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
		if (rc) {
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
			nvs_sector_advance(fs, &addr);
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
			closed_sectors++;
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
			closed_sectors++;
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
			if (!rc) {
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
	for (i = 0; i < fs->sector_count; i++) {
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
				rc = -ESPIPE;
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
		addr = fs->ate_wra + ate_size;
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
		LOG_INF("No GC Done marker found: restarting gc");
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
		if (rc) {
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
		fs->ate_wra &= ADDR_SECT_MASK;
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     1d2:	f000 80e2 	beq.w	39a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9a>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
		rc = nvs_gc(fs);
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     1ea:	ea81 0303 	eor.w	r3, r1, r3
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
			if (rc) {
     1fa:	ea81 0303 	eor.w	r3, r1, r3
			if (nvs_ate_valid(fs, &gc_done_ate) &&
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
			    (gc_done_ate.id == 0xffff) &&
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
			addr += ate_size;
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
		if (rc < 0) {
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
		fs->data_wra += fs->flash_parameters->write_block_size;
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     238:	f1a4 0401 	sub.w	r4, r4, #1
	while (fs->ate_wra > fs->data_wra) {
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     25a:	4159      	adcs	r1, r3
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
		if (rc) {
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     272:	fa43 f305 	asr.w	r3, r3, r5
		      (fs->sector_size - 2 * ate_size))) {
     276:	18c0      	adds	r0, r0, r3
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
		rc = nvs_add_gc_done_ate(fs);
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
		rc = -EDEADLK;
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
	if (rc) {
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
	LOG_INF("alloc wra: %d, %x",
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
	LOG_INF("data wra: %d, %x",
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
			LOG_INF("GC Done marker found");
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
			nvs_sector_advance(fs, &addr);
     340:	3c1f      	subs	r4, #31
			addr = fs->ate_wra & ADDR_SECT_MASK;
     342:	da1c      	bge.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     344:	340c      	adds	r4, #12
			nvs_sector_advance(fs, &addr);
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
			rc = nvs_flash_erase_sector(fs, addr);
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
			goto end;
     358:	ea40 0003 	orr.w	r0, r0, r3
		if (nvs_ate_valid(fs, &last_ate)) {
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
			fs->data_wra = addr & ADDR_SECT_MASK;
     36a:	f1c4 0220 	rsb	r2, r4, #32
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
			fs->data_wra = addr & ADDR_SECT_MASK;
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     386:	f094 0f00 	teq	r4, #0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
		fs->ate_wra -= ate_size;
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__data_size+0x16a>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__data_size+0x42>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__data_size+0xe>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__data_size+0x6c>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__data_size+0x1c6>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__data_size+0xf2>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__data_size+0xc2>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__data_size+0x150>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__data_size+0x134>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__data_size+0x154>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__data_size+0x194>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__data_size+0x12a>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__data_size+0x1d8>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__data_size+0x1b0>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__data_size+0x1d8>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__data_size+0x1c2>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__data_size+0x1d8>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__data_size+0x6c>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__data_size+0x6c>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__data_size+0x6c>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__data_size+0x1d8>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__data_size+0x1d8>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__data_size+0x1c2>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__data_size+0x1d8>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__data_size+0x186>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__data_size+0x1d8>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__data_size+0x12a>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__data_size+0x1c2>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__data_size+0x186>
     93a:	e712      	b.n	762 <__data_size+0x1d8>

0000093c <__gedf2>:
     93c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     940:	e006      	b.n	950 <__cmpdf2+0x4>
     942:	bf00      	nop

00000944 <__ledf2>:
     944:	f04f 0c01 	mov.w	ip, #1
     948:	e002      	b.n	950 <__cmpdf2+0x4>
     94a:	bf00      	nop

0000094c <__cmpdf2>:
     94c:	f04f 0c01 	mov.w	ip, #1
     950:	f84d cd04 	str.w	ip, [sp, #-4]!
     954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     95c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     960:	bf18      	it	ne
     962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     966:	d01b      	beq.n	9a0 <__cmpdf2+0x54>
     968:	b001      	add	sp, #4
     96a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     96e:	bf0c      	ite	eq
     970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     974:	ea91 0f03 	teqne	r1, r3
     978:	bf02      	ittt	eq
     97a:	ea90 0f02 	teqeq	r0, r2
     97e:	2000      	moveq	r0, #0
     980:	4770      	bxeq	lr
     982:	f110 0f00 	cmn.w	r0, #0
     986:	ea91 0f03 	teq	r1, r3
     98a:	bf58      	it	pl
     98c:	4299      	cmppl	r1, r3
     98e:	bf08      	it	eq
     990:	4290      	cmpeq	r0, r2
     992:	bf2c      	ite	cs
     994:	17d8      	asrcs	r0, r3, #31
     996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     99a:	f040 0001 	orr.w	r0, r0, #1
     99e:	4770      	bx	lr
     9a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9a8:	d102      	bne.n	9b0 <__cmpdf2+0x64>
     9aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9ae:	d107      	bne.n	9c0 <__cmpdf2+0x74>
     9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9b8:	d1d6      	bne.n	968 <__cmpdf2+0x1c>
     9ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9be:	d0d3      	beq.n	968 <__cmpdf2+0x1c>
     9c0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <__aeabi_cdrcmple>:
     9c8:	4684      	mov	ip, r0
     9ca:	4610      	mov	r0, r2
     9cc:	4662      	mov	r2, ip
     9ce:	468c      	mov	ip, r1
     9d0:	4619      	mov	r1, r3
     9d2:	4663      	mov	r3, ip
     9d4:	e000      	b.n	9d8 <__aeabi_cdcmpeq>
     9d6:	bf00      	nop

000009d8 <__aeabi_cdcmpeq>:
     9d8:	b501      	push	{r0, lr}
     9da:	f7ff ffb7 	bl	94c <__cmpdf2>
     9de:	2800      	cmp	r0, #0
     9e0:	bf48      	it	mi
     9e2:	f110 0f00 	cmnmi.w	r0, #0
     9e6:	bd01      	pop	{r0, pc}

000009e8 <__aeabi_dcmpeq>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff fff4 	bl	9d8 <__aeabi_cdcmpeq>
     9f0:	bf0c      	ite	eq
     9f2:	2001      	moveq	r0, #1
     9f4:	2000      	movne	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_dcmplt>:
     9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
     a00:	f7ff ffea 	bl	9d8 <__aeabi_cdcmpeq>
     a04:	bf34      	ite	cc
     a06:	2001      	movcc	r0, #1
     a08:	2000      	movcs	r0, #0
     a0a:	f85d fb08 	ldr.w	pc, [sp], #8
     a0e:	bf00      	nop

00000a10 <__aeabi_dcmple>:
     a10:	f84d ed08 	str.w	lr, [sp, #-8]!
     a14:	f7ff ffe0 	bl	9d8 <__aeabi_cdcmpeq>
     a18:	bf94      	ite	ls
     a1a:	2001      	movls	r0, #1
     a1c:	2000      	movhi	r0, #0
     a1e:	f85d fb08 	ldr.w	pc, [sp], #8
     a22:	bf00      	nop

00000a24 <__aeabi_dcmpge>:
     a24:	f84d ed08 	str.w	lr, [sp, #-8]!
     a28:	f7ff ffce 	bl	9c8 <__aeabi_cdrcmple>
     a2c:	bf94      	ite	ls
     a2e:	2001      	movls	r0, #1
     a30:	2000      	movhi	r0, #0
     a32:	f85d fb08 	ldr.w	pc, [sp], #8
     a36:	bf00      	nop

00000a38 <__aeabi_dcmpgt>:
     a38:	f84d ed08 	str.w	lr, [sp, #-8]!
     a3c:	f7ff ffc4 	bl	9c8 <__aeabi_cdrcmple>
     a40:	bf34      	ite	cc
     a42:	2001      	movcc	r0, #1
     a44:	2000      	movcs	r0, #0
     a46:	f85d fb08 	ldr.w	pc, [sp], #8
     a4a:	bf00      	nop

00000a4c <__aeabi_d2f>:
     a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a54:	bf24      	itt	cs
     a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a5e:	d90d      	bls.n	a7c <__aeabi_d2f+0x30>
     a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a74:	bf08      	it	eq
     a76:	f020 0001 	biceq.w	r0, r0, #1
     a7a:	4770      	bx	lr
     a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a80:	d121      	bne.n	ac6 <__aeabi_d2f+0x7a>
     a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a86:	bfbc      	itt	lt
     a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a8c:	4770      	bxlt	lr
     a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a96:	f1c2 0218 	rsb	r2, r2, #24
     a9a:	f1c2 0c20 	rsb	ip, r2, #32
     a9e:	fa10 f30c 	lsls.w	r3, r0, ip
     aa2:	fa20 f002 	lsr.w	r0, r0, r2
     aa6:	bf18      	it	ne
     aa8:	f040 0001 	orrne.w	r0, r0, #1
     aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
     ab8:	ea40 000c 	orr.w	r0, r0, ip
     abc:	fa23 f302 	lsr.w	r3, r3, r2
     ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     ac4:	e7cc      	b.n	a60 <__aeabi_d2f+0x14>
     ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     aca:	d107      	bne.n	adc <__aeabi_d2f+0x90>
     acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ad0:	bf1e      	ittt	ne
     ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ada:	4770      	bxne	lr
     adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ae8:	4770      	bx	lr
     aea:	bf00      	nop

00000aec <__aeabi_ldivmod>:
     aec:	b97b      	cbnz	r3, b0e <__aeabi_ldivmod+0x22>
     aee:	b972      	cbnz	r2, b0e <__aeabi_ldivmod+0x22>
     af0:	2900      	cmp	r1, #0
     af2:	bfbe      	ittt	lt
     af4:	2000      	movlt	r0, #0
     af6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     afa:	e006      	blt.n	b0a <__aeabi_ldivmod+0x1e>
     afc:	bf08      	it	eq
     afe:	2800      	cmpeq	r0, #0
     b00:	bf1c      	itt	ne
     b02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     b06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     b0a:	f000 b875 	b.w	bf8 <__aeabi_idiv0>
     b0e:	f1ad 0c08 	sub.w	ip, sp, #8
     b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     b16:	2900      	cmp	r1, #0
     b18:	db09      	blt.n	b2e <__aeabi_ldivmod+0x42>
     b1a:	2b00      	cmp	r3, #0
     b1c:	db1a      	blt.n	b54 <__aeabi_ldivmod+0x68>
     b1e:	f000 f8e2 	bl	ce6 <__udivmoddi4>
     b22:	f8dd e004 	ldr.w	lr, [sp, #4]
     b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b2a:	b004      	add	sp, #16
     b2c:	4770      	bx	lr
     b2e:	4240      	negs	r0, r0
     b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b34:	2b00      	cmp	r3, #0
     b36:	db1b      	blt.n	b70 <__aeabi_ldivmod+0x84>
     b38:	f000 f8d5 	bl	ce6 <__udivmoddi4>
     b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
     b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b44:	b004      	add	sp, #16
     b46:	4240      	negs	r0, r0
     b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b4c:	4252      	negs	r2, r2
     b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b52:	4770      	bx	lr
     b54:	4252      	negs	r2, r2
     b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b5a:	f000 f8c4 	bl	ce6 <__udivmoddi4>
     b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
     b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b66:	b004      	add	sp, #16
     b68:	4240      	negs	r0, r0
     b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b6e:	4770      	bx	lr
     b70:	4252      	negs	r2, r2
     b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b76:	f000 f8b6 	bl	ce6 <__udivmoddi4>
     b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
     b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b82:	b004      	add	sp, #16
     b84:	4252      	negs	r2, r2
     b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b8a:	4770      	bx	lr

00000b8c <__aeabi_uldivmod>:
     b8c:	b953      	cbnz	r3, ba4 <__aeabi_uldivmod+0x18>
     b8e:	b94a      	cbnz	r2, ba4 <__aeabi_uldivmod+0x18>
     b90:	2900      	cmp	r1, #0
     b92:	bf08      	it	eq
     b94:	2800      	cmpeq	r0, #0
     b96:	bf1c      	itt	ne
     b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     ba0:	f000 b82a 	b.w	bf8 <__aeabi_idiv0>
     ba4:	f1ad 0c08 	sub.w	ip, sp, #8
     ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     bac:	f000 f89b 	bl	ce6 <__udivmoddi4>
     bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
     bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bb8:	b004      	add	sp, #16
     bba:	4770      	bx	lr

00000bbc <__aeabi_d2ulz>:
     bbc:	b5d0      	push	{r4, r6, r7, lr}
     bbe:	4b0c      	ldr	r3, [pc, #48]	; (bf0 <__aeabi_d2ulz+0x34>)
     bc0:	2200      	movs	r2, #0
     bc2:	4606      	mov	r6, r0
     bc4:	460f      	mov	r7, r1
     bc6:	f7ff fca7 	bl	518 <__aeabi_dmul>
     bca:	f000 f817 	bl	bfc <__aeabi_d2uiz>
     bce:	4604      	mov	r4, r0
     bd0:	f7ff fc28 	bl	424 <__aeabi_ui2d>
     bd4:	4b07      	ldr	r3, [pc, #28]	; (bf4 <__aeabi_d2ulz+0x38>)
     bd6:	2200      	movs	r2, #0
     bd8:	f7ff fc9e 	bl	518 <__aeabi_dmul>
     bdc:	4602      	mov	r2, r0
     bde:	460b      	mov	r3, r1
     be0:	4630      	mov	r0, r6
     be2:	4639      	mov	r1, r7
     be4:	f7ff fae0 	bl	1a8 <__aeabi_dsub>
     be8:	f000 f808 	bl	bfc <__aeabi_d2uiz>
     bec:	4621      	mov	r1, r4
     bee:	bdd0      	pop	{r4, r6, r7, pc}
     bf0:	3df00000 	.word	0x3df00000
     bf4:	41f00000 	.word	0x41f00000

00000bf8 <__aeabi_idiv0>:
     bf8:	4770      	bx	lr
     bfa:	bf00      	nop

00000bfc <__aeabi_d2uiz>:
     bfc:	004a      	lsls	r2, r1, #1
     bfe:	d211      	bcs.n	c24 <__aeabi_d2uiz+0x28>
     c00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     c04:	d211      	bcs.n	c2a <__aeabi_d2uiz+0x2e>
     c06:	d50d      	bpl.n	c24 <__aeabi_d2uiz+0x28>
     c08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     c10:	d40e      	bmi.n	c30 <__aeabi_d2uiz+0x34>
     c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     c1e:	fa23 f002 	lsr.w	r0, r3, r2
     c22:	4770      	bx	lr
     c24:	f04f 0000 	mov.w	r0, #0
     c28:	4770      	bx	lr
     c2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     c2e:	d102      	bne.n	c36 <__aeabi_d2uiz+0x3a>
     c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c34:	4770      	bx	lr
     c36:	f04f 0000 	mov.w	r0, #0
     c3a:	4770      	bx	lr

00000c3c <__aeabi_dcmpun>:
     c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c44:	d102      	bne.n	c4c <__aeabi_dcmpun+0x10>
     c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     c4a:	d10a      	bne.n	c62 <__aeabi_dcmpun+0x26>
     c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c54:	d102      	bne.n	c5c <__aeabi_dcmpun+0x20>
     c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     c5a:	d102      	bne.n	c62 <__aeabi_dcmpun+0x26>
     c5c:	f04f 0000 	mov.w	r0, #0
     c60:	4770      	bx	lr
     c62:	f04f 0001 	mov.w	r0, #1
     c66:	4770      	bx	lr

00000c68 <__aeabi_d2iz>:
     c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
     c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     c70:	d215      	bcs.n	c9e <__aeabi_d2iz+0x36>
     c72:	d511      	bpl.n	c98 <__aeabi_d2iz+0x30>
     c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     c7c:	d912      	bls.n	ca4 <__aeabi_d2iz+0x3c>
     c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     c8e:	fa23 f002 	lsr.w	r0, r3, r2
     c92:	bf18      	it	ne
     c94:	4240      	negne	r0, r0
     c96:	4770      	bx	lr
     c98:	f04f 0000 	mov.w	r0, #0
     c9c:	4770      	bx	lr
     c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     ca2:	d105      	bne.n	cb0 <__aeabi_d2iz+0x48>
     ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     ca8:	bf08      	it	eq
     caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     cae:	4770      	bx	lr
     cb0:	f04f 0000 	mov.w	r0, #0
     cb4:	4770      	bx	lr
     cb6:	bf00      	nop

00000cb8 <__aeabi_d2lz>:
     cb8:	b538      	push	{r3, r4, r5, lr}
     cba:	2200      	movs	r2, #0
     cbc:	2300      	movs	r3, #0
     cbe:	4604      	mov	r4, r0
     cc0:	460d      	mov	r5, r1
     cc2:	f7ff fe9b 	bl	9fc <__aeabi_dcmplt>
     cc6:	b928      	cbnz	r0, cd4 <__aeabi_d2lz+0x1c>
     cc8:	4620      	mov	r0, r4
     cca:	4629      	mov	r1, r5
     ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     cd0:	f7ff bf74 	b.w	bbc <__aeabi_d2ulz>
     cd4:	4620      	mov	r0, r4
     cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
     cda:	f7ff ff6f 	bl	bbc <__aeabi_d2ulz>
     cde:	4240      	negs	r0, r0
     ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ce4:	bd38      	pop	{r3, r4, r5, pc}

00000ce6 <__udivmoddi4>:
     ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cea:	9e09      	ldr	r6, [sp, #36]	; 0x24
     cec:	4688      	mov	r8, r1
     cee:	468e      	mov	lr, r1
     cf0:	4615      	mov	r5, r2
     cf2:	4604      	mov	r4, r0
     cf4:	4619      	mov	r1, r3
     cf6:	2b00      	cmp	r3, #0
     cf8:	f040 80c7 	bne.w	e8a <__udivmoddi4+0x1a4>
     cfc:	4542      	cmp	r2, r8
     cfe:	fab2 f782 	clz	r7, r2
     d02:	d946      	bls.n	d92 <__udivmoddi4+0xac>
     d04:	b14f      	cbz	r7, d1a <__udivmoddi4+0x34>
     d06:	f1c7 0c20 	rsb	ip, r7, #32
     d0a:	fa08 f307 	lsl.w	r3, r8, r7
     d0e:	fa20 fc0c 	lsr.w	ip, r0, ip
     d12:	40bd      	lsls	r5, r7
     d14:	ea4c 0e03 	orr.w	lr, ip, r3
     d18:	40bc      	lsls	r4, r7
     d1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     d1e:	fa1f fc85 	uxth.w	ip, r5
     d22:	fbbe f9f8 	udiv	r9, lr, r8
     d26:	0c22      	lsrs	r2, r4, #16
     d28:	fb08 e319 	mls	r3, r8, r9, lr
     d2c:	fb09 fa0c 	mul.w	sl, r9, ip
     d30:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     d34:	459a      	cmp	sl, r3
     d36:	d928      	bls.n	d8a <__udivmoddi4+0xa4>
     d38:	18eb      	adds	r3, r5, r3
     d3a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     d3e:	d204      	bcs.n	d4a <__udivmoddi4+0x64>
     d40:	459a      	cmp	sl, r3
     d42:	d902      	bls.n	d4a <__udivmoddi4+0x64>
     d44:	f1a9 0002 	sub.w	r0, r9, #2
     d48:	442b      	add	r3, r5
     d4a:	eba3 030a 	sub.w	r3, r3, sl
     d4e:	b2a4      	uxth	r4, r4
     d50:	fbb3 f2f8 	udiv	r2, r3, r8
     d54:	fb08 3312 	mls	r3, r8, r2, r3
     d58:	fb02 fc0c 	mul.w	ip, r2, ip
     d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d60:	45a4      	cmp	ip, r4
     d62:	d914      	bls.n	d8e <__udivmoddi4+0xa8>
     d64:	192c      	adds	r4, r5, r4
     d66:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     d6a:	d203      	bcs.n	d74 <__udivmoddi4+0x8e>
     d6c:	45a4      	cmp	ip, r4
     d6e:	d901      	bls.n	d74 <__udivmoddi4+0x8e>
     d70:	1e93      	subs	r3, r2, #2
     d72:	442c      	add	r4, r5
     d74:	eba4 040c 	sub.w	r4, r4, ip
     d78:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d7c:	b11e      	cbz	r6, d86 <__udivmoddi4+0xa0>
     d7e:	40fc      	lsrs	r4, r7
     d80:	2300      	movs	r3, #0
     d82:	6034      	str	r4, [r6, #0]
     d84:	6073      	str	r3, [r6, #4]
     d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d8a:	4648      	mov	r0, r9
     d8c:	e7dd      	b.n	d4a <__udivmoddi4+0x64>
     d8e:	4613      	mov	r3, r2
     d90:	e7f0      	b.n	d74 <__udivmoddi4+0x8e>
     d92:	b902      	cbnz	r2, d96 <__udivmoddi4+0xb0>
     d94:	deff      	udf	#255	; 0xff
     d96:	bb8f      	cbnz	r7, dfc <__udivmoddi4+0x116>
     d98:	eba8 0302 	sub.w	r3, r8, r2
     d9c:	2101      	movs	r1, #1
     d9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     da2:	b2aa      	uxth	r2, r5
     da4:	fbb3 fcfe 	udiv	ip, r3, lr
     da8:	0c20      	lsrs	r0, r4, #16
     daa:	fb0e 331c 	mls	r3, lr, ip, r3
     dae:	fb0c f802 	mul.w	r8, ip, r2
     db2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     db6:	4598      	cmp	r8, r3
     db8:	d963      	bls.n	e82 <__udivmoddi4+0x19c>
     dba:	18eb      	adds	r3, r5, r3
     dbc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     dc0:	d204      	bcs.n	dcc <__udivmoddi4+0xe6>
     dc2:	4598      	cmp	r8, r3
     dc4:	d902      	bls.n	dcc <__udivmoddi4+0xe6>
     dc6:	f1ac 0002 	sub.w	r0, ip, #2
     dca:	442b      	add	r3, r5
     dcc:	eba3 0308 	sub.w	r3, r3, r8
     dd0:	b2a4      	uxth	r4, r4
     dd2:	fbb3 fcfe 	udiv	ip, r3, lr
     dd6:	fb0e 331c 	mls	r3, lr, ip, r3
     dda:	fb0c f202 	mul.w	r2, ip, r2
     dde:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     de2:	42a2      	cmp	r2, r4
     de4:	d94f      	bls.n	e86 <__udivmoddi4+0x1a0>
     de6:	192c      	adds	r4, r5, r4
     de8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     dec:	d204      	bcs.n	df8 <__udivmoddi4+0x112>
     dee:	42a2      	cmp	r2, r4
     df0:	d902      	bls.n	df8 <__udivmoddi4+0x112>
     df2:	f1ac 0302 	sub.w	r3, ip, #2
     df6:	442c      	add	r4, r5
     df8:	1aa4      	subs	r4, r4, r2
     dfa:	e7bd      	b.n	d78 <__udivmoddi4+0x92>
     dfc:	f1c7 0c20 	rsb	ip, r7, #32
     e00:	fa28 f90c 	lsr.w	r9, r8, ip
     e04:	fa08 f307 	lsl.w	r3, r8, r7
     e08:	fa20 fc0c 	lsr.w	ip, r0, ip
     e0c:	40bd      	lsls	r5, r7
     e0e:	ea4c 0203 	orr.w	r2, ip, r3
     e12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     e16:	b2ab      	uxth	r3, r5
     e18:	fbb9 fcfe 	udiv	ip, r9, lr
     e1c:	0c11      	lsrs	r1, r2, #16
     e1e:	fb0e 901c 	mls	r0, lr, ip, r9
     e22:	fb0c f803 	mul.w	r8, ip, r3
     e26:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     e2a:	4580      	cmp	r8, r0
     e2c:	fa04 f407 	lsl.w	r4, r4, r7
     e30:	d923      	bls.n	e7a <__udivmoddi4+0x194>
     e32:	1828      	adds	r0, r5, r0
     e34:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     e38:	d204      	bcs.n	e44 <__udivmoddi4+0x15e>
     e3a:	4580      	cmp	r8, r0
     e3c:	d902      	bls.n	e44 <__udivmoddi4+0x15e>
     e3e:	f1ac 0102 	sub.w	r1, ip, #2
     e42:	4428      	add	r0, r5
     e44:	eba0 0008 	sub.w	r0, r0, r8
     e48:	b292      	uxth	r2, r2
     e4a:	fbb0 fcfe 	udiv	ip, r0, lr
     e4e:	fb0e 001c 	mls	r0, lr, ip, r0
     e52:	fb0c f803 	mul.w	r8, ip, r3
     e56:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     e5a:	4598      	cmp	r8, r3
     e5c:	d90f      	bls.n	e7e <__udivmoddi4+0x198>
     e5e:	18eb      	adds	r3, r5, r3
     e60:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     e64:	d204      	bcs.n	e70 <__udivmoddi4+0x18a>
     e66:	4598      	cmp	r8, r3
     e68:	d902      	bls.n	e70 <__udivmoddi4+0x18a>
     e6a:	f1ac 0202 	sub.w	r2, ip, #2
     e6e:	442b      	add	r3, r5
     e70:	eba3 0308 	sub.w	r3, r3, r8
     e74:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     e78:	e791      	b.n	d9e <__udivmoddi4+0xb8>
     e7a:	4661      	mov	r1, ip
     e7c:	e7e2      	b.n	e44 <__udivmoddi4+0x15e>
     e7e:	4662      	mov	r2, ip
     e80:	e7f6      	b.n	e70 <__udivmoddi4+0x18a>
     e82:	4660      	mov	r0, ip
     e84:	e7a2      	b.n	dcc <__udivmoddi4+0xe6>
     e86:	4663      	mov	r3, ip
     e88:	e7b6      	b.n	df8 <__udivmoddi4+0x112>
     e8a:	4543      	cmp	r3, r8
     e8c:	d905      	bls.n	e9a <__udivmoddi4+0x1b4>
     e8e:	b10e      	cbz	r6, e94 <__udivmoddi4+0x1ae>
     e90:	e9c6 0800 	strd	r0, r8, [r6]
     e94:	2100      	movs	r1, #0
     e96:	4608      	mov	r0, r1
     e98:	e775      	b.n	d86 <__udivmoddi4+0xa0>
     e9a:	fab3 fc83 	clz	ip, r3
     e9e:	f1bc 0f00 	cmp.w	ip, #0
     ea2:	d110      	bne.n	ec6 <__udivmoddi4+0x1e0>
     ea4:	4543      	cmp	r3, r8
     ea6:	d301      	bcc.n	eac <__udivmoddi4+0x1c6>
     ea8:	4282      	cmp	r2, r0
     eaa:	d80a      	bhi.n	ec2 <__udivmoddi4+0x1dc>
     eac:	1a84      	subs	r4, r0, r2
     eae:	eb68 0303 	sbc.w	r3, r8, r3
     eb2:	2001      	movs	r0, #1
     eb4:	469e      	mov	lr, r3
     eb6:	2e00      	cmp	r6, #0
     eb8:	d068      	beq.n	f8c <__udivmoddi4+0x2a6>
     eba:	e9c6 4e00 	strd	r4, lr, [r6]
     ebe:	2100      	movs	r1, #0
     ec0:	e761      	b.n	d86 <__udivmoddi4+0xa0>
     ec2:	4660      	mov	r0, ip
     ec4:	e7f7      	b.n	eb6 <__udivmoddi4+0x1d0>
     ec6:	f1cc 0e20 	rsb	lr, ip, #32
     eca:	fa03 f30c 	lsl.w	r3, r3, ip
     ece:	fa22 f40e 	lsr.w	r4, r2, lr
     ed2:	431c      	orrs	r4, r3
     ed4:	fa20 f10e 	lsr.w	r1, r0, lr
     ed8:	fa08 f30c 	lsl.w	r3, r8, ip
     edc:	fa28 fb0e 	lsr.w	fp, r8, lr
     ee0:	4319      	orrs	r1, r3
     ee2:	ea4f 4914 	mov.w	r9, r4, lsr #16
     ee6:	fa02 f50c 	lsl.w	r5, r2, ip
     eea:	fbbb f8f9 	udiv	r8, fp, r9
     eee:	b2a3      	uxth	r3, r4
     ef0:	fb09 bb18 	mls	fp, r9, r8, fp
     ef4:	0c0a      	lsrs	r2, r1, #16
     ef6:	fb08 fa03 	mul.w	sl, r8, r3
     efa:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     efe:	4592      	cmp	sl, r2
     f00:	fa00 f70c 	lsl.w	r7, r0, ip
     f04:	d93e      	bls.n	f84 <__udivmoddi4+0x29e>
     f06:	18a2      	adds	r2, r4, r2
     f08:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     f0c:	d204      	bcs.n	f18 <__udivmoddi4+0x232>
     f0e:	4592      	cmp	sl, r2
     f10:	d902      	bls.n	f18 <__udivmoddi4+0x232>
     f12:	f1a8 0002 	sub.w	r0, r8, #2
     f16:	4422      	add	r2, r4
     f18:	eba2 020a 	sub.w	r2, r2, sl
     f1c:	b289      	uxth	r1, r1
     f1e:	fbb2 f8f9 	udiv	r8, r2, r9
     f22:	fb09 2218 	mls	r2, r9, r8, r2
     f26:	fb08 f303 	mul.w	r3, r8, r3
     f2a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
     f2e:	4293      	cmp	r3, r2
     f30:	d92a      	bls.n	f88 <__udivmoddi4+0x2a2>
     f32:	18a2      	adds	r2, r4, r2
     f34:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
     f38:	d204      	bcs.n	f44 <__udivmoddi4+0x25e>
     f3a:	4293      	cmp	r3, r2
     f3c:	d902      	bls.n	f44 <__udivmoddi4+0x25e>
     f3e:	f1a8 0102 	sub.w	r1, r8, #2
     f42:	4422      	add	r2, r4
     f44:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     f48:	fba0 9805 	umull	r9, r8, r0, r5
     f4c:	1ad2      	subs	r2, r2, r3
     f4e:	4542      	cmp	r2, r8
     f50:	464b      	mov	r3, r9
     f52:	4641      	mov	r1, r8
     f54:	d302      	bcc.n	f5c <__udivmoddi4+0x276>
     f56:	d106      	bne.n	f66 <__udivmoddi4+0x280>
     f58:	454f      	cmp	r7, r9
     f5a:	d204      	bcs.n	f66 <__udivmoddi4+0x280>
     f5c:	ebb9 0305 	subs.w	r3, r9, r5
     f60:	eb68 0104 	sbc.w	r1, r8, r4
     f64:	3801      	subs	r0, #1
     f66:	b18e      	cbz	r6, f8c <__udivmoddi4+0x2a6>
     f68:	1afc      	subs	r4, r7, r3
     f6a:	eb62 0701 	sbc.w	r7, r2, r1
     f6e:	fa07 fe0e 	lsl.w	lr, r7, lr
     f72:	fa24 f30c 	lsr.w	r3, r4, ip
     f76:	ea4e 0303 	orr.w	r3, lr, r3
     f7a:	fa27 f70c 	lsr.w	r7, r7, ip
     f7e:	e9c6 3700 	strd	r3, r7, [r6]
     f82:	e79c      	b.n	ebe <__udivmoddi4+0x1d8>
     f84:	4640      	mov	r0, r8
     f86:	e7c7      	b.n	f18 <__udivmoddi4+0x232>
     f88:	4641      	mov	r1, r8
     f8a:	e7db      	b.n	f44 <__udivmoddi4+0x25e>
     f8c:	4631      	mov	r1, r6
     f8e:	e6fa      	b.n	d86 <__udivmoddi4+0xa0>

00000f90 <strcmp>:
     f90:	f810 2b01 	ldrb.w	r2, [r0], #1
     f94:	f811 3b01 	ldrb.w	r3, [r1], #1
     f98:	2a01      	cmp	r2, #1
     f9a:	bf28      	it	cs
     f9c:	429a      	cmpcs	r2, r3
     f9e:	d0f7      	beq.n	f90 <strcmp>
     fa0:	1ad0      	subs	r0, r2, r3
     fa2:	4770      	bx	lr

00000fa4 <strlen>:
     fa4:	4603      	mov	r3, r0
     fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
     faa:	2a00      	cmp	r2, #0
     fac:	d1fb      	bne.n	fa6 <strlen+0x2>
     fae:	1a18      	subs	r0, r3, r0
     fb0:	3801      	subs	r0, #1
     fb2:	4770      	bx	lr
     fb4:	0000      	movs	r0, r0
	...

00000fb8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fbc:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
     fc0:	ed9f 8bab 	vldr	d8, [pc, #684]	; 1270 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x270>
{
     fc4:	b09b      	sub	sp, #108	; 0x6c
     fc6:	4681      	mov	r9, r0
     fc8:	468a      	mov	sl, r1
     fca:	4615      	mov	r5, r2
     fcc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     fce:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     fd0:	7828      	ldrb	r0, [r5, #0]
     fd2:	b910      	cbnz	r0, fda <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
     fd4:	4630      	mov	r0, r6
     fd6:	f000 bdcb 	b.w	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
			OUTC(*fp++);
     fda:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
     fdc:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     fde:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
     fe0:	d006      	beq.n	ff0 <cbvprintf+0x38>
			OUTC(*fp++);
     fe2:	4651      	mov	r1, sl
			OUTC('%');
     fe4:	47c8      	blx	r9
     fe6:	2800      	cmp	r0, #0
     fe8:	f2c0 85c2 	blt.w	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
     fec:	3601      	adds	r6, #1
		if (bps == NULL) {
     fee:	e22e      	b.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
		} state = {
     ff0:	2218      	movs	r2, #24
     ff2:	2100      	movs	r1, #0
     ff4:	a80c      	add	r0, sp, #48	; 0x30
     ff6:	f01a feae 	bl	1bd56 <memset>
	if (*sp == '%') {
     ffa:	786b      	ldrb	r3, [r5, #1]
     ffc:	2b25      	cmp	r3, #37	; 0x25
     ffe:	d059      	beq.n	10b4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb4>
    1000:	1c6a      	adds	r2, r5, #1
    1002:	4617      	mov	r7, r2
		switch (*sp) {
    1004:	f812 3b01 	ldrb.w	r3, [r2], #1
    1008:	2b2b      	cmp	r3, #43	; 0x2b
    100a:	f000 808b 	beq.w	1124 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x124>
    100e:	d879      	bhi.n	1104 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x104>
    1010:	2b20      	cmp	r3, #32
    1012:	f000 808c 	beq.w	112e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x12e>
    1016:	2b23      	cmp	r3, #35	; 0x23
    1018:	f000 808e 	beq.w	1138 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x138>
	if (conv->flag_zero && conv->flag_dash) {
    101c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1020:	f003 0244 	and.w	r2, r3, #68	; 0x44
    1024:	2a44      	cmp	r2, #68	; 0x44
    1026:	d103      	bne.n	1030 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x30>
		conv->flag_zero = false;
    1028:	f36f 1386 	bfc	r3, #6, #1
    102c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    1030:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1034:	970a      	str	r7, [sp, #40]	; 0x28
    1036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    103a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    103e:	783b      	ldrb	r3, [r7, #0]
    1040:	2b2a      	cmp	r3, #42	; 0x2a
    1042:	d17e      	bne.n	1142 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x142>
		conv->width_star = true;
    1044:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1048:	f043 0301 	orr.w	r3, r3, #1
    104c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    1050:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
    1052:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
    1054:	781a      	ldrb	r2, [r3, #0]
    1056:	2a2e      	cmp	r2, #46	; 0x2e
    1058:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    105c:	bf0c      	ite	eq
    105e:	2101      	moveq	r1, #1
    1060:	2100      	movne	r1, #0
    1062:	f361 0241 	bfi	r2, r1, #1, #1
    1066:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    106a:	d10b      	bne.n	1084 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x84>
	++sp;
    106c:	1c5a      	adds	r2, r3, #1
    106e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
    1070:	785a      	ldrb	r2, [r3, #1]
    1072:	2a2a      	cmp	r2, #42	; 0x2a
    1074:	d17b      	bne.n	116e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x16e>
		conv->prec_star = true;
    1076:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    107a:	f042 0204 	orr.w	r2, r2, #4
    107e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    1082:	3302      	adds	r3, #2
	switch (*sp) {
    1084:	4619      	mov	r1, r3
    1086:	f811 0b01 	ldrb.w	r0, [r1], #1
    108a:	286c      	cmp	r0, #108	; 0x6c
    108c:	f000 80cf 	beq.w	122e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x22e>
    1090:	d87d      	bhi.n	118e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x18e>
    1092:	2868      	cmp	r0, #104	; 0x68
    1094:	f000 8084 	beq.w	11a0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1a0>
    1098:	286a      	cmp	r0, #106	; 0x6a
    109a:	f000 80d2 	beq.w	1242 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x242>
    109e:	284c      	cmp	r0, #76	; 0x4c
    10a0:	f000 80d6 	beq.w	1250 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x250>
		conv->length_mod = LENGTH_NONE;
    10a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    10a8:	f36f 02c6 	bfc	r2, #3, #4
    10ac:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    10b0:	4619      	mov	r1, r3
    10b2:	e080      	b.n	11b6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1b6>
		conv->specifier = *sp++;
    10b4:	1caa      	adds	r2, r5, #2
    10b6:	9202      	str	r2, [sp, #8]
    10b8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    10bc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    10c0:	07df      	lsls	r7, r3, #31
    10c2:	f140 8178 	bpl.w	13b6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3b6>
			width = va_arg(ap, int);
    10c6:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    10ca:	f1bb 0f00 	cmp.w	fp, #0
    10ce:	da07      	bge.n	10e0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xe0>
				conv->flag_dash = true;
    10d0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    10d4:	f042 0204 	orr.w	r2, r2, #4
    10d8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    10dc:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    10e0:	0758      	lsls	r0, r3, #29
    10e2:	f140 8171 	bpl.w	13c8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3c8>
			int arg = va_arg(ap, int);
    10e6:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    10ea:	f1b8 0f00 	cmp.w	r8, #0
    10ee:	f280 8170 	bge.w	13d2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3d2>
				conv->prec_present = false;
    10f2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    10f6:	f36f 0341 	bfc	r3, #1, #1
    10fa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    10fe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1102:	e166      	b.n	13d2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3d2>
		switch (*sp) {
    1104:	2b2d      	cmp	r3, #45	; 0x2d
    1106:	d006      	beq.n	1116 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x116>
    1108:	2b30      	cmp	r3, #48	; 0x30
    110a:	d187      	bne.n	101c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1c>
			conv->flag_zero = true;
    110c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1114:	e003      	b.n	111e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x11e>
			conv->flag_dash = true;
    1116:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    111a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    111e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    1122:	e76e      	b.n	1002 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x2>
			conv->flag_plus = true;
    1124:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1128:	f043 0308 	orr.w	r3, r3, #8
    112c:	e7f7      	b.n	111e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x11e>
			conv->flag_space = true;
    112e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1132:	f043 0310 	orr.w	r3, r3, #16
    1136:	e7f2      	b.n	111e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x11e>
			conv->flag_hash = true;
    1138:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    113c:	f043 0320 	orr.w	r3, r3, #32
    1140:	e7ed      	b.n	111e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x11e>
	size_t width = extract_decimal(&sp);
    1142:	a80a      	add	r0, sp, #40	; 0x28
    1144:	f005 fcb4 	bl	6ab0 <extract_decimal>
	if (sp != wp) {
    1148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    114a:	42bb      	cmp	r3, r7
    114c:	d081      	beq.n	1052 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x52>
		conv->unsupported |= ((conv->width_value < 0)
    114e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
    1152:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    1154:	f3c7 0140 	ubfx	r1, r7, #1, #1
    1158:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
    115c:	0052      	lsls	r2, r2, #1
    115e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1162:	f007 017d 	and.w	r1, r7, #125	; 0x7d
    1166:	430a      	orrs	r2, r1
    1168:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    116c:	e771      	b.n	1052 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x52>
	size_t prec = extract_decimal(&sp);
    116e:	a80a      	add	r0, sp, #40	; 0x28
    1170:	f005 fc9e 	bl	6ab0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    1174:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    1178:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    117a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    117e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    1182:	f360 0341 	bfi	r3, r0, #1, #1
    1186:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    118a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    118c:	e77a      	b.n	1084 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x84>
	switch (*sp) {
    118e:	2874      	cmp	r0, #116	; 0x74
    1190:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1194:	d059      	beq.n	124a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x24a>
    1196:	287a      	cmp	r0, #122	; 0x7a
    1198:	d184      	bne.n	10a4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa4>
		conv->length_mod = LENGTH_Z;
    119a:	4613      	mov	r3, r2
    119c:	2206      	movs	r2, #6
    119e:	e041      	b.n	1224 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x224>
		if (*++sp == 'h') {
    11a0:	785a      	ldrb	r2, [r3, #1]
    11a2:	2a68      	cmp	r2, #104	; 0x68
    11a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    11a8:	d13a      	bne.n	1220 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x220>
			conv->length_mod = LENGTH_HH;
    11aa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    11ac:	f361 02c6 	bfi	r2, r1, #3, #4
    11b0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    11b4:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    11b6:	460b      	mov	r3, r1
    11b8:	f813 2b01 	ldrb.w	r2, [r3], #1
    11bc:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    11be:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    11c0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    11c4:	f200 80cd 	bhi.w	1362 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x362>
    11c8:	2a57      	cmp	r2, #87	; 0x57
    11ca:	d855      	bhi.n	1278 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x278>
    11cc:	2a41      	cmp	r2, #65	; 0x41
    11ce:	d004      	beq.n	11da <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1da>
    11d0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    11d4:	2b02      	cmp	r3, #2
    11d6:	f200 80c4 	bhi.w	1362 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x362>
		conv->specifier_cat = SPECIFIER_FP;
    11da:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    11de:	2104      	movs	r1, #4
    11e0:	f361 0302 	bfi	r3, r1, #0, #3
    11e4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    11e8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
    11ec:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
    11f0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
    11f4:	f1d8 0300 	rsbs	r3, r8, #0
    11f8:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
    11fc:	f363 12c7 	bfi	r2, r3, #7, #1
    1200:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
    1204:	b2d3      	uxtb	r3, r2
    1206:	0612      	lsls	r2, r2, #24
    1208:	f100 80d3 	bmi.w	13b2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3b2>
		if (conv->length_mod == LENGTH_L) {
    120c:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1210:	2a18      	cmp	r2, #24
    1212:	f040 80a3 	bne.w	135c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x35c>
			conv->length_mod = LENGTH_NONE;
    1216:	f36f 03c6 	bfc	r3, #3, #4
    121a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    121e:	e08a      	b.n	1336 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x336>
			conv->length_mod = LENGTH_H;
    1220:	4613      	mov	r3, r2
    1222:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    1224:	f362 03c6 	bfi	r3, r2, #3, #4
    1228:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    122c:	e7c3      	b.n	11b6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1b6>
		if (*++sp == 'l') {
    122e:	785a      	ldrb	r2, [r3, #1]
    1230:	2a6c      	cmp	r2, #108	; 0x6c
    1232:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1236:	d101      	bne.n	123c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x23c>
			conv->length_mod = LENGTH_LL;
    1238:	2104      	movs	r1, #4
    123a:	e7b7      	b.n	11ac <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1ac>
			conv->length_mod = LENGTH_L;
    123c:	4613      	mov	r3, r2
    123e:	2203      	movs	r2, #3
    1240:	e7f0      	b.n	1224 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x224>
		conv->length_mod = LENGTH_J;
    1242:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1246:	2205      	movs	r2, #5
    1248:	e7ec      	b.n	1224 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x224>
		conv->length_mod = LENGTH_T;
    124a:	4613      	mov	r3, r2
    124c:	2207      	movs	r2, #7
    124e:	e7e9      	b.n	1224 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x224>
		conv->unsupported = true;
    1250:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    1254:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1258:	f023 0302 	bic.w	r3, r3, #2
    125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1260:	f043 0302 	orr.w	r3, r3, #2
    1264:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    1268:	e7a5      	b.n	11b6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x1b6>
    126a:	bf00      	nop
    126c:	f3af 8000 	nop.w
    1270:	00000000 	.word	0x00000000
    1274:	08000000 	.word	0x08000000
	switch (conv->specifier) {
    1278:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    127c:	2b20      	cmp	r3, #32
    127e:	d870      	bhi.n	1362 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x362>
    1280:	a101      	add	r1, pc, #4	; (adr r1, 1288 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x288>)
    1282:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1286:	bf00      	nop
    1288:	0000133b 	.word	0x0000133b
    128c:	00001363 	.word	0x00001363
    1290:	00001363 	.word	0x00001363
    1294:	00001363 	.word	0x00001363
    1298:	00001363 	.word	0x00001363
    129c:	00001363 	.word	0x00001363
    12a0:	00001363 	.word	0x00001363
    12a4:	00001363 	.word	0x00001363
    12a8:	00001363 	.word	0x00001363
    12ac:	000011db 	.word	0x000011db
    12b0:	00001363 	.word	0x00001363
    12b4:	0000133b 	.word	0x0000133b
    12b8:	0000130d 	.word	0x0000130d
    12bc:	000011db 	.word	0x000011db
    12c0:	000011db 	.word	0x000011db
    12c4:	000011db 	.word	0x000011db
    12c8:	00001363 	.word	0x00001363
    12cc:	0000130d 	.word	0x0000130d
    12d0:	00001363 	.word	0x00001363
    12d4:	00001363 	.word	0x00001363
    12d8:	00001363 	.word	0x00001363
    12dc:	00001363 	.word	0x00001363
    12e0:	00001371 	.word	0x00001371
    12e4:	0000133b 	.word	0x0000133b
    12e8:	00001395 	.word	0x00001395
    12ec:	00001363 	.word	0x00001363
    12f0:	00001363 	.word	0x00001363
    12f4:	00001395 	.word	0x00001395
    12f8:	00001363 	.word	0x00001363
    12fc:	0000133b 	.word	0x0000133b
    1300:	00001363 	.word	0x00001363
    1304:	00001363 	.word	0x00001363
    1308:	0000133b 	.word	0x0000133b
		conv->specifier_cat = SPECIFIER_SINT;
    130c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1310:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    1312:	f361 0302 	bfi	r3, r1, #0, #3
    1316:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    131a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    131e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1322:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    1324:	bf02      	ittt	eq
    1326:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    132a:	f041 0101 	orreq.w	r1, r1, #1
    132e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    1332:	2a63      	cmp	r2, #99	; 0x63
    1334:	d005      	beq.n	1342 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x342>
	bool unsupported = false;
    1336:	2300      	movs	r3, #0
    1338:	e006      	b.n	1348 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x348>
		conv->specifier_cat = SPECIFIER_UINT;
    133a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    133e:	2102      	movs	r1, #2
    1340:	e7e7      	b.n	1312 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x312>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1342:	3b00      	subs	r3, #0
    1344:	bf18      	it	ne
    1346:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1348:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    134c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1350:	430b      	orrs	r3, r1
    1352:	f363 0241 	bfi	r2, r3, #1, #1
    1356:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    135a:	e6af      	b.n	10bc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbc>
		} else if ((conv->length_mod != LENGTH_NONE)
    135c:	f013 0f38 	tst.w	r3, #56	; 0x38
    1360:	d0e9      	beq.n	1336 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x336>
			conv->invalid = true;
    1362:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1366:	f043 0301 	orr.w	r3, r3, #1
    136a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    136e:	e7e2      	b.n	1336 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x336>
		conv->specifier_cat = SPECIFIER_PTR;
    1370:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1374:	2203      	movs	r2, #3
    1376:	f362 0302 	bfi	r3, r2, #0, #3
    137a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    137e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1382:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1386:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    138a:	f1dc 0300 	rsbs	r3, ip, #0
    138e:	eb43 030c 	adc.w	r3, r3, ip
    1392:	e7d9      	b.n	1348 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x348>
		conv->specifier_cat = SPECIFIER_PTR;
    1394:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1398:	2203      	movs	r2, #3
    139a:	f362 0302 	bfi	r3, r2, #0, #3
    139e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    13a2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    13a6:	f013 0f78 	tst.w	r3, #120	; 0x78
    13aa:	bf14      	ite	ne
    13ac:	2301      	movne	r3, #1
    13ae:	2300      	moveq	r3, #0
    13b0:	e7ca      	b.n	1348 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x348>
			unsupported = true;
    13b2:	2301      	movs	r3, #1
    13b4:	e7c8      	b.n	1348 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x348>
		} else if (conv->width_present) {
    13b6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    13ba:	2a00      	cmp	r2, #0
			width = conv->width_value;
    13bc:	bfb4      	ite	lt
    13be:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    13c2:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    13c6:	e68b      	b.n	10e0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xe0>
		} else if (conv->prec_present) {
    13c8:	0799      	lsls	r1, r3, #30
    13ca:	f57f ae98 	bpl.w	10fe <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xfe>
			precision = conv->prec_value;
    13ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    13d2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    13d6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    13d8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    13dc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    13e0:	f003 0207 	and.w	r2, r3, #7
    13e4:	2a04      	cmp	r2, #4
    13e6:	d109      	bne.n	13fc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3fc>
		    && !conv->prec_present) {
    13e8:	078a      	lsls	r2, r1, #30
    13ea:	d407      	bmi.n	13fc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x3fc>
			if (conv->specifier_a) {
    13ec:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    13f0:	2a00      	cmp	r2, #0
    13f2:	bfb4      	ite	lt
    13f4:	f04f 080d 	movlt.w	r8, #13
    13f8:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    13fc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1400:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1402:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1406:	d137      	bne.n	1478 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x478>
			switch (length_mod) {
    1408:	1ecb      	subs	r3, r1, #3
    140a:	2b04      	cmp	r3, #4
    140c:	d821      	bhi.n	1452 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x452>
    140e:	e8df f003 	tbb	[pc, r3]
    1412:	0903      	.short	0x0903
    1414:	2009      	.short	0x2009
    1416:	20          	.byte	0x20
    1417:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1418:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    141c:	17da      	asrs	r2, r3, #31
    141e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    1422:	e006      	b.n	1432 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    1424:	3407      	adds	r4, #7
    1426:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    142a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    142e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    1432:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    1436:	07bb      	lsls	r3, r7, #30
    1438:	d056      	beq.n	14e8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4e8>
			OUTS(sp, fp);
    143a:	9b02      	ldr	r3, [sp, #8]
    143c:	462a      	mov	r2, r5
    143e:	4651      	mov	r1, sl
    1440:	4648      	mov	r0, r9
    1442:	f016 fbe4 	bl	17c0e <outs>
    1446:	2800      	cmp	r0, #0
    1448:	f2c0 8392 	blt.w	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    144c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    144e:	9d02      	ldr	r5, [sp, #8]
    1450:	e5be      	b.n	fd0 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1452:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1456:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1458:	ea4f 72e3 	mov.w	r2, r3, asr #31
    145c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1460:	d105      	bne.n	146e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x46e>
				value->uint = (unsigned char)value->uint;
    1462:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    1466:	930c      	str	r3, [sp, #48]	; 0x30
    1468:	2300      	movs	r3, #0
    146a:	930d      	str	r3, [sp, #52]	; 0x34
    146c:	e7e1      	b.n	1432 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x432>
			} else if (length_mod == LENGTH_H) {
    146e:	2902      	cmp	r1, #2
    1470:	d1df      	bne.n	1432 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x432>
				value->sint = (short)value->sint;
    1472:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    1476:	e7d1      	b.n	141c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x41c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1478:	2b02      	cmp	r3, #2
    147a:	d123      	bne.n	14c4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4c4>
			switch (length_mod) {
    147c:	1ecb      	subs	r3, r1, #3
    147e:	2b04      	cmp	r3, #4
    1480:	d813      	bhi.n	14aa <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4aa>
    1482:	e8df f003 	tbb	[pc, r3]
    1486:	0a03      	.short	0x0a03
    1488:	120a      	.short	0x120a
    148a:	12          	.byte	0x12
    148b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    148c:	6820      	ldr	r0, [r4, #0]
    148e:	900c      	str	r0, [sp, #48]	; 0x30
    1490:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
    1492:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1494:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    1496:	461c      	mov	r4, r3
    1498:	e7cb      	b.n	1432 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x432>
					(uint_value_type)va_arg(ap,
    149a:	1de3      	adds	r3, r4, #7
    149c:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
    14a0:	ecb3 7b02 	vldmia	r3!, {d7}
    14a4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
    14a8:	e7f5      	b.n	1496 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x496>
					(uint_value_type)va_arg(ap, size_t);
    14aa:	f854 3b04 	ldr.w	r3, [r4], #4
    14ae:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    14b0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    14b2:	f04f 0300 	mov.w	r3, #0
    14b6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    14b8:	d0d3      	beq.n	1462 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x462>
			} else if (length_mod == LENGTH_H) {
    14ba:	2902      	cmp	r1, #2
    14bc:	d1b9      	bne.n	1432 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x432>
				value->uint = (unsigned short)value->uint;
    14be:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    14c2:	e7d0      	b.n	1466 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x466>
		} else if (specifier_cat == SPECIFIER_FP) {
    14c4:	2b04      	cmp	r3, #4
    14c6:	d109      	bne.n	14dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x4dc>
					(sint_value_type)va_arg(ap, long long);
    14c8:	1de3      	adds	r3, r4, #7
    14ca:	f023 0307 	bic.w	r3, r3, #7
    14ce:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    14d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    14d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    14da:	e7aa      	b.n	1432 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x432>
		} else if (specifier_cat == SPECIFIER_PTR) {
    14dc:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    14de:	bf04      	itt	eq
    14e0:	f854 3b04 	ldreq.w	r3, [r4], #4
    14e4:	930c      	streq	r3, [sp, #48]	; 0x30
    14e6:	e7a4      	b.n	1432 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x432>
		switch (conv->specifier) {
    14e8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    14ec:	2a78      	cmp	r2, #120	; 0x78
    14ee:	d8ae      	bhi.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
    14f0:	2a57      	cmp	r2, #87	; 0x57
    14f2:	f200 808c 	bhi.w	160e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x60e>
    14f6:	2a25      	cmp	r2, #37	; 0x25
    14f8:	f000 80d4 	beq.w	16a4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6a4>
    14fc:	2a24      	cmp	r2, #36	; 0x24
    14fe:	d9a6      	bls.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
    1500:	2a41      	cmp	r2, #65	; 0x41
    1502:	d003      	beq.n	150c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x50c>
    1504:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1508:	2b02      	cmp	r3, #2
    150a:	d8a0      	bhi.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
	} u = {
    150c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    1510:	2b00      	cmp	r3, #0
    1512:	f2c0 81b7 	blt.w	1884 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x884>
	} else if (conv->flag_plus) {
    1516:	0738      	lsls	r0, r7, #28
    1518:	f100 81b6 	bmi.w	1888 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x888>
		*sign = ' ';
    151c:	f017 0710 	ands.w	r7, r7, #16
    1520:	bf18      	it	ne
    1522:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1524:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    1528:	f3c3 0313 	ubfx	r3, r3, #0, #20
    152c:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    1530:	2d00      	cmp	r5, #0
    1532:	f040 81ab 	bne.w	188c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x88c>
    1536:	ea51 0003 	orrs.w	r0, r1, r3
    153a:	bf14      	ite	ne
    153c:	2001      	movne	r0, #1
    153e:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    1540:	02db      	lsls	r3, r3, #11
    1542:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    1546:	02c9      	lsls	r1, r1, #11
		c = 'f';
    1548:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    154a:	ea45 0e01 	orr.w	lr, r5, r1
    154e:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    1552:	bf08      	it	eq
    1554:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    1556:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    155a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    155e:	f000 8203 	beq.w	1968 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x968>
		if (is_subnormal) {
    1562:	2800      	cmp	r0, #0
    1564:	f040 81cb 	bne.w	18fe <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8fe>
		fract |= BIT_63;
    1568:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    156c:	f04f 0c00 	mov.w	ip, #0
    1570:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1574:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    1578:	9109      	str	r1, [sp, #36]	; 0x24
    157a:	4663      	mov	r3, ip
		fract *= 5U;
    157c:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    1580:	f115 0f02 	cmn.w	r5, #2
    1584:	f2c0 81c2 	blt.w	190c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x90c>
    1588:	f1bc 0f00 	cmp.w	ip, #0
    158c:	d001      	beq.n	1592 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x592>
    158e:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    1592:	2d00      	cmp	r5, #0
		fract += 2;
    1594:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
    1598:	f300 81cd 	bgt.w	1936 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x936>
	fract >>= (4 - expo);
    159c:	9809      	ldr	r0, [sp, #36]	; 0x24
    159e:	9908      	ldr	r1, [sp, #32]
    15a0:	f1c5 0c04 	rsb	ip, r5, #4
    15a4:	351c      	adds	r5, #28
    15a6:	fa00 f505 	lsl.w	r5, r0, r5
    15aa:	f1ac 0e20 	sub.w	lr, ip, #32
    15ae:	fa21 f10c 	lsr.w	r1, r1, ip
    15b2:	fa20 fe0e 	lsr.w	lr, r0, lr
    15b6:	4329      	orrs	r1, r5
    15b8:	ea41 010e 	orr.w	r1, r1, lr
    15bc:	fa20 f00c 	lsr.w	r0, r0, ip
    15c0:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    15c4:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    15c8:	2947      	cmp	r1, #71	; 0x47
    15ca:	f040 81d4 	bne.w	1976 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x976>
		if (decexp < (-4 + 1) || decexp > precision) {
    15ce:	1cdd      	adds	r5, r3, #3
    15d0:	db02      	blt.n	15d8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x5d8>
    15d2:	4598      	cmp	r8, r3
    15d4:	f280 81cb 	bge.w	196e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x96e>
			c += 'e' - 'g';  /* e or E */
    15d8:	3a02      	subs	r2, #2
			if (precision > 0) {
    15da:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    15de:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    15e0:	dd01      	ble.n	15e6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x5e6>
				precision--;
    15e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    15e6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    15ea:	0688      	lsls	r0, r1, #26
    15ec:	f100 81c3 	bmi.w	1976 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x976>
    15f0:	f1b8 0f00 	cmp.w	r8, #0
    15f4:	bfd4      	ite	le
    15f6:	2100      	movle	r1, #0
    15f8:	2101      	movgt	r1, #1
	if (c == 'f') {
    15fa:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    15fc:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    15fe:	f040 81bc 	bne.w	197a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x97a>
		if (decimals < 0) {
    1602:	eb13 0108 	adds.w	r1, r3, r8
    1606:	f140 81ba 	bpl.w	197e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x97e>
			decimals = 0;
    160a:	2100      	movs	r1, #0
    160c:	e1ba      	b.n	1984 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x984>
		switch (conv->specifier) {
    160e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1612:	2b20      	cmp	r3, #32
    1614:	f63f af1b 	bhi.w	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
    1618:	a001      	add	r0, pc, #4	; (adr r0, 1620 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x620>)
    161a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    161e:	bf00      	nop
    1620:	00001827 	.word	0x00001827
    1624:	0000144f 	.word	0x0000144f
    1628:	0000144f 	.word	0x0000144f
    162c:	0000144f 	.word	0x0000144f
    1630:	0000144f 	.word	0x0000144f
    1634:	0000144f 	.word	0x0000144f
    1638:	0000144f 	.word	0x0000144f
    163c:	0000144f 	.word	0x0000144f
    1640:	0000144f 	.word	0x0000144f
    1644:	0000150d 	.word	0x0000150d
    1648:	0000144f 	.word	0x0000144f
    164c:	000016d1 	.word	0x000016d1
    1650:	000017c7 	.word	0x000017c7
    1654:	0000150d 	.word	0x0000150d
    1658:	0000150d 	.word	0x0000150d
    165c:	0000150d 	.word	0x0000150d
    1660:	0000144f 	.word	0x0000144f
    1664:	000017c7 	.word	0x000017c7
    1668:	0000144f 	.word	0x0000144f
    166c:	0000144f 	.word	0x0000144f
    1670:	0000144f 	.word	0x0000144f
    1674:	0000144f 	.word	0x0000144f
    1678:	0000185d 	.word	0x0000185d
    167c:	00001827 	.word	0x00001827
    1680:	0000182b 	.word	0x0000182b
    1684:	0000144f 	.word	0x0000144f
    1688:	0000144f 	.word	0x0000144f
    168c:	000016ab 	.word	0x000016ab
    1690:	0000144f 	.word	0x0000144f
    1694:	00001827 	.word	0x00001827
    1698:	0000144f 	.word	0x0000144f
    169c:	0000144f 	.word	0x0000144f
    16a0:	00001827 	.word	0x00001827
			OUTC('%');
    16a4:	4651      	mov	r1, sl
    16a6:	4610      	mov	r0, r2
    16a8:	e49c      	b.n	fe4 <cbvprintf+0x2c>
			if (precision >= 0) {
    16aa:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    16ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    16b0:	db09      	blt.n	16c6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6c6>
				len = strnlen(bps, precision);
    16b2:	4641      	mov	r1, r8
    16b4:	4610      	mov	r0, r2
    16b6:	9203      	str	r2, [sp, #12]
    16b8:	f01a fccc 	bl	1c054 <strnlen>
				len = strlen(bps);
    16bc:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    16be:	2700      	movs	r7, #0
			bpe = bps + len;
    16c0:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    16c2:	b962      	cbnz	r2, 16de <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6de>
    16c4:	e6c3      	b.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
				len = strlen(bps);
    16c6:	4610      	mov	r0, r2
    16c8:	9203      	str	r2, [sp, #12]
    16ca:	f7ff fc6b 	bl	fa4 <strlen>
    16ce:	e7f5      	b.n	16bc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6bc>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    16d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    16d2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    16d6:	2700      	movs	r7, #0
			bpe = buf + 1;
    16d8:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    16dc:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    16de:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    16e0:	b107      	cbz	r7, 16e4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6e4>
			nj_len += 1U;
    16e2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    16e4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    16e8:	06c1      	lsls	r1, r0, #27
    16ea:	f140 8235 	bpl.w	1b58 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb58>
			nj_len += 2U;
    16ee:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    16f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    16f2:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    16f4:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    16f6:	bf44      	itt	mi
    16f8:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    16fa:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    16fc:	f1bb 0f00 	cmp.w	fp, #0
    1700:	dd23      	ble.n	174a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x74a>
			width -= (int)nj_len;
    1702:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    1706:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    170a:	0759      	lsls	r1, r3, #29
    170c:	f3c3 0880 	ubfx	r8, r3, #2, #1
    1710:	d41b      	bmi.n	174a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x74a>
				if (conv->flag_zero) {
    1712:	0658      	lsls	r0, r3, #25
    1714:	f140 8236 	bpl.w	1b84 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb84>
					if (sign != 0) {
    1718:	2f00      	cmp	r7, #0
    171a:	f000 8236 	beq.w	1b8a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb8a>
						OUTC(sign);
    171e:	4651      	mov	r1, sl
    1720:	4638      	mov	r0, r7
    1722:	9203      	str	r2, [sp, #12]
    1724:	47c8      	blx	r9
    1726:	2800      	cmp	r0, #0
    1728:	f2c0 8222 	blt.w	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    172c:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    172e:	4647      	mov	r7, r8
						OUTC(sign);
    1730:	3601      	adds	r6, #1
					pad = '0';
    1732:	f04f 0830 	mov.w	r8, #48	; 0x30
    1736:	445e      	add	r6, fp
    1738:	465b      	mov	r3, fp
				while (width-- > 0) {
    173a:	2b00      	cmp	r3, #0
    173c:	eba6 000b 	sub.w	r0, r6, fp
    1740:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1744:	f300 820c 	bgt.w	1b60 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb60>
    1748:	4606      	mov	r6, r0
		if (sign != 0) {
    174a:	b147      	cbz	r7, 175e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x75e>
			OUTC(sign);
    174c:	4651      	mov	r1, sl
    174e:	4638      	mov	r0, r7
    1750:	9203      	str	r2, [sp, #12]
    1752:	47c8      	blx	r9
    1754:	2800      	cmp	r0, #0
    1756:	f2c0 820b 	blt.w	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    175a:	9a03      	ldr	r2, [sp, #12]
    175c:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    175e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1762:	0659      	lsls	r1, r3, #25
    1764:	f140 8265 	bpl.w	1c32 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc32>
			if (conv->specifier_a) {
    1768:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    176c:	2b00      	cmp	r3, #0
    176e:	eba6 0602 	sub.w	r6, r6, r2
    1772:	f280 8219 	bge.w	1ba8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xba8>
    1776:	4617      	mov	r7, r2
    1778:	46b8      	mov	r8, r7
    177a:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    177c:	f817 0b01 	ldrb.w	r0, [r7], #1
    1780:	2870      	cmp	r0, #112	; 0x70
    1782:	f040 8205 	bne.w	1b90 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb90>
			while (pad_len-- > 0) {
    1786:	9f10      	ldr	r7, [sp, #64]	; 0x40
    1788:	461e      	mov	r6, r3
    178a:	441f      	add	r7, r3
    178c:	1bbb      	subs	r3, r7, r6
    178e:	2b00      	cmp	r3, #0
    1790:	f300 8248 	bgt.w	1c24 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc24>
			OUTS(cp, bpe);
    1794:	462b      	mov	r3, r5
    1796:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    1798:	4651      	mov	r1, sl
    179a:	4648      	mov	r0, r9
    179c:	f016 fa37 	bl	17c0e <outs>
    17a0:	2800      	cmp	r0, #0
    17a2:	f2c0 81e5 	blt.w	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    17a6:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    17a8:	4606      	mov	r6, r0
    17aa:	4483      	add	fp, r0
		while (width > 0) {
    17ac:	ebab 0306 	sub.w	r3, fp, r6
    17b0:	2b00      	cmp	r3, #0
    17b2:	f77f ae4c 	ble.w	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
			OUTC(' ');
    17b6:	4651      	mov	r1, sl
    17b8:	2020      	movs	r0, #32
    17ba:	47c8      	blx	r9
    17bc:	2800      	cmp	r0, #0
    17be:	f2c0 81d7 	blt.w	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    17c2:	3601      	adds	r6, #1
			--width;
    17c4:	e7f2      	b.n	17ac <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x7ac>
			if (conv->flag_plus) {
    17c6:	073d      	lsls	r5, r7, #28
    17c8:	d42b      	bmi.n	1822 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x822>
				sign = ' ';
    17ca:	f017 0710 	ands.w	r7, r7, #16
    17ce:	bf18      	it	ne
    17d0:	2720      	movne	r7, #32
			sint = value->sint;
    17d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    17d6:	2b00      	cmp	r3, #0
    17d8:	da05      	bge.n	17e6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x7e6>
				value->uint = (uint_value_type)-sint;
    17da:	4252      	negs	r2, r2
    17dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    17e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    17e4:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    17e6:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    17ea:	9300      	str	r3, [sp, #0]
    17ec:	aa0e      	add	r2, sp, #56	; 0x38
    17ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    17f2:	ab13      	add	r3, sp, #76	; 0x4c
    17f4:	f005 f972 	bl	6adc <encode_uint>
    17f8:	4602      	mov	r2, r0
			if (precision >= 0) {
    17fa:	f1b8 0f00 	cmp.w	r8, #0
    17fe:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    1802:	f6ff af5e 	blt.w	16c2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6c2>
				conv->flag_zero = false;
    1806:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    180a:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    180c:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1810:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1812:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    1816:	f67f af54 	bls.w	16c2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6c2>
					conv->pad0_value = precision - (int)len;
    181a:	eba8 0303 	sub.w	r3, r8, r3
    181e:	930f      	str	r3, [sp, #60]	; 0x3c
    1820:	e74f      	b.n	16c2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6c2>
				sign = '+';
    1822:	272b      	movs	r7, #43	; 0x2b
    1824:	e7d5      	b.n	17d2 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x7d2>
		switch (conv->specifier) {
    1826:	2700      	movs	r7, #0
    1828:	e7dd      	b.n	17e6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x7e6>
			if (value->ptr != NULL) {
    182a:	980c      	ldr	r0, [sp, #48]	; 0x30
    182c:	2800      	cmp	r0, #0
    182e:	f000 818f 	beq.w	1b50 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb50>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1832:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    1836:	9300      	str	r3, [sp, #0]
    1838:	aa0e      	add	r2, sp, #56	; 0x38
    183a:	ab13      	add	r3, sp, #76	; 0x4c
    183c:	2100      	movs	r1, #0
    183e:	f005 f94d 	bl	6adc <encode_uint>
				conv->altform_0c = true;
    1842:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1846:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    184a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    184e:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1852:	4602      	mov	r2, r0
				conv->altform_0c = true;
    1854:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    1858:	2700      	movs	r7, #0
				goto prec_int_pad0;
    185a:	e7ce      	b.n	17fa <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x7fa>
				store_count(conv, value->ptr, count);
    185c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    185e:	2907      	cmp	r1, #7
    1860:	f63f adf5 	bhi.w	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
    1864:	e8df f001 	tbb	[pc, r1]
    1868:	0c06040c 	.word	0x0c06040c
    186c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1870:	701e      	strb	r6, [r3, #0]
		break;
    1872:	e5ec      	b.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
		*(short *)dp = (short)count;
    1874:	801e      	strh	r6, [r3, #0]
		break;
    1876:	e5ea      	b.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
		*(intmax_t *)dp = (intmax_t)count;
    1878:	17f2      	asrs	r2, r6, #31
    187a:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    187e:	e5e6      	b.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1880:	601e      	str	r6, [r3, #0]
		break;
    1882:	e5e4      	b.n	144e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x44e>
		*sign = '-';
    1884:	272d      	movs	r7, #45	; 0x2d
    1886:	e64d      	b.n	1524 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x524>
		*sign = '+';
    1888:	272b      	movs	r7, #43	; 0x2b
    188a:	e64b      	b.n	1524 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x524>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    188c:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1890:	4285      	cmp	r5, r0
    1892:	d131      	bne.n	18f8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8f8>
			if (isupper((int)c)) {
    1894:	3201      	adds	r2, #1
    1896:	48b9      	ldr	r0, [pc, #740]	; (1b7c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb7c>)
    1898:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
    189a:	430b      	orrs	r3, r1
    189c:	5c12      	ldrb	r2, [r2, r0]
    189e:	f002 0203 	and.w	r2, r2, #3
    18a2:	d11b      	bne.n	18dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8dc>
			if (isupper((int)c)) {
    18a4:	2a01      	cmp	r2, #1
    18a6:	d111      	bne.n	18cc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8cc>
				*buf++ = 'I';
    18a8:	2349      	movs	r3, #73	; 0x49
    18aa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    18ae:	234e      	movs	r3, #78	; 0x4e
    18b0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    18b4:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    18b6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    18ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    18be:	f36f 1386 	bfc	r3, #6, #1
    18c2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    18c6:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    18ca:	e707      	b.n	16dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6dc>
				*buf++ = 'i';
    18cc:	2369      	movs	r3, #105	; 0x69
    18ce:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    18d2:	236e      	movs	r3, #110	; 0x6e
    18d4:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    18d8:	2366      	movs	r3, #102	; 0x66
    18da:	e7ec      	b.n	18b6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8b6>
			if (isupper((int)c)) {
    18dc:	2a01      	cmp	r2, #1
				*buf++ = 'N';
    18de:	bf07      	ittee	eq
    18e0:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
    18e2:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
    18e4:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
    18e6:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
    18e8:	bf0c      	ite	eq
    18ea:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    18ee:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    18f2:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    18f6:	e7de      	b.n	18b6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8b6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    18f8:	2000      	movs	r0, #0
    18fa:	e621      	b.n	1540 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x540>
				expo--;
    18fc:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    18fe:	1849      	adds	r1, r1, r1
    1900:	415b      	adcs	r3, r3
    1902:	2b00      	cmp	r3, #0
    1904:	dafa      	bge.n	18fc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x8fc>
    1906:	e9cd 1308 	strd	r1, r3, [sp, #32]
    190a:	e62d      	b.n	1568 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x568>
			fract >>= 1;
    190c:	0840      	lsrs	r0, r0, #1
    190e:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    1912:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1914:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    1918:	46ac      	mov	ip, r5
			expo++;
    191a:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    191e:	d2f5      	bcs.n	190c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x90c>
		fract *= 5U;
    1920:	fb0e f501 	mul.w	r5, lr, r1
    1924:	fba0 010e 	umull	r0, r1, r0, lr
    1928:	4429      	add	r1, r5
		decexp--;
    192a:	3b01      	subs	r3, #1
		expo++;
    192c:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    1930:	f04f 0c01 	mov.w	ip, #1
    1934:	e624      	b.n	1580 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x580>
		fract += 2;
    1936:	3002      	adds	r0, #2
    1938:	f141 0100 	adc.w	r1, r1, #0
    193c:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
    1940:	a808      	add	r0, sp, #32
    1942:	e9cd 2303 	strd	r2, r3, [sp, #12]
    1946:	f016 f933 	bl	17bb0 <_ldiv5>
		decexp++;
    194a:	9b04      	ldr	r3, [sp, #16]
    194c:	9a03      	ldr	r2, [sp, #12]
    194e:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    1952:	3d01      	subs	r5, #1
		decexp++;
    1954:	3301      	adds	r3, #1
			fract <<= 1;
    1956:	1849      	adds	r1, r1, r1
    1958:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    195a:	2800      	cmp	r0, #0
			expo--;
    195c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    1960:	daf9      	bge.n	1956 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x956>
    1962:	e9cd 1008 	strd	r1, r0, [sp, #32]
    1966:	e614      	b.n	1592 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x592>
    1968:	2300      	movs	r3, #0
    196a:	461d      	mov	r5, r3
    196c:	e616      	b.n	159c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x59c>
			precision -= decexp;
    196e:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    1972:	2266      	movs	r2, #102	; 0x66
    1974:	e637      	b.n	15e6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x5e6>
	bool prune_zero = false;
    1976:	2100      	movs	r1, #0
    1978:	e63f      	b.n	15fa <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x5fa>
		decimals = precision + 1;
    197a:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
    197e:	2910      	cmp	r1, #16
    1980:	bfa8      	it	ge
    1982:	2110      	movge	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
    1984:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
    1988:	2010      	movs	r0, #16
    198a:	9007      	str	r0, [sp, #28]
	while (decimals--) {
    198c:	460d      	mov	r5, r1
	*v >>= 1;
    198e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
    1992:	b9a5      	cbnz	r5, 19be <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9be>
	fract += round;
    1994:	9d08      	ldr	r5, [sp, #32]
    1996:	1940      	adds	r0, r0, r5
    1998:	9d09      	ldr	r5, [sp, #36]	; 0x24
    199a:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
    199e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    19a2:	d21b      	bcs.n	19dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9dc>
	fract += round;
    19a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
    19a8:	2a66      	cmp	r2, #102	; 0x66
    19aa:	f040 8099 	bne.w	1ae0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xae0>
		if (decexp > 0) {
    19ae:	2b00      	cmp	r3, #0
    19b0:	dc23      	bgt.n	19fa <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9fa>
			*buf++ = '0';
    19b2:	2130      	movs	r1, #48	; 0x30
    19b4:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    19b8:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    19bc:	e02f      	b.n	1a1e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa1e>
	*v >>= 1;
    19be:	0840      	lsrs	r0, r0, #1
    19c0:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    19c4:	0849      	lsrs	r1, r1, #1
    19c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
    19ca:	a80a      	add	r0, sp, #40	; 0x28
    19cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    19d0:	3d01      	subs	r5, #1
    19d2:	f016 f8ed 	bl	17bb0 <_ldiv5>
    19d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    19da:	e7d8      	b.n	198e <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x98e>
	*v >>= 1;
    19dc:	0840      	lsrs	r0, r0, #1
    19de:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    19e2:	0849      	lsrs	r1, r1, #1
    19e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
    19e8:	a808      	add	r0, sp, #32
    19ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    19ee:	f016 f8df 	bl	17bb0 <_ldiv5>
		decexp++;
    19f2:	9b05      	ldr	r3, [sp, #20]
    19f4:	9a04      	ldr	r2, [sp, #16]
    19f6:	3301      	adds	r3, #1
    19f8:	e7d6      	b.n	19a8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9a8>
	char *buf = bps;
    19fa:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    19fc:	9907      	ldr	r1, [sp, #28]
    19fe:	2900      	cmp	r1, #0
    1a00:	dd0b      	ble.n	1a1a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa1a>
				*buf++ = _get_digit(&fract, &digit_count);
    1a02:	a907      	add	r1, sp, #28
    1a04:	a808      	add	r0, sp, #32
    1a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1a0a:	f016 f8e9 	bl	17be0 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1a0e:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    1a10:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    1a14:	3b01      	subs	r3, #1
    1a16:	9a04      	ldr	r2, [sp, #16]
    1a18:	d1f0      	bne.n	19fc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x9fc>
			conv->pad0_value = decexp;
    1a1a:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    1a1c:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    1a1e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1a22:	0689      	lsls	r1, r1, #26
    1a24:	d402      	bmi.n	1a2c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa2c>
    1a26:	f1b8 0f00 	cmp.w	r8, #0
    1a2a:	dd1d      	ble.n	1a68 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa68>
			*buf++ = '.';
    1a2c:	212e      	movs	r1, #46	; 0x2e
    1a2e:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    1a32:	b19b      	cbz	r3, 1a5c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa5c>
    1a34:	f1b8 0f00 	cmp.w	r8, #0
    1a38:	dd16      	ble.n	1a68 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa68>
			conv->pad0_value = -decexp;
    1a3a:	4259      	negs	r1, r3
    1a3c:	4541      	cmp	r1, r8
    1a3e:	bfa8      	it	ge
    1a40:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    1a42:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    1a46:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    1a48:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    1a4a:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    1a4e:	bfd4      	ite	le
    1a50:	2100      	movle	r1, #0
    1a52:	2101      	movgt	r1, #1
    1a54:	f361 1045 	bfi	r0, r1, #5, #1
    1a58:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    1a5c:	f1b8 0f00 	cmp.w	r8, #0
    1a60:	dd02      	ble.n	1a68 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa68>
    1a62:	9907      	ldr	r1, [sp, #28]
    1a64:	2900      	cmp	r1, #0
    1a66:	dc56      	bgt.n	1b16 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb16>
	if (prune_zero) {
    1a68:	9903      	ldr	r1, [sp, #12]
    1a6a:	2900      	cmp	r1, #0
    1a6c:	d163      	bne.n	1b36 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb36>
	conv->pad0_pre_exp = precision;
    1a6e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    1a72:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    1a76:	2945      	cmp	r1, #69	; 0x45
    1a78:	d121      	bne.n	1abe <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xabe>
		if (decexp < 0) {
    1a7a:	2b00      	cmp	r3, #0
		*buf++ = c;
    1a7c:	4629      	mov	r1, r5
			decexp = -decexp;
    1a7e:	bfb8      	it	lt
    1a80:	425b      	neglt	r3, r3
		*buf++ = c;
    1a82:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    1a86:	bfb4      	ite	lt
    1a88:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    1a8a:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    1a8c:	2b63      	cmp	r3, #99	; 0x63
    1a8e:	706a      	strb	r2, [r5, #1]
    1a90:	dd09      	ble.n	1aa6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xaa6>
			*buf++ = (decexp / 100) + '0';
    1a92:	2064      	movs	r0, #100	; 0x64
    1a94:	fbb3 f2f0 	udiv	r2, r3, r0
    1a98:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1a9c:	1ce9      	adds	r1, r5, #3
    1a9e:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    1aa2:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1aa6:	200a      	movs	r0, #10
    1aa8:	460d      	mov	r5, r1
    1aaa:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    1aae:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1ab2:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1ab6:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1ab8:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    1abc:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    1abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	dc43      	bgt.n	1b4c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb4c>
    1ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	bfd4      	ite	le
    1aca:	2300      	movle	r3, #0
    1acc:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1ace:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    1ad2:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1ad6:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1ad8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    1adc:	702b      	strb	r3, [r5, #0]
	return bps;
    1ade:	e5fd      	b.n	16dc <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6dc>
		*buf = _get_digit(&fract, &digit_count);
    1ae0:	a907      	add	r1, sp, #28
    1ae2:	a808      	add	r0, sp, #32
    1ae4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1ae8:	f016 f87a 	bl	17be0 <_get_digit>
		if (*buf++ != '0') {
    1aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    1af0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    1af4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    1af8:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1afa:	bf18      	it	ne
    1afc:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1b00:	0688      	lsls	r0, r1, #26
    1b02:	d402      	bmi.n	1b0a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb0a>
    1b04:	f1b8 0f00 	cmp.w	r8, #0
    1b08:	dd12      	ble.n	1b30 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb30>
			*buf++ = '.';
    1b0a:	212e      	movs	r1, #46	; 0x2e
    1b0c:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    1b10:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    1b14:	e7a2      	b.n	1a5c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
    1b16:	a907      	add	r1, sp, #28
    1b18:	a808      	add	r0, sp, #32
    1b1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1b1e:	f016 f85f 	bl	17be0 <_get_digit>
		precision--;
    1b22:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    1b2a:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    1b2e:	e795      	b.n	1a5c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa5c>
		if (*buf++ != '0') {
    1b30:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    1b34:	e798      	b.n	1a68 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa68>
		conv->pad0_pre_exp = 0;
    1b36:	2100      	movs	r1, #0
    1b38:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    1b3a:	4628      	mov	r0, r5
    1b3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    1b40:	2930      	cmp	r1, #48	; 0x30
    1b42:	d0fa      	beq.n	1b3a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb3a>
		if (*buf != '.') {
    1b44:	292e      	cmp	r1, #46	; 0x2e
    1b46:	bf18      	it	ne
    1b48:	4605      	movne	r5, r0
    1b4a:	e792      	b.n	1a72 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xa72>
		|| (conv->pad0_pre_exp > 0);
    1b4c:	2301      	movs	r3, #1
    1b4e:	e7be      	b.n	1ace <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xace>
			bpe = bps + 5;
    1b50:	4d0b      	ldr	r5, [pc, #44]	; (1b80 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb80>)
		char sign = 0;
    1b52:	4607      	mov	r7, r0
			bps = "(nil)";
    1b54:	1f6a      	subs	r2, r5, #5
    1b56:	e5c2      	b.n	16de <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6de>
		} else if (conv->altform_0) {
    1b58:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    1b5a:	bf48      	it	mi
    1b5c:	3301      	addmi	r3, #1
    1b5e:	e5c7      	b.n	16f0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x6f0>
					OUTC(pad);
    1b60:	4651      	mov	r1, sl
    1b62:	4640      	mov	r0, r8
    1b64:	9203      	str	r2, [sp, #12]
    1b66:	47c8      	blx	r9
    1b68:	2800      	cmp	r0, #0
    1b6a:	9a03      	ldr	r2, [sp, #12]
    1b6c:	f6bf ade4 	bge.w	1738 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x738>
#undef OUTS
#undef OUTC
}
    1b70:	b01b      	add	sp, #108	; 0x6c
    1b72:	ecbd 8b02 	vpop	{d8}
    1b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b7a:	bf00      	nop
    1b7c:	0003ed6f 	.word	0x0003ed6f
    1b80:	0003bf62 	.word	0x0003bf62
				char pad = ' ';
    1b84:	f04f 0820 	mov.w	r8, #32
    1b88:	e5d5      	b.n	1736 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x736>
					pad = '0';
    1b8a:	f04f 0830 	mov.w	r8, #48	; 0x30
    1b8e:	e5d2      	b.n	1736 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x736>
					OUTC(*cp++);
    1b90:	4651      	mov	r1, sl
    1b92:	47c8      	blx	r9
    1b94:	2800      	cmp	r0, #0
    1b96:	f6bf adef 	bge.w	1778 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x778>
    1b9a:	e7e9      	b.n	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
					OUTC(*cp++);
    1b9c:	4651      	mov	r1, sl
    1b9e:	9203      	str	r2, [sp, #12]
    1ba0:	47c8      	blx	r9
    1ba2:	2800      	cmp	r0, #0
    1ba4:	9a03      	ldr	r2, [sp, #12]
    1ba6:	dbe3      	blt.n	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
				while (isdigit((int)*cp)) {
    1ba8:	7810      	ldrb	r0, [r2, #0]
    1baa:	4b37      	ldr	r3, [pc, #220]	; (1c88 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc88>)
    1bac:	5cc3      	ldrb	r3, [r0, r3]
    1bae:	075b      	lsls	r3, r3, #29
    1bb0:	4617      	mov	r7, r2
    1bb2:	eb06 0802 	add.w	r8, r6, r2
    1bb6:	f102 0201 	add.w	r2, r2, #1
    1bba:	d4ef      	bmi.n	1b9c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb9c>
				if (!conv->pad_postdp) {
    1bbc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    1bc0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    1bc2:	0699      	lsls	r1, r3, #26
    1bc4:	d407      	bmi.n	1bd6 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbd6>
    1bc6:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    1bc8:	2e00      	cmp	r6, #0
    1bca:	eba8 0206 	sub.w	r2, r8, r6
    1bce:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    1bd2:	dc0f      	bgt.n	1bf4 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbf4>
    1bd4:	4690      	mov	r8, r2
				if (*cp == '.') {
    1bd6:	7838      	ldrb	r0, [r7, #0]
    1bd8:	282e      	cmp	r0, #46	; 0x2e
    1bda:	d108      	bne.n	1bee <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbee>
					OUTC(*cp++);
    1bdc:	4651      	mov	r1, sl
    1bde:	47c8      	blx	r9
						OUTC('0');
    1be0:	2800      	cmp	r0, #0
    1be2:	dbc5      	blt.n	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
					while (pad_len-- > 0) {
    1be4:	2e00      	cmp	r6, #0
						OUTC('0');
    1be6:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    1bea:	dc09      	bgt.n	1c00 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc00>
					OUTC(*cp++);
    1bec:	3701      	adds	r7, #1
    1bee:	eba8 0607 	sub.w	r6, r8, r7
    1bf2:	e00e      	b.n	1c12 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc12>
						OUTC('0');
    1bf4:	4651      	mov	r1, sl
    1bf6:	2030      	movs	r0, #48	; 0x30
    1bf8:	47c8      	blx	r9
    1bfa:	2800      	cmp	r0, #0
    1bfc:	dae4      	bge.n	1bc8 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbc8>
    1bfe:	e7b7      	b.n	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
						OUTC('0');
    1c00:	4651      	mov	r1, sl
    1c02:	2030      	movs	r0, #48	; 0x30
    1c04:	47c8      	blx	r9
    1c06:	3e01      	subs	r6, #1
    1c08:	e7ea      	b.n	1be0 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xbe0>
					OUTC(*cp++);
    1c0a:	4651      	mov	r1, sl
    1c0c:	47c8      	blx	r9
    1c0e:	2800      	cmp	r0, #0
    1c10:	dbae      	blt.n	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
				while (isdigit((int)*cp)) {
    1c12:	4a1d      	ldr	r2, [pc, #116]	; (1c88 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc88>)
    1c14:	46b8      	mov	r8, r7
    1c16:	19f3      	adds	r3, r6, r7
    1c18:	f817 0b01 	ldrb.w	r0, [r7], #1
    1c1c:	5c12      	ldrb	r2, [r2, r0]
    1c1e:	0752      	lsls	r2, r2, #29
    1c20:	d4f3      	bmi.n	1c0a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc0a>
    1c22:	e5b0      	b.n	1786 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x786>
				OUTC('0');
    1c24:	4651      	mov	r1, sl
    1c26:	2030      	movs	r0, #48	; 0x30
    1c28:	47c8      	blx	r9
    1c2a:	2800      	cmp	r0, #0
    1c2c:	dba0      	blt.n	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    1c2e:	3601      	adds	r6, #1
    1c30:	e5ac      	b.n	178c <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x78c>
			if (conv->altform_0c | conv->altform_0) {
    1c32:	06d8      	lsls	r0, r3, #27
    1c34:	d401      	bmi.n	1c3a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc3a>
    1c36:	0719      	lsls	r1, r3, #28
    1c38:	d507      	bpl.n	1c4a <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc4a>
				OUTC('0');
    1c3a:	4651      	mov	r1, sl
    1c3c:	2030      	movs	r0, #48	; 0x30
    1c3e:	9203      	str	r2, [sp, #12]
    1c40:	47c8      	blx	r9
    1c42:	2800      	cmp	r0, #0
    1c44:	db94      	blt.n	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    1c46:	9a03      	ldr	r2, [sp, #12]
    1c48:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    1c4a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1c4e:	06db      	lsls	r3, r3, #27
    1c50:	d508      	bpl.n	1c64 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc64>
				OUTC(conv->specifier);
    1c52:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    1c56:	9203      	str	r2, [sp, #12]
    1c58:	4651      	mov	r1, sl
    1c5a:	47c8      	blx	r9
    1c5c:	2800      	cmp	r0, #0
    1c5e:	db87      	blt.n	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    1c60:	9a03      	ldr	r2, [sp, #12]
    1c62:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    1c64:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    1c66:	4437      	add	r7, r6
    1c68:	1bbb      	subs	r3, r7, r6
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	dc01      	bgt.n	1c72 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc72>
			OUTS(bps, bpe);
    1c6e:	462b      	mov	r3, r5
    1c70:	e592      	b.n	1798 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0x798>
				OUTC('0');
    1c72:	4651      	mov	r1, sl
    1c74:	2030      	movs	r0, #48	; 0x30
    1c76:	9203      	str	r2, [sp, #12]
    1c78:	47c8      	blx	r9
    1c7a:	2800      	cmp	r0, #0
    1c7c:	f6ff af78 	blt.w	1b70 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xb70>
    1c80:	9a03      	ldr	r2, [sp, #12]
    1c82:	3601      	adds	r6, #1
    1c84:	e7f0      	b.n	1c68 <CONFIG_EI_WRAPPER_THREAD_STACK_SIZE+0xc68>
    1c86:	bf00      	nop
    1c88:	0003ed70 	.word	0x0003ed70
    1c8c:	00000000 	.word	0x00000000

00001c90 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
    /**
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    1c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        const float noise = static_cast<float>(noise_floor_db * -1);
    1c94:	4249      	negs	r1, r1
    1c96:	ee07 1a90 	vmov	s15, r1
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    1c9a:	ed2d 8b06 	vpush	{d8-d10}
        const float noise = static_cast<float>(noise_floor_db * -1);
    1c9e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
    1ca2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    1ca6:	ee78 7a27 	vadd.f32	s15, s16, s15
    1caa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    1cae:	eec8 9aa7 	vdiv.f32	s19, s17, s15

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
            float f = features_matrix->buffer[ix];
            if (f < 1e-30) {
    1cb2:	a73a      	add	r7, pc, #232	; (adr r7, 1d9c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x10c>)
    1cb4:	e9d7 6700 	ldrd	r6, r7, [r7]
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    1cb8:	b083      	sub	sp, #12
    1cba:	4604      	mov	r4, r0
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    1cbc:	2500      	movs	r5, #0
                f = 1e-30;
    1cbe:	ed9f 9a30 	vldr	s18, [pc, #192]	; 1d80 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf0>
    {
        int e;
        float f = frexpf(fabsf(a), &e);
        float y = 1.23149591368684f;
        y *= f;
        y += -4.11852516267426f;
    1cc2:	ed9f aa30 	vldr	s20, [pc, #192]	; 1d84 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf4>
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    1cc6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1cca:	4353      	muls	r3, r2
    1ccc:	42ab      	cmp	r3, r5
    1cce:	d94f      	bls.n	1d70 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe0>
            float f = features_matrix->buffer[ix];
    1cd0:	6823      	ldr	r3, [r4, #0]
    1cd2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1cd6:	ea4f 0885 	mov.w	r8, r5, lsl #2
    1cda:	f8d3 9000 	ldr.w	r9, [r3]
            if (f < 1e-30) {
    1cde:	4648      	mov	r0, r9
    1ce0:	f7fe fbc2 	bl	468 <__aeabi_f2d>
    1ce4:	4632      	mov	r2, r6
    1ce6:	463b      	mov	r3, r7
    1ce8:	f7fe fe88 	bl	9fc <__aeabi_dcmplt>
        float f = frexpf(fabsf(a), &e);
    1cec:	ee00 9a10 	vmov	s0, r9
                f = 1e-30;
    1cf0:	2800      	cmp	r0, #0
    1cf2:	bf18      	it	ne
    1cf4:	eeb0 0a49 	vmovne.f32	s0, s18
    1cf8:	f019 ffa5 	bl	1bc46 <fabsf>
    1cfc:	a801      	add	r0, sp, #4
    1cfe:	f013 fc01 	bl	15504 <frexpf>
        y += -4.11852516267426f;
    1d02:	eddf 7a21 	vldr	s15, [pc, #132]	; 1d88 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf8>
        y *= f;
        y += 6.02197014179219f;
    1d06:	eddf 6a21 	vldr	s13, [pc, #132]	; 1d8c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xfc>
        y *= f;
        y += -3.13396450166353f;
    1d0a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 1d90 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x100>
        y += -4.11852516267426f;
    1d0e:	eee0 7a0a 	vfma.f32	s15, s0, s20
        y += 6.02197014179219f;
    1d12:	eee0 6a27 	vfma.f32	s13, s0, s15
        y += -3.13396450166353f;
    1d16:	eef0 7a47 	vmov.f32	s15, s14
    1d1a:	eee0 7a26 	vfma.f32	s15, s0, s13
        y += e;
    1d1e:	ed9d 7a01 	vldr	s14, [sp, #4]
    1d22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            }
            f = numpy::log10(f);
            f *= 10.0f; // scale by 10
            f += noise;
    1d26:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    1d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
     * @param a Input number
     * @returns Log10 value of a
     */
    __attribute__((always_inline)) static inline float log10(float a)
    {
        return numpy::log2(a) * 0.3010299956639812f;
    1d2e:	eddf 7a19 	vldr	s15, [pc, #100]	; 1d94 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x104>
    1d32:	ee27 7a27 	vmul.f32	s14, s14, s15
    1d36:	eef0 7a48 	vmov.f32	s15, s16
    1d3a:	eee7 7a26 	vfma.f32	s15, s14, s13
            f *= noise_scale;
    1d3e:	ee69 7aa7 	vmul.f32	s15, s19, s15
            // clip again
            if (f < 0.0f) f = 0.0f;
    1d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1d4a:	d40e      	bmi.n	1d6a <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xda>
            else if (f > 1.0f) f = 1.0f;
    1d4c:	eef4 7a68 	vcmp.f32	s15, s17
    1d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1d58:	bfc8      	it	gt
    1d5a:	eef0 7a47 	vmovgt.f32	s15, s14
            features_matrix->buffer[ix] = f;
    1d5e:	6823      	ldr	r3, [r4, #0]
    1d60:	4443      	add	r3, r8
    1d62:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    1d66:	3501      	adds	r5, #1
    1d68:	e7ad      	b.n	1cc6 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x36>
            if (f < 0.0f) f = 0.0f;
    1d6a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1d98 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x108>
    1d6e:	e7f6      	b.n	1d5e <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xce>
        }

        return EIDSP_OK;
    }
    1d70:	2000      	movs	r0, #0
    1d72:	b003      	add	sp, #12
    1d74:	ecbd 8b06 	vpop	{d8-d10}
    1d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d7c:	f3af 8000 	nop.w
    1d80:	0da24260 	.word	0x0da24260
    1d84:	3f9da1a8 	.word	0x3f9da1a8
    1d88:	c083caf5 	.word	0xc083caf5
    1d8c:	40c0b3fb 	.word	0x40c0b3fb
    1d90:	c04892e0 	.word	0xc04892e0
    1d94:	3e9a209b 	.word	0x3e9a209b
    1d98:	00000000 	.word	0x00000000
    1d9c:	feebc2a0 	.word	0xfeebc2a0
    1da0:	39b4484b 	.word	0x39b4484b
    1da4:	00000000 	.word	0x00000000

00001da8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
    1da8:	b530      	push	{r4, r5, lr}
    1daa:	ed2d 8b04 	vpush	{d8-d9}
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    1dae:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    static int normalize(matrix_t *matrix) {
    1db2:	b08f      	sub	sp, #60	; 0x3c
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    1db4:	6803      	ldr	r3, [r0, #0]
    1db6:	434a      	muls	r2, r1
    1db8:	a802      	add	r0, sp, #8
    1dba:	2101      	movs	r1, #1
    1dbc:	f016 fbc7 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>

        matrix_t min_matrix(1, 1);
    1dc0:	2201      	movs	r2, #1
    1dc2:	2300      	movs	r3, #0
    1dc4:	4611      	mov	r1, r2
    1dc6:	a806      	add	r0, sp, #24
    1dc8:	f016 fbc1 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
        if (!min_matrix.buffer) {
    1dcc:	9b06      	ldr	r3, [sp, #24]
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d07d      	beq.n	1ece <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x126>
        if (input_matrix->rows != output_matrix->rows) {
    1dd2:	9a03      	ldr	r2, [sp, #12]
    1dd4:	9b07      	ldr	r3, [sp, #28]
    1dd6:	429a      	cmp	r2, r3
    1dd8:	d17b      	bne.n	1ed2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        if (output_matrix->cols != 1) {
    1dda:	9b08      	ldr	r3, [sp, #32]
    1ddc:	2b01      	cmp	r3, #1
    1dde:	d178      	bne.n	1ed2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1de0:	2400      	movs	r4, #0
    1de2:	9b03      	ldr	r3, [sp, #12]
    1de4:	42a3      	cmp	r3, r4
    1de6:	d910      	bls.n	1e0a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x62>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
    1de8:	9904      	ldr	r1, [sp, #16]
    1dea:	9802      	ldr	r0, [sp, #8]
    1dec:	fb01 f504 	mul.w	r5, r1, r4
    1df0:	ab0a      	add	r3, sp, #40	; 0x28
    1df2:	aa01      	add	r2, sp, #4
    1df4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1df8:	f016 ff92 	bl	18d20 <arm_min_f32>
            output_matrix->buffer[row] = min;
    1dfc:	9b06      	ldr	r3, [sp, #24]
    1dfe:	9a01      	ldr	r2, [sp, #4]
    1e00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1e04:	3401      	adds	r4, #1
            output_matrix->buffer[row] = min;
    1e06:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1e08:	e7eb      	b.n	1de2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
        r = min(&temp_matrix, &min_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        matrix_t max_matrix(1, 1);
    1e0a:	2201      	movs	r2, #1
    1e0c:	2300      	movs	r3, #0
    1e0e:	4611      	mov	r1, r2
    1e10:	a80a      	add	r0, sp, #40	; 0x28
    1e12:	f016 fb9c 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
        if (!max_matrix.buffer) {
    1e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d054      	beq.n	1ec6 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x11e>
        if (input_matrix->rows != output_matrix->rows) {
    1e1c:	9a03      	ldr	r2, [sp, #12]
    1e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e20:	429a      	cmp	r2, r3
    1e22:	d152      	bne.n	1eca <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        if (output_matrix->cols != 1) {
    1e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e26:	2b01      	cmp	r3, #1
    1e28:	d14f      	bne.n	1eca <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1e2a:	2400      	movs	r4, #0
    1e2c:	9b03      	ldr	r3, [sp, #12]
    1e2e:	42a3      	cmp	r3, r4
    1e30:	d910      	bls.n	1e54 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xac>
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
    1e32:	9904      	ldr	r1, [sp, #16]
    1e34:	9802      	ldr	r0, [sp, #8]
    1e36:	fb01 f504 	mul.w	r5, r1, r4
    1e3a:	ab01      	add	r3, sp, #4
    1e3c:	466a      	mov	r2, sp
    1e3e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1e42:	f016 ff54 	bl	18cee <arm_max_f32>
            output_matrix->buffer[row] = max;
    1e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e48:	9a00      	ldr	r2, [sp, #0]
    1e4a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1e4e:	3401      	adds	r4, #1
            output_matrix->buffer[row] = max;
    1e50:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1e52:	e7eb      	b.n	1e2c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x84>
        r = max(&temp_matrix, &max_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
    1e54:	9b06      	ldr	r3, [sp, #24]
    1e56:	edd3 9a00 	vldr	s19, [r3]
    1e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e5c:	ed93 8a00 	vldr	s16, [r3]
    1e60:	ee38 8a69 	vsub.f32	s16, s16, s19
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
    1e64:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    1e68:	ee18 0a10 	vmov	r0, s16
    1e6c:	f7fe fafc 	bl	468 <__aeabi_f2d>
    1e70:	a31b      	add	r3, pc, #108	; (adr r3, 1ee0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
    1e72:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e76:	f7fe fdc1 	bl	9fc <__aeabi_dcmplt>
    1e7a:	bb08      	cbnz	r0, 1ec0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x118>
    1e7c:	eec9 8a08 	vdiv.f32	s17, s18, s16

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
    1e80:	a802      	add	r0, sp, #8
    1e82:	eeb0 0a69 	vmov.f32	s0, s19
    1e86:	f016 fb78 	bl	1857a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
        if (r != EIDSP_OK) {
    1e8a:	4604      	mov	r4, r0
    1e8c:	b950      	cbnz	r0, 1ea4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
        if (scale == 1.0f) return EIDSP_OK;
    1e8e:	eef4 8a49 	vcmp.f32	s17, s18
    1e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e96:	d005      	beq.n	1ea4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
    1e98:	eeb0 0a68 	vmov.f32	s0, s17
    1e9c:	a802      	add	r0, sp, #8
    1e9e:	f008 ff7f 	bl	ada0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
    1ea2:	4604      	mov	r4, r0
        matrix_t max_matrix(1, 1);
    1ea4:	a80a      	add	r0, sp, #40	; 0x28
    1ea6:	f016 fabd 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
    1eaa:	a806      	add	r0, sp, #24
    1eac:	f016 faba 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    1eb0:	a802      	add	r0, sp, #8
    1eb2:	f016 fab7 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        return EIDSP_OK;
    }
    1eb6:	4620      	mov	r0, r4
    1eb8:	b00f      	add	sp, #60	; 0x3c
    1eba:	ecbd 8b04 	vpop	{d8-d9}
    1ebe:	bd30      	pop	{r4, r5, pc}
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
    1ec0:	eef0 8a49 	vmov.f32	s17, s18
    1ec4:	e7dc      	b.n	1e80 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xd8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1ec6:	4c04      	ldr	r4, [pc, #16]	; (1ed8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
    1ec8:	e7ec      	b.n	1ea4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1eca:	4c04      	ldr	r4, [pc, #16]	; (1edc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
    1ecc:	e7ea      	b.n	1ea4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1ece:	4c02      	ldr	r4, [pc, #8]	; (1ed8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
    1ed0:	e7eb      	b.n	1eaa <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1ed2:	4c02      	ldr	r4, [pc, #8]	; (1edc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
    1ed4:	e7e9      	b.n	1eaa <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
    1ed6:	bf00      	nop
    1ed8:	fffffc16 	.word	0xfffffc16
    1edc:	fffffc14 	.word	0xfffffc14
    1ee0:	d2f1a9fc 	.word	0xd2f1a9fc
    1ee4:	3f50624d 	.word	0x3f50624d

00001ee8 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

        return EIDSP_OK;
    }

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
    1ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1eec:	ed2d 8b02 	vpush	{d8}
    1ef0:	4607      	mov	r7, r0
    1ef2:	b085      	sub	sp, #20
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
    1ef4:	00d8      	lsls	r0, r3, #3
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
    1ef6:	460d      	mov	r5, r1
    1ef8:	4616      	mov	r6, r2
    1efa:	4698      	mov	r8, r3
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
    1efc:	f016 fe0c 	bl	18b18 <_Z9ei_mallocj>
        if (!fft_output) {
    1f00:	4604      	mov	r4, r0
    1f02:	b160      	cbz	r0, 1f1e <_ZN2ei5numpy13software_rfftEPfS1_jj+0x36>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
    1f04:	ab03      	add	r3, sp, #12
    1f06:	9300      	str	r3, [sp, #0]
    1f08:	2300      	movs	r3, #0
    1f0a:	4630      	mov	r0, r6
    1f0c:	461a      	mov	r2, r3
    1f0e:	4619      	mov	r1, r3
    1f10:	f000 fbca 	bl	26a8 <kiss_fftr_alloc>
        if (!cfg) {
    1f14:	4606      	mov	r6, r0
    1f16:	b920      	cbnz	r0, 1f22 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
    1f18:	4620      	mov	r0, r4
    1f1a:	f016 fe01 	bl	18b20 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1f1e:	4826      	ldr	r0, [pc, #152]	; (1fb8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd0>)
    1f20:	e040      	b.n	1fa4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xbc>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
    1f22:	4639      	mov	r1, r7
    1f24:	4622      	mov	r2, r4
    1f26:	f00e fe43 	bl	10bb0 <kiss_fftr>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    1f2a:	ed9f 8b21 	vldr	d8, [pc, #132]	; 1fb0 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
    1f2e:	4627      	mov	r7, r4

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    1f30:	f04f 0900 	mov.w	r9, #0
    1f34:	45c1      	cmp	r9, r8
    1f36:	f107 0708 	add.w	r7, r7, #8
    1f3a:	d02c      	beq.n	1f96 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xae>
    1f3c:	f857 0c08 	ldr.w	r0, [r7, #-8]
    1f40:	f7fe fa92 	bl	468 <__aeabi_f2d>
    1f44:	eeb0 1a48 	vmov.f32	s2, s16
    1f48:	eef0 1a68 	vmov.f32	s3, s17
    1f4c:	ec41 0b10 	vmov	d0, r0, r1
    1f50:	f013 fb22 	bl	15598 <pow>
    1f54:	f857 0c04 	ldr.w	r0, [r7, #-4]
    1f58:	ec5b ab10 	vmov	sl, fp, d0
    1f5c:	f7fe fa84 	bl	468 <__aeabi_f2d>
    1f60:	eeb0 1a48 	vmov.f32	s2, s16
    1f64:	eef0 1a68 	vmov.f32	s3, s17
    1f68:	ec41 0b10 	vmov	d0, r0, r1
    1f6c:	f013 fb14 	bl	15598 <pow>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
    1f70:	4652      	mov	r2, sl
    1f72:	465b      	mov	r3, fp
    1f74:	ec51 0b10 	vmov	r0, r1, d0
    1f78:	f7fe f918 	bl	1ac <__adddf3>
    1f7c:	ec41 0b10 	vmov	d0, r0, r1
    1f80:	f013 fbb8 	bl	156f4 <sqrt>
    1f84:	ec51 0b10 	vmov	r0, r1, d0
    1f88:	f7fe fd60 	bl	a4c <__aeabi_d2f>
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    1f8c:	f109 0901 	add.w	r9, r9, #1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
    1f90:	f845 0b04 	str.w	r0, [r5], #4
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    1f94:	e7ce      	b.n	1f34 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x4c>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
    1f96:	4630      	mov	r0, r6
    1f98:	f016 fdc2 	bl	18b20 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
    1f9c:	4620      	mov	r0, r4
    1f9e:	f016 fdbf 	bl	18b20 <_Z7ei_freePv>

        return EIDSP_OK;
    1fa2:	2000      	movs	r0, #0
    }
    1fa4:	b005      	add	sp, #20
    1fa6:	ecbd 8b02 	vpop	{d8}
    1faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fae:	bf00      	nop
    1fb0:	00000000 	.word	0x00000000
    1fb4:	40000000 	.word	0x40000000
    1fb8:	fffffc16 	.word	0xfffffc16
    1fbc:	00000000 	.word	0x00000000

00001fc0 <_ZN2ei5numpy4rfftEPKfjPfjj>:
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
    1fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1fc4:	b090      	sub	sp, #64	; 0x40
    1fc6:	4680      	mov	r8, r0
    1fc8:	9c18      	ldr	r4, [sp, #96]	; 0x60
        size_t n_fft_out_features = (n_fft / 2) + 1;
    1fca:	0867      	lsrs	r7, r4, #1
    1fcc:	f107 0901 	add.w	r9, r7, #1
        if (output_size != n_fft_out_features) {
    1fd0:	4599      	cmp	r9, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
    1fd2:	460d      	mov	r5, r1
    1fd4:	4616      	mov	r6, r2
        if (output_size != n_fft_out_features) {
    1fd6:	d17e      	bne.n	20d6 <CONFIG_HEAP_MEM_POOL_SIZE+0xd6>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1fd8:	2300      	movs	r3, #0
    1fda:	4622      	mov	r2, r4
    1fdc:	2101      	movs	r1, #1
    1fde:	a802      	add	r0, sp, #8
    1fe0:	f016 fab5 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    1fe4:	9802      	ldr	r0, [sp, #8]
    1fe6:	2800      	cmp	r0, #0
    1fe8:	d073      	beq.n	20d2 <CONFIG_HEAP_MEM_POOL_SIZE+0xd2>
    1fea:	42a5      	cmp	r5, r4
    1fec:	bf28      	it	cs
    1fee:	4625      	movcs	r5, r4
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
    1ff0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1ff4:	4652      	mov	r2, sl
    1ff6:	4641      	mov	r1, r8
    1ff8:	f019 fe72 	bl	1bce0 <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
    1ffc:	9802      	ldr	r0, [sp, #8]
    1ffe:	1b62      	subs	r2, r4, r5
    2000:	0092      	lsls	r2, r2, #2
    2002:	2100      	movs	r1, #0
    2004:	4450      	add	r0, sl
    2006:	f019 fea6 	bl	1bd56 <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
    200a:	2c20      	cmp	r4, #32
    200c:	d020      	beq.n	2050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
    200e:	2c40      	cmp	r4, #64	; 0x40
    2010:	d01e      	beq.n	2050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
    2012:	2c80      	cmp	r4, #128	; 0x80
    2014:	d01c      	beq.n	2050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
    2016:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    201a:	d019      	beq.n	2050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
    201c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2020:	d016      	beq.n	2050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
    2022:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    2026:	d013      	beq.n	2050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
    2028:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    202c:	d010      	beq.n	2050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
    202e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    2032:	d00d      	beq.n	2050 <CONFIG_HEAP_MEM_POOL_SIZE+0x50>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
    2034:	9802      	ldr	r0, [sp, #8]
    2036:	464b      	mov	r3, r9
    2038:	4622      	mov	r2, r4
    203a:	4631      	mov	r1, r6
    203c:	f7ff ff54 	bl	1ee8 <_ZN2ei5numpy13software_rfftEPfS1_jj>
    2040:	4605      	mov	r5, r0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    2042:	a802      	add	r0, sp, #8
    2044:	f016 f9ee 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    }
    2048:	4628      	mov	r0, r5
    204a:	b010      	add	sp, #64	; 0x40
    204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
    2050:	b2a1      	uxth	r1, r4
    2052:	a80a      	add	r0, sp, #40	; 0x28
    2054:	f00e fedc 	bl	10e10 <arm_rfft_fast_init_f32>
            if (status != ARM_MATH_SUCCESS) {
    2058:	4605      	mov	r5, r0
    205a:	2800      	cmp	r0, #0
    205c:	d1f1      	bne.n	2042 <CONFIG_HEAP_MEM_POOL_SIZE+0x42>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    205e:	4603      	mov	r3, r0
    2060:	4622      	mov	r2, r4
    2062:	2101      	movs	r1, #1
    2064:	a806      	add	r0, sp, #24
    2066:	f016 fa72 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    206a:	9a06      	ldr	r2, [sp, #24]
    206c:	b92a      	cbnz	r2, 207a <CONFIG_HEAP_MEM_POOL_SIZE+0x7a>
    206e:	a806      	add	r0, sp, #24
    2070:	f016 f9d8 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    2074:	f2a5 35ea 	subw	r5, r5, #1002	; 0x3ea
    2078:	e7e3      	b.n	2042 <CONFIG_HEAP_MEM_POOL_SIZE+0x42>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
    207a:	462b      	mov	r3, r5
    207c:	9902      	ldr	r1, [sp, #8]
    207e:	a80a      	add	r0, sp, #40	; 0x28
    2080:	f016 fdf0 	bl	18c64 <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
    2084:	9b06      	ldr	r3, [sp, #24]
    2086:	681a      	ldr	r2, [r3, #0]
    2088:	6032      	str	r2, [r6, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    208a:	685a      	ldr	r2, [r3, #4]
                output[ix] = rms_result * sqrt(2);
    208c:	f20f 0958 	addw	r9, pc, #88	; 0x58
    2090:	e9d9 8900 	ldrd	r8, r9, [r9]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    2094:	eb06 0387 	add.w	r3, r6, r7, lsl #2
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    2098:	2401      	movs	r4, #1
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    209a:	601a      	str	r2, [r3, #0]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    209c:	3604      	adds	r6, #4
    209e:	42a7      	cmp	r7, r4
    20a0:	d913      	bls.n	20ca <CONFIG_HEAP_MEM_POOL_SIZE+0xca>
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
    20a2:	9806      	ldr	r0, [sp, #24]
    20a4:	aa01      	add	r2, sp, #4
    20a6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    20aa:	2102      	movs	r1, #2
    20ac:	f00e feea 	bl	10e84 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
    20b0:	9801      	ldr	r0, [sp, #4]
    20b2:	f7fe f9d9 	bl	468 <__aeabi_f2d>
    20b6:	4642      	mov	r2, r8
    20b8:	464b      	mov	r3, r9
    20ba:	f7fe fa2d 	bl	518 <__aeabi_dmul>
    20be:	f7fe fcc5 	bl	a4c <__aeabi_d2f>
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    20c2:	3401      	adds	r4, #1
                output[ix] = rms_result * sqrt(2);
    20c4:	f846 0b04 	str.w	r0, [r6], #4
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    20c8:	e7e9      	b.n	209e <CONFIG_HEAP_MEM_POOL_SIZE+0x9e>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    20ca:	a806      	add	r0, sp, #24
    20cc:	f016 f9aa 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    20d0:	e7b7      	b.n	2042 <CONFIG_HEAP_MEM_POOL_SIZE+0x42>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    20d2:	4d03      	ldr	r5, [pc, #12]	; (20e0 <CONFIG_HEAP_MEM_POOL_SIZE+0xe0>)
    20d4:	e7b5      	b.n	2042 <CONFIG_HEAP_MEM_POOL_SIZE+0x42>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
    20d6:	4d03      	ldr	r5, [pc, #12]	; (20e4 <CONFIG_HEAP_MEM_POOL_SIZE+0xe4>)
    20d8:	e7b6      	b.n	2048 <CONFIG_HEAP_MEM_POOL_SIZE+0x48>
    20da:	bf00      	nop
    20dc:	f3af 8000 	nop.w
    20e0:	fffffc16 	.word	0xfffffc16
    20e4:	fffffc11 	.word	0xfffffc11
    20e8:	667f3bcd 	.word	0x667f3bcd
    20ec:	3ff6a09e 	.word	0x3ff6a09e

000020f0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
    {
    20f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20f4:	ed2d 8b02 	vpush	{d8}
    20f8:	b093      	sub	sp, #76	; 0x4c
    20fa:	e9cd 2300 	strd	r2, r3, [sp]
    20fe:	4605      	mov	r5, r0
        if (win_size == 0) {
    2100:	460e      	mov	r6, r1
    2102:	2900      	cmp	r1, #0
    2104:	f000 80f8 	beq.w	22f8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x208>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    2108:	6840      	ldr	r0, [r0, #4]
    210a:	68aa      	ldr	r2, [r5, #8]
        uint16_t pad_size = (win_size - 1) / 2;
    210c:	3901      	subs	r1, #1
    210e:	104f      	asrs	r7, r1, #1
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    2110:	f021 0101 	bic.w	r1, r1, #1
    2114:	2300      	movs	r3, #0
    2116:	4401      	add	r1, r0
    2118:	a802      	add	r0, sp, #8
    211a:	f016 fa18 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    211e:	9b02      	ldr	r3, [sp, #8]
    2120:	2b00      	cmp	r3, #0
    2122:	f000 80e7 	beq.w	22f4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x204>
        uint16_t pad_size = (win_size - 1) / 2;
    2126:	b2bf      	uxth	r7, r7
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
    2128:	463b      	mov	r3, r7
    212a:	463a      	mov	r2, r7
    212c:	a902      	add	r1, sp, #8
    212e:	4628      	mov	r0, r5
    2130:	f009 f846 	bl	b1c0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
    2134:	4604      	mov	r4, r0
    2136:	2800      	cmp	r0, #0
    2138:	d173      	bne.n	2222 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x132>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    213a:	4603      	mov	r3, r0
    213c:	9904      	ldr	r1, [sp, #16]
    213e:	2201      	movs	r2, #1
    2140:	a806      	add	r0, sp, #24
    2142:	f016 fa04 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    2146:	9b06      	ldr	r3, [sp, #24]
    2148:	2b00      	cmp	r3, #0
    214a:	f000 80d1 	beq.w	22f0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x200>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    214e:	4623      	mov	r3, r4
    2150:	9904      	ldr	r1, [sp, #16]
    2152:	2201      	movs	r2, #1
    2154:	a80a      	add	r0, sp, #40	; 0x28
    2156:	f016 f9fa 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    215a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    215c:	2b00      	cmp	r3, #0
    215e:	f000 80c5 	beq.w	22ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1fc>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    2162:	686b      	ldr	r3, [r5, #4]
    2164:	42a3      	cmp	r3, r4
    2166:	d967      	bls.n	2238 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x148>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    2168:	9a04      	ldr	r2, [sp, #16]
    216a:	9b02      	ldr	r3, [sp, #8]
    216c:	fb02 f104 	mul.w	r1, r2, r4
    2170:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2174:	a80e      	add	r0, sp, #56	; 0x38
    2176:	4631      	mov	r1, r6
    2178:	f016 f9e9 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    217c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    2180:	f1b8 0f00 	cmp.w	r8, #0
    2184:	d043      	beq.n	220e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x11e>
        if (input_matrix->cols != output_matrix->rows) {
    2186:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2188:	9b07      	ldr	r3, [sp, #28]
    218a:	429a      	cmp	r2, r3
    218c:	d152      	bne.n	2234 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x144>
        if (output_matrix->cols != 1) {
    218e:	9b08      	ldr	r3, [sp, #32]
    2190:	2b01      	cmp	r3, #1
    2192:	d14f      	bne.n	2234 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x144>
    2194:	9906      	ldr	r1, [sp, #24]
            for (size_t row = 0; row < input_matrix->rows; row++) {
    2196:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    219a:	ea4f 0982 	mov.w	r9, r2, lsl #2
            output_matrix->buffer[col] = sum / input_matrix->rows;
    219e:	468e      	mov	lr, r1
        for (size_t col = 0; col < input_matrix->cols; col++) {
    21a0:	2300      	movs	r3, #0
    21a2:	429a      	cmp	r2, r3
    21a4:	d00f      	beq.n	21c6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xd6>
            float sum = 0.0f;
    21a6:	eddf 7a58 	vldr	s15, [pc, #352]	; 2308 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x218>
    21aa:	eb08 0083 	add.w	r0, r8, r3, lsl #2
            for (size_t row = 0; row < input_matrix->rows; row++) {
    21ae:	f04f 0c00 	mov.w	ip, #0
    21b2:	45e2      	cmp	sl, ip
    21b4:	d01c      	beq.n	21f0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x100>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
    21b6:	ed90 7a00 	vldr	s14, [r0]
            for (size_t row = 0; row < input_matrix->rows; row++) {
    21ba:	f10c 0c01 	add.w	ip, ip, #1
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
    21be:	ee77 7a87 	vadd.f32	s15, s15, s14
            for (size_t row = 0; row < input_matrix->rows; row++) {
    21c2:	4448      	add	r0, r9
    21c4:	e7f5      	b.n	21b2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc2>
    21c6:	68a8      	ldr	r0, [r5, #8]
    21c8:	0083      	lsls	r3, r0, #2
    21ca:	4363      	muls	r3, r4
    21cc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    21d0:	1a5b      	subs	r3, r3, r1
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
    21d2:	4288      	cmp	r0, r1
    21d4:	d016      	beq.n	2204 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x114>
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
    21d6:	682a      	ldr	r2, [r5, #0]
    21d8:	eb01 0c03 	add.w	ip, r1, r3
    21dc:	4462      	add	r2, ip
    21de:	ecb1 7a01 	vldmia	r1!, {s14}
    21e2:	edd2 7a00 	vldr	s15, [r2]
    21e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
    21ea:	edc2 7a00 	vstr	s15, [r2]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
    21ee:	e7f0      	b.n	21d2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xe2>
            output_matrix->buffer[col] = sum / input_matrix->rows;
    21f0:	ee07 aa10 	vmov	s14, sl
    21f4:	eef8 6a47 	vcvt.f32.u32	s13, s14
        for (size_t col = 0; col < input_matrix->cols; col++) {
    21f8:	3301      	adds	r3, #1
            output_matrix->buffer[col] = sum / input_matrix->rows;
    21fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    21fe:	ecae 7a01 	vstmia	lr!, {s14}
        for (size_t col = 0; col < input_matrix->cols; col++) {
    2202:	e7ce      	b.n	21a2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xb2>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    2204:	a80e      	add	r0, sp, #56	; 0x38
    2206:	f016 f90d 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    220a:	3401      	adds	r4, #1
    220c:	e7a9      	b.n	2162 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x72>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    220e:	4c3f      	ldr	r4, [pc, #252]	; (230c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    2210:	a80e      	add	r0, sp, #56	; 0x38
    2212:	f016 f907 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    2216:	a80a      	add	r0, sp, #40	; 0x28
    2218:	f016 f904 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    221c:	a806      	add	r0, sp, #24
    221e:	f016 f901 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    2222:	a802      	add	r0, sp, #8
    2224:	f016 f8fe 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    }
    2228:	4620      	mov	r0, r4
    222a:	b013      	add	sp, #76	; 0x4c
    222c:	ecbd 8b02 	vpop	{d8}
    2230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    2234:	4c36      	ldr	r4, [pc, #216]	; (2310 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x220>)
    2236:	e7eb      	b.n	2210 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x120>
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
    2238:	463b      	mov	r3, r7
    223a:	463a      	mov	r2, r7
    223c:	a902      	add	r1, sp, #8
    223e:	4628      	mov	r0, r5
    2240:	f008 ffbe 	bl	b1c0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
    2244:	4604      	mov	r4, r0
    2246:	2800      	cmp	r0, #0
    2248:	d1e5      	bne.n	2216 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    224a:	4680      	mov	r8, r0
    224c:	686b      	ldr	r3, [r5, #4]
    224e:	4543      	cmp	r3, r8
    2250:	d944      	bls.n	22dc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1ec>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    2252:	9a04      	ldr	r2, [sp, #16]
    2254:	9b02      	ldr	r3, [sp, #8]
    2256:	fb02 f108 	mul.w	r1, r2, r8
    225a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    225e:	a80e      	add	r0, sp, #56	; 0x38
    2260:	4631      	mov	r1, r6
    2262:	f016 f974 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    2266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2268:	b393      	cbz	r3, 22d0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e0>
            if (variance_normalization == true) {
    226a:	9b00      	ldr	r3, [sp, #0]
    226c:	b353      	cbz	r3, 22c4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1d4>
        return std_axis0_CMSIS(input_matrix, output_matrix);
    226e:	a90a      	add	r1, sp, #40	; 0x28
    2270:	a80e      	add	r0, sp, #56	; 0x38
    2272:	f009 f8c9 	bl	b408 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
                if (ret != EIDSP_OK) {
    2276:	4607      	mov	r7, r0
    2278:	bb58      	cbnz	r0, 22d2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e2>
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
    227a:	9f04      	ldr	r7, [sp, #16]
    227c:	682b      	ldr	r3, [r5, #0]
    227e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    2282:	00bf      	lsls	r7, r7, #2
    2284:	fb08 3907 	mla	r9, r8, r7, r3
    2288:	4457      	add	r7, sl
                for (size_t col = 0; col < vec_pad.cols; col++) {
    228a:	45ba      	cmp	sl, r7
    228c:	d01a      	beq.n	22c4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1d4>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    228e:	f8d9 0000 	ldr.w	r0, [r9]
                                             (window_variance.buffer[col] + 1e-10);
    2292:	f85a bb04 	ldr.w	fp, [sl], #4
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    2296:	f7fe f8e7 	bl	468 <__aeabi_f2d>
    229a:	ec41 0b18 	vmov	d8, r0, r1
                                             (window_variance.buffer[col] + 1e-10);
    229e:	4658      	mov	r0, fp
    22a0:	f7fe f8e2 	bl	468 <__aeabi_f2d>
    22a4:	a316      	add	r3, pc, #88	; (adr r3, 2300 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x210>)
    22a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    22aa:	f7fd ff7f 	bl	1ac <__adddf3>
    22ae:	4602      	mov	r2, r0
    22b0:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    22b2:	ec51 0b18 	vmov	r0, r1, d8
    22b6:	f7fe fa59 	bl	76c <__aeabi_ddiv>
    22ba:	f7fe fbc7 	bl	a4c <__aeabi_d2f>
    22be:	f849 0b04 	str.w	r0, [r9], #4
                for (size_t col = 0; col < vec_pad.cols; col++) {
    22c2:	e7e2      	b.n	228a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    22c4:	a80e      	add	r0, sp, #56	; 0x38
    22c6:	f016 f8ad 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    22ca:	f108 0801 	add.w	r8, r8, #1
    22ce:	e7bd      	b.n	224c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x15c>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    22d0:	4f0e      	ldr	r7, [pc, #56]	; (230c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    22d2:	a80e      	add	r0, sp, #56	; 0x38
    22d4:	f016 f8a6 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    22d8:	463c      	mov	r4, r7
    22da:	e79c      	b.n	2216 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
        if (scale) {
    22dc:	9b01      	ldr	r3, [sp, #4]
    22de:	2b00      	cmp	r3, #0
    22e0:	d099      	beq.n	2216 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
            ret = numpy::normalize(features_matrix);
    22e2:	4628      	mov	r0, r5
    22e4:	f7ff fd60 	bl	1da8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
    22e8:	4604      	mov	r4, r0
            if (ret != EIDSP_OK) {
    22ea:	e794      	b.n	2216 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    22ec:	4c07      	ldr	r4, [pc, #28]	; (230c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    22ee:	e792      	b.n	2216 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    22f0:	4c06      	ldr	r4, [pc, #24]	; (230c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    22f2:	e793      	b.n	221c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x12c>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    22f4:	4c05      	ldr	r4, [pc, #20]	; (230c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    22f6:	e794      	b.n	2222 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x132>
            return EIDSP_OK;
    22f8:	460c      	mov	r4, r1
    22fa:	e795      	b.n	2228 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x138>
    22fc:	f3af 8000 	nop.w
    2300:	d9d7bdbb 	.word	0xd9d7bdbb
    2304:	3ddb7cdf 	.word	0x3ddb7cdf
    2308:	00000000 	.word	0x00000000
    230c:	fffffc16 	.word	0xfffffc16
    2310:	fffffc14 	.word	0xfffffc14
    2314:	00000000 	.word	0x00000000

00002318 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
    2318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    231c:	ed2d 8b06 	vpush	{d8-d10}
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
    2320:	1c8e      	adds	r6, r1, #2
    static int filterbanks(
    2322:	b08f      	sub	sp, #60	; 0x3c
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
    2324:	ea4f 0986 	mov.w	r9, r6, lsl #2
    static int filterbanks(
    2328:	ee08 3a90 	vmov	s17, r3
    232c:	4604      	mov	r4, r0
    232e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
    2332:	9102      	str	r1, [sp, #8]
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
    2334:	4648      	mov	r0, r9
    static int filterbanks(
    2336:	4615      	mov	r5, r2
    2338:	9303      	str	r3, [sp, #12]
        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
    233a:	f016 fbed 	bl	18b18 <_Z9ei_mallocj>
        if (!mels) {
    233e:	4607      	mov	r7, r0
    2340:	b378      	cbz	r0, 23a2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
    2342:	6863      	ldr	r3, [r4, #4]
    2344:	9a02      	ldr	r2, [sp, #8]
    2346:	4293      	cmp	r3, r2
    2348:	f040 819c 	bne.w	2684 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x36c>
    234c:	68a2      	ldr	r2, [r4, #8]
    234e:	42aa      	cmp	r2, r5
    2350:	f040 8198 	bne.w	2684 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x36c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
    2354:	435a      	muls	r2, r3
    2356:	2100      	movs	r1, #0
    2358:	6820      	ldr	r0, [r4, #0]
    235a:	f019 fcfc 	bl	1bd56 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
    235e:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
    2362:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    2366:	eeb0 0a48 	vmov.f32	s0, s16
    236a:	f009 f8a1 	bl	b4b0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
    236e:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
    2372:	eeb8 9a67 	vcvt.f32.u32	s18, s15
    2376:	eef0 9a40 	vmov.f32	s19, s0
    237a:	eeb0 0a49 	vmov.f32	s0, s18
    237e:	f009 f897 	bl	b4b0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
    2382:	4630      	mov	r0, r6
    2384:	eef0 0a40 	vmov.f32	s1, s0
    2388:	4639      	mov	r1, r7
    238a:	eeb0 0a69 	vmov.f32	s0, s19
    238e:	f016 f8ae 	bl	184ee <_ZN2ei5numpy8linspaceEffjPf.isra.0>
            num_filter + 2,
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
    2392:	4648      	mov	r0, r9
    2394:	f016 fbc0 	bl	18b18 <_Z9ei_mallocj>
        if (!hertz) {
    2398:	4606      	mov	r6, r0
    239a:	b920      	cbnz	r0, 23a6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8e>
            ei_dsp_free(mels, mels_mem_size);
    239c:	4638      	mov	r0, r7
        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
        if (!freq_index) {
            ei_dsp_free(hertz, hertz_mem_size);
    239e:	f016 fbbf 	bl	18b20 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    23a2:	48bb      	ldr	r0, [pc, #748]	; (2690 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x378>)
    23a4:	e169      	b.n	267a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x362>
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
    23a6:	eddf 9abb 	vldr	s19, [pc, #748]	; 2694 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x37c>
    23aa:	ed9f aabb 	vldr	s20, [pc, #748]	; 2698 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x380>
    23ae:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    23b2:	9b02      	ldr	r3, [sp, #8]
    23b4:	f103 0801 	add.w	r8, r3, #1
    23b8:	fa1f f38a 	uxth.w	r3, sl
    23bc:	4598      	cmp	r8, r3
    23be:	db34      	blt.n	242a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x112>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
    23c0:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    23c4:	ed92 0a00 	vldr	s0, [r2]
    23c8:	9301      	str	r3, [sp, #4]
  { return __builtin_expf(__x); }
    23ca:	ee80 0a29 	vdiv.f32	s0, s0, s19
    23ce:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
    23d2:	f013 f9c3 	bl	1575c <expf>
            if (ix == num_filter + 2 - 1) {
    23d6:	9b01      	ldr	r3, [sp, #4]
    23d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    23dc:	ee30 0a67 	vsub.f32	s0, s0, s15
    23e0:	ee20 0a0a 	vmul.f32	s0, s0, s20
                hertz[ix] = low_freq;
    23e4:	eeb4 8a40 	vcmp.f32	s16, s0
    23e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    23ec:	bfc8      	it	gt
    23ee:	eeb0 0a48 	vmovgt.f32	s0, s16
                hertz[ix] = high_freq;
    23f2:	eeb4 9a40 	vcmp.f32	s18, s0
    23f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    23fa:	bf48      	it	mi
    23fc:	eeb0 0a49 	vmovmi.f32	s0, s18
            if (ix == num_filter + 2 - 1) {
    2400:	4598      	cmp	r8, r3
    2402:	d004      	beq.n	240e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0xf6>
    2404:	ed8b 0a00 	vstr	s0, [fp]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    2408:	f10a 0a01 	add.w	sl, sl, #1
    240c:	e7d1      	b.n	23b2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x9a>
                hertz[ix] -= 0.001;
    240e:	ee10 0a10 	vmov	r0, s0
    2412:	f7fe f829 	bl	468 <__aeabi_f2d>
    2416:	a39c      	add	r3, pc, #624	; (adr r3, 2688 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x370>)
    2418:	e9d3 2300 	ldrd	r2, r3, [r3]
    241c:	f7fd fec4 	bl	1a8 <__aeabi_dsub>
    2420:	f7fe fb14 	bl	a4c <__aeabi_d2f>
    2424:	f8cb 0000 	str.w	r0, [fp]
    2428:	e7ee      	b.n	2408 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0xf0>
        ei_dsp_free(mels, mels_mem_size);
    242a:	4638      	mov	r0, r7
    242c:	f016 fb78 	bl	18b20 <_Z7ei_freePv>
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
    2430:	4648      	mov	r0, r9
    2432:	f016 fb71 	bl	18b18 <_Z9ei_mallocj>
        if (!freq_index) {
    2436:	4607      	mov	r7, r0
    2438:	b908      	cbnz	r0, 243e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x126>
            ei_dsp_free(hertz, hertz_mem_size);
    243a:	4630      	mov	r0, r6
    243c:	e7af      	b.n	239e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x86>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
    243e:	3501      	adds	r5, #1
    2440:	ee07 5a90 	vmov	s15, r5
    2444:	eef8 8a68 	vcvt.f32.u32	s17, s17
    2448:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    244c:	f04f 0900 	mov.w	r9, #0
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
    2450:	eb06 0389 	add.w	r3, r6, r9, lsl #2
    2454:	ed93 0a00 	vldr	s0, [r3]
    2458:	ee28 0a00 	vmul.f32	s0, s16, s0
  { return __builtin_floorf(__x); }
    245c:	ee80 0a28 	vdiv.f32	s0, s0, s17
    2460:	f013 f80e 	bl	15480 <floorf>
    2464:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    2468:	ee10 3a10 	vmov	r3, s0
    246c:	f847 3029 	str.w	r3, [r7, r9, lsl #2]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    2470:	f109 0901 	add.w	r9, r9, #1
    2474:	fa1f f989 	uxth.w	r9, r9
    2478:	45c8      	cmp	r8, r9
    247a:	dae9      	bge.n	2450 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x138>
        }
        ei_dsp_free(hertz, hertz_mem_size);
    247c:	4630      	mov	r0, r6
    247e:	f016 fb4f 	bl	18b20 <_Z7ei_freePv>
            if (value < quantized_values_one_zero[mid]) {
    2482:	f8df b218 	ldr.w	fp, [pc, #536]	; 269c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x384>
    2486:	46b8      	mov	r8, r7

        for (size_t i = 0; i < num_filter; i++) {
    2488:	2500      	movs	r5, #0
    248a:	9b02      	ldr	r3, [sp, #8]
    248c:	42ab      	cmp	r3, r5
    248e:	f240 80e9 	bls.w	2664 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x34c>
            int left = freq_index[i];
    2492:	f8d8 3000 	ldr.w	r3, [r8]
    2496:	9301      	str	r3, [sp, #4]
            int middle = freq_index[i + 1];
    2498:	1c6b      	adds	r3, r5, #1
    249a:	9304      	str	r3, [sp, #16]
            int right = freq_index[i + 2];
    249c:	f8d8 6008 	ldr.w	r6, [r8, #8]

            EI_DSP_MATRIX(z, 1, (right - left + 1));
    24a0:	9b01      	ldr	r3, [sp, #4]
            int middle = freq_index[i + 1];
    24a2:	ed98 8a01 	vldr	s16, [r8, #4]
            EI_DSP_MATRIX(z, 1, (right - left + 1));
    24a6:	eba6 0903 	sub.w	r9, r6, r3
    24aa:	f109 0201 	add.w	r2, r9, #1
    24ae:	2101      	movs	r1, #1
    24b0:	2300      	movs	r3, #0
    24b2:	a806      	add	r0, sp, #24
    24b4:	9205      	str	r2, [sp, #20]
    24b6:	f016 f84a 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    24ba:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
            int middle = freq_index[i + 1];
    24be:	f108 0804 	add.w	r8, r8, #4
            EI_DSP_MATRIX(z, 1, (right - left + 1));
    24c2:	b919      	cbnz	r1, 24cc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x1b4>
    24c4:	a806      	add	r0, sp, #24
    24c6:	f015 ffad 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    24ca:	e76a      	b.n	23a2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8a>
            if (!z.buffer) {
                ei_dsp_free(freq_index, freq_index_mem_size);
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
    24cc:	eddd 7a01 	vldr	s15, [sp, #4]
    24d0:	9205      	str	r2, [sp, #20]
    24d2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    24d6:	ee07 6a90 	vmov	s15, r6
    24da:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    24de:	4610      	mov	r0, r2
    24e0:	eef0 0a49 	vmov.f32	s1, s18
    24e4:	eeb0 0a68 	vmov.f32	s0, s17
    24e8:	f016 f801 	bl	184ee <_ZN2ei5numpy8linspaceEffjPf.isra.0>
     * @param left
     * @param middle
     * @param right
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
        EI_DSP_MATRIX(out, 1, x_size);
    24ec:	2101      	movs	r1, #1
    24ee:	9a05      	ldr	r2, [sp, #20]
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
    24f0:	f8dd a018 	ldr.w	sl, [sp, #24]
    24f4:	2300      	movs	r3, #0
    24f6:	a80a      	add	r0, sp, #40	; 0x28
    24f8:	f016 f829 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    24fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    24fe:	2900      	cmp	r1, #0
    2500:	d046      	beq.n	2590 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x278>

        for (size_t ix = 0; ix < x_size; ix++) {
            if (x[ix] > left && x[ix] <= middle) {
                out.buffer[ix] = (x[ix] - left) / (middle - left);
    2502:	9a01      	ldr	r2, [sp, #4]
    2504:	ee18 ea10 	vmov	lr, s16
    2508:	ebae 0e02 	sub.w	lr, lr, r2
            }

            if (x[ix] < right && middle <= x[ix]) {
                out.buffer[ix] = (right - x[ix]) / (right - middle);
    250c:	ee18 2a10 	vmov	r2, s16
    2510:	f10a 0c04 	add.w	ip, sl, #4
    2514:	1ab6      	subs	r6, r6, r2
    2516:	9a05      	ldr	r2, [sp, #20]
    2518:	460b      	mov	r3, r1
    251a:	4650      	mov	r0, sl
    251c:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
        for (size_t ix = 0; ix < x_size; ix++) {
    2520:	4584      	cmp	ip, r0
    2522:	d031      	beq.n	2588 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x270>
            if (x[ix] > left && x[ix] <= middle) {
    2524:	edd0 7a00 	vldr	s15, [r0]
    2528:	eef4 8ae7 	vcmpe.f32	s17, s15
    252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2530:	d510      	bpl.n	2554 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x23c>
    2532:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
    2536:	eef4 7ac7 	vcmpe.f32	s15, s14
    253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    253e:	d809      	bhi.n	2554 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x23c>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
    2540:	ee07 ea10 	vmov	s14, lr
    2544:	ee77 7ae8 	vsub.f32	s15, s15, s17
    2548:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    254c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2550:	ed83 7a00 	vstr	s14, [r3]
            if (x[ix] < right && middle <= x[ix]) {
    2554:	ecf0 7a01 	vldmia	r0!, {s15}
    2558:	eeb4 9ae7 	vcmpe.f32	s18, s15
    255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2560:	dd10      	ble.n	2584 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x26c>
    2562:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
    2566:	eef4 7ac7 	vcmpe.f32	s15, s14
    256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    256e:	db09      	blt.n	2584 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x26c>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
    2570:	ee07 6a10 	vmov	s14, r6
    2574:	ee79 7a67 	vsub.f32	s15, s18, s15
    2578:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    257c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2580:	ed83 7a00 	vstr	s14, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
    2584:	3304      	adds	r3, #4
    2586:	e7cb      	b.n	2520 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x208>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
    2588:	0092      	lsls	r2, r2, #2
    258a:	4650      	mov	r0, sl
    258c:	f019 fba8 	bl	1bce0 <memcpy>
        EI_DSP_MATRIX(out, 1, x_size);
    2590:	a80a      	add	r0, sp, #40	; 0x28
    2592:	f015 ff47 	bl	18424 <_ZN2ei9ei_matrixD1Ev>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
    2596:	2200      	movs	r2, #0
        if (value > quantized_values_one_zero[length - 1]) {
    2598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    259c:	4591      	cmp	r9, r2
    259e:	db5c      	blt.n	265a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x342>
                size_t index = (i * filterbanks->cols) + (left + zx);
    25a0:	9901      	ldr	r1, [sp, #4]
    25a2:	68a3      	ldr	r3, [r4, #8]
    25a4:	1888      	adds	r0, r1, r2

                if (output_transposed) {
    25a6:	9903      	ldr	r1, [sp, #12]
    25a8:	b999      	cbnz	r1, 25d2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x2ba>
                size_t index = (i * filterbanks->cols) + (left + zx);
    25aa:	fb05 0003 	mla	r0, r5, r3, r0
                    index = ((left + zx) * filterbanks->rows) + i;
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
    25ae:	9b06      	ldr	r3, [sp, #24]
    25b0:	493a      	ldr	r1, [pc, #232]	; (269c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x384>)
    25b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    25b6:	edd3 7a00 	vldr	s15, [r3]
    25ba:	6823      	ldr	r3, [r4, #0]
    25bc:	4418      	add	r0, r3
        for (size_t ix = 0; ix < length; ix++) {
    25be:	2300      	movs	r3, #0
            if (quantized_values_one_zero[ix] == value) return ix;
    25c0:	ecb1 7a01 	vldmia	r1!, {s14}
    25c4:	eef4 7a47 	vcmp.f32	s15, s14
    25c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25cc:	d105      	bne.n	25da <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x2c2>
            hi;
    25ce:	b2db      	uxtb	r3, r3
    25d0:	e03c      	b.n	264c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x334>
                    index = ((left + zx) * filterbanks->rows) + i;
    25d2:	6863      	ldr	r3, [r4, #4]
    25d4:	fb03 5000 	mla	r0, r3, r0, r5
    25d8:	e7e9      	b.n	25ae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x296>
        for (size_t ix = 0; ix < length; ix++) {
    25da:	3301      	adds	r3, #1
    25dc:	2bef      	cmp	r3, #239	; 0xef
    25de:	d1ef      	bne.n	25c0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x2a8>
        if (value < quantized_values_one_zero[0]) {
    25e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    25e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25e8:	d433      	bmi.n	2652 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x33a>
        if (value > quantized_values_one_zero[length - 1]) {
    25ea:	eef4 7ae6 	vcmpe.f32	s15, s13
    25ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25f2:	dc30      	bgt.n	2656 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x33e>
        int hi = length - 1;
    25f4:	23ee      	movs	r3, #238	; 0xee
        int lo = 0;
    25f6:	2100      	movs	r1, #0
            int mid = (hi + lo) / 2;
    25f8:	18ce      	adds	r6, r1, r3
    25fa:	1076      	asrs	r6, r6, #1
            if (value < quantized_values_one_zero[mid]) {
    25fc:	eb0b 0c86 	add.w	ip, fp, r6, lsl #2
    2600:	ed9c 7a00 	vldr	s14, [ip]
    2604:	eef4 7ac7 	vcmpe.f32	s15, s14
    2608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    260c:	d515      	bpl.n	263a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x322>
                hi = mid - 1;
    260e:	1e73      	subs	r3, r6, #1
        while (lo <= hi) {
    2610:	428b      	cmp	r3, r1
    2612:	daf1      	bge.n	25f8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x2e0>
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
    2614:	eb0b 0681 	add.w	r6, fp, r1, lsl #2
    2618:	ed96 7a00 	vldr	s14, [r6]
    261c:	eb0b 0683 	add.w	r6, fp, r3, lsl #2
    2620:	ed96 6a00 	vldr	s12, [r6]
    2624:	ee37 7a67 	vsub.f32	s14, s14, s15
    2628:	ee77 7ac6 	vsub.f32	s15, s15, s12
            hi;
    262c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2634:	d5cb      	bpl.n	25ce <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x2b6>
    2636:	b2cb      	uxtb	r3, r1
    2638:	e008      	b.n	264c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x334>
            } else if (value > quantized_values_one_zero[mid]) {
    263a:	dd01      	ble.n	2640 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x328>
                lo = mid + 1;
    263c:	1c71      	adds	r1, r6, #1
    263e:	e7e7      	b.n	2610 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x2f8>
                return quantized_values_one_zero[mid];
    2640:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    2644:	edcd 7a05 	vstr	s15, [sp, #20]
    2648:	f89d 3014 	ldrb.w	r3, [sp, #20]
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
    264c:	7003      	strb	r3, [r0, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
    264e:	3201      	adds	r2, #1
    2650:	e7a4      	b.n	259c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x284>
            return quantized_values_one_zero[0];
    2652:	2300      	movs	r3, #0
    2654:	e7fa      	b.n	264c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x334>
            return quantized_values_one_zero[length - 1];
    2656:	2301      	movs	r3, #1
    2658:	e7f8      	b.n	264c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x334>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
    265a:	a806      	add	r0, sp, #24
    265c:	f015 fee2 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
    2660:	9d04      	ldr	r5, [sp, #16]
    2662:	e712      	b.n	248a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x172>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
    2664:	9b03      	ldr	r3, [sp, #12]
    2666:	b123      	cbz	r3, 2672 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x35a>
            uint16_t r = filterbanks->rows;
            filterbanks->rows = filterbanks->cols;
    2668:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
            filterbanks->cols = r;
    266c:	b29b      	uxth	r3, r3
            filterbanks->rows = filterbanks->cols;
    266e:	6062      	str	r2, [r4, #4]
            filterbanks->cols = r;
    2670:	60a3      	str	r3, [r4, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
    2672:	4638      	mov	r0, r7
    2674:	f016 fa54 	bl	18b20 <_Z7ei_freePv>

        return EIDSP_OK;
    2678:	2000      	movs	r0, #0
    }
    267a:	b00f      	add	sp, #60	; 0x3c
    267c:	ecbd 8b06 	vpop	{d8-d10}
    2680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    2684:	4806      	ldr	r0, [pc, #24]	; (26a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x388>)
    2686:	e7f8      	b.n	267a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x362>
    2688:	d2f1a9fc 	.word	0xd2f1a9fc
    268c:	3f50624d 	.word	0x3f50624d
    2690:	fffffc16 	.word	0xfffffc16
    2694:	448ce000 	.word	0x448ce000
    2698:	442f0000 	.word	0x442f0000
    269c:	0001d71c 	.word	0x0001d71c
    26a0:	fffffc14 	.word	0xfffffc14
    26a4:	00000000 	.word	0x00000000

000026a8 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
    26a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26ac:	ed2d 8b02 	vpush	{d8}
    26b0:	b085      	sub	sp, #20
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
    26b2:	2500      	movs	r5, #0

    if (nfft & 1) {
    26b4:	f010 0a01 	ands.w	sl, r0, #1
{
    26b8:	468b      	mov	fp, r1
    26ba:	4614      	mov	r4, r2
    26bc:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
    26be:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
    26c0:	d009      	beq.n	26d6 <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
    26c2:	4863      	ldr	r0, [pc, #396]	; (2850 <kiss_fftr_alloc+0x1a8>)
    26c4:	f00e fae4 	bl	10c90 <_Z9ei_printfPKcz>
        return NULL;
    26c8:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
    26ca:	4620      	mov	r0, r4
    26cc:	b005      	add	sp, #20
    26ce:	ecbd 8b02 	vpop	{d8}
    26d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
    26d6:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
    26d8:	ab03      	add	r3, sp, #12
    26da:	f8cd a000 	str.w	sl, [sp]
    26de:	4652      	mov	r2, sl
    26e0:	4628      	mov	r0, r5
    26e2:	f000 f8b9 	bl	2858 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
    26e6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
    26ea:	9b03      	ldr	r3, [sp, #12]
    26ec:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    26f0:	1076      	asrs	r6, r6, #1
    26f2:	330c      	adds	r3, #12
    26f4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
    26f8:	2f00      	cmp	r7, #0
    26fa:	d158      	bne.n	27ae <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
    26fc:	4630      	mov	r0, r6
    26fe:	f016 fa0b 	bl	18b18 <_Z9ei_mallocj>
    2702:	4604      	mov	r4, r0
    if (!st)
    2704:	2c00      	cmp	r4, #0
    2706:	d0e0      	beq.n	26ca <kiss_fftr_alloc+0x22>
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
    2708:	9b03      	ldr	r3, [sp, #12]
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    270a:	f104 020c 	add.w	r2, r4, #12
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
    270e:	4413      	add	r3, r2
    2710:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
    2712:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    2716:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    2718:	2300      	movs	r3, #0
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    271a:	6022      	str	r2, [r4, #0]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    271c:	4659      	mov	r1, fp
    271e:	9300      	str	r3, [sp, #0]
    2720:	4628      	mov	r0, r5
    2722:	ab03      	add	r3, sp, #12
        for (i = 0; i < nfft/2; ++i) {
    2724:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    2728:	f000 f896 	bl	2858 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
    272c:	107f      	asrs	r7, r7, #1
    if (inverse_fft) {
    272e:	f1bb 0f00 	cmp.w	fp, #0
    2732:	d042      	beq.n	27ba <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
    2734:	4557      	cmp	r7, sl
    2736:	dd7d      	ble.n	2834 <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
    2738:	f10a 0a01 	add.w	sl, sl, #1
    273c:	4650      	mov	r0, sl
    273e:	f7fd fe81 	bl	444 <__aeabi_i2d>
    2742:	4680      	mov	r8, r0
    2744:	4628      	mov	r0, r5
    2746:	4689      	mov	r9, r1
    2748:	f7fd fe7c 	bl	444 <__aeabi_i2d>
    274c:	4602      	mov	r2, r0
    274e:	460b      	mov	r3, r1
    2750:	4640      	mov	r0, r8
    2752:	4649      	mov	r1, r9
    2754:	f7fe f80a 	bl	76c <__aeabi_ddiv>
    2758:	4b3e      	ldr	r3, [pc, #248]	; (2854 <kiss_fftr_alloc+0x1ac>)
    275a:	2200      	movs	r2, #0
    275c:	f7fd fd26 	bl	1ac <__adddf3>
            double phase =
    2760:	a337      	add	r3, pc, #220	; (adr r3, 2840 <kiss_fftr_alloc+0x198>)
    2762:	e9d3 2300 	ldrd	r2, r3, [r3]
    2766:	f7fd fed7 	bl	518 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
    276a:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
    276e:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
    2772:	f000 fc05 	bl	2f80 <cos>
    2776:	ea4f 08ca 	mov.w	r8, sl, lsl #3
    277a:	68a3      	ldr	r3, [r4, #8]
    277c:	ec51 0b10 	vmov	r0, r1, d0
    2780:	f1a8 0808 	sub.w	r8, r8, #8
    2784:	eb03 0908 	add.w	r9, r3, r8
    2788:	f7fe f960 	bl	a4c <__aeabi_d2f>
    278c:	eeb0 0a48 	vmov.f32	s0, s16
    2790:	eef0 0a68 	vmov.f32	s1, s17
    2794:	f8c9 0000 	str.w	r0, [r9]
    2798:	f000 fcc6 	bl	3128 <sin>
    279c:	68a3      	ldr	r3, [r4, #8]
    279e:	ec51 0b10 	vmov	r0, r1, d0
    27a2:	4498      	add	r8, r3
    27a4:	f7fe f952 	bl	a4c <__aeabi_d2f>
    27a8:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
    27ac:	e7c2      	b.n	2734 <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
    27ae:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
    27b0:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
    27b2:	42b3      	cmp	r3, r6
    27b4:	d2a6      	bcs.n	2704 <kiss_fftr_alloc+0x5c>
        return NULL;
    27b6:	4654      	mov	r4, sl
    27b8:	e787      	b.n	26ca <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
    27ba:	455f      	cmp	r7, fp
    27bc:	dd3a      	ble.n	2834 <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
    27be:	f10b 0b01 	add.w	fp, fp, #1
    27c2:	4658      	mov	r0, fp
    27c4:	f7fd fe3e 	bl	444 <__aeabi_i2d>
    27c8:	4680      	mov	r8, r0
    27ca:	4628      	mov	r0, r5
    27cc:	4689      	mov	r9, r1
    27ce:	f7fd fe39 	bl	444 <__aeabi_i2d>
    27d2:	4602      	mov	r2, r0
    27d4:	460b      	mov	r3, r1
    27d6:	4640      	mov	r0, r8
    27d8:	4649      	mov	r1, r9
    27da:	f7fd ffc7 	bl	76c <__aeabi_ddiv>
    27de:	4b1d      	ldr	r3, [pc, #116]	; (2854 <kiss_fftr_alloc+0x1ac>)
    27e0:	2200      	movs	r2, #0
    27e2:	f7fd fce3 	bl	1ac <__adddf3>
            double phase =
    27e6:	a318      	add	r3, pc, #96	; (adr r3, 2848 <kiss_fftr_alloc+0x1a0>)
    27e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    27ec:	f7fd fe94 	bl	518 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
    27f0:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
    27f4:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
    27f8:	f000 fbc2 	bl	2f80 <cos>
    27fc:	ea4f 08cb 	mov.w	r8, fp, lsl #3
    2800:	68a3      	ldr	r3, [r4, #8]
    2802:	ec51 0b10 	vmov	r0, r1, d0
    2806:	f1a8 0808 	sub.w	r8, r8, #8
    280a:	eb03 0908 	add.w	r9, r3, r8
    280e:	f7fe f91d 	bl	a4c <__aeabi_d2f>
    2812:	eeb0 0a48 	vmov.f32	s0, s16
    2816:	eef0 0a68 	vmov.f32	s1, s17
    281a:	f8c9 0000 	str.w	r0, [r9]
    281e:	f000 fc83 	bl	3128 <sin>
    2822:	68a3      	ldr	r3, [r4, #8]
    2824:	ec51 0b10 	vmov	r0, r1, d0
    2828:	4498      	add	r8, r3
    282a:	f7fe f90f 	bl	a4c <__aeabi_d2f>
    282e:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
    2832:	e7c2      	b.n	27ba <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
    2834:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2836:	2b00      	cmp	r3, #0
    2838:	f43f af47 	beq.w	26ca <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
    283c:	601e      	str	r6, [r3, #0]
    283e:	e744      	b.n	26ca <kiss_fftr_alloc+0x22>
    2840:	54442d18 	.word	0x54442d18
    2844:	400921fb 	.word	0x400921fb
    2848:	54442d18 	.word	0x54442d18
    284c:	c00921fb 	.word	0xc00921fb
    2850:	0003e01a 	.word	0x0003e01a
    2854:	3fe00000 	.word	0x3fe00000

00002858 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
    2858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
    285c:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
    2860:	ed2d 8b02 	vpush	{d8}
    2864:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    2868:	4604      	mov	r4, r0
    286a:	460e      	mov	r6, r1
    286c:	4615      	mov	r5, r2
    size_t memneeded = sizeof(struct kiss_fft_state)
    286e:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
    2870:	2b00      	cmp	r3, #0
    2872:	d13d      	bne.n	28f0 <kiss_fft_alloc+0x98>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
    2874:	4638      	mov	r0, r7
    2876:	f016 f94f 	bl	18b18 <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
    287a:	4605      	mov	r5, r0
    287c:	b3d0      	cbz	r0, 28f4 <kiss_fft_alloc+0x9c>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
    287e:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
    2882:	f505 7a84 	add.w	sl, r5, #264	; 0x108
    2886:	2e00      	cmp	r6, #0
    2888:	d044      	beq.n	2914 <kiss_fft_alloc+0xbc>
    288a:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
    288c:	f04f 0a00 	mov.w	sl, #0
    floor_sqrt = floor( sqrt((double)n) );
    2890:	4620      	mov	r0, r4
    2892:	f7fd fdd7 	bl	444 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
    2896:	45a2      	cmp	sl, r4
    floor_sqrt = floor( sqrt((double)n) );
    2898:	4680      	mov	r8, r0
    289a:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
    289c:	f106 0608 	add.w	r6, r6, #8
    28a0:	da67      	bge.n	2972 <kiss_fft_alloc+0x11a>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
    28a2:	4650      	mov	r0, sl
    28a4:	f7fd fdce 	bl	444 <__aeabi_i2d>
    28a8:	a34b      	add	r3, pc, #300	; (adr r3, 29d8 <kiss_fft_alloc+0x180>)
    28aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    28ae:	f7fd fe33 	bl	518 <__aeabi_dmul>
    28b2:	4642      	mov	r2, r8
    28b4:	464b      	mov	r3, r9
    28b6:	f7fd ff59 	bl	76c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
    28ba:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
    28be:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
    28c2:	f000 fb5d 	bl	2f80 <cos>
    28c6:	ec51 0b10 	vmov	r0, r1, d0
    28ca:	f7fe f8bf 	bl	a4c <__aeabi_d2f>
    28ce:	eeb0 0a48 	vmov.f32	s0, s16
    28d2:	eef0 0a68 	vmov.f32	s1, s17
    28d6:	f846 0c08 	str.w	r0, [r6, #-8]
    28da:	f000 fc25 	bl	3128 <sin>
    28de:	ec51 0b10 	vmov	r0, r1, d0
    28e2:	f7fe f8b3 	bl	a4c <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
    28e6:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
    28ea:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
    28ee:	e7cf      	b.n	2890 <kiss_fft_alloc+0x38>
        if (mem != NULL && *lenmem >= memneeded)
    28f0:	b952      	cbnz	r2, 2908 <kiss_fft_alloc+0xb0>
        *lenmem = memneeded;
    28f2:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
    28f4:	f1bb 0f00 	cmp.w	fp, #0
    28f8:	d001      	beq.n	28fe <kiss_fft_alloc+0xa6>
        *memallocated = memneeded;
    28fa:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
    28fe:	ecbd 8b02 	vpop	{d8}
    2902:	4628      	mov	r0, r5
    2904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
    2908:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
    290a:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
    290c:	42ba      	cmp	r2, r7
    290e:	d2b6      	bcs.n	287e <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
    2910:	2500      	movs	r5, #0
    2912:	e7ef      	b.n	28f4 <kiss_fft_alloc+0x9c>
    floor_sqrt = floor( sqrt((double)n) );
    2914:	4620      	mov	r0, r4
    2916:	f7fd fd95 	bl	444 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
    291a:	42a6      	cmp	r6, r4
    floor_sqrt = floor( sqrt((double)n) );
    291c:	4680      	mov	r8, r0
    291e:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
    2920:	f10a 0a08 	add.w	sl, sl, #8
    2924:	da25      	bge.n	2972 <kiss_fft_alloc+0x11a>
                double phase = -2*pi*i / nfft;
    2926:	4630      	mov	r0, r6
    2928:	f7fd fd8c 	bl	444 <__aeabi_i2d>
    292c:	a32c      	add	r3, pc, #176	; (adr r3, 29e0 <kiss_fft_alloc+0x188>)
    292e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2932:	f7fd fdf1 	bl	518 <__aeabi_dmul>
    2936:	4642      	mov	r2, r8
    2938:	464b      	mov	r3, r9
    293a:	f7fd ff17 	bl	76c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
    293e:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
    2942:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
    2946:	f000 fb1b 	bl	2f80 <cos>
    294a:	ec51 0b10 	vmov	r0, r1, d0
    294e:	f7fe f87d 	bl	a4c <__aeabi_d2f>
    2952:	eeb0 0a48 	vmov.f32	s0, s16
    2956:	eef0 0a68 	vmov.f32	s1, s17
    295a:	f84a 0c08 	str.w	r0, [sl, #-8]
    295e:	f000 fbe3 	bl	3128 <sin>
    2962:	ec51 0b10 	vmov	r0, r1, d0
    2966:	f7fe f871 	bl	a4c <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
    296a:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
    296c:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
    2970:	e7d0      	b.n	2914 <kiss_fft_alloc+0xbc>
    floor_sqrt = floor( sqrt((double)n) );
    2972:	4620      	mov	r0, r4
    2974:	f7fd fd66 	bl	444 <__aeabi_i2d>
    2978:	ec41 0b10 	vmov	d0, r0, r1
    297c:	f012 feba 	bl	156f4 <sqrt>
    2980:	f000 fb52 	bl	3028 <floor>
    2984:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
    2988:	f105 0a08 	add.w	sl, r5, #8
    int p=4;
    298c:	2604      	movs	r6, #4
        while (n % p) {
    298e:	fb94 f3f6 	sdiv	r3, r4, r6
    2992:	fb06 4213 	mls	r2, r6, r3, r4
    2996:	b1aa      	cbz	r2, 29c4 <kiss_fft_alloc+0x16c>
            switch (p) {
    2998:	2e02      	cmp	r6, #2
    299a:	d00f      	beq.n	29bc <kiss_fft_alloc+0x164>
    299c:	2e04      	cmp	r6, #4
    299e:	d00f      	beq.n	29c0 <kiss_fft_alloc+0x168>
                default: p += 2; break;
    29a0:	3602      	adds	r6, #2
            if (p > floor_sqrt)
    29a2:	4630      	mov	r0, r6
    29a4:	f7fd fd4e 	bl	444 <__aeabi_i2d>
    29a8:	4602      	mov	r2, r0
    29aa:	460b      	mov	r3, r1
    29ac:	4640      	mov	r0, r8
    29ae:	4649      	mov	r1, r9
    29b0:	f7fe f824 	bl	9fc <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
    29b4:	2800      	cmp	r0, #0
    29b6:	bf18      	it	ne
    29b8:	4626      	movne	r6, r4
    29ba:	e7e8      	b.n	298e <kiss_fft_alloc+0x136>
                case 2: p = 3; break;
    29bc:	2603      	movs	r6, #3
    29be:	e7f0      	b.n	29a2 <kiss_fft_alloc+0x14a>
            switch (p) {
    29c0:	2602      	movs	r6, #2
    29c2:	e7ee      	b.n	29a2 <kiss_fft_alloc+0x14a>
    } while (n > 1);
    29c4:	2b01      	cmp	r3, #1
        *facbuf++ = n;
    29c6:	e9ca 6300 	strd	r6, r3, [sl]
        n /= p;
    29ca:	461c      	mov	r4, r3
    } while (n > 1);
    29cc:	dd92      	ble.n	28f4 <kiss_fft_alloc+0x9c>
        *facbuf++ = n;
    29ce:	f10a 0a08 	add.w	sl, sl, #8
    29d2:	e7dc      	b.n	298e <kiss_fft_alloc+0x136>
    29d4:	f3af 8000 	nop.w
    29d8:	54442d18 	.word	0x54442d18
    29dc:	401921fb 	.word	0x401921fb
    29e0:	54442d18 	.word	0x54442d18
    29e4:	c01921fb 	.word	0xc01921fb

000029e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    29e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    29ec:	680b      	ldr	r3, [r1, #0]
    29ee:	ed2d 8b02 	vpush	{d8}
    29f2:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    29f4:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    29f6:	b089      	sub	sp, #36	; 0x24
    29f8:	4604      	mov	r4, r0
    29fa:	4689      	mov	r9, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    29fc:	d011      	beq.n	2a22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    29fe:	2501      	movs	r5, #1
    2a00:	4b9c      	ldr	r3, [pc, #624]	; (2c74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    2a02:	9301      	str	r3, [sp, #4]
    2a04:	e9cd 6502 	strd	r6, r5, [sp, #8]
    2a08:	4b9b      	ldr	r3, [pc, #620]	; (2c78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
    2a0a:	9300      	str	r3, [sp, #0]
    2a0c:	6944      	ldr	r4, [r0, #20]
    2a0e:	4a9b      	ldr	r2, [pc, #620]	; (2c7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2a10:	499b      	ldr	r1, [pc, #620]	; (2c80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    2a12:	235d      	movs	r3, #93	; 0x5d
    2a14:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    2a16:	4628      	mov	r0, r5
    2a18:	b009      	add	sp, #36	; 0x24
    2a1a:	ecbd 8b02 	vpop	{d8}
    2a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    2a22:	684b      	ldr	r3, [r1, #4]
    2a24:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    2a26:	2d01      	cmp	r5, #1
    2a28:	d00c      	beq.n	2a44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    2a2a:	4b92      	ldr	r3, [pc, #584]	; (2c74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    2a2c:	9301      	str	r3, [sp, #4]
    2a2e:	e9cd 5602 	strd	r5, r6, [sp, #8]
    2a32:	4b94      	ldr	r3, [pc, #592]	; (2c84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    2a34:	9300      	str	r3, [sp, #0]
    2a36:	6944      	ldr	r4, [r0, #20]
    2a38:	4a90      	ldr	r2, [pc, #576]	; (2c7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2a3a:	4991      	ldr	r1, [pc, #580]	; (2c80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    2a3c:	235e      	movs	r3, #94	; 0x5e
    2a3e:	47a0      	blx	r4
    TF_LITE_ENSURE(context,
    2a40:	2501      	movs	r5, #1
    2a42:	e7e8      	b.n	2a16 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
    2a44:	2200      	movs	r2, #0
    2a46:	f018 f891 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    2a4a:	4680      	mov	r8, r0
    2a4c:	b940      	cbnz	r0, 2a60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    2a4e:	4b8e      	ldr	r3, [pc, #568]	; (2c88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
    2a50:	9300      	str	r3, [sp, #0]
    2a52:	6966      	ldr	r6, [r4, #20]
    2a54:	2360      	movs	r3, #96	; 0x60
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    2a56:	4a89      	ldr	r2, [pc, #548]	; (2c7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2a58:	498c      	ldr	r1, [pc, #560]	; (2c8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    2a5a:	4620      	mov	r0, r4
    2a5c:	47b0      	blx	r6
    2a5e:	e7da      	b.n	2a16 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    2a60:	6883      	ldr	r3, [r0, #8]
    2a62:	681b      	ldr	r3, [r3, #0]
    2a64:	2b00      	cmp	r3, #0
    2a66:	dc04      	bgt.n	2a72 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    2a68:	4b89      	ldr	r3, [pc, #548]	; (2c90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
    2a6a:	9300      	str	r3, [sp, #0]
    2a6c:	6966      	ldr	r6, [r4, #20]
    2a6e:	2361      	movs	r3, #97	; 0x61
    2a70:	e7f1      	b.n	2a56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TfLiteTensor* output = GetOutput(context, node, 0);
    2a72:	2200      	movs	r2, #0
    2a74:	4649      	mov	r1, r9
    2a76:	4620      	mov	r0, r4
    2a78:	f018 f87b 	bl	1ab72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    2a7c:	4606      	mov	r6, r0
    2a7e:	b920      	cbnz	r0, 2a8a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
    2a80:	4b84      	ldr	r3, [pc, #528]	; (2c94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
    2a82:	9300      	str	r3, [sp, #0]
    2a84:	6966      	ldr	r6, [r4, #20]
    2a86:	2363      	movs	r3, #99	; 0x63
    2a88:	e7e5      	b.n	2a56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    2a8a:	f8d9 7010 	ldr.w	r7, [r9, #16]
    2a8e:	b927      	cbnz	r7, 2a9a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    2a90:	4b81      	ldr	r3, [pc, #516]	; (2c98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
    2a92:	9300      	str	r3, [sp, #0]
    2a94:	6966      	ldr	r6, [r4, #20]
    2a96:	2365      	movs	r3, #101	; 0x65
    2a98:	e7dd      	b.n	2a56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  if (input->type == kTfLiteInt16) {
    2a9a:	f898 3000 	ldrb.w	r3, [r8]
    2a9e:	2b07      	cmp	r3, #7
    2aa0:	d117      	bne.n	2ad2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xea>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    2aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2aa4:	f240 4102 	movw	r1, #1026	; 0x402
    2aa8:	4620      	mov	r0, r4
    2aaa:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    2aac:	b920      	cbnz	r0, 2ab8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    2aae:	4b7b      	ldr	r3, [pc, #492]	; (2c9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
    2ab0:	9300      	str	r3, [sp, #0]
    2ab2:	6966      	ldr	r6, [r4, #20]
    2ab4:	236b      	movs	r3, #107	; 0x6b
    2ab6:	e7ce      	b.n	2a56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    2ab8:	62b8      	str	r0, [r7, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    2aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2abc:	f240 4102 	movw	r1, #1026	; 0x402
    2ac0:	4620      	mov	r0, r4
    2ac2:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    2ac4:	b920      	cbnz	r0, 2ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>
    2ac6:	4b76      	ldr	r3, [pc, #472]	; (2ca0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
    2ac8:	9300      	str	r3, [sp, #0]
    2aca:	6966      	ldr	r6, [r4, #20]
    2acc:	236f      	movs	r3, #111	; 0x6f
    2ace:	e7c2      	b.n	2a56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->one_over_one_plus_x_lut =
    2ad0:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
    2ad2:	7832      	ldrb	r2, [r6, #0]
    TF_LITE_ENSURE(context,
    2ad4:	f898 3000 	ldrb.w	r3, [r8]
  if (output->type == kTfLiteInt16) {
    2ad8:	2a07      	cmp	r2, #7
    2ada:	d10c      	bne.n	2af6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
    TF_LITE_ENSURE(context,
    2adc:	2b09      	cmp	r3, #9
    2ade:	d03d      	beq.n	2b5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
    2ae0:	2b07      	cmp	r3, #7
    2ae2:	d017      	beq.n	2b14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    2ae4:	4b6f      	ldr	r3, [pc, #444]	; (2ca4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
    2ae6:	9300      	str	r3, [sp, #0]
    2ae8:	6965      	ldr	r5, [r4, #20]
    2aea:	2375      	movs	r3, #117	; 0x75
    2aec:	4a63      	ldr	r2, [pc, #396]	; (2c7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2aee:	4967      	ldr	r1, [pc, #412]	; (2c8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    2af0:	4620      	mov	r0, r4
    2af2:	47a8      	blx	r5
    2af4:	e7a4      	b.n	2a40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    2af6:	429a      	cmp	r2, r3
    2af8:	d030      	beq.n	2b5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
    2afa:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2afe:	4b6a      	ldr	r3, [pc, #424]	; (2ca8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    2b00:	9301      	str	r3, [sp, #4]
    2b02:	4b6a      	ldr	r3, [pc, #424]	; (2cac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    2b04:	9300      	str	r3, [sp, #0]
    2b06:	6965      	ldr	r5, [r4, #20]
    2b08:	2378      	movs	r3, #120	; 0x78
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    2b0a:	4a5c      	ldr	r2, [pc, #368]	; (2c7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2b0c:	495c      	ldr	r1, [pc, #368]	; (2c80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    2b0e:	4620      	mov	r0, r4
    2b10:	47a8      	blx	r5
    2b12:	e795      	b.n	2a40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    2b14:	6933      	ldr	r3, [r6, #16]
    2b16:	b14b      	cbz	r3, 2b2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x144>
    2b18:	2200      	movs	r2, #0
    2b1a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2b1e:	4b64      	ldr	r3, [pc, #400]	; (2cb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    2b20:	9301      	str	r3, [sp, #4]
    2b22:	4b64      	ldr	r3, [pc, #400]	; (2cb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2b24:	9300      	str	r3, [sp, #0]
    2b26:	6965      	ldr	r5, [r4, #20]
    2b28:	237d      	movs	r3, #125	; 0x7d
    2b2a:	e7ee      	b.n	2b0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    2b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    2b2e:	eddf 0a62 	vldr	s1, [pc, #392]	; 2cb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    2b32:	4862      	ldr	r0, [pc, #392]	; (2cbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    2b34:	f240 2201 	movw	r2, #513	; 0x201
    2b38:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
    2b3c:	f011 f998 	bl	13e70 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    2b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2b42:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 2cb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    2b46:	485e      	ldr	r0, [pc, #376]	; (2cc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
    2b48:	f240 2201 	movw	r2, #513	; 0x201
    2b4c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    2b50:	f011 f98e 	bl	13e70 <_ZN6tflite7gen_lutEPFffEffPsi>
    op_data->zero_point = output->params.zero_point;
    2b54:	6933      	ldr	r3, [r6, #16]
    2b56:	61fb      	str	r3, [r7, #28]
    op_data->scale = output->params.scale;
    2b58:	68f3      	ldr	r3, [r6, #12]
    2b5a:	623b      	str	r3, [r7, #32]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    2b5c:	f898 5000 	ldrb.w	r5, [r8]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    2b60:	f8d9 9014 	ldr.w	r9, [r9, #20]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    2b64:	2d09      	cmp	r5, #9
    2b66:	d039      	beq.n	2bdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f4>
    2b68:	2d07      	cmp	r5, #7
    2b6a:	f040 8129 	bne.w	2dc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3d8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    2b6e:	6933      	ldr	r3, [r6, #16]
    2b70:	b14b      	cbz	r3, 2b86 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
    2b72:	2200      	movs	r2, #0
    2b74:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2b78:	4b4d      	ldr	r3, [pc, #308]	; (2cb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    2b7a:	9301      	str	r3, [sp, #4]
    2b7c:	4b4d      	ldr	r3, [pc, #308]	; (2cb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2b7e:	9300      	str	r3, [sp, #0]
    2b80:	6965      	ldr	r5, [r4, #20]
    2b82:	2325      	movs	r3, #37	; 0x25
    2b84:	e7c1      	b.n	2b0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    2b86:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2cc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>
    2b8a:	ed96 7a03 	vldr	s14, [r6, #12]
    2b8e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 2cc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>
    2b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b9a:	bfcc      	ite	gt
    2b9c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    2ba0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
    2ba4:	eef4 7ae6 	vcmpe.f32	s15, s13
    2ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bac:	f340 80c1 	ble.w	2d32 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x34a>
    2bb0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    2bb4:	2200      	movs	r2, #0
    2bb6:	ee17 0a10 	vmov	r0, s14
    2bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2bbe:	f7fd fc53 	bl	468 <__aeabi_f2d>
    2bc2:	4b42      	ldr	r3, [pc, #264]	; (2ccc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    2bc4:	9301      	str	r3, [sp, #4]
    2bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    2bca:	4b41      	ldr	r3, [pc, #260]	; (2cd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    2bcc:	9300      	str	r3, [sp, #0]
    2bce:	6965      	ldr	r5, [r4, #20]
    2bd0:	2326      	movs	r3, #38	; 0x26
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    2bd2:	4a2a      	ldr	r2, [pc, #168]	; (2c7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2bd4:	493f      	ldr	r1, [pc, #252]	; (2cd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
    2bd6:	4620      	mov	r0, r4
    2bd8:	47a8      	blx	r5
    2bda:	e731      	b.n	2a40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
      if (output->type == kTfLiteInt16) {
    2bdc:	7830      	ldrb	r0, [r6, #0]
    2bde:	2807      	cmp	r0, #7
    2be0:	d133      	bne.n	2c4a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x262>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    2be2:	6933      	ldr	r3, [r6, #16]
    2be4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    2be8:	d009      	beq.n	2bfe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x216>
    2bea:	4a3b      	ldr	r2, [pc, #236]	; (2cd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
    2bec:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2bf0:	4b3a      	ldr	r3, [pc, #232]	; (2cdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
    2bf2:	9301      	str	r3, [sp, #4]
    2bf4:	4b2f      	ldr	r3, [pc, #188]	; (2cb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    2bf6:	9300      	str	r3, [sp, #0]
    2bf8:	6965      	ldr	r5, [r4, #20]
    2bfa:	232b      	movs	r3, #43	; 0x2b
    2bfc:	e785      	b.n	2b0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    2bfe:	eddf 7a38 	vldr	s15, [pc, #224]	; 2ce0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>
    2c02:	ed96 7a03 	vldr	s14, [r6, #12]
    2c06:	eddf 6a37 	vldr	s13, [pc, #220]	; 2ce4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>
    2c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c12:	bfcc      	ite	gt
    2c14:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    2c18:	ee77 7ac7 	vsuble.f32	s15, s15, s14
    2c1c:	eef4 7ae6 	vcmpe.f32	s15, s13
    2c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c24:	f340 80a6 	ble.w	2d74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
    2c28:	4b2f      	ldr	r3, [pc, #188]	; (2ce8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    2c2a:	2200      	movs	r2, #0
    2c2c:	ee17 0a10 	vmov	r0, s14
    2c30:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2c34:	f7fd fc18 	bl	468 <__aeabi_f2d>
    2c38:	4b2c      	ldr	r3, [pc, #176]	; (2cec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    2c3a:	9301      	str	r3, [sp, #4]
    2c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    2c40:	4b23      	ldr	r3, [pc, #140]	; (2cd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    2c42:	9300      	str	r3, [sp, #0]
    2c44:	6965      	ldr	r5, [r4, #20]
    2c46:	232c      	movs	r3, #44	; 0x2c
    2c48:	e7c3      	b.n	2bd2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ea>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    2c4a:	2809      	cmp	r0, #9
    2c4c:	d054      	beq.n	2cf8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>
    2c4e:	6967      	ldr	r7, [r4, #20]
    2c50:	f012 f8d0 	bl	14df4 <TfLiteTypeGetName>
    2c54:	4606      	mov	r6, r0
    2c56:	4628      	mov	r0, r5
    2c58:	f012 f8cc 	bl	14df4 <TfLiteTypeGetName>
    2c5c:	4b24      	ldr	r3, [pc, #144]	; (2cf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    2c5e:	9301      	str	r3, [sp, #4]
    2c60:	4b11      	ldr	r3, [pc, #68]	; (2ca8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    2c62:	9300      	str	r3, [sp, #0]
    2c64:	e9cd 6002 	strd	r6, r0, [sp, #8]
    2c68:	4a04      	ldr	r2, [pc, #16]	; (2c7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    2c6a:	4922      	ldr	r1, [pc, #136]	; (2cf4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    2c6c:	232f      	movs	r3, #47	; 0x2f
    2c6e:	4620      	mov	r0, r4
    2c70:	47b8      	blx	r7
    2c72:	e6e5      	b.n	2a40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    2c74:	0003e957 	.word	0x0003e957
    2c78:	0003e92f 	.word	0x0003e92f
    2c7c:	0003e8b1 	.word	0x0003e8b1
    2c80:	0003e2ab 	.word	0x0003e2ab
    2c84:	0003e86b 	.word	0x0003e86b
    2c88:	0003e276 	.word	0x0003e276
    2c8c:	0003e25f 	.word	0x0003e25f
    2c90:	0003e93f 	.word	0x0003e93f
    2c94:	0003e299 	.word	0x0003e299
    2c98:	0003e959 	.word	0x0003e959
    2c9c:	0003e974 	.word	0x0003e974
    2ca0:	0003e98b 	.word	0x0003e98b
    2ca4:	0003e9ae 	.word	0x0003e9ae
    2ca8:	0003e2c5 	.word	0x0003e2c5
    2cac:	0003e2d2 	.word	0x0003e2d2
    2cb0:	0003d09f 	.word	0x0003d09f
    2cb4:	0003e9e8 	.word	0x0003e9e8
    2cb8:	00000000 	.word	0x00000000
    2cbc:	000199a9 	.word	0x000199a9
    2cc0:	0001999b 	.word	0x0001999b
    2cc4:	38000000 	.word	0x38000000
    2cc8:	3303126f 	.word	0x3303126f
    2ccc:	0003ea22 	.word	0x0003ea22
    2cd0:	0003ea2e 	.word	0x0003ea2e
    2cd4:	0003ea02 	.word	0x0003ea02
    2cd8:	ffff8000 	.word	0xffff8000
    2cdc:	0003ea43 	.word	0x0003ea43
    2ce0:	37800000 	.word	0x37800000
    2ce4:	3283126f 	.word	0x3283126f
    2ce8:	3ef00000 	.word	0x3ef00000
    2cec:	0003ea4a 	.word	0x0003ea4a
    2cf0:	0003ea56 	.word	0x0003ea56
    2cf4:	0003e606 	.word	0x0003e606
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    2cf8:	6933      	ldr	r3, [r6, #16]
    2cfa:	f113 0f80 	cmn.w	r3, #128	; 0x80
    2cfe:	d00a      	beq.n	2d16 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x32e>
    2d00:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2d04:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2d08:	4b49      	ldr	r3, [pc, #292]	; (2e30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x448>)
    2d0a:	9301      	str	r3, [sp, #4]
    2d0c:	4b49      	ldr	r3, [pc, #292]	; (2e34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
    2d0e:	9300      	str	r3, [sp, #0]
    2d10:	6965      	ldr	r5, [r4, #20]
    2d12:	2330      	movs	r3, #48	; 0x30
    2d14:	e6f9      	b.n	2b0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    2d16:	ed96 7a03 	vldr	s14, [r6, #12]
    2d1a:	eddf 7a47 	vldr	s15, [pc, #284]	; 2e38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x450>
    2d1e:	eeb4 7a67 	vcmp.f32	s14, s15
    2d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d26:	d025      	beq.n	2d74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
    2d28:	4b44      	ldr	r3, [pc, #272]	; (2e3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x454>)
    2d2a:	9300      	str	r3, [sp, #0]
    2d2c:	6965      	ldr	r5, [r4, #20]
    2d2e:	2331      	movs	r3, #49	; 0x31
    2d30:	e6dc      	b.n	2aec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x104>
          static_cast<double>(input->params.scale) *
    2d32:	f8d8 000c 	ldr.w	r0, [r8, #12]
    2d36:	f7fd fb97 	bl	468 <__aeabi_f2d>
    2d3a:	4604      	mov	r4, r0
          static_cast<double>(params->beta) /
    2d3c:	f8d9 0000 	ldr.w	r0, [r9]
          static_cast<double>(input->params.scale) *
    2d40:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    2d42:	f7fd fb91 	bl	468 <__aeabi_f2d>
    2d46:	4602      	mov	r2, r0
    2d48:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    2d4a:	4620      	mov	r0, r4
    2d4c:	4629      	mov	r1, r5
    2d4e:	f7fd fbe3 	bl	518 <__aeabi_dmul>
      double input_scale_beta_rescale =
    2d52:	a335      	add	r3, pc, #212	; (adr r3, 2e28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x440>)
    2d54:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d58:	f7fd fd08 	bl	76c <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    2d5c:	f107 0608 	add.w	r6, r7, #8
      double input_scale_beta_rescale =
    2d60:	ec41 0b10 	vmov	d0, r0, r1
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    2d64:	a907      	add	r1, sp, #28
    2d66:	4630      	mov	r0, r6
    2d68:	f012 f850 	bl	14e0c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    2d6c:	9b07      	ldr	r3, [sp, #28]
    2d6e:	60fb      	str	r3, [r7, #12]
  return kTfLiteOk;
    2d70:	2500      	movs	r5, #0
    2d72:	e650      	b.n	2a16 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      tflite::PreprocessSoftmaxScaling(
    2d74:	f8d8 000c 	ldr.w	r0, [r8, #12]
    2d78:	f7fd fb76 	bl	468 <__aeabi_f2d>
    2d7c:	ec41 0b18 	vmov	d8, r0, r1
    2d80:	f8d9 0000 	ldr.w	r0, [r9]
    2d84:	f7fd fb70 	bl	468 <__aeabi_f2d>
    2d88:	eeb0 1a48 	vmov.f32	s2, s16
    2d8c:	eef0 1a68 	vmov.f32	s3, s17
    2d90:	f107 0408 	add.w	r4, r7, #8
    2d94:	ec41 0b10 	vmov	d0, r0, r1
    2d98:	aa07      	add	r2, sp, #28
    2d9a:	4621      	mov	r1, r4
    2d9c:	2005      	movs	r0, #5
    2d9e:	f000 f85b 	bl	2e58 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    2da2:	9907      	ldr	r1, [sp, #28]
    2da4:	60f9      	str	r1, [r7, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    2da6:	221f      	movs	r2, #31
    2da8:	2005      	movs	r0, #5
    2daa:	f017 fe69 	bl	1aa80 <_ZN6tflite20CalculateInputRadiusEiii>
    2dae:	f7fd fb49 	bl	444 <__aeabi_i2d>
    2db2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
    2db6:	4619      	mov	r1, r3
    2db8:	f7fd ff56 	bl	c68 <__aeabi_d2iz>
    2dbc:	61b8      	str	r0, [r7, #24]
    2dbe:	e7d7      	b.n	2d70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    2dc0:	2d01      	cmp	r5, #1
    2dc2:	d013      	beq.n	2dec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x404>
    2dc4:	4628      	mov	r0, r5
    2dc6:	6966      	ldr	r6, [r4, #20]
    2dc8:	f012 f814 	bl	14df4 <TfLiteTypeGetName>
    2dcc:	4605      	mov	r5, r0
    2dce:	2001      	movs	r0, #1
    2dd0:	f012 f810 	bl	14df4 <TfLiteTypeGetName>
    2dd4:	4b1a      	ldr	r3, [pc, #104]	; (2e40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
    2dd6:	9301      	str	r3, [sp, #4]
    2dd8:	4b1a      	ldr	r3, [pc, #104]	; (2e44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x45c>)
    2dda:	9300      	str	r3, [sp, #0]
    2ddc:	e9cd 5002 	strd	r5, r0, [sp, #8]
    2de0:	4a19      	ldr	r2, [pc, #100]	; (2e48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
    2de2:	491a      	ldr	r1, [pc, #104]	; (2e4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
    2de4:	234e      	movs	r3, #78	; 0x4e
    2de6:	4620      	mov	r0, r4
    2de8:	47b0      	blx	r6
    2dea:	e629      	b.n	2a40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    2dec:	7830      	ldrb	r0, [r6, #0]
    2dee:	2801      	cmp	r0, #1
    2df0:	d012      	beq.n	2e18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x430>
    2df2:	6967      	ldr	r7, [r4, #20]
    2df4:	f011 fffe 	bl	14df4 <TfLiteTypeGetName>
    2df8:	4606      	mov	r6, r0
    2dfa:	4628      	mov	r0, r5
    2dfc:	f011 fffa 	bl	14df4 <TfLiteTypeGetName>
    2e00:	4b0f      	ldr	r3, [pc, #60]	; (2e40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
    2e02:	9301      	str	r3, [sp, #4]
    2e04:	4b12      	ldr	r3, [pc, #72]	; (2e50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x468>)
    2e06:	9300      	str	r3, [sp, #0]
    2e08:	e9cd 6002 	strd	r6, r0, [sp, #8]
    2e0c:	4a0e      	ldr	r2, [pc, #56]	; (2e48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
    2e0e:	490f      	ldr	r1, [pc, #60]	; (2e4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
    2e10:	234f      	movs	r3, #79	; 0x4f
    2e12:	4620      	mov	r0, r4
    2e14:	47b8      	blx	r7
    2e16:	e5fe      	b.n	2a16 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    op_data->beta = static_cast<double>(params->beta);
    2e18:	f8d9 0000 	ldr.w	r0, [r9]
    2e1c:	f7fd fb24 	bl	468 <__aeabi_f2d>
    2e20:	e9c7 0100 	strd	r0, r1, [r7]
    2e24:	e7a4      	b.n	2d70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    2e26:	bf00      	nop
    2e28:	00140014 	.word	0x00140014
    2e2c:	3f240014 	.word	0x3f240014
    2e30:	0003ea62 	.word	0x0003ea62
    2e34:	0003e9e8 	.word	0x0003e9e8
    2e38:	3b800000 	.word	0x3b800000
    2e3c:	0003ea67 	.word	0x0003ea67
    2e40:	0003ea89 	.word	0x0003ea89
    2e44:	0003e2d2 	.word	0x0003e2d2
    2e48:	0003e8b1 	.word	0x0003e8b1
    2e4c:	0003e606 	.word	0x0003e606
    2e50:	0003e2c5 	.word	0x0003e2c5
    2e54:	00000000 	.word	0x00000000

00002e58 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    2e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    2e5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
    2e60:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    2e64:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
    2e68:	ec57 6b10 	vmov	r6, r7, d0
    2e6c:	ec59 8b11 	vmov	r8, r9, d1
    2e70:	4693      	mov	fp, r2
    2e72:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    2e74:	f7fd fae6 	bl	444 <__aeabi_i2d>
    2e78:	4642      	mov	r2, r8
    2e7a:	4604      	mov	r4, r0
    2e7c:	460d      	mov	r5, r1
    2e7e:	464b      	mov	r3, r9
    2e80:	4630      	mov	r0, r6
    2e82:	4639      	mov	r1, r7
    2e84:	f7fd fb48 	bl	518 <__aeabi_dmul>
    2e88:	4602      	mov	r2, r0
    2e8a:	460b      	mov	r3, r1
    2e8c:	4620      	mov	r0, r4
    2e8e:	4629      	mov	r1, r5
    2e90:	f7fd fb42 	bl	518 <__aeabi_dmul>
    2e94:	4602      	mov	r2, r0
    2e96:	460b      	mov	r3, r1
    2e98:	ec43 2b18 	vmov	d8, r2, r3
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    2e9c:	a30a      	add	r3, pc, #40	; (adr r3, 2ec8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>)
    2e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ea2:	f7fd fdc9 	bl	a38 <__aeabi_dcmpgt>
    2ea6:	b108      	cbz	r0, 2eac <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x54>
	return __b;
    2ea8:	ed9f 8b07 	vldr	d8, [pc, #28]	; 2ec8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    2eac:	eeb0 0a48 	vmov.f32	s0, s16
    2eb0:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
    2eb4:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    2eb8:	4659      	mov	r1, fp
    2eba:	4650      	mov	r0, sl
}
    2ebc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    2ec0:	f011 bfe6 	b.w	14e90 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
    2ec4:	f3af 8000 	nop.w
    2ec8:	ffc00000 	.word	0xffc00000
    2ecc:	41dfffff 	.word	0x41dfffff

00002ed0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    2ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ed4:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
    2ed6:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
    2ed8:	4615      	mov	r5, r2
    2eda:	461e      	mov	r6, r3
    2edc:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    2ede:	f7fd fac3 	bl	468 <__aeabi_f2d>
    2ee2:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
    2ee4:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
    2ee6:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    2ee8:	f7fd fabe 	bl	468 <__aeabi_f2d>
    2eec:	4602      	mov	r2, r0
    2eee:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    2ef0:	4640      	mov	r0, r8
    2ef2:	4649      	mov	r1, r9
    2ef4:	f7fd fb10 	bl	518 <__aeabi_dmul>
                                              double* multiplier) {
    2ef8:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
    2efc:	4680      	mov	r8, r0
    2efe:	4689      	mov	r9, r1
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    2f00:	b1d6      	cbz	r6, 2f38 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
    2f02:	68f0      	ldr	r0, [r6, #12]
    2f04:	f7fd fab0 	bl	468 <__aeabi_f2d>
    2f08:	4602      	mov	r2, r0
    2f0a:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    2f0c:	4640      	mov	r0, r8
    2f0e:	4649      	mov	r1, r9
    2f10:	f7fd f94a 	bl	1a8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    2f14:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
    2f16:	68f8      	ldr	r0, [r7, #12]
    2f18:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    2f1c:	f7fd faa4 	bl	468 <__aeabi_f2d>
    2f20:	4602      	mov	r2, r0
    2f22:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    2f24:	4640      	mov	r0, r8
    2f26:	4649      	mov	r1, r9
    2f28:	f7fd fc20 	bl	76c <__aeabi_ddiv>
    2f2c:	a311      	add	r3, pc, #68	; (adr r3, 2f74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    2f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f32:	f7fd fd6d 	bl	a10 <__aeabi_dcmple>
    2f36:	b150      	cbz	r0, 2f4e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    2f38:	463b      	mov	r3, r7
    2f3a:	462a      	mov	r2, r5
    2f3c:	4651      	mov	r1, sl
    2f3e:	4620      	mov	r0, r4
    2f40:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
    2f44:	b003      	add	sp, #12
    2f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    2f4a:	f011 bfbd 	b.w	14ec8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    2f4e:	4b06      	ldr	r3, [pc, #24]	; (2f68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    2f50:	9300      	str	r3, [sp, #0]
    2f52:	4620      	mov	r0, r4
    2f54:	6965      	ldr	r5, [r4, #20]
    2f56:	4a05      	ldr	r2, [pc, #20]	; (2f6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    2f58:	4905      	ldr	r1, [pc, #20]	; (2f70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    2f5a:	f44f 73a2 	mov.w	r3, #324	; 0x144
    2f5e:	47a8      	blx	r5
}
    2f60:	2001      	movs	r0, #1
    2f62:	b003      	add	sp, #12
    2f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f68:	0003eba3 	.word	0x0003eba3
    2f6c:	0003eb10 	.word	0x0003eb10
    2f70:	0003e25f 	.word	0x0003e25f
    2f74:	47ae147b 	.word	0x47ae147b
    2f78:	3f947ae1 	.word	0x3f947ae1
    2f7c:	00000000 	.word	0x00000000

00002f80 <cos>:
    2f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2f82:	ec53 2b10 	vmov	r2, r3, d0
    2f86:	4826      	ldr	r0, [pc, #152]	; (3020 <cos+0xa0>)
    2f88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    2f8c:	4281      	cmp	r1, r0
    2f8e:	dc06      	bgt.n	2f9e <cos+0x1e>
    2f90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 3018 <cos+0x98>
    2f94:	b005      	add	sp, #20
    2f96:	f85d eb04 	ldr.w	lr, [sp], #4
    2f9a:	f001 b849 	b.w	4030 <__kernel_cos>
    2f9e:	4821      	ldr	r0, [pc, #132]	; (3024 <cos+0xa4>)
    2fa0:	4281      	cmp	r1, r0
    2fa2:	dd09      	ble.n	2fb8 <cos+0x38>
    2fa4:	ee10 0a10 	vmov	r0, s0
    2fa8:	4619      	mov	r1, r3
    2faa:	f7fd f8fd 	bl	1a8 <__aeabi_dsub>
    2fae:	ec41 0b10 	vmov	d0, r0, r1
    2fb2:	b005      	add	sp, #20
    2fb4:	f85d fb04 	ldr.w	pc, [sp], #4
    2fb8:	4668      	mov	r0, sp
    2fba:	f000 fe2d 	bl	3c18 <__ieee754_rem_pio2>
    2fbe:	f000 0003 	and.w	r0, r0, #3
    2fc2:	2801      	cmp	r0, #1
    2fc4:	d00b      	beq.n	2fde <cos+0x5e>
    2fc6:	2802      	cmp	r0, #2
    2fc8:	d016      	beq.n	2ff8 <cos+0x78>
    2fca:	b9e0      	cbnz	r0, 3006 <cos+0x86>
    2fcc:	ed9d 1b02 	vldr	d1, [sp, #8]
    2fd0:	ed9d 0b00 	vldr	d0, [sp]
    2fd4:	f001 f82c 	bl	4030 <__kernel_cos>
    2fd8:	ec51 0b10 	vmov	r0, r1, d0
    2fdc:	e7e7      	b.n	2fae <cos+0x2e>
    2fde:	ed9d 1b02 	vldr	d1, [sp, #8]
    2fe2:	ed9d 0b00 	vldr	d0, [sp]
    2fe6:	f001 fc37 	bl	4858 <__kernel_sin>
    2fea:	ec53 2b10 	vmov	r2, r3, d0
    2fee:	ee10 0a10 	vmov	r0, s0
    2ff2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    2ff6:	e7da      	b.n	2fae <cos+0x2e>
    2ff8:	ed9d 1b02 	vldr	d1, [sp, #8]
    2ffc:	ed9d 0b00 	vldr	d0, [sp]
    3000:	f001 f816 	bl	4030 <__kernel_cos>
    3004:	e7f1      	b.n	2fea <cos+0x6a>
    3006:	ed9d 1b02 	vldr	d1, [sp, #8]
    300a:	ed9d 0b00 	vldr	d0, [sp]
    300e:	2001      	movs	r0, #1
    3010:	f001 fc22 	bl	4858 <__kernel_sin>
    3014:	e7e0      	b.n	2fd8 <cos+0x58>
    3016:	bf00      	nop
	...
    3020:	3fe921fb 	.word	0x3fe921fb
    3024:	7fefffff 	.word	0x7fefffff

00003028 <floor>:
    3028:	ec51 0b10 	vmov	r0, r1, d0
    302c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3030:	f3c1 570a 	ubfx	r7, r1, #20, #11
    3034:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    3038:	2e13      	cmp	r6, #19
    303a:	ee10 5a10 	vmov	r5, s0
    303e:	ee10 8a10 	vmov	r8, s0
    3042:	460c      	mov	r4, r1
    3044:	dc32      	bgt.n	30ac <floor+0x84>
    3046:	2e00      	cmp	r6, #0
    3048:	da14      	bge.n	3074 <floor+0x4c>
    304a:	a333      	add	r3, pc, #204	; (adr r3, 3118 <floor+0xf0>)
    304c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3050:	f7fd f8ac 	bl	1ac <__adddf3>
    3054:	2200      	movs	r2, #0
    3056:	2300      	movs	r3, #0
    3058:	f7fd fcee 	bl	a38 <__aeabi_dcmpgt>
    305c:	b138      	cbz	r0, 306e <floor+0x46>
    305e:	2c00      	cmp	r4, #0
    3060:	da57      	bge.n	3112 <floor+0xea>
    3062:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    3066:	431d      	orrs	r5, r3
    3068:	d001      	beq.n	306e <floor+0x46>
    306a:	4c2d      	ldr	r4, [pc, #180]	; (3120 <floor+0xf8>)
    306c:	2500      	movs	r5, #0
    306e:	4621      	mov	r1, r4
    3070:	4628      	mov	r0, r5
    3072:	e025      	b.n	30c0 <floor+0x98>
    3074:	4f2b      	ldr	r7, [pc, #172]	; (3124 <floor+0xfc>)
    3076:	4137      	asrs	r7, r6
    3078:	ea01 0307 	and.w	r3, r1, r7
    307c:	4303      	orrs	r3, r0
    307e:	d01f      	beq.n	30c0 <floor+0x98>
    3080:	a325      	add	r3, pc, #148	; (adr r3, 3118 <floor+0xf0>)
    3082:	e9d3 2300 	ldrd	r2, r3, [r3]
    3086:	f7fd f891 	bl	1ac <__adddf3>
    308a:	2200      	movs	r2, #0
    308c:	2300      	movs	r3, #0
    308e:	f7fd fcd3 	bl	a38 <__aeabi_dcmpgt>
    3092:	2800      	cmp	r0, #0
    3094:	d0eb      	beq.n	306e <floor+0x46>
    3096:	2c00      	cmp	r4, #0
    3098:	bfbe      	ittt	lt
    309a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    309e:	fa43 f606 	asrlt.w	r6, r3, r6
    30a2:	19a4      	addlt	r4, r4, r6
    30a4:	ea24 0407 	bic.w	r4, r4, r7
    30a8:	2500      	movs	r5, #0
    30aa:	e7e0      	b.n	306e <floor+0x46>
    30ac:	2e33      	cmp	r6, #51	; 0x33
    30ae:	dd0b      	ble.n	30c8 <floor+0xa0>
    30b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    30b4:	d104      	bne.n	30c0 <floor+0x98>
    30b6:	ee10 2a10 	vmov	r2, s0
    30ba:	460b      	mov	r3, r1
    30bc:	f7fd f876 	bl	1ac <__adddf3>
    30c0:	ec41 0b10 	vmov	d0, r0, r1
    30c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    30cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30d0:	fa23 f707 	lsr.w	r7, r3, r7
    30d4:	4207      	tst	r7, r0
    30d6:	d0f3      	beq.n	30c0 <floor+0x98>
    30d8:	a30f      	add	r3, pc, #60	; (adr r3, 3118 <floor+0xf0>)
    30da:	e9d3 2300 	ldrd	r2, r3, [r3]
    30de:	f7fd f865 	bl	1ac <__adddf3>
    30e2:	2200      	movs	r2, #0
    30e4:	2300      	movs	r3, #0
    30e6:	f7fd fca7 	bl	a38 <__aeabi_dcmpgt>
    30ea:	2800      	cmp	r0, #0
    30ec:	d0bf      	beq.n	306e <floor+0x46>
    30ee:	2c00      	cmp	r4, #0
    30f0:	da02      	bge.n	30f8 <floor+0xd0>
    30f2:	2e14      	cmp	r6, #20
    30f4:	d103      	bne.n	30fe <floor+0xd6>
    30f6:	3401      	adds	r4, #1
    30f8:	ea25 0507 	bic.w	r5, r5, r7
    30fc:	e7b7      	b.n	306e <floor+0x46>
    30fe:	2301      	movs	r3, #1
    3100:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    3104:	fa03 f606 	lsl.w	r6, r3, r6
    3108:	4435      	add	r5, r6
    310a:	4545      	cmp	r5, r8
    310c:	bf38      	it	cc
    310e:	18e4      	addcc	r4, r4, r3
    3110:	e7f2      	b.n	30f8 <floor+0xd0>
    3112:	2500      	movs	r5, #0
    3114:	462c      	mov	r4, r5
    3116:	e7aa      	b.n	306e <floor+0x46>
    3118:	8800759c 	.word	0x8800759c
    311c:	7e37e43c 	.word	0x7e37e43c
    3120:	bff00000 	.word	0xbff00000
    3124:	000fffff 	.word	0x000fffff

00003128 <sin>:
    3128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    312a:	ec53 2b10 	vmov	r2, r3, d0
    312e:	4828      	ldr	r0, [pc, #160]	; (31d0 <sin+0xa8>)
    3130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    3134:	4281      	cmp	r1, r0
    3136:	dc07      	bgt.n	3148 <sin+0x20>
    3138:	ed9f 1b23 	vldr	d1, [pc, #140]	; 31c8 <sin+0xa0>
    313c:	2000      	movs	r0, #0
    313e:	b005      	add	sp, #20
    3140:	f85d eb04 	ldr.w	lr, [sp], #4
    3144:	f001 bb88 	b.w	4858 <__kernel_sin>
    3148:	4822      	ldr	r0, [pc, #136]	; (31d4 <sin+0xac>)
    314a:	4281      	cmp	r1, r0
    314c:	dd09      	ble.n	3162 <sin+0x3a>
    314e:	ee10 0a10 	vmov	r0, s0
    3152:	4619      	mov	r1, r3
    3154:	f7fd f828 	bl	1a8 <__aeabi_dsub>
    3158:	ec41 0b10 	vmov	d0, r0, r1
    315c:	b005      	add	sp, #20
    315e:	f85d fb04 	ldr.w	pc, [sp], #4
    3162:	4668      	mov	r0, sp
    3164:	f000 fd58 	bl	3c18 <__ieee754_rem_pio2>
    3168:	f000 0003 	and.w	r0, r0, #3
    316c:	2801      	cmp	r0, #1
    316e:	d00c      	beq.n	318a <sin+0x62>
    3170:	2802      	cmp	r0, #2
    3172:	d011      	beq.n	3198 <sin+0x70>
    3174:	b9f0      	cbnz	r0, 31b4 <sin+0x8c>
    3176:	ed9d 1b02 	vldr	d1, [sp, #8]
    317a:	ed9d 0b00 	vldr	d0, [sp]
    317e:	2001      	movs	r0, #1
    3180:	f001 fb6a 	bl	4858 <__kernel_sin>
    3184:	ec51 0b10 	vmov	r0, r1, d0
    3188:	e7e6      	b.n	3158 <sin+0x30>
    318a:	ed9d 1b02 	vldr	d1, [sp, #8]
    318e:	ed9d 0b00 	vldr	d0, [sp]
    3192:	f000 ff4d 	bl	4030 <__kernel_cos>
    3196:	e7f5      	b.n	3184 <sin+0x5c>
    3198:	ed9d 1b02 	vldr	d1, [sp, #8]
    319c:	ed9d 0b00 	vldr	d0, [sp]
    31a0:	2001      	movs	r0, #1
    31a2:	f001 fb59 	bl	4858 <__kernel_sin>
    31a6:	ec53 2b10 	vmov	r2, r3, d0
    31aa:	ee10 0a10 	vmov	r0, s0
    31ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    31b2:	e7d1      	b.n	3158 <sin+0x30>
    31b4:	ed9d 1b02 	vldr	d1, [sp, #8]
    31b8:	ed9d 0b00 	vldr	d0, [sp]
    31bc:	f000 ff38 	bl	4030 <__kernel_cos>
    31c0:	e7f1      	b.n	31a6 <sin+0x7e>
    31c2:	bf00      	nop
    31c4:	f3af 8000 	nop.w
	...
    31d0:	3fe921fb 	.word	0x3fe921fb
    31d4:	7fefffff 	.word	0x7fefffff

000031d8 <__ieee754_pow>:
    31d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31dc:	ed2d 8b06 	vpush	{d8-d10}
    31e0:	b089      	sub	sp, #36	; 0x24
    31e2:	ed8d 1b00 	vstr	d1, [sp]
    31e6:	e9dd 0700 	ldrd	r0, r7, [sp]
    31ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
    31ee:	ea56 0100 	orrs.w	r1, r6, r0
    31f2:	ec53 2b10 	vmov	r2, r3, d0
    31f6:	f000 84cc 	beq.w	3b92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfa>
    31fa:	497f      	ldr	r1, [pc, #508]	; (33f8 <__ieee754_pow+0x220>)
    31fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    3200:	428c      	cmp	r4, r1
    3202:	ee10 8a10 	vmov	r8, s0
    3206:	4699      	mov	r9, r3
    3208:	dc09      	bgt.n	321e <__ieee754_pow+0x46>
    320a:	d103      	bne.n	3214 <__ieee754_pow+0x3c>
    320c:	b97a      	cbnz	r2, 322e <__ieee754_pow+0x56>
    320e:	42a6      	cmp	r6, r4
    3210:	dd02      	ble.n	3218 <__ieee754_pow+0x40>
    3212:	e00c      	b.n	322e <__ieee754_pow+0x56>
    3214:	428e      	cmp	r6, r1
    3216:	dc02      	bgt.n	321e <__ieee754_pow+0x46>
    3218:	428e      	cmp	r6, r1
    321a:	d110      	bne.n	323e <__ieee754_pow+0x66>
    321c:	b178      	cbz	r0, 323e <__ieee754_pow+0x66>
    321e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    3222:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    3226:	ea54 0308 	orrs.w	r3, r4, r8
    322a:	f000 84b2 	beq.w	3b92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfa>
    322e:	4873      	ldr	r0, [pc, #460]	; (33fc <__ieee754_pow+0x224>)
    3230:	b009      	add	sp, #36	; 0x24
    3232:	ecbd 8b06 	vpop	{d8-d10}
    3236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    323a:	f001 bbcd 	b.w	49d8 <nan>
    323e:	f1b9 0f00 	cmp.w	r9, #0
    3242:	da36      	bge.n	32b2 <__ieee754_pow+0xda>
    3244:	496e      	ldr	r1, [pc, #440]	; (3400 <__ieee754_pow+0x228>)
    3246:	428e      	cmp	r6, r1
    3248:	dc51      	bgt.n	32ee <__ieee754_pow+0x116>
    324a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
    324e:	428e      	cmp	r6, r1
    3250:	f340 84aa 	ble.w	3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
    3254:	1531      	asrs	r1, r6, #20
    3256:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    325a:	2914      	cmp	r1, #20
    325c:	dd0f      	ble.n	327e <__ieee754_pow+0xa6>
    325e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
    3262:	fa20 fc01 	lsr.w	ip, r0, r1
    3266:	fa0c f101 	lsl.w	r1, ip, r1
    326a:	4281      	cmp	r1, r0
    326c:	f040 849c 	bne.w	3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
    3270:	f00c 0c01 	and.w	ip, ip, #1
    3274:	f1cc 0102 	rsb	r1, ip, #2
    3278:	9104      	str	r1, [sp, #16]
    327a:	b180      	cbz	r0, 329e <__ieee754_pow+0xc6>
    327c:	e059      	b.n	3332 <__ieee754_pow+0x15a>
    327e:	2800      	cmp	r0, #0
    3280:	d155      	bne.n	332e <__ieee754_pow+0x156>
    3282:	f1c1 0114 	rsb	r1, r1, #20
    3286:	fa46 fc01 	asr.w	ip, r6, r1
    328a:	fa0c f101 	lsl.w	r1, ip, r1
    328e:	42b1      	cmp	r1, r6
    3290:	f040 8487 	bne.w	3ba2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10a>
    3294:	f00c 0c01 	and.w	ip, ip, #1
    3298:	f1cc 0102 	rsb	r1, ip, #2
    329c:	9104      	str	r1, [sp, #16]
    329e:	4959      	ldr	r1, [pc, #356]	; (3404 <__ieee754_pow+0x22c>)
    32a0:	428e      	cmp	r6, r1
    32a2:	d12d      	bne.n	3300 <__ieee754_pow+0x128>
    32a4:	2f00      	cmp	r7, #0
    32a6:	da79      	bge.n	339c <__ieee754_pow+0x1c4>
    32a8:	4956      	ldr	r1, [pc, #344]	; (3404 <__ieee754_pow+0x22c>)
    32aa:	2000      	movs	r0, #0
    32ac:	f7fd fa5e 	bl	76c <__aeabi_ddiv>
    32b0:	e016      	b.n	32e0 <__ieee754_pow+0x108>
    32b2:	2100      	movs	r1, #0
    32b4:	9104      	str	r1, [sp, #16]
    32b6:	2800      	cmp	r0, #0
    32b8:	d13b      	bne.n	3332 <__ieee754_pow+0x15a>
    32ba:	494f      	ldr	r1, [pc, #316]	; (33f8 <__ieee754_pow+0x220>)
    32bc:	428e      	cmp	r6, r1
    32be:	d1ee      	bne.n	329e <__ieee754_pow+0xc6>
    32c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    32c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    32c8:	ea53 0308 	orrs.w	r3, r3, r8
    32cc:	f000 8461 	beq.w	3b92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfa>
    32d0:	4b4d      	ldr	r3, [pc, #308]	; (3408 <__ieee754_pow+0x230>)
    32d2:	429c      	cmp	r4, r3
    32d4:	dd0d      	ble.n	32f2 <__ieee754_pow+0x11a>
    32d6:	2f00      	cmp	r7, #0
    32d8:	f280 845f 	bge.w	3b9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x102>
    32dc:	2000      	movs	r0, #0
    32de:	2100      	movs	r1, #0
    32e0:	ec41 0b10 	vmov	d0, r0, r1
    32e4:	b009      	add	sp, #36	; 0x24
    32e6:	ecbd 8b06 	vpop	{d8-d10}
    32ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32ee:	2102      	movs	r1, #2
    32f0:	e7e0      	b.n	32b4 <__ieee754_pow+0xdc>
    32f2:	2f00      	cmp	r7, #0
    32f4:	daf2      	bge.n	32dc <__ieee754_pow+0x104>
    32f6:	e9dd 0300 	ldrd	r0, r3, [sp]
    32fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    32fe:	e7ef      	b.n	32e0 <__ieee754_pow+0x108>
    3300:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
    3304:	d104      	bne.n	3310 <__ieee754_pow+0x138>
    3306:	4610      	mov	r0, r2
    3308:	4619      	mov	r1, r3
    330a:	f7fd f905 	bl	518 <__aeabi_dmul>
    330e:	e7e7      	b.n	32e0 <__ieee754_pow+0x108>
    3310:	493e      	ldr	r1, [pc, #248]	; (340c <__ieee754_pow+0x234>)
    3312:	428f      	cmp	r7, r1
    3314:	d10d      	bne.n	3332 <__ieee754_pow+0x15a>
    3316:	f1b9 0f00 	cmp.w	r9, #0
    331a:	db0a      	blt.n	3332 <__ieee754_pow+0x15a>
    331c:	ec43 2b10 	vmov	d0, r2, r3
    3320:	b009      	add	sp, #36	; 0x24
    3322:	ecbd 8b06 	vpop	{d8-d10}
    3326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    332a:	f012 ba7b 	b.w	15824 <__ieee754_sqrt>
    332e:	2100      	movs	r1, #0
    3330:	9104      	str	r1, [sp, #16]
    3332:	ec43 2b10 	vmov	d0, r2, r3
    3336:	e9cd 2302 	strd	r2, r3, [sp, #8]
    333a:	f018 fc7b 	bl	1bc34 <fabs>
    333e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3342:	ec51 0b10 	vmov	r0, r1, d0
    3346:	f1b8 0f00 	cmp.w	r8, #0
    334a:	d12a      	bne.n	33a2 <__ieee754_pow+0x1ca>
    334c:	b12c      	cbz	r4, 335a <__ieee754_pow+0x182>
    334e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 3404 <__ieee754_pow+0x22c>
    3352:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
    3356:	45e6      	cmp	lr, ip
    3358:	d123      	bne.n	33a2 <__ieee754_pow+0x1ca>
    335a:	2f00      	cmp	r7, #0
    335c:	da05      	bge.n	336a <__ieee754_pow+0x192>
    335e:	4602      	mov	r2, r0
    3360:	460b      	mov	r3, r1
    3362:	2000      	movs	r0, #0
    3364:	4927      	ldr	r1, [pc, #156]	; (3404 <__ieee754_pow+0x22c>)
    3366:	f7fd fa01 	bl	76c <__aeabi_ddiv>
    336a:	f1b9 0f00 	cmp.w	r9, #0
    336e:	dab7      	bge.n	32e0 <__ieee754_pow+0x108>
    3370:	9b04      	ldr	r3, [sp, #16]
    3372:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    3376:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    337a:	4323      	orrs	r3, r4
    337c:	d108      	bne.n	3390 <__ieee754_pow+0x1b8>
    337e:	4602      	mov	r2, r0
    3380:	460b      	mov	r3, r1
    3382:	4610      	mov	r0, r2
    3384:	4619      	mov	r1, r3
    3386:	f7fc ff0f 	bl	1a8 <__aeabi_dsub>
    338a:	4602      	mov	r2, r0
    338c:	460b      	mov	r3, r1
    338e:	e78d      	b.n	32ac <__ieee754_pow+0xd4>
    3390:	9b04      	ldr	r3, [sp, #16]
    3392:	2b01      	cmp	r3, #1
    3394:	d1a4      	bne.n	32e0 <__ieee754_pow+0x108>
    3396:	4602      	mov	r2, r0
    3398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    339c:	4610      	mov	r0, r2
    339e:	4619      	mov	r1, r3
    33a0:	e79e      	b.n	32e0 <__ieee754_pow+0x108>
    33a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
    33a6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
    33aa:	9506      	str	r5, [sp, #24]
    33ac:	9d04      	ldr	r5, [sp, #16]
    33ae:	46ac      	mov	ip, r5
    33b0:	9d06      	ldr	r5, [sp, #24]
    33b2:	ea5c 0505 	orrs.w	r5, ip, r5
    33b6:	d0e4      	beq.n	3382 <__ieee754_pow+0x1aa>
    33b8:	4b15      	ldr	r3, [pc, #84]	; (3410 <__ieee754_pow+0x238>)
    33ba:	429e      	cmp	r6, r3
    33bc:	f340 80fc 	ble.w	35b8 <__ieee754_pow+0x3e0>
    33c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    33c4:	429e      	cmp	r6, r3
    33c6:	4b10      	ldr	r3, [pc, #64]	; (3408 <__ieee754_pow+0x230>)
    33c8:	dd07      	ble.n	33da <__ieee754_pow+0x202>
    33ca:	429c      	cmp	r4, r3
    33cc:	dc0a      	bgt.n	33e4 <__ieee754_pow+0x20c>
    33ce:	2f00      	cmp	r7, #0
    33d0:	da84      	bge.n	32dc <__ieee754_pow+0x104>
    33d2:	a307      	add	r3, pc, #28	; (adr r3, 33f0 <__ieee754_pow+0x218>)
    33d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    33d8:	e795      	b.n	3306 <__ieee754_pow+0x12e>
    33da:	429c      	cmp	r4, r3
    33dc:	dbf7      	blt.n	33ce <__ieee754_pow+0x1f6>
    33de:	4b09      	ldr	r3, [pc, #36]	; (3404 <__ieee754_pow+0x22c>)
    33e0:	429c      	cmp	r4, r3
    33e2:	dd17      	ble.n	3414 <__ieee754_pow+0x23c>
    33e4:	2f00      	cmp	r7, #0
    33e6:	dcf4      	bgt.n	33d2 <__ieee754_pow+0x1fa>
    33e8:	e778      	b.n	32dc <__ieee754_pow+0x104>
    33ea:	bf00      	nop
    33ec:	f3af 8000 	nop.w
    33f0:	8800759c 	.word	0x8800759c
    33f4:	7e37e43c 	.word	0x7e37e43c
    33f8:	7ff00000 	.word	0x7ff00000
    33fc:	0003d162 	.word	0x0003d162
    3400:	433fffff 	.word	0x433fffff
    3404:	3ff00000 	.word	0x3ff00000
    3408:	3fefffff 	.word	0x3fefffff
    340c:	3fe00000 	.word	0x3fe00000
    3410:	41e00000 	.word	0x41e00000
    3414:	4b64      	ldr	r3, [pc, #400]	; (35a8 <__ieee754_pow+0x3d0>)
    3416:	2200      	movs	r2, #0
    3418:	f7fc fec6 	bl	1a8 <__aeabi_dsub>
    341c:	a356      	add	r3, pc, #344	; (adr r3, 3578 <__ieee754_pow+0x3a0>)
    341e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3422:	4604      	mov	r4, r0
    3424:	460d      	mov	r5, r1
    3426:	f7fd f877 	bl	518 <__aeabi_dmul>
    342a:	a355      	add	r3, pc, #340	; (adr r3, 3580 <__ieee754_pow+0x3a8>)
    342c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3430:	4606      	mov	r6, r0
    3432:	460f      	mov	r7, r1
    3434:	4620      	mov	r0, r4
    3436:	4629      	mov	r1, r5
    3438:	f7fd f86e 	bl	518 <__aeabi_dmul>
    343c:	4b5b      	ldr	r3, [pc, #364]	; (35ac <__ieee754_pow+0x3d4>)
    343e:	4682      	mov	sl, r0
    3440:	468b      	mov	fp, r1
    3442:	2200      	movs	r2, #0
    3444:	4620      	mov	r0, r4
    3446:	4629      	mov	r1, r5
    3448:	f7fd f866 	bl	518 <__aeabi_dmul>
    344c:	4602      	mov	r2, r0
    344e:	460b      	mov	r3, r1
    3450:	a14d      	add	r1, pc, #308	; (adr r1, 3588 <__ieee754_pow+0x3b0>)
    3452:	e9d1 0100 	ldrd	r0, r1, [r1]
    3456:	f7fc fea7 	bl	1a8 <__aeabi_dsub>
    345a:	4622      	mov	r2, r4
    345c:	462b      	mov	r3, r5
    345e:	f7fd f85b 	bl	518 <__aeabi_dmul>
    3462:	4602      	mov	r2, r0
    3464:	460b      	mov	r3, r1
    3466:	2000      	movs	r0, #0
    3468:	4951      	ldr	r1, [pc, #324]	; (35b0 <__ieee754_pow+0x3d8>)
    346a:	f7fc fe9d 	bl	1a8 <__aeabi_dsub>
    346e:	4622      	mov	r2, r4
    3470:	4680      	mov	r8, r0
    3472:	4689      	mov	r9, r1
    3474:	462b      	mov	r3, r5
    3476:	4620      	mov	r0, r4
    3478:	4629      	mov	r1, r5
    347a:	f7fd f84d 	bl	518 <__aeabi_dmul>
    347e:	4602      	mov	r2, r0
    3480:	460b      	mov	r3, r1
    3482:	4640      	mov	r0, r8
    3484:	4649      	mov	r1, r9
    3486:	f7fd f847 	bl	518 <__aeabi_dmul>
    348a:	a341      	add	r3, pc, #260	; (adr r3, 3590 <__ieee754_pow+0x3b8>)
    348c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3490:	f7fd f842 	bl	518 <__aeabi_dmul>
    3494:	4602      	mov	r2, r0
    3496:	460b      	mov	r3, r1
    3498:	4650      	mov	r0, sl
    349a:	4659      	mov	r1, fp
    349c:	f7fc fe84 	bl	1a8 <__aeabi_dsub>
    34a0:	4602      	mov	r2, r0
    34a2:	460b      	mov	r3, r1
    34a4:	4680      	mov	r8, r0
    34a6:	4689      	mov	r9, r1
    34a8:	4630      	mov	r0, r6
    34aa:	4639      	mov	r1, r7
    34ac:	f7fc fe7e 	bl	1ac <__adddf3>
    34b0:	2000      	movs	r0, #0
    34b2:	4632      	mov	r2, r6
    34b4:	463b      	mov	r3, r7
    34b6:	4604      	mov	r4, r0
    34b8:	460d      	mov	r5, r1
    34ba:	f7fc fe75 	bl	1a8 <__aeabi_dsub>
    34be:	4602      	mov	r2, r0
    34c0:	460b      	mov	r3, r1
    34c2:	4640      	mov	r0, r8
    34c4:	4649      	mov	r1, r9
    34c6:	f7fc fe6f 	bl	1a8 <__aeabi_dsub>
    34ca:	9b04      	ldr	r3, [sp, #16]
    34cc:	9a06      	ldr	r2, [sp, #24]
    34ce:	3b01      	subs	r3, #1
    34d0:	4313      	orrs	r3, r2
    34d2:	4682      	mov	sl, r0
    34d4:	468b      	mov	fp, r1
    34d6:	f040 81f0 	bne.w	38ba <__ieee754_pow+0x6e2>
    34da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 3598 <__ieee754_pow+0x3c0>
    34de:	eeb0 8a47 	vmov.f32	s16, s14
    34e2:	eef0 8a67 	vmov.f32	s17, s15
    34e6:	e9dd 6700 	ldrd	r6, r7, [sp]
    34ea:	2600      	movs	r6, #0
    34ec:	4632      	mov	r2, r6
    34ee:	463b      	mov	r3, r7
    34f0:	e9dd 0100 	ldrd	r0, r1, [sp]
    34f4:	f7fc fe58 	bl	1a8 <__aeabi_dsub>
    34f8:	4622      	mov	r2, r4
    34fa:	462b      	mov	r3, r5
    34fc:	f7fd f80c 	bl	518 <__aeabi_dmul>
    3500:	e9dd 2300 	ldrd	r2, r3, [sp]
    3504:	4680      	mov	r8, r0
    3506:	4689      	mov	r9, r1
    3508:	4650      	mov	r0, sl
    350a:	4659      	mov	r1, fp
    350c:	f7fd f804 	bl	518 <__aeabi_dmul>
    3510:	4602      	mov	r2, r0
    3512:	460b      	mov	r3, r1
    3514:	4640      	mov	r0, r8
    3516:	4649      	mov	r1, r9
    3518:	f7fc fe48 	bl	1ac <__adddf3>
    351c:	4632      	mov	r2, r6
    351e:	463b      	mov	r3, r7
    3520:	4680      	mov	r8, r0
    3522:	4689      	mov	r9, r1
    3524:	4620      	mov	r0, r4
    3526:	4629      	mov	r1, r5
    3528:	f7fc fff6 	bl	518 <__aeabi_dmul>
    352c:	460b      	mov	r3, r1
    352e:	4604      	mov	r4, r0
    3530:	460d      	mov	r5, r1
    3532:	4602      	mov	r2, r0
    3534:	4649      	mov	r1, r9
    3536:	4640      	mov	r0, r8
    3538:	f7fc fe38 	bl	1ac <__adddf3>
    353c:	4b1d      	ldr	r3, [pc, #116]	; (35b4 <__ieee754_pow+0x3dc>)
    353e:	4299      	cmp	r1, r3
    3540:	ec45 4b19 	vmov	d9, r4, r5
    3544:	4606      	mov	r6, r0
    3546:	460f      	mov	r7, r1
    3548:	468b      	mov	fp, r1
    354a:	f340 82f9 	ble.w	3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>
    354e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    3552:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    3556:	4303      	orrs	r3, r0
    3558:	f000 81ec 	beq.w	3934 <__ieee754_pow+0x75c>
    355c:	a310      	add	r3, pc, #64	; (adr r3, 35a0 <__ieee754_pow+0x3c8>)
    355e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3562:	ec51 0b18 	vmov	r0, r1, d8
    3566:	f7fc ffd7 	bl	518 <__aeabi_dmul>
    356a:	a30d      	add	r3, pc, #52	; (adr r3, 35a0 <__ieee754_pow+0x3c8>)
    356c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3570:	e6cb      	b.n	330a <__ieee754_pow+0x132>
    3572:	bf00      	nop
    3574:	f3af 8000 	nop.w
    3578:	60000000 	.word	0x60000000
    357c:	3ff71547 	.word	0x3ff71547
    3580:	f85ddf44 	.word	0xf85ddf44
    3584:	3e54ae0b 	.word	0x3e54ae0b
    3588:	55555555 	.word	0x55555555
    358c:	3fd55555 	.word	0x3fd55555
    3590:	652b82fe 	.word	0x652b82fe
    3594:	3ff71547 	.word	0x3ff71547
    3598:	00000000 	.word	0x00000000
    359c:	bff00000 	.word	0xbff00000
    35a0:	8800759c 	.word	0x8800759c
    35a4:	7e37e43c 	.word	0x7e37e43c
    35a8:	3ff00000 	.word	0x3ff00000
    35ac:	3fd00000 	.word	0x3fd00000
    35b0:	3fe00000 	.word	0x3fe00000
    35b4:	408fffff 	.word	0x408fffff
    35b8:	4bd5      	ldr	r3, [pc, #852]	; (3910 <__ieee754_pow+0x738>)
    35ba:	ea03 0309 	and.w	r3, r3, r9
    35be:	2200      	movs	r2, #0
    35c0:	b92b      	cbnz	r3, 35ce <__ieee754_pow+0x3f6>
    35c2:	4bd4      	ldr	r3, [pc, #848]	; (3914 <__ieee754_pow+0x73c>)
    35c4:	f7fc ffa8 	bl	518 <__aeabi_dmul>
    35c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
    35cc:	460c      	mov	r4, r1
    35ce:	1523      	asrs	r3, r4, #20
    35d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    35d4:	4413      	add	r3, r2
    35d6:	9305      	str	r3, [sp, #20]
    35d8:	4bcf      	ldr	r3, [pc, #828]	; (3918 <__ieee754_pow+0x740>)
    35da:	f3c4 0413 	ubfx	r4, r4, #0, #20
    35de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    35e2:	429c      	cmp	r4, r3
    35e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    35e8:	dd08      	ble.n	35fc <__ieee754_pow+0x424>
    35ea:	4bcc      	ldr	r3, [pc, #816]	; (391c <__ieee754_pow+0x744>)
    35ec:	429c      	cmp	r4, r3
    35ee:	f340 8162 	ble.w	38b6 <__ieee754_pow+0x6de>
    35f2:	9b05      	ldr	r3, [sp, #20]
    35f4:	3301      	adds	r3, #1
    35f6:	9305      	str	r3, [sp, #20]
    35f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    35fc:	2400      	movs	r4, #0
    35fe:	00e3      	lsls	r3, r4, #3
    3600:	9307      	str	r3, [sp, #28]
    3602:	4bc7      	ldr	r3, [pc, #796]	; (3920 <__ieee754_pow+0x748>)
    3604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    3608:	ed93 7b00 	vldr	d7, [r3]
    360c:	4629      	mov	r1, r5
    360e:	ec53 2b17 	vmov	r2, r3, d7
    3612:	eeb0 9a47 	vmov.f32	s18, s14
    3616:	eef0 9a67 	vmov.f32	s19, s15
    361a:	4682      	mov	sl, r0
    361c:	f7fc fdc4 	bl	1a8 <__aeabi_dsub>
    3620:	4652      	mov	r2, sl
    3622:	4606      	mov	r6, r0
    3624:	460f      	mov	r7, r1
    3626:	462b      	mov	r3, r5
    3628:	ec51 0b19 	vmov	r0, r1, d9
    362c:	f7fc fdbe 	bl	1ac <__adddf3>
    3630:	4602      	mov	r2, r0
    3632:	460b      	mov	r3, r1
    3634:	2000      	movs	r0, #0
    3636:	49bb      	ldr	r1, [pc, #748]	; (3924 <__ieee754_pow+0x74c>)
    3638:	f7fd f898 	bl	76c <__aeabi_ddiv>
    363c:	ec41 0b1a 	vmov	d10, r0, r1
    3640:	4602      	mov	r2, r0
    3642:	460b      	mov	r3, r1
    3644:	4630      	mov	r0, r6
    3646:	4639      	mov	r1, r7
    3648:	f7fc ff66 	bl	518 <__aeabi_dmul>
    364c:	2300      	movs	r3, #0
    364e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3652:	9302      	str	r3, [sp, #8]
    3654:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    3658:	46ab      	mov	fp, r5
    365a:	106d      	asrs	r5, r5, #1
    365c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    3660:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    3664:	ec41 0b18 	vmov	d8, r0, r1
    3668:	eb05 4384 	add.w	r3, r5, r4, lsl #18
    366c:	2200      	movs	r2, #0
    366e:	4640      	mov	r0, r8
    3670:	4649      	mov	r1, r9
    3672:	4614      	mov	r4, r2
    3674:	461d      	mov	r5, r3
    3676:	f7fc ff4f 	bl	518 <__aeabi_dmul>
    367a:	4602      	mov	r2, r0
    367c:	460b      	mov	r3, r1
    367e:	4630      	mov	r0, r6
    3680:	4639      	mov	r1, r7
    3682:	f7fc fd91 	bl	1a8 <__aeabi_dsub>
    3686:	ec53 2b19 	vmov	r2, r3, d9
    368a:	4606      	mov	r6, r0
    368c:	460f      	mov	r7, r1
    368e:	4620      	mov	r0, r4
    3690:	4629      	mov	r1, r5
    3692:	f7fc fd89 	bl	1a8 <__aeabi_dsub>
    3696:	4602      	mov	r2, r0
    3698:	460b      	mov	r3, r1
    369a:	4650      	mov	r0, sl
    369c:	4659      	mov	r1, fp
    369e:	f7fc fd83 	bl	1a8 <__aeabi_dsub>
    36a2:	4642      	mov	r2, r8
    36a4:	464b      	mov	r3, r9
    36a6:	f7fc ff37 	bl	518 <__aeabi_dmul>
    36aa:	4602      	mov	r2, r0
    36ac:	460b      	mov	r3, r1
    36ae:	4630      	mov	r0, r6
    36b0:	4639      	mov	r1, r7
    36b2:	f7fc fd79 	bl	1a8 <__aeabi_dsub>
    36b6:	ec53 2b1a 	vmov	r2, r3, d10
    36ba:	f7fc ff2d 	bl	518 <__aeabi_dmul>
    36be:	ec53 2b18 	vmov	r2, r3, d8
    36c2:	ec41 0b19 	vmov	d9, r0, r1
    36c6:	ec51 0b18 	vmov	r0, r1, d8
    36ca:	f7fc ff25 	bl	518 <__aeabi_dmul>
    36ce:	a37c      	add	r3, pc, #496	; (adr r3, 38c0 <__ieee754_pow+0x6e8>)
    36d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36d4:	4604      	mov	r4, r0
    36d6:	460d      	mov	r5, r1
    36d8:	f7fc ff1e 	bl	518 <__aeabi_dmul>
    36dc:	a37a      	add	r3, pc, #488	; (adr r3, 38c8 <__ieee754_pow+0x6f0>)
    36de:	e9d3 2300 	ldrd	r2, r3, [r3]
    36e2:	f7fc fd63 	bl	1ac <__adddf3>
    36e6:	4622      	mov	r2, r4
    36e8:	462b      	mov	r3, r5
    36ea:	f7fc ff15 	bl	518 <__aeabi_dmul>
    36ee:	a378      	add	r3, pc, #480	; (adr r3, 38d0 <__ieee754_pow+0x6f8>)
    36f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36f4:	f7fc fd5a 	bl	1ac <__adddf3>
    36f8:	4622      	mov	r2, r4
    36fa:	462b      	mov	r3, r5
    36fc:	f7fc ff0c 	bl	518 <__aeabi_dmul>
    3700:	a375      	add	r3, pc, #468	; (adr r3, 38d8 <__ieee754_pow+0x700>)
    3702:	e9d3 2300 	ldrd	r2, r3, [r3]
    3706:	f7fc fd51 	bl	1ac <__adddf3>
    370a:	4622      	mov	r2, r4
    370c:	462b      	mov	r3, r5
    370e:	f7fc ff03 	bl	518 <__aeabi_dmul>
    3712:	a373      	add	r3, pc, #460	; (adr r3, 38e0 <__ieee754_pow+0x708>)
    3714:	e9d3 2300 	ldrd	r2, r3, [r3]
    3718:	f7fc fd48 	bl	1ac <__adddf3>
    371c:	4622      	mov	r2, r4
    371e:	462b      	mov	r3, r5
    3720:	f7fc fefa 	bl	518 <__aeabi_dmul>
    3724:	a370      	add	r3, pc, #448	; (adr r3, 38e8 <__ieee754_pow+0x710>)
    3726:	e9d3 2300 	ldrd	r2, r3, [r3]
    372a:	f7fc fd3f 	bl	1ac <__adddf3>
    372e:	4622      	mov	r2, r4
    3730:	4606      	mov	r6, r0
    3732:	460f      	mov	r7, r1
    3734:	462b      	mov	r3, r5
    3736:	4620      	mov	r0, r4
    3738:	4629      	mov	r1, r5
    373a:	f7fc feed 	bl	518 <__aeabi_dmul>
    373e:	4602      	mov	r2, r0
    3740:	460b      	mov	r3, r1
    3742:	4630      	mov	r0, r6
    3744:	4639      	mov	r1, r7
    3746:	f7fc fee7 	bl	518 <__aeabi_dmul>
    374a:	4642      	mov	r2, r8
    374c:	4604      	mov	r4, r0
    374e:	460d      	mov	r5, r1
    3750:	464b      	mov	r3, r9
    3752:	ec51 0b18 	vmov	r0, r1, d8
    3756:	f7fc fd29 	bl	1ac <__adddf3>
    375a:	ec53 2b19 	vmov	r2, r3, d9
    375e:	f7fc fedb 	bl	518 <__aeabi_dmul>
    3762:	4622      	mov	r2, r4
    3764:	462b      	mov	r3, r5
    3766:	f7fc fd21 	bl	1ac <__adddf3>
    376a:	4642      	mov	r2, r8
    376c:	4682      	mov	sl, r0
    376e:	468b      	mov	fp, r1
    3770:	464b      	mov	r3, r9
    3772:	4640      	mov	r0, r8
    3774:	4649      	mov	r1, r9
    3776:	f7fc fecf 	bl	518 <__aeabi_dmul>
    377a:	4b6b      	ldr	r3, [pc, #428]	; (3928 <__ieee754_pow+0x750>)
    377c:	2200      	movs	r2, #0
    377e:	4606      	mov	r6, r0
    3780:	460f      	mov	r7, r1
    3782:	f7fc fd13 	bl	1ac <__adddf3>
    3786:	4652      	mov	r2, sl
    3788:	465b      	mov	r3, fp
    378a:	f7fc fd0f 	bl	1ac <__adddf3>
    378e:	2000      	movs	r0, #0
    3790:	4604      	mov	r4, r0
    3792:	460d      	mov	r5, r1
    3794:	4602      	mov	r2, r0
    3796:	460b      	mov	r3, r1
    3798:	4640      	mov	r0, r8
    379a:	4649      	mov	r1, r9
    379c:	f7fc febc 	bl	518 <__aeabi_dmul>
    37a0:	4b61      	ldr	r3, [pc, #388]	; (3928 <__ieee754_pow+0x750>)
    37a2:	4680      	mov	r8, r0
    37a4:	4689      	mov	r9, r1
    37a6:	2200      	movs	r2, #0
    37a8:	4620      	mov	r0, r4
    37aa:	4629      	mov	r1, r5
    37ac:	f7fc fcfc 	bl	1a8 <__aeabi_dsub>
    37b0:	4632      	mov	r2, r6
    37b2:	463b      	mov	r3, r7
    37b4:	f7fc fcf8 	bl	1a8 <__aeabi_dsub>
    37b8:	4602      	mov	r2, r0
    37ba:	460b      	mov	r3, r1
    37bc:	4650      	mov	r0, sl
    37be:	4659      	mov	r1, fp
    37c0:	f7fc fcf2 	bl	1a8 <__aeabi_dsub>
    37c4:	ec53 2b18 	vmov	r2, r3, d8
    37c8:	f7fc fea6 	bl	518 <__aeabi_dmul>
    37cc:	4622      	mov	r2, r4
    37ce:	4606      	mov	r6, r0
    37d0:	460f      	mov	r7, r1
    37d2:	462b      	mov	r3, r5
    37d4:	ec51 0b19 	vmov	r0, r1, d9
    37d8:	f7fc fe9e 	bl	518 <__aeabi_dmul>
    37dc:	4602      	mov	r2, r0
    37de:	460b      	mov	r3, r1
    37e0:	4630      	mov	r0, r6
    37e2:	4639      	mov	r1, r7
    37e4:	f7fc fce2 	bl	1ac <__adddf3>
    37e8:	4606      	mov	r6, r0
    37ea:	460f      	mov	r7, r1
    37ec:	4602      	mov	r2, r0
    37ee:	460b      	mov	r3, r1
    37f0:	4640      	mov	r0, r8
    37f2:	4649      	mov	r1, r9
    37f4:	f7fc fcda 	bl	1ac <__adddf3>
    37f8:	a33d      	add	r3, pc, #244	; (adr r3, 38f0 <__ieee754_pow+0x718>)
    37fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    37fe:	2000      	movs	r0, #0
    3800:	4604      	mov	r4, r0
    3802:	460d      	mov	r5, r1
    3804:	f7fc fe88 	bl	518 <__aeabi_dmul>
    3808:	4642      	mov	r2, r8
    380a:	ec41 0b18 	vmov	d8, r0, r1
    380e:	464b      	mov	r3, r9
    3810:	4620      	mov	r0, r4
    3812:	4629      	mov	r1, r5
    3814:	f7fc fcc8 	bl	1a8 <__aeabi_dsub>
    3818:	4602      	mov	r2, r0
    381a:	460b      	mov	r3, r1
    381c:	4630      	mov	r0, r6
    381e:	4639      	mov	r1, r7
    3820:	f7fc fcc2 	bl	1a8 <__aeabi_dsub>
    3824:	a334      	add	r3, pc, #208	; (adr r3, 38f8 <__ieee754_pow+0x720>)
    3826:	e9d3 2300 	ldrd	r2, r3, [r3]
    382a:	f7fc fe75 	bl	518 <__aeabi_dmul>
    382e:	a334      	add	r3, pc, #208	; (adr r3, 3900 <__ieee754_pow+0x728>)
    3830:	e9d3 2300 	ldrd	r2, r3, [r3]
    3834:	4606      	mov	r6, r0
    3836:	460f      	mov	r7, r1
    3838:	4620      	mov	r0, r4
    383a:	4629      	mov	r1, r5
    383c:	f7fc fe6c 	bl	518 <__aeabi_dmul>
    3840:	4602      	mov	r2, r0
    3842:	460b      	mov	r3, r1
    3844:	4630      	mov	r0, r6
    3846:	4639      	mov	r1, r7
    3848:	f7fc fcb0 	bl	1ac <__adddf3>
    384c:	9a07      	ldr	r2, [sp, #28]
    384e:	4b37      	ldr	r3, [pc, #220]	; (392c <__ieee754_pow+0x754>)
    3850:	4413      	add	r3, r2
    3852:	e9d3 2300 	ldrd	r2, r3, [r3]
    3856:	f7fc fca9 	bl	1ac <__adddf3>
    385a:	4682      	mov	sl, r0
    385c:	9805      	ldr	r0, [sp, #20]
    385e:	468b      	mov	fp, r1
    3860:	f7fc fdf0 	bl	444 <__aeabi_i2d>
    3864:	9a07      	ldr	r2, [sp, #28]
    3866:	4b32      	ldr	r3, [pc, #200]	; (3930 <__ieee754_pow+0x758>)
    3868:	4413      	add	r3, r2
    386a:	e9d3 8900 	ldrd	r8, r9, [r3]
    386e:	4606      	mov	r6, r0
    3870:	460f      	mov	r7, r1
    3872:	4652      	mov	r2, sl
    3874:	465b      	mov	r3, fp
    3876:	ec51 0b18 	vmov	r0, r1, d8
    387a:	f7fc fc97 	bl	1ac <__adddf3>
    387e:	4642      	mov	r2, r8
    3880:	464b      	mov	r3, r9
    3882:	f7fc fc93 	bl	1ac <__adddf3>
    3886:	4632      	mov	r2, r6
    3888:	463b      	mov	r3, r7
    388a:	f7fc fc8f 	bl	1ac <__adddf3>
    388e:	2000      	movs	r0, #0
    3890:	4632      	mov	r2, r6
    3892:	463b      	mov	r3, r7
    3894:	4604      	mov	r4, r0
    3896:	460d      	mov	r5, r1
    3898:	f7fc fc86 	bl	1a8 <__aeabi_dsub>
    389c:	4642      	mov	r2, r8
    389e:	464b      	mov	r3, r9
    38a0:	f7fc fc82 	bl	1a8 <__aeabi_dsub>
    38a4:	ec53 2b18 	vmov	r2, r3, d8
    38a8:	f7fc fc7e 	bl	1a8 <__aeabi_dsub>
    38ac:	4602      	mov	r2, r0
    38ae:	460b      	mov	r3, r1
    38b0:	4650      	mov	r0, sl
    38b2:	4659      	mov	r1, fp
    38b4:	e607      	b.n	34c6 <__ieee754_pow+0x2ee>
    38b6:	2401      	movs	r4, #1
    38b8:	e6a1      	b.n	35fe <__ieee754_pow+0x426>
    38ba:	ed9f 7b13 	vldr	d7, [pc, #76]	; 3908 <__ieee754_pow+0x730>
    38be:	e60e      	b.n	34de <__ieee754_pow+0x306>
    38c0:	4a454eef 	.word	0x4a454eef
    38c4:	3fca7e28 	.word	0x3fca7e28
    38c8:	93c9db65 	.word	0x93c9db65
    38cc:	3fcd864a 	.word	0x3fcd864a
    38d0:	a91d4101 	.word	0xa91d4101
    38d4:	3fd17460 	.word	0x3fd17460
    38d8:	518f264d 	.word	0x518f264d
    38dc:	3fd55555 	.word	0x3fd55555
    38e0:	db6fabff 	.word	0xdb6fabff
    38e4:	3fdb6db6 	.word	0x3fdb6db6
    38e8:	33333303 	.word	0x33333303
    38ec:	3fe33333 	.word	0x3fe33333
    38f0:	e0000000 	.word	0xe0000000
    38f4:	3feec709 	.word	0x3feec709
    38f8:	dc3a03fd 	.word	0xdc3a03fd
    38fc:	3feec709 	.word	0x3feec709
    3900:	145b01f5 	.word	0x145b01f5
    3904:	be3e2fe0 	.word	0xbe3e2fe0
    3908:	00000000 	.word	0x00000000
    390c:	3ff00000 	.word	0x3ff00000
    3910:	7ff00000 	.word	0x7ff00000
    3914:	43400000 	.word	0x43400000
    3918:	0003988e 	.word	0x0003988e
    391c:	000bb679 	.word	0x000bb679
    3920:	0001d358 	.word	0x0001d358
    3924:	3ff00000 	.word	0x3ff00000
    3928:	40080000 	.word	0x40080000
    392c:	0001d378 	.word	0x0001d378
    3930:	0001d368 	.word	0x0001d368
    3934:	a3b5      	add	r3, pc, #724	; (adr r3, 3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>)
    3936:	e9d3 2300 	ldrd	r2, r3, [r3]
    393a:	4640      	mov	r0, r8
    393c:	4649      	mov	r1, r9
    393e:	f7fc fc35 	bl	1ac <__adddf3>
    3942:	4622      	mov	r2, r4
    3944:	ec41 0b1a 	vmov	d10, r0, r1
    3948:	462b      	mov	r3, r5
    394a:	4630      	mov	r0, r6
    394c:	4639      	mov	r1, r7
    394e:	f7fc fc2b 	bl	1a8 <__aeabi_dsub>
    3952:	4602      	mov	r2, r0
    3954:	460b      	mov	r3, r1
    3956:	ec51 0b1a 	vmov	r0, r1, d10
    395a:	f7fd f86d 	bl	a38 <__aeabi_dcmpgt>
    395e:	2800      	cmp	r0, #0
    3960:	f47f adfc 	bne.w	355c <__ieee754_pow+0x384>
    3964:	4aa4      	ldr	r2, [pc, #656]	; (3bf8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x160>)
    3966:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    396a:	4293      	cmp	r3, r2
    396c:	f340 810a 	ble.w	3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>
    3970:	151b      	asrs	r3, r3, #20
    3972:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    3976:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    397a:	fa4a f303 	asr.w	r3, sl, r3
    397e:	445b      	add	r3, fp
    3980:	f3c3 520a 	ubfx	r2, r3, #20, #11
    3984:	4e9d      	ldr	r6, [pc, #628]	; (3bfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x164>)
    3986:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    398a:	4116      	asrs	r6, r2
    398c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    3990:	2000      	movs	r0, #0
    3992:	ea23 0106 	bic.w	r1, r3, r6
    3996:	f1c2 0214 	rsb	r2, r2, #20
    399a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    399e:	fa4a fa02 	asr.w	sl, sl, r2
    39a2:	f1bb 0f00 	cmp.w	fp, #0
    39a6:	4602      	mov	r2, r0
    39a8:	460b      	mov	r3, r1
    39aa:	4620      	mov	r0, r4
    39ac:	4629      	mov	r1, r5
    39ae:	bfb8      	it	lt
    39b0:	f1ca 0a00 	rsblt	sl, sl, #0
    39b4:	f7fc fbf8 	bl	1a8 <__aeabi_dsub>
    39b8:	ec41 0b19 	vmov	d9, r0, r1
    39bc:	4642      	mov	r2, r8
    39be:	464b      	mov	r3, r9
    39c0:	ec51 0b19 	vmov	r0, r1, d9
    39c4:	f7fc fbf2 	bl	1ac <__adddf3>
    39c8:	a379      	add	r3, pc, #484	; (adr r3, 3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>)
    39ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    39ce:	2000      	movs	r0, #0
    39d0:	4604      	mov	r4, r0
    39d2:	460d      	mov	r5, r1
    39d4:	f7fc fda0 	bl	518 <__aeabi_dmul>
    39d8:	ec53 2b19 	vmov	r2, r3, d9
    39dc:	4606      	mov	r6, r0
    39de:	460f      	mov	r7, r1
    39e0:	4620      	mov	r0, r4
    39e2:	4629      	mov	r1, r5
    39e4:	f7fc fbe0 	bl	1a8 <__aeabi_dsub>
    39e8:	4602      	mov	r2, r0
    39ea:	460b      	mov	r3, r1
    39ec:	4640      	mov	r0, r8
    39ee:	4649      	mov	r1, r9
    39f0:	f7fc fbda 	bl	1a8 <__aeabi_dsub>
    39f4:	a370      	add	r3, pc, #448	; (adr r3, 3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>)
    39f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    39fa:	f7fc fd8d 	bl	518 <__aeabi_dmul>
    39fe:	a370      	add	r3, pc, #448	; (adr r3, 3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>)
    3a00:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a04:	4680      	mov	r8, r0
    3a06:	4689      	mov	r9, r1
    3a08:	4620      	mov	r0, r4
    3a0a:	4629      	mov	r1, r5
    3a0c:	f7fc fd84 	bl	518 <__aeabi_dmul>
    3a10:	4602      	mov	r2, r0
    3a12:	460b      	mov	r3, r1
    3a14:	4640      	mov	r0, r8
    3a16:	4649      	mov	r1, r9
    3a18:	f7fc fbc8 	bl	1ac <__adddf3>
    3a1c:	4604      	mov	r4, r0
    3a1e:	460d      	mov	r5, r1
    3a20:	4602      	mov	r2, r0
    3a22:	460b      	mov	r3, r1
    3a24:	4630      	mov	r0, r6
    3a26:	4639      	mov	r1, r7
    3a28:	f7fc fbc0 	bl	1ac <__adddf3>
    3a2c:	4632      	mov	r2, r6
    3a2e:	463b      	mov	r3, r7
    3a30:	4680      	mov	r8, r0
    3a32:	4689      	mov	r9, r1
    3a34:	f7fc fbb8 	bl	1a8 <__aeabi_dsub>
    3a38:	4602      	mov	r2, r0
    3a3a:	460b      	mov	r3, r1
    3a3c:	4620      	mov	r0, r4
    3a3e:	4629      	mov	r1, r5
    3a40:	f7fc fbb2 	bl	1a8 <__aeabi_dsub>
    3a44:	4642      	mov	r2, r8
    3a46:	4606      	mov	r6, r0
    3a48:	460f      	mov	r7, r1
    3a4a:	464b      	mov	r3, r9
    3a4c:	4640      	mov	r0, r8
    3a4e:	4649      	mov	r1, r9
    3a50:	f7fc fd62 	bl	518 <__aeabi_dmul>
    3a54:	a35c      	add	r3, pc, #368	; (adr r3, 3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>)
    3a56:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a5a:	4604      	mov	r4, r0
    3a5c:	460d      	mov	r5, r1
    3a5e:	f7fc fd5b 	bl	518 <__aeabi_dmul>
    3a62:	a35b      	add	r3, pc, #364	; (adr r3, 3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>)
    3a64:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a68:	f7fc fb9e 	bl	1a8 <__aeabi_dsub>
    3a6c:	4622      	mov	r2, r4
    3a6e:	462b      	mov	r3, r5
    3a70:	f7fc fd52 	bl	518 <__aeabi_dmul>
    3a74:	a358      	add	r3, pc, #352	; (adr r3, 3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>)
    3a76:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a7a:	f7fc fb97 	bl	1ac <__adddf3>
    3a7e:	4622      	mov	r2, r4
    3a80:	462b      	mov	r3, r5
    3a82:	f7fc fd49 	bl	518 <__aeabi_dmul>
    3a86:	a356      	add	r3, pc, #344	; (adr r3, 3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>)
    3a88:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a8c:	f7fc fb8c 	bl	1a8 <__aeabi_dsub>
    3a90:	4622      	mov	r2, r4
    3a92:	462b      	mov	r3, r5
    3a94:	f7fc fd40 	bl	518 <__aeabi_dmul>
    3a98:	a353      	add	r3, pc, #332	; (adr r3, 3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>)
    3a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a9e:	f7fc fb85 	bl	1ac <__adddf3>
    3aa2:	4622      	mov	r2, r4
    3aa4:	462b      	mov	r3, r5
    3aa6:	f7fc fd37 	bl	518 <__aeabi_dmul>
    3aaa:	4602      	mov	r2, r0
    3aac:	460b      	mov	r3, r1
    3aae:	4640      	mov	r0, r8
    3ab0:	4649      	mov	r1, r9
    3ab2:	f7fc fb79 	bl	1a8 <__aeabi_dsub>
    3ab6:	4604      	mov	r4, r0
    3ab8:	460d      	mov	r5, r1
    3aba:	4602      	mov	r2, r0
    3abc:	460b      	mov	r3, r1
    3abe:	4640      	mov	r0, r8
    3ac0:	4649      	mov	r1, r9
    3ac2:	f7fc fd29 	bl	518 <__aeabi_dmul>
    3ac6:	2200      	movs	r2, #0
    3ac8:	ec41 0b19 	vmov	d9, r0, r1
    3acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ad0:	4620      	mov	r0, r4
    3ad2:	4629      	mov	r1, r5
    3ad4:	f7fc fb68 	bl	1a8 <__aeabi_dsub>
    3ad8:	4602      	mov	r2, r0
    3ada:	460b      	mov	r3, r1
    3adc:	ec51 0b19 	vmov	r0, r1, d9
    3ae0:	f7fc fe44 	bl	76c <__aeabi_ddiv>
    3ae4:	4632      	mov	r2, r6
    3ae6:	4604      	mov	r4, r0
    3ae8:	460d      	mov	r5, r1
    3aea:	463b      	mov	r3, r7
    3aec:	4640      	mov	r0, r8
    3aee:	4649      	mov	r1, r9
    3af0:	f7fc fd12 	bl	518 <__aeabi_dmul>
    3af4:	4632      	mov	r2, r6
    3af6:	463b      	mov	r3, r7
    3af8:	f7fc fb58 	bl	1ac <__adddf3>
    3afc:	4602      	mov	r2, r0
    3afe:	460b      	mov	r3, r1
    3b00:	4620      	mov	r0, r4
    3b02:	4629      	mov	r1, r5
    3b04:	f7fc fb50 	bl	1a8 <__aeabi_dsub>
    3b08:	4642      	mov	r2, r8
    3b0a:	464b      	mov	r3, r9
    3b0c:	f7fc fb4c 	bl	1a8 <__aeabi_dsub>
    3b10:	460b      	mov	r3, r1
    3b12:	4602      	mov	r2, r0
    3b14:	493a      	ldr	r1, [pc, #232]	; (3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>)
    3b16:	2000      	movs	r0, #0
    3b18:	f7fc fb46 	bl	1a8 <__aeabi_dsub>
    3b1c:	ec41 0b10 	vmov	d0, r0, r1
    3b20:	ee10 3a90 	vmov	r3, s1
    3b24:	eb03 530a 	add.w	r3, r3, sl, lsl #20
    3b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3b2c:	da2d      	bge.n	3b8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf2>
    3b2e:	4650      	mov	r0, sl
    3b30:	f000 ff5a 	bl	49e8 <scalbn>
    3b34:	ec51 0b10 	vmov	r0, r1, d0
    3b38:	ec53 2b18 	vmov	r2, r3, d8
    3b3c:	f7ff bbe5 	b.w	330a <__ieee754_pow+0x132>
    3b40:	4b30      	ldr	r3, [pc, #192]	; (3c04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16c>)
    3b42:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    3b46:	429e      	cmp	r6, r3
    3b48:	f77f af0c 	ble.w	3964 <__ieee754_pow+0x78c>
    3b4c:	4b2e      	ldr	r3, [pc, #184]	; (3c08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x170>)
    3b4e:	440b      	add	r3, r1
    3b50:	4303      	orrs	r3, r0
    3b52:	d00b      	beq.n	3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b54:	a326      	add	r3, pc, #152	; (adr r3, 3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>)
    3b56:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b5a:	ec51 0b18 	vmov	r0, r1, d8
    3b5e:	f7fc fcdb 	bl	518 <__aeabi_dmul>
    3b62:	a323      	add	r3, pc, #140	; (adr r3, 3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>)
    3b64:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b68:	f7ff bbcf 	b.w	330a <__ieee754_pow+0x132>
    3b6c:	4622      	mov	r2, r4
    3b6e:	462b      	mov	r3, r5
    3b70:	f7fc fb1a 	bl	1a8 <__aeabi_dsub>
    3b74:	4642      	mov	r2, r8
    3b76:	464b      	mov	r3, r9
    3b78:	f7fc ff54 	bl	a24 <__aeabi_dcmpge>
    3b7c:	2800      	cmp	r0, #0
    3b7e:	f43f aef1 	beq.w	3964 <__ieee754_pow+0x78c>
    3b82:	e7e7      	b.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b84:	f04f 0a00 	mov.w	sl, #0
    3b88:	e718      	b.n	39bc <__ieee754_pow+0x7e4>
    3b8a:	ec51 0b10 	vmov	r0, r1, d0
    3b8e:	4619      	mov	r1, r3
    3b90:	e7d2      	b.n	3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    3b92:	491b      	ldr	r1, [pc, #108]	; (3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>)
    3b94:	2000      	movs	r0, #0
    3b96:	f7ff bba3 	b.w	32e0 <__ieee754_pow+0x108>
    3b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
    3b9e:	f7ff bb9f 	b.w	32e0 <__ieee754_pow+0x108>
    3ba2:	9004      	str	r0, [sp, #16]
    3ba4:	f7ff bb7b 	b.w	329e <__ieee754_pow+0xc6>
    3ba8:	2100      	movs	r1, #0
    3baa:	f7ff bb65 	b.w	3278 <__ieee754_pow+0xa0>
    3bae:	bf00      	nop
    3bb0:	00000000 	.word	0x00000000
    3bb4:	3fe62e43 	.word	0x3fe62e43
    3bb8:	fefa39ef 	.word	0xfefa39ef
    3bbc:	3fe62e42 	.word	0x3fe62e42
    3bc0:	0ca86c39 	.word	0x0ca86c39
    3bc4:	be205c61 	.word	0xbe205c61
    3bc8:	72bea4d0 	.word	0x72bea4d0
    3bcc:	3e663769 	.word	0x3e663769
    3bd0:	c5d26bf1 	.word	0xc5d26bf1
    3bd4:	3ebbbd41 	.word	0x3ebbbd41
    3bd8:	af25de2c 	.word	0xaf25de2c
    3bdc:	3f11566a 	.word	0x3f11566a
    3be0:	16bebd93 	.word	0x16bebd93
    3be4:	3f66c16c 	.word	0x3f66c16c
    3be8:	5555553e 	.word	0x5555553e
    3bec:	3fc55555 	.word	0x3fc55555
    3bf0:	c2f8f359 	.word	0xc2f8f359
    3bf4:	01a56e1f 	.word	0x01a56e1f
    3bf8:	3fe00000 	.word	0x3fe00000
    3bfc:	000fffff 	.word	0x000fffff
    3c00:	3ff00000 	.word	0x3ff00000
    3c04:	4090cbff 	.word	0x4090cbff
    3c08:	3f6f3400 	.word	0x3f6f3400
    3c0c:	652b82fe 	.word	0x652b82fe
    3c10:	3c971547 	.word	0x3c971547
    3c14:	00000000 	.word	0x00000000

00003c18 <__ieee754_rem_pio2>:
    3c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c1c:	ed2d 8b02 	vpush	{d8}
    3c20:	ec55 4b10 	vmov	r4, r5, d0
    3c24:	4bca      	ldr	r3, [pc, #808]	; (3f50 <__ieee754_rem_pio2+0x338>)
    3c26:	b08b      	sub	sp, #44	; 0x2c
    3c28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
    3c2c:	4598      	cmp	r8, r3
    3c2e:	4682      	mov	sl, r0
    3c30:	9502      	str	r5, [sp, #8]
    3c32:	dc08      	bgt.n	3c46 <__ieee754_rem_pio2+0x2e>
    3c34:	2200      	movs	r2, #0
    3c36:	2300      	movs	r3, #0
    3c38:	ed80 0b00 	vstr	d0, [r0]
    3c3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
    3c40:	f04f 0b00 	mov.w	fp, #0
    3c44:	e028      	b.n	3c98 <__ieee754_rem_pio2+0x80>
    3c46:	4bc3      	ldr	r3, [pc, #780]	; (3f54 <__ieee754_rem_pio2+0x33c>)
    3c48:	4598      	cmp	r8, r3
    3c4a:	dc78      	bgt.n	3d3e <__ieee754_rem_pio2+0x126>
    3c4c:	9b02      	ldr	r3, [sp, #8]
    3c4e:	4ec2      	ldr	r6, [pc, #776]	; (3f58 <__ieee754_rem_pio2+0x340>)
    3c50:	2b00      	cmp	r3, #0
    3c52:	ee10 0a10 	vmov	r0, s0
    3c56:	a3b0      	add	r3, pc, #704	; (adr r3, 3f18 <__ieee754_rem_pio2+0x300>)
    3c58:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c5c:	4629      	mov	r1, r5
    3c5e:	dd39      	ble.n	3cd4 <__ieee754_rem_pio2+0xbc>
    3c60:	f7fc faa2 	bl	1a8 <__aeabi_dsub>
    3c64:	45b0      	cmp	r8, r6
    3c66:	4604      	mov	r4, r0
    3c68:	460d      	mov	r5, r1
    3c6a:	d01b      	beq.n	3ca4 <__ieee754_rem_pio2+0x8c>
    3c6c:	a3ac      	add	r3, pc, #688	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c72:	f7fc fa99 	bl	1a8 <__aeabi_dsub>
    3c76:	4602      	mov	r2, r0
    3c78:	460b      	mov	r3, r1
    3c7a:	e9ca 2300 	strd	r2, r3, [sl]
    3c7e:	4620      	mov	r0, r4
    3c80:	4629      	mov	r1, r5
    3c82:	f7fc fa91 	bl	1a8 <__aeabi_dsub>
    3c86:	a3a6      	add	r3, pc, #664	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3c88:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c8c:	f7fc fa8c 	bl	1a8 <__aeabi_dsub>
    3c90:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3c94:	f04f 0b01 	mov.w	fp, #1
    3c98:	4658      	mov	r0, fp
    3c9a:	b00b      	add	sp, #44	; 0x2c
    3c9c:	ecbd 8b02 	vpop	{d8}
    3ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ca4:	a3a0      	add	r3, pc, #640	; (adr r3, 3f28 <__ieee754_rem_pio2+0x310>)
    3ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3caa:	f7fc fa7d 	bl	1a8 <__aeabi_dsub>
    3cae:	a3a0      	add	r3, pc, #640	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cb4:	4604      	mov	r4, r0
    3cb6:	460d      	mov	r5, r1
    3cb8:	f7fc fa76 	bl	1a8 <__aeabi_dsub>
    3cbc:	4602      	mov	r2, r0
    3cbe:	460b      	mov	r3, r1
    3cc0:	e9ca 2300 	strd	r2, r3, [sl]
    3cc4:	4620      	mov	r0, r4
    3cc6:	4629      	mov	r1, r5
    3cc8:	f7fc fa6e 	bl	1a8 <__aeabi_dsub>
    3ccc:	a398      	add	r3, pc, #608	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3cce:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cd2:	e7db      	b.n	3c8c <__ieee754_rem_pio2+0x74>
    3cd4:	f7fc fa6a 	bl	1ac <__adddf3>
    3cd8:	45b0      	cmp	r8, r6
    3cda:	4604      	mov	r4, r0
    3cdc:	460d      	mov	r5, r1
    3cde:	d016      	beq.n	3d0e <__ieee754_rem_pio2+0xf6>
    3ce0:	a38f      	add	r3, pc, #572	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ce6:	f7fc fa61 	bl	1ac <__adddf3>
    3cea:	4602      	mov	r2, r0
    3cec:	460b      	mov	r3, r1
    3cee:	e9ca 2300 	strd	r2, r3, [sl]
    3cf2:	4620      	mov	r0, r4
    3cf4:	4629      	mov	r1, r5
    3cf6:	f7fc fa57 	bl	1a8 <__aeabi_dsub>
    3cfa:	a389      	add	r3, pc, #548	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d00:	f7fc fa54 	bl	1ac <__adddf3>
    3d04:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    3d08:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3d0c:	e7c4      	b.n	3c98 <__ieee754_rem_pio2+0x80>
    3d0e:	a386      	add	r3, pc, #536	; (adr r3, 3f28 <__ieee754_rem_pio2+0x310>)
    3d10:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d14:	f7fc fa4a 	bl	1ac <__adddf3>
    3d18:	a385      	add	r3, pc, #532	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d1e:	4604      	mov	r4, r0
    3d20:	460d      	mov	r5, r1
    3d22:	f7fc fa43 	bl	1ac <__adddf3>
    3d26:	4602      	mov	r2, r0
    3d28:	460b      	mov	r3, r1
    3d2a:	e9ca 2300 	strd	r2, r3, [sl]
    3d2e:	4620      	mov	r0, r4
    3d30:	4629      	mov	r1, r5
    3d32:	f7fc fa39 	bl	1a8 <__aeabi_dsub>
    3d36:	a37e      	add	r3, pc, #504	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3d38:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d3c:	e7e0      	b.n	3d00 <__ieee754_rem_pio2+0xe8>
    3d3e:	4b87      	ldr	r3, [pc, #540]	; (3f5c <__ieee754_rem_pio2+0x344>)
    3d40:	4598      	cmp	r8, r3
    3d42:	f300 80d9 	bgt.w	3ef8 <__ieee754_rem_pio2+0x2e0>
    3d46:	f017 ff75 	bl	1bc34 <fabs>
    3d4a:	ec55 4b10 	vmov	r4, r5, d0
    3d4e:	ee10 0a10 	vmov	r0, s0
    3d52:	a379      	add	r3, pc, #484	; (adr r3, 3f38 <__ieee754_rem_pio2+0x320>)
    3d54:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d58:	4629      	mov	r1, r5
    3d5a:	f7fc fbdd 	bl	518 <__aeabi_dmul>
    3d5e:	4b80      	ldr	r3, [pc, #512]	; (3f60 <__ieee754_rem_pio2+0x348>)
    3d60:	2200      	movs	r2, #0
    3d62:	f7fc fa23 	bl	1ac <__adddf3>
    3d66:	f7fc ff7f 	bl	c68 <__aeabi_d2iz>
    3d6a:	4683      	mov	fp, r0
    3d6c:	f7fc fb6a 	bl	444 <__aeabi_i2d>
    3d70:	4602      	mov	r2, r0
    3d72:	460b      	mov	r3, r1
    3d74:	ec43 2b18 	vmov	d8, r2, r3
    3d78:	a367      	add	r3, pc, #412	; (adr r3, 3f18 <__ieee754_rem_pio2+0x300>)
    3d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d7e:	f7fc fbcb 	bl	518 <__aeabi_dmul>
    3d82:	4602      	mov	r2, r0
    3d84:	460b      	mov	r3, r1
    3d86:	4620      	mov	r0, r4
    3d88:	4629      	mov	r1, r5
    3d8a:	f7fc fa0d 	bl	1a8 <__aeabi_dsub>
    3d8e:	a364      	add	r3, pc, #400	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d94:	4606      	mov	r6, r0
    3d96:	460f      	mov	r7, r1
    3d98:	ec51 0b18 	vmov	r0, r1, d8
    3d9c:	f7fc fbbc 	bl	518 <__aeabi_dmul>
    3da0:	f1bb 0f1f 	cmp.w	fp, #31
    3da4:	4604      	mov	r4, r0
    3da6:	460d      	mov	r5, r1
    3da8:	dc0d      	bgt.n	3dc6 <__ieee754_rem_pio2+0x1ae>
    3daa:	4b6e      	ldr	r3, [pc, #440]	; (3f64 <__ieee754_rem_pio2+0x34c>)
    3dac:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    3db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3db4:	4543      	cmp	r3, r8
    3db6:	d006      	beq.n	3dc6 <__ieee754_rem_pio2+0x1ae>
    3db8:	4622      	mov	r2, r4
    3dba:	462b      	mov	r3, r5
    3dbc:	4630      	mov	r0, r6
    3dbe:	4639      	mov	r1, r7
    3dc0:	f7fc f9f2 	bl	1a8 <__aeabi_dsub>
    3dc4:	e00f      	b.n	3de6 <__ieee754_rem_pio2+0x1ce>
    3dc6:	462b      	mov	r3, r5
    3dc8:	4622      	mov	r2, r4
    3dca:	4630      	mov	r0, r6
    3dcc:	4639      	mov	r1, r7
    3dce:	f7fc f9eb 	bl	1a8 <__aeabi_dsub>
    3dd2:	ea4f 5328 	mov.w	r3, r8, asr #20
    3dd6:	9303      	str	r3, [sp, #12]
    3dd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
    3ddc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
    3de0:	f1b8 0f10 	cmp.w	r8, #16
    3de4:	dc02      	bgt.n	3dec <__ieee754_rem_pio2+0x1d4>
    3de6:	e9ca 0100 	strd	r0, r1, [sl]
    3dea:	e039      	b.n	3e60 <__ieee754_rem_pio2+0x248>
    3dec:	a34e      	add	r3, pc, #312	; (adr r3, 3f28 <__ieee754_rem_pio2+0x310>)
    3dee:	e9d3 2300 	ldrd	r2, r3, [r3]
    3df2:	ec51 0b18 	vmov	r0, r1, d8
    3df6:	f7fc fb8f 	bl	518 <__aeabi_dmul>
    3dfa:	4604      	mov	r4, r0
    3dfc:	460d      	mov	r5, r1
    3dfe:	4602      	mov	r2, r0
    3e00:	460b      	mov	r3, r1
    3e02:	4630      	mov	r0, r6
    3e04:	4639      	mov	r1, r7
    3e06:	f7fc f9cf 	bl	1a8 <__aeabi_dsub>
    3e0a:	4602      	mov	r2, r0
    3e0c:	460b      	mov	r3, r1
    3e0e:	4680      	mov	r8, r0
    3e10:	4689      	mov	r9, r1
    3e12:	4630      	mov	r0, r6
    3e14:	4639      	mov	r1, r7
    3e16:	f7fc f9c7 	bl	1a8 <__aeabi_dsub>
    3e1a:	4622      	mov	r2, r4
    3e1c:	462b      	mov	r3, r5
    3e1e:	f7fc f9c3 	bl	1a8 <__aeabi_dsub>
    3e22:	a343      	add	r3, pc, #268	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3e24:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e28:	4604      	mov	r4, r0
    3e2a:	460d      	mov	r5, r1
    3e2c:	ec51 0b18 	vmov	r0, r1, d8
    3e30:	f7fc fb72 	bl	518 <__aeabi_dmul>
    3e34:	4622      	mov	r2, r4
    3e36:	462b      	mov	r3, r5
    3e38:	f7fc f9b6 	bl	1a8 <__aeabi_dsub>
    3e3c:	4602      	mov	r2, r0
    3e3e:	460b      	mov	r3, r1
    3e40:	4604      	mov	r4, r0
    3e42:	460d      	mov	r5, r1
    3e44:	4640      	mov	r0, r8
    3e46:	4649      	mov	r1, r9
    3e48:	f7fc f9ae 	bl	1a8 <__aeabi_dsub>
    3e4c:	9a03      	ldr	r2, [sp, #12]
    3e4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
    3e52:	1ad3      	subs	r3, r2, r3
    3e54:	2b31      	cmp	r3, #49	; 0x31
    3e56:	dc24      	bgt.n	3ea2 <__ieee754_rem_pio2+0x28a>
    3e58:	e9ca 0100 	strd	r0, r1, [sl]
    3e5c:	4646      	mov	r6, r8
    3e5e:	464f      	mov	r7, r9
    3e60:	e9da 8900 	ldrd	r8, r9, [sl]
    3e64:	4630      	mov	r0, r6
    3e66:	4642      	mov	r2, r8
    3e68:	464b      	mov	r3, r9
    3e6a:	4639      	mov	r1, r7
    3e6c:	f7fc f99c 	bl	1a8 <__aeabi_dsub>
    3e70:	462b      	mov	r3, r5
    3e72:	4622      	mov	r2, r4
    3e74:	f7fc f998 	bl	1a8 <__aeabi_dsub>
    3e78:	9b02      	ldr	r3, [sp, #8]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3e80:	f6bf af0a 	bge.w	3c98 <__ieee754_rem_pio2+0x80>
    3e84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    3e88:	f8ca 3004 	str.w	r3, [sl, #4]
    3e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    3e90:	f8ca 8000 	str.w	r8, [sl]
    3e94:	f8ca 0008 	str.w	r0, [sl, #8]
    3e98:	f8ca 300c 	str.w	r3, [sl, #12]
    3e9c:	f1cb 0b00 	rsb	fp, fp, #0
    3ea0:	e6fa      	b.n	3c98 <__ieee754_rem_pio2+0x80>
    3ea2:	a327      	add	r3, pc, #156	; (adr r3, 3f40 <__ieee754_rem_pio2+0x328>)
    3ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ea8:	ec51 0b18 	vmov	r0, r1, d8
    3eac:	f7fc fb34 	bl	518 <__aeabi_dmul>
    3eb0:	4604      	mov	r4, r0
    3eb2:	460d      	mov	r5, r1
    3eb4:	4602      	mov	r2, r0
    3eb6:	460b      	mov	r3, r1
    3eb8:	4640      	mov	r0, r8
    3eba:	4649      	mov	r1, r9
    3ebc:	f7fc f974 	bl	1a8 <__aeabi_dsub>
    3ec0:	4602      	mov	r2, r0
    3ec2:	460b      	mov	r3, r1
    3ec4:	4606      	mov	r6, r0
    3ec6:	460f      	mov	r7, r1
    3ec8:	4640      	mov	r0, r8
    3eca:	4649      	mov	r1, r9
    3ecc:	f7fc f96c 	bl	1a8 <__aeabi_dsub>
    3ed0:	4622      	mov	r2, r4
    3ed2:	462b      	mov	r3, r5
    3ed4:	f7fc f968 	bl	1a8 <__aeabi_dsub>
    3ed8:	a31b      	add	r3, pc, #108	; (adr r3, 3f48 <__ieee754_rem_pio2+0x330>)
    3eda:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ede:	4604      	mov	r4, r0
    3ee0:	460d      	mov	r5, r1
    3ee2:	ec51 0b18 	vmov	r0, r1, d8
    3ee6:	f7fc fb17 	bl	518 <__aeabi_dmul>
    3eea:	4622      	mov	r2, r4
    3eec:	462b      	mov	r3, r5
    3eee:	f7fc f95b 	bl	1a8 <__aeabi_dsub>
    3ef2:	4604      	mov	r4, r0
    3ef4:	460d      	mov	r5, r1
    3ef6:	e75f      	b.n	3db8 <__ieee754_rem_pio2+0x1a0>
    3ef8:	4b1b      	ldr	r3, [pc, #108]	; (3f68 <__ieee754_rem_pio2+0x350>)
    3efa:	4598      	cmp	r8, r3
    3efc:	dd36      	ble.n	3f6c <__ieee754_rem_pio2+0x354>
    3efe:	ee10 2a10 	vmov	r2, s0
    3f02:	462b      	mov	r3, r5
    3f04:	4620      	mov	r0, r4
    3f06:	4629      	mov	r1, r5
    3f08:	f7fc f94e 	bl	1a8 <__aeabi_dsub>
    3f0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3f10:	e9ca 0100 	strd	r0, r1, [sl]
    3f14:	e694      	b.n	3c40 <__ieee754_rem_pio2+0x28>
    3f16:	bf00      	nop
    3f18:	54400000 	.word	0x54400000
    3f1c:	3ff921fb 	.word	0x3ff921fb
    3f20:	1a626331 	.word	0x1a626331
    3f24:	3dd0b461 	.word	0x3dd0b461
    3f28:	1a600000 	.word	0x1a600000
    3f2c:	3dd0b461 	.word	0x3dd0b461
    3f30:	2e037073 	.word	0x2e037073
    3f34:	3ba3198a 	.word	0x3ba3198a
    3f38:	6dc9c883 	.word	0x6dc9c883
    3f3c:	3fe45f30 	.word	0x3fe45f30
    3f40:	2e000000 	.word	0x2e000000
    3f44:	3ba3198a 	.word	0x3ba3198a
    3f48:	252049c1 	.word	0x252049c1
    3f4c:	397b839a 	.word	0x397b839a
    3f50:	3fe921fb 	.word	0x3fe921fb
    3f54:	4002d97b 	.word	0x4002d97b
    3f58:	3ff921fb 	.word	0x3ff921fb
    3f5c:	413921fb 	.word	0x413921fb
    3f60:	3fe00000 	.word	0x3fe00000
    3f64:	0003625c 	.word	0x0003625c
    3f68:	7fefffff 	.word	0x7fefffff
    3f6c:	ea4f 5428 	mov.w	r4, r8, asr #20
    3f70:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
    3f74:	ee10 0a10 	vmov	r0, s0
    3f78:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
    3f7c:	ee10 6a10 	vmov	r6, s0
    3f80:	460f      	mov	r7, r1
    3f82:	f7fc fe71 	bl	c68 <__aeabi_d2iz>
    3f86:	f7fc fa5d 	bl	444 <__aeabi_i2d>
    3f8a:	4602      	mov	r2, r0
    3f8c:	460b      	mov	r3, r1
    3f8e:	4630      	mov	r0, r6
    3f90:	4639      	mov	r1, r7
    3f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3f96:	f7fc f907 	bl	1a8 <__aeabi_dsub>
    3f9a:	4b23      	ldr	r3, [pc, #140]	; (4028 <__ieee754_rem_pio2+0x410>)
    3f9c:	2200      	movs	r2, #0
    3f9e:	f7fc fabb 	bl	518 <__aeabi_dmul>
    3fa2:	460f      	mov	r7, r1
    3fa4:	4606      	mov	r6, r0
    3fa6:	f7fc fe5f 	bl	c68 <__aeabi_d2iz>
    3faa:	f7fc fa4b 	bl	444 <__aeabi_i2d>
    3fae:	4602      	mov	r2, r0
    3fb0:	460b      	mov	r3, r1
    3fb2:	4630      	mov	r0, r6
    3fb4:	4639      	mov	r1, r7
    3fb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3fba:	f7fc f8f5 	bl	1a8 <__aeabi_dsub>
    3fbe:	4b1a      	ldr	r3, [pc, #104]	; (4028 <__ieee754_rem_pio2+0x410>)
    3fc0:	2200      	movs	r2, #0
    3fc2:	f7fc faa9 	bl	518 <__aeabi_dmul>
    3fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    3fca:	ad04      	add	r5, sp, #16
    3fcc:	f04f 0803 	mov.w	r8, #3
    3fd0:	46a9      	mov	r9, r5
    3fd2:	2600      	movs	r6, #0
    3fd4:	2700      	movs	r7, #0
    3fd6:	4632      	mov	r2, r6
    3fd8:	463b      	mov	r3, r7
    3fda:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    3fde:	46c3      	mov	fp, r8
    3fe0:	3d08      	subs	r5, #8
    3fe2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3fe6:	f7fc fcff 	bl	9e8 <__aeabi_dcmpeq>
    3fea:	2800      	cmp	r0, #0
    3fec:	d1f3      	bne.n	3fd6 <__ieee754_rem_pio2+0x3be>
    3fee:	4b0f      	ldr	r3, [pc, #60]	; (402c <__ieee754_rem_pio2+0x414>)
    3ff0:	9301      	str	r3, [sp, #4]
    3ff2:	2302      	movs	r3, #2
    3ff4:	9300      	str	r3, [sp, #0]
    3ff6:	4622      	mov	r2, r4
    3ff8:	465b      	mov	r3, fp
    3ffa:	4651      	mov	r1, sl
    3ffc:	4648      	mov	r0, r9
    3ffe:	f000 f8df 	bl	41c0 <__kernel_rem_pio2>
    4002:	9b02      	ldr	r3, [sp, #8]
    4004:	2b00      	cmp	r3, #0
    4006:	4683      	mov	fp, r0
    4008:	f6bf ae46 	bge.w	3c98 <__ieee754_rem_pio2+0x80>
    400c:	e9da 2100 	ldrd	r2, r1, [sl]
    4010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4014:	e9ca 2300 	strd	r2, r3, [sl]
    4018:	e9da 2102 	ldrd	r2, r1, [sl, #8]
    401c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4020:	e9ca 2302 	strd	r2, r3, [sl, #8]
    4024:	e73a      	b.n	3e9c <__ieee754_rem_pio2+0x284>
    4026:	bf00      	nop
    4028:	41700000 	.word	0x41700000
    402c:	000362dc 	.word	0x000362dc

00004030 <__kernel_cos>:
    4030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4034:	ec57 6b10 	vmov	r6, r7, d0
    4038:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
    403c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
    4040:	ed8d 1b00 	vstr	d1, [sp]
    4044:	da07      	bge.n	4056 <__kernel_cos+0x26>
    4046:	ee10 0a10 	vmov	r0, s0
    404a:	4639      	mov	r1, r7
    404c:	f7fc fe0c 	bl	c68 <__aeabi_d2iz>
    4050:	2800      	cmp	r0, #0
    4052:	f000 8088 	beq.w	4166 <__kernel_cos+0x136>
    4056:	4632      	mov	r2, r6
    4058:	463b      	mov	r3, r7
    405a:	4630      	mov	r0, r6
    405c:	4639      	mov	r1, r7
    405e:	f7fc fa5b 	bl	518 <__aeabi_dmul>
    4062:	4b51      	ldr	r3, [pc, #324]	; (41a8 <__kernel_cos+0x178>)
    4064:	2200      	movs	r2, #0
    4066:	4604      	mov	r4, r0
    4068:	460d      	mov	r5, r1
    406a:	f7fc fa55 	bl	518 <__aeabi_dmul>
    406e:	a340      	add	r3, pc, #256	; (adr r3, 4170 <__kernel_cos+0x140>)
    4070:	e9d3 2300 	ldrd	r2, r3, [r3]
    4074:	4682      	mov	sl, r0
    4076:	468b      	mov	fp, r1
    4078:	4620      	mov	r0, r4
    407a:	4629      	mov	r1, r5
    407c:	f7fc fa4c 	bl	518 <__aeabi_dmul>
    4080:	a33d      	add	r3, pc, #244	; (adr r3, 4178 <__kernel_cos+0x148>)
    4082:	e9d3 2300 	ldrd	r2, r3, [r3]
    4086:	f7fc f891 	bl	1ac <__adddf3>
    408a:	4622      	mov	r2, r4
    408c:	462b      	mov	r3, r5
    408e:	f7fc fa43 	bl	518 <__aeabi_dmul>
    4092:	a33b      	add	r3, pc, #236	; (adr r3, 4180 <__kernel_cos+0x150>)
    4094:	e9d3 2300 	ldrd	r2, r3, [r3]
    4098:	f7fc f886 	bl	1a8 <__aeabi_dsub>
    409c:	4622      	mov	r2, r4
    409e:	462b      	mov	r3, r5
    40a0:	f7fc fa3a 	bl	518 <__aeabi_dmul>
    40a4:	a338      	add	r3, pc, #224	; (adr r3, 4188 <__kernel_cos+0x158>)
    40a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    40aa:	f7fc f87f 	bl	1ac <__adddf3>
    40ae:	4622      	mov	r2, r4
    40b0:	462b      	mov	r3, r5
    40b2:	f7fc fa31 	bl	518 <__aeabi_dmul>
    40b6:	a336      	add	r3, pc, #216	; (adr r3, 4190 <__kernel_cos+0x160>)
    40b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    40bc:	f7fc f874 	bl	1a8 <__aeabi_dsub>
    40c0:	4622      	mov	r2, r4
    40c2:	462b      	mov	r3, r5
    40c4:	f7fc fa28 	bl	518 <__aeabi_dmul>
    40c8:	a333      	add	r3, pc, #204	; (adr r3, 4198 <__kernel_cos+0x168>)
    40ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    40ce:	f7fc f86d 	bl	1ac <__adddf3>
    40d2:	4622      	mov	r2, r4
    40d4:	462b      	mov	r3, r5
    40d6:	f7fc fa1f 	bl	518 <__aeabi_dmul>
    40da:	4622      	mov	r2, r4
    40dc:	462b      	mov	r3, r5
    40de:	f7fc fa1b 	bl	518 <__aeabi_dmul>
    40e2:	e9dd 2300 	ldrd	r2, r3, [sp]
    40e6:	4604      	mov	r4, r0
    40e8:	460d      	mov	r5, r1
    40ea:	4630      	mov	r0, r6
    40ec:	4639      	mov	r1, r7
    40ee:	f7fc fa13 	bl	518 <__aeabi_dmul>
    40f2:	460b      	mov	r3, r1
    40f4:	4602      	mov	r2, r0
    40f6:	4629      	mov	r1, r5
    40f8:	4620      	mov	r0, r4
    40fa:	f7fc f855 	bl	1a8 <__aeabi_dsub>
    40fe:	4b2b      	ldr	r3, [pc, #172]	; (41ac <__kernel_cos+0x17c>)
    4100:	4598      	cmp	r8, r3
    4102:	4606      	mov	r6, r0
    4104:	460f      	mov	r7, r1
    4106:	dc10      	bgt.n	412a <__kernel_cos+0xfa>
    4108:	4602      	mov	r2, r0
    410a:	460b      	mov	r3, r1
    410c:	4650      	mov	r0, sl
    410e:	4659      	mov	r1, fp
    4110:	f7fc f84a 	bl	1a8 <__aeabi_dsub>
    4114:	460b      	mov	r3, r1
    4116:	4926      	ldr	r1, [pc, #152]	; (41b0 <__kernel_cos+0x180>)
    4118:	4602      	mov	r2, r0
    411a:	2000      	movs	r0, #0
    411c:	f7fc f844 	bl	1a8 <__aeabi_dsub>
    4120:	ec41 0b10 	vmov	d0, r0, r1
    4124:	b003      	add	sp, #12
    4126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    412a:	4b22      	ldr	r3, [pc, #136]	; (41b4 <__kernel_cos+0x184>)
    412c:	4920      	ldr	r1, [pc, #128]	; (41b0 <__kernel_cos+0x180>)
    412e:	4598      	cmp	r8, r3
    4130:	bfcc      	ite	gt
    4132:	4d21      	ldrgt	r5, [pc, #132]	; (41b8 <__kernel_cos+0x188>)
    4134:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
    4138:	2400      	movs	r4, #0
    413a:	4622      	mov	r2, r4
    413c:	462b      	mov	r3, r5
    413e:	2000      	movs	r0, #0
    4140:	f7fc f832 	bl	1a8 <__aeabi_dsub>
    4144:	4622      	mov	r2, r4
    4146:	4680      	mov	r8, r0
    4148:	4689      	mov	r9, r1
    414a:	462b      	mov	r3, r5
    414c:	4650      	mov	r0, sl
    414e:	4659      	mov	r1, fp
    4150:	f7fc f82a 	bl	1a8 <__aeabi_dsub>
    4154:	4632      	mov	r2, r6
    4156:	463b      	mov	r3, r7
    4158:	f7fc f826 	bl	1a8 <__aeabi_dsub>
    415c:	4602      	mov	r2, r0
    415e:	460b      	mov	r3, r1
    4160:	4640      	mov	r0, r8
    4162:	4649      	mov	r1, r9
    4164:	e7da      	b.n	411c <__kernel_cos+0xec>
    4166:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 41a0 <__kernel_cos+0x170>
    416a:	e7db      	b.n	4124 <__kernel_cos+0xf4>
    416c:	f3af 8000 	nop.w
    4170:	be8838d4 	.word	0xbe8838d4
    4174:	bda8fae9 	.word	0xbda8fae9
    4178:	bdb4b1c4 	.word	0xbdb4b1c4
    417c:	3e21ee9e 	.word	0x3e21ee9e
    4180:	809c52ad 	.word	0x809c52ad
    4184:	3e927e4f 	.word	0x3e927e4f
    4188:	19cb1590 	.word	0x19cb1590
    418c:	3efa01a0 	.word	0x3efa01a0
    4190:	16c15177 	.word	0x16c15177
    4194:	3f56c16c 	.word	0x3f56c16c
    4198:	5555554c 	.word	0x5555554c
    419c:	3fa55555 	.word	0x3fa55555
    41a0:	00000000 	.word	0x00000000
    41a4:	3ff00000 	.word	0x3ff00000
    41a8:	3fe00000 	.word	0x3fe00000
    41ac:	3fd33332 	.word	0x3fd33332
    41b0:	3ff00000 	.word	0x3ff00000
    41b4:	3fe90000 	.word	0x3fe90000
    41b8:	3fd20000 	.word	0x3fd20000
    41bc:	00000000 	.word	0x00000000

000041c0 <__kernel_rem_pio2>:
    41c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41c4:	ed2d 8b02 	vpush	{d8}
    41c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    41cc:	f112 0f14 	cmn.w	r2, #20
    41d0:	9308      	str	r3, [sp, #32]
    41d2:	9101      	str	r1, [sp, #4]
    41d4:	4bc4      	ldr	r3, [pc, #784]	; (44e8 <__kernel_rem_pio2+0x328>)
    41d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
    41d8:	900b      	str	r0, [sp, #44]	; 0x2c
    41da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    41de:	9302      	str	r3, [sp, #8]
    41e0:	9b08      	ldr	r3, [sp, #32]
    41e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    41e6:	bfa8      	it	ge
    41e8:	1ed4      	subge	r4, r2, #3
    41ea:	9306      	str	r3, [sp, #24]
    41ec:	bfb2      	itee	lt
    41ee:	2400      	movlt	r4, #0
    41f0:	2318      	movge	r3, #24
    41f2:	fb94 f4f3 	sdivge	r4, r4, r3
    41f6:	f06f 0317 	mvn.w	r3, #23
    41fa:	fb04 3303 	mla	r3, r4, r3, r3
    41fe:	eb03 0a02 	add.w	sl, r3, r2
    4202:	9b02      	ldr	r3, [sp, #8]
    4204:	9a06      	ldr	r2, [sp, #24]
    4206:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 44d8 <__kernel_rem_pio2+0x318>
    420a:	eb03 0802 	add.w	r8, r3, r2
    420e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
    4210:	1aa7      	subs	r7, r4, r2
    4212:	ae22      	add	r6, sp, #136	; 0x88
    4214:	eb03 0987 	add.w	r9, r3, r7, lsl #2
    4218:	2500      	movs	r5, #0
    421a:	4545      	cmp	r5, r8
    421c:	dd13      	ble.n	4246 <__kernel_rem_pio2+0x86>
    421e:	9b08      	ldr	r3, [sp, #32]
    4220:	ed9f 8bad 	vldr	d8, [pc, #692]	; 44d8 <__kernel_rem_pio2+0x318>
    4224:	aa22      	add	r2, sp, #136	; 0x88
    4226:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    422a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
    422e:	f04f 0800 	mov.w	r8, #0
    4232:	9b02      	ldr	r3, [sp, #8]
    4234:	4598      	cmp	r8, r3
    4236:	dc2f      	bgt.n	4298 <__kernel_rem_pio2+0xd8>
    4238:	ed8d 8b04 	vstr	d8, [sp, #16]
    423c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    4240:	462f      	mov	r7, r5
    4242:	2600      	movs	r6, #0
    4244:	e01b      	b.n	427e <__kernel_rem_pio2+0xbe>
    4246:	42ef      	cmn	r7, r5
    4248:	d407      	bmi.n	425a <__kernel_rem_pio2+0x9a>
    424a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
    424e:	f7fc f8f9 	bl	444 <__aeabi_i2d>
    4252:	e8e6 0102 	strd	r0, r1, [r6], #8
    4256:	3501      	adds	r5, #1
    4258:	e7df      	b.n	421a <__kernel_rem_pio2+0x5a>
    425a:	ec51 0b18 	vmov	r0, r1, d8
    425e:	e7f8      	b.n	4252 <__kernel_rem_pio2+0x92>
    4260:	e9d7 2300 	ldrd	r2, r3, [r7]
    4264:	e8f9 0102 	ldrd	r0, r1, [r9], #8
    4268:	f7fc f956 	bl	518 <__aeabi_dmul>
    426c:	4602      	mov	r2, r0
    426e:	460b      	mov	r3, r1
    4270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4274:	f7fb ff9a 	bl	1ac <__adddf3>
    4278:	e9cd 0104 	strd	r0, r1, [sp, #16]
    427c:	3601      	adds	r6, #1
    427e:	9b06      	ldr	r3, [sp, #24]
    4280:	429e      	cmp	r6, r3
    4282:	f1a7 0708 	sub.w	r7, r7, #8
    4286:	ddeb      	ble.n	4260 <__kernel_rem_pio2+0xa0>
    4288:	ed9d 7b04 	vldr	d7, [sp, #16]
    428c:	f108 0801 	add.w	r8, r8, #1
    4290:	ecab 7b02 	vstmia	fp!, {d7}
    4294:	3508      	adds	r5, #8
    4296:	e7cc      	b.n	4232 <__kernel_rem_pio2+0x72>
    4298:	9b02      	ldr	r3, [sp, #8]
    429a:	aa0e      	add	r2, sp, #56	; 0x38
    429c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42a0:	930d      	str	r3, [sp, #52]	; 0x34
    42a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
    42a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    42a8:	9c02      	ldr	r4, [sp, #8]
    42aa:	930c      	str	r3, [sp, #48]	; 0x30
    42ac:	00e3      	lsls	r3, r4, #3
    42ae:	930a      	str	r3, [sp, #40]	; 0x28
    42b0:	ab9a      	add	r3, sp, #616	; 0x268
    42b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    42b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
    42ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    42be:	ab72      	add	r3, sp, #456	; 0x1c8
    42c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
    42c4:	46c3      	mov	fp, r8
    42c6:	46a1      	mov	r9, r4
    42c8:	f1b9 0f00 	cmp.w	r9, #0
    42cc:	f1a5 0508 	sub.w	r5, r5, #8
    42d0:	dc77      	bgt.n	43c2 <__kernel_rem_pio2+0x202>
    42d2:	ec47 6b10 	vmov	d0, r6, r7
    42d6:	4650      	mov	r0, sl
    42d8:	f000 fb86 	bl	49e8 <scalbn>
    42dc:	ec57 6b10 	vmov	r6, r7, d0
    42e0:	2200      	movs	r2, #0
    42e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    42e6:	ee10 0a10 	vmov	r0, s0
    42ea:	4639      	mov	r1, r7
    42ec:	f7fc f914 	bl	518 <__aeabi_dmul>
    42f0:	ec41 0b10 	vmov	d0, r0, r1
    42f4:	f7fe fe98 	bl	3028 <floor>
    42f8:	4b7c      	ldr	r3, [pc, #496]	; (44ec <__kernel_rem_pio2+0x32c>)
    42fa:	ec51 0b10 	vmov	r0, r1, d0
    42fe:	2200      	movs	r2, #0
    4300:	f7fc f90a 	bl	518 <__aeabi_dmul>
    4304:	4602      	mov	r2, r0
    4306:	460b      	mov	r3, r1
    4308:	4630      	mov	r0, r6
    430a:	4639      	mov	r1, r7
    430c:	f7fb ff4c 	bl	1a8 <__aeabi_dsub>
    4310:	460f      	mov	r7, r1
    4312:	4606      	mov	r6, r0
    4314:	f7fc fca8 	bl	c68 <__aeabi_d2iz>
    4318:	9004      	str	r0, [sp, #16]
    431a:	f7fc f893 	bl	444 <__aeabi_i2d>
    431e:	4602      	mov	r2, r0
    4320:	460b      	mov	r3, r1
    4322:	4630      	mov	r0, r6
    4324:	4639      	mov	r1, r7
    4326:	f7fb ff3f 	bl	1a8 <__aeabi_dsub>
    432a:	f1ba 0f00 	cmp.w	sl, #0
    432e:	4606      	mov	r6, r0
    4330:	460f      	mov	r7, r1
    4332:	dd6d      	ble.n	4410 <__kernel_rem_pio2+0x250>
    4334:	1e62      	subs	r2, r4, #1
    4336:	ab0e      	add	r3, sp, #56	; 0x38
    4338:	9d04      	ldr	r5, [sp, #16]
    433a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    433e:	f1ca 0118 	rsb	r1, sl, #24
    4342:	fa40 f301 	asr.w	r3, r0, r1
    4346:	441d      	add	r5, r3
    4348:	408b      	lsls	r3, r1
    434a:	1ac0      	subs	r0, r0, r3
    434c:	ab0e      	add	r3, sp, #56	; 0x38
    434e:	9504      	str	r5, [sp, #16]
    4350:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    4354:	f1ca 0317 	rsb	r3, sl, #23
    4358:	fa40 fb03 	asr.w	fp, r0, r3
    435c:	f1bb 0f00 	cmp.w	fp, #0
    4360:	dd65      	ble.n	442e <__kernel_rem_pio2+0x26e>
    4362:	9b04      	ldr	r3, [sp, #16]
    4364:	2200      	movs	r2, #0
    4366:	3301      	adds	r3, #1
    4368:	9304      	str	r3, [sp, #16]
    436a:	4615      	mov	r5, r2
    436c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    4370:	4294      	cmp	r4, r2
    4372:	f300 809c 	bgt.w	44ae <__kernel_rem_pio2+0x2ee>
    4376:	f1ba 0f00 	cmp.w	sl, #0
    437a:	dd07      	ble.n	438c <__kernel_rem_pio2+0x1cc>
    437c:	f1ba 0f01 	cmp.w	sl, #1
    4380:	f000 80c0 	beq.w	4504 <__kernel_rem_pio2+0x344>
    4384:	f1ba 0f02 	cmp.w	sl, #2
    4388:	f000 80c6 	beq.w	4518 <__kernel_rem_pio2+0x358>
    438c:	f1bb 0f02 	cmp.w	fp, #2
    4390:	d14d      	bne.n	442e <__kernel_rem_pio2+0x26e>
    4392:	4632      	mov	r2, r6
    4394:	463b      	mov	r3, r7
    4396:	4956      	ldr	r1, [pc, #344]	; (44f0 <__kernel_rem_pio2+0x330>)
    4398:	2000      	movs	r0, #0
    439a:	f7fb ff05 	bl	1a8 <__aeabi_dsub>
    439e:	4606      	mov	r6, r0
    43a0:	460f      	mov	r7, r1
    43a2:	2d00      	cmp	r5, #0
    43a4:	d043      	beq.n	442e <__kernel_rem_pio2+0x26e>
    43a6:	4650      	mov	r0, sl
    43a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 44e0 <__kernel_rem_pio2+0x320>
    43ac:	f000 fb1c 	bl	49e8 <scalbn>
    43b0:	4630      	mov	r0, r6
    43b2:	4639      	mov	r1, r7
    43b4:	ec53 2b10 	vmov	r2, r3, d0
    43b8:	f7fb fef6 	bl	1a8 <__aeabi_dsub>
    43bc:	4606      	mov	r6, r0
    43be:	460f      	mov	r7, r1
    43c0:	e035      	b.n	442e <__kernel_rem_pio2+0x26e>
    43c2:	4b4c      	ldr	r3, [pc, #304]	; (44f4 <__kernel_rem_pio2+0x334>)
    43c4:	2200      	movs	r2, #0
    43c6:	4630      	mov	r0, r6
    43c8:	4639      	mov	r1, r7
    43ca:	f7fc f8a5 	bl	518 <__aeabi_dmul>
    43ce:	f7fc fc4b 	bl	c68 <__aeabi_d2iz>
    43d2:	f7fc f837 	bl	444 <__aeabi_i2d>
    43d6:	4602      	mov	r2, r0
    43d8:	460b      	mov	r3, r1
    43da:	ec43 2b18 	vmov	d8, r2, r3
    43de:	4b46      	ldr	r3, [pc, #280]	; (44f8 <__kernel_rem_pio2+0x338>)
    43e0:	2200      	movs	r2, #0
    43e2:	f7fc f899 	bl	518 <__aeabi_dmul>
    43e6:	4602      	mov	r2, r0
    43e8:	460b      	mov	r3, r1
    43ea:	4630      	mov	r0, r6
    43ec:	4639      	mov	r1, r7
    43ee:	f7fb fedb 	bl	1a8 <__aeabi_dsub>
    43f2:	f7fc fc39 	bl	c68 <__aeabi_d2iz>
    43f6:	e9d5 2300 	ldrd	r2, r3, [r5]
    43fa:	f84b 0b04 	str.w	r0, [fp], #4
    43fe:	ec51 0b18 	vmov	r0, r1, d8
    4402:	f7fb fed3 	bl	1ac <__adddf3>
    4406:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    440a:	4606      	mov	r6, r0
    440c:	460f      	mov	r7, r1
    440e:	e75b      	b.n	42c8 <__kernel_rem_pio2+0x108>
    4410:	d106      	bne.n	4420 <__kernel_rem_pio2+0x260>
    4412:	1e63      	subs	r3, r4, #1
    4414:	aa0e      	add	r2, sp, #56	; 0x38
    4416:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    441a:	ea4f 5be0 	mov.w	fp, r0, asr #23
    441e:	e79d      	b.n	435c <__kernel_rem_pio2+0x19c>
    4420:	4b36      	ldr	r3, [pc, #216]	; (44fc <__kernel_rem_pio2+0x33c>)
    4422:	2200      	movs	r2, #0
    4424:	f7fc fafe 	bl	a24 <__aeabi_dcmpge>
    4428:	2800      	cmp	r0, #0
    442a:	d13d      	bne.n	44a8 <__kernel_rem_pio2+0x2e8>
    442c:	4683      	mov	fp, r0
    442e:	2200      	movs	r2, #0
    4430:	2300      	movs	r3, #0
    4432:	4630      	mov	r0, r6
    4434:	4639      	mov	r1, r7
    4436:	f7fc fad7 	bl	9e8 <__aeabi_dcmpeq>
    443a:	2800      	cmp	r0, #0
    443c:	f000 80bf 	beq.w	45be <__kernel_rem_pio2+0x3fe>
    4440:	1e65      	subs	r5, r4, #1
    4442:	462b      	mov	r3, r5
    4444:	2200      	movs	r2, #0
    4446:	9902      	ldr	r1, [sp, #8]
    4448:	428b      	cmp	r3, r1
    444a:	da6c      	bge.n	4526 <__kernel_rem_pio2+0x366>
    444c:	2a00      	cmp	r2, #0
    444e:	f000 8088 	beq.w	4562 <__kernel_rem_pio2+0x3a2>
    4452:	ab0e      	add	r3, sp, #56	; 0x38
    4454:	f1aa 0a18 	sub.w	sl, sl, #24
    4458:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    445c:	2b00      	cmp	r3, #0
    445e:	f000 80ac 	beq.w	45ba <__kernel_rem_pio2+0x3fa>
    4462:	4650      	mov	r0, sl
    4464:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 44e0 <__kernel_rem_pio2+0x320>
    4468:	f000 fabe 	bl	49e8 <scalbn>
    446c:	ab9a      	add	r3, sp, #616	; 0x268
    446e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    4472:	ec57 6b10 	vmov	r6, r7, d0
    4476:	00ec      	lsls	r4, r5, #3
    4478:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
    447c:	46aa      	mov	sl, r5
    447e:	f1ba 0f00 	cmp.w	sl, #0
    4482:	f280 80d5 	bge.w	4630 <__kernel_rem_pio2+0x470>
    4486:	ed9f 8b14 	vldr	d8, [pc, #80]	; 44d8 <__kernel_rem_pio2+0x318>
    448a:	462e      	mov	r6, r5
    448c:	2e00      	cmp	r6, #0
    448e:	f2c0 8103 	blt.w	4698 <__kernel_rem_pio2+0x4d8>
    4492:	ab72      	add	r3, sp, #456	; 0x1c8
    4494:	ed8d 8b06 	vstr	d8, [sp, #24]
    4498:	f8df a064 	ldr.w	sl, [pc, #100]	; 4500 <__kernel_rem_pio2+0x340>
    449c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
    44a0:	f04f 0800 	mov.w	r8, #0
    44a4:	1baf      	subs	r7, r5, r6
    44a6:	e0e9      	b.n	467c <__kernel_rem_pio2+0x4bc>
    44a8:	f04f 0b02 	mov.w	fp, #2
    44ac:	e759      	b.n	4362 <__kernel_rem_pio2+0x1a2>
    44ae:	f8d8 3000 	ldr.w	r3, [r8]
    44b2:	b955      	cbnz	r5, 44ca <__kernel_rem_pio2+0x30a>
    44b4:	b123      	cbz	r3, 44c0 <__kernel_rem_pio2+0x300>
    44b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
    44ba:	f8c8 3000 	str.w	r3, [r8]
    44be:	2301      	movs	r3, #1
    44c0:	3201      	adds	r2, #1
    44c2:	f108 0804 	add.w	r8, r8, #4
    44c6:	461d      	mov	r5, r3
    44c8:	e752      	b.n	4370 <__kernel_rem_pio2+0x1b0>
    44ca:	1acb      	subs	r3, r1, r3
    44cc:	f8c8 3000 	str.w	r3, [r8]
    44d0:	462b      	mov	r3, r5
    44d2:	e7f5      	b.n	44c0 <__kernel_rem_pio2+0x300>
    44d4:	f3af 8000 	nop.w
	...
    44e4:	3ff00000 	.word	0x3ff00000
    44e8:	000363fc 	.word	0x000363fc
    44ec:	40200000 	.word	0x40200000
    44f0:	3ff00000 	.word	0x3ff00000
    44f4:	3e700000 	.word	0x3e700000
    44f8:	41700000 	.word	0x41700000
    44fc:	3fe00000 	.word	0x3fe00000
    4500:	0001d388 	.word	0x0001d388
    4504:	1e62      	subs	r2, r4, #1
    4506:	ab0e      	add	r3, sp, #56	; 0x38
    4508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    450c:	f3c3 0316 	ubfx	r3, r3, #0, #23
    4510:	a90e      	add	r1, sp, #56	; 0x38
    4512:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    4516:	e739      	b.n	438c <__kernel_rem_pio2+0x1cc>
    4518:	1e62      	subs	r2, r4, #1
    451a:	ab0e      	add	r3, sp, #56	; 0x38
    451c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4520:	f3c3 0315 	ubfx	r3, r3, #0, #22
    4524:	e7f4      	b.n	4510 <__kernel_rem_pio2+0x350>
    4526:	a90e      	add	r1, sp, #56	; 0x38
    4528:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    452c:	3b01      	subs	r3, #1
    452e:	430a      	orrs	r2, r1
    4530:	e789      	b.n	4446 <__kernel_rem_pio2+0x286>
    4532:	3301      	adds	r3, #1
    4534:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    4538:	2900      	cmp	r1, #0
    453a:	d0fa      	beq.n	4532 <__kernel_rem_pio2+0x372>
    453c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    453e:	a99a      	add	r1, sp, #616	; 0x268
    4540:	440a      	add	r2, r1
    4542:	3a98      	subs	r2, #152	; 0x98
    4544:	920a      	str	r2, [sp, #40]	; 0x28
    4546:	9a08      	ldr	r2, [sp, #32]
    4548:	18e3      	adds	r3, r4, r3
    454a:	18a5      	adds	r5, r4, r2
    454c:	aa22      	add	r2, sp, #136	; 0x88
    454e:	f104 0801 	add.w	r8, r4, #1
    4552:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
    4556:	9304      	str	r3, [sp, #16]
    4558:	9b04      	ldr	r3, [sp, #16]
    455a:	4543      	cmp	r3, r8
    455c:	da04      	bge.n	4568 <__kernel_rem_pio2+0x3a8>
    455e:	461c      	mov	r4, r3
    4560:	e6a4      	b.n	42ac <__kernel_rem_pio2+0xec>
    4562:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4564:	2301      	movs	r3, #1
    4566:	e7e5      	b.n	4534 <__kernel_rem_pio2+0x374>
    4568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    456a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    456e:	f7fb ff69 	bl	444 <__aeabi_i2d>
    4572:	e8e5 0102 	strd	r0, r1, [r5], #8
    4576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4578:	46ab      	mov	fp, r5
    457a:	461c      	mov	r4, r3
    457c:	f04f 0900 	mov.w	r9, #0
    4580:	2600      	movs	r6, #0
    4582:	2700      	movs	r7, #0
    4584:	9b06      	ldr	r3, [sp, #24]
    4586:	4599      	cmp	r9, r3
    4588:	dd06      	ble.n	4598 <__kernel_rem_pio2+0x3d8>
    458a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    458c:	e8e3 6702 	strd	r6, r7, [r3], #8
    4590:	f108 0801 	add.w	r8, r8, #1
    4594:	930a      	str	r3, [sp, #40]	; 0x28
    4596:	e7df      	b.n	4558 <__kernel_rem_pio2+0x398>
    4598:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
    459c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    45a0:	f7fb ffba 	bl	518 <__aeabi_dmul>
    45a4:	4602      	mov	r2, r0
    45a6:	460b      	mov	r3, r1
    45a8:	4630      	mov	r0, r6
    45aa:	4639      	mov	r1, r7
    45ac:	f7fb fdfe 	bl	1ac <__adddf3>
    45b0:	f109 0901 	add.w	r9, r9, #1
    45b4:	4606      	mov	r6, r0
    45b6:	460f      	mov	r7, r1
    45b8:	e7e4      	b.n	4584 <__kernel_rem_pio2+0x3c4>
    45ba:	3d01      	subs	r5, #1
    45bc:	e749      	b.n	4452 <__kernel_rem_pio2+0x292>
    45be:	ec47 6b10 	vmov	d0, r6, r7
    45c2:	f1ca 0000 	rsb	r0, sl, #0
    45c6:	f000 fa0f 	bl	49e8 <scalbn>
    45ca:	ec57 6b10 	vmov	r6, r7, d0
    45ce:	4ba0      	ldr	r3, [pc, #640]	; (4850 <__kernel_rem_pio2+0x690>)
    45d0:	ee10 0a10 	vmov	r0, s0
    45d4:	2200      	movs	r2, #0
    45d6:	4639      	mov	r1, r7
    45d8:	f7fc fa24 	bl	a24 <__aeabi_dcmpge>
    45dc:	b1f8      	cbz	r0, 461e <__kernel_rem_pio2+0x45e>
    45de:	4b9d      	ldr	r3, [pc, #628]	; (4854 <__kernel_rem_pio2+0x694>)
    45e0:	2200      	movs	r2, #0
    45e2:	4630      	mov	r0, r6
    45e4:	4639      	mov	r1, r7
    45e6:	f7fb ff97 	bl	518 <__aeabi_dmul>
    45ea:	f7fc fb3d 	bl	c68 <__aeabi_d2iz>
    45ee:	4680      	mov	r8, r0
    45f0:	f7fb ff28 	bl	444 <__aeabi_i2d>
    45f4:	4b96      	ldr	r3, [pc, #600]	; (4850 <__kernel_rem_pio2+0x690>)
    45f6:	2200      	movs	r2, #0
    45f8:	f7fb ff8e 	bl	518 <__aeabi_dmul>
    45fc:	460b      	mov	r3, r1
    45fe:	4602      	mov	r2, r0
    4600:	4639      	mov	r1, r7
    4602:	4630      	mov	r0, r6
    4604:	f7fb fdd0 	bl	1a8 <__aeabi_dsub>
    4608:	f7fc fb2e 	bl	c68 <__aeabi_d2iz>
    460c:	1c65      	adds	r5, r4, #1
    460e:	ab0e      	add	r3, sp, #56	; 0x38
    4610:	f10a 0a18 	add.w	sl, sl, #24
    4614:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    4618:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
    461c:	e721      	b.n	4462 <__kernel_rem_pio2+0x2a2>
    461e:	4630      	mov	r0, r6
    4620:	4639      	mov	r1, r7
    4622:	f7fc fb21 	bl	c68 <__aeabi_d2iz>
    4626:	ab0e      	add	r3, sp, #56	; 0x38
    4628:	4625      	mov	r5, r4
    462a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    462e:	e718      	b.n	4462 <__kernel_rem_pio2+0x2a2>
    4630:	ab0e      	add	r3, sp, #56	; 0x38
    4632:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    4636:	f7fb ff05 	bl	444 <__aeabi_i2d>
    463a:	4632      	mov	r2, r6
    463c:	463b      	mov	r3, r7
    463e:	f7fb ff6b 	bl	518 <__aeabi_dmul>
    4642:	4b84      	ldr	r3, [pc, #528]	; (4854 <__kernel_rem_pio2+0x694>)
    4644:	e968 0102 	strd	r0, r1, [r8, #-8]!
    4648:	2200      	movs	r2, #0
    464a:	4630      	mov	r0, r6
    464c:	4639      	mov	r1, r7
    464e:	f7fb ff63 	bl	518 <__aeabi_dmul>
    4652:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    4656:	4606      	mov	r6, r0
    4658:	460f      	mov	r7, r1
    465a:	e710      	b.n	447e <__kernel_rem_pio2+0x2be>
    465c:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    4660:	e8fa 0102 	ldrd	r0, r1, [sl], #8
    4664:	f7fb ff58 	bl	518 <__aeabi_dmul>
    4668:	4602      	mov	r2, r0
    466a:	460b      	mov	r3, r1
    466c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4670:	f7fb fd9c 	bl	1ac <__adddf3>
    4674:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4678:	f108 0801 	add.w	r8, r8, #1
    467c:	9b02      	ldr	r3, [sp, #8]
    467e:	4598      	cmp	r8, r3
    4680:	dc01      	bgt.n	4686 <__kernel_rem_pio2+0x4c6>
    4682:	45b8      	cmp	r8, r7
    4684:	ddea      	ble.n	465c <__kernel_rem_pio2+0x49c>
    4686:	ed9d 7b06 	vldr	d7, [sp, #24]
    468a:	ab4a      	add	r3, sp, #296	; 0x128
    468c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    4690:	ed87 7b00 	vstr	d7, [r7]
    4694:	3e01      	subs	r6, #1
    4696:	e6f9      	b.n	448c <__kernel_rem_pio2+0x2cc>
    4698:	9ba6      	ldr	r3, [sp, #664]	; 0x298
    469a:	2b02      	cmp	r3, #2
    469c:	dc0b      	bgt.n	46b6 <__kernel_rem_pio2+0x4f6>
    469e:	2b00      	cmp	r3, #0
    46a0:	dc35      	bgt.n	470e <__kernel_rem_pio2+0x54e>
    46a2:	d059      	beq.n	4758 <__kernel_rem_pio2+0x598>
    46a4:	9b04      	ldr	r3, [sp, #16]
    46a6:	f003 0007 	and.w	r0, r3, #7
    46aa:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
    46ae:	ecbd 8b02 	vpop	{d8}
    46b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46b6:	9ba6      	ldr	r3, [sp, #664]	; 0x298
    46b8:	2b03      	cmp	r3, #3
    46ba:	d1f3      	bne.n	46a4 <__kernel_rem_pio2+0x4e4>
    46bc:	ab4a      	add	r3, sp, #296	; 0x128
    46be:	4423      	add	r3, r4
    46c0:	9306      	str	r3, [sp, #24]
    46c2:	461c      	mov	r4, r3
    46c4:	469a      	mov	sl, r3
    46c6:	9502      	str	r5, [sp, #8]
    46c8:	9b02      	ldr	r3, [sp, #8]
    46ca:	2b00      	cmp	r3, #0
    46cc:	f1aa 0a08 	sub.w	sl, sl, #8
    46d0:	dc69      	bgt.n	47a6 <__kernel_rem_pio2+0x5e6>
    46d2:	46aa      	mov	sl, r5
    46d4:	f1ba 0f01 	cmp.w	sl, #1
    46d8:	f1a4 0408 	sub.w	r4, r4, #8
    46dc:	f300 8083 	bgt.w	47e6 <__kernel_rem_pio2+0x626>
    46e0:	9c06      	ldr	r4, [sp, #24]
    46e2:	2000      	movs	r0, #0
    46e4:	3408      	adds	r4, #8
    46e6:	2100      	movs	r1, #0
    46e8:	2d01      	cmp	r5, #1
    46ea:	f300 809b 	bgt.w	4824 <__kernel_rem_pio2+0x664>
    46ee:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
    46f2:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
    46f6:	f1bb 0f00 	cmp.w	fp, #0
    46fa:	f040 8099 	bne.w	4830 <__kernel_rem_pio2+0x670>
    46fe:	9b01      	ldr	r3, [sp, #4]
    4700:	e9c3 5600 	strd	r5, r6, [r3]
    4704:	e9c3 7802 	strd	r7, r8, [r3, #8]
    4708:	e9c3 0104 	strd	r0, r1, [r3, #16]
    470c:	e7ca      	b.n	46a4 <__kernel_rem_pio2+0x4e4>
    470e:	3408      	adds	r4, #8
    4710:	ab4a      	add	r3, sp, #296	; 0x128
    4712:	441c      	add	r4, r3
    4714:	462e      	mov	r6, r5
    4716:	2000      	movs	r0, #0
    4718:	2100      	movs	r1, #0
    471a:	2e00      	cmp	r6, #0
    471c:	da34      	bge.n	4788 <__kernel_rem_pio2+0x5c8>
    471e:	f1bb 0f00 	cmp.w	fp, #0
    4722:	d037      	beq.n	4794 <__kernel_rem_pio2+0x5d4>
    4724:	4602      	mov	r2, r0
    4726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    472a:	9c01      	ldr	r4, [sp, #4]
    472c:	e9c4 2300 	strd	r2, r3, [r4]
    4730:	4602      	mov	r2, r0
    4732:	460b      	mov	r3, r1
    4734:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
    4738:	f7fb fd36 	bl	1a8 <__aeabi_dsub>
    473c:	ae4c      	add	r6, sp, #304	; 0x130
    473e:	2401      	movs	r4, #1
    4740:	42a5      	cmp	r5, r4
    4742:	da2a      	bge.n	479a <__kernel_rem_pio2+0x5da>
    4744:	f1bb 0f00 	cmp.w	fp, #0
    4748:	d002      	beq.n	4750 <__kernel_rem_pio2+0x590>
    474a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    474e:	4619      	mov	r1, r3
    4750:	9b01      	ldr	r3, [sp, #4]
    4752:	e9c3 0102 	strd	r0, r1, [r3, #8]
    4756:	e7a5      	b.n	46a4 <__kernel_rem_pio2+0x4e4>
    4758:	ab9a      	add	r3, sp, #616	; 0x268
    475a:	441c      	add	r4, r3
    475c:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
    4760:	2000      	movs	r0, #0
    4762:	2100      	movs	r1, #0
    4764:	2d00      	cmp	r5, #0
    4766:	da09      	bge.n	477c <__kernel_rem_pio2+0x5bc>
    4768:	f1bb 0f00 	cmp.w	fp, #0
    476c:	d002      	beq.n	4774 <__kernel_rem_pio2+0x5b4>
    476e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4772:	4619      	mov	r1, r3
    4774:	9b01      	ldr	r3, [sp, #4]
    4776:	e9c3 0100 	strd	r0, r1, [r3]
    477a:	e793      	b.n	46a4 <__kernel_rem_pio2+0x4e4>
    477c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    4780:	f7fb fd14 	bl	1ac <__adddf3>
    4784:	3d01      	subs	r5, #1
    4786:	e7ed      	b.n	4764 <__kernel_rem_pio2+0x5a4>
    4788:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    478c:	f7fb fd0e 	bl	1ac <__adddf3>
    4790:	3e01      	subs	r6, #1
    4792:	e7c2      	b.n	471a <__kernel_rem_pio2+0x55a>
    4794:	4602      	mov	r2, r0
    4796:	460b      	mov	r3, r1
    4798:	e7c7      	b.n	472a <__kernel_rem_pio2+0x56a>
    479a:	e8f6 2302 	ldrd	r2, r3, [r6], #8
    479e:	f7fb fd05 	bl	1ac <__adddf3>
    47a2:	3401      	adds	r4, #1
    47a4:	e7cc      	b.n	4740 <__kernel_rem_pio2+0x580>
    47a6:	e9da 8900 	ldrd	r8, r9, [sl]
    47aa:	e9da 6702 	ldrd	r6, r7, [sl, #8]
    47ae:	9b02      	ldr	r3, [sp, #8]
    47b0:	3b01      	subs	r3, #1
    47b2:	9302      	str	r3, [sp, #8]
    47b4:	4632      	mov	r2, r6
    47b6:	463b      	mov	r3, r7
    47b8:	4640      	mov	r0, r8
    47ba:	4649      	mov	r1, r9
    47bc:	f7fb fcf6 	bl	1ac <__adddf3>
    47c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    47c4:	4602      	mov	r2, r0
    47c6:	460b      	mov	r3, r1
    47c8:	4640      	mov	r0, r8
    47ca:	4649      	mov	r1, r9
    47cc:	f7fb fcec 	bl	1a8 <__aeabi_dsub>
    47d0:	4632      	mov	r2, r6
    47d2:	463b      	mov	r3, r7
    47d4:	f7fb fcea 	bl	1ac <__adddf3>
    47d8:	ed9d 7b08 	vldr	d7, [sp, #32]
    47dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
    47e0:	ed8a 7b00 	vstr	d7, [sl]
    47e4:	e770      	b.n	46c8 <__kernel_rem_pio2+0x508>
    47e6:	e9d4 8900 	ldrd	r8, r9, [r4]
    47ea:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    47ee:	4640      	mov	r0, r8
    47f0:	4632      	mov	r2, r6
    47f2:	463b      	mov	r3, r7
    47f4:	4649      	mov	r1, r9
    47f6:	f7fb fcd9 	bl	1ac <__adddf3>
    47fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    47fe:	4602      	mov	r2, r0
    4800:	460b      	mov	r3, r1
    4802:	4640      	mov	r0, r8
    4804:	4649      	mov	r1, r9
    4806:	f7fb fccf 	bl	1a8 <__aeabi_dsub>
    480a:	4632      	mov	r2, r6
    480c:	463b      	mov	r3, r7
    480e:	f7fb fccd 	bl	1ac <__adddf3>
    4812:	ed9d 7b02 	vldr	d7, [sp, #8]
    4816:	e9c4 0102 	strd	r0, r1, [r4, #8]
    481a:	ed84 7b00 	vstr	d7, [r4]
    481e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    4822:	e757      	b.n	46d4 <__kernel_rem_pio2+0x514>
    4824:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    4828:	f7fb fcc0 	bl	1ac <__adddf3>
    482c:	3d01      	subs	r5, #1
    482e:	e75b      	b.n	46e8 <__kernel_rem_pio2+0x528>
    4830:	9b01      	ldr	r3, [sp, #4]
    4832:	9a01      	ldr	r2, [sp, #4]
    4834:	601d      	str	r5, [r3, #0]
    4836:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
    483a:	605c      	str	r4, [r3, #4]
    483c:	609f      	str	r7, [r3, #8]
    483e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
    4842:	60d3      	str	r3, [r2, #12]
    4844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4848:	6110      	str	r0, [r2, #16]
    484a:	6153      	str	r3, [r2, #20]
    484c:	e72a      	b.n	46a4 <__kernel_rem_pio2+0x4e4>
    484e:	bf00      	nop
    4850:	41700000 	.word	0x41700000
    4854:	3e700000 	.word	0x3e700000

00004858 <__kernel_sin>:
    4858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    485c:	ed2d 8b04 	vpush	{d8-d9}
    4860:	eeb0 8a41 	vmov.f32	s16, s2
    4864:	eef0 8a61 	vmov.f32	s17, s3
    4868:	ec55 4b10 	vmov	r4, r5, d0
    486c:	b083      	sub	sp, #12
    486e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    4872:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    4876:	9001      	str	r0, [sp, #4]
    4878:	da06      	bge.n	4888 <__kernel_sin+0x30>
    487a:	ee10 0a10 	vmov	r0, s0
    487e:	4629      	mov	r1, r5
    4880:	f7fc f9f2 	bl	c68 <__aeabi_d2iz>
    4884:	2800      	cmp	r0, #0
    4886:	d051      	beq.n	492c <__kernel_sin+0xd4>
    4888:	4622      	mov	r2, r4
    488a:	462b      	mov	r3, r5
    488c:	4620      	mov	r0, r4
    488e:	4629      	mov	r1, r5
    4890:	f7fb fe42 	bl	518 <__aeabi_dmul>
    4894:	4682      	mov	sl, r0
    4896:	468b      	mov	fp, r1
    4898:	4602      	mov	r2, r0
    489a:	460b      	mov	r3, r1
    489c:	4620      	mov	r0, r4
    489e:	4629      	mov	r1, r5
    48a0:	f7fb fe3a 	bl	518 <__aeabi_dmul>
    48a4:	a341      	add	r3, pc, #260	; (adr r3, 49ac <__kernel_sin+0x154>)
    48a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    48aa:	4680      	mov	r8, r0
    48ac:	4689      	mov	r9, r1
    48ae:	4650      	mov	r0, sl
    48b0:	4659      	mov	r1, fp
    48b2:	f7fb fe31 	bl	518 <__aeabi_dmul>
    48b6:	a33f      	add	r3, pc, #252	; (adr r3, 49b4 <__kernel_sin+0x15c>)
    48b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    48bc:	f7fb fc74 	bl	1a8 <__aeabi_dsub>
    48c0:	4652      	mov	r2, sl
    48c2:	465b      	mov	r3, fp
    48c4:	f7fb fe28 	bl	518 <__aeabi_dmul>
    48c8:	a33c      	add	r3, pc, #240	; (adr r3, 49bc <__kernel_sin+0x164>)
    48ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    48ce:	f7fb fc6d 	bl	1ac <__adddf3>
    48d2:	4652      	mov	r2, sl
    48d4:	465b      	mov	r3, fp
    48d6:	f7fb fe1f 	bl	518 <__aeabi_dmul>
    48da:	a33a      	add	r3, pc, #232	; (adr r3, 49c4 <__kernel_sin+0x16c>)
    48dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    48e0:	f7fb fc62 	bl	1a8 <__aeabi_dsub>
    48e4:	4652      	mov	r2, sl
    48e6:	465b      	mov	r3, fp
    48e8:	f7fb fe16 	bl	518 <__aeabi_dmul>
    48ec:	a337      	add	r3, pc, #220	; (adr r3, 49cc <__kernel_sin+0x174>)
    48ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    48f2:	f7fb fc5b 	bl	1ac <__adddf3>
    48f6:	9b01      	ldr	r3, [sp, #4]
    48f8:	4606      	mov	r6, r0
    48fa:	460f      	mov	r7, r1
    48fc:	b9eb      	cbnz	r3, 493a <__kernel_sin+0xe2>
    48fe:	4602      	mov	r2, r0
    4900:	460b      	mov	r3, r1
    4902:	4650      	mov	r0, sl
    4904:	4659      	mov	r1, fp
    4906:	f7fb fe07 	bl	518 <__aeabi_dmul>
    490a:	a325      	add	r3, pc, #148	; (adr r3, 49a0 <__kernel_sin+0x148>)
    490c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4910:	f7fb fc4a 	bl	1a8 <__aeabi_dsub>
    4914:	4642      	mov	r2, r8
    4916:	464b      	mov	r3, r9
    4918:	f7fb fdfe 	bl	518 <__aeabi_dmul>
    491c:	4602      	mov	r2, r0
    491e:	460b      	mov	r3, r1
    4920:	4620      	mov	r0, r4
    4922:	4629      	mov	r1, r5
    4924:	f7fb fc42 	bl	1ac <__adddf3>
    4928:	4604      	mov	r4, r0
    492a:	460d      	mov	r5, r1
    492c:	ec45 4b10 	vmov	d0, r4, r5
    4930:	b003      	add	sp, #12
    4932:	ecbd 8b04 	vpop	{d8-d9}
    4936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    493a:	4b1b      	ldr	r3, [pc, #108]	; (49a8 <__kernel_sin+0x150>)
    493c:	ec51 0b18 	vmov	r0, r1, d8
    4940:	2200      	movs	r2, #0
    4942:	f7fb fde9 	bl	518 <__aeabi_dmul>
    4946:	4632      	mov	r2, r6
    4948:	ec41 0b19 	vmov	d9, r0, r1
    494c:	463b      	mov	r3, r7
    494e:	4640      	mov	r0, r8
    4950:	4649      	mov	r1, r9
    4952:	f7fb fde1 	bl	518 <__aeabi_dmul>
    4956:	4602      	mov	r2, r0
    4958:	460b      	mov	r3, r1
    495a:	ec51 0b19 	vmov	r0, r1, d9
    495e:	f7fb fc23 	bl	1a8 <__aeabi_dsub>
    4962:	4652      	mov	r2, sl
    4964:	465b      	mov	r3, fp
    4966:	f7fb fdd7 	bl	518 <__aeabi_dmul>
    496a:	ec53 2b18 	vmov	r2, r3, d8
    496e:	f7fb fc1b 	bl	1a8 <__aeabi_dsub>
    4972:	a30b      	add	r3, pc, #44	; (adr r3, 49a0 <__kernel_sin+0x148>)
    4974:	e9d3 2300 	ldrd	r2, r3, [r3]
    4978:	4606      	mov	r6, r0
    497a:	460f      	mov	r7, r1
    497c:	4640      	mov	r0, r8
    497e:	4649      	mov	r1, r9
    4980:	f7fb fdca 	bl	518 <__aeabi_dmul>
    4984:	4602      	mov	r2, r0
    4986:	460b      	mov	r3, r1
    4988:	4630      	mov	r0, r6
    498a:	4639      	mov	r1, r7
    498c:	f7fb fc0e 	bl	1ac <__adddf3>
    4990:	4602      	mov	r2, r0
    4992:	460b      	mov	r3, r1
    4994:	4620      	mov	r0, r4
    4996:	4629      	mov	r1, r5
    4998:	f7fb fc06 	bl	1a8 <__aeabi_dsub>
    499c:	e7c4      	b.n	4928 <__kernel_sin+0xd0>
    499e:	bf00      	nop
    49a0:	55555549 	.word	0x55555549
    49a4:	3fc55555 	.word	0x3fc55555
    49a8:	3fe00000 	.word	0x3fe00000
    49ac:	5acfd57c 	.word	0x5acfd57c
    49b0:	3de5d93a 	.word	0x3de5d93a
    49b4:	8a2b9ceb 	.word	0x8a2b9ceb
    49b8:	3e5ae5e6 	.word	0x3e5ae5e6
    49bc:	57b1fe7d 	.word	0x57b1fe7d
    49c0:	3ec71de3 	.word	0x3ec71de3
    49c4:	19c161d5 	.word	0x19c161d5
    49c8:	3f2a01a0 	.word	0x3f2a01a0
    49cc:	1110f8a6 	.word	0x1110f8a6
    49d0:	3f811111 	.word	0x3f811111
    49d4:	00000000 	.word	0x00000000

000049d8 <nan>:
    49d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 49e0 <nan+0x8>
    49dc:	4770      	bx	lr
    49de:	bf00      	nop
    49e0:	00000000 	.word	0x00000000
    49e4:	7ff80000 	.word	0x7ff80000

000049e8 <scalbn>:
    49e8:	b570      	push	{r4, r5, r6, lr}
    49ea:	ec55 4b10 	vmov	r4, r5, d0
    49ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
    49f2:	4606      	mov	r6, r0
    49f4:	462b      	mov	r3, r5
    49f6:	b99a      	cbnz	r2, 4a20 <scalbn+0x38>
    49f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    49fc:	4323      	orrs	r3, r4
    49fe:	d036      	beq.n	4a6e <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x36>
    4a00:	4b39      	ldr	r3, [pc, #228]	; (4ae8 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0xb0>)
    4a02:	4629      	mov	r1, r5
    4a04:	ee10 0a10 	vmov	r0, s0
    4a08:	2200      	movs	r2, #0
    4a0a:	f7fb fd85 	bl	518 <__aeabi_dmul>
    4a0e:	4b37      	ldr	r3, [pc, #220]	; (4aec <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0xb4>)
    4a10:	429e      	cmp	r6, r3
    4a12:	4604      	mov	r4, r0
    4a14:	460d      	mov	r5, r1
    4a16:	da10      	bge.n	4a3a <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x2>
    4a18:	a32b      	add	r3, pc, #172	; (adr r3, 4ac8 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x90>)
    4a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a1e:	e03a      	b.n	4a96 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x5e>
    4a20:	f240 71ff 	movw	r1, #2047	; 0x7ff
    4a24:	428a      	cmp	r2, r1
    4a26:	d10c      	bne.n	4a42 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0xa>
    4a28:	ee10 2a10 	vmov	r2, s0
    4a2c:	4620      	mov	r0, r4
    4a2e:	4629      	mov	r1, r5
    4a30:	f7fb fbbc 	bl	1ac <__adddf3>
    4a34:	4604      	mov	r4, r0
    4a36:	460d      	mov	r5, r1
    4a38:	e019      	b.n	4a6e <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x36>
    4a3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
    4a3e:	460b      	mov	r3, r1
    4a40:	3a36      	subs	r2, #54	; 0x36
    4a42:	4432      	add	r2, r6
    4a44:	f240 71fe 	movw	r1, #2046	; 0x7fe
    4a48:	428a      	cmp	r2, r1
    4a4a:	dd08      	ble.n	4a5e <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x26>
    4a4c:	2d00      	cmp	r5, #0
    4a4e:	a120      	add	r1, pc, #128	; (adr r1, 4ad0 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x98>)
    4a50:	e9d1 0100 	ldrd	r0, r1, [r1]
    4a54:	da1c      	bge.n	4a90 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x58>
    4a56:	a120      	add	r1, pc, #128	; (adr r1, 4ad8 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0xa0>)
    4a58:	e9d1 0100 	ldrd	r0, r1, [r1]
    4a5c:	e018      	b.n	4a90 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x58>
    4a5e:	2a00      	cmp	r2, #0
    4a60:	dd08      	ble.n	4a74 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x3c>
    4a62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    4a66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    4a6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    4a6e:	ec45 4b10 	vmov	d0, r4, r5
    4a72:	bd70      	pop	{r4, r5, r6, pc}
    4a74:	f112 0f35 	cmn.w	r2, #53	; 0x35
    4a78:	da19      	bge.n	4aae <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x76>
    4a7a:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a7e:	429e      	cmp	r6, r3
    4a80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
    4a84:	dd0a      	ble.n	4a9c <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x64>
    4a86:	a112      	add	r1, pc, #72	; (adr r1, 4ad0 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x98>)
    4a88:	e9d1 0100 	ldrd	r0, r1, [r1]
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d1e2      	bne.n	4a56 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x1e>
    4a90:	a30f      	add	r3, pc, #60	; (adr r3, 4ad0 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x98>)
    4a92:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a96:	f7fb fd3f 	bl	518 <__aeabi_dmul>
    4a9a:	e7cb      	b.n	4a34 <scalbn+0x4c>
    4a9c:	a10a      	add	r1, pc, #40	; (adr r1, 4ac8 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x90>)
    4a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d0b8      	beq.n	4a18 <scalbn+0x30>
    4aa6:	a10e      	add	r1, pc, #56	; (adr r1, 4ae0 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0xa8>)
    4aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
    4aac:	e7b4      	b.n	4a18 <scalbn+0x30>
    4aae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    4ab2:	3236      	adds	r2, #54	; 0x36
    4ab4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    4ab8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
    4abc:	4620      	mov	r0, r4
    4abe:	4b0c      	ldr	r3, [pc, #48]	; (4af0 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0xb8>)
    4ac0:	2200      	movs	r2, #0
    4ac2:	e7e8      	b.n	4a96 <CONFIG_EI_WRAPPER_DATA_BUF_SIZE+0x5e>
    4ac4:	f3af 8000 	nop.w
    4ac8:	c2f8f359 	.word	0xc2f8f359
    4acc:	01a56e1f 	.word	0x01a56e1f
    4ad0:	8800759c 	.word	0x8800759c
    4ad4:	7e37e43c 	.word	0x7e37e43c
    4ad8:	8800759c 	.word	0x8800759c
    4adc:	fe37e43c 	.word	0xfe37e43c
    4ae0:	c2f8f359 	.word	0xc2f8f359
    4ae4:	81a56e1f 	.word	0x81a56e1f
    4ae8:	43500000 	.word	0x43500000
    4aec:	ffff3cb0 	.word	0xffff3cb0
    4af0:	3c900000 	.word	0x3c900000
    4af4:	00000000 	.word	0x00000000

00004af8 <_dtoa_r>:
    4af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4afc:	ed2d 8b04 	vpush	{d8-d9}
    4b00:	ec57 6b10 	vmov	r6, r7, d0
    4b04:	b093      	sub	sp, #76	; 0x4c
    4b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
    4b08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    4b0c:	9106      	str	r1, [sp, #24]
    4b0e:	ee10 aa10 	vmov	sl, s0
    4b12:	4604      	mov	r4, r0
    4b14:	9209      	str	r2, [sp, #36]	; 0x24
    4b16:	930c      	str	r3, [sp, #48]	; 0x30
    4b18:	46bb      	mov	fp, r7
    4b1a:	b975      	cbnz	r5, 4b3a <_dtoa_r+0x42>
    4b1c:	2010      	movs	r0, #16
    4b1e:	f011 f8cb 	bl	15cb8 <malloc>
    4b22:	4602      	mov	r2, r0
    4b24:	6260      	str	r0, [r4, #36]	; 0x24
    4b26:	b920      	cbnz	r0, 4b32 <_dtoa_r+0x3a>
    4b28:	4ba7      	ldr	r3, [pc, #668]	; (4dc8 <_dtoa_r+0x2d0>)
    4b2a:	21ea      	movs	r1, #234	; 0xea
    4b2c:	48a7      	ldr	r0, [pc, #668]	; (4dcc <_dtoa_r+0x2d4>)
    4b2e:	f011 f88b 	bl	15c48 <__assert_func>
    4b32:	e9c0 5501 	strd	r5, r5, [r0, #4]
    4b36:	6005      	str	r5, [r0, #0]
    4b38:	60c5      	str	r5, [r0, #12]
    4b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b3c:	6819      	ldr	r1, [r3, #0]
    4b3e:	b151      	cbz	r1, 4b56 <_dtoa_r+0x5e>
    4b40:	685a      	ldr	r2, [r3, #4]
    4b42:	604a      	str	r2, [r1, #4]
    4b44:	2301      	movs	r3, #1
    4b46:	4093      	lsls	r3, r2
    4b48:	608b      	str	r3, [r1, #8]
    4b4a:	4620      	mov	r0, r4
    4b4c:	f012 f918 	bl	16d80 <_Bfree>
    4b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b52:	2200      	movs	r2, #0
    4b54:	601a      	str	r2, [r3, #0]
    4b56:	1e3b      	subs	r3, r7, #0
    4b58:	bfaa      	itet	ge
    4b5a:	2300      	movge	r3, #0
    4b5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
    4b60:	f8c8 3000 	strge.w	r3, [r8]
    4b64:	4b9a      	ldr	r3, [pc, #616]	; (4dd0 <_dtoa_r+0x2d8>)
    4b66:	bfbc      	itt	lt
    4b68:	2201      	movlt	r2, #1
    4b6a:	f8c8 2000 	strlt.w	r2, [r8]
    4b6e:	ea33 030b 	bics.w	r3, r3, fp
    4b72:	d11b      	bne.n	4bac <_dtoa_r+0xb4>
    4b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b76:	f242 730f 	movw	r3, #9999	; 0x270f
    4b7a:	6013      	str	r3, [r2, #0]
    4b7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
    4b80:	4333      	orrs	r3, r6
    4b82:	f000 8592 	beq.w	56aa <_dtoa_r+0xbb2>
    4b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4b88:	b963      	cbnz	r3, 4ba4 <_dtoa_r+0xac>
    4b8a:	4b92      	ldr	r3, [pc, #584]	; (4dd4 <_dtoa_r+0x2dc>)
    4b8c:	e022      	b.n	4bd4 <_dtoa_r+0xdc>
    4b8e:	4b92      	ldr	r3, [pc, #584]	; (4dd8 <_dtoa_r+0x2e0>)
    4b90:	9301      	str	r3, [sp, #4]
    4b92:	3308      	adds	r3, #8
    4b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
    4b96:	6013      	str	r3, [r2, #0]
    4b98:	9801      	ldr	r0, [sp, #4]
    4b9a:	b013      	add	sp, #76	; 0x4c
    4b9c:	ecbd 8b04 	vpop	{d8-d9}
    4ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ba4:	4b8b      	ldr	r3, [pc, #556]	; (4dd4 <_dtoa_r+0x2dc>)
    4ba6:	9301      	str	r3, [sp, #4]
    4ba8:	3303      	adds	r3, #3
    4baa:	e7f3      	b.n	4b94 <_dtoa_r+0x9c>
    4bac:	2200      	movs	r2, #0
    4bae:	2300      	movs	r3, #0
    4bb0:	4650      	mov	r0, sl
    4bb2:	4659      	mov	r1, fp
    4bb4:	f7fb ff18 	bl	9e8 <__aeabi_dcmpeq>
    4bb8:	ec4b ab19 	vmov	d9, sl, fp
    4bbc:	4680      	mov	r8, r0
    4bbe:	b158      	cbz	r0, 4bd8 <_dtoa_r+0xe0>
    4bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4bc2:	2301      	movs	r3, #1
    4bc4:	6013      	str	r3, [r2, #0]
    4bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4bc8:	2b00      	cmp	r3, #0
    4bca:	f000 856b 	beq.w	56a4 <_dtoa_r+0xbac>
    4bce:	4883      	ldr	r0, [pc, #524]	; (4ddc <_dtoa_r+0x2e4>)
    4bd0:	6018      	str	r0, [r3, #0]
    4bd2:	1e43      	subs	r3, r0, #1
    4bd4:	9301      	str	r3, [sp, #4]
    4bd6:	e7df      	b.n	4b98 <_dtoa_r+0xa0>
    4bd8:	ec4b ab10 	vmov	d0, sl, fp
    4bdc:	aa10      	add	r2, sp, #64	; 0x40
    4bde:	a911      	add	r1, sp, #68	; 0x44
    4be0:	4620      	mov	r0, r4
    4be2:	f012 fb49 	bl	17278 <__d2b>
    4be6:	f3cb 550a 	ubfx	r5, fp, #20, #11
    4bea:	ee08 0a10 	vmov	s16, r0
    4bee:	2d00      	cmp	r5, #0
    4bf0:	f000 8084 	beq.w	4cfc <_dtoa_r+0x204>
    4bf4:	ee19 3a90 	vmov	r3, s19
    4bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4bfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
    4c00:	4656      	mov	r6, sl
    4c02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    4c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    4c0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    4c0e:	4b74      	ldr	r3, [pc, #464]	; (4de0 <_dtoa_r+0x2e8>)
    4c10:	2200      	movs	r2, #0
    4c12:	4630      	mov	r0, r6
    4c14:	4639      	mov	r1, r7
    4c16:	f7fb fac7 	bl	1a8 <__aeabi_dsub>
    4c1a:	a365      	add	r3, pc, #404	; (adr r3, 4db0 <_dtoa_r+0x2b8>)
    4c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c20:	f7fb fc7a 	bl	518 <__aeabi_dmul>
    4c24:	a364      	add	r3, pc, #400	; (adr r3, 4db8 <_dtoa_r+0x2c0>)
    4c26:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c2a:	f7fb fabf 	bl	1ac <__adddf3>
    4c2e:	4606      	mov	r6, r0
    4c30:	4628      	mov	r0, r5
    4c32:	460f      	mov	r7, r1
    4c34:	f7fb fc06 	bl	444 <__aeabi_i2d>
    4c38:	a361      	add	r3, pc, #388	; (adr r3, 4dc0 <_dtoa_r+0x2c8>)
    4c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c3e:	f7fb fc6b 	bl	518 <__aeabi_dmul>
    4c42:	4602      	mov	r2, r0
    4c44:	460b      	mov	r3, r1
    4c46:	4630      	mov	r0, r6
    4c48:	4639      	mov	r1, r7
    4c4a:	f7fb faaf 	bl	1ac <__adddf3>
    4c4e:	4606      	mov	r6, r0
    4c50:	460f      	mov	r7, r1
    4c52:	f7fc f809 	bl	c68 <__aeabi_d2iz>
    4c56:	2200      	movs	r2, #0
    4c58:	9000      	str	r0, [sp, #0]
    4c5a:	2300      	movs	r3, #0
    4c5c:	4630      	mov	r0, r6
    4c5e:	4639      	mov	r1, r7
    4c60:	f7fb fecc 	bl	9fc <__aeabi_dcmplt>
    4c64:	b150      	cbz	r0, 4c7c <_dtoa_r+0x184>
    4c66:	9800      	ldr	r0, [sp, #0]
    4c68:	f7fb fbec 	bl	444 <__aeabi_i2d>
    4c6c:	4632      	mov	r2, r6
    4c6e:	463b      	mov	r3, r7
    4c70:	f7fb feba 	bl	9e8 <__aeabi_dcmpeq>
    4c74:	b910      	cbnz	r0, 4c7c <_dtoa_r+0x184>
    4c76:	9b00      	ldr	r3, [sp, #0]
    4c78:	3b01      	subs	r3, #1
    4c7a:	9300      	str	r3, [sp, #0]
    4c7c:	9b00      	ldr	r3, [sp, #0]
    4c7e:	2b16      	cmp	r3, #22
    4c80:	d85a      	bhi.n	4d38 <_dtoa_r+0x240>
    4c82:	9a00      	ldr	r2, [sp, #0]
    4c84:	4b57      	ldr	r3, [pc, #348]	; (4de4 <_dtoa_r+0x2ec>)
    4c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c8e:	ec51 0b19 	vmov	r0, r1, d9
    4c92:	f7fb feb3 	bl	9fc <__aeabi_dcmplt>
    4c96:	2800      	cmp	r0, #0
    4c98:	d050      	beq.n	4d3c <_dtoa_r+0x244>
    4c9a:	9b00      	ldr	r3, [sp, #0]
    4c9c:	3b01      	subs	r3, #1
    4c9e:	9300      	str	r3, [sp, #0]
    4ca0:	2300      	movs	r3, #0
    4ca2:	930b      	str	r3, [sp, #44]	; 0x2c
    4ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4ca6:	1b5d      	subs	r5, r3, r5
    4ca8:	1e6b      	subs	r3, r5, #1
    4caa:	9305      	str	r3, [sp, #20]
    4cac:	bf45      	ittet	mi
    4cae:	f1c5 0301 	rsbmi	r3, r5, #1
    4cb2:	9304      	strmi	r3, [sp, #16]
    4cb4:	2300      	movpl	r3, #0
    4cb6:	2300      	movmi	r3, #0
    4cb8:	bf4c      	ite	mi
    4cba:	9305      	strmi	r3, [sp, #20]
    4cbc:	9304      	strpl	r3, [sp, #16]
    4cbe:	9b00      	ldr	r3, [sp, #0]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	db3d      	blt.n	4d40 <_dtoa_r+0x248>
    4cc4:	9b05      	ldr	r3, [sp, #20]
    4cc6:	9a00      	ldr	r2, [sp, #0]
    4cc8:	920a      	str	r2, [sp, #40]	; 0x28
    4cca:	4413      	add	r3, r2
    4ccc:	9305      	str	r3, [sp, #20]
    4cce:	2300      	movs	r3, #0
    4cd0:	9307      	str	r3, [sp, #28]
    4cd2:	9b06      	ldr	r3, [sp, #24]
    4cd4:	2b09      	cmp	r3, #9
    4cd6:	f200 8089 	bhi.w	4dec <_dtoa_r+0x2f4>
    4cda:	2b05      	cmp	r3, #5
    4cdc:	bfc4      	itt	gt
    4cde:	3b04      	subgt	r3, #4
    4ce0:	9306      	strgt	r3, [sp, #24]
    4ce2:	9b06      	ldr	r3, [sp, #24]
    4ce4:	f1a3 0302 	sub.w	r3, r3, #2
    4ce8:	bfcc      	ite	gt
    4cea:	2500      	movgt	r5, #0
    4cec:	2501      	movle	r5, #1
    4cee:	2b03      	cmp	r3, #3
    4cf0:	f200 8087 	bhi.w	4e02 <_dtoa_r+0x30a>
    4cf4:	e8df f003 	tbb	[pc, r3]
    4cf8:	59383a2d 	.word	0x59383a2d
    4cfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
    4d00:	441d      	add	r5, r3
    4d02:	f205 4332 	addw	r3, r5, #1074	; 0x432
    4d06:	2b20      	cmp	r3, #32
    4d08:	bfc1      	itttt	gt
    4d0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    4d0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
    4d12:	fa0b f303 	lslgt.w	r3, fp, r3
    4d16:	fa26 f000 	lsrgt.w	r0, r6, r0
    4d1a:	bfda      	itte	le
    4d1c:	f1c3 0320 	rsble	r3, r3, #32
    4d20:	fa06 f003 	lslle.w	r0, r6, r3
    4d24:	4318      	orrgt	r0, r3
    4d26:	f7fb fb7d 	bl	424 <__aeabi_ui2d>
    4d2a:	2301      	movs	r3, #1
    4d2c:	4606      	mov	r6, r0
    4d2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
    4d32:	3d01      	subs	r5, #1
    4d34:	930e      	str	r3, [sp, #56]	; 0x38
    4d36:	e76a      	b.n	4c0e <_dtoa_r+0x116>
    4d38:	2301      	movs	r3, #1
    4d3a:	e7b2      	b.n	4ca2 <_dtoa_r+0x1aa>
    4d3c:	900b      	str	r0, [sp, #44]	; 0x2c
    4d3e:	e7b1      	b.n	4ca4 <_dtoa_r+0x1ac>
    4d40:	9b04      	ldr	r3, [sp, #16]
    4d42:	9a00      	ldr	r2, [sp, #0]
    4d44:	1a9b      	subs	r3, r3, r2
    4d46:	9304      	str	r3, [sp, #16]
    4d48:	4253      	negs	r3, r2
    4d4a:	9307      	str	r3, [sp, #28]
    4d4c:	2300      	movs	r3, #0
    4d4e:	930a      	str	r3, [sp, #40]	; 0x28
    4d50:	e7bf      	b.n	4cd2 <_dtoa_r+0x1da>
    4d52:	2300      	movs	r3, #0
    4d54:	9308      	str	r3, [sp, #32]
    4d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4d58:	2b00      	cmp	r3, #0
    4d5a:	dc55      	bgt.n	4e08 <_dtoa_r+0x310>
    4d5c:	2301      	movs	r3, #1
    4d5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    4d62:	461a      	mov	r2, r3
    4d64:	9209      	str	r2, [sp, #36]	; 0x24
    4d66:	e00c      	b.n	4d82 <_dtoa_r+0x28a>
    4d68:	2301      	movs	r3, #1
    4d6a:	e7f3      	b.n	4d54 <_dtoa_r+0x25c>
    4d6c:	2300      	movs	r3, #0
    4d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4d70:	9308      	str	r3, [sp, #32]
    4d72:	9b00      	ldr	r3, [sp, #0]
    4d74:	4413      	add	r3, r2
    4d76:	9302      	str	r3, [sp, #8]
    4d78:	3301      	adds	r3, #1
    4d7a:	2b01      	cmp	r3, #1
    4d7c:	9303      	str	r3, [sp, #12]
    4d7e:	bfb8      	it	lt
    4d80:	2301      	movlt	r3, #1
    4d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4d84:	2200      	movs	r2, #0
    4d86:	6042      	str	r2, [r0, #4]
    4d88:	2204      	movs	r2, #4
    4d8a:	f102 0614 	add.w	r6, r2, #20
    4d8e:	429e      	cmp	r6, r3
    4d90:	6841      	ldr	r1, [r0, #4]
    4d92:	d93d      	bls.n	4e10 <_dtoa_r+0x318>
    4d94:	4620      	mov	r0, r4
    4d96:	f011 ffb3 	bl	16d00 <_Balloc>
    4d9a:	9001      	str	r0, [sp, #4]
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d13b      	bne.n	4e18 <_dtoa_r+0x320>
    4da0:	4b11      	ldr	r3, [pc, #68]	; (4de8 <_dtoa_r+0x2f0>)
    4da2:	4602      	mov	r2, r0
    4da4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4da8:	e6c0      	b.n	4b2c <_dtoa_r+0x34>
    4daa:	2301      	movs	r3, #1
    4dac:	e7df      	b.n	4d6e <_dtoa_r+0x276>
    4dae:	bf00      	nop
    4db0:	636f4361 	.word	0x636f4361
    4db4:	3fd287a7 	.word	0x3fd287a7
    4db8:	8b60c8b3 	.word	0x8b60c8b3
    4dbc:	3fc68a28 	.word	0x3fc68a28
    4dc0:	509f79fb 	.word	0x509f79fb
    4dc4:	3fd34413 	.word	0x3fd34413
    4dc8:	0003eebc 	.word	0x0003eebc
    4dcc:	0003eed3 	.word	0x0003eed3
    4dd0:	7ff00000 	.word	0x7ff00000
    4dd4:	0003eeb8 	.word	0x0003eeb8
    4dd8:	0003eeaf 	.word	0x0003eeaf
    4ddc:	0003d0a0 	.word	0x0003d0a0
    4de0:	3ff80000 	.word	0x3ff80000
    4de4:	0001d400 	.word	0x0001d400
    4de8:	0003ef2f 	.word	0x0003ef2f
    4dec:	2501      	movs	r5, #1
    4dee:	2300      	movs	r3, #0
    4df0:	9306      	str	r3, [sp, #24]
    4df2:	9508      	str	r5, [sp, #32]
    4df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4df8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    4dfc:	2200      	movs	r2, #0
    4dfe:	2312      	movs	r3, #18
    4e00:	e7b0      	b.n	4d64 <_dtoa_r+0x26c>
    4e02:	2301      	movs	r3, #1
    4e04:	9308      	str	r3, [sp, #32]
    4e06:	e7f5      	b.n	4df4 <_dtoa_r+0x2fc>
    4e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    4e0e:	e7b8      	b.n	4d82 <_dtoa_r+0x28a>
    4e10:	3101      	adds	r1, #1
    4e12:	6041      	str	r1, [r0, #4]
    4e14:	0052      	lsls	r2, r2, #1
    4e16:	e7b8      	b.n	4d8a <_dtoa_r+0x292>
    4e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e1a:	9a01      	ldr	r2, [sp, #4]
    4e1c:	601a      	str	r2, [r3, #0]
    4e1e:	9b03      	ldr	r3, [sp, #12]
    4e20:	2b0e      	cmp	r3, #14
    4e22:	f200 809d 	bhi.w	4f60 <_dtoa_r+0x468>
    4e26:	2d00      	cmp	r5, #0
    4e28:	f000 809a 	beq.w	4f60 <_dtoa_r+0x468>
    4e2c:	9b00      	ldr	r3, [sp, #0]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	dd32      	ble.n	4e98 <_dtoa_r+0x3a0>
    4e32:	4ab7      	ldr	r2, [pc, #732]	; (5110 <_dtoa_r+0x618>)
    4e34:	f003 030f 	and.w	r3, r3, #15
    4e38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
    4e40:	9b00      	ldr	r3, [sp, #0]
    4e42:	05d8      	lsls	r0, r3, #23
    4e44:	ea4f 1723 	mov.w	r7, r3, asr #4
    4e48:	d516      	bpl.n	4e78 <_dtoa_r+0x380>
    4e4a:	4bb2      	ldr	r3, [pc, #712]	; (5114 <_dtoa_r+0x61c>)
    4e4c:	ec51 0b19 	vmov	r0, r1, d9
    4e50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    4e54:	f7fb fc8a 	bl	76c <__aeabi_ddiv>
    4e58:	f007 070f 	and.w	r7, r7, #15
    4e5c:	4682      	mov	sl, r0
    4e5e:	468b      	mov	fp, r1
    4e60:	2503      	movs	r5, #3
    4e62:	4eac      	ldr	r6, [pc, #688]	; (5114 <_dtoa_r+0x61c>)
    4e64:	b957      	cbnz	r7, 4e7c <_dtoa_r+0x384>
    4e66:	4642      	mov	r2, r8
    4e68:	464b      	mov	r3, r9
    4e6a:	4650      	mov	r0, sl
    4e6c:	4659      	mov	r1, fp
    4e6e:	f7fb fc7d 	bl	76c <__aeabi_ddiv>
    4e72:	4682      	mov	sl, r0
    4e74:	468b      	mov	fp, r1
    4e76:	e028      	b.n	4eca <_dtoa_r+0x3d2>
    4e78:	2502      	movs	r5, #2
    4e7a:	e7f2      	b.n	4e62 <_dtoa_r+0x36a>
    4e7c:	07f9      	lsls	r1, r7, #31
    4e7e:	d508      	bpl.n	4e92 <_dtoa_r+0x39a>
    4e80:	4640      	mov	r0, r8
    4e82:	4649      	mov	r1, r9
    4e84:	e9d6 2300 	ldrd	r2, r3, [r6]
    4e88:	f7fb fb46 	bl	518 <__aeabi_dmul>
    4e8c:	3501      	adds	r5, #1
    4e8e:	4680      	mov	r8, r0
    4e90:	4689      	mov	r9, r1
    4e92:	107f      	asrs	r7, r7, #1
    4e94:	3608      	adds	r6, #8
    4e96:	e7e5      	b.n	4e64 <_dtoa_r+0x36c>
    4e98:	f000 809b 	beq.w	4fd2 <_dtoa_r+0x4da>
    4e9c:	9b00      	ldr	r3, [sp, #0]
    4e9e:	4f9d      	ldr	r7, [pc, #628]	; (5114 <_dtoa_r+0x61c>)
    4ea0:	425e      	negs	r6, r3
    4ea2:	4b9b      	ldr	r3, [pc, #620]	; (5110 <_dtoa_r+0x618>)
    4ea4:	f006 020f 	and.w	r2, r6, #15
    4ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4eac:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eb0:	ec51 0b19 	vmov	r0, r1, d9
    4eb4:	f7fb fb30 	bl	518 <__aeabi_dmul>
    4eb8:	1136      	asrs	r6, r6, #4
    4eba:	4682      	mov	sl, r0
    4ebc:	468b      	mov	fp, r1
    4ebe:	2300      	movs	r3, #0
    4ec0:	2502      	movs	r5, #2
    4ec2:	2e00      	cmp	r6, #0
    4ec4:	d17a      	bne.n	4fbc <_dtoa_r+0x4c4>
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d1d3      	bne.n	4e72 <_dtoa_r+0x37a>
    4eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ecc:	2b00      	cmp	r3, #0
    4ece:	f000 8082 	beq.w	4fd6 <_dtoa_r+0x4de>
    4ed2:	4b91      	ldr	r3, [pc, #580]	; (5118 <_dtoa_r+0x620>)
    4ed4:	2200      	movs	r2, #0
    4ed6:	4650      	mov	r0, sl
    4ed8:	4659      	mov	r1, fp
    4eda:	f7fb fd8f 	bl	9fc <__aeabi_dcmplt>
    4ede:	2800      	cmp	r0, #0
    4ee0:	d079      	beq.n	4fd6 <_dtoa_r+0x4de>
    4ee2:	9b03      	ldr	r3, [sp, #12]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d076      	beq.n	4fd6 <_dtoa_r+0x4de>
    4ee8:	9b02      	ldr	r3, [sp, #8]
    4eea:	2b00      	cmp	r3, #0
    4eec:	dd36      	ble.n	4f5c <_dtoa_r+0x464>
    4eee:	9b00      	ldr	r3, [sp, #0]
    4ef0:	4650      	mov	r0, sl
    4ef2:	4659      	mov	r1, fp
    4ef4:	1e5f      	subs	r7, r3, #1
    4ef6:	2200      	movs	r2, #0
    4ef8:	4b88      	ldr	r3, [pc, #544]	; (511c <_dtoa_r+0x624>)
    4efa:	f7fb fb0d 	bl	518 <__aeabi_dmul>
    4efe:	9e02      	ldr	r6, [sp, #8]
    4f00:	4682      	mov	sl, r0
    4f02:	468b      	mov	fp, r1
    4f04:	3501      	adds	r5, #1
    4f06:	4628      	mov	r0, r5
    4f08:	f7fb fa9c 	bl	444 <__aeabi_i2d>
    4f0c:	4652      	mov	r2, sl
    4f0e:	465b      	mov	r3, fp
    4f10:	f7fb fb02 	bl	518 <__aeabi_dmul>
    4f14:	4b82      	ldr	r3, [pc, #520]	; (5120 <_dtoa_r+0x628>)
    4f16:	2200      	movs	r2, #0
    4f18:	f7fb f948 	bl	1ac <__adddf3>
    4f1c:	46d0      	mov	r8, sl
    4f1e:	46d9      	mov	r9, fp
    4f20:	4682      	mov	sl, r0
    4f22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
    4f26:	2e00      	cmp	r6, #0
    4f28:	d158      	bne.n	4fdc <_dtoa_r+0x4e4>
    4f2a:	4b7e      	ldr	r3, [pc, #504]	; (5124 <_dtoa_r+0x62c>)
    4f2c:	2200      	movs	r2, #0
    4f2e:	4640      	mov	r0, r8
    4f30:	4649      	mov	r1, r9
    4f32:	f7fb f939 	bl	1a8 <__aeabi_dsub>
    4f36:	4652      	mov	r2, sl
    4f38:	465b      	mov	r3, fp
    4f3a:	4680      	mov	r8, r0
    4f3c:	4689      	mov	r9, r1
    4f3e:	f7fb fd7b 	bl	a38 <__aeabi_dcmpgt>
    4f42:	2800      	cmp	r0, #0
    4f44:	f040 8295 	bne.w	5472 <_dtoa_r+0x97a>
    4f48:	4652      	mov	r2, sl
    4f4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
    4f4e:	4640      	mov	r0, r8
    4f50:	4649      	mov	r1, r9
    4f52:	f7fb fd53 	bl	9fc <__aeabi_dcmplt>
    4f56:	2800      	cmp	r0, #0
    4f58:	f040 8289 	bne.w	546e <_dtoa_r+0x976>
    4f5c:	ec5b ab19 	vmov	sl, fp, d9
    4f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4f62:	2b00      	cmp	r3, #0
    4f64:	f2c0 8148 	blt.w	51f8 <_dtoa_r+0x700>
    4f68:	9a00      	ldr	r2, [sp, #0]
    4f6a:	2a0e      	cmp	r2, #14
    4f6c:	f300 8144 	bgt.w	51f8 <_dtoa_r+0x700>
    4f70:	4b67      	ldr	r3, [pc, #412]	; (5110 <_dtoa_r+0x618>)
    4f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4f76:	e9d3 8900 	ldrd	r8, r9, [r3]
    4f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	f280 80d5 	bge.w	512c <_dtoa_r+0x634>
    4f82:	9b03      	ldr	r3, [sp, #12]
    4f84:	2b00      	cmp	r3, #0
    4f86:	f300 80d1 	bgt.w	512c <_dtoa_r+0x634>
    4f8a:	f040 826f 	bne.w	546c <_dtoa_r+0x974>
    4f8e:	4b65      	ldr	r3, [pc, #404]	; (5124 <_dtoa_r+0x62c>)
    4f90:	2200      	movs	r2, #0
    4f92:	4640      	mov	r0, r8
    4f94:	4649      	mov	r1, r9
    4f96:	f7fb fabf 	bl	518 <__aeabi_dmul>
    4f9a:	4652      	mov	r2, sl
    4f9c:	465b      	mov	r3, fp
    4f9e:	f7fb fd41 	bl	a24 <__aeabi_dcmpge>
    4fa2:	9e03      	ldr	r6, [sp, #12]
    4fa4:	4637      	mov	r7, r6
    4fa6:	2800      	cmp	r0, #0
    4fa8:	f040 8245 	bne.w	5436 <_dtoa_r+0x93e>
    4fac:	9d01      	ldr	r5, [sp, #4]
    4fae:	2331      	movs	r3, #49	; 0x31
    4fb0:	f805 3b01 	strb.w	r3, [r5], #1
    4fb4:	9b00      	ldr	r3, [sp, #0]
    4fb6:	3301      	adds	r3, #1
    4fb8:	9300      	str	r3, [sp, #0]
    4fba:	e240      	b.n	543e <_dtoa_r+0x946>
    4fbc:	07f2      	lsls	r2, r6, #31
    4fbe:	d505      	bpl.n	4fcc <_dtoa_r+0x4d4>
    4fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
    4fc4:	f7fb faa8 	bl	518 <__aeabi_dmul>
    4fc8:	3501      	adds	r5, #1
    4fca:	2301      	movs	r3, #1
    4fcc:	1076      	asrs	r6, r6, #1
    4fce:	3708      	adds	r7, #8
    4fd0:	e777      	b.n	4ec2 <_dtoa_r+0x3ca>
    4fd2:	2502      	movs	r5, #2
    4fd4:	e779      	b.n	4eca <_dtoa_r+0x3d2>
    4fd6:	9f00      	ldr	r7, [sp, #0]
    4fd8:	9e03      	ldr	r6, [sp, #12]
    4fda:	e794      	b.n	4f06 <_dtoa_r+0x40e>
    4fdc:	9901      	ldr	r1, [sp, #4]
    4fde:	4b4c      	ldr	r3, [pc, #304]	; (5110 <_dtoa_r+0x618>)
    4fe0:	4431      	add	r1, r6
    4fe2:	910d      	str	r1, [sp, #52]	; 0x34
    4fe4:	9908      	ldr	r1, [sp, #32]
    4fe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    4fea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    4fee:	2900      	cmp	r1, #0
    4ff0:	d043      	beq.n	507a <_dtoa_r+0x582>
    4ff2:	494d      	ldr	r1, [pc, #308]	; (5128 <_dtoa_r+0x630>)
    4ff4:	2000      	movs	r0, #0
    4ff6:	f7fb fbb9 	bl	76c <__aeabi_ddiv>
    4ffa:	4652      	mov	r2, sl
    4ffc:	465b      	mov	r3, fp
    4ffe:	f7fb f8d3 	bl	1a8 <__aeabi_dsub>
    5002:	9d01      	ldr	r5, [sp, #4]
    5004:	4682      	mov	sl, r0
    5006:	468b      	mov	fp, r1
    5008:	4649      	mov	r1, r9
    500a:	4640      	mov	r0, r8
    500c:	f7fb fe2c 	bl	c68 <__aeabi_d2iz>
    5010:	4606      	mov	r6, r0
    5012:	f7fb fa17 	bl	444 <__aeabi_i2d>
    5016:	4602      	mov	r2, r0
    5018:	460b      	mov	r3, r1
    501a:	4640      	mov	r0, r8
    501c:	4649      	mov	r1, r9
    501e:	f7fb f8c3 	bl	1a8 <__aeabi_dsub>
    5022:	3630      	adds	r6, #48	; 0x30
    5024:	f805 6b01 	strb.w	r6, [r5], #1
    5028:	4652      	mov	r2, sl
    502a:	465b      	mov	r3, fp
    502c:	4680      	mov	r8, r0
    502e:	4689      	mov	r9, r1
    5030:	f7fb fce4 	bl	9fc <__aeabi_dcmplt>
    5034:	2800      	cmp	r0, #0
    5036:	d163      	bne.n	5100 <_dtoa_r+0x608>
    5038:	4642      	mov	r2, r8
    503a:	464b      	mov	r3, r9
    503c:	4936      	ldr	r1, [pc, #216]	; (5118 <_dtoa_r+0x620>)
    503e:	2000      	movs	r0, #0
    5040:	f7fb f8b2 	bl	1a8 <__aeabi_dsub>
    5044:	4652      	mov	r2, sl
    5046:	465b      	mov	r3, fp
    5048:	f7fb fcd8 	bl	9fc <__aeabi_dcmplt>
    504c:	2800      	cmp	r0, #0
    504e:	f040 80b5 	bne.w	51bc <_dtoa_r+0x6c4>
    5052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5054:	429d      	cmp	r5, r3
    5056:	d081      	beq.n	4f5c <_dtoa_r+0x464>
    5058:	4b30      	ldr	r3, [pc, #192]	; (511c <_dtoa_r+0x624>)
    505a:	2200      	movs	r2, #0
    505c:	4650      	mov	r0, sl
    505e:	4659      	mov	r1, fp
    5060:	f7fb fa5a 	bl	518 <__aeabi_dmul>
    5064:	4b2d      	ldr	r3, [pc, #180]	; (511c <_dtoa_r+0x624>)
    5066:	4682      	mov	sl, r0
    5068:	468b      	mov	fp, r1
    506a:	4640      	mov	r0, r8
    506c:	4649      	mov	r1, r9
    506e:	2200      	movs	r2, #0
    5070:	f7fb fa52 	bl	518 <__aeabi_dmul>
    5074:	4680      	mov	r8, r0
    5076:	4689      	mov	r9, r1
    5078:	e7c6      	b.n	5008 <_dtoa_r+0x510>
    507a:	4650      	mov	r0, sl
    507c:	4659      	mov	r1, fp
    507e:	f7fb fa4b 	bl	518 <__aeabi_dmul>
    5082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5084:	9d01      	ldr	r5, [sp, #4]
    5086:	930f      	str	r3, [sp, #60]	; 0x3c
    5088:	4682      	mov	sl, r0
    508a:	468b      	mov	fp, r1
    508c:	4649      	mov	r1, r9
    508e:	4640      	mov	r0, r8
    5090:	f7fb fdea 	bl	c68 <__aeabi_d2iz>
    5094:	4606      	mov	r6, r0
    5096:	f7fb f9d5 	bl	444 <__aeabi_i2d>
    509a:	3630      	adds	r6, #48	; 0x30
    509c:	4602      	mov	r2, r0
    509e:	460b      	mov	r3, r1
    50a0:	4640      	mov	r0, r8
    50a2:	4649      	mov	r1, r9
    50a4:	f7fb f880 	bl	1a8 <__aeabi_dsub>
    50a8:	f805 6b01 	strb.w	r6, [r5], #1
    50ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    50ae:	429d      	cmp	r5, r3
    50b0:	4680      	mov	r8, r0
    50b2:	4689      	mov	r9, r1
    50b4:	f04f 0200 	mov.w	r2, #0
    50b8:	d124      	bne.n	5104 <_dtoa_r+0x60c>
    50ba:	4b1b      	ldr	r3, [pc, #108]	; (5128 <_dtoa_r+0x630>)
    50bc:	4650      	mov	r0, sl
    50be:	4659      	mov	r1, fp
    50c0:	f7fb f874 	bl	1ac <__adddf3>
    50c4:	4602      	mov	r2, r0
    50c6:	460b      	mov	r3, r1
    50c8:	4640      	mov	r0, r8
    50ca:	4649      	mov	r1, r9
    50cc:	f7fb fcb4 	bl	a38 <__aeabi_dcmpgt>
    50d0:	2800      	cmp	r0, #0
    50d2:	d173      	bne.n	51bc <_dtoa_r+0x6c4>
    50d4:	4652      	mov	r2, sl
    50d6:	465b      	mov	r3, fp
    50d8:	4913      	ldr	r1, [pc, #76]	; (5128 <_dtoa_r+0x630>)
    50da:	2000      	movs	r0, #0
    50dc:	f7fb f864 	bl	1a8 <__aeabi_dsub>
    50e0:	4602      	mov	r2, r0
    50e2:	460b      	mov	r3, r1
    50e4:	4640      	mov	r0, r8
    50e6:	4649      	mov	r1, r9
    50e8:	f7fb fc88 	bl	9fc <__aeabi_dcmplt>
    50ec:	2800      	cmp	r0, #0
    50ee:	f43f af35 	beq.w	4f5c <_dtoa_r+0x464>
    50f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    50f4:	1e6b      	subs	r3, r5, #1
    50f6:	930f      	str	r3, [sp, #60]	; 0x3c
    50f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    50fc:	2b30      	cmp	r3, #48	; 0x30
    50fe:	d0f8      	beq.n	50f2 <_dtoa_r+0x5fa>
    5100:	9700      	str	r7, [sp, #0]
    5102:	e049      	b.n	5198 <_dtoa_r+0x6a0>
    5104:	4b05      	ldr	r3, [pc, #20]	; (511c <_dtoa_r+0x624>)
    5106:	f7fb fa07 	bl	518 <__aeabi_dmul>
    510a:	4680      	mov	r8, r0
    510c:	4689      	mov	r9, r1
    510e:	e7bd      	b.n	508c <_dtoa_r+0x594>
    5110:	0001d400 	.word	0x0001d400
    5114:	0001d3d8 	.word	0x0001d3d8
    5118:	3ff00000 	.word	0x3ff00000
    511c:	40240000 	.word	0x40240000
    5120:	401c0000 	.word	0x401c0000
    5124:	40140000 	.word	0x40140000
    5128:	3fe00000 	.word	0x3fe00000
    512c:	9d01      	ldr	r5, [sp, #4]
    512e:	4656      	mov	r6, sl
    5130:	465f      	mov	r7, fp
    5132:	4642      	mov	r2, r8
    5134:	464b      	mov	r3, r9
    5136:	4630      	mov	r0, r6
    5138:	4639      	mov	r1, r7
    513a:	f7fb fb17 	bl	76c <__aeabi_ddiv>
    513e:	f7fb fd93 	bl	c68 <__aeabi_d2iz>
    5142:	4682      	mov	sl, r0
    5144:	f7fb f97e 	bl	444 <__aeabi_i2d>
    5148:	4642      	mov	r2, r8
    514a:	464b      	mov	r3, r9
    514c:	f7fb f9e4 	bl	518 <__aeabi_dmul>
    5150:	4602      	mov	r2, r0
    5152:	460b      	mov	r3, r1
    5154:	4630      	mov	r0, r6
    5156:	4639      	mov	r1, r7
    5158:	f10a 0630 	add.w	r6, sl, #48	; 0x30
    515c:	f7fb f824 	bl	1a8 <__aeabi_dsub>
    5160:	f805 6b01 	strb.w	r6, [r5], #1
    5164:	9e01      	ldr	r6, [sp, #4]
    5166:	9f03      	ldr	r7, [sp, #12]
    5168:	1bae      	subs	r6, r5, r6
    516a:	42b7      	cmp	r7, r6
    516c:	4602      	mov	r2, r0
    516e:	460b      	mov	r3, r1
    5170:	d135      	bne.n	51de <_dtoa_r+0x6e6>
    5172:	f7fb f81b 	bl	1ac <__adddf3>
    5176:	4642      	mov	r2, r8
    5178:	464b      	mov	r3, r9
    517a:	4606      	mov	r6, r0
    517c:	460f      	mov	r7, r1
    517e:	f7fb fc5b 	bl	a38 <__aeabi_dcmpgt>
    5182:	b9d0      	cbnz	r0, 51ba <_dtoa_r+0x6c2>
    5184:	4642      	mov	r2, r8
    5186:	464b      	mov	r3, r9
    5188:	4630      	mov	r0, r6
    518a:	4639      	mov	r1, r7
    518c:	f7fb fc2c 	bl	9e8 <__aeabi_dcmpeq>
    5190:	b110      	cbz	r0, 5198 <_dtoa_r+0x6a0>
    5192:	f01a 0f01 	tst.w	sl, #1
    5196:	d110      	bne.n	51ba <_dtoa_r+0x6c2>
    5198:	4620      	mov	r0, r4
    519a:	ee18 1a10 	vmov	r1, s16
    519e:	f011 fdef 	bl	16d80 <_Bfree>
    51a2:	2300      	movs	r3, #0
    51a4:	9800      	ldr	r0, [sp, #0]
    51a6:	702b      	strb	r3, [r5, #0]
    51a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    51aa:	3001      	adds	r0, #1
    51ac:	6018      	str	r0, [r3, #0]
    51ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    51b0:	2b00      	cmp	r3, #0
    51b2:	f43f acf1 	beq.w	4b98 <_dtoa_r+0xa0>
    51b6:	601d      	str	r5, [r3, #0]
    51b8:	e4ee      	b.n	4b98 <_dtoa_r+0xa0>
    51ba:	9f00      	ldr	r7, [sp, #0]
    51bc:	462b      	mov	r3, r5
    51be:	461d      	mov	r5, r3
    51c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    51c4:	2a39      	cmp	r2, #57	; 0x39
    51c6:	d106      	bne.n	51d6 <_dtoa_r+0x6de>
    51c8:	9a01      	ldr	r2, [sp, #4]
    51ca:	429a      	cmp	r2, r3
    51cc:	d1f7      	bne.n	51be <_dtoa_r+0x6c6>
    51ce:	9901      	ldr	r1, [sp, #4]
    51d0:	2230      	movs	r2, #48	; 0x30
    51d2:	3701      	adds	r7, #1
    51d4:	700a      	strb	r2, [r1, #0]
    51d6:	781a      	ldrb	r2, [r3, #0]
    51d8:	3201      	adds	r2, #1
    51da:	701a      	strb	r2, [r3, #0]
    51dc:	e790      	b.n	5100 <_dtoa_r+0x608>
    51de:	4ba6      	ldr	r3, [pc, #664]	; (5478 <_dtoa_r+0x980>)
    51e0:	2200      	movs	r2, #0
    51e2:	f7fb f999 	bl	518 <__aeabi_dmul>
    51e6:	2200      	movs	r2, #0
    51e8:	2300      	movs	r3, #0
    51ea:	4606      	mov	r6, r0
    51ec:	460f      	mov	r7, r1
    51ee:	f7fb fbfb 	bl	9e8 <__aeabi_dcmpeq>
    51f2:	2800      	cmp	r0, #0
    51f4:	d09d      	beq.n	5132 <_dtoa_r+0x63a>
    51f6:	e7cf      	b.n	5198 <_dtoa_r+0x6a0>
    51f8:	9a08      	ldr	r2, [sp, #32]
    51fa:	2a00      	cmp	r2, #0
    51fc:	f000 80d7 	beq.w	53ae <_dtoa_r+0x8b6>
    5200:	9a06      	ldr	r2, [sp, #24]
    5202:	2a01      	cmp	r2, #1
    5204:	f300 80ba 	bgt.w	537c <_dtoa_r+0x884>
    5208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    520a:	2a00      	cmp	r2, #0
    520c:	f000 80b2 	beq.w	5374 <_dtoa_r+0x87c>
    5210:	f203 4333 	addw	r3, r3, #1075	; 0x433
    5214:	9e07      	ldr	r6, [sp, #28]
    5216:	9d04      	ldr	r5, [sp, #16]
    5218:	9a04      	ldr	r2, [sp, #16]
    521a:	441a      	add	r2, r3
    521c:	9204      	str	r2, [sp, #16]
    521e:	9a05      	ldr	r2, [sp, #20]
    5220:	2101      	movs	r1, #1
    5222:	441a      	add	r2, r3
    5224:	4620      	mov	r0, r4
    5226:	9205      	str	r2, [sp, #20]
    5228:	f011 fe12 	bl	16e50 <__i2b>
    522c:	4607      	mov	r7, r0
    522e:	2d00      	cmp	r5, #0
    5230:	dd0c      	ble.n	524c <_dtoa_r+0x754>
    5232:	9b05      	ldr	r3, [sp, #20]
    5234:	2b00      	cmp	r3, #0
    5236:	dd09      	ble.n	524c <_dtoa_r+0x754>
    5238:	42ab      	cmp	r3, r5
    523a:	9a04      	ldr	r2, [sp, #16]
    523c:	bfa8      	it	ge
    523e:	462b      	movge	r3, r5
    5240:	1ad2      	subs	r2, r2, r3
    5242:	9204      	str	r2, [sp, #16]
    5244:	9a05      	ldr	r2, [sp, #20]
    5246:	1aed      	subs	r5, r5, r3
    5248:	1ad3      	subs	r3, r2, r3
    524a:	9305      	str	r3, [sp, #20]
    524c:	9b07      	ldr	r3, [sp, #28]
    524e:	b31b      	cbz	r3, 5298 <_dtoa_r+0x7a0>
    5250:	9b08      	ldr	r3, [sp, #32]
    5252:	2b00      	cmp	r3, #0
    5254:	f000 80af 	beq.w	53b6 <_dtoa_r+0x8be>
    5258:	2e00      	cmp	r6, #0
    525a:	dd13      	ble.n	5284 <_dtoa_r+0x78c>
    525c:	4639      	mov	r1, r7
    525e:	4632      	mov	r2, r6
    5260:	4620      	mov	r0, r4
    5262:	f011 feb5 	bl	16fd0 <__pow5mult>
    5266:	ee18 2a10 	vmov	r2, s16
    526a:	4601      	mov	r1, r0
    526c:	4607      	mov	r7, r0
    526e:	4620      	mov	r0, r4
    5270:	f011 fe04 	bl	16e7c <__multiply>
    5274:	ee18 1a10 	vmov	r1, s16
    5278:	4680      	mov	r8, r0
    527a:	4620      	mov	r0, r4
    527c:	f011 fd80 	bl	16d80 <_Bfree>
    5280:	ee08 8a10 	vmov	s16, r8
    5284:	9b07      	ldr	r3, [sp, #28]
    5286:	1b9a      	subs	r2, r3, r6
    5288:	d006      	beq.n	5298 <_dtoa_r+0x7a0>
    528a:	ee18 1a10 	vmov	r1, s16
    528e:	4620      	mov	r0, r4
    5290:	f011 fe9e 	bl	16fd0 <__pow5mult>
    5294:	ee08 0a10 	vmov	s16, r0
    5298:	2101      	movs	r1, #1
    529a:	4620      	mov	r0, r4
    529c:	f011 fdd8 	bl	16e50 <__i2b>
    52a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    52a2:	2b00      	cmp	r3, #0
    52a4:	4606      	mov	r6, r0
    52a6:	f340 8088 	ble.w	53ba <_dtoa_r+0x8c2>
    52aa:	461a      	mov	r2, r3
    52ac:	4601      	mov	r1, r0
    52ae:	4620      	mov	r0, r4
    52b0:	f011 fe8e 	bl	16fd0 <__pow5mult>
    52b4:	9b06      	ldr	r3, [sp, #24]
    52b6:	2b01      	cmp	r3, #1
    52b8:	4606      	mov	r6, r0
    52ba:	f340 8081 	ble.w	53c0 <_dtoa_r+0x8c8>
    52be:	f04f 0800 	mov.w	r8, #0
    52c2:	6933      	ldr	r3, [r6, #16]
    52c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    52c8:	6918      	ldr	r0, [r3, #16]
    52ca:	f016 ffdf 	bl	1c28c <__hi0bits>
    52ce:	f1c0 0020 	rsb	r0, r0, #32
    52d2:	9b05      	ldr	r3, [sp, #20]
    52d4:	4418      	add	r0, r3
    52d6:	f010 001f 	ands.w	r0, r0, #31
    52da:	f000 8092 	beq.w	5402 <_dtoa_r+0x90a>
    52de:	f1c0 0320 	rsb	r3, r0, #32
    52e2:	2b04      	cmp	r3, #4
    52e4:	f340 808a 	ble.w	53fc <_dtoa_r+0x904>
    52e8:	f1c0 001c 	rsb	r0, r0, #28
    52ec:	9b04      	ldr	r3, [sp, #16]
    52ee:	4403      	add	r3, r0
    52f0:	9304      	str	r3, [sp, #16]
    52f2:	9b05      	ldr	r3, [sp, #20]
    52f4:	4403      	add	r3, r0
    52f6:	4405      	add	r5, r0
    52f8:	9305      	str	r3, [sp, #20]
    52fa:	9b04      	ldr	r3, [sp, #16]
    52fc:	2b00      	cmp	r3, #0
    52fe:	dd07      	ble.n	5310 <_dtoa_r+0x818>
    5300:	ee18 1a10 	vmov	r1, s16
    5304:	461a      	mov	r2, r3
    5306:	4620      	mov	r0, r4
    5308:	f011 febc 	bl	17084 <__lshift>
    530c:	ee08 0a10 	vmov	s16, r0
    5310:	9b05      	ldr	r3, [sp, #20]
    5312:	2b00      	cmp	r3, #0
    5314:	dd05      	ble.n	5322 <_dtoa_r+0x82a>
    5316:	4631      	mov	r1, r6
    5318:	461a      	mov	r2, r3
    531a:	4620      	mov	r0, r4
    531c:	f011 feb2 	bl	17084 <__lshift>
    5320:	4606      	mov	r6, r0
    5322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5324:	2b00      	cmp	r3, #0
    5326:	d06e      	beq.n	5406 <_dtoa_r+0x90e>
    5328:	ee18 0a10 	vmov	r0, s16
    532c:	4631      	mov	r1, r6
    532e:	f016 fffc 	bl	1c32a <__mcmp>
    5332:	2800      	cmp	r0, #0
    5334:	da67      	bge.n	5406 <_dtoa_r+0x90e>
    5336:	9b00      	ldr	r3, [sp, #0]
    5338:	3b01      	subs	r3, #1
    533a:	ee18 1a10 	vmov	r1, s16
    533e:	9300      	str	r3, [sp, #0]
    5340:	220a      	movs	r2, #10
    5342:	2300      	movs	r3, #0
    5344:	4620      	mov	r0, r4
    5346:	f011 fd3d 	bl	16dc4 <__multadd>
    534a:	9b08      	ldr	r3, [sp, #32]
    534c:	ee08 0a10 	vmov	s16, r0
    5350:	2b00      	cmp	r3, #0
    5352:	f000 81b1 	beq.w	56b8 <_dtoa_r+0xbc0>
    5356:	2300      	movs	r3, #0
    5358:	4639      	mov	r1, r7
    535a:	220a      	movs	r2, #10
    535c:	4620      	mov	r0, r4
    535e:	f011 fd31 	bl	16dc4 <__multadd>
    5362:	9b02      	ldr	r3, [sp, #8]
    5364:	2b00      	cmp	r3, #0
    5366:	4607      	mov	r7, r0
    5368:	f300 808e 	bgt.w	5488 <_dtoa_r+0x990>
    536c:	9b06      	ldr	r3, [sp, #24]
    536e:	2b02      	cmp	r3, #2
    5370:	dc51      	bgt.n	5416 <_dtoa_r+0x91e>
    5372:	e089      	b.n	5488 <_dtoa_r+0x990>
    5374:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    537a:	e74b      	b.n	5214 <_dtoa_r+0x71c>
    537c:	9b03      	ldr	r3, [sp, #12]
    537e:	1e5e      	subs	r6, r3, #1
    5380:	9b07      	ldr	r3, [sp, #28]
    5382:	42b3      	cmp	r3, r6
    5384:	bfbf      	itttt	lt
    5386:	9b07      	ldrlt	r3, [sp, #28]
    5388:	9607      	strlt	r6, [sp, #28]
    538a:	1af2      	sublt	r2, r6, r3
    538c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    538e:	bfb6      	itet	lt
    5390:	189b      	addlt	r3, r3, r2
    5392:	1b9e      	subge	r6, r3, r6
    5394:	930a      	strlt	r3, [sp, #40]	; 0x28
    5396:	9b03      	ldr	r3, [sp, #12]
    5398:	bfb8      	it	lt
    539a:	2600      	movlt	r6, #0
    539c:	2b00      	cmp	r3, #0
    539e:	bfb7      	itett	lt
    53a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
    53a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
    53a8:	1a9d      	sublt	r5, r3, r2
    53aa:	2300      	movlt	r3, #0
    53ac:	e734      	b.n	5218 <_dtoa_r+0x720>
    53ae:	9e07      	ldr	r6, [sp, #28]
    53b0:	9d04      	ldr	r5, [sp, #16]
    53b2:	9f08      	ldr	r7, [sp, #32]
    53b4:	e73b      	b.n	522e <_dtoa_r+0x736>
    53b6:	9a07      	ldr	r2, [sp, #28]
    53b8:	e767      	b.n	528a <_dtoa_r+0x792>
    53ba:	9b06      	ldr	r3, [sp, #24]
    53bc:	2b01      	cmp	r3, #1
    53be:	dc18      	bgt.n	53f2 <_dtoa_r+0x8fa>
    53c0:	f1ba 0f00 	cmp.w	sl, #0
    53c4:	d115      	bne.n	53f2 <_dtoa_r+0x8fa>
    53c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
    53ca:	b993      	cbnz	r3, 53f2 <_dtoa_r+0x8fa>
    53cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    53d0:	0d1b      	lsrs	r3, r3, #20
    53d2:	051b      	lsls	r3, r3, #20
    53d4:	b183      	cbz	r3, 53f8 <_dtoa_r+0x900>
    53d6:	9b04      	ldr	r3, [sp, #16]
    53d8:	3301      	adds	r3, #1
    53da:	9304      	str	r3, [sp, #16]
    53dc:	9b05      	ldr	r3, [sp, #20]
    53de:	3301      	adds	r3, #1
    53e0:	9305      	str	r3, [sp, #20]
    53e2:	f04f 0801 	mov.w	r8, #1
    53e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    53e8:	2b00      	cmp	r3, #0
    53ea:	f47f af6a 	bne.w	52c2 <_dtoa_r+0x7ca>
    53ee:	2001      	movs	r0, #1
    53f0:	e76f      	b.n	52d2 <_dtoa_r+0x7da>
    53f2:	f04f 0800 	mov.w	r8, #0
    53f6:	e7f6      	b.n	53e6 <_dtoa_r+0x8ee>
    53f8:	4698      	mov	r8, r3
    53fa:	e7f4      	b.n	53e6 <_dtoa_r+0x8ee>
    53fc:	f43f af7d 	beq.w	52fa <_dtoa_r+0x802>
    5400:	4618      	mov	r0, r3
    5402:	301c      	adds	r0, #28
    5404:	e772      	b.n	52ec <_dtoa_r+0x7f4>
    5406:	9b03      	ldr	r3, [sp, #12]
    5408:	2b00      	cmp	r3, #0
    540a:	dc37      	bgt.n	547c <_dtoa_r+0x984>
    540c:	9b06      	ldr	r3, [sp, #24]
    540e:	2b02      	cmp	r3, #2
    5410:	dd34      	ble.n	547c <_dtoa_r+0x984>
    5412:	9b03      	ldr	r3, [sp, #12]
    5414:	9302      	str	r3, [sp, #8]
    5416:	9b02      	ldr	r3, [sp, #8]
    5418:	b96b      	cbnz	r3, 5436 <_dtoa_r+0x93e>
    541a:	4631      	mov	r1, r6
    541c:	2205      	movs	r2, #5
    541e:	4620      	mov	r0, r4
    5420:	f011 fcd0 	bl	16dc4 <__multadd>
    5424:	4601      	mov	r1, r0
    5426:	4606      	mov	r6, r0
    5428:	ee18 0a10 	vmov	r0, s16
    542c:	f016 ff7d 	bl	1c32a <__mcmp>
    5430:	2800      	cmp	r0, #0
    5432:	f73f adbb 	bgt.w	4fac <_dtoa_r+0x4b4>
    5436:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5438:	9d01      	ldr	r5, [sp, #4]
    543a:	43db      	mvns	r3, r3
    543c:	9300      	str	r3, [sp, #0]
    543e:	f04f 0800 	mov.w	r8, #0
    5442:	4631      	mov	r1, r6
    5444:	4620      	mov	r0, r4
    5446:	f011 fc9b 	bl	16d80 <_Bfree>
    544a:	2f00      	cmp	r7, #0
    544c:	f43f aea4 	beq.w	5198 <_dtoa_r+0x6a0>
    5450:	f1b8 0f00 	cmp.w	r8, #0
    5454:	d005      	beq.n	5462 <_dtoa_r+0x96a>
    5456:	45b8      	cmp	r8, r7
    5458:	d003      	beq.n	5462 <_dtoa_r+0x96a>
    545a:	4641      	mov	r1, r8
    545c:	4620      	mov	r0, r4
    545e:	f011 fc8f 	bl	16d80 <_Bfree>
    5462:	4639      	mov	r1, r7
    5464:	4620      	mov	r0, r4
    5466:	f011 fc8b 	bl	16d80 <_Bfree>
    546a:	e695      	b.n	5198 <_dtoa_r+0x6a0>
    546c:	2600      	movs	r6, #0
    546e:	4637      	mov	r7, r6
    5470:	e7e1      	b.n	5436 <_dtoa_r+0x93e>
    5472:	9700      	str	r7, [sp, #0]
    5474:	4637      	mov	r7, r6
    5476:	e599      	b.n	4fac <_dtoa_r+0x4b4>
    5478:	40240000 	.word	0x40240000
    547c:	9b08      	ldr	r3, [sp, #32]
    547e:	2b00      	cmp	r3, #0
    5480:	f000 80ca 	beq.w	5618 <_dtoa_r+0xb20>
    5484:	9b03      	ldr	r3, [sp, #12]
    5486:	9302      	str	r3, [sp, #8]
    5488:	2d00      	cmp	r5, #0
    548a:	dd05      	ble.n	5498 <_dtoa_r+0x9a0>
    548c:	4639      	mov	r1, r7
    548e:	462a      	mov	r2, r5
    5490:	4620      	mov	r0, r4
    5492:	f011 fdf7 	bl	17084 <__lshift>
    5496:	4607      	mov	r7, r0
    5498:	f1b8 0f00 	cmp.w	r8, #0
    549c:	d05b      	beq.n	5556 <_dtoa_r+0xa5e>
    549e:	6879      	ldr	r1, [r7, #4]
    54a0:	4620      	mov	r0, r4
    54a2:	f011 fc2d 	bl	16d00 <_Balloc>
    54a6:	4605      	mov	r5, r0
    54a8:	b928      	cbnz	r0, 54b6 <_dtoa_r+0x9be>
    54aa:	4b87      	ldr	r3, [pc, #540]	; (56c8 <_dtoa_r+0xbd0>)
    54ac:	4602      	mov	r2, r0
    54ae:	f240 21ea 	movw	r1, #746	; 0x2ea
    54b2:	f7ff bb3b 	b.w	4b2c <_dtoa_r+0x34>
    54b6:	693a      	ldr	r2, [r7, #16]
    54b8:	3202      	adds	r2, #2
    54ba:	0092      	lsls	r2, r2, #2
    54bc:	f107 010c 	add.w	r1, r7, #12
    54c0:	300c      	adds	r0, #12
    54c2:	f016 fc0d 	bl	1bce0 <memcpy>
    54c6:	2201      	movs	r2, #1
    54c8:	4629      	mov	r1, r5
    54ca:	4620      	mov	r0, r4
    54cc:	f011 fdda 	bl	17084 <__lshift>
    54d0:	9b01      	ldr	r3, [sp, #4]
    54d2:	f103 0901 	add.w	r9, r3, #1
    54d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    54da:	4413      	add	r3, r2
    54dc:	9305      	str	r3, [sp, #20]
    54de:	f00a 0301 	and.w	r3, sl, #1
    54e2:	46b8      	mov	r8, r7
    54e4:	9304      	str	r3, [sp, #16]
    54e6:	4607      	mov	r7, r0
    54e8:	4631      	mov	r1, r6
    54ea:	ee18 0a10 	vmov	r0, s16
    54ee:	f016 fde8 	bl	1c0c2 <quorem>
    54f2:	4641      	mov	r1, r8
    54f4:	9002      	str	r0, [sp, #8]
    54f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    54fa:	ee18 0a10 	vmov	r0, s16
    54fe:	f016 ff14 	bl	1c32a <__mcmp>
    5502:	463a      	mov	r2, r7
    5504:	9003      	str	r0, [sp, #12]
    5506:	4631      	mov	r1, r6
    5508:	4620      	mov	r0, r4
    550a:	f011 fe2b 	bl	17164 <__mdiff>
    550e:	68c2      	ldr	r2, [r0, #12]
    5510:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    5514:	4605      	mov	r5, r0
    5516:	bb02      	cbnz	r2, 555a <_dtoa_r+0xa62>
    5518:	4601      	mov	r1, r0
    551a:	ee18 0a10 	vmov	r0, s16
    551e:	f016 ff04 	bl	1c32a <__mcmp>
    5522:	4602      	mov	r2, r0
    5524:	4629      	mov	r1, r5
    5526:	4620      	mov	r0, r4
    5528:	9207      	str	r2, [sp, #28]
    552a:	f011 fc29 	bl	16d80 <_Bfree>
    552e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    5532:	ea43 0102 	orr.w	r1, r3, r2
    5536:	9b04      	ldr	r3, [sp, #16]
    5538:	430b      	orrs	r3, r1
    553a:	464d      	mov	r5, r9
    553c:	d10f      	bne.n	555e <_dtoa_r+0xa66>
    553e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    5542:	d02a      	beq.n	559a <_dtoa_r+0xaa2>
    5544:	9b03      	ldr	r3, [sp, #12]
    5546:	2b00      	cmp	r3, #0
    5548:	dd02      	ble.n	5550 <_dtoa_r+0xa58>
    554a:	9b02      	ldr	r3, [sp, #8]
    554c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
    5550:	f88b a000 	strb.w	sl, [fp]
    5554:	e775      	b.n	5442 <_dtoa_r+0x94a>
    5556:	4638      	mov	r0, r7
    5558:	e7ba      	b.n	54d0 <_dtoa_r+0x9d8>
    555a:	2201      	movs	r2, #1
    555c:	e7e2      	b.n	5524 <_dtoa_r+0xa2c>
    555e:	9b03      	ldr	r3, [sp, #12]
    5560:	2b00      	cmp	r3, #0
    5562:	db04      	blt.n	556e <_dtoa_r+0xa76>
    5564:	9906      	ldr	r1, [sp, #24]
    5566:	430b      	orrs	r3, r1
    5568:	9904      	ldr	r1, [sp, #16]
    556a:	430b      	orrs	r3, r1
    556c:	d122      	bne.n	55b4 <_dtoa_r+0xabc>
    556e:	2a00      	cmp	r2, #0
    5570:	ddee      	ble.n	5550 <_dtoa_r+0xa58>
    5572:	ee18 1a10 	vmov	r1, s16
    5576:	2201      	movs	r2, #1
    5578:	4620      	mov	r0, r4
    557a:	f011 fd83 	bl	17084 <__lshift>
    557e:	4631      	mov	r1, r6
    5580:	ee08 0a10 	vmov	s16, r0
    5584:	f016 fed1 	bl	1c32a <__mcmp>
    5588:	2800      	cmp	r0, #0
    558a:	dc03      	bgt.n	5594 <_dtoa_r+0xa9c>
    558c:	d1e0      	bne.n	5550 <_dtoa_r+0xa58>
    558e:	f01a 0f01 	tst.w	sl, #1
    5592:	d0dd      	beq.n	5550 <_dtoa_r+0xa58>
    5594:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    5598:	d1d7      	bne.n	554a <_dtoa_r+0xa52>
    559a:	2339      	movs	r3, #57	; 0x39
    559c:	f88b 3000 	strb.w	r3, [fp]
    55a0:	462b      	mov	r3, r5
    55a2:	461d      	mov	r5, r3
    55a4:	3b01      	subs	r3, #1
    55a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    55aa:	2a39      	cmp	r2, #57	; 0x39
    55ac:	d071      	beq.n	5692 <_dtoa_r+0xb9a>
    55ae:	3201      	adds	r2, #1
    55b0:	701a      	strb	r2, [r3, #0]
    55b2:	e746      	b.n	5442 <_dtoa_r+0x94a>
    55b4:	2a00      	cmp	r2, #0
    55b6:	dd07      	ble.n	55c8 <_dtoa_r+0xad0>
    55b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    55bc:	d0ed      	beq.n	559a <_dtoa_r+0xaa2>
    55be:	f10a 0301 	add.w	r3, sl, #1
    55c2:	f88b 3000 	strb.w	r3, [fp]
    55c6:	e73c      	b.n	5442 <_dtoa_r+0x94a>
    55c8:	9b05      	ldr	r3, [sp, #20]
    55ca:	f809 ac01 	strb.w	sl, [r9, #-1]
    55ce:	4599      	cmp	r9, r3
    55d0:	d047      	beq.n	5662 <_dtoa_r+0xb6a>
    55d2:	ee18 1a10 	vmov	r1, s16
    55d6:	2300      	movs	r3, #0
    55d8:	220a      	movs	r2, #10
    55da:	4620      	mov	r0, r4
    55dc:	f011 fbf2 	bl	16dc4 <__multadd>
    55e0:	45b8      	cmp	r8, r7
    55e2:	ee08 0a10 	vmov	s16, r0
    55e6:	f04f 0300 	mov.w	r3, #0
    55ea:	f04f 020a 	mov.w	r2, #10
    55ee:	4641      	mov	r1, r8
    55f0:	4620      	mov	r0, r4
    55f2:	d106      	bne.n	5602 <_dtoa_r+0xb0a>
    55f4:	f011 fbe6 	bl	16dc4 <__multadd>
    55f8:	4680      	mov	r8, r0
    55fa:	4607      	mov	r7, r0
    55fc:	f109 0901 	add.w	r9, r9, #1
    5600:	e772      	b.n	54e8 <_dtoa_r+0x9f0>
    5602:	f011 fbdf 	bl	16dc4 <__multadd>
    5606:	4639      	mov	r1, r7
    5608:	4680      	mov	r8, r0
    560a:	2300      	movs	r3, #0
    560c:	220a      	movs	r2, #10
    560e:	4620      	mov	r0, r4
    5610:	f011 fbd8 	bl	16dc4 <__multadd>
    5614:	4607      	mov	r7, r0
    5616:	e7f1      	b.n	55fc <_dtoa_r+0xb04>
    5618:	9b03      	ldr	r3, [sp, #12]
    561a:	9302      	str	r3, [sp, #8]
    561c:	9d01      	ldr	r5, [sp, #4]
    561e:	ee18 0a10 	vmov	r0, s16
    5622:	4631      	mov	r1, r6
    5624:	f016 fd4d 	bl	1c0c2 <quorem>
    5628:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    562c:	9b01      	ldr	r3, [sp, #4]
    562e:	f805 ab01 	strb.w	sl, [r5], #1
    5632:	1aea      	subs	r2, r5, r3
    5634:	9b02      	ldr	r3, [sp, #8]
    5636:	4293      	cmp	r3, r2
    5638:	dd09      	ble.n	564e <_dtoa_r+0xb56>
    563a:	ee18 1a10 	vmov	r1, s16
    563e:	2300      	movs	r3, #0
    5640:	220a      	movs	r2, #10
    5642:	4620      	mov	r0, r4
    5644:	f011 fbbe 	bl	16dc4 <__multadd>
    5648:	ee08 0a10 	vmov	s16, r0
    564c:	e7e7      	b.n	561e <_dtoa_r+0xb26>
    564e:	9b02      	ldr	r3, [sp, #8]
    5650:	2b00      	cmp	r3, #0
    5652:	bfc8      	it	gt
    5654:	461d      	movgt	r5, r3
    5656:	9b01      	ldr	r3, [sp, #4]
    5658:	bfd8      	it	le
    565a:	2501      	movle	r5, #1
    565c:	441d      	add	r5, r3
    565e:	f04f 0800 	mov.w	r8, #0
    5662:	ee18 1a10 	vmov	r1, s16
    5666:	2201      	movs	r2, #1
    5668:	4620      	mov	r0, r4
    566a:	f011 fd0b 	bl	17084 <__lshift>
    566e:	4631      	mov	r1, r6
    5670:	ee08 0a10 	vmov	s16, r0
    5674:	f016 fe59 	bl	1c32a <__mcmp>
    5678:	2800      	cmp	r0, #0
    567a:	dc91      	bgt.n	55a0 <_dtoa_r+0xaa8>
    567c:	d102      	bne.n	5684 <_dtoa_r+0xb8c>
    567e:	f01a 0f01 	tst.w	sl, #1
    5682:	d18d      	bne.n	55a0 <_dtoa_r+0xaa8>
    5684:	462b      	mov	r3, r5
    5686:	461d      	mov	r5, r3
    5688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    568c:	2a30      	cmp	r2, #48	; 0x30
    568e:	d0fa      	beq.n	5686 <_dtoa_r+0xb8e>
    5690:	e6d7      	b.n	5442 <_dtoa_r+0x94a>
    5692:	9a01      	ldr	r2, [sp, #4]
    5694:	429a      	cmp	r2, r3
    5696:	d184      	bne.n	55a2 <_dtoa_r+0xaaa>
    5698:	9b00      	ldr	r3, [sp, #0]
    569a:	3301      	adds	r3, #1
    569c:	9300      	str	r3, [sp, #0]
    569e:	2331      	movs	r3, #49	; 0x31
    56a0:	7013      	strb	r3, [r2, #0]
    56a2:	e6ce      	b.n	5442 <_dtoa_r+0x94a>
    56a4:	4b09      	ldr	r3, [pc, #36]	; (56cc <_dtoa_r+0xbd4>)
    56a6:	f7ff ba95 	b.w	4bd4 <_dtoa_r+0xdc>
    56aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    56ac:	2b00      	cmp	r3, #0
    56ae:	f47f aa6e 	bne.w	4b8e <_dtoa_r+0x96>
    56b2:	4b07      	ldr	r3, [pc, #28]	; (56d0 <_dtoa_r+0xbd8>)
    56b4:	f7ff ba8e 	b.w	4bd4 <_dtoa_r+0xdc>
    56b8:	9b02      	ldr	r3, [sp, #8]
    56ba:	2b00      	cmp	r3, #0
    56bc:	dcae      	bgt.n	561c <_dtoa_r+0xb24>
    56be:	9b06      	ldr	r3, [sp, #24]
    56c0:	2b02      	cmp	r3, #2
    56c2:	f73f aea8 	bgt.w	5416 <_dtoa_r+0x91e>
    56c6:	e7a9      	b.n	561c <_dtoa_r+0xb24>
    56c8:	0003ef2f 	.word	0x0003ef2f
    56cc:	0003d09f 	.word	0x0003d09f
    56d0:	0003eeaf 	.word	0x0003eeaf

000056d4 <result_ready_cb>:

LOG_MODULE_REGISTER(MAIN);

/* Edge Impulse results ready. */
static void result_ready_cb(int err)
{
    56d4:	b5b0      	push	{r4, r5, r7, lr}
    56d6:	b084      	sub	sp, #16
    56d8:	af00      	add	r7, sp, #0
	if(err){
    56da:	b188      	cbz	r0, 5700 <result_ready_cb+0x2c>
		LOG_INF("Result ready callback error: %d", err);
    56dc:	466c      	mov	r4, sp
    56de:	4b2c      	ldr	r3, [pc, #176]	; (5790 <result_ready_cb+0xbc>)
    56e0:	b088      	sub	sp, #32
    56e2:	466a      	mov	r2, sp
	}

	bool cancelled;
	err = ei_wrapper_clear_data(&cancelled);
	if(err){
		LOG_INF("Unable to clear data: %i", err);
    56e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    56e8:	2303      	movs	r3, #3
    56ea:	f842 3f10 	str.w	r3, [r2, #16]!
    56ee:	4829      	ldr	r0, [pc, #164]	; (5794 <result_ready_cb+0xc0>)
    56f0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    56f4:	f012 f95d 	bl	179b2 <z_log_msg2_static_create.constprop.0>
    56f8:	46a5      	mov	sp, r4
	}
}
    56fa:	3710      	adds	r7, #16
    56fc:	46bd      	mov	sp, r7
    56fe:	bdb0      	pop	{r4, r5, r7, pc}
		err = ei_wrapper_get_next_classification_result(&label, &value, &inx);
    5700:	f107 0208 	add.w	r2, r7, #8
    5704:	1d39      	adds	r1, r7, #4
    5706:	4638      	mov	r0, r7
    5708:	f006 f8a8 	bl	b85c <ei_wrapper_get_next_classification_result>
		if(err){
    570c:	b1c8      	cbz	r0, 5742 <result_ready_cb+0x6e>
			LOG_INF("Unable to get next classification result: %d", err);
    570e:	4b22      	ldr	r3, [pc, #136]	; (5798 <result_ready_cb+0xc4>)
    5710:	466c      	mov	r4, sp
    5712:	b088      	sub	sp, #32
    5714:	466a      	mov	r2, sp
    5716:	e9c2 3005 	strd	r3, r0, [r2, #20]
    571a:	2303      	movs	r3, #3
    571c:	f842 3f10 	str.w	r3, [r2, #16]!
    5720:	481c      	ldr	r0, [pc, #112]	; (5794 <result_ready_cb+0xc0>)
    5722:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5726:	f012 f944 	bl	179b2 <z_log_msg2_static_create.constprop.0>
    572a:	46a5      	mov	sp, r4
	err = ei_wrapper_clear_data(&cancelled);
    572c:	f107 000c 	add.w	r0, r7, #12
    5730:	f012 ff54 	bl	185dc <ei_wrapper_clear_data>
	if(err){
    5734:	2800      	cmp	r0, #0
    5736:	d0e0      	beq.n	56fa <result_ready_cb+0x26>
		LOG_INF("Unable to clear data: %i", err);
    5738:	466c      	mov	r4, sp
    573a:	b088      	sub	sp, #32
    573c:	4b17      	ldr	r3, [pc, #92]	; (579c <result_ready_cb+0xc8>)
    573e:	466a      	mov	r2, sp
    5740:	e7d0      	b.n	56e4 <result_ready_cb+0x10>
		if(inx == 2){
    5742:	68bb      	ldr	r3, [r7, #8]
    5744:	2b02      	cmp	r3, #2
    5746:	d1db      	bne.n	5700 <result_ready_cb+0x2c>
			LOG_INF("Woodpecker probabilaty: %f", value);
    5748:	ed97 7a01 	vldr	s14, [r7, #4]
    574c:	eddf 7a14 	vldr	s15, [pc, #80]	; 57a0 <result_ready_cb+0xcc>
    5750:	4b14      	ldr	r3, [pc, #80]	; (57a4 <result_ready_cb+0xd0>)
    5752:	466d      	mov	r5, sp
    5754:	b088      	sub	sp, #32
    5756:	466c      	mov	r4, sp
    5758:	ee77 7a27 	vadd.f32	s15, s14, s15
    575c:	6163      	str	r3, [r4, #20]
    575e:	ee17 0a90 	vmov	r0, s15
    5762:	f7fa fe81 	bl	468 <__aeabi_f2d>
    5766:	4622      	mov	r2, r4
    5768:	2304      	movs	r3, #4
    576a:	e9c4 0106 	strd	r0, r1, [r4, #24]
    576e:	f842 3f10 	str.w	r3, [r2, #16]!
    5772:	4808      	ldr	r0, [pc, #32]	; (5794 <result_ready_cb+0xc0>)
    5774:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    5778:	f012 f91b 	bl	179b2 <z_log_msg2_static_create.constprop.0>
    577c:	46ad      	mov	sp, r5
		if(ei_wrapper_classifier_has_anomaly()){
    577e:	f012 ff28 	bl	185d2 <ei_wrapper_classifier_has_anomaly>
    5782:	2800      	cmp	r0, #0
    5784:	d0d2      	beq.n	572c <result_ready_cb+0x58>
			err = ei_wrapper_get_anomaly(&anomaly);
    5786:	f107 000c 	add.w	r0, r7, #12
    578a:	f006 f8db 	bl	b944 <ei_wrapper_get_anomaly>
    578e:	e7cd      	b.n	572c <result_ready_cb+0x58>
    5790:	0003b9dc 	.word	0x0003b9dc
    5794:	0001c810 	.word	0x0001c810
    5798:	0003b9fc 	.word	0x0003b9fc
    579c:	0003ba44 	.word	0x0003ba44
    57a0:	00000000 	.word	0x00000000
    57a4:	0003ba29 	.word	0x0003ba29

000057a8 <main>:
	



	void main()
	{
    57a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57ac:	b099      	sub	sp, #100	; 0x64
	int ret;
	ret = ei_wrapper_init(result_ready_cb);
    57ae:	48b0      	ldr	r0, [pc, #704]	; (5a70 <main+0x2c8>)
	{
    57b0:	af02      	add	r7, sp, #8
	ret = ei_wrapper_init(result_ready_cb);
    57b2:	f006 f8e5 	bl	b980 <ei_wrapper_init>

	if(ret){
    57b6:	b170      	cbz	r0, 57d6 <main+0x2e>
		LOG_ERR("EI wrapper failed to init: %i", ret);
    57b8:	4bae      	ldr	r3, [pc, #696]	; (5a74 <main+0x2cc>)
    57ba:	466c      	mov	r4, sp
    57bc:	b088      	sub	sp, #32
    57be:	aa02      	add	r2, sp, #8
    57c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    57c4:	2303      	movs	r3, #3
    57c6:	f842 3f10 	str.w	r3, [r2, #16]!
    57ca:	48ab      	ldr	r0, [pc, #684]	; (5a78 <main+0x2d0>)
    57cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    57d0:	f012 f8ef 	bl	179b2 <z_log_msg2_static_create.constprop.0>
    57d4:	46a5      	mov	sp, r4
	return z_impl_k_sleep(timeout);
    57d6:	2100      	movs	r1, #0
    57d8:	f44f 20f0 	mov.w	r0, #491520	; 0x78000
    57dc:	f00a fc12 	bl	10004 <z_impl_k_sleep>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    57e0:	48a6      	ldr	r0, [pc, #664]	; (5a7c <main+0x2d4>)
    57e2:	f008 fa13 	bl	dc0c <z_impl_device_get_binding>
    57e6:	4604      	mov	r4, r0
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    57e8:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
    57ea:	6886      	ldr	r6, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    57ec:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
    57ee:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    57f0:	2b00      	cmp	r3, #0
    57f2:	db0e      	blt.n	5812 <main+0x6a>
    57f4:	49a2      	ldr	r1, [pc, #648]	; (5a80 <main+0x2d8>)
    57f6:	4aa3      	ldr	r2, [pc, #652]	; (5a84 <main+0x2dc>)
    57f8:	48a3      	ldr	r0, [pc, #652]	; (5a88 <main+0x2e0>)
    57fa:	f44f 7335 	mov.w	r3, #724	; 0x2d4
    57fe:	f012 fa26 	bl	17c4e <assert_print>
    5802:	48a2      	ldr	r0, [pc, #648]	; (5a8c <main+0x2e4>)
    5804:	f012 fa23 	bl	17c4e <assert_print>
    5808:	489e      	ldr	r0, [pc, #632]	; (5a84 <main+0x2dc>)
    580a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    580e:	f012 fa17 	bl	17c40 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5812:	682b      	ldr	r3, [r5, #0]
    5814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5818:	602b      	str	r3, [r5, #0]
	}

	return api->pin_configure(port, pin, flags);
    581a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    581e:	6833      	ldr	r3, [r6, #0]
    5820:	211f      	movs	r1, #31
    5822:	4620      	mov	r0, r4
    5824:	4798      	blx	r3
    5826:	2100      	movs	r1, #0
    5828:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    582c:	f00a fbea 	bl	10004 <z_impl_k_sleep>
	ret = gpio_pin_configure(gpio_dev, 31, GPIO_OUTPUT_HIGH);
	k_sleep(K_SECONDS(5));
	
	const struct device *dmic_dev = DEVICE_DT_GET(DT_NODELABEL(dmic_dev));

	LOG_INF("DMIC module");
    5830:	2602      	movs	r6, #2
    5832:	4b97      	ldr	r3, [pc, #604]	; (5a90 <main+0x2e8>)
    5834:	4890      	ldr	r0, [pc, #576]	; (5a78 <main+0x2d0>)
    5836:	647b      	str	r3, [r7, #68]	; 0x44
    5838:	f107 0240 	add.w	r2, r7, #64	; 0x40
    583c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5840:	643e      	str	r6, [r7, #64]	; 0x40
    5842:	46e8      	mov	r8, sp
    5844:	f012 f8b5 	bl	179b2 <z_log_msg2_static_create.constprop.0>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    5848:	4d92      	ldr	r5, [pc, #584]	; (5a94 <main+0x2ec>)
    584a:	4628      	mov	r0, r5
    584c:	f013 f87b 	bl	18946 <z_device_is_ready>

	if (!device_is_ready(dmic_dev)) {
    5850:	b9a0      	cbnz	r0, 587c <main+0xd4>
		LOG_ERR("%s is not ready", dmic_dev->name);
    5852:	b088      	sub	sp, #32
    5854:	682b      	ldr	r3, [r5, #0]
    5856:	4990      	ldr	r1, [pc, #576]	; (5a98 <main+0x2f0>)
    5858:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    585c:	aa02      	add	r2, sp, #8
    585e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5862:	4b8e      	ldr	r3, [pc, #568]	; (5a9c <main+0x2f4>)
    5864:	f842 3f10 	str.w	r3, [r2, #16]!
    5868:	4883      	ldr	r0, [pc, #524]	; (5a78 <main+0x2d0>)
    586a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
    586e:	f012 f8a0 	bl	179b2 <z_log_msg2_static_create.constprop.0>
    5872:	46c5      	mov	sp, r8
			k_sleep(K_SECONDS(1));
		 }
	}

	
	}
    5874:	375c      	adds	r7, #92	; 0x5c
    5876:	46bd      	mov	sp, r7
    5878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct pcm_stream_cfg stream = {
    587c:	4b88      	ldr	r3, [pc, #544]	; (5aa0 <main+0x2f8>)
    587e:	617b      	str	r3, [r7, #20]
	struct dmic_cfg cfg = {
    5880:	2220      	movs	r2, #32
    5882:	2100      	movs	r1, #0
    5884:	f107 0038 	add.w	r0, r7, #56	; 0x38
    5888:	f016 fa65 	bl	1bd56 <memset>
    588c:	4985      	ldr	r1, [pc, #532]	; (5aa4 <main+0x2fc>)
    588e:	4b86      	ldr	r3, [pc, #536]	; (5aa8 <main+0x300>)
    5890:	e9c7 130c 	strd	r1, r3, [r7, #48]	; 0x30
    5894:	2328      	movs	r3, #40	; 0x28
    5896:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    589a:	233c      	movs	r3, #60	; 0x3c
    589c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    58a0:	f107 030c 	add.w	r3, r7, #12
    58a4:	643b      	str	r3, [r7, #64]	; 0x40
    58a6:	2301      	movs	r3, #1
    58a8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	cfg.channel.req_num_chan = 1;
    58ac:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	struct pcm_stream_cfg stream = {
    58b0:	4b7e      	ldr	r3, [pc, #504]	; (5aac <main+0x304>)
    58b2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    58b6:	e9c7 0303 	strd	r0, r3, [r7, #12]
				 struct dmic_cfg *cfg)
{
	const struct _dmic_ops *api =
		(const struct _dmic_ops *)dev->api;

	return api->configure(dev, cfg);
    58ba:	68ab      	ldr	r3, [r5, #8]
    58bc:	f107 0130 	add.w	r1, r7, #48	; 0x30
    58c0:	681b      	ldr	r3, [r3, #0]
    58c2:	4628      	mov	r0, r5
    58c4:	4798      	blx	r3
	if (ret < 0) {
    58c6:	2800      	cmp	r0, #0
    58c8:	dbd4      	blt.n	5874 <main+0xcc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    58ca:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_api *api =
    58cc:	f8d4 8008 	ldr.w	r8, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    58d0:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
    58d2:	6926      	ldr	r6, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    58d4:	019a      	lsls	r2, r3, #6
    58d6:	d40e      	bmi.n	58f6 <main+0x14e>
    58d8:	4969      	ldr	r1, [pc, #420]	; (5a80 <main+0x2d8>)
    58da:	4a6a      	ldr	r2, [pc, #424]	; (5a84 <main+0x2dc>)
    58dc:	486a      	ldr	r0, [pc, #424]	; (5a88 <main+0x2e0>)
    58de:	f44f 7335 	mov.w	r3, #724	; 0x2d4
    58e2:	f012 f9b4 	bl	17c4e <assert_print>
    58e6:	4869      	ldr	r0, [pc, #420]	; (5a8c <main+0x2e4>)
    58e8:	f012 f9b1 	bl	17c4e <assert_print>
    58ec:	4865      	ldr	r0, [pc, #404]	; (5a84 <main+0x2dc>)
    58ee:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    58f2:	f012 f9a5 	bl	17c40 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    58f6:	6833      	ldr	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    58f8:	4a6d      	ldr	r2, [pc, #436]	; (5ab0 <main+0x308>)
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    58fa:	f8df b188 	ldr.w	fp, [pc, #392]	; 5a84 <main+0x2dc>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    58fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    5902:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
    5904:	2119      	movs	r1, #25
    5906:	f8d8 3000 	ldr.w	r3, [r8]
    590a:	4620      	mov	r0, r4
    590c:	4798      	blx	r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    590e:	6863      	ldr	r3, [r4, #4]
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	019b      	lsls	r3, r3, #6
    5914:	d40e      	bmi.n	5934 <main+0x18c>
    5916:	495a      	ldr	r1, [pc, #360]	; (5a80 <main+0x2d8>)
    5918:	485b      	ldr	r0, [pc, #364]	; (5a88 <main+0x2e0>)
    591a:	f240 4311 	movw	r3, #1041	; 0x411
    591e:	465a      	mov	r2, fp
    5920:	f012 f995 	bl	17c4e <assert_print>
    5924:	4859      	ldr	r0, [pc, #356]	; (5a8c <main+0x2e4>)
    5926:	f012 f992 	bl	17c4e <assert_print>
    592a:	f240 4111 	movw	r1, #1041	; 0x411
    592e:	4658      	mov	r0, fp
    5930:	f012 f986 	bl	17c40 <assert_post_action>
	return api->port_get_raw(port, value);
    5934:	68a3      	ldr	r3, [r4, #8]
    5936:	f107 0118 	add.w	r1, r7, #24
    593a:	685b      	ldr	r3, [r3, #4]
    593c:	4620      	mov	r0, r4
    593e:	4798      	blx	r3
	LOG_INF("Starting sampling:");
    5940:	4b5c      	ldr	r3, [pc, #368]	; (5ab4 <main+0x30c>)
    5942:	484d      	ldr	r0, [pc, #308]	; (5a78 <main+0x2d0>)
    5944:	62fb      	str	r3, [r7, #44]	; 0x2c
    5946:	f107 0228 	add.w	r2, r7, #40	; 0x28
    594a:	2302      	movs	r3, #2
    594c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5950:	62bb      	str	r3, [r7, #40]	; 0x28
    5952:	f012 f82e 	bl	179b2 <z_log_msg2_static_create.constprop.0>
 * @return 0 on success, a negative error code on failure
 */
static inline int dmic_trigger(const struct device *dev,
			       enum dmic_trigger cmd)
{
	const struct _dmic_ops *api =
    5956:	f8d5 9008 	ldr.w	r9, [r5, #8]
		(const struct _dmic_ops *)dev->api;

	return api->trigger(dev, cmd);
    595a:	484e      	ldr	r0, [pc, #312]	; (5a94 <main+0x2ec>)
    595c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5960:	2101      	movs	r1, #1
    5962:	4798      	blx	r3
	if (ret < 0) {
    5964:	2800      	cmp	r0, #0
	LOG_INF("Starting sampling:");
    5966:	466e      	mov	r6, sp
	if (ret < 0) {
    5968:	da0e      	bge.n	5988 <main+0x1e0>
		LOG_INF("START trigger failed: %d", ret);
    596a:	b088      	sub	sp, #32
    596c:	4b52      	ldr	r3, [pc, #328]	; (5ab8 <main+0x310>)
    596e:	aa02      	add	r2, sp, #8
    5970:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5974:	2303      	movs	r3, #3
    5976:	f842 3f10 	str.w	r3, [r2, #16]!
    597a:	483f      	ldr	r0, [pc, #252]	; (5a78 <main+0x2d0>)
    597c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5980:	f012 f817 	bl	179b2 <z_log_msg2_static_create.constprop.0>
    5984:	46b5      	mov	sp, r6
		return ret;
    5986:	e775      	b.n	5874 <main+0xcc>
	for (int i = 0; i < 11; ++i) {
    5988:	2300      	movs	r3, #0
    598a:	f8df a140 	ldr.w	sl, [pc, #320]	; 5acc <main+0x324>
		k_mem_slab_free(&mem_slab, &buffer);
    598e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 5aa0 <main+0x2f8>
	for (int i = 0; i < 11; ++i) {
    5992:	607b      	str	r3, [r7, #4]
			    size_t *size, int32_t timeout)
{
	const struct _dmic_ops *api =
		(const struct _dmic_ops *)dev->api;

	return api->read(dev, stream, buffer, size, timeout);
    5994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5998:	9300      	str	r3, [sp, #0]
    599a:	483e      	ldr	r0, [pc, #248]	; (5a94 <main+0x2ec>)
    599c:	f8d9 6008 	ldr.w	r6, [r9, #8]
    59a0:	f107 0318 	add.w	r3, r7, #24
    59a4:	f107 0208 	add.w	r2, r7, #8
    59a8:	2100      	movs	r1, #0
    59aa:	47b0      	blx	r6
		if (ret < 0) {
    59ac:	2800      	cmp	r0, #0
    59ae:	da41      	bge.n	5a34 <main+0x28c>
			LOG_INF("Read failed: %d", ret);
    59b0:	4b42      	ldr	r3, [pc, #264]	; (5abc <main+0x314>)
    59b2:	466e      	mov	r6, sp
    59b4:	b088      	sub	sp, #32
    59b6:	aa02      	add	r2, sp, #8
    59b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    59bc:	2303      	movs	r3, #3
    59be:	f842 3f10 	str.w	r3, [r2, #16]!
    59c2:	482d      	ldr	r0, [pc, #180]	; (5a78 <main+0x2d0>)
    59c4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    59c8:	f011 fff3 	bl	179b2 <z_log_msg2_static_create.constprop.0>
    59cc:	46b5      	mov	sp, r6
	return api->trigger(dev, cmd);
    59ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
    59d2:	4830      	ldr	r0, [pc, #192]	; (5a94 <main+0x2ec>)
    59d4:	2100      	movs	r1, #0
    59d6:	4798      	blx	r3
	if (ret < 0) {
    59d8:	2800      	cmp	r0, #0
    59da:	f6ff af4b 	blt.w	5874 <main+0xcc>
	ret = ei_wrapper_add_data(&audio, ei_wrapper_get_window_size());
    59de:	f012 fdfa 	bl	185d6 <ei_wrapper_get_window_size>
    59e2:	4601      	mov	r1, r0
    59e4:	4836      	ldr	r0, [pc, #216]	; (5ac0 <main+0x318>)
    59e6:	f005 fdd3 	bl	b590 <ei_wrapper_add_data>
	if (ret) {
    59ea:	b1c8      	cbz	r0, 5a20 <main+0x278>
		LOG_INF("Cannot provide input data (err: %d)\n", ret);
    59ec:	4b35      	ldr	r3, [pc, #212]	; (5ac4 <main+0x31c>)
    59ee:	466e      	mov	r6, sp
    59f0:	b088      	sub	sp, #32
    59f2:	aa02      	add	r2, sp, #8
    59f4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    59f8:	2303      	movs	r3, #3
    59fa:	f842 3f10 	str.w	r3, [r2, #16]!
    59fe:	481e      	ldr	r0, [pc, #120]	; (5a78 <main+0x2d0>)
    5a00:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5a04:	f011 ffd5 	bl	179b2 <z_log_msg2_static_create.constprop.0>
		LOG_INF("Increase CONFIG_EI_WRAPPER_DATA_BUF_SIZE\n");
    5a08:	4b2f      	ldr	r3, [pc, #188]	; (5ac8 <main+0x320>)
    5a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    5a0c:	46b5      	mov	sp, r6
    5a0e:	2302      	movs	r3, #2
    5a10:	4819      	ldr	r0, [pc, #100]	; (5a78 <main+0x2d0>)
    5a12:	62bb      	str	r3, [r7, #40]	; 0x28
    5a14:	f107 0228 	add.w	r2, r7, #40	; 0x28
    5a18:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5a1c:	f011 ffc9 	bl	179b2 <z_log_msg2_static_create.constprop.0>
	ei_wrapper_start_prediction(0,0);
    5a20:	2100      	movs	r1, #0
    5a22:	4608      	mov	r0, r1
    5a24:	f005 fe74 	bl	b710 <ei_wrapper_start_prediction>
    5a28:	2100      	movs	r1, #0
    5a2a:	f44f 20f0 	mov.w	r0, #491520	; 0x78000
    5a2e:	f00a fae9 	bl	10004 <z_impl_k_sleep>
    5a32:	e76c      	b.n	590e <main+0x166>
		if(i!=0){
    5a34:	687b      	ldr	r3, [r7, #4]
    5a36:	b16b      	cbz	r3, 5a54 <main+0x2ac>
    5a38:	68bb      	ldr	r3, [r7, #8]
				memcpy(&tempInt, buffer + 2*j, 2);
    5a3a:	4652      	mov	r2, sl
    5a3c:	f503 6148 	add.w	r1, r3, #3200	; 0xc80
				tempFloat = (float)tempInt;
    5a40:	f933 0b02 	ldrsh.w	r0, [r3], #2
    5a44:	ee07 0a90 	vmov	s15, r0
    5a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			for(int j=0; j<1600; j++){
    5a4c:	428b      	cmp	r3, r1
				tempFloat = (float)tempInt;
    5a4e:	ece2 7a01 	vstmia	r2!, {s15}
			for(int j=0; j<1600; j++){
    5a52:	d1f5      	bne.n	5a40 <main+0x298>
		k_mem_slab_free(&mem_slab, &buffer);
    5a54:	f107 0108 	add.w	r1, r7, #8
    5a58:	4640      	mov	r0, r8
    5a5a:	f008 fb25 	bl	e0a8 <k_mem_slab_free>
	for (int i = 0; i < 11; ++i) {
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	3301      	adds	r3, #1
    5a62:	2b0b      	cmp	r3, #11
    5a64:	607b      	str	r3, [r7, #4]
    5a66:	f50a 5ac8 	add.w	sl, sl, #6400	; 0x1900
    5a6a:	d193      	bne.n	5994 <main+0x1ec>
    5a6c:	e7af      	b.n	59ce <main+0x226>
    5a6e:	bf00      	nop
    5a70:	000056d5 	.word	0x000056d5
    5a74:	0003ba5d 	.word	0x0003ba5d
    5a78:	0001c810 	.word	0x0001c810
    5a7c:	0003ba7b 	.word	0x0003ba7b
    5a80:	0003bab3 	.word	0x0003bab3
    5a84:	0003ba82 	.word	0x0003ba82
    5a88:	0003baf1 	.word	0x0003baf1
    5a8c:	0003bb0e 	.word	0x0003bb0e
    5a90:	0003bb20 	.word	0x0003bb20
    5a94:	0001c66c 	.word	0x0001c66c
    5a98:	0003bb2c 	.word	0x0003bb2c
    5a9c:	01000003 	.word	0x01000003
    5aa0:	200005a8 	.word	0x200005a8
    5aa4:	0010c8e0 	.word	0x0010c8e0
    5aa8:	003567e0 	.word	0x003567e0
    5aac:	0c800010 	.word	0x0c800010
    5ab0:	00010020 	.word	0x00010020
    5ab4:	0003bb3c 	.word	0x0003bb3c
    5ab8:	0003bb4f 	.word	0x0003bb4f
    5abc:	0003bb68 	.word	0x0003bb68
    5ac0:	20000f30 	.word	0x20000f30
    5ac4:	0003bb78 	.word	0x0003bb78
    5ac8:	0003bb9d 	.word	0x0003bb9d
    5acc:	1ffff630 	.word	0x1ffff630

00005ad0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    5ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ad4:	b08d      	sub	sp, #52	; 0x34
    5ad6:	461f      	mov	r7, r3
    5ad8:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    5ada:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    5ade:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    5ae2:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    5ae4:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    5ae6:	0782      	lsls	r2, r0, #30
    5ae8:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    5aec:	9304      	str	r3, [sp, #16]
{
    5aee:	4605      	mov	r5, r0
    5af0:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    5af2:	f040 8252 	bne.w	5f9a <cbvprintf_package+0x4ca>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    5af6:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    5af8:	2800      	cmp	r0, #0
    5afa:	f040 8251 	bne.w	5fa0 <cbvprintf_package+0x4d0>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    5afe:	f001 0607 	and.w	r6, r1, #7
    5b02:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    5b04:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    5b08:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    5b0c:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
    5b10:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    5b12:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    5b16:	4652      	mov	r2, sl
	bool parsing = false;
    5b18:	4651      	mov	r1, sl
	size = sizeof(char *);
    5b1a:	46c3      	mov	fp, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    5b1c:	b105      	cbz	r5, 5b20 <cbvprintf_package+0x50>
				*(const char **)buf = s;
    5b1e:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    5b20:	9804      	ldr	r0, [sp, #16]
    5b22:	2800      	cmp	r0, #0
    5b24:	dc07      	bgt.n	5b36 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    5b26:	48cf      	ldr	r0, [pc, #828]	; (5e64 <cbvprintf_package+0x394>)
    5b28:	4287      	cmp	r7, r0
    5b2a:	f0c0 8143 	bcc.w	5db4 <cbvprintf_package+0x2e4>
    5b2e:	48ce      	ldr	r0, [pc, #824]	; (5e68 <cbvprintf_package+0x398>)
    5b30:	4287      	cmp	r7, r0
    5b32:	f080 813f 	bcs.w	5db4 <cbvprintf_package+0x2e4>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    5b36:	9802      	ldr	r0, [sp, #8]
    5b38:	f010 0e02 	ands.w	lr, r0, #2
    5b3c:	f000 815f 	beq.w	5dfe <cbvprintf_package+0x32e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    5b40:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    5b44:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    5b46:	f1be 0f00 	cmp.w	lr, #0
    5b4a:	f000 8139 	beq.w	5dc0 <cbvprintf_package+0x2f0>
    5b4e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5b52:	f0c0 8135 	bcc.w	5dc0 <cbvprintf_package+0x2f0>
					__ASSERT(false, "String with too many arguments");
    5b56:	49c5      	ldr	r1, [pc, #788]	; (5e6c <cbvprintf_package+0x39c>)
    5b58:	4ac5      	ldr	r2, [pc, #788]	; (5e70 <cbvprintf_package+0x3a0>)
    5b5a:	48c6      	ldr	r0, [pc, #792]	; (5e74 <cbvprintf_package+0x3a4>)
    5b5c:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    5b60:	f012 f875 	bl	17c4e <assert_print>
    5b64:	48c4      	ldr	r0, [pc, #784]	; (5e78 <cbvprintf_package+0x3a8>)
    5b66:	f012 f872 	bl	17c4e <assert_print>
    5b6a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
    5b6e:	48c0      	ldr	r0, [pc, #768]	; (5e70 <cbvprintf_package+0x3a0>)
    5b70:	f012 f866 	bl	17c40 <assert_post_action>
					return -EINVAL;
    5b74:	f06f 0015 	mvn.w	r0, #21
    5b78:	e0f8      	b.n	5d6c <cbvprintf_package+0x29c>
		if (!parsing) {
    5b7a:	b939      	cbnz	r1, 5b8c <cbvprintf_package+0xbc>
			if (*fmt == '%') {
    5b7c:	2825      	cmp	r0, #37	; 0x25
    5b7e:	f040 8142 	bne.w	5e06 <cbvprintf_package+0x336>
				parsing = true;
    5b82:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    5b84:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
    5b88:	46c3      	mov	fp, r8
    5b8a:	e13c      	b.n	5e06 <cbvprintf_package+0x336>
		switch (*fmt) {
    5b8c:	282b      	cmp	r0, #43	; 0x2b
    5b8e:	d825      	bhi.n	5bdc <cbvprintf_package+0x10c>
    5b90:	281f      	cmp	r0, #31
    5b92:	d801      	bhi.n	5b98 <cbvprintf_package+0xc8>
			parsing = false;
    5b94:	2100      	movs	r1, #0
    5b96:	e136      	b.n	5e06 <cbvprintf_package+0x336>
		switch (*fmt) {
    5b98:	f1a0 0c20 	sub.w	ip, r0, #32
    5b9c:	f1bc 0f0b 	cmp.w	ip, #11
    5ba0:	d8f8      	bhi.n	5b94 <cbvprintf_package+0xc4>
    5ba2:	f20f 0e08 	addw	lr, pc, #8
    5ba6:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    5baa:	bf00      	nop
    5bac:	00005e07 	.word	0x00005e07
    5bb0:	00005b95 	.word	0x00005b95
    5bb4:	00005b95 	.word	0x00005b95
    5bb8:	00005e07 	.word	0x00005e07
    5bbc:	00005b95 	.word	0x00005b95
    5bc0:	00005b95 	.word	0x00005b95
    5bc4:	00005b95 	.word	0x00005b95
    5bc8:	00005b95 	.word	0x00005b95
    5bcc:	00005b95 	.word	0x00005b95
    5bd0:	00005b95 	.word	0x00005b95
    5bd4:	00005d87 	.word	0x00005d87
    5bd8:	00005e07 	.word	0x00005e07
    5bdc:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
    5be0:	fa5f fe8c 	uxtb.w	lr, ip
    5be4:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
    5be8:	d8d4      	bhi.n	5b94 <cbvprintf_package+0xc4>
    5bea:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    5bee:	d8d1      	bhi.n	5b94 <cbvprintf_package+0xc4>
    5bf0:	f20f 0e04 	addw	lr, pc, #4
    5bf4:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    5bf8:	00005e07 	.word	0x00005e07
    5bfc:	00005e07 	.word	0x00005e07
    5c00:	00005b95 	.word	0x00005b95
    5c04:	00005e07 	.word	0x00005e07
    5c08:	00005e07 	.word	0x00005e07
    5c0c:	00005e07 	.word	0x00005e07
    5c10:	00005e07 	.word	0x00005e07
    5c14:	00005e07 	.word	0x00005e07
    5c18:	00005e07 	.word	0x00005e07
    5c1c:	00005e07 	.word	0x00005e07
    5c20:	00005e07 	.word	0x00005e07
    5c24:	00005e07 	.word	0x00005e07
    5c28:	00005e07 	.word	0x00005e07
    5c2c:	00005b95 	.word	0x00005b95
    5c30:	00005b95 	.word	0x00005b95
    5c34:	00005b95 	.word	0x00005b95
    5c38:	00005b95 	.word	0x00005b95
    5c3c:	00005b95 	.word	0x00005b95
    5c40:	00005b95 	.word	0x00005b95
    5c44:	00005b95 	.word	0x00005b95
    5c48:	00005d4d 	.word	0x00005d4d
    5c4c:	00005b95 	.word	0x00005b95
    5c50:	00005b95 	.word	0x00005b95
    5c54:	00005b95 	.word	0x00005b95
    5c58:	00005d4d 	.word	0x00005d4d
    5c5c:	00005d4d 	.word	0x00005d4d
    5c60:	00005d4d 	.word	0x00005d4d
    5c64:	00005b95 	.word	0x00005b95
    5c68:	00005b95 	.word	0x00005b95
    5c6c:	00005b95 	.word	0x00005b95
    5c70:	00005b95 	.word	0x00005b95
    5c74:	00005e07 	.word	0x00005e07
    5c78:	00005b95 	.word	0x00005b95
    5c7c:	00005b95 	.word	0x00005b95
    5c80:	00005b95 	.word	0x00005b95
    5c84:	00005b95 	.word	0x00005b95
    5c88:	00005b95 	.word	0x00005b95
    5c8c:	00005b95 	.word	0x00005b95
    5c90:	00005b95 	.word	0x00005b95
    5c94:	00005b95 	.word	0x00005b95
    5c98:	00005b95 	.word	0x00005b95
    5c9c:	00005b95 	.word	0x00005b95
    5ca0:	00005b95 	.word	0x00005b95
    5ca4:	00005d31 	.word	0x00005d31
    5ca8:	00005b95 	.word	0x00005b95
    5cac:	00005b95 	.word	0x00005b95
    5cb0:	00005b95 	.word	0x00005b95
    5cb4:	00005b95 	.word	0x00005b95
    5cb8:	00005b95 	.word	0x00005b95
    5cbc:	00005b95 	.word	0x00005b95
    5cc0:	00005b95 	.word	0x00005b95
    5cc4:	00005b95 	.word	0x00005b95
    5cc8:	00005d4d 	.word	0x00005d4d
    5ccc:	00005b95 	.word	0x00005b95
    5cd0:	00005d31 	.word	0x00005d31
    5cd4:	00005d31 	.word	0x00005d31
    5cd8:	00005d4d 	.word	0x00005d4d
    5cdc:	00005d4d 	.word	0x00005d4d
    5ce0:	00005d4d 	.word	0x00005d4d
    5ce4:	00005e07 	.word	0x00005e07
    5ce8:	00005d31 	.word	0x00005d31
    5cec:	00005d7b 	.word	0x00005d7b
    5cf0:	00005b95 	.word	0x00005b95
    5cf4:	00005e07 	.word	0x00005e07
    5cf8:	00005b95 	.word	0x00005b95
    5cfc:	00005d81 	.word	0x00005d81
    5d00:	00005d31 	.word	0x00005d31
    5d04:	00005d81 	.word	0x00005d81
    5d08:	00005b95 	.word	0x00005b95
    5d0c:	00005b95 	.word	0x00005b95
    5d10:	00005d81 	.word	0x00005d81
    5d14:	00005b85 	.word	0x00005b85
    5d18:	00005d31 	.word	0x00005d31
    5d1c:	00005b95 	.word	0x00005b95
    5d20:	00005b95 	.word	0x00005b95
    5d24:	00005d31 	.word	0x00005d31
    5d28:	00005b95 	.word	0x00005b95
    5d2c:	00005b85 	.word	0x00005b85
			if (fmt[-1] == 'l') {
    5d30:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    5d34:	296c      	cmp	r1, #108	; 0x6c
    5d36:	d125      	bne.n	5d84 <cbvprintf_package+0x2b4>
				if (fmt[-2] == 'l') {
    5d38:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    5d3c:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    5d3e:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    5d42:	d034      	beq.n	5dae <cbvprintf_package+0x2de>
			align = VA_STACK_ALIGN(void *);
    5d44:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
    5d48:	46c3      	mov	fp, r8
    5d4a:	e01c      	b.n	5d86 <cbvprintf_package+0x2b6>
				v.ld = va_arg(ap, long double);
    5d4c:	f109 0907 	add.w	r9, r9, #7
    5d50:	f029 0907 	bic.w	r9, r9, #7
			buf = (void *) ROUND_UP(buf, align);
    5d54:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    5d56:	ecb9 7b02 	vldmia	r9!, {d7}
			buf = (void *) ROUND_UP(buf, align);
    5d5a:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    5d5e:	b155      	cbz	r5, 5d76 <cbvprintf_package+0x2a6>
				if (BUF_OFFSET + size > len) {
    5d60:	9805      	ldr	r0, [sp, #20]
    5d62:	4420      	add	r0, r4
    5d64:	42b0      	cmp	r0, r6
    5d66:	d904      	bls.n	5d72 <cbvprintf_package+0x2a2>
					return -ENOSPC;
    5d68:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    5d6c:	b00d      	add	sp, #52	; 0x34
    5d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    5d72:	ed84 7b00 	vstr	d7, [r4]
			buf += size;
    5d76:	3408      	adds	r4, #8
			parsing = false;
    5d78:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    5d7a:	f04f 0808 	mov.w	r8, #8
    5d7e:	e703      	b.n	5b88 <cbvprintf_package+0xb8>
			parsing = false;
    5d80:	2100      	movs	r1, #0
    5d82:	e7df      	b.n	5d44 <cbvprintf_package+0x274>
			parsing = false;
    5d84:	2100      	movs	r1, #0
		buf = (void *) ROUND_UP(buf, align);
    5d86:	3c01      	subs	r4, #1
    5d88:	4444      	add	r4, r8
    5d8a:	f1c8 0c00 	rsb	ip, r8, #0
    5d8e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    5d92:	b125      	cbz	r5, 5d9e <cbvprintf_package+0x2ce>
    5d94:	ebab 0c05 	sub.w	ip, fp, r5
    5d98:	44a4      	add	ip, r4
    5d9a:	4566      	cmp	r6, ip
    5d9c:	d3e4      	bcc.n	5d68 <cbvprintf_package+0x298>
		if (*fmt == 's') {
    5d9e:	2873      	cmp	r0, #115	; 0x73
    5da0:	d170      	bne.n	5e84 <cbvprintf_package+0x3b4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    5da2:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    5da4:	f859 7b04 	ldr.w	r7, [r9], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    5da8:	3801      	subs	r0, #1
    5daa:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    5dac:	e6b6      	b.n	5b1c <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
    5dae:	f04f 0808 	mov.w	r8, #8
    5db2:	e7c9      	b.n	5d48 <cbvprintf_package+0x278>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    5db4:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    5db6:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    5dba:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
    5dbe:	e6c1      	b.n	5b44 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    5dc0:	2a0f      	cmp	r2, #15
    5dc2:	d90c      	bls.n	5dde <cbvprintf_package+0x30e>
					__ASSERT(false, "str_ptr_pos[] too small");
    5dc4:	4929      	ldr	r1, [pc, #164]	; (5e6c <cbvprintf_package+0x39c>)
    5dc6:	4a2a      	ldr	r2, [pc, #168]	; (5e70 <cbvprintf_package+0x3a0>)
    5dc8:	482a      	ldr	r0, [pc, #168]	; (5e74 <cbvprintf_package+0x3a4>)
    5dca:	f240 13f5 	movw	r3, #501	; 0x1f5
    5dce:	f011 ff3e 	bl	17c4e <assert_print>
    5dd2:	482a      	ldr	r0, [pc, #168]	; (5e7c <cbvprintf_package+0x3ac>)
    5dd4:	f011 ff3b 	bl	17c4e <assert_print>
    5dd8:	f240 11f5 	movw	r1, #501	; 0x1f5
    5ddc:	e6c7      	b.n	5b6e <cbvprintf_package+0x9e>
				if (buf0 != NULL) {
    5dde:	b375      	cbz	r5, 5e3e <cbvprintf_package+0x36e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    5de0:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    5de4:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
    5de8:	4496      	add	lr, r2
    5dea:	f1bc 0f00 	cmp.w	ip, #0
    5dee:	d020      	beq.n	5e32 <cbvprintf_package+0x362>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    5df0:	f060 007f 	orn	r0, r0, #127	; 0x7f
    5df4:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
    5df8:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    5dfc:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    5dfe:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    5e02:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    5e04:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
    5e06:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    5e0a:	2800      	cmp	r0, #0
    5e0c:	f47f aeb5 	bne.w	5b7a <cbvprintf_package+0xaa>
	if (BUF_OFFSET / sizeof(int) > 255) {
    5e10:	1b61      	subs	r1, r4, r5
    5e12:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    5e16:	d35f      	bcc.n	5ed8 <cbvprintf_package+0x408>
		__ASSERT(false, "too many format args");
    5e18:	4914      	ldr	r1, [pc, #80]	; (5e6c <cbvprintf_package+0x39c>)
    5e1a:	4a15      	ldr	r2, [pc, #84]	; (5e70 <cbvprintf_package+0x3a0>)
    5e1c:	4815      	ldr	r0, [pc, #84]	; (5e74 <cbvprintf_package+0x3a4>)
    5e1e:	f240 233d 	movw	r3, #573	; 0x23d
    5e22:	f011 ff14 	bl	17c4e <assert_print>
    5e26:	4816      	ldr	r0, [pc, #88]	; (5e80 <cbvprintf_package+0x3b0>)
    5e28:	f011 ff11 	bl	17c4e <assert_print>
    5e2c:	f240 213d 	movw	r1, #573	; 0x23d
    5e30:	e69d      	b.n	5b6e <cbvprintf_package+0x9e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    5e32:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
    5e36:	9803      	ldr	r0, [sp, #12]
    5e38:	3001      	adds	r0, #1
    5e3a:	9003      	str	r0, [sp, #12]
    5e3c:	e7de      	b.n	5dfc <cbvprintf_package+0x32c>
				} else if (is_ro || rws_pos_en) {
    5e3e:	f1bc 0f00 	cmp.w	ip, #0
    5e42:	d101      	bne.n	5e48 <cbvprintf_package+0x378>
    5e44:	9801      	ldr	r0, [sp, #4]
    5e46:	b108      	cbz	r0, 5e4c <cbvprintf_package+0x37c>
					len += 1;
    5e48:	3601      	adds	r6, #1
    5e4a:	e7d7      	b.n	5dfc <cbvprintf_package+0x32c>
					len += strlen(s) + 1 + 1;
    5e4c:	4638      	mov	r0, r7
    5e4e:	e9cd 2106 	strd	r2, r1, [sp, #24]
    5e52:	9305      	str	r3, [sp, #20]
    5e54:	f7fb f8a6 	bl	fa4 <strlen>
    5e58:	3602      	adds	r6, #2
    5e5a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    5e5e:	9b05      	ldr	r3, [sp, #20]
    5e60:	4406      	add	r6, r0
    5e62:	e7cb      	b.n	5dfc <cbvprintf_package+0x32c>
    5e64:	0001c544 	.word	0x0001c544
    5e68:	0003efa4 	.word	0x0003efa4
    5e6c:	0003d09f 	.word	0x0003d09f
    5e70:	0003bbcc 	.word	0x0003bbcc
    5e74:	0003baf1 	.word	0x0003baf1
    5e78:	0003bbfa 	.word	0x0003bbfa
    5e7c:	0003bc1b 	.word	0x0003bc1b
    5e80:	0003bc4a 	.word	0x0003bc4a
		} else if (size == sizeof(int)) {
    5e84:	f1bb 0f04 	cmp.w	fp, #4
    5e88:	d108      	bne.n	5e9c <cbvprintf_package+0x3cc>
			int v = va_arg(ap, int);
    5e8a:	f109 0c04 	add.w	ip, r9, #4
			if (buf0 != NULL) {
    5e8e:	b115      	cbz	r5, 5e96 <cbvprintf_package+0x3c6>
			int v = va_arg(ap, int);
    5e90:	f8d9 0000 	ldr.w	r0, [r9]
				*(int *)buf = v;
    5e94:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    5e96:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    5e98:	46e1      	mov	r9, ip
    5e9a:	e7b4      	b.n	5e06 <cbvprintf_package+0x336>
		} else if (size == sizeof(long long)) {
    5e9c:	f1bb 0f08 	cmp.w	fp, #8
    5ea0:	d10c      	bne.n	5ebc <cbvprintf_package+0x3ec>
			long long v = va_arg(ap, long long);
    5ea2:	f109 0007 	add.w	r0, r9, #7
    5ea6:	f020 0007 	bic.w	r0, r0, #7
    5eaa:	f100 0908 	add.w	r9, r0, #8
			if (buf0 != NULL) {
    5eae:	b11d      	cbz	r5, 5eb8 <cbvprintf_package+0x3e8>
			long long v = va_arg(ap, long long);
    5eb0:	ed90 7b00 	vldr	d7, [r0]
					*(long long *)buf = v;
    5eb4:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
    5eb8:	3408      	adds	r4, #8
    5eba:	e7a4      	b.n	5e06 <cbvprintf_package+0x336>
			__ASSERT(false, "unexpected size %u", size);
    5ebc:	4a3a      	ldr	r2, [pc, #232]	; (5fa8 <cbvprintf_package+0x4d8>)
    5ebe:	493b      	ldr	r1, [pc, #236]	; (5fac <cbvprintf_package+0x4dc>)
    5ec0:	483b      	ldr	r0, [pc, #236]	; (5fb0 <cbvprintf_package+0x4e0>)
    5ec2:	f240 2331 	movw	r3, #561	; 0x231
    5ec6:	f011 fec2 	bl	17c4e <assert_print>
    5eca:	4659      	mov	r1, fp
    5ecc:	4839      	ldr	r0, [pc, #228]	; (5fb4 <cbvprintf_package+0x4e4>)
    5ece:	f011 febe 	bl	17c4e <assert_print>
    5ed2:	f240 2131 	movw	r1, #561	; 0x231
    5ed6:	e64a      	b.n	5b6e <cbvprintf_package+0x9e>
	if (buf0 == NULL) {
    5ed8:	b91d      	cbnz	r5, 5ee2 <cbvprintf_package+0x412>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    5eda:	f1a6 0408 	sub.w	r4, r6, #8
    5ede:	1860      	adds	r0, r4, r1
    5ee0:	e744      	b.n	5d6c <cbvprintf_package+0x29c>
	if (rws_pos_en) {
    5ee2:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
    5ee4:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    5ee6:	0889      	lsrs	r1, r1, #2
    5ee8:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
    5eea:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    5eee:	b1a3      	cbz	r3, 5f1a <cbvprintf_package+0x44a>
		buf0[1] = 0;
    5ef0:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    5ef2:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    5ef4:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    5ef8:	f1ba 0f00 	cmp.w	sl, #0
    5efc:	d006      	beq.n	5f0c <cbvprintf_package+0x43c>
    5efe:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    5f00:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    5f04:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    5f08:	4562      	cmp	r2, ip
    5f0a:	d10a      	bne.n	5f22 <cbvprintf_package+0x452>
    5f0c:	f10d 0820 	add.w	r8, sp, #32
    5f10:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    5f14:	f1c5 0b01 	rsb	fp, r5, #1
    5f18:	e039      	b.n	5f8e <cbvprintf_package+0x4be>
		buf0[3] = 0;
    5f1a:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
    5f1c:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
    5f1e:	70eb      	strb	r3, [r5, #3]
    5f20:	e7e8      	b.n	5ef4 <cbvprintf_package+0x424>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    5f22:	f810 1b01 	ldrb.w	r1, [r0], #1
    5f26:	060b      	lsls	r3, r1, #24
    5f28:	d508      	bpl.n	5f3c <cbvprintf_package+0x46c>
			if (BUF_OFFSET + 1 > len) {
    5f2a:	eb04 080e 	add.w	r8, r4, lr
    5f2e:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    5f30:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    5f34:	f4ff af18 	bcc.w	5d68 <cbvprintf_package+0x298>
			*buf++ = pos;
    5f38:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    5f3c:	f10c 0c01 	add.w	ip, ip, #1
    5f40:	e7e2      	b.n	5f08 <cbvprintf_package+0x438>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    5f42:	f1ba 0f00 	cmp.w	sl, #0
    5f46:	d003      	beq.n	5f50 <cbvprintf_package+0x480>
    5f48:	f998 2000 	ldrsb.w	r2, [r8]
    5f4c:	2a00      	cmp	r2, #0
    5f4e:	db1c      	blt.n	5f8a <cbvprintf_package+0x4ba>
		if (rws_pos_en) {
    5f50:	9b01      	ldr	r3, [sp, #4]
    5f52:	bb03      	cbnz	r3, 5f96 <cbvprintf_package+0x4c6>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    5f54:	f898 2000 	ldrb.w	r2, [r8]
    5f58:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    5f5c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    5f60:	4638      	mov	r0, r7
    5f62:	f7fb f81f 	bl	fa4 <strlen>
    5f66:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    5f68:	eb04 010b 	add.w	r1, r4, fp
    5f6c:	4411      	add	r1, r2
    5f6e:	428e      	cmp	r6, r1
    5f70:	f4ff aefa 	bcc.w	5d68 <cbvprintf_package+0x298>
		*buf++ = str_ptr_pos[i];
    5f74:	f898 1000 	ldrb.w	r1, [r8]
    5f78:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5f7c:	4639      	mov	r1, r7
    5f7e:	4620      	mov	r0, r4
    5f80:	9202      	str	r2, [sp, #8]
    5f82:	f015 fead 	bl	1bce0 <memcpy>
		buf += size;
    5f86:	9a02      	ldr	r2, [sp, #8]
    5f88:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    5f8a:	f108 0801 	add.w	r8, r8, #1
    5f8e:	45c1      	cmp	r9, r8
    5f90:	d1d7      	bne.n	5f42 <cbvprintf_package+0x472>
	return BUF_OFFSET;
    5f92:	1b60      	subs	r0, r4, r5
    5f94:	e6ea      	b.n	5d6c <cbvprintf_package+0x29c>
			size = 0;
    5f96:	2200      	movs	r2, #0
    5f98:	e7e6      	b.n	5f68 <cbvprintf_package+0x498>
		return -EFAULT;
    5f9a:	f06f 000d 	mvn.w	r0, #13
    5f9e:	e6e5      	b.n	5d6c <cbvprintf_package+0x29c>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    5fa0:	2907      	cmp	r1, #7
    5fa2:	f63f adb1 	bhi.w	5b08 <cbvprintf_package+0x38>
    5fa6:	e6df      	b.n	5d68 <cbvprintf_package+0x298>
    5fa8:	0003bbcc 	.word	0x0003bbcc
    5fac:	0003d09f 	.word	0x0003d09f
    5fb0:	0003baf1 	.word	0x0003baf1
    5fb4:	0003bc35 	.word	0x0003bc35

00005fb8 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
    5fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fbc:	b08b      	sub	sp, #44	; 0x2c
    5fbe:	468b      	mov	fp, r1
    5fc0:	9f14      	ldr	r7, [sp, #80]	; 0x50
    5fc2:	9302      	str	r3, [sp, #8]
    5fc4:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(in_packaged != NULL);
    5fc6:	4606      	mov	r6, r0
    5fc8:	2800      	cmp	r0, #0
    5fca:	f040 8156 	bne.w	627a <cbprintf_package_copy+0x2c2>
    5fce:	49ad      	ldr	r1, [pc, #692]	; (6284 <cbprintf_package_copy+0x2cc>)
    5fd0:	48ad      	ldr	r0, [pc, #692]	; (6288 <cbprintf_package_copy+0x2d0>)
    5fd2:	4aae      	ldr	r2, [pc, #696]	; (628c <cbprintf_package_copy+0x2d4>)
    5fd4:	f240 23d6 	movw	r3, #726	; 0x2d6
    5fd8:	f011 fe39 	bl	17c4e <assert_print>
    5fdc:	48ab      	ldr	r0, [pc, #684]	; (628c <cbprintf_package_copy+0x2d4>)
    5fde:	f240 21d6 	movw	r1, #726	; 0x2d6
    5fe2:	f011 fe2d 	bl	17c40 <assert_post_action>
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
    5fe6:	f1bb 0f00 	cmp.w	fp, #0
    5fea:	d015      	beq.n	6018 <cbprintf_package_copy+0x60>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
    5fec:	78b5      	ldrb	r5, [r6, #2]
    5fee:	9503      	str	r5, [sp, #12]
	ro_cpy = ros_nbr &&
    5ff0:	bb85      	cbnz	r5, 6054 <cbprintf_package_copy+0x9c>
    5ff2:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
    5ff4:	78f3      	ldrb	r3, [r6, #3]
    5ff6:	9300      	str	r3, [sp, #0]
	rw_cpy = rws_nbr > 0 &&
    5ff8:	b10b      	cbz	r3, 5ffe <cbprintf_package_copy+0x46>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    5ffa:	07ba      	lsls	r2, r7, #30
    5ffc:	d42d      	bmi.n	605a <cbprintf_package_copy+0xa2>
    5ffe:	f1ba 0f00 	cmp.w	sl, #0
    6002:	d12a      	bne.n	605a <cbprintf_package_copy+0xa2>
		if (packaged) {
    6004:	b124      	cbz	r4, 6010 <cbprintf_package_copy+0x58>
    6006:	465a      	mov	r2, fp
    6008:	4631      	mov	r1, r6
    600a:	4620      	mov	r0, r4
    600c:	f015 fe68 	bl	1bce0 <memcpy>
			}

			str_pos++;
		}

		return out_len;
    6010:	4658      	mov	r0, fp
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
    6012:	b00b      	add	sp, #44	; 0x2c
    6014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT_NO_MSG(packaged != NULL);
    6018:	499d      	ldr	r1, [pc, #628]	; (6290 <cbprintf_package_copy+0x2d8>)
    601a:	489b      	ldr	r0, [pc, #620]	; (6288 <cbprintf_package_copy+0x2d0>)
    601c:	4a9b      	ldr	r2, [pc, #620]	; (628c <cbprintf_package_copy+0x2d4>)
    601e:	23c2      	movs	r3, #194	; 0xc2
    6020:	f011 fe15 	bl	17c4e <assert_print>
    6024:	4899      	ldr	r0, [pc, #612]	; (628c <cbprintf_package_copy+0x2d4>)
    6026:	21c2      	movs	r1, #194	; 0xc2
    6028:	f011 fe0a 	bl	17c40 <assert_post_action>
	buf += ros_nbr;
    602c:	7830      	ldrb	r0, [r6, #0]
    602e:	78b5      	ldrb	r5, [r6, #2]
	s_nbr     = buf[1];
    6030:	f896 9001 	ldrb.w	r9, [r6, #1]
	buf += ros_nbr;
    6034:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    6038:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
    603a:	f04f 0a00 	mov.w	sl, #0
    603e:	45d1      	cmp	r9, sl
    6040:	d9d4      	bls.n	5fec <cbprintf_package_copy+0x34>
		buf++;
    6042:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
    6044:	4628      	mov	r0, r5
    6046:	f7fa ffad 	bl	fa4 <strlen>
    604a:	3001      	adds	r0, #1
    604c:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
    604e:	f10a 0a01 	add.w	sl, sl, #1
    6052:	e7f4      	b.n	603e <cbprintf_package_copy+0x86>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
    6054:	f007 0a01 	and.w	sl, r7, #1
    6058:	e7cc      	b.n	5ff4 <cbprintf_package_copy+0x3c>
	args_size = buf[0] * sizeof(int);
    605a:	f896 9000 	ldrb.w	r9, [r6]
    605e:	ea4f 0389 	mov.w	r3, r9, lsl #2
    6062:	9301      	str	r3, [sp, #4]
	uint8_t *str_pos = &buf[args_size];
    6064:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
    6068:	2c00      	cmp	r4, #0
    606a:	d15b      	bne.n	6124 <cbprintf_package_copy+0x16c>
		if (ro_cpy) {
    606c:	f1ba 0f00 	cmp.w	sl, #0
    6070:	d032      	beq.n	60d8 <cbprintf_package_copy+0x120>
    6072:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
    6074:	454d      	cmp	r5, r9
    6076:	d11d      	bne.n	60b4 <cbprintf_package_copy+0xfc>
    6078:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
    607a:	9b00      	ldr	r3, [sp, #0]
    607c:	f8df c218 	ldr.w	ip, [pc, #536]	; 6298 <cbprintf_package_copy+0x2e0>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
    6080:	4984      	ldr	r1, [pc, #528]	; (6294 <cbprintf_package_copy+0x2dc>)
    6082:	444b      	add	r3, r9
		bool drop_ro_str_pos = !(flags &
    6084:	f007 0805 	and.w	r8, r7, #5
		for (int i = 0; i < rws_nbr; i++) {
    6088:	464d      	mov	r5, r9
    608a:	469a      	mov	sl, r3
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
    608c:	f007 0202 	and.w	r2, r7, #2
		for (int i = 0; i < rws_nbr; i++) {
    6090:	45aa      	cmp	sl, r5
    6092:	d0bd      	beq.n	6010 <cbprintf_package_copy+0x58>
			const char *str = *(const char **)&buf32[*str_pos];
    6094:	f815 0b01 	ldrb.w	r0, [r5], #1
    6098:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    609c:	4560      	cmp	r0, ip
    609e:	d324      	bcc.n	60ea <cbprintf_package_copy+0x132>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
    60a0:	4288      	cmp	r0, r1
    60a2:	d222      	bcs.n	60ea <cbprintf_package_copy+0x132>
    60a4:	07fb      	lsls	r3, r7, #31
    60a6:	d43a      	bmi.n	611e <cbprintf_package_copy+0x166>
			if (is_ro && drop_ro_str_pos) {
    60a8:	f1b8 0f00 	cmp.w	r8, #0
    60ac:	d1f0      	bne.n	6090 <cbprintf_package_copy+0xd8>
				out_len--;
    60ae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
		for (int i = 0; i < rws_nbr; i++) {
    60b2:	e7ed      	b.n	6090 <cbprintf_package_copy+0xd8>
				const char *str = *(const char **)&buf32[*str_pos];
    60b4:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
    60b8:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    60bc:	f7fa ff72 	bl	fa4 <strlen>
				if (strl && strl_cnt < strl_len) {
    60c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
    60c2:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    60c4:	b133      	cbz	r3, 60d4 <cbprintf_package_copy+0x11c>
    60c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    60c8:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
    60ca:	bf3e      	ittt	cc
    60cc:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
    60ce:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
    60d2:	3401      	addcc	r4, #1
				out_len += len;
    60d4:	4483      	add	fp, r0
			for (int i = 0; i < ros_nbr; i++) {
    60d6:	e7cd      	b.n	6074 <cbprintf_package_copy+0xbc>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    60d8:	b12d      	cbz	r5, 60e6 <cbprintf_package_copy+0x12e>
    60da:	f017 0404 	ands.w	r4, r7, #4
    60de:	d0cc      	beq.n	607a <cbprintf_package_copy+0xc2>
				str_pos += ros_nbr;
    60e0:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
    60e2:	4654      	mov	r4, sl
    60e4:	e7c9      	b.n	607a <cbprintf_package_copy+0xc2>
    60e6:	462c      	mov	r4, r5
    60e8:	e7c7      	b.n	607a <cbprintf_package_copy+0xc2>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
    60ea:	2a00      	cmp	r2, #0
    60ec:	d0d0      	beq.n	6090 <cbprintf_package_copy+0xd8>
    60ee:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
    60f2:	9200      	str	r2, [sp, #0]
    60f4:	f7fa ff56 	bl	fa4 <strlen>
				if (strl && strl_cnt < strl_len) {
    60f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    60fa:	f8df c19c 	ldr.w	ip, [pc, #412]	; 6298 <cbprintf_package_copy+0x2e0>
    60fe:	9a00      	ldr	r2, [sp, #0]
    6100:	4964      	ldr	r1, [pc, #400]	; (6294 <cbprintf_package_copy+0x2dc>)
		return 1 + strlen(str);
    6102:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    6104:	b133      	cbz	r3, 6114 <cbprintf_package_copy+0x15c>
    6106:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6108:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
    610a:	bf3e      	ittt	cc
    610c:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
    610e:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
    6112:	3401      	addcc	r4, #1
				out_len += len;
    6114:	4483      	add	fp, r0
			if (is_ro && drop_ro_str_pos) {
    6116:	f1b9 0f00 	cmp.w	r9, #0
    611a:	d0b9      	beq.n	6090 <cbprintf_package_copy+0xd8>
    611c:	e7c4      	b.n	60a8 <cbprintf_package_copy+0xf0>
    611e:	f04f 0901 	mov.w	r9, #1
    6122:	e7e6      	b.n	60f2 <cbprintf_package_copy+0x13a>
    6124:	9a01      	ldr	r2, [sp, #4]
    6126:	4631      	mov	r1, r6
    6128:	4620      	mov	r0, r4
    612a:	f015 fdd9 	bl	1bce0 <memcpy>
	dst += args_size;
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	eb04 0803 	add.w	r8, r4, r3
	if (ro_cpy) {
    6134:	f1ba 0f00 	cmp.w	sl, #0
    6138:	d00a      	beq.n	6150 <cbprintf_package_copy+0x198>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
    613a:	2310      	movs	r3, #16
    613c:	4649      	mov	r1, r9
    613e:	462a      	mov	r2, r5
    6140:	a806      	add	r0, sp, #24
    6142:	f015 fddb 	bl	1bcfc <__memcpy_chk>
		dst_hdr[2] = 0;
    6146:	2300      	movs	r3, #0
    6148:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
    614a:	44a9      	add	r9, r5
	dst += args_size;
    614c:	4643      	mov	r3, r8
    614e:	e00b      	b.n	6168 <cbprintf_package_copy+0x1b0>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    6150:	b1cd      	cbz	r5, 6186 <cbprintf_package_copy+0x1ce>
    6152:	077b      	lsls	r3, r7, #29
    6154:	d517      	bpl.n	6186 <cbprintf_package_copy+0x1ce>
    6156:	462a      	mov	r2, r5
    6158:	4649      	mov	r1, r9
    615a:	4640      	mov	r0, r8
    615c:	f015 fdc0 	bl	1bce0 <memcpy>
			str_pos += ros_nbr;
    6160:	44a9      	add	r9, r5
			dst += ros_nbr;
    6162:	eb08 0305 	add.w	r3, r8, r5
		scpy_cnt = 0;
    6166:	4655      	mov	r5, sl
    6168:	9a00      	ldr	r2, [sp, #0]
    616a:	f8df e128 	ldr.w	lr, [pc, #296]	; 6294 <cbprintf_package_copy+0x2dc>
    616e:	eb02 0c09 	add.w	ip, r2, r9
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
    6172:	f007 0201 	and.w	r2, r7, #1
    6176:	9204      	str	r2, [sp, #16]
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    6178:	f007 0204 	and.w	r2, r7, #4
    617c:	4649      	mov	r1, r9
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    617e:	f007 0a02 	and.w	sl, r7, #2
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    6182:	9205      	str	r2, [sp, #20]
    6184:	e021      	b.n	61ca <cbprintf_package_copy+0x212>
			dst_hdr[2] = 0;
    6186:	2500      	movs	r5, #0
    6188:	70a5      	strb	r5, [r4, #2]
    618a:	e7df      	b.n	614c <cbprintf_package_copy+0x194>
		const char *str = *(const char **)&buf32[*str_pos];
    618c:	f811 2b01 	ldrb.w	r2, [r1], #1
    6190:	4f41      	ldr	r7, [pc, #260]	; (6298 <cbprintf_package_copy+0x2e0>)
    6192:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
    6196:	42b8      	cmp	r0, r7
    6198:	d301      	bcc.n	619e <cbprintf_package_copy+0x1e6>
    619a:	4570      	cmp	r0, lr
    619c:	d305      	bcc.n	61aa <cbprintf_package_copy+0x1f2>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    619e:	f1ba 0f00 	cmp.w	sl, #0
    61a2:	d104      	bne.n	61ae <cbprintf_package_copy+0x1f6>
				*dst++ = *str_pos;
    61a4:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i = 0; i < rws_nbr; i++) {
    61a8:	e00f      	b.n	61ca <cbprintf_package_copy+0x212>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
    61aa:	9804      	ldr	r0, [sp, #16]
    61ac:	b130      	cbz	r0, 61bc <cbprintf_package_copy+0x204>
				cpy_str_pos[scpy_cnt++] = *str_pos;
    61ae:	af0a      	add	r7, sp, #40	; 0x28
    61b0:	1c68      	adds	r0, r5, #1
    61b2:	443d      	add	r5, r7
    61b4:	f805 2c10 	strb.w	r2, [r5, #-16]
    61b8:	b2c5      	uxtb	r5, r0
    61ba:	e006      	b.n	61ca <cbprintf_package_copy+0x212>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    61bc:	9805      	ldr	r0, [sp, #20]
    61be:	b120      	cbz	r0, 61ca <cbprintf_package_copy+0x212>
				*dst++ = *str_pos;
    61c0:	f803 2b01 	strb.w	r2, [r3], #1
				dst_hdr[2]++;
    61c4:	78a2      	ldrb	r2, [r4, #2]
    61c6:	3201      	adds	r2, #1
    61c8:	70a2      	strb	r2, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
    61ca:	458c      	cmp	ip, r1
    61cc:	d1de      	bne.n	618c <cbprintf_package_copy+0x1d4>
	dst_hdr[1] += scpy_cnt;
    61ce:	7862      	ldrb	r2, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    61d0:	9900      	ldr	r1, [sp, #0]
	dst_hdr[1] += scpy_cnt;
    61d2:	442a      	add	r2, r5
    61d4:	7062      	strb	r2, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
    61d6:	78a2      	ldrb	r2, [r4, #2]
    61d8:	eba3 0808 	sub.w	r8, r3, r8
    61dc:	eba8 0802 	sub.w	r8, r8, r2
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    61e0:	9a03      	ldr	r2, [sp, #12]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
    61e2:	f884 8003 	strb.w	r8, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    61e6:	440a      	add	r2, r1
    61e8:	ebab 0002 	sub.w	r0, fp, r2
    61ec:	9a01      	ldr	r2, [sp, #4]
    61ee:	eba0 0b02 	sub.w	fp, r0, r2
    61f2:	465a      	mov	r2, fp
    61f4:	4618      	mov	r0, r3
    61f6:	4449      	add	r1, r9
    61f8:	f015 fd72 	bl	1bce0 <memcpy>
    61fc:	4603      	mov	r3, r0
	dst += strs_len;
    61fe:	445b      	add	r3, fp
		return dst - dst_hdr;
    6200:	1b18      	subs	r0, r3, r4
	if (scpy_cnt == 0) {
    6202:	2d00      	cmp	r5, #0
    6204:	f43f af05 	beq.w	6012 <cbprintf_package_copy+0x5a>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
    6208:	9a02      	ldr	r2, [sp, #8]
    620a:	1a14      	subs	r4, r2, r0
	if (rem <= scpy_cnt) {
    620c:	42a5      	cmp	r5, r4
    620e:	d302      	bcc.n	6216 <cbprintf_package_copy+0x25e>
		return -ENOSPC;
    6210:	f06f 001b 	mvn.w	r0, #27
    6214:	e6fd      	b.n	6012 <cbprintf_package_copy+0x5a>
	for (int i = 0; i < scpy_cnt; i++) {
    6216:	f04f 0800 	mov.w	r8, #0
		uint8_t loc = cpy_str_pos[i];
    621a:	aa06      	add	r2, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
    621c:	9815      	ldr	r0, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
    621e:	f812 2008 	ldrb.w	r2, [r2, r8]
		const char *str = *(const char **)&buf32[loc];
    6222:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    6226:	b1c0      	cbz	r0, 625a <cbprintf_package_copy+0x2a2>
    6228:	f830 7018 	ldrh.w	r7, [r0, r8, lsl #1]
		*dst = loc;
    622c:	4699      	mov	r9, r3
		rem--;
    622e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
		*dst = loc;
    6232:	f809 2b01 	strb.w	r2, [r9], #1
	if (strl) {
    6236:	b197      	cbz	r7, 625e <cbprintf_package_copy+0x2a6>
    6238:	463a      	mov	r2, r7
    623a:	4648      	mov	r0, r9
    623c:	f015 fd50 	bl	1bce0 <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
    6240:	f108 0801 	add.w	r8, r8, #1
    6244:	4545      	cmp	r5, r8
		rem -= cpy_len;
    6246:	ebaa 0407 	sub.w	r4, sl, r7
		dst += cpy_len;
    624a:	eb09 0307 	add.w	r3, r9, r7
	for (int i = 0; i < scpy_cnt; i++) {
    624e:	dce4      	bgt.n	621a <cbprintf_package_copy+0x262>
	return len - rem;
    6250:	9b02      	ldr	r3, [sp, #8]
    6252:	441f      	add	r7, r3
    6254:	eba7 000a 	sub.w	r0, r7, sl
    6258:	e6db      	b.n	6012 <cbprintf_package_copy+0x5a>
		uint16_t str_len = strl ? strl[i] : 0;
    625a:	9f15      	ldr	r7, [sp, #84]	; 0x54
    625c:	e7e6      	b.n	622c <cbprintf_package_copy+0x274>
    625e:	3901      	subs	r1, #1
	if (strl) {
    6260:	2701      	movs	r7, #1
	for (size_t i = 0; i < num; i++) {
    6262:	42bc      	cmp	r4, r7
    6264:	d0d4      	beq.n	6210 <cbprintf_package_copy+0x258>
		dst[i] = src[i];
    6266:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    626a:	55da      	strb	r2, [r3, r7]
		if (src[i] == '\0') {
    626c:	1c78      	adds	r0, r7, #1
    626e:	b912      	cbnz	r2, 6276 <cbprintf_package_copy+0x2be>
		if (cpy_len < 0) {
    6270:	2f00      	cmp	r7, #0
    6272:	dae5      	bge.n	6240 <cbprintf_package_copy+0x288>
    6274:	e7cc      	b.n	6210 <cbprintf_package_copy+0x258>
    6276:	4607      	mov	r7, r0
    6278:	e7f3      	b.n	6262 <cbprintf_package_copy+0x2aa>
	in_len != 0 ? in_len : get_package_len(in_packaged);
    627a:	2900      	cmp	r1, #0
    627c:	f47f aeb6 	bne.w	5fec <cbprintf_package_copy+0x34>
    6280:	e6d4      	b.n	602c <cbprintf_package_copy+0x74>
    6282:	bf00      	nop
    6284:	0003bc61 	.word	0x0003bc61
    6288:	0003baf1 	.word	0x0003baf1
    628c:	0003bbcc 	.word	0x0003bbcc
    6290:	0003bc64 	.word	0x0003bc64
    6294:	0003efa4 	.word	0x0003efa4
    6298:	0001c544 	.word	0x0001c544

0000629c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    629c:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    629e:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    62a0:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    62a2:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    62a6:	2c03      	cmp	r4, #3
{
    62a8:	4605      	mov	r5, r0
	switch (method) {
    62aa:	d002      	beq.n	62b2 <sys_notify_finalize+0x16>
    62ac:	b12c      	cbz	r4, 62ba <sys_notify_finalize+0x1e>
    62ae:	2000      	movs	r0, #0
    62b0:	e000      	b.n	62b4 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    62b2:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    62b4:	2300      	movs	r3, #0
    62b6:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    62b8:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    62ba:	4a05      	ldr	r2, [pc, #20]	; (62d0 <sys_notify_finalize+0x34>)
    62bc:	4905      	ldr	r1, [pc, #20]	; (62d4 <sys_notify_finalize+0x38>)
    62be:	4806      	ldr	r0, [pc, #24]	; (62d8 <sys_notify_finalize+0x3c>)
    62c0:	2345      	movs	r3, #69	; 0x45
    62c2:	f011 fcc4 	bl	17c4e <assert_print>
    62c6:	4802      	ldr	r0, [pc, #8]	; (62d0 <sys_notify_finalize+0x34>)
    62c8:	2145      	movs	r1, #69	; 0x45
    62ca:	f011 fcb9 	bl	17c40 <assert_post_action>
    62ce:	e7ee      	b.n	62ae <sys_notify_finalize+0x12>
    62d0:	0003bc7c 	.word	0x0003bc7c
    62d4:	0003d09f 	.word	0x0003d09f
    62d8:	0003baf1 	.word	0x0003baf1

000062dc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    62dc:	4b01      	ldr	r3, [pc, #4]	; (62e4 <__printk_hook_install+0x8>)
    62de:	6018      	str	r0, [r3, #0]
}
    62e0:	4770      	bx	lr
    62e2:	bf00      	nop
    62e4:	20000000 	.word	0x20000000

000062e8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    62e8:	b530      	push	{r4, r5, lr}
    62ea:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    62ec:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    62f0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    62f2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    62f4:	a901      	add	r1, sp, #4
    62f6:	4805      	ldr	r0, [pc, #20]	; (630c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    62f8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    62fa:	f7fa fe5d 	bl	fb8 <cbvprintf>

	if (ctx.count < ctx.max) {
    62fe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    6302:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    6304:	bfb8      	it	lt
    6306:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    6308:	b005      	add	sp, #20
    630a:	bd30      	pop	{r4, r5, pc}
    630c:	00017a3f 	.word	0x00017a3f

00006310 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    6310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6314:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6318:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    631c:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    631e:	f019 0f08 	tst.w	r9, #8
{
    6322:	4604      	mov	r4, r0
    6324:	9201      	str	r2, [sp, #4]
	if (processing) {
    6326:	d024      	beq.n	6372 <process_event+0x62>
		if (evt == EVT_COMPLETE) {
    6328:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    632a:	bf0c      	ite	eq
    632c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    6330:	f049 0920 	orrne.w	r9, r9, #32
    6334:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    6338:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    633a:	4620      	mov	r0, r4
    633c:	f008 f862 	bl	e404 <z_spin_unlock_valid>
    6340:	b968      	cbnz	r0, 635e <process_event+0x4e>
    6342:	4aa2      	ldr	r2, [pc, #648]	; (65cc <process_event+0x2bc>)
    6344:	49a2      	ldr	r1, [pc, #648]	; (65d0 <process_event+0x2c0>)
    6346:	48a3      	ldr	r0, [pc, #652]	; (65d4 <process_event+0x2c4>)
    6348:	23b9      	movs	r3, #185	; 0xb9
    634a:	f011 fc80 	bl	17c4e <assert_print>
    634e:	48a2      	ldr	r0, [pc, #648]	; (65d8 <process_event+0x2c8>)
    6350:	4621      	mov	r1, r4
    6352:	f011 fc7c 	bl	17c4e <assert_print>
    6356:	489d      	ldr	r0, [pc, #628]	; (65cc <process_event+0x2bc>)
    6358:	21b9      	movs	r1, #185	; 0xb9
    635a:	f011 fc71 	bl	17c40 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    635e:	9b01      	ldr	r3, [sp, #4]
    6360:	f383 8811 	msr	BASEPRI, r3
    6364:	f3bf 8f6f 	isb	sy
}
    6368:	b003      	add	sp, #12
    636a:	ecbd 8b02 	vpop	{d8}
    636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    6372:	4f9a      	ldr	r7, [pc, #616]	; (65dc <process_event+0x2cc>)
    6374:	f8df 825c 	ldr.w	r8, [pc, #604]	; 65d4 <process_event+0x2c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6378:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    637c:	2902      	cmp	r1, #2
    637e:	d106      	bne.n	638e <process_event+0x7e>
			evt = process_recheck(mgr);
    6380:	4620      	mov	r0, r4
    6382:	f011 fb8b 	bl	17a9c <process_recheck>
		if (evt == EVT_NOP) {
    6386:	2800      	cmp	r0, #0
    6388:	d0d6      	beq.n	6338 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
    638a:	2801      	cmp	r0, #1
    638c:	d168      	bne.n	6460 <process_event+0x150>
			res = mgr->last_res;
    638e:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6392:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    6394:	f1bb 0f00 	cmp.w	fp, #0
    6398:	da1c      	bge.n	63d4 <process_event+0xc4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    639a:	2600      	movs	r6, #0
		*clients = mgr->clients;
    639c:	6825      	ldr	r5, [r4, #0]
		onoff_transition_fn transit = NULL;
    639e:	9600      	str	r6, [sp, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    63a0:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    63a4:	e9c4 6600 	strd	r6, r6, [r4]
    63a8:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    63ac:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    63ae:	8ba3      	ldrh	r3, [r4, #28]
    63b0:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    63b4:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    63b6:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
    63ba:	d003      	beq.n	63c4 <process_event+0xb4>
		if (do_monitors
    63bc:	68a2      	ldr	r2, [r4, #8]
    63be:	2a00      	cmp	r2, #0
    63c0:	f040 811c 	bne.w	65fc <process_event+0x2ec>
		    || !sys_slist_is_empty(&clients)
    63c4:	b91d      	cbnz	r5, 63ce <process_event+0xbe>
		    || (transit != NULL)) {
    63c6:	9a00      	ldr	r2, [sp, #0]
    63c8:	2a00      	cmp	r2, #0
    63ca:	f000 8162 	beq.w	6692 <process_event+0x382>
    63ce:	f04f 0a00 	mov.w	sl, #0
    63d2:	e115      	b.n	6600 <process_event+0x2f0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    63d4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    63d8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    63da:	2901      	cmp	r1, #1
    63dc:	d821      	bhi.n	6422 <process_event+0x112>
	list->head = NULL;
    63de:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    63e0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    63e4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    63e6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    63e8:	b29b      	uxth	r3, r3
	list->tail = NULL;
    63ea:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    63ee:	d10a      	bne.n	6406 <process_event+0xf6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    63f0:	b13d      	cbz	r5, 6402 <process_event+0xf2>
    63f2:	8be2      	ldrh	r2, [r4, #30]
    63f4:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    63f6:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    63f8:	3201      	adds	r2, #1
    63fa:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    63fc:	2900      	cmp	r1, #0
    63fe:	d1fa      	bne.n	63f6 <process_event+0xe6>
    6400:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6402:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    6406:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    6408:	4620      	mov	r0, r4
    640a:	f011 fb47 	bl	17a9c <process_recheck>
    640e:	2800      	cmp	r0, #0
    6410:	f000 80d7 	beq.w	65c2 <process_event+0x2b2>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    6414:	8ba3      	ldrh	r3, [r4, #28]
    6416:	f043 0320 	orr.w	r3, r3, #32
    641a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    641c:	2300      	movs	r3, #0
    641e:	9300      	str	r3, [sp, #0]
    6420:	e7c5      	b.n	63ae <process_event+0x9e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    6422:	2a04      	cmp	r2, #4
    6424:	d10f      	bne.n	6446 <process_event+0x136>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6426:	f023 0307 	bic.w	r3, r3, #7
    642a:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    642c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    642e:	4620      	mov	r0, r4
    6430:	f011 fb34 	bl	17a9c <process_recheck>
    6434:	2800      	cmp	r0, #0
    6436:	f000 80c6 	beq.w	65c6 <process_event+0x2b6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    643a:	f042 0220 	orr.w	r2, r2, #32
    643e:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    6440:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    6442:	9500      	str	r5, [sp, #0]
    6444:	e7b3      	b.n	63ae <process_event+0x9e>
		__ASSERT_NO_MSG(false);
    6446:	4640      	mov	r0, r8
    6448:	4965      	ldr	r1, [pc, #404]	; (65e0 <process_event+0x2d0>)
    644a:	f240 131b 	movw	r3, #283	; 0x11b
    644e:	463a      	mov	r2, r7
    6450:	f011 fbfd 	bl	17c4e <assert_print>
    6454:	f240 111b 	movw	r1, #283	; 0x11b
    6458:	4638      	mov	r0, r7
    645a:	f011 fbf1 	bl	17c40 <assert_post_action>
    645e:	e7ef      	b.n	6440 <process_event+0x130>
		} else if (evt == EVT_START) {
    6460:	2803      	cmp	r0, #3
    6462:	d135      	bne.n	64d0 <process_event+0x1c0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    6464:	f1b9 0f00 	cmp.w	r9, #0
    6468:	d00b      	beq.n	6482 <process_event+0x172>
    646a:	495e      	ldr	r1, [pc, #376]	; (65e4 <process_event+0x2d4>)
    646c:	4640      	mov	r0, r8
    646e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    6472:	463a      	mov	r2, r7
    6474:	f011 fbeb 	bl	17c4e <assert_print>
    6478:	f44f 71ab 	mov.w	r1, #342	; 0x156
    647c:	4638      	mov	r0, r7
    647e:	f011 fbdf 	bl	17c40 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    6482:	6823      	ldr	r3, [r4, #0]
    6484:	b95b      	cbnz	r3, 649e <process_event+0x18e>
    6486:	4958      	ldr	r1, [pc, #352]	; (65e8 <process_event+0x2d8>)
    6488:	4640      	mov	r0, r8
    648a:	f240 1357 	movw	r3, #343	; 0x157
    648e:	463a      	mov	r2, r7
    6490:	f011 fbdd 	bl	17c4e <assert_print>
    6494:	f240 1157 	movw	r1, #343	; 0x157
    6498:	4638      	mov	r0, r7
    649a:	f011 fbd1 	bl	17c40 <assert_post_action>
			transit = mgr->transitions->start;
    649e:	6923      	ldr	r3, [r4, #16]
    64a0:	681b      	ldr	r3, [r3, #0]
    64a2:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
    64a4:	b95b      	cbnz	r3, 64be <process_event+0x1ae>
    64a6:	4951      	ldr	r1, [pc, #324]	; (65ec <process_event+0x2dc>)
    64a8:	4640      	mov	r0, r8
    64aa:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    64ae:	463a      	mov	r2, r7
    64b0:	f011 fbcd 	bl	17c4e <assert_print>
    64b4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    64b8:	4638      	mov	r0, r7
    64ba:	f011 fbc1 	bl	17c40 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    64be:	8ba3      	ldrh	r3, [r4, #28]
    64c0:	f023 0307 	bic.w	r3, r3, #7
    64c4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    64c8:	83a3      	strh	r3, [r4, #28]
}
    64ca:	2500      	movs	r5, #0
		res = 0;
    64cc:	46ab      	mov	fp, r5
}
    64ce:	e76e      	b.n	63ae <process_event+0x9e>
		} else if (evt == EVT_STOP) {
    64d0:	2804      	cmp	r0, #4
    64d2:	d132      	bne.n	653a <process_event+0x22a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    64d4:	f1b9 0f02 	cmp.w	r9, #2
    64d8:	d00b      	beq.n	64f2 <process_event+0x1e2>
    64da:	4945      	ldr	r1, [pc, #276]	; (65f0 <process_event+0x2e0>)
    64dc:	4640      	mov	r0, r8
    64de:	f240 135d 	movw	r3, #349	; 0x15d
    64e2:	463a      	mov	r2, r7
    64e4:	f011 fbb3 	bl	17c4e <assert_print>
    64e8:	f240 115d 	movw	r1, #349	; 0x15d
    64ec:	4638      	mov	r0, r7
    64ee:	f011 fba7 	bl	17c40 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    64f2:	8be3      	ldrh	r3, [r4, #30]
    64f4:	b15b      	cbz	r3, 650e <process_event+0x1fe>
    64f6:	493f      	ldr	r1, [pc, #252]	; (65f4 <process_event+0x2e4>)
    64f8:	4640      	mov	r0, r8
    64fa:	f44f 73af 	mov.w	r3, #350	; 0x15e
    64fe:	463a      	mov	r2, r7
    6500:	f011 fba5 	bl	17c4e <assert_print>
    6504:	f44f 71af 	mov.w	r1, #350	; 0x15e
    6508:	4638      	mov	r0, r7
    650a:	f011 fb99 	bl	17c40 <assert_post_action>
			transit = mgr->transitions->stop;
    650e:	6923      	ldr	r3, [r4, #16]
    6510:	685b      	ldr	r3, [r3, #4]
    6512:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
    6514:	b95b      	cbnz	r3, 652e <process_event+0x21e>
    6516:	4935      	ldr	r1, [pc, #212]	; (65ec <process_event+0x2dc>)
    6518:	4640      	mov	r0, r8
    651a:	f240 1361 	movw	r3, #353	; 0x161
    651e:	463a      	mov	r2, r7
    6520:	f011 fb95 	bl	17c4e <assert_print>
    6524:	f240 1161 	movw	r1, #353	; 0x161
    6528:	4638      	mov	r0, r7
    652a:	f011 fb89 	bl	17c40 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    652e:	8ba3      	ldrh	r3, [r4, #28]
    6530:	f023 0307 	bic.w	r3, r3, #7
    6534:	f043 0304 	orr.w	r3, r3, #4
    6538:	e7c6      	b.n	64c8 <process_event+0x1b8>
		} else if (evt == EVT_RESET) {
    653a:	2805      	cmp	r0, #5
    653c:	d132      	bne.n	65a4 <process_event+0x294>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    653e:	f1b9 0f01 	cmp.w	r9, #1
    6542:	d00b      	beq.n	655c <process_event+0x24c>
    6544:	492c      	ldr	r1, [pc, #176]	; (65f8 <process_event+0x2e8>)
    6546:	4640      	mov	r0, r8
    6548:	f44f 73b2 	mov.w	r3, #356	; 0x164
    654c:	463a      	mov	r2, r7
    654e:	f011 fb7e 	bl	17c4e <assert_print>
    6552:	f44f 71b2 	mov.w	r1, #356	; 0x164
    6556:	4638      	mov	r0, r7
    6558:	f011 fb72 	bl	17c40 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    655c:	6823      	ldr	r3, [r4, #0]
    655e:	b95b      	cbnz	r3, 6578 <process_event+0x268>
    6560:	4921      	ldr	r1, [pc, #132]	; (65e8 <process_event+0x2d8>)
    6562:	4640      	mov	r0, r8
    6564:	f240 1365 	movw	r3, #357	; 0x165
    6568:	463a      	mov	r2, r7
    656a:	f011 fb70 	bl	17c4e <assert_print>
    656e:	f240 1165 	movw	r1, #357	; 0x165
    6572:	4638      	mov	r0, r7
    6574:	f011 fb64 	bl	17c40 <assert_post_action>
			transit = mgr->transitions->reset;
    6578:	6923      	ldr	r3, [r4, #16]
    657a:	689b      	ldr	r3, [r3, #8]
    657c:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
    657e:	b95b      	cbnz	r3, 6598 <process_event+0x288>
    6580:	491a      	ldr	r1, [pc, #104]	; (65ec <process_event+0x2dc>)
    6582:	4640      	mov	r0, r8
    6584:	f44f 73b4 	mov.w	r3, #360	; 0x168
    6588:	463a      	mov	r2, r7
    658a:	f011 fb60 	bl	17c4e <assert_print>
    658e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    6592:	4638      	mov	r0, r7
    6594:	f011 fb54 	bl	17c40 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6598:	8ba3      	ldrh	r3, [r4, #28]
    659a:	f023 0307 	bic.w	r3, r3, #7
    659e:	f043 0305 	orr.w	r3, r3, #5
    65a2:	e791      	b.n	64c8 <process_event+0x1b8>
			__ASSERT_NO_MSG(false);
    65a4:	490e      	ldr	r1, [pc, #56]	; (65e0 <process_event+0x2d0>)
    65a6:	f240 136b 	movw	r3, #363	; 0x16b
    65aa:	463a      	mov	r2, r7
    65ac:	4640      	mov	r0, r8
    65ae:	f011 fb4e 	bl	17c4e <assert_print>
    65b2:	2500      	movs	r5, #0
    65b4:	f240 116b 	movw	r1, #363	; 0x16b
    65b8:	4638      	mov	r0, r7
    65ba:	f011 fb41 	bl	17c40 <assert_post_action>
		onoff_transition_fn transit = NULL;
    65be:	9500      	str	r5, [sp, #0]
    65c0:	e784      	b.n	64cc <process_event+0x1bc>
    65c2:	9000      	str	r0, [sp, #0]
    65c4:	e6f3      	b.n	63ae <process_event+0x9e>
    65c6:	4605      	mov	r5, r0
    65c8:	e73b      	b.n	6442 <process_event+0x132>
    65ca:	bf00      	nop
    65cc:	0003bd42 	.word	0x0003bd42
    65d0:	0003bd6f 	.word	0x0003bd6f
    65d4:	0003baf1 	.word	0x0003baf1
    65d8:	0003bd86 	.word	0x0003bd86
    65dc:	0003bc9f 	.word	0x0003bc9f
    65e0:	0003d09f 	.word	0x0003d09f
    65e4:	0003bcc1 	.word	0x0003bcc1
    65e8:	0003bccd 	.word	0x0003bccd
    65ec:	0003bcf0 	.word	0x0003bcf0
    65f0:	0003bd07 	.word	0x0003bd07
    65f4:	0003bd1d 	.word	0x0003bd1d
    65f8:	0003bd2c 	.word	0x0003bd2c
				   && !sys_slist_is_empty(&mgr->monitors);
    65fc:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    6600:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    6604:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
    6608:	83a3      	strh	r3, [r4, #28]
    660a:	4648      	mov	r0, r9
    660c:	f007 fefa 	bl	e404 <z_spin_unlock_valid>
    6610:	b968      	cbnz	r0, 662e <process_event+0x31e>
    6612:	4a39      	ldr	r2, [pc, #228]	; (66f8 <process_event+0x3e8>)
    6614:	4939      	ldr	r1, [pc, #228]	; (66fc <process_event+0x3ec>)
    6616:	23b9      	movs	r3, #185	; 0xb9
    6618:	4640      	mov	r0, r8
    661a:	f011 fb18 	bl	17c4e <assert_print>
    661e:	4838      	ldr	r0, [pc, #224]	; (6700 <process_event+0x3f0>)
    6620:	4649      	mov	r1, r9
    6622:	f011 fb14 	bl	17c4e <assert_print>
    6626:	4834      	ldr	r0, [pc, #208]	; (66f8 <process_event+0x3e8>)
    6628:	21b9      	movs	r1, #185	; 0xb9
    662a:	f011 fb09 	bl	17c40 <assert_post_action>
    662e:	9b01      	ldr	r3, [sp, #4]
    6630:	f383 8811 	msr	BASEPRI, r3
    6634:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    6638:	f1ba 0f00 	cmp.w	sl, #0
    663c:	d138      	bne.n	66b0 <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
    663e:	2d00      	cmp	r5, #0
    6640:	d149      	bne.n	66d6 <process_event+0x3c6>
			if (transit != NULL) {
    6642:	9b00      	ldr	r3, [sp, #0]
    6644:	b113      	cbz	r3, 664c <process_event+0x33c>
				transit(mgr, transition_complete);
    6646:	492f      	ldr	r1, [pc, #188]	; (6704 <process_event+0x3f4>)
    6648:	4620      	mov	r0, r4
    664a:	4798      	blx	r3
	__asm__ volatile(
    664c:	f04f 0320 	mov.w	r3, #32
    6650:	f3ef 8b11 	mrs	fp, BASEPRI
    6654:	f383 8812 	msr	BASEPRI_MAX, r3
    6658:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    665c:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
    665e:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6662:	f007 fec1 	bl	e3e8 <z_spin_lock_valid>
    6666:	b968      	cbnz	r0, 6684 <process_event+0x374>
    6668:	4a23      	ldr	r2, [pc, #140]	; (66f8 <process_event+0x3e8>)
    666a:	4927      	ldr	r1, [pc, #156]	; (6708 <process_event+0x3f8>)
    666c:	238e      	movs	r3, #142	; 0x8e
    666e:	4640      	mov	r0, r8
    6670:	f011 faed 	bl	17c4e <assert_print>
    6674:	4825      	ldr	r0, [pc, #148]	; (670c <process_event+0x3fc>)
    6676:	4649      	mov	r1, r9
    6678:	f011 fae9 	bl	17c4e <assert_print>
    667c:	481e      	ldr	r0, [pc, #120]	; (66f8 <process_event+0x3e8>)
    667e:	218e      	movs	r1, #142	; 0x8e
    6680:	f011 fade 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    6684:	4648      	mov	r0, r9
    6686:	f007 fecd 	bl	e424 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    668a:	8ba3      	ldrh	r3, [r4, #28]
    668c:	f023 0308 	bic.w	r3, r3, #8
    6690:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    6692:	8ba3      	ldrh	r3, [r4, #28]
    6694:	06da      	lsls	r2, r3, #27
    6696:	d527      	bpl.n	66e8 <process_event+0x3d8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    6698:	f023 0310 	bic.w	r3, r3, #16
    669c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    669e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    66a0:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    66a4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    66a8:	2900      	cmp	r1, #0
    66aa:	f47f ae67 	bne.w	637c <process_event+0x6c>
out:
    66ae:	e643      	b.n	6338 <process_event+0x28>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    66b0:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    66b2:	2900      	cmp	r1, #0
    66b4:	d0c3      	beq.n	663e <process_event+0x32e>
	return node->next;
    66b6:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    66ba:	684b      	ldr	r3, [r1, #4]
    66bc:	ee18 2a10 	vmov	r2, s16
    66c0:	461e      	mov	r6, r3
    66c2:	4620      	mov	r0, r4
    66c4:	465b      	mov	r3, fp
    66c6:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    66c8:	f1ba 0f00 	cmp.w	sl, #0
    66cc:	d0b7      	beq.n	663e <process_event+0x32e>
    66ce:	4651      	mov	r1, sl
    66d0:	f8da a000 	ldr.w	sl, [sl]
    66d4:	e7f1      	b.n	66ba <process_event+0x3aa>
    66d6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    66d8:	ee18 2a10 	vmov	r2, s16
    66dc:	465b      	mov	r3, fp
    66de:	4620      	mov	r0, r4
    66e0:	682d      	ldr	r5, [r5, #0]
    66e2:	f011 f9f7 	bl	17ad4 <notify_one>
    66e6:	e7aa      	b.n	663e <process_event+0x32e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    66e8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    66ec:	bf1e      	ittt	ne
    66ee:	f023 0320 	bicne.w	r3, r3, #32
    66f2:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    66f4:	2102      	movne	r1, #2
    66f6:	e7d3      	b.n	66a0 <process_event+0x390>
    66f8:	0003bd42 	.word	0x0003bd42
    66fc:	0003bd6f 	.word	0x0003bd6f
    6700:	0003bd86 	.word	0x0003bd86
    6704:	00006711 	.word	0x00006711
    6708:	0003bd9b 	.word	0x0003bd9b
    670c:	0003bdb0 	.word	0x0003bdb0

00006710 <transition_complete>:
{
    6710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6712:	4604      	mov	r4, r0
    6714:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    6716:	f100 0614 	add.w	r6, r0, #20
    671a:	f04f 0320 	mov.w	r3, #32
    671e:	f3ef 8711 	mrs	r7, BASEPRI
    6722:	f383 8812 	msr	BASEPRI_MAX, r3
    6726:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    672a:	4630      	mov	r0, r6
    672c:	f007 fe5c 	bl	e3e8 <z_spin_lock_valid>
    6730:	b968      	cbnz	r0, 674e <transition_complete+0x3e>
    6732:	4a0c      	ldr	r2, [pc, #48]	; (6764 <transition_complete+0x54>)
    6734:	490c      	ldr	r1, [pc, #48]	; (6768 <transition_complete+0x58>)
    6736:	480d      	ldr	r0, [pc, #52]	; (676c <transition_complete+0x5c>)
    6738:	238e      	movs	r3, #142	; 0x8e
    673a:	f011 fa88 	bl	17c4e <assert_print>
    673e:	480c      	ldr	r0, [pc, #48]	; (6770 <transition_complete+0x60>)
    6740:	4631      	mov	r1, r6
    6742:	f011 fa84 	bl	17c4e <assert_print>
    6746:	4807      	ldr	r0, [pc, #28]	; (6764 <transition_complete+0x54>)
    6748:	218e      	movs	r1, #142	; 0x8e
    674a:	f011 fa79 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    674e:	4630      	mov	r0, r6
    6750:	f007 fe68 	bl	e424 <z_spin_lock_set_owner>
	mgr->last_res = res;
    6754:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    6756:	463a      	mov	r2, r7
    6758:	4620      	mov	r0, r4
    675a:	2101      	movs	r1, #1
}
    675c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    6760:	f7ff bdd6 	b.w	6310 <process_event>
    6764:	0003bd42 	.word	0x0003bd42
    6768:	0003bd9b 	.word	0x0003bd9b
    676c:	0003baf1 	.word	0x0003baf1
    6770:	0003bdb0 	.word	0x0003bdb0

00006774 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6778:	4604      	mov	r4, r0
    677a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    677c:	f011 f9c0 	bl	17b00 <validate_args>

	if (rv < 0) {
    6780:	1e05      	subs	r5, r0, #0
    6782:	db5e      	blt.n	6842 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    6784:	f104 0914 	add.w	r9, r4, #20
    6788:	f04f 0320 	mov.w	r3, #32
    678c:	f3ef 8a11 	mrs	sl, BASEPRI
    6790:	f383 8812 	msr	BASEPRI_MAX, r3
    6794:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6798:	4648      	mov	r0, r9
    679a:	f007 fe25 	bl	e3e8 <z_spin_lock_valid>
    679e:	b968      	cbnz	r0, 67bc <onoff_request+0x48>
    67a0:	4a38      	ldr	r2, [pc, #224]	; (6884 <onoff_request+0x110>)
    67a2:	4939      	ldr	r1, [pc, #228]	; (6888 <onoff_request+0x114>)
    67a4:	4839      	ldr	r0, [pc, #228]	; (688c <onoff_request+0x118>)
    67a6:	238e      	movs	r3, #142	; 0x8e
    67a8:	f011 fa51 	bl	17c4e <assert_print>
    67ac:	4838      	ldr	r0, [pc, #224]	; (6890 <onoff_request+0x11c>)
    67ae:	4649      	mov	r1, r9
    67b0:	f011 fa4d 	bl	17c4e <assert_print>
    67b4:	4833      	ldr	r0, [pc, #204]	; (6884 <onoff_request+0x110>)
    67b6:	218e      	movs	r1, #142	; 0x8e
    67b8:	f011 fa42 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    67bc:	4648      	mov	r0, r9
    67be:	f007 fe31 	bl	e424 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    67c2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    67c4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    67c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    67ca:	428b      	cmp	r3, r1
    67cc:	f002 0607 	and.w	r6, r2, #7
    67d0:	d050      	beq.n	6874 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    67d2:	2e02      	cmp	r6, #2
    67d4:	d124      	bne.n	6820 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    67d6:	3301      	adds	r3, #1
    67d8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    67da:	4635      	mov	r5, r6
		notify = true;
    67dc:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67e0:	4648      	mov	r0, r9
    67e2:	f007 fe0f 	bl	e404 <z_spin_unlock_valid>
    67e6:	b968      	cbnz	r0, 6804 <onoff_request+0x90>
    67e8:	4a26      	ldr	r2, [pc, #152]	; (6884 <onoff_request+0x110>)
    67ea:	492a      	ldr	r1, [pc, #168]	; (6894 <onoff_request+0x120>)
    67ec:	4827      	ldr	r0, [pc, #156]	; (688c <onoff_request+0x118>)
    67ee:	23b9      	movs	r3, #185	; 0xb9
    67f0:	f011 fa2d 	bl	17c4e <assert_print>
    67f4:	4828      	ldr	r0, [pc, #160]	; (6898 <onoff_request+0x124>)
    67f6:	4649      	mov	r1, r9
    67f8:	f011 fa29 	bl	17c4e <assert_print>
    67fc:	4821      	ldr	r0, [pc, #132]	; (6884 <onoff_request+0x110>)
    67fe:	21b9      	movs	r1, #185	; 0xb9
    6800:	f011 fa1e 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    6804:	f38a 8811 	msr	BASEPRI, sl
    6808:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    680c:	f1b8 0f00 	cmp.w	r8, #0
    6810:	d017      	beq.n	6842 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    6812:	2300      	movs	r3, #0
    6814:	4632      	mov	r2, r6
    6816:	4639      	mov	r1, r7
    6818:	4620      	mov	r0, r4
    681a:	f011 f95b 	bl	17ad4 <notify_one>
    681e:	e010      	b.n	6842 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    6820:	0793      	lsls	r3, r2, #30
    6822:	d001      	beq.n	6828 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    6824:	2e06      	cmp	r6, #6
    6826:	d10f      	bne.n	6848 <onoff_request+0xd4>
	parent->next = child;
    6828:	2300      	movs	r3, #0
    682a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    682c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    682e:	b9f3      	cbnz	r3, 686e <onoff_request+0xfa>
	list->head = node;
    6830:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    6834:	4635      	mov	r5, r6
    6836:	b9fe      	cbnz	r6, 6878 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    6838:	4652      	mov	r2, sl
    683a:	2102      	movs	r1, #2
    683c:	4620      	mov	r0, r4
    683e:	f7ff fd67 	bl	6310 <process_event>
		}
	}

	return rv;
}
    6842:	4628      	mov	r0, r5
    6844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    6848:	2e05      	cmp	r6, #5
    684a:	d018      	beq.n	687e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    684c:	2e01      	cmp	r6, #1
    684e:	d00b      	beq.n	6868 <onoff_request+0xf4>
    6850:	4912      	ldr	r1, [pc, #72]	; (689c <onoff_request+0x128>)
    6852:	480e      	ldr	r0, [pc, #56]	; (688c <onoff_request+0x118>)
    6854:	4a12      	ldr	r2, [pc, #72]	; (68a0 <onoff_request+0x12c>)
    6856:	f240 13c9 	movw	r3, #457	; 0x1c9
    685a:	f011 f9f8 	bl	17c4e <assert_print>
    685e:	4810      	ldr	r0, [pc, #64]	; (68a0 <onoff_request+0x12c>)
    6860:	f240 11c9 	movw	r1, #457	; 0x1c9
    6864:	f011 f9ec 	bl	17c40 <assert_post_action>
		rv = -EIO;
    6868:	f06f 0504 	mvn.w	r5, #4
    686c:	e004      	b.n	6878 <onoff_request+0x104>
	parent->next = child;
    686e:	601f      	str	r7, [r3, #0]
	list->tail = node;
    6870:	6067      	str	r7, [r4, #4]
}
    6872:	e7df      	b.n	6834 <onoff_request+0xc0>
		rv = -EAGAIN;
    6874:	f06f 050a 	mvn.w	r5, #10
    6878:	f04f 0800 	mov.w	r8, #0
    687c:	e7b0      	b.n	67e0 <onoff_request+0x6c>
		rv = -ENOTSUP;
    687e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    6882:	e7f9      	b.n	6878 <onoff_request+0x104>
    6884:	0003bd42 	.word	0x0003bd42
    6888:	0003bd9b 	.word	0x0003bd9b
    688c:	0003baf1 	.word	0x0003baf1
    6890:	0003bdb0 	.word	0x0003bdb0
    6894:	0003bd6f 	.word	0x0003bd6f
    6898:	0003bd86 	.word	0x0003bd86
    689c:	0003bd2c 	.word	0x0003bd2c
    68a0:	0003bc9f 	.word	0x0003bc9f

000068a4 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    68a4:	b570      	push	{r4, r5, r6, lr}
    68a6:	4604      	mov	r4, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    68a8:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    68ac:	f04f 0320 	mov.w	r3, #32
    68b0:	f3ef 8611 	mrs	r6, BASEPRI
    68b4:	f383 8812 	msr	BASEPRI_MAX, r3
    68b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    68bc:	4628      	mov	r0, r5
    68be:	f007 fd93 	bl	e3e8 <z_spin_lock_valid>
    68c2:	b968      	cbnz	r0, 68e0 <onoff_release+0x3c>
    68c4:	4a27      	ldr	r2, [pc, #156]	; (6964 <onoff_release+0xc0>)
    68c6:	4928      	ldr	r1, [pc, #160]	; (6968 <onoff_release+0xc4>)
    68c8:	4828      	ldr	r0, [pc, #160]	; (696c <onoff_release+0xc8>)
    68ca:	238e      	movs	r3, #142	; 0x8e
    68cc:	f011 f9bf 	bl	17c4e <assert_print>
    68d0:	4827      	ldr	r0, [pc, #156]	; (6970 <onoff_release+0xcc>)
    68d2:	4629      	mov	r1, r5
    68d4:	f011 f9bb 	bl	17c4e <assert_print>
    68d8:	4822      	ldr	r0, [pc, #136]	; (6964 <onoff_release+0xc0>)
    68da:	218e      	movs	r1, #142	; 0x8e
    68dc:	f011 f9b0 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    68e0:	4628      	mov	r0, r5
    68e2:	f007 fd9f 	bl	e424 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    68e6:	8ba3      	ldrh	r3, [r4, #28]
    68e8:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    68ec:	2b02      	cmp	r3, #2
    68ee:	d01c      	beq.n	692a <onoff_release+0x86>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    68f0:	2b01      	cmp	r3, #1
    68f2:	bf0c      	ite	eq
    68f4:	f06f 0404 	mvneq.w	r4, #4
    68f8:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68fc:	4628      	mov	r0, r5
    68fe:	f007 fd81 	bl	e404 <z_spin_unlock_valid>
    6902:	b968      	cbnz	r0, 6920 <onoff_release+0x7c>
    6904:	4a17      	ldr	r2, [pc, #92]	; (6964 <onoff_release+0xc0>)
    6906:	491b      	ldr	r1, [pc, #108]	; (6974 <onoff_release+0xd0>)
    6908:	4818      	ldr	r0, [pc, #96]	; (696c <onoff_release+0xc8>)
    690a:	23b9      	movs	r3, #185	; 0xb9
    690c:	f011 f99f 	bl	17c4e <assert_print>
    6910:	4819      	ldr	r0, [pc, #100]	; (6978 <onoff_release+0xd4>)
    6912:	4629      	mov	r1, r5
    6914:	f011 f99b 	bl	17c4e <assert_print>
    6918:	4812      	ldr	r0, [pc, #72]	; (6964 <onoff_release+0xc0>)
    691a:	21b9      	movs	r1, #185	; 0xb9
    691c:	f011 f990 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    6920:	f386 8811 	msr	BASEPRI, r6
    6924:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    6928:	e018      	b.n	695c <onoff_release+0xb8>
	__ASSERT_NO_MSG(mgr->refs > 0);
    692a:	8be3      	ldrh	r3, [r4, #30]
    692c:	b95b      	cbnz	r3, 6946 <onoff_release+0xa2>
    692e:	4913      	ldr	r1, [pc, #76]	; (697c <onoff_release+0xd8>)
    6930:	480e      	ldr	r0, [pc, #56]	; (696c <onoff_release+0xc8>)
    6932:	4a13      	ldr	r2, [pc, #76]	; (6980 <onoff_release+0xdc>)
    6934:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    6938:	f011 f989 	bl	17c4e <assert_print>
    693c:	4810      	ldr	r0, [pc, #64]	; (6980 <onoff_release+0xdc>)
    693e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    6942:	f011 f97d 	bl	17c40 <assert_post_action>
	mgr->refs -= 1U;
    6946:	8be3      	ldrh	r3, [r4, #30]
    6948:	3b01      	subs	r3, #1
    694a:	b29b      	uxth	r3, r3
    694c:	83e3      	strh	r3, [r4, #30]
	if (stop) {
    694e:	b93b      	cbnz	r3, 6960 <onoff_release+0xbc>
		process_event(mgr, EVT_RECHECK, key);
    6950:	4620      	mov	r0, r4
    6952:	4632      	mov	r2, r6
    6954:	2102      	movs	r1, #2
    6956:	f7ff fcdb 	bl	6310 <process_event>
	int rv = state;
    695a:	2402      	movs	r4, #2
}
    695c:	4620      	mov	r0, r4
    695e:	bd70      	pop	{r4, r5, r6, pc}
	int rv = state;
    6960:	2402      	movs	r4, #2
    6962:	e7cb      	b.n	68fc <onoff_release+0x58>
    6964:	0003bd42 	.word	0x0003bd42
    6968:	0003bd9b 	.word	0x0003bd9b
    696c:	0003baf1 	.word	0x0003baf1
    6970:	0003bdb0 	.word	0x0003bdb0
    6974:	0003bd6f 	.word	0x0003bd6f
    6978:	0003bd86 	.word	0x0003bd86
    697c:	0003bdc8 	.word	0x0003bdc8
    6980:	0003bc9f 	.word	0x0003bc9f

00006984 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    6984:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    6988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    698c:	4680      	mov	r8, r0
    698e:	460c      	mov	r4, r1
    6990:	4616      	mov	r6, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    6992:	d36b      	bcc.n	6a6c <sys_heap_init+0xe8>
    6994:	493e      	ldr	r1, [pc, #248]	; (6a90 <sys_heap_init+0x10c>)
    6996:	4a3f      	ldr	r2, [pc, #252]	; (6a94 <sys_heap_init+0x110>)
    6998:	483f      	ldr	r0, [pc, #252]	; (6a98 <sys_heap_init+0x114>)
    699a:	f240 13e3 	movw	r3, #483	; 0x1e3
    699e:	f011 f956 	bl	17c4e <assert_print>
    69a2:	483e      	ldr	r0, [pc, #248]	; (6a9c <sys_heap_init+0x118>)
    69a4:	f011 f953 	bl	17c4e <assert_print>
    69a8:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    69ac:	4839      	ldr	r0, [pc, #228]	; (6a94 <sys_heap_init+0x110>)
    69ae:	f011 f947 	bl	17c40 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    69b2:	3e04      	subs	r6, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    69b4:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    69b6:	4426      	add	r6, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    69b8:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    69bc:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    69c0:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    69c2:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    69c4:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    69c8:	d80e      	bhi.n	69e8 <sys_heap_init+0x64>
    69ca:	4935      	ldr	r1, [pc, #212]	; (6aa0 <sys_heap_init+0x11c>)
    69cc:	4a31      	ldr	r2, [pc, #196]	; (6a94 <sys_heap_init+0x110>)
    69ce:	4832      	ldr	r0, [pc, #200]	; (6a98 <sys_heap_init+0x114>)
    69d0:	f240 13f3 	movw	r3, #499	; 0x1f3
    69d4:	f011 f93b 	bl	17c4e <assert_print>
    69d8:	4832      	ldr	r0, [pc, #200]	; (6aa4 <sys_heap_init+0x120>)
    69da:	f011 f938 	bl	17c4e <assert_print>
    69de:	482d      	ldr	r0, [pc, #180]	; (6a94 <sys_heap_init+0x110>)
    69e0:	f240 11f3 	movw	r1, #499	; 0x1f3
    69e4:	f011 f92c 	bl	17c40 <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    69e8:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    69ec:	f8c8 5000 	str.w	r5, [r8]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    69f0:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    69f4:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    69f8:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    69fa:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    69fc:	2300      	movs	r3, #0
    69fe:	08e4      	lsrs	r4, r4, #3
    6a00:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    6a02:	1c63      	adds	r3, r4, #1
    6a04:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    6a06:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    6a08:	d90e      	bls.n	6a28 <sys_heap_init+0xa4>
    6a0a:	4927      	ldr	r1, [pc, #156]	; (6aa8 <sys_heap_init+0x124>)
    6a0c:	4a21      	ldr	r2, [pc, #132]	; (6a94 <sys_heap_init+0x110>)
    6a0e:	4822      	ldr	r0, [pc, #136]	; (6a98 <sys_heap_init+0x114>)
    6a10:	f44f 7301 	mov.w	r3, #516	; 0x204
    6a14:	f011 f91b 	bl	17c4e <assert_print>
    6a18:	4822      	ldr	r0, [pc, #136]	; (6aa4 <sys_heap_init+0x120>)
    6a1a:	f011 f918 	bl	17c4e <assert_print>
    6a1e:	481d      	ldr	r0, [pc, #116]	; (6a94 <sys_heap_init+0x110>)
    6a20:	f44f 7101 	mov.w	r1, #516	; 0x204
    6a24:	f011 f90c 	bl	17c40 <assert_post_action>
    6a28:	f105 0310 	add.w	r3, r5, #16
    6a2c:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    6a30:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
    6a32:	4598      	cmp	r8, r3
    6a34:	d129      	bne.n	6a8a <sys_heap_init+0x106>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6a36:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6a38:	f043 0301 	orr.w	r3, r3, #1
    6a3c:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    6a3e:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    6a42:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6a44:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    6a46:	802a      	strh	r2, [r5, #0]
    6a48:	8048      	strh	r0, [r1, #2]
    6a4a:	19a9      	adds	r1, r5, r6
    6a4c:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    6a50:	804a      	strh	r2, [r1, #2]
    6a52:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    6a54:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    6a58:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6a5a:	885a      	ldrh	r2, [r3, #2]
    6a5c:	f042 0201 	orr.w	r2, r2, #1
    6a60:	4628      	mov	r0, r5
    6a62:	805a      	strh	r2, [r3, #2]
}
    6a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    6a68:	f011 b87b 	b.w	17b62 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    6a6c:	2a04      	cmp	r2, #4
    6a6e:	d8a0      	bhi.n	69b2 <sys_heap_init+0x2e>
    6a70:	490e      	ldr	r1, [pc, #56]	; (6aac <sys_heap_init+0x128>)
    6a72:	4a08      	ldr	r2, [pc, #32]	; (6a94 <sys_heap_init+0x110>)
    6a74:	4808      	ldr	r0, [pc, #32]	; (6a98 <sys_heap_init+0x114>)
    6a76:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    6a7a:	f011 f8e8 	bl	17c4e <assert_print>
    6a7e:	4809      	ldr	r0, [pc, #36]	; (6aa4 <sys_heap_init+0x120>)
    6a80:	f011 f8e5 	bl	17c4e <assert_print>
    6a84:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    6a88:	e790      	b.n	69ac <sys_heap_init+0x28>
		h->buckets[i].next = 0;
    6a8a:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
    6a8e:	e7d0      	b.n	6a32 <sys_heap_init+0xae>
    6a90:	0003bea2 	.word	0x0003bea2
    6a94:	0003bdd6 	.word	0x0003bdd6
    6a98:	0003baf1 	.word	0x0003baf1
    6a9c:	0003beb8 	.word	0x0003beb8
    6aa0:	0003bf09 	.word	0x0003bf09
    6aa4:	0003bef0 	.word	0x0003bef0
    6aa8:	0003bf32 	.word	0x0003bf32
    6aac:	0003becf 	.word	0x0003becf

00006ab0 <extract_decimal>:
{
    6ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
    6ab2:	4e09      	ldr	r6, [pc, #36]	; (6ad8 <extract_decimal+0x28>)
    6ab4:	6801      	ldr	r1, [r0, #0]
{
    6ab6:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    6ab8:	270a      	movs	r7, #10
	size_t val = 0;
    6aba:	2000      	movs	r0, #0
    6abc:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    6abe:	3101      	adds	r1, #1
    6ac0:	7823      	ldrb	r3, [r4, #0]
    6ac2:	5d9d      	ldrb	r5, [r3, r6]
    6ac4:	076d      	lsls	r5, r5, #29
    6ac6:	d401      	bmi.n	6acc <extract_decimal+0x1c>
	*str = sp;
    6ac8:	6014      	str	r4, [r2, #0]
}
    6aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    6acc:	fb07 3300 	mla	r3, r7, r0, r3
    6ad0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6ad4:	e7f2      	b.n	6abc <extract_decimal+0xc>
    6ad6:	bf00      	nop
    6ad8:	0003ed70 	.word	0x0003ed70

00006adc <encode_uint>:
{
    6adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ae0:	4615      	mov	r5, r2
    6ae2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6ae4:	78d3      	ldrb	r3, [r2, #3]
    6ae6:	4a22      	ldr	r2, [pc, #136]	; (6b70 <encode_uint+0x94>)
    6ae8:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
    6aec:	2b6f      	cmp	r3, #111	; 0x6f
{
    6aee:	4680      	mov	r8, r0
    6af0:	460f      	mov	r7, r1
    6af2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    6af6:	d029      	beq.n	6b4c <encode_uint+0x70>
    6af8:	d824      	bhi.n	6b44 <encode_uint+0x68>
		return 16;
    6afa:	2b58      	cmp	r3, #88	; 0x58
    6afc:	bf14      	ite	ne
    6afe:	260a      	movne	r6, #10
    6b00:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    6b02:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6b06:	4632      	mov	r2, r6
    6b08:	2300      	movs	r3, #0
    6b0a:	4640      	mov	r0, r8
    6b0c:	4639      	mov	r1, r7
    6b0e:	f7fa f83d 	bl	b8c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6b12:	2a09      	cmp	r2, #9
    6b14:	b2d4      	uxtb	r4, r2
    6b16:	d81e      	bhi.n	6b56 <encode_uint+0x7a>
    6b18:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6b1a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6b1c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6b1e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6b22:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    6b26:	d301      	bcc.n	6b2c <encode_uint+0x50>
    6b28:	45d1      	cmp	r9, sl
    6b2a:	d811      	bhi.n	6b50 <encode_uint+0x74>
	if (conv->flag_hash) {
    6b2c:	782b      	ldrb	r3, [r5, #0]
    6b2e:	069b      	lsls	r3, r3, #26
    6b30:	d505      	bpl.n	6b3e <encode_uint+0x62>
		if (radix == 8) {
    6b32:	2e08      	cmp	r6, #8
    6b34:	d115      	bne.n	6b62 <encode_uint+0x86>
			conv->altform_0 = true;
    6b36:	78ab      	ldrb	r3, [r5, #2]
    6b38:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6b3c:	70ab      	strb	r3, [r5, #2]
}
    6b3e:	4648      	mov	r0, r9
    6b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6b44:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6b48:	2b70      	cmp	r3, #112	; 0x70
    6b4a:	e7d7      	b.n	6afc <encode_uint+0x20>
	switch (specifier) {
    6b4c:	2608      	movs	r6, #8
    6b4e:	e7d8      	b.n	6b02 <encode_uint+0x26>
		value /= radix;
    6b50:	4680      	mov	r8, r0
    6b52:	460f      	mov	r7, r1
    6b54:	e7d7      	b.n	6b06 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6b56:	f1bb 0f01 	cmp.w	fp, #1
    6b5a:	bf0c      	ite	eq
    6b5c:	3437      	addeq	r4, #55	; 0x37
    6b5e:	3457      	addne	r4, #87	; 0x57
    6b60:	e7db      	b.n	6b1a <encode_uint+0x3e>
		} else if (radix == 16) {
    6b62:	2e10      	cmp	r6, #16
    6b64:	d1eb      	bne.n	6b3e <encode_uint+0x62>
			conv->altform_0c = true;
    6b66:	78ab      	ldrb	r3, [r5, #2]
    6b68:	f043 0310 	orr.w	r3, r3, #16
    6b6c:	e7e6      	b.n	6b3c <encode_uint+0x60>
    6b6e:	bf00      	nop
    6b70:	0003ed70 	.word	0x0003ed70

00006b74 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    6b74:	b538      	push	{r3, r4, r5, lr}
    6b76:	460d      	mov	r5, r1
    6b78:	4604      	mov	r4, r0
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    6b7a:	2220      	movs	r2, #32
    6b7c:	2100      	movs	r1, #0
    6b7e:	f015 f8ea 	bl	1bd56 <memset>
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
    6b82:	68eb      	ldr	r3, [r5, #12]
    6b84:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    6b86:	68ab      	ldr	r3, [r5, #8]
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
    6b88:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    6b8a:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    6b8c:	682b      	ldr	r3, [r5, #0]
    6b8e:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    6b90:	2300      	movs	r3, #0
    6b92:	62a3      	str	r3, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    6b94:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    6b96:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    6b98:	b122      	cbz	r2, 6ba4 <mpsc_pbuf_init+0x30>
    6b9a:	1e51      	subs	r1, r2, #1
    6b9c:	4211      	tst	r1, r2

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    6b9e:	bf08      	it	eq
    6ba0:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    6ba4:	6123      	str	r3, [r4, #16]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    6ba6:	2201      	movs	r2, #1
    6ba8:	2100      	movs	r1, #0
    6baa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6bae:	f011 ff30 	bl	18a12 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    6bb2:	b158      	cbz	r0, 6bcc <mpsc_pbuf_init+0x58>
    6bb4:	4906      	ldr	r1, [pc, #24]	; (6bd0 <mpsc_pbuf_init+0x5c>)
    6bb6:	4807      	ldr	r0, [pc, #28]	; (6bd4 <mpsc_pbuf_init+0x60>)
    6bb8:	4a07      	ldr	r2, [pc, #28]	; (6bd8 <mpsc_pbuf_init+0x64>)
    6bba:	232e      	movs	r3, #46	; 0x2e
    6bbc:	f011 f847 	bl	17c4e <assert_print>
}
    6bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	__ASSERT_NO_MSG(err == 0);
    6bc4:	4804      	ldr	r0, [pc, #16]	; (6bd8 <mpsc_pbuf_init+0x64>)
    6bc6:	212e      	movs	r1, #46	; 0x2e
    6bc8:	f011 b83a 	b.w	17c40 <assert_post_action>
}
    6bcc:	bd38      	pop	{r3, r4, r5, pc}
    6bce:	bf00      	nop
    6bd0:	0003bf89 	.word	0x0003bf89
    6bd4:	0003baf1 	.word	0x0003baf1
    6bd8:	0003bf63 	.word	0x0003bf63

00006bdc <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    6bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6be0:	b087      	sub	sp, #28
    6be2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    6be6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6be8:	3b01      	subs	r3, #1
    6bea:	428b      	cmp	r3, r1
{
    6bec:	4604      	mov	r4, r0
    6bee:	468b      	mov	fp, r1
	if (wlen > (buffer->size - 1)) {
    6bf0:	f0c0 80bf 	bcc.w	6d72 <mpsc_pbuf_alloc+0x196>
	union mpsc_pbuf_generic *dropped_item = NULL;
    6bf4:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bf6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 6d90 <mpsc_pbuf_alloc+0x1b4>
    6bfa:	f8df 9198 	ldr.w	r9, [pc, #408]	; 6d94 <mpsc_pbuf_alloc+0x1b8>
	union mpsc_pbuf_generic *item = NULL;
    6bfe:	46ba      	mov	sl, r7
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    6c00:	f104 0614 	add.w	r6, r4, #20
	__asm__ volatile(
    6c04:	f04f 0320 	mov.w	r3, #32
    6c08:	f3ef 8211 	mrs	r2, BASEPRI
    6c0c:	f383 8812 	msr	BASEPRI_MAX, r3
    6c10:	f3bf 8f6f 	isb	sy
    6c14:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
    6c16:	e9cd 2200 	strd	r2, r2, [sp]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c1a:	f007 fbe5 	bl	e3e8 <z_spin_lock_valid>
    6c1e:	b968      	cbnz	r0, 6c3c <mpsc_pbuf_alloc+0x60>
    6c20:	4957      	ldr	r1, [pc, #348]	; (6d80 <mpsc_pbuf_alloc+0x1a4>)
    6c22:	238e      	movs	r3, #142	; 0x8e
    6c24:	4642      	mov	r2, r8
    6c26:	4648      	mov	r0, r9
    6c28:	f011 f811 	bl	17c4e <assert_print>
    6c2c:	4855      	ldr	r0, [pc, #340]	; (6d84 <mpsc_pbuf_alloc+0x1a8>)
    6c2e:	4631      	mov	r1, r6
    6c30:	f011 f80d 	bl	17c4e <assert_print>
    6c34:	218e      	movs	r1, #142	; 0x8e
    6c36:	4640      	mov	r0, r8
    6c38:	f011 f802 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    6c3c:	4630      	mov	r0, r6
    6c3e:	f007 fbf1 	bl	e424 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    6c42:	a905      	add	r1, sp, #20
    6c44:	4620      	mov	r0, r4
    6c46:	f011 f80f 	bl	17c68 <free_space>

		if (free_wlen >= wlen) {
    6c4a:	9905      	ldr	r1, [sp, #20]
    6c4c:	4559      	cmp	r1, fp
		wrap = free_space(buffer, &free_wlen);
    6c4e:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
    6c50:	d334      	bcc.n	6cbc <mpsc_pbuf_alloc+0xe0>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    6c52:	6821      	ldr	r1, [r4, #0]
			item =
    6c54:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
    6c56:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    6c5a:	f022 0203 	bic.w	r2, r2, #3
    6c5e:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    6c62:	4620      	mov	r0, r4
    6c64:	465a      	mov	r2, fp
			item =
    6c66:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    6c6a:	f011 f822 	bl	17cb2 <idx_inc>
		cont = false;
    6c6e:	2500      	movs	r5, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    6c70:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c72:	4630      	mov	r0, r6
    6c74:	f007 fbc6 	bl	e404 <z_spin_unlock_valid>
    6c78:	b968      	cbnz	r0, 6c96 <mpsc_pbuf_alloc+0xba>
    6c7a:	4943      	ldr	r1, [pc, #268]	; (6d88 <mpsc_pbuf_alloc+0x1ac>)
    6c7c:	23b9      	movs	r3, #185	; 0xb9
    6c7e:	4642      	mov	r2, r8
    6c80:	4648      	mov	r0, r9
    6c82:	f010 ffe4 	bl	17c4e <assert_print>
    6c86:	4841      	ldr	r0, [pc, #260]	; (6d8c <mpsc_pbuf_alloc+0x1b0>)
    6c88:	4631      	mov	r1, r6
    6c8a:	f010 ffe0 	bl	17c4e <assert_print>
    6c8e:	21b9      	movs	r1, #185	; 0xb9
    6c90:	4640      	mov	r0, r8
    6c92:	f010 ffd5 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    6c96:	9b00      	ldr	r3, [sp, #0]
    6c98:	f383 8811 	msr	BASEPRI, r3
    6c9c:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    6ca0:	2d00      	cmp	r5, #0
    6ca2:	d068      	beq.n	6d76 <mpsc_pbuf_alloc+0x19a>
    6ca4:	2f00      	cmp	r7, #0
    6ca6:	d0ab      	beq.n	6c00 <mpsc_pbuf_alloc+0x24>
    6ca8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6cac:	2b00      	cmp	r3, #0
    6cae:	d0a7      	beq.n	6c00 <mpsc_pbuf_alloc+0x24>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    6cb0:	4639      	mov	r1, r7
    6cb2:	69a3      	ldr	r3, [r4, #24]
    6cb4:	4620      	mov	r0, r4
    6cb6:	4798      	blx	r3
			dropped_item = NULL;
    6cb8:	2700      	movs	r7, #0
    6cba:	e7a1      	b.n	6c00 <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
    6cbc:	b118      	cbz	r0, 6cc6 <mpsc_pbuf_alloc+0xea>
			add_skip_item(buffer, free_wlen);
    6cbe:	4620      	mov	r0, r4
    6cc0:	f011 f804 	bl	17ccc <add_skip_item>
			cont = true;
    6cc4:	e7d5      	b.n	6c72 <mpsc_pbuf_alloc+0x96>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6cc6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    6cca:	4313      	orrs	r3, r2
    6ccc:	d043      	beq.n	6d56 <mpsc_pbuf_alloc+0x17a>
			   !k_is_in_isr()) {
    6cce:	f011 fe6d 	bl	189ac <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6cd2:	2800      	cmp	r0, #0
    6cd4:	d13f      	bne.n	6d56 <mpsc_pbuf_alloc+0x17a>
    6cd6:	4630      	mov	r0, r6
    6cd8:	f007 fb94 	bl	e404 <z_spin_unlock_valid>
    6cdc:	b968      	cbnz	r0, 6cfa <mpsc_pbuf_alloc+0x11e>
    6cde:	492a      	ldr	r1, [pc, #168]	; (6d88 <mpsc_pbuf_alloc+0x1ac>)
    6ce0:	23b9      	movs	r3, #185	; 0xb9
    6ce2:	4642      	mov	r2, r8
    6ce4:	4648      	mov	r0, r9
    6ce6:	f010 ffb2 	bl	17c4e <assert_print>
    6cea:	4828      	ldr	r0, [pc, #160]	; (6d8c <mpsc_pbuf_alloc+0x1b0>)
    6cec:	4631      	mov	r1, r6
    6cee:	f010 ffae 	bl	17c4e <assert_print>
    6cf2:	21b9      	movs	r1, #185	; 0xb9
    6cf4:	4640      	mov	r0, r8
    6cf6:	f010 ffa3 	bl	17c40 <assert_post_action>
    6cfa:	9b01      	ldr	r3, [sp, #4]
    6cfc:	f383 8811 	msr	BASEPRI, r3
    6d00:	f3bf 8f6f 	isb	sy
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    6d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6d08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6d0c:	f007 ff10 	bl	eb30 <z_impl_k_sem_take>
    6d10:	4605      	mov	r5, r0
	__asm__ volatile(
    6d12:	f04f 0220 	mov.w	r2, #32
    6d16:	f3ef 8311 	mrs	r3, BASEPRI
    6d1a:	f382 8812 	msr	BASEPRI_MAX, r2
    6d1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d22:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
    6d24:	9300      	str	r3, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d26:	f007 fb5f 	bl	e3e8 <z_spin_lock_valid>
    6d2a:	b968      	cbnz	r0, 6d48 <mpsc_pbuf_alloc+0x16c>
    6d2c:	4914      	ldr	r1, [pc, #80]	; (6d80 <mpsc_pbuf_alloc+0x1a4>)
    6d2e:	238e      	movs	r3, #142	; 0x8e
    6d30:	4642      	mov	r2, r8
    6d32:	4648      	mov	r0, r9
    6d34:	f010 ff8b 	bl	17c4e <assert_print>
    6d38:	4812      	ldr	r0, [pc, #72]	; (6d84 <mpsc_pbuf_alloc+0x1a8>)
    6d3a:	4631      	mov	r1, r6
    6d3c:	f010 ff87 	bl	17c4e <assert_print>
    6d40:	218e      	movs	r1, #142	; 0x8e
    6d42:	4640      	mov	r0, r8
    6d44:	f010 ff7c 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d48:	4630      	mov	r0, r6
			if (err == 0) {
    6d4a:	fab5 f585 	clz	r5, r5
    6d4e:	f007 fb69 	bl	e424 <z_spin_lock_set_owner>
    6d52:	096d      	lsrs	r5, r5, #5
    6d54:	e78d      	b.n	6c72 <mpsc_pbuf_alloc+0x96>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    6d56:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    6d58:	9905      	ldr	r1, [sp, #20]
    6d5a:	f10d 0313 	add.w	r3, sp, #19
    6d5e:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6d62:	4620      	mov	r0, r4
    6d64:	f010 ffda 	bl	17d1c <drop_item_locked>
			cont = dropped_item != NULL;
    6d68:	1e05      	subs	r5, r0, #0
    6d6a:	4607      	mov	r7, r0
    6d6c:	bf18      	it	ne
    6d6e:	2501      	movne	r5, #1
    6d70:	e77f      	b.n	6c72 <mpsc_pbuf_alloc+0x96>
		return NULL;
    6d72:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    6d76:	4650      	mov	r0, sl
    6d78:	b007      	add	sp, #28
    6d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d7e:	bf00      	nop
    6d80:	0003bd9b 	.word	0x0003bd9b
    6d84:	0003bdb0 	.word	0x0003bdb0
    6d88:	0003bd6f 	.word	0x0003bd6f
    6d8c:	0003bd86 	.word	0x0003bd86
    6d90:	0003bd42 	.word	0x0003bd42
    6d94:	0003baf1 	.word	0x0003baf1

00006d98 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    6d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6d9c:	69c3      	ldr	r3, [r0, #28]
{
    6d9e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6da0:	4608      	mov	r0, r1
{
    6da2:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    6da4:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    6da6:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    6daa:	4607      	mov	r7, r0
    6dac:	f04f 0320 	mov.w	r3, #32
    6db0:	f3ef 8811 	mrs	r8, BASEPRI
    6db4:	f383 8812 	msr	BASEPRI_MAX, r3
    6db8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6dbc:	4628      	mov	r0, r5
    6dbe:	f007 fb13 	bl	e3e8 <z_spin_lock_valid>
    6dc2:	b968      	cbnz	r0, 6de0 <mpsc_pbuf_commit+0x48>
    6dc4:	4a1a      	ldr	r2, [pc, #104]	; (6e30 <mpsc_pbuf_commit+0x98>)
    6dc6:	491b      	ldr	r1, [pc, #108]	; (6e34 <mpsc_pbuf_commit+0x9c>)
    6dc8:	481b      	ldr	r0, [pc, #108]	; (6e38 <mpsc_pbuf_commit+0xa0>)
    6dca:	238e      	movs	r3, #142	; 0x8e
    6dcc:	f010 ff3f 	bl	17c4e <assert_print>
    6dd0:	481a      	ldr	r0, [pc, #104]	; (6e3c <mpsc_pbuf_commit+0xa4>)
    6dd2:	4629      	mov	r1, r5
    6dd4:	f010 ff3b 	bl	17c4e <assert_print>
    6dd8:	4815      	ldr	r0, [pc, #84]	; (6e30 <mpsc_pbuf_commit+0x98>)
    6dda:	218e      	movs	r1, #142	; 0x8e
    6ddc:	f010 ff30 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    6de0:	4628      	mov	r0, r5
    6de2:	f007 fb1f 	bl	e424 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    6de6:	7833      	ldrb	r3, [r6, #0]
    6de8:	f043 0301 	orr.w	r3, r3, #1
    6dec:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6dee:	6861      	ldr	r1, [r4, #4]
    6df0:	463a      	mov	r2, r7
    6df2:	4620      	mov	r0, r4
    6df4:	f010 ff5d 	bl	17cb2 <idx_inc>
    6df8:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    6dfa:	4620      	mov	r0, r4
    6dfc:	f010 ff7d 	bl	17cfa <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e00:	4628      	mov	r0, r5
    6e02:	f007 faff 	bl	e404 <z_spin_unlock_valid>
    6e06:	b968      	cbnz	r0, 6e24 <mpsc_pbuf_commit+0x8c>
    6e08:	4a09      	ldr	r2, [pc, #36]	; (6e30 <mpsc_pbuf_commit+0x98>)
    6e0a:	490d      	ldr	r1, [pc, #52]	; (6e40 <mpsc_pbuf_commit+0xa8>)
    6e0c:	480a      	ldr	r0, [pc, #40]	; (6e38 <mpsc_pbuf_commit+0xa0>)
    6e0e:	23b9      	movs	r3, #185	; 0xb9
    6e10:	f010 ff1d 	bl	17c4e <assert_print>
    6e14:	480b      	ldr	r0, [pc, #44]	; (6e44 <mpsc_pbuf_commit+0xac>)
    6e16:	4629      	mov	r1, r5
    6e18:	f010 ff19 	bl	17c4e <assert_print>
    6e1c:	4804      	ldr	r0, [pc, #16]	; (6e30 <mpsc_pbuf_commit+0x98>)
    6e1e:	21b9      	movs	r1, #185	; 0xb9
    6e20:	f010 ff0e 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    6e24:	f388 8811 	msr	BASEPRI, r8
    6e28:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    6e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e30:	0003bd42 	.word	0x0003bd42
    6e34:	0003bd9b 	.word	0x0003bd9b
    6e38:	0003baf1 	.word	0x0003baf1
    6e3c:	0003bdb0 	.word	0x0003bdb0
    6e40:	0003bd6f 	.word	0x0003bd6f
    6e44:	0003bd86 	.word	0x0003bd86

00006e48 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    6e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e4c:	4f3c      	ldr	r7, [pc, #240]	; (6f40 <mpsc_pbuf_claim+0xf8>)
    6e4e:	f8df a100 	ldr.w	sl, [pc, #256]	; 6f50 <mpsc_pbuf_claim+0x108>
    6e52:	f8df 8100 	ldr.w	r8, [pc, #256]	; 6f54 <mpsc_pbuf_claim+0x10c>
    6e56:	4605      	mov	r5, r0
		uint32_t a;
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    6e58:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
    6e5c:	f04f 0320 	mov.w	r3, #32
    6e60:	f3ef 8911 	mrs	r9, BASEPRI
    6e64:	f383 8812 	msr	BASEPRI_MAX, r3
    6e68:	f3bf 8f6f 	isb	sy
    6e6c:	4630      	mov	r0, r6
    6e6e:	f007 fabb 	bl	e3e8 <z_spin_lock_valid>
    6e72:	b968      	cbnz	r0, 6e90 <mpsc_pbuf_claim+0x48>
    6e74:	238e      	movs	r3, #142	; 0x8e
    6e76:	463a      	mov	r2, r7
    6e78:	4651      	mov	r1, sl
    6e7a:	4640      	mov	r0, r8
    6e7c:	f010 fee7 	bl	17c4e <assert_print>
    6e80:	4830      	ldr	r0, [pc, #192]	; (6f44 <mpsc_pbuf_claim+0xfc>)
    6e82:	4631      	mov	r1, r6
    6e84:	f010 fee3 	bl	17c4e <assert_print>
    6e88:	218e      	movs	r1, #142	; 0x8e
    6e8a:	4638      	mov	r0, r7
    6e8c:	f010 fed8 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e90:	4630      	mov	r0, r6
    6e92:	f007 fac7 	bl	e424 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6e96:	e9d5 4101 	ldrd	r4, r1, [r5, #4]
    6e9a:	42a1      	cmp	r1, r4
	*res = buffer->size - buffer->tmp_rd_idx;
    6e9c:	bf88      	it	hi
    6e9e:	6a6c      	ldrhi	r4, [r5, #36]	; 0x24
    6ea0:	1a64      	subs	r4, r4, r1
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    6ea2:	b1fc      	cbz	r4, 6ee4 <mpsc_pbuf_claim+0x9c>
		item = (union mpsc_pbuf_generic *)
    6ea4:	6a28      	ldr	r0, [r5, #32]
	return !item->hdr.valid && !item->hdr.busy;
    6ea6:	f810 3021 	ldrb.w	r3, [r0, r1, lsl #2]
		if (!a || is_invalid(item)) {
    6eaa:	f013 0403 	ands.w	r4, r3, #3
		item = (union mpsc_pbuf_generic *)
    6eae:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
		if (!a || is_invalid(item)) {
    6eb2:	d017      	beq.n	6ee4 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
    6eb4:	2c02      	cmp	r4, #2
    6eb6:	d103      	bne.n	6ec0 <mpsc_pbuf_claim+0x78>
		return item->skip.len;
    6eb8:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    6ebc:	0892      	lsrs	r2, r2, #2
    6ebe:	d116      	bne.n	6eee <mpsc_pbuf_claim+0xa6>
    6ec0:	07dc      	lsls	r4, r3, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    6ec2:	69ea      	ldr	r2, [r5, #28]
			if (skip || !is_valid(item)) {
    6ec4:	d510      	bpl.n	6ee8 <mpsc_pbuf_claim+0xa0>
				item->hdr.busy = 1;
    6ec6:	f043 0302 	orr.w	r3, r3, #2
    6eca:	f800 3021 	strb.w	r3, [r0, r1, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    6ece:	4658      	mov	r0, fp
				item->hdr.busy = 1;
    6ed0:	9101      	str	r1, [sp, #4]
					idx_inc(buffer, buffer->tmp_rd_idx,
    6ed2:	4790      	blx	r2
    6ed4:	9901      	ldr	r1, [sp, #4]
    6ed6:	4602      	mov	r2, r0
    6ed8:	4628      	mov	r0, r5
    6eda:	f010 feea 	bl	17cb2 <idx_inc>
		cont = false;
    6ede:	2400      	movs	r4, #0
				buffer->tmp_rd_idx =
    6ee0:	60a8      	str	r0, [r5, #8]
    6ee2:	e011      	b.n	6f08 <mpsc_pbuf_claim+0xc0>
			item = NULL;
    6ee4:	46a3      	mov	fp, r4
    6ee6:	e00f      	b.n	6f08 <mpsc_pbuf_claim+0xc0>
					skip ? skip : buffer->get_wlen(item);
    6ee8:	4658      	mov	r0, fp
    6eea:	4790      	blx	r2
    6eec:	4602      	mov	r2, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    6eee:	68a9      	ldr	r1, [r5, #8]
    6ef0:	9201      	str	r2, [sp, #4]
    6ef2:	4628      	mov	r0, r5
    6ef4:	f010 fedd 	bl	17cb2 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    6ef8:	68e9      	ldr	r1, [r5, #12]
				buffer->tmp_rd_idx =
    6efa:	60a8      	str	r0, [r5, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    6efc:	9a01      	ldr	r2, [sp, #4]
    6efe:	4628      	mov	r0, r5
    6f00:	f010 fed7 	bl	17cb2 <idx_inc>
				cont = true;
    6f04:	2401      	movs	r4, #1
				buffer->rd_idx =
    6f06:	60e8      	str	r0, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f08:	4630      	mov	r0, r6
    6f0a:	f007 fa7b 	bl	e404 <z_spin_unlock_valid>
    6f0e:	b968      	cbnz	r0, 6f2c <mpsc_pbuf_claim+0xe4>
    6f10:	490d      	ldr	r1, [pc, #52]	; (6f48 <mpsc_pbuf_claim+0x100>)
    6f12:	23b9      	movs	r3, #185	; 0xb9
    6f14:	463a      	mov	r2, r7
    6f16:	4640      	mov	r0, r8
    6f18:	f010 fe99 	bl	17c4e <assert_print>
    6f1c:	480b      	ldr	r0, [pc, #44]	; (6f4c <mpsc_pbuf_claim+0x104>)
    6f1e:	4631      	mov	r1, r6
    6f20:	f010 fe95 	bl	17c4e <assert_print>
    6f24:	21b9      	movs	r1, #185	; 0xb9
    6f26:	4638      	mov	r0, r7
    6f28:	f010 fe8a 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    6f2c:	f389 8811 	msr	BASEPRI, r9
    6f30:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    6f34:	2c00      	cmp	r4, #0
    6f36:	d18f      	bne.n	6e58 <mpsc_pbuf_claim+0x10>

	return item;
}
    6f38:	4658      	mov	r0, fp
    6f3a:	b003      	add	sp, #12
    6f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f40:	0003bd42 	.word	0x0003bd42
    6f44:	0003bdb0 	.word	0x0003bdb0
    6f48:	0003bd6f 	.word	0x0003bd6f
    6f4c:	0003bd86 	.word	0x0003bd86
    6f50:	0003bd9b 	.word	0x0003bd9b
    6f54:	0003baf1 	.word	0x0003baf1

00006f58 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    6f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6f5c:	69c3      	ldr	r3, [r0, #28]
{
    6f5e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6f60:	4608      	mov	r0, r1
{
    6f62:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6f64:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    6f66:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    6f6a:	4607      	mov	r7, r0
	__asm__ volatile(
    6f6c:	f04f 0320 	mov.w	r3, #32
    6f70:	f3ef 8811 	mrs	r8, BASEPRI
    6f74:	f383 8812 	msr	BASEPRI_MAX, r3
    6f78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f7c:	4630      	mov	r0, r6
    6f7e:	f007 fa33 	bl	e3e8 <z_spin_lock_valid>
    6f82:	b968      	cbnz	r0, 6fa0 <mpsc_pbuf_free+0x48>
    6f84:	4a24      	ldr	r2, [pc, #144]	; (7018 <mpsc_pbuf_free+0xc0>)
    6f86:	4925      	ldr	r1, [pc, #148]	; (701c <mpsc_pbuf_free+0xc4>)
    6f88:	4825      	ldr	r0, [pc, #148]	; (7020 <mpsc_pbuf_free+0xc8>)
    6f8a:	238e      	movs	r3, #142	; 0x8e
    6f8c:	f010 fe5f 	bl	17c4e <assert_print>
    6f90:	4824      	ldr	r0, [pc, #144]	; (7024 <mpsc_pbuf_free+0xcc>)
    6f92:	4631      	mov	r1, r6
    6f94:	f010 fe5b 	bl	17c4e <assert_print>
    6f98:	481f      	ldr	r0, [pc, #124]	; (7018 <mpsc_pbuf_free+0xc0>)
    6f9a:	218e      	movs	r1, #142	; 0x8e
    6f9c:	f010 fe50 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    6fa0:	4630      	mov	r0, r6
    6fa2:	f007 fa3f 	bl	e424 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    6fa6:	782b      	ldrb	r3, [r5, #0]
    6fa8:	f36f 0300 	bfc	r3, #0, #1
    6fac:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6fae:	6923      	ldr	r3, [r4, #16]
    6fb0:	079b      	lsls	r3, r3, #30
    6fb2:	d505      	bpl.n	6fc0 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    6fb4:	68e2      	ldr	r2, [r4, #12]
    6fb6:	6a23      	ldr	r3, [r4, #32]
    6fb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6fbc:	429d      	cmp	r5, r3
    6fbe:	d125      	bne.n	700c <mpsc_pbuf_free+0xb4>
		witem->hdr.busy = 0;
    6fc0:	782b      	ldrb	r3, [r5, #0]
    6fc2:	f36f 0341 	bfc	r3, #1, #1
    6fc6:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6fc8:	68e1      	ldr	r1, [r4, #12]
    6fca:	463a      	mov	r2, r7
    6fcc:	4620      	mov	r0, r4
    6fce:	f010 fe70 	bl	17cb2 <idx_inc>
    6fd2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fd4:	4630      	mov	r0, r6
    6fd6:	f007 fa15 	bl	e404 <z_spin_unlock_valid>
    6fda:	b968      	cbnz	r0, 6ff8 <mpsc_pbuf_free+0xa0>
    6fdc:	4a0e      	ldr	r2, [pc, #56]	; (7018 <mpsc_pbuf_free+0xc0>)
    6fde:	4912      	ldr	r1, [pc, #72]	; (7028 <mpsc_pbuf_free+0xd0>)
    6fe0:	480f      	ldr	r0, [pc, #60]	; (7020 <mpsc_pbuf_free+0xc8>)
    6fe2:	23b9      	movs	r3, #185	; 0xb9
    6fe4:	f010 fe33 	bl	17c4e <assert_print>
    6fe8:	4810      	ldr	r0, [pc, #64]	; (702c <mpsc_pbuf_free+0xd4>)
    6fea:	4631      	mov	r1, r6
    6fec:	f010 fe2f 	bl	17c4e <assert_print>
    6ff0:	4809      	ldr	r0, [pc, #36]	; (7018 <mpsc_pbuf_free+0xc0>)
    6ff2:	21b9      	movs	r1, #185	; 0xb9
    6ff4:	f010 fe24 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    6ff8:	f388 8811 	msr	BASEPRI, r8
    6ffc:	f3bf 8f6f 	isb	sy
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    7000:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    7004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7008:	f007 bd54 	b.w	eab4 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    700c:	682b      	ldr	r3, [r5, #0]
    700e:	f367 039f 	bfi	r3, r7, #2, #30
    7012:	602b      	str	r3, [r5, #0]
    7014:	e7de      	b.n	6fd4 <mpsc_pbuf_free+0x7c>
    7016:	bf00      	nop
    7018:	0003bd42 	.word	0x0003bd42
    701c:	0003bd9b 	.word	0x0003bd9b
    7020:	0003baf1 	.word	0x0003baf1
    7024:	0003bdb0 	.word	0x0003bdb0
    7028:	0003bd6f 	.word	0x0003bd6f
    702c:	0003bd86 	.word	0x0003bd86

00007030 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    7030:	b508      	push	{r3, lr}
	__asm__ volatile(
    7032:	f04f 0220 	mov.w	r2, #32
    7036:	f3ef 8311 	mrs	r3, BASEPRI
    703a:	f382 8812 	msr	BASEPRI_MAX, r2
    703e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    7042:	f002 f947 	bl	92d4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    7046:	4803      	ldr	r0, [pc, #12]	; (7054 <sys_reboot+0x24>)
    7048:	f010 fd0e 	bl	17a68 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    704c:	f001 f84e 	bl	80ec <arch_cpu_idle>
    7050:	e7fc      	b.n	704c <sys_reboot+0x1c>
    7052:	bf00      	nop
    7054:	0003bf92 	.word	0x0003bf92

00007058 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    7058:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    705a:	4910      	ldr	r1, [pc, #64]	; (709c <enable_logger+0x44>)
    705c:	4810      	ldr	r0, [pc, #64]	; (70a0 <enable_logger+0x48>)
{
    705e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    7060:	2200      	movs	r2, #0
    7062:	f011 fd13 	bl	18a8c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7066:	4d0f      	ldr	r5, [pc, #60]	; (70a4 <enable_logger+0x4c>)
    7068:	490f      	ldr	r1, [pc, #60]	; (70a8 <enable_logger+0x50>)
    706a:	2200      	movs	r2, #0
    706c:	2300      	movs	r3, #0
    706e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7072:	2400      	movs	r4, #0
    7074:	230e      	movs	r3, #14
    7076:	e9cd 3403 	strd	r3, r4, [sp, #12]
    707a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    707e:	4b0b      	ldr	r3, [pc, #44]	; (70ac <enable_logger+0x54>)
    7080:	9400      	str	r4, [sp, #0]
    7082:	f44f 7240 	mov.w	r2, #768	; 0x300
    7086:	4628      	mov	r0, r5
    7088:	f007 f8d6 	bl	e238 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    708c:	4908      	ldr	r1, [pc, #32]	; (70b0 <enable_logger+0x58>)
    708e:	4628      	mov	r0, r5
    7090:	f011 fc92 	bl	189b8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    7094:	4620      	mov	r0, r4
    7096:	b009      	add	sp, #36	; 0x24
    7098:	bd30      	pop	{r4, r5, pc}
    709a:	bf00      	nop
    709c:	000070b5 	.word	0x000070b5
    70a0:	20000aa0 	.word	0x20000aa0
    70a4:	20000ad8 	.word	0x20000ad8
    70a8:	20024e00 	.word	0x20024e00
    70ac:	00007305 	.word	0x00007305
    70b0:	0003bfbb 	.word	0x0003bfbb

000070b4 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    70b4:	4801      	ldr	r0, [pc, #4]	; (70bc <log_process_thread_timer_expiry_fn+0x8>)
    70b6:	f007 bcfd 	b.w	eab4 <z_impl_k_sem_give>
    70ba:	bf00      	nop
    70bc:	20000690 	.word	0x20000690

000070c0 <log_format_func_t_get>:
}
    70c0:	4b01      	ldr	r3, [pc, #4]	; (70c8 <log_format_func_t_get+0x8>)
    70c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    70c6:	4770      	bx	lr
    70c8:	0001d4c8 	.word	0x0001d4c8

000070cc <log_init>:
{
    70cc:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    70ce:	4b19      	ldr	r3, [pc, #100]	; (7134 <log_init+0x68>)
    70d0:	4c19      	ldr	r4, [pc, #100]	; (7138 <log_init+0x6c>)
    70d2:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    70d4:	2c90      	cmp	r4, #144	; 0x90
    70d6:	d90b      	bls.n	70f0 <log_init+0x24>
    70d8:	4918      	ldr	r1, [pc, #96]	; (713c <log_init+0x70>)
    70da:	4819      	ldr	r0, [pc, #100]	; (7140 <log_init+0x74>)
    70dc:	4a19      	ldr	r2, [pc, #100]	; (7144 <log_init+0x78>)
    70de:	f240 2373 	movw	r3, #627	; 0x273
    70e2:	f010 fdb4 	bl	17c4e <assert_print>
    70e6:	4817      	ldr	r0, [pc, #92]	; (7144 <log_init+0x78>)
    70e8:	f240 2173 	movw	r1, #627	; 0x273
    70ec:	f010 fda8 	bl	17c40 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    70f0:	f3bf 8f5b 	dmb	ish
    70f4:	4b14      	ldr	r3, [pc, #80]	; (7148 <log_init+0x7c>)
    70f6:	e853 6f00 	ldrex	r6, [r3]
    70fa:	1c72      	adds	r2, r6, #1
    70fc:	e843 2100 	strex	r1, r2, [r3]
    7100:	2900      	cmp	r1, #0
    7102:	d1f8      	bne.n	70f6 <log_init+0x2a>
    7104:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    7108:	b91e      	cbnz	r6, 7112 <log_init+0x46>
    710a:	1125      	asrs	r5, r4, #4
    710c:	4c09      	ldr	r4, [pc, #36]	; (7134 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    710e:	42ae      	cmp	r6, r5
    7110:	db00      	blt.n	7114 <log_init+0x48>
}
    7112:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    7114:	7b23      	ldrb	r3, [r4, #12]
    7116:	b153      	cbz	r3, 712e <log_init+0x62>
			if (backend->api->init != NULL) {
    7118:	6823      	ldr	r3, [r4, #0]
    711a:	699b      	ldr	r3, [r3, #24]
    711c:	b10b      	cbz	r3, 7122 <log_init+0x56>
				backend->api->init(backend);
    711e:	4620      	mov	r0, r4
    7120:	4798      	blx	r3
			log_backend_enable(backend,
    7122:	6863      	ldr	r3, [r4, #4]
    7124:	2204      	movs	r2, #4
    7126:	6819      	ldr	r1, [r3, #0]
    7128:	4620      	mov	r0, r4
    712a:	f000 f9b5 	bl	7498 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    712e:	3601      	adds	r6, #1
    7130:	3410      	adds	r4, #16
    7132:	e7ec      	b.n	710e <log_init+0x42>
    7134:	0001c880 	.word	0x0001c880
    7138:	0001c890 	.word	0x0001c890
    713c:	0003c008 	.word	0x0003c008
    7140:	0003baf1 	.word	0x0003baf1
    7144:	0003bfc3 	.word	0x0003bfc3
    7148:	20010938 	.word	0x20010938

0000714c <z_log_notify_backend_enabled>:
{
    714c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    714e:	4c04      	ldr	r4, [pc, #16]	; (7160 <z_log_notify_backend_enabled+0x14>)
    7150:	7823      	ldrb	r3, [r4, #0]
    7152:	b913      	cbnz	r3, 715a <z_log_notify_backend_enabled+0xe>
    7154:	4803      	ldr	r0, [pc, #12]	; (7164 <z_log_notify_backend_enabled+0x18>)
    7156:	f007 fcad 	bl	eab4 <z_impl_k_sem_give>
	backend_attached = true;
    715a:	2301      	movs	r3, #1
    715c:	7023      	strb	r3, [r4, #0]
}
    715e:	bd10      	pop	{r4, pc}
    7160:	200245c4 	.word	0x200245c4
    7164:	20000690 	.word	0x20000690

00007168 <z_log_dropped>:
    7168:	4b0c      	ldr	r3, [pc, #48]	; (719c <z_log_dropped+0x34>)
    716a:	f3bf 8f5b 	dmb	ish
    716e:	e853 2f00 	ldrex	r2, [r3]
    7172:	3201      	adds	r2, #1
    7174:	e843 2100 	strex	r1, r2, [r3]
    7178:	2900      	cmp	r1, #0
    717a:	d1f8      	bne.n	716e <z_log_dropped+0x6>
    717c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    7180:	b158      	cbz	r0, 719a <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    7182:	f3bf 8f5b 	dmb	ish
    7186:	4b06      	ldr	r3, [pc, #24]	; (71a0 <z_log_dropped+0x38>)
    7188:	e853 2f00 	ldrex	r2, [r3]
    718c:	3a01      	subs	r2, #1
    718e:	e843 2100 	strex	r1, r2, [r3]
    7192:	2900      	cmp	r1, #0
    7194:	d1f8      	bne.n	7188 <z_log_dropped+0x20>
    7196:	f3bf 8f5b 	dmb	ish
}
    719a:	4770      	bx	lr
    719c:	20010934 	.word	0x20010934
    71a0:	20010930 	.word	0x20010930

000071a4 <z_log_dropped_read_and_clear>:
}
    71a4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    71a6:	4b06      	ldr	r3, [pc, #24]	; (71c0 <z_log_dropped_read_and_clear+0x1c>)
    71a8:	f3bf 8f5b 	dmb	ish
    71ac:	4602      	mov	r2, r0
    71ae:	e853 0f00 	ldrex	r0, [r3]
    71b2:	e843 2100 	strex	r1, r2, [r3]
    71b6:	2900      	cmp	r1, #0
    71b8:	d1f9      	bne.n	71ae <z_log_dropped_read_and_clear+0xa>
    71ba:	f3bf 8f5b 	dmb	ish
    71be:	4770      	bx	lr
    71c0:	20010934 	.word	0x20010934

000071c4 <dropped_notify>:
{
    71c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    71c6:	f7ff ffed 	bl	71a4 <z_log_dropped_read_and_clear>
    71ca:	4c0b      	ldr	r4, [pc, #44]	; (71f8 <dropped_notify+0x34>)
    71cc:	4d0b      	ldr	r5, [pc, #44]	; (71fc <dropped_notify+0x38>)
    71ce:	1b2d      	subs	r5, r5, r4
    71d0:	4607      	mov	r7, r0
    71d2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    71d4:	2600      	movs	r6, #0
    71d6:	42ae      	cmp	r6, r5
    71d8:	db00      	blt.n	71dc <dropped_notify+0x18>
}
    71da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    71dc:	4620      	mov	r0, r4
    71de:	f010 fe14 	bl	17e0a <log_backend_is_active>
    71e2:	b128      	cbz	r0, 71f0 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
    71e4:	6823      	ldr	r3, [r4, #0]
    71e6:	691b      	ldr	r3, [r3, #16]
    71e8:	b113      	cbz	r3, 71f0 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
    71ea:	4639      	mov	r1, r7
    71ec:	4620      	mov	r0, r4
    71ee:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    71f0:	3601      	adds	r6, #1
    71f2:	3410      	adds	r4, #16
    71f4:	e7ef      	b.n	71d6 <dropped_notify+0x12>
    71f6:	bf00      	nop
    71f8:	0001c880 	.word	0x0001c880
    71fc:	0001c890 	.word	0x0001c890

00007200 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    7200:	4901      	ldr	r1, [pc, #4]	; (7208 <z_log_msg2_init+0x8>)
    7202:	4802      	ldr	r0, [pc, #8]	; (720c <z_log_msg2_init+0xc>)
    7204:	f7ff bcb6 	b.w	6b74 <mpsc_pbuf_init>
    7208:	0001d4d4 	.word	0x0001d4d4
    720c:	2001093c 	.word	0x2001093c

00007210 <log_core_init>:
	panic_mode = false;
    7210:	4a08      	ldr	r2, [pc, #32]	; (7234 <log_core_init+0x24>)
{
    7212:	b508      	push	{r3, lr}
	panic_mode = false;
    7214:	2300      	movs	r3, #0
    7216:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    7218:	4a07      	ldr	r2, [pc, #28]	; (7238 <log_core_init+0x28>)
    721a:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    721c:	4b07      	ldr	r3, [pc, #28]	; (723c <log_core_init+0x2c>)
    721e:	4a08      	ldr	r2, [pc, #32]	; (7240 <log_core_init+0x30>)
    7220:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    7222:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7226:	f000 fb7b 	bl	7920 <log_output_timestamp_freq_set>
}
    722a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    722e:	f7ff bfe7 	b.w	7200 <z_log_msg2_init>
    7232:	bf00      	nop
    7234:	200245c5 	.word	0x200245c5
    7238:	20010934 	.word	0x20010934
    723c:	20000004 	.word	0x20000004
    7240:	00017e11 	.word	0x00017e11

00007244 <z_log_msg2_alloc>:
{
    7244:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    7246:	2200      	movs	r2, #0
    7248:	4801      	ldr	r0, [pc, #4]	; (7250 <z_log_msg2_alloc+0xc>)
    724a:	2300      	movs	r3, #0
    724c:	f7ff bcc6 	b.w	6bdc <mpsc_pbuf_alloc>
    7250:	2001093c 	.word	0x2001093c

00007254 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    7254:	4801      	ldr	r0, [pc, #4]	; (725c <z_log_msg2_claim+0x8>)
    7256:	f7ff bdf7 	b.w	6e48 <mpsc_pbuf_claim>
    725a:	bf00      	nop
    725c:	2001093c 	.word	0x2001093c

00007260 <z_log_msg2_free>:
{
    7260:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    7262:	4801      	ldr	r0, [pc, #4]	; (7268 <z_log_msg2_free+0x8>)
    7264:	f7ff be78 	b.w	6f58 <mpsc_pbuf_free>
    7268:	2001093c 	.word	0x2001093c

0000726c <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    726c:	4801      	ldr	r0, [pc, #4]	; (7274 <z_log_msg2_pending+0x8>)
    726e:	f010 bdaf 	b.w	17dd0 <mpsc_pbuf_is_pending>
    7272:	bf00      	nop
    7274:	2001093c 	.word	0x2001093c

00007278 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    7278:	4b1d      	ldr	r3, [pc, #116]	; (72f0 <z_impl_log_process+0x78>)
    727a:	781b      	ldrb	r3, [r3, #0]
{
    727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7280:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    7282:	b903      	cbnz	r3, 7286 <z_impl_log_process+0xe>
    7284:	b390      	cbz	r0, 72ec <z_impl_log_process+0x74>
	msg = get_msg();
    7286:	f010 fdd8 	bl	17e3a <get_msg>
	if (msg.msg) {
    728a:	4606      	mov	r6, r0
    728c:	b118      	cbz	r0, 7296 <z_impl_log_process+0x1e>
		if (!bypass) {
    728e:	b16d      	cbz	r5, 72ac <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    7290:	4630      	mov	r0, r6
    7292:	f7ff ffe5 	bl	7260 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    7296:	b92d      	cbnz	r5, 72a4 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    7298:	4b16      	ldr	r3, [pc, #88]	; (72f4 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    729a:	681b      	ldr	r3, [r3, #0]
    729c:	2b00      	cmp	r3, #0
    729e:	dd01      	ble.n	72a4 <z_impl_log_process+0x2c>
		dropped_notify();
    72a0:	f7ff ff90 	bl	71c4 <dropped_notify>
}
    72a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    72a8:	f7ff bfe0 	b.w	726c <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    72ac:	4b12      	ldr	r3, [pc, #72]	; (72f8 <z_impl_log_process+0x80>)
    72ae:	f3bf 8f5b 	dmb	ish
    72b2:	e853 2f00 	ldrex	r2, [r3]
    72b6:	3a01      	subs	r2, #1
    72b8:	e843 2100 	strex	r1, r2, [r3]
    72bc:	2900      	cmp	r1, #0
    72be:	d1f8      	bne.n	72b2 <z_impl_log_process+0x3a>
    72c0:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    72c4:	4c0d      	ldr	r4, [pc, #52]	; (72fc <z_impl_log_process+0x84>)
    72c6:	4f0e      	ldr	r7, [pc, #56]	; (7300 <z_impl_log_process+0x88>)
    72c8:	1b3f      	subs	r7, r7, r4
    72ca:	113f      	asrs	r7, r7, #4
    72cc:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    72ce:	45b8      	cmp	r8, r7
    72d0:	dade      	bge.n	7290 <z_impl_log_process+0x18>
			if (log_backend_is_active(backend) &&
    72d2:	4620      	mov	r0, r4
    72d4:	f010 fd99 	bl	17e0a <log_backend_is_active>
    72d8:	b120      	cbz	r0, 72e4 <z_impl_log_process+0x6c>
	backend->api->process(backend, msg);
    72da:	6823      	ldr	r3, [r4, #0]
    72dc:	4631      	mov	r1, r6
    72de:	681b      	ldr	r3, [r3, #0]
    72e0:	4620      	mov	r0, r4
    72e2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    72e4:	f108 0801 	add.w	r8, r8, #1
    72e8:	3410      	adds	r4, #16
    72ea:	e7f0      	b.n	72ce <z_impl_log_process+0x56>
}
    72ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72f0:	200245c4 	.word	0x200245c4
    72f4:	20010934 	.word	0x20010934
    72f8:	20010930 	.word	0x20010930
    72fc:	0001c880 	.word	0x0001c880
    7300:	0001c890 	.word	0x0001c890

00007304 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
    7304:	4b16      	ldr	r3, [pc, #88]	; (7360 <log_process_thread_func+0x5c>)
    7306:	4a17      	ldr	r2, [pc, #92]	; (7364 <log_process_thread_func+0x60>)
    7308:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    730a:	2b00      	cmp	r3, #0
{
    730c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    730e:	dc0b      	bgt.n	7328 <log_process_thread_func+0x24>
    7310:	4915      	ldr	r1, [pc, #84]	; (7368 <log_process_thread_func+0x64>)
    7312:	4816      	ldr	r0, [pc, #88]	; (736c <log_process_thread_func+0x68>)
    7314:	4a16      	ldr	r2, [pc, #88]	; (7370 <log_process_thread_func+0x6c>)
    7316:	f240 533b 	movw	r3, #1339	; 0x53b
    731a:	f010 fc98 	bl	17c4e <assert_print>
    731e:	4814      	ldr	r0, [pc, #80]	; (7370 <log_process_thread_func+0x6c>)
    7320:	f240 513b 	movw	r1, #1339	; 0x53b
    7324:	f010 fc8c 	bl	17c40 <assert_post_action>
	log_init();
    7328:	f7ff fed0 	bl	70cc <log_init>
	return z_impl_z_current_get();
    732c:	f008 fea2 	bl	10074 <z_impl_z_current_get>
	proc_tid = process_tid;
    7330:	4b10      	ldr	r3, [pc, #64]	; (7374 <log_process_thread_func+0x70>)
    7332:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    7334:	b130      	cbz	r0, 7344 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    7336:	4b10      	ldr	r3, [pc, #64]	; (7378 <log_process_thread_func+0x74>)
	    process_tid &&
    7338:	681b      	ldr	r3, [r3, #0]
    733a:	2b09      	cmp	r3, #9
    733c:	dd02      	ble.n	7344 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
    733e:	480f      	ldr	r0, [pc, #60]	; (737c <log_process_thread_func+0x78>)
    7340:	f007 fbb8 	bl	eab4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    7344:	4c0d      	ldr	r4, [pc, #52]	; (737c <log_process_thread_func+0x78>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    7346:	2000      	movs	r0, #0
    7348:	f7ff ff96 	bl	7278 <z_impl_log_process>
		if (log_process(false) == false) {
    734c:	2800      	cmp	r0, #0
    734e:	d1fa      	bne.n	7346 <log_process_thread_func+0x42>
    7350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7358:	4620      	mov	r0, r4
    735a:	f007 fbe9 	bl	eb30 <z_impl_k_sem_take>
    735e:	e7f2      	b.n	7346 <log_process_thread_func+0x42>
    7360:	0001c890 	.word	0x0001c890
    7364:	0001c880 	.word	0x0001c880
    7368:	0003c02c 	.word	0x0003c02c
    736c:	0003baf1 	.word	0x0003baf1
    7370:	0003bfc3 	.word	0x0003bfc3
    7374:	20010978 	.word	0x20010978
    7378:	20010930 	.word	0x20010930
    737c:	20000690 	.word	0x20000690

00007380 <z_log_msg_post_finalize>:
{
    7380:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7382:	4b1d      	ldr	r3, [pc, #116]	; (73f8 <z_log_msg_post_finalize+0x78>)
    7384:	f3bf 8f5b 	dmb	ish
    7388:	e853 2f00 	ldrex	r2, [r3]
    738c:	1c51      	adds	r1, r2, #1
    738e:	e843 1000 	strex	r0, r1, [r3]
    7392:	2800      	cmp	r0, #0
    7394:	d1f8      	bne.n	7388 <z_log_msg_post_finalize+0x8>
    7396:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    739a:	4b18      	ldr	r3, [pc, #96]	; (73fc <z_log_msg_post_finalize+0x7c>)
    739c:	781b      	ldrb	r3, [r3, #0]
    739e:	b183      	cbz	r3, 73c2 <z_log_msg_post_finalize+0x42>
    73a0:	f04f 0320 	mov.w	r3, #32
    73a4:	f3ef 8411 	mrs	r4, BASEPRI
    73a8:	f383 8812 	msr	BASEPRI_MAX, r3
    73ac:	f3bf 8f6f 	isb	sy
    73b0:	2000      	movs	r0, #0
    73b2:	f7ff ff61 	bl	7278 <z_impl_log_process>
	__asm__ volatile(
    73b6:	f384 8811 	msr	BASEPRI, r4
    73ba:	f3bf 8f6f 	isb	sy
}
    73be:	b002      	add	sp, #8
    73c0:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    73c2:	4b0f      	ldr	r3, [pc, #60]	; (7400 <z_log_msg_post_finalize+0x80>)
    73c4:	681b      	ldr	r3, [r3, #0]
    73c6:	2b00      	cmp	r3, #0
    73c8:	d0f9      	beq.n	73be <z_log_msg_post_finalize+0x3e>
    73ca:	b952      	cbnz	r2, 73e2 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    73cc:	2200      	movs	r2, #0
    73ce:	2300      	movs	r3, #0
    73d0:	e9cd 2300 	strd	r2, r3, [sp]
    73d4:	480b      	ldr	r0, [pc, #44]	; (7404 <z_log_msg_post_finalize+0x84>)
    73d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    73da:	2300      	movs	r3, #0
    73dc:	f009 fb40 	bl	10a60 <z_impl_k_timer_start>
    73e0:	e7ed      	b.n	73be <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    73e2:	2a0a      	cmp	r2, #10
    73e4:	d1eb      	bne.n	73be <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    73e6:	4807      	ldr	r0, [pc, #28]	; (7404 <z_log_msg_post_finalize+0x84>)
    73e8:	f011 fb5c 	bl	18aa4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    73ec:	4806      	ldr	r0, [pc, #24]	; (7408 <z_log_msg_post_finalize+0x88>)
}
    73ee:	b002      	add	sp, #8
    73f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73f4:	f007 bb5e 	b.w	eab4 <z_impl_k_sem_give>
    73f8:	20010930 	.word	0x20010930
    73fc:	200245c5 	.word	0x200245c5
    7400:	20010978 	.word	0x20010978
    7404:	20000aa0 	.word	0x20000aa0
    7408:	20000690 	.word	0x20000690

0000740c <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    740c:	4b06      	ldr	r3, [pc, #24]	; (7428 <z_log_msg2_commit+0x1c>)
{
    740e:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    7410:	681b      	ldr	r3, [r3, #0]
{
    7412:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    7414:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    7416:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    7418:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    741a:	4804      	ldr	r0, [pc, #16]	; (742c <z_log_msg2_commit+0x20>)
    741c:	f7ff fcbc 	bl	6d98 <mpsc_pbuf_commit>
}
    7420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    7424:	f7ff bfac 	b.w	7380 <z_log_msg_post_finalize>
    7428:	20000004 	.word	0x20000004
    742c:	2001093c 	.word	0x2001093c

00007430 <z_impl_log_panic>:
{
    7430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    7432:	4f0f      	ldr	r7, [pc, #60]	; (7470 <z_impl_log_panic+0x40>)
    7434:	783d      	ldrb	r5, [r7, #0]
    7436:	b975      	cbnz	r5, 7456 <z_impl_log_panic+0x26>
    7438:	4c0e      	ldr	r4, [pc, #56]	; (7474 <z_impl_log_panic+0x44>)
    743a:	4e0f      	ldr	r6, [pc, #60]	; (7478 <z_impl_log_panic+0x48>)
	log_init();
    743c:	f7ff fe46 	bl	70cc <log_init>
    7440:	1b36      	subs	r6, r6, r4
    7442:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    7444:	42b5      	cmp	r5, r6
    7446:	db07      	blt.n	7458 <z_impl_log_panic+0x28>
    7448:	2000      	movs	r0, #0
    744a:	f7ff ff15 	bl	7278 <z_impl_log_process>
		while (log_process(false) == true) {
    744e:	2800      	cmp	r0, #0
    7450:	d1fa      	bne.n	7448 <z_impl_log_panic+0x18>
	panic_mode = true;
    7452:	2301      	movs	r3, #1
    7454:	703b      	strb	r3, [r7, #0]
}
    7456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    7458:	4620      	mov	r0, r4
    745a:	f010 fcd6 	bl	17e0a <log_backend_is_active>
    745e:	b118      	cbz	r0, 7468 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
    7460:	6823      	ldr	r3, [r4, #0]
    7462:	4620      	mov	r0, r4
    7464:	695b      	ldr	r3, [r3, #20]
    7466:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    7468:	3501      	adds	r5, #1
    746a:	3410      	adds	r4, #16
    746c:	e7ea      	b.n	7444 <z_impl_log_panic+0x14>
    746e:	bf00      	nop
    7470:	200245c5 	.word	0x200245c5
    7474:	0001c880 	.word	0x0001c880
    7478:	0001c890 	.word	0x0001c890

0000747c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    747c:	4a04      	ldr	r2, [pc, #16]	; (7490 <log_source_name_get+0x14>)
    747e:	4b05      	ldr	r3, [pc, #20]	; (7494 <log_source_name_get+0x18>)
    7480:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    7482:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    7486:	bf34      	ite	cc
    7488:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    748c:	2000      	movcs	r0, #0
}
    748e:	4770      	bx	lr
    7490:	0001c810 	.word	0x0001c810
    7494:	0001c880 	.word	0x0001c880

00007498 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    7498:	b570      	push	{r4, r5, r6, lr}
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    749a:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    749c:	4c0e      	ldr	r4, [pc, #56]	; (74d8 <log_backend_enable+0x40>)
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    749e:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    74a0:	1b04      	subs	r4, r0, r4
    74a2:	1124      	asrs	r4, r4, #4
{
    74a4:	4605      	mov	r5, r0
    74a6:	460e      	mov	r6, r1
	id += backend - log_backend_get(0);
    74a8:	3401      	adds	r4, #1
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    74aa:	b963      	cbnz	r3, 74c6 <log_backend_enable+0x2e>
    74ac:	490b      	ldr	r1, [pc, #44]	; (74dc <log_backend_enable+0x44>)
    74ae:	4a0c      	ldr	r2, [pc, #48]	; (74e0 <log_backend_enable+0x48>)
    74b0:	480c      	ldr	r0, [pc, #48]	; (74e4 <log_backend_enable+0x4c>)
    74b2:	23bb      	movs	r3, #187	; 0xbb
    74b4:	f010 fbcb 	bl	17c4e <assert_print>
    74b8:	480b      	ldr	r0, [pc, #44]	; (74e8 <log_backend_enable+0x50>)
    74ba:	f010 fbc8 	bl	17c4e <assert_print>
    74be:	4808      	ldr	r0, [pc, #32]	; (74e0 <log_backend_enable+0x48>)
    74c0:	21bb      	movs	r1, #187	; 0xbb
    74c2:	f010 fbbd 	bl	17c40 <assert_post_action>
	backend->cb->id = id;
    74c6:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    74c8:	2201      	movs	r2, #1
	}

	log_backend_id_set(backend, id);
    74ca:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    74cc:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    74ce:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    74d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    74d4:	f7ff be3a 	b.w	714c <z_log_notify_backend_enabled>
    74d8:	0001c880 	.word	0x0001c880
    74dc:	0003c0a4 	.word	0x0003c0a4
    74e0:	0003c04c 	.word	0x0003c04c
    74e4:	0003baf1 	.word	0x0003baf1
    74e8:	0003c0ba 	.word	0x0003c0ba

000074ec <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    74ec:	b40e      	push	{r1, r2, r3}
    74ee:	b503      	push	{r0, r1, lr}
    74f0:	ab03      	add	r3, sp, #12
    74f2:	4601      	mov	r1, r0
    74f4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    74f8:	4804      	ldr	r0, [pc, #16]	; (750c <print_formatted+0x20>)
	va_start(args, fmt);
    74fa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    74fc:	f7f9 fd5c 	bl	fb8 <cbvprintf>
	va_end(args);

	return length;
}
    7500:	b002      	add	sp, #8
    7502:	f85d eb04 	ldr.w	lr, [sp], #4
    7506:	b003      	add	sp, #12
    7508:	4770      	bx	lr
    750a:	bf00      	nop
    750c:	00007779 	.word	0x00007779

00007510 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    7510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7514:	461d      	mov	r5, r3
    7516:	9b08      	ldr	r3, [sp, #32]
    7518:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    751a:	06da      	lsls	r2, r3, #27
{
    751c:	4604      	mov	r4, r0
    751e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    7520:	d405      	bmi.n	752e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    7522:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    7524:	bf4c      	ite	mi
    7526:	492b      	ldrmi	r1, [pc, #172]	; (75d4 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    7528:	492b      	ldrpl	r1, [pc, #172]	; (75d8 <hexdump_line_print+0xc8>)
    752a:	f7ff ffdf 	bl	74ec <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    752e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 75e0 <hexdump_line_print+0xd0>
{
    7532:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    7536:	45a8      	cmp	r8, r5
    7538:	db2d      	blt.n	7596 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    753a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 75e4 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    753e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 75e8 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    7542:	f8df a09c 	ldr.w	sl, [pc, #156]	; 75e0 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    7546:	2500      	movs	r5, #0
		if (i < length) {
    7548:	42bd      	cmp	r5, r7
    754a:	d232      	bcs.n	75b2 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    754c:	5d72      	ldrb	r2, [r6, r5]
    754e:	4649      	mov	r1, r9
    7550:	4620      	mov	r0, r4
    7552:	f7ff ffcb 	bl	74ec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    7556:	3501      	adds	r5, #1
    7558:	2d10      	cmp	r5, #16
    755a:	d123      	bne.n	75a4 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
    755c:	491f      	ldr	r1, [pc, #124]	; (75dc <hexdump_line_print+0xcc>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    755e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 75e0 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    7562:	f8df 9088 	ldr.w	r9, [pc, #136]	; 75ec <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    7566:	f8df a088 	ldr.w	sl, [pc, #136]	; 75f0 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    756a:	4620      	mov	r0, r4
    756c:	f7ff ffbe 	bl	74ec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    7570:	2500      	movs	r5, #0
		if (i < length) {
    7572:	42af      	cmp	r7, r5
    7574:	d929      	bls.n	75ca <hexdump_line_print+0xba>
			char c = (char)data[i];
    7576:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    7578:	f812 3009 	ldrb.w	r3, [r2, r9]
    757c:	f013 0f97 	tst.w	r3, #151	; 0x97
    7580:	bf08      	it	eq
    7582:	222e      	moveq	r2, #46	; 0x2e
    7584:	4651      	mov	r1, sl
    7586:	4620      	mov	r0, r4
    7588:	f7ff ffb0 	bl	74ec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    758c:	3501      	adds	r5, #1
    758e:	2d10      	cmp	r5, #16
    7590:	d114      	bne.n	75bc <hexdump_line_print+0xac>
		}
	}
}
    7592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    7596:	4649      	mov	r1, r9
    7598:	4620      	mov	r0, r4
    759a:	f7ff ffa7 	bl	74ec <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    759e:	f108 0801 	add.w	r8, r8, #1
    75a2:	e7c8      	b.n	7536 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    75a4:	076a      	lsls	r2, r5, #29
    75a6:	d1cf      	bne.n	7548 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    75a8:	4651      	mov	r1, sl
    75aa:	4620      	mov	r0, r4
    75ac:	f7ff ff9e 	bl	74ec <print_formatted>
    75b0:	e7ca      	b.n	7548 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    75b2:	4641      	mov	r1, r8
    75b4:	4620      	mov	r0, r4
    75b6:	f7ff ff99 	bl	74ec <print_formatted>
    75ba:	e7cc      	b.n	7556 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    75bc:	076b      	lsls	r3, r5, #29
    75be:	d1d8      	bne.n	7572 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    75c0:	4641      	mov	r1, r8
    75c2:	4620      	mov	r0, r4
    75c4:	f7ff ff92 	bl	74ec <print_formatted>
    75c8:	e7d3      	b.n	7572 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    75ca:	4641      	mov	r1, r8
    75cc:	4620      	mov	r0, r4
    75ce:	f7ff ff8d 	bl	74ec <print_formatted>
    75d2:	e7db      	b.n	758c <hexdump_line_print+0x7c>
    75d4:	0003dca1 	.word	0x0003dca1
    75d8:	0003c0dc 	.word	0x0003c0dc
    75dc:	0003c0e5 	.word	0x0003c0e5
    75e0:	0003ed26 	.word	0x0003ed26
    75e4:	0003ed24 	.word	0x0003ed24
    75e8:	0003c0df 	.word	0x0003c0df
    75ec:	0003ed70 	.word	0x0003ed70
    75f0:	0003c0e7 	.word	0x0003c0e7

000075f4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    75f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75f8:	b087      	sub	sp, #28
    75fa:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    75fc:	f001 0301 	and.w	r3, r1, #1
{
    7600:	9205      	str	r2, [sp, #20]
    7602:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    7606:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    760a:	9304      	str	r3, [sp, #16]
{
    760c:	4607      	mov	r7, r0
    760e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    7610:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    7614:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    7618:	f010 fc13 	bl	17e42 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    761c:	4602      	mov	r2, r0
    761e:	2800      	cmp	r0, #0
    7620:	d044      	beq.n	76ac <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    7622:	493a      	ldr	r1, [pc, #232]	; (770c <prefix_print+0x118>)
    7624:	4638      	mov	r0, r7
    7626:	f7ff ff61 	bl	74ec <print_formatted>
    762a:	4605      	mov	r5, r0
	}

	if (stamp) {
    762c:	f1bb 0f00 	cmp.w	fp, #0
    7630:	d008      	beq.n	7644 <prefix_print+0x50>
	if (!format) {
    7632:	f018 0f44 	tst.w	r8, #68	; 0x44
    7636:	d13b      	bne.n	76b0 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    7638:	4935      	ldr	r1, [pc, #212]	; (7710 <prefix_print+0x11c>)
    763a:	4622      	mov	r2, r4
    763c:	4638      	mov	r0, r7
    763e:	f7ff ff55 	bl	74ec <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    7642:	4405      	add	r5, r0
	if (color) {
    7644:	9b04      	ldr	r3, [sp, #16]
    7646:	b153      	cbz	r3, 765e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    7648:	4b32      	ldr	r3, [pc, #200]	; (7714 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    764a:	4933      	ldr	r1, [pc, #204]	; (7718 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    764c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    7650:	4b32      	ldr	r3, [pc, #200]	; (771c <prefix_print+0x128>)
    7652:	4638      	mov	r0, r7
    7654:	2a00      	cmp	r2, #0
    7656:	bf08      	it	eq
    7658:	461a      	moveq	r2, r3
    765a:	f7ff ff47 	bl	74ec <print_formatted>
	if (level_on) {
    765e:	b13e      	cbz	r6, 7670 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    7660:	4b2f      	ldr	r3, [pc, #188]	; (7720 <prefix_print+0x12c>)
    7662:	4930      	ldr	r1, [pc, #192]	; (7724 <prefix_print+0x130>)
    7664:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    7668:	4638      	mov	r0, r7
    766a:	f7ff ff3f 	bl	74ec <print_formatted>
    766e:	4606      	mov	r6, r0
	if (source_id >= 0) {
    7670:	f1ba 0f00 	cmp.w	sl, #0
    7674:	db16      	blt.n	76a4 <prefix_print+0xb0>
		total += print_formatted(output,
    7676:	9b05      	ldr	r3, [sp, #20]
    7678:	2b00      	cmp	r3, #0
    767a:	d045      	beq.n	7708 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    767c:	2301      	movs	r3, #1
    767e:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    7682:	4b29      	ldr	r3, [pc, #164]	; (7728 <prefix_print+0x134>)
    7684:	4c29      	ldr	r4, [pc, #164]	; (772c <prefix_print+0x138>)
    7686:	f019 0f10 	tst.w	r9, #16
    768a:	bf18      	it	ne
    768c:	461c      	movne	r4, r3
    768e:	4651      	mov	r1, sl
    7690:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    7694:	f7ff fef2 	bl	747c <log_source_name_get>
    7698:	4621      	mov	r1, r4
    769a:	4602      	mov	r2, r0
    769c:	4638      	mov	r0, r7
    769e:	f7ff ff25 	bl	74ec <print_formatted>
    76a2:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    76a4:	1970      	adds	r0, r6, r5
    76a6:	b007      	add	sp, #28
    76a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    76ac:	4605      	mov	r5, r0
    76ae:	e7bd      	b.n	762c <prefix_print+0x38>
	} else if (freq != 0U) {
    76b0:	4b1f      	ldr	r3, [pc, #124]	; (7730 <prefix_print+0x13c>)
    76b2:	6818      	ldr	r0, [r3, #0]
    76b4:	2800      	cmp	r0, #0
    76b6:	d0c4      	beq.n	7642 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    76b8:	4b1e      	ldr	r3, [pc, #120]	; (7734 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    76ba:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    76be:	681b      	ldr	r3, [r3, #0]
    76c0:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    76c4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    76c8:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    76cc:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    76d0:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    76d4:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    76d8:	fbb3 f2f1 	udiv	r2, r3, r1
    76dc:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    76e0:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    76e4:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    76e8:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    76ec:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    76f0:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    76f4:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    76f6:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    76fa:	490f      	ldr	r1, [pc, #60]	; (7738 <prefix_print+0x144>)
    76fc:	e9cd e001 	strd	lr, r0, [sp, #4]
    7700:	4638      	mov	r0, r7
    7702:	f7ff fef3 	bl	74ec <print_formatted>
    7706:	e79c      	b.n	7642 <prefix_print+0x4e>
		total += print_formatted(output,
    7708:	4c08      	ldr	r4, [pc, #32]	; (772c <prefix_print+0x138>)
    770a:	e7c0      	b.n	768e <prefix_print+0x9a>
    770c:	0003c0f8 	.word	0x0003c0f8
    7710:	0003c0fc 	.word	0x0003c0fc
    7714:	0001d4e8 	.word	0x0001d4e8
    7718:	0003c121 	.word	0x0003c121
    771c:	0003c0ea 	.word	0x0003c0ea
    7720:	0001d4fc 	.word	0x0001d4fc
    7724:	0003c124 	.word	0x0003c124
    7728:	0003c0f4 	.word	0x0003c0f4
    772c:	0003c0ef 	.word	0x0003c0ef
    7730:	2001097c 	.word	0x2001097c
    7734:	20010980 	.word	0x20010980
    7738:	0003c105 	.word	0x0003c105

0000773c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    773c:	b538      	push	{r3, r4, r5, lr}
    773e:	460c      	mov	r4, r1
	if (color) {
    7740:	07e1      	lsls	r1, r4, #31
{
    7742:	4605      	mov	r5, r0
	if (color) {
    7744:	d503      	bpl.n	774e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    7746:	4a08      	ldr	r2, [pc, #32]	; (7768 <postfix_print+0x2c>)
    7748:	4908      	ldr	r1, [pc, #32]	; (776c <postfix_print+0x30>)
    774a:	f7ff fecf 	bl	74ec <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    774e:	06e2      	lsls	r2, r4, #27
    7750:	d408      	bmi.n	7764 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    7752:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    7754:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    7756:	bf4c      	ite	mi
    7758:	4905      	ldrmi	r1, [pc, #20]	; (7770 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    775a:	4906      	ldrpl	r1, [pc, #24]	; (7774 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    775c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    7760:	f7ff bec4 	b.w	74ec <print_formatted>
}
    7764:	bd38      	pop	{r3, r4, r5, pc}
    7766:	bf00      	nop
    7768:	0003c0ea 	.word	0x0003c0ea
    776c:	0003c121 	.word	0x0003c121
    7770:	0003dca1 	.word	0x0003dca1
    7774:	0003c0dc 	.word	0x0003c0dc

00007778 <out_func>:
{
    7778:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    777a:	684b      	ldr	r3, [r1, #4]
    777c:	681a      	ldr	r2, [r3, #0]
    777e:	68cb      	ldr	r3, [r1, #12]
    7780:	429a      	cmp	r2, r3
{
    7782:	4605      	mov	r5, r0
    7784:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    7786:	d102      	bne.n	778e <out_func+0x16>
		log_output_flush(out_ctx);
    7788:	4608      	mov	r0, r1
    778a:	f010 fb69 	bl	17e60 <log_output_flush>
    778e:	6863      	ldr	r3, [r4, #4]
    7790:	f3bf 8f5b 	dmb	ish
    7794:	e853 2f00 	ldrex	r2, [r3]
    7798:	1c51      	adds	r1, r2, #1
    779a:	e843 1000 	strex	r0, r1, [r3]
    779e:	2800      	cmp	r0, #0
    77a0:	d1f8      	bne.n	7794 <out_func+0x1c>
    77a2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    77a6:	68a3      	ldr	r3, [r4, #8]
    77a8:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    77aa:	6863      	ldr	r3, [r4, #4]
    77ac:	681a      	ldr	r2, [r3, #0]
    77ae:	68e3      	ldr	r3, [r4, #12]
    77b0:	429a      	cmp	r2, r3
    77b2:	d909      	bls.n	77c8 <out_func+0x50>
    77b4:	4905      	ldr	r1, [pc, #20]	; (77cc <out_func+0x54>)
    77b6:	4806      	ldr	r0, [pc, #24]	; (77d0 <out_func+0x58>)
    77b8:	4a06      	ldr	r2, [pc, #24]	; (77d4 <out_func+0x5c>)
    77ba:	2385      	movs	r3, #133	; 0x85
    77bc:	f010 fa47 	bl	17c4e <assert_print>
    77c0:	4804      	ldr	r0, [pc, #16]	; (77d4 <out_func+0x5c>)
    77c2:	2185      	movs	r1, #133	; 0x85
    77c4:	f010 fa3c 	bl	17c40 <assert_post_action>
}
    77c8:	2000      	movs	r0, #0
    77ca:	bd38      	pop	{r3, r4, r5, pc}
    77cc:	0003c159 	.word	0x0003c159
    77d0:	0003baf1 	.word	0x0003baf1
    77d4:	0003c12a 	.word	0x0003c12a

000077d8 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    77d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    77dc:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    77de:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    77e2:	4606      	mov	r6, r0
    77e4:	460c      	mov	r4, r1
    77e6:	4690      	mov	r8, r2
    77e8:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    77ec:	d05b      	beq.n	78a6 <log_output_msg2_process+0xce>
	return msg->hdr.desc.domain;
    77ee:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    77f0:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    77f2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    77f6:	2b00      	cmp	r3, #0
    77f8:	d052      	beq.n	78a0 <log_output_msg2_process+0xc8>
    77fa:	492c      	ldr	r1, [pc, #176]	; (78ac <log_output_msg2_process+0xd4>)
    77fc:	1a5b      	subs	r3, r3, r1
    77fe:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    7802:	e9cd 2301 	strd	r2, r3, [sp, #4]
    7806:	f8cd 9000 	str.w	r9, [sp]
    780a:	68a3      	ldr	r3, [r4, #8]
    780c:	2200      	movs	r2, #0
    780e:	4641      	mov	r1, r8
    7810:	4630      	mov	r0, r6
    7812:	f7ff feef 	bl	75f4 <prefix_print>
    7816:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    7818:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    781a:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    781e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    7822:	b1c3      	cbz	r3, 7856 <log_output_msg2_process+0x7e>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    7824:	4f22      	ldr	r7, [pc, #136]	; (78b0 <log_output_msg2_process+0xd8>)
    7826:	4823      	ldr	r0, [pc, #140]	; (78b4 <log_output_msg2_process+0xdc>)
    7828:	4923      	ldr	r1, [pc, #140]	; (78b8 <log_output_msg2_process+0xe0>)
    782a:	f1b9 0f00 	cmp.w	r9, #0
    782e:	bf08      	it	eq
    7830:	4638      	moveq	r0, r7
    7832:	462b      	mov	r3, r5
    7834:	4632      	mov	r2, r6
    7836:	f010 f8bf 	bl	179b8 <cbpprintf_external>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    783a:	2800      	cmp	r0, #0
    783c:	da0b      	bge.n	7856 <log_output_msg2_process+0x7e>
    783e:	491f      	ldr	r1, [pc, #124]	; (78bc <log_output_msg2_process+0xe4>)
    7840:	481f      	ldr	r0, [pc, #124]	; (78c0 <log_output_msg2_process+0xe8>)
    7842:	4a20      	ldr	r2, [pc, #128]	; (78c4 <log_output_msg2_process+0xec>)
    7844:	f240 23b7 	movw	r3, #695	; 0x2b7
    7848:	f010 fa01 	bl	17c4e <assert_print>
    784c:	481d      	ldr	r0, [pc, #116]	; (78c4 <log_output_msg2_process+0xec>)
    784e:	f240 21b7 	movw	r1, #695	; 0x2b7
    7852:	f010 f9f5 	bl	17c40 <assert_post_action>
	*len = msg->hdr.desc.data_len;
    7856:	8867      	ldrh	r7, [r4, #2]
    7858:	f3c7 07cb 	ubfx	r7, r7, #3, #12
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    785c:	b197      	cbz	r7, 7884 <log_output_msg2_process+0xac>
	return msg->data + msg->hdr.desc.package_len;
    785e:	6821      	ldr	r1, [r4, #0]
    7860:	f3c1 2149 	ubfx	r1, r1, #9, #10
    7864:	440d      	add	r5, r1
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    7866:	2f10      	cmp	r7, #16
    7868:	463c      	mov	r4, r7
    786a:	bf28      	it	cs
    786c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    786e:	4629      	mov	r1, r5
    7870:	f8cd 8000 	str.w	r8, [sp]
    7874:	4653      	mov	r3, sl
    7876:	4622      	mov	r2, r4
    7878:	4630      	mov	r0, r6
    787a:	f7ff fe49 	bl	7510 <hexdump_line_print>
	} while (len);
    787e:	1b3f      	subs	r7, r7, r4
		data += length;
    7880:	4425      	add	r5, r4
	} while (len);
    7882:	d1f0      	bne.n	7866 <log_output_msg2_process+0x8e>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    7884:	f1b9 0f00 	cmp.w	r9, #0
    7888:	d004      	beq.n	7894 <log_output_msg2_process+0xbc>
		postfix_print(output, flags, level);
    788a:	464a      	mov	r2, r9
    788c:	4641      	mov	r1, r8
    788e:	4630      	mov	r0, r6
    7890:	f7ff ff54 	bl	773c <postfix_print>
	}

	log_output_flush(output);
    7894:	4630      	mov	r0, r6
}
    7896:	b004      	add	sp, #16
    7898:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    789c:	f010 bae0 	b.w	17e60 <log_output_flush>
		int16_t source_id = source ?
    78a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78a4:	e7ad      	b.n	7802 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    78a6:	46ca      	mov	sl, r9
    78a8:	e7b6      	b.n	7818 <log_output_msg2_process+0x40>
    78aa:	bf00      	nop
    78ac:	0001c810 	.word	0x0001c810
    78b0:	00017e7b 	.word	0x00017e7b
    78b4:	00007779 	.word	0x00007779
    78b8:	00000fb9 	.word	0x00000fb9
    78bc:	0003c189 	.word	0x0003c189
    78c0:	0003baf1 	.word	0x0003baf1
    78c4:	0003c12a 	.word	0x0003c12a

000078c8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    78c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    78ca:	f242 730f 	movw	r3, #9999	; 0x270f
    78ce:	428b      	cmp	r3, r1
    78d0:	bf28      	it	cs
    78d2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    78d4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    78d6:	4a0f      	ldr	r2, [pc, #60]	; (7914 <log_output_dropped_process+0x4c>)
{
    78d8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    78da:	2105      	movs	r1, #5
    78dc:	4668      	mov	r0, sp
    78de:	f010 f8d0 	bl	17a82 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    78e2:	6863      	ldr	r3, [r4, #4]
    78e4:	490c      	ldr	r1, [pc, #48]	; (7918 <log_output_dropped_process+0x50>)
    78e6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    78e8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    78ea:	220b      	movs	r2, #11
    78ec:	4628      	mov	r0, r5
    78ee:	f010 faaa 	bl	17e46 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    78f2:	6863      	ldr	r3, [r4, #4]
    78f4:	4632      	mov	r2, r6
    78f6:	4669      	mov	r1, sp
    78f8:	4628      	mov	r0, r5
    78fa:	685b      	ldr	r3, [r3, #4]
    78fc:	f010 faa3 	bl	17e46 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    7900:	6863      	ldr	r3, [r4, #4]
    7902:	4906      	ldr	r1, [pc, #24]	; (791c <log_output_dropped_process+0x54>)
    7904:	685b      	ldr	r3, [r3, #4]
    7906:	221b      	movs	r2, #27
    7908:	4628      	mov	r0, r5
    790a:	f010 fa9c 	bl	17e46 <buffer_write>
		     output->control_block->ctx);
}
    790e:	b002      	add	sp, #8
    7910:	bd70      	pop	{r4, r5, r6, pc}
    7912:	bf00      	nop
    7914:	0003bb75 	.word	0x0003bb75
    7918:	0003c1ca 	.word	0x0003c1ca
    791c:	0003c1ae 	.word	0x0003c1ae

00007920 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    7920:	4a08      	ldr	r2, [pc, #32]	; (7944 <log_output_timestamp_freq_set+0x24>)
{
    7922:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    7924:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    7926:	4c08      	ldr	r4, [pc, #32]	; (7948 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    7928:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    792a:	2100      	movs	r1, #0
    792c:	42a0      	cmp	r0, r4
    792e:	d804      	bhi.n	793a <log_output_timestamp_freq_set+0x1a>
    7930:	b101      	cbz	r1, 7934 <log_output_timestamp_freq_set+0x14>
    7932:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    7934:	4b05      	ldr	r3, [pc, #20]	; (794c <log_output_timestamp_freq_set+0x2c>)
    7936:	6018      	str	r0, [r3, #0]
}
    7938:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    793a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    793c:	005b      	lsls	r3, r3, #1
    793e:	2101      	movs	r1, #1
    7940:	e7f4      	b.n	792c <log_output_timestamp_freq_set+0xc>
    7942:	bf00      	nop
    7944:	20010980 	.word	0x20010980
    7948:	000f4240 	.word	0x000f4240
    794c:	2001097c 	.word	0x2001097c

00007950 <z_impl_z_log_msg2_static_create>:
}

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
    7950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    7954:	f3c1 45cb 	ubfx	r5, r1, #19, #12
    7958:	f3c1 2649 	ubfx	r6, r1, #9, #10
    795c:	b089      	sub	sp, #36	; 0x24
    795e:	4681      	mov	r9, r0
    7960:	4690      	mov	r8, r2
    7962:	469a      	mov	sl, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg2_desc out_desc = desc;
    7964:	460c      	mov	r4, r1
	int inlen = desc.package_len;
	struct log_msg2 *msg;

	if (inlen > 0) {
    7966:	3517      	adds	r5, #23
    7968:	2e00      	cmp	r6, #0
    796a:	d03e      	beq.n	79ea <z_impl_z_log_msg2_static_create+0x9a>
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    796c:	2302      	movs	r3, #2
    796e:	9300      	str	r3, [sp, #0]
    7970:	f04f 0b04 	mov.w	fp, #4
    7974:	2300      	movs	r3, #0
    7976:	af06      	add	r7, sp, #24
    7978:	4631      	mov	r1, r6
    797a:	461a      	mov	r2, r3
    797c:	f8cd b008 	str.w	fp, [sp, #8]
    7980:	9701      	str	r7, [sp, #4]
    7982:	4640      	mov	r0, r8
    7984:	9605      	str	r6, [sp, #20]
    7986:	f7fe fb17 	bl	5fb8 <cbprintf_package_copy>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    798a:	f3c0 0309 	ubfx	r3, r0, #0, #10
    798e:	1958      	adds	r0, r3, r5
    7990:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    7994:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    7996:	461e      	mov	r6, r3
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    7998:	f363 2452 	bfi	r4, r3, #9, #10
    799c:	9304      	str	r3, [sp, #16]
    799e:	f7ff fc51 	bl	7244 <z_log_msg2_alloc>
		if (msg) {
    79a2:	4605      	mov	r5, r0
    79a4:	b1b0      	cbz	r0, 79d4 <z_impl_z_log_msg2_static_create+0x84>
			len = cbprintf_package_copy(package, inlen,
    79a6:	2302      	movs	r3, #2
    79a8:	9300      	str	r3, [sp, #0]
    79aa:	f100 0210 	add.w	r2, r0, #16
    79ae:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    79b2:	9b04      	ldr	r3, [sp, #16]
    79b4:	9905      	ldr	r1, [sp, #20]
    79b6:	4640      	mov	r0, r8
    79b8:	f7fe fafe 	bl	5fb8 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    79bc:	2800      	cmp	r0, #0
    79be:	da09      	bge.n	79d4 <z_impl_z_log_msg2_static_create+0x84>
    79c0:	490d      	ldr	r1, [pc, #52]	; (79f8 <z_impl_z_log_msg2_static_create+0xa8>)
    79c2:	480e      	ldr	r0, [pc, #56]	; (79fc <z_impl_z_log_msg2_static_create+0xac>)
    79c4:	4a0e      	ldr	r2, [pc, #56]	; (7a00 <z_impl_z_log_msg2_static_create+0xb0>)
    79c6:	2348      	movs	r3, #72	; 0x48
    79c8:	f010 f941 	bl	17c4e <assert_print>
    79cc:	480c      	ldr	r0, [pc, #48]	; (7a00 <z_impl_z_log_msg2_static_create+0xb0>)
    79ce:	2148      	movs	r1, #72	; 0x48
    79d0:	f010 f936 	bl	17c40 <assert_post_action>
		}
	} else {
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
	}

	z_log_msg2_finalize(msg, source, out_desc, data);
    79d4:	f366 2452 	bfi	r4, r6, #9, #10
    79d8:	4653      	mov	r3, sl
    79da:	4622      	mov	r2, r4
    79dc:	4649      	mov	r1, r9
    79de:	4628      	mov	r0, r5
}
    79e0:	b009      	add	sp, #36	; 0x24
    79e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    79e6:	f010 ba55 	b.w	17e94 <z_log_msg2_finalize>
    79ea:	f025 0007 	bic.w	r0, r5, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    79ee:	0880      	lsrs	r0, r0, #2
    79f0:	f7ff fc28 	bl	7244 <z_log_msg2_alloc>
    79f4:	4605      	mov	r5, r0
    79f6:	e7ed      	b.n	79d4 <z_impl_z_log_msg2_static_create+0x84>
    79f8:	0003c204 	.word	0x0003c204
    79fc:	0003baf1 	.word	0x0003baf1
    7a00:	0003c1d6 	.word	0x0003c1d6

00007a04 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    7a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a08:	b087      	sub	sp, #28
    7a0a:	e9dd 6a12 	ldrd	r6, sl, [sp, #72]	; 0x48
    7a0e:	e9dd 4b10 	ldrd	r4, fp, [sp, #64]	; 0x40
    7a12:	4607      	mov	r7, r0
    7a14:	4688      	mov	r8, r1
    7a16:	9203      	str	r2, [sp, #12]
    7a18:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    7a1a:	2e00      	cmp	r6, #0
    7a1c:	d04d      	beq.n	7aba <z_impl_z_log_msg2_runtime_vcreate+0xb6>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    7a1e:	f8cd a000 	str.w	sl, [sp]
    7a22:	4633      	mov	r3, r6
    7a24:	465a      	mov	r2, fp
    7a26:	2110      	movs	r1, #16
    7a28:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    7a2a:	f8cd a014 	str.w	sl, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    7a2e:	f7fe f84f 	bl	5ad0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    7a32:	1e05      	subs	r5, r0, #0
    7a34:	da09      	bge.n	7a4a <z_impl_z_log_msg2_runtime_vcreate+0x46>
    7a36:	4922      	ldr	r1, [pc, #136]	; (7ac0 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    7a38:	4822      	ldr	r0, [pc, #136]	; (7ac4 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    7a3a:	4a23      	ldr	r2, [pc, #140]	; (7ac8 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    7a3c:	2367      	movs	r3, #103	; 0x67
    7a3e:	f010 f906 	bl	17c4e <assert_print>
    7a42:	4821      	ldr	r0, [pc, #132]	; (7ac8 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    7a44:	2167      	movs	r1, #103	; 0x67
    7a46:	f010 f8fb 	bl	17c40 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    7a4a:	9b03      	ldr	r3, [sp, #12]
    7a4c:	f007 0707 	and.w	r7, r7, #7
    7a50:	f003 0207 	and.w	r2, r3, #7
    7a54:	4b1d      	ldr	r3, [pc, #116]	; (7acc <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    7a56:	00ff      	lsls	r7, r7, #3
    7a58:	ea47 1782 	orr.w	r7, r7, r2, lsl #6
    7a5c:	ea03 2345 	and.w	r3, r3, r5, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    7a60:	f104 0017 	add.w	r0, r4, #23
	struct log_msg2_desc desc =
    7a64:	431f      	orrs	r7, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    7a66:	4428      	add	r0, r5
	struct log_msg2_desc desc =
    7a68:	4b19      	ldr	r3, [pc, #100]	; (7ad0 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    7a6a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    7a6e:	ea03 43c4 	and.w	r3, r3, r4, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    7a72:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    7a74:	431f      	orrs	r7, r3
		msg = z_log_msg2_alloc(msg_wlen);
    7a76:	f7ff fbe5 	bl	7244 <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    7a7a:	4604      	mov	r4, r0
    7a7c:	b1a0      	cbz	r0, 7aa8 <z_impl_z_log_msg2_runtime_vcreate+0xa4>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    7a7e:	b19e      	cbz	r6, 7aa8 <z_impl_z_log_msg2_runtime_vcreate+0xa4>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    7a80:	f8cd a000 	str.w	sl, [sp]
    7a84:	4633      	mov	r3, r6
    7a86:	465a      	mov	r2, fp
    7a88:	4629      	mov	r1, r5
    7a8a:	3010      	adds	r0, #16
    7a8c:	f7fe f820 	bl	5ad0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    7a90:	2800      	cmp	r0, #0
    7a92:	da09      	bge.n	7aa8 <z_impl_z_log_msg2_runtime_vcreate+0xa4>
    7a94:	490a      	ldr	r1, [pc, #40]	; (7ac0 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    7a96:	480b      	ldr	r0, [pc, #44]	; (7ac4 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    7a98:	4a0b      	ldr	r2, [pc, #44]	; (7ac8 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    7a9a:	2381      	movs	r3, #129	; 0x81
    7a9c:	f010 f8d7 	bl	17c4e <assert_print>
    7aa0:	4809      	ldr	r0, [pc, #36]	; (7ac8 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    7aa2:	2181      	movs	r1, #129	; 0x81
    7aa4:	f010 f8cc 	bl	17c40 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    7aa8:	464b      	mov	r3, r9
    7aaa:	463a      	mov	r2, r7
    7aac:	4641      	mov	r1, r8
    7aae:	4620      	mov	r0, r4
	}
}
    7ab0:	b007      	add	sp, #28
    7ab2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
    7ab6:	f010 b9ed 	b.w	17e94 <z_log_msg2_finalize>
		plen = 0;
    7aba:	4635      	mov	r5, r6
    7abc:	e7c5      	b.n	7a4a <z_impl_z_log_msg2_runtime_vcreate+0x46>
    7abe:	bf00      	nop
    7ac0:	0003c203 	.word	0x0003c203
    7ac4:	0003baf1 	.word	0x0003baf1
    7ac8:	0003c1d6 	.word	0x0003c1d6
    7acc:	0007fe00 	.word	0x0007fe00
    7ad0:	7ff80000 	.word	0x7ff80000

00007ad4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    7ad4:	4b01      	ldr	r3, [pc, #4]	; (7adc <log_backend_rtt_init+0x8>)
    7ad6:	2201      	movs	r2, #1
    7ad8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    7ada:	4770      	bx	lr
    7adc:	200245d6 	.word	0x200245d6

00007ae0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    7ae0:	4b01      	ldr	r3, [pc, #4]	; (7ae8 <format_set+0x8>)
	return 0;
}
    7ae2:	2000      	movs	r0, #0
	log_format_current = log_type;
    7ae4:	6019      	str	r1, [r3, #0]
}
    7ae6:	4770      	bx	lr
    7ae8:	2001098c 	.word	0x2001098c

00007aec <panic>:
	panic_mode = true;
    7aec:	4b02      	ldr	r3, [pc, #8]	; (7af8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    7aee:	4803      	ldr	r0, [pc, #12]	; (7afc <panic+0x10>)
    7af0:	2201      	movs	r2, #1
    7af2:	701a      	strb	r2, [r3, #0]
    7af4:	f010 b9b4 	b.w	17e60 <log_output_flush>
    7af8:	200245d7 	.word	0x200245d7
    7afc:	0001d530 	.word	0x0001d530

00007b00 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    7b00:	4801      	ldr	r0, [pc, #4]	; (7b08 <dropped+0x8>)
    7b02:	f7ff bee1 	b.w	78c8 <log_output_dropped_process>
    7b06:	bf00      	nop
    7b08:	0001d530 	.word	0x0001d530

00007b0c <process>:
{
    7b0c:	b507      	push	{r0, r1, r2, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    7b0e:	4b06      	ldr	r3, [pc, #24]	; (7b28 <process+0x1c>)
{
    7b10:	9101      	str	r1, [sp, #4]
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    7b12:	6818      	ldr	r0, [r3, #0]
    7b14:	f7ff fad4 	bl	70c0 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    7b18:	9901      	ldr	r1, [sp, #4]
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    7b1a:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    7b1c:	4803      	ldr	r0, [pc, #12]	; (7b2c <process+0x20>)
    7b1e:	220f      	movs	r2, #15
}
    7b20:	b003      	add	sp, #12
    7b22:	f85d eb04 	ldr.w	lr, [sp], #4
	log_output_func(&log_output_rtt, &msg->log, flags);
    7b26:	4718      	bx	r3
    7b28:	2001098c 	.word	0x2001098c
    7b2c:	0001d530 	.word	0x0001d530

00007b30 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    7b30:	4b05      	ldr	r3, [pc, #20]	; (7b48 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    7b32:	781b      	ldrb	r3, [r3, #0]
    7b34:	b11b      	cbz	r3, 7b3e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    7b36:	f241 3088 	movw	r0, #5000	; 0x1388
    7b3a:	f010 bfa3 	b.w	18a84 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    7b3e:	20a4      	movs	r0, #164	; 0xa4
    7b40:	2100      	movs	r1, #0
    7b42:	f008 ba5f 	b.w	10004 <z_impl_k_sleep>
    7b46:	bf00      	nop
    7b48:	200245d7 	.word	0x200245d7

00007b4c <data_out_block_mode>:
{
    7b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    7b50:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7be4 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    7b54:	f8df a090 	ldr.w	sl, [pc, #144]	; 7be8 <data_out_block_mode+0x9c>
{
    7b58:	4680      	mov	r8, r0
    7b5a:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    7b5c:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    7b5e:	f899 5000 	ldrb.w	r5, [r9]
    7b62:	b9cd      	cbnz	r5, 7b98 <data_out_block_mode+0x4c>
    7b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b6c:	4650      	mov	r0, sl
    7b6e:	f006 fde3 	bl	e738 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    7b72:	463a      	mov	r2, r7
    7b74:	4641      	mov	r1, r8
    7b76:	4628      	mov	r0, r5
    7b78:	f005 ffa2 	bl	dac0 <SEGGER_RTT_WriteSkipNoLock>
    7b7c:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    7b7e:	4650      	mov	r0, sl
    7b80:	f006 fed4 	bl	e92c <z_impl_k_mutex_unlock>
		if (ret) {
    7b84:	4d16      	ldr	r5, [pc, #88]	; (7be0 <data_out_block_mode+0x94>)
    7b86:	b1fe      	cbz	r6, 7bc8 <data_out_block_mode+0x7c>
	host_present = true;
    7b88:	2301      	movs	r3, #1
    7b8a:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    7b8c:	f899 3000 	ldrb.w	r3, [r9]
    7b90:	b96b      	cbnz	r3, 7bae <data_out_block_mode+0x62>
}
    7b92:	4638      	mov	r0, r7
    7b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    7b98:	463a      	mov	r2, r7
    7b9a:	4641      	mov	r1, r8
    7b9c:	2000      	movs	r0, #0
    7b9e:	f005 ff8f 	bl	dac0 <SEGGER_RTT_WriteSkipNoLock>
    7ba2:	4606      	mov	r6, r0
    7ba4:	e7ee      	b.n	7b84 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    7ba6:	b95c      	cbnz	r4, 7bc0 <data_out_block_mode+0x74>
		host_present = false;
    7ba8:	702c      	strb	r4, [r5, #0]
    7baa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    7bae:	2000      	movs	r0, #0
    7bb0:	f006 f802 	bl	dbb8 <SEGGER_RTT_HasDataUp>
    7bb4:	2800      	cmp	r0, #0
    7bb6:	d0ec      	beq.n	7b92 <data_out_block_mode+0x46>
    7bb8:	782b      	ldrb	r3, [r5, #0]
    7bba:	2b00      	cmp	r3, #0
    7bbc:	d1f3      	bne.n	7ba6 <data_out_block_mode+0x5a>
    7bbe:	e7e8      	b.n	7b92 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    7bc0:	3c01      	subs	r4, #1
    7bc2:	f7ff ffb5 	bl	7b30 <on_failed_write.part.0>
    7bc6:	e7f2      	b.n	7bae <data_out_block_mode+0x62>
		} else if (host_present) {
    7bc8:	782b      	ldrb	r3, [r5, #0]
    7bca:	b113      	cbz	r3, 7bd2 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    7bcc:	3c01      	subs	r4, #1
    7bce:	d104      	bne.n	7bda <data_out_block_mode+0x8e>
		host_present = false;
    7bd0:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    7bd2:	782b      	ldrb	r3, [r5, #0]
    7bd4:	2b00      	cmp	r3, #0
    7bd6:	d1c2      	bne.n	7b5e <data_out_block_mode+0x12>
    7bd8:	e7db      	b.n	7b92 <data_out_block_mode+0x46>
    7bda:	f7ff ffa9 	bl	7b30 <on_failed_write.part.0>
    7bde:	e7f8      	b.n	7bd2 <data_out_block_mode+0x86>
    7be0:	200245d6 	.word	0x200245d6
    7be4:	200245d7 	.word	0x200245d7
    7be8:	20000658 	.word	0x20000658

00007bec <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    7bec:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    7bee:	4c04      	ldr	r4, [pc, #16]	; (7c00 <__do_init_array_aux+0x14>)
    7bf0:	4d04      	ldr	r5, [pc, #16]	; (7c04 <__do_init_array_aux+0x18>)
    7bf2:	42ac      	cmp	r4, r5
    7bf4:	d300      	bcc.n	7bf8 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    7bf6:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    7bf8:	f854 3b04 	ldr.w	r3, [r4], #4
    7bfc:	4798      	blx	r3
		func++) {
    7bfe:	e7f8      	b.n	7bf2 <__do_init_array_aux+0x6>
    7c00:	0001c80c 	.word	0x0001c80c
    7c04:	0001c810 	.word	0x0001c810

00007c08 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    7c08:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    7c0a:	4c05      	ldr	r4, [pc, #20]	; (7c20 <__do_global_ctors_aux+0x18>)
    7c0c:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    7c0e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    7c12:	b905      	cbnz	r5, 7c16 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    7c14:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    7c16:	f854 3904 	ldr.w	r3, [r4], #-4
    7c1a:	3d01      	subs	r5, #1
    7c1c:	4798      	blx	r3
    7c1e:	e7f8      	b.n	7c12 <__do_global_ctors_aux+0xa>
    7c20:	0001c804 	.word	0x0001c804

00007c24 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    7c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c28:	4605      	mov	r5, r0
	__asm__ volatile(
    7c2a:	f04f 0320 	mov.w	r3, #32
    7c2e:	f3ef 8611 	mrs	r6, BASEPRI
    7c32:	f383 8812 	msr	BASEPRI_MAX, r3
    7c36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c3a:	4822      	ldr	r0, [pc, #136]	; (7cc4 <pm_state_notify+0xa0>)
    7c3c:	f006 fbd4 	bl	e3e8 <z_spin_lock_valid>
    7c40:	b968      	cbnz	r0, 7c5e <pm_state_notify+0x3a>
    7c42:	4a21      	ldr	r2, [pc, #132]	; (7cc8 <pm_state_notify+0xa4>)
    7c44:	4921      	ldr	r1, [pc, #132]	; (7ccc <pm_state_notify+0xa8>)
    7c46:	4822      	ldr	r0, [pc, #136]	; (7cd0 <pm_state_notify+0xac>)
    7c48:	238e      	movs	r3, #142	; 0x8e
    7c4a:	f010 f800 	bl	17c4e <assert_print>
    7c4e:	491d      	ldr	r1, [pc, #116]	; (7cc4 <pm_state_notify+0xa0>)
    7c50:	4820      	ldr	r0, [pc, #128]	; (7cd4 <pm_state_notify+0xb0>)
    7c52:	f00f fffc 	bl	17c4e <assert_print>
    7c56:	481c      	ldr	r0, [pc, #112]	; (7cc8 <pm_state_notify+0xa4>)
    7c58:	218e      	movs	r1, #142	; 0x8e
    7c5a:	f00f fff1 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    7c5e:	4819      	ldr	r0, [pc, #100]	; (7cc4 <pm_state_notify+0xa0>)
    7c60:	f006 fbe0 	bl	e424 <z_spin_lock_set_owner>
	return list->head;
    7c64:	4b1c      	ldr	r3, [pc, #112]	; (7cd8 <pm_state_notify+0xb4>)
    7c66:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    7c68:	b19c      	cbz	r4, 7c92 <pm_state_notify+0x6e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    7c6a:	4f1c      	ldr	r7, [pc, #112]	; (7cdc <pm_state_notify+0xb8>)
    7c6c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7ce8 <pm_state_notify+0xc4>
    7c70:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    7c74:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    7c78:	2d00      	cmp	r5, #0
    7c7a:	bf08      	it	eq
    7c7c:	4613      	moveq	r3, r2
		if (callback) {
    7c7e:	b12b      	cbz	r3, 7c8c <pm_state_notify+0x68>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    7c80:	f898 2014 	ldrb.w	r2, [r8, #20]
    7c84:	fb09 f202 	mul.w	r2, r9, r2
    7c88:	5cb8      	ldrb	r0, [r7, r2]
    7c8a:	4798      	blx	r3
	return node->next;
    7c8c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    7c8e:	2c00      	cmp	r4, #0
    7c90:	d1f0      	bne.n	7c74 <pm_state_notify+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c92:	480c      	ldr	r0, [pc, #48]	; (7cc4 <pm_state_notify+0xa0>)
    7c94:	f006 fbb6 	bl	e404 <z_spin_unlock_valid>
    7c98:	b968      	cbnz	r0, 7cb6 <pm_state_notify+0x92>
    7c9a:	4a0b      	ldr	r2, [pc, #44]	; (7cc8 <pm_state_notify+0xa4>)
    7c9c:	4910      	ldr	r1, [pc, #64]	; (7ce0 <pm_state_notify+0xbc>)
    7c9e:	480c      	ldr	r0, [pc, #48]	; (7cd0 <pm_state_notify+0xac>)
    7ca0:	23b9      	movs	r3, #185	; 0xb9
    7ca2:	f00f ffd4 	bl	17c4e <assert_print>
    7ca6:	4907      	ldr	r1, [pc, #28]	; (7cc4 <pm_state_notify+0xa0>)
    7ca8:	480e      	ldr	r0, [pc, #56]	; (7ce4 <pm_state_notify+0xc0>)
    7caa:	f00f ffd0 	bl	17c4e <assert_print>
    7cae:	4806      	ldr	r0, [pc, #24]	; (7cc8 <pm_state_notify+0xa4>)
    7cb0:	21b9      	movs	r1, #185	; 0xb9
    7cb2:	f00f ffc5 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    7cb6:	f386 8811 	msr	BASEPRI, r6
    7cba:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    7cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7cc2:	bf00      	nop
    7cc4:	200109a0 	.word	0x200109a0
    7cc8:	0003bd42 	.word	0x0003bd42
    7ccc:	0003bd9b 	.word	0x0003bd9b
    7cd0:	0003baf1 	.word	0x0003baf1
    7cd4:	0003bdb0 	.word	0x0003bdb0
    7cd8:	200109a4 	.word	0x200109a4
    7cdc:	200109ac 	.word	0x200109ac
    7ce0:	0003bd6f 	.word	0x0003bd6f
    7ce4:	0003bd86 	.word	0x0003bd86
    7ce8:	200239e4 	.word	0x200239e4

00007cec <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7cec:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    7cee:	2301      	movs	r3, #1
    7cf0:	f000 001f 	and.w	r0, r0, #31
    7cf4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7cf8:	4b07      	ldr	r3, [pc, #28]	; (7d18 <atomic_clear_bit.constprop.0+0x2c>)
    7cfa:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7cfe:	43c0      	mvns	r0, r0
    7d00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7d04:	e853 2f00 	ldrex	r2, [r3]
    7d08:	4002      	ands	r2, r0
    7d0a:	e843 2100 	strex	r1, r2, [r3]
    7d0e:	2900      	cmp	r1, #0
    7d10:	d1f8      	bne.n	7d04 <atomic_clear_bit.constprop.0+0x18>
    7d12:	f3bf 8f5b 	dmb	ish
}
    7d16:	4770      	bx	lr
    7d18:	200109b8 	.word	0x200109b8

00007d1c <pm_system_resume>:

void pm_system_resume(void)
{
    7d1c:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    7d1e:	4b1a      	ldr	r3, [pc, #104]	; (7d88 <pm_system_resume+0x6c>)
    7d20:	7d1c      	ldrb	r4, [r3, #20]
    7d22:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    7d26:	f004 031f 	and.w	r3, r4, #31
    7d2a:	2201      	movs	r2, #1
    7d2c:	409a      	lsls	r2, r3
    7d2e:	4b17      	ldr	r3, [pc, #92]	; (7d8c <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7d30:	0961      	lsrs	r1, r4, #5
    7d32:	43d0      	mvns	r0, r2
    7d34:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7d38:	e853 1f00 	ldrex	r1, [r3]
    7d3c:	ea01 0500 	and.w	r5, r1, r0
    7d40:	e843 5c00 	strex	ip, r5, [r3]
    7d44:	f1bc 0f00 	cmp.w	ip, #0
    7d48:	d1f6      	bne.n	7d38 <pm_system_resume+0x1c>
    7d4a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    7d4e:	4211      	tst	r1, r2
    7d50:	d013      	beq.n	7d7a <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    7d52:	4b0f      	ldr	r3, [pc, #60]	; (7d90 <pm_system_resume+0x74>)
    7d54:	4d0f      	ldr	r5, [pc, #60]	; (7d94 <pm_system_resume+0x78>)
    7d56:	b18b      	cbz	r3, 7d7c <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    7d58:	230c      	movs	r3, #12
    7d5a:	4363      	muls	r3, r4
    7d5c:	18ea      	adds	r2, r5, r3
    7d5e:	5ce8      	ldrb	r0, [r5, r3]
    7d60:	7851      	ldrb	r1, [r2, #1]
    7d62:	f010 f904 	bl	17f6e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    7d66:	2000      	movs	r0, #0
    7d68:	f7ff ff5c 	bl	7c24 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    7d6c:	230c      	movs	r3, #12
    7d6e:	435c      	muls	r4, r3
    7d70:	192a      	adds	r2, r5, r4
    7d72:	2300      	movs	r3, #0
    7d74:	512b      	str	r3, [r5, r4]
    7d76:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    7d7a:	bd38      	pop	{r3, r4, r5, pc}
    7d7c:	f383 8811 	msr	BASEPRI, r3
    7d80:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    7d84:	e7ef      	b.n	7d66 <pm_system_resume+0x4a>
    7d86:	bf00      	nop
    7d88:	200239e4 	.word	0x200239e4
    7d8c:	200109bc 	.word	0x200109bc
    7d90:	00017f6f 	.word	0x00017f6f
    7d94:	200109ac 	.word	0x200109ac

00007d98 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    7d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    7d9c:	4b32      	ldr	r3, [pc, #200]	; (7e68 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d9e:	4a33      	ldr	r2, [pc, #204]	; (7e6c <pm_system_suspend+0xd4>)
    7da0:	7d1c      	ldrb	r4, [r3, #20]
    7da2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7da6:	0963      	lsrs	r3, r4, #5
    7da8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    7dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7db0:	4e2f      	ldr	r6, [pc, #188]	; (7e70 <pm_system_suspend+0xd8>)
    7db2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7db6:	f004 081f 	and.w	r8, r4, #31
    7dba:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    7dbe:	f013 0f01 	tst.w	r3, #1
{
    7dc2:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    7dc4:	d10a      	bne.n	7ddc <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    7dc6:	4601      	mov	r1, r0
    7dc8:	4620      	mov	r0, r4
    7dca:	f000 f869 	bl	7ea0 <pm_policy_next_state>
		if (info != NULL) {
    7dce:	b128      	cbz	r0, 7ddc <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    7dd0:	c807      	ldmia	r0, {r0, r1, r2}
    7dd2:	230c      	movs	r3, #12
    7dd4:	fb03 6304 	mla	r3, r3, r4, r6
    7dd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    7ddc:	230c      	movs	r3, #12
    7dde:	4363      	muls	r3, r4
    7de0:	18f2      	adds	r2, r6, r3
    7de2:	5cf5      	ldrb	r5, [r6, r3]
    7de4:	b92d      	cbnz	r5, 7df2 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    7de6:	4620      	mov	r0, r4
    7de8:	f7ff ff80 	bl	7cec <atomic_clear_bit.constprop.0>
		ret = false;
    7dec:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    7dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    7df2:	1c7b      	adds	r3, r7, #1
    7df4:	d00f      	beq.n	7e16 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    7df6:	f8d2 c008 	ldr.w	ip, [r2, #8]
    7dfa:	481e      	ldr	r0, [pc, #120]	; (7e74 <pm_system_suspend+0xdc>)
    7dfc:	4a1e      	ldr	r2, [pc, #120]	; (7e78 <pm_system_suspend+0xe0>)
    7dfe:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    7e02:	2100      	movs	r1, #0
    7e04:	2300      	movs	r3, #0
    7e06:	fbec 0105 	umlal	r0, r1, ip, r5
    7e0a:	f7f8 febf 	bl	b8c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    7e0e:	2101      	movs	r1, #1
    7e10:	1a38      	subs	r0, r7, r0
    7e12:	f008 fc15 	bl	10640 <z_set_timeout_expiry>
	k_sched_lock();
    7e16:	f007 f99b 	bl	f150 <k_sched_lock>
	pm_state_notify(true);
    7e1a:	2001      	movs	r0, #1
    7e1c:	f7ff ff02 	bl	7c24 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7e20:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    7e24:	2301      	movs	r3, #1
    7e26:	fa03 f808 	lsl.w	r8, r3, r8
    7e2a:	4b14      	ldr	r3, [pc, #80]	; (7e7c <pm_system_suspend+0xe4>)
    7e2c:	4499      	add	r9, r3
    7e2e:	e859 3f00 	ldrex	r3, [r9]
    7e32:	ea43 0308 	orr.w	r3, r3, r8
    7e36:	e849 3200 	strex	r2, r3, [r9]
    7e3a:	2a00      	cmp	r2, #0
    7e3c:	d1f7      	bne.n	7e2e <pm_system_suspend+0x96>
    7e3e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    7e42:	4b0f      	ldr	r3, [pc, #60]	; (7e80 <pm_system_suspend+0xe8>)
    7e44:	b133      	cbz	r3, 7e54 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    7e46:	230c      	movs	r3, #12
    7e48:	4363      	muls	r3, r4
    7e4a:	18f2      	adds	r2, r6, r3
    7e4c:	5cf0      	ldrb	r0, [r6, r3]
    7e4e:	7851      	ldrb	r1, [r2, #1]
    7e50:	f010 f881 	bl	17f56 <pm_state_set>
	pm_system_resume();
    7e54:	f7ff ff62 	bl	7d1c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    7e58:	4620      	mov	r0, r4
    7e5a:	f7ff ff47 	bl	7cec <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    7e5e:	f007 fe63 	bl	fb28 <k_sched_unlock>
	bool ret = true;
    7e62:	2001      	movs	r0, #1
    7e64:	e7c3      	b.n	7dee <pm_system_suspend+0x56>
    7e66:	bf00      	nop
    7e68:	200239e4 	.word	0x200239e4
    7e6c:	200109b8 	.word	0x200109b8
    7e70:	200109ac 	.word	0x200109ac
    7e74:	000f423f 	.word	0x000f423f
    7e78:	000f4240 	.word	0x000f4240
    7e7c:	200109bc 	.word	0x200109bc
    7e80:	00017f57 	.word	0x00017f57

00007e84 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7e84:	4b05      	ldr	r3, [pc, #20]	; (7e9c <pm_policy_state_lock_is_active+0x18>)
    7e86:	f3bf 8f5b 	dmb	ish
    7e8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7e8e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    7e92:	3800      	subs	r0, #0
    7e94:	bf18      	it	ne
    7e96:	2001      	movne	r0, #1
    7e98:	4770      	bx	lr
    7e9a:	bf00      	nop
    7e9c:	200109c0 	.word	0x200109c0

00007ea0 <pm_policy_next_state>:
{
    7ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ea4:	b085      	sub	sp, #20
    7ea6:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    7ea8:	a903      	add	r1, sp, #12
    7eaa:	f000 f847 	bl	7f3c <pm_state_cpu_get_all>
    7eae:	f8df 8084 	ldr.w	r8, [pc, #132]	; 7f34 <pm_policy_next_state+0x94>
    7eb2:	f8df a084 	ldr.w	sl, [pc, #132]	; 7f38 <pm_policy_next_state+0x98>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    7eb6:	3801      	subs	r0, #1
    7eb8:	b204      	sxth	r4, r0
    7eba:	f04f 0b00 	mov.w	fp, #0
    7ebe:	1c63      	adds	r3, r4, #1
    7ec0:	d104      	bne.n	7ecc <pm_policy_next_state+0x2c>
	return NULL;
    7ec2:	2600      	movs	r6, #0
}
    7ec4:	4630      	mov	r0, r6
    7ec6:	b005      	add	sp, #20
    7ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    7ecc:	9a03      	ldr	r2, [sp, #12]
    7ece:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    7ed2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    7ed6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    7eda:	f7ff ffd3 	bl	7e84 <pm_policy_state_lock_is_active>
    7ede:	4605      	mov	r5, r0
    7ee0:	bb10      	cbnz	r0, 7f28 <pm_policy_next_state+0x88>
    7ee2:	6870      	ldr	r0, [r6, #4]
    7ee4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    7ee8:	46c4      	mov	ip, r8
    7eea:	4629      	mov	r1, r5
    7eec:	fbe0 c109 	umlal	ip, r1, r0, r9
    7ef0:	4652      	mov	r2, sl
    7ef2:	465b      	mov	r3, fp
    7ef4:	4660      	mov	r0, ip
    7ef6:	f7f8 fe49 	bl	b8c <__aeabi_uldivmod>
    7efa:	9001      	str	r0, [sp, #4]
    7efc:	68b0      	ldr	r0, [r6, #8]
    7efe:	46c4      	mov	ip, r8
    7f00:	4629      	mov	r1, r5
    7f02:	fbe0 c109 	umlal	ip, r1, r0, r9
    7f06:	465b      	mov	r3, fp
    7f08:	4652      	mov	r2, sl
    7f0a:	4660      	mov	r0, ip
    7f0c:	f7f8 fe3e 	bl	b8c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    7f10:	4b07      	ldr	r3, [pc, #28]	; (7f30 <pm_policy_next_state+0x90>)
    7f12:	681b      	ldr	r3, [r3, #0]
    7f14:	1c59      	adds	r1, r3, #1
    7f16:	d001      	beq.n	7f1c <pm_policy_next_state+0x7c>
    7f18:	4283      	cmp	r3, r0
    7f1a:	d905      	bls.n	7f28 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    7f1c:	1c7a      	adds	r2, r7, #1
    7f1e:	d0d1      	beq.n	7ec4 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    7f20:	9b01      	ldr	r3, [sp, #4]
    7f22:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    7f24:	42b8      	cmp	r0, r7
    7f26:	d9cd      	bls.n	7ec4 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    7f28:	3c01      	subs	r4, #1
    7f2a:	b224      	sxth	r4, r4
    7f2c:	e7c7      	b.n	7ebe <pm_policy_next_state+0x1e>
    7f2e:	bf00      	nop
    7f30:	20000008 	.word	0x20000008
    7f34:	000f423f 	.word	0x000f423f
    7f38:	000f4240 	.word	0x000f4240

00007f3c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    7f3c:	b908      	cbnz	r0, 7f42 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    7f3e:	4b02      	ldr	r3, [pc, #8]	; (7f48 <pm_state_cpu_get_all+0xc>)
    7f40:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    7f42:	2000      	movs	r0, #0
    7f44:	4770      	bx	lr
    7f46:	bf00      	nop
    7f48:	0001d540 	.word	0x0001d540

00007f4c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    7f4c:	4801      	ldr	r0, [pc, #4]	; (7f54 <nrf_cc3xx_platform_abort_init+0x8>)
    7f4e:	f00f bba1 	b.w	17694 <nrf_cc3xx_platform_set_abort>
    7f52:	bf00      	nop
    7f54:	0001d540 	.word	0x0001d540

00007f58 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    7f58:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    7f5a:	4604      	mov	r4, r0
    7f5c:	b918      	cbnz	r0, 7f66 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    7f5e:	4b0d      	ldr	r3, [pc, #52]	; (7f94 <mutex_free_platform+0x3c>)
    7f60:	480d      	ldr	r0, [pc, #52]	; (7f98 <mutex_free_platform+0x40>)
    7f62:	685b      	ldr	r3, [r3, #4]
    7f64:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    7f66:	6861      	ldr	r1, [r4, #4]
    7f68:	2908      	cmp	r1, #8
    7f6a:	d00d      	beq.n	7f88 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    7f6c:	f031 0304 	bics.w	r3, r1, #4
    7f70:	d00a      	beq.n	7f88 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    7f72:	f011 0102 	ands.w	r1, r1, #2
    7f76:	d008      	beq.n	7f8a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    7f78:	4808      	ldr	r0, [pc, #32]	; (7f9c <mutex_free_platform+0x44>)
    7f7a:	4621      	mov	r1, r4
    7f7c:	f006 f894 	bl	e0a8 <k_mem_slab_free>
        mutex->mutex = NULL;
    7f80:	2300      	movs	r3, #0
    7f82:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    7f84:	2300      	movs	r3, #0
    7f86:	6063      	str	r3, [r4, #4]
}
    7f88:	bd10      	pop	{r4, pc}
    7f8a:	6820      	ldr	r0, [r4, #0]
    7f8c:	2214      	movs	r2, #20
    7f8e:	f013 fee2 	bl	1bd56 <memset>
    7f92:	e7f7      	b.n	7f84 <mutex_free_platform+0x2c>
    7f94:	20000528 	.word	0x20000528
    7f98:	0003c230 	.word	0x0003c230
    7f9c:	200109dc 	.word	0x200109dc

00007fa0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    7fa0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    7fa2:	b308      	cbz	r0, 7fe8 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    7fa4:	6843      	ldr	r3, [r0, #4]
    7fa6:	2b04      	cmp	r3, #4
    7fa8:	d110      	bne.n	7fcc <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7faa:	2201      	movs	r2, #1
    7fac:	6803      	ldr	r3, [r0, #0]
    7fae:	f3bf 8f5b 	dmb	ish
    7fb2:	e853 1f00 	ldrex	r1, [r3]
    7fb6:	2900      	cmp	r1, #0
    7fb8:	d103      	bne.n	7fc2 <mutex_lock_platform+0x22>
    7fba:	e843 2000 	strex	r0, r2, [r3]
    7fbe:	2800      	cmp	r0, #0
    7fc0:	d1f7      	bne.n	7fb2 <mutex_lock_platform+0x12>
    7fc2:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    7fc6:	d10b      	bne.n	7fe0 <mutex_lock_platform+0x40>
    7fc8:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    7fca:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    7fcc:	b153      	cbz	r3, 7fe4 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    7fce:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    7fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7fd8:	f006 fbae 	bl	e738 <z_impl_k_mutex_lock>
        if (ret == 0) {
    7fdc:	2800      	cmp	r0, #0
    7fde:	d0f3      	beq.n	7fc8 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    7fe0:	4803      	ldr	r0, [pc, #12]	; (7ff0 <mutex_lock_platform+0x50>)
    7fe2:	e7f2      	b.n	7fca <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    7fe4:	4803      	ldr	r0, [pc, #12]	; (7ff4 <mutex_lock_platform+0x54>)
    7fe6:	e7f0      	b.n	7fca <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    7fe8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7fec:	e7ed      	b.n	7fca <mutex_lock_platform+0x2a>
    7fee:	bf00      	nop
    7ff0:	ffff8fe9 	.word	0xffff8fe9
    7ff4:	ffff8fea 	.word	0xffff8fea

00007ff8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    7ff8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    7ffa:	b1d0      	cbz	r0, 8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    7ffc:	6843      	ldr	r3, [r0, #4]
    7ffe:	2b04      	cmp	r3, #4
    8000:	d111      	bne.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    8002:	2200      	movs	r2, #0
    8004:	6803      	ldr	r3, [r0, #0]
    8006:	f3bf 8f5b 	dmb	ish
    800a:	e853 1f00 	ldrex	r1, [r3]
    800e:	2901      	cmp	r1, #1
    8010:	d103      	bne.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    8012:	e843 2000 	strex	r0, r2, [r3]
    8016:	2800      	cmp	r0, #0
    8018:	d1f7      	bne.n	800a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
    801a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    801e:	4807      	ldr	r0, [pc, #28]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    8020:	bf08      	it	eq
    8022:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    8024:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    8026:	b13b      	cbz	r3, 8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    8028:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    802a:	f006 fc7f 	bl	e92c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    802e:	2000      	movs	r0, #0
    8030:	e7f8      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    8032:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8036:	e7f5      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    8038:	4801      	ldr	r0, [pc, #4]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    803a:	e7f3      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    803c:	ffff8fe9 	.word	0xffff8fe9
    8040:	ffff8fea 	.word	0xffff8fea

00008044 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    8044:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    8046:	4604      	mov	r4, r0
    8048:	b918      	cbnz	r0, 8052 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    804a:	4b16      	ldr	r3, [pc, #88]	; (80a4 <mutex_init_platform+0x60>)
    804c:	4816      	ldr	r0, [pc, #88]	; (80a8 <mutex_init_platform+0x64>)
    804e:	685b      	ldr	r3, [r3, #4]
    8050:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    8052:	6863      	ldr	r3, [r4, #4]
    8054:	2b04      	cmp	r3, #4
    8056:	d023      	beq.n	80a0 <mutex_init_platform+0x5c>
    8058:	2b08      	cmp	r3, #8
    805a:	d021      	beq.n	80a0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    805c:	b9cb      	cbnz	r3, 8092 <mutex_init_platform+0x4e>
    805e:	6823      	ldr	r3, [r4, #0]
    8060:	b9bb      	cbnz	r3, 8092 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    8062:	4812      	ldr	r0, [pc, #72]	; (80ac <mutex_init_platform+0x68>)
    8064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    806c:	4621      	mov	r1, r4
    806e:	f005 ffaf 	bl	dfd0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    8072:	b908      	cbnz	r0, 8078 <mutex_init_platform+0x34>
    8074:	6823      	ldr	r3, [r4, #0]
    8076:	b91b      	cbnz	r3, 8080 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    8078:	4b0a      	ldr	r3, [pc, #40]	; (80a4 <mutex_init_platform+0x60>)
    807a:	480d      	ldr	r0, [pc, #52]	; (80b0 <mutex_init_platform+0x6c>)
    807c:	685b      	ldr	r3, [r3, #4]
    807e:	4798      	blx	r3
    8080:	6820      	ldr	r0, [r4, #0]
    8082:	2214      	movs	r2, #20
    8084:	2100      	movs	r1, #0
    8086:	f013 fe66 	bl	1bd56 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    808a:	6863      	ldr	r3, [r4, #4]
    808c:	f043 0302 	orr.w	r3, r3, #2
    8090:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    8092:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    8094:	f010 fcb6 	bl	18a04 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    8098:	6863      	ldr	r3, [r4, #4]
    809a:	f043 0301 	orr.w	r3, r3, #1
    809e:	6063      	str	r3, [r4, #4]
}
    80a0:	bd10      	pop	{r4, pc}
    80a2:	bf00      	nop
    80a4:	20000528 	.word	0x20000528
    80a8:	0003c230 	.word	0x0003c230
    80ac:	200109dc 	.word	0x200109dc
    80b0:	0003c256 	.word	0x0003c256

000080b4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    80b4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    80b6:	4906      	ldr	r1, [pc, #24]	; (80d0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    80b8:	4806      	ldr	r0, [pc, #24]	; (80d4 <nrf_cc3xx_platform_mutex_init+0x20>)
    80ba:	2340      	movs	r3, #64	; 0x40
    80bc:	2214      	movs	r2, #20
    80be:	f010 fc59 	bl	18974 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    80c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    80c6:	4904      	ldr	r1, [pc, #16]	; (80d8 <nrf_cc3xx_platform_mutex_init+0x24>)
    80c8:	4804      	ldr	r0, [pc, #16]	; (80dc <nrf_cc3xx_platform_mutex_init+0x28>)
    80ca:	f00f bb43 	b.w	17754 <nrf_cc3xx_platform_set_mutexes>
    80ce:	bf00      	nop
    80d0:	200109fc 	.word	0x200109fc
    80d4:	200109dc 	.word	0x200109dc
    80d8:	0001d558 	.word	0x0001d558
    80dc:	0001d548 	.word	0x0001d548

000080e0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    80e0:	4901      	ldr	r1, [pc, #4]	; (80e8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    80e2:	2210      	movs	r2, #16
	str	r2, [r1]
    80e4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    80e6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    80e8:	e000ed10 	.word	0xe000ed10

000080ec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    80ec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    80ee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    80f0:	f380 8811 	msr	BASEPRI, r0
	isb
    80f4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    80f8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    80fc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    80fe:	b662      	cpsie	i
	isb
    8100:	f3bf 8f6f 	isb	sy

	bx	lr
    8104:	4770      	bx	lr
    8106:	bf00      	nop

00008108 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    8108:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    810a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    810c:	f381 8811 	msr	BASEPRI, r1

	wfe
    8110:	bf20      	wfe

	msr	BASEPRI, r0
    8112:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    8116:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    8118:	4770      	bx	lr
    811a:	bf00      	nop

0000811c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    811c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8120:	4680      	mov	r8, r0
    8122:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    8124:	460c      	mov	r4, r1
    8126:	2900      	cmp	r1, #0
    8128:	f000 8094 	beq.w	8254 <z_arm_fatal_error+0x138>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    812c:	46e9      	mov	r9, sp
    812e:	b08a      	sub	sp, #40	; 0x28
    8130:	466d      	mov	r5, sp
    8132:	e9d1 1200 	ldrd	r1, r2, [r1]
    8136:	68a3      	ldr	r3, [r4, #8]
    8138:	484a      	ldr	r0, [pc, #296]	; (8264 <z_arm_fatal_error+0x148>)
    813a:	462e      	mov	r6, r5
    813c:	f04f 0a05 	mov.w	sl, #5
    8140:	e9c5 0105 	strd	r0, r1, [r5, #20]
    8144:	e9c5 2307 	strd	r2, r3, [r5, #28]
    8148:	f846 af10 	str.w	sl, [r6, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    814c:	4846      	ldr	r0, [pc, #280]	; (8268 <z_arm_fatal_error+0x14c>)
    814e:	4632      	mov	r2, r6
    8150:	2300      	movs	r3, #0
    8152:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    8156:	f7ff fbfb 	bl	7950 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    815a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    815e:	6963      	ldr	r3, [r4, #20]
    8160:	4842      	ldr	r0, [pc, #264]	; (826c <z_arm_fatal_error+0x150>)
    8162:	f8c5 a010 	str.w	sl, [r5, #16]
    8166:	46cd      	mov	sp, r9
    8168:	e9c5 0105 	strd	r0, r1, [r5, #20]
    816c:	46ad      	mov	sp, r5
    816e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    8172:	483d      	ldr	r0, [pc, #244]	; (8268 <z_arm_fatal_error+0x14c>)
    8174:	4632      	mov	r2, r6
    8176:	2300      	movs	r3, #0
    8178:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    817c:	f7ff fbe8 	bl	7950 <z_impl_z_log_msg2_static_create>
    8180:	46cd      	mov	sp, r9
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    8182:	69e3      	ldr	r3, [r4, #28]
    8184:	493a      	ldr	r1, [pc, #232]	; (8270 <z_arm_fatal_error+0x154>)
    8186:	b088      	sub	sp, #32
    8188:	466a      	mov	r2, sp
    818a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    818e:	2303      	movs	r3, #3
    8190:	f842 3f10 	str.w	r3, [r2, #16]!
    8194:	4834      	ldr	r0, [pc, #208]	; (8268 <z_arm_fatal_error+0x14c>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    8196:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 827c <z_arm_fatal_error+0x160>
    819a:	2300      	movs	r3, #0
    819c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    81a0:	f7ff fbd6 	bl	7950 <z_impl_z_log_msg2_static_create>
    81a4:	4830      	ldr	r0, [pc, #192]	; (8268 <z_arm_fatal_error+0x14c>)
    81a6:	46cd      	mov	sp, r9
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
    81a8:	4626      	mov	r6, r4
    81aa:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    81ac:	f04f 0a0a 	mov.w	sl, #10
    81b0:	edd6 7a08 	vldr	s15, [r6, #32]
    81b4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
    81b8:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    81bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    81c0:	46e9      	mov	r9, sp
    81c2:	ee17 1a90 	vmov	r1, s15
    81c6:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
    81ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    81ce:	b08e      	sub	sp, #56	; 0x38
    81d0:	ee17 3a90 	vmov	r3, s15
    81d4:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
    81d8:	466a      	mov	r2, sp
    81da:	f105 0c01 	add.w	ip, r5, #1
    81de:	e9c2 c108 	strd	ip, r1, [r2, #32]
    81e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    81e6:	1ca9      	adds	r1, r5, #2
    81e8:	e9c2 130a 	strd	r1, r3, [r2, #40]	; 0x28
    81ec:	1ceb      	adds	r3, r5, #3
    81ee:	e9c2 b505 	strd	fp, r5, [r2, #20]
    81f2:	ed82 7a07 	vstr	s14, [r2, #28]
    81f6:	6313      	str	r3, [r2, #48]	; 0x30
    81f8:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
    81fc:	f842 af10 	str.w	sl, [r2, #16]!
    8200:	2300      	movs	r3, #0
    8202:	f245 0140 	movw	r1, #20544	; 0x5040
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
    8206:	3504      	adds	r5, #4
    8208:	f7ff fba2 	bl	7950 <z_impl_z_log_msg2_static_create>
    820c:	2d10      	cmp	r5, #16
    820e:	4816      	ldr	r0, [pc, #88]	; (8268 <z_arm_fatal_error+0x14c>)
    8210:	46cd      	mov	sp, r9
    8212:	f106 0610 	add.w	r6, r6, #16
    8216:	d1cb      	bne.n	81b0 <z_arm_fatal_error+0x94>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    8218:	b088      	sub	sp, #32
    821a:	466a      	mov	r2, sp
    821c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    821e:	4915      	ldr	r1, [pc, #84]	; (8274 <z_arm_fatal_error+0x158>)
    8220:	2503      	movs	r5, #3
    8222:	e9c2 1305 	strd	r1, r3, [r2, #20]
    8226:	f842 5f10 	str.w	r5, [r2, #16]!
    822a:	2300      	movs	r3, #0
    822c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8230:	f7ff fb8e 	bl	7950 <z_impl_z_log_msg2_static_create>
    8234:	46cd      	mov	sp, r9
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    8236:	b088      	sub	sp, #32
    8238:	466a      	mov	r2, sp
    823a:	69a3      	ldr	r3, [r4, #24]
    823c:	490e      	ldr	r1, [pc, #56]	; (8278 <z_arm_fatal_error+0x15c>)
    823e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    8242:	f842 5f10 	str.w	r5, [r2, #16]!
    8246:	4808      	ldr	r0, [pc, #32]	; (8268 <z_arm_fatal_error+0x14c>)
    8248:	2300      	movs	r3, #0
    824a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    824e:	f7ff fb7f 	bl	7950 <z_impl_z_log_msg2_static_create>
    8252:	46cd      	mov	sp, r9
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    8254:	4621      	mov	r1, r4
    8256:	4640      	mov	r0, r8
    8258:	f005 fd20 	bl	dc9c <z_fatal_error>
}
    825c:	46bd      	mov	sp, r7
    825e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8262:	bf00      	nop
    8264:	0003c283 	.word	0x0003c283
    8268:	0001c858 	.word	0x0001c858
    826c:	0003c2b2 	.word	0x0003c2b2
    8270:	0003c2e1 	.word	0x0003c2e1
    8274:	0003c333 	.word	0x0003c333
    8278:	0003c342 	.word	0x0003c342
    827c:	0003c2f0 	.word	0x0003c2f0

00008280 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    8280:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    8282:	2b00      	cmp	r3, #0
    8284:	db08      	blt.n	8298 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8286:	2201      	movs	r2, #1
    8288:	f000 001f 	and.w	r0, r0, #31
    828c:	fa02 f000 	lsl.w	r0, r2, r0
    8290:	095b      	lsrs	r3, r3, #5
    8292:	4a02      	ldr	r2, [pc, #8]	; (829c <arch_irq_enable+0x1c>)
    8294:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    8298:	4770      	bx	lr
    829a:	bf00      	nop
    829c:	e000e100 	.word	0xe000e100

000082a0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    82a0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    82a2:	2b00      	cmp	r3, #0
    82a4:	db0d      	blt.n	82c2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82a6:	2201      	movs	r2, #1
    82a8:	095b      	lsrs	r3, r3, #5
    82aa:	f000 001f 	and.w	r0, r0, #31
    82ae:	fa02 f000 	lsl.w	r0, r2, r0
    82b2:	3320      	adds	r3, #32
    82b4:	4a03      	ldr	r2, [pc, #12]	; (82c4 <arch_irq_disable+0x24>)
    82b6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    82ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    82be:	f3bf 8f6f 	isb	sy
}
    82c2:	4770      	bx	lr
    82c4:	e000e100 	.word	0xe000e100

000082c8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    82c8:	4b05      	ldr	r3, [pc, #20]	; (82e0 <arch_irq_is_enabled+0x18>)
    82ca:	0942      	lsrs	r2, r0, #5
    82cc:	f000 001f 	and.w	r0, r0, #31
    82d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    82d4:	2301      	movs	r3, #1
    82d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    82da:	4010      	ands	r0, r2
    82dc:	4770      	bx	lr
    82de:	bf00      	nop
    82e0:	e000e100 	.word	0xe000e100

000082e4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    82e4:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    82e6:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    82e8:	2c07      	cmp	r4, #7
{
    82ea:	4605      	mov	r5, r0
    82ec:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    82ee:	d90f      	bls.n	8310 <z_arm_irq_priority_set+0x2c>
    82f0:	4a11      	ldr	r2, [pc, #68]	; (8338 <z_arm_irq_priority_set+0x54>)
    82f2:	4912      	ldr	r1, [pc, #72]	; (833c <z_arm_irq_priority_set+0x58>)
    82f4:	4812      	ldr	r0, [pc, #72]	; (8340 <z_arm_irq_priority_set+0x5c>)
    82f6:	2357      	movs	r3, #87	; 0x57
    82f8:	f00f fca9 	bl	17c4e <assert_print>
    82fc:	4811      	ldr	r0, [pc, #68]	; (8344 <z_arm_irq_priority_set+0x60>)
    82fe:	4631      	mov	r1, r6
    8300:	2307      	movs	r3, #7
    8302:	462a      	mov	r2, r5
    8304:	f00f fca3 	bl	17c4e <assert_print>
    8308:	480b      	ldr	r0, [pc, #44]	; (8338 <z_arm_irq_priority_set+0x54>)
    830a:	2157      	movs	r1, #87	; 0x57
    830c:	f00f fc98 	bl	17c40 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    8310:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    8312:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8314:	bfac      	ite	ge
    8316:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    831a:	4b0b      	ldrlt	r3, [pc, #44]	; (8348 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    831c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8320:	bfb8      	it	lt
    8322:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8326:	b2e4      	uxtb	r4, r4
    8328:	bfaa      	itet	ge
    832a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    832e:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8330:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    8334:	bd70      	pop	{r4, r5, r6, pc}
    8336:	bf00      	nop
    8338:	0003c370 	.word	0x0003c370
    833c:	0003c3a6 	.word	0x0003c3a6
    8340:	0003baf1 	.word	0x0003baf1
    8344:	0003c3c1 	.word	0x0003c3c1
    8348:	e000ed14 	.word	0xe000ed14

0000834c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    834c:	bf30      	wfi
    b z_SysNmiOnReset
    834e:	f7ff bffd 	b.w	834c <z_SysNmiOnReset>
    8352:	bf00      	nop

00008354 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    8354:	4a14      	ldr	r2, [pc, #80]	; (83a8 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    8356:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    8358:	4b14      	ldr	r3, [pc, #80]	; (83ac <z_arm_prep_c+0x58>)
    835a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    835e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    8360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8364:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    8368:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    836c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    8370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    8374:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    8378:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    837c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    8380:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    8384:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    8388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    838c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    8390:	2300      	movs	r3, #0
    8392:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    8396:	f005 fd2f 	bl	ddf8 <z_bss_zero>
	z_data_copy();
    839a:	f007 ff8f 	bl	102bc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    839e:	f000 fc97 	bl	8cd0 <z_arm_interrupt_init>
	z_cstart();
    83a2:	f005 fd6d 	bl	de80 <z_cstart>
    83a6:	bf00      	nop
    83a8:	00000000 	.word	0x00000000
    83ac:	e000ed00 	.word	0xe000ed00

000083b0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    83b0:	4a09      	ldr	r2, [pc, #36]	; (83d8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    83b2:	490a      	ldr	r1, [pc, #40]	; (83dc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    83b4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    83b6:	6809      	ldr	r1, [r1, #0]
    83b8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    83ba:	4909      	ldr	r1, [pc, #36]	; (83e0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    83bc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    83be:	684b      	ldr	r3, [r1, #4]
    83c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    83c4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    83c6:	2300      	movs	r3, #0
    83c8:	f383 8811 	msr	BASEPRI, r3
    83cc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    83d0:	6893      	ldr	r3, [r2, #8]
}
    83d2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    83d4:	4770      	bx	lr
    83d6:	bf00      	nop
    83d8:	200239e4 	.word	0x200239e4
    83dc:	0001daec 	.word	0x0001daec
    83e0:	e000ed00 	.word	0xe000ed00

000083e4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    83e4:	4921      	ldr	r1, [pc, #132]	; (846c <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
    83e6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    83e8:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    83ec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    83f0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    83f2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    83f6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    83fa:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    83fe:	d103      	bne.n	8408 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    8400:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    8404:	ec80 8a10 	vstmia	r0, {s16-s31}

00008408 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    8408:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    840a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    840e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    8412:	4f17      	ldr	r7, [pc, #92]	; (8470 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    8414:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    8418:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    841a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    841c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    841e:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    8422:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    8424:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    8426:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    8428:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    842c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    8430:	d003      	beq.n	843a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    8432:	2300      	movs	r3, #0
    vmsr fpscr, r3
    8434:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    8438:	e003      	b.n	8442 <in_fp_endif>

0000843a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    843a:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    843e:	ec90 8a10 	vldmia	r0, {s16-s31}

00008442 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    8442:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    8446:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    844a:	f383 8814 	msr	CONTROL, r3
    isb
    844e:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    8452:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    8454:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    8456:	f000 fcd7 	bl	8e08 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    845a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    845e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    8462:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    8466:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    846a:	4770      	bx	lr
    ldr r1, =_kernel
    846c:	200239e4 	.word	0x200239e4
    ldr v4, =_SCS_ICSR
    8470:	e000ed04 	.word	0xe000ed04

00008474 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    8474:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    8478:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    847a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    847e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    8482:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    8484:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    8488:	2902      	cmp	r1, #2
    beq _oops
    848a:	d0ff      	beq.n	848c <_oops>

0000848c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    848c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    848e:	f00f fd29 	bl	17ee4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    8492:	bd01      	pop	{r0, pc}

00008494 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    8494:	7b01      	ldrb	r1, [r0, #12]
{
    8496:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    8498:	f011 0402 	ands.w	r4, r1, #2
    849c:	d005      	beq.n	84aa <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
    849e:	6e41      	ldr	r1, [r0, #100]	; 0x64
    84a0:	3160      	adds	r1, #96	; 0x60
    84a2:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
    84a4:	6e81      	ldr	r1, [r0, #104]	; 0x68
    84a6:	3960      	subs	r1, #96	; 0x60
    84a8:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    84aa:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    84ae:	9b02      	ldr	r3, [sp, #8]
    84b0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    84b4:	490f      	ldr	r1, [pc, #60]	; (84f4 <arch_new_thread+0x60>)
	iframe->a3 = (uint32_t)p2;
    84b6:	9b03      	ldr	r3, [sp, #12]
    84b8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    84bc:	9b04      	ldr	r3, [sp, #16]
    84be:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    84c2:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    84c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    84ca:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    84ce:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    84d2:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    84d4:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    84d6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    84d8:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    84da:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    84de:	b91c      	cbnz	r4, 84e8 <arch_new_thread+0x54>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
    84e0:	23fd      	movs	r3, #253	; 0xfd
    84e2:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    84e6:	bd10      	pop	{r4, pc}
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    84e8:	f64f 5308 	movw	r3, #64776	; 0xfd08
    84ec:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
    84f0:	e7f9      	b.n	84e6 <arch_new_thread+0x52>
    84f2:	bf00      	nop
    84f4:	00017b45 	.word	0x00017b45

000084f8 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
    84f8:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    84fa:	7b01      	ldrb	r1, [r0, #12]
		if ((thread->arch.mode &
    84fc:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    8500:	4a17      	ldr	r2, [pc, #92]	; (8560 <z_arm_mpu_stack_guard_and_fpu_adjust+0x68>)
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    8502:	f011 0f02 	tst.w	r1, #2
		if ((thread->arch.mode &
    8506:	f003 0508 	and.w	r5, r3, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    850a:	d103      	bne.n	8514 <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
    850c:	f890 40bd 	ldrb.w	r4, [r0, #189]	; 0xbd
    8510:	06e4      	lsls	r4, r4, #27
    8512:	d413      	bmi.n	853c <z_arm_mpu_stack_guard_and_fpu_adjust+0x44>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
    8514:	6b54      	ldr	r4, [r2, #52]	; 0x34
    8516:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    851a:	6354      	str	r4, [r2, #52]	; 0x34
		if ((thread->arch.mode &
    851c:	b94d      	cbnz	r5, 8532 <z_arm_mpu_stack_guard_and_fpu_adjust+0x3a>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    851e:	f043 0308 	orr.w	r3, r3, #8
    8522:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
    8526:	6e43      	ldr	r3, [r0, #100]	; 0x64
    8528:	3360      	adds	r3, #96	; 0x60
    852a:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
    852c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    852e:	3b60      	subs	r3, #96	; 0x60
    8530:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
    8532:	f041 0102 	orr.w	r1, r1, #2
    8536:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
    8538:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
    853a:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
    853c:	6b51      	ldr	r1, [r2, #52]	; 0x34
    853e:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
    8542:	6351      	str	r1, [r2, #52]	; 0x34
		if ((thread->arch.mode &
    8544:	b14d      	cbz	r5, 855a <z_arm_mpu_stack_guard_and_fpu_adjust+0x62>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    8546:	f023 0308 	bic.w	r3, r3, #8
    854a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
    854e:	6e43      	ldr	r3, [r0, #100]	; 0x64
    8550:	3b60      	subs	r3, #96	; 0x60
    8552:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
    8554:	6e83      	ldr	r3, [r0, #104]	; 0x68
    8556:	3360      	adds	r3, #96	; 0x60
    8558:	6683      	str	r3, [r0, #104]	; 0x68
	return MPU_GUARD_ALIGN_AND_SIZE;
    855a:	2020      	movs	r0, #32
    855c:	e7ed      	b.n	853a <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
    855e:	bf00      	nop
    8560:	e000ef00 	.word	0xe000ef00

00008564 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    8564:	4b0d      	ldr	r3, [pc, #52]	; (859c <z_check_thread_stack_fail+0x38>)
{
    8566:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    8568:	6898      	ldr	r0, [r3, #8]
{
    856a:	b510      	push	{r4, lr}

	if (thread == NULL) {
    856c:	b190      	cbz	r0, 8594 <z_check_thread_stack_fail+0x30>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
    856e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    8572:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
    8574:	f013 0f08 	tst.w	r3, #8
    8578:	bf14      	ite	ne
    857a:	2480      	movne	r4, #128	; 0x80
    857c:	2420      	moveq	r4, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    857e:	f112 0f16 	cmn.w	r2, #22
    8582:	d004      	beq.n	858e <z_check_thread_stack_fail+0x2a>
    8584:	1b03      	subs	r3, r0, r4
    8586:	4293      	cmp	r3, r2
    8588:	d805      	bhi.n	8596 <z_check_thread_stack_fail+0x32>
    858a:	4282      	cmp	r2, r0
    858c:	d203      	bcs.n	8596 <z_check_thread_stack_fail+0x32>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    858e:	4281      	cmp	r1, r0
    8590:	bf28      	it	cs
    8592:	2000      	movcs	r0, #0
}
    8594:	bd10      	pop	{r4, pc}
	return 0;
    8596:	2000      	movs	r0, #0
    8598:	e7fc      	b.n	8594 <z_check_thread_stack_fail+0x30>
    859a:	bf00      	nop
    859c:	200239e4 	.word	0x200239e4

000085a0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    85a0:	b508      	push	{r3, lr}
    85a2:	4614      	mov	r4, r2
    85a4:	460d      	mov	r5, r1
    85a6:	2200      	movs	r2, #0
    85a8:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    85ac:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    85b0:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    85b4:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
    85b8:	f3bf 8f6f 	isb	sy
    85bc:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    85c0:	4a08      	ldr	r2, [pc, #32]	; (85e4 <arch_switch_to_main_thread+0x44>)
    85c2:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    85c4:	f000 fc20 	bl	8e08 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    85c8:	4620      	mov	r0, r4
    85ca:	f385 8809 	msr	PSP, r5
    85ce:	2100      	movs	r1, #0
    85d0:	b663      	cpsie	if
    85d2:	f381 8811 	msr	BASEPRI, r1
    85d6:	f3bf 8f6f 	isb	sy
    85da:	2200      	movs	r2, #0
    85dc:	2300      	movs	r3, #0
    85de:	f00f fab1 	bl	17b44 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    85e2:	bf00      	nop
    85e4:	200239e4 	.word	0x200239e4

000085e8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    85e8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    85ea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    85ec:	4a0b      	ldr	r2, [pc, #44]	; (861c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    85ee:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    85f0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    85f2:	bf1e      	ittt	ne
	movne	r1, #0
    85f4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    85f6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    85f8:	f010 f9e5 	blne	189c6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    85fc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    85fe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    8602:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    8606:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    860a:	4905      	ldr	r1, [pc, #20]	; (8620 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    860c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    860e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    8610:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    8612:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    8616:	4903      	ldr	r1, [pc, #12]	; (8624 <_isr_wrapper+0x3c>)
	bx r1
    8618:	4708      	bx	r1
    861a:	0000      	.short	0x0000
	ldr r2, =_kernel
    861c:	200239e4 	.word	0x200239e4
	ldr r1, =_sw_isr_table
    8620:	0001c684 	.word	0x0001c684
	ldr r1, =z_arm_int_exit
    8624:	00008629 	.word	0x00008629

00008628 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    8628:	4b04      	ldr	r3, [pc, #16]	; (863c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    862a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    862c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    862e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    8630:	d003      	beq.n	863a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    8632:	4903      	ldr	r1, [pc, #12]	; (8640 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    8634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    8638:	600a      	str	r2, [r1, #0]

0000863a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    863a:	4770      	bx	lr
	ldr r3, =_kernel
    863c:	200239e4 	.word	0x200239e4
	ldr r1, =_SCS_ICSR
    8640:	e000ed04 	.word	0xe000ed04

00008644 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    8644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8648:	b086      	sub	sp, #24
    864a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    864c:	4b3f      	ldr	r3, [pc, #252]	; (874c <bus_fault.constprop.0+0x108>)
    864e:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    8650:	4606      	mov	r6, r0
    8652:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    8654:	483e      	ldr	r0, [pc, #248]	; (8750 <bus_fault.constprop.0+0x10c>)
    8656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    865a:	2402      	movs	r4, #2
    865c:	f107 0210 	add.w	r2, r7, #16
    8660:	613c      	str	r4, [r7, #16]
    8662:	f00f fc53 	bl	17f0c <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    8666:	4b3b      	ldr	r3, [pc, #236]	; (8754 <bus_fault.constprop.0+0x110>)
    8668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    866a:	04d9      	lsls	r1, r3, #19
    866c:	d509      	bpl.n	8682 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    866e:	4b3a      	ldr	r3, [pc, #232]	; (8758 <bus_fault.constprop.0+0x114>)
    8670:	4837      	ldr	r0, [pc, #220]	; (8750 <bus_fault.constprop.0+0x10c>)
    8672:	f107 0210 	add.w	r2, r7, #16
    8676:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    867a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    867e:	f00f fc45 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    8682:	4b34      	ldr	r3, [pc, #208]	; (8754 <bus_fault.constprop.0+0x110>)
    8684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8686:	051a      	lsls	r2, r3, #20
    8688:	d50a      	bpl.n	86a0 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    868a:	4b34      	ldr	r3, [pc, #208]	; (875c <bus_fault.constprop.0+0x118>)
    868c:	617b      	str	r3, [r7, #20]
    868e:	4830      	ldr	r0, [pc, #192]	; (8750 <bus_fault.constprop.0+0x10c>)
    8690:	2302      	movs	r3, #2
    8692:	f107 0210 	add.w	r2, r7, #16
    8696:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    869a:	613b      	str	r3, [r7, #16]
    869c:	f00f fc36 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    86a0:	4c2c      	ldr	r4, [pc, #176]	; (8754 <bus_fault.constprop.0+0x110>)
    86a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    86a4:	059b      	lsls	r3, r3, #22
    86a6:	d522      	bpl.n	86ee <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    86a8:	4b2d      	ldr	r3, [pc, #180]	; (8760 <bus_fault.constprop.0+0x11c>)
    86aa:	4829      	ldr	r0, [pc, #164]	; (8750 <bus_fault.constprop.0+0x10c>)
    86ac:	617b      	str	r3, [r7, #20]
    86ae:	f107 0210 	add.w	r2, r7, #16
    86b2:	2302      	movs	r3, #2
    86b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    86b8:	613b      	str	r3, [r7, #16]
    86ba:	f00f fc27 	bl	17f0c <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    86be:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    86c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    86c2:	0410      	lsls	r0, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    86c4:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    86c6:	d512      	bpl.n	86ee <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    86c8:	b088      	sub	sp, #32
    86ca:	4926      	ldr	r1, [pc, #152]	; (8764 <bus_fault.constprop.0+0x120>)
    86cc:	4820      	ldr	r0, [pc, #128]	; (8750 <bus_fault.constprop.0+0x10c>)
    86ce:	466a      	mov	r2, sp
    86d0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    86d4:	2303      	movs	r3, #3
    86d6:	f842 3f10 	str.w	r3, [r2, #16]!
    86da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    86de:	f00f fc15 	bl	17f0c <z_log_msg2_static_create.constprop.0>
    86e2:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    86e4:	b11e      	cbz	r6, 86ee <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    86e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    86e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    86ec:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    86ee:	4b19      	ldr	r3, [pc, #100]	; (8754 <bus_fault.constprop.0+0x110>)
    86f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86f2:	0559      	lsls	r1, r3, #21
    86f4:	d50a      	bpl.n	870c <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    86f6:	4b1c      	ldr	r3, [pc, #112]	; (8768 <bus_fault.constprop.0+0x124>)
    86f8:	617b      	str	r3, [r7, #20]
    86fa:	4815      	ldr	r0, [pc, #84]	; (8750 <bus_fault.constprop.0+0x10c>)
    86fc:	2302      	movs	r3, #2
    86fe:	f107 0210 	add.w	r2, r7, #16
    8702:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8706:	613b      	str	r3, [r7, #16]
    8708:	f00f fc00 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    870c:	4b11      	ldr	r3, [pc, #68]	; (8754 <bus_fault.constprop.0+0x110>)
    870e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8710:	05d2      	lsls	r2, r2, #23
    8712:	d515      	bpl.n	8740 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    8714:	4b15      	ldr	r3, [pc, #84]	; (876c <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    8716:	617b      	str	r3, [r7, #20]
    8718:	480d      	ldr	r0, [pc, #52]	; (8750 <bus_fault.constprop.0+0x10c>)
    871a:	2302      	movs	r3, #2
    871c:	f107 0210 	add.w	r2, r7, #16
    8720:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8724:	613b      	str	r3, [r7, #16]
    8726:	f00f fbf1 	bl	17f0c <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    872a:	4a0a      	ldr	r2, [pc, #40]	; (8754 <bus_fault.constprop.0+0x110>)
    872c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    872e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    8730:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    8734:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    8736:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    8738:	7028      	strb	r0, [r5, #0]
}
    873a:	46bd      	mov	sp, r7
    873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    8740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8742:	049b      	lsls	r3, r3, #18
    8744:	d5f1      	bpl.n	872a <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    8746:	4b0a      	ldr	r3, [pc, #40]	; (8770 <bus_fault.constprop.0+0x12c>)
    8748:	e7e5      	b.n	8716 <bus_fault.constprop.0+0xd2>
    874a:	bf00      	nop
    874c:	0003c401 	.word	0x0003c401
    8750:	0001c858 	.word	0x0001c858
    8754:	e000ed00 	.word	0xe000ed00
    8758:	0003c417 	.word	0x0003c417
    875c:	0003c428 	.word	0x0003c428
    8760:	0003c43b 	.word	0x0003c43b
    8764:	0003c454 	.word	0x0003c454
    8768:	0003c469 	.word	0x0003c469
    876c:	0003c484 	.word	0x0003c484
    8770:	0003c49c 	.word	0x0003c49c

00008774 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    8774:	b510      	push	{r4, lr}
    8776:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    8778:	4b33      	ldr	r3, [pc, #204]	; (8848 <usage_fault.constprop.0+0xd4>)
    877a:	4834      	ldr	r0, [pc, #208]	; (884c <usage_fault.constprop.0+0xd8>)
    877c:	9305      	str	r3, [sp, #20]
    877e:	2402      	movs	r4, #2
    8780:	aa04      	add	r2, sp, #16
    8782:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8786:	9404      	str	r4, [sp, #16]
    8788:	f00f fbc0 	bl	17f0c <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    878c:	4b30      	ldr	r3, [pc, #192]	; (8850 <usage_fault.constprop.0+0xdc>)
    878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8790:	019b      	lsls	r3, r3, #6
    8792:	d508      	bpl.n	87a6 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    8794:	4b2f      	ldr	r3, [pc, #188]	; (8854 <usage_fault.constprop.0+0xe0>)
    8796:	482d      	ldr	r0, [pc, #180]	; (884c <usage_fault.constprop.0+0xd8>)
    8798:	aa04      	add	r2, sp, #16
    879a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    879e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    87a2:	f00f fbb3 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    87a6:	4b2a      	ldr	r3, [pc, #168]	; (8850 <usage_fault.constprop.0+0xdc>)
    87a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87aa:	01dc      	lsls	r4, r3, #7
    87ac:	d509      	bpl.n	87c2 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    87ae:	4b2a      	ldr	r3, [pc, #168]	; (8858 <usage_fault.constprop.0+0xe4>)
    87b0:	9305      	str	r3, [sp, #20]
    87b2:	4826      	ldr	r0, [pc, #152]	; (884c <usage_fault.constprop.0+0xd8>)
    87b4:	2302      	movs	r3, #2
    87b6:	aa04      	add	r2, sp, #16
    87b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    87bc:	9304      	str	r3, [sp, #16]
    87be:	f00f fba5 	bl	17f0c <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    87c2:	4b23      	ldr	r3, [pc, #140]	; (8850 <usage_fault.constprop.0+0xdc>)
    87c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87c6:	0318      	lsls	r0, r3, #12
    87c8:	d509      	bpl.n	87de <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    87ca:	4b24      	ldr	r3, [pc, #144]	; (885c <usage_fault.constprop.0+0xe8>)
    87cc:	9305      	str	r3, [sp, #20]
    87ce:	481f      	ldr	r0, [pc, #124]	; (884c <usage_fault.constprop.0+0xd8>)
    87d0:	2302      	movs	r3, #2
    87d2:	aa04      	add	r2, sp, #16
    87d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    87d8:	9304      	str	r3, [sp, #16]
    87da:	f00f fb97 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    87de:	4b1c      	ldr	r3, [pc, #112]	; (8850 <usage_fault.constprop.0+0xdc>)
    87e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87e2:	0359      	lsls	r1, r3, #13
    87e4:	d509      	bpl.n	87fa <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    87e6:	4b1e      	ldr	r3, [pc, #120]	; (8860 <usage_fault.constprop.0+0xec>)
    87e8:	9305      	str	r3, [sp, #20]
    87ea:	4818      	ldr	r0, [pc, #96]	; (884c <usage_fault.constprop.0+0xd8>)
    87ec:	2302      	movs	r3, #2
    87ee:	aa04      	add	r2, sp, #16
    87f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    87f4:	9304      	str	r3, [sp, #16]
    87f6:	f00f fb89 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    87fa:	4b15      	ldr	r3, [pc, #84]	; (8850 <usage_fault.constprop.0+0xdc>)
    87fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87fe:	039a      	lsls	r2, r3, #14
    8800:	d509      	bpl.n	8816 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    8802:	4b18      	ldr	r3, [pc, #96]	; (8864 <usage_fault.constprop.0+0xf0>)
    8804:	9305      	str	r3, [sp, #20]
    8806:	4811      	ldr	r0, [pc, #68]	; (884c <usage_fault.constprop.0+0xd8>)
    8808:	2302      	movs	r3, #2
    880a:	aa04      	add	r2, sp, #16
    880c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8810:	9304      	str	r3, [sp, #16]
    8812:	f00f fb7b 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    8816:	4b0e      	ldr	r3, [pc, #56]	; (8850 <usage_fault.constprop.0+0xdc>)
    8818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    881a:	03db      	lsls	r3, r3, #15
    881c:	d509      	bpl.n	8832 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    881e:	4b12      	ldr	r3, [pc, #72]	; (8868 <usage_fault.constprop.0+0xf4>)
    8820:	9305      	str	r3, [sp, #20]
    8822:	480a      	ldr	r0, [pc, #40]	; (884c <usage_fault.constprop.0+0xd8>)
    8824:	2302      	movs	r3, #2
    8826:	aa04      	add	r2, sp, #16
    8828:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    882c:	9304      	str	r3, [sp, #16]
    882e:	f00f fb6d 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    8832:	4a07      	ldr	r2, [pc, #28]	; (8850 <usage_fault.constprop.0+0xdc>)
    8834:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8836:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    883a:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    883e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    8840:	6293      	str	r3, [r2, #40]	; 0x28
}
    8842:	b006      	add	sp, #24
    8844:	bd10      	pop	{r4, pc}
    8846:	bf00      	nop
    8848:	0003c4cb 	.word	0x0003c4cb
    884c:	0001c858 	.word	0x0001c858
    8850:	e000ed00 	.word	0xe000ed00
    8854:	0003c4e3 	.word	0x0003c4e3
    8858:	0003c4f6 	.word	0x0003c4f6
    885c:	0003c510 	.word	0x0003c510
    8860:	0003c52e 	.word	0x0003c52e
    8864:	0003c553 	.word	0x0003c553
    8868:	0003c56d 	.word	0x0003c56d

0000886c <mem_manage_fault>:
{
    886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8870:	b086      	sub	sp, #24
    8872:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    8874:	4b5d      	ldr	r3, [pc, #372]	; (89ec <mem_manage_fault+0x180>)
    8876:	617b      	str	r3, [r7, #20]
{
    8878:	4606      	mov	r6, r0
    887a:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    887c:	485c      	ldr	r0, [pc, #368]	; (89f0 <mem_manage_fault+0x184>)
{
    887e:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    8880:	2402      	movs	r4, #2
    8882:	f107 0210 	add.w	r2, r7, #16
    8886:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    888a:	613c      	str	r4, [r7, #16]
    888c:	f00f fb3e 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    8890:	4b58      	ldr	r3, [pc, #352]	; (89f4 <mem_manage_fault+0x188>)
    8892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8894:	06d8      	lsls	r0, r3, #27
    8896:	d509      	bpl.n	88ac <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    8898:	4b57      	ldr	r3, [pc, #348]	; (89f8 <mem_manage_fault+0x18c>)
    889a:	4855      	ldr	r0, [pc, #340]	; (89f0 <mem_manage_fault+0x184>)
    889c:	f107 0210 	add.w	r2, r7, #16
    88a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    88a4:	e9c7 4304 	strd	r4, r3, [r7, #16]
    88a8:	f00f fb30 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    88ac:	4b51      	ldr	r3, [pc, #324]	; (89f4 <mem_manage_fault+0x188>)
    88ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88b0:	0719      	lsls	r1, r3, #28
    88b2:	d50a      	bpl.n	88ca <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    88b4:	4b51      	ldr	r3, [pc, #324]	; (89fc <mem_manage_fault+0x190>)
    88b6:	617b      	str	r3, [r7, #20]
    88b8:	484d      	ldr	r0, [pc, #308]	; (89f0 <mem_manage_fault+0x184>)
    88ba:	2302      	movs	r3, #2
    88bc:	f107 0210 	add.w	r2, r7, #16
    88c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    88c4:	613b      	str	r3, [r7, #16]
    88c6:	f00f fb21 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    88ca:	f8df a128 	ldr.w	sl, [pc, #296]	; 89f4 <mem_manage_fault+0x188>
    88ce:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    88d2:	079a      	lsls	r2, r3, #30
    88d4:	d43d      	bmi.n	8952 <mem_manage_fault+0xe6>
	uint32_t mmfar = -EINVAL;
    88d6:	f06f 0415 	mvn.w	r4, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    88da:	4b46      	ldr	r3, [pc, #280]	; (89f4 <mem_manage_fault+0x188>)
    88dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88de:	07d8      	lsls	r0, r3, #31
    88e0:	d50a      	bpl.n	88f8 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
    88e2:	4b47      	ldr	r3, [pc, #284]	; (8a00 <mem_manage_fault+0x194>)
    88e4:	617b      	str	r3, [r7, #20]
    88e6:	4842      	ldr	r0, [pc, #264]	; (89f0 <mem_manage_fault+0x184>)
    88e8:	2302      	movs	r3, #2
    88ea:	f107 0210 	add.w	r2, r7, #16
    88ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    88f2:	613b      	str	r3, [r7, #16]
    88f4:	f00f fb0a 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    88f8:	4b3e      	ldr	r3, [pc, #248]	; (89f4 <mem_manage_fault+0x188>)
    88fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88fc:	0699      	lsls	r1, r3, #26
    88fe:	d50a      	bpl.n	8916 <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
    8900:	4b40      	ldr	r3, [pc, #256]	; (8a04 <mem_manage_fault+0x198>)
    8902:	617b      	str	r3, [r7, #20]
    8904:	483a      	ldr	r0, [pc, #232]	; (89f0 <mem_manage_fault+0x184>)
    8906:	2302      	movs	r3, #2
    8908:	f107 0210 	add.w	r2, r7, #16
    890c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8910:	613b      	str	r3, [r7, #16]
    8912:	f00f fafb 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    8916:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 89f4 <mem_manage_fault+0x188>
    891a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    891e:	06da      	lsls	r2, r3, #27
    8920:	d442      	bmi.n	89a8 <mem_manage_fault+0x13c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    8922:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    8926:	079b      	lsls	r3, r3, #30
    8928:	d43e      	bmi.n	89a8 <mem_manage_fault+0x13c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    892a:	2400      	movs	r4, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    892c:	4b31      	ldr	r3, [pc, #196]	; (89f4 <mem_manage_fault+0x188>)
    892e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8930:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    8932:	bf42      	ittt	mi
    8934:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    8936:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    893a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    893c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    893e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    8942:	629a      	str	r2, [r3, #40]	; 0x28
}
    8944:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    8946:	2300      	movs	r3, #0
}
    8948:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    894a:	702b      	strb	r3, [r5, #0]
}
    894c:	46bd      	mov	sp, r7
    894e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    8952:	4b2d      	ldr	r3, [pc, #180]	; (8a08 <mem_manage_fault+0x19c>)
    8954:	617b      	str	r3, [r7, #20]
    8956:	4826      	ldr	r0, [pc, #152]	; (89f0 <mem_manage_fault+0x184>)
    8958:	2302      	movs	r3, #2
    895a:	f107 0210 	add.w	r2, r7, #16
    895e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8962:	613b      	str	r3, [r7, #16]
    8964:	f00f fad2 	bl	17f0c <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    8968:	f8da 4034 	ldr.w	r4, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    896c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    8970:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    8972:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    8974:	d5af      	bpl.n	88d6 <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    8976:	b088      	sub	sp, #32
    8978:	4a24      	ldr	r2, [pc, #144]	; (8a0c <mem_manage_fault+0x1a0>)
    897a:	481d      	ldr	r0, [pc, #116]	; (89f0 <mem_manage_fault+0x184>)
    897c:	466b      	mov	r3, sp
    897e:	e9c3 2405 	strd	r2, r4, [r3, #20]
    8982:	461a      	mov	r2, r3
    8984:	2303      	movs	r3, #3
    8986:	f842 3f10 	str.w	r3, [r2, #16]!
    898a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    898e:	f00f fabd 	bl	17f0c <z_log_msg2_static_create.constprop.0>
    8992:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    8994:	f1b8 0f00 	cmp.w	r8, #0
    8998:	d09f      	beq.n	88da <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    899a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    899e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    89a2:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    89a6:	e798      	b.n	88da <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    89a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    89ac:	0518      	lsls	r0, r3, #20
    89ae:	d5bc      	bpl.n	892a <mem_manage_fault+0xbe>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    89b0:	4620      	mov	r0, r4
    89b2:	4631      	mov	r1, r6
    89b4:	f7ff fdd6 	bl	8564 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    89b8:	4604      	mov	r4, r0
    89ba:	b118      	cbz	r0, 89c4 <mem_manage_fault+0x158>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    89bc:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    89c0:	2402      	movs	r4, #2
    89c2:	e7b3      	b.n	892c <mem_manage_fault+0xc0>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    89c4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    89c8:	06d9      	lsls	r1, r3, #27
    89ca:	d5ae      	bpl.n	892a <mem_manage_fault+0xbe>
    89cc:	4a10      	ldr	r2, [pc, #64]	; (8a10 <mem_manage_fault+0x1a4>)
    89ce:	4911      	ldr	r1, [pc, #68]	; (8a14 <mem_manage_fault+0x1a8>)
    89d0:	4811      	ldr	r0, [pc, #68]	; (8a18 <mem_manage_fault+0x1ac>)
    89d2:	f240 1349 	movw	r3, #329	; 0x149
    89d6:	f00f f93a 	bl	17c4e <assert_print>
    89da:	4810      	ldr	r0, [pc, #64]	; (8a1c <mem_manage_fault+0x1b0>)
    89dc:	f00f f937 	bl	17c4e <assert_print>
    89e0:	480b      	ldr	r0, [pc, #44]	; (8a10 <mem_manage_fault+0x1a4>)
    89e2:	f240 1149 	movw	r1, #329	; 0x149
    89e6:	f00f f92b 	bl	17c40 <assert_post_action>
    89ea:	e79f      	b.n	892c <mem_manage_fault+0xc0>
    89ec:	0003c598 	.word	0x0003c598
    89f0:	0001c858 	.word	0x0001c858
    89f4:	e000ed00 	.word	0xe000ed00
    89f8:	0003c5ae 	.word	0x0003c5ae
    89fc:	0003c428 	.word	0x0003c428
    8a00:	0003c60f 	.word	0x0003c60f
    8a04:	0003c49c 	.word	0x0003c49c
    8a08:	0003c5e1 	.word	0x0003c5e1
    8a0c:	0003c5f9 	.word	0x0003c5f9
    8a10:	0003c62e 	.word	0x0003c62e
    8a14:	0003c668 	.word	0x0003c668
    8a18:	0003baf1 	.word	0x0003baf1
    8a1c:	0003c6b2 	.word	0x0003c6b2

00008a20 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    8a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    8a24:	4b8d      	ldr	r3, [pc, #564]	; (8c5c <z_arm_fault+0x23c>)
{
    8a26:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    8a28:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    8a2c:	af00      	add	r7, sp, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    8a2e:	f3c8 0408 	ubfx	r4, r8, #0, #9
    8a32:	2600      	movs	r6, #0
    8a34:	f386 8811 	msr	BASEPRI, r6
    8a38:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    8a3c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    8a40:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    8a44:	d10e      	bne.n	8a64 <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    8a46:	f002 030c 	and.w	r3, r2, #12
    8a4a:	2b08      	cmp	r3, #8
    8a4c:	d11b      	bne.n	8a86 <z_arm_fault+0x66>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    8a4e:	4b84      	ldr	r3, [pc, #528]	; (8c60 <z_arm_fault+0x240>)
    8a50:	61fb      	str	r3, [r7, #28]
    8a52:	4884      	ldr	r0, [pc, #528]	; (8c64 <z_arm_fault+0x244>)
    8a54:	2302      	movs	r3, #2
    8a56:	f107 0218 	add.w	r2, r7, #24
    8a5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8a5e:	61bb      	str	r3, [r7, #24]
    8a60:	f00f fa54 	bl	17f0c <z_log_msg2_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    8a64:	4a80      	ldr	r2, [pc, #512]	; (8c68 <z_arm_fault+0x248>)
    8a66:	4981      	ldr	r1, [pc, #516]	; (8c6c <z_arm_fault+0x24c>)
    8a68:	4881      	ldr	r0, [pc, #516]	; (8c70 <z_arm_fault+0x250>)
    8a6a:	f240 33fb 	movw	r3, #1019	; 0x3fb
    8a6e:	f00f f8ee 	bl	17c4e <assert_print>
    8a72:	4880      	ldr	r0, [pc, #512]	; (8c74 <z_arm_fault+0x254>)
    8a74:	f00f f8eb 	bl	17c4e <assert_print>
    8a78:	487b      	ldr	r0, [pc, #492]	; (8c68 <z_arm_fault+0x248>)
    8a7a:	f240 31fb 	movw	r1, #1019	; 0x3fb
    8a7e:	f00f f8df 	bl	17c40 <assert_post_action>
    8a82:	2500      	movs	r5, #0
    8a84:	e006      	b.n	8a94 <z_arm_fault+0x74>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    8a86:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    8a88:	bf4e      	itee	mi
    8a8a:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
    8a8c:	4605      	movpl	r5, r0
			*nested_exc = true;
    8a8e:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    8a90:	2d00      	cmp	r5, #0
    8a92:	d0e7      	beq.n	8a64 <z_arm_fault+0x44>
	*recoverable = false;
    8a94:	2300      	movs	r3, #0
    8a96:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    8a98:	1ee3      	subs	r3, r4, #3
    8a9a:	2b09      	cmp	r3, #9
    8a9c:	f200 80be 	bhi.w	8c1c <z_arm_fault+0x1fc>
    8aa0:	e8df f003 	tbb	[pc, r3]
    8aa4:	91b4b105 	.word	0x91b4b105
    8aa8:	bcbcbcbc 	.word	0xbcbcbcbc
    8aac:	b7bc      	.short	0xb7bc
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    8aae:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8c5c <z_arm_fault+0x23c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    8ab2:	4b71      	ldr	r3, [pc, #452]	; (8c78 <z_arm_fault+0x258>)
    8ab4:	486b      	ldr	r0, [pc, #428]	; (8c64 <z_arm_fault+0x244>)
    8ab6:	61fb      	str	r3, [r7, #28]
    8ab8:	f04f 0a02 	mov.w	sl, #2
    8abc:	f107 0218 	add.w	r2, r7, #24
    8ac0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8ac4:	f8c7 a018 	str.w	sl, [r7, #24]
    8ac8:	f00f fa20 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    8acc:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    8ad0:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    8ad4:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    8ad8:	46e9      	mov	r9, sp
	*recoverable = false;
    8ada:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    8ade:	d00b      	beq.n	8af8 <z_arm_fault+0xd8>
		PR_EXC("  Bus fault on vector table read");
    8ae0:	4b66      	ldr	r3, [pc, #408]	; (8c7c <z_arm_fault+0x25c>)
    8ae2:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    8ae6:	485f      	ldr	r0, [pc, #380]	; (8c64 <z_arm_fault+0x244>)
    8ae8:	f107 0218 	add.w	r2, r7, #24
    8aec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8af0:	f00f fa0c 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    8af4:	2400      	movs	r4, #0
}
    8af6:	e00d      	b.n	8b14 <z_arm_fault+0xf4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    8af8:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    8afc:	2b00      	cmp	r3, #0
    8afe:	da26      	bge.n	8b4e <z_arm_fault+0x12e>
		PR_EXC("  Debug event");
    8b00:	4b5f      	ldr	r3, [pc, #380]	; (8c80 <z_arm_fault+0x260>)
    8b02:	4858      	ldr	r0, [pc, #352]	; (8c64 <z_arm_fault+0x244>)
    8b04:	f107 0218 	add.w	r2, r7, #24
    8b08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8b0c:	e9c7 a306 	strd	sl, r3, [r7, #24]
    8b10:	f00f f9fc 	bl	17f0c <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    8b14:	79fb      	ldrb	r3, [r7, #7]
    8b16:	b9b3      	cbnz	r3, 8b46 <z_arm_fault+0x126>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    8b18:	2268      	movs	r2, #104	; 0x68
    8b1a:	4629      	mov	r1, r5
    8b1c:	f107 0008 	add.w	r0, r7, #8
    8b20:	f013 f8de 	bl	1bce0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    8b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b26:	2e00      	cmp	r6, #0
    8b28:	f000 8093 	beq.w	8c52 <z_arm_fault+0x232>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    8b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    8b30:	b922      	cbnz	r2, 8b3c <z_arm_fault+0x11c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    8b32:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    8b36:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    8b3a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    8b3c:	f107 0108 	add.w	r1, r7, #8
    8b40:	4620      	mov	r0, r4
    8b42:	f7ff faeb 	bl	811c <z_arm_fatal_error>
}
    8b46:	3774      	adds	r7, #116	; 0x74
    8b48:	46bd      	mov	sp, r7
    8b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    8b4e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    8b52:	005b      	lsls	r3, r3, #1
    8b54:	d54a      	bpl.n	8bec <z_arm_fault+0x1cc>
		PR_EXC("  Fault escalation (see below)");
    8b56:	4b4b      	ldr	r3, [pc, #300]	; (8c84 <z_arm_fault+0x264>)
    8b58:	4842      	ldr	r0, [pc, #264]	; (8c64 <z_arm_fault+0x244>)
    8b5a:	f107 0218 	add.w	r2, r7, #24
    8b5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8b62:	e9c7 a306 	strd	sl, r3, [r7, #24]
    8b66:	f00f f9d1 	bl	17f0c <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    8b6a:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    8b6c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    8b70:	f64d 7302 	movw	r3, #57090	; 0xdf02
    8b74:	429a      	cmp	r2, r3
    8b76:	d110      	bne.n	8b9a <z_arm_fault+0x17a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    8b78:	b088      	sub	sp, #32
    8b7a:	682b      	ldr	r3, [r5, #0]
    8b7c:	4942      	ldr	r1, [pc, #264]	; (8c88 <z_arm_fault+0x268>)
    8b7e:	4839      	ldr	r0, [pc, #228]	; (8c64 <z_arm_fault+0x244>)
    8b80:	466a      	mov	r2, sp
    8b82:	e9c2 1305 	strd	r1, r3, [r2, #20]
    8b86:	2303      	movs	r3, #3
    8b88:	f842 3f10 	str.w	r3, [r2, #16]!
    8b8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8b90:	f00f f9bc 	bl	17f0c <z_log_msg2_static_create.constprop.0>
    8b94:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    8b96:	682c      	ldr	r4, [r5, #0]
    8b98:	e7bc      	b.n	8b14 <z_arm_fault+0xf4>
		} else if (SCB_MMFSR != 0) {
    8b9a:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    8b9e:	b133      	cbz	r3, 8bae <z_arm_fault+0x18e>
			reason = mem_manage_fault(esf, 1, recoverable);
    8ba0:	1dfa      	adds	r2, r7, #7
    8ba2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    8ba4:	4628      	mov	r0, r5
    8ba6:	f7ff fe61 	bl	886c <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    8baa:	4604      	mov	r4, r0
		break;
    8bac:	e7b2      	b.n	8b14 <z_arm_fault+0xf4>
		} else if (SCB_BFSR != 0) {
    8bae:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    8bb2:	b123      	cbz	r3, 8bbe <z_arm_fault+0x19e>
			reason = bus_fault(esf, 1, recoverable);
    8bb4:	1df9      	adds	r1, r7, #7
    8bb6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    8bb8:	f7ff fd44 	bl	8644 <bus_fault.constprop.0>
    8bbc:	e7f5      	b.n	8baa <z_arm_fault+0x18a>
		} else if (SCB_UFSR != 0) {
    8bbe:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    8bc2:	b29b      	uxth	r3, r3
    8bc4:	b113      	cbz	r3, 8bcc <z_arm_fault+0x1ac>
		reason = usage_fault(esf);
    8bc6:	f7ff fdd5 	bl	8774 <usage_fault.constprop.0>
    8bca:	e7ee      	b.n	8baa <z_arm_fault+0x18a>
			__ASSERT(0,
    8bcc:	492f      	ldr	r1, [pc, #188]	; (8c8c <z_arm_fault+0x26c>)
    8bce:	4a26      	ldr	r2, [pc, #152]	; (8c68 <z_arm_fault+0x248>)
    8bd0:	4827      	ldr	r0, [pc, #156]	; (8c70 <z_arm_fault+0x250>)
    8bd2:	f240 23cd 	movw	r3, #717	; 0x2cd
    8bd6:	f00f f83a 	bl	17c4e <assert_print>
    8bda:	482d      	ldr	r0, [pc, #180]	; (8c90 <z_arm_fault+0x270>)
    8bdc:	f00f f837 	bl	17c4e <assert_print>
    8be0:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    8be4:	4820      	ldr	r0, [pc, #128]	; (8c68 <z_arm_fault+0x248>)
    8be6:	f00f f82b 	bl	17c40 <assert_post_action>
    8bea:	e793      	b.n	8b14 <z_arm_fault+0xf4>
    8bec:	4927      	ldr	r1, [pc, #156]	; (8c8c <z_arm_fault+0x26c>)
    8bee:	4a1e      	ldr	r2, [pc, #120]	; (8c68 <z_arm_fault+0x248>)
    8bf0:	481f      	ldr	r0, [pc, #124]	; (8c70 <z_arm_fault+0x250>)
    8bf2:	f240 23d1 	movw	r3, #721	; 0x2d1
    8bf6:	f00f f82a 	bl	17c4e <assert_print>
    8bfa:	4826      	ldr	r0, [pc, #152]	; (8c94 <z_arm_fault+0x274>)
    8bfc:	f00f f827 	bl	17c4e <assert_print>
    8c00:	f240 21d1 	movw	r1, #721	; 0x2d1
    8c04:	e7ee      	b.n	8be4 <z_arm_fault+0x1c4>
		reason = mem_manage_fault(esf, 0, recoverable);
    8c06:	1dfa      	adds	r2, r7, #7
    8c08:	2100      	movs	r1, #0
    8c0a:	e7cb      	b.n	8ba4 <z_arm_fault+0x184>
		reason = bus_fault(esf, 0, recoverable);
    8c0c:	1df9      	adds	r1, r7, #7
    8c0e:	2000      	movs	r0, #0
    8c10:	e7d2      	b.n	8bb8 <z_arm_fault+0x198>
	PR_FAULT_INFO(
    8c12:	4b21      	ldr	r3, [pc, #132]	; (8c98 <z_arm_fault+0x278>)
    8c14:	61fb      	str	r3, [r7, #28]
    8c16:	2302      	movs	r3, #2
    8c18:	61bb      	str	r3, [r7, #24]
    8c1a:	e764      	b.n	8ae6 <z_arm_fault+0xc6>
	PR_FAULT_INFO("***** %s %d) *****",
    8c1c:	4a1f      	ldr	r2, [pc, #124]	; (8c9c <z_arm_fault+0x27c>)
    8c1e:	4b20      	ldr	r3, [pc, #128]	; (8ca0 <z_arm_fault+0x280>)
    8c20:	4920      	ldr	r1, [pc, #128]	; (8ca4 <z_arm_fault+0x284>)
    8c22:	4810      	ldr	r0, [pc, #64]	; (8c64 <z_arm_fault+0x244>)
    8c24:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    8c28:	46e8      	mov	r8, sp
    8c2a:	b08a      	sub	sp, #40	; 0x28
    8c2c:	bf18      	it	ne
    8c2e:	4613      	movne	r3, r2
    8c30:	466a      	mov	r2, sp
    8c32:	e9c2 1305 	strd	r1, r3, [r2, #20]
    8c36:	2302      	movs	r3, #2
    8c38:	f882 3020 	strb.w	r3, [r2, #32]
    8c3c:	3c10      	subs	r4, #16
    8c3e:	4b1a      	ldr	r3, [pc, #104]	; (8ca8 <z_arm_fault+0x288>)
    8c40:	61d4      	str	r4, [r2, #28]
    8c42:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    8c46:	f842 3f10 	str.w	r3, [r2, #16]!
    8c4a:	f00f f95f 	bl	17f0c <z_log_msg2_static_create.constprop.0>
    8c4e:	46c5      	mov	sp, r8
    8c50:	e750      	b.n	8af4 <z_arm_fault+0xd4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    8c52:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    8c56:	f023 0301 	bic.w	r3, r3, #1
    8c5a:	e76e      	b.n	8b3a <z_arm_fault+0x11a>
    8c5c:	e000ed00 	.word	0xe000ed00
    8c60:	0003c703 	.word	0x0003c703
    8c64:	0001c858 	.word	0x0001c858
    8c68:	0003c62e 	.word	0x0003c62e
    8c6c:	0003c72e 	.word	0x0003c72e
    8c70:	0003baf1 	.word	0x0003baf1
    8c74:	0003c741 	.word	0x0003c741
    8c78:	0003c77f 	.word	0x0003c77f
    8c7c:	0003c796 	.word	0x0003c796
    8c80:	0003c7b7 	.word	0x0003c7b7
    8c84:	0003c7c5 	.word	0x0003c7c5
    8c88:	0003c7e4 	.word	0x0003c7e4
    8c8c:	0003d09f 	.word	0x0003d09f
    8c90:	0003c800 	.word	0x0003c800
    8c94:	0003c824 	.word	0x0003c824
    8c98:	0003c854 	.word	0x0003c854
    8c9c:	0003c6ea 	.word	0x0003c6ea
    8ca0:	0003c6d5 	.word	0x0003c6d5
    8ca4:	0003c878 	.word	0x0003c878
    8ca8:	01000004 	.word	0x01000004

00008cac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    8cac:	4a02      	ldr	r2, [pc, #8]	; (8cb8 <z_arm_fault_init+0xc>)
    8cae:	6953      	ldr	r3, [r2, #20]
    8cb0:	f043 0310 	orr.w	r3, r3, #16
    8cb4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    8cb6:	4770      	bx	lr
    8cb8:	e000ed00 	.word	0xe000ed00

00008cbc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    8cbc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    8cc0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    8cc4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    8cc6:	4672      	mov	r2, lr
	bl z_arm_fault
    8cc8:	f7ff feaa 	bl	8a20 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    8ccc:	bd01      	pop	{r0, pc}
    8cce:	bf00      	nop

00008cd0 <z_arm_interrupt_init>:
    8cd0:	4804      	ldr	r0, [pc, #16]	; (8ce4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    8cd2:	2300      	movs	r3, #0
    8cd4:	2120      	movs	r1, #32
    8cd6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    8cd8:	3301      	adds	r3, #1
    8cda:	2b30      	cmp	r3, #48	; 0x30
    8cdc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    8ce0:	d1f9      	bne.n	8cd6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    8ce2:	4770      	bx	lr
    8ce4:	e000e100 	.word	0xe000e100

00008ce8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    8ce8:	2000      	movs	r0, #0
    msr CONTROL, r0
    8cea:	f380 8814 	msr	CONTROL, r0
    isb
    8cee:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    8cf2:	f013 fc21 	bl	1c538 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    8cf6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    8cf8:	490d      	ldr	r1, [pc, #52]	; (8d30 <__start+0x48>)
    str r0, [r1]
    8cfa:	6008      	str	r0, [r1, #0]
    dsb
    8cfc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    8d00:	480c      	ldr	r0, [pc, #48]	; (8d34 <__start+0x4c>)
    msr msp, r0
    8d02:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    8d06:	f000 f82b 	bl	8d60 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    8d0a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    8d0c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    8d10:	4809      	ldr	r0, [pc, #36]	; (8d38 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    8d12:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    8d16:	1840      	adds	r0, r0, r1
    msr PSP, r0
    8d18:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    8d1c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    8d20:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    8d22:	4308      	orrs	r0, r1
    msr CONTROL, r0
    8d24:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    8d28:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    8d2c:	f7ff fb12 	bl	8354 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    8d30:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    8d34:	20026a00 	.word	0x20026a00
    ldr r0, =z_interrupt_stacks
    8d38:	20026c00 	.word	0x20026c00

00008d3c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    8d3c:	4907      	ldr	r1, [pc, #28]	; (8d5c <z_arm_clear_arm_mpu_config+0x20>)
    8d3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    8d42:	2300      	movs	r3, #0
	int num_regions =
    8d44:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    8d48:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    8d4a:	4293      	cmp	r3, r2
    8d4c:	d100      	bne.n	8d50 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    8d4e:	4770      	bx	lr
  MPU->RNR = rnr;
    8d50:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    8d54:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    8d58:	3301      	adds	r3, #1
    8d5a:	e7f6      	b.n	8d4a <z_arm_clear_arm_mpu_config+0xe>
    8d5c:	e000ed00 	.word	0xe000ed00

00008d60 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    8d60:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    8d62:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    8d64:	2300      	movs	r3, #0
    8d66:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    8d6a:	f7ff ffe7 	bl	8d3c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    8d6e:	4b14      	ldr	r3, [pc, #80]	; (8dc0 <z_arm_init_arch_hw_at_boot+0x60>)
    8d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    8d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    8d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    8d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    8d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    8d88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    8d8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    8d90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    8d94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    8d98:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    8d9c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    8da0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    8da4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    8da8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    8dac:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    8db0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    8db4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    8db6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8dba:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    8dbe:	bd08      	pop	{r3, pc}
    8dc0:	e000e100 	.word	0xe000e100

00008dc4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    8dc4:	4b08      	ldr	r3, [pc, #32]	; (8de8 <z_impl_k_thread_abort+0x24>)
    8dc6:	689b      	ldr	r3, [r3, #8]
    8dc8:	4283      	cmp	r3, r0
    8dca:	d10b      	bne.n	8de4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8dcc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    8dd0:	b143      	cbz	r3, 8de4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    8dd2:	4b06      	ldr	r3, [pc, #24]	; (8dec <z_impl_k_thread_abort+0x28>)
    8dd4:	685a      	ldr	r2, [r3, #4]
    8dd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    8dda:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    8ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    8de2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    8de4:	f007 b94c 	b.w	10080 <z_thread_abort>
    8de8:	200239e4 	.word	0x200239e4
    8dec:	e000ed00 	.word	0xe000ed00

00008df0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    8df0:	4b02      	ldr	r3, [pc, #8]	; (8dfc <z_arm_configure_static_mpu_regions+0xc>)
    8df2:	4a03      	ldr	r2, [pc, #12]	; (8e00 <z_arm_configure_static_mpu_regions+0x10>)
    8df4:	4803      	ldr	r0, [pc, #12]	; (8e04 <z_arm_configure_static_mpu_regions+0x14>)
    8df6:	2101      	movs	r1, #1
    8df8:	f000 b896 	b.w	8f28 <arm_core_mpu_configure_static_mpu_regions>
    8dfc:	20040000 	.word	0x20040000
    8e00:	20000000 	.word	0x20000000
    8e04:	0001d56c 	.word	0x0001d56c

00008e08 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    8e08:	b510      	push	{r4, lr}
    8e0a:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    8e0c:	f7ff fb74 	bl	84f8 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    8e10:	6e62      	ldr	r2, [r4, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    8e12:	4b06      	ldr	r3, [pc, #24]	; (8e2c <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
    8e14:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
    8e16:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    8e1a:	4a05      	ldr	r2, [pc, #20]	; (8e30 <z_arm_configure_dynamic_mpu_regions+0x28>)
    8e1c:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
    8e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    8e22:	2101      	movs	r1, #1
    8e24:	4618      	mov	r0, r3
    8e26:	f000 b8a7 	b.w	8f78 <arm_core_mpu_configure_dynamic_mpu_regions>
    8e2a:	bf00      	nop
    8e2c:	20010efc 	.word	0x20010efc
    8e30:	150b0000 	.word	0x150b0000

00008e34 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    8e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    8e36:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8ef8 <mpu_configure_regions+0xc4>
    8e3a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    8e3c:	2500      	movs	r5, #0
    8e3e:	428d      	cmp	r5, r1
    8e40:	da1a      	bge.n	8e78 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    8e42:	6844      	ldr	r4, [r0, #4]
    8e44:	2c00      	cmp	r4, #0
    8e46:	d04d      	beq.n	8ee4 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    8e48:	b1fb      	cbz	r3, 8e8a <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    8e4a:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    8e4e:	ea14 0f0e 	tst.w	r4, lr
    8e52:	d014      	beq.n	8e7e <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    8e54:	4b25      	ldr	r3, [pc, #148]	; (8eec <mpu_configure_regions+0xb8>)
    8e56:	466c      	mov	r4, sp
    8e58:	b088      	sub	sp, #32
    8e5a:	466a      	mov	r2, sp
    8e5c:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    8e60:	2303      	movs	r3, #3
    8e62:	f842 3f10 	str.w	r3, [r2, #16]!
    8e66:	4822      	ldr	r0, [pc, #136]	; (8ef0 <mpu_configure_regions+0xbc>)
    8e68:	2300      	movs	r3, #0
    8e6a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8e6e:	f7fe fd6f 	bl	7950 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    8e72:	f06f 0215 	mvn.w	r2, #21
    8e76:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    8e78:	4610      	mov	r0, r2
    8e7a:	46bd      	mov	sp, r7
    8e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    8e7e:	2c1f      	cmp	r4, #31
    8e80:	d9e8      	bls.n	8e54 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    8e82:	6806      	ldr	r6, [r0, #0]
		&&
    8e84:	ea1e 0f06 	tst.w	lr, r6
    8e88:	d1e4      	bne.n	8e54 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    8e8a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    8e8c:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8e8e:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    8e92:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    8e94:	d914      	bls.n	8ec0 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    8e96:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    8e9a:	d813      	bhi.n	8ec4 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    8e9c:	3c01      	subs	r4, #1
    8e9e:	fab4 f484 	clz	r4, r4
    8ea2:	f1c4 041f 	rsb	r4, r4, #31
    8ea6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    8ea8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8eaa:	ea4e 0404 	orr.w	r4, lr, r4
    8eae:	d90b      	bls.n	8ec8 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    8eb0:	4910      	ldr	r1, [pc, #64]	; (8ef4 <mpu_configure_regions+0xc0>)
    8eb2:	466c      	mov	r4, sp
    8eb4:	b088      	sub	sp, #32
    8eb6:	466b      	mov	r3, sp
    8eb8:	e9c3 1205 	strd	r1, r2, [r3, #20]
    8ebc:	461a      	mov	r2, r3
    8ebe:	e7cf      	b.n	8e60 <mpu_configure_regions+0x2c>
		return REGION_32B;
    8ec0:	2408      	movs	r4, #8
    8ec2:	e7f1      	b.n	8ea8 <mpu_configure_regions+0x74>
		return REGION_4G;
    8ec4:	243e      	movs	r4, #62	; 0x3e
    8ec6:	e7ef      	b.n	8ea8 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8ec8:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    8ecc:	4316      	orrs	r6, r2
    8ece:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    8ed2:	f044 0401 	orr.w	r4, r4, #1
    8ed6:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8eda:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    8ede:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    8ee0:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    8ee4:	3501      	adds	r5, #1
    8ee6:	300c      	adds	r0, #12
    8ee8:	e7a9      	b.n	8e3e <mpu_configure_regions+0xa>
    8eea:	bf00      	nop
    8eec:	0003c88f 	.word	0x0003c88f
    8ef0:	0001c850 	.word	0x0001c850
    8ef4:	0003c8b2 	.word	0x0003c8b2
    8ef8:	e000ed00 	.word	0xe000ed00

00008efc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    8efc:	4b04      	ldr	r3, [pc, #16]	; (8f10 <arm_core_mpu_enable+0x14>)
    8efe:	2205      	movs	r2, #5
    8f00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    8f04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8f08:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    8f0c:	4770      	bx	lr
    8f0e:	bf00      	nop
    8f10:	e000ed00 	.word	0xe000ed00

00008f14 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    8f14:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    8f18:	4b02      	ldr	r3, [pc, #8]	; (8f24 <arm_core_mpu_disable+0x10>)
    8f1a:	2200      	movs	r2, #0
    8f1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop
    8f24:	e000ed00 	.word	0xe000ed00

00008f28 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    8f28:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    8f2a:	4d0e      	ldr	r5, [pc, #56]	; (8f64 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    8f2c:	2301      	movs	r3, #1
    8f2e:	782a      	ldrb	r2, [r5, #0]
    8f30:	460c      	mov	r4, r1
    8f32:	f7ff ff7f 	bl	8e34 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    8f36:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    8f38:	3016      	adds	r0, #22
    8f3a:	d111      	bne.n	8f60 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    8f3c:	f240 1311 	movw	r3, #273	; 0x111
    8f40:	4a09      	ldr	r2, [pc, #36]	; (8f68 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    8f42:	490a      	ldr	r1, [pc, #40]	; (8f6c <arm_core_mpu_configure_static_mpu_regions+0x44>)
    8f44:	480a      	ldr	r0, [pc, #40]	; (8f70 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    8f46:	f00e fe82 	bl	17c4e <assert_print>
    8f4a:	4621      	mov	r1, r4
    8f4c:	4809      	ldr	r0, [pc, #36]	; (8f74 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    8f4e:	f00e fe7e 	bl	17c4e <assert_print>
			regions_num);
	}
}
    8f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    8f56:	4804      	ldr	r0, [pc, #16]	; (8f68 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    8f58:	f240 1111 	movw	r1, #273	; 0x111
    8f5c:	f00e be70 	b.w	17c40 <assert_post_action>
}
    8f60:	bd38      	pop	{r3, r4, r5, pc}
    8f62:	bf00      	nop
    8f64:	200245d8 	.word	0x200245d8
    8f68:	0003c8d8 	.word	0x0003c8d8
    8f6c:	0003d09f 	.word	0x0003d09f
    8f70:	0003baf1 	.word	0x0003baf1
    8f74:	0003c90f 	.word	0x0003c90f

00008f78 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    8f78:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    8f7a:	4a13      	ldr	r2, [pc, #76]	; (8fc8 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    8f7c:	2300      	movs	r3, #0
    8f7e:	7812      	ldrb	r2, [r2, #0]
    8f80:	460c      	mov	r4, r1
    8f82:	f7ff ff57 	bl	8e34 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    8f86:	f110 0f16 	cmn.w	r0, #22
    8f8a:	d00a      	beq.n	8fa2 <arm_core_mpu_configure_dynamic_mpu_regions+0x2a>
  MPU->RNR = rnr;
    8f8c:	4b0f      	ldr	r3, [pc, #60]	; (8fcc <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    8f8e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    8f90:	2807      	cmp	r0, #7
    8f92:	dd00      	ble.n	8f96 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    8f94:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    8f96:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    8f9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    8f9e:	3001      	adds	r0, #1
    8fa0:	e7f6      	b.n	8f90 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    8fa2:	4a0b      	ldr	r2, [pc, #44]	; (8fd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    8fa4:	490b      	ldr	r1, [pc, #44]	; (8fd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    8fa6:	480c      	ldr	r0, [pc, #48]	; (8fd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    8fa8:	f44f 7398 	mov.w	r3, #304	; 0x130
    8fac:	f00e fe4f 	bl	17c4e <assert_print>
    8fb0:	4621      	mov	r1, r4
    8fb2:	480a      	ldr	r0, [pc, #40]	; (8fdc <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    8fb4:	f00e fe4b 	bl	17c4e <assert_print>
}
    8fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    8fbc:	4804      	ldr	r0, [pc, #16]	; (8fd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    8fbe:	f44f 7198 	mov.w	r1, #304	; 0x130
    8fc2:	f00e be3d 	b.w	17c40 <assert_post_action>
    8fc6:	bf00      	nop
    8fc8:	200245d8 	.word	0x200245d8
    8fcc:	e000ed00 	.word	0xe000ed00
    8fd0:	0003c8d8 	.word	0x0003c8d8
    8fd4:	0003d09f 	.word	0x0003d09f
    8fd8:	0003baf1 	.word	0x0003baf1
    8fdc:	0003c93b 	.word	0x0003c93b

00008fe0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    8fe0:	4927      	ldr	r1, [pc, #156]	; (9080 <z_arm_mpu_init+0xa0>)
{
    8fe2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    8fe4:	680c      	ldr	r4, [r1, #0]
    8fe6:	2c08      	cmp	r4, #8
    8fe8:	d913      	bls.n	9012 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    8fea:	f44f 73a4 	mov.w	r3, #328	; 0x148
    8fee:	4a25      	ldr	r2, [pc, #148]	; (9084 <z_arm_mpu_init+0xa4>)
    8ff0:	4925      	ldr	r1, [pc, #148]	; (9088 <z_arm_mpu_init+0xa8>)
    8ff2:	4826      	ldr	r0, [pc, #152]	; (908c <z_arm_mpu_init+0xac>)
    8ff4:	f00e fe2b 	bl	17c4e <assert_print>
    8ff8:	4825      	ldr	r0, [pc, #148]	; (9090 <z_arm_mpu_init+0xb0>)
    8ffa:	2208      	movs	r2, #8
    8ffc:	4621      	mov	r1, r4
    8ffe:	f00e fe26 	bl	17c4e <assert_print>
    9002:	4820      	ldr	r0, [pc, #128]	; (9084 <z_arm_mpu_init+0xa4>)
    9004:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9008:	f00e fe1a 	bl	17c40 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    900c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    9010:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    9012:	f7ff ff7f 	bl	8f14 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9016:	6848      	ldr	r0, [r1, #4]
    9018:	491e      	ldr	r1, [pc, #120]	; (9094 <z_arm_mpu_init+0xb4>)
    901a:	2200      	movs	r2, #0
    901c:	4294      	cmp	r4, r2
    901e:	f100 000c 	add.w	r0, r0, #12
    9022:	d11a      	bne.n	905a <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    9024:	4b1c      	ldr	r3, [pc, #112]	; (9098 <z_arm_mpu_init+0xb8>)
    9026:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    9028:	f7ff ff68 	bl	8efc <arm_core_mpu_enable>
	__ASSERT(
    902c:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    9030:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9034:	2b08      	cmp	r3, #8
    9036:	d00e      	beq.n	9056 <z_arm_mpu_init+0x76>
    9038:	4918      	ldr	r1, [pc, #96]	; (909c <z_arm_mpu_init+0xbc>)
    903a:	4a12      	ldr	r2, [pc, #72]	; (9084 <z_arm_mpu_init+0xa4>)
    903c:	4813      	ldr	r0, [pc, #76]	; (908c <z_arm_mpu_init+0xac>)
    903e:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    9042:	f00e fe04 	bl	17c4e <assert_print>
    9046:	4816      	ldr	r0, [pc, #88]	; (90a0 <z_arm_mpu_init+0xc0>)
    9048:	f00e fe01 	bl	17c4e <assert_print>
    904c:	480d      	ldr	r0, [pc, #52]	; (9084 <z_arm_mpu_init+0xa4>)
    904e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    9052:	f00e fdf5 	bl	17c40 <assert_post_action>
	return 0;
    9056:	2000      	movs	r0, #0
    9058:	e7da      	b.n	9010 <z_arm_mpu_init+0x30>
    905a:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    905e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    9062:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    9066:	4313      	orrs	r3, r2
    9068:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    906c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    9070:	f850 3c04 	ldr.w	r3, [r0, #-4]
    9074:	f043 0301 	orr.w	r3, r3, #1
    9078:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    907c:	3201      	adds	r2, #1
    907e:	e7cd      	b.n	901c <z_arm_mpu_init+0x3c>
    9080:	0001d578 	.word	0x0001d578
    9084:	0003c8d8 	.word	0x0003c8d8
    9088:	0003d09f 	.word	0x0003d09f
    908c:	0003baf1 	.word	0x0003baf1
    9090:	0003c968 	.word	0x0003c968
    9094:	e000ed00 	.word	0xe000ed00
    9098:	200245d8 	.word	0x200245d8
    909c:	0003c99c 	.word	0x0003c99c
    90a0:	0003c9ec 	.word	0x0003c9ec

000090a4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    90a4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    90a6:	4b0b      	ldr	r3, [pc, #44]	; (90d4 <malloc_prepare+0x30>)
    90a8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    90ac:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    90b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    90b4:	d20c      	bcs.n	90d0 <malloc_prepare+0x2c>
    90b6:	4908      	ldr	r1, [pc, #32]	; (90d8 <malloc_prepare+0x34>)
    90b8:	4a08      	ldr	r2, [pc, #32]	; (90dc <malloc_prepare+0x38>)
    90ba:	4809      	ldr	r0, [pc, #36]	; (90e0 <malloc_prepare+0x3c>)
    90bc:	2381      	movs	r3, #129	; 0x81
    90be:	f00e fdc6 	bl	17c4e <assert_print>
    90c2:	4808      	ldr	r0, [pc, #32]	; (90e4 <malloc_prepare+0x40>)
    90c4:	f00e fdc3 	bl	17c4e <assert_print>
    90c8:	4804      	ldr	r0, [pc, #16]	; (90dc <malloc_prepare+0x38>)
    90ca:	2181      	movs	r1, #129	; 0x81
    90cc:	f00e fdb8 	bl	17c40 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    90d0:	2000      	movs	r0, #0
    90d2:	bd08      	pop	{r3, pc}
    90d4:	200308a0 	.word	0x200308a0
    90d8:	0003ca3d 	.word	0x0003ca3d
    90dc:	0003ca0d 	.word	0x0003ca0d
    90e0:	0003baf1 	.word	0x0003baf1
    90e4:	0003ca84 	.word	0x0003ca84

000090e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    90e8:	4b01      	ldr	r3, [pc, #4]	; (90f0 <__stdout_hook_install+0x8>)
    90ea:	6018      	str	r0, [r3, #0]
}
    90ec:	4770      	bx	lr
    90ee:	bf00      	nop
    90f0:	20000030 	.word	0x20000030

000090f4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    90f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    90f6:	4f08      	ldr	r7, [pc, #32]	; (9118 <z_impl_zephyr_read_stdin+0x24>)
{
    90f8:	4606      	mov	r6, r0
    90fa:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    90fc:	2400      	movs	r4, #0
    90fe:	42ac      	cmp	r4, r5
    9100:	da08      	bge.n	9114 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    9102:	683b      	ldr	r3, [r7, #0]
    9104:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    9106:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    9108:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    910a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    910e:	d001      	beq.n	9114 <z_impl_zephyr_read_stdin+0x20>
    9110:	280d      	cmp	r0, #13
    9112:	d1f4      	bne.n	90fe <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    9114:	4620      	mov	r0, r4
    9116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9118:	2000002c 	.word	0x2000002c

0000911c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    911e:	4f0a      	ldr	r7, [pc, #40]	; (9148 <z_impl_zephyr_write_stdout+0x2c>)
    9120:	460d      	mov	r5, r1
    9122:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    9124:	f1c0 0401 	rsb	r4, r0, #1
    9128:	19a3      	adds	r3, r4, r6
    912a:	429d      	cmp	r5, r3
    912c:	dc01      	bgt.n	9132 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    912e:	4628      	mov	r0, r5
    9130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    9132:	7873      	ldrb	r3, [r6, #1]
    9134:	2b0a      	cmp	r3, #10
    9136:	d102      	bne.n	913e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    9138:	683b      	ldr	r3, [r7, #0]
    913a:	200d      	movs	r0, #13
    913c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    913e:	683b      	ldr	r3, [r7, #0]
    9140:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    9144:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    9146:	e7ef      	b.n	9128 <z_impl_zephyr_write_stdout+0xc>
    9148:	20000030 	.word	0x20000030

0000914c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    914c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    914e:	4802      	ldr	r0, [pc, #8]	; (9158 <_exit+0xc>)
    9150:	2105      	movs	r1, #5
    9152:	f7ff ffe3 	bl	911c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    9156:	e7fe      	b.n	9156 <_exit+0xa>
    9158:	0003cb0b 	.word	0x0003cb0b

0000915c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    915c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    915e:	4c07      	ldr	r4, [pc, #28]	; (917c <_sbrk+0x20>)
    9160:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    9162:	18c2      	adds	r2, r0, r3
    9164:	4806      	ldr	r0, [pc, #24]	; (9180 <_sbrk+0x24>)
    9166:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    916a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    916e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    9170:	bf3a      	itte	cc
    9172:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    9174:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    9176:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    917a:	bd10      	pop	{r4, pc}
    917c:	20010f08 	.word	0x20010f08
    9180:	200308a0 	.word	0x200308a0

00009184 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    9184:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    9186:	4604      	mov	r4, r0
    9188:	b958      	cbnz	r0, 91a2 <__retarget_lock_init_recursive+0x1e>
    918a:	4912      	ldr	r1, [pc, #72]	; (91d4 <__retarget_lock_init_recursive+0x50>)
    918c:	4812      	ldr	r0, [pc, #72]	; (91d8 <__retarget_lock_init_recursive+0x54>)
    918e:	4a13      	ldr	r2, [pc, #76]	; (91dc <__retarget_lock_init_recursive+0x58>)
    9190:	f240 1377 	movw	r3, #375	; 0x177
    9194:	f00e fd5b 	bl	17c4e <assert_print>
    9198:	4810      	ldr	r0, [pc, #64]	; (91dc <__retarget_lock_init_recursive+0x58>)
    919a:	f240 1177 	movw	r1, #375	; 0x177
    919e:	f00e fd4f 	bl	17c40 <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    91a2:	2014      	movs	r0, #20
    91a4:	f00c fd88 	bl	15cb8 <malloc>
    91a8:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    91aa:	b970      	cbnz	r0, 91ca <__retarget_lock_init_recursive+0x46>
    91ac:	490c      	ldr	r1, [pc, #48]	; (91e0 <__retarget_lock_init_recursive+0x5c>)
    91ae:	4a0b      	ldr	r2, [pc, #44]	; (91dc <__retarget_lock_init_recursive+0x58>)
    91b0:	4809      	ldr	r0, [pc, #36]	; (91d8 <__retarget_lock_init_recursive+0x54>)
    91b2:	f240 137f 	movw	r3, #383	; 0x17f
    91b6:	f00e fd4a 	bl	17c4e <assert_print>
    91ba:	480a      	ldr	r0, [pc, #40]	; (91e4 <__retarget_lock_init_recursive+0x60>)
    91bc:	f00e fd47 	bl	17c4e <assert_print>
    91c0:	4806      	ldr	r0, [pc, #24]	; (91dc <__retarget_lock_init_recursive+0x58>)
    91c2:	f240 117f 	movw	r1, #383	; 0x17f
    91c6:	f00e fd3b 	bl	17c40 <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
    91ca:	6820      	ldr	r0, [r4, #0]
}
    91cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    91d0:	f00f bc18 	b.w	18a04 <z_impl_k_mutex_init>
    91d4:	0003cb12 	.word	0x0003cb12
    91d8:	0003baf1 	.word	0x0003baf1
    91dc:	0003ca0d 	.word	0x0003ca0d
    91e0:	0003cb11 	.word	0x0003cb11
    91e4:	0003cb4d 	.word	0x0003cb4d

000091e8 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    91e8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    91ea:	4604      	mov	r4, r0
    91ec:	b958      	cbnz	r0, 9206 <__retarget_lock_acquire_recursive+0x1e>
    91ee:	490a      	ldr	r1, [pc, #40]	; (9218 <__retarget_lock_acquire_recursive+0x30>)
    91f0:	480a      	ldr	r0, [pc, #40]	; (921c <__retarget_lock_acquire_recursive+0x34>)
    91f2:	4a0b      	ldr	r2, [pc, #44]	; (9220 <__retarget_lock_acquire_recursive+0x38>)
    91f4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    91f8:	f00e fd29 	bl	17c4e <assert_print>
    91fc:	4808      	ldr	r0, [pc, #32]	; (9220 <__retarget_lock_acquire_recursive+0x38>)
    91fe:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    9202:	f00e fd1d 	bl	17c40 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
    9206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    920a:	4620      	mov	r0, r4
    920c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    9210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9214:	f005 ba90 	b.w	e738 <z_impl_k_mutex_lock>
    9218:	0003cb12 	.word	0x0003cb12
    921c:	0003baf1 	.word	0x0003baf1
    9220:	0003ca0d 	.word	0x0003ca0d

00009224 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    9224:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    9226:	4604      	mov	r4, r0
    9228:	b958      	cbnz	r0, 9242 <__retarget_lock_release_recursive+0x1e>
    922a:	4908      	ldr	r1, [pc, #32]	; (924c <__retarget_lock_release_recursive+0x28>)
    922c:	4808      	ldr	r0, [pc, #32]	; (9250 <__retarget_lock_release_recursive+0x2c>)
    922e:	4a09      	ldr	r2, [pc, #36]	; (9254 <__retarget_lock_release_recursive+0x30>)
    9230:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    9234:	f00e fd0b 	bl	17c4e <assert_print>
    9238:	4806      	ldr	r0, [pc, #24]	; (9254 <__retarget_lock_release_recursive+0x30>)
    923a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    923e:	f00e fcff 	bl	17c40 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
    9242:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
    9244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9248:	f005 bb70 	b.w	e92c <z_impl_k_mutex_unlock>
    924c:	0003cb12 	.word	0x0003cb12
    9250:	0003baf1 	.word	0x0003baf1
    9254:	0003ca0d 	.word	0x0003ca0d

00009258 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    9258:	b508      	push	{r3, lr}
    925a:	211d      	movs	r1, #29
    925c:	4804      	ldr	r0, [pc, #16]	; (9270 <__chk_fail+0x18>)
    925e:	f7ff ff5d 	bl	911c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    9262:	4040      	eors	r0, r0
    9264:	f380 8811 	msr	BASEPRI, r0
    9268:	f04f 0003 	mov.w	r0, #3
    926c:	df02      	svc	2
	CODE_UNREACHABLE;
    926e:	bf00      	nop
    9270:	0003cb70 	.word	0x0003cb70

00009274 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    9274:	b510      	push	{r4, lr}
	__asm__ volatile(
    9276:	f04f 0320 	mov.w	r3, #32
    927a:	f3ef 8011 	mrs	r0, BASEPRI
    927e:	f383 8812 	msr	BASEPRI_MAX, r3
    9282:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    9286:	4a11      	ldr	r2, [pc, #68]	; (92cc <nordicsemi_nrf52_init+0x58>)
    9288:	2301      	movs	r3, #1
    928a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    928e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9292:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    9296:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    929a:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    929e:	2c08      	cmp	r4, #8
    92a0:	d108      	bne.n	92b4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    92a2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    92a6:	2905      	cmp	r1, #5
    92a8:	d804      	bhi.n	92b4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    92aa:	4c09      	ldr	r4, [pc, #36]	; (92d0 <nordicsemi_nrf52_init+0x5c>)
    92ac:	5c61      	ldrb	r1, [r4, r1]
    92ae:	b109      	cbz	r1, 92b4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    92b0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    92b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    92b8:	2201      	movs	r2, #1
    92ba:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    92be:	f380 8811 	msr	BASEPRI, r0
    92c2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    92c6:	2000      	movs	r0, #0
    92c8:	bd10      	pop	{r4, pc}
    92ca:	bf00      	nop
    92cc:	4001e000 	.word	0x4001e000
    92d0:	0003cba1 	.word	0x0003cba1

000092d4 <sys_arch_reboot>:
    *p_gpregret = val;
    92d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    92d8:	b2c0      	uxtb	r0, r0
    92da:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    92de:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    92e2:	4905      	ldr	r1, [pc, #20]	; (92f8 <sys_arch_reboot+0x24>)
    92e4:	4b05      	ldr	r3, [pc, #20]	; (92fc <sys_arch_reboot+0x28>)
    92e6:	68ca      	ldr	r2, [r1, #12]
    92e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    92ec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    92ee:	60cb      	str	r3, [r1, #12]
    92f0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    92f4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    92f6:	e7fd      	b.n	92f4 <sys_arch_reboot+0x20>
    92f8:	e000ed00 	.word	0xe000ed00
    92fc:	05fa0004 	.word	0x05fa0004

00009300 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    9300:	b120      	cbz	r0, 930c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    9302:	4b03      	ldr	r3, [pc, #12]	; (9310 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    9304:	0180      	lsls	r0, r0, #6
    9306:	f043 0301 	orr.w	r3, r3, #1
    930a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    930c:	4770      	bx	lr
    930e:	bf00      	nop
    9310:	0001c960 	.word	0x0001c960

00009314 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    9314:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9316:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    9318:	490a      	ldr	r1, [pc, #40]	; (9344 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    931a:	4a0b      	ldr	r2, [pc, #44]	; (9348 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    931c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    931e:	2340      	movs	r3, #64	; 0x40
    9320:	9300      	str	r3, [sp, #0]
    9322:	1149      	asrs	r1, r1, #5
{
    9324:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9326:	4623      	mov	r3, r4
    9328:	4808      	ldr	r0, [pc, #32]	; (934c <onoff_start+0x38>)
    932a:	f00e fe39 	bl	17fa0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    932e:	1e01      	subs	r1, r0, #0
    9330:	da05      	bge.n	933e <onoff_start+0x2a>
		notify(mgr, err);
    9332:	4628      	mov	r0, r5
    9334:	4623      	mov	r3, r4
	}
}
    9336:	b003      	add	sp, #12
    9338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    933c:	4718      	bx	r3
}
    933e:	b003      	add	sp, #12
    9340:	bd30      	pop	{r4, r5, pc}
    9342:	bf00      	nop
    9344:	20010f1c 	.word	0x20010f1c
    9348:	0001800d 	.word	0x0001800d
    934c:	0001c5dc 	.word	0x0001c5dc

00009350 <get_status>:
{
    9350:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    9352:	b2cc      	uxtb	r4, r1
    9354:	2c01      	cmp	r4, #1
{
    9356:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    9358:	d909      	bls.n	936e <get_status+0x1e>
    935a:	4909      	ldr	r1, [pc, #36]	; (9380 <get_status+0x30>)
    935c:	4809      	ldr	r0, [pc, #36]	; (9384 <get_status+0x34>)
    935e:	4a0a      	ldr	r2, [pc, #40]	; (9388 <get_status+0x38>)
    9360:	2379      	movs	r3, #121	; 0x79
    9362:	f00e fc74 	bl	17c4e <assert_print>
    9366:	4808      	ldr	r0, [pc, #32]	; (9388 <get_status+0x38>)
    9368:	2179      	movs	r1, #121	; 0x79
    936a:	f00e fc69 	bl	17c40 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    936e:	6929      	ldr	r1, [r5, #16]
    9370:	230c      	movs	r3, #12
    9372:	fb04 1403 	mla	r4, r4, r3, r1
    9376:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    9378:	f000 0007 	and.w	r0, r0, #7
    937c:	bd38      	pop	{r3, r4, r5, pc}
    937e:	bf00      	nop
    9380:	0003cbe4 	.word	0x0003cbe4
    9384:	0003baf1 	.word	0x0003baf1
    9388:	0003cba7 	.word	0x0003cba7

0000938c <stop>:
{
    938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    938e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    9390:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    9392:	6906      	ldr	r6, [r0, #16]
{
    9394:	4605      	mov	r5, r0
    9396:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    9398:	d90b      	bls.n	93b2 <stop+0x26>
    939a:	4919      	ldr	r1, [pc, #100]	; (9400 <stop+0x74>)
    939c:	4819      	ldr	r0, [pc, #100]	; (9404 <stop+0x78>)
    939e:	4a1a      	ldr	r2, [pc, #104]	; (9408 <stop+0x7c>)
    93a0:	f240 134d 	movw	r3, #333	; 0x14d
    93a4:	f00e fc53 	bl	17c4e <assert_print>
    93a8:	4817      	ldr	r0, [pc, #92]	; (9408 <stop+0x7c>)
    93aa:	f240 114d 	movw	r1, #333	; 0x14d
    93ae:	f00e fc47 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    93b2:	f04f 0320 	mov.w	r3, #32
    93b6:	f3ef 8111 	mrs	r1, BASEPRI
    93ba:	f383 8812 	msr	BASEPRI_MAX, r3
    93be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    93c2:	220c      	movs	r2, #12
    93c4:	fb02 6304 	mla	r3, r2, r4, r6
    93c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    93ca:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    93ce:	d001      	beq.n	93d4 <stop+0x48>
    93d0:	429f      	cmp	r7, r3
    93d2:	d111      	bne.n	93f8 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    93d4:	fb02 6604 	mla	r6, r2, r4, r6
    93d8:	2301      	movs	r3, #1
    93da:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    93dc:	2000      	movs	r0, #0
	__asm__ volatile(
    93de:	f381 8811 	msr	BASEPRI, r1
    93e2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    93e6:	b930      	cbnz	r0, 93f6 <stop+0x6a>
	get_sub_config(dev, type)->stop();
    93e8:	6869      	ldr	r1, [r5, #4]
    93ea:	230c      	movs	r3, #12
    93ec:	fb03 1404 	mla	r4, r3, r4, r1
    93f0:	6863      	ldr	r3, [r4, #4]
    93f2:	4798      	blx	r3
	return 0;
    93f4:	2000      	movs	r0, #0
}
    93f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    93f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    93fc:	e7ef      	b.n	93de <stop+0x52>
    93fe:	bf00      	nop
    9400:	0003cbe4 	.word	0x0003cbe4
    9404:	0003baf1 	.word	0x0003baf1
    9408:	0003cba7 	.word	0x0003cba7

0000940c <onoff_stop>:
{
    940c:	b570      	push	{r4, r5, r6, lr}
    940e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    9410:	4906      	ldr	r1, [pc, #24]	; (942c <onoff_stop+0x20>)
    9412:	1a41      	subs	r1, r0, r1
{
    9414:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9416:	1149      	asrs	r1, r1, #5
    9418:	4805      	ldr	r0, [pc, #20]	; (9430 <onoff_stop+0x24>)
    941a:	2240      	movs	r2, #64	; 0x40
    941c:	f7ff ffb6 	bl	938c <stop>
	notify(mgr, res);
    9420:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9422:	4601      	mov	r1, r0
	notify(mgr, res);
    9424:	4620      	mov	r0, r4
}
    9426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    942a:	4718      	bx	r3
    942c:	20010f1c 	.word	0x20010f1c
    9430:	0001c5dc 	.word	0x0001c5dc

00009434 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9434:	2200      	movs	r2, #0
{
    9436:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9438:	2101      	movs	r1, #1
{
    943a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    943c:	4610      	mov	r0, r2
    943e:	f7fe ff51 	bl	82e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    9442:	480f      	ldr	r0, [pc, #60]	; (9480 <clk_init+0x4c>)
    9444:	f003 fb5a 	bl	cafc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    9448:	4b0e      	ldr	r3, [pc, #56]	; (9484 <clk_init+0x50>)
    944a:	4298      	cmp	r0, r3
    944c:	d115      	bne.n	947a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    944e:	f003 fb7b 	bl	cb48 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    9452:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    9454:	490c      	ldr	r1, [pc, #48]	; (9488 <clk_init+0x54>)
    9456:	4630      	mov	r0, r6
    9458:	f00e fb61 	bl	17b1e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    945c:	2800      	cmp	r0, #0
    945e:	db0b      	blt.n	9478 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    9460:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9462:	4909      	ldr	r1, [pc, #36]	; (9488 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9464:	2501      	movs	r5, #1
    9466:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9468:	f104 0020 	add.w	r0, r4, #32
    946c:	f00e fb57 	bl	17b1e <onoff_manager_init>
		if (err < 0) {
    9470:	2800      	cmp	r0, #0
    9472:	db01      	blt.n	9478 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9474:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    9476:	2000      	movs	r0, #0
}
    9478:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    947a:	f06f 0004 	mvn.w	r0, #4
    947e:	e7fb      	b.n	9478 <clk_init+0x44>
    9480:	000094c9 	.word	0x000094c9
    9484:	0bad0000 	.word	0x0bad0000
    9488:	0001d5c8 	.word	0x0001d5c8

0000948c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    948c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    948e:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    9490:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    9492:	480b      	ldr	r0, [pc, #44]	; (94c0 <clkstarted_handle.constprop.0+0x34>)
    9494:	434b      	muls	r3, r1
    9496:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    9498:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    949c:	2600      	movs	r6, #0
	set_on_state(&sub_data->flags);
    949e:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    94a0:	6426      	str	r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    94a2:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    94a4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    94a6:	f00e fd68 	bl	17f7a <set_on_state>
	if (callback) {
    94aa:	b135      	cbz	r5, 94ba <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    94ac:	9a01      	ldr	r2, [sp, #4]
    94ae:	4805      	ldr	r0, [pc, #20]	; (94c4 <clkstarted_handle.constprop.0+0x38>)
    94b0:	462b      	mov	r3, r5
}
    94b2:	b002      	add	sp, #8
    94b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    94b8:	4718      	bx	r3
}
    94ba:	b002      	add	sp, #8
    94bc:	bd70      	pop	{r4, r5, r6, pc}
    94be:	bf00      	nop
    94c0:	20010f1c 	.word	0x20010f1c
    94c4:	0001c5dc 	.word	0x0001c5dc

000094c8 <clock_event_handler>:
	switch (event) {
    94c8:	2801      	cmp	r0, #1
{
    94ca:	b508      	push	{r3, lr}
	switch (event) {
    94cc:	d006      	beq.n	94dc <clock_event_handler+0x14>
    94ce:	2803      	cmp	r0, #3
    94d0:	d008      	beq.n	94e4 <clock_event_handler+0x1c>
    94d2:	b9a8      	cbnz	r0, 9500 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    94d4:	4b10      	ldr	r3, [pc, #64]	; (9518 <clock_event_handler+0x50>)
    94d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    94d8:	075b      	lsls	r3, r3, #29
    94da:	d11b      	bne.n	9514 <clock_event_handler+0x4c>
}
    94dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    94e0:	f7ff bfd4 	b.w	948c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    94e4:	490d      	ldr	r1, [pc, #52]	; (951c <clock_event_handler+0x54>)
    94e6:	4a0e      	ldr	r2, [pc, #56]	; (9520 <clock_event_handler+0x58>)
    94e8:	480e      	ldr	r0, [pc, #56]	; (9524 <clock_event_handler+0x5c>)
    94ea:	f240 235e 	movw	r3, #606	; 0x25e
    94ee:	f00e fbae 	bl	17c4e <assert_print>
    94f2:	f240 215e 	movw	r1, #606	; 0x25e
}
    94f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    94fa:	4809      	ldr	r0, [pc, #36]	; (9520 <clock_event_handler+0x58>)
    94fc:	f00e bba0 	b.w	17c40 <assert_post_action>
    9500:	4906      	ldr	r1, [pc, #24]	; (951c <clock_event_handler+0x54>)
    9502:	4a07      	ldr	r2, [pc, #28]	; (9520 <clock_event_handler+0x58>)
    9504:	4807      	ldr	r0, [pc, #28]	; (9524 <clock_event_handler+0x5c>)
    9506:	f240 2362 	movw	r3, #610	; 0x262
    950a:	f00e fba0 	bl	17c4e <assert_print>
    950e:	f240 2162 	movw	r1, #610	; 0x262
    9512:	e7f0      	b.n	94f6 <clock_event_handler+0x2e>
}
    9514:	bd08      	pop	{r3, pc}
    9516:	bf00      	nop
    9518:	20010f1c 	.word	0x20010f1c
    951c:	0003d09f 	.word	0x0003d09f
    9520:	0003cba7 	.word	0x0003cba7
    9524:	0003baf1 	.word	0x0003baf1

00009528 <generic_hfclk_start>:
{
    9528:	b508      	push	{r3, lr}
	__asm__ volatile(
    952a:	f04f 0320 	mov.w	r3, #32
    952e:	f3ef 8111 	mrs	r1, BASEPRI
    9532:	f383 8812 	msr	BASEPRI_MAX, r3
    9536:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    953a:	4a12      	ldr	r2, [pc, #72]	; (9584 <generic_hfclk_start+0x5c>)
    953c:	6813      	ldr	r3, [r2, #0]
    953e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    9542:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    9546:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    9548:	d00c      	beq.n	9564 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    954a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    954e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9552:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    9556:	f013 0301 	ands.w	r3, r3, #1
    955a:	d003      	beq.n	9564 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    955c:	480a      	ldr	r0, [pc, #40]	; (9588 <generic_hfclk_start+0x60>)
    955e:	f00e fd0c 	bl	17f7a <set_on_state>
			already_started = true;
    9562:	2301      	movs	r3, #1
	__asm__ volatile(
    9564:	f381 8811 	msr	BASEPRI, r1
    9568:	f3bf 8f6f 	isb	sy
	if (already_started) {
    956c:	b123      	cbz	r3, 9578 <generic_hfclk_start+0x50>
}
    956e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    9572:	2000      	movs	r0, #0
    9574:	f7ff bf8a 	b.w	948c <clkstarted_handle.constprop.0>
}
    9578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    957c:	2001      	movs	r0, #1
    957e:	f003 bb07 	b.w	cb90 <nrfx_clock_start>
    9582:	bf00      	nop
    9584:	20010f74 	.word	0x20010f74
    9588:	20010f64 	.word	0x20010f64

0000958c <api_blocking_start>:
{
    958c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    958e:	2200      	movs	r2, #0
    9590:	2301      	movs	r3, #1
    9592:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9596:	4a09      	ldr	r2, [pc, #36]	; (95bc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9598:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    959c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    959e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    95a2:	f00e fd2c 	bl	17ffe <api_start>
	if (err < 0) {
    95a6:	2800      	cmp	r0, #0
    95a8:	db05      	blt.n	95b6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    95aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    95ae:	2300      	movs	r3, #0
    95b0:	4668      	mov	r0, sp
    95b2:	f005 fabd 	bl	eb30 <z_impl_k_sem_take>
}
    95b6:	b005      	add	sp, #20
    95b8:	f85d fb04 	ldr.w	pc, [sp], #4
    95bc:	0001802b 	.word	0x0001802b

000095c0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    95c0:	4b09      	ldr	r3, [pc, #36]	; (95e8 <generic_hfclk_stop+0x28>)
    95c2:	f3bf 8f5b 	dmb	ish
    95c6:	e853 2f00 	ldrex	r2, [r3]
    95ca:	f022 0102 	bic.w	r1, r2, #2
    95ce:	e843 1000 	strex	r0, r1, [r3]
    95d2:	2800      	cmp	r0, #0
    95d4:	d1f7      	bne.n	95c6 <generic_hfclk_stop+0x6>
    95d6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    95da:	07d3      	lsls	r3, r2, #31
    95dc:	d402      	bmi.n	95e4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    95de:	2001      	movs	r0, #1
    95e0:	f003 bb3a 	b.w	cc58 <nrfx_clock_stop>
}
    95e4:	4770      	bx	lr
    95e6:	bf00      	nop
    95e8:	20010f74 	.word	0x20010f74

000095ec <z_nrf_clock_control_get_onoff>:
}
    95ec:	4b02      	ldr	r3, [pc, #8]	; (95f8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    95ee:	b2c0      	uxtb	r0, r0
}
    95f0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    95f4:	4770      	bx	lr
    95f6:	bf00      	nop
    95f8:	20010f1c 	.word	0x20010f1c

000095fc <z_nrf_clock_control_lf_on>:
{
    95fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9600:	4947      	ldr	r1, [pc, #284]	; (9720 <z_nrf_clock_control_lf_on+0x124>)
    9602:	f3bf 8f5b 	dmb	ish
    9606:	4606      	mov	r6, r0
    9608:	2201      	movs	r2, #1
    960a:	e851 3f00 	ldrex	r3, [r1]
    960e:	e841 2000 	strex	r0, r2, [r1]
    9612:	2800      	cmp	r0, #0
    9614:	d1f9      	bne.n	960a <z_nrf_clock_control_lf_on+0xe>
    9616:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    961a:	b9a3      	cbnz	r3, 9646 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    961c:	4941      	ldr	r1, [pc, #260]	; (9724 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    961e:	4842      	ldr	r0, [pc, #264]	; (9728 <z_nrf_clock_control_lf_on+0x12c>)
    9620:	604b      	str	r3, [r1, #4]
    9622:	60cb      	str	r3, [r1, #12]
    9624:	608a      	str	r2, [r1, #8]
    9626:	f7fd f8a5 	bl	6774 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    962a:	2800      	cmp	r0, #0
    962c:	da0b      	bge.n	9646 <z_nrf_clock_control_lf_on+0x4a>
    962e:	493f      	ldr	r1, [pc, #252]	; (972c <z_nrf_clock_control_lf_on+0x130>)
    9630:	483f      	ldr	r0, [pc, #252]	; (9730 <z_nrf_clock_control_lf_on+0x134>)
    9632:	4a40      	ldr	r2, [pc, #256]	; (9734 <z_nrf_clock_control_lf_on+0x138>)
    9634:	f44f 7308 	mov.w	r3, #544	; 0x220
    9638:	f00e fb09 	bl	17c4e <assert_print>
    963c:	483d      	ldr	r0, [pc, #244]	; (9734 <z_nrf_clock_control_lf_on+0x138>)
    963e:	f44f 7108 	mov.w	r1, #544	; 0x220
    9642:	f00e fafd 	bl	17c40 <assert_post_action>
	switch (start_mode) {
    9646:	b396      	cbz	r6, 96ae <z_nrf_clock_control_lf_on+0xb2>
    9648:	1e73      	subs	r3, r6, #1
    964a:	2b01      	cmp	r3, #1
    964c:	d853      	bhi.n	96f6 <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    964e:	2e01      	cmp	r6, #1
    9650:	d107      	bne.n	9662 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9656:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    965a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    965e:	2b01      	cmp	r3, #1
    9660:	d025      	beq.n	96ae <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9662:	f00f f9a3 	bl	189ac <k_is_in_isr>
    9666:	4604      	mov	r4, r0
    9668:	b918      	cbnz	r0, 9672 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    966a:	4b33      	ldr	r3, [pc, #204]	; (9738 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    966c:	781b      	ldrb	r3, [r3, #0]
    966e:	2b00      	cmp	r3, #0
    9670:	d14f      	bne.n	9712 <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    9672:	f04f 0320 	mov.w	r3, #32
    9676:	f3ef 8711 	mrs	r7, BASEPRI
    967a:	f383 8812 	msr	BASEPRI_MAX, r3
    967e:	f3bf 8f6f 	isb	sy
    9682:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9684:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9740 <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9688:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    968c:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9690:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    9694:	03d2      	lsls	r2, r2, #15
    9696:	d50c      	bpl.n	96b2 <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9698:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    969c:	2b01      	cmp	r3, #1
    969e:	d001      	beq.n	96a4 <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    96a0:	2e01      	cmp	r6, #1
    96a2:	d106      	bne.n	96b2 <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    96a4:	b30c      	cbz	r4, 96ea <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    96a6:	f387 8811 	msr	BASEPRI, r7
    96aa:	f3bf 8f6f 	isb	sy
}
    96ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    96b2:	b1ac      	cbz	r4, 96e0 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    96b4:	4638      	mov	r0, r7
    96b6:	f7fe fd27 	bl	8108 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    96ba:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    96be:	2b00      	cmp	r3, #0
    96c0:	d1e4      	bne.n	968c <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    96c2:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    96c6:	2a00      	cmp	r2, #0
    96c8:	d0e0      	beq.n	968c <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    96ca:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    96ce:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    96d2:	2301      	movs	r3, #1
    96d4:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    96d8:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    96dc:	60ab      	str	r3, [r5, #8]
}
    96de:	e7d5      	b.n	968c <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    96e0:	2100      	movs	r1, #0
    96e2:	2021      	movs	r0, #33	; 0x21
    96e4:	f006 fc8e 	bl	10004 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    96e8:	e7e7      	b.n	96ba <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    96ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    96ee:	2202      	movs	r2, #2
    96f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    96f4:	e7db      	b.n	96ae <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    96f6:	4911      	ldr	r1, [pc, #68]	; (973c <z_nrf_clock_control_lf_on+0x140>)
    96f8:	480d      	ldr	r0, [pc, #52]	; (9730 <z_nrf_clock_control_lf_on+0x134>)
    96fa:	4a0e      	ldr	r2, [pc, #56]	; (9734 <z_nrf_clock_control_lf_on+0x138>)
    96fc:	f240 2332 	movw	r3, #562	; 0x232
    9700:	f00e faa5 	bl	17c4e <assert_print>
}
    9704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    9708:	480a      	ldr	r0, [pc, #40]	; (9734 <z_nrf_clock_control_lf_on+0x138>)
    970a:	f240 2132 	movw	r1, #562	; 0x232
    970e:	f00e ba97 	b.w	17c40 <assert_post_action>
    p_reg->INTENCLR = mask;
    9712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9716:	2202      	movs	r2, #2
    9718:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    971c:	4607      	mov	r7, r0
}
    971e:	e7b1      	b.n	9684 <z_nrf_clock_control_lf_on+0x88>
    9720:	20010f78 	.word	0x20010f78
    9724:	20010f0c 	.word	0x20010f0c
    9728:	20010f3c 	.word	0x20010f3c
    972c:	0003c189 	.word	0x0003c189
    9730:	0003baf1 	.word	0x0003baf1
    9734:	0003cba7 	.word	0x0003cba7
    9738:	200249ec 	.word	0x200249ec
    973c:	0003d09f 	.word	0x0003d09f
    9740:	e000e100 	.word	0xe000e100

00009744 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    9744:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    9746:	4804      	ldr	r0, [pc, #16]	; (9758 <rtt_console_init+0x14>)
    9748:	f7fc fdc8 	bl	62dc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    974c:	4802      	ldr	r0, [pc, #8]	; (9758 <rtt_console_init+0x14>)
    974e:	f7ff fccb 	bl	90e8 <__stdout_hook_install>

	return 0;
}
    9752:	2000      	movs	r0, #0
    9754:	bd08      	pop	{r3, pc}
    9756:	bf00      	nop
    9758:	0000975d 	.word	0x0000975d

0000975c <rtt_console_out>:
{
    975c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    9760:	f8df 8060 	ldr.w	r8, [pc, #96]	; 97c4 <rtt_console_out+0x68>
    9764:	4e16      	ldr	r6, [pc, #88]	; (97c0 <rtt_console_out+0x64>)
	char c = (char)character;
    9766:	f88d 0007 	strb.w	r0, [sp, #7]
{
    976a:	4604      	mov	r4, r0
	char c = (char)character;
    976c:	2503      	movs	r5, #3
    976e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9776:	4640      	mov	r0, r8
    9778:	f004 ffde 	bl	e738 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    977c:	2201      	movs	r2, #1
    977e:	f10d 0107 	add.w	r1, sp, #7
    9782:	2000      	movs	r0, #0
    9784:	f004 f9e8 	bl	db58 <SEGGER_RTT_WriteNoLock>
    9788:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    978a:	4640      	mov	r0, r8
    978c:	f005 f8ce 	bl	e92c <z_impl_k_mutex_unlock>
		if (cnt) {
    9790:	b12f      	cbz	r7, 979e <rtt_console_out+0x42>
			host_present = true;
    9792:	2301      	movs	r3, #1
    9794:	7033      	strb	r3, [r6, #0]
}
    9796:	4620      	mov	r0, r4
    9798:	b002      	add	sp, #8
    979a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    979e:	7833      	ldrb	r3, [r6, #0]
    97a0:	2b00      	cmp	r3, #0
    97a2:	d0f8      	beq.n	9796 <rtt_console_out+0x3a>
			if (max_cnt) {
    97a4:	3d01      	subs	r5, #1
    97a6:	d008      	beq.n	97ba <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    97a8:	f00f f900 	bl	189ac <k_is_in_isr>
    97ac:	2800      	cmp	r0, #0
    97ae:	d1de      	bne.n	976e <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    97b0:	2100      	movs	r1, #0
    97b2:	2042      	movs	r0, #66	; 0x42
    97b4:	f006 fc26 	bl	10004 <z_impl_k_sleep>
    97b8:	e7d9      	b.n	976e <rtt_console_out+0x12>
				host_present = false;
    97ba:	7035      	strb	r5, [r6, #0]
    97bc:	e7eb      	b.n	9796 <rtt_console_out+0x3a>
    97be:	bf00      	nop
    97c0:	200245d9 	.word	0x200245d9
    97c4:	20000658 	.word	0x20000658

000097c8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    97c8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    97ca:	4b08      	ldr	r3, [pc, #32]	; (97ec <uart_console_init+0x24>)
    97cc:	4808      	ldr	r0, [pc, #32]	; (97f0 <uart_console_init+0x28>)
    97ce:	6018      	str	r0, [r3, #0]
    97d0:	f00f f8b9 	bl	18946 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    97d4:	b138      	cbz	r0, 97e6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    97d6:	4807      	ldr	r0, [pc, #28]	; (97f4 <uart_console_init+0x2c>)
    97d8:	f7ff fc86 	bl	90e8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    97dc:	4805      	ldr	r0, [pc, #20]	; (97f4 <uart_console_init+0x2c>)
    97de:	f7fc fd7d 	bl	62dc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    97e2:	2000      	movs	r0, #0
}
    97e4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    97e6:	f06f 0012 	mvn.w	r0, #18
    97ea:	e7fb      	b.n	97e4 <uart_console_init+0x1c>
    97ec:	20010f7c 	.word	0x20010f7c
    97f0:	0001c63c 	.word	0x0001c63c
    97f4:	000097f9 	.word	0x000097f9

000097f8 <console_out>:
	if ('\n' == c) {
    97f8:	280a      	cmp	r0, #10
{
    97fa:	b538      	push	{r3, r4, r5, lr}
    97fc:	4d07      	ldr	r5, [pc, #28]	; (981c <console_out+0x24>)
    97fe:	4604      	mov	r4, r0
	if ('\n' == c) {
    9800:	d104      	bne.n	980c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    9802:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    9804:	6883      	ldr	r3, [r0, #8]
    9806:	210d      	movs	r1, #13
    9808:	685b      	ldr	r3, [r3, #4]
    980a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    980c:	6828      	ldr	r0, [r5, #0]
    980e:	6883      	ldr	r3, [r0, #8]
    9810:	b2e1      	uxtb	r1, r4
    9812:	685b      	ldr	r3, [r3, #4]
    9814:	4798      	blx	r3
}
    9816:	4620      	mov	r0, r4
    9818:	bd38      	pop	{r3, r4, r5, pc}
    981a:	bf00      	nop
    981c:	20010f7c 	.word	0x20010f7c

00009820 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    9820:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    9822:	6905      	ldr	r5, [r0, #16]
{
    9824:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    9826:	460c      	mov	r4, r1
    9828:	b961      	cbnz	r1, 9844 <gpio_nrfx_manage_callback+0x24>
    982a:	4922      	ldr	r1, [pc, #136]	; (98b4 <gpio_nrfx_manage_callback+0x94>)
    982c:	4a22      	ldr	r2, [pc, #136]	; (98b8 <gpio_nrfx_manage_callback+0x98>)
    982e:	4823      	ldr	r0, [pc, #140]	; (98bc <gpio_nrfx_manage_callback+0x9c>)
    9830:	2324      	movs	r3, #36	; 0x24
    9832:	f00e fa0c 	bl	17c4e <assert_print>
    9836:	4822      	ldr	r0, [pc, #136]	; (98c0 <gpio_nrfx_manage_callback+0xa0>)
    9838:	f00e fa09 	bl	17c4e <assert_print>
    983c:	481e      	ldr	r0, [pc, #120]	; (98b8 <gpio_nrfx_manage_callback+0x98>)
    983e:	2124      	movs	r1, #36	; 0x24
    9840:	f00e f9fe 	bl	17c40 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    9844:	6863      	ldr	r3, [r4, #4]
    9846:	b963      	cbnz	r3, 9862 <gpio_nrfx_manage_callback+0x42>
    9848:	491e      	ldr	r1, [pc, #120]	; (98c4 <gpio_nrfx_manage_callback+0xa4>)
    984a:	4a1b      	ldr	r2, [pc, #108]	; (98b8 <gpio_nrfx_manage_callback+0x98>)
    984c:	481b      	ldr	r0, [pc, #108]	; (98bc <gpio_nrfx_manage_callback+0x9c>)
    984e:	2325      	movs	r3, #37	; 0x25
    9850:	f00e f9fd 	bl	17c4e <assert_print>
    9854:	481c      	ldr	r0, [pc, #112]	; (98c8 <gpio_nrfx_manage_callback+0xa8>)
    9856:	f00e f9fa 	bl	17c4e <assert_print>
    985a:	4817      	ldr	r0, [pc, #92]	; (98b8 <gpio_nrfx_manage_callback+0x98>)
    985c:	2125      	movs	r1, #37	; 0x25
    985e:	f00e f9ef 	bl	17c40 <assert_post_action>
	return list->head;
    9862:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    9864:	b15b      	cbz	r3, 987e <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9866:	2200      	movs	r2, #0
    9868:	429c      	cmp	r4, r3
    986a:	d112      	bne.n	9892 <gpio_nrfx_manage_callback+0x72>
	return node->next;
    986c:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    986e:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    9870:	b952      	cbnz	r2, 9888 <gpio_nrfx_manage_callback+0x68>
    9872:	42a1      	cmp	r1, r4
	list->head = node;
    9874:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    9876:	d100      	bne.n	987a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    9878:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    987a:	2300      	movs	r3, #0
    987c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    987e:	b96e      	cbnz	r6, 989c <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    9880:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    9882:	bd70      	pop	{r4, r5, r6, pc}
    9884:	460b      	mov	r3, r1
    9886:	e7ef      	b.n	9868 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    9888:	42a1      	cmp	r1, r4
	parent->next = child;
    988a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    988c:	bf08      	it	eq
    988e:	60aa      	streq	r2, [r5, #8]
}
    9890:	e7f3      	b.n	987a <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    9892:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9894:	461a      	mov	r2, r3
    9896:	2900      	cmp	r1, #0
    9898:	d1f4      	bne.n	9884 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    989a:	b13e      	cbz	r6, 98ac <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    989c:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    989e:	686b      	ldr	r3, [r5, #4]
    98a0:	6023      	str	r3, [r4, #0]
	list->head = node;
    98a2:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    98a4:	2800      	cmp	r0, #0
    98a6:	d1eb      	bne.n	9880 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    98a8:	60ac      	str	r4, [r5, #8]
}
    98aa:	e7ea      	b.n	9882 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    98ac:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    98b0:	e7e7      	b.n	9882 <gpio_nrfx_manage_callback+0x62>
    98b2:	bf00      	nop
    98b4:	0003cc55 	.word	0x0003cc55
    98b8:	0003cc28 	.word	0x0003cc28
    98bc:	0003baf1 	.word	0x0003baf1
    98c0:	0003cc5e 	.word	0x0003cc5e
    98c4:	0003cc6d 	.word	0x0003cc6d
    98c8:	0003cc7f 	.word	0x0003cc7f

000098cc <gpio_nrfx_pin_interrupt_configure>:
{
    98cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    98ce:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    98d0:	7b05      	ldrb	r5, [r0, #12]
    98d2:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    98d6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    98da:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    98de:	f04f 0500 	mov.w	r5, #0
    98e2:	d104      	bne.n	98ee <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    98e4:	4620      	mov	r0, r4
    98e6:	f003 fcdd 	bl	d2a4 <nrfx_gpiote_trigger_disable>
	return 0;
    98ea:	2000      	movs	r0, #0
    98ec:	e054      	b.n	9998 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    98ee:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    98f2:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    98f6:	d151      	bne.n	999c <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    98f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    98fc:	bf0c      	ite	eq
    98fe:	2304      	moveq	r3, #4
    9900:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    9902:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    9906:	6883      	ldr	r3, [r0, #8]
    9908:	fa23 f101 	lsr.w	r1, r3, r1
    990c:	f011 0101 	ands.w	r1, r1, #1
    9910:	d155      	bne.n	99be <gpio_nrfx_pin_interrupt_configure+0xf2>
    9912:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    9916:	d152      	bne.n	99be <gpio_nrfx_pin_interrupt_configure+0xf2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    9918:	0966      	lsrs	r6, r4, #5
    991a:	d04a      	beq.n	99b2 <gpio_nrfx_pin_interrupt_configure+0xe6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    991c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9920:	2e01      	cmp	r6, #1
    9922:	bf08      	it	eq
    9924:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    9926:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    992a:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    992c:	07ca      	lsls	r2, r1, #31
    992e:	d40b      	bmi.n	9948 <gpio_nrfx_pin_interrupt_configure+0x7c>
    9930:	492b      	ldr	r1, [pc, #172]	; (99e0 <gpio_nrfx_pin_interrupt_configure+0x114>)
    9932:	482c      	ldr	r0, [pc, #176]	; (99e4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    9934:	4a2c      	ldr	r2, [pc, #176]	; (99e8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    9936:	f240 2329 	movw	r3, #553	; 0x229
    993a:	f00e f988 	bl	17c4e <assert_print>
    993e:	482a      	ldr	r0, [pc, #168]	; (99e8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    9940:	f240 2129 	movw	r1, #553	; 0x229
    9944:	f00e f97c 	bl	17c40 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9948:	b16e      	cbz	r6, 9966 <gpio_nrfx_pin_interrupt_configure+0x9a>
    994a:	2e01      	cmp	r6, #1
    994c:	d034      	beq.n	99b8 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    994e:	4927      	ldr	r1, [pc, #156]	; (99ec <gpio_nrfx_pin_interrupt_configure+0x120>)
    9950:	4824      	ldr	r0, [pc, #144]	; (99e4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    9952:	4a25      	ldr	r2, [pc, #148]	; (99e8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    9954:	f240 232e 	movw	r3, #558	; 0x22e
    9958:	f00e f979 	bl	17c4e <assert_print>
    995c:	4822      	ldr	r0, [pc, #136]	; (99e8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    995e:	f240 212e 	movw	r1, #558	; 0x22e
    9962:	f00e f96d 	bl	17c40 <assert_post_action>
        case 0: return NRF_P0;
    9966:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    996a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    996e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    9972:	07db      	lsls	r3, r3, #31
    9974:	d423      	bmi.n	99be <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9976:	f10d 0507 	add.w	r5, sp, #7
    997a:	4629      	mov	r1, r5
    997c:	4620      	mov	r0, r4
    997e:	f003 fbb5 	bl	d0ec <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    9982:	4b1b      	ldr	r3, [pc, #108]	; (99f0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    9984:	4298      	cmp	r0, r3
    9986:	d119      	bne.n	99bc <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    9988:	4628      	mov	r0, r5
    998a:	f003 fc11 	bl	d1b0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    998e:	4b19      	ldr	r3, [pc, #100]	; (99f4 <gpio_nrfx_pin_interrupt_configure+0x128>)
    9990:	4298      	cmp	r0, r3
    9992:	d013      	beq.n	99bc <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    9994:	f06f 000b 	mvn.w	r0, #11
}
    9998:	b004      	add	sp, #16
    999a:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    999c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    99a0:	d005      	beq.n	99ae <gpio_nrfx_pin_interrupt_configure+0xe2>
    99a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    99a6:	bf0c      	ite	eq
    99a8:	2302      	moveq	r3, #2
    99aa:	2301      	movne	r3, #1
    99ac:	e7a9      	b.n	9902 <gpio_nrfx_pin_interrupt_configure+0x36>
    99ae:	2303      	movs	r3, #3
    99b0:	e7a7      	b.n	9902 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    99b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    99b6:	e7b6      	b.n	9926 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    99b8:	4b0f      	ldr	r3, [pc, #60]	; (99f8 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    99ba:	e7d6      	b.n	996a <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    99bc:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    99be:	2300      	movs	r3, #0
    99c0:	4619      	mov	r1, r3
    99c2:	aa02      	add	r2, sp, #8
    99c4:	4620      	mov	r0, r4
    99c6:	f003 fa69 	bl	ce9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    99ca:	4b0a      	ldr	r3, [pc, #40]	; (99f4 <gpio_nrfx_pin_interrupt_configure+0x128>)
    99cc:	4298      	cmp	r0, r3
    99ce:	d104      	bne.n	99da <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    99d0:	2101      	movs	r1, #1
    99d2:	4620      	mov	r0, r4
    99d4:	f003 fbf2 	bl	d1bc <nrfx_gpiote_trigger_enable>
    99d8:	e787      	b.n	98ea <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    99da:	f06f 0004 	mvn.w	r0, #4
    99de:	e7db      	b.n	9998 <gpio_nrfx_pin_interrupt_configure+0xcc>
    99e0:	0003ccc9 	.word	0x0003ccc9
    99e4:	0003baf1 	.word	0x0003baf1
    99e8:	0003cc96 	.word	0x0003cc96
    99ec:	0003d09f 	.word	0x0003d09f
    99f0:	0bad0004 	.word	0x0bad0004
    99f4:	0bad0000 	.word	0x0bad0000
    99f8:	50000300 	.word	0x50000300

000099fc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    99fc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    99fe:	f003 fbc7 	bl	d190 <nrfx_gpiote_is_init>
    9a02:	4604      	mov	r4, r0
    9a04:	b968      	cbnz	r0, 9a22 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    9a06:	f003 fb9b 	bl	d140 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    9a0a:	4b08      	ldr	r3, [pc, #32]	; (9a2c <gpio_nrfx_init+0x30>)
    9a0c:	4298      	cmp	r0, r3
    9a0e:	d10a      	bne.n	9a26 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    9a10:	4807      	ldr	r0, [pc, #28]	; (9a30 <gpio_nrfx_init+0x34>)
    9a12:	4621      	mov	r1, r4
    9a14:	f003 fb64 	bl	d0e0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    9a18:	4622      	mov	r2, r4
    9a1a:	2105      	movs	r1, #5
    9a1c:	2006      	movs	r0, #6
    9a1e:	f7fe fc61 	bl	82e4 <z_arm_irq_priority_set>
		return 0;
    9a22:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    9a24:	bd10      	pop	{r4, pc}
		return -EIO;
    9a26:	f06f 0004 	mvn.w	r0, #4
    9a2a:	e7fb      	b.n	9a24 <gpio_nrfx_init+0x28>
    9a2c:	0bad0000 	.word	0x0bad0000
    9a30:	00009a35 	.word	0x00009a35

00009a34 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9a34:	0943      	lsrs	r3, r0, #5
{
    9a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9a3a:	d003      	beq.n	9a44 <nrfx_gpio_handler+0x10>
    9a3c:	2b01      	cmp	r3, #1
    9a3e:	d02e      	beq.n	9a9e <nrfx_gpio_handler+0x6a>
}
    9a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9a44:	4f17      	ldr	r7, [pc, #92]	; (9aa4 <nrfx_gpio_handler+0x70>)
	gpio_fire_callbacks(list, port, BIT(pin));
    9a46:	693b      	ldr	r3, [r7, #16]
    9a48:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9a4a:	2c00      	cmp	r4, #0
    9a4c:	d0f8      	beq.n	9a40 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    9a4e:	f000 001f 	and.w	r0, r0, #31
    9a52:	2601      	movs	r6, #1
	return node->next;
    9a54:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    9a56:	f8df 8058 	ldr.w	r8, [pc, #88]	; 9ab0 <nrfx_gpio_handler+0x7c>
    9a5a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 9ab4 <nrfx_gpio_handler+0x80>
    9a5e:	f8df a058 	ldr.w	sl, [pc, #88]	; 9ab8 <nrfx_gpio_handler+0x84>
    9a62:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    9a64:	68a3      	ldr	r3, [r4, #8]
    9a66:	421e      	tst	r6, r3
    9a68:	d014      	beq.n	9a94 <nrfx_gpio_handler+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    9a6a:	6863      	ldr	r3, [r4, #4]
    9a6c:	b963      	cbnz	r3, 9a88 <nrfx_gpio_handler+0x54>
    9a6e:	4649      	mov	r1, r9
    9a70:	2345      	movs	r3, #69	; 0x45
    9a72:	4642      	mov	r2, r8
    9a74:	4650      	mov	r0, sl
    9a76:	f00e f8ea 	bl	17c4e <assert_print>
    9a7a:	480b      	ldr	r0, [pc, #44]	; (9aa8 <nrfx_gpio_handler+0x74>)
    9a7c:	f00e f8e7 	bl	17c4e <assert_print>
    9a80:	2145      	movs	r1, #69	; 0x45
    9a82:	4640      	mov	r0, r8
    9a84:	f00e f8dc 	bl	17c40 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    9a88:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    9a8c:	4621      	mov	r1, r4
    9a8e:	4032      	ands	r2, r6
    9a90:	4638      	mov	r0, r7
    9a92:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9a94:	2d00      	cmp	r5, #0
    9a96:	d0d3      	beq.n	9a40 <nrfx_gpio_handler+0xc>
    9a98:	462c      	mov	r4, r5
    9a9a:	682d      	ldr	r5, [r5, #0]
    9a9c:	e7e2      	b.n	9a64 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9a9e:	4f03      	ldr	r7, [pc, #12]	; (9aac <nrfx_gpio_handler+0x78>)
    9aa0:	e7d1      	b.n	9a46 <nrfx_gpio_handler+0x12>
    9aa2:	bf00      	nop
    9aa4:	0001c5f4 	.word	0x0001c5f4
    9aa8:	0003cc7f 	.word	0x0003cc7f
    9aac:	0001c60c 	.word	0x0001c60c
    9ab0:	0003cc28 	.word	0x0003cc28
    9ab4:	0003ccec 	.word	0x0003ccec
    9ab8:	0003baf1 	.word	0x0003baf1

00009abc <gpio_nrfx_pin_configure>:
{
    9abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    9ac0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    9ac2:	7b3b      	ldrb	r3, [r7, #12]
    9ac4:	f001 051f 	and.w	r5, r1, #31
{
    9ac8:	b085      	sub	sp, #20
    9aca:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    9acc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    9ad0:	4614      	mov	r4, r2
    9ad2:	b9ca      	cbnz	r2, 9b08 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    9ad4:	a902      	add	r1, sp, #8
    9ad6:	4628      	mov	r0, r5
    9ad8:	f003 fb08 	bl	d0ec <nrfx_gpiote_channel_get>
    9adc:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    9ade:	4628      	mov	r0, r5
    9ae0:	f003 fc0a 	bl	d2f8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    9ae4:	4b4a      	ldr	r3, [pc, #296]	; (9c10 <gpio_nrfx_pin_configure+0x154>)
    9ae6:	4298      	cmp	r0, r3
    9ae8:	d004      	beq.n	9af4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    9aea:	f06f 0004 	mvn.w	r0, #4
}
    9aee:	b005      	add	sp, #20
    9af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    9af4:	4284      	cmp	r4, r0
    9af6:	d105      	bne.n	9b04 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    9af8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9afc:	f003 fb52 	bl	d1a4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    9b00:	42a0      	cmp	r0, r4
    9b02:	d1f2      	bne.n	9aea <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    9b04:	2000      	movs	r0, #0
    9b06:	e7f2      	b.n	9aee <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    9b08:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    9b0c:	f10d 0103 	add.w	r1, sp, #3
    9b10:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    9b12:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    9b16:	f003 fae9 	bl	d0ec <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9b1a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    9b1c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9b1e:	aa02      	add	r2, sp, #8
    9b20:	4649      	mov	r1, r9
    9b22:	4628      	mov	r0, r5
    9b24:	f003 f9ba 	bl	ce9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    9b28:	4b39      	ldr	r3, [pc, #228]	; (9c10 <gpio_nrfx_pin_configure+0x154>)
    9b2a:	4298      	cmp	r0, r3
    9b2c:	d002      	beq.n	9b34 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    9b2e:	f06f 0015 	mvn.w	r0, #21
    9b32:	e7dc      	b.n	9aee <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    9b34:	4580      	cmp	r8, r0
    9b36:	d103      	bne.n	9b40 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    9b38:	f89d 0003 	ldrb.w	r0, [sp, #3]
    9b3c:	f003 fb32 	bl	d1a4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    9b40:	03a3      	lsls	r3, r4, #14
    9b42:	d551      	bpl.n	9be8 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    9b44:	f240 6306 	movw	r3, #1542	; 0x606
    9b48:	4023      	ands	r3, r4
    9b4a:	f240 2206 	movw	r2, #518	; 0x206
    9b4e:	4293      	cmp	r3, r2
    9b50:	d03b      	beq.n	9bca <gpio_nrfx_pin_configure+0x10e>
    9b52:	d80c      	bhi.n	9b6e <gpio_nrfx_pin_configure+0xb2>
    9b54:	2b06      	cmp	r3, #6
    9b56:	d015      	beq.n	9b84 <gpio_nrfx_pin_configure+0xc8>
    9b58:	d804      	bhi.n	9b64 <gpio_nrfx_pin_configure+0xa8>
    9b5a:	b19b      	cbz	r3, 9b84 <gpio_nrfx_pin_configure+0xc8>
    9b5c:	2b02      	cmp	r3, #2
    9b5e:	d1e6      	bne.n	9b2e <gpio_nrfx_pin_configure+0x72>
    9b60:	2304      	movs	r3, #4
    9b62:	e00f      	b.n	9b84 <gpio_nrfx_pin_configure+0xc8>
    9b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9b68:	d1e1      	bne.n	9b2e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    9b6a:	2301      	movs	r3, #1
    9b6c:	e00a      	b.n	9b84 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    9b6e:	f240 4202 	movw	r2, #1026	; 0x402
    9b72:	4293      	cmp	r3, r2
    9b74:	d02b      	beq.n	9bce <gpio_nrfx_pin_configure+0x112>
    9b76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    9b7a:	d02a      	beq.n	9bd2 <gpio_nrfx_pin_configure+0x116>
    9b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9b80:	d1d5      	bne.n	9b2e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    9b82:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    9b84:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    9b88:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    9b8c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    9b90:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    9b92:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    9b96:	bf54      	ite	pl
    9b98:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    9b9c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    9b9e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    9ba0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    9ba4:	d517      	bpl.n	9bd6 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	2101      	movs	r1, #1
    9baa:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    9bae:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    9bb2:	2200      	movs	r2, #0
    9bb4:	a901      	add	r1, sp, #4
    9bb6:	4628      	mov	r0, r5
    9bb8:	f003 fa1e 	bl	cff8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    9bbc:	4b14      	ldr	r3, [pc, #80]	; (9c10 <gpio_nrfx_pin_configure+0x154>)
    9bbe:	4298      	cmp	r0, r3
    9bc0:	bf14      	ite	ne
    9bc2:	f06f 0015 	mvnne.w	r0, #21
    9bc6:	2000      	moveq	r0, #0
    9bc8:	e791      	b.n	9aee <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    9bca:	2307      	movs	r3, #7
    9bcc:	e7da      	b.n	9b84 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    9bce:	2305      	movs	r3, #5
    9bd0:	e7d8      	b.n	9b84 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    9bd2:	2303      	movs	r3, #3
    9bd4:	e7d6      	b.n	9b84 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    9bd6:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    9bd8:	bf41      	itttt	mi
    9bda:	687b      	ldrmi	r3, [r7, #4]
    9bdc:	2101      	movmi	r1, #1
    9bde:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    9be2:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    9be6:	e7e4      	b.n	9bb2 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    9be8:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    9bea:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    9bee:	bf54      	ite	pl
    9bf0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    9bf4:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    9bf6:	461a      	mov	r2, r3
    9bf8:	a901      	add	r1, sp, #4
    9bfa:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    9bfc:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    9c00:	f003 f94c 	bl	ce9c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    9c04:	4b02      	ldr	r3, [pc, #8]	; (9c10 <gpio_nrfx_pin_configure+0x154>)
    9c06:	4298      	cmp	r0, r3
    9c08:	f43f af7c 	beq.w	9b04 <gpio_nrfx_pin_configure+0x48>
    9c0c:	e78f      	b.n	9b2e <gpio_nrfx_pin_configure+0x72>
    9c0e:	bf00      	nop
    9c10:	0bad0000 	.word	0x0bad0000

00009c14 <dmic_nrfx_pdm_read>:
}

static int dmic_nrfx_pdm_read(const struct device *dev,
			      uint8_t stream,
			      void **buffer, size_t *size, int32_t timeout)
{
    9c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct dmic_nrfx_pdm_drv_data *drv_data = dev->data;
    9c18:	6906      	ldr	r6, [r0, #16]
{
    9c1a:	461d      	mov	r5, r3
	int ret;

	ARG_UNUSED(stream);

	if (!drv_data->configured) {
    9c1c:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
{
    9c20:	b086      	sub	sp, #24
    9c22:	4617      	mov	r7, r2
	if (!drv_data->configured) {
    9c24:	079a      	lsls	r2, r3, #30
{
    9c26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	if (!drv_data->configured) {
    9c28:	d40f      	bmi.n	9c4a <dmic_nrfx_pdm_read+0x36>
		LOG_ERR("Device is not configured");
    9c2a:	4b1e      	ldr	r3, [pc, #120]	; (9ca4 <dmic_nrfx_pdm_read+0x90>)
    9c2c:	9305      	str	r3, [sp, #20]
    9c2e:	481e      	ldr	r0, [pc, #120]	; (9ca8 <dmic_nrfx_pdm_read+0x94>)
    9c30:	2302      	movs	r3, #2
    9c32:	aa04      	add	r2, sp, #16
    9c34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    9c38:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Device is not configured");
    9c3c:	9304      	str	r3, [sp, #16]
    9c3e:	f00e fa1e 	bl	1807e <z_log_msg2_static_create.constprop.0>

		*size = drv_data->block_size;
	}

	return ret;
}
    9c42:	4620      	mov	r0, r4
    9c44:	b006      	add	sp, #24
    9c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = k_msgq_get(&drv_data->rx_queue, buffer, SYS_TIMEOUT_MS(timeout));
    9c4a:	1c63      	adds	r3, r4, #1
    9c4c:	f106 081c 	add.w	r8, r6, #28
    9c50:	d020      	beq.n	9c94 <dmic_nrfx_pdm_read+0x80>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    9c52:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    9c56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    9c5a:	f240 30e7 	movw	r0, #999	; 0x3e7
    9c5e:	2100      	movs	r1, #0
    9c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9c64:	2300      	movs	r3, #0
    9c66:	fbc4 010c 	smlal	r0, r1, r4, ip
    9c6a:	f7f6 ff8f 	bl	b8c <__aeabi_uldivmod>
    9c6e:	4602      	mov	r2, r0
    9c70:	460b      	mov	r3, r1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    9c72:	4639      	mov	r1, r7
    9c74:	4640      	mov	r0, r8
    9c76:	f004 fcb1 	bl	e5dc <z_impl_k_msgq_get>
	if (ret != 0) {
    9c7a:	4604      	mov	r4, r0
    9c7c:	b170      	cbz	r0, 9c9c <dmic_nrfx_pdm_read+0x88>
		LOG_ERR("No audio data to be read");
    9c7e:	4b0b      	ldr	r3, [pc, #44]	; (9cac <dmic_nrfx_pdm_read+0x98>)
    9c80:	9305      	str	r3, [sp, #20]
    9c82:	4809      	ldr	r0, [pc, #36]	; (9ca8 <dmic_nrfx_pdm_read+0x94>)
    9c84:	2302      	movs	r3, #2
    9c86:	aa04      	add	r2, sp, #16
    9c88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9c8c:	9304      	str	r3, [sp, #16]
    9c8e:	f00e f9f6 	bl	1807e <z_log_msg2_static_create.constprop.0>
    9c92:	e7d6      	b.n	9c42 <dmic_nrfx_pdm_read+0x2e>
	ret = k_msgq_get(&drv_data->rx_queue, buffer, SYS_TIMEOUT_MS(timeout));
    9c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9c98:	4613      	mov	r3, r2
    9c9a:	e7ea      	b.n	9c72 <dmic_nrfx_pdm_read+0x5e>
		*size = drv_data->block_size;
    9c9c:	69b3      	ldr	r3, [r6, #24]
    9c9e:	602b      	str	r3, [r5, #0]
    9ca0:	e7cf      	b.n	9c42 <dmic_nrfx_pdm_read+0x2e>
    9ca2:	bf00      	nop
    9ca4:	0003ccff 	.word	0x0003ccff
    9ca8:	0001c828 	.word	0x0001c828
    9cac:	0003cd18 	.word	0x0003cd18

00009cb0 <start_transfer>:
{
    9cb0:	b5b0      	push	{r4, r5, r7, lr}
    9cb2:	af00      	add	r7, sp, #0
    9cb4:	4604      	mov	r4, r0
	err = nrfx_pdm_start();
    9cb6:	f003 fe17 	bl	d8e8 <nrfx_pdm_start>
	if (err == NRFX_SUCCESS) {
    9cba:	4b11      	ldr	r3, [pc, #68]	; (9d00 <start_transfer+0x50>)
    9cbc:	4298      	cmp	r0, r3
    9cbe:	d01c      	beq.n	9cfa <start_transfer+0x4a>
	LOG_ERR("Failed to start PDM: 0x%08x", err);
    9cc0:	4b10      	ldr	r3, [pc, #64]	; (9d04 <start_transfer+0x54>)
    9cc2:	466d      	mov	r5, sp
    9cc4:	b088      	sub	sp, #32
    9cc6:	466a      	mov	r2, sp
    9cc8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9ccc:	2303      	movs	r3, #3
    9cce:	f842 3f10 	str.w	r3, [r2, #16]!
    9cd2:	480d      	ldr	r0, [pc, #52]	; (9d08 <start_transfer+0x58>)
    9cd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9cd8:	f00e f9d1 	bl	1807e <z_log_msg2_static_create.constprop.0>
	if (drv_data->request_clock) {
    9cdc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    9ce0:	07db      	lsls	r3, r3, #31
    9ce2:	46ad      	mov	sp, r5
    9ce4:	d502      	bpl.n	9cec <start_transfer+0x3c>
		(void)onoff_release(drv_data->clk_mgr);
    9ce6:	6820      	ldr	r0, [r4, #0]
    9ce8:	f7fc fddc 	bl	68a4 <onoff_release>
	drv_data->active = false;
    9cec:	2300      	movs	r3, #0
    9cee:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	return ret;
    9cf2:	f06f 0004 	mvn.w	r0, #4
}
    9cf6:	46bd      	mov	sp, r7
    9cf8:	bdb0      	pop	{r4, r5, r7, pc}
		return 0;
    9cfa:	2000      	movs	r0, #0
    9cfc:	e7fb      	b.n	9cf6 <start_transfer+0x46>
    9cfe:	bf00      	nop
    9d00:	0bad0000 	.word	0x0bad0000
    9d04:	0003cd31 	.word	0x0003cd31
    9d08:	0001c828 	.word	0x0001c828

00009d0c <dmic_nrfx_pdm_trigger>:
{
    9d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d0e:	b087      	sub	sp, #28
	struct dmic_nrfx_pdm_drv_data *drv_data = dev->data;
    9d10:	6904      	ldr	r4, [r0, #16]
{
    9d12:	af00      	add	r7, sp, #0
	switch (cmd) {
    9d14:	2903      	cmp	r1, #3
    9d16:	d851      	bhi.n	9dbc <dmic_nrfx_pdm_trigger+0xb0>
    9d18:	e8df f001 	tbb	[pc, r1]
    9d1c:	0f020f02 	.word	0x0f020f02
		if (drv_data->active) {
    9d20:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    9d24:	b91b      	cbnz	r3, 9d2e <dmic_nrfx_pdm_trigger+0x22>
	return 0;
    9d26:	2000      	movs	r0, #0
}
    9d28:	371c      	adds	r7, #28
    9d2a:	46bd      	mov	sp, r7
    9d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrfx_pdm_stop();
    9d2e:	f003 fe5b 	bl	d9e8 <nrfx_pdm_stop>
			drv_data->stopping = true;
    9d32:	2301      	movs	r3, #1
    9d34:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    9d38:	e7f5      	b.n	9d26 <dmic_nrfx_pdm_trigger+0x1a>
		if (!drv_data->configured) {
    9d3a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    9d3e:	079a      	lsls	r2, r3, #30
    9d40:	d40d      	bmi.n	9d5e <dmic_nrfx_pdm_trigger+0x52>
			LOG_ERR("Device is not configured");
    9d42:	4b27      	ldr	r3, [pc, #156]	; (9de0 <dmic_nrfx_pdm_trigger+0xd4>)
    9d44:	617b      	str	r3, [r7, #20]
    9d46:	4827      	ldr	r0, [pc, #156]	; (9de4 <dmic_nrfx_pdm_trigger+0xd8>)
    9d48:	2302      	movs	r3, #2
    9d4a:	f107 0210 	add.w	r2, r7, #16
    9d4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9d52:	613b      	str	r3, [r7, #16]
    9d54:	f00e f993 	bl	1807e <z_log_msg2_static_create.constprop.0>
			return -EIO;
    9d58:	f06f 0004 	mvn.w	r0, #4
    9d5c:	e7e4      	b.n	9d28 <dmic_nrfx_pdm_trigger+0x1c>
		} else if (!drv_data->active) {
    9d5e:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
    9d62:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    9d66:	2a00      	cmp	r2, #0
    9d68:	d1dd      	bne.n	9d26 <dmic_nrfx_pdm_trigger+0x1a>
	drv_data->active = true;
    9d6a:	2201      	movs	r2, #1
	if (drv_data->request_clock) {
    9d6c:	07db      	lsls	r3, r3, #31
			drv_data->stopping = false;
    9d6e:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
	drv_data->active = true;
    9d72:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	if (drv_data->request_clock) {
    9d76:	d51b      	bpl.n	9db0 <dmic_nrfx_pdm_trigger+0xa4>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    9d78:	4b1b      	ldr	r3, [pc, #108]	; (9de8 <dmic_nrfx_pdm_trigger+0xdc>)
		ret = onoff_request(drv_data->clk_mgr, &drv_data->clk_cli);
    9d7a:	6820      	ldr	r0, [r4, #0]
    9d7c:	6125      	str	r5, [r4, #16]
    9d7e:	2603      	movs	r6, #3
    9d80:	60a3      	str	r3, [r4, #8]
    9d82:	60e6      	str	r6, [r4, #12]
    9d84:	1d21      	adds	r1, r4, #4
    9d86:	f7fc fcf5 	bl	6774 <onoff_request>
		if (ret < 0) {
    9d8a:	2800      	cmp	r0, #0
    9d8c:	dacb      	bge.n	9d26 <dmic_nrfx_pdm_trigger+0x1a>
			drv_data->active = false;
    9d8e:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
			LOG_ERR("Failed to request clock: %d", ret);
    9d92:	466c      	mov	r4, sp
    9d94:	b088      	sub	sp, #32
    9d96:	466a      	mov	r2, sp
    9d98:	4b14      	ldr	r3, [pc, #80]	; (9dec <dmic_nrfx_pdm_trigger+0xe0>)
    9d9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9d9e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9da2:	f842 6f10 	str.w	r6, [r2, #16]!
    9da6:	480f      	ldr	r0, [pc, #60]	; (9de4 <dmic_nrfx_pdm_trigger+0xd8>)
    9da8:	f00e f969 	bl	1807e <z_log_msg2_static_create.constprop.0>
    9dac:	46a5      	mov	sp, r4
    9dae:	e7d3      	b.n	9d58 <dmic_nrfx_pdm_trigger+0x4c>
		ret = start_transfer(drv_data);
    9db0:	4620      	mov	r0, r4
    9db2:	f7ff ff7d 	bl	9cb0 <start_transfer>
		if (ret < 0) {
    9db6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    9dba:	e7b5      	b.n	9d28 <dmic_nrfx_pdm_trigger+0x1c>
		LOG_ERR("Invalid command: %d", cmd);
    9dbc:	4b0c      	ldr	r3, [pc, #48]	; (9df0 <dmic_nrfx_pdm_trigger+0xe4>)
    9dbe:	4809      	ldr	r0, [pc, #36]	; (9de4 <dmic_nrfx_pdm_trigger+0xd8>)
    9dc0:	466c      	mov	r4, sp
    9dc2:	b088      	sub	sp, #32
    9dc4:	466a      	mov	r2, sp
	switch (cmd) {
    9dc6:	e9c2 3105 	strd	r3, r1, [r2, #20]
		LOG_ERR("Invalid command: %d", cmd);
    9dca:	2303      	movs	r3, #3
    9dcc:	f842 3f10 	str.w	r3, [r2, #16]!
    9dd0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9dd4:	f00e f953 	bl	1807e <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    9dd8:	f06f 0015 	mvn.w	r0, #21
    9ddc:	46a5      	mov	sp, r4
    9dde:	e7a3      	b.n	9d28 <dmic_nrfx_pdm_trigger+0x1c>
    9de0:	0003ccff 	.word	0x0003ccff
    9de4:	0001c828 	.word	0x0001c828
    9de8:	00018085 	.word	0x00018085
    9dec:	0003cd4d 	.word	0x0003cd4d
    9df0:	0003cd69 	.word	0x0003cd69

00009df4 <dmic_nrfx_pdm_configure>:
{
    9df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9df8:	b093      	sub	sp, #76	; 0x4c
	struct dmic_nrfx_pdm_drv_data *drv_data = dev->data;
    9dfa:	6905      	ldr	r5, [r0, #16]
	const struct dmic_nrfx_pdm_drv_cfg *drv_cfg = dev->config;
    9dfc:	6843      	ldr	r3, [r0, #4]
	struct pcm_stream_cfg *stream = &config->streams[0];
    9dfe:	690e      	ldr	r6, [r1, #16]
{
    9e00:	af00      	add	r7, sp, #0
    9e02:	460c      	mov	r4, r1
	const struct dmic_nrfx_pdm_drv_cfg *drv_cfg = dev->config;
    9e04:	61fb      	str	r3, [r7, #28]
	if (drv_data->active) {
    9e06:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    9e0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    9e0e:	b183      	cbz	r3, 9e32 <dmic_nrfx_pdm_configure+0x3e>
		LOG_ERR("Cannot configure device while it is active");
    9e10:	4b8a      	ldr	r3, [pc, #552]	; (a03c <dmic_nrfx_pdm_configure+0x248>)
    9e12:	488b      	ldr	r0, [pc, #556]	; (a040 <dmic_nrfx_pdm_configure+0x24c>)
    9e14:	647b      	str	r3, [r7, #68]	; 0x44
    9e16:	f107 0240 	add.w	r2, r7, #64	; 0x40
    9e1a:	2302      	movs	r3, #2
    9e1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9e20:	643b      	str	r3, [r7, #64]	; 0x40
    9e22:	f00e f92c 	bl	1807e <z_log_msg2_static_create.constprop.0>
		return -EBUSY;
    9e26:	f06f 000f 	mvn.w	r0, #15
}
    9e2a:	374c      	adds	r7, #76	; 0x4c
    9e2c:	46bd      	mov	sp, r7
    9e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (channel->req_num_chan == 1) {
    9e32:	f891 9024 	ldrb.w	r9, [r1, #36]	; 0x24
		channel->act_num_chan = 1;
    9e36:	f1b9 0f01 	cmp.w	r9, #1
    9e3a:	bf14      	ite	ne
    9e3c:	2302      	movne	r3, #2
    9e3e:	2301      	moveq	r3, #1
    9e40:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	channel->act_num_streams = 1;
    9e44:	f04f 0301 	mov.w	r3, #1
    9e48:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
	if (channel->req_num_streams != 1 ||
    9e4c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
		channel->act_num_chan = 1;
    9e50:	bf14      	ite	ne
    9e52:	f04f 0b10 	movne.w	fp, #16
    9e56:	f04f 0b00 	moveq.w	fp, #0
	if (channel->req_num_streams != 1 ||
    9e5a:	2b01      	cmp	r3, #1
	channel->act_chan_map_lo = def_map;
    9e5c:	e9c1 b207 	strd	fp, r2, [r1, #28]
	if (channel->req_num_streams != 1 ||
    9e60:	d10f      	bne.n	9e82 <dmic_nrfx_pdm_configure+0x8e>
	    channel->req_num_chan > 2 ||
    9e62:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    9e66:	2b01      	cmp	r3, #1
    9e68:	d80b      	bhi.n	9e82 <dmic_nrfx_pdm_configure+0x8e>
	    (channel->req_chan_map_lo != def_map &&
    9e6a:	f8d1 e014 	ldr.w	lr, [r1, #20]
	    channel->req_num_chan < 1 ||
    9e6e:	45de      	cmp	lr, fp
    9e70:	d002      	beq.n	9e78 <dmic_nrfx_pdm_configure+0x84>
	    (channel->req_chan_map_lo != def_map &&
    9e72:	f1be 0f01 	cmp.w	lr, #1
    9e76:	d104      	bne.n	9e82 <dmic_nrfx_pdm_configure+0x8e>
	     channel->req_chan_map_lo != alt_map) ||
    9e78:	f8d4 8018 	ldr.w	r8, [r4, #24]
    9e7c:	f1b8 0f00 	cmp.w	r8, #0
    9e80:	d00d      	beq.n	9e9e <dmic_nrfx_pdm_configure+0xaa>
		LOG_ERR("Requested configuration is not supported");
    9e82:	4b70      	ldr	r3, [pc, #448]	; (a044 <dmic_nrfx_pdm_configure+0x250>)
		LOG_ERR("Only 16-bit samples are supported");
    9e84:	486e      	ldr	r0, [pc, #440]	; (a040 <dmic_nrfx_pdm_configure+0x24c>)
    9e86:	647b      	str	r3, [r7, #68]	; 0x44
    9e88:	f107 0240 	add.w	r2, r7, #64	; 0x40
    9e8c:	2302      	movs	r3, #2
    9e8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9e92:	643b      	str	r3, [r7, #64]	; 0x40
    9e94:	f00e f8f3 	bl	1807e <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    9e98:	f06f 0015 	mvn.w	r0, #21
    9e9c:	e7c5      	b.n	9e2a <dmic_nrfx_pdm_configure+0x36>
	if (stream->pcm_rate == 0 || stream->pcm_width == 0) {
    9e9e:	f8d6 c000 	ldr.w	ip, [r6]
    9ea2:	f1bc 0f00 	cmp.w	ip, #0
    9ea6:	d001      	beq.n	9eac <dmic_nrfx_pdm_configure+0xb8>
    9ea8:	7933      	ldrb	r3, [r6, #4]
    9eaa:	b973      	cbnz	r3, 9eca <dmic_nrfx_pdm_configure+0xd6>
		if (drv_data->configured) {
    9eac:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    9eb0:	f010 0002 	ands.w	r0, r0, #2
    9eb4:	d0b9      	beq.n	9e2a <dmic_nrfx_pdm_configure+0x36>
			nrfx_pdm_uninit();
    9eb6:	f003 fcef 	bl	d898 <nrfx_pdm_uninit>
			drv_data->configured = false;
    9eba:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    9ebe:	f36f 0341 	bfc	r3, #1, #1
	drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    9ec2:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	return 0;
    9ec6:	2000      	movs	r0, #0
    9ec8:	e7af      	b.n	9e2a <dmic_nrfx_pdm_configure+0x36>
	if (stream->pcm_width != 16) {
    9eca:	2b10      	cmp	r3, #16
    9ecc:	d001      	beq.n	9ed2 <dmic_nrfx_pdm_configure+0xde>
		LOG_ERR("Only 16-bit samples are supported");
    9ece:	4b5e      	ldr	r3, [pc, #376]	; (a048 <dmic_nrfx_pdm_configure+0x254>)
    9ed0:	e7d8      	b.n	9e84 <dmic_nrfx_pdm_configure+0x90>
	nrfx_cfg = drv_cfg->nrfx_def_cfg;
    9ed2:	69fb      	ldr	r3, [r7, #28]
    9ed4:	3304      	adds	r3, #4
    9ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9ed8:	f107 0a20 	add.w	sl, r7, #32
    9edc:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
		      : NRF_PDM_MODE_STEREO;
    9ee0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    9ee4:	f1d2 0900 	rsbs	r9, r2, #0
    9ee8:	eb49 0902 	adc.w	r9, r9, r2
			if (freq_val < pdm_cfg->io.min_pdm_clk_freq) {
    9eec:	6823      	ldr	r3, [r4, #0]
		      : NRF_PDM_MODE_STEREO;
    9eee:	f887 9020 	strb.w	r9, [r7, #32]
		      : NRF_PDM_EDGE_LEFTRISING;
    9ef2:	ebbe 0e0b 	subs.w	lr, lr, fp
    9ef6:	bf18      	it	ne
    9ef8:	f04f 0e01 	movne.w	lr, #1
			if (freq_val < pdm_cfg->io.min_pdm_clk_freq) {
    9efc:	607b      	str	r3, [r7, #4]
    9efe:	f897 902b 	ldrb.w	r9, [r7, #43]	; 0x2b
    9f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f04:	4a51      	ldr	r2, [pc, #324]	; (a04c <dmic_nrfx_pdm_configure+0x258>)
		      : NRF_PDM_EDGE_LEFTRISING;
    9f06:	f887 e021 	strb.w	lr, [r7, #33]	; 0x21
	for (int r = 0; best_diff != 0 && r < ARRAY_SIZE(ratios); ++r) {
    9f0a:	61bb      	str	r3, [r7, #24]
			if (freq_val < pdm_cfg->io.min_pdm_clk_freq) {
    9f0c:	46c2      	mov	sl, r8
    9f0e:	4640      	mov	r0, r8
	uint32_t best_diff = UINT32_MAX;
    9f10:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
		uint8_t ratio = ratios[r].ratio_val;
    9f14:	7813      	ldrb	r3, [r2, #0]
    9f16:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < ARRAY_SIZE(freqs); ++i) {
    9f18:	494d      	ldr	r1, [pc, #308]	; (a050 <dmic_nrfx_pdm_configure+0x25c>)
	bool better_found = false;
    9f1a:	2300      	movs	r3, #0
    9f1c:	60fb      	str	r3, [r7, #12]
			uint32_t freq_val = freqs[i].freq_val;
    9f1e:	f8d1 8000 	ldr.w	r8, [r1]
			if (freq_val < pdm_cfg->io.min_pdm_clk_freq) {
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	4598      	cmp	r8, r3
    9f26:	d30f      	bcc.n	9f48 <dmic_nrfx_pdm_configure+0x154>
			if (freq_val > pdm_cfg->io.max_pdm_clk_freq) {
    9f28:	6863      	ldr	r3, [r4, #4]
    9f2a:	4598      	cmp	r8, r3
    9f2c:	d810      	bhi.n	9f50 <dmic_nrfx_pdm_configure+0x15c>
	uint32_t act_rate = freq / ratio;
    9f2e:	68bb      	ldr	r3, [r7, #8]
    9f30:	fbb8 f3f3 	udiv	r3, r8, r3
					     : (req_rate - act_rate);
    9f34:	459c      	cmp	ip, r3
    9f36:	bf94      	ite	ls
    9f38:	eba3 0b0c 	subls.w	fp, r3, ip
    9f3c:	ebac 0b03 	subhi.w	fp, ip, r3
	if (diff < *best_diff) {
    9f40:	45f3      	cmp	fp, lr
    9f42:	d36f      	bcc.n	a024 <dmic_nrfx_pdm_configure+0x230>
			if ((freq_val / ratio) > req_rate) {
    9f44:	459c      	cmp	ip, r3
    9f46:	d303      	bcc.n	9f50 <dmic_nrfx_pdm_configure+0x15c>
		for (int i = 0; i < ARRAY_SIZE(freqs); ++i) {
    9f48:	4b42      	ldr	r3, [pc, #264]	; (a054 <dmic_nrfx_pdm_configure+0x260>)
    9f4a:	3108      	adds	r1, #8
    9f4c:	4299      	cmp	r1, r3
    9f4e:	d1e6      	bne.n	9f1e <dmic_nrfx_pdm_configure+0x12a>
		if (check_pdm_frequencies(drv_cfg, config, pdm_cfg, ratio,
    9f50:	68fb      	ldr	r3, [r7, #12]
    9f52:	2b00      	cmp	r3, #0
    9f54:	d044      	beq.n	9fe0 <dmic_nrfx_pdm_configure+0x1ec>
			config->ratio = ratios[r].ratio_enum;
    9f56:	f892 9001 	ldrb.w	r9, [r2, #1]
			if (best_diff == 0) {
    9f5a:	f1be 0f00 	cmp.w	lr, #0
    9f5e:	d13d      	bne.n	9fdc <dmic_nrfx_pdm_configure+0x1e8>
    9f60:	b108      	cbz	r0, 9f66 <dmic_nrfx_pdm_configure+0x172>
    9f62:	69bb      	ldr	r3, [r7, #24]
    9f64:	627b      	str	r3, [r7, #36]	; 0x24
    9f66:	f887 902b 	strb.w	r9, [r7, #43]	; 0x2b
	LOG_INF("PDM clock frequency: %u, actual PCM rate: %u",
    9f6a:	466c      	mov	r4, sp
    9f6c:	b088      	sub	sp, #32
    9f6e:	466a      	mov	r2, sp
    9f70:	4b39      	ldr	r3, [pc, #228]	; (a058 <dmic_nrfx_pdm_configure+0x264>)
    9f72:	6153      	str	r3, [r2, #20]
    9f74:	697b      	ldr	r3, [r7, #20]
    9f76:	6193      	str	r3, [r2, #24]
    9f78:	693b      	ldr	r3, [r7, #16]
    9f7a:	61d3      	str	r3, [r2, #28]
    9f7c:	2304      	movs	r3, #4
    9f7e:	f842 3f10 	str.w	r3, [r2, #16]!
    9f82:	482f      	ldr	r0, [pc, #188]	; (a040 <dmic_nrfx_pdm_configure+0x24c>)
    9f84:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    9f88:	f00e f879 	bl	1807e <z_log_msg2_static_create.constprop.0>
	if (drv_data->configured) {
    9f8c:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    9f90:	079b      	lsls	r3, r3, #30
    9f92:	46a5      	mov	sp, r4
    9f94:	d507      	bpl.n	9fa6 <dmic_nrfx_pdm_configure+0x1b2>
		nrfx_pdm_uninit();
    9f96:	f003 fc7f 	bl	d898 <nrfx_pdm_uninit>
		drv_data->configured = false;
    9f9a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    9f9e:	f36f 0341 	bfc	r3, #1, #1
    9fa2:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	err = nrfx_pdm_init(&nrfx_cfg, drv_cfg->event_handler);
    9fa6:	69fb      	ldr	r3, [r7, #28]
    9fa8:	f107 0020 	add.w	r0, r7, #32
    9fac:	6819      	ldr	r1, [r3, #0]
    9fae:	f003 fbdd 	bl	d76c <nrfx_pdm_init>
	if (err != NRFX_SUCCESS) {
    9fb2:	4b2a      	ldr	r3, [pc, #168]	; (a05c <dmic_nrfx_pdm_configure+0x268>)
    9fb4:	4298      	cmp	r0, r3
    9fb6:	d024      	beq.n	a002 <dmic_nrfx_pdm_configure+0x20e>
		LOG_ERR("Failed to initialize PDM: 0x%08x", err);
    9fb8:	4b29      	ldr	r3, [pc, #164]	; (a060 <dmic_nrfx_pdm_configure+0x26c>)
    9fba:	466c      	mov	r4, sp
    9fbc:	b088      	sub	sp, #32
    9fbe:	466a      	mov	r2, sp
    9fc0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9fc4:	2303      	movs	r3, #3
    9fc6:	481e      	ldr	r0, [pc, #120]	; (a040 <dmic_nrfx_pdm_configure+0x24c>)
    9fc8:	f842 3f10 	str.w	r3, [r2, #16]!
    9fcc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9fd0:	f00e f855 	bl	1807e <z_log_msg2_static_create.constprop.0>
		return -EIO;
    9fd4:	f06f 0004 	mvn.w	r0, #4
    9fd8:	46a5      	mov	sp, r4
    9fda:	e726      	b.n	9e2a <dmic_nrfx_pdm_configure+0x36>
    9fdc:	f04f 0a01 	mov.w	sl, #1
	for (int r = 0; best_diff != 0 && r < ARRAY_SIZE(ratios); ++r) {
    9fe0:	4b20      	ldr	r3, [pc, #128]	; (a064 <dmic_nrfx_pdm_configure+0x270>)
    9fe2:	3202      	adds	r2, #2
    9fe4:	429a      	cmp	r2, r3
    9fe6:	d195      	bne.n	9f14 <dmic_nrfx_pdm_configure+0x120>
    9fe8:	b108      	cbz	r0, 9fee <dmic_nrfx_pdm_configure+0x1fa>
    9fea:	69bb      	ldr	r3, [r7, #24]
    9fec:	627b      	str	r3, [r7, #36]	; 0x24
    9fee:	f1ba 0f00 	cmp.w	sl, #0
    9ff2:	d001      	beq.n	9ff8 <dmic_nrfx_pdm_configure+0x204>
    9ff4:	f887 902b 	strb.w	r9, [r7, #43]	; 0x2b
	if (best_diff == UINT32_MAX) {
    9ff8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    9ffc:	d1b5      	bne.n	9f6a <dmic_nrfx_pdm_configure+0x176>
		LOG_ERR("Cannot find suitable PDM clock configuration.");
    9ffe:	4b1a      	ldr	r3, [pc, #104]	; (a068 <dmic_nrfx_pdm_configure+0x274>)
    a000:	e740      	b.n	9e84 <dmic_nrfx_pdm_configure+0x90>
	drv_data->block_size = stream->block_size;
    a002:	88f3      	ldrh	r3, [r6, #6]
    a004:	61ab      	str	r3, [r5, #24]
	drv_data->mem_slab   = stream->mem_slab;
    a006:	68b3      	ldr	r3, [r6, #8]
    a008:	616b      	str	r3, [r5, #20]
	drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    a00a:	69fb      	ldr	r3, [r7, #28]
    a00c:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
    a010:	7e1b      	ldrb	r3, [r3, #24]
    a012:	3b00      	subs	r3, #0
    a014:	bf18      	it	ne
    a016:	2301      	movne	r3, #1
    a018:	f043 0302 	orr.w	r3, r3, #2
    a01c:	f022 0203 	bic.w	r2, r2, #3
    a020:	4313      	orrs	r3, r2
    a022:	e74e      	b.n	9ec2 <dmic_nrfx_pdm_configure+0xce>
				config->clock_freq = freqs[i].freq_enum;
    a024:	6848      	ldr	r0, [r1, #4]
	uint32_t act_rate = freq / ratio;
    a026:	613b      	str	r3, [r7, #16]
    a028:	e9c7 8005 	strd	r8, r0, [r7, #20]
    a02c:	46de      	mov	lr, fp
    a02e:	2001      	movs	r0, #1
				if (*best_diff == 0) {
    a030:	f1bb 0f00 	cmp.w	fp, #0
    a034:	d08f      	beq.n	9f56 <dmic_nrfx_pdm_configure+0x162>
				better_found = true;
    a036:	60f8      	str	r0, [r7, #12]
    a038:	e784      	b.n	9f44 <dmic_nrfx_pdm_configure+0x150>
    a03a:	bf00      	nop
    a03c:	0003cd7d 	.word	0x0003cd7d
    a040:	0001c828 	.word	0x0001c828
    a044:	0003cda8 	.word	0x0003cda8
    a048:	0003cdd1 	.word	0x0003cdd1
    a04c:	0003cf24 	.word	0x0003cf24
    a050:	0001d65c 	.word	0x0001d65c
    a054:	0001d68c 	.word	0x0001d68c
    a058:	0003ce21 	.word	0x0003ce21
    a05c:	0bad0000 	.word	0x0bad0000
    a060:	0003ce4e 	.word	0x0003ce4e
    a064:	0003cf28 	.word	0x0003cf28
    a068:	0003cdf3 	.word	0x0003cdf3

0000a06c <pdm_nrfx_init0>:
			 &dmic_nrfx_pdm_data##idx, &dmic_nrfx_pdm_cfg##idx,  \
			 POST_KERNEL, CONFIG_AUDIO_DMIC_INIT_PRIORITY,	     \
			 &dmic_ops);

/* Existing SoCs only have one PDM instance. */
PDM_NRFX_DEVICE(0);
    a06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a06e:	4604      	mov	r4, r0
    a070:	2200      	movs	r2, #0
    a072:	2101      	movs	r1, #1
    a074:	201d      	movs	r0, #29
    a076:	f7fe f935 	bl	82e4 <z_arm_irq_priority_set>
    a07a:	6863      	ldr	r3, [r4, #4]
    a07c:	695d      	ldr	r5, [r3, #20]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a07e:	aa01      	add	r2, sp, #4
    a080:	2100      	movs	r1, #0
    a082:	4628      	mov	r0, r5
    a084:	f00e f8cd 	bl	18222 <pinctrl_lookup_state>
	if (ret < 0) {
    a088:	2800      	cmp	r0, #0
    a08a:	db20      	blt.n	a0ce <pdm_nrfx_init0+0x62>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a08c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a08e:	682a      	ldr	r2, [r5, #0]
    a090:	7919      	ldrb	r1, [r3, #4]
    a092:	6818      	ldr	r0, [r3, #0]
    a094:	f00e f91d 	bl	182d2 <pinctrl_configure_pins>
    a098:	2800      	cmp	r0, #0
    a09a:	db18      	blt.n	a0ce <pdm_nrfx_init0+0x62>
    a09c:	2304      	movs	r3, #4
    a09e:	490d      	ldr	r1, [pc, #52]	; (a0d4 <pdm_nrfx_init0+0x68>)
    a0a0:	480d      	ldr	r0, [pc, #52]	; (a0d8 <pdm_nrfx_init0+0x6c>)
    a0a2:	461a      	mov	r2, r3
    a0a4:	f00e fc96 	bl	189d4 <k_msgq_init>
	drv_data->clk_mgr = z_nrf_clock_control_get_onoff(subsys);
    a0a8:	2000      	movs	r0, #0
    a0aa:	6925      	ldr	r5, [r4, #16]
    a0ac:	f7ff fa9e 	bl	95ec <z_nrf_clock_control_get_onoff>
    a0b0:	6028      	str	r0, [r5, #0]
	__ASSERT_NO_MSG(drv_data->clk_mgr != NULL);
    a0b2:	b958      	cbnz	r0, a0cc <pdm_nrfx_init0+0x60>
    a0b4:	4909      	ldr	r1, [pc, #36]	; (a0dc <pdm_nrfx_init0+0x70>)
    a0b6:	480a      	ldr	r0, [pc, #40]	; (a0e0 <pdm_nrfx_init0+0x74>)
    a0b8:	4a0a      	ldr	r2, [pc, #40]	; (a0e4 <pdm_nrfx_init0+0x78>)
    a0ba:	f240 2312 	movw	r3, #530	; 0x212
    a0be:	f00d fdc6 	bl	17c4e <assert_print>
    a0c2:	4808      	ldr	r0, [pc, #32]	; (a0e4 <pdm_nrfx_init0+0x78>)
    a0c4:	f240 2112 	movw	r1, #530	; 0x212
    a0c8:	f00d fdba 	bl	17c40 <assert_post_action>
    a0cc:	2000      	movs	r0, #0
PDM_NRFX_DEVICE(0);
    a0ce:	b003      	add	sp, #12
    a0d0:	bd30      	pop	{r4, r5, pc}
    a0d2:	bf00      	nop
    a0d4:	20010fe4 	.word	0x20010fe4
    a0d8:	20010fb4 	.word	0x20010fb4
    a0dc:	0003cea0 	.word	0x0003cea0
    a0e0:	0003baf1 	.word	0x0003baf1
    a0e4:	0003ce6f 	.word	0x0003ce6f

0000a0e8 <event_handler0>:
    a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0ec:	b086      	sub	sp, #24
	if (evt->buffer_requested) {
    a0ee:	7806      	ldrb	r6, [r0, #0]
    a0f0:	4c33      	ldr	r4, [pc, #204]	; (a1c0 <event_handler0+0xd8>)
PDM_NRFX_DEVICE(0);
    a0f2:	af00      	add	r7, sp, #0
    a0f4:	4605      	mov	r5, r0
	if (evt->buffer_requested) {
    a0f6:	b1b6      	cbz	r6, a126 <event_handler0+0x3e>
		ret = k_mem_slab_alloc(drv_data->mem_slab, &buffer, K_NO_WAIT);
    a0f8:	6960      	ldr	r0, [r4, #20]
    a0fa:	2200      	movs	r2, #0
    a0fc:	2300      	movs	r3, #0
    a0fe:	4639      	mov	r1, r7
    a100:	f003 ff66 	bl	dfd0 <k_mem_slab_alloc>
		if (ret < 0) {
    a104:	2800      	cmp	r0, #0
    a106:	da2a      	bge.n	a15e <event_handler0+0x76>
			LOG_ERR("Failed to allocate buffer: %d", ret);
    a108:	46e8      	mov	r8, sp
    a10a:	4b2e      	ldr	r3, [pc, #184]	; (a1c4 <event_handler0+0xdc>)
    a10c:	b088      	sub	sp, #32
    a10e:	466a      	mov	r2, sp
				LOG_ERR("Failed to set buffer: 0x%08x", err);
    a110:	e9c2 3005 	strd	r3, r0, [r2, #20]
    a114:	2303      	movs	r3, #3
    a116:	f842 3f10 	str.w	r3, [r2, #16]!
    a11a:	482b      	ldr	r0, [pc, #172]	; (a1c8 <event_handler0+0xe0>)
    a11c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a120:	f00d ffad 	bl	1807e <z_log_msg2_static_create.constprop.0>
    a124:	46c5      	mov	sp, r8
	if (drv_data->stopping) {
    a126:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
		if (evt->buffer_released) {
    a12a:	686b      	ldr	r3, [r5, #4]
	if (drv_data->stopping) {
    a12c:	b33a      	cbz	r2, a17e <event_handler0+0x96>
		if (evt->buffer_released) {
    a12e:	b123      	cbz	r3, a13a <event_handler0+0x52>
	k_mem_slab_free(drv_data->mem_slab, &buffer);
    a130:	6960      	ldr	r0, [r4, #20]
    a132:	603b      	str	r3, [r7, #0]
    a134:	4639      	mov	r1, r7
    a136:	f003 ffb7 	bl	e0a8 <k_mem_slab_free>
		if (drv_data->active) {
    a13a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    a13e:	b14b      	cbz	r3, a154 <event_handler0+0x6c>
			drv_data->active = false;
    a140:	2300      	movs	r3, #0
    a142:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
			if (drv_data->request_clock) {
    a146:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    a14a:	07db      	lsls	r3, r3, #31
    a14c:	d502      	bpl.n	a154 <event_handler0+0x6c>
				(void)onoff_release(drv_data->clk_mgr);
    a14e:	6820      	ldr	r0, [r4, #0]
    a150:	f7fc fba8 	bl	68a4 <onoff_release>
	if (stop) {
    a154:	bb76      	cbnz	r6, a1b4 <event_handler0+0xcc>
PDM_NRFX_DEVICE(0);
    a156:	3718      	adds	r7, #24
    a158:	46bd      	mov	sp, r7
    a15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						  drv_data->block_size / 2);
    a15e:	69a1      	ldr	r1, [r4, #24]
			err = nrfx_pdm_buffer_set(buffer,
    a160:	6838      	ldr	r0, [r7, #0]
    a162:	f3c1 014f 	ubfx	r1, r1, #1, #16
    a166:	f003 fbf1 	bl	d94c <nrfx_pdm_buffer_set>
			if (err != NRFX_SUCCESS) {
    a16a:	4b18      	ldr	r3, [pc, #96]	; (a1cc <event_handler0+0xe4>)
    a16c:	4298      	cmp	r0, r3
    a16e:	d004      	beq.n	a17a <event_handler0+0x92>
				LOG_ERR("Failed to set buffer: 0x%08x", err);
    a170:	46e8      	mov	r8, sp
    a172:	b088      	sub	sp, #32
    a174:	4b16      	ldr	r3, [pc, #88]	; (a1d0 <event_handler0+0xe8>)
    a176:	466a      	mov	r2, sp
    a178:	e7ca      	b.n	a110 <event_handler0+0x28>
	bool stop = false;
    a17a:	2600      	movs	r6, #0
    a17c:	e7d3      	b.n	a126 <event_handler0+0x3e>
	} else if (evt->buffer_released) {
    a17e:	2b00      	cmp	r3, #0
    a180:	d0e8      	beq.n	a154 <event_handler0+0x6c>
	return z_impl_k_msgq_put(msgq, data, timeout);
    a182:	4814      	ldr	r0, [pc, #80]	; (a1d4 <event_handler0+0xec>)
    a184:	2200      	movs	r2, #0
    a186:	2300      	movs	r3, #0
    a188:	1d29      	adds	r1, r5, #4
    a18a:	f004 f985 	bl	e498 <z_impl_k_msgq_put>
		if (ret < 0) {
    a18e:	2800      	cmp	r0, #0
    a190:	dae0      	bge.n	a154 <event_handler0+0x6c>
			LOG_ERR("No room in RX queue");
    a192:	4b11      	ldr	r3, [pc, #68]	; (a1d8 <event_handler0+0xf0>)
    a194:	480c      	ldr	r0, [pc, #48]	; (a1c8 <event_handler0+0xe0>)
    a196:	617b      	str	r3, [r7, #20]
    a198:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a19c:	2302      	movs	r3, #2
    a19e:	f107 0210 	add.w	r2, r7, #16
    a1a2:	613b      	str	r3, [r7, #16]
    a1a4:	f00d ff6b 	bl	1807e <z_log_msg2_static_create.constprop.0>
	k_mem_slab_free(drv_data->mem_slab, &buffer);
    a1a8:	4639      	mov	r1, r7
    a1aa:	686b      	ldr	r3, [r5, #4]
    a1ac:	6960      	ldr	r0, [r4, #20]
    a1ae:	603b      	str	r3, [r7, #0]
    a1b0:	f003 ff7a 	bl	e0a8 <k_mem_slab_free>
		nrfx_pdm_stop();
    a1b4:	f003 fc18 	bl	d9e8 <nrfx_pdm_stop>
		drv_data->stopping = true;
    a1b8:	2301      	movs	r3, #1
    a1ba:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
PDM_NRFX_DEVICE(0);
    a1be:	e7ca      	b.n	a156 <event_handler0+0x6e>
    a1c0:	20010f98 	.word	0x20010f98
    a1c4:	0003cec1 	.word	0x0003cec1
    a1c8:	0001c828 	.word	0x0001c828
    a1cc:	0bad0000 	.word	0x0bad0000
    a1d0:	0003cedf 	.word	0x0003cedf
    a1d4:	20010fb4 	.word	0x20010fb4
    a1d8:	0003cefc 	.word	0x0003cefc

0000a1dc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    a1dc:	4b02      	ldr	r3, [pc, #8]	; (a1e8 <flash_nrf_pages_layout+0xc>)
    a1de:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    a1e0:	2301      	movs	r3, #1
    a1e2:	6013      	str	r3, [r2, #0]
}
    a1e4:	4770      	bx	lr
    a1e6:	bf00      	nop
    a1e8:	20010ff4 	.word	0x20010ff4

0000a1ec <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    a1ec:	4800      	ldr	r0, [pc, #0]	; (a1f0 <flash_nrf_get_parameters+0x4>)
    a1ee:	4770      	bx	lr
    a1f0:	0001d6a0 	.word	0x0001d6a0

0000a1f4 <restore_pofwarn.part.0>:
	}

	return 0;
}

static void restore_pofwarn(void)
    a1f4:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
    a1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
    a1fa:	2001      	movs	r0, #1
    a1fc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    a200:	f3c1 0143 	ubfx	r1, r1, #1, #4
    a204:	f00d ff59 	bl	180ba <nrf_power_pofcon_set.constprop.0>
		pofcon_enabled = false;
    a208:	4b01      	ldr	r3, [pc, #4]	; (a210 <restore_pofwarn.part.0+0x1c>)
    a20a:	2200      	movs	r2, #0
    a20c:	701a      	strb	r2, [r3, #0]
	}
}
    a20e:	bd08      	pop	{r3, pc}
    a210:	200245da 	.word	0x200245da

0000a214 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a214:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    a218:	b513      	push	{r0, r1, r4, lr}
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a21a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a21e:	2b08      	cmp	r3, #8
    a220:	d11b      	bne.n	a25a <suspend_pofwarn+0x46>
    a222:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    a226:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
	if (enabled) {
    a22a:	f011 0001 	ands.w	r0, r1, #1
    a22e:	d00e      	beq.n	a24e <suspend_pofwarn+0x3a>
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
    a230:	f3c1 0143 	ubfx	r1, r1, #1, #4
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
    a234:	2000      	movs	r0, #0
    a236:	9101      	str	r1, [sp, #4]
    a238:	f00d ff3f 	bl	180ba <nrf_power_pofcon_set.constprop.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a23c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    a240:	9901      	ldr	r1, [sp, #4]
    a242:	b130      	cbz	r0, a252 <suspend_pofwarn+0x3e>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
    a244:	2001      	movs	r0, #1
    a246:	f00d ff38 	bl	180ba <nrf_power_pofcon_set.constprop.0>
			return -ECANCELED;
    a24a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
    a24e:	b002      	add	sp, #8
    a250:	bd10      	pop	{r4, pc}
		pofcon_enabled = enabled;
    a252:	4b03      	ldr	r3, [pc, #12]	; (a260 <suspend_pofwarn+0x4c>)
    a254:	2201      	movs	r2, #1
    a256:	701a      	strb	r2, [r3, #0]
    a258:	e7f9      	b.n	a24e <suspend_pofwarn+0x3a>
		return 0;
    a25a:	2000      	movs	r0, #0
    a25c:	e7f7      	b.n	a24e <suspend_pofwarn+0x3a>
    a25e:	bf00      	nop
    a260:	200245da 	.word	0x200245da

0000a264 <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
    a264:	b580      	push	{r7, lr}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    a266:	4b0a      	ldr	r3, [pc, #40]	; (a290 <flash_nrf_read.part.0+0x2c>)
static int flash_nrf_read(const struct device *dev, off_t addr,
    a268:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
    a26a:	b088      	sub	sp, #32
    a26c:	466a      	mov	r2, sp
    a26e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    a272:	2304      	movs	r3, #4
    a274:	61d1      	str	r1, [r2, #28]
    a276:	f842 3f10 	str.w	r3, [r2, #16]!
    a27a:	4806      	ldr	r0, [pc, #24]	; (a294 <flash_nrf_read.part.0+0x30>)
    a27c:	2300      	movs	r3, #0
    a27e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a282:	f7fd fb65 	bl	7950 <z_impl_z_log_msg2_static_create>
}
    a286:	f06f 0015 	mvn.w	r0, #21
    a28a:	46bd      	mov	sp, r7
    a28c:	bd80      	pop	{r7, pc}
    a28e:	bf00      	nop
    a290:	0003cf28 	.word	0x0003cf28
    a294:	0001c838 	.word	0x0001c838

0000a298 <nrf_flash_init>:
{
    a298:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    a29a:	2201      	movs	r2, #1
    a29c:	4611      	mov	r1, r2
    a29e:	4806      	ldr	r0, [pc, #24]	; (a2b8 <nrf_flash_init+0x20>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    a2a0:	4c06      	ldr	r4, [pc, #24]	; (a2bc <nrf_flash_init+0x24>)
    a2a2:	f00e fbb6 	bl	18a12 <z_impl_k_sem_init>
    a2a6:	f00e faf3 	bl	18890 <nrfx_nvmc_flash_page_count_get>
    a2aa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    a2ac:	f00e faec 	bl	18888 <nrfx_nvmc_flash_page_size_get>
    a2b0:	6060      	str	r0, [r4, #4]
}
    a2b2:	2000      	movs	r0, #0
    a2b4:	bd10      	pop	{r4, pc}
    a2b6:	bf00      	nop
    a2b8:	20010ffc 	.word	0x20010ffc
    a2bc:	20010ff4 	.word	0x20010ff4

0000a2c0 <flash_nrf_erase>:
{
    a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a2c4:	af00      	add	r7, sp, #0
    a2c6:	4689      	mov	r9, r1
    a2c8:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    a2ca:	f00e fadd 	bl	18888 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    a2ce:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    a2d0:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    a2d2:	4648      	mov	r0, r9
    a2d4:	f00d fee0 	bl	18098 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    a2d8:	46c8      	mov	r8, r9
	if (is_regular_addr_valid(addr, size)) {
    a2da:	2800      	cmp	r0, #0
    a2dc:	d044      	beq.n	a368 <flash_nrf_erase+0xa8>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    a2de:	fbb9 f3f6 	udiv	r3, r9, r6
    a2e2:	fb06 9313 	mls	r3, r6, r3, r9
    a2e6:	b923      	cbnz	r3, a2f2 <flash_nrf_erase+0x32>
    a2e8:	fbb5 f4f6 	udiv	r4, r5, r6
    a2ec:	fb06 5414 	mls	r4, r6, r4, r5
    a2f0:	b19c      	cbz	r4, a31a <flash_nrf_erase+0x5a>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    a2f2:	4b23      	ldr	r3, [pc, #140]	; (a380 <flash_nrf_erase+0xc0>)
    a2f4:	466c      	mov	r4, sp
    a2f6:	b088      	sub	sp, #32
    a2f8:	466a      	mov	r2, sp
    a2fa:	e9c2 3905 	strd	r3, r9, [r2, #20]
    a2fe:	2304      	movs	r3, #4
    a300:	61d5      	str	r5, [r2, #28]
    a302:	f842 3f10 	str.w	r3, [r2, #16]!
    a306:	2300      	movs	r3, #0
    a308:	481e      	ldr	r0, [pc, #120]	; (a384 <flash_nrf_erase+0xc4>)
    a30a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a30e:	f7fd fb1f 	bl	7950 <z_impl_z_log_msg2_static_create>
    a312:	46a5      	mov	sp, r4
		return -EINVAL;
    a314:	f06f 0415 	mvn.w	r4, #21
    a318:	e01f      	b.n	a35a <flash_nrf_erase+0x9a>
		if (!n_pages) {
    a31a:	42b5      	cmp	r5, r6
    a31c:	d31d      	bcc.n	a35a <flash_nrf_erase+0x9a>
	return z_impl_k_sem_take(sem, timeout);
    a31e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a326:	4818      	ldr	r0, [pc, #96]	; (a388 <flash_nrf_erase+0xc8>)
	if (pofcon_enabled) {
    a328:	f8df 9064 	ldr.w	r9, [pc, #100]	; a390 <flash_nrf_erase+0xd0>
    a32c:	f004 fc00 	bl	eb30 <z_impl_k_sem_take>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    a330:	f00e faaa 	bl	18888 <nrfx_nvmc_flash_page_size_get>
    a334:	4606      	mov	r6, r0
		if (SUSPEND_POFWARN()) {
    a336:	f7ff ff6d 	bl	a214 <suspend_pofwarn>
    a33a:	4604      	mov	r4, r0
    a33c:	b988      	cbnz	r0, a362 <flash_nrf_erase+0xa2>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    a33e:	4640      	mov	r0, r8
    a340:	f003 f8e2 	bl	d508 <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
    a344:	f899 3000 	ldrb.w	r3, [r9]
    a348:	b10b      	cbz	r3, a34e <flash_nrf_erase+0x8e>
    a34a:	f7ff ff53 	bl	a1f4 <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
    a34e:	1bad      	subs	r5, r5, r6
    a350:	44b0      	add	r8, r6
    a352:	d1f0      	bne.n	a336 <flash_nrf_erase+0x76>
	z_impl_k_sem_give(sem);
    a354:	480c      	ldr	r0, [pc, #48]	; (a388 <flash_nrf_erase+0xc8>)
    a356:	f004 fbad 	bl	eab4 <z_impl_k_sem_give>
}
    a35a:	4620      	mov	r0, r4
    a35c:	46bd      	mov	sp, r7
    a35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -ECANCELED;
    a362:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    a366:	e7f5      	b.n	a354 <flash_nrf_erase+0x94>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    a368:	4b08      	ldr	r3, [pc, #32]	; (a38c <flash_nrf_erase+0xcc>)
    a36a:	466c      	mov	r4, sp
    a36c:	b088      	sub	sp, #32
    a36e:	466a      	mov	r2, sp
    a370:	e9c2 3905 	strd	r3, r9, [r2, #20]
    a374:	2304      	movs	r3, #4
    a376:	61d5      	str	r5, [r2, #28]
    a378:	f842 3f10 	str.w	r3, [r2, #16]!
    a37c:	4603      	mov	r3, r0
    a37e:	e7c3      	b.n	a308 <flash_nrf_erase+0x48>
    a380:	0003cf45 	.word	0x0003cf45
    a384:	0001c838 	.word	0x0001c838
    a388:	20010ffc 	.word	0x20010ffc
    a38c:	0003cf28 	.word	0x0003cf28
    a390:	200245da 	.word	0x200245da

0000a394 <flash_nrf_write>:
{
    a394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a398:	460e      	mov	r6, r1
    a39a:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
    a39c:	4619      	mov	r1, r3
    a39e:	4630      	mov	r0, r6
{
    a3a0:	4690      	mov	r8, r2
    a3a2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    a3a4:	f00d fe78 	bl	18098 <is_regular_addr_valid>
    a3a8:	b9b0      	cbnz	r0, a3d8 <flash_nrf_write+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    a3aa:	466d      	mov	r5, sp
    a3ac:	4b26      	ldr	r3, [pc, #152]	; (a448 <flash_nrf_write+0xb4>)
    a3ae:	b088      	sub	sp, #32
    a3b0:	466a      	mov	r2, sp
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    a3b2:	e9c2 3605 	strd	r3, r6, [r2, #20]
    a3b6:	2304      	movs	r3, #4
    a3b8:	61d4      	str	r4, [r2, #28]
    a3ba:	f842 3f10 	str.w	r3, [r2, #16]!
    a3be:	4823      	ldr	r0, [pc, #140]	; (a44c <flash_nrf_write+0xb8>)
    a3c0:	2300      	movs	r3, #0
    a3c2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a3c6:	f7fd fac3 	bl	7950 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
    a3ca:	f06f 0415 	mvn.w	r4, #21
    a3ce:	46ad      	mov	sp, r5
}
    a3d0:	4620      	mov	r0, r4
    a3d2:	46bd      	mov	sp, r7
    a3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (data & 0x3) ? false : true;
    a3d8:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    a3dc:	f015 0503 	ands.w	r5, r5, #3
    a3e0:	d004      	beq.n	a3ec <flash_nrf_write+0x58>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    a3e2:	466d      	mov	r5, sp
    a3e4:	b088      	sub	sp, #32
    a3e6:	4b1a      	ldr	r3, [pc, #104]	; (a450 <flash_nrf_write+0xbc>)
    a3e8:	466a      	mov	r2, sp
    a3ea:	e7e2      	b.n	a3b2 <flash_nrf_write+0x1e>
	if (!len) {
    a3ec:	2c00      	cmp	r4, #0
    a3ee:	d0ef      	beq.n	a3d0 <flash_nrf_write+0x3c>
	return z_impl_k_sem_take(sem, timeout);
    a3f0:	4818      	ldr	r0, [pc, #96]	; (a454 <flash_nrf_write+0xc0>)
	if (pofcon_enabled) {
    a3f2:	f8df a068 	ldr.w	sl, [pc, #104]	; a45c <flash_nrf_write+0xc8>
    a3f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a3fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a3fe:	f004 fb97 	bl	eb30 <z_impl_k_sem_take>
static int write_op(void *context)
    a402:	f024 0403 	bic.w	r4, r4, #3
	while (w_ctx->len >= sizeof(uint32_t)) {
    a406:	42ac      	cmp	r4, r5
    a408:	eb06 0905 	add.w	r9, r6, r5
    a40c:	d109      	bne.n	a422 <flash_nrf_write+0x8e>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    a40e:	4a12      	ldr	r2, [pc, #72]	; (a458 <flash_nrf_write+0xc4>)
    a410:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    a414:	07db      	lsls	r3, r3, #31
    a416:	d5fb      	bpl.n	a410 <flash_nrf_write+0x7c>
	return FLASH_OP_DONE;
    a418:	2400      	movs	r4, #0
	z_impl_k_sem_give(sem);
    a41a:	480e      	ldr	r0, [pc, #56]	; (a454 <flash_nrf_write+0xc0>)
    a41c:	f004 fb4a 	bl	eab4 <z_impl_k_sem_give>
}
    a420:	e7d6      	b.n	a3d0 <flash_nrf_write+0x3c>
		if (SUSPEND_POFWARN()) {
    a422:	f7ff fef7 	bl	a214 <suspend_pofwarn>
    a426:	b958      	cbnz	r0, a440 <flash_nrf_write+0xac>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    a428:	f858 1005 	ldr.w	r1, [r8, r5]
    a42c:	4648      	mov	r0, r9
    a42e:	f003 f8a5 	bl	d57c <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
    a432:	f89a 3000 	ldrb.w	r3, [sl]
    a436:	b10b      	cbz	r3, a43c <flash_nrf_write+0xa8>
    a438:	f7ff fedc 	bl	a1f4 <restore_pofwarn.part.0>
	w_ctx->len -= shift;
    a43c:	3504      	adds	r5, #4
}
    a43e:	e7e2      	b.n	a406 <flash_nrf_write+0x72>
			return -ECANCELED;
    a440:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    a444:	e7e9      	b.n	a41a <flash_nrf_write+0x86>
    a446:	bf00      	nop
    a448:	0003cf28 	.word	0x0003cf28
    a44c:	0001c838 	.word	0x0001c838
    a450:	0003cf64 	.word	0x0003cf64
    a454:	20010ffc 	.word	0x20010ffc
    a458:	4001e000 	.word	0x4001e000
    a45c:	200245da 	.word	0x200245da

0000a460 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    a460:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    a462:	794b      	ldrb	r3, [r1, #5]
    a464:	2b01      	cmp	r3, #1
    a466:	d026      	beq.n	a4b6 <uarte_nrfx_configure+0x56>
    a468:	2b03      	cmp	r3, #3
    a46a:	d121      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    a46c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    a46e:	798b      	ldrb	r3, [r1, #6]
    a470:	2b03      	cmp	r3, #3
    a472:	d11d      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    a474:	79cc      	ldrb	r4, [r1, #7]
    a476:	b10c      	cbz	r4, a47c <uarte_nrfx_configure+0x1c>
    a478:	2c01      	cmp	r4, #1
    a47a:	d119      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    a47c:	790a      	ldrb	r2, [r1, #4]
    a47e:	b112      	cbz	r2, a486 <uarte_nrfx_configure+0x26>
    a480:	2a02      	cmp	r2, #2
    a482:	d115      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    a484:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    a486:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    a488:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    a48a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    a48e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    a490:	d065      	beq.n	a55e <uarte_nrfx_configure+0xfe>
    a492:	d82d      	bhi.n	a4f0 <uarte_nrfx_configure+0x90>
    a494:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    a498:	d064      	beq.n	a564 <uarte_nrfx_configure+0x104>
    a49a:	d816      	bhi.n	a4ca <uarte_nrfx_configure+0x6a>
    a49c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    a4a0:	d062      	beq.n	a568 <uarte_nrfx_configure+0x108>
    a4a2:	d80a      	bhi.n	a4ba <uarte_nrfx_configure+0x5a>
    a4a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a4a8:	d061      	beq.n	a56e <uarte_nrfx_configure+0x10e>
    a4aa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    a4ae:	d061      	beq.n	a574 <uarte_nrfx_configure+0x114>
    a4b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a4b4:	e052      	b.n	a55c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    a4b6:	2600      	movs	r6, #0
    a4b8:	e7d9      	b.n	a46e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    a4ba:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    a4be:	d05c      	beq.n	a57a <uarte_nrfx_configure+0x11a>
    a4c0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    a4c4:	d1f4      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    a4c6:	4b37      	ldr	r3, [pc, #220]	; (a5a4 <uarte_nrfx_configure+0x144>)
    a4c8:	e03c      	b.n	a544 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a4ca:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    a4ce:	d057      	beq.n	a580 <uarte_nrfx_configure+0x120>
    a4d0:	d807      	bhi.n	a4e2 <uarte_nrfx_configure+0x82>
    a4d2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    a4d6:	d055      	beq.n	a584 <uarte_nrfx_configure+0x124>
    a4d8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    a4dc:	d1e8      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    a4de:	4b32      	ldr	r3, [pc, #200]	; (a5a8 <uarte_nrfx_configure+0x148>)
    a4e0:	e030      	b.n	a544 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a4e2:	f647 2712 	movw	r7, #31250	; 0x7a12
    a4e6:	42bb      	cmp	r3, r7
    a4e8:	d1e2      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    a4ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    a4ee:	e029      	b.n	a544 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a4f0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    a4f4:	d048      	beq.n	a588 <uarte_nrfx_configure+0x128>
    a4f6:	d813      	bhi.n	a520 <uarte_nrfx_configure+0xc0>
    a4f8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    a4fc:	d047      	beq.n	a58e <uarte_nrfx_configure+0x12e>
    a4fe:	d809      	bhi.n	a514 <uarte_nrfx_configure+0xb4>
    a500:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    a504:	42bb      	cmp	r3, r7
    a506:	d044      	beq.n	a592 <uarte_nrfx_configure+0x132>
    a508:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    a50c:	d1d0      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    a50e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    a512:	e017      	b.n	a544 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a514:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    a518:	d1ca      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    a51a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    a51e:	e011      	b.n	a544 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a520:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    a524:	d038      	beq.n	a598 <uarte_nrfx_configure+0x138>
    a526:	d808      	bhi.n	a53a <uarte_nrfx_configure+0xda>
    a528:	4f20      	ldr	r7, [pc, #128]	; (a5ac <uarte_nrfx_configure+0x14c>)
    a52a:	42bb      	cmp	r3, r7
    a52c:	d037      	beq.n	a59e <uarte_nrfx_configure+0x13e>
    a52e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    a532:	d1bd      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    a534:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    a538:	e004      	b.n	a544 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a53a:	4f1d      	ldr	r7, [pc, #116]	; (a5b0 <uarte_nrfx_configure+0x150>)
    a53c:	42bb      	cmp	r3, r7
    a53e:	d1b7      	bne.n	a4b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    a540:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    a544:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    a546:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    a54a:	1d03      	adds	r3, r0, #4
    a54c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    a54e:	4334      	orrs	r4, r6
    a550:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a552:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    a556:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    a55a:	2000      	movs	r0, #0
}
    a55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    a55e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    a562:	e7ef      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    a564:	4b13      	ldr	r3, [pc, #76]	; (a5b4 <uarte_nrfx_configure+0x154>)
    a566:	e7ed      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    a568:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    a56c:	e7ea      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    a56e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    a572:	e7e7      	b.n	a544 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a574:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    a578:	e7e4      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    a57a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    a57e:	e7e1      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    a580:	4b0d      	ldr	r3, [pc, #52]	; (a5b8 <uarte_nrfx_configure+0x158>)
    a582:	e7df      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    a584:	4b0d      	ldr	r3, [pc, #52]	; (a5bc <uarte_nrfx_configure+0x15c>)
    a586:	e7dd      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    a588:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    a58c:	e7da      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    a58e:	4b0c      	ldr	r3, [pc, #48]	; (a5c0 <uarte_nrfx_configure+0x160>)
    a590:	e7d8      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    a592:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    a596:	e7d5      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    a598:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    a59c:	e7d2      	b.n	a544 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    a59e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a5a2:	e7cf      	b.n	a544 <uarte_nrfx_configure+0xe4>
    a5a4:	0013b000 	.word	0x0013b000
    a5a8:	004ea000 	.word	0x004ea000
    a5ac:	0003d090 	.word	0x0003d090
    a5b0:	000f4240 	.word	0x000f4240
    a5b4:	00275000 	.word	0x00275000
    a5b8:	0075c000 	.word	0x0075c000
    a5bc:	003af000 	.word	0x003af000
    a5c0:	013a9000 	.word	0x013a9000

0000a5c4 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    a5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    a5c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    a5cc:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    a5ce:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    a5d2:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    a5d6:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a5d8:	2100      	movs	r1, #0
    a5da:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    a5de:	4607      	mov	r7, r0
	data->dev = dev;
    a5e0:	6030      	str	r0, [r6, #0]
	ret = pinctrl_lookup_state(config, id, &state);
    a5e2:	466a      	mov	r2, sp
    a5e4:	4648      	mov	r0, r9
    a5e6:	f00d fe1c 	bl	18222 <pinctrl_lookup_state>
	if (ret < 0) {
    a5ea:	1e05      	subs	r5, r0, #0
    a5ec:	db26      	blt.n	a63c <uarte_instance_init.constprop.0+0x78>
	return pinctrl_apply_state_direct(config, state);
    a5ee:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a5f0:	f8d9 2000 	ldr.w	r2, [r9]
    a5f4:	7919      	ldrb	r1, [r3, #4]
    a5f6:	6818      	ldr	r0, [r3, #0]
    a5f8:	f00d fe6b 	bl	182d2 <pinctrl_configure_pins>
	if (err < 0) {
    a5fc:	1e05      	subs	r5, r0, #0
    a5fe:	db1d      	blt.n	a63c <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    a600:	1d31      	adds	r1, r6, #4
    a602:	4638      	mov	r0, r7
    a604:	f7ff ff2c 	bl	a460 <uarte_nrfx_configure>
	if (err) {
    a608:	4605      	mov	r5, r0
    a60a:	b9b8      	cbnz	r0, a63c <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    a60c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    a610:	0799      	lsls	r1, r3, #30
    a612:	d52a      	bpl.n	a66a <uarte_instance_init.constprop.0+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    a614:	f106 0012 	add.w	r0, r6, #18
    a618:	f003 fa1c 	bl	da54 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    a61c:	4b28      	ldr	r3, [pc, #160]	; (a6c0 <uarte_instance_init.constprop.0+0xfc>)
    a61e:	4298      	cmp	r0, r3
    a620:	d010      	beq.n	a644 <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    a622:	4b28      	ldr	r3, [pc, #160]	; (a6c4 <uarte_instance_init.constprop.0+0x100>)
    a624:	9305      	str	r3, [sp, #20]
    a626:	2302      	movs	r3, #2
    a628:	9304      	str	r3, [sp, #16]
    a62a:	4827      	ldr	r0, [pc, #156]	; (a6c8 <uarte_instance_init.constprop.0+0x104>)
    a62c:	462b      	mov	r3, r5
    a62e:	aa04      	add	r2, sp, #16
    a630:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    a634:	f06f 0504 	mvn.w	r5, #4
    a638:	f7fd f98a 	bl	7950 <z_impl_z_log_msg2_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    a63c:	4628      	mov	r0, r5
    a63e:	b007      	add	sp, #28
    a640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    a644:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    a646:	00c3      	lsls	r3, r0, #3
    a648:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a64c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    a650:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    a654:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    a658:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    a65c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    a660:	4a1a      	ldr	r2, [pc, #104]	; (a6cc <uarte_instance_init.constprop.0+0x108>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    a662:	2301      	movs	r3, #1
    a664:	4083      	lsls	r3, r0
    a666:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a66a:	2308      	movs	r3, #8
    a66c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    a670:	f898 3008 	ldrb.w	r3, [r8, #8]
    a674:	b95b      	cbnz	r3, a68e <uarte_instance_init.constprop.0+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a676:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    a67a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    a67e:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a682:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a686:	2301      	movs	r3, #1
    a688:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a68c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    a68e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a692:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    a694:	bf5c      	itt	pl
    a696:	f44f 7280 	movpl.w	r2, #256	; 0x100
    a69a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a69e:	06db      	lsls	r3, r3, #27
    a6a0:	bf44      	itt	mi
    a6a2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    a6a6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    a6aa:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    a6ac:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a6ae:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a6b2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6b6:	2301      	movs	r3, #1
    a6b8:	60a3      	str	r3, [r4, #8]
    a6ba:	60e3      	str	r3, [r4, #12]
	return 0;
    a6bc:	e7be      	b.n	a63c <uarte_instance_init.constprop.0+0x78>
    a6be:	bf00      	nop
    a6c0:	0bad0000 	.word	0x0bad0000
    a6c4:	0003cf9f 	.word	0x0003cf9f
    a6c8:	0001c878 	.word	0x0001c878
    a6cc:	4001f000 	.word	0x4001f000

0000a6d0 <uarte_nrfx_poll_out>:
{
    a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    a6d2:	6906      	ldr	r6, [r0, #16]
{
    a6d4:	4605      	mov	r5, r0
    a6d6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a6d8:	f00e f968 	bl	189ac <k_is_in_isr>
    a6dc:	b910      	cbnz	r0, a6e4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    a6de:	4b2c      	ldr	r3, [pc, #176]	; (a790 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    a6e0:	781b      	ldrb	r3, [r3, #0]
    a6e2:	b983      	cbnz	r3, a706 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    a6e4:	f04f 0320 	mov.w	r3, #32
    a6e8:	f3ef 8411 	mrs	r4, BASEPRI
    a6ec:	f383 8812 	msr	BASEPRI_MAX, r3
    a6f0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a6f4:	6868      	ldr	r0, [r5, #4]
    a6f6:	f00d fd27 	bl	18148 <is_tx_ready.isra.0>
    a6fa:	bb28      	cbnz	r0, a748 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    a6fc:	f384 8811 	msr	BASEPRI, r4
    a700:	f3bf 8f6f 	isb	sy
}
    a704:	e7ee      	b.n	a6e4 <uarte_nrfx_poll_out+0x14>
{
    a706:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    a708:	6868      	ldr	r0, [r5, #4]
    a70a:	f00d fd1d 	bl	18148 <is_tx_ready.isra.0>
    a70e:	b970      	cbnz	r0, a72e <uarte_nrfx_poll_out+0x5e>
    a710:	2001      	movs	r0, #1
    a712:	f00e f824 	bl	1875e <nrfx_busy_wait>
    a716:	3c01      	subs	r4, #1
    a718:	d1f6      	bne.n	a708 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    a71a:	2100      	movs	r1, #0
    a71c:	2021      	movs	r0, #33	; 0x21
    a71e:	f005 fc71 	bl	10004 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    a722:	e7f0      	b.n	a706 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    a724:	f384 8811 	msr	BASEPRI, r4
    a728:	f3bf 8f6f 	isb	sy
}
    a72c:	e7f5      	b.n	a71a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    a72e:	f04f 0320 	mov.w	r3, #32
    a732:	f3ef 8411 	mrs	r4, BASEPRI
    a736:	f383 8812 	msr	BASEPRI_MAX, r3
    a73a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a73e:	6868      	ldr	r0, [r5, #4]
    a740:	f00d fd02 	bl	18148 <is_tx_ready.isra.0>
    a744:	2800      	cmp	r0, #0
    a746:	d0ed      	beq.n	a724 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    a748:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    a74c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    a74e:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    a750:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a752:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a756:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a75a:	2200      	movs	r2, #0
    a75c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    a760:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    a764:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    a768:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a76c:	684a      	ldr	r2, [r1, #4]
    a76e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a770:	bf41      	itttt	mi
    a772:	2208      	movmi	r2, #8
    a774:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    a778:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    a77c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a780:	2201      	movs	r2, #1
    a782:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    a784:	f384 8811 	msr	BASEPRI, r4
    a788:	f3bf 8f6f 	isb	sy
}
    a78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a78e:	bf00      	nop
    a790:	200249ec 	.word	0x200249ec

0000a794 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    a794:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a796:	2301      	movs	r3, #1
    a798:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a79a:	4a11      	ldr	r2, [pc, #68]	; (a7e0 <compare_int_lock+0x4c>)
    a79c:	f3bf 8f5b 	dmb	ish
    a7a0:	43dc      	mvns	r4, r3
    a7a2:	e852 1f00 	ldrex	r1, [r2]
    a7a6:	ea01 0c04 	and.w	ip, r1, r4
    a7aa:	e842 ce00 	strex	lr, ip, [r2]
    a7ae:	f1be 0f00 	cmp.w	lr, #0
    a7b2:	d1f6      	bne.n	a7a2 <compare_int_lock+0xe>
    a7b4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a7b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a7bc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    a7c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    a7c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    a7c8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    a7cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a7d0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    a7d4:	420b      	tst	r3, r1
}
    a7d6:	bf14      	ite	ne
    a7d8:	2001      	movne	r0, #1
    a7da:	2000      	moveq	r0, #0
    a7dc:	bd10      	pop	{r4, pc}
    a7de:	bf00      	nop
    a7e0:	20011010 	.word	0x20011010

0000a7e4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a7e4:	4919      	ldr	r1, [pc, #100]	; (a84c <sys_clock_timeout_handler+0x68>)
{
    a7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a7e8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    a7ea:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a7ee:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    a7f0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    a7f4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a7f8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    a7fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    a7fe:	d222      	bcs.n	a846 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    a800:	4b13      	ldr	r3, [pc, #76]	; (a850 <sys_clock_timeout_handler+0x6c>)
    a802:	681b      	ldr	r3, [r3, #0]
    a804:	0a1a      	lsrs	r2, r3, #8
    a806:	061b      	lsls	r3, r3, #24
    a808:	195e      	adds	r6, r3, r5
    a80a:	4b12      	ldr	r3, [pc, #72]	; (a854 <sys_clock_timeout_handler+0x70>)
    a80c:	f142 0700 	adc.w	r7, r2, #0
    a810:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    a814:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    a816:	f005 ff63 	bl	106e0 <sys_clock_announce>
    return p_reg->CC[ch];
    a81a:	00a3      	lsls	r3, r4, #2
    a81c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a820:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    a824:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    a828:	42aa      	cmp	r2, r5
    a82a:	d10b      	bne.n	a844 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    a82c:	b91e      	cbnz	r6, a836 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    a82e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    a832:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    a836:	4b08      	ldr	r3, [pc, #32]	; (a858 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a838:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    a83c:	fa00 f404 	lsl.w	r4, r0, r4
    a840:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    a844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a846:	2600      	movs	r6, #0
    a848:	e7e5      	b.n	a816 <sys_clock_timeout_handler+0x32>
    a84a:	bf00      	nop
    a84c:	20000bb0 	.word	0x20000bb0
    a850:	20011014 	.word	0x20011014
    a854:	20000b98 	.word	0x20000b98
    a858:	40011000 	.word	0x40011000

0000a85c <compare_int_unlock>:
	if (key) {
    a85c:	b319      	cbz	r1, a8a6 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a85e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    a862:	2301      	movs	r3, #1
    a864:	4a10      	ldr	r2, [pc, #64]	; (a8a8 <compare_int_unlock+0x4c>)
    a866:	4083      	lsls	r3, r0
    a868:	e852 1f00 	ldrex	r1, [r2]
    a86c:	4319      	orrs	r1, r3
    a86e:	e842 1c00 	strex	ip, r1, [r2]
    a872:	f1bc 0f00 	cmp.w	ip, #0
    a876:	d1f7      	bne.n	a868 <compare_int_unlock+0xc>
    a878:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    a87c:	4a0b      	ldr	r2, [pc, #44]	; (a8ac <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a87e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a882:	4083      	lsls	r3, r0
    a884:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a888:	4b09      	ldr	r3, [pc, #36]	; (a8b0 <compare_int_unlock+0x54>)
    a88a:	f3bf 8f5b 	dmb	ish
    a88e:	681b      	ldr	r3, [r3, #0]
    a890:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    a894:	fa23 f000 	lsr.w	r0, r3, r0
    a898:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a89a:	bf42      	ittt	mi
    a89c:	4b05      	ldrmi	r3, [pc, #20]	; (a8b4 <compare_int_unlock+0x58>)
    a89e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    a8a2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    a8a6:	4770      	bx	lr
    a8a8:	20011010 	.word	0x20011010
    a8ac:	40011000 	.word	0x40011000
    a8b0:	2001100c 	.word	0x2001100c
    a8b4:	e000e100 	.word	0xe000e100

0000a8b8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    a8b8:	4b0d      	ldr	r3, [pc, #52]	; (a8f0 <z_nrf_rtc_timer_read+0x38>)
    a8ba:	6818      	ldr	r0, [r3, #0]
    a8bc:	0a01      	lsrs	r1, r0, #8
    a8be:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    a8c0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    a8c4:	4b0b      	ldr	r3, [pc, #44]	; (a8f4 <z_nrf_rtc_timer_read+0x3c>)
    a8c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    a8ca:	1818      	adds	r0, r3, r0
    a8cc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    a8d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    a8d4:	d20a      	bcs.n	a8ec <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    a8d6:	4b08      	ldr	r3, [pc, #32]	; (a8f8 <z_nrf_rtc_timer_read+0x40>)
    a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8dc:	4290      	cmp	r0, r2
    a8de:	eb71 0303 	sbcs.w	r3, r1, r3
    a8e2:	d203      	bcs.n	a8ec <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    a8e4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    a8e8:	f141 0100 	adc.w	r1, r1, #0
}
    a8ec:	4770      	bx	lr
    a8ee:	bf00      	nop
    a8f0:	20011014 	.word	0x20011014
    a8f4:	40011000 	.word	0x40011000
    a8f8:	20000b98 	.word	0x20000b98

0000a8fc <compare_set>:
{
    a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a900:	ed2d 8b02 	vpush	{d8}
    a904:	b085      	sub	sp, #20
    a906:	4616      	mov	r6, r2
    a908:	4698      	mov	r8, r3
    a90a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    a90c:	f7ff ff42 	bl	a794 <compare_int_lock>
    a910:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    a914:	f7ff ffd0 	bl	a8b8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    a918:	42b0      	cmp	r0, r6
    a91a:	eb71 0308 	sbcs.w	r3, r1, r8
    a91e:	d27b      	bcs.n	aa18 <compare_set+0x11c>
		if (target_time - curr_time > COUNTER_SPAN) {
    a920:	4b47      	ldr	r3, [pc, #284]	; (aa40 <compare_set+0x144>)
    a922:	1a30      	subs	r0, r6, r0
    a924:	eb68 0101 	sbc.w	r1, r8, r1
    a928:	4298      	cmp	r0, r3
    a92a:	f171 0300 	sbcs.w	r3, r1, #0
    a92e:	f080 8084 	bcs.w	aa3a <compare_set+0x13e>
		if (target_time != cc_data[chan].target_time) {
    a932:	4b44      	ldr	r3, [pc, #272]	; (aa44 <compare_set+0x148>)
    a934:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    a938:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    a93c:	45d8      	cmp	r8, fp
    a93e:	bf08      	it	eq
    a940:	4556      	cmpeq	r6, sl
    a942:	d051      	beq.n	a9e8 <compare_set+0xec>
    a944:	ea4f 0985 	mov.w	r9, r5, lsl #2
    a948:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a94c:	f105 0750 	add.w	r7, r5, #80	; 0x50
    a950:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    a954:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a956:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    a95a:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a95e:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    a960:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    a964:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a968:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    a96a:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    a96e:	4b36      	ldr	r3, [pc, #216]	; (aa48 <compare_set+0x14c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a970:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    a974:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    a976:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a97a:	1a40      	subs	r0, r0, r1
    a97c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a980:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    a984:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    a986:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    a98a:	d107      	bne.n	a99c <compare_set+0xa0>
    a98c:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    a990:	2013      	movs	r0, #19
    a992:	f00e f877 	bl	18a84 <z_impl_k_busy_wait>
    a996:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    a99a:	4b2b      	ldr	r3, [pc, #172]	; (aa48 <compare_set+0x14c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    a99c:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    a9a0:	eba4 000c 	sub.w	r0, r4, ip
    a9a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    a9a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a9ac:	bf88      	it	hi
    a9ae:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a9b0:	2000      	movs	r0, #0
    a9b2:	6038      	str	r0, [r7, #0]
    a9b4:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    a9b6:	9801      	ldr	r0, [sp, #4]
    a9b8:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a9bc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    a9c0:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    a9c4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    a9c8:	4281      	cmp	r1, r0
    a9ca:	d006      	beq.n	a9da <compare_set+0xde>
	return (a - b) & COUNTER_MAX;
    a9cc:	1a20      	subs	r0, r4, r0
    a9ce:	3802      	subs	r0, #2
    a9d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    a9d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a9d8:	d81c      	bhi.n	aa14 <compare_set+0x118>
	return (a - b) & COUNTER_MAX;
    a9da:	1aa4      	subs	r4, r4, r2
    a9dc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    a9e0:	eb14 0a06 	adds.w	sl, r4, r6
    a9e4:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    a9e8:	4916      	ldr	r1, [pc, #88]	; (aa44 <compare_set+0x148>)
	cc_data[chan].callback = handler;
    a9ea:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
    a9ec:	012b      	lsls	r3, r5, #4
    a9ee:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    a9f2:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    a9f6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    a9f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a9fa:	6053      	str	r3, [r2, #4]
	return ret;
    a9fc:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    a9fe:	4628      	mov	r0, r5
    aa00:	ee18 1a10 	vmov	r1, s16
    aa04:	f7ff ff2a 	bl	a85c <compare_int_unlock>
}
    aa08:	4620      	mov	r0, r4
    aa0a:	b005      	add	sp, #20
    aa0c:	ecbd 8b02 	vpop	{d8}
    aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa14:	4620      	mov	r0, r4
    aa16:	e7ae      	b.n	a976 <compare_set+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    aa18:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aa1a:	4a0c      	ldr	r2, [pc, #48]	; (aa4c <compare_set+0x150>)
    aa1c:	f3bf 8f5b 	dmb	ish
    aa20:	40ab      	lsls	r3, r5
    aa22:	e852 1f00 	ldrex	r1, [r2]
    aa26:	4319      	orrs	r1, r3
    aa28:	e842 1000 	strex	r0, r1, [r2]
    aa2c:	2800      	cmp	r0, #0
    aa2e:	d1f8      	bne.n	aa22 <compare_set+0x126>
    aa30:	f3bf 8f5b 	dmb	ish
    aa34:	46b2      	mov	sl, r6
    aa36:	46c3      	mov	fp, r8
    aa38:	e7d6      	b.n	a9e8 <compare_set+0xec>
			return -EINVAL;
    aa3a:	f06f 0415 	mvn.w	r4, #21
    aa3e:	e7de      	b.n	a9fe <compare_set+0x102>
    aa40:	01000001 	.word	0x01000001
    aa44:	20000ba0 	.word	0x20000ba0
    aa48:	40011000 	.word	0x40011000
    aa4c:	2001100c 	.word	0x2001100c

0000aa50 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    aa50:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    aa52:	4b19      	ldr	r3, [pc, #100]	; (aab8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    aa54:	4d19      	ldr	r5, [pc, #100]	; (aabc <sys_clock_driver_init+0x6c>)
    aa56:	2400      	movs	r4, #0
    aa58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa60:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    aa64:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    aa68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    aa6c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa70:	4b13      	ldr	r3, [pc, #76]	; (aac0 <sys_clock_driver_init+0x70>)
    aa72:	2602      	movs	r6, #2
    aa74:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    aa78:	2101      	movs	r1, #1
    aa7a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    aa7e:	2011      	movs	r0, #17
    aa80:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    aa84:	4622      	mov	r2, r4
    aa86:	f7fd fc2d 	bl	82e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    aa8a:	2011      	movs	r0, #17
    aa8c:	f7fd fbf8 	bl	8280 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    aa90:	4a0c      	ldr	r2, [pc, #48]	; (aac4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    aa92:	2301      	movs	r3, #1
    aa94:	60ab      	str	r3, [r5, #8]
    aa96:	602b      	str	r3, [r5, #0]
    aa98:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    aa9a:	4b0b      	ldr	r3, [pc, #44]	; (aac8 <sys_clock_driver_init+0x78>)
    aa9c:	4a0b      	ldr	r2, [pc, #44]	; (aacc <sys_clock_driver_init+0x7c>)
    aa9e:	9300      	str	r3, [sp, #0]
    aaa0:	9401      	str	r4, [sp, #4]
    aaa2:	2300      	movs	r3, #0
    aaa4:	4620      	mov	r0, r4
    aaa6:	f7ff ff29 	bl	a8fc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    aaaa:	4630      	mov	r0, r6
    aaac:	f7fe fda6 	bl	95fc <z_nrf_clock_control_lf_on>

	return 0;
}
    aab0:	4620      	mov	r0, r4
    aab2:	b002      	add	sp, #8
    aab4:	bd70      	pop	{r4, r5, r6, pc}
    aab6:	bf00      	nop
    aab8:	20000ba0 	.word	0x20000ba0
    aabc:	40011000 	.word	0x40011000
    aac0:	e000e100 	.word	0xe000e100
    aac4:	20011010 	.word	0x20011010
    aac8:	0000a7e5 	.word	0x0000a7e5
    aacc:	007fffff 	.word	0x007fffff

0000aad0 <rtc_nrf_isr>:
{
    aad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    aad4:	4c36      	ldr	r4, [pc, #216]	; (abb0 <rtc_nrf_isr+0xe0>)
    aad6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    aada:	079a      	lsls	r2, r3, #30
    aadc:	d50b      	bpl.n	aaf6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aade:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    aae2:	b143      	cbz	r3, aaf6 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    aae4:	4a33      	ldr	r2, [pc, #204]	; (abb4 <rtc_nrf_isr+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    aae6:	2300      	movs	r3, #0
    aae8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    aaec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    aaf0:	6813      	ldr	r3, [r2, #0]
    aaf2:	3301      	adds	r3, #1
    aaf4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    aaf6:	f04f 0320 	mov.w	r3, #32
    aafa:	f3ef 8211 	mrs	r2, BASEPRI
    aafe:	f383 8812 	msr	BASEPRI_MAX, r3
    ab02:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    ab06:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    ab0a:	03db      	lsls	r3, r3, #15
    ab0c:	d512      	bpl.n	ab34 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ab0e:	f3bf 8f5b 	dmb	ish
    ab12:	4b29      	ldr	r3, [pc, #164]	; (abb8 <rtc_nrf_isr+0xe8>)
    ab14:	e853 1f00 	ldrex	r1, [r3]
    ab18:	f021 0001 	bic.w	r0, r1, #1
    ab1c:	e843 0600 	strex	r6, r0, [r3]
    ab20:	2e00      	cmp	r6, #0
    ab22:	d1f7      	bne.n	ab14 <rtc_nrf_isr+0x44>
    ab24:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    ab28:	2900      	cmp	r1, #0
    ab2a:	d139      	bne.n	aba0 <rtc_nrf_isr+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ab2c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    ab30:	2b00      	cmp	r3, #0
    ab32:	d135      	bne.n	aba0 <rtc_nrf_isr+0xd0>
{
    ab34:	2300      	movs	r3, #0
	__asm__ volatile(
    ab36:	f382 8811 	msr	BASEPRI, r2
    ab3a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    ab3e:	b363      	cbz	r3, ab9a <rtc_nrf_isr+0xca>
		curr_time = z_nrf_rtc_timer_read();
    ab40:	f7ff feba 	bl	a8b8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    ab44:	f04f 0320 	mov.w	r3, #32
    ab48:	f3ef 8c11 	mrs	ip, BASEPRI
    ab4c:	f383 8812 	msr	BASEPRI_MAX, r3
    ab50:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    ab54:	4b19      	ldr	r3, [pc, #100]	; (abbc <rtc_nrf_isr+0xec>)
    ab56:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    ab5a:	42b0      	cmp	r0, r6
    ab5c:	eb71 0207 	sbcs.w	r2, r1, r7
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    ab60:	bf28      	it	cs
    ab62:	f04f 38ff 	movcs.w	r8, #4294967295	; 0xffffffff
    ab66:	f04f 0200 	mov.w	r2, #0
    ab6a:	bf21      	itttt	cs
    ab6c:	f04f 39ff 	movcs.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    ab70:	e9d3 1500 	ldrdcs	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    ab74:	e9c3 8902 	strdcs	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    ab78:	601a      	strcs	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    ab7a:	bf26      	itte	cs
    ab7c:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
    ab80:	f8c4 3348 	strcs.w	r3, [r4, #840]	; 0x348
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    ab84:	4611      	movcc	r1, r2
	__asm__ volatile(
    ab86:	f38c 8811 	msr	BASEPRI, ip
    ab8a:	f3bf 8f6f 	isb	sy
		if (handler) {
    ab8e:	b121      	cbz	r1, ab9a <rtc_nrf_isr+0xca>
			handler(chan, expire_time, user_context);
    ab90:	9500      	str	r5, [sp, #0]
    ab92:	4632      	mov	r2, r6
    ab94:	463b      	mov	r3, r7
    ab96:	2000      	movs	r0, #0
    ab98:	4788      	blx	r1
}
    ab9a:	b003      	add	sp, #12
    ab9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    aba0:	2300      	movs	r3, #0
    aba2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    aba6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    abaa:	2301      	movs	r3, #1
}
    abac:	e7c3      	b.n	ab36 <rtc_nrf_isr+0x66>
    abae:	bf00      	nop
    abb0:	40011000 	.word	0x40011000
    abb4:	20011014 	.word	0x20011014
    abb8:	2001100c 	.word	0x2001100c
    abbc:	20000ba0 	.word	0x20000ba0

0000abc0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    abc0:	1c43      	adds	r3, r0, #1
{
    abc2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    abc4:	d021      	beq.n	ac0a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    abc6:	2801      	cmp	r0, #1
    abc8:	dd21      	ble.n	ac0e <sys_clock_set_timeout+0x4e>
    abca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    abce:	da20      	bge.n	ac12 <sys_clock_set_timeout+0x52>
    abd0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    abd2:	f7ff fe71 	bl	a8b8 <z_nrf_rtc_timer_read>
    abd6:	4b10      	ldr	r3, [pc, #64]	; (ac18 <sys_clock_set_timeout+0x58>)
    abd8:	e9d3 1300 	ldrd	r1, r3, [r3]
    abdc:	1a40      	subs	r0, r0, r1
		ticks = 0;
    abde:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    abe2:	bf28      	it	cs
    abe4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    abe6:	3001      	adds	r0, #1
    abe8:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    abea:	480c      	ldr	r0, [pc, #48]	; (ac1c <sys_clock_set_timeout+0x5c>)
    abec:	4282      	cmp	r2, r0
    abee:	bf28      	it	cs
    abf0:	4602      	movcs	r2, r0
    abf2:	1852      	adds	r2, r2, r1
    abf4:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    abf8:	4909      	ldr	r1, [pc, #36]	; (ac20 <sys_clock_set_timeout+0x60>)
    abfa:	9001      	str	r0, [sp, #4]
    abfc:	9100      	str	r1, [sp, #0]
    abfe:	f143 0300 	adc.w	r3, r3, #0
    ac02:	f7ff fe7b 	bl	a8fc <compare_set>
}
    ac06:	b002      	add	sp, #8
    ac08:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    ac0a:	4804      	ldr	r0, [pc, #16]	; (ac1c <sys_clock_set_timeout+0x5c>)
    ac0c:	e7e0      	b.n	abd0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    ac0e:	2400      	movs	r4, #0
    ac10:	e7df      	b.n	abd2 <sys_clock_set_timeout+0x12>
    ac12:	4c02      	ldr	r4, [pc, #8]	; (ac1c <sys_clock_set_timeout+0x5c>)
    ac14:	e7dd      	b.n	abd2 <sys_clock_set_timeout+0x12>
    ac16:	bf00      	nop
    ac18:	20000bb0 	.word	0x20000bb0
    ac1c:	007fffff 	.word	0x007fffff
    ac20:	0000a7e5 	.word	0x0000a7e5

0000ac24 <sys_clock_elapsed>:
{
    ac24:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    ac26:	f7ff fe47 	bl	a8b8 <z_nrf_rtc_timer_read>
    ac2a:	4b02      	ldr	r3, [pc, #8]	; (ac34 <sys_clock_elapsed+0x10>)
    ac2c:	681b      	ldr	r3, [r3, #0]
}
    ac2e:	1ac0      	subs	r0, r0, r3
    ac30:	bd08      	pop	{r3, pc}
    ac32:	bf00      	nop
    ac34:	20000bb0 	.word	0x20000bb0

0000ac38 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ac38:	6802      	ldr	r2, [r0, #0]
    switch (port)
    ac3a:	0953      	lsrs	r3, r2, #5
{
    ac3c:	b510      	push	{r4, lr}
    ac3e:	4604      	mov	r4, r0
    switch (port)
    ac40:	d02c      	beq.n	ac9c <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    ac42:	2b01      	cmp	r3, #1
    ac44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ac48:	bf18      	it	ne
    ac4a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    ac4c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    ac50:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ac52:	07db      	lsls	r3, r3, #31
    ac54:	d40b      	bmi.n	ac6e <nrf_gpio_pin_port_decode+0x36>
    ac56:	4914      	ldr	r1, [pc, #80]	; (aca8 <nrf_gpio_pin_port_decode+0x70>)
    ac58:	4814      	ldr	r0, [pc, #80]	; (acac <nrf_gpio_pin_port_decode+0x74>)
    ac5a:	4a15      	ldr	r2, [pc, #84]	; (acb0 <nrf_gpio_pin_port_decode+0x78>)
    ac5c:	f240 2329 	movw	r3, #553	; 0x229
    ac60:	f00c fff5 	bl	17c4e <assert_print>
    ac64:	4812      	ldr	r0, [pc, #72]	; (acb0 <nrf_gpio_pin_port_decode+0x78>)
    ac66:	f240 2129 	movw	r1, #553	; 0x229
    ac6a:	f00c ffe9 	bl	17c40 <assert_post_action>
    uint32_t pin_number = *p_pin;
    ac6e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    ac70:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ac74:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    ac76:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ac78:	d00d      	beq.n	ac96 <nrf_gpio_pin_port_decode+0x5e>
    ac7a:	2b01      	cmp	r3, #1
    ac7c:	d011      	beq.n	aca2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    ac7e:	490d      	ldr	r1, [pc, #52]	; (acb4 <nrf_gpio_pin_port_decode+0x7c>)
    ac80:	480a      	ldr	r0, [pc, #40]	; (acac <nrf_gpio_pin_port_decode+0x74>)
    ac82:	4a0b      	ldr	r2, [pc, #44]	; (acb0 <nrf_gpio_pin_port_decode+0x78>)
    ac84:	f240 232e 	movw	r3, #558	; 0x22e
    ac88:	f00c ffe1 	bl	17c4e <assert_print>
    ac8c:	4808      	ldr	r0, [pc, #32]	; (acb0 <nrf_gpio_pin_port_decode+0x78>)
    ac8e:	f240 212e 	movw	r1, #558	; 0x22e
    ac92:	f00c ffd5 	bl	17c40 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ac96:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    ac9a:	bd10      	pop	{r4, pc}
    switch (port)
    ac9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aca0:	e7d4      	b.n	ac4c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    aca2:	4805      	ldr	r0, [pc, #20]	; (acb8 <nrf_gpio_pin_port_decode+0x80>)
    aca4:	e7f9      	b.n	ac9a <nrf_gpio_pin_port_decode+0x62>
    aca6:	bf00      	nop
    aca8:	0003ccc9 	.word	0x0003ccc9
    acac:	0003baf1 	.word	0x0003baf1
    acb0:	0003cc96 	.word	0x0003cc96
    acb4:	0003d09f 	.word	0x0003d09f
    acb8:	50000300 	.word	0x50000300

0000acbc <_ZN2ei5numpy19dequantize_zero_oneEh>:
        return quantized_values_one_zero[value];
    acbc:	4b02      	ldr	r3, [pc, #8]	; (acc8 <_ZN2ei5numpy19dequantize_zero_oneEh+0xc>)
    acbe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
    acc2:	ed90 0a00 	vldr	s0, [r0]
    acc6:	4770      	bx	lr
    acc8:	0001d71c 	.word	0x0001d71c

0000accc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
    static float ceil_unless_very_close_to_floor(float v) {
    accc:	b508      	push	{r3, lr}
    acce:	ed2d 8b02 	vpush	{d8}
    acd2:	eeb0 8a40 	vmov.f32	s16, s0
    acd6:	f00a fbd3 	bl	15480 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
    acda:	eeb4 8ac0 	vcmpe.f32	s16, s0
    acde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ace2:	dd08      	ble.n	acf6 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x2a>
    ace4:	ee78 7a40 	vsub.f32	s15, s16, s0
    ace8:	ed9f 7a08 	vldr	s14, [pc, #32]	; ad0c <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x40>
    acec:	eef4 7ac7 	vcmpe.f32	s15, s14
    acf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acf4:	d407      	bmi.n	ad06 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x3a>
  { return __builtin_ceilf(__x); }
    acf6:	eeb0 0a48 	vmov.f32	s0, s16
    }
    acfa:	ecbd 8b02 	vpop	{d8}
    acfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ad02:	f00a bb7b 	b.w	153fc <ceilf>
    ad06:	ecbd 8b02 	vpop	{d8}
    ad0a:	bd08      	pop	{r3, pc}
    ad0c:	3a83126f 	.word	0x3a83126f

0000ad10 <_ZL15can_read_resultv>:
		processing_finished(err);
	}
}

static bool can_read_result(void)
{
    ad10:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
    ad12:	f005 f9af 	bl	10074 <z_impl_z_current_get>
	/* User is allowed to access results only from the result ready callback. */
	return (k_current_get() == ei_thread_id);
    ad16:	4b03      	ldr	r3, [pc, #12]	; (ad24 <_ZL15can_read_resultv+0x14>)
    ad18:	681b      	ldr	r3, [r3, #0]
}
    ad1a:	1a1b      	subs	r3, r3, r0
    ad1c:	4258      	negs	r0, r3
    ad1e:	4158      	adcs	r0, r3
    ad20:	bd08      	pop	{r3, pc}
    ad22:	bf00      	nop
    ad24:	2001101c 	.word	0x2001101c

0000ad28 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
    ad28:	b508      	push	{r3, lr}
	assert(ptr);
    ad2a:	b928      	cbnz	r0, ad38 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
    ad2c:	4b06      	ldr	r3, [pc, #24]	; (ad48 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
    ad2e:	4a07      	ldr	r2, [pc, #28]	; (ad4c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
    ad30:	4807      	ldr	r0, [pc, #28]	; (ad50 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
    ad32:	215f      	movs	r1, #95	; 0x5f
    ad34:	f00a ff88 	bl	15c48 <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
    ad38:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
    ad3c:	1ac0      	subs	r0, r0, r3
}
    ad3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
    ad42:	f00d beed 	b.w	18b20 <_Z7ei_freePv>
    ad46:	bf00      	nop
    ad48:	0003e970 	.word	0x0003e970
    ad4c:	0003cff0 	.word	0x0003cff0
    ad50:	0003d019 	.word	0x0003d019

0000ad54 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
    ad54:	1e43      	subs	r3, r0, #1
    ad56:	4203      	tst	r3, r0
{
    ad58:	b510      	push	{r4, lr}
    ad5a:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
    ad5c:	d005      	beq.n	ad6a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
    ad5e:	4b0d      	ldr	r3, [pc, #52]	; (ad94 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
    ad60:	4a0d      	ldr	r2, [pc, #52]	; (ad98 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
    ad62:	480e      	ldr	r0, [pc, #56]	; (ad9c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
    ad64:	213c      	movs	r1, #60	; 0x3c
    ad66:	f00a ff6f 	bl	15c48 <__assert_func>
	if(align && size)
    ad6a:	b910      	cbnz	r0, ad72 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
    ad6c:	2400      	movs	r4, #0
}
    ad6e:	4620      	mov	r0, r4
    ad70:	bd10      	pop	{r4, pc}
	if(align && size)
    ad72:	2900      	cmp	r1, #0
    ad74:	d0fa      	beq.n	ad6c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
    ad76:	1c48      	adds	r0, r1, #1
    ad78:	4420      	add	r0, r4
    ad7a:	2101      	movs	r1, #1
    ad7c:	f00d fece 	bl	18b1c <_Z9ei_callocjj>
		if(p)
    ad80:	2800      	cmp	r0, #0
    ad82:	d0f3      	beq.n	ad6c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
    ad84:	1c63      	adds	r3, r4, #1
    ad86:	4403      	add	r3, r0
    ad88:	4264      	negs	r4, r4
    ad8a:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
    ad8c:	1a20      	subs	r0, r4, r0
    ad8e:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
    ad92:	e7ec      	b.n	ad6e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
    ad94:	0003d086 	.word	0x0003d086
    ad98:	0003d0a1 	.word	0x0003d0a1
    ad9c:	0003d019 	.word	0x0003d019

0000ada0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
    static int scale(matrix_t *matrix, float scale) {
    ada0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
    ada2:	6842      	ldr	r2, [r0, #4]
    ada4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    ada8:	d217      	bcs.n	adda <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
    adaa:	6883      	ldr	r3, [r0, #8]
    adac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    adb0:	d213      	bcs.n	adda <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    adb2:	6801      	ldr	r1, [r0, #0]
    adb4:	9101      	str	r1, [sp, #4]
    adb6:	b292      	uxth	r2, r2
    adb8:	b29b      	uxth	r3, r3
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    adba:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
    adbc:	4668      	mov	r0, sp
    adbe:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    adc0:	f8ad 2000 	strh.w	r2, [sp]
    adc4:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    adc8:	f8ad 2008 	strh.w	r2, [sp, #8]
    adcc:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
    add0:	f00d ff64 	bl	18c9c <arm_mat_scale_f32>
    }
    add4:	b005      	add	sp, #20
    add6:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
    adda:	4801      	ldr	r0, [pc, #4]	; (ade0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
    addc:	e7fa      	b.n	add4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
    adde:	bf00      	nop
    ade0:	fffffc0c 	.word	0xfffffc0c

0000ade4 <_ZL20raw_feature_get_datajjPf>:
{
    ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG((offset + len) <= INPUT_WINDOW_SIZE);
    ade8:	f643 6370 	movw	r3, #15984	; 0x3e70
{
    adec:	4616      	mov	r6, r2
	__ASSERT_NO_MSG((offset + len) <= INPUT_WINDOW_SIZE);
    adee:	1842      	adds	r2, r0, r1
    adf0:	429a      	cmp	r2, r3
{
    adf2:	4604      	mov	r4, r0
    adf4:	4688      	mov	r8, r1
	__ASSERT_NO_MSG((offset + len) <= INPUT_WINDOW_SIZE);
    adf6:	d909      	bls.n	ae0c <_ZL20raw_feature_get_datajjPf+0x28>
    adf8:	4922      	ldr	r1, [pc, #136]	; (ae84 <_ZL20raw_feature_get_datajjPf+0xa0>)
    adfa:	4823      	ldr	r0, [pc, #140]	; (ae88 <_ZL20raw_feature_get_datajjPf+0xa4>)
    adfc:	4a23      	ldr	r2, [pc, #140]	; (ae8c <_ZL20raw_feature_get_datajjPf+0xa8>)
    adfe:	23a5      	movs	r3, #165	; 0xa5
    ae00:	f00c ff25 	bl	17c4e <assert_print>
    ae04:	4821      	ldr	r0, [pc, #132]	; (ae8c <_ZL20raw_feature_get_datajjPf+0xa8>)
    ae06:	21a5      	movs	r1, #165	; 0xa5
    ae08:	f00c ff1a 	bl	17c40 <assert_post_action>
	__ASSERT_NO_MSG(b->state == STATE_PROCESSING);
    ae0c:	4d20      	ldr	r5, [pc, #128]	; (ae90 <_ZL20raw_feature_get_datajjPf+0xac>)
    ae0e:	f895 38f0 	ldrb.w	r3, [r5, #2288]	; 0x8f0
    ae12:	2b02      	cmp	r3, #2
    ae14:	d009      	beq.n	ae2a <_ZL20raw_feature_get_datajjPf+0x46>
    ae16:	491f      	ldr	r1, [pc, #124]	; (ae94 <_ZL20raw_feature_get_datajjPf+0xb0>)
    ae18:	481b      	ldr	r0, [pc, #108]	; (ae88 <_ZL20raw_feature_get_datajjPf+0xa4>)
    ae1a:	4a1c      	ldr	r2, [pc, #112]	; (ae8c <_ZL20raw_feature_get_datajjPf+0xa8>)
    ae1c:	23a8      	movs	r3, #168	; 0xa8
    ae1e:	f00c ff16 	bl	17c4e <assert_print>
    ae22:	481a      	ldr	r0, [pc, #104]	; (ae8c <_ZL20raw_feature_get_datajjPf+0xa8>)
    ae24:	21a8      	movs	r1, #168	; 0xa8
    ae26:	f00c ff0b 	bl	17c40 <assert_post_action>
	size_t read_start = b->process_idx + offset;
    ae2a:	f8d5 28e0 	ldr.w	r2, [r5, #2272]	; 0x8e0
    ae2e:	4f1a      	ldr	r7, [pc, #104]	; (ae98 <_ZL20raw_feature_get_datajjPf+0xb4>)
    ae30:	4414      	add	r4, r2
	size_t read_end = read_start + len;
    ae32:	eb08 0304 	add.w	r3, r8, r4
	if ((read_end > ARRAY_SIZE(b->buf)) && (read_start < ARRAY_SIZE(b->buf))) {
    ae36:	f644 2538 	movw	r5, #19000	; 0x4a38
    ae3a:	42ab      	cmp	r3, r5
    ae3c:	f644 2337 	movw	r3, #18999	; 0x4a37
    ae40:	d915      	bls.n	ae6e <_ZL20raw_feature_get_datajjPf+0x8a>
    ae42:	429c      	cmp	r4, r3
    ae44:	d815      	bhi.n	ae72 <_ZL20raw_feature_get_datajjPf+0x8e>
		size_t copy_cnt = ARRAY_SIZE(b->buf) - read_start;
    ae46:	1b2d      	subs	r5, r5, r4
		memcpy(b_res, &b->buf[read_start],
    ae48:	00ad      	lsls	r5, r5, #2
    ae4a:	462a      	mov	r2, r5
    ae4c:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    ae50:	4630      	mov	r0, r6
    ae52:	f010 ff45 	bl	1bce0 <memcpy>
		       (len - copy_cnt) * sizeof(b->buf[0]));
    ae56:	f5a8 4194 	sub.w	r1, r8, #18944	; 0x4a00
    ae5a:	3938      	subs	r1, #56	; 0x38
    ae5c:	4421      	add	r1, r4
		memcpy(b_res + copy_cnt, &b->buf[0],
    ae5e:	008a      	lsls	r2, r1, #2
    ae60:	1970      	adds	r0, r6, r5
    ae62:	4639      	mov	r1, r7
		memcpy(b_res, &b->buf[read_start], len * sizeof(b->buf[0]));
    ae64:	f010 ff3c 	bl	1bce0 <memcpy>
}
    ae68:	2000      	movs	r0, #0
    ae6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (read_start >= ARRAY_SIZE(b->buf)) {
    ae6e:	429c      	cmp	r4, r3
    ae70:	d902      	bls.n	ae78 <_ZL20raw_feature_get_datajjPf+0x94>
			read_start -= ARRAY_SIZE(b->buf);
    ae72:	f5a4 4494 	sub.w	r4, r4, #18944	; 0x4a00
    ae76:	3c38      	subs	r4, #56	; 0x38
		memcpy(b_res, &b->buf[read_start], len * sizeof(b->buf[0]));
    ae78:	ea4f 0288 	mov.w	r2, r8, lsl #2
    ae7c:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    ae80:	4630      	mov	r0, r6
    ae82:	e7ef      	b.n	ae64 <_ZL20raw_feature_get_datajjPf+0x80>
    ae84:	0003d106 	.word	0x0003d106
    ae88:	0003baf1 	.word	0x0003baf1
    ae8c:	0003d0d6 	.word	0x0003d0d6
    ae90:	20023024 	.word	0x20023024
    ae94:	0003d124 	.word	0x0003d124
    ae98:	20011024 	.word	0x20011024

0000ae9c <_ZL11buf_cleanupP11data_bufferPb.constprop.0>:
static int buf_cleanup(struct data_buffer *b, bool *cancelled)
    ae9c:	b538      	push	{r3, r4, r5, lr}
	*cancelled = false;
    ae9e:	2300      	movs	r3, #0
static int buf_cleanup(struct data_buffer *b, bool *cancelled)
    aea0:	4604      	mov	r4, r0
	*cancelled = false;
    aea2:	7003      	strb	r3, [r0, #0]
	__asm__ volatile(
    aea4:	f04f 0320 	mov.w	r3, #32
    aea8:	f3ef 8511 	mrs	r5, BASEPRI
    aeac:	f383 8812 	msr	BASEPRI_MAX, r3
    aeb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aeb4:	4820      	ldr	r0, [pc, #128]	; (af38 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x9c>)
    aeb6:	f003 fa97 	bl	e3e8 <z_spin_lock_valid>
    aeba:	b968      	cbnz	r0, aed8 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x3c>
    aebc:	4a1f      	ldr	r2, [pc, #124]	; (af3c <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xa0>)
    aebe:	4920      	ldr	r1, [pc, #128]	; (af40 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xa4>)
    aec0:	4820      	ldr	r0, [pc, #128]	; (af44 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xa8>)
    aec2:	238e      	movs	r3, #142	; 0x8e
    aec4:	f00c fec3 	bl	17c4e <assert_print>
    aec8:	491b      	ldr	r1, [pc, #108]	; (af38 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x9c>)
    aeca:	481f      	ldr	r0, [pc, #124]	; (af48 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xac>)
    aecc:	f00c febf 	bl	17c4e <assert_print>
    aed0:	481a      	ldr	r0, [pc, #104]	; (af3c <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xa0>)
    aed2:	218e      	movs	r1, #142	; 0x8e
    aed4:	f00c feb4 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    aed8:	4817      	ldr	r0, [pc, #92]	; (af38 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x9c>)
    aeda:	f003 faa3 	bl	e424 <z_spin_lock_set_owner>
	if (b->state == STATE_PROCESSING) {
    aede:	4b1b      	ldr	r3, [pc, #108]	; (af4c <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xb0>)
    aee0:	f893 28f0 	ldrb.w	r2, [r3, #2288]	; 0x8f0
    aee4:	2a02      	cmp	r2, #2
    aee6:	d024      	beq.n	af32 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x96>
		if (b->state == STATE_WAITING_FOR_DATA) {
    aee8:	2a01      	cmp	r2, #1
			*cancelled = true;
    aeea:	bf08      	it	eq
    aeec:	7022      	strbeq	r2, [r4, #0]
		b->process_idx = 0;
    aeee:	2400      	movs	r4, #0
		b->state = STATE_READY;
    aef0:	2203      	movs	r2, #3
		b->process_idx = 0;
    aef2:	f8c3 48e0 	str.w	r4, [r3, #2272]	; 0x8e0
		b->append_idx = 0;
    aef6:	f8c3 48e4 	str.w	r4, [r3, #2276]	; 0x8e4
		b->wait_data_size = 0;
    aefa:	f8c3 48e8 	str.w	r4, [r3, #2280]	; 0x8e8
		b->state = STATE_READY;
    aefe:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    af02:	480d      	ldr	r0, [pc, #52]	; (af38 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x9c>)
    af04:	f003 fa7e 	bl	e404 <z_spin_unlock_valid>
    af08:	b968      	cbnz	r0, af26 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x8a>
    af0a:	4a0c      	ldr	r2, [pc, #48]	; (af3c <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xa0>)
    af0c:	4910      	ldr	r1, [pc, #64]	; (af50 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xb4>)
    af0e:	480d      	ldr	r0, [pc, #52]	; (af44 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xa8>)
    af10:	23b9      	movs	r3, #185	; 0xb9
    af12:	f00c fe9c 	bl	17c4e <assert_print>
    af16:	4908      	ldr	r1, [pc, #32]	; (af38 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x9c>)
    af18:	480e      	ldr	r0, [pc, #56]	; (af54 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xb8>)
    af1a:	f00c fe98 	bl	17c4e <assert_print>
    af1e:	4807      	ldr	r0, [pc, #28]	; (af3c <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0xa0>)
    af20:	21b9      	movs	r1, #185	; 0xb9
    af22:	f00c fe8d 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    af26:	f385 8811 	msr	BASEPRI, r5
    af2a:	f3bf 8f6f 	isb	sy
}
    af2e:	4620      	mov	r0, r4
    af30:	bd38      	pop	{r3, r4, r5, pc}
		err = -EBUSY;
    af32:	f06f 040f 	mvn.w	r4, #15
    af36:	e7e4      	b.n	af02 <_ZL11buf_cleanupP11data_bufferPb.constprop.0+0x66>
    af38:	20023910 	.word	0x20023910
    af3c:	0003bd42 	.word	0x0003bd42
    af40:	0003bd9b 	.word	0x0003bd9b
    af44:	0003baf1 	.word	0x0003baf1
    af48:	0003bdb0 	.word	0x0003bdb0
    af4c:	20023024 	.word	0x20023024
    af50:	0003bd6f 	.word	0x0003bd6f
    af54:	0003bd86 	.word	0x0003bd86

0000af58 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(uint64_t ctx_start_us,
    af58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af5c:	ed2d 8b04 	vpush	{d8-d9}
    af60:	4605      	mov	r5, r0
    af62:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    af66:	4688      	mov	r8, r1
    af68:	4617      	mov	r7, r2
    af6a:	461c      	mov	r4, r3
    TfLiteTensor* scores_tensor,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
    if(trained_model_invoke() != kTfLiteOk) {
    af6c:	f006 f8e6 	bl	1113c <_Z20trained_model_invokev>
    af70:	2800      	cmp	r0, #0
    af72:	d173      	bne.n	b05c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x104>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
    af74:	f00d fdbe 	bl	18af4 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
    af78:	1b40      	subs	r0, r0, r5
    af7a:	eb61 0108 	sbc.w	r1, r1, r8
    af7e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    result->timing.classification = (int)(result->timing.classification_us / 1000);
    af82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    af86:	2300      	movs	r3, #0
    af88:	f7f5 fdb0 	bl	aec <__aeabi_ldivmod>
    af8c:	4601      	mov	r1, r0
    af8e:	62a0      	str	r0, [r4, #40]	; 0x28

    // Read the predicted y value from the model's output tensor
    if (debug) {
    af90:	b116      	cbz	r6, af98 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x40>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
    af92:	4834      	ldr	r0, [pc, #208]	; (b064 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x10c>)
    af94:	f005 fe7c 	bl	10c90 <_Z9ei_printfPKcz>
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
    if (int8_output) {
    af98:	783b      	ldrb	r3, [r7, #0]
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
    af9a:	687d      	ldr	r5, [r7, #4]
    af9c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b06c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x114>
    if (int8_output) {
    afa0:	2b09      	cmp	r3, #9
    afa2:	f104 0404 	add.w	r4, r4, #4
    afa6:	d139      	bne.n	b01c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xc4>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
    afa8:	edd7 7a04 	vldr	s15, [r7, #16]
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        float value = static_cast<float>(data[ix] - zero_point) * scale;

        if (debug) {
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    afac:	f8df a0c0 	ldr.w	sl, [pc, #192]	; b070 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x118>
            ei_printf_float(value);
            ei_printf("\n");
    afb0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b074 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x11c>
    afb4:	ed97 9a03 	vldr	s18, [r7, #12]
    afb8:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    afbc:	3d01      	subs	r5, #1
    afbe:	f1a8 070c 	sub.w	r7, r8, #12
        float value = static_cast<float>(data[ix] - zero_point) * scale;
    afc2:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
    afc6:	ee08 3a10 	vmov	s16, r3
    afca:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    afce:	ee38 8a68 	vsub.f32	s16, s16, s17
    afd2:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
    afd6:	b156      	cbz	r6, afee <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x96>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    afd8:	4650      	mov	r0, sl
    afda:	6839      	ldr	r1, [r7, #0]
    afdc:	f005 fe58 	bl	10c90 <_Z9ei_printfPKcz>
            ei_printf_float(value);
    afe0:	eeb0 0a48 	vmov.f32	s0, s16
    afe4:	f005 fe6e 	bl	10cc4 <_Z15ei_printf_floatf>
            ei_printf("\n");
    afe8:	4648      	mov	r0, r9
    afea:	f005 fe51 	bl	10c90 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
    afee:	f857 3b04 	ldr.w	r3, [r7], #4
    aff2:	f844 3c04 	str.w	r3, [r4, #-4]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    aff6:	4547      	cmp	r7, r8
        result->classification[ix].value = value;
    aff8:	4623      	mov	r3, r4
    affa:	ed83 8a00 	vstr	s16, [r3]
    affe:	f104 0408 	add.w	r4, r4, #8
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    b002:	d1de      	bne.n	afc2 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x6a>
    else {
        fill_result_struct_f32(result, output->data.f, debug);
    }
#endif

    trained_model_reset(ei_aligned_free);
    b004:	4818      	ldr	r0, [pc, #96]	; (b068 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x110>)
    b006:	f006 f8bb 	bl	11180 <_Z19trained_model_resetPFvPvE>

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    b00a:	f00d fd71 	bl	18af0 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
    b00e:	1c83      	adds	r3, r0, #2
    b010:	bf18      	it	ne
    b012:	2000      	movne	r0, #0
}
    b014:	ecbd 8b04 	vpop	{d8-d9}
    b018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    b01c:	f8df 9050 	ldr.w	r9, [pc, #80]	; b070 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x118>
            ei_printf_float(value);
            ei_printf("\n");
    b020:	f8df a050 	ldr.w	sl, [pc, #80]	; b074 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x11c>
    b024:	f1a8 070c 	sub.w	r7, r8, #12
        float value = data[ix];
    b028:	ecb5 8a01 	vldmia	r5!, {s16}
        if (debug) {
    b02c:	b156      	cbz	r6, b044 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xec>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    b02e:	4648      	mov	r0, r9
    b030:	6839      	ldr	r1, [r7, #0]
    b032:	f005 fe2d 	bl	10c90 <_Z9ei_printfPKcz>
            ei_printf_float(value);
    b036:	eeb0 0a48 	vmov.f32	s0, s16
    b03a:	f005 fe43 	bl	10cc4 <_Z15ei_printf_floatf>
            ei_printf("\n");
    b03e:	4650      	mov	r0, sl
    b040:	f005 fe26 	bl	10c90 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
    b044:	f857 3b04 	ldr.w	r3, [r7], #4
    b048:	f844 3c04 	str.w	r3, [r4, #-4]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    b04c:	4547      	cmp	r7, r8
        result->classification[ix].value = value;
    b04e:	4623      	mov	r3, r4
    b050:	ed83 8a00 	vstr	s16, [r3]
    b054:	f104 0408 	add.w	r4, r4, #8
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    b058:	d1e6      	bne.n	b028 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xd0>
    b05a:	e7d3      	b.n	b004 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xac>
        return EI_IMPULSE_TFLITE_ERROR;
    b05c:	f06f 0002 	mvn.w	r0, #2
    b060:	e7d8      	b.n	b014 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xbc>
    b062:	bf00      	nop
    b064:	0003d141 	.word	0x0003d141
    b068:	0000ad29 	.word	0x0000ad29
    b06c:	20000068 	.word	0x20000068
    b070:	0003d15e 	.word	0x0003d15e
    b074:	0003dca1 	.word	0x0003dca1

0000b078 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0>:
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b07a:	4607      	mov	r7, r0
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
    b07c:	482d      	ldr	r0, [pc, #180]	; (b134 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xbc>)
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    b07e:	460d      	mov	r5, r1
    b080:	4616      	mov	r6, r2
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
    b082:	f005 ff41 	bl	10f08 <_Z18trained_model_initPFPvjjE>
    if (init_status != kTfLiteOk) {
    b086:	4604      	mov	r4, r0
    b088:	b130      	cbz	r0, b098 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x20>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
    b08a:	4601      	mov	r1, r0
    b08c:	482a      	ldr	r0, [pc, #168]	; (b138 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc0>)
    b08e:	f005 fdff 	bl	10c90 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    b092:	f06f 0005 	mvn.w	r0, #5
}
    b096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *ctx_start_us = ei_read_timer_us();
    b098:	f00d fd2c 	bl	18af4 <_Z16ei_read_timer_usv>
    b09c:	e9c7 0100 	strd	r0, r1, [r7]
    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    b0a0:	4620      	mov	r0, r4
    b0a2:	f006 f83d 	bl	11120 <_Z19trained_model_inputi>
    b0a6:	6028      	str	r0, [r5, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    b0a8:	4620      	mov	r0, r4
    b0aa:	f006 f83f 	bl	1112c <_Z20trained_model_outputi>
    if (tflite_first_run) {
    b0ae:	4a23      	ldr	r2, [pc, #140]	; (b13c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc4>)
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    b0b0:	6030      	str	r0, [r6, #0]
    if (tflite_first_run) {
    b0b2:	7813      	ldrb	r3, [r2, #0]
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d03b      	beq.n	b130 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xb8>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
    b0b8:	682b      	ldr	r3, [r5, #0]
    b0ba:	7819      	ldrb	r1, [r3, #0]
    b0bc:	2909      	cmp	r1, #9
    b0be:	d005      	beq.n	b0cc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x54>
    b0c0:	4b1f      	ldr	r3, [pc, #124]	; (b140 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc8>)
    b0c2:	4a20      	ldr	r2, [pc, #128]	; (b144 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    b0c4:	2163      	movs	r1, #99	; 0x63
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
    b0c6:	4820      	ldr	r0, [pc, #128]	; (b148 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd0>)
    b0c8:	f00a fdbe 	bl	15c48 <__assert_func>
    b0cc:	7801      	ldrb	r1, [r0, #0]
    b0ce:	2909      	cmp	r1, #9
    b0d0:	d003      	beq.n	b0da <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    b0d2:	4b1e      	ldr	r3, [pc, #120]	; (b14c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd4>)
    b0d4:	4a1b      	ldr	r2, [pc, #108]	; (b144 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    b0d6:	2164      	movs	r1, #100	; 0x64
    b0d8:	e7f5      	b.n	b0c6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
    b0da:	ed93 7a03 	vldr	s14, [r3, #12]
    b0de:	eddf 7a1c 	vldr	s15, [pc, #112]	; b150 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd8>
    b0e2:	eeb4 7a67 	vcmp.f32	s14, s15
    b0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b0ea:	d003      	beq.n	b0f4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x7c>
    b0ec:	4b19      	ldr	r3, [pc, #100]	; (b154 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xdc>)
    b0ee:	4a15      	ldr	r2, [pc, #84]	; (b144 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    b0f0:	216b      	movs	r1, #107	; 0x6b
    b0f2:	e7e8      	b.n	b0c6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
    b0f4:	691b      	ldr	r3, [r3, #16]
    b0f6:	3380      	adds	r3, #128	; 0x80
    b0f8:	d003      	beq.n	b102 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x8a>
    b0fa:	4b17      	ldr	r3, [pc, #92]	; (b158 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe0>)
    b0fc:	4a11      	ldr	r2, [pc, #68]	; (b144 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    b0fe:	216c      	movs	r1, #108	; 0x6c
    b100:	e7e1      	b.n	b0c6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
    b102:	ed90 7a03 	vldr	s14, [r0, #12]
    b106:	eddf 7a15 	vldr	s15, [pc, #84]	; b15c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe4>
    b10a:	eeb4 7a67 	vcmp.f32	s14, s15
    b10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b112:	d003      	beq.n	b11c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xa4>
    b114:	4b12      	ldr	r3, [pc, #72]	; (b160 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe8>)
    b116:	4a0b      	ldr	r2, [pc, #44]	; (b144 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    b118:	216f      	movs	r1, #111	; 0x6f
    b11a:	e7d4      	b.n	b0c6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
    b11c:	6903      	ldr	r3, [r0, #16]
    b11e:	3380      	adds	r3, #128	; 0x80
    b120:	d003      	beq.n	b12a <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xb2>
    b122:	4b10      	ldr	r3, [pc, #64]	; (b164 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xec>)
    b124:	4a07      	ldr	r2, [pc, #28]	; (b144 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    b126:	2170      	movs	r1, #112	; 0x70
    b128:	e7cd      	b.n	b0c6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
        tflite_first_run = false;
    b12a:	7014      	strb	r4, [r2, #0]
    return EI_IMPULSE_OK;
    b12c:	4620      	mov	r0, r4
    b12e:	e7b2      	b.n	b096 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x1e>
    b130:	4618      	mov	r0, r3
    b132:	e7b0      	b.n	b096 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x1e>
    b134:	0000ad55 	.word	0x0000ad55
    b138:	0003d163 	.word	0x0003d163
    b13c:	20000588 	.word	0x20000588
    b140:	0003d194 	.word	0x0003d194
    b144:	0003d1ca 	.word	0x0003d1ca
    b148:	0003d22f 	.word	0x0003d22f
    b14c:	0003d2a9 	.word	0x0003d2a9
    b150:	3b6eeeef 	.word	0x3b6eeeef
    b154:	0003d2e1 	.word	0x0003d2e1
    b158:	0003d31c 	.word	0x0003d31c
    b15c:	3b800000 	.word	0x3b800000
    b160:	0003d360 	.word	0x0003d360
    b164:	0003d39d 	.word	0x0003d39d

0000b168 <_ZN2ei5numpy4rollEPfji>:
    static int roll(float *input_array, size_t input_array_size, int shift) {
    b168:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        if (shift < 0) {
    b16a:	1e14      	subs	r4, r2, #0
            shift = input_array_size + shift;
    b16c:	bfb8      	it	lt
    b16e:	1864      	addlt	r4, r4, r1
    static int roll(float *input_array, size_t input_array_size, int shift) {
    b170:	4606      	mov	r6, r0
    b172:	460d      	mov	r5, r1
        if (shift == 0) {
    b174:	b1ec      	cbz	r4, b1b2 <_ZN2ei5numpy4rollEPfji+0x4a>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    b176:	2300      	movs	r3, #0
    b178:	4622      	mov	r2, r4
    b17a:	2101      	movs	r1, #1
    b17c:	4668      	mov	r0, sp
    b17e:	f00d f9e6 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    b182:	9800      	ldr	r0, [sp, #0]
    b184:	b1c0      	cbz	r0, b1b8 <_ZN2ei5numpy4rollEPfji+0x50>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
    b186:	1b29      	subs	r1, r5, r4
    b188:	00a4      	lsls	r4, r4, #2
    b18a:	4622      	mov	r2, r4
    b18c:	008d      	lsls	r5, r1, #2
    b18e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    b192:	f010 fda5 	bl	1bce0 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
    b196:	462a      	mov	r2, r5
    b198:	4631      	mov	r1, r6
    b19a:	1930      	adds	r0, r6, r4
    b19c:	f010 fdc1 	bl	1bd22 <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
    b1a0:	4622      	mov	r2, r4
    b1a2:	9900      	ldr	r1, [sp, #0]
    b1a4:	4630      	mov	r0, r6
    b1a6:	f010 fd9b 	bl	1bce0 <memcpy>
        return EIDSP_OK;
    b1aa:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    b1ac:	4668      	mov	r0, sp
    b1ae:	f00d f939 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    }
    b1b2:	4620      	mov	r0, r4
    b1b4:	b004      	add	sp, #16
    b1b6:	bd70      	pop	{r4, r5, r6, pc}
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    b1b8:	4c00      	ldr	r4, [pc, #0]	; (b1bc <_ZN2ei5numpy4rollEPfji+0x54>)
    b1ba:	e7f7      	b.n	b1ac <_ZN2ei5numpy4rollEPfji+0x44>
    b1bc:	fffffc16 	.word	0xfffffc16

0000b1c0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
    b1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1c4:	4617      	mov	r7, r2
    b1c6:	4698      	mov	r8, r3
        if (output->cols != input->cols) {
    b1c8:	688a      	ldr	r2, [r1, #8]
    b1ca:	6883      	ldr	r3, [r0, #8]
    b1cc:	429a      	cmp	r2, r3
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
    b1ce:	4604      	mov	r4, r0
    b1d0:	460e      	mov	r6, r1
        if (output->cols != input->cols) {
    b1d2:	d16e      	bne.n	b2b2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf2>
        if (output->rows != input->rows + pad_before + pad_after) {
    b1d4:	6842      	ldr	r2, [r0, #4]
    b1d6:	6849      	ldr	r1, [r1, #4]
    b1d8:	eb08 0307 	add.w	r3, r8, r7
    b1dc:	4413      	add	r3, r2
    b1de:	4299      	cmp	r1, r3
    b1e0:	d167      	bne.n	b2b2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf2>
        if (input->rows == 0) {
    b1e2:	2a00      	cmp	r2, #0
    b1e4:	d068      	beq.n	b2b8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf8>
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    b1e6:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
        bool pad_before_direction_up = true;
    b1ea:	f04f 0a01 	mov.w	sl, #1
        uint32_t pad_before_index = 0;
    b1ee:	f04f 0900 	mov.w	r9, #0
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    b1f2:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
            memcpy(output->buffer + (input->cols * ix),
    b1f6:	6830      	ldr	r0, [r6, #0]
    b1f8:	68a5      	ldr	r5, [r4, #8]
                input->buffer + (pad_before_index * input->cols),
    b1fa:	6821      	ldr	r1, [r4, #0]
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    b1fc:	d023      	beq.n	b246 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x86>
            memcpy(output->buffer + (input->cols * ix),
    b1fe:	00aa      	lsls	r2, r5, #2
    b200:	fb02 1109 	mla	r1, r2, r9, r1
    b204:	fb02 000b 	mla	r0, r2, fp, r0
    b208:	f010 fd6a 	bl	1bce0 <memcpy>
            if (pad_before_index == 0 && !pad_before_direction_up) {
    b20c:	f1b9 0f00 	cmp.w	r9, #0
    b210:	d102      	bne.n	b218 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x58>
    b212:	f1ba 0f00 	cmp.w	sl, #0
    b216:	d013      	beq.n	b240 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x80>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
    b218:	6863      	ldr	r3, [r4, #4]
    b21a:	3b01      	subs	r3, #1
    b21c:	454b      	cmp	r3, r9
    b21e:	d107      	bne.n	b230 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
    b220:	f1ba 0f00 	cmp.w	sl, #0
    b224:	d101      	bne.n	b22a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x6a>
                pad_before_index--;
    b226:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
                pad_before_direction_up = false;
    b22a:	f04f 0a00 	mov.w	sl, #0
    b22e:	e004      	b.n	b23a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7a>
            else if (pad_before_direction_up) {
    b230:	f1ba 0f00 	cmp.w	sl, #0
    b234:	d0f7      	beq.n	b226 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x66>
                pad_before_index++;
    b236:	f109 0901 	add.w	r9, r9, #1
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    b23a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    b23e:	e7d8      	b.n	b1f2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x32>
                pad_before_direction_up = true;
    b240:	f04f 0a01 	mov.w	sl, #1
    b244:	e7f9      	b.n	b23a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7a>
        memcpy(output->buffer + (input->cols * pad_before),
    b246:	6862      	ldr	r2, [r4, #4]
    b248:	436a      	muls	r2, r5
    b24a:	437d      	muls	r5, r7
    b24c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    b250:	0092      	lsls	r2, r2, #2
    b252:	f010 fd45 	bl	1bce0 <memcpy>
        int32_t pad_after_index = input->rows - 1;
    b256:	6865      	ldr	r5, [r4, #4]
        for (int32_t ix = 0; ix < pad_after; ix++) {
    b258:	f04f 0a00 	mov.w	sl, #0
        int32_t pad_after_index = input->rows - 1;
    b25c:	3d01      	subs	r5, #1
        bool pad_after_direction_up = false;
    b25e:	46d1      	mov	r9, sl
        for (int32_t ix = 0; ix < pad_after; ix++) {
    b260:	45d0      	cmp	r8, sl
    b262:	dd2b      	ble.n	b2bc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xfc>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
    b264:	6863      	ldr	r3, [r4, #4]
    b266:	68a2      	ldr	r2, [r4, #8]
                input->buffer + (pad_after_index * input->cols),
    b268:	6821      	ldr	r1, [r4, #0]
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
    b26a:	eb0a 0007 	add.w	r0, sl, r7
    b26e:	4418      	add	r0, r3
    b270:	6833      	ldr	r3, [r6, #0]
    b272:	0092      	lsls	r2, r2, #2
    b274:	fb02 1105 	mla	r1, r2, r5, r1
    b278:	fb02 3000 	mla	r0, r2, r0, r3
    b27c:	f010 fd30 	bl	1bce0 <memcpy>
            if (pad_after_index == 0 && !pad_after_direction_up) {
    b280:	b915      	cbnz	r5, b288 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
    b282:	f1b9 0f00 	cmp.w	r9, #0
    b286:	d011      	beq.n	b2ac <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
    b288:	6863      	ldr	r3, [r4, #4]
    b28a:	3b01      	subs	r3, #1
    b28c:	42ab      	cmp	r3, r5
    b28e:	d106      	bne.n	b29e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
    b290:	f1b9 0f00 	cmp.w	r9, #0
    b294:	d100      	bne.n	b298 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd8>
                pad_after_index--;
    b296:	3d01      	subs	r5, #1
                pad_after_direction_up = false;
    b298:	f04f 0900 	mov.w	r9, #0
    b29c:	e003      	b.n	b2a6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            else if (pad_after_direction_up) {
    b29e:	f1b9 0f00 	cmp.w	r9, #0
    b2a2:	d0f8      	beq.n	b296 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd6>
                pad_after_index++;
    b2a4:	3501      	adds	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
    b2a6:	f10a 0a01 	add.w	sl, sl, #1
    b2aa:	e7d9      	b.n	b260 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xa0>
                pad_after_direction_up = true;
    b2ac:	f04f 0901 	mov.w	r9, #1
    b2b0:	e7f9      	b.n	b2a6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    b2b2:	4803      	ldr	r0, [pc, #12]	; (b2c0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x100>)
    }
    b2b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
    b2b8:	4802      	ldr	r0, [pc, #8]	; (b2c4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>)
    b2ba:	e7fb      	b.n	b2b4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
        return EIDSP_OK;
    b2bc:	2000      	movs	r0, #0
    b2be:	e7f9      	b.n	b2b4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
    b2c0:	fffffc14 	.word	0xfffffc14
    b2c4:	fffffc12 	.word	0xfffffc12

0000b2c8 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>:
    {
    b2c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b2cc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
    b2d0:	0875      	lsrs	r5, r6, #1
    b2d2:	3501      	adds	r5, #1
    b2d4:	429d      	cmp	r5, r3
    {
    b2d6:	4614      	mov	r4, r2
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
    b2d8:	d12c      	bne.n	b334 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x6c>
        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
    b2da:	9600      	str	r6, [sp, #0]
    b2dc:	f7f6 fe70 	bl	1fc0 <_ZN2ei5numpy4rfftEPKfjPfjj>
        if (r != EIDSP_OK) {
    b2e0:	4680      	mov	r8, r0
    b2e2:	bb18      	cbnz	r0, b32c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x64>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
    b2e4:	ee07 6a90 	vmov	s15, r6
    b2e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    b2ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    b2f0:	ee17 0a90 	vmov	r0, s15
    b2f4:	f7f5 f8b8 	bl	468 <__aeabi_f2d>
    b2f8:	4602      	mov	r2, r0
    b2fa:	460b      	mov	r3, r1
    b2fc:	2000      	movs	r0, #0
    b2fe:	490f      	ldr	r1, [pc, #60]	; (b33c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x74>)
    b300:	f7f5 fa34 	bl	76c <__aeabi_ddiv>
    b304:	4606      	mov	r6, r0
    b306:	460f      	mov	r7, r1
                (out_buffer[ix] * out_buffer[ix]);
    b308:	edd4 7a00 	vldr	s15, [r4]
    b30c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    b310:	ee17 0a90 	vmov	r0, s15
    b314:	f7f5 f8a8 	bl	468 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
    b318:	4632      	mov	r2, r6
    b31a:	463b      	mov	r3, r7
    b31c:	f7f5 f8fc 	bl	518 <__aeabi_dmul>
    b320:	f7f5 fb94 	bl	a4c <__aeabi_d2f>
    b324:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
    b328:	42a5      	cmp	r5, r4
    b32a:	d1ed      	bne.n	b308 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x40>
    }
    b32c:	4640      	mov	r0, r8
    b32e:	b002      	add	sp, #8
    b330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    b334:	f8df 8008 	ldr.w	r8, [pc, #8]	; b340 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x78>
    b338:	e7f8      	b.n	b32c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x64>
    b33a:	bf00      	nop
    b33c:	3ff00000 	.word	0x3ff00000
    b340:	fffffc14 	.word	0xfffffc14

0000b344 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf>:
        if (blockSize <= 1U) {
    b344:	2901      	cmp	r1, #1
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
    b346:	b570      	push	{r4, r5, r6, lr}
    b348:	eddf 7a2e 	vldr	s15, [pc, #184]	; b404 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xc0>
        if (blockSize <= 1U) {
    b34c:	d802      	bhi.n	b354 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x10>
            *pResult = 0;
    b34e:	edc2 7a00 	vstr	s15, [r2]
    }
    b352:	bd70      	pop	{r4, r5, r6, pc}
        blkCnt = blockSize >> 2U;
    b354:	088d      	lsrs	r5, r1, #2
    b356:	4603      	mov	r3, r0
    b358:	4604      	mov	r4, r0
    b35a:	462e      	mov	r6, r5
        while (blkCnt > 0U) {
    b35c:	3410      	adds	r4, #16
    b35e:	b18e      	cbz	r6, b384 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x40>
            sum += *pInput++;
    b360:	ed14 7a04 	vldr	s14, [r4, #-16]
    b364:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    b368:	ed14 7a03 	vldr	s14, [r4, #-12]
    b36c:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    b370:	ed14 7a02 	vldr	s14, [r4, #-8]
    b374:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    b378:	ed14 7a01 	vldr	s14, [r4, #-4]
            blkCnt--;
    b37c:	3e01      	subs	r6, #1
            sum += *pInput++;
    b37e:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
    b382:	e7eb      	b.n	b35c <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x18>
    b384:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        blkCnt = blockSize % 0x4U;
    b388:	f001 0403 	and.w	r4, r1, #3
    b38c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    b390:	4606      	mov	r6, r0
        while (blkCnt > 0U) {
    b392:	42a6      	cmp	r6, r4
    b394:	d004      	beq.n	b3a0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x5c>
            sum += *pInput++;
    b396:	ecb6 7a01 	vldmia	r6!, {s14}
    b39a:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
    b39e:	e7f8      	b.n	b392 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x4e>
        fMean = sum / (float32_t)blockSize;
    b3a0:	ee07 1a10 	vmov	s14, r1
    b3a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    b3a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
        float32_t fSum = 0.0f;
    b3ac:	eddf 7a15 	vldr	s15, [pc, #84]	; b404 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xc0>
        while (blkCnt > 0U) {
    b3b0:	3310      	adds	r3, #16
    b3b2:	b1cd      	cbz	r5, b3e8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xa4>
            fValue = *pInput++ - fMean;
    b3b4:	ed13 6a04 	vldr	s12, [r3, #-16]
    b3b8:	ee36 6a66 	vsub.f32	s12, s12, s13
            blkCnt--;
    b3bc:	3d01      	subs	r5, #1
            fSum += fValue * fValue;
    b3be:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    b3c2:	ed13 6a03 	vldr	s12, [r3, #-12]
    b3c6:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    b3ca:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    b3ce:	ed13 6a02 	vldr	s12, [r3, #-8]
    b3d2:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    b3d6:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    b3da:	ed13 6a01 	vldr	s12, [r3, #-4]
    b3de:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    b3e2:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
    b3e6:	e7e3      	b.n	b3b0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x6c>
        while (blkCnt > 0U) {
    b3e8:	42a0      	cmp	r0, r4
    b3ea:	d006      	beq.n	b3fa <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xb6>
            fValue = *pInput++ - fMean;
    b3ec:	ecb0 6a01 	vldmia	r0!, {s12}
    b3f0:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    b3f4:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
    b3f8:	e7f6      	b.n	b3e8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xa4>
        *pResult = fSum / (float32_t)(blockSize);
    b3fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
    b3fe:	edc2 6a00 	vstr	s13, [r2]
    b402:	e7a6      	b.n	b352 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xe>
    b404:	00000000 	.word	0x00000000

0000b408 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
    b408:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (input_matrix->cols != output_matrix->rows) {
    b40a:	6883      	ldr	r3, [r0, #8]
    b40c:	684a      	ldr	r2, [r1, #4]
    b40e:	4293      	cmp	r3, r2
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
    b410:	b087      	sub	sp, #28
    b412:	460e      	mov	r6, r1
        if (input_matrix->cols != output_matrix->rows) {
    b414:	d144      	bne.n	b4a0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        if (output_matrix->cols != 1) {
    b416:	6889      	ldr	r1, [r1, #8]
    b418:	2901      	cmp	r1, #1
    b41a:	d141      	bne.n	b4a0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        arm_in_matrix.numRows = input_matrix->rows;
    b41c:	6842      	ldr	r2, [r0, #4]
        arm_in_matrix.pData = &input_matrix->buffer[0];
    b41e:	6800      	ldr	r0, [r0, #0]
    b420:	9003      	str	r0, [sp, #12]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    b422:	fb02 f003 	mul.w	r0, r2, r3
        arm_in_matrix.numRows = input_matrix->rows;
    b426:	b294      	uxth	r4, r2
        arm_in_matrix.numCols = input_matrix->cols;
    b428:	b29d      	uxth	r5, r3
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    b42a:	0080      	lsls	r0, r0, #2
        arm_in_matrix.numRows = input_matrix->rows;
    b42c:	f8ad 4008 	strh.w	r4, [sp, #8]
        arm_in_matrix.numCols = input_matrix->cols;
    b430:	f8ad 500a 	strh.w	r5, [sp, #10]
        arm_transposed_matrix.numRows = input_matrix->cols;
    b434:	f8ad 5010 	strh.w	r5, [sp, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
    b438:	f8ad 4012 	strh.w	r4, [sp, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    b43c:	f00d fb6e 	bl	18b1c <_Z9ei_callocjj>
    b440:	9005      	str	r0, [sp, #20]
        if (arm_transposed_matrix.pData == NULL) {
    b442:	b378      	cbz	r0, b4a4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x9c>
        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
    b444:	a904      	add	r1, sp, #16
    b446:	a802      	add	r0, sp, #8
    b448:	f00d fc37 	bl	18cba <arm_mat_trans_f32>
        if (ret != EIDSP_OK) {
    b44c:	4604      	mov	r4, r0
    b44e:	bb20      	cbnz	r0, b49a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
    b450:	4605      	mov	r5, r0

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
    b452:	2700      	movs	r7, #0
    b454:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
    b458:	9805      	ldr	r0, [sp, #20]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
    b45a:	42ab      	cmp	r3, r5
    b45c:	d91b      	bls.n	b496 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
    b45e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    b462:	fb05 f301 	mul.w	r3, r5, r1
    b466:	aa01      	add	r2, sp, #4
    b468:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    b46c:	f7ff ff6a 	bl	b344 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf>
            arm_sqrt_f32(var, &std);
    b470:	ed9d 0a01 	vldr	s0, [sp, #4]
    if (in >= 0.0f)
    b474:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    b478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b47c:	db08      	blt.n	b490 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x88>
      *pOut = sqrtf(in);
    b47e:	f00a f9ab 	bl	157d8 <sqrtf>
            output_matrix->buffer[row] = std;
    b482:	6833      	ldr	r3, [r6, #0]
    b484:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    b488:	ed83 0a00 	vstr	s0, [r3]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
    b48c:	3501      	adds	r5, #1
    b48e:	e7e1      	b.n	b454 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4c>
      *pOut = 0.0f;
    b490:	ee00 7a10 	vmov	s0, r7
    b494:	e7f5      	b.n	b482 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x7a>
        ei_free(arm_transposed_matrix.pData);
    b496:	f00d fb43 	bl	18b20 <_Z7ei_freePv>
    }
    b49a:	4620      	mov	r0, r4
    b49c:	b007      	add	sp, #28
    b49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    b4a0:	4c01      	ldr	r4, [pc, #4]	; (b4a8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa0>)
    b4a2:	e7fa      	b.n	b49a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    b4a4:	4c01      	ldr	r4, [pc, #4]	; (b4ac <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa4>)
    b4a6:	e7f8      	b.n	b49a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
    b4a8:	fffffc14 	.word	0xfffffc14
    b4ac:	fffffc16 	.word	0xfffffc16

0000b4b0 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
    static float frequency_to_mel(float f) {
    b4b0:	b510      	push	{r4, lr}
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
    b4b2:	eddf 7a24 	vldr	s15, [pc, #144]	; b544 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x94>
        e = (g - 0x3f2aaaab) & 0xff800000;
    b4b6:	4c24      	ldr	r4, [pc, #144]	; (b548 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x98>)
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    b4b8:	ed9f 1a24 	vldr	s2, [pc, #144]	; b54c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x9c>
    static float frequency_to_mel(float f) {
    b4bc:	ed2d 8b04 	vpush	{d8-d9}
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
    b4c0:	ee80 8a27 	vdiv.f32	s16, s0, s15
    b4c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        g = (int32_t) * ((int32_t *)&a);
    b4c8:	ee38 7a27 	vadd.f32	s14, s16, s15
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    b4cc:	ed9f 0a20 	vldr	s0, [pc, #128]	; b550 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa0>
        g = (int32_t) * ((int32_t *)&a);
    b4d0:	ee17 3a10 	vmov	r3, s14
        e = (g - 0x3f2aaaab) & 0xff800000;
    b4d4:	441c      	add	r4, r3
    b4d6:	0de4      	lsrs	r4, r4, #23
    b4d8:	05e4      	lsls	r4, r4, #23
        g = g - e;
    b4da:	1b1b      	subs	r3, r3, r4
    b4dc:	ee08 3a10 	vmov	s16, r3
        f = m - 1.0f;
    b4e0:	ee38 8a67 	vsub.f32	s16, s16, s15
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    b4e4:	eef0 0a48 	vmov.f32	s1, s16
    b4e8:	f010 fbb4 	bl	1bc54 <fmaf>
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    b4ec:	eef0 0a48 	vmov.f32	s1, s16
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    b4f0:	eef0 8a40 	vmov.f32	s17, s0
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    b4f4:	ed9f 1a17 	vldr	s2, [pc, #92]	; b554 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa4>
    b4f8:	ed9f 0a17 	vldr	s0, [pc, #92]	; b558 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa8>
    b4fc:	f010 fbaa 	bl	1bc54 <fmaf>
        s = f * f;
    b500:	ee28 9a08 	vmul.f32	s18, s16, s16
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    b504:	eeb0 1a40 	vmov.f32	s2, s0
        r = fmaf(r, s, t);
    b508:	eef0 0a49 	vmov.f32	s1, s18
    b50c:	eeb0 0a68 	vmov.f32	s0, s17
    b510:	f010 fba0 	bl	1bc54 <fmaf>
        r = fmaf(r, s, f);
    b514:	eeb0 1a48 	vmov.f32	s2, s16
    b518:	eef0 0a49 	vmov.f32	s1, s18
    b51c:	f010 fb9a 	bl	1bc54 <fmaf>
    b520:	eeb0 1a40 	vmov.f32	s2, s0
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
    b524:	ee00 4a10 	vmov	s0, r4
    b528:	eddf 0a0c 	vldr	s1, [pc, #48]	; b55c <_ZN2ei8speechpy9functions16frequency_to_melEf+0xac>
    b52c:	eeba 0ae4 	vcvt.f32.s32	s0, s0, #23
    b530:	f010 fb90 	bl	1bc54 <fmaf>
    }
    b534:	ecbd 8b04 	vpop	{d8-d9}
    b538:	eddf 7a09 	vldr	s15, [pc, #36]	; b560 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xb0>
    b53c:	ee20 0a27 	vmul.f32	s0, s0, s15
    b540:	bd10      	pop	{r4, pc}
    b542:	bf00      	nop
    b544:	442f0000 	.word	0x442f0000
    b548:	c0d55555 	.word	0xc0d55555
    b54c:	be8ef46d 	.word	0xbe8ef46d
    b550:	3e6c6078 	.word	0x3e6c6078
    b554:	beff712d 	.word	0xbeff712d
    b558:	3ea9e51a 	.word	0x3ea9e51a
    b55c:	3f317218 	.word	0x3f317218
    b560:	448ce000 	.word	0x448ce000

0000b564 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>:
        zero_handling(input->buffer, input->rows * input->cols);
    b564:	e9d0 3200 	ldrd	r3, r2, [r0]
    b568:	6881      	ldr	r1, [r0, #8]
    b56a:	434a      	muls	r2, r1
                input[ix] = 1e-10;
    b56c:	4907      	ldr	r1, [pc, #28]	; (b58c <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0x28>)
    b56e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
    b572:	4293      	cmp	r3, r2
    b574:	d009      	beq.n	b58a <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0x26>
            if (input[ix] == 0) {
    b576:	edd3 7a00 	vldr	s15, [r3]
    b57a:	eef5 7a40 	vcmp.f32	s15, #0.0
    b57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
    b582:	bf08      	it	eq
    b584:	6019      	streq	r1, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
    b586:	3304      	adds	r3, #4
    b588:	e7f3      	b.n	b572 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0xe>
    }
    b58a:	4770      	bx	lr
    b58c:	2edbe6ff 	.word	0x2edbe6ff

0000b590 <ei_wrapper_add_data>:
{
    b590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b594:	4606      	mov	r6, r0
    b596:	460f      	mov	r7, r1
	__asm__ volatile(
    b598:	f04f 0320 	mov.w	r3, #32
    b59c:	f3ef 8811 	mrs	r8, BASEPRI
    b5a0:	f383 8812 	msr	BASEPRI_MAX, r3
    b5a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b5a8:	484f      	ldr	r0, [pc, #316]	; (b6e8 <ei_wrapper_add_data+0x158>)
    b5aa:	f002 ff1d 	bl	e3e8 <z_spin_lock_valid>
    b5ae:	b968      	cbnz	r0, b5cc <ei_wrapper_add_data+0x3c>
    b5b0:	4a4e      	ldr	r2, [pc, #312]	; (b6ec <ei_wrapper_add_data+0x15c>)
    b5b2:	494f      	ldr	r1, [pc, #316]	; (b6f0 <ei_wrapper_add_data+0x160>)
    b5b4:	484f      	ldr	r0, [pc, #316]	; (b6f4 <ei_wrapper_add_data+0x164>)
    b5b6:	238e      	movs	r3, #142	; 0x8e
    b5b8:	f00c fb49 	bl	17c4e <assert_print>
    b5bc:	494a      	ldr	r1, [pc, #296]	; (b6e8 <ei_wrapper_add_data+0x158>)
    b5be:	484e      	ldr	r0, [pc, #312]	; (b6f8 <ei_wrapper_add_data+0x168>)
    b5c0:	f00c fb45 	bl	17c4e <assert_print>
    b5c4:	4849      	ldr	r0, [pc, #292]	; (b6ec <ei_wrapper_add_data+0x15c>)
    b5c6:	218e      	movs	r1, #142	; 0x8e
    b5c8:	f00c fb3a 	bl	17c40 <assert_post_action>
	if (b->wait_data_size > 0) {
    b5cc:	4c4b      	ldr	r4, [pc, #300]	; (b6fc <ei_wrapper_add_data+0x16c>)
	z_spin_lock_set_owner(l);
    b5ce:	4846      	ldr	r0, [pc, #280]	; (b6e8 <ei_wrapper_add_data+0x158>)
    b5d0:	f002 ff28 	bl	e424 <z_spin_lock_set_owner>
    b5d4:	f8d4 58e8 	ldr.w	r5, [r4, #2280]	; 0x8e8
    b5d8:	b1ed      	cbz	r5, b616 <ei_wrapper_add_data+0x86>
		       INPUT_WINDOW_SIZE - 1;
    b5da:	f605 33c7 	addw	r3, r5, #3015	; 0xbc7
	if (buf_calc_free_space(b) < len) {
    b5de:	429f      	cmp	r7, r3
    b5e0:	d927      	bls.n	b632 <ei_wrapper_add_data+0xa2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b5e2:	4841      	ldr	r0, [pc, #260]	; (b6e8 <ei_wrapper_add_data+0x158>)
    b5e4:	f002 ff0e 	bl	e404 <z_spin_unlock_valid>
    b5e8:	b968      	cbnz	r0, b606 <ei_wrapper_add_data+0x76>
    b5ea:	4a40      	ldr	r2, [pc, #256]	; (b6ec <ei_wrapper_add_data+0x15c>)
    b5ec:	4944      	ldr	r1, [pc, #272]	; (b700 <ei_wrapper_add_data+0x170>)
    b5ee:	4841      	ldr	r0, [pc, #260]	; (b6f4 <ei_wrapper_add_data+0x164>)
    b5f0:	23b9      	movs	r3, #185	; 0xb9
    b5f2:	f00c fb2c 	bl	17c4e <assert_print>
    b5f6:	493c      	ldr	r1, [pc, #240]	; (b6e8 <ei_wrapper_add_data+0x158>)
    b5f8:	4842      	ldr	r0, [pc, #264]	; (b704 <ei_wrapper_add_data+0x174>)
    b5fa:	f00c fb28 	bl	17c4e <assert_print>
    b5fe:	483b      	ldr	r0, [pc, #236]	; (b6ec <ei_wrapper_add_data+0x15c>)
    b600:	21b9      	movs	r1, #185	; 0xb9
    b602:	f00c fb1d 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    b606:	f388 8811 	msr	BASEPRI, r8
    b60a:	f3bf 8f6f 	isb	sy
		return -ENOMEM;
    b60e:	f06f 000b 	mvn.w	r0, #11
}
    b612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->append_idx >= b->process_idx) {
    b616:	f8d4 28e4 	ldr.w	r2, [r4, #2276]	; 0x8e4
    b61a:	f8d4 38e0 	ldr.w	r3, [r4, #2272]	; 0x8e0
    b61e:	429a      	cmp	r2, r3
	return (ARRAY_SIZE(b->buf) - b->process_idx) + b->append_idx;
    b620:	bf3c      	itt	cc
    b622:	f502 4294 	addcc.w	r2, r2, #18944	; 0x4a00
    b626:	3238      	addcc	r2, #56	; 0x38
    b628:	1ad3      	subs	r3, r2, r3
	return ARRAY_SIZE(b->buf) - buf_get_collected_data_count(b) - 1;
    b62a:	f5c3 4394 	rsb	r3, r3, #18944	; 0x4a00
    b62e:	3337      	adds	r3, #55	; 0x37
    b630:	e7d5      	b.n	b5de <ei_wrapper_add_data+0x4e>
	size_t cur_idx = b->append_idx;
    b632:	f8d4 98e4 	ldr.w	r9, [r4, #2276]	; 0x8e4
	size_t new_idx = b->append_idx + len;
    b636:	2000      	movs	r0, #0
    b638:	eb07 0209 	add.w	r2, r7, r9
	if (b->wait_data_size > 0) {
    b63c:	b165      	cbz	r5, b658 <ei_wrapper_add_data+0xc8>
		if (b->wait_data_size > len) {
    b63e:	42af      	cmp	r7, r5
			b->wait_data_size -= len;
    b640:	bf35      	itete	cc
    b642:	1bed      	subcc	r5, r5, r7
			b->state = STATE_PROCESSING;
    b644:	2302      	movcs	r3, #2
			b->wait_data_size -= len;
    b646:	f8c4 58e8 	strcc.w	r5, [r4, #2280]	; 0x8e8
			b->wait_data_size = 0;
    b64a:	f8c4 08e8 	strcs.w	r0, [r4, #2280]	; 0x8e8
	*process_buf = false;
    b64e:	bf32      	itee	cc
    b650:	4605      	movcc	r5, r0
			b->state = STATE_PROCESSING;
    b652:	f884 38f0 	strbcs.w	r3, [r4, #2288]	; 0x8f0
			*process_buf = true;
    b656:	2501      	movcs	r5, #1
	if (new_idx >= ARRAY_SIZE(b->buf)) {
    b658:	f644 2337 	movw	r3, #18999	; 0x4a37
    b65c:	429a      	cmp	r2, r3
		new_idx -= ARRAY_SIZE(b->buf);
    b65e:	bf84      	itt	hi
    b660:	f5a2 4294 	subhi.w	r2, r2, #18944	; 0x4a00
    b664:	3a38      	subhi	r2, #56	; 0x38
    b666:	4820      	ldr	r0, [pc, #128]	; (b6e8 <ei_wrapper_add_data+0x158>)
	b->append_idx = new_idx;
    b668:	f8c4 28e4 	str.w	r2, [r4, #2276]	; 0x8e4
		looped = true;
    b66c:	bf8c      	ite	hi
    b66e:	f04f 0a01 	movhi.w	sl, #1
	bool looped = false;
    b672:	f04f 0a00 	movls.w	sl, #0
    b676:	f002 fec5 	bl	e404 <z_spin_unlock_valid>
    b67a:	b968      	cbnz	r0, b698 <ei_wrapper_add_data+0x108>
    b67c:	4a1b      	ldr	r2, [pc, #108]	; (b6ec <ei_wrapper_add_data+0x15c>)
    b67e:	4920      	ldr	r1, [pc, #128]	; (b700 <ei_wrapper_add_data+0x170>)
    b680:	481c      	ldr	r0, [pc, #112]	; (b6f4 <ei_wrapper_add_data+0x164>)
    b682:	23b9      	movs	r3, #185	; 0xb9
    b684:	f00c fae3 	bl	17c4e <assert_print>
    b688:	4917      	ldr	r1, [pc, #92]	; (b6e8 <ei_wrapper_add_data+0x158>)
    b68a:	481e      	ldr	r0, [pc, #120]	; (b704 <ei_wrapper_add_data+0x174>)
    b68c:	f00c fadf 	bl	17c4e <assert_print>
    b690:	4816      	ldr	r0, [pc, #88]	; (b6ec <ei_wrapper_add_data+0x15c>)
    b692:	21b9      	movs	r1, #185	; 0xb9
    b694:	f00c fad4 	bl	17c40 <assert_post_action>
    b698:	f388 8811 	msr	BASEPRI, r8
    b69c:	f3bf 8f6f 	isb	sy
		memcpy(&b->buf[cur_idx], data, copy_cnt * sizeof(b->buf[0]));
    b6a0:	f8df 8068 	ldr.w	r8, [pc, #104]	; b70c <ei_wrapper_add_data+0x17c>
    b6a4:	eb08 0089 	add.w	r0, r8, r9, lsl #2
	if (looped) {
    b6a8:	f1ba 0f00 	cmp.w	sl, #0
    b6ac:	d016      	beq.n	b6dc <ei_wrapper_add_data+0x14c>
		size_t copy_cnt = ARRAY_SIZE(b->buf) - cur_idx;
    b6ae:	f5c9 4294 	rsb	r2, r9, #18944	; 0x4a00
    b6b2:	3238      	adds	r2, #56	; 0x38
		memcpy(&b->buf[cur_idx], data, copy_cnt * sizeof(b->buf[0]));
    b6b4:	0094      	lsls	r4, r2, #2
    b6b6:	4622      	mov	r2, r4
    b6b8:	4631      	mov	r1, r6
    b6ba:	f010 fb11 	bl	1bce0 <memcpy>
		      (len - copy_cnt) * sizeof(b->buf[0]));
    b6be:	f5a9 4294 	sub.w	r2, r9, #18944	; 0x4a00
    b6c2:	3a38      	subs	r2, #56	; 0x38
    b6c4:	443a      	add	r2, r7
		memcpy(&b->buf[0], data + copy_cnt,
    b6c6:	0092      	lsls	r2, r2, #2
    b6c8:	1931      	adds	r1, r6, r4
    b6ca:	4640      	mov	r0, r8
		memcpy(&b->buf[cur_idx], data, len * sizeof(b->buf[0]));
    b6cc:	f010 fb08 	bl	1bce0 <memcpy>
	if (!err && process_buf) {
    b6d0:	b13d      	cbz	r5, b6e2 <ei_wrapper_add_data+0x152>
	z_impl_k_sem_give(sem);
    b6d2:	480d      	ldr	r0, [pc, #52]	; (b708 <ei_wrapper_add_data+0x178>)
    b6d4:	f003 f9ee 	bl	eab4 <z_impl_k_sem_give>
}
    b6d8:	2000      	movs	r0, #0
    b6da:	e79a      	b.n	b612 <ei_wrapper_add_data+0x82>
		memcpy(&b->buf[cur_idx], data, len * sizeof(b->buf[0]));
    b6dc:	00ba      	lsls	r2, r7, #2
    b6de:	4631      	mov	r1, r6
    b6e0:	e7f4      	b.n	b6cc <ei_wrapper_add_data+0x13c>
    b6e2:	4628      	mov	r0, r5
	return err;
    b6e4:	e795      	b.n	b612 <ei_wrapper_add_data+0x82>
    b6e6:	bf00      	nop
    b6e8:	20023910 	.word	0x20023910
    b6ec:	0003bd42 	.word	0x0003bd42
    b6f0:	0003bd9b 	.word	0x0003bd9b
    b6f4:	0003baf1 	.word	0x0003baf1
    b6f8:	0003bdb0 	.word	0x0003bdb0
    b6fc:	20023024 	.word	0x20023024
    b700:	0003bd6f 	.word	0x0003bd6f
    b704:	0003bd86 	.word	0x0003bd86
    b708:	20000680 	.word	0x20000680
    b70c:	20011024 	.word	0x20011024

0000b710 <ei_wrapper_start_prediction>:
{
    b710:	b538      	push	{r3, r4, r5, lr}
			      frame_shift * ei_wrapper_get_frame_size();
    b712:	f643 6570 	movw	r5, #15984	; 0x3e70
    b716:	fb05 1500 	mla	r5, r5, r0, r1
	__asm__ volatile(
    b71a:	f04f 0320 	mov.w	r3, #32
    b71e:	f3ef 8411 	mrs	r4, BASEPRI
    b722:	f383 8812 	msr	BASEPRI_MAX, r3
    b726:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b72a:	4841      	ldr	r0, [pc, #260]	; (b830 <ei_wrapper_start_prediction+0x120>)
    b72c:	f002 fe5c 	bl	e3e8 <z_spin_lock_valid>
    b730:	b968      	cbnz	r0, b74e <ei_wrapper_start_prediction+0x3e>
    b732:	4a40      	ldr	r2, [pc, #256]	; (b834 <ei_wrapper_start_prediction+0x124>)
    b734:	4940      	ldr	r1, [pc, #256]	; (b838 <ei_wrapper_start_prediction+0x128>)
    b736:	4841      	ldr	r0, [pc, #260]	; (b83c <ei_wrapper_start_prediction+0x12c>)
    b738:	238e      	movs	r3, #142	; 0x8e
    b73a:	f00c fa88 	bl	17c4e <assert_print>
    b73e:	493c      	ldr	r1, [pc, #240]	; (b830 <ei_wrapper_start_prediction+0x120>)
    b740:	483f      	ldr	r0, [pc, #252]	; (b840 <ei_wrapper_start_prediction+0x130>)
    b742:	f00c fa84 	bl	17c4e <assert_print>
    b746:	483b      	ldr	r0, [pc, #236]	; (b834 <ei_wrapper_start_prediction+0x124>)
    b748:	218e      	movs	r1, #142	; 0x8e
    b74a:	f00c fa79 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    b74e:	4838      	ldr	r0, [pc, #224]	; (b830 <ei_wrapper_start_prediction+0x120>)
    b750:	f002 fe68 	bl	e424 <z_spin_lock_set_owner>
	if (b->state == STATE_READY) {
    b754:	483b      	ldr	r0, [pc, #236]	; (b844 <ei_wrapper_start_prediction+0x134>)
    b756:	f890 38f0 	ldrb.w	r3, [r0, #2288]	; 0x8f0
    b75a:	2b03      	cmp	r3, #3
    b75c:	d13d      	bne.n	b7da <ei_wrapper_start_prediction+0xca>
		b->state = STATE_WAITING_FOR_DATA;
    b75e:	2301      	movs	r3, #1
	if (b->append_idx >= b->process_idx) {
    b760:	f8d0 28e4 	ldr.w	r2, [r0, #2276]	; 0x8e4
		b->state = STATE_WAITING_FOR_DATA;
    b764:	f880 38f0 	strb.w	r3, [r0, #2288]	; 0x8f0
	if (b->append_idx >= b->process_idx) {
    b768:	f8d0 38e0 	ldr.w	r3, [r0, #2272]	; 0x8e0
    b76c:	429a      	cmp	r2, r3
	return (ARRAY_SIZE(b->buf) - b->process_idx) + b->append_idx;
    b76e:	bf3c      	itt	cc
    b770:	f502 4294 	addcc.w	r2, r2, #18944	; 0x4a00
    b774:	3238      	addcc	r2, #56	; 0x38
    b776:	1ad2      	subs	r2, r2, r3
	if (b->process_idx >= ARRAY_SIZE(b->buf)) {
    b778:	f644 2137 	movw	r1, #18999	; 0x4a37
	b->process_idx += move;
    b77c:	442b      	add	r3, r5
	if (b->process_idx >= ARRAY_SIZE(b->buf)) {
    b77e:	428b      	cmp	r3, r1
    b780:	d84f      	bhi.n	b822 <ei_wrapper_start_prediction+0x112>
	size_t processing_end_move = move + INPUT_WINDOW_SIZE;
    b782:	f505 5179 	add.w	r1, r5, #15936	; 0x3e40
    b786:	3130      	adds	r1, #48	; 0x30
	if (processing_end_move > max_move) {
    b788:	4291      	cmp	r1, r2
		b->process_idx -= ARRAY_SIZE(b->buf);
    b78a:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
		b->wait_data_size = processing_end_move - max_move;
    b78e:	bf8b      	itete	hi
    b790:	1a89      	subhi	r1, r1, r2
		b->state = STATE_PROCESSING;
    b792:	2302      	movls	r3, #2
		b->wait_data_size = processing_end_move - max_move;
    b794:	f8c0 18e8 	strhi.w	r1, [r0, #2280]	; 0x8e8
		b->state = STATE_PROCESSING;
    b798:	f880 38f0 	strbls.w	r3, [r0, #2288]	; 0x8f0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b79c:	4824      	ldr	r0, [pc, #144]	; (b830 <ei_wrapper_start_prediction+0x120>)
	*process_buf = false;
    b79e:	bf8c      	ite	hi
    b7a0:	2500      	movhi	r5, #0
		*process_buf = true;
    b7a2:	2501      	movls	r5, #1
    b7a4:	f002 fe2e 	bl	e404 <z_spin_unlock_valid>
    b7a8:	b968      	cbnz	r0, b7c6 <ei_wrapper_start_prediction+0xb6>
    b7aa:	4a22      	ldr	r2, [pc, #136]	; (b834 <ei_wrapper_start_prediction+0x124>)
    b7ac:	4926      	ldr	r1, [pc, #152]	; (b848 <ei_wrapper_start_prediction+0x138>)
    b7ae:	4823      	ldr	r0, [pc, #140]	; (b83c <ei_wrapper_start_prediction+0x12c>)
    b7b0:	23b9      	movs	r3, #185	; 0xb9
    b7b2:	f00c fa4c 	bl	17c4e <assert_print>
    b7b6:	491e      	ldr	r1, [pc, #120]	; (b830 <ei_wrapper_start_prediction+0x120>)
    b7b8:	4824      	ldr	r0, [pc, #144]	; (b84c <ei_wrapper_start_prediction+0x13c>)
    b7ba:	f00c fa48 	bl	17c4e <assert_print>
    b7be:	481d      	ldr	r0, [pc, #116]	; (b834 <ei_wrapper_start_prediction+0x124>)
    b7c0:	21b9      	movs	r1, #185	; 0xb9
    b7c2:	f00c fa3d 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    b7c6:	f384 8811 	msr	BASEPRI, r4
    b7ca:	f3bf 8f6f 	isb	sy
	if (!err && process_buf) {
    b7ce:	b365      	cbz	r5, b82a <ei_wrapper_start_prediction+0x11a>
	z_impl_k_sem_give(sem);
    b7d0:	481f      	ldr	r0, [pc, #124]	; (b850 <ei_wrapper_start_prediction+0x140>)
    b7d2:	f003 f96f 	bl	eab4 <z_impl_k_sem_give>
	return 0;
    b7d6:	2000      	movs	r0, #0
}
    b7d8:	e022      	b.n	b820 <ei_wrapper_start_prediction+0x110>
		__ASSERT_NO_MSG(b->state != STATE_DISABLED);
    b7da:	b94b      	cbnz	r3, b7f0 <ei_wrapper_start_prediction+0xe0>
    b7dc:	491d      	ldr	r1, [pc, #116]	; (b854 <ei_wrapper_start_prediction+0x144>)
    b7de:	4817      	ldr	r0, [pc, #92]	; (b83c <ei_wrapper_start_prediction+0x12c>)
    b7e0:	4a1d      	ldr	r2, [pc, #116]	; (b858 <ei_wrapper_start_prediction+0x148>)
    b7e2:	23c6      	movs	r3, #198	; 0xc6
    b7e4:	f00c fa33 	bl	17c4e <assert_print>
    b7e8:	481b      	ldr	r0, [pc, #108]	; (b858 <ei_wrapper_start_prediction+0x148>)
    b7ea:	21c6      	movs	r1, #198	; 0xc6
    b7ec:	f00c fa28 	bl	17c40 <assert_post_action>
    b7f0:	480f      	ldr	r0, [pc, #60]	; (b830 <ei_wrapper_start_prediction+0x120>)
    b7f2:	f002 fe07 	bl	e404 <z_spin_unlock_valid>
    b7f6:	b968      	cbnz	r0, b814 <ei_wrapper_start_prediction+0x104>
    b7f8:	4a0e      	ldr	r2, [pc, #56]	; (b834 <ei_wrapper_start_prediction+0x124>)
    b7fa:	4913      	ldr	r1, [pc, #76]	; (b848 <ei_wrapper_start_prediction+0x138>)
    b7fc:	480f      	ldr	r0, [pc, #60]	; (b83c <ei_wrapper_start_prediction+0x12c>)
    b7fe:	23b9      	movs	r3, #185	; 0xb9
    b800:	f00c fa25 	bl	17c4e <assert_print>
    b804:	490a      	ldr	r1, [pc, #40]	; (b830 <ei_wrapper_start_prediction+0x120>)
    b806:	4811      	ldr	r0, [pc, #68]	; (b84c <ei_wrapper_start_prediction+0x13c>)
    b808:	f00c fa21 	bl	17c4e <assert_print>
    b80c:	4809      	ldr	r0, [pc, #36]	; (b834 <ei_wrapper_start_prediction+0x124>)
    b80e:	21b9      	movs	r1, #185	; 0xb9
    b810:	f00c fa16 	bl	17c40 <assert_post_action>
    b814:	f384 8811 	msr	BASEPRI, r4
    b818:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    b81c:	f06f 000f 	mvn.w	r0, #15
}
    b820:	bd38      	pop	{r3, r4, r5, pc}
		b->process_idx -= ARRAY_SIZE(b->buf);
    b822:	f5a3 4394 	sub.w	r3, r3, #18944	; 0x4a00
    b826:	3b38      	subs	r3, #56	; 0x38
    b828:	e7ab      	b.n	b782 <ei_wrapper_start_prediction+0x72>
	return 0;
    b82a:	4628      	mov	r0, r5
	return err;
    b82c:	e7f8      	b.n	b820 <ei_wrapper_start_prediction+0x110>
    b82e:	bf00      	nop
    b830:	20023910 	.word	0x20023910
    b834:	0003bd42 	.word	0x0003bd42
    b838:	0003bd9b 	.word	0x0003bd9b
    b83c:	0003baf1 	.word	0x0003baf1
    b840:	0003bdb0 	.word	0x0003bdb0
    b844:	20023024 	.word	0x20023024
    b848:	0003bd6f 	.word	0x0003bd6f
    b84c:	0003bd86 	.word	0x0003bd86
    b850:	20000680 	.word	0x20000680
    b854:	0003d3e3 	.word	0x0003d3e3
    b858:	0003d0d6 	.word	0x0003d0d6

0000b85c <ei_wrapper_get_next_classification_result>:

	return max_idx;
}

int ei_wrapper_get_next_classification_result(const char **label, float *value, size_t *idx)
{
    b85c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b85e:	b087      	sub	sp, #28
    b860:	4606      	mov	r6, r0
    b862:	460d      	mov	r5, r1
    b864:	4614      	mov	r4, r2
	if (!can_read_result()) {
    b866:	f7ff fa53 	bl	ad10 <_ZL15can_read_resultv>
    b86a:	4603      	mov	r3, r0
    b86c:	b978      	cbnz	r0, b88e <ei_wrapper_get_next_classification_result+0x32>
		LOG_WRN("Result can be read only from callback context");
    b86e:	492f      	ldr	r1, [pc, #188]	; (b92c <ei_wrapper_get_next_classification_result+0xd0>)
    b870:	a805      	add	r0, sp, #20
    b872:	2202      	movs	r2, #2
    b874:	f00c fe60 	bl	18538 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>
    b878:	9204      	str	r2, [sp, #16]
    b87a:	482d      	ldr	r0, [pc, #180]	; (b930 <ei_wrapper_get_next_classification_result+0xd4>)
    b87c:	aa04      	add	r2, sp, #16
    b87e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b882:	f7fc f865 	bl	7950 <z_impl_z_log_msg2_static_create>
		return -EACCES;
    b886:	f06f 000c 	mvn.w	r0, #12
	if (idx) {
		*idx = cur_res_idx;
	}

	return 0;
}
    b88a:	b007      	add	sp, #28
    b88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cur_res_idx = get_next_result_idx(cur_res_idx);
    b88e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; b940 <ei_wrapper_get_next_classification_result+0xe4>
    b892:	f8dc 0000 	ldr.w	r0, [ip]
	if (cur_idx == RESULT_LABEL_COUNT) {
    b896:	2803      	cmp	r0, #3
    b898:	d043      	beq.n	b922 <ei_wrapper_get_next_classification_result+0xc6>
	if (cur_idx >= 0) {
    b89a:	4a26      	ldr	r2, [pc, #152]	; (b934 <ei_wrapper_get_next_classification_result+0xd8>)
	float max_val = -INFINITY;
    b89c:	ed9f 7a26 	vldr	s14, [pc, #152]	; b938 <ei_wrapper_get_next_classification_result+0xdc>
    b8a0:	4f24      	ldr	r7, [pc, #144]	; (b934 <ei_wrapper_get_next_classification_result+0xd8>)
	if (cur_idx >= 0) {
    b8a2:	2800      	cmp	r0, #0
		limit = ei_result.classification[cur_idx].value;
    b8a4:	bfaa      	itet	ge
    b8a6:	eb02 03c0 	addge.w	r3, r2, r0, lsl #3
	float limit = INFINITY;
    b8aa:	eddf 6a24 	vldrlt	s13, [pc, #144]	; b93c <ei_wrapper_get_next_classification_result+0xe0>
		limit = ei_result.classification[cur_idx].value;
    b8ae:	edd3 6a01 	vldrge	s13, [r3, #4]
	int max_idx = RESULT_LABEL_COUNT;
    b8b2:	2103      	movs	r1, #3
	for (int idx = 0; idx < RESULT_LABEL_COUNT; idx++) {
    b8b4:	2300      	movs	r3, #0
    b8b6:	eeb0 6a47 	vmov.f32	s12, s14
		if ((idx > cur_idx) && (val == limit)) {
    b8ba:	4298      	cmp	r0, r3
		float val = ei_result.classification[idx].value;
    b8bc:	edd7 7a01 	vldr	s15, [r7, #4]
		if ((idx > cur_idx) && (val == limit)) {
    b8c0:	da04      	bge.n	b8cc <ei_wrapper_get_next_classification_result+0x70>
    b8c2:	eef4 7a66 	vcmp.f32	s15, s13
    b8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8ca:	d019      	beq.n	b900 <ei_wrapper_get_next_classification_result+0xa4>
		if ((val < limit) &&
    b8cc:	eef4 7ae6 	vcmpe.f32	s15, s13
    b8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8d4:	d50e      	bpl.n	b8f4 <ei_wrapper_get_next_classification_result+0x98>
    b8d6:	eef4 7ac7 	vcmpe.f32	s15, s14
    b8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8de:	dc06      	bgt.n	b8ee <ei_wrapper_get_next_classification_result+0x92>
		    ((val > max_val) || ((val == -INFINITY) && (max_idx == RESULT_LABEL_COUNT)))) {
    b8e0:	eef4 7a46 	vcmp.f32	s15, s12
    b8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8e8:	d104      	bne.n	b8f4 <ei_wrapper_get_next_classification_result+0x98>
    b8ea:	2903      	cmp	r1, #3
    b8ec:	d102      	bne.n	b8f4 <ei_wrapper_get_next_classification_result+0x98>
    b8ee:	4619      	mov	r1, r3
			max_val = val;
    b8f0:	eeb0 7a67 	vmov.f32	s14, s15
	for (int idx = 0; idx < RESULT_LABEL_COUNT; idx++) {
    b8f4:	3301      	adds	r3, #1
    b8f6:	2b03      	cmp	r3, #3
    b8f8:	f107 0708 	add.w	r7, r7, #8
    b8fc:	d1dd      	bne.n	b8ba <ei_wrapper_get_next_classification_result+0x5e>
    b8fe:	460b      	mov	r3, r1
	if (cur_res_idx == RESULT_LABEL_COUNT) {
    b900:	2b03      	cmp	r3, #3
	cur_res_idx = get_next_result_idx(cur_res_idx);
    b902:	f8cc 3000 	str.w	r3, [ip]
	if (cur_res_idx == RESULT_LABEL_COUNT) {
    b906:	d00c      	beq.n	b922 <ei_wrapper_get_next_classification_result+0xc6>
	if (label) {
    b908:	b116      	cbz	r6, b910 <ei_wrapper_get_next_classification_result+0xb4>
		*label = ei_result.classification[cur_res_idx].label;
    b90a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    b90e:	6031      	str	r1, [r6, #0]
	if (value) {
    b910:	b11d      	cbz	r5, b91a <ei_wrapper_get_next_classification_result+0xbe>
		*value = ei_result.classification[cur_res_idx].value;
    b912:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b916:	6852      	ldr	r2, [r2, #4]
    b918:	602a      	str	r2, [r5, #0]
	if (idx) {
    b91a:	b12c      	cbz	r4, b928 <ei_wrapper_get_next_classification_result+0xcc>
		*idx = cur_res_idx;
    b91c:	6023      	str	r3, [r4, #0]
	return 0;
    b91e:	2000      	movs	r0, #0
    b920:	e7b3      	b.n	b88a <ei_wrapper_get_next_classification_result+0x2e>
		return -ENOENT;
    b922:	f06f 0001 	mvn.w	r0, #1
    b926:	e7b0      	b.n	b88a <ei_wrapper_get_next_classification_result+0x2e>
	return 0;
    b928:	4620      	mov	r0, r4
    b92a:	e7ae      	b.n	b88a <ei_wrapper_get_next_classification_result+0x2e>
    b92c:	0003d3fe 	.word	0x0003d3fe
    b930:	0001c830 	.word	0x0001c830
    b934:	20000c78 	.word	0x20000c78
    b938:	ff800000 	.word	0xff800000
    b93c:	7f800000 	.word	0x7f800000
    b940:	20011018 	.word	0x20011018

0000b944 <ei_wrapper_get_anomaly>:

int ei_wrapper_get_anomaly(float *anomaly)
{
    b944:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!can_read_result()) {
    b946:	f7ff f9e3 	bl	ad10 <_ZL15can_read_resultv>
    b94a:	4603      	mov	r3, r0
    b94c:	b980      	cbnz	r0, b970 <ei_wrapper_get_anomaly+0x2c>
		LOG_WRN("Result can be read only from callback context");
    b94e:	490a      	ldr	r1, [pc, #40]	; (b978 <ei_wrapper_get_anomaly+0x34>)
    b950:	a805      	add	r0, sp, #20
    b952:	2202      	movs	r2, #2
    b954:	f00c fdf0 	bl	18538 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>
    b958:	9204      	str	r2, [sp, #16]
    b95a:	4808      	ldr	r0, [pc, #32]	; (b97c <ei_wrapper_get_anomaly+0x38>)
    b95c:	aa04      	add	r2, sp, #16
    b95e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b962:	f7fb fff5 	bl	7950 <z_impl_z_log_msg2_static_create>
		return -EACCES;
    b966:	f06f 000c 	mvn.w	r0, #12
	if (anomaly) {
		*anomaly = ei_result.anomaly;
	}

	return 0;
}
    b96a:	b007      	add	sp, #28
    b96c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTSUP;
    b970:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b974:	e7f9      	b.n	b96a <ei_wrapper_get_anomaly+0x26>
    b976:	bf00      	nop
    b978:	0003d3fe 	.word	0x0003d3fe
    b97c:	0001c830 	.word	0x0001c830

0000b980 <ei_wrapper_init>:

	return 0;
}

int ei_wrapper_init(ei_wrapper_result_ready_cb cb)
{
    b980:	b510      	push	{r4, lr}
    b982:	b08a      	sub	sp, #40	; 0x28
	if (!cb) {
    b984:	2800      	cmp	r0, #0
    b986:	d040      	beq.n	ba0a <ei_wrapper_init+0x8a>
		return -EINVAL;
	}

	if (user_cb) {
    b988:	4b23      	ldr	r3, [pc, #140]	; (ba18 <ei_wrapper_init+0x98>)
    b98a:	681a      	ldr	r2, [r3, #0]
    b98c:	2a00      	cmp	r2, #0
    b98e:	d13f      	bne.n	ba10 <ei_wrapper_init+0x90>
		return -EALREADY;
	}

	user_cb = cb;
    b990:	6018      	str	r0, [r3, #0]

	bool cancelled;
	int err = buf_cleanup(&ei_input, &cancelled);
    b992:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    b996:	f7ff fa81 	bl	ae9c <_ZL11buf_cleanupP11data_bufferPb.constprop.0>

	__ASSERT_NO_MSG(!cancelled);
    b99a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
	int err = buf_cleanup(&ei_input, &cancelled);
    b99e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(!cancelled);
    b9a0:	b15b      	cbz	r3, b9ba <ei_wrapper_init+0x3a>
    b9a2:	491e      	ldr	r1, [pc, #120]	; (ba1c <ei_wrapper_init+0x9c>)
    b9a4:	481e      	ldr	r0, [pc, #120]	; (ba20 <ei_wrapper_init+0xa0>)
    b9a6:	4a1f      	ldr	r2, [pc, #124]	; (ba24 <ei_wrapper_init+0xa4>)
    b9a8:	f44f 73ed 	mov.w	r3, #474	; 0x1da
    b9ac:	f00c f94f 	bl	17c4e <assert_print>
    b9b0:	481c      	ldr	r0, [pc, #112]	; (ba24 <ei_wrapper_init+0xa4>)
    b9b2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    b9b6:	f00c f943 	bl	17c40 <assert_post_action>
	__ASSERT_NO_MSG(!err);
    b9ba:	b15c      	cbz	r4, b9d4 <ei_wrapper_init+0x54>
    b9bc:	491a      	ldr	r1, [pc, #104]	; (ba28 <ei_wrapper_init+0xa8>)
    b9be:	4818      	ldr	r0, [pc, #96]	; (ba20 <ei_wrapper_init+0xa0>)
    b9c0:	4a18      	ldr	r2, [pc, #96]	; (ba24 <ei_wrapper_init+0xa4>)
    b9c2:	f240 13db 	movw	r3, #475	; 0x1db
    b9c6:	f00c f942 	bl	17c4e <assert_print>
    b9ca:	4816      	ldr	r0, [pc, #88]	; (ba24 <ei_wrapper_init+0xa4>)
    b9cc:	f240 11db 	movw	r1, #475	; 0x1db
    b9d0:	f00c f936 	bl	17c40 <assert_post_action>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b9d4:	2200      	movs	r2, #0
    b9d6:	2300      	movs	r3, #0
    b9d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b9dc:	2400      	movs	r4, #0
    b9de:	2305      	movs	r3, #5
    b9e0:	e9cd 3403 	strd	r3, r4, [sp, #12]
    b9e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b9e8:	4b10      	ldr	r3, [pc, #64]	; (ba2c <ei_wrapper_init+0xac>)
    b9ea:	4911      	ldr	r1, [pc, #68]	; (ba30 <ei_wrapper_init+0xb0>)
    b9ec:	9400      	str	r4, [sp, #0]
    b9ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b9f2:	4810      	ldr	r0, [pc, #64]	; (ba34 <ei_wrapper_init+0xb4>)
    b9f4:	f002 fc20 	bl	e238 <z_impl_k_thread_create>
	ARG_UNUSED(err);

	ei_thread_id = k_thread_create(&thread, thread_stack, THREAD_STACK_SIZE,
    b9f8:	4b0f      	ldr	r3, [pc, #60]	; (ba38 <ei_wrapper_init+0xb8>)
    b9fa:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread, str);
    b9fc:	490f      	ldr	r1, [pc, #60]	; (ba3c <ei_wrapper_init+0xbc>)
    b9fe:	480d      	ldr	r0, [pc, #52]	; (ba34 <ei_wrapper_init+0xb4>)
    ba00:	f00c ffda 	bl	189b8 <z_impl_k_thread_name_set>
				       (k_thread_entry_t)edge_impulse_thread_fn,
				       NULL, NULL, NULL,
				       THREAD_PRIORITY, 0, K_NO_WAIT);
	k_thread_name_set(&thread, "edge_impulse_thread");

	return 0;
    ba04:	4620      	mov	r0, r4
}
    ba06:	b00a      	add	sp, #40	; 0x28
    ba08:	bd10      	pop	{r4, pc}
		return -EINVAL;
    ba0a:	f06f 0015 	mvn.w	r0, #21
    ba0e:	e7fa      	b.n	ba06 <ei_wrapper_init+0x86>
		return -EALREADY;
    ba10:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ba14:	e7f7      	b.n	ba06 <ei_wrapper_init+0x86>
    ba16:	bf00      	nop
    ba18:	20011020 	.word	0x20011020
    ba1c:	0003d42c 	.word	0x0003d42c
    ba20:	0003baf1 	.word	0x0003baf1
    ba24:	0003d0d6 	.word	0x0003d0d6
    ba28:	0003d437 	.word	0x0003d437
    ba2c:	0000c039 	.word	0x0000c039
    ba30:	20025180 	.word	0x20025180
    ba34:	20000bb8 	.word	0x20000bb8
    ba38:	2001101c 	.word	0x2001101c
    ba3c:	0003d43c 	.word	0x0003d43c

0000ba40 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
        int get_data(size_t offset, size_t length, float *out_buffer) {
    ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba44:	ed2d 8b04 	vpush	{d8-d9}
    ba48:	4698      	mov	r8, r3
            if (!_prev_buffer || !_end_of_signal_buffer) {
    ba4a:	68c3      	ldr	r3, [r0, #12]
        int get_data(size_t offset, size_t length, float *out_buffer) {
    ba4c:	b085      	sub	sp, #20
    ba4e:	4604      	mov	r4, r0
    ba50:	460e      	mov	r6, r1
    ba52:	4617      	mov	r7, r2
            if (!_prev_buffer || !_end_of_signal_buffer) {
    ba54:	2b00      	cmp	r3, #0
    ba56:	d079      	beq.n	bb4c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10c>
    ba58:	6902      	ldr	r2, [r0, #16]
    ba5a:	2a00      	cmp	r2, #0
    ba5c:	d076      	beq.n	bb4c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10c>
            if (offset + length > _signal->total_length) {
    ba5e:	6800      	ldr	r0, [r0, #0]
    ba60:	6902      	ldr	r2, [r0, #16]
    ba62:	eb01 0a07 	add.w	sl, r1, r7
    ba66:	4592      	cmp	sl, r2
    ba68:	d872      	bhi.n	bb50 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x110>
            if (static_cast<int32_t>(offset) - _shift >= 0) {
    ba6a:	6862      	ldr	r2, [r4, #4]
    ba6c:	1a89      	subs	r1, r1, r2
    ba6e:	d547      	bpl.n	bb00 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xc0>
            ret = _signal->get_data(offset, length, out_buffer);
    ba70:	6820      	ldr	r0, [r4, #0]
    ba72:	4643      	mov	r3, r8
    ba74:	463a      	mov	r2, r7
    ba76:	4631      	mov	r1, r6
    ba78:	f00c fdb2 	bl	185e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
    ba7c:	4605      	mov	r5, r0
    ba7e:	2800      	cmp	r0, #0
    ba80:	d143      	bne.n	bb0a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
    ba82:	46c3      	mov	fp, r8
            bool all_between_min_1_and_1 = true;
    ba84:	f04f 0901 	mov.w	r9, #1
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
    ba88:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
    ba8c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
            for (size_t ix = 0; ix < length; ix++) {
    ba90:	45b2      	cmp	sl, r6
    ba92:	7e22      	ldrb	r2, [r4, #24]
    ba94:	d042      	beq.n	bb1c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xdc>
                if (offset + ix < static_cast<uint32_t>(_shift)) {
    ba96:	6861      	ldr	r1, [r4, #4]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
    ba98:	68e0      	ldr	r0, [r4, #12]
                float now = out_buffer[ix];
    ba9a:	ed9b 8a00 	vldr	s16, [fp]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
    ba9e:	ed94 7a02 	vldr	s14, [r4, #8]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
    baa2:	42b1      	cmp	r1, r6
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
    baa4:	bf89      	itett	hi
    baa6:	6923      	ldrhi	r3, [r4, #16]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
    baa8:	edd0 6a00 	vldrls	s13, [r0]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
    baac:	eb03 0386 	addhi.w	r3, r3, r6, lsl #2
    bab0:	edd3 6a00 	vldrhi	s13, [r3]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
    bab4:	eef0 7a48 	vmov.f32	s15, s16
    bab8:	eee6 7ac7 	vfms.f32	s15, s13, s14
    babc:	eceb 7a01 	vstmia	fp!, {s15}
                if (_rescale && all_between_min_1_and_1) {
    bac0:	b182      	cbz	r2, bae4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa4>
    bac2:	f1b9 0f00 	cmp.w	r9, #0
    bac6:	d00d      	beq.n	bae4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa4>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
    bac8:	eef4 7ae8 	vcmpe.f32	s15, s17
    bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bad0:	d421      	bmi.n	bb16 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd6>
    bad2:	eef4 7ac9 	vcmpe.f32	s15, s18
    bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bada:	bfd4      	ite	le
    badc:	f04f 0901 	movle.w	r9, #1
    bae0:	f04f 0900 	movgt.w	r9, #0
                if (_shift != 1) {
    bae4:	2901      	cmp	r1, #1
    bae6:	d003      	beq.n	baf0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xb0>
                    numpy::roll(_prev_buffer, _shift, -1);
    bae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    baec:	f7ff fb3c 	bl	b168 <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
    baf0:	6862      	ldr	r2, [r4, #4]
    baf2:	68e3      	ldr	r3, [r4, #12]
    baf4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    baf8:	ed03 8a01 	vstr	s16, [r3, #-4]
            for (size_t ix = 0; ix < length; ix++) {
    bafc:	3601      	adds	r6, #1
    bafe:	e7c7      	b.n	ba90 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x50>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
    bb00:	f00c fd6e 	bl	185e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (ret != 0) {
    bb04:	4605      	mov	r5, r0
    bb06:	2800      	cmp	r0, #0
    bb08:	d0b2      	beq.n	ba70 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x30>
        }
    bb0a:	4628      	mov	r0, r5
    bb0c:	b005      	add	sp, #20
    bb0e:	ecbd 8b04 	vpop	{d8-d9}
    bb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb16:	f04f 0900 	mov.w	r9, #0
    bb1a:	e7e3      	b.n	bae4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa4>
            _next_offset_should_be += length;
    bb1c:	6963      	ldr	r3, [r4, #20]
    bb1e:	443b      	add	r3, r7
    bb20:	6163      	str	r3, [r4, #20]
            if (_rescale && !all_between_min_1_and_1) {
    bb22:	2a00      	cmp	r2, #0
    bb24:	d0f1      	beq.n	bb0a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
    bb26:	f1b9 0f00 	cmp.w	r9, #0
    bb2a:	d1ee      	bne.n	bb0a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                matrix_t scale_matrix(length, 1, out_buffer);
    bb2c:	4643      	mov	r3, r8
    bb2e:	2201      	movs	r2, #1
    bb30:	4639      	mov	r1, r7
    bb32:	4668      	mov	r0, sp
    bb34:	f00c fd0b 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
        if (scale == 1.0f) return EIDSP_OK;
    bb38:	ed9f 0a06 	vldr	s0, [pc, #24]	; bb54 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x114>
    bb3c:	4668      	mov	r0, sp
    bb3e:	f7ff f92f 	bl	ada0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
                if (ret != 0) {
    bb42:	4605      	mov	r5, r0
                    EIDSP_ERR(ret);
    bb44:	4668      	mov	r0, sp
                matrix_t scale_matrix(length, 1, out_buffer);
    bb46:	f00c fc6d 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    bb4a:	e7de      	b.n	bb0a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
    bb4c:	4d02      	ldr	r5, [pc, #8]	; (bb58 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x118>)
    bb4e:	e7dc      	b.n	bb0a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
    bb50:	4d02      	ldr	r5, [pc, #8]	; (bb5c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x11c>)
    bb52:	e7da      	b.n	bb0a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
    bb54:	38000000 	.word	0x38000000
    bb58:	fffffc16 	.word	0xfffffc16
    bb5c:	fffffc0e 	.word	0xfffffc0e

0000bb60 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
    bb60:	b508      	push	{r3, lr}
    bb62:	4613      	mov	r3, r2
    return preemphasis->get_data(offset, length, out_ptr);
    bb64:	460a      	mov	r2, r1
    bb66:	4601      	mov	r1, r0
    bb68:	4802      	ldr	r0, [pc, #8]	; (bb74 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x14>)
    bb6a:	6800      	ldr	r0, [r0, #0]
    bb6c:	f7ff ff68 	bl	ba40 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
}
    bb70:	bd08      	pop	{r3, pc}
    bb72:	bf00      	nop
    bb74:	20023918 	.word	0x20023918

0000bb78 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb7c:	ed2d 8b02 	vpush	{d8}
    bb80:	460e      	mov	r6, r1
    bb82:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    bb84:	4946      	ldr	r1, [pc, #280]	; (bca0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
    bb86:	f8d2 b004 	ldr.w	fp, [r2, #4]
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    bb8a:	4605      	mov	r5, r0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    bb8c:	6890      	ldr	r0, [r2, #8]
    bb8e:	f7f5 f9ff 	bl	f90 <strcmp>

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
    bb92:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    bb96:	2800      	cmp	r0, #0
    bb98:	bf0c      	ite	eq
    bb9a:	f04f 0a01 	moveq.w	sl, #1
    bb9e:	f04f 0a03 	movne.w	sl, #3
    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
    bba2:	435c      	muls	r4, r3
    bba4:	d00d      	beq.n	bbc2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
    bba6:	483f      	ldr	r0, [pc, #252]	; (bca4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>)
    bba8:	4621      	mov	r1, r4
    bbaa:	f005 f871 	bl	10c90 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
    bbae:	483e      	ldr	r0, [pc, #248]	; (bca8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x130>)
    bbb0:	2100      	movs	r1, #0
    bbb2:	f005 f86d 	bl	10c90 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    bbb6:	483d      	ldr	r0, [pc, #244]	; (bcac <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x134>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
    bbb8:	b005      	add	sp, #20
    bbba:	ecbd 8b02 	vpop	{d8}
    bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t bytes_left = signal->total_length;
    bbc2:	f8d5 9010 	ldr.w	r9, [r5, #16]
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    bbc6:	ed9f 8a3a 	vldr	s16, [pc, #232]	; bcb0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    bbca:	eddf 8a3a 	vldr	s17, [pc, #232]	; bcb4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
    bbce:	4627      	mov	r7, r4
    bbd0:	692b      	ldr	r3, [r5, #16]
    bbd2:	42bb      	cmp	r3, r7
    bbd4:	d961      	bls.n	bc9a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x122>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
    bbd6:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
    bbda:	46c8      	mov	r8, r9
    bbdc:	bf28      	it	cs
    bbde:	f44f 6880 	movcs.w	r8, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
    bbe2:	2300      	movs	r3, #0
    bbe4:	465a      	mov	r2, fp
    bbe6:	4641      	mov	r1, r8
    bbe8:	4668      	mov	r0, sp
    bbea:	f00c fcb0 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
        if (!input_matrix.buffer) {
    bbee:	9b00      	ldr	r3, [sp, #0]
    bbf0:	b923      	cbnz	r3, bbfc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x84>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    bbf2:	4668      	mov	r0, sp
    bbf4:	f00c fc16 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    bbf8:	482f      	ldr	r0, [pc, #188]	; (bcb8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x140>)
    bbfa:	e7dd      	b.n	bbb8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x40>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
    bbfc:	4642      	mov	r2, r8
    bbfe:	4639      	mov	r1, r7
    bc00:	4628      	mov	r0, r5
    bc02:	f00c fced 	bl	185e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    bc06:	9a00      	ldr	r2, [sp, #0]
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    bc08:	eddf 5a2c 	vldr	s11, [pc, #176]	; bcbc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
    bc0c:	ed9f 5a2c 	vldr	s10, [pc, #176]	; bcc0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x148>
    bc10:	eb02 0188 	add.w	r1, r2, r8, lsl #2
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    bc14:	4291      	cmp	r1, r2
    bc16:	d038      	beq.n	bc8a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x112>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
    bc18:	ecf2 7a01 	vldmia	r2!, {s15}
    bc1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
    bc20:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
    bc24:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    bc28:	f3c3 4007 	ubfx	r0, r3, #16, #8
    bc2c:	ee07 0a90 	vmov	s15, r0
    bc30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
    bc34:	f3c3 2007 	ubfx	r0, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    bc38:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    bc3c:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
    bc3e:	ee07 0a90 	vmov	s15, r0
    bc42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
    bc46:	f104 0001 	add.w	r0, r4, #1
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
    bc4a:	ee87 7a88 	vdiv.f32	s14, s15, s16
                output_matrix->buffer[output_ix++] = b;
    bc4e:	bf08      	it	eq
    bc50:	1ce0      	addeq	r0, r4, #3
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    bc52:	ee07 3a90 	vmov	s15, r3
    bc56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    bc5a:	bf18      	it	ne
    bc5c:	ee27 7a28 	vmulne.f32	s14, s14, s17
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    bc60:	eec7 6a88 	vdiv.f32	s13, s15, s16
                output_matrix->buffer[output_ix++] = r;
    bc64:	6833      	ldr	r3, [r6, #0]
    bc66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    bc6a:	4604      	mov	r4, r0
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    bc6c:	bf15      	itete	ne
    bc6e:	eea6 7a25 	vfmane.f32	s14, s12, s11
                output_matrix->buffer[output_ix++] = r;
    bc72:	ed83 6a00 	vstreq	s12, [r3]
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    bc76:	eea6 7a85 	vfmane.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = g;
    bc7a:	ed83 7a01 	vstreq	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
    bc7e:	bf0c      	ite	eq
    bc80:	edc3 6a02 	vstreq	s13, [r3, #8]
                output_matrix->buffer[output_ix++] = v;
    bc84:	ed83 7a00 	vstrne	s14, [r3]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    bc88:	e7c4      	b.n	bc14 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9c>
        matrix_t input_matrix(elements_to_read, config.axes);
    bc8a:	4668      	mov	r0, sp
    bc8c:	f00c fbca 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        bytes_left -= elements_to_read;
    bc90:	eba9 0908 	sub.w	r9, r9, r8
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
    bc94:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    bc98:	e79a      	b.n	bbd0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x58>
    return EIDSP_OK;
    bc9a:	2000      	movs	r0, #0
    bc9c:	e78c      	b.n	bbb8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x40>
    bc9e:	bf00      	nop
    bca0:	0003d450 	.word	0x0003d450
    bca4:	0003d45a 	.word	0x0003d45a
    bca8:	0003d471 	.word	0x0003d471
    bcac:	fffffc14 	.word	0xfffffc14
    bcb0:	437f0000 	.word	0x437f0000
    bcb4:	3f1645a2 	.word	0x3f1645a2
    bcb8:	fffffc16 	.word	0xfffffc16
    bcbc:	3e991687 	.word	0x3e991687
    bcc0:	3de978d5 	.word	0x3de978d5

0000bcc4 <_ZNSt6vectorIjSaIjEE2atEj>:
       *  This function provides for safer data access.  The parameter
       *  is first checked that it is in the range of the vector.  The
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
    bcc4:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    bcc6:	e9d0 5400 	ldrd	r5, r4, [r0]
    bcca:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
    bccc:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    bcd0:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
    bcd4:	d302      	bcc.n	bcdc <_ZNSt6vectorIjSaIjEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
    bcd6:	4803      	ldr	r0, [pc, #12]	; (bce4 <_ZNSt6vectorIjSaIjEE2atEj+0x20>)
    bcd8:	f00f ff4f 	bl	1bb7a <_ZSt24__throw_out_of_range_fmtPKcz>
      {
	_M_range_check(__n);
	return (*this)[__n];
      }
    bcdc:	eb05 0081 	add.w	r0, r5, r1, lsl #2
    bce0:	bd38      	pop	{r3, r4, r5, pc}
    bce2:	bf00      	nop
    bce4:	0003d48d 	.word	0x0003d48d

0000bce8 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
    bce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bcec:	b088      	sub	sp, #32
    bcee:	4691      	mov	r9, r2
    bcf0:	4607      	mov	r7, r0
    bcf2:	460e      	mov	r6, r1
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    uint64_t ctx_start_us = ei_read_timer_us();
    bcf4:	f00c fefe 	bl	18af4 <_Z16ei_read_timer_usv>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    bcf8:	4b29      	ldr	r3, [pc, #164]	; (bda0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb8>)
    bcfa:	9306      	str	r3, [sp, #24]
    bcfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    bd00:	2300      	movs	r3, #0
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
    bd02:	aa03      	add	r2, sp, #12
    bd04:	a902      	add	r1, sp, #8
    bd06:	a804      	add	r0, sp, #16
    bd08:	9307      	str	r3, [sp, #28]
    bd0a:	f7ff f9b5 	bl	b078 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &output_labels,
        &output_scores,
#endif
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
    bd0e:	4604      	mov	r4, r0
    bd10:	2800      	cmp	r0, #0
    bd12:	d13e      	bne.n	bd92 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xaa>
        else {
            input->data.f[ix] = fmatrix->buffer[ix];
        }
    }
#else
    bool int8_input = input->type == TfLiteType::kTfLiteInt8;
    bd14:	9b02      	ldr	r3, [sp, #8]
    bd16:	f893 a000 	ldrb.w	sl, [r3]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
    bd1a:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    bd1e:	4353      	muls	r3, r2
    bd20:	42a3      	cmp	r3, r4
    bd22:	d924      	bls.n	bd6e <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x86>
        // Quantize the input if it is int8
        if (int8_input) {
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    bd24:	683b      	ldr	r3, [r7, #0]
    bd26:	9d02      	ldr	r5, [sp, #8]
    bd28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        if (int8_input) {
    bd2c:	f1ba 0f09 	cmp.w	sl, #9
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    bd30:	f8d5 8004 	ldr.w	r8, [r5, #4]
    bd34:	edd3 7a00 	vldr	s15, [r3]
    bd38:	ea4f 0284 	mov.w	r2, r4, lsl #2
        if (int8_input) {
    bd3c:	d113      	bne.n	bd66 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x7e>
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    bd3e:	ed95 0a03 	vldr	s0, [r5, #12]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    bd42:	ee87 0a80 	vdiv.f32	s0, s15, s0
    bd46:	f009 fc03 	bl	15550 <roundf>
    bd4a:	edd5 7a04 	vldr	s15, [r5, #16]
    bd4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    bd52:	ee37 0a80 	vadd.f32	s0, s15, s0
    bd56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    bd5a:	ee17 5a90 	vmov	r5, s15
    bd5e:	f808 5004 	strb.w	r5, [r8, r4]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
    bd62:	3401      	adds	r4, #1
    bd64:	e7d9      	b.n	bd1a <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x32>
            // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
        } else {
            input->data.f[ix] = fmatrix->buffer[ix];
    bd66:	4490      	add	r8, r2
    bd68:	edc8 7a00 	vstr	s15, [r8]
    bd6c:	e7f9      	b.n	bd62 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x7a>
        }
    }
#endif

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
    bd6e:	4633      	mov	r3, r6
    bd70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    bd74:	9a03      	ldr	r2, [sp, #12]
    bd76:	f8cd 9000 	str.w	r9, [sp]
    bd7a:	f7ff f8ed 	bl	af58 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0>
    bd7e:	4604      	mov	r4, r0
        output_labels,
        output_scores,
#endif
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
    bd80:	f00c feb8 	bl	18af4 <_Z16ei_read_timer_usv>
    bd84:	9b04      	ldr	r3, [sp, #16]
    bd86:	1ac0      	subs	r0, r0, r3
    bd88:	9b05      	ldr	r3, [sp, #20]
    bd8a:	eb61 0103 	sbc.w	r1, r1, r3
    bd8e:	e9c6 010e 	strd	r0, r1, [r6, #56]	; 0x38
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
    bd92:	a806      	add	r0, sp, #24
    bd94:	f00c fc87 	bl	186a6 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
    bd98:	4620      	mov	r0, r4
    bd9a:	b008      	add	sp, #32
    bd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bda0:	0000ad29 	.word	0x0000ad29

0000bda4 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    bda4:	b530      	push	{r4, r5, lr}
    bda6:	4608      	mov	r0, r1
    bda8:	b087      	sub	sp, #28
    memset(result, 0, sizeof(ei_impulse_result_t));
    bdaa:	2250      	movs	r2, #80	; 0x50
    bdac:	2100      	movs	r1, #0
    bdae:	f00f ffd2 	bl	1bd56 <memset>
    bdb2:	4b1f      	ldr	r3, [pc, #124]	; (be30 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x8c>)
    bdb4:	9304      	str	r3, [sp, #16]
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
    bdb6:	aa01      	add	r2, sp, #4
    bdb8:	2300      	movs	r3, #0
    bdba:	4669      	mov	r1, sp
    bdbc:	a802      	add	r0, sp, #8
    bdbe:	9305      	str	r3, [sp, #20]
    bdc0:	f7ff f95a 	bl	b078 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0>
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        &output_labels,
        &output_scores,
    #endif
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
    bdc4:	4604      	mov	r4, r0
    bdc6:	bb48      	cbnz	r0, be1c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return init_res;
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
    bdc8:	9b00      	ldr	r3, [sp, #0]
    bdca:	781b      	ldrb	r3, [r3, #0]
    bdcc:	2b09      	cmp	r3, #9
    bdce:	d12b      	bne.n	be28 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x84>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
    bdd0:	f00c fe90 	bl	18af4 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
    bdd4:	9b00      	ldr	r3, [sp, #0]
    bdd6:	685d      	ldr	r5, [r3, #4]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
    bdd8:	b935      	cbnz	r5, bde8 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x44>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
    bdda:	2101      	movs	r1, #1
    bddc:	f44f 6044 	mov.w	r0, #3136	; 0xc40
    bde0:	f00c fe9c 	bl	18b1c <_Z9ei_callocjj>
            buffer_managed_by_me = true;
    bde4:	2401      	movs	r4, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
    bde6:	4605      	mov	r5, r0

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
    bde8:	4b12      	ldr	r3, [pc, #72]	; (be34 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x90>)
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    bdea:	4913      	ldr	r1, [pc, #76]	; (be38 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x94>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
    bdec:	689b      	ldr	r3, [r3, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    bdee:	6898      	ldr	r0, [r3, #8]
    bdf0:	f7f5 f8ce 	bl	f90 <strcmp>

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
    bdf4:	4811      	ldr	r0, [pc, #68]	; (be3c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x98>)
    bdf6:	f44f 6144 	mov.w	r1, #3136	; 0xc40
    bdfa:	f004 ff49 	bl	10c90 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
    bdfe:	4810      	ldr	r0, [pc, #64]	; (be40 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x9c>)
    be00:	2100      	movs	r1, #0
    be02:	f004 ff45 	bl	10c90 <_Z9ei_printfPKcz>
    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
    be06:	490f      	ldr	r1, [pc, #60]	; (be44 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa0>)
    be08:	480f      	ldr	r0, [pc, #60]	; (be48 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa4>)
    be0a:	f004 ff41 	bl	10c90 <_Z9ei_printfPKcz>
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
    be0e:	b11d      	cbz	r5, be18 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x74>
    be10:	b114      	cbz	r4, be18 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x74>
            ei_free(buffer);
    be12:	4628      	mov	r0, r5
    be14:	f00c fe84 	bl	18b20 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
    be18:	f06f 0404 	mvn.w	r4, #4
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
    be1c:	a804      	add	r0, sp, #16
    be1e:	f00c fc42 	bl	186a6 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;

    return EI_IMPULSE_OK;
}
    be22:	4620      	mov	r0, r4
    be24:	b007      	add	sp, #28
    be26:	bd30      	pop	{r4, r5, pc}
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    be28:	f06f 0408 	mvn.w	r4, #8
    be2c:	e7f6      	b.n	be1c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
    be2e:	bf00      	nop
    be30:	0000ad29 	.word	0x0000ad29
    be34:	20000068 	.word	0x20000068
    be38:	0003d450 	.word	0x0003d450
    be3c:	0003d45a 	.word	0x0003d45a
    be40:	0003d471 	.word	0x0003d471
    be44:	fffffc14 	.word	0xfffffc14
    be48:	0003d4d7 	.word	0x0003d4d7

0000be4c <run_classifier_image_quantized>:
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    be4c:	4b0b      	ldr	r3, [pc, #44]	; (be7c <run_classifier_image_quantized+0x30>)
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    be4e:	b570      	push	{r4, r5, r6, lr}
    be50:	4616      	mov	r6, r2
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    be52:	685a      	ldr	r2, [r3, #4]
    be54:	4b0a      	ldr	r3, [pc, #40]	; (be80 <run_classifier_image_quantized+0x34>)
    be56:	429a      	cmp	r2, r3
{
    be58:	4605      	mov	r5, r0
    be5a:	460c      	mov	r4, r1
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    be5c:	d10b      	bne.n	be76 <run_classifier_image_quantized+0x2a>
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
    if (verify_res != EI_IMPULSE_OK) {
        return verify_res;
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
    be5e:	2250      	movs	r2, #80	; 0x50
    be60:	2100      	movs	r1, #0
    be62:	4620      	mov	r0, r4
    be64:	f00f ff77 	bl	1bd56 <memset>

#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#else

    return run_nn_inference_image_quantized(signal, result, debug);
    be68:	4632      	mov	r2, r6
    be6a:	4621      	mov	r1, r4
    be6c:	4628      	mov	r0, r5
        result->classification[ix].value = value;
    }

    return EI_IMPULSE_OK;
#endif // (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
}
    be6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return run_nn_inference_image_quantized(signal, result, debug);
    be72:	f7ff bf97 	b.w	bda4 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>
}
    be76:	f06f 0008 	mvn.w	r0, #8
    be7a:	bd70      	pop	{r4, r5, r6, pc}
    be7c:	20000068 	.word	0x20000068
    be80:	0000bb79 	.word	0x0000bb79

0000be84 <_ZN14SignalWithAxes10get_signalEv>:
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
    {

    }

    signal_t * get_signal() {
    be84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
    be86:	6882      	ldr	r2, [r0, #8]
            return this->_original_signal;
    be88:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
    be8a:	2a01      	cmp	r2, #1
    be8c:	d010      	beq.n	beb0 <_ZN14SignalWithAxes10get_signalEv+0x2c>
        }

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
    be8e:	6923      	ldr	r3, [r4, #16]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    be90:	9000      	str	r0, [sp, #0]
    be92:	4353      	muls	r3, r2
    be94:	61c3      	str	r3, [r0, #28]
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
            return this->get_data(offset, length, out_ptr);
        };
    be96:	f100 040c 	add.w	r4, r0, #12
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
    be9a:	4b07      	ldr	r3, [pc, #28]	; (beb8 <_ZN14SignalWithAxes10get_signalEv+0x34>)
    be9c:	9303      	str	r3, [sp, #12]
	  function(std::forward<_Functor>(__f)).swap(*this);
    be9e:	4668      	mov	r0, sp
	    _M_manager = &_My_handler::_M_manager;
    bea0:	4b06      	ldr	r3, [pc, #24]	; (bebc <_ZN14SignalWithAxes10get_signalEv+0x38>)
    bea2:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
    bea4:	4621      	mov	r1, r4
    bea6:	f00c fc13 	bl	186d0 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
    beaa:	4668      	mov	r0, sp
    beac:	f00c fb46 	bl	1853c <_ZNSt14_Function_baseD1Ev>
#endif
        return &wrapped_signal;
    }
    beb0:	4620      	mov	r0, r4
    beb2:	b004      	add	sp, #16
    beb4:	bd10      	pop	{r4, pc}
    beb6:	bf00      	nop
    beb8:	0001864f 	.word	0x0001864f
    bebc:	000184b3 	.word	0x000184b3

0000bec0 <run_classifier>:
{
    bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    bec4:	4d47      	ldr	r5, [pc, #284]	; (bfe4 <run_classifier+0x124>)
    bec6:	4f48      	ldr	r7, [pc, #288]	; (bfe8 <run_classifier+0x128>)
    bec8:	686b      	ldr	r3, [r5, #4]
    beca:	42bb      	cmp	r3, r7
{
    becc:	b093      	sub	sp, #76	; 0x4c
    bece:	4680      	mov	r8, r0
    bed0:	460c      	mov	r4, r1
    bed2:	4616      	mov	r6, r2
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    bed4:	d104      	bne.n	bee0 <run_classifier+0x20>
}
    bed6:	b013      	add	sp, #76	; 0x4c
    bed8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return run_classifier_image_quantized(signal, result, debug);
    bedc:	f7ff bfb6 	b.w	be4c <run_classifier_image_quantized>
    memset(result, 0, sizeof(ei_impulse_result_t));
    bee0:	2250      	movs	r2, #80	; 0x50
    bee2:	2100      	movs	r1, #0
    bee4:	4620      	mov	r0, r4
    bee6:	f00f ff36 	bl	1bd56 <memset>
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
    beea:	f44f 6244 	mov.w	r2, #3136	; 0xc40
    beee:	2300      	movs	r3, #0
    bef0:	2101      	movs	r1, #1
    bef2:	a802      	add	r0, sp, #8
    bef4:	f00c fb2b 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    uint64_t dsp_start_us = ei_read_timer_us();
    bef8:	f00c fdfc 	bl	18af4 <_Z16ei_read_timer_usv>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    befc:	682a      	ldr	r2, [r5, #0]
        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
    befe:	f5b2 6f44 	cmp.w	r2, #3136	; 0xc40
    uint64_t dsp_start_us = ei_read_timer_us();
    bf02:	4607      	mov	r7, r0
    bf04:	4689      	mov	r9, r1
        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
    bf06:	d90b      	bls.n	bf20 <run_classifier+0x60>
            ei_printf("ERR: Would write outside feature buffer\n");
    bf08:	4838      	ldr	r0, [pc, #224]	; (bfec <run_classifier+0x12c>)
    bf0a:	f004 fec1 	bl	10c90 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
    bf0e:	f06f 0504 	mvn.w	r5, #4
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
    bf12:	a802      	add	r0, sp, #8
    bf14:	f00c fa86 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
}
    bf18:	4628      	mov	r0, r5
    bf1a:	b013      	add	sp, #76	; 0x4c
    bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    bf20:	e9d5 ab02 	ldrd	sl, fp, [r5, #8]
    bf24:	686b      	ldr	r3, [r5, #4]
    bf26:	9301      	str	r3, [sp, #4]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    bf28:	2101      	movs	r1, #1
    bf2a:	9b02      	ldr	r3, [sp, #8]
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    bf2c:	692d      	ldr	r5, [r5, #16]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    bf2e:	a806      	add	r0, sp, #24
    bf30:	f00c fb0d 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    _Function_base() : _M_manager(nullptr) { }
    bf34:	2300      	movs	r3, #0
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
    bf36:	a80a      	add	r0, sp, #40	; 0x28
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
    bf38:	e9cd 8b0a 	strd	r8, fp, [sp, #40]	; 0x28
    bf3c:	930f      	str	r3, [sp, #60]	; 0x3c
    bf3e:	950c      	str	r5, [sp, #48]	; 0x30
    bf40:	f7ff ffa0 	bl	be84 <_ZN14SignalWithAxes10get_signalEv>
    bf44:	ed9f 0a2a 	vldr	s0, [pc, #168]	; bff0 <run_classifier+0x130>
    bf48:	9b01      	ldr	r3, [sp, #4]
    bf4a:	4652      	mov	r2, sl
    bf4c:	a906      	add	r1, sp, #24
    bf4e:	4798      	blx	r3
        if (ret != EIDSP_OK) {
    bf50:	4680      	mov	r8, r0
    bf52:	b160      	cbz	r0, bf6e <run_classifier+0xae>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
    bf54:	4601      	mov	r1, r0
    bf56:	4827      	ldr	r0, [pc, #156]	; (bff4 <run_classifier+0x134>)
    bf58:	f004 fe9a 	bl	10c90 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
    bf5c:	f06f 0504 	mvn.w	r5, #4
    class function<_Res(_ArgTypes...)>
    bf60:	a80d      	add	r0, sp, #52	; 0x34
    bf62:	f00c faeb 	bl	1853c <_ZNSt14_Function_baseD1Ev>
    bf66:	a806      	add	r0, sp, #24
    bf68:	f00c fa5c 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    bf6c:	e7d1      	b.n	bf12 <run_classifier+0x52>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    bf6e:	f00c fdbf 	bl	18af0 <_Z29ei_run_impulse_check_canceledv>
    bf72:	1c83      	adds	r3, r0, #2
    bf74:	4605      	mov	r5, r0
    bf76:	d0f3      	beq.n	bf60 <run_classifier+0xa0>
    bf78:	a80d      	add	r0, sp, #52	; 0x34
    bf7a:	f00c fadf 	bl	1853c <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    bf7e:	a806      	add	r0, sp, #24
    bf80:	f00c fa50 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
    bf84:	f00c fdb6 	bl	18af4 <_Z16ei_read_timer_usv>
    bf88:	1bc0      	subs	r0, r0, r7
    bf8a:	eb61 0109 	sbc.w	r1, r1, r9
    bf8e:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
    bf92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bf96:	2300      	movs	r3, #0
    bf98:	f7f4 fda8 	bl	aec <__aeabi_ldivmod>
    bf9c:	4601      	mov	r1, r0
    bf9e:	6260      	str	r0, [r4, #36]	; 0x24
    if (debug) {
    bfa0:	b1ce      	cbz	r6, bfd6 <run_classifier+0x116>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
    bfa2:	4815      	ldr	r0, [pc, #84]	; (bff8 <run_classifier+0x138>)
            ei_printf(" ");
    bfa4:	4f15      	ldr	r7, [pc, #84]	; (bffc <run_classifier+0x13c>)
        ei_printf("Features (%d ms.): ", result->timing.dsp);
    bfa6:	f004 fe73 	bl	10c90 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
    bfaa:	9b04      	ldr	r3, [sp, #16]
    bfac:	4543      	cmp	r3, r8
    bfae:	d90c      	bls.n	bfca <run_classifier+0x10a>
            ei_printf_float(features_matrix.buffer[ix]);
    bfb0:	9b02      	ldr	r3, [sp, #8]
    bfb2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    bfb6:	ed93 0a00 	vldr	s0, [r3]
    bfba:	f004 fe83 	bl	10cc4 <_Z15ei_printf_floatf>
            ei_printf(" ");
    bfbe:	4638      	mov	r0, r7
    bfc0:	f004 fe66 	bl	10c90 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
    bfc4:	f108 0801 	add.w	r8, r8, #1
    bfc8:	e7ef      	b.n	bfaa <run_classifier+0xea>
        ei_printf("\n");
    bfca:	480d      	ldr	r0, [pc, #52]	; (c000 <run_classifier+0x140>)
    bfcc:	f004 fe60 	bl	10c90 <_Z9ei_printfPKcz>
        ei_printf("Running neural network...\n");
    bfd0:	480c      	ldr	r0, [pc, #48]	; (c004 <run_classifier+0x144>)
    bfd2:	f004 fe5d 	bl	10c90 <_Z9ei_printfPKcz>
    return run_inference(&features_matrix, result, debug);
    bfd6:	4632      	mov	r2, r6
    bfd8:	4621      	mov	r1, r4
    bfda:	a802      	add	r0, sp, #8
    bfdc:	f00c fb6b 	bl	186b6 <run_inference>
    bfe0:	4605      	mov	r5, r0
    bfe2:	e796      	b.n	bf12 <run_classifier+0x52>
    bfe4:	20000068 	.word	0x20000068
    bfe8:	0000bb79 	.word	0x0000bb79
    bfec:	0003d4fc 	.word	0x0003d4fc
    bff0:	467a0000 	.word	0x467a0000
    bff4:	0003d4d7 	.word	0x0003d4d7
    bff8:	0003d570 	.word	0x0003d570
    bffc:	0003ed26 	.word	0x0003ed26
    c000:	0003dca1 	.word	0x0003dca1
    c004:	0003d5bc 	.word	0x0003d5bc

0000c008 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
    c008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
    c00a:	2300      	movs	r3, #0
    c00c:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
    c00e:	b121      	cbz	r1, c01a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
    c010:	4b07      	ldr	r3, [pc, #28]	; (c030 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
    c012:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
    c014:	4b07      	ldr	r3, [pc, #28]	; (c034 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    c016:	9100      	str	r1, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
    c018:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
    c01a:	4601      	mov	r1, r0
    c01c:	4668      	mov	r0, sp
    c01e:	f00c fb57 	bl	186d0 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
    c022:	4668      	mov	r0, sp
    c024:	f00c fa8a 	bl	1853c <_ZNSt14_Function_baseD1Ev>
	}
    c028:	b005      	add	sp, #20
    c02a:	f85d fb04 	ldr.w	pc, [sp], #4
    c02e:	bf00      	nop
    c030:	000184db 	.word	0x000184db
    c034:	000184c7 	.word	0x000184c7

0000c038 <_ZL22edge_impulse_thread_fnv>:
{
    c038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c03c:	b087      	sub	sp, #28
    c03e:	af00      	add	r7, sp, #0
    _Function_base() : _M_manager(nullptr) { }
    c040:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(user_cb);
    c042:	4e43      	ldr	r6, [pc, #268]	; (c150 <_ZL22edge_impulse_thread_fnv+0x118>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c044:	4d43      	ldr	r5, [pc, #268]	; (c154 <_ZL22edge_impulse_thread_fnv+0x11c>)
    c046:	60fb      	str	r3, [r7, #12]
	return z_impl_k_sem_take(sem, timeout);
    c048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c050:	4841      	ldr	r0, [pc, #260]	; (c158 <_ZL22edge_impulse_thread_fnv+0x120>)
    c052:	f002 fd6d 	bl	eb30 <z_impl_k_sem_take>
		features_signal.get_data = &raw_feature_get_data;
    c056:	4941      	ldr	r1, [pc, #260]	; (c15c <_ZL22edge_impulse_thread_fnv+0x124>)
    c058:	1d38      	adds	r0, r7, #4
    c05a:	f7ff ffd5 	bl	c008 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
		features_signal.total_length = INPUT_WINDOW_SIZE;
    c05e:	f643 6370 	movw	r3, #15984	; 0x3e70
		EI_IMPULSE_ERROR err = run_classifier(&features_signal,
    c062:	493f      	ldr	r1, [pc, #252]	; (c160 <_ZL22edge_impulse_thread_fnv+0x128>)
		features_signal.total_length = INPUT_WINDOW_SIZE;
    c064:	617b      	str	r3, [r7, #20]
		EI_IMPULSE_ERROR err = run_classifier(&features_signal,
    c066:	2200      	movs	r2, #0
    c068:	1d38      	adds	r0, r7, #4
    c06a:	f7ff ff29 	bl	bec0 <run_classifier>
		if (err) {
    c06e:	4604      	mov	r4, r0
    c070:	b190      	cbz	r0, c098 <_ZL22edge_impulse_thread_fnv+0x60>
			LOG_ERR("run_classifier err=%d", err);
    c072:	46e8      	mov	r8, sp
    c074:	b088      	sub	sp, #32
    c076:	466a      	mov	r2, sp
    c078:	f102 0014 	add.w	r0, r2, #20
    c07c:	4939      	ldr	r1, [pc, #228]	; (c164 <_ZL22edge_impulse_thread_fnv+0x12c>)
    c07e:	2303      	movs	r3, #3
    c080:	f00c fa5a 	bl	18538 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>
    c084:	6194      	str	r4, [r2, #24]
    c086:	f842 3f10 	str.w	r3, [r2, #16]!
    c08a:	4837      	ldr	r0, [pc, #220]	; (c168 <_ZL22edge_impulse_thread_fnv+0x130>)
    c08c:	2300      	movs	r3, #0
    c08e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c092:	f7fb fc5d 	bl	7950 <z_impl_z_log_msg2_static_create>
    c096:	46c5      	mov	sp, r8
	__ASSERT_NO_MSG(user_cb);
    c098:	6833      	ldr	r3, [r6, #0]
    c09a:	b95b      	cbnz	r3, c0b4 <_ZL22edge_impulse_thread_fnv+0x7c>
    c09c:	4933      	ldr	r1, [pc, #204]	; (c16c <_ZL22edge_impulse_thread_fnv+0x134>)
    c09e:	4834      	ldr	r0, [pc, #208]	; (c170 <_ZL22edge_impulse_thread_fnv+0x138>)
    c0a0:	4a34      	ldr	r2, [pc, #208]	; (c174 <_ZL22edge_impulse_thread_fnv+0x13c>)
    c0a2:	f240 1331 	movw	r3, #305	; 0x131
    c0a6:	f00b fdd2 	bl	17c4e <assert_print>
    c0aa:	4832      	ldr	r0, [pc, #200]	; (c174 <_ZL22edge_impulse_thread_fnv+0x13c>)
    c0ac:	f240 1131 	movw	r1, #305	; 0x131
    c0b0:	f00b fdc6 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    c0b4:	f04f 0320 	mov.w	r3, #32
    c0b8:	f3ef 8911 	mrs	r9, BASEPRI
    c0bc:	f383 8812 	msr	BASEPRI_MAX, r3
    c0c0:	f3bf 8f6f 	isb	sy
    c0c4:	4628      	mov	r0, r5
    c0c6:	f002 f98f 	bl	e3e8 <z_spin_lock_valid>
    c0ca:	b968      	cbnz	r0, c0e8 <_ZL22edge_impulse_thread_fnv+0xb0>
    c0cc:	4a2a      	ldr	r2, [pc, #168]	; (c178 <_ZL22edge_impulse_thread_fnv+0x140>)
    c0ce:	492b      	ldr	r1, [pc, #172]	; (c17c <_ZL22edge_impulse_thread_fnv+0x144>)
    c0d0:	4827      	ldr	r0, [pc, #156]	; (c170 <_ZL22edge_impulse_thread_fnv+0x138>)
    c0d2:	238e      	movs	r3, #142	; 0x8e
    c0d4:	f00b fdbb 	bl	17c4e <assert_print>
    c0d8:	4829      	ldr	r0, [pc, #164]	; (c180 <_ZL22edge_impulse_thread_fnv+0x148>)
    c0da:	4629      	mov	r1, r5
    c0dc:	f00b fdb7 	bl	17c4e <assert_print>
    c0e0:	4825      	ldr	r0, [pc, #148]	; (c178 <_ZL22edge_impulse_thread_fnv+0x140>)
    c0e2:	218e      	movs	r1, #142	; 0x8e
    c0e4:	f00b fdac 	bl	17c40 <assert_post_action>
	__ASSERT_NO_MSG(b->state == STATE_PROCESSING);
    c0e8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; c194 <_ZL22edge_impulse_thread_fnv+0x15c>
	z_spin_lock_set_owner(l);
    c0ec:	4628      	mov	r0, r5
    c0ee:	f002 f999 	bl	e424 <z_spin_lock_set_owner>
    c0f2:	f898 38f0 	ldrb.w	r3, [r8, #2288]	; 0x8f0
    c0f6:	2b02      	cmp	r3, #2
    c0f8:	d009      	beq.n	c10e <_ZL22edge_impulse_thread_fnv+0xd6>
    c0fa:	4922      	ldr	r1, [pc, #136]	; (c184 <_ZL22edge_impulse_thread_fnv+0x14c>)
    c0fc:	481c      	ldr	r0, [pc, #112]	; (c170 <_ZL22edge_impulse_thread_fnv+0x138>)
    c0fe:	4a1d      	ldr	r2, [pc, #116]	; (c174 <_ZL22edge_impulse_thread_fnv+0x13c>)
    c100:	2353      	movs	r3, #83	; 0x53
    c102:	f00b fda4 	bl	17c4e <assert_print>
    c106:	481b      	ldr	r0, [pc, #108]	; (c174 <_ZL22edge_impulse_thread_fnv+0x13c>)
    c108:	2153      	movs	r1, #83	; 0x53
    c10a:	f00b fd99 	bl	17c40 <assert_post_action>
	b->state = STATE_READY;
    c10e:	2303      	movs	r3, #3
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c110:	4628      	mov	r0, r5
    c112:	f888 38f0 	strb.w	r3, [r8, #2288]	; 0x8f0
    c116:	f002 f975 	bl	e404 <z_spin_unlock_valid>
    c11a:	b968      	cbnz	r0, c138 <_ZL22edge_impulse_thread_fnv+0x100>
    c11c:	4a16      	ldr	r2, [pc, #88]	; (c178 <_ZL22edge_impulse_thread_fnv+0x140>)
    c11e:	491a      	ldr	r1, [pc, #104]	; (c188 <_ZL22edge_impulse_thread_fnv+0x150>)
    c120:	4813      	ldr	r0, [pc, #76]	; (c170 <_ZL22edge_impulse_thread_fnv+0x138>)
    c122:	23b9      	movs	r3, #185	; 0xb9
    c124:	f00b fd93 	bl	17c4e <assert_print>
    c128:	4818      	ldr	r0, [pc, #96]	; (c18c <_ZL22edge_impulse_thread_fnv+0x154>)
    c12a:	4629      	mov	r1, r5
    c12c:	f00b fd8f 	bl	17c4e <assert_print>
    c130:	4811      	ldr	r0, [pc, #68]	; (c178 <_ZL22edge_impulse_thread_fnv+0x140>)
    c132:	21b9      	movs	r1, #185	; 0xb9
    c134:	f00b fd84 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    c138:	f389 8811 	msr	BASEPRI, r9
    c13c:	f3bf 8f6f 	isb	sy
	cur_res_idx = -1;
    c140:	4b13      	ldr	r3, [pc, #76]	; (c190 <_ZL22edge_impulse_thread_fnv+0x158>)
    c142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c146:	601a      	str	r2, [r3, #0]
	user_cb(err);
    c148:	4620      	mov	r0, r4
    c14a:	6833      	ldr	r3, [r6, #0]
    c14c:	4798      	blx	r3
}
    c14e:	e77b      	b.n	c048 <_ZL22edge_impulse_thread_fnv+0x10>
    c150:	20011020 	.word	0x20011020
    c154:	20023910 	.word	0x20023910
    c158:	20000680 	.word	0x20000680
    c15c:	0000ade5 	.word	0x0000ade5
    c160:	20000c78 	.word	0x20000c78
    c164:	0003d5d7 	.word	0x0003d5d7
    c168:	0001c830 	.word	0x0001c830
    c16c:	0003d5ed 	.word	0x0003d5ed
    c170:	0003baf1 	.word	0x0003baf1
    c174:	0003d0d6 	.word	0x0003d0d6
    c178:	0003bd42 	.word	0x0003bd42
    c17c:	0003bd9b 	.word	0x0003bd9b
    c180:	0003bdb0 	.word	0x0003bdb0
    c184:	0003d124 	.word	0x0003d124
    c188:	0003bd6f 	.word	0x0003bd6f
    c18c:	0003bd86 	.word	0x0003bd86
    c190:	20011018 	.word	0x20011018
    c194:	20023024 	.word	0x20023024

0000c198 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    c198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c19c:	e9d0 9800 	ldrd	r9, r8, [r0]
    c1a0:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    c1a2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c1a6:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
    c1aa:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    c1ae:	4607      	mov	r7, r0
    c1b0:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c1b2:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
    c1b6:	d102      	bne.n	c1be <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
    c1b8:	481e      	ldr	r0, [pc, #120]	; (c234 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x9c>)
    c1ba:	f00f fcdb 	bl	1bb74 <_ZSt20__throw_length_errorPKc>
    c1be:	2c01      	cmp	r4, #1
    c1c0:	4622      	mov	r2, r4
    c1c2:	bf38      	it	cc
    c1c4:	2201      	movcc	r2, #1
    c1c6:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    c1c8:	eba1 0509 	sub.w	r5, r1, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    c1cc:	d22d      	bcs.n	c22a <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x92>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c1ce:	b374      	cbz	r4, c22e <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x96>
    c1d0:	429c      	cmp	r4, r3
    c1d2:	bf28      	it	cs
    c1d4:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    c1d6:	00a0      	lsls	r0, r4, #2
    c1d8:	f00f fcb6 	bl	1bb48 <_Znwj>
    c1dc:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    c1de:	42ee      	cmn	r6, r5
    c1e0:	bf1c      	itt	ne
    c1e2:	f8db 3000 	ldrne.w	r3, [fp]
    c1e6:	5173      	strne	r3, [r6, r5]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
    c1e8:	2d00      	cmp	r5, #0
    c1ea:	dd04      	ble.n	c1f6 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x5e>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    c1ec:	462a      	mov	r2, r5
    c1ee:	4649      	mov	r1, r9
    c1f0:	4630      	mov	r0, r6
    c1f2:	f00f fd96 	bl	1bd22 <memmove>
      ptrdiff_t __count = __last - __first;
    c1f6:	eba8 080a 	sub.w	r8, r8, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    c1fa:	3504      	adds	r5, #4
      if (__count > 0)
    c1fc:	f1b8 0f00 	cmp.w	r8, #0
    c200:	4435      	add	r5, r6
    c202:	dd04      	ble.n	c20e <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    c204:	4642      	mov	r2, r8
    c206:	4651      	mov	r1, sl
    c208:	4628      	mov	r0, r5
    c20a:	f00f fd69 	bl	1bce0 <memcpy>
      return __result + __count;
    c20e:	4445      	add	r5, r8
	if (__p)
    c210:	f1b9 0f00 	cmp.w	r9, #0
    c214:	d002      	beq.n	c21c <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x84>
	::operator delete(__p
    c216:	4648      	mov	r0, r9
    c218:	f00f fc92 	bl	1bb40 <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    c21c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
    c220:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    c224:	60bc      	str	r4, [r7, #8]
    }
    c226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    c22a:	461c      	mov	r4, r3
    c22c:	e7d3      	b.n	c1d6 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    c22e:	4626      	mov	r6, r4
    c230:	e7d5      	b.n	c1de <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x46>
    c232:	bf00      	nop
    c234:	0003d5f5 	.word	0x0003d5f5

0000c238 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>:
    static int stack_frames(stack_frames_info_t *info,
    c238:	b570      	push	{r4, r5, r6, lr}
    c23a:	ed2d 8b02 	vpush	{d8}
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
    c23e:	6805      	ldr	r5, [r0, #0]
    static int stack_frames(stack_frames_info_t *info,
    c240:	b084      	sub	sp, #16
    c242:	4606      	mov	r6, r0
    c244:	eef0 7a40 	vmov.f32	s15, s0
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
    c248:	2d00      	cmp	r5, #0
    c24a:	d076      	beq.n	c33a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
    c24c:	68ab      	ldr	r3, [r5, #8]
    c24e:	2b00      	cmp	r3, #0
    c250:	d073      	beq.n	c33a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
    c252:	692c      	ldr	r4, [r5, #16]
    c254:	2c00      	cmp	r4, #0
    c256:	d070      	beq.n	c33a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
        if (version == 1) {
    c258:	2901      	cmp	r1, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
    c25a:	ee20 0a20 	vmul.f32	s0, s0, s1
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
    c25e:	ee67 8a81 	vmul.f32	s17, s15, s2
        if (version == 1) {
    c262:	d14b      	bne.n	c2fc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xc4>
    c264:	f009 f974 	bl	15550 <roundf>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
    c268:	eebd 8ac0 	vcvt.s32.f32	s16, s0
    c26c:	eeb0 0a68 	vmov.f32	s0, s17
    c270:	f009 f96e 	bl	15550 <roundf>
            length = frame_sample_length;
    c274:	ee18 3a10 	vmov	r3, s16
    c278:	eef0 8a40 	vmov.f32	s17, s0
                floor(static_cast<float>(length_signal - length) / frame_stride));
    c27c:	1ae3      	subs	r3, r4, r3
    c27e:	ee00 3a10 	vmov	s0, r3
    c282:	eeb8 0a40 	vcvt.f32.u32	s0, s0
  { return __builtin_floorf(__x); }
    c286:	ee80 0a28 	vdiv.f32	s0, s0, s17
    c28a:	f009 f8f9 	bl	15480 <floorf>
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
    c28e:	200c      	movs	r0, #12
            numframes = static_cast<int>(
    c290:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    c294:	ed8d 0a01 	vstr	s0, [sp, #4]
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
    c298:	9b01      	ldr	r3, [sp, #4]
    c29a:	3b01      	subs	r3, #1
    c29c:	ee07 3a90 	vmov	s15, r3
    c2a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    c2a4:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    c2a8:	eee8 7a87 	vfma.f32	s15, s17, s14
            len_sig = static_cast<int>(
    c2ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c2b0:	edcd 7a02 	vstr	s15, [sp, #8]
            info->signal->total_length = static_cast<size_t>(len_sig);
    c2b4:	9b02      	ldr	r3, [sp, #8]
    c2b6:	612b      	str	r3, [r5, #16]
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
    c2b8:	f00f fc46 	bl	1bb48 <_Znwj>
    c2bc:	4604      	mov	r4, r0
    c2be:	b118      	cbz	r0, c2c8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x90>
	: _M_start(), _M_finish(), _M_end_of_storage()
    c2c0:	2300      	movs	r3, #0
    c2c2:	e9c0 3300 	strd	r3, r3, [r0]
    c2c6:	6083      	str	r3, [r0, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
    c2c8:	2500      	movs	r5, #0
    c2ca:	9503      	str	r5, [sp, #12]
    c2cc:	9b03      	ldr	r3, [sp, #12]
    c2ce:	9a02      	ldr	r2, [sp, #8]
    c2d0:	4293      	cmp	r3, r2
    c2d2:	d22a      	bcs.n	c32a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf2>
            if (++frame_count > numframes) break;
    c2d4:	9a01      	ldr	r2, [sp, #4]
    c2d6:	3501      	adds	r5, #1
    c2d8:	4295      	cmp	r5, r2
    c2da:	dc26      	bgt.n	c32a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf2>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    c2dc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    c2e0:	4291      	cmp	r1, r2
    c2e2:	d01d      	beq.n	c320 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    c2e4:	b101      	cbz	r1, c2e8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb0>
    c2e6:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
    c2e8:	3104      	adds	r1, #4
    c2ea:	6061      	str	r1, [r4, #4]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
    c2ec:	eefc 7ae8 	vcvt.u32.f32	s15, s17
    c2f0:	9b03      	ldr	r3, [sp, #12]
    c2f2:	ee17 2a90 	vmov	r2, s15
    c2f6:	4413      	add	r3, r2
    c2f8:	9303      	str	r3, [sp, #12]
    c2fa:	e7e7      	b.n	c2cc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x94>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
    c2fc:	f7fe fce6 	bl	accc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
    c300:	eebd 8ac0 	vcvt.s32.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
    c304:	eeb0 0a68 	vmov.f32	s0, s17
    c308:	f7fe fce0 	bl	accc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            length = (frame_sample_length - (int)frame_stride);
    c30c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c310:	ee18 2a10 	vmov	r2, s16
    c314:	ee17 3a90 	vmov	r3, s15
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
    c318:	eef0 8a40 	vmov.f32	s17, s0
            length = (frame_sample_length - (int)frame_stride);
    c31c:	1ad3      	subs	r3, r2, r3
    c31e:	e7ad      	b.n	c27c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x44>
	  _M_realloc_insert(end(), __x);
    c320:	aa03      	add	r2, sp, #12
    c322:	4620      	mov	r0, r4
    c324:	f7ff ff38 	bl	c198 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>
    c328:	e7e0      	b.n	c2ec <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb4>
        info->frame_ixs = frame_indices;
    c32a:	6074      	str	r4, [r6, #4]
        info->frame_length = frame_sample_length;
    c32c:	ed86 8a02 	vstr	s16, [r6, #8]
        return EIDSP_OK;
    c330:	2000      	movs	r0, #0
    }
    c332:	b004      	add	sp, #16
    c334:	ecbd 8b02 	vpop	{d8}
    c338:	bd70      	pop	{r4, r5, r6, pc}
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
    c33a:	4801      	ldr	r0, [pc, #4]	; (c340 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x108>)
    c33c:	e7f9      	b.n	c332 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xfa>
    c33e:	bf00      	nop
    c340:	fffffc15 	.word	0xfffffc15

0000c344 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
    c344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c348:	b099      	sub	sp, #100	; 0x64
    c34a:	4698      	mov	r8, r3
    c34c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
    c350:	9306      	str	r3, [sp, #24]
        uint16_t version
        )
    {
        int ret = 0;

        if (high_frequency == 0) {
    c352:	e9dd 9324 	ldrd	r9, r3, [sp, #144]	; 0x90
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
    c356:	f8bd a088 	ldrh.w	sl, [sp, #136]	; 0x88
    c35a:	4605      	mov	r5, r0
    c35c:	460f      	mov	r7, r1
    c35e:	eeb0 1a60 	vmov.f32	s2, s1
        if (high_frequency == 0) {
    c362:	b913      	cbnz	r3, c36a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x26>
            high_frequency = sampling_frequency / 2;
    c364:	ea4f 0358 	mov.w	r3, r8, lsr #1
    c368:	9325      	str	r3, [sp, #148]	; 0x94
        }

        stack_frames_info_t stack_frame_info = { 0 };
        stack_frame_info.signal = signal;

        ret = processing::stack_frames(
    c36a:	ee07 8a90 	vmov	s15, r8
            low_frequency = 300;
    c36e:	f1b9 0f00 	cmp.w	r9, #0
        stack_frames_info_t stack_frame_info = { 0 };
    c372:	f04f 0300 	mov.w	r3, #0
        ret = processing::stack_frames(
    c376:	eef0 0a40 	vmov.f32	s1, s0
    c37a:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
        stack_frame_info.signal = signal;
    c37e:	9208      	str	r2, [sp, #32]
        ret = processing::stack_frames(
    c380:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    c384:	a808      	add	r0, sp, #32
        stack_frames_info_t stack_frame_info = { 0 };
    c386:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
            low_frequency = 300;
    c38a:	bf08      	it	eq
    c38c:	f44f 7996 	moveq.w	r9, #300	; 0x12c
        ret = processing::stack_frames(
    c390:	f7ff ff52 	bl	c238 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
    c394:	4604      	mov	r4, r0
    c396:	2800      	cmp	r0, #0
    c398:	f040 80e4 	bne.w	c564 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x220>
            EIDSP_ERR(ret);
        }

        if (stack_frame_info.frame_ixs->size() != out_features->rows) {
    c39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c39e:	6869      	ldr	r1, [r5, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    c3a0:	e9d2 2300 	ldrd	r2, r3, [r2]
    c3a4:	1a9b      	subs	r3, r3, r2
    c3a6:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
    c3aa:	f040 80ed 	bne.w	c588 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (num_filters != out_features->cols) {
    c3ae:	f8d5 b008 	ldr.w	fp, [r5, #8]
    c3b2:	45da      	cmp	sl, fp
    c3b4:	f040 80e8 	bne.w	c588 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (stack_frame_info.frame_ixs->size() != out_energies->rows || out_energies->cols != 1) {
    c3b8:	687a      	ldr	r2, [r7, #4]
    c3ba:	428a      	cmp	r2, r1
    c3bc:	f040 80e4 	bne.w	c588 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
    c3c0:	68b9      	ldr	r1, [r7, #8]
    c3c2:	2901      	cmp	r1, #1
    c3c4:	f040 80e0 	bne.w	c588 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    c3c8:	fb02 f20a 	mul.w	r2, r2, sl
            *(out_features->buffer + i) = 0;
    c3cc:	2000      	movs	r0, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    c3ce:	42a2      	cmp	r2, r4
    c3d0:	d005      	beq.n	c3de <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x9a>
            *(out_features->buffer + i) = 0;
    c3d2:	6829      	ldr	r1, [r5, #0]
    c3d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    c3d8:	3401      	adds	r4, #1
            *(out_features->buffer + i) = 0;
    c3da:	6008      	str	r0, [r1, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    c3dc:	e7f7      	b.n	c3ce <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x8a>
        }

        uint16_t coefficients = fft_length / 2 + 1;
    c3de:	9b06      	ldr	r3, [sp, #24]
    c3e0:	0858      	lsrs	r0, r3, #1
    c3e2:	1c46      	adds	r6, r0, #1
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
    c3e4:	2101      	movs	r1, #1
    c3e6:	fb00 b00b 	mla	r0, r0, fp, fp
    c3ea:	f00c fb97 	bl	18b1c <_Z9ei_callocjj>
            buffer_managed_by_me = true;
        }
        rows = n_rows;
        cols = n_cols;
        dequantization_fn = a_dequantization_fn;
    c3ee:	4b67      	ldr	r3, [pc, #412]	; (c58c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x248>)
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
    c3f0:	9013      	str	r0, [sp, #76]	; 0x4c
            buffer_managed_by_me = true;
    c3f2:	2201      	movs	r2, #1
        cols = n_cols;
    c3f4:	e9cd b614 	strd	fp, r6, [sp, #80]	; 0x50
            buffer_managed_by_me = true;
    c3f8:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
        dequantization_fn = a_dequantization_fn;
    c3fc:	9317      	str	r3, [sp, #92]	; 0x5c

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
    c3fe:	2800      	cmp	r0, #0
    c400:	f000 80c0 	beq.w	c584 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x240>
#endif
        if (!filterbanks.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        ret = feature::filterbanks(
    c404:	9b25      	ldr	r3, [sp, #148]	; 0x94
    c406:	9202      	str	r2, [sp, #8]
    c408:	e9cd 9300 	strd	r9, r3, [sp]
    c40c:	4632      	mov	r2, r6
    c40e:	4643      	mov	r3, r8
    c410:	4651      	mov	r1, sl
    c412:	a813      	add	r0, sp, #76	; 0x4c
    c414:	f7f5 ff80 	bl	2318 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb>
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
    c418:	4604      	mov	r4, r0
    c41a:	2800      	cmp	r0, #0
    c41c:	f040 809b 	bne.w	c556 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x212>
            EIDSP_ERR(ret);
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
    c420:	4680      	mov	r8, r0
    c422:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c424:	e9d2 2300 	ldrd	r2, r3, [r2]
    c428:	1a9b      	subs	r3, r3, r2
    c42a:	ebb8 0fa3 	cmp.w	r8, r3, asr #2
    c42e:	f080 80a5 	bcs.w	c57c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x238>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    c432:	2300      	movs	r3, #0
    c434:	4632      	mov	r2, r6
    c436:	2101      	movs	r1, #1
    c438:	a80b      	add	r0, sp, #44	; 0x2c
    c43a:	f00c f888 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    c43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c440:	2b00      	cmp	r3, #0
    c442:	f000 8099 	beq.w	c578 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x234>
            if (!power_spectrum_frame.buffer) {
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    c446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c448:	2300      	movs	r3, #0
    c44a:	2101      	movs	r1, #1
    c44c:	a80f      	add	r0, sp, #60	; 0x3c
    c44e:	f00c f87e 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    c452:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    c456:	f1b9 0f00 	cmp.w	r9, #0
    c45a:	d073      	beq.n	c544 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x200>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
    c45c:	9809      	ldr	r0, [sp, #36]	; 0x24
    c45e:	4641      	mov	r1, r8
    c460:	f7ff fc30 	bl	bcc4 <_ZNSt6vectorIjSaIjEE2atEj>
    c464:	6801      	ldr	r1, [r0, #0]
            size_t signal_length = stack_frame_info.frame_length;
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
    c466:	9808      	ldr	r0, [sp, #32]
            size_t signal_length = stack_frame_info.frame_length;
    c468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
    c46a:	f8d0 c010 	ldr.w	ip, [r0, #16]
    c46e:	188b      	adds	r3, r1, r2
    c470:	4563      	cmp	r3, ip
                signal_length = signal_length -
    c472:	bf84      	itt	hi
    c474:	eba2 020c 	subhi.w	r2, r2, ip
    c478:	18d2      	addhi	r2, r2, r3
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
            }

            ret = stack_frame_info.signal->get_data(
    c47a:	464b      	mov	r3, r9
    c47c:	f00c f8b0 	bl	185e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
    c480:	4682      	mov	sl, r0
    c482:	2800      	cmp	r0, #0
    c484:	d160      	bne.n	c548 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x204>
                EIDSP_ERR(ret);
            }

            ret = processing::power_spectrum(
    c486:	9b06      	ldr	r3, [sp, #24]
    c488:	9300      	str	r3, [sp, #0]
    c48a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    c48e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c490:	4633      	mov	r3, r6
    c492:	f7fe ff19 	bl	b2c8 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
    c496:	4682      	mov	sl, r0
    c498:	2800      	cmp	r0, #0
    c49a:	d155      	bne.n	c548 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x204>
                EIDSP_ERR(ret);
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
    c49c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
        float res = 0.0f;
    c4a0:	eddf 7a3b 	vldr	s15, [pc, #236]	; c590 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x24c>
    c4a4:	464b      	mov	r3, r9
            res += input_array[ix];
    c4a6:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
    c4aa:	f10a 0a01 	add.w	sl, sl, #1
    c4ae:	4556      	cmp	r6, sl
            res += input_array[ix];
    c4b0:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
    c4b4:	d8f7      	bhi.n	c4a6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x162>
            if (energy == 0) {
    c4b6:	eef5 7a40 	vcmp.f32	s15, #0.0
                energy = 1e-10;
            }

            out_energies->buffer[ix] = energy;
    c4ba:	683b      	ldr	r3, [r7, #0]
            if (energy == 0) {
    c4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
    c4c0:	bf08      	it	eq
    c4c2:	eddf 7a34 	vldreq	s15, [pc, #208]	; c594 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x250>
            out_energies->buffer[ix] = energy;
    c4c6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    c4ca:	edc3 7a00 	vstr	s15, [r3]
        if (matrix1_cols != matrix2->rows) {
    c4ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c4d0:	429e      	cmp	r6, r3
    c4d2:	d14e      	bne.n	c572 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x22e>
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    c4d4:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    c4d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c4da:	9307      	str	r3, [sp, #28]
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
    c4dc:	fb0c fb08 	mul.w	fp, ip, r8
    c4e0:	2300      	movs	r3, #0
    c4e2:	9305      	str	r3, [sp, #20]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    c4e4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    c4e8:	459c      	cmp	ip, r3
    c4ea:	d922      	bls.n	c532 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1ee>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    c4ec:	9907      	ldr	r1, [sp, #28]
            float tmp = 0.0;
    c4ee:	eddf 7a28 	vldr	s15, [pc, #160]	; c590 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x24c>
    c4f2:	2200      	movs	r2, #0
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    c4f4:	eb01 0a03 	add.w	sl, r1, r3
            for (uint16_t k = 0; k < matrix1_cols; k++) {
    c4f8:	4296      	cmp	r6, r2
    c4fa:	d911      	bls.n	c520 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1dc>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    c4fc:	fb02 f10c 	mul.w	r1, r2, ip
    c500:	f81a 1001 	ldrb.w	r1, [sl, r1]
                if (u8) { // this matrix appears to be very sparsely populated
    c504:	b151      	cbz	r1, c51c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1d8>
                    tmp += row[k] * quantized_values_one_zero[u8];
    c506:	4824      	ldr	r0, [pc, #144]	; (c598 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x254>)
    c508:	eb09 0e82 	add.w	lr, r9, r2, lsl #2
    c50c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c510:	edde 6a00 	vldr	s13, [lr]
    c514:	ed91 7a00 	vldr	s14, [r1]
    c518:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (uint16_t k = 0; k < matrix1_cols; k++) {
    c51c:	3201      	adds	r2, #1
    c51e:	e7eb      	b.n	c4f8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1b4>
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
    c520:	682a      	ldr	r2, [r5, #0]
    c522:	445b      	add	r3, fp
    c524:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c528:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    c52c:	9b05      	ldr	r3, [sp, #20]
    c52e:	3301      	adds	r3, #1
    c530:	e7d7      	b.n	c4e2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x19e>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    c532:	a80f      	add	r0, sp, #60	; 0x3c
    c534:	f00b ff76 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    c538:	a80b      	add	r0, sp, #44	; 0x2c
    c53a:	f00b ff73 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
    c53e:	f108 0801 	add.w	r8, r8, #1
    c542:	e76e      	b.n	c422 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0xde>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    c544:	f8df a054 	ldr.w	sl, [pc, #84]	; c59c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x258>
    c548:	a80f      	add	r0, sp, #60	; 0x3c
    c54a:	f00b ff6b 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    c54e:	4654      	mov	r4, sl
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    c550:	a80b      	add	r0, sp, #44	; 0x2c
    c552:	f00b ff67 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
#endif
        }
    }

    ~ei_quantized_matrix() {
        if (buffer && buffer_managed_by_me) {
    c556:	9813      	ldr	r0, [sp, #76]	; 0x4c
    c558:	b120      	cbz	r0, c564 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x220>
    c55a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    c55e:	b10b      	cbz	r3, c564 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x220>
            ei_free(buffer);
    c560:	f00c fade 	bl	18b20 <_Z7ei_freePv>
        stack_frames_info_t stack_frame_info = { 0 };
    c564:	a808      	add	r0, sp, #32
    c566:	f00c f81b 	bl	185a0 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
        }

        functions::zero_handling(out_features);

        return EIDSP_OK;
    }
    c56a:	4620      	mov	r0, r4
    c56c:	b019      	add	sp, #100	; 0x64
    c56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    c572:	f8df a02c 	ldr.w	sl, [pc, #44]	; c5a0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x25c>
    c576:	e7e7      	b.n	c548 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x204>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    c578:	4c08      	ldr	r4, [pc, #32]	; (c59c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x258>)
    c57a:	e7e9      	b.n	c550 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x20c>
        functions::zero_handling(out_features);
    c57c:	4628      	mov	r0, r5
    c57e:	f7fe fff1 	bl	b564 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
    c582:	e7e8      	b.n	c556 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x212>
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
    c584:	4c05      	ldr	r4, [pc, #20]	; (c59c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x258>)
    c586:	e7e6      	b.n	c556 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x212>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    c588:	4c05      	ldr	r4, [pc, #20]	; (c5a0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x25c>)
    c58a:	e7eb      	b.n	c564 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x220>
    c58c:	0000acbd 	.word	0x0000acbd
    c590:	00000000 	.word	0x00000000
    c594:	2edbe6ff 	.word	0x2edbe6ff
    c598:	0001d71c 	.word	0x0001d71c
    c59c:	fffffc16 	.word	0xfffffc16
    c5a0:	fffffc14 	.word	0xfffffc14

0000c5a4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    c5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5a8:	ed2d 8b02 	vpush	{d8}
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    c5ac:	e9d2 8304 	ldrd	r8, r3, [r2, #16]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    c5b0:	b097      	sub	sp, #92	; 0x5c
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    c5b2:	8817      	ldrh	r7, [r2, #0]
    c5b4:	9307      	str	r3, [sp, #28]
    c5b6:	6993      	ldr	r3, [r2, #24]
    c5b8:	9308      	str	r3, [sp, #32]
    c5ba:	69d3      	ldr	r3, [r2, #28]
    c5bc:	9309      	str	r3, [sp, #36]	; 0x24
    c5be:	6a13      	ldr	r3, [r2, #32]
    c5c0:	930a      	str	r3, [sp, #40]	; 0x28
    if (config.axes != 1) {
    c5c2:	6853      	ldr	r3, [r2, #4]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    c5c4:	ed92 8a02 	vldr	s16, [r2, #8]
    c5c8:	edd2 8a03 	vldr	s17, [r2, #12]
    c5cc:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
    if (config.axes != 1) {
    c5d0:	2b01      	cmp	r3, #1
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    c5d2:	4606      	mov	r6, r0
    c5d4:	460c      	mov	r4, r1
    if (config.axes != 1) {
    c5d6:	f040 80ae 	bne.w	c736 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x192>
    if (signal->total_length == 0) {
    c5da:	6902      	ldr	r2, [r0, #16]
    c5dc:	2a00      	cmp	r2, #0
    c5de:	f000 80ac 	beq.w	c73a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
    c5e2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    c5e6:	2100      	movs	r1, #0
    if (config.implementation_version < 3) {
    c5e8:	2f02      	cmp	r7, #2
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
    c5ea:	ee17 5a90 	vmov	r5, s15
    c5ee:	f8df a158 	ldr.w	sl, [pc, #344]	; c748 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>
    c5f2:	9113      	str	r1, [sp, #76]	; 0x4c
    if (config.implementation_version < 3) {
    c5f4:	d82d      	bhi.n	c652 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        preemphasis = nullptr;
    c5f6:	f8ca 1000 	str.w	r1, [sl]
        preemphasized_audio_signal.get_data = signal->get_data;
    c5fa:	4601      	mov	r1, r0
    c5fc:	a811      	add	r0, sp, #68	; 0x44
        preemphasized_audio_signal.total_length = signal->total_length;
    c5fe:	9215      	str	r2, [sp, #84]	; 0x54
        preemphasized_audio_signal.get_data = signal->get_data;
    c600:	f00c f880 	bl	18704 <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
    c604:	463a      	mov	r2, r7
    c606:	4629      	mov	r1, r5
    c608:	9815      	ldr	r0, [sp, #84]	; 0x54
    c60a:	eef0 0a68 	vmov.f32	s1, s17
    c60e:	eeb0 0a48 	vmov.f32	s0, s16
    c612:	f00b ff11 	bl	18438 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0>
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
    c616:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    c61a:	fa1f fa88 	uxth.w	sl, r8
    c61e:	fb0a f900 	mul.w	r9, sl, r0
    c622:	fb02 f301 	mul.w	r3, r2, r1
    c626:	4599      	cmp	r9, r3
    c628:	4606      	mov	r6, r0
    c62a:	d928      	bls.n	c67e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xda>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
    c62c:	4844      	ldr	r0, [pc, #272]	; (c740 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
    c62e:	f004 fb2f 	bl	10c90 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
    c632:	4844      	ldr	r0, [pc, #272]	; (c744 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>)
    c634:	4652      	mov	r2, sl
    c636:	4631      	mov	r1, r6
    c638:	f004 fb2a 	bl	10c90 <_Z9ei_printfPKcz>
        if (preemphasis) {
    c63c:	4b42      	ldr	r3, [pc, #264]	; (c748 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
    c63e:	681c      	ldr	r4, [r3, #0]
    c640:	b12c      	cbz	r4, c64e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xaa>
            delete preemphasis;
    c642:	4620      	mov	r0, r4
    c644:	f00b ffb9 	bl	185ba <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    c648:	4620      	mov	r0, r4
    c64a:	f00f fa79 	bl	1bb40 <_ZdlPv>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    c64e:	4d3f      	ldr	r5, [pc, #252]	; (c74c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
    c650:	e047      	b.n	c6e2 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13e>
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
    c652:	201c      	movs	r0, #28
    c654:	930b      	str	r3, [sp, #44]	; 0x2c
    c656:	f00f fa77 	bl	1bb48 <_Znwj>
    c65a:	4681      	mov	r9, r0
    c65c:	b130      	cbz	r0, c66c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>
    c65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c660:	ed9f 0a3b 	vldr	s0, [pc, #236]	; c750 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ac>
    c664:	461a      	mov	r2, r3
    c666:	4631      	mov	r1, r6
    c668:	f00b ffc9 	bl	185fe <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
        preemphasized_audio_signal.total_length = signal->total_length;
    c66c:	6933      	ldr	r3, [r6, #16]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    c66e:	4939      	ldr	r1, [pc, #228]	; (c754 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>)
        preemphasis = pre;
    c670:	f8ca 9000 	str.w	r9, [sl]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    c674:	a811      	add	r0, sp, #68	; 0x44
        preemphasized_audio_signal.total_length = signal->total_length;
    c676:	9315      	str	r3, [sp, #84]	; 0x54
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    c678:	f7ff fcc6 	bl	c008 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
    c67c:	e7c2      	b.n	c604 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
    output_matrix->cols = out_matrix_size.cols;
    c67e:	e9c4 0a01 	strd	r0, sl, [r4, #4]
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    c682:	2300      	movs	r3, #0
    c684:	4601      	mov	r1, r0
    c686:	2201      	movs	r2, #1
    c688:	a80d      	add	r0, sp, #52	; 0x34
    c68a:	f00b ff60 	bl	1854e <_ZN2ei9ei_matrixC1EjjPf>
    c68e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c690:	2b00      	cmp	r3, #0
    c692:	d04e      	beq.n	c732 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18e>
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
    c694:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c696:	9303      	str	r3, [sp, #12]
    c698:	9b08      	ldr	r3, [sp, #32]
    c69a:	9302      	str	r3, [sp, #8]
    c69c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c6a0:	9301      	str	r3, [sp, #4]
    c6a2:	fa1f f388 	uxth.w	r3, r8
    c6a6:	9300      	str	r3, [sp, #0]
    c6a8:	9704      	str	r7, [sp, #16]
    c6aa:	462b      	mov	r3, r5
    c6ac:	eef0 0a68 	vmov.f32	s1, s17
    c6b0:	eeb0 0a48 	vmov.f32	s0, s16
    c6b4:	aa11      	add	r2, sp, #68	; 0x44
    c6b6:	a90d      	add	r1, sp, #52	; 0x34
    c6b8:	4620      	mov	r0, r4
    c6ba:	f7ff fe43 	bl	c344 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt>
    if (preemphasis) {
    c6be:	4b22      	ldr	r3, [pc, #136]	; (c748 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
    c6c0:	681e      	ldr	r6, [r3, #0]
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
    c6c2:	4605      	mov	r5, r0
    if (preemphasis) {
    c6c4:	b12e      	cbz	r6, c6d2 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12e>
        delete preemphasis;
    c6c6:	4630      	mov	r0, r6
    c6c8:	f00b ff77 	bl	185ba <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    c6cc:	4630      	mov	r0, r6
    c6ce:	f00f fa37 	bl	1bb40 <_ZdlPv>
    if (ret != EIDSP_OK) {
    c6d2:	b17d      	cbz	r5, c6f4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x150>
        ei_printf("ERR: MFE failed (%d)\n", ret);
    c6d4:	4820      	ldr	r0, [pc, #128]	; (c758 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>)
    c6d6:	4629      	mov	r1, r5
    c6d8:	f004 fada 	bl	10c90 <_Z9ei_printfPKcz>
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    c6dc:	a80d      	add	r0, sp, #52	; 0x34
    c6de:	f00b fea1 	bl	18424 <_ZN2ei9ei_matrixD1Ev>
    class function<_Res(_ArgTypes...)>
    c6e2:	a811      	add	r0, sp, #68	; 0x44
    c6e4:	f00b ff2a 	bl	1853c <_ZNSt14_Function_baseD1Ev>
}
    c6e8:	4628      	mov	r0, r5
    c6ea:	b017      	add	sp, #92	; 0x5c
    c6ec:	ecbd 8b02 	vpop	{d8}
    c6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (config.implementation_version < 3) {
    c6f4:	2f02      	cmp	r7, #2
    c6f6:	d80e      	bhi.n	c716 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x172>
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
    c6f8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    c6fc:	2301      	movs	r3, #1
    c6fe:	462a      	mov	r2, r5
    c700:	4620      	mov	r0, r4
    c702:	f7f5 fcf5 	bl	20f0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
        if (ret != EIDSP_OK) {
    c706:	4606      	mov	r6, r0
    c708:	b170      	cbz	r0, c728 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
    c70a:	4601      	mov	r1, r0
    c70c:	4813      	ldr	r0, [pc, #76]	; (c75c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>)
            ei_printf("ERR: normalization failed (%d)\n", ret);
    c70e:	f004 fabf 	bl	10c90 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
    c712:	4635      	mov	r5, r6
    c714:	e7e2      	b.n	c6dc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
    c716:	4659      	mov	r1, fp
    c718:	4620      	mov	r0, r4
    c71a:	f7f5 fab9 	bl	1c90 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
    c71e:	4606      	mov	r6, r0
    c720:	b110      	cbz	r0, c728 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            ei_printf("ERR: normalization failed (%d)\n", ret);
    c722:	4601      	mov	r1, r0
    c724:	480e      	ldr	r0, [pc, #56]	; (c760 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
    c726:	e7f2      	b.n	c70e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16a>
    output_matrix->rows = 1;
    c728:	2301      	movs	r3, #1
    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
    c72a:	f8c4 9008 	str.w	r9, [r4, #8]
    output_matrix->rows = 1;
    c72e:	6063      	str	r3, [r4, #4]
    return EIDSP_OK;
    c730:	e7d4      	b.n	c6dc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    c732:	4d0c      	ldr	r5, [pc, #48]	; (c764 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
    c734:	e7d2      	b.n	c6dc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    c736:	4d05      	ldr	r5, [pc, #20]	; (c74c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
    c738:	e7d6      	b.n	c6e8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
    c73a:	4d0b      	ldr	r5, [pc, #44]	; (c768 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>)
    c73c:	e7d4      	b.n	c6e8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
    c73e:	bf00      	nop
    c740:	0003d60f 	.word	0x0003d60f
    c744:	0003d623 	.word	0x0003d623
    c748:	20023918 	.word	0x20023918
    c74c:	fffffc14 	.word	0xfffffc14
    c750:	3f7ae148 	.word	0x3f7ae148
    c754:	0000bb61 	.word	0x0000bb61
    c758:	0003d63c 	.word	0x0003d63c
    c75c:	0003d584 	.word	0x0003d584
    c760:	0003d59c 	.word	0x0003d59c
    c764:	fffffc16 	.word	0xfffffc16
    c768:	fffffc10 	.word	0xfffffc10

0000c76c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c76c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    c770:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    c774:	2a08      	cmp	r2, #8
    c776:	d106      	bne.n	c786 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c778:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    c77c:	2b05      	cmp	r3, #5
    c77e:	d802      	bhi.n	c786 <nrf52_errata_103+0x1a>
    c780:	4a02      	ldr	r2, [pc, #8]	; (c78c <nrf52_errata_103+0x20>)
    c782:	5cd0      	ldrb	r0, [r2, r3]
    c784:	4770      	bx	lr
        return false;
    c786:	2000      	movs	r0, #0
}
    c788:	4770      	bx	lr
    c78a:	bf00      	nop
    c78c:	0003d685 	.word	0x0003d685

0000c790 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c790:	4a02      	ldr	r2, [pc, #8]	; (c79c <nvmc_wait+0xc>)
    c792:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    c796:	2b00      	cmp	r3, #0
    c798:	d0fb      	beq.n	c792 <nvmc_wait+0x2>
}
    c79a:	4770      	bx	lr
    c79c:	4001e000 	.word	0x4001e000

0000c7a0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    c7a0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    c7a2:	f00b ffd2 	bl	1874a <nrf52_errata_136>
    c7a6:	b140      	cbz	r0, c7ba <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    c7a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c7ac:	2200      	movs	r2, #0
    c7ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    c7b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    c7b6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    c7ba:	f00b ffc6 	bl	1874a <nrf52_errata_136>
    c7be:	2800      	cmp	r0, #0
    c7c0:	d046      	beq.n	c850 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    c7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    c7c6:	4b65      	ldr	r3, [pc, #404]	; (c95c <SystemInit+0x1bc>)
    c7c8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    c7cc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    c7d0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    c7d4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    c7d8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    c7dc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    c7e0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    c7e4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    c7e8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    c7ec:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    c7f0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    c7f4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    c7f8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    c7fc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    c800:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    c804:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    c808:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    c80c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    c810:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    c814:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    c818:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    c81c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    c820:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    c824:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    c828:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    c82c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    c830:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    c834:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    c838:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    c83c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    c840:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    c844:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    c848:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    c84c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    c850:	f7ff ff8c 	bl	c76c <nrf52_errata_103>
    c854:	b118      	cbz	r0, c85e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    c856:	4b42      	ldr	r3, [pc, #264]	; (c960 <SystemInit+0x1c0>)
    c858:	4a42      	ldr	r2, [pc, #264]	; (c964 <SystemInit+0x1c4>)
    c85a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    c85e:	f7ff ff85 	bl	c76c <nrf52_errata_103>
    c862:	b118      	cbz	r0, c86c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    c864:	4b40      	ldr	r3, [pc, #256]	; (c968 <SystemInit+0x1c8>)
    c866:	22fb      	movs	r2, #251	; 0xfb
    c868:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    c86c:	f7ff ff7e 	bl	c76c <nrf52_errata_103>
    c870:	b170      	cbz	r0, c890 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    c872:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c87a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    c87e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    c882:	f022 020f 	bic.w	r2, r2, #15
    c886:	f003 030f 	and.w	r3, r3, #15
    c88a:	4313      	orrs	r3, r2
    c88c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    c890:	f7ff ff6c 	bl	c76c <nrf52_errata_103>
    c894:	b120      	cbz	r0, c8a0 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    c896:	4b35      	ldr	r3, [pc, #212]	; (c96c <SystemInit+0x1cc>)
    c898:	f44f 7200 	mov.w	r2, #512	; 0x200
    c89c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    c8a0:	f00b ff53 	bl	1874a <nrf52_errata_136>
    c8a4:	b148      	cbz	r0, c8ba <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    c8a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c8aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    c8ae:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    c8b0:	bf44      	itt	mi
    c8b2:	f06f 0201 	mvnmi.w	r2, #1
    c8b6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    c8ba:	4a2d      	ldr	r2, [pc, #180]	; (c970 <SystemInit+0x1d0>)
    c8bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    c8c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    c8c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    c8c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c8cc:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c8d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    c8d4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    c8d8:	2a08      	cmp	r2, #8
    c8da:	d10e      	bne.n	c8fa <SystemInit+0x15a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c8dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    c8e0:	2b05      	cmp	r3, #5
    c8e2:	d802      	bhi.n	c8ea <SystemInit+0x14a>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    c8e4:	4a23      	ldr	r2, [pc, #140]	; (c974 <SystemInit+0x1d4>)
    c8e6:	5cd3      	ldrb	r3, [r2, r3]
    c8e8:	b13b      	cbz	r3, c8fa <SystemInit+0x15a>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    c8ea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c8ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    c8f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c8f6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    c8fa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c8fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    c902:	2a00      	cmp	r2, #0
    c904:	db03      	blt.n	c90e <SystemInit+0x16e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    c906:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    c90a:	2b00      	cmp	r3, #0
    c90c:	da22      	bge.n	c954 <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    c90e:	491a      	ldr	r1, [pc, #104]	; (c978 <SystemInit+0x1d8>)
    c910:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    c912:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    c916:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    c91a:	2412      	movs	r4, #18
    nvmc_wait();
    c91c:	f7ff ff38 	bl	c790 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    c920:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    c924:	f7ff ff34 	bl	c790 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    c928:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    c92c:	f7ff ff30 	bl	c790 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    c930:	2300      	movs	r3, #0
    c932:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    c936:	f7ff ff2b 	bl	c790 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    c93a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c93e:	490c      	ldr	r1, [pc, #48]	; (c970 <SystemInit+0x1d0>)
    c940:	4b0e      	ldr	r3, [pc, #56]	; (c97c <SystemInit+0x1dc>)
    c942:	68ca      	ldr	r2, [r1, #12]
    c944:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c948:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c94a:	60cb      	str	r3, [r1, #12]
    c94c:	f3bf 8f4f 	dsb	sy
    __NOP();
    c950:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c952:	e7fd      	b.n	c950 <SystemInit+0x1b0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    c954:	4b0a      	ldr	r3, [pc, #40]	; (c980 <SystemInit+0x1e0>)
    c956:	4a0b      	ldr	r2, [pc, #44]	; (c984 <SystemInit+0x1e4>)
    c958:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    c95a:	bd10      	pop	{r4, pc}
    c95c:	4000c000 	.word	0x4000c000
    c960:	40005000 	.word	0x40005000
    c964:	00038148 	.word	0x00038148
    c968:	4000f000 	.word	0x4000f000
    c96c:	40029000 	.word	0x40029000
    c970:	e000ed00 	.word	0xe000ed00
    c974:	0003d67f 	.word	0x0003d67f
    c978:	4001e000 	.word	0x4001e000
    c97c:	05fa0004 	.word	0x05fa0004
    c980:	200000a4 	.word	0x200000a4
    c984:	03d09000 	.word	0x03d09000

0000c988 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    c988:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    c98a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    c98c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    c98e:	fab2 f382 	clz	r3, r2
    c992:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    c996:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    c998:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    c99a:	d014      	beq.n	c9c6 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c99c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    c9a0:	fa05 f303 	lsl.w	r3, r5, r3
    c9a4:	ea22 0303 	bic.w	r3, r2, r3
    c9a8:	e850 6f00 	ldrex	r6, [r0]
    c9ac:	4296      	cmp	r6, r2
    c9ae:	d104      	bne.n	c9ba <nrfx_flag32_alloc+0x32>
    c9b0:	e840 3c00 	strex	ip, r3, [r0]
    c9b4:	f1bc 0f00 	cmp.w	ip, #0
    c9b8:	d1f6      	bne.n	c9a8 <nrfx_flag32_alloc+0x20>
    c9ba:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    c9be:	d1e5      	bne.n	c98c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    c9c0:	4802      	ldr	r0, [pc, #8]	; (c9cc <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    c9c2:	700c      	strb	r4, [r1, #0]
}
    c9c4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    c9c6:	4802      	ldr	r0, [pc, #8]	; (c9d0 <nrfx_flag32_alloc+0x48>)
    c9c8:	e7fc      	b.n	c9c4 <nrfx_flag32_alloc+0x3c>
    c9ca:	bf00      	nop
    c9cc:	0bad0000 	.word	0x0bad0000
    c9d0:	0bad0002 	.word	0x0bad0002

0000c9d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    c9d4:	6803      	ldr	r3, [r0, #0]
    c9d6:	40cb      	lsrs	r3, r1
    c9d8:	07db      	lsls	r3, r3, #31
{
    c9da:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    c9dc:	d415      	bmi.n	ca0a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    c9de:	2301      	movs	r3, #1
    c9e0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    c9e4:	6803      	ldr	r3, [r0, #0]
    c9e6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    c9ea:	ea41 0203 	orr.w	r2, r1, r3
    c9ee:	e850 4f00 	ldrex	r4, [r0]
    c9f2:	429c      	cmp	r4, r3
    c9f4:	d104      	bne.n	ca00 <nrfx_flag32_free+0x2c>
    c9f6:	e840 2c00 	strex	ip, r2, [r0]
    c9fa:	f1bc 0f00 	cmp.w	ip, #0
    c9fe:	d1f6      	bne.n	c9ee <nrfx_flag32_free+0x1a>
    ca00:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ca04:	d1ee      	bne.n	c9e4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    ca06:	4802      	ldr	r0, [pc, #8]	; (ca10 <nrfx_flag32_free+0x3c>)
}
    ca08:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    ca0a:	4802      	ldr	r0, [pc, #8]	; (ca14 <nrfx_flag32_free+0x40>)
    ca0c:	e7fc      	b.n	ca08 <nrfx_flag32_free+0x34>
    ca0e:	bf00      	nop
    ca10:	0bad0000 	.word	0x0bad0000
    ca14:	0bad0004 	.word	0x0bad0004

0000ca18 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    ca18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    ca1a:	4604      	mov	r4, r0
    ca1c:	b170      	cbz	r0, ca3c <clock_stop+0x24>
    ca1e:	2801      	cmp	r0, #1
    ca20:	d031      	beq.n	ca86 <clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    ca22:	4931      	ldr	r1, [pc, #196]	; (cae8 <clock_stop+0xd0>)
    ca24:	4831      	ldr	r0, [pc, #196]	; (caec <clock_stop+0xd4>)
    ca26:	4a32      	ldr	r2, [pc, #200]	; (caf0 <clock_stop+0xd8>)
    ca28:	23d8      	movs	r3, #216	; 0xd8
    ca2a:	f00b f910 	bl	17c4e <assert_print>
    ca2e:	4830      	ldr	r0, [pc, #192]	; (caf0 <clock_stop+0xd8>)
    ca30:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    ca32:	b003      	add	sp, #12
    ca34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    ca38:	f00b b902 	b.w	17c40 <assert_post_action>
    p_reg->INTENCLR = mask;
    ca3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ca40:	2202      	movs	r2, #2
    ca42:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca46:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    ca4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ca4e:	2201      	movs	r2, #1
    ca50:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    ca52:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    ca54:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    ca56:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    ca5a:	bf14      	ite	ne
    ca5c:	2500      	movne	r5, #0
    ca5e:	f10d 0507 	addeq.w	r5, sp, #7
    ca62:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ca66:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    ca6a:	b1bc      	cbz	r4, ca9c <clock_stop+0x84>
    ca6c:	2c01      	cmp	r4, #1
    ca6e:	d02c      	beq.n	caca <clock_stop+0xb2>
            NRFX_ASSERT(0);
    ca70:	491d      	ldr	r1, [pc, #116]	; (cae8 <clock_stop+0xd0>)
    ca72:	481e      	ldr	r0, [pc, #120]	; (caec <clock_stop+0xd4>)
    ca74:	4a1f      	ldr	r2, [pc, #124]	; (caf4 <clock_stop+0xdc>)
    ca76:	f44f 734f 	mov.w	r3, #828	; 0x33c
    ca7a:	f00b f8e8 	bl	17c4e <assert_print>
    ca7e:	481d      	ldr	r0, [pc, #116]	; (caf4 <clock_stop+0xdc>)
    ca80:	f44f 714f 	mov.w	r1, #828	; 0x33c
    ca84:	e7d5      	b.n	ca32 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    ca86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca8a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    ca8c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ca94:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ca98:	6058      	str	r0, [r3, #4]
}
    ca9a:	e7da      	b.n	ca52 <clock_stop+0x3a>
            if (p_clk_src != NULL)
    ca9c:	b125      	cbz	r5, caa8 <clock_stop+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ca9e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    caa2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    caa6:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    caa8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    caac:	03da      	lsls	r2, r3, #15
    caae:	d519      	bpl.n	cae4 <clock_stop+0xcc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    cab0:	b11d      	cbz	r5, caba <clock_stop+0xa2>
    cab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cab6:	2b01      	cmp	r3, #1
    cab8:	d104      	bne.n	cac4 <clock_stop+0xac>
    caba:	2001      	movs	r0, #1
    cabc:	f00b fe4f 	bl	1875e <nrfx_busy_wait>
    cac0:	3f01      	subs	r7, #1
    cac2:	d1d2      	bne.n	ca6a <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    cac4:	2c01      	cmp	r4, #1
    cac6:	d00a      	beq.n	cade <clock_stop+0xc6>
    cac8:	e00c      	b.n	cae4 <clock_stop+0xcc>
            if (p_clk_src != NULL)
    caca:	b125      	cbz	r5, cad6 <clock_stop+0xbe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    cacc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    cad0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    cad4:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    cad6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    cada:	03db      	lsls	r3, r3, #15
    cadc:	d4e8      	bmi.n	cab0 <clock_stop+0x98>
            m_clock_cb.hfclk_started = false;
    cade:	4b06      	ldr	r3, [pc, #24]	; (caf8 <clock_stop+0xe0>)
    cae0:	2200      	movs	r2, #0
    cae2:	715a      	strb	r2, [r3, #5]
}
    cae4:	b003      	add	sp, #12
    cae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cae8:	0003d09f 	.word	0x0003d09f
    caec:	0003baf1 	.word	0x0003baf1
    caf0:	0003d68b 	.word	0x0003d68b
    caf4:	0003d6c8 	.word	0x0003d6c8
    caf8:	2002391c 	.word	0x2002391c

0000cafc <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    cafc:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    cafe:	4604      	mov	r4, r0
    cb00:	b958      	cbnz	r0, cb1a <nrfx_clock_init+0x1e>
    cb02:	490b      	ldr	r1, [pc, #44]	; (cb30 <nrfx_clock_init+0x34>)
    cb04:	480b      	ldr	r0, [pc, #44]	; (cb34 <nrfx_clock_init+0x38>)
    cb06:	4a0c      	ldr	r2, [pc, #48]	; (cb38 <nrfx_clock_init+0x3c>)
    cb08:	f240 1315 	movw	r3, #277	; 0x115
    cb0c:	f00b f89f 	bl	17c4e <assert_print>
    cb10:	4809      	ldr	r0, [pc, #36]	; (cb38 <nrfx_clock_init+0x3c>)
    cb12:	f240 1115 	movw	r1, #277	; 0x115
    cb16:	f00b f893 	bl	17c40 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    cb1a:	4b08      	ldr	r3, [pc, #32]	; (cb3c <nrfx_clock_init+0x40>)
    cb1c:	791a      	ldrb	r2, [r3, #4]
    cb1e:	b922      	cbnz	r2, cb2a <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    cb20:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    cb22:	4807      	ldr	r0, [pc, #28]	; (cb40 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    cb24:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    cb26:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    cb28:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    cb2a:	4806      	ldr	r0, [pc, #24]	; (cb44 <nrfx_clock_init+0x48>)
    return err_code;
    cb2c:	e7fc      	b.n	cb28 <nrfx_clock_init+0x2c>
    cb2e:	bf00      	nop
    cb30:	0003d6fc 	.word	0x0003d6fc
    cb34:	0003baf1 	.word	0x0003baf1
    cb38:	0003d68b 	.word	0x0003d68b
    cb3c:	2002391c 	.word	0x2002391c
    cb40:	0bad0000 	.word	0x0bad0000
    cb44:	0bad000c 	.word	0x0bad000c

0000cb48 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    cb48:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    cb4a:	4b0d      	ldr	r3, [pc, #52]	; (cb80 <nrfx_clock_enable+0x38>)
    cb4c:	791b      	ldrb	r3, [r3, #4]
    cb4e:	b95b      	cbnz	r3, cb68 <nrfx_clock_enable+0x20>
    cb50:	490c      	ldr	r1, [pc, #48]	; (cb84 <nrfx_clock_enable+0x3c>)
    cb52:	480d      	ldr	r0, [pc, #52]	; (cb88 <nrfx_clock_enable+0x40>)
    cb54:	4a0d      	ldr	r2, [pc, #52]	; (cb8c <nrfx_clock_enable+0x44>)
    cb56:	f44f 7397 	mov.w	r3, #302	; 0x12e
    cb5a:	f00b f878 	bl	17c4e <assert_print>
    cb5e:	480b      	ldr	r0, [pc, #44]	; (cb8c <nrfx_clock_enable+0x44>)
    cb60:	f44f 7197 	mov.w	r1, #302	; 0x12e
    cb64:	f00b f86c 	bl	17c40 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    cb68:	2000      	movs	r0, #0
    cb6a:	f7fb fbad 	bl	82c8 <arch_irq_is_enabled>
    cb6e:	b908      	cbnz	r0, cb74 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    cb70:	f7fb fb86 	bl	8280 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    cb74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cb78:	2200      	movs	r2, #0
    cb7a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    cb7e:	bd08      	pop	{r3, pc}
    cb80:	2002391c 	.word	0x2002391c
    cb84:	0003d70a 	.word	0x0003d70a
    cb88:	0003baf1 	.word	0x0003baf1
    cb8c:	0003d68b 	.word	0x0003d68b

0000cb90 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    cb90:	4b2c      	ldr	r3, [pc, #176]	; (cc44 <nrfx_clock_start+0xb4>)
    cb92:	791b      	ldrb	r3, [r3, #4]
{
    cb94:	b510      	push	{r4, lr}
    cb96:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    cb98:	b95b      	cbnz	r3, cbb2 <nrfx_clock_start+0x22>
    cb9a:	492b      	ldr	r1, [pc, #172]	; (cc48 <nrfx_clock_start+0xb8>)
    cb9c:	482b      	ldr	r0, [pc, #172]	; (cc4c <nrfx_clock_start+0xbc>)
    cb9e:	4a2c      	ldr	r2, [pc, #176]	; (cc50 <nrfx_clock_start+0xc0>)
    cba0:	f44f 73b4 	mov.w	r3, #360	; 0x168
    cba4:	f00b f853 	bl	17c4e <assert_print>
    cba8:	4829      	ldr	r0, [pc, #164]	; (cc50 <nrfx_clock_start+0xc0>)
    cbaa:	f44f 71b4 	mov.w	r1, #360	; 0x168
    cbae:	f00b f847 	bl	17c40 <assert_post_action>
    switch (domain)
    cbb2:	b17c      	cbz	r4, cbd4 <nrfx_clock_start+0x44>
    cbb4:	2c01      	cmp	r4, #1
    cbb6:	d03a      	beq.n	cc2e <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    cbb8:	4926      	ldr	r1, [pc, #152]	; (cc54 <nrfx_clock_start+0xc4>)
    cbba:	4824      	ldr	r0, [pc, #144]	; (cc4c <nrfx_clock_start+0xbc>)
    cbbc:	4a24      	ldr	r2, [pc, #144]	; (cc50 <nrfx_clock_start+0xc0>)
    cbbe:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    cbc2:	f00b f844 	bl	17c4e <assert_print>
            break;
    }
}
    cbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    cbca:	4821      	ldr	r0, [pc, #132]	; (cc50 <nrfx_clock_start+0xc0>)
    cbcc:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    cbd0:	f00b b836 	b.w	17c40 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cbd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    cbd8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cbdc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    cbe0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    cbe4:	d10b      	bne.n	cbfe <nrfx_clock_start+0x6e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    cbe6:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    cbea:	07c9      	lsls	r1, r1, #31
    cbec:	d510      	bpl.n	cc10 <nrfx_clock_start+0x80>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    cbee:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    cbf2:	079b      	lsls	r3, r3, #30
    cbf4:	d408      	bmi.n	cc08 <nrfx_clock_start+0x78>
    p_reg->INTENSET = mask;
    cbf6:	2302      	movs	r3, #2
    cbf8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    cbfc:	e016      	b.n	cc2c <nrfx_clock_start+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    cbfe:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cc02:	2b01      	cmp	r3, #1
    cc04:	d004      	beq.n	cc10 <nrfx_clock_start+0x80>
    if (!is_correct_clk)
    cc06:	b11b      	cbz	r3, cc10 <nrfx_clock_start+0x80>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    cc08:	2000      	movs	r0, #0
    cc0a:	f7ff ff05 	bl	ca18 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    cc0e:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    cc10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    cc14:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cc18:	2300      	movs	r3, #0
    cc1a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    cc1e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    cc22:	2302      	movs	r3, #2
    cc24:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cc28:	2301      	movs	r3, #1
    cc2a:	6093      	str	r3, [r2, #8]
}
    cc2c:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cc2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cc32:	2200      	movs	r2, #0
    cc34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cc38:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    cc3c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cc40:	601c      	str	r4, [r3, #0]
}
    cc42:	e7f3      	b.n	cc2c <nrfx_clock_start+0x9c>
    cc44:	2002391c 	.word	0x2002391c
    cc48:	0003d70a 	.word	0x0003d70a
    cc4c:	0003baf1 	.word	0x0003baf1
    cc50:	0003d68b 	.word	0x0003d68b
    cc54:	0003d09f 	.word	0x0003d09f

0000cc58 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    cc58:	4b0a      	ldr	r3, [pc, #40]	; (cc84 <nrfx_clock_stop+0x2c>)
    cc5a:	791b      	ldrb	r3, [r3, #4]
{
    cc5c:	b510      	push	{r4, lr}
    cc5e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    cc60:	b95b      	cbnz	r3, cc7a <nrfx_clock_stop+0x22>
    cc62:	4909      	ldr	r1, [pc, #36]	; (cc88 <nrfx_clock_stop+0x30>)
    cc64:	4809      	ldr	r0, [pc, #36]	; (cc8c <nrfx_clock_stop+0x34>)
    cc66:	4a0a      	ldr	r2, [pc, #40]	; (cc90 <nrfx_clock_stop+0x38>)
    cc68:	f240 13ad 	movw	r3, #429	; 0x1ad
    cc6c:	f00a ffef 	bl	17c4e <assert_print>
    cc70:	4807      	ldr	r0, [pc, #28]	; (cc90 <nrfx_clock_stop+0x38>)
    cc72:	f240 11ad 	movw	r1, #429	; 0x1ad
    cc76:	f00a ffe3 	bl	17c40 <assert_post_action>
    clock_stop(domain);
    cc7a:	4620      	mov	r0, r4
}
    cc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    cc80:	f7ff beca 	b.w	ca18 <clock_stop>
    cc84:	2002391c 	.word	0x2002391c
    cc88:	0003d70a 	.word	0x0003d70a
    cc8c:	0003baf1 	.word	0x0003baf1
    cc90:	0003d68b 	.word	0x0003d68b

0000cc94 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cc94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    cc98:	b510      	push	{r4, lr}
    cc9a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    cc9e:	b16a      	cbz	r2, ccbc <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cca0:	2200      	movs	r2, #0
    cca2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cca6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    ccaa:	2201      	movs	r2, #1
    ccac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    ccb0:	4b11      	ldr	r3, [pc, #68]	; (ccf8 <nrfx_power_clock_irq_handler+0x64>)
    ccb2:	7958      	ldrb	r0, [r3, #5]
    ccb4:	b910      	cbnz	r0, ccbc <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    ccb6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    ccb8:	681b      	ldr	r3, [r3, #0]
    ccba:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ccbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ccc0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    ccc4:	b172      	cbz	r2, cce4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ccc6:	2200      	movs	r2, #0
    ccc8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    cccc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ccd0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ccd4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    ccd8:	0792      	lsls	r2, r2, #30
    ccda:	d104      	bne.n	cce6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ccdc:	2201      	movs	r2, #1
    ccde:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cce2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    cce4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    cce6:	2202      	movs	r2, #2
    cce8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    ccec:	4b02      	ldr	r3, [pc, #8]	; (ccf8 <nrfx_power_clock_irq_handler+0x64>)
}
    ccee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    ccf2:	681b      	ldr	r3, [r3, #0]
    ccf4:	2001      	movs	r0, #1
    ccf6:	4718      	bx	r3
    ccf8:	2002391c 	.word	0x2002391c

0000ccfc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    ccfc:	4b03      	ldr	r3, [pc, #12]	; (cd0c <pin_in_use_by_te+0x10>)
    ccfe:	3008      	adds	r0, #8
    cd00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cd04:	f3c0 1040 	ubfx	r0, r0, #5, #1
    cd08:	4770      	bx	lr
    cd0a:	bf00      	nop
    cd0c:	200000a8 	.word	0x200000a8

0000cd10 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    cd10:	4b04      	ldr	r3, [pc, #16]	; (cd24 <pin_has_trigger+0x14>)
    cd12:	3008      	adds	r0, #8
    cd14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cd18:	f010 001c 	ands.w	r0, r0, #28
    cd1c:	bf18      	it	ne
    cd1e:	2001      	movne	r0, #1
    cd20:	4770      	bx	lr
    cd22:	bf00      	nop
    cd24:	200000a8 	.word	0x200000a8

0000cd28 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    cd28:	4b03      	ldr	r3, [pc, #12]	; (cd38 <pin_is_output+0x10>)
    cd2a:	3008      	adds	r0, #8
    cd2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cd30:	f3c0 0040 	ubfx	r0, r0, #1, #1
    cd34:	4770      	bx	lr
    cd36:	bf00      	nop
    cd38:	200000a8 	.word	0x200000a8

0000cd3c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    cd3c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cd3e:	f100 0308 	add.w	r3, r0, #8
    cd42:	4c0c      	ldr	r4, [pc, #48]	; (cd74 <call_handler+0x38>)
    cd44:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    cd48:	05da      	lsls	r2, r3, #23
{
    cd4a:	4605      	mov	r5, r0
    cd4c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cd4e:	d507      	bpl.n	cd60 <call_handler+0x24>
    cd50:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    cd54:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    cd58:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    cd5c:	6852      	ldr	r2, [r2, #4]
    cd5e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    cd60:	68a3      	ldr	r3, [r4, #8]
    cd62:	b12b      	cbz	r3, cd70 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    cd64:	68e2      	ldr	r2, [r4, #12]
    cd66:	4631      	mov	r1, r6
    cd68:	4628      	mov	r0, r5
    }
}
    cd6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    cd6e:	4718      	bx	r3
}
    cd70:	bd70      	pop	{r4, r5, r6, pc}
    cd72:	bf00      	nop
    cd74:	200000a8 	.word	0x200000a8

0000cd78 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cd78:	4a19      	ldr	r2, [pc, #100]	; (cde0 <release_handler+0x68>)
    cd7a:	3008      	adds	r0, #8
{
    cd7c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    cd7e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    cd82:	05d9      	lsls	r1, r3, #23
    cd84:	d51d      	bpl.n	cdc2 <release_handler+0x4a>
    cd86:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    cd8a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    cd8e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    cd92:	f102 0410 	add.w	r4, r2, #16
    cd96:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    cd98:	f834 3b02 	ldrh.w	r3, [r4], #2
    cd9c:	f413 7f80 	tst.w	r3, #256	; 0x100
    cda0:	d003      	beq.n	cdaa <release_handler+0x32>
    cda2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    cda6:	4299      	cmp	r1, r3
    cda8:	d00b      	beq.n	cdc2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    cdaa:	3001      	adds	r0, #1
    cdac:	2830      	cmp	r0, #48	; 0x30
    cdae:	d1f3      	bne.n	cd98 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    cdb0:	2300      	movs	r3, #0
    cdb2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    cdb6:	480b      	ldr	r0, [pc, #44]	; (cde4 <release_handler+0x6c>)
    cdb8:	f7ff fe0c 	bl	c9d4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    cdbc:	4b0a      	ldr	r3, [pc, #40]	; (cde8 <release_handler+0x70>)
    cdbe:	4298      	cmp	r0, r3
    cdc0:	d100      	bne.n	cdc4 <release_handler+0x4c>
}
    cdc2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    cdc4:	4909      	ldr	r1, [pc, #36]	; (cdec <release_handler+0x74>)
    cdc6:	480a      	ldr	r0, [pc, #40]	; (cdf0 <release_handler+0x78>)
    cdc8:	4a0a      	ldr	r2, [pc, #40]	; (cdf4 <release_handler+0x7c>)
    cdca:	f44f 7399 	mov.w	r3, #306	; 0x132
    cdce:	f00a ff3e 	bl	17c4e <assert_print>
}
    cdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    cdd6:	4807      	ldr	r0, [pc, #28]	; (cdf4 <release_handler+0x7c>)
    cdd8:	f44f 7199 	mov.w	r1, #306	; 0x132
    cddc:	f00a bf30 	b.w	17c40 <assert_post_action>
    cde0:	200000a8 	.word	0x200000a8
    cde4:	2000011c 	.word	0x2000011c
    cde8:	0bad0000 	.word	0x0bad0000
    cdec:	0003d78c 	.word	0x0003d78c
    cdf0:	0003baf1 	.word	0x0003baf1
    cdf4:	0003d728 	.word	0x0003d728

0000cdf8 <pin_handler_trigger_uninit>:
{
    cdf8:	b538      	push	{r3, r4, r5, lr}
    cdfa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    cdfc:	f7ff ff7e 	bl	ccfc <pin_in_use_by_te>
    ce00:	4c09      	ldr	r4, [pc, #36]	; (ce28 <pin_handler_trigger_uninit+0x30>)
    ce02:	f102 0508 	add.w	r5, r2, #8
    ce06:	b140      	cbz	r0, ce1a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ce08:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    ce0c:	4907      	ldr	r1, [pc, #28]	; (ce2c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    ce0e:	0b5b      	lsrs	r3, r3, #13
    ce10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    ce14:	2000      	movs	r0, #0
    ce16:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    ce1a:	4610      	mov	r0, r2
    ce1c:	f7ff ffac 	bl	cd78 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    ce20:	2300      	movs	r3, #0
    ce22:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    ce26:	bd38      	pop	{r3, r4, r5, pc}
    ce28:	200000a8 	.word	0x200000a8
    ce2c:	40006000 	.word	0x40006000

0000ce30 <nrf_gpio_pin_port_decode>:
{
    ce30:	b510      	push	{r4, lr}
    ce32:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ce34:	6800      	ldr	r0, [r0, #0]
    ce36:	f00b fc94 	bl	18762 <nrf_gpio_pin_present_check>
    ce3a:	b958      	cbnz	r0, ce54 <nrf_gpio_pin_port_decode+0x24>
    ce3c:	4912      	ldr	r1, [pc, #72]	; (ce88 <nrf_gpio_pin_port_decode+0x58>)
    ce3e:	4813      	ldr	r0, [pc, #76]	; (ce8c <nrf_gpio_pin_port_decode+0x5c>)
    ce40:	4a13      	ldr	r2, [pc, #76]	; (ce90 <nrf_gpio_pin_port_decode+0x60>)
    ce42:	f240 2329 	movw	r3, #553	; 0x229
    ce46:	f00a ff02 	bl	17c4e <assert_print>
    ce4a:	4811      	ldr	r0, [pc, #68]	; (ce90 <nrf_gpio_pin_port_decode+0x60>)
    ce4c:	f240 2129 	movw	r1, #553	; 0x229
    ce50:	f00a fef6 	bl	17c40 <assert_post_action>
    uint32_t pin_number = *p_pin;
    ce54:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    ce56:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ce5a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    ce5c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ce5e:	d00d      	beq.n	ce7c <nrf_gpio_pin_port_decode+0x4c>
    ce60:	2b01      	cmp	r3, #1
    ce62:	d00e      	beq.n	ce82 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    ce64:	490b      	ldr	r1, [pc, #44]	; (ce94 <nrf_gpio_pin_port_decode+0x64>)
    ce66:	4809      	ldr	r0, [pc, #36]	; (ce8c <nrf_gpio_pin_port_decode+0x5c>)
    ce68:	4a09      	ldr	r2, [pc, #36]	; (ce90 <nrf_gpio_pin_port_decode+0x60>)
    ce6a:	f240 232e 	movw	r3, #558	; 0x22e
    ce6e:	f00a feee 	bl	17c4e <assert_print>
    ce72:	4807      	ldr	r0, [pc, #28]	; (ce90 <nrf_gpio_pin_port_decode+0x60>)
    ce74:	f240 212e 	movw	r1, #558	; 0x22e
    ce78:	f00a fee2 	bl	17c40 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ce7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    ce80:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    ce82:	4805      	ldr	r0, [pc, #20]	; (ce98 <nrf_gpio_pin_port_decode+0x68>)
    ce84:	e7fc      	b.n	ce80 <nrf_gpio_pin_port_decode+0x50>
    ce86:	bf00      	nop
    ce88:	0003ccc9 	.word	0x0003ccc9
    ce8c:	0003baf1 	.word	0x0003baf1
    ce90:	0003cc96 	.word	0x0003cc96
    ce94:	0003d09f 	.word	0x0003d09f
    ce98:	50000300 	.word	0x50000300

0000ce9c <nrfx_gpiote_input_configure>:
{
    ce9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce9e:	4604      	mov	r4, r0
    cea0:	b085      	sub	sp, #20
    cea2:	4617      	mov	r7, r2
    cea4:	461d      	mov	r5, r3
    if (p_input_config)
    cea6:	b1f1      	cbz	r1, cee6 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    cea8:	f00b fc6c 	bl	18784 <pin_is_task_output>
    ceac:	b110      	cbz	r0, ceb4 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    ceae:	484d      	ldr	r0, [pc, #308]	; (cfe4 <nrfx_gpiote_input_configure+0x148>)
}
    ceb0:	b005      	add	sp, #20
    ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    ceb4:	460b      	mov	r3, r1
    ceb6:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    ceba:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    cebe:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    cec2:	f10d 020f 	add.w	r2, sp, #15
    cec6:	f10d 010e 	add.w	r1, sp, #14
    ceca:	4620      	mov	r0, r4
    cecc:	f00b fc69 	bl	187a2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    ced0:	4a45      	ldr	r2, [pc, #276]	; (cfe8 <nrfx_gpiote_input_configure+0x14c>)
    ced2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    ced6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    ceda:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    cede:	f043 0301 	orr.w	r3, r3, #1
    cee2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    cee6:	b197      	cbz	r7, cf0e <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    cee8:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    ceea:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    ceec:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    ceee:	f7ff ff1b 	bl	cd28 <pin_is_output>
    cef2:	b180      	cbz	r0, cf16 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    cef4:	2a00      	cmp	r2, #0
    cef6:	d1da      	bne.n	ceae <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    cef8:	4a3b      	ldr	r2, [pc, #236]	; (cfe8 <nrfx_gpiote_input_configure+0x14c>)
    cefa:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    cefe:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    cf02:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    cf06:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    cf0a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    cf0e:	2d00      	cmp	r5, #0
    cf10:	d13d      	bne.n	cf8e <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    cf12:	4836      	ldr	r0, [pc, #216]	; (cfec <nrfx_gpiote_input_configure+0x150>)
    cf14:	e7cc      	b.n	ceb0 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    cf16:	4f34      	ldr	r7, [pc, #208]	; (cfe8 <nrfx_gpiote_input_configure+0x14c>)
    cf18:	f104 0c08 	add.w	ip, r4, #8
    cf1c:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    cf20:	f021 0120 	bic.w	r1, r1, #32
    cf24:	04c9      	lsls	r1, r1, #19
    cf26:	0cc9      	lsrs	r1, r1, #19
    cf28:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    cf2c:	2a00      	cmp	r2, #0
    cf2e:	d0e3      	beq.n	cef8 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    cf30:	2e03      	cmp	r6, #3
    cf32:	d8bc      	bhi.n	ceae <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    cf34:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    cf36:	b92e      	cbnz	r6, cf44 <nrfx_gpiote_input_configure+0xa8>
    cf38:	4a2d      	ldr	r2, [pc, #180]	; (cff0 <nrfx_gpiote_input_configure+0x154>)
    cf3a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    cf3e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    cf42:	e7d9      	b.n	cef8 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    cf44:	009a      	lsls	r2, r3, #2
    cf46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    cf4a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    cf4e:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    cf52:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    cf56:	f020 0003 	bic.w	r0, r0, #3
    cf5a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    cf5e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    cf62:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    cf66:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    cf6a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cf6e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    cf72:	0220      	lsls	r0, r4, #8
    cf74:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    cf78:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    cf7c:	ea40 000e 	orr.w	r0, r0, lr
    cf80:	f041 0120 	orr.w	r1, r1, #32
    cf84:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    cf88:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    cf8c:	e7b4      	b.n	cef8 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    cf8e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    cf92:	4620      	mov	r0, r4
    cf94:	f7ff fef0 	bl	cd78 <release_handler>
    if (!handler)
    cf98:	2e00      	cmp	r6, #0
    cf9a:	d0ba      	beq.n	cf12 <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    cf9c:	4d12      	ldr	r5, [pc, #72]	; (cfe8 <nrfx_gpiote_input_configure+0x14c>)
    cf9e:	682b      	ldr	r3, [r5, #0]
    cfa0:	429e      	cmp	r6, r3
    cfa2:	d104      	bne.n	cfae <nrfx_gpiote_input_configure+0x112>
    cfa4:	686b      	ldr	r3, [r5, #4]
    cfa6:	429f      	cmp	r7, r3
    cfa8:	d101      	bne.n	cfae <nrfx_gpiote_input_configure+0x112>
    cfaa:	2200      	movs	r2, #0
    cfac:	e00a      	b.n	cfc4 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    cfae:	4811      	ldr	r0, [pc, #68]	; (cff4 <nrfx_gpiote_input_configure+0x158>)
    cfb0:	f10d 010f 	add.w	r1, sp, #15
    cfb4:	f7ff fce8 	bl	c988 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    cfb8:	4b0c      	ldr	r3, [pc, #48]	; (cfec <nrfx_gpiote_input_configure+0x150>)
    cfba:	4298      	cmp	r0, r3
    cfbc:	f47f af78 	bne.w	ceb0 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    cfc0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    cfc4:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    cfc8:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cfcc:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    cfce:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cfd0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    cfd4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    cfd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cfdc:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    cfe0:	e797      	b.n	cf12 <nrfx_gpiote_input_configure+0x76>
    cfe2:	bf00      	nop
    cfe4:	0bad0004 	.word	0x0bad0004
    cfe8:	200000a8 	.word	0x200000a8
    cfec:	0bad0000 	.word	0x0bad0000
    cff0:	40006000 	.word	0x40006000
    cff4:	2000011c 	.word	0x2000011c

0000cff8 <nrfx_gpiote_output_configure>:
{
    cff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cffa:	4604      	mov	r4, r0
    cffc:	b085      	sub	sp, #20
    cffe:	4615      	mov	r5, r2
    if (p_config)
    d000:	b321      	cbz	r1, d04c <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    d002:	f7ff fe91 	bl	cd28 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    d006:	b920      	cbnz	r0, d012 <nrfx_gpiote_output_configure+0x1a>
    d008:	4620      	mov	r0, r4
    d00a:	f7ff fe77 	bl	ccfc <pin_in_use_by_te>
    d00e:	2800      	cmp	r0, #0
    d010:	d15e      	bne.n	d0d0 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    d012:	4620      	mov	r0, r4
    d014:	f7ff fe7c 	bl	cd10 <pin_has_trigger>
    d018:	b110      	cbz	r0, d020 <nrfx_gpiote_output_configure+0x28>
    d01a:	784b      	ldrb	r3, [r1, #1]
    d01c:	2b01      	cmp	r3, #1
    d01e:	d057      	beq.n	d0d0 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d020:	2301      	movs	r3, #1
    d022:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    d026:	2300      	movs	r3, #0
    d028:	e9cd 1300 	strd	r1, r3, [sp]
    d02c:	1c4a      	adds	r2, r1, #1
    d02e:	1c8b      	adds	r3, r1, #2
    d030:	4620      	mov	r0, r4
    d032:	f10d 010f 	add.w	r1, sp, #15
    d036:	f00b fbb4 	bl	187a2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    d03a:	4a26      	ldr	r2, [pc, #152]	; (d0d4 <nrfx_gpiote_output_configure+0xdc>)
    d03c:	f104 0108 	add.w	r1, r4, #8
    d040:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    d044:	f043 0303 	orr.w	r3, r3, #3
    d048:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    d04c:	b915      	cbnz	r5, d054 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    d04e:	4822      	ldr	r0, [pc, #136]	; (d0d8 <nrfx_gpiote_output_configure+0xe0>)
}
    d050:	b005      	add	sp, #20
    d052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    d054:	4620      	mov	r0, r4
    d056:	f7ff fe67 	bl	cd28 <pin_is_output>
        if (pin_is_input(pin))
    d05a:	b3c8      	cbz	r0, d0d0 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    d05c:	4e1d      	ldr	r6, [pc, #116]	; (d0d4 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    d05e:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    d062:	f104 0708 	add.w	r7, r4, #8
    d066:	4661      	mov	r1, ip
    d068:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    d06c:	0089      	lsls	r1, r1, #2
    d06e:	f020 0020 	bic.w	r0, r0, #32
    d072:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    d076:	04c0      	lsls	r0, r0, #19
    d078:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    d07c:	0cc0      	lsrs	r0, r0, #19
    d07e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    d082:	2300      	movs	r3, #0
    d084:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    d088:	786a      	ldrb	r2, [r5, #1]
    d08a:	2a00      	cmp	r2, #0
    d08c:	d0df      	beq.n	d04e <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    d08e:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    d092:	78ad      	ldrb	r5, [r5, #2]
    d094:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    d098:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    d09c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d0a0:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    d0a4:	0223      	lsls	r3, r4, #8
    d0a6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    d0aa:	0412      	lsls	r2, r2, #16
    d0ac:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d0b0:	ea43 030e 	orr.w	r3, r3, lr
    d0b4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    d0b6:	052a      	lsls	r2, r5, #20
    d0b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    d0bc:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d0c0:	4313      	orrs	r3, r2
    d0c2:	f040 0020 	orr.w	r0, r0, #32
    d0c6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    d0ca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    d0ce:	e7be      	b.n	d04e <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    d0d0:	4802      	ldr	r0, [pc, #8]	; (d0dc <nrfx_gpiote_output_configure+0xe4>)
    d0d2:	e7bd      	b.n	d050 <nrfx_gpiote_output_configure+0x58>
    d0d4:	200000a8 	.word	0x200000a8
    d0d8:	0bad0000 	.word	0x0bad0000
    d0dc:	0bad0004 	.word	0x0bad0004

0000d0e0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    d0e0:	4b01      	ldr	r3, [pc, #4]	; (d0e8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    d0e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    d0e6:	4770      	bx	lr
    d0e8:	200000a8 	.word	0x200000a8

0000d0ec <nrfx_gpiote_channel_get>:
{
    d0ec:	b538      	push	{r3, r4, r5, lr}
    d0ee:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    d0f0:	460d      	mov	r5, r1
    d0f2:	b959      	cbnz	r1, d10c <nrfx_gpiote_channel_get+0x20>
    d0f4:	490c      	ldr	r1, [pc, #48]	; (d128 <nrfx_gpiote_channel_get+0x3c>)
    d0f6:	480d      	ldr	r0, [pc, #52]	; (d12c <nrfx_gpiote_channel_get+0x40>)
    d0f8:	4a0d      	ldr	r2, [pc, #52]	; (d130 <nrfx_gpiote_channel_get+0x44>)
    d0fa:	f240 2335 	movw	r3, #565	; 0x235
    d0fe:	f00a fda6 	bl	17c4e <assert_print>
    d102:	480b      	ldr	r0, [pc, #44]	; (d130 <nrfx_gpiote_channel_get+0x44>)
    d104:	f240 2135 	movw	r1, #565	; 0x235
    d108:	f00a fd9a 	bl	17c40 <assert_post_action>
    if (pin_in_use_by_te(pin))
    d10c:	4620      	mov	r0, r4
    d10e:	f7ff fdf5 	bl	ccfc <pin_in_use_by_te>
    d112:	b138      	cbz	r0, d124 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d114:	4b07      	ldr	r3, [pc, #28]	; (d134 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    d116:	4808      	ldr	r0, [pc, #32]	; (d138 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d118:	3408      	adds	r4, #8
    d11a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    d11e:	0b5b      	lsrs	r3, r3, #13
    d120:	702b      	strb	r3, [r5, #0]
}
    d122:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d124:	4805      	ldr	r0, [pc, #20]	; (d13c <nrfx_gpiote_channel_get+0x50>)
    d126:	e7fc      	b.n	d122 <nrfx_gpiote_channel_get+0x36>
    d128:	0003d7a0 	.word	0x0003d7a0
    d12c:	0003baf1 	.word	0x0003baf1
    d130:	0003d728 	.word	0x0003d728
    d134:	200000a8 	.word	0x200000a8
    d138:	0bad0000 	.word	0x0bad0000
    d13c:	0bad0004 	.word	0x0bad0004

0000d140 <nrfx_gpiote_init>:
{
    d140:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d142:	4c0f      	ldr	r4, [pc, #60]	; (d180 <nrfx_gpiote_init+0x40>)
    d144:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    d148:	b9bd      	cbnz	r5, d17a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    d14a:	2260      	movs	r2, #96	; 0x60
    d14c:	4629      	mov	r1, r5
    d14e:	f104 0010 	add.w	r0, r4, #16
    d152:	f00e fe00 	bl	1bd56 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    d156:	2006      	movs	r0, #6
    d158:	f7fb f892 	bl	8280 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d15c:	4b09      	ldr	r3, [pc, #36]	; (d184 <nrfx_gpiote_init+0x44>)
    return err_code;
    d15e:	480a      	ldr	r0, [pc, #40]	; (d188 <nrfx_gpiote_init+0x48>)
    d160:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    d164:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    d168:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d16c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d170:	2301      	movs	r3, #1
    d172:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    d176:	6763      	str	r3, [r4, #116]	; 0x74
}
    d178:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    d17a:	4804      	ldr	r0, [pc, #16]	; (d18c <nrfx_gpiote_init+0x4c>)
    d17c:	e7fc      	b.n	d178 <nrfx_gpiote_init+0x38>
    d17e:	bf00      	nop
    d180:	200000a8 	.word	0x200000a8
    d184:	40006000 	.word	0x40006000
    d188:	0bad0000 	.word	0x0bad0000
    d18c:	0bad0005 	.word	0x0bad0005

0000d190 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    d190:	4b03      	ldr	r3, [pc, #12]	; (d1a0 <nrfx_gpiote_is_init+0x10>)
    d192:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    d196:	3800      	subs	r0, #0
    d198:	bf18      	it	ne
    d19a:	2001      	movne	r0, #1
    d19c:	4770      	bx	lr
    d19e:	bf00      	nop
    d1a0:	200000a8 	.word	0x200000a8

0000d1a4 <nrfx_gpiote_channel_free>:
{
    d1a4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    d1a6:	4801      	ldr	r0, [pc, #4]	; (d1ac <nrfx_gpiote_channel_free+0x8>)
    d1a8:	f7ff bc14 	b.w	c9d4 <nrfx_flag32_free>
    d1ac:	20000118 	.word	0x20000118

0000d1b0 <nrfx_gpiote_channel_alloc>:
{
    d1b0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    d1b2:	4801      	ldr	r0, [pc, #4]	; (d1b8 <nrfx_gpiote_channel_alloc+0x8>)
    d1b4:	f7ff bbe8 	b.w	c988 <nrfx_flag32_alloc>
    d1b8:	20000118 	.word	0x20000118

0000d1bc <nrfx_gpiote_trigger_enable>:
{
    d1bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d1be:	4604      	mov	r4, r0
    d1c0:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    d1c2:	f7ff fda5 	bl	cd10 <pin_has_trigger>
    d1c6:	b958      	cbnz	r0, d1e0 <nrfx_gpiote_trigger_enable+0x24>
    d1c8:	4930      	ldr	r1, [pc, #192]	; (d28c <nrfx_gpiote_trigger_enable+0xd0>)
    d1ca:	4831      	ldr	r0, [pc, #196]	; (d290 <nrfx_gpiote_trigger_enable+0xd4>)
    d1cc:	4a31      	ldr	r2, [pc, #196]	; (d294 <nrfx_gpiote_trigger_enable+0xd8>)
    d1ce:	f240 33df 	movw	r3, #991	; 0x3df
    d1d2:	f00a fd3c 	bl	17c4e <assert_print>
    d1d6:	482f      	ldr	r0, [pc, #188]	; (d294 <nrfx_gpiote_trigger_enable+0xd8>)
    d1d8:	f240 31df 	movw	r1, #991	; 0x3df
    d1dc:	f00a fd30 	bl	17c40 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d1e0:	4620      	mov	r0, r4
    d1e2:	f7ff fd8b 	bl	ccfc <pin_in_use_by_te>
    d1e6:	4e2c      	ldr	r6, [pc, #176]	; (d298 <nrfx_gpiote_trigger_enable+0xdc>)
    d1e8:	f104 0708 	add.w	r7, r4, #8
    d1ec:	b318      	cbz	r0, d236 <nrfx_gpiote_trigger_enable+0x7a>
    return !pin_is_output(pin);
    d1ee:	4620      	mov	r0, r4
    d1f0:	f7ff fd9a 	bl	cd28 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d1f4:	4602      	mov	r2, r0
    d1f6:	b9f0      	cbnz	r0, d236 <nrfx_gpiote_trigger_enable+0x7a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d1f8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    d1fc:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    d1fe:	4608      	mov	r0, r1
    d200:	f00b facb 	bl	1879a <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    d204:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    d208:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d20c:	601a      	str	r2, [r3, #0]
    d20e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    d210:	008b      	lsls	r3, r1, #2
    d212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d216:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    d21a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d21e:	f042 0201 	orr.w	r2, r2, #1
    d222:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    d226:	b125      	cbz	r5, d232 <nrfx_gpiote_trigger_enable+0x76>
    p_reg->INTENSET = mask;
    d228:	4a1c      	ldr	r2, [pc, #112]	; (d29c <nrfx_gpiote_trigger_enable+0xe0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    d22a:	2301      	movs	r3, #1
    d22c:	408b      	lsls	r3, r1
    d22e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d232:	b003      	add	sp, #12
    d234:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    d236:	b95d      	cbnz	r5, d250 <nrfx_gpiote_trigger_enable+0x94>
    d238:	4919      	ldr	r1, [pc, #100]	; (d2a0 <nrfx_gpiote_trigger_enable+0xe4>)
    d23a:	4815      	ldr	r0, [pc, #84]	; (d290 <nrfx_gpiote_trigger_enable+0xd4>)
    d23c:	4a15      	ldr	r2, [pc, #84]	; (d294 <nrfx_gpiote_trigger_enable+0xd8>)
    d23e:	f240 33ee 	movw	r3, #1006	; 0x3ee
    d242:	f00a fd04 	bl	17c4e <assert_print>
    d246:	4813      	ldr	r0, [pc, #76]	; (d294 <nrfx_gpiote_trigger_enable+0xd8>)
    d248:	f240 31ee 	movw	r1, #1006	; 0x3ee
    d24c:	f00a fcf8 	bl	17c40 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d250:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    d254:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    d258:	2b04      	cmp	r3, #4
    d25a:	d012      	beq.n	d282 <nrfx_gpiote_trigger_enable+0xc6>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    d25c:	2b05      	cmp	r3, #5
    d25e:	d012      	beq.n	d286 <nrfx_gpiote_trigger_enable+0xca>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d260:	a801      	add	r0, sp, #4
    d262:	9401      	str	r4, [sp, #4]
    d264:	f7ff fde4 	bl	ce30 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d268:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    d26a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d26e:	40d9      	lsrs	r1, r3
    d270:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    d274:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d276:	4620      	mov	r0, r4
}
    d278:	b003      	add	sp, #12
    d27a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d27e:	f00b badb 	b.w	18838 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    d282:	2103      	movs	r1, #3
    d284:	e7f7      	b.n	d276 <nrfx_gpiote_trigger_enable+0xba>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    d286:	2102      	movs	r1, #2
    d288:	e7f5      	b.n	d276 <nrfx_gpiote_trigger_enable+0xba>
    d28a:	bf00      	nop
    d28c:	0003d7aa 	.word	0x0003d7aa
    d290:	0003baf1 	.word	0x0003baf1
    d294:	0003d728 	.word	0x0003d728
    d298:	200000a8 	.word	0x200000a8
    d29c:	40006000 	.word	0x40006000
    d2a0:	0003d7bf 	.word	0x0003d7bf

0000d2a4 <nrfx_gpiote_trigger_disable>:
{
    d2a4:	b508      	push	{r3, lr}
    d2a6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d2a8:	f7ff fd28 	bl	ccfc <pin_in_use_by_te>
    d2ac:	b1c8      	cbz	r0, d2e2 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    d2ae:	4610      	mov	r0, r2
    d2b0:	f7ff fd3a 	bl	cd28 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d2b4:	b9a8      	cbnz	r0, d2e2 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d2b6:	3208      	adds	r2, #8
    d2b8:	4b0d      	ldr	r3, [pc, #52]	; (d2f0 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    d2ba:	490e      	ldr	r1, [pc, #56]	; (d2f4 <nrfx_gpiote_trigger_disable+0x50>)
    d2bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d2c0:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d2c2:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d2c4:	409a      	lsls	r2, r3
    d2c6:	009b      	lsls	r3, r3, #2
    d2c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d2cc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    d2d0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d2d4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d2d8:	f022 0203 	bic.w	r2, r2, #3
    d2dc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    d2e0:	bd08      	pop	{r3, pc}
    d2e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d2e6:	2100      	movs	r1, #0
    d2e8:	4610      	mov	r0, r2
    d2ea:	f00b baa5 	b.w	18838 <nrf_gpio_cfg_sense_set>
    d2ee:	bf00      	nop
    d2f0:	200000a8 	.word	0x200000a8
    d2f4:	40006000 	.word	0x40006000

0000d2f8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d2f8:	4b0e      	ldr	r3, [pc, #56]	; (d334 <nrfx_gpiote_pin_uninit+0x3c>)
    d2fa:	f100 0208 	add.w	r2, r0, #8
{
    d2fe:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d300:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    d304:	07db      	lsls	r3, r3, #31
{
    d306:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    d308:	d511      	bpl.n	d32e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    d30a:	f7ff ffcb 	bl	d2a4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    d30e:	4620      	mov	r0, r4
    d310:	f7ff fd72 	bl	cdf8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d314:	a801      	add	r0, sp, #4
    d316:	9401      	str	r4, [sp, #4]
    d318:	f7ff fd8a 	bl	ce30 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d31c:	9b01      	ldr	r3, [sp, #4]
    d31e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d322:	2202      	movs	r2, #2
    d324:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    d328:	4803      	ldr	r0, [pc, #12]	; (d338 <nrfx_gpiote_pin_uninit+0x40>)
}
    d32a:	b002      	add	sp, #8
    d32c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d32e:	4803      	ldr	r0, [pc, #12]	; (d33c <nrfx_gpiote_pin_uninit+0x44>)
    d330:	e7fb      	b.n	d32a <nrfx_gpiote_pin_uninit+0x32>
    d332:	bf00      	nop
    d334:	200000a8 	.word	0x200000a8
    d338:	0bad0000 	.word	0x0bad0000
    d33c:	0bad0004 	.word	0x0bad0004

0000d340 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d344:	4b65      	ldr	r3, [pc, #404]	; (d4dc <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    d346:	4866      	ldr	r0, [pc, #408]	; (d4e0 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d348:	4966      	ldr	r1, [pc, #408]	; (d4e4 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    d34a:	2600      	movs	r6, #0
{
    d34c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    d34e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d350:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d352:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    d354:	b135      	cbz	r5, d364 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    d356:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    d35a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d35c:	bf1e      	ittt	ne
    d35e:	601c      	strne	r4, [r3, #0]
    d360:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    d362:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d364:	3304      	adds	r3, #4
    d366:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    d368:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d36c:	d1f1      	bne.n	d352 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d36e:	f8df 8170 	ldr.w	r8, [pc, #368]	; d4e0 <nrfx_gpiote_irq_handler+0x1a0>
    d372:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    d376:	2b00      	cmp	r3, #0
    d378:	f000 8093 	beq.w	d4a2 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
    d37c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d380:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    d384:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    d386:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    d38a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    d38e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    d390:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    d394:	2700      	movs	r7, #0
            while (latch[i])
    d396:	f10d 0910 	add.w	r9, sp, #16
    d39a:	017b      	lsls	r3, r7, #5
    d39c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    d39e:	f04f 0a01 	mov.w	sl, #1
    d3a2:	e04b      	b.n	d43c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    d3a4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d3a6:	4a50      	ldr	r2, [pc, #320]	; (d4e8 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    d3a8:	fa94 f4a4 	rbit	r4, r4
    d3ac:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    d3b0:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d3b2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    d3b6:	08e0      	lsrs	r0, r4, #3
    d3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d3bc:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    d3be:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    d3c2:	fa0a fc02 	lsl.w	ip, sl, r2
    d3c6:	f819 2000 	ldrb.w	r2, [r9, r0]
    d3ca:	ea22 020c 	bic.w	r2, r2, ip
    d3ce:	0899      	lsrs	r1, r3, #2
    d3d0:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d3d4:	a803      	add	r0, sp, #12
    d3d6:	f3c3 0582 	ubfx	r5, r3, #2, #3
    d3da:	9101      	str	r1, [sp, #4]
    d3dc:	f7ff fd28 	bl	ce30 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d3e0:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    d3e2:	9901      	ldr	r1, [sp, #4]
    d3e4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    d3e8:	074b      	lsls	r3, r1, #29
    d3ea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d3ee:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    d3f0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    d3f4:	d529      	bpl.n	d44a <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
    d3f6:	4659      	mov	r1, fp
    d3f8:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d3fa:	b2d5      	uxtb	r5, r2
    d3fc:	f7ff fc9e 	bl	cd3c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d400:	a803      	add	r0, sp, #12
    d402:	9403      	str	r4, [sp, #12]
    d404:	f7ff fd14 	bl	ce30 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d408:	9b03      	ldr	r3, [sp, #12]
    d40a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d40e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    d412:	f3c3 4301 	ubfx	r3, r3, #16, #2
    d416:	429d      	cmp	r5, r3
    d418:	d107      	bne.n	d42a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d41a:	2100      	movs	r1, #0
    d41c:	4620      	mov	r0, r4
    d41e:	f00b fa0b 	bl	18838 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    d422:	4629      	mov	r1, r5
    d424:	4620      	mov	r0, r4
    d426:	f00b fa07 	bl	18838 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d42a:	a803      	add	r0, sp, #12
    d42c:	9403      	str	r4, [sp, #12]
    d42e:	f7ff fcff 	bl	ce30 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    d432:	9b03      	ldr	r3, [sp, #12]
    d434:	fa0a f303 	lsl.w	r3, sl, r3
    d438:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    d43c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    d440:	2c00      	cmp	r4, #0
    d442:	d1af      	bne.n	d3a4 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    d444:	b9cf      	cbnz	r7, d47a <nrfx_gpiote_irq_handler+0x13a>
    d446:	2701      	movs	r7, #1
    d448:	e7a7      	b.n	d39a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    d44a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d44c:	bf0c      	ite	eq
    d44e:	2103      	moveq	r1, #3
    d450:	2102      	movne	r1, #2
    d452:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    d454:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d456:	f00b f9ef 	bl	18838 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d45a:	2d03      	cmp	r5, #3
    d45c:	d004      	beq.n	d468 <nrfx_gpiote_irq_handler+0x128>
    d45e:	9a01      	ldr	r2, [sp, #4]
    d460:	2a02      	cmp	r2, #2
    d462:	d106      	bne.n	d472 <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    d464:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    d466:	d1e0      	bne.n	d42a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    d468:	4659      	mov	r1, fp
    d46a:	4620      	mov	r0, r4
    d46c:	f7ff fc66 	bl	cd3c <call_handler>
    d470:	e7db      	b.n	d42a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    d472:	2a03      	cmp	r2, #3
    d474:	d1d9      	bne.n	d42a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    d476:	2d02      	cmp	r5, #2
    d478:	e7f5      	b.n	d466 <nrfx_gpiote_irq_handler+0x126>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d47a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    d47e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    d482:	491a      	ldr	r1, [pc, #104]	; (d4ec <nrfx_gpiote_irq_handler+0x1ac>)
    d484:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d488:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    d48c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    d48e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    d492:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    d496:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    d498:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    d49c:	4313      	orrs	r3, r2
    d49e:	f47f af79 	bne.w	d394 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    d4a2:	2401      	movs	r4, #1
    while (mask)
    d4a4:	b916      	cbnz	r6, d4ac <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    d4a6:	b007      	add	sp, #28
    d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    d4ac:	fa96 f3a6 	rbit	r3, r6
    d4b0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    d4b4:	fa04 f203 	lsl.w	r2, r4, r3
    d4b8:	009b      	lsls	r3, r3, #2
    d4ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d4be:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    d4c2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d4c6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    d4ca:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    d4ce:	f3c0 2005 	ubfx	r0, r0, #8, #6
    d4d2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    d4d6:	f7ff fc31 	bl	cd3c <call_handler>
    d4da:	e7e3      	b.n	d4a4 <nrfx_gpiote_irq_handler+0x164>
    d4dc:	40006100 	.word	0x40006100
    d4e0:	40006000 	.word	0x40006000
    d4e4:	40006120 	.word	0x40006120
    d4e8:	200000a8 	.word	0x200000a8
    d4ec:	50000300 	.word	0x50000300

0000d4f0 <nvmc_word_write>:
    d4f0:	4a04      	ldr	r2, [pc, #16]	; (d504 <nvmc_word_write+0x14>)
    d4f2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    d4f6:	07db      	lsls	r3, r3, #31
    d4f8:	d5fb      	bpl.n	d4f2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    d4fa:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    d4fc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    d500:	4770      	bx	lr
    d502:	bf00      	nop
    d504:	4001e000 	.word	0x4001e000

0000d508 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    d508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    d50c:	b510      	push	{r4, lr}
    d50e:	6913      	ldr	r3, [r2, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    d510:	6952      	ldr	r2, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
    d512:	4353      	muls	r3, r2
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    d514:	4298      	cmp	r0, r3
{
    d516:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
    d518:	d30b      	bcc.n	d532 <nrfx_nvmc_page_erase+0x2a>
    NRFX_ASSERT(is_valid_address(addr, false));
    d51a:	4912      	ldr	r1, [pc, #72]	; (d564 <nrfx_nvmc_page_erase+0x5c>)
    d51c:	4812      	ldr	r0, [pc, #72]	; (d568 <nrfx_nvmc_page_erase+0x60>)
    d51e:	4a13      	ldr	r2, [pc, #76]	; (d56c <nrfx_nvmc_page_erase+0x64>)
    d520:	f44f 7383 	mov.w	r3, #262	; 0x106
    d524:	f00a fb93 	bl	17c4e <assert_print>
    d528:	4810      	ldr	r0, [pc, #64]	; (d56c <nrfx_nvmc_page_erase+0x64>)
    d52a:	f44f 7183 	mov.w	r1, #262	; 0x106
    d52e:	f00a fb87 	bl	17c40 <assert_post_action>
    return p_reg->CODEPAGESIZE;
    d532:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d536:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
    d538:	fbb4 f3f2 	udiv	r3, r4, r2
    d53c:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
    d540:	b973      	cbnz	r3, d560 <nrfx_nvmc_page_erase+0x58>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    d542:	4b0b      	ldr	r3, [pc, #44]	; (d570 <nrfx_nvmc_page_erase+0x68>)
    d544:	2202      	movs	r2, #2
    d546:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    d54a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    d54e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    d552:	07d2      	lsls	r2, r2, #31
    d554:	d5fb      	bpl.n	d54e <nrfx_nvmc_page_erase+0x46>
    p_reg->CONFIG = (uint32_t)mode;
    d556:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    d558:	4806      	ldr	r0, [pc, #24]	; (d574 <nrfx_nvmc_page_erase+0x6c>)
    d55a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    d55e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
    d560:	4805      	ldr	r0, [pc, #20]	; (d578 <nrfx_nvmc_page_erase+0x70>)
    d562:	e7fc      	b.n	d55e <nrfx_nvmc_page_erase+0x56>
    d564:	0003d826 	.word	0x0003d826
    d568:	0003baf1 	.word	0x0003baf1
    d56c:	0003d7ca 	.word	0x0003d7ca
    d570:	4001e000 	.word	0x4001e000
    d574:	0bad0000 	.word	0x0bad0000
    d578:	0bad000a 	.word	0x0bad000a

0000d57c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    d57c:	b570      	push	{r4, r5, r6, lr}
    d57e:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    d580:	2101      	movs	r1, #1
{
    d582:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
    d584:	f00b f967 	bl	18856 <is_valid_address>
    d588:	b958      	cbnz	r0, d5a2 <nrfx_nvmc_word_write+0x26>
    d58a:	4913      	ldr	r1, [pc, #76]	; (d5d8 <nrfx_nvmc_word_write+0x5c>)
    d58c:	4813      	ldr	r0, [pc, #76]	; (d5dc <nrfx_nvmc_word_write+0x60>)
    d58e:	4a14      	ldr	r2, [pc, #80]	; (d5e0 <nrfx_nvmc_word_write+0x64>)
    d590:	f44f 73ca 	mov.w	r3, #404	; 0x194
    d594:	f00a fb5b 	bl	17c4e <assert_print>
    d598:	4811      	ldr	r0, [pc, #68]	; (d5e0 <nrfx_nvmc_word_write+0x64>)
    d59a:	f44f 71ca 	mov.w	r1, #404	; 0x194
    d59e:	f00a fb4f 	bl	17c40 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
    d5a2:	07a3      	lsls	r3, r4, #30
    d5a4:	d00b      	beq.n	d5be <nrfx_nvmc_word_write+0x42>
    d5a6:	490f      	ldr	r1, [pc, #60]	; (d5e4 <nrfx_nvmc_word_write+0x68>)
    d5a8:	480c      	ldr	r0, [pc, #48]	; (d5dc <nrfx_nvmc_word_write+0x60>)
    d5aa:	4a0d      	ldr	r2, [pc, #52]	; (d5e0 <nrfx_nvmc_word_write+0x64>)
    d5ac:	f240 1395 	movw	r3, #405	; 0x195
    d5b0:	f00a fb4d 	bl	17c4e <assert_print>
    d5b4:	480a      	ldr	r0, [pc, #40]	; (d5e0 <nrfx_nvmc_word_write+0x64>)
    d5b6:	f240 1195 	movw	r1, #405	; 0x195
    d5ba:	f00a fb41 	bl	17c40 <assert_post_action>
    d5be:	4e0a      	ldr	r6, [pc, #40]	; (d5e8 <nrfx_nvmc_word_write+0x6c>)
    d5c0:	2301      	movs	r3, #1
    d5c2:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    d5c6:	4629      	mov	r1, r5
    d5c8:	4620      	mov	r0, r4
    d5ca:	f7ff ff91 	bl	d4f0 <nvmc_word_write>
    d5ce:	2300      	movs	r3, #0
    d5d0:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
    d5d4:	bd70      	pop	{r4, r5, r6, pc}
    d5d6:	bf00      	nop
    d5d8:	0003d840 	.word	0x0003d840
    d5dc:	0003baf1 	.word	0x0003baf1
    d5e0:	0003d7ca 	.word	0x0003d7ca
    d5e4:	0003d85a 	.word	0x0003d85a
    d5e8:	4001e000 	.word	0x4001e000

0000d5ec <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d5ec:	6802      	ldr	r2, [r0, #0]
    switch (port)
    d5ee:	0953      	lsrs	r3, r2, #5
{
    d5f0:	b510      	push	{r4, lr}
    d5f2:	4604      	mov	r4, r0
    switch (port)
    d5f4:	d02c      	beq.n	d650 <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    d5f6:	2b01      	cmp	r3, #1
    d5f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d5fc:	bf18      	it	ne
    d5fe:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    d600:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    d604:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    d606:	07db      	lsls	r3, r3, #31
    d608:	d40b      	bmi.n	d622 <nrf_gpio_pin_port_decode+0x36>
    d60a:	4914      	ldr	r1, [pc, #80]	; (d65c <nrf_gpio_pin_port_decode+0x70>)
    d60c:	4814      	ldr	r0, [pc, #80]	; (d660 <nrf_gpio_pin_port_decode+0x74>)
    d60e:	4a15      	ldr	r2, [pc, #84]	; (d664 <nrf_gpio_pin_port_decode+0x78>)
    d610:	f240 2329 	movw	r3, #553	; 0x229
    d614:	f00a fb1b 	bl	17c4e <assert_print>
    d618:	4812      	ldr	r0, [pc, #72]	; (d664 <nrf_gpio_pin_port_decode+0x78>)
    d61a:	f240 2129 	movw	r1, #553	; 0x229
    d61e:	f00a fb0f 	bl	17c40 <assert_post_action>
    uint32_t pin_number = *p_pin;
    d622:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    d624:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d628:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    d62a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d62c:	d00d      	beq.n	d64a <nrf_gpio_pin_port_decode+0x5e>
    d62e:	2b01      	cmp	r3, #1
    d630:	d011      	beq.n	d656 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    d632:	490d      	ldr	r1, [pc, #52]	; (d668 <nrf_gpio_pin_port_decode+0x7c>)
    d634:	480a      	ldr	r0, [pc, #40]	; (d660 <nrf_gpio_pin_port_decode+0x74>)
    d636:	4a0b      	ldr	r2, [pc, #44]	; (d664 <nrf_gpio_pin_port_decode+0x78>)
    d638:	f240 232e 	movw	r3, #558	; 0x22e
    d63c:	f00a fb07 	bl	17c4e <assert_print>
    d640:	4808      	ldr	r0, [pc, #32]	; (d664 <nrf_gpio_pin_port_decode+0x78>)
    d642:	f240 212e 	movw	r1, #558	; 0x22e
    d646:	f00a fafb 	bl	17c40 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    d64a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    d64e:	bd10      	pop	{r4, pc}
    switch (port)
    d650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d654:	e7d4      	b.n	d600 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    d656:	4805      	ldr	r0, [pc, #20]	; (d66c <nrf_gpio_pin_port_decode+0x80>)
    d658:	e7f9      	b.n	d64e <nrf_gpio_pin_port_decode+0x62>
    d65a:	bf00      	nop
    d65c:	0003ccc9 	.word	0x0003ccc9
    d660:	0003baf1 	.word	0x0003baf1
    d664:	0003cc96 	.word	0x0003cc96
    d668:	0003d09f 	.word	0x0003d09f
    d66c:	50000300 	.word	0x50000300

0000d670 <nrfx_pdm_irq_handler>:

static nrfx_pdm_cb_t m_cb;


void nrfx_pdm_irq_handler(void)
{
    d670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE bool nrf_pdm_event_check(NRF_PDM_Type const * p_reg, nrf_pdm_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d672:	4a3c      	ldr	r2, [pc, #240]	; (d764 <nrfx_pdm_irq_handler+0xf4>)
    d674:	4c3c      	ldr	r4, [pc, #240]	; (d768 <nrfx_pdm_irq_handler+0xf8>)
    d676:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    if (nrf_pdm_event_check(NRF_PDM0, NRF_PDM_EVENT_STARTED))
    d67a:	2b00      	cmp	r3, #0
    d67c:	d048      	beq.n	d710 <nrfx_pdm_irq_handler+0xa0>
}

NRF_STATIC_INLINE void nrf_pdm_event_clear(NRF_PDM_Type * p_reg, nrf_pdm_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d67e:	2300      	movs	r3, #0
    d680:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    d684:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    {
        nrf_pdm_event_clear(NRF_PDM0, NRF_PDM_EVENT_STARTED);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_PDM_EVENT_STARTED));

        uint8_t finished_buffer = m_cb.active_buffer;
    d688:	7ca3      	ldrb	r3, [r4, #18]

        // Check if the next buffer was set before.
        uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
    d68a:	43da      	mvns	r2, r3
    d68c:	f002 0201 	and.w	r2, r2, #1
        if (m_cb.buff_address[next_buffer] ||
    d690:	eb04 0182 	add.w	r1, r4, r2, lsl #2
    d694:	6849      	ldr	r1, [r1, #4]
    d696:	b911      	cbnz	r1, d69e <nrfx_pdm_irq_handler+0x2e>
            m_cb.op_state == NRFX_PDM_STATE_STARTING)
    d698:	7c61      	ldrb	r1, [r4, #17]
        if (m_cb.buff_address[next_buffer] ||
    d69a:	2902      	cmp	r1, #2
    d69c:	d12d      	bne.n	d6fa <nrfx_pdm_irq_handler+0x8a>
            nrfx_pdm_evt_t evt;
            evt.error = NRFX_PDM_NO_ERROR;
            m_cb.error = 0;

            // Release the full buffer if ready and request the next one.
            if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    d69e:	7c60      	ldrb	r0, [r4, #17]
    d6a0:	2802      	cmp	r0, #2
                evt.buffer_released = 0;
                m_cb.op_state = NRFX_PDM_STATE_RUNNING;
            }
            else
            {
                evt.buffer_released = m_cb.buff_address[finished_buffer];
    d6a2:	bf18      	it	ne
    d6a4:	eb04 0383 	addne.w	r3, r4, r3, lsl #2
            evt.error = NRFX_PDM_NO_ERROR;
    d6a8:	f04f 0100 	mov.w	r1, #0
                m_cb.op_state = NRFX_PDM_STATE_RUNNING;
    d6ac:	bf0b      	itete	eq
    d6ae:	2301      	moveq	r3, #1
                evt.buffer_released = m_cb.buff_address[finished_buffer];
    d6b0:	6858      	ldrne	r0, [r3, #4]
                m_cb.op_state = NRFX_PDM_STATE_RUNNING;
    d6b2:	7463      	strbeq	r3, [r4, #17]
                m_cb.buff_address[finished_buffer] = 0;
    d6b4:	6059      	strne	r1, [r3, #4]
                m_cb.active_buffer = next_buffer;
            }
            evt.buffer_requested = true;
    d6b6:	f04f 0301 	mov.w	r3, #1
            evt.error = NRFX_PDM_NO_ERROR;
    d6ba:	f88d 100c 	strb.w	r1, [sp, #12]
            m_cb.error = 0;
    d6be:	74e1      	strb	r1, [r4, #19]
                evt.buffer_released = 0;
    d6c0:	bf0e      	itee	eq
    d6c2:	9102      	streq	r1, [sp, #8]
                evt.buffer_released = m_cb.buff_address[finished_buffer];
    d6c4:	9002      	strne	r0, [sp, #8]
                m_cb.active_buffer = next_buffer;
    d6c6:	74a2      	strbne	r2, [r4, #18]
            evt.buffer_requested = true;
    d6c8:	f88d 3004 	strb.w	r3, [sp, #4]
                    .buffer_requested = false,
                    .buffer_released  = NULL,
                    .error = NRFX_PDM_ERROR_OVERFLOW
                };
                m_cb.error = 1;
                m_cb.event_handler(&evt);
    d6cc:	6823      	ldr	r3, [r4, #0]
    d6ce:	a801      	add	r0, sp, #4
    d6d0:	4798      	blx	r3
            }
        }

        if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    d6d2:	7c63      	ldrb	r3, [r4, #17]
    d6d4:	2b02      	cmp	r3, #2
    d6d6:	d101      	bne.n	d6dc <nrfx_pdm_irq_handler+0x6c>
        {
            m_cb.op_state = NRFX_PDM_STATE_RUNNING;
    d6d8:	2301      	movs	r3, #1
    d6da:	7463      	strb	r3, [r4, #17]
            m_cb.event_handler(&evt);
        }
        m_cb.active_buffer = 0;
    }

    if (m_cb.irq_buff_request)
    d6dc:	7d23      	ldrb	r3, [r4, #20]
    d6de:	b153      	cbz	r3, d6f6 <nrfx_pdm_irq_handler+0x86>
    {
        nrfx_pdm_evt_t const evt =
    d6e0:	2301      	movs	r3, #1
    d6e2:	f88d 3004 	strb.w	r3, [sp, #4]
    d6e6:	2300      	movs	r3, #0
    d6e8:	9302      	str	r3, [sp, #8]
    d6ea:	f88d 300c 	strb.w	r3, [sp, #12]
        {
            .buffer_requested = true,
            .buffer_released  = NULL,
            .error = NRFX_PDM_NO_ERROR,
        };
        m_cb.irq_buff_request = 0;
    d6ee:	7523      	strb	r3, [r4, #20]
        m_cb.event_handler(&evt);
    d6f0:	a801      	add	r0, sp, #4
    d6f2:	6823      	ldr	r3, [r4, #0]
    d6f4:	4798      	blx	r3
    }
}
    d6f6:	b004      	add	sp, #16
    d6f8:	bd10      	pop	{r4, pc}
            if (m_cb.error == 0)
    d6fa:	7ce3      	ldrb	r3, [r4, #19]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d1e8      	bne.n	d6d2 <nrfx_pdm_irq_handler+0x62>
                nrfx_pdm_evt_t const evt = {
    d700:	f88d 3004 	strb.w	r3, [sp, #4]
    d704:	9302      	str	r3, [sp, #8]
    d706:	2301      	movs	r3, #1
    d708:	f88d 300c 	strb.w	r3, [sp, #12]
                m_cb.error = 1;
    d70c:	74e3      	strb	r3, [r4, #19]
    d70e:	e7dd      	b.n	d6cc <nrfx_pdm_irq_handler+0x5c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d710:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    else if (nrf_pdm_event_check(NRF_PDM0, NRF_PDM_EVENT_STOPPED))
    d714:	2900      	cmp	r1, #0
    d716:	d0e1      	beq.n	d6dc <nrfx_pdm_irq_handler+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d718:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    d71c:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Enabled << PDM_ENABLE_ENABLE_Pos);
}

NRF_STATIC_INLINE void nrf_pdm_disable(NRF_PDM_Type * p_reg)
{
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
    d720:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        if (m_cb.buff_address[m_cb.active_buffer])
    d724:	7ca2      	ldrb	r2, [r4, #18]
        m_cb.op_state = NRFX_PDM_STATE_IDLE;
    d726:	7463      	strb	r3, [r4, #17]
        if (m_cb.buff_address[m_cb.active_buffer])
    d728:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        evt.error = NRFX_PDM_NO_ERROR;
    d72c:	f88d 300c 	strb.w	r3, [sp, #12]
        if (m_cb.buff_address[m_cb.active_buffer])
    d730:	6851      	ldr	r1, [r2, #4]
        evt.buffer_requested = false;
    d732:	f88d 3004 	strb.w	r3, [sp, #4]
        if (m_cb.buff_address[m_cb.active_buffer])
    d736:	b121      	cbz	r1, d742 <nrfx_pdm_irq_handler+0xd2>
            m_cb.buff_address[m_cb.active_buffer] = 0;
    d738:	6053      	str	r3, [r2, #4]
            evt.buffer_released = m_cb.buff_address[m_cb.active_buffer];
    d73a:	9102      	str	r1, [sp, #8]
            m_cb.event_handler(&evt);
    d73c:	6823      	ldr	r3, [r4, #0]
    d73e:	a801      	add	r0, sp, #4
    d740:	4798      	blx	r3
        if (m_cb.buff_address[second_buffer])
    d742:	7ca3      	ldrb	r3, [r4, #18]
    d744:	43db      	mvns	r3, r3
    d746:	f003 0301 	and.w	r3, r3, #1
    d74a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d74e:	685a      	ldr	r2, [r3, #4]
    d750:	b12a      	cbz	r2, d75e <nrfx_pdm_irq_handler+0xee>
            evt.buffer_released = m_cb.buff_address[second_buffer];
    d752:	9202      	str	r2, [sp, #8]
            m_cb.buff_address[second_buffer] = 0;
    d754:	2200      	movs	r2, #0
    d756:	605a      	str	r2, [r3, #4]
            m_cb.event_handler(&evt);
    d758:	a801      	add	r0, sp, #4
    d75a:	6823      	ldr	r3, [r4, #0]
    d75c:	4798      	blx	r3
        m_cb.active_buffer = 0;
    d75e:	2300      	movs	r3, #0
    d760:	74a3      	strb	r3, [r4, #18]
    d762:	e7bb      	b.n	d6dc <nrfx_pdm_irq_handler+0x6c>
    d764:	4001d000 	.word	0x4001d000
    d768:	20023924 	.word	0x20023924

0000d76c <nrfx_pdm_init>:


nrfx_err_t nrfx_pdm_init(nrfx_pdm_config_t const * p_config,
                         nrfx_pdm_event_handler_t  event_handler)
{
    d76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d76e:	460e      	mov	r6, r1
    NRFX_ASSERT(p_config);
    d770:	4604      	mov	r4, r0
    d772:	b948      	cbnz	r0, d788 <nrfx_pdm_init+0x1c>
    d774:	493f      	ldr	r1, [pc, #252]	; (d874 <nrfx_pdm_init+0x108>)
    d776:	4840      	ldr	r0, [pc, #256]	; (d878 <nrfx_pdm_init+0x10c>)
    d778:	4a40      	ldr	r2, [pc, #256]	; (d87c <nrfx_pdm_init+0x110>)
    d77a:	23b0      	movs	r3, #176	; 0xb0
    d77c:	f00a fa67 	bl	17c4e <assert_print>
    d780:	483e      	ldr	r0, [pc, #248]	; (d87c <nrfx_pdm_init+0x110>)
    d782:	21b0      	movs	r1, #176	; 0xb0
    d784:	f00a fa5c 	bl	17c40 <assert_post_action>
    NRFX_ASSERT(event_handler);
    d788:	b94e      	cbnz	r6, d79e <nrfx_pdm_init+0x32>
    d78a:	493d      	ldr	r1, [pc, #244]	; (d880 <nrfx_pdm_init+0x114>)
    d78c:	483a      	ldr	r0, [pc, #232]	; (d878 <nrfx_pdm_init+0x10c>)
    d78e:	4a3b      	ldr	r2, [pc, #236]	; (d87c <nrfx_pdm_init+0x110>)
    d790:	23b1      	movs	r3, #177	; 0xb1
    d792:	f00a fa5c 	bl	17c4e <assert_print>
    d796:	4839      	ldr	r0, [pc, #228]	; (d87c <nrfx_pdm_init+0x110>)
    d798:	21b1      	movs	r1, #177	; 0xb1
    d79a:	f00a fa51 	bl	17c40 <assert_post_action>
    nrfx_err_t err_code;

    if (m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    d79e:	4d39      	ldr	r5, [pc, #228]	; (d884 <nrfx_pdm_init+0x118>)
    d7a0:	7c2b      	ldrb	r3, [r5, #16]
    d7a2:	2b00      	cmp	r3, #0
    d7a4:	d162      	bne.n	d86c <nrfx_pdm_init+0x100>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (p_config->gain_l > NRF_PDM_GAIN_MAXIMUM ||
    d7a6:	7a27      	ldrb	r7, [r4, #8]
    d7a8:	2f50      	cmp	r7, #80	; 0x50
    d7aa:	d861      	bhi.n	d870 <nrfx_pdm_init+0x104>
        p_config->gain_r > NRF_PDM_GAIN_MAXIMUM)
    d7ac:	7a60      	ldrb	r0, [r4, #9]
    if (p_config->gain_l > NRF_PDM_GAIN_MAXIMUM ||
    d7ae:	2850      	cmp	r0, #80	; 0x50
    d7b0:	d85e      	bhi.n	d870 <nrfx_pdm_init+0x104>
}

#if NRF_PDM_HAS_RATIO_CONFIG
NRF_STATIC_INLINE void nrf_pdm_ratio_set(NRF_PDM_Type * p_reg, nrf_pdm_ratio_t ratio)
{
    p_reg->RATIO = ratio;
    d7b2:	4a35      	ldr	r2, [pc, #212]	; (d888 <nrfx_pdm_init+0x11c>)
        return err_code;
    }

    m_cb.buff_address[0] = 0;
    m_cb.buff_address[1] = 0;
    m_cb.active_buffer = 0;
    d7b4:	826b      	strh	r3, [r5, #18]
    m_cb.buff_address[1] = 0;
    d7b6:	e9c5 3301 	strd	r3, r3, [r5, #4]
    m_cb.error = 0;
    m_cb.event_handler = event_handler;
    d7ba:	602e      	str	r6, [r5, #0]
    m_cb.op_state = NRFX_PDM_STATE_IDLE;
    d7bc:	746b      	strb	r3, [r5, #17]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    d7be:	7b26      	ldrb	r6, [r4, #12]
    d7c0:	7ae3      	ldrb	r3, [r4, #11]
    d7c2:	756e      	strb	r6, [r5, #21]
    d7c4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
#endif

#if NRF_PDM_HAS_MCLKCONFIG
    nrf_pdm_mclksrc_configure(NRF_PDM0, p_config->mclksrc);
#endif
    nrf_pdm_clock_set(NRF_PDM0, p_config->clock_freq);
    d7c8:	6863      	ldr	r3, [r4, #4]
    p_reg->PDMCLKCTRL = ((pdm_freq << PDM_PDMCLKCTRL_FREQ_Pos) & PDM_PDMCLKCTRL_FREQ_Msk);
    d7ca:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
    d7ce:	7863      	ldrb	r3, [r4, #1]
    p_reg->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
    d7d0:	7821      	ldrb	r1, [r4, #0]
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
    d7d2:	005b      	lsls	r3, r3, #1
    d7d4:	f003 0302 	and.w	r3, r3, #2
    p_reg->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
    d7d8:	f001 0101 	and.w	r1, r1, #1
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
    d7dc:	430b      	orrs	r3, r1
    p_reg->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
    d7de:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->GAINL = gain_l;
    d7e2:	f8c2 7518 	str.w	r7, [r2, #1304]	; 0x518
    p_reg->GAINR = gain_r;
    d7e6:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
    nrf_pdm_mode_set(NRF_PDM0, p_config->mode, p_config->edge);
    nrf_pdm_gain_set(NRF_PDM0, p_config->gain_l, p_config->gain_r);

    if (!p_config->skip_gpio_cfg)
    d7ea:	b9f6      	cbnz	r6, d82a <nrfx_pdm_init+0xbe>
    {
        nrf_gpio_pin_clear(p_config->pin_clk);
    d7ec:	78a3      	ldrb	r3, [r4, #2]
    d7ee:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d7f0:	a801      	add	r0, sp, #4
    d7f2:	f7ff fefb 	bl	d5ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d7f6:	9a01      	ldr	r2, [sp, #4]
    d7f8:	2301      	movs	r3, #1
    d7fa:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    d7fc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        nrf_gpio_cfg_output(p_config->pin_clk);
    d800:	78a3      	ldrb	r3, [r4, #2]
    d802:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d804:	a801      	add	r0, sp, #4
    d806:	f7ff fef1 	bl	d5ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d80a:	9b01      	ldr	r3, [sp, #4]
    d80c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d810:	2203      	movs	r2, #3
    d812:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d816:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_input(p_config->pin_din, NRF_GPIO_PIN_NOPULL);
    d818:	78e3      	ldrb	r3, [r4, #3]
    d81a:	9301      	str	r3, [sp, #4]
    d81c:	f7ff fee6 	bl	d5ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d820:	9b01      	ldr	r3, [sp, #4]
    d822:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d826:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    }
    if (!p_config->skip_psel_cfg)
    d82a:	7b62      	ldrb	r2, [r4, #13]
    d82c:	4b16      	ldr	r3, [pc, #88]	; (d888 <nrfx_pdm_init+0x11c>)
    d82e:	b92a      	cbnz	r2, d83c <nrfx_pdm_init+0xd0>
    {
        nrf_pdm_psel_connect(NRF_PDM0, p_config->pin_clk, p_config->pin_din);
    d830:	78a1      	ldrb	r1, [r4, #2]
    d832:	78e2      	ldrb	r2, [r4, #3]
    p_reg->PSEL.CLK = psel_clk;
    d834:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->PSEL.DIN = psel_din;
    d838:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d83c:	2200      	movs	r2, #0
    d83e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d842:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    d846:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    d84a:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
    d84e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d852:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    d856:	2203      	movs	r2, #3
    d858:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    nrf_pdm_event_clear(NRF_PDM0, NRF_PDM_EVENT_STARTED);
    nrf_pdm_event_clear(NRF_PDM0, NRF_PDM_EVENT_END);
    nrf_pdm_event_clear(NRF_PDM0, NRF_PDM_EVENT_STOPPED);
    nrf_pdm_int_enable(NRF_PDM0, NRF_PDM_INT_STARTED | NRF_PDM_INT_STOPPED);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_PDM0), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_PDM0));
    d85c:	201d      	movs	r0, #29
    d85e:	f7fa fd0f 	bl	8280 <arch_irq_enable>
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
    d862:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    d864:	4809      	ldr	r0, [pc, #36]	; (d88c <nrfx_pdm_init+0x120>)
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
    d866:	742b      	strb	r3, [r5, #16]
}
    d868:	b003      	add	sp, #12
    d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return err_code;
    d86c:	4808      	ldr	r0, [pc, #32]	; (d890 <nrfx_pdm_init+0x124>)
    d86e:	e7fb      	b.n	d868 <nrfx_pdm_init+0xfc>
        return err_code;
    d870:	4808      	ldr	r0, [pc, #32]	; (d894 <nrfx_pdm_init+0x128>)
    d872:	e7f9      	b.n	d868 <nrfx_pdm_init+0xfc>
    d874:	0003d8be 	.word	0x0003d8be
    d878:	0003baf1 	.word	0x0003baf1
    d87c:	0003d883 	.word	0x0003d883
    d880:	0003d6fc 	.word	0x0003d6fc
    d884:	20023924 	.word	0x20023924
    d888:	4001d000 	.word	0x4001d000
    d88c:	0bad0000 	.word	0x0bad0000
    d890:	0bad0005 	.word	0x0bad0005
    d894:	0bad0004 	.word	0x0bad0004

0000d898 <nrfx_pdm_uninit>:

void nrfx_pdm_uninit(void)
{
    d898:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
    d89a:	4c11      	ldr	r4, [pc, #68]	; (d8e0 <nrfx_pdm_uninit+0x48>)
    nrf_pdm_disable(NRF_PDM0);

    if (!m_cb.skip_gpio_cfg)
    d89c:	4d11      	ldr	r5, [pc, #68]	; (d8e4 <nrfx_pdm_uninit+0x4c>)
    d89e:	2300      	movs	r3, #0
    d8a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    d8a4:	7d6b      	ldrb	r3, [r5, #21]
    d8a6:	b9b3      	cbnz	r3, d8d6 <nrfx_pdm_uninit+0x3e>
    return p_reg->PSEL.CLK;
    d8a8:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    nrf_gpio_cfg(
    d8ac:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d8ae:	a801      	add	r0, sp, #4
    d8b0:	f7ff fe9c 	bl	d5ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d8b4:	9b01      	ldr	r3, [sp, #4]
    d8b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d8ba:	2602      	movs	r6, #2
    d8bc:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d8c0:	a801      	add	r0, sp, #4
    return p_reg->PSEL.DIN;
    d8c2:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
    nrf_gpio_cfg(
    d8c6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d8c8:	f7ff fe90 	bl	d5ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d8cc:	9b01      	ldr	r3, [sp, #4]
    d8ce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d8d2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    {
        nrf_gpio_cfg_default(nrf_pdm_clk_pin_get(NRF_PDM0));
        nrf_gpio_cfg_default(nrf_pdm_din_pin_get(NRF_PDM0));
    }

    m_cb.drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    d8d6:	2300      	movs	r3, #0
    d8d8:	742b      	strb	r3, [r5, #16]
    NRFX_LOG_INFO("Uninitialized.");
}
    d8da:	b002      	add	sp, #8
    d8dc:	bd70      	pop	{r4, r5, r6, pc}
    d8de:	bf00      	nop
    d8e0:	4001d000 	.word	0x4001d000
    d8e4:	20023924 	.word	0x20023924

0000d8e8 <nrfx_pdm_start>:
    m_cb.irq_buff_request = 1;
    NRFX_IRQ_PENDING_SET(nrfx_get_irq_number(NRF_PDM0));
}

nrfx_err_t nrfx_pdm_start(void)
{
    d8e8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    d8ea:	4c11      	ldr	r4, [pc, #68]	; (d930 <nrfx_pdm_start+0x48>)
    d8ec:	7c23      	ldrb	r3, [r4, #16]
    d8ee:	b95b      	cbnz	r3, d908 <nrfx_pdm_start+0x20>
    d8f0:	4910      	ldr	r1, [pc, #64]	; (d934 <nrfx_pdm_start+0x4c>)
    d8f2:	4811      	ldr	r0, [pc, #68]	; (d938 <nrfx_pdm_start+0x50>)
    d8f4:	4a11      	ldr	r2, [pc, #68]	; (d93c <nrfx_pdm_start+0x54>)
    d8f6:	f44f 7389 	mov.w	r3, #274	; 0x112
    d8fa:	f00a f9a8 	bl	17c4e <assert_print>
    d8fe:	480f      	ldr	r0, [pc, #60]	; (d93c <nrfx_pdm_start+0x54>)
    d900:	f44f 7189 	mov.w	r1, #274	; 0x112
    d904:	f00a f99c 	bl	17c40 <assert_post_action>
    nrfx_err_t err_code;

    if (m_cb.op_state != NRFX_PDM_STATE_IDLE)
    d908:	7c63      	ldrb	r3, [r4, #17]
    d90a:	b133      	cbz	r3, d91a <nrfx_pdm_start+0x32>
    {
        if (m_cb.op_state == NRFX_PDM_STATE_RUNNING)
    d90c:	7c62      	ldrb	r2, [r4, #17]
        }
        err_code = NRFX_ERROR_BUSY;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    d90e:	480c      	ldr	r0, [pc, #48]	; (d940 <nrfx_pdm_start+0x58>)
    d910:	4b0c      	ldr	r3, [pc, #48]	; (d944 <nrfx_pdm_start+0x5c>)
    d912:	2a01      	cmp	r2, #1
    d914:	bf18      	it	ne
    d916:	4618      	movne	r0, r3
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    d918:	bd10      	pop	{r4, pc}
    m_cb.op_state = NRFX_PDM_STATE_STARTING;
    d91a:	2302      	movs	r3, #2
    d91c:	7463      	strb	r3, [r4, #17]
    m_cb.irq_buff_request = 1;
    d91e:	2301      	movs	r3, #1
    d920:	7523      	strb	r3, [r4, #20]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d922:	4b09      	ldr	r3, [pc, #36]	; (d948 <nrfx_pdm_start+0x60>)
    return err_code;
    d924:	4806      	ldr	r0, [pc, #24]	; (d940 <nrfx_pdm_start+0x58>)
    d926:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    d92a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d92e:	e7f3      	b.n	d918 <nrfx_pdm_start+0x30>
    d930:	20023924 	.word	0x20023924
    d934:	0003d8c7 	.word	0x0003d8c7
    d938:	0003baf1 	.word	0x0003baf1
    d93c:	0003d883 	.word	0x0003d883
    d940:	0bad0000 	.word	0x0bad0000
    d944:	0bad000b 	.word	0x0bad000b
    d948:	e000e100 	.word	0xe000e100

0000d94c <nrfx_pdm_buffer_set>:

nrfx_err_t nrfx_pdm_buffer_set(int16_t * buffer, uint16_t buffer_length)
{
    d94c:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.drv_state == NRFX_DRV_STATE_UNINITIALIZED)
    d94e:	4c20      	ldr	r4, [pc, #128]	; (d9d0 <nrfx_pdm_buffer_set+0x84>)
    d950:	7c23      	ldrb	r3, [r4, #16]
{
    d952:	4606      	mov	r6, r0
    d954:	460d      	mov	r5, r1
    if (m_cb.drv_state == NRFX_DRV_STATE_UNINITIALIZED)
    d956:	2b00      	cmp	r3, #0
    d958:	d033      	beq.n	d9c2 <nrfx_pdm_buffer_set+0x76>
    {
        return NRFX_ERROR_INVALID_STATE;
    }
    if (m_cb.op_state == NRFX_PDM_STATE_STOPPING)
    d95a:	7c63      	ldrb	r3, [r4, #17]
    d95c:	2b03      	cmp	r3, #3
    d95e:	d032      	beq.n	d9c6 <nrfx_pdm_buffer_set+0x7a>
    {
        return NRFX_ERROR_BUSY;
    }
    if ((buffer == NULL) || (buffer_length > NRFX_PDM_MAX_BUFFER_SIZE))
    d960:	2800      	cmp	r0, #0
    d962:	d032      	beq.n	d9ca <nrfx_pdm_buffer_set+0x7e>
    d964:	040b      	lsls	r3, r1, #16
    d966:	d430      	bmi.n	d9ca <nrfx_pdm_buffer_set+0x7e>
    }

    nrfx_err_t err_code = NRFX_SUCCESS;

    // Enter the PDM critical section.
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_PDM0));
    d968:	201d      	movs	r0, #29
    d96a:	f7fa fc99 	bl	82a0 <arch_irq_disable>

    uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
    if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    d96e:	7c62      	ldrb	r2, [r4, #17]
    uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
    d970:	7ca3      	ldrb	r3, [r4, #18]
    if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
    d972:	2a02      	cmp	r2, #2
    d974:	bf1a      	itte	ne
    d976:	43db      	mvnne	r3, r3
    d978:	f003 0301 	andne.w	r3, r3, #1
    {
        next_buffer = 0;
    d97c:	2300      	moveq	r3, #0
    }

    if (m_cb.buff_address[next_buffer])
    d97e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    d982:	6851      	ldr	r1, [r2, #4]
    d984:	b9b9      	cbnz	r1, d9b6 <nrfx_pdm_buffer_set+0x6a>
        err_code = NRFX_ERROR_BUSY;
    }
    else
    {
        m_cb.buff_address[next_buffer] = buffer;
        m_cb.buff_length[next_buffer] = buffer_length;
    d986:	eb04 0343 	add.w	r3, r4, r3, lsl #1
        m_cb.buff_address[next_buffer] = buffer;
    d98a:	6056      	str	r6, [r2, #4]
        m_cb.buff_length[next_buffer] = buffer_length;
    d98c:	819d      	strh	r5, [r3, #12]
    p_reg->SAMPLE.PTR = (uint32_t)p_buffer;
    d98e:	4b11      	ldr	r3, [pc, #68]	; (d9d4 <nrfx_pdm_buffer_set+0x88>)
    d990:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->SAMPLE.MAXCNT = num;
    d994:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
        nrf_pdm_buffer_set(NRF_PDM0, (uint32_t *)buffer, buffer_length);

        if (m_cb.drv_state != NRFX_DRV_STATE_POWERED_ON)
    d998:	7c22      	ldrb	r2, [r4, #16]
    d99a:	2a02      	cmp	r2, #2
    d99c:	d009      	beq.n	d9b2 <nrfx_pdm_buffer_set+0x66>
    m_cb.drv_state = NRFX_DRV_STATE_POWERED_ON;
    d99e:	2202      	movs	r2, #2
    d9a0:	7422      	strb	r2, [r4, #16]
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Enabled << PDM_ENABLE_ENABLE_Pos);
    d9a2:	2201      	movs	r2, #1
    d9a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d9a8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    d9ac:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d9b0:	601a      	str	r2, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
    d9b2:	4c09      	ldr	r4, [pc, #36]	; (d9d8 <nrfx_pdm_buffer_set+0x8c>)
    d9b4:	e000      	b.n	d9b8 <nrfx_pdm_buffer_set+0x6c>
        err_code = NRFX_ERROR_BUSY;
    d9b6:	4c09      	ldr	r4, [pc, #36]	; (d9dc <nrfx_pdm_buffer_set+0x90>)
        {
            pdm_start();
        }
    }

    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_PDM0));
    d9b8:	201d      	movs	r0, #29
    d9ba:	f7fa fc61 	bl	8280 <arch_irq_enable>
    return err_code;
}
    d9be:	4620      	mov	r0, r4
    d9c0:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    d9c2:	4c07      	ldr	r4, [pc, #28]	; (d9e0 <nrfx_pdm_buffer_set+0x94>)
    d9c4:	e7fb      	b.n	d9be <nrfx_pdm_buffer_set+0x72>
        return NRFX_ERROR_BUSY;
    d9c6:	4c05      	ldr	r4, [pc, #20]	; (d9dc <nrfx_pdm_buffer_set+0x90>)
    d9c8:	e7f9      	b.n	d9be <nrfx_pdm_buffer_set+0x72>
        return NRFX_ERROR_INVALID_PARAM;
    d9ca:	4c06      	ldr	r4, [pc, #24]	; (d9e4 <nrfx_pdm_buffer_set+0x98>)
    d9cc:	e7f7      	b.n	d9be <nrfx_pdm_buffer_set+0x72>
    d9ce:	bf00      	nop
    d9d0:	20023924 	.word	0x20023924
    d9d4:	4001d000 	.word	0x4001d000
    d9d8:	0bad0000 	.word	0x0bad0000
    d9dc:	0bad000b 	.word	0x0bad000b
    d9e0:	0bad0005 	.word	0x0bad0005
    d9e4:	0bad0004 	.word	0x0bad0004

0000d9e8 <nrfx_pdm_stop>:

nrfx_err_t nrfx_pdm_stop(void)
{
    d9e8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    d9ea:	4c13      	ldr	r4, [pc, #76]	; (da38 <nrfx_pdm_stop+0x50>)
    d9ec:	7c23      	ldrb	r3, [r4, #16]
    d9ee:	b95b      	cbnz	r3, da08 <nrfx_pdm_stop+0x20>
    d9f0:	4912      	ldr	r1, [pc, #72]	; (da3c <nrfx_pdm_stop+0x54>)
    d9f2:	4813      	ldr	r0, [pc, #76]	; (da40 <nrfx_pdm_stop+0x58>)
    d9f4:	4a13      	ldr	r2, [pc, #76]	; (da44 <nrfx_pdm_stop+0x5c>)
    d9f6:	f240 1361 	movw	r3, #353	; 0x161
    d9fa:	f00a f928 	bl	17c4e <assert_print>
    d9fe:	4811      	ldr	r0, [pc, #68]	; (da44 <nrfx_pdm_stop+0x5c>)
    da00:	f240 1161 	movw	r1, #353	; 0x161
    da04:	f00a f91c 	bl	17c40 <assert_post_action>
    nrfx_err_t err_code;

    if (m_cb.op_state != NRFX_PDM_STATE_RUNNING)
    da08:	7c62      	ldrb	r2, [r4, #17]
    da0a:	2a01      	cmp	r2, #1
    da0c:	b2d3      	uxtb	r3, r2
    da0e:	d00b      	beq.n	da28 <nrfx_pdm_stop+0x40>
    {
        if (m_cb.op_state == NRFX_PDM_STATE_IDLE ||
    da10:	7c63      	ldrb	r3, [r4, #17]
    da12:	b113      	cbz	r3, da1a <nrfx_pdm_stop+0x32>
            m_cb.op_state == NRFX_PDM_STATE_STARTING)
    da14:	7c63      	ldrb	r3, [r4, #17]
        if (m_cb.op_state == NRFX_PDM_STATE_IDLE ||
    da16:	2b02      	cmp	r3, #2
    da18:	d10c      	bne.n	da34 <nrfx_pdm_stop+0x4c>
    p_reg->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
    da1a:	4a0b      	ldr	r2, [pc, #44]	; (da48 <nrfx_pdm_stop+0x60>)
    da1c:	2300      	movs	r3, #0
    da1e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        {
            nrf_pdm_disable(NRF_PDM0);
            m_cb.op_state = NRFX_PDM_STATE_IDLE;
    da22:	7463      	strb	r3, [r4, #17]
    m_cb.op_state = NRFX_PDM_STATE_STOPPING;

    nrf_pdm_task_trigger(NRF_PDM0, NRF_PDM_TASK_STOP);
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    da24:	4809      	ldr	r0, [pc, #36]	; (da4c <nrfx_pdm_stop+0x64>)
}
    da26:	bd10      	pop	{r4, pc}
    m_cb.op_state = NRFX_PDM_STATE_STOPPING;
    da28:	2203      	movs	r2, #3
    da2a:	7462      	strb	r2, [r4, #17]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    da2c:	4a06      	ldr	r2, [pc, #24]	; (da48 <nrfx_pdm_stop+0x60>)
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
    da2e:	7423      	strb	r3, [r4, #16]
    da30:	6053      	str	r3, [r2, #4]
    da32:	e7f7      	b.n	da24 <nrfx_pdm_stop+0x3c>
        return err_code;
    da34:	4806      	ldr	r0, [pc, #24]	; (da50 <nrfx_pdm_stop+0x68>)
    da36:	e7f6      	b.n	da26 <nrfx_pdm_stop+0x3e>
    da38:	20023924 	.word	0x20023924
    da3c:	0003d8c7 	.word	0x0003d8c7
    da40:	0003baf1 	.word	0x0003baf1
    da44:	0003d883 	.word	0x0003d883
    da48:	4001d000 	.word	0x4001d000
    da4c:	0bad0000 	.word	0x0bad0000
    da50:	0bad000b 	.word	0x0bad000b

0000da54 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    da54:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    da56:	4801      	ldr	r0, [pc, #4]	; (da5c <nrfx_ppi_channel_alloc+0x8>)
    da58:	f7fe bf96 	b.w	c988 <nrfx_flag32_alloc>
    da5c:	20000124 	.word	0x20000124

0000da60 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    da60:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    da62:	4c11      	ldr	r4, [pc, #68]	; (daa8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    da64:	4a11      	ldr	r2, [pc, #68]	; (daac <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    da66:	4912      	ldr	r1, [pc, #72]	; (dab0 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    da68:	2303      	movs	r3, #3
    da6a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    da6c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    da6e:	4b11      	ldr	r3, [pc, #68]	; (dab4 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    da70:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    da72:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    da74:	f44f 6380 	mov.w	r3, #1024	; 0x400
    da78:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    da7a:	2300      	movs	r3, #0
    da7c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    da7e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    da80:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    da82:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    da84:	4a0c      	ldr	r2, [pc, #48]	; (dab8 <_DoInit+0x58>)
    da86:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    da88:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    da8a:	2210      	movs	r2, #16
    da8c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    da8e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    da90:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    da92:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    da94:	f00e fad6 	bl	1c044 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    da98:	4908      	ldr	r1, [pc, #32]	; (dabc <_DoInit+0x5c>)
    da9a:	4620      	mov	r0, r4
    da9c:	f00e fad2 	bl	1c044 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    daa0:	2320      	movs	r3, #32
    daa2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    daa4:	bd10      	pop	{r4, pc}
    daa6:	bf00      	nop
    daa8:	2002393c 	.word	0x2002393c
    daac:	0003d8f6 	.word	0x0003d8f6
    dab0:	0003d8ff 	.word	0x0003d8ff
    dab4:	200245ec 	.word	0x200245ec
    dab8:	200245dc 	.word	0x200245dc
    dabc:	0003d903 	.word	0x0003d903

0000dac0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    dac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    dac4:	4f23      	ldr	r7, [pc, #140]	; (db54 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    dac6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    daca:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    dacc:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    dad0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    dad2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    dad4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    dad6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    dad8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    dada:	d834      	bhi.n	db46 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    dadc:	f8d2 a020 	ldr.w	sl, [r2, #32]
    dae0:	ebaa 0905 	sub.w	r9, sl, r5
    dae4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    dae8:	4294      	cmp	r4, r2
    daea:	d811      	bhi.n	db10 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    daec:	f04f 0918 	mov.w	r9, #24
    daf0:	fb06 9309 	mla	r3, r6, r9, r9
    daf4:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    daf6:	4622      	mov	r2, r4
    daf8:	6858      	ldr	r0, [r3, #4]
    dafa:	4641      	mov	r1, r8
    dafc:	4428      	add	r0, r5
    dafe:	f00e f8ef 	bl	1bce0 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    db02:	fb09 7606 	mla	r6, r9, r6, r7
    db06:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    db08:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    db0a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    db0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    db10:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    db12:	429c      	cmp	r4, r3
    db14:	d81b      	bhi.n	db4e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    db16:	fb00 bb0b 	mla	fp, r0, fp, fp
    db1a:	44bb      	add	fp, r7
    db1c:	464a      	mov	r2, r9
    db1e:	f8db 0004 	ldr.w	r0, [fp, #4]
    db22:	442c      	add	r4, r5
    db24:	4428      	add	r0, r5
    db26:	f00e f8db 	bl	1bce0 <memcpy>
      if (NumBytes) {
    db2a:	ebb4 040a 	subs.w	r4, r4, sl
    db2e:	d006      	beq.n	db3e <SEGGER_RTT_WriteSkipNoLock+0x7e>
    db30:	f8db 0004 	ldr.w	r0, [fp, #4]
    db34:	4622      	mov	r2, r4
    db36:	eb08 0109 	add.w	r1, r8, r9
    db3a:	f00e f8d1 	bl	1bce0 <memcpy>
      pRing->WrOff = NumBytes;
    db3e:	2018      	movs	r0, #24
    db40:	fb00 7606 	mla	r6, r0, r6, r7
    db44:	e7e0      	b.n	db08 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    db46:	3b01      	subs	r3, #1
    db48:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    db4a:	42a3      	cmp	r3, r4
    db4c:	d2ce      	bcs.n	daec <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    db4e:	2000      	movs	r0, #0
    db50:	e7dc      	b.n	db0c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    db52:	bf00      	nop
    db54:	2002393c 	.word	0x2002393c

0000db58 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    db58:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    db5a:	4b16      	ldr	r3, [pc, #88]	; (dbb4 <SEGGER_RTT_WriteNoLock+0x5c>)
    db5c:	2418      	movs	r4, #24
    db5e:	fb00 4504 	mla	r5, r0, r4, r4
    db62:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    db64:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    db68:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    db6a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    db6c:	2c01      	cmp	r4, #1
    db6e:	d00e      	beq.n	db8e <SEGGER_RTT_WriteNoLock+0x36>
    db70:	2c02      	cmp	r4, #2
    db72:	d018      	beq.n	dba6 <SEGGER_RTT_WriteNoLock+0x4e>
    db74:	b9e4      	cbnz	r4, dbb0 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    db76:	4628      	mov	r0, r5
    db78:	f00a fe8e 	bl	18898 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    db7c:	4286      	cmp	r6, r0
    db7e:	d804      	bhi.n	db8a <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    db80:	4632      	mov	r2, r6
    db82:	4628      	mov	r0, r5
    db84:	f00a fe91 	bl	188aa <_WriteNoCheck>
    db88:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    db8a:	4620      	mov	r0, r4
    db8c:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    db8e:	4628      	mov	r0, r5
    db90:	f00a fe82 	bl	18898 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    db94:	4286      	cmp	r6, r0
    db96:	4634      	mov	r4, r6
    db98:	bf28      	it	cs
    db9a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    db9c:	4622      	mov	r2, r4
    db9e:	4628      	mov	r0, r5
    dba0:	f00a fe83 	bl	188aa <_WriteNoCheck>
    break;
    dba4:	e7f1      	b.n	db8a <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    dba6:	4628      	mov	r0, r5
}
    dba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    dbac:	f00a be9a 	b.w	188e4 <_WriteBlocking>
  switch (pRing->Flags) {
    dbb0:	2400      	movs	r4, #0
  return Status;
    dbb2:	e7ea      	b.n	db8a <SEGGER_RTT_WriteNoLock+0x32>
    dbb4:	2002393c 	.word	0x2002393c

0000dbb8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    dbb8:	4b03      	ldr	r3, [pc, #12]	; (dbc8 <SEGGER_RTT_HasDataUp+0x10>)
    dbba:	2218      	movs	r2, #24
    dbbc:	fb02 3000 	mla	r0, r2, r0, r3
    dbc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
    dbc2:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    dbc4:	1ac0      	subs	r0, r0, r3
    dbc6:	4770      	bx	lr
    dbc8:	2002393c 	.word	0x2002393c

0000dbcc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    dbcc:	4b0e      	ldr	r3, [pc, #56]	; (dc08 <z_sys_init_run_level+0x3c>)
{
    dbce:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    dbd0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    dbd4:	3001      	adds	r0, #1
    dbd6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    dbda:	42a6      	cmp	r6, r4
    dbdc:	d800      	bhi.n	dbe0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    dbde:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    dbe0:	e9d4 3500 	ldrd	r3, r5, [r4]
    dbe4:	4628      	mov	r0, r5
    dbe6:	4798      	blx	r3
		if (dev != NULL) {
    dbe8:	b165      	cbz	r5, dc04 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    dbea:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    dbec:	b130      	cbz	r0, dbfc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    dbee:	2800      	cmp	r0, #0
    dbf0:	bfb8      	it	lt
    dbf2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    dbf4:	28ff      	cmp	r0, #255	; 0xff
    dbf6:	bfa8      	it	ge
    dbf8:	20ff      	movge	r0, #255	; 0xff
    dbfa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    dbfc:	785a      	ldrb	r2, [r3, #1]
    dbfe:	f042 0201 	orr.w	r2, r2, #1
    dc02:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    dc04:	3408      	adds	r4, #8
    dc06:	e7e8      	b.n	dbda <z_sys_init_run_level+0xe>
    dc08:	0001dad8 	.word	0x0001dad8

0000dc0c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    dc0c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    dc0e:	4605      	mov	r5, r0
    dc10:	b910      	cbnz	r0, dc18 <z_impl_device_get_binding+0xc>
		return NULL;
    dc12:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    dc14:	4620      	mov	r0, r4
    dc16:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    dc18:	7803      	ldrb	r3, [r0, #0]
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d0f9      	beq.n	dc12 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    dc1e:	4c0e      	ldr	r4, [pc, #56]	; (dc58 <z_impl_device_get_binding+0x4c>)
    dc20:	4e0e      	ldr	r6, [pc, #56]	; (dc5c <z_impl_device_get_binding+0x50>)
    dc22:	42b4      	cmp	r4, r6
    dc24:	d108      	bne.n	dc38 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    dc26:	4c0c      	ldr	r4, [pc, #48]	; (dc58 <z_impl_device_get_binding+0x4c>)
    dc28:	42b4      	cmp	r4, r6
    dc2a:	d0f2      	beq.n	dc12 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    dc2c:	4620      	mov	r0, r4
    dc2e:	f00a fe8a 	bl	18946 <z_device_is_ready>
    dc32:	b950      	cbnz	r0, dc4a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    dc34:	3418      	adds	r4, #24
    dc36:	e7f7      	b.n	dc28 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    dc38:	4620      	mov	r0, r4
    dc3a:	f00a fe84 	bl	18946 <z_device_is_ready>
    dc3e:	b110      	cbz	r0, dc46 <z_impl_device_get_binding+0x3a>
    dc40:	6823      	ldr	r3, [r4, #0]
    dc42:	42ab      	cmp	r3, r5
    dc44:	d0e6      	beq.n	dc14 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    dc46:	3418      	adds	r4, #24
    dc48:	e7eb      	b.n	dc22 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    dc4a:	6821      	ldr	r1, [r4, #0]
    dc4c:	4628      	mov	r0, r5
    dc4e:	f7f3 f99f 	bl	f90 <strcmp>
    dc52:	2800      	cmp	r0, #0
    dc54:	d1ee      	bne.n	dc34 <z_impl_device_get_binding+0x28>
    dc56:	e7dd      	b.n	dc14 <z_impl_device_get_binding+0x8>
    dc58:	0001c5dc 	.word	0x0001c5dc
    dc5c:	0001c684 	.word	0x0001c684

0000dc60 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    dc60:	4b01      	ldr	r3, [pc, #4]	; (dc68 <z_impl_z_errno+0x8>)
    dc62:	6898      	ldr	r0, [r3, #8]
}
    dc64:	3060      	adds	r0, #96	; 0x60
    dc66:	4770      	bx	lr
    dc68:	200239e4 	.word	0x200239e4

0000dc6c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    dc6c:	b510      	push	{r4, lr}
    dc6e:	4604      	mov	r4, r0
    dc70:	b086      	sub	sp, #24
	z_impl_log_panic();
    dc72:	f7f9 fbdd 	bl	7430 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    dc76:	4b07      	ldr	r3, [pc, #28]	; (dc94 <k_sys_fatal_error_handler+0x28>)
    dc78:	9305      	str	r3, [sp, #20]
    dc7a:	2302      	movs	r3, #2
    dc7c:	9304      	str	r3, [sp, #16]
    dc7e:	4806      	ldr	r0, [pc, #24]	; (dc98 <k_sys_fatal_error_handler+0x2c>)
    dc80:	2300      	movs	r3, #0
    dc82:	aa04      	add	r2, sp, #16
    dc84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dc88:	f7f9 fe62 	bl	7950 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
    dc8c:	4620      	mov	r0, r4
    dc8e:	f00a fe64 	bl	1895a <arch_system_halt>
    dc92:	bf00      	nop
    dc94:	0003d90a 	.word	0x0003d90a
    dc98:	0001c858 	.word	0x0001c858

0000dc9c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dc9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dca0:	b087      	sub	sp, #28
    dca2:	4604      	mov	r4, r0
    dca4:	af00      	add	r7, sp, #0
    dca6:	460e      	mov	r6, r1
	__asm__ volatile(
    dca8:	f04f 0320 	mov.w	r3, #32
    dcac:	f3ef 8811 	mrs	r8, BASEPRI
    dcb0:	f383 8812 	msr	BASEPRI_MAX, r3
    dcb4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    dcb8:	f002 f9dc 	bl	10074 <z_impl_z_current_get>
    dcbc:	2c04      	cmp	r4, #4
    dcbe:	bf98      	it	ls
    dcc0:	4b32      	ldrls	r3, [pc, #200]	; (dd8c <z_fatal_error+0xf0>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    dcc2:	4933      	ldr	r1, [pc, #204]	; (dd90 <z_fatal_error+0xf4>)
    dcc4:	bf94      	ite	ls
    dcc6:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    dcca:	4b32      	ldrhi	r3, [pc, #200]	; (dd94 <z_fatal_error+0xf8>)
    dccc:	46e9      	mov	r9, sp
    dcce:	b08a      	sub	sp, #40	; 0x28
    dcd0:	466a      	mov	r2, sp
    dcd2:	e9c2 1405 	strd	r1, r4, [r2, #20]
    dcd6:	2103      	movs	r1, #3
    dcd8:	61d3      	str	r3, [r2, #28]
    dcda:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    dcde:	2300      	movs	r3, #0
    dce0:	492d      	ldr	r1, [pc, #180]	; (dd98 <z_fatal_error+0xfc>)
    dce2:	6213      	str	r3, [r2, #32]
    dce4:	4605      	mov	r5, r0
    dce6:	f842 1f10 	str.w	r1, [r2, #16]!
    dcea:	482c      	ldr	r0, [pc, #176]	; (dd9c <z_fatal_error+0x100>)
    dcec:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    dcf0:	f7f9 fe2e 	bl	7950 <z_impl_z_log_msg2_static_create>
    dcf4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    dcf6:	b17e      	cbz	r6, dd18 <z_fatal_error+0x7c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    dcf8:	69f2      	ldr	r2, [r6, #28]
    dcfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
    dcfe:	2300      	movs	r3, #0
    dd00:	b152      	cbz	r2, dd18 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
    dd02:	4a27      	ldr	r2, [pc, #156]	; (dda0 <z_fatal_error+0x104>)
    dd04:	617a      	str	r2, [r7, #20]
    dd06:	2202      	movs	r2, #2
    dd08:	613a      	str	r2, [r7, #16]
    dd0a:	4824      	ldr	r0, [pc, #144]	; (dd9c <z_fatal_error+0x100>)
    dd0c:	f107 0210 	add.w	r2, r7, #16
    dd10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dd14:	f7f9 fe1c 	bl	7950 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    dd18:	b12d      	cbz	r5, dd26 <z_fatal_error+0x8a>
    dd1a:	4628      	mov	r0, r5
    dd1c:	f00a fe4f 	bl	189be <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    dd20:	b108      	cbz	r0, dd26 <z_fatal_error+0x8a>
    dd22:	7803      	ldrb	r3, [r0, #0]
    dd24:	b903      	cbnz	r3, dd28 <z_fatal_error+0x8c>
		thread_name = "unknown";
    dd26:	481f      	ldr	r0, [pc, #124]	; (dda4 <z_fatal_error+0x108>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    dd28:	4b1f      	ldr	r3, [pc, #124]	; (dda8 <z_fatal_error+0x10c>)
    dd2a:	46e9      	mov	r9, sp
    dd2c:	b08a      	sub	sp, #40	; 0x28
    dd2e:	466a      	mov	r2, sp
    dd30:	e9c2 3505 	strd	r3, r5, [r2, #20]
    dd34:	2303      	movs	r3, #3
    dd36:	f882 3020 	strb.w	r3, [r2, #32]
    dd3a:	4b1c      	ldr	r3, [pc, #112]	; (ddac <z_fatal_error+0x110>)
    dd3c:	61d0      	str	r0, [r2, #28]
    dd3e:	f842 3f10 	str.w	r3, [r2, #16]!
    dd42:	4816      	ldr	r0, [pc, #88]	; (dd9c <z_fatal_error+0x100>)
    dd44:	2300      	movs	r3, #0
    dd46:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    dd4a:	f7f9 fe01 	bl	7950 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    dd4e:	4631      	mov	r1, r6
    dd50:	46cd      	mov	sp, r9
    dd52:	4620      	mov	r0, r4
    dd54:	f7ff ff8a 	bl	dc6c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    dd58:	2c04      	cmp	r4, #4
    dd5a:	d10c      	bne.n	dd76 <z_fatal_error+0xda>
    dd5c:	4914      	ldr	r1, [pc, #80]	; (ddb0 <z_fatal_error+0x114>)
    dd5e:	4a15      	ldr	r2, [pc, #84]	; (ddb4 <z_fatal_error+0x118>)
    dd60:	4815      	ldr	r0, [pc, #84]	; (ddb8 <z_fatal_error+0x11c>)
    dd62:	238f      	movs	r3, #143	; 0x8f
    dd64:	f009 ff73 	bl	17c4e <assert_print>
    dd68:	4814      	ldr	r0, [pc, #80]	; (ddbc <z_fatal_error+0x120>)
    dd6a:	f009 ff70 	bl	17c4e <assert_print>
    dd6e:	4811      	ldr	r0, [pc, #68]	; (ddb4 <z_fatal_error+0x118>)
    dd70:	218f      	movs	r1, #143	; 0x8f
    dd72:	f009 ff65 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    dd76:	f388 8811 	msr	BASEPRI, r8
    dd7a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    dd7e:	4628      	mov	r0, r5
    dd80:	f7fb f820 	bl	8dc4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    dd84:	371c      	adds	r7, #28
    dd86:	46bd      	mov	sp, r7
    dd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dd8c:	0001daf0 	.word	0x0001daf0
    dd90:	0003d92f 	.word	0x0003d92f
    dd94:	0003d919 	.word	0x0003d919
    dd98:	01000005 	.word	0x01000005
    dd9c:	0001c858 	.word	0x0001c858
    dda0:	0003d957 	.word	0x0003d957
    dda4:	0003d927 	.word	0x0003d927
    dda8:	0003d978 	.word	0x0003d978
    ddac:	01000004 	.word	0x01000004
    ddb0:	0003d9b2 	.word	0x0003d9b2
    ddb4:	0003d990 	.word	0x0003d990
    ddb8:	0003baf1 	.word	0x0003baf1
    ddbc:	0003d9cf 	.word	0x0003d9cf

0000ddc0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    ddc0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    ddc2:	4b0b      	ldr	r3, [pc, #44]	; (ddf0 <bg_thread_main+0x30>)
    ddc4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ddc6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    ddc8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ddca:	f7ff feff 	bl	dbcc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    ddce:	f002 fe9f 	bl	10b10 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    ddd2:	f00a f87a 	bl	17eca <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    ddd6:	2003      	movs	r0, #3
    ddd8:	f7ff fef8 	bl	dbcc <z_sys_init_run_level>

	z_init_static_threads();
    dddc:	f000 fa7c 	bl	e2d8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    dde0:	f7f7 fce2 	bl	57a8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    dde4:	4a03      	ldr	r2, [pc, #12]	; (ddf4 <bg_thread_main+0x34>)
    dde6:	7b13      	ldrb	r3, [r2, #12]
    dde8:	f023 0301 	bic.w	r3, r3, #1
    ddec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ddee:	bd08      	pop	{r3, pc}
    ddf0:	200249ec 	.word	0x200249ec
    ddf4:	20000d88 	.word	0x20000d88

0000ddf8 <z_bss_zero>:
{
    ddf8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    ddfa:	4803      	ldr	r0, [pc, #12]	; (de08 <z_bss_zero+0x10>)
    ddfc:	4a03      	ldr	r2, [pc, #12]	; (de0c <z_bss_zero+0x14>)
    ddfe:	2100      	movs	r1, #0
    de00:	1a12      	subs	r2, r2, r0
    de02:	f00a fdb3 	bl	1896c <z_early_memset>
}
    de06:	bd08      	pop	{r3, pc}
    de08:	200006a0 	.word	0x200006a0
    de0c:	20024df0 	.word	0x20024df0

0000de10 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    de10:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    de12:	4e16      	ldr	r6, [pc, #88]	; (de6c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    de14:	4d16      	ldr	r5, [pc, #88]	; (de70 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    de16:	4917      	ldr	r1, [pc, #92]	; (de74 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
    de18:	23c0      	movs	r3, #192	; 0xc0
{
    de1a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    de1c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    de20:	2201      	movs	r2, #1
    de22:	2300      	movs	r3, #0
    de24:	e9cd 2304 	strd	r2, r3, [sp, #16]
    de28:	220f      	movs	r2, #15
    de2a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    de2e:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    de30:	2318      	movs	r3, #24
    de32:	fb03 5500 	mla	r5, r3, r0, r5
{
    de36:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    de38:	f44f 70c0 	mov.w	r0, #384	; 0x180
    de3c:	fb00 1104 	mla	r1, r0, r4, r1
    de40:	4b0d      	ldr	r3, [pc, #52]	; (de78 <z_init_cpu+0x68>)
    de42:	9500      	str	r5, [sp, #0]
    de44:	f44f 72a0 	mov.w	r2, #320	; 0x140
    de48:	4630      	mov	r0, r6
    de4a:	f000 f991 	bl	e170 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    de4e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    de50:	480a      	ldr	r0, [pc, #40]	; (de7c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    de52:	752c      	strb	r4, [r5, #20]
    de54:	f023 0304 	bic.w	r3, r3, #4
    de58:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    de5a:	f44f 6308 	mov.w	r3, #2176	; 0x880
    de5e:	fb03 0404 	mla	r4, r3, r4, r0
    de62:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    de64:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    de66:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    de68:	b006      	add	sp, #24
    de6a:	bd70      	pop	{r4, r5, r6, pc}
    de6c:	20000cc8 	.word	0x20000cc8
    de70:	200239e4 	.word	0x200239e4
    de74:	20026a80 	.word	0x20026a80
    de78:	0000e435 	.word	0x0000e435
    de7c:	20026c00 	.word	0x20026c00

0000de80 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    de80:	b500      	push	{lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    de82:	4b2f      	ldr	r3, [pc, #188]	; (df40 <z_cstart+0xc0>)
    de84:	b0b9      	sub	sp, #228	; 0xe4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    de86:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    de8a:	4d2e      	ldr	r5, [pc, #184]	; (df44 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    de8c:	4e2e      	ldr	r6, [pc, #184]	; (df48 <z_cstart+0xc8>)
    de8e:	696b      	ldr	r3, [r5, #20]
    de90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    de94:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    de96:	2400      	movs	r4, #0
    de98:	23e0      	movs	r3, #224	; 0xe0
    de9a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    de9e:	77ec      	strb	r4, [r5, #31]
    dea0:	762c      	strb	r4, [r5, #24]
    dea2:	766c      	strb	r4, [r5, #25]
    dea4:	76ac      	strb	r4, [r5, #26]
    dea6:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    deaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    deac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    deb0:	626b      	str	r3, [r5, #36]	; 0x24
    deb2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    deb6:	f7fa fef9 	bl	8cac <z_arm_fault_init>
	z_arm_cpu_idle_init();
    deba:	f7fa f911 	bl	80e0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    debe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dec2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    dec4:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    dec6:	ad08      	add	r5, sp, #32
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    dec8:	f7fb f88a 	bl	8fe0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    decc:	f7fa ff90 	bl	8df0 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    ded0:	f7f9 f99e 	bl	7210 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    ded4:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    ded8:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    deda:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	dummy_thread->stack_info.size = 0U;
    dede:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	k_thread_system_pool_assign(dummy_thread);
    dee2:	f002 fe0f 	bl	10b04 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    dee6:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    dee8:	f00a fd2c 	bl	18944 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    deec:	4620      	mov	r0, r4
	_kernel.ready_q.cache = &z_main_thread;
    deee:	4d17      	ldr	r5, [pc, #92]	; (df4c <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    def0:	f7ff fe6c 	bl	dbcc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    def4:	2001      	movs	r0, #1
    def6:	f7ff fe69 	bl	dbcc <z_sys_init_run_level>
	z_sched_init();
    defa:	f001 ff2d 	bl	fd58 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    defe:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    df00:	4b13      	ldr	r3, [pc, #76]	; (df50 <z_cstart+0xd0>)
    df02:	4e14      	ldr	r6, [pc, #80]	; (df54 <z_cstart+0xd4>)
    df04:	9305      	str	r3, [sp, #20]
    df06:	2301      	movs	r3, #1
    df08:	4913      	ldr	r1, [pc, #76]	; (df58 <z_cstart+0xd8>)
    df0a:	9400      	str	r4, [sp, #0]
    df0c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    df10:	f44f 6200 	mov.w	r2, #2048	; 0x800
    df14:	4633      	mov	r3, r6
    df16:	e9cd 4401 	strd	r4, r4, [sp, #4]
    df1a:	4628      	mov	r0, r5
    df1c:	f000 f928 	bl	e170 <z_setup_new_thread>
    df20:	7b6a      	ldrb	r2, [r5, #13]
    df22:	9007      	str	r0, [sp, #28]
    df24:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    df28:	4628      	mov	r0, r5
    df2a:	736a      	strb	r2, [r5, #13]
    df2c:	f001 fb18 	bl	f560 <z_ready_thread>
	z_init_cpu(0);
    df30:	4620      	mov	r0, r4
    df32:	f7ff ff6d 	bl	de10 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    df36:	9907      	ldr	r1, [sp, #28]
    df38:	4632      	mov	r2, r6
    df3a:	4628      	mov	r0, r5
    df3c:	f7fa fb30 	bl	85a0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    df40:	20027480 	.word	0x20027480
    df44:	e000ed00 	.word	0xe000ed00
    df48:	200239e4 	.word	0x200239e4
    df4c:	20000d88 	.word	0x20000d88
    df50:	0003da4e 	.word	0x0003da4e
    df54:	0000ddc1 	.word	0x0000ddc1
    df58:	20026200 	.word	0x20026200

0000df5c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    df5e:	4c16      	ldr	r4, [pc, #88]	; (dfb8 <init_mem_slab_module+0x5c>)
    df60:	4d16      	ldr	r5, [pc, #88]	; (dfbc <init_mem_slab_module+0x60>)
    df62:	4e17      	ldr	r6, [pc, #92]	; (dfc0 <init_mem_slab_module+0x64>)
    df64:	42ac      	cmp	r4, r5
    df66:	d90c      	bls.n	df82 <init_mem_slab_module+0x26>
    df68:	4916      	ldr	r1, [pc, #88]	; (dfc4 <init_mem_slab_module+0x68>)
    df6a:	4817      	ldr	r0, [pc, #92]	; (dfc8 <init_mem_slab_module+0x6c>)
    df6c:	233d      	movs	r3, #61	; 0x3d
    df6e:	4632      	mov	r2, r6
    df70:	f009 fe6d 	bl	17c4e <assert_print>
    df74:	4815      	ldr	r0, [pc, #84]	; (dfcc <init_mem_slab_module+0x70>)
    df76:	f009 fe6a 	bl	17c4e <assert_print>
    df7a:	213d      	movs	r1, #61	; 0x3d
    df7c:	4630      	mov	r0, r6
    df7e:	f009 fe5f 	bl	17c40 <assert_post_action>
    df82:	42ac      	cmp	r4, r5
    df84:	d301      	bcc.n	df8a <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    df86:	2000      	movs	r0, #0
	return rc;
}
    df88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    df8a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    df8e:	ea41 0302 	orr.w	r3, r1, r2
    df92:	f013 0303 	ands.w	r3, r3, #3
    df96:	d10b      	bne.n	dfb0 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    df98:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    df9a:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    df9c:	4283      	cmp	r3, r0
    df9e:	d101      	bne.n	dfa4 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    dfa0:	3420      	adds	r4, #32
    dfa2:	e7df      	b.n	df64 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    dfa4:	69a7      	ldr	r7, [r4, #24]
    dfa6:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    dfa8:	3301      	adds	r3, #1
		slab->free_list = p;
    dfaa:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    dfac:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    dfae:	e7f5      	b.n	df9c <init_mem_slab_module+0x40>
	return rc;
    dfb0:	f06f 0015 	mvn.w	r0, #21
    dfb4:	e7e8      	b.n	df88 <init_mem_slab_module+0x2c>
    dfb6:	bf00      	nop
    dfb8:	200005a8 	.word	0x200005a8
    dfbc:	200005c8 	.word	0x200005c8
    dfc0:	0003da56 	.word	0x0003da56
    dfc4:	0003da7b 	.word	0x0003da7b
    dfc8:	0003baf1 	.word	0x0003baf1
    dfcc:	0003da98 	.word	0x0003da98

0000dfd0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    dfd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dfd4:	4604      	mov	r4, r0
    dfd6:	460e      	mov	r6, r1
    dfd8:	4690      	mov	r8, r2
    dfda:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    dfdc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    dfe0:	f04f 0320 	mov.w	r3, #32
    dfe4:	f3ef 8911 	mrs	r9, BASEPRI
    dfe8:	f383 8812 	msr	BASEPRI_MAX, r3
    dfec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dff0:	4628      	mov	r0, r5
    dff2:	f000 f9f9 	bl	e3e8 <z_spin_lock_valid>
    dff6:	b968      	cbnz	r0, e014 <k_mem_slab_alloc+0x44>
    dff8:	4a24      	ldr	r2, [pc, #144]	; (e08c <k_mem_slab_alloc+0xbc>)
    dffa:	4925      	ldr	r1, [pc, #148]	; (e090 <k_mem_slab_alloc+0xc0>)
    dffc:	4825      	ldr	r0, [pc, #148]	; (e094 <k_mem_slab_alloc+0xc4>)
    dffe:	238e      	movs	r3, #142	; 0x8e
    e000:	f009 fe25 	bl	17c4e <assert_print>
    e004:	4824      	ldr	r0, [pc, #144]	; (e098 <k_mem_slab_alloc+0xc8>)
    e006:	4629      	mov	r1, r5
    e008:	f009 fe21 	bl	17c4e <assert_print>
    e00c:	481f      	ldr	r0, [pc, #124]	; (e08c <k_mem_slab_alloc+0xbc>)
    e00e:	218e      	movs	r1, #142	; 0x8e
    e010:	f009 fe16 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    e014:	4628      	mov	r0, r5
    e016:	f000 fa05 	bl	e424 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    e01a:	69a3      	ldr	r3, [r4, #24]
    e01c:	b1eb      	cbz	r3, e05a <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    e01e:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    e020:	681b      	ldr	r3, [r3, #0]
    e022:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    e024:	69e3      	ldr	r3, [r4, #28]
    e026:	3301      	adds	r3, #1
    e028:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    e02a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e02c:	4628      	mov	r0, r5
    e02e:	f000 f9e9 	bl	e404 <z_spin_unlock_valid>
    e032:	b968      	cbnz	r0, e050 <k_mem_slab_alloc+0x80>
    e034:	4a15      	ldr	r2, [pc, #84]	; (e08c <k_mem_slab_alloc+0xbc>)
    e036:	4919      	ldr	r1, [pc, #100]	; (e09c <k_mem_slab_alloc+0xcc>)
    e038:	4816      	ldr	r0, [pc, #88]	; (e094 <k_mem_slab_alloc+0xc4>)
    e03a:	23b9      	movs	r3, #185	; 0xb9
    e03c:	f009 fe07 	bl	17c4e <assert_print>
    e040:	4817      	ldr	r0, [pc, #92]	; (e0a0 <k_mem_slab_alloc+0xd0>)
    e042:	4629      	mov	r1, r5
    e044:	f009 fe03 	bl	17c4e <assert_print>
    e048:	4810      	ldr	r0, [pc, #64]	; (e08c <k_mem_slab_alloc+0xbc>)
    e04a:	21b9      	movs	r1, #185	; 0xb9
    e04c:	f009 fdf8 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    e050:	f389 8811 	msr	BASEPRI, r9
    e054:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    e058:	e013      	b.n	e082 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    e05a:	ea58 0207 	orrs.w	r2, r8, r7
    e05e:	d103      	bne.n	e068 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    e060:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    e062:	f06f 040b 	mvn.w	r4, #11
    e066:	e7e1      	b.n	e02c <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    e068:	4622      	mov	r2, r4
    e06a:	e9cd 8700 	strd	r8, r7, [sp]
    e06e:	4649      	mov	r1, r9
    e070:	4628      	mov	r0, r5
    e072:	f001 fc27 	bl	f8c4 <z_pend_curr>
		if (result == 0) {
    e076:	4604      	mov	r4, r0
    e078:	b918      	cbnz	r0, e082 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    e07a:	4b0a      	ldr	r3, [pc, #40]	; (e0a4 <k_mem_slab_alloc+0xd4>)
    e07c:	689b      	ldr	r3, [r3, #8]
    e07e:	695b      	ldr	r3, [r3, #20]
    e080:	6033      	str	r3, [r6, #0]
}
    e082:	4620      	mov	r0, r4
    e084:	b003      	add	sp, #12
    e086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e08a:	bf00      	nop
    e08c:	0003bd42 	.word	0x0003bd42
    e090:	0003bd9b 	.word	0x0003bd9b
    e094:	0003baf1 	.word	0x0003baf1
    e098:	0003bdb0 	.word	0x0003bdb0
    e09c:	0003bd6f 	.word	0x0003bd6f
    e0a0:	0003bd86 	.word	0x0003bd86
    e0a4:	200239e4 	.word	0x200239e4

0000e0a8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    e0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0ac:	4604      	mov	r4, r0
    e0ae:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    e0b0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    e0b4:	f04f 0320 	mov.w	r3, #32
    e0b8:	f3ef 8711 	mrs	r7, BASEPRI
    e0bc:	f383 8812 	msr	BASEPRI_MAX, r3
    e0c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e0c4:	4628      	mov	r0, r5
    e0c6:	f000 f98f 	bl	e3e8 <z_spin_lock_valid>
    e0ca:	b968      	cbnz	r0, e0e8 <k_mem_slab_free+0x40>
    e0cc:	4a22      	ldr	r2, [pc, #136]	; (e158 <k_mem_slab_free+0xb0>)
    e0ce:	4923      	ldr	r1, [pc, #140]	; (e15c <k_mem_slab_free+0xb4>)
    e0d0:	4823      	ldr	r0, [pc, #140]	; (e160 <k_mem_slab_free+0xb8>)
    e0d2:	238e      	movs	r3, #142	; 0x8e
    e0d4:	f009 fdbb 	bl	17c4e <assert_print>
    e0d8:	4822      	ldr	r0, [pc, #136]	; (e164 <k_mem_slab_free+0xbc>)
    e0da:	4629      	mov	r1, r5
    e0dc:	f009 fdb7 	bl	17c4e <assert_print>
    e0e0:	481d      	ldr	r0, [pc, #116]	; (e158 <k_mem_slab_free+0xb0>)
    e0e2:	218e      	movs	r1, #142	; 0x8e
    e0e4:	f009 fdac 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    e0e8:	4628      	mov	r0, r5
    e0ea:	f000 f99b 	bl	e424 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    e0ee:	f8d4 8018 	ldr.w	r8, [r4, #24]
    e0f2:	f1b8 0f00 	cmp.w	r8, #0
    e0f6:	d10f      	bne.n	e118 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    e0f8:	4620      	mov	r0, r4
    e0fa:	f001 fddd 	bl	fcb8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    e0fe:	b158      	cbz	r0, e118 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    e100:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    e102:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    e104:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    e108:	f001 fa2a 	bl	f560 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    e10c:	4639      	mov	r1, r7
    e10e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    e110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    e114:	f000 bfd8 	b.w	f0c8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    e118:	6833      	ldr	r3, [r6, #0]
    e11a:	69a2      	ldr	r2, [r4, #24]
    e11c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    e11e:	6833      	ldr	r3, [r6, #0]
    e120:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    e122:	69e3      	ldr	r3, [r4, #28]
    e124:	3b01      	subs	r3, #1
    e126:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e128:	4628      	mov	r0, r5
    e12a:	f000 f96b 	bl	e404 <z_spin_unlock_valid>
    e12e:	b968      	cbnz	r0, e14c <k_mem_slab_free+0xa4>
    e130:	4a09      	ldr	r2, [pc, #36]	; (e158 <k_mem_slab_free+0xb0>)
    e132:	490d      	ldr	r1, [pc, #52]	; (e168 <k_mem_slab_free+0xc0>)
    e134:	480a      	ldr	r0, [pc, #40]	; (e160 <k_mem_slab_free+0xb8>)
    e136:	23b9      	movs	r3, #185	; 0xb9
    e138:	f009 fd89 	bl	17c4e <assert_print>
    e13c:	480b      	ldr	r0, [pc, #44]	; (e16c <k_mem_slab_free+0xc4>)
    e13e:	4629      	mov	r1, r5
    e140:	f009 fd85 	bl	17c4e <assert_print>
    e144:	4804      	ldr	r0, [pc, #16]	; (e158 <k_mem_slab_free+0xb0>)
    e146:	21b9      	movs	r1, #185	; 0xb9
    e148:	f009 fd7a 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    e14c:	f387 8811 	msr	BASEPRI, r7
    e150:	f3bf 8f6f 	isb	sy
}
    e154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e158:	0003bd42 	.word	0x0003bd42
    e15c:	0003bd9b 	.word	0x0003bd9b
    e160:	0003baf1 	.word	0x0003baf1
    e164:	0003bdb0 	.word	0x0003bdb0
    e168:	0003bd6f 	.word	0x0003bd6f
    e16c:	0003bd86 	.word	0x0003bd86

0000e170 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    e170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e174:	b085      	sub	sp, #20
    e176:	4604      	mov	r4, r0
    e178:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    e17c:	f1b8 0f0f 	cmp.w	r8, #15
{
    e180:	460f      	mov	r7, r1
    e182:	4615      	mov	r5, r2
    e184:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    e186:	d132      	bne.n	e1ee <z_setup_new_thread+0x7e>
    e188:	4b25      	ldr	r3, [pc, #148]	; (e220 <z_setup_new_thread+0xb0>)
    e18a:	4599      	cmp	r9, r3
    e18c:	d133      	bne.n	e1f6 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    e18e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    e192:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    e196:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e198:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e19a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    e19c:	2304      	movs	r3, #4
    e19e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e1a0:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    e1a4:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    e1a8:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e1ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    e1ae:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e1b2:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e1b4:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e1b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e1ba:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    e1bc:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e1be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e1c0:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    e1c2:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e1c4:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    e1c6:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    e1ca:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    e1cc:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    e1ce:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e1d0:	4642      	mov	r2, r8
    e1d2:	4639      	mov	r1, r7
    e1d4:	4620      	mov	r0, r4
    e1d6:	f7fa f95d 	bl	8494 <arch_new_thread>
	if (!_current) {
    e1da:	4b12      	ldr	r3, [pc, #72]	; (e224 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    e1dc:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    e1de:	689b      	ldr	r3, [r3, #8]
    e1e0:	b103      	cbz	r3, e1e4 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    e1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    e1e4:	6723      	str	r3, [r4, #112]	; 0x70
}
    e1e6:	4640      	mov	r0, r8
    e1e8:	b005      	add	sp, #20
    e1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    e1ee:	f108 0310 	add.w	r3, r8, #16
    e1f2:	2b1e      	cmp	r3, #30
    e1f4:	d9cb      	bls.n	e18e <z_setup_new_thread+0x1e>
    e1f6:	4a0c      	ldr	r2, [pc, #48]	; (e228 <z_setup_new_thread+0xb8>)
    e1f8:	490c      	ldr	r1, [pc, #48]	; (e22c <z_setup_new_thread+0xbc>)
    e1fa:	480d      	ldr	r0, [pc, #52]	; (e230 <z_setup_new_thread+0xc0>)
    e1fc:	f240 13ff 	movw	r3, #511	; 0x1ff
    e200:	f009 fd25 	bl	17c4e <assert_print>
    e204:	4641      	mov	r1, r8
    e206:	480b      	ldr	r0, [pc, #44]	; (e234 <z_setup_new_thread+0xc4>)
    e208:	f06f 030f 	mvn.w	r3, #15
    e20c:	220e      	movs	r2, #14
    e20e:	f009 fd1e 	bl	17c4e <assert_print>
    e212:	4805      	ldr	r0, [pc, #20]	; (e228 <z_setup_new_thread+0xb8>)
    e214:	f240 11ff 	movw	r1, #511	; 0x1ff
    e218:	f009 fd12 	bl	17c40 <assert_post_action>
    e21c:	e7b7      	b.n	e18e <z_setup_new_thread+0x1e>
    e21e:	bf00      	nop
    e220:	0000e435 	.word	0x0000e435
    e224:	200239e4 	.word	0x200239e4
    e228:	0003dab7 	.word	0x0003dab7
    e22c:	0003dada 	.word	0x0003dada
    e230:	0003baf1 	.word	0x0003baf1
    e234:	0003db5a 	.word	0x0003db5a

0000e238 <z_impl_k_thread_create>:
{
    e238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e23c:	b087      	sub	sp, #28
    e23e:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    e242:	4604      	mov	r4, r0
    e244:	460f      	mov	r7, r1
    e246:	4690      	mov	r8, r2
    e248:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e24a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    e24e:	b173      	cbz	r3, e26e <z_impl_k_thread_create+0x36>
    e250:	491c      	ldr	r1, [pc, #112]	; (e2c4 <z_impl_k_thread_create+0x8c>)
    e252:	4a1d      	ldr	r2, [pc, #116]	; (e2c8 <z_impl_k_thread_create+0x90>)
    e254:	481d      	ldr	r0, [pc, #116]	; (e2cc <z_impl_k_thread_create+0x94>)
    e256:	f240 236e 	movw	r3, #622	; 0x26e
    e25a:	f009 fcf8 	bl	17c4e <assert_print>
    e25e:	481c      	ldr	r0, [pc, #112]	; (e2d0 <z_impl_k_thread_create+0x98>)
    e260:	f009 fcf5 	bl	17c4e <assert_print>
    e264:	4818      	ldr	r0, [pc, #96]	; (e2c8 <z_impl_k_thread_create+0x90>)
    e266:	f240 216e 	movw	r1, #622	; 0x26e
    e26a:	f009 fce9 	bl	17c40 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    e26e:	2300      	movs	r3, #0
    e270:	9305      	str	r3, [sp, #20]
    e272:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e274:	9304      	str	r3, [sp, #16]
    e276:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e278:	9303      	str	r3, [sp, #12]
    e27a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e27c:	9302      	str	r3, [sp, #8]
    e27e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e280:	9301      	str	r3, [sp, #4]
    e282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e284:	9300      	str	r3, [sp, #0]
    e286:	4642      	mov	r2, r8
    e288:	464b      	mov	r3, r9
    e28a:	4639      	mov	r1, r7
    e28c:	4620      	mov	r0, r4
    e28e:	f7ff ff6f 	bl	e170 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    e292:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    e296:	bf08      	it	eq
    e298:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    e29c:	d005      	beq.n	e2aa <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    e29e:	ea55 0306 	orrs.w	r3, r5, r6
    e2a2:	d106      	bne.n	e2b2 <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    e2a4:	4620      	mov	r0, r4
    e2a6:	f001 f9a3 	bl	f5f0 <z_sched_start>
}
    e2aa:	4620      	mov	r0, r4
    e2ac:	b007      	add	sp, #28
    e2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    e2b2:	4908      	ldr	r1, [pc, #32]	; (e2d4 <z_impl_k_thread_create+0x9c>)
    e2b4:	4632      	mov	r2, r6
    e2b6:	462b      	mov	r3, r5
    e2b8:	f104 0018 	add.w	r0, r4, #24
    e2bc:	f002 f862 	bl	10384 <z_add_timeout>
    e2c0:	e7f3      	b.n	e2aa <z_impl_k_thread_create+0x72>
    e2c2:	bf00      	nop
    e2c4:	0003db8b 	.word	0x0003db8b
    e2c8:	0003dab7 	.word	0x0003dab7
    e2cc:	0003baf1 	.word	0x0003baf1
    e2d0:	0003db9d 	.word	0x0003db9d
    e2d4:	0000f699 	.word	0x0000f699

0000e2d8 <z_init_static_threads>:
{
    e2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e2dc:	4c3b      	ldr	r4, [pc, #236]	; (e3cc <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    e2de:	4d3c      	ldr	r5, [pc, #240]	; (e3d0 <z_init_static_threads+0xf8>)
    e2e0:	4f3c      	ldr	r7, [pc, #240]	; (e3d4 <z_init_static_threads+0xfc>)
{
    e2e2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    e2e4:	42ac      	cmp	r4, r5
    e2e6:	4626      	mov	r6, r4
    e2e8:	d90e      	bls.n	e308 <z_init_static_threads+0x30>
    e2ea:	493b      	ldr	r1, [pc, #236]	; (e3d8 <z_init_static_threads+0x100>)
    e2ec:	483b      	ldr	r0, [pc, #236]	; (e3dc <z_init_static_threads+0x104>)
    e2ee:	f240 23d5 	movw	r3, #725	; 0x2d5
    e2f2:	463a      	mov	r2, r7
    e2f4:	f009 fcab 	bl	17c4e <assert_print>
    e2f8:	4839      	ldr	r0, [pc, #228]	; (e3e0 <z_init_static_threads+0x108>)
    e2fa:	f009 fca8 	bl	17c4e <assert_print>
    e2fe:	f240 21d5 	movw	r1, #725	; 0x2d5
    e302:	4638      	mov	r0, r7
    e304:	f009 fc9c 	bl	17c40 <assert_post_action>
    e308:	42ae      	cmp	r6, r5
    e30a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    e30e:	d31f      	bcc.n	e350 <z_init_static_threads+0x78>
	k_sched_lock();
    e310:	f000 ff1e 	bl	f150 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    e314:	4c2d      	ldr	r4, [pc, #180]	; (e3cc <z_init_static_threads+0xf4>)
    e316:	4e2f      	ldr	r6, [pc, #188]	; (e3d4 <z_init_static_threads+0xfc>)
    e318:	f8df 80bc 	ldr.w	r8, [pc, #188]	; e3d8 <z_init_static_threads+0x100>
    e31c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; e3dc <z_init_static_threads+0x104>
    e320:	42ac      	cmp	r4, r5
    e322:	d90e      	bls.n	e342 <z_init_static_threads+0x6a>
    e324:	4641      	mov	r1, r8
    e326:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    e32a:	4632      	mov	r2, r6
    e32c:	4648      	mov	r0, r9
    e32e:	f009 fc8e 	bl	17c4e <assert_print>
    e332:	482b      	ldr	r0, [pc, #172]	; (e3e0 <z_init_static_threads+0x108>)
    e334:	f009 fc8b 	bl	17c4e <assert_print>
    e338:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    e33c:	4630      	mov	r0, r6
    e33e:	f009 fc7f 	bl	17c40 <assert_post_action>
    e342:	42ac      	cmp	r4, r5
    e344:	d320      	bcc.n	e388 <z_init_static_threads+0xb0>
}
    e346:	b007      	add	sp, #28
    e348:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    e34c:	f001 bbec 	b.w	fb28 <k_sched_unlock>
		z_setup_new_thread(
    e350:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e354:	9305      	str	r3, [sp, #20]
    e356:	f854 3c10 	ldr.w	r3, [r4, #-16]
    e35a:	9304      	str	r3, [sp, #16]
    e35c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    e360:	9303      	str	r3, [sp, #12]
    e362:	f854 3c18 	ldr.w	r3, [r4, #-24]
    e366:	9302      	str	r3, [sp, #8]
    e368:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    e36c:	9301      	str	r3, [sp, #4]
    e36e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    e372:	9300      	str	r3, [sp, #0]
    e374:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    e378:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    e37c:	f7ff fef8 	bl	e170 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    e380:	f854 3c30 	ldr.w	r3, [r4, #-48]
    e384:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    e386:	e7ad      	b.n	e2e4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    e388:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e38a:	1c5a      	adds	r2, r3, #1
    e38c:	d00f      	beq.n	e3ae <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    e38e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e392:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e396:	f240 30e7 	movw	r0, #999	; 0x3e7
    e39a:	2100      	movs	r1, #0
    e39c:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    e3a0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    e3a4:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    e3a6:	d104      	bne.n	e3b2 <z_init_static_threads+0xda>
	z_sched_start(thread);
    e3a8:	4638      	mov	r0, r7
    e3aa:	f001 f921 	bl	f5f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    e3ae:	3430      	adds	r4, #48	; 0x30
    e3b0:	e7b6      	b.n	e320 <z_init_static_threads+0x48>
    e3b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e3b6:	2300      	movs	r3, #0
    e3b8:	f7f2 fbe8 	bl	b8c <__aeabi_uldivmod>
    e3bc:	4602      	mov	r2, r0
    e3be:	460b      	mov	r3, r1
    e3c0:	f107 0018 	add.w	r0, r7, #24
    e3c4:	4907      	ldr	r1, [pc, #28]	; (e3e4 <z_init_static_threads+0x10c>)
    e3c6:	f001 ffdd 	bl	10384 <z_add_timeout>
    e3ca:	e7f0      	b.n	e3ae <z_init_static_threads+0xd6>
    e3cc:	200005a8 	.word	0x200005a8
    e3d0:	200005a8 	.word	0x200005a8
    e3d4:	0003dab7 	.word	0x0003dab7
    e3d8:	0003dbc2 	.word	0x0003dbc2
    e3dc:	0003baf1 	.word	0x0003baf1
    e3e0:	0003da98 	.word	0x0003da98
    e3e4:	0000f699 	.word	0x0000f699

0000e3e8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    e3e8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    e3ea:	b138      	cbz	r0, e3fc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    e3ec:	4b04      	ldr	r3, [pc, #16]	; (e400 <z_spin_lock_valid+0x18>)
    e3ee:	7d1b      	ldrb	r3, [r3, #20]
    e3f0:	f000 0003 	and.w	r0, r0, #3
    e3f4:	1ac0      	subs	r0, r0, r3
    e3f6:	bf18      	it	ne
    e3f8:	2001      	movne	r0, #1
    e3fa:	4770      	bx	lr
			return false;
		}
	}
	return true;
    e3fc:	2001      	movs	r0, #1
}
    e3fe:	4770      	bx	lr
    e400:	200239e4 	.word	0x200239e4

0000e404 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    e404:	4a06      	ldr	r2, [pc, #24]	; (e420 <z_spin_unlock_valid+0x1c>)
    e406:	7d11      	ldrb	r1, [r2, #20]
    e408:	6893      	ldr	r3, [r2, #8]
    e40a:	6802      	ldr	r2, [r0, #0]
    e40c:	430b      	orrs	r3, r1
    e40e:	429a      	cmp	r2, r3
    e410:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
    e414:	bf06      	itte	eq
    e416:	6003      	streq	r3, [r0, #0]
	return true;
    e418:	2001      	moveq	r0, #1
		return false;
    e41a:	4618      	movne	r0, r3
}
    e41c:	4770      	bx	lr
    e41e:	bf00      	nop
    e420:	200239e4 	.word	0x200239e4

0000e424 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    e424:	4a02      	ldr	r2, [pc, #8]	; (e430 <z_spin_lock_set_owner+0xc>)
    e426:	7d11      	ldrb	r1, [r2, #20]
    e428:	6893      	ldr	r3, [r2, #8]
    e42a:	430b      	orrs	r3, r1
    e42c:	6003      	str	r3, [r0, #0]
}
    e42e:	4770      	bx	lr
    e430:	200239e4 	.word	0x200239e4

0000e434 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    e434:	4c13      	ldr	r4, [pc, #76]	; (e484 <idle+0x50>)
{
    e436:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    e438:	68a3      	ldr	r3, [r4, #8]
    e43a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    e43e:	2b00      	cmp	r3, #0
    e440:	da09      	bge.n	e456 <idle+0x22>
    e442:	4911      	ldr	r1, [pc, #68]	; (e488 <idle+0x54>)
    e444:	4811      	ldr	r0, [pc, #68]	; (e48c <idle+0x58>)
    e446:	4a12      	ldr	r2, [pc, #72]	; (e490 <idle+0x5c>)
    e448:	2327      	movs	r3, #39	; 0x27
    e44a:	f009 fc00 	bl	17c4e <assert_print>
    e44e:	4810      	ldr	r0, [pc, #64]	; (e490 <idle+0x5c>)
    e450:	2127      	movs	r1, #39	; 0x27
    e452:	f009 fbf5 	bl	17c40 <assert_post_action>
	return !z_sys_post_kernel;
    e456:	4d0f      	ldr	r5, [pc, #60]	; (e494 <idle+0x60>)
	__asm__ volatile(
    e458:	f04f 0220 	mov.w	r2, #32
    e45c:	f3ef 8311 	mrs	r3, BASEPRI
    e460:	f382 8812 	msr	BASEPRI_MAX, r2
    e464:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    e468:	f002 f8a2 	bl	105b0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    e46c:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    e46e:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    e470:	b913      	cbnz	r3, e478 <idle+0x44>
	arch_cpu_idle();
    e472:	f7f9 fe3b 	bl	80ec <arch_cpu_idle>
}
    e476:	e7ef      	b.n	e458 <idle+0x24>
    e478:	f7f9 fc8e 	bl	7d98 <pm_system_suspend>
    e47c:	2800      	cmp	r0, #0
    e47e:	d1eb      	bne.n	e458 <idle+0x24>
    e480:	e7f7      	b.n	e472 <idle+0x3e>
    e482:	bf00      	nop
    e484:	200239e4 	.word	0x200239e4
    e488:	0003dc10 	.word	0x0003dc10
    e48c:	0003baf1 	.word	0x0003baf1
    e490:	0003dbef 	.word	0x0003dbef
    e494:	200249ec 	.word	0x200249ec

0000e498 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    e498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e49c:	4604      	mov	r4, r0
    e49e:	4689      	mov	r9, r1
    e4a0:	4690      	mov	r8, r2
    e4a2:	461e      	mov	r6, r3
    e4a4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    e4a8:	b17b      	cbz	r3, e4ca <z_impl_k_msgq_put+0x32>
    e4aa:	ea52 0306 	orrs.w	r3, r2, r6
    e4ae:	d00c      	beq.n	e4ca <z_impl_k_msgq_put+0x32>
    e4b0:	4940      	ldr	r1, [pc, #256]	; (e5b4 <z_impl_k_msgq_put+0x11c>)
    e4b2:	4a41      	ldr	r2, [pc, #260]	; (e5b8 <z_impl_k_msgq_put+0x120>)
    e4b4:	4841      	ldr	r0, [pc, #260]	; (e5bc <z_impl_k_msgq_put+0x124>)
    e4b6:	2376      	movs	r3, #118	; 0x76
    e4b8:	f009 fbc9 	bl	17c4e <assert_print>
    e4bc:	4840      	ldr	r0, [pc, #256]	; (e5c0 <z_impl_k_msgq_put+0x128>)
    e4be:	f009 fbc6 	bl	17c4e <assert_print>
    e4c2:	483d      	ldr	r0, [pc, #244]	; (e5b8 <z_impl_k_msgq_put+0x120>)
    e4c4:	2176      	movs	r1, #118	; 0x76
    e4c6:	f009 fbbb 	bl	17c40 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    e4ca:	f104 0508 	add.w	r5, r4, #8
    e4ce:	f04f 0320 	mov.w	r3, #32
    e4d2:	f3ef 8711 	mrs	r7, BASEPRI
    e4d6:	f383 8812 	msr	BASEPRI_MAX, r3
    e4da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e4de:	4628      	mov	r0, r5
    e4e0:	f7ff ff82 	bl	e3e8 <z_spin_lock_valid>
    e4e4:	b968      	cbnz	r0, e502 <z_impl_k_msgq_put+0x6a>
    e4e6:	4a37      	ldr	r2, [pc, #220]	; (e5c4 <z_impl_k_msgq_put+0x12c>)
    e4e8:	4937      	ldr	r1, [pc, #220]	; (e5c8 <z_impl_k_msgq_put+0x130>)
    e4ea:	4834      	ldr	r0, [pc, #208]	; (e5bc <z_impl_k_msgq_put+0x124>)
    e4ec:	238e      	movs	r3, #142	; 0x8e
    e4ee:	f009 fbae 	bl	17c4e <assert_print>
    e4f2:	4836      	ldr	r0, [pc, #216]	; (e5cc <z_impl_k_msgq_put+0x134>)
    e4f4:	4629      	mov	r1, r5
    e4f6:	f009 fbaa 	bl	17c4e <assert_print>
    e4fa:	4832      	ldr	r0, [pc, #200]	; (e5c4 <z_impl_k_msgq_put+0x12c>)
    e4fc:	218e      	movs	r1, #142	; 0x8e
    e4fe:	f009 fb9f 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    e502:	4628      	mov	r0, r5
    e504:	f7ff ff8e 	bl	e424 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
    e508:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e50a:	6923      	ldr	r3, [r4, #16]
    e50c:	429a      	cmp	r2, r3
    e50e:	d23d      	bcs.n	e58c <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    e510:	4620      	mov	r0, r4
    e512:	f001 fbd1 	bl	fcb8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    e516:	68e2      	ldr	r2, [r4, #12]
    e518:	4606      	mov	r6, r0
    e51a:	4649      	mov	r1, r9
    e51c:	b178      	cbz	r0, e53e <z_impl_k_msgq_put+0xa6>
    e51e:	6940      	ldr	r0, [r0, #20]
    e520:	2400      	movs	r4, #0
    e522:	f00d fbdd 	bl	1bce0 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    e526:	4630      	mov	r0, r6
    e528:	67b4      	str	r4, [r6, #120]	; 0x78
    e52a:	f001 f819 	bl	f560 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    e52e:	4639      	mov	r1, r7
    e530:	4628      	mov	r0, r5
    e532:	f000 fdc9 	bl	f0c8 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    e536:	4620      	mov	r0, r4
    e538:	b003      	add	sp, #12
    e53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e53e:	6a20      	ldr	r0, [r4, #32]
    e540:	f00d fbce 	bl	1bce0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
    e544:	6a23      	ldr	r3, [r4, #32]
    e546:	68e2      	ldr	r2, [r4, #12]
    e548:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    e54a:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
    e54c:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
    e54e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    e550:	bf04      	itt	eq
    e552:	6963      	ldreq	r3, [r4, #20]
    e554:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
    e556:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e558:	3301      	adds	r3, #1
    e55a:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
    e55c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e55e:	4628      	mov	r0, r5
    e560:	f7ff ff50 	bl	e404 <z_spin_unlock_valid>
    e564:	b968      	cbnz	r0, e582 <z_impl_k_msgq_put+0xea>
    e566:	4a17      	ldr	r2, [pc, #92]	; (e5c4 <z_impl_k_msgq_put+0x12c>)
    e568:	4919      	ldr	r1, [pc, #100]	; (e5d0 <z_impl_k_msgq_put+0x138>)
    e56a:	4814      	ldr	r0, [pc, #80]	; (e5bc <z_impl_k_msgq_put+0x124>)
    e56c:	23b9      	movs	r3, #185	; 0xb9
    e56e:	f009 fb6e 	bl	17c4e <assert_print>
    e572:	4818      	ldr	r0, [pc, #96]	; (e5d4 <z_impl_k_msgq_put+0x13c>)
    e574:	4629      	mov	r1, r5
    e576:	f009 fb6a 	bl	17c4e <assert_print>
    e57a:	4812      	ldr	r0, [pc, #72]	; (e5c4 <z_impl_k_msgq_put+0x12c>)
    e57c:	21b9      	movs	r1, #185	; 0xb9
    e57e:	f009 fb5f 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    e582:	f387 8811 	msr	BASEPRI, r7
    e586:	f3bf 8f6f 	isb	sy
	return result;
    e58a:	e7d4      	b.n	e536 <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e58c:	ea58 0306 	orrs.w	r3, r8, r6
    e590:	d00c      	beq.n	e5ac <z_impl_k_msgq_put+0x114>
		_current->base.swap_data = (void *) data;
    e592:	4b11      	ldr	r3, [pc, #68]	; (e5d8 <z_impl_k_msgq_put+0x140>)
    e594:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    e596:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
    e598:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    e59c:	4639      	mov	r1, r7
    e59e:	e9cd 8600 	strd	r8, r6, [sp]
    e5a2:	4628      	mov	r0, r5
    e5a4:	f001 f98e 	bl	f8c4 <z_pend_curr>
    e5a8:	4604      	mov	r4, r0
		return result;
    e5aa:	e7c4      	b.n	e536 <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
    e5ac:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e5b0:	e7d5      	b.n	e55e <z_impl_k_msgq_put+0xc6>
    e5b2:	bf00      	nop
    e5b4:	0003dc5a 	.word	0x0003dc5a
    e5b8:	0003dc38 	.word	0x0003dc38
    e5bc:	0003baf1 	.word	0x0003baf1
    e5c0:	0003dca0 	.word	0x0003dca0
    e5c4:	0003bd42 	.word	0x0003bd42
    e5c8:	0003bd9b 	.word	0x0003bd9b
    e5cc:	0003bdb0 	.word	0x0003bdb0
    e5d0:	0003bd6f 	.word	0x0003bd6f
    e5d4:	0003bd86 	.word	0x0003bd86
    e5d8:	200239e4 	.word	0x200239e4

0000e5dc <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    e5dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e5e0:	4604      	mov	r4, r0
    e5e2:	4688      	mov	r8, r1
    e5e4:	4617      	mov	r7, r2
    e5e6:	461d      	mov	r5, r3
    e5e8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    e5ec:	b17b      	cbz	r3, e60e <z_impl_k_msgq_get+0x32>
    e5ee:	ea52 0305 	orrs.w	r3, r2, r5
    e5f2:	d00c      	beq.n	e60e <z_impl_k_msgq_get+0x32>
    e5f4:	4946      	ldr	r1, [pc, #280]	; (e710 <z_impl_k_msgq_get+0x134>)
    e5f6:	4a47      	ldr	r2, [pc, #284]	; (e714 <z_impl_k_msgq_get+0x138>)
    e5f8:	4847      	ldr	r0, [pc, #284]	; (e718 <z_impl_k_msgq_get+0x13c>)
    e5fa:	23d0      	movs	r3, #208	; 0xd0
    e5fc:	f009 fb27 	bl	17c4e <assert_print>
    e600:	4846      	ldr	r0, [pc, #280]	; (e71c <z_impl_k_msgq_get+0x140>)
    e602:	f009 fb24 	bl	17c4e <assert_print>
    e606:	4843      	ldr	r0, [pc, #268]	; (e714 <z_impl_k_msgq_get+0x138>)
    e608:	21d0      	movs	r1, #208	; 0xd0
    e60a:	f009 fb19 	bl	17c40 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    e60e:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
    e612:	f04f 0320 	mov.w	r3, #32
    e616:	f3ef 8911 	mrs	r9, BASEPRI
    e61a:	f383 8812 	msr	BASEPRI_MAX, r3
    e61e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e622:	4630      	mov	r0, r6
    e624:	f7ff fee0 	bl	e3e8 <z_spin_lock_valid>
    e628:	b968      	cbnz	r0, e646 <z_impl_k_msgq_get+0x6a>
    e62a:	4a3d      	ldr	r2, [pc, #244]	; (e720 <z_impl_k_msgq_get+0x144>)
    e62c:	493d      	ldr	r1, [pc, #244]	; (e724 <z_impl_k_msgq_get+0x148>)
    e62e:	483a      	ldr	r0, [pc, #232]	; (e718 <z_impl_k_msgq_get+0x13c>)
    e630:	238e      	movs	r3, #142	; 0x8e
    e632:	f009 fb0c 	bl	17c4e <assert_print>
    e636:	483c      	ldr	r0, [pc, #240]	; (e728 <z_impl_k_msgq_get+0x14c>)
    e638:	4631      	mov	r1, r6
    e63a:	f009 fb08 	bl	17c4e <assert_print>
    e63e:	4838      	ldr	r0, [pc, #224]	; (e720 <z_impl_k_msgq_get+0x144>)
    e640:	218e      	movs	r1, #142	; 0x8e
    e642:	f009 fafd 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    e646:	4630      	mov	r0, r6
    e648:	f7ff feec 	bl	e424 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
    e64c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e64e:	2b00      	cmp	r3, #0
    e650:	d035      	beq.n	e6be <z_impl_k_msgq_get+0xe2>
    e652:	68e2      	ldr	r2, [r4, #12]
    e654:	69e1      	ldr	r1, [r4, #28]
    e656:	4640      	mov	r0, r8
    e658:	f00d fb42 	bl	1bce0 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
    e65c:	69e3      	ldr	r3, [r4, #28]
    e65e:	68e2      	ldr	r2, [r4, #12]
    e660:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
    e662:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
    e664:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
    e666:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
    e668:	bf04      	itt	eq
    e66a:	6963      	ldreq	r3, [r4, #20]
    e66c:	61e3      	streq	r3, [r4, #28]
		}
		msgq->used_msgs--;
    e66e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e670:	3b01      	subs	r3, #1
    e672:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    e674:	4620      	mov	r0, r4
    e676:	f001 fb1f 	bl	fcb8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    e67a:	4605      	mov	r5, r0
    e67c:	2800      	cmp	r0, #0
    e67e:	d030      	beq.n	e6e2 <z_impl_k_msgq_get+0x106>
    e680:	6941      	ldr	r1, [r0, #20]
    e682:	68e2      	ldr	r2, [r4, #12]
    e684:	6a20      	ldr	r0, [r4, #32]
    e686:	f00d fb2b 	bl	1bce0 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    e68a:	6a23      	ldr	r3, [r4, #32]
    e68c:	68e2      	ldr	r2, [r4, #12]
    e68e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    e690:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
    e692:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
    e694:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    e696:	bf04      	itt	eq
    e698:	6963      	ldreq	r3, [r4, #20]
    e69a:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
    e69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e69e:	3301      	adds	r3, #1
    e6a0:	6263      	str	r3, [r4, #36]	; 0x24
    e6a2:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    e6a4:	4628      	mov	r0, r5
    e6a6:	67ac      	str	r4, [r5, #120]	; 0x78
    e6a8:	f000 ff5a 	bl	f560 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    e6ac:	4649      	mov	r1, r9
    e6ae:	4630      	mov	r0, r6
    e6b0:	f000 fd0a 	bl	f0c8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
    e6b4:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    e6b6:	4628      	mov	r0, r5
    e6b8:	b003      	add	sp, #12
    e6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e6be:	ea57 0305 	orrs.w	r3, r7, r5
    e6c2:	d00c      	beq.n	e6de <z_impl_k_msgq_get+0x102>
		_current->base.swap_data = data;
    e6c4:	4b19      	ldr	r3, [pc, #100]	; (e72c <z_impl_k_msgq_get+0x150>)
    e6c6:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    e6c8:	4622      	mov	r2, r4
		_current->base.swap_data = data;
    e6ca:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    e6ce:	4649      	mov	r1, r9
    e6d0:	e9cd 7500 	strd	r7, r5, [sp]
    e6d4:	4630      	mov	r0, r6
    e6d6:	f001 f8f5 	bl	f8c4 <z_pend_curr>
    e6da:	4605      	mov	r5, r0
		return result;
    e6dc:	e7eb      	b.n	e6b6 <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
    e6de:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e6e2:	4630      	mov	r0, r6
    e6e4:	f7ff fe8e 	bl	e404 <z_spin_unlock_valid>
    e6e8:	b968      	cbnz	r0, e706 <z_impl_k_msgq_get+0x12a>
    e6ea:	4a0d      	ldr	r2, [pc, #52]	; (e720 <z_impl_k_msgq_get+0x144>)
    e6ec:	4910      	ldr	r1, [pc, #64]	; (e730 <z_impl_k_msgq_get+0x154>)
    e6ee:	480a      	ldr	r0, [pc, #40]	; (e718 <z_impl_k_msgq_get+0x13c>)
    e6f0:	23b9      	movs	r3, #185	; 0xb9
    e6f2:	f009 faac 	bl	17c4e <assert_print>
    e6f6:	480f      	ldr	r0, [pc, #60]	; (e734 <z_impl_k_msgq_get+0x158>)
    e6f8:	4631      	mov	r1, r6
    e6fa:	f009 faa8 	bl	17c4e <assert_print>
    e6fe:	4808      	ldr	r0, [pc, #32]	; (e720 <z_impl_k_msgq_get+0x144>)
    e700:	21b9      	movs	r1, #185	; 0xb9
    e702:	f009 fa9d 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    e706:	f389 8811 	msr	BASEPRI, r9
    e70a:	f3bf 8f6f 	isb	sy
	return result;
    e70e:	e7d2      	b.n	e6b6 <z_impl_k_msgq_get+0xda>
    e710:	0003dc5a 	.word	0x0003dc5a
    e714:	0003dc38 	.word	0x0003dc38
    e718:	0003baf1 	.word	0x0003baf1
    e71c:	0003dca0 	.word	0x0003dca0
    e720:	0003bd42 	.word	0x0003bd42
    e724:	0003bd9b 	.word	0x0003bd9b
    e728:	0003bdb0 	.word	0x0003bdb0
    e72c:	200239e4 	.word	0x200239e4
    e730:	0003bd6f 	.word	0x0003bd6f
    e734:	0003bd86 	.word	0x0003bd86

0000e738 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    e738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e73c:	4604      	mov	r4, r0
    e73e:	4617      	mov	r7, r2
    e740:	461e      	mov	r6, r3
    e742:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    e746:	b163      	cbz	r3, e762 <z_impl_k_mutex_lock+0x2a>
    e748:	496d      	ldr	r1, [pc, #436]	; (e900 <z_impl_k_mutex_lock+0x1c8>)
    e74a:	4a6e      	ldr	r2, [pc, #440]	; (e904 <z_impl_k_mutex_lock+0x1cc>)
    e74c:	486e      	ldr	r0, [pc, #440]	; (e908 <z_impl_k_mutex_lock+0x1d0>)
    e74e:	2365      	movs	r3, #101	; 0x65
    e750:	f009 fa7d 	bl	17c4e <assert_print>
    e754:	486d      	ldr	r0, [pc, #436]	; (e90c <z_impl_k_mutex_lock+0x1d4>)
    e756:	f009 fa7a 	bl	17c4e <assert_print>
    e75a:	486a      	ldr	r0, [pc, #424]	; (e904 <z_impl_k_mutex_lock+0x1cc>)
    e75c:	2165      	movs	r1, #101	; 0x65
    e75e:	f009 fa6f 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    e762:	f04f 0320 	mov.w	r3, #32
    e766:	f3ef 8811 	mrs	r8, BASEPRI
    e76a:	f383 8812 	msr	BASEPRI_MAX, r3
    e76e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e772:	4867      	ldr	r0, [pc, #412]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e774:	f7ff fe38 	bl	e3e8 <z_spin_lock_valid>
    e778:	b968      	cbnz	r0, e796 <z_impl_k_mutex_lock+0x5e>
    e77a:	4a66      	ldr	r2, [pc, #408]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e77c:	4966      	ldr	r1, [pc, #408]	; (e918 <z_impl_k_mutex_lock+0x1e0>)
    e77e:	4862      	ldr	r0, [pc, #392]	; (e908 <z_impl_k_mutex_lock+0x1d0>)
    e780:	238e      	movs	r3, #142	; 0x8e
    e782:	f009 fa64 	bl	17c4e <assert_print>
    e786:	4962      	ldr	r1, [pc, #392]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e788:	4864      	ldr	r0, [pc, #400]	; (e91c <z_impl_k_mutex_lock+0x1e4>)
    e78a:	f009 fa60 	bl	17c4e <assert_print>
    e78e:	4861      	ldr	r0, [pc, #388]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e790:	218e      	movs	r1, #142	; 0x8e
    e792:	f009 fa55 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    e796:	485e      	ldr	r0, [pc, #376]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e798:	f7ff fe44 	bl	e424 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    e79c:	68e3      	ldr	r3, [r4, #12]
    e79e:	4a60      	ldr	r2, [pc, #384]	; (e920 <z_impl_k_mutex_lock+0x1e8>)
    e7a0:	b1fb      	cbz	r3, e7e2 <z_impl_k_mutex_lock+0xaa>
    e7a2:	68a0      	ldr	r0, [r4, #8]
    e7a4:	6891      	ldr	r1, [r2, #8]
    e7a6:	4288      	cmp	r0, r1
    e7a8:	d03d      	beq.n	e826 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    e7aa:	ea57 0306 	orrs.w	r3, r7, r6
    e7ae:	d13c      	bne.n	e82a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e7b0:	4857      	ldr	r0, [pc, #348]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e7b2:	f7ff fe27 	bl	e404 <z_spin_unlock_valid>
    e7b6:	b968      	cbnz	r0, e7d4 <z_impl_k_mutex_lock+0x9c>
    e7b8:	4a56      	ldr	r2, [pc, #344]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e7ba:	495a      	ldr	r1, [pc, #360]	; (e924 <z_impl_k_mutex_lock+0x1ec>)
    e7bc:	4852      	ldr	r0, [pc, #328]	; (e908 <z_impl_k_mutex_lock+0x1d0>)
    e7be:	23b9      	movs	r3, #185	; 0xb9
    e7c0:	f009 fa45 	bl	17c4e <assert_print>
    e7c4:	4952      	ldr	r1, [pc, #328]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e7c6:	4858      	ldr	r0, [pc, #352]	; (e928 <z_impl_k_mutex_lock+0x1f0>)
    e7c8:	f009 fa41 	bl	17c4e <assert_print>
    e7cc:	4851      	ldr	r0, [pc, #324]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e7ce:	21b9      	movs	r1, #185	; 0xb9
    e7d0:	f009 fa36 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    e7d4:	f388 8811 	msr	BASEPRI, r8
    e7d8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    e7dc:	f06f 000f 	mvn.w	r0, #15
    e7e0:	e01e      	b.n	e820 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    e7e2:	6891      	ldr	r1, [r2, #8]
    e7e4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    e7e8:	4849      	ldr	r0, [pc, #292]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    e7ea:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    e7ec:	3301      	adds	r3, #1
    e7ee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    e7f0:	6893      	ldr	r3, [r2, #8]
    e7f2:	60a3      	str	r3, [r4, #8]
    e7f4:	f7ff fe06 	bl	e404 <z_spin_unlock_valid>
    e7f8:	b968      	cbnz	r0, e816 <z_impl_k_mutex_lock+0xde>
    e7fa:	4a46      	ldr	r2, [pc, #280]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e7fc:	4949      	ldr	r1, [pc, #292]	; (e924 <z_impl_k_mutex_lock+0x1ec>)
    e7fe:	4842      	ldr	r0, [pc, #264]	; (e908 <z_impl_k_mutex_lock+0x1d0>)
    e800:	23b9      	movs	r3, #185	; 0xb9
    e802:	f009 fa24 	bl	17c4e <assert_print>
    e806:	4942      	ldr	r1, [pc, #264]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e808:	4847      	ldr	r0, [pc, #284]	; (e928 <z_impl_k_mutex_lock+0x1f0>)
    e80a:	f009 fa20 	bl	17c4e <assert_print>
    e80e:	4841      	ldr	r0, [pc, #260]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e810:	21b9      	movs	r1, #185	; 0xb9
    e812:	f009 fa15 	bl	17c40 <assert_post_action>
    e816:	f388 8811 	msr	BASEPRI, r8
    e81a:	f3bf 8f6f 	isb	sy
		return 0;
    e81e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    e820:	b002      	add	sp, #8
    e822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    e826:	6921      	ldr	r1, [r4, #16]
    e828:	e7de      	b.n	e7e8 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    e82a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    e82e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    e832:	4299      	cmp	r1, r3
    e834:	bfa8      	it	ge
    e836:	4619      	movge	r1, r3
    e838:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    e83c:	4291      	cmp	r1, r2
    e83e:	bfb8      	it	lt
    e840:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    e842:	428b      	cmp	r3, r1
    e844:	dd43      	ble.n	e8ce <z_impl_k_mutex_lock+0x196>
		resched = adjust_owner_prio(mutex, new_prio);
    e846:	f00a f8d5 	bl	189f4 <adjust_owner_prio.isra.0>
    e84a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    e84c:	e9cd 7600 	strd	r7, r6, [sp]
    e850:	482f      	ldr	r0, [pc, #188]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e852:	4622      	mov	r2, r4
    e854:	4641      	mov	r1, r8
    e856:	f001 f835 	bl	f8c4 <z_pend_curr>
	if (got_mutex == 0) {
    e85a:	2800      	cmp	r0, #0
    e85c:	d0e0      	beq.n	e820 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    e85e:	f04f 0320 	mov.w	r3, #32
    e862:	f3ef 8611 	mrs	r6, BASEPRI
    e866:	f383 8812 	msr	BASEPRI_MAX, r3
    e86a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e86e:	4828      	ldr	r0, [pc, #160]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e870:	f7ff fdba 	bl	e3e8 <z_spin_lock_valid>
    e874:	b968      	cbnz	r0, e892 <z_impl_k_mutex_lock+0x15a>
    e876:	4a27      	ldr	r2, [pc, #156]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e878:	4927      	ldr	r1, [pc, #156]	; (e918 <z_impl_k_mutex_lock+0x1e0>)
    e87a:	4823      	ldr	r0, [pc, #140]	; (e908 <z_impl_k_mutex_lock+0x1d0>)
    e87c:	238e      	movs	r3, #142	; 0x8e
    e87e:	f009 f9e6 	bl	17c4e <assert_print>
    e882:	4923      	ldr	r1, [pc, #140]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e884:	4825      	ldr	r0, [pc, #148]	; (e91c <z_impl_k_mutex_lock+0x1e4>)
    e886:	f009 f9e2 	bl	17c4e <assert_print>
    e88a:	4822      	ldr	r0, [pc, #136]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e88c:	218e      	movs	r1, #142	; 0x8e
    e88e:	f009 f9d7 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    e892:	481f      	ldr	r0, [pc, #124]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e894:	f7ff fdc6 	bl	e424 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    e898:	6823      	ldr	r3, [r4, #0]
    e89a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e89c:	429c      	cmp	r4, r3
    e89e:	d00a      	beq.n	e8b6 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    e8a0:	b14b      	cbz	r3, e8b6 <z_impl_k_mutex_lock+0x17e>
    e8a2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    e8a6:	4299      	cmp	r1, r3
    e8a8:	bfa8      	it	ge
    e8aa:	4619      	movge	r1, r3
    e8ac:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    e8b0:	4299      	cmp	r1, r3
    e8b2:	bfb8      	it	lt
    e8b4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e8b6:	68a0      	ldr	r0, [r4, #8]
    e8b8:	f00a f89c 	bl	189f4 <adjust_owner_prio.isra.0>
    e8bc:	b900      	cbnz	r0, e8c0 <z_impl_k_mutex_lock+0x188>
	if (resched) {
    e8be:	b145      	cbz	r5, e8d2 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    e8c0:	4813      	ldr	r0, [pc, #76]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e8c2:	4631      	mov	r1, r6
    e8c4:	f000 fc00 	bl	f0c8 <z_reschedule>
	return -EAGAIN;
    e8c8:	f06f 000a 	mvn.w	r0, #10
    e8cc:	e7a8      	b.n	e820 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    e8ce:	2500      	movs	r5, #0
    e8d0:	e7bc      	b.n	e84c <z_impl_k_mutex_lock+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e8d2:	480f      	ldr	r0, [pc, #60]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e8d4:	f7ff fd96 	bl	e404 <z_spin_unlock_valid>
    e8d8:	b968      	cbnz	r0, e8f6 <z_impl_k_mutex_lock+0x1be>
    e8da:	4a0e      	ldr	r2, [pc, #56]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e8dc:	4911      	ldr	r1, [pc, #68]	; (e924 <z_impl_k_mutex_lock+0x1ec>)
    e8de:	480a      	ldr	r0, [pc, #40]	; (e908 <z_impl_k_mutex_lock+0x1d0>)
    e8e0:	23b9      	movs	r3, #185	; 0xb9
    e8e2:	f009 f9b4 	bl	17c4e <assert_print>
    e8e6:	490a      	ldr	r1, [pc, #40]	; (e910 <z_impl_k_mutex_lock+0x1d8>)
    e8e8:	480f      	ldr	r0, [pc, #60]	; (e928 <z_impl_k_mutex_lock+0x1f0>)
    e8ea:	f009 f9b0 	bl	17c4e <assert_print>
    e8ee:	4809      	ldr	r0, [pc, #36]	; (e914 <z_impl_k_mutex_lock+0x1dc>)
    e8f0:	21b9      	movs	r1, #185	; 0xb9
    e8f2:	f009 f9a5 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    e8f6:	f386 8811 	msr	BASEPRI, r6
    e8fa:	f3bf 8f6f 	isb	sy
    e8fe:	e7e3      	b.n	e8c8 <z_impl_k_mutex_lock+0x190>
    e900:	0003db8b 	.word	0x0003db8b
    e904:	0003dca3 	.word	0x0003dca3
    e908:	0003baf1 	.word	0x0003baf1
    e90c:	0003dcc5 	.word	0x0003dcc5
    e910:	20023a10 	.word	0x20023a10
    e914:	0003bd42 	.word	0x0003bd42
    e918:	0003bd9b 	.word	0x0003bd9b
    e91c:	0003bdb0 	.word	0x0003bdb0
    e920:	200239e4 	.word	0x200239e4
    e924:	0003bd6f 	.word	0x0003bd6f
    e928:	0003bd86 	.word	0x0003bd86

0000e92c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    e92c:	b538      	push	{r3, r4, r5, lr}
    e92e:	4604      	mov	r4, r0
    e930:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    e934:	b163      	cbz	r3, e950 <z_impl_k_mutex_unlock+0x24>
    e936:	4950      	ldr	r1, [pc, #320]	; (ea78 <z_impl_k_mutex_unlock+0x14c>)
    e938:	4a50      	ldr	r2, [pc, #320]	; (ea7c <z_impl_k_mutex_unlock+0x150>)
    e93a:	4851      	ldr	r0, [pc, #324]	; (ea80 <z_impl_k_mutex_unlock+0x154>)
    e93c:	23c7      	movs	r3, #199	; 0xc7
    e93e:	f009 f986 	bl	17c4e <assert_print>
    e942:	4850      	ldr	r0, [pc, #320]	; (ea84 <z_impl_k_mutex_unlock+0x158>)
    e944:	f009 f983 	bl	17c4e <assert_print>
    e948:	484c      	ldr	r0, [pc, #304]	; (ea7c <z_impl_k_mutex_unlock+0x150>)
    e94a:	21c7      	movs	r1, #199	; 0xc7
    e94c:	f009 f978 	bl	17c40 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    e950:	68a3      	ldr	r3, [r4, #8]
    e952:	2b00      	cmp	r3, #0
    e954:	f000 8089 	beq.w	ea6a <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    e958:	4d4b      	ldr	r5, [pc, #300]	; (ea88 <z_impl_k_mutex_unlock+0x15c>)
    e95a:	68aa      	ldr	r2, [r5, #8]
    e95c:	4293      	cmp	r3, r2
    e95e:	f040 8087 	bne.w	ea70 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    e962:	68e3      	ldr	r3, [r4, #12]
    e964:	b94b      	cbnz	r3, e97a <z_impl_k_mutex_unlock+0x4e>
    e966:	4949      	ldr	r1, [pc, #292]	; (ea8c <z_impl_k_mutex_unlock+0x160>)
    e968:	4845      	ldr	r0, [pc, #276]	; (ea80 <z_impl_k_mutex_unlock+0x154>)
    e96a:	4a44      	ldr	r2, [pc, #272]	; (ea7c <z_impl_k_mutex_unlock+0x150>)
    e96c:	23df      	movs	r3, #223	; 0xdf
    e96e:	f009 f96e 	bl	17c4e <assert_print>
    e972:	4842      	ldr	r0, [pc, #264]	; (ea7c <z_impl_k_mutex_unlock+0x150>)
    e974:	21df      	movs	r1, #223	; 0xdf
    e976:	f009 f963 	bl	17c40 <assert_post_action>
    e97a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    e97e:	b163      	cbz	r3, e99a <z_impl_k_mutex_unlock+0x6e>
    e980:	493d      	ldr	r1, [pc, #244]	; (ea78 <z_impl_k_mutex_unlock+0x14c>)
    e982:	4a43      	ldr	r2, [pc, #268]	; (ea90 <z_impl_k_mutex_unlock+0x164>)
    e984:	483e      	ldr	r0, [pc, #248]	; (ea80 <z_impl_k_mutex_unlock+0x154>)
    e986:	23fd      	movs	r3, #253	; 0xfd
    e988:	f009 f961 	bl	17c4e <assert_print>
    e98c:	4841      	ldr	r0, [pc, #260]	; (ea94 <z_impl_k_mutex_unlock+0x168>)
    e98e:	f009 f95e 	bl	17c4e <assert_print>
    e992:	483f      	ldr	r0, [pc, #252]	; (ea90 <z_impl_k_mutex_unlock+0x164>)
    e994:	21fd      	movs	r1, #253	; 0xfd
    e996:	f009 f953 	bl	17c40 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    e99a:	68ab      	ldr	r3, [r5, #8]
    e99c:	7bdb      	ldrb	r3, [r3, #15]
    e99e:	2b01      	cmp	r3, #1
    e9a0:	d10c      	bne.n	e9bc <z_impl_k_mutex_unlock+0x90>
    e9a2:	493d      	ldr	r1, [pc, #244]	; (ea98 <z_impl_k_mutex_unlock+0x16c>)
    e9a4:	4a3a      	ldr	r2, [pc, #232]	; (ea90 <z_impl_k_mutex_unlock+0x164>)
    e9a6:	4836      	ldr	r0, [pc, #216]	; (ea80 <z_impl_k_mutex_unlock+0x154>)
    e9a8:	23fe      	movs	r3, #254	; 0xfe
    e9aa:	f009 f950 	bl	17c4e <assert_print>
    e9ae:	4839      	ldr	r0, [pc, #228]	; (ea94 <z_impl_k_mutex_unlock+0x168>)
    e9b0:	f009 f94d 	bl	17c4e <assert_print>
    e9b4:	4836      	ldr	r0, [pc, #216]	; (ea90 <z_impl_k_mutex_unlock+0x164>)
    e9b6:	21fe      	movs	r1, #254	; 0xfe
    e9b8:	f009 f942 	bl	17c40 <assert_post_action>

	--_current->base.sched_locked;
    e9bc:	68aa      	ldr	r2, [r5, #8]
    e9be:	7bd3      	ldrb	r3, [r2, #15]
    e9c0:	3b01      	subs	r3, #1
    e9c2:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    e9c4:	68e3      	ldr	r3, [r4, #12]
    e9c6:	2b01      	cmp	r3, #1
    e9c8:	d905      	bls.n	e9d6 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    e9ca:	3b01      	subs	r3, #1
    e9cc:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    e9ce:	f001 f8ab 	bl	fb28 <k_sched_unlock>

	return 0;
    e9d2:	2000      	movs	r0, #0
}
    e9d4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    e9d6:	f04f 0320 	mov.w	r3, #32
    e9da:	f3ef 8511 	mrs	r5, BASEPRI
    e9de:	f383 8812 	msr	BASEPRI_MAX, r3
    e9e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e9e6:	482d      	ldr	r0, [pc, #180]	; (ea9c <z_impl_k_mutex_unlock+0x170>)
    e9e8:	f7ff fcfe 	bl	e3e8 <z_spin_lock_valid>
    e9ec:	b968      	cbnz	r0, ea0a <z_impl_k_mutex_unlock+0xde>
    e9ee:	4a2c      	ldr	r2, [pc, #176]	; (eaa0 <z_impl_k_mutex_unlock+0x174>)
    e9f0:	492c      	ldr	r1, [pc, #176]	; (eaa4 <z_impl_k_mutex_unlock+0x178>)
    e9f2:	4823      	ldr	r0, [pc, #140]	; (ea80 <z_impl_k_mutex_unlock+0x154>)
    e9f4:	238e      	movs	r3, #142	; 0x8e
    e9f6:	f009 f92a 	bl	17c4e <assert_print>
    e9fa:	4928      	ldr	r1, [pc, #160]	; (ea9c <z_impl_k_mutex_unlock+0x170>)
    e9fc:	482a      	ldr	r0, [pc, #168]	; (eaa8 <z_impl_k_mutex_unlock+0x17c>)
    e9fe:	f009 f926 	bl	17c4e <assert_print>
    ea02:	4827      	ldr	r0, [pc, #156]	; (eaa0 <z_impl_k_mutex_unlock+0x174>)
    ea04:	218e      	movs	r1, #142	; 0x8e
    ea06:	f009 f91b 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    ea0a:	4824      	ldr	r0, [pc, #144]	; (ea9c <z_impl_k_mutex_unlock+0x170>)
    ea0c:	f7ff fd0a 	bl	e424 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ea10:	6921      	ldr	r1, [r4, #16]
    ea12:	68a0      	ldr	r0, [r4, #8]
    ea14:	f009 ffee 	bl	189f4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ea18:	4620      	mov	r0, r4
    ea1a:	f001 f94d 	bl	fcb8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    ea1e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ea20:	b158      	cbz	r0, ea3a <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    ea22:	f990 200e 	ldrsb.w	r2, [r0, #14]
    ea26:	6122      	str	r2, [r4, #16]
    ea28:	2200      	movs	r2, #0
    ea2a:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    ea2c:	f000 fd98 	bl	f560 <z_ready_thread>
		z_reschedule(&lock, key);
    ea30:	481a      	ldr	r0, [pc, #104]	; (ea9c <z_impl_k_mutex_unlock+0x170>)
    ea32:	4629      	mov	r1, r5
    ea34:	f000 fb48 	bl	f0c8 <z_reschedule>
    ea38:	e7c9      	b.n	e9ce <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    ea3a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ea3c:	4817      	ldr	r0, [pc, #92]	; (ea9c <z_impl_k_mutex_unlock+0x170>)
    ea3e:	f7ff fce1 	bl	e404 <z_spin_unlock_valid>
    ea42:	b968      	cbnz	r0, ea60 <z_impl_k_mutex_unlock+0x134>
    ea44:	4a16      	ldr	r2, [pc, #88]	; (eaa0 <z_impl_k_mutex_unlock+0x174>)
    ea46:	4919      	ldr	r1, [pc, #100]	; (eaac <z_impl_k_mutex_unlock+0x180>)
    ea48:	480d      	ldr	r0, [pc, #52]	; (ea80 <z_impl_k_mutex_unlock+0x154>)
    ea4a:	23b9      	movs	r3, #185	; 0xb9
    ea4c:	f009 f8ff 	bl	17c4e <assert_print>
    ea50:	4912      	ldr	r1, [pc, #72]	; (ea9c <z_impl_k_mutex_unlock+0x170>)
    ea52:	4817      	ldr	r0, [pc, #92]	; (eab0 <z_impl_k_mutex_unlock+0x184>)
    ea54:	f009 f8fb 	bl	17c4e <assert_print>
    ea58:	4811      	ldr	r0, [pc, #68]	; (eaa0 <z_impl_k_mutex_unlock+0x174>)
    ea5a:	21b9      	movs	r1, #185	; 0xb9
    ea5c:	f009 f8f0 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    ea60:	f385 8811 	msr	BASEPRI, r5
    ea64:	f3bf 8f6f 	isb	sy
    ea68:	e7b1      	b.n	e9ce <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    ea6a:	f06f 0015 	mvn.w	r0, #21
    ea6e:	e7b1      	b.n	e9d4 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    ea70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ea74:	e7ae      	b.n	e9d4 <z_impl_k_mutex_unlock+0xa8>
    ea76:	bf00      	nop
    ea78:	0003db8b 	.word	0x0003db8b
    ea7c:	0003dca3 	.word	0x0003dca3
    ea80:	0003baf1 	.word	0x0003baf1
    ea84:	0003dcc5 	.word	0x0003dcc5
    ea88:	200239e4 	.word	0x200239e4
    ea8c:	0003dcea 	.word	0x0003dcea
    ea90:	0003dd01 	.word	0x0003dd01
    ea94:	0003dca0 	.word	0x0003dca0
    ea98:	0003dd2c 	.word	0x0003dd2c
    ea9c:	20023a10 	.word	0x20023a10
    eaa0:	0003bd42 	.word	0x0003bd42
    eaa4:	0003bd9b 	.word	0x0003bd9b
    eaa8:	0003bdb0 	.word	0x0003bdb0
    eaac:	0003bd6f 	.word	0x0003bd6f
    eab0:	0003bd86 	.word	0x0003bd86

0000eab4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    eab4:	b538      	push	{r3, r4, r5, lr}
    eab6:	4604      	mov	r4, r0
	__asm__ volatile(
    eab8:	f04f 0320 	mov.w	r3, #32
    eabc:	f3ef 8511 	mrs	r5, BASEPRI
    eac0:	f383 8812 	msr	BASEPRI_MAX, r3
    eac4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eac8:	4814      	ldr	r0, [pc, #80]	; (eb1c <z_impl_k_sem_give+0x68>)
    eaca:	f7ff fc8d 	bl	e3e8 <z_spin_lock_valid>
    eace:	b968      	cbnz	r0, eaec <z_impl_k_sem_give+0x38>
    ead0:	4a13      	ldr	r2, [pc, #76]	; (eb20 <z_impl_k_sem_give+0x6c>)
    ead2:	4914      	ldr	r1, [pc, #80]	; (eb24 <z_impl_k_sem_give+0x70>)
    ead4:	4814      	ldr	r0, [pc, #80]	; (eb28 <z_impl_k_sem_give+0x74>)
    ead6:	238e      	movs	r3, #142	; 0x8e
    ead8:	f009 f8b9 	bl	17c4e <assert_print>
    eadc:	490f      	ldr	r1, [pc, #60]	; (eb1c <z_impl_k_sem_give+0x68>)
    eade:	4813      	ldr	r0, [pc, #76]	; (eb2c <z_impl_k_sem_give+0x78>)
    eae0:	f009 f8b5 	bl	17c4e <assert_print>
    eae4:	480e      	ldr	r0, [pc, #56]	; (eb20 <z_impl_k_sem_give+0x6c>)
    eae6:	218e      	movs	r1, #142	; 0x8e
    eae8:	f009 f8aa 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    eaec:	480b      	ldr	r0, [pc, #44]	; (eb1c <z_impl_k_sem_give+0x68>)
    eaee:	f7ff fc99 	bl	e424 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    eaf2:	4620      	mov	r0, r4
    eaf4:	f001 f8e0 	bl	fcb8 <z_unpend_first_thread>

	if (thread != NULL) {
    eaf8:	b148      	cbz	r0, eb0e <z_impl_k_sem_give+0x5a>
    eafa:	2200      	movs	r2, #0
    eafc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    eafe:	f000 fd2f 	bl	f560 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    eb02:	4629      	mov	r1, r5
    eb04:	4805      	ldr	r0, [pc, #20]	; (eb1c <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    eb06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    eb0a:	f000 badd 	b.w	f0c8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    eb0e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    eb12:	429a      	cmp	r2, r3
    eb14:	bf18      	it	ne
    eb16:	3301      	addne	r3, #1
    eb18:	60a3      	str	r3, [r4, #8]
}
    eb1a:	e7f2      	b.n	eb02 <z_impl_k_sem_give+0x4e>
    eb1c:	20023a14 	.word	0x20023a14
    eb20:	0003bd42 	.word	0x0003bd42
    eb24:	0003bd9b 	.word	0x0003bd9b
    eb28:	0003baf1 	.word	0x0003baf1
    eb2c:	0003bdb0 	.word	0x0003bdb0

0000eb30 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    eb30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    eb32:	4604      	mov	r4, r0
    eb34:	4616      	mov	r6, r2
    eb36:	461d      	mov	r5, r3
    eb38:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    eb3c:	b17b      	cbz	r3, eb5e <z_impl_k_sem_take+0x2e>
    eb3e:	ea52 0305 	orrs.w	r3, r2, r5
    eb42:	d00c      	beq.n	eb5e <z_impl_k_sem_take+0x2e>
    eb44:	4935      	ldr	r1, [pc, #212]	; (ec1c <z_impl_k_sem_take+0xec>)
    eb46:	4a36      	ldr	r2, [pc, #216]	; (ec20 <z_impl_k_sem_take+0xf0>)
    eb48:	4836      	ldr	r0, [pc, #216]	; (ec24 <z_impl_k_sem_take+0xf4>)
    eb4a:	2379      	movs	r3, #121	; 0x79
    eb4c:	f009 f87f 	bl	17c4e <assert_print>
    eb50:	4835      	ldr	r0, [pc, #212]	; (ec28 <z_impl_k_sem_take+0xf8>)
    eb52:	f009 f87c 	bl	17c4e <assert_print>
    eb56:	4832      	ldr	r0, [pc, #200]	; (ec20 <z_impl_k_sem_take+0xf0>)
    eb58:	2179      	movs	r1, #121	; 0x79
    eb5a:	f009 f871 	bl	17c40 <assert_post_action>
    eb5e:	f04f 0320 	mov.w	r3, #32
    eb62:	f3ef 8711 	mrs	r7, BASEPRI
    eb66:	f383 8812 	msr	BASEPRI_MAX, r3
    eb6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    eb6e:	482f      	ldr	r0, [pc, #188]	; (ec2c <z_impl_k_sem_take+0xfc>)
    eb70:	f7ff fc3a 	bl	e3e8 <z_spin_lock_valid>
    eb74:	b968      	cbnz	r0, eb92 <z_impl_k_sem_take+0x62>
    eb76:	4a2e      	ldr	r2, [pc, #184]	; (ec30 <z_impl_k_sem_take+0x100>)
    eb78:	492e      	ldr	r1, [pc, #184]	; (ec34 <z_impl_k_sem_take+0x104>)
    eb7a:	482a      	ldr	r0, [pc, #168]	; (ec24 <z_impl_k_sem_take+0xf4>)
    eb7c:	238e      	movs	r3, #142	; 0x8e
    eb7e:	f009 f866 	bl	17c4e <assert_print>
    eb82:	492a      	ldr	r1, [pc, #168]	; (ec2c <z_impl_k_sem_take+0xfc>)
    eb84:	482c      	ldr	r0, [pc, #176]	; (ec38 <z_impl_k_sem_take+0x108>)
    eb86:	f009 f862 	bl	17c4e <assert_print>
    eb8a:	4829      	ldr	r0, [pc, #164]	; (ec30 <z_impl_k_sem_take+0x100>)
    eb8c:	218e      	movs	r1, #142	; 0x8e
    eb8e:	f009 f857 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    eb92:	4826      	ldr	r0, [pc, #152]	; (ec2c <z_impl_k_sem_take+0xfc>)
    eb94:	f7ff fc46 	bl	e424 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    eb98:	68a3      	ldr	r3, [r4, #8]
    eb9a:	b1d3      	cbz	r3, ebd2 <z_impl_k_sem_take+0xa2>
		sem->count--;
    eb9c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eb9e:	4823      	ldr	r0, [pc, #140]	; (ec2c <z_impl_k_sem_take+0xfc>)
    eba0:	60a3      	str	r3, [r4, #8]
    eba2:	f7ff fc2f 	bl	e404 <z_spin_unlock_valid>
    eba6:	b968      	cbnz	r0, ebc4 <z_impl_k_sem_take+0x94>
    eba8:	4a21      	ldr	r2, [pc, #132]	; (ec30 <z_impl_k_sem_take+0x100>)
    ebaa:	4924      	ldr	r1, [pc, #144]	; (ec3c <z_impl_k_sem_take+0x10c>)
    ebac:	481d      	ldr	r0, [pc, #116]	; (ec24 <z_impl_k_sem_take+0xf4>)
    ebae:	23b9      	movs	r3, #185	; 0xb9
    ebb0:	f009 f84d 	bl	17c4e <assert_print>
    ebb4:	491d      	ldr	r1, [pc, #116]	; (ec2c <z_impl_k_sem_take+0xfc>)
    ebb6:	4822      	ldr	r0, [pc, #136]	; (ec40 <z_impl_k_sem_take+0x110>)
    ebb8:	f009 f849 	bl	17c4e <assert_print>
    ebbc:	481c      	ldr	r0, [pc, #112]	; (ec30 <z_impl_k_sem_take+0x100>)
    ebbe:	21b9      	movs	r1, #185	; 0xb9
    ebc0:	f009 f83e 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    ebc4:	f387 8811 	msr	BASEPRI, r7
    ebc8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    ebcc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    ebce:	b003      	add	sp, #12
    ebd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ebd2:	ea56 0305 	orrs.w	r3, r6, r5
    ebd6:	d118      	bne.n	ec0a <z_impl_k_sem_take+0xda>
    ebd8:	4814      	ldr	r0, [pc, #80]	; (ec2c <z_impl_k_sem_take+0xfc>)
    ebda:	f7ff fc13 	bl	e404 <z_spin_unlock_valid>
    ebde:	b968      	cbnz	r0, ebfc <z_impl_k_sem_take+0xcc>
    ebe0:	4a13      	ldr	r2, [pc, #76]	; (ec30 <z_impl_k_sem_take+0x100>)
    ebe2:	4916      	ldr	r1, [pc, #88]	; (ec3c <z_impl_k_sem_take+0x10c>)
    ebe4:	480f      	ldr	r0, [pc, #60]	; (ec24 <z_impl_k_sem_take+0xf4>)
    ebe6:	23b9      	movs	r3, #185	; 0xb9
    ebe8:	f009 f831 	bl	17c4e <assert_print>
    ebec:	490f      	ldr	r1, [pc, #60]	; (ec2c <z_impl_k_sem_take+0xfc>)
    ebee:	4814      	ldr	r0, [pc, #80]	; (ec40 <z_impl_k_sem_take+0x110>)
    ebf0:	f009 f82d 	bl	17c4e <assert_print>
    ebf4:	480e      	ldr	r0, [pc, #56]	; (ec30 <z_impl_k_sem_take+0x100>)
    ebf6:	21b9      	movs	r1, #185	; 0xb9
    ebf8:	f009 f822 	bl	17c40 <assert_post_action>
    ebfc:	f387 8811 	msr	BASEPRI, r7
    ec00:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    ec04:	f06f 000f 	mvn.w	r0, #15
    ec08:	e7e1      	b.n	ebce <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ec0a:	e9cd 6500 	strd	r6, r5, [sp]
    ec0e:	4622      	mov	r2, r4
    ec10:	4639      	mov	r1, r7
    ec12:	4806      	ldr	r0, [pc, #24]	; (ec2c <z_impl_k_sem_take+0xfc>)
    ec14:	f000 fe56 	bl	f8c4 <z_pend_curr>
	return ret;
    ec18:	e7d9      	b.n	ebce <z_impl_k_sem_take+0x9e>
    ec1a:	bf00      	nop
    ec1c:	0003dd7d 	.word	0x0003dd7d
    ec20:	0003dd5d 	.word	0x0003dd5d
    ec24:	0003baf1 	.word	0x0003baf1
    ec28:	0003dca0 	.word	0x0003dca0
    ec2c:	20023a14 	.word	0x20023a14
    ec30:	0003bd42 	.word	0x0003bd42
    ec34:	0003bd9b 	.word	0x0003bd9b
    ec38:	0003bdb0 	.word	0x0003bdb0
    ec3c:	0003bd6f 	.word	0x0003bd6f
    ec40:	0003bd86 	.word	0x0003bd86

0000ec44 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ec48:	4e7b      	ldr	r6, [pc, #492]	; (ee38 <work_queue_main+0x1f4>)
	return list->head;
    ec4a:	4f7c      	ldr	r7, [pc, #496]	; (ee3c <work_queue_main+0x1f8>)
    ec4c:	b085      	sub	sp, #20
    ec4e:	4604      	mov	r4, r0
	__asm__ volatile(
    ec50:	f04f 0320 	mov.w	r3, #32
    ec54:	f3ef 8811 	mrs	r8, BASEPRI
    ec58:	f383 8812 	msr	BASEPRI_MAX, r3
    ec5c:	f3bf 8f6f 	isb	sy
    ec60:	4630      	mov	r0, r6
    ec62:	f7ff fbc1 	bl	e3e8 <z_spin_lock_valid>
    ec66:	b968      	cbnz	r0, ec84 <work_queue_main+0x40>
    ec68:	4a75      	ldr	r2, [pc, #468]	; (ee40 <work_queue_main+0x1fc>)
    ec6a:	4976      	ldr	r1, [pc, #472]	; (ee44 <work_queue_main+0x200>)
    ec6c:	4876      	ldr	r0, [pc, #472]	; (ee48 <work_queue_main+0x204>)
    ec6e:	238e      	movs	r3, #142	; 0x8e
    ec70:	f008 ffed 	bl	17c4e <assert_print>
    ec74:	4875      	ldr	r0, [pc, #468]	; (ee4c <work_queue_main+0x208>)
    ec76:	4631      	mov	r1, r6
    ec78:	f008 ffe9 	bl	17c4e <assert_print>
    ec7c:	4870      	ldr	r0, [pc, #448]	; (ee40 <work_queue_main+0x1fc>)
    ec7e:	218e      	movs	r1, #142	; 0x8e
    ec80:	f008 ffde 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    ec84:	4630      	mov	r0, r6
    ec86:	f7ff fbcd 	bl	e424 <z_spin_lock_set_owner>
    ec8a:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
Z_GENLIST_GET(slist, snode)
    ec8e:	b9b5      	cbnz	r5, ecbe <work_queue_main+0x7a>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    ec90:	2102      	movs	r1, #2
    ec92:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    ec96:	f009 fec8 	bl	18a2a <flag_test_and_clear>
    ec9a:	2800      	cmp	r0, #0
    ec9c:	f040 8094 	bne.w	edc8 <work_queue_main+0x184>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    eca0:	2300      	movs	r3, #0
    eca2:	9302      	str	r3, [sp, #8]
    eca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ecac:	e9cd 2300 	strd	r2, r3, [sp]
    ecb0:	4641      	mov	r1, r8
    ecb2:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
    ecb6:	4630      	mov	r0, r6
    ecb8:	f001 faee 	bl	10298 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    ecbc:	e7c8      	b.n	ec50 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ecbe:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	return node->next;
    ecc2:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    ecc4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ecc8:	4295      	cmp	r5, r2
    ecca:	d101      	bne.n	ecd0 <work_queue_main+0x8c>
	list->tail = node;
    eccc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	*flagp |= BIT(bit);
    ecd0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
			handler = work->handler;
    ecd4:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp |= BIT(bit);
    ecd8:	f043 0302 	orr.w	r3, r3, #2
    ecdc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	*flagp &= ~BIT(bit);
    ece0:	68eb      	ldr	r3, [r5, #12]
    ece2:	f023 0304 	bic.w	r3, r3, #4
    ece6:	f043 0301 	orr.w	r3, r3, #1
    ecea:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ecec:	4630      	mov	r0, r6
    ecee:	f7ff fb89 	bl	e404 <z_spin_unlock_valid>
    ecf2:	b968      	cbnz	r0, ed10 <work_queue_main+0xcc>
    ecf4:	4a52      	ldr	r2, [pc, #328]	; (ee40 <work_queue_main+0x1fc>)
    ecf6:	4956      	ldr	r1, [pc, #344]	; (ee50 <work_queue_main+0x20c>)
    ecf8:	4853      	ldr	r0, [pc, #332]	; (ee48 <work_queue_main+0x204>)
    ecfa:	23b9      	movs	r3, #185	; 0xb9
    ecfc:	f008 ffa7 	bl	17c4e <assert_print>
    ed00:	4854      	ldr	r0, [pc, #336]	; (ee54 <work_queue_main+0x210>)
    ed02:	4631      	mov	r1, r6
    ed04:	f008 ffa3 	bl	17c4e <assert_print>
    ed08:	484d      	ldr	r0, [pc, #308]	; (ee40 <work_queue_main+0x1fc>)
    ed0a:	21b9      	movs	r1, #185	; 0xb9
    ed0c:	f008 ff98 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    ed10:	f388 8811 	msr	BASEPRI, r8
    ed14:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    ed18:	f1b9 0f00 	cmp.w	r9, #0
    ed1c:	d10b      	bne.n	ed36 <work_queue_main+0xf2>
    ed1e:	494e      	ldr	r1, [pc, #312]	; (ee58 <work_queue_main+0x214>)
    ed20:	4849      	ldr	r0, [pc, #292]	; (ee48 <work_queue_main+0x204>)
    ed22:	4a4e      	ldr	r2, [pc, #312]	; (ee5c <work_queue_main+0x218>)
    ed24:	f44f 7322 	mov.w	r3, #648	; 0x288
    ed28:	f008 ff91 	bl	17c4e <assert_print>
    ed2c:	484b      	ldr	r0, [pc, #300]	; (ee5c <work_queue_main+0x218>)
    ed2e:	f44f 7122 	mov.w	r1, #648	; 0x288
    ed32:	f008 ff85 	bl	17c40 <assert_post_action>
		handler(work);
    ed36:	4628      	mov	r0, r5
    ed38:	47c8      	blx	r9
	__asm__ volatile(
    ed3a:	f04f 0320 	mov.w	r3, #32
    ed3e:	f3ef 8a11 	mrs	sl, BASEPRI
    ed42:	f383 8812 	msr	BASEPRI_MAX, r3
    ed46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ed4a:	4630      	mov	r0, r6
    ed4c:	f7ff fb4c 	bl	e3e8 <z_spin_lock_valid>
    ed50:	b968      	cbnz	r0, ed6e <work_queue_main+0x12a>
    ed52:	4a3b      	ldr	r2, [pc, #236]	; (ee40 <work_queue_main+0x1fc>)
    ed54:	493b      	ldr	r1, [pc, #236]	; (ee44 <work_queue_main+0x200>)
    ed56:	483c      	ldr	r0, [pc, #240]	; (ee48 <work_queue_main+0x204>)
    ed58:	238e      	movs	r3, #142	; 0x8e
    ed5a:	f008 ff78 	bl	17c4e <assert_print>
    ed5e:	483b      	ldr	r0, [pc, #236]	; (ee4c <work_queue_main+0x208>)
    ed60:	4631      	mov	r1, r6
    ed62:	f008 ff74 	bl	17c4e <assert_print>
    ed66:	4836      	ldr	r0, [pc, #216]	; (ee40 <work_queue_main+0x1fc>)
    ed68:	218e      	movs	r1, #142	; 0x8e
    ed6a:	f008 ff69 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    ed6e:	4630      	mov	r0, r6
    ed70:	f7ff fb58 	bl	e424 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    ed74:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ed76:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    ed78:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ed7c:	d42e      	bmi.n	eddc <work_queue_main+0x198>
	*flagp &= ~BIT(bit);
    ed7e:	60ea      	str	r2, [r5, #12]
    ed80:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    ed84:	f023 0302 	bic.w	r3, r3, #2
    ed88:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ed8c:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    ed8e:	f3c3 2500 	ubfx	r5, r3, #8, #1
    ed92:	f7ff fb37 	bl	e404 <z_spin_unlock_valid>
    ed96:	b968      	cbnz	r0, edb4 <work_queue_main+0x170>
    ed98:	4a29      	ldr	r2, [pc, #164]	; (ee40 <work_queue_main+0x1fc>)
    ed9a:	492d      	ldr	r1, [pc, #180]	; (ee50 <work_queue_main+0x20c>)
    ed9c:	482a      	ldr	r0, [pc, #168]	; (ee48 <work_queue_main+0x204>)
    ed9e:	23b9      	movs	r3, #185	; 0xb9
    eda0:	f008 ff55 	bl	17c4e <assert_print>
    eda4:	482b      	ldr	r0, [pc, #172]	; (ee54 <work_queue_main+0x210>)
    eda6:	4631      	mov	r1, r6
    eda8:	f008 ff51 	bl	17c4e <assert_print>
    edac:	4824      	ldr	r0, [pc, #144]	; (ee40 <work_queue_main+0x1fc>)
    edae:	21b9      	movs	r1, #185	; 0xb9
    edb0:	f008 ff46 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    edb4:	f38a 8811 	msr	BASEPRI, sl
    edb8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    edbc:	2d00      	cmp	r5, #0
    edbe:	f47f af47 	bne.w	ec50 <work_queue_main+0xc>
	z_impl_k_yield();
    edc2:	f000 ffd5 	bl	fd70 <z_impl_k_yield>
}
    edc6:	e743      	b.n	ec50 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    edc8:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    edcc:	2200      	movs	r2, #0
    edce:	2101      	movs	r1, #1
    edd0:	4628      	mov	r0, r5
    edd2:	f001 fa09 	bl	101e8 <z_sched_wake>
    edd6:	2800      	cmp	r0, #0
    edd8:	d1f8      	bne.n	edcc <work_queue_main+0x188>
    edda:	e761      	b.n	eca0 <work_queue_main+0x5c>
	return list->head;
    eddc:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    edde:	f023 0303 	bic.w	r3, r3, #3
    ede2:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ede4:	2800      	cmp	r0, #0
    ede6:	d0cb      	beq.n	ed80 <work_queue_main+0x13c>
	return node->next;
    ede8:	f04f 0800 	mov.w	r8, #0
    edec:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
    edf0:	46c3      	mov	fp, r8
		if (wc->work == work) {
    edf2:	6843      	ldr	r3, [r0, #4]
    edf4:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    edf6:	4602      	mov	r2, r0
		if (wc->work == work) {
    edf8:	d10d      	bne.n	ee16 <work_queue_main+0x1d2>
	return node->next;
    edfa:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    edfc:	f1b8 0f00 	cmp.w	r8, #0
    ee00:	d111      	bne.n	ee26 <work_queue_main+0x1e2>
    ee02:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    ee04:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    ee06:	4283      	cmp	r3, r0
    ee08:	d100      	bne.n	ee0c <work_queue_main+0x1c8>
	list->tail = node;
    ee0a:	607a      	str	r2, [r7, #4]
	parent->next = child;
    ee0c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    ee10:	f7ff fe50 	bl	eab4 <z_impl_k_sem_give>
}
    ee14:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ee16:	f1b9 0f00 	cmp.w	r9, #0
    ee1a:	d0b1      	beq.n	ed80 <work_queue_main+0x13c>
	return node->next;
    ee1c:	4648      	mov	r0, r9
    ee1e:	4690      	mov	r8, r2
    ee20:	f8d9 9000 	ldr.w	r9, [r9]
    ee24:	e7e5      	b.n	edf2 <work_queue_main+0x1ae>
	return list->tail;
    ee26:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
    ee28:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
    ee2c:	4298      	cmp	r0, r3
	list->tail = node;
    ee2e:	bf08      	it	eq
    ee30:	f8c7 8004 	streq.w	r8, [r7, #4]
}
    ee34:	e7ea      	b.n	ee0c <work_queue_main+0x1c8>
    ee36:	bf00      	nop
    ee38:	20023a18 	.word	0x20023a18
    ee3c:	20023a1c 	.word	0x20023a1c
    ee40:	0003bd42 	.word	0x0003bd42
    ee44:	0003bd9b 	.word	0x0003bd9b
    ee48:	0003baf1 	.word	0x0003baf1
    ee4c:	0003bdb0 	.word	0x0003bdb0
    ee50:	0003bd6f 	.word	0x0003bd6f
    ee54:	0003bd86 	.word	0x0003bd86
    ee58:	0003ddec 	.word	0x0003ddec
    ee5c:	0003ddcb 	.word	0x0003ddcb

0000ee60 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    ee60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee64:	b088      	sub	sp, #32
    ee66:	460e      	mov	r6, r1
    ee68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ee6a:	4617      	mov	r7, r2
    ee6c:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    ee6e:	4604      	mov	r4, r0
    ee70:	b958      	cbnz	r0, ee8a <k_work_queue_start+0x2a>
    ee72:	492e      	ldr	r1, [pc, #184]	; (ef2c <k_work_queue_start+0xcc>)
    ee74:	482e      	ldr	r0, [pc, #184]	; (ef30 <k_work_queue_start+0xd0>)
    ee76:	4a2f      	ldr	r2, [pc, #188]	; (ef34 <k_work_queue_start+0xd4>)
    ee78:	f240 23b5 	movw	r3, #693	; 0x2b5
    ee7c:	f008 fee7 	bl	17c4e <assert_print>
    ee80:	482c      	ldr	r0, [pc, #176]	; (ef34 <k_work_queue_start+0xd4>)
    ee82:	f240 21b5 	movw	r1, #693	; 0x2b5
    ee86:	f008 fedb 	bl	17c40 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    ee8a:	b95e      	cbnz	r6, eea4 <k_work_queue_start+0x44>
    ee8c:	492a      	ldr	r1, [pc, #168]	; (ef38 <k_work_queue_start+0xd8>)
    ee8e:	4828      	ldr	r0, [pc, #160]	; (ef30 <k_work_queue_start+0xd0>)
    ee90:	4a28      	ldr	r2, [pc, #160]	; (ef34 <k_work_queue_start+0xd4>)
    ee92:	f240 23b6 	movw	r3, #694	; 0x2b6
    ee96:	f008 feda 	bl	17c4e <assert_print>
    ee9a:	4826      	ldr	r0, [pc, #152]	; (ef34 <k_work_queue_start+0xd4>)
    ee9c:	f240 21b6 	movw	r1, #694	; 0x2b6
    eea0:	f008 fece 	bl	17c40 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    eea4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    eea8:	07db      	lsls	r3, r3, #31
    eeaa:	d50b      	bpl.n	eec4 <k_work_queue_start+0x64>
    eeac:	4923      	ldr	r1, [pc, #140]	; (ef3c <k_work_queue_start+0xdc>)
    eeae:	4820      	ldr	r0, [pc, #128]	; (ef30 <k_work_queue_start+0xd0>)
    eeb0:	4a20      	ldr	r2, [pc, #128]	; (ef34 <k_work_queue_start+0xd4>)
    eeb2:	f240 23b7 	movw	r3, #695	; 0x2b7
    eeb6:	f008 feca 	bl	17c4e <assert_print>
    eeba:	481e      	ldr	r0, [pc, #120]	; (ef34 <k_work_queue_start+0xd4>)
    eebc:	f240 21b7 	movw	r1, #695	; 0x2b7
    eec0:	f008 febe 	bl	17c40 <assert_post_action>
	list->head = NULL;
    eec4:	2300      	movs	r3, #0
	list->tail = NULL;
    eec6:	e9c4 3330 	strd	r3, r3, [r4, #192]	; 0xc0
    eeca:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
	list->tail = (sys_dnode_t *)list;
    eece:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
    eed2:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    eed6:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    eeda:	b32d      	cbz	r5, ef28 <k_work_queue_start+0xc8>
    eedc:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    eede:	2b00      	cmp	r3, #0
    eee0:	f240 1101 	movw	r1, #257	; 0x101
    eee4:	bf08      	it	eq
    eee6:	2101      	moveq	r1, #1
	*flagp = flags;
    eee8:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    eeec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eef4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    eef8:	2200      	movs	r2, #0
    eefa:	e9cd 8203 	strd	r8, r2, [sp, #12]
    eefe:	e9cd 2201 	strd	r2, r2, [sp, #4]
    ef02:	4b0f      	ldr	r3, [pc, #60]	; (ef40 <k_work_queue_start+0xe0>)
    ef04:	9400      	str	r4, [sp, #0]
    ef06:	463a      	mov	r2, r7
    ef08:	4631      	mov	r1, r6
    ef0a:	4620      	mov	r0, r4
    ef0c:	f7ff f994 	bl	e238 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    ef10:	b125      	cbz	r5, ef1c <k_work_queue_start+0xbc>
    ef12:	6829      	ldr	r1, [r5, #0]
    ef14:	b111      	cbz	r1, ef1c <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    ef16:	4620      	mov	r0, r4
    ef18:	f009 fd4e 	bl	189b8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    ef1c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    ef1e:	b008      	add	sp, #32
    ef20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef24:	f009 bd4d 	b.w	189c2 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    ef28:	2101      	movs	r1, #1
    ef2a:	e7dd      	b.n	eee8 <k_work_queue_start+0x88>
    ef2c:	0003cf0a 	.word	0x0003cf0a
    ef30:	0003baf1 	.word	0x0003baf1
    ef34:	0003ddcb 	.word	0x0003ddcb
    ef38:	0003de03 	.word	0x0003de03
    ef3c:	0003de09 	.word	0x0003de09
    ef40:	0000ec45 	.word	0x0000ec45

0000ef44 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    ef44:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    ef46:	4d07      	ldr	r5, [pc, #28]	; (ef64 <z_reset_time_slice+0x20>)
    ef48:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    ef4a:	b154      	cbz	r4, ef62 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    ef4c:	f7fb fe6a 	bl	ac24 <sys_clock_elapsed>
    ef50:	4b05      	ldr	r3, [pc, #20]	; (ef68 <z_reset_time_slice+0x24>)
    ef52:	4420      	add	r0, r4
    ef54:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    ef56:	2100      	movs	r1, #0
    ef58:	6828      	ldr	r0, [r5, #0]
	}
}
    ef5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    ef5e:	f001 bb6f 	b.w	10640 <z_set_timeout_expiry>
}
    ef62:	bd38      	pop	{r3, r4, r5, pc}
    ef64:	20023a30 	.word	0x20023a30
    ef68:	200239e4 	.word	0x200239e4

0000ef6c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef6e:	4604      	mov	r4, r0
    ef70:	460d      	mov	r5, r1
	__asm__ volatile(
    ef72:	f04f 0320 	mov.w	r3, #32
    ef76:	f3ef 8711 	mrs	r7, BASEPRI
    ef7a:	f383 8812 	msr	BASEPRI_MAX, r3
    ef7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ef82:	4823      	ldr	r0, [pc, #140]	; (f010 <k_sched_time_slice_set+0xa4>)
    ef84:	f7ff fa30 	bl	e3e8 <z_spin_lock_valid>
    ef88:	b968      	cbnz	r0, efa6 <k_sched_time_slice_set+0x3a>
    ef8a:	4a22      	ldr	r2, [pc, #136]	; (f014 <k_sched_time_slice_set+0xa8>)
    ef8c:	4922      	ldr	r1, [pc, #136]	; (f018 <k_sched_time_slice_set+0xac>)
    ef8e:	4823      	ldr	r0, [pc, #140]	; (f01c <k_sched_time_slice_set+0xb0>)
    ef90:	238e      	movs	r3, #142	; 0x8e
    ef92:	f008 fe5c 	bl	17c4e <assert_print>
    ef96:	491e      	ldr	r1, [pc, #120]	; (f010 <k_sched_time_slice_set+0xa4>)
    ef98:	4821      	ldr	r0, [pc, #132]	; (f020 <k_sched_time_slice_set+0xb4>)
    ef9a:	f008 fe58 	bl	17c4e <assert_print>
    ef9e:	481d      	ldr	r0, [pc, #116]	; (f014 <k_sched_time_slice_set+0xa8>)
    efa0:	218e      	movs	r1, #142	; 0x8e
    efa2:	f008 fe4d 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    efa6:	481a      	ldr	r0, [pc, #104]	; (f010 <k_sched_time_slice_set+0xa4>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    efa8:	4e1e      	ldr	r6, [pc, #120]	; (f024 <k_sched_time_slice_set+0xb8>)
    efaa:	f7ff fa3b 	bl	e424 <z_spin_lock_set_owner>
    efae:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    efb0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    efb4:	f240 30e7 	movw	r0, #999	; 0x3e7
    efb8:	6131      	str	r1, [r6, #16]
    efba:	2300      	movs	r3, #0
    efbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    efc0:	fbe4 010c 	umlal	r0, r1, r4, ip
    efc4:	f7f1 fde2 	bl	b8c <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    efc8:	2c00      	cmp	r4, #0
    efca:	4b17      	ldr	r3, [pc, #92]	; (f028 <k_sched_time_slice_set+0xbc>)
    efcc:	dc1c      	bgt.n	f008 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    efce:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    efd0:	4b16      	ldr	r3, [pc, #88]	; (f02c <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    efd2:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    efd4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    efd6:	f7ff ffb5 	bl	ef44 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    efda:	480d      	ldr	r0, [pc, #52]	; (f010 <k_sched_time_slice_set+0xa4>)
    efdc:	f7ff fa12 	bl	e404 <z_spin_unlock_valid>
    efe0:	b968      	cbnz	r0, effe <k_sched_time_slice_set+0x92>
    efe2:	4a0c      	ldr	r2, [pc, #48]	; (f014 <k_sched_time_slice_set+0xa8>)
    efe4:	4912      	ldr	r1, [pc, #72]	; (f030 <k_sched_time_slice_set+0xc4>)
    efe6:	480d      	ldr	r0, [pc, #52]	; (f01c <k_sched_time_slice_set+0xb0>)
    efe8:	23b9      	movs	r3, #185	; 0xb9
    efea:	f008 fe30 	bl	17c4e <assert_print>
    efee:	4908      	ldr	r1, [pc, #32]	; (f010 <k_sched_time_slice_set+0xa4>)
    eff0:	4810      	ldr	r0, [pc, #64]	; (f034 <k_sched_time_slice_set+0xc8>)
    eff2:	f008 fe2c 	bl	17c4e <assert_print>
    eff6:	4807      	ldr	r0, [pc, #28]	; (f014 <k_sched_time_slice_set+0xa8>)
    eff8:	21b9      	movs	r1, #185	; 0xb9
    effa:	f008 fe21 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    effe:	f387 8811 	msr	BASEPRI, r7
    f002:	f3bf 8f6f 	isb	sy
	}
}
    f006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    f008:	2802      	cmp	r0, #2
    f00a:	bfb8      	it	lt
    f00c:	2002      	movlt	r0, #2
    f00e:	e7de      	b.n	efce <k_sched_time_slice_set+0x62>
    f010:	20023a28 	.word	0x20023a28
    f014:	0003bd42 	.word	0x0003bd42
    f018:	0003bd9b 	.word	0x0003bd9b
    f01c:	0003baf1 	.word	0x0003baf1
    f020:	0003bdb0 	.word	0x0003bdb0
    f024:	200239e4 	.word	0x200239e4
    f028:	20023a30 	.word	0x20023a30
    f02c:	20023a2c 	.word	0x20023a2c
    f030:	0003bd6f 	.word	0x0003bd6f
    f034:	0003bd86 	.word	0x0003bd86

0000f038 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    f038:	b538      	push	{r3, r4, r5, lr}
    f03a:	4604      	mov	r4, r0
	__asm__ volatile(
    f03c:	f04f 0320 	mov.w	r3, #32
    f040:	f3ef 8511 	mrs	r5, BASEPRI
    f044:	f383 8812 	msr	BASEPRI_MAX, r3
    f048:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f04c:	4817      	ldr	r0, [pc, #92]	; (f0ac <z_unpend_thread_no_timeout+0x74>)
    f04e:	f7ff f9cb 	bl	e3e8 <z_spin_lock_valid>
    f052:	b968      	cbnz	r0, f070 <z_unpend_thread_no_timeout+0x38>
    f054:	4a16      	ldr	r2, [pc, #88]	; (f0b0 <z_unpend_thread_no_timeout+0x78>)
    f056:	4917      	ldr	r1, [pc, #92]	; (f0b4 <z_unpend_thread_no_timeout+0x7c>)
    f058:	4817      	ldr	r0, [pc, #92]	; (f0b8 <z_unpend_thread_no_timeout+0x80>)
    f05a:	238e      	movs	r3, #142	; 0x8e
    f05c:	f008 fdf7 	bl	17c4e <assert_print>
    f060:	4912      	ldr	r1, [pc, #72]	; (f0ac <z_unpend_thread_no_timeout+0x74>)
    f062:	4816      	ldr	r0, [pc, #88]	; (f0bc <z_unpend_thread_no_timeout+0x84>)
    f064:	f008 fdf3 	bl	17c4e <assert_print>
    f068:	4811      	ldr	r0, [pc, #68]	; (f0b0 <z_unpend_thread_no_timeout+0x78>)
    f06a:	218e      	movs	r1, #142	; 0x8e
    f06c:	f008 fde8 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    f070:	480e      	ldr	r0, [pc, #56]	; (f0ac <z_unpend_thread_no_timeout+0x74>)
    f072:	f7ff f9d7 	bl	e424 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    f076:	4620      	mov	r0, r4
    f078:	f000 f900 	bl	f27c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f07c:	480b      	ldr	r0, [pc, #44]	; (f0ac <z_unpend_thread_no_timeout+0x74>)
    f07e:	f7ff f9c1 	bl	e404 <z_spin_unlock_valid>
    f082:	b968      	cbnz	r0, f0a0 <z_unpend_thread_no_timeout+0x68>
    f084:	4a0a      	ldr	r2, [pc, #40]	; (f0b0 <z_unpend_thread_no_timeout+0x78>)
    f086:	490e      	ldr	r1, [pc, #56]	; (f0c0 <z_unpend_thread_no_timeout+0x88>)
    f088:	480b      	ldr	r0, [pc, #44]	; (f0b8 <z_unpend_thread_no_timeout+0x80>)
    f08a:	23b9      	movs	r3, #185	; 0xb9
    f08c:	f008 fddf 	bl	17c4e <assert_print>
    f090:	4906      	ldr	r1, [pc, #24]	; (f0ac <z_unpend_thread_no_timeout+0x74>)
    f092:	480c      	ldr	r0, [pc, #48]	; (f0c4 <z_unpend_thread_no_timeout+0x8c>)
    f094:	f008 fddb 	bl	17c4e <assert_print>
    f098:	4805      	ldr	r0, [pc, #20]	; (f0b0 <z_unpend_thread_no_timeout+0x78>)
    f09a:	21b9      	movs	r1, #185	; 0xb9
    f09c:	f008 fdd0 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    f0a0:	f385 8811 	msr	BASEPRI, r5
    f0a4:	f3bf 8f6f 	isb	sy
	}
}
    f0a8:	bd38      	pop	{r3, r4, r5, pc}
    f0aa:	bf00      	nop
    f0ac:	20023a28 	.word	0x20023a28
    f0b0:	0003bd42 	.word	0x0003bd42
    f0b4:	0003bd9b 	.word	0x0003bd9b
    f0b8:	0003baf1 	.word	0x0003baf1
    f0bc:	0003bdb0 	.word	0x0003bdb0
    f0c0:	0003bd6f 	.word	0x0003bd6f
    f0c4:	0003bd86 	.word	0x0003bd86

0000f0c8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    f0c8:	b538      	push	{r3, r4, r5, lr}
    f0ca:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f0cc:	460d      	mov	r5, r1
    f0ce:	b9e9      	cbnz	r1, f10c <z_reschedule+0x44>
    f0d0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    f0d4:	b9d3      	cbnz	r3, f10c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    f0d6:	4b19      	ldr	r3, [pc, #100]	; (f13c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    f0d8:	69da      	ldr	r2, [r3, #28]
    f0da:	689b      	ldr	r3, [r3, #8]
    f0dc:	429a      	cmp	r2, r3
    f0de:	d015      	beq.n	f10c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f0e0:	f7ff f990 	bl	e404 <z_spin_unlock_valid>
    f0e4:	b968      	cbnz	r0, f102 <z_reschedule+0x3a>
    f0e6:	4a16      	ldr	r2, [pc, #88]	; (f140 <z_reschedule+0x78>)
    f0e8:	4916      	ldr	r1, [pc, #88]	; (f144 <z_reschedule+0x7c>)
    f0ea:	4817      	ldr	r0, [pc, #92]	; (f148 <z_reschedule+0x80>)
    f0ec:	23d0      	movs	r3, #208	; 0xd0
    f0ee:	f008 fdae 	bl	17c4e <assert_print>
    f0f2:	4816      	ldr	r0, [pc, #88]	; (f14c <z_reschedule+0x84>)
    f0f4:	4621      	mov	r1, r4
    f0f6:	f008 fdaa 	bl	17c4e <assert_print>
    f0fa:	4811      	ldr	r0, [pc, #68]	; (f140 <z_reschedule+0x78>)
    f0fc:	21d0      	movs	r1, #208	; 0xd0
    f0fe:	f008 fd9f 	bl	17c40 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    f102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    f106:	2000      	movs	r0, #0
    f108:	f7f9 b952 	b.w	83b0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f10c:	4620      	mov	r0, r4
    f10e:	f7ff f979 	bl	e404 <z_spin_unlock_valid>
    f112:	b968      	cbnz	r0, f130 <z_reschedule+0x68>
    f114:	4a0a      	ldr	r2, [pc, #40]	; (f140 <z_reschedule+0x78>)
    f116:	490b      	ldr	r1, [pc, #44]	; (f144 <z_reschedule+0x7c>)
    f118:	480b      	ldr	r0, [pc, #44]	; (f148 <z_reschedule+0x80>)
    f11a:	23b9      	movs	r3, #185	; 0xb9
    f11c:	f008 fd97 	bl	17c4e <assert_print>
    f120:	480a      	ldr	r0, [pc, #40]	; (f14c <z_reschedule+0x84>)
    f122:	4621      	mov	r1, r4
    f124:	f008 fd93 	bl	17c4e <assert_print>
    f128:	4805      	ldr	r0, [pc, #20]	; (f140 <z_reschedule+0x78>)
    f12a:	21b9      	movs	r1, #185	; 0xb9
    f12c:	f008 fd88 	bl	17c40 <assert_post_action>
    f130:	f385 8811 	msr	BASEPRI, r5
    f134:	f3bf 8f6f 	isb	sy
    f138:	bd38      	pop	{r3, r4, r5, pc}
    f13a:	bf00      	nop
    f13c:	200239e4 	.word	0x200239e4
    f140:	0003bd42 	.word	0x0003bd42
    f144:	0003bd6f 	.word	0x0003bd6f
    f148:	0003baf1 	.word	0x0003baf1
    f14c:	0003bd86 	.word	0x0003bd86

0000f150 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    f150:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f152:	f04f 0320 	mov.w	r3, #32
    f156:	f3ef 8511 	mrs	r5, BASEPRI
    f15a:	f383 8812 	msr	BASEPRI_MAX, r3
    f15e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f162:	4829      	ldr	r0, [pc, #164]	; (f208 <k_sched_lock+0xb8>)
    f164:	f7ff f940 	bl	e3e8 <z_spin_lock_valid>
    f168:	b968      	cbnz	r0, f186 <k_sched_lock+0x36>
    f16a:	4a28      	ldr	r2, [pc, #160]	; (f20c <k_sched_lock+0xbc>)
    f16c:	4928      	ldr	r1, [pc, #160]	; (f210 <k_sched_lock+0xc0>)
    f16e:	4829      	ldr	r0, [pc, #164]	; (f214 <k_sched_lock+0xc4>)
    f170:	238e      	movs	r3, #142	; 0x8e
    f172:	f008 fd6c 	bl	17c4e <assert_print>
    f176:	4924      	ldr	r1, [pc, #144]	; (f208 <k_sched_lock+0xb8>)
    f178:	4827      	ldr	r0, [pc, #156]	; (f218 <k_sched_lock+0xc8>)
    f17a:	f008 fd68 	bl	17c4e <assert_print>
    f17e:	4823      	ldr	r0, [pc, #140]	; (f20c <k_sched_lock+0xbc>)
    f180:	218e      	movs	r1, #142	; 0x8e
    f182:	f008 fd5d 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    f186:	4820      	ldr	r0, [pc, #128]	; (f208 <k_sched_lock+0xb8>)
    f188:	f7ff f94c 	bl	e424 <z_spin_lock_set_owner>
    f18c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    f190:	b163      	cbz	r3, f1ac <k_sched_lock+0x5c>
    f192:	4922      	ldr	r1, [pc, #136]	; (f21c <k_sched_lock+0xcc>)
    f194:	4a22      	ldr	r2, [pc, #136]	; (f220 <k_sched_lock+0xd0>)
    f196:	481f      	ldr	r0, [pc, #124]	; (f214 <k_sched_lock+0xc4>)
    f198:	23fd      	movs	r3, #253	; 0xfd
    f19a:	f008 fd58 	bl	17c4e <assert_print>
    f19e:	4821      	ldr	r0, [pc, #132]	; (f224 <k_sched_lock+0xd4>)
    f1a0:	f008 fd55 	bl	17c4e <assert_print>
    f1a4:	481e      	ldr	r0, [pc, #120]	; (f220 <k_sched_lock+0xd0>)
    f1a6:	21fd      	movs	r1, #253	; 0xfd
    f1a8:	f008 fd4a 	bl	17c40 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    f1ac:	4c1e      	ldr	r4, [pc, #120]	; (f228 <k_sched_lock+0xd8>)
    f1ae:	68a3      	ldr	r3, [r4, #8]
    f1b0:	7bdb      	ldrb	r3, [r3, #15]
    f1b2:	2b01      	cmp	r3, #1
    f1b4:	d10c      	bne.n	f1d0 <k_sched_lock+0x80>
    f1b6:	491d      	ldr	r1, [pc, #116]	; (f22c <k_sched_lock+0xdc>)
    f1b8:	4a19      	ldr	r2, [pc, #100]	; (f220 <k_sched_lock+0xd0>)
    f1ba:	4816      	ldr	r0, [pc, #88]	; (f214 <k_sched_lock+0xc4>)
    f1bc:	23fe      	movs	r3, #254	; 0xfe
    f1be:	f008 fd46 	bl	17c4e <assert_print>
    f1c2:	4818      	ldr	r0, [pc, #96]	; (f224 <k_sched_lock+0xd4>)
    f1c4:	f008 fd43 	bl	17c4e <assert_print>
    f1c8:	4815      	ldr	r0, [pc, #84]	; (f220 <k_sched_lock+0xd0>)
    f1ca:	21fe      	movs	r1, #254	; 0xfe
    f1cc:	f008 fd38 	bl	17c40 <assert_post_action>
	--_current->base.sched_locked;
    f1d0:	68a2      	ldr	r2, [r4, #8]
    f1d2:	7bd3      	ldrb	r3, [r2, #15]
    f1d4:	3b01      	subs	r3, #1
    f1d6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f1d8:	480b      	ldr	r0, [pc, #44]	; (f208 <k_sched_lock+0xb8>)
    f1da:	f7ff f913 	bl	e404 <z_spin_unlock_valid>
    f1de:	b968      	cbnz	r0, f1fc <k_sched_lock+0xac>
    f1e0:	4a0a      	ldr	r2, [pc, #40]	; (f20c <k_sched_lock+0xbc>)
    f1e2:	4913      	ldr	r1, [pc, #76]	; (f230 <k_sched_lock+0xe0>)
    f1e4:	480b      	ldr	r0, [pc, #44]	; (f214 <k_sched_lock+0xc4>)
    f1e6:	23b9      	movs	r3, #185	; 0xb9
    f1e8:	f008 fd31 	bl	17c4e <assert_print>
    f1ec:	4906      	ldr	r1, [pc, #24]	; (f208 <k_sched_lock+0xb8>)
    f1ee:	4811      	ldr	r0, [pc, #68]	; (f234 <k_sched_lock+0xe4>)
    f1f0:	f008 fd2d 	bl	17c4e <assert_print>
    f1f4:	4805      	ldr	r0, [pc, #20]	; (f20c <k_sched_lock+0xbc>)
    f1f6:	21b9      	movs	r1, #185	; 0xb9
    f1f8:	f008 fd22 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    f1fc:	f385 8811 	msr	BASEPRI, r5
    f200:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    f204:	bd38      	pop	{r3, r4, r5, pc}
    f206:	bf00      	nop
    f208:	20023a28 	.word	0x20023a28
    f20c:	0003bd42 	.word	0x0003bd42
    f210:	0003bd9b 	.word	0x0003bd9b
    f214:	0003baf1 	.word	0x0003baf1
    f218:	0003bdb0 	.word	0x0003bdb0
    f21c:	0003db8b 	.word	0x0003db8b
    f220:	0003dd01 	.word	0x0003dd01
    f224:	0003dca0 	.word	0x0003dca0
    f228:	200239e4 	.word	0x200239e4
    f22c:	0003dd2c 	.word	0x0003dd2c
    f230:	0003bd6f 	.word	0x0003bd6f
    f234:	0003bd86 	.word	0x0003bd86

0000f238 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f238:	4b0c      	ldr	r3, [pc, #48]	; (f26c <z_priq_dumb_remove+0x34>)
    f23a:	4299      	cmp	r1, r3
{
    f23c:	b510      	push	{r4, lr}
    f23e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f240:	d10b      	bne.n	f25a <z_priq_dumb_remove+0x22>
    f242:	490b      	ldr	r1, [pc, #44]	; (f270 <z_priq_dumb_remove+0x38>)
    f244:	480b      	ldr	r0, [pc, #44]	; (f274 <z_priq_dumb_remove+0x3c>)
    f246:	4a0c      	ldr	r2, [pc, #48]	; (f278 <z_priq_dumb_remove+0x40>)
    f248:	f240 433d 	movw	r3, #1085	; 0x43d
    f24c:	f008 fcff 	bl	17c4e <assert_print>
    f250:	4809      	ldr	r0, [pc, #36]	; (f278 <z_priq_dumb_remove+0x40>)
    f252:	f240 413d 	movw	r1, #1085	; 0x43d
    f256:	f008 fcf3 	bl	17c40 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    f25a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    f25e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f260:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f262:	2300      	movs	r3, #0
	node->prev = NULL;
    f264:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    f268:	bd10      	pop	{r4, pc}
    f26a:	bf00      	nop
    f26c:	20000cc8 	.word	0x20000cc8
    f270:	0003de5f 	.word	0x0003de5f
    f274:	0003baf1 	.word	0x0003baf1
    f278:	0003de3d 	.word	0x0003de3d

0000f27c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    f27c:	6883      	ldr	r3, [r0, #8]
{
    f27e:	b510      	push	{r4, lr}
    f280:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    f282:	b95b      	cbnz	r3, f29c <unpend_thread_no_timeout+0x20>
    f284:	490b      	ldr	r1, [pc, #44]	; (f2b4 <unpend_thread_no_timeout+0x38>)
    f286:	480c      	ldr	r0, [pc, #48]	; (f2b8 <unpend_thread_no_timeout+0x3c>)
    f288:	4a0c      	ldr	r2, [pc, #48]	; (f2bc <unpend_thread_no_timeout+0x40>)
    f28a:	f240 23b9 	movw	r3, #697	; 0x2b9
    f28e:	f008 fcde 	bl	17c4e <assert_print>
    f292:	480a      	ldr	r0, [pc, #40]	; (f2bc <unpend_thread_no_timeout+0x40>)
    f294:	f240 21b9 	movw	r1, #697	; 0x2b9
    f298:	f008 fcd2 	bl	17c40 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    f29c:	68a0      	ldr	r0, [r4, #8]
    f29e:	4621      	mov	r1, r4
    f2a0:	f7ff ffca 	bl	f238 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f2a4:	7b63      	ldrb	r3, [r4, #13]
    f2a6:	f023 0302 	bic.w	r3, r3, #2
    f2aa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    f2ac:	2300      	movs	r3, #0
    f2ae:	60a3      	str	r3, [r4, #8]
}
    f2b0:	bd10      	pop	{r4, pc}
    f2b2:	bf00      	nop
    f2b4:	0003de80 	.word	0x0003de80
    f2b8:	0003baf1 	.word	0x0003baf1
    f2bc:	0003de3d 	.word	0x0003de3d

0000f2c0 <update_cache>:
{
    f2c0:	b538      	push	{r3, r4, r5, lr}
    f2c2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    f2c4:	4814      	ldr	r0, [pc, #80]	; (f318 <update_cache+0x58>)
    f2c6:	4d15      	ldr	r5, [pc, #84]	; (f31c <update_cache+0x5c>)
    f2c8:	f009 fbd0 	bl	18a6c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f2cc:	4604      	mov	r4, r0
    f2ce:	b900      	cbnz	r0, f2d2 <update_cache+0x12>
    f2d0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    f2d2:	b9ca      	cbnz	r2, f308 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    f2d4:	68ab      	ldr	r3, [r5, #8]
    f2d6:	b963      	cbnz	r3, f2f2 <update_cache+0x32>
    f2d8:	4911      	ldr	r1, [pc, #68]	; (f320 <update_cache+0x60>)
    f2da:	4a12      	ldr	r2, [pc, #72]	; (f324 <update_cache+0x64>)
    f2dc:	4812      	ldr	r0, [pc, #72]	; (f328 <update_cache+0x68>)
    f2de:	2389      	movs	r3, #137	; 0x89
    f2e0:	f008 fcb5 	bl	17c4e <assert_print>
    f2e4:	4811      	ldr	r0, [pc, #68]	; (f32c <update_cache+0x6c>)
    f2e6:	f008 fcb2 	bl	17c4e <assert_print>
    f2ea:	480e      	ldr	r0, [pc, #56]	; (f324 <update_cache+0x64>)
    f2ec:	2189      	movs	r1, #137	; 0x89
    f2ee:	f008 fca7 	bl	17c40 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    f2f2:	68ab      	ldr	r3, [r5, #8]
    f2f4:	7b5a      	ldrb	r2, [r3, #13]
    f2f6:	06d2      	lsls	r2, r2, #27
    f2f8:	d106      	bne.n	f308 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    f2fa:	69a2      	ldr	r2, [r4, #24]
    f2fc:	b922      	cbnz	r2, f308 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    f2fe:	89da      	ldrh	r2, [r3, #14]
    f300:	2a7f      	cmp	r2, #127	; 0x7f
    f302:	d901      	bls.n	f308 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    f304:	61eb      	str	r3, [r5, #28]
}
    f306:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    f308:	68ab      	ldr	r3, [r5, #8]
    f30a:	42a3      	cmp	r3, r4
    f30c:	d002      	beq.n	f314 <update_cache+0x54>
			z_reset_time_slice(thread);
    f30e:	4620      	mov	r0, r4
    f310:	f7ff fe18 	bl	ef44 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    f314:	61ec      	str	r4, [r5, #28]
}
    f316:	e7f6      	b.n	f306 <update_cache+0x46>
    f318:	20023a04 	.word	0x20023a04
    f31c:	200239e4 	.word	0x200239e4
    f320:	0003de97 	.word	0x0003de97
    f324:	0003de3d 	.word	0x0003de3d
    f328:	0003baf1 	.word	0x0003baf1
    f32c:	0003dca0 	.word	0x0003dca0

0000f330 <move_thread_to_end_of_prio_q>:
{
    f330:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    f332:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    f336:	7b43      	ldrb	r3, [r0, #13]
    f338:	2a00      	cmp	r2, #0
{
    f33a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    f33c:	da06      	bge.n	f34c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f33e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f342:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    f344:	4601      	mov	r1, r0
    f346:	481e      	ldr	r0, [pc, #120]	; (f3c0 <move_thread_to_end_of_prio_q+0x90>)
    f348:	f7ff ff76 	bl	f238 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    f34c:	7b63      	ldrb	r3, [r4, #13]
    f34e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f352:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f354:	4b1b      	ldr	r3, [pc, #108]	; (f3c4 <move_thread_to_end_of_prio_q+0x94>)
    f356:	429c      	cmp	r4, r3
    f358:	d109      	bne.n	f36e <move_thread_to_end_of_prio_q+0x3e>
    f35a:	491b      	ldr	r1, [pc, #108]	; (f3c8 <move_thread_to_end_of_prio_q+0x98>)
    f35c:	481b      	ldr	r0, [pc, #108]	; (f3cc <move_thread_to_end_of_prio_q+0x9c>)
    f35e:	4a1c      	ldr	r2, [pc, #112]	; (f3d0 <move_thread_to_end_of_prio_q+0xa0>)
    f360:	23ba      	movs	r3, #186	; 0xba
    f362:	f008 fc74 	bl	17c4e <assert_print>
    f366:	481a      	ldr	r0, [pc, #104]	; (f3d0 <move_thread_to_end_of_prio_q+0xa0>)
    f368:	21ba      	movs	r1, #186	; 0xba
    f36a:	f008 fc69 	bl	17c40 <assert_post_action>
	return list->head == list;
    f36e:	4a19      	ldr	r2, [pc, #100]	; (f3d4 <move_thread_to_end_of_prio_q+0xa4>)
	return (node == list->tail) ? NULL : node->next;
    f370:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f374:	f102 0520 	add.w	r5, r2, #32
    f378:	42ab      	cmp	r3, r5
    f37a:	d01b      	beq.n	f3b4 <move_thread_to_end_of_prio_q+0x84>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f37c:	b1d3      	cbz	r3, f3b4 <move_thread_to_end_of_prio_q+0x84>
	int32_t b1 = thread_1->base.prio;
    f37e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    f382:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    f386:	428e      	cmp	r6, r1
    f388:	d00f      	beq.n	f3aa <move_thread_to_end_of_prio_q+0x7a>
		return b2 - b1;
    f38a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    f38c:	2900      	cmp	r1, #0
    f38e:	dd0c      	ble.n	f3aa <move_thread_to_end_of_prio_q+0x7a>
	sys_dnode_t *const prev = successor->prev;
    f390:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    f392:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    f396:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    f398:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    f39a:	6890      	ldr	r0, [r2, #8]
    f39c:	1b03      	subs	r3, r0, r4
    f39e:	4258      	negs	r0, r3
}
    f3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    f3a4:	4158      	adcs	r0, r3
    f3a6:	f7ff bf8b 	b.w	f2c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    f3aa:	4283      	cmp	r3, r0
    f3ac:	d002      	beq.n	f3b4 <move_thread_to_end_of_prio_q+0x84>
    f3ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f3b0:	2b00      	cmp	r3, #0
    f3b2:	d1e6      	bne.n	f382 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    f3b4:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    f3b8:	6004      	str	r4, [r0, #0]
	list->tail = node;
    f3ba:	6254      	str	r4, [r2, #36]	; 0x24
}
    f3bc:	e7ed      	b.n	f39a <move_thread_to_end_of_prio_q+0x6a>
    f3be:	bf00      	nop
    f3c0:	20023a04 	.word	0x20023a04
    f3c4:	20000cc8 	.word	0x20000cc8
    f3c8:	0003de5f 	.word	0x0003de5f
    f3cc:	0003baf1 	.word	0x0003baf1
    f3d0:	0003de3d 	.word	0x0003de3d
    f3d4:	200239e4 	.word	0x200239e4

0000f3d8 <z_time_slice>:
{
    f3d8:	b570      	push	{r4, r5, r6, lr}
    f3da:	4605      	mov	r5, r0
	__asm__ volatile(
    f3dc:	f04f 0320 	mov.w	r3, #32
    f3e0:	f3ef 8611 	mrs	r6, BASEPRI
    f3e4:	f383 8812 	msr	BASEPRI_MAX, r3
    f3e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f3ec:	482a      	ldr	r0, [pc, #168]	; (f498 <z_time_slice+0xc0>)
    f3ee:	f7fe fffb 	bl	e3e8 <z_spin_lock_valid>
    f3f2:	b968      	cbnz	r0, f410 <z_time_slice+0x38>
    f3f4:	4a29      	ldr	r2, [pc, #164]	; (f49c <z_time_slice+0xc4>)
    f3f6:	492a      	ldr	r1, [pc, #168]	; (f4a0 <z_time_slice+0xc8>)
    f3f8:	482a      	ldr	r0, [pc, #168]	; (f4a4 <z_time_slice+0xcc>)
    f3fa:	238e      	movs	r3, #142	; 0x8e
    f3fc:	f008 fc27 	bl	17c4e <assert_print>
    f400:	4925      	ldr	r1, [pc, #148]	; (f498 <z_time_slice+0xc0>)
    f402:	4829      	ldr	r0, [pc, #164]	; (f4a8 <z_time_slice+0xd0>)
    f404:	f008 fc23 	bl	17c4e <assert_print>
    f408:	4824      	ldr	r0, [pc, #144]	; (f49c <z_time_slice+0xc4>)
    f40a:	218e      	movs	r1, #142	; 0x8e
    f40c:	f008 fc18 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    f410:	4821      	ldr	r0, [pc, #132]	; (f498 <z_time_slice+0xc0>)
    f412:	f7ff f807 	bl	e424 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    f416:	4b25      	ldr	r3, [pc, #148]	; (f4ac <z_time_slice+0xd4>)
    f418:	4a25      	ldr	r2, [pc, #148]	; (f4b0 <z_time_slice+0xd8>)
    f41a:	689c      	ldr	r4, [r3, #8]
    f41c:	6811      	ldr	r1, [r2, #0]
    f41e:	428c      	cmp	r4, r1
    f420:	d119      	bne.n	f456 <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    f422:	4620      	mov	r0, r4
    f424:	f7ff fd8e 	bl	ef44 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f428:	481b      	ldr	r0, [pc, #108]	; (f498 <z_time_slice+0xc0>)
    f42a:	f7fe ffeb 	bl	e404 <z_spin_unlock_valid>
    f42e:	b968      	cbnz	r0, f44c <z_time_slice+0x74>
    f430:	4a1a      	ldr	r2, [pc, #104]	; (f49c <z_time_slice+0xc4>)
    f432:	4920      	ldr	r1, [pc, #128]	; (f4b4 <z_time_slice+0xdc>)
    f434:	481b      	ldr	r0, [pc, #108]	; (f4a4 <z_time_slice+0xcc>)
    f436:	23b9      	movs	r3, #185	; 0xb9
    f438:	f008 fc09 	bl	17c4e <assert_print>
    f43c:	4916      	ldr	r1, [pc, #88]	; (f498 <z_time_slice+0xc0>)
    f43e:	481e      	ldr	r0, [pc, #120]	; (f4b8 <z_time_slice+0xe0>)
    f440:	f008 fc05 	bl	17c4e <assert_print>
    f444:	4815      	ldr	r0, [pc, #84]	; (f49c <z_time_slice+0xc4>)
    f446:	21b9      	movs	r1, #185	; 0xb9
    f448:	f008 fbfa 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    f44c:	f386 8811 	msr	BASEPRI, r6
    f450:	f3bf 8f6f 	isb	sy
}
    f454:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    f456:	2100      	movs	r1, #0
    f458:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    f45a:	4a18      	ldr	r2, [pc, #96]	; (f4bc <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    f45c:	6812      	ldr	r2, [r2, #0]
    f45e:	b1c2      	cbz	r2, f492 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    f460:	89e2      	ldrh	r2, [r4, #14]
    f462:	2a7f      	cmp	r2, #127	; 0x7f
    f464:	d815      	bhi.n	f492 <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    f466:	7b62      	ldrb	r2, [r4, #13]
    f468:	06d2      	lsls	r2, r2, #27
    f46a:	d112      	bne.n	f492 <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    f46c:	4a14      	ldr	r2, [pc, #80]	; (f4c0 <z_time_slice+0xe8>)
    f46e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    f472:	6812      	ldr	r2, [r2, #0]
    f474:	4291      	cmp	r1, r2
    f476:	db0c      	blt.n	f492 <z_time_slice+0xba>
	if (slice_time(_current) && sliceable(_current)) {
    f478:	4a12      	ldr	r2, [pc, #72]	; (f4c4 <z_time_slice+0xec>)
    f47a:	4294      	cmp	r4, r2
    f47c:	d009      	beq.n	f492 <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    f47e:	691a      	ldr	r2, [r3, #16]
    f480:	42aa      	cmp	r2, r5
    f482:	dc03      	bgt.n	f48c <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    f484:	4620      	mov	r0, r4
    f486:	f7ff ff53 	bl	f330 <move_thread_to_end_of_prio_q>
    f48a:	e7ca      	b.n	f422 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    f48c:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    f48e:	611a      	str	r2, [r3, #16]
    f490:	e7ca      	b.n	f428 <z_time_slice+0x50>
    f492:	2200      	movs	r2, #0
    f494:	e7fb      	b.n	f48e <z_time_slice+0xb6>
    f496:	bf00      	nop
    f498:	20023a28 	.word	0x20023a28
    f49c:	0003bd42 	.word	0x0003bd42
    f4a0:	0003bd9b 	.word	0x0003bd9b
    f4a4:	0003baf1 	.word	0x0003baf1
    f4a8:	0003bdb0 	.word	0x0003bdb0
    f4ac:	200239e4 	.word	0x200239e4
    f4b0:	20023a24 	.word	0x20023a24
    f4b4:	0003bd6f 	.word	0x0003bd6f
    f4b8:	0003bd86 	.word	0x0003bd86
    f4bc:	20023a30 	.word	0x20023a30
    f4c0:	20023a2c 	.word	0x20023a2c
    f4c4:	20000cc8 	.word	0x20000cc8

0000f4c8 <ready_thread>:
{
    f4c8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    f4ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
    f4ce:	7b43      	ldrb	r3, [r0, #13]
    f4d0:	2a00      	cmp	r2, #0
{
    f4d2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    f4d4:	db39      	blt.n	f54a <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f4d6:	06da      	lsls	r2, r3, #27
    f4d8:	d137      	bne.n	f54a <ready_thread+0x82>
    f4da:	6982      	ldr	r2, [r0, #24]
    f4dc:	2a00      	cmp	r2, #0
    f4de:	d134      	bne.n	f54a <ready_thread+0x82>
	thread->base.thread_state |= _THREAD_QUEUED;
    f4e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f4e4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f4e6:	4b19      	ldr	r3, [pc, #100]	; (f54c <ready_thread+0x84>)
    f4e8:	4298      	cmp	r0, r3
    f4ea:	d109      	bne.n	f500 <ready_thread+0x38>
    f4ec:	4918      	ldr	r1, [pc, #96]	; (f550 <ready_thread+0x88>)
    f4ee:	4819      	ldr	r0, [pc, #100]	; (f554 <ready_thread+0x8c>)
    f4f0:	4a19      	ldr	r2, [pc, #100]	; (f558 <ready_thread+0x90>)
    f4f2:	23ba      	movs	r3, #186	; 0xba
    f4f4:	f008 fbab 	bl	17c4e <assert_print>
    f4f8:	4817      	ldr	r0, [pc, #92]	; (f558 <ready_thread+0x90>)
    f4fa:	21ba      	movs	r1, #186	; 0xba
    f4fc:	f008 fba0 	bl	17c40 <assert_post_action>
	return list->head == list;
    f500:	4a16      	ldr	r2, [pc, #88]	; (f55c <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    f502:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f506:	f102 0520 	add.w	r5, r2, #32
    f50a:	42ab      	cmp	r3, r5
    f50c:	d018      	beq.n	f540 <ready_thread+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f50e:	b1bb      	cbz	r3, f540 <ready_thread+0x78>
	int32_t b1 = thread_1->base.prio;
    f510:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    f514:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    f518:	428e      	cmp	r6, r1
    f51a:	d00c      	beq.n	f536 <ready_thread+0x6e>
		return b2 - b1;
    f51c:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    f51e:	2900      	cmp	r1, #0
    f520:	dd09      	ble.n	f536 <ready_thread+0x6e>
	sys_dnode_t *const prev = successor->prev;
    f522:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f524:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    f528:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f52a:	605c      	str	r4, [r3, #4]
}
    f52c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    f530:	2000      	movs	r0, #0
    f532:	f7ff bec5 	b.w	f2c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    f536:	4298      	cmp	r0, r3
    f538:	d002      	beq.n	f540 <ready_thread+0x78>
    f53a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f53c:	2b00      	cmp	r3, #0
    f53e:	d1e9      	bne.n	f514 <ready_thread+0x4c>
	node->prev = tail;
    f540:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    f544:	6004      	str	r4, [r0, #0]
	list->tail = node;
    f546:	6254      	str	r4, [r2, #36]	; 0x24
}
    f548:	e7f0      	b.n	f52c <ready_thread+0x64>
}
    f54a:	bd70      	pop	{r4, r5, r6, pc}
    f54c:	20000cc8 	.word	0x20000cc8
    f550:	0003de5f 	.word	0x0003de5f
    f554:	0003baf1 	.word	0x0003baf1
    f558:	0003de3d 	.word	0x0003de3d
    f55c:	200239e4 	.word	0x200239e4

0000f560 <z_ready_thread>:
{
    f560:	b538      	push	{r3, r4, r5, lr}
    f562:	4604      	mov	r4, r0
	__asm__ volatile(
    f564:	f04f 0320 	mov.w	r3, #32
    f568:	f3ef 8511 	mrs	r5, BASEPRI
    f56c:	f383 8812 	msr	BASEPRI_MAX, r3
    f570:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f574:	4817      	ldr	r0, [pc, #92]	; (f5d4 <z_ready_thread+0x74>)
    f576:	f7fe ff37 	bl	e3e8 <z_spin_lock_valid>
    f57a:	b968      	cbnz	r0, f598 <z_ready_thread+0x38>
    f57c:	4a16      	ldr	r2, [pc, #88]	; (f5d8 <z_ready_thread+0x78>)
    f57e:	4917      	ldr	r1, [pc, #92]	; (f5dc <z_ready_thread+0x7c>)
    f580:	4817      	ldr	r0, [pc, #92]	; (f5e0 <z_ready_thread+0x80>)
    f582:	238e      	movs	r3, #142	; 0x8e
    f584:	f008 fb63 	bl	17c4e <assert_print>
    f588:	4912      	ldr	r1, [pc, #72]	; (f5d4 <z_ready_thread+0x74>)
    f58a:	4816      	ldr	r0, [pc, #88]	; (f5e4 <z_ready_thread+0x84>)
    f58c:	f008 fb5f 	bl	17c4e <assert_print>
    f590:	4811      	ldr	r0, [pc, #68]	; (f5d8 <z_ready_thread+0x78>)
    f592:	218e      	movs	r1, #142	; 0x8e
    f594:	f008 fb54 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    f598:	480e      	ldr	r0, [pc, #56]	; (f5d4 <z_ready_thread+0x74>)
    f59a:	f7fe ff43 	bl	e424 <z_spin_lock_set_owner>
			ready_thread(thread);
    f59e:	4620      	mov	r0, r4
    f5a0:	f7ff ff92 	bl	f4c8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f5a4:	480b      	ldr	r0, [pc, #44]	; (f5d4 <z_ready_thread+0x74>)
    f5a6:	f7fe ff2d 	bl	e404 <z_spin_unlock_valid>
    f5aa:	b968      	cbnz	r0, f5c8 <z_ready_thread+0x68>
    f5ac:	4a0a      	ldr	r2, [pc, #40]	; (f5d8 <z_ready_thread+0x78>)
    f5ae:	490e      	ldr	r1, [pc, #56]	; (f5e8 <z_ready_thread+0x88>)
    f5b0:	480b      	ldr	r0, [pc, #44]	; (f5e0 <z_ready_thread+0x80>)
    f5b2:	23b9      	movs	r3, #185	; 0xb9
    f5b4:	f008 fb4b 	bl	17c4e <assert_print>
    f5b8:	4906      	ldr	r1, [pc, #24]	; (f5d4 <z_ready_thread+0x74>)
    f5ba:	480c      	ldr	r0, [pc, #48]	; (f5ec <z_ready_thread+0x8c>)
    f5bc:	f008 fb47 	bl	17c4e <assert_print>
    f5c0:	4805      	ldr	r0, [pc, #20]	; (f5d8 <z_ready_thread+0x78>)
    f5c2:	21b9      	movs	r1, #185	; 0xb9
    f5c4:	f008 fb3c 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    f5c8:	f385 8811 	msr	BASEPRI, r5
    f5cc:	f3bf 8f6f 	isb	sy
}
    f5d0:	bd38      	pop	{r3, r4, r5, pc}
    f5d2:	bf00      	nop
    f5d4:	20023a28 	.word	0x20023a28
    f5d8:	0003bd42 	.word	0x0003bd42
    f5dc:	0003bd9b 	.word	0x0003bd9b
    f5e0:	0003baf1 	.word	0x0003baf1
    f5e4:	0003bdb0 	.word	0x0003bdb0
    f5e8:	0003bd6f 	.word	0x0003bd6f
    f5ec:	0003bd86 	.word	0x0003bd86

0000f5f0 <z_sched_start>:
{
    f5f0:	b538      	push	{r3, r4, r5, lr}
    f5f2:	4604      	mov	r4, r0
	__asm__ volatile(
    f5f4:	f04f 0320 	mov.w	r3, #32
    f5f8:	f3ef 8511 	mrs	r5, BASEPRI
    f5fc:	f383 8812 	msr	BASEPRI_MAX, r3
    f600:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f604:	481d      	ldr	r0, [pc, #116]	; (f67c <z_sched_start+0x8c>)
    f606:	f7fe feef 	bl	e3e8 <z_spin_lock_valid>
    f60a:	b968      	cbnz	r0, f628 <z_sched_start+0x38>
    f60c:	4a1c      	ldr	r2, [pc, #112]	; (f680 <z_sched_start+0x90>)
    f60e:	491d      	ldr	r1, [pc, #116]	; (f684 <z_sched_start+0x94>)
    f610:	481d      	ldr	r0, [pc, #116]	; (f688 <z_sched_start+0x98>)
    f612:	238e      	movs	r3, #142	; 0x8e
    f614:	f008 fb1b 	bl	17c4e <assert_print>
    f618:	4918      	ldr	r1, [pc, #96]	; (f67c <z_sched_start+0x8c>)
    f61a:	481c      	ldr	r0, [pc, #112]	; (f68c <z_sched_start+0x9c>)
    f61c:	f008 fb17 	bl	17c4e <assert_print>
    f620:	4817      	ldr	r0, [pc, #92]	; (f680 <z_sched_start+0x90>)
    f622:	218e      	movs	r1, #142	; 0x8e
    f624:	f008 fb0c 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    f628:	4814      	ldr	r0, [pc, #80]	; (f67c <z_sched_start+0x8c>)
    f62a:	f7fe fefb 	bl	e424 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    f62e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    f630:	075a      	lsls	r2, r3, #29
    f632:	d416      	bmi.n	f662 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f634:	4811      	ldr	r0, [pc, #68]	; (f67c <z_sched_start+0x8c>)
    f636:	f7fe fee5 	bl	e404 <z_spin_unlock_valid>
    f63a:	b968      	cbnz	r0, f658 <z_sched_start+0x68>
    f63c:	4a10      	ldr	r2, [pc, #64]	; (f680 <z_sched_start+0x90>)
    f63e:	4914      	ldr	r1, [pc, #80]	; (f690 <z_sched_start+0xa0>)
    f640:	4811      	ldr	r0, [pc, #68]	; (f688 <z_sched_start+0x98>)
    f642:	23b9      	movs	r3, #185	; 0xb9
    f644:	f008 fb03 	bl	17c4e <assert_print>
    f648:	490c      	ldr	r1, [pc, #48]	; (f67c <z_sched_start+0x8c>)
    f64a:	4812      	ldr	r0, [pc, #72]	; (f694 <z_sched_start+0xa4>)
    f64c:	f008 faff 	bl	17c4e <assert_print>
    f650:	480b      	ldr	r0, [pc, #44]	; (f680 <z_sched_start+0x90>)
    f652:	21b9      	movs	r1, #185	; 0xb9
    f654:	f008 faf4 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    f658:	f385 8811 	msr	BASEPRI, r5
    f65c:	f3bf 8f6f 	isb	sy
}
    f660:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f662:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    f666:	4620      	mov	r0, r4
    f668:	7363      	strb	r3, [r4, #13]
    f66a:	f7ff ff2d 	bl	f4c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    f66e:	4629      	mov	r1, r5
    f670:	4802      	ldr	r0, [pc, #8]	; (f67c <z_sched_start+0x8c>)
}
    f672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    f676:	f7ff bd27 	b.w	f0c8 <z_reschedule>
    f67a:	bf00      	nop
    f67c:	20023a28 	.word	0x20023a28
    f680:	0003bd42 	.word	0x0003bd42
    f684:	0003bd9b 	.word	0x0003bd9b
    f688:	0003baf1 	.word	0x0003baf1
    f68c:	0003bdb0 	.word	0x0003bdb0
    f690:	0003bd6f 	.word	0x0003bd6f
    f694:	0003bd86 	.word	0x0003bd86

0000f698 <z_thread_timeout>:
{
    f698:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f69a:	4604      	mov	r4, r0
	__asm__ volatile(
    f69c:	f04f 0320 	mov.w	r3, #32
    f6a0:	f3ef 8511 	mrs	r5, BASEPRI
    f6a4:	f383 8812 	msr	BASEPRI_MAX, r3
    f6a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f6ac:	4821      	ldr	r0, [pc, #132]	; (f734 <z_thread_timeout+0x9c>)
    f6ae:	f7fe fe9b 	bl	e3e8 <z_spin_lock_valid>
    f6b2:	b968      	cbnz	r0, f6d0 <z_thread_timeout+0x38>
    f6b4:	4a20      	ldr	r2, [pc, #128]	; (f738 <z_thread_timeout+0xa0>)
    f6b6:	4921      	ldr	r1, [pc, #132]	; (f73c <z_thread_timeout+0xa4>)
    f6b8:	4821      	ldr	r0, [pc, #132]	; (f740 <z_thread_timeout+0xa8>)
    f6ba:	238e      	movs	r3, #142	; 0x8e
    f6bc:	f008 fac7 	bl	17c4e <assert_print>
    f6c0:	491c      	ldr	r1, [pc, #112]	; (f734 <z_thread_timeout+0x9c>)
    f6c2:	4820      	ldr	r0, [pc, #128]	; (f744 <z_thread_timeout+0xac>)
    f6c4:	f008 fac3 	bl	17c4e <assert_print>
    f6c8:	481b      	ldr	r0, [pc, #108]	; (f738 <z_thread_timeout+0xa0>)
    f6ca:	218e      	movs	r1, #142	; 0x8e
    f6cc:	f008 fab8 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    f6d0:	4818      	ldr	r0, [pc, #96]	; (f734 <z_thread_timeout+0x9c>)
    f6d2:	f7fe fea7 	bl	e424 <z_spin_lock_set_owner>
		if (!killed) {
    f6d6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    f6da:	f013 0f28 	tst.w	r3, #40	; 0x28
    f6de:	d110      	bne.n	f702 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    f6e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    f6e4:	f1a4 0018 	sub.w	r0, r4, #24
			if (thread->base.pended_on != NULL) {
    f6e8:	b11b      	cbz	r3, f6f2 <z_thread_timeout+0x5a>
				unpend_thread_no_timeout(thread);
    f6ea:	9001      	str	r0, [sp, #4]
    f6ec:	f7ff fdc6 	bl	f27c <unpend_thread_no_timeout>
    f6f0:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    f6f2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    f6f6:	f023 0314 	bic.w	r3, r3, #20
    f6fa:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    f6fe:	f7ff fee3 	bl	f4c8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f702:	480c      	ldr	r0, [pc, #48]	; (f734 <z_thread_timeout+0x9c>)
    f704:	f7fe fe7e 	bl	e404 <z_spin_unlock_valid>
    f708:	b968      	cbnz	r0, f726 <z_thread_timeout+0x8e>
    f70a:	4a0b      	ldr	r2, [pc, #44]	; (f738 <z_thread_timeout+0xa0>)
    f70c:	490e      	ldr	r1, [pc, #56]	; (f748 <z_thread_timeout+0xb0>)
    f70e:	480c      	ldr	r0, [pc, #48]	; (f740 <z_thread_timeout+0xa8>)
    f710:	23b9      	movs	r3, #185	; 0xb9
    f712:	f008 fa9c 	bl	17c4e <assert_print>
    f716:	4907      	ldr	r1, [pc, #28]	; (f734 <z_thread_timeout+0x9c>)
    f718:	480c      	ldr	r0, [pc, #48]	; (f74c <z_thread_timeout+0xb4>)
    f71a:	f008 fa98 	bl	17c4e <assert_print>
    f71e:	4806      	ldr	r0, [pc, #24]	; (f738 <z_thread_timeout+0xa0>)
    f720:	21b9      	movs	r1, #185	; 0xb9
    f722:	f008 fa8d 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    f726:	f385 8811 	msr	BASEPRI, r5
    f72a:	f3bf 8f6f 	isb	sy
}
    f72e:	b003      	add	sp, #12
    f730:	bd30      	pop	{r4, r5, pc}
    f732:	bf00      	nop
    f734:	20023a28 	.word	0x20023a28
    f738:	0003bd42 	.word	0x0003bd42
    f73c:	0003bd9b 	.word	0x0003bd9b
    f740:	0003baf1 	.word	0x0003baf1
    f744:	0003bdb0 	.word	0x0003bdb0
    f748:	0003bd6f 	.word	0x0003bd6f
    f74c:	0003bd86 	.word	0x0003bd86

0000f750 <unready_thread>:
{
    f750:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    f752:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    f756:	7b43      	ldrb	r3, [r0, #13]
    f758:	2a00      	cmp	r2, #0
{
    f75a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    f75c:	da06      	bge.n	f76c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f762:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    f764:	4601      	mov	r1, r0
    f766:	4806      	ldr	r0, [pc, #24]	; (f780 <unready_thread+0x30>)
    f768:	f7ff fd66 	bl	f238 <z_priq_dumb_remove>
	update_cache(thread == _current);
    f76c:	4b05      	ldr	r3, [pc, #20]	; (f784 <unready_thread+0x34>)
    f76e:	6898      	ldr	r0, [r3, #8]
    f770:	1b03      	subs	r3, r0, r4
    f772:	4258      	negs	r0, r3
}
    f774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    f778:	4158      	adcs	r0, r3
    f77a:	f7ff bda1 	b.w	f2c0 <update_cache>
    f77e:	bf00      	nop
    f780:	20023a04 	.word	0x20023a04
    f784:	200239e4 	.word	0x200239e4

0000f788 <add_to_waitq_locked>:
{
    f788:	b538      	push	{r3, r4, r5, lr}
    f78a:	4604      	mov	r4, r0
    f78c:	460d      	mov	r5, r1
	unready_thread(thread);
    f78e:	f7ff ffdf 	bl	f750 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f792:	7b63      	ldrb	r3, [r4, #13]
    f794:	f043 0302 	orr.w	r3, r3, #2
    f798:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    f79a:	b1fd      	cbz	r5, f7dc <add_to_waitq_locked+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f79c:	4b16      	ldr	r3, [pc, #88]	; (f7f8 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    f79e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f7a0:	429c      	cmp	r4, r3
    f7a2:	d109      	bne.n	f7b8 <add_to_waitq_locked+0x30>
    f7a4:	4915      	ldr	r1, [pc, #84]	; (f7fc <add_to_waitq_locked+0x74>)
    f7a6:	4816      	ldr	r0, [pc, #88]	; (f800 <add_to_waitq_locked+0x78>)
    f7a8:	4a16      	ldr	r2, [pc, #88]	; (f804 <add_to_waitq_locked+0x7c>)
    f7aa:	23ba      	movs	r3, #186	; 0xba
    f7ac:	f008 fa4f 	bl	17c4e <assert_print>
    f7b0:	4814      	ldr	r0, [pc, #80]	; (f804 <add_to_waitq_locked+0x7c>)
    f7b2:	21ba      	movs	r1, #186	; 0xba
    f7b4:	f008 fa44 	bl	17c40 <assert_post_action>
	return list->head == list;
    f7b8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f7ba:	429d      	cmp	r5, r3
    f7bc:	d015      	beq.n	f7ea <add_to_waitq_locked+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f7be:	b1a3      	cbz	r3, f7ea <add_to_waitq_locked+0x62>
	int32_t b1 = thread_1->base.prio;
    f7c0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    f7c4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    f7c8:	4291      	cmp	r1, r2
    f7ca:	d008      	beq.n	f7de <add_to_waitq_locked+0x56>
		return b2 - b1;
    f7cc:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    f7ce:	2a00      	cmp	r2, #0
    f7d0:	dd05      	ble.n	f7de <add_to_waitq_locked+0x56>
	sys_dnode_t *const prev = successor->prev;
    f7d2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f7d4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    f7d8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f7da:	605c      	str	r4, [r3, #4]
}
    f7dc:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    f7de:	686a      	ldr	r2, [r5, #4]
    f7e0:	4293      	cmp	r3, r2
    f7e2:	d002      	beq.n	f7ea <add_to_waitq_locked+0x62>
    f7e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f7e6:	2b00      	cmp	r3, #0
    f7e8:	d1ec      	bne.n	f7c4 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    f7ea:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    f7ec:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    f7f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f7f2:	606c      	str	r4, [r5, #4]
}
    f7f4:	e7f2      	b.n	f7dc <add_to_waitq_locked+0x54>
    f7f6:	bf00      	nop
    f7f8:	20000cc8 	.word	0x20000cc8
    f7fc:	0003de5f 	.word	0x0003de5f
    f800:	0003baf1 	.word	0x0003baf1
    f804:	0003de3d 	.word	0x0003de3d

0000f808 <pend>:
{
    f808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f80c:	4604      	mov	r4, r0
    f80e:	4688      	mov	r8, r1
    f810:	4616      	mov	r6, r2
    f812:	461d      	mov	r5, r3
	__asm__ volatile(
    f814:	f04f 0320 	mov.w	r3, #32
    f818:	f3ef 8711 	mrs	r7, BASEPRI
    f81c:	f383 8812 	msr	BASEPRI_MAX, r3
    f820:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f824:	481f      	ldr	r0, [pc, #124]	; (f8a4 <pend+0x9c>)
    f826:	f7fe fddf 	bl	e3e8 <z_spin_lock_valid>
    f82a:	b968      	cbnz	r0, f848 <pend+0x40>
    f82c:	4a1e      	ldr	r2, [pc, #120]	; (f8a8 <pend+0xa0>)
    f82e:	491f      	ldr	r1, [pc, #124]	; (f8ac <pend+0xa4>)
    f830:	481f      	ldr	r0, [pc, #124]	; (f8b0 <pend+0xa8>)
    f832:	238e      	movs	r3, #142	; 0x8e
    f834:	f008 fa0b 	bl	17c4e <assert_print>
    f838:	491a      	ldr	r1, [pc, #104]	; (f8a4 <pend+0x9c>)
    f83a:	481e      	ldr	r0, [pc, #120]	; (f8b4 <pend+0xac>)
    f83c:	f008 fa07 	bl	17c4e <assert_print>
    f840:	4819      	ldr	r0, [pc, #100]	; (f8a8 <pend+0xa0>)
    f842:	218e      	movs	r1, #142	; 0x8e
    f844:	f008 f9fc 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    f848:	4816      	ldr	r0, [pc, #88]	; (f8a4 <pend+0x9c>)
    f84a:	f7fe fdeb 	bl	e424 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    f84e:	4620      	mov	r0, r4
    f850:	4641      	mov	r1, r8
    f852:	f7ff ff99 	bl	f788 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f856:	4813      	ldr	r0, [pc, #76]	; (f8a4 <pend+0x9c>)
    f858:	f7fe fdd4 	bl	e404 <z_spin_unlock_valid>
    f85c:	b968      	cbnz	r0, f87a <pend+0x72>
    f85e:	4a12      	ldr	r2, [pc, #72]	; (f8a8 <pend+0xa0>)
    f860:	4915      	ldr	r1, [pc, #84]	; (f8b8 <pend+0xb0>)
    f862:	4813      	ldr	r0, [pc, #76]	; (f8b0 <pend+0xa8>)
    f864:	23b9      	movs	r3, #185	; 0xb9
    f866:	f008 f9f2 	bl	17c4e <assert_print>
    f86a:	490e      	ldr	r1, [pc, #56]	; (f8a4 <pend+0x9c>)
    f86c:	4813      	ldr	r0, [pc, #76]	; (f8bc <pend+0xb4>)
    f86e:	f008 f9ee 	bl	17c4e <assert_print>
    f872:	480d      	ldr	r0, [pc, #52]	; (f8a8 <pend+0xa0>)
    f874:	21b9      	movs	r1, #185	; 0xb9
    f876:	f008 f9e3 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    f87a:	f387 8811 	msr	BASEPRI, r7
    f87e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f882:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    f886:	bf08      	it	eq
    f888:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    f88c:	d008      	beq.n	f8a0 <pend+0x98>
    f88e:	4632      	mov	r2, r6
    f890:	462b      	mov	r3, r5
    f892:	f104 0018 	add.w	r0, r4, #24
    f896:	490a      	ldr	r1, [pc, #40]	; (f8c0 <pend+0xb8>)
}
    f898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f89c:	f000 bd72 	b.w	10384 <z_add_timeout>
    f8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8a4:	20023a28 	.word	0x20023a28
    f8a8:	0003bd42 	.word	0x0003bd42
    f8ac:	0003bd9b 	.word	0x0003bd9b
    f8b0:	0003baf1 	.word	0x0003baf1
    f8b4:	0003bdb0 	.word	0x0003bdb0
    f8b8:	0003bd6f 	.word	0x0003bd6f
    f8bc:	0003bd86 	.word	0x0003bd86
    f8c0:	0000f699 	.word	0x0000f699

0000f8c4 <z_pend_curr>:
{
    f8c4:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    f8c6:	4b11      	ldr	r3, [pc, #68]	; (f90c <z_pend_curr+0x48>)
{
    f8c8:	4604      	mov	r4, r0
	pending_current = _current;
    f8ca:	6898      	ldr	r0, [r3, #8]
    f8cc:	4b10      	ldr	r3, [pc, #64]	; (f910 <z_pend_curr+0x4c>)
{
    f8ce:	460d      	mov	r5, r1
	pending_current = _current;
    f8d0:	6018      	str	r0, [r3, #0]
{
    f8d2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    f8d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f8d8:	f7ff ff96 	bl	f808 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f8dc:	4620      	mov	r0, r4
    f8de:	f7fe fd91 	bl	e404 <z_spin_unlock_valid>
    f8e2:	b968      	cbnz	r0, f900 <z_pend_curr+0x3c>
    f8e4:	4a0b      	ldr	r2, [pc, #44]	; (f914 <z_pend_curr+0x50>)
    f8e6:	490c      	ldr	r1, [pc, #48]	; (f918 <z_pend_curr+0x54>)
    f8e8:	480c      	ldr	r0, [pc, #48]	; (f91c <z_pend_curr+0x58>)
    f8ea:	23d0      	movs	r3, #208	; 0xd0
    f8ec:	f008 f9af 	bl	17c4e <assert_print>
    f8f0:	480b      	ldr	r0, [pc, #44]	; (f920 <z_pend_curr+0x5c>)
    f8f2:	4621      	mov	r1, r4
    f8f4:	f008 f9ab 	bl	17c4e <assert_print>
    f8f8:	4806      	ldr	r0, [pc, #24]	; (f914 <z_pend_curr+0x50>)
    f8fa:	21d0      	movs	r1, #208	; 0xd0
    f8fc:	f008 f9a0 	bl	17c40 <assert_post_action>
    f900:	4628      	mov	r0, r5
}
    f902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f906:	f7f8 bd53 	b.w	83b0 <arch_swap>
    f90a:	bf00      	nop
    f90c:	200239e4 	.word	0x200239e4
    f910:	20023a24 	.word	0x20023a24
    f914:	0003bd42 	.word	0x0003bd42
    f918:	0003bd6f 	.word	0x0003bd6f
    f91c:	0003baf1 	.word	0x0003baf1
    f920:	0003bd86 	.word	0x0003bd86

0000f924 <z_set_prio>:
{
    f924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f926:	4604      	mov	r4, r0
    f928:	460d      	mov	r5, r1
	__asm__ volatile(
    f92a:	f04f 0320 	mov.w	r3, #32
    f92e:	f3ef 8611 	mrs	r6, BASEPRI
    f932:	f383 8812 	msr	BASEPRI_MAX, r3
    f936:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f93a:	483a      	ldr	r0, [pc, #232]	; (fa24 <z_set_prio+0x100>)
    f93c:	f7fe fd54 	bl	e3e8 <z_spin_lock_valid>
    f940:	b968      	cbnz	r0, f95e <z_set_prio+0x3a>
    f942:	4a39      	ldr	r2, [pc, #228]	; (fa28 <z_set_prio+0x104>)
    f944:	4939      	ldr	r1, [pc, #228]	; (fa2c <z_set_prio+0x108>)
    f946:	483a      	ldr	r0, [pc, #232]	; (fa30 <z_set_prio+0x10c>)
    f948:	238e      	movs	r3, #142	; 0x8e
    f94a:	f008 f980 	bl	17c4e <assert_print>
    f94e:	4935      	ldr	r1, [pc, #212]	; (fa24 <z_set_prio+0x100>)
    f950:	4838      	ldr	r0, [pc, #224]	; (fa34 <z_set_prio+0x110>)
    f952:	f008 f97c 	bl	17c4e <assert_print>
    f956:	4834      	ldr	r0, [pc, #208]	; (fa28 <z_set_prio+0x104>)
    f958:	218e      	movs	r1, #142	; 0x8e
    f95a:	f008 f971 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    f95e:	4831      	ldr	r0, [pc, #196]	; (fa24 <z_set_prio+0x100>)
    f960:	f7fe fd60 	bl	e424 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    f964:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f966:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    f968:	b26d      	sxtb	r5, r5
    f96a:	d157      	bne.n	fa1c <z_set_prio+0xf8>
		if (need_sched) {
    f96c:	69a2      	ldr	r2, [r4, #24]
    f96e:	2a00      	cmp	r2, #0
    f970:	d154      	bne.n	fa1c <z_set_prio+0xf8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f976:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    f978:	482f      	ldr	r0, [pc, #188]	; (fa38 <z_set_prio+0x114>)
    f97a:	4621      	mov	r1, r4
    f97c:	f7ff fc5c 	bl	f238 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    f980:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    f982:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    f984:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f988:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    f98a:	4b2c      	ldr	r3, [pc, #176]	; (fa3c <z_set_prio+0x118>)
    f98c:	429c      	cmp	r4, r3
    f98e:	d109      	bne.n	f9a4 <z_set_prio+0x80>
    f990:	492b      	ldr	r1, [pc, #172]	; (fa40 <z_set_prio+0x11c>)
    f992:	4827      	ldr	r0, [pc, #156]	; (fa30 <z_set_prio+0x10c>)
    f994:	4a2b      	ldr	r2, [pc, #172]	; (fa44 <z_set_prio+0x120>)
    f996:	23ba      	movs	r3, #186	; 0xba
    f998:	f008 f959 	bl	17c4e <assert_print>
    f99c:	4829      	ldr	r0, [pc, #164]	; (fa44 <z_set_prio+0x120>)
    f99e:	21ba      	movs	r1, #186	; 0xba
    f9a0:	f008 f94e 	bl	17c40 <assert_post_action>
	return list->head == list;
    f9a4:	4a28      	ldr	r2, [pc, #160]	; (fa48 <z_set_prio+0x124>)
	return (node == list->tail) ? NULL : node->next;
    f9a6:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f9aa:	f102 0520 	add.w	r5, r2, #32
    f9ae:	42ab      	cmp	r3, r5
    f9b0:	d02f      	beq.n	fa12 <z_set_prio+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f9b2:	b373      	cbz	r3, fa12 <z_set_prio+0xee>
	int32_t b1 = thread_1->base.prio;
    f9b4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    f9b8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    f9bc:	428f      	cmp	r7, r1
    f9be:	d023      	beq.n	fa08 <z_set_prio+0xe4>
		return b2 - b1;
    f9c0:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    f9c2:	2900      	cmp	r1, #0
    f9c4:	dd20      	ble.n	fa08 <z_set_prio+0xe4>
	sys_dnode_t *const prev = successor->prev;
    f9c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f9c8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    f9cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f9ce:	605c      	str	r4, [r3, #4]
			update_cache(1);
    f9d0:	2001      	movs	r0, #1
    f9d2:	f7ff fc75 	bl	f2c0 <update_cache>
    f9d6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f9d8:	4812      	ldr	r0, [pc, #72]	; (fa24 <z_set_prio+0x100>)
    f9da:	f7fe fd13 	bl	e404 <z_spin_unlock_valid>
    f9de:	b968      	cbnz	r0, f9fc <z_set_prio+0xd8>
    f9e0:	4a11      	ldr	r2, [pc, #68]	; (fa28 <z_set_prio+0x104>)
    f9e2:	491a      	ldr	r1, [pc, #104]	; (fa4c <z_set_prio+0x128>)
    f9e4:	4812      	ldr	r0, [pc, #72]	; (fa30 <z_set_prio+0x10c>)
    f9e6:	23b9      	movs	r3, #185	; 0xb9
    f9e8:	f008 f931 	bl	17c4e <assert_print>
    f9ec:	490d      	ldr	r1, [pc, #52]	; (fa24 <z_set_prio+0x100>)
    f9ee:	4818      	ldr	r0, [pc, #96]	; (fa50 <z_set_prio+0x12c>)
    f9f0:	f008 f92d 	bl	17c4e <assert_print>
    f9f4:	480c      	ldr	r0, [pc, #48]	; (fa28 <z_set_prio+0x104>)
    f9f6:	21b9      	movs	r1, #185	; 0xb9
    f9f8:	f008 f922 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    f9fc:	f386 8811 	msr	BASEPRI, r6
    fa00:	f3bf 8f6f 	isb	sy
}
    fa04:	4620      	mov	r0, r4
    fa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    fa08:	4283      	cmp	r3, r0
    fa0a:	d002      	beq.n	fa12 <z_set_prio+0xee>
    fa0c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fa0e:	2b00      	cmp	r3, #0
    fa10:	d1d2      	bne.n	f9b8 <z_set_prio+0x94>
	node->prev = tail;
    fa12:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    fa16:	6004      	str	r4, [r0, #0]
	list->tail = node;
    fa18:	6254      	str	r4, [r2, #36]	; 0x24
}
    fa1a:	e7d9      	b.n	f9d0 <z_set_prio+0xac>
			thread->base.prio = prio;
    fa1c:	73a5      	strb	r5, [r4, #14]
    fa1e:	2400      	movs	r4, #0
    fa20:	e7da      	b.n	f9d8 <z_set_prio+0xb4>
    fa22:	bf00      	nop
    fa24:	20023a28 	.word	0x20023a28
    fa28:	0003bd42 	.word	0x0003bd42
    fa2c:	0003bd9b 	.word	0x0003bd9b
    fa30:	0003baf1 	.word	0x0003baf1
    fa34:	0003bdb0 	.word	0x0003bdb0
    fa38:	20023a04 	.word	0x20023a04
    fa3c:	20000cc8 	.word	0x20000cc8
    fa40:	0003de5f 	.word	0x0003de5f
    fa44:	0003de3d 	.word	0x0003de3d
    fa48:	200239e4 	.word	0x200239e4
    fa4c:	0003bd6f 	.word	0x0003bd6f
    fa50:	0003bd86 	.word	0x0003bd86

0000fa54 <z_impl_k_thread_suspend>:
{
    fa54:	b570      	push	{r4, r5, r6, lr}
    fa56:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    fa58:	3018      	adds	r0, #24
    fa5a:	f000 fd5b 	bl	10514 <z_abort_timeout>
	__asm__ volatile(
    fa5e:	f04f 0320 	mov.w	r3, #32
    fa62:	f3ef 8611 	mrs	r6, BASEPRI
    fa66:	f383 8812 	msr	BASEPRI_MAX, r3
    fa6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fa6e:	4825      	ldr	r0, [pc, #148]	; (fb04 <z_impl_k_thread_suspend+0xb0>)
    fa70:	f7fe fcba 	bl	e3e8 <z_spin_lock_valid>
    fa74:	b968      	cbnz	r0, fa92 <z_impl_k_thread_suspend+0x3e>
    fa76:	4a24      	ldr	r2, [pc, #144]	; (fb08 <z_impl_k_thread_suspend+0xb4>)
    fa78:	4924      	ldr	r1, [pc, #144]	; (fb0c <z_impl_k_thread_suspend+0xb8>)
    fa7a:	4825      	ldr	r0, [pc, #148]	; (fb10 <z_impl_k_thread_suspend+0xbc>)
    fa7c:	238e      	movs	r3, #142	; 0x8e
    fa7e:	f008 f8e6 	bl	17c4e <assert_print>
    fa82:	4920      	ldr	r1, [pc, #128]	; (fb04 <z_impl_k_thread_suspend+0xb0>)
    fa84:	4823      	ldr	r0, [pc, #140]	; (fb14 <z_impl_k_thread_suspend+0xc0>)
    fa86:	f008 f8e2 	bl	17c4e <assert_print>
    fa8a:	481f      	ldr	r0, [pc, #124]	; (fb08 <z_impl_k_thread_suspend+0xb4>)
    fa8c:	218e      	movs	r1, #142	; 0x8e
    fa8e:	f008 f8d7 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    fa92:	481c      	ldr	r0, [pc, #112]	; (fb04 <z_impl_k_thread_suspend+0xb0>)
    fa94:	f7fe fcc6 	bl	e424 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    fa98:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    fa9c:	7b63      	ldrb	r3, [r4, #13]
    fa9e:	2a00      	cmp	r2, #0
    faa0:	da06      	bge.n	fab0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    faa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    faa6:	481c      	ldr	r0, [pc, #112]	; (fb18 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    faa8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    faaa:	4621      	mov	r1, r4
    faac:	f7ff fbc4 	bl	f238 <z_priq_dumb_remove>
		update_cache(thread == _current);
    fab0:	4d1a      	ldr	r5, [pc, #104]	; (fb1c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fab2:	7b63      	ldrb	r3, [r4, #13]
    fab4:	68a8      	ldr	r0, [r5, #8]
    fab6:	f043 0310 	orr.w	r3, r3, #16
    faba:	7363      	strb	r3, [r4, #13]
    fabc:	1b03      	subs	r3, r0, r4
    fabe:	4258      	negs	r0, r3
    fac0:	4158      	adcs	r0, r3
    fac2:	f7ff fbfd 	bl	f2c0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fac6:	480f      	ldr	r0, [pc, #60]	; (fb04 <z_impl_k_thread_suspend+0xb0>)
    fac8:	f7fe fc9c 	bl	e404 <z_spin_unlock_valid>
    facc:	b968      	cbnz	r0, faea <z_impl_k_thread_suspend+0x96>
    face:	4a0e      	ldr	r2, [pc, #56]	; (fb08 <z_impl_k_thread_suspend+0xb4>)
    fad0:	4913      	ldr	r1, [pc, #76]	; (fb20 <z_impl_k_thread_suspend+0xcc>)
    fad2:	480f      	ldr	r0, [pc, #60]	; (fb10 <z_impl_k_thread_suspend+0xbc>)
    fad4:	23b9      	movs	r3, #185	; 0xb9
    fad6:	f008 f8ba 	bl	17c4e <assert_print>
    fada:	490a      	ldr	r1, [pc, #40]	; (fb04 <z_impl_k_thread_suspend+0xb0>)
    fadc:	4811      	ldr	r0, [pc, #68]	; (fb24 <z_impl_k_thread_suspend+0xd0>)
    fade:	f008 f8b6 	bl	17c4e <assert_print>
    fae2:	4809      	ldr	r0, [pc, #36]	; (fb08 <z_impl_k_thread_suspend+0xb4>)
    fae4:	21b9      	movs	r1, #185	; 0xb9
    fae6:	f008 f8ab 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    faea:	f386 8811 	msr	BASEPRI, r6
    faee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    faf2:	68ab      	ldr	r3, [r5, #8]
    faf4:	42a3      	cmp	r3, r4
    faf6:	d103      	bne.n	fb00 <z_impl_k_thread_suspend+0xac>
}
    faf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    fafc:	f008 bfac 	b.w	18a58 <z_reschedule_unlocked>
}
    fb00:	bd70      	pop	{r4, r5, r6, pc}
    fb02:	bf00      	nop
    fb04:	20023a28 	.word	0x20023a28
    fb08:	0003bd42 	.word	0x0003bd42
    fb0c:	0003bd9b 	.word	0x0003bd9b
    fb10:	0003baf1 	.word	0x0003baf1
    fb14:	0003bdb0 	.word	0x0003bdb0
    fb18:	20023a04 	.word	0x20023a04
    fb1c:	200239e4 	.word	0x200239e4
    fb20:	0003bd6f 	.word	0x0003bd6f
    fb24:	0003bd86 	.word	0x0003bd86

0000fb28 <k_sched_unlock>:
{
    fb28:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fb2a:	f04f 0320 	mov.w	r3, #32
    fb2e:	f3ef 8511 	mrs	r5, BASEPRI
    fb32:	f383 8812 	msr	BASEPRI_MAX, r3
    fb36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fb3a:	482d      	ldr	r0, [pc, #180]	; (fbf0 <k_sched_unlock+0xc8>)
    fb3c:	f7fe fc54 	bl	e3e8 <z_spin_lock_valid>
    fb40:	b968      	cbnz	r0, fb5e <k_sched_unlock+0x36>
    fb42:	4a2c      	ldr	r2, [pc, #176]	; (fbf4 <k_sched_unlock+0xcc>)
    fb44:	492c      	ldr	r1, [pc, #176]	; (fbf8 <k_sched_unlock+0xd0>)
    fb46:	482d      	ldr	r0, [pc, #180]	; (fbfc <k_sched_unlock+0xd4>)
    fb48:	238e      	movs	r3, #142	; 0x8e
    fb4a:	f008 f880 	bl	17c4e <assert_print>
    fb4e:	4928      	ldr	r1, [pc, #160]	; (fbf0 <k_sched_unlock+0xc8>)
    fb50:	482b      	ldr	r0, [pc, #172]	; (fc00 <k_sched_unlock+0xd8>)
    fb52:	f008 f87c 	bl	17c4e <assert_print>
    fb56:	4827      	ldr	r0, [pc, #156]	; (fbf4 <k_sched_unlock+0xcc>)
    fb58:	218e      	movs	r1, #142	; 0x8e
    fb5a:	f008 f871 	bl	17c40 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    fb5e:	4c29      	ldr	r4, [pc, #164]	; (fc04 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    fb60:	4823      	ldr	r0, [pc, #140]	; (fbf0 <k_sched_unlock+0xc8>)
    fb62:	f7fe fc5f 	bl	e424 <z_spin_lock_set_owner>
    fb66:	68a3      	ldr	r3, [r4, #8]
    fb68:	7bdb      	ldrb	r3, [r3, #15]
    fb6a:	b973      	cbnz	r3, fb8a <k_sched_unlock+0x62>
    fb6c:	4926      	ldr	r1, [pc, #152]	; (fc08 <k_sched_unlock+0xe0>)
    fb6e:	4a27      	ldr	r2, [pc, #156]	; (fc0c <k_sched_unlock+0xe4>)
    fb70:	4822      	ldr	r0, [pc, #136]	; (fbfc <k_sched_unlock+0xd4>)
    fb72:	f240 33bb 	movw	r3, #955	; 0x3bb
    fb76:	f008 f86a 	bl	17c4e <assert_print>
    fb7a:	4825      	ldr	r0, [pc, #148]	; (fc10 <k_sched_unlock+0xe8>)
    fb7c:	f008 f867 	bl	17c4e <assert_print>
    fb80:	4822      	ldr	r0, [pc, #136]	; (fc0c <k_sched_unlock+0xe4>)
    fb82:	f240 31bb 	movw	r1, #955	; 0x3bb
    fb86:	f008 f85b 	bl	17c40 <assert_post_action>
    fb8a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    fb8e:	b173      	cbz	r3, fbae <k_sched_unlock+0x86>
    fb90:	4920      	ldr	r1, [pc, #128]	; (fc14 <k_sched_unlock+0xec>)
    fb92:	4a1e      	ldr	r2, [pc, #120]	; (fc0c <k_sched_unlock+0xe4>)
    fb94:	4819      	ldr	r0, [pc, #100]	; (fbfc <k_sched_unlock+0xd4>)
    fb96:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    fb9a:	f008 f858 	bl	17c4e <assert_print>
    fb9e:	481c      	ldr	r0, [pc, #112]	; (fc10 <k_sched_unlock+0xe8>)
    fba0:	f008 f855 	bl	17c4e <assert_print>
    fba4:	4819      	ldr	r0, [pc, #100]	; (fc0c <k_sched_unlock+0xe4>)
    fba6:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    fbaa:	f008 f849 	bl	17c40 <assert_post_action>
		++_current->base.sched_locked;
    fbae:	68a2      	ldr	r2, [r4, #8]
    fbb0:	7bd3      	ldrb	r3, [r2, #15]
    fbb2:	3301      	adds	r3, #1
		update_cache(0);
    fbb4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    fbb6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    fbb8:	f7ff fb82 	bl	f2c0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fbbc:	480c      	ldr	r0, [pc, #48]	; (fbf0 <k_sched_unlock+0xc8>)
    fbbe:	f7fe fc21 	bl	e404 <z_spin_unlock_valid>
    fbc2:	b968      	cbnz	r0, fbe0 <k_sched_unlock+0xb8>
    fbc4:	4a0b      	ldr	r2, [pc, #44]	; (fbf4 <k_sched_unlock+0xcc>)
    fbc6:	4914      	ldr	r1, [pc, #80]	; (fc18 <k_sched_unlock+0xf0>)
    fbc8:	480c      	ldr	r0, [pc, #48]	; (fbfc <k_sched_unlock+0xd4>)
    fbca:	23b9      	movs	r3, #185	; 0xb9
    fbcc:	f008 f83f 	bl	17c4e <assert_print>
    fbd0:	4907      	ldr	r1, [pc, #28]	; (fbf0 <k_sched_unlock+0xc8>)
    fbd2:	4812      	ldr	r0, [pc, #72]	; (fc1c <k_sched_unlock+0xf4>)
    fbd4:	f008 f83b 	bl	17c4e <assert_print>
    fbd8:	4806      	ldr	r0, [pc, #24]	; (fbf4 <k_sched_unlock+0xcc>)
    fbda:	21b9      	movs	r1, #185	; 0xb9
    fbdc:	f008 f830 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    fbe0:	f385 8811 	msr	BASEPRI, r5
    fbe4:	f3bf 8f6f 	isb	sy
}
    fbe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    fbec:	f008 bf34 	b.w	18a58 <z_reschedule_unlocked>
    fbf0:	20023a28 	.word	0x20023a28
    fbf4:	0003bd42 	.word	0x0003bd42
    fbf8:	0003bd9b 	.word	0x0003bd9b
    fbfc:	0003baf1 	.word	0x0003baf1
    fc00:	0003bdb0 	.word	0x0003bdb0
    fc04:	200239e4 	.word	0x200239e4
    fc08:	0003debe 	.word	0x0003debe
    fc0c:	0003de3d 	.word	0x0003de3d
    fc10:	0003dca0 	.word	0x0003dca0
    fc14:	0003db8b 	.word	0x0003db8b
    fc18:	0003bd6f 	.word	0x0003bd6f
    fc1c:	0003bd86 	.word	0x0003bd86

0000fc20 <z_unpend1_no_timeout>:
{
    fc20:	b538      	push	{r3, r4, r5, lr}
    fc22:	4604      	mov	r4, r0
	__asm__ volatile(
    fc24:	f04f 0320 	mov.w	r3, #32
    fc28:	f3ef 8511 	mrs	r5, BASEPRI
    fc2c:	f383 8812 	msr	BASEPRI_MAX, r3
    fc30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fc34:	4819      	ldr	r0, [pc, #100]	; (fc9c <z_unpend1_no_timeout+0x7c>)
    fc36:	f7fe fbd7 	bl	e3e8 <z_spin_lock_valid>
    fc3a:	b968      	cbnz	r0, fc58 <z_unpend1_no_timeout+0x38>
    fc3c:	4a18      	ldr	r2, [pc, #96]	; (fca0 <z_unpend1_no_timeout+0x80>)
    fc3e:	4919      	ldr	r1, [pc, #100]	; (fca4 <z_unpend1_no_timeout+0x84>)
    fc40:	4819      	ldr	r0, [pc, #100]	; (fca8 <z_unpend1_no_timeout+0x88>)
    fc42:	238e      	movs	r3, #142	; 0x8e
    fc44:	f008 f803 	bl	17c4e <assert_print>
    fc48:	4914      	ldr	r1, [pc, #80]	; (fc9c <z_unpend1_no_timeout+0x7c>)
    fc4a:	4818      	ldr	r0, [pc, #96]	; (fcac <z_unpend1_no_timeout+0x8c>)
    fc4c:	f007 ffff 	bl	17c4e <assert_print>
    fc50:	4813      	ldr	r0, [pc, #76]	; (fca0 <z_unpend1_no_timeout+0x80>)
    fc52:	218e      	movs	r1, #142	; 0x8e
    fc54:	f007 fff4 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    fc58:	4810      	ldr	r0, [pc, #64]	; (fc9c <z_unpend1_no_timeout+0x7c>)
    fc5a:	f7fe fbe3 	bl	e424 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    fc5e:	4620      	mov	r0, r4
    fc60:	f008 ff04 	bl	18a6c <z_priq_dumb_best>
		if (thread != NULL) {
    fc64:	4604      	mov	r4, r0
    fc66:	b108      	cbz	r0, fc6c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    fc68:	f7ff fb08 	bl	f27c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fc6c:	480b      	ldr	r0, [pc, #44]	; (fc9c <z_unpend1_no_timeout+0x7c>)
    fc6e:	f7fe fbc9 	bl	e404 <z_spin_unlock_valid>
    fc72:	b968      	cbnz	r0, fc90 <z_unpend1_no_timeout+0x70>
    fc74:	4a0a      	ldr	r2, [pc, #40]	; (fca0 <z_unpend1_no_timeout+0x80>)
    fc76:	490e      	ldr	r1, [pc, #56]	; (fcb0 <z_unpend1_no_timeout+0x90>)
    fc78:	480b      	ldr	r0, [pc, #44]	; (fca8 <z_unpend1_no_timeout+0x88>)
    fc7a:	23b9      	movs	r3, #185	; 0xb9
    fc7c:	f007 ffe7 	bl	17c4e <assert_print>
    fc80:	4906      	ldr	r1, [pc, #24]	; (fc9c <z_unpend1_no_timeout+0x7c>)
    fc82:	480c      	ldr	r0, [pc, #48]	; (fcb4 <z_unpend1_no_timeout+0x94>)
    fc84:	f007 ffe3 	bl	17c4e <assert_print>
    fc88:	4805      	ldr	r0, [pc, #20]	; (fca0 <z_unpend1_no_timeout+0x80>)
    fc8a:	21b9      	movs	r1, #185	; 0xb9
    fc8c:	f007 ffd8 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    fc90:	f385 8811 	msr	BASEPRI, r5
    fc94:	f3bf 8f6f 	isb	sy
}
    fc98:	4620      	mov	r0, r4
    fc9a:	bd38      	pop	{r3, r4, r5, pc}
    fc9c:	20023a28 	.word	0x20023a28
    fca0:	0003bd42 	.word	0x0003bd42
    fca4:	0003bd9b 	.word	0x0003bd9b
    fca8:	0003baf1 	.word	0x0003baf1
    fcac:	0003bdb0 	.word	0x0003bdb0
    fcb0:	0003bd6f 	.word	0x0003bd6f
    fcb4:	0003bd86 	.word	0x0003bd86

0000fcb8 <z_unpend_first_thread>:
{
    fcb8:	b538      	push	{r3, r4, r5, lr}
    fcba:	4604      	mov	r4, r0
	__asm__ volatile(
    fcbc:	f04f 0320 	mov.w	r3, #32
    fcc0:	f3ef 8511 	mrs	r5, BASEPRI
    fcc4:	f383 8812 	msr	BASEPRI_MAX, r3
    fcc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fccc:	481b      	ldr	r0, [pc, #108]	; (fd3c <z_unpend_first_thread+0x84>)
    fcce:	f7fe fb8b 	bl	e3e8 <z_spin_lock_valid>
    fcd2:	b968      	cbnz	r0, fcf0 <z_unpend_first_thread+0x38>
    fcd4:	4a1a      	ldr	r2, [pc, #104]	; (fd40 <z_unpend_first_thread+0x88>)
    fcd6:	491b      	ldr	r1, [pc, #108]	; (fd44 <z_unpend_first_thread+0x8c>)
    fcd8:	481b      	ldr	r0, [pc, #108]	; (fd48 <z_unpend_first_thread+0x90>)
    fcda:	238e      	movs	r3, #142	; 0x8e
    fcdc:	f007 ffb7 	bl	17c4e <assert_print>
    fce0:	4916      	ldr	r1, [pc, #88]	; (fd3c <z_unpend_first_thread+0x84>)
    fce2:	481a      	ldr	r0, [pc, #104]	; (fd4c <z_unpend_first_thread+0x94>)
    fce4:	f007 ffb3 	bl	17c4e <assert_print>
    fce8:	4815      	ldr	r0, [pc, #84]	; (fd40 <z_unpend_first_thread+0x88>)
    fcea:	218e      	movs	r1, #142	; 0x8e
    fcec:	f007 ffa8 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
    fcf0:	4812      	ldr	r0, [pc, #72]	; (fd3c <z_unpend_first_thread+0x84>)
    fcf2:	f7fe fb97 	bl	e424 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    fcf6:	4620      	mov	r0, r4
    fcf8:	f008 feb8 	bl	18a6c <z_priq_dumb_best>
		if (thread != NULL) {
    fcfc:	4604      	mov	r4, r0
    fcfe:	b128      	cbz	r0, fd0c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    fd00:	f7ff fabc 	bl	f27c <unpend_thread_no_timeout>
    fd04:	f104 0018 	add.w	r0, r4, #24
    fd08:	f000 fc04 	bl	10514 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fd0c:	480b      	ldr	r0, [pc, #44]	; (fd3c <z_unpend_first_thread+0x84>)
    fd0e:	f7fe fb79 	bl	e404 <z_spin_unlock_valid>
    fd12:	b968      	cbnz	r0, fd30 <z_unpend_first_thread+0x78>
    fd14:	4a0a      	ldr	r2, [pc, #40]	; (fd40 <z_unpend_first_thread+0x88>)
    fd16:	490e      	ldr	r1, [pc, #56]	; (fd50 <z_unpend_first_thread+0x98>)
    fd18:	480b      	ldr	r0, [pc, #44]	; (fd48 <z_unpend_first_thread+0x90>)
    fd1a:	23b9      	movs	r3, #185	; 0xb9
    fd1c:	f007 ff97 	bl	17c4e <assert_print>
    fd20:	4906      	ldr	r1, [pc, #24]	; (fd3c <z_unpend_first_thread+0x84>)
    fd22:	480c      	ldr	r0, [pc, #48]	; (fd54 <z_unpend_first_thread+0x9c>)
    fd24:	f007 ff93 	bl	17c4e <assert_print>
    fd28:	4805      	ldr	r0, [pc, #20]	; (fd40 <z_unpend_first_thread+0x88>)
    fd2a:	21b9      	movs	r1, #185	; 0xb9
    fd2c:	f007 ff88 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    fd30:	f385 8811 	msr	BASEPRI, r5
    fd34:	f3bf 8f6f 	isb	sy
}
    fd38:	4620      	mov	r0, r4
    fd3a:	bd38      	pop	{r3, r4, r5, pc}
    fd3c:	20023a28 	.word	0x20023a28
    fd40:	0003bd42 	.word	0x0003bd42
    fd44:	0003bd9b 	.word	0x0003bd9b
    fd48:	0003baf1 	.word	0x0003baf1
    fd4c:	0003bdb0 	.word	0x0003bdb0
    fd50:	0003bd6f 	.word	0x0003bd6f
    fd54:	0003bd86 	.word	0x0003bd86

0000fd58 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    fd58:	4b04      	ldr	r3, [pc, #16]	; (fd6c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    fd5a:	2100      	movs	r1, #0
    fd5c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    fd60:	e9c3 2208 	strd	r2, r2, [r3, #32]
    fd64:	4608      	mov	r0, r1
    fd66:	f7ff b901 	b.w	ef6c <k_sched_time_slice_set>
    fd6a:	bf00      	nop
    fd6c:	200239e4 	.word	0x200239e4

0000fd70 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd72:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    fd76:	b173      	cbz	r3, fd96 <z_impl_k_yield+0x26>
    fd78:	493f      	ldr	r1, [pc, #252]	; (fe78 <z_impl_k_yield+0x108>)
    fd7a:	4a40      	ldr	r2, [pc, #256]	; (fe7c <z_impl_k_yield+0x10c>)
    fd7c:	4840      	ldr	r0, [pc, #256]	; (fe80 <z_impl_k_yield+0x110>)
    fd7e:	f240 5332 	movw	r3, #1330	; 0x532
    fd82:	f007 ff64 	bl	17c4e <assert_print>
    fd86:	483f      	ldr	r0, [pc, #252]	; (fe84 <z_impl_k_yield+0x114>)
    fd88:	f007 ff61 	bl	17c4e <assert_print>
    fd8c:	483b      	ldr	r0, [pc, #236]	; (fe7c <z_impl_k_yield+0x10c>)
    fd8e:	f240 5132 	movw	r1, #1330	; 0x532
    fd92:	f007 ff55 	bl	17c40 <assert_post_action>
	__asm__ volatile(
    fd96:	f04f 0320 	mov.w	r3, #32
    fd9a:	f3ef 8611 	mrs	r6, BASEPRI
    fd9e:	f383 8812 	msr	BASEPRI_MAX, r3
    fda2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fda6:	4838      	ldr	r0, [pc, #224]	; (fe88 <z_impl_k_yield+0x118>)
    fda8:	f7fe fb1e 	bl	e3e8 <z_spin_lock_valid>
    fdac:	b968      	cbnz	r0, fdca <z_impl_k_yield+0x5a>
    fdae:	4a37      	ldr	r2, [pc, #220]	; (fe8c <z_impl_k_yield+0x11c>)
    fdb0:	4937      	ldr	r1, [pc, #220]	; (fe90 <z_impl_k_yield+0x120>)
    fdb2:	4833      	ldr	r0, [pc, #204]	; (fe80 <z_impl_k_yield+0x110>)
    fdb4:	238e      	movs	r3, #142	; 0x8e
    fdb6:	f007 ff4a 	bl	17c4e <assert_print>
    fdba:	4933      	ldr	r1, [pc, #204]	; (fe88 <z_impl_k_yield+0x118>)
    fdbc:	4835      	ldr	r0, [pc, #212]	; (fe94 <z_impl_k_yield+0x124>)
    fdbe:	f007 ff46 	bl	17c4e <assert_print>
    fdc2:	4832      	ldr	r0, [pc, #200]	; (fe8c <z_impl_k_yield+0x11c>)
    fdc4:	218e      	movs	r1, #142	; 0x8e
    fdc6:	f007 ff3b 	bl	17c40 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    fdca:	4d33      	ldr	r5, [pc, #204]	; (fe98 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    fdcc:	482e      	ldr	r0, [pc, #184]	; (fe88 <z_impl_k_yield+0x118>)
    fdce:	f7fe fb29 	bl	e424 <z_spin_lock_set_owner>
    fdd2:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fdd4:	7b4b      	ldrb	r3, [r1, #13]
    fdd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fdda:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    fddc:	f105 0020 	add.w	r0, r5, #32
    fde0:	f7ff fa2a 	bl	f238 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    fde4:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    fde6:	7b63      	ldrb	r3, [r4, #13]
    fde8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fdec:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    fdee:	4b2b      	ldr	r3, [pc, #172]	; (fe9c <z_impl_k_yield+0x12c>)
    fdf0:	429c      	cmp	r4, r3
    fdf2:	d109      	bne.n	fe08 <z_impl_k_yield+0x98>
    fdf4:	492a      	ldr	r1, [pc, #168]	; (fea0 <z_impl_k_yield+0x130>)
    fdf6:	4822      	ldr	r0, [pc, #136]	; (fe80 <z_impl_k_yield+0x110>)
    fdf8:	4a20      	ldr	r2, [pc, #128]	; (fe7c <z_impl_k_yield+0x10c>)
    fdfa:	23ba      	movs	r3, #186	; 0xba
    fdfc:	f007 ff27 	bl	17c4e <assert_print>
    fe00:	481e      	ldr	r0, [pc, #120]	; (fe7c <z_impl_k_yield+0x10c>)
    fe02:	21ba      	movs	r1, #186	; 0xba
    fe04:	f007 ff1c 	bl	17c40 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    fe08:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe0c:	4825      	ldr	r0, [pc, #148]	; (fea4 <z_impl_k_yield+0x134>)
    fe0e:	4283      	cmp	r3, r0
    fe10:	d02d      	beq.n	fe6e <z_impl_k_yield+0xfe>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe12:	b363      	cbz	r3, fe6e <z_impl_k_yield+0xfe>
	int32_t b1 = thread_1->base.prio;
    fe14:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    fe18:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    fe1c:	4297      	cmp	r7, r2
    fe1e:	d021      	beq.n	fe64 <z_impl_k_yield+0xf4>
		return b2 - b1;
    fe20:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    fe22:	2a00      	cmp	r2, #0
    fe24:	dd1e      	ble.n	fe64 <z_impl_k_yield+0xf4>
	sys_dnode_t *const prev = successor->prev;
    fe26:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    fe28:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    fe2c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    fe2e:	605c      	str	r4, [r3, #4]
	update_cache(1);
    fe30:	2001      	movs	r0, #1
    fe32:	f7ff fa45 	bl	f2c0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fe36:	4814      	ldr	r0, [pc, #80]	; (fe88 <z_impl_k_yield+0x118>)
    fe38:	f7fe fae4 	bl	e404 <z_spin_unlock_valid>
    fe3c:	b968      	cbnz	r0, fe5a <z_impl_k_yield+0xea>
    fe3e:	4a13      	ldr	r2, [pc, #76]	; (fe8c <z_impl_k_yield+0x11c>)
    fe40:	4919      	ldr	r1, [pc, #100]	; (fea8 <z_impl_k_yield+0x138>)
    fe42:	480f      	ldr	r0, [pc, #60]	; (fe80 <z_impl_k_yield+0x110>)
    fe44:	23d0      	movs	r3, #208	; 0xd0
    fe46:	f007 ff02 	bl	17c4e <assert_print>
    fe4a:	490f      	ldr	r1, [pc, #60]	; (fe88 <z_impl_k_yield+0x118>)
    fe4c:	4817      	ldr	r0, [pc, #92]	; (feac <z_impl_k_yield+0x13c>)
    fe4e:	f007 fefe 	bl	17c4e <assert_print>
    fe52:	480e      	ldr	r0, [pc, #56]	; (fe8c <z_impl_k_yield+0x11c>)
    fe54:	21d0      	movs	r1, #208	; 0xd0
    fe56:	f007 fef3 	bl	17c40 <assert_post_action>
    fe5a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    fe5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fe60:	f7f8 baa6 	b.w	83b0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    fe64:	428b      	cmp	r3, r1
    fe66:	d002      	beq.n	fe6e <z_impl_k_yield+0xfe>
    fe68:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d1d4      	bne.n	fe18 <z_impl_k_yield+0xa8>
	node->prev = tail;
    fe6e:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    fe72:	600c      	str	r4, [r1, #0]
	list->tail = node;
    fe74:	626c      	str	r4, [r5, #36]	; 0x24
}
    fe76:	e7db      	b.n	fe30 <z_impl_k_yield+0xc0>
    fe78:	0003db8b 	.word	0x0003db8b
    fe7c:	0003de3d 	.word	0x0003de3d
    fe80:	0003baf1 	.word	0x0003baf1
    fe84:	0003dca0 	.word	0x0003dca0
    fe88:	20023a28 	.word	0x20023a28
    fe8c:	0003bd42 	.word	0x0003bd42
    fe90:	0003bd9b 	.word	0x0003bd9b
    fe94:	0003bdb0 	.word	0x0003bdb0
    fe98:	200239e4 	.word	0x200239e4
    fe9c:	20000cc8 	.word	0x20000cc8
    fea0:	0003de5f 	.word	0x0003de5f
    fea4:	20023a04 	.word	0x20023a04
    fea8:	0003bd6f 	.word	0x0003bd6f
    feac:	0003bd86 	.word	0x0003bd86

0000feb0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    feb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    feb4:	4605      	mov	r5, r0
    feb6:	460e      	mov	r6, r1
    feb8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    febc:	b173      	cbz	r3, fedc <z_tick_sleep+0x2c>
    febe:	4943      	ldr	r1, [pc, #268]	; (ffcc <z_tick_sleep+0x11c>)
    fec0:	4a43      	ldr	r2, [pc, #268]	; (ffd0 <z_tick_sleep+0x120>)
    fec2:	4844      	ldr	r0, [pc, #272]	; (ffd4 <z_tick_sleep+0x124>)
    fec4:	f240 534e 	movw	r3, #1358	; 0x54e
    fec8:	f007 fec1 	bl	17c4e <assert_print>
    fecc:	4842      	ldr	r0, [pc, #264]	; (ffd8 <z_tick_sleep+0x128>)
    fece:	f007 febe 	bl	17c4e <assert_print>
    fed2:	483f      	ldr	r0, [pc, #252]	; (ffd0 <z_tick_sleep+0x120>)
    fed4:	f240 514e 	movw	r1, #1358	; 0x54e
    fed8:	f007 feb2 	bl	17c40 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    fedc:	ea55 0306 	orrs.w	r3, r5, r6
    fee0:	d103      	bne.n	feea <z_tick_sleep+0x3a>
	z_impl_k_yield();
    fee2:	f7ff ff45 	bl	fd70 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    fee6:	2000      	movs	r0, #0
    fee8:	e06d      	b.n	ffc6 <z_tick_sleep+0x116>
	if (Z_TICK_ABS(ticks) <= 0) {
    feea:	f06f 0401 	mvn.w	r4, #1
    feee:	1b64      	subs	r4, r4, r5
    fef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fef4:	eb63 0306 	sbc.w	r3, r3, r6
    fef8:	2c01      	cmp	r4, #1
    fefa:	f173 0300 	sbcs.w	r3, r3, #0
    fefe:	da02      	bge.n	ff06 <z_tick_sleep+0x56>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    ff00:	f008 fdba 	bl	18a78 <sys_clock_tick_get_32>
    ff04:	1944      	adds	r4, r0, r5
    ff06:	f04f 0320 	mov.w	r3, #32
    ff0a:	f3ef 8811 	mrs	r8, BASEPRI
    ff0e:	f383 8812 	msr	BASEPRI_MAX, r3
    ff12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff16:	4831      	ldr	r0, [pc, #196]	; (ffdc <z_tick_sleep+0x12c>)
    ff18:	f7fe fa66 	bl	e3e8 <z_spin_lock_valid>
    ff1c:	b968      	cbnz	r0, ff3a <z_tick_sleep+0x8a>
    ff1e:	4a30      	ldr	r2, [pc, #192]	; (ffe0 <z_tick_sleep+0x130>)
    ff20:	4930      	ldr	r1, [pc, #192]	; (ffe4 <z_tick_sleep+0x134>)
    ff22:	482c      	ldr	r0, [pc, #176]	; (ffd4 <z_tick_sleep+0x124>)
    ff24:	238e      	movs	r3, #142	; 0x8e
    ff26:	f007 fe92 	bl	17c4e <assert_print>
    ff2a:	492c      	ldr	r1, [pc, #176]	; (ffdc <z_tick_sleep+0x12c>)
    ff2c:	482e      	ldr	r0, [pc, #184]	; (ffe8 <z_tick_sleep+0x138>)
    ff2e:	f007 fe8e 	bl	17c4e <assert_print>
    ff32:	482b      	ldr	r0, [pc, #172]	; (ffe0 <z_tick_sleep+0x130>)
    ff34:	218e      	movs	r1, #142	; 0x8e
    ff36:	f007 fe83 	bl	17c40 <assert_post_action>
	pending_current = _current;
    ff3a:	4f2c      	ldr	r7, [pc, #176]	; (ffec <z_tick_sleep+0x13c>)
	z_spin_lock_set_owner(l);
    ff3c:	4827      	ldr	r0, [pc, #156]	; (ffdc <z_tick_sleep+0x12c>)
    ff3e:	f7fe fa71 	bl	e424 <z_spin_lock_set_owner>
    ff42:	4b2b      	ldr	r3, [pc, #172]	; (fff0 <z_tick_sleep+0x140>)
    ff44:	68b8      	ldr	r0, [r7, #8]
    ff46:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    ff48:	f7ff fc02 	bl	f750 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    ff4c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ff4e:	4929      	ldr	r1, [pc, #164]	; (fff4 <z_tick_sleep+0x144>)
    ff50:	462a      	mov	r2, r5
    ff52:	4633      	mov	r3, r6
    ff54:	3018      	adds	r0, #24
    ff56:	f000 fa15 	bl	10384 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ff5a:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ff5c:	481f      	ldr	r0, [pc, #124]	; (ffdc <z_tick_sleep+0x12c>)
    ff5e:	7b53      	ldrb	r3, [r2, #13]
    ff60:	f043 0310 	orr.w	r3, r3, #16
    ff64:	7353      	strb	r3, [r2, #13]
    ff66:	f7fe fa4d 	bl	e404 <z_spin_unlock_valid>
    ff6a:	b968      	cbnz	r0, ff88 <z_tick_sleep+0xd8>
    ff6c:	4a1c      	ldr	r2, [pc, #112]	; (ffe0 <z_tick_sleep+0x130>)
    ff6e:	4922      	ldr	r1, [pc, #136]	; (fff8 <z_tick_sleep+0x148>)
    ff70:	4818      	ldr	r0, [pc, #96]	; (ffd4 <z_tick_sleep+0x124>)
    ff72:	23d0      	movs	r3, #208	; 0xd0
    ff74:	f007 fe6b 	bl	17c4e <assert_print>
    ff78:	4918      	ldr	r1, [pc, #96]	; (ffdc <z_tick_sleep+0x12c>)
    ff7a:	4820      	ldr	r0, [pc, #128]	; (fffc <z_tick_sleep+0x14c>)
    ff7c:	f007 fe67 	bl	17c4e <assert_print>
    ff80:	4817      	ldr	r0, [pc, #92]	; (ffe0 <z_tick_sleep+0x130>)
    ff82:	21d0      	movs	r1, #208	; 0xd0
    ff84:	f007 fe5c 	bl	17c40 <assert_post_action>
    ff88:	4640      	mov	r0, r8
    ff8a:	f7f8 fa11 	bl	83b0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    ff8e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    ff90:	7b5b      	ldrb	r3, [r3, #13]
    ff92:	06db      	lsls	r3, r3, #27
    ff94:	d50e      	bpl.n	ffb4 <z_tick_sleep+0x104>
    ff96:	491a      	ldr	r1, [pc, #104]	; (10000 <z_tick_sleep+0x150>)
    ff98:	4a0d      	ldr	r2, [pc, #52]	; (ffd0 <z_tick_sleep+0x120>)
    ff9a:	480e      	ldr	r0, [pc, #56]	; (ffd4 <z_tick_sleep+0x124>)
    ff9c:	f240 536f 	movw	r3, #1391	; 0x56f
    ffa0:	f007 fe55 	bl	17c4e <assert_print>
    ffa4:	480c      	ldr	r0, [pc, #48]	; (ffd8 <z_tick_sleep+0x128>)
    ffa6:	f007 fe52 	bl	17c4e <assert_print>
    ffaa:	4809      	ldr	r0, [pc, #36]	; (ffd0 <z_tick_sleep+0x120>)
    ffac:	f240 516f 	movw	r1, #1391	; 0x56f
    ffb0:	f007 fe46 	bl	17c40 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ffb4:	f008 fd60 	bl	18a78 <sys_clock_tick_get_32>
    ffb8:	1a20      	subs	r0, r4, r0
    ffba:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    ffbe:	2801      	cmp	r0, #1
    ffc0:	f173 0300 	sbcs.w	r3, r3, #0
    ffc4:	db8f      	blt.n	fee6 <z_tick_sleep+0x36>
}
    ffc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffca:	bf00      	nop
    ffcc:	0003db8b 	.word	0x0003db8b
    ffd0:	0003de3d 	.word	0x0003de3d
    ffd4:	0003baf1 	.word	0x0003baf1
    ffd8:	0003dca0 	.word	0x0003dca0
    ffdc:	20023a28 	.word	0x20023a28
    ffe0:	0003bd42 	.word	0x0003bd42
    ffe4:	0003bd9b 	.word	0x0003bd9b
    ffe8:	0003bdb0 	.word	0x0003bdb0
    ffec:	200239e4 	.word	0x200239e4
    fff0:	20023a24 	.word	0x20023a24
    fff4:	0000f699 	.word	0x0000f699
    fff8:	0003bd6f 	.word	0x0003bd6f
    fffc:	0003bd86 	.word	0x0003bd86
   10000:	0003deef 	.word	0x0003deef

00010004 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   10004:	b538      	push	{r3, r4, r5, lr}
   10006:	4605      	mov	r5, r0
   10008:	460c      	mov	r4, r1
   1000a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1000e:	b173      	cbz	r3, 1002e <z_impl_k_sleep+0x2a>
   10010:	4913      	ldr	r1, [pc, #76]	; (10060 <z_impl_k_sleep+0x5c>)
   10012:	4a14      	ldr	r2, [pc, #80]	; (10064 <z_impl_k_sleep+0x60>)
   10014:	4814      	ldr	r0, [pc, #80]	; (10068 <z_impl_k_sleep+0x64>)
   10016:	f240 537e 	movw	r3, #1406	; 0x57e
   1001a:	f007 fe18 	bl	17c4e <assert_print>
   1001e:	4813      	ldr	r0, [pc, #76]	; (1006c <z_impl_k_sleep+0x68>)
   10020:	f007 fe15 	bl	17c4e <assert_print>
   10024:	480f      	ldr	r0, [pc, #60]	; (10064 <z_impl_k_sleep+0x60>)
   10026:	f240 517e 	movw	r1, #1406	; 0x57e
   1002a:	f007 fe09 	bl	17c40 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1002e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   10032:	bf08      	it	eq
   10034:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   10038:	d106      	bne.n	10048 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
   1003a:	4b0d      	ldr	r3, [pc, #52]	; (10070 <z_impl_k_sleep+0x6c>)
   1003c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1003e:	f7ff fd09 	bl	fa54 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   10042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   10046:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   10048:	4628      	mov	r0, r5
   1004a:	4621      	mov	r1, r4
   1004c:	f7ff ff30 	bl	feb0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   10050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10054:	fb80 0303 	smull	r0, r3, r0, r3
   10058:	0bc0      	lsrs	r0, r0, #15
   1005a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1005e:	e7f2      	b.n	10046 <z_impl_k_sleep+0x42>
   10060:	0003db8b 	.word	0x0003db8b
   10064:	0003de3d 	.word	0x0003de3d
   10068:	0003baf1 	.word	0x0003baf1
   1006c:	0003dca0 	.word	0x0003dca0
   10070:	200239e4 	.word	0x200239e4

00010074 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   10074:	4b01      	ldr	r3, [pc, #4]	; (1007c <z_impl_z_current_get+0x8>)
   10076:	6898      	ldr	r0, [r3, #8]
   10078:	4770      	bx	lr
   1007a:	bf00      	nop
   1007c:	200239e4 	.word	0x200239e4

00010080 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   10080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10084:	4604      	mov	r4, r0
   10086:	f04f 0320 	mov.w	r3, #32
   1008a:	f3ef 8611 	mrs	r6, BASEPRI
   1008e:	f383 8812 	msr	BASEPRI_MAX, r3
   10092:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10096:	4848      	ldr	r0, [pc, #288]	; (101b8 <z_thread_abort+0x138>)
   10098:	f7fe f9a6 	bl	e3e8 <z_spin_lock_valid>
   1009c:	b968      	cbnz	r0, 100ba <z_thread_abort+0x3a>
   1009e:	4a47      	ldr	r2, [pc, #284]	; (101bc <z_thread_abort+0x13c>)
   100a0:	4947      	ldr	r1, [pc, #284]	; (101c0 <z_thread_abort+0x140>)
   100a2:	4848      	ldr	r0, [pc, #288]	; (101c4 <z_thread_abort+0x144>)
   100a4:	238e      	movs	r3, #142	; 0x8e
   100a6:	f007 fdd2 	bl	17c4e <assert_print>
   100aa:	4943      	ldr	r1, [pc, #268]	; (101b8 <z_thread_abort+0x138>)
   100ac:	4846      	ldr	r0, [pc, #280]	; (101c8 <z_thread_abort+0x148>)
   100ae:	f007 fdce 	bl	17c4e <assert_print>
   100b2:	4842      	ldr	r0, [pc, #264]	; (101bc <z_thread_abort+0x13c>)
   100b4:	218e      	movs	r1, #142	; 0x8e
   100b6:	f007 fdc3 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   100ba:	483f      	ldr	r0, [pc, #252]	; (101b8 <z_thread_abort+0x138>)
   100bc:	f7fe f9b2 	bl	e424 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   100c0:	7b63      	ldrb	r3, [r4, #13]
   100c2:	071a      	lsls	r2, r3, #28
   100c4:	d517      	bpl.n	100f6 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   100c6:	483c      	ldr	r0, [pc, #240]	; (101b8 <z_thread_abort+0x138>)
   100c8:	f7fe f99c 	bl	e404 <z_spin_unlock_valid>
   100cc:	b968      	cbnz	r0, 100ea <z_thread_abort+0x6a>
   100ce:	4a3b      	ldr	r2, [pc, #236]	; (101bc <z_thread_abort+0x13c>)
   100d0:	493e      	ldr	r1, [pc, #248]	; (101cc <z_thread_abort+0x14c>)
   100d2:	483c      	ldr	r0, [pc, #240]	; (101c4 <z_thread_abort+0x144>)
   100d4:	23b9      	movs	r3, #185	; 0xb9
   100d6:	f007 fdba 	bl	17c4e <assert_print>
   100da:	4937      	ldr	r1, [pc, #220]	; (101b8 <z_thread_abort+0x138>)
   100dc:	483c      	ldr	r0, [pc, #240]	; (101d0 <z_thread_abort+0x150>)
   100de:	f007 fdb6 	bl	17c4e <assert_print>
   100e2:	4836      	ldr	r0, [pc, #216]	; (101bc <z_thread_abort+0x13c>)
   100e4:	21b9      	movs	r1, #185	; 0xb9
   100e6:	f007 fdab 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   100ea:	f386 8811 	msr	BASEPRI, r6
   100ee:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   100f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   100f6:	f023 0220 	bic.w	r2, r3, #32
   100fa:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   100fe:	09d2      	lsrs	r2, r2, #7
   10100:	d142      	bne.n	10188 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10102:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   10104:	68a3      	ldr	r3, [r4, #8]
   10106:	b113      	cbz	r3, 1010e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   10108:	4620      	mov	r0, r4
   1010a:	f7ff f8b7 	bl	f27c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1010e:	f104 0018 	add.w	r0, r4, #24
   10112:	f000 f9ff 	bl	10514 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   10116:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1011a:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1011e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10120:	42bd      	cmp	r5, r7
   10122:	d001      	beq.n	10128 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   10124:	2d00      	cmp	r5, #0
   10126:	d139      	bne.n	1019c <z_thread_abort+0x11c>
		update_cache(1);
   10128:	2001      	movs	r0, #1
   1012a:	f7ff f8c9 	bl	f2c0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1012e:	4b29      	ldr	r3, [pc, #164]	; (101d4 <z_thread_abort+0x154>)
   10130:	689b      	ldr	r3, [r3, #8]
   10132:	42a3      	cmp	r3, r4
   10134:	d1c7      	bne.n	100c6 <z_thread_abort+0x46>
   10136:	f3ef 8305 	mrs	r3, IPSR
   1013a:	2b00      	cmp	r3, #0
   1013c:	d1c3      	bne.n	100c6 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1013e:	481e      	ldr	r0, [pc, #120]	; (101b8 <z_thread_abort+0x138>)
   10140:	f7fe f960 	bl	e404 <z_spin_unlock_valid>
   10144:	b968      	cbnz	r0, 10162 <z_thread_abort+0xe2>
   10146:	4a1d      	ldr	r2, [pc, #116]	; (101bc <z_thread_abort+0x13c>)
   10148:	4920      	ldr	r1, [pc, #128]	; (101cc <z_thread_abort+0x14c>)
   1014a:	481e      	ldr	r0, [pc, #120]	; (101c4 <z_thread_abort+0x144>)
   1014c:	23d0      	movs	r3, #208	; 0xd0
   1014e:	f007 fd7e 	bl	17c4e <assert_print>
   10152:	4919      	ldr	r1, [pc, #100]	; (101b8 <z_thread_abort+0x138>)
   10154:	481e      	ldr	r0, [pc, #120]	; (101d0 <z_thread_abort+0x150>)
   10156:	f007 fd7a 	bl	17c4e <assert_print>
   1015a:	4818      	ldr	r0, [pc, #96]	; (101bc <z_thread_abort+0x13c>)
   1015c:	21d0      	movs	r1, #208	; 0xd0
   1015e:	f007 fd6f 	bl	17c40 <assert_post_action>
   10162:	4630      	mov	r0, r6
   10164:	f7f8 f924 	bl	83b0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   10168:	4a1b      	ldr	r2, [pc, #108]	; (101d8 <z_thread_abort+0x158>)
   1016a:	491c      	ldr	r1, [pc, #112]	; (101dc <z_thread_abort+0x15c>)
   1016c:	4815      	ldr	r0, [pc, #84]	; (101c4 <z_thread_abort+0x144>)
   1016e:	f240 63ac 	movw	r3, #1708	; 0x6ac
   10172:	f007 fd6c 	bl	17c4e <assert_print>
   10176:	481a      	ldr	r0, [pc, #104]	; (101e0 <z_thread_abort+0x160>)
   10178:	f007 fd69 	bl	17c4e <assert_print>
   1017c:	4816      	ldr	r0, [pc, #88]	; (101d8 <z_thread_abort+0x158>)
   1017e:	f240 61ac 	movw	r1, #1708	; 0x6ac
   10182:	f007 fd5d 	bl	17c40 <assert_post_action>
   10186:	e79e      	b.n	100c6 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10188:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1018c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   10190:	4814      	ldr	r0, [pc, #80]	; (101e4 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10192:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   10194:	4621      	mov	r1, r4
   10196:	f7ff f84f 	bl	f238 <z_priq_dumb_remove>
}
   1019a:	e7b3      	b.n	10104 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   1019c:	4628      	mov	r0, r5
   1019e:	f7ff f86d 	bl	f27c <unpend_thread_no_timeout>
   101a2:	f105 0018 	add.w	r0, r5, #24
   101a6:	f000 f9b5 	bl	10514 <z_abort_timeout>
   101aa:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   101ae:	4628      	mov	r0, r5
   101b0:	f7ff f98a 	bl	f4c8 <ready_thread>
   101b4:	e7b3      	b.n	1011e <z_thread_abort+0x9e>
   101b6:	bf00      	nop
   101b8:	20023a28 	.word	0x20023a28
   101bc:	0003bd42 	.word	0x0003bd42
   101c0:	0003bd9b 	.word	0x0003bd9b
   101c4:	0003baf1 	.word	0x0003baf1
   101c8:	0003bdb0 	.word	0x0003bdb0
   101cc:	0003bd6f 	.word	0x0003bd6f
   101d0:	0003bd86 	.word	0x0003bd86
   101d4:	200239e4 	.word	0x200239e4
   101d8:	0003de3d 	.word	0x0003de3d
   101dc:	0003d09f 	.word	0x0003d09f
   101e0:	0003df2f 	.word	0x0003df2f
   101e4:	20023a04 	.word	0x20023a04

000101e8 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   101e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101ea:	4604      	mov	r4, r0
   101ec:	460e      	mov	r6, r1
   101ee:	4615      	mov	r5, r2
	__asm__ volatile(
   101f0:	f04f 0320 	mov.w	r3, #32
   101f4:	f3ef 8711 	mrs	r7, BASEPRI
   101f8:	f383 8812 	msr	BASEPRI_MAX, r3
   101fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10200:	481e      	ldr	r0, [pc, #120]	; (1027c <z_sched_wake+0x94>)
   10202:	f7fe f8f1 	bl	e3e8 <z_spin_lock_valid>
   10206:	b968      	cbnz	r0, 10224 <z_sched_wake+0x3c>
   10208:	4a1d      	ldr	r2, [pc, #116]	; (10280 <z_sched_wake+0x98>)
   1020a:	491e      	ldr	r1, [pc, #120]	; (10284 <z_sched_wake+0x9c>)
   1020c:	481e      	ldr	r0, [pc, #120]	; (10288 <z_sched_wake+0xa0>)
   1020e:	238e      	movs	r3, #142	; 0x8e
   10210:	f007 fd1d 	bl	17c4e <assert_print>
   10214:	4919      	ldr	r1, [pc, #100]	; (1027c <z_sched_wake+0x94>)
   10216:	481d      	ldr	r0, [pc, #116]	; (1028c <z_sched_wake+0xa4>)
   10218:	f007 fd19 	bl	17c4e <assert_print>
   1021c:	4818      	ldr	r0, [pc, #96]	; (10280 <z_sched_wake+0x98>)
   1021e:	218e      	movs	r1, #142	; 0x8e
   10220:	f007 fd0e 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   10224:	4815      	ldr	r0, [pc, #84]	; (1027c <z_sched_wake+0x94>)
   10226:	f7fe f8fd 	bl	e424 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   1022a:	4620      	mov	r0, r4
   1022c:	f008 fc1e 	bl	18a6c <z_priq_dumb_best>

		if (thread != NULL) {
   10230:	4604      	mov	r4, r0
   10232:	b158      	cbz	r0, 1024c <z_sched_wake+0x64>
   10234:	6786      	str	r6, [r0, #120]	; 0x78
   10236:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   10238:	f7ff f820 	bl	f27c <unpend_thread_no_timeout>
   1023c:	f104 0018 	add.w	r0, r4, #24
   10240:	f000 f968 	bl	10514 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   10244:	4620      	mov	r0, r4
   10246:	f7ff f93f 	bl	f4c8 <ready_thread>
			ret = true;
   1024a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1024c:	480b      	ldr	r0, [pc, #44]	; (1027c <z_sched_wake+0x94>)
   1024e:	f7fe f8d9 	bl	e404 <z_spin_unlock_valid>
   10252:	b968      	cbnz	r0, 10270 <z_sched_wake+0x88>
   10254:	4a0a      	ldr	r2, [pc, #40]	; (10280 <z_sched_wake+0x98>)
   10256:	490e      	ldr	r1, [pc, #56]	; (10290 <z_sched_wake+0xa8>)
   10258:	480b      	ldr	r0, [pc, #44]	; (10288 <z_sched_wake+0xa0>)
   1025a:	23b9      	movs	r3, #185	; 0xb9
   1025c:	f007 fcf7 	bl	17c4e <assert_print>
   10260:	4906      	ldr	r1, [pc, #24]	; (1027c <z_sched_wake+0x94>)
   10262:	480c      	ldr	r0, [pc, #48]	; (10294 <z_sched_wake+0xac>)
   10264:	f007 fcf3 	bl	17c4e <assert_print>
   10268:	4805      	ldr	r0, [pc, #20]	; (10280 <z_sched_wake+0x98>)
   1026a:	21b9      	movs	r1, #185	; 0xb9
   1026c:	f007 fce8 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   10270:	f387 8811 	msr	BASEPRI, r7
   10274:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   10278:	4620      	mov	r0, r4
   1027a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1027c:	20023a28 	.word	0x20023a28
   10280:	0003bd42 	.word	0x0003bd42
   10284:	0003bd9b 	.word	0x0003bd9b
   10288:	0003baf1 	.word	0x0003baf1
   1028c:	0003bdb0 	.word	0x0003bdb0
   10290:	0003bd6f 	.word	0x0003bd6f
   10294:	0003bd86 	.word	0x0003bd86

00010298 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   10298:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1029a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1029e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   102a0:	e9cd 6700 	strd	r6, r7, [sp]
   102a4:	f7ff fb0e 	bl	f8c4 <z_pend_curr>

	if (data != NULL) {
   102a8:	b11c      	cbz	r4, 102b2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   102aa:	4b03      	ldr	r3, [pc, #12]	; (102b8 <z_sched_wait+0x20>)
   102ac:	689b      	ldr	r3, [r3, #8]
   102ae:	695b      	ldr	r3, [r3, #20]
   102b0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   102b2:	b002      	add	sp, #8
   102b4:	bdd0      	pop	{r4, r6, r7, pc}
   102b6:	bf00      	nop
   102b8:	200239e4 	.word	0x200239e4

000102bc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   102bc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   102be:	4806      	ldr	r0, [pc, #24]	; (102d8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   102c0:	4a06      	ldr	r2, [pc, #24]	; (102dc <z_data_copy+0x20>)
   102c2:	4907      	ldr	r1, [pc, #28]	; (102e0 <z_data_copy+0x24>)
   102c4:	1a12      	subs	r2, r2, r0
   102c6:	f008 fb53 	bl	18970 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   102ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   102ce:	4a05      	ldr	r2, [pc, #20]	; (102e4 <z_data_copy+0x28>)
   102d0:	4905      	ldr	r1, [pc, #20]	; (102e8 <z_data_copy+0x2c>)
   102d2:	4806      	ldr	r0, [pc, #24]	; (102ec <z_data_copy+0x30>)
   102d4:	f008 bb4c 	b.w	18970 <z_early_memcpy>
   102d8:	20000000 	.word	0x20000000
   102dc:	200006a0 	.word	0x200006a0
   102e0:	0003efa4 	.word	0x0003efa4
   102e4:	00000000 	.word	0x00000000
   102e8:	0003efa4 	.word	0x0003efa4
   102ec:	20000000 	.word	0x20000000

000102f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   102f0:	4b03      	ldr	r3, [pc, #12]	; (10300 <elapsed+0x10>)
   102f2:	681b      	ldr	r3, [r3, #0]
   102f4:	b90b      	cbnz	r3, 102fa <elapsed+0xa>
   102f6:	f7fa bc95 	b.w	ac24 <sys_clock_elapsed>
}
   102fa:	2000      	movs	r0, #0
   102fc:	4770      	bx	lr
   102fe:	bf00      	nop
   10300:	20023a34 	.word	0x20023a34

00010304 <next_timeout>:
	return list->head == list;
   10304:	4b10      	ldr	r3, [pc, #64]	; (10348 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   10306:	b510      	push	{r4, lr}
   10308:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1030a:	429c      	cmp	r4, r3
   1030c:	bf08      	it	eq
   1030e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   10310:	f7ff ffee 	bl	102f0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   10314:	b1a4      	cbz	r4, 10340 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   10316:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1031a:	1a1b      	subs	r3, r3, r0
   1031c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   10320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   10324:	f170 0200 	sbcs.w	r2, r0, #0
   10328:	da0a      	bge.n	10340 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1032a:	2800      	cmp	r0, #0
   1032c:	bfac      	ite	ge
   1032e:	4618      	movge	r0, r3
   10330:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   10332:	4b06      	ldr	r3, [pc, #24]	; (1034c <next_timeout+0x48>)
   10334:	691b      	ldr	r3, [r3, #16]
   10336:	b113      	cbz	r3, 1033e <next_timeout+0x3a>
   10338:	4298      	cmp	r0, r3
   1033a:	bfa8      	it	ge
   1033c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1033e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   10340:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10344:	e7f5      	b.n	10332 <next_timeout+0x2e>
   10346:	bf00      	nop
   10348:	20000128 	.word	0x20000128
   1034c:	200239e4 	.word	0x200239e4

00010350 <remove_timeout>:
{
   10350:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   10352:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10354:	b168      	cbz	r0, 10372 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   10356:	4a0a      	ldr	r2, [pc, #40]	; (10380 <remove_timeout+0x30>)
   10358:	6852      	ldr	r2, [r2, #4]
   1035a:	4290      	cmp	r0, r2
   1035c:	d009      	beq.n	10372 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1035e:	b143      	cbz	r3, 10372 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   10360:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   10364:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   10368:	1912      	adds	r2, r2, r4
   1036a:	eb41 0105 	adc.w	r1, r1, r5
   1036e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   10372:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   10374:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10376:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10378:	2300      	movs	r3, #0
	node->prev = NULL;
   1037a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1037e:	bd30      	pop	{r4, r5, pc}
   10380:	20000128 	.word	0x20000128

00010384 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10388:	bf08      	it	eq
   1038a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1038e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10392:	4604      	mov	r4, r0
   10394:	460e      	mov	r6, r1
   10396:	4698      	mov	r8, r3
   10398:	4615      	mov	r5, r2
   1039a:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1039c:	f000 809e 	beq.w	104dc <z_add_timeout+0x158>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   103a0:	6803      	ldr	r3, [r0, #0]
   103a2:	b163      	cbz	r3, 103be <z_add_timeout+0x3a>
   103a4:	494e      	ldr	r1, [pc, #312]	; (104e0 <z_add_timeout+0x15c>)
   103a6:	4a4f      	ldr	r2, [pc, #316]	; (104e4 <z_add_timeout+0x160>)
   103a8:	484f      	ldr	r0, [pc, #316]	; (104e8 <z_add_timeout+0x164>)
   103aa:	2363      	movs	r3, #99	; 0x63
   103ac:	f007 fc4f 	bl	17c4e <assert_print>
   103b0:	484e      	ldr	r0, [pc, #312]	; (104ec <z_add_timeout+0x168>)
   103b2:	f007 fc4c 	bl	17c4e <assert_print>
   103b6:	484b      	ldr	r0, [pc, #300]	; (104e4 <z_add_timeout+0x160>)
   103b8:	2163      	movs	r1, #99	; 0x63
   103ba:	f007 fc41 	bl	17c40 <assert_post_action>
	to->fn = fn;
   103be:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   103c0:	f04f 0320 	mov.w	r3, #32
   103c4:	f3ef 8611 	mrs	r6, BASEPRI
   103c8:	f383 8812 	msr	BASEPRI_MAX, r3
   103cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   103d0:	4847      	ldr	r0, [pc, #284]	; (104f0 <z_add_timeout+0x16c>)
   103d2:	f7fe f809 	bl	e3e8 <z_spin_lock_valid>
   103d6:	b968      	cbnz	r0, 103f4 <z_add_timeout+0x70>
   103d8:	4a46      	ldr	r2, [pc, #280]	; (104f4 <z_add_timeout+0x170>)
   103da:	4947      	ldr	r1, [pc, #284]	; (104f8 <z_add_timeout+0x174>)
   103dc:	4842      	ldr	r0, [pc, #264]	; (104e8 <z_add_timeout+0x164>)
   103de:	238e      	movs	r3, #142	; 0x8e
   103e0:	f007 fc35 	bl	17c4e <assert_print>
   103e4:	4942      	ldr	r1, [pc, #264]	; (104f0 <z_add_timeout+0x16c>)
   103e6:	4845      	ldr	r0, [pc, #276]	; (104fc <z_add_timeout+0x178>)
   103e8:	f007 fc31 	bl	17c4e <assert_print>
   103ec:	4841      	ldr	r0, [pc, #260]	; (104f4 <z_add_timeout+0x170>)
   103ee:	218e      	movs	r1, #142	; 0x8e
   103f0:	f007 fc26 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   103f4:	483e      	ldr	r0, [pc, #248]	; (104f0 <z_add_timeout+0x16c>)
   103f6:	f7fe f815 	bl	e424 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   103fa:	f06f 0201 	mvn.w	r2, #1
   103fe:	1b53      	subs	r3, r2, r5
   10400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10404:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   10408:	2b00      	cmp	r3, #0
   1040a:	db1b      	blt.n	10444 <z_add_timeout+0xc0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1040c:	4b3c      	ldr	r3, [pc, #240]	; (10500 <z_add_timeout+0x17c>)
   1040e:	e9d3 1300 	ldrd	r1, r3, [r3]
   10412:	1a52      	subs	r2, r2, r1
   10414:	eb60 0303 	sbc.w	r3, r0, r3
   10418:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1041a:	eb63 0707 	sbc.w	r7, r3, r7
   1041e:	2d01      	cmp	r5, #1
   10420:	f177 0300 	sbcs.w	r3, r7, #0
   10424:	bfbc      	itt	lt
   10426:	2501      	movlt	r5, #1
   10428:	2700      	movlt	r7, #0
   1042a:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   1042e:	4a35      	ldr	r2, [pc, #212]	; (10504 <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
   10430:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10434:	4293      	cmp	r3, r2
   10436:	d118      	bne.n	1046a <z_add_timeout+0xe6>
	node->prev = tail;
   10438:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1043c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   10440:	6054      	str	r4, [r2, #4]
}
   10442:	e026      	b.n	10492 <z_add_timeout+0x10e>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   10444:	f7ff ff54 	bl	102f0 <elapsed>
   10448:	3501      	adds	r5, #1
   1044a:	f148 0800 	adc.w	r8, r8, #0
   1044e:	182d      	adds	r5, r5, r0
   10450:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   10454:	e9c4 5004 	strd	r5, r0, [r4, #16]
   10458:	e7e9      	b.n	1042e <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1045a:	1a09      	subs	r1, r1, r0
   1045c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   10460:	459c      	cmp	ip, r3
   10462:	e9c4 1504 	strd	r1, r5, [r4, #16]
   10466:	d0e7      	beq.n	10438 <z_add_timeout+0xb4>
   10468:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1046a:	2b00      	cmp	r3, #0
   1046c:	d0e4      	beq.n	10438 <z_add_timeout+0xb4>
			if (t->dticks > to->dticks) {
   1046e:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   10472:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   10476:	4281      	cmp	r1, r0
   10478:	eb75 0e07 	sbcs.w	lr, r5, r7
   1047c:	daed      	bge.n	1045a <z_add_timeout+0xd6>
				t->dticks -= to->dticks;
   1047e:	1a41      	subs	r1, r0, r1
   10480:	eb67 0505 	sbc.w	r5, r7, r5
   10484:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   10488:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1048a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1048e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   10490:	605c      	str	r4, [r3, #4]
	return list->head == list;
   10492:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10494:	4293      	cmp	r3, r2
   10496:	d00b      	beq.n	104b0 <z_add_timeout+0x12c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   10498:	429c      	cmp	r4, r3
   1049a:	d109      	bne.n	104b0 <z_add_timeout+0x12c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1049c:	f7ff ff32 	bl	10304 <next_timeout>

			if (next_time == 0 ||
   104a0:	b118      	cbz	r0, 104aa <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
   104a2:	4b19      	ldr	r3, [pc, #100]	; (10508 <z_add_timeout+0x184>)
			if (next_time == 0 ||
   104a4:	691b      	ldr	r3, [r3, #16]
   104a6:	4283      	cmp	r3, r0
   104a8:	d002      	beq.n	104b0 <z_add_timeout+0x12c>
				sys_clock_set_timeout(next_time, false);
   104aa:	2100      	movs	r1, #0
   104ac:	f7fa fb88 	bl	abc0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   104b0:	480f      	ldr	r0, [pc, #60]	; (104f0 <z_add_timeout+0x16c>)
   104b2:	f7fd ffa7 	bl	e404 <z_spin_unlock_valid>
   104b6:	b968      	cbnz	r0, 104d4 <z_add_timeout+0x150>
   104b8:	4a0e      	ldr	r2, [pc, #56]	; (104f4 <z_add_timeout+0x170>)
   104ba:	4914      	ldr	r1, [pc, #80]	; (1050c <z_add_timeout+0x188>)
   104bc:	480a      	ldr	r0, [pc, #40]	; (104e8 <z_add_timeout+0x164>)
   104be:	23b9      	movs	r3, #185	; 0xb9
   104c0:	f007 fbc5 	bl	17c4e <assert_print>
   104c4:	490a      	ldr	r1, [pc, #40]	; (104f0 <z_add_timeout+0x16c>)
   104c6:	4812      	ldr	r0, [pc, #72]	; (10510 <z_add_timeout+0x18c>)
   104c8:	f007 fbc1 	bl	17c4e <assert_print>
   104cc:	4809      	ldr	r0, [pc, #36]	; (104f4 <z_add_timeout+0x170>)
   104ce:	21b9      	movs	r1, #185	; 0xb9
   104d0:	f007 fbb6 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   104d4:	f386 8811 	msr	BASEPRI, r6
   104d8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   104dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104e0:	0003df75 	.word	0x0003df75
   104e4:	0003df51 	.word	0x0003df51
   104e8:	0003baf1 	.word	0x0003baf1
   104ec:	0003dca0 	.word	0x0003dca0
   104f0:	20023a38 	.word	0x20023a38
   104f4:	0003bd42 	.word	0x0003bd42
   104f8:	0003bd9b 	.word	0x0003bd9b
   104fc:	0003bdb0 	.word	0x0003bdb0
   10500:	20000e48 	.word	0x20000e48
   10504:	20000128 	.word	0x20000128
   10508:	200239e4 	.word	0x200239e4
   1050c:	0003bd6f 	.word	0x0003bd6f
   10510:	0003bd86 	.word	0x0003bd86

00010514 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   10514:	b538      	push	{r3, r4, r5, lr}
   10516:	4604      	mov	r4, r0
	__asm__ volatile(
   10518:	f04f 0320 	mov.w	r3, #32
   1051c:	f3ef 8511 	mrs	r5, BASEPRI
   10520:	f383 8812 	msr	BASEPRI_MAX, r3
   10524:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10528:	481a      	ldr	r0, [pc, #104]	; (10594 <z_abort_timeout+0x80>)
   1052a:	f7fd ff5d 	bl	e3e8 <z_spin_lock_valid>
   1052e:	b968      	cbnz	r0, 1054c <z_abort_timeout+0x38>
   10530:	4a19      	ldr	r2, [pc, #100]	; (10598 <z_abort_timeout+0x84>)
   10532:	491a      	ldr	r1, [pc, #104]	; (1059c <z_abort_timeout+0x88>)
   10534:	481a      	ldr	r0, [pc, #104]	; (105a0 <z_abort_timeout+0x8c>)
   10536:	238e      	movs	r3, #142	; 0x8e
   10538:	f007 fb89 	bl	17c4e <assert_print>
   1053c:	4915      	ldr	r1, [pc, #84]	; (10594 <z_abort_timeout+0x80>)
   1053e:	4819      	ldr	r0, [pc, #100]	; (105a4 <z_abort_timeout+0x90>)
   10540:	f007 fb85 	bl	17c4e <assert_print>
   10544:	4814      	ldr	r0, [pc, #80]	; (10598 <z_abort_timeout+0x84>)
   10546:	218e      	movs	r1, #142	; 0x8e
   10548:	f007 fb7a 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   1054c:	4811      	ldr	r0, [pc, #68]	; (10594 <z_abort_timeout+0x80>)
   1054e:	f7fd ff69 	bl	e424 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   10552:	6823      	ldr	r3, [r4, #0]
   10554:	b1db      	cbz	r3, 1058e <z_abort_timeout+0x7a>
			remove_timeout(to);
   10556:	4620      	mov	r0, r4
   10558:	f7ff fefa 	bl	10350 <remove_timeout>
			ret = 0;
   1055c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1055e:	480d      	ldr	r0, [pc, #52]	; (10594 <z_abort_timeout+0x80>)
   10560:	f7fd ff50 	bl	e404 <z_spin_unlock_valid>
   10564:	b968      	cbnz	r0, 10582 <z_abort_timeout+0x6e>
   10566:	4a0c      	ldr	r2, [pc, #48]	; (10598 <z_abort_timeout+0x84>)
   10568:	490f      	ldr	r1, [pc, #60]	; (105a8 <z_abort_timeout+0x94>)
   1056a:	480d      	ldr	r0, [pc, #52]	; (105a0 <z_abort_timeout+0x8c>)
   1056c:	23b9      	movs	r3, #185	; 0xb9
   1056e:	f007 fb6e 	bl	17c4e <assert_print>
   10572:	4908      	ldr	r1, [pc, #32]	; (10594 <z_abort_timeout+0x80>)
   10574:	480d      	ldr	r0, [pc, #52]	; (105ac <z_abort_timeout+0x98>)
   10576:	f007 fb6a 	bl	17c4e <assert_print>
   1057a:	4807      	ldr	r0, [pc, #28]	; (10598 <z_abort_timeout+0x84>)
   1057c:	21b9      	movs	r1, #185	; 0xb9
   1057e:	f007 fb5f 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   10582:	f385 8811 	msr	BASEPRI, r5
   10586:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1058a:	4620      	mov	r0, r4
   1058c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1058e:	f06f 0415 	mvn.w	r4, #21
   10592:	e7e4      	b.n	1055e <z_abort_timeout+0x4a>
   10594:	20023a38 	.word	0x20023a38
   10598:	0003bd42 	.word	0x0003bd42
   1059c:	0003bd9b 	.word	0x0003bd9b
   105a0:	0003baf1 	.word	0x0003baf1
   105a4:	0003bdb0 	.word	0x0003bdb0
   105a8:	0003bd6f 	.word	0x0003bd6f
   105ac:	0003bd86 	.word	0x0003bd86

000105b0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   105b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   105b2:	f04f 0320 	mov.w	r3, #32
   105b6:	f3ef 8511 	mrs	r5, BASEPRI
   105ba:	f383 8812 	msr	BASEPRI_MAX, r3
   105be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   105c2:	4818      	ldr	r0, [pc, #96]	; (10624 <z_get_next_timeout_expiry+0x74>)
   105c4:	f7fd ff10 	bl	e3e8 <z_spin_lock_valid>
   105c8:	b968      	cbnz	r0, 105e6 <z_get_next_timeout_expiry+0x36>
   105ca:	4a17      	ldr	r2, [pc, #92]	; (10628 <z_get_next_timeout_expiry+0x78>)
   105cc:	4917      	ldr	r1, [pc, #92]	; (1062c <z_get_next_timeout_expiry+0x7c>)
   105ce:	4818      	ldr	r0, [pc, #96]	; (10630 <z_get_next_timeout_expiry+0x80>)
   105d0:	238e      	movs	r3, #142	; 0x8e
   105d2:	f007 fb3c 	bl	17c4e <assert_print>
   105d6:	4913      	ldr	r1, [pc, #76]	; (10624 <z_get_next_timeout_expiry+0x74>)
   105d8:	4816      	ldr	r0, [pc, #88]	; (10634 <z_get_next_timeout_expiry+0x84>)
   105da:	f007 fb38 	bl	17c4e <assert_print>
   105de:	4812      	ldr	r0, [pc, #72]	; (10628 <z_get_next_timeout_expiry+0x78>)
   105e0:	218e      	movs	r1, #142	; 0x8e
   105e2:	f007 fb2d 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   105e6:	480f      	ldr	r0, [pc, #60]	; (10624 <z_get_next_timeout_expiry+0x74>)
   105e8:	f7fd ff1c 	bl	e424 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   105ec:	f7ff fe8a 	bl	10304 <next_timeout>
   105f0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   105f2:	480c      	ldr	r0, [pc, #48]	; (10624 <z_get_next_timeout_expiry+0x74>)
   105f4:	f7fd ff06 	bl	e404 <z_spin_unlock_valid>
   105f8:	b968      	cbnz	r0, 10616 <z_get_next_timeout_expiry+0x66>
   105fa:	4a0b      	ldr	r2, [pc, #44]	; (10628 <z_get_next_timeout_expiry+0x78>)
   105fc:	490e      	ldr	r1, [pc, #56]	; (10638 <z_get_next_timeout_expiry+0x88>)
   105fe:	480c      	ldr	r0, [pc, #48]	; (10630 <z_get_next_timeout_expiry+0x80>)
   10600:	23b9      	movs	r3, #185	; 0xb9
   10602:	f007 fb24 	bl	17c4e <assert_print>
   10606:	4907      	ldr	r1, [pc, #28]	; (10624 <z_get_next_timeout_expiry+0x74>)
   10608:	480c      	ldr	r0, [pc, #48]	; (1063c <z_get_next_timeout_expiry+0x8c>)
   1060a:	f007 fb20 	bl	17c4e <assert_print>
   1060e:	4806      	ldr	r0, [pc, #24]	; (10628 <z_get_next_timeout_expiry+0x78>)
   10610:	21b9      	movs	r1, #185	; 0xb9
   10612:	f007 fb15 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   10616:	f385 8811 	msr	BASEPRI, r5
   1061a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1061e:	4620      	mov	r0, r4
   10620:	bd38      	pop	{r3, r4, r5, pc}
   10622:	bf00      	nop
   10624:	20023a38 	.word	0x20023a38
   10628:	0003bd42 	.word	0x0003bd42
   1062c:	0003bd9b 	.word	0x0003bd9b
   10630:	0003baf1 	.word	0x0003baf1
   10634:	0003bdb0 	.word	0x0003bdb0
   10638:	0003bd6f 	.word	0x0003bd6f
   1063c:	0003bd86 	.word	0x0003bd86

00010640 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   10640:	b570      	push	{r4, r5, r6, lr}
   10642:	4604      	mov	r4, r0
   10644:	460d      	mov	r5, r1
	__asm__ volatile(
   10646:	f04f 0320 	mov.w	r3, #32
   1064a:	f3ef 8611 	mrs	r6, BASEPRI
   1064e:	f383 8812 	msr	BASEPRI_MAX, r3
   10652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10656:	481b      	ldr	r0, [pc, #108]	; (106c4 <z_set_timeout_expiry+0x84>)
   10658:	f7fd fec6 	bl	e3e8 <z_spin_lock_valid>
   1065c:	b968      	cbnz	r0, 1067a <z_set_timeout_expiry+0x3a>
   1065e:	4a1a      	ldr	r2, [pc, #104]	; (106c8 <z_set_timeout_expiry+0x88>)
   10660:	491a      	ldr	r1, [pc, #104]	; (106cc <z_set_timeout_expiry+0x8c>)
   10662:	481b      	ldr	r0, [pc, #108]	; (106d0 <z_set_timeout_expiry+0x90>)
   10664:	238e      	movs	r3, #142	; 0x8e
   10666:	f007 faf2 	bl	17c4e <assert_print>
   1066a:	4916      	ldr	r1, [pc, #88]	; (106c4 <z_set_timeout_expiry+0x84>)
   1066c:	4819      	ldr	r0, [pc, #100]	; (106d4 <z_set_timeout_expiry+0x94>)
   1066e:	f007 faee 	bl	17c4e <assert_print>
   10672:	4815      	ldr	r0, [pc, #84]	; (106c8 <z_set_timeout_expiry+0x88>)
   10674:	218e      	movs	r1, #142	; 0x8e
   10676:	f007 fae3 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   1067a:	4812      	ldr	r0, [pc, #72]	; (106c4 <z_set_timeout_expiry+0x84>)
   1067c:	f7fd fed2 	bl	e424 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   10680:	f7ff fe40 	bl	10304 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   10684:	2801      	cmp	r0, #1
   10686:	dd05      	ble.n	10694 <z_set_timeout_expiry+0x54>
   10688:	42a0      	cmp	r0, r4
   1068a:	db03      	blt.n	10694 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1068c:	4629      	mov	r1, r5
   1068e:	4620      	mov	r0, r4
   10690:	f7fa fa96 	bl	abc0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10694:	480b      	ldr	r0, [pc, #44]	; (106c4 <z_set_timeout_expiry+0x84>)
   10696:	f7fd feb5 	bl	e404 <z_spin_unlock_valid>
   1069a:	b968      	cbnz	r0, 106b8 <z_set_timeout_expiry+0x78>
   1069c:	4a0a      	ldr	r2, [pc, #40]	; (106c8 <z_set_timeout_expiry+0x88>)
   1069e:	490e      	ldr	r1, [pc, #56]	; (106d8 <z_set_timeout_expiry+0x98>)
   106a0:	480b      	ldr	r0, [pc, #44]	; (106d0 <z_set_timeout_expiry+0x90>)
   106a2:	23b9      	movs	r3, #185	; 0xb9
   106a4:	f007 fad3 	bl	17c4e <assert_print>
   106a8:	4906      	ldr	r1, [pc, #24]	; (106c4 <z_set_timeout_expiry+0x84>)
   106aa:	480c      	ldr	r0, [pc, #48]	; (106dc <z_set_timeout_expiry+0x9c>)
   106ac:	f007 facf 	bl	17c4e <assert_print>
   106b0:	4805      	ldr	r0, [pc, #20]	; (106c8 <z_set_timeout_expiry+0x88>)
   106b2:	21b9      	movs	r1, #185	; 0xb9
   106b4:	f007 fac4 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   106b8:	f386 8811 	msr	BASEPRI, r6
   106bc:	f3bf 8f6f 	isb	sy
		}
	}
}
   106c0:	bd70      	pop	{r4, r5, r6, pc}
   106c2:	bf00      	nop
   106c4:	20023a38 	.word	0x20023a38
   106c8:	0003bd42 	.word	0x0003bd42
   106cc:	0003bd9b 	.word	0x0003bd9b
   106d0:	0003baf1 	.word	0x0003baf1
   106d4:	0003bdb0 	.word	0x0003bdb0
   106d8:	0003bd6f 	.word	0x0003bd6f
   106dc:	0003bd86 	.word	0x0003bd86

000106e0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   106e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   106e4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   106e6:	f7fe fe77 	bl	f3d8 <z_time_slice>
	__asm__ volatile(
   106ea:	f04f 0320 	mov.w	r3, #32
   106ee:	f3ef 8511 	mrs	r5, BASEPRI
   106f2:	f383 8812 	msr	BASEPRI_MAX, r3
   106f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   106fa:	484c      	ldr	r0, [pc, #304]	; (1082c <sys_clock_announce+0x14c>)
   106fc:	f7fd fe74 	bl	e3e8 <z_spin_lock_valid>
   10700:	b968      	cbnz	r0, 1071e <sys_clock_announce+0x3e>
   10702:	4a4b      	ldr	r2, [pc, #300]	; (10830 <sys_clock_announce+0x150>)
   10704:	494b      	ldr	r1, [pc, #300]	; (10834 <sys_clock_announce+0x154>)
   10706:	484c      	ldr	r0, [pc, #304]	; (10838 <sys_clock_announce+0x158>)
   10708:	238e      	movs	r3, #142	; 0x8e
   1070a:	f007 faa0 	bl	17c4e <assert_print>
   1070e:	4947      	ldr	r1, [pc, #284]	; (1082c <sys_clock_announce+0x14c>)
   10710:	484a      	ldr	r0, [pc, #296]	; (1083c <sys_clock_announce+0x15c>)
   10712:	f007 fa9c 	bl	17c4e <assert_print>
   10716:	4846      	ldr	r0, [pc, #280]	; (10830 <sys_clock_announce+0x150>)
   10718:	218e      	movs	r1, #142	; 0x8e
   1071a:	f007 fa91 	bl	17c40 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1071e:	4f48      	ldr	r7, [pc, #288]	; (10840 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
   10720:	4842      	ldr	r0, [pc, #264]	; (1082c <sys_clock_announce+0x14c>)
	return list->head == list;
   10722:	f8df 812c 	ldr.w	r8, [pc, #300]	; 10850 <sys_clock_announce+0x170>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   10726:	4e47      	ldr	r6, [pc, #284]	; (10844 <sys_clock_announce+0x164>)
   10728:	f7fd fe7c 	bl	e424 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   1072c:	603c      	str	r4, [r7, #0]
   1072e:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   10732:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10734:	4544      	cmp	r4, r8
		curr_tick += dt;
   10736:	e9d6 1e00 	ldrd	r1, lr, [r6]
   1073a:	ea4f 70e2 	mov.w	r0, r2, asr #31
   1073e:	d00b      	beq.n	10758 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   10740:	b154      	cbz	r4, 10758 <sys_clock_announce+0x78>
   10742:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   10746:	429a      	cmp	r2, r3
   10748:	eb70 090c 	sbcs.w	r9, r0, ip
   1074c:	da28      	bge.n	107a0 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1074e:	1a9b      	subs	r3, r3, r2
   10750:	eb6c 0c00 	sbc.w	ip, ip, r0
   10754:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
   10758:	1852      	adds	r2, r2, r1
   1075a:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
   1075e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   10760:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   10764:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   10766:	f7ff fdcd 	bl	10304 <next_timeout>
   1076a:	4621      	mov	r1, r4
   1076c:	f7fa fa28 	bl	abc0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10770:	482e      	ldr	r0, [pc, #184]	; (1082c <sys_clock_announce+0x14c>)
   10772:	f7fd fe47 	bl	e404 <z_spin_unlock_valid>
   10776:	b968      	cbnz	r0, 10794 <sys_clock_announce+0xb4>
   10778:	4a2d      	ldr	r2, [pc, #180]	; (10830 <sys_clock_announce+0x150>)
   1077a:	4933      	ldr	r1, [pc, #204]	; (10848 <sys_clock_announce+0x168>)
   1077c:	482e      	ldr	r0, [pc, #184]	; (10838 <sys_clock_announce+0x158>)
   1077e:	23b9      	movs	r3, #185	; 0xb9
   10780:	f007 fa65 	bl	17c4e <assert_print>
   10784:	4929      	ldr	r1, [pc, #164]	; (1082c <sys_clock_announce+0x14c>)
   10786:	4831      	ldr	r0, [pc, #196]	; (1084c <sys_clock_announce+0x16c>)
   10788:	f007 fa61 	bl	17c4e <assert_print>
   1078c:	4828      	ldr	r0, [pc, #160]	; (10830 <sys_clock_announce+0x150>)
   1078e:	21b9      	movs	r1, #185	; 0xb9
   10790:	f007 fa56 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   10794:	f385 8811 	msr	BASEPRI, r5
   10798:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1079c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   107a0:	1859      	adds	r1, r3, r1
   107a2:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   107a6:	1ad3      	subs	r3, r2, r3
   107a8:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   107aa:	2200      	movs	r2, #0
   107ac:	2300      	movs	r3, #0
		curr_tick += dt;
   107ae:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   107b2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   107b6:	4620      	mov	r0, r4
   107b8:	f7ff fdca 	bl	10350 <remove_timeout>
   107bc:	481b      	ldr	r0, [pc, #108]	; (1082c <sys_clock_announce+0x14c>)
   107be:	f7fd fe21 	bl	e404 <z_spin_unlock_valid>
   107c2:	b968      	cbnz	r0, 107e0 <sys_clock_announce+0x100>
   107c4:	4a1a      	ldr	r2, [pc, #104]	; (10830 <sys_clock_announce+0x150>)
   107c6:	4920      	ldr	r1, [pc, #128]	; (10848 <sys_clock_announce+0x168>)
   107c8:	481b      	ldr	r0, [pc, #108]	; (10838 <sys_clock_announce+0x158>)
   107ca:	23b9      	movs	r3, #185	; 0xb9
   107cc:	f007 fa3f 	bl	17c4e <assert_print>
   107d0:	4916      	ldr	r1, [pc, #88]	; (1082c <sys_clock_announce+0x14c>)
   107d2:	481e      	ldr	r0, [pc, #120]	; (1084c <sys_clock_announce+0x16c>)
   107d4:	f007 fa3b 	bl	17c4e <assert_print>
   107d8:	4815      	ldr	r0, [pc, #84]	; (10830 <sys_clock_announce+0x150>)
   107da:	21b9      	movs	r1, #185	; 0xb9
   107dc:	f007 fa30 	bl	17c40 <assert_post_action>
   107e0:	f385 8811 	msr	BASEPRI, r5
   107e4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   107e8:	68a3      	ldr	r3, [r4, #8]
   107ea:	4620      	mov	r0, r4
   107ec:	4798      	blx	r3
	__asm__ volatile(
   107ee:	f04f 0320 	mov.w	r3, #32
   107f2:	f3ef 8511 	mrs	r5, BASEPRI
   107f6:	f383 8812 	msr	BASEPRI_MAX, r3
   107fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   107fe:	480b      	ldr	r0, [pc, #44]	; (1082c <sys_clock_announce+0x14c>)
   10800:	f7fd fdf2 	bl	e3e8 <z_spin_lock_valid>
   10804:	b968      	cbnz	r0, 10822 <sys_clock_announce+0x142>
   10806:	4a0a      	ldr	r2, [pc, #40]	; (10830 <sys_clock_announce+0x150>)
   10808:	490a      	ldr	r1, [pc, #40]	; (10834 <sys_clock_announce+0x154>)
   1080a:	480b      	ldr	r0, [pc, #44]	; (10838 <sys_clock_announce+0x158>)
   1080c:	238e      	movs	r3, #142	; 0x8e
   1080e:	f007 fa1e 	bl	17c4e <assert_print>
   10812:	4906      	ldr	r1, [pc, #24]	; (1082c <sys_clock_announce+0x14c>)
   10814:	4809      	ldr	r0, [pc, #36]	; (1083c <sys_clock_announce+0x15c>)
   10816:	f007 fa1a 	bl	17c4e <assert_print>
   1081a:	4805      	ldr	r0, [pc, #20]	; (10830 <sys_clock_announce+0x150>)
   1081c:	218e      	movs	r1, #142	; 0x8e
   1081e:	f007 fa0f 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   10822:	4802      	ldr	r0, [pc, #8]	; (1082c <sys_clock_announce+0x14c>)
   10824:	f7fd fdfe 	bl	e424 <z_spin_lock_set_owner>
	return k;
   10828:	e781      	b.n	1072e <sys_clock_announce+0x4e>
   1082a:	bf00      	nop
   1082c:	20023a38 	.word	0x20023a38
   10830:	0003bd42 	.word	0x0003bd42
   10834:	0003bd9b 	.word	0x0003bd9b
   10838:	0003baf1 	.word	0x0003baf1
   1083c:	0003bdb0 	.word	0x0003bdb0
   10840:	20023a34 	.word	0x20023a34
   10844:	20000e48 	.word	0x20000e48
   10848:	0003bd6f 	.word	0x0003bd6f
   1084c:	0003bd86 	.word	0x0003bd86
   10850:	20000128 	.word	0x20000128

00010854 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10854:	b570      	push	{r4, r5, r6, lr}
   10856:	f04f 0320 	mov.w	r3, #32
   1085a:	f3ef 8611 	mrs	r6, BASEPRI
   1085e:	f383 8812 	msr	BASEPRI_MAX, r3
   10862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10866:	481b      	ldr	r0, [pc, #108]	; (108d4 <sys_clock_tick_get+0x80>)
   10868:	f7fd fdbe 	bl	e3e8 <z_spin_lock_valid>
   1086c:	b968      	cbnz	r0, 1088a <sys_clock_tick_get+0x36>
   1086e:	4a1a      	ldr	r2, [pc, #104]	; (108d8 <sys_clock_tick_get+0x84>)
   10870:	491a      	ldr	r1, [pc, #104]	; (108dc <sys_clock_tick_get+0x88>)
   10872:	481b      	ldr	r0, [pc, #108]	; (108e0 <sys_clock_tick_get+0x8c>)
   10874:	238e      	movs	r3, #142	; 0x8e
   10876:	f007 f9ea 	bl	17c4e <assert_print>
   1087a:	4916      	ldr	r1, [pc, #88]	; (108d4 <sys_clock_tick_get+0x80>)
   1087c:	4819      	ldr	r0, [pc, #100]	; (108e4 <sys_clock_tick_get+0x90>)
   1087e:	f007 f9e6 	bl	17c4e <assert_print>
   10882:	4815      	ldr	r0, [pc, #84]	; (108d8 <sys_clock_tick_get+0x84>)
   10884:	218e      	movs	r1, #142	; 0x8e
   10886:	f007 f9db 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   1088a:	4812      	ldr	r0, [pc, #72]	; (108d4 <sys_clock_tick_get+0x80>)
   1088c:	f7fd fdca 	bl	e424 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   10890:	f7fa f9c8 	bl	ac24 <sys_clock_elapsed>
   10894:	4b14      	ldr	r3, [pc, #80]	; (108e8 <sys_clock_tick_get+0x94>)
   10896:	e9d3 4500 	ldrd	r4, r5, [r3]
   1089a:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1089c:	480d      	ldr	r0, [pc, #52]	; (108d4 <sys_clock_tick_get+0x80>)
   1089e:	f145 0500 	adc.w	r5, r5, #0
   108a2:	f7fd fdaf 	bl	e404 <z_spin_unlock_valid>
   108a6:	b968      	cbnz	r0, 108c4 <sys_clock_tick_get+0x70>
   108a8:	4a0b      	ldr	r2, [pc, #44]	; (108d8 <sys_clock_tick_get+0x84>)
   108aa:	4910      	ldr	r1, [pc, #64]	; (108ec <sys_clock_tick_get+0x98>)
   108ac:	480c      	ldr	r0, [pc, #48]	; (108e0 <sys_clock_tick_get+0x8c>)
   108ae:	23b9      	movs	r3, #185	; 0xb9
   108b0:	f007 f9cd 	bl	17c4e <assert_print>
   108b4:	4907      	ldr	r1, [pc, #28]	; (108d4 <sys_clock_tick_get+0x80>)
   108b6:	480e      	ldr	r0, [pc, #56]	; (108f0 <sys_clock_tick_get+0x9c>)
   108b8:	f007 f9c9 	bl	17c4e <assert_print>
   108bc:	4806      	ldr	r0, [pc, #24]	; (108d8 <sys_clock_tick_get+0x84>)
   108be:	21b9      	movs	r1, #185	; 0xb9
   108c0:	f007 f9be 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   108c4:	f386 8811 	msr	BASEPRI, r6
   108c8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   108cc:	4620      	mov	r0, r4
   108ce:	4629      	mov	r1, r5
   108d0:	bd70      	pop	{r4, r5, r6, pc}
   108d2:	bf00      	nop
   108d4:	20023a38 	.word	0x20023a38
   108d8:	0003bd42 	.word	0x0003bd42
   108dc:	0003bd9b 	.word	0x0003bd9b
   108e0:	0003baf1 	.word	0x0003baf1
   108e4:	0003bdb0 	.word	0x0003bdb0
   108e8:	20000e48 	.word	0x20000e48
   108ec:	0003bd6f 	.word	0x0003bd6f
   108f0:	0003bd86 	.word	0x0003bd86

000108f4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   108f4:	b570      	push	{r4, r5, r6, lr}
   108f6:	4604      	mov	r4, r0
	__asm__ volatile(
   108f8:	f04f 0320 	mov.w	r3, #32
   108fc:	f3ef 8511 	mrs	r5, BASEPRI
   10900:	f383 8812 	msr	BASEPRI_MAX, r3
   10904:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10908:	484d      	ldr	r0, [pc, #308]	; (10a40 <z_timer_expiration_handler+0x14c>)
   1090a:	f7fd fd6d 	bl	e3e8 <z_spin_lock_valid>
   1090e:	b968      	cbnz	r0, 1092c <z_timer_expiration_handler+0x38>
   10910:	4a4c      	ldr	r2, [pc, #304]	; (10a44 <z_timer_expiration_handler+0x150>)
   10912:	494d      	ldr	r1, [pc, #308]	; (10a48 <z_timer_expiration_handler+0x154>)
   10914:	484d      	ldr	r0, [pc, #308]	; (10a4c <z_timer_expiration_handler+0x158>)
   10916:	238e      	movs	r3, #142	; 0x8e
   10918:	f007 f999 	bl	17c4e <assert_print>
   1091c:	4948      	ldr	r1, [pc, #288]	; (10a40 <z_timer_expiration_handler+0x14c>)
   1091e:	484c      	ldr	r0, [pc, #304]	; (10a50 <z_timer_expiration_handler+0x15c>)
   10920:	f007 f995 	bl	17c4e <assert_print>
   10924:	4847      	ldr	r0, [pc, #284]	; (10a44 <z_timer_expiration_handler+0x150>)
   10926:	218e      	movs	r1, #142	; 0x8e
   10928:	f007 f98a 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   1092c:	4844      	ldr	r0, [pc, #272]	; (10a40 <z_timer_expiration_handler+0x14c>)
   1092e:	f7fd fd79 	bl	e424 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   10932:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   10936:	3301      	adds	r3, #1
   10938:	f142 0200 	adc.w	r2, r2, #0
   1093c:	2b02      	cmp	r3, #2
   1093e:	f172 0300 	sbcs.w	r3, r2, #0
   10942:	d305      	bcc.n	10950 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10944:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   10948:	4942      	ldr	r1, [pc, #264]	; (10a54 <z_timer_expiration_handler+0x160>)
   1094a:	4620      	mov	r0, r4
   1094c:	f7ff fd1a 	bl	10384 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   10950:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10952:	3301      	adds	r3, #1
   10954:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   10956:	6a23      	ldr	r3, [r4, #32]
   10958:	2b00      	cmp	r3, #0
   1095a:	d035      	beq.n	109c8 <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1095c:	4838      	ldr	r0, [pc, #224]	; (10a40 <z_timer_expiration_handler+0x14c>)
   1095e:	f7fd fd51 	bl	e404 <z_spin_unlock_valid>
   10962:	b968      	cbnz	r0, 10980 <z_timer_expiration_handler+0x8c>
   10964:	4a37      	ldr	r2, [pc, #220]	; (10a44 <z_timer_expiration_handler+0x150>)
   10966:	493c      	ldr	r1, [pc, #240]	; (10a58 <z_timer_expiration_handler+0x164>)
   10968:	4838      	ldr	r0, [pc, #224]	; (10a4c <z_timer_expiration_handler+0x158>)
   1096a:	23b9      	movs	r3, #185	; 0xb9
   1096c:	f007 f96f 	bl	17c4e <assert_print>
   10970:	4933      	ldr	r1, [pc, #204]	; (10a40 <z_timer_expiration_handler+0x14c>)
   10972:	483a      	ldr	r0, [pc, #232]	; (10a5c <z_timer_expiration_handler+0x168>)
   10974:	f007 f96b 	bl	17c4e <assert_print>
   10978:	4832      	ldr	r0, [pc, #200]	; (10a44 <z_timer_expiration_handler+0x150>)
   1097a:	21b9      	movs	r1, #185	; 0xb9
   1097c:	f007 f960 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   10980:	f385 8811 	msr	BASEPRI, r5
   10984:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   10988:	6a23      	ldr	r3, [r4, #32]
   1098a:	4620      	mov	r0, r4
   1098c:	4798      	blx	r3
	__asm__ volatile(
   1098e:	f04f 0320 	mov.w	r3, #32
   10992:	f3ef 8511 	mrs	r5, BASEPRI
   10996:	f383 8812 	msr	BASEPRI_MAX, r3
   1099a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1099e:	4828      	ldr	r0, [pc, #160]	; (10a40 <z_timer_expiration_handler+0x14c>)
   109a0:	f7fd fd22 	bl	e3e8 <z_spin_lock_valid>
   109a4:	b968      	cbnz	r0, 109c2 <z_timer_expiration_handler+0xce>
   109a6:	4a27      	ldr	r2, [pc, #156]	; (10a44 <z_timer_expiration_handler+0x150>)
   109a8:	4927      	ldr	r1, [pc, #156]	; (10a48 <z_timer_expiration_handler+0x154>)
   109aa:	4828      	ldr	r0, [pc, #160]	; (10a4c <z_timer_expiration_handler+0x158>)
   109ac:	238e      	movs	r3, #142	; 0x8e
   109ae:	f007 f94e 	bl	17c4e <assert_print>
   109b2:	4923      	ldr	r1, [pc, #140]	; (10a40 <z_timer_expiration_handler+0x14c>)
   109b4:	4826      	ldr	r0, [pc, #152]	; (10a50 <z_timer_expiration_handler+0x15c>)
   109b6:	f007 f94a 	bl	17c4e <assert_print>
   109ba:	4822      	ldr	r0, [pc, #136]	; (10a44 <z_timer_expiration_handler+0x150>)
   109bc:	218e      	movs	r1, #142	; 0x8e
   109be:	f007 f93f 	bl	17c40 <assert_post_action>
	z_spin_lock_set_owner(l);
   109c2:	481f      	ldr	r0, [pc, #124]	; (10a40 <z_timer_expiration_handler+0x14c>)
   109c4:	f7fd fd2e 	bl	e424 <z_spin_lock_set_owner>
	return list->head == list;
   109c8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   109cc:	42a6      	cmp	r6, r4
   109ce:	d000      	beq.n	109d2 <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   109d0:	b9b6      	cbnz	r6, 10a00 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   109d2:	481b      	ldr	r0, [pc, #108]	; (10a40 <z_timer_expiration_handler+0x14c>)
   109d4:	f7fd fd16 	bl	e404 <z_spin_unlock_valid>
   109d8:	b968      	cbnz	r0, 109f6 <z_timer_expiration_handler+0x102>
   109da:	4a1a      	ldr	r2, [pc, #104]	; (10a44 <z_timer_expiration_handler+0x150>)
   109dc:	491e      	ldr	r1, [pc, #120]	; (10a58 <z_timer_expiration_handler+0x164>)
   109de:	481b      	ldr	r0, [pc, #108]	; (10a4c <z_timer_expiration_handler+0x158>)
   109e0:	23b9      	movs	r3, #185	; 0xb9
   109e2:	f007 f934 	bl	17c4e <assert_print>
   109e6:	4916      	ldr	r1, [pc, #88]	; (10a40 <z_timer_expiration_handler+0x14c>)
   109e8:	481c      	ldr	r0, [pc, #112]	; (10a5c <z_timer_expiration_handler+0x168>)
   109ea:	f007 f930 	bl	17c4e <assert_print>
   109ee:	4815      	ldr	r0, [pc, #84]	; (10a44 <z_timer_expiration_handler+0x150>)
   109f0:	21b9      	movs	r1, #185	; 0xb9
   109f2:	f007 f925 	bl	17c40 <assert_post_action>
	__asm__ volatile(
   109f6:	f385 8811 	msr	BASEPRI, r5
   109fa:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   109fe:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   10a00:	4630      	mov	r0, r6
   10a02:	f7fe fb19 	bl	f038 <z_unpend_thread_no_timeout>
   10a06:	2300      	movs	r3, #0
   10a08:	480d      	ldr	r0, [pc, #52]	; (10a40 <z_timer_expiration_handler+0x14c>)
   10a0a:	67b3      	str	r3, [r6, #120]	; 0x78
   10a0c:	f7fd fcfa 	bl	e404 <z_spin_unlock_valid>
   10a10:	b968      	cbnz	r0, 10a2e <z_timer_expiration_handler+0x13a>
   10a12:	4a0c      	ldr	r2, [pc, #48]	; (10a44 <z_timer_expiration_handler+0x150>)
   10a14:	4910      	ldr	r1, [pc, #64]	; (10a58 <z_timer_expiration_handler+0x164>)
   10a16:	480d      	ldr	r0, [pc, #52]	; (10a4c <z_timer_expiration_handler+0x158>)
   10a18:	23b9      	movs	r3, #185	; 0xb9
   10a1a:	f007 f918 	bl	17c4e <assert_print>
   10a1e:	4908      	ldr	r1, [pc, #32]	; (10a40 <z_timer_expiration_handler+0x14c>)
   10a20:	480e      	ldr	r0, [pc, #56]	; (10a5c <z_timer_expiration_handler+0x168>)
   10a22:	f007 f914 	bl	17c4e <assert_print>
   10a26:	4807      	ldr	r0, [pc, #28]	; (10a44 <z_timer_expiration_handler+0x150>)
   10a28:	21b9      	movs	r1, #185	; 0xb9
   10a2a:	f007 f909 	bl	17c40 <assert_post_action>
   10a2e:	f385 8811 	msr	BASEPRI, r5
   10a32:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   10a36:	4630      	mov	r0, r6
}
   10a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   10a3c:	f7fe bd90 	b.w	f560 <z_ready_thread>
   10a40:	20023a3c 	.word	0x20023a3c
   10a44:	0003bd42 	.word	0x0003bd42
   10a48:	0003bd9b 	.word	0x0003bd9b
   10a4c:	0003baf1 	.word	0x0003baf1
   10a50:	0003bdb0 	.word	0x0003bdb0
   10a54:	000108f5 	.word	0x000108f5
   10a58:	0003bd6f 	.word	0x0003bd6f
   10a5c:	0003bd86 	.word	0x0003bd86

00010a60 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   10a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10a68:	bf08      	it	eq
   10a6a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   10a6e:	4605      	mov	r5, r0
   10a70:	4690      	mov	r8, r2
   10a72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   10a76:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10a78:	d040      	beq.n	10afc <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   10a7a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   10a7e:	bf08      	it	eq
   10a80:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   10a84:	4604      	mov	r4, r0
   10a86:	460e      	mov	r6, r1
   10a88:	d016      	beq.n	10ab8 <z_impl_k_timer_start+0x58>
   10a8a:	ea51 0c00 	orrs.w	ip, r1, r0
   10a8e:	d013      	beq.n	10ab8 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   10a90:	f06f 0c01 	mvn.w	ip, #1
   10a94:	ebbc 0c00 	subs.w	ip, ip, r0
   10a98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   10a9c:	eb6c 0c01 	sbc.w	ip, ip, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   10aa0:	f1bc 0f00 	cmp.w	ip, #0
   10aa4:	da08      	bge.n	10ab8 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   10aa6:	2802      	cmp	r0, #2
   10aa8:	f171 0100 	sbcs.w	r1, r1, #0
   10aac:	bfbc      	itt	lt
   10aae:	2402      	movlt	r4, #2
   10ab0:	2600      	movlt	r6, #0
   10ab2:	3c01      	subs	r4, #1
   10ab4:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   10ab8:	f06f 0101 	mvn.w	r1, #1
   10abc:	1a89      	subs	r1, r1, r2
   10abe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10ac2:	eb61 0103 	sbc.w	r1, r1, r3
   10ac6:	2900      	cmp	r1, #0
   10ac8:	da09      	bge.n	10ade <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   10aca:	2a01      	cmp	r2, #1
   10acc:	f173 0100 	sbcs.w	r1, r3, #0
   10ad0:	bfbc      	itt	lt
   10ad2:	2201      	movlt	r2, #1
   10ad4:	2300      	movlt	r3, #0
   10ad6:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
   10ada:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   10ade:	4628      	mov	r0, r5
   10ae0:	f7ff fd18 	bl	10514 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   10ae4:	2300      	movs	r3, #0
   10ae6:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   10ae8:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10aec:	4642      	mov	r2, r8
   10aee:	463b      	mov	r3, r7
   10af0:	4628      	mov	r0, r5
   10af2:	4903      	ldr	r1, [pc, #12]	; (10b00 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   10af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10af8:	f7ff bc44 	b.w	10384 <z_add_timeout>
}
   10afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b00:	000108f5 	.word	0x000108f5

00010b04 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   10b04:	4b01      	ldr	r3, [pc, #4]	; (10b0c <k_thread_system_pool_assign+0x8>)
   10b06:	6703      	str	r3, [r0, #112]	; 0x70
}
   10b08:	4770      	bx	lr
   10b0a:	bf00      	nop
   10b0c:	200005c8 	.word	0x200005c8

00010b10 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   10b10:	4a02      	ldr	r2, [pc, #8]	; (10b1c <boot_banner+0xc>)
   10b12:	4903      	ldr	r1, [pc, #12]	; (10b20 <boot_banner+0x10>)
   10b14:	4803      	ldr	r0, [pc, #12]	; (10b24 <boot_banner+0x14>)
   10b16:	f006 bfa7 	b.w	17a68 <printk>
   10b1a:	bf00      	nop
   10b1c:	0003d162 	.word	0x0003d162
   10b20:	0003df95 	.word	0x0003df95
   10b24:	0003dfb2 	.word	0x0003dfb2

00010b28 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   10b28:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10b2a:	4c0e      	ldr	r4, [pc, #56]	; (10b64 <statics_init+0x3c>)
   10b2c:	4d0e      	ldr	r5, [pc, #56]	; (10b68 <statics_init+0x40>)
   10b2e:	4e0f      	ldr	r6, [pc, #60]	; (10b6c <statics_init+0x44>)
   10b30:	42ac      	cmp	r4, r5
   10b32:	d90c      	bls.n	10b4e <statics_init+0x26>
   10b34:	490e      	ldr	r1, [pc, #56]	; (10b70 <statics_init+0x48>)
   10b36:	480f      	ldr	r0, [pc, #60]	; (10b74 <statics_init+0x4c>)
   10b38:	2318      	movs	r3, #24
   10b3a:	4632      	mov	r2, r6
   10b3c:	f007 f887 	bl	17c4e <assert_print>
   10b40:	480d      	ldr	r0, [pc, #52]	; (10b78 <statics_init+0x50>)
   10b42:	f007 f884 	bl	17c4e <assert_print>
   10b46:	2118      	movs	r1, #24
   10b48:	4630      	mov	r0, r6
   10b4a:	f007 f879 	bl	17c40 <assert_post_action>
   10b4e:	42ac      	cmp	r4, r5
   10b50:	d301      	bcc.n	10b56 <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   10b52:	2000      	movs	r0, #0
   10b54:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   10b56:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   10b5a:	4620      	mov	r0, r4
   10b5c:	f007 ffbf 	bl	18ade <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10b60:	3418      	adds	r4, #24
   10b62:	e7e5      	b.n	10b30 <statics_init+0x8>
   10b64:	200005c8 	.word	0x200005c8
   10b68:	200005e0 	.word	0x200005e0
   10b6c:	0003dfd9 	.word	0x0003dfd9
   10b70:	0003dffb 	.word	0x0003dffb
   10b74:	0003baf1 	.word	0x0003baf1
   10b78:	0003da98 	.word	0x0003da98

00010b7c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   10b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   10b7e:	4b09      	ldr	r3, [pc, #36]	; (10ba4 <k_sys_work_q_init+0x28>)
   10b80:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   10b82:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   10b84:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   10b86:	9300      	str	r3, [sp, #0]
   10b88:	4907      	ldr	r1, [pc, #28]	; (10ba8 <k_sys_work_q_init+0x2c>)
   10b8a:	4808      	ldr	r0, [pc, #32]	; (10bac <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   10b8c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   10b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10b98:	f7fe f962 	bl	ee60 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   10b9c:	4620      	mov	r0, r4
   10b9e:	b004      	add	sp, #16
   10ba0:	bd10      	pop	{r4, pc}
   10ba2:	bf00      	nop
   10ba4:	0003e011 	.word	0x0003e011
   10ba8:	20027480 	.word	0x20027480
   10bac:	20000e50 	.word	0x20000e50

00010bb0 <kiss_fftr>:
{
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
   10bb0:	6803      	ldr	r3, [r0, #0]
   10bb2:	685b      	ldr	r3, [r3, #4]
{
   10bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bb6:	4606      	mov	r6, r0
   10bb8:	4614      	mov	r4, r2
    if ( st->substate->inverse) {
   10bba:	b123      	cbz	r3, 10bc6 <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
   10bbc:	4833      	ldr	r0, [pc, #204]	; (10c8c <kiss_fftr+0xdc>)
   10bbe:	9101      	str	r1, [sp, #4]
   10bc0:	f000 f866 	bl	10c90 <_Z9ei_printfPKcz>
   10bc4:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
   10bc6:	6830      	ldr	r0, [r6, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
   10bc8:	6872      	ldr	r2, [r6, #4]
    ncfft = st->substate->nfft;
   10bca:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
   10bcc:	f008 f8fb 	bl	18dc6 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
   10bd0:	6873      	ldr	r3, [r6, #4]
   10bd2:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
   10bd6:	ed93 7a01 	vldr	s14, [r3, #4]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
   10bda:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
   10bde:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
   10be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
   10be6:	2100      	movs	r1, #0
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
   10be8:	eb05 7cd5 	add.w	ip, r5, r5, lsr #31
    freqdata[0].r = tdc.r + tdc.i;
   10bec:	edc4 6a00 	vstr	s13, [r4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
   10bf0:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    freqdata[ncfft].r = tdc.r - tdc.i;
   10bf4:	edc2 7a00 	vstr	s15, [r2]
    freqdata[ncfft].i = freqdata[0].i = 0;
   10bf8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   10bfc:	6061      	str	r1, [r4, #4]

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   10bfe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    freqdata[ncfft].i = freqdata[0].i = 0;
   10c02:	6051      	str	r1, [r2, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
   10c04:	2101      	movs	r1, #1
   10c06:	458c      	cmp	ip, r1
   10c08:	db3e      	blt.n	10c88 <kiss_fftr+0xd8>
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   10c0a:	00c8      	lsls	r0, r1, #3
   10c0c:	f1a0 0708 	sub.w	r7, r0, #8
   10c10:	68b0      	ldr	r0, [r6, #8]
        fpk    = st->tmpbuf[k];
   10c12:	edd3 5a03 	vldr	s11, [r3, #12]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
   10c16:	ed55 4a02 	vldr	s9, [r5, #-8]
        fpk    = st->tmpbuf[k];
   10c1a:	edd3 6a02 	vldr	s13, [r3, #8]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
   10c1e:	ed55 7a01 	vldr	s15, [r5, #-4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   10c22:	4438      	add	r0, r7
        C_ADD( f1k, fpk , fpnk );
   10c24:	ee34 7aa6 	vadd.f32	s14, s9, s13
   10c28:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
   10c2c:	ee76 6ae4 	vsub.f32	s13, s13, s9
   10c30:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   10c34:	edd0 4a01 	vldr	s9, [r0, #4]
   10c38:	ed90 4a00 	vldr	s8, [r0]
   10c3c:	ee64 5ae7 	vnmul.f32	s11, s9, s15
   10c40:	ee67 7a84 	vmul.f32	s15, s15, s8
   10c44:	eee6 5a84 	vfma.f32	s11, s13, s8
    for ( k=1;k <= ncfft/2 ; ++k ) {
   10c48:	3101      	adds	r1, #1
   10c4a:	3308      	adds	r3, #8
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   10c4c:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   10c50:	3d08      	subs	r5, #8
   10c52:	3408      	adds	r4, #8
   10c54:	ee77 6a25 	vadd.f32	s13, s14, s11
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   10c58:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   10c5c:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   10c60:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   10c64:	edc4 6a00 	vstr	s13, [r4]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   10c68:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   10c6c:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   10c70:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   10c74:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   10c78:	edc4 6a01 	vstr	s13, [r4, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   10c7c:	3a08      	subs	r2, #8
   10c7e:	ed82 7a00 	vstr	s14, [r2]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   10c82:	edc2 7a01 	vstr	s15, [r2, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
   10c86:	e7be      	b.n	10c06 <kiss_fftr+0x56>
    }
}
   10c88:	b003      	add	sp, #12
   10c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c8c:	0003e033 	.word	0x0003e033

00010c90 <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
   10c90:	b40f      	push	{r0, r1, r2, r3}
   10c92:	b507      	push	{r0, r1, r2, lr}
   10c94:	ab04      	add	r3, sp, #16
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
   10c96:	4809      	ldr	r0, [pc, #36]	; (10cbc <_Z9ei_printfPKcz+0x2c>)
__attribute__((weak)) void ei_printf(const char *format, ...) {
   10c98:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
   10c9c:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
   10c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10ca2:	f005 fd8d 	bl	167c0 <vsniprintf>
    va_end(args);

    if (r > 0) {
   10ca6:	2800      	cmp	r0, #0
   10ca8:	dd03      	ble.n	10cb2 <_Z9ei_printfPKcz+0x22>
        printf("%s", print_buf);
   10caa:	4904      	ldr	r1, [pc, #16]	; (10cbc <_Z9ei_printfPKcz+0x2c>)
   10cac:	4804      	ldr	r0, [pc, #16]	; (10cc0 <_Z9ei_printfPKcz+0x30>)
   10cae:	f005 fd45 	bl	1673c <iprintf>
    }
}
   10cb2:	b003      	add	sp, #12
   10cb4:	f85d eb04 	ldr.w	lr, [sp], #4
   10cb8:	b004      	add	sp, #16
   10cba:	4770      	bx	lr
   10cbc:	200249ed 	.word	0x200249ed
   10cc0:	0003c121 	.word	0x0003c121

00010cc4 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
   10cc4:	b510      	push	{r4, lr}
   10cc6:	ee10 0a10 	vmov	r0, s0
    printf("%f", f);
   10cca:	f7ef fbcd 	bl	468 <__aeabi_f2d>
}
   10cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("%f", f);
   10cd2:	4602      	mov	r2, r0
   10cd4:	460b      	mov	r3, r1
   10cd6:	4801      	ldr	r0, [pc, #4]	; (10cdc <_Z15ei_printf_floatf+0x18>)
   10cd8:	f005 bd30 	b.w	1673c <iprintf>
   10cdc:	0003ba41 	.word	0x0003ba41

00010ce0 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
   10ce0:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10ce2:	4604      	mov	r4, r0
   10ce4:	b140      	cbz	r0, 10cf8 <arm_rfft_32_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),16);
   10ce6:	2110      	movs	r1, #16
   10ce8:	f003 f972 	bl	13fd0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
   10cec:	b918      	cbnz	r0, 10cf6 <arm_rfft_32_fast_init_f32+0x16>
  {
    return(status);
  }

  S->fftLenRFFT = 32U;
   10cee:	2320      	movs	r3, #32
   10cf0:	8223      	strh	r3, [r4, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
   10cf2:	4b03      	ldr	r3, [pc, #12]	; (10d00 <arm_rfft_32_fast_init_f32+0x20>)
   10cf4:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
   10cf6:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10cfc:	e7fb      	b.n	10cf6 <arm_rfft_32_fast_init_f32+0x16>
   10cfe:	bf00      	nop
   10d00:	00031084 	.word	0x00031084

00010d04 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
   10d04:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d06:	4604      	mov	r4, r0
   10d08:	b140      	cbz	r0, 10d1c <arm_rfft_64_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),32);
   10d0a:	2120      	movs	r1, #32
   10d0c:	f003 f960 	bl	13fd0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
   10d10:	b918      	cbnz	r0, 10d1a <arm_rfft_64_fast_init_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 64U;
   10d12:	2340      	movs	r3, #64	; 0x40
   10d14:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
   10d16:	4b03      	ldr	r3, [pc, #12]	; (10d24 <arm_rfft_64_fast_init_f32+0x20>)
   10d18:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
   10d1a:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d20:	e7fb      	b.n	10d1a <arm_rfft_64_fast_init_f32+0x16>
   10d22:	bf00      	nop
   10d24:	00035904 	.word	0x00035904

00010d28 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
   10d28:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d2a:	4604      	mov	r4, r0
   10d2c:	b140      	cbz	r0, 10d40 <arm_rfft_128_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),64);
   10d2e:	2140      	movs	r1, #64	; 0x40
   10d30:	f003 f94e 	bl	13fd0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
   10d34:	b918      	cbnz	r0, 10d3e <arm_rfft_128_fast_init_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 128;
   10d36:	2380      	movs	r3, #128	; 0x80
   10d38:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
   10d3a:	4b03      	ldr	r3, [pc, #12]	; (10d48 <arm_rfft_128_fast_init_f32+0x20>)
   10d3c:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
   10d3e:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d44:	e7fb      	b.n	10d3e <arm_rfft_128_fast_init_f32+0x16>
   10d46:	bf00      	nop
   10d48:	0002ea84 	.word	0x0002ea84

00010d4c <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
   10d4c:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d4e:	4604      	mov	r4, r0
   10d50:	b148      	cbz	r0, 10d66 <arm_rfft_256_fast_init_f32+0x1a>

  status=arm_cfft_init_f32(&(S->Sint),128);
   10d52:	2180      	movs	r1, #128	; 0x80
   10d54:	f003 f93c 	bl	13fd0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
   10d58:	b920      	cbnz	r0, 10d64 <arm_rfft_256_fast_init_f32+0x18>
  {
    return(status);
  }
  S->fftLenRFFT = 256U;
   10d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
   10d5e:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
   10d60:	4b02      	ldr	r3, [pc, #8]	; (10d6c <arm_rfft_256_fast_init_f32+0x20>)
   10d62:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
   10d64:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d6a:	e7fb      	b.n	10d64 <arm_rfft_256_fast_init_f32+0x18>
   10d6c:	00030c84 	.word	0x00030c84

00010d70 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
   10d70:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d72:	4604      	mov	r4, r0
   10d74:	b150      	cbz	r0, 10d8c <arm_rfft_512_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),256);
   10d76:	f44f 7180 	mov.w	r1, #256	; 0x100
   10d7a:	f003 f929 	bl	13fd0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
   10d7e:	b920      	cbnz	r0, 10d8a <arm_rfft_512_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 512U;
   10d80:	f44f 7300 	mov.w	r3, #512	; 0x200
   10d84:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
   10d86:	4b03      	ldr	r3, [pc, #12]	; (10d94 <arm_rfft_512_fast_init_f32+0x24>)
   10d88:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
   10d8a:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d90:	e7fb      	b.n	10d8a <arm_rfft_512_fast_init_f32+0x1a>
   10d92:	bf00      	nop
   10d94:	00035104 	.word	0x00035104

00010d98 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
   10d98:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10d9a:	4604      	mov	r4, r0
   10d9c:	b150      	cbz	r0, 10db4 <arm_rfft_1024_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),512);
   10d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
   10da2:	f003 f915 	bl	13fd0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
   10da6:	b920      	cbnz	r0, 10db2 <arm_rfft_1024_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 1024U;
   10da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10dac:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
   10dae:	4b03      	ldr	r3, [pc, #12]	; (10dbc <arm_rfft_1024_fast_init_f32+0x24>)
   10db0:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
   10db2:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10db8:	e7fb      	b.n	10db2 <arm_rfft_1024_fast_init_f32+0x1a>
   10dba:	bf00      	nop
   10dbc:	0002da84 	.word	0x0002da84

00010dc0 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
   10dc0:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10dc2:	4604      	mov	r4, r0
   10dc4:	b150      	cbz	r0, 10ddc <arm_rfft_2048_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),1024);
   10dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10dca:	f003 f901 	bl	13fd0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
   10dce:	b920      	cbnz	r0, 10dda <arm_rfft_2048_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 2048U;
   10dd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   10dd4:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
   10dd6:	4b03      	ldr	r3, [pc, #12]	; (10de4 <arm_rfft_2048_fast_init_f32+0x24>)
   10dd8:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
   10dda:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10de0:	e7fb      	b.n	10dda <arm_rfft_2048_fast_init_f32+0x1a>
   10de2:	bf00      	nop
   10de4:	0002ec84 	.word	0x0002ec84

00010de8 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
   10de8:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10dea:	4604      	mov	r4, r0
   10dec:	b150      	cbz	r0, 10e04 <arm_rfft_4096_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),2048);
   10dee:	f44f 6100 	mov.w	r1, #2048	; 0x800
   10df2:	f003 f8ed 	bl	13fd0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
   10df6:	b920      	cbnz	r0, 10e02 <arm_rfft_4096_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 4096U;
   10df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10dfc:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
   10dfe:	4b03      	ldr	r3, [pc, #12]	; (10e0c <arm_rfft_4096_fast_init_f32+0x24>)
   10e00:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
   10e02:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
   10e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e08:	e7fb      	b.n	10e02 <arm_rfft_4096_fast_init_f32+0x1a>
   10e0a:	bf00      	nop
   10e0c:	00031104 	.word	0x00031104

00010e10 <arm_rfft_fast_init_f32>:
  uint16_t fftLen)
{
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;

  switch (fftLen)
   10e10:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   10e14:	d01a      	beq.n	10e4c <arm_rfft_fast_init_f32+0x3c>
   10e16:	d80e      	bhi.n	10e36 <arm_rfft_fast_init_f32+0x26>
   10e18:	2980      	cmp	r1, #128	; 0x80
   10e1a:	d019      	beq.n	10e50 <arm_rfft_fast_init_f32+0x40>
   10e1c:	d806      	bhi.n	10e2c <arm_rfft_fast_init_f32+0x1c>
   10e1e:	2920      	cmp	r1, #32
   10e20:	d018      	beq.n	10e54 <arm_rfft_fast_init_f32+0x44>
   10e22:	2940      	cmp	r1, #64	; 0x40
   10e24:	d018      	beq.n	10e58 <arm_rfft_fast_init_f32+0x48>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
  return fptr( S );

}
   10e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e2a:	4770      	bx	lr
  switch (fftLen)
   10e2c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   10e30:	d1f9      	bne.n	10e26 <arm_rfft_fast_init_f32+0x16>
    fptr = arm_rfft_256_fast_init_f32;
   10e32:	4b0c      	ldr	r3, [pc, #48]	; (10e64 <arm_rfft_fast_init_f32+0x54>)
   10e34:	e009      	b.n	10e4a <arm_rfft_fast_init_f32+0x3a>
  switch (fftLen)
   10e36:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   10e3a:	d00f      	beq.n	10e5c <arm_rfft_fast_init_f32+0x4c>
   10e3c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   10e40:	d00e      	beq.n	10e60 <arm_rfft_fast_init_f32+0x50>
   10e42:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   10e46:	d1ee      	bne.n	10e26 <arm_rfft_fast_init_f32+0x16>
    fptr = arm_rfft_1024_fast_init_f32;
   10e48:	4b07      	ldr	r3, [pc, #28]	; (10e68 <arm_rfft_fast_init_f32+0x58>)
  return fptr( S );
   10e4a:	4718      	bx	r3
    fptr = arm_rfft_512_fast_init_f32;
   10e4c:	4b07      	ldr	r3, [pc, #28]	; (10e6c <arm_rfft_fast_init_f32+0x5c>)
   10e4e:	e7fc      	b.n	10e4a <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_128_fast_init_f32;
   10e50:	4b07      	ldr	r3, [pc, #28]	; (10e70 <arm_rfft_fast_init_f32+0x60>)
   10e52:	e7fa      	b.n	10e4a <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_32_fast_init_f32;
   10e54:	4b07      	ldr	r3, [pc, #28]	; (10e74 <arm_rfft_fast_init_f32+0x64>)
   10e56:	e7f8      	b.n	10e4a <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_64_fast_init_f32;
   10e58:	4b07      	ldr	r3, [pc, #28]	; (10e78 <arm_rfft_fast_init_f32+0x68>)
   10e5a:	e7f6      	b.n	10e4a <arm_rfft_fast_init_f32+0x3a>
  switch (fftLen)
   10e5c:	4b07      	ldr	r3, [pc, #28]	; (10e7c <arm_rfft_fast_init_f32+0x6c>)
   10e5e:	e7f4      	b.n	10e4a <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_4096_fast_init_f32;
   10e60:	4b07      	ldr	r3, [pc, #28]	; (10e80 <arm_rfft_fast_init_f32+0x70>)
   10e62:	e7f2      	b.n	10e4a <arm_rfft_fast_init_f32+0x3a>
   10e64:	00010d4d 	.word	0x00010d4d
   10e68:	00010d99 	.word	0x00010d99
   10e6c:	00010d71 	.word	0x00010d71
   10e70:	00010d29 	.word	0x00010d29
   10e74:	00010ce1 	.word	0x00010ce1
   10e78:	00010d05 	.word	0x00010d05
   10e7c:	00010dc1 	.word	0x00010dc1
   10e80:	00010de9 	.word	0x00010de9

00010e84 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
   10e84:	b513      	push	{r0, r1, r4, lr}
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
   10e86:	ed9f 7a11 	vldr	s14, [pc, #68]	; 10ecc <arm_rms_f32+0x48>
{
   10e8a:	9101      	str	r1, [sp, #4]
   10e8c:	4614      	mov	r4, r2
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
   10e8e:	460b      	mov	r3, r1
   10e90:	eef0 6a47 	vmov.f32	s13, s14

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   10e94:	b983      	cbnz	r3, 10eb8 <arm_rms_f32+0x34>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
   10e96:	eddd 7a01 	vldr	s15, [sp, #4]
   10e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   10e9e:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if (in >= 0.0f)
   10ea2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   10ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10eaa:	db0b      	blt.n	10ec4 <arm_rms_f32+0x40>
      *pOut = sqrtf(in);
   10eac:	f004 fc94 	bl	157d8 <sqrtf>
   10eb0:	ed84 0a00 	vstr	s0, [r4]
}
   10eb4:	b002      	add	sp, #8
   10eb6:	bd10      	pop	{r4, pc}
    in = *pSrc++;
   10eb8:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
   10ebc:	3b01      	subs	r3, #1
    sum += ( in * in);
   10ebe:	ee07 7aa7 	vmla.f32	s14, s15, s15
    blkCnt--;
   10ec2:	e7e7      	b.n	10e94 <arm_rms_f32+0x10>
      *pOut = 0.0f;
   10ec4:	edc4 6a00 	vstr	s13, [r4]
}
   10ec8:	e7f4      	b.n	10eb4 <arm_rms_f32+0x30>
   10eca:	bf00      	nop
   10ecc:	00000000 	.word	0x00000000

00010ed0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:
   10ed0:	4a05      	ldr	r2, [pc, #20]	; (10ee8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
   10ed2:	e9d2 3200 	ldrd	r3, r2, [r2]
   10ed6:	1ad2      	subs	r2, r2, r3

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
   10ed8:	ebb1 0fe2 	cmp.w	r1, r2, asr #3
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
   10edc:	bfba      	itte	lt
   10ede:	eb03 03c1 	addlt.w	r3, r3, r1, lsl #3
   10ee2:	6858      	ldrlt	r0, [r3, #4]
    return NULL;
   10ee4:	2000      	movge	r0, #0
}
   10ee6:	4770      	bx	lr
   10ee8:	2002439c 	.word	0x2002439c

00010eec <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}
   10eec:	4801      	ldr	r0, [pc, #4]	; (10ef4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x8>)
   10eee:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   10ef2:	4770      	bx	lr
   10ef4:	20023a40 	.word	0x20023a40

00010ef8 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}
   10ef8:	4b02      	ldr	r3, [pc, #8]	; (10f04 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xc>)
   10efa:	200c      	movs	r0, #12
   10efc:	fb00 3001 	mla	r0, r0, r1, r3
   10f00:	4770      	bx	lr
   10f02:	bf00      	nop
   10f04:	200240a4 	.word	0x200240a4

00010f08 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
   10f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f0c:	4603      	mov	r3, r0
   10f0e:	b089      	sub	sp, #36	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
   10f10:	f641 4170 	movw	r1, #7280	; 0x1c70
   10f14:	2010      	movs	r0, #16
   10f16:	4798      	blx	r3
   10f18:	4b70      	ldr	r3, [pc, #448]	; (110dc <_Z18trained_model_initPFPvjjE+0x1d4>)
   10f1a:	4604      	mov	r4, r0
   10f1c:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
   10f1e:	b930      	cbnz	r0, 10f2e <_Z18trained_model_initPFPvjjE+0x26>
    printf("ERR: failed to allocate tensor arena\n");
   10f20:	486f      	ldr	r0, [pc, #444]	; (110e0 <_Z18trained_model_initPFPvjjE+0x1d8>)
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
   10f22:	f005 fc0b 	bl	1673c <iprintf>
    return kTfLiteError;
   10f26:	2001      	movs	r0, #1
        return status;
      }
    }
  }
  return kTfLiteOk;
}
   10f28:	b009      	add	sp, #36	; 0x24
   10f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  current_location = tensor_arena + kTensorArenaSize;
   10f2e:	4b6d      	ldr	r3, [pc, #436]	; (110e4 <_Z18trained_model_initPFPvjjE+0x1dc>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
   10f30:	4a6d      	ldr	r2, [pc, #436]	; (110e8 <_Z18trained_model_initPFPvjjE+0x1e0>)
  tensor_boundary = tensor_arena;
   10f32:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 11114 <_Z18trained_model_initPFPvjjE+0x20c>
   10f36:	4d6d      	ldr	r5, [pc, #436]	; (110ec <_Z18trained_model_initPFPvjjE+0x1e4>)
   10f38:	f8cc 0000 	str.w	r0, [ip]
  current_location = tensor_arena + kTensorArenaSize;
   10f3c:	f500 56e3 	add.w	r6, r0, #7264	; 0x1c60
   10f40:	3610      	adds	r6, #16
   10f42:	601e      	str	r6, [r3, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
   10f44:	4b6a      	ldr	r3, [pc, #424]	; (110f0 <_Z18trained_model_initPFPvjjE+0x1e8>)
   10f46:	6393      	str	r3, [r2, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
   10f48:	4b6a      	ldr	r3, [pc, #424]	; (110f4 <_Z18trained_model_initPFPvjjE+0x1ec>)
   10f4a:	6413      	str	r3, [r2, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
   10f4c:	4b6a      	ldr	r3, [pc, #424]	; (110f8 <_Z18trained_model_initPFPvjjE+0x1f0>)
   10f4e:	6453      	str	r3, [r2, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
   10f50:	4b6a      	ldr	r3, [pc, #424]	; (110fc <_Z18trained_model_initPFPvjjE+0x1f4>)
   10f52:	6513      	str	r3, [r2, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
   10f54:	4b6a      	ldr	r3, [pc, #424]	; (11100 <_Z18trained_model_initPFPvjjE+0x1f8>)
   10f56:	6553      	str	r3, [r2, #84]	; 0x54
  ctx.tensors_size = 23;
   10f58:	2717      	movs	r7, #23
  ctx.tensors = tflTensors;
   10f5a:	4b6a      	ldr	r3, [pc, #424]	; (11104 <_Z18trained_model_initPFPvjjE+0x1fc>)
   10f5c:	6093      	str	r3, [r2, #8]
  ctx.tensors_size = 23;
   10f5e:	6017      	str	r7, [r2, #0]
  for(size_t i = 0; i < 23; ++i) {
   10f60:	4a69      	ldr	r2, [pc, #420]	; (11108 <_Z18trained_model_initPFPvjjE+0x200>)
    tflTensors[i].is_variable = 0;
   10f62:	f04f 0e00 	mov.w	lr, #0
    tflTensors[i].type = tensorData[i].type;
   10f66:	7851      	ldrb	r1, [r2, #1]
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
   10f68:	f892 9000 	ldrb.w	r9, [r2]
    tflTensors[i].type = tensorData[i].type;
   10f6c:	7019      	strb	r1, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
   10f6e:	7229      	strb	r1, [r5, #8]
    tflTensors[i].dims = tensorData[i].dims;
   10f70:	6891      	ldr	r1, [r2, #8]
   10f72:	6099      	str	r1, [r3, #8]
    tflEvalTensors[i].dims = tensorData[i].dims;
   10f74:	6069      	str	r1, [r5, #4]
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   10f76:	6851      	ldr	r1, [r2, #4]
    tflTensors[i].bytes = tensorData[i].bytes;
   10f78:	f8d2 800c 	ldr.w	r8, [r2, #12]
    tflTensors[i].is_variable = 0;
   10f7c:	f883 e02d 	strb.w	lr, [r3, #45]	; 0x2d
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
   10f80:	f1b9 0f02 	cmp.w	r9, #2
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   10f84:	bf08      	it	eq
   10f86:	1909      	addeq	r1, r1, r4
       tflTensors[i].data.data = tensorData[i].data;
   10f88:	6059      	str	r1, [r3, #4]
       tflEvalTensors[i].data.data = tensorData[i].data;
   10f8a:	6029      	str	r1, [r5, #0]
    tflTensors[i].quantization = tensorData[i].quantization;
   10f8c:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   10f90:	f103 0a30 	add.w	sl, r3, #48	; 0x30
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
   10f94:	f883 9014 	strb.w	r9, [r3, #20]
    tflTensors[i].bytes = tensorData[i].bytes;
   10f98:	f8c3 8018 	str.w	r8, [r3, #24]
    tflTensors[i].quantization = tensorData[i].quantization;
   10f9c:	e88a 0003 	stmia.w	sl, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
   10fa0:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
   10fa4:	2901      	cmp	r1, #1
   10fa6:	d106      	bne.n	10fb6 <_Z18trained_model_initPFPvjjE+0xae>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
   10fa8:	6951      	ldr	r1, [r2, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
   10faa:	6808      	ldr	r0, [r1, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
   10fac:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
   10fae:	6840      	ldr	r0, [r0, #4]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
   10fb0:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
   10fb2:	60d8      	str	r0, [r3, #12]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
   10fb4:	6119      	str	r1, [r3, #16]
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
   10fb6:	f1b9 0f02 	cmp.w	r9, #2
   10fba:	d107      	bne.n	10fcc <_Z18trained_model_initPFPvjjE+0xc4>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
   10fbc:	6859      	ldr	r1, [r3, #4]
      if (data_end_ptr > tensor_boundary) {
   10fbe:	f8dc 0000 	ldr.w	r0, [ip]
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
   10fc2:	4441      	add	r1, r8
      if (data_end_ptr > tensor_boundary) {
   10fc4:	4281      	cmp	r1, r0
        tensor_boundary = data_end_ptr;
   10fc6:	bf88      	it	hi
   10fc8:	f8cc 1000 	strhi.w	r1, [ip]
  for(size_t i = 0; i < 23; ++i) {
   10fcc:	3f01      	subs	r7, #1
   10fce:	f102 0218 	add.w	r2, r2, #24
   10fd2:	f103 0340 	add.w	r3, r3, #64	; 0x40
   10fd6:	f105 050c 	add.w	r5, r5, #12
   10fda:	d1c4      	bne.n	10f66 <_Z18trained_model_initPFPvjjE+0x5e>
  if (tensor_boundary > current_location /* end of arena size */) {
   10fdc:	f8dc 3000 	ldr.w	r3, [ip]
   10fe0:	429e      	cmp	r6, r3
   10fe2:	d201      	bcs.n	10fe8 <_Z18trained_model_initPFPvjjE+0xe0>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
   10fe4:	4849      	ldr	r0, [pc, #292]	; (1110c <_Z18trained_model_initPFPvjjE+0x204>)
   10fe6:	e79c      	b.n	10f22 <_Z18trained_model_initPFPvjjE+0x1a>
  registrations[OP_RESHAPE] = Register_RESHAPE();
   10fe8:	4668      	mov	r0, sp
   10fea:	466c      	mov	r4, sp
   10fec:	f002 fab8 	bl	13560 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
   10ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   10ff2:	4d47      	ldr	r5, [pc, #284]	; (11110 <_Z18trained_model_initPFPvjjE+0x208>)
   10ff4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 11118 <_Z18trained_model_initPFPvjjE+0x210>
   10ff8:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1111c <_Z18trained_model_initPFPvjjE+0x214>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   10ffc:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 110e8 <_Z18trained_model_initPFPvjjE+0x1e0>
  registrations[OP_RESHAPE] = Register_RESHAPE();
   11000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11002:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   11006:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
   1100a:	4668      	mov	r0, sp
   1100c:	f001 f9f4 	bl	123f8 <_ZN6tflite16Register_CONV_2DEv>
   11010:	46ec      	mov	ip, sp
   11012:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   11016:	f105 0610 	add.w	r6, r5, #16
   1101a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1101c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   11020:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
   11024:	4668      	mov	r0, sp
   11026:	f001 ff81 	bl	12f2c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
   1102a:	46ec      	mov	ip, sp
   1102c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   11030:	f105 0630 	add.w	r6, r5, #48	; 0x30
   11034:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11036:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1103a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
   1103e:	4668      	mov	r0, sp
   11040:	f001 fe5c 	bl	12cfc <_ZN6tflite24Register_FULLY_CONNECTEDEv>
   11044:	46ec      	mov	ip, sp
   11046:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1104a:	f105 0650 	add.w	r6, r5, #80	; 0x50
   1104e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11050:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   11054:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   11058:	4668      	mov	r0, sp
   1105a:	466e      	mov	r6, sp
   1105c:	f002 fb28 	bl	136b0 <_ZN6tflite16Register_SOFTMAXEv>
   11060:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11062:	f105 0c70 	add.w	ip, r5, #112	; 0x70
   11066:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1106a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1106e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   11072:	4644      	mov	r4, r8
   11074:	46ca      	mov	sl, r9
   11076:	260b      	movs	r6, #11
   11078:	3d10      	subs	r5, #16
    tflNodes[i].inputs = nodeData[i].inputs;
   1107a:	f8da 3000 	ldr.w	r3, [sl]
   1107e:	6023      	str	r3, [r4, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
   11080:	f8da 3004 	ldr.w	r3, [sl, #4]
   11084:	6063      	str	r3, [r4, #4]
if (registrations[nodeData[i].used_op_index].init) {
   11086:	f89a 300c 	ldrb.w	r3, [sl, #12]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
   1108a:	f8da 1008 	ldr.w	r1, [sl, #8]
      tflNodes[i].custom_initial_data_size = 0;
   1108e:	61e7      	str	r7, [r4, #28]
if (registrations[nodeData[i].used_op_index].init) {
   11090:	015b      	lsls	r3, r3, #5
tflNodes[i].custom_initial_data = nullptr;
   11092:	e9c4 1705 	strd	r1, r7, [r4, #20]
if (registrations[nodeData[i].used_op_index].init) {
   11096:	58eb      	ldr	r3, [r5, r3]
   11098:	b11b      	cbz	r3, 110a2 <_Z18trained_model_initPFPvjjE+0x19a>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   1109a:	2200      	movs	r2, #0
   1109c:	4658      	mov	r0, fp
   1109e:	4798      	blx	r3
   110a0:	6120      	str	r0, [r4, #16]
  for(size_t i = 0; i < 11; ++i) {
   110a2:	3e01      	subs	r6, #1
   110a4:	f10a 0a10 	add.w	sl, sl, #16
   110a8:	f104 0424 	add.w	r4, r4, #36	; 0x24
   110ac:	d1e5      	bne.n	1107a <_Z18trained_model_initPFPvjjE+0x172>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
   110ae:	4c0e      	ldr	r4, [pc, #56]	; (110e8 <_Z18trained_model_initPFPvjjE+0x1e0>)
    if (registrations[nodeData[i].used_op_index].prepare) {
   110b0:	f899 300c 	ldrb.w	r3, [r9, #12]
   110b4:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   110b8:	689b      	ldr	r3, [r3, #8]
   110ba:	b943      	cbnz	r3, 110ce <_Z18trained_model_initPFPvjjE+0x1c6>
  for(size_t i = 0; i < 11; ++i) {
   110bc:	3601      	adds	r6, #1
   110be:	2e0b      	cmp	r6, #11
   110c0:	f109 0910 	add.w	r9, r9, #16
   110c4:	f108 0824 	add.w	r8, r8, #36	; 0x24
   110c8:	d1f2      	bne.n	110b0 <_Z18trained_model_initPFPvjjE+0x1a8>
  return kTfLiteOk;
   110ca:	2000      	movs	r0, #0
   110cc:	e72c      	b.n	10f28 <_Z18trained_model_initPFPvjjE+0x20>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
   110ce:	4641      	mov	r1, r8
   110d0:	4620      	mov	r0, r4
   110d2:	4798      	blx	r3
      if (status != kTfLiteOk) {
   110d4:	2800      	cmp	r0, #0
   110d6:	d0f1      	beq.n	110bc <_Z18trained_model_initPFPvjjE+0x1b4>
   110d8:	e726      	b.n	10f28 <_Z18trained_model_initPFPvjjE+0x20>
   110da:	bf00      	nop
   110dc:	20024000 	.word	0x20024000
   110e0:	0003e059 	.word	0x0003e059
   110e4:	200243ac 	.word	0x200243ac
   110e8:	200241b8 	.word	0x200241b8
   110ec:	200240a4 	.word	0x200240a4
   110f0:	00011269 	.word	0x00011269
   110f4:	000112d9 	.word	0x000112d9
   110f8:	00010ed1 	.word	0x00010ed1
   110fc:	00010eed 	.word	0x00010eed
   11100:	00010ef9 	.word	0x00010ef9
   11104:	20023a40 	.word	0x20023a40
   11108:	20000130 	.word	0x20000130
   1110c:	0003e07f 	.word	0x0003e07f
   11110:	20024004 	.word	0x20024004
   11114:	200243a8 	.word	0x200243a8
   11118:	00036058 	.word	0x00036058
   1111c:	20024210 	.word	0x20024210

00011120 <_Z19trained_model_inputi>:
static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}
   11120:	4b01      	ldr	r3, [pc, #4]	; (11128 <_Z19trained_model_inputi+0x8>)
   11122:	6898      	ldr	r0, [r3, #8]
   11124:	4770      	bx	lr
   11126:	bf00      	nop
   11128:	200241b8 	.word	0x200241b8

0001112c <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
   1112c:	4b02      	ldr	r3, [pc, #8]	; (11138 <_Z20trained_model_outputi+0xc>)
   1112e:	6898      	ldr	r0, [r3, #8]
}
   11130:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
   11134:	4770      	bx	lr
   11136:	bf00      	nop
   11138:	200241b8 	.word	0x200241b8

0001113c <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
   1113c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11140:	4e0b      	ldr	r6, [pc, #44]	; (11170 <_Z20trained_model_invokev+0x34>)
   11142:	4d0c      	ldr	r5, [pc, #48]	; (11174 <_Z20trained_model_invokev+0x38>)
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
   11144:	4f0c      	ldr	r7, [pc, #48]	; (11178 <_Z20trained_model_invokev+0x3c>)
   11146:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1117c <_Z20trained_model_invokev+0x40>
  for(size_t i = 0; i < 11; ++i) {
   1114a:	2400      	movs	r4, #0
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
   1114c:	7b33      	ldrb	r3, [r6, #12]
   1114e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   11152:	4629      	mov	r1, r5
   11154:	68db      	ldr	r3, [r3, #12]
   11156:	4640      	mov	r0, r8
   11158:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
   1115a:	b930      	cbnz	r0, 1116a <_Z20trained_model_invokev+0x2e>
  for(size_t i = 0; i < 11; ++i) {
   1115c:	3401      	adds	r4, #1
   1115e:	2c0b      	cmp	r4, #11
   11160:	f106 0610 	add.w	r6, r6, #16
   11164:	f105 0524 	add.w	r5, r5, #36	; 0x24
   11168:	d1f0      	bne.n	1114c <_Z20trained_model_invokev+0x10>
      return status;
    }
  }
  return kTfLiteOk;
}
   1116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1116e:	bf00      	nop
   11170:	00036058 	.word	0x00036058
   11174:	20024210 	.word	0x20024210
   11178:	20024004 	.word	0x20024004
   1117c:	200241b8 	.word	0x200241b8

00011180 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
   11180:	4a0e      	ldr	r2, [pc, #56]	; (111bc <_Z19trained_model_resetPFvPvE+0x3c>)
TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
   11182:	b538      	push	{r3, r4, r5, lr}
   11184:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
   11186:	6810      	ldr	r0, [r2, #0]
   11188:	4d0d      	ldr	r5, [pc, #52]	; (111c0 <_Z19trained_model_resetPFvPvE+0x40>)
   1118a:	4798      	blx	r3
      { _M_erase_at_end(this->_M_impl._M_start); }
   1118c:	4b0d      	ldr	r3, [pc, #52]	; (111c4 <_Z19trained_model_resetPFvPvE+0x44>)
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1118e:	e9d3 2100 	ldrd	r2, r1, [r3]
   11192:	428a      	cmp	r2, r1
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   11194:	bf18      	it	ne
   11196:	605a      	strne	r2, [r3, #4]
TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
   11198:	2400      	movs	r4, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1119a:	e9d5 3200 	ldrd	r3, r2, [r5]
   1119e:	1ad1      	subs	r1, r2, r3
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
   111a0:	ebb4 0fa1 	cmp.w	r4, r1, asr #2
   111a4:	d205      	bcs.n	111b2 <_Z19trained_model_resetPFvPvE+0x32>
    free(overflow_buffers[ix]);
   111a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   111aa:	f004 fd8d 	bl	15cc8 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
   111ae:	3401      	adds	r4, #1
   111b0:	e7f3      	b.n	1119a <_Z19trained_model_resetPFvPvE+0x1a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   111b2:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
   111b4:	bf18      	it	ne
   111b6:	606b      	strne	r3, [r5, #4]
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
   111b8:	2000      	movs	r0, #0
   111ba:	bd38      	pop	{r3, r4, r5, pc}
   111bc:	20024000 	.word	0x20024000
   111c0:	200243b0 	.word	0x200243b0
   111c4:	2002439c 	.word	0x2002439c

000111c8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   111c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   111cc:	e9d0 9800 	ldrd	r9, r8, [r0]
   111d0:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   111d2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   111d6:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
   111da:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
   111de:	4607      	mov	r7, r0
   111e0:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   111e2:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
   111e6:	d102      	bne.n	111ee <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   111e8:	481e      	ldr	r0, [pc, #120]	; (11264 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
   111ea:	f00a fcc3 	bl	1bb74 <_ZSt20__throw_length_errorPKc>
   111ee:	2c01      	cmp	r4, #1
   111f0:	4622      	mov	r2, r4
   111f2:	bf38      	it	cc
   111f4:	2201      	movcc	r2, #1
   111f6:	18a4      	adds	r4, r4, r2
   111f8:	eba1 0509 	sub.w	r5, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   111fc:	d22d      	bcs.n	1125a <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x92>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   111fe:	b374      	cbz	r4, 1125e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
   11200:	429c      	cmp	r4, r3
   11202:	bf28      	it	cs
   11204:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   11206:	00a0      	lsls	r0, r4, #2
   11208:	f00a fc9e 	bl	1bb48 <_Znwj>
   1120c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1120e:	42ee      	cmn	r6, r5
   11210:	bf1c      	itt	ne
   11212:	f8db 3000 	ldrne.w	r3, [fp]
   11216:	5173      	strne	r3, [r6, r5]
      if (__count > 0)
   11218:	2d00      	cmp	r5, #0
   1121a:	dd04      	ble.n	11226 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1121c:	462a      	mov	r2, r5
   1121e:	4649      	mov	r1, r9
   11220:	4630      	mov	r0, r6
   11222:	f00a fd7e 	bl	1bd22 <memmove>
      ptrdiff_t __count = __last - __first;
   11226:	eba8 080a 	sub.w	r8, r8, sl
	      ++__new_finish;
   1122a:	3504      	adds	r5, #4
      if (__count > 0)
   1122c:	f1b8 0f00 	cmp.w	r8, #0
   11230:	4435      	add	r5, r6
   11232:	dd04      	ble.n	1123e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   11234:	4642      	mov	r2, r8
   11236:	4651      	mov	r1, sl
   11238:	4628      	mov	r0, r5
   1123a:	f00a fd51 	bl	1bce0 <memcpy>
      return __result + __count;
   1123e:	4445      	add	r5, r8
	if (__p)
   11240:	f1b9 0f00 	cmp.w	r9, #0
   11244:	d002      	beq.n	1124c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	::operator delete(__p
   11246:	4648      	mov	r0, r9
   11248:	f00a fc7a 	bl	1bb40 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1124c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
   11250:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   11254:	60bc      	str	r4, [r7, #8]
    }
   11256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1125a:	461c      	mov	r4, r3
   1125c:	e7d3      	b.n	11206 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1125e:	4626      	mov	r6, r4
   11260:	e7d5      	b.n	1120e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   11262:	bf00      	nop
   11264:	0003d5f5 	.word	0x0003d5f5

00011268 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
                                       size_t bytes) {
   11268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (current_location - bytes < tensor_boundary) {
   1126a:	4b17      	ldr	r3, [pc, #92]	; (112c8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
   1126c:	681c      	ldr	r4, [r3, #0]
                                       size_t bytes) {
   1126e:	460a      	mov	r2, r1
  if (current_location - bytes < tensor_boundary) {
   11270:	1a64      	subs	r4, r4, r1
   11272:	4916      	ldr	r1, [pc, #88]	; (112cc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
   11274:	6809      	ldr	r1, [r1, #0]
   11276:	428c      	cmp	r4, r1
   11278:	d21f      	bcs.n	112ba <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x52>
    ptr = ei_calloc(bytes, 1);
   1127a:	4610      	mov	r0, r2
   1127c:	2101      	movs	r1, #1
   1127e:	9201      	str	r2, [sp, #4]
   11280:	f007 fc4c 	bl	18b1c <_Z9ei_callocjj>
    if (ptr == NULL) {
   11284:	9a01      	ldr	r2, [sp, #4]
    ptr = ei_calloc(bytes, 1);
   11286:	9003      	str	r0, [sp, #12]
   11288:	4604      	mov	r4, r0
    if (ptr == NULL) {
   1128a:	b930      	cbnz	r0, 1129a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
   1128c:	4810      	ldr	r0, [pc, #64]	; (112d0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
   1128e:	4611      	mov	r1, r2
   11290:	f005 fa54 	bl	1673c <iprintf>
}
   11294:	4620      	mov	r0, r4
   11296:	b004      	add	sp, #16
   11298:	bd10      	pop	{r4, pc}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1129a:	480e      	ldr	r0, [pc, #56]	; (112d4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
   1129c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   112a0:	4299      	cmp	r1, r3
   112a2:	d006      	beq.n	112b2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   112a4:	b101      	cbz	r1, 112a8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x40>
   112a6:	600c      	str	r4, [r1, #0]
	    ++this->_M_impl._M_finish;
   112a8:	6843      	ldr	r3, [r0, #4]
   112aa:	3304      	adds	r3, #4
   112ac:	6043      	str	r3, [r0, #4]
    return ptr;
   112ae:	9c03      	ldr	r4, [sp, #12]
   112b0:	e7f0      	b.n	11294 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x2c>
	  _M_realloc_insert(end(), __x);
   112b2:	aa03      	add	r2, sp, #12
   112b4:	f7ff ff88 	bl	111c8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   112b8:	e7f9      	b.n	112ae <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x46>
  memset(ptr, 0, bytes);
   112ba:	2100      	movs	r1, #0
   112bc:	4620      	mov	r0, r4
  current_location -= bytes;
   112be:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
   112c0:	f00a fd49 	bl	1bd56 <memset>
  return ptr;
   112c4:	e7e6      	b.n	11294 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x2c>
   112c6:	bf00      	nop
   112c8:	200243ac 	.word	0x200243ac
   112cc:	200243a8 	.word	0x200243a8
   112d0:	0003e0d2 	.word	0x0003e0d2
   112d4:	200243b0 	.word	0x200243b0

000112d8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
   112d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112dc:	4689      	mov	r9, r1
   112de:	4617      	mov	r7, r2
  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
   112e0:	f7ff ffc2 	bl	11268 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
  if (!b.ptr) {
   112e4:	4683      	mov	fp, r0
   112e6:	2800      	cmp	r0, #0
   112e8:	d04e      	beq.n	11388 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   112ea:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 11394 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xbc>
   112ee:	e9d8 4301 	ldrd	r4, r3, [r8, #4]
   112f2:	429c      	cmp	r4, r3
   112f4:	d00e      	beq.n	11314 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3c>
   112f6:	b10c      	cbz	r4, 112fc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x24>
   112f8:	e9c4 9000 	strd	r9, r0, [r4]
	    ++this->_M_impl._M_finish;
   112fc:	3408      	adds	r4, #8
   112fe:	f8c8 4004 	str.w	r4, [r8, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   11302:	e9d8 2300 	ldrd	r2, r3, [r8]
   11306:	1a9b      	subs	r3, r3, r2
   11308:	10db      	asrs	r3, r3, #3
  *buffer_idx = scratch_buffers.size() - 1;
   1130a:	3b01      	subs	r3, #1
   1130c:	603b      	str	r3, [r7, #0]
  return kTfLiteOk;
   1130e:	2000      	movs	r0, #0
}
   11310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11314:	f8d8 a000 	ldr.w	sl, [r8]
	if (max_size() - size() < __n)
   11318:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1131c:	eba4 040a 	sub.w	r4, r4, sl
	if (max_size() - size() < __n)
   11320:	ebb3 0fe4 	cmp.w	r3, r4, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   11324:	ea4f 05e4 	mov.w	r5, r4, asr #3
	if (max_size() - size() < __n)
   11328:	d102      	bne.n	11330 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x58>
	  __throw_length_error(__N(__s));
   1132a:	4819      	ldr	r0, [pc, #100]	; (11390 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb8>)
   1132c:	f00a fc22 	bl	1bb74 <_ZSt20__throw_length_errorPKc>
   11330:	2d01      	cmp	r5, #1
   11332:	462a      	mov	r2, r5
   11334:	bf38      	it	cc
   11336:	2201      	movcc	r2, #1
   11338:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1133a:	d227      	bcs.n	1138c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb4>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1133c:	b13d      	cbz	r5, 1134e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x76>
   1133e:	429d      	cmp	r5, r3
   11340:	bf28      	it	cs
   11342:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   11344:	00e8      	lsls	r0, r5, #3
   11346:	f00a fbff 	bl	1bb48 <_Znwj>
   1134a:	4606      	mov	r6, r0
   1134c:	e000      	b.n	11350 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x78>
   1134e:	462e      	mov	r6, r5
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   11350:	1933      	adds	r3, r6, r4
   11352:	bf1c      	itt	ne
   11354:	f846 9004 	strne.w	r9, [r6, r4]
   11358:	f8c3 b004 	strne.w	fp, [r3, #4]
      if (__count > 0)
   1135c:	2c00      	cmp	r4, #0
   1135e:	dd04      	ble.n	1136a <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x92>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   11360:	4622      	mov	r2, r4
   11362:	4651      	mov	r1, sl
   11364:	4630      	mov	r0, r6
   11366:	f00a fcdc 	bl	1bd22 <memmove>
	      ++__new_finish;
   1136a:	3408      	adds	r4, #8
   1136c:	4434      	add	r4, r6
	if (__p)
   1136e:	f1ba 0f00 	cmp.w	sl, #0
   11372:	d002      	beq.n	1137a <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xa2>
	::operator delete(__p
   11374:	4650      	mov	r0, sl
   11376:	f00a fbe3 	bl	1bb40 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1137a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
      this->_M_impl._M_finish = __new_finish;
   1137e:	e9c8 6400 	strd	r6, r4, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   11382:	f8c8 5008 	str.w	r5, [r8, #8]
   11386:	e7bc      	b.n	11302 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2a>
    return kTfLiteError;
   11388:	2001      	movs	r0, #1
   1138a:	e7c1      	b.n	11310 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x38>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1138c:	461d      	mov	r5, r3
   1138e:	e7d9      	b.n	11344 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x6c>
   11390:	0003d5f5 	.word	0x0003d5f5
   11394:	2002439c 	.word	0x2002439c

00011398 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
   11398:	4b19      	ldr	r3, [pc, #100]	; (11400 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x68>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1139a:	481a      	ldr	r0, [pc, #104]	; (11404 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x6c>)
   1139c:	681a      	ldr	r2, [r3, #0]
};const NodeInfo_t nodeData[] = {
   1139e:	4b1a      	ldr	r3, [pc, #104]	; (11408 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x70>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
   113a0:	f502 6144 	add.w	r1, r2, #3136	; 0xc40
}
   113a4:	b510      	push	{r4, lr}
};const NodeInfo_t nodeData[] = {
   113a6:	6059      	str	r1, [r3, #4]
   113a8:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
   113ac:	f502 7144 	add.w	r1, r2, #784	; 0x310
   113b0:	2400      	movs	r4, #0
};const NodeInfo_t nodeData[] = {
   113b2:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
   113b6:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
   113ba:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
   113be:	f502 71c8 	add.w	r1, r2, #400	; 0x190
   113c2:	e9c0 4400 	strd	r4, r4, [r0]
};const NodeInfo_t nodeData[] = {
   113c6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   113ca:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   113ce:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   113d2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
   113d6:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
   113da:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
   113de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
static std::vector<void*> overflow_buffers;
   113e2:	490a      	ldr	r1, [pc, #40]	; (1140c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x74>)
   113e4:	4a0a      	ldr	r2, [pc, #40]	; (11410 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x78>)
   113e6:	6084      	str	r4, [r0, #8]
   113e8:	f006 fd8b 	bl	17f02 <__aeabi_atexit>
   113ec:	4809      	ldr	r0, [pc, #36]	; (11414 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x7c>)
static std::vector<scratch_buffer_t> scratch_buffers;
   113ee:	4a08      	ldr	r2, [pc, #32]	; (11410 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x78>)
   113f0:	6084      	str	r4, [r0, #8]
   113f2:	e9c0 4400 	strd	r4, r4, [r0]
   113f6:	4908      	ldr	r1, [pc, #32]	; (11418 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x80>)
}
   113f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static std::vector<scratch_buffer_t> scratch_buffers;
   113fc:	f006 bd81 	b.w	17f02 <__aeabi_atexit>
   11400:	20024000 	.word	0x20024000
   11404:	200243b0 	.word	0x200243b0
   11408:	20000130 	.word	0x20000130
   1140c:	00018d53 	.word	0x00018d53
   11410:	2001099c 	.word	0x2001099c
   11414:	2002439c 	.word	0x2002439c
   11418:	00018d63 	.word	0x00018d63

0001141c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
{
   1141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11420:	ed2d 8b08 	vpush	{d8-d11}
   11424:	b089      	sub	sp, #36	; 0x24
   11426:	4616      	mov	r6, r2
   11428:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
   1142c:	460f      	mov	r7, r1
    const int m=*factors++; /* stage's fft length/p */
   1142e:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
   11432:	6811      	ldr	r1, [r2, #0]
   11434:	9103      	str	r1, [sp, #12]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   11436:	fb0a f901 	mul.w	r9, sl, r1
    if (m==1) {
   1143a:	f1ba 0f01 	cmp.w	sl, #1
            f += fstride*in_stride;
   1143e:	fb06 f103 	mul.w	r1, r6, r3
{
   11442:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   11444:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
            f += fstride*in_stride;
   11448:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    if (m==1) {
   1144c:	d116      	bne.n	1147c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
   1144e:	4603      	mov	r3, r0
            *Fout = *f;
   11450:	e897 0003 	ldmia.w	r7, {r0, r1}
   11454:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
   11458:	3308      	adds	r3, #8
   1145a:	4599      	cmp	r9, r3
            f += fstride*in_stride;
   1145c:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
   1145e:	d1f7      	bne.n	11450 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    kiss_fft_cpx * tw1 = st->twiddles;
   11460:	f505 7384 	add.w	r3, r5, #264	; 0x108
   11464:	9305      	str	r3, [sp, #20]
    switch (p) {
   11466:	9b03      	ldr	r3, [sp, #12]
   11468:	3b02      	subs	r3, #2
   1146a:	2b03      	cmp	r3, #3
   1146c:	f200 8284 	bhi.w	11978 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x55c>
   11470:	e8df f013 	tbh	[pc, r3, lsl #1]
   11474:	0056001b 	.word	0x0056001b
   11478:	019600f9 	.word	0x019600f9
    const int m=*factors++; /* stage's fft length/p */
   1147c:	3208      	adds	r2, #8
   1147e:	9204      	str	r2, [sp, #16]
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   11480:	9a03      	ldr	r2, [sp, #12]
        }while( (Fout += m) != Fout_end );
   11482:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   11486:	4372      	muls	r2, r6
   11488:	9904      	ldr	r1, [sp, #16]
   1148a:	9100      	str	r1, [sp, #0]
   1148c:	9501      	str	r5, [sp, #4]
   1148e:	4639      	mov	r1, r7
   11490:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11494:	9005      	str	r0, [sp, #20]
   11496:	f7ff ffc1 	bl	1141c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
   1149a:	9805      	ldr	r0, [sp, #20]
   1149c:	4458      	add	r0, fp
   1149e:	4581      	cmp	r9, r0
   114a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
            f += fstride*in_stride;
   114a4:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
   114a6:	d1ef      	bne.n	11488 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
   114a8:	e7da      	b.n	11460 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
   114aa:	f10a 0301 	add.w	r3, sl, #1
   114ae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
   114b2:	00f6      	lsls	r6, r6, #3
   114b4:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
   114b6:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
   114ba:	ed53 5a01 	vldr	s11, [r3, #-4]
   114be:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
   114c2:	ed13 6a02 	vldr	s12, [r3, #-8]
   114c6:	ee26 7ae5 	vnmul.f32	s14, s13, s11
    }while (--m);
   114ca:	f1ba 0a01 	subs.w	sl, sl, #1
        C_MUL (t,  *Fout2 , *tw1);
   114ce:	eea6 7a27 	vfma.f32	s14, s12, s15
    }while (--m);
   114d2:	f103 0308 	add.w	r3, r3, #8
   114d6:	f104 0408 	add.w	r4, r4, #8
        C_MUL (t,  *Fout2 , *tw1);
   114da:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }while (--m);
   114de:	4435      	add	r5, r6
        C_MUL (t,  *Fout2 , *tw1);
   114e0:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
   114e4:	ed54 6a04 	vldr	s13, [r4, #-16]
   114e8:	ee76 6ac7 	vsub.f32	s13, s13, s14
   114ec:	ed43 6a04 	vstr	s13, [r3, #-16]
   114f0:	ed54 6a03 	vldr	s13, [r4, #-12]
   114f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
   114f8:	ed43 6a03 	vstr	s13, [r3, #-12]
        C_ADDTO( *Fout ,  t );
   114fc:	ed54 6a04 	vldr	s13, [r4, #-16]
   11500:	ee36 7a87 	vadd.f32	s14, s13, s14
   11504:	ed04 7a04 	vstr	s14, [r4, #-16]
   11508:	ed14 7a03 	vldr	s14, [r4, #-12]
   1150c:	ee77 7a27 	vadd.f32	s15, s14, s15
   11510:	ed44 7a03 	vstr	s15, [r4, #-12]
    }while (--m);
   11514:	d1cf      	bne.n	114b6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
}
   11516:	b009      	add	sp, #36	; 0x24
   11518:	ecbd 8b08 	vpop	{d8-d11}
   1151c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
   11520:	fb06 f30a 	mul.w	r3, r6, sl
   11524:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   11528:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
   1152c:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
   11530:	0133      	lsls	r3, r6, #4
   11532:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
   11536:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1153a:	f104 0608 	add.w	r6, r4, #8
   1153e:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
   11540:	4657      	mov	r7, sl
         tw2 += fstride*2;
   11542:	9303      	str	r3, [sp, #12]
   11544:	3404      	adds	r4, #4
   11546:	46aa      	mov	sl, r5
         Fout[m2].i = Fout[m].i - scratch[0].r;
   11548:	eef1 9a49 	vneg.f32	s19, s18
         C_MUL(scratch[1],Fout[m] , *tw1);
   1154c:	edd8 7a01 	vldr	s15, [r8, #4]
   11550:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
   11554:	ed14 6a01 	vldr	s12, [r4, #-4]
   11558:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
         C_MUL(scratch[2],Fout[m2] , *tw2);
   1155c:	edd9 5a01 	vldr	s11, [r9, #4]
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   11560:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_MUL(scratch[1],Fout[m] , *tw1);
   11564:	ee66 8ae7 	vnmul.f32	s17, s13, s15
     }while(--k);
   11568:	3608      	adds	r6, #8
         C_MUL(scratch[1],Fout[m] , *tw1);
   1156a:	eeb0 7a68 	vmov.f32	s14, s17
   1156e:	eea6 7a08 	vfma.f32	s14, s12, s16
     }while(--k);
   11572:	f108 0808 	add.w	r8, r8, #8
   11576:	445d      	add	r5, fp
         C_MUL(scratch[1],Fout[m] , *tw1);
   11578:	ee28 8a27 	vmul.f32	s16, s16, s15
     }while(--k);
   1157c:	f109 0908 	add.w	r9, r9, #8
         C_MUL(scratch[1],Fout[m] , *tw1);
   11580:	eef0 7a48 	vmov.f32	s15, s16
   11584:	eee6 7a26 	vfma.f32	s15, s12, s13
     }while(--k);
   11588:	3408      	adds	r4, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   1158a:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
   1158e:	ed19 6a02 	vldr	s12, [r9, #-8]
   11592:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
   11596:	ee66 8ae5 	vnmul.f32	s17, s13, s11
   1159a:	eee6 8a08 	vfma.f32	s17, s12, s16
   1159e:	ee28 8a25 	vmul.f32	s16, s16, s11
         C_ADD(scratch[3],scratch[1],scratch[2]);
   115a2:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_MUL(scratch[2],Fout[m2] , *tw2);
   115a6:	eea6 8a26 	vfma.f32	s16, s12, s13
         C_SUB(scratch[0],scratch[1],scratch[2]);
   115aa:	ee77 8a68 	vsub.f32	s17, s14, s17
         C_ADD(scratch[3],scratch[1],scratch[2]);
   115ae:	ee37 aa88 	vadd.f32	s20, s15, s16
         C_SUB(scratch[0],scratch[1],scratch[2]);
   115b2:	ee37 8ac8 	vsub.f32	s16, s15, s16
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   115b6:	f7ee ff57 	bl	468 <__aeabi_f2d>
   115ba:	ec41 0b1b 	vmov	d11, r0, r1
   115be:	ee1a 0a90 	vmov	r0, s21
   115c2:	f7ee ff51 	bl	468 <__aeabi_f2d>
   115c6:	4beb      	ldr	r3, [pc, #940]	; (11974 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x558>)
   115c8:	2200      	movs	r2, #0
   115ca:	f7ee ffa5 	bl	518 <__aeabi_dmul>
   115ce:	4602      	mov	r2, r0
   115d0:	460b      	mov	r3, r1
   115d2:	ec51 0b1b 	vmov	r0, r1, d11
   115d6:	f7ee fde7 	bl	1a8 <__aeabi_dsub>
   115da:	f7ef fa37 	bl	a4c <__aeabi_d2f>
   115de:	f844 0c0c 	str.w	r0, [r4, #-12]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
   115e2:	f856 0c0c 	ldr.w	r0, [r6, #-12]
   115e6:	f7ee ff3f 	bl	468 <__aeabi_f2d>
   115ea:	ec41 0b1b 	vmov	d11, r0, r1
   115ee:	ee1a 0a10 	vmov	r0, s20
   115f2:	f7ee ff39 	bl	468 <__aeabi_f2d>
   115f6:	4bdf      	ldr	r3, [pc, #892]	; (11974 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x558>)
   115f8:	2200      	movs	r2, #0
   115fa:	f7ee ff8d 	bl	518 <__aeabi_dmul>
   115fe:	460b      	mov	r3, r1
   11600:	4602      	mov	r2, r0
   11602:	ec51 0b1b 	vmov	r0, r1, d11
   11606:	f7ee fdcf 	bl	1a8 <__aeabi_dsub>
   1160a:	f7ef fa1f 	bl	a4c <__aeabi_d2f>
   1160e:	f848 0c04 	str.w	r0, [r8, #-4]
         C_ADDTO(*Fout,scratch[3]);
   11612:	ed56 7a04 	vldr	s15, [r6, #-16]
   11616:	ee77 7aaa 	vadd.f32	s15, s15, s21
     }while(--k);
   1161a:	3f01      	subs	r7, #1
         C_ADDTO(*Fout,scratch[3]);
   1161c:	ed46 7a04 	vstr	s15, [r6, #-16]
   11620:	ed56 7a03 	vldr	s15, [r6, #-12]
   11624:	ee77 7a8a 	vadd.f32	s15, s15, s20
   11628:	ed46 7a03 	vstr	s15, [r6, #-12]
         Fout[m2].r = Fout[m].r + scratch[0].i;
   1162c:	ed54 7a03 	vldr	s15, [r4, #-12]
   11630:	eee9 7a08 	vfma.f32	s15, s18, s16
   11634:	ed49 7a02 	vstr	s15, [r9, #-8]
         Fout[m2].i = Fout[m].i - scratch[0].r;
   11638:	ed58 7a01 	vldr	s15, [r8, #-4]
   1163c:	eee9 7aa8 	vfma.f32	s15, s19, s17
   11640:	ed49 7a01 	vstr	s15, [r9, #-4]
         Fout[m].r -= scratch[0].i;
   11644:	ed54 7a03 	vldr	s15, [r4, #-12]
   11648:	eee9 7a88 	vfma.f32	s15, s19, s16
   1164c:	ed44 7a03 	vstr	s15, [r4, #-12]
         Fout[m].i += scratch[0].r;
   11650:	ed58 7a01 	vldr	s15, [r8, #-4]
   11654:	eee9 7a28 	vfma.f32	s15, s18, s17
   11658:	ed48 7a01 	vstr	s15, [r8, #-4]
     }while(--k);
   1165c:	9b03      	ldr	r3, [sp, #12]
   1165e:	449a      	add	sl, r3
   11660:	f47f af74 	bne.w	1154c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
   11664:	e757      	b.n	11516 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
   11666:	4657      	mov	r7, sl
        tw3 += fstride*3;
   11668:	2218      	movs	r2, #24
        tw1 += fstride;
   1166a:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
        tw2 += fstride*2;
   1166e:	ea4f 1906 	mov.w	r9, r6, lsl #4
   11672:	eb04 1007 	add.w	r0, r4, r7, lsl #4
        tw3 += fstride*3;
   11676:	4356      	muls	r6, r2
        if(st->inverse) {
   11678:	686a      	ldr	r2, [r5, #4]
   1167a:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
   1167e:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
   11682:	f104 0c04 	add.w	ip, r4, #4
   11686:	46ae      	mov	lr, r5
   11688:	46a8      	mov	r8, r5
        C_MUL(scratch[0],Fout[m] , *tw1 );
   1168a:	edd1 6a01 	vldr	s13, [r1, #4]
   1168e:	edd5 7a43 	vldr	s15, [r5, #268]	; 0x10c
   11692:	ed91 6a00 	vldr	s12, [r1]
   11696:	ed95 7a42 	vldr	s14, [r5, #264]	; 0x108
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   1169a:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   1169e:	edd3 3a01 	vldr	s7, [r3, #4]
   116a2:	ed93 4a00 	vldr	s8, [r3]
        C_SUB( scratch[5] , *Fout, scratch[1] );
   116a6:	ed1c 3a01 	vldr	s6, [ip, #-4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   116aa:	ee67 5ae6 	vnmul.f32	s11, s15, s13
   116ae:	eee6 5a07 	vfma.f32	s11, s12, s14
   116b2:	ee27 7a26 	vmul.f32	s14, s14, s13
   116b6:	eeb0 5a65 	vmov.f32	s10, s11
   116ba:	eea6 7a27 	vfma.f32	s14, s12, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   116be:	edd0 5a00 	vldr	s11, [r0]
   116c2:	edd8 7a42 	vldr	s15, [r8, #264]	; 0x108
        C_MUL(scratch[0],Fout[m] , *tw1 );
   116c6:	eef0 6a47 	vmov.f32	s13, s14
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   116ca:	ed98 7a43 	vldr	s14, [r8, #268]	; 0x10c
   116ce:	ee27 6a64 	vnmul.f32	s12, s14, s9
   116d2:	eea5 6aa7 	vfma.f32	s12, s11, s15
   116d6:	ee67 7aa4 	vmul.f32	s15, s15, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   116da:	edde 4a43 	vldr	s9, [lr, #268]	; 0x10c
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   116de:	eee5 7a87 	vfma.f32	s15, s11, s14
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   116e2:	ed9e 7a42 	vldr	s14, [lr, #264]	; 0x108
   116e6:	ee64 5ae3 	vnmul.f32	s11, s9, s7
   116ea:	eee4 5a07 	vfma.f32	s11, s8, s14
   116ee:	ee27 7a23 	vmul.f32	s14, s14, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
   116f2:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   116f6:	eea4 7a24 	vfma.f32	s14, s8, s9
        C_SUB( scratch[5] , *Fout, scratch[1] );
   116fa:	ee33 4a46 	vsub.f32	s8, s6, s12
   116fe:	ee73 4ae7 	vsub.f32	s9, s7, s15
        C_ADDTO(*Fout, scratch[1]);
   11702:	ee36 6a03 	vadd.f32	s12, s12, s6
   11706:	ee77 7aa3 	vadd.f32	s15, s15, s7
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
   1170a:	ee35 3a25 	vadd.f32	s6, s10, s11
   1170e:	ee76 3a87 	vadd.f32	s7, s13, s14
        C_ADDTO(*Fout, scratch[1]);
   11712:	ed0c 6a01 	vstr	s12, [ip, #-4]
   11716:	edc4 7a01 	vstr	s15, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
   1171a:	ee36 6a43 	vsub.f32	s12, s12, s6
   1171e:	ee77 7ae3 	vsub.f32	s15, s15, s7
   11722:	ed80 6a00 	vstr	s12, [r0]
   11726:	edc0 7a01 	vstr	s15, [r0, #4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   1172a:	ee36 7ac7 	vsub.f32	s14, s13, s14
        C_ADDTO( *Fout , scratch[3] );
   1172e:	ed5c 6a01 	vldr	s13, [ip, #-4]
   11732:	ee76 6a83 	vadd.f32	s13, s13, s6
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   11736:	ee75 5a65 	vsub.f32	s11, s10, s11
        C_ADDTO( *Fout , scratch[3] );
   1173a:	ed4c 6a01 	vstr	s13, [ip, #-4]
   1173e:	edd4 7a01 	vldr	s15, [r4, #4]
   11742:	ee77 7aa3 	vadd.f32	s15, s15, s7
            Fout[m3].r = scratch[5].r + scratch[4].i;
   11746:	ee74 6a07 	vadd.f32	s13, s8, s14
        C_ADDTO( *Fout , scratch[3] );
   1174a:	edc4 7a01 	vstr	s15, [r4, #4]
            Fout[m].r = scratch[5].r - scratch[4].i;
   1174e:	ee34 7a47 	vsub.f32	s14, s8, s14
            Fout[m3].i = scratch[5].i - scratch[4].r;
   11752:	ee74 7ae5 	vsub.f32	s15, s9, s11
            Fout[m].i = scratch[5].i + scratch[4].r;
   11756:	ee74 5aa5 	vadd.f32	s11, s9, s11
        if(st->inverse) {
   1175a:	b1c2      	cbz	r2, 1178e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x372>
            Fout[m].r = scratch[5].r - scratch[4].i;
   1175c:	ed81 7a00 	vstr	s14, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
   11760:	edc1 5a01 	vstr	s11, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
   11764:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
   11768:	edc3 7a01 	vstr	s15, [r3, #4]
    }while(--k);
   1176c:	3f01      	subs	r7, #1
        ++Fout;
   1176e:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
   11772:	f101 0108 	add.w	r1, r1, #8
   11776:	4455      	add	r5, sl
   11778:	f100 0008 	add.w	r0, r0, #8
   1177c:	44c8      	add	r8, r9
   1177e:	f103 0308 	add.w	r3, r3, #8
   11782:	44b6      	add	lr, r6
   11784:	f10c 0c08 	add.w	ip, ip, #8
   11788:	f47f af7f 	bne.w	1168a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x26e>
   1178c:	e6c3      	b.n	11516 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
   1178e:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
   11792:	edc1 7a01 	vstr	s15, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
   11796:	ed83 7a00 	vstr	s14, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
   1179a:	edc3 5a01 	vstr	s11, [r3, #4]
   1179e:	e7e5      	b.n	1176c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x350>
    ya = twiddles[fstride*m];
   117a0:	9a05      	ldr	r2, [sp, #20]
   117a2:	fb0a f306 	mul.w	r3, sl, r6
   117a6:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
   117aa:	00f2      	lsls	r2, r6, #3
   117ac:	ed97 2a01 	vldr	s4, [r7, #4]
   117b0:	9203      	str	r2, [sp, #12]
   117b2:	2218      	movs	r2, #24
   117b4:	4372      	muls	r2, r6
   117b6:	edd7 1a00 	vldr	s3, [r7]
    yb = twiddles[fstride*2*m];
   117ba:	9204      	str	r2, [sp, #16]
   117bc:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
   117c0:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
   117c4:	ed97 1a00 	vldr	s2, [r7]
   117c8:	edd7 2a01 	vldr	s5, [r7, #4]
    for ( u=0; u<m; ++u ) {
   117cc:	ea4f 1b06 	mov.w	fp, r6, lsl #4
   117d0:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
   117d4:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
   117d8:	eb03 100a 	add.w	r0, r3, sl, lsl #4
   117dc:	0176      	lsls	r6, r6, #5
   117de:	46ac      	mov	ip, r5
   117e0:	46ae      	mov	lr, r5
   117e2:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
   117e4:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   117e8:	eef1 0a42 	vneg.f32	s1, s4
    for ( u=0; u<m; ++u ) {
   117ec:	45ca      	cmp	sl, r9
   117ee:	f104 0408 	add.w	r4, r4, #8
   117f2:	f107 0708 	add.w	r7, r7, #8
   117f6:	f103 0308 	add.w	r3, r3, #8
   117fa:	f101 0108 	add.w	r1, r1, #8
   117fe:	f100 0008 	add.w	r0, r0, #8
   11802:	f77f ae88 	ble.w	11516 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   11806:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
   1180a:	ed57 3a01 	vldr	s7, [r7, #-4]
   1180e:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
   11812:	ed17 6a02 	vldr	s12, [r7, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   11816:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
   1181a:	ed13 5a02 	vldr	s10, [r3, #-8]
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   1181e:	ed11 4a02 	vldr	s8, [r1, #-8]
        scratch[0] = *Fout0;
   11822:	ed14 7a02 	vldr	s14, [r4, #-8]
   11826:	ed54 7a01 	vldr	s15, [r4, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   1182a:	9a03      	ldr	r2, [sp, #12]
   1182c:	ee26 3ae3 	vnmul.f32	s6, s13, s7
   11830:	4415      	add	r5, r2
   11832:	eea6 3a25 	vfma.f32	s6, s12, s11
   11836:	9a04      	ldr	r2, [sp, #16]
   11838:	ee65 5aa3 	vmul.f32	s11, s11, s7
   1183c:	eef0 9a43 	vmov.f32	s19, s6
   11840:	eee6 5a26 	vfma.f32	s11, s12, s13
    for ( u=0; u<m; ++u ) {
   11844:	f109 0901 	add.w	r9, r9, #1
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   11848:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   1184c:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   11850:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
   11854:	ee25 6ae6 	vnmul.f32	s12, s11, s13
   11858:	ee64 6aa6 	vmul.f32	s13, s9, s13
   1185c:	eea5 6a24 	vfma.f32	s12, s10, s9
   11860:	44d8      	add	r8, fp
   11862:	eee5 6a25 	vfma.f32	s13, s10, s11
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   11866:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
   1186a:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   1186e:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   11872:	ed51 6a01 	vldr	s13, [r1, #-4]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   11876:	eef0 8a46 	vmov.f32	s17, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   1187a:	ee25 6ae6 	vnmul.f32	s12, s11, s13
   1187e:	4496      	add	lr, r2
   11880:	eea4 6a05 	vfma.f32	s12, s8, s10
   11884:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   11888:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   1188c:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   11890:	ed50 5a01 	vldr	s11, [r0, #-4]
   11894:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   11898:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   1189c:	ee26 3ae5 	vnmul.f32	s6, s13, s11
   118a0:	ed10 6a02 	vldr	s12, [r0, #-8]
   118a4:	eea6 3a04 	vfma.f32	s6, s12, s8
   118a8:	44b4      	add	ip, r6
   118aa:	ee64 5a25 	vmul.f32	s11, s8, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
   118ae:	ee39 aa83 	vadd.f32	s20, s19, s6
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   118b2:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_SUB( scratch[10],scratch[1],scratch[4]);
   118b6:	ee39 3ac3 	vsub.f32	s6, s19, s6
        C_ADD( scratch[8],scratch[2],scratch[3]);
   118ba:	ee78 9a80 	vadd.f32	s19, s17, s0
   118be:	ee34 8a85 	vadd.f32	s16, s9, s10
        C_SUB( scratch[9],scratch[2],scratch[3]);
   118c2:	ee74 6ac5 	vsub.f32	s13, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
   118c6:	ee3a 5a29 	vadd.f32	s10, s20, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
   118ca:	ee33 9aa5 	vadd.f32	s18, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
   118ce:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   118d2:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->r += scratch[7].r + scratch[8].r;
   118d6:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
   118da:	ee39 5a08 	vadd.f32	s10, s18, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   118de:	eee1 4a8a 	vfma.f32	s9, s3, s20
        Fout0->i += scratch[7].i + scratch[8].i;
   118e2:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
   118e6:	ee38 6ac0 	vsub.f32	s12, s17, s0
        Fout0->i += scratch[7].i + scratch[8].i;
   118ea:	ed04 5a01 	vstr	s10, [r4, #-4]
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   118ee:	eeb0 5a67 	vmov.f32	s10, s15
        C_SUB( scratch[10],scratch[1],scratch[4]);
   118f2:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   118f6:	eea1 5a89 	vfma.f32	s10, s3, s18
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   118fa:	ee62 3aa6 	vmul.f32	s7, s5, s13
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   118fe:	eea1 7a0a 	vfma.f32	s14, s2, s20
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   11902:	eee2 3a25 	vfma.f32	s7, s4, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   11906:	eee1 4a29 	vfma.f32	s9, s2, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   1190a:	ee26 4a62 	vnmul.f32	s8, s12, s5
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   1190e:	eee1 7a09 	vfma.f32	s15, s2, s18
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   11912:	ee65 5ae2 	vnmul.f32	s11, s11, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   11916:	eea1 5a08 	vfma.f32	s10, s2, s16
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   1191a:	eee2 5a26 	vfma.f32	s11, s4, s13
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   1191e:	eea0 4a83 	vfma.f32	s8, s1, s6
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   11922:	eea1 7aa9 	vfma.f32	s14, s3, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   11926:	ee66 6a42 	vnmul.f32	s13, s12, s4
        C_SUB(*Fout1,scratch[5],scratch[6]);
   1192a:	ee34 0ae3 	vsub.f32	s0, s9, s7
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   1192e:	eee1 7a88 	vfma.f32	s15, s3, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   11932:	eee2 6a83 	vfma.f32	s13, s5, s6
        C_SUB(*Fout1,scratch[5],scratch[6]);
   11936:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
   1193a:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
   1193e:	ee35 0a44 	vsub.f32	s0, s10, s8
        C_ADD(*Fout4,scratch[5],scratch[6]);
   11942:	ee74 4aa3 	vadd.f32	s9, s9, s7
   11946:	ee35 5a04 	vadd.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
   1194a:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
   1194e:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
   11952:	ed40 4a02 	vstr	s9, [r0, #-8]
   11956:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
   1195a:	ed03 6a02 	vstr	s12, [r3, #-8]
   1195e:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
   11962:	ee77 7ae6 	vsub.f32	s15, s15, s13
        C_ADD(*Fout2,scratch[11],scratch[12]);
   11966:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
   1196a:	ed01 7a02 	vstr	s14, [r1, #-8]
   1196e:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
   11972:	e73b      	b.n	117ec <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3d0>
   11974:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
   11978:	682b      	ldr	r3, [r5, #0]
   1197a:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
   1197c:	9b03      	ldr	r3, [sp, #12]
   1197e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   11982:	4658      	mov	r0, fp
   11984:	f007 f8c8 	bl	18b18 <_Z9ei_mallocj>
   11988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
   1198c:	9207      	str	r2, [sp, #28]
   1198e:	f04f 0c00 	mov.w	ip, #0
   11992:	fb0a f206 	mul.w	r2, sl, r6
   11996:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
   11998:	9206      	str	r2, [sp, #24]
   1199a:	4483      	add	fp, r0
   1199c:	4665      	mov	r5, ip
   1199e:	45aa      	cmp	sl, r5
   119a0:	dd51      	ble.n	11a46 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x62a>
   119a2:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
   119a4:	2200      	movs	r2, #0
   119a6:	9903      	ldr	r1, [sp, #12]
   119a8:	4291      	cmp	r1, r2
   119aa:	dc38      	bgt.n	11a1e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x602>
   119ac:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
   119b0:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
   119b2:	f04f 0800 	mov.w	r8, #0
   119b6:	9903      	ldr	r1, [sp, #12]
   119b8:	4541      	cmp	r1, r8
   119ba:	dd41      	ble.n	11a40 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x624>
            Fout[ k ] = scratch[0];
   119bc:	e893 0003 	ldmia.w	r3, {r0, r1}
   119c0:	e882 0003 	stmia.w	r2, {r0, r1}
            for (q=1;q<p;++q ) {
   119c4:	f103 0008 	add.w	r0, r3, #8
            int twidx=0;
   119c8:	2100      	movs	r1, #0
            for (q=1;q<p;++q ) {
   119ca:	4558      	cmp	r0, fp
   119cc:	d031      	beq.n	11a32 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x616>
                if (twidx>=Norig) twidx-=Norig;
   119ce:	9f04      	ldr	r7, [sp, #16]
                C_MUL(t,scratch[q] , twiddles[twidx] );
   119d0:	ed90 5a01 	vldr	s10, [r0, #4]
   119d4:	edd0 5a00 	vldr	s11, [r0]
                twidx += fstride * k;
   119d8:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
   119da:	428f      	cmp	r7, r1
   119dc:	bfd8      	it	le
   119de:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
   119e0:	9f05      	ldr	r7, [sp, #20]
   119e2:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
   119e6:	ed99 6a01 	vldr	s12, [r9, #4]
   119ea:	edd9 7a00 	vldr	s15, [r9]
   119ee:	ee26 7a45 	vnmul.f32	s14, s12, s10
   119f2:	3008      	adds	r0, #8
   119f4:	eea5 7aa7 	vfma.f32	s14, s11, s15
   119f8:	ee67 7a85 	vmul.f32	s15, s15, s10
   119fc:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
   11a00:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
   11a04:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
   11a08:	ee37 7a26 	vadd.f32	s14, s14, s13
   11a0c:	ed82 7a00 	vstr	s14, [r2]
   11a10:	ed92 7a01 	vldr	s14, [r2, #4]
   11a14:	ee77 7a27 	vadd.f32	s15, s14, s15
   11a18:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
   11a1c:	e7d5      	b.n	119ca <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5ae>
            scratch[q1] = Fout[ k  ];
   11a1e:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
   11a22:	c903      	ldmia	r1, {r0, r1}
   11a24:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
   11a28:	e888 0003 	stmia.w	r8, {r0, r1}
            k += m;
   11a2c:	44d6      	add	lr, sl
        for ( q1=0 ; q1<p ; ++q1 ) {
   11a2e:	3201      	adds	r2, #1
   11a30:	e7b9      	b.n	119a6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x58a>
        for ( q1=0 ; q1<p ; ++q1 ) {
   11a32:	9907      	ldr	r1, [sp, #28]
   11a34:	440a      	add	r2, r1
   11a36:	9906      	ldr	r1, [sp, #24]
   11a38:	f108 0801 	add.w	r8, r8, #1
   11a3c:	448e      	add	lr, r1
   11a3e:	e7ba      	b.n	119b6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x59a>
    for ( u=0; u<m; ++u ) {
   11a40:	3501      	adds	r5, #1
   11a42:	44b4      	add	ip, r6
   11a44:	e7ab      	b.n	1199e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x582>
    KISS_FFT_TMP_FREE(scratch);
   11a46:	4618      	mov	r0, r3
}
   11a48:	b009      	add	sp, #36	; 0x24
   11a4a:	ecbd 8b08 	vpop	{d8-d11}
   11a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
   11a52:	f007 b865 	b.w	18b20 <_Z7ei_freePv>
   11a56:	bf00      	nop

00011a58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   11a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a5c:	b0a1      	sub	sp, #132	; 0x84
   11a5e:	4698      	mov	r8, r3
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
   11a60:	6943      	ldr	r3, [r0, #20]
   11a62:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   11a64:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   11a68:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   11a6a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   11a6e:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   11a70:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   11a74:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   11a76:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   11a7a:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   11a7c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   11a80:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   11a82:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   11a86:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
   11a88:	69c3      	ldr	r3, [r0, #28]
   11a8a:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
   11a8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   11a8e:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
   11a90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   11a92:	930b      	str	r3, [sp, #44]	; 0x2c
    int8_t* output_data) {
   11a94:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   11a98:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   11a9c:	4293      	cmp	r3, r2
    int8_t* output_data) {
   11a9e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
   11aa0:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   11aa2:	dd01      	ble.n	11aa8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
   11aa4:	f00a f915 	bl	1bcd2 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   11aa8:	f8d8 3000 	ldr.w	r3, [r8]
   11aac:	2b04      	cmp	r3, #4
   11aae:	d1f9      	bne.n	11aa4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   11ab0:	6833      	ldr	r3, [r6, #0]
   11ab2:	2b04      	cmp	r3, #4
   11ab4:	d1f6      	bne.n	11aa4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   11ab6:	683b      	ldr	r3, [r7, #0]
   11ab8:	2b04      	cmp	r3, #4
   11aba:	d1f3      	bne.n	11aa4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   11abc:	2300      	movs	r3, #0
   11abe:	4619      	mov	r1, r3
   11ac0:	463a      	mov	r2, r7
   11ac2:	4640      	mov	r0, r8
   11ac4:	f007 f9d9 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   11ac8:	2303      	movs	r3, #3
   11aca:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   11acc:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   11ace:	4632      	mov	r2, r6
   11ad0:	4640      	mov	r0, r8
   11ad2:	f007 f9d2 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   11ad6:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   11ad8:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   11ada:	463a      	mov	r2, r7
   11adc:	2100      	movs	r1, #0
   11ade:	4630      	mov	r0, r6
   11ae0:	f007 f9cb 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   11ae4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   11ae6:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   11ae8:	b12b      	cbz	r3, 11af6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   11aea:	982d      	ldr	r0, [sp, #180]	; 0xb4
   11aec:	f007 f993 	bl	18e16 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   11af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11af2:	4298      	cmp	r0, r3
   11af4:	d1d6      	bne.n	11aa4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
   11af6:	2101      	movs	r1, #1
   11af8:	4640      	mov	r0, r8
   11afa:	f007 f97b 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   11afe:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   11b00:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   11b02:	4640      	mov	r0, r8
   11b04:	f007 f976 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   11b08:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   11b0a:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
   11b0c:	4630      	mov	r0, r6
   11b0e:	f007 f971 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   11b12:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   11b14:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   11b16:	4630      	mov	r0, r6
   11b18:	f007 f96c 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   11b1c:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   11b1e:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   11b20:	4638      	mov	r0, r7
   11b22:	f007 f967 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   11b26:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   11b28:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   11b2a:	4638      	mov	r0, r7
   11b2c:	f007 f962 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   11b30:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   11b34:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
   11b36:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11b38:	459b      	cmp	fp, r3
   11b3a:	f280 80d3 	bge.w	11ce4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28c>
   11b3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11b40:	425b      	negs	r3, r3
   11b42:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   11b44:	2300      	movs	r3, #0
   11b46:	9304      	str	r3, [sp, #16]
   11b48:	9b04      	ldr	r3, [sp, #16]
   11b4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   11b4c:	4293      	cmp	r3, r2
   11b4e:	f280 80c6 	bge.w	11cde <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
   11b52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11b54:	425b      	negs	r3, r3
   11b56:	9308      	str	r3, [sp, #32]
   11b58:	2300      	movs	r3, #0
   11b5a:	9305      	str	r3, [sp, #20]
   11b5c:	9b05      	ldr	r3, [sp, #20]
   11b5e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   11b60:	4293      	cmp	r3, r2
   11b62:	f280 80b4 	bge.w	11cce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x276>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   11b66:	2500      	movs	r5, #0
   11b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11b6a:	429d      	cmp	r5, r3
   11b6c:	f280 80a7 	bge.w	11cbe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x266>
          int32_t acc = 0;
   11b70:	2400      	movs	r4, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   11b72:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   11b76:	9406      	str	r4, [sp, #24]
   11b78:	9b06      	ldr	r3, [sp, #24]
   11b7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11b7c:	4293      	cmp	r3, r2
   11b7e:	da41      	bge.n	11c04 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   11b80:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   11b82:	f8dd a020 	ldr.w	sl, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   11b86:	9307      	str	r3, [sp, #28]
   11b88:	9b07      	ldr	r3, [sp, #28]
   11b8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11b8c:	4293      	cmp	r3, r2
   11b8e:	da33      	bge.n	11bf8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   11b90:	f1ba 0f00 	cmp.w	sl, #0
   11b94:	db2a      	blt.n	11bec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
   11b96:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11b98:	4553      	cmp	r3, sl
   11b9a:	dd27      	ble.n	11bec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
   11b9c:	f1b9 0f00 	cmp.w	r9, #0
   11ba0:	db24      	blt.n	11bec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
   11ba2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11ba4:	454b      	cmp	r3, r9
   11ba6:	dd21      	ble.n	11bec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
   11ba8:	2300      	movs	r3, #0
   11baa:	9303      	str	r3, [sp, #12]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   11bac:	9b03      	ldr	r3, [sp, #12]
   11bae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   11bb0:	4293      	cmp	r3, r2
   11bb2:	da1b      	bge.n	11bec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
   11bb4:	9300      	str	r3, [sp, #0]
   11bb6:	464a      	mov	r2, r9
   11bb8:	4653      	mov	r3, sl
   11bba:	4659      	mov	r1, fp
   11bbc:	4640      	mov	r0, r8
   11bbe:	f007 f93a 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
   11bc2:	9b03      	ldr	r3, [sp, #12]
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
   11bc4:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
   11bc6:	9300      	str	r3, [sp, #0]
   11bc8:	4629      	mov	r1, r5
   11bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11bce:	4630      	mov	r0, r6
   11bd0:	f007 f931 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   11bd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11bd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   11bd8:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
   11bda:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11bdc:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
   11bde:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   11be0:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
   11be2:	fb02 4403 	mla	r4, r2, r3, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   11be6:	9b03      	ldr	r3, [sp, #12]
   11be8:	3301      	adds	r3, #1
   11bea:	e7de      	b.n	11baa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   11bec:	9b07      	ldr	r3, [sp, #28]
   11bee:	3301      	adds	r3, #1
   11bf0:	9307      	str	r3, [sp, #28]
   11bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11bf4:	449a      	add	sl, r3
   11bf6:	e7c7      	b.n	11b88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x130>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   11bf8:	9b06      	ldr	r3, [sp, #24]
   11bfa:	3301      	adds	r3, #1
   11bfc:	9306      	str	r3, [sp, #24]
   11bfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11c00:	4499      	add	r9, r3
   11c02:	e7b9      	b.n	11b78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x120>
              }
            }
          }

          if (bias_data) {
   11c04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   11c06:	b113      	cbz	r3, 11c0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
   11c08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   11c0c:	441c      	add	r4, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   11c0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   11c10:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
   11c14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11c16:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
   11c1a:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   11c1e:	2b00      	cmp	r3, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   11c20:	fa04 f401 	lsl.w	r4, r4, r1
  int right_shift = shift > 0 ? 0 : -shift;
   11c24:	bfd4      	ite	le
   11c26:	425b      	negle	r3, r3
   11c28:	2300      	movgt	r3, #0
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   11c2a:	42a2      	cmp	r2, r4
   11c2c:	d121      	bne.n	11c72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
   11c2e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
   11c32:	4248      	negs	r0, r1
   11c34:	4148      	adcs	r0, r1
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
   11c36:	fb84 4202 	smull	r4, r2, r4, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   11c3a:	2a00      	cmp	r2, #0
   11c3c:	492b      	ldr	r1, [pc, #172]	; (11cec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>)
   11c3e:	bfa8      	it	ge
   11c40:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   11c44:	b9b8      	cbnz	r0, 11c76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   11c46:	190c      	adds	r4, r1, r4
   11c48:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   11c4c:	2a00      	cmp	r2, #0
   11c4e:	da04      	bge.n	11c5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
   11c50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11c54:	1864      	adds	r4, r4, r1
   11c56:	f142 0200 	adc.w	r2, r2, #0
   11c5a:	0fe4      	lsrs	r4, r4, #31
   11c5c:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
   11c60:	2b1f      	cmp	r3, #31
   11c62:	dd0b      	ble.n	11c7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x224>
   11c64:	4b22      	ldr	r3, [pc, #136]	; (11cf0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x298>)
   11c66:	4a23      	ldr	r2, [pc, #140]	; (11cf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29c>)
   11c68:	4823      	ldr	r0, [pc, #140]	; (11cf8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>)
   11c6a:	f240 1167 	movw	r1, #359	; 0x167
   11c6e:	f003 ffeb 	bl	15c48 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   11c72:	2000      	movs	r0, #0
   11c74:	e7df      	b.n	11c36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
   11c76:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   11c7a:	e7f1      	b.n	11c60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   11c7c:	2201      	movs	r2, #1
   11c7e:	409a      	lsls	r2, r3
   11c80:	3a01      	subs	r2, #1
  return a & b;
   11c82:	ea02 0104 	and.w	r1, r2, r4
  return a >> offset;
   11c86:	1052      	asrs	r2, r2, #1
  return a + b;
   11c88:	eb02 72d4 	add.w	r2, r2, r4, lsr #31
  return a >> offset;
   11c8c:	411c      	asrs	r4, r3
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
   11c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   11c90:	9500      	str	r5, [sp, #0]
  return a + b;
   11c92:	4291      	cmp	r1, r2
   11c94:	bfc8      	it	gt
   11c96:	3401      	addgt	r4, #1
          acc += output_offset;
   11c98:	441c      	add	r4, r3
   11c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11c9c:	429c      	cmp	r4, r3
   11c9e:	bfb8      	it	lt
   11ca0:	461c      	movlt	r4, r3
   11ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ca4:	429c      	cmp	r4, r3
   11ca6:	bfa8      	it	ge
   11ca8:	461c      	movge	r4, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   11caa:	4659      	mov	r1, fp
   11cac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11cb0:	4638      	mov	r0, r7
   11cb2:	f007 f8c0 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   11cb6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   11cb8:	3501      	adds	r5, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   11cba:	541c      	strb	r4, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   11cbc:	e754      	b.n	11b68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x110>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   11cbe:	9b05      	ldr	r3, [sp, #20]
   11cc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11cc2:	3301      	adds	r3, #1
   11cc4:	9305      	str	r3, [sp, #20]
   11cc6:	9b08      	ldr	r3, [sp, #32]
   11cc8:	4413      	add	r3, r2
   11cca:	9308      	str	r3, [sp, #32]
   11ccc:	e746      	b.n	11b5c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x104>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   11cce:	9b04      	ldr	r3, [sp, #16]
   11cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11cd2:	3301      	adds	r3, #1
   11cd4:	9304      	str	r3, [sp, #16]
   11cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11cd8:	4413      	add	r3, r2
   11cda:	9309      	str	r3, [sp, #36]	; 0x24
   11cdc:	e734      	b.n	11b48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf0>
  for (int batch = 0; batch < batches; ++batch) {
   11cde:	f10b 0b01 	add.w	fp, fp, #1
   11ce2:	e728      	b.n	11b36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xde>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   11ce4:	b021      	add	sp, #132	; 0x84
   11ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cea:	bf00      	nop
   11cec:	c0000001 	.word	0xc0000001
   11cf0:	0003e10c 	.word	0x0003e10c
   11cf4:	0003e11b 	.word	0x0003e11b
   11cf8:	0003e170 	.word	0x0003e170

00011cfc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   11cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   11d00:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   11d02:	b0ad      	sub	sp, #180	; 0xb4
   11d04:	4604      	mov	r4, r0
   11d06:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   11d08:	b90e      	cbnz	r6, 11d0e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   11d0a:	f009 ffe2 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   11d0e:	f8d1 8014 	ldr.w	r8, [r1, #20]
   11d12:	f1b8 0f00 	cmp.w	r8, #0
   11d16:	d0f8      	beq.n	11d0a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  int32_t buf_size = 0;
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
   11d18:	4b5f      	ldr	r3, [pc, #380]	; (11e98 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
   11d1a:	681a      	ldr	r2, [r3, #0]
   11d1c:	f008 ff26 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   11d20:	4607      	mov	r7, r0
   11d22:	b960      	cbnz	r0, 11d3e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
   11d24:	4b5d      	ldr	r3, [pc, #372]	; (11e9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
   11d26:	6965      	ldr	r5, [r4, #20]
   11d28:	9300      	str	r3, [sp, #0]
   11d2a:	233d      	movs	r3, #61	; 0x3d
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
   11d2c:	4a5c      	ldr	r2, [pc, #368]	; (11ea0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
   11d2e:	495d      	ldr	r1, [pc, #372]	; (11ea4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
   11d30:	4620      	mov	r0, r4
   11d32:	47a8      	blx	r5
   11d34:	2501      	movs	r5, #1
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}
   11d36:	4628      	mov	r0, r5
   11d38:	b02d      	add	sp, #180	; 0xb4
   11d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
   11d3e:	4b5a      	ldr	r3, [pc, #360]	; (11ea8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
   11d40:	4629      	mov	r1, r5
   11d42:	681a      	ldr	r2, [r3, #0]
   11d44:	4620      	mov	r0, r4
   11d46:	f008 ff11 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   11d4a:	4682      	mov	sl, r0
   11d4c:	b920      	cbnz	r0, 11d58 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
   11d4e:	4b57      	ldr	r3, [pc, #348]	; (11eac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
   11d50:	9300      	str	r3, [sp, #0]
   11d52:	6965      	ldr	r5, [r4, #20]
   11d54:	233f      	movs	r3, #63	; 0x3f
   11d56:	e7e9      	b.n	11d2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   11d58:	4b55      	ldr	r3, [pc, #340]	; (11eb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>)
   11d5a:	4629      	mov	r1, r5
   11d5c:	681a      	ldr	r2, [r3, #0]
   11d5e:	4620      	mov	r0, r4
   11d60:	f008 ff07 	bl	1ab72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   11d64:	4681      	mov	r9, r0
   11d66:	b920      	cbnz	r0, 11d72 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
   11d68:	4b52      	ldr	r3, [pc, #328]	; (11eb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b8>)
   11d6a:	9300      	str	r3, [sp, #0]
   11d6c:	6965      	ldr	r5, [r4, #20]
   11d6e:	2341      	movs	r3, #65	; 0x41
   11d70:	e7dc      	b.n	11d2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  RuntimeShape input_shape = GetTensorShape(input);
   11d72:	4639      	mov	r1, r7
   11d74:	a816      	add	r0, sp, #88	; 0x58
   11d76:	f007 f88f 	bl	18e98 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
   11d7a:	4649      	mov	r1, r9
   11d7c:	a81c      	add	r0, sp, #112	; 0x70
   11d7e:	f007 f88b 	bl	18e98 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   11d82:	2300      	movs	r3, #0
   11d84:	4619      	mov	r1, r3
   11d86:	aa1c      	add	r2, sp, #112	; 0x70
   11d88:	a816      	add	r0, sp, #88	; 0x58
   11d8a:	f007 f876 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.h = input->dims->data[1];
   11d8e:	68bb      	ldr	r3, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   11d90:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.h = input->dims->data[1];
   11d92:	689a      	ldr	r2, [r3, #8]
  input_dims.w = input->dims->data[2];
   11d94:	68db      	ldr	r3, [r3, #12]
  input_dims.h = input->dims->data[1];
   11d96:	920b      	str	r2, [sp, #44]	; 0x2c
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   11d98:	4683      	mov	fp, r0
  input_dims.c = input_shape.Dims(3);
   11d9a:	2103      	movs	r1, #3
   11d9c:	a816      	add	r0, sp, #88	; 0x58
  input_dims.w = input->dims->data[2];
   11d9e:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims.c = input_shape.Dims(3);
   11da0:	f007 f828 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.n = output_shape.Dims(3);
   11da4:	2103      	movs	r1, #3
  input_dims.c = input_shape.Dims(3);
   11da6:	900d      	str	r0, [sp, #52]	; 0x34
   11da8:	9009      	str	r0, [sp, #36]	; 0x24
  filter_dims.n = output_shape.Dims(3);
   11daa:	a81c      	add	r0, sp, #112	; 0x70
   11dac:	f007 f822 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = filter->dims->data[1];
   11db0:	f8da a008 	ldr.w	sl, [sl, #8]
  filter_dims.c = input_dims.c;
   11db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  filter_dims.h = filter->dims->data[1];
   11db6:	f8da 2008 	ldr.w	r2, [sl, #8]
   11dba:	920f      	str	r2, [sp, #60]	; 0x3c
  filter_dims.w = filter->dims->data[2];
   11dbc:	f8da 200c 	ldr.w	r2, [sl, #12]
  filter_dims.n = output_shape.Dims(3);
   11dc0:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.n = input_dims.n;
   11dc2:	e9cd 3b11 	strd	r3, fp, [sp, #68]	; 0x44
  output_dims.h = output->dims->data[1];
   11dc6:	f8d9 3008 	ldr.w	r3, [r9, #8]
  filter_dims.w = filter->dims->data[2];
   11dca:	9210      	str	r2, [sp, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
   11dcc:	2103      	movs	r1, #3
  output_dims.h = output->dims->data[1];
   11dce:	689a      	ldr	r2, [r3, #8]
  output_dims.w = output->dims->data[2];
   11dd0:	68db      	ldr	r3, [r3, #12]
  output_dims.h = output->dims->data[1];
   11dd2:	9213      	str	r2, [sp, #76]	; 0x4c
  output_dims.c = output_shape.Dims(3);
   11dd4:	a81c      	add	r0, sp, #112	; 0x70
  output_dims.w = output->dims->data[2];
   11dd6:	9314      	str	r3, [sp, #80]	; 0x50
  output_dims.c = output_shape.Dims(3);
   11dd8:	f007 f80c 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
   11ddc:	4b36      	ldr	r3, [pc, #216]	; (11eb8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>)
  output_dims.c = output_shape.Dims(3);
   11dde:	9015      	str	r0, [sp, #84]	; 0x54
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
   11de0:	681b      	ldr	r3, [r3, #0]
   11de2:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   11de6:	4620      	mov	r0, r4
   11de8:	f8da 1004 	ldr.w	r1, [sl, #4]
   11dec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11dee:	0089      	lsls	r1, r1, #2
   11df0:	9109      	str	r1, [sp, #36]	; 0x24
   11df2:	4798      	blx	r3
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   11df4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11df6:	9909      	ldr	r1, [sp, #36]	; 0x24
  data->reference_op_data.per_channel_output_multiplier =
   11df8:	6270      	str	r0, [r6, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
   11dfa:	4620      	mov	r0, r4
   11dfc:	4798      	blx	r3
  data->reference_op_data.per_channel_output_shift =
   11dfe:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
   11e00:	9606      	str	r6, [sp, #24]
   11e02:	783b      	ldrb	r3, [r7, #0]
   11e04:	9305      	str	r3, [sp, #20]
   11e06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11e08:	9304      	str	r3, [sp, #16]
   11e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11e0c:	9303      	str	r3, [sp, #12]
   11e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11e10:	9302      	str	r3, [sp, #8]
   11e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11e14:	9301      	str	r3, [sp, #4]
   11e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11e18:	9300      	str	r3, [sp, #0]
   11e1a:	4629      	mov	r1, r5
   11e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11e1e:	4642      	mov	r2, r8
   11e20:	4620      	mov	r0, r4
   11e22:	f000 fb2b 	bl	1247c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
   11e26:	4605      	mov	r5, r0
   11e28:	2800      	cmp	r0, #0
   11e2a:	d12a      	bne.n	11e82 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
  if (input->type == kTfLiteInt8) {
   11e2c:	783b      	ldrb	r3, [r7, #0]
   11e2e:	2b09      	cmp	r3, #9
   11e30:	d12e      	bne.n	11e90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>
    conv_params.input_offset = -input->params.zero_point;
   11e32:	693b      	ldr	r3, [r7, #16]
   11e34:	425b      	negs	r3, r3
   11e36:	9322      	str	r3, [sp, #136]	; 0x88
    conv_params.output_offset = output->params.zero_point;
   11e38:	f8d9 3010 	ldr.w	r3, [r9, #16]
   11e3c:	9323      	str	r3, [sp, #140]	; 0x8c
    conv_params.stride.h = params.stride_height;
   11e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11e42:	9325      	str	r3, [sp, #148]	; 0x94
    conv_params.stride.w = params.stride_width;
   11e44:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11e48:	9324      	str	r3, [sp, #144]	; 0x90
    conv_params.dilation.h = params.dilation_height_factor;
   11e4a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   11e4e:	9329      	str	r3, [sp, #164]	; 0xa4
    conv_params.dilation.w = params.dilation_width_factor;
   11e50:	f8d8 3010 	ldr.w	r3, [r8, #16]
   11e54:	9328      	str	r3, [sp, #160]	; 0xa0
    conv_params.padding.h = data->reference_op_data.padding.height;
   11e56:	6873      	ldr	r3, [r6, #4]
   11e58:	9327      	str	r3, [sp, #156]	; 0x9c
    conv_params.padding.w = data->reference_op_data.padding.width;
   11e5a:	6833      	ldr	r3, [r6, #0]
   11e5c:	9326      	str	r3, [sp, #152]	; 0x98
    conv_params.activation.min = data->reference_op_data.output_activation_min;
   11e5e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11e60:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.activation.max = data->reference_op_data.output_activation_max;
   11e62:	6b33      	ldr	r3, [r6, #48]	; 0x30
   11e64:	932b      	str	r3, [sp, #172]	; 0xac
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
   11e66:	a90a      	add	r1, sp, #40	; 0x28
   11e68:	ab12      	add	r3, sp, #72	; 0x48
   11e6a:	aa0e      	add	r2, sp, #56	; 0x38
   11e6c:	a822      	add	r0, sp, #136	; 0x88
   11e6e:	f008 f958 	bl	1a122 <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
   11e72:	1e01      	subs	r1, r0, #0
   11e74:	dd0c      	ble.n	11e90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   11e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11e78:	f106 0234 	add.w	r2, r6, #52	; 0x34
   11e7c:	4620      	mov	r0, r4
   11e7e:	4798      	blx	r3
   11e80:	4605      	mov	r5, r0
  RuntimeShape output_shape = GetTensorShape(output);
   11e82:	a81c      	add	r0, sp, #112	; 0x70
   11e84:	f006 ffab 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
   11e88:	a816      	add	r0, sp, #88	; 0x58
   11e8a:	f006 ffa8 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
   11e8e:	e752      	b.n	11d36 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    data->buffer_idx = -1;
   11e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e94:	6373      	str	r3, [r6, #52]	; 0x34
   11e96:	e7f4      	b.n	11e82 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
   11e98:	00036168 	.word	0x00036168
   11e9c:	0003e276 	.word	0x0003e276
   11ea0:	0003e1eb 	.word	0x0003e1eb
   11ea4:	0003e25f 	.word	0x0003e25f
   11ea8:	00036170 	.word	0x00036170
   11eac:	0003e287 	.word	0x0003e287
   11eb0:	0003616c 	.word	0x0003616c
   11eb4:	0003e299 	.word	0x0003e299
   11eb8:	00036174 	.word	0x00036174

00011ebc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   11ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ec0:	ed2d 8b04 	vpush	{d8-d9}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   11ec4:	4b9e      	ldr	r3, [pc, #632]	; (12140 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   11ec6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
}

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
   11eca:	681a      	ldr	r2, [r3, #0]
   11ecc:	460d      	mov	r5, r1
   11ece:	4604      	mov	r4, r0
   11ed0:	f007 f804 	bl	18edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
   11ed4:	4b9b      	ldr	r3, [pc, #620]	; (12144 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>)
   11ed6:	4607      	mov	r7, r0
   11ed8:	681a      	ldr	r2, [r3, #0]
   11eda:	4629      	mov	r1, r5
   11edc:	4620      	mov	r0, r4
   11ede:	f006 fffd 	bl	18edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   11ee2:	682b      	ldr	r3, [r5, #0]
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   11ee4:	681b      	ldr	r3, [r3, #0]
   11ee6:	2b03      	cmp	r3, #3
   11ee8:	4680      	mov	r8, r0
   11eea:	d109      	bne.n	11f00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44>
   11eec:	4b96      	ldr	r3, [pc, #600]	; (12148 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28c>)
   11eee:	4629      	mov	r1, r5
   11ef0:	681a      	ldr	r2, [r3, #0]
   11ef2:	4620      	mov	r0, r4
   11ef4:	f006 fff2 	bl	18edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   11ef8:	4606      	mov	r6, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
   11efa:	b91c      	cbnz	r4, 11f04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x48>
   11efc:	f009 fee9 	bl	1bcd2 <abort>
   11f00:	2600      	movs	r6, #0
   11f02:	e7fa      	b.n	11efa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e>
  TFLITE_DCHECK(node != nullptr);
  return context->GetEvalTensor(context, node->outputs->data[index]);
   11f04:	4a91      	ldr	r2, [pc, #580]	; (1214c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>)
   11f06:	686b      	ldr	r3, [r5, #4]
   11f08:	6812      	ldr	r2, [r2, #0]
   11f0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11f0e:	4620      	mov	r0, r4
   11f10:	6859      	ldr	r1, [r3, #4]
   11f12:	6d62      	ldr	r2, [r4, #84]	; 0x54
   11f14:	4790      	blx	r2
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
   11f16:	6969      	ldr	r1, [r5, #20]
   11f18:	4681      	mov	r9, r0
   11f1a:	2900      	cmp	r1, #0
   11f1c:	d0ee      	beq.n	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
   11f1e:	692d      	ldr	r5, [r5, #16]
   11f20:	2d00      	cmp	r5, #0
   11f22:	d0eb      	beq.n	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   11f24:	7a3b      	ldrb	r3, [r7, #8]
   11f26:	7a02      	ldrb	r2, [r0, #8]
   11f28:	4293      	cmp	r3, r2
   11f2a:	d00e      	beq.n	11f4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8e>
   11f2c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   11f30:	4b87      	ldr	r3, [pc, #540]	; (12150 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x294>)
   11f32:	9301      	str	r3, [sp, #4]
   11f34:	4b87      	ldr	r3, [pc, #540]	; (12154 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x298>)
   11f36:	9300      	str	r3, [sp, #0]
   11f38:	6965      	ldr	r5, [r4, #20]
   11f3a:	4a87      	ldr	r2, [pc, #540]	; (12158 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
   11f3c:	4987      	ldr	r1, [pc, #540]	; (1215c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
   11f3e:	f44f 7386 	mov.w	r3, #268	; 0x10c
   11f42:	4620      	mov	r0, r4
   11f44:	47a8      	blx	r5
                                     bias, output, nullptr);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   11f46:	2001      	movs	r0, #1
   11f48:	e157      	b.n	121fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   11f4a:	f898 0008 	ldrb.w	r0, [r8, #8]
   11f4e:	4298      	cmp	r0, r3
   11f50:	d004      	beq.n	11f5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
   11f52:	6963      	ldr	r3, [r4, #20]
   11f54:	4982      	ldr	r1, [pc, #520]	; (12160 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a4>)
   11f56:	4620      	mov	r0, r4
   11f58:	4798      	blx	r3
   11f5a:	e7f4      	b.n	11f46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  switch (input->type) {  // Already know in/out types are same.
   11f5c:	2801      	cmp	r0, #1
   11f5e:	d00b      	beq.n	11f78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
   11f60:	2809      	cmp	r0, #9
   11f62:	f000 8150 	beq.w	12206 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x34a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   11f66:	6965      	ldr	r5, [r4, #20]
   11f68:	f002 ff44 	bl	14df4 <TfLiteTypeGetName>
   11f6c:	7a3b      	ldrb	r3, [r7, #8]
   11f6e:	497d      	ldr	r1, [pc, #500]	; (12164 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a8>)
   11f70:	4602      	mov	r2, r0
   11f72:	4620      	mov	r0, r4
   11f74:	47a8      	blx	r5
   11f76:	e7e6      	b.n	11f46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
          ConvParamsFloat(params, data.reference_op_data),
   11f78:	462a      	mov	r2, r5
   11f7a:	a886      	add	r0, sp, #536	; 0x218
   11f7c:	f000 fa4a 	bl	12414 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
   11f80:	4639      	mov	r1, r7
   11f82:	a834      	add	r0, sp, #208	; 0xd0
   11f84:	f007 f86c 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  return reinterpret_cast<const T*>(tensor->data.raw);
   11f88:	683b      	ldr	r3, [r7, #0]
   11f8a:	931f      	str	r3, [sp, #124]	; 0x7c
          tflite::micro::GetTensorShape(filter),
   11f8c:	4641      	mov	r1, r8
   11f8e:	a83a      	add	r0, sp, #232	; 0xe8
   11f90:	f007 f866 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   11f94:	f8d8 3000 	ldr.w	r3, [r8]
   11f98:	931e      	str	r3, [sp, #120]	; 0x78
          tflite::micro::GetTensorShape(bias),
   11f9a:	4631      	mov	r1, r6
   11f9c:	a840      	add	r0, sp, #256	; 0x100
   11f9e:	f007 f85f 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   11fa2:	2e00      	cmp	r6, #0
   11fa4:	d0aa      	beq.n	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  return reinterpret_cast<const T*>(tensor->data.raw);
   11fa6:	6833      	ldr	r3, [r6, #0]
   11fa8:	930a      	str	r3, [sp, #40]	; 0x28
          tflite::micro::GetTensorShape(output),
   11faa:	4649      	mov	r1, r9
   11fac:	a846      	add	r0, sp, #280	; 0x118
   11fae:	f007 f857 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   11fb2:	f8d9 3000 	ldr.w	r3, [r9]
   11fb6:	930e      	str	r3, [sp, #56]	; 0x38
          tflite::micro::GetTensorShape(nullptr), nullptr);
   11fb8:	2100      	movs	r1, #0
   11fba:	a84c      	add	r0, sp, #304	; 0x130
   11fbc:	f007 f850 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
  const int stride_width = params.stride_width;
   11fc0:	f9bd 3222 	ldrsh.w	r3, [sp, #546]	; 0x222
   11fc4:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
   11fc6:	f9bd 3224 	ldrsh.w	r3, [sp, #548]	; 0x224
   11fca:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
   11fcc:	f9bd 3226 	ldrsh.w	r3, [sp, #550]	; 0x226
   11fd0:	9311      	str	r3, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
   11fd2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
   11fd6:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
   11fd8:	f9bd 321a 	ldrsh.w	r3, [sp, #538]	; 0x21a
   11fdc:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   11fde:	f9bd 321c 	ldrsh.w	r3, [sp, #540]	; 0x21c
   11fe2:	9314      	str	r3, [sp, #80]	; 0x50
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   11fe4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
  const float output_activation_min = params.float_activation_min;
   11fe6:	ed9d 9a92 	vldr	s18, [sp, #584]	; 0x248
  const float output_activation_max = params.float_activation_max;
   11fea:	eddd 9a93 	vldr	s19, [sp, #588]	; 0x24c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   11fee:	2b04      	cmp	r3, #4
   11ff0:	d184      	bne.n	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   11ff2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   11ff4:	2b04      	cmp	r3, #4
   11ff6:	d181      	bne.n	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   11ff8:	9b46      	ldr	r3, [sp, #280]	; 0x118
   11ffa:	2b04      	cmp	r3, #4
   11ffc:	f47f af7e 	bne.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   12000:	2300      	movs	r3, #0
   12002:	4619      	mov	r1, r3
   12004:	aa46      	add	r2, sp, #280	; 0x118
   12006:	a834      	add	r0, sp, #208	; 0xd0
   12008:	f006 ff37 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   1200c:	2303      	movs	r3, #3
   1200e:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   12010:	9015      	str	r0, [sp, #84]	; 0x54
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   12012:	aa3a      	add	r2, sp, #232	; 0xe8
   12014:	a834      	add	r0, sp, #208	; 0xd0
   12016:	f006 ff30 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1201a:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   1201c:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1201e:	aa46      	add	r2, sp, #280	; 0x118
   12020:	2100      	movs	r1, #0
   12022:	a83a      	add	r0, sp, #232	; 0xe8
   12024:	f006 ff29 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   12028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1202a:	900d      	str	r0, [sp, #52]	; 0x34
  if (bias_data) {
   1202c:	b133      	cbz	r3, 1203c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   1202e:	a840      	add	r0, sp, #256	; 0x100
   12030:	f006 fef1 	bl	18e16 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   12034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12036:	4283      	cmp	r3, r0
   12038:	f47f af60 	bne.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  }
  const int input_height = input_shape.Dims(1);
   1203c:	2101      	movs	r1, #1
   1203e:	a834      	add	r0, sp, #208	; 0xd0
   12040:	f006 fed8 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   12044:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   12046:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_width = input_shape.Dims(2);
   12048:	a834      	add	r0, sp, #208	; 0xd0
   1204a:	f006 fed3 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   1204e:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   12050:	9018      	str	r0, [sp, #96]	; 0x60
  const int filter_height = filter_shape.Dims(1);
   12052:	a83a      	add	r0, sp, #232	; 0xe8
   12054:	f006 fece 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   12058:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   1205a:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_width = filter_shape.Dims(2);
   1205c:	a83a      	add	r0, sp, #232	; 0xe8
   1205e:	f006 fec9 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   12062:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   12064:	901a      	str	r0, [sp, #104]	; 0x68
  const int output_height = output_shape.Dims(1);
   12066:	a846      	add	r0, sp, #280	; 0x118
   12068:	f006 fec4 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1206c:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1206e:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_width = output_shape.Dims(2);
   12070:	a846      	add	r0, sp, #280	; 0x118
   12072:	f006 febf 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   12076:	2500      	movs	r5, #0
  const int output_width = output_shape.Dims(2);
   12078:	901c      	str	r0, [sp, #112]	; 0x70
  for (int batch = 0; batch < batches; ++batch) {
   1207a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1207c:	42ab      	cmp	r3, r5
   1207e:	f340 80ac 	ble.w	121da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31e>
   12082:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12084:	425b      	negs	r3, r3
   12086:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int out_y = 0; out_y < output_height; ++out_y) {
   12088:	f04f 0900 	mov.w	r9, #0
   1208c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1208e:	454b      	cmp	r3, r9
   12090:	f340 80a1 	ble.w	121d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31a>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
   12094:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12096:	425b      	negs	r3, r3
   12098:	930c      	str	r3, [sp, #48]	; 0x30
   1209a:	f04f 0800 	mov.w	r8, #0
   1209e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   120a0:	4543      	cmp	r3, r8
   120a2:	f340 8091 	ble.w	121c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30c>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   120a6:	2400      	movs	r4, #0
   120a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   120aa:	42a3      	cmp	r3, r4
   120ac:	f340 8085 	ble.w	121ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fe>
   120b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
          float total = 0.f;
   120b2:	eddf 8a2d 	vldr	s17, [pc, #180]	; 12168 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   120b6:	f04f 0a00 	mov.w	sl, #0
   120ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
   120bc:	4553      	cmp	r3, sl
   120be:	dd55      	ble.n	1216c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   120c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   120c2:	f04f 0b00 	mov.w	fp, #0
   120c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   120c8:	455b      	cmp	r3, fp
   120ca:	dd34      	ble.n	12136 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   120cc:	2f00      	cmp	r7, #0
   120ce:	db2d      	blt.n	1212c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
   120d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   120d2:	42bb      	cmp	r3, r7
   120d4:	dd2a      	ble.n	1212c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
   120d6:	2e00      	cmp	r6, #0
   120d8:	db28      	blt.n	1212c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
   120da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   120dc:	42b3      	cmp	r3, r6
   120de:	dd25      	ble.n	1212c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
   120e0:	2300      	movs	r3, #0
   120e2:	9309      	str	r3, [sp, #36]	; 0x24

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   120e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   120e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   120e8:	4293      	cmp	r3, r2
   120ea:	dd1f      	ble.n	1212c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
                float input_value = input_data[Offset(input_shape, batch, in_y,
   120ec:	9200      	str	r2, [sp, #0]
   120ee:	463b      	mov	r3, r7
   120f0:	4632      	mov	r2, r6
   120f2:	4629      	mov	r1, r5
   120f4:	a834      	add	r0, sp, #208	; 0xd0
   120f6:	f006 fe9e 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                float filter_value = filter_data[Offset(
   120fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
                float input_value = input_data[Offset(input_shape, batch, in_y,
   120fc:	901d      	str	r0, [sp, #116]	; 0x74
                float filter_value = filter_data[Offset(
   120fe:	9300      	str	r3, [sp, #0]
   12100:	4652      	mov	r2, sl
   12102:	465b      	mov	r3, fp
   12104:	4621      	mov	r1, r4
   12106:	a83a      	add	r0, sp, #232	; 0xe8
   12108:	f006 fe95 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   1210c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1210e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   12110:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
   12114:	9a1e      	ldr	r2, [sp, #120]	; 0x78
                total += (input_value * filter_value);
   12116:	ed93 7a00 	vldr	s14, [r3]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   1211a:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
   1211c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                total += (input_value * filter_value);
   12120:	edd0 7a00 	vldr	s15, [r0]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   12124:	3301      	adds	r3, #1
                total += (input_value * filter_value);
   12126:	eee7 8a27 	vfma.f32	s17, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   1212a:	e7da      	b.n	120e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x226>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1212c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1212e:	f10b 0b01 	add.w	fp, fp, #1
   12132:	441f      	add	r7, r3
   12134:	e7c7      	b.n	120c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   12136:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12138:	f10a 0a01 	add.w	sl, sl, #1
   1213c:	441e      	add	r6, r3
   1213e:	e7bc      	b.n	120ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
   12140:	00036168 	.word	0x00036168
   12144:	00036170 	.word	0x00036170
   12148:	00036164 	.word	0x00036164
   1214c:	0003616c 	.word	0x0003616c
   12150:	0003e2c5 	.word	0x0003e2c5
   12154:	0003e2d2 	.word	0x0003e2d2
   12158:	0003e1eb 	.word	0x0003e1eb
   1215c:	0003e2ab 	.word	0x0003e2ab
   12160:	0003e2de 	.word	0x0003e2de
   12164:	0003e383 	.word	0x0003e383
   12168:	00000000 	.word	0x00000000
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
   1216c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1216e:	b30b      	cbz	r3, 121b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
            bias_value = bias_data[out_channel];
   12170:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12174:	ed93 8a00 	vldr	s16, [r3]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   12178:	9400      	str	r4, [sp, #0]
              ActivationFunctionWithMinMax(total + bias_value,
   1217a:	ee38 8a28 	vadd.f32	s16, s16, s17
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   1217e:	4643      	mov	r3, r8
   12180:	464a      	mov	r2, r9
   12182:	4629      	mov	r1, r5
   12184:	a846      	add	r0, sp, #280	; 0x118
   12186:	f006 fe56 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   1218a:	eeb4 9a48 	vcmp.f32	s18, s16
   1218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12192:	bfc8      	it	gt
   12194:	eeb0 8a49 	vmovgt.f32	s16, s18
	return __b;
   12198:	eef4 9a48 	vcmp.f32	s19, s16
   1219c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   121a6:	bf48      	it	mi
   121a8:	eeb0 8a69 	vmovmi.f32	s16, s19
   121ac:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   121b0:	3401      	adds	r4, #1
   121b2:	e779      	b.n	120a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>
          float bias_value = 0.0f;
   121b4:	ed1f 8a14 	vldr	s16, [pc, #-80]	; 12168 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
   121b8:	e7de      	b.n	12178 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   121ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   121bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   121be:	4413      	add	r3, r2
   121c0:	f108 0801 	add.w	r8, r8, #1
   121c4:	930c      	str	r3, [sp, #48]	; 0x30
   121c6:	e76a      	b.n	1209e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   121c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   121ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
   121cc:	4413      	add	r3, r2
   121ce:	f109 0901 	add.w	r9, r9, #1
   121d2:	930b      	str	r3, [sp, #44]	; 0x2c
   121d4:	e75a      	b.n	1208c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
  for (int batch = 0; batch < batches; ++batch) {
   121d6:	3501      	adds	r5, #1
   121d8:	e74f      	b.n	1207a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1be>
   121da:	a84c      	add	r0, sp, #304	; 0x130
   121dc:	f006 fdff 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
   121e0:	a846      	add	r0, sp, #280	; 0x118
   121e2:	f006 fdfc 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
   121e6:	a840      	add	r0, sp, #256	; 0x100
   121e8:	f006 fdf9 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
   121ec:	a83a      	add	r0, sp, #232	; 0xe8
   121ee:	f006 fdf6 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
   121f2:	a834      	add	r0, sp, #208	; 0xd0
        tflite::micro::GetTensorShape(input),
   121f4:	f006 fdf3 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
   121f8:	2000      	movs	r0, #0
  }
  return kTfLiteOk;
}
   121fa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   121fe:	ecbd 8b04 	vpop	{d8-d9}
   12202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  conv_params.dilation.h = params.dilation_height_factor;
   12206:	694a      	ldr	r2, [r1, #20]
  conv_params.dilation.w = params.dilation_width_factor;
   12208:	690b      	ldr	r3, [r1, #16]
  conv_params.dilation.h = params.dilation_height_factor;
   1220a:	9283      	str	r2, [sp, #524]	; 0x20c
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
   1220c:	2a01      	cmp	r2, #1
  conv_params.dilation.w = params.dilation_width_factor;
   1220e:	9382      	str	r3, [sp, #520]	; 0x208
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
   12210:	f040 80b5 	bne.w	1237e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c2>
   12214:	2b01      	cmp	r3, #1
   12216:	f040 80b2 	bne.w	1237e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c2>
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
   1221a:	692b      	ldr	r3, [r5, #16]
   1221c:	425b      	negs	r3, r3
   1221e:	937c      	str	r3, [sp, #496]	; 0x1f0
    conv_params.output_offset = data.reference_op_data.output_zero_point;
   12220:	69ab      	ldr	r3, [r5, #24]
   12222:	937d      	str	r3, [sp, #500]	; 0x1f4
    conv_params.stride.h = params.stride_height;
   12224:	688b      	ldr	r3, [r1, #8]
   12226:	937f      	str	r3, [sp, #508]	; 0x1fc
    conv_params.stride.w = params.stride_width;
   12228:	684b      	ldr	r3, [r1, #4]
   1222a:	937e      	str	r3, [sp, #504]	; 0x1f8
    conv_params.padding.h = data.reference_op_data.padding.height;
   1222c:	686b      	ldr	r3, [r5, #4]
   1222e:	9381      	str	r3, [sp, #516]	; 0x204
    conv_params.padding.w = data.reference_op_data.padding.width;
   12230:	682b      	ldr	r3, [r5, #0]
   12232:	9380      	str	r3, [sp, #512]	; 0x200
    conv_params.activation.min = data.reference_op_data.output_activation_min;
   12234:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   12236:	9384      	str	r3, [sp, #528]	; 0x210
    conv_params.activation.max = data.reference_op_data.output_activation_max;
   12238:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1223a:	9385      	str	r3, [sp, #532]	; 0x214
    quant_params.multiplier = const_cast<int32_t*>(
   1223c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1223e:	9320      	str	r3, [sp, #128]	; 0x80
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   12240:	4641      	mov	r1, r8
    quant_params.shift =
   12242:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12244:	9321      	str	r3, [sp, #132]	; 0x84
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   12246:	a852      	add	r0, sp, #328	; 0x148
   12248:	f006 ff0a 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   1224c:	4639      	mov	r1, r7
   1224e:	a858      	add	r0, sp, #352	; 0x160
   12250:	f006 ff06 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   12254:	4649      	mov	r1, r9
   12256:	a85e      	add	r0, sp, #376	; 0x178
   12258:	f006 ff02 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   1225c:	4631      	mov	r1, r6
   1225e:	a864      	add	r0, sp, #400	; 0x190
   12260:	f006 fefe 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   12264:	e9dd 2384 	ldrd	r2, r3, [sp, #528]	; 0x210
   12268:	429a      	cmp	r2, r3
   1226a:	f73f ae47 	bgt.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1226e:	9b58      	ldr	r3, [sp, #352]	; 0x160
   12270:	2b04      	cmp	r3, #4
   12272:	f47f ae43 	bne.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   12276:	9b52      	ldr	r3, [sp, #328]	; 0x148
   12278:	2b04      	cmp	r3, #4
   1227a:	f47f ae3f 	bne.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1227e:	9b5e      	ldr	r3, [sp, #376]	; 0x178
   12280:	2b04      	cmp	r3, #4
   12282:	f47f ae3b 	bne.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
   12286:	2300      	movs	r3, #0
   12288:	4619      	mov	r1, r3
   1228a:	aa5e      	add	r2, sp, #376	; 0x178
   1228c:	a858      	add	r0, sp, #352	; 0x160
   1228e:	f006 fdf4 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   12292:	2303      	movs	r3, #3
   12294:	4619      	mov	r1, r3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
   12296:	9009      	str	r0, [sp, #36]	; 0x24
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   12298:	aa52      	add	r2, sp, #328	; 0x148
   1229a:	a858      	add	r0, sp, #352	; 0x160
   1229c:	f006 fded 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   122a0:	2303      	movs	r3, #3
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   122a2:	900a      	str	r0, [sp, #40]	; 0x28
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   122a4:	aa5e      	add	r2, sp, #376	; 0x178
   122a6:	2100      	movs	r1, #0
   122a8:	a852      	add	r0, sp, #328	; 0x148
   122aa:	f006 fde6 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   122ae:	4682      	mov	sl, r0
  TFLITE_DCHECK(tensor != nullptr);
   122b0:	2e00      	cmp	r6, #0
   122b2:	f43f ae23 	beq.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
   122b6:	6833      	ldr	r3, [r6, #0]
   122b8:	b12b      	cbz	r3, 122c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40a>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   122ba:	a864      	add	r0, sp, #400	; 0x190
   122bc:	f006 fdab 	bl	18e16 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   122c0:	4582      	cmp	sl, r0
   122c2:	f47f ae1b 	bne.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    input_dims.n = batch_size;
   122c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122c8:	9324      	str	r3, [sp, #144]	; 0x90
    input_dims.h = input_shape.Dims(1);
   122ca:	2101      	movs	r1, #1
   122cc:	a858      	add	r0, sp, #352	; 0x160
   122ce:	f006 fd91 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
   122d2:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
   122d4:	9025      	str	r0, [sp, #148]	; 0x94
    input_dims.w = input_shape.Dims(2);
   122d6:	a858      	add	r0, sp, #352	; 0x160
   122d8:	f006 fd8c 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.c = input_depth;
   122dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    input_dims.w = input_shape.Dims(2);
   122de:	9026      	str	r0, [sp, #152]	; 0x98
    filter_dims.h = filter_shape.Dims(1);
   122e0:	2101      	movs	r1, #1
   122e2:	a852      	add	r0, sp, #328	; 0x148
    input_dims.c = input_depth;
   122e4:	9327      	str	r3, [sp, #156]	; 0x9c
    filter_dims.n = output_depth;
   122e6:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
    filter_dims.h = filter_shape.Dims(1);
   122ea:	f006 fd83 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.w = filter_shape.Dims(2);
   122ee:	2102      	movs	r1, #2
    filter_dims.h = filter_shape.Dims(1);
   122f0:	9029      	str	r0, [sp, #164]	; 0xa4
    filter_dims.w = filter_shape.Dims(2);
   122f2:	a852      	add	r0, sp, #328	; 0x148
   122f4:	f006 fd7e 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.c = input_depth;
   122f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    filter_dims.w = filter_shape.Dims(2);
   122fa:	902a      	str	r0, [sp, #168]	; 0xa8
    bias_dims.n = 1;
   122fc:	2101      	movs	r1, #1
    filter_dims.c = input_depth;
   122fe:	932b      	str	r3, [sp, #172]	; 0xac
    output_dims.h = output_shape.Dims(1);
   12300:	a85e      	add	r0, sp, #376	; 0x178
    output_dims.n = batch_size;
   12302:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12304:	9330      	str	r3, [sp, #192]	; 0xc0
    bias_dims.h = 1;
   12306:	e9cd 112c 	strd	r1, r1, [sp, #176]	; 0xb0
    bias_dims.c = output_depth;
   1230a:	e9cd 1a2e 	strd	r1, sl, [sp, #184]	; 0xb8
    output_dims.h = output_shape.Dims(1);
   1230e:	f006 fd71 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
   12312:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
   12314:	9031      	str	r0, [sp, #196]	; 0xc4
    output_dims.w = output_shape.Dims(2);
   12316:	a85e      	add	r0, sp, #376	; 0x178
   12318:	f006 fd6c 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (data.buffer_idx > -1) {
   1231c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    ctx.buf = nullptr;
   1231e:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
   12320:	4299      	cmp	r1, r3
    filter_dims.n = output_depth;
   12322:	f10d 0ba0 	add.w	fp, sp, #160	; 0xa0
    output_dims.c = output_depth;
   12326:	e9cd 0a32 	strd	r0, sl, [sp, #200]	; 0xc8
    ctx.size = 0;
   1232a:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
    if (data.buffer_idx > -1) {
   1232e:	db03      	blt.n	12338 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47c>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   12330:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12332:	4620      	mov	r0, r4
   12334:	4798      	blx	r3
   12336:	9022      	str	r0, [sp, #136]	; 0x88
    TFLITE_DCHECK_EQ(
   12338:	f8d9 3000 	ldr.w	r3, [r9]
   1233c:	9306      	str	r3, [sp, #24]
   1233e:	ab30      	add	r3, sp, #192	; 0xc0
   12340:	9305      	str	r3, [sp, #20]
   12342:	6833      	ldr	r3, [r6, #0]
   12344:	9304      	str	r3, [sp, #16]
   12346:	ab2c      	add	r3, sp, #176	; 0xb0
   12348:	9303      	str	r3, [sp, #12]
   1234a:	f8d8 3000 	ldr.w	r3, [r8]
   1234e:	e9cd b301 	strd	fp, r3, [sp, #4]
   12352:	683b      	ldr	r3, [r7, #0]
   12354:	9300      	str	r3, [sp, #0]
   12356:	aa20      	add	r2, sp, #128	; 0x80
   12358:	ab24      	add	r3, sp, #144	; 0x90
   1235a:	a97c      	add	r1, sp, #496	; 0x1f0
   1235c:	a822      	add	r0, sp, #136	; 0x88
   1235e:	f007 fe84 	bl	1a06a <arm_convolve_wrapper_s8>
   12362:	2800      	cmp	r0, #0
   12364:	f47f adca 	bne.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   12368:	a864      	add	r0, sp, #400	; 0x190
   1236a:	f006 fd38 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   1236e:	a85e      	add	r0, sp, #376	; 0x178
   12370:	f006 fd35 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   12374:	a858      	add	r0, sp, #352	; 0x160
   12376:	f006 fd32 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   1237a:	a852      	add	r0, sp, #328	; 0x148
   1237c:	e73a      	b.n	121f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x338>
        ConvParamsQuantized(params, data.reference_op_data),
   1237e:	462a      	mov	r2, r5
   12380:	a894      	add	r0, sp, #592	; 0x250
   12382:	f006 fdcd 	bl	18f20 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        tflite::micro::GetTensorShape(filter),
   12386:	ac70      	add	r4, sp, #448	; 0x1c0
        tflite::micro::GetTensorShape(input),
   12388:	4639      	mov	r1, r7
   1238a:	a86a      	add	r0, sp, #424	; 0x1a8
        data.reference_op_data.per_channel_output_shift,
   1238c:	e9d5 ab09 	ldrd	sl, fp, [r5, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
   12390:	f006 fe66 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(bias),
   12394:	ad76      	add	r5, sp, #472	; 0x1d8
        tflite::micro::GetTensorShape(filter),
   12396:	4641      	mov	r1, r8
   12398:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
   1239a:	683f      	ldr	r7, [r7, #0]
   1239c:	f006 fe60 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(bias),
   123a0:	4631      	mov	r1, r6
   123a2:	4628      	mov	r0, r5
   123a4:	f8d8 8000 	ldr.w	r8, [r8]
   123a8:	f006 fe5a 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   123ac:	2e00      	cmp	r6, #0
   123ae:	f43f ada5 	beq.w	11efc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  return reinterpret_cast<const T*>(tensor->data.raw);
   123b2:	6833      	ldr	r3, [r6, #0]
   123b4:	9309      	str	r3, [sp, #36]	; 0x24
        tflite::micro::GetTensorShape(output),
   123b6:	ae86      	add	r6, sp, #536	; 0x218
   123b8:	4649      	mov	r1, r9
   123ba:	4630      	mov	r0, r6
   123bc:	f006 fe50 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
   123c0:	f8d9 2000 	ldr.w	r2, [r9]
   123c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   123c6:	9700      	str	r7, [sp, #0]
   123c8:	4651      	mov	r1, sl
   123ca:	e9cd 6205 	strd	r6, r2, [sp, #20]
   123ce:	e9cd 5303 	strd	r5, r3, [sp, #12]
   123d2:	465a      	mov	r2, fp
   123d4:	ab6a      	add	r3, sp, #424	; 0x1a8
   123d6:	a894      	add	r0, sp, #592	; 0x250
   123d8:	e9cd 4801 	strd	r4, r8, [sp, #4]
   123dc:	f7ff fb3c 	bl	11a58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
   123e0:	4630      	mov	r0, r6
   123e2:	f006 fcfc 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
   123e6:	4628      	mov	r0, r5
   123e8:	f006 fcf9 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
   123ec:	4620      	mov	r0, r4
   123ee:	f006 fcf6 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
   123f2:	a86a      	add	r0, sp, #424	; 0x1a8
   123f4:	e6fe      	b.n	121f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x338>
   123f6:	bf00      	nop

000123f8 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
   123f8:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   123fa:	4d05      	ldr	r5, [pc, #20]	; (12410 <_ZN6tflite16Register_CONV_2DEv+0x18>)
TfLiteRegistration Register_CONV_2D() {
   123fc:	4606      	mov	r6, r0
          /*version=*/0};
   123fe:	4604      	mov	r4, r0
   12400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12404:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   12408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1240c:	4630      	mov	r0, r6
   1240e:	bd70      	pop	{r4, r5, r6, pc}
   12410:	0001c8c0 	.word	0x0001c8c0

00012414 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   12414:	7b0b      	ldrb	r3, [r1, #12]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   12416:	2b01      	cmp	r3, #1
                           const OpDataConv& data) {
   12418:	b570      	push	{r4, r5, r6, lr}
   1241a:	4604      	mov	r4, r0
   1241c:	460d      	mov	r5, r1
   1241e:	4616      	mov	r6, r2
   12420:	d103      	bne.n	1242a <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x16>
    *activation_min = 0;
   12422:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
   12424:	6323      	str	r3, [r4, #48]	; 0x30
    *activation_max = std::numeric_limits<T>::max();
   12426:	4b12      	ldr	r3, [pc, #72]	; (12470 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x5c>)
   12428:	e004      	b.n	12434 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
  } else if (activation == kTfLiteActRelu6) {
   1242a:	2b03      	cmp	r3, #3
   1242c:	d115      	bne.n	1245a <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x46>
    *activation_min = 0;
   1242e:	2300      	movs	r3, #0
   12430:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 6;
   12432:	4b10      	ldr	r3, [pc, #64]	; (12474 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x60>)
    *activation_max = std::numeric_limits<T>::max();
   12434:	6363      	str	r3, [r4, #52]	; 0x34
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   12436:	7828      	ldrb	r0, [r5, #0]
   12438:	f006 fe36 	bl	190a8 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
   1243c:	6833      	ldr	r3, [r6, #0]
   1243e:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   12440:	6873      	ldr	r3, [r6, #4]
   12442:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   12444:	686b      	ldr	r3, [r5, #4]
   12446:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   12448:	68ab      	ldr	r3, [r5, #8]
   1244a:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   1244c:	692b      	ldr	r3, [r5, #16]
   1244e:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   12450:	696b      	ldr	r3, [r5, #20]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   12452:	7020      	strb	r0, [r4, #0]
  op_params.dilation_height_factor = params.dilation_height_factor;
   12454:	8223      	strh	r3, [r4, #16]
  return op_params;
}
   12456:	4620      	mov	r0, r4
   12458:	bd70      	pop	{r4, r5, r6, pc}
  } else if (activation == kTfLiteActReluN1To1) {
   1245a:	2b02      	cmp	r3, #2
   1245c:	d104      	bne.n	12468 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x54>
    *activation_min = -1;
   1245e:	4b06      	ldr	r3, [pc, #24]	; (12478 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x64>)
   12460:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 1;
   12462:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   12466:	e7e5      	b.n	12434 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
    *activation_min = std::numeric_limits<T>::lowest();
   12468:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   1246c:	e7da      	b.n	12424 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x10>
   1246e:	bf00      	nop
   12470:	7f7fffff 	.word	0x7f7fffff
   12474:	40c00000 	.word	0x40c00000
   12478:	bf800000 	.word	0xbf800000

0001247c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
   1247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12480:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
   12482:	680b      	ldr	r3, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   12484:	681b      	ldr	r3, [r3, #0]
                                 OpDataConv* data) {
   12486:	b08f      	sub	sp, #60	; 0x3c
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   12488:	3b02      	subs	r3, #2
   1248a:	2b01      	cmp	r3, #1
                                 OpDataConv* data) {
   1248c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   1248e:	4605      	mov	r5, r0
   12490:	4688      	mov	r8, r1
   12492:	4617      	mov	r7, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   12494:	d90b      	bls.n	124ae <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x32>
   12496:	4b5d      	ldr	r3, [pc, #372]	; (1260c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
   12498:	9300      	str	r3, [sp, #0]
   1249a:	6944      	ldr	r4, [r0, #20]
   1249c:	4a5c      	ldr	r2, [pc, #368]	; (12610 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
   1249e:	495d      	ldr	r1, [pc, #372]	; (12614 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
   124a0:	2356      	movs	r3, #86	; 0x56
   124a2:	47a0      	blx	r4
   124a4:	2401      	movs	r4, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
   124a6:	4620      	mov	r0, r4
   124a8:	b00f      	add	sp, #60	; 0x3c
   124aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   124ae:	684b      	ldr	r3, [r1, #4]
   124b0:	681c      	ldr	r4, [r3, #0]
   124b2:	2c01      	cmp	r4, #1
   124b4:	d00c      	beq.n	124d0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
   124b6:	2601      	movs	r6, #1
   124b8:	e9cd 4602 	strd	r4, r6, [sp, #8]
   124bc:	4b56      	ldr	r3, [pc, #344]	; (12618 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
   124be:	9301      	str	r3, [sp, #4]
   124c0:	4b56      	ldr	r3, [pc, #344]	; (1261c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
   124c2:	9300      	str	r3, [sp, #0]
   124c4:	6944      	ldr	r4, [r0, #20]
   124c6:	4a52      	ldr	r2, [pc, #328]	; (12610 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
   124c8:	4955      	ldr	r1, [pc, #340]	; (12620 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
   124ca:	2357      	movs	r3, #87	; 0x57
   124cc:	47a0      	blx	r4
   124ce:	e7e9      	b.n	124a4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
   124d0:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
  auto padding = params.padding;
   124d4:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
   124d8:	930a      	str	r3, [sp, #40]	; 0x28
   124da:	6953      	ldr	r3, [r2, #20]
   124dc:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
   124de:	6913      	ldr	r3, [r2, #16]
   124e0:	930c      	str	r3, [sp, #48]	; 0x30

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   124e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   124e4:	9300      	str	r3, [sp, #0]
   124e6:	4649      	mov	r1, r9
   124e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124ea:	4658      	mov	r0, fp
   124ec:	f006 fd04 	bl	18ef8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   124f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   124f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   124f4:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   124f6:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   124f8:	9300      	str	r3, [sp, #0]
   124fa:	4658      	mov	r0, fp
   124fc:	4653      	mov	r3, sl
   124fe:	f006 fcfb 	bl	18ef8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   12502:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12506:	3b01      	subs	r3, #1
   12508:	4353      	muls	r3, r2
   1250a:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1250c:	3801      	subs	r0, #1
   1250e:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
   12512:	9b18      	ldr	r3, [sp, #96]	; 0x60
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   12514:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int total_padding =
   12516:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   1251a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1251c:	3b01      	subs	r3, #1
   1251e:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   12520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12522:	1e50      	subs	r0, r2, #1
   12524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   12526:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   12528:	fb02 3300 	mla	r3, r2, r0, r3
  int total_padding =
   1252c:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
   12530:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
   12538:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
   1253a:	f003 0301 	and.w	r3, r3, #1
      padding, &out_height, &out_width);
   1253e:	6032      	str	r2, [r6, #0]
   12540:	60b3      	str	r3, [r6, #8]
  return total_padding / 2;
   12542:	ea4f 026a 	mov.w	r2, sl, asr #1
  *offset = total_padding % 2;
   12546:	f00a 0301 	and.w	r3, sl, #1
   1254a:	6072      	str	r2, [r6, #4]
   1254c:	60f3      	str	r3, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
   1254e:	2200      	movs	r2, #0
   12550:	4641      	mov	r1, r8
   12552:	4628      	mov	r0, r5
   12554:	f008 fb0a 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   12558:	4682      	mov	sl, r0
   1255a:	b940      	cbnz	r0, 1256e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf2>
   1255c:	4b31      	ldr	r3, [pc, #196]	; (12624 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
   1255e:	696e      	ldr	r6, [r5, #20]
   12560:	9300      	str	r3, [sp, #0]
   12562:	2361      	movs	r3, #97	; 0x61
  TF_LITE_ENSURE(context, filter != nullptr);
   12564:	4a2a      	ldr	r2, [pc, #168]	; (12610 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
   12566:	492b      	ldr	r1, [pc, #172]	; (12614 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
   12568:	4628      	mov	r0, r5
   1256a:	47b0      	blx	r6
   1256c:	e79b      	b.n	124a6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
   1256e:	4622      	mov	r2, r4
   12570:	4641      	mov	r1, r8
   12572:	4628      	mov	r0, r5
   12574:	f008 fafa 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   12578:	4681      	mov	r9, r0
   1257a:	b920      	cbnz	r0, 12586 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
   1257c:	4b2a      	ldr	r3, [pc, #168]	; (12628 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
   1257e:	9300      	str	r3, [sp, #0]
   12580:	696e      	ldr	r6, [r5, #20]
   12582:	2363      	movs	r3, #99	; 0x63
   12584:	e7ee      	b.n	12564 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
   12586:	4641      	mov	r1, r8
   12588:	2202      	movs	r2, #2
   1258a:	4628      	mov	r0, r5
   1258c:	f008 fb00 	bl	1ab90 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   12590:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
   12592:	900a      	str	r0, [sp, #40]	; 0x28
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
   12594:	2200      	movs	r2, #0
   12596:	4628      	mov	r0, r5
   12598:	f008 faeb 	bl	1ab72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   1259c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1259e:	4680      	mov	r8, r0
   125a0:	b920      	cbnz	r0, 125ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x130>
   125a2:	4b22      	ldr	r3, [pc, #136]	; (1262c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
   125a4:	9300      	str	r3, [sp, #0]
   125a6:	696e      	ldr	r6, [r5, #20]
   125a8:	2367      	movs	r3, #103	; 0x67
   125aa:	e7db      	b.n	12564 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
   125ac:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   125b0:	2a01      	cmp	r2, #1
   125b2:	d10a      	bne.n	125ca <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14e>
  data->input_zero_point = input->params.zero_point;
   125b4:	f8da 3010 	ldr.w	r3, [sl, #16]
   125b8:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
   125ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   125be:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
   125c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   125c4:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
   125c6:	2400      	movs	r4, #0
   125c8:	e76d      	b.n	124a6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
   125ca:	f8d9 2008 	ldr.w	r2, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   125ce:	6852      	ldr	r2, [r2, #4]
   125d0:	9208      	str	r2, [sp, #32]
   125d2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   125d4:	9207      	str	r2, [sp, #28]
   125d6:	6a72      	ldr	r2, [r6, #36]	; 0x24
   125d8:	9206      	str	r2, [sp, #24]
   125da:	f106 0230 	add.w	r2, r6, #48	; 0x30
   125de:	9205      	str	r2, [sp, #20]
   125e0:	f106 022c 	add.w	r2, r6, #44	; 0x2c
   125e4:	9204      	str	r2, [sp, #16]
   125e6:	f106 0220 	add.w	r2, r6, #32
   125ea:	9203      	str	r2, [sp, #12]
   125ec:	370c      	adds	r7, #12
   125ee:	f106 021c 	add.w	r2, r6, #28
   125f2:	e9cd 0700 	strd	r0, r7, [sp]
   125f6:	9202      	str	r2, [sp, #8]
   125f8:	4651      	mov	r1, sl
   125fa:	464a      	mov	r2, r9
   125fc:	4628      	mov	r0, r5
   125fe:	f002 fcf7 	bl	14ff0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
   12602:	4604      	mov	r4, r0
   12604:	2800      	cmp	r0, #0
   12606:	d0d5      	beq.n	125b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
   12608:	e74d      	b.n	124a6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
   1260a:	bf00      	nop
   1260c:	0003e41a 	.word	0x0003e41a
   12610:	0003e39f 	.word	0x0003e39f
   12614:	0003e25f 	.word	0x0003e25f
   12618:	0003e957 	.word	0x0003e957
   1261c:	0003e43e 	.word	0x0003e43e
   12620:	0003e2ab 	.word	0x0003e2ab
   12624:	0003e276 	.word	0x0003e276
   12628:	0003e287 	.word	0x0003e287
   1262c:	0003e299 	.word	0x0003e299

00012630 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   12630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12634:	b0b7      	sub	sp, #220	; 0xdc
   12636:	e9dd a640 	ldrd	sl, r6, [sp, #256]	; 0x100
   1263a:	4607      	mov	r7, r0
   1263c:	460c      	mov	r4, r1
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   1263e:	a824      	add	r0, sp, #144	; 0x90
   12640:	4631      	mov	r1, r6
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   12642:	4698      	mov	r8, r3
   12644:	4691      	mov	r9, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   12646:	f006 fd0b 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   1264a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1264c:	2b02      	cmp	r3, #2
   1264e:	d001      	beq.n	12654 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x24>
   12650:	f009 fb3f 	bl	1bcd2 <abort>
  const int batches = output_shape.Dims(0);
   12654:	2100      	movs	r1, #0
   12656:	a824      	add	r0, sp, #144	; 0x90
   12658:	f006 fbcc 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
   1265c:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
   1265e:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = output_shape.Dims(1);
   12660:	a824      	add	r0, sp, #144	; 0x90
   12662:	f006 fbc7 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   12666:	4641      	mov	r1, r8
  const int output_depth = output_shape.Dims(1);
   12668:	4683      	mov	fp, r0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   1266a:	a82a      	add	r0, sp, #168	; 0xa8
   1266c:	f006 fcf8 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   12670:	992a      	ldr	r1, [sp, #168]	; 0xa8
   12672:	a82a      	add	r0, sp, #168	; 0xa8
   12674:	3901      	subs	r1, #1
   12676:	f006 fbbd 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   1267a:	4649      	mov	r1, r9
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   1267c:	9008      	str	r0, [sp, #32]
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   1267e:	a830      	add	r0, sp, #192	; 0xc0
   12680:	f006 fcee 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
   12684:	6961      	ldr	r1, [r4, #20]
  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
  quant_params.shift = data.reference_op_data.output_shift;

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
   12686:	9b09      	ldr	r3, [sp, #36]	; 0x24
  input_dims.h = 1;
  input_dims.w = 1;
  input_dims.c = accum_depth;
   12688:	9a08      	ldr	r2, [sp, #32]
  input_dims.n = batches;
   1268a:	930f      	str	r3, [sp, #60]	; 0x3c
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
   1268c:	4249      	negs	r1, r1
   1268e:	911f      	str	r1, [sp, #124]	; 0x7c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
   12690:	69e1      	ldr	r1, [r4, #28]
   12692:	9121      	str	r1, [sp, #132]	; 0x84
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
   12694:	69a1      	ldr	r1, [r4, #24]

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
  output_dims.h = 1;
  output_dims.w = 1;
  output_dims.c = output_depth;
   12696:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
   1269a:	4249      	negs	r1, r1
   1269c:	9120      	str	r1, [sp, #128]	; 0x80
  fc_params.activation.min = data.reference_op_data.output_activation_min;
   1269e:	68a1      	ldr	r1, [r4, #8]
   126a0:	9122      	str	r1, [sp, #136]	; 0x88
  fc_params.activation.max = data.reference_op_data.output_activation_max;
   126a2:	68e1      	ldr	r1, [r4, #12]
   126a4:	9123      	str	r1, [sp, #140]	; 0x8c
  quant_params.multiplier = data.reference_op_data.output_multiplier;
   126a6:	6821      	ldr	r1, [r4, #0]
   126a8:	910b      	str	r1, [sp, #44]	; 0x2c
  input_dims.h = 1;
   126aa:	2501      	movs	r5, #1
  quant_params.shift = data.reference_op_data.output_shift;
   126ac:	6861      	ldr	r1, [r4, #4]
   126ae:	910c      	str	r1, [sp, #48]	; 0x30
  output_dims.n = batches;
   126b0:	e9cd b31a 	strd	fp, r3, [sp, #104]	; 0x68

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
   126b4:	2300      	movs	r3, #0
  input_dims.w = 1;
   126b6:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  filter_dims.n = accum_depth;
   126ba:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  filter_dims.w = 1;
   126be:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  bias_dims.n = 1;
   126c2:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
  bias_dims.w = 1;
   126c6:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
  output_dims.w = 1;
   126ca:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
  ctx.size = 0;
   126ce:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34

  if (data.buffer_idx > -1) {
   126d2:	6a21      	ldr	r1, [r4, #32]
   126d4:	4299      	cmp	r1, r3
   126d6:	db03      	blt.n	126e0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xb0>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   126d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   126da:	4638      	mov	r0, r7
   126dc:	4798      	blx	r3
   126de:	900d      	str	r0, [sp, #52]	; 0x34
  TFLITE_DCHECK(tensor != nullptr);
   126e0:	f1b9 0f00 	cmp.w	r9, #0
   126e4:	d0b4      	beq.n	12650 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
   126e6:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK(tensor != nullptr);
   126ea:	f1b8 0f00 	cmp.w	r8, #0
   126ee:	d0af      	beq.n	12650 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
   126f0:	f8d8 1000 	ldr.w	r1, [r8]
  TFLITE_DCHECK(tensor != nullptr);
   126f4:	f1ba 0f00 	cmp.w	sl, #0
   126f8:	d0aa      	beq.n	12650 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
   126fa:	f8da 0000 	ldr.w	r0, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   126fe:	2e00      	cmp	r6, #0
   12700:	d045      	beq.n	1278e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x15e>
   12702:	6833      	ldr	r3, [r6, #0]
  }

  TF_LITE_ENSURE_EQ(
   12704:	9306      	str	r3, [sp, #24]
   12706:	ab1b      	add	r3, sp, #108	; 0x6c
   12708:	e9cd 0304 	strd	r0, r3, [sp, #16]
   1270c:	ab17      	add	r3, sp, #92	; 0x5c
   1270e:	e9cd 1302 	strd	r1, r3, [sp, #8]
   12712:	ab13      	add	r3, sp, #76	; 0x4c
   12714:	e9cd 2300 	strd	r2, r3, [sp]
   12718:	a91f      	add	r1, sp, #124	; 0x7c
   1271a:	ab0f      	add	r3, sp, #60	; 0x3c
   1271c:	aa0b      	add	r2, sp, #44	; 0x2c
   1271e:	a80d      	add	r0, sp, #52	; 0x34
   12720:	f007 fd31 	bl	1a186 <arm_fully_connected_s8>
   12724:	4604      	mov	r4, r0
   12726:	b328      	cbz	r0, 12774 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
   12728:	697c      	ldr	r4, [r7, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
   1272a:	f8d9 3000 	ldr.w	r3, [r9]
   1272e:	f8d8 2000 	ldr.w	r2, [r8]
   12732:	f8da 1000 	ldr.w	r1, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   12736:	b106      	cbz	r6, 1273a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
   12738:	6836      	ldr	r6, [r6, #0]
   1273a:	9606      	str	r6, [sp, #24]
   1273c:	a81b      	add	r0, sp, #108	; 0x6c
   1273e:	e9cd 1004 	strd	r1, r0, [sp, #16]
   12742:	a917      	add	r1, sp, #92	; 0x5c
   12744:	e9cd 2102 	strd	r2, r1, [sp, #8]
   12748:	aa13      	add	r2, sp, #76	; 0x4c
   1274a:	e9cd 3200 	strd	r3, r2, [sp]
   1274e:	a91f      	add	r1, sp, #124	; 0x7c
   12750:	ab0f      	add	r3, sp, #60	; 0x3c
   12752:	aa0b      	add	r2, sp, #44	; 0x2c
   12754:	a80d      	add	r0, sp, #52	; 0x34
   12756:	f007 fd16 	bl	1a186 <arm_fully_connected_s8>
   1275a:	2300      	movs	r3, #0
   1275c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   12760:	4b0c      	ldr	r3, [pc, #48]	; (12794 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x164>)
   12762:	9301      	str	r3, [sp, #4]
   12764:	4b0c      	ldr	r3, [pc, #48]	; (12798 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x168>)
   12766:	9300      	str	r3, [sp, #0]
   12768:	4a0c      	ldr	r2, [pc, #48]	; (1279c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x16c>)
   1276a:	490d      	ldr	r1, [pc, #52]	; (127a0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x170>)
   1276c:	23a6      	movs	r3, #166	; 0xa6
   1276e:	4638      	mov	r0, r7
   12770:	47a0      	blx	r4
   12772:	2401      	movs	r4, #1
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   12774:	a830      	add	r0, sp, #192	; 0xc0
   12776:	f006 fb32 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   1277a:	a82a      	add	r0, sp, #168	; 0xa8
   1277c:	f006 fb2f 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   12780:	a824      	add	r0, sp, #144	; 0x90
   12782:	f006 fb2c 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
}
   12786:	4620      	mov	r0, r4
   12788:	b037      	add	sp, #220	; 0xdc
   1278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1278e:	4633      	mov	r3, r6
   12790:	e7b8      	b.n	12704 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xd4>
   12792:	bf00      	nop
   12794:	0003e4d1 	.word	0x0003e4d1
   12798:	0003e4e2 	.word	0x0003e4e2
   1279c:	0003e452 	.word	0x0003e452
   127a0:	0003e2ab 	.word	0x0003e2ab

000127a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   127a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   127a8:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   127ac:	b095      	sub	sp, #84	; 0x54
   127ae:	4604      	mov	r4, r0
   127b0:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   127b2:	f1b9 0f00 	cmp.w	r9, #0
   127b6:	d101      	bne.n	127bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
   127b8:	f009 fa8b 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   127bc:	f8d1 b014 	ldr.w	fp, [r1, #20]
   127c0:	f1bb 0f00 	cmp.w	fp, #0
   127c4:	d0f8      	beq.n	127b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
      GetInput(context, node, kFullyConnectedInputTensor);
   127c6:	4b50      	ldr	r3, [pc, #320]	; (12908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
   127c8:	681a      	ldr	r2, [r3, #0]
   127ca:	f008 f9cf 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   127ce:	4680      	mov	r8, r0
   127d0:	b960      	cbnz	r0, 127ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   127d2:	4b4e      	ldr	r3, [pc, #312]	; (1290c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
   127d4:	9300      	str	r3, [sp, #0]
   127d6:	6965      	ldr	r5, [r4, #20]
   127d8:	2340      	movs	r3, #64	; 0x40
  TF_LITE_ENSURE(context, filter != nullptr);
   127da:	4a4d      	ldr	r2, [pc, #308]	; (12910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
   127dc:	494d      	ldr	r1, [pc, #308]	; (12914 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
   127de:	4620      	mov	r0, r4
   127e0:	47a8      	blx	r5
   127e2:	2501      	movs	r5, #1
}
   127e4:	4628      	mov	r0, r5
   127e6:	b015      	add	sp, #84	; 0x54
   127e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kFullyConnectedWeightsTensor);
   127ec:	4b4a      	ldr	r3, [pc, #296]	; (12918 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
   127ee:	4629      	mov	r1, r5
   127f0:	681a      	ldr	r2, [r3, #0]
   127f2:	4620      	mov	r0, r4
   127f4:	f008 f9ba 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
   127f8:	4607      	mov	r7, r0
   127fa:	b920      	cbnz	r0, 12806 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
   127fc:	4b47      	ldr	r3, [pc, #284]	; (1291c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
   127fe:	9300      	str	r3, [sp, #0]
   12800:	6965      	ldr	r5, [r4, #20]
   12802:	2343      	movs	r3, #67	; 0x43
   12804:	e7e9      	b.n	127da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
   12806:	4b46      	ldr	r3, [pc, #280]	; (12920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   12808:	4629      	mov	r1, r5
   1280a:	681a      	ldr	r2, [r3, #0]
   1280c:	4620      	mov	r0, r4
   1280e:	f008 f9bf 	bl	1ab90 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
   12812:	4b44      	ldr	r3, [pc, #272]	; (12924 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
   12814:	4682      	mov	sl, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
   12816:	681a      	ldr	r2, [r3, #0]
   12818:	4629      	mov	r1, r5
   1281a:	4620      	mov	r0, r4
   1281c:	f008 f9a9 	bl	1ab72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   12820:	4606      	mov	r6, r0
   12822:	b920      	cbnz	r0, 1282e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
   12824:	4b40      	ldr	r3, [pc, #256]	; (12928 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
   12826:	9300      	str	r3, [sp, #0]
   12828:	6965      	ldr	r5, [r4, #20]
   1282a:	2347      	movs	r3, #71	; 0x47
   1282c:	e7d5      	b.n	127da <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1282e:	f898 0000 	ldrb.w	r0, [r8]
   12832:	7833      	ldrb	r3, [r6, #0]
   12834:	4283      	cmp	r3, r0
   12836:	d012      	beq.n	1285e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
   12838:	6967      	ldr	r7, [r4, #20]
   1283a:	f002 fadb 	bl	14df4 <TfLiteTypeGetName>
   1283e:	4605      	mov	r5, r0
   12840:	7830      	ldrb	r0, [r6, #0]
   12842:	f002 fad7 	bl	14df4 <TfLiteTypeGetName>
   12846:	4b39      	ldr	r3, [pc, #228]	; (1292c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
   12848:	9301      	str	r3, [sp, #4]
   1284a:	4b39      	ldr	r3, [pc, #228]	; (12930 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1284c:	9300      	str	r3, [sp, #0]
   1284e:	e9cd 5002 	strd	r5, r0, [sp, #8]
   12852:	4a2f      	ldr	r2, [pc, #188]	; (12910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
   12854:	4937      	ldr	r1, [pc, #220]	; (12934 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
   12856:	2349      	movs	r3, #73	; 0x49
   12858:	4620      	mov	r0, r4
   1285a:	47b8      	blx	r7
   1285c:	e7c1      	b.n	127e2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   1285e:	783a      	ldrb	r2, [r7, #0]
   12860:	429a      	cmp	r2, r3
   12862:	d004      	beq.n	1286e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xca>
   12864:	6963      	ldr	r3, [r4, #20]
   12866:	4934      	ldr	r1, [pc, #208]	; (12938 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
   12868:	4620      	mov	r0, r4
   1286a:	4798      	blx	r3
   1286c:	e7b9      	b.n	127e2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  data->buffer_idx = -1;
   1286e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12872:	f8c9 3020 	str.w	r3, [r9, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
   12876:	f89b 1000 	ldrb.w	r1, [fp]
   1287a:	4643      	mov	r3, r8
   1287c:	e9cd 6902 	strd	r6, r9, [sp, #8]
   12880:	e9cd 7a00 	strd	r7, sl, [sp]
   12884:	4620      	mov	r0, r4
   12886:	f006 fbb5 	bl	18ff4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
   1288a:	4605      	mov	r5, r0
   1288c:	2800      	cmp	r0, #0
   1288e:	d1a9      	bne.n	127e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  if (input->type == kTfLiteInt8) {
   12890:	f898 3000 	ldrb.w	r3, [r8]
   12894:	2b09      	cmp	r3, #9
   12896:	d1a5      	bne.n	127e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape filter_shape = GetTensorShape(filter);
   12898:	4639      	mov	r1, r7
   1289a:	a808      	add	r0, sp, #32
   1289c:	f006 fafc 	bl	18e98 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
   128a0:	4631      	mov	r1, r6
   128a2:	a80e      	add	r0, sp, #56	; 0x38
   128a4:	f006 faf8 	bl	18e98 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   128a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   128aa:	2b02      	cmp	r3, #2
   128ac:	d184      	bne.n	127b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
   128ae:	9908      	ldr	r1, [sp, #32]
   128b0:	a808      	add	r0, sp, #32
   128b2:	3901      	subs	r1, #1
   128b4:	f006 fa9e 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = 1;
   128b8:	2101      	movs	r1, #1
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
   128ba:	9004      	str	r0, [sp, #16]
    filter_dims.c = output_shape.Dims(1);
   128bc:	a80e      	add	r0, sp, #56	; 0x38
    filter_dims.w = 1;
   128be:	e9cd 1105 	strd	r1, r1, [sp, #20]
    filter_dims.c = output_shape.Dims(1);
   128c2:	f006 fa97 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
   128c6:	9007      	str	r0, [sp, #28]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
   128c8:	a804      	add	r0, sp, #16
   128ca:	f007 fc8d 	bl	1a1e8 <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
   128ce:	1e01      	subs	r1, r0, #0
   128d0:	dd0e      	ble.n	128f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   128d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   128d4:	4620      	mov	r0, r4
   128d6:	f109 0220 	add.w	r2, r9, #32
   128da:	4798      	blx	r3
   128dc:	4604      	mov	r4, r0
   128de:	b158      	cbz	r0, 128f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
   128e0:	a80e      	add	r0, sp, #56	; 0x38
   128e2:	f006 fa7c 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
   128e6:	a808      	add	r0, sp, #32
   128e8:	f006 fa79 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
   128ec:	4625      	mov	r5, r4
   128ee:	e779      	b.n	127e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
      data->buffer_idx = -1;
   128f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   128f4:	f8c9 3020 	str.w	r3, [r9, #32]
    RuntimeShape output_shape = GetTensorShape(output);
   128f8:	a80e      	add	r0, sp, #56	; 0x38
   128fa:	f006 fa70 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = GetTensorShape(filter);
   128fe:	a808      	add	r0, sp, #32
   12900:	f006 fa6d 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
   12904:	e76e      	b.n	127e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
   12906:	bf00      	nop
   12908:	0003617c 	.word	0x0003617c
   1290c:	0003e276 	.word	0x0003e276
   12910:	0003e452 	.word	0x0003e452
   12914:	0003e25f 	.word	0x0003e25f
   12918:	00036184 	.word	0x00036184
   1291c:	0003e287 	.word	0x0003e287
   12920:	00036178 	.word	0x00036178
   12924:	00036180 	.word	0x00036180
   12928:	0003e299 	.word	0x0003e299
   1292c:	0003e2c5 	.word	0x0003e2c5
   12930:	0003e2d2 	.word	0x0003e2d2
   12934:	0003e606 	.word	0x0003e606
   12938:	0003e620 	.word	0x0003e620

0001293c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1293c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12940:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   12944:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   12948:	b0d1      	sub	sp, #324	; 0x144
   1294a:	4607      	mov	r7, r0
   1294c:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1294e:	f1b9 0f00 	cmp.w	r9, #0
   12952:	d101      	bne.n	12958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
   12954:	f009 f9bd 	bl	1bcd2 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
   12958:	4ba6      	ldr	r3, [pc, #664]	; (12bf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
  return GetMutableEvalInput(context, node, index);
   1295a:	681a      	ldr	r2, [r3, #0]
   1295c:	f006 fabe 	bl	18edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
   12960:	4ba5      	ldr	r3, [pc, #660]	; (12bf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
   12962:	4641      	mov	r1, r8
   12964:	681a      	ldr	r2, [r3, #0]
   12966:	4604      	mov	r4, r0
   12968:	4638      	mov	r0, r7
   1296a:	f006 fab7 	bl	18edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
   1296e:	4ba3      	ldr	r3, [pc, #652]	; (12bfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
   12970:	4641      	mov	r1, r8
   12972:	681a      	ldr	r2, [r3, #0]
   12974:	4606      	mov	r6, r0
   12976:	4638      	mov	r0, r7
   12978:	f006 fab0 	bl	18edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
   1297c:	4ba0      	ldr	r3, [pc, #640]	; (12c00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
   1297e:	4641      	mov	r1, r8
   12980:	681a      	ldr	r2, [r3, #0]
   12982:	4605      	mov	r5, r0
   12984:	4638      	mov	r0, r7
   12986:	f006 fb16 	bl	18fb6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
   1298a:	f8d8 1010 	ldr.w	r1, [r8, #16]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
   1298e:	4683      	mov	fp, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   12990:	2900      	cmp	r1, #0
   12992:	d0df      	beq.n	12954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
   12994:	7a20      	ldrb	r0, [r4, #8]
   12996:	2803      	cmp	r0, #3
   12998:	f000 80a6 	beq.w	12ae8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
   1299c:	2809      	cmp	r0, #9
   1299e:	f000 8097 	beq.w	12ad0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x194>
   129a2:	2801      	cmp	r0, #1
   129a4:	f040 8195 	bne.w	12cd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x396>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
   129a8:	f899 1000 	ldrb.w	r1, [r9]
   129ac:	a83c      	add	r0, sp, #240	; 0xf0
   129ae:	f000 f9c5 	bl	12d3c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
   129b2:	4621      	mov	r1, r4
   129b4:	a812      	add	r0, sp, #72	; 0x48
   129b6:	f006 fb53 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   129ba:	6823      	ldr	r3, [r4, #0]
   129bc:	9303      	str	r3, [sp, #12]
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
   129be:	4631      	mov	r1, r6
   129c0:	a818      	add	r0, sp, #96	; 0x60
   129c2:	f006 fb4d 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   129c6:	2e00      	cmp	r6, #0
   129c8:	d0c4      	beq.n	12954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
   129ca:	6833      	ldr	r3, [r6, #0]
   129cc:	9302      	str	r3, [sp, #8]
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
   129ce:	4629      	mov	r1, r5
   129d0:	a81e      	add	r0, sp, #120	; 0x78
   129d2:	f006 fb45 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   129d6:	2d00      	cmp	r5, #0
   129d8:	d0bc      	beq.n	12954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
   129da:	4659      	mov	r1, fp
   129dc:	a846      	add	r0, sp, #280	; 0x118
  return reinterpret_cast<const T*>(tensor->data.raw);
   129de:	f8d5 8000 	ldr.w	r8, [r5]
   129e2:	f006 fb3d 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   129e6:	f1bb 0f00 	cmp.w	fp, #0
   129ea:	d001      	beq.n	129f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
   129ec:	f8db b000 	ldr.w	fp, [fp]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   129f0:	9b46      	ldr	r3, [sp, #280]	; 0x118
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
  }

  inline int32_t DimensionsCount() const { return size_; }
   129f2:	9d18      	ldr	r5, [sp, #96]	; 0x60
  const float output_activation_min = params.float_activation_min;
   129f4:	ed9d 8a43 	vldr	s16, [sp, #268]	; 0x10c
  const float output_activation_max = params.float_activation_max;
   129f8:	eddd 8a44 	vldr	s17, [sp, #272]	; 0x110
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   129fc:	3b01      	subs	r3, #1
   129fe:	4619      	mov	r1, r3
   12a00:	a846      	add	r0, sp, #280	; 0x118
   12a02:	9305      	str	r3, [sp, #20]
   12a04:	f006 fabc 	bl	18f80 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   12a08:	9b05      	ldr	r3, [sp, #20]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   12a0a:	9004      	str	r0, [sp, #16]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   12a0c:	aa46      	add	r2, sp, #280	; 0x118
   12a0e:	1ea9      	subs	r1, r5, #2
   12a10:	a818      	add	r0, sp, #96	; 0x60
   12a12:	f006 fa32 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   12a16:	1e69      	subs	r1, r5, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   12a18:	4604      	mov	r4, r0
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   12a1a:	a818      	add	r0, sp, #96	; 0x60
   12a1c:	f006 f9ea 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
   12a20:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
   12a22:	eddf 6a78 	vldr	s13, [pc, #480]	; 12c04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   12a26:	4602      	mov	r2, r0
   12a28:	461e      	mov	r6, r3
  for (int b = 0; b < batches; ++b) {
   12a2a:	4618      	mov	r0, r3
   12a2c:	9904      	ldr	r1, [sp, #16]
   12a2e:	4281      	cmp	r1, r0
   12a30:	dd40      	ble.n	12ab4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
   12a32:	9903      	ldr	r1, [sp, #12]
   12a34:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   12a38:	9105      	str	r1, [sp, #20]
   12a3a:	2100      	movs	r1, #0
   12a3c:	eb0b 0e86 	add.w	lr, fp, r6, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   12a40:	460d      	mov	r5, r1
   12a42:	42ac      	cmp	r4, r5
   12a44:	dd32      	ble.n	12aac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x170>
   12a46:	9f02      	ldr	r7, [sp, #8]
   12a48:	f8dd a014 	ldr.w	sl, [sp, #20]
      float total = 0.f;
   12a4c:	eddf 7a6d 	vldr	s15, [pc, #436]	; 12c04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
   12a50:	eb07 0981 	add.w	r9, r7, r1, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
   12a54:	f04f 0c00 	mov.w	ip, #0
   12a58:	4562      	cmp	r2, ip
   12a5a:	dd08      	ble.n	12a6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x132>
        total += input_data[b * accum_depth + d] *
   12a5c:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
   12a60:	ecb9 7a01 	vldmia	r9!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
   12a64:	f10c 0c01 	add.w	ip, ip, #1
        total += input_data[b * accum_depth + d] *
   12a68:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
   12a6c:	e7f4      	b.n	12a58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11c>
      if (bias_data) {
   12a6e:	f1b8 0f00 	cmp.w	r8, #0
   12a72:	d018      	beq.n	12aa6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
        bias_value = bias_data[out_c];
   12a74:	eb08 0c85 	add.w	ip, r8, r5, lsl #2
   12a78:	ed9c 7a00 	vldr	s14, [ip]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   12a7c:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   12a80:	3501      	adds	r5, #1
	return __b;
   12a82:	eeb4 8a67 	vcmp.f32	s16, s15
   12a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a8a:	bfc8      	it	gt
   12a8c:	eef0 7a48 	vmovgt.f32	s15, s16
	return __b;
   12a90:	eef4 8a67 	vcmp.f32	s17, s15
   12a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a98:	bf48      	it	mi
   12a9a:	eef0 7a68 	vmovmi.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   12a9e:	ecee 7a01 	vstmia	lr!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   12aa2:	4411      	add	r1, r2
   12aa4:	e7cd      	b.n	12a42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x106>
      float bias_value = 0.0f;
   12aa6:	eeb0 7a66 	vmov.f32	s14, s13
   12aaa:	e7e7      	b.n	12a7c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  for (int b = 0; b < batches; ++b) {
   12aac:	3001      	adds	r0, #1
   12aae:	4426      	add	r6, r4
   12ab0:	4413      	add	r3, r2
   12ab2:	e7bb      	b.n	12a2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
   12ab4:	a846      	add	r0, sp, #280	; 0x118
   12ab6:	f006 f992 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
   12aba:	a81e      	add	r0, sp, #120	; 0x78
   12abc:	f006 f98f 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
   12ac0:	a818      	add	r0, sp, #96	; 0x60
   12ac2:	f006 f98c 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
   12ac6:	a812      	add	r0, sp, #72	; 0x48
                               output);
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
          tflite::micro::GetTensorShape(input),
   12ac8:	f006 f989 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
   12acc:	2000      	movs	r0, #0
      break;
   12ace:	e006      	b.n	12ade <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
   12ad0:	e9cd 5b00 	strd	r5, fp, [sp]
   12ad4:	4633      	mov	r3, r6
   12ad6:	4622      	mov	r2, r4
   12ad8:	4638      	mov	r0, r7
   12ada:	f7ff fda9 	bl	12630 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
}
   12ade:	b051      	add	sp, #324	; 0x144
   12ae0:	ecbd 8b02 	vpop	{d8}
   12ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          FullyConnectedParamsQuantized(data.reference_op_data),
   12ae8:	a846      	add	r0, sp, #280	; 0x118
   12aea:	f006 fa72 	bl	18fd2 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
   12aee:	4621      	mov	r1, r4
   12af0:	a824      	add	r0, sp, #144	; 0x90
   12af2:	f006 fab5 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   12af6:	6823      	ldr	r3, [r4, #0]
   12af8:	930b      	str	r3, [sp, #44]	; 0x2c
          tflite::micro::GetTensorShape(filter),
   12afa:	4631      	mov	r1, r6
   12afc:	a82a      	add	r0, sp, #168	; 0xa8
   12afe:	f006 faaf 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   12b02:	2e00      	cmp	r6, #0
   12b04:	f43f af26 	beq.w	12954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
   12b08:	6833      	ldr	r3, [r6, #0]
   12b0a:	930a      	str	r3, [sp, #40]	; 0x28
          tflite::micro::GetTensorShape(bias),
   12b0c:	4629      	mov	r1, r5
   12b0e:	a830      	add	r0, sp, #192	; 0xc0
   12b10:	f006 faa6 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   12b14:	2d00      	cmp	r5, #0
   12b16:	f43f af1d 	beq.w	12954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
   12b1a:	682b      	ldr	r3, [r5, #0]
   12b1c:	9303      	str	r3, [sp, #12]
          tflite::micro::GetTensorShape(output),
   12b1e:	4659      	mov	r1, fp
   12b20:	a836      	add	r0, sp, #216	; 0xd8
   12b22:	f006 fa9d 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   12b26:	f1bb 0f00 	cmp.w	fp, #0
   12b2a:	d001      	beq.n	12b30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f4>
   12b2c:	f8db b000 	ldr.w	fp, [fp]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
  const int32_t input_offset = params.input_offset;
   12b30:	9b46      	ldr	r3, [sp, #280]	; 0x118
   12b32:	930c      	str	r3, [sp, #48]	; 0x30
  const int32_t filter_offset = params.weights_offset;
   12b34:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   12b36:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
   12b38:	930d      	str	r3, [sp, #52]	; 0x34
  const int32_t output_offset = params.output_offset;
   12b3a:	9b48      	ldr	r3, [sp, #288]	; 0x120
   12b3c:	930e      	str	r3, [sp, #56]	; 0x38
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
   12b3e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   12b40:	9304      	str	r3, [sp, #16]
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   12b42:	2d01      	cmp	r5, #1
  const int32_t output_activation_max = params.quantized_activation_max;
   12b44:	9b4c      	ldr	r3, [sp, #304]	; 0x130
   12b46:	9305      	str	r3, [sp, #20]
  const int output_shift = params.output_shift;
   12b48:	e9dd a449 	ldrd	sl, r4, [sp, #292]	; 0x124
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   12b4c:	f77f af02 	ble.w	12954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
   12b50:	9b36      	ldr	r3, [sp, #216]	; 0xd8
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
   12b52:	2b00      	cmp	r3, #0
   12b54:	f77f aefe 	ble.w	12954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   12b58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   12b5c:	428a      	cmp	r2, r1
   12b5e:	f73f aef9 	bgt.w	12954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   12b62:	3b01      	subs	r3, #1
   12b64:	4619      	mov	r1, r3
   12b66:	a836      	add	r0, sp, #216	; 0xd8
   12b68:	9302      	str	r3, [sp, #8]
   12b6a:	f006 fa09 	bl	18f80 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   12b6e:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   12b70:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   12b72:	aa36      	add	r2, sp, #216	; 0xd8
   12b74:	1ea9      	subs	r1, r5, #2
   12b76:	a82a      	add	r0, sp, #168	; 0xa8
   12b78:	f006 f97f 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   12b7c:	1e69      	subs	r1, r5, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   12b7e:	9006      	str	r0, [sp, #24]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   12b80:	a82a      	add	r0, sp, #168	; 0xa8
   12b82:	f006 f937 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int b = 0; b < batches; ++b) {
   12b86:	2c00      	cmp	r4, #0
   12b88:	f1c4 0100 	rsb	r1, r4, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   12b8c:	f04f 0301 	mov.w	r3, #1
   12b90:	bfc8      	it	gt
   12b92:	2100      	movgt	r1, #0
   12b94:	408b      	lsls	r3, r1
   12b96:	3b01      	subs	r3, #1
   12b98:	9307      	str	r3, [sp, #28]
  return a >> offset;
   12b9a:	105b      	asrs	r3, r3, #1
   12b9c:	2200      	movs	r2, #0
   12b9e:	9310      	str	r3, [sp, #64]	; 0x40
  int left_shift = shift > 0 ? shift : 0;
   12ba0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   12ba4:	9202      	str	r2, [sp, #8]
   12ba6:	4694      	mov	ip, r2
   12ba8:	9311      	str	r3, [sp, #68]	; 0x44
   12baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12bac:	4563      	cmp	r3, ip
   12bae:	f340 8085 	ble.w	12cbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x380>
   12bb2:	9b02      	ldr	r3, [sp, #8]
   12bb4:	2500      	movs	r5, #0
   12bb6:	445b      	add	r3, fp
   12bb8:	9308      	str	r3, [sp, #32]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   12bba:	462c      	mov	r4, r5
   12bbc:	9b06      	ldr	r3, [sp, #24]
   12bbe:	42a3      	cmp	r3, r4
   12bc0:	dd74      	ble.n	12cac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>
      int32_t acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   12bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12bc4:	4413      	add	r3, r2
   12bc6:	9309      	str	r3, [sp, #36]	; 0x24
   12bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12bca:	eb03 0905 	add.w	r9, r3, r5
      int32_t acc = 0;
   12bce:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   12bd0:	461e      	mov	r6, r3
   12bd2:	42b0      	cmp	r0, r6
   12bd4:	dd18      	ble.n	12c08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
        int32_t input_val = input_data[b * accum_depth + d];
   12bd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
   12bd8:	f819 eb01 	ldrb.w	lr, [r9], #1
        int32_t input_val = input_data[b * accum_depth + d];
   12bdc:	f817 8b01 	ldrb.w	r8, [r7], #1
   12be0:	9709      	str	r7, [sp, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   12be2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   12be4:	44be      	add	lr, r7
   12be6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   12be8:	44b8      	add	r8, r7
   12bea:	fb08 330e 	mla	r3, r8, lr, r3
      for (int d = 0; d < accum_depth; ++d) {
   12bee:	3601      	adds	r6, #1
   12bf0:	e7ef      	b.n	12bd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
   12bf2:	bf00      	nop
   12bf4:	0003617c 	.word	0x0003617c
   12bf8:	00036184 	.word	0x00036184
   12bfc:	00036178 	.word	0x00036178
   12c00:	00036180 	.word	0x00036180
   12c04:	00000000 	.word	0x00000000
      }
      if (bias_data) {
   12c08:	9e03      	ldr	r6, [sp, #12]
   12c0a:	b116      	cbz	r6, 12c12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d6>
        acc += bias_data[out_c];
   12c0c:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
   12c10:	4433      	add	r3, r6
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   12c12:	9e11      	ldr	r6, [sp, #68]	; 0x44
   12c14:	40b3      	lsls	r3, r6
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   12c16:	459a      	cmp	sl, r3
   12c18:	d128      	bne.n	12c6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x330>
   12c1a:	f10a 4600 	add.w	r6, sl, #2147483648	; 0x80000000
   12c1e:	f1d6 0800 	rsbs	r8, r6, #0
   12c22:	eb48 0806 	adc.w	r8, r8, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   12c26:	4f30      	ldr	r7, [pc, #192]	; (12ce8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>)
  std::int64_t ab_64 = a_64 * b_64;
   12c28:	fb83 360a 	smull	r3, r6, r3, sl
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   12c2c:	2e00      	cmp	r6, #0
   12c2e:	bfac      	ite	ge
   12c30:	f04f 4e80 	movge.w	lr, #1073741824	; 0x40000000
   12c34:	46be      	movlt	lr, r7
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   12c36:	f1b8 0f00 	cmp.w	r8, #0
   12c3a:	d11a      	bne.n	12c72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x336>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   12c3c:	eb1e 0303 	adds.w	r3, lr, r3
   12c40:	eb46 76ee 	adc.w	r6, r6, lr, asr #31
   12c44:	2e00      	cmp	r6, #0
   12c46:	da04      	bge.n	12c52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x316>
   12c48:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   12c4c:	19db      	adds	r3, r3, r7
   12c4e:	f146 0600 	adc.w	r6, r6, #0
   12c52:	0fdb      	lsrs	r3, r3, #31
   12c54:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  assert(exponent <= 31);
   12c58:	291f      	cmp	r1, #31
   12c5a:	4405      	add	r5, r0
   12c5c:	dd0c      	ble.n	12c78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33c>
   12c5e:	4b23      	ldr	r3, [pc, #140]	; (12cec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b0>)
   12c60:	4a23      	ldr	r2, [pc, #140]	; (12cf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b4>)
   12c62:	4824      	ldr	r0, [pc, #144]	; (12cf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b8>)
   12c64:	f240 1167 	movw	r1, #359	; 0x167
   12c68:	f002 ffee 	bl	15c48 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   12c6c:	f04f 0800 	mov.w	r8, #0
   12c70:	e7d9      	b.n	12c26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
   12c72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   12c76:	e7ef      	b.n	12c58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31c>
  return a & b;
   12c78:	9e07      	ldr	r6, [sp, #28]
   12c7a:	ea06 0903 	and.w	r9, r6, r3
  return a + b;
   12c7e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   12c80:	eb06 78d3 	add.w	r8, r6, r3, lsr #31
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
   12c84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  return a >> offset;
   12c86:	410b      	asrs	r3, r1
  return a + b;
   12c88:	45c1      	cmp	r9, r8
   12c8a:	bfc8      	it	gt
   12c8c:	3301      	addgt	r3, #1
   12c8e:	4433      	add	r3, r6
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
   12c90:	9e04      	ldr	r6, [sp, #16]
   12c92:	42b3      	cmp	r3, r6
   12c94:	bfb8      	it	lt
   12c96:	4633      	movlt	r3, r6
   12c98:	9e05      	ldr	r6, [sp, #20]
   12c9a:	42b3      	cmp	r3, r6
   12c9c:	bfa8      	it	ge
   12c9e:	4633      	movge	r3, r6
   12ca0:	9e08      	ldr	r6, [sp, #32]
   12ca2:	f806 3b01 	strb.w	r3, [r6], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   12ca6:	3401      	adds	r4, #1
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
   12ca8:	9608      	str	r6, [sp, #32]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   12caa:	e787      	b.n	12bbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>
  for (int b = 0; b < batches; ++b) {
   12cac:	9c02      	ldr	r4, [sp, #8]
   12cae:	9b06      	ldr	r3, [sp, #24]
   12cb0:	441c      	add	r4, r3
   12cb2:	f10c 0c01 	add.w	ip, ip, #1
   12cb6:	9402      	str	r4, [sp, #8]
   12cb8:	4402      	add	r2, r0
   12cba:	e776      	b.n	12baa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26e>
   12cbc:	a836      	add	r0, sp, #216	; 0xd8
   12cbe:	f006 f88e 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
   12cc2:	a830      	add	r0, sp, #192	; 0xc0
   12cc4:	f006 f88b 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
   12cc8:	a82a      	add	r0, sp, #168	; 0xa8
   12cca:	f006 f888 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
   12cce:	a824      	add	r0, sp, #144	; 0x90
   12cd0:	e6fa      	b.n	12ac8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   12cd2:	697d      	ldr	r5, [r7, #20]
   12cd4:	f002 f88e 	bl	14df4 <TfLiteTypeGetName>
   12cd8:	7a23      	ldrb	r3, [r4, #8]
   12cda:	4907      	ldr	r1, [pc, #28]	; (12cf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>)
   12cdc:	4602      	mov	r2, r0
   12cde:	4638      	mov	r0, r7
   12ce0:	47a8      	blx	r5
      return kTfLiteError;
   12ce2:	2001      	movs	r0, #1
   12ce4:	e6fb      	b.n	12ade <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
   12ce6:	bf00      	nop
   12ce8:	c0000001 	.word	0xc0000001
   12cec:	0003e10c 	.word	0x0003e10c
   12cf0:	0003e11b 	.word	0x0003e11b
   12cf4:	0003e170 	.word	0x0003e170
   12cf8:	0003e383 	.word	0x0003e383

00012cfc <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
   12cfc:	b570      	push	{r4, r5, r6, lr}
  fully_connected_registration.init = Init;
   12cfe:	4c0b      	ldr	r4, [pc, #44]	; (12d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
  fully_connected_registration.free = nullptr;
  fully_connected_registration.prepare = Prepare;
   12d00:	4a0b      	ldr	r2, [pc, #44]	; (12d30 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x34>)
   12d02:	60a2      	str	r2, [r4, #8]
  fully_connected_registration.init = Init;
   12d04:	4b0b      	ldr	r3, [pc, #44]	; (12d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
  fully_connected_registration.invoke = Eval;
   12d06:	4a0c      	ldr	r2, [pc, #48]	; (12d38 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.init = Init;
   12d08:	6023      	str	r3, [r4, #0]
  fully_connected_registration.free = nullptr;
   12d0a:	2300      	movs	r3, #0
  fully_connected_registration.profiling_string = nullptr;
   12d0c:	e9c4 2303 	strd	r2, r3, [r4, #12]
  fully_connected_registration.free = nullptr;
   12d10:	6063      	str	r3, [r4, #4]
TfLiteRegistration Register_FULLY_CONNECTED() {
   12d12:	4606      	mov	r6, r0
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
   12d14:	e9c4 3305 	strd	r3, r3, [r4, #20]
  fully_connected_registration.version = 0;
   12d18:	61e3      	str	r3, [r4, #28]
  return fully_connected_registration;
   12d1a:	4605      	mov	r5, r0
   12d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12d20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   12d24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
   12d28:	4630      	mov	r0, r6
   12d2a:	bd70      	pop	{r4, r5, r6, pc}
   12d2c:	200243bc 	.word	0x200243bc
   12d30:	000127a5 	.word	0x000127a5
   12d34:	00018f6f 	.word	0x00018f6f
   12d38:	0001293d 	.word	0x0001293d

00012d3c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  if (activation == kTfLiteActRelu) {
   12d3c:	2901      	cmp	r1, #1
   12d3e:	d103      	bne.n	12d48 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0xc>
    *activation_min = 0;
   12d40:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
   12d42:	61c3      	str	r3, [r0, #28]
    *activation_max = std::numeric_limits<T>::max();
   12d44:	4b09      	ldr	r3, [pc, #36]	; (12d6c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x30>)
   12d46:	e004      	b.n	12d52 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
  } else if (activation == kTfLiteActRelu6) {
   12d48:	2903      	cmp	r1, #3
   12d4a:	d104      	bne.n	12d56 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1a>
    *activation_min = 0;
   12d4c:	2300      	movs	r3, #0
   12d4e:	61c3      	str	r3, [r0, #28]
    *activation_max = 6;
   12d50:	4b07      	ldr	r3, [pc, #28]	; (12d70 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x34>)
    *activation_max = std::numeric_limits<T>::max();
   12d52:	6203      	str	r3, [r0, #32]
    TfLiteFusedActivation activation) {
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
   12d54:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
   12d56:	2902      	cmp	r1, #2
   12d58:	d104      	bne.n	12d64 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x28>
    *activation_min = -1;
   12d5a:	4b06      	ldr	r3, [pc, #24]	; (12d74 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x38>)
   12d5c:	61c3      	str	r3, [r0, #28]
    *activation_max = 1;
   12d5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   12d62:	e7f6      	b.n	12d52 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
   12d64:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   12d68:	e7eb      	b.n	12d42 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x6>
   12d6a:	bf00      	nop
   12d6c:	7f7fffff 	.word	0x7f7fffff
   12d70:	40c00000 	.word	0x40c00000
   12d74:	bf800000 	.word	0xbf800000

00012d78 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
   12d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d7c:	ed2d 8b04 	vpush	{d8-d9}
   12d80:	461f      	mov	r7, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   12d82:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
   12d84:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   12d86:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
   12d88:	4604      	mov	r4, r0
   12d8a:	460e      	mov	r6, r1
   12d8c:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   12d8e:	d001      	beq.n	12d94 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   12d90:	f008 ff9f 	bl	1bcd2 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   12d94:	683b      	ldr	r3, [r7, #0]
   12d96:	2b04      	cmp	r3, #4
   12d98:	d1fa      	bne.n	12d90 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   12d9a:	2300      	movs	r3, #0
   12d9c:	4619      	mov	r1, r3
   12d9e:	463a      	mov	r2, r7
   12da0:	4630      	mov	r0, r6
   12da2:	f006 f86a 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   12da6:	2303      	movs	r3, #3
   12da8:	4619      	mov	r1, r3
   12daa:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   12dac:	9009      	str	r0, [sp, #36]	; 0x24
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   12dae:	4630      	mov	r0, r6
   12db0:	f006 f863 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   12db4:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   12db6:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_height = input_shape.Dims(1);
   12db8:	4630      	mov	r0, r6
   12dba:	f006 f81b 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   12dbe:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   12dc0:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_width = input_shape.Dims(2);
   12dc2:	4630      	mov	r0, r6
   12dc4:	f006 f816 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   12dc8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   12dca:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
   12dcc:	4638      	mov	r0, r7
   12dce:	f006 f811 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   12dd2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   12dd4:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   12dd6:	4638      	mov	r0, r7
   12dd8:	f006 f80c 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   12ddc:	68e3      	ldr	r3, [r4, #12]
   12dde:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   12de0:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   12de2:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   12de4:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   12de6:	f04f 0b00 	mov.w	fp, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   12dea:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  for (int batch = 0; batch < batches; ++batch) {
   12dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12df0:	459b      	cmp	fp, r3
   12df2:	f280 8093 	bge.w	12f1c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
   12df6:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   12dfa:	f8cd a00c 	str.w	sl, [sp, #12]
   12dfe:	9b03      	ldr	r3, [sp, #12]
   12e00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12e02:	4293      	cmp	r3, r2
   12e04:	f280 8087 	bge.w	12f16 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19e>
   12e08:	f04f 0900 	mov.w	r9, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   12e0c:	f8cd 9010 	str.w	r9, [sp, #16]
   12e10:	9b04      	ldr	r3, [sp, #16]
   12e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12e14:	4293      	cmp	r3, r2
   12e16:	da78      	bge.n	12f0a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   12e18:	2300      	movs	r3, #0
   12e1a:	9302      	str	r3, [sp, #8]
   12e1c:	9b02      	ldr	r3, [sp, #8]
   12e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12e20:	4293      	cmp	r3, r2
   12e22:	da6c      	bge.n	12efe <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x186>
              (out_x * stride_width) - params.padding_values.width;
   12e24:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
   12e28:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          float filter_count = 0;
   12e2c:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 12f28 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1b0>
          const int in_x_origin =
   12e30:	eba9 0308 	sub.w	r3, r9, r8
   12e34:	9306      	str	r3, [sp, #24]
          const int in_y_origin =
   12e36:	ebaa 0305 	sub.w	r3, sl, r5
   12e3a:	9307      	str	r3, [sp, #28]
          const int filter_x_start = std::max(0, -in_x_origin);
   12e3c:	eba8 0309 	sub.w	r3, r8, r9
   12e40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
              std::min(params.filter_width, input_width - in_x_origin);
   12e44:	9a06      	ldr	r2, [sp, #24]
   12e46:	9305      	str	r3, [sp, #20]
   12e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12e4a:	1a9a      	subs	r2, r3, r2
   12e4c:	69a3      	ldr	r3, [r4, #24]
   12e4e:	429a      	cmp	r2, r3
   12e50:	bfa8      	it	ge
   12e52:	461a      	movge	r2, r3
   12e54:	9211      	str	r2, [sp, #68]	; 0x44
              std::min(params.filter_height, input_height - in_y_origin);
   12e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12e58:	9a07      	ldr	r2, [sp, #28]
   12e5a:	1a9a      	subs	r2, r3, r2
   12e5c:	6963      	ldr	r3, [r4, #20]
   12e5e:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   12e60:	eba5 050a 	sub.w	r5, r5, sl
   12e64:	bfa8      	it	ge
   12e66:	461a      	movge	r2, r3
   12e68:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    min(const _Tp& __a, const _Tp& __b)
   12e6c:	9208      	str	r2, [sp, #32]
          float total = 0.f;
   12e6e:	eef0 8a48 	vmov.f32	s17, s16
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   12e72:	9b08      	ldr	r3, [sp, #32]
   12e74:	42ab      	cmp	r3, r5
   12e76:	dd1e      	ble.n	12eb6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13e>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   12e78:	9b07      	ldr	r3, [sp, #28]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   12e7a:	f8dd 8014 	ldr.w	r8, [sp, #20]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   12e7e:	18ea      	adds	r2, r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   12e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12e82:	4598      	cmp	r8, r3
   12e84:	da15      	bge.n	12eb2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13a>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   12e86:	9b02      	ldr	r3, [sp, #8]
   12e88:	9300      	str	r3, [sp, #0]
   12e8a:	9b06      	ldr	r3, [sp, #24]
   12e8c:	9213      	str	r2, [sp, #76]	; 0x4c
   12e8e:	4443      	add	r3, r8
   12e90:	4659      	mov	r1, fp
   12e92:	4630      	mov	r0, r6
   12e94:	f005 ffcf 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   12e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   12e9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   12e9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              total +=
   12ea0:	edd0 7a00 	vldr	s15, [r0]
              filter_count++;
   12ea4:	ee38 8a29 	vadd.f32	s16, s16, s19
              total +=
   12ea8:	ee78 8aa7 	vadd.f32	s17, s17, s15
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   12eac:	f108 0801 	add.w	r8, r8, #1
   12eb0:	e7e6      	b.n	12e80 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   12eb2:	3501      	adds	r5, #1
   12eb4:	e7dd      	b.n	12e72 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfa>
            }
          }
          const float average = total / filter_count;
   12eb6:	ee88 9a88 	vdiv.f32	s18, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   12eba:	9b02      	ldr	r3, [sp, #8]
   12ebc:	9300      	str	r3, [sp, #0]
   12ebe:	4659      	mov	r1, fp
   12ec0:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   12ec4:	4638      	mov	r0, r7
   12ec6:	f005 ffb6 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   12eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   12ed0:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
                                           params.float_activation_max);
   12ed4:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
        for (int channel = 0; channel < depth; ++channel) {
   12ed8:	9b02      	ldr	r3, [sp, #8]
      return __a;
   12eda:	eeb4 8ac9 	vcmpe.f32	s16, s18
   12ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12ee2:	bfd8      	it	le
   12ee4:	eeb0 8a49 	vmovle.f32	s16, s18
	return __b;
   12ee8:	eef4 8a48 	vcmp.f32	s17, s16
   12eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12ef0:	bf48      	it	mi
   12ef2:	eeb0 8a68 	vmovmi.f32	s16, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   12ef6:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   12efa:	3301      	adds	r3, #1
   12efc:	e78d      	b.n	12e1a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   12efe:	9b04      	ldr	r3, [sp, #16]
   12f00:	3301      	adds	r3, #1
   12f02:	9304      	str	r3, [sp, #16]
   12f04:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12f06:	4499      	add	r9, r3
   12f08:	e782      	b.n	12e10 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   12f0a:	9b03      	ldr	r3, [sp, #12]
   12f0c:	3301      	adds	r3, #1
   12f0e:	9303      	str	r3, [sp, #12]
   12f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12f12:	449a      	add	sl, r3
   12f14:	e773      	b.n	12dfe <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   12f16:	f10b 0b01 	add.w	fp, fp, #1
   12f1a:	e768      	b.n	12dee <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x76>
        }
      }
    }
  }
}
   12f1c:	b015      	add	sp, #84	; 0x54
   12f1e:	ecbd 8b04 	vpop	{d8-d9}
   12f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f26:	bf00      	nop
   12f28:	00000000 	.word	0x00000000

00012f2c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
   12f2c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   12f2e:	4d05      	ldr	r5, [pc, #20]	; (12f44 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x18>)
TfLiteRegistration Register_MAX_POOL_2D() {
   12f30:	4606      	mov	r6, r0
          /*version=*/0};
   12f32:	4604      	mov	r4, r0
   12f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12f38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   12f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   12f40:	4630      	mov	r0, r6
   12f42:	bd70      	pop	{r4, r5, r6, pc}
   12f44:	0001c900 	.word	0x0001c900

00012f48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
  if (activation == kTfLiteActRelu) {
   12f48:	2801      	cmp	r0, #1
   12f4a:	d103      	bne.n	12f54 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0xc>
    *activation_min = 0;
   12f4c:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
   12f4e:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
   12f50:	4b09      	ldr	r3, [pc, #36]	; (12f78 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x30>)
   12f52:	e004      	b.n	12f5e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
  } else if (activation == kTfLiteActRelu6) {
   12f54:	2803      	cmp	r0, #3
   12f56:	d104      	bne.n	12f62 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x1a>
    *activation_min = 0;
   12f58:	2300      	movs	r3, #0
   12f5a:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
   12f5c:	4b07      	ldr	r3, [pc, #28]	; (12f7c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x34>)
    *activation_max = std::numeric_limits<T>::max();
   12f5e:	6013      	str	r3, [r2, #0]
  }
}
   12f60:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
   12f62:	2802      	cmp	r0, #2
   12f64:	d104      	bne.n	12f70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x28>
    *activation_min = -1;
   12f66:	4b06      	ldr	r3, [pc, #24]	; (12f80 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
   12f68:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
   12f6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   12f6e:	e7f6      	b.n	12f5e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
   12f70:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   12f74:	e7eb      	b.n	12f4e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x6>
   12f76:	bf00      	nop
   12f78:	7f7fffff 	.word	0x7f7fffff
   12f7c:	40c00000 	.word	0x40c00000
   12f80:	bf800000 	.word	0xbf800000

00012f84 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   12f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   12f88:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   12f8c:	4604      	mov	r4, r0
   12f8e:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   12f90:	f1b8 0f00 	cmp.w	r8, #0
   12f94:	d101      	bne.n	12f9a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
   12f96:	f008 fe9c 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   12f9a:	694f      	ldr	r7, [r1, #20]
   12f9c:	2f00      	cmp	r7, #0
   12f9e:	d0fa      	beq.n	12f96 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x12>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   12fa0:	2200      	movs	r2, #0
   12fa2:	f007 fde3 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   12fa6:	4606      	mov	r6, r0
   12fa8:	b960      	cbnz	r0, 12fc4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x40>
   12faa:	4b11      	ldr	r3, [pc, #68]	; (12ff0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
   12fac:	6965      	ldr	r5, [r4, #20]
   12fae:	9300      	str	r3, [sp, #0]
   12fb0:	f44f 738e 	mov.w	r3, #284	; 0x11c
  TF_LITE_ENSURE(context, output != nullptr);
   12fb4:	4620      	mov	r0, r4
   12fb6:	4a0f      	ldr	r2, [pc, #60]	; (12ff4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   12fb8:	490f      	ldr	r1, [pc, #60]	; (12ff8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
   12fba:	47a8      	blx	r5
   12fbc:	2001      	movs	r0, #1
}
   12fbe:	b002      	add	sp, #8
   12fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   12fc4:	2200      	movs	r2, #0
   12fc6:	4629      	mov	r1, r5
   12fc8:	4620      	mov	r0, r4
   12fca:	f007 fdd2 	bl	1ab72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   12fce:	4603      	mov	r3, r0
   12fd0:	b928      	cbnz	r0, 12fde <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
   12fd2:	4b0a      	ldr	r3, [pc, #40]	; (12ffc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   12fd4:	9300      	str	r3, [sp, #0]
   12fd6:	6965      	ldr	r5, [r4, #20]
   12fd8:	f44f 738f 	mov.w	r3, #286	; 0x11e
   12fdc:	e7ea      	b.n	12fb4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
   12fde:	f8cd 8000 	str.w	r8, [sp]
   12fe2:	4632      	mov	r2, r6
   12fe4:	4639      	mov	r1, r7
   12fe6:	4620      	mov	r0, r4
   12fe8:	f006 faec 	bl	195c4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
   12fec:	e7e7      	b.n	12fbe <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   12fee:	bf00      	nop
   12ff0:	0003e276 	.word	0x0003e276
   12ff4:	0003e6d0 	.word	0x0003e6d0
   12ff8:	0003e25f 	.word	0x0003e25f
   12ffc:	0003e299 	.word	0x0003e299

00013000 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   13000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   13004:	694e      	ldr	r6, [r1, #20]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   13006:	b0ac      	sub	sp, #176	; 0xb0
   13008:	4680      	mov	r8, r0
   1300a:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1300c:	b90e      	cbnz	r6, 13012 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x12>
   1300e:	f008 fe60 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
   13012:	690d      	ldr	r5, [r1, #16]
   13014:	2d00      	cmp	r5, #0
   13016:	d0fa      	beq.n	1300e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
  return GetMutableEvalInput(context, node, index);
   13018:	2200      	movs	r2, #0
   1301a:	f005 ff5f 	bl	18edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
   1301e:	4621      	mov	r1, r4
   13020:	4607      	mov	r7, r0
   13022:	2200      	movs	r2, #0
   13024:	4640      	mov	r0, r8
   13026:	f005 ffc6 	bl	18fb6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
   1302a:	4604      	mov	r4, r0
  switch (input->type) {
   1302c:	7a38      	ldrb	r0, [r7, #8]
   1302e:	2803      	cmp	r0, #3
   13030:	d038      	beq.n	130a4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
   13032:	2809      	cmp	r0, #9
   13034:	d05c      	beq.n	130f0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xf0>
   13036:	2801      	cmp	r0, #1
   13038:	f040 80b4 	bne.w	131a4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
  CalculateActivationRange(params->activation, &activation_min,
   1303c:	aa11      	add	r2, sp, #68	; 0x44
   1303e:	7d30      	ldrb	r0, [r6, #20]
   13040:	a90d      	add	r1, sp, #52	; 0x34
   13042:	f7ff ff81 	bl	12f48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
   13046:	68b3      	ldr	r3, [r6, #8]
   13048:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
   1304a:	6873      	ldr	r3, [r6, #4]
   1304c:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
   1304e:	6933      	ldr	r3, [r6, #16]
   13050:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
   13052:	68f3      	ldr	r3, [r6, #12]
   13054:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
   13056:	686b      	ldr	r3, [r5, #4]
   13058:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
   1305c:	682b      	ldr	r3, [r5, #0]
   1305e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.float_activation_min = data.activation_min_f32;
   13062:	69eb      	ldr	r3, [r5, #28]
   13064:	932a      	str	r3, [sp, #168]	; 0xa8
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   13066:	4639      	mov	r1, r7
  op_params.float_activation_max = data.activation_max_f32;
   13068:	6a2b      	ldr	r3, [r5, #32]
   1306a:	932b      	str	r3, [sp, #172]	; 0xac
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   1306c:	a815      	add	r0, sp, #84	; 0x54
   1306e:	f005 fff7 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   13072:	683a      	ldr	r2, [r7, #0]
   13074:	9205      	str	r2, [sp, #20]
                         tflite::micro::GetTensorShape(output),
   13076:	4621      	mov	r1, r4
   13078:	a81b      	add	r0, sp, #108	; 0x6c
   1307a:	f005 fff1 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1307e:	9a05      	ldr	r2, [sp, #20]
   13080:	b104      	cbz	r4, 13084 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x84>
   13082:	6824      	ldr	r4, [r4, #0]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   13084:	9400      	str	r4, [sp, #0]
   13086:	ab1b      	add	r3, sp, #108	; 0x6c
   13088:	a915      	add	r1, sp, #84	; 0x54
   1308a:	a821      	add	r0, sp, #132	; 0x84
   1308c:	f006 f8ed 	bl	1926a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
   13090:	a81b      	add	r0, sp, #108	; 0x6c
   13092:	f005 fea4 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   13096:	a815      	add	r0, sp, #84	; 0x54
   13098:	f005 fea1 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1309c:	2000      	movs	r0, #0
}
   1309e:	b02c      	add	sp, #176	; 0xb0
   130a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  op_params.stride_height = params->stride_height;
   130a4:	68b3      	ldr	r3, [r6, #8]
   130a6:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
   130a8:	6873      	ldr	r3, [r6, #4]
   130aa:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
   130ac:	6933      	ldr	r3, [r6, #16]
   130ae:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
   130b0:	68f3      	ldr	r3, [r6, #12]
   130b2:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
   130b4:	686b      	ldr	r3, [r5, #4]
   130b6:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
   130ba:	682b      	ldr	r3, [r5, #0]
   130bc:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.quantized_activation_min = data.activation_min;
   130c0:	696b      	ldr	r3, [r5, #20]
   130c2:	9328      	str	r3, [sp, #160]	; 0xa0
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   130c4:	4639      	mov	r1, r7
  op_params.quantized_activation_max = data.activation_max;
   130c6:	69ab      	ldr	r3, [r5, #24]
   130c8:	9329      	str	r3, [sp, #164]	; 0xa4
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   130ca:	a815      	add	r0, sp, #84	; 0x54
   130cc:	f005 ffc8 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   130d0:	683a      	ldr	r2, [r7, #0]
   130d2:	9205      	str	r2, [sp, #20]
                         tflite::micro::GetTensorShape(output),
   130d4:	4621      	mov	r1, r4
   130d6:	a81b      	add	r0, sp, #108	; 0x6c
   130d8:	f005 ffc2 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   130dc:	9a05      	ldr	r2, [sp, #20]
   130de:	b104      	cbz	r4, 130e2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
   130e0:	6824      	ldr	r4, [r4, #0]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   130e2:	9400      	str	r4, [sp, #0]
   130e4:	ab1b      	add	r3, sp, #108	; 0x6c
   130e6:	a915      	add	r1, sp, #84	; 0x54
   130e8:	a821      	add	r0, sp, #132	; 0x84
   130ea:	f006 f998 	bl	1941e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   130ee:	e7cf      	b.n	13090 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   130f0:	4639      	mov	r1, r7
   130f2:	a815      	add	r0, sp, #84	; 0x54
   130f4:	f005 ffb4 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   130f8:	4621      	mov	r1, r4
   130fa:	a81b      	add	r0, sp, #108	; 0x6c
   130fc:	f005 ffb0 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   13100:	2303      	movs	r3, #3
   13102:	4619      	mov	r1, r3
   13104:	aa1b      	add	r2, sp, #108	; 0x6c
   13106:	a815      	add	r0, sp, #84	; 0x54
   13108:	f005 feb7 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.n = 1;
   1310c:	f04f 0901 	mov.w	r9, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   13110:	4682      	mov	sl, r0
  input_dims.h = input_shape.Dims(1);
   13112:	4649      	mov	r1, r9
   13114:	a815      	add	r0, sp, #84	; 0x54
  input_dims.n = 1;
   13116:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  input_dims.h = input_shape.Dims(1);
   1311a:	f005 fe6b 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  input_dims.w = input_shape.Dims(2);
   1311e:	2102      	movs	r1, #2
  input_dims.h = input_shape.Dims(1);
   13120:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.w = input_shape.Dims(2);
   13122:	a815      	add	r0, sp, #84	; 0x54
   13124:	f005 fe66 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.h = output_shape.Dims(1);
   13128:	4649      	mov	r1, r9
  input_dims.c = depth;
   1312a:	e9cd 0a0b 	strd	r0, sl, [sp, #44]	; 0x2c
  output_dims.h = output_shape.Dims(1);
   1312e:	a81b      	add	r0, sp, #108	; 0x6c
  output_dims.n = 1;
   13130:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  output_dims.h = output_shape.Dims(1);
   13134:	f005 fe5e 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.w = output_shape.Dims(2);
   13138:	2102      	movs	r1, #2
  output_dims.h = output_shape.Dims(1);
   1313a:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.w = output_shape.Dims(2);
   1313c:	a81b      	add	r0, sp, #108	; 0x6c
   1313e:	f005 fe59 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  pool_params.stride.h = params->stride_height;
   13142:	68b3      	ldr	r3, [r6, #8]
   13144:	9322      	str	r3, [sp, #136]	; 0x88
  pool_params.stride.w = params->stride_width;
   13146:	6873      	ldr	r3, [r6, #4]
   13148:	9321      	str	r3, [sp, #132]	; 0x84
  pool_params.padding.h = data.padding.height;
   1314a:	686b      	ldr	r3, [r5, #4]
   1314c:	9324      	str	r3, [sp, #144]	; 0x90
  pool_params.padding.w = data.padding.width;
   1314e:	682b      	ldr	r3, [r5, #0]
   13150:	9323      	str	r3, [sp, #140]	; 0x8c
  pool_params.activation.min = data.activation_min;
   13152:	696b      	ldr	r3, [r5, #20]
   13154:	9325      	str	r3, [sp, #148]	; 0x94
  pool_params.activation.max = data.activation_max;
   13156:	69ab      	ldr	r3, [r5, #24]
   13158:	9326      	str	r3, [sp, #152]	; 0x98
  filter_dims.h = params->filter_height;
   1315a:	6933      	ldr	r3, [r6, #16]
   1315c:	9312      	str	r3, [sp, #72]	; 0x48
  filter_dims.w = params->filter_width;
   1315e:	68f3      	ldr	r3, [r6, #12]
  if (data.buffer_idx > -1) {
   13160:	6929      	ldr	r1, [r5, #16]
  filter_dims.n = 1;
   13162:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  filter_dims.c = 1;
   13166:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
  ctx.buf = nullptr;
   1316a:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
   1316c:	4299      	cmp	r1, r3
  output_dims.c = depth;
   1316e:	e9cd 0a0f 	strd	r0, sl, [sp, #60]	; 0x3c
  ctx.size = 0;
   13172:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (data.buffer_idx > -1) {
   13176:	db04      	blt.n	13182 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   13178:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1317c:	4640      	mov	r0, r8
   1317e:	4798      	blx	r3
   13180:	9007      	str	r0, [sp, #28]
  return reinterpret_cast<const T*>(tensor->data.raw);
   13182:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13184:	b104      	cbz	r4, 13188 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x188>
   13186:	6824      	ldr	r4, [r4, #0]
  TFLITE_DCHECK_EQ(
   13188:	9402      	str	r4, [sp, #8]
   1318a:	aa0d      	add	r2, sp, #52	; 0x34
   1318c:	9201      	str	r2, [sp, #4]
   1318e:	aa11      	add	r2, sp, #68	; 0x44
   13190:	9200      	str	r2, [sp, #0]
   13192:	a921      	add	r1, sp, #132	; 0x84
   13194:	aa09      	add	r2, sp, #36	; 0x24
   13196:	a807      	add	r0, sp, #28
   13198:	f007 fb25 	bl	1a7e6 <arm_max_pool_s8>
   1319c:	2800      	cmp	r0, #0
   1319e:	f43f af77 	beq.w	13090 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90>
   131a2:	e734      	b.n	1300e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
   131a4:	f8d8 4014 	ldr.w	r4, [r8, #20]
   131a8:	f001 fe24 	bl	14df4 <TfLiteTypeGetName>
   131ac:	4902      	ldr	r1, [pc, #8]	; (131b8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
   131ae:	4602      	mov	r2, r0
   131b0:	4640      	mov	r0, r8
   131b2:	47a0      	blx	r4
      return kTfLiteError;
   131b4:	2001      	movs	r0, #1
   131b6:	e772      	b.n	1309e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
   131b8:	0003e747 	.word	0x0003e747

000131bc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   131bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   131c0:	694d      	ldr	r5, [r1, #20]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   131c2:	b0ac      	sub	sp, #176	; 0xb0
   131c4:	4680      	mov	r8, r0
   131c6:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
   131c8:	b90d      	cbnz	r5, 131ce <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x12>
   131ca:	f008 fd82 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
   131ce:	690e      	ldr	r6, [r1, #16]
   131d0:	2e00      	cmp	r6, #0
   131d2:	d0fa      	beq.n	131ca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
  return GetMutableEvalInput(context, node, index);
   131d4:	2200      	movs	r2, #0
   131d6:	f005 fe81 	bl	18edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
   131da:	4621      	mov	r1, r4
   131dc:	4607      	mov	r7, r0
   131de:	2200      	movs	r2, #0
   131e0:	4640      	mov	r0, r8
   131e2:	f005 fee8 	bl	18fb6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
   131e6:	4604      	mov	r4, r0
  switch (input->type) {
   131e8:	7a38      	ldrb	r0, [r7, #8]
   131ea:	2803      	cmp	r0, #3
   131ec:	d038      	beq.n	13260 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
   131ee:	2809      	cmp	r0, #9
   131f0:	d05c      	beq.n	132ac <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xf0>
   131f2:	2801      	cmp	r0, #1
   131f4:	f040 80ba 	bne.w	1336c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1b0>
  CalculateActivationRange(params->activation, &activation_min,
   131f8:	aa11      	add	r2, sp, #68	; 0x44
   131fa:	7d28      	ldrb	r0, [r5, #20]
   131fc:	a90d      	add	r1, sp, #52	; 0x34
   131fe:	f7ff fea3 	bl	12f48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
   13202:	68ab      	ldr	r3, [r5, #8]
   13204:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
   13206:	686b      	ldr	r3, [r5, #4]
   13208:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
   1320a:	692b      	ldr	r3, [r5, #16]
   1320c:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
   1320e:	68eb      	ldr	r3, [r5, #12]
   13210:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
   13212:	6873      	ldr	r3, [r6, #4]
   13214:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
   13218:	6833      	ldr	r3, [r6, #0]
   1321a:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.float_activation_min = activation_min;
   1321e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13220:	932a      	str	r3, [sp, #168]	; 0xa8
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   13222:	4639      	mov	r1, r7
  op_params.float_activation_max = activation_max;
   13224:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13226:	932b      	str	r3, [sp, #172]	; 0xac
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   13228:	a815      	add	r0, sp, #84	; 0x54
   1322a:	f005 ff19 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   1322e:	683a      	ldr	r2, [r7, #0]
   13230:	9205      	str	r2, [sp, #20]
                             tflite::micro::GetTensorShape(output),
   13232:	4621      	mov	r1, r4
   13234:	a81b      	add	r0, sp, #108	; 0x6c
   13236:	f005 ff13 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1323a:	9a05      	ldr	r2, [sp, #20]
   1323c:	b104      	cbz	r4, 13240 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x84>
   1323e:	6824      	ldr	r4, [r4, #0]
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   13240:	9400      	str	r4, [sp, #0]
   13242:	ab1b      	add	r3, sp, #108	; 0x6c
   13244:	a915      	add	r1, sp, #84	; 0x54
   13246:	a821      	add	r0, sp, #132	; 0x84
   13248:	f7ff fd96 	bl	12d78 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                               tflite::micro::GetTensorShape(output),
   1324c:	a81b      	add	r0, sp, #108	; 0x6c
   1324e:	f005 fdc6 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   13252:	a815      	add	r0, sp, #84	; 0x54
   13254:	f005 fdc3 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   13258:	2000      	movs	r0, #0
}
   1325a:	b02c      	add	sp, #176	; 0xb0
   1325c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    op_params.stride_height = params->stride_height;
   13260:	68ab      	ldr	r3, [r5, #8]
   13262:	9324      	str	r3, [sp, #144]	; 0x90
    op_params.stride_width = params->stride_width;
   13264:	686b      	ldr	r3, [r5, #4]
   13266:	9325      	str	r3, [sp, #148]	; 0x94
    op_params.filter_height = params->filter_height;
   13268:	692b      	ldr	r3, [r5, #16]
   1326a:	9326      	str	r3, [sp, #152]	; 0x98
    op_params.filter_width = params->filter_width;
   1326c:	68eb      	ldr	r3, [r5, #12]
   1326e:	9327      	str	r3, [sp, #156]	; 0x9c
    op_params.padding_values.height = data.padding.height;
   13270:	6873      	ldr	r3, [r6, #4]
   13272:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    op_params.padding_values.width = data.padding.width;
   13276:	6833      	ldr	r3, [r6, #0]
   13278:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    op_params.quantized_activation_min = data.activation_min;
   1327c:	6973      	ldr	r3, [r6, #20]
   1327e:	9328      	str	r3, [sp, #160]	; 0xa0
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   13280:	4639      	mov	r1, r7
    op_params.quantized_activation_max = data.activation_max;
   13282:	69b3      	ldr	r3, [r6, #24]
   13284:	9329      	str	r3, [sp, #164]	; 0xa4
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   13286:	a815      	add	r0, sp, #84	; 0x54
   13288:	f005 feea 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   1328c:	683a      	ldr	r2, [r7, #0]
   1328e:	9205      	str	r2, [sp, #20]
                               tflite::micro::GetTensorShape(output),
   13290:	4621      	mov	r1, r4
   13292:	a81b      	add	r0, sp, #108	; 0x6c
   13294:	f005 fee4 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13298:	9a05      	ldr	r2, [sp, #20]
   1329a:	b104      	cbz	r4, 1329e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe2>
   1329c:	6824      	ldr	r4, [r4, #0]
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   1329e:	9400      	str	r4, [sp, #0]
   132a0:	ab1b      	add	r3, sp, #108	; 0x6c
   132a2:	a915      	add	r1, sp, #84	; 0x54
   132a4:	a821      	add	r0, sp, #132	; 0x84
   132a6:	f005 ff0e 	bl	190c6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   132aa:	e7cf      	b.n	1324c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x90>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   132ac:	4639      	mov	r1, r7
   132ae:	a815      	add	r0, sp, #84	; 0x54
   132b0:	f005 fed6 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   132b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   132b6:	2b04      	cmp	r3, #4
   132b8:	d187      	bne.n	131ca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   132ba:	4621      	mov	r1, r4
   132bc:	a81b      	add	r0, sp, #108	; 0x6c
   132be:	f005 fecf 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   132c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   132c4:	2b04      	cmp	r3, #4
   132c6:	d180      	bne.n	131ca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   132c8:	2303      	movs	r3, #3
   132ca:	4619      	mov	r1, r3
   132cc:	aa1b      	add	r2, sp, #108	; 0x6c
   132ce:	a815      	add	r0, sp, #84	; 0x54
   132d0:	f005 fdd3 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    input_dims.n = 1;
   132d4:	f04f 0901 	mov.w	r9, #1
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   132d8:	4682      	mov	sl, r0
    input_dims.h = input_shape.Dims(1);
   132da:	4649      	mov	r1, r9
   132dc:	a815      	add	r0, sp, #84	; 0x54
    input_dims.n = 1;
   132de:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    input_dims.h = input_shape.Dims(1);
   132e2:	f005 fd87 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
   132e6:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
   132e8:	900a      	str	r0, [sp, #40]	; 0x28
    input_dims.w = input_shape.Dims(2);
   132ea:	a815      	add	r0, sp, #84	; 0x54
   132ec:	f005 fd82 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.h = output_shape.Dims(1);
   132f0:	4649      	mov	r1, r9
    input_dims.c = depth;
   132f2:	e9cd 0a0b 	strd	r0, sl, [sp, #44]	; 0x2c
    output_dims.h = output_shape.Dims(1);
   132f6:	a81b      	add	r0, sp, #108	; 0x6c
    output_dims.n = 1;
   132f8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    output_dims.h = output_shape.Dims(1);
   132fc:	f005 fd7a 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
   13300:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
   13302:	900e      	str	r0, [sp, #56]	; 0x38
    output_dims.w = output_shape.Dims(2);
   13304:	a81b      	add	r0, sp, #108	; 0x6c
   13306:	f005 fd75 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
    pool_params.stride.h = params->stride_height;
   1330a:	68ab      	ldr	r3, [r5, #8]
   1330c:	9322      	str	r3, [sp, #136]	; 0x88
    pool_params.stride.w = params->stride_width;
   1330e:	686b      	ldr	r3, [r5, #4]
   13310:	9321      	str	r3, [sp, #132]	; 0x84
    pool_params.padding.h = data.padding.height;
   13312:	6873      	ldr	r3, [r6, #4]
   13314:	9324      	str	r3, [sp, #144]	; 0x90
    pool_params.padding.w = data.padding.width;
   13316:	6833      	ldr	r3, [r6, #0]
   13318:	9323      	str	r3, [sp, #140]	; 0x8c
    pool_params.activation.min = data.activation_min;
   1331a:	6973      	ldr	r3, [r6, #20]
   1331c:	9325      	str	r3, [sp, #148]	; 0x94
    pool_params.activation.max = data.activation_max;
   1331e:	69b3      	ldr	r3, [r6, #24]
   13320:	9326      	str	r3, [sp, #152]	; 0x98
    filter_dims.h = params->filter_height;
   13322:	692b      	ldr	r3, [r5, #16]
   13324:	9312      	str	r3, [sp, #72]	; 0x48
    filter_dims.w = params->filter_width;
   13326:	68eb      	ldr	r3, [r5, #12]
    if (data.buffer_idx > -1) {
   13328:	6931      	ldr	r1, [r6, #16]
    filter_dims.n = 1;
   1332a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    filter_dims.c = 1;
   1332e:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
    ctx.buf = nullptr;
   13332:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
   13334:	4299      	cmp	r1, r3
    output_dims.c = depth;
   13336:	e9cd 0a0f 	strd	r0, sl, [sp, #60]	; 0x3c
    ctx.size = 0;
   1333a:	e9cd 3307 	strd	r3, r3, [sp, #28]
    if (data.buffer_idx > -1) {
   1333e:	db04      	blt.n	1334a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x18e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   13340:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   13344:	4640      	mov	r0, r8
   13346:	4798      	blx	r3
   13348:	9007      	str	r0, [sp, #28]
  return reinterpret_cast<const T*>(tensor->data.raw);
   1334a:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1334c:	b104      	cbz	r4, 13350 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x194>
   1334e:	6824      	ldr	r4, [r4, #0]
    TFLITE_DCHECK_EQ(
   13350:	9402      	str	r4, [sp, #8]
   13352:	aa0d      	add	r2, sp, #52	; 0x34
   13354:	9201      	str	r2, [sp, #4]
   13356:	aa11      	add	r2, sp, #68	; 0x44
   13358:	9200      	str	r2, [sp, #0]
   1335a:	a921      	add	r1, sp, #132	; 0x84
   1335c:	aa09      	add	r2, sp, #36	; 0x24
   1335e:	a807      	add	r0, sp, #28
   13360:	f007 f963 	bl	1a62a <arm_avgpool_s8>
   13364:	2800      	cmp	r0, #0
   13366:	f43f af71 	beq.w	1324c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x90>
   1336a:	e72e      	b.n	131ca <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
   1336c:	f8d8 4014 	ldr.w	r4, [r8, #20]
   13370:	f001 fd40 	bl	14df4 <TfLiteTypeGetName>
   13374:	4902      	ldr	r1, [pc, #8]	; (13380 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
   13376:	4602      	mov	r2, r0
   13378:	4640      	mov	r0, r8
   1337a:	47a0      	blx	r4
      return kTfLiteError;
   1337c:	2001      	movs	r0, #1
   1337e:	e76c      	b.n	1325a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9e>
   13380:	0003e768 	.word	0x0003e768

00013384 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   13384:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   13388:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   1338a:	4604      	mov	r4, r0
   1338c:	4688      	mov	r8, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1338e:	f007 fbed 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   13392:	4607      	mov	r7, r0
   13394:	b958      	cbnz	r0, 133ae <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
   13396:	4b40      	ldr	r3, [pc, #256]	; (13498 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>)
   13398:	6965      	ldr	r5, [r4, #20]
   1339a:	9300      	str	r3, [sp, #0]
   1339c:	2323      	movs	r3, #35	; 0x23
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
   1339e:	4a3f      	ldr	r2, [pc, #252]	; (1349c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
   133a0:	493f      	ldr	r1, [pc, #252]	; (134a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
   133a2:	4620      	mov	r0, r4
   133a4:	47a8      	blx	r5
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   133a6:	2001      	movs	r0, #1
  return kTfLiteOk;
}
   133a8:	b004      	add	sp, #16
   133aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   133ae:	2200      	movs	r2, #0
   133b0:	4641      	mov	r1, r8
   133b2:	4620      	mov	r0, r4
   133b4:	f007 fbdd 	bl	1ab72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   133b8:	4606      	mov	r6, r0
   133ba:	b920      	cbnz	r0, 133c6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x42>
   133bc:	4b39      	ldr	r3, [pc, #228]	; (134a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
   133be:	9300      	str	r3, [sp, #0]
   133c0:	6965      	ldr	r5, [r4, #20]
   133c2:	2325      	movs	r3, #37	; 0x25
   133c4:	e7eb      	b.n	1339e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a>
  for (int i = 0; i < dims->size; ++i) {
   133c6:	68bb      	ldr	r3, [r7, #8]
   133c8:	f853 0b04 	ldr.w	r0, [r3], #4
   133cc:	2200      	movs	r2, #0
  int64_t count = 1;
   133ce:	2501      	movs	r5, #1
  for (int i = 0; i < dims->size; ++i) {
   133d0:	4290      	cmp	r0, r2
   133d2:	dd05      	ble.n	133e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5c>
    count *= dims->data[i];
   133d4:	f853 1b04 	ldr.w	r1, [r3], #4
  for (int i = 0; i < dims->size; ++i) {
   133d8:	3201      	adds	r2, #1
    count *= dims->data[i];
   133da:	fba5 5101 	umull	r5, r1, r5, r1
  for (int i = 0; i < dims->size; ++i) {
   133de:	e7f7      	b.n	133d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x4c>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   133e0:	f8d8 3000 	ldr.w	r3, [r8]
  TfLiteIntArray* output_shape = output->dims;
   133e4:	68b2      	ldr	r2, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
   133e6:	681b      	ldr	r3, [r3, #0]
   133e8:	2b01      	cmp	r3, #1
   133ea:	d105      	bne.n	133f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
   133ec:	6813      	ldr	r3, [r2, #0]
   133ee:	2b01      	cmp	r3, #1
   133f0:	d102      	bne.n	133f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   133f2:	6853      	ldr	r3, [r2, #4]
   133f4:	b903      	cbnz	r3, 133f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
    output_shape->size = 0;
   133f6:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < output_shape->size; ++i) {
   133f8:	4694      	mov	ip, r2
   133fa:	2000      	movs	r0, #0
   133fc:	f85c 8b04 	ldr.w	r8, [ip], #4
  int stretch_dim = -1;
   13400:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  int num_output_elements = 1;
   13404:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
   13406:	4580      	cmp	r8, r0
   13408:	dd1a      	ble.n	13440 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xbc>
    int value = output_shape->data[i];
   1340a:	f85c eb04 	ldr.w	lr, [ip], #4
    if (value == -1) {
   1340e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   13412:	d10f      	bne.n	13434 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
   13414:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   13418:	d010      	beq.n	1343c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb8>
   1341a:	4b23      	ldr	r3, [pc, #140]	; (134a8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
   1341c:	9301      	str	r3, [sp, #4]
   1341e:	e9cd 1e02 	strd	r1, lr, [sp, #8]
   13422:	4b22      	ldr	r3, [pc, #136]	; (134ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
   13424:	6965      	ldr	r5, [r4, #20]
   13426:	9300      	str	r3, [sp, #0]
   13428:	233a      	movs	r3, #58	; 0x3a
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1342a:	4a1c      	ldr	r2, [pc, #112]	; (1349c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
   1342c:	4920      	ldr	r1, [pc, #128]	; (134b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
   1342e:	4620      	mov	r0, r4
   13430:	47a8      	blx	r5
   13432:	e7b8      	b.n	133a6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
      num_output_elements *= value;
   13434:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
   13438:	3001      	adds	r0, #1
   1343a:	e7e4      	b.n	13406 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
   1343c:	4601      	mov	r1, r0
   1343e:	e7fb      	b.n	13438 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb4>
  if (stretch_dim != -1) {
   13440:	1c48      	adds	r0, r1, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
   13442:	bf1f      	itttt	ne
   13444:	eb02 0281 	addne.w	r2, r2, r1, lsl #2
   13448:	fb95 f0f3 	sdivne	r0, r5, r3
   1344c:	6050      	strne	r0, [r2, #4]
    num_output_elements *= output_shape->data[stretch_dim];
   1344e:	4343      	mulne	r3, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   13450:	7832      	ldrb	r2, [r6, #0]
   13452:	7838      	ldrb	r0, [r7, #0]
   13454:	4282      	cmp	r2, r0
   13456:	d012      	beq.n	1347e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
   13458:	6967      	ldr	r7, [r4, #20]
   1345a:	f001 fccb 	bl	14df4 <TfLiteTypeGetName>
   1345e:	4605      	mov	r5, r0
   13460:	7830      	ldrb	r0, [r6, #0]
   13462:	f001 fcc7 	bl	14df4 <TfLiteTypeGetName>
   13466:	4b13      	ldr	r3, [pc, #76]	; (134b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
   13468:	9301      	str	r3, [sp, #4]
   1346a:	4b13      	ldr	r3, [pc, #76]	; (134b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
   1346c:	9300      	str	r3, [sp, #0]
   1346e:	e9cd 5002 	strd	r5, r0, [sp, #8]
   13472:	4a0a      	ldr	r2, [pc, #40]	; (1349c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
   13474:	4911      	ldr	r1, [pc, #68]	; (134bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
   13476:	2345      	movs	r3, #69	; 0x45
   13478:	4620      	mov	r0, r4
   1347a:	47b8      	blx	r7
   1347c:	e793      	b.n	133a6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1347e:	42ab      	cmp	r3, r5
   13480:	d008      	beq.n	13494 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x110>
   13482:	e9cd 5302 	strd	r5, r3, [sp, #8]
   13486:	4b0e      	ldr	r3, [pc, #56]	; (134c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13c>)
   13488:	9301      	str	r3, [sp, #4]
   1348a:	4b0e      	ldr	r3, [pc, #56]	; (134c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>)
   1348c:	9300      	str	r3, [sp, #0]
   1348e:	6965      	ldr	r5, [r4, #20]
   13490:	2346      	movs	r3, #70	; 0x46
   13492:	e7ca      	b.n	1342a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
  return kTfLiteOk;
   13494:	2000      	movs	r0, #0
   13496:	e787      	b.n	133a8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
   13498:	0003e276 	.word	0x0003e276
   1349c:	0003e791 	.word	0x0003e791
   134a0:	0003e25f 	.word	0x0003e25f
   134a4:	0003e299 	.word	0x0003e299
   134a8:	0003e808 	.word	0x0003e808
   134ac:	0003e80b 	.word	0x0003e80b
   134b0:	0003e2ab 	.word	0x0003e2ab
   134b4:	0003e2c5 	.word	0x0003e2c5
   134b8:	0003e2d2 	.word	0x0003e2d2
   134bc:	0003e606 	.word	0x0003e606
   134c0:	0003e817 	.word	0x0003e817
   134c4:	0003e82b 	.word	0x0003e82b

000134c8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
   134c8:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   134ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   134cc:	681b      	ldr	r3, [r3, #0]
   134ce:	3b01      	subs	r3, #1
   134d0:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   134d2:	b085      	sub	sp, #20
   134d4:	4605      	mov	r5, r0
   134d6:	460c      	mov	r4, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   134d8:	d909      	bls.n	134ee <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
   134da:	4b19      	ldr	r3, [pc, #100]	; (13540 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   134dc:	9300      	str	r3, [sp, #0]
   134de:	6944      	ldr	r4, [r0, #20]
   134e0:	4a18      	ldr	r2, [pc, #96]	; (13544 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   134e2:	4919      	ldr	r1, [pc, #100]	; (13548 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   134e4:	234b      	movs	r3, #75	; 0x4b
   134e6:	47a0      	blx	r4
   134e8:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
   134ea:	b005      	add	sp, #20
   134ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   134ee:	684b      	ldr	r3, [r1, #4]
   134f0:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   134f2:	2e01      	cmp	r6, #1
   134f4:	d00c      	beq.n	13510 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   134f6:	2401      	movs	r4, #1
   134f8:	e9cd 6402 	strd	r6, r4, [sp, #8]
   134fc:	4b13      	ldr	r3, [pc, #76]	; (1354c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   134fe:	9301      	str	r3, [sp, #4]
   13500:	4b13      	ldr	r3, [pc, #76]	; (13550 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
   13502:	9300      	str	r3, [sp, #0]
   13504:	6945      	ldr	r5, [r0, #20]
   13506:	4a0f      	ldr	r2, [pc, #60]	; (13544 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   13508:	4912      	ldr	r1, [pc, #72]	; (13554 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   1350a:	234c      	movs	r3, #76	; 0x4c
   1350c:	47a8      	blx	r5
   1350e:	e7eb      	b.n	134e8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
   13510:	f7ff ff38 	bl	13384 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   13514:	2800      	cmp	r0, #0
   13516:	d0e8      	beq.n	134ea <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   13518:	4621      	mov	r1, r4
   1351a:	4628      	mov	r0, r5
   1351c:	696f      	ldr	r7, [r5, #20]
   1351e:	f7ff ff31 	bl	13384 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   13522:	2300      	movs	r3, #0
   13524:	e9cd 0302 	strd	r0, r3, [sp, #8]
   13528:	4b0b      	ldr	r3, [pc, #44]	; (13558 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
   1352a:	9301      	str	r3, [sp, #4]
   1352c:	4b0b      	ldr	r3, [pc, #44]	; (1355c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   1352e:	9300      	str	r3, [sp, #0]
   13530:	4628      	mov	r0, r5
   13532:	4a04      	ldr	r2, [pc, #16]	; (13544 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   13534:	4907      	ldr	r1, [pc, #28]	; (13554 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   13536:	234d      	movs	r3, #77	; 0x4d
   13538:	47b8      	blx	r7
   1353a:	4630      	mov	r0, r6
   1353c:	e7d5      	b.n	134ea <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1353e:	bf00      	nop
   13540:	0003e83e 	.word	0x0003e83e
   13544:	0003e791 	.word	0x0003e791
   13548:	0003e25f 	.word	0x0003e25f
   1354c:	0003e957 	.word	0x0003e957
   13550:	0003e86b 	.word	0x0003e86b
   13554:	0003e2ab 	.word	0x0003e2ab
   13558:	0003e87c 	.word	0x0003e87c
   1355c:	0003e886 	.word	0x0003e886

00013560 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
   13560:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   13562:	4d05      	ldr	r5, [pc, #20]	; (13578 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
TfLiteRegistration Register_RESHAPE() {
   13564:	4606      	mov	r6, r0
          /*version=*/0};
   13566:	4604      	mov	r4, r0
   13568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1356a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1356c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   13570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   13574:	4630      	mov	r0, r6
   13576:	bd70      	pop	{r4, r5, r6, pc}
   13578:	0001c920 	.word	0x0001c920

0001357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1357c:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
   1357e:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   13580:	d119      	bne.n	135b6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3a>
   13582:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   13586:	425c      	negs	r4, r3
   13588:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
   1358a:	fb80 0301 	smull	r0, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   1358e:	2b00      	cmp	r3, #0
   13590:	4a0b      	ldr	r2, [pc, #44]	; (135c0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>)
   13592:	bfa8      	it	ge
   13594:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   13598:	b97c      	cbnz	r4, 135ba <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1359a:	1811      	adds	r1, r2, r0
   1359c:	eb43 70e2 	adc.w	r0, r3, r2, asr #31
   135a0:	2800      	cmp	r0, #0
   135a2:	da04      	bge.n	135ae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x32>
   135a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   135a8:	18c9      	adds	r1, r1, r3
   135aa:	f140 0000 	adc.w	r0, r0, #0
   135ae:	0fc9      	lsrs	r1, r1, #31
   135b0:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}
   135b4:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   135b6:	2400      	movs	r4, #0
   135b8:	e7e7      	b.n	1358a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
   135ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   135be:	e7f9      	b.n	135b4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x38>
   135c0:	c0000001 	.word	0xc0000001

000135c4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
   135c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c8:	ed2d 8b04 	vpush	{d8-d9}
   135cc:	4691      	mov	r9, r2
   135ce:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   135d0:	680b      	ldr	r3, [r1, #0]

  for (int i = 0; i < outer_size; ++i) {
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
   135d2:	ed9f 9a35 	vldr	s18, [pc, #212]	; 136a8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe4>
                    const RuntimeShape& output_shape, float* output_data) {
   135d6:	b087      	sub	sp, #28
   135d8:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   135da:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   135dc:	4619      	mov	r1, r3
                    const RuntimeShape& output_shape, float* output_data) {
   135de:	9001      	str	r0, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   135e0:	4620      	mov	r0, r4
   135e2:	9203      	str	r2, [sp, #12]
   135e4:	9302      	str	r3, [sp, #8]
   135e6:	f006 f8e6 	bl	197b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   135ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   135ee:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   135f0:	4619      	mov	r1, r3
   135f2:	4620      	mov	r0, r4
   135f4:	f005 fc41 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   135f8:	2600      	movs	r6, #0
   135fa:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
   135fc:	46b0      	mov	r8, r6
      return __a;
   135fe:	aa05      	add	r2, sp, #20
   13600:	45b8      	cmp	r8, r7
   13602:	da4b      	bge.n	1369c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd8>
    float max = std::numeric_limits<float>::lowest();
   13604:	eb09 0b86 	add.w	fp, r9, r6, lsl #2
   13608:	ed8d 9a05 	vstr	s18, [sp, #20]
    for (int c = 0; c < depth; ++c) {
   1360c:	00b5      	lsls	r5, r6, #2
    float max = std::numeric_limits<float>::lowest();
   1360e:	4658      	mov	r0, fp
    for (int c = 0; c < depth; ++c) {
   13610:	2100      	movs	r1, #0
   13612:	42a1      	cmp	r1, r4
   13614:	db23      	blt.n	1365e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
   13616:	9b14      	ldr	r3, [sp, #80]	; 0x50
      max = std::max(max, input_data[i * depth + c]);
    }

    // Compute sum.
    float sum = 0.f;
   13618:	ed9f 8a24 	vldr	s16, [pc, #144]	; 136ac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
   1361c:	441d      	add	r5, r3
    for (int c = 0; c < depth; ++c) {
   1361e:	462b      	mov	r3, r5
    for (int c = 0; c < depth; ++c) {
   13620:	f04f 0a00 	mov.w	sl, #0
   13624:	45a2      	cmp	sl, r4
   13626:	9302      	str	r3, [sp, #8]
   13628:	da29      	bge.n	1367e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xba>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
                                   static_cast<float>(params.beta));
   1362a:	9b01      	ldr	r3, [sp, #4]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
   1362c:	ed9d 0a05 	vldr	s0, [sp, #20]
   13630:	ecfb 8a01 	vldmia	fp!, {s17}
                                   static_cast<float>(params.beta));
   13634:	e9d3 0100 	ldrd	r0, r1, [r3]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
   13638:	ee78 8ac0 	vsub.f32	s17, s17, s0
                                   static_cast<float>(params.beta));
   1363c:	f7ed fa06 	bl	a4c <__aeabi_d2f>
  { return __builtin_expf(__x); }
   13640:	ee07 0a90 	vmov	s15, r0
   13644:	ee28 0aa7 	vmul.f32	s0, s17, s15
   13648:	f002 f888 	bl	1575c <expf>
      output_data[i * depth + c] = exp_c;
   1364c:	9b02      	ldr	r3, [sp, #8]
      sum += exp_c;
   1364e:	ee38 8a00 	vadd.f32	s16, s16, s0
      output_data[i * depth + c] = exp_c;
   13652:	eca3 0a01 	vstmia	r3!, {s0}
    for (int c = 0; c < depth; ++c) {
   13656:	f10a 0a01 	add.w	sl, sl, #1
   1365a:	aa05      	add	r2, sp, #20
   1365c:	e7e2      	b.n	13624 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x60>
      max = std::max(max, input_data[i * depth + c]);
   1365e:	4603      	mov	r3, r0
      if (__a < __b)
   13660:	ed93 7a00 	vldr	s14, [r3]
   13664:	eddd 7a05 	vldr	s15, [sp, #20]
   13668:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   13670:	bfd8      	it	le
   13672:	4613      	movle	r3, r2
   13674:	3004      	adds	r0, #4
   13676:	681b      	ldr	r3, [r3, #0]
   13678:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
   1367a:	3101      	adds	r1, #1
   1367c:	e7c9      	b.n	13612 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
   1367e:	2300      	movs	r3, #0
   13680:	42a3      	cmp	r3, r4
   13682:	da07      	bge.n	13694 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd0>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
   13684:	ed95 7a00 	vldr	s14, [r5]
   13688:	eec7 7a08 	vdiv.f32	s15, s14, s16
    for (int c = 0; c < depth; ++c) {
   1368c:	3301      	adds	r3, #1
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
   1368e:	ece5 7a01 	vstmia	r5!, {s15}
    for (int c = 0; c < depth; ++c) {
   13692:	e7f5      	b.n	13680 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbc>
  for (int i = 0; i < outer_size; ++i) {
   13694:	f108 0801 	add.w	r8, r8, #1
   13698:	4426      	add	r6, r4
   1369a:	e7b1      	b.n	13600 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
   1369c:	b007      	add	sp, #28
   1369e:	ecbd 8b04 	vpop	{d8-d9}
   136a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a6:	bf00      	nop
   136a8:	ff7fffff 	.word	0xff7fffff
   136ac:	00000000 	.word	0x00000000

000136b0 <_ZN6tflite16Register_SOFTMAXEv>:
  }
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
   136b0:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   136b2:	4d05      	ldr	r5, [pc, #20]	; (136c8 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
TfLiteRegistration Register_SOFTMAX() {
   136b4:	4606      	mov	r6, r0
          /*version=*/0};
   136b6:	4604      	mov	r4, r0
   136b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   136ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   136bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   136c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   136c4:	4630      	mov	r0, r6
   136c6:	bd70      	pop	{r4, r5, r6, pc}
   136c8:	0001c940 	.word	0x0001c940

000136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
   136cc:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   136ce:	b508      	push	{r3, lr}
  assert(exponent >= 0);
   136d0:	da06      	bge.n	136e0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
   136d2:	4b0d      	ldr	r3, [pc, #52]	; (13708 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
   136d4:	4a0d      	ldr	r2, [pc, #52]	; (1370c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
   136d6:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
   136da:	480d      	ldr	r0, [pc, #52]	; (13710 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
   136dc:	f002 fab4 	bl	15c48 <__assert_func>
   136e0:	291f      	cmp	r1, #31
   136e2:	dd04      	ble.n	136ee <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
   136e4:	4b0b      	ldr	r3, [pc, #44]	; (13714 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
   136e6:	4a09      	ldr	r2, [pc, #36]	; (1370c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
   136e8:	f240 1167 	movw	r1, #359	; 0x167
   136ec:	e7f5      	b.n	136da <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   136ee:	2301      	movs	r3, #1
   136f0:	408b      	lsls	r3, r1
   136f2:	3b01      	subs	r3, #1
  return a & b;
   136f4:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
   136f8:	105b      	asrs	r3, r3, #1
  return a + b;
   136fa:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   136fe:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
   13700:	429a      	cmp	r2, r3
   13702:	bfc8      	it	gt
   13704:	3001      	addgt	r0, #1
   13706:	bd08      	pop	{r3, pc}
   13708:	0003e8a3 	.word	0x0003e8a3
   1370c:	0003e11b 	.word	0x0003e11b
   13710:	0003e170 	.word	0x0003e170
   13714:	0003e10c 	.word	0x0003e10c

00013718 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
   13718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1371c:	b091      	sub	sp, #68	; 0x44
   1371e:	460c      	mov	r4, r1
   13720:	9208      	str	r2, [sp, #32]
   13722:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   13724:	680b      	ldr	r3, [r1, #0]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13726:	9204      	str	r2, [sp, #16]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   13728:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1372a:	4619      	mov	r1, r3
                         int16_t* output_data) {
   1372c:	4683      	mov	fp, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1372e:	4620      	mov	r0, r4
   13730:	9301      	str	r3, [sp, #4]
   13732:	f006 f840 	bl	197b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   13736:	9b01      	ldr	r3, [sp, #4]
   13738:	9a04      	ldr	r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1373a:	9005      	str	r0, [sp, #20]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1373c:	4619      	mov	r1, r3
   1373e:	4620      	mov	r0, r4
   13740:	f005 fb9b 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   13744:	f04f 0a00 	mov.w	sl, #0
   13748:	4681      	mov	r9, r0

  for (int i = 0; i < outer_size; ++i) {
   1374a:	f8cd a010 	str.w	sl, [sp, #16]
   1374e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   13752:	4293      	cmp	r3, r2
   13754:	f280 80cd 	bge.w	138f2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1da>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
   13758:	f248 0300 	movw	r3, #32768	; 0x8000
   1375c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    for (int c = 0; c < depth; ++c) {
   13760:	9b08      	ldr	r3, [sp, #32]
   13762:	eb03 084a 	add.w	r8, r3, sl, lsl #1
   13766:	ea4f 054a 	mov.w	r5, sl, lsl #1
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
   1376a:	4641      	mov	r1, r8
    for (int c = 0; c < depth; ++c) {
   1376c:	2200      	movs	r2, #0
   1376e:	f10d 062e 	add.w	r6, sp, #46	; 0x2e
   13772:	454a      	cmp	r2, r9
   13774:	da0e      	bge.n	13794 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7c>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   13776:	460b      	mov	r3, r1
      if (__a < __b)
   13778:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
   1377c:	f9b3 4000 	ldrsh.w	r4, [r3]
   13780:	4284      	cmp	r4, r0
      return __a;
   13782:	bfd8      	it	le
   13784:	4633      	movle	r3, r6
   13786:	3102      	adds	r1, #2
   13788:	f9b3 3000 	ldrsh.w	r3, [r3]
   1378c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    for (int c = 0; c < depth; ++c) {
   13790:	3201      	adds	r2, #1
   13792:	e7ee      	b.n	13772 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x5a>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
   13794:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    for (int c = 0; c < depth; ++c) {
   13796:	2700      	movs	r7, #0
   13798:	442b      	add	r3, r5
   1379a:	9301      	str	r3, [sp, #4]
   1379c:	9307      	str	r3, [sp, #28]
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
   1379e:	463c      	mov	r4, r7
  int32_t sym_scaled_diff = scaled_diff + 32767;
   137a0:	f647 76ff 	movw	r6, #32767	; 0x7fff
    for (int c = 0; c < depth; ++c) {
   137a4:	454f      	cmp	r7, r9
   137a6:	da2e      	bge.n	13806 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xee>
      input_diff, params.input_multiplier, params.input_left_shift);
   137a8:	e9db 1502 	ldrd	r1, r5, [fp, #8]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
   137ac:	f938 3b02 	ldrsh.w	r3, [r8], #2
   137b0:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
  int right_shift = shift > 0 ? 0 : -shift;
   137b4:	2d00      	cmp	r5, #0
   137b6:	eba3 0300 	sub.w	r3, r3, r0
  int left_shift = shift > 0 ? shift : 0;
   137ba:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   137be:	fa03 f000 	lsl.w	r0, r3, r0
  int right_shift = shift > 0 ? 0 : -shift;
   137c2:	bfd4      	ite	le
   137c4:	426d      	negle	r5, r5
   137c6:	2500      	movgt	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   137c8:	f7ff fed8 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   137cc:	4629      	mov	r1, r5
   137ce:	f7ff ff7d 	bl	136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
   137d2:	4b49      	ldr	r3, [pc, #292]	; (138f8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e0>)
   137d4:	930f      	str	r3, [sp, #60]	; 0x3c
  int32_t sym_scaled_diff = scaled_diff + 32767;
   137d6:	4430      	add	r0, r6
      if (__a < __b)
   137d8:	4298      	cmp	r0, r3
      return __a;
   137da:	bfac      	ite	ge
   137dc:	ab0d      	addge	r3, sp, #52	; 0x34
	return __b;
   137de:	ab0f      	addlt	r3, sp, #60	; 0x3c
   137e0:	900d      	str	r0, [sp, #52]	; 0x34
      if (__b < __a)
   137e2:	681a      	ldr	r2, [r3, #0]
               static_cast<int32_t>(32767));
   137e4:	960e      	str	r6, [sp, #56]	; 0x38
   137e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
   137ea:	bfa8      	it	ge
   137ec:	ab0e      	addge	r3, sp, #56	; 0x38
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
   137ee:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
   137f2:	f9b3 0000 	ldrsh.w	r0, [r3]
   137f6:	f006 f810 	bl	1981a <_ZN6tflite26generic_int16_table_lookupEsPKs>
      exp_results_Q015[c] =
   137fa:	9b01      	ldr	r3, [sp, #4]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
   137fc:	4404      	add	r4, r0
      exp_results_Q015[c] =
   137fe:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
    for (int c = 0; c < depth; ++c) {
   13802:	3701      	adds	r7, #1
   13804:	e7ce      	b.n	137a4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x8c>
template <typename T>
int CountLeadingZeros(T integer_input) {
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
   13806:	fab4 f284 	clz	r2, r4

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
   1380a:	1e50      	subs	r0, r2, #1
   1380c:	17e3      	asrs	r3, r4, #31
   1380e:	f1a2 0121 	sub.w	r1, r2, #33	; 0x21
   13812:	fa04 f101 	lsl.w	r1, r4, r1
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
   13816:	4615      	mov	r5, r2
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
   13818:	4083      	lsls	r3, r0
   1381a:	f1c2 0221 	rsb	r2, r2, #33	; 0x21
   1381e:	fa24 f202 	lsr.w	r2, r4, r2
   13822:	430b      	orrs	r3, r1
   13824:	4084      	lsls	r4, r0
   13826:	f514 5400 	adds.w	r4, r4, #8192	; 0x2000
   1382a:	ea43 0302 	orr.w	r3, r3, r2
   1382e:	f143 0300 	adc.w	r3, r3, #0
         (1 << 13)) >>
   13832:	0ba4      	lsrs	r4, r4, #14
   13834:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
   13838:	4b2f      	ldr	r3, [pc, #188]	; (138f8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e0>)
   1383a:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
   1383c:	f5a4 34c0 	sub.w	r4, r4, #98304	; 0x18000
      if (__a < __b)
   13840:	429c      	cmp	r4, r3
      return __a;
   13842:	bfac      	ite	ge
   13844:	ab0c      	addge	r3, sp, #48	; 0x30
	return __b;
   13846:	ab0e      	addlt	r3, sp, #56	; 0x38
   13848:	940c      	str	r4, [sp, #48]	; 0x30
                 static_cast<int32_t>(32767)));
   1384a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1384e:	920f      	str	r2, [sp, #60]	; 0x3c
      if (__b < __a)
   13850:	681a      	ldr	r2, [r3, #0]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
   13852:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
   13856:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
   1385a:	bfa8      	it	ge
   1385c:	ab0f      	addge	r3, sp, #60	; 0x3c
	return __b;
   1385e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13862:	f9b3 0000 	ldrsh.w	r0, [r3]
   13866:	f005 ffd8 	bl	1981a <_ZN6tflite26generic_int16_table_lookupEsPKs>
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
      uint8_t right_shift = 31 - headroom_plus_one;
   1386a:	f1c5 031f 	rsb	r3, r5, #31
   1386e:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
   13870:	1e5a      	subs	r2, r3, #1
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
   13872:	9006      	str	r0, [sp, #24]
      int64_t round = 1 << (right_shift - 1);
   13874:	2001      	movs	r0, #1
   13876:	4090      	lsls	r0, r2
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   13878:	17c2      	asrs	r2, r0, #31
    for (int c = 0; c < depth; ++c) {
   1387a:	2100      	movs	r1, #0
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   1387c:	9209      	str	r2, [sp, #36]	; 0x24
      return __a;
   1387e:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
	return __b;
   13882:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
    for (int c = 0; c < depth; ++c) {
   13886:	4549      	cmp	r1, r9
   13888:	da2e      	bge.n	138e8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d0>
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   1388a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1388c:	9203      	str	r2, [sp, #12]
   1388e:	9002      	str	r0, [sp, #8]
   13890:	9a07      	ldr	r2, [sp, #28]
   13892:	9c06      	ldr	r4, [sp, #24]
   13894:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   13898:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
                        round) >>
   1389c:	f1c3 0520 	rsb	r5, r3, #32
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   138a0:	fbc2 6784 	smlalbb	r6, r7, r2, r4
                        round) >>
   138a4:	fa26 f203 	lsr.w	r2, r6, r3
   138a8:	f1b3 0420 	subs.w	r4, r3, #32
   138ac:	fa07 f505 	lsl.w	r5, r7, r5
   138b0:	ea42 0205 	orr.w	r2, r2, r5
   138b4:	bf5c      	itt	pl
   138b6:	fa47 f404 	asrpl.w	r4, r7, r4
   138ba:	4322      	orrpl	r2, r4
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
   138bc:	2400      	movs	r4, #0
      if (__a < __b)
   138be:	42a2      	cmp	r2, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   138c0:	920d      	str	r2, [sp, #52]	; 0x34
	return __b;
   138c2:	bfac      	ite	ge
   138c4:	4672      	movge	r2, lr
   138c6:	4642      	movlt	r2, r8
          std::min(std::max(result, static_cast<int32_t>(0)),
   138c8:	940e      	str	r4, [sp, #56]	; 0x38
                   static_cast<int32_t>(32767)));
   138ca:	f647 74ff 	movw	r4, #32767	; 0x7fff
   138ce:	940f      	str	r4, [sp, #60]	; 0x3c
      if (__b < __a)
   138d0:	6814      	ldr	r4, [r2, #0]
   138d2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
	return __b;
   138d6:	bfa8      	it	ge
   138d8:	4662      	movge	r2, ip
      output_data[i * depth + c] = static_cast<int16_t>(
   138da:	9c01      	ldr	r4, [sp, #4]
   138dc:	6812      	ldr	r2, [r2, #0]
   138de:	f824 2b02 	strh.w	r2, [r4], #2
    for (int c = 0; c < depth; ++c) {
   138e2:	3101      	adds	r1, #1
      output_data[i * depth + c] = static_cast<int16_t>(
   138e4:	9401      	str	r4, [sp, #4]
    for (int c = 0; c < depth; ++c) {
   138e6:	e7ce      	b.n	13886 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x16e>
  for (int i = 0; i < outer_size; ++i) {
   138e8:	9b04      	ldr	r3, [sp, #16]
   138ea:	3301      	adds	r3, #1
   138ec:	9304      	str	r3, [sp, #16]
   138ee:	44ca      	add	sl, r9
   138f0:	e72d      	b.n	1374e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x36>
    }
  }
}
   138f2:	b011      	add	sp, #68	; 0x44
   138f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f8:	ffff8000 	.word	0xffff8000

000138fc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
   138fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  std::int64_t sum = a64 + b64;
   138fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  std::int64_t a64 = a;
   13902:	17c5      	asrs	r5, r0, #31
  std::int64_t sum = a64 + b64;
   13904:	18c0      	adds	r0, r0, r3
   13906:	f145 0500 	adc.w	r5, r5, #0
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1390a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1390e:	bf08      	it	eq
   13910:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   13914:	bf0b      	itete	eq
   13916:	4603      	moveq	r3, r0
   13918:	2301      	movne	r3, #1
   1391a:	462a      	moveq	r2, r5
   1391c:	2200      	movne	r2, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   1391e:	18c0      	adds	r0, r0, r3
   13920:	eb45 0502 	adc.w	r5, r5, r2
   13924:	0feb      	lsrs	r3, r5, #31
   13926:	1818      	adds	r0, r3, r0
   13928:	f145 0500 	adc.w	r5, r5, #0
   1392c:	0840      	lsrs	r0, r0, #1
   1392e:	ea40 75c5 	orr.w	r5, r0, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   13932:	4936      	ldr	r1, [pc, #216]	; (13a0c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x110>)
   13934:	4628      	mov	r0, r5
   13936:	f7ff fe21 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
   1393a:	2603      	movs	r6, #3
   1393c:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   13940:	4621      	mov	r1, r4
   13942:	4628      	mov	r0, r5
   13944:	f7ff fe1a 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   13948:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1394c:	4620      	mov	r0, r4
   1394e:	f7ff fe15 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
   13952:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   13956:	da45      	bge.n	139e4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xe8>
   13958:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1395c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13960:	f04f 0700 	mov.w	r7, #0
   13964:	bfc8      	it	gt
   13966:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   13968:	17c2      	asrs	r2, r0, #31
   1396a:	0092      	lsls	r2, r2, #2
   1396c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   13970:	0080      	lsls	r0, r0, #2
             ? min
   13972:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   13976:	f172 33ff 	sbcs.w	r3, r2, #4294967295	; 0xffffffff
   1397a:	db37      	blt.n	139ec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf0>
             : wide_shifted > max ? max
   1397c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   13980:	f172 0300 	sbcs.w	r3, r2, #0
   13984:	da35      	bge.n	139f2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf6>
  return a & b;
   13986:	ea20 0307 	bic.w	r3, r0, r7
   1398a:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
  return a ^ b;
   1398e:	407b      	eors	r3, r7
  return a & b;
   13990:	ea23 0301 	bic.w	r3, r3, r1
   13994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
   13998:	404b      	eors	r3, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
   1399a:	3e01      	subs	r6, #1
  return a + b;
   1399c:	441c      	add	r4, r3
  for (int i = 0; i < 3; i++) {
   1399e:	d1cf      	bne.n	13940 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x44>
  return a ? BitNot(zero) : zero;
   139a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   139a4:	da28      	bge.n	139f8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xfc>
   139a6:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
   139aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   139ae:	4633      	mov	r3, r6
   139b0:	bfc8      	it	gt
   139b2:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   139b4:	17e2      	asrs	r2, r4, #31
   139b6:	1924      	adds	r4, r4, r4
   139b8:	4152      	adcs	r2, r2
             ? min
   139ba:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   139be:	f172 31ff 	sbcs.w	r1, r2, #4294967295	; 0xffffffff
   139c2:	db1d      	blt.n	13a00 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x104>
             : wide_shifted > max ? max
   139c4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   139c8:	f172 0200 	sbcs.w	r2, r2, #0
   139cc:	da1b      	bge.n	13a06 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  return a & b;
   139ce:	ea24 0403 	bic.w	r4, r4, r3
   139d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  return a ^ b;
   139d6:	405c      	eors	r4, r3
  return a & b;
   139d8:	ea24 0400 	bic.w	r4, r4, r0
   139dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
   139e0:	4060      	eors	r0, r4
   139e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   139e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   139e8:	2100      	movs	r1, #0
   139ea:	e7bd      	b.n	13968 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6c>
             ? min
   139ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   139f0:	e7c9      	b.n	13986 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x8a>
             : wide_shifted > max ? max
   139f2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   139f6:	e7c6      	b.n	13986 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x8a>
  return a ? BitNot(zero) : zero;
   139f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139fc:	4630      	mov	r0, r6
   139fe:	e7d9      	b.n	139b4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xb8>
             ? min
   13a00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   13a04:	e7e3      	b.n	139ce <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xd2>
             : wide_shifted > max ? max
   13a06:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   13a0a:	e7e0      	b.n	139ce <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xd2>
   13a0c:	c3c3c3c4 	.word	0xc3c3c3c4

00013a10 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
   13a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a14:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
   13a16:	4814      	ldr	r0, [pc, #80]	; (13a68 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
   13a18:	f005 ff20 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   13a1c:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   13a1e:	4813      	ldr	r0, [pc, #76]	; (13a6c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
   13a20:	f005 ff1c 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
   13a24:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   13a28:	4680      	mov	r8, r0
  F x2 = x * x;
   13a2a:	4621      	mov	r1, r4
   13a2c:	4620      	mov	r0, r4
   13a2e:	f005 ff1a 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
   13a32:	4621      	mov	r1, r4
  F x2 = x * x;
   13a34:	4605      	mov	r5, r0
  F x3 = x2 * x;
   13a36:	f005 ff16 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
   13a3a:	4629      	mov	r1, r5
  F x3 = x2 * x;
   13a3c:	4607      	mov	r7, r0
  F x4 = x2 * x2;
   13a3e:	4628      	mov	r0, r5
   13a40:	f005 ff11 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   13a44:	2102      	movs	r1, #2
   13a46:	f7ff fe41 	bl	136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
   13a4a:	4641      	mov	r1, r8
   13a4c:	4438      	add	r0, r7
   13a4e:	f005 ff0a 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   13a52:	2101      	movs	r1, #1
   13a54:	4428      	add	r0, r5
   13a56:	f7ff fe39 	bl	136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
   13a5a:	1821      	adds	r1, r4, r0
   13a5c:	4630      	mov	r0, r6
   13a5e:	f005 ff02 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
   13a62:	4430      	add	r0, r6
   13a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a68:	70f5a894 	.word	0x70f5a894
   13a6c:	2aaaaaab 	.word	0x2aaaaaab

00013a70 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   13a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
   13a74:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
   13a78:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   13a7a:	0160      	lsls	r0, r4, #5
   13a7c:	f7ff ffc8 	bl	13a10 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
   13a80:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   13a82:	4842      	ldr	r0, [pc, #264]	; (13b8c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
   13a84:	f005 feea 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   13a88:	4601      	mov	r1, r0
   13a8a:	4630      	mov	r0, r6
  return a - b;
   13a8c:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   13a8e:	f005 feea 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   13a92:	f3c4 6b00 	ubfx	fp, r4, #24, #1
   13a96:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
   13a9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   13a9e:	ea00 0909 	and.w	r9, r0, r9
   13aa2:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
   13aa6:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   13aaa:	4839      	ldr	r0, [pc, #228]	; (13b90 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
   13aac:	f005 fed6 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   13ab0:	4601      	mov	r1, r0
   13ab2:	4650      	mov	r0, sl
   13ab4:	f005 fed7 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   13ab8:	f3c4 6940 	ubfx	r9, r4, #25, #1
   13abc:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   13ac0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   13ac4:	ea00 0008 	and.w	r0, r0, r8
   13ac8:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
   13acc:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   13ad0:	4830      	ldr	r0, [pc, #192]	; (13b94 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
   13ad2:	f005 fec3 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   13ad6:	4601      	mov	r1, r0
   13ad8:	4648      	mov	r0, r9
   13ada:	f005 fec4 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   13ade:	f3c4 6780 	ubfx	r7, r4, #26, #1
   13ae2:	427e      	negs	r6, r7
  return a & b;
   13ae4:	3f01      	subs	r7, #1
   13ae6:	4030      	ands	r0, r6
   13ae8:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   13aec:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   13aee:	482a      	ldr	r0, [pc, #168]	; (13b98 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
   13af0:	f005 feb4 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   13af4:	4601      	mov	r1, r0
   13af6:	4638      	mov	r0, r7
   13af8:	f005 feb5 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   13afc:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
   13b00:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
   13b04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   13b08:	ea00 000a 	and.w	r0, r0, sl
   13b0c:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
   13b10:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   13b14:	4821      	ldr	r0, [pc, #132]	; (13b9c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
   13b16:	f005 fea1 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   13b1a:	4601      	mov	r1, r0
   13b1c:	4658      	mov	r0, fp
   13b1e:	f005 fea2 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   13b22:	f3c4 7900 	ubfx	r9, r4, #28, #1
   13b26:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   13b2a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   13b2e:	ea00 0008 	and.w	r0, r0, r8
   13b32:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
   13b36:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   13b3a:	4819      	ldr	r0, [pc, #100]	; (13ba0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
   13b3c:	f005 fe8e 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   13b40:	4601      	mov	r1, r0
   13b42:	4648      	mov	r0, r9
   13b44:	f005 fe8f 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   13b48:	f3c4 7740 	ubfx	r7, r4, #29, #1
   13b4c:	427e      	negs	r6, r7
  return a & b;
   13b4e:	3f01      	subs	r7, #1
   13b50:	4030      	ands	r0, r6
   13b52:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   13b56:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
   13b58:	20f2      	movs	r0, #242	; 0xf2
   13b5a:	f005 fe7f 	bl	1985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   13b5e:	4601      	mov	r1, r0
   13b60:	4638      	mov	r0, r7
   13b62:	f005 fe80 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   13b66:	f3c4 7480 	ubfx	r4, r4, #30, #1
   13b6a:	4263      	negs	r3, r4
  return a & b;
   13b6c:	4018      	ands	r0, r3
   13b6e:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
   13b70:	fab5 f385 	clz	r3, r5
  return a & b;
   13b74:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
   13b76:	095b      	lsrs	r3, r3, #5
  return a ^ b;
   13b78:	4044      	eors	r4, r0
  return a & b;
   13b7a:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
   13b7c:	425b      	negs	r3, r3
  return a & b;
   13b7e:	4020      	ands	r0, r4
   13b80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
   13b84:	4058      	eors	r0, r3
   13b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b8a:	bf00      	nop
   13b8c:	63afbe7b 	.word	0x63afbe7b
   13b90:	4da2cbf2 	.word	0x4da2cbf2
   13b94:	2f16ac6c 	.word	0x2f16ac6c
   13b98:	1152aaa4 	.word	0x1152aaa4
   13b9c:	02582ab7 	.word	0x02582ab7
   13ba0:	000afe11 	.word	0x000afe11

00013ba4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   13ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ba8:	b08d      	sub	sp, #52	; 0x34
   13baa:	460c      	mov	r4, r1
   13bac:	9203      	str	r2, [sp, #12]
   13bae:	461a      	mov	r2, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
   13bb0:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   13bb4:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   13bb6:	6983      	ldr	r3, [r0, #24]
   13bb8:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   13bba:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13bbc:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   13bbe:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13bc0:	4619      	mov	r1, r3
   13bc2:	4620      	mov	r0, r4
   13bc4:	9304      	str	r3, [sp, #16]
   13bc6:	f005 fdf6 	bl	197b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   13bca:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13bce:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   13bd0:	4619      	mov	r1, r3
   13bd2:	4620      	mov	r0, r4
   13bd4:	f005 f951 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   13bd8:	2500      	movs	r5, #0
   13bda:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
   13bdc:	46a8      	mov	r8, r5
   13bde:	9b02      	ldr	r3, [sp, #8]
   13be0:	4598      	cmp	r8, r3
   13be2:	da7b      	bge.n	13cdc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x138>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   13be4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   13be8:	f88d 301f 	strb.w	r3, [sp, #31]
   13bec:	9b03      	ldr	r3, [sp, #12]
   13bee:	195f      	adds	r7, r3, r5
   13bf0:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   13bf2:	2200      	movs	r2, #0
      return __a;
   13bf4:	f10d 0c1f 	add.w	ip, sp, #31
   13bf8:	42a2      	cmp	r2, r4
   13bfa:	da0e      	bge.n	13c1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   13bfc:	460b      	mov	r3, r1
      if (__a < __b)
   13bfe:	f99d 001f 	ldrsb.w	r0, [sp, #31]
   13c02:	f993 6000 	ldrsb.w	r6, [r3]
   13c06:	4286      	cmp	r6, r0
      return __a;
   13c08:	bfd8      	it	le
   13c0a:	4663      	movle	r3, ip
   13c0c:	3101      	adds	r1, #1
   13c0e:	f993 3000 	ldrsb.w	r3, [r3]
   13c12:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   13c16:	3201      	adds	r2, #1
   13c18:	e7ee      	b.n	13bf8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x54>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   13c1a:	2600      	movs	r6, #0
   13c1c:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
   13c1e:	46b1      	mov	r9, r6
   13c20:	45a1      	cmp	r9, r4
   13c22:	da15      	bge.n	13c50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   13c24:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   13c28:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32_t input_diff =
   13c2c:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
   13c2e:	9b01      	ldr	r3, [sp, #4]
   13c30:	4283      	cmp	r3, r0
   13c32:	dc0a      	bgt.n	13c4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa6>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   13c34:	9b00      	ldr	r3, [sp, #0]
   13c36:	4659      	mov	r1, fp
   13c38:	4098      	lsls	r0, r3
   13c3a:	f7ff fc9f 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   13c3e:	f7ff ff17 	bl	13a70 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   13c42:	210c      	movs	r1, #12
   13c44:	f7ff fd42 	bl	136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   13c48:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   13c4a:	f109 0901 	add.w	r9, r9, #1
   13c4e:	e7e7      	b.n	13c20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   13c50:	4630      	mov	r0, r6
   13c52:	aa08      	add	r2, sp, #32
   13c54:	210c      	movs	r1, #12
   13c56:	f005 fdf6 	bl	19846 <_ZN6tflite13GetReciprocalEiiPi>
   13c5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13c5c:	4682      	mov	sl, r0
   13c5e:	eb03 0645 	add.w	r6, r3, r5, lsl #1
    for (int c = 0; c < depth; ++c) {
   13c62:	f04f 0900 	mov.w	r9, #0
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   13c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    for (int c = 0; c < depth; ++c) {
   13c6a:	45a1      	cmp	r9, r4
   13c6c:	da32      	bge.n	13cd4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x130>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   13c6e:	f99d 101f 	ldrsb.w	r1, [sp, #31]
   13c72:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32_t input_diff =
   13c76:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   13c78:	9901      	ldr	r1, [sp, #4]
   13c7a:	4281      	cmp	r1, r0
   13c7c:	dc28      	bgt.n	13cd0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
   13c7e:	9b00      	ldr	r3, [sp, #0]
   13c80:	4659      	mov	r1, fp
   13c82:	4098      	lsls	r0, r3
   13c84:	f7ff fc7a 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   13c88:	f7ff fef2 	bl	13a70 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   13c8c:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   13c8e:	4650      	mov	r0, sl
   13c90:	f005 fde9 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
   13c94:	9908      	ldr	r1, [sp, #32]
   13c96:	310f      	adds	r1, #15
   13c98:	f7ff fd18 	bl	136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            unsat_output +
   13c9c:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
   13ca0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      return __a;
   13ca4:	bfb4      	ite	lt
   13ca6:	a909      	addlt	r1, sp, #36	; 0x24
	return __b;
   13ca8:	a90a      	addge	r1, sp, #40	; 0x28
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   13caa:	f647 72ff 	movw	r2, #32767	; 0x7fff
        const int32_t shifted_output =
   13cae:	9009      	str	r0, [sp, #36]	; 0x24
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   13cb0:	920a      	str	r2, [sp, #40]	; 0x28
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
   13cb2:	480c      	ldr	r0, [pc, #48]	; (13ce4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x140>)
   13cb4:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__a < __b)
   13cb6:	6808      	ldr	r0, [r1, #0]
   13cb8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
   13cbc:	bfb8      	it	lt
   13cbe:	a90b      	addlt	r1, sp, #44	; 0x2c
      if (__b < __a)
   13cc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   13cc4:	6809      	ldr	r1, [r1, #0]
   13cc6:	8031      	strh	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   13cc8:	f109 0901 	add.w	r9, r9, #1
   13ccc:	3602      	adds	r6, #2
   13cce:	e7cc      	b.n	13c6a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc6>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   13cd0:	8033      	strh	r3, [r6, #0]
   13cd2:	e7f9      	b.n	13cc8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x124>
  for (int i = 0; i < outer_size; ++i) {
   13cd4:	f108 0801 	add.w	r8, r8, #1
   13cd8:	4425      	add	r5, r4
   13cda:	e780      	b.n	13bde <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
   13cdc:	b00d      	add	sp, #52	; 0x34
   13cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce2:	bf00      	nop
   13ce4:	ffff8000 	.word	0xffff8000

00013ce8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   13ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13cec:	460c      	mov	r4, r1
   13cee:	b0a0      	sub	sp, #128	; 0x80
  TFLITE_DCHECK(context != nullptr);
   13cf0:	4680      	mov	r8, r0
   13cf2:	b908      	cbnz	r0, 13cf8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
   13cf4:	f007 ffed 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node != nullptr);
   13cf8:	2900      	cmp	r1, #0
   13cfa:	d0fb      	beq.n	13cf4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   13cfc:	680a      	ldr	r2, [r1, #0]
   13cfe:	6d43      	ldr	r3, [r0, #84]	; 0x54
   13d00:	6851      	ldr	r1, [r2, #4]
   13d02:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   13d04:	6862      	ldr	r2, [r4, #4]
   13d06:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
   13d0a:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
   13d0c:	4607      	mov	r7, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   13d0e:	4640      	mov	r0, r8
   13d10:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
   13d12:	6924      	ldr	r4, [r4, #16]
   13d14:	4605      	mov	r5, r0
   13d16:	2c00      	cmp	r4, #0
   13d18:	d0ec      	beq.n	13cf4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const SoftmaxParams data =
   13d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13d1c:	ae12      	add	r6, sp, #72	; 0x48
   13d1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   13d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13d22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   13d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13d26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   13d28:	e894 0003 	ldmia.w	r4, {r0, r1}
   13d2c:	e886 0003 	stmia.w	r6, {r0, r1}
  switch (input->type) {
   13d30:	7a38      	ldrb	r0, [r7, #8]
   13d32:	1e43      	subs	r3, r0, #1
   13d34:	2b08      	cmp	r3, #8
   13d36:	f200 808d 	bhi.w	13e54 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   13d3a:	e8df f003 	tbb	[pc, r3]
   13d3e:	8b05      	.short	0x8b05
   13d40:	8b8b8b22 	.word	0x8b8b8b22
   13d44:	8b22      	.short	0x8b22
   13d46:	22          	.byte	0x22
   13d47:	00          	.byte	0x00
          data, tflite::micro::GetTensorShape(input),
   13d48:	4639      	mov	r1, r7
   13d4a:	a806      	add	r0, sp, #24
   13d4c:	f005 f988 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   13d50:	683a      	ldr	r2, [r7, #0]
   13d52:	9205      	str	r2, [sp, #20]
          tflite::micro::GetTensorShape(output),
   13d54:	4629      	mov	r1, r5
   13d56:	a80c      	add	r0, sp, #48	; 0x30
   13d58:	f005 f982 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13d5c:	9a05      	ldr	r2, [sp, #20]
   13d5e:	b105      	cbz	r5, 13d62 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
   13d60:	682d      	ldr	r5, [r5, #0]
      tflite::reference_ops::Softmax(
   13d62:	9500      	str	r5, [sp, #0]
   13d64:	ab0c      	add	r3, sp, #48	; 0x30
   13d66:	a906      	add	r1, sp, #24
   13d68:	a812      	add	r0, sp, #72	; 0x48
   13d6a:	f7ff fc2b 	bl	135c4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      const auto output_shape = tflite::micro::GetTensorShape(output);
   13d6e:	a80c      	add	r0, sp, #48	; 0x30
   13d70:	f005 f835 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
   13d74:	a806      	add	r0, sp, #24
   13d76:	f005 f832 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   13d7a:	2000      	movs	r0, #0
}
   13d7c:	b020      	add	sp, #128	; 0x80
   13d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (input->type == kTfLiteUInt8) {
   13d82:	2803      	cmp	r0, #3
   13d84:	d117      	bne.n	13db6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
        op_data, tflite::micro::GetTensorShape(input),
   13d86:	4639      	mov	r1, r7
   13d88:	a80c      	add	r0, sp, #48	; 0x30
   13d8a:	f005 f969 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   13d8e:	683a      	ldr	r2, [r7, #0]
   13d90:	9205      	str	r2, [sp, #20]
        tflite::micro::GetTensorShape(output),
   13d92:	4629      	mov	r1, r5
   13d94:	a806      	add	r0, sp, #24
   13d96:	f005 f963 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13d9a:	9a05      	ldr	r2, [sp, #20]
   13d9c:	b105      	cbz	r5, 13da0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>
   13d9e:	682d      	ldr	r5, [r5, #0]
    tflite::reference_ops::Softmax(
   13da0:	9500      	str	r5, [sp, #0]
   13da2:	ab06      	add	r3, sp, #24
   13da4:	a90c      	add	r1, sp, #48	; 0x30
   13da6:	a812      	add	r0, sp, #72	; 0x48
   13da8:	f005 fd61 	bl	1986e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
   13dac:	a806      	add	r0, sp, #24
   13dae:	f005 f816 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
   13db2:	a80c      	add	r0, sp, #48	; 0x30
   13db4:	e7df      	b.n	13d76 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8e>
  } else if (input->type == kTfLiteInt8) {
   13db6:	2809      	cmp	r0, #9
   13db8:	d138      	bne.n	13e2c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x144>
    if (output->type == kTfLiteInt16) {
   13dba:	7a2b      	ldrb	r3, [r5, #8]
   13dbc:	2b07      	cmp	r3, #7
          op_data, tflite::micro::GetTensorShape(input),
   13dbe:	4639      	mov	r1, r7
    if (output->type == kTfLiteInt16) {
   13dc0:	d111      	bne.n	13de6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xfe>
          op_data, tflite::micro::GetTensorShape(input),
   13dc2:	a80c      	add	r0, sp, #48	; 0x30
   13dc4:	f005 f94c 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   13dc8:	683a      	ldr	r2, [r7, #0]
   13dca:	9205      	str	r2, [sp, #20]
          tflite::micro::GetTensorShape(output),
   13dcc:	4629      	mov	r1, r5
   13dce:	a806      	add	r0, sp, #24
   13dd0:	f005 f946 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   13dd4:	682b      	ldr	r3, [r5, #0]
   13dd6:	9300      	str	r3, [sp, #0]
   13dd8:	9a05      	ldr	r2, [sp, #20]
   13dda:	ab06      	add	r3, sp, #24
   13ddc:	a90c      	add	r1, sp, #48	; 0x30
   13dde:	a812      	add	r0, sp, #72	; 0x48
   13de0:	f7ff fee0 	bl	13ba4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   13de4:	e7e2      	b.n	13dac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
   13de6:	a806      	add	r0, sp, #24
   13de8:	f005 f93a 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
   13dec:	4629      	mov	r1, r5
   13dee:	a80c      	add	r0, sp, #48	; 0x30
   13df0:	f005 f936 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
   13df4:	9b06      	ldr	r3, [sp, #24]
   13df6:	3b01      	subs	r3, #1
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13df8:	aa0c      	add	r2, sp, #48	; 0x30
   13dfa:	4619      	mov	r1, r3
   13dfc:	a806      	add	r0, sp, #24
   13dfe:	9305      	str	r3, [sp, #20]
   13e00:	f005 fcd9 	bl	197b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   13e04:	9b05      	ldr	r3, [sp, #20]
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   13e06:	4604      	mov	r4, r0
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   13e08:	aa0c      	add	r2, sp, #48	; 0x30
   13e0a:	4619      	mov	r1, r3
   13e0c:	a806      	add	r0, sp, #24
   13e0e:	f005 f834 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
   13e12:	682b      	ldr	r3, [r5, #0]
   13e14:	9302      	str	r3, [sp, #8]
   13e16:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13e18:	9301      	str	r3, [sp, #4]
   13e1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13e1c:	9300      	str	r3, [sp, #0]
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   13e1e:	4602      	mov	r2, r0
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
   13e20:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13e22:	6838      	ldr	r0, [r7, #0]
   13e24:	4621      	mov	r1, r4
   13e26:	f000 fb8d 	bl	14544 <arm_softmax_s8>
   13e2a:	e7a0      	b.n	13d6e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
        op_data, tflite::micro::GetTensorShape(input),
   13e2c:	4639      	mov	r1, r7
   13e2e:	a80c      	add	r0, sp, #48	; 0x30
   13e30:	f005 f916 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   13e34:	683a      	ldr	r2, [r7, #0]
   13e36:	9205      	str	r2, [sp, #20]
        tflite::micro::GetTensorShape(output),
   13e38:	4629      	mov	r1, r5
   13e3a:	a806      	add	r0, sp, #24
   13e3c:	f005 f910 	bl	19060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13e40:	9a05      	ldr	r2, [sp, #20]
   13e42:	b105      	cbz	r5, 13e46 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   13e44:	682d      	ldr	r5, [r5, #0]
    tflite::reference_ops::SoftmaxInt16(
   13e46:	9500      	str	r5, [sp, #0]
   13e48:	ab06      	add	r3, sp, #24
   13e4a:	a90c      	add	r1, sp, #48	; 0x30
   13e4c:	a812      	add	r0, sp, #72	; 0x48
   13e4e:	f7ff fc63 	bl	13718 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
   13e52:	e7ab      	b.n	13dac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   13e54:	f8d8 4014 	ldr.w	r4, [r8, #20]
   13e58:	f000 ffcc 	bl	14df4 <TfLiteTypeGetName>
   13e5c:	7a3b      	ldrb	r3, [r7, #8]
   13e5e:	4903      	ldr	r1, [pc, #12]	; (13e6c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x184>)
   13e60:	4602      	mov	r2, r0
   13e62:	4640      	mov	r0, r8
   13e64:	47a0      	blx	r4
      return kTfLiteError;
   13e66:	2001      	movs	r0, #1
   13e68:	e788      	b.n	13d7c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x94>
   13e6a:	bf00      	nop
   13e6c:	0003e383 	.word	0x0003e383

00013e70 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
   13e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
   13e74:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   13e78:	ee07 9a90 	vmov	s15, r9
   13e7c:	ee30 7ac0 	vsub.f32	s14, s1, s0
   13e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    const int num) {
   13e84:	ed2d 8b0c 	vpush	{d8-d13}
  float step = (max - min) / (num - 1);
   13e88:	eec7 ca27 	vdiv.f32	s25, s14, s15
                    const int num) {
   13e8c:	b085      	sub	sp, #20
   13e8e:	4604      	mov	r4, r0
   13e90:	460f      	mov	r7, r1
   13e92:	4615      	mov	r5, r2
   13e94:	f1a1 0802 	sub.w	r8, r1, #2
  float half_step = step / 2.0f;
  for (int i = 0; i < num - 1; i++) {
   13e98:	2600      	movs	r6, #0
  float half_step = step / 2.0f;
   13e9a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
   13e9e:	ee2c caab 	vmul.f32	s24, s25, s23
  for (int i = 0; i < num - 1; i++) {
   13ea2:	eddf 8a48 	vldr	s17, [pc, #288]	; 13fc4 <_ZN6tflite7gen_lutEPFffEffPsi+0x154>
   13ea6:	eddf aa48 	vldr	s21, [pc, #288]	; 13fc8 <_ZN6tflite7gen_lutEPFffEffPsi+0x158>
   13eaa:	ed9f aa48 	vldr	s20, [pc, #288]	; 13fcc <_ZN6tflite7gen_lutEPFffEffPsi+0x15c>
                    const int num) {
   13eae:	eeb0 9a40 	vmov.f32	s18, s0
   13eb2:	eeb0 ba60 	vmov.f32	s22, s1
  for (int i = 0; i < num - 1; i++) {
   13eb6:	45b1      	cmp	r9, r6
   13eb8:	dd58      	ble.n	13f6c <_ZN6tflite7gen_lutEPFffEffPsi+0xfc>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   13eba:	ee07 6a90 	vmov	s15, r6
   13ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   13ec2:	eeb0 da49 	vmov.f32	s26, s18
   13ec6:	eea7 daac 	vfma.f32	s26, s15, s25
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   13eca:	3601      	adds	r6, #1
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   13ecc:	eeb0 0a4d 	vmov.f32	s0, s26
   13ed0:	47a0      	blx	r4
   13ed2:	ee20 0a28 	vmul.f32	s0, s0, s17
   13ed6:	f005 fd72 	bl	199be <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   13eda:	ee07 6a90 	vmov	s15, r6
   13ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   13ee2:	eeb0 8a40 	vmov.f32	s16, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   13ee6:	eeb0 0a49 	vmov.f32	s0, s18
   13eea:	eea7 0aac 	vfma.f32	s0, s15, s25
   13eee:	47a0      	blx	r4
   13ef0:	eef0 9a40 	vmov.f32	s19, s0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
   13ef4:	eeb0 0a4d 	vmov.f32	s0, s26
   13ef8:	47a0      	blx	r4
   13efa:	ee20 0a28 	vmul.f32	s0, s0, s17
   13efe:	f005 fd5e 	bl	199be <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   13f02:	eea9 0aa8 	vfma.f32	s0, s19, s17
   13f06:	ee20 0a2b 	vmul.f32	s0, s0, s23
   13f0a:	f005 fd58 	bl	199be <_ZN6tflite11TfLiteRoundIfEET_S1_>
   13f0e:	eef0 9a40 	vmov.f32	s19, s0
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   13f12:	ee3d 0a0c 	vadd.f32	s0, s26, s24
   13f16:	47a0      	blx	r4
   13f18:	ee20 0a28 	vmul.f32	s0, s0, s17
   13f1c:	f005 fd4f 	bl	199be <_ZN6tflite11TfLiteRoundIfEET_S1_>
    float midpoint_err = midpoint_interp_val - midpoint_val;
   13f20:	ee39 0ac0 	vsub.f32	s0, s19, s0
    float bias = TfLiteRound(midpoint_err / 2.0f);
   13f24:	ee20 0a2b 	vmul.f32	s0, s0, s23
   13f28:	f005 fd49 	bl	199be <_ZN6tflite11TfLiteRoundIfEET_S1_>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   13f2c:	ee78 7a40 	vsub.f32	s15, s16, s0
   13f30:	edcd aa02 	vstr	s21, [sp, #8]
      if (__a < __b)
   13f34:	eef4 7aea 	vcmpe.f32	s15, s21
   13f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
   13f3c:	bf4c      	ite	mi
   13f3e:	ab02      	addmi	r3, sp, #8
      return __a;
   13f40:	ab01      	addpl	r3, sp, #4
   13f42:	edcd 7a01 	vstr	s15, [sp, #4]
      if (__b < __a)
   13f46:	edd3 7a00 	vldr	s15, [r3]
                               32767.0f);
   13f4a:	ed8d aa03 	vstr	s20, [sp, #12]
   13f4e:	eef4 7aca 	vcmpe.f32	s15, s20
   13f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
   13f56:	bfc8      	it	gt
   13f58:	ab03      	addgt	r3, sp, #12
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   13f5a:	edd3 7a00 	vldr	s15, [r3]
   13f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13f62:	ee17 3a90 	vmov	r3, s15
   13f66:	f828 3f02 	strh.w	r3, [r8, #2]!
  for (int i = 0; i < num - 1; i++) {
   13f6a:	e7a4      	b.n	13eb6 <_ZN6tflite7gen_lutEPFffEffPsi+0x46>
  }
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
   13f6c:	eeb0 0a4b 	vmov.f32	s0, s22
   13f70:	47a0      	blx	r4
   13f72:	ee20 0a28 	vmul.f32	s0, s0, s17
   13f76:	f005 fd22 	bl	199be <_ZN6tflite11TfLiteRoundIfEET_S1_>
      if (__a < __b)
   13f7a:	eeb4 0aea 	vcmpe.f32	s0, s21
   13f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
   13f82:	bf4c      	ite	mi
   13f84:	ab02      	addmi	r3, sp, #8
      return __a;
   13f86:	ab01      	addpl	r3, sp, #4
   13f88:	ed8d 0a01 	vstr	s0, [sp, #4]
   13f8c:	edcd aa02 	vstr	s21, [sp, #8]
      if (__b < __a)
   13f90:	edd3 7a00 	vldr	s15, [r3]
   13f94:	ed8d aa03 	vstr	s20, [sp, #12]
   13f98:	eef4 7aca 	vcmpe.f32	s15, s20
   13f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
   13fa0:	bfc8      	it	gt
   13fa2:	ab03      	addgt	r3, sp, #12
  table[num - 1] = std::min<float>(
   13fa4:	edd3 7a00 	vldr	s15, [r3]
   13fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   13fac:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   13fb0:	ee17 3a90 	vmov	r3, s15
   13fb4:	3a01      	subs	r2, #1
   13fb6:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
}
   13fba:	b005      	add	sp, #20
   13fbc:	ecbd 8b0c 	vpop	{d8-d13}
   13fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13fc4:	47000000 	.word	0x47000000
   13fc8:	c7000000 	.word	0xc7000000
   13fcc:	46fffe00 	.word	0x46fffe00

00013fd0 <arm_cfft_init_f32>:

        /*  Initialise the FFT length */
        S->fftLen = fftLen;

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
   13fd0:	2300      	movs	r3, #0


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
   13fd2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        S->fftLen = fftLen;
   13fd6:	8001      	strh	r1, [r0, #0]
        S->pTwiddle = NULL;
   13fd8:	6043      	str	r3, [r0, #4]
        switch (S->fftLen) {
   13fda:	d02a      	beq.n	14032 <arm_cfft_init_f32+0x62>
   13fdc:	d80d      	bhi.n	13ffa <arm_cfft_init_f32+0x2a>
   13fde:	2940      	cmp	r1, #64	; 0x40
   13fe0:	d029      	beq.n	14036 <arm_cfft_init_f32+0x66>
   13fe2:	d806      	bhi.n	13ff2 <arm_cfft_init_f32+0x22>
   13fe4:	2910      	cmp	r1, #16
   13fe6:	d02a      	beq.n	1403e <arm_cfft_init_f32+0x6e>
   13fe8:	2920      	cmp	r1, #32
   13fea:	d026      	beq.n	1403a <arm_cfft_init_f32+0x6a>
   13fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ff0:	e019      	b.n	14026 <arm_cfft_init_f32+0x56>
   13ff2:	2980      	cmp	r1, #128	; 0x80
   13ff4:	d1fa      	bne.n	13fec <arm_cfft_init_f32+0x1c>
            break;
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
   13ff6:	4a13      	ldr	r2, [pc, #76]	; (14044 <arm_cfft_init_f32+0x74>)
   13ff8:	e00f      	b.n	1401a <arm_cfft_init_f32+0x4a>
        switch (S->fftLen) {
   13ffa:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   13ffe:	d014      	beq.n	1402a <arm_cfft_init_f32+0x5a>
   14000:	d807      	bhi.n	14012 <arm_cfft_init_f32+0x42>
   14002:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   14006:	d012      	beq.n	1402e <arm_cfft_init_f32+0x5e>
   14008:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1400c:	d1ee      	bne.n	13fec <arm_cfft_init_f32+0x1c>
            FFTINIT(f32,1024);
   1400e:	4a0e      	ldr	r2, [pc, #56]	; (14048 <arm_cfft_init_f32+0x78>)
   14010:	e003      	b.n	1401a <arm_cfft_init_f32+0x4a>
        switch (S->fftLen) {
   14012:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   14016:	d1e9      	bne.n	13fec <arm_cfft_init_f32+0x1c>
            FFTINIT(f32,4096);
   14018:	4a0c      	ldr	r2, [pc, #48]	; (1404c <arm_cfft_init_f32+0x7c>)
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
   1401a:	8991      	ldrh	r1, [r2, #12]
   1401c:	8181      	strh	r1, [r0, #12]
   1401e:	6891      	ldr	r1, [r2, #8]
   14020:	6852      	ldr	r2, [r2, #4]
   14022:	6081      	str	r1, [r0, #8]
   14024:	6042      	str	r2, [r0, #4]
            break;
        }


        return (status);
}
   14026:	4618      	mov	r0, r3
   14028:	4770      	bx	lr
            FFTINIT(f32,2048);
   1402a:	4a09      	ldr	r2, [pc, #36]	; (14050 <arm_cfft_init_f32+0x80>)
   1402c:	e7f5      	b.n	1401a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,512);
   1402e:	4a09      	ldr	r2, [pc, #36]	; (14054 <arm_cfft_init_f32+0x84>)
   14030:	e7f3      	b.n	1401a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,256);
   14032:	4a09      	ldr	r2, [pc, #36]	; (14058 <arm_cfft_init_f32+0x88>)
   14034:	e7f1      	b.n	1401a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,64);
   14036:	4a09      	ldr	r2, [pc, #36]	; (1405c <arm_cfft_init_f32+0x8c>)
   14038:	e7ef      	b.n	1401a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,32);
   1403a:	4a09      	ldr	r2, [pc, #36]	; (14060 <arm_cfft_init_f32+0x90>)
   1403c:	e7ed      	b.n	1401a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,16);
   1403e:	4a09      	ldr	r2, [pc, #36]	; (14064 <arm_cfft_init_f32+0x94>)
   14040:	e7eb      	b.n	1401a <arm_cfft_init_f32+0x4a>
   14042:	bf00      	nop
   14044:	00036198 	.word	0x00036198
   14048:	00036188 	.word	0x00036188
   1404c:	000361e8 	.word	0x000361e8
   14050:	000361b8 	.word	0x000361b8
   14054:	000361f8 	.word	0x000361f8
   14058:	000361c8 	.word	0x000361c8
   1405c:	00036208 	.word	0x00036208
   14060:	000361d8 	.word	0x000361d8
   14064:	000361a8 	.word	0x000361a8

00014068 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
   14068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1406c:	ed2d 8b10 	vpush	{d8-d15}
   14070:	b08f      	sub	sp, #60	; 0x3c
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
   14072:	ed9f 5ab0 	vldr	s10, [pc, #704]	; 14334 <arm_radix8_butterfly_f32+0x2cc>
{
   14076:	9001      	str	r0, [sp, #4]
   14078:	9103      	str	r1, [sp, #12]
   1407a:	920d      	str	r2, [sp, #52]	; 0x34
   1407c:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
   1407e:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
   14080:	9b02      	ldr	r3, [sp, #8]
   14082:	08da      	lsrs	r2, r3, #3
      i1 = 0;
   14084:	0151      	lsls	r1, r2, #5
   14086:	9108      	str	r1, [sp, #32]
   14088:	9901      	ldr	r1, [sp, #4]
   1408a:	eb01 1c42 	add.w	ip, r1, r2, lsl #5
   1408e:	00d1      	lsls	r1, r2, #3
   14090:	9107      	str	r1, [sp, #28]
   14092:	f06f 0117 	mvn.w	r1, #23
   14096:	4351      	muls	r1, r2
   14098:	2018      	movs	r0, #24
   1409a:	fb00 f402 	mul.w	r4, r0, r2
   1409e:	eb0c 0701 	add.w	r7, ip, r1
   140a2:	2028      	movs	r0, #40	; 0x28
   140a4:	940c      	str	r4, [sp, #48]	; 0x30
   140a6:	eb07 1642 	add.w	r6, r7, r2, lsl #5
   140aa:	fb00 f402 	mul.w	r4, r0, r2
   140ae:	2030      	movs	r0, #48	; 0x30
   140b0:	1875      	adds	r5, r6, r1
   140b2:	9406      	str	r4, [sp, #24]
   140b4:	fb00 fb02 	mul.w	fp, r0, r2
   140b8:	0114      	lsls	r4, r2, #4
   140ba:	2038      	movs	r0, #56	; 0x38
   140bc:	9405      	str	r4, [sp, #20]
   140be:	fb00 fa02 	mul.w	sl, r0, r2
   140c2:	eb05 1442 	add.w	r4, r5, r2, lsl #5
   140c6:	9801      	ldr	r0, [sp, #4]
   140c8:	4421      	add	r1, r4
   140ca:	00db      	lsls	r3, r3, #3
   140cc:	eb01 1842 	add.w	r8, r1, r2, lsl #5
   140d0:	f100 0e04 	add.w	lr, r0, #4
   140d4:	f04f 0900 	mov.w	r9, #0
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
   140d8:	eddc 7a00 	vldr	s15, [ip]
   140dc:	ed1e 7a01 	vldr	s14, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
   140e0:	ed97 6a00 	vldr	s12, [r7]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   140e4:	edd8 3a00 	vldr	s7, [r8]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
   140e8:	edd5 4a00 	vldr	s9, [r5]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   140ec:	edd1 2a00 	vldr	s5, [r1]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
   140f0:	ee77 6a27 	vadd.f32	s13, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
   140f4:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
   140f8:	edd6 7a00 	vldr	s15, [r6]
   140fc:	ee76 5a27 	vadd.f32	s11, s12, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
   14100:	ee36 6a67 	vsub.f32	s12, s12, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
   14104:	edd4 7a00 	vldr	s15, [r4]
   14108:	ee34 4aa7 	vadd.f32	s8, s9, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
   1410c:	ee74 4ae7 	vsub.f32	s9, s9, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
   14110:	ee72 7aa3 	vadd.f32	s15, s5, s7
         t1 = r1 - r3;
   14114:	ee36 0ac4 	vsub.f32	s0, s13, s8
         r3 = r2 - r4;
   14118:	ee75 0ae7 	vsub.f32	s1, s11, s15
         r1 = r1 + r3;
   1411c:	ee76 6a84 	vadd.f32	s13, s13, s8
         r2 = r2 + r4;
   14120:	ee75 7aa7 	vadd.f32	s15, s11, s15
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
   14124:	ee72 2ae3 	vsub.f32	s5, s5, s7
         pSrc[2 * i1] = r1 + r2;
   14128:	ee76 5aa7 	vadd.f32	s11, s13, s15
         pSrc[2 * i5] = r1 - r2;
   1412c:	ee76 6ae7 	vsub.f32	s13, s13, s15
         pSrc[2 * i1] = r1 + r2;
   14130:	ed4e 5a01 	vstr	s11, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
   14134:	edcc 6a00 	vstr	s13, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   14138:	eddc 7a01 	vldr	s15, [ip, #4]
   1413c:	ed9e 4a00 	vldr	s8, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   14140:	edd7 3a01 	vldr	s7, [r7, #4]
   14144:	edd6 6a01 	vldr	s13, [r6, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   14148:	ed95 3a01 	vldr	s6, [r5, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   1414c:	ed98 2a01 	vldr	s4, [r8, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   14150:	ee74 5a27 	vadd.f32	s11, s8, s15
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
   14154:	ee34 4a67 	vsub.f32	s8, s8, s15
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   14158:	ee73 7aa6 	vadd.f32	s15, s7, s13
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
   1415c:	ee73 6ae6 	vsub.f32	s13, s7, s13
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   14160:	edd4 3a01 	vldr	s7, [r4, #4]
   14164:	ee73 1a23 	vadd.f32	s3, s6, s7
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
   14168:	ee73 3a63 	vsub.f32	s7, s6, s7
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   1416c:	ed91 3a01 	vldr	s6, [r1, #4]
   14170:	ee33 1a02 	vadd.f32	s2, s6, s4
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
   14174:	ee33 3a42 	vsub.f32	s6, s6, s4
         t2 = r1 - s3;
   14178:	ee35 2ae1 	vsub.f32	s4, s11, s3
         r1 = r1 + s3;
   1417c:	ee75 5aa1 	vadd.f32	s11, s11, s3
         s3 = r2 - r4;
   14180:	ee77 1ac1 	vsub.f32	s3, s15, s2
         r2 = r2 + r4;
   14184:	ee77 7a81 	vadd.f32	s15, s15, s2
         pSrc[2 * i1 + 1] = r1 + r2;
   14188:	ee35 1aa7 	vadd.f32	s2, s11, s15
         pSrc[2 * i5 + 1] = r1 - r2;
   1418c:	ee75 5ae7 	vsub.f32	s11, s11, s15
         pSrc[2 * i3]     = t1 + s3;
   14190:	ee70 7a21 	vadd.f32	s15, s0, s3
         pSrc[2 * i1 + 1] = r1 + r2;
   14194:	ed8e 1a00 	vstr	s2, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
   14198:	edcc 5a01 	vstr	s11, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
   1419c:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i7]     = t1 - s3;
   141a0:	ee70 5a61 	vsub.f32	s11, s0, s3
         pSrc[2 * i3 + 1] = t2 - r3;
   141a4:	ee72 7a60 	vsub.f32	s15, s4, s1
         pSrc[2 * i7]     = t1 - s3;
   141a8:	edc4 5a00 	vstr	s11, [r4]
         pSrc[2 * i3 + 1] = t2 - r3;
   141ac:	edc5 7a01 	vstr	s15, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
   141b0:	ee70 7a82 	vadd.f32	s15, s1, s4
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
         pSrc[2 * i4 + 1] = t2 + r8;

         i1 += n1;
      } while (i1 < fftLen);
   141b4:	449c      	add	ip, r3
         pSrc[2 * i7 + 1] = t2 + r3;
   141b6:	edc4 7a01 	vstr	s15, [r4, #4]
         r1 = (r6 - r8) * C81;
   141ba:	ee76 7a62 	vsub.f32	s15, s12, s5
         r6 = (r6 + r8) * C81;
   141be:	ee36 6a22 	vadd.f32	s12, s12, s5
         r2 = (s6 - s8) * C81;
   141c2:	ee76 2ac3 	vsub.f32	s5, s13, s6
         s6 = (s6 + s8) * C81;
   141c6:	ee76 6a83 	vadd.f32	s13, s13, s6
         r1 = (r6 - r8) * C81;
   141ca:	ee67 7a85 	vmul.f32	s15, s15, s10
         r6 = (r6 + r8) * C81;
   141ce:	ee26 6a05 	vmul.f32	s12, s12, s10
         r2 = (s6 - s8) * C81;
   141d2:	ee62 2a85 	vmul.f32	s5, s5, s10
         s6 = (s6 + s8) * C81;
   141d6:	ee66 6a85 	vmul.f32	s13, s13, s10
         t1 = r5 - r1;
   141da:	ee37 3a67 	vsub.f32	s6, s14, s15
         r8 = r7 - r6;
   141de:	ee74 5ac6 	vsub.f32	s11, s9, s12
         r5 = r5 + r1;
   141e2:	ee37 7a27 	vadd.f32	s14, s14, s15
         r7 = r7 + r6;
   141e6:	ee74 7a86 	vadd.f32	s15, s9, s12
         t2 = s5 - r2;
   141ea:	ee74 4a62 	vsub.f32	s9, s8, s5
         s5 = s5 + r2;
   141ee:	ee34 6a22 	vadd.f32	s12, s8, s5
         s8 = s7 - s6;
   141f2:	ee33 4ae6 	vsub.f32	s8, s7, s13
         s7 = s7 + s6;
   141f6:	ee73 6aa6 	vadd.f32	s13, s7, s13
      } while (i1 < fftLen);
   141fa:	441d      	add	r5, r3
         pSrc[2 * i2]     = r5 + s7;
   141fc:	ee77 3a26 	vadd.f32	s7, s14, s13
         pSrc[2 * i8]     = r5 - s7;
   14200:	ee37 7a66 	vsub.f32	s14, s14, s13
         pSrc[2 * i2]     = r5 + s7;
   14204:	edc7 3a00 	vstr	s7, [r7]
         pSrc[2 * i8]     = r5 - s7;
   14208:	ed88 7a00 	vstr	s14, [r8]
         pSrc[2 * i6]     = t1 + s8;
   1420c:	ee33 7a04 	vadd.f32	s14, s6, s8
         pSrc[2 * i4]     = t1 - s8;
   14210:	ee33 3a44 	vsub.f32	s6, s6, s8
         pSrc[2 * i6]     = t1 + s8;
   14214:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
   14218:	ee36 7a67 	vsub.f32	s14, s12, s15
         pSrc[2 * i8 + 1] = s5 + r7;
   1421c:	ee77 7a86 	vadd.f32	s15, s15, s12
         pSrc[2 * i4]     = t1 - s8;
   14220:	ed81 3a00 	vstr	s6, [r1]
         pSrc[2 * i2 + 1] = s5 - r7;
   14224:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
   14228:	edc8 7a01 	vstr	s15, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
   1422c:	ee74 7ae5 	vsub.f32	s15, s9, s11
         pSrc[2 * i4 + 1] = t2 + r8;
   14230:	ee75 5aa4 	vadd.f32	s11, s11, s9
         pSrc[2 * i6 + 1] = t2 - r8;
   14234:	edc6 7a01 	vstr	s15, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
   14238:	edc1 5a01 	vstr	s11, [r1, #4]
         i1 += n1;
   1423c:	9802      	ldr	r0, [sp, #8]
   1423e:	4481      	add	r9, r0
      } while (i1 < fftLen);
   14240:	9803      	ldr	r0, [sp, #12]
   14242:	4548      	cmp	r0, r9
   14244:	441f      	add	r7, r3
   14246:	441e      	add	r6, r3
   14248:	441c      	add	r4, r3
   1424a:	4419      	add	r1, r3
   1424c:	4498      	add	r8, r3
   1424e:	449e      	add	lr, r3
   14250:	f63f af42 	bhi.w	140d8 <arm_radix8_butterfly_f32+0x70>

      if (n2 < 8)
   14254:	2a07      	cmp	r2, #7
   14256:	f240 816f 	bls.w	14538 <arm_radix8_butterfly_f32+0x4d0>
   1425a:	9801      	ldr	r0, [sp, #4]
   1425c:	9908      	ldr	r1, [sp, #32]
   1425e:	4401      	add	r1, r0
   14260:	910b      	str	r1, [sp, #44]	; 0x2c
   14262:	9907      	ldr	r1, [sp, #28]
   14264:	4401      	add	r1, r0
   14266:	910a      	str	r1, [sp, #40]	; 0x28
   14268:	9906      	ldr	r1, [sp, #24]
   1426a:	4401      	add	r1, r0
   1426c:	9109      	str	r1, [sp, #36]	; 0x24
   1426e:	9905      	ldr	r1, [sp, #20]
   14270:	4401      	add	r1, r0
   14272:	9108      	str	r1, [sp, #32]
   14274:	eb0b 0100 	add.w	r1, fp, r0
   14278:	9107      	str	r1, [sp, #28]
   1427a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1427c:	4401      	add	r1, r0
   1427e:	9106      	str	r1, [sp, #24]
   14280:	eb0a 0100 	add.w	r1, sl, r0
   14284:	9105      	str	r1, [sp, #20]
         break;

      ia1 = 0;
      j = 1;
   14286:	2401      	movs	r4, #1
      ia1 = 0;
   14288:	2100      	movs	r1, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
   1428a:	9804      	ldr	r0, [sp, #16]
   1428c:	4401      	add	r1, r0
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;

         co2 = pCoef[2 * ia1];
   1428e:	980d      	ldr	r0, [sp, #52]	; 0x34
   14290:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
   14294:	edd5 1a00 	vldr	s3, [r5]
         co3 = pCoef[2 * ia2];
   14298:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
   1429c:	ed95 8a00 	vldr	s16, [r5]
         co4 = pCoef[2 * ia3];
   142a0:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
   142a4:	edd5 4a00 	vldr	s9, [r5]
         co5 = pCoef[2 * ia4];
   142a8:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
   142ac:	ed95 9a00 	vldr	s18, [r5]
         co6 = pCoef[2 * ia5];
   142b0:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
   142b4:	edd5 3a00 	vldr	s7, [r5]
         co7 = pCoef[2 * ia6];
   142b8:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
   142bc:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   142c0:	edd5 0a00 	vldr	s1, [r5]
         co8 = pCoef[2 * ia7];
   142c4:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
   142c8:	fb00 5601 	mla	r6, r0, r1, r5
   142cc:	9801      	ldr	r0, [sp, #4]
         si2 = pCoef[2 * ia1 + 1];
   142ce:	ed96 1a01 	vldr	s2, [r6, #4]
         co8 = pCoef[2 * ia7];
   142d2:	edd5 2a00 	vldr	s5, [r5]
         si3 = pCoef[2 * ia2 + 1];
         si4 = pCoef[2 * ia3 + 1];
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];
   142d6:	ed95 2a01 	vldr	s4, [r5, #4]
   142da:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
   142de:	980b      	ldr	r0, [sp, #44]	; 0x2c
   142e0:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
   142e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   142e6:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
   142ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   142ec:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
   142f0:	9808      	ldr	r0, [sp, #32]
   142f2:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
         si3 = pCoef[2 * ia2 + 1];
   142f6:	edd6 8a01 	vldr	s17, [r6, #4]
         si4 = pCoef[2 * ia3 + 1];
   142fa:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   142fe:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   14302:	9807      	ldr	r0, [sp, #28]
   14304:	ed96 4a01 	vldr	s8, [r6, #4]
         si5 = pCoef[2 * ia4 + 1];
   14308:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   1430c:	edd6 9a01 	vldr	s19, [r6, #4]
         si6 = pCoef[2 * ia5 + 1];
   14310:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
   14314:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   14318:	9806      	ldr	r0, [sp, #24]
   1431a:	ed96 3a01 	vldr	s6, [r6, #4]
         si7 = pCoef[2 * ia6 + 1];
   1431e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   14322:	ed96 0a01 	vldr	s0, [r6, #4]

         i1 = j;
   14326:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   1432a:	9805      	ldr	r0, [sp, #20]
   1432c:	46a3      	mov	fp, r4
   1432e:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
   14332:	e001      	b.n	14338 <arm_radix8_butterfly_f32+0x2d0>
   14334:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   14338:	edd9 7a00 	vldr	s15, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
   1433c:	edd8 6a00 	vldr	s13, [r8]
   14340:	ed9e 7a00 	vldr	s14, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   14344:	edda aa00 	vldr	s21, [sl]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
   14348:	ed96 6a00 	vldr	s12, [r6]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
   1434c:	ee36 dac7 	vsub.f32	s26, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
   14350:	ee3a aaa7 	vadd.f32	s20, s21, s15
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
   14354:	ee7a aae7 	vsub.f32	s21, s21, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
   14358:	ee76 7a87 	vadd.f32	s15, s13, s14
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
   1435c:	eddc 6a00 	vldr	s13, [ip]
   14360:	ed97 7a00 	vldr	s14, [r7]
   14364:	ee76 5a87 	vadd.f32	s11, s13, s14
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
   14368:	ee36 bac7 	vsub.f32	s22, s13, s14
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
   1436c:	edd5 6a00 	vldr	s13, [r5]
   14370:	ee36 7a26 	vadd.f32	s14, s12, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
   14374:	ee76 6a66 	vsub.f32	s13, s12, s13
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
   14378:	ee77 eac7 	vsub.f32	s29, s15, s14
            t1 = r1 - r3;
   1437c:	ee3a 6a65 	vsub.f32	s12, s20, s11
            r2 = r2 + r4;
   14380:	ee77 7a87 	vadd.f32	s15, s15, s14
            r1 = r1 + r3;
   14384:	ee3a aa25 	vadd.f32	s20, s20, s11
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   14388:	edda 5a01 	vldr	s11, [sl, #4]
            pSrc[2 * i1] = r1 + r2;
   1438c:	ee3a 7a27 	vadd.f32	s14, s20, s15
            r2 = r1 - r2;
   14390:	ee3a aa67 	vsub.f32	s20, s20, s15
            pSrc[2 * i1] = r1 + r2;
   14394:	ed8a 7a00 	vstr	s14, [sl]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   14398:	edd9 7a01 	vldr	s15, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   1439c:	ed98 7a01 	vldr	s14, [r8, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
   143a0:	ee35 faa7 	vadd.f32	s30, s11, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
   143a4:	ee35 cae7 	vsub.f32	s24, s11, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   143a8:	edde 7a01 	vldr	s15, [lr, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
   143ac:	ee77 ca67 	vsub.f32	s25, s14, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
   143b0:	ee37 ea27 	vadd.f32	s28, s14, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   143b4:	ed9c 7a01 	vldr	s14, [ip, #4]
   143b8:	edd7 7a01 	vldr	s15, [r7, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
   143bc:	ee77 ba67 	vsub.f32	s23, s14, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
   143c0:	ee77 da27 	vadd.f32	s27, s14, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
   143c4:	edd5 7a01 	vldr	s15, [r5, #4]
   143c8:	ed96 7a01 	vldr	s14, [r6, #4]
   143cc:	ee77 5a27 	vadd.f32	s11, s14, s15
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
   143d0:	ee37 7a67 	vsub.f32	s14, s14, s15
            t2 = s1 - s3;
   143d4:	ee7f 7a6d 	vsub.f32	s15, s30, s27
            s1 = s1 + s3;
   143d8:	ee7f da2d 	vadd.f32	s27, s30, s27
            s3 = s2 - s4;
   143dc:	ee3e fa65 	vsub.f32	s30, s28, s11
            s2 = s2 + s4;
   143e0:	ee3e ea25 	vadd.f32	s28, s28, s11
            r1 = t1 + s3;
   143e4:	ee76 5a0f 	vadd.f32	s11, s12, s30
            t1 = t1 - s3;
   143e8:	ee36 6a4f 	vsub.f32	s12, s12, s30
            pSrc[2 * i1 + 1] = s1 + s2;
   143ec:	ee3d fa8e 	vadd.f32	s30, s27, s28
            s2 = s1 - s2;
   143f0:	ee7d dace 	vsub.f32	s27, s27, s28
            s1 = t2 - r3;
   143f4:	ee37 eaee 	vsub.f32	s28, s15, s29
            t2 = t2 + r3;
   143f8:	ee7e 7aa7 	vadd.f32	s15, s29, s15
            p1 = co5 * r2;
            p2 = si5 * s2;
   143fc:	ee69 eaad 	vmul.f32	s29, s19, s27
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
   14400:	ee49 ea0a 	vmla.f32	s29, s18, s20
            p4 = si5 * r2;
   14404:	ee29 aa8a 	vmul.f32	s20, s19, s20
            pSrc[2 * i5 + 1] = p3 - p4;
   14408:	ee19 aa2d 	vnmls.f32	s20, s18, s27
            pSrc[2 * i1 + 1] = s1 + s2;
   1440c:	ed8a fa01 	vstr	s30, [sl, #4]
            pSrc[2 * i5 + 1] = p3 - p4;
   14410:	ed89 aa01 	vstr	s20, [r9, #4]
            p1 = co3 * r1;
            p2 = si3 * s1;
   14414:	ee28 aa8e 	vmul.f32	s20, s17, s28
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
   14418:	ee08 aa25 	vmla.f32	s20, s16, s11
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;

            i1 += n1;
         } while (i1 < fftLen);
   1441c:	449a      	add	sl, r3
            p4 = si3 * r1;
   1441e:	ee68 5aa5 	vmul.f32	s11, s17, s11
            pSrc[2 * i3 + 1] = p3 - p4;
   14422:	ee58 5a0e 	vnmls.f32	s11, s16, s28
            pSrc[2 * i5]     = p1 + p2;
   14426:	edc9 ea00 	vstr	s29, [r9]
            pSrc[2 * i3 + 1] = p3 - p4;
   1442a:	edcc 5a01 	vstr	s11, [ip, #4]
            p2 = si7 * t2;
   1442e:	ee60 5a27 	vmul.f32	s11, s0, s15
            pSrc[2 * i7]     = p1 + p2;
   14432:	ee40 5a86 	vmla.f32	s11, s1, s12
         } while (i1 < fftLen);
   14436:	4499      	add	r9, r3
            p4 = si7 * t1;
   14438:	ee20 6a06 	vmul.f32	s12, s0, s12
            pSrc[2 * i7 + 1] = p3 - p4;
   1443c:	ee10 6aa7 	vnmls.f32	s12, s1, s15
            pSrc[2 * i3]     = p1 + p2;
   14440:	ed8c aa00 	vstr	s20, [ip]
            pSrc[2 * i7]     = p1 + p2;
   14444:	edc7 5a00 	vstr	s11, [r7]
            r1 = (r6 - r8) * C81;
   14448:	ee3d aa66 	vsub.f32	s20, s26, s13
            s1 = (s6 - s8) * C81;
   1444c:	ee7c 5ac7 	vsub.f32	s11, s25, s14
            r6 = (r6 + r8) * C81;
   14450:	ee7d 6a26 	vadd.f32	s13, s26, s13
            s6 = (s6 + s8) * C81;
   14454:	ee3c 7a87 	vadd.f32	s14, s25, s14
            pSrc[2 * i7 + 1] = p3 - p4;
   14458:	ed87 6a01 	vstr	s12, [r7, #4]
            r6 = (r6 + r8) * C81;
   1445c:	ee66 6a85 	vmul.f32	s13, s13, s10
            s1 = (s6 - s8) * C81;
   14460:	ee25 6a85 	vmul.f32	s12, s11, s10
            r1 = (r6 - r8) * C81;
   14464:	ee2a aa05 	vmul.f32	s20, s20, s10
            s6 = (s6 + s8) * C81;
   14468:	ee27 7a05 	vmul.f32	s14, s14, s10
            r8 = r7 - r6;
   1446c:	ee7b ca66 	vsub.f32	s25, s22, s13
            s5 = s5 + s1;
   14470:	ee7c 5a06 	vadd.f32	s11, s24, s12
            r7 = r7 + r6;
   14474:	ee7b 6a26 	vadd.f32	s13, s22, s13
            t1 = r5 - r1;
   14478:	ee3a daca 	vsub.f32	s26, s21, s20
            r5 = r5 + r1;
   1447c:	ee3a aa8a 	vadd.f32	s20, s21, s20
            s8 = s7 - s6;
   14480:	ee7b aac7 	vsub.f32	s21, s23, s14
            s7 = s7 + s6;
   14484:	ee3b 7a87 	vadd.f32	s14, s23, s14
            t2 = s5 - s1;
   14488:	ee3c ba46 	vsub.f32	s22, s24, s12
            s1 = s5 - r7;
   1448c:	ee75 bae6 	vsub.f32	s23, s11, s13
            r1 = r5 + s7;
   14490:	ee3a 6a07 	vadd.f32	s12, s20, s14
            r5 = r5 - s7;
   14494:	ee7a 7a47 	vsub.f32	s15, s20, s14
            s5 = s5 + r7;
   14498:	ee76 6aa5 	vadd.f32	s13, s13, s11
            r6 = t1 + s8;
   1449c:	ee3d 7a2a 	vadd.f32	s14, s26, s21
            t1 = t1 - s8;
   144a0:	ee3d aa6a 	vsub.f32	s20, s26, s21
            t2 = t2 + r8;
   144a4:	ee7c 5a8b 	vadd.f32	s11, s25, s22
            s6 = t2 - r8;
   144a8:	ee7b aa6c 	vsub.f32	s21, s22, s25
            p2 = si2 * s1;
   144ac:	ee21 ba2b 	vmul.f32	s22, s2, s23
            pSrc[2 * i2]     = p1 + p2;
   144b0:	ee01 ba86 	vmla.f32	s22, s3, s12
         } while (i1 < fftLen);
   144b4:	449c      	add	ip, r3
   144b6:	441f      	add	r7, r3
            p4 = si2 * r1;
   144b8:	ee21 6a06 	vmul.f32	s12, s2, s12
            pSrc[2 * i2 + 1] = p3 - p4;
   144bc:	ee11 6aab 	vnmls.f32	s12, s3, s23
            pSrc[2 * i2]     = p1 + p2;
   144c0:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i2 + 1] = p3 - p4;
   144c4:	ed88 6a01 	vstr	s12, [r8, #4]
            p2 = si8 * s5;
   144c8:	ee22 6a26 	vmul.f32	s12, s4, s13
            pSrc[2 * i8]     = p1 + p2;
   144cc:	ee02 6aa7 	vmla.f32	s12, s5, s15
         } while (i1 < fftLen);
   144d0:	4498      	add	r8, r3
            pSrc[2 * i8]     = p1 + p2;
   144d2:	ed85 6a00 	vstr	s12, [r5]
            p4 = si8 * r5;
   144d6:	ee22 6a27 	vmul.f32	s12, s4, s15
            p2 = si6 * s6;
   144da:	ee63 7a2a 	vmul.f32	s15, s6, s21
            pSrc[2 * i6]     = p1 + p2;
   144de:	ee43 7a87 	vmla.f32	s15, s7, s14
            pSrc[2 * i8 + 1] = p3 - p4;
   144e2:	ee12 6aa6 	vnmls.f32	s12, s5, s13
            p4 = si6 * r6;
   144e6:	ee23 7a07 	vmul.f32	s14, s6, s14
            pSrc[2 * i8 + 1] = p3 - p4;
   144ea:	ed85 6a01 	vstr	s12, [r5, #4]
            pSrc[2 * i6]     = p1 + p2;
   144ee:	edce 7a00 	vstr	s15, [lr]
            p2 = si4 * t2;
   144f2:	ee64 7a25 	vmul.f32	s15, s8, s11
            pSrc[2 * i4]     = p1 + p2;
   144f6:	ee44 7a8a 	vmla.f32	s15, s9, s20
         } while (i1 < fftLen);
   144fa:	441d      	add	r5, r3
            pSrc[2 * i6 + 1] = p3 - p4;
   144fc:	ee13 7aaa 	vnmls.f32	s14, s7, s21
   14500:	ed8e 7a01 	vstr	s14, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
   14504:	edc6 7a00 	vstr	s15, [r6]
            p4 = si4 * t1;
   14508:	ee64 7a0a 	vmul.f32	s15, s8, s20
            pSrc[2 * i4 + 1] = p3 - p4;
   1450c:	ee54 7aa5 	vnmls.f32	s15, s9, s11
         } while (i1 < fftLen);
   14510:	449e      	add	lr, r3
            pSrc[2 * i4 + 1] = p3 - p4;
   14512:	edc6 7a01 	vstr	s15, [r6, #4]
            i1 += n1;
   14516:	9802      	ldr	r0, [sp, #8]
   14518:	4483      	add	fp, r0
         } while (i1 < fftLen);
   1451a:	9803      	ldr	r0, [sp, #12]
   1451c:	4558      	cmp	r0, fp
   1451e:	441e      	add	r6, r3
   14520:	f63f af0a 	bhi.w	14338 <arm_radix8_butterfly_f32+0x2d0>

         j++;
   14524:	3401      	adds	r4, #1
      } while (j < n2);
   14526:	42a2      	cmp	r2, r4
   14528:	f47f aeaf 	bne.w	1428a <arm_radix8_butterfly_f32+0x222>

      twidCoefModifier <<= 3;
   1452c:	9b04      	ldr	r3, [sp, #16]
   1452e:	9202      	str	r2, [sp, #8]
   14530:	00db      	lsls	r3, r3, #3
   14532:	b29b      	uxth	r3, r3
   14534:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
   14536:	e5a3      	b.n	14080 <arm_radix8_butterfly_f32+0x18>
}
   14538:	b00f      	add	sp, #60	; 0x3c
   1453a:	ecbd 8b10 	vpop	{d8-d15}
   1453e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14542:	bf00      	nop

00014544 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
   14544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14548:	b08f      	sub	sp, #60	; 0x3c
   1454a:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   1454c:	2300      	movs	r3, #0
{
   1454e:	9008      	str	r0, [sp, #32]
   14550:	910b      	str	r1, [sp, #44]	; 0x2c
   14552:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   14554:	9300      	str	r3, [sp, #0]
   14556:	9303      	str	r3, [sp, #12]
   14558:	9a00      	ldr	r2, [sp, #0]
   1455a:	9b08      	ldr	r3, [sp, #32]
   1455c:	4413      	add	r3, r2
   1455e:	9304      	str	r3, [sp, #16]
   14560:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14562:	4413      	add	r3, r2
   14564:	9307      	str	r3, [sp, #28]
   14566:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14568:	9b03      	ldr	r3, [sp, #12]
   1456a:	4293      	cmp	r3, r2
   1456c:	db02      	blt.n	14574 <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
   1456e:	b00f      	add	sp, #60	; 0x3c
   14570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
   14574:	9b08      	ldr	r3, [sp, #32]
   14576:	9a00      	ldr	r2, [sp, #0]
   14578:	569b      	ldrsb	r3, [r3, r2]
   1457a:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
   1457c:	2301      	movs	r3, #1
   1457e:	9a02      	ldr	r2, [sp, #8]
   14580:	4293      	cmp	r3, r2
   14582:	f2c0 8136 	blt.w	147f2 <arm_softmax_s8+0x2ae>
        int32_t sum = 0;
   14586:	2300      	movs	r3, #0
    // Rounding offset to add for a right shift of 31
    q63_t mult = 1 << 30;

    if ((m1 < 0) ^ (m2 < 0))
    {
        mult = 1 - mult;
   14588:	f8df 827c 	ldr.w	r8, [pc, #636]	; 14808 <arm_softmax_s8+0x2c4>
        for (col = 0; col < row_size; ++col)
   1458c:	469e      	mov	lr, r3
   1458e:	9a02      	ldr	r2, [sp, #8]
   14590:	4596      	cmp	lr, r2
   14592:	f2c0 813b 	blt.w	1480c <arm_softmax_s8+0x2c8>
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   14596:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
   1459a:	4093      	lsls	r3, r2
   1459c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
   145a0:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   145a2:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
   145a6:	f141 0100 	adc.w	r1, r1, #0
   145aa:	085b      	lsrs	r3, r3, #1
   145ac:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
   145b0:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
    mult = mult + (q63_t)m1 * m2;
   145b4:	4a93      	ldr	r2, [pc, #588]	; (14804 <arm_softmax_s8+0x2c0>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   145b6:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
   145b8:	425c      	negs	r4, r3
   145ba:	fb02 4401 	mla	r4, r2, r1, r4
   145be:	fba3 2002 	umull	r2, r0, r3, r2
   145c2:	4404      	add	r4, r0
   145c4:	4890      	ldr	r0, [pc, #576]	; (14808 <arm_softmax_s8+0x2c4>)
   145c6:	1812      	adds	r2, r2, r0
    result = (int32_t)(mult / (1ll << 31));
   145c8:	f164 0400 	sbc.w	r4, r4, #0
   145cc:	2c00      	cmp	r4, #0
   145ce:	da04      	bge.n	145da <arm_softmax_s8+0x96>
   145d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   145d4:	1812      	adds	r2, r2, r0
   145d6:	f144 0400 	adc.w	r4, r4, #0
   145da:	0fd2      	lsrs	r2, r2, #31
   145dc:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
   145e0:	f102 305a 	add.w	r0, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
   145e4:	17c2      	asrs	r2, r0, #31
   145e6:	fb00 f501 	mul.w	r5, r0, r1
   145ea:	fb03 5502 	mla	r5, r3, r2, r5
   145ee:	fba0 4203 	umull	r4, r2, r0, r3
   145f2:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
   145f6:	eb45 0202 	adc.w	r2, r5, r2
    result = (int32_t)(mult / (1ll << 31));
   145fa:	0fe4      	lsrs	r4, r4, #31
   145fc:	ea44 0442 	orr.w	r4, r4, r2, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   14600:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
        mult = 1 - mult;
   14604:	2c00      	cmp	r4, #0
   14606:	4a80      	ldr	r2, [pc, #512]	; (14808 <arm_softmax_s8+0x2c4>)
   14608:	bfa6      	itte	ge
   1460a:	2500      	movge	r5, #0
   1460c:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
   14610:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   14614:	fbc0 2504 	smlal	r2, r5, r0, r4
   14618:	2d00      	cmp	r5, #0
   1461a:	da04      	bge.n	14626 <arm_softmax_s8+0xe2>
   1461c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   14620:	1912      	adds	r2, r2, r4
   14622:	f145 0500 	adc.w	r5, r5, #0
   14626:	0fd2      	lsrs	r2, r2, #31
   14628:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1462c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        mult = 1 - mult;
   14630:	2a00      	cmp	r2, #0
   14632:	4d75      	ldr	r5, [pc, #468]	; (14808 <arm_softmax_s8+0x2c4>)
    mult = mult + (q63_t)m1 * m2;
   14634:	ea4f 70e2 	mov.w	r0, r2, asr #31
   14638:	fb02 f401 	mul.w	r4, r2, r1
   1463c:	fb03 4400 	mla	r4, r3, r0, r4
        mult = 1 - mult;
   14640:	bfa8      	it	ge
   14642:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   14646:	fba2 0e03 	umull	r0, lr, r2, r3
        mult = 1 - mult;
   1464a:	bfac      	ite	ge
   1464c:	f04f 0c00 	movge.w	ip, #0
   14650:	f04f 3cff 	movlt.w	ip, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   14654:	4474      	add	r4, lr
   14656:	1940      	adds	r0, r0, r5
    result = (int32_t)(mult / (1ll << 31));
   14658:	eb44 040c 	adc.w	r4, r4, ip
   1465c:	2c00      	cmp	r4, #0
    if ((m1 < 0) ^ (m2 < 0))
   1465e:	ea4f 76d2 	mov.w	r6, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
   14662:	da04      	bge.n	1466e <arm_softmax_s8+0x12a>
   14664:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   14668:	1940      	adds	r0, r0, r5
   1466a:	f144 0400 	adc.w	r4, r4, #0
   1466e:	0fc0      	lsrs	r0, r0, #31
   14670:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   14674:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
   14678:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
   1467c:	4e62      	ldr	r6, [pc, #392]	; (14808 <arm_softmax_s8+0x2c4>)
   1467e:	bf06      	itte	eq
   14680:	2400      	moveq	r4, #0
   14682:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
   14686:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   1468a:	fbc2 6400 	smlal	r6, r4, r2, r0
   1468e:	4625      	mov	r5, r4
   14690:	2d00      	cmp	r5, #0
   14692:	4634      	mov	r4, r6
   14694:	da04      	bge.n	146a0 <arm_softmax_s8+0x15c>
   14696:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1469a:	1834      	adds	r4, r6, r0
   1469c:	f145 0500 	adc.w	r5, r5, #0
   146a0:	0fe4      	lsrs	r4, r4, #31
   146a2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   146a6:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   146aa:	bfab      	itete	ge
   146ac:	2000      	movge	r0, #0
   146ae:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
   146b2:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
   146b6:	2500      	movlt	r5, #0
   146b8:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   146bc:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   146c0:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   146c4:	bfcb      	itete	gt
   146c6:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
   146ca:	2500      	movle	r5, #0
   146cc:	2400      	movgt	r4, #0
   146ce:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
   146d2:	4028      	ands	r0, r5
   146d4:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   146d6:	4402      	add	r2, r0
        mult = 1 - mult;
   146d8:	2a00      	cmp	r2, #0
   146da:	484b      	ldr	r0, [pc, #300]	; (14808 <arm_softmax_s8+0x2c4>)
    mult = mult + (q63_t)m1 * m2;
   146dc:	ea4f 76e2 	mov.w	r6, r2, asr #31
   146e0:	fb02 f101 	mul.w	r1, r2, r1
   146e4:	fb03 1106 	mla	r1, r3, r6, r1
        mult = 1 - mult;
   146e8:	bfa8      	it	ge
   146ea:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   146ee:	fba2 3603 	umull	r3, r6, r2, r3
        mult = 1 - mult;
   146f2:	bfac      	ite	ge
   146f4:	2500      	movge	r5, #0
   146f6:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   146fa:	4431      	add	r1, r6
   146fc:	181b      	adds	r3, r3, r0
    result = (int32_t)(mult / (1ll << 31));
   146fe:	eb41 0105 	adc.w	r1, r1, r5
   14702:	2900      	cmp	r1, #0
    if ((m1 < 0) ^ (m2 < 0))
   14704:	ea4f 74d2 	mov.w	r4, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
   14708:	da04      	bge.n	14714 <arm_softmax_s8+0x1d0>
   1470a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1470e:	181b      	adds	r3, r3, r0
   14710:	f141 0100 	adc.w	r1, r1, #0
   14714:	0fdb      	lsrs	r3, r3, #31
   14716:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1471a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
   1471e:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
   14722:	4939      	ldr	r1, [pc, #228]	; (14808 <arm_softmax_s8+0x2c4>)
   14724:	bf06      	itte	eq
   14726:	2000      	moveq	r0, #0
   14728:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
   1472c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   14730:	fbc2 1003 	smlal	r1, r0, r2, r3
   14734:	2800      	cmp	r0, #0
   14736:	da04      	bge.n	14742 <arm_softmax_s8+0x1fe>
   14738:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1473c:	18c9      	adds	r1, r1, r3
   1473e:	f140 0000 	adc.w	r0, r0, #0
   14742:	0fc9      	lsrs	r1, r1, #31
   14744:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   14748:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1474c:	bfab      	itete	ge
   1474e:	2300      	movge	r3, #0
   14750:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   14754:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
   14758:	2100      	movlt	r1, #0
   1475a:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   1475e:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   14762:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   14766:	bfd5      	itete	le
   14768:	2000      	movle	r0, #0
   1476a:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
   1476e:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
   14772:	2100      	movgt	r1, #0
   14774:	4018      	ands	r0, r3
   14776:	4048      	eors	r0, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   14778:	4402      	add	r2, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   1477a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
   1477e:	bfab      	itete	ge
   14780:	2300      	movge	r3, #0
   14782:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   14786:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
   1478a:	2100      	movlt	r1, #0
   1478c:	ea03 0342 	and.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   14790:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
   14794:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
   14798:	bfcb      	itete	gt
   1479a:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
   1479e:	2100      	movle	r1, #0
   147a0:	2200      	movgt	r2, #0
   147a2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   147a6:	400b      	ands	r3, r1
        for (col = 0; col < row_size; ++col)
   147a8:	4053      	eors	r3, r2
   147aa:	bf48      	it	mi
   147ac:	4a16      	ldrmi	r2, [pc, #88]	; (14808 <arm_softmax_s8+0x2c4>)
   147ae:	9309      	str	r3, [sp, #36]	; 0x24
   147b0:	bf56      	itet	pl
   147b2:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
   147b6:	f04f 33ff 	movmi.w	r3, #4294967295	; 0xffffffff
   147ba:	2300      	movpl	r3, #0
   147bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
   147c0:	2301      	movs	r3, #1
   147c2:	fa03 f30a 	lsl.w	r3, r3, sl
   147c6:	3b01      	subs	r3, #1
   147c8:	9305      	str	r3, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   147ca:	105b      	asrs	r3, r3, #1
   147cc:	9306      	str	r3, [sp, #24]
        mult = 1 - mult;
   147ce:	f8df e038 	ldr.w	lr, [pc, #56]	; 14808 <arm_softmax_s8+0x2c4>
        threshold++;
   147d2:	3301      	adds	r3, #1
   147d4:	930a      	str	r3, [sp, #40]	; 0x28
   147d6:	f04f 0c00 	mov.w	ip, #0
   147da:	9b02      	ldr	r3, [sp, #8]
   147dc:	459c      	cmp	ip, r3
   147de:	f2c0 8183 	blt.w	14ae8 <arm_softmax_s8+0x5a4>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   147e2:	9b03      	ldr	r3, [sp, #12]
   147e4:	9a00      	ldr	r2, [sp, #0]
   147e6:	3301      	adds	r3, #1
   147e8:	9303      	str	r3, [sp, #12]
   147ea:	9b02      	ldr	r3, [sp, #8]
   147ec:	441a      	add	r2, r3
   147ee:	9200      	str	r2, [sp, #0]
   147f0:	e6b2      	b.n	14558 <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
   147f2:	9a04      	ldr	r2, [sp, #16]
   147f4:	9901      	ldr	r1, [sp, #4]
   147f6:	56d2      	ldrsb	r2, [r2, r3]
   147f8:	4291      	cmp	r1, r2
   147fa:	bfb8      	it	lt
   147fc:	4611      	movlt	r1, r2
   147fe:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
   14800:	3301      	adds	r3, #1
   14802:	e6bc      	b.n	1457e <arm_softmax_s8+0x3a>
   14804:	c3c3c3c4 	.word	0xc3c3c3c4
   14808:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
   1480c:	9a04      	ldr	r2, [sp, #16]
   1480e:	f912 000e 	ldrsb.w	r0, [r2, lr]
   14812:	9a01      	ldr	r2, [sp, #4]
   14814:	1a80      	subs	r0, r0, r2
            if (diff >= diff_min)
   14816:	9a19      	ldr	r2, [sp, #100]	; 0x64
   14818:	4282      	cmp	r2, r0
   1481a:	f300 8152 	bgt.w	14ac2 <arm_softmax_s8+0x57e>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   1481e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14820:	4090      	lsls	r0, r2
    if ((m1 < 0) ^ (m2 < 0))
   14822:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
   14824:	ebb2 7fdb 	cmp.w	r2, fp, lsr #31
   14828:	bf0b      	itete	eq
   1482a:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
   1482e:	4641      	movne	r1, r8
   14830:	2200      	moveq	r2, #0
   14832:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   14836:	fbc0 120b 	smlal	r1, r2, r0, fp
   1483a:	2a00      	cmp	r2, #0
   1483c:	4614      	mov	r4, r2
   1483e:	da04      	bge.n	1484a <arm_softmax_s8+0x306>
   14840:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   14844:	1889      	adds	r1, r1, r2
   14846:	f144 0400 	adc.w	r4, r4, #0
   1484a:	0fca      	lsrs	r2, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   1484c:	4558      	cmp	r0, fp
    result = (int32_t)(mult / (1ll << 31));
   1484e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   14852:	d104      	bne.n	1485e <arm_softmax_s8+0x31a>
        result = Q31_MAX;
   14854:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
   14858:	bf08      	it	eq
   1485a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   1485e:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
   14862:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   14866:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   1486a:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   1486e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   14872:	2400      	movs	r4, #0
   14874:	fbcc 140c 	smlal	r1, r4, ip, ip
   14878:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
   1487a:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
   1487e:	da04      	bge.n	1488a <arm_softmax_s8+0x346>
   14880:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14884:	1809      	adds	r1, r1, r0
   14886:	f144 0400 	adc.w	r4, r4, #0
   1488a:	0fc9      	lsrs	r1, r1, #31
   1488c:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
   14890:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t)(mult / (1ll << 31));
   14894:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
   14896:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
   1489a:	fb01 fa04 	mul.w	sl, r1, r4
    result = (int32_t)(mult / (1ll << 31));
   1489e:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
   148a2:	f1b9 0f00 	cmp.w	r9, #0
   148a6:	da05      	bge.n	148b4 <arm_softmax_s8+0x370>
   148a8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   148ac:	eb10 000a 	adds.w	r0, r0, sl
   148b0:	f149 0900 	adc.w	r9, r9, #0
   148b4:	0fc0      	lsrs	r0, r0, #31
   148b6:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
   148ba:	f000 0903 	and.w	r9, r0, #3
        threshold++;
   148be:	1080      	asrs	r0, r0, #2
   148c0:	bf54      	ite	pl
   148c2:	f04f 0a01 	movpl.w	sl, #1
   148c6:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
   148ca:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
   148cc:	ea4f 79d1 	mov.w	r9, r1, lsr #31
        result++;
   148d0:	bfc8      	it	gt
   148d2:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
   148d4:	fb0c f404 	mul.w	r4, ip, r4
        mult = 1 - mult;
   148d8:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
    mult = mult + (q63_t)m1 * m2;
   148dc:	fb01 4406 	mla	r4, r1, r6, r4
        mult = 1 - mult;
   148e0:	bf08      	it	eq
   148e2:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   148e6:	fbac 6701 	umull	r6, r7, ip, r1
        mult = 1 - mult;
   148ea:	bf16      	itet	ne
   148ec:	46c1      	movne	r9, r8
   148ee:	f04f 0a00 	moveq.w	sl, #0
   148f2:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   148f6:	443c      	add	r4, r7
   148f8:	eb16 0609 	adds.w	r6, r6, r9
    result = (int32_t)(mult / (1ll << 31));
   148fc:	eb44 040a 	adc.w	r4, r4, sl
   14900:	2c00      	cmp	r4, #0
   14902:	da05      	bge.n	14910 <arm_softmax_s8+0x3cc>
   14904:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   14908:	eb16 0609 	adds.w	r6, r6, r9
   1490c:	f144 0400 	adc.w	r4, r4, #0
   14910:	0ff6      	lsrs	r6, r6, #31
   14912:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   14916:	4430      	add	r0, r6
        mult = 1 - mult;
   14918:	2800      	cmp	r0, #0
    result = (int32_t)(mult / (1ll << 31));
   1491a:	4f6b      	ldr	r7, [pc, #428]	; (14ac8 <arm_softmax_s8+0x584>)
        mult = 1 - mult;
   1491c:	bfab      	itete	ge
   1491e:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   14922:	4644      	movlt	r4, r8
   14924:	2600      	movge	r6, #0
   14926:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   1492a:	fbc0 4607 	smlal	r4, r6, r0, r7
   1492e:	2e00      	cmp	r6, #0
   14930:	da04      	bge.n	1493c <arm_softmax_s8+0x3f8>
   14932:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14936:	1824      	adds	r4, r4, r0
   14938:	f146 0600 	adc.w	r6, r6, #0
   1493c:	0fe4      	lsrs	r4, r4, #31
   1493e:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   14942:	440c      	add	r4, r1
    if (result < 0)
   14944:	1061      	asrs	r1, r4, #1
   14946:	d402      	bmi.n	1494e <arm_softmax_s8+0x40a>
    if (remainder > threshold)
   14948:	07e6      	lsls	r6, r4, #31
        result++;
   1494a:	bf48      	it	mi
   1494c:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1494e:	448c      	add	ip, r1
        mult = 1 - mult;
   14950:	f1bc 0f00 	cmp.w	ip, #0
    result = (int32_t)(mult / (1ll << 31));
   14954:	485d      	ldr	r0, [pc, #372]	; (14acc <arm_softmax_s8+0x588>)
        mult = 1 - mult;
   14956:	bfab      	itete	ge
   14958:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   1495c:	4644      	movlt	r4, r8
   1495e:	2100      	movge	r1, #0
   14960:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   14964:	fbcc 4100 	smlal	r4, r1, ip, r0
   14968:	2900      	cmp	r1, #0
   1496a:	da04      	bge.n	14976 <arm_softmax_s8+0x432>
   1496c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14970:	1824      	adds	r4, r4, r0
   14972:	f141 0100 	adc.w	r1, r1, #0
   14976:	0fe4      	lsrs	r4, r4, #31
   14978:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    int32_t result = 1895147668 +
   1497c:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
   14980:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14984:	2000      	movs	r0, #0
   14986:	4f52      	ldr	r7, [pc, #328]	; (14ad0 <arm_softmax_s8+0x58c>)
    int32_t result = 1895147668 +
   14988:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
   1498c:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
   14990:	468c      	mov	ip, r1
   14992:	4682      	mov	sl, r0
   14994:	fbc4 ca07 	smlal	ip, sl, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
   14998:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t)(mult / (1ll << 31));
   1499c:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   149a0:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   149a4:	f345 6900 	sbfx	r9, r5, #24, #1
   149a8:	3e01      	subs	r6, #1
   149aa:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
   149ae:	4f49      	ldr	r7, [pc, #292]	; (14ad4 <arm_softmax_s8+0x590>)
    SELECT_IF_NON_ZERO(1672461947)
   149b0:	4034      	ands	r4, r6
   149b2:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
   149b6:	468c      	mov	ip, r1
   149b8:	4606      	mov	r6, r0
   149ba:	fbc4 c607 	smlal	ip, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
   149be:	f3c5 6a40 	ubfx	sl, r5, #25, #1
    result = (int32_t)(mult / (1ll << 31));
   149c2:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   149c6:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   149ca:	f345 6940 	sbfx	r9, r5, #25, #1
   149ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   149d2:	ea0a 0a04 	and.w	sl, sl, r4
   149d6:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
   149da:	4f3f      	ldr	r7, [pc, #252]	; (14ad8 <arm_softmax_s8+0x594>)
    SELECT_IF_NON_ZERO(1302514674)
   149dc:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
   149e0:	460e      	mov	r6, r1
   149e2:	4604      	mov	r4, r0
   149e4:	fbc9 6407 	smlal	r6, r4, r9, r7
    SELECT_IF_NON_ZERO(790015084)
   149e8:	f3c5 6a80 	ubfx	sl, r5, #26, #1
    result = (int32_t)(mult / (1ll << 31));
   149ec:	0ff6      	lsrs	r6, r6, #31
   149ee:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   149f2:	f345 6c80 	sbfx	ip, r5, #26, #1
   149f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   149fa:	ea0a 0a09 	and.w	sl, sl, r9
   149fe:	ea0c 0c06 	and.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
   14a02:	4e36      	ldr	r6, [pc, #216]	; (14adc <arm_softmax_s8+0x598>)
    SELECT_IF_NON_ZERO(790015084)
   14a04:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
   14a08:	460c      	mov	r4, r1
   14a0a:	4682      	mov	sl, r0
   14a0c:	fbcc 4a06 	smlal	r4, sl, ip, r6
    SELECT_IF_NON_ZERO(290630308)
   14a10:	f3c5 69c0 	ubfx	r9, r5, #27, #1
    result = (int32_t)(mult / (1ll << 31));
   14a14:	0fe4      	lsrs	r4, r4, #31
   14a16:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   14a1a:	f345 66c0 	sbfx	r6, r5, #27, #1
   14a1e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   14a22:	ea09 090c 	and.w	r9, r9, ip
   14a26:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
   14a28:	4c2d      	ldr	r4, [pc, #180]	; (14ae0 <arm_softmax_s8+0x59c>)
    SELECT_IF_NON_ZERO(290630308)
   14a2a:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
   14a2e:	4682      	mov	sl, r0
   14a30:	4689      	mov	r9, r1
   14a32:	fbc6 9a04 	smlal	r9, sl, r6, r4
    SELECT_IF_NON_ZERO(39332535)
   14a36:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    result = (int32_t)(mult / (1ll << 31));
   14a3a:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   14a3e:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   14a42:	f345 7400 	sbfx	r4, r5, #28, #1
   14a46:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   14a4a:	ea0c 0c06 	and.w	ip, ip, r6
   14a4e:	ea04 0409 	and.w	r4, r4, r9
    mult = mult + (q63_t)m1 * m2;
   14a52:	f8df 9090 	ldr.w	r9, [pc, #144]	; 14ae4 <arm_softmax_s8+0x5a0>
    SELECT_IF_NON_ZERO(39332535)
   14a56:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
   14a5a:	4682      	mov	sl, r0
   14a5c:	468c      	mov	ip, r1
   14a5e:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
   14a62:	f3c5 7640 	ubfx	r6, r5, #29, #1
    result = (int32_t)(mult / (1ll << 31));
   14a66:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   14a6a:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
   14a6e:	f345 7940 	sbfx	r9, r5, #29, #1
   14a72:	3e01      	subs	r6, #1
   14a74:	4026      	ands	r6, r4
   14a76:	ea09 0c0c 	and.w	ip, r9, ip
   14a7a:	ea8c 0c06 	eor.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
   14a7e:	24f2      	movs	r4, #242	; 0xf2
   14a80:	fbcc 1004 	smlal	r1, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
   14a84:	f3c5 7a80 	ubfx	sl, r5, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   14a88:	0fc9      	lsrs	r1, r1, #31
   14a8a:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   14a8e:	f345 7580 	sbfx	r5, r5, #30, #1
   14a92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    mask = MASK_IF_ZERO(val);
   14a96:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
   14a9a:	ea0a 0a0c 	and.w	sl, sl, ip
    mask = MASK_IF_ZERO(val);
   14a9e:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
   14aa0:	4029      	ands	r1, r5
   14aa2:	ea81 010a 	eor.w	r1, r1, sl
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   14aa6:	1e50      	subs	r0, r2, #1
    mask = MASK_IF_ZERO(val);
   14aa8:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   14aaa:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
   14aae:	4001      	ands	r1, r0
   14ab0:	ea81 0a0a 	eor.w	sl, r1, sl
    result = dividend >> exponent;
   14ab4:	ea4f 322a 	mov.w	r2, sl, asr #12
    if (remainder > threshold)
   14ab8:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
   14abc:	bf18      	it	ne
   14abe:	3201      	addne	r2, #1
   14ac0:	4413      	add	r3, r2
        for (col = 0; col < row_size; ++col)
   14ac2:	f10e 0e01 	add.w	lr, lr, #1
   14ac6:	e562      	b.n	1458e <arm_softmax_s8+0x4a>
   14ac8:	2aaaaaab 	.word	0x2aaaaaab
   14acc:	70f5a894 	.word	0x70f5a894
   14ad0:	63afbe7b 	.word	0x63afbe7b
   14ad4:	4da2cbf2 	.word	0x4da2cbf2
   14ad8:	2f16ac6c 	.word	0x2f16ac6c
   14adc:	1152aaa4 	.word	0x1152aaa4
   14ae0:	02582ab7 	.word	0x02582ab7
   14ae4:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
   14ae8:	9b04      	ldr	r3, [sp, #16]
   14aea:	f913 100c 	ldrsb.w	r1, [r3, ip]
   14aee:	9b01      	ldr	r3, [sp, #4]
   14af0:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
   14af2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14af4:	4299      	cmp	r1, r3
   14af6:	f2c0 816b 	blt.w	14dd0 <arm_softmax_s8+0x88c>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
   14afa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14afc:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
   14afe:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
   14b00:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
   14b04:	bf0b      	itete	eq
   14b06:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
   14b0a:	4673      	movne	r3, lr
   14b0c:	2200      	moveq	r2, #0
   14b0e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   14b12:	fbc1 320b 	smlal	r3, r2, r1, fp
   14b16:	2a00      	cmp	r2, #0
   14b18:	4610      	mov	r0, r2
   14b1a:	da04      	bge.n	14b26 <arm_softmax_s8+0x5e2>
   14b1c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   14b20:	189b      	adds	r3, r3, r2
   14b22:	f140 0000 	adc.w	r0, r0, #0
   14b26:	0fda      	lsrs	r2, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   14b28:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
   14b2a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
   14b2e:	d104      	bne.n	14b3a <arm_softmax_s8+0x5f6>
        result = Q31_MAX;
   14b30:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
   14b34:	bf08      	it	eq
   14b36:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   14b3a:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
   14b3e:	1ab3      	subs	r3, r6, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   14b40:	0176      	lsls	r6, r6, #5
   14b42:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   14b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   14b4a:	2400      	movs	r4, #0
   14b4c:	fbc6 1406 	smlal	r1, r4, r6, r6
   14b50:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
   14b52:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t)(mult / (1ll << 31));
   14b56:	da04      	bge.n	14b62 <arm_softmax_s8+0x61e>
   14b58:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14b5c:	1809      	adds	r1, r1, r0
   14b5e:	f144 0400 	adc.w	r4, r4, #0
   14b62:	0fc9      	lsrs	r1, r1, #31
   14b64:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
   14b68:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t)(mult / (1ll << 31));
   14b6c:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
   14b6e:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
   14b72:	fb01 f904 	mul.w	r9, r1, r4
    result = (int32_t)(mult / (1ll << 31));
   14b76:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
   14b7a:	f1b8 0f00 	cmp.w	r8, #0
   14b7e:	da05      	bge.n	14b8c <arm_softmax_s8+0x648>
   14b80:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   14b84:	eb10 0009 	adds.w	r0, r0, r9
   14b88:	f148 0800 	adc.w	r8, r8, #0
   14b8c:	0fc0      	lsrs	r0, r0, #31
   14b8e:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
   14b92:	f000 0803 	and.w	r8, r0, #3
        threshold++;
   14b96:	1080      	asrs	r0, r0, #2
   14b98:	bf54      	ite	pl
   14b9a:	f04f 0901 	movpl.w	r9, #1
   14b9e:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
   14ba2:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
   14ba4:	ea4f 78d1 	mov.w	r8, r1, lsr #31
        result++;
   14ba8:	bfc8      	it	gt
   14baa:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
   14bac:	4374      	muls	r4, r6
        mult = 1 - mult;
   14bae:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
    mult = mult + (q63_t)m1 * m2;
   14bb2:	fb01 4405 	mla	r4, r1, r5, r4
        mult = 1 - mult;
   14bb6:	bf08      	it	eq
   14bb8:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   14bbc:	fba6 5701 	umull	r5, r7, r6, r1
        mult = 1 - mult;
   14bc0:	bf16      	itet	ne
   14bc2:	46f0      	movne	r8, lr
   14bc4:	f04f 0900 	moveq.w	r9, #0
   14bc8:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   14bcc:	443c      	add	r4, r7
   14bce:	eb15 0508 	adds.w	r5, r5, r8
    result = (int32_t)(mult / (1ll << 31));
   14bd2:	eb44 0409 	adc.w	r4, r4, r9
   14bd6:	2c00      	cmp	r4, #0
   14bd8:	da05      	bge.n	14be6 <arm_softmax_s8+0x6a2>
   14bda:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
   14bde:	eb15 0508 	adds.w	r5, r5, r8
   14be2:	f144 0400 	adc.w	r4, r4, #0
   14be6:	0fed      	lsrs	r5, r5, #31
   14be8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   14bec:	4428      	add	r0, r5
        mult = 1 - mult;
   14bee:	2800      	cmp	r0, #0
    result = (int32_t)(mult / (1ll << 31));
   14bf0:	4f78      	ldr	r7, [pc, #480]	; (14dd4 <arm_softmax_s8+0x890>)
        mult = 1 - mult;
   14bf2:	bfab      	itete	ge
   14bf4:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   14bf8:	4674      	movlt	r4, lr
   14bfa:	2500      	movge	r5, #0
   14bfc:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   14c00:	fbc0 4507 	smlal	r4, r5, r0, r7
   14c04:	2d00      	cmp	r5, #0
   14c06:	da04      	bge.n	14c12 <arm_softmax_s8+0x6ce>
   14c08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14c0c:	1824      	adds	r4, r4, r0
   14c0e:	f145 0500 	adc.w	r5, r5, #0
   14c12:	0fe4      	lsrs	r4, r4, #31
   14c14:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   14c18:	440c      	add	r4, r1
    if (result < 0)
   14c1a:	1061      	asrs	r1, r4, #1
   14c1c:	d402      	bmi.n	14c24 <arm_softmax_s8+0x6e0>
    if (remainder > threshold)
   14c1e:	07e0      	lsls	r0, r4, #31
        result++;
   14c20:	bf48      	it	mi
   14c22:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   14c24:	440e      	add	r6, r1
        mult = 1 - mult;
   14c26:	2e00      	cmp	r6, #0
    result = (int32_t)(mult / (1ll << 31));
   14c28:	486b      	ldr	r0, [pc, #428]	; (14dd8 <arm_softmax_s8+0x894>)
        mult = 1 - mult;
   14c2a:	bfab      	itete	ge
   14c2c:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   14c30:	4674      	movlt	r4, lr
   14c32:	2100      	movge	r1, #0
   14c34:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   14c38:	fbc6 4100 	smlal	r4, r1, r6, r0
   14c3c:	2900      	cmp	r1, #0
   14c3e:	da04      	bge.n	14c4a <arm_softmax_s8+0x706>
   14c40:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   14c44:	1824      	adds	r4, r4, r0
   14c46:	f141 0100 	adc.w	r1, r1, #0
   14c4a:	0fe4      	lsrs	r4, r4, #31
   14c4c:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    int32_t result = 1895147668 +
   14c50:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
   14c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14c58:	2000      	movs	r0, #0
   14c5a:	4f60      	ldr	r7, [pc, #384]	; (14ddc <arm_softmax_s8+0x898>)
    int32_t result = 1895147668 +
   14c5c:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
   14c60:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
   14c64:	460e      	mov	r6, r1
   14c66:	4681      	mov	r9, r0
   14c68:	fbc4 6907 	smlal	r6, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
   14c6c:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
   14c70:	0ff6      	lsrs	r6, r6, #31
   14c72:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   14c76:	f343 6800 	sbfx	r8, r3, #24, #1
   14c7a:	3d01      	subs	r5, #1
   14c7c:	ea08 0806 	and.w	r8, r8, r6
   14c80:	402c      	ands	r4, r5
    mult = mult + (q63_t)m1 * m2;
   14c82:	4f57      	ldr	r7, [pc, #348]	; (14de0 <arm_softmax_s8+0x89c>)
    SELECT_IF_NON_ZERO(1672461947)
   14c84:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
   14c88:	460e      	mov	r6, r1
   14c8a:	4605      	mov	r5, r0
   14c8c:	fbc4 6507 	smlal	r6, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
   14c90:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
   14c94:	0ff6      	lsrs	r6, r6, #31
   14c96:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   14c9a:	f343 6840 	sbfx	r8, r3, #25, #1
   14c9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   14ca2:	ea09 0904 	and.w	r9, r9, r4
   14ca6:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
   14caa:	4e4e      	ldr	r6, [pc, #312]	; (14de4 <arm_softmax_s8+0x8a0>)
    SELECT_IF_NON_ZERO(1302514674)
   14cac:	ea88 0809 	eor.w	r8, r8, r9
    mult = mult + (q63_t)m1 * m2;
   14cb0:	460d      	mov	r5, r1
   14cb2:	4604      	mov	r4, r0
   14cb4:	fbc8 5406 	smlal	r5, r4, r8, r6
    SELECT_IF_NON_ZERO(790015084)
   14cb8:	f3c3 6980 	ubfx	r9, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
   14cbc:	0fed      	lsrs	r5, r5, #31
   14cbe:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   14cc2:	f343 6680 	sbfx	r6, r3, #26, #1
   14cc6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   14cca:	ea09 0908 	and.w	r9, r9, r8
   14cce:	402e      	ands	r6, r5
    mult = mult + (q63_t)m1 * m2;
   14cd0:	4d45      	ldr	r5, [pc, #276]	; (14de8 <arm_softmax_s8+0x8a4>)
    SELECT_IF_NON_ZERO(790015084)
   14cd2:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
   14cd6:	460c      	mov	r4, r1
   14cd8:	4681      	mov	r9, r0
   14cda:	fbc6 4905 	smlal	r4, r9, r6, r5
    SELECT_IF_NON_ZERO(290630308)
   14cde:	f3c3 68c0 	ubfx	r8, r3, #27, #1
    result = (int32_t)(mult / (1ll << 31));
   14ce2:	0fe4      	lsrs	r4, r4, #31
   14ce4:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   14ce8:	f343 65c0 	sbfx	r5, r3, #27, #1
   14cec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   14cf0:	ea08 0806 	and.w	r8, r8, r6
   14cf4:	4025      	ands	r5, r4
    mult = mult + (q63_t)m1 * m2;
   14cf6:	4c3d      	ldr	r4, [pc, #244]	; (14dec <arm_softmax_s8+0x8a8>)
    SELECT_IF_NON_ZERO(290630308)
   14cf8:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
   14cfc:	4681      	mov	r9, r0
   14cfe:	4688      	mov	r8, r1
   14d00:	fbc5 8904 	smlal	r8, r9, r5, r4
    SELECT_IF_NON_ZERO(39332535)
   14d04:	f3c3 7600 	ubfx	r6, r3, #28, #1
    result = (int32_t)(mult / (1ll << 31));
   14d08:	ea4f 78d8 	mov.w	r8, r8, lsr #31
   14d0c:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   14d10:	f343 7400 	sbfx	r4, r3, #28, #1
   14d14:	3e01      	subs	r6, #1
   14d16:	402e      	ands	r6, r5
   14d18:	ea04 0408 	and.w	r4, r4, r8
    mult = mult + (q63_t)m1 * m2;
   14d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 14df0 <arm_softmax_s8+0x8ac>
    SELECT_IF_NON_ZERO(39332535)
   14d20:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
   14d22:	4681      	mov	r9, r0
   14d24:	460e      	mov	r6, r1
   14d26:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
   14d2a:	f3c3 7540 	ubfx	r5, r3, #29, #1
    result = (int32_t)(mult / (1ll << 31));
   14d2e:	0ff6      	lsrs	r6, r6, #31
   14d30:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
   14d34:	f343 7840 	sbfx	r8, r3, #29, #1
   14d38:	3d01      	subs	r5, #1
   14d3a:	4025      	ands	r5, r4
   14d3c:	ea08 0606 	and.w	r6, r8, r6
   14d40:	406e      	eors	r6, r5
    mult = mult + (q63_t)m1 * m2;
   14d42:	24f2      	movs	r4, #242	; 0xf2
   14d44:	fbc6 1004 	smlal	r1, r0, r6, r4
    SELECT_IF_NON_ZERO(242)
   14d48:	f3c3 7980 	ubfx	r9, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   14d4c:	0fc9      	lsrs	r1, r1, #31
   14d4e:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   14d52:	f343 7380 	sbfx	r3, r3, #30, #1
   14d56:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    mask = MASK_IF_ZERO(val);
   14d5a:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
   14d5e:	4019      	ands	r1, r3
    mask = MASK_IF_ZERO(val);
   14d60:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
   14d62:	ea09 0906 	and.w	r9, r9, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   14d66:	1e50      	subs	r0, r2, #1
    SELECT_IF_NON_ZERO(242)
   14d68:	ea81 0109 	eor.w	r1, r1, r9
    mask = MASK_IF_ZERO(val);
   14d6c:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   14d6e:	4001      	ands	r1, r0
   14d70:	f022 4000 	bic.w	r0, r2, #2147483648	; 0x80000000
    result = (int32_t)(mult / (1ll << 31));
   14d74:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    return SELECT_USING_MASK(mask, Q31_MAX, result);
   14d78:	4048      	eors	r0, r1
    result = (int32_t)(mult / (1ll << 31));
   14d7a:	9909      	ldr	r1, [sp, #36]	; 0x24
   14d7c:	fbc1 3200 	smlal	r3, r2, r1, r0
   14d80:	2a00      	cmp	r2, #0
   14d82:	4614      	mov	r4, r2
   14d84:	da04      	bge.n	14d90 <arm_softmax_s8+0x84c>
   14d86:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   14d8a:	189b      	adds	r3, r3, r2
   14d8c:	f144 0400 	adc.w	r4, r4, #0
    int32_t remainder = remainder_mask & dividend;
   14d90:	9a05      	ldr	r2, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   14d92:	9806      	ldr	r0, [sp, #24]
   14d94:	990a      	ldr	r1, [sp, #40]	; 0x28
    result = (int32_t)(mult / (1ll << 31));
   14d96:	0fdb      	lsrs	r3, r3, #31
   14d98:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    int32_t remainder = remainder_mask & dividend;
   14d9c:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
   14d9e:	fa53 f30a 	asrs.w	r3, r3, sl
   14da2:	bf58      	it	pl
   14da4:	4601      	movpl	r1, r0
    if (remainder > threshold)
   14da6:	428a      	cmp	r2, r1
        result++;
   14da8:	bfc8      	it	gt
   14daa:	3301      	addgt	r3, #1
                const int32_t res =
   14dac:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
   14dae:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
   14db2:	db08      	blt.n	14dc6 <arm_softmax_s8+0x882>
   14db4:	2b7e      	cmp	r3, #126	; 0x7e
   14db6:	dc09      	bgt.n	14dcc <arm_softmax_s8+0x888>
   14db8:	b25b      	sxtb	r3, r3
                output[col] = -128;
   14dba:	9a07      	ldr	r2, [sp, #28]
   14dbc:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
   14dc0:	f10c 0c01 	add.w	ip, ip, #1
   14dc4:	e509      	b.n	147da <arm_softmax_s8+0x296>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
   14dc6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   14dca:	e7f6      	b.n	14dba <arm_softmax_s8+0x876>
   14dcc:	237f      	movs	r3, #127	; 0x7f
   14dce:	e7f4      	b.n	14dba <arm_softmax_s8+0x876>
                output[col] = -128;
   14dd0:	2380      	movs	r3, #128	; 0x80
   14dd2:	e7f2      	b.n	14dba <arm_softmax_s8+0x876>
   14dd4:	2aaaaaab 	.word	0x2aaaaaab
   14dd8:	70f5a894 	.word	0x70f5a894
   14ddc:	63afbe7b 	.word	0x63afbe7b
   14de0:	4da2cbf2 	.word	0x4da2cbf2
   14de4:	2f16ac6c 	.word	0x2f16ac6c
   14de8:	1152aaa4 	.word	0x1152aaa4
   14dec:	02582ab7 	.word	0x02582ab7
   14df0:	000afe11 	.word	0x000afe11

00014df4 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
   14df4:	2810      	cmp	r0, #16
   14df6:	bf9a      	itte	ls
   14df8:	4b02      	ldrls	r3, [pc, #8]	; (14e04 <TfLiteTypeGetName+0x10>)
   14dfa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
   14dfe:	4802      	ldrhi	r0, [pc, #8]	; (14e08 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
   14e00:	4770      	bx	lr
   14e02:	bf00      	nop
   14e04:	00036218 	.word	0x00036218
   14e08:	0003ea98 	.word	0x0003ea98

00014e0c <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
   14e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
   14e0e:	2200      	movs	r2, #0
                        int* shift) {
   14e10:	4606      	mov	r6, r0
   14e12:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
   14e14:	2300      	movs	r3, #0
   14e16:	ec51 0b10 	vmov	r0, r1, d0
   14e1a:	ed8d 0b00 	vstr	d0, [sp]
   14e1e:	f7eb fde3 	bl	9e8 <__aeabi_dcmpeq>
   14e22:	ed9d 0b00 	vldr	d0, [sp]
   14e26:	4605      	mov	r5, r0
   14e28:	b120      	cbz	r0, 14e34 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x28>
    *quantized_multiplier = 0;
   14e2a:	2300      	movs	r3, #0
   14e2c:	6033      	str	r3, [r6, #0]
    *shift = 0;
   14e2e:	6023      	str	r3, [r4, #0]
}
   14e30:	b002      	add	sp, #8
   14e32:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
   14e34:	4620      	mov	r0, r4
   14e36:	f000 fa63 	bl	15300 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   14e3a:	4b14      	ldr	r3, [pc, #80]	; (14e8c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x80>)
   14e3c:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   14e3e:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   14e42:	f7eb fb69 	bl	518 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   14e46:	ec41 0b10 	vmov	d0, r0, r1
   14e4a:	f000 fa91 	bl	15370 <round>
   14e4e:	ec51 0b10 	vmov	r0, r1, d0
   14e52:	f7eb ff31 	bl	cb8 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   14e56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14e5a:	4282      	cmp	r2, r0
   14e5c:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   14e60:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   14e62:	da01      	bge.n	14e68 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x5c>
   14e64:	f006 ff35 	bl	1bcd2 <abort>
  if (q_fixed == (1ll << 31)) {
   14e68:	42a9      	cmp	r1, r5
   14e6a:	bf08      	it	eq
   14e6c:	4290      	cmpeq	r0, r2
    ++*shift;
   14e6e:	bf02      	ittt	eq
   14e70:	6823      	ldreq	r3, [r4, #0]
   14e72:	3301      	addeq	r3, #1
   14e74:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   14e76:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
   14e78:	bf08      	it	eq
   14e7a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
   14e7e:	321f      	adds	r2, #31
    *shift = 0;
   14e80:	bfbc      	itt	lt
   14e82:	2300      	movlt	r3, #0
   14e84:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   14e86:	6033      	str	r3, [r6, #0]
   14e88:	e7d2      	b.n	14e30 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x24>
   14e8a:	bf00      	nop
   14e8c:	41e00000 	.word	0x41e00000

00014e90 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
   14e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
   14e92:	4b0c      	ldr	r3, [pc, #48]	; (14ec4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x34>)
                                      int* left_shift) {
   14e94:	4605      	mov	r5, r0
   14e96:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   14e98:	2200      	movs	r2, #0
   14e9a:	ec51 0b10 	vmov	r0, r1, d0
   14e9e:	ed8d 0b00 	vstr	d0, [sp]
   14ea2:	f7eb fdc9 	bl	a38 <__aeabi_dcmpgt>
   14ea6:	ed9d 0b00 	vldr	d0, [sp]
   14eaa:	b908      	cbnz	r0, 14eb0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x20>
   14eac:	f006 ff11 	bl	1bcd2 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   14eb0:	4621      	mov	r1, r4
   14eb2:	4628      	mov	r0, r5
   14eb4:	f7ff ffaa 	bl	14e0c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
   14eb8:	6823      	ldr	r3, [r4, #0]
   14eba:	2b00      	cmp	r3, #0
   14ebc:	dbf6      	blt.n	14eac <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x1c>
}
   14ebe:	b003      	add	sp, #12
   14ec0:	bd30      	pop	{r4, r5, pc}
   14ec2:	bf00      	nop
   14ec4:	3ff00000 	.word	0x3ff00000

00014ec8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
   14ec8:	edd1 7a03 	vldr	s15, [r1, #12]
   14ecc:	ed92 7a03 	vldr	s14, [r2, #12]
   14ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
   14ed4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   14ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   14eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
   14ede:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   14ee0:	da0a      	bge.n	14ef8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
   14ee2:	4b0f      	ldr	r3, [pc, #60]	; (14f20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   14ee4:	9300      	str	r3, [sp, #0]
   14ee6:	6944      	ldr	r4, [r0, #20]
   14ee8:	4a0e      	ldr	r2, [pc, #56]	; (14f24 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   14eea:	490f      	ldr	r1, [pc, #60]	; (14f28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   14eec:	f240 1351 	movw	r3, #337	; 0x151
   14ef0:	47a0      	blx	r4
   14ef2:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
   14ef4:	b002      	add	sp, #8
   14ef6:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
   14ef8:	ee17 0a90 	vmov	r0, s15
   14efc:	f7eb fab4 	bl	468 <__aeabi_f2d>
   14f00:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   14f02:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
   14f04:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   14f06:	f7eb faaf 	bl	468 <__aeabi_f2d>
   14f0a:	460b      	mov	r3, r1
   14f0c:	4602      	mov	r2, r0
   14f0e:	4629      	mov	r1, r5
   14f10:	4620      	mov	r0, r4
   14f12:	f7eb fc2b 	bl	76c <__aeabi_ddiv>
   14f16:	9b06      	ldr	r3, [sp, #24]
   14f18:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   14f1c:	2000      	movs	r0, #0
   14f1e:	e7e9      	b.n	14ef4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
   14f20:	0003eb8a 	.word	0x0003eb8a
   14f24:	0003eb10 	.word	0x0003eb10
   14f28:	0003e25f 	.word	0x0003e25f

00014f2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   14f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f2e:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   14f30:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
   14f32:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
   14f34:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
   14f36:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
   14f38:	d00e      	beq.n	14f58 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   14f3a:	2b09      	cmp	r3, #9
   14f3c:	d01f      	beq.n	14f7e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x52>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   14f3e:	2b07      	cmp	r3, #7
   14f40:	d021      	beq.n	14f86 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   14f42:	4b26      	ldr	r3, [pc, #152]	; (14fdc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
   14f44:	9300      	str	r3, [sp, #0]
   14f46:	6944      	ldr	r4, [r0, #20]
   14f48:	4a25      	ldr	r2, [pc, #148]	; (14fe0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
   14f4a:	4926      	ldr	r1, [pc, #152]	; (14fe4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>)
   14f4c:	f44f 73c2 	mov.w	r3, #388	; 0x184
   14f50:	47a0      	blx	r4
   14f52:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   14f54:	b005      	add	sp, #20
   14f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   14f58:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   14f5a:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
   14f5c:	6913      	ldr	r3, [r2, #16]
  };
   14f5e:	68d2      	ldr	r2, [r2, #12]
   14f60:	9202      	str	r2, [sp, #8]
  if (activation == kTfLiteActRelu) {
   14f62:	2901      	cmp	r1, #1
  };
   14f64:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
   14f66:	d112      	bne.n	14f8e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x62>
    *act_min = std::max(qmin, quantize(0.0));
   14f68:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 14fe8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>
   14f6c:	a802      	add	r0, sp, #8
   14f6e:	f005 fdc8 	bl	1ab02 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   14f72:	4286      	cmp	r6, r0
   14f74:	bfac      	ite	ge
   14f76:	602e      	strge	r6, [r5, #0]
   14f78:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
   14f7a:	603c      	str	r4, [r7, #0]
   14f7c:	e01b      	b.n	14fb6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8a>
    qmax = std::numeric_limits<int8_t>::max();
   14f7e:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   14f80:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   14f84:	e7ea      	b.n	14f5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int16_t>::min();
   14f86:	4e19      	ldr	r6, [pc, #100]	; (14fec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xc0>)
    qmax = std::numeric_limits<int16_t>::max();
   14f88:	f647 74ff 	movw	r4, #32767	; 0x7fff
   14f8c:	e7e6      	b.n	14f5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
  } else if (activation == kTfLiteActRelu6) {
   14f8e:	2903      	cmp	r1, #3
   14f90:	d113      	bne.n	14fba <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8e>
    *act_min = std::max(qmin, quantize(0.0));
   14f92:	ed9f 0a15 	vldr	s0, [pc, #84]	; 14fe8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>
   14f96:	a802      	add	r0, sp, #8
   14f98:	f005 fdb3 	bl	1ab02 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   14f9c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   14fa0:	4286      	cmp	r6, r0
   14fa2:	bfac      	ite	ge
   14fa4:	602e      	strge	r6, [r5, #0]
   14fa6:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   14fa8:	a802      	add	r0, sp, #8
   14faa:	f005 fdaa 	bl	1ab02 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   14fae:	4284      	cmp	r4, r0
   14fb0:	bfd4      	ite	le
   14fb2:	603c      	strle	r4, [r7, #0]
   14fb4:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
   14fb6:	2000      	movs	r0, #0
   14fb8:	e7cc      	b.n	14f54 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x28>
  } else if (activation == kTfLiteActReluN1To1) {
   14fba:	2902      	cmp	r1, #2
   14fbc:	d10b      	bne.n	14fd6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xaa>
    *act_min = std::max(qmin, quantize(-1.0));
   14fbe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   14fc2:	a802      	add	r0, sp, #8
   14fc4:	f005 fd9d 	bl	1ab02 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   14fc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   14fcc:	4286      	cmp	r6, r0
   14fce:	bfac      	ite	ge
   14fd0:	602e      	strge	r6, [r5, #0]
   14fd2:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   14fd4:	e7e8      	b.n	14fa8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7c>
    *act_min = qmin;
   14fd6:	602e      	str	r6, [r5, #0]
   14fd8:	e7cf      	b.n	14f7a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4e>
   14fda:	bf00      	nop
   14fdc:	0003ebc5 	.word	0x0003ebc5
   14fe0:	0003eb10 	.word	0x0003eb10
   14fe4:	0003e25f 	.word	0x0003e25f
   14fe8:	00000000 	.word	0x00000000
   14fec:	ffff8000 	.word	0xffff8000

00014ff0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   14ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ff4:	ed2d 8b06 	vpush	{d8-d10}
   14ff8:	b093      	sub	sp, #76	; 0x4c
   14ffa:	ee09 3a10 	vmov	s18, r3
   14ffe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15000:	9306      	str	r3, [sp, #24]
   15002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   15004:	9308      	str	r3, [sp, #32]
   15006:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   15008:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   1500c:	ee09 3a90 	vmov	s19, r3
   15010:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15012:	9309      	str	r3, [sp, #36]	; 0x24
   15014:	9b26      	ldr	r3, [sp, #152]	; 0x98
   15016:	ee0a 3a10 	vmov	s20, r3
   1501a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1501c:	930a      	str	r3, [sp, #40]	; 0x28
   1501e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   15020:	930b      	str	r3, [sp, #44]	; 0x2c
   15022:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   15024:	930c      	str	r3, [sp, #48]	; 0x30
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   15026:	2d01      	cmp	r5, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   15028:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1502a:	9307      	str	r3, [sp, #28]
   1502c:	4604      	mov	r4, r0
   1502e:	468b      	mov	fp, r1
   15030:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   15032:	d011      	beq.n	15058 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x68>
   15034:	2601      	movs	r6, #1
   15036:	4b77      	ldr	r3, [pc, #476]	; (15214 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
   15038:	9301      	str	r3, [sp, #4]
   1503a:	e9cd 5602 	strd	r5, r6, [sp, #8]
   1503e:	4b76      	ldr	r3, [pc, #472]	; (15218 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
   15040:	9300      	str	r3, [sp, #0]
   15042:	6944      	ldr	r4, [r0, #20]
   15044:	4a75      	ldr	r2, [pc, #468]	; (1521c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
   15046:	4976      	ldr	r1, [pc, #472]	; (15220 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
   15048:	23e0      	movs	r3, #224	; 0xe0
   1504a:	47a0      	blx	r4
}
   1504c:	4630      	mov	r0, r6
   1504e:	b013      	add	sp, #76	; 0x4c
   15050:	ecbd 8b06 	vpop	{d8-d10}
   15054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   15058:	f892 6030 	ldrb.w	r6, [r2, #48]	; 0x30
   1505c:	2e01      	cmp	r6, #1
   1505e:	d00c      	beq.n	1507a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x8a>
   15060:	e9cd 6502 	strd	r6, r5, [sp, #8]
   15064:	4b6b      	ldr	r3, [pc, #428]	; (15214 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
   15066:	9301      	str	r3, [sp, #4]
   15068:	4b6e      	ldr	r3, [pc, #440]	; (15224 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x234>)
   1506a:	9300      	str	r3, [sp, #0]
   1506c:	6944      	ldr	r4, [r0, #20]
   1506e:	4a6b      	ldr	r2, [pc, #428]	; (1521c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
   15070:	496b      	ldr	r1, [pc, #428]	; (15220 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
   15072:	23e2      	movs	r3, #226	; 0xe2
   15074:	47a0      	blx	r4
   15076:	462e      	mov	r6, r5
   15078:	e7e8      	b.n	1504c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
  const auto* affine_quantization =
   1507a:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   1507c:	b93a      	cbnz	r2, 1508e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x9e>
   1507e:	4b6a      	ldr	r3, [pc, #424]	; (15228 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x238>)
   15080:	9300      	str	r3, [sp, #0]
   15082:	6944      	ldr	r4, [r0, #20]
   15084:	23ed      	movs	r3, #237	; 0xed
  TF_LITE_ENSURE(context, affine_quantization->scale);
   15086:	4a65      	ldr	r2, [pc, #404]	; (1521c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
   15088:	4968      	ldr	r1, [pc, #416]	; (1522c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
   1508a:	47a0      	blx	r4
   1508c:	e7de      	b.n	1504c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
   1508e:	6817      	ldr	r7, [r2, #0]
   15090:	b927      	cbnz	r7, 1509c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xac>
   15092:	4b67      	ldr	r3, [pc, #412]	; (15230 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x240>)
   15094:	9300      	str	r3, [sp, #0]
   15096:	6944      	ldr	r4, [r0, #20]
   15098:	23ee      	movs	r3, #238	; 0xee
   1509a:	e7f4      	b.n	15086 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x96>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   1509c:	683d      	ldr	r5, [r7, #0]
  if (is_per_channel) {
   1509e:	2d01      	cmp	r5, #1
   150a0:	dd38      	ble.n	15114 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x124>
    TF_LITE_ENSURE(context,
   150a2:	780b      	ldrb	r3, [r1, #0]
   150a4:	2b09      	cmp	r3, #9
   150a6:	d006      	beq.n	150b6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc6>
   150a8:	2b07      	cmp	r3, #7
   150aa:	d004      	beq.n	150b6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc6>
   150ac:	4b61      	ldr	r3, [pc, #388]	; (15234 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x244>)
   150ae:	9300      	str	r3, [sp, #0]
   150b0:	6944      	ldr	r4, [r0, #20]
   150b2:	23f2      	movs	r3, #242	; 0xf2
   150b4:	e7e7      	b.n	15086 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x96>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   150b6:	f89a 3000 	ldrb.w	r3, [sl]
   150ba:	2b09      	cmp	r3, #9
   150bc:	d00d      	beq.n	150da <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xea>
   150be:	2209      	movs	r2, #9
   150c0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   150c4:	4b5c      	ldr	r3, [pc, #368]	; (15238 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x248>)
   150c6:	9301      	str	r3, [sp, #4]
   150c8:	4b5c      	ldr	r3, [pc, #368]	; (1523c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x24c>)
   150ca:	9300      	str	r3, [sp, #0]
   150cc:	6965      	ldr	r5, [r4, #20]
   150ce:	23f4      	movs	r3, #244	; 0xf4
    TF_LITE_ENSURE_EQ(
   150d0:	4a52      	ldr	r2, [pc, #328]	; (1521c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
   150d2:	4953      	ldr	r1, [pc, #332]	; (15220 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
   150d4:	4620      	mov	r0, r4
   150d6:	47a8      	blx	r5
   150d8:	e7b8      	b.n	1504c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   150da:	9b07      	ldr	r3, [sp, #28]
   150dc:	429d      	cmp	r5, r3
   150de:	d008      	beq.n	150f2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x102>
   150e0:	e9cd 5302 	strd	r5, r3, [sp, #8]
   150e4:	4b56      	ldr	r3, [pc, #344]	; (15240 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x250>)
   150e6:	9301      	str	r3, [sp, #4]
   150e8:	4b56      	ldr	r3, [pc, #344]	; (15244 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x254>)
   150ea:	9300      	str	r3, [sp, #0]
   150ec:	6965      	ldr	r5, [r4, #20]
   150ee:	23f5      	movs	r3, #245	; 0xf5
   150f0:	e7ee      	b.n	150d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe0>
    TF_LITE_ENSURE_EQ(
   150f2:	f8da 3008 	ldr.w	r3, [sl, #8]
   150f6:	6892      	ldr	r2, [r2, #8]
   150f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   150fc:	685b      	ldr	r3, [r3, #4]
   150fe:	42ab      	cmp	r3, r5
   15100:	d008      	beq.n	15114 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x124>
   15102:	e9cd 5302 	strd	r5, r3, [sp, #8]
   15106:	4b50      	ldr	r3, [pc, #320]	; (15248 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x258>)
   15108:	9301      	str	r3, [sp, #4]
   1510a:	4b4d      	ldr	r3, [pc, #308]	; (15240 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x250>)
   1510c:	9300      	str	r3, [sp, #0]
   1510e:	6965      	ldr	r5, [r4, #20]
   15110:	23f6      	movs	r3, #246	; 0xf6
   15112:	e7dd      	b.n	150d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe0>
  const float input_scale = input->params.scale;
   15114:	eddb 7a03 	vldr	s15, [fp, #12]
  const float output_scale = output->params.scale;
   15118:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
   1511a:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
   1511e:	edd3 7a03 	vldr	s15, [r3, #12]
   15122:	1d3b      	adds	r3, r7, #4
   15124:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
   15128:	9305      	str	r3, [sp, #20]
   1512a:	2600      	movs	r6, #0
   1512c:	9b07      	ldr	r3, [sp, #28]
   1512e:	429e      	cmp	r6, r3
   15130:	da34      	bge.n	1519c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ac>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   15132:	2d01      	cmp	r5, #1
   15134:	bfca      	itet	gt
   15136:	9b05      	ldrgt	r3, [sp, #20]
   15138:	687b      	ldrle	r3, [r7, #4]
   1513a:	681b      	ldrgt	r3, [r3, #0]
   1513c:	930d      	str	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
   1513e:	ee18 0a10 	vmov	r0, s16
   15142:	f7eb f991 	bl	468 <__aeabi_f2d>
    const double filter_scale = static_cast<double>(scale);
   15146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
   15148:	4680      	mov	r8, r0
    const double filter_scale = static_cast<double>(scale);
   1514a:	4618      	mov	r0, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
   1514c:	4689      	mov	r9, r1
    const double filter_scale = static_cast<double>(scale);
   1514e:	f7eb f98b 	bl	468 <__aeabi_f2d>
   15152:	4602      	mov	r2, r0
   15154:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   15156:	4640      	mov	r0, r8
   15158:	4649      	mov	r1, r9
   1515a:	f7eb f9dd 	bl	518 <__aeabi_dmul>
   1515e:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
   15160:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
   15164:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
   15166:	f7eb f97f 	bl	468 <__aeabi_f2d>
   1516a:	4602      	mov	r2, r0
   1516c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   1516e:	4640      	mov	r0, r8
   15170:	4649      	mov	r1, r9
   15172:	f7eb fafb 	bl	76c <__aeabi_ddiv>
   15176:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   1517a:	a910      	add	r1, sp, #64	; 0x40
   1517c:	a80f      	add	r0, sp, #60	; 0x3c
   1517e:	f7ff fe45 	bl	14e0c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
   15182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15186:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
   1518a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1518c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1518e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   15192:	9b05      	ldr	r3, [sp, #20]
   15194:	3304      	adds	r3, #4
   15196:	3601      	adds	r6, #1
   15198:	9305      	str	r3, [sp, #20]
   1519a:	e7c7      	b.n	1512c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x13c>
  if (input->type == kTfLiteUInt8) {
   1519c:	f89b 3000 	ldrb.w	r3, [fp]
   151a0:	2b03      	cmp	r3, #3
   151a2:	d11d      	bne.n	151e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f0>
    double real_multiplier = 0.0;
   151a4:	2200      	movs	r2, #0
   151a6:	2300      	movs	r3, #0
   151a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   151ac:	ab10      	add	r3, sp, #64	; 0x40
   151ae:	9301      	str	r3, [sp, #4]
   151b0:	9b06      	ldr	r3, [sp, #24]
   151b2:	9300      	str	r3, [sp, #0]
   151b4:	4652      	mov	r2, sl
   151b6:	ee19 3a10 	vmov	r3, s18
   151ba:	4659      	mov	r1, fp
   151bc:	4620      	mov	r0, r4
   151be:	f7ed fe87 	bl	2ed0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   151c2:	4606      	mov	r6, r0
   151c4:	2800      	cmp	r0, #0
   151c6:	f47f af41 	bne.w	1504c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   151ca:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
   151ce:	ee19 0a90 	vmov	r0, s19
   151d2:	a90f      	add	r1, sp, #60	; 0x3c
   151d4:	f7ff fe1a 	bl	14e0c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
   151d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   151da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   151dc:	425b      	negs	r3, r3
   151de:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   151e0:	f89b 3000 	ldrb.w	r3, [fp]
   151e4:	2b09      	cmp	r3, #9
   151e6:	d003      	beq.n	151f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>
   151e8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   151ec:	2b03      	cmp	r3, #3
   151ee:	d10e      	bne.n	1520e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   151f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   151f2:	9908      	ldr	r1, [sp, #32]
   151f4:	9322      	str	r3, [sp, #136]	; 0x88
   151f6:	9a06      	ldr	r2, [sp, #24]
   151f8:	7809      	ldrb	r1, [r1, #0]
   151fa:	ee1a 3a10 	vmov	r3, s20
   151fe:	4620      	mov	r0, r4
}
   15200:	b013      	add	sp, #76	; 0x4c
   15202:	ecbd 8b06 	vpop	{d8-d10}
   15206:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1520a:	f7ff be8f 	b.w	14f2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  return kTfLiteOk;
   1520e:	2600      	movs	r6, #0
   15210:	e71c      	b.n	1504c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
   15212:	bf00      	nop
   15214:	0003ebcb 	.word	0x0003ebcb
   15218:	0003ebe5 	.word	0x0003ebe5
   1521c:	0003eb10 	.word	0x0003eb10
   15220:	0003e2ab 	.word	0x0003e2ab
   15224:	0003ebfe 	.word	0x0003ebfe
   15228:	0003ec18 	.word	0x0003ec18
   1522c:	0003e25f 	.word	0x0003e25f
   15230:	0003ec2c 	.word	0x0003ec2c
   15234:	0003e9ae 	.word	0x0003e9ae
   15238:	0003ea56 	.word	0x0003ea56
   1523c:	0003ec47 	.word	0x0003ec47
   15240:	0003ec54 	.word	0x0003ec54
   15244:	0003ec61 	.word	0x0003ec61
   15248:	0003ec82 	.word	0x0003ec82

0001524c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   1524c:	b580      	push	{r7, lr}
   1524e:	b09c      	sub	sp, #112	; 0x70
   15250:	4606      	mov	r6, r0
   15252:	af00      	add	r7, sp, #0
   15254:	460c      	mov	r4, r1
   15256:	1ba4      	subs	r4, r4, r6
   15258:	490e      	ldr	r1, [pc, #56]	; (15294 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   1525a:	2269      	movs	r2, #105	; 0x69
   1525c:	1d38      	adds	r0, r7, #4
   1525e:	f006 fd3f 	bl	1bce0 <memcpy>
   15262:	f104 0370 	add.w	r3, r4, #112	; 0x70
   15266:	f023 0307 	bic.w	r3, r3, #7
   1526a:	ebad 0d03 	sub.w	sp, sp, r3
   1526e:	466d      	mov	r5, sp
   15270:	2268      	movs	r2, #104	; 0x68
   15272:	1d39      	adds	r1, r7, #4
   15274:	4628      	mov	r0, r5
   15276:	f006 fd33 	bl	1bce0 <memcpy>
   1527a:	4622      	mov	r2, r4
   1527c:	4631      	mov	r1, r6
   1527e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   15282:	442c      	add	r4, r5
   15284:	f006 fd2c 	bl	1bce0 <memcpy>
   15288:	2300      	movs	r3, #0
   1528a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   1528e:	4628      	mov	r0, r5
   15290:	f006 fc6d 	bl	1bb6e <_ZSt19__throw_logic_errorPKc>
   15294:	0003ecbf 	.word	0x0003ecbf

00015298 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   15298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1529c:	af00      	add	r7, sp, #0
   1529e:	b084      	sub	sp, #16
   152a0:	466d      	mov	r5, sp
   152a2:	f105 040c 	add.w	r4, r5, #12
   152a6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 152ec <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   152aa:	4623      	mov	r3, r4
   152ac:	f04f 0c0a 	mov.w	ip, #10
   152b0:	fbb2 f6fc 	udiv	r6, r2, ip
   152b4:	fb0c 2e16 	mls	lr, ip, r6, r2
   152b8:	f818 e00e 	ldrb.w	lr, [r8, lr]
   152bc:	f803 ed01 	strb.w	lr, [r3, #-1]!
   152c0:	4696      	mov	lr, r2
   152c2:	f1be 0f09 	cmp.w	lr, #9
   152c6:	4632      	mov	r2, r6
   152c8:	d8f2      	bhi.n	152b0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   152ca:	1ae4      	subs	r4, r4, r3
   152cc:	428c      	cmp	r4, r1
   152ce:	d809      	bhi.n	152e4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   152d0:	f1c4 030c 	rsb	r3, r4, #12
   152d4:	4622      	mov	r2, r4
   152d6:	18e9      	adds	r1, r5, r3
   152d8:	f006 fd02 	bl	1bce0 <memcpy>
   152dc:	4620      	mov	r0, r4
   152de:	46bd      	mov	sp, r7
   152e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   152e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   152e8:	e7f8      	b.n	152dc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   152ea:	bf00      	nop
   152ec:	0003ed28 	.word	0x0003ed28

000152f0 <_ZSt15get_new_handlerv>:
   152f0:	4b02      	ldr	r3, [pc, #8]	; (152fc <_ZSt15get_new_handlerv+0xc>)
   152f2:	6818      	ldr	r0, [r3, #0]
   152f4:	f3bf 8f5b 	dmb	ish
   152f8:	4770      	bx	lr
   152fa:	bf00      	nop
   152fc:	200243dc 	.word	0x200243dc

00015300 <frexp>:
   15300:	b570      	push	{r4, r5, r6, lr}
   15302:	2100      	movs	r1, #0
   15304:	ec55 4b10 	vmov	r4, r5, d0
   15308:	6001      	str	r1, [r0, #0]
   1530a:	4916      	ldr	r1, [pc, #88]	; (15364 <frexp+0x64>)
   1530c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   15310:	428a      	cmp	r2, r1
   15312:	4606      	mov	r6, r0
   15314:	462b      	mov	r3, r5
   15316:	dc22      	bgt.n	1535e <frexp+0x5e>
   15318:	ee10 1a10 	vmov	r1, s0
   1531c:	4311      	orrs	r1, r2
   1531e:	d01e      	beq.n	1535e <frexp+0x5e>
   15320:	4911      	ldr	r1, [pc, #68]	; (15368 <frexp+0x68>)
   15322:	4029      	ands	r1, r5
   15324:	b969      	cbnz	r1, 15342 <frexp+0x42>
   15326:	4b11      	ldr	r3, [pc, #68]	; (1536c <frexp+0x6c>)
   15328:	2200      	movs	r2, #0
   1532a:	ee10 0a10 	vmov	r0, s0
   1532e:	4629      	mov	r1, r5
   15330:	f7eb f8f2 	bl	518 <__aeabi_dmul>
   15334:	460b      	mov	r3, r1
   15336:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1533a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1533e:	4604      	mov	r4, r0
   15340:	6031      	str	r1, [r6, #0]
   15342:	6831      	ldr	r1, [r6, #0]
   15344:	1512      	asrs	r2, r2, #20
   15346:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1534a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
   1534e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   15352:	440a      	add	r2, r1
   15354:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   15358:	6032      	str	r2, [r6, #0]
   1535a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   1535e:	ec45 4b10 	vmov	d0, r4, r5
   15362:	bd70      	pop	{r4, r5, r6, pc}
   15364:	7fefffff 	.word	0x7fefffff
   15368:	7ff00000 	.word	0x7ff00000
   1536c:	43500000 	.word	0x43500000

00015370 <round>:
   15370:	ec51 0b10 	vmov	r0, r1, d0
   15374:	b570      	push	{r4, r5, r6, lr}
   15376:	f3c1 550a 	ubfx	r5, r1, #20, #11
   1537a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
   1537e:	2c13      	cmp	r4, #19
   15380:	ee10 2a10 	vmov	r2, s0
   15384:	460b      	mov	r3, r1
   15386:	dc19      	bgt.n	153bc <round+0x4c>
   15388:	2c00      	cmp	r4, #0
   1538a:	da09      	bge.n	153a0 <round+0x30>
   1538c:	3401      	adds	r4, #1
   1538e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   15392:	d103      	bne.n	1539c <round+0x2c>
   15394:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   15398:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1539c:	2200      	movs	r2, #0
   1539e:	e028      	b.n	153f2 <round+0x82>
   153a0:	4d15      	ldr	r5, [pc, #84]	; (153f8 <round+0x88>)
   153a2:	4125      	asrs	r5, r4
   153a4:	ea01 0605 	and.w	r6, r1, r5
   153a8:	4332      	orrs	r2, r6
   153aa:	d00e      	beq.n	153ca <round+0x5a>
   153ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   153b0:	fa42 f404 	asr.w	r4, r2, r4
   153b4:	4423      	add	r3, r4
   153b6:	ea23 0305 	bic.w	r3, r3, r5
   153ba:	e7ef      	b.n	1539c <round+0x2c>
   153bc:	2c33      	cmp	r4, #51	; 0x33
   153be:	dd07      	ble.n	153d0 <round+0x60>
   153c0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   153c4:	d101      	bne.n	153ca <round+0x5a>
   153c6:	f7ea fef1 	bl	1ac <__adddf3>
   153ca:	ec41 0b10 	vmov	d0, r0, r1
   153ce:	bd70      	pop	{r4, r5, r6, pc}
   153d0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
   153d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   153d8:	40f5      	lsrs	r5, r6
   153da:	4228      	tst	r0, r5
   153dc:	d0f5      	beq.n	153ca <round+0x5a>
   153de:	2101      	movs	r1, #1
   153e0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
   153e4:	fa01 f404 	lsl.w	r4, r1, r4
   153e8:	1912      	adds	r2, r2, r4
   153ea:	bf28      	it	cs
   153ec:	185b      	addcs	r3, r3, r1
   153ee:	ea22 0205 	bic.w	r2, r2, r5
   153f2:	4619      	mov	r1, r3
   153f4:	4610      	mov	r0, r2
   153f6:	e7e8      	b.n	153ca <round+0x5a>
   153f8:	000fffff 	.word	0x000fffff

000153fc <ceilf>:
   153fc:	ee10 3a10 	vmov	r3, s0
   15400:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   15404:	3a7f      	subs	r2, #127	; 0x7f
   15406:	2a16      	cmp	r2, #22
   15408:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   1540c:	dc2a      	bgt.n	15464 <ceilf+0x68>
   1540e:	2a00      	cmp	r2, #0
   15410:	da11      	bge.n	15436 <ceilf+0x3a>
   15412:	eddf 7a19 	vldr	s15, [pc, #100]	; 15478 <ceilf+0x7c>
   15416:	ee30 0a27 	vadd.f32	s0, s0, s15
   1541a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   1541e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15422:	dd05      	ble.n	15430 <ceilf+0x34>
   15424:	2b00      	cmp	r3, #0
   15426:	db23      	blt.n	15470 <ceilf+0x74>
   15428:	2900      	cmp	r1, #0
   1542a:	bf18      	it	ne
   1542c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
   15430:	ee00 3a10 	vmov	s0, r3
   15434:	4770      	bx	lr
   15436:	4911      	ldr	r1, [pc, #68]	; (1547c <ceilf+0x80>)
   15438:	4111      	asrs	r1, r2
   1543a:	420b      	tst	r3, r1
   1543c:	d0fa      	beq.n	15434 <ceilf+0x38>
   1543e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 15478 <ceilf+0x7c>
   15442:	ee30 0a27 	vadd.f32	s0, s0, s15
   15446:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   1544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1544e:	ddef      	ble.n	15430 <ceilf+0x34>
   15450:	2b00      	cmp	r3, #0
   15452:	bfc2      	ittt	gt
   15454:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
   15458:	fa40 f202 	asrgt.w	r2, r0, r2
   1545c:	189b      	addgt	r3, r3, r2
   1545e:	ea23 0301 	bic.w	r3, r3, r1
   15462:	e7e5      	b.n	15430 <ceilf+0x34>
   15464:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   15468:	d3e4      	bcc.n	15434 <ceilf+0x38>
   1546a:	ee30 0a00 	vadd.f32	s0, s0, s0
   1546e:	4770      	bx	lr
   15470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   15474:	e7dc      	b.n	15430 <ceilf+0x34>
   15476:	bf00      	nop
   15478:	7149f2ca 	.word	0x7149f2ca
   1547c:	007fffff 	.word	0x007fffff

00015480 <floorf>:
   15480:	ee10 3a10 	vmov	r3, s0
   15484:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   15488:	3a7f      	subs	r2, #127	; 0x7f
   1548a:	2a16      	cmp	r2, #22
   1548c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   15490:	dc2a      	bgt.n	154e8 <floorf+0x68>
   15492:	2a00      	cmp	r2, #0
   15494:	da11      	bge.n	154ba <floorf+0x3a>
   15496:	eddf 7a18 	vldr	s15, [pc, #96]	; 154f8 <floorf+0x78>
   1549a:	ee30 0a27 	vadd.f32	s0, s0, s15
   1549e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   154a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   154a6:	dd05      	ble.n	154b4 <floorf+0x34>
   154a8:	2b00      	cmp	r3, #0
   154aa:	da23      	bge.n	154f4 <floorf+0x74>
   154ac:	4a13      	ldr	r2, [pc, #76]	; (154fc <floorf+0x7c>)
   154ae:	2900      	cmp	r1, #0
   154b0:	bf18      	it	ne
   154b2:	4613      	movne	r3, r2
   154b4:	ee00 3a10 	vmov	s0, r3
   154b8:	4770      	bx	lr
   154ba:	4911      	ldr	r1, [pc, #68]	; (15500 <floorf+0x80>)
   154bc:	4111      	asrs	r1, r2
   154be:	420b      	tst	r3, r1
   154c0:	d0fa      	beq.n	154b8 <floorf+0x38>
   154c2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 154f8 <floorf+0x78>
   154c6:	ee30 0a27 	vadd.f32	s0, s0, s15
   154ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   154ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   154d2:	ddef      	ble.n	154b4 <floorf+0x34>
   154d4:	2b00      	cmp	r3, #0
   154d6:	bfbe      	ittt	lt
   154d8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
   154dc:	fa40 f202 	asrlt.w	r2, r0, r2
   154e0:	189b      	addlt	r3, r3, r2
   154e2:	ea23 0301 	bic.w	r3, r3, r1
   154e6:	e7e5      	b.n	154b4 <floorf+0x34>
   154e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   154ec:	d3e4      	bcc.n	154b8 <floorf+0x38>
   154ee:	ee30 0a00 	vadd.f32	s0, s0, s0
   154f2:	4770      	bx	lr
   154f4:	2300      	movs	r3, #0
   154f6:	e7dd      	b.n	154b4 <floorf+0x34>
   154f8:	7149f2ca 	.word	0x7149f2ca
   154fc:	bf800000 	.word	0xbf800000
   15500:	007fffff 	.word	0x007fffff

00015504 <frexpf>:
   15504:	ee10 3a10 	vmov	r3, s0
   15508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1550c:	2100      	movs	r1, #0
   1550e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   15512:	6001      	str	r1, [r0, #0]
   15514:	da19      	bge.n	1554a <frexpf+0x46>
   15516:	b1c2      	cbz	r2, 1554a <frexpf+0x46>
   15518:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   1551c:	d10a      	bne.n	15534 <frexpf+0x30>
   1551e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1554c <frexpf+0x48>
   15522:	ee60 7a27 	vmul.f32	s15, s0, s15
   15526:	f06f 0118 	mvn.w	r1, #24
   1552a:	ee17 3a90 	vmov	r3, s15
   1552e:	6001      	str	r1, [r0, #0]
   15530:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   15534:	6801      	ldr	r1, [r0, #0]
   15536:	15d2      	asrs	r2, r2, #23
   15538:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1553c:	3a7e      	subs	r2, #126	; 0x7e
   1553e:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
   15542:	440a      	add	r2, r1
   15544:	ee00 3a10 	vmov	s0, r3
   15548:	6002      	str	r2, [r0, #0]
   1554a:	4770      	bx	lr
   1554c:	4c000000 	.word	0x4c000000

00015550 <roundf>:
   15550:	ee10 0a10 	vmov	r0, s0
   15554:	f3c0 52c7 	ubfx	r2, r0, #23, #8
   15558:	3a7f      	subs	r2, #127	; 0x7f
   1555a:	2a16      	cmp	r2, #22
   1555c:	dc15      	bgt.n	1558a <roundf+0x3a>
   1555e:	2a00      	cmp	r2, #0
   15560:	da08      	bge.n	15574 <roundf+0x24>
   15562:	3201      	adds	r2, #1
   15564:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   15568:	d101      	bne.n	1556e <roundf+0x1e>
   1556a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   1556e:	ee00 3a10 	vmov	s0, r3
   15572:	4770      	bx	lr
   15574:	4907      	ldr	r1, [pc, #28]	; (15594 <roundf+0x44>)
   15576:	4111      	asrs	r1, r2
   15578:	4208      	tst	r0, r1
   1557a:	d0fa      	beq.n	15572 <roundf+0x22>
   1557c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   15580:	4113      	asrs	r3, r2
   15582:	4403      	add	r3, r0
   15584:	ea23 0301 	bic.w	r3, r3, r1
   15588:	e7f1      	b.n	1556e <roundf+0x1e>
   1558a:	2a80      	cmp	r2, #128	; 0x80
   1558c:	d1f1      	bne.n	15572 <roundf+0x22>
   1558e:	ee30 0a00 	vadd.f32	s0, s0, s0
   15592:	4770      	bx	lr
   15594:	007fffff 	.word	0x007fffff

00015598 <pow>:
   15598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1559c:	ec59 8b10 	vmov	r8, r9, d0
   155a0:	ec57 6b11 	vmov	r6, r7, d1
   155a4:	f7ed fe18 	bl	31d8 <__ieee754_pow>
   155a8:	4b4e      	ldr	r3, [pc, #312]	; (156e4 <pow+0x14c>)
   155aa:	f993 3000 	ldrsb.w	r3, [r3]
   155ae:	3301      	adds	r3, #1
   155b0:	ec55 4b10 	vmov	r4, r5, d0
   155b4:	d015      	beq.n	155e2 <pow+0x4a>
   155b6:	4632      	mov	r2, r6
   155b8:	463b      	mov	r3, r7
   155ba:	4630      	mov	r0, r6
   155bc:	4639      	mov	r1, r7
   155be:	f7eb fb3d 	bl	c3c <__aeabi_dcmpun>
   155c2:	b970      	cbnz	r0, 155e2 <pow+0x4a>
   155c4:	4642      	mov	r2, r8
   155c6:	464b      	mov	r3, r9
   155c8:	4640      	mov	r0, r8
   155ca:	4649      	mov	r1, r9
   155cc:	f7eb fb36 	bl	c3c <__aeabi_dcmpun>
   155d0:	2200      	movs	r2, #0
   155d2:	2300      	movs	r3, #0
   155d4:	b148      	cbz	r0, 155ea <pow+0x52>
   155d6:	4630      	mov	r0, r6
   155d8:	4639      	mov	r1, r7
   155da:	f7eb fa05 	bl	9e8 <__aeabi_dcmpeq>
   155de:	2800      	cmp	r0, #0
   155e0:	d17d      	bne.n	156de <pow+0x146>
   155e2:	ec45 4b10 	vmov	d0, r4, r5
   155e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   155ea:	4640      	mov	r0, r8
   155ec:	4649      	mov	r1, r9
   155ee:	f7eb f9fb 	bl	9e8 <__aeabi_dcmpeq>
   155f2:	b1e0      	cbz	r0, 1562e <pow+0x96>
   155f4:	2200      	movs	r2, #0
   155f6:	2300      	movs	r3, #0
   155f8:	4630      	mov	r0, r6
   155fa:	4639      	mov	r1, r7
   155fc:	f7eb f9f4 	bl	9e8 <__aeabi_dcmpeq>
   15600:	2800      	cmp	r0, #0
   15602:	d16c      	bne.n	156de <pow+0x146>
   15604:	ec47 6b10 	vmov	d0, r6, r7
   15608:	f006 fb4b 	bl	1bca2 <finite>
   1560c:	2800      	cmp	r0, #0
   1560e:	d0e8      	beq.n	155e2 <pow+0x4a>
   15610:	2200      	movs	r2, #0
   15612:	2300      	movs	r3, #0
   15614:	4630      	mov	r0, r6
   15616:	4639      	mov	r1, r7
   15618:	f7eb f9f0 	bl	9fc <__aeabi_dcmplt>
   1561c:	2800      	cmp	r0, #0
   1561e:	d0e0      	beq.n	155e2 <pow+0x4a>
   15620:	f002 fc97 	bl	17f52 <__errno>
   15624:	2321      	movs	r3, #33	; 0x21
   15626:	6003      	str	r3, [r0, #0]
   15628:	2400      	movs	r4, #0
   1562a:	4d2f      	ldr	r5, [pc, #188]	; (156e8 <pow+0x150>)
   1562c:	e7d9      	b.n	155e2 <pow+0x4a>
   1562e:	ec45 4b10 	vmov	d0, r4, r5
   15632:	f006 fb36 	bl	1bca2 <finite>
   15636:	bbb8      	cbnz	r0, 156a8 <pow+0x110>
   15638:	ec49 8b10 	vmov	d0, r8, r9
   1563c:	f006 fb31 	bl	1bca2 <finite>
   15640:	b390      	cbz	r0, 156a8 <pow+0x110>
   15642:	ec47 6b10 	vmov	d0, r6, r7
   15646:	f006 fb2c 	bl	1bca2 <finite>
   1564a:	b368      	cbz	r0, 156a8 <pow+0x110>
   1564c:	4622      	mov	r2, r4
   1564e:	462b      	mov	r3, r5
   15650:	4620      	mov	r0, r4
   15652:	4629      	mov	r1, r5
   15654:	f7eb faf2 	bl	c3c <__aeabi_dcmpun>
   15658:	b160      	cbz	r0, 15674 <pow+0xdc>
   1565a:	f002 fc7a 	bl	17f52 <__errno>
   1565e:	2321      	movs	r3, #33	; 0x21
   15660:	6003      	str	r3, [r0, #0]
   15662:	2200      	movs	r2, #0
   15664:	2300      	movs	r3, #0
   15666:	4610      	mov	r0, r2
   15668:	4619      	mov	r1, r3
   1566a:	f7eb f87f 	bl	76c <__aeabi_ddiv>
   1566e:	4604      	mov	r4, r0
   15670:	460d      	mov	r5, r1
   15672:	e7b6      	b.n	155e2 <pow+0x4a>
   15674:	f002 fc6d 	bl	17f52 <__errno>
   15678:	2322      	movs	r3, #34	; 0x22
   1567a:	6003      	str	r3, [r0, #0]
   1567c:	2200      	movs	r2, #0
   1567e:	2300      	movs	r3, #0
   15680:	4640      	mov	r0, r8
   15682:	4649      	mov	r1, r9
   15684:	f7eb f9ba 	bl	9fc <__aeabi_dcmplt>
   15688:	2400      	movs	r4, #0
   1568a:	b158      	cbz	r0, 156a4 <pow+0x10c>
   1568c:	ec47 6b10 	vmov	d0, r6, r7
   15690:	f000 fa4c 	bl	15b2c <rint>
   15694:	4632      	mov	r2, r6
   15696:	ec51 0b10 	vmov	r0, r1, d0
   1569a:	463b      	mov	r3, r7
   1569c:	f7eb f9a4 	bl	9e8 <__aeabi_dcmpeq>
   156a0:	2800      	cmp	r0, #0
   156a2:	d0c2      	beq.n	1562a <pow+0x92>
   156a4:	4d11      	ldr	r5, [pc, #68]	; (156ec <pow+0x154>)
   156a6:	e79c      	b.n	155e2 <pow+0x4a>
   156a8:	2200      	movs	r2, #0
   156aa:	2300      	movs	r3, #0
   156ac:	4620      	mov	r0, r4
   156ae:	4629      	mov	r1, r5
   156b0:	f7eb f99a 	bl	9e8 <__aeabi_dcmpeq>
   156b4:	2800      	cmp	r0, #0
   156b6:	d094      	beq.n	155e2 <pow+0x4a>
   156b8:	ec49 8b10 	vmov	d0, r8, r9
   156bc:	f006 faf1 	bl	1bca2 <finite>
   156c0:	2800      	cmp	r0, #0
   156c2:	d08e      	beq.n	155e2 <pow+0x4a>
   156c4:	ec47 6b10 	vmov	d0, r6, r7
   156c8:	f006 faeb 	bl	1bca2 <finite>
   156cc:	2800      	cmp	r0, #0
   156ce:	d088      	beq.n	155e2 <pow+0x4a>
   156d0:	f002 fc3f 	bl	17f52 <__errno>
   156d4:	2322      	movs	r3, #34	; 0x22
   156d6:	6003      	str	r3, [r0, #0]
   156d8:	2400      	movs	r4, #0
   156da:	2500      	movs	r5, #0
   156dc:	e781      	b.n	155e2 <pow+0x4a>
   156de:	4d04      	ldr	r5, [pc, #16]	; (156f0 <pow+0x158>)
   156e0:	2400      	movs	r4, #0
   156e2:	e77e      	b.n	155e2 <pow+0x4a>
   156e4:	20000589 	.word	0x20000589
   156e8:	fff00000 	.word	0xfff00000
   156ec:	7ff00000 	.word	0x7ff00000
   156f0:	3ff00000 	.word	0x3ff00000

000156f4 <sqrt>:
   156f4:	b538      	push	{r3, r4, r5, lr}
   156f6:	ed2d 8b02 	vpush	{d8}
   156fa:	ec55 4b10 	vmov	r4, r5, d0
   156fe:	f000 f891 	bl	15824 <__ieee754_sqrt>
   15702:	4b15      	ldr	r3, [pc, #84]	; (15758 <sqrt+0x64>)
   15704:	eeb0 8a40 	vmov.f32	s16, s0
   15708:	eef0 8a60 	vmov.f32	s17, s1
   1570c:	f993 3000 	ldrsb.w	r3, [r3]
   15710:	3301      	adds	r3, #1
   15712:	d019      	beq.n	15748 <sqrt+0x54>
   15714:	4622      	mov	r2, r4
   15716:	462b      	mov	r3, r5
   15718:	4620      	mov	r0, r4
   1571a:	4629      	mov	r1, r5
   1571c:	f7eb fa8e 	bl	c3c <__aeabi_dcmpun>
   15720:	b990      	cbnz	r0, 15748 <sqrt+0x54>
   15722:	2200      	movs	r2, #0
   15724:	2300      	movs	r3, #0
   15726:	4620      	mov	r0, r4
   15728:	4629      	mov	r1, r5
   1572a:	f7eb f967 	bl	9fc <__aeabi_dcmplt>
   1572e:	b158      	cbz	r0, 15748 <sqrt+0x54>
   15730:	f002 fc0f 	bl	17f52 <__errno>
   15734:	2321      	movs	r3, #33	; 0x21
   15736:	6003      	str	r3, [r0, #0]
   15738:	2200      	movs	r2, #0
   1573a:	2300      	movs	r3, #0
   1573c:	4610      	mov	r0, r2
   1573e:	4619      	mov	r1, r3
   15740:	f7eb f814 	bl	76c <__aeabi_ddiv>
   15744:	ec41 0b18 	vmov	d8, r0, r1
   15748:	eeb0 0a48 	vmov.f32	s0, s16
   1574c:	eef0 0a68 	vmov.f32	s1, s17
   15750:	ecbd 8b02 	vpop	{d8}
   15754:	bd38      	pop	{r3, r4, r5, pc}
   15756:	bf00      	nop
   15758:	20000589 	.word	0x20000589

0001575c <expf>:
   1575c:	b508      	push	{r3, lr}
   1575e:	ed2d 8b02 	vpush	{d8}
   15762:	eef0 8a40 	vmov.f32	s17, s0
   15766:	f000 f90f 	bl	15988 <__ieee754_expf>
   1576a:	4b16      	ldr	r3, [pc, #88]	; (157c4 <expf+0x68>)
   1576c:	f993 3000 	ldrsb.w	r3, [r3]
   15770:	3301      	adds	r3, #1
   15772:	eeb0 8a40 	vmov.f32	s16, s0
   15776:	d011      	beq.n	1579c <expf+0x40>
   15778:	eeb0 0a68 	vmov.f32	s0, s17
   1577c:	f006 fa9c 	bl	1bcb8 <finitef>
   15780:	b160      	cbz	r0, 1579c <expf+0x40>
   15782:	eddf 7a11 	vldr	s15, [pc, #68]	; 157c8 <expf+0x6c>
   15786:	eef4 8ae7 	vcmpe.f32	s17, s15
   1578a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1578e:	dd0a      	ble.n	157a6 <expf+0x4a>
   15790:	f002 fbdf 	bl	17f52 <__errno>
   15794:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 157cc <expf+0x70>
   15798:	2322      	movs	r3, #34	; 0x22
   1579a:	6003      	str	r3, [r0, #0]
   1579c:	eeb0 0a48 	vmov.f32	s0, s16
   157a0:	ecbd 8b02 	vpop	{d8}
   157a4:	bd08      	pop	{r3, pc}
   157a6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 157d0 <expf+0x74>
   157aa:	eef4 8ae7 	vcmpe.f32	s17, s15
   157ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   157b2:	d5f3      	bpl.n	1579c <expf+0x40>
   157b4:	f002 fbcd 	bl	17f52 <__errno>
   157b8:	2322      	movs	r3, #34	; 0x22
   157ba:	ed9f 8a06 	vldr	s16, [pc, #24]	; 157d4 <expf+0x78>
   157be:	6003      	str	r3, [r0, #0]
   157c0:	e7ec      	b.n	1579c <expf+0x40>
   157c2:	bf00      	nop
   157c4:	20000589 	.word	0x20000589
   157c8:	42b17180 	.word	0x42b17180
   157cc:	7f800000 	.word	0x7f800000
   157d0:	c2cff1b5 	.word	0xc2cff1b5
   157d4:	00000000 	.word	0x00000000

000157d8 <sqrtf>:
   157d8:	b508      	push	{r3, lr}
   157da:	ed2d 8b02 	vpush	{d8}
   157de:	eeb0 8a40 	vmov.f32	s16, s0
   157e2:	f006 fa5b 	bl	1bc9c <__ieee754_sqrtf>
   157e6:	4b0d      	ldr	r3, [pc, #52]	; (1581c <sqrtf+0x44>)
   157e8:	f993 3000 	ldrsb.w	r3, [r3]
   157ec:	3301      	adds	r3, #1
   157ee:	d011      	beq.n	15814 <sqrtf+0x3c>
   157f0:	eeb4 8a48 	vcmp.f32	s16, s16
   157f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   157f8:	d60c      	bvs.n	15814 <sqrtf+0x3c>
   157fa:	eddf 8a09 	vldr	s17, [pc, #36]	; 15820 <sqrtf+0x48>
   157fe:	eeb4 8ae8 	vcmpe.f32	s16, s17
   15802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15806:	d505      	bpl.n	15814 <sqrtf+0x3c>
   15808:	f002 fba3 	bl	17f52 <__errno>
   1580c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   15810:	2321      	movs	r3, #33	; 0x21
   15812:	6003      	str	r3, [r0, #0]
   15814:	ecbd 8b02 	vpop	{d8}
   15818:	bd08      	pop	{r3, pc}
   1581a:	bf00      	nop
   1581c:	20000589 	.word	0x20000589
   15820:	00000000 	.word	0x00000000

00015824 <__ieee754_sqrt>:
   15824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15828:	ec55 4b10 	vmov	r4, r5, d0
   1582c:	4e55      	ldr	r6, [pc, #340]	; (15984 <__ieee754_sqrt+0x160>)
   1582e:	43ae      	bics	r6, r5
   15830:	ee10 0a10 	vmov	r0, s0
   15834:	ee10 3a10 	vmov	r3, s0
   15838:	462a      	mov	r2, r5
   1583a:	4629      	mov	r1, r5
   1583c:	d110      	bne.n	15860 <__ieee754_sqrt+0x3c>
   1583e:	ee10 2a10 	vmov	r2, s0
   15842:	462b      	mov	r3, r5
   15844:	f7ea fe68 	bl	518 <__aeabi_dmul>
   15848:	4602      	mov	r2, r0
   1584a:	460b      	mov	r3, r1
   1584c:	4620      	mov	r0, r4
   1584e:	4629      	mov	r1, r5
   15850:	f7ea fcac 	bl	1ac <__adddf3>
   15854:	4604      	mov	r4, r0
   15856:	460d      	mov	r5, r1
   15858:	ec45 4b10 	vmov	d0, r4, r5
   1585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15860:	2d00      	cmp	r5, #0
   15862:	dc10      	bgt.n	15886 <__ieee754_sqrt+0x62>
   15864:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   15868:	4330      	orrs	r0, r6
   1586a:	d0f5      	beq.n	15858 <__ieee754_sqrt+0x34>
   1586c:	b15d      	cbz	r5, 15886 <__ieee754_sqrt+0x62>
   1586e:	ee10 2a10 	vmov	r2, s0
   15872:	462b      	mov	r3, r5
   15874:	ee10 0a10 	vmov	r0, s0
   15878:	f7ea fc96 	bl	1a8 <__aeabi_dsub>
   1587c:	4602      	mov	r2, r0
   1587e:	460b      	mov	r3, r1
   15880:	f7ea ff74 	bl	76c <__aeabi_ddiv>
   15884:	e7e6      	b.n	15854 <__ieee754_sqrt+0x30>
   15886:	1512      	asrs	r2, r2, #20
   15888:	d074      	beq.n	15974 <__ieee754_sqrt+0x150>
   1588a:	07d4      	lsls	r4, r2, #31
   1588c:	f3c1 0113 	ubfx	r1, r1, #0, #20
   15890:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
   15894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   15898:	bf5e      	ittt	pl
   1589a:	0fda      	lsrpl	r2, r3, #31
   1589c:	005b      	lslpl	r3, r3, #1
   1589e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
   158a2:	2400      	movs	r4, #0
   158a4:	0fda      	lsrs	r2, r3, #31
   158a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   158aa:	107f      	asrs	r7, r7, #1
   158ac:	005b      	lsls	r3, r3, #1
   158ae:	2516      	movs	r5, #22
   158b0:	4620      	mov	r0, r4
   158b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   158b6:	1886      	adds	r6, r0, r2
   158b8:	428e      	cmp	r6, r1
   158ba:	bfde      	ittt	le
   158bc:	1b89      	suble	r1, r1, r6
   158be:	18b0      	addle	r0, r6, r2
   158c0:	18a4      	addle	r4, r4, r2
   158c2:	0049      	lsls	r1, r1, #1
   158c4:	3d01      	subs	r5, #1
   158c6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
   158ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
   158ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
   158d2:	d1f0      	bne.n	158b6 <__ieee754_sqrt+0x92>
   158d4:	462a      	mov	r2, r5
   158d6:	f04f 0e20 	mov.w	lr, #32
   158da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   158de:	4281      	cmp	r1, r0
   158e0:	eb06 0c05 	add.w	ip, r6, r5
   158e4:	dc02      	bgt.n	158ec <__ieee754_sqrt+0xc8>
   158e6:	d113      	bne.n	15910 <__ieee754_sqrt+0xec>
   158e8:	459c      	cmp	ip, r3
   158ea:	d811      	bhi.n	15910 <__ieee754_sqrt+0xec>
   158ec:	f1bc 0f00 	cmp.w	ip, #0
   158f0:	eb0c 0506 	add.w	r5, ip, r6
   158f4:	da43      	bge.n	1597e <__ieee754_sqrt+0x15a>
   158f6:	2d00      	cmp	r5, #0
   158f8:	db41      	blt.n	1597e <__ieee754_sqrt+0x15a>
   158fa:	f100 0801 	add.w	r8, r0, #1
   158fe:	1a09      	subs	r1, r1, r0
   15900:	459c      	cmp	ip, r3
   15902:	bf88      	it	hi
   15904:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   15908:	eba3 030c 	sub.w	r3, r3, ip
   1590c:	4432      	add	r2, r6
   1590e:	4640      	mov	r0, r8
   15910:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
   15914:	f1be 0e01 	subs.w	lr, lr, #1
   15918:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
   1591c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   15920:	ea4f 0656 	mov.w	r6, r6, lsr #1
   15924:	d1db      	bne.n	158de <__ieee754_sqrt+0xba>
   15926:	430b      	orrs	r3, r1
   15928:	d006      	beq.n	15938 <__ieee754_sqrt+0x114>
   1592a:	1c50      	adds	r0, r2, #1
   1592c:	bf13      	iteet	ne
   1592e:	3201      	addne	r2, #1
   15930:	3401      	addeq	r4, #1
   15932:	4672      	moveq	r2, lr
   15934:	f022 0201 	bicne.w	r2, r2, #1
   15938:	1063      	asrs	r3, r4, #1
   1593a:	0852      	lsrs	r2, r2, #1
   1593c:	07e1      	lsls	r1, r4, #31
   1593e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   15942:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   15946:	bf48      	it	mi
   15948:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
   1594c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
   15950:	4614      	mov	r4, r2
   15952:	e781      	b.n	15858 <__ieee754_sqrt+0x34>
   15954:	0ad9      	lsrs	r1, r3, #11
   15956:	3815      	subs	r0, #21
   15958:	055b      	lsls	r3, r3, #21
   1595a:	2900      	cmp	r1, #0
   1595c:	d0fa      	beq.n	15954 <__ieee754_sqrt+0x130>
   1595e:	02cd      	lsls	r5, r1, #11
   15960:	d50a      	bpl.n	15978 <__ieee754_sqrt+0x154>
   15962:	f1c2 0420 	rsb	r4, r2, #32
   15966:	fa23 f404 	lsr.w	r4, r3, r4
   1596a:	1e55      	subs	r5, r2, #1
   1596c:	4093      	lsls	r3, r2
   1596e:	4321      	orrs	r1, r4
   15970:	1b42      	subs	r2, r0, r5
   15972:	e78a      	b.n	1588a <__ieee754_sqrt+0x66>
   15974:	4610      	mov	r0, r2
   15976:	e7f0      	b.n	1595a <__ieee754_sqrt+0x136>
   15978:	0049      	lsls	r1, r1, #1
   1597a:	3201      	adds	r2, #1
   1597c:	e7ef      	b.n	1595e <__ieee754_sqrt+0x13a>
   1597e:	4680      	mov	r8, r0
   15980:	e7bd      	b.n	158fe <__ieee754_sqrt+0xda>
   15982:	bf00      	nop
   15984:	7ff00000 	.word	0x7ff00000

00015988 <__ieee754_expf>:
   15988:	ee10 2a10 	vmov	r2, s0
   1598c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   15990:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   15994:	d902      	bls.n	1599c <__ieee754_expf+0x14>
   15996:	ee30 0a00 	vadd.f32	s0, s0, s0
   1599a:	4770      	bx	lr
   1599c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
   159a0:	d106      	bne.n	159b0 <__ieee754_expf+0x28>
   159a2:	eddf 7a50 	vldr	s15, [pc, #320]	; 15ae4 <__ieee754_expf+0x15c>
   159a6:	2b00      	cmp	r3, #0
   159a8:	bf18      	it	ne
   159aa:	eeb0 0a67 	vmovne.f32	s0, s15
   159ae:	4770      	bx	lr
   159b0:	484d      	ldr	r0, [pc, #308]	; (15ae8 <__ieee754_expf+0x160>)
   159b2:	4282      	cmp	r2, r0
   159b4:	dd04      	ble.n	159c0 <__ieee754_expf+0x38>
   159b6:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 15aec <__ieee754_expf+0x164>
   159ba:	ee20 0a00 	vmul.f32	s0, s0, s0
   159be:	4770      	bx	lr
   159c0:	2a00      	cmp	r2, #0
   159c2:	da03      	bge.n	159cc <__ieee754_expf+0x44>
   159c4:	4a4a      	ldr	r2, [pc, #296]	; (15af0 <__ieee754_expf+0x168>)
   159c6:	4291      	cmp	r1, r2
   159c8:	f200 8088 	bhi.w	15adc <__ieee754_expf+0x154>
   159cc:	4a49      	ldr	r2, [pc, #292]	; (15af4 <__ieee754_expf+0x16c>)
   159ce:	4291      	cmp	r1, r2
   159d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   159d4:	d952      	bls.n	15a7c <__ieee754_expf+0xf4>
   159d6:	4a48      	ldr	r2, [pc, #288]	; (15af8 <__ieee754_expf+0x170>)
   159d8:	4291      	cmp	r1, r2
   159da:	ea4f 0283 	mov.w	r2, r3, lsl #2
   159de:	d834      	bhi.n	15a4a <__ieee754_expf+0xc2>
   159e0:	4946      	ldr	r1, [pc, #280]	; (15afc <__ieee754_expf+0x174>)
   159e2:	4411      	add	r1, r2
   159e4:	ed91 7a00 	vldr	s14, [r1]
   159e8:	4945      	ldr	r1, [pc, #276]	; (15b00 <__ieee754_expf+0x178>)
   159ea:	440a      	add	r2, r1
   159ec:	edd2 7a00 	vldr	s15, [r2]
   159f0:	ee30 7a47 	vsub.f32	s14, s0, s14
   159f4:	f1c3 0201 	rsb	r2, r3, #1
   159f8:	1ad2      	subs	r2, r2, r3
   159fa:	ee37 0a67 	vsub.f32	s0, s14, s15
   159fe:	ee20 6a00 	vmul.f32	s12, s0, s0
   15a02:	ed9f 5a40 	vldr	s10, [pc, #256]	; 15b04 <__ieee754_expf+0x17c>
   15a06:	eddf 6a40 	vldr	s13, [pc, #256]	; 15b08 <__ieee754_expf+0x180>
   15a0a:	eee6 6a05 	vfma.f32	s13, s12, s10
   15a0e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 15b0c <__ieee754_expf+0x184>
   15a12:	eea6 5a86 	vfma.f32	s10, s13, s12
   15a16:	eddf 6a3e 	vldr	s13, [pc, #248]	; 15b10 <__ieee754_expf+0x188>
   15a1a:	eee5 6a06 	vfma.f32	s13, s10, s12
   15a1e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 15b14 <__ieee754_expf+0x18c>
   15a22:	eea6 5a86 	vfma.f32	s10, s13, s12
   15a26:	eef0 6a40 	vmov.f32	s13, s0
   15a2a:	eee5 6a46 	vfms.f32	s13, s10, s12
   15a2e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   15a32:	ee20 5a26 	vmul.f32	s10, s0, s13
   15a36:	bb92      	cbnz	r2, 15a9e <__ieee754_expf+0x116>
   15a38:	ee76 6ac6 	vsub.f32	s13, s13, s12
   15a3c:	eec5 7a26 	vdiv.f32	s15, s10, s13
   15a40:	ee37 0ac0 	vsub.f32	s0, s15, s0
   15a44:	ee35 0ac0 	vsub.f32	s0, s11, s0
   15a48:	4770      	bx	lr
   15a4a:	4b33      	ldr	r3, [pc, #204]	; (15b18 <__ieee754_expf+0x190>)
   15a4c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 15b1c <__ieee754_expf+0x194>
   15a50:	eddf 6a33 	vldr	s13, [pc, #204]	; 15b20 <__ieee754_expf+0x198>
   15a54:	4413      	add	r3, r2
   15a56:	edd3 7a00 	vldr	s15, [r3]
   15a5a:	eee0 7a07 	vfma.f32	s15, s0, s14
   15a5e:	eeb0 7a40 	vmov.f32	s14, s0
   15a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   15a66:	ee17 2a90 	vmov	r2, s15
   15a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15a6e:	eea7 7ae6 	vfms.f32	s14, s15, s13
   15a72:	eddf 6a2c 	vldr	s13, [pc, #176]	; 15b24 <__ieee754_expf+0x19c>
   15a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
   15a7a:	e7be      	b.n	159fa <__ieee754_expf+0x72>
   15a7c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
   15a80:	d20b      	bcs.n	15a9a <__ieee754_expf+0x112>
   15a82:	eddf 6a1a 	vldr	s13, [pc, #104]	; 15aec <__ieee754_expf+0x164>
   15a86:	ee70 6a26 	vadd.f32	s13, s0, s13
   15a8a:	eef4 6ae5 	vcmpe.f32	s13, s11
   15a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15a92:	dd02      	ble.n	15a9a <__ieee754_expf+0x112>
   15a94:	ee30 0a25 	vadd.f32	s0, s0, s11
   15a98:	4770      	bx	lr
   15a9a:	2200      	movs	r2, #0
   15a9c:	e7af      	b.n	159fe <__ieee754_expf+0x76>
   15a9e:	ee76 6a66 	vsub.f32	s13, s12, s13
   15aa2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
   15aa6:	ee85 0a26 	vdiv.f32	s0, s10, s13
   15aaa:	bfb8      	it	lt
   15aac:	3264      	addlt	r2, #100	; 0x64
   15aae:	ee77 7ac0 	vsub.f32	s15, s15, s0
   15ab2:	ee37 0ac7 	vsub.f32	s0, s15, s14
   15ab6:	ee75 7ac0 	vsub.f32	s15, s11, s0
   15aba:	ee17 3a90 	vmov	r3, s15
   15abe:	bfab      	itete	ge
   15ac0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
   15ac4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
   15ac8:	ee00 3a10 	vmovge	s0, r3
   15acc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 15b28 <__ieee754_expf+0x1a0>
   15ad0:	bfbc      	itt	lt
   15ad2:	ee00 3a10 	vmovlt	s0, r3
   15ad6:	ee20 0a27 	vmullt.f32	s0, s0, s15
   15ada:	4770      	bx	lr
   15adc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 15ae4 <__ieee754_expf+0x15c>
   15ae0:	4770      	bx	lr
   15ae2:	bf00      	nop
   15ae4:	00000000 	.word	0x00000000
   15ae8:	42b17217 	.word	0x42b17217
   15aec:	7149f2ca 	.word	0x7149f2ca
   15af0:	42cff1b5 	.word	0x42cff1b5
   15af4:	3eb17218 	.word	0x3eb17218
   15af8:	3f851591 	.word	0x3f851591
   15afc:	000363ec 	.word	0x000363ec
   15b00:	000363f4 	.word	0x000363f4
   15b04:	3331bb4c 	.word	0x3331bb4c
   15b08:	b5ddea0e 	.word	0xb5ddea0e
   15b0c:	388ab355 	.word	0x388ab355
   15b10:	bb360b61 	.word	0xbb360b61
   15b14:	3e2aaaab 	.word	0x3e2aaaab
   15b18:	000363e4 	.word	0x000363e4
   15b1c:	3fb8aa3b 	.word	0x3fb8aa3b
   15b20:	3f317180 	.word	0x3f317180
   15b24:	3717f7d1 	.word	0x3717f7d1
   15b28:	0d800000 	.word	0x0d800000

00015b2c <rint>:
   15b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15b2e:	ec51 0b10 	vmov	r0, r1, d0
   15b32:	f3c1 520a 	ubfx	r2, r1, #20, #11
   15b36:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
   15b3a:	2d13      	cmp	r5, #19
   15b3c:	ee10 3a10 	vmov	r3, s0
   15b40:	460c      	mov	r4, r1
   15b42:	ea4f 76d1 	mov.w	r6, r1, lsr #31
   15b46:	dc5b      	bgt.n	15c00 <rint+0xd4>
   15b48:	2d00      	cmp	r5, #0
   15b4a:	da2d      	bge.n	15ba8 <rint+0x7c>
   15b4c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   15b50:	4302      	orrs	r2, r0
   15b52:	d025      	beq.n	15ba0 <rint+0x74>
   15b54:	f3c1 0213 	ubfx	r2, r1, #0, #20
   15b58:	4302      	orrs	r2, r0
   15b5a:	4253      	negs	r3, r2
   15b5c:	4313      	orrs	r3, r2
   15b5e:	0b1b      	lsrs	r3, r3, #12
   15b60:	0c4a      	lsrs	r2, r1, #17
   15b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   15b66:	0452      	lsls	r2, r2, #17
   15b68:	ea43 0102 	orr.w	r1, r3, r2
   15b6c:	460b      	mov	r3, r1
   15b6e:	4934      	ldr	r1, [pc, #208]	; (15c40 <rint+0x114>)
   15b70:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
   15b74:	e9d6 6700 	ldrd	r6, r7, [r6]
   15b78:	4602      	mov	r2, r0
   15b7a:	4639      	mov	r1, r7
   15b7c:	4630      	mov	r0, r6
   15b7e:	f7ea fb15 	bl	1ac <__adddf3>
   15b82:	e9cd 0100 	strd	r0, r1, [sp]
   15b86:	463b      	mov	r3, r7
   15b88:	e9dd 0100 	ldrd	r0, r1, [sp]
   15b8c:	4632      	mov	r2, r6
   15b8e:	f7ea fb0b 	bl	1a8 <__aeabi_dsub>
   15b92:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   15b96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   15b9a:	ea43 0704 	orr.w	r7, r3, r4
   15b9e:	4639      	mov	r1, r7
   15ba0:	ec41 0b10 	vmov	d0, r0, r1
   15ba4:	b003      	add	sp, #12
   15ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ba8:	4a26      	ldr	r2, [pc, #152]	; (15c44 <rint+0x118>)
   15baa:	412a      	asrs	r2, r5
   15bac:	ea01 0702 	and.w	r7, r1, r2
   15bb0:	4307      	orrs	r7, r0
   15bb2:	d0f5      	beq.n	15ba0 <rint+0x74>
   15bb4:	0851      	lsrs	r1, r2, #1
   15bb6:	ea04 0252 	and.w	r2, r4, r2, lsr #1
   15bba:	4313      	orrs	r3, r2
   15bbc:	d00c      	beq.n	15bd8 <rint+0xac>
   15bbe:	ea24 0201 	bic.w	r2, r4, r1
   15bc2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   15bc6:	2d13      	cmp	r5, #19
   15bc8:	fa44 f505 	asr.w	r5, r4, r5
   15bcc:	bf0c      	ite	eq
   15bce:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   15bd2:	2300      	movne	r3, #0
   15bd4:	ea42 0405 	orr.w	r4, r2, r5
   15bd8:	4919      	ldr	r1, [pc, #100]	; (15c40 <rint+0x114>)
   15bda:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
   15bde:	461a      	mov	r2, r3
   15be0:	4623      	mov	r3, r4
   15be2:	e9d6 4500 	ldrd	r4, r5, [r6]
   15be6:	4620      	mov	r0, r4
   15be8:	4629      	mov	r1, r5
   15bea:	f7ea fadf 	bl	1ac <__adddf3>
   15bee:	e9cd 0100 	strd	r0, r1, [sp]
   15bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
   15bf6:	4622      	mov	r2, r4
   15bf8:	462b      	mov	r3, r5
   15bfa:	f7ea fad5 	bl	1a8 <__aeabi_dsub>
   15bfe:	e7cf      	b.n	15ba0 <rint+0x74>
   15c00:	2d33      	cmp	r5, #51	; 0x33
   15c02:	dd08      	ble.n	15c16 <rint+0xea>
   15c04:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   15c08:	d1ca      	bne.n	15ba0 <rint+0x74>
   15c0a:	ee10 2a10 	vmov	r2, s0
   15c0e:	460b      	mov	r3, r1
   15c10:	f7ea facc 	bl	1ac <__adddf3>
   15c14:	e7c4      	b.n	15ba0 <rint+0x74>
   15c16:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   15c1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15c1e:	40d5      	lsrs	r5, r2
   15c20:	4228      	tst	r0, r5
   15c22:	d0bd      	beq.n	15ba0 <rint+0x74>
   15c24:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
   15c28:	ea4f 0155 	mov.w	r1, r5, lsr #1
   15c2c:	bf1f      	itttt	ne
   15c2e:	ea23 0101 	bicne.w	r1, r3, r1
   15c32:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
   15c36:	fa43 f202 	asrne.w	r2, r3, r2
   15c3a:	ea41 0302 	orrne.w	r3, r1, r2
   15c3e:	e7cb      	b.n	15bd8 <rint+0xac>
   15c40:	0001d3c8 	.word	0x0001d3c8
   15c44:	000fffff 	.word	0x000fffff

00015c48 <__assert_func>:
   15c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   15c4a:	4614      	mov	r4, r2
   15c4c:	461a      	mov	r2, r3
   15c4e:	4b09      	ldr	r3, [pc, #36]	; (15c74 <__assert_func+0x2c>)
   15c50:	681b      	ldr	r3, [r3, #0]
   15c52:	4605      	mov	r5, r0
   15c54:	68d8      	ldr	r0, [r3, #12]
   15c56:	b14c      	cbz	r4, 15c6c <__assert_func+0x24>
   15c58:	4b07      	ldr	r3, [pc, #28]	; (15c78 <__assert_func+0x30>)
   15c5a:	9100      	str	r1, [sp, #0]
   15c5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   15c60:	4906      	ldr	r1, [pc, #24]	; (15c7c <__assert_func+0x34>)
   15c62:	462b      	mov	r3, r5
   15c64:	f000 f816 	bl	15c94 <fiprintf>
   15c68:	f006 f833 	bl	1bcd2 <abort>
   15c6c:	4b04      	ldr	r3, [pc, #16]	; (15c80 <__assert_func+0x38>)
   15c6e:	461c      	mov	r4, r3
   15c70:	e7f3      	b.n	15c5a <__assert_func+0x12>
   15c72:	bf00      	nop
   15c74:	20000358 	.word	0x20000358
   15c78:	0003ed33 	.word	0x0003ed33
   15c7c:	0003ed40 	.word	0x0003ed40
   15c80:	0003d162 	.word	0x0003d162

00015c84 <calloc>:
   15c84:	4b02      	ldr	r3, [pc, #8]	; (15c90 <calloc+0xc>)
   15c86:	460a      	mov	r2, r1
   15c88:	4601      	mov	r1, r0
   15c8a:	6818      	ldr	r0, [r3, #0]
   15c8c:	f006 b86b 	b.w	1bd66 <_calloc_r>
   15c90:	20000358 	.word	0x20000358

00015c94 <fiprintf>:
   15c94:	b40e      	push	{r1, r2, r3}
   15c96:	b503      	push	{r0, r1, lr}
   15c98:	4601      	mov	r1, r0
   15c9a:	ab03      	add	r3, sp, #12
   15c9c:	4805      	ldr	r0, [pc, #20]	; (15cb4 <fiprintf+0x20>)
   15c9e:	f853 2b04 	ldr.w	r2, [r3], #4
   15ca2:	6800      	ldr	r0, [r0, #0]
   15ca4:	9301      	str	r3, [sp, #4]
   15ca6:	f000 f8bd 	bl	15e24 <_vfiprintf_r>
   15caa:	b002      	add	sp, #8
   15cac:	f85d eb04 	ldr.w	lr, [sp], #4
   15cb0:	b003      	add	sp, #12
   15cb2:	4770      	bx	lr
   15cb4:	20000358 	.word	0x20000358

00015cb8 <malloc>:
   15cb8:	4b02      	ldr	r3, [pc, #8]	; (15cc4 <malloc+0xc>)
   15cba:	4601      	mov	r1, r0
   15cbc:	6818      	ldr	r0, [r3, #0]
   15cbe:	f000 b857 	b.w	15d70 <_malloc_r>
   15cc2:	bf00      	nop
   15cc4:	20000358 	.word	0x20000358

00015cc8 <free>:
   15cc8:	4b02      	ldr	r3, [pc, #8]	; (15cd4 <free+0xc>)
   15cca:	4601      	mov	r1, r0
   15ccc:	6818      	ldr	r0, [r3, #0]
   15cce:	f000 b803 	b.w	15cd8 <_free_r>
   15cd2:	bf00      	nop
   15cd4:	20000358 	.word	0x20000358

00015cd8 <_free_r>:
   15cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15cda:	2900      	cmp	r1, #0
   15cdc:	d044      	beq.n	15d68 <_free_r+0x90>
   15cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
   15ce2:	9001      	str	r0, [sp, #4]
   15ce4:	2b00      	cmp	r3, #0
   15ce6:	f1a1 0404 	sub.w	r4, r1, #4
   15cea:	bfb8      	it	lt
   15cec:	18e4      	addlt	r4, r4, r3
   15cee:	f000 fffb 	bl	16ce8 <__malloc_lock>
   15cf2:	4a1e      	ldr	r2, [pc, #120]	; (15d6c <_free_r+0x94>)
   15cf4:	9801      	ldr	r0, [sp, #4]
   15cf6:	6813      	ldr	r3, [r2, #0]
   15cf8:	b933      	cbnz	r3, 15d08 <_free_r+0x30>
   15cfa:	6063      	str	r3, [r4, #4]
   15cfc:	6014      	str	r4, [r2, #0]
   15cfe:	b003      	add	sp, #12
   15d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   15d04:	f000 bff6 	b.w	16cf4 <__malloc_unlock>
   15d08:	42a3      	cmp	r3, r4
   15d0a:	d908      	bls.n	15d1e <_free_r+0x46>
   15d0c:	6825      	ldr	r5, [r4, #0]
   15d0e:	1961      	adds	r1, r4, r5
   15d10:	428b      	cmp	r3, r1
   15d12:	bf01      	itttt	eq
   15d14:	6819      	ldreq	r1, [r3, #0]
   15d16:	685b      	ldreq	r3, [r3, #4]
   15d18:	1949      	addeq	r1, r1, r5
   15d1a:	6021      	streq	r1, [r4, #0]
   15d1c:	e7ed      	b.n	15cfa <_free_r+0x22>
   15d1e:	461a      	mov	r2, r3
   15d20:	685b      	ldr	r3, [r3, #4]
   15d22:	b10b      	cbz	r3, 15d28 <_free_r+0x50>
   15d24:	42a3      	cmp	r3, r4
   15d26:	d9fa      	bls.n	15d1e <_free_r+0x46>
   15d28:	6811      	ldr	r1, [r2, #0]
   15d2a:	1855      	adds	r5, r2, r1
   15d2c:	42a5      	cmp	r5, r4
   15d2e:	d10b      	bne.n	15d48 <_free_r+0x70>
   15d30:	6824      	ldr	r4, [r4, #0]
   15d32:	4421      	add	r1, r4
   15d34:	1854      	adds	r4, r2, r1
   15d36:	42a3      	cmp	r3, r4
   15d38:	6011      	str	r1, [r2, #0]
   15d3a:	d1e0      	bne.n	15cfe <_free_r+0x26>
   15d3c:	681c      	ldr	r4, [r3, #0]
   15d3e:	685b      	ldr	r3, [r3, #4]
   15d40:	6053      	str	r3, [r2, #4]
   15d42:	4421      	add	r1, r4
   15d44:	6011      	str	r1, [r2, #0]
   15d46:	e7da      	b.n	15cfe <_free_r+0x26>
   15d48:	d902      	bls.n	15d50 <_free_r+0x78>
   15d4a:	230c      	movs	r3, #12
   15d4c:	6003      	str	r3, [r0, #0]
   15d4e:	e7d6      	b.n	15cfe <_free_r+0x26>
   15d50:	6825      	ldr	r5, [r4, #0]
   15d52:	1961      	adds	r1, r4, r5
   15d54:	428b      	cmp	r3, r1
   15d56:	bf04      	itt	eq
   15d58:	6819      	ldreq	r1, [r3, #0]
   15d5a:	685b      	ldreq	r3, [r3, #4]
   15d5c:	6063      	str	r3, [r4, #4]
   15d5e:	bf04      	itt	eq
   15d60:	1949      	addeq	r1, r1, r5
   15d62:	6021      	streq	r1, [r4, #0]
   15d64:	6054      	str	r4, [r2, #4]
   15d66:	e7ca      	b.n	15cfe <_free_r+0x26>
   15d68:	b003      	add	sp, #12
   15d6a:	bd30      	pop	{r4, r5, pc}
   15d6c:	200243e0 	.word	0x200243e0

00015d70 <_malloc_r>:
   15d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d72:	1ccd      	adds	r5, r1, #3
   15d74:	f025 0503 	bic.w	r5, r5, #3
   15d78:	3508      	adds	r5, #8
   15d7a:	2d0c      	cmp	r5, #12
   15d7c:	bf38      	it	cc
   15d7e:	250c      	movcc	r5, #12
   15d80:	2d00      	cmp	r5, #0
   15d82:	4606      	mov	r6, r0
   15d84:	db01      	blt.n	15d8a <_malloc_r+0x1a>
   15d86:	42a9      	cmp	r1, r5
   15d88:	d903      	bls.n	15d92 <_malloc_r+0x22>
   15d8a:	230c      	movs	r3, #12
   15d8c:	6033      	str	r3, [r6, #0]
   15d8e:	2000      	movs	r0, #0
   15d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d92:	f000 ffa9 	bl	16ce8 <__malloc_lock>
   15d96:	4921      	ldr	r1, [pc, #132]	; (15e1c <_malloc_r+0xac>)
   15d98:	680a      	ldr	r2, [r1, #0]
   15d9a:	4614      	mov	r4, r2
   15d9c:	b99c      	cbnz	r4, 15dc6 <_malloc_r+0x56>
   15d9e:	4f20      	ldr	r7, [pc, #128]	; (15e20 <_malloc_r+0xb0>)
   15da0:	683b      	ldr	r3, [r7, #0]
   15da2:	b923      	cbnz	r3, 15dae <_malloc_r+0x3e>
   15da4:	4621      	mov	r1, r4
   15da6:	4630      	mov	r0, r6
   15da8:	f000 fce0 	bl	1676c <_sbrk_r>
   15dac:	6038      	str	r0, [r7, #0]
   15dae:	4629      	mov	r1, r5
   15db0:	4630      	mov	r0, r6
   15db2:	f000 fcdb 	bl	1676c <_sbrk_r>
   15db6:	1c43      	adds	r3, r0, #1
   15db8:	d123      	bne.n	15e02 <_malloc_r+0x92>
   15dba:	230c      	movs	r3, #12
   15dbc:	6033      	str	r3, [r6, #0]
   15dbe:	4630      	mov	r0, r6
   15dc0:	f000 ff98 	bl	16cf4 <__malloc_unlock>
   15dc4:	e7e3      	b.n	15d8e <_malloc_r+0x1e>
   15dc6:	6823      	ldr	r3, [r4, #0]
   15dc8:	1b5b      	subs	r3, r3, r5
   15dca:	d417      	bmi.n	15dfc <_malloc_r+0x8c>
   15dcc:	2b0b      	cmp	r3, #11
   15dce:	d903      	bls.n	15dd8 <_malloc_r+0x68>
   15dd0:	6023      	str	r3, [r4, #0]
   15dd2:	441c      	add	r4, r3
   15dd4:	6025      	str	r5, [r4, #0]
   15dd6:	e004      	b.n	15de2 <_malloc_r+0x72>
   15dd8:	6863      	ldr	r3, [r4, #4]
   15dda:	42a2      	cmp	r2, r4
   15ddc:	bf0c      	ite	eq
   15dde:	600b      	streq	r3, [r1, #0]
   15de0:	6053      	strne	r3, [r2, #4]
   15de2:	4630      	mov	r0, r6
   15de4:	f000 ff86 	bl	16cf4 <__malloc_unlock>
   15de8:	f104 000b 	add.w	r0, r4, #11
   15dec:	1d23      	adds	r3, r4, #4
   15dee:	f020 0007 	bic.w	r0, r0, #7
   15df2:	1ac2      	subs	r2, r0, r3
   15df4:	d0cc      	beq.n	15d90 <_malloc_r+0x20>
   15df6:	1a1b      	subs	r3, r3, r0
   15df8:	50a3      	str	r3, [r4, r2]
   15dfa:	e7c9      	b.n	15d90 <_malloc_r+0x20>
   15dfc:	4622      	mov	r2, r4
   15dfe:	6864      	ldr	r4, [r4, #4]
   15e00:	e7cc      	b.n	15d9c <_malloc_r+0x2c>
   15e02:	1cc4      	adds	r4, r0, #3
   15e04:	f024 0403 	bic.w	r4, r4, #3
   15e08:	42a0      	cmp	r0, r4
   15e0a:	d0e3      	beq.n	15dd4 <_malloc_r+0x64>
   15e0c:	1a21      	subs	r1, r4, r0
   15e0e:	4630      	mov	r0, r6
   15e10:	f000 fcac 	bl	1676c <_sbrk_r>
   15e14:	3001      	adds	r0, #1
   15e16:	d1dd      	bne.n	15dd4 <_malloc_r+0x64>
   15e18:	e7cf      	b.n	15dba <_malloc_r+0x4a>
   15e1a:	bf00      	nop
   15e1c:	200243e0 	.word	0x200243e0
   15e20:	200243e4 	.word	0x200243e4

00015e24 <_vfiprintf_r>:
   15e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e28:	460d      	mov	r5, r1
   15e2a:	b09d      	sub	sp, #116	; 0x74
   15e2c:	4614      	mov	r4, r2
   15e2e:	4698      	mov	r8, r3
   15e30:	4606      	mov	r6, r0
   15e32:	b118      	cbz	r0, 15e3c <_vfiprintf_r+0x18>
   15e34:	6983      	ldr	r3, [r0, #24]
   15e36:	b90b      	cbnz	r3, 15e3c <_vfiprintf_r+0x18>
   15e38:	f000 fe94 	bl	16b64 <__sinit>
   15e3c:	4b89      	ldr	r3, [pc, #548]	; (16064 <_vfiprintf_r+0x240>)
   15e3e:	429d      	cmp	r5, r3
   15e40:	d11b      	bne.n	15e7a <_vfiprintf_r+0x56>
   15e42:	6875      	ldr	r5, [r6, #4]
   15e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   15e46:	07d9      	lsls	r1, r3, #31
   15e48:	d405      	bmi.n	15e56 <_vfiprintf_r+0x32>
   15e4a:	89ab      	ldrh	r3, [r5, #12]
   15e4c:	059a      	lsls	r2, r3, #22
   15e4e:	d402      	bmi.n	15e56 <_vfiprintf_r+0x32>
   15e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
   15e52:	f7f3 f9c9 	bl	91e8 <__retarget_lock_acquire_recursive>
   15e56:	89ab      	ldrh	r3, [r5, #12]
   15e58:	071b      	lsls	r3, r3, #28
   15e5a:	d501      	bpl.n	15e60 <_vfiprintf_r+0x3c>
   15e5c:	692b      	ldr	r3, [r5, #16]
   15e5e:	b9eb      	cbnz	r3, 15e9c <_vfiprintf_r+0x78>
   15e60:	4629      	mov	r1, r5
   15e62:	4630      	mov	r0, r6
   15e64:	f000 fd0c 	bl	16880 <__swsetup_r>
   15e68:	b1c0      	cbz	r0, 15e9c <_vfiprintf_r+0x78>
   15e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   15e6c:	07dc      	lsls	r4, r3, #31
   15e6e:	d50e      	bpl.n	15e8e <_vfiprintf_r+0x6a>
   15e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e74:	b01d      	add	sp, #116	; 0x74
   15e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e7a:	4b7b      	ldr	r3, [pc, #492]	; (16068 <_vfiprintf_r+0x244>)
   15e7c:	429d      	cmp	r5, r3
   15e7e:	d101      	bne.n	15e84 <_vfiprintf_r+0x60>
   15e80:	68b5      	ldr	r5, [r6, #8]
   15e82:	e7df      	b.n	15e44 <_vfiprintf_r+0x20>
   15e84:	4b79      	ldr	r3, [pc, #484]	; (1606c <_vfiprintf_r+0x248>)
   15e86:	429d      	cmp	r5, r3
   15e88:	bf08      	it	eq
   15e8a:	68f5      	ldreq	r5, [r6, #12]
   15e8c:	e7da      	b.n	15e44 <_vfiprintf_r+0x20>
   15e8e:	89ab      	ldrh	r3, [r5, #12]
   15e90:	0598      	lsls	r0, r3, #22
   15e92:	d4ed      	bmi.n	15e70 <_vfiprintf_r+0x4c>
   15e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
   15e96:	f7f3 f9c5 	bl	9224 <__retarget_lock_release_recursive>
   15e9a:	e7e9      	b.n	15e70 <_vfiprintf_r+0x4c>
   15e9c:	2300      	movs	r3, #0
   15e9e:	9309      	str	r3, [sp, #36]	; 0x24
   15ea0:	2320      	movs	r3, #32
   15ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   15ea6:	f8cd 800c 	str.w	r8, [sp, #12]
   15eaa:	2330      	movs	r3, #48	; 0x30
   15eac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 16070 <_vfiprintf_r+0x24c>
   15eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   15eb4:	f04f 0901 	mov.w	r9, #1
   15eb8:	4623      	mov	r3, r4
   15eba:	469a      	mov	sl, r3
   15ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
   15ec0:	b10a      	cbz	r2, 15ec6 <_vfiprintf_r+0xa2>
   15ec2:	2a25      	cmp	r2, #37	; 0x25
   15ec4:	d1f9      	bne.n	15eba <_vfiprintf_r+0x96>
   15ec6:	ebba 0b04 	subs.w	fp, sl, r4
   15eca:	d00b      	beq.n	15ee4 <_vfiprintf_r+0xc0>
   15ecc:	465b      	mov	r3, fp
   15ece:	4622      	mov	r2, r4
   15ed0:	4629      	mov	r1, r5
   15ed2:	4630      	mov	r0, r6
   15ed4:	f005 ff6d 	bl	1bdb2 <__sfputs_r>
   15ed8:	3001      	adds	r0, #1
   15eda:	f000 80aa 	beq.w	16032 <_vfiprintf_r+0x20e>
   15ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15ee0:	445a      	add	r2, fp
   15ee2:	9209      	str	r2, [sp, #36]	; 0x24
   15ee4:	f89a 3000 	ldrb.w	r3, [sl]
   15ee8:	2b00      	cmp	r3, #0
   15eea:	f000 80a2 	beq.w	16032 <_vfiprintf_r+0x20e>
   15eee:	2300      	movs	r3, #0
   15ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
   15ef8:	f10a 0a01 	add.w	sl, sl, #1
   15efc:	9304      	str	r3, [sp, #16]
   15efe:	9307      	str	r3, [sp, #28]
   15f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   15f04:	931a      	str	r3, [sp, #104]	; 0x68
   15f06:	4654      	mov	r4, sl
   15f08:	2205      	movs	r2, #5
   15f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
   15f0e:	4858      	ldr	r0, [pc, #352]	; (16070 <_vfiprintf_r+0x24c>)
   15f10:	f7ea f8f6 	bl	100 <memchr>
   15f14:	9a04      	ldr	r2, [sp, #16]
   15f16:	b9d8      	cbnz	r0, 15f50 <_vfiprintf_r+0x12c>
   15f18:	06d1      	lsls	r1, r2, #27
   15f1a:	bf44      	itt	mi
   15f1c:	2320      	movmi	r3, #32
   15f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   15f22:	0713      	lsls	r3, r2, #28
   15f24:	bf44      	itt	mi
   15f26:	232b      	movmi	r3, #43	; 0x2b
   15f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   15f2c:	f89a 3000 	ldrb.w	r3, [sl]
   15f30:	2b2a      	cmp	r3, #42	; 0x2a
   15f32:	d015      	beq.n	15f60 <_vfiprintf_r+0x13c>
   15f34:	9a07      	ldr	r2, [sp, #28]
   15f36:	4654      	mov	r4, sl
   15f38:	2000      	movs	r0, #0
   15f3a:	f04f 0c0a 	mov.w	ip, #10
   15f3e:	4621      	mov	r1, r4
   15f40:	f811 3b01 	ldrb.w	r3, [r1], #1
   15f44:	3b30      	subs	r3, #48	; 0x30
   15f46:	2b09      	cmp	r3, #9
   15f48:	d94e      	bls.n	15fe8 <_vfiprintf_r+0x1c4>
   15f4a:	b1b0      	cbz	r0, 15f7a <_vfiprintf_r+0x156>
   15f4c:	9207      	str	r2, [sp, #28]
   15f4e:	e014      	b.n	15f7a <_vfiprintf_r+0x156>
   15f50:	eba0 0308 	sub.w	r3, r0, r8
   15f54:	fa09 f303 	lsl.w	r3, r9, r3
   15f58:	4313      	orrs	r3, r2
   15f5a:	9304      	str	r3, [sp, #16]
   15f5c:	46a2      	mov	sl, r4
   15f5e:	e7d2      	b.n	15f06 <_vfiprintf_r+0xe2>
   15f60:	9b03      	ldr	r3, [sp, #12]
   15f62:	1d19      	adds	r1, r3, #4
   15f64:	681b      	ldr	r3, [r3, #0]
   15f66:	9103      	str	r1, [sp, #12]
   15f68:	2b00      	cmp	r3, #0
   15f6a:	bfbb      	ittet	lt
   15f6c:	425b      	neglt	r3, r3
   15f6e:	f042 0202 	orrlt.w	r2, r2, #2
   15f72:	9307      	strge	r3, [sp, #28]
   15f74:	9307      	strlt	r3, [sp, #28]
   15f76:	bfb8      	it	lt
   15f78:	9204      	strlt	r2, [sp, #16]
   15f7a:	7823      	ldrb	r3, [r4, #0]
   15f7c:	2b2e      	cmp	r3, #46	; 0x2e
   15f7e:	d10c      	bne.n	15f9a <_vfiprintf_r+0x176>
   15f80:	7863      	ldrb	r3, [r4, #1]
   15f82:	2b2a      	cmp	r3, #42	; 0x2a
   15f84:	d135      	bne.n	15ff2 <_vfiprintf_r+0x1ce>
   15f86:	9b03      	ldr	r3, [sp, #12]
   15f88:	1d1a      	adds	r2, r3, #4
   15f8a:	681b      	ldr	r3, [r3, #0]
   15f8c:	9203      	str	r2, [sp, #12]
   15f8e:	2b00      	cmp	r3, #0
   15f90:	bfb8      	it	lt
   15f92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   15f96:	3402      	adds	r4, #2
   15f98:	9305      	str	r3, [sp, #20]
   15f9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 16080 <_vfiprintf_r+0x25c>
   15f9e:	7821      	ldrb	r1, [r4, #0]
   15fa0:	2203      	movs	r2, #3
   15fa2:	4650      	mov	r0, sl
   15fa4:	f7ea f8ac 	bl	100 <memchr>
   15fa8:	b140      	cbz	r0, 15fbc <_vfiprintf_r+0x198>
   15faa:	2340      	movs	r3, #64	; 0x40
   15fac:	eba0 000a 	sub.w	r0, r0, sl
   15fb0:	fa03 f000 	lsl.w	r0, r3, r0
   15fb4:	9b04      	ldr	r3, [sp, #16]
   15fb6:	4303      	orrs	r3, r0
   15fb8:	3401      	adds	r4, #1
   15fba:	9304      	str	r3, [sp, #16]
   15fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
   15fc0:	482c      	ldr	r0, [pc, #176]	; (16074 <_vfiprintf_r+0x250>)
   15fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   15fc6:	2206      	movs	r2, #6
   15fc8:	f7ea f89a 	bl	100 <memchr>
   15fcc:	2800      	cmp	r0, #0
   15fce:	d03f      	beq.n	16050 <_vfiprintf_r+0x22c>
   15fd0:	4b29      	ldr	r3, [pc, #164]	; (16078 <_vfiprintf_r+0x254>)
   15fd2:	bb1b      	cbnz	r3, 1601c <_vfiprintf_r+0x1f8>
   15fd4:	9b03      	ldr	r3, [sp, #12]
   15fd6:	3307      	adds	r3, #7
   15fd8:	f023 0307 	bic.w	r3, r3, #7
   15fdc:	3308      	adds	r3, #8
   15fde:	9303      	str	r3, [sp, #12]
   15fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15fe2:	443b      	add	r3, r7
   15fe4:	9309      	str	r3, [sp, #36]	; 0x24
   15fe6:	e767      	b.n	15eb8 <_vfiprintf_r+0x94>
   15fe8:	fb0c 3202 	mla	r2, ip, r2, r3
   15fec:	460c      	mov	r4, r1
   15fee:	2001      	movs	r0, #1
   15ff0:	e7a5      	b.n	15f3e <_vfiprintf_r+0x11a>
   15ff2:	2300      	movs	r3, #0
   15ff4:	3401      	adds	r4, #1
   15ff6:	9305      	str	r3, [sp, #20]
   15ff8:	4619      	mov	r1, r3
   15ffa:	f04f 0c0a 	mov.w	ip, #10
   15ffe:	4620      	mov	r0, r4
   16000:	f810 2b01 	ldrb.w	r2, [r0], #1
   16004:	3a30      	subs	r2, #48	; 0x30
   16006:	2a09      	cmp	r2, #9
   16008:	d903      	bls.n	16012 <_vfiprintf_r+0x1ee>
   1600a:	2b00      	cmp	r3, #0
   1600c:	d0c5      	beq.n	15f9a <_vfiprintf_r+0x176>
   1600e:	9105      	str	r1, [sp, #20]
   16010:	e7c3      	b.n	15f9a <_vfiprintf_r+0x176>
   16012:	fb0c 2101 	mla	r1, ip, r1, r2
   16016:	4604      	mov	r4, r0
   16018:	2301      	movs	r3, #1
   1601a:	e7f0      	b.n	15ffe <_vfiprintf_r+0x1da>
   1601c:	ab03      	add	r3, sp, #12
   1601e:	9300      	str	r3, [sp, #0]
   16020:	462a      	mov	r2, r5
   16022:	4b16      	ldr	r3, [pc, #88]	; (1607c <_vfiprintf_r+0x258>)
   16024:	a904      	add	r1, sp, #16
   16026:	4630      	mov	r0, r6
   16028:	f000 f82c 	bl	16084 <_printf_float>
   1602c:	4607      	mov	r7, r0
   1602e:	1c78      	adds	r0, r7, #1
   16030:	d1d6      	bne.n	15fe0 <_vfiprintf_r+0x1bc>
   16032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   16034:	07d9      	lsls	r1, r3, #31
   16036:	d405      	bmi.n	16044 <_vfiprintf_r+0x220>
   16038:	89ab      	ldrh	r3, [r5, #12]
   1603a:	059a      	lsls	r2, r3, #22
   1603c:	d402      	bmi.n	16044 <_vfiprintf_r+0x220>
   1603e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   16040:	f7f3 f8f0 	bl	9224 <__retarget_lock_release_recursive>
   16044:	89ab      	ldrh	r3, [r5, #12]
   16046:	065b      	lsls	r3, r3, #25
   16048:	f53f af12 	bmi.w	15e70 <_vfiprintf_r+0x4c>
   1604c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1604e:	e711      	b.n	15e74 <_vfiprintf_r+0x50>
   16050:	ab03      	add	r3, sp, #12
   16052:	9300      	str	r3, [sp, #0]
   16054:	462a      	mov	r2, r5
   16056:	4b09      	ldr	r3, [pc, #36]	; (1607c <_vfiprintf_r+0x258>)
   16058:	a904      	add	r1, sp, #16
   1605a:	4630      	mov	r0, r6
   1605c:	f000 fa48 	bl	164f0 <_printf_i>
   16060:	e7e4      	b.n	1602c <_vfiprintf_r+0x208>
   16062:	bf00      	nop
   16064:	00036430 	.word	0x00036430
   16068:	00036450 	.word	0x00036450
   1606c:	00036410 	.word	0x00036410
   16070:	0003ee70 	.word	0x0003ee70
   16074:	0003ee7a 	.word	0x0003ee7a
   16078:	00016085 	.word	0x00016085
   1607c:	0001bdb3 	.word	0x0001bdb3
   16080:	0003ee76 	.word	0x0003ee76

00016084 <_printf_float>:
   16084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16088:	ed2d 8b02 	vpush	{d8}
   1608c:	b08d      	sub	sp, #52	; 0x34
   1608e:	460c      	mov	r4, r1
   16090:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   16094:	4616      	mov	r6, r2
   16096:	461f      	mov	r7, r3
   16098:	4605      	mov	r5, r0
   1609a:	f000 fde1 	bl	16c60 <_localeconv_r>
   1609e:	f8d0 a000 	ldr.w	sl, [r0]
   160a2:	4650      	mov	r0, sl
   160a4:	f7ea ff7e 	bl	fa4 <strlen>
   160a8:	2300      	movs	r3, #0
   160aa:	930a      	str	r3, [sp, #40]	; 0x28
   160ac:	6823      	ldr	r3, [r4, #0]
   160ae:	9305      	str	r3, [sp, #20]
   160b0:	f8d8 3000 	ldr.w	r3, [r8]
   160b4:	f894 b018 	ldrb.w	fp, [r4, #24]
   160b8:	3307      	adds	r3, #7
   160ba:	f023 0307 	bic.w	r3, r3, #7
   160be:	f103 0208 	add.w	r2, r3, #8
   160c2:	f8c8 2000 	str.w	r2, [r8]
   160c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   160ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   160ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   160d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   160d6:	9307      	str	r3, [sp, #28]
   160d8:	f8cd 8018 	str.w	r8, [sp, #24]
   160dc:	ee08 0a10 	vmov	s16, r0
   160e0:	4b9f      	ldr	r3, [pc, #636]	; (16360 <_printf_float+0x2dc>)
   160e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   160e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   160ea:	f7ea fda7 	bl	c3c <__aeabi_dcmpun>
   160ee:	bb88      	cbnz	r0, 16154 <_printf_float+0xd0>
   160f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   160f4:	4b9a      	ldr	r3, [pc, #616]	; (16360 <_printf_float+0x2dc>)
   160f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   160fa:	f7ea fc89 	bl	a10 <__aeabi_dcmple>
   160fe:	bb48      	cbnz	r0, 16154 <_printf_float+0xd0>
   16100:	2200      	movs	r2, #0
   16102:	2300      	movs	r3, #0
   16104:	4640      	mov	r0, r8
   16106:	4649      	mov	r1, r9
   16108:	f7ea fc78 	bl	9fc <__aeabi_dcmplt>
   1610c:	b110      	cbz	r0, 16114 <_printf_float+0x90>
   1610e:	232d      	movs	r3, #45	; 0x2d
   16110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   16114:	4b93      	ldr	r3, [pc, #588]	; (16364 <_printf_float+0x2e0>)
   16116:	4894      	ldr	r0, [pc, #592]	; (16368 <_printf_float+0x2e4>)
   16118:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   1611c:	bf94      	ite	ls
   1611e:	4698      	movls	r8, r3
   16120:	4680      	movhi	r8, r0
   16122:	2303      	movs	r3, #3
   16124:	6123      	str	r3, [r4, #16]
   16126:	9b05      	ldr	r3, [sp, #20]
   16128:	f023 0204 	bic.w	r2, r3, #4
   1612c:	6022      	str	r2, [r4, #0]
   1612e:	f04f 0900 	mov.w	r9, #0
   16132:	9700      	str	r7, [sp, #0]
   16134:	4633      	mov	r3, r6
   16136:	aa0b      	add	r2, sp, #44	; 0x2c
   16138:	4621      	mov	r1, r4
   1613a:	4628      	mov	r0, r5
   1613c:	f005 feeb 	bl	1bf16 <_printf_common>
   16140:	3001      	adds	r0, #1
   16142:	f040 8090 	bne.w	16266 <_printf_float+0x1e2>
   16146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1614a:	b00d      	add	sp, #52	; 0x34
   1614c:	ecbd 8b02 	vpop	{d8}
   16150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16154:	4642      	mov	r2, r8
   16156:	464b      	mov	r3, r9
   16158:	4640      	mov	r0, r8
   1615a:	4649      	mov	r1, r9
   1615c:	f7ea fd6e 	bl	c3c <__aeabi_dcmpun>
   16160:	b140      	cbz	r0, 16174 <_printf_float+0xf0>
   16162:	464b      	mov	r3, r9
   16164:	2b00      	cmp	r3, #0
   16166:	bfbc      	itt	lt
   16168:	232d      	movlt	r3, #45	; 0x2d
   1616a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1616e:	487f      	ldr	r0, [pc, #508]	; (1636c <_printf_float+0x2e8>)
   16170:	4b7f      	ldr	r3, [pc, #508]	; (16370 <_printf_float+0x2ec>)
   16172:	e7d1      	b.n	16118 <_printf_float+0x94>
   16174:	6863      	ldr	r3, [r4, #4]
   16176:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   1617a:	9206      	str	r2, [sp, #24]
   1617c:	1c5a      	adds	r2, r3, #1
   1617e:	d13f      	bne.n	16200 <_printf_float+0x17c>
   16180:	2306      	movs	r3, #6
   16182:	6063      	str	r3, [r4, #4]
   16184:	9b05      	ldr	r3, [sp, #20]
   16186:	6861      	ldr	r1, [r4, #4]
   16188:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   1618c:	2300      	movs	r3, #0
   1618e:	9303      	str	r3, [sp, #12]
   16190:	ab0a      	add	r3, sp, #40	; 0x28
   16192:	e9cd b301 	strd	fp, r3, [sp, #4]
   16196:	ab09      	add	r3, sp, #36	; 0x24
   16198:	ec49 8b10 	vmov	d0, r8, r9
   1619c:	9300      	str	r3, [sp, #0]
   1619e:	6022      	str	r2, [r4, #0]
   161a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   161a4:	4628      	mov	r0, r5
   161a6:	f005 fe16 	bl	1bdd6 <__cvt>
   161aa:	9b06      	ldr	r3, [sp, #24]
   161ac:	9909      	ldr	r1, [sp, #36]	; 0x24
   161ae:	2b47      	cmp	r3, #71	; 0x47
   161b0:	4680      	mov	r8, r0
   161b2:	d108      	bne.n	161c6 <_printf_float+0x142>
   161b4:	1cc8      	adds	r0, r1, #3
   161b6:	db02      	blt.n	161be <_printf_float+0x13a>
   161b8:	6863      	ldr	r3, [r4, #4]
   161ba:	4299      	cmp	r1, r3
   161bc:	dd41      	ble.n	16242 <_printf_float+0x1be>
   161be:	f1ab 0b02 	sub.w	fp, fp, #2
   161c2:	fa5f fb8b 	uxtb.w	fp, fp
   161c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   161ca:	d820      	bhi.n	1620e <_printf_float+0x18a>
   161cc:	3901      	subs	r1, #1
   161ce:	465a      	mov	r2, fp
   161d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
   161d4:	9109      	str	r1, [sp, #36]	; 0x24
   161d6:	f005 fe60 	bl	1be9a <__exponent>
   161da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   161dc:	1813      	adds	r3, r2, r0
   161de:	2a01      	cmp	r2, #1
   161e0:	4681      	mov	r9, r0
   161e2:	6123      	str	r3, [r4, #16]
   161e4:	dc02      	bgt.n	161ec <_printf_float+0x168>
   161e6:	6822      	ldr	r2, [r4, #0]
   161e8:	07d2      	lsls	r2, r2, #31
   161ea:	d501      	bpl.n	161f0 <_printf_float+0x16c>
   161ec:	3301      	adds	r3, #1
   161ee:	6123      	str	r3, [r4, #16]
   161f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   161f4:	2b00      	cmp	r3, #0
   161f6:	d09c      	beq.n	16132 <_printf_float+0xae>
   161f8:	232d      	movs	r3, #45	; 0x2d
   161fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   161fe:	e798      	b.n	16132 <_printf_float+0xae>
   16200:	9a06      	ldr	r2, [sp, #24]
   16202:	2a47      	cmp	r2, #71	; 0x47
   16204:	d1be      	bne.n	16184 <_printf_float+0x100>
   16206:	2b00      	cmp	r3, #0
   16208:	d1bc      	bne.n	16184 <_printf_float+0x100>
   1620a:	2301      	movs	r3, #1
   1620c:	e7b9      	b.n	16182 <_printf_float+0xfe>
   1620e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   16212:	d118      	bne.n	16246 <_printf_float+0x1c2>
   16214:	2900      	cmp	r1, #0
   16216:	6863      	ldr	r3, [r4, #4]
   16218:	dd0b      	ble.n	16232 <_printf_float+0x1ae>
   1621a:	6121      	str	r1, [r4, #16]
   1621c:	b913      	cbnz	r3, 16224 <_printf_float+0x1a0>
   1621e:	6822      	ldr	r2, [r4, #0]
   16220:	07d0      	lsls	r0, r2, #31
   16222:	d502      	bpl.n	1622a <_printf_float+0x1a6>
   16224:	3301      	adds	r3, #1
   16226:	440b      	add	r3, r1
   16228:	6123      	str	r3, [r4, #16]
   1622a:	65a1      	str	r1, [r4, #88]	; 0x58
   1622c:	f04f 0900 	mov.w	r9, #0
   16230:	e7de      	b.n	161f0 <_printf_float+0x16c>
   16232:	b913      	cbnz	r3, 1623a <_printf_float+0x1b6>
   16234:	6822      	ldr	r2, [r4, #0]
   16236:	07d2      	lsls	r2, r2, #31
   16238:	d501      	bpl.n	1623e <_printf_float+0x1ba>
   1623a:	3302      	adds	r3, #2
   1623c:	e7f4      	b.n	16228 <_printf_float+0x1a4>
   1623e:	2301      	movs	r3, #1
   16240:	e7f2      	b.n	16228 <_printf_float+0x1a4>
   16242:	f04f 0b67 	mov.w	fp, #103	; 0x67
   16246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16248:	4299      	cmp	r1, r3
   1624a:	db05      	blt.n	16258 <_printf_float+0x1d4>
   1624c:	6823      	ldr	r3, [r4, #0]
   1624e:	6121      	str	r1, [r4, #16]
   16250:	07d8      	lsls	r0, r3, #31
   16252:	d5ea      	bpl.n	1622a <_printf_float+0x1a6>
   16254:	1c4b      	adds	r3, r1, #1
   16256:	e7e7      	b.n	16228 <_printf_float+0x1a4>
   16258:	2900      	cmp	r1, #0
   1625a:	bfd4      	ite	le
   1625c:	f1c1 0202 	rsble	r2, r1, #2
   16260:	2201      	movgt	r2, #1
   16262:	4413      	add	r3, r2
   16264:	e7e0      	b.n	16228 <_printf_float+0x1a4>
   16266:	6823      	ldr	r3, [r4, #0]
   16268:	055a      	lsls	r2, r3, #21
   1626a:	d407      	bmi.n	1627c <_printf_float+0x1f8>
   1626c:	6923      	ldr	r3, [r4, #16]
   1626e:	4642      	mov	r2, r8
   16270:	4631      	mov	r1, r6
   16272:	4628      	mov	r0, r5
   16274:	47b8      	blx	r7
   16276:	3001      	adds	r0, #1
   16278:	d12c      	bne.n	162d4 <_printf_float+0x250>
   1627a:	e764      	b.n	16146 <_printf_float+0xc2>
   1627c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   16280:	f240 80e0 	bls.w	16444 <_printf_float+0x3c0>
   16284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   16288:	2200      	movs	r2, #0
   1628a:	2300      	movs	r3, #0
   1628c:	f7ea fbac 	bl	9e8 <__aeabi_dcmpeq>
   16290:	2800      	cmp	r0, #0
   16292:	d034      	beq.n	162fe <_printf_float+0x27a>
   16294:	4a37      	ldr	r2, [pc, #220]	; (16374 <_printf_float+0x2f0>)
   16296:	2301      	movs	r3, #1
   16298:	4631      	mov	r1, r6
   1629a:	4628      	mov	r0, r5
   1629c:	47b8      	blx	r7
   1629e:	3001      	adds	r0, #1
   162a0:	f43f af51 	beq.w	16146 <_printf_float+0xc2>
   162a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   162a8:	429a      	cmp	r2, r3
   162aa:	db02      	blt.n	162b2 <_printf_float+0x22e>
   162ac:	6823      	ldr	r3, [r4, #0]
   162ae:	07d8      	lsls	r0, r3, #31
   162b0:	d510      	bpl.n	162d4 <_printf_float+0x250>
   162b2:	ee18 3a10 	vmov	r3, s16
   162b6:	4652      	mov	r2, sl
   162b8:	4631      	mov	r1, r6
   162ba:	4628      	mov	r0, r5
   162bc:	47b8      	blx	r7
   162be:	3001      	adds	r0, #1
   162c0:	f43f af41 	beq.w	16146 <_printf_float+0xc2>
   162c4:	f04f 0800 	mov.w	r8, #0
   162c8:	f104 091a 	add.w	r9, r4, #26
   162cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   162ce:	3b01      	subs	r3, #1
   162d0:	4543      	cmp	r3, r8
   162d2:	dc09      	bgt.n	162e8 <_printf_float+0x264>
   162d4:	6823      	ldr	r3, [r4, #0]
   162d6:	079b      	lsls	r3, r3, #30
   162d8:	f100 8105 	bmi.w	164e6 <_printf_float+0x462>
   162dc:	68e0      	ldr	r0, [r4, #12]
   162de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   162e0:	4298      	cmp	r0, r3
   162e2:	bfb8      	it	lt
   162e4:	4618      	movlt	r0, r3
   162e6:	e730      	b.n	1614a <_printf_float+0xc6>
   162e8:	2301      	movs	r3, #1
   162ea:	464a      	mov	r2, r9
   162ec:	4631      	mov	r1, r6
   162ee:	4628      	mov	r0, r5
   162f0:	47b8      	blx	r7
   162f2:	3001      	adds	r0, #1
   162f4:	f43f af27 	beq.w	16146 <_printf_float+0xc2>
   162f8:	f108 0801 	add.w	r8, r8, #1
   162fc:	e7e6      	b.n	162cc <_printf_float+0x248>
   162fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16300:	2b00      	cmp	r3, #0
   16302:	dc39      	bgt.n	16378 <_printf_float+0x2f4>
   16304:	4a1b      	ldr	r2, [pc, #108]	; (16374 <_printf_float+0x2f0>)
   16306:	2301      	movs	r3, #1
   16308:	4631      	mov	r1, r6
   1630a:	4628      	mov	r0, r5
   1630c:	47b8      	blx	r7
   1630e:	3001      	adds	r0, #1
   16310:	f43f af19 	beq.w	16146 <_printf_float+0xc2>
   16314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   16318:	4313      	orrs	r3, r2
   1631a:	d102      	bne.n	16322 <_printf_float+0x29e>
   1631c:	6823      	ldr	r3, [r4, #0]
   1631e:	07d9      	lsls	r1, r3, #31
   16320:	d5d8      	bpl.n	162d4 <_printf_float+0x250>
   16322:	ee18 3a10 	vmov	r3, s16
   16326:	4652      	mov	r2, sl
   16328:	4631      	mov	r1, r6
   1632a:	4628      	mov	r0, r5
   1632c:	47b8      	blx	r7
   1632e:	3001      	adds	r0, #1
   16330:	f43f af09 	beq.w	16146 <_printf_float+0xc2>
   16334:	f04f 0900 	mov.w	r9, #0
   16338:	f104 0a1a 	add.w	sl, r4, #26
   1633c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1633e:	425b      	negs	r3, r3
   16340:	454b      	cmp	r3, r9
   16342:	dc01      	bgt.n	16348 <_printf_float+0x2c4>
   16344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16346:	e792      	b.n	1626e <_printf_float+0x1ea>
   16348:	2301      	movs	r3, #1
   1634a:	4652      	mov	r2, sl
   1634c:	4631      	mov	r1, r6
   1634e:	4628      	mov	r0, r5
   16350:	47b8      	blx	r7
   16352:	3001      	adds	r0, #1
   16354:	f43f aef7 	beq.w	16146 <_printf_float+0xc2>
   16358:	f109 0901 	add.w	r9, r9, #1
   1635c:	e7ee      	b.n	1633c <_printf_float+0x2b8>
   1635e:	bf00      	nop
   16360:	7fefffff 	.word	0x7fefffff
   16364:	0003ee81 	.word	0x0003ee81
   16368:	0003c1a6 	.word	0x0003c1a6
   1636c:	0003ee89 	.word	0x0003ee89
   16370:	0003ee85 	.word	0x0003ee85
   16374:	0003d09f 	.word	0x0003d09f
   16378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1637a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1637c:	429a      	cmp	r2, r3
   1637e:	bfa8      	it	ge
   16380:	461a      	movge	r2, r3
   16382:	2a00      	cmp	r2, #0
   16384:	4691      	mov	r9, r2
   16386:	dc37      	bgt.n	163f8 <_printf_float+0x374>
   16388:	f04f 0b00 	mov.w	fp, #0
   1638c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   16390:	f104 021a 	add.w	r2, r4, #26
   16394:	6da3      	ldr	r3, [r4, #88]	; 0x58
   16396:	9305      	str	r3, [sp, #20]
   16398:	eba3 0309 	sub.w	r3, r3, r9
   1639c:	455b      	cmp	r3, fp
   1639e:	dc33      	bgt.n	16408 <_printf_float+0x384>
   163a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   163a4:	429a      	cmp	r2, r3
   163a6:	db3b      	blt.n	16420 <_printf_float+0x39c>
   163a8:	6823      	ldr	r3, [r4, #0]
   163aa:	07da      	lsls	r2, r3, #31
   163ac:	d438      	bmi.n	16420 <_printf_float+0x39c>
   163ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   163b0:	9a05      	ldr	r2, [sp, #20]
   163b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   163b4:	1a9a      	subs	r2, r3, r2
   163b6:	eba3 0901 	sub.w	r9, r3, r1
   163ba:	4591      	cmp	r9, r2
   163bc:	bfa8      	it	ge
   163be:	4691      	movge	r9, r2
   163c0:	f1b9 0f00 	cmp.w	r9, #0
   163c4:	dc35      	bgt.n	16432 <_printf_float+0x3ae>
   163c6:	f04f 0800 	mov.w	r8, #0
   163ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   163ce:	f104 0a1a 	add.w	sl, r4, #26
   163d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   163d6:	1a9b      	subs	r3, r3, r2
   163d8:	eba3 0309 	sub.w	r3, r3, r9
   163dc:	4543      	cmp	r3, r8
   163de:	f77f af79 	ble.w	162d4 <_printf_float+0x250>
   163e2:	2301      	movs	r3, #1
   163e4:	4652      	mov	r2, sl
   163e6:	4631      	mov	r1, r6
   163e8:	4628      	mov	r0, r5
   163ea:	47b8      	blx	r7
   163ec:	3001      	adds	r0, #1
   163ee:	f43f aeaa 	beq.w	16146 <_printf_float+0xc2>
   163f2:	f108 0801 	add.w	r8, r8, #1
   163f6:	e7ec      	b.n	163d2 <_printf_float+0x34e>
   163f8:	4613      	mov	r3, r2
   163fa:	4631      	mov	r1, r6
   163fc:	4642      	mov	r2, r8
   163fe:	4628      	mov	r0, r5
   16400:	47b8      	blx	r7
   16402:	3001      	adds	r0, #1
   16404:	d1c0      	bne.n	16388 <_printf_float+0x304>
   16406:	e69e      	b.n	16146 <_printf_float+0xc2>
   16408:	2301      	movs	r3, #1
   1640a:	4631      	mov	r1, r6
   1640c:	4628      	mov	r0, r5
   1640e:	9205      	str	r2, [sp, #20]
   16410:	47b8      	blx	r7
   16412:	3001      	adds	r0, #1
   16414:	f43f ae97 	beq.w	16146 <_printf_float+0xc2>
   16418:	9a05      	ldr	r2, [sp, #20]
   1641a:	f10b 0b01 	add.w	fp, fp, #1
   1641e:	e7b9      	b.n	16394 <_printf_float+0x310>
   16420:	ee18 3a10 	vmov	r3, s16
   16424:	4652      	mov	r2, sl
   16426:	4631      	mov	r1, r6
   16428:	4628      	mov	r0, r5
   1642a:	47b8      	blx	r7
   1642c:	3001      	adds	r0, #1
   1642e:	d1be      	bne.n	163ae <_printf_float+0x32a>
   16430:	e689      	b.n	16146 <_printf_float+0xc2>
   16432:	9a05      	ldr	r2, [sp, #20]
   16434:	464b      	mov	r3, r9
   16436:	4442      	add	r2, r8
   16438:	4631      	mov	r1, r6
   1643a:	4628      	mov	r0, r5
   1643c:	47b8      	blx	r7
   1643e:	3001      	adds	r0, #1
   16440:	d1c1      	bne.n	163c6 <_printf_float+0x342>
   16442:	e680      	b.n	16146 <_printf_float+0xc2>
   16444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16446:	2a01      	cmp	r2, #1
   16448:	dc01      	bgt.n	1644e <_printf_float+0x3ca>
   1644a:	07db      	lsls	r3, r3, #31
   1644c:	d538      	bpl.n	164c0 <_printf_float+0x43c>
   1644e:	2301      	movs	r3, #1
   16450:	4642      	mov	r2, r8
   16452:	4631      	mov	r1, r6
   16454:	4628      	mov	r0, r5
   16456:	47b8      	blx	r7
   16458:	3001      	adds	r0, #1
   1645a:	f43f ae74 	beq.w	16146 <_printf_float+0xc2>
   1645e:	ee18 3a10 	vmov	r3, s16
   16462:	4652      	mov	r2, sl
   16464:	4631      	mov	r1, r6
   16466:	4628      	mov	r0, r5
   16468:	47b8      	blx	r7
   1646a:	3001      	adds	r0, #1
   1646c:	f43f ae6b 	beq.w	16146 <_printf_float+0xc2>
   16470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   16474:	2200      	movs	r2, #0
   16476:	2300      	movs	r3, #0
   16478:	f7ea fab6 	bl	9e8 <__aeabi_dcmpeq>
   1647c:	b9d8      	cbnz	r0, 164b6 <_printf_float+0x432>
   1647e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16480:	f108 0201 	add.w	r2, r8, #1
   16484:	3b01      	subs	r3, #1
   16486:	4631      	mov	r1, r6
   16488:	4628      	mov	r0, r5
   1648a:	47b8      	blx	r7
   1648c:	3001      	adds	r0, #1
   1648e:	d10e      	bne.n	164ae <_printf_float+0x42a>
   16490:	e659      	b.n	16146 <_printf_float+0xc2>
   16492:	2301      	movs	r3, #1
   16494:	4652      	mov	r2, sl
   16496:	4631      	mov	r1, r6
   16498:	4628      	mov	r0, r5
   1649a:	47b8      	blx	r7
   1649c:	3001      	adds	r0, #1
   1649e:	f43f ae52 	beq.w	16146 <_printf_float+0xc2>
   164a2:	f108 0801 	add.w	r8, r8, #1
   164a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164a8:	3b01      	subs	r3, #1
   164aa:	4543      	cmp	r3, r8
   164ac:	dcf1      	bgt.n	16492 <_printf_float+0x40e>
   164ae:	464b      	mov	r3, r9
   164b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   164b4:	e6dc      	b.n	16270 <_printf_float+0x1ec>
   164b6:	f04f 0800 	mov.w	r8, #0
   164ba:	f104 0a1a 	add.w	sl, r4, #26
   164be:	e7f2      	b.n	164a6 <_printf_float+0x422>
   164c0:	2301      	movs	r3, #1
   164c2:	4642      	mov	r2, r8
   164c4:	e7df      	b.n	16486 <_printf_float+0x402>
   164c6:	2301      	movs	r3, #1
   164c8:	464a      	mov	r2, r9
   164ca:	4631      	mov	r1, r6
   164cc:	4628      	mov	r0, r5
   164ce:	47b8      	blx	r7
   164d0:	3001      	adds	r0, #1
   164d2:	f43f ae38 	beq.w	16146 <_printf_float+0xc2>
   164d6:	f108 0801 	add.w	r8, r8, #1
   164da:	68e3      	ldr	r3, [r4, #12]
   164dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   164de:	1a5b      	subs	r3, r3, r1
   164e0:	4543      	cmp	r3, r8
   164e2:	dcf0      	bgt.n	164c6 <_printf_float+0x442>
   164e4:	e6fa      	b.n	162dc <_printf_float+0x258>
   164e6:	f04f 0800 	mov.w	r8, #0
   164ea:	f104 0919 	add.w	r9, r4, #25
   164ee:	e7f4      	b.n	164da <_printf_float+0x456>

000164f0 <_printf_i>:
   164f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   164f4:	7e0f      	ldrb	r7, [r1, #24]
   164f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   164f8:	2f78      	cmp	r7, #120	; 0x78
   164fa:	4691      	mov	r9, r2
   164fc:	4680      	mov	r8, r0
   164fe:	460c      	mov	r4, r1
   16500:	469a      	mov	sl, r3
   16502:	f101 0243 	add.w	r2, r1, #67	; 0x43
   16506:	d807      	bhi.n	16518 <_printf_i+0x28>
   16508:	2f62      	cmp	r7, #98	; 0x62
   1650a:	d80a      	bhi.n	16522 <_printf_i+0x32>
   1650c:	2f00      	cmp	r7, #0
   1650e:	f000 80d8 	beq.w	166c2 <_printf_i+0x1d2>
   16512:	2f58      	cmp	r7, #88	; 0x58
   16514:	f000 80a3 	beq.w	1665e <_printf_i+0x16e>
   16518:	f104 0542 	add.w	r5, r4, #66	; 0x42
   1651c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   16520:	e03a      	b.n	16598 <_printf_i+0xa8>
   16522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   16526:	2b15      	cmp	r3, #21
   16528:	d8f6      	bhi.n	16518 <_printf_i+0x28>
   1652a:	a101      	add	r1, pc, #4	; (adr r1, 16530 <_printf_i+0x40>)
   1652c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   16530:	00016589 	.word	0x00016589
   16534:	0001659d 	.word	0x0001659d
   16538:	00016519 	.word	0x00016519
   1653c:	00016519 	.word	0x00016519
   16540:	00016519 	.word	0x00016519
   16544:	00016519 	.word	0x00016519
   16548:	0001659d 	.word	0x0001659d
   1654c:	00016519 	.word	0x00016519
   16550:	00016519 	.word	0x00016519
   16554:	00016519 	.word	0x00016519
   16558:	00016519 	.word	0x00016519
   1655c:	000166a9 	.word	0x000166a9
   16560:	000165cd 	.word	0x000165cd
   16564:	0001668b 	.word	0x0001668b
   16568:	00016519 	.word	0x00016519
   1656c:	00016519 	.word	0x00016519
   16570:	000166cb 	.word	0x000166cb
   16574:	00016519 	.word	0x00016519
   16578:	000165cd 	.word	0x000165cd
   1657c:	00016519 	.word	0x00016519
   16580:	00016519 	.word	0x00016519
   16584:	00016693 	.word	0x00016693
   16588:	682b      	ldr	r3, [r5, #0]
   1658a:	1d1a      	adds	r2, r3, #4
   1658c:	681b      	ldr	r3, [r3, #0]
   1658e:	602a      	str	r2, [r5, #0]
   16590:	f104 0542 	add.w	r5, r4, #66	; 0x42
   16594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   16598:	2301      	movs	r3, #1
   1659a:	e0a3      	b.n	166e4 <_printf_i+0x1f4>
   1659c:	6820      	ldr	r0, [r4, #0]
   1659e:	6829      	ldr	r1, [r5, #0]
   165a0:	0606      	lsls	r6, r0, #24
   165a2:	f101 0304 	add.w	r3, r1, #4
   165a6:	d50a      	bpl.n	165be <_printf_i+0xce>
   165a8:	680e      	ldr	r6, [r1, #0]
   165aa:	602b      	str	r3, [r5, #0]
   165ac:	2e00      	cmp	r6, #0
   165ae:	da03      	bge.n	165b8 <_printf_i+0xc8>
   165b0:	232d      	movs	r3, #45	; 0x2d
   165b2:	4276      	negs	r6, r6
   165b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   165b8:	485e      	ldr	r0, [pc, #376]	; (16734 <_printf_i+0x244>)
   165ba:	230a      	movs	r3, #10
   165bc:	e019      	b.n	165f2 <_printf_i+0x102>
   165be:	680e      	ldr	r6, [r1, #0]
   165c0:	602b      	str	r3, [r5, #0]
   165c2:	f010 0f40 	tst.w	r0, #64	; 0x40
   165c6:	bf18      	it	ne
   165c8:	b236      	sxthne	r6, r6
   165ca:	e7ef      	b.n	165ac <_printf_i+0xbc>
   165cc:	682b      	ldr	r3, [r5, #0]
   165ce:	6820      	ldr	r0, [r4, #0]
   165d0:	1d19      	adds	r1, r3, #4
   165d2:	6029      	str	r1, [r5, #0]
   165d4:	0601      	lsls	r1, r0, #24
   165d6:	d501      	bpl.n	165dc <_printf_i+0xec>
   165d8:	681e      	ldr	r6, [r3, #0]
   165da:	e002      	b.n	165e2 <_printf_i+0xf2>
   165dc:	0646      	lsls	r6, r0, #25
   165de:	d5fb      	bpl.n	165d8 <_printf_i+0xe8>
   165e0:	881e      	ldrh	r6, [r3, #0]
   165e2:	4854      	ldr	r0, [pc, #336]	; (16734 <_printf_i+0x244>)
   165e4:	2f6f      	cmp	r7, #111	; 0x6f
   165e6:	bf0c      	ite	eq
   165e8:	2308      	moveq	r3, #8
   165ea:	230a      	movne	r3, #10
   165ec:	2100      	movs	r1, #0
   165ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   165f2:	6865      	ldr	r5, [r4, #4]
   165f4:	60a5      	str	r5, [r4, #8]
   165f6:	2d00      	cmp	r5, #0
   165f8:	bfa2      	ittt	ge
   165fa:	6821      	ldrge	r1, [r4, #0]
   165fc:	f021 0104 	bicge.w	r1, r1, #4
   16600:	6021      	strge	r1, [r4, #0]
   16602:	b90e      	cbnz	r6, 16608 <_printf_i+0x118>
   16604:	2d00      	cmp	r5, #0
   16606:	d04d      	beq.n	166a4 <_printf_i+0x1b4>
   16608:	4615      	mov	r5, r2
   1660a:	fbb6 f1f3 	udiv	r1, r6, r3
   1660e:	fb03 6711 	mls	r7, r3, r1, r6
   16612:	5dc7      	ldrb	r7, [r0, r7]
   16614:	f805 7d01 	strb.w	r7, [r5, #-1]!
   16618:	4637      	mov	r7, r6
   1661a:	42bb      	cmp	r3, r7
   1661c:	460e      	mov	r6, r1
   1661e:	d9f4      	bls.n	1660a <_printf_i+0x11a>
   16620:	2b08      	cmp	r3, #8
   16622:	d10b      	bne.n	1663c <_printf_i+0x14c>
   16624:	6823      	ldr	r3, [r4, #0]
   16626:	07de      	lsls	r6, r3, #31
   16628:	d508      	bpl.n	1663c <_printf_i+0x14c>
   1662a:	6923      	ldr	r3, [r4, #16]
   1662c:	6861      	ldr	r1, [r4, #4]
   1662e:	4299      	cmp	r1, r3
   16630:	bfde      	ittt	le
   16632:	2330      	movle	r3, #48	; 0x30
   16634:	f805 3c01 	strble.w	r3, [r5, #-1]
   16638:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   1663c:	1b52      	subs	r2, r2, r5
   1663e:	6122      	str	r2, [r4, #16]
   16640:	f8cd a000 	str.w	sl, [sp]
   16644:	464b      	mov	r3, r9
   16646:	aa03      	add	r2, sp, #12
   16648:	4621      	mov	r1, r4
   1664a:	4640      	mov	r0, r8
   1664c:	f005 fc63 	bl	1bf16 <_printf_common>
   16650:	3001      	adds	r0, #1
   16652:	d14c      	bne.n	166ee <_printf_i+0x1fe>
   16654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16658:	b004      	add	sp, #16
   1665a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1665e:	4835      	ldr	r0, [pc, #212]	; (16734 <_printf_i+0x244>)
   16660:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   16664:	6829      	ldr	r1, [r5, #0]
   16666:	6823      	ldr	r3, [r4, #0]
   16668:	f851 6b04 	ldr.w	r6, [r1], #4
   1666c:	6029      	str	r1, [r5, #0]
   1666e:	061d      	lsls	r5, r3, #24
   16670:	d514      	bpl.n	1669c <_printf_i+0x1ac>
   16672:	07df      	lsls	r7, r3, #31
   16674:	bf44      	itt	mi
   16676:	f043 0320 	orrmi.w	r3, r3, #32
   1667a:	6023      	strmi	r3, [r4, #0]
   1667c:	b91e      	cbnz	r6, 16686 <_printf_i+0x196>
   1667e:	6823      	ldr	r3, [r4, #0]
   16680:	f023 0320 	bic.w	r3, r3, #32
   16684:	6023      	str	r3, [r4, #0]
   16686:	2310      	movs	r3, #16
   16688:	e7b0      	b.n	165ec <_printf_i+0xfc>
   1668a:	6823      	ldr	r3, [r4, #0]
   1668c:	f043 0320 	orr.w	r3, r3, #32
   16690:	6023      	str	r3, [r4, #0]
   16692:	2378      	movs	r3, #120	; 0x78
   16694:	4828      	ldr	r0, [pc, #160]	; (16738 <_printf_i+0x248>)
   16696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1669a:	e7e3      	b.n	16664 <_printf_i+0x174>
   1669c:	0659      	lsls	r1, r3, #25
   1669e:	bf48      	it	mi
   166a0:	b2b6      	uxthmi	r6, r6
   166a2:	e7e6      	b.n	16672 <_printf_i+0x182>
   166a4:	4615      	mov	r5, r2
   166a6:	e7bb      	b.n	16620 <_printf_i+0x130>
   166a8:	682b      	ldr	r3, [r5, #0]
   166aa:	6826      	ldr	r6, [r4, #0]
   166ac:	6961      	ldr	r1, [r4, #20]
   166ae:	1d18      	adds	r0, r3, #4
   166b0:	6028      	str	r0, [r5, #0]
   166b2:	0635      	lsls	r5, r6, #24
   166b4:	681b      	ldr	r3, [r3, #0]
   166b6:	d501      	bpl.n	166bc <_printf_i+0x1cc>
   166b8:	6019      	str	r1, [r3, #0]
   166ba:	e002      	b.n	166c2 <_printf_i+0x1d2>
   166bc:	0670      	lsls	r0, r6, #25
   166be:	d5fb      	bpl.n	166b8 <_printf_i+0x1c8>
   166c0:	8019      	strh	r1, [r3, #0]
   166c2:	2300      	movs	r3, #0
   166c4:	6123      	str	r3, [r4, #16]
   166c6:	4615      	mov	r5, r2
   166c8:	e7ba      	b.n	16640 <_printf_i+0x150>
   166ca:	682b      	ldr	r3, [r5, #0]
   166cc:	1d1a      	adds	r2, r3, #4
   166ce:	602a      	str	r2, [r5, #0]
   166d0:	681d      	ldr	r5, [r3, #0]
   166d2:	6862      	ldr	r2, [r4, #4]
   166d4:	2100      	movs	r1, #0
   166d6:	4628      	mov	r0, r5
   166d8:	f7e9 fd12 	bl	100 <memchr>
   166dc:	b108      	cbz	r0, 166e2 <_printf_i+0x1f2>
   166de:	1b40      	subs	r0, r0, r5
   166e0:	6060      	str	r0, [r4, #4]
   166e2:	6863      	ldr	r3, [r4, #4]
   166e4:	6123      	str	r3, [r4, #16]
   166e6:	2300      	movs	r3, #0
   166e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   166ec:	e7a8      	b.n	16640 <_printf_i+0x150>
   166ee:	6923      	ldr	r3, [r4, #16]
   166f0:	462a      	mov	r2, r5
   166f2:	4649      	mov	r1, r9
   166f4:	4640      	mov	r0, r8
   166f6:	47d0      	blx	sl
   166f8:	3001      	adds	r0, #1
   166fa:	d0ab      	beq.n	16654 <_printf_i+0x164>
   166fc:	6823      	ldr	r3, [r4, #0]
   166fe:	079b      	lsls	r3, r3, #30
   16700:	d413      	bmi.n	1672a <_printf_i+0x23a>
   16702:	68e0      	ldr	r0, [r4, #12]
   16704:	9b03      	ldr	r3, [sp, #12]
   16706:	4298      	cmp	r0, r3
   16708:	bfb8      	it	lt
   1670a:	4618      	movlt	r0, r3
   1670c:	e7a4      	b.n	16658 <_printf_i+0x168>
   1670e:	2301      	movs	r3, #1
   16710:	4632      	mov	r2, r6
   16712:	4649      	mov	r1, r9
   16714:	4640      	mov	r0, r8
   16716:	47d0      	blx	sl
   16718:	3001      	adds	r0, #1
   1671a:	d09b      	beq.n	16654 <_printf_i+0x164>
   1671c:	3501      	adds	r5, #1
   1671e:	68e3      	ldr	r3, [r4, #12]
   16720:	9903      	ldr	r1, [sp, #12]
   16722:	1a5b      	subs	r3, r3, r1
   16724:	42ab      	cmp	r3, r5
   16726:	dcf2      	bgt.n	1670e <_printf_i+0x21e>
   16728:	e7eb      	b.n	16702 <_printf_i+0x212>
   1672a:	2500      	movs	r5, #0
   1672c:	f104 0619 	add.w	r6, r4, #25
   16730:	e7f5      	b.n	1671e <_printf_i+0x22e>
   16732:	bf00      	nop
   16734:	0003ee8d 	.word	0x0003ee8d
   16738:	0003ee9e 	.word	0x0003ee9e

0001673c <iprintf>:
   1673c:	b40f      	push	{r0, r1, r2, r3}
   1673e:	4b0a      	ldr	r3, [pc, #40]	; (16768 <iprintf+0x2c>)
   16740:	b513      	push	{r0, r1, r4, lr}
   16742:	681c      	ldr	r4, [r3, #0]
   16744:	b124      	cbz	r4, 16750 <iprintf+0x14>
   16746:	69a3      	ldr	r3, [r4, #24]
   16748:	b913      	cbnz	r3, 16750 <iprintf+0x14>
   1674a:	4620      	mov	r0, r4
   1674c:	f000 fa0a 	bl	16b64 <__sinit>
   16750:	ab05      	add	r3, sp, #20
   16752:	9a04      	ldr	r2, [sp, #16]
   16754:	68a1      	ldr	r1, [r4, #8]
   16756:	9301      	str	r3, [sp, #4]
   16758:	4620      	mov	r0, r4
   1675a:	f7ff fb63 	bl	15e24 <_vfiprintf_r>
   1675e:	b002      	add	sp, #8
   16760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16764:	b004      	add	sp, #16
   16766:	4770      	bx	lr
   16768:	20000358 	.word	0x20000358

0001676c <_sbrk_r>:
   1676c:	b538      	push	{r3, r4, r5, lr}
   1676e:	4d06      	ldr	r5, [pc, #24]	; (16788 <_sbrk_r+0x1c>)
   16770:	2300      	movs	r3, #0
   16772:	4604      	mov	r4, r0
   16774:	4608      	mov	r0, r1
   16776:	602b      	str	r3, [r5, #0]
   16778:	f7f2 fcf0 	bl	915c <_sbrk>
   1677c:	1c43      	adds	r3, r0, #1
   1677e:	d102      	bne.n	16786 <_sbrk_r+0x1a>
   16780:	682b      	ldr	r3, [r5, #0]
   16782:	b103      	cbz	r3, 16786 <_sbrk_r+0x1a>
   16784:	6023      	str	r3, [r4, #0]
   16786:	bd38      	pop	{r3, r4, r5, pc}
   16788:	200243e8 	.word	0x200243e8

0001678c <raise>:
   1678c:	4b02      	ldr	r3, [pc, #8]	; (16798 <raise+0xc>)
   1678e:	4601      	mov	r1, r0
   16790:	6818      	ldr	r0, [r3, #0]
   16792:	f005 bc2d 	b.w	1bff0 <_raise_r>
   16796:	bf00      	nop
   16798:	20000358 	.word	0x20000358

0001679c <_kill_r>:
   1679c:	b538      	push	{r3, r4, r5, lr}
   1679e:	4d07      	ldr	r5, [pc, #28]	; (167bc <_kill_r+0x20>)
   167a0:	2300      	movs	r3, #0
   167a2:	4604      	mov	r4, r0
   167a4:	4608      	mov	r0, r1
   167a6:	4611      	mov	r1, r2
   167a8:	602b      	str	r3, [r5, #0]
   167aa:	f001 fbc9 	bl	17f40 <_kill>
   167ae:	1c43      	adds	r3, r0, #1
   167b0:	d102      	bne.n	167b8 <_kill_r+0x1c>
   167b2:	682b      	ldr	r3, [r5, #0]
   167b4:	b103      	cbz	r3, 167b8 <_kill_r+0x1c>
   167b6:	6023      	str	r3, [r4, #0]
   167b8:	bd38      	pop	{r3, r4, r5, pc}
   167ba:	bf00      	nop
   167bc:	200243e8 	.word	0x200243e8

000167c0 <vsniprintf>:
   167c0:	b507      	push	{r0, r1, r2, lr}
   167c2:	9300      	str	r3, [sp, #0]
   167c4:	4613      	mov	r3, r2
   167c6:	460a      	mov	r2, r1
   167c8:	4601      	mov	r1, r0
   167ca:	4803      	ldr	r0, [pc, #12]	; (167d8 <vsniprintf+0x18>)
   167cc:	6800      	ldr	r0, [r0, #0]
   167ce:	f005 fc4d 	bl	1c06c <_vsniprintf_r>
   167d2:	b003      	add	sp, #12
   167d4:	f85d fb04 	ldr.w	pc, [sp], #4
   167d8:	20000358 	.word	0x20000358

000167dc <__swbuf_r>:
   167dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167de:	460e      	mov	r6, r1
   167e0:	4614      	mov	r4, r2
   167e2:	4605      	mov	r5, r0
   167e4:	b118      	cbz	r0, 167ee <__swbuf_r+0x12>
   167e6:	6983      	ldr	r3, [r0, #24]
   167e8:	b90b      	cbnz	r3, 167ee <__swbuf_r+0x12>
   167ea:	f000 f9bb 	bl	16b64 <__sinit>
   167ee:	4b21      	ldr	r3, [pc, #132]	; (16874 <__swbuf_r+0x98>)
   167f0:	429c      	cmp	r4, r3
   167f2:	d12b      	bne.n	1684c <__swbuf_r+0x70>
   167f4:	686c      	ldr	r4, [r5, #4]
   167f6:	69a3      	ldr	r3, [r4, #24]
   167f8:	60a3      	str	r3, [r4, #8]
   167fa:	89a3      	ldrh	r3, [r4, #12]
   167fc:	071a      	lsls	r2, r3, #28
   167fe:	d52f      	bpl.n	16860 <__swbuf_r+0x84>
   16800:	6923      	ldr	r3, [r4, #16]
   16802:	b36b      	cbz	r3, 16860 <__swbuf_r+0x84>
   16804:	6923      	ldr	r3, [r4, #16]
   16806:	6820      	ldr	r0, [r4, #0]
   16808:	1ac0      	subs	r0, r0, r3
   1680a:	6963      	ldr	r3, [r4, #20]
   1680c:	b2f6      	uxtb	r6, r6
   1680e:	4283      	cmp	r3, r0
   16810:	4637      	mov	r7, r6
   16812:	dc04      	bgt.n	1681e <__swbuf_r+0x42>
   16814:	4621      	mov	r1, r4
   16816:	4628      	mov	r0, r5
   16818:	f000 f926 	bl	16a68 <_fflush_r>
   1681c:	bb30      	cbnz	r0, 1686c <__swbuf_r+0x90>
   1681e:	68a3      	ldr	r3, [r4, #8]
   16820:	3b01      	subs	r3, #1
   16822:	60a3      	str	r3, [r4, #8]
   16824:	6823      	ldr	r3, [r4, #0]
   16826:	1c5a      	adds	r2, r3, #1
   16828:	6022      	str	r2, [r4, #0]
   1682a:	701e      	strb	r6, [r3, #0]
   1682c:	6963      	ldr	r3, [r4, #20]
   1682e:	3001      	adds	r0, #1
   16830:	4283      	cmp	r3, r0
   16832:	d004      	beq.n	1683e <__swbuf_r+0x62>
   16834:	89a3      	ldrh	r3, [r4, #12]
   16836:	07db      	lsls	r3, r3, #31
   16838:	d506      	bpl.n	16848 <__swbuf_r+0x6c>
   1683a:	2e0a      	cmp	r6, #10
   1683c:	d104      	bne.n	16848 <__swbuf_r+0x6c>
   1683e:	4621      	mov	r1, r4
   16840:	4628      	mov	r0, r5
   16842:	f000 f911 	bl	16a68 <_fflush_r>
   16846:	b988      	cbnz	r0, 1686c <__swbuf_r+0x90>
   16848:	4638      	mov	r0, r7
   1684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1684c:	4b0a      	ldr	r3, [pc, #40]	; (16878 <__swbuf_r+0x9c>)
   1684e:	429c      	cmp	r4, r3
   16850:	d101      	bne.n	16856 <__swbuf_r+0x7a>
   16852:	68ac      	ldr	r4, [r5, #8]
   16854:	e7cf      	b.n	167f6 <__swbuf_r+0x1a>
   16856:	4b09      	ldr	r3, [pc, #36]	; (1687c <__swbuf_r+0xa0>)
   16858:	429c      	cmp	r4, r3
   1685a:	bf08      	it	eq
   1685c:	68ec      	ldreq	r4, [r5, #12]
   1685e:	e7ca      	b.n	167f6 <__swbuf_r+0x1a>
   16860:	4621      	mov	r1, r4
   16862:	4628      	mov	r0, r5
   16864:	f000 f80c 	bl	16880 <__swsetup_r>
   16868:	2800      	cmp	r0, #0
   1686a:	d0cb      	beq.n	16804 <__swbuf_r+0x28>
   1686c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   16870:	e7ea      	b.n	16848 <__swbuf_r+0x6c>
   16872:	bf00      	nop
   16874:	00036430 	.word	0x00036430
   16878:	00036450 	.word	0x00036450
   1687c:	00036410 	.word	0x00036410

00016880 <__swsetup_r>:
   16880:	4b32      	ldr	r3, [pc, #200]	; (1694c <__swsetup_r+0xcc>)
   16882:	b570      	push	{r4, r5, r6, lr}
   16884:	681d      	ldr	r5, [r3, #0]
   16886:	4606      	mov	r6, r0
   16888:	460c      	mov	r4, r1
   1688a:	b125      	cbz	r5, 16896 <__swsetup_r+0x16>
   1688c:	69ab      	ldr	r3, [r5, #24]
   1688e:	b913      	cbnz	r3, 16896 <__swsetup_r+0x16>
   16890:	4628      	mov	r0, r5
   16892:	f000 f967 	bl	16b64 <__sinit>
   16896:	4b2e      	ldr	r3, [pc, #184]	; (16950 <__swsetup_r+0xd0>)
   16898:	429c      	cmp	r4, r3
   1689a:	d10f      	bne.n	168bc <__swsetup_r+0x3c>
   1689c:	686c      	ldr	r4, [r5, #4]
   1689e:	89a3      	ldrh	r3, [r4, #12]
   168a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   168a4:	0719      	lsls	r1, r3, #28
   168a6:	d42c      	bmi.n	16902 <__swsetup_r+0x82>
   168a8:	06dd      	lsls	r5, r3, #27
   168aa:	d411      	bmi.n	168d0 <__swsetup_r+0x50>
   168ac:	2309      	movs	r3, #9
   168ae:	6033      	str	r3, [r6, #0]
   168b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   168b4:	81a3      	strh	r3, [r4, #12]
   168b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   168ba:	e03e      	b.n	1693a <__swsetup_r+0xba>
   168bc:	4b25      	ldr	r3, [pc, #148]	; (16954 <__swsetup_r+0xd4>)
   168be:	429c      	cmp	r4, r3
   168c0:	d101      	bne.n	168c6 <__swsetup_r+0x46>
   168c2:	68ac      	ldr	r4, [r5, #8]
   168c4:	e7eb      	b.n	1689e <__swsetup_r+0x1e>
   168c6:	4b24      	ldr	r3, [pc, #144]	; (16958 <__swsetup_r+0xd8>)
   168c8:	429c      	cmp	r4, r3
   168ca:	bf08      	it	eq
   168cc:	68ec      	ldreq	r4, [r5, #12]
   168ce:	e7e6      	b.n	1689e <__swsetup_r+0x1e>
   168d0:	0758      	lsls	r0, r3, #29
   168d2:	d512      	bpl.n	168fa <__swsetup_r+0x7a>
   168d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   168d6:	b141      	cbz	r1, 168ea <__swsetup_r+0x6a>
   168d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   168dc:	4299      	cmp	r1, r3
   168de:	d002      	beq.n	168e6 <__swsetup_r+0x66>
   168e0:	4630      	mov	r0, r6
   168e2:	f7ff f9f9 	bl	15cd8 <_free_r>
   168e6:	2300      	movs	r3, #0
   168e8:	6363      	str	r3, [r4, #52]	; 0x34
   168ea:	89a3      	ldrh	r3, [r4, #12]
   168ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   168f0:	81a3      	strh	r3, [r4, #12]
   168f2:	2300      	movs	r3, #0
   168f4:	6063      	str	r3, [r4, #4]
   168f6:	6923      	ldr	r3, [r4, #16]
   168f8:	6023      	str	r3, [r4, #0]
   168fa:	89a3      	ldrh	r3, [r4, #12]
   168fc:	f043 0308 	orr.w	r3, r3, #8
   16900:	81a3      	strh	r3, [r4, #12]
   16902:	6923      	ldr	r3, [r4, #16]
   16904:	b94b      	cbnz	r3, 1691a <__swsetup_r+0x9a>
   16906:	89a3      	ldrh	r3, [r4, #12]
   16908:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1690c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16910:	d003      	beq.n	1691a <__swsetup_r+0x9a>
   16912:	4621      	mov	r1, r4
   16914:	4630      	mov	r0, r6
   16916:	f000 f9a7 	bl	16c68 <__smakebuf_r>
   1691a:	89a0      	ldrh	r0, [r4, #12]
   1691c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   16920:	f010 0301 	ands.w	r3, r0, #1
   16924:	d00a      	beq.n	1693c <__swsetup_r+0xbc>
   16926:	2300      	movs	r3, #0
   16928:	60a3      	str	r3, [r4, #8]
   1692a:	6963      	ldr	r3, [r4, #20]
   1692c:	425b      	negs	r3, r3
   1692e:	61a3      	str	r3, [r4, #24]
   16930:	6923      	ldr	r3, [r4, #16]
   16932:	b943      	cbnz	r3, 16946 <__swsetup_r+0xc6>
   16934:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   16938:	d1ba      	bne.n	168b0 <__swsetup_r+0x30>
   1693a:	bd70      	pop	{r4, r5, r6, pc}
   1693c:	0781      	lsls	r1, r0, #30
   1693e:	bf58      	it	pl
   16940:	6963      	ldrpl	r3, [r4, #20]
   16942:	60a3      	str	r3, [r4, #8]
   16944:	e7f4      	b.n	16930 <__swsetup_r+0xb0>
   16946:	2000      	movs	r0, #0
   16948:	e7f7      	b.n	1693a <__swsetup_r+0xba>
   1694a:	bf00      	nop
   1694c:	20000358 	.word	0x20000358
   16950:	00036430 	.word	0x00036430
   16954:	00036450 	.word	0x00036450
   16958:	00036410 	.word	0x00036410

0001695c <__sflush_r>:
   1695c:	898a      	ldrh	r2, [r1, #12]
   1695e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16962:	4605      	mov	r5, r0
   16964:	0710      	lsls	r0, r2, #28
   16966:	460c      	mov	r4, r1
   16968:	d458      	bmi.n	16a1c <__sflush_r+0xc0>
   1696a:	684b      	ldr	r3, [r1, #4]
   1696c:	2b00      	cmp	r3, #0
   1696e:	dc05      	bgt.n	1697c <__sflush_r+0x20>
   16970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   16972:	2b00      	cmp	r3, #0
   16974:	dc02      	bgt.n	1697c <__sflush_r+0x20>
   16976:	2000      	movs	r0, #0
   16978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1697c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1697e:	2e00      	cmp	r6, #0
   16980:	d0f9      	beq.n	16976 <__sflush_r+0x1a>
   16982:	2300      	movs	r3, #0
   16984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   16988:	682f      	ldr	r7, [r5, #0]
   1698a:	602b      	str	r3, [r5, #0]
   1698c:	d032      	beq.n	169f4 <__sflush_r+0x98>
   1698e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   16990:	89a3      	ldrh	r3, [r4, #12]
   16992:	075a      	lsls	r2, r3, #29
   16994:	d505      	bpl.n	169a2 <__sflush_r+0x46>
   16996:	6863      	ldr	r3, [r4, #4]
   16998:	1ac0      	subs	r0, r0, r3
   1699a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1699c:	b10b      	cbz	r3, 169a2 <__sflush_r+0x46>
   1699e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   169a0:	1ac0      	subs	r0, r0, r3
   169a2:	2300      	movs	r3, #0
   169a4:	4602      	mov	r2, r0
   169a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   169a8:	6a21      	ldr	r1, [r4, #32]
   169aa:	4628      	mov	r0, r5
   169ac:	47b0      	blx	r6
   169ae:	1c43      	adds	r3, r0, #1
   169b0:	89a3      	ldrh	r3, [r4, #12]
   169b2:	d106      	bne.n	169c2 <__sflush_r+0x66>
   169b4:	6829      	ldr	r1, [r5, #0]
   169b6:	291d      	cmp	r1, #29
   169b8:	d82c      	bhi.n	16a14 <__sflush_r+0xb8>
   169ba:	4a2a      	ldr	r2, [pc, #168]	; (16a64 <__sflush_r+0x108>)
   169bc:	40ca      	lsrs	r2, r1
   169be:	07d6      	lsls	r6, r2, #31
   169c0:	d528      	bpl.n	16a14 <__sflush_r+0xb8>
   169c2:	2200      	movs	r2, #0
   169c4:	6062      	str	r2, [r4, #4]
   169c6:	04d9      	lsls	r1, r3, #19
   169c8:	6922      	ldr	r2, [r4, #16]
   169ca:	6022      	str	r2, [r4, #0]
   169cc:	d504      	bpl.n	169d8 <__sflush_r+0x7c>
   169ce:	1c42      	adds	r2, r0, #1
   169d0:	d101      	bne.n	169d6 <__sflush_r+0x7a>
   169d2:	682b      	ldr	r3, [r5, #0]
   169d4:	b903      	cbnz	r3, 169d8 <__sflush_r+0x7c>
   169d6:	6560      	str	r0, [r4, #84]	; 0x54
   169d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   169da:	602f      	str	r7, [r5, #0]
   169dc:	2900      	cmp	r1, #0
   169de:	d0ca      	beq.n	16976 <__sflush_r+0x1a>
   169e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   169e4:	4299      	cmp	r1, r3
   169e6:	d002      	beq.n	169ee <__sflush_r+0x92>
   169e8:	4628      	mov	r0, r5
   169ea:	f7ff f975 	bl	15cd8 <_free_r>
   169ee:	2000      	movs	r0, #0
   169f0:	6360      	str	r0, [r4, #52]	; 0x34
   169f2:	e7c1      	b.n	16978 <__sflush_r+0x1c>
   169f4:	6a21      	ldr	r1, [r4, #32]
   169f6:	2301      	movs	r3, #1
   169f8:	4628      	mov	r0, r5
   169fa:	47b0      	blx	r6
   169fc:	1c41      	adds	r1, r0, #1
   169fe:	d1c7      	bne.n	16990 <__sflush_r+0x34>
   16a00:	682b      	ldr	r3, [r5, #0]
   16a02:	2b00      	cmp	r3, #0
   16a04:	d0c4      	beq.n	16990 <__sflush_r+0x34>
   16a06:	2b1d      	cmp	r3, #29
   16a08:	d001      	beq.n	16a0e <__sflush_r+0xb2>
   16a0a:	2b16      	cmp	r3, #22
   16a0c:	d101      	bne.n	16a12 <__sflush_r+0xb6>
   16a0e:	602f      	str	r7, [r5, #0]
   16a10:	e7b1      	b.n	16976 <__sflush_r+0x1a>
   16a12:	89a3      	ldrh	r3, [r4, #12]
   16a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16a18:	81a3      	strh	r3, [r4, #12]
   16a1a:	e7ad      	b.n	16978 <__sflush_r+0x1c>
   16a1c:	690f      	ldr	r7, [r1, #16]
   16a1e:	2f00      	cmp	r7, #0
   16a20:	d0a9      	beq.n	16976 <__sflush_r+0x1a>
   16a22:	0793      	lsls	r3, r2, #30
   16a24:	680e      	ldr	r6, [r1, #0]
   16a26:	bf08      	it	eq
   16a28:	694b      	ldreq	r3, [r1, #20]
   16a2a:	600f      	str	r7, [r1, #0]
   16a2c:	bf18      	it	ne
   16a2e:	2300      	movne	r3, #0
   16a30:	eba6 0807 	sub.w	r8, r6, r7
   16a34:	608b      	str	r3, [r1, #8]
   16a36:	f1b8 0f00 	cmp.w	r8, #0
   16a3a:	dd9c      	ble.n	16976 <__sflush_r+0x1a>
   16a3c:	6a21      	ldr	r1, [r4, #32]
   16a3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   16a40:	4643      	mov	r3, r8
   16a42:	463a      	mov	r2, r7
   16a44:	4628      	mov	r0, r5
   16a46:	47b0      	blx	r6
   16a48:	2800      	cmp	r0, #0
   16a4a:	dc06      	bgt.n	16a5a <__sflush_r+0xfe>
   16a4c:	89a3      	ldrh	r3, [r4, #12]
   16a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16a52:	81a3      	strh	r3, [r4, #12]
   16a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a58:	e78e      	b.n	16978 <__sflush_r+0x1c>
   16a5a:	4407      	add	r7, r0
   16a5c:	eba8 0800 	sub.w	r8, r8, r0
   16a60:	e7e9      	b.n	16a36 <__sflush_r+0xda>
   16a62:	bf00      	nop
   16a64:	20400001 	.word	0x20400001

00016a68 <_fflush_r>:
   16a68:	b538      	push	{r3, r4, r5, lr}
   16a6a:	690b      	ldr	r3, [r1, #16]
   16a6c:	4605      	mov	r5, r0
   16a6e:	460c      	mov	r4, r1
   16a70:	b913      	cbnz	r3, 16a78 <_fflush_r+0x10>
   16a72:	2500      	movs	r5, #0
   16a74:	4628      	mov	r0, r5
   16a76:	bd38      	pop	{r3, r4, r5, pc}
   16a78:	b118      	cbz	r0, 16a82 <_fflush_r+0x1a>
   16a7a:	6983      	ldr	r3, [r0, #24]
   16a7c:	b90b      	cbnz	r3, 16a82 <_fflush_r+0x1a>
   16a7e:	f000 f871 	bl	16b64 <__sinit>
   16a82:	4b14      	ldr	r3, [pc, #80]	; (16ad4 <_fflush_r+0x6c>)
   16a84:	429c      	cmp	r4, r3
   16a86:	d11b      	bne.n	16ac0 <_fflush_r+0x58>
   16a88:	686c      	ldr	r4, [r5, #4]
   16a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16a8e:	2b00      	cmp	r3, #0
   16a90:	d0ef      	beq.n	16a72 <_fflush_r+0xa>
   16a92:	6e62      	ldr	r2, [r4, #100]	; 0x64
   16a94:	07d0      	lsls	r0, r2, #31
   16a96:	d404      	bmi.n	16aa2 <_fflush_r+0x3a>
   16a98:	0599      	lsls	r1, r3, #22
   16a9a:	d402      	bmi.n	16aa2 <_fflush_r+0x3a>
   16a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16a9e:	f7f2 fba3 	bl	91e8 <__retarget_lock_acquire_recursive>
   16aa2:	4628      	mov	r0, r5
   16aa4:	4621      	mov	r1, r4
   16aa6:	f7ff ff59 	bl	1695c <__sflush_r>
   16aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16aac:	07da      	lsls	r2, r3, #31
   16aae:	4605      	mov	r5, r0
   16ab0:	d4e0      	bmi.n	16a74 <_fflush_r+0xc>
   16ab2:	89a3      	ldrh	r3, [r4, #12]
   16ab4:	059b      	lsls	r3, r3, #22
   16ab6:	d4dd      	bmi.n	16a74 <_fflush_r+0xc>
   16ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16aba:	f7f2 fbb3 	bl	9224 <__retarget_lock_release_recursive>
   16abe:	e7d9      	b.n	16a74 <_fflush_r+0xc>
   16ac0:	4b05      	ldr	r3, [pc, #20]	; (16ad8 <_fflush_r+0x70>)
   16ac2:	429c      	cmp	r4, r3
   16ac4:	d101      	bne.n	16aca <_fflush_r+0x62>
   16ac6:	68ac      	ldr	r4, [r5, #8]
   16ac8:	e7df      	b.n	16a8a <_fflush_r+0x22>
   16aca:	4b04      	ldr	r3, [pc, #16]	; (16adc <_fflush_r+0x74>)
   16acc:	429c      	cmp	r4, r3
   16ace:	bf08      	it	eq
   16ad0:	68ec      	ldreq	r4, [r5, #12]
   16ad2:	e7da      	b.n	16a8a <_fflush_r+0x22>
   16ad4:	00036430 	.word	0x00036430
   16ad8:	00036450 	.word	0x00036450
   16adc:	00036410 	.word	0x00036410

00016ae0 <std>:
   16ae0:	2300      	movs	r3, #0
   16ae2:	b510      	push	{r4, lr}
   16ae4:	4604      	mov	r4, r0
   16ae6:	e9c0 3300 	strd	r3, r3, [r0]
   16aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
   16aee:	6083      	str	r3, [r0, #8]
   16af0:	8181      	strh	r1, [r0, #12]
   16af2:	6643      	str	r3, [r0, #100]	; 0x64
   16af4:	81c2      	strh	r2, [r0, #14]
   16af6:	6183      	str	r3, [r0, #24]
   16af8:	4619      	mov	r1, r3
   16afa:	2208      	movs	r2, #8
   16afc:	305c      	adds	r0, #92	; 0x5c
   16afe:	f005 f92a 	bl	1bd56 <memset>
   16b02:	4b05      	ldr	r3, [pc, #20]	; (16b18 <std+0x38>)
   16b04:	6263      	str	r3, [r4, #36]	; 0x24
   16b06:	4b05      	ldr	r3, [pc, #20]	; (16b1c <std+0x3c>)
   16b08:	62a3      	str	r3, [r4, #40]	; 0x28
   16b0a:	4b05      	ldr	r3, [pc, #20]	; (16b20 <std+0x40>)
   16b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
   16b0e:	4b05      	ldr	r3, [pc, #20]	; (16b24 <std+0x44>)
   16b10:	6224      	str	r4, [r4, #32]
   16b12:	6323      	str	r3, [r4, #48]	; 0x30
   16b14:	bd10      	pop	{r4, pc}
   16b16:	bf00      	nop
   16b18:	0001c465 	.word	0x0001c465
   16b1c:	0001c487 	.word	0x0001c487
   16b20:	0001c4bf 	.word	0x0001c4bf
   16b24:	0001c4e3 	.word	0x0001c4e3

00016b28 <_cleanup_r>:
   16b28:	4901      	ldr	r1, [pc, #4]	; (16b30 <_cleanup_r+0x8>)
   16b2a:	f005 bb6b 	b.w	1c204 <_fwalk_reent>
   16b2e:	bf00      	nop
   16b30:	00016a69 	.word	0x00016a69

00016b34 <__sfp_lock_acquire>:
   16b34:	4801      	ldr	r0, [pc, #4]	; (16b3c <__sfp_lock_acquire+0x8>)
   16b36:	f7f2 bb57 	b.w	91e8 <__retarget_lock_acquire_recursive>
   16b3a:	bf00      	nop
   16b3c:	200005f4 	.word	0x200005f4

00016b40 <__sfp_lock_release>:
   16b40:	4801      	ldr	r0, [pc, #4]	; (16b48 <__sfp_lock_release+0x8>)
   16b42:	f7f2 bb6f 	b.w	9224 <__retarget_lock_release_recursive>
   16b46:	bf00      	nop
   16b48:	200005f4 	.word	0x200005f4

00016b4c <__sinit_lock_acquire>:
   16b4c:	4801      	ldr	r0, [pc, #4]	; (16b54 <__sinit_lock_acquire+0x8>)
   16b4e:	f7f2 bb4b 	b.w	91e8 <__retarget_lock_acquire_recursive>
   16b52:	bf00      	nop
   16b54:	20000608 	.word	0x20000608

00016b58 <__sinit_lock_release>:
   16b58:	4801      	ldr	r0, [pc, #4]	; (16b60 <__sinit_lock_release+0x8>)
   16b5a:	f7f2 bb63 	b.w	9224 <__retarget_lock_release_recursive>
   16b5e:	bf00      	nop
   16b60:	20000608 	.word	0x20000608

00016b64 <__sinit>:
   16b64:	b510      	push	{r4, lr}
   16b66:	4604      	mov	r4, r0
   16b68:	f7ff fff0 	bl	16b4c <__sinit_lock_acquire>
   16b6c:	69a3      	ldr	r3, [r4, #24]
   16b6e:	b11b      	cbz	r3, 16b78 <__sinit+0x14>
   16b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16b74:	f7ff bff0 	b.w	16b58 <__sinit_lock_release>
   16b78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   16b7c:	6523      	str	r3, [r4, #80]	; 0x50
   16b7e:	4b13      	ldr	r3, [pc, #76]	; (16bcc <__sinit+0x68>)
   16b80:	4a13      	ldr	r2, [pc, #76]	; (16bd0 <__sinit+0x6c>)
   16b82:	681b      	ldr	r3, [r3, #0]
   16b84:	62a2      	str	r2, [r4, #40]	; 0x28
   16b86:	42a3      	cmp	r3, r4
   16b88:	bf04      	itt	eq
   16b8a:	2301      	moveq	r3, #1
   16b8c:	61a3      	streq	r3, [r4, #24]
   16b8e:	4620      	mov	r0, r4
   16b90:	f000 f820 	bl	16bd4 <__sfp>
   16b94:	6060      	str	r0, [r4, #4]
   16b96:	4620      	mov	r0, r4
   16b98:	f000 f81c 	bl	16bd4 <__sfp>
   16b9c:	60a0      	str	r0, [r4, #8]
   16b9e:	4620      	mov	r0, r4
   16ba0:	f000 f818 	bl	16bd4 <__sfp>
   16ba4:	2200      	movs	r2, #0
   16ba6:	60e0      	str	r0, [r4, #12]
   16ba8:	2104      	movs	r1, #4
   16baa:	6860      	ldr	r0, [r4, #4]
   16bac:	f7ff ff98 	bl	16ae0 <std>
   16bb0:	68a0      	ldr	r0, [r4, #8]
   16bb2:	2201      	movs	r2, #1
   16bb4:	2109      	movs	r1, #9
   16bb6:	f7ff ff93 	bl	16ae0 <std>
   16bba:	68e0      	ldr	r0, [r4, #12]
   16bbc:	2202      	movs	r2, #2
   16bbe:	2112      	movs	r1, #18
   16bc0:	f7ff ff8e 	bl	16ae0 <std>
   16bc4:	2301      	movs	r3, #1
   16bc6:	61a3      	str	r3, [r4, #24]
   16bc8:	e7d2      	b.n	16b70 <__sinit+0xc>
   16bca:	bf00      	nop
   16bcc:	0003640c 	.word	0x0003640c
   16bd0:	00016b29 	.word	0x00016b29

00016bd4 <__sfp>:
   16bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bd6:	4607      	mov	r7, r0
   16bd8:	f7ff ffac 	bl	16b34 <__sfp_lock_acquire>
   16bdc:	4b1e      	ldr	r3, [pc, #120]	; (16c58 <__sfp+0x84>)
   16bde:	681e      	ldr	r6, [r3, #0]
   16be0:	69b3      	ldr	r3, [r6, #24]
   16be2:	b913      	cbnz	r3, 16bea <__sfp+0x16>
   16be4:	4630      	mov	r0, r6
   16be6:	f7ff ffbd 	bl	16b64 <__sinit>
   16bea:	3648      	adds	r6, #72	; 0x48
   16bec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   16bf0:	3b01      	subs	r3, #1
   16bf2:	d503      	bpl.n	16bfc <__sfp+0x28>
   16bf4:	6833      	ldr	r3, [r6, #0]
   16bf6:	b30b      	cbz	r3, 16c3c <__sfp+0x68>
   16bf8:	6836      	ldr	r6, [r6, #0]
   16bfa:	e7f7      	b.n	16bec <__sfp+0x18>
   16bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   16c00:	b9d5      	cbnz	r5, 16c38 <__sfp+0x64>
   16c02:	4b16      	ldr	r3, [pc, #88]	; (16c5c <__sfp+0x88>)
   16c04:	60e3      	str	r3, [r4, #12]
   16c06:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16c0a:	6665      	str	r5, [r4, #100]	; 0x64
   16c0c:	f7f2 faba 	bl	9184 <__retarget_lock_init_recursive>
   16c10:	f7ff ff96 	bl	16b40 <__sfp_lock_release>
   16c14:	e9c4 5501 	strd	r5, r5, [r4, #4]
   16c18:	e9c4 5504 	strd	r5, r5, [r4, #16]
   16c1c:	6025      	str	r5, [r4, #0]
   16c1e:	61a5      	str	r5, [r4, #24]
   16c20:	2208      	movs	r2, #8
   16c22:	4629      	mov	r1, r5
   16c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   16c28:	f005 f895 	bl	1bd56 <memset>
   16c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   16c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   16c34:	4620      	mov	r0, r4
   16c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c38:	3468      	adds	r4, #104	; 0x68
   16c3a:	e7d9      	b.n	16bf0 <__sfp+0x1c>
   16c3c:	2104      	movs	r1, #4
   16c3e:	4638      	mov	r0, r7
   16c40:	f005 faca 	bl	1c1d8 <__sfmoreglue>
   16c44:	4604      	mov	r4, r0
   16c46:	6030      	str	r0, [r6, #0]
   16c48:	2800      	cmp	r0, #0
   16c4a:	d1d5      	bne.n	16bf8 <__sfp+0x24>
   16c4c:	f7ff ff78 	bl	16b40 <__sfp_lock_release>
   16c50:	230c      	movs	r3, #12
   16c52:	603b      	str	r3, [r7, #0]
   16c54:	e7ee      	b.n	16c34 <__sfp+0x60>
   16c56:	bf00      	nop
   16c58:	0003640c 	.word	0x0003640c
   16c5c:	ffff0001 	.word	0xffff0001

00016c60 <_localeconv_r>:
   16c60:	4800      	ldr	r0, [pc, #0]	; (16c64 <_localeconv_r+0x4>)
   16c62:	4770      	bx	lr
   16c64:	200004ac 	.word	0x200004ac

00016c68 <__smakebuf_r>:
   16c68:	898b      	ldrh	r3, [r1, #12]
   16c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16c6c:	079d      	lsls	r5, r3, #30
   16c6e:	4606      	mov	r6, r0
   16c70:	460c      	mov	r4, r1
   16c72:	d507      	bpl.n	16c84 <__smakebuf_r+0x1c>
   16c74:	f104 0347 	add.w	r3, r4, #71	; 0x47
   16c78:	6023      	str	r3, [r4, #0]
   16c7a:	6123      	str	r3, [r4, #16]
   16c7c:	2301      	movs	r3, #1
   16c7e:	6163      	str	r3, [r4, #20]
   16c80:	b002      	add	sp, #8
   16c82:	bd70      	pop	{r4, r5, r6, pc}
   16c84:	ab01      	add	r3, sp, #4
   16c86:	466a      	mov	r2, sp
   16c88:	f005 fadb 	bl	1c242 <__swhatbuf_r>
   16c8c:	9900      	ldr	r1, [sp, #0]
   16c8e:	4605      	mov	r5, r0
   16c90:	4630      	mov	r0, r6
   16c92:	f7ff f86d 	bl	15d70 <_malloc_r>
   16c96:	b948      	cbnz	r0, 16cac <__smakebuf_r+0x44>
   16c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16c9c:	059a      	lsls	r2, r3, #22
   16c9e:	d4ef      	bmi.n	16c80 <__smakebuf_r+0x18>
   16ca0:	f023 0303 	bic.w	r3, r3, #3
   16ca4:	f043 0302 	orr.w	r3, r3, #2
   16ca8:	81a3      	strh	r3, [r4, #12]
   16caa:	e7e3      	b.n	16c74 <__smakebuf_r+0xc>
   16cac:	4b0d      	ldr	r3, [pc, #52]	; (16ce4 <__smakebuf_r+0x7c>)
   16cae:	62b3      	str	r3, [r6, #40]	; 0x28
   16cb0:	89a3      	ldrh	r3, [r4, #12]
   16cb2:	6020      	str	r0, [r4, #0]
   16cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16cb8:	81a3      	strh	r3, [r4, #12]
   16cba:	9b00      	ldr	r3, [sp, #0]
   16cbc:	6163      	str	r3, [r4, #20]
   16cbe:	9b01      	ldr	r3, [sp, #4]
   16cc0:	6120      	str	r0, [r4, #16]
   16cc2:	b15b      	cbz	r3, 16cdc <__smakebuf_r+0x74>
   16cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   16cc8:	4630      	mov	r0, r6
   16cca:	f000 fc65 	bl	17598 <_isatty_r>
   16cce:	b128      	cbz	r0, 16cdc <__smakebuf_r+0x74>
   16cd0:	89a3      	ldrh	r3, [r4, #12]
   16cd2:	f023 0303 	bic.w	r3, r3, #3
   16cd6:	f043 0301 	orr.w	r3, r3, #1
   16cda:	81a3      	strh	r3, [r4, #12]
   16cdc:	89a0      	ldrh	r0, [r4, #12]
   16cde:	4305      	orrs	r5, r0
   16ce0:	81a5      	strh	r5, [r4, #12]
   16ce2:	e7cd      	b.n	16c80 <__smakebuf_r+0x18>
   16ce4:	00016b29 	.word	0x00016b29

00016ce8 <__malloc_lock>:
   16ce8:	4801      	ldr	r0, [pc, #4]	; (16cf0 <__malloc_lock+0x8>)
   16cea:	f7f2 ba7d 	b.w	91e8 <__retarget_lock_acquire_recursive>
   16cee:	bf00      	nop
   16cf0:	200005e0 	.word	0x200005e0

00016cf4 <__malloc_unlock>:
   16cf4:	4801      	ldr	r0, [pc, #4]	; (16cfc <__malloc_unlock+0x8>)
   16cf6:	f7f2 ba95 	b.w	9224 <__retarget_lock_release_recursive>
   16cfa:	bf00      	nop
   16cfc:	200005e0 	.word	0x200005e0

00016d00 <_Balloc>:
   16d00:	b570      	push	{r4, r5, r6, lr}
   16d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
   16d04:	4604      	mov	r4, r0
   16d06:	460d      	mov	r5, r1
   16d08:	b976      	cbnz	r6, 16d28 <_Balloc+0x28>
   16d0a:	2010      	movs	r0, #16
   16d0c:	f7fe ffd4 	bl	15cb8 <malloc>
   16d10:	4602      	mov	r2, r0
   16d12:	6260      	str	r0, [r4, #36]	; 0x24
   16d14:	b920      	cbnz	r0, 16d20 <_Balloc+0x20>
   16d16:	4b18      	ldr	r3, [pc, #96]	; (16d78 <_Balloc+0x78>)
   16d18:	4818      	ldr	r0, [pc, #96]	; (16d7c <_Balloc+0x7c>)
   16d1a:	2166      	movs	r1, #102	; 0x66
   16d1c:	f7fe ff94 	bl	15c48 <__assert_func>
   16d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
   16d24:	6006      	str	r6, [r0, #0]
   16d26:	60c6      	str	r6, [r0, #12]
   16d28:	6a66      	ldr	r6, [r4, #36]	; 0x24
   16d2a:	68f3      	ldr	r3, [r6, #12]
   16d2c:	b183      	cbz	r3, 16d50 <_Balloc+0x50>
   16d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16d30:	68db      	ldr	r3, [r3, #12]
   16d32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   16d36:	b9b8      	cbnz	r0, 16d68 <_Balloc+0x68>
   16d38:	2101      	movs	r1, #1
   16d3a:	fa01 f605 	lsl.w	r6, r1, r5
   16d3e:	1d72      	adds	r2, r6, #5
   16d40:	0092      	lsls	r2, r2, #2
   16d42:	4620      	mov	r0, r4
   16d44:	f005 f80f 	bl	1bd66 <_calloc_r>
   16d48:	b160      	cbz	r0, 16d64 <_Balloc+0x64>
   16d4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   16d4e:	e00e      	b.n	16d6e <_Balloc+0x6e>
   16d50:	2221      	movs	r2, #33	; 0x21
   16d52:	2104      	movs	r1, #4
   16d54:	4620      	mov	r0, r4
   16d56:	f005 f806 	bl	1bd66 <_calloc_r>
   16d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16d5c:	60f0      	str	r0, [r6, #12]
   16d5e:	68db      	ldr	r3, [r3, #12]
   16d60:	2b00      	cmp	r3, #0
   16d62:	d1e4      	bne.n	16d2e <_Balloc+0x2e>
   16d64:	2000      	movs	r0, #0
   16d66:	bd70      	pop	{r4, r5, r6, pc}
   16d68:	6802      	ldr	r2, [r0, #0]
   16d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   16d6e:	2300      	movs	r3, #0
   16d70:	e9c0 3303 	strd	r3, r3, [r0, #12]
   16d74:	e7f7      	b.n	16d66 <_Balloc+0x66>
   16d76:	bf00      	nop
   16d78:	0003eebc 	.word	0x0003eebc
   16d7c:	0003ef40 	.word	0x0003ef40

00016d80 <_Bfree>:
   16d80:	b570      	push	{r4, r5, r6, lr}
   16d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
   16d84:	4605      	mov	r5, r0
   16d86:	460c      	mov	r4, r1
   16d88:	b976      	cbnz	r6, 16da8 <_Bfree+0x28>
   16d8a:	2010      	movs	r0, #16
   16d8c:	f7fe ff94 	bl	15cb8 <malloc>
   16d90:	4602      	mov	r2, r0
   16d92:	6268      	str	r0, [r5, #36]	; 0x24
   16d94:	b920      	cbnz	r0, 16da0 <_Bfree+0x20>
   16d96:	4b09      	ldr	r3, [pc, #36]	; (16dbc <_Bfree+0x3c>)
   16d98:	4809      	ldr	r0, [pc, #36]	; (16dc0 <_Bfree+0x40>)
   16d9a:	218a      	movs	r1, #138	; 0x8a
   16d9c:	f7fe ff54 	bl	15c48 <__assert_func>
   16da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   16da4:	6006      	str	r6, [r0, #0]
   16da6:	60c6      	str	r6, [r0, #12]
   16da8:	b13c      	cbz	r4, 16dba <_Bfree+0x3a>
   16daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16dac:	6862      	ldr	r2, [r4, #4]
   16dae:	68db      	ldr	r3, [r3, #12]
   16db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   16db4:	6021      	str	r1, [r4, #0]
   16db6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   16dba:	bd70      	pop	{r4, r5, r6, pc}
   16dbc:	0003eebc 	.word	0x0003eebc
   16dc0:	0003ef40 	.word	0x0003ef40

00016dc4 <__multadd>:
   16dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16dc8:	690d      	ldr	r5, [r1, #16]
   16dca:	4607      	mov	r7, r0
   16dcc:	460c      	mov	r4, r1
   16dce:	461e      	mov	r6, r3
   16dd0:	f101 0c14 	add.w	ip, r1, #20
   16dd4:	2000      	movs	r0, #0
   16dd6:	f8dc 3000 	ldr.w	r3, [ip]
   16dda:	b299      	uxth	r1, r3
   16ddc:	fb02 6101 	mla	r1, r2, r1, r6
   16de0:	0c1e      	lsrs	r6, r3, #16
   16de2:	0c0b      	lsrs	r3, r1, #16
   16de4:	fb02 3306 	mla	r3, r2, r6, r3
   16de8:	b289      	uxth	r1, r1
   16dea:	3001      	adds	r0, #1
   16dec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   16df0:	4285      	cmp	r5, r0
   16df2:	f84c 1b04 	str.w	r1, [ip], #4
   16df6:	ea4f 4613 	mov.w	r6, r3, lsr #16
   16dfa:	dcec      	bgt.n	16dd6 <__multadd+0x12>
   16dfc:	b30e      	cbz	r6, 16e42 <__multadd+0x7e>
   16dfe:	68a3      	ldr	r3, [r4, #8]
   16e00:	42ab      	cmp	r3, r5
   16e02:	dc19      	bgt.n	16e38 <__multadd+0x74>
   16e04:	6861      	ldr	r1, [r4, #4]
   16e06:	4638      	mov	r0, r7
   16e08:	3101      	adds	r1, #1
   16e0a:	f7ff ff79 	bl	16d00 <_Balloc>
   16e0e:	4680      	mov	r8, r0
   16e10:	b928      	cbnz	r0, 16e1e <__multadd+0x5a>
   16e12:	4602      	mov	r2, r0
   16e14:	4b0c      	ldr	r3, [pc, #48]	; (16e48 <__multadd+0x84>)
   16e16:	480d      	ldr	r0, [pc, #52]	; (16e4c <__multadd+0x88>)
   16e18:	21b5      	movs	r1, #181	; 0xb5
   16e1a:	f7fe ff15 	bl	15c48 <__assert_func>
   16e1e:	6922      	ldr	r2, [r4, #16]
   16e20:	3202      	adds	r2, #2
   16e22:	f104 010c 	add.w	r1, r4, #12
   16e26:	0092      	lsls	r2, r2, #2
   16e28:	300c      	adds	r0, #12
   16e2a:	f004 ff59 	bl	1bce0 <memcpy>
   16e2e:	4621      	mov	r1, r4
   16e30:	4638      	mov	r0, r7
   16e32:	f7ff ffa5 	bl	16d80 <_Bfree>
   16e36:	4644      	mov	r4, r8
   16e38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   16e3c:	3501      	adds	r5, #1
   16e3e:	615e      	str	r6, [r3, #20]
   16e40:	6125      	str	r5, [r4, #16]
   16e42:	4620      	mov	r0, r4
   16e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e48:	0003ef2f 	.word	0x0003ef2f
   16e4c:	0003ef40 	.word	0x0003ef40

00016e50 <__i2b>:
   16e50:	b510      	push	{r4, lr}
   16e52:	460c      	mov	r4, r1
   16e54:	2101      	movs	r1, #1
   16e56:	f7ff ff53 	bl	16d00 <_Balloc>
   16e5a:	4602      	mov	r2, r0
   16e5c:	b928      	cbnz	r0, 16e6a <__i2b+0x1a>
   16e5e:	4b05      	ldr	r3, [pc, #20]	; (16e74 <__i2b+0x24>)
   16e60:	4805      	ldr	r0, [pc, #20]	; (16e78 <__i2b+0x28>)
   16e62:	f44f 71a0 	mov.w	r1, #320	; 0x140
   16e66:	f7fe feef 	bl	15c48 <__assert_func>
   16e6a:	2301      	movs	r3, #1
   16e6c:	6144      	str	r4, [r0, #20]
   16e6e:	6103      	str	r3, [r0, #16]
   16e70:	bd10      	pop	{r4, pc}
   16e72:	bf00      	nop
   16e74:	0003ef2f 	.word	0x0003ef2f
   16e78:	0003ef40 	.word	0x0003ef40

00016e7c <__multiply>:
   16e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e80:	4691      	mov	r9, r2
   16e82:	690a      	ldr	r2, [r1, #16]
   16e84:	f8d9 3010 	ldr.w	r3, [r9, #16]
   16e88:	429a      	cmp	r2, r3
   16e8a:	bfb8      	it	lt
   16e8c:	460b      	movlt	r3, r1
   16e8e:	460c      	mov	r4, r1
   16e90:	bfbc      	itt	lt
   16e92:	464c      	movlt	r4, r9
   16e94:	4699      	movlt	r9, r3
   16e96:	6927      	ldr	r7, [r4, #16]
   16e98:	f8d9 a010 	ldr.w	sl, [r9, #16]
   16e9c:	68a3      	ldr	r3, [r4, #8]
   16e9e:	6861      	ldr	r1, [r4, #4]
   16ea0:	eb07 060a 	add.w	r6, r7, sl
   16ea4:	42b3      	cmp	r3, r6
   16ea6:	b085      	sub	sp, #20
   16ea8:	bfb8      	it	lt
   16eaa:	3101      	addlt	r1, #1
   16eac:	f7ff ff28 	bl	16d00 <_Balloc>
   16eb0:	b930      	cbnz	r0, 16ec0 <__multiply+0x44>
   16eb2:	4602      	mov	r2, r0
   16eb4:	4b44      	ldr	r3, [pc, #272]	; (16fc8 <__multiply+0x14c>)
   16eb6:	4845      	ldr	r0, [pc, #276]	; (16fcc <__multiply+0x150>)
   16eb8:	f240 115d 	movw	r1, #349	; 0x15d
   16ebc:	f7fe fec4 	bl	15c48 <__assert_func>
   16ec0:	f100 0514 	add.w	r5, r0, #20
   16ec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   16ec8:	462b      	mov	r3, r5
   16eca:	2200      	movs	r2, #0
   16ecc:	4543      	cmp	r3, r8
   16ece:	d321      	bcc.n	16f14 <__multiply+0x98>
   16ed0:	f104 0314 	add.w	r3, r4, #20
   16ed4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   16ed8:	f109 0314 	add.w	r3, r9, #20
   16edc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   16ee0:	9202      	str	r2, [sp, #8]
   16ee2:	1b3a      	subs	r2, r7, r4
   16ee4:	3a15      	subs	r2, #21
   16ee6:	f022 0203 	bic.w	r2, r2, #3
   16eea:	3204      	adds	r2, #4
   16eec:	f104 0115 	add.w	r1, r4, #21
   16ef0:	428f      	cmp	r7, r1
   16ef2:	bf38      	it	cc
   16ef4:	2204      	movcc	r2, #4
   16ef6:	9201      	str	r2, [sp, #4]
   16ef8:	9a02      	ldr	r2, [sp, #8]
   16efa:	9303      	str	r3, [sp, #12]
   16efc:	429a      	cmp	r2, r3
   16efe:	d80c      	bhi.n	16f1a <__multiply+0x9e>
   16f00:	2e00      	cmp	r6, #0
   16f02:	dd03      	ble.n	16f0c <__multiply+0x90>
   16f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   16f08:	2b00      	cmp	r3, #0
   16f0a:	d05a      	beq.n	16fc2 <__multiply+0x146>
   16f0c:	6106      	str	r6, [r0, #16]
   16f0e:	b005      	add	sp, #20
   16f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f14:	f843 2b04 	str.w	r2, [r3], #4
   16f18:	e7d8      	b.n	16ecc <__multiply+0x50>
   16f1a:	f8b3 a000 	ldrh.w	sl, [r3]
   16f1e:	f1ba 0f00 	cmp.w	sl, #0
   16f22:	d024      	beq.n	16f6e <__multiply+0xf2>
   16f24:	f104 0e14 	add.w	lr, r4, #20
   16f28:	46a9      	mov	r9, r5
   16f2a:	f04f 0c00 	mov.w	ip, #0
   16f2e:	f85e 2b04 	ldr.w	r2, [lr], #4
   16f32:	f8d9 1000 	ldr.w	r1, [r9]
   16f36:	fa1f fb82 	uxth.w	fp, r2
   16f3a:	b289      	uxth	r1, r1
   16f3c:	fb0a 110b 	mla	r1, sl, fp, r1
   16f40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   16f44:	f8d9 2000 	ldr.w	r2, [r9]
   16f48:	4461      	add	r1, ip
   16f4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   16f4e:	fb0a c20b 	mla	r2, sl, fp, ip
   16f52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   16f56:	b289      	uxth	r1, r1
   16f58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   16f5c:	4577      	cmp	r7, lr
   16f5e:	f849 1b04 	str.w	r1, [r9], #4
   16f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   16f66:	d8e2      	bhi.n	16f2e <__multiply+0xb2>
   16f68:	9a01      	ldr	r2, [sp, #4]
   16f6a:	f845 c002 	str.w	ip, [r5, r2]
   16f6e:	9a03      	ldr	r2, [sp, #12]
   16f70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   16f74:	3304      	adds	r3, #4
   16f76:	f1b9 0f00 	cmp.w	r9, #0
   16f7a:	d020      	beq.n	16fbe <__multiply+0x142>
   16f7c:	6829      	ldr	r1, [r5, #0]
   16f7e:	f104 0c14 	add.w	ip, r4, #20
   16f82:	46ae      	mov	lr, r5
   16f84:	f04f 0a00 	mov.w	sl, #0
   16f88:	f8bc b000 	ldrh.w	fp, [ip]
   16f8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   16f90:	fb09 220b 	mla	r2, r9, fp, r2
   16f94:	4492      	add	sl, r2
   16f96:	b289      	uxth	r1, r1
   16f98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   16f9c:	f84e 1b04 	str.w	r1, [lr], #4
   16fa0:	f85c 2b04 	ldr.w	r2, [ip], #4
   16fa4:	f8be 1000 	ldrh.w	r1, [lr]
   16fa8:	0c12      	lsrs	r2, r2, #16
   16faa:	fb09 1102 	mla	r1, r9, r2, r1
   16fae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   16fb2:	4567      	cmp	r7, ip
   16fb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   16fb8:	d8e6      	bhi.n	16f88 <__multiply+0x10c>
   16fba:	9a01      	ldr	r2, [sp, #4]
   16fbc:	50a9      	str	r1, [r5, r2]
   16fbe:	3504      	adds	r5, #4
   16fc0:	e79a      	b.n	16ef8 <__multiply+0x7c>
   16fc2:	3e01      	subs	r6, #1
   16fc4:	e79c      	b.n	16f00 <__multiply+0x84>
   16fc6:	bf00      	nop
   16fc8:	0003ef2f 	.word	0x0003ef2f
   16fcc:	0003ef40 	.word	0x0003ef40

00016fd0 <__pow5mult>:
   16fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16fd4:	4615      	mov	r5, r2
   16fd6:	f012 0203 	ands.w	r2, r2, #3
   16fda:	4606      	mov	r6, r0
   16fdc:	460f      	mov	r7, r1
   16fde:	d007      	beq.n	16ff0 <__pow5mult+0x20>
   16fe0:	4c25      	ldr	r4, [pc, #148]	; (17078 <__pow5mult+0xa8>)
   16fe2:	3a01      	subs	r2, #1
   16fe4:	2300      	movs	r3, #0
   16fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   16fea:	f7ff feeb 	bl	16dc4 <__multadd>
   16fee:	4607      	mov	r7, r0
   16ff0:	10ad      	asrs	r5, r5, #2
   16ff2:	d03d      	beq.n	17070 <__pow5mult+0xa0>
   16ff4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   16ff6:	b97c      	cbnz	r4, 17018 <__pow5mult+0x48>
   16ff8:	2010      	movs	r0, #16
   16ffa:	f7fe fe5d 	bl	15cb8 <malloc>
   16ffe:	4602      	mov	r2, r0
   17000:	6270      	str	r0, [r6, #36]	; 0x24
   17002:	b928      	cbnz	r0, 17010 <__pow5mult+0x40>
   17004:	4b1d      	ldr	r3, [pc, #116]	; (1707c <__pow5mult+0xac>)
   17006:	481e      	ldr	r0, [pc, #120]	; (17080 <__pow5mult+0xb0>)
   17008:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   1700c:	f7fe fe1c 	bl	15c48 <__assert_func>
   17010:	e9c0 4401 	strd	r4, r4, [r0, #4]
   17014:	6004      	str	r4, [r0, #0]
   17016:	60c4      	str	r4, [r0, #12]
   17018:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   1701c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   17020:	b94c      	cbnz	r4, 17036 <__pow5mult+0x66>
   17022:	f240 2171 	movw	r1, #625	; 0x271
   17026:	4630      	mov	r0, r6
   17028:	f7ff ff12 	bl	16e50 <__i2b>
   1702c:	2300      	movs	r3, #0
   1702e:	f8c8 0008 	str.w	r0, [r8, #8]
   17032:	4604      	mov	r4, r0
   17034:	6003      	str	r3, [r0, #0]
   17036:	f04f 0900 	mov.w	r9, #0
   1703a:	07eb      	lsls	r3, r5, #31
   1703c:	d50a      	bpl.n	17054 <__pow5mult+0x84>
   1703e:	4639      	mov	r1, r7
   17040:	4622      	mov	r2, r4
   17042:	4630      	mov	r0, r6
   17044:	f7ff ff1a 	bl	16e7c <__multiply>
   17048:	4639      	mov	r1, r7
   1704a:	4680      	mov	r8, r0
   1704c:	4630      	mov	r0, r6
   1704e:	f7ff fe97 	bl	16d80 <_Bfree>
   17052:	4647      	mov	r7, r8
   17054:	106d      	asrs	r5, r5, #1
   17056:	d00b      	beq.n	17070 <__pow5mult+0xa0>
   17058:	6820      	ldr	r0, [r4, #0]
   1705a:	b938      	cbnz	r0, 1706c <__pow5mult+0x9c>
   1705c:	4622      	mov	r2, r4
   1705e:	4621      	mov	r1, r4
   17060:	4630      	mov	r0, r6
   17062:	f7ff ff0b 	bl	16e7c <__multiply>
   17066:	6020      	str	r0, [r4, #0]
   17068:	f8c0 9000 	str.w	r9, [r0]
   1706c:	4604      	mov	r4, r0
   1706e:	e7e4      	b.n	1703a <__pow5mult+0x6a>
   17070:	4638      	mov	r0, r7
   17072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17076:	bf00      	nop
   17078:	00036470 	.word	0x00036470
   1707c:	0003eebc 	.word	0x0003eebc
   17080:	0003ef40 	.word	0x0003ef40

00017084 <__lshift>:
   17084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17088:	460c      	mov	r4, r1
   1708a:	6849      	ldr	r1, [r1, #4]
   1708c:	6923      	ldr	r3, [r4, #16]
   1708e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   17092:	68a3      	ldr	r3, [r4, #8]
   17094:	4607      	mov	r7, r0
   17096:	4691      	mov	r9, r2
   17098:	ea4f 1a62 	mov.w	sl, r2, asr #5
   1709c:	f108 0601 	add.w	r6, r8, #1
   170a0:	42b3      	cmp	r3, r6
   170a2:	db0b      	blt.n	170bc <__lshift+0x38>
   170a4:	4638      	mov	r0, r7
   170a6:	f7ff fe2b 	bl	16d00 <_Balloc>
   170aa:	4605      	mov	r5, r0
   170ac:	b948      	cbnz	r0, 170c2 <__lshift+0x3e>
   170ae:	4602      	mov	r2, r0
   170b0:	4b2a      	ldr	r3, [pc, #168]	; (1715c <__lshift+0xd8>)
   170b2:	482b      	ldr	r0, [pc, #172]	; (17160 <__lshift+0xdc>)
   170b4:	f240 11d9 	movw	r1, #473	; 0x1d9
   170b8:	f7fe fdc6 	bl	15c48 <__assert_func>
   170bc:	3101      	adds	r1, #1
   170be:	005b      	lsls	r3, r3, #1
   170c0:	e7ee      	b.n	170a0 <__lshift+0x1c>
   170c2:	2300      	movs	r3, #0
   170c4:	f100 0114 	add.w	r1, r0, #20
   170c8:	f100 0210 	add.w	r2, r0, #16
   170cc:	4618      	mov	r0, r3
   170ce:	4553      	cmp	r3, sl
   170d0:	db37      	blt.n	17142 <__lshift+0xbe>
   170d2:	6920      	ldr	r0, [r4, #16]
   170d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   170d8:	f104 0314 	add.w	r3, r4, #20
   170dc:	f019 091f 	ands.w	r9, r9, #31
   170e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   170e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   170e8:	d02f      	beq.n	1714a <__lshift+0xc6>
   170ea:	f1c9 0e20 	rsb	lr, r9, #32
   170ee:	468a      	mov	sl, r1
   170f0:	f04f 0c00 	mov.w	ip, #0
   170f4:	681a      	ldr	r2, [r3, #0]
   170f6:	fa02 f209 	lsl.w	r2, r2, r9
   170fa:	ea42 020c 	orr.w	r2, r2, ip
   170fe:	f84a 2b04 	str.w	r2, [sl], #4
   17102:	f853 2b04 	ldr.w	r2, [r3], #4
   17106:	4298      	cmp	r0, r3
   17108:	fa22 fc0e 	lsr.w	ip, r2, lr
   1710c:	d8f2      	bhi.n	170f4 <__lshift+0x70>
   1710e:	1b03      	subs	r3, r0, r4
   17110:	3b15      	subs	r3, #21
   17112:	f023 0303 	bic.w	r3, r3, #3
   17116:	3304      	adds	r3, #4
   17118:	f104 0215 	add.w	r2, r4, #21
   1711c:	4290      	cmp	r0, r2
   1711e:	bf38      	it	cc
   17120:	2304      	movcc	r3, #4
   17122:	f841 c003 	str.w	ip, [r1, r3]
   17126:	f1bc 0f00 	cmp.w	ip, #0
   1712a:	d001      	beq.n	17130 <__lshift+0xac>
   1712c:	f108 0602 	add.w	r6, r8, #2
   17130:	3e01      	subs	r6, #1
   17132:	4638      	mov	r0, r7
   17134:	612e      	str	r6, [r5, #16]
   17136:	4621      	mov	r1, r4
   17138:	f7ff fe22 	bl	16d80 <_Bfree>
   1713c:	4628      	mov	r0, r5
   1713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17142:	f842 0f04 	str.w	r0, [r2, #4]!
   17146:	3301      	adds	r3, #1
   17148:	e7c1      	b.n	170ce <__lshift+0x4a>
   1714a:	3904      	subs	r1, #4
   1714c:	f853 2b04 	ldr.w	r2, [r3], #4
   17150:	f841 2f04 	str.w	r2, [r1, #4]!
   17154:	4298      	cmp	r0, r3
   17156:	d8f9      	bhi.n	1714c <__lshift+0xc8>
   17158:	e7ea      	b.n	17130 <__lshift+0xac>
   1715a:	bf00      	nop
   1715c:	0003ef2f 	.word	0x0003ef2f
   17160:	0003ef40 	.word	0x0003ef40

00017164 <__mdiff>:
   17164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17168:	460c      	mov	r4, r1
   1716a:	4606      	mov	r6, r0
   1716c:	4611      	mov	r1, r2
   1716e:	4620      	mov	r0, r4
   17170:	4690      	mov	r8, r2
   17172:	f005 f8da 	bl	1c32a <__mcmp>
   17176:	1e05      	subs	r5, r0, #0
   17178:	d110      	bne.n	1719c <__mdiff+0x38>
   1717a:	4629      	mov	r1, r5
   1717c:	4630      	mov	r0, r6
   1717e:	f7ff fdbf 	bl	16d00 <_Balloc>
   17182:	b930      	cbnz	r0, 17192 <__mdiff+0x2e>
   17184:	4b3a      	ldr	r3, [pc, #232]	; (17270 <__mdiff+0x10c>)
   17186:	4602      	mov	r2, r0
   17188:	f240 2132 	movw	r1, #562	; 0x232
   1718c:	4839      	ldr	r0, [pc, #228]	; (17274 <__mdiff+0x110>)
   1718e:	f7fe fd5b 	bl	15c48 <__assert_func>
   17192:	2301      	movs	r3, #1
   17194:	e9c0 3504 	strd	r3, r5, [r0, #16]
   17198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1719c:	bfa4      	itt	ge
   1719e:	4643      	movge	r3, r8
   171a0:	46a0      	movge	r8, r4
   171a2:	4630      	mov	r0, r6
   171a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   171a8:	bfa6      	itte	ge
   171aa:	461c      	movge	r4, r3
   171ac:	2500      	movge	r5, #0
   171ae:	2501      	movlt	r5, #1
   171b0:	f7ff fda6 	bl	16d00 <_Balloc>
   171b4:	b920      	cbnz	r0, 171c0 <__mdiff+0x5c>
   171b6:	4b2e      	ldr	r3, [pc, #184]	; (17270 <__mdiff+0x10c>)
   171b8:	4602      	mov	r2, r0
   171ba:	f44f 7110 	mov.w	r1, #576	; 0x240
   171be:	e7e5      	b.n	1718c <__mdiff+0x28>
   171c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   171c4:	6926      	ldr	r6, [r4, #16]
   171c6:	60c5      	str	r5, [r0, #12]
   171c8:	f104 0914 	add.w	r9, r4, #20
   171cc:	f108 0514 	add.w	r5, r8, #20
   171d0:	f100 0e14 	add.w	lr, r0, #20
   171d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   171d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   171dc:	f108 0210 	add.w	r2, r8, #16
   171e0:	46f2      	mov	sl, lr
   171e2:	2100      	movs	r1, #0
   171e4:	f859 3b04 	ldr.w	r3, [r9], #4
   171e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   171ec:	fa1f f883 	uxth.w	r8, r3
   171f0:	fa11 f18b 	uxtah	r1, r1, fp
   171f4:	0c1b      	lsrs	r3, r3, #16
   171f6:	eba1 0808 	sub.w	r8, r1, r8
   171fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   171fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   17202:	fa1f f888 	uxth.w	r8, r8
   17206:	1419      	asrs	r1, r3, #16
   17208:	454e      	cmp	r6, r9
   1720a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   1720e:	f84a 3b04 	str.w	r3, [sl], #4
   17212:	d8e7      	bhi.n	171e4 <__mdiff+0x80>
   17214:	1b33      	subs	r3, r6, r4
   17216:	3b15      	subs	r3, #21
   17218:	f023 0303 	bic.w	r3, r3, #3
   1721c:	3304      	adds	r3, #4
   1721e:	3415      	adds	r4, #21
   17220:	42a6      	cmp	r6, r4
   17222:	bf38      	it	cc
   17224:	2304      	movcc	r3, #4
   17226:	441d      	add	r5, r3
   17228:	4473      	add	r3, lr
   1722a:	469e      	mov	lr, r3
   1722c:	462e      	mov	r6, r5
   1722e:	4566      	cmp	r6, ip
   17230:	d30e      	bcc.n	17250 <__mdiff+0xec>
   17232:	f10c 0203 	add.w	r2, ip, #3
   17236:	1b52      	subs	r2, r2, r5
   17238:	f022 0203 	bic.w	r2, r2, #3
   1723c:	3d03      	subs	r5, #3
   1723e:	45ac      	cmp	ip, r5
   17240:	bf38      	it	cc
   17242:	2200      	movcc	r2, #0
   17244:	441a      	add	r2, r3
   17246:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1724a:	b17b      	cbz	r3, 1726c <__mdiff+0x108>
   1724c:	6107      	str	r7, [r0, #16]
   1724e:	e7a3      	b.n	17198 <__mdiff+0x34>
   17250:	f856 8b04 	ldr.w	r8, [r6], #4
   17254:	fa11 f288 	uxtah	r2, r1, r8
   17258:	1414      	asrs	r4, r2, #16
   1725a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   1725e:	b292      	uxth	r2, r2
   17260:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   17264:	f84e 2b04 	str.w	r2, [lr], #4
   17268:	1421      	asrs	r1, r4, #16
   1726a:	e7e0      	b.n	1722e <__mdiff+0xca>
   1726c:	3f01      	subs	r7, #1
   1726e:	e7ea      	b.n	17246 <__mdiff+0xe2>
   17270:	0003ef2f 	.word	0x0003ef2f
   17274:	0003ef40 	.word	0x0003ef40

00017278 <__d2b>:
   17278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1727c:	4689      	mov	r9, r1
   1727e:	2101      	movs	r1, #1
   17280:	ec57 6b10 	vmov	r6, r7, d0
   17284:	4690      	mov	r8, r2
   17286:	f7ff fd3b 	bl	16d00 <_Balloc>
   1728a:	4604      	mov	r4, r0
   1728c:	b930      	cbnz	r0, 1729c <__d2b+0x24>
   1728e:	4602      	mov	r2, r0
   17290:	4b25      	ldr	r3, [pc, #148]	; (17328 <__d2b+0xb0>)
   17292:	4826      	ldr	r0, [pc, #152]	; (1732c <__d2b+0xb4>)
   17294:	f240 310a 	movw	r1, #778	; 0x30a
   17298:	f7fe fcd6 	bl	15c48 <__assert_func>
   1729c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   172a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   172a4:	bb35      	cbnz	r5, 172f4 <__d2b+0x7c>
   172a6:	2e00      	cmp	r6, #0
   172a8:	9301      	str	r3, [sp, #4]
   172aa:	d028      	beq.n	172fe <__d2b+0x86>
   172ac:	4668      	mov	r0, sp
   172ae:	9600      	str	r6, [sp, #0]
   172b0:	f005 f80c 	bl	1c2cc <__lo0bits>
   172b4:	9900      	ldr	r1, [sp, #0]
   172b6:	b300      	cbz	r0, 172fa <__d2b+0x82>
   172b8:	9a01      	ldr	r2, [sp, #4]
   172ba:	f1c0 0320 	rsb	r3, r0, #32
   172be:	fa02 f303 	lsl.w	r3, r2, r3
   172c2:	430b      	orrs	r3, r1
   172c4:	40c2      	lsrs	r2, r0
   172c6:	6163      	str	r3, [r4, #20]
   172c8:	9201      	str	r2, [sp, #4]
   172ca:	9b01      	ldr	r3, [sp, #4]
   172cc:	61a3      	str	r3, [r4, #24]
   172ce:	2b00      	cmp	r3, #0
   172d0:	bf14      	ite	ne
   172d2:	2202      	movne	r2, #2
   172d4:	2201      	moveq	r2, #1
   172d6:	6122      	str	r2, [r4, #16]
   172d8:	b1d5      	cbz	r5, 17310 <__d2b+0x98>
   172da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   172de:	4405      	add	r5, r0
   172e0:	f8c9 5000 	str.w	r5, [r9]
   172e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   172e8:	f8c8 0000 	str.w	r0, [r8]
   172ec:	4620      	mov	r0, r4
   172ee:	b003      	add	sp, #12
   172f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   172f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   172f8:	e7d5      	b.n	172a6 <__d2b+0x2e>
   172fa:	6161      	str	r1, [r4, #20]
   172fc:	e7e5      	b.n	172ca <__d2b+0x52>
   172fe:	a801      	add	r0, sp, #4
   17300:	f004 ffe4 	bl	1c2cc <__lo0bits>
   17304:	9b01      	ldr	r3, [sp, #4]
   17306:	6163      	str	r3, [r4, #20]
   17308:	2201      	movs	r2, #1
   1730a:	6122      	str	r2, [r4, #16]
   1730c:	3020      	adds	r0, #32
   1730e:	e7e3      	b.n	172d8 <__d2b+0x60>
   17310:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   17314:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   17318:	f8c9 0000 	str.w	r0, [r9]
   1731c:	6918      	ldr	r0, [r3, #16]
   1731e:	f004 ffb5 	bl	1c28c <__hi0bits>
   17322:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   17326:	e7df      	b.n	172e8 <__d2b+0x70>
   17328:	0003ef2f 	.word	0x0003ef2f
   1732c:	0003ef40 	.word	0x0003ef40

00017330 <_svfiprintf_r>:
   17330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17334:	4698      	mov	r8, r3
   17336:	898b      	ldrh	r3, [r1, #12]
   17338:	061b      	lsls	r3, r3, #24
   1733a:	b09d      	sub	sp, #116	; 0x74
   1733c:	4607      	mov	r7, r0
   1733e:	460d      	mov	r5, r1
   17340:	4614      	mov	r4, r2
   17342:	d50e      	bpl.n	17362 <_svfiprintf_r+0x32>
   17344:	690b      	ldr	r3, [r1, #16]
   17346:	b963      	cbnz	r3, 17362 <_svfiprintf_r+0x32>
   17348:	2140      	movs	r1, #64	; 0x40
   1734a:	f7fe fd11 	bl	15d70 <_malloc_r>
   1734e:	6028      	str	r0, [r5, #0]
   17350:	6128      	str	r0, [r5, #16]
   17352:	b920      	cbnz	r0, 1735e <_svfiprintf_r+0x2e>
   17354:	230c      	movs	r3, #12
   17356:	603b      	str	r3, [r7, #0]
   17358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1735c:	e0d1      	b.n	17502 <_svfiprintf_r+0x1d2>
   1735e:	2340      	movs	r3, #64	; 0x40
   17360:	616b      	str	r3, [r5, #20]
   17362:	2300      	movs	r3, #0
   17364:	9309      	str	r3, [sp, #36]	; 0x24
   17366:	2320      	movs	r3, #32
   17368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1736c:	f8cd 800c 	str.w	r8, [sp, #12]
   17370:	2330      	movs	r3, #48	; 0x30
   17372:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 1751c <_svfiprintf_r+0x1ec>
   17376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1737a:	f04f 0901 	mov.w	r9, #1
   1737e:	4623      	mov	r3, r4
   17380:	469a      	mov	sl, r3
   17382:	f813 2b01 	ldrb.w	r2, [r3], #1
   17386:	b10a      	cbz	r2, 1738c <_svfiprintf_r+0x5c>
   17388:	2a25      	cmp	r2, #37	; 0x25
   1738a:	d1f9      	bne.n	17380 <_svfiprintf_r+0x50>
   1738c:	ebba 0b04 	subs.w	fp, sl, r4
   17390:	d00b      	beq.n	173aa <_svfiprintf_r+0x7a>
   17392:	465b      	mov	r3, fp
   17394:	4622      	mov	r2, r4
   17396:	4629      	mov	r1, r5
   17398:	4638      	mov	r0, r7
   1739a:	f005 f808 	bl	1c3ae <__ssputs_r>
   1739e:	3001      	adds	r0, #1
   173a0:	f000 80aa 	beq.w	174f8 <_svfiprintf_r+0x1c8>
   173a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   173a6:	445a      	add	r2, fp
   173a8:	9209      	str	r2, [sp, #36]	; 0x24
   173aa:	f89a 3000 	ldrb.w	r3, [sl]
   173ae:	2b00      	cmp	r3, #0
   173b0:	f000 80a2 	beq.w	174f8 <_svfiprintf_r+0x1c8>
   173b4:	2300      	movs	r3, #0
   173b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   173ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
   173be:	f10a 0a01 	add.w	sl, sl, #1
   173c2:	9304      	str	r3, [sp, #16]
   173c4:	9307      	str	r3, [sp, #28]
   173c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   173ca:	931a      	str	r3, [sp, #104]	; 0x68
   173cc:	4654      	mov	r4, sl
   173ce:	2205      	movs	r2, #5
   173d0:	f814 1b01 	ldrb.w	r1, [r4], #1
   173d4:	4851      	ldr	r0, [pc, #324]	; (1751c <_svfiprintf_r+0x1ec>)
   173d6:	f7e8 fe93 	bl	100 <memchr>
   173da:	9a04      	ldr	r2, [sp, #16]
   173dc:	b9d8      	cbnz	r0, 17416 <_svfiprintf_r+0xe6>
   173de:	06d0      	lsls	r0, r2, #27
   173e0:	bf44      	itt	mi
   173e2:	2320      	movmi	r3, #32
   173e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   173e8:	0711      	lsls	r1, r2, #28
   173ea:	bf44      	itt	mi
   173ec:	232b      	movmi	r3, #43	; 0x2b
   173ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   173f2:	f89a 3000 	ldrb.w	r3, [sl]
   173f6:	2b2a      	cmp	r3, #42	; 0x2a
   173f8:	d015      	beq.n	17426 <_svfiprintf_r+0xf6>
   173fa:	9a07      	ldr	r2, [sp, #28]
   173fc:	4654      	mov	r4, sl
   173fe:	2000      	movs	r0, #0
   17400:	f04f 0c0a 	mov.w	ip, #10
   17404:	4621      	mov	r1, r4
   17406:	f811 3b01 	ldrb.w	r3, [r1], #1
   1740a:	3b30      	subs	r3, #48	; 0x30
   1740c:	2b09      	cmp	r3, #9
   1740e:	d94e      	bls.n	174ae <_svfiprintf_r+0x17e>
   17410:	b1b0      	cbz	r0, 17440 <_svfiprintf_r+0x110>
   17412:	9207      	str	r2, [sp, #28]
   17414:	e014      	b.n	17440 <_svfiprintf_r+0x110>
   17416:	eba0 0308 	sub.w	r3, r0, r8
   1741a:	fa09 f303 	lsl.w	r3, r9, r3
   1741e:	4313      	orrs	r3, r2
   17420:	9304      	str	r3, [sp, #16]
   17422:	46a2      	mov	sl, r4
   17424:	e7d2      	b.n	173cc <_svfiprintf_r+0x9c>
   17426:	9b03      	ldr	r3, [sp, #12]
   17428:	1d19      	adds	r1, r3, #4
   1742a:	681b      	ldr	r3, [r3, #0]
   1742c:	9103      	str	r1, [sp, #12]
   1742e:	2b00      	cmp	r3, #0
   17430:	bfbb      	ittet	lt
   17432:	425b      	neglt	r3, r3
   17434:	f042 0202 	orrlt.w	r2, r2, #2
   17438:	9307      	strge	r3, [sp, #28]
   1743a:	9307      	strlt	r3, [sp, #28]
   1743c:	bfb8      	it	lt
   1743e:	9204      	strlt	r2, [sp, #16]
   17440:	7823      	ldrb	r3, [r4, #0]
   17442:	2b2e      	cmp	r3, #46	; 0x2e
   17444:	d10c      	bne.n	17460 <_svfiprintf_r+0x130>
   17446:	7863      	ldrb	r3, [r4, #1]
   17448:	2b2a      	cmp	r3, #42	; 0x2a
   1744a:	d135      	bne.n	174b8 <_svfiprintf_r+0x188>
   1744c:	9b03      	ldr	r3, [sp, #12]
   1744e:	1d1a      	adds	r2, r3, #4
   17450:	681b      	ldr	r3, [r3, #0]
   17452:	9203      	str	r2, [sp, #12]
   17454:	2b00      	cmp	r3, #0
   17456:	bfb8      	it	lt
   17458:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1745c:	3402      	adds	r4, #2
   1745e:	9305      	str	r3, [sp, #20]
   17460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1752c <_svfiprintf_r+0x1fc>
   17464:	7821      	ldrb	r1, [r4, #0]
   17466:	2203      	movs	r2, #3
   17468:	4650      	mov	r0, sl
   1746a:	f7e8 fe49 	bl	100 <memchr>
   1746e:	b140      	cbz	r0, 17482 <_svfiprintf_r+0x152>
   17470:	2340      	movs	r3, #64	; 0x40
   17472:	eba0 000a 	sub.w	r0, r0, sl
   17476:	fa03 f000 	lsl.w	r0, r3, r0
   1747a:	9b04      	ldr	r3, [sp, #16]
   1747c:	4303      	orrs	r3, r0
   1747e:	3401      	adds	r4, #1
   17480:	9304      	str	r3, [sp, #16]
   17482:	f814 1b01 	ldrb.w	r1, [r4], #1
   17486:	4826      	ldr	r0, [pc, #152]	; (17520 <_svfiprintf_r+0x1f0>)
   17488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1748c:	2206      	movs	r2, #6
   1748e:	f7e8 fe37 	bl	100 <memchr>
   17492:	2800      	cmp	r0, #0
   17494:	d038      	beq.n	17508 <_svfiprintf_r+0x1d8>
   17496:	4b23      	ldr	r3, [pc, #140]	; (17524 <_svfiprintf_r+0x1f4>)
   17498:	bb1b      	cbnz	r3, 174e2 <_svfiprintf_r+0x1b2>
   1749a:	9b03      	ldr	r3, [sp, #12]
   1749c:	3307      	adds	r3, #7
   1749e:	f023 0307 	bic.w	r3, r3, #7
   174a2:	3308      	adds	r3, #8
   174a4:	9303      	str	r3, [sp, #12]
   174a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   174a8:	4433      	add	r3, r6
   174aa:	9309      	str	r3, [sp, #36]	; 0x24
   174ac:	e767      	b.n	1737e <_svfiprintf_r+0x4e>
   174ae:	fb0c 3202 	mla	r2, ip, r2, r3
   174b2:	460c      	mov	r4, r1
   174b4:	2001      	movs	r0, #1
   174b6:	e7a5      	b.n	17404 <_svfiprintf_r+0xd4>
   174b8:	2300      	movs	r3, #0
   174ba:	3401      	adds	r4, #1
   174bc:	9305      	str	r3, [sp, #20]
   174be:	4619      	mov	r1, r3
   174c0:	f04f 0c0a 	mov.w	ip, #10
   174c4:	4620      	mov	r0, r4
   174c6:	f810 2b01 	ldrb.w	r2, [r0], #1
   174ca:	3a30      	subs	r2, #48	; 0x30
   174cc:	2a09      	cmp	r2, #9
   174ce:	d903      	bls.n	174d8 <_svfiprintf_r+0x1a8>
   174d0:	2b00      	cmp	r3, #0
   174d2:	d0c5      	beq.n	17460 <_svfiprintf_r+0x130>
   174d4:	9105      	str	r1, [sp, #20]
   174d6:	e7c3      	b.n	17460 <_svfiprintf_r+0x130>
   174d8:	fb0c 2101 	mla	r1, ip, r1, r2
   174dc:	4604      	mov	r4, r0
   174de:	2301      	movs	r3, #1
   174e0:	e7f0      	b.n	174c4 <_svfiprintf_r+0x194>
   174e2:	ab03      	add	r3, sp, #12
   174e4:	9300      	str	r3, [sp, #0]
   174e6:	462a      	mov	r2, r5
   174e8:	4b0f      	ldr	r3, [pc, #60]	; (17528 <_svfiprintf_r+0x1f8>)
   174ea:	a904      	add	r1, sp, #16
   174ec:	4638      	mov	r0, r7
   174ee:	f7fe fdc9 	bl	16084 <_printf_float>
   174f2:	1c42      	adds	r2, r0, #1
   174f4:	4606      	mov	r6, r0
   174f6:	d1d6      	bne.n	174a6 <_svfiprintf_r+0x176>
   174f8:	89ab      	ldrh	r3, [r5, #12]
   174fa:	065b      	lsls	r3, r3, #25
   174fc:	f53f af2c 	bmi.w	17358 <_svfiprintf_r+0x28>
   17500:	9809      	ldr	r0, [sp, #36]	; 0x24
   17502:	b01d      	add	sp, #116	; 0x74
   17504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17508:	ab03      	add	r3, sp, #12
   1750a:	9300      	str	r3, [sp, #0]
   1750c:	462a      	mov	r2, r5
   1750e:	4b06      	ldr	r3, [pc, #24]	; (17528 <_svfiprintf_r+0x1f8>)
   17510:	a904      	add	r1, sp, #16
   17512:	4638      	mov	r0, r7
   17514:	f7fe ffec 	bl	164f0 <_printf_i>
   17518:	e7eb      	b.n	174f2 <_svfiprintf_r+0x1c2>
   1751a:	bf00      	nop
   1751c:	0003ee70 	.word	0x0003ee70
   17520:	0003ee7a 	.word	0x0003ee7a
   17524:	00016085 	.word	0x00016085
   17528:	0001c3af 	.word	0x0001c3af
   1752c:	0003ee76 	.word	0x0003ee76

00017530 <_write_r>:
   17530:	b538      	push	{r3, r4, r5, lr}
   17532:	4d07      	ldr	r5, [pc, #28]	; (17550 <_write_r+0x20>)
   17534:	4604      	mov	r4, r0
   17536:	4608      	mov	r0, r1
   17538:	4611      	mov	r1, r2
   1753a:	2200      	movs	r2, #0
   1753c:	602a      	str	r2, [r5, #0]
   1753e:	461a      	mov	r2, r3
   17540:	f000 fcf0 	bl	17f24 <_write>
   17544:	1c43      	adds	r3, r0, #1
   17546:	d102      	bne.n	1754e <_write_r+0x1e>
   17548:	682b      	ldr	r3, [r5, #0]
   1754a:	b103      	cbz	r3, 1754e <_write_r+0x1e>
   1754c:	6023      	str	r3, [r4, #0]
   1754e:	bd38      	pop	{r3, r4, r5, pc}
   17550:	200243e8 	.word	0x200243e8

00017554 <_close_r>:
   17554:	b538      	push	{r3, r4, r5, lr}
   17556:	4d06      	ldr	r5, [pc, #24]	; (17570 <_close_r+0x1c>)
   17558:	2300      	movs	r3, #0
   1755a:	4604      	mov	r4, r0
   1755c:	4608      	mov	r0, r1
   1755e:	602b      	str	r3, [r5, #0]
   17560:	f000 fce4 	bl	17f2c <_close>
   17564:	1c43      	adds	r3, r0, #1
   17566:	d102      	bne.n	1756e <_close_r+0x1a>
   17568:	682b      	ldr	r3, [r5, #0]
   1756a:	b103      	cbz	r3, 1756e <_close_r+0x1a>
   1756c:	6023      	str	r3, [r4, #0]
   1756e:	bd38      	pop	{r3, r4, r5, pc}
   17570:	200243e8 	.word	0x200243e8

00017574 <_fstat_r>:
   17574:	b538      	push	{r3, r4, r5, lr}
   17576:	4d07      	ldr	r5, [pc, #28]	; (17594 <_fstat_r+0x20>)
   17578:	2300      	movs	r3, #0
   1757a:	4604      	mov	r4, r0
   1757c:	4608      	mov	r0, r1
   1757e:	4611      	mov	r1, r2
   17580:	602b      	str	r3, [r5, #0]
   17582:	f000 fce1 	bl	17f48 <_fstat>
   17586:	1c43      	adds	r3, r0, #1
   17588:	d102      	bne.n	17590 <_fstat_r+0x1c>
   1758a:	682b      	ldr	r3, [r5, #0]
   1758c:	b103      	cbz	r3, 17590 <_fstat_r+0x1c>
   1758e:	6023      	str	r3, [r4, #0]
   17590:	bd38      	pop	{r3, r4, r5, pc}
   17592:	bf00      	nop
   17594:	200243e8 	.word	0x200243e8

00017598 <_isatty_r>:
   17598:	b538      	push	{r3, r4, r5, lr}
   1759a:	4d06      	ldr	r5, [pc, #24]	; (175b4 <_isatty_r+0x1c>)
   1759c:	2300      	movs	r3, #0
   1759e:	4604      	mov	r4, r0
   175a0:	4608      	mov	r0, r1
   175a2:	602b      	str	r3, [r5, #0]
   175a4:	f000 fcc7 	bl	17f36 <_isatty>
   175a8:	1c43      	adds	r3, r0, #1
   175aa:	d102      	bne.n	175b2 <_isatty_r+0x1a>
   175ac:	682b      	ldr	r3, [r5, #0]
   175ae:	b103      	cbz	r3, 175b2 <_isatty_r+0x1a>
   175b0:	6023      	str	r3, [r4, #0]
   175b2:	bd38      	pop	{r3, r4, r5, pc}
   175b4:	200243e8 	.word	0x200243e8

000175b8 <_lseek_r>:
   175b8:	b538      	push	{r3, r4, r5, lr}
   175ba:	4d07      	ldr	r5, [pc, #28]	; (175d8 <_lseek_r+0x20>)
   175bc:	4604      	mov	r4, r0
   175be:	4608      	mov	r0, r1
   175c0:	4611      	mov	r1, r2
   175c2:	2200      	movs	r2, #0
   175c4:	602a      	str	r2, [r5, #0]
   175c6:	461a      	mov	r2, r3
   175c8:	f000 fcb3 	bl	17f32 <_lseek>
   175cc:	1c43      	adds	r3, r0, #1
   175ce:	d102      	bne.n	175d6 <_lseek_r+0x1e>
   175d0:	682b      	ldr	r3, [r5, #0]
   175d2:	b103      	cbz	r3, 175d6 <_lseek_r+0x1e>
   175d4:	6023      	str	r3, [r4, #0]
   175d6:	bd38      	pop	{r3, r4, r5, pc}
   175d8:	200243e8 	.word	0x200243e8

000175dc <_read_r>:
   175dc:	b538      	push	{r3, r4, r5, lr}
   175de:	4d07      	ldr	r5, [pc, #28]	; (175fc <_read_r+0x20>)
   175e0:	4604      	mov	r4, r0
   175e2:	4608      	mov	r0, r1
   175e4:	4611      	mov	r1, r2
   175e6:	2200      	movs	r2, #0
   175e8:	602a      	str	r2, [r5, #0]
   175ea:	461a      	mov	r2, r3
   175ec:	f000 fc96 	bl	17f1c <_read>
   175f0:	1c43      	adds	r3, r0, #1
   175f2:	d102      	bne.n	175fa <_read_r+0x1e>
   175f4:	682b      	ldr	r3, [r5, #0]
   175f6:	b103      	cbz	r3, 175fa <_read_r+0x1e>
   175f8:	6023      	str	r3, [r4, #0]
   175fa:	bd38      	pop	{r3, r4, r5, pc}
   175fc:	200243e8 	.word	0x200243e8

00017600 <nrf_cc3xx_platform_init_no_rng>:
   17600:	b510      	push	{r4, lr}
   17602:	4c0a      	ldr	r4, [pc, #40]	; (1762c <nrf_cc3xx_platform_init_no_rng+0x2c>)
   17604:	6823      	ldr	r3, [r4, #0]
   17606:	b11b      	cbz	r3, 17610 <nrf_cc3xx_platform_init_no_rng+0x10>
   17608:	2301      	movs	r3, #1
   1760a:	6023      	str	r3, [r4, #0]
   1760c:	2000      	movs	r0, #0
   1760e:	bd10      	pop	{r4, pc}
   17610:	f000 f8d0 	bl	177b4 <CC_LibInitNoRng>
   17614:	2800      	cmp	r0, #0
   17616:	d0f7      	beq.n	17608 <nrf_cc3xx_platform_init_no_rng+0x8>
   17618:	3801      	subs	r0, #1
   1761a:	2806      	cmp	r0, #6
   1761c:	d803      	bhi.n	17626 <nrf_cc3xx_platform_init_no_rng+0x26>
   1761e:	4b04      	ldr	r3, [pc, #16]	; (17630 <nrf_cc3xx_platform_init_no_rng+0x30>)
   17620:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17624:	bd10      	pop	{r4, pc}
   17626:	4803      	ldr	r0, [pc, #12]	; (17634 <nrf_cc3xx_platform_init_no_rng+0x34>)
   17628:	bd10      	pop	{r4, pc}
   1762a:	bf00      	nop
   1762c:	200243ec 	.word	0x200243ec
   17630:	0003647c 	.word	0x0003647c
   17634:	ffff8ffe 	.word	0xffff8ffe

00017638 <nrf_cc3xx_platform_abort>:
   17638:	f3bf 8f4f 	dsb	sy
   1763c:	4905      	ldr	r1, [pc, #20]	; (17654 <nrf_cc3xx_platform_abort+0x1c>)
   1763e:	4b06      	ldr	r3, [pc, #24]	; (17658 <nrf_cc3xx_platform_abort+0x20>)
   17640:	68ca      	ldr	r2, [r1, #12]
   17642:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17646:	4313      	orrs	r3, r2
   17648:	60cb      	str	r3, [r1, #12]
   1764a:	f3bf 8f4f 	dsb	sy
   1764e:	bf00      	nop
   17650:	e7fd      	b.n	1764e <nrf_cc3xx_platform_abort+0x16>
   17652:	bf00      	nop
   17654:	e000ed00 	.word	0xe000ed00
   17658:	05fa0004 	.word	0x05fa0004

0001765c <CC_PalAbort>:
   1765c:	b410      	push	{r4}
   1765e:	4b0a      	ldr	r3, [pc, #40]	; (17688 <CC_PalAbort+0x2c>)
   17660:	490a      	ldr	r1, [pc, #40]	; (1768c <CC_PalAbort+0x30>)
   17662:	4c0b      	ldr	r4, [pc, #44]	; (17690 <CC_PalAbort+0x34>)
   17664:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   17668:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1766c:	6849      	ldr	r1, [r1, #4]
   1766e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   17672:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   17676:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1767a:	2300      	movs	r3, #0
   1767c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   17680:	f85d 4b04 	ldr.w	r4, [sp], #4
   17684:	4708      	bx	r1
   17686:	bf00      	nop
   17688:	5002b000 	.word	0x5002b000
   1768c:	20000528 	.word	0x20000528
   17690:	5002a000 	.word	0x5002a000

00017694 <nrf_cc3xx_platform_set_abort>:
   17694:	e9d0 1200 	ldrd	r1, r2, [r0]
   17698:	4b01      	ldr	r3, [pc, #4]	; (176a0 <nrf_cc3xx_platform_set_abort+0xc>)
   1769a:	e9c3 1200 	strd	r1, r2, [r3]
   1769e:	4770      	bx	lr
   176a0:	20000528 	.word	0x20000528

000176a4 <mutex_free>:
   176a4:	b510      	push	{r4, lr}
   176a6:	4604      	mov	r4, r0
   176a8:	b130      	cbz	r0, 176b8 <mutex_free+0x14>
   176aa:	6863      	ldr	r3, [r4, #4]
   176ac:	06db      	lsls	r3, r3, #27
   176ae:	d502      	bpl.n	176b6 <mutex_free+0x12>
   176b0:	2300      	movs	r3, #0
   176b2:	6023      	str	r3, [r4, #0]
   176b4:	6063      	str	r3, [r4, #4]
   176b6:	bd10      	pop	{r4, pc}
   176b8:	4b02      	ldr	r3, [pc, #8]	; (176c4 <mutex_free+0x20>)
   176ba:	4803      	ldr	r0, [pc, #12]	; (176c8 <mutex_free+0x24>)
   176bc:	685b      	ldr	r3, [r3, #4]
   176be:	4798      	blx	r3
   176c0:	e7f3      	b.n	176aa <mutex_free+0x6>
   176c2:	bf00      	nop
   176c4:	20000528 	.word	0x20000528
   176c8:	00036498 	.word	0x00036498

000176cc <mutex_lock>:
   176cc:	b1b0      	cbz	r0, 176fc <mutex_lock+0x30>
   176ce:	6843      	ldr	r3, [r0, #4]
   176d0:	b193      	cbz	r3, 176f8 <mutex_lock+0x2c>
   176d2:	06db      	lsls	r3, r3, #27
   176d4:	d50e      	bpl.n	176f4 <mutex_lock+0x28>
   176d6:	2301      	movs	r3, #1
   176d8:	e850 2f00 	ldrex	r2, [r0]
   176dc:	4619      	mov	r1, r3
   176de:	e840 1c00 	strex	ip, r1, [r0]
   176e2:	f09c 0f00 	teq	ip, #0
   176e6:	d1f7      	bne.n	176d8 <mutex_lock+0xc>
   176e8:	2a01      	cmp	r2, #1
   176ea:	d0f5      	beq.n	176d8 <mutex_lock+0xc>
   176ec:	f3bf 8f5f 	dmb	sy
   176f0:	2000      	movs	r0, #0
   176f2:	4770      	bx	lr
   176f4:	4803      	ldr	r0, [pc, #12]	; (17704 <mutex_lock+0x38>)
   176f6:	4770      	bx	lr
   176f8:	4803      	ldr	r0, [pc, #12]	; (17708 <mutex_lock+0x3c>)
   176fa:	4770      	bx	lr
   176fc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   17700:	4770      	bx	lr
   17702:	bf00      	nop
   17704:	ffff8fe9 	.word	0xffff8fe9
   17708:	ffff8fea 	.word	0xffff8fea

0001770c <mutex_unlock>:
   1770c:	b168      	cbz	r0, 1772a <mutex_unlock+0x1e>
   1770e:	6843      	ldr	r3, [r0, #4]
   17710:	b13b      	cbz	r3, 17722 <mutex_unlock+0x16>
   17712:	06db      	lsls	r3, r3, #27
   17714:	d507      	bpl.n	17726 <mutex_unlock+0x1a>
   17716:	f3bf 8f5f 	dmb	sy
   1771a:	2300      	movs	r3, #0
   1771c:	6003      	str	r3, [r0, #0]
   1771e:	4618      	mov	r0, r3
   17720:	4770      	bx	lr
   17722:	4803      	ldr	r0, [pc, #12]	; (17730 <mutex_unlock+0x24>)
   17724:	4770      	bx	lr
   17726:	4803      	ldr	r0, [pc, #12]	; (17734 <mutex_unlock+0x28>)
   17728:	4770      	bx	lr
   1772a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1772e:	4770      	bx	lr
   17730:	ffff8fea 	.word	0xffff8fea
   17734:	ffff8fe9 	.word	0xffff8fe9

00017738 <mutex_init>:
   17738:	b510      	push	{r4, lr}
   1773a:	4604      	mov	r4, r0
   1773c:	b120      	cbz	r0, 17748 <mutex_init+0x10>
   1773e:	2200      	movs	r2, #0
   17740:	2311      	movs	r3, #17
   17742:	6022      	str	r2, [r4, #0]
   17744:	6063      	str	r3, [r4, #4]
   17746:	bd10      	pop	{r4, pc}
   17748:	4801      	ldr	r0, [pc, #4]	; (17750 <mutex_init+0x18>)
   1774a:	f7ff ff87 	bl	1765c <CC_PalAbort>
   1774e:	e7f6      	b.n	1773e <mutex_init+0x6>
   17750:	000364c0 	.word	0x000364c0

00017754 <nrf_cc3xx_platform_set_mutexes>:
   17754:	b570      	push	{r4, r5, r6, lr}
   17756:	e9d0 2300 	ldrd	r2, r3, [r0]
   1775a:	4c13      	ldr	r4, [pc, #76]	; (177a8 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1775c:	4d13      	ldr	r5, [pc, #76]	; (177ac <nrf_cc3xx_platform_set_mutexes+0x58>)
   1775e:	6063      	str	r3, [r4, #4]
   17760:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   17764:	e9c4 3002 	strd	r3, r0, [r4, #8]
   17768:	6022      	str	r2, [r4, #0]
   1776a:	4b11      	ldr	r3, [pc, #68]	; (177b0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1776c:	6808      	ldr	r0, [r1, #0]
   1776e:	6018      	str	r0, [r3, #0]
   17770:	6848      	ldr	r0, [r1, #4]
   17772:	6058      	str	r0, [r3, #4]
   17774:	6888      	ldr	r0, [r1, #8]
   17776:	6098      	str	r0, [r3, #8]
   17778:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   1777c:	60d8      	str	r0, [r3, #12]
   1777e:	6119      	str	r1, [r3, #16]
   17780:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17784:	06db      	lsls	r3, r3, #27
   17786:	d50d      	bpl.n	177a4 <nrf_cc3xx_platform_set_mutexes+0x50>
   17788:	2300      	movs	r3, #0
   1778a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   1778e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   17792:	f505 708a 	add.w	r0, r5, #276	; 0x114
   17796:	4790      	blx	r2
   17798:	6823      	ldr	r3, [r4, #0]
   1779a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1779e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   177a2:	4718      	bx	r3
   177a4:	bd70      	pop	{r4, r5, r6, pc}
   177a6:	bf00      	nop
   177a8:	20000538 	.word	0x20000538
   177ac:	20024404 	.word	0x20024404
   177b0:	20000548 	.word	0x20000548

000177b4 <CC_LibInitNoRng>:
   177b4:	b538      	push	{r3, r4, r5, lr}
   177b6:	f000 f82f 	bl	17818 <CC_HalInit>
   177ba:	b120      	cbz	r0, 177c6 <CC_LibInitNoRng+0x12>
   177bc:	2403      	movs	r4, #3
   177be:	f000 f863 	bl	17888 <CC_PalTerminate>
   177c2:	4620      	mov	r0, r4
   177c4:	bd38      	pop	{r3, r4, r5, pc}
   177c6:	f000 f831 	bl	1782c <CC_PalInit>
   177ca:	b998      	cbnz	r0, 177f4 <CC_LibInitNoRng+0x40>
   177cc:	f000 f8ac 	bl	17928 <CC_PalPowerSaveModeSelect>
   177d0:	b998      	cbnz	r0, 177fa <CC_LibInitNoRng+0x46>
   177d2:	4d0f      	ldr	r5, [pc, #60]	; (17810 <CC_LibInitNoRng+0x5c>)
   177d4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   177d8:	0e1b      	lsrs	r3, r3, #24
   177da:	2bf0      	cmp	r3, #240	; 0xf0
   177dc:	d108      	bne.n	177f0 <CC_LibInitNoRng+0x3c>
   177de:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
   177e2:	4b0c      	ldr	r3, [pc, #48]	; (17814 <CC_LibInitNoRng+0x60>)
   177e4:	429a      	cmp	r2, r3
   177e6:	d00a      	beq.n	177fe <CC_LibInitNoRng+0x4a>
   177e8:	2407      	movs	r4, #7
   177ea:	f000 f817 	bl	1781c <CC_HalTerminate>
   177ee:	e7e6      	b.n	177be <CC_LibInitNoRng+0xa>
   177f0:	2406      	movs	r4, #6
   177f2:	e7fa      	b.n	177ea <CC_LibInitNoRng+0x36>
   177f4:	2404      	movs	r4, #4
   177f6:	4620      	mov	r0, r4
   177f8:	bd38      	pop	{r3, r4, r5, pc}
   177fa:	2400      	movs	r4, #0
   177fc:	e7f5      	b.n	177ea <CC_LibInitNoRng+0x36>
   177fe:	2001      	movs	r0, #1
   17800:	f000 f892 	bl	17928 <CC_PalPowerSaveModeSelect>
   17804:	4604      	mov	r4, r0
   17806:	2800      	cmp	r0, #0
   17808:	d1f7      	bne.n	177fa <CC_LibInitNoRng+0x46>
   1780a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
   1780e:	e7d8      	b.n	177c2 <CC_LibInitNoRng+0xe>
   17810:	5002b000 	.word	0x5002b000
   17814:	20e00000 	.word	0x20e00000

00017818 <CC_HalInit>:
   17818:	2000      	movs	r0, #0
   1781a:	4770      	bx	lr

0001781c <CC_HalTerminate>:
   1781c:	2000      	movs	r0, #0
   1781e:	4770      	bx	lr

00017820 <CC_HalMaskInterrupt>:
   17820:	4b01      	ldr	r3, [pc, #4]	; (17828 <CC_HalMaskInterrupt+0x8>)
   17822:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   17826:	4770      	bx	lr
   17828:	5002b000 	.word	0x5002b000

0001782c <CC_PalInit>:
   1782c:	b510      	push	{r4, lr}
   1782e:	4811      	ldr	r0, [pc, #68]	; (17874 <CC_PalInit+0x48>)
   17830:	f000 f848 	bl	178c4 <CC_PalMutexCreate>
   17834:	b100      	cbz	r0, 17838 <CC_PalInit+0xc>
   17836:	bd10      	pop	{r4, pc}
   17838:	480f      	ldr	r0, [pc, #60]	; (17878 <CC_PalInit+0x4c>)
   1783a:	f000 f843 	bl	178c4 <CC_PalMutexCreate>
   1783e:	2800      	cmp	r0, #0
   17840:	d1f9      	bne.n	17836 <CC_PalInit+0xa>
   17842:	4c0e      	ldr	r4, [pc, #56]	; (1787c <CC_PalInit+0x50>)
   17844:	4620      	mov	r0, r4
   17846:	f000 f83d 	bl	178c4 <CC_PalMutexCreate>
   1784a:	2800      	cmp	r0, #0
   1784c:	d1f3      	bne.n	17836 <CC_PalInit+0xa>
   1784e:	4b0c      	ldr	r3, [pc, #48]	; (17880 <CC_PalInit+0x54>)
   17850:	480c      	ldr	r0, [pc, #48]	; (17884 <CC_PalInit+0x58>)
   17852:	601c      	str	r4, [r3, #0]
   17854:	f000 f836 	bl	178c4 <CC_PalMutexCreate>
   17858:	4601      	mov	r1, r0
   1785a:	2800      	cmp	r0, #0
   1785c:	d1eb      	bne.n	17836 <CC_PalInit+0xa>
   1785e:	f000 f82d 	bl	178bc <CC_PalDmaInit>
   17862:	4604      	mov	r4, r0
   17864:	b108      	cbz	r0, 1786a <CC_PalInit+0x3e>
   17866:	4620      	mov	r0, r4
   17868:	bd10      	pop	{r4, pc}
   1786a:	f000 f83f 	bl	178ec <CC_PalPowerSaveModeInit>
   1786e:	4620      	mov	r0, r4
   17870:	e7fa      	b.n	17868 <CC_PalInit+0x3c>
   17872:	bf00      	nop
   17874:	20000580 	.word	0x20000580
   17878:	20000574 	.word	0x20000574
   1787c:	2000057c 	.word	0x2000057c
   17880:	20000584 	.word	0x20000584
   17884:	20000578 	.word	0x20000578

00017888 <CC_PalTerminate>:
   17888:	b508      	push	{r3, lr}
   1788a:	4808      	ldr	r0, [pc, #32]	; (178ac <CC_PalTerminate+0x24>)
   1788c:	f000 f824 	bl	178d8 <CC_PalMutexDestroy>
   17890:	4807      	ldr	r0, [pc, #28]	; (178b0 <CC_PalTerminate+0x28>)
   17892:	f000 f821 	bl	178d8 <CC_PalMutexDestroy>
   17896:	4807      	ldr	r0, [pc, #28]	; (178b4 <CC_PalTerminate+0x2c>)
   17898:	f000 f81e 	bl	178d8 <CC_PalMutexDestroy>
   1789c:	4806      	ldr	r0, [pc, #24]	; (178b8 <CC_PalTerminate+0x30>)
   1789e:	f000 f81b 	bl	178d8 <CC_PalMutexDestroy>
   178a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   178a6:	f000 b80b 	b.w	178c0 <CC_PalDmaTerminate>
   178aa:	bf00      	nop
   178ac:	20000580 	.word	0x20000580
   178b0:	20000574 	.word	0x20000574
   178b4:	2000057c 	.word	0x2000057c
   178b8:	20000578 	.word	0x20000578

000178bc <CC_PalDmaInit>:
   178bc:	2000      	movs	r0, #0
   178be:	4770      	bx	lr

000178c0 <CC_PalDmaTerminate>:
   178c0:	4770      	bx	lr
   178c2:	bf00      	nop

000178c4 <CC_PalMutexCreate>:
   178c4:	b508      	push	{r3, lr}
   178c6:	4b03      	ldr	r3, [pc, #12]	; (178d4 <CC_PalMutexCreate+0x10>)
   178c8:	6802      	ldr	r2, [r0, #0]
   178ca:	681b      	ldr	r3, [r3, #0]
   178cc:	6810      	ldr	r0, [r2, #0]
   178ce:	4798      	blx	r3
   178d0:	2000      	movs	r0, #0
   178d2:	bd08      	pop	{r3, pc}
   178d4:	20000538 	.word	0x20000538

000178d8 <CC_PalMutexDestroy>:
   178d8:	b508      	push	{r3, lr}
   178da:	4b03      	ldr	r3, [pc, #12]	; (178e8 <CC_PalMutexDestroy+0x10>)
   178dc:	6802      	ldr	r2, [r0, #0]
   178de:	685b      	ldr	r3, [r3, #4]
   178e0:	6810      	ldr	r0, [r2, #0]
   178e2:	4798      	blx	r3
   178e4:	2000      	movs	r0, #0
   178e6:	bd08      	pop	{r3, pc}
   178e8:	20000538 	.word	0x20000538

000178ec <CC_PalPowerSaveModeInit>:
   178ec:	b570      	push	{r4, r5, r6, lr}
   178ee:	4c09      	ldr	r4, [pc, #36]	; (17914 <CC_PalPowerSaveModeInit+0x28>)
   178f0:	4d09      	ldr	r5, [pc, #36]	; (17918 <CC_PalPowerSaveModeInit+0x2c>)
   178f2:	6920      	ldr	r0, [r4, #16]
   178f4:	68ab      	ldr	r3, [r5, #8]
   178f6:	4798      	blx	r3
   178f8:	b118      	cbz	r0, 17902 <CC_PalPowerSaveModeInit+0x16>
   178fa:	4b08      	ldr	r3, [pc, #32]	; (1791c <CC_PalPowerSaveModeInit+0x30>)
   178fc:	4808      	ldr	r0, [pc, #32]	; (17920 <CC_PalPowerSaveModeInit+0x34>)
   178fe:	685b      	ldr	r3, [r3, #4]
   17900:	4798      	blx	r3
   17902:	4a08      	ldr	r2, [pc, #32]	; (17924 <CC_PalPowerSaveModeInit+0x38>)
   17904:	68eb      	ldr	r3, [r5, #12]
   17906:	6920      	ldr	r0, [r4, #16]
   17908:	2100      	movs	r1, #0
   1790a:	6011      	str	r1, [r2, #0]
   1790c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17910:	4718      	bx	r3
   17912:	bf00      	nop
   17914:	20000548 	.word	0x20000548
   17918:	20000538 	.word	0x20000538
   1791c:	20000528 	.word	0x20000528
   17920:	000364e4 	.word	0x000364e4
   17924:	20024400 	.word	0x20024400

00017928 <CC_PalPowerSaveModeSelect>:
   17928:	b570      	push	{r4, r5, r6, lr}
   1792a:	4d1b      	ldr	r5, [pc, #108]	; (17998 <CC_PalPowerSaveModeSelect+0x70>)
   1792c:	4e1b      	ldr	r6, [pc, #108]	; (1799c <CC_PalPowerSaveModeSelect+0x74>)
   1792e:	4604      	mov	r4, r0
   17930:	68b2      	ldr	r2, [r6, #8]
   17932:	6928      	ldr	r0, [r5, #16]
   17934:	4790      	blx	r2
   17936:	b9f8      	cbnz	r0, 17978 <CC_PalPowerSaveModeSelect+0x50>
   17938:	b15c      	cbz	r4, 17952 <CC_PalPowerSaveModeSelect+0x2a>
   1793a:	4c19      	ldr	r4, [pc, #100]	; (179a0 <CC_PalPowerSaveModeSelect+0x78>)
   1793c:	6823      	ldr	r3, [r4, #0]
   1793e:	b1b3      	cbz	r3, 1796e <CC_PalPowerSaveModeSelect+0x46>
   17940:	2b01      	cmp	r3, #1
   17942:	d01b      	beq.n	1797c <CC_PalPowerSaveModeSelect+0x54>
   17944:	3b01      	subs	r3, #1
   17946:	6023      	str	r3, [r4, #0]
   17948:	6928      	ldr	r0, [r5, #16]
   1794a:	68f3      	ldr	r3, [r6, #12]
   1794c:	4798      	blx	r3
   1794e:	2000      	movs	r0, #0
   17950:	bd70      	pop	{r4, r5, r6, pc}
   17952:	4c13      	ldr	r4, [pc, #76]	; (179a0 <CC_PalPowerSaveModeSelect+0x78>)
   17954:	6821      	ldr	r1, [r4, #0]
   17956:	b941      	cbnz	r1, 1796a <CC_PalPowerSaveModeSelect+0x42>
   17958:	4b12      	ldr	r3, [pc, #72]	; (179a4 <CC_PalPowerSaveModeSelect+0x7c>)
   1795a:	2201      	movs	r2, #1
   1795c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17960:	4a11      	ldr	r2, [pc, #68]	; (179a8 <CC_PalPowerSaveModeSelect+0x80>)
   17962:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   17966:	2b00      	cmp	r3, #0
   17968:	d1fb      	bne.n	17962 <CC_PalPowerSaveModeSelect+0x3a>
   1796a:	3101      	adds	r1, #1
   1796c:	6021      	str	r1, [r4, #0]
   1796e:	68f3      	ldr	r3, [r6, #12]
   17970:	6928      	ldr	r0, [r5, #16]
   17972:	4798      	blx	r3
   17974:	2000      	movs	r0, #0
   17976:	bd70      	pop	{r4, r5, r6, pc}
   17978:	480c      	ldr	r0, [pc, #48]	; (179ac <CC_PalPowerSaveModeSelect+0x84>)
   1797a:	bd70      	pop	{r4, r5, r6, pc}
   1797c:	4a0a      	ldr	r2, [pc, #40]	; (179a8 <CC_PalPowerSaveModeSelect+0x80>)
   1797e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   17982:	2b00      	cmp	r3, #0
   17984:	d1fb      	bne.n	1797e <CC_PalPowerSaveModeSelect+0x56>
   17986:	4a07      	ldr	r2, [pc, #28]	; (179a4 <CC_PalPowerSaveModeSelect+0x7c>)
   17988:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1798c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   17990:	f7ff ff46 	bl	17820 <CC_HalMaskInterrupt>
   17994:	6823      	ldr	r3, [r4, #0]
   17996:	e7d5      	b.n	17944 <CC_PalPowerSaveModeSelect+0x1c>
   17998:	20000548 	.word	0x20000548
   1799c:	20000538 	.word	0x20000538
   179a0:	20024400 	.word	0x20024400
   179a4:	5002a000 	.word	0x5002a000
   179a8:	5002b000 	.word	0x5002b000
   179ac:	ffff8fe9 	.word	0xffff8fe9

000179b0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   179b0:	4770      	bx	lr

000179b2 <z_log_msg2_static_create.constprop.0>:
   179b2:	2300      	movs	r3, #0
   179b4:	f7ef bfcc 	b.w	7950 <z_impl_z_log_msg2_static_create>

000179b8 <cbpprintf_external>:
{
   179b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   179bc:	460e      	mov	r6, r1
   179be:	4607      	mov	r7, r0
   179c0:	4611      	mov	r1, r2
	if (buf == NULL) {
   179c2:	461d      	mov	r5, r3
   179c4:	b31b      	cbz	r3, 17a0e <cbpprintf_external+0x56>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   179c6:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
   179c8:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
   179ca:	f893 9001 	ldrb.w	r9, [r3, #1]
	rws_nbr   = buf[3];
   179ce:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   179d0:	441c      	add	r4, r3
   179d2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   179d6:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   179d8:	f04f 0800 	mov.w	r8, #0
   179dc:	45c8      	cmp	r8, r9
   179de:	d308      	bcc.n	179f2 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
   179e0:	686a      	ldr	r2, [r5, #4]
   179e2:	f105 0308 	add.w	r3, r5, #8
   179e6:	4638      	mov	r0, r7
   179e8:	46b4      	mov	ip, r6
}
   179ea:	b003      	add	sp, #12
   179ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return formatter(out, ctx, fmt, u.ap);
   179f0:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   179f2:	f814 3b01 	ldrb.w	r3, [r4], #1
   179f6:	9101      	str	r1, [sp, #4]
		*ps = s;
   179f8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   179fc:	4620      	mov	r0, r4
   179fe:	f7e9 fad1 	bl	fa4 <strlen>
   17a02:	3001      	adds	r0, #1
	for (i = 0; i < s_nbr; i++) {
   17a04:	9901      	ldr	r1, [sp, #4]
		s += strlen(s) + 1;
   17a06:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   17a08:	f108 0801 	add.w	r8, r8, #1
   17a0c:	e7e6      	b.n	179dc <cbpprintf_external+0x24>
}
   17a0e:	f06f 0015 	mvn.w	r0, #21
   17a12:	b003      	add	sp, #12
   17a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00017a18 <sys_notify_validate>:
	if (notify == NULL) {
   17a18:	b160      	cbz	r0, 17a34 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   17a1a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   17a1c:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   17a20:	2b01      	cmp	r3, #1
   17a22:	d003      	beq.n	17a2c <sys_notify_validate+0x14>
   17a24:	2b03      	cmp	r3, #3
   17a26:	d105      	bne.n	17a34 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
   17a28:	6803      	ldr	r3, [r0, #0]
   17a2a:	b11b      	cbz	r3, 17a34 <sys_notify_validate+0x1c>
		notify->result = 0;
   17a2c:	2300      	movs	r3, #0
   17a2e:	6083      	str	r3, [r0, #8]
   17a30:	4618      	mov	r0, r3
   17a32:	4770      	bx	lr
		return -EINVAL;
   17a34:	f06f 0015 	mvn.w	r0, #21
}
   17a38:	4770      	bx	lr

00017a3a <arch_printk_char_out>:
}
   17a3a:	2000      	movs	r0, #0
   17a3c:	4770      	bx	lr

00017a3e <str_out>:
{
   17a3e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   17a40:	688a      	ldr	r2, [r1, #8]
   17a42:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   17a44:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   17a46:	b114      	cbz	r4, 17a4e <str_out+0x10>
   17a48:	684b      	ldr	r3, [r1, #4]
   17a4a:	4293      	cmp	r3, r2
   17a4c:	dc01      	bgt.n	17a52 <str_out+0x14>
		ctx->count++;
   17a4e:	608d      	str	r5, [r1, #8]
}
   17a50:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   17a52:	3b01      	subs	r3, #1
   17a54:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   17a56:	bf08      	it	eq
   17a58:	2200      	moveq	r2, #0
   17a5a:	608d      	str	r5, [r1, #8]
   17a5c:	bf0c      	ite	eq
   17a5e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   17a60:	54a0      	strbne	r0, [r4, r2]
   17a62:	e7f5      	b.n	17a50 <str_out+0x12>

00017a64 <vprintk>:
		z_log_vprintk(fmt, ap);
   17a64:	f000 b9d8 	b.w	17e18 <z_log_vprintk>

00017a68 <printk>:
{
   17a68:	b40f      	push	{r0, r1, r2, r3}
   17a6a:	b507      	push	{r0, r1, r2, lr}
   17a6c:	a904      	add	r1, sp, #16
   17a6e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   17a72:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   17a74:	f000 f9d0 	bl	17e18 <z_log_vprintk>
}
   17a78:	b003      	add	sp, #12
   17a7a:	f85d eb04 	ldr.w	lr, [sp], #4
   17a7e:	b004      	add	sp, #16
   17a80:	4770      	bx	lr

00017a82 <snprintk>:
{
   17a82:	b40c      	push	{r2, r3}
   17a84:	b507      	push	{r0, r1, r2, lr}
   17a86:	ab04      	add	r3, sp, #16
   17a88:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   17a8c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   17a8e:	f7ee fc2b 	bl	62e8 <vsnprintk>
}
   17a92:	b003      	add	sp, #12
   17a94:	f85d eb04 	ldr.w	lr, [sp], #4
   17a98:	b002      	add	sp, #8
   17a9a:	4770      	bx	lr

00017a9c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17a9c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   17a9e:	f013 0307 	ands.w	r3, r3, #7
   17aa2:	d105      	bne.n	17ab0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   17aa4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   17aa6:	2b00      	cmp	r3, #0
   17aa8:	bf0c      	ite	eq
   17aaa:	2000      	moveq	r0, #0
   17aac:	2003      	movne	r0, #3
   17aae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   17ab0:	2b02      	cmp	r3, #2
   17ab2:	d105      	bne.n	17ac0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   17ab4:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   17ab6:	2b00      	cmp	r3, #0
   17ab8:	bf14      	ite	ne
   17aba:	2000      	movne	r0, #0
   17abc:	2004      	moveq	r0, #4
   17abe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   17ac0:	2b01      	cmp	r3, #1
   17ac2:	d105      	bne.n	17ad0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   17ac4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   17ac6:	2b00      	cmp	r3, #0
   17ac8:	bf0c      	ite	eq
   17aca:	2000      	moveq	r0, #0
   17acc:	2005      	movne	r0, #5
   17ace:	4770      	bx	lr
	int evt = EVT_NOP;
   17ad0:	2000      	movs	r0, #0
}
   17ad2:	4770      	bx	lr

00017ad4 <notify_one>:
{
   17ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17ad6:	460d      	mov	r5, r1
   17ad8:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   17ada:	4619      	mov	r1, r3
   17adc:	1d28      	adds	r0, r5, #4
{
   17ade:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   17ae0:	9300      	str	r3, [sp, #0]
   17ae2:	f7ee fbdb 	bl	629c <sys_notify_finalize>
	if (cb) {
   17ae6:	4604      	mov	r4, r0
   17ae8:	b140      	cbz	r0, 17afc <notify_one+0x28>
		cb(mgr, cli, state, res);
   17aea:	e9dd 3200 	ldrd	r3, r2, [sp]
   17aee:	4629      	mov	r1, r5
   17af0:	4630      	mov	r0, r6
   17af2:	46a4      	mov	ip, r4
}
   17af4:	b002      	add	sp, #8
   17af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   17afa:	4760      	bx	ip
}
   17afc:	b002      	add	sp, #8
   17afe:	bd70      	pop	{r4, r5, r6, pc}

00017b00 <validate_args>:
{
   17b00:	b510      	push	{r4, lr}
   17b02:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   17b04:	b140      	cbz	r0, 17b18 <validate_args+0x18>
   17b06:	b139      	cbz	r1, 17b18 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   17b08:	1d08      	adds	r0, r1, #4
   17b0a:	f7ff ff85 	bl	17a18 <sys_notify_validate>
	if ((rv == 0)
   17b0e:	b928      	cbnz	r0, 17b1c <validate_args+0x1c>
	    && ((cli->notify.flags
   17b10:	68a3      	ldr	r3, [r4, #8]
   17b12:	f033 0303 	bics.w	r3, r3, #3
   17b16:	d001      	beq.n	17b1c <validate_args+0x1c>
		rv = -EINVAL;
   17b18:	f06f 0015 	mvn.w	r0, #21
}
   17b1c:	bd10      	pop	{r4, pc}

00017b1e <onoff_manager_init>:
{
   17b1e:	b538      	push	{r3, r4, r5, lr}
   17b20:	460c      	mov	r4, r1
	if ((mgr == NULL)
   17b22:	4605      	mov	r5, r0
   17b24:	b158      	cbz	r0, 17b3e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   17b26:	b151      	cbz	r1, 17b3e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   17b28:	680b      	ldr	r3, [r1, #0]
   17b2a:	b143      	cbz	r3, 17b3e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   17b2c:	684b      	ldr	r3, [r1, #4]
   17b2e:	b133      	cbz	r3, 17b3e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   17b30:	2220      	movs	r2, #32
   17b32:	2100      	movs	r1, #0
   17b34:	f004 f90f 	bl	1bd56 <memset>
   17b38:	612c      	str	r4, [r5, #16]
	return 0;
   17b3a:	2000      	movs	r0, #0
}
   17b3c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17b3e:	f06f 0015 	mvn.w	r0, #21
   17b42:	e7fb      	b.n	17b3c <onoff_manager_init+0x1e>

00017b44 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   17b44:	4604      	mov	r4, r0
   17b46:	b508      	push	{r3, lr}
   17b48:	4608      	mov	r0, r1
   17b4a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   17b4c:	461a      	mov	r2, r3
   17b4e:	47a0      	blx	r4
	return z_impl_z_current_get();
   17b50:	f7f8 fa90 	bl	10074 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   17b54:	f7f1 f936 	bl	8dc4 <z_impl_k_thread_abort>

00017b58 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   17b58:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   17b5c:	8848      	ldrh	r0, [r1, #2]
}
   17b5e:	0840      	lsrs	r0, r0, #1
   17b60:	4770      	bx	lr

00017b62 <free_list_add>:
{
   17b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b64:	460c      	mov	r4, r1
   17b66:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   17b68:	f7ff fff6 	bl	17b58 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   17b6c:	fab0 f080 	clz	r0, r0
   17b70:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   17b74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   17b78:	00e2      	lsls	r2, r4, #3
   17b7a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   17b7e:	1d17      	adds	r7, r2, #4
   17b80:	b2a5      	uxth	r5, r4
   17b82:	3206      	adds	r2, #6
   17b84:	b956      	cbnz	r6, 17b9c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   17b86:	2101      	movs	r1, #1
   17b88:	fa01 f000 	lsl.w	r0, r1, r0
   17b8c:	68d9      	ldr	r1, [r3, #12]
   17b8e:	4301      	orrs	r1, r0
   17b90:	60d9      	str	r1, [r3, #12]
		b->next = c;
   17b92:	f8cc 4010 	str.w	r4, [ip, #16]
   17b96:	53dd      	strh	r5, [r3, r7]
   17b98:	529d      	strh	r5, [r3, r2]
}
   17b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   17b9c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   17b9e:	3104      	adds	r1, #4
   17ba0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   17ba2:	53d8      	strh	r0, [r3, r7]
   17ba4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17ba8:	529e      	strh	r6, [r3, r2]
   17baa:	80c5      	strh	r5, [r0, #6]
   17bac:	525d      	strh	r5, [r3, r1]
   17bae:	e7f4      	b.n	17b9a <free_list_add+0x38>

00017bb0 <_ldiv5>:
	uint32_t v_lo = *v;
   17bb0:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   17bb4:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   17bb6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   17bba:	fba2 2403 	umull	r2, r4, r2, r3
   17bbe:	18d5      	adds	r5, r2, r3
   17bc0:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   17bc4:	fba1 1303 	umull	r1, r3, r1, r3
   17bc8:	1852      	adds	r2, r2, r1
   17bca:	eb44 0403 	adc.w	r4, r4, r3
   17bce:	1952      	adds	r2, r2, r5
   17bd0:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   17bd4:	1889      	adds	r1, r1, r2
   17bd6:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   17bda:	e9c0 1300 	strd	r1, r3, [r0]
}
   17bde:	bd30      	pop	{r4, r5, pc}

00017be0 <_get_digit>:
	if (*digit_count > 0) {
   17be0:	680b      	ldr	r3, [r1, #0]
   17be2:	2b00      	cmp	r3, #0
{
   17be4:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   17be6:	dd10      	ble.n	17c0a <_get_digit+0x2a>
		--*digit_count;
   17be8:	3b01      	subs	r3, #1
   17bea:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   17bec:	6803      	ldr	r3, [r0, #0]
   17bee:	6844      	ldr	r4, [r0, #4]
   17bf0:	220a      	movs	r2, #10
   17bf2:	fba3 1302 	umull	r1, r3, r3, r2
   17bf6:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   17bfa:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   17bfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   17c00:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   17c04:	3230      	adds	r2, #48	; 0x30
}
   17c06:	4610      	mov	r0, r2
   17c08:	bd10      	pop	{r4, pc}
		rval = '0';
   17c0a:	2230      	movs	r2, #48	; 0x30
   17c0c:	e7fb      	b.n	17c06 <_get_digit+0x26>

00017c0e <outs>:
{
   17c0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17c12:	4680      	mov	r8, r0
   17c14:	4689      	mov	r9, r1
   17c16:	4616      	mov	r6, r2
   17c18:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17c1a:	4615      	mov	r5, r2
   17c1c:	42bd      	cmp	r5, r7
   17c1e:	eba5 0406 	sub.w	r4, r5, r6
   17c22:	d305      	bcc.n	17c30 <outs+0x22>
   17c24:	b10f      	cbz	r7, 17c2a <outs+0x1c>
	return (int)count;
   17c26:	4620      	mov	r0, r4
   17c28:	e008      	b.n	17c3c <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   17c2a:	782b      	ldrb	r3, [r5, #0]
   17c2c:	2b00      	cmp	r3, #0
   17c2e:	d0fa      	beq.n	17c26 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   17c30:	f815 0b01 	ldrb.w	r0, [r5], #1
   17c34:	4649      	mov	r1, r9
   17c36:	47c0      	blx	r8
		if (rc < 0) {
   17c38:	2800      	cmp	r0, #0
   17c3a:	daef      	bge.n	17c1c <outs+0xe>
}
   17c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00017c40 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   17c40:	4040      	eors	r0, r0
   17c42:	f380 8811 	msr	BASEPRI, r0
   17c46:	f04f 0004 	mov.w	r0, #4
   17c4a:	df02      	svc	2
}
   17c4c:	4770      	bx	lr

00017c4e <assert_print>:

void assert_print(const char *fmt, ...)
{
   17c4e:	b40f      	push	{r0, r1, r2, r3}
   17c50:	b507      	push	{r0, r1, r2, lr}
   17c52:	a904      	add	r1, sp, #16
   17c54:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   17c58:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   17c5a:	f7ff ff03 	bl	17a64 <vprintk>

	va_end(ap);
}
   17c5e:	b003      	add	sp, #12
   17c60:	f85d eb04 	ldr.w	lr, [sp], #4
   17c64:	b004      	add	sp, #16
   17c66:	4770      	bx	lr

00017c68 <free_space>:
{
   17c68:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   17c6a:	68c3      	ldr	r3, [r0, #12]
   17c6c:	6804      	ldr	r4, [r0, #0]
   17c6e:	42a3      	cmp	r3, r4
   17c70:	d904      	bls.n	17c7c <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   17c72:	3b01      	subs	r3, #1
   17c74:	1b1b      	subs	r3, r3, r4
   17c76:	600b      	str	r3, [r1, #0]
		return false;
   17c78:	2000      	movs	r0, #0
}
   17c7a:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   17c7c:	6a42      	ldr	r2, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   17c7e:	b91b      	cbnz	r3, 17c88 <free_space+0x20>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   17c80:	3a01      	subs	r2, #1
   17c82:	1b12      	subs	r2, r2, r4
   17c84:	600a      	str	r2, [r1, #0]
		return false;
   17c86:	e7f7      	b.n	17c78 <free_space+0x10>
	*res = buffer->size - buffer->tmp_wr_idx;
   17c88:	1b12      	subs	r2, r2, r4
   17c8a:	600a      	str	r2, [r1, #0]
	return true;
   17c8c:	2001      	movs	r0, #1
   17c8e:	e7f4      	b.n	17c7a <free_space+0x12>

00017c90 <get_usage>:
{
   17c90:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   17c92:	a901      	add	r1, sp, #4
{
   17c94:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   17c96:	f7ff ffe7 	bl	17c68 <free_space>
   17c9a:	b120      	cbz	r0, 17ca6 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   17c9c:	9b01      	ldr	r3, [sp, #4]
   17c9e:	68e2      	ldr	r2, [r4, #12]
   17ca0:	3b01      	subs	r3, #1
   17ca2:	4413      	add	r3, r2
   17ca4:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   17ca6:	9801      	ldr	r0, [sp, #4]
   17ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17caa:	43c0      	mvns	r0, r0
}
   17cac:	4418      	add	r0, r3
   17cae:	b002      	add	sp, #8
   17cb0:	bd10      	pop	{r4, pc}

00017cb2 <idx_inc>:
	uint32_t i = idx + val;
   17cb2:	440a      	add	r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   17cb4:	6901      	ldr	r1, [r0, #16]
		return i & (buffer->size - 1);
   17cb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   17cb8:	07c9      	lsls	r1, r1, #31
   17cba:	d503      	bpl.n	17cc4 <idx_inc+0x12>
		return i & (buffer->size - 1);
   17cbc:	3b01      	subs	r3, #1
   17cbe:	401a      	ands	r2, r3
}
   17cc0:	4610      	mov	r0, r2
   17cc2:	4770      	bx	lr
	return (i >= buffer->size) ? i - buffer->size : i;
   17cc4:	429a      	cmp	r2, r3
   17cc6:	bf28      	it	cs
   17cc8:	1ad2      	subcs	r2, r2, r3
   17cca:	e7f9      	b.n	17cc0 <idx_inc+0xe>

00017ccc <add_skip_item>:
{
   17ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
   17cce:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   17cd0:	6805      	ldr	r5, [r0, #0]
{
   17cd2:	460a      	mov	r2, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   17cd4:	6a01      	ldr	r1, [r0, #32]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   17cd6:	9201      	str	r2, [sp, #4]
	union mpsc_pbuf_generic skip = {
   17cd8:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   17cdc:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   17ce0:	6801      	ldr	r1, [r0, #0]
{
   17ce2:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   17ce4:	f7ff ffe5 	bl	17cb2 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   17ce8:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   17cea:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   17cec:	9a01      	ldr	r2, [sp, #4]
   17cee:	4620      	mov	r0, r4
   17cf0:	f7ff ffdf 	bl	17cb2 <idx_inc>
   17cf4:	6060      	str	r0, [r4, #4]
}
   17cf6:	b003      	add	sp, #12
   17cf8:	bd30      	pop	{r4, r5, pc}

00017cfa <max_utilization_update>:
{
   17cfa:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   17cfc:	6903      	ldr	r3, [r0, #16]
   17cfe:	075b      	lsls	r3, r3, #29
{
   17d00:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   17d02:	d506      	bpl.n	17d12 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   17d04:	6a85      	ldr	r5, [r0, #40]	; 0x28
   17d06:	f7ff ffc3 	bl	17c90 <get_usage>
   17d0a:	4285      	cmp	r5, r0
   17d0c:	d902      	bls.n	17d14 <max_utilization_update+0x1a>
   17d0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   17d10:	62a0      	str	r0, [r4, #40]	; 0x28
}
   17d12:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   17d14:	4620      	mov	r0, r4
   17d16:	f7ff ffbb 	bl	17c90 <get_usage>
   17d1a:	e7f9      	b.n	17d10 <max_utilization_update+0x16>

00017d1c <drop_item_locked>:
{
   17d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   17d20:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   17d24:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   17d28:	461f      	mov	r7, r3
	*user_packet = false;
   17d2a:	2300      	movs	r3, #0
   17d2c:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   17d2e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   17d32:	f003 0303 	and.w	r3, r3, #3
   17d36:	2b02      	cmp	r3, #2
{
   17d38:	4604      	mov	r4, r0
   17d3a:	468b      	mov	fp, r1
   17d3c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   17d3e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   17d42:	d103      	bne.n	17d4c <drop_item_locked+0x30>
		return item->skip.len;
   17d44:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   17d48:	08ad      	lsrs	r5, r5, #2
   17d4a:	d12e      	bne.n	17daa <drop_item_locked+0x8e>
   17d4c:	69e3      	ldr	r3, [r4, #28]
   17d4e:	4630      	mov	r0, r6
   17d50:	4798      	blx	r3
   17d52:	4605      	mov	r5, r0
	} else if (allow_drop) {
   17d54:	f1b8 0f00 	cmp.w	r8, #0
   17d58:	d036      	beq.n	17dc8 <drop_item_locked+0xac>
		if (item->hdr.busy) {
   17d5a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   17d5e:	079b      	lsls	r3, r3, #30
   17d60:	d52f      	bpl.n	17dc2 <drop_item_locked+0xa6>
			add_skip_item(buffer, free_wlen + 1);
   17d62:	f10b 0101 	add.w	r1, fp, #1
   17d66:	4620      	mov	r0, r4
   17d68:	f7ff ffb0 	bl	17ccc <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   17d6c:	6861      	ldr	r1, [r4, #4]
   17d6e:	462a      	mov	r2, r5
   17d70:	4620      	mov	r0, r4
   17d72:	f7ff ff9e 	bl	17cb2 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   17d76:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   17d78:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   17d7a:	462a      	mov	r2, r5
   17d7c:	4620      	mov	r0, r4
   17d7e:	f7ff ff98 	bl	17cb2 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   17d82:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   17d84:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   17d86:	68e1      	ldr	r1, [r4, #12]
   17d88:	4620      	mov	r0, r4
   17d8a:	f7ff ff92 	bl	17cb2 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   17d8e:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   17d90:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   17d94:	f002 0203 	and.w	r2, r2, #3
   17d98:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   17d9a:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   17d9e:	d10c      	bne.n	17dba <drop_item_locked+0x9e>
		return item->skip.len;
   17da0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   17da4:	089b      	lsrs	r3, r3, #2
   17da6:	d008      	beq.n	17dba <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   17da8:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   17daa:	68e1      	ldr	r1, [r4, #12]
   17dac:	462a      	mov	r2, r5
   17dae:	4620      	mov	r0, r4
   17db0:	f7ff ff7f 	bl	17cb2 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   17db4:	e9c4 0002 	strd	r0, r0, [r4, #8]
   17db8:	e007      	b.n	17dca <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   17dba:	69e3      	ldr	r3, [r4, #28]
   17dbc:	4630      	mov	r0, r6
   17dbe:	4798      	blx	r3
   17dc0:	4405      	add	r5, r0
			*user_packet = true;
   17dc2:	2301      	movs	r3, #1
   17dc4:	703b      	strb	r3, [r7, #0]
   17dc6:	e7f0      	b.n	17daa <drop_item_locked+0x8e>
		item = NULL;
   17dc8:	4646      	mov	r6, r8
}
   17dca:	4630      	mov	r0, r6
   17dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017dd0 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   17dd0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   17dd4:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   17dd6:	bf8a      	itet	hi
   17dd8:	6a40      	ldrhi	r0, [r0, #36]	; 0x24
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   17dda:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   17ddc:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   17dde:	1e18      	subs	r0, r3, #0
   17de0:	bf18      	it	ne
   17de2:	2001      	movne	r0, #1
   17de4:	4770      	bx	lr

00017de6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   17de6:	4770      	bx	lr

00017de8 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   17de8:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   17dea:	075b      	lsls	r3, r3, #29
   17dec:	d40b      	bmi.n	17e06 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   17dee:	6803      	ldr	r3, [r0, #0]
   17df0:	8840      	ldrh	r0, [r0, #2]
   17df2:	f3c3 2349 	ubfx	r3, r3, #9, #10
   17df6:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   17dfa:	4418      	add	r0, r3
   17dfc:	3017      	adds	r0, #23
   17dfe:	f020 0007 	bic.w	r0, r0, #7
   17e02:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   17e04:	4770      	bx	lr
	return 0;
   17e06:	2000      	movs	r0, #0
}
   17e08:	4770      	bx	lr

00017e0a <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   17e0a:	6843      	ldr	r3, [r0, #4]
}
   17e0c:	7958      	ldrb	r0, [r3, #5]
   17e0e:	4770      	bx	lr

00017e10 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   17e10:	f000 ba03 	b.w	1821a <sys_clock_cycle_get_32>

00017e14 <dummy_timestamp>:
   17e14:	2000      	movs	r0, #0
   17e16:	4770      	bx	lr

00017e18 <z_log_vprintk>:
{
   17e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   17e1a:	2300      	movs	r3, #0
   17e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17e20:	e9cd 3300 	strd	r3, r3, [sp]
   17e24:	461a      	mov	r2, r3
   17e26:	4619      	mov	r1, r3
   17e28:	4618      	mov	r0, r3
   17e2a:	f7ef fdeb 	bl	7a04 <z_impl_z_log_msg2_runtime_vcreate>
}
   17e2e:	b005      	add	sp, #20
   17e30:	f85d fb04 	ldr.w	pc, [sp], #4

00017e34 <notify_drop>:
	z_log_dropped(true);
   17e34:	2001      	movs	r0, #1
   17e36:	f7ef b997 	b.w	7168 <z_log_dropped>

00017e3a <get_msg>:
{
   17e3a:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
   17e3c:	f7ef fa0a 	bl	7254 <z_log_msg2_claim>
}
   17e40:	bd08      	pop	{r3, pc}

00017e42 <z_log_get_tag>:
}
   17e42:	2000      	movs	r0, #0
   17e44:	4770      	bx	lr

00017e46 <buffer_write>:
{
   17e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e48:	4606      	mov	r6, r0
   17e4a:	460d      	mov	r5, r1
   17e4c:	4614      	mov	r4, r2
   17e4e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   17e50:	4621      	mov	r1, r4
   17e52:	4628      	mov	r0, r5
   17e54:	463a      	mov	r2, r7
   17e56:	47b0      	blx	r6
	} while (len != 0);
   17e58:	1a24      	subs	r4, r4, r0
		buf += processed;
   17e5a:	4405      	add	r5, r0
	} while (len != 0);
   17e5c:	d1f8      	bne.n	17e50 <buffer_write+0xa>
}
   17e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017e60 <log_output_flush>:
		     output->control_block->offset,
   17e60:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   17e62:	6881      	ldr	r1, [r0, #8]
{
   17e64:	b510      	push	{r4, lr}
   17e66:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   17e68:	e9d2 2300 	ldrd	r2, r3, [r2]
   17e6c:	6800      	ldr	r0, [r0, #0]
   17e6e:	f7ff ffea 	bl	17e46 <buffer_write>
	output->control_block->offset = 0;
   17e72:	6863      	ldr	r3, [r4, #4]
   17e74:	2200      	movs	r2, #0
   17e76:	601a      	str	r2, [r3, #0]
}
   17e78:	bd10      	pop	{r4, pc}

00017e7a <cr_out_func>:
{
   17e7a:	b538      	push	{r3, r4, r5, lr}
   17e7c:	4605      	mov	r5, r0
   17e7e:	460c      	mov	r4, r1
	out_func(c, ctx);
   17e80:	f7ef fc7a 	bl	7778 <out_func>
	if (c == '\n') {
   17e84:	2d0a      	cmp	r5, #10
   17e86:	d103      	bne.n	17e90 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   17e88:	4621      	mov	r1, r4
   17e8a:	200d      	movs	r0, #13
   17e8c:	f7ef fc74 	bl	7778 <out_func>
}
   17e90:	2000      	movs	r0, #0
   17e92:	bd38      	pop	{r3, r4, r5, pc}

00017e94 <z_log_msg2_finalize>:
{
   17e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e96:	460e      	mov	r6, r1
   17e98:	4615      	mov	r5, r2
   17e9a:	4619      	mov	r1, r3
	if (!msg) {
   17e9c:	4604      	mov	r4, r0
   17e9e:	b918      	cbnz	r0, 17ea8 <z_log_msg2_finalize+0x14>
}
   17ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_log_dropped(false);
   17ea4:	f7ef b960 	b.w	7168 <z_log_dropped>
	if (data) {
   17ea8:	b143      	cbz	r3, 17ebc <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   17eaa:	f100 0710 	add.w	r7, r0, #16
   17eae:	f3c2 2049 	ubfx	r0, r2, #9, #10
   17eb2:	4438      	add	r0, r7
   17eb4:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   17eb8:	f003 ff12 	bl	1bce0 <memcpy>
	msg->hdr.source = source;
   17ebc:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
   17ec0:	4620      	mov	r0, r4
}
   17ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_log_msg2_commit(msg);
   17ec6:	f7ef baa1 	b.w	740c <z_log_msg2_commit>

00017eca <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   17eca:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   17ecc:	f7ef fe9c 	bl	7c08 <__do_global_ctors_aux>
	__do_init_array_aux();
}
   17ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
   17ed4:	f7ef be8a 	b.w	7bec <__do_init_array_aux>

00017ed8 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   17ed8:	2000      	movs	r0, #0
   17eda:	4770      	bx	lr

00017edc <abort_function>:
{
   17edc:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   17ede:	2000      	movs	r0, #0
   17ee0:	f7ef f8a6 	bl	7030 <sys_reboot>

00017ee4 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   17ee4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   17ee6:	6800      	ldr	r0, [r0, #0]
   17ee8:	f7f0 b918 	b.w	811c <z_arm_fatal_error>

00017eec <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   17eec:	2100      	movs	r1, #0
   17eee:	2001      	movs	r0, #1
   17ef0:	f7f0 b914 	b.w	811c <z_arm_fatal_error>

00017ef4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   17ef4:	b508      	push	{r3, lr}
	handler();
   17ef6:	f7f0 fa29 	bl	834c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   17efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   17efe:	f7f0 bb93 	b.w	8628 <z_arm_exc_exit>

00017f02 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   17f02:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   17f04:	4601      	mov	r1, r0
   17f06:	4618      	mov	r0, r3
   17f08:	f7ff bfe6 	b.w	17ed8 <__cxa_atexit>

00017f0c <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   17f0c:	2300      	movs	r3, #0
   17f0e:	f7ef bd1f 	b.w	7950 <z_impl_z_log_msg2_static_create>

00017f12 <_stdout_hook_default>:
}
   17f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f16:	4770      	bx	lr

00017f18 <_stdin_hook_default>:
}
   17f18:	2000      	movs	r0, #0
   17f1a:	4770      	bx	lr

00017f1c <_read>:
{
   17f1c:	4608      	mov	r0, r1
   17f1e:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   17f20:	f7f1 b8e8 	b.w	90f4 <z_impl_zephyr_read_stdin>

00017f24 <_write>:
{
   17f24:	4608      	mov	r0, r1
   17f26:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   17f28:	f7f1 b8f8 	b.w	911c <z_impl_zephyr_write_stdout>

00017f2c <_close>:
   17f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f30:	4770      	bx	lr

00017f32 <_lseek>:
}
   17f32:	2000      	movs	r0, #0
   17f34:	4770      	bx	lr

00017f36 <_isatty>:
}
   17f36:	2802      	cmp	r0, #2
   17f38:	bfcc      	ite	gt
   17f3a:	2000      	movgt	r0, #0
   17f3c:	2001      	movle	r0, #1
   17f3e:	4770      	bx	lr

00017f40 <_kill>:
}
   17f40:	2000      	movs	r0, #0
   17f42:	4770      	bx	lr

00017f44 <_getpid>:
}
   17f44:	2000      	movs	r0, #0
   17f46:	4770      	bx	lr

00017f48 <_fstat>:
	st->st_mode = S_IFCHR;
   17f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   17f4c:	604b      	str	r3, [r1, #4]
}
   17f4e:	2000      	movs	r0, #0
   17f50:	4770      	bx	lr

00017f52 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   17f52:	f7f5 be85 	b.w	dc60 <z_impl_z_errno>

00017f56 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   17f56:	2806      	cmp	r0, #6
   17f58:	d108      	bne.n	17f6c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   17f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17f5e:	2201      	movs	r2, #1
   17f60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   17f64:	f3bf 8f4f 	dsb	sy
        __WFE();
   17f68:	bf20      	wfe
    while (true)
   17f6a:	e7fd      	b.n	17f68 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   17f6c:	4770      	bx	lr

00017f6e <pm_state_exit_post_ops>:
   17f6e:	2300      	movs	r3, #0
   17f70:	f383 8811 	msr	BASEPRI, r3
   17f74:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   17f78:	4770      	bx	lr

00017f7a <set_on_state>:
	__asm__ volatile(
   17f7a:	f04f 0320 	mov.w	r3, #32
   17f7e:	f3ef 8211 	mrs	r2, BASEPRI
   17f82:	f383 8812 	msr	BASEPRI_MAX, r3
   17f86:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   17f8a:	6803      	ldr	r3, [r0, #0]
   17f8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17f90:	f043 0302 	orr.w	r3, r3, #2
   17f94:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   17f96:	f382 8811 	msr	BASEPRI, r2
   17f9a:	f3bf 8f6f 	isb	sy
}
   17f9e:	4770      	bx	lr

00017fa0 <async_start>:
{
   17fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fa2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   17fa4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   17fa6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   17fa8:	f04f 0520 	mov.w	r5, #32
   17fac:	f3ef 8c11 	mrs	ip, BASEPRI
   17fb0:	f385 8812 	msr	BASEPRI_MAX, r5
   17fb4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17fb8:	260c      	movs	r6, #12
   17fba:	fb06 4601 	mla	r6, r6, r1, r4
   17fbe:	6cb5      	ldr	r5, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   17fc0:	f005 0e07 	and.w	lr, r5, #7
   17fc4:	f1be 0f01 	cmp.w	lr, #1
   17fc8:	d110      	bne.n	17fec <async_start+0x4c>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   17fca:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   17fcc:	2500      	movs	r5, #0
	__asm__ volatile(
   17fce:	f38c 8811 	msr	BASEPRI, ip
   17fd2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   17fd6:	b93d      	cbnz	r5, 17fe8 <async_start+0x48>
	subdata->cb = cb;
   17fd8:	260c      	movs	r6, #12
   17fda:	4371      	muls	r1, r6
   17fdc:	440c      	add	r4, r1
	subdata->user_data = user_data;
   17fde:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   17fe2:	6843      	ldr	r3, [r0, #4]
   17fe4:	585b      	ldr	r3, [r3, r1]
   17fe6:	4798      	blx	r3
}
   17fe8:	4628      	mov	r0, r5
   17fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   17fec:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   17ff0:	42af      	cmp	r7, r5
   17ff2:	bf14      	ite	ne
   17ff4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   17ff8:	f06f 0577 	mvneq.w	r5, #119	; 0x77
   17ffc:	e7e7      	b.n	17fce <async_start+0x2e>

00017ffe <api_start>:
{
   17ffe:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   18000:	2480      	movs	r4, #128	; 0x80
   18002:	9400      	str	r4, [sp, #0]
   18004:	f7ff ffcc 	bl	17fa0 <async_start>
}
   18008:	b002      	add	sp, #8
   1800a:	bd10      	pop	{r4, pc}

0001800c <onoff_started_callback>:
	return &data->mgr[type];
   1800c:	6900      	ldr	r0, [r0, #16]
   1800e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   18010:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   18014:	2100      	movs	r1, #0
   18016:	4710      	bx	r2

00018018 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   18018:	2000      	movs	r0, #0
   1801a:	f7f4 bdb9 	b.w	cb90 <nrfx_clock_start>

0001801e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1801e:	2000      	movs	r0, #0
   18020:	f7f4 be1a 	b.w	cc58 <nrfx_clock_stop>

00018024 <api_stop>:
	return stop(dev, subsys, CTX_API);
   18024:	2280      	movs	r2, #128	; 0x80
   18026:	f7f1 b9b1 	b.w	938c <stop>

0001802a <blocking_start_callback>:
{
   1802a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1802c:	f7f6 bd42 	b.w	eab4 <z_impl_k_sem_give>

00018030 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18030:	6843      	ldr	r3, [r0, #4]
   18032:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   18034:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   18038:	600b      	str	r3, [r1, #0]
}
   1803a:	2000      	movs	r0, #0
   1803c:	4770      	bx	lr

0001803e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1803e:	6843      	ldr	r3, [r0, #4]
   18040:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   18042:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   18046:	4042      	eors	r2, r0
   18048:	400a      	ands	r2, r1
   1804a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1804c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   18050:	2000      	movs	r0, #0
   18052:	4770      	bx	lr

00018054 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18054:	6843      	ldr	r3, [r0, #4]
   18056:	685b      	ldr	r3, [r3, #4]
}
   18058:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1805a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1805e:	4770      	bx	lr

00018060 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18060:	6843      	ldr	r3, [r0, #4]
   18062:	685b      	ldr	r3, [r3, #4]
}
   18064:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   18066:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1806a:	4770      	bx	lr

0001806c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1806c:	6843      	ldr	r3, [r0, #4]
   1806e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   18070:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   18074:	4059      	eors	r1, r3
    p_reg->OUT = value;
   18076:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1807a:	2000      	movs	r0, #0
   1807c:	4770      	bx	lr

0001807e <z_log_msg2_static_create.constprop.0>:
   1807e:	2300      	movs	r3, #0
   18080:	f7ef bc66 	b.w	7950 <z_impl_z_log_msg2_static_create>

00018084 <clock_started_callback>:
	if (!drv_data->active) {
   18084:	f891 3045 	ldrb.w	r3, [r1, #69]	; 0x45
   18088:	b91b      	cbnz	r3, 18092 <clock_started_callback+0xe>
		(void)onoff_release(drv_data->clk_mgr);
   1808a:	f851 0c04 	ldr.w	r0, [r1, #-4]
   1808e:	f7ee bc09 	b.w	68a4 <onoff_release>
		(void)start_transfer(drv_data);
   18092:	1f08      	subs	r0, r1, #4
   18094:	f7f1 be0c 	b.w	9cb0 <start_transfer>

00018098 <is_regular_addr_valid>:
{
   18098:	b538      	push	{r3, r4, r5, lr}
   1809a:	4605      	mov	r5, r0
   1809c:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   1809e:	f000 fbed 	bl	1887c <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   180a2:	2d00      	cmp	r5, #0
   180a4:	db07      	blt.n	180b6 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   180a6:	42a8      	cmp	r0, r5
   180a8:	d905      	bls.n	180b6 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   180aa:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   180ac:	4284      	cmp	r4, r0
   180ae:	bf8c      	ite	hi
   180b0:	2000      	movhi	r0, #0
   180b2:	2001      	movls	r0, #1
}
   180b4:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   180b6:	2000      	movs	r0, #0
   180b8:	e7fc      	b.n	180b4 <is_regular_addr_valid+0x1c>

000180ba <nrf_power_pofcon_set.constprop.0>:
    uint32_t pofcon = p_reg->POFCON;
   180ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   180be:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   180c2:	f023 031f 	bic.w	r3, r3, #31
   180c6:	4318      	orrs	r0, r3
    pofcon |=
   180c8:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
    p_reg->POFCON = pofcon;
   180cc:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
}
   180d0:	4770      	bx	lr

000180d2 <flash_nrf_read>:
{
   180d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   180d4:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   180d6:	4620      	mov	r0, r4
{
   180d8:	4619      	mov	r1, r3
   180da:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   180dc:	9301      	str	r3, [sp, #4]
   180de:	f7ff ffdb 	bl	18098 <is_regular_addr_valid>
   180e2:	9901      	ldr	r1, [sp, #4]
   180e4:	b928      	cbnz	r0, 180f2 <flash_nrf_read+0x20>
   180e6:	4620      	mov	r0, r4
}
   180e8:	b003      	add	sp, #12
   180ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   180ee:	f7f2 b8b9 	b.w	a264 <flash_nrf_read.part.0>
	if (!len) {
   180f2:	b121      	cbz	r1, 180fe <flash_nrf_read+0x2c>
   180f4:	460a      	mov	r2, r1
   180f6:	4628      	mov	r0, r5
   180f8:	4621      	mov	r1, r4
   180fa:	f003 fdf1 	bl	1bce0 <memcpy>
}
   180fe:	2000      	movs	r0, #0
   18100:	b003      	add	sp, #12
   18102:	bd30      	pop	{r4, r5, pc}

00018104 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   18104:	6902      	ldr	r2, [r0, #16]
{
   18106:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   18108:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1810c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   18110:	2000      	movs	r0, #0
   18112:	4770      	bx	lr

00018114 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   18114:	6843      	ldr	r3, [r0, #4]
   18116:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   18118:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1811c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   18120:	4770      	bx	lr

00018122 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   18122:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   18124:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   18126:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18128:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1812c:	b148      	cbz	r0, 18142 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1812e:	7c52      	ldrb	r2, [r2, #17]
   18130:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18132:	2000      	movs	r0, #0
   18134:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   18138:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1813c:	2201      	movs	r2, #1
   1813e:	601a      	str	r2, [r3, #0]
	return 0;
   18140:	4770      	bx	lr
		return -1;
   18142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18146:	4770      	bx	lr

00018148 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   18148:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1814a:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1814e:	b943      	cbnz	r3, 18162 <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   18150:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   18152:	0789      	lsls	r1, r1, #30
   18154:	d407      	bmi.n	18166 <is_tx_ready.isra.0+0x1e>
   18156:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1815a:	3800      	subs	r0, #0
   1815c:	bf18      	it	ne
   1815e:	2001      	movne	r0, #1
   18160:	4770      	bx	lr
   18162:	2001      	movs	r0, #1
   18164:	4770      	bx	lr
   18166:	4618      	mov	r0, r3
}
   18168:	4770      	bx	lr

0001816a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1816a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1816c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1816e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   18172:	05c9      	lsls	r1, r1, #23
   18174:	d518      	bpl.n	181a8 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18176:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1817a:	b1a9      	cbz	r1, 181a8 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1817c:	f04f 0020 	mov.w	r0, #32
   18180:	f3ef 8111 	mrs	r1, BASEPRI
   18184:	f380 8812 	msr	BASEPRI_MAX, r0
   18188:	f3bf 8f6f 	isb	sy
   1818c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   18190:	b130      	cbz	r0, 181a0 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18192:	2000      	movs	r0, #0
   18194:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   18198:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1819c:	2001      	movs	r0, #1
   1819e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   181a0:	f381 8811 	msr	BASEPRI, r1
   181a4:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   181a8:	6852      	ldr	r2, [r2, #4]
   181aa:	06d2      	lsls	r2, r2, #27
   181ac:	d515      	bpl.n	181da <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   181ae:	f04f 0120 	mov.w	r1, #32
   181b2:	f3ef 8211 	mrs	r2, BASEPRI
   181b6:	f381 8812 	msr	BASEPRI_MAX, r1
   181ba:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   181be:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   181c2:	b111      	cbz	r1, 181ca <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   181c4:	2100      	movs	r1, #0
   181c6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   181ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   181ce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   181d2:	f382 8811 	msr	BASEPRI, r2
   181d6:	f3bf 8f6f 	isb	sy
}
   181da:	4770      	bx	lr

000181dc <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   181dc:	b510      	push	{r4, lr}
   181de:	2200      	movs	r2, #0
   181e0:	4604      	mov	r4, r0
   181e2:	2101      	movs	r1, #1
   181e4:	2028      	movs	r0, #40	; 0x28
   181e6:	f7f0 f87d 	bl	82e4 <z_arm_irq_priority_set>
   181ea:	2028      	movs	r0, #40	; 0x28
   181ec:	f7f0 f848 	bl	8280 <arch_irq_enable>
   181f0:	4620      	mov	r0, r4
   181f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   181f6:	f7f2 b9e5 	b.w	a5c4 <uarte_instance_init.constprop.0>

000181fa <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   181fa:	b510      	push	{r4, lr}
   181fc:	2200      	movs	r2, #0
   181fe:	4604      	mov	r4, r0
   18200:	2101      	movs	r1, #1
   18202:	2002      	movs	r0, #2
   18204:	f7f0 f86e 	bl	82e4 <z_arm_irq_priority_set>
   18208:	2002      	movs	r0, #2
   1820a:	f7f0 f839 	bl	8280 <arch_irq_enable>
   1820e:	4620      	mov	r0, r4
   18210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18214:	f7f2 b9d6 	b.w	a5c4 <uarte_instance_init.constprop.0>

00018218 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   18218:	4770      	bx	lr

0001821a <sys_clock_cycle_get_32>:
{
   1821a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1821c:	f7f2 fb4c 	bl	a8b8 <z_nrf_rtc_timer_read>
}
   18220:	bd08      	pop	{r3, pc}

00018222 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   18222:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   18224:	6843      	ldr	r3, [r0, #4]
   18226:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   18228:	7a03      	ldrb	r3, [r0, #8]
   1822a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1822e:	3b01      	subs	r3, #1
   18230:	00db      	lsls	r3, r3, #3
   18232:	6845      	ldr	r5, [r0, #4]
   18234:	6814      	ldr	r4, [r2, #0]
   18236:	441d      	add	r5, r3
   18238:	42ac      	cmp	r4, r5
   1823a:	d902      	bls.n	18242 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   1823c:	f06f 0001 	mvn.w	r0, #1
}
   18240:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   18242:	7965      	ldrb	r5, [r4, #5]
   18244:	428d      	cmp	r5, r1
   18246:	d002      	beq.n	1824e <pinctrl_lookup_state+0x2c>
		(*state)++;
   18248:	3408      	adds	r4, #8
   1824a:	6014      	str	r4, [r2, #0]
   1824c:	e7f1      	b.n	18232 <pinctrl_lookup_state+0x10>
			return 0;
   1824e:	2000      	movs	r0, #0
   18250:	e7f6      	b.n	18240 <pinctrl_lookup_state+0x1e>

00018252 <nrf_gpio_pin_clear>:
{
   18252:	b507      	push	{r0, r1, r2, lr}
   18254:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18256:	a801      	add	r0, sp, #4
   18258:	f7f2 fcee 	bl	ac38 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1825c:	9a01      	ldr	r2, [sp, #4]
   1825e:	2301      	movs	r3, #1
   18260:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   18262:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   18266:	b003      	add	sp, #12
   18268:	f85d fb04 	ldr.w	pc, [sp], #4

0001826c <nrf_gpio_pin_set>:
{
   1826c:	b507      	push	{r0, r1, r2, lr}
   1826e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18270:	a801      	add	r0, sp, #4
   18272:	f7f2 fce1 	bl	ac38 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   18276:	9a01      	ldr	r2, [sp, #4]
   18278:	2301      	movs	r3, #1
   1827a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1827c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   18280:	b003      	add	sp, #12
   18282:	f85d fb04 	ldr.w	pc, [sp], #4

00018286 <nrf_gpio_pin_write>:
    if (value == 0)
   18286:	b909      	cbnz	r1, 1828c <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   18288:	f7ff bfe3 	b.w	18252 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   1828c:	f7ff bfee 	b.w	1826c <nrf_gpio_pin_set>

00018290 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
   18290:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   18292:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   18296:	2b00      	cmp	r3, #0
{
   18298:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   1829a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1829e:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   182a0:	bf07      	ittee	eq
   182a2:	460e      	moveq	r6, r1
   182a4:	4615      	moveq	r5, r2
   182a6:	2501      	movne	r5, #1
   182a8:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   182aa:	9301      	str	r3, [sp, #4]
   182ac:	f7f2 fcc4 	bl	ac38 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   182b0:	f3c4 1181 	ubfx	r1, r4, #6, #2
    reg->PIN_CNF[pin_number] = cnf;
   182b4:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   182b6:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   182ba:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
   182be:	ea44 0106 	orr.w	r1, r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   182c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   182c6:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   182ca:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   182ce:	b002      	add	sp, #8
   182d0:	bd70      	pop	{r4, r5, r6, pc}

000182d2 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   182d2:	b570      	push	{r4, r5, r6, lr}
   182d4:	4615      	mov	r5, r2
   182d6:	4604      	mov	r4, r0
   182d8:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   182dc:	42a6      	cmp	r6, r4
   182de:	d101      	bne.n	182e4 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   182e0:	2000      	movs	r0, #0
}
   182e2:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   182e4:	6823      	ldr	r3, [r4, #0]
   182e6:	0c1a      	lsrs	r2, r3, #16
   182e8:	2a22      	cmp	r2, #34	; 0x22
   182ea:	f200 8098 	bhi.w	1841e <pinctrl_configure_pins+0x14c>
   182ee:	e8df f002 	tbb	[pc, r2]
   182f2:	1d12      	.short	0x1d12
   182f4:	39294324 	.word	0x39294324
   182f8:	96969643 	.word	0x96969643
   182fc:	964d4896 	.word	0x964d4896
   18300:	96969696 	.word	0x96969696
   18304:	57529696 	.word	0x57529696
   18308:	726d685c 	.word	0x726d685c
   1830c:	77969696 	.word	0x77969696
   18310:	8c87827d 	.word	0x8c87827d
   18314:	91          	.byte	0x91
   18315:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   18316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1831a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   1831e:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
   18320:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18324:	f7ff ffa2 	bl	1826c <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   18328:	2201      	movs	r2, #1
   1832a:	e015      	b.n	18358 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   1832c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18330:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   18334:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   18336:	2100      	movs	r1, #0
   18338:	e00f      	b.n	1835a <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   1833a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1833e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   18342:	e7ec      	b.n	1831e <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   18344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18348:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   1834c:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   1834e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18352:	f7ff ff7e 	bl	18252 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   18356:	2200      	movs	r2, #0
   18358:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1835a:	6820      	ldr	r0, [r4, #0]
   1835c:	f7ff ff98 	bl	18290 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   18360:	3404      	adds	r4, #4
   18362:	e7bb      	b.n	182dc <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   18364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18368:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   1836c:	6820      	ldr	r0, [r4, #0]
   1836e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18372:	f7ff ff6e 	bl	18252 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   18376:	e7d7      	b.n	18328 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   18378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1837c:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   18380:	e7d8      	b.n	18334 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   18382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18386:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1838a:	e7d3      	b.n	18334 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   1838c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18390:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   18394:	e7ce      	b.n	18334 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PDM(reg, CLK) = NRF_GET_PIN(pins[i]);
   18396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1839a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
   1839e:	e7e5      	b.n	1836c <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PDM(reg, DIN) = NRF_GET_PIN(pins[i]);
   183a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   183a4:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
   183a8:	e7c4      	b.n	18334 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   183aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   183ae:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   183b2:	6820      	ldr	r0, [r4, #0]
   183b4:	f3c0 3140 	ubfx	r1, r0, #13, #1
   183b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   183bc:	f7ff ff63 	bl	18286 <nrf_gpio_pin_write>
   183c0:	e7b2      	b.n	18328 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   183c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   183c6:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   183ca:	e7f2      	b.n	183b2 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   183cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   183d0:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   183d4:	e7ed      	b.n	183b2 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   183d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   183da:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   183de:	e7e8      	b.n	183b2 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   183e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   183e4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   183e8:	2201      	movs	r2, #1
   183ea:	e7a4      	b.n	18336 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   183ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   183f0:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   183f4:	e7f8      	b.n	183e8 <pinctrl_configure_pins+0x116>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   183f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   183fa:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   183fe:	e7f3      	b.n	183e8 <pinctrl_configure_pins+0x116>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   18400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18404:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   18408:	e7ee      	b.n	183e8 <pinctrl_configure_pins+0x116>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   1840a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1840e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   18412:	e7e9      	b.n	183e8 <pinctrl_configure_pins+0x116>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   18414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18418:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   1841c:	e7e4      	b.n	183e8 <pinctrl_configure_pins+0x116>
		switch (NRF_GET_FUN(pins[i])) {
   1841e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18422:	e75e      	b.n	182e2 <pinctrl_configure_pins+0x10>

00018424 <_ZN2ei9ei_matrixD1Ev>:
    ~ei_matrix() {
   18424:	b510      	push	{r4, lr}
   18426:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
   18428:	6800      	ldr	r0, [r0, #0]
   1842a:	b118      	cbz	r0, 18434 <_ZN2ei9ei_matrixD1Ev+0x10>
   1842c:	7b23      	ldrb	r3, [r4, #12]
   1842e:	b10b      	cbz	r3, 18434 <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
   18430:	f000 fb76 	bl	18b20 <_Z7ei_freePv>
    }
   18434:	4620      	mov	r0, r4
   18436:	bd10      	pop	{r4, pc}

00018438 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0>:
    static int32_t calculate_no_of_stack_frames(
   18438:	b530      	push	{r4, r5, lr}
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   1843a:	ee07 1a90 	vmov	s15, r1
    static int32_t calculate_no_of_stack_frames(
   1843e:	ed2d 8b02 	vpush	{d8}
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   18442:	eef8 8a67 	vcvt.f32.u32	s17, s15
        if (version == 1) {
   18446:	2a01      	cmp	r2, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   18448:	ee20 0a28 	vmul.f32	s0, s0, s17
    static int32_t calculate_no_of_stack_frames(
   1844c:	b083      	sub	sp, #12
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
   1844e:	ee60 8aa8 	vmul.f32	s17, s1, s17
    static int32_t calculate_no_of_stack_frames(
   18452:	4605      	mov	r5, r0
        if (version == 1) {
   18454:	d11b      	bne.n	1848e <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0+0x56>
  { return __builtin_roundf(__x); }
   18456:	f7fd f87b 	bl	15550 <roundf>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   1845a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1845e:	eeb0 0a68 	vmov.f32	s0, s17
   18462:	ee17 4a90 	vmov	r4, s15
   18466:	f7fd f873 	bl	15550 <roundf>
                floor(static_cast<float>(signal_size - length) / frame_stride));
   1846a:	1b2c      	subs	r4, r5, r4
   1846c:	ee07 4a90 	vmov	s15, r4
   18470:	eef8 7a67 	vcvt.f32.u32	s15, s15
  { return __builtin_floorf(__x); }
   18474:	ee87 0a80 	vdiv.f32	s0, s15, s0
   18478:	f7fd f802 	bl	15480 <floorf>
            numframes = static_cast<int>(
   1847c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   18480:	ed8d 0a01 	vstr	s0, [sp, #4]
        return numframes;
   18484:	9801      	ldr	r0, [sp, #4]
    }
   18486:	b003      	add	sp, #12
   18488:	ecbd 8b02 	vpop	{d8}
   1848c:	bd30      	pop	{r4, r5, pc}
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   1848e:	f7f2 fc1d 	bl	accc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
   18492:	eeb0 8a40 	vmov.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
   18496:	eeb0 0a68 	vmov.f32	s0, s17
   1849a:	f7f2 fc17 	bl	accc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   1849e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
            length = (frame_sample_length - (int)frame_stride);
   184a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   184a6:	ee18 3a10 	vmov	r3, s16
   184aa:	ee17 4a90 	vmov	r4, s15
   184ae:	1b1c      	subs	r4, r3, r4
   184b0:	e7db      	b.n	1846a <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0+0x32>

000184b2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
   184b2:	2a01      	cmp	r2, #1
   184b4:	d102      	bne.n	184bc <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   184b6:	6001      	str	r1, [r0, #0]
      }
   184b8:	2000      	movs	r0, #0
   184ba:	4770      	bx	lr
	  switch (__op)
   184bc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   184be:	bf04      	itt	eq
   184c0:	680b      	ldreq	r3, [r1, #0]
   184c2:	6003      	streq	r3, [r0, #0]
	      break;
   184c4:	e7f8      	b.n	184b8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

000184c6 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   184c6:	2a01      	cmp	r2, #1
   184c8:	d102      	bne.n	184d0 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   184ca:	6001      	str	r1, [r0, #0]
      }
   184cc:	2000      	movs	r0, #0
   184ce:	4770      	bx	lr
	  switch (__op)
   184d0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   184d2:	bf04      	itt	eq
   184d4:	680b      	ldreq	r3, [r1, #0]
   184d6:	6003      	streq	r3, [r0, #0]
	      break;
   184d8:	e7f8      	b.n	184cc <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000184da <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   184da:	b430      	push	{r4, r5}
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   184dc:	6804      	ldr	r4, [r0, #0]
   184de:	460d      	mov	r5, r1
   184e0:	4611      	mov	r1, r2
   184e2:	6828      	ldr	r0, [r5, #0]
   184e4:	681a      	ldr	r2, [r3, #0]
   184e6:	6809      	ldr	r1, [r1, #0]
   184e8:	4623      	mov	r3, r4
      }
   184ea:	bc30      	pop	{r4, r5}
   184ec:	4718      	bx	r3

000184ee <_ZN2ei5numpy8linspaceEffjPf.isra.0>:
    static int linspace(float start, float stop, uint32_t number, float *out)
   184ee:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
   184f0:	b120      	cbz	r0, 184fc <_ZN2ei5numpy8linspaceEffjPf.isra.0+0xe>
   184f2:	b119      	cbz	r1, 184fc <_ZN2ei5numpy8linspaceEffjPf.isra.0+0xe>
        if (number == 1) {
   184f4:	2801      	cmp	r0, #1
   184f6:	d102      	bne.n	184fe <_ZN2ei5numpy8linspaceEffjPf.isra.0+0x10>
            out[0] = start;
   184f8:	ed81 0a00 	vstr	s0, [r1]
    }
   184fc:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
   184fe:	1e42      	subs	r2, r0, #1
   18500:	ee07 2a10 	vmov	s14, r2
   18504:	ee70 7ac0 	vsub.f32	s15, s1, s0
   18508:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   1850c:	460c      	mov	r4, r1
   1850e:	eec7 6a87 	vdiv.f32	s13, s15, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   18512:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
   18514:	ee07 3a90 	vmov	s15, r3
   18518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   1851c:	eef0 7a40 	vmov.f32	s15, s0
   18520:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   18524:	3301      	adds	r3, #1
   18526:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
   18528:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   1852c:	d8f2      	bhi.n	18514 <_ZN2ei5numpy8linspaceEffjPf.isra.0+0x26>
        out[number - 1] = stop;
   1852e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   18532:	ed41 0a01 	vstr	s1, [r1, #-4]
        return EIDSP_OK;
   18536:	e7e1      	b.n	184fc <_ZN2ei5numpy8linspaceEffjPf.isra.0+0xe>

00018538 <_Z24z_cbprintf_cxx_store_argIPKcEvPhT_>:
#endif

static inline void z_cbprintf_wcpy(int *dst, int *src, size_t len)
{
	for (size_t i = 0; i < len; i++) {
		dst[i] = src[i];
   18538:	6001      	str	r1, [r0, #0]
{
	size_t wlen = z_cbprintf_cxx_arg_size(arg) / sizeof(int);
	void *p = &arg;

	z_cbprintf_wcpy((int *)dst, (int *)p, wlen);
}
   1853a:	4770      	bx	lr

0001853c <_ZNSt14_Function_baseD1Ev>:
      if (_M_manager)
   1853c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   1853e:	b510      	push	{r4, lr}
   18540:	4604      	mov	r4, r0
      if (_M_manager)
   18542:	b113      	cbz	r3, 1854a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   18544:	2203      	movs	r2, #3
   18546:	4601      	mov	r1, r0
   18548:	4798      	blx	r3
    }
   1854a:	4620      	mov	r0, r4
   1854c:	bd10      	pop	{r4, pc}

0001854e <_ZN2ei9ei_matrixC1EjjPf>:
    ei_matrix(
   1854e:	b570      	push	{r4, r5, r6, lr}
   18550:	4604      	mov	r4, r0
   18552:	460e      	mov	r6, r1
   18554:	4615      	mov	r5, r2
        if (a_buffer) {
   18556:	b133      	cbz	r3, 18566 <_ZN2ei9ei_matrixC1EjjPf+0x18>
            buffer = a_buffer;
   18558:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
   1855a:	2300      	movs	r3, #0
        cols = n_cols;
   1855c:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
   18560:	7323      	strb	r3, [r4, #12]
    }
   18562:	4620      	mov	r0, r4
   18564:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   18566:	fb02 f001 	mul.w	r0, r2, r1
   1856a:	0080      	lsls	r0, r0, #2
   1856c:	2101      	movs	r1, #1
   1856e:	f000 fad5 	bl	18b1c <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   18572:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   18574:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
   18576:	e7f1      	b.n	1855c <_ZN2ei9ei_matrixC1EjjPf+0xe>

00018578 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
   18578:	e7fe      	b.n	18578 <_ZSt25__throw_bad_function_callv>

0001857a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1857a:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1857e:	4359      	muls	r1, r3
   18580:	2300      	movs	r3, #0
   18582:	4299      	cmp	r1, r3
   18584:	d00a      	beq.n	1859c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
   18586:	6802      	ldr	r2, [r0, #0]
   18588:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1858c:	edd2 7a00 	vldr	s15, [r2]
   18590:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   18594:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
   18596:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1859a:	e7f2      	b.n	18582 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x8>
    }
   1859c:	2000      	movs	r0, #0
   1859e:	4770      	bx	lr

000185a0 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
    ~ei_stack_frames_info() {
   185a0:	b538      	push	{r3, r4, r5, lr}
        if (frame_ixs) {
   185a2:	6845      	ldr	r5, [r0, #4]
    ~ei_stack_frames_info() {
   185a4:	4604      	mov	r4, r0
        if (frame_ixs) {
   185a6:	b135      	cbz	r5, 185b6 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x16>
	_M_deallocate(_M_impl._M_start,
   185a8:	6828      	ldr	r0, [r5, #0]
	if (__p)
   185aa:	b108      	cbz	r0, 185b0 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x10>
   185ac:	f003 fac8 	bl	1bb40 <_ZdlPv>
            delete frame_ixs;
   185b0:	4628      	mov	r0, r5
   185b2:	f003 fac5 	bl	1bb40 <_ZdlPv>
    }
   185b6:	4620      	mov	r0, r4
   185b8:	bd38      	pop	{r3, r4, r5, pc}

000185ba <_ZN2ei8speechpy10processing11preemphasisD1Ev>:
        ~preemphasis() {
   185ba:	b510      	push	{r4, lr}
   185bc:	4604      	mov	r4, r0
            if (_prev_buffer) {
   185be:	68c0      	ldr	r0, [r0, #12]
   185c0:	b108      	cbz	r0, 185c6 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0xc>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   185c2:	f000 faad 	bl	18b20 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   185c6:	6920      	ldr	r0, [r4, #16]
   185c8:	b108      	cbz	r0, 185ce <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x14>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   185ca:	f000 faa9 	bl	18b20 <_Z7ei_freePv>
        }
   185ce:	4620      	mov	r0, r4
   185d0:	bd10      	pop	{r4, pc}

000185d2 <ei_wrapper_classifier_has_anomaly>:
}
   185d2:	2000      	movs	r0, #0
   185d4:	4770      	bx	lr

000185d6 <ei_wrapper_get_window_size>:
}
   185d6:	f643 6070 	movw	r0, #15984	; 0x3e70
   185da:	4770      	bx	lr

000185dc <ei_wrapper_clear_data>:
	return buf_cleanup(&ei_input, cancelled);
   185dc:	f7f2 bc5e 	b.w	ae9c <_ZL11buf_cleanupP11data_bufferPb.constprop.0>

000185e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   185e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   185e2:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   185e4:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
   185e6:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
   185ea:	b90b      	cbnz	r3, 185f0 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
   185ec:	f7ff ffc4 	bl	18578 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   185f0:	68c4      	ldr	r4, [r0, #12]
   185f2:	ab01      	add	r3, sp, #4
   185f4:	aa02      	add	r2, sp, #8
   185f6:	a903      	add	r1, sp, #12
   185f8:	47a0      	blx	r4
    }
   185fa:	b004      	add	sp, #16
   185fc:	bd10      	pop	{r4, pc}

000185fe <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   185fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   18600:	0097      	lsls	r7, r2, #2
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   18602:	4604      	mov	r4, r0
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   18604:	e9c0 1200 	strd	r1, r2, [r0]
   18608:	7603      	strb	r3, [r0, #24]
   1860a:	ed80 0a02 	vstr	s0, [r0, #8]
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   1860e:	460e      	mov	r6, r1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   18610:	4638      	mov	r0, r7
   18612:	2101      	movs	r1, #1
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   18614:	4615      	mov	r5, r2
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   18616:	f000 fa81 	bl	18b1c <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   1861a:	2101      	movs	r1, #1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   1861c:	60e0      	str	r0, [r4, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   1861e:	4638      	mov	r0, r7
   18620:	f000 fa7c 	bl	18b1c <_Z9ei_callocjj>
            _next_offset_should_be = 0;
   18624:	2300      	movs	r3, #0
            if (shift < 0) {
   18626:	429d      	cmp	r5, r3
            _next_offset_should_be = 0;
   18628:	6163      	str	r3, [r4, #20]
                _shift = signal->total_length + shift;
   1862a:	bfb8      	it	lt
   1862c:	6933      	ldrlt	r3, [r6, #16]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   1862e:	6120      	str	r0, [r4, #16]
                _shift = signal->total_length + shift;
   18630:	bfbc      	itt	lt
   18632:	195b      	addlt	r3, r3, r5
   18634:	6063      	strlt	r3, [r4, #4]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   18636:	68e3      	ldr	r3, [r4, #12]
   18638:	b13b      	cbz	r3, 1864a <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
   1863a:	b130      	cbz	r0, 1864a <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
   1863c:	6931      	ldr	r1, [r6, #16]
   1863e:	4603      	mov	r3, r0
   18640:	462a      	mov	r2, r5
   18642:	1b49      	subs	r1, r1, r5
   18644:	4630      	mov	r0, r6
   18646:	f7ff ffcb 	bl	185e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        }
   1864a:	4620      	mov	r0, r4
   1864c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001864e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   1864e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18652:	6807      	ldr	r7, [r0, #0]
   18654:	f8d3 9000 	ldr.w	r9, [r3]

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   18658:	680c      	ldr	r4, [r1, #0]
   1865a:	68bb      	ldr	r3, [r7, #8]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   1865c:	6815      	ldr	r5, [r2, #0]

        size_t out_ptr_ix = 0;

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   1865e:	fbb4 f4f3 	udiv	r4, r4, r3
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   18662:	fbb5 f5f3 	udiv	r5, r5, r3
        size_t out_ptr_ix = 0;
   18666:	f04f 0800 	mov.w	r8, #0
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   1866a:	4425      	add	r5, r4
   1866c:	42a5      	cmp	r5, r4
   1866e:	d917      	bls.n	186a0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x52>
   18670:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   18674:	2600      	movs	r6, #0
   18676:	68ba      	ldr	r2, [r7, #8]
   18678:	42b2      	cmp	r2, r6
   1867a:	eb06 0308 	add.w	r3, r6, r8
   1867e:	d90c      	bls.n	1869a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x4c>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   18680:	687b      	ldr	r3, [r7, #4]
   18682:	6838      	ldr	r0, [r7, #0]
   18684:	5d99      	ldrb	r1, [r3, r6]
   18686:	2201      	movs	r2, #1
   18688:	4653      	mov	r3, sl
   1868a:	4421      	add	r1, r4
   1868c:	f7ff ffa8 	bl	185e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
   18690:	f10a 0a04 	add.w	sl, sl, #4
   18694:	b928      	cbnz	r0, 186a2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   18696:	3601      	adds	r6, #1
   18698:	e7ed      	b.n	18676 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x28>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   1869a:	3401      	adds	r4, #1
   1869c:	4698      	mov	r8, r3
   1869e:	e7e5      	b.n	1866c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x1e>
                    return r;
                }
            }
        }

        return 0;
   186a0:	2000      	movs	r0, #0
      }
   186a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000186a6 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   186a6:	b510      	push	{r4, lr}
   186a8:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   186aa:	6840      	ldr	r0, [r0, #4]
   186ac:	b108      	cbz	r0, 186b2 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
   186ae:	6823      	ldr	r3, [r4, #0]
   186b0:	4798      	blx	r3
	__ptr = pointer();
      }
   186b2:	4620      	mov	r0, r4
   186b4:	bd10      	pop	{r4, pc}

000186b6 <run_inference>:
{
   186b6:	b510      	push	{r4, lr}
    EI_IMPULSE_ERROR run_res = run_nn_inference(fmatrix, result, debug);
   186b8:	f7f3 fb16 	bl	bce8 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>
    if (run_res != EI_IMPULSE_OK) {
   186bc:	4604      	mov	r4, r0
   186be:	b928      	cbnz	r0, 186cc <run_inference+0x16>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   186c0:	f000 fa16 	bl	18af0 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
   186c4:	3002      	adds	r0, #2
   186c6:	bf08      	it	eq
   186c8:	f06f 0401 	mvneq.w	r4, #1
}
   186cc:	4620      	mov	r0, r4
   186ce:	bd10      	pop	{r4, pc}

000186d0 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
   186d0:	b513      	push	{r0, r1, r4, lr}
   186d2:	460b      	mov	r3, r1
   186d4:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   186d6:	e9d0 0100 	ldrd	r0, r1, [r0]
   186da:	466c      	mov	r4, sp
   186dc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   186e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   186e4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   186e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   186ec:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   186f0:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   186f2:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   186f4:	6090      	str	r0, [r2, #8]
   186f6:	68d8      	ldr	r0, [r3, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   186f8:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   186fa:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   186fc:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   186fe:	60d9      	str	r1, [r3, #12]
      }
   18700:	b002      	add	sp, #8
   18702:	bd10      	pop	{r4, pc}

00018704 <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>:
      operator=(const function& __x)
   18704:	b530      	push	{r4, r5, lr}
   18706:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   18708:	2300      	movs	r3, #0
   1870a:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   1870c:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   1870e:	4605      	mov	r5, r0
   18710:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   18712:	b133      	cbz	r3, 18722 <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   18714:	2202      	movs	r2, #2
   18716:	4668      	mov	r0, sp
   18718:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   1871a:	68e3      	ldr	r3, [r4, #12]
   1871c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   1871e:	68a3      	ldr	r3, [r4, #8]
   18720:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   18722:	4629      	mov	r1, r5
   18724:	4668      	mov	r0, sp
   18726:	f7ff ffd3 	bl	186d0 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
   1872a:	4668      	mov	r0, sp
   1872c:	f7ff ff06 	bl	1853c <_ZNSt14_Function_baseD1Ev>
      }
   18730:	b005      	add	sp, #20
   18732:	bd30      	pop	{r4, r5, pc}

00018734 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   18734:	f7fe bf64 	b.w	17600 <nrf_cc3xx_platform_init_no_rng>

00018738 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   18738:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1873a:	f7ef fc07 	bl	7f4c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1873e:	f7ef fcb9 	bl	80b4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   18742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   18746:	f7fe bf5b 	b.w	17600 <nrf_cc3xx_platform_init_no_rng>

0001874a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1874a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1874e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   18752:	f1a0 0308 	sub.w	r3, r0, #8
   18756:	4258      	negs	r0, r3
   18758:	4158      	adcs	r0, r3
   1875a:	4770      	bx	lr

0001875c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1875c:	4700      	bx	r0

0001875e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1875e:	f000 b991 	b.w	18a84 <z_impl_k_busy_wait>

00018762 <nrf_gpio_pin_present_check>:
    switch (port)
   18762:	0943      	lsrs	r3, r0, #5
   18764:	d00b      	beq.n	1877e <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   18766:	2b01      	cmp	r3, #1
   18768:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1876c:	bf18      	it	ne
   1876e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   18770:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   18774:	fa23 f000 	lsr.w	r0, r3, r0
}
   18778:	f000 0001 	and.w	r0, r0, #1
   1877c:	4770      	bx	lr
    switch (port)
   1877e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18782:	e7f5      	b.n	18770 <nrf_gpio_pin_present_check+0xe>

00018784 <pin_is_task_output>:
{
   18784:	b508      	push	{r3, lr}
   18786:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   18788:	f7f4 face 	bl	cd28 <pin_is_output>
   1878c:	b110      	cbz	r0, 18794 <pin_is_task_output+0x10>
   1878e:	4610      	mov	r0, r2
   18790:	f7f4 fab4 	bl	ccfc <pin_in_use_by_te>
}
   18794:	f000 0001 	and.w	r0, r0, #1
   18798:	bd08      	pop	{r3, pc}

0001879a <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1879a:	0080      	lsls	r0, r0, #2
}
   1879c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   187a0:	4770      	bx	lr

000187a2 <nrf_gpio_reconfigure>:
{
   187a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   187a6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   187a8:	a801      	add	r0, sp, #4
{
   187aa:	460e      	mov	r6, r1
   187ac:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   187b0:	4690      	mov	r8, r2
   187b2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   187b4:	f7f4 fb3c 	bl	ce30 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   187b8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   187ba:	f1b8 0f00 	cmp.w	r8, #0
   187be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   187c2:	bf14      	ite	ne
   187c4:	2302      	movne	r3, #2
   187c6:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   187c8:	2e00      	cmp	r6, #0
   187ca:	bf18      	it	ne
   187cc:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   187d0:	2d00      	cmp	r5, #0
   187d2:	bf14      	ite	ne
   187d4:	210c      	movne	r1, #12
   187d6:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   187d8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   187da:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   187de:	bf14      	ite	ne
   187e0:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   187e4:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   187e6:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   187e8:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   187ec:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   187f0:	bf14      	ite	ne
   187f2:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   187f6:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   187f8:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   187fa:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   187fe:	b106      	cbz	r6, 18802 <nrf_gpio_reconfigure+0x60>
   18800:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   18802:	f1b8 0f00 	cmp.w	r8, #0
   18806:	d003      	beq.n	18810 <nrf_gpio_reconfigure+0x6e>
   18808:	f898 8000 	ldrb.w	r8, [r8]
   1880c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   18810:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18812:	b10d      	cbz	r5, 18818 <nrf_gpio_reconfigure+0x76>
   18814:	782d      	ldrb	r5, [r5, #0]
   18816:	00ad      	lsls	r5, r5, #2
   18818:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1881c:	b10c      	cbz	r4, 18822 <nrf_gpio_reconfigure+0x80>
   1881e:	7822      	ldrb	r2, [r4, #0]
   18820:	0214      	lsls	r4, r2, #8
   18822:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   18824:	b10f      	cbz	r7, 1882a <nrf_gpio_reconfigure+0x88>
   18826:	783f      	ldrb	r7, [r7, #0]
   18828:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1882a:	432c      	orrs	r4, r5
   1882c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   1882e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   18832:	b002      	add	sp, #8
   18834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018838 <nrf_gpio_cfg_sense_set>:
{
   18838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1883a:	f10d 030f 	add.w	r3, sp, #15
   1883e:	9301      	str	r3, [sp, #4]
   18840:	2300      	movs	r3, #0
{
   18842:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   18846:	9300      	str	r3, [sp, #0]
   18848:	461a      	mov	r2, r3
   1884a:	4619      	mov	r1, r3
   1884c:	f7ff ffa9 	bl	187a2 <nrf_gpio_reconfigure>
}
   18850:	b005      	add	sp, #20
   18852:	f85d fb04 	ldr.w	pc, [sp], #4

00018856 <is_valid_address>:
   18856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1885a:	6913      	ldr	r3, [r2, #16]
    return p_reg->CODESIZE;
   1885c:	6952      	ldr	r2, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   1885e:	4353      	muls	r3, r2
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   18860:	4298      	cmp	r0, r3
   18862:	d309      	bcc.n	18878 <is_valid_address+0x22>
    if (uicr_allowed &&
   18864:	b131      	cbz	r1, 18874 <is_valid_address+0x1e>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   18866:	f1a0 2010 	sub.w	r0, r0, #268439552	; 0x10001000
    if (uicr_allowed &&
   1886a:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
   1886e:	bf2c      	ite	cs
   18870:	2100      	movcs	r1, #0
   18872:	2101      	movcc	r1, #1
}
   18874:	4608      	mov	r0, r1
   18876:	4770      	bx	lr
        return true;
   18878:	2101      	movs	r1, #1
   1887a:	e7fb      	b.n	18874 <is_valid_address+0x1e>

0001887c <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   1887c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18880:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   18882:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   18884:	4350      	muls	r0, r2
   18886:	4770      	bx	lr

00018888 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   18888:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1888c:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   1888e:	4770      	bx	lr

00018890 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   18890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18894:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   18896:	4770      	bx	lr

00018898 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   18898:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1889a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1889c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1889e:	bf9c      	itt	ls
   188a0:	6880      	ldrls	r0, [r0, #8]
   188a2:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   188a4:	3b01      	subs	r3, #1
   188a6:	1a98      	subs	r0, r3, r2
}
   188a8:	4770      	bx	lr

000188aa <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   188aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   188ae:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   188b0:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   188b4:	6867      	ldr	r7, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   188b6:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   188ba:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   188bc:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   188c0:	4689      	mov	r9, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   188c2:	4438      	add	r0, r7
  if (Rem > NumBytes) {
   188c4:	d904      	bls.n	188d0 <_WriteNoCheck+0x26>
   188c6:	f003 fa0b 	bl	1bce0 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   188ca:	60e5      	str	r5, [r4, #12]
}
   188cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   188d0:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   188d2:	eba5 0508 	sub.w	r5, r5, r8
   188d6:	f003 fa03 	bl	1bce0 <memcpy>
   188da:	6860      	ldr	r0, [r4, #4]
   188dc:	462a      	mov	r2, r5
   188de:	eb09 0106 	add.w	r1, r9, r6
   188e2:	e7f0      	b.n	188c6 <_WriteNoCheck+0x1c>

000188e4 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   188e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   188e8:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   188ea:	4606      	mov	r6, r0
   188ec:	4689      	mov	r9, r1
   188ee:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   188f0:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   188f4:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   188f6:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   188f8:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   188fa:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   188fc:	bf28      	it	cs
   188fe:	18e4      	addcs	r4, r4, r3
   18900:	3c01      	subs	r4, #1
   18902:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   18904:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   18906:	42bc      	cmp	r4, r7
   18908:	bf28      	it	cs
   1890a:	463c      	movcs	r4, r7
   1890c:	4294      	cmp	r4, r2
   1890e:	bf28      	it	cs
   18910:	4614      	movcs	r4, r2
   18912:	4649      	mov	r1, r9
   18914:	4428      	add	r0, r5
   18916:	4622      	mov	r2, r4
   18918:	f003 f9e2 	bl	1bce0 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1891c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1891e:	4425      	add	r5, r4
      WrOff = 0u;
   18920:	42ab      	cmp	r3, r5
   18922:	bf08      	it	eq
   18924:	2500      	moveq	r5, #0
  } while (NumBytes);
   18926:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   18928:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1892a:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1892c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1892e:	d1e1      	bne.n	188f4 <_WriteBlocking+0x10>
}
   18930:	4640      	mov	r0, r8
   18932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018936 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   18936:	f7f5 b893 	b.w	da60 <_DoInit>

0001893a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1893a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1893c:	f7ff fffb 	bl	18936 <SEGGER_RTT_Init>

	return 0;
}
   18940:	2000      	movs	r0, #0
   18942:	bd08      	pop	{r3, pc}

00018944 <z_device_state_init>:
}
   18944:	4770      	bx	lr

00018946 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   18946:	b138      	cbz	r0, 18958 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   18948:	68c3      	ldr	r3, [r0, #12]
   1894a:	8818      	ldrh	r0, [r3, #0]
   1894c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   18950:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   18954:	4258      	negs	r0, r3
   18956:	4158      	adcs	r0, r3
}
   18958:	4770      	bx	lr

0001895a <arch_system_halt>:
	__asm__ volatile(
   1895a:	f04f 0220 	mov.w	r2, #32
   1895e:	f3ef 8311 	mrs	r3, BASEPRI
   18962:	f382 8812 	msr	BASEPRI_MAX, r2
   18966:	f3bf 8f6f 	isb	sy
	for (;;) {
   1896a:	e7fe      	b.n	1896a <arch_system_halt+0x10>

0001896c <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   1896c:	f003 b9f3 	b.w	1bd56 <memset>

00018970 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18970:	f003 b9b6 	b.w	1bce0 <memcpy>

00018974 <k_mem_slab_init>:
{
   18974:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   18976:	2400      	movs	r4, #0
   18978:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1897a:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1897c:	ea41 0402 	orr.w	r4, r1, r2
   18980:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   18984:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   18988:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1898a:	d10c      	bne.n	189a6 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   1898c:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1898e:	42a3      	cmp	r3, r4
   18990:	d103      	bne.n	1899a <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   18992:	e9c0 0000 	strd	r0, r0, [r0]
}
   18996:	2000      	movs	r0, #0
}
   18998:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1899a:	6985      	ldr	r5, [r0, #24]
   1899c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1899e:	3401      	adds	r4, #1
		slab->free_list = p;
   189a0:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   189a2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   189a4:	e7f3      	b.n	1898e <k_mem_slab_init+0x1a>
		return -EINVAL;
   189a6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   189aa:	e7f5      	b.n	18998 <k_mem_slab_init+0x24>

000189ac <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   189ac:	f3ef 8005 	mrs	r0, IPSR
}
   189b0:	3800      	subs	r0, #0
   189b2:	bf18      	it	ne
   189b4:	2001      	movne	r0, #1
   189b6:	4770      	bx	lr

000189b8 <z_impl_k_thread_name_set>:
}
   189b8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   189bc:	4770      	bx	lr

000189be <k_thread_name_get>:
}
   189be:	2000      	movs	r0, #0
   189c0:	4770      	bx	lr

000189c2 <z_impl_k_thread_start>:
	z_sched_start(thread);
   189c2:	f7f6 be15 	b.w	f5f0 <z_sched_start>

000189c6 <z_pm_save_idle_exit>:
{
   189c6:	b508      	push	{r3, lr}
	pm_system_resume();
   189c8:	f7ef f9a8 	bl	7d1c <pm_system_resume>
}
   189cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   189d0:	f7ff bc22 	b.w	18218 <sys_clock_idle_exit>

000189d4 <k_msgq_init>:
	msgq->max_msgs = max_msgs;
   189d4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
   189d8:	fb03 1202 	mla	r2, r3, r2, r1
	msgq->used_msgs = 0;
   189dc:	2300      	movs	r3, #0
	msgq->read_ptr = buffer;
   189de:	e9c0 2106 	strd	r2, r1, [r0, #24]
   189e2:	e9c0 0000 	strd	r0, r0, [r0]
	msgq->buffer_start = buffer;
   189e6:	6141      	str	r1, [r0, #20]
	msgq->write_ptr = buffer;
   189e8:	6201      	str	r1, [r0, #32]
	msgq->used_msgs = 0;
   189ea:	6243      	str	r3, [r0, #36]	; 0x24
	msgq->flags = 0;
   189ec:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	msgq->lock = (struct k_spinlock) {};
   189f0:	6083      	str	r3, [r0, #8]
}
   189f2:	4770      	bx	lr

000189f4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   189f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   189f8:	428b      	cmp	r3, r1
   189fa:	d001      	beq.n	18a00 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   189fc:	f7f6 bf92 	b.w	f924 <z_set_prio>
}
   18a00:	2000      	movs	r0, #0
   18a02:	4770      	bx	lr

00018a04 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   18a04:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
   18a06:	e9c0 3302 	strd	r3, r3, [r0, #8]
   18a0a:	e9c0 0000 	strd	r0, r0, [r0]
}
   18a0e:	4618      	mov	r0, r3
   18a10:	4770      	bx	lr

00018a12 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   18a12:	b13a      	cbz	r2, 18a24 <z_impl_k_sem_init+0x12>
   18a14:	428a      	cmp	r2, r1
   18a16:	d305      	bcc.n	18a24 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   18a18:	e9c0 1202 	strd	r1, r2, [r0, #8]
   18a1c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   18a20:	2000      	movs	r0, #0
   18a22:	4770      	bx	lr
		return -EINVAL;
   18a24:	f06f 0015 	mvn.w	r0, #21
}
   18a28:	4770      	bx	lr

00018a2a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   18a2a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   18a2c:	2301      	movs	r3, #1
   18a2e:	408b      	lsls	r3, r1
   18a30:	ea22 0303 	bic.w	r3, r2, r3
   18a34:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   18a36:	fa22 f001 	lsr.w	r0, r2, r1
}
   18a3a:	f000 0001 	and.w	r0, r0, #1
   18a3e:	4770      	bx	lr

00018a40 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18a40:	4603      	mov	r3, r0
   18a42:	b920      	cbnz	r0, 18a4e <z_reschedule_irqlock+0xe>
   18a44:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   18a48:	b90a      	cbnz	r2, 18a4e <z_reschedule_irqlock+0xe>
   18a4a:	f7ef bcb1 	b.w	83b0 <arch_swap>
	__asm__ volatile(
   18a4e:	f383 8811 	msr	BASEPRI, r3
   18a52:	f3bf 8f6f 	isb	sy
}
   18a56:	4770      	bx	lr

00018a58 <z_reschedule_unlocked>:
	__asm__ volatile(
   18a58:	f04f 0320 	mov.w	r3, #32
   18a5c:	f3ef 8011 	mrs	r0, BASEPRI
   18a60:	f383 8812 	msr	BASEPRI_MAX, r3
   18a64:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   18a68:	f7ff bfea 	b.w	18a40 <z_reschedule_irqlock>

00018a6c <z_priq_dumb_best>:
	return list->head == list;
   18a6c:	6803      	ldr	r3, [r0, #0]
}
   18a6e:	4298      	cmp	r0, r3
   18a70:	bf14      	ite	ne
   18a72:	4618      	movne	r0, r3
   18a74:	2000      	moveq	r0, #0
   18a76:	4770      	bx	lr

00018a78 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   18a78:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   18a7a:	f7f7 feeb 	bl	10854 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   18a7e:	bd08      	pop	{r3, pc}

00018a80 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   18a80:	f7f7 bee8 	b.w	10854 <sys_clock_tick_get>

00018a84 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   18a84:	b108      	cbz	r0, 18a8a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   18a86:	f7f0 bc3b 	b.w	9300 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   18a8a:	4770      	bx	lr

00018a8c <k_timer_init>:
	timer->status = 0U;
   18a8c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   18a8e:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   18a92:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   18a96:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   18a9a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   18a9e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   18aa0:	6343      	str	r3, [r0, #52]	; 0x34
}
   18aa2:	4770      	bx	lr

00018aa4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   18aa4:	b510      	push	{r4, lr}
   18aa6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   18aa8:	f7f7 fd34 	bl	10514 <z_abort_timeout>

	if (inactive) {
   18aac:	b9b0      	cbnz	r0, 18adc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   18aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18ab0:	b10b      	cbz	r3, 18ab6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   18ab2:	4620      	mov	r0, r4
   18ab4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   18ab6:	f104 0018 	add.w	r0, r4, #24
   18aba:	f7f7 f8b1 	bl	fc20 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   18abe:	b168      	cbz	r0, 18adc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   18ac0:	f7f6 fd4e 	bl	f560 <z_ready_thread>
   18ac4:	f04f 0320 	mov.w	r3, #32
   18ac8:	f3ef 8011 	mrs	r0, BASEPRI
   18acc:	f383 8812 	msr	BASEPRI_MAX, r3
   18ad0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   18ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18ad8:	f7ff bfb2 	b.w	18a40 <z_reschedule_irqlock>
   18adc:	bd10      	pop	{r4, pc}

00018ade <k_heap_init>:
{
   18ade:	b410      	push	{r4}
   18ae0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   18ae4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   18ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   18aec:	f7ed bf4a 	b.w	6984 <sys_heap_init>

00018af0 <_Z29ei_run_impulse_check_canceledv>:
}
   18af0:	2000      	movs	r0, #0
   18af2:	4770      	bx	lr

00018af4 <_Z16ei_read_timer_usv>:
uint64_t ei_read_timer_us() {
   18af4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   18af6:	f7ff ffc3 	bl	18a80 <z_impl_k_uptime_ticks>
   18afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18afe:	fba0 0302 	umull	r0, r3, r0, r2
   18b02:	fb02 3101 	mla	r1, r2, r1, r3
   18b06:	0bc0      	lsrs	r0, r0, #15
   18b08:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    return k_uptime_get() * 1000;
   18b0c:	fba0 0302 	umull	r0, r3, r0, r2
   18b10:	0bc9      	lsrs	r1, r1, #15
}
   18b12:	fb02 3101 	mla	r1, r2, r1, r3
   18b16:	bd08      	pop	{r3, pc}

00018b18 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
   18b18:	f7fd b8ce 	b.w	15cb8 <malloc>

00018b1c <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
   18b1c:	f7fd b8b2 	b.w	15c84 <calloc>

00018b20 <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
   18b20:	f7fd b8d2 	b.w	15cc8 <free>

00018b24 <stage_rfft_f32>:
   twR = *pCoeff++ ;
   twI = *pCoeff++ ;


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
   18b24:	edd1 7a00 	vldr	s15, [r1]

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
   18b28:	ed91 7a01 	vldr	s14, [r1, #4]
   k = (S->Sint).fftLen - 1;
   18b2c:	8803      	ldrh	r3, [r0, #0]
   t1a = xBR + xAR  ;
   18b2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
   t1b = xBI + xAI  ;
   18b32:	ee37 7a07 	vadd.f32	s14, s14, s14
{
   18b36:	b510      	push	{r4, lr}

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
   18b38:	ee37 6a87 	vadd.f32	s12, s15, s14
   *pOut++ = 0.5f * ( t1a - t1b );
   18b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
   18b40:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( t1a + t1b );
   18b42:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   18b46:	ee26 6a26 	vmul.f32	s12, s12, s13
   *pOut++ = 0.5f * ( t1a - t1b );
   18b4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
   18b4e:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
   18b50:	f104 0010 	add.w	r0, r4, #16
   18b54:	f101 0410 	add.w	r4, r1, #16
   18b58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   18b5c:	ed82 6a00 	vstr	s12, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
   18b60:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
   18b64:	3908      	subs	r1, #8
   18b66:	3210      	adds	r2, #16
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
      xBR = pB[0];
   18b68:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
   18b6c:	ed54 3a02 	vldr	s7, [r4, #-8]
      xBI = pB[1];
   18b70:	ed91 4a03 	vldr	s8, [r1, #12]
      xAI = pA[1];
   18b74:	ed54 7a01 	vldr	s15, [r4, #-4]

      twR = *pCoeff++;
   18b78:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
   18b7c:	ed50 4a01 	vldr	s9, [r0, #-4]

      t1a = xBR - xAR ;
   18b80:	ee37 5a63 	vsub.f32	s10, s14, s7
      t1b = xBI + xAI ;
   18b84:	ee34 6a27 	vadd.f32	s12, s8, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   18b88:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   18b8c:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   18b90:	ee05 7a85 	vmla.f32	s14, s11, s10


      pA += 2;
      pB -= 2;
      k--;
   18b94:	3b01      	subs	r3, #1
   } while (k > 0);
   18b96:	2b00      	cmp	r3, #0
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   18b98:	ee44 7a85 	vmla.f32	s15, s9, s10
   } while (k > 0);
   18b9c:	f100 0008 	add.w	r0, r0, #8
   18ba0:	f102 0208 	add.w	r2, r2, #8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   18ba4:	ee04 7a86 	vmla.f32	s14, s9, s12
   } while (k > 0);
   18ba8:	f104 0408 	add.w	r4, r4, #8
   18bac:	f1a1 0108 	sub.w	r1, r1, #8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   18bb0:	ee45 7ac6 	vmls.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   18bb4:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   18bb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   18bbc:	ed02 7a04 	vstr	s14, [r2, #-16]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   18bc0:	ed42 7a03 	vstr	s15, [r2, #-12]
   } while (k > 0);
   18bc4:	dcd0      	bgt.n	18b68 <stage_rfft_f32+0x44>
}
   18bc6:	bd10      	pop	{r4, pc}

00018bc8 <merge_rfft_f32>:
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
   18bc8:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
   18bcc:	ed91 6a01 	vldr	s12, [r1, #4]
   k = (S->Sint).fftLen - 1;
   18bd0:	8803      	ldrh	r3, [r0, #0]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
   18bd2:	ee37 7a86 	vadd.f32	s14, s15, s12
   *pOut++ = 0.5f * ( xAR - xAI );
   18bd6:	ee77 7ac6 	vsub.f32	s15, s15, s12
   *pOut++ = 0.5f * ( xAR + xAI );
   18bda:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
{
   18bde:	b510      	push	{r4, lr}
   *pOut++ = 0.5f * ( xAR + xAI );
   18be0:	ee27 7a26 	vmul.f32	s14, s14, s13
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
   18be4:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( xAR + xAI );
   18be6:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
   18bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
   18bee:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR - xAI );
   18bf0:	edc2 7a01 	vstr	s15, [r2, #4]
   pCoeff += 2 ;
   18bf4:	f104 0008 	add.w	r0, r4, #8
   18bf8:	3208      	adds	r2, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
   18bfa:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
   18bfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3

   while (k > 0)
   18c02:	2b00      	cmp	r3, #0
   18c04:	f102 0208 	add.w	r2, r2, #8
   18c08:	f100 0008 	add.w	r0, r0, #8
   18c0c:	f104 0408 	add.w	r4, r4, #8
   18c10:	f1a1 0108 	sub.w	r1, r1, #8
   18c14:	dc00      	bgt.n	18c18 <merge_rfft_f32+0x50>
      pA += 2;
      pB -= 2;
      k--;
   }

}
   18c16:	bd10      	pop	{r4, pc}
      xBR =   pB[0]    ;
   18c18:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
   18c1c:	ed54 3a02 	vldr	s7, [r4, #-8]
      xBI =   pB[1]    ;
   18c20:	ed91 4a03 	vldr	s8, [r1, #12]
      xAI =  pA[1];
   18c24:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
   18c28:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
   18c2c:	ed50 4a01 	vldr	s9, [r0, #-4]
      t1a = xAR - xBR ;
   18c30:	ee33 5ac7 	vsub.f32	s10, s7, s14
      t1b = xAI + xBI ;
   18c34:	ee34 6a27 	vadd.f32	s12, s8, s15
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   18c38:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   18c3c:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   18c40:	ee05 7ac5 	vmls.f32	s14, s11, s10
      k--;
   18c44:	3b01      	subs	r3, #1
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   18c46:	ee44 7a85 	vmla.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   18c4a:	ee04 7ac6 	vmls.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   18c4e:	ee45 7ac6 	vmls.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   18c52:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   18c56:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   18c5a:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   18c5e:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
   18c62:	e7ce      	b.n	18c02 <merge_rfft_f32+0x3a>

00018c64 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
   18c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c68:	4605      	mov	r5, r0
   18c6a:	460f      	mov	r7, r1
   18c6c:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
   18c6e:	461c      	mov	r4, r3
   18c70:	b14b      	cbz	r3, 18c86 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
   18c72:	f7ff ffa9 	bl	18bc8 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   18c76:	4622      	mov	r2, r4
   18c78:	4631      	mov	r1, r6
   18c7a:	4628      	mov	r0, r5
   18c7c:	2301      	movs	r3, #1
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
   18c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   18c82:	f001 b989 	b.w	19f98 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
   18c86:	4622      	mov	r2, r4
   18c88:	2301      	movs	r3, #1
   18c8a:	f001 f985 	bl	19f98 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
   18c8e:	4632      	mov	r2, r6
   18c90:	4639      	mov	r1, r7
   18c92:	4628      	mov	r0, r5
}
   18c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
   18c98:	f7ff bf44 	b.w	18b24 <stage_rfft_f32>

00018c9c <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   18c9c:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
   18c9e:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   18ca0:	8840      	ldrh	r0, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
   18ca2:	6849      	ldr	r1, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   18ca4:	4358      	muls	r0, r3
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
   18ca6:	b900      	cbnz	r0, 18caa <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   18ca8:	4770      	bx	lr
      *pOut++ = (*pIn++) * scale;
   18caa:	ecf2 7a01 	vldmia	r2!, {s15}
   18cae:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
   18cb2:	3801      	subs	r0, #1
      *pOut++ = (*pIn++) * scale;
   18cb4:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
   18cb8:	e7f5      	b.n	18ca6 <arm_mat_scale_f32+0xa>

00018cba <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
   18cba:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
   18cbc:	8802      	ldrh	r2, [r0, #0]
   18cbe:	684b      	ldr	r3, [r1, #4]
   18cc0:	8845      	ldrh	r5, [r0, #2]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
   18cc2:	6844      	ldr	r4, [r0, #4]
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
   18cc4:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   18cc8:	00af      	lsls	r7, r5, #2
   18cca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      px = pOut + i;
   18cce:	4619      	mov	r1, r3
      col = nCols;
   18cd0:	4628      	mov	r0, r5
      while (col > 0U)
   18cd2:	4626      	mov	r6, r4
   18cd4:	b920      	cbnz	r0, 18ce0 <arm_mat_trans_f32+0x26>
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
   18cd6:	3304      	adds	r3, #4
   18cd8:	4293      	cmp	r3, r2
   18cda:	443c      	add	r4, r7
   18cdc:	d1f7      	bne.n	18cce <arm_mat_trans_f32+0x14>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   18cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *px = *pIn++;
   18ce0:	f856 eb04 	ldr.w	lr, [r6], #4
   18ce4:	f8c1 e000 	str.w	lr, [r1]
        col--;
   18ce8:	3801      	subs	r0, #1
        px += nRows;
   18cea:	4461      	add	r1, ip
        col--;
   18cec:	e7f2      	b.n	18cd4 <arm_mat_trans_f32+0x1a>

00018cee <arm_max_f32>:

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
   18cee:	ecf0 7a01 	vldmia	r0!, {s15}
{
   18cf2:	b530      	push	{r4, r5, lr}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   18cf4:	2401      	movs	r4, #1
  outIndex = 0U;
   18cf6:	2500      	movs	r5, #0
  while (blkCnt > 0U)
   18cf8:	42a1      	cmp	r1, r4
   18cfa:	d103      	bne.n	18d04 <arm_max_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
   18cfc:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
   18d00:	601d      	str	r5, [r3, #0]
}
   18d02:	bd30      	pop	{r4, r5, pc}
    maxVal = *pSrc++;
   18d04:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out < maxVal)
   18d08:	eef4 7ac7 	vcmpe.f32	s15, s14
   18d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18d10:	bf54      	ite	pl
   18d12:	eeb0 7a67 	vmovpl.f32	s14, s15
   18d16:	4625      	movmi	r5, r4
  outIndex = 0U;
   18d18:	eef0 7a47 	vmov.f32	s15, s14
   18d1c:	3401      	adds	r4, #1
   18d1e:	e7eb      	b.n	18cf8 <arm_max_f32+0xa>

00018d20 <arm_min_f32>:

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
   18d20:	ecf0 7a01 	vldmia	r0!, {s15}
{
   18d24:	b530      	push	{r4, r5, lr}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   18d26:	2401      	movs	r4, #1
  outIndex = 0U;
   18d28:	2500      	movs	r5, #0
  while (blkCnt > 0U)
   18d2a:	42a1      	cmp	r1, r4
   18d2c:	d103      	bne.n	18d36 <arm_min_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
   18d2e:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
   18d32:	601d      	str	r5, [r3, #0]
}
   18d34:	bd30      	pop	{r4, r5, pc}
    minVal = *pSrc++;
   18d36:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out > minVal)
   18d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
   18d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18d42:	bfd4      	ite	le
   18d44:	eeb0 7a67 	vmovle.f32	s14, s15
   18d48:	4625      	movgt	r5, r4
  outIndex = 0U;
   18d4a:	eef0 7a47 	vmov.f32	s15, s14
   18d4e:	3401      	adds	r4, #1
   18d50:	e7eb      	b.n	18d2a <arm_min_f32+0xa>

00018d52 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   18d52:	b510      	push	{r4, lr}
   18d54:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   18d56:	6800      	ldr	r0, [r0, #0]
	if (__p)
   18d58:	b108      	cbz	r0, 18d5e <_ZNSt6vectorIPvSaIS0_EED1Ev+0xc>
   18d5a:	f002 fef1 	bl	1bb40 <_ZdlPv>
      }
   18d5e:	4620      	mov	r0, r4
   18d60:	bd10      	pop	{r4, pc}

00018d62 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   18d62:	b510      	push	{r4, lr}
   18d64:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   18d66:	6800      	ldr	r0, [r0, #0]
	if (__p)
   18d68:	b108      	cbz	r0, 18d6e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev+0xc>
   18d6a:	f002 fee9 	bl	1bb40 <_ZdlPv>
      }
   18d6e:	4620      	mov	r0, r4
   18d70:	bd10      	pop	{r4, pc}

00018d72 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
   18d72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (fin == fout) {
   18d76:	4291      	cmp	r1, r2
{
   18d78:	4604      	mov	r4, r0
   18d7a:	460d      	mov	r5, r1
   18d7c:	4610      	mov	r0, r2
   18d7e:	461f      	mov	r7, r3
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   18d80:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
   18d84:	d117      	bne.n	18db6 <kiss_fft_stride+0x44>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   18d86:	6820      	ldr	r0, [r4, #0]
   18d88:	00c0      	lsls	r0, r0, #3
   18d8a:	f7ff fec5 	bl	18b18 <_Z9ei_mallocj>
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   18d8e:	463b      	mov	r3, r7
   18d90:	4629      	mov	r1, r5
   18d92:	e9cd 8400 	strd	r8, r4, [sp]
   18d96:	2201      	movs	r2, #1
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   18d98:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   18d9a:	f7f8 fb3f 	bl	1141c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
   18d9e:	6822      	ldr	r2, [r4, #0]
   18da0:	4631      	mov	r1, r6
   18da2:	00d2      	lsls	r2, r2, #3
   18da4:	4628      	mov	r0, r5
   18da6:	f002 ff9b 	bl	1bce0 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
   18daa:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
   18dac:	b002      	add	sp, #8
   18dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
   18db2:	f7ff beb5 	b.w	18b20 <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
   18db6:	e9cd 8400 	strd	r8, r4, [sp]
   18dba:	2201      	movs	r2, #1
   18dbc:	f7f8 fb2e 	bl	1141c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
   18dc0:	b002      	add	sp, #8
   18dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018dc6 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
   18dc6:	2301      	movs	r3, #1
   18dc8:	f7ff bfd3 	b.w	18d72 <kiss_fft_stride>

00018dcc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   18dcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   18dce:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   18dd0:	b90b      	cbnz	r3, 18dd6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   18dd2:	f002 ff7e 	bl	1bcd2 <abort>
}
   18dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   18dda:	2138      	movs	r1, #56	; 0x38
   18ddc:	4718      	bx	r3

00018dde <_ZN6tflite12RuntimeShapeD1Ev>:
    if (size_ > kMaxSmallSize) {
   18dde:	6803      	ldr	r3, [r0, #0]
   18de0:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   18de2:	b510      	push	{r4, lr}
   18de4:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   18de6:	dd03      	ble.n	18df0 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   18de8:	6840      	ldr	r0, [r0, #4]
      delete[] dims_pointer_;
   18dea:	b108      	cbz	r0, 18df0 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   18dec:	f002 feaa 	bl	1bb44 <_ZdaPv>
  }
   18df0:	4620      	mov	r0, r4
   18df2:	bd10      	pop	{r4, pc}

00018df4 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   18df4:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
   18df6:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   18df8:	da01      	bge.n	18dfe <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   18dfa:	f002 ff6a 	bl	1bcd2 <abort>
    TFLITE_DCHECK_LT(i, size_);
   18dfe:	6803      	ldr	r3, [r0, #0]
   18e00:	428b      	cmp	r3, r1
   18e02:	ddfa      	ble.n	18dfa <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18e04:	2b05      	cmp	r3, #5
   18e06:	bfcb      	itete	gt
   18e08:	6843      	ldrgt	r3, [r0, #4]
   18e0a:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   18e0e:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   18e12:	6840      	ldrle	r0, [r0, #4]
  }
   18e14:	bd08      	pop	{r3, pc}

00018e16 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
   18e16:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   18e18:	6801      	ldr	r1, [r0, #0]
   18e1a:	2905      	cmp	r1, #5
   18e1c:	bfcc      	ite	gt
   18e1e:	6843      	ldrgt	r3, [r0, #4]
   18e20:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
   18e22:	2200      	movs	r2, #0
    int buffer_size = 1;
   18e24:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   18e26:	428a      	cmp	r2, r1
   18e28:	da04      	bge.n	18e34 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   18e2a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   18e2e:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   18e30:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   18e32:	e7f8      	b.n	18e26 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
   18e34:	bd10      	pop	{r4, pc}

00018e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   18e36:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18e38:	6805      	ldr	r5, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   18e3a:	9c04      	ldr	r4, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18e3c:	2d04      	cmp	r5, #4
   18e3e:	d001      	beq.n	18e44 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   18e40:	f002 ff47 	bl	1bcd2 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18e44:	2900      	cmp	r1, #0
   18e46:	dbfb      	blt.n	18e40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   18e48:	6845      	ldr	r5, [r0, #4]
   18e4a:	428d      	cmp	r5, r1
   18e4c:	ddf8      	ble.n	18e40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18e4e:	2a00      	cmp	r2, #0
   18e50:	dbf6      	blt.n	18e40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   18e52:	6886      	ldr	r6, [r0, #8]
   18e54:	4296      	cmp	r6, r2
   18e56:	ddf3      	ble.n	18e40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18e58:	2b00      	cmp	r3, #0
   18e5a:	dbf1      	blt.n	18e40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   18e5c:	68c5      	ldr	r5, [r0, #12]
   18e5e:	429d      	cmp	r5, r3
   18e60:	ddee      	ble.n	18e40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   18e62:	2c00      	cmp	r4, #0
   18e64:	dbec      	blt.n	18e40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   18e66:	6900      	ldr	r0, [r0, #16]
   18e68:	42a0      	cmp	r0, r4
   18e6a:	dde9      	ble.n	18e40 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   18e6c:	fb01 2206 	mla	r2, r1, r6, r2
   18e70:	fb05 3302 	mla	r3, r5, r2, r3
}
   18e74:	fb00 4003 	mla	r0, r0, r3, r4
   18e78:	bd70      	pop	{r4, r5, r6, pc}

00018e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
   18e7a:	b570      	push	{r4, r5, r6, lr}
   18e7c:	4615      	mov	r5, r2
   18e7e:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   18e80:	f7ff ffb8 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
   18e84:	4631      	mov	r1, r6
   18e86:	4604      	mov	r4, r0
   18e88:	4628      	mov	r0, r5
   18e8a:	f7ff ffb3 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
   18e8e:	4284      	cmp	r4, r0
   18e90:	d001      	beq.n	18e96 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   18e92:	f002 ff1e 	bl	1bcd2 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
   18e96:	bd70      	pop	{r4, r5, r6, pc}

00018e98 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   18e98:	b570      	push	{r4, r5, r6, lr}
   18e9a:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   18e9c:	b911      	cbnz	r1, 18ea4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   18e9e:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   18ea0:	4620      	mov	r0, r4
   18ea2:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   18ea4:	688d      	ldr	r5, [r1, #8]
   18ea6:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
   18eaa:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   18eac:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
   18eae:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   18eb2:	dc05      	bgt.n	18ec0 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   18eb4:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   18eb6:	4632      	mov	r2, r6
   18eb8:	4629      	mov	r1, r5
   18eba:	f002 ff11 	bl	1bce0 <memcpy>
  }
   18ebe:	e7ef      	b.n	18ea0 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32_t[dimensions_count];
   18ec0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   18ec4:	4293      	cmp	r3, r2
   18ec6:	bfb4      	ite	lt
   18ec8:	4630      	movlt	r0, r6
   18eca:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   18ece:	f002 fe4c 	bl	1bb6a <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   18ed2:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   18ed4:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   18ed6:	2b05      	cmp	r3, #5
   18ed8:	dced      	bgt.n	18eb6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   18eda:	e7eb      	b.n	18eb4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

00018edc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
                                             int index) {
   18edc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   18ede:	b908      	cbnz	r0, 18ee4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   18ee0:	f002 fef7 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node != nullptr);
   18ee4:	2900      	cmp	r1, #0
   18ee6:	d0fb      	beq.n	18ee0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   18ee8:	6809      	ldr	r1, [r1, #0]
   18eea:	6d43      	ldr	r3, [r0, #84]	; 0x54
   18eec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
   18ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
   18ef4:	6851      	ldr	r1, [r2, #4]
   18ef6:	4718      	bx	r3

00018ef8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  if (stride == 0) return 0;
   18ef8:	b123      	cbz	r3, 18f04 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  switch (padding) {
   18efa:	2801      	cmp	r0, #1
   18efc:	d004      	beq.n	18f08 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>
   18efe:	2802      	cmp	r0, #2
   18f00:	d007      	beq.n	18f12 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>
   18f02:	2300      	movs	r3, #0
}
   18f04:	4618      	mov	r0, r3
   18f06:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   18f08:	4419      	add	r1, r3
   18f0a:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
   18f0c:	fb91 f3f3 	sdiv	r3, r1, r3
   18f10:	e7f8      	b.n	18f04 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   18f12:	9800      	ldr	r0, [sp, #0]
   18f14:	3a01      	subs	r2, #1
   18f16:	4342      	muls	r2, r0
      return (image_size + stride - effective_filter_size) / stride;
   18f18:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   18f1a:	3201      	adds	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
   18f1c:	1a89      	subs	r1, r1, r2
   18f1e:	e7f5      	b.n	18f0c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x14>

00018f20 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
  op_params.input_offset = -data.input_zero_point;
   18f20:	6913      	ldr	r3, [r2, #16]
   18f22:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   18f24:	b570      	push	{r4, r5, r6, lr}
  op_params.input_offset = -data.input_zero_point;
   18f26:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   18f28:	6953      	ldr	r3, [r2, #20]
   18f2a:	425b      	negs	r3, r3
   18f2c:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   18f2e:	6993      	ldr	r3, [r2, #24]
   18f30:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   18f32:	69d3      	ldr	r3, [r2, #28]
   18f34:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   18f36:	6a13      	ldr	r3, [r2, #32]
                               const OpDataConv& data) {
   18f38:	4615      	mov	r5, r2
  op_params.output_shift = -data.output_shift;
   18f3a:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   18f3c:	4604      	mov	r4, r0
  op_params.output_shift = -data.output_shift;
   18f3e:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   18f40:	7808      	ldrb	r0, [r1, #0]
                               const OpDataConv& data) {
   18f42:	460e      	mov	r6, r1
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   18f44:	f000 f8b0 	bl	190a8 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
   18f48:	686b      	ldr	r3, [r5, #4]
   18f4a:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   18f4c:	682b      	ldr	r3, [r5, #0]
   18f4e:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   18f50:	68b3      	ldr	r3, [r6, #8]
   18f52:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   18f54:	6873      	ldr	r3, [r6, #4]
   18f56:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   18f58:	6973      	ldr	r3, [r6, #20]
   18f5a:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   18f5c:	6933      	ldr	r3, [r6, #16]
   18f5e:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   18f60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   18f62:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   18f64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   18f66:	7020      	strb	r0, [r4, #0]
  op_params.quantized_activation_max = data.output_activation_max;
   18f68:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   18f6a:	4620      	mov	r0, r4
   18f6c:	bd70      	pop	{r4, r5, r6, pc}

00018f6e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   18f6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   18f70:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   18f72:	b90b      	cbnz	r3, 18f78 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   18f74:	f002 fead 	bl	1bcd2 <abort>
}
   18f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   18f7c:	2124      	movs	r1, #36	; 0x24
   18f7e:	4718      	bx	r3

00018f80 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   18f80:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   18f82:	b538      	push	{r3, r4, r5, lr}
  inline int32_t DimensionsCount() const { return size_; }
   18f84:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   18f86:	db01      	blt.n	18f8c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   18f88:	42a1      	cmp	r1, r4
   18f8a:	db01      	blt.n	18f90 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   18f8c:	f002 fea1 	bl	1bcd2 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   18f90:	2c05      	cmp	r4, #5
   18f92:	bfcc      	ite	gt
   18f94:	6843      	ldrgt	r3, [r0, #4]
   18f96:	1d03      	addle	r3, r0, #4
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
   18f98:	2200      	movs	r2, #0
  int flat_size = 1;
   18f9a:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   18f9c:	4291      	cmp	r1, r2
   18f9e:	bf18      	it	ne
   18fa0:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   18fa4:	f102 0201 	add.w	r2, r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   18fa8:	bf08      	it	eq
   18faa:	2501      	moveq	r5, #1
  for (int i = 0; i < dims_count; ++i) {
   18fac:	4294      	cmp	r4, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   18fae:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   18fb2:	dcf3      	bgt.n	18f9c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
  }
  return flat_size;
}
   18fb4:	bd38      	pop	{r3, r4, r5, pc}

00018fb6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
                                       const TfLiteNode* node, int index) {
   18fb6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   18fb8:	b908      	cbnz	r0, 18fbe <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   18fba:	f002 fe8a 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node != nullptr);
   18fbe:	2900      	cmp	r1, #0
   18fc0:	d0fb      	beq.n	18fba <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   18fc2:	6849      	ldr	r1, [r1, #4]
   18fc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   18fc6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
   18fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
   18fce:	6851      	ldr	r1, [r2, #4]
   18fd0:	4718      	bx	r3

00018fd2 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
  op_params.input_offset = -op_data.input_zero_point;
   18fd2:	694a      	ldr	r2, [r1, #20]
   18fd4:	4252      	negs	r2, r2
   18fd6:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   18fd8:	698a      	ldr	r2, [r1, #24]
   18fda:	4252      	negs	r2, r2
   18fdc:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   18fde:	69ca      	ldr	r2, [r1, #28]
   18fe0:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   18fe2:	680a      	ldr	r2, [r1, #0]
   18fe4:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   18fe6:	684a      	ldr	r2, [r1, #4]
   18fe8:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   18fea:	688a      	ldr	r2, [r1, #8]
   18fec:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   18fee:	68ca      	ldr	r2, [r1, #12]
   18ff0:	6182      	str	r2, [r0, #24]
}
   18ff2:	4770      	bx	lr

00018ff4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   18ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18ff8:	b085      	sub	sp, #20
  if (data_type != kTfLiteFloat32) {
   18ffa:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
   18ffc:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
   19000:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   19004:	4606      	mov	r6, r0
   19006:	460f      	mov	r7, r1
   19008:	461d      	mov	r5, r3
  if (data_type != kTfLiteFloat32) {
   1900a:	d027      	beq.n	1905c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
   1900c:	2200      	movs	r2, #0
   1900e:	2300      	movs	r3, #0
   19010:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   19014:	ab02      	add	r3, sp, #8
   19016:	e9cd 8300 	strd	r8, r3, [sp]
   1901a:	464a      	mov	r2, r9
   1901c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1901e:	4629      	mov	r1, r5
   19020:	f7e9 ff56 	bl	2ed0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   19024:	b9b8      	cbnz	r0, 19056 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   19026:	1d21      	adds	r1, r4, #4
   19028:	4620      	mov	r0, r4
   1902a:	ed9d 0b02 	vldr	d0, [sp, #8]
   1902e:	f7fb feed 	bl	14e0c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
   19032:	692b      	ldr	r3, [r5, #16]
   19034:	6163      	str	r3, [r4, #20]
    data->filter_zero_point = filter->params.zero_point;
   19036:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1903a:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
   1903c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   19040:	61e3      	str	r3, [r4, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
   19042:	f104 030c 	add.w	r3, r4, #12
   19046:	9300      	str	r3, [sp, #0]
   19048:	4642      	mov	r2, r8
   1904a:	f104 0308 	add.w	r3, r4, #8
   1904e:	4639      	mov	r1, r7
   19050:	4630      	mov	r0, r6
   19052:	f7fb ff6b 	bl	14f2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
   19056:	b005      	add	sp, #20
   19058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
   1905c:	2000      	movs	r0, #0
   1905e:	e7fa      	b.n	19056 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

00019060 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   19060:	b570      	push	{r4, r5, r6, lr}
   19062:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   19064:	b109      	cbz	r1, 1906a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
   19066:	684d      	ldr	r5, [r1, #4]
   19068:	b91d      	cbnz	r5, 19072 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
   1906a:	2300      	movs	r3, #0
   1906c:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   1906e:	4620      	mov	r0, r4
   19070:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   19072:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
   19076:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   19078:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
   1907a:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   1907e:	dc05      	bgt.n	1908c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   19080:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   19082:	4632      	mov	r2, r6
   19084:	4629      	mov	r1, r5
   19086:	f002 fe2b 	bl	1bce0 <memcpy>
  }
   1908a:	e7f0      	b.n	1906e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
   1908c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   19090:	4293      	cmp	r3, r2
   19092:	bfb4      	ite	lt
   19094:	4630      	movlt	r0, r6
   19096:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   1909a:	f002 fd66 	bl	1bb6a <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1909e:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   190a0:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   190a2:	2b05      	cmp	r3, #5
   190a4:	dced      	bgt.n	19082 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
   190a6:	e7eb      	b.n	19080 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

000190a8 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   190a8:	2801      	cmp	r0, #1
   190aa:	d002      	beq.n	190b2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   190ac:	2802      	cmp	r0, #2
   190ae:	bf18      	it	ne
   190b0:	2000      	movne	r0, #0
  }
}
   190b2:	4770      	bx	lr

000190b4 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   190b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   190b6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   190b8:	b90b      	cbnz	r3, 190be <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0xa>
   190ba:	f002 fe0a 	bl	1bcd2 <abort>
}
   190be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   190c2:	2124      	movs	r1, #36	; 0x24
   190c4:	4718      	bx	r3

000190c6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8_t* input_data,
                        const RuntimeShape& output_shape,
                        uint8_t* output_data) {
   190c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190ca:	b097      	sub	sp, #92	; 0x5c
   190cc:	4698      	mov	r8, r3
   190ce:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   190d0:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   190d4:	429a      	cmp	r2, r3
                        uint8_t* output_data) {
   190d6:	4604      	mov	r4, r0
   190d8:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   190da:	dd01      	ble.n	190e0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   190dc:	f002 fdf9 	bl	1bcd2 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   190e0:	680b      	ldr	r3, [r1, #0]
   190e2:	2b04      	cmp	r3, #4
   190e4:	d1fa      	bne.n	190dc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   190e6:	f8d8 3000 	ldr.w	r3, [r8]
   190ea:	2b04      	cmp	r3, #4
   190ec:	d1f6      	bne.n	190dc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   190ee:	2300      	movs	r3, #0
   190f0:	4619      	mov	r1, r3
   190f2:	4642      	mov	r2, r8
   190f4:	4638      	mov	r0, r7
   190f6:	f7ff fec0 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   190fa:	2303      	movs	r3, #3
   190fc:	4619      	mov	r1, r3
   190fe:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19100:	900b      	str	r0, [sp, #44]	; 0x2c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   19102:	4638      	mov	r0, r7
   19104:	f7ff feb9 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   19108:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1910a:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_height = input_shape.Dims(1);
   1910c:	4638      	mov	r0, r7
   1910e:	f7ff fe71 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19112:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19114:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_width = input_shape.Dims(2);
   19116:	4638      	mov	r0, r7
   19118:	f7ff fe6c 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1911c:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1911e:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
   19120:	4640      	mov	r0, r8
   19122:	f7ff fe67 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   19126:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   19128:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
   1912a:	4640      	mov	r0, r8
   1912c:	f7ff fe62 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   19130:	68e3      	ldr	r3, [r4, #12]
   19132:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
   19134:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   19136:	9010      	str	r0, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   19138:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
   1913a:	2100      	movs	r1, #0
   1913c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1913e:	4299      	cmp	r1, r3
   19140:	f280 8090 	bge.w	19264 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19e>
   19144:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19148:	f8cd b010 	str.w	fp, [sp, #16]
   1914c:	9b04      	ldr	r3, [sp, #16]
   1914e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19150:	4293      	cmp	r3, r2
   19152:	f280 8085 	bge.w	19260 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   19156:	2300      	movs	r3, #0
   19158:	9303      	str	r3, [sp, #12]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1915a:	9305      	str	r3, [sp, #20]
   1915c:	9b05      	ldr	r3, [sp, #20]
   1915e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19160:	4293      	cmp	r3, r2
   19162:	da77      	bge.n	19254 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x18e>
        for (int channel = 0; channel < depth; ++channel) {
   19164:	2300      	movs	r3, #0
   19166:	9302      	str	r3, [sp, #8]
   19168:	9b02      	ldr	r3, [sp, #8]
   1916a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1916c:	4293      	cmp	r3, r2
   1916e:	da69      	bge.n	19244 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   19170:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
          const int in_x_origin =
   19174:	9b03      	ldr	r3, [sp, #12]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   19176:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
          const int in_x_origin =
   1917a:	eba3 0309 	sub.w	r3, r3, r9
   1917e:	9308      	str	r3, [sp, #32]
          const int in_y_origin =
   19180:	ebab 0306 	sub.w	r3, fp, r6
   19184:	9309      	str	r3, [sp, #36]	; 0x24
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   19186:	9b03      	ldr	r3, [sp, #12]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   19188:	9a08      	ldr	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   1918a:	eba9 0903 	sub.w	r9, r9, r3
              std::min(params.filter_width, input_width - in_x_origin);
   1918e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19190:	1a9a      	subs	r2, r3, r2
   19192:	69a3      	ldr	r3, [r4, #24]
   19194:	429a      	cmp	r2, r3
   19196:	bfa8      	it	ge
   19198:	461a      	movge	r2, r3
   1919a:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1919c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1919e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   191a0:	1a9a      	subs	r2, r3, r2
   191a2:	6963      	ldr	r3, [r4, #20]
   191a4:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   191a6:	eba6 060b 	sub.w	r6, r6, fp
   191aa:	bfa8      	it	ge
   191ac:	461a      	movge	r2, r3
          int32_t acc = 0;
   191ae:	2500      	movs	r5, #0
   191b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
          const int filter_y_start = std::max(0, -in_y_origin);
   191b4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    min(const _Tp& __a, const _Tp& __b)
   191b8:	920a      	str	r2, [sp, #40]	; 0x28
          int filter_count = 0;
   191ba:	46aa      	mov	sl, r5
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   191bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   191be:	429e      	cmp	r6, r3
   191c0:	da24      	bge.n	1920c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x146>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   191c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   191c4:	f8cd 9018 	str.w	r9, [sp, #24]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   191c8:	18f2      	adds	r2, r6, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   191ca:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   191ce:	4283      	cmp	r3, r0
   191d0:	da12      	bge.n	191f8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x132>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   191d2:	9b02      	ldr	r3, [sp, #8]
   191d4:	9806      	ldr	r0, [sp, #24]
   191d6:	9300      	str	r3, [sp, #0]
   191d8:	9b08      	ldr	r3, [sp, #32]
   191da:	4403      	add	r3, r0
   191dc:	4638      	mov	r0, r7
   191de:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   191e2:	f7ff fe28 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   191e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   191e8:	5c1b      	ldrb	r3, [r3, r0]
   191ea:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   191ec:	9b06      	ldr	r3, [sp, #24]
   191ee:	3301      	adds	r3, #1
   191f0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   191f4:	9306      	str	r3, [sp, #24]
   191f6:	e7e8      	b.n	191ca <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
   191f8:	9b07      	ldr	r3, [sp, #28]
   191fa:	9a07      	ldr	r2, [sp, #28]
   191fc:	eba3 0309 	sub.w	r3, r3, r9
   19200:	454a      	cmp	r2, r9
   19202:	bfb8      	it	lt
   19204:	2300      	movlt	r3, #0
   19206:	449a      	add	sl, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   19208:	3601      	adds	r6, #1
   1920a:	e7d7      	b.n	191bc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf6>
              filter_count++;
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
   1920c:	eb05 056a 	add.w	r5, r5, sl, asr #1
   19210:	fbb5 fafa 	udiv	sl, r5, sl
   19214:	69e5      	ldr	r5, [r4, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   19216:	9b02      	ldr	r3, [sp, #8]
   19218:	9300      	str	r3, [sp, #0]
   1921a:	45aa      	cmp	sl, r5
   1921c:	bfb8      	it	lt
   1921e:	46aa      	movlt	sl, r5
   19220:	6a25      	ldr	r5, [r4, #32]
   19222:	9106      	str	r1, [sp, #24]
   19224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19228:	45aa      	cmp	sl, r5
   1922a:	4640      	mov	r0, r8
   1922c:	bfa8      	it	ge
   1922e:	46aa      	movge	sl, r5
   19230:	f7ff fe01 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   19234:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   19236:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   19238:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1923c:	9b02      	ldr	r3, [sp, #8]
   1923e:	3301      	adds	r3, #1
   19240:	9302      	str	r3, [sp, #8]
   19242:	e791      	b.n	19168 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   19244:	9b05      	ldr	r3, [sp, #20]
   19246:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19248:	3301      	adds	r3, #1
   1924a:	9305      	str	r3, [sp, #20]
   1924c:	9b03      	ldr	r3, [sp, #12]
   1924e:	4413      	add	r3, r2
   19250:	9303      	str	r3, [sp, #12]
   19252:	e783      	b.n	1915c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x96>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19254:	9b04      	ldr	r3, [sp, #16]
   19256:	3301      	adds	r3, #1
   19258:	9304      	str	r3, [sp, #16]
   1925a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1925c:	449b      	add	fp, r3
   1925e:	e775      	b.n	1914c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   19260:	3101      	adds	r1, #1
   19262:	e76b      	b.n	1913c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
              static_cast<uint8_t>(acc);
        }
      }
    }
  }
}
   19264:	b017      	add	sp, #92	; 0x5c
   19266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001926a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   1926a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1926e:	ed2d 8b04 	vpush	{d8-d9}
   19272:	461f      	mov	r7, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19274:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   19276:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19278:	2b04      	cmp	r3, #4
                    float* output_data) {
   1927a:	4604      	mov	r4, r0
   1927c:	460e      	mov	r6, r1
   1927e:	9211      	str	r2, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19280:	d001      	beq.n	19286 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   19282:	f002 fd26 	bl	1bcd2 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   19286:	683b      	ldr	r3, [r7, #0]
   19288:	2b04      	cmp	r3, #4
   1928a:	d1fa      	bne.n	19282 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1928c:	2300      	movs	r3, #0
   1928e:	4619      	mov	r1, r3
   19290:	463a      	mov	r2, r7
   19292:	4630      	mov	r0, r6
   19294:	f7ff fdf1 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   19298:	2303      	movs	r3, #3
   1929a:	4619      	mov	r1, r3
   1929c:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1929e:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   192a0:	4630      	mov	r0, r6
   192a2:	f7ff fdea 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   192a6:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   192a8:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   192aa:	4630      	mov	r0, r6
   192ac:	f7ff fda2 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   192b0:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   192b2:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   192b4:	4630      	mov	r0, r6
   192b6:	f7ff fd9d 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   192ba:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   192bc:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
   192be:	4638      	mov	r0, r7
   192c0:	f7ff fd98 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   192c4:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   192c6:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   192c8:	4638      	mov	r0, r7
   192ca:	f7ff fd93 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   192ce:	68e3      	ldr	r3, [r4, #12]
   192d0:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   192d2:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   192d4:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   192d6:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   192d8:	2100      	movs	r1, #0
   192da:	9b08      	ldr	r3, [sp, #32]
   192dc:	4299      	cmp	r1, r3
   192de:	f280 8099 	bge.w	19414 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1aa>
   192e2:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   192e6:	46da      	mov	sl, fp
   192e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   192ea:	459a      	cmp	sl, r3
   192ec:	f280 8090 	bge.w	19410 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a6>
   192f0:	f04f 0900 	mov.w	r9, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   192f4:	f8cd 900c 	str.w	r9, [sp, #12]
   192f8:	9b03      	ldr	r3, [sp, #12]
   192fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   192fc:	4293      	cmp	r3, r2
   192fe:	f280 8082 	bge.w	19406 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
        for (int channel = 0; channel < depth; ++channel) {
   19302:	2300      	movs	r3, #0
   19304:	9302      	str	r3, [sp, #8]
   19306:	9b02      	ldr	r3, [sp, #8]
   19308:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1930a:	4293      	cmp	r3, r2
   1930c:	da75      	bge.n	193fa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x190>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   1930e:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   19312:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          const int in_x_origin =
   19316:	eba9 0308 	sub.w	r3, r9, r8
   1931a:	9305      	str	r3, [sp, #20]
          const int in_y_origin =
   1931c:	ebab 0305 	sub.w	r3, fp, r5
   19320:	9306      	str	r3, [sp, #24]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   19322:	eba8 0309 	sub.w	r3, r8, r9
   19326:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1932a:	9a05      	ldr	r2, [sp, #20]
   1932c:	9304      	str	r3, [sp, #16]
   1932e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19330:	1a9a      	subs	r2, r3, r2
   19332:	69a3      	ldr	r3, [r4, #24]
   19334:	429a      	cmp	r2, r3
   19336:	bfa8      	it	ge
   19338:	461a      	movge	r2, r3
   1933a:	920b      	str	r2, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1933e:	9a06      	ldr	r2, [sp, #24]
   19340:	1a9a      	subs	r2, r3, r2
   19342:	6963      	ldr	r3, [r4, #20]
   19344:	429a      	cmp	r2, r3
   19346:	bfa8      	it	ge
   19348:	461a      	movge	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   1934a:	eba5 050b 	sub.w	r5, r5, fp
          float max = std::numeric_limits<float>::lowest();
   1934e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   19352:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   19356:	9207      	str	r2, [sp, #28]
   19358:	9315      	str	r3, [sp, #84]	; 0x54
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1935a:	9b07      	ldr	r3, [sp, #28]
   1935c:	429d      	cmp	r5, r3
   1935e:	da26      	bge.n	193ae <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x144>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   19360:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   19362:	f8dd 8010 	ldr.w	r8, [sp, #16]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   19366:	18ea      	adds	r2, r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   19368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      if (__a < __b)
   1936a:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   1936e:	4598      	cmp	r8, r3
   19370:	da1b      	bge.n	193aa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   19372:	9b02      	ldr	r3, [sp, #8]
   19374:	9300      	str	r3, [sp, #0]
   19376:	9b05      	ldr	r3, [sp, #20]
   19378:	4630      	mov	r0, r6
   1937a:	4443      	add	r3, r8
   1937c:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
   19380:	f7ff fd59 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   19384:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1938a:	edd0 7a00 	vldr	s15, [r0]
   1938e:	eef4 7ac8 	vcmpe.f32	s15, s16
      return __a;
   19392:	ab15      	add	r3, sp, #84	; 0x54
      if (__a < __b)
   19394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   19398:	bfd8      	it	le
   1939a:	4618      	movle	r0, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1939c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
              max = std::max(
   193a0:	6803      	ldr	r3, [r0, #0]
   193a2:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   193a4:	f108 0801 	add.w	r8, r8, #1
   193a8:	e7de      	b.n	19368 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfe>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   193aa:	3501      	adds	r5, #1
   193ac:	e7d5      	b.n	1935a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf0>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   193ae:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   193b2:	9b02      	ldr	r3, [sp, #8]
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   193b4:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   193b8:	9300      	str	r3, [sp, #0]
   193ba:	4652      	mov	r2, sl
   193bc:	9b03      	ldr	r3, [sp, #12]
   193be:	9104      	str	r1, [sp, #16]
   193c0:	4638      	mov	r0, r7
   193c2:	f7ff fd38 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   193c6:	eeb4 9ac8 	vcmpe.f32	s18, s16
                                           params.float_activation_max);
   193ca:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   193ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
        for (int channel = 0; channel < depth; ++channel) {
   193d0:	9904      	ldr	r1, [sp, #16]
   193d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   193d6:	bf58      	it	pl
   193d8:	eeb0 8a49 	vmovpl.f32	s16, s18
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   193dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	return __b;
   193e0:	eef4 8a48 	vcmp.f32	s17, s16
        for (int channel = 0; channel < depth; ++channel) {
   193e4:	9b02      	ldr	r3, [sp, #8]
   193e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   193ea:	bf48      	it	mi
   193ec:	eeb0 8a68 	vmovmi.f32	s16, s17
   193f0:	3301      	adds	r3, #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   193f2:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   193f6:	9302      	str	r3, [sp, #8]
   193f8:	e785      	b.n	19306 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   193fa:	9b03      	ldr	r3, [sp, #12]
   193fc:	3301      	adds	r3, #1
   193fe:	9303      	str	r3, [sp, #12]
   19400:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19402:	4499      	add	r9, r3
   19404:	e778      	b.n	192f8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19408:	f10a 0a01 	add.w	sl, sl, #1
   1940c:	449b      	add	fp, r3
   1940e:	e76b      	b.n	192e8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
  for (int batch = 0; batch < batches; ++batch) {
   19410:	3101      	adds	r1, #1
   19412:	e762      	b.n	192da <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x70>
        }
      }
    }
  }
}
   19414:	b017      	add	sp, #92	; 0x5c
   19416:	ecbd 8b04 	vpop	{d8-d9}
   1941a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001941e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
   1941e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19422:	b099      	sub	sp, #100	; 0x64
   19424:	461f      	mov	r7, r3
   19426:	920a      	str	r2, [sp, #40]	; 0x28
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   19428:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1942c:	429a      	cmp	r2, r3
                    uint8_t* output_data) {
   1942e:	4604      	mov	r4, r0
   19430:	460e      	mov	r6, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   19432:	dd01      	ble.n	19438 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   19434:	f002 fc4d 	bl	1bcd2 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   19438:	2a00      	cmp	r2, #0
   1943a:	dbfb      	blt.n	19434 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   1943c:	2bff      	cmp	r3, #255	; 0xff
   1943e:	dcf9      	bgt.n	19434 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19440:	680b      	ldr	r3, [r1, #0]
   19442:	2b04      	cmp	r3, #4
   19444:	d1f6      	bne.n	19434 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   19446:	683b      	ldr	r3, [r7, #0]
   19448:	2b04      	cmp	r3, #4
   1944a:	d1f3      	bne.n	19434 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1944c:	2300      	movs	r3, #0
   1944e:	4619      	mov	r1, r3
   19450:	463a      	mov	r2, r7
   19452:	4630      	mov	r0, r6
   19454:	f7ff fd11 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   19458:	2303      	movs	r3, #3
   1945a:	4619      	mov	r1, r3
   1945c:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1945e:	900c      	str	r0, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   19460:	4630      	mov	r0, r6
   19462:	f7ff fd0a 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   19466:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   19468:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_height = input_shape.Dims(1);
   1946a:	4630      	mov	r0, r6
   1946c:	f7ff fcc2 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19470:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19472:	900e      	str	r0, [sp, #56]	; 0x38
  const int input_width = input_shape.Dims(2);
   19474:	4630      	mov	r0, r6
   19476:	f7ff fcbd 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1947a:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1947c:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
   1947e:	4638      	mov	r0, r7
   19480:	f7ff fcb8 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   19484:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   19486:	9011      	str	r0, [sp, #68]	; 0x44
  const int output_width = output_shape.Dims(2);
   19488:	4638      	mov	r0, r7
   1948a:	f7ff fcb3 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1948e:	68e3      	ldr	r3, [r4, #12]
   19490:	9313      	str	r3, [sp, #76]	; 0x4c
  const int stride_width = params.stride_width;
   19492:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   19494:	9012      	str	r0, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   19496:	9314      	str	r3, [sp, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
   19498:	f04f 0b00 	mov.w	fp, #0
   1949c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1949e:	459b      	cmp	fp, r3
   194a0:	f280 808d 	bge.w	195be <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a0>
   194a4:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   194a8:	46d1      	mov	r9, sl
   194aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   194ac:	4599      	cmp	r9, r3
   194ae:	f280 8083 	bge.w	195b8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   194b2:	f04f 0800 	mov.w	r8, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   194b6:	f8cd 8010 	str.w	r8, [sp, #16]
   194ba:	9b04      	ldr	r3, [sp, #16]
   194bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   194be:	4293      	cmp	r3, r2
   194c0:	da75      	bge.n	195ae <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
        for (int channel = 0; channel < depth; ++channel) {
   194c2:	2300      	movs	r3, #0
   194c4:	9303      	str	r3, [sp, #12]
   194c6:	9b03      	ldr	r3, [sp, #12]
   194c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   194ca:	4293      	cmp	r3, r2
   194cc:	da69      	bge.n	195a2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x184>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   194ce:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   194d2:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          const int in_x_origin =
   194d6:	eba8 0203 	sub.w	r2, r8, r3
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   194da:	eba3 0308 	sub.w	r3, r3, r8
          const int in_x_origin =
   194de:	9207      	str	r2, [sp, #28]
          const int in_y_origin =
   194e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   194e4:	ebaa 0205 	sub.w	r2, sl, r5
   194e8:	9208      	str	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   194ea:	9306      	str	r3, [sp, #24]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   194ec:	9a07      	ldr	r2, [sp, #28]
   194ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   194f0:	1a9a      	subs	r2, r3, r2
   194f2:	69a3      	ldr	r3, [r4, #24]
   194f4:	429a      	cmp	r2, r3
   194f6:	bfa8      	it	ge
   194f8:	461a      	movge	r2, r3
   194fa:	920b      	str	r2, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   194fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   194fe:	9a08      	ldr	r2, [sp, #32]
   19500:	1a9a      	subs	r2, r3, r2
   19502:	6963      	ldr	r3, [r4, #20]
   19504:	429a      	cmp	r2, r3
   19506:	bfa8      	it	ge
   19508:	461a      	movge	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   1950a:	eba5 050a 	sub.w	r5, r5, sl
          uint8_t max = 0;
   1950e:	2300      	movs	r3, #0
   19510:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    min(const _Tp& __a, const _Tp& __b)
   19514:	9210      	str	r2, [sp, #64]	; 0x40
   19516:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1951a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1951c:	429d      	cmp	r5, r3
   1951e:	da28      	bge.n	19572 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x154>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   19520:	9b06      	ldr	r3, [sp, #24]
   19522:	9305      	str	r3, [sp, #20]
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   19524:	9b08      	ldr	r3, [sp, #32]
   19526:	18ea      	adds	r2, r5, r3
      if (__a < __b)
   19528:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1952c:	9905      	ldr	r1, [sp, #20]
   1952e:	9309      	str	r3, [sp, #36]	; 0x24
   19530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19532:	428b      	cmp	r3, r1
   19534:	dd1b      	ble.n	1956e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x150>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   19536:	9b03      	ldr	r3, [sp, #12]
   19538:	9300      	str	r3, [sp, #0]
   1953a:	460b      	mov	r3, r1
   1953c:	9907      	ldr	r1, [sp, #28]
   1953e:	9215      	str	r2, [sp, #84]	; 0x54
   19540:	440b      	add	r3, r1
   19542:	4630      	mov	r0, r6
   19544:	4659      	mov	r1, fp
   19546:	f7ff fc76 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1954a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1954c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1954e:	4403      	add	r3, r0
   19550:	5c10      	ldrb	r0, [r2, r0]
   19552:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19554:	4290      	cmp	r0, r2
      return __a;
   19556:	f10d 025f 	add.w	r2, sp, #95	; 0x5f
   1955a:	bf98      	it	ls
   1955c:	4613      	movls	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1955e:	9a15      	ldr	r2, [sp, #84]	; 0x54
              max = std::max(
   19560:	781b      	ldrb	r3, [r3, #0]
   19562:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   19566:	9b05      	ldr	r3, [sp, #20]
   19568:	3301      	adds	r3, #1
   1956a:	9305      	str	r3, [sp, #20]
   1956c:	e7dc      	b.n	19528 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x10a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1956e:	3501      	adds	r5, #1
   19570:	e7d3      	b.n	1951a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xfc>
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
          max = std::min<uint8_t>(max, params.quantized_activation_max);
   19572:	7f25      	ldrb	r5, [r4, #28]
   19574:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   19578:	429d      	cmp	r5, r3
   1957a:	bf38      	it	cc
   1957c:	461d      	movcc	r5, r3
   1957e:	f894 3020 	ldrb.w	r3, [r4, #32]
   19582:	429d      	cmp	r5, r3
   19584:	bf28      	it	cs
   19586:	461d      	movcs	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   19588:	9b03      	ldr	r3, [sp, #12]
   1958a:	9300      	str	r3, [sp, #0]
   1958c:	464a      	mov	r2, r9
   1958e:	9b04      	ldr	r3, [sp, #16]
   19590:	4659      	mov	r1, fp
   19592:	4638      	mov	r0, r7
   19594:	f7ff fc4f 	bl	18e36 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   19598:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1959a:	541d      	strb	r5, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   1959c:	9b03      	ldr	r3, [sp, #12]
   1959e:	3301      	adds	r3, #1
   195a0:	e790      	b.n	194c4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   195a2:	9b04      	ldr	r3, [sp, #16]
   195a4:	3301      	adds	r3, #1
   195a6:	9304      	str	r3, [sp, #16]
   195a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   195aa:	4498      	add	r8, r3
   195ac:	e785      	b.n	194ba <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   195ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   195b0:	f109 0901 	add.w	r9, r9, #1
   195b4:	449a      	add	sl, r3
   195b6:	e778      	b.n	194aa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8c>
  for (int batch = 0; batch < batches; ++batch) {
   195b8:	f10b 0b01 	add.w	fp, fp, #1
   195bc:	e76e      	b.n	1949c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8_t>(max);
        }
      }
    }
  }
}
   195be:	b019      	add	sp, #100	; 0x64
   195c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000195c4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
                             OpData* data) {
   195c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195c8:	ed2d 8b02 	vpush	{d8}
   195cc:	ee08 3a90 	vmov	s17, r3
  return t->dims->data[dim];
   195d0:	6893      	ldr	r3, [r2, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   195d2:	f8d1 b00c 	ldr.w	fp, [r1, #12]
   195d6:	68df      	ldr	r7, [r3, #12]
   195d8:	f891 a000 	ldrb.w	sl, [r1]
                             OpData* data) {
   195dc:	b087      	sub	sp, #28
      params->stride_height, params->stride_width,
   195de:	e9d1 8901 	ldrd	r8, r9, [r1, #4]
                             OpData* data) {
   195e2:	4616      	mov	r6, r2
   195e4:	689a      	ldr	r2, [r3, #8]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   195e6:	690b      	ldr	r3, [r1, #16]
   195e8:	9303      	str	r3, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   195ea:	2301      	movs	r3, #1
                             OpData* data) {
   195ec:	460d      	mov	r5, r1
   195ee:	9204      	str	r2, [sp, #16]
   195f0:	9300      	str	r3, [sp, #0]
   195f2:	465a      	mov	r2, fp
   195f4:	4643      	mov	r3, r8
   195f6:	4639      	mov	r1, r7
   195f8:	ee08 0a10 	vmov	s16, r0
   195fc:	4650      	mov	r0, sl
   195fe:	f7ff fc7b 	bl	18ef8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   19602:	2301      	movs	r3, #1
   19604:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   19608:	9005      	str	r0, [sp, #20]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   1960a:	9300      	str	r3, [sp, #0]
   1960c:	4650      	mov	r0, sl
   1960e:	464b      	mov	r3, r9
   19610:	f7ff fc72 	bl	18ef8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19614:	9b03      	ldr	r3, [sp, #12]
   19616:	9c12      	ldr	r4, [sp, #72]	; 0x48
   19618:	3801      	subs	r0, #1
   1961a:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
   1961e:	9b04      	ldr	r3, [sp, #16]
    CalculateActivationRange(params->activation, &data->activation_min_f32,
   19620:	7d28      	ldrb	r0, [r5, #20]
   19622:	eba9 0903 	sub.w	r9, r9, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19626:	9b05      	ldr	r3, [sp, #20]
   19628:	3b01      	subs	r3, #1
   1962a:	fb08 b303 	mla	r3, r8, r3, fp
  int total_padding =
   1962e:	1bdb      	subs	r3, r3, r7
  total_padding = total_padding > 0 ? total_padding : 0;
   19630:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
   19634:	105a      	asrs	r2, r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   19636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  *offset = total_padding % 2;
   1963a:	f003 0301 	and.w	r3, r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
   1963e:	60a3      	str	r3, [r4, #8]
   19640:	f009 0301 	and.w	r3, r9, #1
   19644:	60e3      	str	r3, [r4, #12]
  if (input->type == kTfLiteFloat32) {
   19646:	7833      	ldrb	r3, [r6, #0]
      params->filter_width, params->padding, &out_height, &out_width);
   19648:	6022      	str	r2, [r4, #0]
  if (input->type == kTfLiteFloat32) {
   1964a:	2b01      	cmp	r3, #1
  return total_padding / 2;
   1964c:	ea4f 0269 	mov.w	r2, r9, asr #1
      params->filter_width, params->padding, &out_height, &out_width);
   19650:	6062      	str	r2, [r4, #4]
  if (input->type == kTfLiteFloat32) {
   19652:	d10e      	bne.n	19672 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xae>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
   19654:	f104 0220 	add.w	r2, r4, #32
   19658:	f104 011c 	add.w	r1, r4, #28
   1965c:	f7f9 fc74 	bl	12f48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  data->buffer_idx = -1;
   19660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19664:	6123      	str	r3, [r4, #16]
  return kTfLiteOk;
   19666:	2000      	movs	r0, #0
}
   19668:	b007      	add	sp, #28
   1966a:	ecbd 8b02 	vpop	{d8}
   1966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   19672:	f104 0318 	add.w	r3, r4, #24
   19676:	9300      	str	r3, [sp, #0]
   19678:	4601      	mov	r1, r0
   1967a:	ee18 2a90 	vmov	r2, s17
   1967e:	ee18 0a10 	vmov	r0, s16
   19682:	f104 0314 	add.w	r3, r4, #20
   19686:	f7fb fc51 	bl	14f2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   1968a:	2800      	cmp	r0, #0
   1968c:	d1ec      	bne.n	19668 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa4>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
   1968e:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   19692:	429a      	cmp	r2, r3
   19694:	dde4      	ble.n	19660 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x9c>
   19696:	f002 fb1c 	bl	1bcd2 <abort>

0001969a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
   1969a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1969e:	690f      	ldr	r7, [r1, #16]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
   196a0:	b08f      	sub	sp, #60	; 0x3c
   196a2:	4604      	mov	r4, r0
   196a4:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   196a6:	b90f      	cbnz	r7, 196ac <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x12>
   196a8:	f002 fb13 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   196ac:	f8d1 9014 	ldr.w	r9, [r1, #20]
   196b0:	f1b9 0f00 	cmp.w	r9, #0
   196b4:	d0f8      	beq.n	196a8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   196b6:	2200      	movs	r2, #0
   196b8:	f001 fa58 	bl	1ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   196bc:	4629      	mov	r1, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   196be:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   196c0:	2200      	movs	r2, #0
   196c2:	4620      	mov	r0, r4
   196c4:	f001 fa55 	bl	1ab72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
   196c8:	9700      	str	r7, [sp, #0]
   196ca:	4603      	mov	r3, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   196cc:	4680      	mov	r8, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
   196ce:	4632      	mov	r2, r6
   196d0:	4649      	mov	r1, r9
   196d2:	4620      	mov	r0, r4
   196d4:	f7ff ff76 	bl	195c4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
   196d8:	4605      	mov	r5, r0
   196da:	bb70      	cbnz	r0, 1973a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
  if (input->type == kTfLiteInt8) {
   196dc:	7833      	ldrb	r3, [r6, #0]
   196de:	2b09      	cmp	r3, #9
   196e0:	d12b      	bne.n	1973a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    RuntimeShape input_shape = GetTensorShape(input);
   196e2:	4631      	mov	r1, r6
   196e4:	a802      	add	r0, sp, #8
   196e6:	f7ff fbd7 	bl	18e98 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   196ea:	9b02      	ldr	r3, [sp, #8]
   196ec:	2b04      	cmp	r3, #4
   196ee:	d1db      	bne.n	196a8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
    RuntimeShape output_shape = GetTensorShape(output);
   196f0:	4641      	mov	r1, r8
   196f2:	a808      	add	r0, sp, #32
   196f4:	f7ff fbd0 	bl	18e98 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   196f8:	9b08      	ldr	r3, [sp, #32]
   196fa:	2b04      	cmp	r3, #4
   196fc:	d1d4      	bne.n	196a8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   196fe:	2303      	movs	r3, #3
   19700:	4619      	mov	r1, r3
   19702:	aa08      	add	r2, sp, #32
   19704:	a802      	add	r0, sp, #8
   19706:	f7ff fbb8 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_width = output_shape.Dims(2);
   1970a:	2102      	movs	r1, #2
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1970c:	4606      	mov	r6, r0
    const int output_width = output_shape.Dims(2);
   1970e:	a808      	add	r0, sp, #32
   19710:	f7ff fb70 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
        arm_avgpool_s8_get_buffer_size(output_width, depth);
   19714:	4631      	mov	r1, r6
   19716:	f001 f864 	bl	1a7e2 <arm_avgpool_s8_get_buffer_size>
    if (buffer_size > 0) {
   1971a:	1e01      	subs	r1, r0, #0
   1971c:	dd11      	ble.n	19742 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   1971e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   19720:	4620      	mov	r0, r4
   19722:	f107 0210 	add.w	r2, r7, #16
   19726:	4798      	blx	r3
   19728:	4604      	mov	r4, r0
   1972a:	b168      	cbz	r0, 19748 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xae>
   1972c:	a808      	add	r0, sp, #32
   1972e:	f7ff fb56 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
   19732:	a802      	add	r0, sp, #8
   19734:	f7ff fb53 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
   19738:	4625      	mov	r5, r4
}
   1973a:	4628      	mov	r0, r5
   1973c:	b00f      	add	sp, #60	; 0x3c
   1973e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      data->buffer_idx = -1;
   19742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19746:	613b      	str	r3, [r7, #16]
    RuntimeShape output_shape = GetTensorShape(output);
   19748:	a808      	add	r0, sp, #32
   1974a:	f7ff fb48 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = GetTensorShape(input);
   1974e:	a802      	add	r0, sp, #8
   19750:	f7ff fb45 	bl	18dde <_ZN6tflite12RuntimeShapeD1Ev>
   19754:	e7f1      	b.n	1973a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

00019756 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19756:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19758:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
   1975a:	4605      	mov	r5, r0
   1975c:	b908      	cbnz	r0, 19762 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0xc>
   1975e:	f002 fab8 	bl	1bcd2 <abort>
  TFLITE_DCHECK(node != nullptr);
   19762:	2900      	cmp	r1, #0
   19764:	d0fb      	beq.n	1975e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   19766:	680a      	ldr	r2, [r1, #0]
   19768:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1976a:	6851      	ldr	r1, [r2, #4]
   1976c:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   1976e:	6872      	ldr	r2, [r6, #4]
   19770:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   19772:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
   19774:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   19776:	4628      	mov	r0, r5
   19778:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   1977a:	a901      	add	r1, sp, #4
   1977c:	4606      	mov	r6, r0
   1977e:	7a20      	ldrb	r0, [r4, #8]
   19780:	f000 f92d 	bl	199de <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   19784:	4605      	mov	r5, r0
   19786:	b998      	cbnz	r0, 197b0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  input_bytes *= ElementCount(*input->dims);
   19788:	6860      	ldr	r0, [r4, #4]
   1978a:	f000 f943 	bl	19a14 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   1978e:	9b01      	ldr	r3, [sp, #4]
  if (input->data.raw != output->data.raw) {
   19790:	6822      	ldr	r2, [r4, #0]
  input_bytes *= ElementCount(*input->dims);
   19792:	4358      	muls	r0, r3
  if (input->data.raw != output->data.raw) {
   19794:	6833      	ldr	r3, [r6, #0]
  input_bytes *= ElementCount(*input->dims);
   19796:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   19798:	429a      	cmp	r2, r3
   1979a:	d009      	beq.n	197b0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    for (size_t i = 0; i < input_bytes; ++i) {
   1979c:	462b      	mov	r3, r5
   1979e:	9a01      	ldr	r2, [sp, #4]
   197a0:	429a      	cmp	r2, r3
   197a2:	d905      	bls.n	197b0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
      output->data.raw[i] = input->data.raw[i];
   197a4:	6822      	ldr	r2, [r4, #0]
   197a6:	5cd1      	ldrb	r1, [r2, r3]
   197a8:	6832      	ldr	r2, [r6, #0]
   197aa:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   197ac:	3301      	adds	r3, #1
   197ae:	e7f6      	b.n	1979e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   197b0:	4628      	mov	r0, r5
   197b2:	b002      	add	sp, #8
   197b4:	bd70      	pop	{r4, r5, r6, pc}

000197b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
   197b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  inline int32_t DimensionsCount() const { return size_; }
   197ba:	6807      	ldr	r7, [r0, #0]
                                   const RuntimeShape& check_shape_0) {
   197bc:	4604      	mov	r4, r0
   197be:	460d      	mov	r5, r1
   197c0:	4690      	mov	r8, r2
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   197c2:	2600      	movs	r6, #0
   197c4:	42be      	cmp	r6, r7
   197c6:	da10      	bge.n	197ea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   197c8:	42ae      	cmp	r6, r5
   197ca:	d00c      	beq.n	197e6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   197cc:	4631      	mov	r1, r6
   197ce:	4620      	mov	r0, r4
   197d0:	f7ff fb10 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
   197d4:	4631      	mov	r1, r6
   197d6:	4681      	mov	r9, r0
   197d8:	4640      	mov	r0, r8
   197da:	f7ff fb0b 	bl	18df4 <_ZNK6tflite12RuntimeShape4DimsEi>
   197de:	4581      	cmp	r9, r0
   197e0:	d001      	beq.n	197e6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   197e2:	f002 fa76 	bl	1bcd2 <abort>
  for (int i = 0; i < dims_count; ++i) {
   197e6:	3601      	adds	r6, #1
   197e8:	e7ec      	b.n	197c4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   197ea:	2d00      	cmp	r5, #0
   197ec:	dbf9      	blt.n	197e2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   197ee:	42bd      	cmp	r5, r7
   197f0:	daf7      	bge.n	197e2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   197f2:	2f05      	cmp	r7, #5
   197f4:	bfcc      	ite	gt
   197f6:	6864      	ldrgt	r4, [r4, #4]
   197f8:	3404      	addle	r4, #4
  int flat_size = 1;
   197fa:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   197fc:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   197fe:	429d      	cmp	r5, r3
   19800:	bf18      	it	ne
   19802:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   19806:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   1980a:	bf08      	it	eq
   1980c:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
   1980e:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   19810:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   19814:	dcf3      	bgt.n	197fe <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
   19816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001981a <_ZN6tflite26generic_int16_table_lookupEsPKs>:

// int16_t func table lookup, e.g., lookup exp() and 1/(1+x) used in softmax
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
  // 512 base value, lut[513] only for calculate slope
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   1981a:	f3c0 13cf 	ubfx	r3, r0, #7, #16
   1981e:	f503 7280 	add.w	r2, r3, #256	; 0x100
  assert(index < 512 && "LUT index out of range.");
  int16_t offset = value & 0x7f;

  // base and slope are Q0.15
  int16_t base = lut[index];
  int16_t slope = lut[index + 1] - lut[index];
   19822:	f203 1301 	addw	r3, r3, #257	; 0x101
  int16_t base = lut[index];
   19826:	b292      	uxth	r2, r2
  int16_t slope = lut[index + 1] - lut[index];
   19828:	b29b      	uxth	r3, r3
   1982a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   1982e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  int16_t offset = value & 0x7f;
   19832:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  int16_t slope = lut[index + 1] - lut[index];
   19836:	1a9b      	subs	r3, r3, r2

  // Q0.15 * Q0.7 = Q0.22
  // Round and convert from Q0.22 to Q0.15
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   19838:	2140      	movs	r1, #64	; 0x40
   1983a:	fb13 1000 	smlabb	r0, r3, r0, r1

  // Q0.15 + Q0.15
  return base + delta;
   1983e:	eb02 10e0 	add.w	r0, r2, r0, asr #7
}
   19842:	b200      	sxth	r0, r0
   19844:	4770      	bx	lr

00019846 <_ZN6tflite13GetReciprocalEiiPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
   19846:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   19848:	fab0 f380 	clz	r3, r0
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   1984c:	1ac9      	subs	r1, r1, r3
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
   1984e:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   19850:	6011      	str	r1, [r2, #0]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
   19852:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   19856:	f7fa f851 	bl	138fc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return shifted_scale.raw();
}
   1985a:	bd08      	pop	{r3, pc}

0001985c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   1985c:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   1985e:	2100      	movs	r1, #0
   19860:	f7f9 ff34 	bl	136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   19864:	bd08      	pop	{r3, pc}

00019866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   19866:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   19868:	f7f9 fe88 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   1986c:	bd08      	pop	{r3, pc}

0001986e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   1986e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19872:	b08d      	sub	sp, #52	; 0x34
   19874:	460c      	mov	r4, r1
   19876:	9203      	str	r2, [sp, #12]
   19878:	461a      	mov	r2, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
   1987a:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   1987e:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   19880:	6983      	ldr	r3, [r0, #24]
   19882:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   19884:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   19886:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   19888:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1988a:	4619      	mov	r1, r3
   1988c:	4620      	mov	r0, r4
   1988e:	9304      	str	r3, [sp, #16]
   19890:	f7ff ff91 	bl	197b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   19894:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   19898:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1989a:	4619      	mov	r1, r3
   1989c:	4620      	mov	r0, r4
   1989e:	f7ff faec 	bl	18e7a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   198a2:	2400      	movs	r4, #0
   198a4:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   198a6:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   198a8:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   198aa:	9b02      	ldr	r3, [sp, #8]
   198ac:	4598      	cmp	r8, r3
   198ae:	da71      	bge.n	19994 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   198b0:	9b03      	ldr	r3, [sp, #12]
    InputT max_in_row = std::numeric_limits<InputT>::min();
   198b2:	f88d 901f 	strb.w	r9, [sp, #31]
   198b6:	191f      	adds	r7, r3, r4
   198b8:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   198ba:	2200      	movs	r2, #0
   198bc:	42aa      	cmp	r2, r5
   198be:	da0e      	bge.n	198de <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   198c0:	460b      	mov	r3, r1
      if (__a < __b)
   198c2:	f89d 001f 	ldrb.w	r0, [sp, #31]
   198c6:	781e      	ldrb	r6, [r3, #0]
   198c8:	4286      	cmp	r6, r0
      return __a;
   198ca:	f10d 001f 	add.w	r0, sp, #31
   198ce:	bf98      	it	ls
   198d0:	4603      	movls	r3, r0
   198d2:	3101      	adds	r1, #1
   198d4:	781b      	ldrb	r3, [r3, #0]
   198d6:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   198da:	3201      	adds	r2, #1
   198dc:	e7ee      	b.n	198bc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   198de:	2600      	movs	r6, #0
   198e0:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   198e2:	46b2      	mov	sl, r6
   198e4:	45aa      	cmp	sl, r5
   198e6:	da17      	bge.n	19918 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   198e8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   198ec:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32_t input_diff =
   198f0:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   198f2:	9a01      	ldr	r2, [sp, #4]
   198f4:	4282      	cmp	r2, r0
   198f6:	dc0c      	bgt.n	19912 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   198f8:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   198fa:	9b00      	ldr	r3, [sp, #0]
   198fc:	4659      	mov	r1, fp
   198fe:	4098      	lsls	r0, r3
   19900:	f7f9 fe3c 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   19904:	f7fa f8b4 	bl	13a70 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   19908:	210c      	movs	r1, #12
   1990a:	f7f9 fedf 	bl	136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   1990e:	9b04      	ldr	r3, [sp, #16]
   19910:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   19912:	f10a 0a01 	add.w	sl, sl, #1
   19916:	e7e5      	b.n	198e4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   19918:	4630      	mov	r0, r6
   1991a:	aa08      	add	r2, sp, #32
   1991c:	210c      	movs	r1, #12
   1991e:	f7ff ff92 	bl	19846 <_ZN6tflite13GetReciprocalEiiPi>
   19922:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19924:	4682      	mov	sl, r0
   19926:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   19928:	2300      	movs	r3, #0
   1992a:	42ab      	cmp	r3, r5
   1992c:	da2e      	bge.n	1998c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   1992e:	f89d 101f 	ldrb.w	r1, [sp, #31]
   19932:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32_t input_diff =
   19936:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   19938:	9901      	ldr	r1, [sp, #4]
   1993a:	4281      	cmp	r1, r0
   1993c:	dc23      	bgt.n	19986 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   1993e:	9304      	str	r3, [sp, #16]
   19940:	9b00      	ldr	r3, [sp, #0]
   19942:	4659      	mov	r1, fp
   19944:	4098      	lsls	r0, r3
   19946:	f7f9 fe19 	bl	1357c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1994a:	f7fa f891 	bl	13a70 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1994e:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   19950:	4650      	mov	r0, sl
   19952:	f7ff ff88 	bl	19866 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
   19956:	9908      	ldr	r1, [sp, #32]
   19958:	3117      	adds	r1, #23
   1995a:	f7f9 feb7 	bl	136cc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   1995e:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   19960:	4298      	cmp	r0, r3
	return __b;
   19962:	bfcc      	ite	gt
   19964:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   19966:	a909      	addle	r1, sp, #36	; 0x24
   19968:	930a      	str	r3, [sp, #40]	; 0x28
        const int32_t shifted_output =
   1996a:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   1996c:	6808      	ldr	r0, [r1, #0]
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
   1996e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
      if (__b < __a)
   19972:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   19974:	2800      	cmp	r0, #0
	return __b;
   19976:	bfb8      	it	lt
   19978:	4611      	movlt	r1, r2
      if (__b < __a)
   1997a:	9b04      	ldr	r3, [sp, #16]
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1997c:	6809      	ldr	r1, [r1, #0]
   1997e:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   19980:	3301      	adds	r3, #1
   19982:	3601      	adds	r6, #1
   19984:	e7d1      	b.n	1992a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   19986:	f886 9000 	strb.w	r9, [r6]
   1998a:	e7f9      	b.n	19980 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   1998c:	f108 0801 	add.w	r8, r8, #1
   19990:	442c      	add	r4, r5
   19992:	e78a      	b.n	198aa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   19994:	b00d      	add	sp, #52	; 0x34
   19996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001999a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   1999a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1999e:	ee30 0a27 	vadd.f32	s0, s0, s15
   199a2:	ee87 0a80 	vdiv.f32	s0, s15, s0
   199a6:	4770      	bx	lr

000199a8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  { return __builtin_expf(__x); }
   199a8:	f7fb bed8 	b.w	1575c <expf>

000199ac <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   199ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   199ae:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   199b0:	b90b      	cbnz	r3, 199b6 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
   199b2:	f002 f98e 	bl	1bcd2 <abort>
}
   199b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   199ba:	2138      	movs	r1, #56	; 0x38
   199bc:	4718      	bx	r3

000199be <_ZN6tflite11TfLiteRoundIfEET_S1_>:
   199be:	b508      	push	{r3, lr}
   199c0:	ee10 0a10 	vmov	r0, s0
   199c4:	f7e6 fd50 	bl	468 <__aeabi_f2d>
   199c8:	ec41 0b10 	vmov	d0, r0, r1
   199cc:	f7fb fcd0 	bl	15370 <round>
   199d0:	ec51 0b10 	vmov	r0, r1, d0
   199d4:	f7e7 f83a 	bl	a4c <__aeabi_d2f>
   199d8:	ee00 0a10 	vmov	s0, r0
   199dc:	bd08      	pop	{r3, pc}

000199de <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
   199de:	3801      	subs	r0, #1
   199e0:	280f      	cmp	r0, #15
   199e2:	d815      	bhi.n	19a10 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
   199e4:	e8df f000 	tbb	[pc, r0]
   199e8:	0e100c0c 	.word	0x0e100c0c
   199ec:	0e081014 	.word	0x0e081014
   199f0:	120e0810 	.word	0x120e0810
   199f4:	0c14140e 	.word	0x0c14140e
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
   199f8:	2302      	movs	r3, #2
      break;
    case kTfLiteFloat32:
      *size = sizeof(float);
   199fa:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
   199fc:	2000      	movs	r0, #0
      break;
   199fe:	4770      	bx	lr
      *size = sizeof(float);
   19a00:	2304      	movs	r3, #4
   19a02:	e7fa      	b.n	199fa <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double);
   19a04:	2308      	movs	r3, #8
   19a06:	e7f8      	b.n	199fa <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(uint8_t);
   19a08:	2301      	movs	r3, #1
   19a0a:	e7f6      	b.n	199fa <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double) * 2;
   19a0c:	2310      	movs	r3, #16
   19a0e:	e7f4      	b.n	199fa <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
  switch (type) {
   19a10:	2001      	movs	r0, #1
}
   19a12:	4770      	bx	lr

00019a14 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   19a14:	b510      	push	{r4, lr}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   19a16:	f850 4b04 	ldr.w	r4, [r0], #4
   19a1a:	2200      	movs	r2, #0
  int result = 1;
   19a1c:	2301      	movs	r3, #1
  for (int i = 0; i < dims.size; ++i) {
   19a1e:	4294      	cmp	r4, r2
   19a20:	dd04      	ble.n	19a2c <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   19a22:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   19a26:	3201      	adds	r2, #1
    result *= dims.data[i];
   19a28:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   19a2a:	e7f8      	b.n	19a1e <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   19a2c:	4618      	mov	r0, r3
   19a2e:	bd10      	pop	{r4, pc}

00019a30 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
   19a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a34:	4680      	mov	r8, r0
   19a36:	ed2d 8b02 	vpush	{d8}
  uint32_t    L  = S->fftLen;
   19a3a:	f8b8 7000 	ldrh.w	r7, [r8]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
   19a3e:	f8d8 2004 	ldr.w	r2, [r8, #4]
  float32_t * p2 = p1 + L;
   19a42:	eb01 0987 	add.w	r9, r1, r7, lsl #2
{
   19a46:	4608      	mov	r0, r1

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
   19a48:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
   19a4a:	08ff      	lsrs	r7, r7, #3
{
   19a4c:	b083      	sub	sp, #12
   19a4e:	4606      	mov	r6, r0
  pMid1 = p1 + L;
   19a50:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  pMid2 = p2 + L;
   19a54:	eb09 0481 	add.w	r4, r9, r1, lsl #2
   19a58:	464b      	mov	r3, r9
   19a5a:	eb02 1707 	add.w	r7, r2, r7, lsl #4
  const float32_t * tw = (float32_t *) S->pTwiddle;
   19a5e:	4694      	mov	ip, r2
  for (l = L >> 2; l > 0; l-- )
   19a60:	45bc      	cmp	ip, r7
   19a62:	f106 0610 	add.w	r6, r6, #16
   19a66:	f105 0510 	add.w	r5, r5, #16
   19a6a:	f104 0410 	add.w	r4, r4, #16
   19a6e:	f103 0310 	add.w	r3, r3, #16
   19a72:	d110      	bne.n	19a96 <arm_cfft_radix8by2_f32+0x66>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
   19a74:	b289      	uxth	r1, r1
   19a76:	2302      	movs	r3, #2
   19a78:	9101      	str	r1, [sp, #4]
   19a7a:	f7fa faf5 	bl	14068 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   19a7e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   19a82:	9901      	ldr	r1, [sp, #4]
   19a84:	2302      	movs	r3, #2
   19a86:	4648      	mov	r0, r9
}
   19a88:	b003      	add	sp, #12
   19a8a:	ecbd 8b02 	vpop	{d8}
   19a8e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   19a92:	f7fa bae9 	b.w	14068 <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
   19a96:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
   19a9a:	ed16 6a04 	vldr	s12, [r6, #-16]
    t2[1] = p2[1];
   19a9e:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
   19aa2:	ed16 4a03 	vldr	s8, [r6, #-12]
    t4[0] = pMid2[0];
   19aa6:	ed54 6a04 	vldr	s13, [r4, #-16]
    t4[1] = pMid2[1];
   19aaa:	ed54 4a03 	vldr	s9, [r4, #-12]
    t2[2] = p2[2];
   19aae:	ed13 7a02 	vldr	s14, [r3, #-8]
    t2[3] = p2[3];
   19ab2:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
   19ab6:	ed55 2a03 	vldr	s5, [r5, #-12]
    t3[2] = pMid1[2];
   19aba:	ed15 3a02 	vldr	s6, [r5, #-8]
    t3[3] = pMid1[3];
   19abe:	ed55 3a01 	vldr	s7, [r5, #-4]
    t4[2] = pMid2[2];
   19ac2:	ed54 7a02 	vldr	s15, [r4, #-8]
    t4[3] = pMid2[3];
   19ac6:	ed54 5a01 	vldr	s11, [r4, #-4]
    t1[2] = p1[2];
   19aca:	ed16 1a02 	vldr	s2, [r6, #-8]
    t3[0] = pMid1[0];
   19ace:	ed15 2a04 	vldr	s4, [r5, #-16]
    t1[3] = p1[3];
   19ad2:	ed56 1a01 	vldr	s3, [r6, #-4]
    *p1++ = t1[0] + t2[0];
   19ad6:	ee36 8a00 	vadd.f32	s16, s12, s0
    t2[0] = t1[0] - t2[0];
   19ada:	ee36 6a40 	vsub.f32	s12, s12, s0
    *p1++ = t1[0] + t2[0];
   19ade:	ed06 8a04 	vstr	s16, [r6, #-16]
    *p1++ = t1[1] + t2[1];
   19ae2:	ee34 8a20 	vadd.f32	s16, s8, s1
    t2[1] = t1[1] - t2[1];
   19ae6:	ee34 4a60 	vsub.f32	s8, s8, s1
    *p1++ = t1[1] + t2[1];
   19aea:	ed06 8a03 	vstr	s16, [r6, #-12]
    *p1++ = t1[2] + t2[2];
   19aee:	ee31 8a07 	vadd.f32	s16, s2, s14
   19af2:	f10c 0c10 	add.w	ip, ip, #16
   19af6:	ed06 8a02 	vstr	s16, [r6, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
   19afa:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
   19afe:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
   19b02:	ee72 1a26 	vadd.f32	s3, s4, s13
    *p1++ = t1[3] + t2[3];    /* col 1 */
   19b06:	ed06 8a01 	vstr	s16, [r6, #-4]
    *pMid1++ = t3[0] + t4[0];
   19b0a:	ed45 1a04 	vstr	s3, [r5, #-16]
    *pMid1++ = t3[1] + t4[1];
   19b0e:	ee72 1aa4 	vadd.f32	s3, s5, s9
    t4[1] = t4[1] - t3[1];
   19b12:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *pMid1++ = t3[1] + t4[1];
   19b16:	ed45 1a03 	vstr	s3, [r5, #-12]
    *pMid1++ = t3[2] + t4[2];
   19b1a:	ee73 1a27 	vadd.f32	s3, s6, s15
    t4[2] = t4[2] - t3[2];
   19b1e:	ee77 7ac3 	vsub.f32	s15, s15, s6
    *pMid1++ = t3[2] + t4[2];
   19b22:	ed45 1a02 	vstr	s3, [r5, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   19b26:	ee73 1aa5 	vadd.f32	s3, s7, s11
    t4[3] = t4[3] - t3[3];    /* for col 2 */
   19b2a:	ee75 5ae3 	vsub.f32	s11, s11, s7
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   19b2e:	ed45 1a01 	vstr	s3, [r5, #-4]
    twI = *tw++;
   19b32:	ed5c 3a03 	vldr	s7, [ip, #-12]
    twR = *tw++;
   19b36:	ed1c 3a04 	vldr	s6, [ip, #-16]
    m1 = t2[1] * twI;
   19b3a:	ee64 2a23 	vmul.f32	s5, s8, s7
    *p2++ = m0 + m1;
   19b3e:	ee46 2a03 	vmla.f32	s5, s12, s6
    m3 = t2[0] * twI;
   19b42:	ee26 6a23 	vmul.f32	s12, s12, s7
    *p2++ = m2 - m3;
   19b46:	ee14 6a03 	vnmls.f32	s12, s8, s6
    t4[0] = t4[0] - t3[0];
   19b4a:	ee76 6ac2 	vsub.f32	s13, s13, s4
    *p2++ = m2 - m3;
   19b4e:	ed03 6a03 	vstr	s12, [r3, #-12]
    m1 = t4[1] * twR;
   19b52:	ee24 6a83 	vmul.f32	s12, s9, s6
    *pMid2++ = m0 - m1;
   19b56:	ee16 6aa3 	vnmls.f32	s12, s13, s7
    m3 = t4[0] * twR;
   19b5a:	ee66 6a83 	vmul.f32	s13, s13, s6
    *pMid2++ = m2 + m3;
   19b5e:	ee44 6aa3 	vmla.f32	s13, s9, s7
    *p2++ = m0 + m1;
   19b62:	ed43 2a04 	vstr	s5, [r3, #-16]
    *pMid2++ = m0 - m1;
   19b66:	ed04 6a04 	vstr	s12, [r4, #-16]
    *pMid2++ = m2 + m3;
   19b6a:	ed44 6a03 	vstr	s13, [r4, #-12]
    twR = *tw++;
   19b6e:	ed1c 6a02 	vldr	s12, [ip, #-8]
    twI = *tw++;
   19b72:	ed5c 6a01 	vldr	s13, [ip, #-4]
    t2[2] = t1[2] - t2[2];
   19b76:	ee31 7a47 	vsub.f32	s14, s2, s14
    m1 = t2[3] * twI;
   19b7a:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
   19b7e:	ee47 4a06 	vmla.f32	s9, s14, s12
    m3 = t2[2] * twI;
   19b82:	ee27 7a26 	vmul.f32	s14, s14, s13
    *p2++ = m2 - m3;
   19b86:	ee15 7a06 	vnmls.f32	s14, s10, s12
    *p2++ = m0 + m1;
   19b8a:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
   19b8e:	ed03 7a01 	vstr	s14, [r3, #-4]
    m1 = t4[3] * twR;
   19b92:	ee25 7a86 	vmul.f32	s14, s11, s12
    *pMid2++ = m0 - m1;
   19b96:	ee17 7aa6 	vnmls.f32	s14, s15, s13
    m3 = t4[2] * twR;
   19b9a:	ee67 7a86 	vmul.f32	s15, s15, s12
    *pMid2++ = m2 + m3;
   19b9e:	ee45 7aa6 	vmla.f32	s15, s11, s13
    *pMid2++ = m0 - m1;
   19ba2:	ed04 7a02 	vstr	s14, [r4, #-8]
    *pMid2++ = m2 + m3;
   19ba6:	ed44 7a01 	vstr	s15, [r4, #-4]
  for (l = L >> 2; l > 0; l-- )
   19baa:	e759      	b.n	19a60 <arm_cfft_radix8by2_f32+0x30>

00019bac <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
    uint32_t    L  = S->fftLen >> 1;
   19bac:	8803      	ldrh	r3, [r0, #0]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
   19bae:	edd1 7a00 	vldr	s15, [r1]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   19bb2:	6842      	ldr	r2, [r0, #4]
    uint32_t    L  = S->fftLen >> 1;
   19bb4:	085b      	lsrs	r3, r3, #1
{
   19bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t * p3 = p2 + L;
   19bba:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
    p1ap3_0 = p1[0] + p3[0];
   19bbe:	ed95 7a00 	vldr	s14, [r5]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
   19bc2:	edd5 5a01 	vldr	s11, [r5, #4]
    p1ap3_0 = p1[0] + p3[0];
   19bc6:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
   19bca:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
   19bce:	ed91 7a01 	vldr	s14, [r1, #4]
    float32_t * p2 = p1 + L;
   19bd2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    p1ap3_1 = p1[1] + p3[1];
   19bd6:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
   19bda:	ee77 5a65 	vsub.f32	s11, s14, s11

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   19bde:	ed96 7a00 	vldr	s14, [r6]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   19be2:	edd6 3a01 	vldr	s7, [r6, #4]
{
   19be6:	ed2d 8b04 	vpush	{d8-d9}
    float32_t * p4 = p3 + L;
   19bea:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   19bee:	edd4 4a00 	vldr	s9, [r4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   19bf2:	ed94 4a01 	vldr	s8, [r4, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   19bf6:	ee37 5a06 	vadd.f32	s10, s14, s12
{
   19bfa:	b08f      	sub	sp, #60	; 0x3c
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   19bfc:	ee35 5a24 	vadd.f32	s10, s10, s9
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   19c00:	9202      	str	r2, [sp, #8]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   19c02:	ed81 5a00 	vstr	s10, [r1]
    L >>= 1;
   19c06:	085a      	lsrs	r2, r3, #1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   19c08:	ed96 5a01 	vldr	s10, [r6, #4]
    L >>= 1;
   19c0c:	920a      	str	r2, [sp, #40]	; 0x28
    p1ap3_0 = p1[0] + p3[0];
   19c0e:	460a      	mov	r2, r1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   19c10:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   19c12:	ed94 3a01 	vldr	s6, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   19c16:	9206      	str	r2, [sp, #24]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   19c18:	ee36 5a85 	vadd.f32	s10, s13, s10

    /* Twiddle factors are ones */
    *p2++ = t2[0];
   19c1c:	4632      	mov	r2, r6
   19c1e:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   19c20:	ee35 5a03 	vadd.f32	s10, s10, s6
    *p2++ = t2[0];
   19c24:	920b      	str	r2, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
   19c26:	462a      	mov	r2, r5
   19c28:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   19c2a:	ed81 5a01 	vstr	s10, [r1, #4]
    *p3++ = t3[0];
   19c2e:	920c      	str	r2, [sp, #48]	; 0x30
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   19c30:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p3++ = t3[1];
    *p4++ = t4[0];
   19c34:	4622      	mov	r2, r4
   19c36:	3208      	adds	r2, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   19c38:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p4++ = t4[0];
   19c3c:	920d      	str	r2, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
   19c3e:	9a02      	ldr	r2, [sp, #8]
    *p2++ = t2[0];
   19c40:	ed86 5a00 	vstr	s10, [r6]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   19c44:	ee36 6a47 	vsub.f32	s12, s12, s14
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   19c48:	ee35 5ac7 	vsub.f32	s10, s11, s14
    tw2 += twMod2;
   19c4c:	3208      	adds	r2, #8
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   19c4e:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   19c52:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   19c56:	ee37 7a25 	vadd.f32	s14, s14, s11
    tw2 += twMod2;
   19c5a:	9207      	str	r2, [sp, #28]
    tw3 += twMod3;
   19c5c:	9a02      	ldr	r2, [sp, #8]
{
   19c5e:	9100      	str	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   19c60:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   19c64:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   19c68:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   19c6c:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   19c70:	ee37 7a64 	vsub.f32	s14, s14, s9
    tw3 += twMod3;
   19c74:	3210      	adds	r2, #16
    *p2++ = t2[1];
   19c76:	ed86 5a01 	vstr	s10, [r6, #4]
    *p3++ = t3[0];
   19c7a:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
   19c7e:	edc5 6a01 	vstr	s13, [r5, #4]
    *p4++ = t4[0];
   19c82:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
   19c86:	ed84 7a01 	vstr	s14, [r4, #4]
    tw3 += twMod3;
   19c8a:	9208      	str	r2, [sp, #32]
    tw4 += twMod4;
   19c8c:	9a02      	ldr	r2, [sp, #8]
   19c8e:	3218      	adds	r2, #24
   19c90:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
   19c92:	085a      	lsrs	r2, r3, #1
   19c94:	3a02      	subs	r2, #2
   19c96:	ea4f 0852 	mov.w	r8, r2, lsr #1
   19c9a:	9a07      	ldr	r2, [sp, #28]
   19c9c:	9204      	str	r2, [sp, #16]
   19c9e:	9a08      	ldr	r2, [sp, #32]
   19ca0:	9203      	str	r2, [sp, #12]
   19ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19ca4:	9201      	str	r2, [sp, #4]
   19ca6:	9a00      	ldr	r2, [sp, #0]
   19ca8:	f8cd 8014 	str.w	r8, [sp, #20]
   19cac:	f1a4 0a04 	sub.w	sl, r4, #4
   19cb0:	f102 0e10 	add.w	lr, r2, #16
{
   19cb4:	4683      	mov	fp, r0
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
   19cb6:	f1a6 0904 	sub.w	r9, r6, #4
    pEnd2 = p3 - 1;
   19cba:	1f2f      	subs	r7, r5, #4
    pEnd4 = pEnd3 + L;
   19cbc:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   19cc0:	f106 0110 	add.w	r1, r6, #16
   19cc4:	f105 0c10 	add.w	ip, r5, #16
   19cc8:	f104 0210 	add.w	r2, r4, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
   19ccc:	9804      	ldr	r0, [sp, #16]
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
   19cce:	ed1c 3a02 	vldr	s6, [ip, #-8]
   19cd2:	ed1e 6a02 	vldr	s12, [lr, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   19cd6:	ed11 7a01 	vldr	s14, [r1, #-4]
      p1ap3_1 = p1[1] + p3[1];
   19cda:	ed5c 3a01 	vldr	s7, [ip, #-4]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   19cde:	ed12 4a01 	vldr	s8, [r2, #-4]
      p1ap3_1 = p1[1] + p3[1];
   19ce2:	ed5e 7a01 	vldr	s15, [lr, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   19ce6:	ed12 5a02 	vldr	s10, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
   19cea:	3008      	adds	r0, #8
      p1sp3_0 = p1[0] - p3[0];
   19cec:	ee76 4a43 	vsub.f32	s9, s12, s6
    for (l = (L - 2) >> 1; l > 0; l-- )
   19cf0:	9004      	str	r0, [sp, #16]
   19cf2:	9803      	ldr	r0, [sp, #12]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   19cf4:	ee77 6a24 	vadd.f32	s13, s14, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
   19cf8:	3010      	adds	r0, #16
   19cfa:	9003      	str	r0, [sp, #12]
   19cfc:	9801      	ldr	r0, [sp, #4]
      p1sp3_1 = p1[1] - p3[1];
   19cfe:	ee77 5ae3 	vsub.f32	s11, s15, s7
      p1ap3_0 = p1[0] + p3[0];
   19d02:	ee36 6a03 	vadd.f32	s12, s12, s6
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   19d06:	ee36 2ac4 	vsub.f32	s4, s13, s8
      p1ap3_1 = p1[1] + p3[1];
   19d0a:	ee77 7aa3 	vadd.f32	s15, s15, s7
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   19d0e:	ed51 6a02 	vldr	s13, [r1, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
   19d12:	3018      	adds	r0, #24
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   19d14:	ee75 2ae6 	vsub.f32	s5, s11, s13
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   19d18:	ee36 3a66 	vsub.f32	s6, s12, s13
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   19d1c:	ee77 3ac7 	vsub.f32	s7, s15, s14
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   19d20:	ee76 5aa5 	vadd.f32	s11, s13, s11
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   19d24:	ee34 7ac7 	vsub.f32	s14, s9, s14
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   19d28:	ee76 6a86 	vadd.f32	s13, s13, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
   19d2c:	9001      	str	r0, [sp, #4]
   19d2e:	9805      	ldr	r0, [sp, #20]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   19d30:	ee72 2a85 	vadd.f32	s5, s5, s10
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   19d34:	ee33 3a45 	vsub.f32	s6, s6, s10
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   19d38:	ee73 3ac4 	vsub.f32	s7, s7, s8
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   19d3c:	ee37 7a04 	vadd.f32	s14, s14, s8
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   19d40:	ee75 5ac5 	vsub.f32	s11, s11, s10
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   19d44:	ee76 6a85 	vadd.f32	s13, s13, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
   19d48:	f1a9 0908 	sub.w	r9, r9, #8
   19d4c:	3f08      	subs	r7, #8
   19d4e:	f1aa 0a08 	sub.w	sl, sl, #8
   19d52:	3b08      	subs	r3, #8
   19d54:	f10e 0e08 	add.w	lr, lr, #8
   19d58:	3108      	adds	r1, #8
   19d5a:	f10c 0c08 	add.w	ip, ip, #8
   19d5e:	3208      	adds	r2, #8
   19d60:	2800      	cmp	r0, #0
   19d62:	d174      	bne.n	19e4e <arm_cfft_radix8by4_f32+0x2a2>
   19d64:	9809      	ldr	r0, [sp, #36]	; 0x24
   19d66:	9b06      	ldr	r3, [sp, #24]
   19d68:	2718      	movs	r7, #24
   19d6a:	fb07 0708 	mla	r7, r7, r8, r0
   19d6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19d70:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
   19d74:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
   19d78:	9b07      	ldr	r3, [sp, #28]
   19d7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   19d7c:	edc2 6a00 	vstr	s13, [r2]
   19d80:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
   19d84:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
   19d88:	980d      	ldr	r0, [sp, #52]	; 0x34
   19d8a:	9b08      	ldr	r3, [sp, #32]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   19d8c:	eddc 6a01 	vldr	s13, [ip, #4]
   19d90:	eb03 1308 	add.w	r3, r3, r8, lsl #4
   19d94:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
   19d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
   19d9c:	edd8 6a01 	vldr	s13, [r8, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   19da0:	9800      	ldr	r0, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   19da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
   19da6:	edc2 7a01 	vstr	s15, [r2, #4]
    twI = tw2[1];
   19daa:	edd1 6a01 	vldr	s13, [r1, #4]
    twR = tw2[0];
   19dae:	ed91 6a00 	vldr	s12, [r1]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   19db2:	9a02      	ldr	r2, [sp, #8]
   19db4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   19db8:	9101      	str	r1, [sp, #4]
    m1 = t2[1] * twI;
   19dba:	ee66 7aa2 	vmul.f32	s15, s13, s5
    m3 = t2[0] * twI;
   19dbe:	ee66 6a82 	vmul.f32	s13, s13, s4
    *p2++ = m0 + m1;
   19dc2:	ee46 7a02 	vmla.f32	s15, s12, s4
    *p2++ = m2 - m3;
   19dc6:	ee56 6a22 	vnmls.f32	s13, s12, s5
    *p2++ = m0 + m1;
   19dca:	edcc 7a00 	vstr	s15, [ip]
    *p2++ = m2 - m3;
   19dce:	edcc 6a01 	vstr	s13, [ip, #4]
    twI = tw3[1];
   19dd2:	edd3 7a01 	vldr	s15, [r3, #4]
    twR = tw3[0];
   19dd6:	ed93 6a00 	vldr	s12, [r3]
    m1 = t3[1] * twI;
   19dda:	ee67 6aa3 	vmul.f32	s13, s15, s7
    m3 = t3[0] * twI;
   19dde:	ee67 7a83 	vmul.f32	s15, s15, s6
    *p3++ = m0 + m1;
   19de2:	ee46 6a03 	vmla.f32	s13, s12, s6
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   19de6:	2304      	movs	r3, #4
    *p3++ = m2 - m3;
   19de8:	ee56 7a23 	vnmls.f32	s15, s12, s7
    *p3++ = m0 + m1;
   19dec:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
   19df0:	edce 7a01 	vstr	s15, [lr, #4]
    twI = tw4[1];
   19df4:	edd7 7a01 	vldr	s15, [r7, #4]
    twR = tw4[0];
   19df8:	ed97 6a00 	vldr	s12, [r7]
    m1 = t4[1] * twI;
   19dfc:	ee67 6aa5 	vmul.f32	s13, s15, s11
    m3 = t4[0] * twI;
   19e00:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p4++ = m0 + m1;
   19e04:	ee46 6a07 	vmla.f32	s13, s12, s14
    *p4++ = m2 - m3;
   19e08:	ee56 7a25 	vnmls.f32	s15, s12, s11
    *p4++ = m0 + m1;
   19e0c:	edc8 6a00 	vstr	s13, [r8]
    *p4++ = m2 - m3;
   19e10:	edc8 7a01 	vstr	s15, [r8, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   19e14:	f7fa f928 	bl	14068 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
   19e18:	9901      	ldr	r1, [sp, #4]
   19e1a:	f8db 2004 	ldr.w	r2, [fp, #4]
   19e1e:	9100      	str	r1, [sp, #0]
   19e20:	4630      	mov	r0, r6
   19e22:	2304      	movs	r3, #4
   19e24:	f7fa f920 	bl	14068 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
   19e28:	f8db 2004 	ldr.w	r2, [fp, #4]
   19e2c:	9900      	ldr	r1, [sp, #0]
   19e2e:	4628      	mov	r0, r5
   19e30:	2304      	movs	r3, #4
   19e32:	f7fa f919 	bl	14068 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   19e36:	f8db 2004 	ldr.w	r2, [fp, #4]
   19e3a:	9900      	ldr	r1, [sp, #0]
   19e3c:	2304      	movs	r3, #4
   19e3e:	4620      	mov	r0, r4
}
   19e40:	b00f      	add	sp, #60	; 0x3c
   19e42:	ecbd 8b04 	vpop	{d8-d9}
   19e46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   19e4a:	f7fa b90d 	b.w	14068 <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   19e4e:	ed4e 6a04 	vstr	s13, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   19e52:	ed51 6a03 	vldr	s13, [r1, #-12]
      twR = *tw2++;
   19e56:	9804      	ldr	r0, [sp, #16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   19e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
   19e5c:	ed52 6a03 	vldr	s13, [r2, #-12]
   19e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
   19e64:	ed4e 7a03 	vstr	s15, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   19e68:	edda 7a01 	vldr	s15, [sl, #4]
   19e6c:	edd9 1a01 	vldr	s3, [r9, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   19e70:	edd9 4a02 	vldr	s9, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   19e74:	ed93 0a02 	vldr	s0, [r3, #8]
   19e78:	ed97 6a02 	vldr	s12, [r7, #8]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   19e7c:	ed93 4a01 	vldr	s8, [r3, #4]
   19e80:	ed97 8a01 	vldr	s16, [r7, #4]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   19e84:	ee31 5aa7 	vadd.f32	s10, s3, s15
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
   19e88:	ee71 1ae7 	vsub.f32	s3, s3, s15
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   19e8c:	edda 7a02 	vldr	s15, [sl, #8]
   19e90:	ee74 8aa7 	vadd.f32	s17, s9, s15
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   19e94:	ee36 9a40 	vsub.f32	s18, s12, s0
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   19e98:	ee38 1ac6 	vsub.f32	s2, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   19e9c:	ee36 6a28 	vadd.f32	s12, s12, s17
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
   19ea0:	ee74 4ae7 	vsub.f32	s9, s9, s15
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   19ea4:	ee36 6a00 	vadd.f32	s12, s12, s0
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   19ea8:	ee75 7a48 	vsub.f32	s15, s10, s16
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   19eac:	ed89 6a02 	vstr	s12, [r9, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   19eb0:	ed97 6a01 	vldr	s12, [r7, #4]
   19eb4:	ee35 5a06 	vadd.f32	s10, s10, s12
   19eb8:	ed93 6a01 	vldr	s12, [r3, #4]
   19ebc:	ee35 5a06 	vadd.f32	s10, s10, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   19ec0:	ee74 6ac8 	vsub.f32	s13, s9, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   19ec4:	ed89 5a01 	vstr	s10, [r9, #4]
      twI = *tw2++;
   19ec8:	ed10 6a01 	vldr	s12, [r0, #-4]
      twR = *tw2++;
   19ecc:	ed10 5a02 	vldr	s10, [r0, #-8]
      twR = tw3[0];
   19ed0:	9803      	ldr	r0, [sp, #12]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   19ed2:	ee77 7ac4 	vsub.f32	s15, s15, s8
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   19ed6:	ee76 6a84 	vadd.f32	s13, s13, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   19eda:	ee34 4a48 	vsub.f32	s8, s8, s16
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   19ede:	ee79 0a21 	vadd.f32	s1, s18, s3
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   19ee2:	ee74 4a64 	vsub.f32	s9, s8, s9
      m1 = t2[1] * twI;
   19ee6:	ee26 4a22 	vmul.f32	s8, s12, s5
      *p2++ = m0 + m1;
   19eea:	ee05 4a02 	vmla.f32	s8, s10, s4
      m3 = t2[0] * twI;
   19eee:	ee26 2a02 	vmul.f32	s4, s12, s4
      *p2++ = m0 + m1;
   19ef2:	ed01 4a04 	vstr	s8, [r1, #-16]
      m1 = t2[2] * twR;
   19ef6:	ee20 4a85 	vmul.f32	s8, s1, s10
      *pEnd2-- = m0 - m1;
   19efa:	ee16 4a86 	vnmls.f32	s8, s13, s12
      m3 = t2[3] * twR;
   19efe:	ee66 6a85 	vmul.f32	s13, s13, s10
      *pEnd2-- = m2 + m3;
   19f02:	ee40 6a86 	vmla.f32	s13, s1, s12
      *p2++ = m2 - m3;
   19f06:	ee15 2a22 	vnmls.f32	s4, s10, s5
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   19f0a:	ee31 1a40 	vsub.f32	s2, s2, s0
      *p2++ = m2 - m3;
   19f0e:	ed01 2a03 	vstr	s4, [r1, #-12]
      *pEnd2-- = m0 - m1;
   19f12:	ed87 4a02 	vstr	s8, [r7, #8]
      *pEnd2-- = m2 + m3;
   19f16:	edc7 6a01 	vstr	s13, [r7, #4]
      twI = tw3[1];
   19f1a:	ed10 6a03 	vldr	s12, [r0, #-12]
      twR = tw3[0];
   19f1e:	ed50 6a04 	vldr	s13, [r0, #-16]
      twR = tw4[0];
   19f22:	9801      	ldr	r0, [sp, #4]
      m1 = t3[1] * twI;
   19f24:	ee26 5a23 	vmul.f32	s10, s12, s7
      *p3++ = m0 + m1;
   19f28:	ee06 5a83 	vmla.f32	s10, s13, s6
      m3 = t3[0] * twI;
   19f2c:	ee26 3a03 	vmul.f32	s6, s12, s6
      *p3++ = m0 + m1;
   19f30:	ed0c 5a04 	vstr	s10, [ip, #-16]
      m1 =  t3[2] * twI;
   19f34:	ee27 5a86 	vmul.f32	s10, s15, s12
      *p3++ = m2 - m3;
   19f38:	ee16 3aa3 	vnmls.f32	s6, s13, s7
      *pEnd3-- = m0 - m1;
   19f3c:	ee11 5a66 	vnmla.f32	s10, s2, s13
      m2 =  t3[2] * twR;
   19f40:	ee67 6aa6 	vmul.f32	s13, s15, s13
      *pEnd3-- = m3 - m2;
   19f44:	ee51 6a06 	vnmls.f32	s13, s2, s12
      *p3++ = m2 - m3;
   19f48:	ed0c 3a03 	vstr	s6, [ip, #-12]
      *pEnd3-- = m0 - m1;
   19f4c:	ed8a 5a02 	vstr	s10, [sl, #8]
      *pEnd3-- = m3 - m2;
   19f50:	edca 6a01 	vstr	s13, [sl, #4]
      twR = tw4[0];
   19f54:	ed50 7a06 	vldr	s15, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
   19f58:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
    for (l = (L - 2) >> 1; l > 0; l-- )
   19f5c:	9805      	ldr	r0, [sp, #20]
      m1 = t4[1] * twI;
   19f5e:	ee26 6aa5 	vmul.f32	s12, s13, s11
      *p4++ = m0 + m1;
   19f62:	ee07 6a87 	vmla.f32	s12, s15, s14
    for (l = (L - 2) >> 1; l > 0; l-- )
   19f66:	3801      	subs	r0, #1
   19f68:	9005      	str	r0, [sp, #20]
      m3 = t4[0] * twI;
   19f6a:	ee26 7a87 	vmul.f32	s14, s13, s14
      *p4++ = m2 - m3;
   19f6e:	ee17 7aa5 	vnmls.f32	s14, s15, s11
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
   19f72:	ee79 1a61 	vsub.f32	s3, s18, s3
      *p4++ = m2 - m3;
   19f76:	ed02 7a03 	vstr	s14, [r2, #-12]
      m1 = t4[2] * twR;
   19f7a:	ee21 7aa7 	vmul.f32	s14, s3, s15
      m3 = t4[3] * twR;
   19f7e:	ee64 7aa7 	vmul.f32	s15, s9, s15
      *pEnd4-- = m0 - m1;
   19f82:	ee14 7aa6 	vnmls.f32	s14, s9, s13
      *pEnd4-- = m2 + m3;
   19f86:	ee41 7aa6 	vmla.f32	s15, s3, s13
      *p4++ = m0 + m1;
   19f8a:	ed02 6a04 	vstr	s12, [r2, #-16]
      *pEnd4-- = m0 - m1;
   19f8e:	ed83 7a02 	vstr	s14, [r3, #8]
      *pEnd4-- = m2 + m3;
   19f92:	edc3 7a01 	vstr	s15, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   19f96:	e699      	b.n	19ccc <arm_cfft_radix8by4_f32+0x120>

00019f98 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
   19f98:	2a01      	cmp	r2, #1
{
   19f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
   19f9e:	8805      	ldrh	r5, [r0, #0]
{
   19fa0:	4606      	mov	r6, r0
   19fa2:	460c      	mov	r4, r1
   19fa4:	4617      	mov	r7, r2
   19fa6:	4698      	mov	r8, r3
  if (ifftFlag == 1U)
   19fa8:	d03e      	beq.n	1a028 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
   19faa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   19fae:	d049      	beq.n	1a044 <arm_cfft_f32+0xac>
   19fb0:	d826      	bhi.n	1a000 <arm_cfft_f32+0x68>
   19fb2:	2d40      	cmp	r5, #64	; 0x40
   19fb4:	d031      	beq.n	1a01a <arm_cfft_f32+0x82>
   19fb6:	d81c      	bhi.n	19ff2 <arm_cfft_f32+0x5a>
   19fb8:	2d10      	cmp	r5, #16
   19fba:	d01c      	beq.n	19ff6 <arm_cfft_f32+0x5e>
   19fbc:	2d20      	cmp	r5, #32
   19fbe:	d041      	beq.n	1a044 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
   19fc0:	f1b8 0f00 	cmp.w	r8, #0
   19fc4:	d004      	beq.n	19fd0 <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
   19fc6:	68b2      	ldr	r2, [r6, #8]
   19fc8:	89b1      	ldrh	r1, [r6, #12]
   19fca:	4620      	mov	r0, r4
   19fcc:	f000 fde3 	bl	1ab96 <arm_bitreversal_32>

  if (ifftFlag == 1U)
   19fd0:	2f01      	cmp	r7, #1
   19fd2:	d10c      	bne.n	19fee <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
   19fd4:	ee07 5a90 	vmov	s15, r5
   19fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   19fdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   19fe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
   19fe4:	2300      	movs	r3, #0
   19fe6:	42ab      	cmp	r3, r5
   19fe8:	f104 0408 	add.w	r4, r4, #8
   19fec:	d32f      	bcc.n	1a04e <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
   19fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
   19ff2:	2d80      	cmp	r5, #128	; 0x80
   19ff4:	d1e4      	bne.n	19fc0 <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
   19ff6:	4621      	mov	r1, r4
   19ff8:	4630      	mov	r0, r6
   19ffa:	f7ff fd19 	bl	19a30 <arm_cfft_radix8by2_f32>
    break;
   19ffe:	e7df      	b.n	19fc0 <arm_cfft_f32+0x28>
  switch (L)
   1a000:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
   1a004:	d01e      	beq.n	1a044 <arm_cfft_f32+0xac>
   1a006:	d805      	bhi.n	1a014 <arm_cfft_f32+0x7c>
   1a008:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   1a00c:	d005      	beq.n	1a01a <arm_cfft_f32+0x82>
   1a00e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1a012:	e7ef      	b.n	19ff4 <arm_cfft_f32+0x5c>
   1a014:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1a018:	d1d2      	bne.n	19fc0 <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
   1a01a:	6872      	ldr	r2, [r6, #4]
   1a01c:	2301      	movs	r3, #1
   1a01e:	4629      	mov	r1, r5
   1a020:	4620      	mov	r0, r4
   1a022:	f7fa f821 	bl	14068 <arm_radix8_butterfly_f32>
    break;
   1a026:	e7cb      	b.n	19fc0 <arm_cfft_f32+0x28>
    pSrc = p1 + 1;
   1a028:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
   1a02a:	2300      	movs	r3, #0
   1a02c:	42ab      	cmp	r3, r5
   1a02e:	f102 0208 	add.w	r2, r2, #8
   1a032:	d2ba      	bcs.n	19faa <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
   1a034:	ed52 7a02 	vldr	s15, [r2, #-8]
   1a038:	eef1 7a67 	vneg.f32	s15, s15
   1a03c:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
   1a040:	3301      	adds	r3, #1
   1a042:	e7f3      	b.n	1a02c <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
   1a044:	4621      	mov	r1, r4
   1a046:	4630      	mov	r0, r6
   1a048:	f7ff fdb0 	bl	19bac <arm_cfft_radix8by4_f32>
    break;
   1a04c:	e7b8      	b.n	19fc0 <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
   1a04e:	ed54 7a02 	vldr	s15, [r4, #-8]
   1a052:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
   1a056:	3301      	adds	r3, #1
      *pSrc++ *=   invL ;
   1a058:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
   1a05c:	ed54 7a01 	vldr	s15, [r4, #-4]
   1a060:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   1a064:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
   1a068:	e7bd      	b.n	19fe6 <arm_cfft_f32+0x4e>

0001a06a <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
   1a06a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a06e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1a070:	9600      	str	r6, [sp, #0]
   1a072:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
   1a076:	9701      	str	r7, [sp, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   1a078:	690f      	ldr	r7, [r1, #16]
{
   1a07a:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
   1a07e:	e9dd c911 	ldrd	ip, r9, [sp, #68]	; 0x44
   1a082:	4686      	mov	lr, r0
   1a084:	460c      	mov	r4, r1
   1a086:	4690      	mov	r8, r2
   1a088:	461d      	mov	r5, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   1a08a:	b9af      	cbnz	r7, 1a0b8 <arm_convolve_wrapper_s8+0x4e>
   1a08c:	694f      	ldr	r7, [r1, #20]
   1a08e:	b99f      	cbnz	r7, 1a0b8 <arm_convolve_wrapper_s8+0x4e>
   1a090:	68df      	ldr	r7, [r3, #12]
   1a092:	07bf      	lsls	r7, r7, #30
   1a094:	d110      	bne.n	1a0b8 <arm_convolve_wrapper_s8+0x4e>
   1a096:	688f      	ldr	r7, [r1, #8]
   1a098:	2f01      	cmp	r7, #1
   1a09a:	d10d      	bne.n	1a0b8 <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   1a09c:	68cf      	ldr	r7, [r1, #12]
   1a09e:	2f01      	cmp	r7, #1
   1a0a0:	d10a      	bne.n	1a0b8 <arm_convolve_wrapper_s8+0x4e>
   1a0a2:	68b7      	ldr	r7, [r6, #8]
   1a0a4:	2f01      	cmp	r7, #1
   1a0a6:	d107      	bne.n	1a0b8 <arm_convolve_wrapper_s8+0x4e>
   1a0a8:	6877      	ldr	r7, [r6, #4]
   1a0aa:	2f01      	cmp	r7, #1
   1a0ac:	d104      	bne.n	1a0b8 <arm_convolve_wrapper_s8+0x4e>
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
   1a0ae:	b003      	add	sp, #12
   1a0b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
   1a0b4:	f000 bda8 	b.w	1ac08 <arm_convolve_1x1_s8_fast>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   1a0b8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1a0bc:	2b01      	cmp	r3, #1
   1a0be:	d11e      	bne.n	1a0fe <arm_convolve_wrapper_s8+0x94>
   1a0c0:	686b      	ldr	r3, [r5, #4]
   1a0c2:	2b01      	cmp	r3, #1
   1a0c4:	d11b      	bne.n	1a0fe <arm_convolve_wrapper_s8+0x94>
   1a0c6:	6873      	ldr	r3, [r6, #4]
   1a0c8:	2b01      	cmp	r3, #1
   1a0ca:	d118      	bne.n	1a0fe <arm_convolve_wrapper_s8+0x94>
   1a0cc:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1a0d0:	079b      	lsls	r3, r3, #30
   1a0d2:	d114      	bne.n	1a0fe <arm_convolve_wrapper_s8+0x94>
   1a0d4:	682b      	ldr	r3, [r5, #0]
   1a0d6:	2b01      	cmp	r3, #1
   1a0d8:	d111      	bne.n	1a0fe <arm_convolve_wrapper_s8+0x94>
        return arm_convolve_1_x_n_s8(ctx,
   1a0da:	9b01      	ldr	r3, [sp, #4]
   1a0dc:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
   1a0e0:	9b00      	ldr	r3, [sp, #0]
   1a0e2:	930c      	str	r3, [sp, #48]	; 0x30
   1a0e4:	4642      	mov	r2, r8
   1a0e6:	462b      	mov	r3, r5
   1a0e8:	4621      	mov	r1, r4
   1a0ea:	4670      	mov	r0, lr
   1a0ec:	e9cd c911 	strd	ip, r9, [sp, #68]	; 0x44
   1a0f0:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   1a0f4:	b003      	add	sp, #12
   1a0f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
   1a0fa:	f000 bd6d 	b.w	1abd8 <arm_convolve_1_x_n_s8>
        return arm_convolve_s8(ctx,
   1a0fe:	9b01      	ldr	r3, [sp, #4]
   1a100:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
   1a104:	9b00      	ldr	r3, [sp, #0]
   1a106:	930c      	str	r3, [sp, #48]	; 0x30
   1a108:	4642      	mov	r2, r8
   1a10a:	462b      	mov	r3, r5
   1a10c:	4621      	mov	r1, r4
   1a10e:	4670      	mov	r0, lr
   1a110:	e9cd c911 	strd	ip, r9, [sp, #68]	; 0x44
   1a114:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   1a118:	b003      	add	sp, #12
   1a11a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
   1a11e:	f000 bda6 	b.w	1ac6e <arm_convolve_s8>

0001a122 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
   1a122:	b410      	push	{r4}
   1a124:	4604      	mov	r4, r0
   1a126:	4608      	mov	r0, r1
   1a128:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   1a12a:	6922      	ldr	r2, [r4, #16]
   1a12c:	b9a2      	cbnz	r2, 1a158 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   1a12e:	6962      	ldr	r2, [r4, #20]
   1a130:	b992      	cbnz	r2, 1a158 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   1a132:	68c2      	ldr	r2, [r0, #12]
   1a134:	0792      	lsls	r2, r2, #30
   1a136:	d10f      	bne.n	1a158 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   1a138:	68a2      	ldr	r2, [r4, #8]
   1a13a:	2a01      	cmp	r2, #1
   1a13c:	d10c      	bne.n	1a158 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   1a13e:	68e2      	ldr	r2, [r4, #12]
   1a140:	2a01      	cmp	r2, #1
   1a142:	d109      	bne.n	1a158 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   1a144:	688a      	ldr	r2, [r1, #8]
   1a146:	2a01      	cmp	r2, #1
   1a148:	d106      	bne.n	1a158 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   1a14a:	684a      	ldr	r2, [r1, #4]
   1a14c:	2a01      	cmp	r2, #1
   1a14e:	d103      	bne.n	1a158 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    }
}
   1a150:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
   1a154:	f000 bd89 	b.w	1ac6a <arm_convolve_1x1_s8_fast_get_buffer_size>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   1a158:	685a      	ldr	r2, [r3, #4]
   1a15a:	2a01      	cmp	r2, #1
   1a15c:	d10f      	bne.n	1a17e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   1a15e:	6842      	ldr	r2, [r0, #4]
   1a160:	2a01      	cmp	r2, #1
   1a162:	d10c      	bne.n	1a17e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   1a164:	684a      	ldr	r2, [r1, #4]
   1a166:	2a01      	cmp	r2, #1
   1a168:	d109      	bne.n	1a17e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   1a16a:	689b      	ldr	r3, [r3, #8]
   1a16c:	079b      	lsls	r3, r3, #30
   1a16e:	d106      	bne.n	1a17e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   1a170:	6803      	ldr	r3, [r0, #0]
   1a172:	2b01      	cmp	r3, #1
   1a174:	d103      	bne.n	1a17e <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
}
   1a176:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
   1a17a:	f000 bd3e 	b.w	1abfa <arm_convolve_1_x_n_s8_get_buffer_size>
}
   1a17e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   1a182:	f000 bef7 	b.w	1af74 <arm_convolve_s8_get_buffer_size>

0001a186 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
   1a186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a18a:	b08a      	sub	sp, #40	; 0x28
   1a18c:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
   1a190:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
   1a194:	681d      	ldr	r5, [r3, #0]
{
   1a196:	460c      	mov	r4, r1
   1a198:	4616      	mov	r6, r2

    while (batch_cnt)
   1a19a:	b91d      	cbnz	r5, 1a1a4 <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
   1a19c:	4628      	mov	r0, r5
   1a19e:	b00a      	add	sp, #40	; 0x28
   1a1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
   1a1a4:	6923      	ldr	r3, [r4, #16]
   1a1a6:	9308      	str	r3, [sp, #32]
   1a1a8:	68e3      	ldr	r3, [r4, #12]
   1a1aa:	9307      	str	r3, [sp, #28]
   1a1ac:	f8da 300c 	ldr.w	r3, [sl, #12]
   1a1b0:	9306      	str	r3, [sp, #24]
   1a1b2:	f8d9 3000 	ldr.w	r3, [r9]
   1a1b6:	9305      	str	r3, [sp, #20]
   1a1b8:	6873      	ldr	r3, [r6, #4]
   1a1ba:	9304      	str	r3, [sp, #16]
   1a1bc:	6833      	ldr	r3, [r6, #0]
   1a1be:	9303      	str	r3, [sp, #12]
   1a1c0:	68a3      	ldr	r3, [r4, #8]
   1a1c2:	9302      	str	r3, [sp, #8]
   1a1c4:	6863      	ldr	r3, [r4, #4]
   1a1c6:	9301      	str	r3, [sp, #4]
   1a1c8:	6823      	ldr	r3, [r4, #0]
   1a1ca:	9300      	str	r3, [sp, #0]
   1a1cc:	4638      	mov	r0, r7
   1a1ce:	4643      	mov	r3, r8
   1a1d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a1d2:	9914      	ldr	r1, [sp, #80]	; 0x50
   1a1d4:	f000 f80a 	bl	1a1ec <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
   1a1d8:	f8d9 3000 	ldr.w	r3, [r9]
   1a1dc:	441f      	add	r7, r3
        output += output_dims->c;
   1a1de:	f8da 300c 	ldr.w	r3, [sl, #12]
        batch_cnt--;
   1a1e2:	3d01      	subs	r5, #1
        output += output_dims->c;
   1a1e4:	4498      	add	r8, r3
        batch_cnt--;
   1a1e6:	e7d8      	b.n	1a19a <arm_fully_connected_s8+0x14>

0001a1e8 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
   1a1e8:	2000      	movs	r0, #0
   1a1ea:	4770      	bx	lr

0001a1ec <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
   1a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1f0:	b095      	sub	sp, #84	; 0x54
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   1a1f2:	9c22      	ldr	r4, [sp, #136]	; 0x88
{
   1a1f4:	9001      	str	r0, [sp, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a1f6:	9822      	ldr	r0, [sp, #136]	; 0x88
   1a1f8:	9308      	str	r3, [sp, #32]
   1a1fa:	2c00      	cmp	r4, #0
   1a1fc:	f1c0 0000 	rsb	r0, r0, #0
   1a200:	bfc8      	it	gt
   1a202:	2000      	movgt	r0, #0
   1a204:	9004      	str	r0, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a206:	9c04      	ldr	r4, [sp, #16]
   1a208:	910c      	str	r1, [sp, #48]	; 0x30
   1a20a:	2001      	movs	r0, #1
   1a20c:	40a0      	lsls	r0, r4
   1a20e:	3801      	subs	r0, #1
   1a210:	9005      	str	r0, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   1a212:	1040      	asrs	r0, r0, #1
   1a214:	9006      	str	r0, [sp, #24]
        threshold++;
   1a216:	3001      	adds	r0, #1
   1a218:	9009      	str	r0, [sp, #36]	; 0x24
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
   1a21a:	9823      	ldr	r0, [sp, #140]	; 0x8c
   1a21c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   1a21e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        rhs += 2 * rhs_cols;
   1a220:	0040      	lsls	r0, r0, #1
   1a222:	900a      	str	r0, [sp, #40]	; 0x28
   1a224:	9808      	ldr	r0, [sp, #32]
   1a226:	3002      	adds	r0, #2
   1a228:	9002      	str	r0, [sp, #8]
   1a22a:	9823      	ldr	r0, [sp, #140]	; 0x8c
   1a22c:	0900      	lsrs	r0, r0, #4
   1a22e:	900e      	str	r0, [sp, #56]	; 0x38
   1a230:	9823      	ldr	r0, [sp, #140]	; 0x8c
   1a232:	2c00      	cmp	r4, #0
   1a234:	f020 000f 	bic.w	r0, r0, #15
   1a238:	bfb8      	it	lt
   1a23a:	2000      	movlt	r0, #0
   1a23c:	9007      	str	r0, [sp, #28]
   1a23e:	9c07      	ldr	r4, [sp, #28]
   1a240:	9801      	ldr	r0, [sp, #4]
   1a242:	4420      	add	r0, r4
   1a244:	900b      	str	r0, [sp, #44]	; 0x2c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1a246:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a248:	9003      	str	r0, [sp, #12]
   1a24a:	9824      	ldr	r0, [sp, #144]	; 0x90
   1a24c:	3801      	subs	r0, #1
   1a24e:	900f      	str	r0, [sp, #60]	; 0x3c
   1a250:	9808      	ldr	r0, [sp, #32]
   1a252:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   1a256:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   1a25a:	30fe      	adds	r0, #254	; 0xfe
   1a25c:	9010      	str	r0, [sp, #64]	; 0x40
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1a25e:	9823      	ldr	r0, [sp, #140]	; 0x8c
   1a260:	380f      	subs	r0, #15
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   1a262:	b219      	sxth	r1, r3
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   1a264:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1a266:	9011      	str	r0, [sp, #68]	; 0x44
   1a268:	1e60      	subs	r0, r4, #1
   1a26a:	9012      	str	r0, [sp, #72]	; 0x48
   1a26c:	9801      	ldr	r0, [sp, #4]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   1a26e:	eac1 4101 	pkhbt	r1, r1, r1, lsl #16
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   1a272:	4240      	negs	r0, r0
   1a274:	9013      	str	r0, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a276:	9822      	ldr	r0, [sp, #136]	; 0x88
   1a278:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1a27c:	900d      	str	r0, [sp, #52]	; 0x34
   1a27e:	b21b      	sxth	r3, r3
   1a280:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1a284:	9c02      	ldr	r4, [sp, #8]
   1a286:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a288:	4420      	add	r0, r4
   1a28a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1a28c:	4284      	cmp	r4, r0
   1a28e:	dc66      	bgt.n	1a35e <arm_nn_vec_mat_mult_t_s8+0x172>
   1a290:	9c24      	ldr	r4, [sp, #144]	; 0x90
   1a292:	9824      	ldr	r0, [sp, #144]	; 0x90
   1a294:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a296:	2c00      	cmp	r4, #0
   1a298:	ea4f 0050 	mov.w	r0, r0, lsr #1
   1a29c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1a29e:	bfac      	ite	ge
   1a2a0:	4684      	movge	ip, r0
   1a2a2:	f04f 0c00 	movlt.w	ip, #0
   1a2a6:	fb05 4c0c 	mla	ip, r5, ip, r4
   1a2aa:	9c08      	ldr	r4, [sp, #32]
   1a2ac:	ea4f 0040 	mov.w	r0, r0, lsl #1
   1a2b0:	bfb8      	it	lt
   1a2b2:	2000      	movlt	r0, #0
   1a2b4:	4404      	add	r4, r0
   1a2b6:	4620      	mov	r0, r4
    }

    if (rhs_rows % 2)
   1a2b8:	9c24      	ldr	r4, [sp, #144]	; 0x90
   1a2ba:	07e4      	lsls	r4, r4, #31
   1a2bc:	d54b      	bpl.n	1a356 <arm_nn_vec_mat_mult_t_s8+0x16a>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = 0;
        if (bias)
   1a2be:	b102      	cbz	r2, 1a2c2 <arm_nn_vec_mat_mult_t_s8+0xd6>
        {
            res00 = *bias++;
   1a2c0:	6812      	ldr	r2, [r2, #0]
        }

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1a2c2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
        q31_t res00 = 0;
   1a2c4:	2500      	movs	r5, #0
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1a2c6:	f1a4 090f 	sub.w	r9, r4, #15
   1a2ca:	9c01      	ldr	r4, [sp, #4]
   1a2cc:	45a9      	cmp	r9, r5
   1a2ce:	eb04 0805 	add.w	r8, r4, r5
   1a2d2:	eb0c 0e05 	add.w	lr, ip, r5
   1a2d6:	f300 814b 	bgt.w	1a570 <arm_nn_vec_mat_mult_t_s8+0x384>
   1a2da:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1a2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a2de:	2900      	cmp	r1, #0
   1a2e0:	9907      	ldr	r1, [sp, #28]
   1a2e2:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   1a2e6:	448c      	add	ip, r1
   1a2e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a2ea:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1a2ee:	bfb8      	it	lt
   1a2f0:	2300      	movlt	r3, #0
   1a2f2:	1a5b      	subs	r3, r3, r1
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1a2f4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
   1a2f6:	18cc      	adds	r4, r1, r3
   1a2f8:	42a5      	cmp	r5, r4
   1a2fa:	f300 818b 	bgt.w	1a614 <arm_nn_vec_mat_mult_t_s8+0x428>
   1a2fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a300:	9d21      	ldr	r5, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a302:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a306:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a308:	2300      	movs	r3, #0
   1a30a:	461c      	mov	r4, r3
   1a30c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1a310:	fbc2 1405 	smlal	r1, r4, r2, r5
    result = (int32_t)(mult.long_long >> 31);
   1a314:	0fca      	lsrs	r2, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a316:	9922      	ldr	r1, [sp, #136]	; 0x88
   1a318:	4299      	cmp	r1, r3
   1a31a:	bfdc      	itt	le
   1a31c:	460b      	movle	r3, r1
   1a31e:	425b      	negle	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a320:	2101      	movs	r1, #1
   1a322:	4099      	lsls	r1, r3
    result = (int32_t)(mult.long_long >> 31);
   1a324:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a328:	3901      	subs	r1, #1
    if (result < 0)
   1a32a:	fa52 f303 	asrs.w	r3, r2, r3
    int32_t remainder = remainder_mask & dividend;
   1a32e:	ea02 0401 	and.w	r4, r2, r1
    q31_t threshold = remainder_mask >> 1;
   1a332:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1a336:	bf48      	it	mi
   1a338:	3101      	addmi	r1, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
   1a33a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    if (remainder > threshold)
   1a33c:	428c      	cmp	r4, r1
        result++;
   1a33e:	bfc8      	it	gt
   1a340:	3301      	addgt	r3, #1
   1a342:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
   1a344:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1a346:	4293      	cmp	r3, r2
   1a348:	bfb8      	it	lt
   1a34a:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
   1a34c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1a34e:	4293      	cmp	r3, r2
   1a350:	bfa8      	it	ge
   1a352:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
   1a354:	7003      	strb	r3, [r0, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
   1a356:	2000      	movs	r0, #0
   1a358:	b015      	add	sp, #84	; 0x54
   1a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
   1a35e:	2a00      	cmp	r2, #0
   1a360:	d06c      	beq.n	1a43c <arm_nn_vec_mat_mult_t_s8+0x250>
            res00 = *bias++;
   1a362:	4615      	mov	r5, r2
            res01 = *bias++;
   1a364:	6850      	ldr	r0, [r2, #4]
            res00 = *bias++;
   1a366:	f855 4b08 	ldr.w	r4, [r5], #8
            res01 = *bias++;
   1a36a:	462a      	mov	r2, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1a36c:	9d03      	ldr	r5, [sp, #12]
   1a36e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
        int32_t rhs_cols_idx = 0;
   1a370:	f04f 0c00 	mov.w	ip, #0
   1a374:	19af      	adds	r7, r5, r6
   1a376:	9d01      	ldr	r5, [sp, #4]
   1a378:	eb05 080c 	add.w	r8, r5, ip
   1a37c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
   1a37e:	eba7 0e05 	sub.w	lr, r7, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1a382:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1a384:	4565      	cmp	r5, ip
   1a386:	dc5c      	bgt.n	1a442 <arm_nn_vec_mat_mult_t_s8+0x256>
   1a388:	9d03      	ldr	r5, [sp, #12]
   1a38a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1a38c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   1a390:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1a392:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   1a394:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   1a396:	4475      	add	r5, lr
   1a398:	42ae      	cmp	r6, r5
   1a39a:	f300 80d7 	bgt.w	1a54c <arm_nn_vec_mat_mult_t_s8+0x360>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a39e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a3a0:	9f21      	ldr	r7, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a3a2:	40ac      	lsls	r4, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a3a4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   1a3a8:	2500      	movs	r5, #0
   1a3aa:	fbc4 6507 	smlal	r6, r5, r4, r7
    result = (int32_t)(mult.long_long >> 31);
   1a3ae:	0ff4      	lsrs	r4, r6, #31
   1a3b0:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1a3b4:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
   1a3b6:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   1a3b8:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
   1a3ba:	4025      	ands	r5, r4
    q31_t threshold = remainder_mask >> 1;
   1a3bc:	4134      	asrs	r4, r6
   1a3be:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1a3c0:	bf58      	it	pl
   1a3c2:	463e      	movpl	r6, r7
    if (remainder > threshold)
   1a3c4:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a3c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a3c8:	9f21      	ldr	r7, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a3ca:	fa00 f605 	lsl.w	r6, r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a3ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1a3d2:	f04f 0500 	mov.w	r5, #0
   1a3d6:	fbc6 0507 	smlal	r0, r5, r6, r7
    result = (int32_t)(mult.long_long >> 31);
   1a3da:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   1a3de:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1a3e2:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
   1a3e4:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   1a3e6:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
   1a3e8:	ea00 0505 	and.w	r5, r0, r5
        result++;
   1a3ec:	bfc8      	it	gt
   1a3ee:	3401      	addgt	r4, #1
    q31_t threshold = remainder_mask >> 1;
   1a3f0:	4130      	asrs	r0, r6
   1a3f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1a3f4:	bf58      	it	pl
   1a3f6:	463e      	movpl	r6, r7
    if (remainder > threshold)
   1a3f8:	42b5      	cmp	r5, r6
        res00 += dst_offset;
   1a3fa:	9d20      	ldr	r5, [sp, #128]	; 0x80
        result++;
   1a3fc:	bfc8      	it	gt
   1a3fe:	3001      	addgt	r0, #1
   1a400:	442c      	add	r4, r5
        res01 += dst_offset;
   1a402:	4428      	add	r0, r5
        res00 = MAX(res00, activation_min);
   1a404:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1a406:	42ac      	cmp	r4, r5
   1a408:	bfb8      	it	lt
   1a40a:	462c      	movlt	r4, r5
        res01 = MAX(res01, activation_min);
   1a40c:	42a8      	cmp	r0, r5
   1a40e:	bfb8      	it	lt
   1a410:	4628      	movlt	r0, r5
        res00 = MIN(res00, activation_max);
   1a412:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1a414:	42ac      	cmp	r4, r5
   1a416:	bfa8      	it	ge
   1a418:	462c      	movge	r4, r5
        *dst++ = (q7_t)res00;
   1a41a:	9d02      	ldr	r5, [sp, #8]
   1a41c:	f805 4c02 	strb.w	r4, [r5, #-2]
        res01 = MIN(res01, activation_max);
   1a420:	9c26      	ldr	r4, [sp, #152]	; 0x98
   1a422:	42a0      	cmp	r0, r4
   1a424:	bfa8      	it	ge
   1a426:	4620      	movge	r0, r4
        *dst++ = (q7_t)res01;
   1a428:	f805 0c01 	strb.w	r0, [r5, #-1]
        rhs += 2 * rhs_cols;
   1a42c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a42e:	9803      	ldr	r0, [sp, #12]
   1a430:	4420      	add	r0, r4
   1a432:	9003      	str	r0, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1a434:	4628      	mov	r0, r5
   1a436:	3002      	adds	r0, #2
   1a438:	9002      	str	r0, [sp, #8]
   1a43a:	e723      	b.n	1a284 <arm_nn_vec_mat_mult_t_s8+0x98>
        q31_t res01 = 0;
   1a43c:	4610      	mov	r0, r2
        q31_t res00 = 0;
   1a43e:	4614      	mov	r4, r2
   1a440:	e794      	b.n	1a36c <arm_nn_vec_mat_mult_t_s8+0x180>
    memcpy(&val, *in_q7, 4);
   1a442:	9d01      	ldr	r5, [sp, #4]
   1a444:	f8de b000 	ldr.w	fp, [lr]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a448:	f855 500c 	ldr.w	r5, [r5, ip]
   1a44c:	fa23 f68b 	sxtab16	r6, r3, fp
   1a450:	fa21 fa85 	sxtab16	sl, r1, r5
   1a454:	f8d7 9000 	ldr.w	r9, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
   1a458:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   1a45c:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a460:	fa23 fb8b 	sxtab16	fp, r3, fp
   1a464:	fa21 f585 	sxtab16	r5, r1, r5

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a468:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a46c:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a470:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a474:	f8de b004 	ldr.w	fp, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   1a478:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a47c:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a480:	fb2a 0006 	smlad	r0, sl, r6, r0
   1a484:	fb25 0009 	smlad	r0, r5, r9, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a488:	f8d8 5004 	ldr.w	r5, [r8, #4]
   1a48c:	fa23 f68b 	sxtab16	r6, r3, fp
   1a490:	fa21 fa85 	sxtab16	sl, r1, r5
   1a494:	f8d7 9004 	ldr.w	r9, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   1a498:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   1a49c:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4a0:	fa23 fb8b 	sxtab16	fp, r3, fp
   1a4a4:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a4a8:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4ac:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a4b0:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4b4:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   1a4b8:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4bc:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a4c0:	fb2a 0606 	smlad	r6, sl, r6, r0
   1a4c4:	fb25 6609 	smlad	r6, r5, r9, r6
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4c8:	f8d8 5008 	ldr.w	r5, [r8, #8]
   1a4cc:	fa23 f08b 	sxtab16	r0, r3, fp
   1a4d0:	fa21 f985 	sxtab16	r9, r1, r5
   1a4d4:	f8d7 a008 	ldr.w	sl, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   1a4d8:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   1a4dc:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4e0:	fa23 fb8b 	sxtab16	fp, r3, fp
   1a4e4:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a4e8:	fb29 4400 	smlad	r4, r9, r0, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4ec:	fa23 f08a 	sxtab16	r0, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a4f0:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4f4:	f8de b00c 	ldr.w	fp, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
   1a4f8:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a4fc:	fa23 fa8a 	sxtab16	sl, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a500:	fb29 6000 	smlad	r0, r9, r0, r6
   1a504:	fb25 050a 	smlad	r5, r5, sl, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a508:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   1a50c:	fa23 f68b 	sxtab16	r6, r3, fp
   1a510:	fa21 fa8e 	sxtab16	sl, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
   1a514:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   1a518:	f8d7 800c 	ldr.w	r8, [r7, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a51c:	fa23 f98b 	sxtab16	r9, r3, fp
  return (op1 >> op2) | (op1 << (32U - op2));
   1a520:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a524:	fa21 fe8e 	sxtab16	lr, r1, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a528:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a52c:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a530:	fb2e 4409 	smlad	r4, lr, r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
   1a534:	ea4f 2038 	mov.w	r0, r8, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a538:	fa23 f080 	sxtab16	r0, r3, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a53c:	fb2a 550b 	smlad	r5, sl, fp, r5
   1a540:	fb2e 5000 	smlad	r0, lr, r0, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1a544:	f10c 0c10 	add.w	ip, ip, #16
   1a548:	3710      	adds	r7, #16
   1a54a:	e714      	b.n	1a376 <arm_nn_vec_mat_mult_t_s8+0x18a>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1a54c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   1a54e:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   1a552:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1a556:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   1a558:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   1a55a:	44b4      	add	ip, r6
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   1a55c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
            res00 += lhs_value * rhs_value0;
   1a55e:	fb05 440c 	mla	r4, r5, ip, r4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   1a562:	f917 c006 	ldrsb.w	ip, [r7, r6]
   1a566:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   1a568:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
   1a56a:	fb05 000c 	mla	r0, r5, ip, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1a56e:	e710      	b.n	1a392 <arm_nn_vec_mat_mult_t_s8+0x1a6>
   1a570:	9c01      	ldr	r4, [sp, #4]
   1a572:	f85c 7005 	ldr.w	r7, [ip, r5]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a576:	5966      	ldr	r6, [r4, r5]
   1a578:	fa23 fb87 	sxtab16	fp, r3, r7
   1a57c:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   1a580:	ea4f 2737 	mov.w	r7, r7, ror #8
   1a584:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a588:	fa23 f787 	sxtab16	r7, r3, r7
   1a58c:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a590:	fb2a 220b 	smlad	r2, sl, fp, r2
   1a594:	fb26 2207 	smlad	r2, r6, r7, r2
   1a598:	f8de 4004 	ldr.w	r4, [lr, #4]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a59c:	f8d8 6004 	ldr.w	r6, [r8, #4]
   1a5a0:	fa23 fb84 	sxtab16	fp, r3, r4
   1a5a4:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   1a5a8:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a5ac:	fa23 f784 	sxtab16	r7, r3, r4
  return (op1 >> op2) | (op1 << (32U - op2));
   1a5b0:	ea4f 2436 	mov.w	r4, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a5b4:	fa21 f484 	sxtab16	r4, r1, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a5b8:	fb2a 220b 	smlad	r2, sl, fp, r2
   1a5bc:	fb24 2407 	smlad	r4, r4, r7, r2
   1a5c0:	f8de 7008 	ldr.w	r7, [lr, #8]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a5c4:	f8d8 6008 	ldr.w	r6, [r8, #8]
   1a5c8:	fa23 fb87 	sxtab16	fp, r3, r7
   1a5cc:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   1a5d0:	ea4f 2737 	mov.w	r7, r7, ror #8
   1a5d4:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a5d8:	fa23 f787 	sxtab16	r7, r3, r7
   1a5dc:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a5e0:	fb2a 440b 	smlad	r4, sl, fp, r4
   1a5e4:	fb26 4607 	smlad	r6, r6, r7, r4
   1a5e8:	f8de 200c 	ldr.w	r2, [lr, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a5ec:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   1a5f0:	fa23 f482 	sxtab16	r4, r3, r2
   1a5f4:	fa21 f78e 	sxtab16	r7, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
   1a5f8:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a5fc:	fa23 f882 	sxtab16	r8, r3, r2
  return (op1 >> op2) | (op1 << (32U - op2));
   1a600:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a604:	fa21 f282 	sxtab16	r2, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a608:	fb27 6604 	smlad	r6, r7, r4, r6
   1a60c:	fb22 6208 	smlad	r2, r2, r8, r6
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1a610:	3510      	adds	r5, #16
   1a612:	e65a      	b.n	1a2ca <arm_nn_vec_mat_mult_t_s8+0xde>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   1a614:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1a616:	f91c 4f01 	ldrsb.w	r4, [ip, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1a61a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   1a61c:	442c      	add	r4, r5
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1a61e:	f911 5b01 	ldrsb.w	r5, [r1], #1
   1a622:	4435      	add	r5, r6
            res00 += lhs_value * rhs_value0;
   1a624:	fb05 2204 	mla	r2, r5, r4, r2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1a628:	e664      	b.n	1a2f4 <arm_nn_vec_mat_mult_t_s8+0x108>

0001a62a <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
   1a62a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a62e:	b09b      	sub	sp, #108	; 0x6c
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
   1a630:	6895      	ldr	r5, [r2, #8]
{
   1a632:	9315      	str	r3, [sp, #84]	; 0x54
   1a634:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
    const int32_t input_x = input_dims->w;
   1a638:	9503      	str	r5, [sp, #12]
    const int32_t output_y = output_dims->h;
   1a63a:	6865      	ldr	r5, [r4, #4]
    const int32_t output_x = output_dims->w;
   1a63c:	68a4      	ldr	r4, [r4, #8]
   1a63e:	940d      	str	r4, [sp, #52]	; 0x34
    const int32_t stride_y = pool_params->stride.h;
   1a640:	684c      	ldr	r4, [r1, #4]
   1a642:	9404      	str	r4, [sp, #16]
    const int32_t stride_x = pool_params->stride.w;
   1a644:	680c      	ldr	r4, [r1, #0]
   1a646:	9405      	str	r4, [sp, #20]
    const int32_t kernel_y = filter_dims->h;
   1a648:	685c      	ldr	r4, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
   1a64a:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
   1a64c:	940f      	str	r4, [sp, #60]	; 0x3c
    const int32_t kernel_x = filter_dims->w;
   1a64e:	9310      	str	r3, [sp, #64]	; 0x40
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
   1a650:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
   1a654:	9306      	str	r3, [sp, #24]
    const int32_t act_min = pool_params->activation.min;
   1a656:	690b      	ldr	r3, [r1, #16]
   1a658:	9311      	str	r3, [sp, #68]	; 0x44
    const int32_t act_max = pool_params->activation.max;
   1a65a:	694b      	ldr	r3, [r1, #20]
   1a65c:	9312      	str	r3, [sp, #72]	; 0x48
    const int32_t ch_src = input_dims->c;
   1a65e:	68d3      	ldr	r3, [r2, #12]
   1a660:	6852      	ldr	r2, [r2, #4]
    q31_t *buffer = (q31_t *)ctx->buf;
   1a662:	6801      	ldr	r1, [r0, #0]
    const int32_t output_y = output_dims->h;
   1a664:	950e      	str	r5, [sp, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
   1a666:	18a2      	adds	r2, r4, r2
   1a668:	920b      	str	r2, [sp, #44]	; 0x2c
   1a66a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a66c:	9107      	str	r1, [sp, #28]

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
   1a66e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1a672:	435a      	muls	r2, r3
   1a674:	f1c4 0a00 	rsb	sl, r4, #0
   1a678:	46a1      	mov	r9, r4
   1a67a:	9213      	str	r2, [sp, #76]	; 0x4c
   1a67c:	f04f 0b00 	mov.w	fp, #0
   1a680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a682:	4593      	cmp	fp, r2
   1a684:	db03      	blt.n	1a68e <arm_avgpool_s8+0x64>
        }
    }

#endif
    return ARM_MATH_SUCCESS;
}
   1a686:	2000      	movs	r0, #0
   1a688:	b01b      	add	sp, #108	; 0x6c
   1a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   1a68e:	9a06      	ldr	r2, [sp, #24]
   1a690:	9906      	ldr	r1, [sp, #24]
   1a692:	f1ba 0f00 	cmp.w	sl, #0
   1a696:	f1c2 0500 	rsb	r5, r2, #0
   1a69a:	bfd4      	ite	le
   1a69c:	464a      	movle	r2, r9
   1a69e:	2200      	movgt	r2, #0
   1a6a0:	920c      	str	r2, [sp, #48]	; 0x30
   1a6a2:	9a06      	ldr	r2, [sp, #24]
   1a6a4:	9209      	str	r2, [sp, #36]	; 0x24
   1a6a6:	9a03      	ldr	r2, [sp, #12]
   1a6a8:	440a      	add	r2, r1
   1a6aa:	920a      	str	r2, [sp, #40]	; 0x28
   1a6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a6ae:	9903      	ldr	r1, [sp, #12]
   1a6b0:	4452      	add	r2, sl
   1a6b2:	434a      	muls	r2, r1
   1a6b4:	9214      	str	r2, [sp, #80]	; 0x50
   1a6b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1a6b8:	9200      	str	r2, [sp, #0]
   1a6ba:	2200      	movs	r2, #0
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
   1a6bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   1a6be:	9201      	str	r2, [sp, #4]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
   1a6c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a6c2:	428a      	cmp	r2, r1
   1a6c4:	bfa8      	it	ge
   1a6c6:	460a      	movge	r2, r1
   1a6c8:	9219      	str	r2, [sp, #100]	; 0x64
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   1a6ca:	9a01      	ldr	r2, [sp, #4]
   1a6cc:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a6ce:	428a      	cmp	r2, r1
   1a6d0:	db0e      	blt.n	1a6f0 <arm_avgpool_s8+0xc6>
   1a6d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1a6d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1a6d6:	440a      	add	r2, r1
   1a6d8:	9226      	str	r2, [sp, #152]	; 0x98
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
   1a6da:	9a04      	ldr	r2, [sp, #16]
   1a6dc:	9904      	ldr	r1, [sp, #16]
   1a6de:	4492      	add	sl, r2
   1a6e0:	eba9 0902 	sub.w	r9, r9, r2
   1a6e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a6e6:	1a52      	subs	r2, r2, r1
   1a6e8:	f10b 0b01 	add.w	fp, fp, #1
   1a6ec:	920b      	str	r2, [sp, #44]	; 0x2c
   1a6ee:	e7c7      	b.n	1a680 <arm_avgpool_s8+0x56>
            const int32_t kernel_x_start = MAX(0, -idx_x);
   1a6f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   1a6f2:	9910      	ldr	r1, [sp, #64]	; 0x40
            const int32_t kernel_x_start = MAX(0, -idx_x);
   1a6f4:	2d00      	cmp	r5, #0
   1a6f6:	bfd8      	it	le
   1a6f8:	4610      	movle	r0, r2
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   1a6fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            const int32_t kernel_x_start = MAX(0, -idx_x);
   1a6fc:	bfc8      	it	gt
   1a6fe:	2000      	movgt	r0, #0
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   1a700:	428a      	cmp	r2, r1
   1a702:	bfa8      	it	ge
   1a704:	460a      	movge	r2, r1
   1a706:	4696      	mov	lr, r2
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   1a708:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a70a:	9208      	str	r2, [sp, #32]
   1a70c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a70e:	9202      	str	r2, [sp, #8]
   1a710:	182a      	adds	r2, r5, r0
            int count = 0;
   1a712:	2100      	movs	r1, #0
   1a714:	9218      	str	r2, [sp, #96]	; 0x60
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   1a716:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1a718:	9c02      	ldr	r4, [sp, #8]
   1a71a:	4294      	cmp	r4, r2
   1a71c:	da38      	bge.n	1a790 <arm_avgpool_s8+0x166>
   1a71e:	9c08      	ldr	r4, [sp, #32]
   1a720:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1a722:	4422      	add	r2, r4
   1a724:	9c15      	ldr	r4, [sp, #84]	; 0x54
                    if (count == 0)
   1a726:	1a0e      	subs	r6, r1, r0
   1a728:	fb03 4202 	mla	r2, r3, r2, r4
   1a72c:	9617      	str	r6, [sp, #92]	; 0x5c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
   1a72e:	4604      	mov	r4, r0
   1a730:	e01e      	b.n	1a770 <arm_avgpool_s8+0x146>
                    if (count == 0)
   1a732:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1a734:	1936      	adds	r6, r6, r4
   1a736:	d017      	beq.n	1a768 <arm_avgpool_s8+0x13e>
   1a738:	9e07      	ldr	r6, [sp, #28]
   1a73a:	f1a6 0804 	sub.w	r8, r6, #4
                        for (int i = 0; i < ch_src; i++)
   1a73e:	2600      	movs	r6, #0
   1a740:	429e      	cmp	r6, r3
   1a742:	da13      	bge.n	1a76c <arm_avgpool_s8+0x142>
                            buffer[i] = __QADD(start[i], buffer[i]);
   1a744:	5797      	ldrsb	r7, [r2, r6]
   1a746:	46bc      	mov	ip, r7

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1a748:	f858 7f04 	ldr.w	r7, [r8, #4]!
   1a74c:	9716      	str	r7, [sp, #88]	; 0x58
   1a74e:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1a750:	fa87 f78c 	qadd	r7, ip, r7
   1a754:	f8c8 7000 	str.w	r7, [r8]
                        for (int i = 0; i < ch_src; i++)
   1a758:	3601      	adds	r6, #1
   1a75a:	e7f1      	b.n	1a740 <arm_avgpool_s8+0x116>
                            buffer[i] = start[i];
   1a75c:	9f07      	ldr	r7, [sp, #28]
   1a75e:	f912 8006 	ldrsb.w	r8, [r2, r6]
   1a762:	f847 8026 	str.w	r8, [r7, r6, lsl #2]
                        for (int i = 0; i < ch_src; i++)
   1a766:	3601      	adds	r6, #1
   1a768:	429e      	cmp	r6, r3
   1a76a:	dbf7      	blt.n	1a75c <arm_avgpool_s8+0x132>
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
   1a76c:	3401      	adds	r4, #1
   1a76e:	441a      	add	r2, r3
   1a770:	4574      	cmp	r4, lr
   1a772:	dbde      	blt.n	1a732 <arm_avgpool_s8+0x108>
   1a774:	ebae 0200 	sub.w	r2, lr, r0
   1a778:	4570      	cmp	r0, lr
   1a77a:	bfc8      	it	gt
   1a77c:	2200      	movgt	r2, #0
   1a77e:	4411      	add	r1, r2
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   1a780:	9a02      	ldr	r2, [sp, #8]
   1a782:	9c08      	ldr	r4, [sp, #32]
   1a784:	3201      	adds	r2, #1
   1a786:	9202      	str	r2, [sp, #8]
   1a788:	9a03      	ldr	r2, [sp, #12]
   1a78a:	4414      	add	r4, r2
   1a78c:	9408      	str	r4, [sp, #32]
   1a78e:	e7c2      	b.n	1a716 <arm_avgpool_s8+0xec>
    const int half_count = count / 2;
   1a790:	104c      	asrs	r4, r1, #1
    for (int i = 0; i < length; i++)
   1a792:	2000      	movs	r0, #0
   1a794:	4283      	cmp	r3, r0
   1a796:	dc0f      	bgt.n	1a7b8 <arm_avgpool_s8+0x18e>
            dst += ch_src;
   1a798:	9a00      	ldr	r2, [sp, #0]
   1a79a:	9905      	ldr	r1, [sp, #20]
   1a79c:	441a      	add	r2, r3
   1a79e:	9200      	str	r2, [sp, #0]
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   1a7a0:	9a05      	ldr	r2, [sp, #20]
   1a7a2:	4415      	add	r5, r2
   1a7a4:	9a01      	ldr	r2, [sp, #4]
   1a7a6:	3201      	adds	r2, #1
   1a7a8:	9201      	str	r2, [sp, #4]
   1a7aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a7ac:	1a52      	subs	r2, r2, r1
   1a7ae:	9209      	str	r2, [sp, #36]	; 0x24
   1a7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a7b2:	1a52      	subs	r2, r2, r1
   1a7b4:	920a      	str	r2, [sp, #40]	; 0x28
   1a7b6:	e788      	b.n	1a6ca <arm_avgpool_s8+0xa0>
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
   1a7b8:	9a07      	ldr	r2, [sp, #28]
        sum = MAX(sum, act_min);
   1a7ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
   1a7bc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   1a7c0:	2a00      	cmp	r2, #0
   1a7c2:	bfcc      	ite	gt
   1a7c4:	1912      	addgt	r2, r2, r4
   1a7c6:	1b12      	suble	r2, r2, r4
        sum = sum / count;
   1a7c8:	fb92 f2f1 	sdiv	r2, r2, r1
        sum = MAX(sum, act_min);
   1a7cc:	42b2      	cmp	r2, r6
   1a7ce:	bfb8      	it	lt
   1a7d0:	4632      	movlt	r2, r6
        sum = MIN(sum, act_max);
   1a7d2:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1a7d4:	42b2      	cmp	r2, r6
   1a7d6:	bfa8      	it	ge
   1a7d8:	4632      	movge	r2, r6
        target[i] = (q7_t)sum;
   1a7da:	9e00      	ldr	r6, [sp, #0]
   1a7dc:	5432      	strb	r2, [r6, r0]
    for (int i = 0; i < length; i++)
   1a7de:	3001      	adds	r0, #1
   1a7e0:	e7d8      	b.n	1a794 <arm_avgpool_s8+0x16a>

0001a7e2 <arm_avgpool_s8_get_buffer_size>:
    return (ch_src * sizeof(int32_t));
#else
    (void)ch_src;
    return 0;
#endif
}
   1a7e2:	0088      	lsls	r0, r1, #2
   1a7e4:	4770      	bx	lr

0001a7e6 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
   1a7e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7ea:	b0a3      	sub	sp, #140	; 0x8c
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
   1a7ec:	6894      	ldr	r4, [r2, #8]
{
   1a7ee:	931f      	str	r3, [sp, #124]	; 0x7c
   1a7f0:	e9dd 302c 	ldrd	r3, r0, [sp, #176]	; 0xb0
    const int32_t input_x = input_dims->w;
   1a7f4:	9409      	str	r4, [sp, #36]	; 0x24
    const int32_t output_y = output_dims->h;
   1a7f6:	6844      	ldr	r4, [r0, #4]
    const int32_t output_x = output_dims->w;
   1a7f8:	6880      	ldr	r0, [r0, #8]
   1a7fa:	900a      	str	r0, [sp, #40]	; 0x28
    const int32_t stride_y = pool_params->stride.h;
   1a7fc:	6848      	ldr	r0, [r1, #4]
   1a7fe:	900b      	str	r0, [sp, #44]	; 0x2c
    const int32_t stride_x = pool_params->stride.w;
   1a800:	6808      	ldr	r0, [r1, #0]
   1a802:	900c      	str	r0, [sp, #48]	; 0x30
    const int32_t kernel_y = filter_dims->h;
   1a804:	6858      	ldr	r0, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
   1a806:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
   1a808:	9017      	str	r0, [sp, #92]	; 0x5c
    const int32_t kernel_x = filter_dims->w;
   1a80a:	9318      	str	r3, [sp, #96]	; 0x60
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
   1a80c:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
   1a810:	9303      	str	r3, [sp, #12]
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
   1a812:	e9d1 9a04 	ldrd	r9, sl, [r1, #16]
    const int32_t output_y = output_dims->h;
   1a816:	9413      	str	r4, [sp, #76]	; 0x4c
    const int32_t channel_in = input_dims->c;
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   1a818:	4259      	negs	r1, r3
    const int32_t channel_in = input_dims->c;
   1a81a:	68d4      	ldr	r4, [r2, #12]
   1a81c:	6853      	ldr	r3, [r2, #4]
   1a81e:	9a03      	ldr	r2, [sp, #12]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   1a820:	9101      	str	r1, [sp, #4]
   1a822:	18d3      	adds	r3, r2, r3
   1a824:	9311      	str	r3, [sp, #68]	; 0x44
   1a826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    const int32_t pad_x = pool_params->padding.w;
   1a828:	900d      	str	r0, [sp, #52]	; 0x34
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   1a82a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    int32_t cnt = length >> 2;
   1a82e:	10a1      	asrs	r1, r4, #2
   1a830:	4363      	muls	r3, r4
   1a832:	931d      	str	r3, [sp, #116]	; 0x74
   1a834:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   1a838:	009b      	lsls	r3, r3, #2
   1a83a:	911b      	str	r1, [sp, #108]	; 0x6c
   1a83c:	9314      	str	r3, [sp, #80]	; 0x50
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   1a83e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1a840:	9304      	str	r3, [sp, #16]
   1a842:	2300      	movs	r3, #0
   1a844:	9305      	str	r3, [sp, #20]
   1a846:	9b05      	ldr	r3, [sp, #20]
   1a848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a84a:	4293      	cmp	r3, r2
   1a84c:	db17      	blt.n	1a87e <arm_max_pool_s8+0x98>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
   1a84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    while (cnt > 0l)
   1a850:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
   1a852:	435a      	muls	r2, r3
   1a854:	4354      	muls	r4, r2
    int32_t cnt = length >> 2;
   1a856:	10a1      	asrs	r1, r4, #2
   1a858:	4608      	mov	r0, r1
    while (cnt > 0l)
   1a85a:	2800      	cmp	r0, #0
   1a85c:	f300 80d6 	bgt.w	1aa0c <arm_max_pool_s8+0x226>
   1a860:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   1a862:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   1a866:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cnt = length & 0x3;
   1a86a:	f004 0403 	and.w	r4, r4, #3
   1a86e:	441c      	add	r4, r3
    while (cnt > 0l)
   1a870:	42a3      	cmp	r3, r4
   1a872:	f040 80fa 	bne.w	1aa6a <arm_max_pool_s8+0x284>

    return ARM_MATH_SUCCESS;
}
   1a876:	2000      	movs	r0, #0
   1a878:	b023      	add	sp, #140	; 0x8c
   1a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   1a87e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a882:	9e04      	ldr	r6, [sp, #16]
   1a884:	425b      	negs	r3, r3
   1a886:	9302      	str	r3, [sp, #8]
   1a888:	9b01      	ldr	r3, [sp, #4]
   1a88a:	2b00      	cmp	r3, #0
   1a88c:	9b03      	ldr	r3, [sp, #12]
   1a88e:	bfc8      	it	gt
   1a890:	2300      	movgt	r3, #0
   1a892:	9312      	str	r3, [sp, #72]	; 0x48
   1a894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a896:	930f      	str	r3, [sp, #60]	; 0x3c
   1a898:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a89a:	4413      	add	r3, r2
   1a89c:	9310      	str	r3, [sp, #64]	; 0x40
   1a89e:	9a01      	ldr	r2, [sp, #4]
   1a8a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a8a2:	4413      	add	r3, r2
   1a8a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a8a6:	4353      	muls	r3, r2
   1a8a8:	931e      	str	r3, [sp, #120]	; 0x78
   1a8aa:	2300      	movs	r3, #0
   1a8ac:	9306      	str	r3, [sp, #24]
   1a8ae:	9b06      	ldr	r3, [sp, #24]
   1a8b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a8b2:	4293      	cmp	r3, r2
   1a8b4:	db11      	blt.n	1a8da <arm_max_pool_s8+0xf4>
   1a8b6:	9b04      	ldr	r3, [sp, #16]
   1a8b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1a8ba:	4413      	add	r3, r2
   1a8bc:	9304      	str	r3, [sp, #16]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   1a8be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a8c0:	9b01      	ldr	r3, [sp, #4]
   1a8c2:	4413      	add	r3, r2
   1a8c4:	9301      	str	r3, [sp, #4]
   1a8c6:	9b05      	ldr	r3, [sp, #20]
   1a8c8:	3301      	adds	r3, #1
   1a8ca:	9305      	str	r3, [sp, #20]
   1a8cc:	9b03      	ldr	r3, [sp, #12]
   1a8ce:	1a9b      	subs	r3, r3, r2
   1a8d0:	9303      	str	r3, [sp, #12]
   1a8d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a8d4:	1a9b      	subs	r3, r3, r2
   1a8d6:	9311      	str	r3, [sp, #68]	; 0x44
   1a8d8:	e7b5      	b.n	1a846 <arm_max_pool_s8+0x60>
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   1a8da:	9b02      	ldr	r3, [sp, #8]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
   1a8dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   1a8de:	2b00      	cmp	r3, #0
   1a8e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a8e2:	bfc8      	it	gt
   1a8e4:	2300      	movgt	r3, #0
   1a8e6:	9316      	str	r3, [sp, #88]	; 0x58
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
   1a8e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a8ea:	9916      	ldr	r1, [sp, #88]	; 0x58
   1a8ec:	4293      	cmp	r3, r2
   1a8ee:	bfa8      	it	ge
   1a8f0:	4613      	movge	r3, r2
   1a8f2:	9319      	str	r3, [sp, #100]	; 0x64
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
   1a8f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1a8f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a8f8:	4293      	cmp	r3, r2
   1a8fa:	bfa8      	it	ge
   1a8fc:	4613      	movge	r3, r2
   1a8fe:	931a      	str	r3, [sp, #104]	; 0x68
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   1a900:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a902:	18f3      	adds	r3, r6, r3
   1a904:	9315      	str	r3, [sp, #84]	; 0x54
   1a906:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cnt = length & 0x3;
   1a908:	f004 0303 	and.w	r3, r4, #3
   1a90c:	18d3      	adds	r3, r2, r3
   1a90e:	9a02      	ldr	r2, [sp, #8]
   1a910:	931c      	str	r3, [sp, #112]	; 0x70
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   1a912:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1a914:	930e      	str	r3, [sp, #56]	; 0x38
   1a916:	440a      	add	r2, r1
   1a918:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a91a:	9307      	str	r3, [sp, #28]
   1a91c:	9221      	str	r2, [sp, #132]	; 0x84
            int count = 0;
   1a91e:	2300      	movs	r3, #0
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   1a920:	9a07      	ldr	r2, [sp, #28]
   1a922:	9919      	ldr	r1, [sp, #100]	; 0x64
   1a924:	428a      	cmp	r2, r1
   1a926:	da62      	bge.n	1a9ee <arm_max_pool_s8+0x208>
   1a928:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1a92a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1a92c:	1855      	adds	r5, r2, r1
   1a92e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1a930:	fb04 2505 	mla	r5, r4, r5, r2
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   1a934:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a936:	9208      	str	r2, [sp, #32]
   1a938:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a93a:	3a01      	subs	r2, #1
   1a93c:	9220      	str	r2, [sp, #128]	; 0x80
   1a93e:	e00b      	b.n	1a958 <arm_max_pool_s8+0x172>
                    if (count == 0)
   1a940:	2b00      	cmp	r3, #0
   1a942:	d150      	bne.n	1a9e6 <arm_max_pool_s8+0x200>
   1a944:	4622      	mov	r2, r4
   1a946:	4629      	mov	r1, r5
   1a948:	4630      	mov	r0, r6
   1a94a:	f001 f9c9 	bl	1bce0 <memcpy>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   1a94e:	9b08      	ldr	r3, [sp, #32]
   1a950:	3301      	adds	r3, #1
   1a952:	9308      	str	r3, [sp, #32]
   1a954:	4425      	add	r5, r4
   1a956:	2301      	movs	r3, #1
   1a958:	9a08      	ldr	r2, [sp, #32]
   1a95a:	991a      	ldr	r1, [sp, #104]	; 0x68
   1a95c:	428a      	cmp	r2, r1
   1a95e:	dbef      	blt.n	1a940 <arm_max_pool_s8+0x15a>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   1a960:	9a07      	ldr	r2, [sp, #28]
   1a962:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a964:	3201      	adds	r2, #1
   1a966:	9207      	str	r2, [sp, #28]
   1a968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a96a:	440a      	add	r2, r1
   1a96c:	920e      	str	r2, [sp, #56]	; 0x38
   1a96e:	e7d7      	b.n	1a920 <arm_max_pool_s8+0x13a>
    memcpy(&val, in_q7, 4);
   1a970:	6803      	ldr	r3, [r0, #0]
    memcpy(&val, *in_q7, 4);
   1a972:	f85e 2b04 	ldr.w	r2, [lr], #4
        if (comp_max.bytes[0] > ref_max.bytes[0])
   1a976:	fa4f fc83 	sxtb.w	ip, r3
   1a97a:	fa4f fb82 	sxtb.w	fp, r2
   1a97e:	45dc      	cmp	ip, fp
   1a980:	bfb8      	it	lt
   1a982:	46dc      	movlt	ip, fp
   1a984:	f36c 0807 	bfi	r8, ip, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
   1a988:	f342 2b07 	sbfx	fp, r2, #8, #8
   1a98c:	f343 2c07 	sbfx	ip, r3, #8, #8
   1a990:	45dc      	cmp	ip, fp
   1a992:	bfb8      	it	lt
   1a994:	46dc      	movlt	ip, fp
   1a996:	f36c 280f 	bfi	r8, ip, #8, #8
        if (comp_max.bytes[2] > ref_max.bytes[2])
   1a99a:	f342 4b07 	sbfx	fp, r2, #16, #8
   1a99e:	f343 4c07 	sbfx	ip, r3, #16, #8
   1a9a2:	45dc      	cmp	ip, fp
   1a9a4:	ea4f 6323 	mov.w	r3, r3, asr #24
   1a9a8:	ea4f 6222 	mov.w	r2, r2, asr #24
   1a9ac:	bfb8      	it	lt
   1a9ae:	46dc      	movlt	ip, fp
   1a9b0:	4293      	cmp	r3, r2
   1a9b2:	f36c 4817 	bfi	r8, ip, #16, #8
        if (comp_max.bytes[3] > ref_max.bytes[3])
   1a9b6:	bfb8      	it	lt
   1a9b8:	4613      	movlt	r3, r2
   1a9ba:	f363 681f 	bfi	r8, r3, #24, #8
   1a9be:	f840 8b04 	str.w	r8, [r0], #4
        cnt--;
   1a9c2:	3901      	subs	r1, #1
    while (cnt > 0l)
   1a9c4:	2900      	cmp	r1, #0
   1a9c6:	dcd3      	bgt.n	1a970 <arm_max_pool_s8+0x18a>
    while (cnt > 0l)
   1a9c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1a9ca:	18ea      	adds	r2, r5, r3
   1a9cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a9ce:	991c      	ldr	r1, [sp, #112]	; 0x70
   1a9d0:	428b      	cmp	r3, r1
   1a9d2:	d0bc      	beq.n	1a94e <arm_max_pool_s8+0x168>
        if (*src > *dst)
   1a9d4:	f993 0000 	ldrsb.w	r0, [r3]
   1a9d8:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
   1a9dc:	4288      	cmp	r0, r1
            *dst = *src;
   1a9de:	bfb8      	it	lt
   1a9e0:	7019      	strblt	r1, [r3, #0]
        dst++;
   1a9e2:	3301      	adds	r3, #1
        cnt--;
   1a9e4:	e7f3      	b.n	1a9ce <arm_max_pool_s8+0x1e8>
    int32_t cnt = length >> 2;
   1a9e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    const q7_t *src = target;
   1a9e8:	46ae      	mov	lr, r5
   1a9ea:	4630      	mov	r0, r6
   1a9ec:	e7ea      	b.n	1a9c4 <arm_max_pool_s8+0x1de>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   1a9ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a9f0:	9b02      	ldr	r3, [sp, #8]
   1a9f2:	4413      	add	r3, r2
   1a9f4:	9302      	str	r3, [sp, #8]
   1a9f6:	9b06      	ldr	r3, [sp, #24]
   1a9f8:	3301      	adds	r3, #1
   1a9fa:	9306      	str	r3, [sp, #24]
   1a9fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a9fe:	1a9b      	subs	r3, r3, r2
   1aa00:	930f      	str	r3, [sp, #60]	; 0x3c
   1aa02:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1aa04:	1a9b      	subs	r3, r3, r2
            dst += channel_in;
   1aa06:	4426      	add	r6, r4
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   1aa08:	9310      	str	r3, [sp, #64]	; 0x40
   1aa0a:	e750      	b.n	1a8ae <arm_max_pool_s8+0xc8>
    memcpy(&val, in_q7, 4);
   1aa0c:	682b      	ldr	r3, [r5, #0]
        in.bytes[0] = MAX(in.bytes[0], act_min);
   1aa0e:	b25a      	sxtb	r2, r3
   1aa10:	454a      	cmp	r2, r9
   1aa12:	bfb8      	it	lt
   1aa14:	464a      	movlt	r2, r9
        in.bytes[0] = MIN(in.bytes[0], act_max);
   1aa16:	b252      	sxtb	r2, r2
   1aa18:	4552      	cmp	r2, sl
   1aa1a:	bfa8      	it	ge
   1aa1c:	4652      	movge	r2, sl
   1aa1e:	f362 0707 	bfi	r7, r2, #0, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
   1aa22:	f343 2207 	sbfx	r2, r3, #8, #8
   1aa26:	454a      	cmp	r2, r9
   1aa28:	bfb8      	it	lt
   1aa2a:	464a      	movlt	r2, r9
        in.bytes[1] = MIN(in.bytes[1], act_max);
   1aa2c:	b252      	sxtb	r2, r2
   1aa2e:	4552      	cmp	r2, sl
   1aa30:	bfa8      	it	ge
   1aa32:	4652      	movge	r2, sl
   1aa34:	f362 270f 	bfi	r7, r2, #8, #8
        in.bytes[2] = MAX(in.bytes[2], act_min);
   1aa38:	f343 4207 	sbfx	r2, r3, #16, #8
   1aa3c:	454a      	cmp	r2, r9
   1aa3e:	bfb8      	it	lt
   1aa40:	464a      	movlt	r2, r9
        in.bytes[2] = MIN(in.bytes[2], act_max);
   1aa42:	b252      	sxtb	r2, r2
        in.bytes[3] = MAX(in.bytes[3], act_min);
   1aa44:	161b      	asrs	r3, r3, #24
        in.bytes[2] = MIN(in.bytes[2], act_max);
   1aa46:	4552      	cmp	r2, sl
   1aa48:	bfa8      	it	ge
   1aa4a:	4652      	movge	r2, sl
        in.bytes[3] = MAX(in.bytes[3], act_min);
   1aa4c:	454b      	cmp	r3, r9
   1aa4e:	bfb8      	it	lt
   1aa50:	464b      	movlt	r3, r9
        in.bytes[3] = MIN(in.bytes[3], act_max);
   1aa52:	b25b      	sxtb	r3, r3
   1aa54:	4553      	cmp	r3, sl
        in.bytes[2] = MIN(in.bytes[2], act_max);
   1aa56:	f362 4717 	bfi	r7, r2, #16, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
   1aa5a:	bfa8      	it	ge
   1aa5c:	4653      	movge	r3, sl
   1aa5e:	f363 671f 	bfi	r7, r3, #24, #8
   1aa62:	f845 7b04 	str.w	r7, [r5], #4
        cnt--;
   1aa66:	3801      	subs	r0, #1
   1aa68:	e6f7      	b.n	1a85a <arm_max_pool_s8+0x74>
        int32_t comp = *source;
   1aa6a:	f993 2000 	ldrsb.w	r2, [r3]
        comp = MAX(comp, act_min);
   1aa6e:	454a      	cmp	r2, r9
   1aa70:	bfb8      	it	lt
   1aa72:	464a      	movlt	r2, r9
        comp = MIN(comp, act_max);
   1aa74:	4552      	cmp	r2, sl
   1aa76:	bfa8      	it	ge
   1aa78:	4652      	movge	r2, sl
        *source++ = (int8_t)comp;
   1aa7a:	f803 2b01 	strb.w	r2, [r3], #1
        cnt--;
   1aa7e:	e6f7      	b.n	1a870 <arm_max_pool_s8+0x8a>

0001aa80 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   1aa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   1aa84:	2401      	movs	r4, #1
                         int total_signed_bits) {
   1aa86:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   1aa88:	fa04 f000 	lsl.w	r0, r4, r0
   1aa8c:	3801      	subs	r0, #1
                         int total_signed_bits) {
   1aa8e:	4688      	mov	r8, r1
   1aa90:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   1aa92:	f7e5 fcd7 	bl	444 <__aeabi_i2d>
   1aa96:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   1aa98:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   1aa9c:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   1aa9e:	f1c0 0320 	rsb	r3, r0, #32
   1aaa2:	f1a0 0120 	sub.w	r1, r0, #32
   1aaa6:	fa24 f303 	lsr.w	r3, r4, r3
   1aaaa:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   1aaae:	fa04 f000 	lsl.w	r0, r4, r0
   1aab2:	4319      	orrs	r1, r3
   1aab4:	f7e5 fd02 	bl	4bc <__aeabi_l2d>
   1aab8:	4602      	mov	r2, r0
   1aaba:	460b      	mov	r3, r1
   1aabc:	4630      	mov	r0, r6
   1aabe:	4639      	mov	r1, r7
   1aac0:	f7e5 fd2a 	bl	518 <__aeabi_dmul>
      (1ll << input_left_shift);
   1aac4:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   1aac8:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   1aaca:	f1a8 0120 	sub.w	r1, r8, #32
   1aace:	fa24 f303 	lsr.w	r3, r4, r3
   1aad2:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   1aad6:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   1aad8:	4319      	orrs	r1, r3
   1aada:	fa04 f008 	lsl.w	r0, r4, r8
   1aade:	f7e5 fced 	bl	4bc <__aeabi_l2d>
   1aae2:	4602      	mov	r2, r0
   1aae4:	460b      	mov	r3, r1
  const double max_input_rescaled =
   1aae6:	4630      	mov	r0, r6
   1aae8:	4639      	mov	r1, r7
   1aaea:	f7e5 fe3f 	bl	76c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   1aaee:	ec41 0b10 	vmov	d0, r0, r1
   1aaf2:	f7e8 fa99 	bl	3028 <floor>
   1aaf6:	ec51 0b10 	vmov	r0, r1, d0
   1aafa:	f7e6 f8b5 	bl	c68 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   1aafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ab02 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   1ab02:	edd0 7a00 	vldr	s15, [r0]
   1ab06:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   1ab0a:	b510      	push	{r4, lr}
   1ab0c:	4604      	mov	r4, r0
   1ab0e:	ee17 0a90 	vmov	r0, s15
   1ab12:	f7e5 fca9 	bl	468 <__aeabi_f2d>
   1ab16:	ec41 0b10 	vmov	d0, r0, r1
   1ab1a:	f7fa fc29 	bl	15370 <round>
   1ab1e:	ec51 0b10 	vmov	r0, r1, d0
   1ab22:	f7e5 ff93 	bl	a4c <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   1ab26:	ee07 0a90 	vmov	s15, r0
   1ab2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1ab2e:	6863      	ldr	r3, [r4, #4]
   1ab30:	ee17 0a90 	vmov	r0, s15
  };
   1ab34:	4418      	add	r0, r3
   1ab36:	bd10      	pop	{r4, pc}

0001ab38 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
  if (context->tensors != nullptr) {
   1ab38:	6883      	ldr	r3, [r0, #8]
                                      int tensor_index) {
   1ab3a:	b410      	push	{r4}
  if (context->tensors != nullptr) {
   1ab3c:	b91b      	cbnz	r3, 1ab46 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0xe>
    return context->GetTensor(context, tensor_index);
   1ab3e:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
   1ab40:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
   1ab44:	4718      	bx	r3
    return &context->tensors[tensor_index];
   1ab46:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   1ab4a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ab4e:	4770      	bx	lr

0001ab50 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
  if (index >= 0 && index < max_size) {
   1ab50:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   1ab52:	f851 3b04 	ldr.w	r3, [r1], #4
  if (index >= 0 && index < max_size) {
   1ab56:	db07      	blt.n	1ab68 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
   1ab58:	4293      	cmp	r3, r2
   1ab5a:	dd05      	ble.n	1ab68 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
    const int tensor_index = tensor_indices[index];
   1ab5c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
   1ab60:	2900      	cmp	r1, #0
   1ab62:	db01      	blt.n	1ab68 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
  return GetTensorAtIndex(context, tensor_index);
   1ab64:	f7ff bfe8 	b.w	1ab38 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   1ab68:	2000      	movs	r0, #0
   1ab6a:	4770      	bx	lr

0001ab6c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
   1ab6c:	6809      	ldr	r1, [r1, #0]
   1ab6e:	f7ff bfef 	b.w	1ab50 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

0001ab72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
   1ab72:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
   1ab74:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   1ab76:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   1ab7a:	db07      	blt.n	1ab8c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
   1ab7c:	4291      	cmp	r1, r2
   1ab7e:	dd05      	ble.n	1ab8c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
    const int tensor_index = tensor_indices[index];
   1ab80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   1ab84:	2900      	cmp	r1, #0
   1ab86:	db01      	blt.n	1ab8c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
  return GetTensorAtIndex(context, tensor_index);
   1ab88:	f7ff bfd6 	b.w	1ab38 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   1ab8c:	2000      	movs	r0, #0
   1ab8e:	4770      	bx	lr

0001ab90 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
   1ab90:	6809      	ldr	r1, [r1, #0]
   1ab92:	f7ff bfdd 	b.w	1ab50 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

0001ab96 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
   1ab96:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab98:	468c      	mov	ip, r1
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
   1ab9a:	2500      	movs	r5, #0
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
   1ab9c:	1c96      	adds	r6, r2, #2
  for (i = 0; i < bitRevLen; )
   1ab9e:	45ac      	cmp	ip, r5
   1aba0:	d800      	bhi.n	1aba4 <arm_bitreversal_32+0xe>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
   1aba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a = pBitRevTab[i    ] >> 2;
   1aba4:	f832 4015 	ldrh.w	r4, [r2, r5, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
   1aba8:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
     a = pBitRevTab[i    ] >> 2;
   1abac:	08a4      	lsrs	r4, r4, #2
     b = pBitRevTab[i + 1] >> 2;
   1abae:	089b      	lsrs	r3, r3, #2
     tmp = pSrc[a];
   1abb0:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a] = pSrc[b];
   1abb4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   1abb8:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b] = tmp;
   1abbc:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
     tmp = pSrc[a+1];
   1abc0:	3401      	adds	r4, #1
     pSrc[a+1] = pSrc[b+1];
   1abc2:	3301      	adds	r3, #1
     tmp = pSrc[a+1];
   1abc4:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
   1abc8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   1abcc:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
    i += 2;
   1abd0:	3502      	adds	r5, #2
     pSrc[b+1] = tmp;
   1abd2:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    i += 2;
   1abd6:	e7e2      	b.n	1ab9e <arm_bitreversal_32+0x8>

0001abd8 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
   1abd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1abdc:	e9dd 840b 	ldrd	r8, r4, [sp, #44]	; 0x2c
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
   1abe0:	68a5      	ldr	r5, [r4, #8]
   1abe2:	07ac      	lsls	r4, r5, #30
{
   1abe4:	e9dd 7e09 	ldrd	r7, lr, [sp, #36]	; 0x24
    if (output_dims->w % 4 != 0)
   1abe8:	d103      	bne.n	1abf2 <arm_convolve_1_x_n_s8+0x1a>
#endif

out:
    /* Return to application */
    return status;
}
   1abea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status = arm_convolve_s8(ctx,
   1abee:	f000 b83e 	b.w	1ac6e <arm_convolve_s8>
}
   1abf2:	f06f 0002 	mvn.w	r0, #2
   1abf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001abfa <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1abfa:	688b      	ldr	r3, [r1, #8]
   1abfc:	68c0      	ldr	r0, [r0, #12]
   1abfe:	4358      	muls	r0, r3
   1ac00:	684b      	ldr	r3, [r1, #4]
   1ac02:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   1ac04:	0080      	lsls	r0, r0, #2
   1ac06:	4770      	bx	lr

0001ac08 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
   1ac08:	b530      	push	{r4, r5, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   1ac0a:	68d8      	ldr	r0, [r3, #12]
   1ac0c:	0784      	lsls	r4, r0, #30
{
   1ac0e:	b08b      	sub	sp, #44	; 0x2c
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   1ac10:	d128      	bne.n	1ac64 <arm_convolve_1x1_s8_fast+0x5c>
   1ac12:	690c      	ldr	r4, [r1, #16]
   1ac14:	bb34      	cbnz	r4, 1ac64 <arm_convolve_1x1_s8_fast+0x5c>
   1ac16:	694c      	ldr	r4, [r1, #20]
   1ac18:	bb24      	cbnz	r4, 1ac64 <arm_convolve_1x1_s8_fast+0x5c>
   1ac1a:	688d      	ldr	r5, [r1, #8]
   1ac1c:	2d01      	cmp	r5, #1
   1ac1e:	d121      	bne.n	1ac64 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
   1ac20:	68cd      	ldr	r5, [r1, #12]
   1ac22:	2d01      	cmp	r5, #1
   1ac24:	d11e      	bne.n	1ac64 <arm_convolve_1x1_s8_fast+0x5c>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
   1ac26:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1ac28:	9508      	str	r5, [sp, #32]
   1ac2a:	6a0d      	ldr	r5, [r1, #32]
   1ac2c:	9507      	str	r5, [sp, #28]
   1ac2e:	684d      	ldr	r5, [r1, #4]
   1ac30:	9506      	str	r5, [sp, #24]
   1ac32:	6809      	ldr	r1, [r1, #0]
   1ac34:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ac38:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1ac3a:	68c9      	ldr	r1, [r1, #12]
   1ac3c:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   1ac3e:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1ac42:	681b      	ldr	r3, [r3, #0]
   1ac44:	4341      	muls	r1, r0
   1ac46:	4359      	muls	r1, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
   1ac48:	9102      	str	r1, [sp, #8]
   1ac4a:	6853      	ldr	r3, [r2, #4]
   1ac4c:	9301      	str	r3, [sp, #4]
   1ac4e:	6813      	ldr	r3, [r2, #0]
   1ac50:	9300      	str	r3, [sp, #0]
   1ac52:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1ac54:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ac56:	9910      	ldr	r1, [sp, #64]	; 0x40
   1ac58:	980e      	ldr	r0, [sp, #56]	; 0x38
   1ac5a:	f000 fbc1 	bl	1b3e0 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
   1ac5e:	4620      	mov	r0, r4
}
   1ac60:	b00b      	add	sp, #44	; 0x2c
   1ac62:	bd30      	pop	{r4, r5, pc}
        return ARM_MATH_SIZE_MISMATCH;
   1ac64:	f06f 0002 	mvn.w	r0, #2
   1ac68:	e7fa      	b.n	1ac60 <arm_convolve_1x1_s8_fast+0x58>

0001ac6a <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
   1ac6a:	2000      	movs	r0, #0
   1ac6c:	4770      	bx	lr

0001ac6e <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
   1ac6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac72:	ed2d 8b02 	vpush	{d8}
   1ac76:	b0b1      	sub	sp, #196	; 0xc4
   1ac78:	4694      	mov	ip, r2
   1ac7a:	9c41      	ldr	r4, [sp, #260]	; 0x104
   1ac7c:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    const uint16_t input_ch = input_dims->c;
    const uint16_t kernel_x = filter_dims->w;
    const uint16_t kernel_y = filter_dims->h;
    const uint16_t output_x = output_dims->w;
    const uint16_t output_y = output_dims->h;
    const uint16_t output_ch = output_dims->c;
   1ac7e:	68e7      	ldr	r7, [r4, #12]
    q15_t *buffer_a = (q15_t *)ctx->buf;
   1ac80:	f8d0 a000 	ldr.w	sl, [r0]
    const uint16_t input_batches = input_dims->n;
   1ac84:	6818      	ldr	r0, [r3, #0]
    const uint16_t input_ch = input_dims->c;
   1ac86:	68dd      	ldr	r5, [r3, #12]
    const uint16_t input_batches = input_dims->n;
   1ac88:	901f      	str	r0, [sp, #124]	; 0x7c
    const uint16_t output_ch = output_dims->c;
   1ac8a:	b2ba      	uxth	r2, r7
   1ac8c:	ee08 2a10 	vmov	s16, r2

    const uint16_t pad_x = conv_params->padding.w;
   1ac90:	690a      	ldr	r2, [r1, #16]
   1ac92:	9220      	str	r2, [sp, #128]	; 0x80
    const uint16_t pad_y = conv_params->padding.h;
   1ac94:	694a      	ldr	r2, [r1, #20]
   1ac96:	9221      	str	r2, [sp, #132]	; 0x84
    const uint16_t stride_x = conv_params->stride.w;
   1ac98:	688a      	ldr	r2, [r1, #8]
   1ac9a:	9222      	str	r2, [sp, #136]	; 0x88
    const uint16_t stride_y = conv_params->stride.h;
   1ac9c:	68ca      	ldr	r2, [r1, #12]
   1ac9e:	9223      	str	r2, [sp, #140]	; 0x8c

    const int32_t input_offset = conv_params->input_offset;
    const int32_t out_offset = conv_params->output_offset;
   1aca0:	684a      	ldr	r2, [r1, #4]
   1aca2:	9214      	str	r2, [sp, #80]	; 0x50
    const int32_t out_activation_min = conv_params->activation.min;
   1aca4:	6a0a      	ldr	r2, [r1, #32]
   1aca6:	9215      	str	r2, [sp, #84]	; 0x54
    const int32_t out_activation_max = conv_params->activation.max;
   1aca8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
   1acaa:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t *output_mult = quant_params->multiplier;
   1acac:	f8dc 2000 	ldr.w	r2, [ip]
   1acb0:	9217      	str	r2, [sp, #92]	; 0x5c
    int32_t *output_shift = quant_params->shift;
   1acb2:	f8dc 2004 	ldr.w	r2, [ip, #4]
   1acb6:	9218      	str	r2, [sp, #96]	; 0x60
   1acb8:	88a2      	ldrh	r2, [r4, #4]
   1acba:	9219      	str	r2, [sp, #100]	; 0x64
   1acbc:	891a      	ldrh	r2, [r3, #8]
    const uint16_t kernel_y = filter_dims->h;
   1acbe:	e9d6 6001 	ldrd	r6, r0, [r6, #4]

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1acc2:	920b      	str	r2, [sp, #44]	; 0x2c
   1acc4:	889b      	ldrh	r3, [r3, #4]
   1acc6:	9313      	str	r3, [sp, #76]	; 0x4c
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   1acc8:	4613      	mov	r3, r2
   1acca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1accc:	fa1f fb85 	uxth.w	fp, r5
   1acd0:	4353      	muls	r3, r2
   1acd2:	fb0b f303 	mul.w	r3, fp, r3
   1acd6:	9327      	str	r3, [sp, #156]	; 0x9c
   1acd8:	8923      	ldrh	r3, [r4, #8]
   1acda:	931a      	str	r3, [sp, #104]	; 0x68
   1acdc:	b2bb      	uxth	r3, r7
   1acde:	931b      	str	r3, [sp, #108]	; 0x6c
        output_data += (output_x * output_y * output_ch);
   1ace0:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
   1ace4:	4353      	muls	r3, r2
   1ace6:	ee18 2a10 	vmov	r2, s16
   1acea:	4353      	muls	r3, r2
   1acec:	9329      	str	r3, [sp, #164]	; 0xa4
   1acee:	b2b3      	uxth	r3, r6
   1acf0:	931c      	str	r3, [sp, #112]	; 0x70
   1acf2:	b283      	uxth	r3, r0
   1acf4:	9312      	str	r3, [sp, #72]	; 0x48
   1acf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1acf8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1acfa:	fb10 f006 	smulbb	r0, r0, r6
   1acfe:	435a      	muls	r2, r3
   1ad00:	fb10 f505 	smulbb	r5, r0, r5
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   1ad04:	fb02 f30b 	mul.w	r3, r2, fp
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1ad08:	b2a8      	uxth	r0, r5
   1ad0a:	9025      	str	r0, [sp, #148]	; 0x94
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1ad0c:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
   1ad10:	9024      	str	r0, [sp, #144]	; 0x90
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1ad12:	ea4f 004b 	mov.w	r0, fp, lsl #1
   1ad16:	9009      	str	r0, [sp, #36]	; 0x24
   1ad18:	f3c3 038f 	ubfx	r3, r3, #2, #16
   1ad1c:	f005 0003 	and.w	r0, r5, #3
   1ad20:	901e      	str	r0, [sp, #120]	; 0x78
   1ad22:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ad26:	901d      	str	r0, [sp, #116]	; 0x74
   1ad28:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1ad2a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ad2e:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   1ad32:	932d      	str	r3, [sp, #180]	; 0xb4
   1ad34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ad36:	902a      	str	r0, [sp, #168]	; 0xa8
   1ad38:	fb0b f303 	mul.w	r3, fp, r3
   1ad3c:	9326      	str	r3, [sp, #152]	; 0x98
   1ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ad40:	4353      	muls	r3, r2
   1ad42:	932b      	str	r3, [sp, #172]	; 0xac
   1ad44:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ad46:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ad48:	4353      	muls	r3, r2
   1ad4a:	932c      	str	r3, [sp, #176]	; 0xb0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1ad4c:	2300      	movs	r3, #0
   1ad4e:	930d      	str	r3, [sp, #52]	; 0x34
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   1ad50:	f9b1 3000 	ldrsh.w	r3, [r1]
   1ad54:	ee08 3a90 	vmov	s17, r3
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1ad58:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
   1ad5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ad5e:	429a      	cmp	r2, r3
   1ad60:	f2c0 8086 	blt.w	1ae70 <arm_convolve_s8+0x202>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
   1ad64:	2000      	movs	r0, #0
   1ad66:	b031      	add	sp, #196	; 0xc4
   1ad68:	ecbd 8b02 	vpop	{d8}
   1ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1ad70:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
   1ad74:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   1ad78:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1ad7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1ad7e:	fb09 f303 	mul.w	r3, r9, r3
   1ad82:	1a9b      	subs	r3, r3, r2
   1ad84:	9311      	str	r3, [sp, #68]	; 0x44
   1ad86:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ad88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1ad8a:	189c      	adds	r4, r3, r2
   1ad8c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   1ad8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1ad90:	fb0b 3304 	mla	r3, fp, r4, r3
   1ad94:	930c      	str	r3, [sp, #48]	; 0x30
   1ad96:	4633      	mov	r3, r6
   1ad98:	4413      	add	r3, r2
   1ad9a:	932f      	str	r3, [sp, #188]	; 0xbc
   1ad9c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1ad9e:	42b3      	cmp	r3, r6
   1ada0:	dc5e      	bgt.n	1ae60 <arm_convolve_s8+0x1f2>
   1ada2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1ada4:	4498      	add	r8, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1ada6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ada8:	4543      	cmp	r3, r8
   1adaa:	d118      	bne.n	1adde <arm_convolve_s8+0x170>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1adac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1adae:	9306      	str	r3, [sp, #24]
   1adb0:	9b40      	ldr	r3, [sp, #256]	; 0x100
   1adb2:	9305      	str	r3, [sp, #20]
   1adb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1adb6:	9304      	str	r3, [sp, #16]
   1adb8:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   1adbc:	9303      	str	r3, [sp, #12]
   1adbe:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   1adc2:	9302      	str	r3, [sp, #8]
   1adc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1adc6:	9301      	str	r3, [sp, #4]
   1adc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1adca:	9300      	str	r3, [sp, #0]
   1adcc:	ee18 2a10 	vmov	r2, s16
   1add0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1add2:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1add4:	4651      	mov	r1, sl
   1add6:	f000 f8d4 	bl	1af82 <arm_nn_mat_mult_kernel_s8_s16>
    q15_t *buffer_a = (q15_t *)ctx->buf;
   1adda:	46d0      	mov	r8, sl
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1addc:	900f      	str	r0, [sp, #60]	; 0x3c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1adde:	f109 0901 	add.w	r9, r9, #1
   1ade2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1ade4:	4599      	cmp	r9, r3
   1ade6:	dbc3      	blt.n	1ad70 <arm_convolve_s8+0x102>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1ade8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1adea:	3301      	adds	r3, #1
   1adec:	930a      	str	r3, [sp, #40]	; 0x28
   1adee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1adf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1adf2:	4293      	cmp	r3, r2
   1adf4:	da41      	bge.n	1ae7a <arm_convolve_s8+0x20c>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   1adf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1adf8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
   1adfc:	4353      	muls	r3, r2
   1adfe:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
   1ae02:	1a9b      	subs	r3, r3, r2
   1ae04:	9310      	str	r3, [sp, #64]	; 0x40
   1ae06:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1ae08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ae0a:	4353      	muls	r3, r2
   1ae0c:	9328      	str	r3, [sp, #160]	; 0xa0
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1ae0e:	f04f 0900 	mov.w	r9, #0
   1ae12:	e7e6      	b.n	1ade2 <arm_convolve_s8+0x174>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
   1ae14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ae16:	42b3      	cmp	r3, r6
   1ae18:	d904      	bls.n	1ae24 <arm_convolve_s8+0x1b6>
   1ae1a:	2d00      	cmp	r5, #0
   1ae1c:	db02      	blt.n	1ae24 <arm_convolve_s8+0x1b6>
   1ae1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ae20:	429d      	cmp	r5, r3
   1ae22:	db15      	blt.n	1ae50 <arm_convolve_s8+0x1e2>
__ssp_bos_icheck3(memset, void *, int)
   1ae24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ae26:	2100      	movs	r1, #0
   1ae28:	4638      	mov	r0, r7
   1ae2a:	f000 ff94 	bl	1bd56 <memset>
                        two_column_buf += input_ch;
   1ae2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
                         i_ker_x++)
   1ae30:	3501      	adds	r5, #1
                        two_column_buf += input_ch;
   1ae32:	441f      	add	r7, r3
                         i_ker_x++)
   1ae34:	445c      	add	r4, fp
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1ae36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ae38:	42ab      	cmp	r3, r5
   1ae3a:	dceb      	bgt.n	1ae14 <arm_convolve_s8+0x1a6>
   1ae3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ae3e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   1ae40:	4413      	add	r3, r2
   1ae42:	930e      	str	r3, [sp, #56]	; 0x38
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   1ae44:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1ae46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ae48:	4413      	add	r3, r2
   1ae4a:	3601      	adds	r6, #1
   1ae4c:	930c      	str	r3, [sp, #48]	; 0x30
   1ae4e:	e7a5      	b.n	1ad9c <arm_convolve_s8+0x12e>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   1ae50:	ee18 3a90 	vmov	r3, s17
   1ae54:	465a      	mov	r2, fp
   1ae56:	4639      	mov	r1, r7
   1ae58:	4620      	mov	r0, r4
   1ae5a:	f000 fe44 	bl	1bae6 <arm_q7_to_q15_with_offset>
   1ae5e:	e7e6      	b.n	1ae2e <arm_convolve_s8+0x1c0>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1ae60:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1ae62:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1ae64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1ae66:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1ae68:	462b      	mov	r3, r5
   1ae6a:	4413      	add	r3, r2
   1ae6c:	932e      	str	r3, [sp, #184]	; 0xb8
   1ae6e:	e7e2      	b.n	1ae36 <arm_convolve_s8+0x1c8>
        q7_t *out = output_data;
   1ae70:	9b42      	ldr	r3, [sp, #264]	; 0x108
   1ae72:	930f      	str	r3, [sp, #60]	; 0x3c
    q15_t *buffer_a = (q15_t *)ctx->buf;
   1ae74:	46d0      	mov	r8, sl
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1ae76:	2300      	movs	r3, #0
   1ae78:	e7b8      	b.n	1adec <arm_convolve_s8+0x17e>
        if (two_column_buf != buffer_a)
   1ae7a:	45d0      	cmp	r8, sl
   1ae7c:	d171      	bne.n	1af62 <arm_convolve_s8+0x2f4>
        input_data += (input_x * input_y * input_ch);
   1ae7e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   1ae80:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1ae82:	4413      	add	r3, r2
   1ae84:	933c      	str	r3, [sp, #240]	; 0xf0
        output_data += (output_x * output_y * output_ch);
   1ae86:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1ae88:	9b42      	ldr	r3, [sp, #264]	; 0x108
   1ae8a:	4413      	add	r3, r2
   1ae8c:	9342      	str	r3, [sp, #264]	; 0x108
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1ae8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ae90:	3301      	adds	r3, #1
   1ae92:	930d      	str	r3, [sp, #52]	; 0x34
   1ae94:	e760      	b.n	1ad58 <arm_convolve_s8+0xea>
                if (bias_data)
   1ae96:	9b40      	ldr	r3, [sp, #256]	; 0x100
   1ae98:	2b00      	cmp	r3, #0
   1ae9a:	d044      	beq.n	1af26 <arm_convolve_s8+0x2b8>
                    sum = bias_data[i];
   1ae9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                while (col_count)
   1aea0:	4654      	mov	r4, sl
   1aea2:	462e      	mov	r6, r5
   1aea4:	42b0      	cmp	r0, r6
   1aea6:	4603      	mov	r3, r0
   1aea8:	d13f      	bne.n	1af2a <arm_convolve_s8+0x2bc>
                while (col_count)
   1aeaa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   1aeac:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   1aeae:	4406      	add	r6, r0
   1aeb0:	42b3      	cmp	r3, r6
   1aeb2:	d14f      	bne.n	1af54 <arm_convolve_s8+0x2e6>
   1aeb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1aeb6:	441d      	add	r5, r3
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
   1aeb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1aeba:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1aebe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   1aec2:	4099      	lsls	r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1aec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1aec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1aeca:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1aecc:	464c      	mov	r4, r9
   1aece:	46be      	mov	lr, r7
   1aed0:	fbc1 4e03 	smlal	r4, lr, r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1aed4:	bfd4      	ite	le
   1aed6:	4276      	negle	r6, r6
   1aed8:	2600      	movgt	r6, #0
    result = (int32_t)(mult.long_long >> 31);
   1aeda:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1aedc:	fa0c f306 	lsl.w	r3, ip, r6
    result = (int32_t)(mult.long_long >> 31);
   1aee0:	ea44 0e4e 	orr.w	lr, r4, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1aee4:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1aee6:	ea0e 0103 	and.w	r1, lr, r3
    if (result < 0)
   1aeea:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
   1aeee:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1aef2:	bf48      	it	mi
   1aef4:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1aef6:	4299      	cmp	r1, r3
                sum += out_offset;
   1aef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
        result++;
   1aefa:	bfc8      	it	gt
   1aefc:	f10e 0e01 	addgt.w	lr, lr, #1
   1af00:	449e      	add	lr, r3
                sum = MAX(sum, out_activation_min);
   1af02:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1af04:	459e      	cmp	lr, r3
   1af06:	bfb8      	it	lt
   1af08:	469e      	movlt	lr, r3
                sum = MIN(sum, out_activation_max);
   1af0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1af0c:	459e      	cmp	lr, r3
   1af0e:	bfa8      	it	ge
   1af10:	469e      	movge	lr, r3
                *out++ = (q7_t)sum;
   1af12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1af14:	f803 e002 	strb.w	lr, [r3, r2]
            for (i = 0; i < output_ch; i++)
   1af18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1af1a:	3201      	adds	r2, #1
   1af1c:	4418      	add	r0, r3
   1af1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1af20:	429a      	cmp	r2, r3
   1af22:	d1b8      	bne.n	1ae96 <arm_convolve_s8+0x228>
   1af24:	e7ab      	b.n	1ae7e <arm_convolve_s8+0x210>
                q31_t sum = 0;
   1af26:	9940      	ldr	r1, [sp, #256]	; 0x100
   1af28:	e7ba      	b.n	1aea0 <arm_convolve_s8+0x232>
    memcpy(&val, *in_q7, 4);
   1af2a:	f856 eb04 	ldr.w	lr, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
   1af2e:	ea4f 233e 	mov.w	r3, lr, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1af32:	fa2f f883 	sxtb16	r8, r3
   1af36:	fa2f f38e 	sxtb16	r3, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1af3a:	eac8 4e23 	pkhtb	lr, r8, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1af3e:	eac3 4308 	pkhbt	r3, r3, r8, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1af42:	f8d4 8000 	ldr.w	r8, [r4]
   1af46:	fb23 1308 	smlad	r3, r3, r8, r1
    memcpy(&val, *in_q15, 4);
   1af4a:	6861      	ldr	r1, [r4, #4]
    *in_q15 += 2;
   1af4c:	3408      	adds	r4, #8
   1af4e:	fb2e 3101 	smlad	r1, lr, r1, r3
                    col_count--;
   1af52:	e7a7      	b.n	1aea4 <arm_convolve_s8+0x236>
                    sum += ker_a1 * ip_b1;
   1af54:	f913 eb01 	ldrsb.w	lr, [r3], #1
   1af58:	f834 8b02 	ldrh.w	r8, [r4], #2
   1af5c:	fb18 110e 	smlabb	r1, r8, lr, r1
                    col_count--;
   1af60:	e7a6      	b.n	1aeb0 <arm_convolve_s8+0x242>
            for (i = 0; i < output_ch; i++)
   1af62:	2200      	movs	r2, #0
   1af64:	982a      	ldr	r0, [sp, #168]	; 0xa8
            const q7_t *ker_a = filter_data;
   1af66:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1af68:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
   1af6c:	4617      	mov	r7, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
   1af6e:	f04f 0c01 	mov.w	ip, #1
   1af72:	e7d4      	b.n	1af1e <arm_convolve_s8+0x2b0>

0001af74 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1af74:	688b      	ldr	r3, [r1, #8]
   1af76:	68c0      	ldr	r0, [r0, #12]
   1af78:	4358      	muls	r0, r3
   1af7a:	684b      	ldr	r3, [r1, #4]
   1af7c:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   1af7e:	0080      	lsls	r0, r0, #2
   1af80:	4770      	bx	lr

0001af82 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
   1af82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af86:	b097      	sub	sp, #92	; 0x5c
   1af88:	468b      	mov	fp, r1
   1af8a:	9303      	str	r3, [sp, #12]
   1af8c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
   1af90:	9304      	str	r3, [sp, #16]
   1af92:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
   1af96:	9305      	str	r3, [sp, #20]
   1af98:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1af9c:	9301      	str	r3, [sp, #4]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
   1af9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
   1afa0:	9207      	str	r2, [sp, #28]
    q7_t *out_1 = out_0 + output_ch;
   1afa2:	4413      	add	r3, r2
   1afa4:	9309      	str	r3, [sp, #36]	; 0x24
    /* this loop over rows in A */
    while (row_count)
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1afa6:	9b01      	ldr	r3, [sp, #4]
{
   1afa8:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   1afac:	900b      	str	r0, [sp, #44]	; 0x2c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1afae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1afb2:	9302      	str	r3, [sp, #8]
   1afb4:	9b01      	ldr	r3, [sp, #4]
   1afb6:	f003 0303 	and.w	r3, r3, #3
   1afba:	930f      	str	r3, [sp, #60]	; 0x3c
   1afbc:	9b01      	ldr	r3, [sp, #4]
   1afbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1afc0:	089b      	lsrs	r3, r3, #2
   1afc2:	009a      	lsls	r2, r3, #2
   1afc4:	9213      	str	r2, [sp, #76]	; 0x4c
   1afc6:	9a01      	ldr	r2, [sp, #4]
   1afc8:	1851      	adds	r1, r2, r1
   1afca:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   1afce:	920a      	str	r2, [sp, #40]	; 0x28
   1afd0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   1afd4:	9206      	str	r2, [sp, #24]
   1afd6:	9a07      	ldr	r2, [sp, #28]
   1afd8:	0852      	lsrs	r2, r2, #1
   1afda:	9214      	str	r2, [sp, #80]	; 0x50
   1afdc:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   1afe0:	920c      	str	r2, [sp, #48]	; 0x30
   1afe2:	9a02      	ldr	r2, [sp, #8]
   1afe4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1afe8:	9308      	str	r3, [sp, #32]
    const q7_t *ip_a0 = input_a;
   1afea:	4606      	mov	r6, r0
    while (row_count)
   1afec:	2201      	movs	r2, #1
   1afee:	2300      	movs	r3, #0
   1aff0:	9914      	ldr	r1, [sp, #80]	; 0x50
   1aff2:	428b      	cmp	r3, r1
   1aff4:	f040 8086 	bne.w	1b104 <arm_nn_mat_mult_kernel_s8_s16+0x182>
   1aff8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1affa:	eb02 0043 	add.w	r0, r2, r3, lsl #1
   1affe:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   1b002:	fb03 2101 	mla	r1, r3, r1, r2
        ip_a0 += num_col_a;
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
   1b006:	9a07      	ldr	r2, [sp, #28]
   1b008:	07d2      	lsls	r2, r2, #31
   1b00a:	ea4f 04c3 	mov.w	r4, r3, lsl #3
   1b00e:	ea4f 0843 	mov.w	r8, r3, lsl #1
   1b012:	d572      	bpl.n	1b0fa <arm_nn_mat_mult_kernel_s8_s16+0x178>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
   1b014:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1b016:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
   1b01a:	460e      	mov	r6, r1
        q31_t ch_0_out_1 = *bias++;
   1b01c:	4694      	mov	ip, r2
        while (col_count)
   1b01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b020:	455b      	cmp	r3, fp
   1b022:	f040 81ae 	bne.w	1b382 <arm_nn_mat_mult_kernel_s8_s16+0x400>
   1b026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b028:	4419      	add	r1, r3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
   1b02a:	9b01      	ldr	r3, [sp, #4]
   1b02c:	f003 0303 	and.w	r3, r3, #3
   1b030:	440b      	add	r3, r1
   1b032:	428b      	cmp	r3, r1
   1b034:	f040 81c7 	bne.w	1b3c6 <arm_nn_mat_mult_kernel_s8_s16+0x444>

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   1b038:	9b03      	ldr	r3, [sp, #12]
   1b03a:	591f      	ldr	r7, [r3, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b03c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b040:	2600      	movs	r6, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b042:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b044:	f85a 3004 	ldr.w	r3, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b048:	42b7      	cmp	r7, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b04a:	46b6      	mov	lr, r6
   1b04c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1b050:	fbc2 1e03 	smlal	r1, lr, r2, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b054:	bfd8      	it	le
   1b056:	427e      	negle	r6, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b058:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1b05a:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b05c:	40b3      	lsls	r3, r6
    result = (int32_t)(mult.long_long >> 31);
   1b05e:	ea41 0e4e 	orr.w	lr, r1, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b062:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1b064:	ea0e 0203 	and.w	r2, lr, r3
    if (result < 0)
   1b068:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
   1b06c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1b070:	bf48      	it	mi
   1b072:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b074:	429a      	cmp	r2, r3
        ch_0_out_0 += out_offset;
   1b076:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
   1b078:	bfc8      	it	gt
   1b07a:	f10e 0e01 	addgt.w	lr, lr, #1
   1b07e:	449e      	add	lr, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1b080:	9b04      	ldr	r3, [sp, #16]
   1b082:	459e      	cmp	lr, r3
   1b084:	bfb8      	it	lt
   1b086:	469e      	movlt	lr, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1b088:	9b05      	ldr	r3, [sp, #20]
   1b08a:	459e      	cmp	lr, r3
   1b08c:	bfa8      	it	ge
   1b08e:	469e      	movge	lr, r3
        *out_0++ = (q7_t)ch_0_out_0;
   1b090:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b092:	f803 e008 	strb.w	lr, [r3, r8]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   1b096:	9b03      	ldr	r3, [sp, #12]
   1b098:	591e      	ldr	r6, [r3, r4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b09a:	f85a 4004 	ldr.w	r4, [sl, r4]
   1b09e:	2200      	movs	r2, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0a0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b0a4:	4617      	mov	r7, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0a6:	fa0c f303 	lsl.w	r3, ip, r3
   1b0aa:	4296      	cmp	r6, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b0ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1b0b0:	fbc3 1704 	smlal	r1, r7, r3, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0b4:	bfd8      	it	le
   1b0b6:	4272      	negle	r2, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b0b8:	2301      	movs	r3, #1
   1b0ba:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
   1b0bc:	0fc9      	lsrs	r1, r1, #31
   1b0be:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b0c2:	3b01      	subs	r3, #1
    if (result < 0)
   1b0c4:	fa51 f202 	asrs.w	r2, r1, r2
    int32_t remainder = remainder_mask & dividend;
   1b0c8:	ea01 0403 	and.w	r4, r1, r3
    q31_t threshold = remainder_mask >> 1;
   1b0cc:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1b0d0:	bf48      	it	mi
   1b0d2:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b0d4:	429c      	cmp	r4, r3
        ch_0_out_1 += out_offset;
   1b0d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
   1b0d8:	bfc8      	it	gt
   1b0da:	3201      	addgt	r2, #1
   1b0dc:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1b0de:	9a04      	ldr	r2, [sp, #16]
   1b0e0:	429a      	cmp	r2, r3
   1b0e2:	bfb8      	it	lt
   1b0e4:	461a      	movlt	r2, r3
   1b0e6:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1b0e8:	9a05      	ldr	r2, [sp, #20]
   1b0ea:	429a      	cmp	r2, r3
   1b0ec:	bfa8      	it	ge
   1b0ee:	461a      	movge	r2, r3
   1b0f0:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
   1b0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b0f4:	f802 3008 	strb.w	r3, [r2, r8]
        *out_0++ = (q7_t)ch_0_out_0;
   1b0f8:	3001      	adds	r0, #1
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   1b0fa:	9b07      	ldr	r3, [sp, #28]
   1b0fc:	4418      	add	r0, r3
   1b0fe:	b017      	add	sp, #92	; 0x5c
   1b100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1b104:	9901      	ldr	r1, [sp, #4]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1b106:	9f02      	ldr	r7, [sp, #8]
   1b108:	9615      	str	r6, [sp, #84]	; 0x54
   1b10a:	1871      	adds	r1, r6, r1
   1b10c:	910d      	str	r1, [sp, #52]	; 0x34
        q31_t ch_0_out_0 = *bias;
   1b10e:	9925      	ldr	r1, [sp, #148]	; 0x94
        const q15_t *ip_b0 = input_b;
   1b110:	f8cd b000 	str.w	fp, [sp]
        q31_t ch_0_out_0 = *bias;
   1b114:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
        q31_t ch_1_out_0 = *bias;
   1b118:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
        q31_t ch_0_out_1 = *bias++;
   1b11c:	4604      	mov	r4, r0
        q31_t ch_1_out_1 = *bias++;
   1b11e:	46f0      	mov	r8, lr
        while (col_count)
   1b120:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b122:	9d00      	ldr	r5, [sp, #0]
   1b124:	42a9      	cmp	r1, r5
   1b126:	f040 80d4 	bne.w	1b2d2 <arm_nn_mat_mult_kernel_s8_s16+0x350>
   1b12a:	9906      	ldr	r1, [sp, #24]
   1b12c:	9d01      	ldr	r5, [sp, #4]
        while (col_count)
   1b12e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1b130:	440d      	add	r5, r1
   1b132:	950d      	str	r5, [sp, #52]	; 0x34
   1b134:	9d08      	ldr	r5, [sp, #32]
   1b136:	462f      	mov	r7, r5
   1b138:	460d      	mov	r5, r1
   1b13a:	4435      	add	r5, r6
   1b13c:	9510      	str	r5, [sp, #64]	; 0x40
   1b13e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1b140:	42a9      	cmp	r1, r5
   1b142:	f040 8105 	bne.w	1b350 <arm_nn_mat_mult_kernel_s8_s16+0x3ce>
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   1b146:	9903      	ldr	r1, [sp, #12]
   1b148:	f851 6033 	ldr.w	r6, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b14c:	ea26 71e6 	bic.w	r1, r6, r6, asr #31
   1b150:	4088      	lsls	r0, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b152:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b156:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b158:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1b15c:	f04f 0700 	mov.w	r7, #0
   1b160:	fbc0 5701 	smlal	r5, r7, r0, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b164:	bfd4      	ite	le
   1b166:	4276      	negle	r6, r6
   1b168:	2600      	movgt	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b16a:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   1b16c:	0fed      	lsrs	r5, r5, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b16e:	40b1      	lsls	r1, r6
    result = (int32_t)(mult.long_long >> 31);
   1b170:	ea45 0747 	orr.w	r7, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b174:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1b176:	ea07 0001 	and.w	r0, r7, r1
    if (result < 0)
   1b17a:	4137      	asrs	r7, r6
    q31_t threshold = remainder_mask >> 1;
   1b17c:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1b180:	bf48      	it	mi
   1b182:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1b184:	4288      	cmp	r0, r1
        ch_0_out_0 += out_offset;
   1b186:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   1b188:	bfc8      	it	gt
   1b18a:	3701      	addgt	r7, #1
   1b18c:	440f      	add	r7, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1b18e:	9904      	ldr	r1, [sp, #16]
   1b190:	428f      	cmp	r7, r1
   1b192:	bfb8      	it	lt
   1b194:	460f      	movlt	r7, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1b196:	9905      	ldr	r1, [sp, #20]
   1b198:	428f      	cmp	r7, r1
   1b19a:	bfa8      	it	ge
   1b19c:	460f      	movge	r7, r1
        *out_0++ = (q7_t)ch_0_out_0;
   1b19e:	9926      	ldr	r1, [sp, #152]	; 0x98
   1b1a0:	f801 7013 	strb.w	r7, [r1, r3, lsl #1]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   1b1a4:	9903      	ldr	r1, [sp, #12]
   1b1a6:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b1aa:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
   1b1ae:	408c      	lsls	r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b1b0:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b1b4:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b1b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1b1ba:	f04f 0600 	mov.w	r6, #0
   1b1be:	fbc4 0601 	smlal	r0, r6, r4, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b1c2:	bfd4      	ite	le
   1b1c4:	426d      	negle	r5, r5
   1b1c6:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b1c8:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   1b1ca:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b1cc:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
   1b1ce:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b1d2:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1b1d4:	ea06 0401 	and.w	r4, r6, r1
    if (result < 0)
   1b1d8:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
   1b1da:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1b1de:	bf48      	it	mi
   1b1e0:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1b1e2:	428c      	cmp	r4, r1
        ch_0_out_1 += out_offset;
   1b1e4:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   1b1e6:	bfc8      	it	gt
   1b1e8:	3601      	addgt	r6, #1
   1b1ea:	440e      	add	r6, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1b1ec:	9904      	ldr	r1, [sp, #16]
   1b1ee:	428e      	cmp	r6, r1
   1b1f0:	bfb8      	it	lt
   1b1f2:	460e      	movlt	r6, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1b1f4:	9905      	ldr	r1, [sp, #20]
   1b1f6:	428e      	cmp	r6, r1
   1b1f8:	bfa8      	it	ge
   1b1fa:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_0_out_1;
   1b1fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b1fe:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   1b202:	9903      	ldr	r1, [sp, #12]
   1b204:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b208:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b20c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   1b210:	2c00      	cmp	r4, #0
   1b212:	fa0e fc0c 	lsl.w	ip, lr, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b216:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1b21a:	f04f 0500 	mov.w	r5, #0
   1b21e:	fbcc 0501 	smlal	r0, r5, ip, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b222:	bfd4      	ite	le
   1b224:	4264      	negle	r4, r4
   1b226:	2400      	movgt	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b228:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   1b22a:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b22c:	40a1      	lsls	r1, r4
    result = (int32_t)(mult.long_long >> 31);
   1b22e:	ea40 0545 	orr.w	r5, r0, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b232:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1b234:	ea05 0601 	and.w	r6, r5, r1
    if (result < 0)
   1b238:	4125      	asrs	r5, r4
    q31_t threshold = remainder_mask >> 1;
   1b23a:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1b23e:	bf48      	it	mi
   1b240:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1b242:	428e      	cmp	r6, r1
        ch_1_out_0 += out_offset;
   1b244:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   1b246:	bfc8      	it	gt
   1b248:	3501      	addgt	r5, #1
   1b24a:	440d      	add	r5, r1
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   1b24c:	9904      	ldr	r1, [sp, #16]
   1b24e:	428d      	cmp	r5, r1
   1b250:	bfb8      	it	lt
   1b252:	460d      	movlt	r5, r1
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   1b254:	9905      	ldr	r1, [sp, #20]
   1b256:	428d      	cmp	r5, r1
   1b258:	bfa8      	it	ge
   1b25a:	460d      	movge	r5, r1
        *out_0++ = (q7_t)ch_1_out_0;
   1b25c:	9926      	ldr	r1, [sp, #152]	; 0x98
   1b25e:	548d      	strb	r5, [r1, r2]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
   1b260:	9903      	ldr	r1, [sp, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b262:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   1b266:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b26a:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
   1b26e:	2d00      	cmp	r5, #0
   1b270:	fa08 f101 	lsl.w	r1, r8, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b274:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1b278:	f04f 0600 	mov.w	r6, #0
   1b27c:	fbc1 4600 	smlal	r4, r6, r1, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b280:	bfd4      	ite	le
   1b282:	426d      	negle	r5, r5
   1b284:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b286:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   1b288:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b28a:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
   1b28c:	ea44 0646 	orr.w	r6, r4, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b290:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1b292:	ea06 0001 	and.w	r0, r6, r1
    if (result < 0)
   1b296:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
   1b298:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1b29c:	bf48      	it	mi
   1b29e:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1b2a0:	4288      	cmp	r0, r1
        ch_1_out_1 += out_offset;
   1b2a2:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   1b2a4:	bfc8      	it	gt
   1b2a6:	3601      	addgt	r6, #1
   1b2a8:	440e      	add	r6, r1
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   1b2aa:	9904      	ldr	r1, [sp, #16]
   1b2ac:	428e      	cmp	r6, r1
   1b2ae:	bfb8      	it	lt
   1b2b0:	460e      	movlt	r6, r1
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   1b2b2:	9905      	ldr	r1, [sp, #20]
   1b2b4:	428e      	cmp	r6, r1
   1b2b6:	bfa8      	it	ge
   1b2b8:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_1_out_1;
   1b2ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b2bc:	548e      	strb	r6, [r1, r2]
        ip_a0 += num_col_a;
   1b2be:	9915      	ldr	r1, [sp, #84]	; 0x54
   1b2c0:	980a      	ldr	r0, [sp, #40]	; 0x28
   1b2c2:	4401      	add	r1, r0
   1b2c4:	460e      	mov	r6, r1
        row_count--;
   1b2c6:	9906      	ldr	r1, [sp, #24]
   1b2c8:	4401      	add	r1, r0
   1b2ca:	3301      	adds	r3, #1
   1b2cc:	9106      	str	r1, [sp, #24]
   1b2ce:	3202      	adds	r2, #2
   1b2d0:	e68e      	b.n	1aff0 <arm_nn_mat_mult_kernel_s8_s16+0x6e>
    memcpy(&val, *in_q15, 4);
   1b2d2:	9900      	ldr	r1, [sp, #0]
   1b2d4:	f856 9b04 	ldr.w	r9, [r6], #4
   1b2d8:	f8d1 c000 	ldr.w	ip, [r1]
   1b2dc:	6839      	ldr	r1, [r7, #0]
   1b2de:	910e      	str	r1, [sp, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
   1b2e0:	ea4f 2139 	mov.w	r1, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b2e4:	fa2f f989 	sxtb16	r9, r9
   1b2e8:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1b2ec:	eac1 4529 	pkhtb	r5, r1, r9, asr #16
   1b2f0:	9510      	str	r5, [sp, #64]	; 0x40
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1b2f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b2f4:	eac9 4901 	pkhbt	r9, r9, r1, lsl #16
    memcpy(&val, *in_q7, 4);
   1b2f8:	f855 1b04 	ldr.w	r1, [r5], #4
   1b2fc:	950d      	str	r5, [sp, #52]	; 0x34
  return (op1 >> op2) | (op1 << (32U - op2));
   1b2fe:	ea4f 2531 	mov.w	r5, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b302:	fa2f f585 	sxtb16	r5, r5
   1b306:	9511      	str	r5, [sp, #68]	; 0x44
   1b308:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1b30c:	eac5 4521 	pkhtb	r5, r5, r1, asr #16
   1b310:	9512      	str	r5, [sp, #72]	; 0x48
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1b312:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1b314:	eac1 4105 	pkhbt	r1, r1, r5, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b318:	fb29 000c 	smlad	r0, r9, ip, r0
   1b31c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b31e:	fb29 4405 	smlad	r4, r9, r5, r4
   1b322:	fb21 ec0c 	smlad	ip, r1, ip, lr
   1b326:	fb21 8105 	smlad	r1, r1, r5, r8
    memcpy(&val, *in_q15, 4);
   1b32a:	9d00      	ldr	r5, [sp, #0]
   1b32c:	f8d7 8004 	ldr.w	r8, [r7, #4]
   1b330:	f8d5 9004 	ldr.w	r9, [r5, #4]
    *in_q15 += 2;
   1b334:	3508      	adds	r5, #8
   1b336:	9500      	str	r5, [sp, #0]
   1b338:	3708      	adds	r7, #8
   1b33a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1b33c:	fb25 0009 	smlad	r0, r5, r9, r0
   1b340:	fb25 4408 	smlad	r4, r5, r8, r4
   1b344:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1b346:	fb25 ce09 	smlad	lr, r5, r9, ip
   1b34a:	fb25 1808 	smlad	r8, r5, r8, r1
            col_count--;
   1b34e:	e6e7      	b.n	1b120 <arm_nn_mat_mult_kernel_s8_s16+0x19e>
            q15_t b0 = *ip_b0++;
   1b350:	9e00      	ldr	r6, [sp, #0]
            q7_t a0 = *ip_a0++;
   1b352:	f911 9b01 	ldrsb.w	r9, [r1], #1
            q15_t b0 = *ip_b0++;
   1b356:	f936 5b02 	ldrsh.w	r5, [r6], #2
   1b35a:	9600      	str	r6, [sp, #0]
   1b35c:	462e      	mov	r6, r5
            q7_t a1 = *ip_a1++;
   1b35e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b360:	f915 cb01 	ldrsb.w	ip, [r5], #1
   1b364:	950d      	str	r5, [sp, #52]	; 0x34
            q15_t b1 = *ip_b1++;
   1b366:	f937 5b02 	ldrsh.w	r5, [r7], #2
   1b36a:	950e      	str	r5, [sp, #56]	; 0x38
            ch_0_out_1 += a0 * b1;
   1b36c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b36e:	fb15 4409 	smlabb	r4, r5, r9, r4
            ch_1_out_1 += a1 * b1;
   1b372:	9d0e      	ldr	r5, [sp, #56]	; 0x38
            ch_0_out_0 += a0 * b0;
   1b374:	fb16 0009 	smlabb	r0, r6, r9, r0
            ch_1_out_0 += a1 * b0;
   1b378:	fb16 ee0c 	smlabb	lr, r6, ip, lr
            ch_1_out_1 += a1 * b1;
   1b37c:	fb15 880c 	smlabb	r8, r5, ip, r8
            col_count--;
   1b380:	e6dd      	b.n	1b13e <arm_nn_mat_mult_kernel_s8_s16+0x1bc>
    memcpy(&val, *in_q7, 4);
   1b382:	f856 3b04 	ldr.w	r3, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
   1b386:	ea4f 2e33 	mov.w	lr, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b38a:	fa2f f383 	sxtb16	r3, r3
   1b38e:	fa2f fe8e 	sxtb16	lr, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1b392:	eace 4723 	pkhtb	r7, lr, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1b396:	eac3 430e 	pkhbt	r3, r3, lr, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b39a:	f8db e000 	ldr.w	lr, [fp]
   1b39e:	fb23 220e 	smlad	r2, r3, lr, r2
   1b3a2:	9d02      	ldr	r5, [sp, #8]
   1b3a4:	f8d5 e000 	ldr.w	lr, [r5]
   1b3a8:	fb23 c30e 	smlad	r3, r3, lr, ip
    memcpy(&val, *in_q15, 4);
   1b3ac:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1b3b0:	f8db e004 	ldr.w	lr, [fp, #4]
    *in_q15 += 2;
   1b3b4:	3508      	adds	r5, #8
   1b3b6:	f10b 0b08 	add.w	fp, fp, #8
   1b3ba:	9502      	str	r5, [sp, #8]
   1b3bc:	fb27 220e 	smlad	r2, r7, lr, r2
   1b3c0:	fb27 3c0c 	smlad	ip, r7, ip, r3
            col_count--;
   1b3c4:	e62b      	b.n	1b01e <arm_nn_mat_mult_kernel_s8_s16+0x9c>
            q7_t a0 = *ip_a0++;
   1b3c6:	f911 6b01 	ldrsb.w	r6, [r1], #1
            ch_0_out_0 += a0 * b0;
   1b3ca:	f83b 7b02 	ldrh.w	r7, [fp], #2
            ch_0_out_1 += a0 * b1;
   1b3ce:	9d08      	ldr	r5, [sp, #32]
            ch_0_out_0 += a0 * b0;
   1b3d0:	fb17 2206 	smlabb	r2, r7, r6, r2
            ch_0_out_1 += a0 * b1;
   1b3d4:	f835 7b02 	ldrh.w	r7, [r5], #2
   1b3d8:	9508      	str	r5, [sp, #32]
   1b3da:	fb17 cc06 	smlabb	ip, r7, r6, ip
            col_count--;
   1b3de:	e628      	b.n	1b032 <arm_nn_mat_mult_kernel_s8_s16+0xb0>

0001b3e0 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
   1b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3e4:	b09b      	sub	sp, #108	; 0x6c
   1b3e6:	930e      	str	r3, [sp, #56]	; 0x38
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
   1b3e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
   1b3ea:	9209      	str	r2, [sp, #36]	; 0x24
        int32_t lhs_rows_idx = lhs_rows >> 1;
   1b3ec:	105b      	asrs	r3, r3, #1
   1b3ee:	9311      	str	r3, [sp, #68]	; 0x44

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
   1b3f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1b3f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
{
   1b3f4:	9112      	str	r1, [sp, #72]	; 0x48
        rhs += 2 * rhs_cols;
   1b3f6:	005b      	lsls	r3, r3, #1
   1b3f8:	9310      	str	r3, [sp, #64]	; 0x40
   1b3fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
{
   1b3fc:	900c      	str	r0, [sp, #48]	; 0x30
   1b3fe:	4353      	muls	r3, r2
   1b400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b402:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1b406:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b408:	930a      	str	r3, [sp, #40]	; 0x28
   1b40a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1b40c:	2a00      	cmp	r2, #0
   1b40e:	f023 030f 	bic.w	r3, r3, #15
   1b412:	bfb8      	it	lt
   1b414:	2300      	movlt	r3, #0
   1b416:	9308      	str	r3, [sp, #32]
   1b418:	4613      	mov	r3, r2
   1b41a:	9a08      	ldr	r2, [sp, #32]
   1b41c:	9908      	ldr	r1, [sp, #32]
   1b41e:	1a9b      	subs	r3, r3, r2
   1b420:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b422:	428a      	cmp	r2, r1
   1b424:	bfb8      	it	lt
   1b426:	2300      	movlt	r3, #0
   1b428:	4413      	add	r3, r2
   1b42a:	9316      	str	r3, [sp, #88]	; 0x58
   1b42c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1b42e:	005b      	lsls	r3, r3, #1
   1b430:	9314      	str	r3, [sp, #80]	; 0x50
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1b432:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b434:	9300      	str	r3, [sp, #0]
   1b436:	2304      	movs	r3, #4
   1b438:	9305      	str	r3, [sp, #20]
   1b43a:	2300      	movs	r3, #0
   1b43c:	9301      	str	r3, [sp, #4]
   1b43e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1b440:	3b01      	subs	r3, #1
   1b442:	9318      	str	r3, [sp, #96]	; 0x60
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1b444:	f1a2 030f 	sub.w	r3, r2, #15
   1b448:	9313      	str	r3, [sp, #76]	; 0x4c
   1b44a:	9a01      	ldr	r2, [sp, #4]
   1b44c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b44e:	4413      	add	r3, r2
   1b450:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1b452:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b454:	4293      	cmp	r3, r2
   1b456:	f340 82cd 	ble.w	1b9f4 <arm_nn_mat_mult_nt_t_s8+0x614>
   1b45a:	9b00      	ldr	r3, [sp, #0]
        for (int32_t x = 0; x < rhs_cols; ++x)
   1b45c:	9800      	ldr	r0, [sp, #0]
   1b45e:	1e5a      	subs	r2, r3, #1
        q31_t lhs_offset_contribution1 = 0;
   1b460:	2300      	movs	r3, #0
        q31_t lhs_offset_contribution0 = 0;
   1b462:	4619      	mov	r1, r3
        for (int32_t x = 0; x < rhs_cols; ++x)
   1b464:	f1c0 0001 	rsb	r0, r0, #1
   1b468:	e005      	b.n	1b476 <arm_nn_mat_mult_nt_t_s8+0x96>
            lhs_offset_contribution0 += rhs[x];
   1b46a:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
   1b46e:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   1b470:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   1b472:	5714      	ldrsb	r4, [r2, r4]
   1b474:	4423      	add	r3, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
   1b476:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   1b478:	1884      	adds	r4, r0, r2
   1b47a:	42ac      	cmp	r4, r5
   1b47c:	dbf5      	blt.n	1b46a <arm_nn_mat_mult_nt_t_s8+0x8a>
        lhs_offset_contribution0 *= lhs_offset;
   1b47e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1b480:	434a      	muls	r2, r1
   1b482:	9202      	str	r2, [sp, #8]
        lhs_offset_contribution1 *= lhs_offset;
   1b484:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1b486:	4353      	muls	r3, r2
   1b488:	9303      	str	r3, [sp, #12]
        if (bias)
   1b48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b48c:	b15b      	cbz	r3, 1b4a6 <arm_nn_mat_mult_nt_t_s8+0xc6>
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   1b48e:	9a01      	ldr	r2, [sp, #4]
   1b490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b494:	9a02      	ldr	r2, [sp, #8]
   1b496:	441a      	add	r2, r3
   1b498:	9202      	str	r2, [sp, #8]
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   1b49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b49c:	9a05      	ldr	r2, [sp, #20]
   1b49e:	589b      	ldr	r3, [r3, r2]
   1b4a0:	9a03      	ldr	r2, [sp, #12]
   1b4a2:	441a      	add	r2, r3
   1b4a4:	9203      	str	r2, [sp, #12]
        while (lhs_rows_idx)
   1b4a6:	9b08      	ldr	r3, [sp, #32]
   1b4a8:	9a00      	ldr	r2, [sp, #0]
   1b4aa:	3b01      	subs	r3, #1
   1b4ac:	18d3      	adds	r3, r2, r3
   1b4ae:	930b      	str	r3, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
   1b4b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b4b2:	9304      	str	r3, [sp, #16]
        int32_t lhs_rows_idx = lhs_rows >> 1;
   1b4b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b4b6:	9306      	str	r3, [sp, #24]
            dst_ptr[1] = (q7_t)res11;
   1b4b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1b4ba:	3301      	adds	r3, #1
   1b4bc:	9319      	str	r3, [sp, #100]	; 0x64
        while (lhs_rows_idx)
   1b4be:	9b06      	ldr	r3, [sp, #24]
   1b4c0:	2b00      	cmp	r3, #0
   1b4c2:	f000 8190 	beq.w	1b7e6 <arm_nn_mat_mult_nt_t_s8+0x406>
   1b4c6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b4c8:	9b00      	ldr	r3, [sp, #0]
            q31_t res10 = lhs_offset_contribution0;
   1b4ca:	e9dd b902 	ldrd	fp, r9, [sp, #8]
   1b4ce:	189e      	adds	r6, r3, r2
   1b4d0:	9b04      	ldr	r3, [sp, #16]
            q31_t res01 = lhs_offset_contribution1;
   1b4d2:	464f      	mov	r7, r9
   1b4d4:	189d      	adds	r5, r3, r2
            q31_t res00 = lhs_offset_contribution0;
   1b4d6:	465b      	mov	r3, fp
            int32_t rhs_cols_idx = 0;
   1b4d8:	2200      	movs	r2, #0
   1b4da:	e0a3      	b.n	1b624 <arm_nn_mat_mult_nt_t_s8+0x244>
    memcpy(&val, *in_q7, 4);
   1b4dc:	9900      	ldr	r1, [sp, #0]
   1b4de:	5888      	ldr	r0, [r1, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b4e0:	9904      	ldr	r1, [sp, #16]
   1b4e2:	fa2f fe80 	sxtb16	lr, r0
   1b4e6:	588c      	ldr	r4, [r1, r2]
   1b4e8:	6831      	ldr	r1, [r6, #0]
   1b4ea:	fa2f f884 	sxtb16	r8, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b4ee:	fa2f f090 	sxtb16	r0, r0, ror #8
   1b4f2:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b4f6:	fb28 3c0e 	smlad	ip, r8, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b4fa:	fa2f f381 	sxtb16	r3, r1
   1b4fe:	930f      	str	r3, [sp, #60]	; 0x3c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b500:	fb24 c300 	smlad	r3, r4, r0, ip
   1b504:	9317      	str	r3, [sp, #92]	; 0x5c
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b506:	fa2f fc91 	sxtb16	ip, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b50a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b50c:	fb28 7701 	smlad	r7, r8, r1, r7
   1b510:	fb24 740c 	smlad	r4, r4, ip, r7
    memcpy(&val, in_q7, 4);
   1b514:	6829      	ldr	r1, [r5, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b516:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b51a:	fa2f f791 	sxtb16	r7, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b51e:	fb28 be0e 	smlad	lr, r8, lr, fp
   1b522:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b524:	fb28 9101 	smlad	r1, r8, r1, r9
   1b528:	fb27 e000 	smlad	r0, r7, r0, lr
    memcpy(&val, *in_q7, 4);
   1b52c:	f8da 8004 	ldr.w	r8, [sl, #4]
   1b530:	fb27 110c 	smlad	r1, r7, ip, r1
    memcpy(&val, in_q7, 4);
   1b534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b536:	f8d6 e004 	ldr.w	lr, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b53a:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1b53e:	fa2f f788 	sxtb16	r7, r8
   1b542:	fa2f fc89 	sxtb16	ip, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b546:	fa2f f898 	sxtb16	r8, r8, ror #8
   1b54a:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b54e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b550:	fb2c 3307 	smlad	r3, ip, r7, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b554:	fa2f fb8e 	sxtb16	fp, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b558:	fb29 3308 	smlad	r3, r9, r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b55c:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b560:	fb2c 440b 	smlad	r4, ip, fp, r4
   1b564:	fb29 490e 	smlad	r9, r9, lr, r4
   1b568:	686c      	ldr	r4, [r5, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b56a:	fa2f fc84 	sxtb16	ip, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b56e:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b572:	fb2c 0007 	smlad	r0, ip, r7, r0
   1b576:	fb2c 110b 	smlad	r1, ip, fp, r1
   1b57a:	fb24 0808 	smlad	r8, r4, r8, r0
    memcpy(&val, *in_q7, 4);
   1b57e:	f8da b008 	ldr.w	fp, [sl, #8]
   1b582:	fb24 1e0e 	smlad	lr, r4, lr, r1
    memcpy(&val, in_q7, 4);
   1b586:	980d      	ldr	r0, [sp, #52]	; 0x34
   1b588:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b58c:	6880      	ldr	r0, [r0, #8]
   1b58e:	fa2f f18b 	sxtb16	r1, fp
   1b592:	fa2f f480 	sxtb16	r4, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b596:	fa2f fb9b 	sxtb16	fp, fp, ror #8
   1b59a:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b59e:	fb24 3301 	smlad	r3, r4, r1, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b5a2:	fa2f f78c 	sxtb16	r7, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b5a6:	fb20 330b 	smlad	r3, r0, fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b5aa:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b5ae:	fb24 9907 	smlad	r9, r4, r7, r9
   1b5b2:	fb20 900c 	smlad	r0, r0, ip, r9
   1b5b6:	f8d5 9008 	ldr.w	r9, [r5, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b5ba:	fa2f f489 	sxtb16	r4, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b5be:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b5c2:	fb24 8801 	smlad	r8, r4, r1, r8
   1b5c6:	fb24 e407 	smlad	r4, r4, r7, lr
   1b5ca:	fb29 8b0b 	smlad	fp, r9, fp, r8
    memcpy(&val, *in_q7, 4);
   1b5ce:	f8da e00c 	ldr.w	lr, [sl, #12]
   1b5d2:	fb29 4c0c 	smlad	ip, r9, ip, r4
    memcpy(&val, in_q7, 4);
   1b5d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1b5d8:	68f1      	ldr	r1, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b5da:	68e7      	ldr	r7, [r4, #12]
   1b5dc:	fa2f f88e 	sxtb16	r8, lr
   1b5e0:	fa2f fa87 	sxtb16	sl, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b5e4:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   1b5e8:	fa2f f497 	sxtb16	r4, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b5ec:	fb2a 3308 	smlad	r3, sl, r8, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b5f0:	fa2f f981 	sxtb16	r9, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b5f4:	fb24 330e 	smlad	r3, r4, lr, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b5f8:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b5fc:	fb2a 0009 	smlad	r0, sl, r9, r0
   1b600:	fb24 0701 	smlad	r7, r4, r1, r0
   1b604:	68ed      	ldr	r5, [r5, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b606:	fa2f f485 	sxtb16	r4, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b60a:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b60e:	fb24 bb08 	smlad	fp, r4, r8, fp
   1b612:	fb24 cc09 	smlad	ip, r4, r9, ip
   1b616:	fb25 bb0e 	smlad	fp, r5, lr, fp
   1b61a:	fb25 c901 	smlad	r9, r5, r1, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1b61e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1b620:	3210      	adds	r2, #16
   1b622:	3610      	adds	r6, #16
   1b624:	9904      	ldr	r1, [sp, #16]
   1b626:	4411      	add	r1, r2
   1b628:	910d      	str	r1, [sp, #52]	; 0x34
   1b62a:	9900      	ldr	r1, [sp, #0]
   1b62c:	eb01 0a02 	add.w	sl, r1, r2
   1b630:	f105 0110 	add.w	r1, r5, #16
   1b634:	9115      	str	r1, [sp, #84]	; 0x54
   1b636:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b638:	4291      	cmp	r1, r2
   1b63a:	f73f af4f 	bgt.w	1b4dc <arm_nn_mat_mult_nt_t_s8+0xfc>
   1b63e:	9908      	ldr	r1, [sp, #32]
   1b640:	9a04      	ldr	r2, [sp, #16]
   1b642:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1b644:	440a      	add	r2, r1
   1b646:	4614      	mov	r4, r2
   1b648:	1e51      	subs	r1, r2, #1
   1b64a:	9a08      	ldr	r2, [sp, #32]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1b64c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   1b64e:	42aa      	cmp	r2, r5
   1b650:	f2c0 80b7 	blt.w	1b7c2 <arm_nn_mat_mult_nt_t_s8+0x3e2>
                lhs_value = lhs_ptr[rhs_cols];
   1b654:	9a16      	ldr	r2, [sp, #88]	; 0x58
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   1b656:	9901      	ldr	r1, [sp, #4]
                lhs_value = lhs_ptr[rhs_cols];
   1b658:	18a2      	adds	r2, r4, r2
   1b65a:	9204      	str	r2, [sp, #16]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   1b65c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1b65e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1b662:	920d      	str	r2, [sp, #52]	; 0x34
   1b664:	9a25      	ldr	r2, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b666:	980d      	ldr	r0, [sp, #52]	; 0x34
   1b668:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b66c:	ea25 7ee5 	bic.w	lr, r5, r5, asr #31
   1b670:	2d00      	cmp	r5, #0
   1b672:	fa03 f30e 	lsl.w	r3, r3, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b67a:	f04f 0100 	mov.w	r1, #0
   1b67e:	fbc3 2100 	smlal	r2, r1, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b682:	bfd8      	it	le
   1b684:	426d      	negle	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b686:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b68a:	bfc8      	it	gt
   1b68c:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b68e:	fa03 fa05 	lsl.w	sl, r3, r5
    result = (int32_t)(mult.long_long >> 31);
   1b692:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b694:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult.long_long >> 31);
   1b698:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1b69c:	fa4a fc03 	asr.w	ip, sl, r3
    int32_t remainder = remainder_mask & dividend;
   1b6a0:	ea02 010a 	and.w	r1, r2, sl
    if (result < 0)
   1b6a4:	412a      	asrs	r2, r5
        threshold++;
   1b6a6:	bf4c      	ite	mi
   1b6a8:	4463      	addmi	r3, ip
    q31_t threshold = remainder_mask >> 1;
   1b6aa:	4663      	movpl	r3, ip
    if (remainder > threshold)
   1b6ac:	4299      	cmp	r1, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   1b6ae:	9905      	ldr	r1, [sp, #20]
   1b6b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b6b2:	585b      	ldr	r3, [r3, r1]
   1b6b4:	930f      	str	r3, [sp, #60]	; 0x3c
   1b6b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b6b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1b6ba:	585c      	ldr	r4, [r3, r1]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b6bc:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
   1b6c0:	fa07 f701 	lsl.w	r7, r7, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b6c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b6c8:	f04f 0000 	mov.w	r0, #0
   1b6cc:	fbc7 3006 	smlal	r3, r0, r7, r6
        result++;
   1b6d0:	bfc8      	it	gt
   1b6d2:	3201      	addgt	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   1b6d4:	0fdb      	lsrs	r3, r3, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b6d6:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
   1b6d8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b6dc:	bfd8      	it	le
   1b6de:	4264      	negle	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b6e0:	f04f 0001 	mov.w	r0, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b6e4:	bfc8      	it	gt
   1b6e6:	2400      	movgt	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b6e8:	fa00 f604 	lsl.w	r6, r0, r4
   1b6ec:	3e01      	subs	r6, #1
    q31_t threshold = remainder_mask >> 1;
   1b6ee:	fa46 f700 	asr.w	r7, r6, r0
    int32_t remainder = remainder_mask & dividend;
   1b6f2:	ea03 0806 	and.w	r8, r3, r6
    if (result < 0)
   1b6f6:	4123      	asrs	r3, r4
        threshold++;
   1b6f8:	bf4c      	ite	mi
   1b6fa:	1838      	addmi	r0, r7, r0
    q31_t threshold = remainder_mask >> 1;
   1b6fc:	4638      	movpl	r0, r7
    if (remainder > threshold)
   1b6fe:	4580      	cmp	r8, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b700:	980d      	ldr	r0, [sp, #52]	; 0x34
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b702:	fa0b fe0e 	lsl.w	lr, fp, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b706:	f04f 0800 	mov.w	r8, #0
   1b70a:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
   1b70e:	fbce b800 	smlal	fp, r8, lr, r0
   1b712:	4658      	mov	r0, fp
    result = (int32_t)(mult.long_long >> 31);
   1b714:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   1b718:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
        result++;
   1b71c:	bfc8      	it	gt
   1b71e:	3301      	addgt	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1b720:	ea00 0a0a 	and.w	sl, r0, sl
    if (result < 0)
   1b724:	4128      	asrs	r0, r5
        threshold++;
   1b726:	bf48      	it	mi
   1b728:	f10c 0c01 	addmi.w	ip, ip, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b72c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    if (remainder > threshold)
   1b72e:	45e2      	cmp	sl, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b730:	fa09 f101 	lsl.w	r1, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b734:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
   1b738:	f04f 0c00 	mov.w	ip, #0
   1b73c:	fbc1 ec05 	smlal	lr, ip, r1, r5
   1b740:	4675      	mov	r5, lr
    result = (int32_t)(mult.long_long >> 31);
   1b742:	ea4f 75d5 	mov.w	r5, r5, lsr #31
   1b746:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
        result++;
   1b74a:	bfc8      	it	gt
   1b74c:	3001      	addgt	r0, #1
    if (result < 0)
   1b74e:	fa55 f404 	asrs.w	r4, r5, r4
    int32_t remainder = remainder_mask & dividend;
   1b752:	ea06 0605 	and.w	r6, r6, r5
        threshold++;
   1b756:	bf48      	it	mi
   1b758:	3701      	addmi	r7, #1
            res00 += dst_offset;
   1b75a:	992a      	ldr	r1, [sp, #168]	; 0xa8
    if (remainder > threshold)
   1b75c:	42be      	cmp	r6, r7
        result++;
   1b75e:	bfc8      	it	gt
   1b760:	3401      	addgt	r4, #1
   1b762:	440a      	add	r2, r1
            res01 += dst_offset;
   1b764:	440b      	add	r3, r1
            res10 += dst_offset;
   1b766:	4408      	add	r0, r1
            res11 += dst_offset;
   1b768:	440c      	add	r4, r1
            res00 = MAX(res00, activation_min);
   1b76a:	992b      	ldr	r1, [sp, #172]	; 0xac
   1b76c:	428a      	cmp	r2, r1
   1b76e:	bfb8      	it	lt
   1b770:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
   1b772:	428b      	cmp	r3, r1
   1b774:	bfb8      	it	lt
   1b776:	460b      	movlt	r3, r1
            res10 = MAX(res10, activation_min);
   1b778:	4288      	cmp	r0, r1
   1b77a:	bfb8      	it	lt
   1b77c:	4608      	movlt	r0, r1
            res11 = MAX(res11, activation_min);
   1b77e:	428c      	cmp	r4, r1
   1b780:	bfb8      	it	lt
   1b782:	460c      	movlt	r4, r1
            res00 = MIN(res00, activation_max);
   1b784:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1b786:	428a      	cmp	r2, r1
   1b788:	bfa8      	it	ge
   1b78a:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
   1b78c:	9907      	ldr	r1, [sp, #28]
   1b78e:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
   1b790:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   1b792:	4293      	cmp	r3, r2
   1b794:	bfa8      	it	ge
   1b796:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
   1b798:	704b      	strb	r3, [r1, #1]
            res10 = MIN(res10, activation_max);
   1b79a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
   1b79c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            res10 = MIN(res10, activation_max);
   1b79e:	4298      	cmp	r0, r3
   1b7a0:	bfa8      	it	ge
   1b7a2:	4618      	movge	r0, r3
            res11 = MIN(res11, activation_max);
   1b7a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
   1b7a6:	5488      	strb	r0, [r1, r2]
            res11 = MIN(res11, activation_max);
   1b7a8:	429c      	cmp	r4, r3
            dst_ptr[1] = (q7_t)res11;
   1b7aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
            res11 = MIN(res11, activation_max);
   1b7ac:	bfa8      	it	ge
   1b7ae:	461c      	movge	r4, r3
            dst_ptr[1] = (q7_t)res11;
   1b7b0:	548c      	strb	r4, [r1, r2]
            dst_ptr += rhs_rows;
   1b7b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
            dst_ptr[1] = (q7_t)res11;
   1b7b4:	460b      	mov	r3, r1
   1b7b6:	4413      	add	r3, r2
   1b7b8:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
   1b7ba:	9b06      	ldr	r3, [sp, #24]
   1b7bc:	3b01      	subs	r3, #1
   1b7be:	9306      	str	r3, [sp, #24]
   1b7c0:	e67d      	b.n	1b4be <arm_nn_mat_mult_nt_t_s8+0xde>
                q7_t rhs_value0 = rhs_ptr[0];
   1b7c2:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   1b7c6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   1b7c8:	5746      	ldrsb	r6, [r0, r5]
                q7_t lhs_value = lhs_ptr[0];
   1b7ca:	f911 5f01 	ldrsb.w	r5, [r1, #1]!
                res00 += lhs_value * rhs_value0;
   1b7ce:	fb15 330c 	smlabb	r3, r5, ip, r3
                res01 += lhs_value * rhs_value1;
   1b7d2:	fb15 7706 	smlabb	r7, r5, r6, r7
                lhs_value = lhs_ptr[rhs_cols];
   1b7d6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   1b7d8:	574d      	ldrsb	r5, [r1, r5]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1b7da:	3201      	adds	r2, #1
                res10 += lhs_value * rhs_value0;
   1b7dc:	fb1c bb05 	smlabb	fp, ip, r5, fp
                res11 += lhs_value * rhs_value1;
   1b7e0:	fb16 9905 	smlabb	r9, r6, r5, r9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1b7e4:	e732      	b.n	1b64c <arm_nn_mat_mult_nt_t_s8+0x26c>
        if (lhs_rows % 2)
   1b7e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b7e8:	07d8      	lsls	r0, r3, #31
   1b7ea:	d579      	bpl.n	1b8e0 <arm_nn_mat_mult_nt_t_s8+0x500>
   1b7ec:	9b00      	ldr	r3, [sp, #0]
   1b7ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1b7f0:	1898      	adds	r0, r3, r2
            int32_t rhs_cols_idx = 0;
   1b7f2:	9b06      	ldr	r3, [sp, #24]
   1b7f4:	9a04      	ldr	r2, [sp, #16]
   1b7f6:	18d6      	adds	r6, r2, r3
   1b7f8:	9a00      	ldr	r2, [sp, #0]
   1b7fa:	18d5      	adds	r5, r2, r3
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1b7fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b7fe:	429a      	cmp	r2, r3
   1b800:	dc7c      	bgt.n	1b8fc <arm_nn_mat_mult_nt_t_s8+0x51c>
   1b802:	9a08      	ldr	r2, [sp, #32]
   1b804:	9b04      	ldr	r3, [sp, #16]
   1b806:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1b808:	9a04      	ldr	r2, [sp, #16]
   1b80a:	4251      	negs	r1, r2
   1b80c:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1b80e:	185a      	adds	r2, r3, r1
   1b810:	4290      	cmp	r0, r2
   1b812:	f300 80dd 	bgt.w	1b9d0 <arm_nn_mat_mult_nt_t_s8+0x5f0>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   1b816:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1b818:	9a01      	ldr	r2, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b81a:	9901      	ldr	r1, [sp, #4]
   1b81c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b820:	9b02      	ldr	r3, [sp, #8]
   1b822:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
   1b826:	40a3      	lsls	r3, r4
   1b828:	461c      	mov	r4, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b82a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b82c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1b830:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1b834:	2500      	movs	r5, #0
   1b836:	fbc4 0503 	smlal	r0, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
   1b83a:	0fc1      	lsrs	r1, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b83c:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
   1b83e:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b842:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b846:	bfd4      	ite	le
   1b848:	4251      	negle	r1, r2
   1b84a:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b84c:	408b      	lsls	r3, r1
   1b84e:	3b01      	subs	r3, #1
    if (result < 0)
   1b850:	fa55 f101 	asrs.w	r1, r5, r1
    int32_t remainder = remainder_mask & dividend;
   1b854:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
   1b858:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1b85c:	bf48      	it	mi
   1b85e:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b860:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   1b862:	9a05      	ldr	r2, [sp, #20]
   1b864:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1b866:	589c      	ldr	r4, [r3, r2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b868:	9b03      	ldr	r3, [sp, #12]
   1b86a:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1b86e:	fa03 f300 	lsl.w	r3, r3, r0
   1b872:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b874:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1b876:	589b      	ldr	r3, [r3, r2]
        result++;
   1b878:	bfc8      	it	gt
   1b87a:	3101      	addgt	r1, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b87c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b880:	2c00      	cmp	r4, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b882:	f04f 0500 	mov.w	r5, #0
   1b886:	fbc0 2503 	smlal	r2, r5, r0, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b88a:	bfdc      	itt	le
   1b88c:	4263      	negle	r3, r4
   1b88e:	9306      	strle	r3, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   1b890:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b892:	9b06      	ldr	r3, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   1b894:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b898:	2201      	movs	r2, #1
   1b89a:	fa02 f303 	lsl.w	r3, r2, r3
   1b89e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1b8a0:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
   1b8a4:	4113      	asrs	r3, r2
    if (result < 0)
   1b8a6:	9a06      	ldr	r2, [sp, #24]
   1b8a8:	4115      	asrs	r5, r2
        threshold++;
   1b8aa:	bf48      	it	mi
   1b8ac:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b8ae:	4298      	cmp	r0, r3
            res00 += dst_offset;
   1b8b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        result++;
   1b8b2:	bfc8      	it	gt
   1b8b4:	3501      	addgt	r5, #1
   1b8b6:	4419      	add	r1, r3
            res01 += dst_offset;
   1b8b8:	441d      	add	r5, r3
            res00 = MAX(res00, activation_min);
   1b8ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1b8bc:	4299      	cmp	r1, r3
   1b8be:	bfb8      	it	lt
   1b8c0:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
   1b8c2:	429d      	cmp	r5, r3
   1b8c4:	bfb8      	it	lt
   1b8c6:	461d      	movlt	r5, r3
            res00 = MIN(res00, activation_max);
   1b8c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1b8ca:	4299      	cmp	r1, r3
   1b8cc:	bfa8      	it	ge
   1b8ce:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
   1b8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b8d2:	7019      	strb	r1, [r3, #0]
            res01 = MIN(res01, activation_max);
   1b8d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1b8d6:	429d      	cmp	r5, r3
   1b8d8:	bfa8      	it	ge
   1b8da:	461d      	movge	r5, r3
            dst_ptr[1] = (q7_t)res01;
   1b8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b8de:	705d      	strb	r5, [r3, #1]
        rhs += 2 * rhs_cols;
   1b8e0:	9b00      	ldr	r3, [sp, #0]
   1b8e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1b8e4:	4413      	add	r3, r2
   1b8e6:	9300      	str	r3, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1b8e8:	9b01      	ldr	r3, [sp, #4]
   1b8ea:	3302      	adds	r3, #2
   1b8ec:	9301      	str	r3, [sp, #4]
   1b8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b8f0:	3302      	adds	r3, #2
   1b8f2:	930a      	str	r3, [sp, #40]	; 0x28
   1b8f4:	9b05      	ldr	r3, [sp, #20]
   1b8f6:	3308      	adds	r3, #8
   1b8f8:	9305      	str	r3, [sp, #20]
   1b8fa:	e5a6      	b.n	1b44a <arm_nn_mat_mult_nt_t_s8+0x6a>
    memcpy(&val, *in_q7, 4);
   1b8fc:	9a00      	ldr	r2, [sp, #0]
   1b8fe:	6801      	ldr	r1, [r0, #0]
   1b900:	58d7      	ldr	r7, [r2, r3]
   1b902:	9a04      	ldr	r2, [sp, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b904:	fa2f f887 	sxtb16	r8, r7
   1b908:	58d2      	ldr	r2, [r2, r3]
   1b90a:	fa2f fe81 	sxtb16	lr, r1
   1b90e:	fa2f fc82 	sxtb16	ip, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b912:	fa2f f797 	sxtb16	r7, r7, ror #8
   1b916:	fa2f f292 	sxtb16	r2, r2, ror #8
   1b91a:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b91e:	9c02      	ldr	r4, [sp, #8]
   1b920:	fb2c 4808 	smlad	r8, ip, r8, r4
   1b924:	fb22 8707 	smlad	r7, r2, r7, r8
   1b928:	9c03      	ldr	r4, [sp, #12]
   1b92a:	fb2c 4c0e 	smlad	ip, ip, lr, r4
   1b92e:	fb22 c101 	smlad	r1, r2, r1, ip
   1b932:	686c      	ldr	r4, [r5, #4]
    memcpy(&val, in_q7, 4);
   1b934:	f8d0 c004 	ldr.w	ip, [r0, #4]
    memcpy(&val, *in_q7, 4);
   1b938:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b93a:	fa2f f984 	sxtb16	r9, r4
   1b93e:	fa2f fe82 	sxtb16	lr, r2
   1b942:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b946:	fa2f f494 	sxtb16	r4, r4, ror #8
   1b94a:	fa2f f292 	sxtb16	r2, r2, ror #8
   1b94e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b952:	fb2e 7709 	smlad	r7, lr, r9, r7
   1b956:	fb22 7404 	smlad	r4, r2, r4, r7
   1b95a:	fb2e 1108 	smlad	r1, lr, r8, r1
   1b95e:	fb22 120c 	smlad	r2, r2, ip, r1
   1b962:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy(&val, in_q7, 4);
   1b966:	f8d0 e008 	ldr.w	lr, [r0, #8]
    memcpy(&val, *in_q7, 4);
   1b96a:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b96e:	fa2f f788 	sxtb16	r7, r8
   1b972:	fa2f f18c 	sxtb16	r1, ip
   1b976:	fa2f f98e 	sxtb16	r9, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b97a:	fa2f f898 	sxtb16	r8, r8, ror #8
   1b97e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
   1b982:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b986:	fb21 4407 	smlad	r4, r1, r7, r4
   1b98a:	fb2c 4808 	smlad	r8, ip, r8, r4
   1b98e:	fb21 2209 	smlad	r2, r1, r9, r2
   1b992:	fb2c 2e0e 	smlad	lr, ip, lr, r2
   1b996:	68ea      	ldr	r2, [r5, #12]
    memcpy(&val, in_q7, 4);
   1b998:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    memcpy(&val, *in_q7, 4);
   1b99c:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1b99e:	fa2f f482 	sxtb16	r4, r2
   1b9a2:	fa2f fc85 	sxtb16	ip, r5
   1b9a6:	fa2f f18a 	sxtb16	r1, sl
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1b9aa:	fa2f f292 	sxtb16	r2, r2, ror #8
   1b9ae:	fa2f f595 	sxtb16	r5, r5, ror #8
   1b9b2:	fa2f fa9a 	sxtb16	sl, sl, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1b9b6:	fb2c 8804 	smlad	r8, ip, r4, r8
   1b9ba:	fb25 8202 	smlad	r2, r5, r2, r8
   1b9be:	9202      	str	r2, [sp, #8]
   1b9c0:	fb2c ee01 	smlad	lr, ip, r1, lr
   1b9c4:	fb25 e20a 	smlad	r2, r5, sl, lr
   1b9c8:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1b9ca:	3310      	adds	r3, #16
   1b9cc:	3010      	adds	r0, #16
   1b9ce:	e711      	b.n	1b7f4 <arm_nn_mat_mult_nt_t_s8+0x414>
                res00 += lhs_value * rhs_value0;
   1b9d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                q7_t lhs_value = lhs_ptr[0];
   1b9d2:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
   1b9d6:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
   1b9da:	940b      	str	r4, [sp, #44]	; 0x2c
   1b9dc:	9c02      	ldr	r4, [sp, #8]
   1b9de:	fb12 4000 	smlabb	r0, r2, r0, r4
   1b9e2:	9002      	str	r0, [sp, #8]
                res01 += lhs_value * rhs_value1;
   1b9e4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   1b9e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1b9e8:	5700      	ldrsb	r0, [r0, r4]
   1b9ea:	9c03      	ldr	r4, [sp, #12]
   1b9ec:	fb12 4200 	smlabb	r2, r2, r0, r4
   1b9f0:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1b9f2:	e70b      	b.n	1b80c <arm_nn_mat_mult_nt_t_s8+0x42c>
   1b9f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1b9f6:	9810      	ldr	r0, [sp, #64]	; 0x40
   1b9f8:	2b00      	cmp	r3, #0
   1b9fa:	ea4f 0253 	mov.w	r2, r3, lsr #1
   1b9fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ba00:	bfac      	ite	ge
   1ba02:	4611      	movge	r1, r2
   1ba04:	2100      	movlt	r1, #0
   1ba06:	fb00 3301 	mla	r3, r0, r1, r3
   1ba0a:	9300      	str	r3, [sp, #0]
   1ba0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ba0e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1ba12:	bfb8      	it	lt
   1ba14:	2200      	movlt	r2, #0
   1ba16:	4413      	add	r3, r2
   1ba18:	461a      	mov	r2, r3
        dst += 2;
    }

    if (rhs_rows % 2)
   1ba1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1ba1c:	07d9      	lsls	r1, r3, #31
   1ba1e:	d517      	bpl.n	1ba50 <arm_nn_mat_mult_nt_t_s8+0x670>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
   1ba20:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1ba24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba26:	3c01      	subs	r4, #1
   1ba28:	eb03 0b84 	add.w	fp, r3, r4, lsl #2
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1ba2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ba2e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   1ba32:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1ba34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1ba38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1ba3a:	2700      	movs	r7, #0
   1ba3c:	ea23 7ee3 	bic.w	lr, r3, r3, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ba40:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   1ba44:	46b8      	mov	r8, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ba46:	f04f 0901 	mov.w	r9, #1
   1ba4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1ba4c:	429f      	cmp	r7, r3
   1ba4e:	db03      	blt.n	1ba58 <arm_nn_mat_mult_nt_t_s8+0x678>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
   1ba50:	2000      	movs	r0, #0
   1ba52:	b01b      	add	sp, #108	; 0x6c
   1ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (bias)
   1ba58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba5a:	2b00      	cmp	r3, #0
   1ba5c:	d037      	beq.n	1bace <arm_nn_mat_mult_nt_t_s8+0x6ee>
                res00 = bias[rhs_rows - 1];
   1ba5e:	f8db 5000 	ldr.w	r5, [fp]
            q31_t res00 = 0;
   1ba62:	2300      	movs	r3, #0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1ba64:	9928      	ldr	r1, [sp, #160]	; 0xa0
   1ba66:	428b      	cmp	r3, r1
   1ba68:	db33      	blt.n	1bad2 <arm_nn_mat_mult_nt_t_s8+0x6f2>
   1ba6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1ba6c:	6821      	ldr	r1, [r4, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ba6e:	6806      	ldr	r6, [r0, #0]
   1ba70:	4473      	add	r3, lr
   1ba72:	930c      	str	r3, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ba74:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   1ba78:	409d      	lsls	r5, r3
   1ba7a:	2900      	cmp	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ba7c:	4663      	mov	r3, ip
   1ba7e:	46c2      	mov	sl, r8
   1ba80:	fbc5 3a06 	smlal	r3, sl, r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ba84:	bfd4      	ite	le
   1ba86:	4249      	negle	r1, r1
   1ba88:	2100      	movgt	r1, #0
    result = (int32_t)(mult.long_long >> 31);
   1ba8a:	0fdb      	lsrs	r3, r3, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ba8c:	fa09 f501 	lsl.w	r5, r9, r1
    result = (int32_t)(mult.long_long >> 31);
   1ba90:	ea43 0a4a 	orr.w	sl, r3, sl, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ba94:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
   1ba96:	ea0a 0605 	and.w	r6, sl, r5
    if (result < 0)
   1ba9a:	fa5a fa01 	asrs.w	sl, sl, r1
    q31_t threshold = remainder_mask >> 1;
   1ba9e:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
   1baa2:	bf48      	it	mi
   1baa4:	3501      	addmi	r5, #1
            res00 += dst_offset;
   1baa6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    if (remainder > threshold)
   1baa8:	42ae      	cmp	r6, r5
        result++;
   1baaa:	bfc8      	it	gt
   1baac:	f10a 0a01 	addgt.w	sl, sl, #1
   1bab0:	449a      	add	sl, r3
            res00 = MAX(res00, activation_min);
   1bab2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1bab4:	459a      	cmp	sl, r3
   1bab6:	bfb8      	it	lt
   1bab8:	469a      	movlt	sl, r3
            res00 = MIN(res00, activation_max);
   1baba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1babc:	459a      	cmp	sl, r3
   1babe:	bfa8      	it	ge
   1bac0:	469a      	movge	sl, r3
            dst_ptr += rhs_rows;
   1bac2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            dst_ptr[0] = (q7_t)res00;
   1bac4:	f882 a000 	strb.w	sl, [r2]
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1bac8:	3701      	adds	r7, #1
            dst_ptr += rhs_rows;
   1baca:	441a      	add	r2, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1bacc:	e7bd      	b.n	1ba4a <arm_nn_mat_mult_nt_t_s8+0x66a>
            q31_t res00 = 0;
   1bace:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1bad0:	e7c7      	b.n	1ba62 <arm_nn_mat_mult_nt_t_s8+0x682>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1bad2:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bad4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   1bad6:	56c9      	ldrsb	r1, [r1, r3]
   1bad8:	4431      	add	r1, r6
                q31_t rhs_value = rhs_ptr[0];
   1bada:	9e00      	ldr	r6, [sp, #0]
   1badc:	56f6      	ldrsb	r6, [r6, r3]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1bade:	3301      	adds	r3, #1
                res00 += lhs_value * rhs_value;
   1bae0:	fb06 5501 	mla	r5, r6, r1, r5
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1bae4:	e7be      	b.n	1ba64 <arm_nn_mat_mult_nt_t_s8+0x684>

0001bae6 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
   1bae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
   1baea:	eac3 4c03 	pkhbt	ip, r3, r3, lsl #16
   1baee:	f022 0703 	bic.w	r7, r2, #3
    block_cnt = block_size >> 2;
   1baf2:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    while (block_cnt > 0)
   1baf6:	4407      	add	r7, r0
   1baf8:	460d      	mov	r5, r1
   1bafa:	4287      	cmp	r7, r0
   1bafc:	d108      	bne.n	1bb10 <arm_q7_to_q15_with_offset+0x2a>
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
   1bafe:	f002 0203 	and.w	r2, r2, #3
   1bb02:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
   1bb06:	4402      	add	r2, r0
   1bb08:	4282      	cmp	r2, r0
   1bb0a:	d113      	bne.n	1bb34 <arm_q7_to_q15_with_offset+0x4e>
        *dst++ = (q15_t)*src++ + offset;

        /* Decrement the loop counter */
        block_cnt--;
    }
}
   1bb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(&val, *in_q7, 4);
   1bb10:	f850 4b04 	ldr.w	r4, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1bb14:	3508      	adds	r5, #8
  return (op1 >> op2) | (op1 << (32U - op2));
   1bb16:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1bb1a:	fa2c f484 	sxtab16	r4, ip, r4
   1bb1e:	fa2c f686 	sxtab16	r6, ip, r6
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
   1bb22:	eac6 4824 	pkhtb	r8, r6, r4, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
   1bb26:	eac4 4406 	pkhbt	r4, r4, r6, lsl #16
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bb2a:	f845 8c04 	str.w	r8, [r5, #-4]
   1bb2e:	f845 4c08 	str.w	r4, [r5, #-8]
        block_cnt--;
   1bb32:	e7e2      	b.n	1bafa <arm_q7_to_q15_with_offset+0x14>
        *dst++ = (q15_t)*src++ + offset;
   1bb34:	f910 4b01 	ldrsb.w	r4, [r0], #1
   1bb38:	441c      	add	r4, r3
   1bb3a:	f821 4b02 	strh.w	r4, [r1], #2
        block_cnt--;
   1bb3e:	e7e3      	b.n	1bb08 <arm_q7_to_q15_with_offset+0x22>

0001bb40 <_ZdlPv>:
   1bb40:	f7fa b8c2 	b.w	15cc8 <free>

0001bb44 <_ZdaPv>:
   1bb44:	f7ff bffc 	b.w	1bb40 <_ZdlPv>

0001bb48 <_Znwj>:
   1bb48:	2801      	cmp	r0, #1
   1bb4a:	bf38      	it	cc
   1bb4c:	2001      	movcc	r0, #1
   1bb4e:	b510      	push	{r4, lr}
   1bb50:	4604      	mov	r4, r0
   1bb52:	4620      	mov	r0, r4
   1bb54:	f7fa f8b0 	bl	15cb8 <malloc>
   1bb58:	b930      	cbnz	r0, 1bb68 <_Znwj+0x20>
   1bb5a:	f7f9 fbc9 	bl	152f0 <_ZSt15get_new_handlerv>
   1bb5e:	b908      	cbnz	r0, 1bb64 <_Znwj+0x1c>
   1bb60:	f000 f8b7 	bl	1bcd2 <abort>
   1bb64:	4780      	blx	r0
   1bb66:	e7f4      	b.n	1bb52 <_Znwj+0xa>
   1bb68:	bd10      	pop	{r4, pc}

0001bb6a <_Znaj>:
   1bb6a:	f7ff bfed 	b.w	1bb48 <_Znwj>

0001bb6e <_ZSt19__throw_logic_errorPKc>:
   1bb6e:	b508      	push	{r3, lr}
   1bb70:	f000 f8af 	bl	1bcd2 <abort>

0001bb74 <_ZSt20__throw_length_errorPKc>:
   1bb74:	b508      	push	{r3, lr}
   1bb76:	f000 f8ac 	bl	1bcd2 <abort>

0001bb7a <_ZSt24__throw_out_of_range_fmtPKcz>:
   1bb7a:	b40f      	push	{r0, r1, r2, r3}
   1bb7c:	b580      	push	{r7, lr}
   1bb7e:	b084      	sub	sp, #16
   1bb80:	af00      	add	r7, sp, #0
   1bb82:	f107 0418 	add.w	r4, r7, #24
   1bb86:	f854 2b04 	ldr.w	r2, [r4], #4
   1bb8a:	607a      	str	r2, [r7, #4]
   1bb8c:	4610      	mov	r0, r2
   1bb8e:	f7e5 fa09 	bl	fa4 <strlen>
   1bb92:	f200 2307 	addw	r3, r0, #519	; 0x207
   1bb96:	f023 0307 	bic.w	r3, r3, #7
   1bb9a:	ebad 0d03 	sub.w	sp, sp, r3
   1bb9e:	f500 7100 	add.w	r1, r0, #512	; 0x200
   1bba2:	687a      	ldr	r2, [r7, #4]
   1bba4:	60fc      	str	r4, [r7, #12]
   1bba6:	4623      	mov	r3, r4
   1bba8:	4668      	mov	r0, sp
   1bbaa:	f000 f802 	bl	1bbb2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   1bbae:	f000 f890 	bl	1bcd2 <abort>

0001bbb2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   1bbb2:	3901      	subs	r1, #1
   1bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbb8:	4607      	mov	r7, r0
   1bbba:	4615      	mov	r5, r2
   1bbbc:	eb00 0801 	add.w	r8, r0, r1
   1bbc0:	4604      	mov	r4, r0
   1bbc2:	782a      	ldrb	r2, [r5, #0]
   1bbc4:	b392      	cbz	r2, 1bc2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   1bbc6:	4544      	cmp	r4, r8
   1bbc8:	d22a      	bcs.n	1bc20 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   1bbca:	2a25      	cmp	r2, #37	; 0x25
   1bbcc:	d107      	bne.n	1bbde <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   1bbce:	786a      	ldrb	r2, [r5, #1]
   1bbd0:	2a73      	cmp	r2, #115	; 0x73
   1bbd2:	d009      	beq.n	1bbe8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   1bbd4:	2a7a      	cmp	r2, #122	; 0x7a
   1bbd6:	d012      	beq.n	1bbfe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   1bbd8:	2a25      	cmp	r2, #37	; 0x25
   1bbda:	d100      	bne.n	1bbde <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   1bbdc:	3501      	adds	r5, #1
   1bbde:	f815 2b01 	ldrb.w	r2, [r5], #1
   1bbe2:	f804 2b01 	strb.w	r2, [r4], #1
   1bbe6:	e7ec      	b.n	1bbc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   1bbe8:	f853 2b04 	ldr.w	r2, [r3], #4
   1bbec:	3a01      	subs	r2, #1
   1bbee:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   1bbf2:	b1c9      	cbz	r1, 1bc28 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   1bbf4:	4544      	cmp	r4, r8
   1bbf6:	d013      	beq.n	1bc20 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   1bbf8:	f804 1b01 	strb.w	r1, [r4], #1
   1bbfc:	e7f7      	b.n	1bbee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   1bbfe:	78aa      	ldrb	r2, [r5, #2]
   1bc00:	2a75      	cmp	r2, #117	; 0x75
   1bc02:	d1ec      	bne.n	1bbde <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   1bc04:	461e      	mov	r6, r3
   1bc06:	eba8 0104 	sub.w	r1, r8, r4
   1bc0a:	f856 2b04 	ldr.w	r2, [r6], #4
   1bc0e:	4620      	mov	r0, r4
   1bc10:	f7f9 fb42 	bl	15298 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   1bc14:	2800      	cmp	r0, #0
   1bc16:	dd03      	ble.n	1bc20 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   1bc18:	4404      	add	r4, r0
   1bc1a:	3503      	adds	r5, #3
   1bc1c:	4633      	mov	r3, r6
   1bc1e:	e7d0      	b.n	1bbc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   1bc20:	4621      	mov	r1, r4
   1bc22:	4638      	mov	r0, r7
   1bc24:	f7f9 fb12 	bl	1524c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   1bc28:	3502      	adds	r5, #2
   1bc2a:	e7ca      	b.n	1bbc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   1bc2c:	7022      	strb	r2, [r4, #0]
   1bc2e:	1be0      	subs	r0, r4, r7
   1bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bc34 <fabs>:
   1bc34:	ec51 0b10 	vmov	r0, r1, d0
   1bc38:	ee10 2a10 	vmov	r2, s0
   1bc3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1bc40:	ec43 2b10 	vmov	d0, r2, r3
   1bc44:	4770      	bx	lr

0001bc46 <fabsf>:
   1bc46:	ee10 3a10 	vmov	r3, s0
   1bc4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1bc4e:	ee00 3a10 	vmov	s0, r3
   1bc52:	4770      	bx	lr

0001bc54 <fmaf>:
   1bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc56:	ee10 0a10 	vmov	r0, s0
   1bc5a:	ee10 7a90 	vmov	r7, s1
   1bc5e:	ee11 6a10 	vmov	r6, s2
   1bc62:	f7e4 fc01 	bl	468 <__aeabi_f2d>
   1bc66:	4604      	mov	r4, r0
   1bc68:	4638      	mov	r0, r7
   1bc6a:	460d      	mov	r5, r1
   1bc6c:	f7e4 fbfc 	bl	468 <__aeabi_f2d>
   1bc70:	4602      	mov	r2, r0
   1bc72:	460b      	mov	r3, r1
   1bc74:	4620      	mov	r0, r4
   1bc76:	4629      	mov	r1, r5
   1bc78:	f7e4 fc4e 	bl	518 <__aeabi_dmul>
   1bc7c:	4604      	mov	r4, r0
   1bc7e:	4630      	mov	r0, r6
   1bc80:	460d      	mov	r5, r1
   1bc82:	f7e4 fbf1 	bl	468 <__aeabi_f2d>
   1bc86:	4602      	mov	r2, r0
   1bc88:	460b      	mov	r3, r1
   1bc8a:	4620      	mov	r0, r4
   1bc8c:	4629      	mov	r1, r5
   1bc8e:	f7e4 fa8d 	bl	1ac <__adddf3>
   1bc92:	f7e4 fedb 	bl	a4c <__aeabi_d2f>
   1bc96:	ee00 0a10 	vmov	s0, r0
   1bc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bc9c <__ieee754_sqrtf>:
   1bc9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1bca0:	4770      	bx	lr

0001bca2 <finite>:
   1bca2:	b082      	sub	sp, #8
   1bca4:	ed8d 0b00 	vstr	d0, [sp]
   1bca8:	9801      	ldr	r0, [sp, #4]
   1bcaa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   1bcae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   1bcb2:	0fc0      	lsrs	r0, r0, #31
   1bcb4:	b002      	add	sp, #8
   1bcb6:	4770      	bx	lr

0001bcb8 <finitef>:
   1bcb8:	b082      	sub	sp, #8
   1bcba:	ed8d 0a01 	vstr	s0, [sp, #4]
   1bcbe:	9801      	ldr	r0, [sp, #4]
   1bcc0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   1bcc4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   1bcc8:	bfac      	ite	ge
   1bcca:	2000      	movge	r0, #0
   1bccc:	2001      	movlt	r0, #1
   1bcce:	b002      	add	sp, #8
   1bcd0:	4770      	bx	lr

0001bcd2 <abort>:
   1bcd2:	b508      	push	{r3, lr}
   1bcd4:	2006      	movs	r0, #6
   1bcd6:	f7fa fd59 	bl	1678c <raise>
   1bcda:	2001      	movs	r0, #1
   1bcdc:	f7ed fa36 	bl	914c <_exit>

0001bce0 <memcpy>:
   1bce0:	440a      	add	r2, r1
   1bce2:	4291      	cmp	r1, r2
   1bce4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1bce8:	d100      	bne.n	1bcec <memcpy+0xc>
   1bcea:	4770      	bx	lr
   1bcec:	b510      	push	{r4, lr}
   1bcee:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bcf2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1bcf6:	4291      	cmp	r1, r2
   1bcf8:	d1f9      	bne.n	1bcee <memcpy+0xe>
   1bcfa:	bd10      	pop	{r4, pc}

0001bcfc <__memcpy_chk>:
   1bcfc:	429a      	cmp	r2, r3
   1bcfe:	b508      	push	{r3, lr}
   1bd00:	d901      	bls.n	1bd06 <__memcpy_chk+0xa>
   1bd02:	f7ed faa9 	bl	9258 <__chk_fail>
   1bd06:	4281      	cmp	r1, r0
   1bd08:	d804      	bhi.n	1bd14 <__memcpy_chk+0x18>
   1bd0a:	188b      	adds	r3, r1, r2
   1bd0c:	4298      	cmp	r0, r3
   1bd0e:	d3f8      	bcc.n	1bd02 <__memcpy_chk+0x6>
   1bd10:	4281      	cmp	r1, r0
   1bd12:	d102      	bne.n	1bd1a <__memcpy_chk+0x1e>
   1bd14:	1883      	adds	r3, r0, r2
   1bd16:	4299      	cmp	r1, r3
   1bd18:	d3f3      	bcc.n	1bd02 <__memcpy_chk+0x6>
   1bd1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1bd1e:	f7ff bfdf 	b.w	1bce0 <memcpy>

0001bd22 <memmove>:
   1bd22:	4288      	cmp	r0, r1
   1bd24:	b510      	push	{r4, lr}
   1bd26:	eb01 0402 	add.w	r4, r1, r2
   1bd2a:	d902      	bls.n	1bd32 <memmove+0x10>
   1bd2c:	4284      	cmp	r4, r0
   1bd2e:	4623      	mov	r3, r4
   1bd30:	d807      	bhi.n	1bd42 <memmove+0x20>
   1bd32:	1e43      	subs	r3, r0, #1
   1bd34:	42a1      	cmp	r1, r4
   1bd36:	d008      	beq.n	1bd4a <memmove+0x28>
   1bd38:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bd3c:	f803 2f01 	strb.w	r2, [r3, #1]!
   1bd40:	e7f8      	b.n	1bd34 <memmove+0x12>
   1bd42:	4402      	add	r2, r0
   1bd44:	4601      	mov	r1, r0
   1bd46:	428a      	cmp	r2, r1
   1bd48:	d100      	bne.n	1bd4c <memmove+0x2a>
   1bd4a:	bd10      	pop	{r4, pc}
   1bd4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1bd50:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1bd54:	e7f7      	b.n	1bd46 <memmove+0x24>

0001bd56 <memset>:
   1bd56:	4402      	add	r2, r0
   1bd58:	4603      	mov	r3, r0
   1bd5a:	4293      	cmp	r3, r2
   1bd5c:	d100      	bne.n	1bd60 <memset+0xa>
   1bd5e:	4770      	bx	lr
   1bd60:	f803 1b01 	strb.w	r1, [r3], #1
   1bd64:	e7f9      	b.n	1bd5a <memset+0x4>

0001bd66 <_calloc_r>:
   1bd66:	b513      	push	{r0, r1, r4, lr}
   1bd68:	434a      	muls	r2, r1
   1bd6a:	4611      	mov	r1, r2
   1bd6c:	9201      	str	r2, [sp, #4]
   1bd6e:	f7f9 ffff 	bl	15d70 <_malloc_r>
   1bd72:	4604      	mov	r4, r0
   1bd74:	b118      	cbz	r0, 1bd7e <_calloc_r+0x18>
   1bd76:	9a01      	ldr	r2, [sp, #4]
   1bd78:	2100      	movs	r1, #0
   1bd7a:	f7ff ffec 	bl	1bd56 <memset>
   1bd7e:	4620      	mov	r0, r4
   1bd80:	b002      	add	sp, #8
   1bd82:	bd10      	pop	{r4, pc}

0001bd84 <__sfputc_r>:
   1bd84:	6893      	ldr	r3, [r2, #8]
   1bd86:	3b01      	subs	r3, #1
   1bd88:	2b00      	cmp	r3, #0
   1bd8a:	b410      	push	{r4}
   1bd8c:	6093      	str	r3, [r2, #8]
   1bd8e:	da08      	bge.n	1bda2 <__sfputc_r+0x1e>
   1bd90:	6994      	ldr	r4, [r2, #24]
   1bd92:	42a3      	cmp	r3, r4
   1bd94:	db01      	blt.n	1bd9a <__sfputc_r+0x16>
   1bd96:	290a      	cmp	r1, #10
   1bd98:	d103      	bne.n	1bda2 <__sfputc_r+0x1e>
   1bd9a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bd9e:	f7fa bd1d 	b.w	167dc <__swbuf_r>
   1bda2:	6813      	ldr	r3, [r2, #0]
   1bda4:	1c58      	adds	r0, r3, #1
   1bda6:	6010      	str	r0, [r2, #0]
   1bda8:	7019      	strb	r1, [r3, #0]
   1bdaa:	4608      	mov	r0, r1
   1bdac:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bdb0:	4770      	bx	lr

0001bdb2 <__sfputs_r>:
   1bdb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdb4:	4606      	mov	r6, r0
   1bdb6:	460f      	mov	r7, r1
   1bdb8:	4614      	mov	r4, r2
   1bdba:	18d5      	adds	r5, r2, r3
   1bdbc:	42ac      	cmp	r4, r5
   1bdbe:	d101      	bne.n	1bdc4 <__sfputs_r+0x12>
   1bdc0:	2000      	movs	r0, #0
   1bdc2:	e007      	b.n	1bdd4 <__sfputs_r+0x22>
   1bdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
   1bdc8:	463a      	mov	r2, r7
   1bdca:	4630      	mov	r0, r6
   1bdcc:	f7ff ffda 	bl	1bd84 <__sfputc_r>
   1bdd0:	1c43      	adds	r3, r0, #1
   1bdd2:	d1f3      	bne.n	1bdbc <__sfputs_r+0xa>
   1bdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bdd6 <__cvt>:
   1bdd6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1bdda:	ec55 4b10 	vmov	r4, r5, d0
   1bdde:	2d00      	cmp	r5, #0
   1bde0:	460e      	mov	r6, r1
   1bde2:	4619      	mov	r1, r3
   1bde4:	462b      	mov	r3, r5
   1bde6:	bfbb      	ittet	lt
   1bde8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   1bdec:	461d      	movlt	r5, r3
   1bdee:	2300      	movge	r3, #0
   1bdf0:	232d      	movlt	r3, #45	; 0x2d
   1bdf2:	700b      	strb	r3, [r1, #0]
   1bdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bdf6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   1bdfa:	4691      	mov	r9, r2
   1bdfc:	f023 0820 	bic.w	r8, r3, #32
   1be00:	bfbc      	itt	lt
   1be02:	4622      	movlt	r2, r4
   1be04:	4614      	movlt	r4, r2
   1be06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1be0a:	d005      	beq.n	1be18 <__cvt+0x42>
   1be0c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   1be10:	d100      	bne.n	1be14 <__cvt+0x3e>
   1be12:	3601      	adds	r6, #1
   1be14:	2102      	movs	r1, #2
   1be16:	e000      	b.n	1be1a <__cvt+0x44>
   1be18:	2103      	movs	r1, #3
   1be1a:	ab03      	add	r3, sp, #12
   1be1c:	9301      	str	r3, [sp, #4]
   1be1e:	ab02      	add	r3, sp, #8
   1be20:	9300      	str	r3, [sp, #0]
   1be22:	ec45 4b10 	vmov	d0, r4, r5
   1be26:	4653      	mov	r3, sl
   1be28:	4632      	mov	r2, r6
   1be2a:	f7e8 fe65 	bl	4af8 <_dtoa_r>
   1be2e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1be32:	4607      	mov	r7, r0
   1be34:	d102      	bne.n	1be3c <__cvt+0x66>
   1be36:	f019 0f01 	tst.w	r9, #1
   1be3a:	d022      	beq.n	1be82 <__cvt+0xac>
   1be3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1be40:	eb07 0906 	add.w	r9, r7, r6
   1be44:	d110      	bne.n	1be68 <__cvt+0x92>
   1be46:	783b      	ldrb	r3, [r7, #0]
   1be48:	2b30      	cmp	r3, #48	; 0x30
   1be4a:	d10a      	bne.n	1be62 <__cvt+0x8c>
   1be4c:	2200      	movs	r2, #0
   1be4e:	2300      	movs	r3, #0
   1be50:	4620      	mov	r0, r4
   1be52:	4629      	mov	r1, r5
   1be54:	f7e4 fdc8 	bl	9e8 <__aeabi_dcmpeq>
   1be58:	b918      	cbnz	r0, 1be62 <__cvt+0x8c>
   1be5a:	f1c6 0601 	rsb	r6, r6, #1
   1be5e:	f8ca 6000 	str.w	r6, [sl]
   1be62:	f8da 3000 	ldr.w	r3, [sl]
   1be66:	4499      	add	r9, r3
   1be68:	2200      	movs	r2, #0
   1be6a:	2300      	movs	r3, #0
   1be6c:	4620      	mov	r0, r4
   1be6e:	4629      	mov	r1, r5
   1be70:	f7e4 fdba 	bl	9e8 <__aeabi_dcmpeq>
   1be74:	b108      	cbz	r0, 1be7a <__cvt+0xa4>
   1be76:	f8cd 900c 	str.w	r9, [sp, #12]
   1be7a:	2230      	movs	r2, #48	; 0x30
   1be7c:	9b03      	ldr	r3, [sp, #12]
   1be7e:	454b      	cmp	r3, r9
   1be80:	d307      	bcc.n	1be92 <__cvt+0xbc>
   1be82:	9b03      	ldr	r3, [sp, #12]
   1be84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1be86:	1bdb      	subs	r3, r3, r7
   1be88:	4638      	mov	r0, r7
   1be8a:	6013      	str	r3, [r2, #0]
   1be8c:	b004      	add	sp, #16
   1be8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1be92:	1c59      	adds	r1, r3, #1
   1be94:	9103      	str	r1, [sp, #12]
   1be96:	701a      	strb	r2, [r3, #0]
   1be98:	e7f0      	b.n	1be7c <__cvt+0xa6>

0001be9a <__exponent>:
   1be9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1be9c:	4603      	mov	r3, r0
   1be9e:	2900      	cmp	r1, #0
   1bea0:	bfb8      	it	lt
   1bea2:	4249      	neglt	r1, r1
   1bea4:	f803 2b02 	strb.w	r2, [r3], #2
   1bea8:	bfb4      	ite	lt
   1beaa:	222d      	movlt	r2, #45	; 0x2d
   1beac:	222b      	movge	r2, #43	; 0x2b
   1beae:	2909      	cmp	r1, #9
   1beb0:	7042      	strb	r2, [r0, #1]
   1beb2:	dd2a      	ble.n	1bf0a <__exponent+0x70>
   1beb4:	f10d 0407 	add.w	r4, sp, #7
   1beb8:	46a4      	mov	ip, r4
   1beba:	270a      	movs	r7, #10
   1bebc:	46a6      	mov	lr, r4
   1bebe:	460a      	mov	r2, r1
   1bec0:	fb91 f6f7 	sdiv	r6, r1, r7
   1bec4:	fb07 1516 	mls	r5, r7, r6, r1
   1bec8:	3530      	adds	r5, #48	; 0x30
   1beca:	2a63      	cmp	r2, #99	; 0x63
   1becc:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   1bed0:	f80e 5c01 	strb.w	r5, [lr, #-1]
   1bed4:	4631      	mov	r1, r6
   1bed6:	dcf1      	bgt.n	1bebc <__exponent+0x22>
   1bed8:	3130      	adds	r1, #48	; 0x30
   1beda:	f1ae 0502 	sub.w	r5, lr, #2
   1bede:	f804 1c01 	strb.w	r1, [r4, #-1]
   1bee2:	1c44      	adds	r4, r0, #1
   1bee4:	4629      	mov	r1, r5
   1bee6:	4561      	cmp	r1, ip
   1bee8:	d30a      	bcc.n	1bf00 <__exponent+0x66>
   1beea:	f10d 0209 	add.w	r2, sp, #9
   1beee:	eba2 020e 	sub.w	r2, r2, lr
   1bef2:	4565      	cmp	r5, ip
   1bef4:	bf88      	it	hi
   1bef6:	2200      	movhi	r2, #0
   1bef8:	4413      	add	r3, r2
   1befa:	1a18      	subs	r0, r3, r0
   1befc:	b003      	add	sp, #12
   1befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf00:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bf04:	f804 2f01 	strb.w	r2, [r4, #1]!
   1bf08:	e7ed      	b.n	1bee6 <__exponent+0x4c>
   1bf0a:	2330      	movs	r3, #48	; 0x30
   1bf0c:	3130      	adds	r1, #48	; 0x30
   1bf0e:	7083      	strb	r3, [r0, #2]
   1bf10:	70c1      	strb	r1, [r0, #3]
   1bf12:	1d03      	adds	r3, r0, #4
   1bf14:	e7f1      	b.n	1befa <__exponent+0x60>

0001bf16 <_printf_common>:
   1bf16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf1a:	4616      	mov	r6, r2
   1bf1c:	4699      	mov	r9, r3
   1bf1e:	688a      	ldr	r2, [r1, #8]
   1bf20:	690b      	ldr	r3, [r1, #16]
   1bf22:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1bf26:	4293      	cmp	r3, r2
   1bf28:	bfb8      	it	lt
   1bf2a:	4613      	movlt	r3, r2
   1bf2c:	6033      	str	r3, [r6, #0]
   1bf2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1bf32:	4607      	mov	r7, r0
   1bf34:	460c      	mov	r4, r1
   1bf36:	b10a      	cbz	r2, 1bf3c <_printf_common+0x26>
   1bf38:	3301      	adds	r3, #1
   1bf3a:	6033      	str	r3, [r6, #0]
   1bf3c:	6823      	ldr	r3, [r4, #0]
   1bf3e:	0699      	lsls	r1, r3, #26
   1bf40:	bf42      	ittt	mi
   1bf42:	6833      	ldrmi	r3, [r6, #0]
   1bf44:	3302      	addmi	r3, #2
   1bf46:	6033      	strmi	r3, [r6, #0]
   1bf48:	6825      	ldr	r5, [r4, #0]
   1bf4a:	f015 0506 	ands.w	r5, r5, #6
   1bf4e:	d106      	bne.n	1bf5e <_printf_common+0x48>
   1bf50:	f104 0a19 	add.w	sl, r4, #25
   1bf54:	68e3      	ldr	r3, [r4, #12]
   1bf56:	6832      	ldr	r2, [r6, #0]
   1bf58:	1a9b      	subs	r3, r3, r2
   1bf5a:	42ab      	cmp	r3, r5
   1bf5c:	dc26      	bgt.n	1bfac <_printf_common+0x96>
   1bf5e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1bf62:	1e13      	subs	r3, r2, #0
   1bf64:	6822      	ldr	r2, [r4, #0]
   1bf66:	bf18      	it	ne
   1bf68:	2301      	movne	r3, #1
   1bf6a:	0692      	lsls	r2, r2, #26
   1bf6c:	d42b      	bmi.n	1bfc6 <_printf_common+0xb0>
   1bf6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1bf72:	4649      	mov	r1, r9
   1bf74:	4638      	mov	r0, r7
   1bf76:	47c0      	blx	r8
   1bf78:	3001      	adds	r0, #1
   1bf7a:	d01e      	beq.n	1bfba <_printf_common+0xa4>
   1bf7c:	6823      	ldr	r3, [r4, #0]
   1bf7e:	68e5      	ldr	r5, [r4, #12]
   1bf80:	6832      	ldr	r2, [r6, #0]
   1bf82:	f003 0306 	and.w	r3, r3, #6
   1bf86:	2b04      	cmp	r3, #4
   1bf88:	bf08      	it	eq
   1bf8a:	1aad      	subeq	r5, r5, r2
   1bf8c:	68a3      	ldr	r3, [r4, #8]
   1bf8e:	6922      	ldr	r2, [r4, #16]
   1bf90:	bf0c      	ite	eq
   1bf92:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1bf96:	2500      	movne	r5, #0
   1bf98:	4293      	cmp	r3, r2
   1bf9a:	bfc4      	itt	gt
   1bf9c:	1a9b      	subgt	r3, r3, r2
   1bf9e:	18ed      	addgt	r5, r5, r3
   1bfa0:	2600      	movs	r6, #0
   1bfa2:	341a      	adds	r4, #26
   1bfa4:	42b5      	cmp	r5, r6
   1bfa6:	d11a      	bne.n	1bfde <_printf_common+0xc8>
   1bfa8:	2000      	movs	r0, #0
   1bfaa:	e008      	b.n	1bfbe <_printf_common+0xa8>
   1bfac:	2301      	movs	r3, #1
   1bfae:	4652      	mov	r2, sl
   1bfb0:	4649      	mov	r1, r9
   1bfb2:	4638      	mov	r0, r7
   1bfb4:	47c0      	blx	r8
   1bfb6:	3001      	adds	r0, #1
   1bfb8:	d103      	bne.n	1bfc2 <_printf_common+0xac>
   1bfba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bfc2:	3501      	adds	r5, #1
   1bfc4:	e7c6      	b.n	1bf54 <_printf_common+0x3e>
   1bfc6:	18e1      	adds	r1, r4, r3
   1bfc8:	1c5a      	adds	r2, r3, #1
   1bfca:	2030      	movs	r0, #48	; 0x30
   1bfcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1bfd0:	4422      	add	r2, r4
   1bfd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1bfd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1bfda:	3302      	adds	r3, #2
   1bfdc:	e7c7      	b.n	1bf6e <_printf_common+0x58>
   1bfde:	2301      	movs	r3, #1
   1bfe0:	4622      	mov	r2, r4
   1bfe2:	4649      	mov	r1, r9
   1bfe4:	4638      	mov	r0, r7
   1bfe6:	47c0      	blx	r8
   1bfe8:	3001      	adds	r0, #1
   1bfea:	d0e6      	beq.n	1bfba <_printf_common+0xa4>
   1bfec:	3601      	adds	r6, #1
   1bfee:	e7d9      	b.n	1bfa4 <_printf_common+0x8e>

0001bff0 <_raise_r>:
   1bff0:	291f      	cmp	r1, #31
   1bff2:	b538      	push	{r3, r4, r5, lr}
   1bff4:	4604      	mov	r4, r0
   1bff6:	460d      	mov	r5, r1
   1bff8:	d904      	bls.n	1c004 <_raise_r+0x14>
   1bffa:	2316      	movs	r3, #22
   1bffc:	6003      	str	r3, [r0, #0]
   1bffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c002:	bd38      	pop	{r3, r4, r5, pc}
   1c004:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c006:	b112      	cbz	r2, 1c00e <_raise_r+0x1e>
   1c008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1c00c:	b94b      	cbnz	r3, 1c022 <_raise_r+0x32>
   1c00e:	4620      	mov	r0, r4
   1c010:	f000 f816 	bl	1c040 <_getpid_r>
   1c014:	462a      	mov	r2, r5
   1c016:	4601      	mov	r1, r0
   1c018:	4620      	mov	r0, r4
   1c01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c01e:	f7fa bbbd 	b.w	1679c <_kill_r>
   1c022:	2b01      	cmp	r3, #1
   1c024:	d00a      	beq.n	1c03c <_raise_r+0x4c>
   1c026:	1c59      	adds	r1, r3, #1
   1c028:	d103      	bne.n	1c032 <_raise_r+0x42>
   1c02a:	2316      	movs	r3, #22
   1c02c:	6003      	str	r3, [r0, #0]
   1c02e:	2001      	movs	r0, #1
   1c030:	e7e7      	b.n	1c002 <_raise_r+0x12>
   1c032:	2400      	movs	r4, #0
   1c034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   1c038:	4628      	mov	r0, r5
   1c03a:	4798      	blx	r3
   1c03c:	2000      	movs	r0, #0
   1c03e:	e7e0      	b.n	1c002 <_raise_r+0x12>

0001c040 <_getpid_r>:
   1c040:	f7fb bf80 	b.w	17f44 <_getpid>

0001c044 <strcpy>:
   1c044:	4603      	mov	r3, r0
   1c046:	f811 2b01 	ldrb.w	r2, [r1], #1
   1c04a:	f803 2b01 	strb.w	r2, [r3], #1
   1c04e:	2a00      	cmp	r2, #0
   1c050:	d1f9      	bne.n	1c046 <strcpy+0x2>
   1c052:	4770      	bx	lr

0001c054 <strnlen>:
   1c054:	b510      	push	{r4, lr}
   1c056:	4602      	mov	r2, r0
   1c058:	4401      	add	r1, r0
   1c05a:	428a      	cmp	r2, r1
   1c05c:	4613      	mov	r3, r2
   1c05e:	d003      	beq.n	1c068 <strnlen+0x14>
   1c060:	781c      	ldrb	r4, [r3, #0]
   1c062:	3201      	adds	r2, #1
   1c064:	2c00      	cmp	r4, #0
   1c066:	d1f8      	bne.n	1c05a <strnlen+0x6>
   1c068:	1a18      	subs	r0, r3, r0
   1c06a:	bd10      	pop	{r4, pc}

0001c06c <_vsniprintf_r>:
   1c06c:	b530      	push	{r4, r5, lr}
   1c06e:	4614      	mov	r4, r2
   1c070:	2c00      	cmp	r4, #0
   1c072:	b09b      	sub	sp, #108	; 0x6c
   1c074:	4605      	mov	r5, r0
   1c076:	461a      	mov	r2, r3
   1c078:	da05      	bge.n	1c086 <_vsniprintf_r+0x1a>
   1c07a:	238b      	movs	r3, #139	; 0x8b
   1c07c:	6003      	str	r3, [r0, #0]
   1c07e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c082:	b01b      	add	sp, #108	; 0x6c
   1c084:	bd30      	pop	{r4, r5, pc}
   1c086:	f44f 7302 	mov.w	r3, #520	; 0x208
   1c08a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1c08e:	bf14      	ite	ne
   1c090:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   1c094:	4623      	moveq	r3, r4
   1c096:	9302      	str	r3, [sp, #8]
   1c098:	9305      	str	r3, [sp, #20]
   1c09a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c09e:	9100      	str	r1, [sp, #0]
   1c0a0:	9104      	str	r1, [sp, #16]
   1c0a2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c0a6:	4669      	mov	r1, sp
   1c0a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1c0aa:	f7fb f941 	bl	17330 <_svfiprintf_r>
   1c0ae:	1c43      	adds	r3, r0, #1
   1c0b0:	bfbc      	itt	lt
   1c0b2:	238b      	movlt	r3, #139	; 0x8b
   1c0b4:	602b      	strlt	r3, [r5, #0]
   1c0b6:	2c00      	cmp	r4, #0
   1c0b8:	d0e3      	beq.n	1c082 <_vsniprintf_r+0x16>
   1c0ba:	9b00      	ldr	r3, [sp, #0]
   1c0bc:	2200      	movs	r2, #0
   1c0be:	701a      	strb	r2, [r3, #0]
   1c0c0:	e7df      	b.n	1c082 <_vsniprintf_r+0x16>

0001c0c2 <quorem>:
   1c0c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0c6:	6903      	ldr	r3, [r0, #16]
   1c0c8:	690c      	ldr	r4, [r1, #16]
   1c0ca:	42a3      	cmp	r3, r4
   1c0cc:	4607      	mov	r7, r0
   1c0ce:	f2c0 8081 	blt.w	1c1d4 <quorem+0x112>
   1c0d2:	3c01      	subs	r4, #1
   1c0d4:	f101 0814 	add.w	r8, r1, #20
   1c0d8:	f100 0514 	add.w	r5, r0, #20
   1c0dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1c0e0:	9301      	str	r3, [sp, #4]
   1c0e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   1c0e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1c0ea:	3301      	adds	r3, #1
   1c0ec:	429a      	cmp	r2, r3
   1c0ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   1c0f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   1c0f6:	fbb2 f6f3 	udiv	r6, r2, r3
   1c0fa:	d331      	bcc.n	1c160 <quorem+0x9e>
   1c0fc:	f04f 0e00 	mov.w	lr, #0
   1c100:	4640      	mov	r0, r8
   1c102:	46ac      	mov	ip, r5
   1c104:	46f2      	mov	sl, lr
   1c106:	f850 2b04 	ldr.w	r2, [r0], #4
   1c10a:	b293      	uxth	r3, r2
   1c10c:	fb06 e303 	mla	r3, r6, r3, lr
   1c110:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   1c114:	b29b      	uxth	r3, r3
   1c116:	ebaa 0303 	sub.w	r3, sl, r3
   1c11a:	0c12      	lsrs	r2, r2, #16
   1c11c:	f8dc a000 	ldr.w	sl, [ip]
   1c120:	fb06 e202 	mla	r2, r6, r2, lr
   1c124:	fa13 f38a 	uxtah	r3, r3, sl
   1c128:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   1c12c:	fa1f fa82 	uxth.w	sl, r2
   1c130:	f8dc 2000 	ldr.w	r2, [ip]
   1c134:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1c138:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1c13c:	b29b      	uxth	r3, r3
   1c13e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1c142:	4581      	cmp	r9, r0
   1c144:	f84c 3b04 	str.w	r3, [ip], #4
   1c148:	ea4f 4a22 	mov.w	sl, r2, asr #16
   1c14c:	d2db      	bcs.n	1c106 <quorem+0x44>
   1c14e:	f855 300b 	ldr.w	r3, [r5, fp]
   1c152:	b92b      	cbnz	r3, 1c160 <quorem+0x9e>
   1c154:	9b01      	ldr	r3, [sp, #4]
   1c156:	3b04      	subs	r3, #4
   1c158:	429d      	cmp	r5, r3
   1c15a:	461a      	mov	r2, r3
   1c15c:	d32e      	bcc.n	1c1bc <quorem+0xfa>
   1c15e:	613c      	str	r4, [r7, #16]
   1c160:	4638      	mov	r0, r7
   1c162:	f000 f8e2 	bl	1c32a <__mcmp>
   1c166:	2800      	cmp	r0, #0
   1c168:	db24      	blt.n	1c1b4 <quorem+0xf2>
   1c16a:	3601      	adds	r6, #1
   1c16c:	4628      	mov	r0, r5
   1c16e:	f04f 0c00 	mov.w	ip, #0
   1c172:	f858 2b04 	ldr.w	r2, [r8], #4
   1c176:	f8d0 e000 	ldr.w	lr, [r0]
   1c17a:	b293      	uxth	r3, r2
   1c17c:	ebac 0303 	sub.w	r3, ip, r3
   1c180:	0c12      	lsrs	r2, r2, #16
   1c182:	fa13 f38e 	uxtah	r3, r3, lr
   1c186:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   1c18a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1c18e:	b29b      	uxth	r3, r3
   1c190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1c194:	45c1      	cmp	r9, r8
   1c196:	f840 3b04 	str.w	r3, [r0], #4
   1c19a:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1c19e:	d2e8      	bcs.n	1c172 <quorem+0xb0>
   1c1a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1c1a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1c1a8:	b922      	cbnz	r2, 1c1b4 <quorem+0xf2>
   1c1aa:	3b04      	subs	r3, #4
   1c1ac:	429d      	cmp	r5, r3
   1c1ae:	461a      	mov	r2, r3
   1c1b0:	d30a      	bcc.n	1c1c8 <quorem+0x106>
   1c1b2:	613c      	str	r4, [r7, #16]
   1c1b4:	4630      	mov	r0, r6
   1c1b6:	b003      	add	sp, #12
   1c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1bc:	6812      	ldr	r2, [r2, #0]
   1c1be:	3b04      	subs	r3, #4
   1c1c0:	2a00      	cmp	r2, #0
   1c1c2:	d1cc      	bne.n	1c15e <quorem+0x9c>
   1c1c4:	3c01      	subs	r4, #1
   1c1c6:	e7c7      	b.n	1c158 <quorem+0x96>
   1c1c8:	6812      	ldr	r2, [r2, #0]
   1c1ca:	3b04      	subs	r3, #4
   1c1cc:	2a00      	cmp	r2, #0
   1c1ce:	d1f0      	bne.n	1c1b2 <quorem+0xf0>
   1c1d0:	3c01      	subs	r4, #1
   1c1d2:	e7eb      	b.n	1c1ac <quorem+0xea>
   1c1d4:	2000      	movs	r0, #0
   1c1d6:	e7ee      	b.n	1c1b6 <quorem+0xf4>

0001c1d8 <__sfmoreglue>:
   1c1d8:	b570      	push	{r4, r5, r6, lr}
   1c1da:	2268      	movs	r2, #104	; 0x68
   1c1dc:	1e4d      	subs	r5, r1, #1
   1c1de:	4355      	muls	r5, r2
   1c1e0:	460e      	mov	r6, r1
   1c1e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1c1e6:	f7f9 fdc3 	bl	15d70 <_malloc_r>
   1c1ea:	4604      	mov	r4, r0
   1c1ec:	b140      	cbz	r0, 1c200 <__sfmoreglue+0x28>
   1c1ee:	2100      	movs	r1, #0
   1c1f0:	e9c0 1600 	strd	r1, r6, [r0]
   1c1f4:	300c      	adds	r0, #12
   1c1f6:	60a0      	str	r0, [r4, #8]
   1c1f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1c1fc:	f7ff fdab 	bl	1bd56 <memset>
   1c200:	4620      	mov	r0, r4
   1c202:	bd70      	pop	{r4, r5, r6, pc}

0001c204 <_fwalk_reent>:
   1c204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c208:	4606      	mov	r6, r0
   1c20a:	4688      	mov	r8, r1
   1c20c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1c210:	2700      	movs	r7, #0
   1c212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1c216:	f1b9 0901 	subs.w	r9, r9, #1
   1c21a:	d505      	bpl.n	1c228 <_fwalk_reent+0x24>
   1c21c:	6824      	ldr	r4, [r4, #0]
   1c21e:	2c00      	cmp	r4, #0
   1c220:	d1f7      	bne.n	1c212 <_fwalk_reent+0xe>
   1c222:	4638      	mov	r0, r7
   1c224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c228:	89ab      	ldrh	r3, [r5, #12]
   1c22a:	2b01      	cmp	r3, #1
   1c22c:	d907      	bls.n	1c23e <_fwalk_reent+0x3a>
   1c22e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1c232:	3301      	adds	r3, #1
   1c234:	d003      	beq.n	1c23e <_fwalk_reent+0x3a>
   1c236:	4629      	mov	r1, r5
   1c238:	4630      	mov	r0, r6
   1c23a:	47c0      	blx	r8
   1c23c:	4307      	orrs	r7, r0
   1c23e:	3568      	adds	r5, #104	; 0x68
   1c240:	e7e9      	b.n	1c216 <_fwalk_reent+0x12>

0001c242 <__swhatbuf_r>:
   1c242:	b570      	push	{r4, r5, r6, lr}
   1c244:	460e      	mov	r6, r1
   1c246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c24a:	2900      	cmp	r1, #0
   1c24c:	b096      	sub	sp, #88	; 0x58
   1c24e:	4614      	mov	r4, r2
   1c250:	461d      	mov	r5, r3
   1c252:	da08      	bge.n	1c266 <__swhatbuf_r+0x24>
   1c254:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   1c258:	2200      	movs	r2, #0
   1c25a:	602a      	str	r2, [r5, #0]
   1c25c:	061a      	lsls	r2, r3, #24
   1c25e:	d410      	bmi.n	1c282 <__swhatbuf_r+0x40>
   1c260:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1c264:	e00e      	b.n	1c284 <__swhatbuf_r+0x42>
   1c266:	466a      	mov	r2, sp
   1c268:	f7fb f984 	bl	17574 <_fstat_r>
   1c26c:	2800      	cmp	r0, #0
   1c26e:	dbf1      	blt.n	1c254 <__swhatbuf_r+0x12>
   1c270:	9a01      	ldr	r2, [sp, #4]
   1c272:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1c276:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   1c27a:	425a      	negs	r2, r3
   1c27c:	415a      	adcs	r2, r3
   1c27e:	602a      	str	r2, [r5, #0]
   1c280:	e7ee      	b.n	1c260 <__swhatbuf_r+0x1e>
   1c282:	2340      	movs	r3, #64	; 0x40
   1c284:	2000      	movs	r0, #0
   1c286:	6023      	str	r3, [r4, #0]
   1c288:	b016      	add	sp, #88	; 0x58
   1c28a:	bd70      	pop	{r4, r5, r6, pc}

0001c28c <__hi0bits>:
   1c28c:	0c03      	lsrs	r3, r0, #16
   1c28e:	041b      	lsls	r3, r3, #16
   1c290:	b9d3      	cbnz	r3, 1c2c8 <__hi0bits+0x3c>
   1c292:	0400      	lsls	r0, r0, #16
   1c294:	2310      	movs	r3, #16
   1c296:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   1c29a:	bf04      	itt	eq
   1c29c:	0200      	lsleq	r0, r0, #8
   1c29e:	3308      	addeq	r3, #8
   1c2a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   1c2a4:	bf04      	itt	eq
   1c2a6:	0100      	lsleq	r0, r0, #4
   1c2a8:	3304      	addeq	r3, #4
   1c2aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   1c2ae:	bf04      	itt	eq
   1c2b0:	0080      	lsleq	r0, r0, #2
   1c2b2:	3302      	addeq	r3, #2
   1c2b4:	2800      	cmp	r0, #0
   1c2b6:	db05      	blt.n	1c2c4 <__hi0bits+0x38>
   1c2b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   1c2bc:	f103 0301 	add.w	r3, r3, #1
   1c2c0:	bf08      	it	eq
   1c2c2:	2320      	moveq	r3, #32
   1c2c4:	4618      	mov	r0, r3
   1c2c6:	4770      	bx	lr
   1c2c8:	2300      	movs	r3, #0
   1c2ca:	e7e4      	b.n	1c296 <__hi0bits+0xa>

0001c2cc <__lo0bits>:
   1c2cc:	6803      	ldr	r3, [r0, #0]
   1c2ce:	f013 0207 	ands.w	r2, r3, #7
   1c2d2:	4601      	mov	r1, r0
   1c2d4:	d00b      	beq.n	1c2ee <__lo0bits+0x22>
   1c2d6:	07da      	lsls	r2, r3, #31
   1c2d8:	d423      	bmi.n	1c322 <__lo0bits+0x56>
   1c2da:	0798      	lsls	r0, r3, #30
   1c2dc:	bf49      	itett	mi
   1c2de:	085b      	lsrmi	r3, r3, #1
   1c2e0:	089b      	lsrpl	r3, r3, #2
   1c2e2:	2001      	movmi	r0, #1
   1c2e4:	600b      	strmi	r3, [r1, #0]
   1c2e6:	bf5c      	itt	pl
   1c2e8:	600b      	strpl	r3, [r1, #0]
   1c2ea:	2002      	movpl	r0, #2
   1c2ec:	4770      	bx	lr
   1c2ee:	b298      	uxth	r0, r3
   1c2f0:	b9a8      	cbnz	r0, 1c31e <__lo0bits+0x52>
   1c2f2:	0c1b      	lsrs	r3, r3, #16
   1c2f4:	2010      	movs	r0, #16
   1c2f6:	b2da      	uxtb	r2, r3
   1c2f8:	b90a      	cbnz	r2, 1c2fe <__lo0bits+0x32>
   1c2fa:	3008      	adds	r0, #8
   1c2fc:	0a1b      	lsrs	r3, r3, #8
   1c2fe:	071a      	lsls	r2, r3, #28
   1c300:	bf04      	itt	eq
   1c302:	091b      	lsreq	r3, r3, #4
   1c304:	3004      	addeq	r0, #4
   1c306:	079a      	lsls	r2, r3, #30
   1c308:	bf04      	itt	eq
   1c30a:	089b      	lsreq	r3, r3, #2
   1c30c:	3002      	addeq	r0, #2
   1c30e:	07da      	lsls	r2, r3, #31
   1c310:	d403      	bmi.n	1c31a <__lo0bits+0x4e>
   1c312:	085b      	lsrs	r3, r3, #1
   1c314:	f100 0001 	add.w	r0, r0, #1
   1c318:	d005      	beq.n	1c326 <__lo0bits+0x5a>
   1c31a:	600b      	str	r3, [r1, #0]
   1c31c:	4770      	bx	lr
   1c31e:	4610      	mov	r0, r2
   1c320:	e7e9      	b.n	1c2f6 <__lo0bits+0x2a>
   1c322:	2000      	movs	r0, #0
   1c324:	4770      	bx	lr
   1c326:	2020      	movs	r0, #32
   1c328:	4770      	bx	lr

0001c32a <__mcmp>:
   1c32a:	b530      	push	{r4, r5, lr}
   1c32c:	6902      	ldr	r2, [r0, #16]
   1c32e:	690c      	ldr	r4, [r1, #16]
   1c330:	1b12      	subs	r2, r2, r4
   1c332:	d10e      	bne.n	1c352 <__mcmp+0x28>
   1c334:	f100 0314 	add.w	r3, r0, #20
   1c338:	3114      	adds	r1, #20
   1c33a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   1c33e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1c342:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   1c346:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   1c34a:	42a5      	cmp	r5, r4
   1c34c:	d003      	beq.n	1c356 <__mcmp+0x2c>
   1c34e:	d305      	bcc.n	1c35c <__mcmp+0x32>
   1c350:	2201      	movs	r2, #1
   1c352:	4610      	mov	r0, r2
   1c354:	bd30      	pop	{r4, r5, pc}
   1c356:	4283      	cmp	r3, r0
   1c358:	d3f3      	bcc.n	1c342 <__mcmp+0x18>
   1c35a:	e7fa      	b.n	1c352 <__mcmp+0x28>
   1c35c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c360:	e7f7      	b.n	1c352 <__mcmp+0x28>

0001c362 <_realloc_r>:
   1c362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c364:	4607      	mov	r7, r0
   1c366:	4614      	mov	r4, r2
   1c368:	460e      	mov	r6, r1
   1c36a:	b921      	cbnz	r1, 1c376 <_realloc_r+0x14>
   1c36c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c370:	4611      	mov	r1, r2
   1c372:	f7f9 bcfd 	b.w	15d70 <_malloc_r>
   1c376:	b922      	cbnz	r2, 1c382 <_realloc_r+0x20>
   1c378:	f7f9 fcae 	bl	15cd8 <_free_r>
   1c37c:	4625      	mov	r5, r4
   1c37e:	4628      	mov	r0, r5
   1c380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c382:	f000 f8c4 	bl	1c50e <_malloc_usable_size_r>
   1c386:	42a0      	cmp	r0, r4
   1c388:	d20f      	bcs.n	1c3aa <_realloc_r+0x48>
   1c38a:	4621      	mov	r1, r4
   1c38c:	4638      	mov	r0, r7
   1c38e:	f7f9 fcef 	bl	15d70 <_malloc_r>
   1c392:	4605      	mov	r5, r0
   1c394:	2800      	cmp	r0, #0
   1c396:	d0f2      	beq.n	1c37e <_realloc_r+0x1c>
   1c398:	4631      	mov	r1, r6
   1c39a:	4622      	mov	r2, r4
   1c39c:	f7ff fca0 	bl	1bce0 <memcpy>
   1c3a0:	4631      	mov	r1, r6
   1c3a2:	4638      	mov	r0, r7
   1c3a4:	f7f9 fc98 	bl	15cd8 <_free_r>
   1c3a8:	e7e9      	b.n	1c37e <_realloc_r+0x1c>
   1c3aa:	4635      	mov	r5, r6
   1c3ac:	e7e7      	b.n	1c37e <_realloc_r+0x1c>

0001c3ae <__ssputs_r>:
   1c3ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c3b2:	688e      	ldr	r6, [r1, #8]
   1c3b4:	429e      	cmp	r6, r3
   1c3b6:	4682      	mov	sl, r0
   1c3b8:	460c      	mov	r4, r1
   1c3ba:	4690      	mov	r8, r2
   1c3bc:	461f      	mov	r7, r3
   1c3be:	d838      	bhi.n	1c432 <__ssputs_r+0x84>
   1c3c0:	898a      	ldrh	r2, [r1, #12]
   1c3c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1c3c6:	d032      	beq.n	1c42e <__ssputs_r+0x80>
   1c3c8:	6825      	ldr	r5, [r4, #0]
   1c3ca:	6909      	ldr	r1, [r1, #16]
   1c3cc:	eba5 0901 	sub.w	r9, r5, r1
   1c3d0:	6965      	ldr	r5, [r4, #20]
   1c3d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c3d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1c3da:	3301      	adds	r3, #1
   1c3dc:	444b      	add	r3, r9
   1c3de:	106d      	asrs	r5, r5, #1
   1c3e0:	429d      	cmp	r5, r3
   1c3e2:	bf38      	it	cc
   1c3e4:	461d      	movcc	r5, r3
   1c3e6:	0553      	lsls	r3, r2, #21
   1c3e8:	d531      	bpl.n	1c44e <__ssputs_r+0xa0>
   1c3ea:	4629      	mov	r1, r5
   1c3ec:	f7f9 fcc0 	bl	15d70 <_malloc_r>
   1c3f0:	4606      	mov	r6, r0
   1c3f2:	b950      	cbnz	r0, 1c40a <__ssputs_r+0x5c>
   1c3f4:	230c      	movs	r3, #12
   1c3f6:	f8ca 3000 	str.w	r3, [sl]
   1c3fa:	89a3      	ldrh	r3, [r4, #12]
   1c3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c400:	81a3      	strh	r3, [r4, #12]
   1c402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c40a:	6921      	ldr	r1, [r4, #16]
   1c40c:	464a      	mov	r2, r9
   1c40e:	f7ff fc67 	bl	1bce0 <memcpy>
   1c412:	89a3      	ldrh	r3, [r4, #12]
   1c414:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1c418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c41c:	81a3      	strh	r3, [r4, #12]
   1c41e:	6126      	str	r6, [r4, #16]
   1c420:	6165      	str	r5, [r4, #20]
   1c422:	444e      	add	r6, r9
   1c424:	eba5 0509 	sub.w	r5, r5, r9
   1c428:	6026      	str	r6, [r4, #0]
   1c42a:	60a5      	str	r5, [r4, #8]
   1c42c:	463e      	mov	r6, r7
   1c42e:	42be      	cmp	r6, r7
   1c430:	d900      	bls.n	1c434 <__ssputs_r+0x86>
   1c432:	463e      	mov	r6, r7
   1c434:	6820      	ldr	r0, [r4, #0]
   1c436:	4632      	mov	r2, r6
   1c438:	4641      	mov	r1, r8
   1c43a:	f7ff fc72 	bl	1bd22 <memmove>
   1c43e:	68a3      	ldr	r3, [r4, #8]
   1c440:	1b9b      	subs	r3, r3, r6
   1c442:	60a3      	str	r3, [r4, #8]
   1c444:	6823      	ldr	r3, [r4, #0]
   1c446:	4433      	add	r3, r6
   1c448:	6023      	str	r3, [r4, #0]
   1c44a:	2000      	movs	r0, #0
   1c44c:	e7db      	b.n	1c406 <__ssputs_r+0x58>
   1c44e:	462a      	mov	r2, r5
   1c450:	f7ff ff87 	bl	1c362 <_realloc_r>
   1c454:	4606      	mov	r6, r0
   1c456:	2800      	cmp	r0, #0
   1c458:	d1e1      	bne.n	1c41e <__ssputs_r+0x70>
   1c45a:	6921      	ldr	r1, [r4, #16]
   1c45c:	4650      	mov	r0, sl
   1c45e:	f7f9 fc3b 	bl	15cd8 <_free_r>
   1c462:	e7c7      	b.n	1c3f4 <__ssputs_r+0x46>

0001c464 <__sread>:
   1c464:	b510      	push	{r4, lr}
   1c466:	460c      	mov	r4, r1
   1c468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c46c:	f7fb f8b6 	bl	175dc <_read_r>
   1c470:	2800      	cmp	r0, #0
   1c472:	bfab      	itete	ge
   1c474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   1c476:	89a3      	ldrhlt	r3, [r4, #12]
   1c478:	181b      	addge	r3, r3, r0
   1c47a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   1c47e:	bfac      	ite	ge
   1c480:	6563      	strge	r3, [r4, #84]	; 0x54
   1c482:	81a3      	strhlt	r3, [r4, #12]
   1c484:	bd10      	pop	{r4, pc}

0001c486 <__swrite>:
   1c486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c48a:	461f      	mov	r7, r3
   1c48c:	898b      	ldrh	r3, [r1, #12]
   1c48e:	05db      	lsls	r3, r3, #23
   1c490:	4605      	mov	r5, r0
   1c492:	460c      	mov	r4, r1
   1c494:	4616      	mov	r6, r2
   1c496:	d505      	bpl.n	1c4a4 <__swrite+0x1e>
   1c498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c49c:	2302      	movs	r3, #2
   1c49e:	2200      	movs	r2, #0
   1c4a0:	f7fb f88a 	bl	175b8 <_lseek_r>
   1c4a4:	89a3      	ldrh	r3, [r4, #12]
   1c4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1c4aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1c4ae:	81a3      	strh	r3, [r4, #12]
   1c4b0:	4632      	mov	r2, r6
   1c4b2:	463b      	mov	r3, r7
   1c4b4:	4628      	mov	r0, r5
   1c4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c4ba:	f7fb b839 	b.w	17530 <_write_r>

0001c4be <__sseek>:
   1c4be:	b510      	push	{r4, lr}
   1c4c0:	460c      	mov	r4, r1
   1c4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c4c6:	f7fb f877 	bl	175b8 <_lseek_r>
   1c4ca:	1c43      	adds	r3, r0, #1
   1c4cc:	89a3      	ldrh	r3, [r4, #12]
   1c4ce:	bf15      	itete	ne
   1c4d0:	6560      	strne	r0, [r4, #84]	; 0x54
   1c4d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1c4d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1c4da:	81a3      	strheq	r3, [r4, #12]
   1c4dc:	bf18      	it	ne
   1c4de:	81a3      	strhne	r3, [r4, #12]
   1c4e0:	bd10      	pop	{r4, pc}

0001c4e2 <__sclose>:
   1c4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1c4e6:	f7fb b835 	b.w	17554 <_close_r>

0001c4ea <__ascii_mbtowc>:
   1c4ea:	b082      	sub	sp, #8
   1c4ec:	b901      	cbnz	r1, 1c4f0 <__ascii_mbtowc+0x6>
   1c4ee:	a901      	add	r1, sp, #4
   1c4f0:	b142      	cbz	r2, 1c504 <__ascii_mbtowc+0x1a>
   1c4f2:	b14b      	cbz	r3, 1c508 <__ascii_mbtowc+0x1e>
   1c4f4:	7813      	ldrb	r3, [r2, #0]
   1c4f6:	600b      	str	r3, [r1, #0]
   1c4f8:	7812      	ldrb	r2, [r2, #0]
   1c4fa:	1e10      	subs	r0, r2, #0
   1c4fc:	bf18      	it	ne
   1c4fe:	2001      	movne	r0, #1
   1c500:	b002      	add	sp, #8
   1c502:	4770      	bx	lr
   1c504:	4610      	mov	r0, r2
   1c506:	e7fb      	b.n	1c500 <__ascii_mbtowc+0x16>
   1c508:	f06f 0001 	mvn.w	r0, #1
   1c50c:	e7f8      	b.n	1c500 <__ascii_mbtowc+0x16>

0001c50e <_malloc_usable_size_r>:
   1c50e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1c512:	1f18      	subs	r0, r3, #4
   1c514:	2b00      	cmp	r3, #0
   1c516:	bfbc      	itt	lt
   1c518:	580b      	ldrlt	r3, [r1, r0]
   1c51a:	18c0      	addlt	r0, r0, r3
   1c51c:	4770      	bx	lr

0001c51e <__ascii_wctomb>:
   1c51e:	b149      	cbz	r1, 1c534 <__ascii_wctomb+0x16>
   1c520:	2aff      	cmp	r2, #255	; 0xff
   1c522:	bf85      	ittet	hi
   1c524:	238a      	movhi	r3, #138	; 0x8a
   1c526:	6003      	strhi	r3, [r0, #0]
   1c528:	700a      	strbls	r2, [r1, #0]
   1c52a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   1c52e:	bf98      	it	ls
   1c530:	2001      	movls	r0, #1
   1c532:	4770      	bx	lr
   1c534:	4608      	mov	r0, r1
   1c536:	4770      	bx	lr

0001c538 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1c538:	f7f0 b932 	b.w	c7a0 <SystemInit>
