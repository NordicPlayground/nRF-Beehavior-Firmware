/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.06.2022 10:26:38

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7280;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3136 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0036458333488553762, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { 567, -13380, -4428, -4978, -493, -1367, -347, -918, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 0.00010805938654812053, 3.9233840652741492e-05, 4.6986802772153169e-05, 6.9974797952454537e-05, 7.6635209552478045e-05, 4.6268618461908773e-05, 9.8135598818771541e-05, 5.2406718168640509e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 1031, -1725, -1966, 388, -1429, -547, -657, 143, -389, -841, 10, -968, -779, -608, -297, -59, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00023834581952542067, 0.00024697303888387978, 0.00032605102751404047, 0.00024402410781476647, 0.00023761343618389219, 0.00019481974595692009, 0.00027089274954050779, 0.00035697399289347231, 0.00027631359989754856, 0.00014632327656727284, 0.00028661155374720693, 0.00030685836100019515, 0.00022962513321544975, 0.00034889561356976628, 0.00013591894821729511, 0.00052067067008465528, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 117, 1507, -1589, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00084930669981986284, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*400] = { 
  -97, -21, -21, -34, -9, 31, -5, 23, 25, 10, -65, 5, -10, -9, -13, 37, -67, -23, -33, 15, -16, 6, -15, 23, 1, -5, -13, -4, 5, -1, -8, 21, -46, 4, -30, -22, -37, 3, -54, 10, 22, -3, -28, -5, -3, -41, -24, 30, -29, 6, -46, 14, 3, 20, -19, 22, 24, 2, -34, -31, 6, -29, 44, 32, -33, -47, 4, 6, 17, 16, 1, 10, 27, 23, 7, 4, 6, -14, 32, 29, -93, -44, -34, -14, 3, 24, 0, 32, 19, -13, -21, -21, -7, -18, -10, 37, -56, -42, 10, -4, 3, 6, -26, 18, 35, -1, -34, -12, -8, -30, -29, 10, -75, -24, 9, -31, 4, -4, -8, 14, 22, -28, -17, -30, -25, -7, -54, 11, -60, -28, -10, -42, -16, 4, -6, 10, 10, -15, -26, 9, -16, -14, -52, 8, -21, 37, -45, -20, -2, 10, -20, 11, -2, -24, -22, -4, -29, -44, -27, 14, -57, 0, -31, 5, 11, 18, -6, 22, 19, -24, -30, -22, 12, -4, 3, 15, -54, -30, 45, -14, 5, 18, 22, 20, 35, -9, -38, 9, -15, -12, -38, 4, -38, -10, 10, -6, -16, 3, 2, 20, 0, -31, -63, -23, -11, -6, -32, 9, -82, -30, -33, -1, -37, 8, 23, 18, 13, 13, -11, -31, -19, -21, -9, 18, -84, -26, 30, 9, -8, 4, -25, 44, 15, -67, -62, -12, 15, -2, -25, 1, -80, 20, -18, -4, -18, -10, -21, 21, 7, 6, -57, -2, 15, -13, -18, -5, -65, -8, 12, -13, 19, 15, -1, 33, 21, -12, -93, 0, -7, -11, -12, -11, -68, 26, -33, -21, 21, 0, -2, 23, 31, -11, -3, -29, 7, -55, 17, 6, -71, -24, -17, -15, 14, -22, -25, 12, 9, -4, -38, 6, -9, 3, 35, 12, -61, 30, 19, -22, 4, 0, -18, 33, 14, 3, -43, 9, 22, -13, 1, 36, -96, -3, -9, -22, 20, 7, 6, 31, 38, -5, -57, 11, -19, -21, 1, 18, -93, 12, 3, -10, -19, -6, -10, 20, 20, 3, -63, -16, 5, -19, -13, 27, -116, 12, 18, 6, 19, 6, 20, 5, 8, -16, -68, 8, 2, -20, -10, 34, -112, -15, -17, 6, -7, 2, -17, 10, 13, 33, -73, -12, -2, -19, 7, 8, -127, 11, -46, 2, 2, 11, -17, 7, -4, 1, -68, -40, -5, 28, 1, -15, 
  -3, 4, 8, -11, 5, 37, -15, -25, 7, 2, 25, 0, 4, 5, 13, 11, 12, -17, -16, -2, -4, 11, 2, -24, 9, 2, 11, -8, 15, 1, 1, 33, 8, -5, 1, -2, -6, 30, 3, -33, -11, 8, 18, -15, 8, -12, 5, 13, 4, -5, -10, 2, -20, -9, -15, -55, -27, 11, 10, -8, 3, 3, 5, 10, 7, -3, -27, 0, -3, -7, -17, -21, -36, -4, 17, -4, 11, -6, 2, 19, -2, -10, -12, -11, -15, -12, -19, -18, -10, -6, 14, -1, 9, -13, -2, 18, 6, -2, -16, -5, -13, -11, -20, -14, -34, -3, 0, -20, -12, -19, -3, 27, 15, -20, -4, 6, -11, -13, -23, -25, -7, 0, -1, 1, 11, 5, -2, 11, 23, -18, -16, 4, -17, 2, -12, -3, -6, -5, 17, -20, 15, -10, -9, 5, 7, -4, -29, 15, -8, 18, -6, -20, -20, -3, 1, -9, 14, -19, 1, 23, 3, -13, -12, -1, -5, -35, -21, -35, -20, -13, 5, -11, 5, -27, 2, 1, 3, -10, -9, 10, -13, -27, -35, -18, -31, 5, -6, -9, 29, -42, -8, 15, 18, 11, -26, 0, -9, 0, -30, -13, -21, -15, 1, -10, 5, -28, 5, 4, 5, -17, 4, 7, -3, -6, -28, -17, -38, -22, 9, -7, 1, -20, -9, -3, 14, -12, -39, 6, -12, 7, -21, -25, -17, -4, 3, -18, 5, -15, -8, 13, 24, -6, -31, 24, -6, -12, -13, -38, -30, -12, 8, -19, 7, -13, -3, 1, 12, -1, -18, 9, -13, -8, -12, -47, -33, 7, 6, 4, 11, -19, -2, 11, 10, 7, -8, 21, -9, -12, -15, 0, -18, 6, 4, -11, 23, 2, -4, 26, 9, -4, 11, 11, -6, 4, 0, -11, -25, 7, 13, -13, 28, -30, 9, 8, 0, -16, -24, 8, -4, -3, -27, -29, -18, 8, 7, -15, -3, 3, 4, -2, 12, 14, -8, 23, -27, -7, -2, -11, -21, 1, 9, -8, 9, 8, 4, 10, 7, 1, -10, 13, -12, -20, -5, -26, -21, 17, 26, -20, 13, -3, 11, 9, 8, -11, -35, 9, -18, -17, -2, -22, -25, 20, 25, -1, 3, -8, 9, -14, 4, 11, -46, 15, -5, -2, -28, -16, -34, 10, 20, -14, 11, 2, 28, 7, -1, 10, 6, 8, -15, -10, -3, -16, 4, 32, 16, 28, 13, 17, 30, -13, 
  10, -2, -4, 18, 2, -57, 13, 4, -20, -6, -20, -3, 0, -2, -15, -37, -14, 29, 32, -1, 13, -14, -3, 1, -14, 3, -17, 13, -11, -1, 3, -43, -3, 7, 17, 7, 12, -22, 10, 16, -6, -8, -14, 19, -13, 18, -3, -23, -3, 1, 15, -6, 11, -6, 23, 29, 4, -7, -4, 8, -8, 1, -15, -22, 0, 20, 25, -2, -2, 4, 18, 8, 19, -4, -13, -1, -13, 7, -15, -40, 11, 20, 19, 10, 17, -3, 23, -7, -5, 4, -8, 5, -4, 15, 5, -36, 1, 12, 19, 4, 18, 13, 28, -2, 19, 7, -1, 24, 22, 29, 2, -24, -13, 29, -4, 5, 13, 16, 27, 12, -15, 10, 2, 11, 2, -3, 13, -15, -14, 18, 21, 3, 20, -1, 10, -2, -4, 8, -5, 14, -2, 10, 12, -3, -9, -3, 34, -8, 9, -22, 12, 12, 25, 8, 2, 17, 2, 26, -1, -25, 0, 16, 24, 1, -5, 28, 26, 12, 11, 18, 4, 16, -2, 26, 7, -7, 5, 8, -3, -8, 13, 21, 26, -2, 7, 4, 7, 7, -20, 43, 10, -18, -9, -7, 21, -1, 13, -4, 30, 4, 18, 16, 5, 14, -4, 28, 3, -8, 4, 25, 2, -5, 5, 4, 27, 5, 26, 11, -3, 9, 1, 21, 7, -5, -6, 16, 30, -5, 14, -11, 28, -9, -2, 8, 0, 33, -13, 12, 11, -10, -15, 5, 36, -22, 13, 22, 17, 6, 21, 12, 4, 17, -10, 16, 6, 9, -3, 6, 18, 0, 2, 9, 17, 9, 20, -4, 11, 2, -6, 25, -1, -5, -4, -8, 15, -15, 8, 6, 13, -19, -8, -4, -3, 15, -21, 17, -3, -32, -3, 10, 1, -13, 7, 8, 5, -4, 8, -14, -12, 12, -30, 28, -20, -12, 0, 9, 18, 0, 9, 5, 32, 4, 9, -4, 0, 8, -13, -4, -5, -18, -2, -3, 6, -20, 16, 5, 3, -23, 0, -4, -3, -5, -1, -3, -8, -28, 0, -5, 16, -11, 17, 23, 14, 7, 1, -15, -17, 24, -13, 4, -5, -12, 3, 8, 27, -12, 16, 10, -2, 6, 15, -26, -16, 6, -16, 6, -9, -12, 6, -1, 53, -20, 5, 0, 29, 5, 18, -19, -7, 18, -11, 5, -26, -10, 12, -12, 3, 2, 6, 5, 10, 5, -1, -36, -3, -20, -16, -21, -27, 17, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,400 } };
const TfArray<1, float> quant5_scale = { 1, { 0.026717193424701691, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*32] = { 
  /* [0][0][][] */ -89,-84,-31,-21,-53,20,-11,-3,-3,-17,-1,54,3,-27,-25,-30,-21,-14,-12,9,-15,-9,21,-5,-9,16,16,10,-18,-15,-15,-6, -122,-127,-53,-56,-116,6,-48,-56,-42,-2,50,3,-8,18,23,0,-10,-18,24,1,-14,-11,6,-1,-15,-3,26,13,-21,-1,-7,-15, -34,16,8,13,-8,39,-21,1,2,-6,-2,17,-5,-9,-21,-15,-11,6,31,44,2,4,27,-5,-23,8,28,15,-1,12,5,-2, 
  /* [1][0][][] */ 106,104,-5,-7,6,39,-18,-43,-27,-34,-7,-40,6,27,-37,-71,-10,-33,-18,-16,-26,13,-72,-55,-31,-40,-20,14,-26,10,-24,-5, 127,17,-34,-37,-70,0,-99,-19,-31,11,31,45,79,83,41,-17,39,121,54,31,-21,20,-28,3,27,34,36,52,29,11,-3,13, 122,23,3,-4,5,-24,-39,9,3,18,-5,-44,9,39,-1,27,39,77,5,-7,-5,17,-13,-27,17,-9,22,32,15,-30,-62,-5, 
  /* [2][0][][] */ -16,40,-26,1,-43,-1,39,-11,-31,-28,-4,-41,-57,-12,-19,-16,-34,10,-8,-29,12,18,-62,-55,-73,-40,-28,-1,25,2,5,2, 26,67,17,31,4,21,27,24,15,26,6,-10,-21,10,18,7,3,16,26,-14,42,-3,-34,-53,-39,-54,-40,46,29,-33,-33,-15, -97,-120,-127,-102,-70,-15,31,40,38,43,15,-6,1,23,92,66,39,66,73,36,48,35,12,13,2,-28,29,51,49,0,-31,-57, 
  /* [3][0][][] */ -62,-22,-65,-50,-21,18,40,66,55,25,10,8,23,17,44,1,-25,-16,-69,-47,17,12,-2,-8,19,6,-27,-20,-14,-30,1,-8, -20,-11,-22,-18,-12,29,35,34,39,36,12,26,22,16,49,27,-13,6,-31,-6,13,-14,-12,11,24,9,-38,-13,-10,-40,-28,-58, -127,-33,-66,-63,-87,-4,-31,-8,-11,-34,-17,-4,8,-14,32,16,21,17,10,-17,28,27,14,15,19,7,12,51,50,-7,-8,-29, 
  /* [4][0][][] */ 69,35,17,29,-18,21,-24,-4,-16,-35,-41,-80,-29,-16,38,3,-15,15,-5,-69,-66,-5,-118,-40,7,-127,-105,-108,-90,-73,-34,51, 51,-12,2,3,-21,60,43,8,-2,-34,-72,-79,-108,-95,-24,22,16,38,50,47,33,42,0,-12,33,-78,0,16,3,-18,10,121, 60,8,3,15,-11,17,57,9,-3,31,38,36,18,-35,47,21,-61,-13,35,1,22,1,-8,-5,13,-39,-14,-104,-106,-104,-12,29, 
  /* [5][0][][] */ 120,40,41,41,30,7,45,2,17,29,35,23,48,24,-25,-10,-28,-10,15,16,-45,0,12,-8,26,31,23,-20,-18,-2,19,37, 75,-8,-3,15,-26,-29,21,-29,-33,-1,-19,-26,-8,-8,-49,-61,-127,-66,-36,-103,-111,-71,-46,-59,-20,11,36,-37,-46,-39,-35,-12, 122,32,72,70,38,53,39,31,17,34,18,16,-8,10,-32,-41,-48,-44,-31,-36,-57,-32,-19,-4,19,6,35,28,4,30,16,46, 
  /* [6][0][][] */ -93,5,6,7,-11,34,23,12,2,-40,3,67,5,-12,5,-5,-12,-16,-9,29,-26,-7,7,-78,-71,-10,-88,-74,-30,7,-127,-97, -92,0,-4,4,-14,16,-19,36,29,-59,5,72,-16,0,-8,-9,-16,-19,-12,40,-21,-17,-1,-53,-64,11,-99,-65,-45,-24,-123,-93, -80,-11,-3,-1,-10,3,20,6,4,-53,12,50,-36,6,7,1,-15,-18,-12,37,-9,-29,21,-63,-27,6,-87,-73,-38,5,-83,-42, 
  /* [7][0][][] */ -8,-26,-29,-16,15,-11,-12,11,2,35,-79,-90,-89,2,32,46,11,51,68,22,34,39,6,19,24,23,47,53,47,8,-38,-42, 42,6,14,10,40,-7,17,4,-1,21,-37,-16,-73,1,56,61,38,10,7,-7,17,12,-36,-22,-25,-42,-13,-11,20,-56,-63,-127, 22,34,28,14,48,-5,26,4,6,10,-53,-15,-69,-35,-13,8,-5,-17,-15,-51,-9,6,-42,-6,-25,-24,-36,38,63,9,-43,-76, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,32 } };
const TfArray<8, float> quant6_scale = { 8, { 0.029639145359396935, 0.010761281475424767, 0.012887808494269848, 0.01919308677315712, 0.021019943058490753, 0.01269082073122263, 0.026917193084955215, 0.014374414458870888, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ 50,-35,-34,-7,-40,-115,88,0, 33,-69,-30,-9,-69,-127,58,-55, 18,-35,-27,-26,-29,6,40,-56, 
  /* [1][0][][] */ -72,-10,-127,-44,-94,-112,-73,56, -25,-22,20,-21,-36,-90,-72,-52, 28,29,14,58,50,-12,-37,29, 
  /* [2][0][][] */ -11,1,22,42,127,3,-18,-71, 44,8,-27,-8,-54,-22,-8,33, -14,-74,-106,-55,-119,-33,-32,3, 
  /* [3][0][][] */ -4,-14,-91,-15,-86,14,6,-11, 8,-44,-56,-8,-96,38,127,9, 42,-12,4,-15,-28,14,56,-72, 
  /* [4][0][][] */ 15,19,43,6,71,-127,-111,-16, -52,-8,-110,-2,-77,-75,-107,41, 21,-13,38,7,122,-62,-59,-16, 
  /* [5][0][][] */ -21,-12,-82,51,45,-14,-85,99, -98,-13,-46,-22,47,-47,-83,-46, -83,0,-94,-40,38,-71,-127,11, 
  /* [6][0][][] */ 12,-8,20,77,101,26,-20,22, -25,-33,-125,-73,-51,4,-63,3, -2,-110,-45,-122,-127,-101,-87,-36, 
  /* [7][0][][] */ -83,-77,-53,-80,18,13,-13,31, -63,-127,-36,-105,36,3,-1,-9, -55,-75,-3,22,59,21,27,-4, 
  /* [8][0][][] */ -40,-14,46,-86,3,10,-25,43, -66,-48,-29,31,127,6,18,-13, 2,-53,-65,-57,-77,-20,19,-33, 
  /* [9][0][][] */ -42,-9,-8,23,-38,41,-73,-22, 54,69,-69,-14,-127,17,74,-39, -32,-10,-11,-114,-104,-74,-40,-29, 
  /* [10][0][][] */ 48,-2,11,-13,-54,-25,29,-70, 46,-14,-4,-5,-80,22,108,-102, 5,10,-14,-9,-59,-2,127,-75, 
  /* [11][0][][] */ 8,-25,1,-21,-126,-106,-28,-18, -5,31,2,-5,-47,-45,-55,11, 6,-36,-19,41,127,-33,-31,20, 
  /* [12][0][][] */ -28,5,-15,-4,-53,0,106,-39, -79,-3,-42,-7,-35,-26,127,12, 8,-12,-9,-30,-32,45,51,-25, 
  /* [13][0][][] */ -24,14,0,-1,-93,-127,-66,-55, -14,-19,11,-27,-46,-56,-75,-43, 35,-19,-18,55,91,1,-28,-31, 
  /* [14][0][][] */ -91,17,31,18,-127,54,83,-80, -22,25,-121,31,-54,-40,59,-59, -18,31,37,-52,-95,-20,3,-63, 
  /* [15][0][][] */ -71,6,-39,-45,25,-1,-34,-27, -127,9,-52,-84,17,-2,-6,15, 5,-42,-30,-52,6,-2,-69,34, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.012083166278898716, 0.012520532123744488, 0.016529465094208717, 0.012371032498776913, 0.012046037241816521, 0.0098765706643462181, 0.01373316440731287, 0.018097134307026863, 0.014007979072630405, 0.0074179964140057564, 0.014530043117702007, 0.015556474216282368, 0.011641062796115875, 0.017687592655420303, 0.0068905395455658436, 0.026395892724394798, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 98, 32, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 98, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 49, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 49, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,98,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0036458333488553762, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,98,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.019725443795323372, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,98,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.019725443795323372, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,49,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.019725443795323372, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,49,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.019725443795323372, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,49,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.031788770109415054, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,49,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.031788770109415054, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.031788770109415054, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.031788770109415054, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 1.0208544731140137, } };
const TfArray<1, int> quant21_zero = { 1, { 54 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension13, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension17, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
