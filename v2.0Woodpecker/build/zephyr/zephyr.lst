
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20004300 	.word	0x20004300
   4:	0000c981 	.word	0x0000c981
   8:	00015433 	.word	0x00015433
   c:	0000c955 	.word	0x0000c955
  10:	0000c955 	.word	0x0000c955
  14:	0000c955 	.word	0x0000c955
  18:	0000c955 	.word	0x0000c955
	...
  2c:	0000c591 	.word	0x0000c591
  30:	0000c955 	.word	0x0000c955
  34:	00000000 	.word	0x00000000
  38:	0000c501 	.word	0x0000c501
  3c:	0000c955 	.word	0x0000c955

00000040 <_irq_vector_table>:
  40:	0000c709 0000c709 0000c709 0000c709     ................
  50:	0000c709 0000c709 0000c709 0000c709     ................
  60:	0000c709 0000c709 0000c709 0000c709     ................
  70:	0000c709 0000c709 0000c709 0000c709     ................
  80:	0000c709 0000c709 0000c709 0000c709     ................
  90:	0000c709 0000c709 0000c709 0000c709     ................
  a0:	0000c709 0000c709 0000c709 0000c709     ................
  b0:	0000c709 0000c709 0000c709 0000c709     ................
  c0:	0000c709 0000c709 0000c709 0000c709     ................
  d0:	0000c709 0000c709 0000c709 0000c709     ................
  e0:	0000c709 0000c709 0000c709 0000c709     ................
  f0:	0000c709 0000c709 0000c709 0000c709     ................

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__adddf3+0x240>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__adddf3+0x24e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__adddf3+0x212>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__adddf3+0x230>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__data_size+0x13e>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__data_size+0x16>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__data_size+0x40>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__data_size+0x19a>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__data_size+0xc6>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__data_size+0x96>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__data_size+0x124>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__data_size+0x108>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__data_size+0x128>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__data_size+0x168>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__data_size+0xfe>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__data_size+0x1ac>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__data_size+0x184>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__data_size+0x1ac>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__data_size+0x196>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__data_size+0x1ac>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__data_size+0x40>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__data_size+0x40>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__data_size+0x40>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__data_size+0x1ac>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__data_size+0x1ac>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__data_size+0x196>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__data_size+0x1ac>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__data_size+0x15a>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__data_size+0x1ac>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__data_size+0xfe>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__data_size+0x196>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__data_size+0x15a>
     93a:	e712      	b.n	762 <__data_size+0x1ac>

0000093c <__gedf2>:
     93c:	f04f 3cff 	mov.w	ip, #4294967295
     940:	e006      	b.n	950 <__cmpdf2+0x4>
     942:	bf00      	nop

00000944 <__ledf2>:
     944:	f04f 0c01 	mov.w	ip, #1
     948:	e002      	b.n	950 <__cmpdf2+0x4>
     94a:	bf00      	nop

0000094c <__cmpdf2>:
     94c:	f04f 0c01 	mov.w	ip, #1
     950:	f84d cd04 	str.w	ip, [sp, #-4]!
     954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     95c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     960:	bf18      	it	ne
     962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     966:	d01b      	beq.n	9a0 <__cmpdf2+0x54>
     968:	b001      	add	sp, #4
     96a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     96e:	bf0c      	ite	eq
     970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     974:	ea91 0f03 	teqne	r1, r3
     978:	bf02      	ittt	eq
     97a:	ea90 0f02 	teqeq	r0, r2
     97e:	2000      	moveq	r0, #0
     980:	4770      	bxeq	lr
     982:	f110 0f00 	cmn.w	r0, #0
     986:	ea91 0f03 	teq	r1, r3
     98a:	bf58      	it	pl
     98c:	4299      	cmppl	r1, r3
     98e:	bf08      	it	eq
     990:	4290      	cmpeq	r0, r2
     992:	bf2c      	ite	cs
     994:	17d8      	asrcs	r0, r3, #31
     996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     99a:	f040 0001 	orr.w	r0, r0, #1
     99e:	4770      	bx	lr
     9a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9a8:	d102      	bne.n	9b0 <__cmpdf2+0x64>
     9aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9ae:	d107      	bne.n	9c0 <__cmpdf2+0x74>
     9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9b8:	d1d6      	bne.n	968 <__cmpdf2+0x1c>
     9ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9be:	d0d3      	beq.n	968 <__cmpdf2+0x1c>
     9c0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <__aeabi_cdrcmple>:
     9c8:	4684      	mov	ip, r0
     9ca:	4610      	mov	r0, r2
     9cc:	4662      	mov	r2, ip
     9ce:	468c      	mov	ip, r1
     9d0:	4619      	mov	r1, r3
     9d2:	4663      	mov	r3, ip
     9d4:	e000      	b.n	9d8 <__aeabi_cdcmpeq>
     9d6:	bf00      	nop

000009d8 <__aeabi_cdcmpeq>:
     9d8:	b501      	push	{r0, lr}
     9da:	f7ff ffb7 	bl	94c <__cmpdf2>
     9de:	2800      	cmp	r0, #0
     9e0:	bf48      	it	mi
     9e2:	f110 0f00 	cmnmi.w	r0, #0
     9e6:	bd01      	pop	{r0, pc}

000009e8 <__aeabi_dcmpeq>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff fff4 	bl	9d8 <__aeabi_cdcmpeq>
     9f0:	bf0c      	ite	eq
     9f2:	2001      	moveq	r0, #1
     9f4:	2000      	movne	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_dcmplt>:
     9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
     a00:	f7ff ffea 	bl	9d8 <__aeabi_cdcmpeq>
     a04:	bf34      	ite	cc
     a06:	2001      	movcc	r0, #1
     a08:	2000      	movcs	r0, #0
     a0a:	f85d fb08 	ldr.w	pc, [sp], #8
     a0e:	bf00      	nop

00000a10 <__aeabi_dcmple>:
     a10:	f84d ed08 	str.w	lr, [sp, #-8]!
     a14:	f7ff ffe0 	bl	9d8 <__aeabi_cdcmpeq>
     a18:	bf94      	ite	ls
     a1a:	2001      	movls	r0, #1
     a1c:	2000      	movhi	r0, #0
     a1e:	f85d fb08 	ldr.w	pc, [sp], #8
     a22:	bf00      	nop

00000a24 <__aeabi_dcmpge>:
     a24:	f84d ed08 	str.w	lr, [sp, #-8]!
     a28:	f7ff ffce 	bl	9c8 <__aeabi_cdrcmple>
     a2c:	bf94      	ite	ls
     a2e:	2001      	movls	r0, #1
     a30:	2000      	movhi	r0, #0
     a32:	f85d fb08 	ldr.w	pc, [sp], #8
     a36:	bf00      	nop

00000a38 <__aeabi_dcmpgt>:
     a38:	f84d ed08 	str.w	lr, [sp, #-8]!
     a3c:	f7ff ffc4 	bl	9c8 <__aeabi_cdrcmple>
     a40:	bf34      	ite	cc
     a42:	2001      	movcc	r0, #1
     a44:	2000      	movcs	r0, #0
     a46:	f85d fb08 	ldr.w	pc, [sp], #8
     a4a:	bf00      	nop

00000a4c <__aeabi_d2iz>:
     a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d215      	bcs.n	a82 <__aeabi_d2iz+0x36>
     a56:	d511      	bpl.n	a7c <__aeabi_d2iz+0x30>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d912      	bls.n	a88 <__aeabi_d2iz+0x3c>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a72:	fa23 f002 	lsr.w	r0, r3, r2
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	4770      	bx	lr
     a7c:	f04f 0000 	mov.w	r0, #0
     a80:	4770      	bx	lr
     a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a86:	d105      	bne.n	a94 <__aeabi_d2iz+0x48>
     a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a8c:	bf08      	it	eq
     a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a92:	4770      	bx	lr
     a94:	f04f 0000 	mov.w	r0, #0
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_d2f>:
     a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     aa4:	bf24      	itt	cs
     aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     aae:	d90d      	bls.n	acc <__aeabi_d2f+0x30>
     ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     ac4:	bf08      	it	eq
     ac6:	f020 0001 	biceq.w	r0, r0, #1
     aca:	4770      	bx	lr
     acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     ad0:	d121      	bne.n	b16 <__aeabi_d2f+0x7a>
     ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     ad6:	bfbc      	itt	lt
     ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     adc:	4770      	bxlt	lr
     ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     ae6:	f1c2 0218 	rsb	r2, r2, #24
     aea:	f1c2 0c20 	rsb	ip, r2, #32
     aee:	fa10 f30c 	lsls.w	r3, r0, ip
     af2:	fa20 f002 	lsr.w	r0, r0, r2
     af6:	bf18      	it	ne
     af8:	f040 0001 	orrne.w	r0, r0, #1
     afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     b04:	fa03 fc0c 	lsl.w	ip, r3, ip
     b08:	ea40 000c 	orr.w	r0, r0, ip
     b0c:	fa23 f302 	lsr.w	r3, r3, r2
     b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b14:	e7cc      	b.n	ab0 <__aeabi_d2f+0x14>
     b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
     b1a:	d107      	bne.n	b2c <__aeabi_d2f+0x90>
     b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     b20:	bf1e      	ittt	ne
     b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     b2a:	4770      	bxne	lr
     b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <__aeabi_ldivmod>:
     b3c:	b97b      	cbnz	r3, b5e <__aeabi_ldivmod+0x22>
     b3e:	b972      	cbnz	r2, b5e <__aeabi_ldivmod+0x22>
     b40:	2900      	cmp	r1, #0
     b42:	bfbe      	ittt	lt
     b44:	2000      	movlt	r0, #0
     b46:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     b4a:	e006      	blt.n	b5a <__aeabi_ldivmod+0x1e>
     b4c:	bf08      	it	eq
     b4e:	2800      	cmpeq	r0, #0
     b50:	bf1c      	itt	ne
     b52:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     b56:	f04f 30ff 	movne.w	r0, #4294967295
     b5a:	f000 b9ef 	b.w	f3c <__aeabi_idiv0>
     b5e:	f1ad 0c08 	sub.w	ip, sp, #8
     b62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     b66:	2900      	cmp	r1, #0
     b68:	db09      	blt.n	b7e <__aeabi_ldivmod+0x42>
     b6a:	2b00      	cmp	r3, #0
     b6c:	db1a      	blt.n	ba4 <__aeabi_ldivmod+0x68>
     b6e:	f000 f883 	bl	c78 <__udivmoddi4>
     b72:	f8dd e004 	ldr.w	lr, [sp, #4]
     b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b7a:	b004      	add	sp, #16
     b7c:	4770      	bx	lr
     b7e:	4240      	negs	r0, r0
     b80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b84:	2b00      	cmp	r3, #0
     b86:	db1b      	blt.n	bc0 <__aeabi_ldivmod+0x84>
     b88:	f000 f876 	bl	c78 <__udivmoddi4>
     b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
     b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b94:	b004      	add	sp, #16
     b96:	4240      	negs	r0, r0
     b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b9c:	4252      	negs	r2, r2
     b9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ba2:	4770      	bx	lr
     ba4:	4252      	negs	r2, r2
     ba6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     baa:	f000 f865 	bl	c78 <__udivmoddi4>
     bae:	f8dd e004 	ldr.w	lr, [sp, #4]
     bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bb6:	b004      	add	sp, #16
     bb8:	4240      	negs	r0, r0
     bba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     bbe:	4770      	bx	lr
     bc0:	4252      	negs	r2, r2
     bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     bc6:	f000 f857 	bl	c78 <__udivmoddi4>
     bca:	f8dd e004 	ldr.w	lr, [sp, #4]
     bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bd2:	b004      	add	sp, #16
     bd4:	4252      	negs	r2, r2
     bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     bda:	4770      	bx	lr

00000bdc <__aeabi_uldivmod>:
     bdc:	b953      	cbnz	r3, bf4 <__aeabi_uldivmod+0x18>
     bde:	b94a      	cbnz	r2, bf4 <__aeabi_uldivmod+0x18>
     be0:	2900      	cmp	r1, #0
     be2:	bf08      	it	eq
     be4:	2800      	cmpeq	r0, #0
     be6:	bf1c      	itt	ne
     be8:	f04f 31ff 	movne.w	r1, #4294967295
     bec:	f04f 30ff 	movne.w	r0, #4294967295
     bf0:	f000 b9a4 	b.w	f3c <__aeabi_idiv0>
     bf4:	f1ad 0c08 	sub.w	ip, sp, #8
     bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     bfc:	f000 f83c 	bl	c78 <__udivmoddi4>
     c00:	f8dd e004 	ldr.w	lr, [sp, #4]
     c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     c08:	b004      	add	sp, #16
     c0a:	4770      	bx	lr

00000c0c <__aeabi_d2lz>:
     c0c:	b538      	push	{r3, r4, r5, lr}
     c0e:	2200      	movs	r2, #0
     c10:	2300      	movs	r3, #0
     c12:	4604      	mov	r4, r0
     c14:	460d      	mov	r5, r1
     c16:	f7ff fef1 	bl	9fc <__aeabi_dcmplt>
     c1a:	b928      	cbnz	r0, c28 <__aeabi_d2lz+0x1c>
     c1c:	4620      	mov	r0, r4
     c1e:	4629      	mov	r1, r5
     c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     c24:	f000 b80a 	b.w	c3c <__aeabi_d2ulz>
     c28:	4620      	mov	r0, r4
     c2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
     c2e:	f000 f805 	bl	c3c <__aeabi_d2ulz>
     c32:	4240      	negs	r0, r0
     c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c38:	bd38      	pop	{r3, r4, r5, pc}
     c3a:	bf00      	nop

00000c3c <__aeabi_d2ulz>:
     c3c:	b5d0      	push	{r4, r6, r7, lr}
     c3e:	4b0c      	ldr	r3, [pc, #48]	; (c70 <__aeabi_d2ulz+0x34>)
     c40:	2200      	movs	r2, #0
     c42:	4606      	mov	r6, r0
     c44:	460f      	mov	r7, r1
     c46:	f7ff fc67 	bl	518 <__aeabi_dmul>
     c4a:	f000 f979 	bl	f40 <__aeabi_d2uiz>
     c4e:	4604      	mov	r4, r0
     c50:	f7ff fbe8 	bl	424 <__aeabi_ui2d>
     c54:	4b07      	ldr	r3, [pc, #28]	; (c74 <__aeabi_d2ulz+0x38>)
     c56:	2200      	movs	r2, #0
     c58:	f7ff fc5e 	bl	518 <__aeabi_dmul>
     c5c:	4602      	mov	r2, r0
     c5e:	460b      	mov	r3, r1
     c60:	4630      	mov	r0, r6
     c62:	4639      	mov	r1, r7
     c64:	f7ff faa0 	bl	1a8 <__aeabi_dsub>
     c68:	f000 f96a 	bl	f40 <__aeabi_d2uiz>
     c6c:	4621      	mov	r1, r4
     c6e:	bdd0      	pop	{r4, r6, r7, pc}
     c70:	3df00000 	.word	0x3df00000
     c74:	41f00000 	.word	0x41f00000

00000c78 <__udivmoddi4>:
     c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c7c:	9d08      	ldr	r5, [sp, #32]
     c7e:	4604      	mov	r4, r0
     c80:	468c      	mov	ip, r1
     c82:	2b00      	cmp	r3, #0
     c84:	f040 8083 	bne.w	d8e <__udivmoddi4+0x116>
     c88:	428a      	cmp	r2, r1
     c8a:	4617      	mov	r7, r2
     c8c:	d947      	bls.n	d1e <__udivmoddi4+0xa6>
     c8e:	fab2 f282 	clz	r2, r2
     c92:	b142      	cbz	r2, ca6 <__udivmoddi4+0x2e>
     c94:	f1c2 0020 	rsb	r0, r2, #32
     c98:	fa24 f000 	lsr.w	r0, r4, r0
     c9c:	4091      	lsls	r1, r2
     c9e:	4097      	lsls	r7, r2
     ca0:	ea40 0c01 	orr.w	ip, r0, r1
     ca4:	4094      	lsls	r4, r2
     ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
     caa:	0c23      	lsrs	r3, r4, #16
     cac:	fbbc f6f8 	udiv	r6, ip, r8
     cb0:	fa1f fe87 	uxth.w	lr, r7
     cb4:	fb08 c116 	mls	r1, r8, r6, ip
     cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     cbc:	fb06 f10e 	mul.w	r1, r6, lr
     cc0:	4299      	cmp	r1, r3
     cc2:	d909      	bls.n	cd8 <__udivmoddi4+0x60>
     cc4:	18fb      	adds	r3, r7, r3
     cc6:	f106 30ff 	add.w	r0, r6, #4294967295
     cca:	f080 8119 	bcs.w	f00 <__udivmoddi4+0x288>
     cce:	4299      	cmp	r1, r3
     cd0:	f240 8116 	bls.w	f00 <__udivmoddi4+0x288>
     cd4:	3e02      	subs	r6, #2
     cd6:	443b      	add	r3, r7
     cd8:	1a5b      	subs	r3, r3, r1
     cda:	b2a4      	uxth	r4, r4
     cdc:	fbb3 f0f8 	udiv	r0, r3, r8
     ce0:	fb08 3310 	mls	r3, r8, r0, r3
     ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ce8:	fb00 fe0e 	mul.w	lr, r0, lr
     cec:	45a6      	cmp	lr, r4
     cee:	d909      	bls.n	d04 <__udivmoddi4+0x8c>
     cf0:	193c      	adds	r4, r7, r4
     cf2:	f100 33ff 	add.w	r3, r0, #4294967295
     cf6:	f080 8105 	bcs.w	f04 <__udivmoddi4+0x28c>
     cfa:	45a6      	cmp	lr, r4
     cfc:	f240 8102 	bls.w	f04 <__udivmoddi4+0x28c>
     d00:	3802      	subs	r0, #2
     d02:	443c      	add	r4, r7
     d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     d08:	eba4 040e 	sub.w	r4, r4, lr
     d0c:	2600      	movs	r6, #0
     d0e:	b11d      	cbz	r5, d18 <__udivmoddi4+0xa0>
     d10:	40d4      	lsrs	r4, r2
     d12:	2300      	movs	r3, #0
     d14:	e9c5 4300 	strd	r4, r3, [r5]
     d18:	4631      	mov	r1, r6
     d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d1e:	b902      	cbnz	r2, d22 <__udivmoddi4+0xaa>
     d20:	deff      	udf	#255	; 0xff
     d22:	fab2 f282 	clz	r2, r2
     d26:	2a00      	cmp	r2, #0
     d28:	d150      	bne.n	dcc <__udivmoddi4+0x154>
     d2a:	1bcb      	subs	r3, r1, r7
     d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     d30:	fa1f f887 	uxth.w	r8, r7
     d34:	2601      	movs	r6, #1
     d36:	fbb3 fcfe 	udiv	ip, r3, lr
     d3a:	0c21      	lsrs	r1, r4, #16
     d3c:	fb0e 331c 	mls	r3, lr, ip, r3
     d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d44:	fb08 f30c 	mul.w	r3, r8, ip
     d48:	428b      	cmp	r3, r1
     d4a:	d907      	bls.n	d5c <__udivmoddi4+0xe4>
     d4c:	1879      	adds	r1, r7, r1
     d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
     d52:	d202      	bcs.n	d5a <__udivmoddi4+0xe2>
     d54:	428b      	cmp	r3, r1
     d56:	f200 80e9 	bhi.w	f2c <__udivmoddi4+0x2b4>
     d5a:	4684      	mov	ip, r0
     d5c:	1ac9      	subs	r1, r1, r3
     d5e:	b2a3      	uxth	r3, r4
     d60:	fbb1 f0fe 	udiv	r0, r1, lr
     d64:	fb0e 1110 	mls	r1, lr, r0, r1
     d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     d6c:	fb08 f800 	mul.w	r8, r8, r0
     d70:	45a0      	cmp	r8, r4
     d72:	d907      	bls.n	d84 <__udivmoddi4+0x10c>
     d74:	193c      	adds	r4, r7, r4
     d76:	f100 33ff 	add.w	r3, r0, #4294967295
     d7a:	d202      	bcs.n	d82 <__udivmoddi4+0x10a>
     d7c:	45a0      	cmp	r8, r4
     d7e:	f200 80d9 	bhi.w	f34 <__udivmoddi4+0x2bc>
     d82:	4618      	mov	r0, r3
     d84:	eba4 0408 	sub.w	r4, r4, r8
     d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     d8c:	e7bf      	b.n	d0e <__udivmoddi4+0x96>
     d8e:	428b      	cmp	r3, r1
     d90:	d909      	bls.n	da6 <__udivmoddi4+0x12e>
     d92:	2d00      	cmp	r5, #0
     d94:	f000 80b1 	beq.w	efa <__udivmoddi4+0x282>
     d98:	2600      	movs	r6, #0
     d9a:	e9c5 0100 	strd	r0, r1, [r5]
     d9e:	4630      	mov	r0, r6
     da0:	4631      	mov	r1, r6
     da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     da6:	fab3 f683 	clz	r6, r3
     daa:	2e00      	cmp	r6, #0
     dac:	d14a      	bne.n	e44 <__udivmoddi4+0x1cc>
     dae:	428b      	cmp	r3, r1
     db0:	d302      	bcc.n	db8 <__udivmoddi4+0x140>
     db2:	4282      	cmp	r2, r0
     db4:	f200 80b8 	bhi.w	f28 <__udivmoddi4+0x2b0>
     db8:	1a84      	subs	r4, r0, r2
     dba:	eb61 0103 	sbc.w	r1, r1, r3
     dbe:	2001      	movs	r0, #1
     dc0:	468c      	mov	ip, r1
     dc2:	2d00      	cmp	r5, #0
     dc4:	d0a8      	beq.n	d18 <__udivmoddi4+0xa0>
     dc6:	e9c5 4c00 	strd	r4, ip, [r5]
     dca:	e7a5      	b.n	d18 <__udivmoddi4+0xa0>
     dcc:	f1c2 0320 	rsb	r3, r2, #32
     dd0:	fa20 f603 	lsr.w	r6, r0, r3
     dd4:	4097      	lsls	r7, r2
     dd6:	fa01 f002 	lsl.w	r0, r1, r2
     dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     dde:	40d9      	lsrs	r1, r3
     de0:	4330      	orrs	r0, r6
     de2:	0c03      	lsrs	r3, r0, #16
     de4:	fbb1 f6fe 	udiv	r6, r1, lr
     de8:	fa1f f887 	uxth.w	r8, r7
     dec:	fb0e 1116 	mls	r1, lr, r6, r1
     df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     df4:	fb06 f108 	mul.w	r1, r6, r8
     df8:	4299      	cmp	r1, r3
     dfa:	fa04 f402 	lsl.w	r4, r4, r2
     dfe:	d909      	bls.n	e14 <__udivmoddi4+0x19c>
     e00:	18fb      	adds	r3, r7, r3
     e02:	f106 3cff 	add.w	ip, r6, #4294967295
     e06:	f080 808d 	bcs.w	f24 <__udivmoddi4+0x2ac>
     e0a:	4299      	cmp	r1, r3
     e0c:	f240 808a 	bls.w	f24 <__udivmoddi4+0x2ac>
     e10:	3e02      	subs	r6, #2
     e12:	443b      	add	r3, r7
     e14:	1a5b      	subs	r3, r3, r1
     e16:	b281      	uxth	r1, r0
     e18:	fbb3 f0fe 	udiv	r0, r3, lr
     e1c:	fb0e 3310 	mls	r3, lr, r0, r3
     e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     e24:	fb00 f308 	mul.w	r3, r0, r8
     e28:	428b      	cmp	r3, r1
     e2a:	d907      	bls.n	e3c <__udivmoddi4+0x1c4>
     e2c:	1879      	adds	r1, r7, r1
     e2e:	f100 3cff 	add.w	ip, r0, #4294967295
     e32:	d273      	bcs.n	f1c <__udivmoddi4+0x2a4>
     e34:	428b      	cmp	r3, r1
     e36:	d971      	bls.n	f1c <__udivmoddi4+0x2a4>
     e38:	3802      	subs	r0, #2
     e3a:	4439      	add	r1, r7
     e3c:	1acb      	subs	r3, r1, r3
     e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
     e42:	e778      	b.n	d36 <__udivmoddi4+0xbe>
     e44:	f1c6 0c20 	rsb	ip, r6, #32
     e48:	fa03 f406 	lsl.w	r4, r3, r6
     e4c:	fa22 f30c 	lsr.w	r3, r2, ip
     e50:	431c      	orrs	r4, r3
     e52:	fa20 f70c 	lsr.w	r7, r0, ip
     e56:	fa01 f306 	lsl.w	r3, r1, r6
     e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     e5e:	fa21 f10c 	lsr.w	r1, r1, ip
     e62:	431f      	orrs	r7, r3
     e64:	0c3b      	lsrs	r3, r7, #16
     e66:	fbb1 f9fe 	udiv	r9, r1, lr
     e6a:	fa1f f884 	uxth.w	r8, r4
     e6e:	fb0e 1119 	mls	r1, lr, r9, r1
     e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     e76:	fb09 fa08 	mul.w	sl, r9, r8
     e7a:	458a      	cmp	sl, r1
     e7c:	fa02 f206 	lsl.w	r2, r2, r6
     e80:	fa00 f306 	lsl.w	r3, r0, r6
     e84:	d908      	bls.n	e98 <__udivmoddi4+0x220>
     e86:	1861      	adds	r1, r4, r1
     e88:	f109 30ff 	add.w	r0, r9, #4294967295
     e8c:	d248      	bcs.n	f20 <__udivmoddi4+0x2a8>
     e8e:	458a      	cmp	sl, r1
     e90:	d946      	bls.n	f20 <__udivmoddi4+0x2a8>
     e92:	f1a9 0902 	sub.w	r9, r9, #2
     e96:	4421      	add	r1, r4
     e98:	eba1 010a 	sub.w	r1, r1, sl
     e9c:	b2bf      	uxth	r7, r7
     e9e:	fbb1 f0fe 	udiv	r0, r1, lr
     ea2:	fb0e 1110 	mls	r1, lr, r0, r1
     ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
     eaa:	fb00 f808 	mul.w	r8, r0, r8
     eae:	45b8      	cmp	r8, r7
     eb0:	d907      	bls.n	ec2 <__udivmoddi4+0x24a>
     eb2:	19e7      	adds	r7, r4, r7
     eb4:	f100 31ff 	add.w	r1, r0, #4294967295
     eb8:	d22e      	bcs.n	f18 <__udivmoddi4+0x2a0>
     eba:	45b8      	cmp	r8, r7
     ebc:	d92c      	bls.n	f18 <__udivmoddi4+0x2a0>
     ebe:	3802      	subs	r0, #2
     ec0:	4427      	add	r7, r4
     ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     ec6:	eba7 0708 	sub.w	r7, r7, r8
     eca:	fba0 8902 	umull	r8, r9, r0, r2
     ece:	454f      	cmp	r7, r9
     ed0:	46c6      	mov	lr, r8
     ed2:	4649      	mov	r1, r9
     ed4:	d31a      	bcc.n	f0c <__udivmoddi4+0x294>
     ed6:	d017      	beq.n	f08 <__udivmoddi4+0x290>
     ed8:	b15d      	cbz	r5, ef2 <__udivmoddi4+0x27a>
     eda:	ebb3 020e 	subs.w	r2, r3, lr
     ede:	eb67 0701 	sbc.w	r7, r7, r1
     ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
     ee6:	40f2      	lsrs	r2, r6
     ee8:	ea4c 0202 	orr.w	r2, ip, r2
     eec:	40f7      	lsrs	r7, r6
     eee:	e9c5 2700 	strd	r2, r7, [r5]
     ef2:	2600      	movs	r6, #0
     ef4:	4631      	mov	r1, r6
     ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     efa:	462e      	mov	r6, r5
     efc:	4628      	mov	r0, r5
     efe:	e70b      	b.n	d18 <__udivmoddi4+0xa0>
     f00:	4606      	mov	r6, r0
     f02:	e6e9      	b.n	cd8 <__udivmoddi4+0x60>
     f04:	4618      	mov	r0, r3
     f06:	e6fd      	b.n	d04 <__udivmoddi4+0x8c>
     f08:	4543      	cmp	r3, r8
     f0a:	d2e5      	bcs.n	ed8 <__udivmoddi4+0x260>
     f0c:	ebb8 0e02 	subs.w	lr, r8, r2
     f10:	eb69 0104 	sbc.w	r1, r9, r4
     f14:	3801      	subs	r0, #1
     f16:	e7df      	b.n	ed8 <__udivmoddi4+0x260>
     f18:	4608      	mov	r0, r1
     f1a:	e7d2      	b.n	ec2 <__udivmoddi4+0x24a>
     f1c:	4660      	mov	r0, ip
     f1e:	e78d      	b.n	e3c <__udivmoddi4+0x1c4>
     f20:	4681      	mov	r9, r0
     f22:	e7b9      	b.n	e98 <__udivmoddi4+0x220>
     f24:	4666      	mov	r6, ip
     f26:	e775      	b.n	e14 <__udivmoddi4+0x19c>
     f28:	4630      	mov	r0, r6
     f2a:	e74a      	b.n	dc2 <__udivmoddi4+0x14a>
     f2c:	f1ac 0c02 	sub.w	ip, ip, #2
     f30:	4439      	add	r1, r7
     f32:	e713      	b.n	d5c <__udivmoddi4+0xe4>
     f34:	3802      	subs	r0, #2
     f36:	443c      	add	r4, r7
     f38:	e724      	b.n	d84 <__udivmoddi4+0x10c>
     f3a:	bf00      	nop

00000f3c <__aeabi_idiv0>:
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <__aeabi_d2uiz>:
     f40:	004a      	lsls	r2, r1, #1
     f42:	d211      	bcs.n	f68 <__aeabi_d2uiz+0x28>
     f44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     f48:	d211      	bcs.n	f6e <__aeabi_d2uiz+0x2e>
     f4a:	d50d      	bpl.n	f68 <__aeabi_d2uiz+0x28>
     f4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     f50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     f54:	d40e      	bmi.n	f74 <__aeabi_d2uiz+0x34>
     f56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     f5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     f5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     f62:	fa23 f002 	lsr.w	r0, r3, r2
     f66:	4770      	bx	lr
     f68:	f04f 0000 	mov.w	r0, #0
     f6c:	4770      	bx	lr
     f6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     f72:	d102      	bne.n	f7a <__aeabi_d2uiz+0x3a>
     f74:	f04f 30ff 	mov.w	r0, #4294967295
     f78:	4770      	bx	lr
     f7a:	f04f 0000 	mov.w	r0, #0
     f7e:	4770      	bx	lr

00000f80 <__aeabi_dcmpun>:
     f80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f88:	d102      	bne.n	f90 <__aeabi_dcmpun+0x10>
     f8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     f8e:	d10a      	bne.n	fa6 <__aeabi_dcmpun+0x26>
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f98:	d102      	bne.n	fa0 <__aeabi_dcmpun+0x20>
     f9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     f9e:	d102      	bne.n	fa6 <__aeabi_dcmpun+0x26>
     fa0:	f04f 0000 	mov.w	r0, #0
     fa4:	4770      	bx	lr
     fa6:	f04f 0001 	mov.w	r0, #1
     faa:	4770      	bx	lr

00000fac <strcmp>:
     fac:	f810 2b01 	ldrb.w	r2, [r0], #1
     fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
     fb4:	2a01      	cmp	r2, #1
     fb6:	bf28      	it	cs
     fb8:	429a      	cmpcs	r2, r3
     fba:	d0f7      	beq.n	fac <strcmp>
     fbc:	1ad0      	subs	r0, r2, r3
     fbe:	4770      	bx	lr

00000fc0 <strlen>:
     fc0:	4603      	mov	r3, r0
     fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
     fc6:	2a00      	cmp	r2, #0
     fc8:	d1fb      	bne.n	fc2 <strlen+0x2>
     fca:	1a18      	subs	r0, r3, r0
     fcc:	3801      	subs	r0, #1
     fce:	4770      	bx	lr

00000fd0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
     fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
     fd4:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
     fd8:	ed2d 8b02 	vpush	{d8}
     fdc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
     fe0:	4604      	mov	r4, r0
     fe2:	460e      	mov	r6, r1
     fe4:	4615      	mov	r5, r2
    size_t memneeded = sizeof(struct kiss_fft_state)
     fe6:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
     fe8:	2b00      	cmp	r3, #0
     fea:	d13d      	bne.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
     fec:	4638      	mov	r0, r7
     fee:	f010 fe0d 	bl	11c0c <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
     ff2:	4605      	mov	r5, r0
     ff4:	b3d0      	cbz	r0, 106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
     ff6:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
     ffa:	f505 7a84 	add.w	sl, r5, #264	; 0x108
     ffe:	2e00      	cmp	r6, #0
    1000:	d044      	beq.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    1002:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
    1004:	f04f 0a00 	mov.w	sl, #0
    1008:	4620      	mov	r0, r4
    100a:	f7ff fa1b 	bl	444 <__aeabi_i2d>
    100e:	45a2      	cmp	sl, r4
    1010:	4680      	mov	r8, r0
    1012:	4689      	mov	r9, r1
    1014:	f106 0608 	add.w	r6, r6, #8
    1018:	da67      	bge.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
    101a:	4650      	mov	r0, sl
    101c:	f7ff fa12 	bl	444 <__aeabi_i2d>
    1020:	a34b      	add	r3, pc, #300	; (adr r3, 1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>)
    1022:	e9d3 2300 	ldrd	r2, r3, [r3]
    1026:	f7ff fa77 	bl	518 <__aeabi_dmul>
    102a:	4642      	mov	r2, r8
    102c:	464b      	mov	r3, r9
    102e:	f7ff fb9d 	bl	76c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
    1032:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
    1036:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
    103a:	f001 f8e9 	bl	2210 <cos>
    103e:	ec51 0b10 	vmov	r0, r1, d0
    1042:	f7ff fd2b 	bl	a9c <__aeabi_d2f>
    1046:	eeb0 0a48 	vmov.f32	s0, s16
    104a:	eef0 0a68 	vmov.f32	s1, s17
    104e:	f846 0c08 	str.w	r0, [r6, #-8]
    1052:	f001 f9b5 	bl	23c0 <sin>
    1056:	ec51 0b10 	vmov	r0, r1, d0
    105a:	f7ff fd1f 	bl	a9c <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
    105e:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
    1062:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
    1066:	e7cf      	b.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
        if (mem != NULL && *lenmem >= memneeded)
    1068:	b952      	cbnz	r2, 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
        *lenmem = memneeded;
    106a:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
    106c:	f1bb 0f00 	cmp.w	fp, #0
    1070:	d001      	beq.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
        *memallocated = memneeded;
    1072:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
    1076:	ecbd 8b02 	vpop	{d8}
    107a:	4628      	mov	r0, r5
    107c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
    1080:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
    1082:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
    1084:	42ba      	cmp	r2, r7
    1086:	d2b6      	bcs.n	ff6 <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
    1088:	2500      	movs	r5, #0
    108a:	e7ef      	b.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
            for (i=0;i<nfft;++i) {
    108c:	4620      	mov	r0, r4
    108e:	f7ff f9d9 	bl	444 <__aeabi_i2d>
    1092:	42a6      	cmp	r6, r4
    1094:	4680      	mov	r8, r0
    1096:	4689      	mov	r9, r1
    1098:	f10a 0a08 	add.w	sl, sl, #8
    109c:	da25      	bge.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
                double phase = -2*pi*i / nfft;
    109e:	4630      	mov	r0, r6
    10a0:	f7ff f9d0 	bl	444 <__aeabi_i2d>
    10a4:	a32c      	add	r3, pc, #176	; (adr r3, 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>)
    10a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    10aa:	f7ff fa35 	bl	518 <__aeabi_dmul>
    10ae:	4642      	mov	r2, r8
    10b0:	464b      	mov	r3, r9
    10b2:	f7ff fb5b 	bl	76c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
    10b6:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
    10ba:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
    10be:	f001 f8a7 	bl	2210 <cos>
    10c2:	ec51 0b10 	vmov	r0, r1, d0
    10c6:	f7ff fce9 	bl	a9c <__aeabi_d2f>
    10ca:	eeb0 0a48 	vmov.f32	s0, s16
    10ce:	eef0 0a68 	vmov.f32	s1, s17
    10d2:	f84a 0c08 	str.w	r0, [sl, #-8]
    10d6:	f001 f973 	bl	23c0 <sin>
    10da:	ec51 0b10 	vmov	r0, r1, d0
    10de:	f7ff fcdd 	bl	a9c <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
    10e2:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
    10e4:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
    10e8:	e7d0      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    floor_sqrt = floor( sqrt((double)n) );
    10ea:	4620      	mov	r0, r4
    10ec:	f7ff f9aa 	bl	444 <__aeabi_i2d>
    10f0:	ec41 0b10 	vmov	d0, r0, r1
    10f4:	f00e fcde 	bl	fab4 <sqrt>
    10f8:	f001 f8de 	bl	22b8 <floor>
    10fc:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
    1100:	f105 0a08 	add.w	sl, r5, #8
    int p=4;
    1104:	2604      	movs	r6, #4
        while (n % p) {
    1106:	fb94 f3f6 	sdiv	r3, r4, r6
    110a:	fb06 4213 	mls	r2, r6, r3, r4
    110e:	b1aa      	cbz	r2, 113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
            switch (p) {
    1110:	2e02      	cmp	r6, #2
    1112:	d00f      	beq.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
    1114:	2e04      	cmp	r6, #4
    1116:	d00f      	beq.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
                default: p += 2; break;
    1118:	3602      	adds	r6, #2
            if (p > floor_sqrt)
    111a:	4630      	mov	r0, r6
    111c:	f7ff f992 	bl	444 <__aeabi_i2d>
    1120:	4602      	mov	r2, r0
    1122:	460b      	mov	r3, r1
    1124:	4640      	mov	r0, r8
    1126:	4649      	mov	r1, r9
    1128:	f7ff fc68 	bl	9fc <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
    112c:	2800      	cmp	r0, #0
    112e:	bf18      	it	ne
    1130:	4626      	movne	r6, r4
    1132:	e7e8      	b.n	1106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
                case 2: p = 3; break;
    1134:	2603      	movs	r6, #3
    1136:	e7f0      	b.n	111a <CONFIG_FPROTECT_BLOCK_SIZE+0x11a>
            switch (p) {
    1138:	2602      	movs	r6, #2
    113a:	e7ee      	b.n	111a <CONFIG_FPROTECT_BLOCK_SIZE+0x11a>
    } while (n > 1);
    113c:	2b01      	cmp	r3, #1
        *facbuf++ = n;
    113e:	e9ca 6300 	strd	r6, r3, [sl]
        n /= p;
    1142:	461c      	mov	r4, r3
    } while (n > 1);
    1144:	dd92      	ble.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
    1146:	f10a 0a08 	add.w	sl, sl, #8
    114a:	e7dc      	b.n	1106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
    114c:	f3af 8000 	nop.w
    1150:	54442d18 	.word	0x54442d18
    1154:	401921fb 	.word	0x401921fb
    1158:	54442d18 	.word	0x54442d18
    115c:	c01921fb 	.word	0xc01921fb

00001160 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
    1160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1164:	ed2d 8b02 	vpush	{d8}
    1168:	b085      	sub	sp, #20
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
    116a:	2500      	movs	r5, #0

    if (nfft & 1) {
    116c:	f010 0a01 	ands.w	sl, r0, #1
{
    1170:	468b      	mov	fp, r1
    1172:	4614      	mov	r4, r2
    1174:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
    1176:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
    1178:	d009      	beq.n	118e <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
    117a:	4863      	ldr	r0, [pc, #396]	; (1308 <kiss_fftr_alloc+0x1a8>)
    117c:	f004 fb72 	bl	5864 <_Z9ei_printfPKcz>
        return NULL;
    1180:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
    1182:	4620      	mov	r0, r4
    1184:	b005      	add	sp, #20
    1186:	ecbd 8b02 	vpop	{d8}
    118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
    118e:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
    1190:	ab03      	add	r3, sp, #12
    1192:	f8cd a000 	str.w	sl, [sp]
    1196:	4652      	mov	r2, sl
    1198:	4628      	mov	r0, r5
    119a:	f7ff ff19 	bl	fd0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
    119e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
    11a2:	9b03      	ldr	r3, [sp, #12]
    11a4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    11a8:	1076      	asrs	r6, r6, #1
    11aa:	330c      	adds	r3, #12
    11ac:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
    11b0:	2f00      	cmp	r7, #0
    11b2:	d158      	bne.n	1266 <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
    11b4:	4630      	mov	r0, r6
    11b6:	f010 fd29 	bl	11c0c <_Z9ei_mallocj>
    11ba:	4604      	mov	r4, r0
    if (!st)
    11bc:	2c00      	cmp	r4, #0
    11be:	d0e0      	beq.n	1182 <kiss_fftr_alloc+0x22>
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
    11c0:	9b03      	ldr	r3, [sp, #12]
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    11c2:	f104 020c 	add.w	r2, r4, #12
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
    11c6:	4413      	add	r3, r2
    11c8:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
    11ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    11ce:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    11d0:	2300      	movs	r3, #0
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    11d2:	6022      	str	r2, [r4, #0]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    11d4:	4659      	mov	r1, fp
    11d6:	9300      	str	r3, [sp, #0]
    11d8:	4628      	mov	r0, r5
    11da:	ab03      	add	r3, sp, #12
    11dc:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    11e0:	f7ff fef6 	bl	fd0 <kiss_fft_alloc>
    if (inverse_fft) {
    11e4:	107f      	asrs	r7, r7, #1
    11e6:	f1bb 0f00 	cmp.w	fp, #0
    11ea:	d042      	beq.n	1272 <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
    11ec:	4557      	cmp	r7, sl
    11ee:	dd7d      	ble.n	12ec <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
    11f0:	f10a 0a01 	add.w	sl, sl, #1
    11f4:	4650      	mov	r0, sl
    11f6:	f7ff f925 	bl	444 <__aeabi_i2d>
    11fa:	4680      	mov	r8, r0
    11fc:	4628      	mov	r0, r5
    11fe:	4689      	mov	r9, r1
    1200:	f7ff f920 	bl	444 <__aeabi_i2d>
    1204:	4602      	mov	r2, r0
    1206:	460b      	mov	r3, r1
    1208:	4640      	mov	r0, r8
    120a:	4649      	mov	r1, r9
    120c:	f7ff faae 	bl	76c <__aeabi_ddiv>
    1210:	4b3e      	ldr	r3, [pc, #248]	; (130c <kiss_fftr_alloc+0x1ac>)
    1212:	2200      	movs	r2, #0
    1214:	f7fe ffca 	bl	1ac <__adddf3>
            double phase =
    1218:	a337      	add	r3, pc, #220	; (adr r3, 12f8 <kiss_fftr_alloc+0x198>)
    121a:	e9d3 2300 	ldrd	r2, r3, [r3]
    121e:	f7ff f97b 	bl	518 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
    1222:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
    1226:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
    122a:	f000 fff1 	bl	2210 <cos>
    122e:	ea4f 08ca 	mov.w	r8, sl, lsl #3
    1232:	68a3      	ldr	r3, [r4, #8]
    1234:	ec51 0b10 	vmov	r0, r1, d0
    1238:	f1a8 0808 	sub.w	r8, r8, #8
    123c:	eb03 0908 	add.w	r9, r3, r8
    1240:	f7ff fc2c 	bl	a9c <__aeabi_d2f>
    1244:	eeb0 0a48 	vmov.f32	s0, s16
    1248:	eef0 0a68 	vmov.f32	s1, s17
    124c:	f8c9 0000 	str.w	r0, [r9]
    1250:	f001 f8b6 	bl	23c0 <sin>
    1254:	68a3      	ldr	r3, [r4, #8]
    1256:	ec51 0b10 	vmov	r0, r1, d0
    125a:	4498      	add	r8, r3
    125c:	f7ff fc1e 	bl	a9c <__aeabi_d2f>
    1260:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
    1264:	e7c2      	b.n	11ec <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
    1266:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
    1268:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
    126a:	42b3      	cmp	r3, r6
    126c:	d2a6      	bcs.n	11bc <kiss_fftr_alloc+0x5c>
        return NULL;
    126e:	4654      	mov	r4, sl
    1270:	e787      	b.n	1182 <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
    1272:	455f      	cmp	r7, fp
    1274:	dd3a      	ble.n	12ec <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
    1276:	f10b 0b01 	add.w	fp, fp, #1
    127a:	4658      	mov	r0, fp
    127c:	f7ff f8e2 	bl	444 <__aeabi_i2d>
    1280:	4680      	mov	r8, r0
    1282:	4628      	mov	r0, r5
    1284:	4689      	mov	r9, r1
    1286:	f7ff f8dd 	bl	444 <__aeabi_i2d>
    128a:	4602      	mov	r2, r0
    128c:	460b      	mov	r3, r1
    128e:	4640      	mov	r0, r8
    1290:	4649      	mov	r1, r9
    1292:	f7ff fa6b 	bl	76c <__aeabi_ddiv>
    1296:	4b1d      	ldr	r3, [pc, #116]	; (130c <kiss_fftr_alloc+0x1ac>)
    1298:	2200      	movs	r2, #0
    129a:	f7fe ff87 	bl	1ac <__adddf3>
            double phase =
    129e:	a318      	add	r3, pc, #96	; (adr r3, 1300 <kiss_fftr_alloc+0x1a0>)
    12a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    12a4:	f7ff f938 	bl	518 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
    12a8:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
    12ac:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
    12b0:	f000 ffae 	bl	2210 <cos>
    12b4:	ea4f 08cb 	mov.w	r8, fp, lsl #3
    12b8:	68a3      	ldr	r3, [r4, #8]
    12ba:	ec51 0b10 	vmov	r0, r1, d0
    12be:	f1a8 0808 	sub.w	r8, r8, #8
    12c2:	eb03 0908 	add.w	r9, r3, r8
    12c6:	f7ff fbe9 	bl	a9c <__aeabi_d2f>
    12ca:	eeb0 0a48 	vmov.f32	s0, s16
    12ce:	eef0 0a68 	vmov.f32	s1, s17
    12d2:	f8c9 0000 	str.w	r0, [r9]
    12d6:	f001 f873 	bl	23c0 <sin>
    12da:	68a3      	ldr	r3, [r4, #8]
    12dc:	ec51 0b10 	vmov	r0, r1, d0
    12e0:	4498      	add	r8, r3
    12e2:	f7ff fbdb 	bl	a9c <__aeabi_d2f>
    12e6:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
    12ea:	e7c2      	b.n	1272 <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
    12ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    12ee:	2b00      	cmp	r3, #0
    12f0:	f43f af47 	beq.w	1182 <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
    12f4:	601e      	str	r6, [r3, #0]
    12f6:	e744      	b.n	1182 <kiss_fftr_alloc+0x22>
    12f8:	54442d18 	.word	0x54442d18
    12fc:	400921fb 	.word	0x400921fb
    1300:	54442d18 	.word	0x54442d18
    1304:	c00921fb 	.word	0xc00921fb
    1308:	000459b4 	.word	0x000459b4
    130c:	3fe00000 	.word	0x3fe00000

00001310 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    1310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    1314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
    1318:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    131c:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
    1320:	ec57 6b10 	vmov	r6, r7, d0
    1324:	ec59 8b11 	vmov	r8, r9, d1
    1328:	4693      	mov	fp, r2
    132a:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    132c:	f7ff f88a 	bl	444 <__aeabi_i2d>
    1330:	4642      	mov	r2, r8
    1332:	4604      	mov	r4, r0
    1334:	460d      	mov	r5, r1
    1336:	464b      	mov	r3, r9
    1338:	4630      	mov	r0, r6
    133a:	4639      	mov	r1, r7
    133c:	f7ff f8ec 	bl	518 <__aeabi_dmul>
    1340:	4602      	mov	r2, r0
    1342:	460b      	mov	r3, r1
    1344:	4620      	mov	r0, r4
    1346:	4629      	mov	r1, r5
    1348:	f7ff f8e6 	bl	518 <__aeabi_dmul>
    134c:	4602      	mov	r2, r0
    134e:	460b      	mov	r3, r1
    1350:	ec43 2b18 	vmov	d8, r2, r3
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    1354:	a30a      	add	r3, pc, #40	; (adr r3, 1380 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>)
    1356:	e9d3 2300 	ldrd	r2, r3, [r3]
    135a:	f7ff fb6d 	bl	a38 <__aeabi_dcmpgt>
    135e:	b108      	cbz	r0, 1364 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x54>
	return __b;
    1360:	ed9f 8b07 	vldr	d8, [pc, #28]	; 1380 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1364:	eeb0 0a48 	vmov.f32	s0, s16
    1368:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
    136c:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1370:	4659      	mov	r1, fp
    1372:	4650      	mov	r0, sl
}
    1374:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1378:	f004 bae0 	b.w	593c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
    137c:	f3af 8000 	nop.w
    1380:	ffc00000 	.word	0xffc00000
    1384:	41dfffff 	.word	0x41dfffff

00001388 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    138c:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
    138e:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
    1390:	4615      	mov	r5, r2
    1392:	461e      	mov	r6, r3
    1394:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1396:	f7ff f867 	bl	468 <__aeabi_f2d>
    139a:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
    139c:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
    139e:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    13a0:	f7ff f862 	bl	468 <__aeabi_f2d>
    13a4:	4602      	mov	r2, r0
    13a6:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    13a8:	4640      	mov	r0, r8
    13aa:	4649      	mov	r1, r9
    13ac:	f7ff f8b4 	bl	518 <__aeabi_dmul>
                                              double* multiplier) {
    13b0:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
    13b4:	4680      	mov	r8, r0
    13b6:	4689      	mov	r9, r1
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    13b8:	b1d6      	cbz	r6, 13f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
    13ba:	68f0      	ldr	r0, [r6, #12]
    13bc:	f7ff f854 	bl	468 <__aeabi_f2d>
    13c0:	4602      	mov	r2, r0
    13c2:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    13c4:	4640      	mov	r0, r8
    13c6:	4649      	mov	r1, r9
    13c8:	f7fe feee 	bl	1a8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    13cc:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
    13ce:	68f8      	ldr	r0, [r7, #12]
    13d0:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    13d4:	f7ff f848 	bl	468 <__aeabi_f2d>
    13d8:	4602      	mov	r2, r0
    13da:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    13dc:	4640      	mov	r0, r8
    13de:	4649      	mov	r1, r9
    13e0:	f7ff f9c4 	bl	76c <__aeabi_ddiv>
    13e4:	a311      	add	r3, pc, #68	; (adr r3, 142c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    13e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    13ea:	f7ff fb11 	bl	a10 <__aeabi_dcmple>
    13ee:	b150      	cbz	r0, 1406 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    13f0:	463b      	mov	r3, r7
    13f2:	462a      	mov	r2, r5
    13f4:	4651      	mov	r1, sl
    13f6:	4620      	mov	r0, r4
    13f8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
    13fc:	b003      	add	sp, #12
    13fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    1402:	f004 bab7 	b.w	5974 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1406:	4b06      	ldr	r3, [pc, #24]	; (1420 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    1408:	9300      	str	r3, [sp, #0]
    140a:	4620      	mov	r0, r4
    140c:	6965      	ldr	r5, [r4, #20]
    140e:	4a05      	ldr	r2, [pc, #20]	; (1424 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    1410:	4905      	ldr	r1, [pc, #20]	; (1428 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    1412:	f44f 73a2 	mov.w	r3, #324	; 0x144
    1416:	47a8      	blx	r5
}
    1418:	2001      	movs	r0, #1
    141a:	b003      	add	sp, #12
    141c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1420:	00045a98 	.word	0x00045a98
    1424:	000459f9 	.word	0x000459f9
    1428:	00045a68 	.word	0x00045a68
    142c:	47ae147b 	.word	0x47ae147b
    1430:	3f947ae1 	.word	0x3f947ae1
    1434:	00000000 	.word	0x00000000

00001438 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    1438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    143c:	680b      	ldr	r3, [r1, #0]
    143e:	ed2d 8b02 	vpush	{d8}
    1442:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    1444:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    1446:	b089      	sub	sp, #36	; 0x24
    1448:	4604      	mov	r4, r0
    144a:	4689      	mov	r9, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    144c:	d011      	beq.n	1472 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    144e:	2501      	movs	r5, #1
    1450:	4b9c      	ldr	r3, [pc, #624]	; (16c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    1452:	9301      	str	r3, [sp, #4]
    1454:	e9cd 6502 	strd	r6, r5, [sp, #8]
    1458:	4b9b      	ldr	r3, [pc, #620]	; (16c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
    145a:	9300      	str	r3, [sp, #0]
    145c:	6944      	ldr	r4, [r0, #20]
    145e:	4a9b      	ldr	r2, [pc, #620]	; (16cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1460:	499b      	ldr	r1, [pc, #620]	; (16d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    1462:	235d      	movs	r3, #93	; 0x5d
    1464:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    1466:	4628      	mov	r0, r5
    1468:	b009      	add	sp, #36	; 0x24
    146a:	ecbd 8b02 	vpop	{d8}
    146e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    1472:	684b      	ldr	r3, [r1, #4]
    1474:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    1476:	2d01      	cmp	r5, #1
    1478:	d00c      	beq.n	1494 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    147a:	4b92      	ldr	r3, [pc, #584]	; (16c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    147c:	9301      	str	r3, [sp, #4]
    147e:	e9cd 5602 	strd	r5, r6, [sp, #8]
    1482:	4b94      	ldr	r3, [pc, #592]	; (16d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    1484:	9300      	str	r3, [sp, #0]
    1486:	6944      	ldr	r4, [r0, #20]
    1488:	4a90      	ldr	r2, [pc, #576]	; (16cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    148a:	4991      	ldr	r1, [pc, #580]	; (16d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    148c:	235e      	movs	r3, #94	; 0x5e
    148e:	47a0      	blx	r4
    TF_LITE_ENSURE(context,
    1490:	2501      	movs	r5, #1
    1492:	e7e8      	b.n	1466 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
    1494:	2200      	movs	r2, #0
    1496:	f010 fc31 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    149a:	4680      	mov	r8, r0
    149c:	b940      	cbnz	r0, 14b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    149e:	4b8e      	ldr	r3, [pc, #568]	; (16d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
    14a0:	9300      	str	r3, [sp, #0]
    14a2:	6966      	ldr	r6, [r4, #20]
    14a4:	2360      	movs	r3, #96	; 0x60
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    14a6:	4a89      	ldr	r2, [pc, #548]	; (16cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    14a8:	498c      	ldr	r1, [pc, #560]	; (16dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    14aa:	4620      	mov	r0, r4
    14ac:	47b0      	blx	r6
    14ae:	e7da      	b.n	1466 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    14b0:	6883      	ldr	r3, [r0, #8]
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	2b00      	cmp	r3, #0
    14b6:	dc04      	bgt.n	14c2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    14b8:	4b89      	ldr	r3, [pc, #548]	; (16e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
    14ba:	9300      	str	r3, [sp, #0]
    14bc:	6966      	ldr	r6, [r4, #20]
    14be:	2361      	movs	r3, #97	; 0x61
    14c0:	e7f1      	b.n	14a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TfLiteTensor* output = GetOutput(context, node, 0);
    14c2:	2200      	movs	r2, #0
    14c4:	4649      	mov	r1, r9
    14c6:	4620      	mov	r0, r4
    14c8:	f010 fc29 	bl	11d1e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    14cc:	4606      	mov	r6, r0
    14ce:	b920      	cbnz	r0, 14da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
    14d0:	4b84      	ldr	r3, [pc, #528]	; (16e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
    14d2:	9300      	str	r3, [sp, #0]
    14d4:	6966      	ldr	r6, [r4, #20]
    14d6:	2363      	movs	r3, #99	; 0x63
    14d8:	e7e5      	b.n	14a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    14da:	f8d9 7010 	ldr.w	r7, [r9, #16]
    14de:	b927      	cbnz	r7, 14ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    14e0:	4b81      	ldr	r3, [pc, #516]	; (16e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
    14e2:	9300      	str	r3, [sp, #0]
    14e4:	6966      	ldr	r6, [r4, #20]
    14e6:	2365      	movs	r3, #101	; 0x65
    14e8:	e7dd      	b.n	14a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  if (input->type == kTfLiteInt16) {
    14ea:	f898 3000 	ldrb.w	r3, [r8]
    14ee:	2b07      	cmp	r3, #7
    14f0:	d117      	bne.n	1522 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xea>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    14f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    14f4:	f240 4102 	movw	r1, #1026	; 0x402
    14f8:	4620      	mov	r0, r4
    14fa:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    14fc:	b920      	cbnz	r0, 1508 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    14fe:	4b7b      	ldr	r3, [pc, #492]	; (16ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
    1500:	9300      	str	r3, [sp, #0]
    1502:	6966      	ldr	r6, [r4, #20]
    1504:	236b      	movs	r3, #107	; 0x6b
    1506:	e7ce      	b.n	14a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    1508:	62b8      	str	r0, [r7, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    150a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    150c:	f240 4102 	movw	r1, #1026	; 0x402
    1510:	4620      	mov	r0, r4
    1512:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    1514:	b920      	cbnz	r0, 1520 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>
    1516:	4b76      	ldr	r3, [pc, #472]	; (16f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
    1518:	9300      	str	r3, [sp, #0]
    151a:	6966      	ldr	r6, [r4, #20]
    151c:	236f      	movs	r3, #111	; 0x6f
    151e:	e7c2      	b.n	14a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->one_over_one_plus_x_lut =
    1520:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
    1522:	7832      	ldrb	r2, [r6, #0]
    1524:	f898 3000 	ldrb.w	r3, [r8]
    1528:	2a07      	cmp	r2, #7
    152a:	d10c      	bne.n	1546 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
    TF_LITE_ENSURE(context,
    152c:	2b09      	cmp	r3, #9
    152e:	d03d      	beq.n	15ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
    1530:	2b07      	cmp	r3, #7
    1532:	d017      	beq.n	1564 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    1534:	4b6f      	ldr	r3, [pc, #444]	; (16f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
    1536:	9300      	str	r3, [sp, #0]
    1538:	6965      	ldr	r5, [r4, #20]
    153a:	2375      	movs	r3, #117	; 0x75
    153c:	4a63      	ldr	r2, [pc, #396]	; (16cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    153e:	4967      	ldr	r1, [pc, #412]	; (16dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    1540:	4620      	mov	r0, r4
    1542:	47a8      	blx	r5
    1544:	e7a4      	b.n	1490 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    1546:	429a      	cmp	r2, r3
    1548:	d030      	beq.n	15ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
    154a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    154e:	4b6a      	ldr	r3, [pc, #424]	; (16f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    1550:	9301      	str	r3, [sp, #4]
    1552:	4b6a      	ldr	r3, [pc, #424]	; (16fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    1554:	9300      	str	r3, [sp, #0]
    1556:	6965      	ldr	r5, [r4, #20]
    1558:	2378      	movs	r3, #120	; 0x78
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    155a:	4a5c      	ldr	r2, [pc, #368]	; (16cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    155c:	495c      	ldr	r1, [pc, #368]	; (16d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    155e:	4620      	mov	r0, r4
    1560:	47a8      	blx	r5
    1562:	e795      	b.n	1490 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    1564:	6933      	ldr	r3, [r6, #16]
    1566:	b14b      	cbz	r3, 157c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x144>
    1568:	2200      	movs	r2, #0
    156a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    156e:	4b64      	ldr	r3, [pc, #400]	; (1700 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    1570:	9301      	str	r3, [sp, #4]
    1572:	4b64      	ldr	r3, [pc, #400]	; (1704 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    1574:	9300      	str	r3, [sp, #0]
    1576:	6965      	ldr	r5, [r4, #20]
    1578:	237d      	movs	r3, #125	; 0x7d
    157a:	e7ee      	b.n	155a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    157c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    157e:	eddf 0a62 	vldr	s1, [pc, #392]	; 1708 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    1582:	4862      	ldr	r0, [pc, #392]	; (170c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    1584:	f240 2201 	movw	r2, #513	; 0x201
    1588:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
    158c:	f006 fe00 	bl	8190 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    1590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1592:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 1708 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    1596:	485e      	ldr	r0, [pc, #376]	; (1710 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
    1598:	f240 2201 	movw	r2, #513	; 0x201
    159c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    15a0:	f006 fdf6 	bl	8190 <_ZN6tflite7gen_lutEPFffEffPsi>
    op_data->zero_point = output->params.zero_point;
    15a4:	6933      	ldr	r3, [r6, #16]
    15a6:	61fb      	str	r3, [r7, #28]
    op_data->scale = output->params.scale;
    15a8:	68f3      	ldr	r3, [r6, #12]
    15aa:	623b      	str	r3, [r7, #32]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    15ac:	f898 5000 	ldrb.w	r5, [r8]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    15b0:	f8d9 9014 	ldr.w	r9, [r9, #20]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    15b4:	2d09      	cmp	r5, #9
    15b6:	d039      	beq.n	162c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f4>
    15b8:	2d07      	cmp	r5, #7
    15ba:	f040 8129 	bne.w	1810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3d8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    15be:	6933      	ldr	r3, [r6, #16]
    15c0:	b14b      	cbz	r3, 15d6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
    15c2:	2200      	movs	r2, #0
    15c4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    15c8:	4b4d      	ldr	r3, [pc, #308]	; (1700 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    15ca:	9301      	str	r3, [sp, #4]
    15cc:	4b4d      	ldr	r3, [pc, #308]	; (1704 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    15ce:	9300      	str	r3, [sp, #0]
    15d0:	6965      	ldr	r5, [r4, #20]
    15d2:	2325      	movs	r3, #37	; 0x25
    15d4:	e7c1      	b.n	155a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    15d6:	eddf 7a4f 	vldr	s15, [pc, #316]	; 1714 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>
    15da:	ed96 7a03 	vldr	s14, [r6, #12]
    15de:	eddf 6a4e 	vldr	s13, [pc, #312]	; 1718 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>
    15e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    15e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15ea:	bfcc      	ite	gt
    15ec:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    15f0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
    15f4:	eef4 7ae6 	vcmpe.f32	s15, s13
    15f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15fc:	f340 80c1 	ble.w	1782 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x34a>
    1600:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    1604:	2200      	movs	r2, #0
    1606:	ee17 0a10 	vmov	r0, s14
    160a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    160e:	f7fe ff2b 	bl	468 <__aeabi_f2d>
    1612:	4b42      	ldr	r3, [pc, #264]	; (171c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    1614:	9301      	str	r3, [sp, #4]
    1616:	e9cd 0102 	strd	r0, r1, [sp, #8]
    161a:	4b41      	ldr	r3, [pc, #260]	; (1720 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    161c:	9300      	str	r3, [sp, #0]
    161e:	6965      	ldr	r5, [r4, #20]
    1620:	2326      	movs	r3, #38	; 0x26
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    1622:	4a2a      	ldr	r2, [pc, #168]	; (16cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1624:	493f      	ldr	r1, [pc, #252]	; (1724 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
    1626:	4620      	mov	r0, r4
    1628:	47a8      	blx	r5
    162a:	e731      	b.n	1490 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
      if (output->type == kTfLiteInt16) {
    162c:	7830      	ldrb	r0, [r6, #0]
    162e:	2807      	cmp	r0, #7
    1630:	d133      	bne.n	169a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x262>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    1632:	6933      	ldr	r3, [r6, #16]
    1634:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    1638:	d009      	beq.n	164e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x216>
    163a:	4a3b      	ldr	r2, [pc, #236]	; (1728 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
    163c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1640:	4b3a      	ldr	r3, [pc, #232]	; (172c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
    1642:	9301      	str	r3, [sp, #4]
    1644:	4b2f      	ldr	r3, [pc, #188]	; (1704 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    1646:	9300      	str	r3, [sp, #0]
    1648:	6965      	ldr	r5, [r4, #20]
    164a:	232b      	movs	r3, #43	; 0x2b
    164c:	e785      	b.n	155a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    164e:	eddf 7a38 	vldr	s15, [pc, #224]	; 1730 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>
    1652:	ed96 7a03 	vldr	s14, [r6, #12]
    1656:	eddf 6a37 	vldr	s13, [pc, #220]	; 1734 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>
    165a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1662:	bfcc      	ite	gt
    1664:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    1668:	ee77 7ac7 	vsuble.f32	s15, s15, s14
    166c:	eef4 7ae6 	vcmpe.f32	s15, s13
    1670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1674:	f340 80a6 	ble.w	17c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
    1678:	4b2f      	ldr	r3, [pc, #188]	; (1738 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    167a:	2200      	movs	r2, #0
    167c:	ee17 0a10 	vmov	r0, s14
    1680:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1684:	f7fe fef0 	bl	468 <__aeabi_f2d>
    1688:	4b2c      	ldr	r3, [pc, #176]	; (173c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    168a:	9301      	str	r3, [sp, #4]
    168c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1690:	4b23      	ldr	r3, [pc, #140]	; (1720 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    1692:	9300      	str	r3, [sp, #0]
    1694:	6965      	ldr	r5, [r4, #20]
    1696:	232c      	movs	r3, #44	; 0x2c
    1698:	e7c3      	b.n	1622 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ea>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    169a:	2809      	cmp	r0, #9
    169c:	d054      	beq.n	1748 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>
    169e:	6967      	ldr	r7, [r4, #20]
    16a0:	f007 fee8 	bl	9474 <TfLiteTypeGetName>
    16a4:	4606      	mov	r6, r0
    16a6:	4628      	mov	r0, r5
    16a8:	f007 fee4 	bl	9474 <TfLiteTypeGetName>
    16ac:	4b24      	ldr	r3, [pc, #144]	; (1740 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    16ae:	9301      	str	r3, [sp, #4]
    16b0:	4b11      	ldr	r3, [pc, #68]	; (16f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    16b2:	9300      	str	r3, [sp, #0]
    16b4:	e9cd 6002 	strd	r6, r0, [sp, #8]
    16b8:	4a04      	ldr	r2, [pc, #16]	; (16cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    16ba:	4922      	ldr	r1, [pc, #136]	; (1744 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    16bc:	232f      	movs	r3, #47	; 0x2f
    16be:	4620      	mov	r0, r4
    16c0:	47b8      	blx	r7
    16c2:	e6e5      	b.n	1490 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    16c4:	000463cb 	.word	0x000463cb
    16c8:	000463a3 	.word	0x000463a3
    16cc:	00046330 	.word	0x00046330
    16d0:	00045ac0 	.word	0x00045ac0
    16d4:	000462f8 	.word	0x000462f8
    16d8:	00045d51 	.word	0x00045d51
    16dc:	00045a68 	.word	0x00045a68
    16e0:	000463b3 	.word	0x000463b3
    16e4:	00045d74 	.word	0x00045d74
    16e8:	000463cd 	.word	0x000463cd
    16ec:	000463e8 	.word	0x000463e8
    16f0:	000463ff 	.word	0x000463ff
    16f4:	00045b56 	.word	0x00045b56
    16f8:	00045d86 	.word	0x00045d86
    16fc:	00045d93 	.word	0x00045d93
    1700:	000466af 	.word	0x000466af
    1704:	00046422 	.word	0x00046422
    1708:	00000000 	.word	0x00000000
    170c:	00012913 	.word	0x00012913
    1710:	00012905 	.word	0x00012905
    1714:	38000000 	.word	0x38000000
    1718:	3303126f 	.word	0x3303126f
    171c:	0004645c 	.word	0x0004645c
    1720:	00046468 	.word	0x00046468
    1724:	0004643c 	.word	0x0004643c
    1728:	ffff8000 	.word	0xffff8000
    172c:	0004647d 	.word	0x0004647d
    1730:	37800000 	.word	0x37800000
    1734:	3283126f 	.word	0x3283126f
    1738:	3ef00000 	.word	0x3ef00000
    173c:	00046484 	.word	0x00046484
    1740:	00045b90 	.word	0x00045b90
    1744:	000460b4 	.word	0x000460b4
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1748:	6933      	ldr	r3, [r6, #16]
    174a:	f113 0f80 	cmn.w	r3, #128	; 0x80
    174e:	d00a      	beq.n	1766 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x32e>
    1750:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    1754:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1758:	4b49      	ldr	r3, [pc, #292]	; (1880 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x448>)
    175a:	9301      	str	r3, [sp, #4]
    175c:	4b49      	ldr	r3, [pc, #292]	; (1884 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
    175e:	9300      	str	r3, [sp, #0]
    1760:	6965      	ldr	r5, [r4, #20]
    1762:	2330      	movs	r3, #48	; 0x30
    1764:	e6f9      	b.n	155a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    1766:	ed96 7a03 	vldr	s14, [r6, #12]
    176a:	eddf 7a47 	vldr	s15, [pc, #284]	; 1888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x450>
    176e:	eeb4 7a67 	vcmp.f32	s14, s15
    1772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1776:	d025      	beq.n	17c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
    1778:	4b44      	ldr	r3, [pc, #272]	; (188c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x454>)
    177a:	9300      	str	r3, [sp, #0]
    177c:	6965      	ldr	r5, [r4, #20]
    177e:	2331      	movs	r3, #49	; 0x31
    1780:	e6dc      	b.n	153c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x104>
          static_cast<double>(input->params.scale) *
    1782:	f8d8 000c 	ldr.w	r0, [r8, #12]
    1786:	f7fe fe6f 	bl	468 <__aeabi_f2d>
    178a:	4604      	mov	r4, r0
          static_cast<double>(params->beta) /
    178c:	f8d9 0000 	ldr.w	r0, [r9]
          static_cast<double>(input->params.scale) *
    1790:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    1792:	f7fe fe69 	bl	468 <__aeabi_f2d>
    1796:	4602      	mov	r2, r0
    1798:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    179a:	4620      	mov	r0, r4
    179c:	4629      	mov	r1, r5
    179e:	f7fe febb 	bl	518 <__aeabi_dmul>
      double input_scale_beta_rescale =
    17a2:	a335      	add	r3, pc, #212	; (adr r3, 1878 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x440>)
    17a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17a8:	f7fe ffe0 	bl	76c <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    17ac:	f107 0608 	add.w	r6, r7, #8
      double input_scale_beta_rescale =
    17b0:	ec41 0b10 	vmov	d0, r0, r1
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    17b4:	a907      	add	r1, sp, #28
    17b6:	4630      	mov	r0, r6
    17b8:	f004 f87c 	bl	58b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    17bc:	9b07      	ldr	r3, [sp, #28]
    17be:	60fb      	str	r3, [r7, #12]
  return kTfLiteOk;
    17c0:	2500      	movs	r5, #0
    17c2:	e650      	b.n	1466 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      tflite::PreprocessSoftmaxScaling(
    17c4:	f8d8 000c 	ldr.w	r0, [r8, #12]
    17c8:	f7fe fe4e 	bl	468 <__aeabi_f2d>
    17cc:	ec41 0b18 	vmov	d8, r0, r1
    17d0:	f8d9 0000 	ldr.w	r0, [r9]
    17d4:	f7fe fe48 	bl	468 <__aeabi_f2d>
    17d8:	eeb0 1a48 	vmov.f32	s2, s16
    17dc:	eef0 1a68 	vmov.f32	s3, s17
    17e0:	f107 0408 	add.w	r4, r7, #8
    17e4:	ec41 0b10 	vmov	d0, r0, r1
    17e8:	aa07      	add	r2, sp, #28
    17ea:	4621      	mov	r1, r4
    17ec:	2005      	movs	r0, #5
    17ee:	f7ff fd8f 	bl	1310 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    17f2:	9907      	ldr	r1, [sp, #28]
    17f4:	60f9      	str	r1, [r7, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    17f6:	221f      	movs	r2, #31
    17f8:	2005      	movs	r0, #5
    17fa:	f010 fa0d 	bl	11c18 <_ZN6tflite20CalculateInputRadiusEiii>
    17fe:	f7fe fe21 	bl	444 <__aeabi_i2d>
    1802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
    1806:	4619      	mov	r1, r3
    1808:	f7ff f920 	bl	a4c <__aeabi_d2iz>
    180c:	61b8      	str	r0, [r7, #24]
    180e:	e7d7      	b.n	17c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1810:	2d01      	cmp	r5, #1
    1812:	d013      	beq.n	183c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x404>
    1814:	4628      	mov	r0, r5
    1816:	6966      	ldr	r6, [r4, #20]
    1818:	f007 fe2c 	bl	9474 <TfLiteTypeGetName>
    181c:	4605      	mov	r5, r0
    181e:	2001      	movs	r0, #1
    1820:	f007 fe28 	bl	9474 <TfLiteTypeGetName>
    1824:	4b1a      	ldr	r3, [pc, #104]	; (1890 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
    1826:	9301      	str	r3, [sp, #4]
    1828:	4b1a      	ldr	r3, [pc, #104]	; (1894 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x45c>)
    182a:	9300      	str	r3, [sp, #0]
    182c:	e9cd 5002 	strd	r5, r0, [sp, #8]
    1830:	4a19      	ldr	r2, [pc, #100]	; (1898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
    1832:	491a      	ldr	r1, [pc, #104]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
    1834:	234e      	movs	r3, #78	; 0x4e
    1836:	4620      	mov	r0, r4
    1838:	47b0      	blx	r6
    183a:	e629      	b.n	1490 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    183c:	7830      	ldrb	r0, [r6, #0]
    183e:	2801      	cmp	r0, #1
    1840:	d012      	beq.n	1868 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x430>
    1842:	6967      	ldr	r7, [r4, #20]
    1844:	f007 fe16 	bl	9474 <TfLiteTypeGetName>
    1848:	4606      	mov	r6, r0
    184a:	4628      	mov	r0, r5
    184c:	f007 fe12 	bl	9474 <TfLiteTypeGetName>
    1850:	4b0f      	ldr	r3, [pc, #60]	; (1890 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
    1852:	9301      	str	r3, [sp, #4]
    1854:	4b12      	ldr	r3, [pc, #72]	; (18a0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x468>)
    1856:	9300      	str	r3, [sp, #0]
    1858:	e9cd 6002 	strd	r6, r0, [sp, #8]
    185c:	4a0e      	ldr	r2, [pc, #56]	; (1898 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
    185e:	490f      	ldr	r1, [pc, #60]	; (189c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
    1860:	234f      	movs	r3, #79	; 0x4f
    1862:	4620      	mov	r0, r4
    1864:	47b8      	blx	r7
    1866:	e5fe      	b.n	1466 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    op_data->beta = static_cast<double>(params->beta);
    1868:	f8d9 0000 	ldr.w	r0, [r9]
    186c:	f7fe fdfc 	bl	468 <__aeabi_f2d>
    1870:	e9c7 0100 	strd	r0, r1, [r7]
    1874:	e7a4      	b.n	17c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    1876:	bf00      	nop
    1878:	00140014 	.word	0x00140014
    187c:	3f240014 	.word	0x3f240014
    1880:	00046490 	.word	0x00046490
    1884:	00046422 	.word	0x00046422
    1888:	3b800000 	.word	0x3b800000
    188c:	00046495 	.word	0x00046495
    1890:	000464b7 	.word	0x000464b7
    1894:	00045d93 	.word	0x00045d93
    1898:	00046330 	.word	0x00046330
    189c:	000460b4 	.word	0x000460b4
    18a0:	00045d86 	.word	0x00045d86
    18a4:	00000000 	.word	0x00000000

000018a8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
    /**
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    18a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        const float noise = static_cast<float>(noise_floor_db * -1);
    18ac:	4249      	negs	r1, r1
    18ae:	ee07 1a90 	vmov	s15, r1
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    18b2:	ed2d 8b06 	vpush	{d8-d10}
        const float noise = static_cast<float>(noise_floor_db * -1);
    18b6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
    18ba:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
    18be:	ee38 7a07 	vadd.f32	s14, s16, s14
    18c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    18c6:	eec7 9a87 	vdiv.f32	s19, s15, s14

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
            float f = features_matrix->buffer[ix];
            if (f < 1e-30) {
    18ca:	a73a      	add	r7, pc, #232	; (adr r7, 19b4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x10c>)
    18cc:	e9d7 6700 	ldrd	r6, r7, [r7]
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    18d0:	b083      	sub	sp, #12
    18d2:	4604      	mov	r4, r0
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    18d4:	2500      	movs	r5, #0
                f = 1e-30;
    18d6:	ed9f 9a30 	vldr	s18, [pc, #192]	; 1998 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf0>
    {
        int e;
        float f = frexpf(fabsf(a), &e);
        float y = 1.23149591368684f;
        y *= f;
        y += -4.11852516267426f;
    18da:	ed9f aa30 	vldr	s20, [pc, #192]	; 199c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf4>
    18de:	eef0 8a67 	vmov.f32	s17, s15
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    18e2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    18e6:	4353      	muls	r3, r2
    18e8:	42ab      	cmp	r3, r5
    18ea:	d94f      	bls.n	198c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe4>
            float f = features_matrix->buffer[ix];
    18ec:	6823      	ldr	r3, [r4, #0]
    18ee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    18f2:	ea4f 0885 	mov.w	r8, r5, lsl #2
    18f6:	f8d3 9000 	ldr.w	r9, [r3]
            if (f < 1e-30) {
    18fa:	4648      	mov	r0, r9
    18fc:	f7fe fdb4 	bl	468 <__aeabi_f2d>
    1900:	4632      	mov	r2, r6
    1902:	463b      	mov	r3, r7
    1904:	f7ff f87a 	bl	9fc <__aeabi_dcmplt>
        float f = frexpf(fabsf(a), &e);
    1908:	ee00 9a10 	vmov	s0, r9
                f = 1e-30;
    190c:	2800      	cmp	r0, #0
    190e:	bf18      	it	ne
    1910:	eeb0 0a49 	vmovne.f32	s0, s18
    1914:	f00e f80c 	bl	f930 <fabsf>
    1918:	a801      	add	r0, sp, #4
    191a:	f00e f87b 	bl	fa14 <frexpf>
        y += -4.11852516267426f;
    191e:	eddf 7a20 	vldr	s15, [pc, #128]	; 19a0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf8>
        y *= f;
        y += 6.02197014179219f;
    1922:	ed9f 7a20 	vldr	s14, [pc, #128]	; 19a4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xfc>
        y += -4.11852516267426f;
    1926:	eee0 7a0a 	vfma.f32	s15, s0, s20
            }
            f = numpy::log10(f);
            f *= 10.0f; // scale by 10
            f += noise;
    192a:	eef0 6a48 	vmov.f32	s13, s16
        y += 6.02197014179219f;
    192e:	eea0 7a27 	vfma.f32	s14, s0, s15
        y *= f;
        y += -3.13396450166353f;
    1932:	eddf 7a1d 	vldr	s15, [pc, #116]	; 19a8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x100>
    1936:	eee0 7a07 	vfma.f32	s15, s0, s14
    193a:	eeb0 7a67 	vmov.f32	s14, s15
        y += e;
    193e:	eddd 7a01 	vldr	s15, [sp, #4]
    1942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1946:	ee77 7a87 	vadd.f32	s15, s15, s14
     * @param a Input number
     * @returns Log10 value of a
     */
    __attribute__((always_inline)) static inline float log10(float a)
    {
        return numpy::log2(a) * 0.3010299956639812f;
    194a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 19ac <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x104>
    194e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1952:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    1956:	eee7 6a87 	vfma.f32	s13, s15, s14
            f *= noise_scale;
    195a:	ee69 7aa6 	vmul.f32	s15, s19, s13
            // clip again
            if (f < 0.0f) f = 0.0f;
    195e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1966:	d40e      	bmi.n	1986 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xde>
            else if (f > 1.0f) f = 1.0f;
    1968:	eef4 7a68 	vcmp.f32	s15, s17
    196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1974:	bfc8      	it	gt
    1976:	eef0 7a47 	vmovgt.f32	s15, s14
            features_matrix->buffer[ix] = f;
    197a:	6823      	ldr	r3, [r4, #0]
    197c:	4443      	add	r3, r8
    197e:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    1982:	3501      	adds	r5, #1
    1984:	e7ad      	b.n	18e2 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x3a>
            if (f < 0.0f) f = 0.0f;
    1986:	eddf 7a0a 	vldr	s15, [pc, #40]	; 19b0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x108>
    198a:	e7f6      	b.n	197a <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xd2>
        }

        return EIDSP_OK;
    }
    198c:	2000      	movs	r0, #0
    198e:	b003      	add	sp, #12
    1990:	ecbd 8b06 	vpop	{d8-d10}
    1994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1998:	0da24260 	.word	0x0da24260
    199c:	3f9da1a8 	.word	0x3f9da1a8
    19a0:	c083caf5 	.word	0xc083caf5
    19a4:	40c0b3fb 	.word	0x40c0b3fb
    19a8:	c04892e0 	.word	0xc04892e0
    19ac:	3e9a209b 	.word	0x3e9a209b
    19b0:	00000000 	.word	0x00000000
    19b4:	feebc2a0 	.word	0xfeebc2a0
    19b8:	39b4484b 	.word	0x39b4484b
    19bc:	00000000 	.word	0x00000000

000019c0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
    19c0:	b530      	push	{r4, r5, lr}
    19c2:	ed2d 8b04 	vpush	{d8-d9}
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    19c6:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    static int normalize(matrix_t *matrix) {
    19ca:	b08f      	sub	sp, #60	; 0x3c
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    19cc:	6803      	ldr	r3, [r0, #0]
    19ce:	434a      	muls	r2, r1
    19d0:	a802      	add	r0, sp, #8
    19d2:	2101      	movs	r1, #1
    19d4:	f013 fa94 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>

        matrix_t min_matrix(1, 1);
    19d8:	2201      	movs	r2, #1
    19da:	2300      	movs	r3, #0
    19dc:	4611      	mov	r1, r2
    19de:	a806      	add	r0, sp, #24
    19e0:	f013 fa8e 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
        if (!min_matrix.buffer) {
    19e4:	9b06      	ldr	r3, [sp, #24]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d07d      	beq.n	1ae6 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x126>
        if (input_matrix->rows != output_matrix->rows) {
    19ea:	9a03      	ldr	r2, [sp, #12]
    19ec:	9b07      	ldr	r3, [sp, #28]
    19ee:	429a      	cmp	r2, r3
    19f0:	d17b      	bne.n	1aea <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        if (output_matrix->cols != 1) {
    19f2:	9b08      	ldr	r3, [sp, #32]
    19f4:	2b01      	cmp	r3, #1
    19f6:	d178      	bne.n	1aea <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        for (size_t row = 0; row < input_matrix->rows; row++) {
    19f8:	2400      	movs	r4, #0
    19fa:	9b03      	ldr	r3, [sp, #12]
    19fc:	42a3      	cmp	r3, r4
    19fe:	d910      	bls.n	1a22 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x62>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
    1a00:	9904      	ldr	r1, [sp, #16]
    1a02:	9802      	ldr	r0, [sp, #8]
    1a04:	fb01 f504 	mul.w	r5, r1, r4
    1a08:	ab0a      	add	r3, sp, #40	; 0x28
    1a0a:	aa01      	add	r2, sp, #4
    1a0c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1a10:	f011 fca0 	bl	13354 <arm_min_f32>
            output_matrix->buffer[row] = min;
    1a14:	9b06      	ldr	r3, [sp, #24]
    1a16:	9a01      	ldr	r2, [sp, #4]
    1a18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a1c:	3401      	adds	r4, #1
            output_matrix->buffer[row] = min;
    1a1e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a20:	e7eb      	b.n	19fa <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
        r = min(&temp_matrix, &min_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        matrix_t max_matrix(1, 1);
    1a22:	2201      	movs	r2, #1
    1a24:	2300      	movs	r3, #0
    1a26:	4611      	mov	r1, r2
    1a28:	a80a      	add	r0, sp, #40	; 0x28
    1a2a:	f013 fa69 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
        if (!max_matrix.buffer) {
    1a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a30:	2b00      	cmp	r3, #0
    1a32:	d054      	beq.n	1ade <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x11e>
        if (input_matrix->rows != output_matrix->rows) {
    1a34:	9a03      	ldr	r2, [sp, #12]
    1a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a38:	429a      	cmp	r2, r3
    1a3a:	d152      	bne.n	1ae2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        if (output_matrix->cols != 1) {
    1a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1a3e:	2b01      	cmp	r3, #1
    1a40:	d14f      	bne.n	1ae2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a42:	2400      	movs	r4, #0
    1a44:	9b03      	ldr	r3, [sp, #12]
    1a46:	42a3      	cmp	r3, r4
    1a48:	d910      	bls.n	1a6c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xac>
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
    1a4a:	9904      	ldr	r1, [sp, #16]
    1a4c:	9802      	ldr	r0, [sp, #8]
    1a4e:	fb01 f504 	mul.w	r5, r1, r4
    1a52:	ab01      	add	r3, sp, #4
    1a54:	466a      	mov	r2, sp
    1a56:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1a5a:	f011 fc28 	bl	132ae <arm_max_f32>
            output_matrix->buffer[row] = max;
    1a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a60:	9a00      	ldr	r2, [sp, #0]
    1a62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a66:	3401      	adds	r4, #1
            output_matrix->buffer[row] = max;
    1a68:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a6a:	e7eb      	b.n	1a44 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x84>
        r = max(&temp_matrix, &max_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
    1a6c:	9b06      	ldr	r3, [sp, #24]
    1a6e:	edd3 9a00 	vldr	s19, [r3]
    1a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a74:	ed93 8a00 	vldr	s16, [r3]
    1a78:	ee38 8a69 	vsub.f32	s16, s16, s19
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
    1a7c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    1a80:	ee18 0a10 	vmov	r0, s16
    1a84:	f7fe fcf0 	bl	468 <__aeabi_f2d>
    1a88:	a31b      	add	r3, pc, #108	; (adr r3, 1af8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
    1a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a8e:	f7fe ffb5 	bl	9fc <__aeabi_dcmplt>
    1a92:	bb08      	cbnz	r0, 1ad8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x118>
    1a94:	eec9 8a08 	vdiv.f32	s17, s18, s16

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
    1a98:	a802      	add	r0, sp, #8
    1a9a:	eeb0 0a69 	vmov.f32	s0, s19
    1a9e:	f013 fa44 	bl	14f2a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
        if (r != EIDSP_OK) {
    1aa2:	4604      	mov	r4, r0
    1aa4:	b950      	cbnz	r0, 1abc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
        if (scale == 1.0f) return EIDSP_OK;
    1aa6:	eef4 8a49 	vcmp.f32	s17, s18
    1aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1aae:	d005      	beq.n	1abc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
    1ab0:	eeb0 0a68 	vmov.f32	s0, s17
    1ab4:	a802      	add	r0, sp, #8
    1ab6:	f008 f907 	bl	9cc8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
    1aba:	4604      	mov	r4, r0
        matrix_t max_matrix(1, 1);
    1abc:	a80a      	add	r0, sp, #40	; 0x28
    1abe:	f010 f858 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
    1ac2:	a806      	add	r0, sp, #24
    1ac4:	f010 f855 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    1ac8:	a802      	add	r0, sp, #8
    1aca:	f010 f852 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        return EIDSP_OK;
    }
    1ace:	4620      	mov	r0, r4
    1ad0:	b00f      	add	sp, #60	; 0x3c
    1ad2:	ecbd 8b04 	vpop	{d8-d9}
    1ad6:	bd30      	pop	{r4, r5, pc}
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
    1ad8:	eef0 8a49 	vmov.f32	s17, s18
    1adc:	e7dc      	b.n	1a98 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xd8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1ade:	4c04      	ldr	r4, [pc, #16]	; (1af0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
    1ae0:	e7ec      	b.n	1abc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1ae2:	4c04      	ldr	r4, [pc, #16]	; (1af4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
    1ae4:	e7ea      	b.n	1abc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1ae6:	4c02      	ldr	r4, [pc, #8]	; (1af0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
    1ae8:	e7eb      	b.n	1ac2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1aea:	4c02      	ldr	r4, [pc, #8]	; (1af4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
    1aec:	e7e9      	b.n	1ac2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
    1aee:	bf00      	nop
    1af0:	fffffc16 	.word	0xfffffc16
    1af4:	fffffc14 	.word	0xfffffc14
    1af8:	d2f1a9fc 	.word	0xd2f1a9fc
    1afc:	3f50624d 	.word	0x3f50624d

00001b00 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

        return EIDSP_OK;
    }

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
    1b00:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    1b04:	ed2d 8b02 	vpush	{d8}
    1b08:	4680      	mov	r8, r0
    1b0a:	b084      	sub	sp, #16
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
    1b0c:	00d8      	lsls	r0, r3, #3
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
    1b0e:	460c      	mov	r4, r1
    1b10:	4617      	mov	r7, r2
    1b12:	461e      	mov	r6, r3
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
    1b14:	f010 f87a 	bl	11c0c <_Z9ei_mallocj>
        if (!fft_output) {
    1b18:	4605      	mov	r5, r0
    1b1a:	b160      	cbz	r0, 1b36 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x36>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
    1b1c:	ab03      	add	r3, sp, #12
    1b1e:	9300      	str	r3, [sp, #0]
    1b20:	2300      	movs	r3, #0
    1b22:	4638      	mov	r0, r7
    1b24:	461a      	mov	r2, r3
    1b26:	4619      	mov	r1, r3
    1b28:	f7ff fb1a 	bl	1160 <kiss_fftr_alloc>
        if (!cfg) {
    1b2c:	4607      	mov	r7, r0
    1b2e:	b920      	cbnz	r0, 1b3a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
    1b30:	4628      	mov	r0, r5
    1b32:	f010 f86f 	bl	11c14 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1b36:	4826      	ldr	r0, [pc, #152]	; (1bd0 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd0>)
    1b38:	e03e      	b.n	1bb8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xb8>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
    1b3a:	4641      	mov	r1, r8
    1b3c:	462a      	mov	r2, r5
    1b3e:	f003 fe21 	bl	5784 <kiss_fftr>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    1b42:	ed9f 8b21 	vldr	d8, [pc, #132]	; 1bc8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
    1b46:	46a8      	mov	r8, r5
    1b48:	eb04 0686 	add.w	r6, r4, r6, lsl #2

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    1b4c:	42b4      	cmp	r4, r6
    1b4e:	f108 0808 	add.w	r8, r8, #8
    1b52:	d02a      	beq.n	1baa <_ZN2ei5numpy13software_rfftEPfS1_jj+0xaa>
    1b54:	f858 0c08 	ldr.w	r0, [r8, #-8]
    1b58:	f7fe fc86 	bl	468 <__aeabi_f2d>
    1b5c:	eeb0 1a48 	vmov.f32	s2, s16
    1b60:	eef0 1a68 	vmov.f32	s3, s17
    1b64:	ec41 0b10 	vmov	d0, r0, r1
    1b68:	f000 fc82 	bl	2470 <pow>
    1b6c:	f858 0c04 	ldr.w	r0, [r8, #-4]
    1b70:	ec5b ab10 	vmov	sl, fp, d0
    1b74:	f7fe fc78 	bl	468 <__aeabi_f2d>
    1b78:	eeb0 1a48 	vmov.f32	s2, s16
    1b7c:	eef0 1a68 	vmov.f32	s3, s17
    1b80:	ec41 0b10 	vmov	d0, r0, r1
    1b84:	f000 fc74 	bl	2470 <pow>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
    1b88:	4652      	mov	r2, sl
    1b8a:	465b      	mov	r3, fp
    1b8c:	ec51 0b10 	vmov	r0, r1, d0
    1b90:	f7fe fb0c 	bl	1ac <__adddf3>
    1b94:	ec41 0b10 	vmov	d0, r0, r1
    1b98:	f00d ff8c 	bl	fab4 <sqrt>
    1b9c:	ec51 0b10 	vmov	r0, r1, d0
    1ba0:	f7fe ff7c 	bl	a9c <__aeabi_d2f>
    1ba4:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    1ba8:	e7d0      	b.n	1b4c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x4c>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
    1baa:	4638      	mov	r0, r7
    1bac:	f010 f832 	bl	11c14 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
    1bb0:	4628      	mov	r0, r5
    1bb2:	f010 f82f 	bl	11c14 <_Z7ei_freePv>

        return EIDSP_OK;
    1bb6:	2000      	movs	r0, #0
    }
    1bb8:	b004      	add	sp, #16
    1bba:	ecbd 8b02 	vpop	{d8}
    1bbe:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    1bc2:	bf00      	nop
    1bc4:	f3af 8000 	nop.w
    1bc8:	00000000 	.word	0x00000000
    1bcc:	40000000 	.word	0x40000000
    1bd0:	fffffc16 	.word	0xfffffc16
    1bd4:	00000000 	.word	0x00000000

00001bd8 <_ZN2ei5numpy4rfftEPKfjPfjj>:
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
    1bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bdc:	b090      	sub	sp, #64	; 0x40
    1bde:	4680      	mov	r8, r0
    1be0:	9c18      	ldr	r4, [sp, #96]	; 0x60
        size_t n_fft_out_features = (n_fft / 2) + 1;
    1be2:	0867      	lsrs	r7, r4, #1
    1be4:	f107 0901 	add.w	r9, r7, #1
        if (output_size != n_fft_out_features) {
    1be8:	4599      	cmp	r9, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
    1bea:	460d      	mov	r5, r1
    1bec:	4616      	mov	r6, r2
        if (output_size != n_fft_out_features) {
    1bee:	d17e      	bne.n	1cee <_ZN2ei5numpy4rfftEPKfjPfjj+0x116>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1bf0:	2300      	movs	r3, #0
    1bf2:	4622      	mov	r2, r4
    1bf4:	2101      	movs	r1, #1
    1bf6:	a802      	add	r0, sp, #8
    1bf8:	f013 f982 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    1bfc:	9802      	ldr	r0, [sp, #8]
    1bfe:	2800      	cmp	r0, #0
    1c00:	d073      	beq.n	1cea <_ZN2ei5numpy4rfftEPKfjPfjj+0x112>
    1c02:	42a5      	cmp	r5, r4
    1c04:	bf28      	it	cs
    1c06:	4625      	movcs	r5, r4
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
    1c08:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1c0c:	4652      	mov	r2, sl
    1c0e:	4641      	mov	r1, r8
    1c10:	f014 fa21 	bl	16056 <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
    1c14:	9802      	ldr	r0, [sp, #8]
    1c16:	1b62      	subs	r2, r4, r5
    1c18:	0092      	lsls	r2, r2, #2
    1c1a:	2100      	movs	r1, #0
    1c1c:	4450      	add	r0, sl
    1c1e:	f014 fa42 	bl	160a6 <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
    1c22:	2c20      	cmp	r4, #32
    1c24:	d020      	beq.n	1c68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c26:	2c40      	cmp	r4, #64	; 0x40
    1c28:	d01e      	beq.n	1c68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c2a:	2c80      	cmp	r4, #128	; 0x80
    1c2c:	d01c      	beq.n	1c68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c2e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    1c32:	d019      	beq.n	1c68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c34:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1c38:	d016      	beq.n	1c68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
    1c3a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    1c3e:	d013      	beq.n	1c68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c40:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    1c44:	d010      	beq.n	1c68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c46:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    1c4a:	d00d      	beq.n	1c68 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
    1c4c:	9802      	ldr	r0, [sp, #8]
    1c4e:	464b      	mov	r3, r9
    1c50:	4622      	mov	r2, r4
    1c52:	4631      	mov	r1, r6
    1c54:	f7ff ff54 	bl	1b00 <_ZN2ei5numpy13software_rfftEPfS1_jj>
    1c58:	4605      	mov	r5, r0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1c5a:	a802      	add	r0, sp, #8
    1c5c:	f00f ff89 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    }
    1c60:	4628      	mov	r0, r5
    1c62:	b010      	add	sp, #64	; 0x40
    1c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
    1c68:	b2a1      	uxth	r1, r4
    1c6a:	a80a      	add	r0, sp, #40	; 0x28
    1c6c:	f006 fe96 	bl	899c <arm_rfft_fast_init_f32>
            if (status != ARM_MATH_SUCCESS) {
    1c70:	4605      	mov	r5, r0
    1c72:	2800      	cmp	r0, #0
    1c74:	d1f1      	bne.n	1c5a <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1c76:	4603      	mov	r3, r0
    1c78:	4622      	mov	r2, r4
    1c7a:	2101      	movs	r1, #1
    1c7c:	a806      	add	r0, sp, #24
    1c7e:	f013 f93f 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    1c82:	9a06      	ldr	r2, [sp, #24]
    1c84:	b92a      	cbnz	r2, 1c92 <_ZN2ei5numpy4rfftEPKfjPfjj+0xba>
    1c86:	a806      	add	r0, sp, #24
    1c88:	f00f ff73 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    1c8c:	f2a5 35ea 	subw	r5, r5, #1002	; 0x3ea
    1c90:	e7e3      	b.n	1c5a <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
    1c92:	462b      	mov	r3, r5
    1c94:	9902      	ldr	r1, [sp, #8]
    1c96:	a80a      	add	r0, sp, #40	; 0x28
    1c98:	f011 fa62 	bl	13160 <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
    1c9c:	9b06      	ldr	r3, [sp, #24]
    1c9e:	681a      	ldr	r2, [r3, #0]
    1ca0:	6032      	str	r2, [r6, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    1ca2:	685a      	ldr	r2, [r3, #4]
                output[ix] = rms_result * sqrt(2);
    1ca4:	f20f 0958 	addw	r9, pc, #88	; 0x58
    1ca8:	e9d9 8900 	ldrd	r8, r9, [r9]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    1cac:	eb06 0387 	add.w	r3, r6, r7, lsl #2
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1cb0:	2401      	movs	r4, #1
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    1cb2:	601a      	str	r2, [r3, #0]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1cb4:	3604      	adds	r6, #4
    1cb6:	42a7      	cmp	r7, r4
    1cb8:	d913      	bls.n	1ce2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x10a>
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
    1cba:	9806      	ldr	r0, [sp, #24]
    1cbc:	aa01      	add	r2, sp, #4
    1cbe:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    1cc2:	2102      	movs	r1, #2
    1cc4:	f006 fea4 	bl	8a10 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
    1cc8:	9801      	ldr	r0, [sp, #4]
    1cca:	f7fe fbcd 	bl	468 <__aeabi_f2d>
    1cce:	4642      	mov	r2, r8
    1cd0:	464b      	mov	r3, r9
    1cd2:	f7fe fc21 	bl	518 <__aeabi_dmul>
    1cd6:	f7fe fee1 	bl	a9c <__aeabi_d2f>
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1cda:	3401      	adds	r4, #1
                output[ix] = rms_result * sqrt(2);
    1cdc:	f846 0b04 	str.w	r0, [r6], #4
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1ce0:	e7e9      	b.n	1cb6 <_ZN2ei5numpy4rfftEPKfjPfjj+0xde>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1ce2:	a806      	add	r0, sp, #24
    1ce4:	f00f ff45 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    1ce8:	e7b7      	b.n	1c5a <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1cea:	4d03      	ldr	r5, [pc, #12]	; (1cf8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x120>)
    1cec:	e7b5      	b.n	1c5a <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
    1cee:	4d03      	ldr	r5, [pc, #12]	; (1cfc <_ZN2ei5numpy4rfftEPKfjPfjj+0x124>)
    1cf0:	e7b6      	b.n	1c60 <_ZN2ei5numpy4rfftEPKfjPfjj+0x88>
    1cf2:	bf00      	nop
    1cf4:	f3af 8000 	nop.w
    1cf8:	fffffc16 	.word	0xfffffc16
    1cfc:	fffffc11 	.word	0xfffffc11
    1d00:	667f3bcd 	.word	0x667f3bcd
    1d04:	3ff6a09e 	.word	0x3ff6a09e

00001d08 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0>:
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
    1d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d0c:	ed2d 8b02 	vpush	{d8}
    1d10:	4605      	mov	r5, r0
    1d12:	4688      	mov	r8, r1
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1d14:	6840      	ldr	r0, [r0, #4]
        uint16_t pad_size = (win_size - 1) / 2;
    1d16:	3901      	subs	r1, #1
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
    1d18:	b093      	sub	sp, #76	; 0x4c
        uint16_t pad_size = (win_size - 1) / 2;
    1d1a:	104e      	asrs	r6, r1, #1
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1d1c:	f021 0101 	bic.w	r1, r1, #1
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
    1d20:	e9cd 2300 	strd	r2, r3, [sp]
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1d24:	4401      	add	r1, r0
    1d26:	2300      	movs	r3, #0
    1d28:	68aa      	ldr	r2, [r5, #8]
    1d2a:	a802      	add	r0, sp, #8
    1d2c:	f013 f8e8 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    1d30:	9b02      	ldr	r3, [sp, #8]
    1d32:	2b00      	cmp	r3, #0
    1d34:	f000 80e3 	beq.w	1efe <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1f6>
        uint16_t pad_size = (win_size - 1) / 2;
    1d38:	b2b6      	uxth	r6, r6
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
    1d3a:	4633      	mov	r3, r6
    1d3c:	4632      	mov	r2, r6
    1d3e:	a902      	add	r1, sp, #8
    1d40:	4628      	mov	r0, r5
    1d42:	f008 f80f 	bl	9d64 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
    1d46:	4604      	mov	r4, r0
    1d48:	2800      	cmp	r0, #0
    1d4a:	d170      	bne.n	1e2e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x126>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    1d4c:	4603      	mov	r3, r0
    1d4e:	9904      	ldr	r1, [sp, #16]
    1d50:	2201      	movs	r2, #1
    1d52:	a806      	add	r0, sp, #24
    1d54:	f013 f8d4 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    1d58:	9b06      	ldr	r3, [sp, #24]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	f000 80cd 	beq.w	1efa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1f2>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    1d60:	4623      	mov	r3, r4
    1d62:	9904      	ldr	r1, [sp, #16]
    1d64:	2201      	movs	r2, #1
    1d66:	a80a      	add	r0, sp, #40	; 0x28
    1d68:	f013 f8ca 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    1d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d6e:	2b00      	cmp	r3, #0
    1d70:	f000 80c1 	beq.w	1ef6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1ee>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    1d74:	686b      	ldr	r3, [r5, #4]
    1d76:	42a3      	cmp	r3, r4
    1d78:	d964      	bls.n	1e44 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x13c>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1d7a:	9a04      	ldr	r2, [sp, #16]
    1d7c:	9b02      	ldr	r3, [sp, #8]
    1d7e:	fb02 f104 	mul.w	r1, r2, r4
    1d82:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1d86:	a80e      	add	r0, sp, #56	; 0x38
    1d88:	4641      	mov	r1, r8
    1d8a:	f013 f8b9 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    1d8e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    1d92:	f1be 0f00 	cmp.w	lr, #0
    1d96:	d040      	beq.n	1e1a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x112>
        if (input_matrix->cols != output_matrix->rows) {
    1d98:	9910      	ldr	r1, [sp, #64]	; 0x40
    1d9a:	9b07      	ldr	r3, [sp, #28]
    1d9c:	4299      	cmp	r1, r3
    1d9e:	d14f      	bne.n	1e40 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x138>
        if (output_matrix->cols != 1) {
    1da0:	9b08      	ldr	r3, [sp, #32]
    1da2:	2b01      	cmp	r3, #1
    1da4:	d14c      	bne.n	1e40 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x138>
    1da6:	9b06      	ldr	r3, [sp, #24]
            for (size_t row = 0; row < input_matrix->rows; row++) {
    1da8:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    1dac:	ea4f 0981 	mov.w	r9, r1, lsl #2
            output_matrix->buffer[col] = sum / input_matrix->rows;
    1db0:	469c      	mov	ip, r3
        for (size_t col = 0; col < input_matrix->cols; col++) {
    1db2:	2200      	movs	r2, #0
    1db4:	4291      	cmp	r1, r2
    1db6:	d00d      	beq.n	1dd4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0xcc>
            float sum = 0.0f;
    1db8:	eddf 7a55 	vldr	s15, [pc, #340]	; 1f10 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x208>
    1dbc:	eb0e 0082 	add.w	r0, lr, r2, lsl #2
            for (size_t row = 0; row < input_matrix->rows; row++) {
    1dc0:	2700      	movs	r7, #0
    1dc2:	45ba      	cmp	sl, r7
    1dc4:	d01a      	beq.n	1dfc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0xf4>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
    1dc6:	ed90 7a00 	vldr	s14, [r0]
            for (size_t row = 0; row < input_matrix->rows; row++) {
    1dca:	3701      	adds	r7, #1
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
    1dcc:	ee77 7a87 	vadd.f32	s15, s15, s14
            for (size_t row = 0; row < input_matrix->rows; row++) {
    1dd0:	4448      	add	r0, r9
    1dd2:	e7f6      	b.n	1dc2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0xba>
    1dd4:	68a8      	ldr	r0, [r5, #8]
    1dd6:	0082      	lsls	r2, r0, #2
    1dd8:	4362      	muls	r2, r4
    1dda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1dde:	1ad2      	subs	r2, r2, r3
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
    1de0:	4298      	cmp	r0, r3
    1de2:	d015      	beq.n	1e10 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x108>
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
    1de4:	6829      	ldr	r1, [r5, #0]
    1de6:	189f      	adds	r7, r3, r2
    1de8:	4439      	add	r1, r7
    1dea:	ecb3 7a01 	vldmia	r3!, {s14}
    1dee:	edd1 7a00 	vldr	s15, [r1]
    1df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
    1df6:	edc1 7a00 	vstr	s15, [r1]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
    1dfa:	e7f1      	b.n	1de0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0xd8>
            output_matrix->buffer[col] = sum / input_matrix->rows;
    1dfc:	ee07 aa10 	vmov	s14, sl
    1e00:	eef8 6a47 	vcvt.f32.u32	s13, s14
        for (size_t col = 0; col < input_matrix->cols; col++) {
    1e04:	3201      	adds	r2, #1
            output_matrix->buffer[col] = sum / input_matrix->rows;
    1e06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    1e0a:	ecac 7a01 	vstmia	ip!, {s14}
        for (size_t col = 0; col < input_matrix->cols; col++) {
    1e0e:	e7d1      	b.n	1db4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0xac>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1e10:	a80e      	add	r0, sp, #56	; 0x38
    1e12:	f00f feae 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    1e16:	3401      	adds	r4, #1
    1e18:	e7ac      	b.n	1d74 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x6c>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1e1a:	4c3e      	ldr	r4, [pc, #248]	; (1f14 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x20c>)
    1e1c:	a80e      	add	r0, sp, #56	; 0x38
    1e1e:	f00f fea8 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    1e22:	a80a      	add	r0, sp, #40	; 0x28
    1e24:	f00f fea5 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    1e28:	a806      	add	r0, sp, #24
    1e2a:	f00f fea2 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1e2e:	a802      	add	r0, sp, #8
    1e30:	f00f fe9f 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    }
    1e34:	4620      	mov	r0, r4
    1e36:	b013      	add	sp, #76	; 0x4c
    1e38:	ecbd 8b02 	vpop	{d8}
    1e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1e40:	4c35      	ldr	r4, [pc, #212]	; (1f18 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x210>)
    1e42:	e7eb      	b.n	1e1c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x114>
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
    1e44:	4633      	mov	r3, r6
    1e46:	4632      	mov	r2, r6
    1e48:	a902      	add	r1, sp, #8
    1e4a:	4628      	mov	r0, r5
    1e4c:	f007 ff8a 	bl	9d64 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
    1e50:	4604      	mov	r4, r0
    1e52:	2800      	cmp	r0, #0
    1e54:	d1e5      	bne.n	1e22 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x11a>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    1e56:	4607      	mov	r7, r0
    1e58:	686b      	ldr	r3, [r5, #4]
    1e5a:	42bb      	cmp	r3, r7
    1e5c:	d943      	bls.n	1ee6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1de>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1e5e:	9a04      	ldr	r2, [sp, #16]
    1e60:	9b02      	ldr	r3, [sp, #8]
    1e62:	fb02 f107 	mul.w	r1, r2, r7
    1e66:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e6a:	a80e      	add	r0, sp, #56	; 0x38
    1e6c:	4641      	mov	r1, r8
    1e6e:	f013 f847 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    1e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e74:	b38b      	cbz	r3, 1eda <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1d2>
            if (variance_normalization == true) {
    1e76:	9b00      	ldr	r3, [sp, #0]
    1e78:	b353      	cbz	r3, 1ed0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1c8>
        return std_axis0_CMSIS(input_matrix, output_matrix);
    1e7a:	a90a      	add	r1, sp, #40	; 0x28
    1e7c:	a80e      	add	r0, sp, #56	; 0x38
    1e7e:	f008 f8bf 	bl	a000 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
                if (ret != EIDSP_OK) {
    1e82:	4606      	mov	r6, r0
    1e84:	bb50      	cbnz	r0, 1edc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1d4>
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
    1e86:	9e04      	ldr	r6, [sp, #16]
    1e88:	682b      	ldr	r3, [r5, #0]
    1e8a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    1e8e:	00b6      	lsls	r6, r6, #2
    1e90:	fb07 3906 	mla	r9, r7, r6, r3
    1e94:	4456      	add	r6, sl
                for (size_t col = 0; col < vec_pad.cols; col++) {
    1e96:	45b2      	cmp	sl, r6
    1e98:	d01a      	beq.n	1ed0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x1c8>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    1e9a:	f8d9 0000 	ldr.w	r0, [r9]
                                             (window_variance.buffer[col] + 1e-10);
    1e9e:	f85a bb04 	ldr.w	fp, [sl], #4
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    1ea2:	f7fe fae1 	bl	468 <__aeabi_f2d>
    1ea6:	ec41 0b18 	vmov	d8, r0, r1
                                             (window_variance.buffer[col] + 1e-10);
    1eaa:	4658      	mov	r0, fp
    1eac:	f7fe fadc 	bl	468 <__aeabi_f2d>
    1eb0:	a315      	add	r3, pc, #84	; (adr r3, 1f08 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x200>)
    1eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1eb6:	f7fe f979 	bl	1ac <__adddf3>
    1eba:	4602      	mov	r2, r0
    1ebc:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    1ebe:	ec51 0b18 	vmov	r0, r1, d8
    1ec2:	f7fe fc53 	bl	76c <__aeabi_ddiv>
    1ec6:	f7fe fde9 	bl	a9c <__aeabi_d2f>
    1eca:	f849 0b04 	str.w	r0, [r9], #4
                for (size_t col = 0; col < vec_pad.cols; col++) {
    1ece:	e7e2      	b.n	1e96 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x18e>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1ed0:	a80e      	add	r0, sp, #56	; 0x38
    1ed2:	f00f fe4e 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    1ed6:	3701      	adds	r7, #1
    1ed8:	e7be      	b.n	1e58 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x150>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1eda:	4e0e      	ldr	r6, [pc, #56]	; (1f14 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x20c>)
    1edc:	a80e      	add	r0, sp, #56	; 0x38
    1ede:	f00f fe48 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    1ee2:	4634      	mov	r4, r6
    1ee4:	e79d      	b.n	1e22 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x11a>
        if (scale) {
    1ee6:	9b01      	ldr	r3, [sp, #4]
    1ee8:	2b00      	cmp	r3, #0
    1eea:	d09a      	beq.n	1e22 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x11a>
            ret = numpy::normalize(features_matrix);
    1eec:	4628      	mov	r0, r5
    1eee:	f7ff fd67 	bl	19c0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
    1ef2:	4604      	mov	r4, r0
            if (ret != EIDSP_OK) {
    1ef4:	e795      	b.n	1e22 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x11a>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    1ef6:	4c07      	ldr	r4, [pc, #28]	; (1f14 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x20c>)
    1ef8:	e793      	b.n	1e22 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x11a>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    1efa:	4c06      	ldr	r4, [pc, #24]	; (1f14 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x20c>)
    1efc:	e794      	b.n	1e28 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x120>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1efe:	4c05      	ldr	r4, [pc, #20]	; (1f14 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x20c>)
    1f00:	e795      	b.n	1e2e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0+0x126>
    1f02:	bf00      	nop
    1f04:	f3af 8000 	nop.w
    1f08:	d9d7bdbb 	.word	0xd9d7bdbb
    1f0c:	3ddb7cdf 	.word	0x3ddb7cdf
    1f10:	00000000 	.word	0x00000000
    1f14:	fffffc16 	.word	0xfffffc16
    1f18:	fffffc14 	.word	0xfffffc14
    1f1c:	00000000 	.word	0x00000000

00001f20 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
    1f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f24:	ed2d 8b06 	vpush	{d8-d10}
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
    1f28:	1c8e      	adds	r6, r1, #2
    static int filterbanks(
    1f2a:	b08b      	sub	sp, #44	; 0x2c
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
    1f2c:	ea4f 0986 	mov.w	r9, r6, lsl #2
    static int filterbanks(
    1f30:	ee08 3a90 	vmov	s17, r3
    1f34:	4604      	mov	r4, r0
    1f36:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    1f3a:	9102      	str	r1, [sp, #8]
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
    1f3c:	4648      	mov	r0, r9
    static int filterbanks(
    1f3e:	4615      	mov	r5, r2
    1f40:	9304      	str	r3, [sp, #16]
        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
    1f42:	f00f fe63 	bl	11c0c <_Z9ei_mallocj>
        if (!mels) {
    1f46:	4607      	mov	r7, r0
    1f48:	b378      	cbz	r0, 1faa <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
    1f4a:	6863      	ldr	r3, [r4, #4]
    1f4c:	9a02      	ldr	r2, [sp, #8]
    1f4e:	4293      	cmp	r3, r2
    1f50:	f040 814c 	bne.w	21ec <CONFIG_MAIN_STACK_SIZE+0x1ec>
    1f54:	68a2      	ldr	r2, [r4, #8]
    1f56:	42aa      	cmp	r2, r5
    1f58:	f040 8148 	bne.w	21ec <CONFIG_MAIN_STACK_SIZE+0x1ec>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
    1f5c:	435a      	muls	r2, r3
    1f5e:	2100      	movs	r1, #0
    1f60:	6820      	ldr	r0, [r4, #0]
    1f62:	f014 f8a0 	bl	160a6 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
    1f66:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
    1f6a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    1f6e:	eeb0 0a48 	vmov.f32	s0, s16
    1f72:	f008 f899 	bl	a0a8 <_ZN2ei8speechpy9functions16frequency_to_melEf>
    1f76:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
    1f7a:	eeb8 9a67 	vcvt.f32.u32	s18, s15
    1f7e:	eef0 9a40 	vmov.f32	s19, s0
    1f82:	eeb0 0a49 	vmov.f32	s0, s18
    1f86:	f008 f88f 	bl	a0a8 <_ZN2ei8speechpy9functions16frequency_to_melEf>
    1f8a:	4639      	mov	r1, r7
    1f8c:	eef0 0a40 	vmov.f32	s1, s0
    1f90:	4630      	mov	r0, r6
    1f92:	eeb0 0a69 	vmov.f32	s0, s19
    1f96:	f007 ff69 	bl	9e6c <_ZN2ei5numpy8linspaceEffjPf>
            num_filter + 2,
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
    1f9a:	4648      	mov	r0, r9
    1f9c:	f00f fe36 	bl	11c0c <_Z9ei_mallocj>
        if (!hertz) {
    1fa0:	4606      	mov	r6, r0
    1fa2:	b920      	cbnz	r0, 1fae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8e>
            ei_dsp_free(mels, mels_mem_size);
    1fa4:	4638      	mov	r0, r7
        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
        if (!freq_index) {
            ei_dsp_free(hertz, hertz_mem_size);
    1fa6:	f00f fe35 	bl	11c14 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1faa:	4893      	ldr	r0, [pc, #588]	; (21f8 <CONFIG_MAIN_STACK_SIZE+0x1f8>)
    1fac:	e119      	b.n	21e2 <CONFIG_MAIN_STACK_SIZE+0x1e2>
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
    1fae:	eddf 9a93 	vldr	s19, [pc, #588]	; 21fc <CONFIG_MAIN_STACK_SIZE+0x1fc>
    1fb2:	ed9f aa93 	vldr	s20, [pc, #588]	; 2200 <CONFIG_MAIN_STACK_SIZE+0x200>
    1fb6:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    1fba:	9b02      	ldr	r3, [sp, #8]
    1fbc:	f103 0801 	add.w	r8, r3, #1
    1fc0:	fa1f f38a 	uxth.w	r3, sl
    1fc4:	4598      	cmp	r8, r3
    1fc6:	db34      	blt.n	2032 <CONFIG_MAIN_STACK_SIZE+0x32>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
    1fc8:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    1fcc:	ed92 0a00 	vldr	s0, [r2]
    1fd0:	9303      	str	r3, [sp, #12]
  { return __builtin_expf(__x); }
    1fd2:	ee80 0a29 	vdiv.f32	s0, s0, s19
    1fd6:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
    1fda:	f00d fdc9 	bl	fb70 <expf>
            if (ix == num_filter + 2 - 1) {
    1fde:	9b03      	ldr	r3, [sp, #12]
    1fe0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1fe4:	ee30 0a67 	vsub.f32	s0, s0, s15
    1fe8:	ee20 0a0a 	vmul.f32	s0, s0, s20
                hertz[ix] = low_freq;
    1fec:	eeb4 8a40 	vcmp.f32	s16, s0
    1ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1ff4:	bfc8      	it	gt
    1ff6:	eeb0 0a48 	vmovgt.f32	s0, s16
                hertz[ix] = high_freq;
    1ffa:	eeb4 9a40 	vcmp.f32	s18, s0
    1ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2002:	bf48      	it	mi
    2004:	eeb0 0a49 	vmovmi.f32	s0, s18
            if (ix == num_filter + 2 - 1) {
    2008:	4598      	cmp	r8, r3
    200a:	d004      	beq.n	2016 <CONFIG_MAIN_STACK_SIZE+0x16>
    200c:	ed8b 0a00 	vstr	s0, [fp]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    2010:	f10a 0a01 	add.w	sl, sl, #1
    2014:	e7d1      	b.n	1fba <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x9a>
                hertz[ix] -= 0.001;
    2016:	ee10 0a10 	vmov	r0, s0
    201a:	f7fe fa25 	bl	468 <__aeabi_f2d>
    201e:	a374      	add	r3, pc, #464	; (adr r3, 21f0 <CONFIG_MAIN_STACK_SIZE+0x1f0>)
    2020:	e9d3 2300 	ldrd	r2, r3, [r3]
    2024:	f7fe f8c0 	bl	1a8 <__aeabi_dsub>
    2028:	f7fe fd38 	bl	a9c <__aeabi_d2f>
    202c:	f8cb 0000 	str.w	r0, [fp]
    2030:	e7ee      	b.n	2010 <CONFIG_MAIN_STACK_SIZE+0x10>
        ei_dsp_free(mels, mels_mem_size);
    2032:	4638      	mov	r0, r7
    2034:	f00f fdee 	bl	11c14 <_Z7ei_freePv>
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
    2038:	4648      	mov	r0, r9
    203a:	f00f fde7 	bl	11c0c <_Z9ei_mallocj>
        if (!freq_index) {
    203e:	4607      	mov	r7, r0
    2040:	b908      	cbnz	r0, 2046 <CONFIG_MAIN_STACK_SIZE+0x46>
            ei_dsp_free(hertz, hertz_mem_size);
    2042:	4630      	mov	r0, r6
    2044:	e7af      	b.n	1fa6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x86>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
    2046:	3501      	adds	r5, #1
    2048:	ee07 5a90 	vmov	s15, r5
    204c:	eef8 8a68 	vcvt.f32.u32	s17, s17
    2050:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    2054:	f04f 0900 	mov.w	r9, #0
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
    2058:	eb06 0389 	add.w	r3, r6, r9, lsl #2
    205c:	ed93 0a00 	vldr	s0, [r3]
    2060:	ee28 0a00 	vmul.f32	s0, s16, s0
  { return __builtin_floorf(__x); }
    2064:	ee80 0a28 	vdiv.f32	s0, s0, s17
    2068:	f00d fc6a 	bl	f940 <floorf>
    206c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    2070:	ee10 3a10 	vmov	r3, s0
    2074:	f847 3029 	str.w	r3, [r7, r9, lsl #2]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    2078:	f109 0901 	add.w	r9, r9, #1
    207c:	fa1f f989 	uxth.w	r9, r9
    2080:	45c8      	cmp	r8, r9
    2082:	dae9      	bge.n	2058 <CONFIG_MAIN_STACK_SIZE+0x58>
        }
        ei_dsp_free(hertz, hertz_mem_size);
    2084:	4630      	mov	r0, r6
    2086:	f00f fdc5 	bl	11c14 <_Z7ei_freePv>
            if (value < quantized_values_one_zero[mid]) {
    208a:	f8df a178 	ldr.w	sl, [pc, #376]	; 2204 <CONFIG_MAIN_STACK_SIZE+0x204>
    208e:	463e      	mov	r6, r7

        for (size_t i = 0; i < num_filter; i++) {
    2090:	2500      	movs	r5, #0
    2092:	9b02      	ldr	r3, [sp, #8]
    2094:	42ab      	cmp	r3, r5
    2096:	f240 8099 	bls.w	21cc <CONFIG_MAIN_STACK_SIZE+0x1cc>
            int left = freq_index[i];
            int middle = freq_index[i + 1];
    209a:	1c6b      	adds	r3, r5, #1
            int left = freq_index[i];
    209c:	f8d6 8000 	ldr.w	r8, [r6]
            int middle = freq_index[i + 1];
    20a0:	9305      	str	r3, [sp, #20]
    20a2:	f856 3f04 	ldr.w	r3, [r6, #4]!
    20a6:	ee08 3a10 	vmov	s16, r3
            int right = freq_index[i + 2];
    20aa:	6873      	ldr	r3, [r6, #4]
    20ac:	9303      	str	r3, [sp, #12]

            EI_DSP_MATRIX(z, 1, (right - left + 1));
    20ae:	eba3 0b08 	sub.w	fp, r3, r8
    20b2:	f10b 0901 	add.w	r9, fp, #1
    20b6:	2101      	movs	r1, #1
    20b8:	2300      	movs	r3, #0
    20ba:	464a      	mov	r2, r9
    20bc:	a806      	add	r0, sp, #24
    20be:	f012 ff1f 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    20c2:	9906      	ldr	r1, [sp, #24]
    20c4:	b919      	cbnz	r1, 20ce <CONFIG_MAIN_STACK_SIZE+0xce>
    20c6:	a806      	add	r0, sp, #24
    20c8:	f00f fd53 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    20cc:	e76d      	b.n	1faa <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8a>
            if (!z.buffer) {
                ei_dsp_free(freq_index, freq_index_mem_size);
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
    20ce:	eddd 7a03 	vldr	s15, [sp, #12]
    20d2:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    20d6:	ee07 8a90 	vmov	s15, r8
    20da:	4648      	mov	r0, r9
    20dc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    20e0:	f007 fec4 	bl	9e6c <_ZN2ei5numpy8linspaceEffjPf>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
    20e4:	9b03      	ldr	r3, [sp, #12]
    20e6:	9300      	str	r3, [sp, #0]
    20e8:	4642      	mov	r2, r8
    20ea:	ee18 3a10 	vmov	r3, s16
    20ee:	9806      	ldr	r0, [sp, #24]
    20f0:	4649      	mov	r1, r9
    20f2:	f008 f849 	bl	a188 <_ZN2ei8speechpy9functions8triangleEPfjiii>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
    20f6:	2200      	movs	r2, #0
        if (value > quantized_values_one_zero[length - 1]) {
    20f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    20fc:	4593      	cmp	fp, r2
    20fe:	db60      	blt.n	21c2 <CONFIG_MAIN_STACK_SIZE+0x1c2>
                size_t index = (i * filterbanks->cols) + (left + zx);

                if (output_transposed) {
    2100:	9904      	ldr	r1, [sp, #16]
                size_t index = (i * filterbanks->cols) + (left + zx);
    2102:	68a3      	ldr	r3, [r4, #8]
    2104:	eb08 0002 	add.w	r0, r8, r2
                if (output_transposed) {
    2108:	b999      	cbnz	r1, 2132 <CONFIG_MAIN_STACK_SIZE+0x132>
                size_t index = (i * filterbanks->cols) + (left + zx);
    210a:	fb05 0003 	mla	r0, r5, r3, r0
                    index = ((left + zx) * filterbanks->rows) + i;
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
    210e:	9b06      	ldr	r3, [sp, #24]
    2110:	493c      	ldr	r1, [pc, #240]	; (2204 <CONFIG_MAIN_STACK_SIZE+0x204>)
    2112:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2116:	edd3 7a00 	vldr	s15, [r3]
    211a:	6823      	ldr	r3, [r4, #0]
    211c:	4418      	add	r0, r3
        for (size_t ix = 0; ix < length; ix++) {
    211e:	2300      	movs	r3, #0
            if (quantized_values_one_zero[ix] == value) return ix;
    2120:	ecb1 7a01 	vldmia	r1!, {s14}
    2124:	eef4 7a47 	vcmp.f32	s15, s14
    2128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    212c:	d105      	bne.n	213a <CONFIG_MAIN_STACK_SIZE+0x13a>
            hi;
    212e:	b2db      	uxtb	r3, r3
    2130:	e040      	b.n	21b4 <CONFIG_MAIN_STACK_SIZE+0x1b4>
                    index = ((left + zx) * filterbanks->rows) + i;
    2132:	6863      	ldr	r3, [r4, #4]
    2134:	fb03 5000 	mla	r0, r3, r0, r5
    2138:	e7e9      	b.n	210e <CONFIG_MAIN_STACK_SIZE+0x10e>
        for (size_t ix = 0; ix < length; ix++) {
    213a:	3301      	adds	r3, #1
    213c:	2bef      	cmp	r3, #239	; 0xef
    213e:	d1ef      	bne.n	2120 <CONFIG_MAIN_STACK_SIZE+0x120>
        if (value < quantized_values_one_zero[0]) {
    2140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2148:	d437      	bmi.n	21ba <CONFIG_MAIN_STACK_SIZE+0x1ba>
        if (value > quantized_values_one_zero[length - 1]) {
    214a:	eef4 7ae6 	vcmpe.f32	s15, s13
    214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2152:	dc34      	bgt.n	21be <CONFIG_MAIN_STACK_SIZE+0x1be>
        int hi = length - 1;
    2154:	23ee      	movs	r3, #238	; 0xee
        int lo = 0;
    2156:	2100      	movs	r1, #0
            int mid = (hi + lo) / 2;
    2158:	eb01 0c03 	add.w	ip, r1, r3
    215c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
            if (value < quantized_values_one_zero[mid]) {
    2160:	eb0a 0e8c 	add.w	lr, sl, ip, lsl #2
    2164:	ed9e 7a00 	vldr	s14, [lr]
    2168:	eef4 7ac7 	vcmpe.f32	s15, s14
    216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2170:	d516      	bpl.n	21a0 <CONFIG_MAIN_STACK_SIZE+0x1a0>
                hi = mid - 1;
    2172:	f10c 33ff 	add.w	r3, ip, #4294967295
        while (lo <= hi) {
    2176:	428b      	cmp	r3, r1
    2178:	daee      	bge.n	2158 <CONFIG_MAIN_STACK_SIZE+0x158>
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
    217a:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
    217e:	ed9c 7a00 	vldr	s14, [ip]
    2182:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
    2186:	ed9c 6a00 	vldr	s12, [ip]
    218a:	ee37 7a67 	vsub.f32	s14, s14, s15
    218e:	ee77 7ac6 	vsub.f32	s15, s15, s12
            hi;
    2192:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    219a:	d5c8      	bpl.n	212e <CONFIG_MAIN_STACK_SIZE+0x12e>
    219c:	b2cb      	uxtb	r3, r1
    219e:	e009      	b.n	21b4 <CONFIG_MAIN_STACK_SIZE+0x1b4>
            } else if (value > quantized_values_one_zero[mid]) {
    21a0:	dd02      	ble.n	21a8 <CONFIG_MAIN_STACK_SIZE+0x1a8>
                lo = mid + 1;
    21a2:	f10c 0101 	add.w	r1, ip, #1
    21a6:	e7e6      	b.n	2176 <CONFIG_MAIN_STACK_SIZE+0x176>
                return quantized_values_one_zero[mid];
    21a8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    21ac:	edcd 7a03 	vstr	s15, [sp, #12]
    21b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
    21b4:	7003      	strb	r3, [r0, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
    21b6:	3201      	adds	r2, #1
    21b8:	e7a0      	b.n	20fc <CONFIG_MAIN_STACK_SIZE+0xfc>
            return quantized_values_one_zero[0];
    21ba:	2300      	movs	r3, #0
    21bc:	e7fa      	b.n	21b4 <CONFIG_MAIN_STACK_SIZE+0x1b4>
            return quantized_values_one_zero[length - 1];
    21be:	2301      	movs	r3, #1
    21c0:	e7f8      	b.n	21b4 <CONFIG_MAIN_STACK_SIZE+0x1b4>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
    21c2:	a806      	add	r0, sp, #24
    21c4:	f00f fcd5 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
    21c8:	9d05      	ldr	r5, [sp, #20]
    21ca:	e762      	b.n	2092 <CONFIG_MAIN_STACK_SIZE+0x92>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
    21cc:	9b04      	ldr	r3, [sp, #16]
    21ce:	b123      	cbz	r3, 21da <CONFIG_MAIN_STACK_SIZE+0x1da>
            uint16_t r = filterbanks->rows;
            filterbanks->rows = filterbanks->cols;
    21d0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
            filterbanks->cols = r;
    21d4:	b29b      	uxth	r3, r3
            filterbanks->rows = filterbanks->cols;
    21d6:	6062      	str	r2, [r4, #4]
            filterbanks->cols = r;
    21d8:	60a3      	str	r3, [r4, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
    21da:	4638      	mov	r0, r7
    21dc:	f00f fd1a 	bl	11c14 <_Z7ei_freePv>

        return EIDSP_OK;
    21e0:	2000      	movs	r0, #0
    }
    21e2:	b00b      	add	sp, #44	; 0x2c
    21e4:	ecbd 8b06 	vpop	{d8-d10}
    21e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    21ec:	4806      	ldr	r0, [pc, #24]	; (2208 <CONFIG_MAIN_STACK_SIZE+0x208>)
    21ee:	e7f8      	b.n	21e2 <CONFIG_MAIN_STACK_SIZE+0x1e2>
    21f0:	d2f1a9fc 	.word	0xd2f1a9fc
    21f4:	3f50624d 	.word	0x3f50624d
    21f8:	fffffc16 	.word	0xfffffc16
    21fc:	448ce000 	.word	0x448ce000
    2200:	442f0000 	.word	0x442f0000
    2204:	0003fcc8 	.word	0x0003fcc8
    2208:	fffffc14 	.word	0xfffffc14
    220c:	00000000 	.word	0x00000000

00002210 <cos>:
    2210:	b500      	push	{lr}
    2212:	ec51 0b10 	vmov	r0, r1, d0
    2216:	4a26      	ldr	r2, [pc, #152]	; (22b0 <cos+0xa0>)
    2218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    221c:	4293      	cmp	r3, r2
    221e:	b085      	sub	sp, #20
    2220:	dd1e      	ble.n	2260 <cos+0x50>
    2222:	4a24      	ldr	r2, [pc, #144]	; (22b4 <cos+0xa4>)
    2224:	4293      	cmp	r3, r2
    2226:	dd09      	ble.n	223c <cos+0x2c>
    2228:	ee10 2a10 	vmov	r2, s0
    222c:	460b      	mov	r3, r1
    222e:	f7fd ffbb 	bl	1a8 <__aeabi_dsub>
    2232:	ec41 0b10 	vmov	d0, r0, r1
    2236:	b005      	add	sp, #20
    2238:	f85d fb04 	ldr.w	pc, [sp], #4
    223c:	4668      	mov	r0, sp
    223e:	f001 f8ab 	bl	3398 <__ieee754_rem_pio2>
    2242:	f000 0003 	and.w	r0, r0, #3
    2246:	2801      	cmp	r0, #1
    2248:	d011      	beq.n	226e <cos+0x5e>
    224a:	2802      	cmp	r0, #2
    224c:	d025      	beq.n	229a <cos+0x8a>
    224e:	b1e8      	cbz	r0, 228c <cos+0x7c>
    2250:	ed9d 1b02 	vldr	d1, [sp, #8]
    2254:	ed9d 0b00 	vldr	d0, [sp]
    2258:	2001      	movs	r0, #1
    225a:	f002 f83d 	bl	42d8 <__kernel_sin>
    225e:	e7ea      	b.n	2236 <cos+0x26>
    2260:	ed9f 1b11 	vldr	d1, [pc, #68]	; 22a8 <cos+0x98>
    2264:	f001 fad0 	bl	3808 <__kernel_cos>
    2268:	b005      	add	sp, #20
    226a:	f85d fb04 	ldr.w	pc, [sp], #4
    226e:	ed9d 1b02 	vldr	d1, [sp, #8]
    2272:	ed9d 0b00 	vldr	d0, [sp]
    2276:	f002 f82f 	bl	42d8 <__kernel_sin>
    227a:	ec53 2b10 	vmov	r2, r3, d0
    227e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2282:	ee00 3a90 	vmov	s1, r3
    2286:	b005      	add	sp, #20
    2288:	f85d fb04 	ldr.w	pc, [sp], #4
    228c:	ed9d 1b02 	vldr	d1, [sp, #8]
    2290:	ed9d 0b00 	vldr	d0, [sp]
    2294:	f001 fab8 	bl	3808 <__kernel_cos>
    2298:	e7cd      	b.n	2236 <cos+0x26>
    229a:	ed9d 1b02 	vldr	d1, [sp, #8]
    229e:	ed9d 0b00 	vldr	d0, [sp]
    22a2:	f001 fab1 	bl	3808 <__kernel_cos>
    22a6:	e7e8      	b.n	227a <cos+0x6a>
	...
    22b0:	3fe921fb 	.word	0x3fe921fb
    22b4:	7fefffff 	.word	0x7fefffff

000022b8 <floor>:
    22b8:	ec51 0b10 	vmov	r0, r1, d0
    22bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22be:	f3c1 530a 	ubfx	r3, r1, #20, #11
    22c2:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
    22c6:	2d13      	cmp	r5, #19
    22c8:	ee10 6a10 	vmov	r6, s0
    22cc:	460c      	mov	r4, r1
    22ce:	dc20      	bgt.n	2312 <floor+0x5a>
    22d0:	2d00      	cmp	r5, #0
    22d2:	db3d      	blt.n	2350 <floor+0x98>
    22d4:	4f38      	ldr	r7, [pc, #224]	; (23b8 <floor+0x100>)
    22d6:	412f      	asrs	r7, r5
    22d8:	ea01 0307 	and.w	r3, r1, r7
    22dc:	4303      	orrs	r3, r0
    22de:	d01d      	beq.n	231c <floor+0x64>
    22e0:	a333      	add	r3, pc, #204	; (adr r3, 23b0 <floor+0xf8>)
    22e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    22e6:	f7fd ff61 	bl	1ac <__adddf3>
    22ea:	2200      	movs	r2, #0
    22ec:	2300      	movs	r3, #0
    22ee:	f7fe fba3 	bl	a38 <__aeabi_dcmpgt>
    22f2:	b148      	cbz	r0, 2308 <floor+0x50>
    22f4:	2c00      	cmp	r4, #0
    22f6:	da04      	bge.n	2302 <floor+0x4a>
    22f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    22fc:	fa43 f505 	asr.w	r5, r3, r5
    2300:	442c      	add	r4, r5
    2302:	ea24 0407 	bic.w	r4, r4, r7
    2306:	2600      	movs	r6, #0
    2308:	4623      	mov	r3, r4
    230a:	4632      	mov	r2, r6
    230c:	ec43 2b10 	vmov	d0, r2, r3
    2310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2312:	2d33      	cmp	r5, #51	; 0x33
    2314:	dd05      	ble.n	2322 <floor+0x6a>
    2316:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    231a:	d029      	beq.n	2370 <floor+0xb8>
    231c:	ec41 0b10 	vmov	d0, r0, r1
    2320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2322:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
    2326:	f04f 37ff 	mov.w	r7, #4294967295
    232a:	40df      	lsrs	r7, r3
    232c:	4207      	tst	r7, r0
    232e:	d0f5      	beq.n	231c <floor+0x64>
    2330:	a31f      	add	r3, pc, #124	; (adr r3, 23b0 <floor+0xf8>)
    2332:	e9d3 2300 	ldrd	r2, r3, [r3]
    2336:	f7fd ff39 	bl	1ac <__adddf3>
    233a:	2200      	movs	r2, #0
    233c:	2300      	movs	r3, #0
    233e:	f7fe fb7b 	bl	a38 <__aeabi_dcmpgt>
    2342:	2800      	cmp	r0, #0
    2344:	d0e0      	beq.n	2308 <floor+0x50>
    2346:	2c00      	cmp	r4, #0
    2348:	db23      	blt.n	2392 <floor+0xda>
    234a:	ea26 0607 	bic.w	r6, r6, r7
    234e:	e7db      	b.n	2308 <floor+0x50>
    2350:	a317      	add	r3, pc, #92	; (adr r3, 23b0 <floor+0xf8>)
    2352:	e9d3 2300 	ldrd	r2, r3, [r3]
    2356:	f7fd ff29 	bl	1ac <__adddf3>
    235a:	2200      	movs	r2, #0
    235c:	2300      	movs	r3, #0
    235e:	f7fe fb6b 	bl	a38 <__aeabi_dcmpgt>
    2362:	2800      	cmp	r0, #0
    2364:	d0d0      	beq.n	2308 <floor+0x50>
    2366:	2c00      	cmp	r4, #0
    2368:	db0a      	blt.n	2380 <floor+0xc8>
    236a:	2600      	movs	r6, #0
    236c:	4634      	mov	r4, r6
    236e:	e7cb      	b.n	2308 <floor+0x50>
    2370:	ee10 2a10 	vmov	r2, s0
    2374:	460b      	mov	r3, r1
    2376:	f7fd ff19 	bl	1ac <__adddf3>
    237a:	ec41 0b10 	vmov	d0, r0, r1
    237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2380:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    2384:	4a0d      	ldr	r2, [pc, #52]	; (23bc <floor+0x104>)
    2386:	431e      	orrs	r6, r3
    2388:	2e00      	cmp	r6, #0
    238a:	bf18      	it	ne
    238c:	4614      	movne	r4, r2
    238e:	2600      	movs	r6, #0
    2390:	e7ba      	b.n	2308 <floor+0x50>
    2392:	2d14      	cmp	r5, #20
    2394:	d008      	beq.n	23a8 <floor+0xf0>
    2396:	2301      	movs	r3, #1
    2398:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
    239c:	fa03 f505 	lsl.w	r5, r3, r5
    23a0:	19ae      	adds	r6, r5, r6
    23a2:	bf28      	it	cs
    23a4:	18e4      	addcs	r4, r4, r3
    23a6:	e7d0      	b.n	234a <floor+0x92>
    23a8:	3401      	adds	r4, #1
    23aa:	e7ce      	b.n	234a <floor+0x92>
    23ac:	f3af 8000 	nop.w
    23b0:	8800759c 	.word	0x8800759c
    23b4:	7e37e43c 	.word	0x7e37e43c
    23b8:	000fffff 	.word	0x000fffff
    23bc:	bff00000 	.word	0xbff00000

000023c0 <sin>:
    23c0:	b500      	push	{lr}
    23c2:	ec51 0b10 	vmov	r0, r1, d0
    23c6:	4a28      	ldr	r2, [pc, #160]	; (2468 <sin+0xa8>)
    23c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    23cc:	4293      	cmp	r3, r2
    23ce:	b085      	sub	sp, #20
    23d0:	dd25      	ble.n	241e <sin+0x5e>
    23d2:	4a26      	ldr	r2, [pc, #152]	; (246c <sin+0xac>)
    23d4:	4293      	cmp	r3, r2
    23d6:	dd09      	ble.n	23ec <sin+0x2c>
    23d8:	ee10 2a10 	vmov	r2, s0
    23dc:	460b      	mov	r3, r1
    23de:	f7fd fee3 	bl	1a8 <__aeabi_dsub>
    23e2:	ec41 0b10 	vmov	d0, r0, r1
    23e6:	b005      	add	sp, #20
    23e8:	f85d fb04 	ldr.w	pc, [sp], #4
    23ec:	4668      	mov	r0, sp
    23ee:	f000 ffd3 	bl	3398 <__ieee754_rem_pio2>
    23f2:	f000 0003 	and.w	r0, r0, #3
    23f6:	2801      	cmp	r0, #1
    23f8:	d019      	beq.n	242e <sin+0x6e>
    23fa:	2802      	cmp	r0, #2
    23fc:	d026      	beq.n	244c <sin+0x8c>
    23fe:	b1e8      	cbz	r0, 243c <sin+0x7c>
    2400:	ed9d 1b02 	vldr	d1, [sp, #8]
    2404:	ed9d 0b00 	vldr	d0, [sp]
    2408:	f001 f9fe 	bl	3808 <__kernel_cos>
    240c:	ec53 2b10 	vmov	r2, r3, d0
    2410:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2414:	ee00 3a90 	vmov	s1, r3
    2418:	b005      	add	sp, #20
    241a:	f85d fb04 	ldr.w	pc, [sp], #4
    241e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 2460 <sin+0xa0>
    2422:	2000      	movs	r0, #0
    2424:	f001 ff58 	bl	42d8 <__kernel_sin>
    2428:	b005      	add	sp, #20
    242a:	f85d fb04 	ldr.w	pc, [sp], #4
    242e:	ed9d 1b02 	vldr	d1, [sp, #8]
    2432:	ed9d 0b00 	vldr	d0, [sp]
    2436:	f001 f9e7 	bl	3808 <__kernel_cos>
    243a:	e7d4      	b.n	23e6 <sin+0x26>
    243c:	ed9d 1b02 	vldr	d1, [sp, #8]
    2440:	ed9d 0b00 	vldr	d0, [sp]
    2444:	2001      	movs	r0, #1
    2446:	f001 ff47 	bl	42d8 <__kernel_sin>
    244a:	e7cc      	b.n	23e6 <sin+0x26>
    244c:	ed9d 1b02 	vldr	d1, [sp, #8]
    2450:	ed9d 0b00 	vldr	d0, [sp]
    2454:	2001      	movs	r0, #1
    2456:	f001 ff3f 	bl	42d8 <__kernel_sin>
    245a:	e7d7      	b.n	240c <sin+0x4c>
    245c:	f3af 8000 	nop.w
	...
    2468:	3fe921fb 	.word	0x3fe921fb
    246c:	7fefffff 	.word	0x7fefffff

00002470 <pow>:
    2470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2474:	ed2d 8b02 	vpush	{d8}
    2478:	b08d      	sub	sp, #52	; 0x34
    247a:	ec57 6b10 	vmov	r6, r7, d0
    247e:	ec55 4b11 	vmov	r4, r5, d1
    2482:	f000 f9ad 	bl	27e0 <__ieee754_pow>
    2486:	4bae      	ldr	r3, [pc, #696]	; (2740 <pow+0x2d0>)
    2488:	eeb0 8a40 	vmov.f32	s16, s0
    248c:	eef0 8a60 	vmov.f32	s17, s1
    2490:	f993 9000 	ldrsb.w	r9, [r3]
    2494:	f1b9 3fff 	cmp.w	r9, #4294967295
    2498:	d037      	beq.n	250a <pow+0x9a>
    249a:	4622      	mov	r2, r4
    249c:	462b      	mov	r3, r5
    249e:	4620      	mov	r0, r4
    24a0:	4629      	mov	r1, r5
    24a2:	f7fe fd6d 	bl	f80 <__aeabi_dcmpun>
    24a6:	4683      	mov	fp, r0
    24a8:	bb78      	cbnz	r0, 250a <pow+0x9a>
    24aa:	4632      	mov	r2, r6
    24ac:	463b      	mov	r3, r7
    24ae:	4630      	mov	r0, r6
    24b0:	4639      	mov	r1, r7
    24b2:	f7fe fd65 	bl	f80 <__aeabi_dcmpun>
    24b6:	4680      	mov	r8, r0
    24b8:	2800      	cmp	r0, #0
    24ba:	f040 8093 	bne.w	25e4 <pow+0x174>
    24be:	f04f 0a00 	mov.w	sl, #0
    24c2:	f04f 0b00 	mov.w	fp, #0
    24c6:	4630      	mov	r0, r6
    24c8:	4639      	mov	r1, r7
    24ca:	4652      	mov	r2, sl
    24cc:	465b      	mov	r3, fp
    24ce:	f7fe fa8b 	bl	9e8 <__aeabi_dcmpeq>
    24d2:	b318      	cbz	r0, 251c <pow+0xac>
    24d4:	4652      	mov	r2, sl
    24d6:	465b      	mov	r3, fp
    24d8:	4620      	mov	r0, r4
    24da:	4629      	mov	r1, r5
    24dc:	f7fe fa84 	bl	9e8 <__aeabi_dcmpeq>
    24e0:	9000      	str	r0, [sp, #0]
    24e2:	2800      	cmp	r0, #0
    24e4:	d057      	beq.n	2596 <pow+0x126>
    24e6:	4b97      	ldr	r3, [pc, #604]	; (2744 <pow+0x2d4>)
    24e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    24ec:	2201      	movs	r2, #1
    24ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
    24f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    24f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
    24fa:	9202      	str	r2, [sp, #8]
    24fc:	9303      	str	r3, [sp, #12]
    24fe:	f1b9 0f00 	cmp.w	r9, #0
    2502:	f000 8089 	beq.w	2618 <pow+0x1a8>
    2506:	ed9f 8b8a 	vldr	d8, [pc, #552]	; 2730 <pow+0x2c0>
    250a:	eeb0 0a48 	vmov.f32	s0, s16
    250e:	eef0 0a68 	vmov.f32	s1, s17
    2512:	b00d      	add	sp, #52	; 0x34
    2514:	ecbd 8b02 	vpop	{d8}
    2518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    251c:	eeb0 0a48 	vmov.f32	s0, s16
    2520:	eef0 0a68 	vmov.f32	s1, s17
    2524:	f00d fdc2 	bl	100ac <finite>
    2528:	4680      	mov	r8, r0
    252a:	2800      	cmp	r0, #0
    252c:	f000 8082 	beq.w	2634 <pow+0x1c4>
    2530:	f04f 0800 	mov.w	r8, #0
    2534:	f04f 0900 	mov.w	r9, #0
    2538:	ec51 0b18 	vmov	r0, r1, d8
    253c:	4642      	mov	r2, r8
    253e:	464b      	mov	r3, r9
    2540:	f7fe fa52 	bl	9e8 <__aeabi_dcmpeq>
    2544:	2800      	cmp	r0, #0
    2546:	d0e0      	beq.n	250a <pow+0x9a>
    2548:	ec47 6b10 	vmov	d0, r6, r7
    254c:	f00d fdae 	bl	100ac <finite>
    2550:	2800      	cmp	r0, #0
    2552:	d0da      	beq.n	250a <pow+0x9a>
    2554:	ec45 4b10 	vmov	d0, r4, r5
    2558:	f00d fda8 	bl	100ac <finite>
    255c:	2800      	cmp	r0, #0
    255e:	d0d4      	beq.n	250a <pow+0x9a>
    2560:	4b77      	ldr	r3, [pc, #476]	; (2740 <pow+0x2d0>)
    2562:	4a78      	ldr	r2, [pc, #480]	; (2744 <pow+0x2d4>)
    2564:	f993 3000 	ldrsb.w	r3, [r3]
    2568:	9203      	str	r2, [sp, #12]
    256a:	2104      	movs	r1, #4
    256c:	2200      	movs	r2, #0
    256e:	2b02      	cmp	r3, #2
    2570:	e9cd 6704 	strd	r6, r7, [sp, #16]
    2574:	e9cd 4506 	strd	r4, r5, [sp, #24]
    2578:	e9cd 8908 	strd	r8, r9, [sp, #32]
    257c:	9102      	str	r1, [sp, #8]
    257e:	920a      	str	r2, [sp, #40]	; 0x28
    2580:	d004      	beq.n	258c <pow+0x11c>
    2582:	a802      	add	r0, sp, #8
    2584:	f00d fd9e 	bl	100c4 <matherr>
    2588:	2800      	cmp	r0, #0
    258a:	d14a      	bne.n	2622 <pow+0x1b2>
    258c:	f012 ff91 	bl	154b2 <__errno>
    2590:	2322      	movs	r3, #34	; 0x22
    2592:	6003      	str	r3, [r0, #0]
    2594:	e045      	b.n	2622 <pow+0x1b2>
    2596:	ec45 4b10 	vmov	d0, r4, r5
    259a:	f00d fd87 	bl	100ac <finite>
    259e:	2800      	cmp	r0, #0
    25a0:	d0b3      	beq.n	250a <pow+0x9a>
    25a2:	4652      	mov	r2, sl
    25a4:	465b      	mov	r3, fp
    25a6:	4620      	mov	r0, r4
    25a8:	4629      	mov	r1, r5
    25aa:	f7fe fa27 	bl	9fc <__aeabi_dcmplt>
    25ae:	2800      	cmp	r0, #0
    25b0:	d0ab      	beq.n	250a <pow+0x9a>
    25b2:	4b63      	ldr	r3, [pc, #396]	; (2740 <pow+0x2d0>)
    25b4:	9900      	ldr	r1, [sp, #0]
    25b6:	4a63      	ldr	r2, [pc, #396]	; (2744 <pow+0x2d4>)
    25b8:	f993 3000 	ldrsb.w	r3, [r3]
    25bc:	910a      	str	r1, [sp, #40]	; 0x28
    25be:	2101      	movs	r1, #1
    25c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    25c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    25c8:	e9cd 1202 	strd	r1, r2, [sp, #8]
    25cc:	2b00      	cmp	r3, #0
    25ce:	d16f      	bne.n	26b0 <pow+0x240>
    25d0:	e9cd ab08 	strd	sl, fp, [sp, #32]
    25d4:	a802      	add	r0, sp, #8
    25d6:	f00d fd75 	bl	100c4 <matherr>
    25da:	2800      	cmp	r0, #0
    25dc:	d06e      	beq.n	26bc <pow+0x24c>
    25de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    25e0:	b32b      	cbz	r3, 262e <pow+0x1be>
    25e2:	e020      	b.n	2626 <pow+0x1b6>
    25e4:	2200      	movs	r2, #0
    25e6:	2300      	movs	r3, #0
    25e8:	4620      	mov	r0, r4
    25ea:	4629      	mov	r1, r5
    25ec:	f7fe f9fc 	bl	9e8 <__aeabi_dcmpeq>
    25f0:	2800      	cmp	r0, #0
    25f2:	d08a      	beq.n	250a <pow+0x9a>
    25f4:	ed9f 8b4e 	vldr	d8, [pc, #312]	; 2730 <pow+0x2c0>
    25f8:	4b52      	ldr	r3, [pc, #328]	; (2744 <pow+0x2d4>)
    25fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    25fe:	2201      	movs	r2, #1
    2600:	f1b9 0f02 	cmp.w	r9, #2
    2604:	e9cd 6704 	strd	r6, r7, [sp, #16]
    2608:	e9cd 4506 	strd	r4, r5, [sp, #24]
    260c:	ed8d 8b08 	vstr	d8, [sp, #32]
    2610:	9202      	str	r2, [sp, #8]
    2612:	9303      	str	r3, [sp, #12]
    2614:	f43f af79 	beq.w	250a <pow+0x9a>
    2618:	a802      	add	r0, sp, #8
    261a:	f00d fd53 	bl	100c4 <matherr>
    261e:	2800      	cmp	r0, #0
    2620:	d051      	beq.n	26c6 <pow+0x256>
    2622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2624:	b11b      	cbz	r3, 262e <pow+0x1be>
    2626:	f012 ff44 	bl	154b2 <__errno>
    262a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    262c:	6003      	str	r3, [r0, #0]
    262e:	ed9d 8b08 	vldr	d8, [sp, #32]
    2632:	e76a      	b.n	250a <pow+0x9a>
    2634:	ec47 6b10 	vmov	d0, r6, r7
    2638:	f00d fd38 	bl	100ac <finite>
    263c:	2800      	cmp	r0, #0
    263e:	f43f af77 	beq.w	2530 <pow+0xc0>
    2642:	ec45 4b10 	vmov	d0, r4, r5
    2646:	f00d fd31 	bl	100ac <finite>
    264a:	2800      	cmp	r0, #0
    264c:	f43f af70 	beq.w	2530 <pow+0xc0>
    2650:	ec53 2b18 	vmov	r2, r3, d8
    2654:	ee18 0a10 	vmov	r0, s16
    2658:	4619      	mov	r1, r3
    265a:	f7fe fc91 	bl	f80 <__aeabi_dcmpun>
    265e:	4b38      	ldr	r3, [pc, #224]	; (2740 <pow+0x2d0>)
    2660:	2800      	cmp	r0, #0
    2662:	f040 8096 	bne.w	2792 <pow+0x322>
    2666:	f993 8000 	ldrsb.w	r8, [r3]
    266a:	900a      	str	r0, [sp, #40]	; 0x28
    266c:	2303      	movs	r3, #3
    266e:	9302      	str	r3, [sp, #8]
    2670:	4b34      	ldr	r3, [pc, #208]	; (2744 <pow+0x2d4>)
    2672:	9303      	str	r3, [sp, #12]
    2674:	e9cd 6704 	strd	r6, r7, [sp, #16]
    2678:	e9cd 4506 	strd	r4, r5, [sp, #24]
    267c:	f1b8 0f00 	cmp.w	r8, #0
    2680:	d126      	bne.n	26d0 <pow+0x260>
    2682:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 2754 <pow+0x2e4>
    2686:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
    268a:	4652      	mov	r2, sl
    268c:	465b      	mov	r3, fp
    268e:	4630      	mov	r0, r6
    2690:	4639      	mov	r1, r7
    2692:	e9cd 8908 	strd	r8, r9, [sp, #32]
    2696:	f7fe f9b1 	bl	9fc <__aeabi_dcmplt>
    269a:	bb48      	cbnz	r0, 26f0 <pow+0x280>
    269c:	a802      	add	r0, sp, #8
    269e:	f00d fd11 	bl	100c4 <matherr>
    26a2:	2800      	cmp	r0, #0
    26a4:	d19b      	bne.n	25de <pow+0x16e>
    26a6:	f012 ff04 	bl	154b2 <__errno>
    26aa:	2322      	movs	r3, #34	; 0x22
    26ac:	6003      	str	r3, [r0, #0]
    26ae:	e796      	b.n	25de <pow+0x16e>
    26b0:	4925      	ldr	r1, [pc, #148]	; (2748 <pow+0x2d8>)
    26b2:	2000      	movs	r0, #0
    26b4:	2b02      	cmp	r3, #2
    26b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    26ba:	d18b      	bne.n	25d4 <pow+0x164>
    26bc:	f012 fef9 	bl	154b2 <__errno>
    26c0:	2321      	movs	r3, #33	; 0x21
    26c2:	6003      	str	r3, [r0, #0]
    26c4:	e78b      	b.n	25de <pow+0x16e>
    26c6:	f012 fef4 	bl	154b2 <__errno>
    26ca:	2321      	movs	r3, #33	; 0x21
    26cc:	6003      	str	r3, [r0, #0]
    26ce:	e7a8      	b.n	2622 <pow+0x1b2>
    26d0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 2738 <pow+0x2c8>
    26d4:	4652      	mov	r2, sl
    26d6:	465b      	mov	r3, fp
    26d8:	4630      	mov	r0, r6
    26da:	4639      	mov	r1, r7
    26dc:	ed8d 7b08 	vstr	d7, [sp, #32]
    26e0:	f7fe f98c 	bl	9fc <__aeabi_dcmplt>
    26e4:	2800      	cmp	r0, #0
    26e6:	d137      	bne.n	2758 <pow+0x2e8>
    26e8:	f1b8 0f02 	cmp.w	r8, #2
    26ec:	d0db      	beq.n	26a6 <pow+0x236>
    26ee:	e7d5      	b.n	269c <pow+0x22c>
    26f0:	4b16      	ldr	r3, [pc, #88]	; (274c <pow+0x2dc>)
    26f2:	2200      	movs	r2, #0
    26f4:	4620      	mov	r0, r4
    26f6:	4629      	mov	r1, r5
    26f8:	f7fd ff0e 	bl	518 <__aeabi_dmul>
    26fc:	4602      	mov	r2, r0
    26fe:	460b      	mov	r3, r1
    2700:	ec43 2b10 	vmov	d0, r2, r3
    2704:	e9cd 2300 	strd	r2, r3, [sp]
    2708:	f00d fcde 	bl	100c8 <rint>
    270c:	e9dd 2300 	ldrd	r2, r3, [sp]
    2710:	ec51 0b10 	vmov	r0, r1, d0
    2714:	f7fe f968 	bl	9e8 <__aeabi_dcmpeq>
    2718:	2800      	cmp	r0, #0
    271a:	d136      	bne.n	278a <pow+0x31a>
    271c:	4b0c      	ldr	r3, [pc, #48]	; (2750 <pow+0x2e0>)
    271e:	4908      	ldr	r1, [pc, #32]	; (2740 <pow+0x2d0>)
    2720:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    2724:	e9cd 2308 	strd	r2, r3, [sp, #32]
    2728:	f991 8000 	ldrsb.w	r8, [r1]
    272c:	e7dc      	b.n	26e8 <pow+0x278>
    272e:	bf00      	nop
    2730:	00000000 	.word	0x00000000
    2734:	3ff00000 	.word	0x3ff00000
    2738:	00000000 	.word	0x00000000
    273c:	7ff00000 	.word	0x7ff00000
    2740:	200005b5 	.word	0x200005b5
    2744:	00040218 	.word	0x00040218
    2748:	fff00000 	.word	0xfff00000
    274c:	3fe00000 	.word	0x3fe00000
    2750:	c7efffff 	.word	0xc7efffff
    2754:	47efffff 	.word	0x47efffff
    2758:	4b1c      	ldr	r3, [pc, #112]	; (27cc <pow+0x35c>)
    275a:	2200      	movs	r2, #0
    275c:	4620      	mov	r0, r4
    275e:	4629      	mov	r1, r5
    2760:	f7fd feda 	bl	518 <__aeabi_dmul>
    2764:	4602      	mov	r2, r0
    2766:	460b      	mov	r3, r1
    2768:	ec43 2b10 	vmov	d0, r2, r3
    276c:	e9cd 2300 	strd	r2, r3, [sp]
    2770:	f00d fcaa 	bl	100c8 <rint>
    2774:	e9dd 2300 	ldrd	r2, r3, [sp]
    2778:	ec51 0b10 	vmov	r0, r1, d0
    277c:	f7fe f934 	bl	9e8 <__aeabi_dcmpeq>
    2780:	b918      	cbnz	r0, 278a <pow+0x31a>
    2782:	4b13      	ldr	r3, [pc, #76]	; (27d0 <pow+0x360>)
    2784:	2200      	movs	r2, #0
    2786:	e9cd 2308 	strd	r2, r3, [sp, #32]
    278a:	4b12      	ldr	r3, [pc, #72]	; (27d4 <pow+0x364>)
    278c:	f993 8000 	ldrsb.w	r8, [r3]
    2790:	e7aa      	b.n	26e8 <pow+0x278>
    2792:	f993 9000 	ldrsb.w	r9, [r3]
    2796:	4b10      	ldr	r3, [pc, #64]	; (27d8 <pow+0x368>)
    2798:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    279c:	2201      	movs	r2, #1
    279e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    27a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    27a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    27aa:	f1b9 0f00 	cmp.w	r9, #0
    27ae:	f43f af0f 	beq.w	25d0 <pow+0x160>
    27b2:	4652      	mov	r2, sl
    27b4:	465b      	mov	r3, fp
    27b6:	4650      	mov	r0, sl
    27b8:	4659      	mov	r1, fp
    27ba:	f7fd ffd7 	bl	76c <__aeabi_ddiv>
    27be:	f1b9 0f02 	cmp.w	r9, #2
    27c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
    27c6:	f43f af79 	beq.w	26bc <pow+0x24c>
    27ca:	e703      	b.n	25d4 <pow+0x164>
    27cc:	3fe00000 	.word	0x3fe00000
    27d0:	fff00000 	.word	0xfff00000
    27d4:	200005b5 	.word	0x200005b5
    27d8:	00040218 	.word	0x00040218
    27dc:	00000000 	.word	0x00000000

000027e0 <__ieee754_pow>:
    27e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27e4:	ec57 6b11 	vmov	r6, r7, d1
    27e8:	ed2d 8b0a 	vpush	{d8-d12}
    27ec:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
    27f0:	ea5a 0206 	orrs.w	r2, sl, r6
    27f4:	b089      	sub	sp, #36	; 0x24
    27f6:	d03d      	beq.n	2874 <__ieee754_pow+0x94>
    27f8:	ec55 4b10 	vmov	r4, r5, d0
    27fc:	4976      	ldr	r1, [pc, #472]	; (29d8 <__ieee754_pow+0x1f8>)
    27fe:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
    2802:	4588      	cmp	r8, r1
    2804:	ee10 2a10 	vmov	r2, s0
    2808:	46a9      	mov	r9, r5
    280a:	dc2c      	bgt.n	2866 <__ieee754_pow+0x86>
    280c:	ee11 3a10 	vmov	r3, s2
    2810:	46bb      	mov	fp, r7
    2812:	d03a      	beq.n	288a <__ieee754_pow+0xaa>
    2814:	458a      	cmp	sl, r1
    2816:	dc26      	bgt.n	2866 <__ieee754_pow+0x86>
    2818:	496f      	ldr	r1, [pc, #444]	; (29d8 <__ieee754_pow+0x1f8>)
    281a:	458a      	cmp	sl, r1
    281c:	d021      	beq.n	2862 <__ieee754_pow+0x82>
    281e:	f1b9 0f00 	cmp.w	r9, #0
    2822:	db3d      	blt.n	28a0 <__ieee754_pow+0xc0>
    2824:	2100      	movs	r1, #0
    2826:	9103      	str	r1, [sp, #12]
    2828:	2b00      	cmp	r3, #0
    282a:	d155      	bne.n	28d8 <__ieee754_pow+0xf8>
    282c:	4b6a      	ldr	r3, [pc, #424]	; (29d8 <__ieee754_pow+0x1f8>)
    282e:	459a      	cmp	sl, r3
    2830:	f000 80a8 	beq.w	2984 <__ieee754_pow+0x1a4>
    2834:	4b69      	ldr	r3, [pc, #420]	; (29dc <__ieee754_pow+0x1fc>)
    2836:	459a      	cmp	sl, r3
    2838:	f000 80b6 	beq.w	29a8 <__ieee754_pow+0x1c8>
    283c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
    2840:	f000 8501 	beq.w	3246 <__ieee754_pow+0xa66>
    2844:	4b66      	ldr	r3, [pc, #408]	; (29e0 <__ieee754_pow+0x200>)
    2846:	459b      	cmp	fp, r3
    2848:	d146      	bne.n	28d8 <__ieee754_pow+0xf8>
    284a:	f1b9 0f00 	cmp.w	r9, #0
    284e:	db43      	blt.n	28d8 <__ieee754_pow+0xf8>
    2850:	ec45 4b10 	vmov	d0, r4, r5
    2854:	b009      	add	sp, #36	; 0x24
    2856:	ecbd 8b0a 	vpop	{d8-d12}
    285a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    285e:	f00d ba65 	b.w	fd2c <__ieee754_sqrt>
    2862:	2b00      	cmp	r3, #0
    2864:	d0db      	beq.n	281e <__ieee754_pow+0x3e>
    2866:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
    286a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
    286e:	ea58 0302 	orrs.w	r3, r8, r2
    2872:	d10d      	bne.n	2890 <__ieee754_pow+0xb0>
    2874:	ed9f 7b54 	vldr	d7, [pc, #336]	; 29c8 <__ieee754_pow+0x1e8>
    2878:	ed8d 7b00 	vstr	d7, [sp]
    287c:	ed9d 0b00 	vldr	d0, [sp]
    2880:	b009      	add	sp, #36	; 0x24
    2882:	ecbd 8b0a 	vpop	{d8-d12}
    2886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    288a:	b90c      	cbnz	r4, 2890 <__ieee754_pow+0xb0>
    288c:	45c2      	cmp	sl, r8
    288e:	ddc3      	ble.n	2818 <__ieee754_pow+0x38>
    2890:	4854      	ldr	r0, [pc, #336]	; (29e4 <__ieee754_pow+0x204>)
    2892:	b009      	add	sp, #36	; 0x24
    2894:	ecbd 8b0a 	vpop	{d8-d12}
    2898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    289c:	f001 bddc 	b.w	4458 <nan>
    28a0:	4951      	ldr	r1, [pc, #324]	; (29e8 <__ieee754_pow+0x208>)
    28a2:	458a      	cmp	sl, r1
    28a4:	f300 8087 	bgt.w	29b6 <__ieee754_pow+0x1d6>
    28a8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
    28ac:	458a      	cmp	sl, r1
    28ae:	dd0f      	ble.n	28d0 <__ieee754_pow+0xf0>
    28b0:	ea4f 512a 	mov.w	r1, sl, asr #20
    28b4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    28b8:	2914      	cmp	r1, #20
    28ba:	f340 84ce 	ble.w	325a <__ieee754_pow+0xa7a>
    28be:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
    28c2:	fa23 f001 	lsr.w	r0, r3, r1
    28c6:	fa00 f101 	lsl.w	r1, r0, r1
    28ca:	4299      	cmp	r1, r3
    28cc:	f000 8520 	beq.w	3310 <__ieee754_pow+0xb30>
    28d0:	2100      	movs	r1, #0
    28d2:	9103      	str	r1, [sp, #12]
    28d4:	2b00      	cmp	r3, #0
    28d6:	d0ad      	beq.n	2834 <__ieee754_pow+0x54>
    28d8:	ec45 4b10 	vmov	d0, r4, r5
    28dc:	9206      	str	r2, [sp, #24]
    28de:	f00c ff53 	bl	f788 <fabs>
    28e2:	9a06      	ldr	r2, [sp, #24]
    28e4:	ed8d 0b00 	vstr	d0, [sp]
    28e8:	bb5a      	cbnz	r2, 2942 <__ieee754_pow+0x162>
    28ea:	f1b8 0f00 	cmp.w	r8, #0
    28ee:	d004      	beq.n	28fa <__ieee754_pow+0x11a>
    28f0:	4b3a      	ldr	r3, [pc, #232]	; (29dc <__ieee754_pow+0x1fc>)
    28f2:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
    28f6:	429a      	cmp	r2, r3
    28f8:	d123      	bne.n	2942 <__ieee754_pow+0x162>
    28fa:	f1bb 0f00 	cmp.w	fp, #0
    28fe:	da07      	bge.n	2910 <__ieee754_pow+0x130>
    2900:	e9dd 2300 	ldrd	r2, r3, [sp]
    2904:	4935      	ldr	r1, [pc, #212]	; (29dc <__ieee754_pow+0x1fc>)
    2906:	2000      	movs	r0, #0
    2908:	f7fd ff30 	bl	76c <__aeabi_ddiv>
    290c:	e9cd 0100 	strd	r0, r1, [sp]
    2910:	f1b9 0f00 	cmp.w	r9, #0
    2914:	dab2      	bge.n	287c <__ieee754_pow+0x9c>
    2916:	9b03      	ldr	r3, [sp, #12]
    2918:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
    291c:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
    2920:	ea58 0303 	orrs.w	r3, r8, r3
    2924:	f040 84be 	bne.w	32a4 <__ieee754_pow+0xac4>
    2928:	e9dd 2300 	ldrd	r2, r3, [sp]
    292c:	4610      	mov	r0, r2
    292e:	4619      	mov	r1, r3
    2930:	f7fd fc3a 	bl	1a8 <__aeabi_dsub>
    2934:	4602      	mov	r2, r0
    2936:	460b      	mov	r3, r1
    2938:	f7fd ff18 	bl	76c <__aeabi_ddiv>
    293c:	e9cd 0100 	strd	r0, r1, [sp]
    2940:	e79c      	b.n	287c <__ieee754_pow+0x9c>
    2942:	9a03      	ldr	r2, [sp, #12]
    2944:	ea4f 73d9 	mov.w	r3, r9, lsr #31
    2948:	3b01      	subs	r3, #1
    294a:	9306      	str	r3, [sp, #24]
    294c:	4313      	orrs	r3, r2
    294e:	d035      	beq.n	29bc <__ieee754_pow+0x1dc>
    2950:	4b26      	ldr	r3, [pc, #152]	; (29ec <__ieee754_pow+0x20c>)
    2952:	459a      	cmp	sl, r3
    2954:	dd4e      	ble.n	29f4 <__ieee754_pow+0x214>
    2956:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    295a:	459a      	cmp	sl, r3
    295c:	4b24      	ldr	r3, [pc, #144]	; (29f0 <__ieee754_pow+0x210>)
    295e:	f340 83ed 	ble.w	313c <__ieee754_pow+0x95c>
    2962:	4598      	cmp	r8, r3
    2964:	f340 836b 	ble.w	303e <__ieee754_pow+0x85e>
    2968:	f1bb 0f00 	cmp.w	fp, #0
    296c:	f340 836b 	ble.w	3046 <__ieee754_pow+0x866>
    2970:	a317      	add	r3, pc, #92	; (adr r3, 29d0 <__ieee754_pow+0x1f0>)
    2972:	e9d3 2300 	ldrd	r2, r3, [r3]
    2976:	4610      	mov	r0, r2
    2978:	4619      	mov	r1, r3
    297a:	f7fd fdcd 	bl	518 <__aeabi_dmul>
    297e:	e9cd 0100 	strd	r0, r1, [sp]
    2982:	e77b      	b.n	287c <__ieee754_pow+0x9c>
    2984:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
    2988:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    298c:	4313      	orrs	r3, r2
    298e:	f43f af71 	beq.w	2874 <__ieee754_pow+0x94>
    2992:	4b17      	ldr	r3, [pc, #92]	; (29f0 <__ieee754_pow+0x210>)
    2994:	4598      	cmp	r8, r3
    2996:	f340 8388 	ble.w	30aa <__ieee754_pow+0x8ca>
    299a:	f1bb 0f00 	cmp.w	fp, #0
    299e:	f2c0 8352 	blt.w	3046 <__ieee754_pow+0x866>
    29a2:	e9cd 6700 	strd	r6, r7, [sp]
    29a6:	e769      	b.n	287c <__ieee754_pow+0x9c>
    29a8:	f1bb 0f00 	cmp.w	fp, #0
    29ac:	f2c0 8441 	blt.w	3232 <__ieee754_pow+0xa52>
    29b0:	e9cd 4500 	strd	r4, r5, [sp]
    29b4:	e762      	b.n	287c <__ieee754_pow+0x9c>
    29b6:	2102      	movs	r1, #2
    29b8:	9103      	str	r1, [sp, #12]
    29ba:	e735      	b.n	2828 <__ieee754_pow+0x48>
    29bc:	4622      	mov	r2, r4
    29be:	462b      	mov	r3, r5
    29c0:	e7b4      	b.n	292c <__ieee754_pow+0x14c>
    29c2:	bf00      	nop
    29c4:	f3af 8000 	nop.w
    29c8:	00000000 	.word	0x00000000
    29cc:	3ff00000 	.word	0x3ff00000
    29d0:	8800759c 	.word	0x8800759c
    29d4:	7e37e43c 	.word	0x7e37e43c
    29d8:	7ff00000 	.word	0x7ff00000
    29dc:	3ff00000 	.word	0x3ff00000
    29e0:	3fe00000 	.word	0x3fe00000
    29e4:	00040228 	.word	0x00040228
    29e8:	433fffff 	.word	0x433fffff
    29ec:	41e00000 	.word	0x41e00000
    29f0:	3fefffff 	.word	0x3fefffff
    29f4:	4be4      	ldr	r3, [pc, #912]	; (2d88 <__ieee754_pow+0x5a8>)
    29f6:	ea09 0303 	and.w	r3, r9, r3
    29fa:	2b00      	cmp	r3, #0
    29fc:	f040 8416 	bne.w	322c <__ieee754_pow+0xa4c>
    2a00:	e9dd 0100 	ldrd	r0, r1, [sp]
    2a04:	4be1      	ldr	r3, [pc, #900]	; (2d8c <__ieee754_pow+0x5ac>)
    2a06:	2200      	movs	r2, #0
    2a08:	f7fd fd86 	bl	518 <__aeabi_dmul>
    2a0c:	e9cd 0100 	strd	r0, r1, [sp]
    2a10:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2a14:	f06f 0034 	mvn.w	r0, #52	; 0x34
    2a18:	ea4f 5328 	mov.w	r3, r8, asr #20
    2a1c:	49dc      	ldr	r1, [pc, #880]	; (2d90 <__ieee754_pow+0x5b0>)
    2a1e:	f3c8 0213 	ubfx	r2, r8, #0, #20
    2a22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    2a26:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
    2a2a:	1818      	adds	r0, r3, r0
    2a2c:	428a      	cmp	r2, r1
    2a2e:	9007      	str	r0, [sp, #28]
    2a30:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
    2a34:	f340 83e9 	ble.w	320a <__ieee754_pow+0xa2a>
    2a38:	4bd6      	ldr	r3, [pc, #856]	; (2d94 <__ieee754_pow+0x5b4>)
    2a3a:	429a      	cmp	r2, r3
    2a3c:	f340 843e 	ble.w	32bc <__ieee754_pow+0xadc>
    2a40:	ed9f 7bbb 	vldr	d7, [pc, #748]	; 2d30 <__ieee754_pow+0x550>
    2a44:	eeb0 ba47 	vmov.f32	s22, s14
    2a48:	eef0 ba67 	vmov.f32	s23, s15
    2a4c:	eeb0 ca47 	vmov.f32	s24, s14
    2a50:	eef0 ca67 	vmov.f32	s25, s15
    2a54:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 2d38 <__ieee754_pow+0x558>
    2a58:	3001      	adds	r0, #1
    2a5a:	ec54 3b17 	vmov	r3, r4, d7
    2a5e:	9007      	str	r0, [sp, #28]
    2a60:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
    2a64:	f04f 0900 	mov.w	r9, #0
    2a68:	e9dd ab00 	ldrd	sl, fp, [sp]
    2a6c:	ec44 3b18 	vmov	d8, r3, r4
    2a70:	461a      	mov	r2, r3
    2a72:	4650      	mov	r0, sl
    2a74:	4623      	mov	r3, r4
    2a76:	4641      	mov	r1, r8
    2a78:	f7fd fb96 	bl	1a8 <__aeabi_dsub>
    2a7c:	ec53 2b18 	vmov	r2, r3, d8
    2a80:	4604      	mov	r4, r0
    2a82:	460d      	mov	r5, r1
    2a84:	4650      	mov	r0, sl
    2a86:	4641      	mov	r1, r8
    2a88:	f7fd fb90 	bl	1ac <__adddf3>
    2a8c:	4602      	mov	r2, r0
    2a8e:	460b      	mov	r3, r1
    2a90:	2000      	movs	r0, #0
    2a92:	49c1      	ldr	r1, [pc, #772]	; (2d98 <__ieee754_pow+0x5b8>)
    2a94:	f7fd fe6a 	bl	76c <__aeabi_ddiv>
    2a98:	ec45 4b1a 	vmov	d10, r4, r5
    2a9c:	ec41 0b19 	vmov	d9, r0, r1
    2aa0:	ec51 0b1a 	vmov	r0, r1, d10
    2aa4:	ec53 2b19 	vmov	r2, r3, d9
    2aa8:	f7fd fd36 	bl	518 <__aeabi_dmul>
    2aac:	46c3      	mov	fp, r8
    2aae:	ea4f 0868 	mov.w	r8, r8, asr #1
    2ab2:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
    2ab6:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
    2aba:	eb03 0509 	add.w	r5, r3, r9
    2abe:	460a      	mov	r2, r1
    2ac0:	2300      	movs	r3, #0
    2ac2:	4601      	mov	r1, r0
    2ac4:	e9cd 1200 	strd	r1, r2, [sp]
    2ac8:	9300      	str	r3, [sp, #0]
    2aca:	e9dd 8900 	ldrd	r8, r9, [sp]
    2ace:	2400      	movs	r4, #0
    2ad0:	e9cd 1204 	strd	r1, r2, [sp, #16]
    2ad4:	462b      	mov	r3, r5
    2ad6:	4622      	mov	r2, r4
    2ad8:	4640      	mov	r0, r8
    2ada:	4649      	mov	r1, r9
    2adc:	f7fd fd1c 	bl	518 <__aeabi_dmul>
    2ae0:	4602      	mov	r2, r0
    2ae2:	460b      	mov	r3, r1
    2ae4:	ec51 0b1a 	vmov	r0, r1, d10
    2ae8:	f7fd fb5e 	bl	1a8 <__aeabi_dsub>
    2aec:	ec41 0b17 	vmov	d7, r0, r1
    2af0:	ec53 2b18 	vmov	r2, r3, d8
    2af4:	4620      	mov	r0, r4
    2af6:	4629      	mov	r1, r5
    2af8:	ec55 4b17 	vmov	r4, r5, d7
    2afc:	f7fd fb54 	bl	1a8 <__aeabi_dsub>
    2b00:	4602      	mov	r2, r0
    2b02:	460b      	mov	r3, r1
    2b04:	4650      	mov	r0, sl
    2b06:	4659      	mov	r1, fp
    2b08:	f7fd fb4e 	bl	1a8 <__aeabi_dsub>
    2b0c:	4642      	mov	r2, r8
    2b0e:	464b      	mov	r3, r9
    2b10:	f7fd fd02 	bl	518 <__aeabi_dmul>
    2b14:	4602      	mov	r2, r0
    2b16:	460b      	mov	r3, r1
    2b18:	4620      	mov	r0, r4
    2b1a:	4629      	mov	r1, r5
    2b1c:	f7fd fb44 	bl	1a8 <__aeabi_dsub>
    2b20:	ec53 2b19 	vmov	r2, r3, d9
    2b24:	f7fd fcf8 	bl	518 <__aeabi_dmul>
    2b28:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
    2b2c:	4604      	mov	r4, r0
    2b2e:	460d      	mov	r5, r1
    2b30:	4652      	mov	r2, sl
    2b32:	465b      	mov	r3, fp
    2b34:	4650      	mov	r0, sl
    2b36:	4659      	mov	r1, fp
    2b38:	f7fd fcee 	bl	518 <__aeabi_dmul>
    2b3c:	a380      	add	r3, pc, #512	; (adr r3, 2d40 <__ieee754_pow+0x560>)
    2b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b42:	ec45 4b1a 	vmov	d10, r4, r5
    2b46:	4604      	mov	r4, r0
    2b48:	460d      	mov	r5, r1
    2b4a:	f7fd fce5 	bl	518 <__aeabi_dmul>
    2b4e:	a37e      	add	r3, pc, #504	; (adr r3, 2d48 <__ieee754_pow+0x568>)
    2b50:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b54:	f7fd fb2a 	bl	1ac <__adddf3>
    2b58:	4622      	mov	r2, r4
    2b5a:	462b      	mov	r3, r5
    2b5c:	f7fd fcdc 	bl	518 <__aeabi_dmul>
    2b60:	a37b      	add	r3, pc, #492	; (adr r3, 2d50 <__ieee754_pow+0x570>)
    2b62:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b66:	f7fd fb21 	bl	1ac <__adddf3>
    2b6a:	4622      	mov	r2, r4
    2b6c:	462b      	mov	r3, r5
    2b6e:	f7fd fcd3 	bl	518 <__aeabi_dmul>
    2b72:	a379      	add	r3, pc, #484	; (adr r3, 2d58 <__ieee754_pow+0x578>)
    2b74:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b78:	f7fd fb18 	bl	1ac <__adddf3>
    2b7c:	4622      	mov	r2, r4
    2b7e:	462b      	mov	r3, r5
    2b80:	f7fd fcca 	bl	518 <__aeabi_dmul>
    2b84:	a376      	add	r3, pc, #472	; (adr r3, 2d60 <__ieee754_pow+0x580>)
    2b86:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b8a:	f7fd fb0f 	bl	1ac <__adddf3>
    2b8e:	4622      	mov	r2, r4
    2b90:	462b      	mov	r3, r5
    2b92:	f7fd fcc1 	bl	518 <__aeabi_dmul>
    2b96:	a374      	add	r3, pc, #464	; (adr r3, 2d68 <__ieee754_pow+0x588>)
    2b98:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b9c:	f7fd fb06 	bl	1ac <__adddf3>
    2ba0:	4622      	mov	r2, r4
    2ba2:	462b      	mov	r3, r5
    2ba4:	4604      	mov	r4, r0
    2ba6:	460d      	mov	r5, r1
    2ba8:	4610      	mov	r0, r2
    2baa:	4619      	mov	r1, r3
    2bac:	f7fd fcb4 	bl	518 <__aeabi_dmul>
    2bb0:	4602      	mov	r2, r0
    2bb2:	460b      	mov	r3, r1
    2bb4:	4620      	mov	r0, r4
    2bb6:	4629      	mov	r1, r5
    2bb8:	f7fd fcae 	bl	518 <__aeabi_dmul>
    2bbc:	4642      	mov	r2, r8
    2bbe:	4604      	mov	r4, r0
    2bc0:	460d      	mov	r5, r1
    2bc2:	464b      	mov	r3, r9
    2bc4:	4650      	mov	r0, sl
    2bc6:	4659      	mov	r1, fp
    2bc8:	e9cd ab04 	strd	sl, fp, [sp, #16]
    2bcc:	f7fd faee 	bl	1ac <__adddf3>
    2bd0:	ec53 2b1a 	vmov	r2, r3, d10
    2bd4:	f7fd fca0 	bl	518 <__aeabi_dmul>
    2bd8:	4622      	mov	r2, r4
    2bda:	462b      	mov	r3, r5
    2bdc:	f7fd fae6 	bl	1ac <__adddf3>
    2be0:	4642      	mov	r2, r8
    2be2:	4604      	mov	r4, r0
    2be4:	460d      	mov	r5, r1
    2be6:	464b      	mov	r3, r9
    2be8:	4640      	mov	r0, r8
    2bea:	4649      	mov	r1, r9
    2bec:	f7fd fc94 	bl	518 <__aeabi_dmul>
    2bf0:	ec45 4b19 	vmov	d9, r4, r5
    2bf4:	4b69      	ldr	r3, [pc, #420]	; (2d9c <__ieee754_pow+0x5bc>)
    2bf6:	2200      	movs	r2, #0
    2bf8:	4682      	mov	sl, r0
    2bfa:	468b      	mov	fp, r1
    2bfc:	f7fd fad6 	bl	1ac <__adddf3>
    2c00:	ec53 2b19 	vmov	r2, r3, d9
    2c04:	f7fd fad2 	bl	1ac <__adddf3>
    2c08:	9c00      	ldr	r4, [sp, #0]
    2c0a:	460d      	mov	r5, r1
    2c0c:	4622      	mov	r2, r4
    2c0e:	462b      	mov	r3, r5
    2c10:	4640      	mov	r0, r8
    2c12:	4649      	mov	r1, r9
    2c14:	f7fd fc80 	bl	518 <__aeabi_dmul>
    2c18:	4b60      	ldr	r3, [pc, #384]	; (2d9c <__ieee754_pow+0x5bc>)
    2c1a:	4680      	mov	r8, r0
    2c1c:	4689      	mov	r9, r1
    2c1e:	2200      	movs	r2, #0
    2c20:	4620      	mov	r0, r4
    2c22:	4629      	mov	r1, r5
    2c24:	f7fd fac0 	bl	1a8 <__aeabi_dsub>
    2c28:	4652      	mov	r2, sl
    2c2a:	465b      	mov	r3, fp
    2c2c:	f7fd fabc 	bl	1a8 <__aeabi_dsub>
    2c30:	4602      	mov	r2, r0
    2c32:	460b      	mov	r3, r1
    2c34:	ec51 0b19 	vmov	r0, r1, d9
    2c38:	f7fd fab6 	bl	1a8 <__aeabi_dsub>
    2c3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2c40:	f7fd fc6a 	bl	518 <__aeabi_dmul>
    2c44:	ec49 8b18 	vmov	d8, r8, r9
    2c48:	4622      	mov	r2, r4
    2c4a:	4680      	mov	r8, r0
    2c4c:	4689      	mov	r9, r1
    2c4e:	462b      	mov	r3, r5
    2c50:	ec51 0b1a 	vmov	r0, r1, d10
    2c54:	f7fd fc60 	bl	518 <__aeabi_dmul>
    2c58:	4602      	mov	r2, r0
    2c5a:	460b      	mov	r3, r1
    2c5c:	4640      	mov	r0, r8
    2c5e:	4649      	mov	r1, r9
    2c60:	f7fd faa4 	bl	1ac <__adddf3>
    2c64:	4682      	mov	sl, r0
    2c66:	468b      	mov	fp, r1
    2c68:	4652      	mov	r2, sl
    2c6a:	465b      	mov	r3, fp
    2c6c:	ec51 0b18 	vmov	r0, r1, d8
    2c70:	f7fd fa9c 	bl	1ac <__adddf3>
    2c74:	9c00      	ldr	r4, [sp, #0]
    2c76:	a33e      	add	r3, pc, #248	; (adr r3, 2d70 <__ieee754_pow+0x590>)
    2c78:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c7c:	4620      	mov	r0, r4
    2c7e:	460d      	mov	r5, r1
    2c80:	f7fd fc4a 	bl	518 <__aeabi_dmul>
    2c84:	ec53 2b18 	vmov	r2, r3, d8
    2c88:	4680      	mov	r8, r0
    2c8a:	4689      	mov	r9, r1
    2c8c:	4620      	mov	r0, r4
    2c8e:	4629      	mov	r1, r5
    2c90:	f7fd fa8a 	bl	1a8 <__aeabi_dsub>
    2c94:	4602      	mov	r2, r0
    2c96:	460b      	mov	r3, r1
    2c98:	4650      	mov	r0, sl
    2c9a:	4659      	mov	r1, fp
    2c9c:	f7fd fa84 	bl	1a8 <__aeabi_dsub>
    2ca0:	a335      	add	r3, pc, #212	; (adr r3, 2d78 <__ieee754_pow+0x598>)
    2ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ca6:	f7fd fc37 	bl	518 <__aeabi_dmul>
    2caa:	ec49 8b19 	vmov	d9, r8, r9
    2cae:	a334      	add	r3, pc, #208	; (adr r3, 2d80 <__ieee754_pow+0x5a0>)
    2cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    2cb4:	4680      	mov	r8, r0
    2cb6:	4689      	mov	r9, r1
    2cb8:	4620      	mov	r0, r4
    2cba:	4629      	mov	r1, r5
    2cbc:	f7fd fc2c 	bl	518 <__aeabi_dmul>
    2cc0:	4602      	mov	r2, r0
    2cc2:	460b      	mov	r3, r1
    2cc4:	4640      	mov	r0, r8
    2cc6:	4649      	mov	r1, r9
    2cc8:	f7fd fa70 	bl	1ac <__adddf3>
    2ccc:	ec53 2b1c 	vmov	r2, r3, d12
    2cd0:	f7fd fa6c 	bl	1ac <__adddf3>
    2cd4:	4682      	mov	sl, r0
    2cd6:	9807      	ldr	r0, [sp, #28]
    2cd8:	468b      	mov	fp, r1
    2cda:	f7fd fbb3 	bl	444 <__aeabi_i2d>
    2cde:	4652      	mov	r2, sl
    2ce0:	4680      	mov	r8, r0
    2ce2:	4689      	mov	r9, r1
    2ce4:	465b      	mov	r3, fp
    2ce6:	ec51 0b19 	vmov	r0, r1, d9
    2cea:	f7fd fa5f 	bl	1ac <__adddf3>
    2cee:	ec53 2b1b 	vmov	r2, r3, d11
    2cf2:	f7fd fa5b 	bl	1ac <__adddf3>
    2cf6:	4642      	mov	r2, r8
    2cf8:	464b      	mov	r3, r9
    2cfa:	f7fd fa57 	bl	1ac <__adddf3>
    2cfe:	9c00      	ldr	r4, [sp, #0]
    2d00:	4642      	mov	r2, r8
    2d02:	464b      	mov	r3, r9
    2d04:	4620      	mov	r0, r4
    2d06:	460d      	mov	r5, r1
    2d08:	f7fd fa4e 	bl	1a8 <__aeabi_dsub>
    2d0c:	ec53 2b1b 	vmov	r2, r3, d11
    2d10:	f7fd fa4a 	bl	1a8 <__aeabi_dsub>
    2d14:	ec53 2b19 	vmov	r2, r3, d9
    2d18:	f7fd fa46 	bl	1a8 <__aeabi_dsub>
    2d1c:	4602      	mov	r2, r0
    2d1e:	460b      	mov	r3, r1
    2d20:	4650      	mov	r0, sl
    2d22:	4659      	mov	r1, fp
    2d24:	f7fd fa40 	bl	1a8 <__aeabi_dsub>
    2d28:	4682      	mov	sl, r0
    2d2a:	468b      	mov	fp, r1
    2d2c:	e038      	b.n	2da0 <__ieee754_pow+0x5c0>
    2d2e:	bf00      	nop
	...
    2d3c:	3ff00000 	.word	0x3ff00000
    2d40:	4a454eef 	.word	0x4a454eef
    2d44:	3fca7e28 	.word	0x3fca7e28
    2d48:	93c9db65 	.word	0x93c9db65
    2d4c:	3fcd864a 	.word	0x3fcd864a
    2d50:	a91d4101 	.word	0xa91d4101
    2d54:	3fd17460 	.word	0x3fd17460
    2d58:	518f264d 	.word	0x518f264d
    2d5c:	3fd55555 	.word	0x3fd55555
    2d60:	db6fabff 	.word	0xdb6fabff
    2d64:	3fdb6db6 	.word	0x3fdb6db6
    2d68:	33333303 	.word	0x33333303
    2d6c:	3fe33333 	.word	0x3fe33333
    2d70:	e0000000 	.word	0xe0000000
    2d74:	3feec709 	.word	0x3feec709
    2d78:	dc3a03fd 	.word	0xdc3a03fd
    2d7c:	3feec709 	.word	0x3feec709
    2d80:	145b01f5 	.word	0x145b01f5
    2d84:	be3e2fe0 	.word	0xbe3e2fe0
    2d88:	7ff00000 	.word	0x7ff00000
    2d8c:	43400000 	.word	0x43400000
    2d90:	0003988e 	.word	0x0003988e
    2d94:	000bb679 	.word	0x000bb679
    2d98:	3ff00000 	.word	0x3ff00000
    2d9c:	40080000 	.word	0x40080000
    2da0:	9b03      	ldr	r3, [sp, #12]
    2da2:	9a06      	ldr	r2, [sp, #24]
    2da4:	3b01      	subs	r3, #1
    2da6:	4313      	orrs	r3, r2
    2da8:	f040 8178 	bne.w	309c <__ieee754_pow+0x8bc>
    2dac:	ed9f 7bc4 	vldr	d7, [pc, #784]	; 30c0 <__ieee754_pow+0x8e0>
    2db0:	eeb0 9a47 	vmov.f32	s18, s14
    2db4:	eef0 9a67 	vmov.f32	s19, s15
    2db8:	2300      	movs	r3, #0
    2dba:	e9cd 6700 	strd	r6, r7, [sp]
    2dbe:	9300      	str	r3, [sp, #0]
    2dc0:	e9dd 8900 	ldrd	r8, r9, [sp]
    2dc4:	4630      	mov	r0, r6
    2dc6:	4642      	mov	r2, r8
    2dc8:	4639      	mov	r1, r7
    2dca:	464b      	mov	r3, r9
    2dcc:	f7fd f9ec 	bl	1a8 <__aeabi_dsub>
    2dd0:	4622      	mov	r2, r4
    2dd2:	462b      	mov	r3, r5
    2dd4:	f7fd fba0 	bl	518 <__aeabi_dmul>
    2dd8:	4632      	mov	r2, r6
    2dda:	463b      	mov	r3, r7
    2ddc:	4606      	mov	r6, r0
    2dde:	460f      	mov	r7, r1
    2de0:	4650      	mov	r0, sl
    2de2:	4659      	mov	r1, fp
    2de4:	f7fd fb98 	bl	518 <__aeabi_dmul>
    2de8:	4602      	mov	r2, r0
    2dea:	460b      	mov	r3, r1
    2dec:	4630      	mov	r0, r6
    2dee:	4639      	mov	r1, r7
    2df0:	f7fd f9dc 	bl	1ac <__adddf3>
    2df4:	4642      	mov	r2, r8
    2df6:	4682      	mov	sl, r0
    2df8:	468b      	mov	fp, r1
    2dfa:	464b      	mov	r3, r9
    2dfc:	4620      	mov	r0, r4
    2dfe:	4629      	mov	r1, r5
    2e00:	f7fd fb8a 	bl	518 <__aeabi_dmul>
    2e04:	4606      	mov	r6, r0
    2e06:	460f      	mov	r7, r1
    2e08:	463b      	mov	r3, r7
    2e0a:	4650      	mov	r0, sl
    2e0c:	4659      	mov	r1, fp
    2e0e:	4632      	mov	r2, r6
    2e10:	f7fd f9cc 	bl	1ac <__adddf3>
    2e14:	4bc4      	ldr	r3, [pc, #784]	; (3128 <__ieee754_pow+0x948>)
    2e16:	4299      	cmp	r1, r3
    2e18:	4604      	mov	r4, r0
    2e1a:	460d      	mov	r5, r1
    2e1c:	4688      	mov	r8, r1
    2e1e:	f340 8117 	ble.w	3050 <__ieee754_pow+0x870>
    2e22:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    2e26:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    2e2a:	4303      	orrs	r3, r0
    2e2c:	f040 822a 	bne.w	3284 <__ieee754_pow+0xaa4>
    2e30:	a3a5      	add	r3, pc, #660	; (adr r3, 30c8 <__ieee754_pow+0x8e8>)
    2e32:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e36:	4650      	mov	r0, sl
    2e38:	4659      	mov	r1, fp
    2e3a:	f7fd f9b7 	bl	1ac <__adddf3>
    2e3e:	4632      	mov	r2, r6
    2e40:	ec41 0b18 	vmov	d8, r0, r1
    2e44:	463b      	mov	r3, r7
    2e46:	4620      	mov	r0, r4
    2e48:	4629      	mov	r1, r5
    2e4a:	f7fd f9ad 	bl	1a8 <__aeabi_dsub>
    2e4e:	4602      	mov	r2, r0
    2e50:	460b      	mov	r3, r1
    2e52:	ec51 0b18 	vmov	r0, r1, d8
    2e56:	f7fd fdef 	bl	a38 <__aeabi_dcmpgt>
    2e5a:	2800      	cmp	r0, #0
    2e5c:	f040 8212 	bne.w	3284 <__ieee754_pow+0xaa4>
    2e60:	f3c8 530a 	ubfx	r3, r8, #20, #11
    2e64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    2e68:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    2e6c:	fa42 f303 	asr.w	r3, r2, r3
    2e70:	4443      	add	r3, r8
    2e72:	49ae      	ldr	r1, [pc, #696]	; (312c <__ieee754_pow+0x94c>)
    2e74:	f3c3 520a 	ubfx	r2, r3, #20, #11
    2e78:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    2e7c:	fa41 fc02 	asr.w	ip, r1, r2
    2e80:	f3c3 0513 	ubfx	r5, r3, #0, #20
    2e84:	ea23 010c 	bic.w	r1, r3, ip
    2e88:	f1c2 0414 	rsb	r4, r2, #20
    2e8c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    2e90:	f1b8 0f00 	cmp.w	r8, #0
    2e94:	460b      	mov	r3, r1
    2e96:	fa45 f104 	asr.w	r1, r5, r4
    2e9a:	9103      	str	r1, [sp, #12]
    2e9c:	f04f 0000 	mov.w	r0, #0
    2ea0:	bfb8      	it	lt
    2ea2:	4249      	neglt	r1, r1
    2ea4:	4602      	mov	r2, r0
    2ea6:	bfb8      	it	lt
    2ea8:	9103      	strlt	r1, [sp, #12]
    2eaa:	4630      	mov	r0, r6
    2eac:	4639      	mov	r1, r7
    2eae:	f7fd f97b 	bl	1a8 <__aeabi_dsub>
    2eb2:	4606      	mov	r6, r0
    2eb4:	460f      	mov	r7, r1
    2eb6:	463b      	mov	r3, r7
    2eb8:	4650      	mov	r0, sl
    2eba:	4659      	mov	r1, fp
    2ebc:	4632      	mov	r2, r6
    2ebe:	f7fd f975 	bl	1ac <__adddf3>
    2ec2:	9b03      	ldr	r3, [sp, #12]
    2ec4:	051b      	lsls	r3, r3, #20
    2ec6:	9300      	str	r3, [sp, #0]
    2ec8:	460d      	mov	r5, r1
    2eca:	2400      	movs	r4, #0
    2ecc:	a380      	add	r3, pc, #512	; (adr r3, 30d0 <__ieee754_pow+0x8f0>)
    2ece:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ed2:	4620      	mov	r0, r4
    2ed4:	4629      	mov	r1, r5
    2ed6:	f7fd fb1f 	bl	518 <__aeabi_dmul>
    2eda:	4632      	mov	r2, r6
    2edc:	4680      	mov	r8, r0
    2ede:	4689      	mov	r9, r1
    2ee0:	463b      	mov	r3, r7
    2ee2:	4620      	mov	r0, r4
    2ee4:	4629      	mov	r1, r5
    2ee6:	f7fd f95f 	bl	1a8 <__aeabi_dsub>
    2eea:	4602      	mov	r2, r0
    2eec:	460b      	mov	r3, r1
    2eee:	4650      	mov	r0, sl
    2ef0:	4659      	mov	r1, fp
    2ef2:	f7fd f959 	bl	1a8 <__aeabi_dsub>
    2ef6:	a378      	add	r3, pc, #480	; (adr r3, 30d8 <__ieee754_pow+0x8f8>)
    2ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
    2efc:	f7fd fb0c 	bl	518 <__aeabi_dmul>
    2f00:	a377      	add	r3, pc, #476	; (adr r3, 30e0 <__ieee754_pow+0x900>)
    2f02:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f06:	4606      	mov	r6, r0
    2f08:	460f      	mov	r7, r1
    2f0a:	4620      	mov	r0, r4
    2f0c:	4629      	mov	r1, r5
    2f0e:	f7fd fb03 	bl	518 <__aeabi_dmul>
    2f12:	4602      	mov	r2, r0
    2f14:	460b      	mov	r3, r1
    2f16:	4630      	mov	r0, r6
    2f18:	4639      	mov	r1, r7
    2f1a:	f7fd f947 	bl	1ac <__adddf3>
    2f1e:	4606      	mov	r6, r0
    2f20:	460f      	mov	r7, r1
    2f22:	4632      	mov	r2, r6
    2f24:	463b      	mov	r3, r7
    2f26:	4640      	mov	r0, r8
    2f28:	4649      	mov	r1, r9
    2f2a:	f7fd f93f 	bl	1ac <__adddf3>
    2f2e:	4642      	mov	r2, r8
    2f30:	464b      	mov	r3, r9
    2f32:	4604      	mov	r4, r0
    2f34:	460d      	mov	r5, r1
    2f36:	f7fd f937 	bl	1a8 <__aeabi_dsub>
    2f3a:	4602      	mov	r2, r0
    2f3c:	460b      	mov	r3, r1
    2f3e:	4630      	mov	r0, r6
    2f40:	4639      	mov	r1, r7
    2f42:	f7fd f931 	bl	1a8 <__aeabi_dsub>
    2f46:	4622      	mov	r2, r4
    2f48:	4682      	mov	sl, r0
    2f4a:	468b      	mov	fp, r1
    2f4c:	462b      	mov	r3, r5
    2f4e:	4620      	mov	r0, r4
    2f50:	4629      	mov	r1, r5
    2f52:	f7fd fae1 	bl	518 <__aeabi_dmul>
    2f56:	a364      	add	r3, pc, #400	; (adr r3, 30e8 <__ieee754_pow+0x908>)
    2f58:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f5c:	4606      	mov	r6, r0
    2f5e:	460f      	mov	r7, r1
    2f60:	f7fd fada 	bl	518 <__aeabi_dmul>
    2f64:	a362      	add	r3, pc, #392	; (adr r3, 30f0 <__ieee754_pow+0x910>)
    2f66:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f6a:	f7fd f91d 	bl	1a8 <__aeabi_dsub>
    2f6e:	4632      	mov	r2, r6
    2f70:	463b      	mov	r3, r7
    2f72:	f7fd fad1 	bl	518 <__aeabi_dmul>
    2f76:	a360      	add	r3, pc, #384	; (adr r3, 30f8 <__ieee754_pow+0x918>)
    2f78:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f7c:	f7fd f916 	bl	1ac <__adddf3>
    2f80:	4632      	mov	r2, r6
    2f82:	463b      	mov	r3, r7
    2f84:	f7fd fac8 	bl	518 <__aeabi_dmul>
    2f88:	a35d      	add	r3, pc, #372	; (adr r3, 3100 <__ieee754_pow+0x920>)
    2f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f8e:	f7fd f90b 	bl	1a8 <__aeabi_dsub>
    2f92:	4632      	mov	r2, r6
    2f94:	463b      	mov	r3, r7
    2f96:	f7fd fabf 	bl	518 <__aeabi_dmul>
    2f9a:	a35b      	add	r3, pc, #364	; (adr r3, 3108 <__ieee754_pow+0x928>)
    2f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2fa0:	f7fd f904 	bl	1ac <__adddf3>
    2fa4:	4632      	mov	r2, r6
    2fa6:	463b      	mov	r3, r7
    2fa8:	f7fd fab6 	bl	518 <__aeabi_dmul>
    2fac:	4602      	mov	r2, r0
    2fae:	460b      	mov	r3, r1
    2fb0:	4620      	mov	r0, r4
    2fb2:	4629      	mov	r1, r5
    2fb4:	f7fd f8f8 	bl	1a8 <__aeabi_dsub>
    2fb8:	4606      	mov	r6, r0
    2fba:	460f      	mov	r7, r1
    2fbc:	4632      	mov	r2, r6
    2fbe:	463b      	mov	r3, r7
    2fc0:	4620      	mov	r0, r4
    2fc2:	4629      	mov	r1, r5
    2fc4:	f7fd faa8 	bl	518 <__aeabi_dmul>
    2fc8:	2200      	movs	r2, #0
    2fca:	4680      	mov	r8, r0
    2fcc:	4689      	mov	r9, r1
    2fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fd2:	4630      	mov	r0, r6
    2fd4:	4639      	mov	r1, r7
    2fd6:	f7fd f8e7 	bl	1a8 <__aeabi_dsub>
    2fda:	4602      	mov	r2, r0
    2fdc:	460b      	mov	r3, r1
    2fde:	4640      	mov	r0, r8
    2fe0:	4649      	mov	r1, r9
    2fe2:	f7fd fbc3 	bl	76c <__aeabi_ddiv>
    2fe6:	4652      	mov	r2, sl
    2fe8:	4606      	mov	r6, r0
    2fea:	460f      	mov	r7, r1
    2fec:	465b      	mov	r3, fp
    2fee:	4620      	mov	r0, r4
    2ff0:	4629      	mov	r1, r5
    2ff2:	f7fd fa91 	bl	518 <__aeabi_dmul>
    2ff6:	4652      	mov	r2, sl
    2ff8:	465b      	mov	r3, fp
    2ffa:	f7fd f8d7 	bl	1ac <__adddf3>
    2ffe:	4602      	mov	r2, r0
    3000:	460b      	mov	r3, r1
    3002:	4630      	mov	r0, r6
    3004:	4639      	mov	r1, r7
    3006:	f7fd f8cf 	bl	1a8 <__aeabi_dsub>
    300a:	4622      	mov	r2, r4
    300c:	462b      	mov	r3, r5
    300e:	f7fd f8cb 	bl	1a8 <__aeabi_dsub>
    3012:	4602      	mov	r2, r0
    3014:	460b      	mov	r3, r1
    3016:	2000      	movs	r0, #0
    3018:	4945      	ldr	r1, [pc, #276]	; (3130 <__ieee754_pow+0x950>)
    301a:	f7fd f8c5 	bl	1a8 <__aeabi_dsub>
    301e:	460b      	mov	r3, r1
    3020:	9900      	ldr	r1, [sp, #0]
    3022:	4419      	add	r1, r3
    3024:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    3028:	4602      	mov	r2, r0
    302a:	f2c0 8169 	blt.w	3300 <__ieee754_pow+0xb20>
    302e:	4610      	mov	r0, r2
    3030:	ec53 2b19 	vmov	r2, r3, d9
    3034:	f7fd fa70 	bl	518 <__aeabi_dmul>
    3038:	e9cd 0100 	strd	r0, r1, [sp]
    303c:	e41e      	b.n	287c <__ieee754_pow+0x9c>
    303e:	f1bb 0f00 	cmp.w	fp, #0
    3042:	f6ff ac95 	blt.w	2970 <__ieee754_pow+0x190>
    3046:	ed9f 7b32 	vldr	d7, [pc, #200]	; 3110 <__ieee754_pow+0x930>
    304a:	ed8d 7b00 	vstr	d7, [sp]
    304e:	e415      	b.n	287c <__ieee754_pow+0x9c>
    3050:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 3138 <__ieee754_pow+0x958>
    3054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    3058:	4563      	cmp	r3, ip
    305a:	f340 810b 	ble.w	3274 <__ieee754_pow+0xa94>
    305e:	4b35      	ldr	r3, [pc, #212]	; (3134 <__ieee754_pow+0x954>)
    3060:	440b      	add	r3, r1
    3062:	4303      	orrs	r3, r0
    3064:	d10a      	bne.n	307c <__ieee754_pow+0x89c>
    3066:	4632      	mov	r2, r6
    3068:	463b      	mov	r3, r7
    306a:	f7fd f89d 	bl	1a8 <__aeabi_dsub>
    306e:	4652      	mov	r2, sl
    3070:	465b      	mov	r3, fp
    3072:	f7fd fcd7 	bl	a24 <__aeabi_dcmpge>
    3076:	2800      	cmp	r0, #0
    3078:	f43f aef2 	beq.w	2e60 <__ieee754_pow+0x680>
    307c:	a326      	add	r3, pc, #152	; (adr r3, 3118 <__ieee754_pow+0x938>)
    307e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3082:	ec51 0b19 	vmov	r0, r1, d9
    3086:	f7fd fa47 	bl	518 <__aeabi_dmul>
    308a:	a323      	add	r3, pc, #140	; (adr r3, 3118 <__ieee754_pow+0x938>)
    308c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3090:	f7fd fa42 	bl	518 <__aeabi_dmul>
    3094:	e9cd 0100 	strd	r0, r1, [sp]
    3098:	f7ff bbf0 	b.w	287c <__ieee754_pow+0x9c>
    309c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 3120 <__ieee754_pow+0x940>
    30a0:	eeb0 9a47 	vmov.f32	s18, s14
    30a4:	eef0 9a67 	vmov.f32	s19, s15
    30a8:	e686      	b.n	2db8 <__ieee754_pow+0x5d8>
    30aa:	f1bb 0f00 	cmp.w	fp, #0
    30ae:	daca      	bge.n	3046 <__ieee754_pow+0x866>
    30b0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    30b4:	9600      	str	r6, [sp, #0]
    30b6:	9301      	str	r3, [sp, #4]
    30b8:	f7ff bbe0 	b.w	287c <__ieee754_pow+0x9c>
    30bc:	f3af 8000 	nop.w
    30c0:	00000000 	.word	0x00000000
    30c4:	bff00000 	.word	0xbff00000
    30c8:	652b82fe 	.word	0x652b82fe
    30cc:	3c971547 	.word	0x3c971547
    30d0:	00000000 	.word	0x00000000
    30d4:	3fe62e43 	.word	0x3fe62e43
    30d8:	fefa39ef 	.word	0xfefa39ef
    30dc:	3fe62e42 	.word	0x3fe62e42
    30e0:	0ca86c39 	.word	0x0ca86c39
    30e4:	be205c61 	.word	0xbe205c61
    30e8:	72bea4d0 	.word	0x72bea4d0
    30ec:	3e663769 	.word	0x3e663769
    30f0:	c5d26bf1 	.word	0xc5d26bf1
    30f4:	3ebbbd41 	.word	0x3ebbbd41
    30f8:	af25de2c 	.word	0xaf25de2c
    30fc:	3f11566a 	.word	0x3f11566a
    3100:	16bebd93 	.word	0x16bebd93
    3104:	3f66c16c 	.word	0x3f66c16c
    3108:	5555553e 	.word	0x5555553e
    310c:	3fc55555 	.word	0x3fc55555
	...
    3118:	c2f8f359 	.word	0xc2f8f359
    311c:	01a56e1f 	.word	0x01a56e1f
    3120:	00000000 	.word	0x00000000
    3124:	3ff00000 	.word	0x3ff00000
    3128:	408fffff 	.word	0x408fffff
    312c:	000fffff 	.word	0x000fffff
    3130:	3ff00000 	.word	0x3ff00000
    3134:	3f6f3400 	.word	0x3f6f3400
    3138:	4090cbff 	.word	0x4090cbff
    313c:	4598      	cmp	r8, r3
    313e:	f6ff af7e 	blt.w	303e <__ieee754_pow+0x85e>
    3142:	4b91      	ldr	r3, [pc, #580]	; (3388 <__ieee754_pow+0xba8>)
    3144:	4598      	cmp	r8, r3
    3146:	f73f ac0f 	bgt.w	2968 <__ieee754_pow+0x188>
    314a:	4b8f      	ldr	r3, [pc, #572]	; (3388 <__ieee754_pow+0xba8>)
    314c:	2200      	movs	r2, #0
    314e:	e9dd 0100 	ldrd	r0, r1, [sp]
    3152:	f7fd f829 	bl	1a8 <__aeabi_dsub>
    3156:	a378      	add	r3, pc, #480	; (adr r3, 3338 <__ieee754_pow+0xb58>)
    3158:	e9d3 2300 	ldrd	r2, r3, [r3]
    315c:	4604      	mov	r4, r0
    315e:	460d      	mov	r5, r1
    3160:	f7fd f9da 	bl	518 <__aeabi_dmul>
    3164:	a376      	add	r3, pc, #472	; (adr r3, 3340 <__ieee754_pow+0xb60>)
    3166:	e9d3 2300 	ldrd	r2, r3, [r3]
    316a:	4682      	mov	sl, r0
    316c:	468b      	mov	fp, r1
    316e:	4620      	mov	r0, r4
    3170:	4629      	mov	r1, r5
    3172:	f7fd f9d1 	bl	518 <__aeabi_dmul>
    3176:	4b85      	ldr	r3, [pc, #532]	; (338c <__ieee754_pow+0xbac>)
    3178:	4680      	mov	r8, r0
    317a:	4689      	mov	r9, r1
    317c:	2200      	movs	r2, #0
    317e:	4620      	mov	r0, r4
    3180:	4629      	mov	r1, r5
    3182:	f7fd f9c9 	bl	518 <__aeabi_dmul>
    3186:	4602      	mov	r2, r0
    3188:	460b      	mov	r3, r1
    318a:	a16f      	add	r1, pc, #444	; (adr r1, 3348 <__ieee754_pow+0xb68>)
    318c:	e9d1 0100 	ldrd	r0, r1, [r1]
    3190:	f7fd f80a 	bl	1a8 <__aeabi_dsub>
    3194:	4622      	mov	r2, r4
    3196:	462b      	mov	r3, r5
    3198:	f7fd f9be 	bl	518 <__aeabi_dmul>
    319c:	4602      	mov	r2, r0
    319e:	460b      	mov	r3, r1
    31a0:	2000      	movs	r0, #0
    31a2:	497b      	ldr	r1, [pc, #492]	; (3390 <__ieee754_pow+0xbb0>)
    31a4:	f7fd f800 	bl	1a8 <__aeabi_dsub>
    31a8:	4622      	mov	r2, r4
    31aa:	462b      	mov	r3, r5
    31ac:	4604      	mov	r4, r0
    31ae:	460d      	mov	r5, r1
    31b0:	4610      	mov	r0, r2
    31b2:	4619      	mov	r1, r3
    31b4:	f7fd f9b0 	bl	518 <__aeabi_dmul>
    31b8:	4602      	mov	r2, r0
    31ba:	460b      	mov	r3, r1
    31bc:	4620      	mov	r0, r4
    31be:	4629      	mov	r1, r5
    31c0:	f7fd f9aa 	bl	518 <__aeabi_dmul>
    31c4:	a362      	add	r3, pc, #392	; (adr r3, 3350 <__ieee754_pow+0xb70>)
    31c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    31ca:	f7fd f9a5 	bl	518 <__aeabi_dmul>
    31ce:	4602      	mov	r2, r0
    31d0:	460b      	mov	r3, r1
    31d2:	4640      	mov	r0, r8
    31d4:	4649      	mov	r1, r9
    31d6:	f7fc ffe7 	bl	1a8 <__aeabi_dsub>
    31da:	4680      	mov	r8, r0
    31dc:	4689      	mov	r9, r1
    31de:	4650      	mov	r0, sl
    31e0:	4659      	mov	r1, fp
    31e2:	4642      	mov	r2, r8
    31e4:	464b      	mov	r3, r9
    31e6:	f7fc ffe1 	bl	1ac <__adddf3>
    31ea:	2400      	movs	r4, #0
    31ec:	4652      	mov	r2, sl
    31ee:	465b      	mov	r3, fp
    31f0:	4620      	mov	r0, r4
    31f2:	460d      	mov	r5, r1
    31f4:	f7fc ffd8 	bl	1a8 <__aeabi_dsub>
    31f8:	4602      	mov	r2, r0
    31fa:	460b      	mov	r3, r1
    31fc:	4640      	mov	r0, r8
    31fe:	4649      	mov	r1, r9
    3200:	f7fc ffd2 	bl	1a8 <__aeabi_dsub>
    3204:	4682      	mov	sl, r0
    3206:	468b      	mov	fp, r1
    3208:	e5ca      	b.n	2da0 <__ieee754_pow+0x5c0>
    320a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 3358 <__ieee754_pow+0xb78>
    320e:	eeb0 ba47 	vmov.f32	s22, s14
    3212:	eef0 ba67 	vmov.f32	s23, s15
    3216:	eeb0 ca47 	vmov.f32	s24, s14
    321a:	eef0 ca67 	vmov.f32	s25, s15
    321e:	ed9f 7b50 	vldr	d7, [pc, #320]	; 3360 <__ieee754_pow+0xb80>
    3222:	f04f 0900 	mov.w	r9, #0
    3226:	ec54 3b17 	vmov	r3, r4, d7
    322a:	e41d      	b.n	2a68 <__ieee754_pow+0x288>
    322c:	2000      	movs	r0, #0
    322e:	f7ff bbf3 	b.w	2a18 <__ieee754_pow+0x238>
    3232:	4955      	ldr	r1, [pc, #340]	; (3388 <__ieee754_pow+0xba8>)
    3234:	4622      	mov	r2, r4
    3236:	462b      	mov	r3, r5
    3238:	2000      	movs	r0, #0
    323a:	f7fd fa97 	bl	76c <__aeabi_ddiv>
    323e:	e9cd 0100 	strd	r0, r1, [sp]
    3242:	f7ff bb1b 	b.w	287c <__ieee754_pow+0x9c>
    3246:	4622      	mov	r2, r4
    3248:	462b      	mov	r3, r5
    324a:	4620      	mov	r0, r4
    324c:	4629      	mov	r1, r5
    324e:	f7fd f963 	bl	518 <__aeabi_dmul>
    3252:	e9cd 0100 	strd	r0, r1, [sp]
    3256:	f7ff bb11 	b.w	287c <__ieee754_pow+0x9c>
    325a:	2b00      	cmp	r3, #0
    325c:	d142      	bne.n	32e4 <__ieee754_pow+0xb04>
    325e:	f1c1 0114 	rsb	r1, r1, #20
    3262:	fa4a f001 	asr.w	r0, sl, r1
    3266:	fa00 f101 	lsl.w	r1, r0, r1
    326a:	4551      	cmp	r1, sl
    326c:	d05a      	beq.n	3324 <__ieee754_pow+0xb44>
    326e:	9303      	str	r3, [sp, #12]
    3270:	f7ff bae0 	b.w	2834 <__ieee754_pow+0x54>
    3274:	4a46      	ldr	r2, [pc, #280]	; (3390 <__ieee754_pow+0xbb0>)
    3276:	4293      	cmp	r3, r2
    3278:	dc5b      	bgt.n	3332 <__ieee754_pow+0xb52>
    327a:	e9dd 1200 	ldrd	r1, r2, [sp]
    327e:	9100      	str	r1, [sp, #0]
    3280:	9103      	str	r1, [sp, #12]
    3282:	e622      	b.n	2eca <__ieee754_pow+0x6ea>
    3284:	a338      	add	r3, pc, #224	; (adr r3, 3368 <__ieee754_pow+0xb88>)
    3286:	e9d3 2300 	ldrd	r2, r3, [r3]
    328a:	ec51 0b19 	vmov	r0, r1, d9
    328e:	f7fd f943 	bl	518 <__aeabi_dmul>
    3292:	a335      	add	r3, pc, #212	; (adr r3, 3368 <__ieee754_pow+0xb88>)
    3294:	e9d3 2300 	ldrd	r2, r3, [r3]
    3298:	f7fd f93e 	bl	518 <__aeabi_dmul>
    329c:	e9cd 0100 	strd	r0, r1, [sp]
    32a0:	f7ff baec 	b.w	287c <__ieee754_pow+0x9c>
    32a4:	9b03      	ldr	r3, [sp, #12]
    32a6:	2b01      	cmp	r3, #1
    32a8:	f47f aae8 	bne.w	287c <__ieee754_pow+0x9c>
    32ac:	e9dd 2100 	ldrd	r2, r1, [sp]
    32b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    32b4:	e9cd 2300 	strd	r2, r3, [sp]
    32b8:	f7ff bae0 	b.w	287c <__ieee754_pow+0x9c>
    32bc:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 3370 <__ieee754_pow+0xb90>
    32c0:	eeb0 ba47 	vmov.f32	s22, s14
    32c4:	eef0 ba67 	vmov.f32	s23, s15
    32c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 3378 <__ieee754_pow+0xb98>
    32cc:	eeb0 ca47 	vmov.f32	s24, s14
    32d0:	eef0 ca67 	vmov.f32	s25, s15
    32d4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 3380 <__ieee754_pow+0xba0>
    32d8:	f44f 2980 	mov.w	r9, #262144	; 0x40000
    32dc:	ec54 3b17 	vmov	r3, r4, d7
    32e0:	f7ff bbc2 	b.w	2a68 <__ieee754_pow+0x288>
    32e4:	ec45 4b10 	vmov	d0, r4, r5
    32e8:	9203      	str	r2, [sp, #12]
    32ea:	f00c fa4d 	bl	f788 <fabs>
    32ee:	9a03      	ldr	r2, [sp, #12]
    32f0:	ed8d 0b00 	vstr	d0, [sp]
    32f4:	2a00      	cmp	r2, #0
    32f6:	f47f ab61 	bne.w	29bc <__ieee754_pow+0x1dc>
    32fa:	9203      	str	r2, [sp, #12]
    32fc:	f7ff baf5 	b.w	28ea <__ieee754_pow+0x10a>
    3300:	9803      	ldr	r0, [sp, #12]
    3302:	ec43 2b10 	vmov	d0, r2, r3
    3306:	f001 f8af 	bl	4468 <scalbn>
    330a:	ec51 0b10 	vmov	r0, r1, d0
    330e:	e68f      	b.n	3030 <__ieee754_pow+0x850>
    3310:	f000 0001 	and.w	r0, r0, #1
    3314:	f1c0 0102 	rsb	r1, r0, #2
    3318:	9103      	str	r1, [sp, #12]
    331a:	2b00      	cmp	r3, #0
    331c:	f43f aa8a 	beq.w	2834 <__ieee754_pow+0x54>
    3320:	f7ff bada 	b.w	28d8 <__ieee754_pow+0xf8>
    3324:	f000 0001 	and.w	r0, r0, #1
    3328:	f1c0 0302 	rsb	r3, r0, #2
    332c:	9303      	str	r3, [sp, #12]
    332e:	f7ff ba81 	b.w	2834 <__ieee754_pow+0x54>
    3332:	151b      	asrs	r3, r3, #20
    3334:	e596      	b.n	2e64 <__ieee754_pow+0x684>
    3336:	bf00      	nop
    3338:	60000000 	.word	0x60000000
    333c:	3ff71547 	.word	0x3ff71547
    3340:	f85ddf44 	.word	0xf85ddf44
    3344:	3e54ae0b 	.word	0x3e54ae0b
    3348:	55555555 	.word	0x55555555
    334c:	3fd55555 	.word	0x3fd55555
    3350:	652b82fe 	.word	0x652b82fe
    3354:	3ff71547 	.word	0x3ff71547
	...
    3364:	3ff00000 	.word	0x3ff00000
    3368:	8800759c 	.word	0x8800759c
    336c:	7e37e43c 	.word	0x7e37e43c
    3370:	40000000 	.word	0x40000000
    3374:	3fe2b803 	.word	0x3fe2b803
    3378:	43cfd006 	.word	0x43cfd006
    337c:	3e4cfdeb 	.word	0x3e4cfdeb
    3380:	00000000 	.word	0x00000000
    3384:	3ff80000 	.word	0x3ff80000
    3388:	3ff00000 	.word	0x3ff00000
    338c:	3fd00000 	.word	0x3fd00000
    3390:	3fe00000 	.word	0x3fe00000
    3394:	00000000 	.word	0x00000000

00003398 <__ieee754_rem_pio2>:
    3398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    339c:	ec53 2b10 	vmov	r2, r3, d0
    33a0:	ed2d 8b04 	vpush	{d8-d9}
    33a4:	4992      	ldr	r1, [pc, #584]	; (35f0 <__ieee754_rem_pio2+0x258>)
    33a6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    33aa:	428d      	cmp	r5, r1
    33ac:	b089      	sub	sp, #36	; 0x24
    33ae:	4604      	mov	r4, r0
    33b0:	f340 808f 	ble.w	34d2 <__ieee754_rem_pio2+0x13a>
    33b4:	498f      	ldr	r1, [pc, #572]	; (35f4 <__ieee754_rem_pio2+0x25c>)
    33b6:	428d      	cmp	r5, r1
    33b8:	469b      	mov	fp, r3
    33ba:	dc2d      	bgt.n	3418 <__ieee754_rem_pio2+0x80>
    33bc:	f1bb 0f00 	cmp.w	fp, #0
    33c0:	4619      	mov	r1, r3
    33c2:	ee10 0a10 	vmov	r0, s0
    33c6:	a380      	add	r3, pc, #512	; (adr r3, 35c8 <__ieee754_rem_pio2+0x230>)
    33c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    33cc:	f340 81c7 	ble.w	375e <__ieee754_rem_pio2+0x3c6>
    33d0:	f7fc feea 	bl	1a8 <__aeabi_dsub>
    33d4:	4b88      	ldr	r3, [pc, #544]	; (35f8 <__ieee754_rem_pio2+0x260>)
    33d6:	429d      	cmp	r5, r3
    33d8:	4606      	mov	r6, r0
    33da:	460f      	mov	r7, r1
    33dc:	f000 8091 	beq.w	3502 <__ieee754_rem_pio2+0x16a>
    33e0:	a37b      	add	r3, pc, #492	; (adr r3, 35d0 <__ieee754_rem_pio2+0x238>)
    33e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    33e6:	f7fc fedf 	bl	1a8 <__aeabi_dsub>
    33ea:	4602      	mov	r2, r0
    33ec:	460b      	mov	r3, r1
    33ee:	e9c4 2300 	strd	r2, r3, [r4]
    33f2:	4630      	mov	r0, r6
    33f4:	4639      	mov	r1, r7
    33f6:	f7fc fed7 	bl	1a8 <__aeabi_dsub>
    33fa:	a375      	add	r3, pc, #468	; (adr r3, 35d0 <__ieee754_rem_pio2+0x238>)
    33fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3400:	f7fc fed2 	bl	1a8 <__aeabi_dsub>
    3404:	e9c4 0102 	strd	r0, r1, [r4, #8]
    3408:	f04f 0a01 	mov.w	sl, #1
    340c:	4650      	mov	r0, sl
    340e:	b009      	add	sp, #36	; 0x24
    3410:	ecbd 8b04 	vpop	{d8-d9}
    3414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3418:	4978      	ldr	r1, [pc, #480]	; (35fc <__ieee754_rem_pio2+0x264>)
    341a:	428d      	cmp	r5, r1
    341c:	f340 8094 	ble.w	3548 <__ieee754_rem_pio2+0x1b0>
    3420:	4977      	ldr	r1, [pc, #476]	; (3600 <__ieee754_rem_pio2+0x268>)
    3422:	428d      	cmp	r5, r1
    3424:	ee10 0a10 	vmov	r0, s0
    3428:	dc61      	bgt.n	34ee <__ieee754_rem_pio2+0x156>
    342a:	ea4f 5a25 	mov.w	sl, r5, asr #20
    342e:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
    3432:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
    3436:	4616      	mov	r6, r2
    3438:	460f      	mov	r7, r1
    343a:	f7fd fb07 	bl	a4c <__aeabi_d2iz>
    343e:	f7fd f801 	bl	444 <__aeabi_i2d>
    3442:	4680      	mov	r8, r0
    3444:	4689      	mov	r9, r1
    3446:	4630      	mov	r0, r6
    3448:	4639      	mov	r1, r7
    344a:	4642      	mov	r2, r8
    344c:	464b      	mov	r3, r9
    344e:	e9cd 8902 	strd	r8, r9, [sp, #8]
    3452:	f7fc fea9 	bl	1a8 <__aeabi_dsub>
    3456:	4b6b      	ldr	r3, [pc, #428]	; (3604 <__ieee754_rem_pio2+0x26c>)
    3458:	2200      	movs	r2, #0
    345a:	f7fd f85d 	bl	518 <__aeabi_dmul>
    345e:	460f      	mov	r7, r1
    3460:	4606      	mov	r6, r0
    3462:	f7fd faf3 	bl	a4c <__aeabi_d2iz>
    3466:	4605      	mov	r5, r0
    3468:	f7fc ffec 	bl	444 <__aeabi_i2d>
    346c:	4602      	mov	r2, r0
    346e:	460b      	mov	r3, r1
    3470:	4630      	mov	r0, r6
    3472:	4639      	mov	r1, r7
    3474:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3478:	f7fc fe96 	bl	1a8 <__aeabi_dsub>
    347c:	4b61      	ldr	r3, [pc, #388]	; (3604 <__ieee754_rem_pio2+0x26c>)
    347e:	2200      	movs	r2, #0
    3480:	f7fd f84a 	bl	518 <__aeabi_dmul>
    3484:	4602      	mov	r2, r0
    3486:	460b      	mov	r3, r1
    3488:	e9cd 2306 	strd	r2, r3, [sp, #24]
    348c:	2200      	movs	r2, #0
    348e:	2300      	movs	r3, #0
    3490:	f7fd faaa 	bl	9e8 <__aeabi_dcmpeq>
    3494:	2800      	cmp	r0, #0
    3496:	f000 8160 	beq.w	375a <__ieee754_rem_pio2+0x3c2>
    349a:	2d00      	cmp	r5, #0
    349c:	bf0c      	ite	eq
    349e:	2301      	moveq	r3, #1
    34a0:	2302      	movne	r3, #2
    34a2:	4a59      	ldr	r2, [pc, #356]	; (3608 <__ieee754_rem_pio2+0x270>)
    34a4:	9201      	str	r2, [sp, #4]
    34a6:	2102      	movs	r1, #2
    34a8:	4652      	mov	r2, sl
    34aa:	9100      	str	r1, [sp, #0]
    34ac:	a802      	add	r0, sp, #8
    34ae:	4621      	mov	r1, r4
    34b0:	f000 faea 	bl	3a88 <__kernel_rem_pio2>
    34b4:	f1bb 0f00 	cmp.w	fp, #0
    34b8:	4682      	mov	sl, r0
    34ba:	daa7      	bge.n	340c <__ieee754_rem_pio2+0x74>
    34bc:	6862      	ldr	r2, [r4, #4]
    34be:	68e3      	ldr	r3, [r4, #12]
    34c0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    34c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    34c8:	f1c0 0a00 	rsb	sl, r0, #0
    34cc:	6062      	str	r2, [r4, #4]
    34ce:	60e3      	str	r3, [r4, #12]
    34d0:	e79c      	b.n	340c <__ieee754_rem_pio2+0x74>
    34d2:	2000      	movs	r0, #0
    34d4:	2100      	movs	r1, #0
    34d6:	f04f 0a00 	mov.w	sl, #0
    34da:	e9c4 0102 	strd	r0, r1, [r4, #8]
    34de:	4650      	mov	r0, sl
    34e0:	ed84 0b00 	vstr	d0, [r4]
    34e4:	b009      	add	sp, #36	; 0x24
    34e6:	ecbd 8b04 	vpop	{d8-d9}
    34ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34ee:	4619      	mov	r1, r3
    34f0:	f7fc fe5a 	bl	1a8 <__aeabi_dsub>
    34f4:	f04f 0a00 	mov.w	sl, #0
    34f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
    34fc:	e9c4 0100 	strd	r0, r1, [r4]
    3500:	e784      	b.n	340c <__ieee754_rem_pio2+0x74>
    3502:	a335      	add	r3, pc, #212	; (adr r3, 35d8 <__ieee754_rem_pio2+0x240>)
    3504:	e9d3 2300 	ldrd	r2, r3, [r3]
    3508:	f7fc fe4e 	bl	1a8 <__aeabi_dsub>
    350c:	a334      	add	r3, pc, #208	; (adr r3, 35e0 <__ieee754_rem_pio2+0x248>)
    350e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3512:	4606      	mov	r6, r0
    3514:	460f      	mov	r7, r1
    3516:	f7fc fe47 	bl	1a8 <__aeabi_dsub>
    351a:	4602      	mov	r2, r0
    351c:	460b      	mov	r3, r1
    351e:	e9c4 2300 	strd	r2, r3, [r4]
    3522:	4630      	mov	r0, r6
    3524:	4639      	mov	r1, r7
    3526:	f7fc fe3f 	bl	1a8 <__aeabi_dsub>
    352a:	a32d      	add	r3, pc, #180	; (adr r3, 35e0 <__ieee754_rem_pio2+0x248>)
    352c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3530:	f7fc fe3a 	bl	1a8 <__aeabi_dsub>
    3534:	f04f 0a01 	mov.w	sl, #1
    3538:	e9c4 0102 	strd	r0, r1, [r4, #8]
    353c:	4650      	mov	r0, sl
    353e:	b009      	add	sp, #36	; 0x24
    3540:	ecbd 8b04 	vpop	{d8-d9}
    3544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3548:	f00c f91e 	bl	f788 <fabs>
    354c:	ec57 6b10 	vmov	r6, r7, d0
    3550:	ee10 0a10 	vmov	r0, s0
    3554:	a324      	add	r3, pc, #144	; (adr r3, 35e8 <__ieee754_rem_pio2+0x250>)
    3556:	e9d3 2300 	ldrd	r2, r3, [r3]
    355a:	4639      	mov	r1, r7
    355c:	f7fc ffdc 	bl	518 <__aeabi_dmul>
    3560:	4b2a      	ldr	r3, [pc, #168]	; (360c <__ieee754_rem_pio2+0x274>)
    3562:	2200      	movs	r2, #0
    3564:	f7fc fe22 	bl	1ac <__adddf3>
    3568:	f7fd fa70 	bl	a4c <__aeabi_d2iz>
    356c:	4682      	mov	sl, r0
    356e:	f7fc ff69 	bl	444 <__aeabi_i2d>
    3572:	a315      	add	r3, pc, #84	; (adr r3, 35c8 <__ieee754_rem_pio2+0x230>)
    3574:	e9d3 2300 	ldrd	r2, r3, [r3]
    3578:	4680      	mov	r8, r0
    357a:	4689      	mov	r9, r1
    357c:	f7fc ffcc 	bl	518 <__aeabi_dmul>
    3580:	4602      	mov	r2, r0
    3582:	460b      	mov	r3, r1
    3584:	4630      	mov	r0, r6
    3586:	4639      	mov	r1, r7
    3588:	f7fc fe0e 	bl	1a8 <__aeabi_dsub>
    358c:	a310      	add	r3, pc, #64	; (adr r3, 35d0 <__ieee754_rem_pio2+0x238>)
    358e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3592:	4606      	mov	r6, r0
    3594:	460f      	mov	r7, r1
    3596:	4640      	mov	r0, r8
    3598:	4649      	mov	r1, r9
    359a:	f7fc ffbd 	bl	518 <__aeabi_dmul>
    359e:	f1ba 0f1f 	cmp.w	sl, #31
    35a2:	ec49 8b19 	vmov	d9, r8, r9
    35a6:	ec47 6b18 	vmov	d8, r6, r7
    35aa:	4680      	mov	r8, r0
    35ac:	4689      	mov	r9, r1
    35ae:	dc31      	bgt.n	3614 <__ieee754_rem_pio2+0x27c>
    35b0:	4b17      	ldr	r3, [pc, #92]	; (3610 <__ieee754_rem_pio2+0x278>)
    35b2:	f10a 32ff 	add.w	r2, sl, #4294967295
    35b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35ba:	42ab      	cmp	r3, r5
    35bc:	d02a      	beq.n	3614 <__ieee754_rem_pio2+0x27c>
    35be:	4602      	mov	r2, r0
    35c0:	460b      	mov	r3, r1
    35c2:	4630      	mov	r0, r6
    35c4:	4639      	mov	r1, r7
    35c6:	e0a4      	b.n	3712 <__ieee754_rem_pio2+0x37a>
    35c8:	54400000 	.word	0x54400000
    35cc:	3ff921fb 	.word	0x3ff921fb
    35d0:	1a626331 	.word	0x1a626331
    35d4:	3dd0b461 	.word	0x3dd0b461
    35d8:	1a600000 	.word	0x1a600000
    35dc:	3dd0b461 	.word	0x3dd0b461
    35e0:	2e037073 	.word	0x2e037073
    35e4:	3ba3198a 	.word	0x3ba3198a
    35e8:	6dc9c883 	.word	0x6dc9c883
    35ec:	3fe45f30 	.word	0x3fe45f30
    35f0:	3fe921fb 	.word	0x3fe921fb
    35f4:	4002d97b 	.word	0x4002d97b
    35f8:	3ff921fb 	.word	0x3ff921fb
    35fc:	413921fb 	.word	0x413921fb
    3600:	7fefffff 	.word	0x7fefffff
    3604:	41700000 	.word	0x41700000
    3608:	000402b4 	.word	0x000402b4
    360c:	3fe00000 	.word	0x3fe00000
    3610:	00040234 	.word	0x00040234
    3614:	4642      	mov	r2, r8
    3616:	464b      	mov	r3, r9
    3618:	ec51 0b18 	vmov	r0, r1, d8
    361c:	f7fc fdc4 	bl	1a8 <__aeabi_dsub>
    3620:	460a      	mov	r2, r1
    3622:	f3c2 530a 	ubfx	r3, r2, #20, #11
    3626:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
    362a:	2b10      	cmp	r3, #16
    362c:	4601      	mov	r1, r0
    362e:	4606      	mov	r6, r0
    3630:	4617      	mov	r7, r2
    3632:	ea4f 5525 	mov.w	r5, r5, asr #20
    3636:	dd73      	ble.n	3720 <__ieee754_rem_pio2+0x388>
    3638:	a369      	add	r3, pc, #420	; (adr r3, 37e0 <__ieee754_rem_pio2+0x448>)
    363a:	e9d3 2300 	ldrd	r2, r3, [r3]
    363e:	ec51 0b19 	vmov	r0, r1, d9
    3642:	f7fc ff69 	bl	518 <__aeabi_dmul>
    3646:	ec59 8b18 	vmov	r8, r9, d8
    364a:	4606      	mov	r6, r0
    364c:	460f      	mov	r7, r1
    364e:	4632      	mov	r2, r6
    3650:	463b      	mov	r3, r7
    3652:	ee18 0a10 	vmov	r0, s16
    3656:	4649      	mov	r1, r9
    3658:	f7fc fda6 	bl	1a8 <__aeabi_dsub>
    365c:	ec41 0b18 	vmov	d8, r0, r1
    3660:	4640      	mov	r0, r8
    3662:	ec53 2b18 	vmov	r2, r3, d8
    3666:	4649      	mov	r1, r9
    3668:	f7fc fd9e 	bl	1a8 <__aeabi_dsub>
    366c:	4632      	mov	r2, r6
    366e:	463b      	mov	r3, r7
    3670:	f7fc fd9a 	bl	1a8 <__aeabi_dsub>
    3674:	a35c      	add	r3, pc, #368	; (adr r3, 37e8 <__ieee754_rem_pio2+0x450>)
    3676:	e9d3 2300 	ldrd	r2, r3, [r3]
    367a:	4606      	mov	r6, r0
    367c:	460f      	mov	r7, r1
    367e:	ec51 0b19 	vmov	r0, r1, d9
    3682:	f7fc ff49 	bl	518 <__aeabi_dmul>
    3686:	4632      	mov	r2, r6
    3688:	463b      	mov	r3, r7
    368a:	f7fc fd8d 	bl	1a8 <__aeabi_dsub>
    368e:	4680      	mov	r8, r0
    3690:	4689      	mov	r9, r1
    3692:	4642      	mov	r2, r8
    3694:	464b      	mov	r3, r9
    3696:	ec51 0b18 	vmov	r0, r1, d8
    369a:	f7fc fd85 	bl	1a8 <__aeabi_dsub>
    369e:	460a      	mov	r2, r1
    36a0:	f3c2 530a 	ubfx	r3, r2, #20, #11
    36a4:	1aed      	subs	r5, r5, r3
    36a6:	2d31      	cmp	r5, #49	; 0x31
    36a8:	4601      	mov	r1, r0
    36aa:	4606      	mov	r6, r0
    36ac:	4617      	mov	r7, r2
    36ae:	dd37      	ble.n	3720 <__ieee754_rem_pio2+0x388>
    36b0:	a350      	add	r3, pc, #320	; (adr r3, 37f4 <__ieee754_rem_pio2+0x45c>)
    36b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    36b6:	ec51 0b19 	vmov	r0, r1, d9
    36ba:	f7fc ff2d 	bl	518 <__aeabi_dmul>
    36be:	ec56 5b18 	vmov	r5, r6, d8
    36c2:	4680      	mov	r8, r0
    36c4:	4689      	mov	r9, r1
    36c6:	4642      	mov	r2, r8
    36c8:	464b      	mov	r3, r9
    36ca:	ee18 0a10 	vmov	r0, s16
    36ce:	4631      	mov	r1, r6
    36d0:	f7fc fd6a 	bl	1a8 <__aeabi_dsub>
    36d4:	ec41 0b18 	vmov	d8, r0, r1
    36d8:	4631      	mov	r1, r6
    36da:	ec53 2b18 	vmov	r2, r3, d8
    36de:	4628      	mov	r0, r5
    36e0:	f7fc fd62 	bl	1a8 <__aeabi_dsub>
    36e4:	4642      	mov	r2, r8
    36e6:	464b      	mov	r3, r9
    36e8:	f7fc fd5e 	bl	1a8 <__aeabi_dsub>
    36ec:	a343      	add	r3, pc, #268	; (adr r3, 37fc <__ieee754_rem_pio2+0x464>)
    36ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    36f2:	4606      	mov	r6, r0
    36f4:	460f      	mov	r7, r1
    36f6:	ec51 0b19 	vmov	r0, r1, d9
    36fa:	f7fc ff0d 	bl	518 <__aeabi_dmul>
    36fe:	4632      	mov	r2, r6
    3700:	463b      	mov	r3, r7
    3702:	f7fc fd51 	bl	1a8 <__aeabi_dsub>
    3706:	4680      	mov	r8, r0
    3708:	4689      	mov	r9, r1
    370a:	ec51 0b18 	vmov	r0, r1, d8
    370e:	4642      	mov	r2, r8
    3710:	464b      	mov	r3, r9
    3712:	f7fc fd49 	bl	1a8 <__aeabi_dsub>
    3716:	e9c4 0100 	strd	r0, r1, [r4]
    371a:	4606      	mov	r6, r0
    371c:	460f      	mov	r7, r1
    371e:	e001      	b.n	3724 <__ieee754_rem_pio2+0x38c>
    3720:	e9c4 1200 	strd	r1, r2, [r4]
    3724:	4632      	mov	r2, r6
    3726:	463b      	mov	r3, r7
    3728:	ec51 0b18 	vmov	r0, r1, d8
    372c:	f7fc fd3c 	bl	1a8 <__aeabi_dsub>
    3730:	4642      	mov	r2, r8
    3732:	464b      	mov	r3, r9
    3734:	f7fc fd38 	bl	1a8 <__aeabi_dsub>
    3738:	f1bb 0f00 	cmp.w	fp, #0
    373c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    3740:	f6bf ae64 	bge.w	340c <__ieee754_rem_pio2+0x74>
    3744:	f107 4500 	add.w	r5, r7, #2147483648	; 0x80000000
    3748:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    374c:	e9c4 6500 	strd	r6, r5, [r4]
    3750:	e9c4 0302 	strd	r0, r3, [r4, #8]
    3754:	f1ca 0a00 	rsb	sl, sl, #0
    3758:	e658      	b.n	340c <__ieee754_rem_pio2+0x74>
    375a:	2303      	movs	r3, #3
    375c:	e6a1      	b.n	34a2 <__ieee754_rem_pio2+0x10a>
    375e:	f7fc fd25 	bl	1ac <__adddf3>
    3762:	4b23      	ldr	r3, [pc, #140]	; (37f0 <__ieee754_rem_pio2+0x458>)
    3764:	429d      	cmp	r5, r3
    3766:	4606      	mov	r6, r0
    3768:	460f      	mov	r7, r1
    376a:	d016      	beq.n	379a <__ieee754_rem_pio2+0x402>
    376c:	a31a      	add	r3, pc, #104	; (adr r3, 37d8 <__ieee754_rem_pio2+0x440>)
    376e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3772:	f7fc fd1b 	bl	1ac <__adddf3>
    3776:	4602      	mov	r2, r0
    3778:	460b      	mov	r3, r1
    377a:	e9c4 2300 	strd	r2, r3, [r4]
    377e:	4630      	mov	r0, r6
    3780:	4639      	mov	r1, r7
    3782:	f7fc fd11 	bl	1a8 <__aeabi_dsub>
    3786:	a314      	add	r3, pc, #80	; (adr r3, 37d8 <__ieee754_rem_pio2+0x440>)
    3788:	e9d3 2300 	ldrd	r2, r3, [r3]
    378c:	f7fc fd0e 	bl	1ac <__adddf3>
    3790:	f04f 3aff 	mov.w	sl, #4294967295
    3794:	e9c4 0102 	strd	r0, r1, [r4, #8]
    3798:	e638      	b.n	340c <__ieee754_rem_pio2+0x74>
    379a:	a311      	add	r3, pc, #68	; (adr r3, 37e0 <__ieee754_rem_pio2+0x448>)
    379c:	e9d3 2300 	ldrd	r2, r3, [r3]
    37a0:	f7fc fd04 	bl	1ac <__adddf3>
    37a4:	a310      	add	r3, pc, #64	; (adr r3, 37e8 <__ieee754_rem_pio2+0x450>)
    37a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    37aa:	4606      	mov	r6, r0
    37ac:	460f      	mov	r7, r1
    37ae:	f7fc fcfd 	bl	1ac <__adddf3>
    37b2:	4602      	mov	r2, r0
    37b4:	460b      	mov	r3, r1
    37b6:	e9c4 2300 	strd	r2, r3, [r4]
    37ba:	4630      	mov	r0, r6
    37bc:	4639      	mov	r1, r7
    37be:	f7fc fcf3 	bl	1a8 <__aeabi_dsub>
    37c2:	a309      	add	r3, pc, #36	; (adr r3, 37e8 <__ieee754_rem_pio2+0x450>)
    37c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    37c8:	f7fc fcf0 	bl	1ac <__adddf3>
    37cc:	f04f 3aff 	mov.w	sl, #4294967295
    37d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
    37d4:	e61a      	b.n	340c <__ieee754_rem_pio2+0x74>
    37d6:	bf00      	nop
    37d8:	1a626331 	.word	0x1a626331
    37dc:	3dd0b461 	.word	0x3dd0b461
    37e0:	1a600000 	.word	0x1a600000
    37e4:	3dd0b461 	.word	0x3dd0b461
    37e8:	2e037073 	.word	0x2e037073
    37ec:	3ba3198a 	.word	0x3ba3198a
    37f0:	3ff921fb 	.word	0x3ff921fb
    37f4:	2e000000 	.word	0x2e000000
    37f8:	3ba3198a 	.word	0x3ba3198a
    37fc:	252049c1 	.word	0x252049c1
    3800:	397b839a 	.word	0x397b839a
    3804:	00000000 	.word	0x00000000

00003808 <__kernel_cos>:
    3808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    380c:	ec57 6b10 	vmov	r6, r7, d0
    3810:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
    3814:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
    3818:	ed2d 8b04 	vpush	{d8-d9}
    381c:	ec5b ab11 	vmov	sl, fp, d1
    3820:	da71      	bge.n	3906 <__kernel_cos+0xfe>
    3822:	ee10 0a10 	vmov	r0, s0
    3826:	4639      	mov	r1, r7
    3828:	f7fd f910 	bl	a4c <__aeabi_d2iz>
    382c:	2800      	cmp	r0, #0
    382e:	f000 80f6 	beq.w	3a1e <__kernel_cos+0x216>
    3832:	4632      	mov	r2, r6
    3834:	463b      	mov	r3, r7
    3836:	4630      	mov	r0, r6
    3838:	4639      	mov	r1, r7
    383a:	f7fc fe6d 	bl	518 <__aeabi_dmul>
    383e:	a37c      	add	r3, pc, #496	; (adr r3, 3a30 <__kernel_cos+0x228>)
    3840:	e9d3 2300 	ldrd	r2, r3, [r3]
    3844:	4604      	mov	r4, r0
    3846:	460d      	mov	r5, r1
    3848:	f7fc fe66 	bl	518 <__aeabi_dmul>
    384c:	a37a      	add	r3, pc, #488	; (adr r3, 3a38 <__kernel_cos+0x230>)
    384e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3852:	f7fc fcab 	bl	1ac <__adddf3>
    3856:	4622      	mov	r2, r4
    3858:	462b      	mov	r3, r5
    385a:	f7fc fe5d 	bl	518 <__aeabi_dmul>
    385e:	a378      	add	r3, pc, #480	; (adr r3, 3a40 <__kernel_cos+0x238>)
    3860:	e9d3 2300 	ldrd	r2, r3, [r3]
    3864:	f7fc fca0 	bl	1a8 <__aeabi_dsub>
    3868:	4622      	mov	r2, r4
    386a:	462b      	mov	r3, r5
    386c:	f7fc fe54 	bl	518 <__aeabi_dmul>
    3870:	a375      	add	r3, pc, #468	; (adr r3, 3a48 <__kernel_cos+0x240>)
    3872:	e9d3 2300 	ldrd	r2, r3, [r3]
    3876:	f7fc fc99 	bl	1ac <__adddf3>
    387a:	4622      	mov	r2, r4
    387c:	462b      	mov	r3, r5
    387e:	f7fc fe4b 	bl	518 <__aeabi_dmul>
    3882:	a373      	add	r3, pc, #460	; (adr r3, 3a50 <__kernel_cos+0x248>)
    3884:	e9d3 2300 	ldrd	r2, r3, [r3]
    3888:	f7fc fc8e 	bl	1a8 <__aeabi_dsub>
    388c:	4622      	mov	r2, r4
    388e:	462b      	mov	r3, r5
    3890:	f7fc fe42 	bl	518 <__aeabi_dmul>
    3894:	a370      	add	r3, pc, #448	; (adr r3, 3a58 <__kernel_cos+0x250>)
    3896:	e9d3 2300 	ldrd	r2, r3, [r3]
    389a:	f7fc fc87 	bl	1ac <__adddf3>
    389e:	4622      	mov	r2, r4
    38a0:	462b      	mov	r3, r5
    38a2:	f7fc fe39 	bl	518 <__aeabi_dmul>
    38a6:	ec41 0b18 	vmov	d8, r0, r1
    38aa:	4b71      	ldr	r3, [pc, #452]	; (3a70 <__kernel_cos+0x268>)
    38ac:	2200      	movs	r2, #0
    38ae:	4620      	mov	r0, r4
    38b0:	4629      	mov	r1, r5
    38b2:	f7fc fe31 	bl	518 <__aeabi_dmul>
    38b6:	ec53 2b18 	vmov	r2, r3, d8
    38ba:	4680      	mov	r8, r0
    38bc:	4689      	mov	r9, r1
    38be:	4620      	mov	r0, r4
    38c0:	4629      	mov	r1, r5
    38c2:	f7fc fe29 	bl	518 <__aeabi_dmul>
    38c6:	4652      	mov	r2, sl
    38c8:	465b      	mov	r3, fp
    38ca:	4604      	mov	r4, r0
    38cc:	460d      	mov	r5, r1
    38ce:	4630      	mov	r0, r6
    38d0:	4639      	mov	r1, r7
    38d2:	f7fc fe21 	bl	518 <__aeabi_dmul>
    38d6:	4602      	mov	r2, r0
    38d8:	460b      	mov	r3, r1
    38da:	4620      	mov	r0, r4
    38dc:	4629      	mov	r1, r5
    38de:	f7fc fc63 	bl	1a8 <__aeabi_dsub>
    38e2:	4602      	mov	r2, r0
    38e4:	460b      	mov	r3, r1
    38e6:	4640      	mov	r0, r8
    38e8:	4649      	mov	r1, r9
    38ea:	f7fc fc5d 	bl	1a8 <__aeabi_dsub>
    38ee:	4602      	mov	r2, r0
    38f0:	460b      	mov	r3, r1
    38f2:	2000      	movs	r0, #0
    38f4:	495f      	ldr	r1, [pc, #380]	; (3a74 <__kernel_cos+0x26c>)
    38f6:	f7fc fc57 	bl	1a8 <__aeabi_dsub>
    38fa:	ecbd 8b04 	vpop	{d8-d9}
    38fe:	ec41 0b10 	vmov	d0, r0, r1
    3902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3906:	ee10 2a10 	vmov	r2, s0
    390a:	ee10 0a10 	vmov	r0, s0
    390e:	463b      	mov	r3, r7
    3910:	4639      	mov	r1, r7
    3912:	f7fc fe01 	bl	518 <__aeabi_dmul>
    3916:	a346      	add	r3, pc, #280	; (adr r3, 3a30 <__kernel_cos+0x228>)
    3918:	e9d3 2300 	ldrd	r2, r3, [r3]
    391c:	4604      	mov	r4, r0
    391e:	460d      	mov	r5, r1
    3920:	f7fc fdfa 	bl	518 <__aeabi_dmul>
    3924:	a344      	add	r3, pc, #272	; (adr r3, 3a38 <__kernel_cos+0x230>)
    3926:	e9d3 2300 	ldrd	r2, r3, [r3]
    392a:	f7fc fc3f 	bl	1ac <__adddf3>
    392e:	4622      	mov	r2, r4
    3930:	462b      	mov	r3, r5
    3932:	f7fc fdf1 	bl	518 <__aeabi_dmul>
    3936:	a342      	add	r3, pc, #264	; (adr r3, 3a40 <__kernel_cos+0x238>)
    3938:	e9d3 2300 	ldrd	r2, r3, [r3]
    393c:	f7fc fc34 	bl	1a8 <__aeabi_dsub>
    3940:	4622      	mov	r2, r4
    3942:	462b      	mov	r3, r5
    3944:	f7fc fde8 	bl	518 <__aeabi_dmul>
    3948:	a33f      	add	r3, pc, #252	; (adr r3, 3a48 <__kernel_cos+0x240>)
    394a:	e9d3 2300 	ldrd	r2, r3, [r3]
    394e:	f7fc fc2d 	bl	1ac <__adddf3>
    3952:	4622      	mov	r2, r4
    3954:	462b      	mov	r3, r5
    3956:	f7fc fddf 	bl	518 <__aeabi_dmul>
    395a:	a33d      	add	r3, pc, #244	; (adr r3, 3a50 <__kernel_cos+0x248>)
    395c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3960:	f7fc fc22 	bl	1a8 <__aeabi_dsub>
    3964:	4622      	mov	r2, r4
    3966:	462b      	mov	r3, r5
    3968:	f7fc fdd6 	bl	518 <__aeabi_dmul>
    396c:	a33a      	add	r3, pc, #232	; (adr r3, 3a58 <__kernel_cos+0x250>)
    396e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3972:	f7fc fc1b 	bl	1ac <__adddf3>
    3976:	462b      	mov	r3, r5
    3978:	4622      	mov	r2, r4
    397a:	f7fc fdcd 	bl	518 <__aeabi_dmul>
    397e:	4b3e      	ldr	r3, [pc, #248]	; (3a78 <__kernel_cos+0x270>)
    3980:	4599      	cmp	r9, r3
    3982:	ec41 0b18 	vmov	d8, r0, r1
    3986:	dd90      	ble.n	38aa <__kernel_cos+0xa2>
    3988:	4b3c      	ldr	r3, [pc, #240]	; (3a7c <__kernel_cos+0x274>)
    398a:	4599      	cmp	r9, r3
    398c:	dc3c      	bgt.n	3a08 <__kernel_cos+0x200>
    398e:	2200      	movs	r2, #0
    3990:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
    3994:	4937      	ldr	r1, [pc, #220]	; (3a74 <__kernel_cos+0x26c>)
    3996:	2000      	movs	r0, #0
    3998:	4690      	mov	r8, r2
    399a:	4699      	mov	r9, r3
    399c:	f7fc fc04 	bl	1a8 <__aeabi_dsub>
    39a0:	ec41 0b19 	vmov	d9, r0, r1
    39a4:	4b32      	ldr	r3, [pc, #200]	; (3a70 <__kernel_cos+0x268>)
    39a6:	2200      	movs	r2, #0
    39a8:	4620      	mov	r0, r4
    39aa:	4629      	mov	r1, r5
    39ac:	f7fc fdb4 	bl	518 <__aeabi_dmul>
    39b0:	4642      	mov	r2, r8
    39b2:	464b      	mov	r3, r9
    39b4:	f7fc fbf8 	bl	1a8 <__aeabi_dsub>
    39b8:	ec53 2b18 	vmov	r2, r3, d8
    39bc:	4680      	mov	r8, r0
    39be:	4689      	mov	r9, r1
    39c0:	4620      	mov	r0, r4
    39c2:	4629      	mov	r1, r5
    39c4:	f7fc fda8 	bl	518 <__aeabi_dmul>
    39c8:	4652      	mov	r2, sl
    39ca:	465b      	mov	r3, fp
    39cc:	4604      	mov	r4, r0
    39ce:	460d      	mov	r5, r1
    39d0:	4630      	mov	r0, r6
    39d2:	4639      	mov	r1, r7
    39d4:	f7fc fda0 	bl	518 <__aeabi_dmul>
    39d8:	4602      	mov	r2, r0
    39da:	460b      	mov	r3, r1
    39dc:	4620      	mov	r0, r4
    39de:	4629      	mov	r1, r5
    39e0:	f7fc fbe2 	bl	1a8 <__aeabi_dsub>
    39e4:	4602      	mov	r2, r0
    39e6:	460b      	mov	r3, r1
    39e8:	4640      	mov	r0, r8
    39ea:	4649      	mov	r1, r9
    39ec:	f7fc fbdc 	bl	1a8 <__aeabi_dsub>
    39f0:	4602      	mov	r2, r0
    39f2:	460b      	mov	r3, r1
    39f4:	ec51 0b19 	vmov	r0, r1, d9
    39f8:	f7fc fbd6 	bl	1a8 <__aeabi_dsub>
    39fc:	ecbd 8b04 	vpop	{d8-d9}
    3a00:	ec41 0b10 	vmov	d0, r0, r1
    3a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a08:	ed9f 7b15 	vldr	d7, [pc, #84]	; 3a60 <__kernel_cos+0x258>
    3a0c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 3a80 <__kernel_cos+0x278>
    3a10:	eeb0 9a47 	vmov.f32	s18, s14
    3a14:	eef0 9a67 	vmov.f32	s19, s15
    3a18:	f04f 0800 	mov.w	r8, #0
    3a1c:	e7c2      	b.n	39a4 <__kernel_cos+0x19c>
    3a1e:	ecbd 8b04 	vpop	{d8-d9}
    3a22:	ed9f 0b11 	vldr	d0, [pc, #68]	; 3a68 <__kernel_cos+0x260>
    3a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a2a:	bf00      	nop
    3a2c:	f3af 8000 	nop.w
    3a30:	be8838d4 	.word	0xbe8838d4
    3a34:	bda8fae9 	.word	0xbda8fae9
    3a38:	bdb4b1c4 	.word	0xbdb4b1c4
    3a3c:	3e21ee9e 	.word	0x3e21ee9e
    3a40:	809c52ad 	.word	0x809c52ad
    3a44:	3e927e4f 	.word	0x3e927e4f
    3a48:	19cb1590 	.word	0x19cb1590
    3a4c:	3efa01a0 	.word	0x3efa01a0
    3a50:	16c15177 	.word	0x16c15177
    3a54:	3f56c16c 	.word	0x3f56c16c
    3a58:	5555554c 	.word	0x5555554c
    3a5c:	3fa55555 	.word	0x3fa55555
    3a60:	00000000 	.word	0x00000000
    3a64:	3fe70000 	.word	0x3fe70000
    3a68:	00000000 	.word	0x00000000
    3a6c:	3ff00000 	.word	0x3ff00000
    3a70:	3fe00000 	.word	0x3fe00000
    3a74:	3ff00000 	.word	0x3ff00000
    3a78:	3fd33332 	.word	0x3fd33332
    3a7c:	3fe90000 	.word	0x3fe90000
    3a80:	3fd20000 	.word	0x3fd20000
    3a84:	00000000 	.word	0x00000000

00003a88 <__kernel_rem_pio2>:
    3a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a8c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
    3a90:	4cbb      	ldr	r4, [pc, #748]	; (3d80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e8>)
    3a92:	9da2      	ldr	r5, [sp, #648]	; 0x288
    3a94:	9308      	str	r3, [sp, #32]
    3a96:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
    3a9a:	9405      	str	r4, [sp, #20]
    3a9c:	3b01      	subs	r3, #1
    3a9e:	f112 0f14 	cmn.w	r2, #20
    3aa2:	9004      	str	r0, [sp, #16]
    3aa4:	910b      	str	r1, [sp, #44]	; 0x2c
    3aa6:	9303      	str	r3, [sp, #12]
    3aa8:	f2c0 8326 	blt.w	40f8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x660>
    3aac:	49b5      	ldr	r1, [pc, #724]	; (3d84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ec>)
    3aae:	1ed3      	subs	r3, r2, #3
    3ab0:	fb81 0103 	smull	r0, r1, r1, r3
    3ab4:	17db      	asrs	r3, r3, #31
    3ab6:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    3aba:	9307      	str	r3, [sp, #28]
    3abc:	3301      	adds	r3, #1
    3abe:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    3ac2:	00db      	lsls	r3, r3, #3
    3ac4:	18d3      	adds	r3, r2, r3
    3ac6:	9306      	str	r3, [sp, #24]
    3ac8:	9a07      	ldr	r2, [sp, #28]
    3aca:	9b03      	ldr	r3, [sp, #12]
    3acc:	1ad4      	subs	r4, r2, r3
    3ace:	9a05      	ldr	r2, [sp, #20]
    3ad0:	18d6      	adds	r6, r2, r3
    3ad2:	d41a      	bmi.n	3b0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x72>
    3ad4:	3601      	adds	r6, #1
    3ad6:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
    3ad8:	f04f 0800 	mov.w	r8, #0
    3adc:	f04f 0900 	mov.w	r9, #0
    3ae0:	4426      	add	r6, r4
    3ae2:	ad20      	add	r5, sp, #128	; 0x80
    3ae4:	e008      	b.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3ae6:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
    3aea:	f7fc fcab 	bl	444 <__aeabi_i2d>
    3aee:	3401      	adds	r4, #1
    3af0:	42b4      	cmp	r4, r6
    3af2:	e8e5 0102 	strd	r0, r1, [r5], #8
    3af6:	d008      	beq.n	3b0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x72>
    3af8:	2c00      	cmp	r4, #0
    3afa:	daf4      	bge.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3afc:	3401      	adds	r4, #1
    3afe:	4640      	mov	r0, r8
    3b00:	4649      	mov	r1, r9
    3b02:	42b4      	cmp	r4, r6
    3b04:	e8e5 0102 	strd	r0, r1, [r5], #8
    3b08:	d1f6      	bne.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3b0a:	9b05      	ldr	r3, [sp, #20]
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	f2c0 83c8 	blt.w	42a2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80a>
    3b12:	9b08      	ldr	r3, [sp, #32]
    3b14:	f8dd 900c 	ldr.w	r9, [sp, #12]
    3b18:	00da      	lsls	r2, r3, #3
    3b1a:	9202      	str	r2, [sp, #8]
    3b1c:	9a05      	ldr	r2, [sp, #20]
    3b1e:	441a      	add	r2, r3
    3b20:	9201      	str	r2, [sp, #4]
    3b22:	9a04      	ldr	r2, [sp, #16]
    3b24:	a920      	add	r1, sp, #128	; 0x80
    3b26:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
    3b2a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
    3b2e:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
    3b32:	9b03      	ldr	r3, [sp, #12]
    3b34:	2b00      	cmp	r3, #0
    3b36:	f04f 0400 	mov.w	r4, #0
    3b3a:	f04f 0500 	mov.w	r5, #0
    3b3e:	db11      	blt.n	3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>
    3b40:	9e04      	ldr	r6, [sp, #16]
    3b42:	4657      	mov	r7, sl
    3b44:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    3b48:	e8f6 0102 	ldrd	r0, r1, [r6], #8
    3b4c:	f7fc fce4 	bl	518 <__aeabi_dmul>
    3b50:	4602      	mov	r2, r0
    3b52:	460b      	mov	r3, r1
    3b54:	4620      	mov	r0, r4
    3b56:	4629      	mov	r1, r5
    3b58:	f7fc fb28 	bl	1ac <__adddf3>
    3b5c:	4546      	cmp	r6, r8
    3b5e:	4604      	mov	r4, r0
    3b60:	460d      	mov	r5, r1
    3b62:	d1ef      	bne.n	3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
    3b64:	9b01      	ldr	r3, [sp, #4]
    3b66:	f109 0901 	add.w	r9, r9, #1
    3b6a:	4599      	cmp	r9, r3
    3b6c:	e8eb 4502 	strd	r4, r5, [fp], #8
    3b70:	f10a 0a08 	add.w	sl, sl, #8
    3b74:	d1dd      	bne.n	3b32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9a>
    3b76:	9a05      	ldr	r2, [sp, #20]
    3b78:	9804      	ldr	r0, [sp, #16]
    3b7a:	a90c      	add	r1, sp, #48	; 0x30
    3b7c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    3b80:	9902      	ldr	r1, [sp, #8]
    3b82:	4401      	add	r1, r0
    3b84:	3b08      	subs	r3, #8
    3b86:	468b      	mov	fp, r1
    3b88:	a90b      	add	r1, sp, #44	; 0x2c
    3b8a:	9309      	str	r3, [sp, #36]	; 0x24
    3b8c:	4613      	mov	r3, r2
    3b8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3b92:	920a      	str	r2, [sp, #40]	; 0x28
    3b94:	9301      	str	r3, [sp, #4]
    3b96:	9a01      	ldr	r2, [sp, #4]
    3b98:	a998      	add	r1, sp, #608	; 0x260
    3b9a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    3b9e:	2a00      	cmp	r2, #0
    3ba0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
    3ba4:	dd2a      	ble.n	3bfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x164>
    3ba6:	f50d 79e0 	add.w	r9, sp, #448	; 0x1c0
    3baa:	eb09 08c2 	add.w	r8, r9, r2, lsl #3
    3bae:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    3bb2:	4b75      	ldr	r3, [pc, #468]	; (3d88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2f0>)
    3bb4:	2200      	movs	r2, #0
    3bb6:	4620      	mov	r0, r4
    3bb8:	4629      	mov	r1, r5
    3bba:	f7fc fcad 	bl	518 <__aeabi_dmul>
    3bbe:	f7fc ff45 	bl	a4c <__aeabi_d2iz>
    3bc2:	f7fc fc3f 	bl	444 <__aeabi_i2d>
    3bc6:	4b71      	ldr	r3, [pc, #452]	; (3d8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2f4>)
    3bc8:	2200      	movs	r2, #0
    3bca:	4606      	mov	r6, r0
    3bcc:	460f      	mov	r7, r1
    3bce:	f7fc fca3 	bl	518 <__aeabi_dmul>
    3bd2:	4602      	mov	r2, r0
    3bd4:	460b      	mov	r3, r1
    3bd6:	4620      	mov	r0, r4
    3bd8:	4629      	mov	r1, r5
    3bda:	f7fc fae5 	bl	1a8 <__aeabi_dsub>
    3bde:	f7fc ff35 	bl	a4c <__aeabi_d2iz>
    3be2:	4604      	mov	r4, r0
    3be4:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
    3be8:	f84a 4b04 	str.w	r4, [sl], #4
    3bec:	4630      	mov	r0, r6
    3bee:	4639      	mov	r1, r7
    3bf0:	f7fc fadc 	bl	1ac <__adddf3>
    3bf4:	45c8      	cmp	r8, r9
    3bf6:	4604      	mov	r4, r0
    3bf8:	460d      	mov	r5, r1
    3bfa:	d1da      	bne.n	3bb2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11a>
    3bfc:	f8dd 9018 	ldr.w	r9, [sp, #24]
    3c00:	ec45 4b10 	vmov	d0, r4, r5
    3c04:	4648      	mov	r0, r9
    3c06:	f000 fc2f 	bl	4468 <scalbn>
    3c0a:	ec55 4b10 	vmov	r4, r5, d0
    3c0e:	2200      	movs	r2, #0
    3c10:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    3c14:	ee10 0a10 	vmov	r0, s0
    3c18:	4629      	mov	r1, r5
    3c1a:	f7fc fc7d 	bl	518 <__aeabi_dmul>
    3c1e:	ec41 0b10 	vmov	d0, r0, r1
    3c22:	f7fe fb49 	bl	22b8 <floor>
    3c26:	4b5a      	ldr	r3, [pc, #360]	; (3d90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2f8>)
    3c28:	ec51 0b10 	vmov	r0, r1, d0
    3c2c:	2200      	movs	r2, #0
    3c2e:	f7fc fc73 	bl	518 <__aeabi_dmul>
    3c32:	4602      	mov	r2, r0
    3c34:	460b      	mov	r3, r1
    3c36:	4620      	mov	r0, r4
    3c38:	4629      	mov	r1, r5
    3c3a:	f7fc fab5 	bl	1a8 <__aeabi_dsub>
    3c3e:	460d      	mov	r5, r1
    3c40:	4604      	mov	r4, r0
    3c42:	f7fc ff03 	bl	a4c <__aeabi_d2iz>
    3c46:	4680      	mov	r8, r0
    3c48:	f7fc fbfc 	bl	444 <__aeabi_i2d>
    3c4c:	460b      	mov	r3, r1
    3c4e:	4602      	mov	r2, r0
    3c50:	4629      	mov	r1, r5
    3c52:	4620      	mov	r0, r4
    3c54:	f7fc faa8 	bl	1a8 <__aeabi_dsub>
    3c58:	464b      	mov	r3, r9
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	4606      	mov	r6, r0
    3c5e:	460f      	mov	r7, r1
    3c60:	f340 8098 	ble.w	3d94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fc>
    3c64:	9a01      	ldr	r2, [sp, #4]
    3c66:	a90c      	add	r1, sp, #48	; 0x30
    3c68:	3a01      	subs	r2, #1
    3c6a:	f1c9 0318 	rsb	r3, r9, #24
    3c6e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    3c72:	fa45 f103 	asr.w	r1, r5, r3
    3c76:	fa01 f303 	lsl.w	r3, r1, r3
    3c7a:	1aeb      	subs	r3, r5, r3
    3c7c:	f1c9 0517 	rsb	r5, r9, #23
    3c80:	a80c      	add	r0, sp, #48	; 0x30
    3c82:	fa43 f505 	asr.w	r5, r3, r5
    3c86:	2d00      	cmp	r5, #0
    3c88:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    3c8c:	4488      	add	r8, r1
    3c8e:	f300 808b 	bgt.w	3da8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x310>
    3c92:	2200      	movs	r2, #0
    3c94:	2300      	movs	r3, #0
    3c96:	4630      	mov	r0, r6
    3c98:	4639      	mov	r1, r7
    3c9a:	f7fc fea5 	bl	9e8 <__aeabi_dcmpeq>
    3c9e:	2800      	cmp	r0, #0
    3ca0:	f000 8256 	beq.w	4150 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6b8>
    3ca4:	9b01      	ldr	r3, [sp, #4]
    3ca6:	9a05      	ldr	r2, [sp, #20]
    3ca8:	f103 3aff 	add.w	sl, r3, #4294967295
    3cac:	4552      	cmp	r2, sl
    3cae:	dc10      	bgt.n	3cd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x23a>
    3cb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3cb4:	aa0c      	add	r2, sp, #48	; 0x30
    3cb6:	3b01      	subs	r3, #1
    3cb8:	980a      	ldr	r0, [sp, #40]	; 0x28
    3cba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3cbe:	2200      	movs	r2, #0
    3cc0:	f853 1904 	ldr.w	r1, [r3], #-4
    3cc4:	4283      	cmp	r3, r0
    3cc6:	ea42 0201 	orr.w	r2, r2, r1
    3cca:	d1f9      	bne.n	3cc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x228>
    3ccc:	2a00      	cmp	r2, #0
    3cce:	f040 80dc 	bne.w	3e8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f2>
    3cd2:	9b05      	ldr	r3, [sp, #20]
    3cd4:	aa0c      	add	r2, sp, #48	; 0x30
    3cd6:	3b01      	subs	r3, #1
    3cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	f040 80cf 	bne.w	3e80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e8>
    3ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3ce4:	2301      	movs	r3, #1
    3ce6:	f852 1904 	ldr.w	r1, [r2], #-4
    3cea:	3301      	adds	r3, #1
    3cec:	2900      	cmp	r1, #0
    3cee:	d0fa      	beq.n	3ce6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24e>
    3cf0:	9901      	ldr	r1, [sp, #4]
    3cf2:	1c4a      	adds	r2, r1, #1
    3cf4:	18cb      	adds	r3, r1, r3
    3cf6:	9302      	str	r3, [sp, #8]
    3cf8:	4691      	mov	r9, r2
    3cfa:	9b07      	ldr	r3, [sp, #28]
    3cfc:	9908      	ldr	r1, [sp, #32]
    3cfe:	eb02 0a03 	add.w	sl, r2, r3
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	440b      	add	r3, r1
    3d06:	4698      	mov	r8, r3
    3d08:	ab20      	add	r3, sp, #128	; 0x80
    3d0a:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
    3d0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
    3d12:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    3d14:	f10a 3aff 	add.w	sl, sl, #4294967295
    3d18:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    3d1c:	ab70      	add	r3, sp, #448	; 0x1c0
    3d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3d22:	9301      	str	r3, [sp, #4]
    3d24:	f85a 0f04 	ldr.w	r0, [sl, #4]!
    3d28:	f7fc fb8c 	bl	444 <__aeabi_i2d>
    3d2c:	460b      	mov	r3, r1
    3d2e:	9903      	ldr	r1, [sp, #12]
    3d30:	4602      	mov	r2, r0
    3d32:	2900      	cmp	r1, #0
    3d34:	e9c8 2300 	strd	r2, r3, [r8]
    3d38:	4647      	mov	r7, r8
    3d3a:	f04f 0400 	mov.w	r4, #0
    3d3e:	f108 0808 	add.w	r8, r8, #8
    3d42:	f04f 0500 	mov.w	r5, #0
    3d46:	db11      	blt.n	3d6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2d4>
    3d48:	9e04      	ldr	r6, [sp, #16]
    3d4a:	e001      	b.n	3d50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b8>
    3d4c:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    3d50:	e8f6 0102 	ldrd	r0, r1, [r6], #8
    3d54:	f7fc fbe0 	bl	518 <__aeabi_dmul>
    3d58:	4602      	mov	r2, r0
    3d5a:	460b      	mov	r3, r1
    3d5c:	4620      	mov	r0, r4
    3d5e:	4629      	mov	r1, r5
    3d60:	f7fc fa24 	bl	1ac <__adddf3>
    3d64:	455e      	cmp	r6, fp
    3d66:	4604      	mov	r4, r0
    3d68:	460d      	mov	r5, r1
    3d6a:	d1ef      	bne.n	3d4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b4>
    3d6c:	9b01      	ldr	r3, [sp, #4]
    3d6e:	e8e3 4502 	strd	r4, r5, [r3], #8
    3d72:	9301      	str	r3, [sp, #4]
    3d74:	9b02      	ldr	r3, [sp, #8]
    3d76:	f109 0901 	add.w	r9, r9, #1
    3d7a:	4599      	cmp	r9, r3
    3d7c:	ddd2      	ble.n	3d24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28c>
    3d7e:	e709      	b.n	3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3d80:	000403d4 	.word	0x000403d4
    3d84:	2aaaaaab 	.word	0x2aaaaaab
    3d88:	3e700000 	.word	0x3e700000
    3d8c:	41700000 	.word	0x41700000
    3d90:	40200000 	.word	0x40200000
    3d94:	d16b      	bne.n	3e6e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d6>
    3d96:	9b01      	ldr	r3, [sp, #4]
    3d98:	aa0c      	add	r2, sp, #48	; 0x30
    3d9a:	3b01      	subs	r3, #1
    3d9c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3da0:	15ed      	asrs	r5, r5, #23
    3da2:	2d00      	cmp	r5, #0
    3da4:	f77f af75 	ble.w	3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3da8:	9b01      	ldr	r3, [sp, #4]
    3daa:	2b00      	cmp	r3, #0
    3dac:	f108 0801 	add.w	r8, r8, #1
    3db0:	f340 81cc 	ble.w	414c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6b4>
    3db4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    3db6:	2c00      	cmp	r4, #0
    3db8:	d151      	bne.n	3e5e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c6>
    3dba:	9b01      	ldr	r3, [sp, #4]
    3dbc:	2b01      	cmp	r3, #1
    3dbe:	d020      	beq.n	3e02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36a>
    3dc0:	ab0c      	add	r3, sp, #48	; 0x30
    3dc2:	2201      	movs	r2, #1
    3dc4:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3dc8:	2c00      	cmp	r4, #0
    3dca:	d04b      	beq.n	3e64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3cc>
    3dcc:	1c53      	adds	r3, r2, #1
    3dce:	a90c      	add	r1, sp, #48	; 0x30
    3dd0:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
    3dd4:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    3dd8:	9901      	ldr	r1, [sp, #4]
    3dda:	4299      	cmp	r1, r3
    3ddc:	dd10      	ble.n	3e00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x368>
    3dde:	aa0c      	add	r2, sp, #48	; 0x30
    3de0:	a80c      	add	r0, sp, #48	; 0x30
    3de2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3de6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3dea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    3dee:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    3df2:	e000      	b.n	3df6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35e>
    3df4:	681a      	ldr	r2, [r3, #0]
    3df6:	1a8a      	subs	r2, r1, r2
    3df8:	f843 2b04 	str.w	r2, [r3], #4
    3dfc:	4283      	cmp	r3, r0
    3dfe:	d1f9      	bne.n	3df4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35c>
    3e00:	2401      	movs	r4, #1
    3e02:	9b06      	ldr	r3, [sp, #24]
    3e04:	2b00      	cmp	r3, #0
    3e06:	dd0e      	ble.n	3e26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38e>
    3e08:	2b01      	cmp	r3, #1
    3e0a:	f000 816a 	beq.w	40e2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64a>
    3e0e:	2b02      	cmp	r3, #2
    3e10:	d109      	bne.n	3e26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38e>
    3e12:	9b01      	ldr	r3, [sp, #4]
    3e14:	1e5a      	subs	r2, r3, #1
    3e16:	ab0c      	add	r3, sp, #48	; 0x30
    3e18:	a90c      	add	r1, sp, #48	; 0x30
    3e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3e1e:	f3c3 0315 	ubfx	r3, r3, #0, #22
    3e22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    3e26:	2d02      	cmp	r5, #2
    3e28:	f47f af33 	bne.w	3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3e2c:	4632      	mov	r2, r6
    3e2e:	463b      	mov	r3, r7
    3e30:	49b9      	ldr	r1, [pc, #740]	; (4118 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x680>)
    3e32:	2000      	movs	r0, #0
    3e34:	f7fc f9b8 	bl	1a8 <__aeabi_dsub>
    3e38:	4606      	mov	r6, r0
    3e3a:	460f      	mov	r7, r1
    3e3c:	2c00      	cmp	r4, #0
    3e3e:	f43f af28 	beq.w	3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3e42:	9806      	ldr	r0, [sp, #24]
    3e44:	ed9f 0bb0 	vldr	d0, [pc, #704]	; 4108 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x670>
    3e48:	f000 fb0e 	bl	4468 <scalbn>
    3e4c:	4630      	mov	r0, r6
    3e4e:	4639      	mov	r1, r7
    3e50:	ec53 2b10 	vmov	r2, r3, d0
    3e54:	f7fc f9a8 	bl	1a8 <__aeabi_dsub>
    3e58:	4606      	mov	r6, r0
    3e5a:	460f      	mov	r7, r1
    3e5c:	e719      	b.n	3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3e5e:	2301      	movs	r3, #1
    3e60:	2200      	movs	r2, #0
    3e62:	e7b4      	b.n	3dce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x336>
    3e64:	9901      	ldr	r1, [sp, #4]
    3e66:	3201      	adds	r2, #1
    3e68:	428a      	cmp	r2, r1
    3e6a:	d1ab      	bne.n	3dc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32c>
    3e6c:	e7c9      	b.n	3e02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36a>
    3e6e:	4bab      	ldr	r3, [pc, #684]	; (411c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x684>)
    3e70:	2200      	movs	r2, #0
    3e72:	f7fc fdd7 	bl	a24 <__aeabi_dcmpge>
    3e76:	2800      	cmp	r0, #0
    3e78:	f040 8156 	bne.w	4128 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x690>
    3e7c:	4605      	mov	r5, r0
    3e7e:	e708      	b.n	3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3e80:	9b01      	ldr	r3, [sp, #4]
    3e82:	1c5a      	adds	r2, r3, #1
    3e84:	4691      	mov	r9, r2
    3e86:	9202      	str	r2, [sp, #8]
    3e88:	e737      	b.n	3cfa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x262>
    3e8a:	ab0c      	add	r3, sp, #48	; 0x30
    3e8c:	9a06      	ldr	r2, [sp, #24]
    3e8e:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    3e92:	f8cd 801c 	str.w	r8, [sp, #28]
    3e96:	3a18      	subs	r2, #24
    3e98:	9503      	str	r5, [sp, #12]
    3e9a:	9206      	str	r2, [sp, #24]
    3e9c:	b973      	cbnz	r3, 3ebc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x424>
    3e9e:	9b01      	ldr	r3, [sp, #4]
    3ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ea4:	3b02      	subs	r3, #2
    3ea6:	a90c      	add	r1, sp, #48	; 0x30
    3ea8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    3eac:	f853 1904 	ldr.w	r1, [r3], #-4
    3eb0:	f10a 3aff 	add.w	sl, sl, #4294967295
    3eb4:	3a18      	subs	r2, #24
    3eb6:	2900      	cmp	r1, #0
    3eb8:	d0f8      	beq.n	3eac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x414>
    3eba:	9206      	str	r2, [sp, #24]
    3ebc:	ed9f 0b92 	vldr	d0, [pc, #584]	; 4108 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x670>
    3ec0:	9806      	ldr	r0, [sp, #24]
    3ec2:	f000 fad1 	bl	4468 <scalbn>
    3ec6:	f1ba 0f00 	cmp.w	sl, #0
    3eca:	ec55 4b10 	vmov	r4, r5, d0
    3ece:	f2c0 81de 	blt.w	428e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7f6>
    3ed2:	ab70      	add	r3, sp, #448	; 0x1c0
    3ed4:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
    3ed8:	aa0c      	add	r2, sp, #48	; 0x30
    3eda:	f10a 0301 	add.w	r3, sl, #1
    3ede:	9306      	str	r3, [sp, #24]
    3ee0:	eb02 0883 	add.w	r8, r2, r3, lsl #2
    3ee4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
    3ee8:	f10b 0908 	add.w	r9, fp, #8
    3eec:	9304      	str	r3, [sp, #16]
    3eee:	f858 0d04 	ldr.w	r0, [r8, #-4]!
    3ef2:	f7fc faa7 	bl	444 <__aeabi_i2d>
    3ef6:	4622      	mov	r2, r4
    3ef8:	462b      	mov	r3, r5
    3efa:	f7fc fb0d 	bl	518 <__aeabi_dmul>
    3efe:	4606      	mov	r6, r0
    3f00:	460f      	mov	r7, r1
    3f02:	4b87      	ldr	r3, [pc, #540]	; (4120 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x688>)
    3f04:	4620      	mov	r0, r4
    3f06:	4629      	mov	r1, r5
    3f08:	e969 6702 	strd	r6, r7, [r9, #-8]!
    3f0c:	2200      	movs	r2, #0
    3f0e:	f7fc fb03 	bl	518 <__aeabi_dmul>
    3f12:	ab0c      	add	r3, sp, #48	; 0x30
    3f14:	4598      	cmp	r8, r3
    3f16:	4604      	mov	r4, r0
    3f18:	460d      	mov	r5, r1
    3f1a:	d1e8      	bne.n	3eee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x456>
    3f1c:	ab48      	add	r3, sp, #288	; 0x120
    3f1e:	e9cd 3a01 	strd	r3, sl, [sp, #4]
    3f22:	f8dd a014 	ldr.w	sl, [sp, #20]
    3f26:	f1ba 0f00 	cmp.w	sl, #0
    3f2a:	f04f 0900 	mov.w	r9, #0
    3f2e:	db2c      	blt.n	3f8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4f2>
    3f30:	a377      	add	r3, pc, #476	; (adr r3, 4110 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x678>)
    3f32:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f36:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 4124 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68c>
    3f3a:	465f      	mov	r7, fp
    3f3c:	2400      	movs	r4, #0
    3f3e:	2500      	movs	r5, #0
    3f40:	2600      	movs	r6, #0
    3f42:	e003      	b.n	3f4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b4>
    3f44:	45b1      	cmp	r9, r6
    3f46:	db10      	blt.n	3f6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d2>
    3f48:	e8f8 2302 	ldrd	r2, r3, [r8], #8
    3f4c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
    3f50:	f7fc fae2 	bl	518 <__aeabi_dmul>
    3f54:	4602      	mov	r2, r0
    3f56:	460b      	mov	r3, r1
    3f58:	4620      	mov	r0, r4
    3f5a:	4629      	mov	r1, r5
    3f5c:	f7fc f926 	bl	1ac <__adddf3>
    3f60:	3601      	adds	r6, #1
    3f62:	45b2      	cmp	sl, r6
    3f64:	4604      	mov	r4, r0
    3f66:	460d      	mov	r5, r1
    3f68:	daec      	bge.n	3f44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ac>
    3f6a:	9b01      	ldr	r3, [sp, #4]
    3f6c:	9a02      	ldr	r2, [sp, #8]
    3f6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    3f72:	454a      	cmp	r2, r9
    3f74:	e9c3 4500 	strd	r4, r5, [r3]
    3f78:	f1ab 0b08 	sub.w	fp, fp, #8
    3f7c:	f109 0301 	add.w	r3, r9, #1
    3f80:	d006      	beq.n	3f90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4f8>
    3f82:	f1ba 0f00 	cmp.w	sl, #0
    3f86:	4699      	mov	r9, r3
    3f88:	dad2      	bge.n	3f30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x498>
    3f8a:	2400      	movs	r4, #0
    3f8c:	2500      	movs	r5, #0
    3f8e:	e7ec      	b.n	3f6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d2>
    3f90:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    3f92:	f8dd a008 	ldr.w	sl, [sp, #8]
    3f96:	2b02      	cmp	r3, #2
    3f98:	dc1e      	bgt.n	3fd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x540>
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	f300 810f 	bgt.w	41be <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x726>
    3fa0:	d113      	bne.n	3fca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x532>
    3fa2:	9c04      	ldr	r4, [sp, #16]
    3fa4:	9d01      	ldr	r5, [sp, #4]
    3fa6:	3408      	adds	r4, #8
    3fa8:	2000      	movs	r0, #0
    3faa:	2100      	movs	r1, #0
    3fac:	442c      	add	r4, r5
    3fae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    3fb2:	f7fc f8fb 	bl	1ac <__adddf3>
    3fb6:	42a5      	cmp	r5, r4
    3fb8:	d1f9      	bne.n	3fae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x516>
    3fba:	9b03      	ldr	r3, [sp, #12]
    3fbc:	b113      	cbz	r3, 3fc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52c>
    3fbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    3fc2:	4619      	mov	r1, r3
    3fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3fc6:	e9c3 0100 	strd	r0, r1, [r3]
    3fca:	9b07      	ldr	r3, [sp, #28]
    3fcc:	f003 0007 	and.w	r0, r3, #7
    3fd0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    3fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fd8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    3fda:	2b03      	cmp	r3, #3
    3fdc:	d1f5      	bne.n	3fca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x532>
    3fde:	f1ba 0f00 	cmp.w	sl, #0
    3fe2:	f000 8170 	beq.w	42c6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82e>
    3fe6:	9a01      	ldr	r2, [sp, #4]
    3fe8:	9b04      	ldr	r3, [sp, #16]
    3fea:	18d3      	adds	r3, r2, r3
    3fec:	e9d3 4500 	ldrd	r4, r5, [r3]
    3ff0:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
    3ff4:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
    3ff8:	4620      	mov	r0, r4
    3ffa:	4629      	mov	r1, r5
    3ffc:	4632      	mov	r2, r6
    3ffe:	463b      	mov	r3, r7
    4000:	f7fc f8d4 	bl	1ac <__adddf3>
    4004:	46a0      	mov	r8, r4
    4006:	46a9      	mov	r9, r5
    4008:	4604      	mov	r4, r0
    400a:	460d      	mov	r5, r1
    400c:	4622      	mov	r2, r4
    400e:	462b      	mov	r3, r5
    4010:	4630      	mov	r0, r6
    4012:	4639      	mov	r1, r7
    4014:	f7fc f8c8 	bl	1a8 <__aeabi_dsub>
    4018:	464b      	mov	r3, r9
    401a:	4642      	mov	r2, r8
    401c:	f7fc f8c6 	bl	1ac <__adddf3>
    4020:	9b01      	ldr	r3, [sp, #4]
    4022:	455b      	cmp	r3, fp
    4024:	e9cb 4500 	strd	r4, r5, [fp]
    4028:	e9cb 0102 	strd	r0, r1, [fp, #8]
    402c:	d1e2      	bne.n	3ff4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x55c>
    402e:	f1ba 0f01 	cmp.w	sl, #1
    4032:	f340 8148 	ble.w	42c6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82e>
    4036:	9a01      	ldr	r2, [sp, #4]
    4038:	9b04      	ldr	r3, [sp, #16]
    403a:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
    403e:	f10a 3aff 	add.w	sl, sl, #4294967295
    4042:	4413      	add	r3, r2
    4044:	ea4f 01ca 	mov.w	r1, sl, lsl #3
    4048:	e9d3 4500 	ldrd	r4, r5, [r3]
    404c:	f101 0a08 	add.w	sl, r1, #8
    4050:	9102      	str	r1, [sp, #8]
    4052:	4492      	add	sl, r2
    4054:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
    4058:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
    405c:	4620      	mov	r0, r4
    405e:	4629      	mov	r1, r5
    4060:	4632      	mov	r2, r6
    4062:	463b      	mov	r3, r7
    4064:	f7fc f8a2 	bl	1ac <__adddf3>
    4068:	46a0      	mov	r8, r4
    406a:	46a9      	mov	r9, r5
    406c:	4604      	mov	r4, r0
    406e:	460d      	mov	r5, r1
    4070:	4622      	mov	r2, r4
    4072:	462b      	mov	r3, r5
    4074:	4630      	mov	r0, r6
    4076:	4639      	mov	r1, r7
    4078:	f7fc f896 	bl	1a8 <__aeabi_dsub>
    407c:	4642      	mov	r2, r8
    407e:	464b      	mov	r3, r9
    4080:	f7fc f894 	bl	1ac <__adddf3>
    4084:	45d3      	cmp	fp, sl
    4086:	e9ca 4500 	strd	r4, r5, [sl]
    408a:	e9ca 0102 	strd	r0, r1, [sl, #8]
    408e:	d1e3      	bne.n	4058 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c0>
    4090:	9c02      	ldr	r4, [sp, #8]
    4092:	9b01      	ldr	r3, [sp, #4]
    4094:	2600      	movs	r6, #0
    4096:	2700      	movs	r7, #0
    4098:	3410      	adds	r4, #16
    409a:	441c      	add	r4, r3
    409c:	f103 0510 	add.w	r5, r3, #16
    40a0:	4630      	mov	r0, r6
    40a2:	4639      	mov	r1, r7
    40a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    40a8:	f7fc f880 	bl	1ac <__adddf3>
    40ac:	42a5      	cmp	r5, r4
    40ae:	d1f9      	bne.n	40a4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60c>
    40b0:	4606      	mov	r6, r0
    40b2:	460f      	mov	r7, r1
    40b4:	9b03      	ldr	r3, [sp, #12]
    40b6:	2b00      	cmp	r3, #0
    40b8:	f040 80bf 	bne.w	423a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7a2>
    40bc:	9a01      	ldr	r2, [sp, #4]
    40be:	990b      	ldr	r1, [sp, #44]	; 0x2c
    40c0:	e9d2 4500 	ldrd	r4, r5, [r2]
    40c4:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
    40c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    40cc:	9b07      	ldr	r3, [sp, #28]
    40ce:	f003 0007 	and.w	r0, r3, #7
    40d2:	e9c1 6704 	strd	r6, r7, [r1, #16]
    40d6:	e9c1 4500 	strd	r4, r5, [r1]
    40da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    40de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40e2:	9b01      	ldr	r3, [sp, #4]
    40e4:	1e5a      	subs	r2, r3, #1
    40e6:	ab0c      	add	r3, sp, #48	; 0x30
    40e8:	a90c      	add	r1, sp, #48	; 0x30
    40ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    40ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
    40f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    40f6:	e696      	b.n	3e26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38e>
    40f8:	2100      	movs	r1, #0
    40fa:	f06f 0317 	mvn.w	r3, #23
    40fe:	9107      	str	r1, [sp, #28]
    4100:	e4e0      	b.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
    4102:	bf00      	nop
    4104:	f3af 8000 	nop.w
    4108:	00000000 	.word	0x00000000
    410c:	3ff00000 	.word	0x3ff00000
    4110:	40000000 	.word	0x40000000
    4114:	3ff921fb 	.word	0x3ff921fb
    4118:	3ff00000 	.word	0x3ff00000
    411c:	3fe00000 	.word	0x3fe00000
    4120:	3e700000 	.word	0x3e700000
    4124:	00017a78 	.word	0x00017a78
    4128:	9b01      	ldr	r3, [sp, #4]
    412a:	2b00      	cmp	r3, #0
    412c:	f108 0801 	add.w	r8, r8, #1
    4130:	bfc8      	it	gt
    4132:	2502      	movgt	r5, #2
    4134:	f73f ae3e 	bgt.w	3db4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x31c>
    4138:	4632      	mov	r2, r6
    413a:	463b      	mov	r3, r7
    413c:	4963      	ldr	r1, [pc, #396]	; (42cc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x834>)
    413e:	2000      	movs	r0, #0
    4140:	f7fc f832 	bl	1a8 <__aeabi_dsub>
    4144:	2502      	movs	r5, #2
    4146:	4606      	mov	r6, r0
    4148:	460f      	mov	r7, r1
    414a:	e5a2      	b.n	3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    414c:	2400      	movs	r4, #0
    414e:	e658      	b.n	3e02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36a>
    4150:	9b06      	ldr	r3, [sp, #24]
    4152:	9503      	str	r5, [sp, #12]
    4154:	4258      	negs	r0, r3
    4156:	ec47 6b10 	vmov	d0, r6, r7
    415a:	f8cd 801c 	str.w	r8, [sp, #28]
    415e:	f000 f983 	bl	4468 <scalbn>
    4162:	ec55 4b10 	vmov	r4, r5, d0
    4166:	4b5a      	ldr	r3, [pc, #360]	; (42d0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x838>)
    4168:	ee10 0a10 	vmov	r0, s0
    416c:	2200      	movs	r2, #0
    416e:	4629      	mov	r1, r5
    4170:	f7fc fc58 	bl	a24 <__aeabi_dcmpge>
    4174:	2800      	cmp	r0, #0
    4176:	d056      	beq.n	4226 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78e>
    4178:	4b56      	ldr	r3, [pc, #344]	; (42d4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x83c>)
    417a:	2200      	movs	r2, #0
    417c:	4620      	mov	r0, r4
    417e:	4629      	mov	r1, r5
    4180:	f7fc f9ca 	bl	518 <__aeabi_dmul>
    4184:	f7fc fc62 	bl	a4c <__aeabi_d2iz>
    4188:	4606      	mov	r6, r0
    418a:	f7fc f95b 	bl	444 <__aeabi_i2d>
    418e:	4b50      	ldr	r3, [pc, #320]	; (42d0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x838>)
    4190:	2200      	movs	r2, #0
    4192:	f7fc f9c1 	bl	518 <__aeabi_dmul>
    4196:	460b      	mov	r3, r1
    4198:	4602      	mov	r2, r0
    419a:	4629      	mov	r1, r5
    419c:	4620      	mov	r0, r4
    419e:	f7fc f803 	bl	1a8 <__aeabi_dsub>
    41a2:	f7fc fc53 	bl	a4c <__aeabi_d2iz>
    41a6:	9b06      	ldr	r3, [sp, #24]
    41a8:	9c01      	ldr	r4, [sp, #4]
    41aa:	3318      	adds	r3, #24
    41ac:	f104 0a01 	add.w	sl, r4, #1
    41b0:	9306      	str	r3, [sp, #24]
    41b2:	ab0c      	add	r3, sp, #48	; 0x30
    41b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    41b8:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
    41bc:	e67e      	b.n	3ebc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x424>
    41be:	9d01      	ldr	r5, [sp, #4]
    41c0:	9a06      	ldr	r2, [sp, #24]
    41c2:	2000      	movs	r0, #0
    41c4:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
    41c8:	2100      	movs	r1, #0
    41ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    41ce:	f7fb ffed 	bl	1ac <__adddf3>
    41d2:	42a5      	cmp	r5, r4
    41d4:	d1f9      	bne.n	41ca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x732>
    41d6:	9b03      	ldr	r3, [sp, #12]
    41d8:	2b00      	cmp	r3, #0
    41da:	d148      	bne.n	426e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7d6>
    41dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    41de:	e9c3 0100 	strd	r0, r1, [r3]
    41e2:	460b      	mov	r3, r1
    41e4:	9901      	ldr	r1, [sp, #4]
    41e6:	4602      	mov	r2, r0
    41e8:	e9d1 0100 	ldrd	r0, r1, [r1]
    41ec:	f7fb ffdc 	bl	1a8 <__aeabi_dsub>
    41f0:	f1ba 0f00 	cmp.w	sl, #0
    41f4:	dd0d      	ble.n	4212 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x77a>
    41f6:	ad4a      	add	r5, sp, #296	; 0x128
    41f8:	2401      	movs	r4, #1
    41fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    41fe:	3401      	adds	r4, #1
    4200:	f7fb ffd4 	bl	1ac <__adddf3>
    4204:	45a2      	cmp	sl, r4
    4206:	daf8      	bge.n	41fa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x762>
    4208:	9b03      	ldr	r3, [sp, #12]
    420a:	b113      	cbz	r3, 4212 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x77a>
    420c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4210:	4619      	mov	r1, r3
    4212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4214:	e9c3 0102 	strd	r0, r1, [r3, #8]
    4218:	9b07      	ldr	r3, [sp, #28]
    421a:	f003 0007 	and.w	r0, r3, #7
    421e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    4222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4226:	4620      	mov	r0, r4
    4228:	4629      	mov	r1, r5
    422a:	f7fc fc0f 	bl	a4c <__aeabi_d2iz>
    422e:	9b01      	ldr	r3, [sp, #4]
    4230:	aa0c      	add	r2, sp, #48	; 0x30
    4232:	469a      	mov	sl, r3
    4234:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    4238:	e640      	b.n	3ebc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x424>
    423a:	9b01      	ldr	r3, [sp, #4]
    423c:	4619      	mov	r1, r3
    423e:	685a      	ldr	r2, [r3, #4]
    4240:	68db      	ldr	r3, [r3, #12]
    4242:	680d      	ldr	r5, [r1, #0]
    4244:	688c      	ldr	r4, [r1, #8]
    4246:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4248:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    424c:	60cb      	str	r3, [r1, #12]
    424e:	9b07      	ldr	r3, [sp, #28]
    4250:	600d      	str	r5, [r1, #0]
    4252:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    4256:	604a      	str	r2, [r1, #4]
    4258:	f003 0007 	and.w	r0, r3, #7
    425c:	f107 4200 	add.w	r2, r7, #2147483648	; 0x80000000
    4260:	608c      	str	r4, [r1, #8]
    4262:	610e      	str	r6, [r1, #16]
    4264:	614a      	str	r2, [r1, #20]
    4266:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    426e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4274:	e9c4 0300 	strd	r0, r3, [r4]
    4278:	460b      	mov	r3, r1
    427a:	9901      	ldr	r1, [sp, #4]
    427c:	4602      	mov	r2, r0
    427e:	e9d1 0100 	ldrd	r0, r1, [r1]
    4282:	f7fb ff91 	bl	1a8 <__aeabi_dsub>
    4286:	f1ba 0f00 	cmp.w	sl, #0
    428a:	dcb4      	bgt.n	41f6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x75e>
    428c:	e7be      	b.n	420c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x774>
    428e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    4290:	2b02      	cmp	r3, #2
    4292:	dc0a      	bgt.n	42aa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x812>
    4294:	2b00      	cmp	r3, #0
    4296:	dc11      	bgt.n	42bc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x824>
    4298:	f47f ae97 	bne.w	3fca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x532>
    429c:	2000      	movs	r0, #0
    429e:	2100      	movs	r1, #0
    42a0:	e68b      	b.n	3fba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x522>
    42a2:	9b08      	ldr	r3, [sp, #32]
    42a4:	00db      	lsls	r3, r3, #3
    42a6:	9302      	str	r3, [sp, #8]
    42a8:	e465      	b.n	3b76 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xde>
    42aa:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    42ac:	2b03      	cmp	r3, #3
    42ae:	f47f ae8c 	bne.w	3fca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x532>
    42b2:	ab48      	add	r3, sp, #288	; 0x120
    42b4:	2600      	movs	r6, #0
    42b6:	2700      	movs	r7, #0
    42b8:	9301      	str	r3, [sp, #4]
    42ba:	e6fb      	b.n	40b4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x61c>
    42bc:	ab48      	add	r3, sp, #288	; 0x120
    42be:	2000      	movs	r0, #0
    42c0:	2100      	movs	r1, #0
    42c2:	9301      	str	r3, [sp, #4]
    42c4:	e787      	b.n	41d6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x73e>
    42c6:	2600      	movs	r6, #0
    42c8:	2700      	movs	r7, #0
    42ca:	e6f3      	b.n	40b4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x61c>
    42cc:	3ff00000 	.word	0x3ff00000
    42d0:	41700000 	.word	0x41700000
    42d4:	3e700000 	.word	0x3e700000

000042d8 <__kernel_sin>:
    42d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42dc:	ec55 4b10 	vmov	r4, r5, d0
    42e0:	b085      	sub	sp, #20
    42e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    42e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    42ea:	ed8d 1b00 	vstr	d1, [sp]
    42ee:	9003      	str	r0, [sp, #12]
    42f0:	da07      	bge.n	4302 <__kernel_sin+0x2a>
    42f2:	ee10 0a10 	vmov	r0, s0
    42f6:	4629      	mov	r1, r5
    42f8:	f7fc fba8 	bl	a4c <__aeabi_d2iz>
    42fc:	2800      	cmp	r0, #0
    42fe:	f000 8089 	beq.w	4414 <__kernel_sin+0x13c>
    4302:	4622      	mov	r2, r4
    4304:	462b      	mov	r3, r5
    4306:	4620      	mov	r0, r4
    4308:	4629      	mov	r1, r5
    430a:	f7fc f905 	bl	518 <__aeabi_dmul>
    430e:	4606      	mov	r6, r0
    4310:	460f      	mov	r7, r1
    4312:	4632      	mov	r2, r6
    4314:	463b      	mov	r3, r7
    4316:	4620      	mov	r0, r4
    4318:	4629      	mov	r1, r5
    431a:	f7fc f8fd 	bl	518 <__aeabi_dmul>
    431e:	a343      	add	r3, pc, #268	; (adr r3, 442c <__kernel_sin+0x154>)
    4320:	e9d3 2300 	ldrd	r2, r3, [r3]
    4324:	4682      	mov	sl, r0
    4326:	468b      	mov	fp, r1
    4328:	4630      	mov	r0, r6
    432a:	4639      	mov	r1, r7
    432c:	f7fc f8f4 	bl	518 <__aeabi_dmul>
    4330:	a340      	add	r3, pc, #256	; (adr r3, 4434 <__kernel_sin+0x15c>)
    4332:	e9d3 2300 	ldrd	r2, r3, [r3]
    4336:	f7fb ff37 	bl	1a8 <__aeabi_dsub>
    433a:	4632      	mov	r2, r6
    433c:	463b      	mov	r3, r7
    433e:	f7fc f8eb 	bl	518 <__aeabi_dmul>
    4342:	a33e      	add	r3, pc, #248	; (adr r3, 443c <__kernel_sin+0x164>)
    4344:	e9d3 2300 	ldrd	r2, r3, [r3]
    4348:	f7fb ff30 	bl	1ac <__adddf3>
    434c:	4632      	mov	r2, r6
    434e:	463b      	mov	r3, r7
    4350:	f7fc f8e2 	bl	518 <__aeabi_dmul>
    4354:	a33b      	add	r3, pc, #236	; (adr r3, 4444 <__kernel_sin+0x16c>)
    4356:	e9d3 2300 	ldrd	r2, r3, [r3]
    435a:	f7fb ff25 	bl	1a8 <__aeabi_dsub>
    435e:	4632      	mov	r2, r6
    4360:	463b      	mov	r3, r7
    4362:	f7fc f8d9 	bl	518 <__aeabi_dmul>
    4366:	a339      	add	r3, pc, #228	; (adr r3, 444c <__kernel_sin+0x174>)
    4368:	e9d3 2300 	ldrd	r2, r3, [r3]
    436c:	f7fb ff1e 	bl	1ac <__adddf3>
    4370:	9b03      	ldr	r3, [sp, #12]
    4372:	4680      	mov	r8, r0
    4374:	4689      	mov	r9, r1
    4376:	b3ab      	cbz	r3, 43e4 <__kernel_sin+0x10c>
    4378:	e9dd 0100 	ldrd	r0, r1, [sp]
    437c:	4b2a      	ldr	r3, [pc, #168]	; (4428 <__kernel_sin+0x150>)
    437e:	2200      	movs	r2, #0
    4380:	f7fc f8ca 	bl	518 <__aeabi_dmul>
    4384:	4642      	mov	r2, r8
    4386:	464b      	mov	r3, r9
    4388:	4680      	mov	r8, r0
    438a:	4689      	mov	r9, r1
    438c:	4650      	mov	r0, sl
    438e:	4659      	mov	r1, fp
    4390:	f7fc f8c2 	bl	518 <__aeabi_dmul>
    4394:	4602      	mov	r2, r0
    4396:	460b      	mov	r3, r1
    4398:	4640      	mov	r0, r8
    439a:	4649      	mov	r1, r9
    439c:	f7fb ff04 	bl	1a8 <__aeabi_dsub>
    43a0:	4632      	mov	r2, r6
    43a2:	463b      	mov	r3, r7
    43a4:	f7fc f8b8 	bl	518 <__aeabi_dmul>
    43a8:	e9dd 2300 	ldrd	r2, r3, [sp]
    43ac:	f7fb fefc 	bl	1a8 <__aeabi_dsub>
    43b0:	a31b      	add	r3, pc, #108	; (adr r3, 4420 <__kernel_sin+0x148>)
    43b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    43b6:	4606      	mov	r6, r0
    43b8:	460f      	mov	r7, r1
    43ba:	4650      	mov	r0, sl
    43bc:	4659      	mov	r1, fp
    43be:	f7fc f8ab 	bl	518 <__aeabi_dmul>
    43c2:	4602      	mov	r2, r0
    43c4:	460b      	mov	r3, r1
    43c6:	4630      	mov	r0, r6
    43c8:	4639      	mov	r1, r7
    43ca:	f7fb feef 	bl	1ac <__adddf3>
    43ce:	4602      	mov	r2, r0
    43d0:	460b      	mov	r3, r1
    43d2:	4620      	mov	r0, r4
    43d4:	4629      	mov	r1, r5
    43d6:	f7fb fee7 	bl	1a8 <__aeabi_dsub>
    43da:	ec41 0b10 	vmov	d0, r0, r1
    43de:	b005      	add	sp, #20
    43e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43e4:	4602      	mov	r2, r0
    43e6:	460b      	mov	r3, r1
    43e8:	4630      	mov	r0, r6
    43ea:	4639      	mov	r1, r7
    43ec:	f7fc f894 	bl	518 <__aeabi_dmul>
    43f0:	a30b      	add	r3, pc, #44	; (adr r3, 4420 <__kernel_sin+0x148>)
    43f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    43f6:	f7fb fed7 	bl	1a8 <__aeabi_dsub>
    43fa:	4652      	mov	r2, sl
    43fc:	465b      	mov	r3, fp
    43fe:	f7fc f88b 	bl	518 <__aeabi_dmul>
    4402:	4622      	mov	r2, r4
    4404:	462b      	mov	r3, r5
    4406:	f7fb fed1 	bl	1ac <__adddf3>
    440a:	ec41 0b10 	vmov	d0, r0, r1
    440e:	b005      	add	sp, #20
    4410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4414:	ec45 4b10 	vmov	d0, r4, r5
    4418:	b005      	add	sp, #20
    441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    441e:	bf00      	nop
    4420:	55555549 	.word	0x55555549
    4424:	3fc55555 	.word	0x3fc55555
    4428:	3fe00000 	.word	0x3fe00000
    442c:	5acfd57c 	.word	0x5acfd57c
    4430:	3de5d93a 	.word	0x3de5d93a
    4434:	8a2b9ceb 	.word	0x8a2b9ceb
    4438:	3e5ae5e6 	.word	0x3e5ae5e6
    443c:	57b1fe7d 	.word	0x57b1fe7d
    4440:	3ec71de3 	.word	0x3ec71de3
    4444:	19c161d5 	.word	0x19c161d5
    4448:	3f2a01a0 	.word	0x3f2a01a0
    444c:	1110f8a6 	.word	0x1110f8a6
    4450:	3f811111 	.word	0x3f811111
    4454:	00000000 	.word	0x00000000

00004458 <nan>:
    4458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 4460 <nan+0x8>
    445c:	4770      	bx	lr
    445e:	bf00      	nop
    4460:	00000000 	.word	0x00000000
    4464:	7ff80000 	.word	0x7ff80000

00004468 <scalbn>:
    4468:	b538      	push	{r3, r4, r5, lr}
    446a:	ec53 2b10 	vmov	r2, r3, d0
    446e:	f3c3 510a 	ubfx	r1, r3, #20, #11
    4472:	461c      	mov	r4, r3
    4474:	4605      	mov	r5, r0
    4476:	bb81      	cbnz	r1, 44da <scalbn+0x72>
    4478:	ee10 1a10 	vmov	r1, s0
    447c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    4480:	4321      	orrs	r1, r4
    4482:	d029      	beq.n	44d8 <scalbn+0x70>
    4484:	4619      	mov	r1, r3
    4486:	2200      	movs	r2, #0
    4488:	4b3d      	ldr	r3, [pc, #244]	; (4580 <scalbn+0x118>)
    448a:	4c3e      	ldr	r4, [pc, #248]	; (4584 <scalbn+0x11c>)
    448c:	ee10 0a10 	vmov	r0, s0
    4490:	f7fc f842 	bl	518 <__aeabi_dmul>
    4494:	42a5      	cmp	r5, r4
    4496:	4602      	mov	r2, r0
    4498:	460b      	mov	r3, r1
    449a:	db16      	blt.n	44ca <scalbn+0x62>
    449c:	460c      	mov	r4, r1
    449e:	f3c1 510a 	ubfx	r1, r1, #20, #11
    44a2:	3936      	subs	r1, #54	; 0x36
    44a4:	4429      	add	r1, r5
    44a6:	f240 70fe 	movw	r0, #2046	; 0x7fe
    44aa:	4281      	cmp	r1, r0
    44ac:	dc21      	bgt.n	44f2 <scalbn+0x8a>
    44ae:	2900      	cmp	r1, #0
    44b0:	dc47      	bgt.n	4542 <scalbn+0xda>
    44b2:	f111 0f35 	cmn.w	r1, #53	; 0x35
    44b6:	da34      	bge.n	4522 <scalbn+0xba>
    44b8:	f24c 3150 	movw	r1, #50000	; 0xc350
    44bc:	428d      	cmp	r5, r1
    44be:	dc18      	bgt.n	44f2 <scalbn+0x8a>
    44c0:	2b00      	cmp	r3, #0
    44c2:	a127      	add	r1, pc, #156	; (adr r1, 4560 <scalbn+0xf8>)
    44c4:	e9d1 0100 	ldrd	r0, r1, [r1]
    44c8:	db44      	blt.n	4554 <scalbn+0xec>
    44ca:	a325      	add	r3, pc, #148	; (adr r3, 4560 <scalbn+0xf8>)
    44cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    44d0:	f7fc f822 	bl	518 <__aeabi_dmul>
    44d4:	ec41 0b10 	vmov	d0, r0, r1
    44d8:	bd38      	pop	{r3, r4, r5, pc}
    44da:	f240 70ff 	movw	r0, #2047	; 0x7ff
    44de:	4281      	cmp	r1, r0
    44e0:	d1e0      	bne.n	44a4 <scalbn+0x3c>
    44e2:	ee10 0a10 	vmov	r0, s0
    44e6:	4619      	mov	r1, r3
    44e8:	f7fb fe60 	bl	1ac <__adddf3>
    44ec:	ec41 0b10 	vmov	d0, r0, r1
    44f0:	bd38      	pop	{r3, r4, r5, pc}
    44f2:	2b00      	cmp	r3, #0
    44f4:	a11c      	add	r1, pc, #112	; (adr r1, 4568 <scalbn+0x100>)
    44f6:	e9d1 0100 	ldrd	r0, r1, [r1]
    44fa:	db07      	blt.n	450c <scalbn+0xa4>
    44fc:	a31a      	add	r3, pc, #104	; (adr r3, 4568 <scalbn+0x100>)
    44fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    4502:	f7fc f809 	bl	518 <__aeabi_dmul>
    4506:	ec41 0b10 	vmov	d0, r0, r1
    450a:	bd38      	pop	{r3, r4, r5, pc}
    450c:	a118      	add	r1, pc, #96	; (adr r1, 4570 <scalbn+0x108>)
    450e:	e9d1 0100 	ldrd	r0, r1, [r1]
    4512:	a315      	add	r3, pc, #84	; (adr r3, 4568 <scalbn+0x100>)
    4514:	e9d3 2300 	ldrd	r2, r3, [r3]
    4518:	f7fb fffe 	bl	518 <__aeabi_dmul>
    451c:	ec41 0b10 	vmov	d0, r0, r1
    4520:	e7f3      	b.n	450a <scalbn+0xa2>
    4522:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
    4526:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
    452a:	3136      	adds	r1, #54	; 0x36
    452c:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
    4530:	4610      	mov	r0, r2
    4532:	4619      	mov	r1, r3
    4534:	2200      	movs	r2, #0
    4536:	4b14      	ldr	r3, [pc, #80]	; (4588 <scalbn+0x120>)
    4538:	f7fb ffee 	bl	518 <__aeabi_dmul>
    453c:	ec41 0b10 	vmov	d0, r0, r1
    4540:	bd38      	pop	{r3, r4, r5, pc}
    4542:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
    4546:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
    454a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
    454e:	ec43 2b10 	vmov	d0, r2, r3
    4552:	bd38      	pop	{r3, r4, r5, pc}
    4554:	a108      	add	r1, pc, #32	; (adr r1, 4578 <scalbn+0x110>)
    4556:	e9d1 0100 	ldrd	r0, r1, [r1]
    455a:	e7b6      	b.n	44ca <scalbn+0x62>
    455c:	f3af 8000 	nop.w
    4560:	c2f8f359 	.word	0xc2f8f359
    4564:	01a56e1f 	.word	0x01a56e1f
    4568:	8800759c 	.word	0x8800759c
    456c:	7e37e43c 	.word	0x7e37e43c
    4570:	8800759c 	.word	0x8800759c
    4574:	fe37e43c 	.word	0xfe37e43c
    4578:	c2f8f359 	.word	0xc2f8f359
    457c:	81a56e1f 	.word	0x81a56e1f
    4580:	43500000 	.word	0x43500000
    4584:	ffff3cb0 	.word	0xffff3cb0
    4588:	3c900000 	.word	0x3c900000
    458c:	00000000 	.word	0x00000000

00004590 <_dtoa_r>:
    4590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4594:	ed2d 8b02 	vpush	{d8}
    4598:	ec57 6b10 	vmov	r6, r7, d0
    459c:	b095      	sub	sp, #84	; 0x54
    459e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    45a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    45a4:	9105      	str	r1, [sp, #20]
    45a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
    45aa:	4604      	mov	r4, r0
    45ac:	9209      	str	r2, [sp, #36]	; 0x24
    45ae:	930f      	str	r3, [sp, #60]	; 0x3c
    45b0:	b93d      	cbnz	r5, 45c2 <_dtoa_r+0x32>
    45b2:	2010      	movs	r0, #16
    45b4:	f00b fe60 	bl	10278 <malloc>
    45b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
    45bc:	6260      	str	r0, [r4, #36]	; 0x24
    45be:	6005      	str	r5, [r0, #0]
    45c0:	60c5      	str	r5, [r0, #12]
    45c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    45c4:	6819      	ldr	r1, [r3, #0]
    45c6:	b151      	cbz	r1, 45de <_dtoa_r+0x4e>
    45c8:	685a      	ldr	r2, [r3, #4]
    45ca:	604a      	str	r2, [r1, #4]
    45cc:	2301      	movs	r3, #1
    45ce:	4093      	lsls	r3, r2
    45d0:	608b      	str	r3, [r1, #8]
    45d2:	4620      	mov	r0, r4
    45d4:	f012 f837 	bl	16646 <_Bfree>
    45d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    45da:	2200      	movs	r2, #0
    45dc:	601a      	str	r2, [r3, #0]
    45de:	1e3b      	subs	r3, r7, #0
    45e0:	bfb9      	ittee	lt
    45e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    45e6:	9303      	strlt	r3, [sp, #12]
    45e8:	2300      	movge	r3, #0
    45ea:	f8c8 3000 	strge.w	r3, [r8]
    45ee:	f8dd 900c 	ldr.w	r9, [sp, #12]
    45f2:	4bb7      	ldr	r3, [pc, #732]	; (48d0 <_dtoa_r+0x340>)
    45f4:	bfbc      	itt	lt
    45f6:	2201      	movlt	r2, #1
    45f8:	f8c8 2000 	strlt.w	r2, [r8]
    45fc:	ea33 0309 	bics.w	r3, r3, r9
    4600:	d11b      	bne.n	463a <_dtoa_r+0xaa>
    4602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4604:	f242 730f 	movw	r3, #9999	; 0x270f
    4608:	6013      	str	r3, [r2, #0]
    460a:	f3c9 0313 	ubfx	r3, r9, #0, #20
    460e:	4333      	orrs	r3, r6
    4610:	f000 8575 	beq.w	50fe <_dtoa_r+0xb6e>
    4614:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4616:	b963      	cbnz	r3, 4632 <_dtoa_r+0xa2>
    4618:	4bae      	ldr	r3, [pc, #696]	; (48d4 <_dtoa_r+0x344>)
    461a:	e025      	b.n	4668 <_dtoa_r+0xd8>
    461c:	4bae      	ldr	r3, [pc, #696]	; (48d8 <_dtoa_r+0x348>)
    461e:	9300      	str	r3, [sp, #0]
    4620:	3308      	adds	r3, #8
    4622:	9a21      	ldr	r2, [sp, #132]	; 0x84
    4624:	6013      	str	r3, [r2, #0]
    4626:	9800      	ldr	r0, [sp, #0]
    4628:	b015      	add	sp, #84	; 0x54
    462a:	ecbd 8b02 	vpop	{d8}
    462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4632:	4ba8      	ldr	r3, [pc, #672]	; (48d4 <_dtoa_r+0x344>)
    4634:	9300      	str	r3, [sp, #0]
    4636:	3303      	adds	r3, #3
    4638:	e7f3      	b.n	4622 <_dtoa_r+0x92>
    463a:	ed9d 7b02 	vldr	d7, [sp, #8]
    463e:	2200      	movs	r2, #0
    4640:	ec51 0b17 	vmov	r0, r1, d7
    4644:	2300      	movs	r3, #0
    4646:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
    464a:	f7fc f9cd 	bl	9e8 <__aeabi_dcmpeq>
    464e:	4680      	mov	r8, r0
    4650:	b160      	cbz	r0, 466c <_dtoa_r+0xdc>
    4652:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4654:	2301      	movs	r3, #1
    4656:	6013      	str	r3, [r2, #0]
    4658:	9b21      	ldr	r3, [sp, #132]	; 0x84
    465a:	2b00      	cmp	r3, #0
    465c:	f000 854c 	beq.w	50f8 <_dtoa_r+0xb68>
    4660:	4b9e      	ldr	r3, [pc, #632]	; (48dc <_dtoa_r+0x34c>)
    4662:	9a21      	ldr	r2, [sp, #132]	; 0x84
    4664:	6013      	str	r3, [r2, #0]
    4666:	3b01      	subs	r3, #1
    4668:	9300      	str	r3, [sp, #0]
    466a:	e7dc      	b.n	4626 <_dtoa_r+0x96>
    466c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    4670:	aa12      	add	r2, sp, #72	; 0x48
    4672:	a913      	add	r1, sp, #76	; 0x4c
    4674:	4620      	mov	r0, r4
    4676:	f012 fa21 	bl	16abc <__d2b>
    467a:	f3c9 550a 	ubfx	r5, r9, #20, #11
    467e:	4682      	mov	sl, r0
    4680:	2d00      	cmp	r5, #0
    4682:	d07e      	beq.n	4782 <_dtoa_r+0x1f2>
    4684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4686:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    468a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    468e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    4692:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
    4696:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    469a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    469e:	4b90      	ldr	r3, [pc, #576]	; (48e0 <_dtoa_r+0x350>)
    46a0:	2200      	movs	r2, #0
    46a2:	4630      	mov	r0, r6
    46a4:	4639      	mov	r1, r7
    46a6:	f7fb fd7f 	bl	1a8 <__aeabi_dsub>
    46aa:	a383      	add	r3, pc, #524	; (adr r3, 48b8 <_dtoa_r+0x328>)
    46ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    46b0:	f7fb ff32 	bl	518 <__aeabi_dmul>
    46b4:	a382      	add	r3, pc, #520	; (adr r3, 48c0 <_dtoa_r+0x330>)
    46b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    46ba:	f7fb fd77 	bl	1ac <__adddf3>
    46be:	4606      	mov	r6, r0
    46c0:	4628      	mov	r0, r5
    46c2:	460f      	mov	r7, r1
    46c4:	f7fb febe 	bl	444 <__aeabi_i2d>
    46c8:	a37f      	add	r3, pc, #508	; (adr r3, 48c8 <_dtoa_r+0x338>)
    46ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    46ce:	f7fb ff23 	bl	518 <__aeabi_dmul>
    46d2:	4602      	mov	r2, r0
    46d4:	460b      	mov	r3, r1
    46d6:	4630      	mov	r0, r6
    46d8:	4639      	mov	r1, r7
    46da:	f7fb fd67 	bl	1ac <__adddf3>
    46de:	4606      	mov	r6, r0
    46e0:	460f      	mov	r7, r1
    46e2:	f7fc f9b3 	bl	a4c <__aeabi_d2iz>
    46e6:	2200      	movs	r2, #0
    46e8:	4681      	mov	r9, r0
    46ea:	2300      	movs	r3, #0
    46ec:	4630      	mov	r0, r6
    46ee:	4639      	mov	r1, r7
    46f0:	f7fc f984 	bl	9fc <__aeabi_dcmplt>
    46f4:	b148      	cbz	r0, 470a <_dtoa_r+0x17a>
    46f6:	4648      	mov	r0, r9
    46f8:	f7fb fea4 	bl	444 <__aeabi_i2d>
    46fc:	4632      	mov	r2, r6
    46fe:	463b      	mov	r3, r7
    4700:	f7fc f972 	bl	9e8 <__aeabi_dcmpeq>
    4704:	b908      	cbnz	r0, 470a <_dtoa_r+0x17a>
    4706:	f109 39ff 	add.w	r9, r9, #4294967295
    470a:	f1b9 0f16 	cmp.w	r9, #22
    470e:	d856      	bhi.n	47be <_dtoa_r+0x22e>
    4710:	4b74      	ldr	r3, [pc, #464]	; (48e4 <_dtoa_r+0x354>)
    4712:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    4716:	e9d3 2300 	ldrd	r2, r3, [r3]
    471a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    471e:	f7fc f96d 	bl	9fc <__aeabi_dcmplt>
    4722:	2800      	cmp	r0, #0
    4724:	d04d      	beq.n	47c2 <_dtoa_r+0x232>
    4726:	f109 39ff 	add.w	r9, r9, #4294967295
    472a:	2300      	movs	r3, #0
    472c:	930e      	str	r3, [sp, #56]	; 0x38
    472e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4730:	1b5d      	subs	r5, r3, r5
    4732:	1e6b      	subs	r3, r5, #1
    4734:	9304      	str	r3, [sp, #16]
    4736:	bf43      	ittte	mi
    4738:	2300      	movmi	r3, #0
    473a:	f1c5 0801 	rsbmi	r8, r5, #1
    473e:	9304      	strmi	r3, [sp, #16]
    4740:	f04f 0800 	movpl.w	r8, #0
    4744:	f1b9 0f00 	cmp.w	r9, #0
    4748:	db3d      	blt.n	47c6 <_dtoa_r+0x236>
    474a:	9b04      	ldr	r3, [sp, #16]
    474c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    4750:	444b      	add	r3, r9
    4752:	9304      	str	r3, [sp, #16]
    4754:	2300      	movs	r3, #0
    4756:	9306      	str	r3, [sp, #24]
    4758:	9b05      	ldr	r3, [sp, #20]
    475a:	2b09      	cmp	r3, #9
    475c:	f200 809a 	bhi.w	4894 <_dtoa_r+0x304>
    4760:	2b05      	cmp	r3, #5
    4762:	bfc4      	itt	gt
    4764:	3b04      	subgt	r3, #4
    4766:	9305      	strgt	r3, [sp, #20]
    4768:	9b05      	ldr	r3, [sp, #20]
    476a:	f1a3 0302 	sub.w	r3, r3, #2
    476e:	bfcc      	ite	gt
    4770:	2500      	movgt	r5, #0
    4772:	2501      	movle	r5, #1
    4774:	2b03      	cmp	r3, #3
    4776:	f200 8099 	bhi.w	48ac <_dtoa_r+0x31c>
    477a:	e8df f003 	tbb	[pc, r3]
    477e:	7d2c      	.short	0x7d2c
    4780:	897b      	.short	0x897b
    4782:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
    4786:	441d      	add	r5, r3
    4788:	f205 4332 	addw	r3, r5, #1074	; 0x432
    478c:	2b20      	cmp	r3, #32
    478e:	bfc1      	itttt	gt
    4790:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    4794:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
    4798:	fa09 f303 	lslgt.w	r3, r9, r3
    479c:	fa26 f000 	lsrgt.w	r0, r6, r0
    47a0:	bfda      	itte	le
    47a2:	f1c3 0320 	rsble	r3, r3, #32
    47a6:	fa06 f003 	lslle.w	r0, r6, r3
    47aa:	4318      	orrgt	r0, r3
    47ac:	f7fb fe3a 	bl	424 <__aeabi_ui2d>
    47b0:	2301      	movs	r3, #1
    47b2:	4606      	mov	r6, r0
    47b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
    47b8:	3d01      	subs	r5, #1
    47ba:	9310      	str	r3, [sp, #64]	; 0x40
    47bc:	e76f      	b.n	469e <_dtoa_r+0x10e>
    47be:	2301      	movs	r3, #1
    47c0:	e7b4      	b.n	472c <_dtoa_r+0x19c>
    47c2:	900e      	str	r0, [sp, #56]	; 0x38
    47c4:	e7b3      	b.n	472e <_dtoa_r+0x19e>
    47c6:	f1c9 0300 	rsb	r3, r9, #0
    47ca:	9306      	str	r3, [sp, #24]
    47cc:	2300      	movs	r3, #0
    47ce:	eba8 0809 	sub.w	r8, r8, r9
    47d2:	930d      	str	r3, [sp, #52]	; 0x34
    47d4:	e7c0      	b.n	4758 <_dtoa_r+0x1c8>
    47d6:	2300      	movs	r3, #0
    47d8:	9308      	str	r3, [sp, #32]
    47da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47dc:	2b00      	cmp	r3, #0
    47de:	f300 8085 	bgt.w	48ec <_dtoa_r+0x35c>
    47e2:	f04f 0b01 	mov.w	fp, #1
    47e6:	f8cd b004 	str.w	fp, [sp, #4]
    47ea:	465b      	mov	r3, fp
    47ec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    47f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    47f2:	2200      	movs	r2, #0
    47f4:	6072      	str	r2, [r6, #4]
    47f6:	2204      	movs	r2, #4
    47f8:	f102 0014 	add.w	r0, r2, #20
    47fc:	4298      	cmp	r0, r3
    47fe:	6871      	ldr	r1, [r6, #4]
    4800:	d97a      	bls.n	48f8 <_dtoa_r+0x368>
    4802:	4620      	mov	r0, r4
    4804:	f011 feeb 	bl	165de <_Balloc>
    4808:	6a63      	ldr	r3, [r4, #36]	; 0x24
    480a:	6030      	str	r0, [r6, #0]
    480c:	681b      	ldr	r3, [r3, #0]
    480e:	9300      	str	r3, [sp, #0]
    4810:	9b01      	ldr	r3, [sp, #4]
    4812:	2b0e      	cmp	r3, #14
    4814:	f200 80f5 	bhi.w	4a02 <_dtoa_r+0x472>
    4818:	2d00      	cmp	r5, #0
    481a:	f000 80f2 	beq.w	4a02 <_dtoa_r+0x472>
    481e:	f1b9 0f00 	cmp.w	r9, #0
    4822:	dd7d      	ble.n	4920 <_dtoa_r+0x390>
    4824:	4a2f      	ldr	r2, [pc, #188]	; (48e4 <_dtoa_r+0x354>)
    4826:	f009 030f 	and.w	r3, r9, #15
    482a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    482e:	ed93 7b00 	vldr	d7, [r3]
    4832:	f419 7f80 	tst.w	r9, #256	; 0x100
    4836:	ea4f 1729 	mov.w	r7, r9, asr #4
    483a:	eeb0 8a47 	vmov.f32	s16, s14
    483e:	eef0 8a67 	vmov.f32	s17, s15
    4842:	d05d      	beq.n	4900 <_dtoa_r+0x370>
    4844:	4b28      	ldr	r3, [pc, #160]	; (48e8 <_dtoa_r+0x358>)
    4846:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    484a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    484e:	f7fb ff8d 	bl	76c <__aeabi_ddiv>
    4852:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4856:	f007 070f 	and.w	r7, r7, #15
    485a:	2503      	movs	r5, #3
    485c:	4e22      	ldr	r6, [pc, #136]	; (48e8 <_dtoa_r+0x358>)
    485e:	2f00      	cmp	r7, #0
    4860:	d150      	bne.n	4904 <_dtoa_r+0x374>
    4862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4866:	ec53 2b18 	vmov	r2, r3, d8
    486a:	f7fb ff7f 	bl	76c <__aeabi_ddiv>
    486e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4872:	e06f      	b.n	4954 <_dtoa_r+0x3c4>
    4874:	2301      	movs	r3, #1
    4876:	e7af      	b.n	47d8 <_dtoa_r+0x248>
    4878:	2300      	movs	r3, #0
    487a:	9308      	str	r3, [sp, #32]
    487c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    487e:	eb09 0b03 	add.w	fp, r9, r3
    4882:	f10b 0301 	add.w	r3, fp, #1
    4886:	2b01      	cmp	r3, #1
    4888:	9301      	str	r3, [sp, #4]
    488a:	bfb8      	it	lt
    488c:	2301      	movlt	r3, #1
    488e:	e7af      	b.n	47f0 <_dtoa_r+0x260>
    4890:	2301      	movs	r3, #1
    4892:	e7f2      	b.n	487a <_dtoa_r+0x2ea>
    4894:	2501      	movs	r5, #1
    4896:	2300      	movs	r3, #0
    4898:	9305      	str	r3, [sp, #20]
    489a:	9508      	str	r5, [sp, #32]
    489c:	f04f 3bff 	mov.w	fp, #4294967295
    48a0:	2200      	movs	r2, #0
    48a2:	f8cd b004 	str.w	fp, [sp, #4]
    48a6:	2312      	movs	r3, #18
    48a8:	9209      	str	r2, [sp, #36]	; 0x24
    48aa:	e7a1      	b.n	47f0 <_dtoa_r+0x260>
    48ac:	2301      	movs	r3, #1
    48ae:	9308      	str	r3, [sp, #32]
    48b0:	e7f4      	b.n	489c <_dtoa_r+0x30c>
    48b2:	bf00      	nop
    48b4:	f3af 8000 	nop.w
    48b8:	636f4361 	.word	0x636f4361
    48bc:	3fd287a7 	.word	0x3fd287a7
    48c0:	8b60c8b3 	.word	0x8b60c8b3
    48c4:	3fc68a28 	.word	0x3fc68a28
    48c8:	509f79fb 	.word	0x509f79fb
    48cc:	3fd34413 	.word	0x3fd34413
    48d0:	7ff00000 	.word	0x7ff00000
    48d4:	00046f17 	.word	0x00046f17
    48d8:	00046f0e 	.word	0x00046f0e
    48dc:	000466b0 	.word	0x000466b0
    48e0:	3ff80000 	.word	0x3ff80000
    48e4:	00017ae8 	.word	0x00017ae8
    48e8:	00017ac0 	.word	0x00017ac0
    48ec:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    48f0:	f8cd b004 	str.w	fp, [sp, #4]
    48f4:	465b      	mov	r3, fp
    48f6:	e77b      	b.n	47f0 <_dtoa_r+0x260>
    48f8:	3101      	adds	r1, #1
    48fa:	6071      	str	r1, [r6, #4]
    48fc:	0052      	lsls	r2, r2, #1
    48fe:	e77b      	b.n	47f8 <_dtoa_r+0x268>
    4900:	2502      	movs	r5, #2
    4902:	e7ab      	b.n	485c <_dtoa_r+0x2cc>
    4904:	07f9      	lsls	r1, r7, #31
    4906:	d508      	bpl.n	491a <_dtoa_r+0x38a>
    4908:	ec51 0b18 	vmov	r0, r1, d8
    490c:	e9d6 2300 	ldrd	r2, r3, [r6]
    4910:	f7fb fe02 	bl	518 <__aeabi_dmul>
    4914:	ec41 0b18 	vmov	d8, r0, r1
    4918:	3501      	adds	r5, #1
    491a:	107f      	asrs	r7, r7, #1
    491c:	3608      	adds	r6, #8
    491e:	e79e      	b.n	485e <_dtoa_r+0x2ce>
    4920:	f000 80ab 	beq.w	4a7a <_dtoa_r+0x4ea>
    4924:	f1c9 0600 	rsb	r6, r9, #0
    4928:	4baa      	ldr	r3, [pc, #680]	; (4bd4 <_dtoa_r+0x644>)
    492a:	4fab      	ldr	r7, [pc, #684]	; (4bd8 <_dtoa_r+0x648>)
    492c:	f006 020f 	and.w	r2, r6, #15
    4930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4934:	e9d3 2300 	ldrd	r2, r3, [r3]
    4938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    493c:	f7fb fdec 	bl	518 <__aeabi_dmul>
    4940:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4944:	1136      	asrs	r6, r6, #4
    4946:	2300      	movs	r3, #0
    4948:	2502      	movs	r5, #2
    494a:	2e00      	cmp	r6, #0
    494c:	f040 808a 	bne.w	4a64 <_dtoa_r+0x4d4>
    4950:	2b00      	cmp	r3, #0
    4952:	d18c      	bne.n	486e <_dtoa_r+0x2de>
    4954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4956:	2b00      	cmp	r3, #0
    4958:	f000 8091 	beq.w	4a7e <_dtoa_r+0x4ee>
    495c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    4960:	4b9e      	ldr	r3, [pc, #632]	; (4bdc <_dtoa_r+0x64c>)
    4962:	2200      	movs	r2, #0
    4964:	4630      	mov	r0, r6
    4966:	4639      	mov	r1, r7
    4968:	f7fc f848 	bl	9fc <__aeabi_dcmplt>
    496c:	2800      	cmp	r0, #0
    496e:	f000 8086 	beq.w	4a7e <_dtoa_r+0x4ee>
    4972:	9b01      	ldr	r3, [sp, #4]
    4974:	2b00      	cmp	r3, #0
    4976:	f000 8082 	beq.w	4a7e <_dtoa_r+0x4ee>
    497a:	f1bb 0f00 	cmp.w	fp, #0
    497e:	dd3c      	ble.n	49fa <_dtoa_r+0x46a>
    4980:	f109 33ff 	add.w	r3, r9, #4294967295
    4984:	9307      	str	r3, [sp, #28]
    4986:	2200      	movs	r2, #0
    4988:	4b95      	ldr	r3, [pc, #596]	; (4be0 <_dtoa_r+0x650>)
    498a:	4630      	mov	r0, r6
    498c:	4639      	mov	r1, r7
    498e:	f7fb fdc3 	bl	518 <__aeabi_dmul>
    4992:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4996:	3501      	adds	r5, #1
    4998:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    499c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    49a0:	4628      	mov	r0, r5
    49a2:	f7fb fd4f 	bl	444 <__aeabi_i2d>
    49a6:	4632      	mov	r2, r6
    49a8:	463b      	mov	r3, r7
    49aa:	f7fb fdb5 	bl	518 <__aeabi_dmul>
    49ae:	4b8d      	ldr	r3, [pc, #564]	; (4be4 <_dtoa_r+0x654>)
    49b0:	2200      	movs	r2, #0
    49b2:	f7fb fbfb 	bl	1ac <__adddf3>
    49b6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    49ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
    49be:	9303      	str	r3, [sp, #12]
    49c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    49c2:	2b00      	cmp	r3, #0
    49c4:	d160      	bne.n	4a88 <_dtoa_r+0x4f8>
    49c6:	4b88      	ldr	r3, [pc, #544]	; (4be8 <_dtoa_r+0x658>)
    49c8:	2200      	movs	r2, #0
    49ca:	4630      	mov	r0, r6
    49cc:	4639      	mov	r1, r7
    49ce:	f7fb fbeb 	bl	1a8 <__aeabi_dsub>
    49d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    49d6:	4606      	mov	r6, r0
    49d8:	460f      	mov	r7, r1
    49da:	f7fc f82d 	bl	a38 <__aeabi_dcmpgt>
    49de:	2800      	cmp	r0, #0
    49e0:	f040 8299 	bne.w	4f16 <_dtoa_r+0x986>
    49e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    49e8:	4630      	mov	r0, r6
    49ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    49ee:	4639      	mov	r1, r7
    49f0:	f7fc f804 	bl	9fc <__aeabi_dcmplt>
    49f4:	2800      	cmp	r0, #0
    49f6:	f040 828b 	bne.w	4f10 <_dtoa_r+0x980>
    49fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    49fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    4a02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4a04:	2b00      	cmp	r3, #0
    4a06:	f2c0 815b 	blt.w	4cc0 <_dtoa_r+0x730>
    4a0a:	f1b9 0f0e 	cmp.w	r9, #14
    4a0e:	f300 8157 	bgt.w	4cc0 <_dtoa_r+0x730>
    4a12:	4b70      	ldr	r3, [pc, #448]	; (4bd4 <_dtoa_r+0x644>)
    4a14:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    4a18:	ed93 7b00 	vldr	d7, [r3]
    4a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a1e:	eeb0 8a47 	vmov.f32	s16, s14
    4a22:	eef0 8a67 	vmov.f32	s17, s15
    4a26:	2b00      	cmp	r3, #0
    4a28:	f280 80e2 	bge.w	4bf0 <_dtoa_r+0x660>
    4a2c:	9b01      	ldr	r3, [sp, #4]
    4a2e:	2b00      	cmp	r3, #0
    4a30:	f300 80de 	bgt.w	4bf0 <_dtoa_r+0x660>
    4a34:	f040 826c 	bne.w	4f10 <_dtoa_r+0x980>
    4a38:	4b6b      	ldr	r3, [pc, #428]	; (4be8 <_dtoa_r+0x658>)
    4a3a:	ec51 0b17 	vmov	r0, r1, d7
    4a3e:	2200      	movs	r2, #0
    4a40:	f7fb fd6a 	bl	518 <__aeabi_dmul>
    4a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4a48:	f7fb ffec 	bl	a24 <__aeabi_dcmpge>
    4a4c:	9e01      	ldr	r6, [sp, #4]
    4a4e:	4637      	mov	r7, r6
    4a50:	2800      	cmp	r0, #0
    4a52:	f040 8242 	bne.w	4eda <_dtoa_r+0x94a>
    4a56:	9d00      	ldr	r5, [sp, #0]
    4a58:	2331      	movs	r3, #49	; 0x31
    4a5a:	f805 3b01 	strb.w	r3, [r5], #1
    4a5e:	f109 0901 	add.w	r9, r9, #1
    4a62:	e23e      	b.n	4ee2 <_dtoa_r+0x952>
    4a64:	07f2      	lsls	r2, r6, #31
    4a66:	d505      	bpl.n	4a74 <_dtoa_r+0x4e4>
    4a68:	e9d7 2300 	ldrd	r2, r3, [r7]
    4a6c:	f7fb fd54 	bl	518 <__aeabi_dmul>
    4a70:	3501      	adds	r5, #1
    4a72:	2301      	movs	r3, #1
    4a74:	1076      	asrs	r6, r6, #1
    4a76:	3708      	adds	r7, #8
    4a78:	e767      	b.n	494a <_dtoa_r+0x3ba>
    4a7a:	2502      	movs	r5, #2
    4a7c:	e76a      	b.n	4954 <_dtoa_r+0x3c4>
    4a7e:	9b01      	ldr	r3, [sp, #4]
    4a80:	f8cd 901c 	str.w	r9, [sp, #28]
    4a84:	930c      	str	r3, [sp, #48]	; 0x30
    4a86:	e789      	b.n	499c <_dtoa_r+0x40c>
    4a88:	9900      	ldr	r1, [sp, #0]
    4a8a:	980c      	ldr	r0, [sp, #48]	; 0x30
    4a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a8e:	4b51      	ldr	r3, [pc, #324]	; (4bd4 <_dtoa_r+0x644>)
    4a90:	ed9d 7b02 	vldr	d7, [sp, #8]
    4a94:	4401      	add	r1, r0
    4a96:	9102      	str	r1, [sp, #8]
    4a98:	9908      	ldr	r1, [sp, #32]
    4a9a:	eeb0 8a47 	vmov.f32	s16, s14
    4a9e:	eef0 8a67 	vmov.f32	s17, s15
    4aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4aa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    4aaa:	2900      	cmp	r1, #0
    4aac:	d045      	beq.n	4b3a <_dtoa_r+0x5aa>
    4aae:	494f      	ldr	r1, [pc, #316]	; (4bec <_dtoa_r+0x65c>)
    4ab0:	2000      	movs	r0, #0
    4ab2:	f7fb fe5b 	bl	76c <__aeabi_ddiv>
    4ab6:	ec53 2b18 	vmov	r2, r3, d8
    4aba:	f7fb fb75 	bl	1a8 <__aeabi_dsub>
    4abe:	9d00      	ldr	r5, [sp, #0]
    4ac0:	ec41 0b18 	vmov	d8, r0, r1
    4ac4:	4639      	mov	r1, r7
    4ac6:	4630      	mov	r0, r6
    4ac8:	f7fb ffc0 	bl	a4c <__aeabi_d2iz>
    4acc:	900c      	str	r0, [sp, #48]	; 0x30
    4ace:	f7fb fcb9 	bl	444 <__aeabi_i2d>
    4ad2:	4602      	mov	r2, r0
    4ad4:	460b      	mov	r3, r1
    4ad6:	4630      	mov	r0, r6
    4ad8:	4639      	mov	r1, r7
    4ada:	f7fb fb65 	bl	1a8 <__aeabi_dsub>
    4ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ae0:	3330      	adds	r3, #48	; 0x30
    4ae2:	f805 3b01 	strb.w	r3, [r5], #1
    4ae6:	ec53 2b18 	vmov	r2, r3, d8
    4aea:	4606      	mov	r6, r0
    4aec:	460f      	mov	r7, r1
    4aee:	f7fb ff85 	bl	9fc <__aeabi_dcmplt>
    4af2:	2800      	cmp	r0, #0
    4af4:	d165      	bne.n	4bc2 <_dtoa_r+0x632>
    4af6:	4632      	mov	r2, r6
    4af8:	463b      	mov	r3, r7
    4afa:	4938      	ldr	r1, [pc, #224]	; (4bdc <_dtoa_r+0x64c>)
    4afc:	2000      	movs	r0, #0
    4afe:	f7fb fb53 	bl	1a8 <__aeabi_dsub>
    4b02:	ec53 2b18 	vmov	r2, r3, d8
    4b06:	f7fb ff79 	bl	9fc <__aeabi_dcmplt>
    4b0a:	2800      	cmp	r0, #0
    4b0c:	f040 80b8 	bne.w	4c80 <_dtoa_r+0x6f0>
    4b10:	9b02      	ldr	r3, [sp, #8]
    4b12:	429d      	cmp	r5, r3
    4b14:	f43f af71 	beq.w	49fa <_dtoa_r+0x46a>
    4b18:	4b31      	ldr	r3, [pc, #196]	; (4be0 <_dtoa_r+0x650>)
    4b1a:	ec51 0b18 	vmov	r0, r1, d8
    4b1e:	2200      	movs	r2, #0
    4b20:	f7fb fcfa 	bl	518 <__aeabi_dmul>
    4b24:	4b2e      	ldr	r3, [pc, #184]	; (4be0 <_dtoa_r+0x650>)
    4b26:	ec41 0b18 	vmov	d8, r0, r1
    4b2a:	2200      	movs	r2, #0
    4b2c:	4630      	mov	r0, r6
    4b2e:	4639      	mov	r1, r7
    4b30:	f7fb fcf2 	bl	518 <__aeabi_dmul>
    4b34:	4606      	mov	r6, r0
    4b36:	460f      	mov	r7, r1
    4b38:	e7c4      	b.n	4ac4 <_dtoa_r+0x534>
    4b3a:	ec51 0b17 	vmov	r0, r1, d7
    4b3e:	f7fb fceb 	bl	518 <__aeabi_dmul>
    4b42:	9b02      	ldr	r3, [sp, #8]
    4b44:	9d00      	ldr	r5, [sp, #0]
    4b46:	930c      	str	r3, [sp, #48]	; 0x30
    4b48:	ec41 0b18 	vmov	d8, r0, r1
    4b4c:	4639      	mov	r1, r7
    4b4e:	4630      	mov	r0, r6
    4b50:	f7fb ff7c 	bl	a4c <__aeabi_d2iz>
    4b54:	9011      	str	r0, [sp, #68]	; 0x44
    4b56:	f7fb fc75 	bl	444 <__aeabi_i2d>
    4b5a:	4602      	mov	r2, r0
    4b5c:	460b      	mov	r3, r1
    4b5e:	4630      	mov	r0, r6
    4b60:	4639      	mov	r1, r7
    4b62:	f7fb fb21 	bl	1a8 <__aeabi_dsub>
    4b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b68:	3330      	adds	r3, #48	; 0x30
    4b6a:	f805 3b01 	strb.w	r3, [r5], #1
    4b6e:	9b02      	ldr	r3, [sp, #8]
    4b70:	429d      	cmp	r5, r3
    4b72:	4606      	mov	r6, r0
    4b74:	460f      	mov	r7, r1
    4b76:	f04f 0200 	mov.w	r2, #0
    4b7a:	d125      	bne.n	4bc8 <_dtoa_r+0x638>
    4b7c:	4b1b      	ldr	r3, [pc, #108]	; (4bec <_dtoa_r+0x65c>)
    4b7e:	ec51 0b18 	vmov	r0, r1, d8
    4b82:	f7fb fb13 	bl	1ac <__adddf3>
    4b86:	4602      	mov	r2, r0
    4b88:	460b      	mov	r3, r1
    4b8a:	4630      	mov	r0, r6
    4b8c:	4639      	mov	r1, r7
    4b8e:	f7fb ff53 	bl	a38 <__aeabi_dcmpgt>
    4b92:	2800      	cmp	r0, #0
    4b94:	d174      	bne.n	4c80 <_dtoa_r+0x6f0>
    4b96:	ec53 2b18 	vmov	r2, r3, d8
    4b9a:	4914      	ldr	r1, [pc, #80]	; (4bec <_dtoa_r+0x65c>)
    4b9c:	2000      	movs	r0, #0
    4b9e:	f7fb fb03 	bl	1a8 <__aeabi_dsub>
    4ba2:	4602      	mov	r2, r0
    4ba4:	460b      	mov	r3, r1
    4ba6:	4630      	mov	r0, r6
    4ba8:	4639      	mov	r1, r7
    4baa:	f7fb ff27 	bl	9fc <__aeabi_dcmplt>
    4bae:	2800      	cmp	r0, #0
    4bb0:	f43f af23 	beq.w	49fa <_dtoa_r+0x46a>
    4bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4bb6:	1e6b      	subs	r3, r5, #1
    4bb8:	930c      	str	r3, [sp, #48]	; 0x30
    4bba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    4bbe:	2b30      	cmp	r3, #48	; 0x30
    4bc0:	d0f8      	beq.n	4bb4 <_dtoa_r+0x624>
    4bc2:	f8dd 901c 	ldr.w	r9, [sp, #28]
    4bc6:	e049      	b.n	4c5c <_dtoa_r+0x6cc>
    4bc8:	4b05      	ldr	r3, [pc, #20]	; (4be0 <_dtoa_r+0x650>)
    4bca:	f7fb fca5 	bl	518 <__aeabi_dmul>
    4bce:	4606      	mov	r6, r0
    4bd0:	460f      	mov	r7, r1
    4bd2:	e7bb      	b.n	4b4c <_dtoa_r+0x5bc>
    4bd4:	00017ae8 	.word	0x00017ae8
    4bd8:	00017ac0 	.word	0x00017ac0
    4bdc:	3ff00000 	.word	0x3ff00000
    4be0:	40240000 	.word	0x40240000
    4be4:	401c0000 	.word	0x401c0000
    4be8:	40140000 	.word	0x40140000
    4bec:	3fe00000 	.word	0x3fe00000
    4bf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    4bf4:	9d00      	ldr	r5, [sp, #0]
    4bf6:	ec53 2b18 	vmov	r2, r3, d8
    4bfa:	4630      	mov	r0, r6
    4bfc:	4639      	mov	r1, r7
    4bfe:	f7fb fdb5 	bl	76c <__aeabi_ddiv>
    4c02:	f7fb ff23 	bl	a4c <__aeabi_d2iz>
    4c06:	4680      	mov	r8, r0
    4c08:	f7fb fc1c 	bl	444 <__aeabi_i2d>
    4c0c:	ec53 2b18 	vmov	r2, r3, d8
    4c10:	f7fb fc82 	bl	518 <__aeabi_dmul>
    4c14:	4602      	mov	r2, r0
    4c16:	460b      	mov	r3, r1
    4c18:	4630      	mov	r0, r6
    4c1a:	4639      	mov	r1, r7
    4c1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
    4c20:	f7fb fac2 	bl	1a8 <__aeabi_dsub>
    4c24:	f805 6b01 	strb.w	r6, [r5], #1
    4c28:	9e00      	ldr	r6, [sp, #0]
    4c2a:	9f01      	ldr	r7, [sp, #4]
    4c2c:	1bae      	subs	r6, r5, r6
    4c2e:	42b7      	cmp	r7, r6
    4c30:	4602      	mov	r2, r0
    4c32:	460b      	mov	r3, r1
    4c34:	d137      	bne.n	4ca6 <_dtoa_r+0x716>
    4c36:	f7fb fab9 	bl	1ac <__adddf3>
    4c3a:	ec53 2b18 	vmov	r2, r3, d8
    4c3e:	4606      	mov	r6, r0
    4c40:	460f      	mov	r7, r1
    4c42:	f7fb fef9 	bl	a38 <__aeabi_dcmpgt>
    4c46:	b9c8      	cbnz	r0, 4c7c <_dtoa_r+0x6ec>
    4c48:	ec53 2b18 	vmov	r2, r3, d8
    4c4c:	4630      	mov	r0, r6
    4c4e:	4639      	mov	r1, r7
    4c50:	f7fb feca 	bl	9e8 <__aeabi_dcmpeq>
    4c54:	b110      	cbz	r0, 4c5c <_dtoa_r+0x6cc>
    4c56:	f018 0f01 	tst.w	r8, #1
    4c5a:	d10f      	bne.n	4c7c <_dtoa_r+0x6ec>
    4c5c:	4620      	mov	r0, r4
    4c5e:	4651      	mov	r1, sl
    4c60:	f011 fcf1 	bl	16646 <_Bfree>
    4c64:	2300      	movs	r3, #0
    4c66:	702b      	strb	r3, [r5, #0]
    4c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4c6a:	f109 0001 	add.w	r0, r9, #1
    4c6e:	6018      	str	r0, [r3, #0]
    4c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4c72:	2b00      	cmp	r3, #0
    4c74:	f43f acd7 	beq.w	4626 <_dtoa_r+0x96>
    4c78:	601d      	str	r5, [r3, #0]
    4c7a:	e4d4      	b.n	4626 <_dtoa_r+0x96>
    4c7c:	f8cd 901c 	str.w	r9, [sp, #28]
    4c80:	462b      	mov	r3, r5
    4c82:	461d      	mov	r5, r3
    4c84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    4c88:	2a39      	cmp	r2, #57	; 0x39
    4c8a:	d108      	bne.n	4c9e <_dtoa_r+0x70e>
    4c8c:	9a00      	ldr	r2, [sp, #0]
    4c8e:	429a      	cmp	r2, r3
    4c90:	d1f7      	bne.n	4c82 <_dtoa_r+0x6f2>
    4c92:	9a07      	ldr	r2, [sp, #28]
    4c94:	9900      	ldr	r1, [sp, #0]
    4c96:	3201      	adds	r2, #1
    4c98:	9207      	str	r2, [sp, #28]
    4c9a:	2230      	movs	r2, #48	; 0x30
    4c9c:	700a      	strb	r2, [r1, #0]
    4c9e:	781a      	ldrb	r2, [r3, #0]
    4ca0:	3201      	adds	r2, #1
    4ca2:	701a      	strb	r2, [r3, #0]
    4ca4:	e78d      	b.n	4bc2 <_dtoa_r+0x632>
    4ca6:	4b9e      	ldr	r3, [pc, #632]	; (4f20 <_dtoa_r+0x990>)
    4ca8:	2200      	movs	r2, #0
    4caa:	f7fb fc35 	bl	518 <__aeabi_dmul>
    4cae:	2200      	movs	r2, #0
    4cb0:	2300      	movs	r3, #0
    4cb2:	4606      	mov	r6, r0
    4cb4:	460f      	mov	r7, r1
    4cb6:	f7fb fe97 	bl	9e8 <__aeabi_dcmpeq>
    4cba:	2800      	cmp	r0, #0
    4cbc:	d09b      	beq.n	4bf6 <_dtoa_r+0x666>
    4cbe:	e7cd      	b.n	4c5c <_dtoa_r+0x6cc>
    4cc0:	9a08      	ldr	r2, [sp, #32]
    4cc2:	2a00      	cmp	r2, #0
    4cc4:	f000 80c6 	beq.w	4e54 <_dtoa_r+0x8c4>
    4cc8:	9a05      	ldr	r2, [sp, #20]
    4cca:	2a01      	cmp	r2, #1
    4ccc:	f300 80aa 	bgt.w	4e24 <_dtoa_r+0x894>
    4cd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4cd2:	2a00      	cmp	r2, #0
    4cd4:	f000 80a2 	beq.w	4e1c <_dtoa_r+0x88c>
    4cd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
    4cdc:	9e06      	ldr	r6, [sp, #24]
    4cde:	4645      	mov	r5, r8
    4ce0:	9a04      	ldr	r2, [sp, #16]
    4ce2:	2101      	movs	r1, #1
    4ce4:	441a      	add	r2, r3
    4ce6:	4620      	mov	r0, r4
    4ce8:	4498      	add	r8, r3
    4cea:	9204      	str	r2, [sp, #16]
    4cec:	f011 fd50 	bl	16790 <__i2b>
    4cf0:	4607      	mov	r7, r0
    4cf2:	2d00      	cmp	r5, #0
    4cf4:	dd0b      	ble.n	4d0e <_dtoa_r+0x77e>
    4cf6:	9b04      	ldr	r3, [sp, #16]
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	dd08      	ble.n	4d0e <_dtoa_r+0x77e>
    4cfc:	42ab      	cmp	r3, r5
    4cfe:	9a04      	ldr	r2, [sp, #16]
    4d00:	bfa8      	it	ge
    4d02:	462b      	movge	r3, r5
    4d04:	eba8 0803 	sub.w	r8, r8, r3
    4d08:	1aed      	subs	r5, r5, r3
    4d0a:	1ad3      	subs	r3, r2, r3
    4d0c:	9304      	str	r3, [sp, #16]
    4d0e:	9b06      	ldr	r3, [sp, #24]
    4d10:	b1fb      	cbz	r3, 4d52 <_dtoa_r+0x7c2>
    4d12:	9b08      	ldr	r3, [sp, #32]
    4d14:	2b00      	cmp	r3, #0
    4d16:	f000 80a1 	beq.w	4e5c <_dtoa_r+0x8cc>
    4d1a:	2e00      	cmp	r6, #0
    4d1c:	dd11      	ble.n	4d42 <_dtoa_r+0x7b2>
    4d1e:	4639      	mov	r1, r7
    4d20:	4632      	mov	r2, r6
    4d22:	4620      	mov	r0, r4
    4d24:	f00c fb96 	bl	11454 <__pow5mult>
    4d28:	4652      	mov	r2, sl
    4d2a:	4601      	mov	r1, r0
    4d2c:	4607      	mov	r7, r0
    4d2e:	4620      	mov	r0, r4
    4d30:	f011 fd37 	bl	167a2 <__multiply>
    4d34:	4651      	mov	r1, sl
    4d36:	9007      	str	r0, [sp, #28]
    4d38:	4620      	mov	r0, r4
    4d3a:	f011 fc84 	bl	16646 <_Bfree>
    4d3e:	9b07      	ldr	r3, [sp, #28]
    4d40:	469a      	mov	sl, r3
    4d42:	9b06      	ldr	r3, [sp, #24]
    4d44:	1b9a      	subs	r2, r3, r6
    4d46:	d004      	beq.n	4d52 <_dtoa_r+0x7c2>
    4d48:	4651      	mov	r1, sl
    4d4a:	4620      	mov	r0, r4
    4d4c:	f00c fb82 	bl	11454 <__pow5mult>
    4d50:	4682      	mov	sl, r0
    4d52:	2101      	movs	r1, #1
    4d54:	4620      	mov	r0, r4
    4d56:	f011 fd1b 	bl	16790 <__i2b>
    4d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	4606      	mov	r6, r0
    4d60:	dd7e      	ble.n	4e60 <_dtoa_r+0x8d0>
    4d62:	461a      	mov	r2, r3
    4d64:	4601      	mov	r1, r0
    4d66:	4620      	mov	r0, r4
    4d68:	f00c fb74 	bl	11454 <__pow5mult>
    4d6c:	9b05      	ldr	r3, [sp, #20]
    4d6e:	2b01      	cmp	r3, #1
    4d70:	4606      	mov	r6, r0
    4d72:	dd78      	ble.n	4e66 <_dtoa_r+0x8d6>
    4d74:	2300      	movs	r3, #0
    4d76:	9306      	str	r3, [sp, #24]
    4d78:	6933      	ldr	r3, [r6, #16]
    4d7a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4d7e:	6918      	ldr	r0, [r3, #16]
    4d80:	f011 fcb6 	bl	166f0 <__hi0bits>
    4d84:	f1c0 0020 	rsb	r0, r0, #32
    4d88:	9b04      	ldr	r3, [sp, #16]
    4d8a:	4418      	add	r0, r3
    4d8c:	f010 001f 	ands.w	r0, r0, #31
    4d90:	f000 8088 	beq.w	4ea4 <_dtoa_r+0x914>
    4d94:	f1c0 0320 	rsb	r3, r0, #32
    4d98:	2b04      	cmp	r3, #4
    4d9a:	f340 8081 	ble.w	4ea0 <_dtoa_r+0x910>
    4d9e:	f1c0 001c 	rsb	r0, r0, #28
    4da2:	9b04      	ldr	r3, [sp, #16]
    4da4:	4403      	add	r3, r0
    4da6:	4480      	add	r8, r0
    4da8:	4405      	add	r5, r0
    4daa:	9304      	str	r3, [sp, #16]
    4dac:	f1b8 0f00 	cmp.w	r8, #0
    4db0:	dd05      	ble.n	4dbe <_dtoa_r+0x82e>
    4db2:	4651      	mov	r1, sl
    4db4:	4642      	mov	r2, r8
    4db6:	4620      	mov	r0, r4
    4db8:	f011 fd8f 	bl	168da <__lshift>
    4dbc:	4682      	mov	sl, r0
    4dbe:	9b04      	ldr	r3, [sp, #16]
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	dd05      	ble.n	4dd0 <_dtoa_r+0x840>
    4dc4:	4631      	mov	r1, r6
    4dc6:	461a      	mov	r2, r3
    4dc8:	4620      	mov	r0, r4
    4dca:	f011 fd86 	bl	168da <__lshift>
    4dce:	4606      	mov	r6, r0
    4dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d068      	beq.n	4ea8 <_dtoa_r+0x918>
    4dd6:	4631      	mov	r1, r6
    4dd8:	4650      	mov	r0, sl
    4dda:	f011 fddd 	bl	16998 <__mcmp>
    4dde:	2800      	cmp	r0, #0
    4de0:	da62      	bge.n	4ea8 <_dtoa_r+0x918>
    4de2:	2300      	movs	r3, #0
    4de4:	4651      	mov	r1, sl
    4de6:	220a      	movs	r2, #10
    4de8:	4620      	mov	r0, r4
    4dea:	f011 fc43 	bl	16674 <__multadd>
    4dee:	9b08      	ldr	r3, [sp, #32]
    4df0:	f109 39ff 	add.w	r9, r9, #4294967295
    4df4:	4682      	mov	sl, r0
    4df6:	2b00      	cmp	r3, #0
    4df8:	f000 8188 	beq.w	510c <_dtoa_r+0xb7c>
    4dfc:	4639      	mov	r1, r7
    4dfe:	2300      	movs	r3, #0
    4e00:	220a      	movs	r2, #10
    4e02:	4620      	mov	r0, r4
    4e04:	f011 fc36 	bl	16674 <__multadd>
    4e08:	f1bb 0f00 	cmp.w	fp, #0
    4e0c:	4607      	mov	r7, r0
    4e0e:	f300 808f 	bgt.w	4f30 <_dtoa_r+0x9a0>
    4e12:	9b05      	ldr	r3, [sp, #20]
    4e14:	2b02      	cmp	r3, #2
    4e16:	f340 808b 	ble.w	4f30 <_dtoa_r+0x9a0>
    4e1a:	e04d      	b.n	4eb8 <_dtoa_r+0x928>
    4e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4e1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4e22:	e75b      	b.n	4cdc <_dtoa_r+0x74c>
    4e24:	9b01      	ldr	r3, [sp, #4]
    4e26:	1e5e      	subs	r6, r3, #1
    4e28:	9b06      	ldr	r3, [sp, #24]
    4e2a:	42b3      	cmp	r3, r6
    4e2c:	bfbf      	itttt	lt
    4e2e:	9b06      	ldrlt	r3, [sp, #24]
    4e30:	9606      	strlt	r6, [sp, #24]
    4e32:	1af2      	sublt	r2, r6, r3
    4e34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
    4e36:	bfb6      	itet	lt
    4e38:	189b      	addlt	r3, r3, r2
    4e3a:	1b9e      	subge	r6, r3, r6
    4e3c:	930d      	strlt	r3, [sp, #52]	; 0x34
    4e3e:	9b01      	ldr	r3, [sp, #4]
    4e40:	bfb8      	it	lt
    4e42:	2600      	movlt	r6, #0
    4e44:	2b00      	cmp	r3, #0
    4e46:	bfb5      	itete	lt
    4e48:	eba8 0503 	sublt.w	r5, r8, r3
    4e4c:	9b01      	ldrge	r3, [sp, #4]
    4e4e:	2300      	movlt	r3, #0
    4e50:	4645      	movge	r5, r8
    4e52:	e745      	b.n	4ce0 <_dtoa_r+0x750>
    4e54:	9e06      	ldr	r6, [sp, #24]
    4e56:	9f08      	ldr	r7, [sp, #32]
    4e58:	4645      	mov	r5, r8
    4e5a:	e74a      	b.n	4cf2 <_dtoa_r+0x762>
    4e5c:	9a06      	ldr	r2, [sp, #24]
    4e5e:	e773      	b.n	4d48 <_dtoa_r+0x7b8>
    4e60:	9b05      	ldr	r3, [sp, #20]
    4e62:	2b01      	cmp	r3, #1
    4e64:	dc18      	bgt.n	4e98 <_dtoa_r+0x908>
    4e66:	9b02      	ldr	r3, [sp, #8]
    4e68:	b9b3      	cbnz	r3, 4e98 <_dtoa_r+0x908>
    4e6a:	9b03      	ldr	r3, [sp, #12]
    4e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4e70:	b9a3      	cbnz	r3, 4e9c <_dtoa_r+0x90c>
    4e72:	9b03      	ldr	r3, [sp, #12]
    4e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    4e78:	0d1b      	lsrs	r3, r3, #20
    4e7a:	051b      	lsls	r3, r3, #20
    4e7c:	b12b      	cbz	r3, 4e8a <_dtoa_r+0x8fa>
    4e7e:	9b04      	ldr	r3, [sp, #16]
    4e80:	3301      	adds	r3, #1
    4e82:	9304      	str	r3, [sp, #16]
    4e84:	f108 0801 	add.w	r8, r8, #1
    4e88:	2301      	movs	r3, #1
    4e8a:	9306      	str	r3, [sp, #24]
    4e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4e8e:	2b00      	cmp	r3, #0
    4e90:	f47f af72 	bne.w	4d78 <_dtoa_r+0x7e8>
    4e94:	2001      	movs	r0, #1
    4e96:	e777      	b.n	4d88 <_dtoa_r+0x7f8>
    4e98:	2300      	movs	r3, #0
    4e9a:	e7f6      	b.n	4e8a <_dtoa_r+0x8fa>
    4e9c:	9b02      	ldr	r3, [sp, #8]
    4e9e:	e7f4      	b.n	4e8a <_dtoa_r+0x8fa>
    4ea0:	d084      	beq.n	4dac <_dtoa_r+0x81c>
    4ea2:	4618      	mov	r0, r3
    4ea4:	301c      	adds	r0, #28
    4ea6:	e77c      	b.n	4da2 <_dtoa_r+0x812>
    4ea8:	9b01      	ldr	r3, [sp, #4]
    4eaa:	2b00      	cmp	r3, #0
    4eac:	dc3a      	bgt.n	4f24 <_dtoa_r+0x994>
    4eae:	9b05      	ldr	r3, [sp, #20]
    4eb0:	2b02      	cmp	r3, #2
    4eb2:	dd37      	ble.n	4f24 <_dtoa_r+0x994>
    4eb4:	f8dd b004 	ldr.w	fp, [sp, #4]
    4eb8:	f1bb 0f00 	cmp.w	fp, #0
    4ebc:	d10d      	bne.n	4eda <_dtoa_r+0x94a>
    4ebe:	4631      	mov	r1, r6
    4ec0:	465b      	mov	r3, fp
    4ec2:	2205      	movs	r2, #5
    4ec4:	4620      	mov	r0, r4
    4ec6:	f011 fbd5 	bl	16674 <__multadd>
    4eca:	4601      	mov	r1, r0
    4ecc:	4606      	mov	r6, r0
    4ece:	4650      	mov	r0, sl
    4ed0:	f011 fd62 	bl	16998 <__mcmp>
    4ed4:	2800      	cmp	r0, #0
    4ed6:	f73f adbe 	bgt.w	4a56 <_dtoa_r+0x4c6>
    4eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4edc:	9d00      	ldr	r5, [sp, #0]
    4ede:	ea6f 0903 	mvn.w	r9, r3
    4ee2:	f04f 0800 	mov.w	r8, #0
    4ee6:	4631      	mov	r1, r6
    4ee8:	4620      	mov	r0, r4
    4eea:	f011 fbac 	bl	16646 <_Bfree>
    4eee:	2f00      	cmp	r7, #0
    4ef0:	f43f aeb4 	beq.w	4c5c <_dtoa_r+0x6cc>
    4ef4:	f1b8 0f00 	cmp.w	r8, #0
    4ef8:	d005      	beq.n	4f06 <_dtoa_r+0x976>
    4efa:	45b8      	cmp	r8, r7
    4efc:	d003      	beq.n	4f06 <_dtoa_r+0x976>
    4efe:	4641      	mov	r1, r8
    4f00:	4620      	mov	r0, r4
    4f02:	f011 fba0 	bl	16646 <_Bfree>
    4f06:	4639      	mov	r1, r7
    4f08:	4620      	mov	r0, r4
    4f0a:	f011 fb9c 	bl	16646 <_Bfree>
    4f0e:	e6a5      	b.n	4c5c <_dtoa_r+0x6cc>
    4f10:	2600      	movs	r6, #0
    4f12:	4637      	mov	r7, r6
    4f14:	e7e1      	b.n	4eda <_dtoa_r+0x94a>
    4f16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4f18:	f8dd 901c 	ldr.w	r9, [sp, #28]
    4f1c:	4637      	mov	r7, r6
    4f1e:	e59a      	b.n	4a56 <_dtoa_r+0x4c6>
    4f20:	40240000 	.word	0x40240000
    4f24:	9b08      	ldr	r3, [sp, #32]
    4f26:	f8dd b004 	ldr.w	fp, [sp, #4]
    4f2a:	2b00      	cmp	r3, #0
    4f2c:	f000 80f5 	beq.w	511a <_dtoa_r+0xb8a>
    4f30:	2d00      	cmp	r5, #0
    4f32:	dd05      	ble.n	4f40 <_dtoa_r+0x9b0>
    4f34:	4639      	mov	r1, r7
    4f36:	462a      	mov	r2, r5
    4f38:	4620      	mov	r0, r4
    4f3a:	f011 fcce 	bl	168da <__lshift>
    4f3e:	4607      	mov	r7, r0
    4f40:	9b06      	ldr	r3, [sp, #24]
    4f42:	2b00      	cmp	r3, #0
    4f44:	d055      	beq.n	4ff2 <_dtoa_r+0xa62>
    4f46:	6879      	ldr	r1, [r7, #4]
    4f48:	4620      	mov	r0, r4
    4f4a:	f011 fb48 	bl	165de <_Balloc>
    4f4e:	693a      	ldr	r2, [r7, #16]
    4f50:	3202      	adds	r2, #2
    4f52:	4605      	mov	r5, r0
    4f54:	0092      	lsls	r2, r2, #2
    4f56:	f107 010c 	add.w	r1, r7, #12
    4f5a:	300c      	adds	r0, #12
    4f5c:	f011 f87b 	bl	16056 <memcpy>
    4f60:	2201      	movs	r2, #1
    4f62:	4629      	mov	r1, r5
    4f64:	4620      	mov	r0, r4
    4f66:	f011 fcb8 	bl	168da <__lshift>
    4f6a:	9b00      	ldr	r3, [sp, #0]
    4f6c:	3301      	adds	r3, #1
    4f6e:	9301      	str	r3, [sp, #4]
    4f70:	9b00      	ldr	r3, [sp, #0]
    4f72:	445b      	add	r3, fp
    4f74:	9307      	str	r3, [sp, #28]
    4f76:	9b02      	ldr	r3, [sp, #8]
    4f78:	f003 0301 	and.w	r3, r3, #1
    4f7c:	46b8      	mov	r8, r7
    4f7e:	9306      	str	r3, [sp, #24]
    4f80:	4607      	mov	r7, r0
    4f82:	9b01      	ldr	r3, [sp, #4]
    4f84:	4631      	mov	r1, r6
    4f86:	4650      	mov	r0, sl
    4f88:	f103 3bff 	add.w	fp, r3, #4294967295
    4f8c:	f011 fa43 	bl	16416 <quorem>
    4f90:	4603      	mov	r3, r0
    4f92:	3330      	adds	r3, #48	; 0x30
    4f94:	9002      	str	r0, [sp, #8]
    4f96:	4641      	mov	r1, r8
    4f98:	4650      	mov	r0, sl
    4f9a:	9308      	str	r3, [sp, #32]
    4f9c:	f011 fcfc 	bl	16998 <__mcmp>
    4fa0:	463a      	mov	r2, r7
    4fa2:	9004      	str	r0, [sp, #16]
    4fa4:	4631      	mov	r1, r6
    4fa6:	4620      	mov	r0, r4
    4fa8:	f011 fd12 	bl	169d0 <__mdiff>
    4fac:	68c2      	ldr	r2, [r0, #12]
    4fae:	9b08      	ldr	r3, [sp, #32]
    4fb0:	4605      	mov	r5, r0
    4fb2:	bb02      	cbnz	r2, 4ff6 <_dtoa_r+0xa66>
    4fb4:	4601      	mov	r1, r0
    4fb6:	4650      	mov	r0, sl
    4fb8:	f011 fcee 	bl	16998 <__mcmp>
    4fbc:	9b08      	ldr	r3, [sp, #32]
    4fbe:	4602      	mov	r2, r0
    4fc0:	4629      	mov	r1, r5
    4fc2:	4620      	mov	r0, r4
    4fc4:	e9cd 3208 	strd	r3, r2, [sp, #32]
    4fc8:	f011 fb3d 	bl	16646 <_Bfree>
    4fcc:	9b05      	ldr	r3, [sp, #20]
    4fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4fd0:	9d01      	ldr	r5, [sp, #4]
    4fd2:	ea43 0102 	orr.w	r1, r3, r2
    4fd6:	9b06      	ldr	r3, [sp, #24]
    4fd8:	430b      	orrs	r3, r1
    4fda:	9b08      	ldr	r3, [sp, #32]
    4fdc:	d10d      	bne.n	4ffa <_dtoa_r+0xa6a>
    4fde:	2b39      	cmp	r3, #57	; 0x39
    4fe0:	d027      	beq.n	5032 <_dtoa_r+0xaa2>
    4fe2:	9a04      	ldr	r2, [sp, #16]
    4fe4:	2a00      	cmp	r2, #0
    4fe6:	dd01      	ble.n	4fec <_dtoa_r+0xa5c>
    4fe8:	9b02      	ldr	r3, [sp, #8]
    4fea:	3331      	adds	r3, #49	; 0x31
    4fec:	f88b 3000 	strb.w	r3, [fp]
    4ff0:	e779      	b.n	4ee6 <_dtoa_r+0x956>
    4ff2:	4638      	mov	r0, r7
    4ff4:	e7b9      	b.n	4f6a <_dtoa_r+0x9da>
    4ff6:	2201      	movs	r2, #1
    4ff8:	e7e2      	b.n	4fc0 <_dtoa_r+0xa30>
    4ffa:	9904      	ldr	r1, [sp, #16]
    4ffc:	2900      	cmp	r1, #0
    4ffe:	db04      	blt.n	500a <_dtoa_r+0xa7a>
    5000:	9805      	ldr	r0, [sp, #20]
    5002:	4301      	orrs	r1, r0
    5004:	9806      	ldr	r0, [sp, #24]
    5006:	4301      	orrs	r1, r0
    5008:	d120      	bne.n	504c <_dtoa_r+0xabc>
    500a:	2a00      	cmp	r2, #0
    500c:	ddee      	ble.n	4fec <_dtoa_r+0xa5c>
    500e:	4651      	mov	r1, sl
    5010:	2201      	movs	r2, #1
    5012:	4620      	mov	r0, r4
    5014:	9301      	str	r3, [sp, #4]
    5016:	f011 fc60 	bl	168da <__lshift>
    501a:	4631      	mov	r1, r6
    501c:	4682      	mov	sl, r0
    501e:	f011 fcbb 	bl	16998 <__mcmp>
    5022:	2800      	cmp	r0, #0
    5024:	9b01      	ldr	r3, [sp, #4]
    5026:	dc02      	bgt.n	502e <_dtoa_r+0xa9e>
    5028:	d1e0      	bne.n	4fec <_dtoa_r+0xa5c>
    502a:	07da      	lsls	r2, r3, #31
    502c:	d5de      	bpl.n	4fec <_dtoa_r+0xa5c>
    502e:	2b39      	cmp	r3, #57	; 0x39
    5030:	d1da      	bne.n	4fe8 <_dtoa_r+0xa58>
    5032:	2339      	movs	r3, #57	; 0x39
    5034:	f88b 3000 	strb.w	r3, [fp]
    5038:	462b      	mov	r3, r5
    503a:	461d      	mov	r5, r3
    503c:	3b01      	subs	r3, #1
    503e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    5042:	2a39      	cmp	r2, #57	; 0x39
    5044:	d050      	beq.n	50e8 <_dtoa_r+0xb58>
    5046:	3201      	adds	r2, #1
    5048:	701a      	strb	r2, [r3, #0]
    504a:	e74c      	b.n	4ee6 <_dtoa_r+0x956>
    504c:	2a00      	cmp	r2, #0
    504e:	dd03      	ble.n	5058 <_dtoa_r+0xac8>
    5050:	2b39      	cmp	r3, #57	; 0x39
    5052:	d0ee      	beq.n	5032 <_dtoa_r+0xaa2>
    5054:	3301      	adds	r3, #1
    5056:	e7c9      	b.n	4fec <_dtoa_r+0xa5c>
    5058:	9a01      	ldr	r2, [sp, #4]
    505a:	9907      	ldr	r1, [sp, #28]
    505c:	f802 3c01 	strb.w	r3, [r2, #-1]
    5060:	428a      	cmp	r2, r1
    5062:	d02a      	beq.n	50ba <_dtoa_r+0xb2a>
    5064:	4651      	mov	r1, sl
    5066:	2300      	movs	r3, #0
    5068:	220a      	movs	r2, #10
    506a:	4620      	mov	r0, r4
    506c:	f011 fb02 	bl	16674 <__multadd>
    5070:	45b8      	cmp	r8, r7
    5072:	4682      	mov	sl, r0
    5074:	f04f 0300 	mov.w	r3, #0
    5078:	f04f 020a 	mov.w	r2, #10
    507c:	4641      	mov	r1, r8
    507e:	4620      	mov	r0, r4
    5080:	d107      	bne.n	5092 <_dtoa_r+0xb02>
    5082:	f011 faf7 	bl	16674 <__multadd>
    5086:	4680      	mov	r8, r0
    5088:	4607      	mov	r7, r0
    508a:	9b01      	ldr	r3, [sp, #4]
    508c:	3301      	adds	r3, #1
    508e:	9301      	str	r3, [sp, #4]
    5090:	e777      	b.n	4f82 <_dtoa_r+0x9f2>
    5092:	f011 faef 	bl	16674 <__multadd>
    5096:	4639      	mov	r1, r7
    5098:	4680      	mov	r8, r0
    509a:	2300      	movs	r3, #0
    509c:	220a      	movs	r2, #10
    509e:	4620      	mov	r0, r4
    50a0:	f011 fae8 	bl	16674 <__multadd>
    50a4:	4607      	mov	r7, r0
    50a6:	e7f0      	b.n	508a <_dtoa_r+0xafa>
    50a8:	f1bb 0f00 	cmp.w	fp, #0
    50ac:	9a00      	ldr	r2, [sp, #0]
    50ae:	bfcc      	ite	gt
    50b0:	465d      	movgt	r5, fp
    50b2:	2501      	movle	r5, #1
    50b4:	4415      	add	r5, r2
    50b6:	f04f 0800 	mov.w	r8, #0
    50ba:	4651      	mov	r1, sl
    50bc:	2201      	movs	r2, #1
    50be:	4620      	mov	r0, r4
    50c0:	9301      	str	r3, [sp, #4]
    50c2:	f011 fc0a 	bl	168da <__lshift>
    50c6:	4631      	mov	r1, r6
    50c8:	4682      	mov	sl, r0
    50ca:	f011 fc65 	bl	16998 <__mcmp>
    50ce:	2800      	cmp	r0, #0
    50d0:	dcb2      	bgt.n	5038 <_dtoa_r+0xaa8>
    50d2:	d102      	bne.n	50da <_dtoa_r+0xb4a>
    50d4:	9b01      	ldr	r3, [sp, #4]
    50d6:	07db      	lsls	r3, r3, #31
    50d8:	d4ae      	bmi.n	5038 <_dtoa_r+0xaa8>
    50da:	462b      	mov	r3, r5
    50dc:	461d      	mov	r5, r3
    50de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    50e2:	2a30      	cmp	r2, #48	; 0x30
    50e4:	d0fa      	beq.n	50dc <_dtoa_r+0xb4c>
    50e6:	e6fe      	b.n	4ee6 <_dtoa_r+0x956>
    50e8:	9a00      	ldr	r2, [sp, #0]
    50ea:	429a      	cmp	r2, r3
    50ec:	d1a5      	bne.n	503a <_dtoa_r+0xaaa>
    50ee:	2331      	movs	r3, #49	; 0x31
    50f0:	f109 0901 	add.w	r9, r9, #1
    50f4:	7013      	strb	r3, [r2, #0]
    50f6:	e6f6      	b.n	4ee6 <_dtoa_r+0x956>
    50f8:	4b12      	ldr	r3, [pc, #72]	; (5144 <_dtoa_r+0xbb4>)
    50fa:	f7ff bab5 	b.w	4668 <_dtoa_r+0xd8>
    50fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
    5100:	2b00      	cmp	r3, #0
    5102:	f47f aa8b 	bne.w	461c <_dtoa_r+0x8c>
    5106:	4b10      	ldr	r3, [pc, #64]	; (5148 <_dtoa_r+0xbb8>)
    5108:	f7ff baae 	b.w	4668 <_dtoa_r+0xd8>
    510c:	f1bb 0f00 	cmp.w	fp, #0
    5110:	dc03      	bgt.n	511a <_dtoa_r+0xb8a>
    5112:	9b05      	ldr	r3, [sp, #20]
    5114:	2b02      	cmp	r3, #2
    5116:	f73f aecf 	bgt.w	4eb8 <_dtoa_r+0x928>
    511a:	9d00      	ldr	r5, [sp, #0]
    511c:	4631      	mov	r1, r6
    511e:	4650      	mov	r0, sl
    5120:	f011 f979 	bl	16416 <quorem>
    5124:	f100 0330 	add.w	r3, r0, #48	; 0x30
    5128:	f805 3b01 	strb.w	r3, [r5], #1
    512c:	9a00      	ldr	r2, [sp, #0]
    512e:	1aaa      	subs	r2, r5, r2
    5130:	4593      	cmp	fp, r2
    5132:	ddb9      	ble.n	50a8 <_dtoa_r+0xb18>
    5134:	4651      	mov	r1, sl
    5136:	2300      	movs	r3, #0
    5138:	220a      	movs	r2, #10
    513a:	4620      	mov	r0, r4
    513c:	f011 fa9a 	bl	16674 <__multadd>
    5140:	4682      	mov	sl, r0
    5142:	e7eb      	b.n	511c <_dtoa_r+0xb8c>
    5144:	000466af 	.word	0x000466af
    5148:	00046f0e 	.word	0x00046f0e

0000514c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
{
    514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5150:	ed2d 8b08 	vpush	{d8-d11}
    5154:	b089      	sub	sp, #36	; 0x24
    5156:	4616      	mov	r6, r2
    5158:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
    515c:	460f      	mov	r7, r1
    const int m=*factors++; /* stage's fft length/p */
    515e:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
    5162:	6811      	ldr	r1, [r2, #0]
    5164:	9103      	str	r1, [sp, #12]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    5166:	fb0a f901 	mul.w	r9, sl, r1
    if (m==1) {
    516a:	f1ba 0f01 	cmp.w	sl, #1
    516e:	fb06 f103 	mul.w	r1, r6, r3
{
    5172:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    5174:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
    if (m==1) {
    5178:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    517c:	d116      	bne.n	51ac <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
    517e:	4603      	mov	r3, r0
            *Fout = *f;
    5180:	e897 0003 	ldmia.w	r7, {r0, r1}
    5184:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
    5188:	3308      	adds	r3, #8
    518a:	4599      	cmp	r9, r3
            f += fstride*in_stride;
    518c:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
    518e:	d1f7      	bne.n	5180 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    switch (p) {
    5190:	f505 7384 	add.w	r3, r5, #264	; 0x108
    5194:	9305      	str	r3, [sp, #20]
    5196:	9b03      	ldr	r3, [sp, #12]
    5198:	3b02      	subs	r3, #2
    519a:	2b03      	cmp	r3, #3
    519c:	f200 8282 	bhi.w	56a4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x558>
    51a0:	e8df f013 	tbh	[pc, r3, lsl #1]
    51a4:	0056001b 	.word	0x0056001b
    51a8:	019600f9 	.word	0x019600f9
    const int m=*factors++; /* stage's fft length/p */
    51ac:	3208      	adds	r2, #8
    51ae:	9204      	str	r2, [sp, #16]
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    51b0:	9a03      	ldr	r2, [sp, #12]
        }while( (Fout += m) != Fout_end );
    51b2:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    51b6:	4372      	muls	r2, r6
    51b8:	9904      	ldr	r1, [sp, #16]
    51ba:	9100      	str	r1, [sp, #0]
    51bc:	9501      	str	r5, [sp, #4]
    51be:	4639      	mov	r1, r7
    51c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    51c4:	9005      	str	r0, [sp, #20]
    51c6:	f7ff ffc1 	bl	514c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
    51ca:	9805      	ldr	r0, [sp, #20]
    51cc:	4458      	add	r0, fp
    51ce:	4581      	cmp	r9, r0
    51d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
            f += fstride*in_stride;
    51d4:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
    51d6:	d1ef      	bne.n	51b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
    51d8:	e7da      	b.n	5190 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
    51da:	f10a 0301 	add.w	r3, sl, #1
    51de:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
    51e2:	00f6      	lsls	r6, r6, #3
    51e4:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
    51e6:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    51ea:	ed53 5a01 	vldr	s11, [r3, #-4]
    51ee:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
    51f2:	ed13 6a02 	vldr	s12, [r3, #-8]
    51f6:	ee26 7ae5 	vnmul.f32	s14, s13, s11
    }while (--m);
    51fa:	f1ba 0a01 	subs.w	sl, sl, #1
        C_MUL (t,  *Fout2 , *tw1);
    51fe:	eea6 7a27 	vfma.f32	s14, s12, s15
    5202:	f103 0308 	add.w	r3, r3, #8
    5206:	f104 0408 	add.w	r4, r4, #8
    520a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    520e:	4435      	add	r5, r6
    5210:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
    5214:	ed54 6a04 	vldr	s13, [r4, #-16]
    5218:	ee76 6ac7 	vsub.f32	s13, s13, s14
    521c:	ed43 6a04 	vstr	s13, [r3, #-16]
    5220:	ed54 6a03 	vldr	s13, [r4, #-12]
    5224:	ee76 6ae7 	vsub.f32	s13, s13, s15
    5228:	ed43 6a03 	vstr	s13, [r3, #-12]
        C_ADDTO( *Fout ,  t );
    522c:	ed54 6a04 	vldr	s13, [r4, #-16]
    5230:	ee36 7a87 	vadd.f32	s14, s13, s14
    5234:	ed04 7a04 	vstr	s14, [r4, #-16]
    5238:	ed14 7a03 	vldr	s14, [r4, #-12]
    523c:	ee77 7a27 	vadd.f32	s15, s14, s15
    5240:	ed44 7a03 	vstr	s15, [r4, #-12]
    }while (--m);
    5244:	d1cf      	bne.n	51e6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
}
    5246:	b009      	add	sp, #36	; 0x24
    5248:	ecbd 8b08 	vpop	{d8-d11}
    524c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
    5250:	fb06 f30a 	mul.w	r3, r6, sl
    5254:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    5258:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
    525c:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
    5260:	0133      	lsls	r3, r6, #4
    5262:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
    5266:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
    526a:	f104 0608 	add.w	r6, r4, #8
    526e:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
    5270:	4657      	mov	r7, sl
         tw2 += fstride*2;
    5272:	9303      	str	r3, [sp, #12]
    5274:	3404      	adds	r4, #4
    5276:	46aa      	mov	sl, r5
         Fout[m2].i = Fout[m].i - scratch[0].r;
    5278:	eef1 9a49 	vneg.f32	s19, s18
         C_MUL(scratch[1],Fout[m] , *tw1);
    527c:	edd8 7a01 	vldr	s15, [r8, #4]
    5280:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    5284:	ed14 6a01 	vldr	s12, [r4, #-4]
    5288:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
         C_MUL(scratch[2],Fout[m2] , *tw2);
    528c:	edd9 5a01 	vldr	s11, [r9, #4]
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
    5290:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_MUL(scratch[1],Fout[m] , *tw1);
    5294:	ee66 8ae7 	vnmul.f32	s17, s13, s15
    5298:	3608      	adds	r6, #8
    529a:	eeb0 7a68 	vmov.f32	s14, s17
    529e:	eea6 7a08 	vfma.f32	s14, s12, s16
    52a2:	f108 0808 	add.w	r8, r8, #8
    52a6:	445d      	add	r5, fp
    52a8:	ee28 8a27 	vmul.f32	s16, s16, s15
    52ac:	f109 0908 	add.w	r9, r9, #8
    52b0:	eef0 7a48 	vmov.f32	s15, s16
    52b4:	eee6 7a26 	vfma.f32	s15, s12, s13
         C_MUL(scratch[2],Fout[m2] , *tw2);
    52b8:	3408      	adds	r4, #8
    52ba:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
    52be:	ed19 6a02 	vldr	s12, [r9, #-8]
    52c2:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
    52c6:	ee66 8ae5 	vnmul.f32	s17, s13, s11
    52ca:	eee6 8a08 	vfma.f32	s17, s12, s16
    52ce:	ee28 8a25 	vmul.f32	s16, s16, s11
         C_ADD(scratch[3],scratch[1],scratch[2]);
    52d2:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_MUL(scratch[2],Fout[m2] , *tw2);
    52d6:	eea6 8a26 	vfma.f32	s16, s12, s13
         C_SUB(scratch[0],scratch[1],scratch[2]);
    52da:	ee77 8a68 	vsub.f32	s17, s14, s17
         C_ADD(scratch[3],scratch[1],scratch[2]);
    52de:	ee37 aa88 	vadd.f32	s20, s15, s16
         C_SUB(scratch[0],scratch[1],scratch[2]);
    52e2:	ee37 8ac8 	vsub.f32	s16, s15, s16
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
    52e6:	f7fb f8bf 	bl	468 <__aeabi_f2d>
    52ea:	ec41 0b1b 	vmov	d11, r0, r1
    52ee:	ee1a 0a90 	vmov	r0, s21
    52f2:	f7fb f8b9 	bl	468 <__aeabi_f2d>
    52f6:	4bea      	ldr	r3, [pc, #936]	; (56a0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x554>)
    52f8:	2200      	movs	r2, #0
    52fa:	f7fb f90d 	bl	518 <__aeabi_dmul>
    52fe:	4602      	mov	r2, r0
    5300:	460b      	mov	r3, r1
    5302:	ec51 0b1b 	vmov	r0, r1, d11
    5306:	f7fa ff4f 	bl	1a8 <__aeabi_dsub>
    530a:	f7fb fbc7 	bl	a9c <__aeabi_d2f>
    530e:	f844 0c0c 	str.w	r0, [r4, #-12]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
    5312:	f856 0c0c 	ldr.w	r0, [r6, #-12]
    5316:	f7fb f8a7 	bl	468 <__aeabi_f2d>
    531a:	ec41 0b1b 	vmov	d11, r0, r1
    531e:	ee1a 0a10 	vmov	r0, s20
    5322:	f7fb f8a1 	bl	468 <__aeabi_f2d>
    5326:	4bde      	ldr	r3, [pc, #888]	; (56a0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x554>)
    5328:	2200      	movs	r2, #0
    532a:	f7fb f8f5 	bl	518 <__aeabi_dmul>
    532e:	460b      	mov	r3, r1
    5330:	4602      	mov	r2, r0
    5332:	ec51 0b1b 	vmov	r0, r1, d11
    5336:	f7fa ff37 	bl	1a8 <__aeabi_dsub>
    533a:	f7fb fbaf 	bl	a9c <__aeabi_d2f>
    533e:	f848 0c04 	str.w	r0, [r8, #-4]
         C_ADDTO(*Fout,scratch[3]);
    5342:	ed56 7a04 	vldr	s15, [r6, #-16]
    5346:	ee77 7aaa 	vadd.f32	s15, s15, s21
     }while(--k);
    534a:	3f01      	subs	r7, #1
         C_ADDTO(*Fout,scratch[3]);
    534c:	ed46 7a04 	vstr	s15, [r6, #-16]
    5350:	ed56 7a03 	vldr	s15, [r6, #-12]
    5354:	ee77 7a8a 	vadd.f32	s15, s15, s20
    5358:	ed46 7a03 	vstr	s15, [r6, #-12]
         Fout[m2].r = Fout[m].r + scratch[0].i;
    535c:	ed54 7a03 	vldr	s15, [r4, #-12]
    5360:	eee9 7a08 	vfma.f32	s15, s18, s16
    5364:	ed49 7a02 	vstr	s15, [r9, #-8]
         Fout[m2].i = Fout[m].i - scratch[0].r;
    5368:	ed58 7a01 	vldr	s15, [r8, #-4]
    536c:	eee9 7aa8 	vfma.f32	s15, s19, s17
    5370:	ed49 7a01 	vstr	s15, [r9, #-4]
         Fout[m].r -= scratch[0].i;
    5374:	ed54 7a03 	vldr	s15, [r4, #-12]
    5378:	eee9 7a88 	vfma.f32	s15, s19, s16
    537c:	ed44 7a03 	vstr	s15, [r4, #-12]
         Fout[m].i += scratch[0].r;
    5380:	ed58 7a01 	vldr	s15, [r8, #-4]
    5384:	eee9 7a28 	vfma.f32	s15, s18, s17
    5388:	ed48 7a01 	vstr	s15, [r8, #-4]
     }while(--k);
    538c:	9b03      	ldr	r3, [sp, #12]
    538e:	449a      	add	sl, r3
    5390:	f47f af74 	bne.w	527c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
    5394:	e757      	b.n	5246 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
    5396:	4657      	mov	r7, sl
        tw3 += fstride*3;
    5398:	2218      	movs	r2, #24
        tw1 += fstride;
    539a:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
        tw2 += fstride*2;
    539e:	ea4f 1906 	mov.w	r9, r6, lsl #4
    53a2:	eb04 1007 	add.w	r0, r4, r7, lsl #4
        tw3 += fstride*3;
    53a6:	4356      	muls	r6, r2
        if(st->inverse) {
    53a8:	686a      	ldr	r2, [r5, #4]
    53aa:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
    53ae:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
    53b2:	f104 0c04 	add.w	ip, r4, #4
    53b6:	46ae      	mov	lr, r5
    53b8:	46a8      	mov	r8, r5
        C_MUL(scratch[0],Fout[m] , *tw1 );
    53ba:	edd1 6a01 	vldr	s13, [r1, #4]
    53be:	edd5 7a43 	vldr	s15, [r5, #268]	; 0x10c
    53c2:	ed91 6a00 	vldr	s12, [r1]
    53c6:	ed95 7a42 	vldr	s14, [r5, #264]	; 0x108
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    53ca:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    53ce:	edd3 3a01 	vldr	s7, [r3, #4]
    53d2:	ed93 4a00 	vldr	s8, [r3]
        C_SUB( scratch[5] , *Fout, scratch[1] );
    53d6:	ed1c 3a01 	vldr	s6, [ip, #-4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
    53da:	ee67 5ae6 	vnmul.f32	s11, s15, s13
    53de:	eee6 5a07 	vfma.f32	s11, s12, s14
    53e2:	ee27 7a26 	vmul.f32	s14, s14, s13
    53e6:	eeb0 5a65 	vmov.f32	s10, s11
    53ea:	eea6 7a27 	vfma.f32	s14, s12, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    53ee:	edd0 5a00 	vldr	s11, [r0]
    53f2:	edd8 7a42 	vldr	s15, [r8, #264]	; 0x108
        C_MUL(scratch[0],Fout[m] , *tw1 );
    53f6:	eef0 6a47 	vmov.f32	s13, s14
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    53fa:	ed98 7a43 	vldr	s14, [r8, #268]	; 0x10c
    53fe:	ee27 6a64 	vnmul.f32	s12, s14, s9
    5402:	eea5 6aa7 	vfma.f32	s12, s11, s15
    5406:	ee67 7aa4 	vmul.f32	s15, s15, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    540a:	edde 4a43 	vldr	s9, [lr, #268]	; 0x10c
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    540e:	eee5 7a87 	vfma.f32	s15, s11, s14
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    5412:	ed9e 7a42 	vldr	s14, [lr, #264]	; 0x108
    5416:	ee64 5ae3 	vnmul.f32	s11, s9, s7
    541a:	eee4 5a07 	vfma.f32	s11, s8, s14
    541e:	ee27 7a23 	vmul.f32	s14, s14, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
    5422:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    5426:	eea4 7a24 	vfma.f32	s14, s8, s9
        C_SUB( scratch[5] , *Fout, scratch[1] );
    542a:	ee33 4a46 	vsub.f32	s8, s6, s12
    542e:	ee73 4ae7 	vsub.f32	s9, s7, s15
        C_ADDTO(*Fout, scratch[1]);
    5432:	ee36 6a03 	vadd.f32	s12, s12, s6
    5436:	ee77 7aa3 	vadd.f32	s15, s15, s7
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
    543a:	ee35 3a25 	vadd.f32	s6, s10, s11
    543e:	ee76 3a87 	vadd.f32	s7, s13, s14
        C_ADDTO(*Fout, scratch[1]);
    5442:	ed0c 6a01 	vstr	s12, [ip, #-4]
    5446:	edc4 7a01 	vstr	s15, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
    544a:	ee36 6a43 	vsub.f32	s12, s12, s6
    544e:	ee77 7ae3 	vsub.f32	s15, s15, s7
    5452:	ed80 6a00 	vstr	s12, [r0]
    5456:	edc0 7a01 	vstr	s15, [r0, #4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
    545a:	ee36 7ac7 	vsub.f32	s14, s13, s14
        C_ADDTO( *Fout , scratch[3] );
    545e:	ed5c 6a01 	vldr	s13, [ip, #-4]
    5462:	ee76 6a83 	vadd.f32	s13, s13, s6
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
    5466:	ee75 5a65 	vsub.f32	s11, s10, s11
        C_ADDTO( *Fout , scratch[3] );
    546a:	ed4c 6a01 	vstr	s13, [ip, #-4]
    546e:	edd4 7a01 	vldr	s15, [r4, #4]
    5472:	ee77 7aa3 	vadd.f32	s15, s15, s7
    5476:	ee74 6a07 	vadd.f32	s13, s8, s14
    547a:	edc4 7a01 	vstr	s15, [r4, #4]
        if(st->inverse) {
    547e:	ee34 7a47 	vsub.f32	s14, s8, s14
    5482:	ee74 7ae5 	vsub.f32	s15, s9, s11
    5486:	ee74 5aa5 	vadd.f32	s11, s9, s11
    548a:	b1c2      	cbz	r2, 54be <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x372>
            Fout[m].r = scratch[5].r - scratch[4].i;
    548c:	ed81 7a00 	vstr	s14, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
    5490:	edc1 5a01 	vstr	s11, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
    5494:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
    5498:	edc3 7a01 	vstr	s15, [r3, #4]
    }while(--k);
    549c:	3f01      	subs	r7, #1
        ++Fout;
    549e:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
    54a2:	f101 0108 	add.w	r1, r1, #8
    54a6:	4455      	add	r5, sl
    54a8:	f100 0008 	add.w	r0, r0, #8
    54ac:	44c8      	add	r8, r9
    54ae:	f103 0308 	add.w	r3, r3, #8
    54b2:	44b6      	add	lr, r6
    54b4:	f10c 0c08 	add.w	ip, ip, #8
    54b8:	f47f af7f 	bne.w	53ba <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x26e>
    54bc:	e6c3      	b.n	5246 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
    54be:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
    54c2:	edc1 7a01 	vstr	s15, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
    54c6:	ed83 7a00 	vstr	s14, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
    54ca:	edc3 5a01 	vstr	s11, [r3, #4]
    54ce:	e7e5      	b.n	549c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x350>
    ya = twiddles[fstride*m];
    54d0:	9a05      	ldr	r2, [sp, #20]
    54d2:	fb0a f306 	mul.w	r3, sl, r6
    54d6:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
    54da:	00f2      	lsls	r2, r6, #3
    54dc:	edd7 2a01 	vldr	s5, [r7, #4]
    54e0:	9203      	str	r2, [sp, #12]
    54e2:	2218      	movs	r2, #24
    54e4:	4372      	muls	r2, r6
    54e6:	ed97 2a00 	vldr	s4, [r7]
    yb = twiddles[fstride*2*m];
    54ea:	9204      	str	r2, [sp, #16]
    54ec:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
    54f0:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
    54f4:	edd7 1a00 	vldr	s3, [r7]
    54f8:	ed97 3a01 	vldr	s6, [r7, #4]
    for ( u=0; u<m; ++u ) {
    54fc:	ea4f 1b06 	mov.w	fp, r6, lsl #4
    5500:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
    5504:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
    5508:	eb03 100a 	add.w	r0, r3, sl, lsl #4
    550c:	0176      	lsls	r6, r6, #5
    550e:	46ac      	mov	ip, r5
    5510:	46ae      	mov	lr, r5
    5512:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
    5514:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    5518:	eeb1 1a62 	vneg.f32	s2, s5
    for ( u=0; u<m; ++u ) {
    551c:	45ca      	cmp	sl, r9
    551e:	f104 0408 	add.w	r4, r4, #8
    5522:	f107 0708 	add.w	r7, r7, #8
    5526:	f103 0308 	add.w	r3, r3, #8
    552a:	f101 0108 	add.w	r1, r1, #8
    552e:	f100 0008 	add.w	r0, r0, #8
    5532:	f77f ae88 	ble.w	5246 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    5536:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    553a:	ed57 3a01 	vldr	s7, [r7, #-4]
    553e:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
    5542:	ed17 6a02 	vldr	s12, [r7, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    5546:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
    554a:	ed13 5a02 	vldr	s10, [r3, #-8]
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    554e:	ed50 8a02 	vldr	s17, [r0, #-8]
        scratch[0] = *Fout0;
    5552:	ed14 7a02 	vldr	s14, [r4, #-8]
    5556:	ed54 7a01 	vldr	s15, [r4, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    555a:	9a03      	ldr	r2, [sp, #12]
    555c:	ee26 4ae3 	vnmul.f32	s8, s13, s7
    5560:	4415      	add	r5, r2
    5562:	eea6 4a25 	vfma.f32	s8, s12, s11
    5566:	9a04      	ldr	r2, [sp, #16]
    5568:	ee65 5aa3 	vmul.f32	s11, s11, s7
    556c:	eeb0 8a44 	vmov.f32	s16, s8
    5570:	eee6 5a26 	vfma.f32	s11, s12, s13
    for ( u=0; u<m; ++u ) {
    5574:	f109 0901 	add.w	r9, r9, #1
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    5578:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    557c:	ed11 4a02 	vldr	s8, [r1, #-8]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    5580:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    5584:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
    5588:	ee25 6ae6 	vnmul.f32	s12, s11, s13
    558c:	ee64 6aa6 	vmul.f32	s13, s9, s13
    5590:	eea5 6a24 	vfma.f32	s12, s10, s9
    5594:	44d8      	add	r8, fp
    5596:	eee5 6a25 	vfma.f32	s13, s10, s11
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    559a:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
    559e:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    55a2:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    55a6:	ed51 6a01 	vldr	s13, [r1, #-4]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    55aa:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    55ae:	ee25 6ae6 	vnmul.f32	s12, s11, s13
    55b2:	4496      	add	lr, r2
    55b4:	eea4 6a05 	vfma.f32	s12, s8, s10
    55b8:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    55bc:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    55c0:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    55c4:	ed50 5a01 	vldr	s11, [r0, #-4]
    55c8:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
    55cc:	ee66 0ae5 	vnmul.f32	s1, s13, s11
    55d0:	ee64 5a25 	vmul.f32	s11, s8, s11
    55d4:	eee8 0a84 	vfma.f32	s1, s17, s8
    55d8:	44b4      	add	ip, r6
        C_ADD( scratch[8],scratch[2],scratch[3]);
    55da:	ee70 9a06 	vadd.f32	s19, s0, s12
        C_ADD( scratch[7],scratch[1],scratch[4]);
    55de:	ee38 9a20 	vadd.f32	s18, s16, s1
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    55e2:	eee8 5aa6 	vfma.f32	s11, s17, s13
        C_SUB( scratch[10],scratch[1],scratch[4]);
    55e6:	ee38 4a60 	vsub.f32	s8, s16, s1
        C_SUB( scratch[9],scratch[2],scratch[3]);
    55ea:	ee74 6ac5 	vsub.f32	s13, s9, s10
        C_ADD( scratch[8],scratch[2],scratch[3]);
    55ee:	ee34 8a85 	vadd.f32	s16, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
    55f2:	ee39 5a29 	vadd.f32	s10, s18, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
    55f6:	ee73 8aa5 	vadd.f32	s17, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
    55fa:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    55fe:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->r += scratch[7].r + scratch[8].r;
    5602:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
    5606:	ee38 5a88 	vadd.f32	s10, s17, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    560a:	eee2 4a09 	vfma.f32	s9, s4, s18
        Fout0->i += scratch[7].i + scratch[8].i;
    560e:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
    5612:	ee30 6a46 	vsub.f32	s12, s0, s12
        Fout0->i += scratch[7].i + scratch[8].i;
    5616:	ed04 5a01 	vstr	s10, [r4, #-4]
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    561a:	eeb0 5a67 	vmov.f32	s10, s15
        C_SUB( scratch[10],scratch[1],scratch[4]);
    561e:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    5622:	ee63 0a26 	vmul.f32	s1, s6, s13
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    5626:	eea2 5a28 	vfma.f32	s10, s4, s17
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    562a:	eea1 7a89 	vfma.f32	s14, s3, s18
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    562e:	eee2 0aa5 	vfma.f32	s1, s5, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    5632:	eee1 4aa9 	vfma.f32	s9, s3, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    5636:	ee66 3a43 	vnmul.f32	s7, s12, s6
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    563a:	eee1 7aa8 	vfma.f32	s15, s3, s17
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    563e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    5642:	eea1 5a88 	vfma.f32	s10, s3, s16
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    5646:	eee2 5aa6 	vfma.f32	s11, s5, s13
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    564a:	eee1 3a04 	vfma.f32	s7, s2, s8
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    564e:	eea2 7a29 	vfma.f32	s14, s4, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    5652:	ee66 6a62 	vnmul.f32	s13, s12, s5
        C_SUB(*Fout1,scratch[5],scratch[6]);
    5656:	ee34 0ae0 	vsub.f32	s0, s9, s1
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    565a:	eee2 7a08 	vfma.f32	s15, s4, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    565e:	eee3 6a04 	vfma.f32	s13, s6, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
    5662:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
    5666:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
    566a:	ee35 0a63 	vsub.f32	s0, s10, s7
        C_ADD(*Fout4,scratch[5],scratch[6]);
    566e:	ee74 4aa0 	vadd.f32	s9, s9, s1
    5672:	ee35 5a23 	vadd.f32	s10, s10, s7
        C_SUB(*Fout1,scratch[5],scratch[6]);
    5676:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
    567a:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
    567e:	ed40 4a02 	vstr	s9, [r0, #-8]
    5682:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
    5686:	ed03 6a02 	vstr	s12, [r3, #-8]
    568a:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
    568e:	ee77 7ae6 	vsub.f32	s15, s15, s13
        C_ADD(*Fout2,scratch[11],scratch[12]);
    5692:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
    5696:	ed01 7a02 	vstr	s14, [r1, #-8]
    569a:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
    569e:	e73d      	b.n	551c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3d0>
    56a0:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
    56a4:	682b      	ldr	r3, [r5, #0]
    56a6:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
    56a8:	9b03      	ldr	r3, [sp, #12]
    56aa:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    56ae:	4658      	mov	r0, fp
    56b0:	f00c faac 	bl	11c0c <_Z9ei_mallocj>
    56b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    56b8:	9207      	str	r2, [sp, #28]
    56ba:	f04f 0c00 	mov.w	ip, #0
    56be:	fb0a f206 	mul.w	r2, sl, r6
    56c2:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
    56c4:	9206      	str	r2, [sp, #24]
    56c6:	4483      	add	fp, r0
    56c8:	4665      	mov	r5, ip
    56ca:	45aa      	cmp	sl, r5
    56cc:	dd51      	ble.n	5772 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x626>
    56ce:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
    56d0:	2200      	movs	r2, #0
    56d2:	9903      	ldr	r1, [sp, #12]
    56d4:	4291      	cmp	r1, r2
    56d6:	dc38      	bgt.n	574a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5fe>
    56d8:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
    56dc:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
    56de:	f04f 0800 	mov.w	r8, #0
    56e2:	9903      	ldr	r1, [sp, #12]
    56e4:	4541      	cmp	r1, r8
    56e6:	dd41      	ble.n	576c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x620>
            Fout[ k ] = scratch[0];
    56e8:	e893 0003 	ldmia.w	r3, {r0, r1}
    56ec:	e882 0003 	stmia.w	r2, {r0, r1}
            for (q=1;q<p;++q ) {
    56f0:	f103 0008 	add.w	r0, r3, #8
            int twidx=0;
    56f4:	2100      	movs	r1, #0
            for (q=1;q<p;++q ) {
    56f6:	4558      	cmp	r0, fp
    56f8:	d031      	beq.n	575e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x612>
                if (twidx>=Norig) twidx-=Norig;
    56fa:	9f04      	ldr	r7, [sp, #16]
                C_MUL(t,scratch[q] , twiddles[twidx] );
    56fc:	ed90 5a01 	vldr	s10, [r0, #4]
    5700:	edd0 5a00 	vldr	s11, [r0]
                twidx += fstride * k;
    5704:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
    5706:	428f      	cmp	r7, r1
    5708:	bfd8      	it	le
    570a:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
    570c:	9f05      	ldr	r7, [sp, #20]
    570e:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    5712:	ed99 6a01 	vldr	s12, [r9, #4]
    5716:	edd9 7a00 	vldr	s15, [r9]
    571a:	ee26 7a45 	vnmul.f32	s14, s12, s10
    571e:	3008      	adds	r0, #8
    5720:	eea5 7aa7 	vfma.f32	s14, s11, s15
    5724:	ee67 7a85 	vmul.f32	s15, s15, s10
    5728:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
    572c:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
    5730:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
    5734:	ee37 7a26 	vadd.f32	s14, s14, s13
    5738:	ed82 7a00 	vstr	s14, [r2]
    573c:	ed92 7a01 	vldr	s14, [r2, #4]
    5740:	ee77 7a27 	vadd.f32	s15, s14, s15
    5744:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
    5748:	e7d5      	b.n	56f6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5aa>
            scratch[q1] = Fout[ k  ];
    574a:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    574e:	c903      	ldmia	r1, {r0, r1}
    5750:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
    5754:	e888 0003 	stmia.w	r8, {r0, r1}
            k += m;
    5758:	44d6      	add	lr, sl
        for ( q1=0 ; q1<p ; ++q1 ) {
    575a:	3201      	adds	r2, #1
    575c:	e7b9      	b.n	56d2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x586>
        for ( q1=0 ; q1<p ; ++q1 ) {
    575e:	9907      	ldr	r1, [sp, #28]
    5760:	440a      	add	r2, r1
    5762:	9906      	ldr	r1, [sp, #24]
    5764:	f108 0801 	add.w	r8, r8, #1
    5768:	448e      	add	lr, r1
    576a:	e7ba      	b.n	56e2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x596>
    for ( u=0; u<m; ++u ) {
    576c:	3501      	adds	r5, #1
    576e:	44b4      	add	ip, r6
    5770:	e7ab      	b.n	56ca <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x57e>
    KISS_FFT_TMP_FREE(scratch);
    5772:	4618      	mov	r0, r3
}
    5774:	b009      	add	sp, #36	; 0x24
    5776:	ecbd 8b08 	vpop	{d8-d11}
    577a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
    577e:	f00c ba49 	b.w	11c14 <_Z7ei_freePv>
    5782:	bf00      	nop

00005784 <kiss_fftr>:
{
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
    5784:	6803      	ldr	r3, [r0, #0]
    5786:	685b      	ldr	r3, [r3, #4]
{
    5788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    578a:	4606      	mov	r6, r0
    578c:	4614      	mov	r4, r2
    if ( st->substate->inverse) {
    578e:	b123      	cbz	r3, 579a <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
    5790:	4833      	ldr	r0, [pc, #204]	; (5860 <kiss_fftr+0xdc>)
    5792:	9101      	str	r1, [sp, #4]
    5794:	f000 f866 	bl	5864 <_Z9ei_printfPKcz>
    5798:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
    579a:	6830      	ldr	r0, [r6, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
    579c:	6872      	ldr	r2, [r6, #4]
    ncfft = st->substate->nfft;
    579e:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
    57a0:	f00c fa1c 	bl	11bdc <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
    57a4:	6873      	ldr	r3, [r6, #4]
    57a6:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
    57aa:	ed93 7a01 	vldr	s14, [r3, #4]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
    57ae:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
    57b2:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
    57b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
    57ba:	2100      	movs	r1, #0
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
    57bc:	eb05 7cd5 	add.w	ip, r5, r5, lsr #31
    freqdata[0].r = tdc.r + tdc.i;
    57c0:	edc4 6a00 	vstr	s13, [r4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    57c4:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    freqdata[ncfft].r = tdc.r - tdc.i;
    57c8:	edc2 7a00 	vstr	s15, [r2]
    freqdata[ncfft].i = freqdata[0].i = 0;
    57cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    57d0:	6061      	str	r1, [r4, #4]

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    57d2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    freqdata[ncfft].i = freqdata[0].i = 0;
    57d6:	6051      	str	r1, [r2, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    57d8:	2101      	movs	r1, #1
    57da:	458c      	cmp	ip, r1
    57dc:	db3e      	blt.n	585c <kiss_fftr+0xd8>
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    57de:	00c8      	lsls	r0, r1, #3
    57e0:	f1a0 0708 	sub.w	r7, r0, #8
    57e4:	68b0      	ldr	r0, [r6, #8]
        fpk    = st->tmpbuf[k];
    57e6:	edd3 5a03 	vldr	s11, [r3, #12]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
    57ea:	ed55 4a02 	vldr	s9, [r5, #-8]
        fpk    = st->tmpbuf[k];
    57ee:	edd3 6a02 	vldr	s13, [r3, #8]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
    57f2:	ed55 7a01 	vldr	s15, [r5, #-4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    57f6:	4438      	add	r0, r7
        C_ADD( f1k, fpk , fpnk );
    57f8:	ee34 7aa6 	vadd.f32	s14, s9, s13
    57fc:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
    5800:	ee76 6ae4 	vsub.f32	s13, s13, s9
    5804:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    5808:	edd0 4a01 	vldr	s9, [r0, #4]
    580c:	ed90 4a00 	vldr	s8, [r0]
    5810:	ee64 5ae7 	vnmul.f32	s11, s9, s15
    5814:	ee67 7a84 	vmul.f32	s15, s15, s8
    5818:	eee6 5a84 	vfma.f32	s11, s13, s8
    for ( k=1;k <= ncfft/2 ; ++k ) {
    581c:	3101      	adds	r1, #1
    581e:	3308      	adds	r3, #8
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    5820:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    5824:	3d08      	subs	r5, #8
    5826:	3408      	adds	r4, #8
    5828:	ee77 6a25 	vadd.f32	s13, s14, s11
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    582c:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    5830:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    5834:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    5838:	edc4 6a00 	vstr	s13, [r4]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    583c:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    5840:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    5844:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    5848:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    584c:	edc4 6a01 	vstr	s13, [r4, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    5850:	3a08      	subs	r2, #8
    5852:	ed82 7a00 	vstr	s14, [r2]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    5856:	edc2 7a01 	vstr	s15, [r2, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    585a:	e7be      	b.n	57da <kiss_fftr+0x56>
    }
}
    585c:	b003      	add	sp, #12
    585e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5860:	000459cd 	.word	0x000459cd

00005864 <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
    5864:	b40f      	push	{r0, r1, r2, r3}
    5866:	b507      	push	{r0, r1, r2, lr}
    5868:	ab04      	add	r3, sp, #16
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
    586a:	4809      	ldr	r0, [pc, #36]	; (5890 <_Z9ei_printfPKcz+0x2c>)
__attribute__((weak)) void ei_printf(const char *format, ...) {
    586c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
    5870:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
    5872:	f44f 6180 	mov.w	r1, #1024	; 0x400
    5876:	f00b fb4d 	bl	10f14 <vsniprintf>
    va_end(args);

    if (r > 0) {
    587a:	2800      	cmp	r0, #0
    587c:	dd03      	ble.n	5886 <_Z9ei_printfPKcz+0x22>
        printf("%s", print_buf);
    587e:	4904      	ldr	r1, [pc, #16]	; (5890 <_Z9ei_printfPKcz+0x2c>)
    5880:	4804      	ldr	r0, [pc, #16]	; (5894 <_Z9ei_printfPKcz+0x30>)
    5882:	f00b fa3f 	bl	10d04 <iprintf>
    }
}
    5886:	b003      	add	sp, #12
    5888:	f85d eb04 	ldr.w	lr, [sp], #4
    588c:	b004      	add	sp, #16
    588e:	4770      	bx	lr
    5890:	20001a74 	.word	0x20001a74
    5894:	000459f3 	.word	0x000459f3

00005898 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
    5898:	b510      	push	{r4, lr}
    589a:	ee10 0a10 	vmov	r0, s0
    printf("%f", f);
    589e:	f7fa fde3 	bl	468 <__aeabi_f2d>
}
    58a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("%f", f);
    58a6:	4602      	mov	r2, r0
    58a8:	460b      	mov	r3, r1
    58aa:	4801      	ldr	r0, [pc, #4]	; (58b0 <_Z15ei_printf_floatf+0x18>)
    58ac:	f00b ba2a 	b.w	10d04 <iprintf>
    58b0:	000459f6 	.word	0x000459f6

000058b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    58b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (double_multiplier == 0.) {
    58b6:	2300      	movs	r3, #0
                        int* shift) {
    58b8:	4605      	mov	r5, r0
    58ba:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
    58bc:	2200      	movs	r2, #0
    58be:	ec51 0b10 	vmov	r0, r1, d0
    58c2:	ed8d 0b00 	vstr	d0, [sp]
    58c6:	f7fb f88f 	bl	9e8 <__aeabi_dcmpeq>
    58ca:	ed9d 0b00 	vldr	d0, [sp]
    58ce:	b120      	cbz	r0, 58da <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x26>
    *quantized_multiplier = 0;
    58d0:	2300      	movs	r3, #0
    58d2:	602b      	str	r3, [r5, #0]
    *shift = 0;
    58d4:	6023      	str	r3, [r4, #0]
}
    58d6:	b003      	add	sp, #12
    58d8:	bd30      	pop	{r4, r5, pc}
  const double q = std::frexp(double_multiplier, shift);
    58da:	4620      	mov	r0, r4
    58dc:	f009 ff5e 	bl	f79c <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    58e0:	4b15      	ldr	r3, [pc, #84]	; (5938 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x84>)
    58e2:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
    58e4:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    58e8:	f7fa fe16 	bl	518 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    58ec:	ec41 0b10 	vmov	d0, r0, r1
    58f0:	f009 ff8a 	bl	f808 <round>
    58f4:	ec51 0b10 	vmov	r0, r1, d0
    58f8:	f7fb f988 	bl	c0c <__aeabi_d2lz>
    58fc:	4602      	mov	r2, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    58fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    5902:	460b      	mov	r3, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    5904:	4290      	cmp	r0, r2
    5906:	f04f 0100 	mov.w	r1, #0
    590a:	eb71 0c03 	sbcs.w	ip, r1, r3
    590e:	da01      	bge.n	5914 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x60>
    5910:	f010 fb9a 	bl	16048 <abort>
  if (q_fixed == (1ll << 31)) {
    5914:	428b      	cmp	r3, r1
    5916:	bf01      	itttt	eq
    5918:	4282      	cmpeq	r2, r0
    ++*shift;
    591a:	6823      	ldreq	r3, [r4, #0]
    591c:	3301      	addeq	r3, #1
    591e:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
    5920:	6821      	ldr	r1, [r4, #0]
    q_fixed /= 2;
    5922:	bf08      	it	eq
    5924:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
  if (*shift < -31) {
    5928:	311f      	adds	r1, #31
    *shift = 0;
    592a:	bfbe      	ittt	lt
    592c:	2300      	movlt	r3, #0
    q_fixed = 0;
    592e:	2200      	movlt	r2, #0
    *shift = 0;
    5930:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    5932:	602a      	str	r2, [r5, #0]
    5934:	e7cf      	b.n	58d6 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x22>
    5936:	bf00      	nop
    5938:	41e00000 	.word	0x41e00000

0000593c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    593c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    593e:	4b0c      	ldr	r3, [pc, #48]	; (5970 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x34>)
                                      int* left_shift) {
    5940:	4605      	mov	r5, r0
    5942:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
    5944:	2200      	movs	r2, #0
    5946:	ec51 0b10 	vmov	r0, r1, d0
    594a:	ed8d 0b00 	vstr	d0, [sp]
    594e:	f7fb f873 	bl	a38 <__aeabi_dcmpgt>
    5952:	ed9d 0b00 	vldr	d0, [sp]
    5956:	b908      	cbnz	r0, 595c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x20>
    5958:	f010 fb76 	bl	16048 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    595c:	4621      	mov	r1, r4
    595e:	4628      	mov	r0, r5
    5960:	f7ff ffa8 	bl	58b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    5964:	6823      	ldr	r3, [r4, #0]
    5966:	2b00      	cmp	r3, #0
    5968:	dbf6      	blt.n	5958 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x1c>
}
    596a:	b003      	add	sp, #12
    596c:	bd30      	pop	{r4, r5, pc}
    596e:	bf00      	nop
    5970:	3ff00000 	.word	0x3ff00000

00005974 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
    5974:	edd1 7a03 	vldr	s15, [r1, #12]
    5978:	ed92 7a03 	vldr	s14, [r2, #12]
    597c:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
    5980:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    5982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
    598a:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    598c:	da0a      	bge.n	59a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
    598e:	4b0f      	ldr	r3, [pc, #60]	; (59cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
    5990:	9300      	str	r3, [sp, #0]
    5992:	6944      	ldr	r4, [r0, #20]
    5994:	4a0e      	ldr	r2, [pc, #56]	; (59d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
    5996:	490f      	ldr	r1, [pc, #60]	; (59d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    5998:	f240 1351 	movw	r3, #337	; 0x151
    599c:	47a0      	blx	r4
    599e:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
    59a0:	b002      	add	sp, #8
    59a2:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
    59a4:	ee17 0a90 	vmov	r0, s15
    59a8:	f7fa fd5e 	bl	468 <__aeabi_f2d>
    59ac:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    59ae:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
    59b0:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    59b2:	f7fa fd59 	bl	468 <__aeabi_f2d>
    59b6:	460b      	mov	r3, r1
    59b8:	4602      	mov	r2, r0
    59ba:	4629      	mov	r1, r5
    59bc:	4620      	mov	r0, r4
    59be:	f7fa fed5 	bl	76c <__aeabi_ddiv>
    59c2:	9b06      	ldr	r3, [sp, #24]
    59c4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    59c8:	2000      	movs	r0, #0
    59ca:	e7e9      	b.n	59a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
    59cc:	00045a7f 	.word	0x00045a7f
    59d0:	000459f9 	.word	0x000459f9
    59d4:	00045a68 	.word	0x00045a68

000059d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    59d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    59da:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    59dc:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
    59de:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
    59e0:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
    59e2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
    59e4:	d00e      	beq.n	5a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    59e6:	2b09      	cmp	r3, #9
    59e8:	d01f      	beq.n	5a2a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x52>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    59ea:	2b07      	cmp	r3, #7
    59ec:	d021      	beq.n	5a32 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    59ee:	4b26      	ldr	r3, [pc, #152]	; (5a88 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
    59f0:	9300      	str	r3, [sp, #0]
    59f2:	6944      	ldr	r4, [r0, #20]
    59f4:	4a25      	ldr	r2, [pc, #148]	; (5a8c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
    59f6:	4926      	ldr	r1, [pc, #152]	; (5a90 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>)
    59f8:	f44f 73c2 	mov.w	r3, #388	; 0x184
    59fc:	47a0      	blx	r4
    59fe:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
    5a00:	b005      	add	sp, #20
    5a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
    5a04:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    5a06:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
    5a08:	6913      	ldr	r3, [r2, #16]
  };
    5a0a:	68d2      	ldr	r2, [r2, #12]
    5a0c:	9202      	str	r2, [sp, #8]
  if (activation == kTfLiteActRelu) {
    5a0e:	2901      	cmp	r1, #1
  };
    5a10:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
    5a12:	d112      	bne.n	5a3a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x62>
    *act_min = std::max(qmin, quantize(0.0));
    5a14:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 5a94 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>
    5a18:	a802      	add	r0, sp, #8
    5a1a:	f00c f93e 	bl	11c9a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    5a1e:	4286      	cmp	r6, r0
    5a20:	bfac      	ite	ge
    5a22:	602e      	strge	r6, [r5, #0]
    5a24:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
    5a26:	603c      	str	r4, [r7, #0]
    5a28:	e01b      	b.n	5a62 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8a>
    qmax = std::numeric_limits<int8_t>::max();
    5a2a:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    5a2c:	f06f 067f 	mvn.w	r6, #127	; 0x7f
    5a30:	e7ea      	b.n	5a08 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int16_t>::min();
    5a32:	4e19      	ldr	r6, [pc, #100]	; (5a98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xc0>)
    qmax = std::numeric_limits<int16_t>::max();
    5a34:	f647 74ff 	movw	r4, #32767	; 0x7fff
    5a38:	e7e6      	b.n	5a08 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
  } else if (activation == kTfLiteActRelu6) {
    5a3a:	2903      	cmp	r1, #3
    5a3c:	d113      	bne.n	5a66 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8e>
    *act_min = std::max(qmin, quantize(0.0));
    5a3e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 5a94 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>
    5a42:	a802      	add	r0, sp, #8
    5a44:	f00c f929 	bl	11c9a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
    5a48:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
    5a4c:	4286      	cmp	r6, r0
    5a4e:	bfac      	ite	ge
    5a50:	602e      	strge	r6, [r5, #0]
    5a52:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
    5a54:	a802      	add	r0, sp, #8
    5a56:	f00c f920 	bl	11c9a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    5a5a:	4284      	cmp	r4, r0
    5a5c:	bfd4      	ite	le
    5a5e:	603c      	strle	r4, [r7, #0]
    5a60:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
    5a62:	2000      	movs	r0, #0
    5a64:	e7cc      	b.n	5a00 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x28>
  } else if (activation == kTfLiteActReluN1To1) {
    5a66:	2902      	cmp	r1, #2
    5a68:	d10b      	bne.n	5a82 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xaa>
    *act_min = std::max(qmin, quantize(-1.0));
    5a6a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    5a6e:	a802      	add	r0, sp, #8
    5a70:	f00c f913 	bl	11c9a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
    5a74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
    5a78:	4286      	cmp	r6, r0
    5a7a:	bfac      	ite	ge
    5a7c:	602e      	strge	r6, [r5, #0]
    5a7e:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
    5a80:	e7e8      	b.n	5a54 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7c>
    *act_min = qmin;
    5a82:	602e      	str	r6, [r5, #0]
    5a84:	e7cf      	b.n	5a26 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4e>
    5a86:	bf00      	nop
    5a88:	00045aba 	.word	0x00045aba
    5a8c:	000459f9 	.word	0x000459f9
    5a90:	00045a68 	.word	0x00045a68
    5a94:	00000000 	.word	0x00000000
    5a98:	ffff8000 	.word	0xffff8000

00005a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    5a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    5aa0:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    5aa4:	ed2d 8b04 	vpush	{d8-d9}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    5aa8:	2f01      	cmp	r7, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    5aaa:	ee09 3a10 	vmov	s18, r3
    5aae:	b08b      	sub	sp, #44	; 0x2c
    5ab0:	4604      	mov	r4, r0
    5ab2:	468a      	mov	sl, r1
    5ab4:	4615      	mov	r5, r2
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    5ab6:	d011      	beq.n	5adc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x40>
    5ab8:	2601      	movs	r6, #1
    5aba:	4b75      	ldr	r3, [pc, #468]	; (5c90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
    5abc:	9301      	str	r3, [sp, #4]
    5abe:	e9cd 7602 	strd	r7, r6, [sp, #8]
    5ac2:	4b74      	ldr	r3, [pc, #464]	; (5c94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f8>)
    5ac4:	9300      	str	r3, [sp, #0]
    5ac6:	6944      	ldr	r4, [r0, #20]
    5ac8:	4a73      	ldr	r2, [pc, #460]	; (5c98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
    5aca:	4974      	ldr	r1, [pc, #464]	; (5c9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
    5acc:	23e0      	movs	r3, #224	; 0xe0
    5ace:	47a0      	blx	r4
}
    5ad0:	4630      	mov	r0, r6
    5ad2:	b00b      	add	sp, #44	; 0x2c
    5ad4:	ecbd 8b04 	vpop	{d8-d9}
    5ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    5adc:	f892 6030 	ldrb.w	r6, [r2, #48]	; 0x30
    5ae0:	2e01      	cmp	r6, #1
    5ae2:	d00c      	beq.n	5afe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x62>
    5ae4:	e9cd 6702 	strd	r6, r7, [sp, #8]
    5ae8:	4b69      	ldr	r3, [pc, #420]	; (5c90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
    5aea:	9301      	str	r3, [sp, #4]
    5aec:	4b6c      	ldr	r3, [pc, #432]	; (5ca0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x204>)
    5aee:	9300      	str	r3, [sp, #0]
    5af0:	6944      	ldr	r4, [r0, #20]
    5af2:	4a69      	ldr	r2, [pc, #420]	; (5c98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
    5af4:	4969      	ldr	r1, [pc, #420]	; (5c9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
    5af6:	23e2      	movs	r3, #226	; 0xe2
    5af8:	47a0      	blx	r4
    5afa:	463e      	mov	r6, r7
    5afc:	e7e8      	b.n	5ad0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
  const auto* affine_quantization =
    5afe:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    5b00:	b93a      	cbnz	r2, 5b12 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x76>
    5b02:	4b68      	ldr	r3, [pc, #416]	; (5ca4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x208>)
    5b04:	9300      	str	r3, [sp, #0]
    5b06:	6944      	ldr	r4, [r0, #20]
    5b08:	23ed      	movs	r3, #237	; 0xed
    TF_LITE_ENSURE(context,
    5b0a:	4a63      	ldr	r2, [pc, #396]	; (5c98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
    5b0c:	4966      	ldr	r1, [pc, #408]	; (5ca8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x20c>)
    5b0e:	47a0      	blx	r4
    5b10:	e7de      	b.n	5ad0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    5b12:	f8d2 b000 	ldr.w	fp, [r2]
    5b16:	f1bb 0f00 	cmp.w	fp, #0
    5b1a:	d104      	bne.n	5b26 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x8a>
    5b1c:	4b63      	ldr	r3, [pc, #396]	; (5cac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    5b1e:	9300      	str	r3, [sp, #0]
    5b20:	6944      	ldr	r4, [r0, #20]
    5b22:	23ee      	movs	r3, #238	; 0xee
    5b24:	e7f1      	b.n	5b0a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x6e>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    5b26:	f8db 7000 	ldr.w	r7, [fp]
  if (is_per_channel) {
    5b2a:	2f01      	cmp	r7, #1
    5b2c:	dd37      	ble.n	5b9e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x102>
    TF_LITE_ENSURE(context,
    5b2e:	780b      	ldrb	r3, [r1, #0]
    5b30:	2b09      	cmp	r3, #9
    5b32:	d006      	beq.n	5b42 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa6>
    5b34:	2b07      	cmp	r3, #7
    5b36:	d004      	beq.n	5b42 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa6>
    5b38:	4b5d      	ldr	r3, [pc, #372]	; (5cb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
    5b3a:	9300      	str	r3, [sp, #0]
    5b3c:	6944      	ldr	r4, [r0, #20]
    5b3e:	23f2      	movs	r3, #242	; 0xf2
    5b40:	e7e3      	b.n	5b0a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x6e>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    5b42:	782b      	ldrb	r3, [r5, #0]
    5b44:	2b09      	cmp	r3, #9
    5b46:	d00d      	beq.n	5b64 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc8>
    5b48:	2209      	movs	r2, #9
    5b4a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5b4e:	4b59      	ldr	r3, [pc, #356]	; (5cb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    5b50:	9301      	str	r3, [sp, #4]
    5b52:	4b59      	ldr	r3, [pc, #356]	; (5cb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    5b54:	9300      	str	r3, [sp, #0]
    5b56:	6965      	ldr	r5, [r4, #20]
    5b58:	23f4      	movs	r3, #244	; 0xf4
    TF_LITE_ENSURE_EQ(
    5b5a:	4a4f      	ldr	r2, [pc, #316]	; (5c98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
    5b5c:	494f      	ldr	r1, [pc, #316]	; (5c9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
    5b5e:	4620      	mov	r0, r4
    5b60:	47a8      	blx	r5
    5b62:	e7b5      	b.n	5ad0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    5b64:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5b66:	42bb      	cmp	r3, r7
    5b68:	d008      	beq.n	5b7c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe0>
    5b6a:	e9cd 7302 	strd	r7, r3, [sp, #8]
    5b6e:	4b53      	ldr	r3, [pc, #332]	; (5cbc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
    5b70:	9301      	str	r3, [sp, #4]
    5b72:	4b53      	ldr	r3, [pc, #332]	; (5cc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    5b74:	9300      	str	r3, [sp, #0]
    5b76:	6965      	ldr	r5, [r4, #20]
    5b78:	23f5      	movs	r3, #245	; 0xf5
    5b7a:	e7ee      	b.n	5b5a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xbe>
    TF_LITE_ENSURE_EQ(
    5b7c:	6892      	ldr	r2, [r2, #8]
    5b7e:	68ab      	ldr	r3, [r5, #8]
    5b80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5b84:	9a20      	ldr	r2, [sp, #128]	; 0x80
    5b86:	685b      	ldr	r3, [r3, #4]
    5b88:	429a      	cmp	r2, r3
    5b8a:	d008      	beq.n	5b9e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x102>
    5b8c:	9303      	str	r3, [sp, #12]
    5b8e:	4b4d      	ldr	r3, [pc, #308]	; (5cc4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    5b90:	9301      	str	r3, [sp, #4]
    5b92:	4b4a      	ldr	r3, [pc, #296]	; (5cbc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
    5b94:	9300      	str	r3, [sp, #0]
    5b96:	9202      	str	r2, [sp, #8]
    5b98:	6965      	ldr	r5, [r4, #20]
    5b9a:	23f6      	movs	r3, #246	; 0xf6
    5b9c:	e7dd      	b.n	5b5a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xbe>
  const float input_scale = input->params.scale;
    5b9e:	edda 7a03 	vldr	s15, [sl, #12]
  const float output_scale = output->params.scale;
    5ba2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  const float input_scale = input->params.scale;
    5ba4:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
    5ba8:	edd3 7a03 	vldr	s15, [r3, #12]
    5bac:	f10b 0304 	add.w	r3, fp, #4
    5bb0:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
    5bb4:	9305      	str	r3, [sp, #20]
    5bb6:	2600      	movs	r6, #0
    5bb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5bba:	42b3      	cmp	r3, r6
    5bbc:	dd32      	ble.n	5c24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x188>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    5bbe:	2f01      	cmp	r7, #1
    5bc0:	bfca      	itet	gt
    5bc2:	9b05      	ldrgt	r3, [sp, #20]
    5bc4:	f8db 0004 	ldrle.w	r0, [fp, #4]
    5bc8:	6818      	ldrgt	r0, [r3, #0]
    const double filter_scale = static_cast<double>(scale);
    5bca:	f7fa fc4d 	bl	468 <__aeabi_f2d>
    5bce:	4680      	mov	r8, r0
    const double effective_output_scale = static_cast<double>(input_scale) *
    5bd0:	ee18 0a10 	vmov	r0, s16
    const double filter_scale = static_cast<double>(scale);
    5bd4:	4689      	mov	r9, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    5bd6:	f7fa fc47 	bl	468 <__aeabi_f2d>
    5bda:	4602      	mov	r2, r0
    5bdc:	460b      	mov	r3, r1
    5bde:	4640      	mov	r0, r8
    5be0:	4649      	mov	r1, r9
    5be2:	f7fa fc99 	bl	518 <__aeabi_dmul>
    5be6:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
    5be8:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
    5bec:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
    5bee:	f7fa fc3b 	bl	468 <__aeabi_f2d>
    5bf2:	4602      	mov	r2, r0
    5bf4:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    5bf6:	4640      	mov	r0, r8
    5bf8:	4649      	mov	r1, r9
    5bfa:	f7fa fdb7 	bl	76c <__aeabi_ddiv>
    5bfe:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    5c02:	a908      	add	r1, sp, #32
    5c04:	a807      	add	r0, sp, #28
    5c06:	f7ff fe55 	bl	58b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    5c0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    5c0c:	9b07      	ldr	r3, [sp, #28]
    5c0e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
    5c12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5c14:	9b08      	ldr	r3, [sp, #32]
    5c16:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    5c1a:	9b05      	ldr	r3, [sp, #20]
    5c1c:	3304      	adds	r3, #4
    5c1e:	3601      	adds	r6, #1
    5c20:	9305      	str	r3, [sp, #20]
    5c22:	e7c9      	b.n	5bb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x11c>
  if (input->type == kTfLiteUInt8) {
    5c24:	f89a 3000 	ldrb.w	r3, [sl]
    5c28:	2b03      	cmp	r3, #3
    5c2a:	d11c      	bne.n	5c66 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ca>
    double real_multiplier = 0.0;
    5c2c:	2200      	movs	r2, #0
    5c2e:	2300      	movs	r3, #0
    5c30:	e9cd 2308 	strd	r2, r3, [sp, #32]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    5c34:	ab08      	add	r3, sp, #32
    5c36:	9301      	str	r3, [sp, #4]
    5c38:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5c3a:	9300      	str	r3, [sp, #0]
    5c3c:	462a      	mov	r2, r5
    5c3e:	ee19 3a10 	vmov	r3, s18
    5c42:	4651      	mov	r1, sl
    5c44:	4620      	mov	r0, r4
    5c46:	f7fb fb9f 	bl	1388 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    5c4a:	4606      	mov	r6, r0
    5c4c:	2800      	cmp	r0, #0
    5c4e:	f47f af3f 	bne.w	5ad0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    5c52:	ed9d 0b08 	vldr	d0, [sp, #32]
    5c56:	981a      	ldr	r0, [sp, #104]	; 0x68
    5c58:	a907      	add	r1, sp, #28
    5c5a:	f7ff fe2b 	bl	58b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    5c5e:	9b07      	ldr	r3, [sp, #28]
    5c60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    5c62:	425b      	negs	r3, r3
    5c64:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    5c66:	f89a 3000 	ldrb.w	r3, [sl]
    5c6a:	2b09      	cmp	r3, #9
    5c6c:	d003      	beq.n	5c76 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1da>
    5c6e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    5c72:	2b03      	cmp	r3, #3
    5c74:	d10a      	bne.n	5c8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f0>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    5c76:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
    5c7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5c7c:	9300      	str	r3, [sp, #0]
    5c7e:	7809      	ldrb	r1, [r1, #0]
    5c80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    5c82:	4620      	mov	r0, r4
    5c84:	f7ff fea8 	bl	59d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    5c88:	4606      	mov	r6, r0
    5c8a:	e721      	b.n	5ad0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
  return kTfLiteOk;
    5c8c:	2600      	movs	r6, #0
    5c8e:	e71f      	b.n	5ad0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    5c90:	00045ada 	.word	0x00045ada
    5c94:	00045af4 	.word	0x00045af4
    5c98:	000459f9 	.word	0x000459f9
    5c9c:	00045ac0 	.word	0x00045ac0
    5ca0:	00045b0d 	.word	0x00045b0d
    5ca4:	00045b27 	.word	0x00045b27
    5ca8:	00045a68 	.word	0x00045a68
    5cac:	00045b3b 	.word	0x00045b3b
    5cb0:	00045b56 	.word	0x00045b56
    5cb4:	00045b90 	.word	0x00045b90
    5cb8:	00045b9c 	.word	0x00045b9c
    5cbc:	00045ba9 	.word	0x00045ba9
    5cc0:	00045bb6 	.word	0x00045bb6
    5cc4:	00045bd7 	.word	0x00045bd7

00005cc8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
    5cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ccc:	ed2d 8b04 	vpush	{d8-d9}
    5cd0:	b09b      	sub	sp, #108	; 0x6c
    5cd2:	461c      	mov	r4, r3
  const int stride_width = params.stride_width;
    5cd4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    5cd8:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_height = params.stride_height;
    5cda:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    5cde:	930b      	str	r3, [sp, #44]	; 0x2c
  const int dilation_width_factor = params.dilation_width_factor;
    5ce0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    5ce4:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_height_factor = params.dilation_height_factor;
    5ce6:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    5cea:	930d      	str	r3, [sp, #52]	; 0x34
  const int pad_width = params.padding_values.width;
    5cec:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    5cf0:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_height = params.padding_values.height;
    5cf2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    5cf6:	9310      	str	r3, [sp, #64]	; 0x40
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5cf8:	680b      	ldr	r3, [r1, #0]
                 float* im2col_data) {
    5cfa:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const float output_activation_min = params.float_activation_min;
    5cfc:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const float output_activation_max = params.float_activation_max;
    5d00:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
                 float* im2col_data) {
    5d04:	9219      	str	r2, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5d06:	2b04      	cmp	r3, #4
                 float* im2col_data) {
    5d08:	4688      	mov	r8, r1
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5d0a:	d001      	beq.n	5d10 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48>
    5d0c:	f010 f99c 	bl	16048 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    5d10:	6823      	ldr	r3, [r4, #0]
    5d12:	2b04      	cmp	r3, #4
    5d14:	d1fa      	bne.n	5d0c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    5d16:	6833      	ldr	r3, [r6, #0]
    5d18:	2b04      	cmp	r3, #4
    5d1a:	d1f7      	bne.n	5d0c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    5d1c:	2300      	movs	r3, #0
    5d1e:	4619      	mov	r1, r3
    5d20:	4632      	mov	r2, r6
    5d22:	4640      	mov	r0, r8
    5d24:	f00c f89a 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    5d28:	2303      	movs	r3, #3
    5d2a:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    5d2c:	9011      	str	r0, [sp, #68]	; 0x44
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    5d2e:	4622      	mov	r2, r4
    5d30:	4640      	mov	r0, r8
    5d32:	f00c f893 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    5d36:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    5d38:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    5d3a:	4632      	mov	r2, r6
    5d3c:	2100      	movs	r1, #0
    5d3e:	4620      	mov	r0, r4
    5d40:	f00c f88c 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    5d44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    5d46:	9009      	str	r0, [sp, #36]	; 0x24
  if (bias_data) {
    5d48:	b12b      	cbz	r3, 5d56 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x8e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    5d4a:	9829      	ldr	r0, [sp, #164]	; 0xa4
    5d4c:	f00c f854 	bl	11df8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    5d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d52:	4298      	cmp	r0, r3
    5d54:	d1da      	bne.n	5d0c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  }
  const int input_height = input_shape.Dims(1);
    5d56:	2101      	movs	r1, #1
    5d58:	4640      	mov	r0, r8
    5d5a:	f00b fffe 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    5d5e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    5d60:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
    5d62:	4640      	mov	r0, r8
    5d64:	f00b fff9 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    5d68:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    5d6a:	9014      	str	r0, [sp, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
    5d6c:	4620      	mov	r0, r4
    5d6e:	f00b fff4 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    5d72:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    5d74:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
    5d76:	4620      	mov	r0, r4
    5d78:	f00b ffef 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    5d7c:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    5d7e:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
    5d80:	4630      	mov	r0, r6
    5d82:	f00b ffea 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    5d86:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    5d88:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
    5d8a:	4630      	mov	r0, r6
    5d8c:	f00b ffe5 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
              }
            }
          }
          float bias_value = 0.0f;
    5d90:	eddf 9a55 	vldr	s19, [pc, #340]	; 5ee8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
  const int output_width = output_shape.Dims(2);
    5d94:	9018      	str	r0, [sp, #96]	; 0x60
  for (int batch = 0; batch < batches; ++batch) {
    5d96:	f04f 0900 	mov.w	r9, #0
    5d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5d9c:	4599      	cmp	r9, r3
    5d9e:	f280 809d 	bge.w	5edc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x214>
    5da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5da4:	425b      	negs	r3, r3
    5da6:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5da8:	2300      	movs	r3, #0
    5daa:	9304      	str	r3, [sp, #16]
    5dac:	9b04      	ldr	r3, [sp, #16]
    5dae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    5db0:	4293      	cmp	r3, r2
    5db2:	f280 8090 	bge.w	5ed6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x20e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5db6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5db8:	425b      	negs	r3, r3
    5dba:	9307      	str	r3, [sp, #28]
    5dbc:	2300      	movs	r3, #0
    5dbe:	9305      	str	r3, [sp, #20]
    5dc0:	9b05      	ldr	r3, [sp, #20]
    5dc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    5dc4:	4293      	cmp	r3, r2
    5dc6:	da7e      	bge.n	5ec6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1fe>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    5dc8:	2500      	movs	r5, #0
    5dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5dcc:	429d      	cmp	r5, r3
    5dce:	da72      	bge.n	5eb6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ee>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    5dd0:	2300      	movs	r3, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    5dd2:	f8dd a020 	ldr.w	sl, [sp, #32]
          float total = 0.f;
    5dd6:	ed9f 8a44 	vldr	s16, [pc, #272]	; 5ee8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    5dda:	9306      	str	r3, [sp, #24]
    5ddc:	9b06      	ldr	r3, [sp, #24]
    5dde:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5de0:	4293      	cmp	r3, r2
    5de2:	da41      	bge.n	5e68 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    5de4:	9f07      	ldr	r7, [sp, #28]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    5de6:	f04f 0b00 	mov.w	fp, #0
    5dea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5dec:	459b      	cmp	fp, r3
    5dee:	da35      	bge.n	5e5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x194>
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    5df0:	2f00      	cmp	r7, #0
    5df2:	db2e      	blt.n	5e52 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    5df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5df6:	42bb      	cmp	r3, r7
    5df8:	dd2b      	ble.n	5e52 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    5dfa:	f1ba 0f00 	cmp.w	sl, #0
    5dfe:	db28      	blt.n	5e52 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    5e00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5e02:	4553      	cmp	r3, sl
    5e04:	dd25      	ble.n	5e52 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    5e06:	2300      	movs	r3, #0
    5e08:	9303      	str	r3, [sp, #12]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    5e0a:	9b03      	ldr	r3, [sp, #12]
    5e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5e0e:	4293      	cmp	r3, r2
    5e10:	da1f      	bge.n	5e52 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
                float input_value = input_data[Offset(input_shape, batch, in_y,
    5e12:	9300      	str	r3, [sp, #0]
    5e14:	4652      	mov	r2, sl
    5e16:	463b      	mov	r3, r7
    5e18:	4649      	mov	r1, r9
    5e1a:	4640      	mov	r0, r8
    5e1c:	f00b fffc 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                float filter_value = filter_data[Offset(
    5e20:	9b03      	ldr	r3, [sp, #12]
    5e22:	9a06      	ldr	r2, [sp, #24]
                float input_value = input_data[Offset(input_shape, batch, in_y,
    5e24:	900e      	str	r0, [sp, #56]	; 0x38
                float filter_value = filter_data[Offset(
    5e26:	9300      	str	r3, [sp, #0]
    5e28:	4629      	mov	r1, r5
    5e2a:	465b      	mov	r3, fp
    5e2c:	4620      	mov	r0, r4
    5e2e:	f00b fff3 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
    5e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5e34:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5e36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    5e3a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                total += (input_value * filter_value);
    5e3c:	ed93 7a00 	vldr	s14, [r3]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    5e40:	9b03      	ldr	r3, [sp, #12]
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    5e42:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                total += (input_value * filter_value);
    5e46:	edd0 7a00 	vldr	s15, [r0]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    5e4a:	3301      	adds	r3, #1
                total += (input_value * filter_value);
    5e4c:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    5e50:	e7da      	b.n	5e08 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x140>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    5e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5e54:	f10b 0b01 	add.w	fp, fp, #1
    5e58:	441f      	add	r7, r3
    5e5a:	e7c6      	b.n	5dea <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    5e5c:	9b06      	ldr	r3, [sp, #24]
    5e5e:	3301      	adds	r3, #1
    5e60:	9306      	str	r3, [sp, #24]
    5e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5e64:	449a      	add	sl, r3
    5e66:	e7b9      	b.n	5ddc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
          if (bias_data) {
    5e68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    5e6a:	b30b      	cbz	r3, 5eb0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
            bias_value = bias_data[out_channel];
    5e6c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5e70:	edd3 7a00 	vldr	s15, [r3]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    5e74:	9500      	str	r5, [sp, #0]
              ActivationFunctionWithMinMax(total + bias_value,
    5e76:	ee38 8a27 	vadd.f32	s16, s16, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    5e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5e7e:	4649      	mov	r1, r9
    5e80:	4630      	mov	r0, r6
    5e82:	f00b ffc9 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    5e86:	eeb4 8a68 	vcmp.f32	s16, s17
    5e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5e8e:	bf48      	it	mi
    5e90:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
    5e94:	eeb4 9a48 	vcmp.f32	s18, s16
    5e98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5e9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5ea2:	bf48      	it	mi
    5ea4:	eeb0 8a49 	vmovmi.f32	s16, s18
    5ea8:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    5eac:	3501      	adds	r5, #1
    5eae:	e78c      	b.n	5dca <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
          float bias_value = 0.0f;
    5eb0:	eef0 7a69 	vmov.f32	s15, s19
    5eb4:	e7de      	b.n	5e74 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ac>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5eb6:	9b05      	ldr	r3, [sp, #20]
    5eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5eba:	3301      	adds	r3, #1
    5ebc:	9305      	str	r3, [sp, #20]
    5ebe:	9b07      	ldr	r3, [sp, #28]
    5ec0:	4413      	add	r3, r2
    5ec2:	9307      	str	r3, [sp, #28]
    5ec4:	e77c      	b.n	5dc0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xf8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5ec6:	9b04      	ldr	r3, [sp, #16]
    5ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5eca:	3301      	adds	r3, #1
    5ecc:	9304      	str	r3, [sp, #16]
    5ece:	9b08      	ldr	r3, [sp, #32]
    5ed0:	4413      	add	r3, r2
    5ed2:	9308      	str	r3, [sp, #32]
    5ed4:	e76a      	b.n	5dac <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe4>
  for (int batch = 0; batch < batches; ++batch) {
    5ed6:	f109 0901 	add.w	r9, r9, #1
    5eda:	e75e      	b.n	5d9a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd2>
                                           output_activation_max);
        }
      }
    }
  }
}
    5edc:	b01b      	add	sp, #108	; 0x6c
    5ede:	ecbd 8b04 	vpop	{d8-d9}
    5ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ee6:	bf00      	nop
    5ee8:	00000000 	.word	0x00000000

00005eec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    5eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ef0:	b0a1      	sub	sp, #132	; 0x84
    5ef2:	4698      	mov	r8, r3
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    5ef4:	6943      	ldr	r3, [r0, #20]
    5ef6:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
    5ef8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    5efc:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    5efe:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    5f02:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    5f04:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    5f08:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    5f0a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    5f0e:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    5f10:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    5f14:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    5f16:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    5f1a:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
    5f1c:	69c3      	ldr	r3, [r0, #28]
    5f1e:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    5f20:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5f22:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
    5f24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5f26:	930b      	str	r3, [sp, #44]	; 0x2c
    int8_t* output_data) {
    5f28:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    5f2c:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    5f30:	4293      	cmp	r3, r2
    int8_t* output_data) {
    5f32:	9f2b      	ldr	r7, [sp, #172]	; 0xac
    5f34:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    5f38:	dd01      	ble.n	5f3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
    5f3a:	f010 f885 	bl	16048 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    5f3e:	f8d8 3000 	ldr.w	r3, [r8]
    5f42:	2b04      	cmp	r3, #4
    5f44:	d1f9      	bne.n	5f3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4e>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    5f46:	683b      	ldr	r3, [r7, #0]
    5f48:	2b04      	cmp	r3, #4
    5f4a:	d1f6      	bne.n	5f3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    5f4c:	f8d9 3000 	ldr.w	r3, [r9]
    5f50:	2b04      	cmp	r3, #4
    5f52:	d1f2      	bne.n	5f3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4e>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    5f54:	2300      	movs	r3, #0
    5f56:	4619      	mov	r1, r3
    5f58:	464a      	mov	r2, r9
    5f5a:	4640      	mov	r0, r8
    5f5c:	f00b ff7e 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    5f60:	2303      	movs	r3, #3
    5f62:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    5f64:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    5f66:	463a      	mov	r2, r7
    5f68:	4640      	mov	r0, r8
    5f6a:	f00b ff77 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    5f6e:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    5f70:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    5f72:	464a      	mov	r2, r9
    5f74:	2100      	movs	r1, #0
    5f76:	4638      	mov	r0, r7
    5f78:	f00b ff70 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    5f7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    5f7e:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
    5f80:	b12b      	cbz	r3, 5f8e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    5f82:	982d      	ldr	r0, [sp, #180]	; 0xb4
    5f84:	f00b ff38 	bl	11df8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    5f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5f8a:	4298      	cmp	r0, r3
    5f8c:	d1d5      	bne.n	5f3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4e>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
    5f8e:	2101      	movs	r1, #1
    5f90:	4640      	mov	r0, r8
    5f92:	f00b fee2 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    5f96:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    5f98:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
    5f9a:	4640      	mov	r0, r8
    5f9c:	f00b fedd 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    5fa0:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    5fa2:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
    5fa4:	4638      	mov	r0, r7
    5fa6:	f00b fed8 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    5faa:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    5fac:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
    5fae:	4638      	mov	r0, r7
    5fb0:	f00b fed3 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    5fb4:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    5fb6:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
    5fb8:	4648      	mov	r0, r9
    5fba:	f00b fece 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    5fbe:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    5fc0:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
    5fc2:	4648      	mov	r0, r9
    5fc4:	f00b fec9 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
    5fc8:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
    5fcc:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
    5fce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5fd0:	459b      	cmp	fp, r3
    5fd2:	f280 80df 	bge.w	6194 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a8>
    5fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5fd8:	425b      	negs	r3, r3
    5fda:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
    5fdc:	2300      	movs	r3, #0
    5fde:	9304      	str	r3, [sp, #16]
    5fe0:	9b04      	ldr	r3, [sp, #16]
    5fe2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5fe4:	4293      	cmp	r3, r2
    5fe6:	f280 80d2 	bge.w	618e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a2>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
    5fea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5fec:	425b      	negs	r3, r3
    5fee:	9308      	str	r3, [sp, #32]
    5ff0:	2300      	movs	r3, #0
    5ff2:	9305      	str	r3, [sp, #20]
    5ff4:	9b05      	ldr	r3, [sp, #20]
    5ff6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    5ff8:	4293      	cmp	r3, r2
    5ffa:	f280 80c0 	bge.w	617e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    5ffe:	2500      	movs	r5, #0
    6000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6002:	429d      	cmp	r5, r3
    6004:	f280 80b3 	bge.w	616e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x282>
          int32_t acc = 0;
    6008:	2400      	movs	r4, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    600a:	9e09      	ldr	r6, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    600c:	9406      	str	r4, [sp, #24]
    600e:	9b06      	ldr	r3, [sp, #24]
    6010:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    6012:	4293      	cmp	r3, r2
    6014:	da40      	bge.n	6098 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    6016:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    6018:	f8dd a020 	ldr.w	sl, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    601c:	9307      	str	r3, [sp, #28]
    601e:	9b07      	ldr	r3, [sp, #28]
    6020:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6022:	4293      	cmp	r3, r2
    6024:	da32      	bge.n	608c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    6026:	f1ba 0f00 	cmp.w	sl, #0
    602a:	db29      	blt.n	6080 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    602c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    602e:	4553      	cmp	r3, sl
    6030:	dd26      	ble.n	6080 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    6032:	2e00      	cmp	r6, #0
    6034:	db24      	blt.n	6080 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    6036:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6038:	42b3      	cmp	r3, r6
    603a:	dd21      	ble.n	6080 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    603c:	2300      	movs	r3, #0
    603e:	9302      	str	r3, [sp, #8]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    6040:	9b02      	ldr	r3, [sp, #8]
    6042:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    6044:	4293      	cmp	r3, r2
    6046:	da1b      	bge.n	6080 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    6048:	9300      	str	r3, [sp, #0]
    604a:	4632      	mov	r2, r6
    604c:	4653      	mov	r3, sl
    604e:	4659      	mov	r1, fp
    6050:	4640      	mov	r0, r8
    6052:	f00b fee1 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
    6056:	9b02      	ldr	r3, [sp, #8]
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    6058:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
    605a:	9300      	str	r3, [sp, #0]
    605c:	4629      	mov	r1, r5
    605e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    6062:	4638      	mov	r0, r7
    6064:	f00b fed8 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
    6068:	9a11      	ldr	r2, [sp, #68]	; 0x44
    606a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    606c:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
    606e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6070:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    6072:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    6074:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
    6076:	fb02 4403 	mla	r4, r2, r3, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    607a:	9b02      	ldr	r3, [sp, #8]
    607c:	3301      	adds	r3, #1
    607e:	e7de      	b.n	603e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    6080:	9b07      	ldr	r3, [sp, #28]
    6082:	3301      	adds	r3, #1
    6084:	9307      	str	r3, [sp, #28]
    6086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6088:	449a      	add	sl, r3
    608a:	e7c8      	b.n	601e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x132>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    608c:	9b06      	ldr	r3, [sp, #24]
    608e:	3301      	adds	r3, #1
    6090:	9306      	str	r3, [sp, #24]
    6092:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6094:	441e      	add	r6, r3
    6096:	e7ba      	b.n	600e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
              }
            }
          }

          if (bias_data) {
    6098:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    609a:	b113      	cbz	r3, 60a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
    609c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    60a0:	441c      	add	r4, r3
          }
          acc = MultiplyByQuantizedMultiplier(
    60a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    60a4:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    60a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    60aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    60ae:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    60b2:	2800      	cmp	r0, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    60b4:	fa04 f202 	lsl.w	r2, r4, r2
  int right_shift = shift > 0 ? 0 : -shift;
    60b8:	bfd4      	ite	le
    60ba:	4240      	negle	r0, r0
    60bc:	2000      	movgt	r0, #0
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    60be:	4291      	cmp	r1, r2
    60c0:	d12e      	bne.n	6120 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    60c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    60c6:	425e      	negs	r6, r3
    60c8:	415e      	adcs	r6, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
    60ca:	fb82 2301 	smull	r2, r3, r2, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    60ce:	2a00      	cmp	r2, #0
    60d0:	f173 0100 	sbcs.w	r1, r3, #0
    60d4:	4931      	ldr	r1, [pc, #196]	; (619c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b0>)
    60d6:	bfa8      	it	ge
    60d8:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    60dc:	bb16      	cbnz	r6, 6124 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x238>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    60de:	1852      	adds	r2, r2, r1
    60e0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    60e4:	461c      	mov	r4, r3
    60e6:	2a00      	cmp	r2, #0
    60e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    60ec:	f174 0300 	sbcs.w	r3, r4, #0
    60f0:	da08      	bge.n	6104 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
    60f2:	9a02      	ldr	r2, [sp, #8]
    60f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    60f8:	18d3      	adds	r3, r2, r3
    60fa:	9302      	str	r3, [sp, #8]
    60fc:	9b03      	ldr	r3, [sp, #12]
    60fe:	f143 0300 	adc.w	r3, r3, #0
    6102:	9303      	str	r3, [sp, #12]
    6104:	9b02      	ldr	r3, [sp, #8]
    6106:	0fda      	lsrs	r2, r3, #31
    6108:	9b03      	ldr	r3, [sp, #12]
    610a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
    610e:	281f      	cmp	r0, #31
    6110:	dd0b      	ble.n	612a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23e>
    6112:	4b23      	ldr	r3, [pc, #140]	; (61a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b4>)
    6114:	4a23      	ldr	r2, [pc, #140]	; (61a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>)
    6116:	4824      	ldr	r0, [pc, #144]	; (61a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2bc>)
    6118:	f240 1167 	movw	r1, #359	; 0x167
    611c:	f00a f874 	bl	10208 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6120:	2600      	movs	r6, #0
    6122:	e7d2      	b.n	60ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
    6124:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    6128:	e7f1      	b.n	610e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    612a:	2201      	movs	r2, #1
    612c:	4082      	lsls	r2, r0
    612e:	3a01      	subs	r2, #1
  return a & b;
    6130:	ea02 0103 	and.w	r1, r2, r3
  return a >> offset;
    6134:	1052      	asrs	r2, r2, #1
  return a + b;
    6136:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
    613a:	fa43 f400 	asr.w	r4, r3, r0
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
    613e:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    6140:	9500      	str	r5, [sp, #0]
  return a + b;
    6142:	4291      	cmp	r1, r2
    6144:	bfc8      	it	gt
    6146:	3401      	addgt	r4, #1
          acc += output_offset;
    6148:	441c      	add	r4, r3
    614a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    614c:	429c      	cmp	r4, r3
    614e:	bfb8      	it	lt
    6150:	461c      	movlt	r4, r3
    6152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6154:	429c      	cmp	r4, r3
    6156:	bfa8      	it	ge
    6158:	461c      	movge	r4, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    615a:	4659      	mov	r1, fp
    615c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6160:	4648      	mov	r0, r9
    6162:	f00b fe59 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    6166:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    6168:	3501      	adds	r5, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    616a:	541c      	strb	r4, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    616c:	e748      	b.n	6000 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x114>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    616e:	9b05      	ldr	r3, [sp, #20]
    6170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6172:	3301      	adds	r3, #1
    6174:	9305      	str	r3, [sp, #20]
    6176:	9b08      	ldr	r3, [sp, #32]
    6178:	4413      	add	r3, r2
    617a:	9308      	str	r3, [sp, #32]
    617c:	e73a      	b.n	5ff4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x108>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    617e:	9b04      	ldr	r3, [sp, #16]
    6180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6182:	3301      	adds	r3, #1
    6184:	9304      	str	r3, [sp, #16]
    6186:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6188:	4413      	add	r3, r2
    618a:	9309      	str	r3, [sp, #36]	; 0x24
    618c:	e728      	b.n	5fe0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf4>
  for (int batch = 0; batch < batches; ++batch) {
    618e:	f10b 0b01 	add.w	fp, fp, #1
    6192:	e71c      	b.n	5fce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe2>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
    6194:	b021      	add	sp, #132	; 0x84
    6196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    619a:	bf00      	nop
    619c:	c0000001 	.word	0xc0000001
    61a0:	00045c14 	.word	0x00045c14
    61a4:	00045c23 	.word	0x00045c23
    61a8:	00045c78 	.word	0x00045c78

000061ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    61ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    61b0:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    61b2:	b0ad      	sub	sp, #180	; 0xb4
    61b4:	4604      	mov	r4, r0
    61b6:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    61b8:	b90e      	cbnz	r6, 61be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    61ba:	f00f ff45 	bl	16048 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    61be:	f8d1 8014 	ldr.w	r8, [r1, #20]
    61c2:	f1b8 0f00 	cmp.w	r8, #0
    61c6:	d0f8      	beq.n	61ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  int32_t buf_size = 0;
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    61c8:	4b5f      	ldr	r3, [pc, #380]	; (6348 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    61ca:	681a      	ldr	r2, [r3, #0]
    61cc:	f00b fd96 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    61d0:	4607      	mov	r7, r0
    61d2:	b960      	cbnz	r0, 61ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
    61d4:	4b5d      	ldr	r3, [pc, #372]	; (634c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    61d6:	6965      	ldr	r5, [r4, #20]
    61d8:	9300      	str	r3, [sp, #0]
    61da:	233d      	movs	r3, #61	; 0x3d
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
    61dc:	4a5c      	ldr	r2, [pc, #368]	; (6350 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    61de:	495d      	ldr	r1, [pc, #372]	; (6354 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    61e0:	4620      	mov	r0, r4
    61e2:	47a8      	blx	r5
    61e4:	2501      	movs	r5, #1
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}
    61e6:	4628      	mov	r0, r5
    61e8:	b02d      	add	sp, #180	; 0xb4
    61ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    61ee:	4b5a      	ldr	r3, [pc, #360]	; (6358 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    61f0:	4629      	mov	r1, r5
    61f2:	681a      	ldr	r2, [r3, #0]
    61f4:	4620      	mov	r0, r4
    61f6:	f00b fd81 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    61fa:	4682      	mov	sl, r0
    61fc:	b920      	cbnz	r0, 6208 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    61fe:	4b57      	ldr	r3, [pc, #348]	; (635c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    6200:	9300      	str	r3, [sp, #0]
    6202:	6965      	ldr	r5, [r4, #20]
    6204:	233f      	movs	r3, #63	; 0x3f
    6206:	e7e9      	b.n	61dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    6208:	4b55      	ldr	r3, [pc, #340]	; (6360 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>)
    620a:	4629      	mov	r1, r5
    620c:	681a      	ldr	r2, [r3, #0]
    620e:	4620      	mov	r0, r4
    6210:	f00b fd85 	bl	11d1e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    6214:	4681      	mov	r9, r0
    6216:	b920      	cbnz	r0, 6222 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
    6218:	4b52      	ldr	r3, [pc, #328]	; (6364 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b8>)
    621a:	9300      	str	r3, [sp, #0]
    621c:	6965      	ldr	r5, [r4, #20]
    621e:	2341      	movs	r3, #65	; 0x41
    6220:	e7dc      	b.n	61dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  RuntimeShape input_shape = GetTensorShape(input);
    6222:	4639      	mov	r1, r7
    6224:	a816      	add	r0, sp, #88	; 0x58
    6226:	f00b fda9 	bl	11d7c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
    622a:	4649      	mov	r1, r9
    622c:	a81c      	add	r0, sp, #112	; 0x70
    622e:	f00b fda5 	bl	11d7c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
    6232:	2300      	movs	r3, #0
    6234:	4619      	mov	r1, r3
    6236:	aa1c      	add	r2, sp, #112	; 0x70
    6238:	a816      	add	r0, sp, #88	; 0x58
    623a:	f00b fe0f 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.h = input->dims->data[1];
    623e:	68bb      	ldr	r3, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
    6240:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.h = input->dims->data[1];
    6242:	689a      	ldr	r2, [r3, #8]
  input_dims.w = input->dims->data[2];
    6244:	68db      	ldr	r3, [r3, #12]
  input_dims.h = input->dims->data[1];
    6246:	920b      	str	r2, [sp, #44]	; 0x2c
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
    6248:	4683      	mov	fp, r0
  input_dims.c = input_shape.Dims(3);
    624a:	2103      	movs	r1, #3
    624c:	a816      	add	r0, sp, #88	; 0x58
  input_dims.w = input->dims->data[2];
    624e:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims.c = input_shape.Dims(3);
    6250:	f00b fd83 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.n = output_shape.Dims(3);
    6254:	2103      	movs	r1, #3
  input_dims.c = input_shape.Dims(3);
    6256:	900d      	str	r0, [sp, #52]	; 0x34
    6258:	9009      	str	r0, [sp, #36]	; 0x24
  filter_dims.n = output_shape.Dims(3);
    625a:	a81c      	add	r0, sp, #112	; 0x70
    625c:	f00b fd7d 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = filter->dims->data[1];
    6260:	f8da a008 	ldr.w	sl, [sl, #8]
  filter_dims.c = input_dims.c;
    6264:	9b09      	ldr	r3, [sp, #36]	; 0x24
  filter_dims.h = filter->dims->data[1];
    6266:	f8da 2008 	ldr.w	r2, [sl, #8]
    626a:	920f      	str	r2, [sp, #60]	; 0x3c
  filter_dims.w = filter->dims->data[2];
    626c:	f8da 200c 	ldr.w	r2, [sl, #12]
    6270:	9210      	str	r2, [sp, #64]	; 0x40
  output_dims.n = input_dims.n;
    6272:	e9cd 3b11 	strd	r3, fp, [sp, #68]	; 0x44
  output_dims.h = output->dims->data[1];
    6276:	f8d9 3008 	ldr.w	r3, [r9, #8]
  filter_dims.n = output_shape.Dims(3);
    627a:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.h = output->dims->data[1];
    627c:	689a      	ldr	r2, [r3, #8]
  output_dims.w = output->dims->data[2];
    627e:	68db      	ldr	r3, [r3, #12]
  output_dims.h = output->dims->data[1];
    6280:	9213      	str	r2, [sp, #76]	; 0x4c
  output_dims.c = output_shape.Dims(3);
    6282:	2103      	movs	r1, #3
    6284:	a81c      	add	r0, sp, #112	; 0x70
  output_dims.w = output->dims->data[2];
    6286:	9314      	str	r3, [sp, #80]	; 0x50
  output_dims.c = output_shape.Dims(3);
    6288:	f00b fd67 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    628c:	4b36      	ldr	r3, [pc, #216]	; (6368 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>)
  output_dims.c = output_shape.Dims(3);
    628e:	9015      	str	r0, [sp, #84]	; 0x54
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    6290:	681b      	ldr	r3, [r3, #0]
    6292:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    6296:	4620      	mov	r0, r4
    6298:	f8da 1004 	ldr.w	r1, [sl, #4]
    629c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    629e:	0089      	lsls	r1, r1, #2
    62a0:	9109      	str	r1, [sp, #36]	; 0x24
    62a2:	4798      	blx	r3
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    62a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    62a6:	9909      	ldr	r1, [sp, #36]	; 0x24
  data->reference_op_data.per_channel_output_multiplier =
    62a8:	6270      	str	r0, [r6, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    62aa:	4620      	mov	r0, r4
    62ac:	4798      	blx	r3
  data->reference_op_data.per_channel_output_shift =
    62ae:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    62b0:	9606      	str	r6, [sp, #24]
    62b2:	783b      	ldrb	r3, [r7, #0]
    62b4:	9305      	str	r3, [sp, #20]
    62b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    62b8:	9304      	str	r3, [sp, #16]
    62ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
    62bc:	9303      	str	r3, [sp, #12]
    62be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    62c0:	9302      	str	r3, [sp, #8]
    62c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    62c4:	9301      	str	r3, [sp, #4]
    62c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    62c8:	9300      	str	r3, [sp, #0]
    62ca:	4629      	mov	r1, r5
    62cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    62ce:	4642      	mov	r2, r8
    62d0:	4620      	mov	r0, r4
    62d2:	f000 fa3d 	bl	6750 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    62d6:	4605      	mov	r5, r0
    62d8:	2800      	cmp	r0, #0
    62da:	d12a      	bne.n	6332 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
  if (input->type == kTfLiteInt8) {
    62dc:	783b      	ldrb	r3, [r7, #0]
    62de:	2b09      	cmp	r3, #9
    62e0:	d12e      	bne.n	6340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>
    conv_params.input_offset = -input->params.zero_point;
    62e2:	693b      	ldr	r3, [r7, #16]
    62e4:	425b      	negs	r3, r3
    62e6:	9322      	str	r3, [sp, #136]	; 0x88
    conv_params.output_offset = output->params.zero_point;
    62e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
    62ec:	9323      	str	r3, [sp, #140]	; 0x8c
    conv_params.stride.h = params.stride_height;
    62ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
    62f2:	9325      	str	r3, [sp, #148]	; 0x94
    conv_params.stride.w = params.stride_width;
    62f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    62f8:	9324      	str	r3, [sp, #144]	; 0x90
    conv_params.dilation.h = params.dilation_height_factor;
    62fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
    62fe:	9329      	str	r3, [sp, #164]	; 0xa4
    conv_params.dilation.w = params.dilation_width_factor;
    6300:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6304:	9328      	str	r3, [sp, #160]	; 0xa0
    conv_params.padding.h = data->reference_op_data.padding.height;
    6306:	6873      	ldr	r3, [r6, #4]
    6308:	9327      	str	r3, [sp, #156]	; 0x9c
    conv_params.padding.w = data->reference_op_data.padding.width;
    630a:	6833      	ldr	r3, [r6, #0]
    630c:	9326      	str	r3, [sp, #152]	; 0x98
    conv_params.activation.min = data->reference_op_data.output_activation_min;
    630e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6310:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.activation.max = data->reference_op_data.output_activation_max;
    6312:	6b33      	ldr	r3, [r6, #48]	; 0x30
    6314:	932b      	str	r3, [sp, #172]	; 0xac
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
    6316:	a90a      	add	r1, sp, #40	; 0x28
    6318:	ab12      	add	r3, sp, #72	; 0x48
    631a:	aa0e      	add	r2, sp, #56	; 0x38
    631c:	a822      	add	r0, sp, #136	; 0x88
    631e:	f00d faa5 	bl	1386c <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
    6322:	1e01      	subs	r1, r0, #0
    6324:	dd0c      	ble.n	6340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
    6326:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6328:	f106 0234 	add.w	r2, r6, #52	; 0x34
    632c:	4620      	mov	r0, r4
    632e:	4798      	blx	r3
    6330:	4605      	mov	r5, r0
  RuntimeShape output_shape = GetTensorShape(output);
    6332:	a81c      	add	r0, sp, #112	; 0x70
    6334:	f00b fd06 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
    6338:	a816      	add	r0, sp, #88	; 0x58
    633a:	f00b fd03 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    633e:	e752      	b.n	61e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    data->buffer_idx = -1;
    6340:	f04f 33ff 	mov.w	r3, #4294967295
    6344:	6373      	str	r3, [r6, #52]	; 0x34
    6346:	e7f4      	b.n	6332 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
    6348:	00017bb4 	.word	0x00017bb4
    634c:	00045d51 	.word	0x00045d51
    6350:	00045ce8 	.word	0x00045ce8
    6354:	00045a68 	.word	0x00045a68
    6358:	00017bbc 	.word	0x00017bbc
    635c:	00045d62 	.word	0x00045d62
    6360:	00017bb8 	.word	0x00017bb8
    6364:	00045d74 	.word	0x00045d74
    6368:	00017bc0 	.word	0x00017bc0

0000636c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    6370:	4bae      	ldr	r3, [pc, #696]	; (662c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    6372:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
}

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
    6376:	681a      	ldr	r2, [r3, #0]
    6378:	460d      	mov	r5, r1
    637a:	4604      	mov	r4, r0
    637c:	f00b fd20 	bl	11dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    6380:	4bab      	ldr	r3, [pc, #684]	; (6630 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    6382:	4607      	mov	r7, r0
    6384:	681a      	ldr	r2, [r3, #0]
    6386:	4629      	mov	r1, r5
    6388:	4620      	mov	r0, r4
    638a:	f00b fd19 	bl	11dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    638e:	682b      	ldr	r3, [r5, #0]
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	2b03      	cmp	r3, #3
    6394:	4680      	mov	r8, r0
    6396:	d109      	bne.n	63ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    6398:	4ba6      	ldr	r3, [pc, #664]	; (6634 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    639a:	4629      	mov	r1, r5
    639c:	681a      	ldr	r2, [r3, #0]
    639e:	4620      	mov	r0, r4
    63a0:	f00b fd0e 	bl	11dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    63a4:	4606      	mov	r6, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    63a6:	b91c      	cbnz	r4, 63b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44>
    63a8:	f00f fe4e 	bl	16048 <abort>
    63ac:	2600      	movs	r6, #0
    63ae:	e7fa      	b.n	63a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  TFLITE_DCHECK(node != nullptr);
  return context->GetEvalTensor(context, node->outputs->data[index]);
    63b0:	4aa1      	ldr	r2, [pc, #644]	; (6638 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    63b2:	686b      	ldr	r3, [r5, #4]
    63b4:	6812      	ldr	r2, [r2, #0]
    63b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    63ba:	4620      	mov	r0, r4
    63bc:	6859      	ldr	r1, [r3, #4]
    63be:	6d62      	ldr	r2, [r4, #84]	; 0x54
    63c0:	4790      	blx	r2
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
    63c2:	6969      	ldr	r1, [r5, #20]
    63c4:	4681      	mov	r9, r0
    63c6:	2900      	cmp	r1, #0
    63c8:	d0ee      	beq.n	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
    63ca:	692d      	ldr	r5, [r5, #16]
    63cc:	2d00      	cmp	r5, #0
    63ce:	d0eb      	beq.n	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    63d0:	7a3b      	ldrb	r3, [r7, #8]
    63d2:	7a02      	ldrb	r2, [r0, #8]
    63d4:	4293      	cmp	r3, r2
    63d6:	d00e      	beq.n	63f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
    63d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
    63dc:	4b97      	ldr	r3, [pc, #604]	; (663c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    63de:	9301      	str	r3, [sp, #4]
    63e0:	4b97      	ldr	r3, [pc, #604]	; (6640 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    63e2:	9300      	str	r3, [sp, #0]
    63e4:	6965      	ldr	r5, [r4, #20]
    63e6:	4a97      	ldr	r2, [pc, #604]	; (6644 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    63e8:	4997      	ldr	r1, [pc, #604]	; (6648 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    63ea:	f44f 7386 	mov.w	r3, #268	; 0x10c
    63ee:	4620      	mov	r0, r4
    63f0:	47a8      	blx	r5
                                     bias, output, nullptr);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    63f2:	2001      	movs	r0, #1
    63f4:	e059      	b.n	64aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    63f6:	f898 0008 	ldrb.w	r0, [r8, #8]
    63fa:	4298      	cmp	r0, r3
    63fc:	d004      	beq.n	6408 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
    63fe:	6963      	ldr	r3, [r4, #20]
    6400:	4992      	ldr	r1, [pc, #584]	; (664c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    6402:	4620      	mov	r0, r4
    6404:	4798      	blx	r3
    6406:	e7f4      	b.n	63f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
  switch (input->type) {  // Already know in/out types are same.
    6408:	2801      	cmp	r0, #1
    640a:	d00a      	beq.n	6422 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
    640c:	2809      	cmp	r0, #9
    640e:	d050      	beq.n	64b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x146>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    6410:	6965      	ldr	r5, [r4, #20]
    6412:	f003 f82f 	bl	9474 <TfLiteTypeGetName>
    6416:	7a3b      	ldrb	r3, [r7, #8]
    6418:	498d      	ldr	r1, [pc, #564]	; (6650 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    641a:	4602      	mov	r2, r0
    641c:	4620      	mov	r0, r4
    641e:	47a8      	blx	r5
    6420:	e7e7      	b.n	63f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
          ConvParamsFloat(params, data.reference_op_data),
    6422:	462a      	mov	r2, r5
    6424:	a864      	add	r0, sp, #400	; 0x190
    6426:	f000 f95f 	bl	66e8 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    642a:	4639      	mov	r1, r7
    642c:	a81e      	add	r0, sp, #120	; 0x78
    642e:	f00b fdde 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(bias),
    6432:	ad2a      	add	r5, sp, #168	; 0xa8
          tflite::micro::GetTensorShape(filter),
    6434:	4641      	mov	r1, r8
    6436:	a824      	add	r0, sp, #144	; 0x90

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  return reinterpret_cast<const T*>(tensor->data.raw);
    6438:	f8d7 a000 	ldr.w	sl, [r7]
    643c:	f00b fdd7 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(bias),
    6440:	4631      	mov	r1, r6
    6442:	4628      	mov	r0, r5
    6444:	f8d8 8000 	ldr.w	r8, [r8]
    6448:	f00b fdd1 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    644c:	2e00      	cmp	r6, #0
    644e:	d0ab      	beq.n	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return reinterpret_cast<const T*>(tensor->data.raw);
    6450:	f8d6 b000 	ldr.w	fp, [r6]
          tflite::micro::GetTensorShape(output),
    6454:	ae5a      	add	r6, sp, #360	; 0x168
    6456:	4649      	mov	r1, r9
    6458:	4630      	mov	r0, r6
    645a:	f00b fdc8 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(nullptr), nullptr);
    645e:	af72      	add	r7, sp, #456	; 0x1c8
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6460:	f8d9 9000 	ldr.w	r9, [r9]
    6464:	2100      	movs	r1, #0
    6466:	4638      	mov	r0, r7
      tflite::reference_ops::Conv(
    6468:	2400      	movs	r4, #0
          tflite::micro::GetTensorShape(nullptr), nullptr);
    646a:	f00b fdc0 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    646e:	ab24      	add	r3, sp, #144	; 0x90
    6470:	4652      	mov	r2, sl
    6472:	a91e      	add	r1, sp, #120	; 0x78
    6474:	a864      	add	r0, sp, #400	; 0x190
    6476:	e9cd 7405 	strd	r7, r4, [sp, #20]
    647a:	e9cd 6903 	strd	r6, r9, [sp, #12]
    647e:	e9cd 5b01 	strd	r5, fp, [sp, #4]
    6482:	f8cd 8000 	str.w	r8, [sp]
    6486:	f7ff fc1f 	bl	5cc8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
    648a:	4638      	mov	r0, r7
    648c:	f00b fc5a 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
    6490:	4630      	mov	r0, r6
    6492:	f00b fc57 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    6496:	4628      	mov	r0, r5
    6498:	f00b fc54 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    649c:	a824      	add	r0, sp, #144	; 0x90
    649e:	f00b fc51 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    64a2:	a81e      	add	r0, sp, #120	; 0x78
        tflite::micro::GetTensorShape(input),
    64a4:	f00b fc4e 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
    64a8:	2000      	movs	r0, #0
  }
  return kTfLiteOk;
}
    64aa:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    64ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  conv_params.dilation.h = params.dilation_height_factor;
    64b2:	694a      	ldr	r2, [r1, #20]
  conv_params.dilation.w = params.dilation_width_factor;
    64b4:	690b      	ldr	r3, [r1, #16]
  conv_params.dilation.h = params.dilation_height_factor;
    64b6:	9261      	str	r2, [sp, #388]	; 0x184
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
    64b8:	2a01      	cmp	r2, #1
  conv_params.dilation.w = params.dilation_width_factor;
    64ba:	9360      	str	r3, [sp, #384]	; 0x180
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
    64bc:	f040 80ca 	bne.w	6654 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    64c0:	2b01      	cmp	r3, #1
    64c2:	f040 80c7 	bne.w	6654 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
    64c6:	692b      	ldr	r3, [r5, #16]
    64c8:	425b      	negs	r3, r3
    64ca:	935a      	str	r3, [sp, #360]	; 0x168
    conv_params.output_offset = data.reference_op_data.output_zero_point;
    64cc:	69ab      	ldr	r3, [r5, #24]
    64ce:	935b      	str	r3, [sp, #364]	; 0x16c
    conv_params.stride.h = params.stride_height;
    64d0:	688b      	ldr	r3, [r1, #8]
    64d2:	935d      	str	r3, [sp, #372]	; 0x174
    conv_params.stride.w = params.stride_width;
    64d4:	684b      	ldr	r3, [r1, #4]
    64d6:	935c      	str	r3, [sp, #368]	; 0x170
    conv_params.padding.h = data.reference_op_data.padding.height;
    64d8:	686b      	ldr	r3, [r5, #4]
    64da:	935f      	str	r3, [sp, #380]	; 0x17c
    conv_params.padding.w = data.reference_op_data.padding.width;
    64dc:	682b      	ldr	r3, [r5, #0]
    64de:	935e      	str	r3, [sp, #376]	; 0x178
    conv_params.activation.min = data.reference_op_data.output_activation_min;
    64e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    64e2:	9362      	str	r3, [sp, #392]	; 0x188
    conv_params.activation.max = data.reference_op_data.output_activation_max;
    64e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    64e6:	9363      	str	r3, [sp, #396]	; 0x18c
    quant_params.multiplier = const_cast<int32_t*>(
    64e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    64ea:	930a      	str	r3, [sp, #40]	; 0x28
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    64ec:	4641      	mov	r1, r8
    quant_params.shift =
    64ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    64f0:	930b      	str	r3, [sp, #44]	; 0x2c
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    64f2:	a830      	add	r0, sp, #192	; 0xc0
    64f4:	f00b fd7b 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    64f8:	4639      	mov	r1, r7
    64fa:	a836      	add	r0, sp, #216	; 0xd8
    64fc:	f00b fd77 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    6500:	4649      	mov	r1, r9
    6502:	a83c      	add	r0, sp, #240	; 0xf0
    6504:	f00b fd73 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
    6508:	4631      	mov	r1, r6
    650a:	a842      	add	r0, sp, #264	; 0x108
    650c:	f00b fd6f 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
    6510:	e9dd 2362 	ldrd	r2, r3, [sp, #392]	; 0x188
    6514:	429a      	cmp	r2, r3
    6516:	f73f af47 	bgt.w	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    651a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    651c:	2b04      	cmp	r3, #4
    651e:	f47f af43 	bne.w	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    6522:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    6524:	2b04      	cmp	r3, #4
    6526:	f47f af3f 	bne.w	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    652a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    652c:	2b04      	cmp	r3, #4
    652e:	f47f af3b 	bne.w	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
    6532:	2300      	movs	r3, #0
    6534:	4619      	mov	r1, r3
    6536:	aa3c      	add	r2, sp, #240	; 0xf0
    6538:	a836      	add	r0, sp, #216	; 0xd8
    653a:	f00b fc8f 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    653e:	2303      	movs	r3, #3
    6540:	4619      	mov	r1, r3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
    6542:	9008      	str	r0, [sp, #32]
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    6544:	aa30      	add	r2, sp, #192	; 0xc0
    6546:	a836      	add	r0, sp, #216	; 0xd8
    6548:	f00b fc88 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    654c:	2303      	movs	r3, #3
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    654e:	9009      	str	r0, [sp, #36]	; 0x24
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    6550:	aa3c      	add	r2, sp, #240	; 0xf0
    6552:	2100      	movs	r1, #0
    6554:	a830      	add	r0, sp, #192	; 0xc0
    6556:	f00b fc81 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    655a:	4682      	mov	sl, r0
  TFLITE_DCHECK(tensor != nullptr);
    655c:	2e00      	cmp	r6, #0
    655e:	f43f af23 	beq.w	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
    6562:	6833      	ldr	r3, [r6, #0]
    6564:	b12b      	cbz	r3, 6572 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    6566:	a842      	add	r0, sp, #264	; 0x108
    6568:	f00b fc46 	bl	11df8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    656c:	4582      	cmp	sl, r0
    656e:	f47f af1b 	bne.w	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    input_dims.n = batch_size;
    6572:	9b08      	ldr	r3, [sp, #32]
    6574:	930e      	str	r3, [sp, #56]	; 0x38
    input_dims.h = input_shape.Dims(1);
    6576:	2101      	movs	r1, #1
    6578:	a836      	add	r0, sp, #216	; 0xd8
    657a:	f00b fbee 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
    657e:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
    6580:	900f      	str	r0, [sp, #60]	; 0x3c
    input_dims.w = input_shape.Dims(2);
    6582:	a836      	add	r0, sp, #216	; 0xd8
    6584:	f00b fbe9 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.c = input_depth;
    6588:	9b09      	ldr	r3, [sp, #36]	; 0x24
    input_dims.w = input_shape.Dims(2);
    658a:	9010      	str	r0, [sp, #64]	; 0x40
    filter_dims.h = filter_shape.Dims(1);
    658c:	2101      	movs	r1, #1
    658e:	a830      	add	r0, sp, #192	; 0xc0
    input_dims.c = input_depth;
    6590:	9311      	str	r3, [sp, #68]	; 0x44
    filter_dims.n = output_depth;
    6592:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
    filter_dims.h = filter_shape.Dims(1);
    6596:	f00b fbe0 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.w = filter_shape.Dims(2);
    659a:	2102      	movs	r1, #2
    filter_dims.h = filter_shape.Dims(1);
    659c:	9013      	str	r0, [sp, #76]	; 0x4c
    filter_dims.w = filter_shape.Dims(2);
    659e:	a830      	add	r0, sp, #192	; 0xc0
    65a0:	f00b fbdb 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.c = input_depth;
    65a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    filter_dims.w = filter_shape.Dims(2);
    65a6:	9014      	str	r0, [sp, #80]	; 0x50
    bias_dims.n = 1;
    65a8:	2101      	movs	r1, #1
    filter_dims.c = input_depth;
    65aa:	9315      	str	r3, [sp, #84]	; 0x54
    output_dims.h = output_shape.Dims(1);
    65ac:	a83c      	add	r0, sp, #240	; 0xf0
    output_dims.n = batch_size;
    65ae:	9b08      	ldr	r3, [sp, #32]
    65b0:	931a      	str	r3, [sp, #104]	; 0x68
    bias_dims.h = 1;
    65b2:	e9cd 1116 	strd	r1, r1, [sp, #88]	; 0x58
    bias_dims.c = output_depth;
    65b6:	e9cd 1a18 	strd	r1, sl, [sp, #96]	; 0x60
    output_dims.h = output_shape.Dims(1);
    65ba:	f00b fbce 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
    65be:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
    65c0:	901b      	str	r0, [sp, #108]	; 0x6c
    output_dims.w = output_shape.Dims(2);
    65c2:	a83c      	add	r0, sp, #240	; 0xf0
    65c4:	f00b fbc9 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    if (data.buffer_idx > -1) {
    65c8:	6b69      	ldr	r1, [r5, #52]	; 0x34
    ctx.buf = nullptr;
    65ca:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
    65cc:	4299      	cmp	r1, r3
    filter_dims.n = output_depth;
    65ce:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
    output_dims.c = output_depth;
    65d2:	e9cd 0a1c 	strd	r0, sl, [sp, #112]	; 0x70
    ctx.size = 0;
    65d6:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    if (data.buffer_idx > -1) {
    65da:	db03      	blt.n	65e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x278>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    65dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    65de:	4620      	mov	r0, r4
    65e0:	4798      	blx	r3
    65e2:	900c      	str	r0, [sp, #48]	; 0x30
    TFLITE_DCHECK_EQ(
    65e4:	f8d9 3000 	ldr.w	r3, [r9]
    65e8:	9306      	str	r3, [sp, #24]
    65ea:	ab1a      	add	r3, sp, #104	; 0x68
    65ec:	9305      	str	r3, [sp, #20]
    65ee:	6833      	ldr	r3, [r6, #0]
    65f0:	9304      	str	r3, [sp, #16]
    65f2:	ab16      	add	r3, sp, #88	; 0x58
    65f4:	9303      	str	r3, [sp, #12]
    65f6:	f8d8 3000 	ldr.w	r3, [r8]
    65fa:	e9cd b301 	strd	fp, r3, [sp, #4]
    65fe:	683b      	ldr	r3, [r7, #0]
    6600:	9300      	str	r3, [sp, #0]
    6602:	aa0a      	add	r2, sp, #40	; 0x28
    6604:	ab0e      	add	r3, sp, #56	; 0x38
    6606:	a95a      	add	r1, sp, #360	; 0x168
    6608:	a80c      	add	r0, sp, #48	; 0x30
    660a:	f00d f8d3 	bl	137b4 <arm_convolve_wrapper_s8>
    660e:	2800      	cmp	r0, #0
    6610:	f47f aeca 	bne.w	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
    6614:	a842      	add	r0, sp, #264	; 0x108
    6616:	f00b fb95 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    661a:	a83c      	add	r0, sp, #240	; 0xf0
    661c:	f00b fb92 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    6620:	a836      	add	r0, sp, #216	; 0xd8
    6622:	f00b fb8f 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6626:	a830      	add	r0, sp, #192	; 0xc0
    6628:	e73c      	b.n	64a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x138>
    662a:	bf00      	nop
    662c:	00017bb4 	.word	0x00017bb4
    6630:	00017bbc 	.word	0x00017bbc
    6634:	00017bb0 	.word	0x00017bb0
    6638:	00017bb8 	.word	0x00017bb8
    663c:	00045d86 	.word	0x00045d86
    6640:	00045d93 	.word	0x00045d93
    6644:	00045ce8 	.word	0x00045ce8
    6648:	00045ac0 	.word	0x00045ac0
    664c:	00045d9f 	.word	0x00045d9f
    6650:	00045e39 	.word	0x00045e39
        ConvParamsQuantized(params, data.reference_op_data),
    6654:	462a      	mov	r2, r5
    6656:	a872      	add	r0, sp, #456	; 0x1c8
    6658:	f00b fc2c 	bl	11eb4 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        tflite::micro::GetTensorShape(filter),
    665c:	ac4e      	add	r4, sp, #312	; 0x138
        tflite::micro::GetTensorShape(input),
    665e:	4639      	mov	r1, r7
    6660:	a848      	add	r0, sp, #288	; 0x120
        data.reference_op_data.per_channel_output_shift,
    6662:	e9d5 ab09 	ldrd	sl, fp, [r5, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
    6666:	f00b fcc2 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(bias),
    666a:	ad54      	add	r5, sp, #336	; 0x150
        tflite::micro::GetTensorShape(filter),
    666c:	4641      	mov	r1, r8
    666e:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
    6670:	683f      	ldr	r7, [r7, #0]
    6672:	f00b fcbc 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(bias),
    6676:	4631      	mov	r1, r6
    6678:	4628      	mov	r0, r5
    667a:	f8d8 8000 	ldr.w	r8, [r8]
    667e:	f00b fcb6 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    6682:	2e00      	cmp	r6, #0
    6684:	f43f ae90 	beq.w	63a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return reinterpret_cast<const T*>(tensor->data.raw);
    6688:	6833      	ldr	r3, [r6, #0]
    668a:	9308      	str	r3, [sp, #32]
        tflite::micro::GetTensorShape(output),
    668c:	ae64      	add	r6, sp, #400	; 0x190
    668e:	4649      	mov	r1, r9
    6690:	4630      	mov	r0, r6
    6692:	f00b fcac 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
    6696:	f8d9 2000 	ldr.w	r2, [r9]
    669a:	9b08      	ldr	r3, [sp, #32]
    669c:	9700      	str	r7, [sp, #0]
    669e:	4651      	mov	r1, sl
    66a0:	e9cd 6205 	strd	r6, r2, [sp, #20]
    66a4:	e9cd 5303 	strd	r5, r3, [sp, #12]
    66a8:	465a      	mov	r2, fp
    66aa:	ab48      	add	r3, sp, #288	; 0x120
    66ac:	a872      	add	r0, sp, #456	; 0x1c8
    66ae:	e9cd 4801 	strd	r4, r8, [sp, #4]
    66b2:	f7ff fc1b 	bl	5eec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
    66b6:	4630      	mov	r0, r6
    66b8:	f00b fb44 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
    66bc:	4628      	mov	r0, r5
    66be:	f00b fb41 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
    66c2:	4620      	mov	r0, r4
    66c4:	f00b fb3e 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
    66c8:	a848      	add	r0, sp, #288	; 0x120
    66ca:	e6eb      	b.n	64a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x138>

000066cc <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    66cc:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    66ce:	4d05      	ldr	r5, [pc, #20]	; (66e4 <_ZN6tflite16Register_CONV_2DEv+0x18>)
TfLiteRegistration Register_CONV_2D() {
    66d0:	4606      	mov	r6, r0
          /*version=*/0};
    66d2:	4604      	mov	r4, r0
    66d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    66d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    66d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    66dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    66e0:	4630      	mov	r0, r6
    66e2:	bd70      	pop	{r4, r5, r6, pc}
    66e4:	00016fe0 	.word	0x00016fe0

000066e8 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
    66e8:	7b0b      	ldrb	r3, [r1, #12]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    66ea:	2b01      	cmp	r3, #1
                           const OpDataConv& data) {
    66ec:	b570      	push	{r4, r5, r6, lr}
    66ee:	4604      	mov	r4, r0
    66f0:	460d      	mov	r5, r1
    66f2:	4616      	mov	r6, r2
    66f4:	d103      	bne.n	66fe <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x16>
    *activation_min = 0;
    66f6:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    66f8:	6323      	str	r3, [r4, #48]	; 0x30
    *activation_max = std::numeric_limits<T>::max();
    66fa:	4b12      	ldr	r3, [pc, #72]	; (6744 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x5c>)
    66fc:	e004      	b.n	6708 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
  } else if (activation == kTfLiteActRelu6) {
    66fe:	2b03      	cmp	r3, #3
    6700:	d115      	bne.n	672e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x46>
    *activation_min = 0;
    6702:	2300      	movs	r3, #0
    6704:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 6;
    6706:	4b10      	ldr	r3, [pc, #64]	; (6748 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x60>)
    *activation_max = std::numeric_limits<T>::max();
    6708:	6363      	str	r3, [r4, #52]	; 0x34
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    670a:	7828      	ldrb	r0, [r5, #0]
    670c:	f00b fc93 	bl	12036 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
    6710:	6833      	ldr	r3, [r6, #0]
    6712:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
    6714:	6873      	ldr	r3, [r6, #4]
    6716:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
    6718:	686b      	ldr	r3, [r5, #4]
    671a:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
    671c:	68ab      	ldr	r3, [r5, #8]
    671e:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
    6720:	692b      	ldr	r3, [r5, #16]
    6722:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
    6724:	696b      	ldr	r3, [r5, #20]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    6726:	7020      	strb	r0, [r4, #0]
  op_params.dilation_height_factor = params.dilation_height_factor;
    6728:	8223      	strh	r3, [r4, #16]
  return op_params;
}
    672a:	4620      	mov	r0, r4
    672c:	bd70      	pop	{r4, r5, r6, pc}
  } else if (activation == kTfLiteActReluN1To1) {
    672e:	2b02      	cmp	r3, #2
    6730:	d104      	bne.n	673c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x54>
    *activation_min = -1;
    6732:	4b06      	ldr	r3, [pc, #24]	; (674c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x64>)
    6734:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 1;
    6736:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    673a:	e7e5      	b.n	6708 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
    *activation_min = std::numeric_limits<T>::lowest();
    673c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    6740:	e7da      	b.n	66f8 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x10>
    6742:	bf00      	nop
    6744:	7f7fffff 	.word	0x7f7fffff
    6748:	40c00000 	.word	0x40c00000
    674c:	bf800000 	.word	0xbf800000

00006750 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    6750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6754:	b08f      	sub	sp, #60	; 0x3c
    6756:	4605      	mov	r5, r0
    6758:	930c      	str	r3, [sp, #48]	; 0x30
  bool has_bias = node->inputs->size == 3;
    675a:	680b      	ldr	r3, [r1, #0]
                                 OpDataConv* data) {
    675c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    675e:	681b      	ldr	r3, [r3, #0]
    6760:	3b02      	subs	r3, #2
    6762:	2b01      	cmp	r3, #1
                                 OpDataConv* data) {
    6764:	4688      	mov	r8, r1
    6766:	4617      	mov	r7, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    6768:	d90b      	bls.n	6782 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x32>
    676a:	4b5d      	ldr	r3, [pc, #372]	; (68e0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
    676c:	9300      	str	r3, [sp, #0]
    676e:	6944      	ldr	r4, [r0, #20]
    6770:	4a5c      	ldr	r2, [pc, #368]	; (68e4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    6772:	495d      	ldr	r1, [pc, #372]	; (68e8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
    6774:	2356      	movs	r3, #86	; 0x56
    6776:	47a0      	blx	r4
    6778:	2401      	movs	r4, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    677a:	4620      	mov	r0, r4
    677c:	b00f      	add	sp, #60	; 0x3c
    677e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    6782:	684b      	ldr	r3, [r1, #4]
    6784:	681c      	ldr	r4, [r3, #0]
    6786:	2c01      	cmp	r4, #1
    6788:	d00c      	beq.n	67a4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    678a:	2601      	movs	r6, #1
    678c:	e9cd 4602 	strd	r4, r6, [sp, #8]
    6790:	4b56      	ldr	r3, [pc, #344]	; (68ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
    6792:	9301      	str	r3, [sp, #4]
    6794:	4b56      	ldr	r3, [pc, #344]	; (68f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
    6796:	9300      	str	r3, [sp, #0]
    6798:	6944      	ldr	r4, [r0, #20]
    679a:	4a52      	ldr	r2, [pc, #328]	; (68e4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    679c:	4955      	ldr	r1, [pc, #340]	; (68f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
    679e:	2357      	movs	r3, #87	; 0x57
    67a0:	47a0      	blx	r4
    67a2:	e7e9      	b.n	6778 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
    67a4:	e9d2 9a01 	ldrd	r9, sl, [r2, #4]
  auto padding = params.padding;
    67a8:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    67ac:	6953      	ldr	r3, [r2, #20]
    67ae:	930a      	str	r3, [sp, #40]	; 0x28
      params.dilation_width_factor, height, width, filter_height, filter_width,
    67b0:	6913      	ldr	r3, [r2, #16]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    67b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    67b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    67b6:	930b      	str	r3, [sp, #44]	; 0x2c
    67b8:	9300      	str	r3, [sp, #0]
    67ba:	4658      	mov	r0, fp
    67bc:	464b      	mov	r3, r9
    67be:	f00b fb65 	bl	11e8c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    67c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    67c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    67c6:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    67c8:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    67ca:	9300      	str	r3, [sp, #0]
    67cc:	4658      	mov	r0, fp
    67ce:	4653      	mov	r3, sl
    67d0:	f00b fb5c 	bl	11e8c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    67d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    67d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    67d8:	3b01      	subs	r3, #1
    67da:	4353      	muls	r3, r2
    67dc:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    67de:	3801      	subs	r0, #1
    67e0:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
    67e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    67e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  int total_padding =
    67e8:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    67ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    67ee:	3b01      	subs	r3, #1
    67f0:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
    67f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    67f4:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    67f6:	1e50      	subs	r0, r2, #1
    67f8:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
    67fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67fe:	eba9 0903 	sub.w	r9, r9, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    6802:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    6806:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
    680a:	ea4f 0369 	mov.w	r3, r9, asr #1
      padding, &out_height, &out_width);
    680e:	6033      	str	r3, [r6, #0]
    6810:	ea4f 036a 	mov.w	r3, sl, asr #1
    6814:	6073      	str	r3, [r6, #4]
  *offset = total_padding % 2;
    6816:	f009 0301 	and.w	r3, r9, #1
    681a:	60b3      	str	r3, [r6, #8]
    681c:	f00a 0301 	and.w	r3, sl, #1
    6820:	60f3      	str	r3, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    6822:	2200      	movs	r2, #0
    6824:	4641      	mov	r1, r8
    6826:	4628      	mov	r0, r5
    6828:	f00b fa68 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    682c:	4682      	mov	sl, r0
    682e:	b940      	cbnz	r0, 6842 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf2>
    6830:	4b31      	ldr	r3, [pc, #196]	; (68f8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
    6832:	696e      	ldr	r6, [r5, #20]
    6834:	9300      	str	r3, [sp, #0]
    6836:	2361      	movs	r3, #97	; 0x61
  TF_LITE_ENSURE(context, filter != nullptr);
    6838:	4a2a      	ldr	r2, [pc, #168]	; (68e4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    683a:	492b      	ldr	r1, [pc, #172]	; (68e8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
    683c:	4628      	mov	r0, r5
    683e:	47b0      	blx	r6
    6840:	e79b      	b.n	677a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    6842:	4622      	mov	r2, r4
    6844:	4641      	mov	r1, r8
    6846:	4628      	mov	r0, r5
    6848:	f00b fa58 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    684c:	4681      	mov	r9, r0
    684e:	b920      	cbnz	r0, 685a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
    6850:	4b2a      	ldr	r3, [pc, #168]	; (68fc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
    6852:	9300      	str	r3, [sp, #0]
    6854:	696e      	ldr	r6, [r5, #20]
    6856:	2363      	movs	r3, #99	; 0x63
    6858:	e7ee      	b.n	6838 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    685a:	4641      	mov	r1, r8
    685c:	2202      	movs	r2, #2
    685e:	4628      	mov	r0, r5
    6860:	f00b fa6e 	bl	11d40 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    6864:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    6866:	900a      	str	r0, [sp, #40]	; 0x28
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    6868:	2200      	movs	r2, #0
    686a:	4628      	mov	r0, r5
    686c:	f00b fa57 	bl	11d1e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    6870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6872:	4680      	mov	r8, r0
    6874:	b920      	cbnz	r0, 6880 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x130>
    6876:	4b22      	ldr	r3, [pc, #136]	; (6900 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
    6878:	9300      	str	r3, [sp, #0]
    687a:	696e      	ldr	r6, [r5, #20]
    687c:	2367      	movs	r3, #103	; 0x67
    687e:	e7db      	b.n	6838 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
    6880:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
    6884:	2a01      	cmp	r2, #1
    6886:	d10a      	bne.n	689e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14e>
  data->input_zero_point = input->params.zero_point;
    6888:	f8da 3010 	ldr.w	r3, [sl, #16]
    688c:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
    688e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    6892:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
    6894:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6898:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
    689a:	2400      	movs	r4, #0
    689c:	e76d      	b.n	677a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    689e:	f8d9 2008 	ldr.w	r2, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    68a2:	6852      	ldr	r2, [r2, #4]
    68a4:	9208      	str	r2, [sp, #32]
    68a6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    68a8:	9207      	str	r2, [sp, #28]
    68aa:	6a72      	ldr	r2, [r6, #36]	; 0x24
    68ac:	9206      	str	r2, [sp, #24]
    68ae:	f106 0230 	add.w	r2, r6, #48	; 0x30
    68b2:	9205      	str	r2, [sp, #20]
    68b4:	f106 022c 	add.w	r2, r6, #44	; 0x2c
    68b8:	9204      	str	r2, [sp, #16]
    68ba:	f106 0220 	add.w	r2, r6, #32
    68be:	9203      	str	r2, [sp, #12]
    68c0:	370c      	adds	r7, #12
    68c2:	f106 021c 	add.w	r2, r6, #28
    68c6:	e9cd 0700 	strd	r0, r7, [sp]
    68ca:	9202      	str	r2, [sp, #8]
    68cc:	4651      	mov	r1, sl
    68ce:	464a      	mov	r2, r9
    68d0:	4628      	mov	r0, r5
    68d2:	f7ff f8e3 	bl	5a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    68d6:	4604      	mov	r4, r0
    68d8:	2800      	cmp	r0, #0
    68da:	d0d5      	beq.n	6888 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
    68dc:	e74d      	b.n	677a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    68de:	bf00      	nop
    68e0:	00045ec5 	.word	0x00045ec5
    68e4:	00045e55 	.word	0x00045e55
    68e8:	00045a68 	.word	0x00045a68
    68ec:	000463cb 	.word	0x000463cb
    68f0:	00045ee9 	.word	0x00045ee9
    68f4:	00045ac0 	.word	0x00045ac0
    68f8:	00045d51 	.word	0x00045d51
    68fc:	00045d62 	.word	0x00045d62
    6900:	00045d74 	.word	0x00045d74

00006904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6904:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
    6906:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6908:	d11f      	bne.n	694a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x46>
    690a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    690e:	425c      	negs	r4, r3
    6910:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
    6912:	fb80 2301 	smull	r2, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6916:	2a00      	cmp	r2, #0
    6918:	f173 0100 	sbcs.w	r1, r3, #0
    691c:	490d      	ldr	r1, [pc, #52]	; (6954 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x50>)
    691e:	bfa8      	it	ge
    6920:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    6924:	b99c      	cbnz	r4, 694e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6926:	1852      	adds	r2, r2, r1
    6928:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    692c:	2a00      	cmp	r2, #0
    692e:	f173 0100 	sbcs.w	r1, r3, #0
    6932:	da06      	bge.n	6942 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
    6934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6938:	1852      	adds	r2, r2, r1
    693a:	f04f 0100 	mov.w	r1, #0
    693e:	eb41 0303 	adc.w	r3, r1, r3
    6942:	0fd0      	lsrs	r0, r2, #31
    6944:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
    6948:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    694a:	2400      	movs	r4, #0
    694c:	e7e1      	b.n	6912 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
    694e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6952:	e7f9      	b.n	6948 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>
    6954:	c0000001 	.word	0xc0000001

00006958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
    6958:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
    695a:	b508      	push	{r3, lr}
  assert(exponent >= 0);
    695c:	da06      	bge.n	696c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
    695e:	4b0d      	ldr	r3, [pc, #52]	; (6994 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
    6960:	4a0d      	ldr	r2, [pc, #52]	; (6998 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    6962:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
    6966:	480d      	ldr	r0, [pc, #52]	; (699c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
    6968:	f009 fc4e 	bl	10208 <__assert_func>
    696c:	291f      	cmp	r1, #31
    696e:	dd04      	ble.n	697a <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
    6970:	4b0b      	ldr	r3, [pc, #44]	; (69a0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
    6972:	4a09      	ldr	r2, [pc, #36]	; (6998 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    6974:	f240 1167 	movw	r1, #359	; 0x167
    6978:	e7f5      	b.n	6966 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    697a:	2301      	movs	r3, #1
    697c:	408b      	lsls	r3, r1
    697e:	3b01      	subs	r3, #1
  return a & b;
    6980:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
    6984:	105b      	asrs	r3, r3, #1
  return a + b;
    6986:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
    698a:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
    698c:	429a      	cmp	r2, r3
    698e:	bfc8      	it	gt
    6990:	3001      	addgt	r0, #1
    6992:	bd08      	pop	{r3, pc}
    6994:	00045efd 	.word	0x00045efd
    6998:	00045c23 	.word	0x00045c23
    699c:	00045c78 	.word	0x00045c78
    69a0:	00045c14 	.word	0x00045c14

000069a4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
    69a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    69a8:	1812      	adds	r2, r2, r0
    69aa:	f04f 0300 	mov.w	r3, #0
    69ae:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
    69b2:	1c59      	adds	r1, r3, #1
    69b4:	bf06      	itte	eq
    69b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    69ba:	4611      	moveq	r1, r2
    69bc:	2101      	movne	r1, #1

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    69be:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  std::int64_t sign = sum >= 0 ? 1 : -1;
    69c2:	bf0c      	ite	eq
    69c4:	4618      	moveq	r0, r3
    69c6:	2000      	movne	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    69c8:	1854      	adds	r4, r2, r1
    69ca:	eb43 0500 	adc.w	r5, r3, r0
    69ce:	0feb      	lsrs	r3, r5, #31
    69d0:	18e4      	adds	r4, r4, r3
    69d2:	f145 0500 	adc.w	r5, r5, #0
    69d6:	ea4f 0854 	mov.w	r8, r4, lsr #1
    69da:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    69de:	493c      	ldr	r1, [pc, #240]	; (6ad0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x12c>)
    69e0:	4640      	mov	r0, r8
    69e2:	f7ff ff8f 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    69e6:	2503      	movs	r5, #3
    69e8:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    69ec:	4621      	mov	r1, r4
    69ee:	4640      	mov	r0, r8
    69f0:	f7ff ff88 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    69f4:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    69f8:	4620      	mov	r0, r4
    69fa:	f7ff ff83 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    69fe:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    6a02:	da56      	bge.n	6ab2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10e>
    6a04:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    6a08:	f04f 31ff 	mov.w	r1, #4294967295
    6a0c:	f04f 0c00 	mov.w	ip, #0
    6a10:	bfc8      	it	gt
    6a12:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    6a14:	ea4f 7be0 	mov.w	fp, r0, asr #31
    6a18:	0082      	lsls	r2, r0, #2
    6a1a:	ea4f 038b 	mov.w	r3, fp, lsl #2
    6a1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
    6a22:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6a26:	f173 30ff 	sbcs.w	r0, r3, #4294967295
    6a2a:	db46      	blt.n	6aba <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x116>
             : wide_shifted > max ? max
    6a2c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    6a30:	4592      	cmp	sl, r2
    6a32:	f04f 0b00 	mov.w	fp, #0
    6a36:	eb7b 0003 	sbcs.w	r0, fp, r3
    6a3a:	bfb8      	it	lt
    6a3c:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
    6a40:	ea6f 030c 	mvn.w	r3, ip
  return a & b;
    6a44:	401a      	ands	r2, r3
    6a46:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
  return ~a;
    6a4a:	43cb      	mvns	r3, r1
  return a ^ b;
    6a4c:	ea82 020c 	eor.w	r2, r2, ip
  return a & b;
    6a50:	401a      	ands	r2, r3
    6a52:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
    6a56:	404a      	eors	r2, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
    6a58:	3d01      	subs	r5, #1
  return a + b;
    6a5a:	4414      	add	r4, r2
  for (int i = 0; i < 3; i++) {
    6a5c:	d1c6      	bne.n	69ec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x48>
  return a ? BitNot(zero) : zero;
    6a5e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    6a62:	da2d      	bge.n	6ac0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x11c>
    6a64:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    6a68:	f04f 30ff 	mov.w	r0, #4294967295
    6a6c:	462a      	mov	r2, r5
    6a6e:	bfc8      	it	gt
    6a70:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    6a72:	1926      	adds	r6, r4, r4
    6a74:	ea4f 75e4 	mov.w	r5, r4, asr #31
    6a78:	eb45 0705 	adc.w	r7, r5, r5
             ? min
    6a7c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    6a80:	f177 33ff 	sbcs.w	r3, r7, #4294967295
    6a84:	db20      	blt.n	6ac8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x124>
             : wide_shifted > max ? max
    6a86:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    6a8a:	2500      	movs	r5, #0
    6a8c:	42b4      	cmp	r4, r6
    6a8e:	eb75 0307 	sbcs.w	r3, r5, r7
    6a92:	bfac      	ite	ge
    6a94:	4633      	movge	r3, r6
    6a96:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
  return ~a;
    6a9a:	43d6      	mvns	r6, r2
  return a & b;
    6a9c:	401e      	ands	r6, r3
    6a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  return ~a;
    6aa2:	43c3      	mvns	r3, r0
  return a ^ b;
    6aa4:	4056      	eors	r6, r2
  return a & b;
    6aa6:	401e      	ands	r6, r3
    6aa8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    6aac:	4070      	eors	r0, r6
    6aae:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  return a ? BitNot(zero) : zero;
    6ab2:	f04f 3cff 	mov.w	ip, #4294967295
    6ab6:	2100      	movs	r1, #0
    6ab8:	e7ac      	b.n	6a14 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x70>
             ? min
    6aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6abe:	e7bf      	b.n	6a40 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9c>
  return a ? BitNot(zero) : zero;
    6ac0:	f04f 32ff 	mov.w	r2, #4294967295
    6ac4:	4628      	mov	r0, r5
    6ac6:	e7d4      	b.n	6a72 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xce>
             ? min
    6ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    6acc:	e7e5      	b.n	6a9a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf6>
    6ace:	bf00      	nop
    6ad0:	c3c3c3c4 	.word	0xc3c3c3c4

00006ad4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
  if (activation == kTfLiteActRelu) {
    6ad4:	2801      	cmp	r0, #1
    6ad6:	d103      	bne.n	6ae0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0xc>
    *activation_min = 0;
    6ad8:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    6ada:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    6adc:	4b09      	ldr	r3, [pc, #36]	; (6b04 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x30>)
    6ade:	e004      	b.n	6aea <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
  } else if (activation == kTfLiteActRelu6) {
    6ae0:	2803      	cmp	r0, #3
    6ae2:	d104      	bne.n	6aee <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x1a>
    *activation_min = 0;
    6ae4:	2300      	movs	r3, #0
    6ae6:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    6ae8:	4b07      	ldr	r3, [pc, #28]	; (6b08 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x34>)
    *activation_max = std::numeric_limits<T>::max();
    6aea:	6013      	str	r3, [r2, #0]
  }
}
    6aec:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
    6aee:	2802      	cmp	r0, #2
    6af0:	d104      	bne.n	6afc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x28>
    *activation_min = -1;
    6af2:	4b06      	ldr	r3, [pc, #24]	; (6b0c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    6af4:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    6af6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    6afa:	e7f6      	b.n	6aea <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
    6afc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    6b00:	e7eb      	b.n	6ada <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x6>
    6b02:	bf00      	nop
    6b04:	7f7fffff 	.word	0x7f7fffff
    6b08:	40c00000 	.word	0x40c00000
    6b0c:	bf800000 	.word	0xbf800000

00006b10 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
    6b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b14:	b0b7      	sub	sp, #220	; 0xdc
    6b16:	e9dd 9540 	ldrd	r9, r5, [sp, #256]	; 0x100
    6b1a:	4606      	mov	r6, r0
    6b1c:	460c      	mov	r4, r1
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    6b1e:	a824      	add	r0, sp, #144	; 0x90
    6b20:	4629      	mov	r1, r5
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
    6b22:	461f      	mov	r7, r3
    6b24:	4690      	mov	r8, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    6b26:	f00b fa62 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    6b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    6b2c:	2b02      	cmp	r3, #2
    6b2e:	d001      	beq.n	6b34 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x24>
    6b30:	f00f fa8a 	bl	16048 <abort>
  const int batches = output_shape.Dims(0);
    6b34:	2100      	movs	r1, #0
    6b36:	a824      	add	r0, sp, #144	; 0x90
    6b38:	f00b f90f 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
    6b3c:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
    6b3e:	4683      	mov	fp, r0
  const int output_depth = output_shape.Dims(1);
    6b40:	a824      	add	r0, sp, #144	; 0x90
    6b42:	f00b f90a 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6b46:	4639      	mov	r1, r7
  const int output_depth = output_shape.Dims(1);
    6b48:	4682      	mov	sl, r0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6b4a:	a82a      	add	r0, sp, #168	; 0xa8
    6b4c:	f00b fa4f 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    6b50:	992a      	ldr	r1, [sp, #168]	; 0xa8
    6b52:	a82a      	add	r0, sp, #168	; 0xa8
    6b54:	3901      	subs	r1, #1
    6b56:	f00b f900 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    6b5a:	4641      	mov	r1, r8
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    6b5c:	9009      	str	r0, [sp, #36]	; 0x24
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    6b5e:	a830      	add	r0, sp, #192	; 0xc0
    6b60:	f00b fa45 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
    6b64:	6962      	ldr	r2, [r4, #20]

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
  input_dims.h = 1;
  input_dims.w = 1;
  input_dims.c = accum_depth;
    6b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  input_dims.n = batches;
    6b68:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
    6b6c:	4252      	negs	r2, r2
    6b6e:	921f      	str	r2, [sp, #124]	; 0x7c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
    6b70:	69e2      	ldr	r2, [r4, #28]
    6b72:	9221      	str	r2, [sp, #132]	; 0x84
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
    6b74:	69a2      	ldr	r2, [r4, #24]

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
  output_dims.h = 1;
  output_dims.w = 1;
  output_dims.c = output_depth;
    6b76:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
    6b7a:	4252      	negs	r2, r2
    6b7c:	9220      	str	r2, [sp, #128]	; 0x80
  fc_params.activation.min = data.reference_op_data.output_activation_min;
    6b7e:	68a2      	ldr	r2, [r4, #8]
    6b80:	9222      	str	r2, [sp, #136]	; 0x88
  fc_params.activation.max = data.reference_op_data.output_activation_max;
    6b82:	68e2      	ldr	r2, [r4, #12]
    6b84:	9223      	str	r2, [sp, #140]	; 0x8c
  quant_params.multiplier = data.reference_op_data.output_multiplier;
    6b86:	6822      	ldr	r2, [r4, #0]
    6b88:	920b      	str	r2, [sp, #44]	; 0x2c
  input_dims.h = 1;
    6b8a:	2101      	movs	r1, #1
  filter_dims.n = accum_depth;
    6b8c:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  quant_params.shift = data.reference_op_data.output_shift;
    6b90:	6862      	ldr	r2, [r4, #4]
    6b92:	920c      	str	r2, [sp, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
    6b94:	2300      	movs	r3, #0
  input_dims.w = 1;
    6b96:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
  filter_dims.w = 1;
    6b9a:	e9cd 1114 	strd	r1, r1, [sp, #80]	; 0x50
  bias_dims.n = 1;
    6b9e:	e9cd a116 	strd	sl, r1, [sp, #88]	; 0x58
  bias_dims.w = 1;
    6ba2:	e9cd 1118 	strd	r1, r1, [sp, #96]	; 0x60
  output_dims.w = 1;
    6ba6:	e9cd 111c 	strd	r1, r1, [sp, #112]	; 0x70
  output_dims.n = batches;
    6baa:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
  ctx.size = 0;
    6bae:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34

  if (data.buffer_idx > -1) {
    6bb2:	6a21      	ldr	r1, [r4, #32]
    6bb4:	4299      	cmp	r1, r3
    6bb6:	db03      	blt.n	6bc0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0xb0>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    6bb8:	6c73      	ldr	r3, [r6, #68]	; 0x44
    6bba:	4630      	mov	r0, r6
    6bbc:	4798      	blx	r3
    6bbe:	900d      	str	r0, [sp, #52]	; 0x34
  TFLITE_DCHECK(tensor != nullptr);
    6bc0:	f1b8 0f00 	cmp.w	r8, #0
    6bc4:	d0b4      	beq.n	6b30 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    6bc6:	f8d8 2000 	ldr.w	r2, [r8]
  TFLITE_DCHECK(tensor != nullptr);
    6bca:	2f00      	cmp	r7, #0
    6bcc:	d0b0      	beq.n	6b30 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    6bce:	6839      	ldr	r1, [r7, #0]
  TFLITE_DCHECK(tensor != nullptr);
    6bd0:	f1b9 0f00 	cmp.w	r9, #0
    6bd4:	d0ac      	beq.n	6b30 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    6bd6:	f8d9 0000 	ldr.w	r0, [r9]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6bda:	2d00      	cmp	r5, #0
    6bdc:	d044      	beq.n	6c68 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x158>
    6bde:	682b      	ldr	r3, [r5, #0]
  }

  TF_LITE_ENSURE_EQ(
    6be0:	9306      	str	r3, [sp, #24]
    6be2:	ab1b      	add	r3, sp, #108	; 0x6c
    6be4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    6be8:	ab17      	add	r3, sp, #92	; 0x5c
    6bea:	e9cd 1302 	strd	r1, r3, [sp, #8]
    6bee:	ab13      	add	r3, sp, #76	; 0x4c
    6bf0:	e9cd 2300 	strd	r2, r3, [sp]
    6bf4:	a91f      	add	r1, sp, #124	; 0x7c
    6bf6:	ab0f      	add	r3, sp, #60	; 0x3c
    6bf8:	aa0b      	add	r2, sp, #44	; 0x2c
    6bfa:	a80d      	add	r0, sp, #52	; 0x34
    6bfc:	f00d f8bb 	bl	13d76 <arm_fully_connected_s8>
    6c00:	4604      	mov	r4, r0
    6c02:	b320      	cbz	r0, 6c4e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x13e>
    6c04:	6974      	ldr	r4, [r6, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
    6c06:	f8d8 3000 	ldr.w	r3, [r8]
    6c0a:	683a      	ldr	r2, [r7, #0]
    6c0c:	f8d9 1000 	ldr.w	r1, [r9]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    6c10:	b105      	cbz	r5, 6c14 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x104>
    6c12:	682d      	ldr	r5, [r5, #0]
    6c14:	9506      	str	r5, [sp, #24]
    6c16:	a81b      	add	r0, sp, #108	; 0x6c
    6c18:	e9cd 1004 	strd	r1, r0, [sp, #16]
    6c1c:	a917      	add	r1, sp, #92	; 0x5c
    6c1e:	e9cd 2102 	strd	r2, r1, [sp, #8]
    6c22:	aa13      	add	r2, sp, #76	; 0x4c
    6c24:	e9cd 3200 	strd	r3, r2, [sp]
    6c28:	a91f      	add	r1, sp, #124	; 0x7c
    6c2a:	ab0f      	add	r3, sp, #60	; 0x3c
    6c2c:	aa0b      	add	r2, sp, #44	; 0x2c
    6c2e:	a80d      	add	r0, sp, #52	; 0x34
    6c30:	f00d f8a1 	bl	13d76 <arm_fully_connected_s8>
    6c34:	2300      	movs	r3, #0
    6c36:	e9cd 0302 	strd	r0, r3, [sp, #8]
    6c3a:	4b0c      	ldr	r3, [pc, #48]	; (6c6c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x15c>)
    6c3c:	9301      	str	r3, [sp, #4]
    6c3e:	4b0c      	ldr	r3, [pc, #48]	; (6c70 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x160>)
    6c40:	9300      	str	r3, [sp, #0]
    6c42:	4a0c      	ldr	r2, [pc, #48]	; (6c74 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x164>)
    6c44:	490c      	ldr	r1, [pc, #48]	; (6c78 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0x168>)
    6c46:	23a6      	movs	r3, #166	; 0xa6
    6c48:	4630      	mov	r0, r6
    6c4a:	47a0      	blx	r4
    6c4c:	2401      	movs	r4, #1
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    6c4e:	a830      	add	r0, sp, #192	; 0xc0
    6c50:	f00b f878 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6c54:	a82a      	add	r0, sp, #168	; 0xa8
    6c56:	f00b f875 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    6c5a:	a824      	add	r0, sp, #144	; 0x90
    6c5c:	f00b f872 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
}
    6c60:	4620      	mov	r0, r4
    6c62:	b037      	add	sp, #220	; 0xdc
    6c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c68:	462b      	mov	r3, r5
    6c6a:	e7b9      	b.n	6be0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0+0xd0>
    6c6c:	00045f7f 	.word	0x00045f7f
    6c70:	00045f90 	.word	0x00045f90
    6c74:	00045f0b 	.word	0x00045f0b
    6c78:	00045ac0 	.word	0x00045ac0

00006c7c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
    6c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c80:	b08d      	sub	sp, #52	; 0x34
    6c82:	461e      	mov	r6, r3
  const int32_t input_offset = params.input_offset;
    6c84:	6803      	ldr	r3, [r0, #0]
    6c86:	9306      	str	r3, [sp, #24]
  const int32_t filter_offset = params.weights_offset;
    6c88:	6843      	ldr	r3, [r0, #4]
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    6c8a:	6837      	ldr	r7, [r6, #0]
  const int32_t filter_offset = params.weights_offset;
    6c8c:	9307      	str	r3, [sp, #28]
  const int32_t output_offset = params.output_offset;
    6c8e:	6883      	ldr	r3, [r0, #8]
    6c90:	9308      	str	r3, [sp, #32]
  const int32_t output_activation_min = params.quantized_activation_min;
    6c92:	6943      	ldr	r3, [r0, #20]
    6c94:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    6c96:	2f01      	cmp	r7, #1
  const int32_t output_activation_max = params.quantized_activation_max;
    6c98:	6983      	ldr	r3, [r0, #24]
    uint8_t* output_data) {
    6c9a:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
  const int32_t output_activation_max = params.quantized_activation_max;
    6c9e:	9302      	str	r3, [sp, #8]
  const int output_shift = params.output_shift;
    6ca0:	e9d0 a403 	ldrd	sl, r4, [r0, #12]
    uint8_t* output_data) {
    6ca4:	4615      	mov	r5, r2
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    6ca6:	dc01      	bgt.n	6cac <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x30>
    6ca8:	f00f f9ce 	bl	16048 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    6cac:	f8d8 3000 	ldr.w	r3, [r8]
    6cb0:	2b00      	cmp	r3, #0
    6cb2:	ddf9      	ble.n	6ca8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x2c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    6cb4:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    6cb8:	428a      	cmp	r2, r1
    6cba:	dcf5      	bgt.n	6ca8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x2c>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    6cbc:	3b01      	subs	r3, #1
    6cbe:	4619      	mov	r1, r3
    6cc0:	4640      	mov	r0, r8
    6cc2:	9300      	str	r3, [sp, #0]
    6cc4:	f00b f931 	bl	11f2a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    6cc8:	9b00      	ldr	r3, [sp, #0]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    6cca:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    6ccc:	4642      	mov	r2, r8
    6cce:	1eb9      	subs	r1, r7, #2
    6cd0:	4630      	mov	r0, r6
    6cd2:	f00b f8c3 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    6cd6:	1e79      	subs	r1, r7, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    6cd8:	9004      	str	r0, [sp, #16]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    6cda:	4630      	mov	r0, r6
    6cdc:	f00b f83d 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int b = 0; b < batches; ++b) {
    6ce0:	2c00      	cmp	r4, #0
    6ce2:	f1c4 0300 	rsb	r3, r4, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    6ce6:	f04f 0201 	mov.w	r2, #1
    6cea:	bfc8      	it	gt
    6cec:	2300      	movgt	r3, #0
    6cee:	409a      	lsls	r2, r3
    6cf0:	3a01      	subs	r2, #1
    6cf2:	9205      	str	r2, [sp, #20]
  return a >> offset;
    6cf4:	2100      	movs	r1, #0
    6cf6:	1052      	asrs	r2, r2, #1
  int left_shift = shift > 0 ? shift : 0;
    6cf8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    6cfc:	920a      	str	r2, [sp, #40]	; 0x28
    6cfe:	9500      	str	r5, [sp, #0]
    6d00:	468c      	mov	ip, r1
    6d02:	940b      	str	r4, [sp, #44]	; 0x2c
    6d04:	9c09      	ldr	r4, [sp, #36]	; 0x24
    6d06:	45a4      	cmp	ip, r4
    6d08:	da7e      	bge.n	6e08 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x18c>
    6d0a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    6d0c:	2700      	movs	r7, #0
    6d0e:	eb04 0e01 	add.w	lr, r4, r1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    6d12:	463e      	mov	r6, r7
    6d14:	9c04      	ldr	r4, [sp, #16]
    6d16:	42a6      	cmp	r6, r4
    6d18:	da6e      	bge.n	6df8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x17c>
      int32_t acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
    6d1a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    6d1c:	f8dd b000 	ldr.w	fp, [sp]
    6d20:	443c      	add	r4, r7
    6d22:	9403      	str	r4, [sp, #12]
      int32_t acc = 0;
    6d24:	2400      	movs	r4, #0
      for (int d = 0; d < accum_depth; ++d) {
    6d26:	4625      	mov	r5, r4
    6d28:	4285      	cmp	r5, r0
    6d2a:	da0d      	bge.n	6d48 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xcc>
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    6d2c:	9a03      	ldr	r2, [sp, #12]
        int32_t input_val = input_data[b * accum_depth + d];
    6d2e:	f81b 9b01 	ldrb.w	r9, [fp], #1
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    6d32:	f812 8b01 	ldrb.w	r8, [r2], #1
    6d36:	9203      	str	r2, [sp, #12]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    6d38:	9a07      	ldr	r2, [sp, #28]
    6d3a:	4490      	add	r8, r2
    6d3c:	9a06      	ldr	r2, [sp, #24]
    6d3e:	4491      	add	r9, r2
    6d40:	fb09 4408 	mla	r4, r9, r8, r4
      for (int d = 0; d < accum_depth; ++d) {
    6d44:	3501      	adds	r5, #1
    6d46:	e7ef      	b.n	6d28 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xac>
      }
      if (bias_data) {
    6d48:	9a18      	ldr	r2, [sp, #96]	; 0x60
    6d4a:	b112      	cbz	r2, 6d52 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xd6>
        acc += bias_data[out_c];
    6d4c:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
    6d50:	442c      	add	r4, r5
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    6d52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6d54:	4094      	lsls	r4, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6d56:	45a2      	cmp	sl, r4
    6d58:	d130      	bne.n	6dbc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x140>
    6d5a:	f10a 4200 	add.w	r2, sl, #2147483648	; 0x80000000
    6d5e:	f1d2 0900 	rsbs	r9, r2, #0
    6d62:	eb49 0902 	adc.w	r9, r9, r2
  std::int64_t ab_64 = a_64 * b_64;
    6d66:	fb84 450a 	smull	r4, r5, r4, sl
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6d6a:	2c00      	cmp	r4, #0
    6d6c:	f175 0200 	sbcs.w	r2, r5, #0
    6d70:	4a27      	ldr	r2, [pc, #156]	; (6e10 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x194>)
    6d72:	bfac      	ite	ge
    6d74:	f04f 4880 	movge.w	r8, #1073741824	; 0x40000000
    6d78:	4690      	movlt	r8, r2
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    6d7a:	f1b9 0f00 	cmp.w	r9, #0
    6d7e:	d120      	bne.n	6dc2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x146>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6d80:	eb14 0408 	adds.w	r4, r4, r8
    6d84:	eb45 75e8 	adc.w	r5, r5, r8, asr #31
    6d88:	2c00      	cmp	r4, #0
    6d8a:	f175 0200 	sbcs.w	r2, r5, #0
    6d8e:	46a0      	mov	r8, r4
    6d90:	46a9      	mov	r9, r5
    6d92:	da05      	bge.n	6da0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x124>
    6d94:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6d98:	eb14 0802 	adds.w	r8, r4, r2
    6d9c:	f145 0900 	adc.w	r9, r5, #0
    6da0:	ea4f 74d8 	mov.w	r4, r8, lsr #31
    6da4:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
  assert(exponent <= 31);
    6da8:	2b1f      	cmp	r3, #31
    6daa:	4407      	add	r7, r0
    6dac:	dd0c      	ble.n	6dc8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x14c>
    6dae:	4b19      	ldr	r3, [pc, #100]	; (6e14 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x198>)
    6db0:	4a19      	ldr	r2, [pc, #100]	; (6e18 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x19c>)
    6db2:	481a      	ldr	r0, [pc, #104]	; (6e1c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x1a0>)
    6db4:	f240 1167 	movw	r1, #359	; 0x167
    6db8:	f009 fa26 	bl	10208 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6dbc:	f04f 0900 	mov.w	r9, #0
    6dc0:	e7d1      	b.n	6d66 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xea>
    6dc2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    6dc6:	e7ef      	b.n	6da8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x12c>
  return a & b;
    6dc8:	9a05      	ldr	r2, [sp, #20]
    6dca:	ea02 0804 	and.w	r8, r2, r4
  return a + b;
    6dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6dd0:	eb02 75d4 	add.w	r5, r2, r4, lsr #31
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
    6dd4:	9a08      	ldr	r2, [sp, #32]
  return a >> offset;
    6dd6:	411c      	asrs	r4, r3
  return a + b;
    6dd8:	45a8      	cmp	r8, r5
    6dda:	bfc8      	it	gt
    6ddc:	3401      	addgt	r4, #1
    6dde:	4414      	add	r4, r2
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
    6de0:	9a01      	ldr	r2, [sp, #4]
    6de2:	4294      	cmp	r4, r2
    6de4:	bfb8      	it	lt
    6de6:	4614      	movlt	r4, r2
    6de8:	9a02      	ldr	r2, [sp, #8]
    6dea:	4294      	cmp	r4, r2
    6dec:	bfa8      	it	ge
    6dee:	4614      	movge	r4, r2
    6df0:	f80e 4b01 	strb.w	r4, [lr], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    6df4:	3601      	adds	r6, #1
    6df6:	e78d      	b.n	6d14 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x98>
  for (int b = 0; b < batches; ++b) {
    6df8:	9a04      	ldr	r2, [sp, #16]
    6dfa:	4411      	add	r1, r2
    6dfc:	9a00      	ldr	r2, [sp, #0]
    6dfe:	4402      	add	r2, r0
    6e00:	f10c 0c01 	add.w	ip, ip, #1
    6e04:	9200      	str	r2, [sp, #0]
    6e06:	e77d      	b.n	6d04 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x88>
    }
  }
}
    6e08:	b00d      	add	sp, #52	; 0x34
    6e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e0e:	bf00      	nop
    6e10:	c0000001 	.word	0xc0000001
    6e14:	00045c14 	.word	0x00045c14
    6e18:	00045c23 	.word	0x00045c23
    6e1c:	00045c78 	.word	0x00045c78

00006e20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    6e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    6e24:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    6e28:	b095      	sub	sp, #84	; 0x54
    6e2a:	4604      	mov	r4, r0
    6e2c:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    6e2e:	f1b9 0f00 	cmp.w	r9, #0
    6e32:	d101      	bne.n	6e38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
    6e34:	f00f f908 	bl	16048 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    6e38:	f8d1 b014 	ldr.w	fp, [r1, #20]
    6e3c:	f1bb 0f00 	cmp.w	fp, #0
    6e40:	d0f8      	beq.n	6e34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
      GetInput(context, node, kFullyConnectedInputTensor);
    6e42:	4b50      	ldr	r3, [pc, #320]	; (6f84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    6e44:	681a      	ldr	r2, [r3, #0]
    6e46:	f00a ff59 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    6e4a:	4680      	mov	r8, r0
    6e4c:	b960      	cbnz	r0, 6e68 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x48>
    6e4e:	4b4e      	ldr	r3, [pc, #312]	; (6f88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    6e50:	9300      	str	r3, [sp, #0]
    6e52:	6965      	ldr	r5, [r4, #20]
    6e54:	2340      	movs	r3, #64	; 0x40
  TF_LITE_ENSURE(context, filter != nullptr);
    6e56:	4a4d      	ldr	r2, [pc, #308]	; (6f8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    6e58:	494d      	ldr	r1, [pc, #308]	; (6f90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    6e5a:	4620      	mov	r0, r4
    6e5c:	47a8      	blx	r5
    6e5e:	2501      	movs	r5, #1
}
    6e60:	4628      	mov	r0, r5
    6e62:	b015      	add	sp, #84	; 0x54
    6e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kFullyConnectedWeightsTensor);
    6e68:	4b4a      	ldr	r3, [pc, #296]	; (6f94 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    6e6a:	4629      	mov	r1, r5
    6e6c:	681a      	ldr	r2, [r3, #0]
    6e6e:	4620      	mov	r0, r4
    6e70:	f00a ff44 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    6e74:	4607      	mov	r7, r0
    6e76:	b920      	cbnz	r0, 6e82 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    6e78:	4b47      	ldr	r3, [pc, #284]	; (6f98 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    6e7a:	9300      	str	r3, [sp, #0]
    6e7c:	6965      	ldr	r5, [r4, #20]
    6e7e:	2343      	movs	r3, #67	; 0x43
    6e80:	e7e9      	b.n	6e56 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    6e82:	4b46      	ldr	r3, [pc, #280]	; (6f9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    6e84:	4629      	mov	r1, r5
    6e86:	681a      	ldr	r2, [r3, #0]
    6e88:	4620      	mov	r0, r4
    6e8a:	f00a ff59 	bl	11d40 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    6e8e:	4b44      	ldr	r3, [pc, #272]	; (6fa0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    6e90:	4682      	mov	sl, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    6e92:	681a      	ldr	r2, [r3, #0]
    6e94:	4629      	mov	r1, r5
    6e96:	4620      	mov	r0, r4
    6e98:	f00a ff41 	bl	11d1e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    6e9c:	4606      	mov	r6, r0
    6e9e:	b920      	cbnz	r0, 6eaa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    6ea0:	4b40      	ldr	r3, [pc, #256]	; (6fa4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    6ea2:	9300      	str	r3, [sp, #0]
    6ea4:	6965      	ldr	r5, [r4, #20]
    6ea6:	2347      	movs	r3, #71	; 0x47
    6ea8:	e7d5      	b.n	6e56 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    6eaa:	f898 0000 	ldrb.w	r0, [r8]
    6eae:	7833      	ldrb	r3, [r6, #0]
    6eb0:	4283      	cmp	r3, r0
    6eb2:	d012      	beq.n	6eda <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
    6eb4:	6967      	ldr	r7, [r4, #20]
    6eb6:	f002 fadd 	bl	9474 <TfLiteTypeGetName>
    6eba:	4605      	mov	r5, r0
    6ebc:	7830      	ldrb	r0, [r6, #0]
    6ebe:	f002 fad9 	bl	9474 <TfLiteTypeGetName>
    6ec2:	4b39      	ldr	r3, [pc, #228]	; (6fa8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    6ec4:	9301      	str	r3, [sp, #4]
    6ec6:	4b39      	ldr	r3, [pc, #228]	; (6fac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    6ec8:	9300      	str	r3, [sp, #0]
    6eca:	e9cd 5002 	strd	r5, r0, [sp, #8]
    6ece:	4a2f      	ldr	r2, [pc, #188]	; (6f8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    6ed0:	4937      	ldr	r1, [pc, #220]	; (6fb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    6ed2:	2349      	movs	r3, #73	; 0x49
    6ed4:	4620      	mov	r0, r4
    6ed6:	47b8      	blx	r7
    6ed8:	e7c1      	b.n	6e5e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    6eda:	783a      	ldrb	r2, [r7, #0]
    6edc:	429a      	cmp	r2, r3
    6ede:	d004      	beq.n	6eea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xca>
    6ee0:	6963      	ldr	r3, [r4, #20]
    6ee2:	4934      	ldr	r1, [pc, #208]	; (6fb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    6ee4:	4620      	mov	r0, r4
    6ee6:	4798      	blx	r3
    6ee8:	e7b9      	b.n	6e5e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  data->buffer_idx = -1;
    6eea:	f04f 33ff 	mov.w	r3, #4294967295
    6eee:	f8c9 3020 	str.w	r3, [r9, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
    6ef2:	f89b 1000 	ldrb.w	r1, [fp]
    6ef6:	4643      	mov	r3, r8
    6ef8:	e9cd 6902 	strd	r6, r9, [sp, #8]
    6efc:	e9cd 7a00 	strd	r7, sl, [sp]
    6f00:	4620      	mov	r0, r4
    6f02:	f00b f83e 	bl	11f82 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
    6f06:	4605      	mov	r5, r0
    6f08:	2800      	cmp	r0, #0
    6f0a:	d1a9      	bne.n	6e60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  if (input->type == kTfLiteInt8) {
    6f0c:	f898 3000 	ldrb.w	r3, [r8]
    6f10:	2b09      	cmp	r3, #9
    6f12:	d1a5      	bne.n	6e60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape filter_shape = GetTensorShape(filter);
    6f14:	4639      	mov	r1, r7
    6f16:	a808      	add	r0, sp, #32
    6f18:	f00a ff30 	bl	11d7c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
    6f1c:	4631      	mov	r1, r6
    6f1e:	a80e      	add	r0, sp, #56	; 0x38
    6f20:	f00a ff2c 	bl	11d7c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    6f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6f26:	2b02      	cmp	r3, #2
    6f28:	d184      	bne.n	6e34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
    6f2a:	9908      	ldr	r1, [sp, #32]
    6f2c:	a808      	add	r0, sp, #32
    6f2e:	3901      	subs	r1, #1
    6f30:	f00a ff13 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = 1;
    6f34:	2101      	movs	r1, #1
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
    6f36:	9004      	str	r0, [sp, #16]
    filter_dims.c = output_shape.Dims(1);
    6f38:	a80e      	add	r0, sp, #56	; 0x38
    filter_dims.w = 1;
    6f3a:	e9cd 1105 	strd	r1, r1, [sp, #20]
    filter_dims.c = output_shape.Dims(1);
    6f3e:	f00a ff0c 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    6f42:	9007      	str	r0, [sp, #28]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
    6f44:	a804      	add	r0, sp, #16
    6f46:	f00c ff47 	bl	13dd8 <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
    6f4a:	1e01      	subs	r1, r0, #0
    6f4c:	dd0e      	ble.n	6f6c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
    6f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6f50:	4620      	mov	r0, r4
    6f52:	f109 0220 	add.w	r2, r9, #32
    6f56:	4798      	blx	r3
    6f58:	4604      	mov	r4, r0
    6f5a:	b158      	cbz	r0, 6f74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
    RuntimeShape output_shape = GetTensorShape(output);
    6f5c:	a80e      	add	r0, sp, #56	; 0x38
    6f5e:	f00a fef1 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = GetTensorShape(filter);
    6f62:	a808      	add	r0, sp, #32
    6f64:	f00a feee 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    6f68:	4625      	mov	r5, r4
    6f6a:	e779      	b.n	6e60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
      data->buffer_idx = -1;
    6f6c:	f04f 33ff 	mov.w	r3, #4294967295
    6f70:	f8c9 3020 	str.w	r3, [r9, #32]
    RuntimeShape output_shape = GetTensorShape(output);
    6f74:	a80e      	add	r0, sp, #56	; 0x38
    6f76:	f00a fee5 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = GetTensorShape(filter);
    6f7a:	a808      	add	r0, sp, #32
    6f7c:	f00a fee2 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    6f80:	e76e      	b.n	6e60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    6f82:	bf00      	nop
    6f84:	00017bc8 	.word	0x00017bc8
    6f88:	00045d51 	.word	0x00045d51
    6f8c:	00045f0b 	.word	0x00045f0b
    6f90:	00045a68 	.word	0x00045a68
    6f94:	00017bd0 	.word	0x00017bd0
    6f98:	00045d62 	.word	0x00045d62
    6f9c:	00017bc4 	.word	0x00017bc4
    6fa0:	00017bcc 	.word	0x00017bcc
    6fa4:	00045d74 	.word	0x00045d74
    6fa8:	00045d86 	.word	0x00045d86
    6fac:	00045d93 	.word	0x00045d93
    6fb0:	000460b4 	.word	0x000460b4
    6fb4:	000460ce 	.word	0x000460ce

00006fb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    6fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fbc:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    6fc0:	f8d1 a014 	ldr.w	sl, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    6fc4:	b0c3      	sub	sp, #268	; 0x10c
    6fc6:	4680      	mov	r8, r0
    6fc8:	4689      	mov	r9, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    6fca:	f1ba 0f00 	cmp.w	sl, #0
    6fce:	d101      	bne.n	6fd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
    6fd0:	f00f f83a 	bl	16048 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    6fd4:	4b82      	ldr	r3, [pc, #520]	; (71e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
  return GetMutableEvalInput(context, node, index);
    6fd6:	681a      	ldr	r2, [r3, #0]
    6fd8:	f00a fef2 	bl	11dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    6fdc:	4b81      	ldr	r3, [pc, #516]	; (71e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
    6fde:	4649      	mov	r1, r9
    6fe0:	681a      	ldr	r2, [r3, #0]
    6fe2:	4605      	mov	r5, r0
    6fe4:	4640      	mov	r0, r8
    6fe6:	f00a feeb 	bl	11dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    6fea:	4b7f      	ldr	r3, [pc, #508]	; (71e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
    6fec:	4649      	mov	r1, r9
    6fee:	681a      	ldr	r2, [r3, #0]
    6ff0:	4607      	mov	r7, r0
    6ff2:	4640      	mov	r0, r8
    6ff4:	f00a fee4 	bl	11dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    6ff8:	4b7c      	ldr	r3, [pc, #496]	; (71ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
    6ffa:	4649      	mov	r1, r9
    6ffc:	681a      	ldr	r2, [r3, #0]
    6ffe:	4606      	mov	r6, r0
    7000:	4640      	mov	r0, r8
    7002:	f00a feeb 	bl	11ddc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
    7006:	f8d9 1010 	ldr.w	r1, [r9, #16]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    700a:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    700c:	2900      	cmp	r1, #0
    700e:	d0df      	beq.n	6fd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    7010:	7a28      	ldrb	r0, [r5, #8]
    7012:	2803      	cmp	r0, #3
    7014:	f000 80a0 	beq.w	7158 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
    7018:	2809      	cmp	r0, #9
    701a:	f000 8091 	beq.w	7140 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
    701e:	2801      	cmp	r0, #1
    7020:	f040 80d2 	bne.w	71c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x210>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
    7024:	f89a 1000 	ldrb.w	r1, [sl]
    7028:	a82e      	add	r0, sp, #184	; 0xb8
    702a:	f000 f905 	bl	7238 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    702e:	4629      	mov	r1, r5
    7030:	a80a      	add	r0, sp, #40	; 0x28
    7032:	f00a ffdc 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    7036:	682b      	ldr	r3, [r5, #0]
    7038:	9308      	str	r3, [sp, #32]
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
    703a:	4639      	mov	r1, r7
    703c:	a810      	add	r0, sp, #64	; 0x40
    703e:	f00a ffd6 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    7042:	2f00      	cmp	r7, #0
    7044:	d0c4      	beq.n	6fd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
    7046:	683b      	ldr	r3, [r7, #0]
    7048:	9307      	str	r3, [sp, #28]
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
    704a:	4631      	mov	r1, r6
    704c:	a816      	add	r0, sp, #88	; 0x58
    704e:	f00a ffce 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    7052:	2e00      	cmp	r6, #0
    7054:	d0bc      	beq.n	6fd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
    7056:	4621      	mov	r1, r4
    7058:	a838      	add	r0, sp, #224	; 0xe0
  return reinterpret_cast<const T*>(tensor->data.raw);
    705a:	6837      	ldr	r7, [r6, #0]
    705c:	f00a ffc7 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7060:	b104      	cbz	r4, 7064 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>
    7062:	6824      	ldr	r4, [r4, #0]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    7064:	9b38      	ldr	r3, [sp, #224]	; 0xe0
  const int weights_dims_count = weights_shape.DimensionsCount();
    7066:	9e10      	ldr	r6, [sp, #64]	; 0x40
  const float output_activation_min = params.float_activation_min;
    7068:	ed9d 8a35 	vldr	s16, [sp, #212]	; 0xd4
  const float output_activation_max = params.float_activation_max;
    706c:	eddd 8a36 	vldr	s17, [sp, #216]	; 0xd8
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    7070:	3b01      	subs	r3, #1
    7072:	4619      	mov	r1, r3
    7074:	a838      	add	r0, sp, #224	; 0xe0
    7076:	9306      	str	r3, [sp, #24]
    7078:	f00a ff57 	bl	11f2a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    707c:	9b06      	ldr	r3, [sp, #24]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    707e:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    7080:	1eb1      	subs	r1, r6, #2
    7082:	aa38      	add	r2, sp, #224	; 0xe0
    7084:	a810      	add	r0, sp, #64	; 0x40
    7086:	f00a fee9 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    708a:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    708c:	9006      	str	r0, [sp, #24]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    708e:	a810      	add	r0, sp, #64	; 0x40
    7090:	f00a fe63 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    7094:	2300      	movs	r3, #0
      float bias_value = 0.0f;
    7096:	eddf 6a56 	vldr	s13, [pc, #344]	; 71f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    709a:	461e      	mov	r6, r3
  for (int b = 0; b < batches; ++b) {
    709c:	469c      	mov	ip, r3
    709e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    70a0:	4562      	cmp	r2, ip
    70a2:	dd3f      	ble.n	7124 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16c>
    70a4:	9a08      	ldr	r2, [sp, #32]
    70a6:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
    70aa:	2200      	movs	r2, #0
    70ac:	eb04 0886 	add.w	r8, r4, r6, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    70b0:	4611      	mov	r1, r2
    70b2:	9d06      	ldr	r5, [sp, #24]
    70b4:	428d      	cmp	r5, r1
    70b6:	dd2f      	ble.n	7118 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
    70b8:	9d07      	ldr	r5, [sp, #28]
      float total = 0.f;
    70ba:	eddf 7a4d 	vldr	s15, [pc, #308]	; 71f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>
    70be:	eb05 0982 	add.w	r9, r5, r2, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    70c2:	46da      	mov	sl, fp
      for (int d = 0; d < accum_depth; ++d) {
    70c4:	f04f 0e00 	mov.w	lr, #0
    70c8:	4570      	cmp	r0, lr
    70ca:	dd08      	ble.n	70de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x126>
        total += input_data[b * accum_depth + d] *
    70cc:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
    70d0:	ecb9 7a01 	vldmia	r9!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
    70d4:	f10e 0e01 	add.w	lr, lr, #1
        total += input_data[b * accum_depth + d] *
    70d8:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
    70dc:	e7f4      	b.n	70c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
      if (bias_data) {
    70de:	b1c7      	cbz	r7, 7112 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15a>
        bias_value = bias_data[out_c];
    70e0:	eb07 0e81 	add.w	lr, r7, r1, lsl #2
    70e4:	ed9e 7a00 	vldr	s14, [lr]
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    70e8:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    70ec:	3101      	adds	r1, #1
	return __b;
    70ee:	eeb4 8a67 	vcmp.f32	s16, s15
    70f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70f6:	bfc8      	it	gt
    70f8:	eef0 7a48 	vmovgt.f32	s15, s16
	return __b;
    70fc:	eef4 8a67 	vcmp.f32	s17, s15
    7100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7104:	bf48      	it	mi
    7106:	eef0 7a68 	vmovmi.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    710a:	ece8 7a01 	vstmia	r8!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    710e:	4402      	add	r2, r0
    7110:	e7cf      	b.n	70b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
      float bias_value = 0.0f;
    7112:	eeb0 7a66 	vmov.f32	s14, s13
    7116:	e7e7      	b.n	70e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
  for (int b = 0; b < batches; ++b) {
    7118:	9a06      	ldr	r2, [sp, #24]
    711a:	f10c 0c01 	add.w	ip, ip, #1
    711e:	4416      	add	r6, r2
    7120:	4403      	add	r3, r0
    7122:	e7bc      	b.n	709e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    7124:	a838      	add	r0, sp, #224	; 0xe0
    7126:	f00a fe0d 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    712a:	a816      	add	r0, sp, #88	; 0x58
    712c:	f00a fe0a 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    7130:	a810      	add	r0, sp, #64	; 0x40
    7132:	f00a fe07 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    7136:	a80a      	add	r0, sp, #40	; 0x28
                               output);
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
          tflite::micro::GetTensorShape(input),
    7138:	f00a fe04 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
    713c:	2000      	movs	r0, #0
      break;
    713e:	e006      	b.n	714e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x196>
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
    7140:	e9cd 6400 	strd	r6, r4, [sp]
    7144:	463b      	mov	r3, r7
    7146:	462a      	mov	r2, r5
    7148:	4640      	mov	r0, r8
    714a:	f7ff fce1 	bl	6b10 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.isra.0>
}
    714e:	b043      	add	sp, #268	; 0x10c
    7150:	ecbd 8b02 	vpop	{d8}
    7154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          FullyConnectedParamsQuantized(data.reference_op_data),
    7158:	a838      	add	r0, sp, #224	; 0xe0
    715a:	f00a ff01 	bl	11f60 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    715e:	4629      	mov	r1, r5
    7160:	a81c      	add	r0, sp, #112	; 0x70
    7162:	f00a ff44 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
    7166:	4639      	mov	r1, r7
    7168:	a822      	add	r0, sp, #136	; 0x88
  return reinterpret_cast<const T*>(tensor->data.raw);
    716a:	f8d5 8000 	ldr.w	r8, [r5]
    716e:	f00a ff3e 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    7172:	2f00      	cmp	r7, #0
    7174:	f43f af2c 	beq.w	6fd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
          tflite::micro::GetTensorShape(bias),
    7178:	ad28      	add	r5, sp, #160	; 0xa0
    717a:	4631      	mov	r1, r6
    717c:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
    717e:	683f      	ldr	r7, [r7, #0]
    7180:	f00a ff35 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    7184:	2e00      	cmp	r6, #0
    7186:	f43f af23 	beq.w	6fd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
    718a:	f8d6 9000 	ldr.w	r9, [r6]
          tflite::micro::GetTensorShape(output),
    718e:	ae2e      	add	r6, sp, #184	; 0xb8
    7190:	4621      	mov	r1, r4
    7192:	4630      	mov	r0, r6
    7194:	f00a ff2b 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7198:	b104      	cbz	r4, 719c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>
    719a:	6824      	ldr	r4, [r4, #0]
      tflite::reference_ops::FullyConnected(
    719c:	9700      	str	r7, [sp, #0]
    719e:	ab22      	add	r3, sp, #136	; 0x88
    71a0:	4642      	mov	r2, r8
    71a2:	a91c      	add	r1, sp, #112	; 0x70
    71a4:	a838      	add	r0, sp, #224	; 0xe0
    71a6:	e9cd 6403 	strd	r6, r4, [sp, #12]
    71aa:	e9cd 5901 	strd	r5, r9, [sp, #4]
    71ae:	f7ff fd65 	bl	6c7c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>
          tflite::micro::GetTensorShape(output),
    71b2:	4630      	mov	r0, r6
    71b4:	f00a fdc6 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    71b8:	4628      	mov	r0, r5
    71ba:	f00a fdc3 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    71be:	a822      	add	r0, sp, #136	; 0x88
    71c0:	f00a fdc0 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    71c4:	a81c      	add	r0, sp, #112	; 0x70
    71c6:	e7b7      	b.n	7138 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    71c8:	f8d8 4014 	ldr.w	r4, [r8, #20]
    71cc:	f002 f952 	bl	9474 <TfLiteTypeGetName>
    71d0:	7a2b      	ldrb	r3, [r5, #8]
    71d2:	4908      	ldr	r1, [pc, #32]	; (71f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    71d4:	4602      	mov	r2, r0
    71d6:	4640      	mov	r0, r8
    71d8:	47a0      	blx	r4
      return kTfLiteError;
    71da:	2001      	movs	r0, #1
    71dc:	e7b7      	b.n	714e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x196>
    71de:	bf00      	nop
    71e0:	00017bc8 	.word	0x00017bc8
    71e4:	00017bd0 	.word	0x00017bd0
    71e8:	00017bc4 	.word	0x00017bc4
    71ec:	00017bcc 	.word	0x00017bcc
    71f0:	00000000 	.word	0x00000000
    71f4:	00045e39 	.word	0x00045e39

000071f8 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    71f8:	b570      	push	{r4, r5, r6, lr}
  fully_connected_registration.init = Init;
    71fa:	4c0b      	ldr	r4, [pc, #44]	; (7228 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
  fully_connected_registration.free = nullptr;
  fully_connected_registration.prepare = Prepare;
    71fc:	4a0b      	ldr	r2, [pc, #44]	; (722c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x34>)
    71fe:	60a2      	str	r2, [r4, #8]
  fully_connected_registration.init = Init;
    7200:	4b0b      	ldr	r3, [pc, #44]	; (7230 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
  fully_connected_registration.invoke = Eval;
    7202:	4a0c      	ldr	r2, [pc, #48]	; (7234 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.init = Init;
    7204:	6023      	str	r3, [r4, #0]
  fully_connected_registration.free = nullptr;
    7206:	2300      	movs	r3, #0
  fully_connected_registration.profiling_string = nullptr;
    7208:	e9c4 2303 	strd	r2, r3, [r4, #12]
  fully_connected_registration.free = nullptr;
    720c:	6063      	str	r3, [r4, #4]
TfLiteRegistration Register_FULLY_CONNECTED() {
    720e:	4606      	mov	r6, r0
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
    7210:	e9c4 3305 	strd	r3, r3, [r4, #20]
  fully_connected_registration.version = 0;
    7214:	61e3      	str	r3, [r4, #28]
  return fully_connected_registration;
    7216:	4605      	mov	r5, r0
    7218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    721a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    721c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    7220:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    7224:	4630      	mov	r0, r6
    7226:	bd70      	pop	{r4, r5, r6, pc}
    7228:	20000800 	.word	0x20000800
    722c:	00006e21 	.word	0x00006e21
    7230:	00011f19 	.word	0x00011f19
    7234:	00006fb9 	.word	0x00006fb9

00007238 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  if (activation == kTfLiteActRelu) {
    7238:	2901      	cmp	r1, #1
    723a:	d103      	bne.n	7244 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0xc>
    *activation_min = 0;
    723c:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    723e:	61c3      	str	r3, [r0, #28]
    *activation_max = std::numeric_limits<T>::max();
    7240:	4b09      	ldr	r3, [pc, #36]	; (7268 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x30>)
    7242:	e004      	b.n	724e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
  } else if (activation == kTfLiteActRelu6) {
    7244:	2903      	cmp	r1, #3
    7246:	d104      	bne.n	7252 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1a>
    *activation_min = 0;
    7248:	2300      	movs	r3, #0
    724a:	61c3      	str	r3, [r0, #28]
    *activation_max = 6;
    724c:	4b07      	ldr	r3, [pc, #28]	; (726c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x34>)
    *activation_max = std::numeric_limits<T>::max();
    724e:	6203      	str	r3, [r0, #32]
    TfLiteFusedActivation activation) {
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
    7250:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
    7252:	2902      	cmp	r1, #2
    7254:	d104      	bne.n	7260 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x28>
    *activation_min = -1;
    7256:	4b06      	ldr	r3, [pc, #24]	; (7270 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x38>)
    7258:	61c3      	str	r3, [r0, #28]
    *activation_max = 1;
    725a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    725e:	e7f6      	b.n	724e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
    7260:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    7264:	e7eb      	b.n	723e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x6>
    7266:	bf00      	nop
    7268:	7f7fffff 	.word	0x7f7fffff
    726c:	40c00000 	.word	0x40c00000
    7270:	bf800000 	.word	0xbf800000

00007274 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    7274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7278:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    727a:	4814      	ldr	r0, [pc, #80]	; (72cc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
    727c:	f00a ff13 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7280:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    7282:	4813      	ldr	r0, [pc, #76]	; (72d0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    7284:	f00a ff0f 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
    7288:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    728c:	4680      	mov	r8, r0
  F x2 = x * x;
    728e:	4621      	mov	r1, r4
    7290:	4620      	mov	r0, r4
    7292:	f00a ff0d 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
    7296:	4621      	mov	r1, r4
  F x2 = x * x;
    7298:	4605      	mov	r5, r0
  F x3 = x2 * x;
    729a:	f00a ff09 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
    729e:	4629      	mov	r1, r5
  F x3 = x2 * x;
    72a0:	4607      	mov	r7, r0
  F x4 = x2 * x2;
    72a2:	4628      	mov	r0, r5
    72a4:	f00a ff04 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    72a8:	2102      	movs	r1, #2
    72aa:	f7ff fb55 	bl	6958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
    72ae:	4641      	mov	r1, r8
    72b0:	4438      	add	r0, r7
    72b2:	f00a fefd 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    72b6:	2101      	movs	r1, #1
    72b8:	4428      	add	r0, r5
    72ba:	f7ff fb4d 	bl	6958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
    72be:	1821      	adds	r1, r4, r0
    72c0:	4630      	mov	r0, r6
    72c2:	f00a fef5 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
    72c6:	4430      	add	r0, r6
    72c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72cc:	70f5a894 	.word	0x70f5a894
    72d0:	2aaaaaab 	.word	0x2aaaaaab

000072d4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
    72d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72d8:	ed2d 8b04 	vpush	{d8-d9}
    72dc:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    72de:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
    72e0:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    72e2:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
    72e4:	4604      	mov	r4, r0
    72e6:	460d      	mov	r5, r1
    72e8:	9211      	str	r2, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    72ea:	d001      	beq.n	72f0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
    72ec:	f00e feac 	bl	16048 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    72f0:	6833      	ldr	r3, [r6, #0]
    72f2:	2b04      	cmp	r3, #4
    72f4:	d1fa      	bne.n	72ec <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    72f6:	2300      	movs	r3, #0
    72f8:	4619      	mov	r1, r3
    72fa:	4632      	mov	r2, r6
    72fc:	4628      	mov	r0, r5
    72fe:	f00a fdad 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    7302:	2303      	movs	r3, #3
    7304:	4619      	mov	r1, r3
    7306:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    7308:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    730a:	4628      	mov	r0, r5
    730c:	f00a fda6 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    7310:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    7312:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
    7314:	4628      	mov	r0, r5
    7316:	f00a fd20 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    731a:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    731c:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
    731e:	4628      	mov	r0, r5
    7320:	f00a fd1b 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    7324:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    7326:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
    7328:	4630      	mov	r0, r6
    732a:	f00a fd16 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    732e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    7330:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
    7332:	4630      	mov	r0, r6
    7334:	f00a fd11 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
    7338:	68e3      	ldr	r3, [r4, #12]
    733a:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
    733c:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
    733e:	900d      	str	r0, [sp, #52]	; 0x34
  const int stride_width = params.stride_width;
    7340:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
    7342:	2100      	movs	r1, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
    7344:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  for (int batch = 0; batch < batches; ++batch) {
    7348:	9b08      	ldr	r3, [sp, #32]
    734a:	4299      	cmp	r1, r3
    734c:	f280 8090 	bge.w	7470 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
    7350:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
    7354:	46da      	mov	sl, fp
    7356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7358:	459a      	cmp	sl, r3
    735a:	f280 8087 	bge.w	746c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x198>
    735e:	f04f 0800 	mov.w	r8, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
    7362:	46c1      	mov	r9, r8
    7364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7366:	4599      	cmp	r9, r3
    7368:	da7b      	bge.n	7462 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18e>
        for (int channel = 0; channel < depth; ++channel) {
    736a:	2300      	movs	r3, #0
    736c:	9303      	str	r3, [sp, #12]
    736e:	9b03      	ldr	r3, [sp, #12]
    7370:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7372:	4293      	cmp	r3, r2
    7374:	da70      	bge.n	7458 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x184>
              (out_x * stride_width) - params.padding_values.width;
    7376:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
    737a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          float filter_count = 0;
    737e:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 747c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a8>
          const int in_x_origin =
    7382:	eba8 0307 	sub.w	r3, r8, r7
    7386:	9306      	str	r3, [sp, #24]
          const int in_y_origin =
    7388:	ebab 0302 	sub.w	r3, fp, r2
    738c:	9304      	str	r3, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
    738e:	eba7 0308 	sub.w	r3, r7, r8
    7392:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
              std::min(params.filter_width, input_width - in_x_origin);
    7396:	9806      	ldr	r0, [sp, #24]
    7398:	9305      	str	r3, [sp, #20]
    739a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    739c:	1a18      	subs	r0, r3, r0
    739e:	69a3      	ldr	r3, [r4, #24]
    73a0:	4298      	cmp	r0, r3
    73a2:	bfa8      	it	ge
    73a4:	4618      	movge	r0, r3
    73a6:	9010      	str	r0, [sp, #64]	; 0x40
              std::min(params.filter_height, input_height - in_y_origin);
    73a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73aa:	9804      	ldr	r0, [sp, #16]
    73ac:	1a18      	subs	r0, r3, r0
    73ae:	6963      	ldr	r3, [r4, #20]
    73b0:	4298      	cmp	r0, r3
    73b2:	bfa8      	it	ge
    73b4:	4618      	movge	r0, r3
    73b6:	9b04      	ldr	r3, [sp, #16]
    73b8:	9007      	str	r0, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
    73ba:	eba2 020b 	sub.w	r2, r2, fp
    73be:	2a00      	cmp	r2, #0
    73c0:	bfa8      	it	ge
    73c2:	189b      	addge	r3, r3, r2
    73c4:	461a      	mov	r2, r3
          float total = 0.f;
    73c6:	eef0 8a48 	vmov.f32	s17, s16
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    73ca:	9b04      	ldr	r3, [sp, #16]
    73cc:	9807      	ldr	r0, [sp, #28]
    73ce:	1ad3      	subs	r3, r2, r3
    73d0:	4298      	cmp	r0, r3
    73d2:	dd1b      	ble.n	740c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x138>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    73d4:	9f05      	ldr	r7, [sp, #20]
    73d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    73d8:	429f      	cmp	r7, r3
    73da:	da15      	bge.n	7408 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x134>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    73dc:	9b03      	ldr	r3, [sp, #12]
    73de:	9300      	str	r3, [sp, #0]
    73e0:	9b06      	ldr	r3, [sp, #24]
    73e2:	4628      	mov	r0, r5
    73e4:	443b      	add	r3, r7
    73e6:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
    73ea:	f00a fd15 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    73ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              total +=
    73f4:	edd0 7a00 	vldr	s15, [r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    73f8:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
              total +=
    73fc:	ee78 8aa7 	vadd.f32	s17, s17, s15
              filter_count++;
    7400:	ee38 8a29 	vadd.f32	s16, s16, s19
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    7404:	3701      	adds	r7, #1
    7406:	e7e6      	b.n	73d6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x102>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    7408:	3201      	adds	r2, #1
    740a:	e7de      	b.n	73ca <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf6>
            }
          }
          const float average = total / filter_count;
    740c:	ee88 9a88 	vdiv.f32	s18, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    7410:	9b03      	ldr	r3, [sp, #12]
    7412:	9300      	str	r3, [sp, #0]
    7414:	4652      	mov	r2, sl
    7416:	464b      	mov	r3, r9
    7418:	4630      	mov	r0, r6
    741a:	9104      	str	r1, [sp, #16]
    741c:	f00a fcfc 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    7420:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int channel = 0; channel < depth; ++channel) {
    7422:	9904      	ldr	r1, [sp, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    7424:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(average, params.float_activation_min,
    7428:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
                                           params.float_activation_max);
    742c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
        for (int channel = 0; channel < depth; ++channel) {
    7430:	9b03      	ldr	r3, [sp, #12]
      return __a;
    7432:	eeb4 8ac9 	vcmpe.f32	s16, s18
    7436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    743a:	bfd8      	it	le
    743c:	eeb0 8a49 	vmovle.f32	s16, s18
	return __b;
    7440:	eef4 8a48 	vcmp.f32	s17, s16
    7444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7448:	bf48      	it	mi
    744a:	eeb0 8a68 	vmovmi.f32	s16, s17
    744e:	3301      	adds	r3, #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    7450:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
    7454:	9303      	str	r3, [sp, #12]
    7456:	e78a      	b.n	736e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    7458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    745a:	f109 0901 	add.w	r9, r9, #1
    745e:	4498      	add	r8, r3
    7460:	e780      	b.n	7364 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x90>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    7462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7464:	f10a 0a01 	add.w	sl, sl, #1
    7468:	449b      	add	fp, r3
    746a:	e774      	b.n	7356 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x82>
  for (int batch = 0; batch < batches; ++batch) {
    746c:	3101      	adds	r1, #1
    746e:	e76b      	b.n	7348 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
        }
      }
    }
  }
}
    7470:	b015      	add	sp, #84	; 0x54
    7472:	ecbd 8b04 	vpop	{d8-d9}
    7476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    747a:	bf00      	nop
    747c:	00000000 	.word	0x00000000

00007480 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
    7480:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    7482:	4d05      	ldr	r5, [pc, #20]	; (7498 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x18>)
TfLiteRegistration Register_MAX_POOL_2D() {
    7484:	4606      	mov	r6, r0
          /*version=*/0};
    7486:	4604      	mov	r4, r0
    7488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    748a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    748c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    7494:	4630      	mov	r0, r6
    7496:	bd70      	pop	{r4, r5, r6, pc}
    7498:	00017020 	.word	0x00017020

0000749c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    749c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    74a0:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    74a4:	4604      	mov	r4, r0
    74a6:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    74a8:	f1b8 0f00 	cmp.w	r8, #0
    74ac:	d101      	bne.n	74b2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
    74ae:	f00e fdcb 	bl	16048 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    74b2:	694f      	ldr	r7, [r1, #20]
    74b4:	2f00      	cmp	r7, #0
    74b6:	d0fa      	beq.n	74ae <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x12>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    74b8:	2200      	movs	r2, #0
    74ba:	f00a fc1f 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    74be:	4606      	mov	r6, r0
    74c0:	b960      	cbnz	r0, 74dc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x40>
    74c2:	4b11      	ldr	r3, [pc, #68]	; (7508 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
    74c4:	6965      	ldr	r5, [r4, #20]
    74c6:	9300      	str	r3, [sp, #0]
    74c8:	f44f 738e 	mov.w	r3, #284	; 0x11c
  TF_LITE_ENSURE(context, output != nullptr);
    74cc:	4620      	mov	r0, r4
    74ce:	4a0f      	ldr	r2, [pc, #60]	; (750c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
    74d0:	490f      	ldr	r1, [pc, #60]	; (7510 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
    74d2:	47a8      	blx	r5
    74d4:	2001      	movs	r0, #1
}
    74d6:	b002      	add	sp, #8
    74d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    74dc:	2200      	movs	r2, #0
    74de:	4629      	mov	r1, r5
    74e0:	4620      	mov	r0, r4
    74e2:	f00a fc1c 	bl	11d1e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    74e6:	4603      	mov	r3, r0
    74e8:	b928      	cbnz	r0, 74f6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
    74ea:	4b0a      	ldr	r3, [pc, #40]	; (7514 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    74ec:	9300      	str	r3, [sp, #0]
    74ee:	6965      	ldr	r5, [r4, #20]
    74f0:	f44f 738f 	mov.w	r3, #286	; 0x11e
    74f4:	e7ea      	b.n	74cc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
    74f6:	f8cd 8000 	str.w	r8, [sp]
    74fa:	4632      	mov	r2, r6
    74fc:	4639      	mov	r1, r7
    74fe:	4620      	mov	r0, r4
    7500:	f00b f85e 	bl	125c0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
    7504:	e7e7      	b.n	74d6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    7506:	bf00      	nop
    7508:	00045d51 	.word	0x00045d51
    750c:	00046173 	.word	0x00046173
    7510:	00045a68 	.word	0x00045a68
    7514:	00045d74 	.word	0x00045d74

00007518 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    7518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    751c:	694d      	ldr	r5, [r1, #20]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    751e:	b0ac      	sub	sp, #176	; 0xb0
    7520:	4680      	mov	r8, r0
    7522:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    7524:	b90d      	cbnz	r5, 752a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x12>
    7526:	f00e fd8f 	bl	16048 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    752a:	690e      	ldr	r6, [r1, #16]
    752c:	2e00      	cmp	r6, #0
    752e:	d0fa      	beq.n	7526 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
  return GetMutableEvalInput(context, node, index);
    7530:	2200      	movs	r2, #0
    7532:	f00a fc45 	bl	11dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
    7536:	4621      	mov	r1, r4
    7538:	4607      	mov	r7, r0
    753a:	2200      	movs	r2, #0
    753c:	4640      	mov	r0, r8
    753e:	f00a fc4d 	bl	11ddc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
    7542:	4604      	mov	r4, r0
  switch (input->type) {
    7544:	7a38      	ldrb	r0, [r7, #8]
    7546:	2803      	cmp	r0, #3
    7548:	d038      	beq.n	75bc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    754a:	2809      	cmp	r0, #9
    754c:	d05c      	beq.n	7608 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xf0>
    754e:	2801      	cmp	r0, #1
    7550:	f040 80ba 	bne.w	76c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1b0>
  CalculateActivationRange(params->activation, &activation_min,
    7554:	aa11      	add	r2, sp, #68	; 0x44
    7556:	7d28      	ldrb	r0, [r5, #20]
    7558:	a90d      	add	r1, sp, #52	; 0x34
    755a:	f7ff fabb 	bl	6ad4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
    755e:	68ab      	ldr	r3, [r5, #8]
    7560:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
    7562:	686b      	ldr	r3, [r5, #4]
    7564:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
    7566:	692b      	ldr	r3, [r5, #16]
    7568:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
    756a:	68eb      	ldr	r3, [r5, #12]
    756c:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
    756e:	6873      	ldr	r3, [r6, #4]
    7570:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
    7574:	6833      	ldr	r3, [r6, #0]
    7576:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.float_activation_min = activation_min;
    757a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    757c:	932a      	str	r3, [sp, #168]	; 0xa8
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    757e:	4639      	mov	r1, r7
  op_params.float_activation_max = activation_max;
    7580:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7582:	932b      	str	r3, [sp, #172]	; 0xac
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    7584:	a815      	add	r0, sp, #84	; 0x54
    7586:	f00a fd32 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    758a:	683a      	ldr	r2, [r7, #0]
    758c:	9205      	str	r2, [sp, #20]
                             tflite::micro::GetTensorShape(output),
    758e:	4621      	mov	r1, r4
    7590:	a81b      	add	r0, sp, #108	; 0x6c
    7592:	f00a fd2c 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7596:	9a05      	ldr	r2, [sp, #20]
    7598:	b104      	cbz	r4, 759c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x84>
    759a:	6824      	ldr	r4, [r4, #0]
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    759c:	9400      	str	r4, [sp, #0]
    759e:	ab1b      	add	r3, sp, #108	; 0x6c
    75a0:	a915      	add	r1, sp, #84	; 0x54
    75a2:	a821      	add	r0, sp, #132	; 0x84
    75a4:	f7ff fe96 	bl	72d4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                               tflite::micro::GetTensorShape(output),
    75a8:	a81b      	add	r0, sp, #108	; 0x6c
    75aa:	f00a fbcb 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    75ae:	a815      	add	r0, sp, #84	; 0x54
    75b0:	f00a fbc8 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    75b4:	2000      	movs	r0, #0
}
    75b6:	b02c      	add	sp, #176	; 0xb0
    75b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    op_params.stride_height = params->stride_height;
    75bc:	68ab      	ldr	r3, [r5, #8]
    75be:	9324      	str	r3, [sp, #144]	; 0x90
    op_params.stride_width = params->stride_width;
    75c0:	686b      	ldr	r3, [r5, #4]
    75c2:	9325      	str	r3, [sp, #148]	; 0x94
    op_params.filter_height = params->filter_height;
    75c4:	692b      	ldr	r3, [r5, #16]
    75c6:	9326      	str	r3, [sp, #152]	; 0x98
    op_params.filter_width = params->filter_width;
    75c8:	68eb      	ldr	r3, [r5, #12]
    75ca:	9327      	str	r3, [sp, #156]	; 0x9c
    op_params.padding_values.height = data.padding.height;
    75cc:	6873      	ldr	r3, [r6, #4]
    75ce:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    op_params.padding_values.width = data.padding.width;
    75d2:	6833      	ldr	r3, [r6, #0]
    75d4:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    op_params.quantized_activation_min = data.activation_min;
    75d8:	6973      	ldr	r3, [r6, #20]
    75da:	9328      	str	r3, [sp, #160]	; 0xa0
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    75dc:	4639      	mov	r1, r7
    op_params.quantized_activation_max = data.activation_max;
    75de:	69b3      	ldr	r3, [r6, #24]
    75e0:	9329      	str	r3, [sp, #164]	; 0xa4
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    75e2:	a815      	add	r0, sp, #84	; 0x54
    75e4:	f00a fd03 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    75e8:	683a      	ldr	r2, [r7, #0]
    75ea:	9205      	str	r2, [sp, #20]
                               tflite::micro::GetTensorShape(output),
    75ec:	4621      	mov	r1, r4
    75ee:	a81b      	add	r0, sp, #108	; 0x6c
    75f0:	f00a fcfd 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    75f4:	9a05      	ldr	r2, [sp, #20]
    75f6:	b104      	cbz	r4, 75fa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    75f8:	6824      	ldr	r4, [r4, #0]
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    75fa:	9400      	str	r4, [sp, #0]
    75fc:	ab1b      	add	r3, sp, #108	; 0x6c
    75fe:	a915      	add	r1, sp, #84	; 0x54
    7600:	a821      	add	r0, sp, #132	; 0x84
    7602:	f00a fd62 	bl	120ca <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    7606:	e7cf      	b.n	75a8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x90>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    7608:	4639      	mov	r1, r7
    760a:	a815      	add	r0, sp, #84	; 0x54
    760c:	f00a fcef 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    7610:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7612:	2b04      	cmp	r3, #4
    7614:	d187      	bne.n	7526 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    7616:	4621      	mov	r1, r4
    7618:	a81b      	add	r0, sp, #108	; 0x6c
    761a:	f00a fce8 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    761e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7620:	2b04      	cmp	r3, #4
    7622:	d180      	bne.n	7526 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    7624:	2303      	movs	r3, #3
    7626:	4619      	mov	r1, r3
    7628:	aa1b      	add	r2, sp, #108	; 0x6c
    762a:	a815      	add	r0, sp, #84	; 0x54
    762c:	f00a fc16 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    input_dims.n = 1;
    7630:	f04f 0901 	mov.w	r9, #1
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    7634:	4682      	mov	sl, r0
    input_dims.h = input_shape.Dims(1);
    7636:	4649      	mov	r1, r9
    7638:	a815      	add	r0, sp, #84	; 0x54
    input_dims.n = 1;
    763a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    input_dims.h = input_shape.Dims(1);
    763e:	f00a fb8c 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
    7642:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
    7644:	900a      	str	r0, [sp, #40]	; 0x28
    input_dims.w = input_shape.Dims(2);
    7646:	a815      	add	r0, sp, #84	; 0x54
    7648:	f00a fb87 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.h = output_shape.Dims(1);
    764c:	4649      	mov	r1, r9
    input_dims.c = depth;
    764e:	e9cd 0a0b 	strd	r0, sl, [sp, #44]	; 0x2c
    output_dims.h = output_shape.Dims(1);
    7652:	a81b      	add	r0, sp, #108	; 0x6c
    output_dims.n = 1;
    7654:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    output_dims.h = output_shape.Dims(1);
    7658:	f00a fb7f 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
    765c:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
    765e:	900e      	str	r0, [sp, #56]	; 0x38
    output_dims.w = output_shape.Dims(2);
    7660:	a81b      	add	r0, sp, #108	; 0x6c
    7662:	f00a fb7a 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
    pool_params.stride.h = params->stride_height;
    7666:	68ab      	ldr	r3, [r5, #8]
    7668:	9322      	str	r3, [sp, #136]	; 0x88
    pool_params.stride.w = params->stride_width;
    766a:	686b      	ldr	r3, [r5, #4]
    766c:	9321      	str	r3, [sp, #132]	; 0x84
    pool_params.padding.h = data.padding.height;
    766e:	6873      	ldr	r3, [r6, #4]
    7670:	9324      	str	r3, [sp, #144]	; 0x90
    pool_params.padding.w = data.padding.width;
    7672:	6833      	ldr	r3, [r6, #0]
    7674:	9323      	str	r3, [sp, #140]	; 0x8c
    pool_params.activation.min = data.activation_min;
    7676:	6973      	ldr	r3, [r6, #20]
    7678:	9325      	str	r3, [sp, #148]	; 0x94
    pool_params.activation.max = data.activation_max;
    767a:	69b3      	ldr	r3, [r6, #24]
    767c:	9326      	str	r3, [sp, #152]	; 0x98
    filter_dims.h = params->filter_height;
    767e:	692b      	ldr	r3, [r5, #16]
    7680:	9312      	str	r3, [sp, #72]	; 0x48
    filter_dims.w = params->filter_width;
    7682:	68eb      	ldr	r3, [r5, #12]
    if (data.buffer_idx > -1) {
    7684:	6931      	ldr	r1, [r6, #16]
    filter_dims.n = 1;
    7686:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    filter_dims.c = 1;
    768a:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
    ctx.buf = nullptr;
    768e:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
    7690:	4299      	cmp	r1, r3
    output_dims.c = depth;
    7692:	e9cd 0a0f 	strd	r0, sl, [sp, #60]	; 0x3c
    ctx.size = 0;
    7696:	e9cd 3307 	strd	r3, r3, [sp, #28]
    if (data.buffer_idx > -1) {
    769a:	db04      	blt.n	76a6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x18e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    769c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    76a0:	4640      	mov	r0, r8
    76a2:	4798      	blx	r3
    76a4:	9007      	str	r0, [sp, #28]
  return reinterpret_cast<const T*>(tensor->data.raw);
    76a6:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    76a8:	b104      	cbz	r4, 76ac <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x194>
    76aa:	6824      	ldr	r4, [r4, #0]
    TFLITE_DCHECK_EQ(
    76ac:	9402      	str	r4, [sp, #8]
    76ae:	aa0d      	add	r2, sp, #52	; 0x34
    76b0:	9201      	str	r2, [sp, #4]
    76b2:	aa11      	add	r2, sp, #68	; 0x44
    76b4:	9200      	str	r2, [sp, #0]
    76b6:	a921      	add	r1, sp, #132	; 0x84
    76b8:	aa09      	add	r2, sp, #36	; 0x24
    76ba:	a807      	add	r0, sp, #28
    76bc:	f00d f988 	bl	149d0 <arm_avgpool_s8>
    76c0:	2800      	cmp	r0, #0
    76c2:	f43f af71 	beq.w	75a8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x90>
    76c6:	e72e      	b.n	7526 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    76c8:	f8d8 4014 	ldr.w	r4, [r8, #20]
    76cc:	f001 fed2 	bl	9474 <TfLiteTypeGetName>
    76d0:	4902      	ldr	r1, [pc, #8]	; (76dc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
    76d2:	4602      	mov	r2, r0
    76d4:	4640      	mov	r0, r8
    76d6:	47a0      	blx	r4
      return kTfLiteError;
    76d8:	2001      	movs	r0, #1
    76da:	e76c      	b.n	75b6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9e>
    76dc:	000461df 	.word	0x000461df

000076e0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    76e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    76e4:	694e      	ldr	r6, [r1, #20]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    76e6:	b0ac      	sub	sp, #176	; 0xb0
    76e8:	4680      	mov	r8, r0
    76ea:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    76ec:	b90e      	cbnz	r6, 76f2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x12>
    76ee:	f00e fcab 	bl	16048 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    76f2:	690d      	ldr	r5, [r1, #16]
    76f4:	2d00      	cmp	r5, #0
    76f6:	d0fa      	beq.n	76ee <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
  return GetMutableEvalInput(context, node, index);
    76f8:	2200      	movs	r2, #0
    76fa:	f00a fb61 	bl	11dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
    76fe:	4621      	mov	r1, r4
    7700:	4607      	mov	r7, r0
    7702:	2200      	movs	r2, #0
    7704:	4640      	mov	r0, r8
    7706:	f00a fb69 	bl	11ddc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
    770a:	4604      	mov	r4, r0
  switch (input->type) {
    770c:	7a38      	ldrb	r0, [r7, #8]
    770e:	2803      	cmp	r0, #3
    7710:	d038      	beq.n	7784 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    7712:	2809      	cmp	r0, #9
    7714:	d05c      	beq.n	77d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xf0>
    7716:	2801      	cmp	r0, #1
    7718:	f040 80b4 	bne.w	7884 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
  CalculateActivationRange(params->activation, &activation_min,
    771c:	aa11      	add	r2, sp, #68	; 0x44
    771e:	7d30      	ldrb	r0, [r6, #20]
    7720:	a90d      	add	r1, sp, #52	; 0x34
    7722:	f7ff f9d7 	bl	6ad4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
    7726:	68b3      	ldr	r3, [r6, #8]
    7728:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
    772a:	6873      	ldr	r3, [r6, #4]
    772c:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
    772e:	6933      	ldr	r3, [r6, #16]
    7730:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
    7732:	68f3      	ldr	r3, [r6, #12]
    7734:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
    7736:	686b      	ldr	r3, [r5, #4]
    7738:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
    773c:	682b      	ldr	r3, [r5, #0]
    773e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.float_activation_min = data.activation_min_f32;
    7742:	69eb      	ldr	r3, [r5, #28]
    7744:	932a      	str	r3, [sp, #168]	; 0xa8
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7746:	4639      	mov	r1, r7
  op_params.float_activation_max = data.activation_max_f32;
    7748:	6a2b      	ldr	r3, [r5, #32]
    774a:	932b      	str	r3, [sp, #172]	; 0xac
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    774c:	a815      	add	r0, sp, #84	; 0x54
    774e:	f00a fc4e 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    7752:	683a      	ldr	r2, [r7, #0]
    7754:	9205      	str	r2, [sp, #20]
                         tflite::micro::GetTensorShape(output),
    7756:	4621      	mov	r1, r4
    7758:	a81b      	add	r0, sp, #108	; 0x6c
    775a:	f00a fc48 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    775e:	9a05      	ldr	r2, [sp, #20]
    7760:	b104      	cbz	r4, 7764 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x84>
    7762:	6824      	ldr	r4, [r4, #0]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7764:	9400      	str	r4, [sp, #0]
    7766:	ab1b      	add	r3, sp, #108	; 0x6c
    7768:	a915      	add	r1, sp, #84	; 0x54
    776a:	a821      	add	r0, sp, #132	; 0x84
    776c:	f00a fd7f 	bl	1226e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
    7770:	a81b      	add	r0, sp, #108	; 0x6c
    7772:	f00a fae7 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7776:	a815      	add	r0, sp, #84	; 0x54
    7778:	f00a fae4 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    777c:	2000      	movs	r0, #0
}
    777e:	b02c      	add	sp, #176	; 0xb0
    7780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  op_params.stride_height = params->stride_height;
    7784:	68b3      	ldr	r3, [r6, #8]
    7786:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
    7788:	6873      	ldr	r3, [r6, #4]
    778a:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
    778c:	6933      	ldr	r3, [r6, #16]
    778e:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
    7790:	68f3      	ldr	r3, [r6, #12]
    7792:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
    7794:	686b      	ldr	r3, [r5, #4]
    7796:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
    779a:	682b      	ldr	r3, [r5, #0]
    779c:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.quantized_activation_min = data.activation_min;
    77a0:	696b      	ldr	r3, [r5, #20]
    77a2:	9328      	str	r3, [sp, #160]	; 0xa0
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    77a4:	4639      	mov	r1, r7
  op_params.quantized_activation_max = data.activation_max;
    77a6:	69ab      	ldr	r3, [r5, #24]
    77a8:	9329      	str	r3, [sp, #164]	; 0xa4
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    77aa:	a815      	add	r0, sp, #84	; 0x54
    77ac:	f00a fc1f 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    77b0:	683a      	ldr	r2, [r7, #0]
    77b2:	9205      	str	r2, [sp, #20]
                         tflite::micro::GetTensorShape(output),
    77b4:	4621      	mov	r1, r4
    77b6:	a81b      	add	r0, sp, #108	; 0x6c
    77b8:	f00a fc19 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    77bc:	9a05      	ldr	r2, [sp, #20]
    77be:	b104      	cbz	r4, 77c2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    77c0:	6824      	ldr	r4, [r4, #0]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    77c2:	9400      	str	r4, [sp, #0]
    77c4:	ab1b      	add	r3, sp, #108	; 0x6c
    77c6:	a915      	add	r1, sp, #84	; 0x54
    77c8:	a821      	add	r0, sp, #132	; 0x84
    77ca:	f00a fe28 	bl	1241e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    77ce:	e7cf      	b.n	7770 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    77d0:	4639      	mov	r1, r7
    77d2:	a815      	add	r0, sp, #84	; 0x54
    77d4:	f00a fc0b 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    77d8:	4621      	mov	r1, r4
    77da:	a81b      	add	r0, sp, #108	; 0x6c
    77dc:	f00a fc07 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    77e0:	2303      	movs	r3, #3
    77e2:	4619      	mov	r1, r3
    77e4:	aa1b      	add	r2, sp, #108	; 0x6c
    77e6:	a815      	add	r0, sp, #84	; 0x54
    77e8:	f00a fb38 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.n = 1;
    77ec:	f04f 0901 	mov.w	r9, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    77f0:	4682      	mov	sl, r0
  input_dims.h = input_shape.Dims(1);
    77f2:	4649      	mov	r1, r9
    77f4:	a815      	add	r0, sp, #84	; 0x54
  input_dims.n = 1;
    77f6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  input_dims.h = input_shape.Dims(1);
    77fa:	f00a faae 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  input_dims.w = input_shape.Dims(2);
    77fe:	2102      	movs	r1, #2
  input_dims.h = input_shape.Dims(1);
    7800:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.w = input_shape.Dims(2);
    7802:	a815      	add	r0, sp, #84	; 0x54
    7804:	f00a faa9 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.h = output_shape.Dims(1);
    7808:	4649      	mov	r1, r9
  input_dims.c = depth;
    780a:	e9cd 0a0b 	strd	r0, sl, [sp, #44]	; 0x2c
  output_dims.h = output_shape.Dims(1);
    780e:	a81b      	add	r0, sp, #108	; 0x6c
  output_dims.n = 1;
    7810:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  output_dims.h = output_shape.Dims(1);
    7814:	f00a faa1 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.w = output_shape.Dims(2);
    7818:	2102      	movs	r1, #2
  output_dims.h = output_shape.Dims(1);
    781a:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.w = output_shape.Dims(2);
    781c:	a81b      	add	r0, sp, #108	; 0x6c
    781e:	f00a fa9c 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  pool_params.stride.h = params->stride_height;
    7822:	68b3      	ldr	r3, [r6, #8]
    7824:	9322      	str	r3, [sp, #136]	; 0x88
  pool_params.stride.w = params->stride_width;
    7826:	6873      	ldr	r3, [r6, #4]
    7828:	9321      	str	r3, [sp, #132]	; 0x84
  pool_params.padding.h = data.padding.height;
    782a:	686b      	ldr	r3, [r5, #4]
    782c:	9324      	str	r3, [sp, #144]	; 0x90
  pool_params.padding.w = data.padding.width;
    782e:	682b      	ldr	r3, [r5, #0]
    7830:	9323      	str	r3, [sp, #140]	; 0x8c
  pool_params.activation.min = data.activation_min;
    7832:	696b      	ldr	r3, [r5, #20]
    7834:	9325      	str	r3, [sp, #148]	; 0x94
  pool_params.activation.max = data.activation_max;
    7836:	69ab      	ldr	r3, [r5, #24]
    7838:	9326      	str	r3, [sp, #152]	; 0x98
  filter_dims.h = params->filter_height;
    783a:	6933      	ldr	r3, [r6, #16]
    783c:	9312      	str	r3, [sp, #72]	; 0x48
  filter_dims.w = params->filter_width;
    783e:	68f3      	ldr	r3, [r6, #12]
  if (data.buffer_idx > -1) {
    7840:	6929      	ldr	r1, [r5, #16]
  filter_dims.n = 1;
    7842:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  filter_dims.c = 1;
    7846:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
  ctx.buf = nullptr;
    784a:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
    784c:	4299      	cmp	r1, r3
  output_dims.c = depth;
    784e:	e9cd 0a0f 	strd	r0, sl, [sp, #60]	; 0x3c
  ctx.size = 0;
    7852:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (data.buffer_idx > -1) {
    7856:	db04      	blt.n	7862 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    7858:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    785c:	4640      	mov	r0, r8
    785e:	4798      	blx	r3
    7860:	9007      	str	r0, [sp, #28]
  return reinterpret_cast<const T*>(tensor->data.raw);
    7862:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7864:	b104      	cbz	r4, 7868 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x188>
    7866:	6824      	ldr	r4, [r4, #0]
  TFLITE_DCHECK_EQ(
    7868:	9402      	str	r4, [sp, #8]
    786a:	aa0d      	add	r2, sp, #52	; 0x34
    786c:	9201      	str	r2, [sp, #4]
    786e:	aa11      	add	r2, sp, #68	; 0x44
    7870:	9200      	str	r2, [sp, #0]
    7872:	a921      	add	r1, sp, #132	; 0x84
    7874:	aa09      	add	r2, sp, #36	; 0x24
    7876:	a807      	add	r0, sp, #28
    7878:	f00d f983 	bl	14b82 <arm_max_pool_s8>
    787c:	2800      	cmp	r0, #0
    787e:	f43f af77 	beq.w	7770 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90>
    7882:	e734      	b.n	76ee <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    7884:	f8d8 4014 	ldr.w	r4, [r8, #20]
    7888:	f001 fdf4 	bl	9474 <TfLiteTypeGetName>
    788c:	4902      	ldr	r1, [pc, #8]	; (7898 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
    788e:	4602      	mov	r2, r0
    7890:	4640      	mov	r0, r8
    7892:	47a0      	blx	r4
      return kTfLiteError;
    7894:	2001      	movs	r0, #1
    7896:	e772      	b.n	777e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
    7898:	00046208 	.word	0x00046208

0000789c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    789c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    78a0:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    78a2:	b085      	sub	sp, #20
    78a4:	4604      	mov	r4, r0
    78a6:	4688      	mov	r8, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    78a8:	f00a fa28 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    78ac:	4607      	mov	r7, r0
    78ae:	b958      	cbnz	r0, 78c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2c>
    78b0:	4b45      	ldr	r3, [pc, #276]	; (79c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
    78b2:	6965      	ldr	r5, [r4, #20]
    78b4:	9300      	str	r3, [sp, #0]
    78b6:	2323      	movs	r3, #35	; 0x23
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
    78b8:	4a44      	ldr	r2, [pc, #272]	; (79cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
    78ba:	4945      	ldr	r1, [pc, #276]	; (79d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
    78bc:	4620      	mov	r0, r4
    78be:	47a8      	blx	r5
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    78c0:	2001      	movs	r0, #1
  return kTfLiteOk;
}
    78c2:	b005      	add	sp, #20
    78c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    78c8:	2200      	movs	r2, #0
    78ca:	4641      	mov	r1, r8
    78cc:	4620      	mov	r0, r4
    78ce:	f00a fa26 	bl	11d1e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    78d2:	4606      	mov	r6, r0
    78d4:	b920      	cbnz	r0, 78e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x44>
    78d6:	4b3f      	ldr	r3, [pc, #252]	; (79d4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
    78d8:	9300      	str	r3, [sp, #0]
    78da:	6965      	ldr	r5, [r4, #20]
    78dc:	2325      	movs	r3, #37	; 0x25
    78de:	e7eb      	b.n	78b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c>
  for (int i = 0; i < dims->size; ++i) {
    78e0:	68bd      	ldr	r5, [r7, #8]
    78e2:	f855 9b04 	ldr.w	r9, [r5], #4
    78e6:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    78ea:	2201      	movs	r2, #1
    78ec:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    78ee:	45e1      	cmp	r9, ip
    78f0:	dd0c      	ble.n	790c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
    count *= dims->data[i];
    78f2:	f855 eb04 	ldr.w	lr, [r5], #4
    78f6:	4670      	mov	r0, lr
    78f8:	17c1      	asrs	r1, r0, #31
    78fa:	4351      	muls	r1, r2
    78fc:	fb0e 1103 	mla	r1, lr, r3, r1
    7900:	fba2 230e 	umull	r2, r3, r2, lr
    7904:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    7906:	f10c 0c01 	add.w	ip, ip, #1
    790a:	e7f0      	b.n	78ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    790c:	f8d8 3000 	ldr.w	r3, [r8]
  TfLiteIntArray* output_shape = output->dims;
    7910:	68b5      	ldr	r5, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    7912:	681b      	ldr	r3, [r3, #0]
    7914:	2b01      	cmp	r3, #1
    7916:	d105      	bne.n	7924 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x88>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    7918:	682b      	ldr	r3, [r5, #0]
    791a:	2b01      	cmp	r3, #1
    791c:	d102      	bne.n	7924 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x88>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    791e:	686b      	ldr	r3, [r5, #4]
    7920:	b903      	cbnz	r3, 7924 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x88>
    output_shape->size = 0;
    7922:	602b      	str	r3, [r5, #0]
  for (int i = 0; i < output_shape->size; ++i) {
    7924:	46ac      	mov	ip, r5
    7926:	2000      	movs	r0, #0
    7928:	f85c 8b04 	ldr.w	r8, [ip], #4
  int stretch_dim = -1;
    792c:	f04f 31ff 	mov.w	r1, #4294967295
  int num_output_elements = 1;
    7930:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
    7932:	4580      	cmp	r8, r0
    7934:	dd1a      	ble.n	796c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd0>
    int value = output_shape->data[i];
    7936:	f85c eb04 	ldr.w	lr, [ip], #4
    if (value == -1) {
    793a:	f1be 3fff 	cmp.w	lr, #4294967295
    793e:	d10f      	bne.n	7960 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    7940:	f1b1 3fff 	cmp.w	r1, #4294967295
    7944:	d010      	beq.n	7968 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
    7946:	4b24      	ldr	r3, [pc, #144]	; (79d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13c>)
    7948:	9301      	str	r3, [sp, #4]
    794a:	e9cd 1e02 	strd	r1, lr, [sp, #8]
    794e:	4b23      	ldr	r3, [pc, #140]	; (79dc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>)
    7950:	6965      	ldr	r5, [r4, #20]
    7952:	9300      	str	r3, [sp, #0]
    7954:	233a      	movs	r3, #58	; 0x3a
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    7956:	4a1d      	ldr	r2, [pc, #116]	; (79cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
    7958:	4921      	ldr	r1, [pc, #132]	; (79e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x144>)
    795a:	4620      	mov	r0, r4
    795c:	47a8      	blx	r5
    795e:	e7af      	b.n	78c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
      num_output_elements *= value;
    7960:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
    7964:	3001      	adds	r0, #1
    7966:	e7e4      	b.n	7932 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
    7968:	4601      	mov	r1, r0
    796a:	e7fb      	b.n	7964 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
  if (stretch_dim != -1) {
    796c:	1c48      	adds	r0, r1, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    796e:	bf1c      	itt	ne
    7970:	eb05 0581 	addne.w	r5, r5, r1, lsl #2
    7974:	fb92 f0f3 	sdivne	r0, r2, r3
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    7978:	7831      	ldrb	r1, [r6, #0]
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    797a:	bf1c      	itt	ne
    797c:	6068      	strne	r0, [r5, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    797e:	4343      	mulne	r3, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    7980:	7838      	ldrb	r0, [r7, #0]
    7982:	4281      	cmp	r1, r0
    7984:	d012      	beq.n	79ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x110>
    7986:	6967      	ldr	r7, [r4, #20]
    7988:	f001 fd74 	bl	9474 <TfLiteTypeGetName>
    798c:	4605      	mov	r5, r0
    798e:	7830      	ldrb	r0, [r6, #0]
    7990:	f001 fd70 	bl	9474 <TfLiteTypeGetName>
    7994:	4b13      	ldr	r3, [pc, #76]	; (79e4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x148>)
    7996:	9301      	str	r3, [sp, #4]
    7998:	4b13      	ldr	r3, [pc, #76]	; (79e8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14c>)
    799a:	9300      	str	r3, [sp, #0]
    799c:	e9cd 5002 	strd	r5, r0, [sp, #8]
    79a0:	4a0a      	ldr	r2, [pc, #40]	; (79cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
    79a2:	4912      	ldr	r1, [pc, #72]	; (79ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x150>)
    79a4:	2345      	movs	r3, #69	; 0x45
    79a6:	4620      	mov	r0, r4
    79a8:	47b8      	blx	r7
    79aa:	e789      	b.n	78c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    79ac:	4293      	cmp	r3, r2
    79ae:	d008      	beq.n	79c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x126>
    79b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    79b4:	4b0e      	ldr	r3, [pc, #56]	; (79f0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    79b6:	9301      	str	r3, [sp, #4]
    79b8:	4b0e      	ldr	r3, [pc, #56]	; (79f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    79ba:	9300      	str	r3, [sp, #0]
    79bc:	6965      	ldr	r5, [r4, #20]
    79be:	2346      	movs	r3, #70	; 0x46
    79c0:	e7c9      	b.n	7956 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
  return kTfLiteOk;
    79c2:	2000      	movs	r0, #0
    79c4:	e77d      	b.n	78c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x26>
    79c6:	bf00      	nop
    79c8:	00045d51 	.word	0x00045d51
    79cc:	00046229 	.word	0x00046229
    79d0:	00045a68 	.word	0x00045a68
    79d4:	00045d74 	.word	0x00045d74
    79d8:	00046295 	.word	0x00046295
    79dc:	00046298 	.word	0x00046298
    79e0:	00045ac0 	.word	0x00045ac0
    79e4:	00045d86 	.word	0x00045d86
    79e8:	00045d93 	.word	0x00045d93
    79ec:	000460b4 	.word	0x000460b4
    79f0:	000462a4 	.word	0x000462a4
    79f4:	000462b8 	.word	0x000462b8

000079f8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
    79f8:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    79fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    79fc:	681b      	ldr	r3, [r3, #0]
    79fe:	3b01      	subs	r3, #1
    7a00:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    7a02:	b085      	sub	sp, #20
    7a04:	4605      	mov	r5, r0
    7a06:	460c      	mov	r4, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    7a08:	d909      	bls.n	7a1e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    7a0a:	4b19      	ldr	r3, [pc, #100]	; (7a70 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    7a0c:	9300      	str	r3, [sp, #0]
    7a0e:	6944      	ldr	r4, [r0, #20]
    7a10:	4a18      	ldr	r2, [pc, #96]	; (7a74 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    7a12:	4919      	ldr	r1, [pc, #100]	; (7a78 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    7a14:	234b      	movs	r3, #75	; 0x4b
    7a16:	47a0      	blx	r4
    7a18:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    7a1a:	b005      	add	sp, #20
    7a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    7a1e:	684b      	ldr	r3, [r1, #4]
    7a20:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    7a22:	2e01      	cmp	r6, #1
    7a24:	d00c      	beq.n	7a40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
    7a26:	2401      	movs	r4, #1
    7a28:	e9cd 6402 	strd	r6, r4, [sp, #8]
    7a2c:	4b13      	ldr	r3, [pc, #76]	; (7a7c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    7a2e:	9301      	str	r3, [sp, #4]
    7a30:	4b13      	ldr	r3, [pc, #76]	; (7a80 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    7a32:	9300      	str	r3, [sp, #0]
    7a34:	6945      	ldr	r5, [r0, #20]
    7a36:	4a0f      	ldr	r2, [pc, #60]	; (7a74 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    7a38:	4912      	ldr	r1, [pc, #72]	; (7a84 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    7a3a:	234c      	movs	r3, #76	; 0x4c
    7a3c:	47a8      	blx	r5
    7a3e:	e7eb      	b.n	7a18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    7a40:	f7ff ff2c 	bl	789c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    7a44:	2800      	cmp	r0, #0
    7a46:	d0e8      	beq.n	7a1a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    7a48:	4621      	mov	r1, r4
    7a4a:	4628      	mov	r0, r5
    7a4c:	696f      	ldr	r7, [r5, #20]
    7a4e:	f7ff ff25 	bl	789c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    7a52:	2300      	movs	r3, #0
    7a54:	e9cd 0302 	strd	r0, r3, [sp, #8]
    7a58:	4b0b      	ldr	r3, [pc, #44]	; (7a88 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    7a5a:	9301      	str	r3, [sp, #4]
    7a5c:	4b0b      	ldr	r3, [pc, #44]	; (7a8c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    7a5e:	9300      	str	r3, [sp, #0]
    7a60:	4628      	mov	r0, r5
    7a62:	4a04      	ldr	r2, [pc, #16]	; (7a74 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    7a64:	4907      	ldr	r1, [pc, #28]	; (7a84 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    7a66:	234d      	movs	r3, #77	; 0x4d
    7a68:	47b8      	blx	r7
    7a6a:	4630      	mov	r0, r6
    7a6c:	e7d5      	b.n	7a1a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    7a6e:	bf00      	nop
    7a70:	000462cb 	.word	0x000462cb
    7a74:	00046229 	.word	0x00046229
    7a78:	00045a68 	.word	0x00045a68
    7a7c:	000463cb 	.word	0x000463cb
    7a80:	000462f8 	.word	0x000462f8
    7a84:	00045ac0 	.word	0x00045ac0
    7a88:	00046309 	.word	0x00046309
    7a8c:	00046313 	.word	0x00046313

00007a90 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    7a90:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    7a92:	4d05      	ldr	r5, [pc, #20]	; (7aa8 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
TfLiteRegistration Register_RESHAPE() {
    7a94:	4606      	mov	r6, r0
          /*version=*/0};
    7a96:	4604      	mov	r4, r0
    7a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7a9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    7aa4:	4630      	mov	r0, r6
    7aa6:	bd70      	pop	{r4, r5, r6, pc}
    7aa8:	00017040 	.word	0x00017040

00007aac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
    7aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ab0:	ed2d 8b04 	vpush	{d8-d9}
    7ab4:	4691      	mov	r9, r2
    7ab6:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7ab8:	680b      	ldr	r3, [r1, #0]

  for (int i = 0; i < outer_size; ++i) {
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    7aba:	ed9f 9a35 	vldr	s18, [pc, #212]	; 7b90 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe4>
                    const RuntimeShape& output_shape, float* output_data) {
    7abe:	b087      	sub	sp, #28
    7ac0:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7ac2:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7ac4:	4619      	mov	r1, r3
                    const RuntimeShape& output_shape, float* output_data) {
    7ac6:	9001      	str	r0, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7ac8:	4620      	mov	r0, r4
    7aca:	9203      	str	r2, [sp, #12]
    7acc:	9302      	str	r3, [sp, #8]
    7ace:	f00a fab8 	bl	12042 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    7ad2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7ad6:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    7ad8:	4619      	mov	r1, r3
    7ada:	4620      	mov	r0, r4
    7adc:	f00a f9be 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    7ae0:	2600      	movs	r6, #0
    7ae2:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
    7ae4:	46b0      	mov	r8, r6
      return __a;
    7ae6:	aa05      	add	r2, sp, #20
    7ae8:	45b8      	cmp	r8, r7
    7aea:	da4b      	bge.n	7b84 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd8>
    float max = std::numeric_limits<float>::lowest();
    7aec:	eb09 0b86 	add.w	fp, r9, r6, lsl #2
    7af0:	ed8d 9a05 	vstr	s18, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    7af4:	00b5      	lsls	r5, r6, #2
    float max = std::numeric_limits<float>::lowest();
    7af6:	4658      	mov	r0, fp
    for (int c = 0; c < depth; ++c) {
    7af8:	2100      	movs	r1, #0
    7afa:	42a1      	cmp	r1, r4
    7afc:	db23      	blt.n	7b46 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
    7afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
      max = std::max(max, input_data[i * depth + c]);
    }

    // Compute sum.
    float sum = 0.f;
    7b00:	ed9f 8a24 	vldr	s16, [pc, #144]	; 7b94 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
    7b04:	441d      	add	r5, r3
    for (int c = 0; c < depth; ++c) {
    7b06:	462b      	mov	r3, r5
    for (int c = 0; c < depth; ++c) {
    7b08:	f04f 0a00 	mov.w	sl, #0
    7b0c:	45a2      	cmp	sl, r4
    7b0e:	9302      	str	r3, [sp, #8]
    7b10:	da29      	bge.n	7b66 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xba>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
                                   static_cast<float>(params.beta));
    7b12:	9b01      	ldr	r3, [sp, #4]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    7b14:	ed9d 0a05 	vldr	s0, [sp, #20]
    7b18:	ecfb 8a01 	vldmia	fp!, {s17}
                                   static_cast<float>(params.beta));
    7b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    7b20:	ee78 8ac0 	vsub.f32	s17, s17, s0
                                   static_cast<float>(params.beta));
    7b24:	f7f8 ffba 	bl	a9c <__aeabi_d2f>
  { return __builtin_expf(__x); }
    7b28:	ee07 0a90 	vmov	s15, r0
    7b2c:	ee28 0aa7 	vmul.f32	s0, s17, s15
    7b30:	f008 f81e 	bl	fb70 <expf>
      output_data[i * depth + c] = exp_c;
    7b34:	9b02      	ldr	r3, [sp, #8]
      sum += exp_c;
    7b36:	ee38 8a00 	vadd.f32	s16, s16, s0
      output_data[i * depth + c] = exp_c;
    7b3a:	eca3 0a01 	vstmia	r3!, {s0}
    for (int c = 0; c < depth; ++c) {
    7b3e:	f10a 0a01 	add.w	sl, sl, #1
    7b42:	aa05      	add	r2, sp, #20
    7b44:	e7e2      	b.n	7b0c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x60>
      max = std::max(max, input_data[i * depth + c]);
    7b46:	4603      	mov	r3, r0
      if (__a < __b)
    7b48:	ed93 7a00 	vldr	s14, [r3]
    7b4c:	eddd 7a05 	vldr	s15, [sp, #20]
    7b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
    7b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
    7b58:	bfd8      	it	le
    7b5a:	4613      	movle	r3, r2
    7b5c:	3004      	adds	r0, #4
    7b5e:	681b      	ldr	r3, [r3, #0]
    7b60:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    7b62:	3101      	adds	r1, #1
    7b64:	e7c9      	b.n	7afa <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
    7b66:	2300      	movs	r3, #0
    7b68:	42a3      	cmp	r3, r4
    7b6a:	da07      	bge.n	7b7c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd0>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    7b6c:	ed95 7a00 	vldr	s14, [r5]
    7b70:	eec7 7a08 	vdiv.f32	s15, s14, s16
    for (int c = 0; c < depth; ++c) {
    7b74:	3301      	adds	r3, #1
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    7b76:	ece5 7a01 	vstmia	r5!, {s15}
    for (int c = 0; c < depth; ++c) {
    7b7a:	e7f5      	b.n	7b68 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbc>
  for (int i = 0; i < outer_size; ++i) {
    7b7c:	f108 0801 	add.w	r8, r8, #1
    7b80:	4426      	add	r6, r4
    7b82:	e7b1      	b.n	7ae8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
    7b84:	b007      	add	sp, #28
    7b86:	ecbd 8b04 	vpop	{d8-d9}
    7b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b8e:	bf00      	nop
    7b90:	ff7fffff 	.word	0xff7fffff
    7b94:	00000000 	.word	0x00000000

00007b98 <_ZN6tflite16Register_SOFTMAXEv>:
  }
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    7b98:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    7b9a:	4d05      	ldr	r5, [pc, #20]	; (7bb0 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
TfLiteRegistration Register_SOFTMAX() {
    7b9c:	4606      	mov	r6, r0
          /*version=*/0};
    7b9e:	4604      	mov	r4, r0
    7ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7ba4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    7bac:	4630      	mov	r0, r6
    7bae:	bd70      	pop	{r4, r5, r6, pc}
    7bb0:	00017060 	.word	0x00017060

00007bb4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
    7bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bb8:	b08f      	sub	sp, #60	; 0x3c
    7bba:	460c      	mov	r4, r1
    7bbc:	9205      	str	r2, [sp, #20]
    7bbe:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7bc0:	680b      	ldr	r3, [r1, #0]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7bc2:	9202      	str	r2, [sp, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7bc4:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7bc6:	4619      	mov	r1, r3
                         int16_t* output_data) {
    7bc8:	4680      	mov	r8, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7bca:	4620      	mov	r0, r4
    7bcc:	9301      	str	r3, [sp, #4]
    7bce:	f00a fa38 	bl	12042 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    7bd2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7bd6:	9003      	str	r0, [sp, #12]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    7bd8:	4619      	mov	r1, r3
    7bda:	4620      	mov	r0, r4
    7bdc:	f00a f93e 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    7be0:	2400      	movs	r4, #0
    7be2:	4683      	mov	fp, r0

  for (int i = 0; i < outer_size; ++i) {
    7be4:	9402      	str	r4, [sp, #8]
    7be6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    7bea:	4293      	cmp	r3, r2
    7bec:	f280 80cd 	bge.w	7d8a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d6>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    7bf0:	f248 0300 	movw	r3, #32768	; 0x8000
    7bf4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
    7bf8:	9b05      	ldr	r3, [sp, #20]
    7bfa:	eb03 0a44 	add.w	sl, r3, r4, lsl #1
    7bfe:	0066      	lsls	r6, r4, #1
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    7c00:	4651      	mov	r1, sl
    for (int c = 0; c < depth; ++c) {
    7c02:	2200      	movs	r2, #0
    7c04:	f10d 0726 	add.w	r7, sp, #38	; 0x26
    7c08:	455a      	cmp	r2, fp
    7c0a:	da0e      	bge.n	7c2a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    7c0c:	460b      	mov	r3, r1
      if (__a < __b)
    7c0e:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
    7c12:	f9b3 5000 	ldrsh.w	r5, [r3]
    7c16:	4285      	cmp	r5, r0
      return __a;
    7c18:	bfd8      	it	le
    7c1a:	463b      	movle	r3, r7
    7c1c:	3102      	adds	r1, #2
    7c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c22:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
    7c26:	3201      	adds	r2, #1
    7c28:	e7ee      	b.n	7c08 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x54>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    7c2a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    for (int c = 0; c < depth; ++c) {
    7c2c:	f04f 0900 	mov.w	r9, #0
    7c30:	4433      	add	r3, r6
    7c32:	9301      	str	r3, [sp, #4]
    7c34:	9304      	str	r3, [sp, #16]
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    7c36:	464d      	mov	r5, r9
  int32_t sym_scaled_diff = scaled_diff + 32767;
    7c38:	f647 77ff 	movw	r7, #32767	; 0x7fff
    for (int c = 0; c < depth; ++c) {
    7c3c:	45d9      	cmp	r9, fp
    7c3e:	da31      	bge.n	7ca4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xf0>
      input_diff, params.input_multiplier, params.input_left_shift);
    7c40:	e9d8 1602 	ldrd	r1, r6, [r8, #8]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    7c44:	f93a 3b02 	ldrsh.w	r3, [sl], #2
    7c48:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  int right_shift = shift > 0 ? 0 : -shift;
    7c4c:	2e00      	cmp	r6, #0
    7c4e:	eba3 0300 	sub.w	r3, r3, r0
  int left_shift = shift > 0 ? shift : 0;
    7c52:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    7c56:	fa03 f000 	lsl.w	r0, r3, r0
  int right_shift = shift > 0 ? 0 : -shift;
    7c5a:	bfd4      	ite	le
    7c5c:	4276      	negle	r6, r6
    7c5e:	2600      	movgt	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    7c60:	f7fe fe50 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    7c64:	4631      	mov	r1, r6
    7c66:	f7fe fe77 	bl	6958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    7c6a:	4b49      	ldr	r3, [pc, #292]	; (7d90 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1dc>)
    7c6c:	930d      	str	r3, [sp, #52]	; 0x34
  int32_t sym_scaled_diff = scaled_diff + 32767;
    7c6e:	4438      	add	r0, r7
      if (__a < __b)
    7c70:	4298      	cmp	r0, r3
      return __a;
    7c72:	bfac      	ite	ge
    7c74:	ab0b      	addge	r3, sp, #44	; 0x2c
	return __b;
    7c76:	ab0d      	addlt	r3, sp, #52	; 0x34
    7c78:	900b      	str	r0, [sp, #44]	; 0x2c
               static_cast<int32_t>(32767));
    7c7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    7c7e:	920c      	str	r2, [sp, #48]	; 0x30
      if (__b < __a)
    7c80:	681a      	ldr	r2, [r3, #0]
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
    7c82:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    7c86:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
    7c8a:	bfa8      	it	ge
    7c8c:	ab0c      	addge	r3, sp, #48	; 0x30
    7c8e:	f9b3 0000 	ldrsh.w	r0, [r3]
    7c92:	f00a fd8e 	bl	127b2 <_ZN6tflite26generic_int16_table_lookupEsPKs>
      exp_results_Q015[c] =
    7c96:	9b01      	ldr	r3, [sp, #4]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
    7c98:	4405      	add	r5, r0
      exp_results_Q015[c] =
    7c9a:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
    for (int c = 0; c < depth; ++c) {
    7c9e:	f109 0901 	add.w	r9, r9, #1
    7ca2:	e7cb      	b.n	7c3c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x88>
template <typename T>
int CountLeadingZeros(T integer_input) {
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
    7ca4:	fab5 f185 	clz	r1, r5

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    7ca8:	1e48      	subs	r0, r1, #1
    7caa:	17eb      	asrs	r3, r5, #31
    7cac:	f1a1 0721 	sub.w	r7, r1, #33	; 0x21
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    7cb0:	460e      	mov	r6, r1
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    7cb2:	4083      	lsls	r3, r0
    7cb4:	fa05 f707 	lsl.w	r7, r5, r7
    7cb8:	f1c1 0121 	rsb	r1, r1, #33	; 0x21
    7cbc:	fa25 f101 	lsr.w	r1, r5, r1
    7cc0:	433b      	orrs	r3, r7
    7cc2:	4085      	lsls	r5, r0
    7cc4:	f515 5500 	adds.w	r5, r5, #8192	; 0x2000
    7cc8:	ea43 0301 	orr.w	r3, r3, r1
    7ccc:	f143 0300 	adc.w	r3, r3, #0
         (1 << 13)) >>
    7cd0:	0bad      	lsrs	r5, r5, #14
    7cd2:	ea45 4583 	orr.w	r5, r5, r3, lsl #18
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    7cd6:	4b2e      	ldr	r3, [pc, #184]	; (7d90 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1dc>)
    7cd8:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    7cda:	f5a5 35c0 	sub.w	r5, r5, #98304	; 0x18000
      if (__a < __b)
    7cde:	429d      	cmp	r5, r3
      return __a;
    7ce0:	bfac      	ite	ge
    7ce2:	ab0a      	addge	r3, sp, #40	; 0x28
	return __b;
    7ce4:	ab0c      	addlt	r3, sp, #48	; 0x30
    7ce6:	950a      	str	r5, [sp, #40]	; 0x28
                 static_cast<int32_t>(32767)));
    7ce8:	f647 72ff 	movw	r2, #32767	; 0x7fff
    7cec:	920d      	str	r2, [sp, #52]	; 0x34
      if (__b < __a)
    7cee:	681a      	ldr	r2, [r3, #0]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
    7cf0:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
    7cf4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
    7cf8:	bfa8      	it	ge
    7cfa:	ab0d      	addge	r3, sp, #52	; 0x34
      return __a;
    7cfc:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
    7d00:	f9b3 0000 	ldrsh.w	r0, [r3]
    7d04:	f00a fd55 	bl	127b2 <_ZN6tflite26generic_int16_table_lookupEsPKs>
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
      uint8_t right_shift = 31 - headroom_plus_one;
    7d08:	f1c6 031f 	rsb	r3, r6, #31
    7d0c:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
    7d0e:	1e59      	subs	r1, r3, #1
    7d10:	2201      	movs	r2, #1
    7d12:	408a      	lsls	r2, r1
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    7d14:	4615      	mov	r5, r2
    7d16:	17d6      	asrs	r6, r2, #31
    7d18:	e9cd 5606 	strd	r5, r6, [sp, #24]
    for (int c = 0; c < depth; ++c) {
    7d1c:	2100      	movs	r1, #0
	return __b;
    7d1e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
	return __b;
    7d22:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    7d26:	4559      	cmp	r1, fp
    7d28:	da2a      	bge.n	7d80 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1cc>
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    7d2a:	9a04      	ldr	r2, [sp, #16]
    7d2c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    7d30:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
                        round) >>
    7d34:	f1c3 0c20 	rsb	ip, r3, #32
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    7d38:	fbc2 6780 	smlalbb	r6, r7, r2, r0
                        round) >>
    7d3c:	f1b3 0520 	subs.w	r5, r3, #32
    7d40:	fa26 f203 	lsr.w	r2, r6, r3
    7d44:	fa07 fc0c 	lsl.w	ip, r7, ip
    7d48:	ea42 020c 	orr.w	r2, r2, ip
    7d4c:	bf5c      	itt	pl
    7d4e:	fa47 f505 	asrpl.w	r5, r7, r5
    7d52:	432a      	orrpl	r2, r5
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
    7d54:	2500      	movs	r5, #0
      if (__a < __b)
    7d56:	42aa      	cmp	r2, r5
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    7d58:	920b      	str	r2, [sp, #44]	; 0x2c
	return __b;
    7d5a:	bfac      	ite	ge
    7d5c:	4652      	movge	r2, sl
    7d5e:	464a      	movlt	r2, r9
          std::min(std::max(result, static_cast<int32_t>(0)),
    7d60:	950c      	str	r5, [sp, #48]	; 0x30
                   static_cast<int32_t>(32767)));
    7d62:	f647 75ff 	movw	r5, #32767	; 0x7fff
    7d66:	950d      	str	r5, [sp, #52]	; 0x34
      if (__b < __a)
    7d68:	6815      	ldr	r5, [r2, #0]
    7d6a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
	return __b;
    7d6e:	bfa8      	it	ge
    7d70:	4672      	movge	r2, lr
      output_data[i * depth + c] = static_cast<int16_t>(
    7d72:	9d01      	ldr	r5, [sp, #4]
    7d74:	6812      	ldr	r2, [r2, #0]
    7d76:	f825 2b02 	strh.w	r2, [r5], #2
    for (int c = 0; c < depth; ++c) {
    7d7a:	3101      	adds	r1, #1
      output_data[i * depth + c] = static_cast<int16_t>(
    7d7c:	9501      	str	r5, [sp, #4]
    for (int c = 0; c < depth; ++c) {
    7d7e:	e7d2      	b.n	7d26 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x172>
  for (int i = 0; i < outer_size; ++i) {
    7d80:	9b02      	ldr	r3, [sp, #8]
    7d82:	3301      	adds	r3, #1
    7d84:	9302      	str	r3, [sp, #8]
    7d86:	445c      	add	r4, fp
    7d88:	e72d      	b.n	7be6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x32>
    }
  }
}
    7d8a:	b00f      	add	sp, #60	; 0x3c
    7d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d90:	ffff8000 	.word	0xffff8000

00007d94 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    7d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
    7d98:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
    7d9c:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    7d9e:	0160      	lsls	r0, r4, #5
    7da0:	f7ff fa68 	bl	7274 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    7da4:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    7da6:	4842      	ldr	r0, [pc, #264]	; (7eb0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    7da8:	f00a f97d 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7dac:	4601      	mov	r1, r0
    7dae:	4630      	mov	r0, r6
  return a - b;
    7db0:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    7db2:	f00a f97d 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    7db6:	f3c4 6b00 	ubfx	fp, r4, #24, #1
    7dba:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
    7dbe:	f10b 3bff 	add.w	fp, fp, #4294967295
    7dc2:	ea00 0909 	and.w	r9, r0, r9
    7dc6:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
    7dca:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    7dce:	4839      	ldr	r0, [pc, #228]	; (7eb4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    7dd0:	f00a f969 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7dd4:	4601      	mov	r1, r0
    7dd6:	4650      	mov	r0, sl
    7dd8:	f00a f96a 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    7ddc:	f3c4 6940 	ubfx	r9, r4, #25, #1
    7de0:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    7de4:	f109 39ff 	add.w	r9, r9, #4294967295
    7de8:	ea00 0008 	and.w	r0, r0, r8
    7dec:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
    7df0:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    7df4:	4830      	ldr	r0, [pc, #192]	; (7eb8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    7df6:	f00a f956 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7dfa:	4601      	mov	r1, r0
    7dfc:	4648      	mov	r0, r9
    7dfe:	f00a f957 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    7e02:	f3c4 6780 	ubfx	r7, r4, #26, #1
    7e06:	427e      	negs	r6, r7
  return a & b;
    7e08:	3f01      	subs	r7, #1
    7e0a:	4030      	ands	r0, r6
    7e0c:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    7e10:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    7e12:	482a      	ldr	r0, [pc, #168]	; (7ebc <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    7e14:	f00a f947 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7e18:	4601      	mov	r1, r0
    7e1a:	4638      	mov	r0, r7
    7e1c:	f00a f948 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    7e20:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
    7e24:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
    7e28:	f10b 3bff 	add.w	fp, fp, #4294967295
    7e2c:	ea00 000a 	and.w	r0, r0, sl
    7e30:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
    7e34:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    7e38:	4821      	ldr	r0, [pc, #132]	; (7ec0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    7e3a:	f00a f934 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7e3e:	4601      	mov	r1, r0
    7e40:	4658      	mov	r0, fp
    7e42:	f00a f935 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    7e46:	f3c4 7900 	ubfx	r9, r4, #28, #1
    7e4a:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    7e4e:	f109 39ff 	add.w	r9, r9, #4294967295
    7e52:	ea00 0008 	and.w	r0, r0, r8
    7e56:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
    7e5a:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    7e5e:	4819      	ldr	r0, [pc, #100]	; (7ec4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    7e60:	f00a f921 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7e64:	4601      	mov	r1, r0
    7e66:	4648      	mov	r0, r9
    7e68:	f00a f922 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    7e6c:	f3c4 7740 	ubfx	r7, r4, #29, #1
    7e70:	427e      	negs	r6, r7
  return a & b;
    7e72:	3f01      	subs	r7, #1
    7e74:	4030      	ands	r0, r6
    7e76:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    7e7a:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    7e7c:	20f2      	movs	r0, #242	; 0xf2
    7e7e:	f00a f912 	bl	120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7e82:	4601      	mov	r1, r0
    7e84:	4638      	mov	r0, r7
    7e86:	f00a f913 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    7e8a:	f3c4 7480 	ubfx	r4, r4, #30, #1
    7e8e:	4263      	negs	r3, r4
  return a & b;
    7e90:	4018      	ands	r0, r3
    7e92:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
    7e94:	fab5 f385 	clz	r3, r5
  return a & b;
    7e98:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
    7e9a:	095b      	lsrs	r3, r3, #5
  return a ^ b;
    7e9c:	4044      	eors	r4, r0
  return a & b;
    7e9e:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
    7ea0:	425b      	negs	r3, r3
  return a & b;
    7ea2:	4020      	ands	r0, r4
    7ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    7ea8:	4058      	eors	r0, r3
    7eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7eae:	bf00      	nop
    7eb0:	63afbe7b 	.word	0x63afbe7b
    7eb4:	4da2cbf2 	.word	0x4da2cbf2
    7eb8:	2f16ac6c 	.word	0x2f16ac6c
    7ebc:	1152aaa4 	.word	0x1152aaa4
    7ec0:	02582ab7 	.word	0x02582ab7
    7ec4:	000afe11 	.word	0x000afe11

00007ec8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    7ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ecc:	4614      	mov	r4, r2
    7ece:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7ed0:	680b      	ldr	r3, [r1, #0]
  const int diff_min = params.diff_min;
    7ed2:	f8d0 b018 	ldr.w	fp, [r0, #24]
inline void Softmax(const SoftmaxParams& params,
    7ed6:	b08b      	sub	sp, #44	; 0x2c
    7ed8:	460d      	mov	r5, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7eda:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7edc:	4619      	mov	r1, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
    7ede:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7ee2:	4628      	mov	r0, r5
    7ee4:	9202      	str	r2, [sp, #8]
    7ee6:	9301      	str	r3, [sp, #4]
    7ee8:	f00a f8ab 	bl	12042 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    7eec:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7ef0:	9000      	str	r0, [sp, #0]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    7ef2:	4619      	mov	r1, r3
    7ef4:	4628      	mov	r0, r5
    7ef6:	f009 ffb1 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    7efa:	9e14      	ldr	r6, [sp, #80]	; 0x50
    7efc:	0043      	lsls	r3, r0, #1
    7efe:	4605      	mov	r5, r0
    7f00:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    7f02:	2700      	movs	r7, #0
    7f04:	9b00      	ldr	r3, [sp, #0]
    7f06:	429f      	cmp	r7, r3
    7f08:	da79      	bge.n	7ffe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    7f0a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    7f0e:	f88d 3017 	strb.w	r3, [sp, #23]
    7f12:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
    7f14:	2200      	movs	r2, #0
      return __a;
    7f16:	f10d 0e17 	add.w	lr, sp, #23
    7f1a:	42aa      	cmp	r2, r5
    7f1c:	da0e      	bge.n	7f3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    7f1e:	460b      	mov	r3, r1
      if (__a < __b)
    7f20:	f99d 0017 	ldrsb.w	r0, [sp, #23]
    7f24:	f993 c000 	ldrsb.w	ip, [r3]
    7f28:	4584      	cmp	ip, r0
      return __a;
    7f2a:	bfd8      	it	le
    7f2c:	4673      	movle	r3, lr
    7f2e:	3101      	adds	r1, #1
    7f30:	f993 3000 	ldrsb.w	r3, [r3]
    7f34:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int c = 0; c < depth; ++c) {
    7f38:	3201      	adds	r2, #1
    7f3a:	e7ee      	b.n	7f1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x52>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    7f3c:	f04f 0800 	mov.w	r8, #0
    7f40:	4622      	mov	r2, r4
    for (int c = 0; c < depth; ++c) {
    7f42:	4643      	mov	r3, r8
    7f44:	42ab      	cmp	r3, r5
    7f46:	da17      	bge.n	7f78 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xb0>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    7f48:	f912 0b01 	ldrsb.w	r0, [r2], #1
    7f4c:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32_t input_diff =
    7f50:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    7f52:	4583      	cmp	fp, r0
    7f54:	dc0e      	bgt.n	7f74 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    7f56:	4649      	mov	r1, r9
    7f58:	fa00 f00a 	lsl.w	r0, r0, sl
    7f5c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7f60:	f7fe fcd0 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    7f64:	f7ff ff16 	bl	7d94 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    7f68:	210c      	movs	r1, #12
    7f6a:	f7fe fcf5 	bl	6958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    7f6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    7f72:	4480      	add	r8, r0
    for (int c = 0; c < depth; ++c) {
    7f74:	3301      	adds	r3, #1
    7f76:	e7e5      	b.n	7f44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    7f78:	aa06      	add	r2, sp, #24
    7f7a:	4640      	mov	r0, r8
    7f7c:	210c      	movs	r1, #12
    7f7e:	f009 ffc0 	bl	11f02 <_ZN6tflite13GetReciprocalEiiPi>
    7f82:	4622      	mov	r2, r4
    7f84:	4680      	mov	r8, r0
    for (int c = 0; c < depth; ++c) {
    7f86:	2300      	movs	r3, #0
    7f88:	42ab      	cmp	r3, r5
    7f8a:	da33      	bge.n	7ff4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    7f8c:	f912 0b01 	ldrsb.w	r0, [r2], #1
    7f90:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32_t input_diff =
    7f94:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    7f96:	4583      	cmp	fp, r0
    7f98:	dc29      	bgt.n	7fee <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    7f9a:	4649      	mov	r1, r9
    7f9c:	fa00 f00a 	lsl.w	r0, r0, sl
    7fa0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7fa4:	f7fe fcae 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    7fa8:	f7ff fef4 	bl	7d94 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    7fac:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    7fae:	4640      	mov	r0, r8
    7fb0:	f00a f87e 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
    7fb4:	9906      	ldr	r1, [sp, #24]
    7fb6:	310f      	adds	r1, #15
    7fb8:	f7fe fcce 	bl	6958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            unsat_output +
    7fbc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
    7fc0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      return __a;
    7fc4:	bfb4      	ite	lt
    7fc6:	a907      	addlt	r1, sp, #28
	return __b;
    7fc8:	a908      	addge	r1, sp, #32
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    7fca:	f647 73ff 	movw	r3, #32767	; 0x7fff
        const int32_t shifted_output =
    7fce:	9007      	str	r0, [sp, #28]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    7fd0:	9308      	str	r3, [sp, #32]
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    7fd2:	480c      	ldr	r0, [pc, #48]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7fd4:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
    7fd6:	6808      	ldr	r0, [r1, #0]
    7fd8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
    7fdc:	bfb8      	it	lt
    7fde:	a909      	addlt	r1, sp, #36	; 0x24
      if (__b < __a)
    7fe0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    7fe4:	6809      	ldr	r1, [r1, #0]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    7fe6:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
    7fea:	3301      	adds	r3, #1
    7fec:	e7cc      	b.n	7f88 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    7fee:	f248 0100 	movw	r1, #32768	; 0x8000
    7ff2:	e7f8      	b.n	7fe6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
  for (int i = 0; i < outer_size; ++i) {
    7ff4:	9b01      	ldr	r3, [sp, #4]
    7ff6:	3701      	adds	r7, #1
    7ff8:	442c      	add	r4, r5
    7ffa:	441e      	add	r6, r3
    7ffc:	e782      	b.n	7f04 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
    7ffe:	b00b      	add	sp, #44	; 0x2c
    8000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8004:	ffff8000 	.word	0xffff8000

00008008 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    8008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    800c:	460c      	mov	r4, r1
    800e:	b0a0      	sub	sp, #128	; 0x80
  TFLITE_DCHECK(context != nullptr);
    8010:	4680      	mov	r8, r0
    8012:	b908      	cbnz	r0, 8018 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
    8014:	f00e f818 	bl	16048 <abort>
  TFLITE_DCHECK(node != nullptr);
    8018:	2900      	cmp	r1, #0
    801a:	d0fb      	beq.n	8014 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    801c:	680a      	ldr	r2, [r1, #0]
    801e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    8020:	6851      	ldr	r1, [r2, #4]
    8022:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
    8024:	6862      	ldr	r2, [r4, #4]
    8026:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    802a:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
    802c:	4607      	mov	r7, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
    802e:	4640      	mov	r0, r8
    8030:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
    8032:	6924      	ldr	r4, [r4, #16]
    8034:	4605      	mov	r5, r0
    8036:	2c00      	cmp	r4, #0
    8038:	d0ec      	beq.n	8014 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const SoftmaxParams data =
    803a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    803c:	ae12      	add	r6, sp, #72	; 0x48
    803e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8042:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8046:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8048:	e894 0003 	ldmia.w	r4, {r0, r1}
    804c:	e886 0003 	stmia.w	r6, {r0, r1}
  switch (input->type) {
    8050:	7a38      	ldrb	r0, [r7, #8]
    8052:	1e43      	subs	r3, r0, #1
    8054:	2b08      	cmp	r3, #8
    8056:	f200 808d 	bhi.w	8174 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    805a:	e8df f003 	tbb	[pc, r3]
    805e:	8b05      	.short	0x8b05
    8060:	8b8b8b22 	.word	0x8b8b8b22
    8064:	8b22      	.short	0x8b22
    8066:	22          	.byte	0x22
    8067:	00          	.byte	0x00
          data, tflite::micro::GetTensorShape(input),
    8068:	4639      	mov	r1, r7
    806a:	a806      	add	r0, sp, #24
    806c:	f009 ffbf 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8070:	683a      	ldr	r2, [r7, #0]
    8072:	9205      	str	r2, [sp, #20]
          tflite::micro::GetTensorShape(output),
    8074:	4629      	mov	r1, r5
    8076:	a80c      	add	r0, sp, #48	; 0x30
    8078:	f009 ffb9 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    807c:	9a05      	ldr	r2, [sp, #20]
    807e:	b105      	cbz	r5, 8082 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    8080:	682d      	ldr	r5, [r5, #0]
      tflite::reference_ops::Softmax(
    8082:	9500      	str	r5, [sp, #0]
    8084:	ab0c      	add	r3, sp, #48	; 0x30
    8086:	a906      	add	r1, sp, #24
    8088:	a812      	add	r0, sp, #72	; 0x48
    808a:	f7ff fd0f 	bl	7aac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      const auto output_shape = tflite::micro::GetTensorShape(output);
    808e:	a80c      	add	r0, sp, #48	; 0x30
    8090:	f009 fe58 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
    8094:	a806      	add	r0, sp, #24
    8096:	f009 fe55 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    809a:	2000      	movs	r0, #0
}
    809c:	b020      	add	sp, #128	; 0x80
    809e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (input->type == kTfLiteUInt8) {
    80a2:	2803      	cmp	r0, #3
    80a4:	d117      	bne.n	80d6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
        op_data, tflite::micro::GetTensorShape(input),
    80a6:	4639      	mov	r1, r7
    80a8:	a80c      	add	r0, sp, #48	; 0x30
    80aa:	f009 ffa0 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    80ae:	683a      	ldr	r2, [r7, #0]
    80b0:	9205      	str	r2, [sp, #20]
        tflite::micro::GetTensorShape(output),
    80b2:	4629      	mov	r1, r5
    80b4:	a806      	add	r0, sp, #24
    80b6:	f009 ff9a 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    80ba:	9a05      	ldr	r2, [sp, #20]
    80bc:	b105      	cbz	r5, 80c0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>
    80be:	682d      	ldr	r5, [r5, #0]
    tflite::reference_ops::Softmax(
    80c0:	9500      	str	r5, [sp, #0]
    80c2:	ab06      	add	r3, sp, #24
    80c4:	a90c      	add	r1, sp, #48	; 0x30
    80c6:	a812      	add	r0, sp, #72	; 0x48
    80c8:	f00a fb86 	bl	127d8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
    80cc:	a806      	add	r0, sp, #24
    80ce:	f009 fe39 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
    80d2:	a80c      	add	r0, sp, #48	; 0x30
    80d4:	e7df      	b.n	8096 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8e>
  } else if (input->type == kTfLiteInt8) {
    80d6:	2809      	cmp	r0, #9
    80d8:	d138      	bne.n	814c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x144>
    if (output->type == kTfLiteInt16) {
    80da:	7a2b      	ldrb	r3, [r5, #8]
    80dc:	2b07      	cmp	r3, #7
          op_data, tflite::micro::GetTensorShape(input),
    80de:	4639      	mov	r1, r7
    if (output->type == kTfLiteInt16) {
    80e0:	d111      	bne.n	8106 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xfe>
          op_data, tflite::micro::GetTensorShape(input),
    80e2:	a80c      	add	r0, sp, #48	; 0x30
    80e4:	f009 ff83 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    80e8:	683a      	ldr	r2, [r7, #0]
    80ea:	9205      	str	r2, [sp, #20]
          tflite::micro::GetTensorShape(output),
    80ec:	4629      	mov	r1, r5
    80ee:	a806      	add	r0, sp, #24
    80f0:	f009 ff7d 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    80f4:	682b      	ldr	r3, [r5, #0]
    80f6:	9300      	str	r3, [sp, #0]
    80f8:	9a05      	ldr	r2, [sp, #20]
    80fa:	ab06      	add	r3, sp, #24
    80fc:	a90c      	add	r1, sp, #48	; 0x30
    80fe:	a812      	add	r0, sp, #72	; 0x48
    8100:	f7ff fee2 	bl	7ec8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    8104:	e7e2      	b.n	80cc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
    8106:	a806      	add	r0, sp, #24
    8108:	f009 ff71 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
    810c:	4629      	mov	r1, r5
    810e:	a80c      	add	r0, sp, #48	; 0x30
    8110:	f009 ff6d 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
    8114:	9b06      	ldr	r3, [sp, #24]
    8116:	3b01      	subs	r3, #1
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8118:	aa0c      	add	r2, sp, #48	; 0x30
    811a:	4619      	mov	r1, r3
    811c:	a806      	add	r0, sp, #24
    811e:	9305      	str	r3, [sp, #20]
    8120:	f009 ff8f 	bl	12042 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8124:	9b05      	ldr	r3, [sp, #20]
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8126:	4604      	mov	r4, r0
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8128:	aa0c      	add	r2, sp, #48	; 0x30
    812a:	4619      	mov	r1, r3
    812c:	a806      	add	r0, sp, #24
    812e:	f009 fe95 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
    8132:	682b      	ldr	r3, [r5, #0]
    8134:	9302      	str	r3, [sp, #8]
    8136:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8138:	9301      	str	r3, [sp, #4]
    813a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    813c:	9300      	str	r3, [sp, #0]
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    813e:	4602      	mov	r2, r0
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
    8140:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8142:	6838      	ldr	r0, [r7, #0]
    8144:	4621      	mov	r1, r4
    8146:	f000 fca3 	bl	8a90 <arm_softmax_s8>
    814a:	e7a0      	b.n	808e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
        op_data, tflite::micro::GetTensorShape(input),
    814c:	4639      	mov	r1, r7
    814e:	a80c      	add	r0, sp, #48	; 0x30
    8150:	f009 ff4d 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    8154:	683a      	ldr	r2, [r7, #0]
    8156:	9205      	str	r2, [sp, #20]
        tflite::micro::GetTensorShape(output),
    8158:	4629      	mov	r1, r5
    815a:	a806      	add	r0, sp, #24
    815c:	f009 ff47 	bl	11fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8160:	9a05      	ldr	r2, [sp, #20]
    8162:	b105      	cbz	r5, 8166 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15e>
    8164:	682d      	ldr	r5, [r5, #0]
    tflite::reference_ops::SoftmaxInt16(
    8166:	9500      	str	r5, [sp, #0]
    8168:	ab06      	add	r3, sp, #24
    816a:	a90c      	add	r1, sp, #48	; 0x30
    816c:	a812      	add	r0, sp, #72	; 0x48
    816e:	f7ff fd21 	bl	7bb4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
    8172:	e7ab      	b.n	80cc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    8174:	f8d8 4014 	ldr.w	r4, [r8, #20]
    8178:	f001 f97c 	bl	9474 <TfLiteTypeGetName>
    817c:	7a3b      	ldrb	r3, [r7, #8]
    817e:	4903      	ldr	r1, [pc, #12]	; (818c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x184>)
    8180:	4602      	mov	r2, r0
    8182:	4640      	mov	r0, r8
    8184:	47a0      	blx	r4
      return kTfLiteError;
    8186:	2001      	movs	r0, #1
    8188:	e788      	b.n	809c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x94>
    818a:	bf00      	nop
    818c:	00045e39 	.word	0x00045e39

00008190 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
    8190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
    8194:	f102 39ff 	add.w	r9, r2, #4294967295
    8198:	ee07 9a90 	vmov	s15, r9
    819c:	ee30 7ac0 	vsub.f32	s14, s1, s0
    81a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    const int num) {
    81a4:	ed2d 8b0c 	vpush	{d8-d13}
  float step = (max - min) / (num - 1);
    81a8:	eec7 ca27 	vdiv.f32	s25, s14, s15
                    const int num) {
    81ac:	b085      	sub	sp, #20
    81ae:	4604      	mov	r4, r0
    81b0:	460f      	mov	r7, r1
    81b2:	4615      	mov	r5, r2
    81b4:	f1a1 0802 	sub.w	r8, r1, #2
  float half_step = step / 2.0f;
  for (int i = 0; i < num - 1; i++) {
    81b8:	2600      	movs	r6, #0
  float half_step = step / 2.0f;
    81ba:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
    81be:	ee2c caa9 	vmul.f32	s24, s25, s19
  for (int i = 0; i < num - 1; i++) {
    81c2:	eddf 8a48 	vldr	s17, [pc, #288]	; 82e4 <_ZN6tflite7gen_lutEPFffEffPsi+0x154>
    81c6:	ed9f ba48 	vldr	s22, [pc, #288]	; 82e8 <_ZN6tflite7gen_lutEPFffEffPsi+0x158>
    81ca:	eddf aa48 	vldr	s21, [pc, #288]	; 82ec <_ZN6tflite7gen_lutEPFffEffPsi+0x15c>
                    const int num) {
    81ce:	eeb0 9a40 	vmov.f32	s18, s0
    81d2:	eef0 ba60 	vmov.f32	s23, s1
  for (int i = 0; i < num - 1; i++) {
    81d6:	45b1      	cmp	r9, r6
    81d8:	dd58      	ble.n	828c <_ZN6tflite7gen_lutEPFffEffPsi+0xfc>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    81da:	ee07 6a90 	vmov	s15, r6
    81de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    81e2:	eeb0 da49 	vmov.f32	s26, s18
    81e6:	eea7 daac 	vfma.f32	s26, s15, s25
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    81ea:	3601      	adds	r6, #1
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    81ec:	eeb0 0a4d 	vmov.f32	s0, s26
    81f0:	47a0      	blx	r4
    81f2:	ee20 0a28 	vmul.f32	s0, s0, s17
    81f6:	f00a fb97 	bl	12928 <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    81fa:	ee07 6a90 	vmov	s15, r6
    81fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    8202:	eeb0 8a40 	vmov.f32	s16, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    8206:	eeb0 0a49 	vmov.f32	s0, s18
    820a:	eea7 0aac 	vfma.f32	s0, s15, s25
    820e:	47a0      	blx	r4
    8210:	eeb0 aa40 	vmov.f32	s20, s0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    8214:	eeb0 0a4d 	vmov.f32	s0, s26
    8218:	47a0      	blx	r4
    821a:	ee20 0a28 	vmul.f32	s0, s0, s17
    821e:	f00a fb83 	bl	12928 <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    8222:	eeaa 0a28 	vfma.f32	s0, s20, s17
    8226:	ee20 0a29 	vmul.f32	s0, s0, s19
    822a:	f00a fb7d 	bl	12928 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    822e:	eeb0 aa40 	vmov.f32	s20, s0
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    8232:	ee3d 0a0c 	vadd.f32	s0, s26, s24
    8236:	47a0      	blx	r4
    8238:	ee20 0a28 	vmul.f32	s0, s0, s17
    823c:	f00a fb74 	bl	12928 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    float midpoint_err = midpoint_interp_val - midpoint_val;
    8240:	ee3a 0a40 	vsub.f32	s0, s20, s0
    float bias = TfLiteRound(midpoint_err / 2.0f);
    8244:	ee20 0a29 	vmul.f32	s0, s0, s19
    8248:	f00a fb6e 	bl	12928 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    824c:	ee78 7a40 	vsub.f32	s15, s16, s0
    8250:	ed8d ba02 	vstr	s22, [sp, #8]
      if (__a < __b)
    8254:	eef4 7acb 	vcmpe.f32	s15, s22
    8258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
    825c:	bf4c      	ite	mi
    825e:	ab02      	addmi	r3, sp, #8
      return __a;
    8260:	ab01      	addpl	r3, sp, #4
    8262:	edcd 7a01 	vstr	s15, [sp, #4]
      if (__b < __a)
    8266:	edd3 7a00 	vldr	s15, [r3]
                               32767.0f);
    826a:	edcd aa03 	vstr	s21, [sp, #12]
    826e:	eef4 7aea 	vcmpe.f32	s15, s21
    8272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
    8276:	bfc8      	it	gt
    8278:	ab03      	addgt	r3, sp, #12
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    827a:	edd3 7a00 	vldr	s15, [r3]
    827e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8282:	ee17 3a90 	vmov	r3, s15
    8286:	f828 3f02 	strh.w	r3, [r8, #2]!
  for (int i = 0; i < num - 1; i++) {
    828a:	e7a4      	b.n	81d6 <_ZN6tflite7gen_lutEPFffEffPsi+0x46>
  }
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    828c:	eeb0 0a6b 	vmov.f32	s0, s23
    8290:	47a0      	blx	r4
    8292:	ee20 0a28 	vmul.f32	s0, s0, s17
    8296:	f00a fb47 	bl	12928 <_ZN6tflite11TfLiteRoundIfEET_S1_>
      if (__a < __b)
    829a:	eeb4 0acb 	vcmpe.f32	s0, s22
    829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
    82a2:	bf4c      	ite	mi
    82a4:	ab02      	addmi	r3, sp, #8
      return __a;
    82a6:	ab01      	addpl	r3, sp, #4
    82a8:	ed8d 0a01 	vstr	s0, [sp, #4]
    82ac:	ed8d ba02 	vstr	s22, [sp, #8]
      if (__b < __a)
    82b0:	edd3 7a00 	vldr	s15, [r3]
    82b4:	edcd aa03 	vstr	s21, [sp, #12]
    82b8:	eef4 7aea 	vcmpe.f32	s15, s21
    82bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
    82c0:	bfc8      	it	gt
    82c2:	ab03      	addgt	r3, sp, #12
  table[num - 1] = std::min<float>(
    82c4:	edd3 7a00 	vldr	s15, [r3]
    82c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    82cc:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
    82d0:	ee17 3a90 	vmov	r3, s15
    82d4:	3a01      	subs	r2, #1
    82d6:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
}
    82da:	b005      	add	sp, #20
    82dc:	ecbd 8b0c 	vpop	{d8-d13}
    82e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    82e4:	47000000 	.word	0x47000000
    82e8:	c7000000 	.word	0xc7000000
    82ec:	46fffe00 	.word	0x46fffe00

000082f0 <arm_cfft_init_f32>:

        /*  Initialise the FFT length */
        S->fftLen = fftLen;

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
    82f0:	2300      	movs	r3, #0


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
    82f2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        S->fftLen = fftLen;
    82f6:	8001      	strh	r1, [r0, #0]
        S->pTwiddle = NULL;
    82f8:	6043      	str	r3, [r0, #4]
        switch (S->fftLen) {
    82fa:	d02a      	beq.n	8352 <arm_cfft_init_f32+0x62>
    82fc:	d80d      	bhi.n	831a <arm_cfft_init_f32+0x2a>
    82fe:	2940      	cmp	r1, #64	; 0x40
    8300:	d029      	beq.n	8356 <arm_cfft_init_f32+0x66>
    8302:	d806      	bhi.n	8312 <arm_cfft_init_f32+0x22>
    8304:	2910      	cmp	r1, #16
    8306:	d02a      	beq.n	835e <arm_cfft_init_f32+0x6e>
    8308:	2920      	cmp	r1, #32
    830a:	d026      	beq.n	835a <arm_cfft_init_f32+0x6a>
    830c:	f04f 33ff 	mov.w	r3, #4294967295
    8310:	e019      	b.n	8346 <arm_cfft_init_f32+0x56>
    8312:	2980      	cmp	r1, #128	; 0x80
    8314:	d1fa      	bne.n	830c <arm_cfft_init_f32+0x1c>
            break;
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
    8316:	4a13      	ldr	r2, [pc, #76]	; (8364 <arm_cfft_init_f32+0x74>)
    8318:	e00f      	b.n	833a <arm_cfft_init_f32+0x4a>
        switch (S->fftLen) {
    831a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    831e:	d014      	beq.n	834a <arm_cfft_init_f32+0x5a>
    8320:	d807      	bhi.n	8332 <arm_cfft_init_f32+0x42>
    8322:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8326:	d012      	beq.n	834e <arm_cfft_init_f32+0x5e>
    8328:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    832c:	d1ee      	bne.n	830c <arm_cfft_init_f32+0x1c>
            FFTINIT(f32,1024);
    832e:	4a0e      	ldr	r2, [pc, #56]	; (8368 <arm_cfft_init_f32+0x78>)
    8330:	e003      	b.n	833a <arm_cfft_init_f32+0x4a>
        switch (S->fftLen) {
    8332:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    8336:	d1e9      	bne.n	830c <arm_cfft_init_f32+0x1c>
            FFTINIT(f32,4096);
    8338:	4a0c      	ldr	r2, [pc, #48]	; (836c <arm_cfft_init_f32+0x7c>)
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
    833a:	8991      	ldrh	r1, [r2, #12]
    833c:	8181      	strh	r1, [r0, #12]
    833e:	6891      	ldr	r1, [r2, #8]
    8340:	6852      	ldr	r2, [r2, #4]
    8342:	6081      	str	r1, [r0, #8]
    8344:	6042      	str	r2, [r0, #4]
            break;
        }


        return (status);
}
    8346:	4618      	mov	r0, r3
    8348:	4770      	bx	lr
            FFTINIT(f32,2048);
    834a:	4a09      	ldr	r2, [pc, #36]	; (8370 <arm_cfft_init_f32+0x80>)
    834c:	e7f5      	b.n	833a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,512);
    834e:	4a09      	ldr	r2, [pc, #36]	; (8374 <arm_cfft_init_f32+0x84>)
    8350:	e7f3      	b.n	833a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,256);
    8352:	4a09      	ldr	r2, [pc, #36]	; (8378 <arm_cfft_init_f32+0x88>)
    8354:	e7f1      	b.n	833a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,64);
    8356:	4a09      	ldr	r2, [pc, #36]	; (837c <arm_cfft_init_f32+0x8c>)
    8358:	e7ef      	b.n	833a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,32);
    835a:	4a09      	ldr	r2, [pc, #36]	; (8380 <arm_cfft_init_f32+0x90>)
    835c:	e7ed      	b.n	833a <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,16);
    835e:	4a09      	ldr	r2, [pc, #36]	; (8384 <arm_cfft_init_f32+0x94>)
    8360:	e7eb      	b.n	833a <arm_cfft_init_f32+0x4a>
    8362:	bf00      	nop
    8364:	0002fae4 	.word	0x0002fae4
    8368:	0002fad4 	.word	0x0002fad4
    836c:	0002fb34 	.word	0x0002fb34
    8370:	0002fb04 	.word	0x0002fb04
    8374:	0002fb44 	.word	0x0002fb44
    8378:	0002fb14 	.word	0x0002fb14
    837c:	0002fb54 	.word	0x0002fb54
    8380:	0002fb24 	.word	0x0002fb24
    8384:	0002faf4 	.word	0x0002faf4

00008388 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
    8388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    838c:	ed2d 8b10 	vpush	{d8-d15}
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
    8390:	eddf 4ab2 	vldr	s9, [pc, #712]	; 865c <arm_radix8_butterfly_f32+0x2d4>
{
    8394:	b08f      	sub	sp, #60	; 0x3c
    8396:	eeb0 4a64 	vmov.f32	s8, s9
    839a:	9001      	str	r0, [sp, #4]
    839c:	9103      	str	r1, [sp, #12]
    839e:	920d      	str	r2, [sp, #52]	; 0x34
    83a0:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
    83a2:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
    83a4:	9b02      	ldr	r3, [sp, #8]
    83a6:	08d9      	lsrs	r1, r3, #3
      i1 = 0;
    83a8:	00da      	lsls	r2, r3, #3
    83aa:	014b      	lsls	r3, r1, #5
    83ac:	9308      	str	r3, [sp, #32]
    83ae:	9b01      	ldr	r3, [sp, #4]
    83b0:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    83b4:	00cb      	lsls	r3, r1, #3
    83b6:	9307      	str	r3, [sp, #28]
    83b8:	f06f 0317 	mvn.w	r3, #23
    83bc:	434b      	muls	r3, r1
    83be:	2018      	movs	r0, #24
    83c0:	fb00 f401 	mul.w	r4, r0, r1
    83c4:	eb0c 0703 	add.w	r7, ip, r3
    83c8:	2028      	movs	r0, #40	; 0x28
    83ca:	940c      	str	r4, [sp, #48]	; 0x30
    83cc:	eb07 1641 	add.w	r6, r7, r1, lsl #5
    83d0:	fb00 f401 	mul.w	r4, r0, r1
    83d4:	2030      	movs	r0, #48	; 0x30
    83d6:	18f5      	adds	r5, r6, r3
    83d8:	9406      	str	r4, [sp, #24]
    83da:	fb00 fb01 	mul.w	fp, r0, r1
    83de:	010c      	lsls	r4, r1, #4
    83e0:	2038      	movs	r0, #56	; 0x38
    83e2:	9405      	str	r4, [sp, #20]
    83e4:	fb00 fa01 	mul.w	sl, r0, r1
    83e8:	eb05 1441 	add.w	r4, r5, r1, lsl #5
    83ec:	9801      	ldr	r0, [sp, #4]
    83ee:	4423      	add	r3, r4
    83f0:	eb03 1841 	add.w	r8, r3, r1, lsl #5
    83f4:	f100 0e04 	add.w	lr, r0, #4
    83f8:	f04f 0900 	mov.w	r9, #0
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
    83fc:	ed1e 7a01 	vldr	s14, [lr, #-4]
    8400:	eddc 7a00 	vldr	s15, [ip]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
    8404:	edd7 5a00 	vldr	s11, [r7]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8408:	ed98 5a00 	vldr	s10, [r8]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
    840c:	edd5 3a00 	vldr	s7, [r5]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8410:	edd3 1a00 	vldr	s3, [r3]
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
    8414:	ee37 3a67 	vsub.f32	s6, s14, s15
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
    8418:	ee77 6a27 	vadd.f32	s13, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
    841c:	edd6 7a00 	vldr	s15, [r6]
    8420:	ee35 7aa7 	vadd.f32	s14, s11, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
    8424:	ee75 5ae7 	vsub.f32	s11, s11, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
    8428:	edd4 7a00 	vldr	s15, [r4]
    842c:	ee33 6aa7 	vadd.f32	s12, s7, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
    8430:	ee73 3ae7 	vsub.f32	s7, s7, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8434:	ee71 7a85 	vadd.f32	s15, s3, s10
         t1 = r1 - r3;
    8438:	ee76 0ac6 	vsub.f32	s1, s13, s12
         r3 = r2 - r4;
    843c:	ee37 1a67 	vsub.f32	s2, s14, s15
         r1 = r1 + r3;
    8440:	ee76 6a86 	vadd.f32	s13, s13, s12
         r2 = r2 + r4;
    8444:	ee77 7a27 	vadd.f32	s15, s14, s15
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
    8448:	ee71 1ac5 	vsub.f32	s3, s3, s10
         pSrc[2 * i1] = r1 + r2;
    844c:	ee36 7aa7 	vadd.f32	s14, s13, s15
         pSrc[2 * i5] = r1 - r2;
    8450:	ee76 6ae7 	vsub.f32	s13, s13, s15
         pSrc[2 * i1] = r1 + r2;
    8454:	ed0e 7a01 	vstr	s14, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
    8458:	edcc 6a00 	vstr	s13, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    845c:	ed9e 6a00 	vldr	s12, [lr]
    8460:	eddc 7a01 	vldr	s15, [ip, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    8464:	ed96 7a01 	vldr	s14, [r6, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    8468:	edd5 6a01 	vldr	s13, [r5, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    846c:	ee36 5a27 	vadd.f32	s10, s12, s15
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
    8470:	ee76 2a67 	vsub.f32	s5, s12, s15
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    8474:	ed97 6a01 	vldr	s12, [r7, #4]
    8478:	ee76 7a07 	vadd.f32	s15, s12, s14
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
    847c:	ee36 6a47 	vsub.f32	s12, s12, s14
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    8480:	ed94 7a01 	vldr	s14, [r4, #4]
    8484:	ee36 0a87 	vadd.f32	s0, s13, s14
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
    8488:	ee36 2ac7 	vsub.f32	s4, s13, s14
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    848c:	ed98 7a01 	vldr	s14, [r8, #4]
    8490:	edd3 6a01 	vldr	s13, [r3, #4]
    8494:	ee36 8a87 	vadd.f32	s16, s13, s14
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
    8498:	ee76 6ac7 	vsub.f32	s13, s13, s14
         t2 = r1 - s3;
    849c:	ee35 7a40 	vsub.f32	s14, s10, s0
         r1 = r1 + s3;
    84a0:	ee35 5a00 	vadd.f32	s10, s10, s0
         s3 = r2 - r4;
    84a4:	ee37 0ac8 	vsub.f32	s0, s15, s16
         r2 = r2 + r4;
    84a8:	ee77 7a88 	vadd.f32	s15, s15, s16
         pSrc[2 * i1 + 1] = r1 + r2;
    84ac:	ee35 8a27 	vadd.f32	s16, s10, s15
         pSrc[2 * i5 + 1] = r1 - r2;
    84b0:	ee35 5a67 	vsub.f32	s10, s10, s15
         pSrc[2 * i3]     = t1 + s3;
    84b4:	ee70 7a80 	vadd.f32	s15, s1, s0
         pSrc[2 * i1 + 1] = r1 + r2;
    84b8:	ed8e 8a00 	vstr	s16, [lr]
         pSrc[2 * i7]     = t1 - s3;
    84bc:	ee70 0ac0 	vsub.f32	s1, s1, s0
         pSrc[2 * i5 + 1] = r1 - r2;
    84c0:	ed8c 5a01 	vstr	s10, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
    84c4:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
    84c8:	ee77 7a41 	vsub.f32	s15, s14, s2
         pSrc[2 * i7 + 1] = t2 + r3;
    84cc:	ee31 1a07 	vadd.f32	s2, s2, s14
         pSrc[2 * i7]     = t1 - s3;
    84d0:	edc4 0a00 	vstr	s1, [r4]
         r1 = (r6 - r8) * C81;
    84d4:	ee35 7ae1 	vsub.f32	s14, s11, s3
         pSrc[2 * i3 + 1] = t2 - r3;
    84d8:	edc5 7a01 	vstr	s15, [r5, #4]
         r6 = (r6 + r8) * C81;
    84dc:	ee75 5aa1 	vadd.f32	s11, s11, s3
         pSrc[2 * i7 + 1] = t2 + r3;
    84e0:	ed84 1a01 	vstr	s2, [r4, #4]
         r2 = (s6 - s8) * C81;
    84e4:	ee36 1a66 	vsub.f32	s2, s12, s13
         s6 = (s6 + s8) * C81;
    84e8:	ee76 6a26 	vadd.f32	s13, s12, s13
         r6 = (r6 + r8) * C81;
    84ec:	ee65 5aa4 	vmul.f32	s11, s11, s9
         r1 = (r6 - r8) * C81;
    84f0:	ee27 7a24 	vmul.f32	s14, s14, s9
         s6 = (s6 + s8) * C81;
    84f4:	ee66 6aa4 	vmul.f32	s13, s13, s9
         t1 = r5 - r1;
    84f8:	ee73 1a47 	vsub.f32	s3, s6, s14
         r5 = r5 + r1;
         r8 = r7 - r6;
    84fc:	ee33 5ae5 	vsub.f32	s10, s7, s11
         r7 = r7 + r6;
    8500:	ee73 7aa5 	vadd.f32	s15, s7, s11
         r5 = r5 + r1;
    8504:	ee33 7a07 	vadd.f32	s14, s6, s14
         t2 = s5 - r2;
         s5 = s5 + r2;
         s8 = s7 - s6;
    8508:	ee72 3a66 	vsub.f32	s7, s4, s13
         s7 = s7 + s6;
    850c:	ee72 6a26 	vadd.f32	s13, s4, s13
         r2 = (s6 - s8) * C81;
    8510:	ee21 1a24 	vmul.f32	s2, s2, s9
         pSrc[2 * i2]     = r5 + s7;
    8514:	ee37 3a26 	vadd.f32	s6, s14, s13
         pSrc[2 * i8]     = r5 - s7;
    8518:	ee37 7a66 	vsub.f32	s14, s14, s13
         pSrc[2 * i2]     = r5 + s7;
    851c:	ed87 3a00 	vstr	s6, [r7]
         s5 = s5 + r2;
    8520:	ee32 6a81 	vadd.f32	s12, s5, s2
         pSrc[2 * i8]     = r5 - s7;
    8524:	ed88 7a00 	vstr	s14, [r8]
         pSrc[2 * i6]     = t1 + s8;
    8528:	ee31 7aa3 	vadd.f32	s14, s3, s7
         t2 = s5 - r2;
    852c:	ee72 5ac1 	vsub.f32	s11, s5, s2
         pSrc[2 * i6]     = t1 + s8;
    8530:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i4]     = t1 - s8;
    8534:	ee71 1ae3 	vsub.f32	s3, s3, s7
         pSrc[2 * i2 + 1] = s5 - r7;
    8538:	ee36 7a67 	vsub.f32	s14, s12, s15
         pSrc[2 * i8 + 1] = s5 + r7;
    853c:	ee77 7a86 	vadd.f32	s15, s15, s12
         pSrc[2 * i4]     = t1 - s8;
    8540:	edc3 1a00 	vstr	s3, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
    8544:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
    8548:	edc8 7a01 	vstr	s15, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
    854c:	ee75 7ac5 	vsub.f32	s15, s11, s10
         pSrc[2 * i4 + 1] = t2 + r8;
    8550:	ee35 5a25 	vadd.f32	s10, s10, s11
         pSrc[2 * i6 + 1] = t2 - r8;
    8554:	edc6 7a01 	vstr	s15, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
    8558:	ed83 5a01 	vstr	s10, [r3, #4]

         i1 += n1;
    855c:	9802      	ldr	r0, [sp, #8]
    855e:	4481      	add	r9, r0
      } while (i1 < fftLen);
    8560:	9803      	ldr	r0, [sp, #12]
    8562:	4548      	cmp	r0, r9
    8564:	4494      	add	ip, r2
    8566:	4417      	add	r7, r2
    8568:	4416      	add	r6, r2
    856a:	4415      	add	r5, r2
    856c:	4414      	add	r4, r2
    856e:	4413      	add	r3, r2
    8570:	4490      	add	r8, r2
    8572:	4496      	add	lr, r2
    8574:	f63f af42 	bhi.w	83fc <arm_radix8_butterfly_f32+0x74>

      if (n2 < 8)
    8578:	2907      	cmp	r1, #7
    857a:	f240 8171 	bls.w	8860 <arm_radix8_butterfly_f32+0x4d8>
    857e:	9801      	ldr	r0, [sp, #4]
    8580:	9b08      	ldr	r3, [sp, #32]
    8582:	4403      	add	r3, r0
    8584:	930b      	str	r3, [sp, #44]	; 0x2c
    8586:	9b07      	ldr	r3, [sp, #28]
    8588:	4403      	add	r3, r0
    858a:	930a      	str	r3, [sp, #40]	; 0x28
    858c:	9b06      	ldr	r3, [sp, #24]
    858e:	4403      	add	r3, r0
    8590:	9309      	str	r3, [sp, #36]	; 0x24
    8592:	9b05      	ldr	r3, [sp, #20]
    8594:	4403      	add	r3, r0
    8596:	9308      	str	r3, [sp, #32]
    8598:	eb0b 0300 	add.w	r3, fp, r0
    859c:	9307      	str	r3, [sp, #28]
    859e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85a0:	4403      	add	r3, r0
    85a2:	9306      	str	r3, [sp, #24]
    85a4:	eb0a 0300 	add.w	r3, sl, r0
    85a8:	9305      	str	r3, [sp, #20]
         break;

      ia1 = 0;
      j = 1;
    85aa:	2401      	movs	r4, #1
      ia1 = 0;
    85ac:	2300      	movs	r3, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
    85ae:	9804      	ldr	r0, [sp, #16]
    85b0:	4403      	add	r3, r0
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;

         co2 = pCoef[2 * ia1];
    85b2:	980d      	ldr	r0, [sp, #52]	; 0x34
    85b4:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
    85b8:	ed95 2a00 	vldr	s4, [r5]
         co3 = pCoef[2 * ia2];
    85bc:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    85c0:	ed95 0a00 	vldr	s0, [r5]
         co4 = pCoef[2 * ia3];
    85c4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    85c8:	ed95 6a00 	vldr	s12, [r5]
         co5 = pCoef[2 * ia4];
    85cc:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    85d0:	edd5 8a00 	vldr	s17, [r5]
         co6 = pCoef[2 * ia5];
    85d4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    85d8:	ed95 5a00 	vldr	s10, [r5]
         co7 = pCoef[2 * ia6];
    85dc:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    85e0:	f06f 002f 	mvn.w	r0, #47	; 0x2f
    85e4:	ed95 1a00 	vldr	s2, [r5]
         co8 = pCoef[2 * ia7];
    85e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    85ec:	ed95 3a00 	vldr	s6, [r5]
         si2 = pCoef[2 * ia1 + 1];
    85f0:	fb00 5503 	mla	r5, r0, r3, r5
    85f4:	9801      	ldr	r0, [sp, #4]
    85f6:	edd5 1a01 	vldr	s3, [r5, #4]
         si3 = pCoef[2 * ia2 + 1];
    85fa:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
    85fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8600:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
    8604:	980a      	ldr	r0, [sp, #40]	; 0x28
    8606:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
    860a:	9809      	ldr	r0, [sp, #36]	; 0x24
    860c:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
    8610:	9808      	ldr	r0, [sp, #32]
    8612:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    8616:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
    861a:	9807      	ldr	r0, [sp, #28]
    861c:	ed95 8a01 	vldr	s16, [r5, #4]
         si4 = pCoef[2 * ia3 + 1];
    8620:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    8624:	edd5 5a01 	vldr	s11, [r5, #4]
         si5 = pCoef[2 * ia4 + 1];
    8628:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
    862c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    8630:	9806      	ldr	r0, [sp, #24]
    8632:	ed95 9a01 	vldr	s18, [r5, #4]
         si6 = pCoef[2 * ia5 + 1];
    8636:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    863a:	edd5 3a01 	vldr	s7, [r5, #4]
         si7 = pCoef[2 * ia6 + 1];
    863e:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
    8642:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    8646:	9805      	ldr	r0, [sp, #20]
    8648:	edd5 0a01 	vldr	s1, [r5, #4]
         si8 = pCoef[2 * ia7 + 1];
    864c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    8650:	edd5 2a01 	vldr	s5, [r5, #4]

         i1 = j;
    8654:	46a3      	mov	fp, r4
    8656:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
    865a:	e001      	b.n	8660 <arm_radix8_butterfly_f32+0x2d8>
    865c:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
    8660:	ed9a aa00 	vldr	s20, [sl]
    8664:	edd9 7a00 	vldr	s15, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
    8668:	edd8 6a00 	vldr	s13, [r8]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
    866c:	eddc ca00 	vldr	s25, [ip]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8670:	edd6 9a00 	vldr	s19, [r6]
            r1 = r1 + r3;
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    8674:	ed9a ca01 	vldr	s24, [sl, #4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
    8678:	ee3a ba67 	vsub.f32	s22, s20, s15
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
    867c:	ee7a aa27 	vadd.f32	s21, s20, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
    8680:	edde 7a00 	vldr	s15, [lr]
    8684:	ee36 7aa7 	vadd.f32	s14, s13, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
    8688:	ee76 6ae7 	vsub.f32	s13, s13, s15
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
    868c:	edd7 7a00 	vldr	s15, [r7]
    8690:	ee7c baa7 	vadd.f32	s23, s25, s15
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
    8694:	ee7c cae7 	vsub.f32	s25, s25, s15
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8698:	edd5 7a00 	vldr	s15, [r5]
    869c:	ee39 aaa7 	vadd.f32	s20, s19, s15
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
    86a0:	ee79 7ae7 	vsub.f32	s15, s19, s15
            r3 = r2 - r4;
    86a4:	ee37 ea4a 	vsub.f32	s28, s14, s20
            t1 = r1 - r3;
    86a8:	ee7a 9aeb 	vsub.f32	s19, s21, s23
            r2 = r2 + r4;
    86ac:	ee37 7a0a 	vadd.f32	s14, s14, s20
            r1 = r1 + r3;
    86b0:	ee7a aaab 	vadd.f32	s21, s21, s23
            pSrc[2 * i1] = r1 + r2;
    86b4:	ee3a aa87 	vadd.f32	s20, s21, s14
            r2 = r1 - r2;
    86b8:	ee7a aac7 	vsub.f32	s21, s21, s14
            pSrc[2 * i1] = r1 + r2;
    86bc:	ed8a aa00 	vstr	s20, [sl]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    86c0:	ed99 7a01 	vldr	s14, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    86c4:	ed98 da01 	vldr	s26, [r8, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    86c8:	eddc ba01 	vldr	s23, [ip, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    86cc:	ed96 fa01 	vldr	s30, [r6, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    86d0:	ee7c fa07 	vadd.f32	s31, s24, s14
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
    86d4:	ee3c ca47 	vsub.f32	s24, s24, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    86d8:	ed9e 7a01 	vldr	s14, [lr, #4]
    86dc:	ee7d da07 	vadd.f32	s27, s26, s14
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
    86e0:	ee3d da47 	vsub.f32	s26, s26, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    86e4:	ed97 7a01 	vldr	s14, [r7, #4]
    86e8:	ee7b ea87 	vadd.f32	s29, s23, s14
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
    86ec:	ee7b bac7 	vsub.f32	s23, s23, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    86f0:	ed95 7a01 	vldr	s14, [r5, #4]
    86f4:	ee3f aa07 	vadd.f32	s20, s30, s14
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
    86f8:	ee3f 7a47 	vsub.f32	s14, s30, s14
            t2 = s1 - s3;
    86fc:	ee3f faee 	vsub.f32	s30, s31, s29
            s1 = s1 + s3;
    8700:	ee7f eaae 	vadd.f32	s29, s31, s29
            s3 = s2 - s4;
    8704:	ee7d faca 	vsub.f32	s31, s27, s20
            s2 = s2 + s4;
    8708:	ee7d da8a 	vadd.f32	s27, s27, s20
            r1 = t1 + s3;
    870c:	ee39 aaaf 	vadd.f32	s20, s19, s31
            t1 = t1 - s3;
    8710:	ee79 9aef 	vsub.f32	s19, s19, s31
            pSrc[2 * i1 + 1] = s1 + s2;
    8714:	ee7e faad 	vadd.f32	s31, s29, s27
            s2 = s1 - s2;
    8718:	ee7e daed 	vsub.f32	s27, s29, s27
            s1 = t2 - r3;
    871c:	ee7f ea4e 	vsub.f32	s29, s30, s28
            t2 = t2 + r3;
    8720:	ee3e ea0f 	vadd.f32	s28, s28, s30
            p1 = co5 * r2;
            p2 = si5 * s2;
    8724:	ee29 fa2d 	vmul.f32	s30, s18, s27
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
    8728:	ee08 faaa 	vmla.f32	s30, s17, s21
            p4 = si5 * r2;
    872c:	ee69 aa2a 	vmul.f32	s21, s18, s21
            pSrc[2 * i5 + 1] = p3 - p4;
    8730:	ee58 aaad 	vnmls.f32	s21, s17, s27
            pSrc[2 * i1 + 1] = s1 + s2;
    8734:	edca fa01 	vstr	s31, [sl, #4]
            pSrc[2 * i5 + 1] = p3 - p4;
    8738:	edc9 aa01 	vstr	s21, [r9, #4]
            p1 = co3 * r1;
            p2 = si3 * s1;
    873c:	ee68 aa2e 	vmul.f32	s21, s16, s29
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
    8740:	ee40 aa0a 	vmla.f32	s21, s0, s20
    8744:	4492      	add	sl, r2
            p4 = si3 * r1;
    8746:	ee28 aa0a 	vmul.f32	s20, s16, s20
            pSrc[2 * i3 + 1] = p3 - p4;
    874a:	ee10 aa2e 	vnmls.f32	s20, s0, s29
            pSrc[2 * i5]     = p1 + p2;
    874e:	ed89 fa00 	vstr	s30, [r9]
            pSrc[2 * i3 + 1] = p3 - p4;
    8752:	ed8c aa01 	vstr	s20, [ip, #4]
            p1 = co7 * t1;
            p2 = si7 * t2;
    8756:	ee20 aa8e 	vmul.f32	s20, s1, s28
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
    875a:	ee01 aa29 	vmla.f32	s20, s2, s19
    875e:	4491      	add	r9, r2
            p4 = si7 * t1;
    8760:	ee60 9aa9 	vmul.f32	s19, s1, s19
            pSrc[2 * i7 + 1] = p3 - p4;
    8764:	ee51 9a0e 	vnmls.f32	s19, s2, s28
            pSrc[2 * i3]     = p1 + p2;
    8768:	edcc aa00 	vstr	s21, [ip]
            pSrc[2 * i7]     = p1 + p2;
    876c:	ed87 aa00 	vstr	s20, [r7]
            pSrc[2 * i7 + 1] = p3 - p4;
    8770:	edc7 9a01 	vstr	s19, [r7, #4]
            r1 = (r6 - r8) * C81;
    8774:	ee36 aae7 	vsub.f32	s20, s13, s15
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
    8778:	ee7d 9a47 	vsub.f32	s19, s26, s14
            r6 = (r6 + r8) * C81;
    877c:	ee76 7aa7 	vadd.f32	s15, s13, s15
            s6 = (s6 + s8) * C81;
    8780:	ee3d 7a07 	vadd.f32	s14, s26, s14
            s1 = (s6 - s8) * C81;
    8784:	ee69 6a84 	vmul.f32	s13, s19, s8
            r1 = (r6 - r8) * C81;
    8788:	ee2a aa04 	vmul.f32	s20, s20, s8
            r6 = (r6 + r8) * C81;
    878c:	ee67 7a84 	vmul.f32	s15, s15, s8
            s6 = (s6 + s8) * C81;
    8790:	ee27 7a04 	vmul.f32	s14, s14, s8
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
            t2 = s5 - s1;
            s5 = s5 + s1;
    8794:	ee7c 9a26 	vadd.f32	s19, s24, s13
            t1 = r5 - r1;
    8798:	ee3b da4a 	vsub.f32	s26, s22, s20
            r5 = r5 + r1;
    879c:	ee3b aa0a 	vadd.f32	s20, s22, s20
            r8 = r7 - r6;
    87a0:	ee3c bae7 	vsub.f32	s22, s25, s15
            r7 = r7 + r6;
    87a4:	ee7c 7aa7 	vadd.f32	s15, s25, s15
            t2 = s5 - s1;
    87a8:	ee7c ca66 	vsub.f32	s25, s24, s13
            s8 = s7 - s6;
    87ac:	ee3b cac7 	vsub.f32	s24, s23, s14
            s7 = s7 + s6;
    87b0:	ee3b 7a87 	vadd.f32	s14, s23, s14
            r1 = r5 + s7;
            r5 = r5 - s7;
            r6 = t1 + s8;
    87b4:	ee7d aa0c 	vadd.f32	s21, s26, s24
            r1 = r5 + s7;
    87b8:	ee7a 6a07 	vadd.f32	s13, s20, s14
            r5 = r5 - s7;
    87bc:	ee3a 7a47 	vsub.f32	s14, s20, s14
            t1 = t1 - s8;
    87c0:	ee3d aa4c 	vsub.f32	s20, s26, s24
            s1 = s5 - r7;
    87c4:	ee39 cae7 	vsub.f32	s24, s19, s15
            s5 = s5 + r7;
            s6 = t2 - r8;
    87c8:	ee7c bacb 	vsub.f32	s23, s25, s22
            s5 = s5 + r7;
    87cc:	ee77 7aa9 	vadd.f32	s15, s15, s19
            t2 = t2 + r8;
    87d0:	ee7b 9a2c 	vadd.f32	s19, s22, s25
            p1 = co2 * r1;
            p2 = si2 * s1;
    87d4:	ee21 ba8c 	vmul.f32	s22, s3, s24
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
    87d8:	ee02 ba26 	vmla.f32	s22, s4, s13
    87dc:	4494      	add	ip, r2
    87de:	4417      	add	r7, r2
            p4 = si2 * r1;
    87e0:	ee61 6aa6 	vmul.f32	s13, s3, s13
            pSrc[2 * i2 + 1] = p3 - p4;
    87e4:	ee52 6a0c 	vnmls.f32	s13, s4, s24
            pSrc[2 * i2]     = p1 + p2;
    87e8:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i2 + 1] = p3 - p4;
    87ec:	edc8 6a01 	vstr	s13, [r8, #4]
            p1 = co8 * r5;
            p2 = si8 * s5;
    87f0:	ee62 6aa7 	vmul.f32	s13, s5, s15
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
    87f4:	ee43 6a07 	vmla.f32	s13, s6, s14
    87f8:	4490      	add	r8, r2
            p4 = si8 * r5;
    87fa:	ee22 7a87 	vmul.f32	s14, s5, s14
            pSrc[2 * i8 + 1] = p3 - p4;
    87fe:	ee13 7a27 	vnmls.f32	s14, s6, s15
            p1 = co6 * r6;
            p2 = si6 * s6;
    8802:	ee63 7aab 	vmul.f32	s15, s7, s23
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
    8806:	ee45 7a2a 	vmla.f32	s15, s10, s21
            pSrc[2 * i8 + 1] = p3 - p4;
    880a:	ed85 7a01 	vstr	s14, [r5, #4]
            pSrc[2 * i8]     = p1 + p2;
    880e:	edc5 6a00 	vstr	s13, [r5]
            p4 = si6 * r6;
    8812:	ee23 7aaa 	vmul.f32	s14, s7, s21
            pSrc[2 * i6]     = p1 + p2;
    8816:	edce 7a00 	vstr	s15, [lr]
            pSrc[2 * i6 + 1] = p3 - p4;
            p1 = co4 * t1;
            p2 = si4 * t2;
    881a:	ee65 7aa9 	vmul.f32	s15, s11, s19
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
    881e:	ee46 7a0a 	vmla.f32	s15, s12, s20
    8822:	4415      	add	r5, r2
            pSrc[2 * i6 + 1] = p3 - p4;
    8824:	ee15 7a2b 	vnmls.f32	s14, s10, s23
    8828:	ed8e 7a01 	vstr	s14, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
    882c:	edc6 7a00 	vstr	s15, [r6]
            p4 = si4 * t1;
    8830:	ee65 7a8a 	vmul.f32	s15, s11, s20
            pSrc[2 * i4 + 1] = p3 - p4;
    8834:	ee56 7a29 	vnmls.f32	s15, s12, s19
    8838:	4496      	add	lr, r2
    883a:	edc6 7a01 	vstr	s15, [r6, #4]

            i1 += n1;
    883e:	9802      	ldr	r0, [sp, #8]
    8840:	4483      	add	fp, r0
         } while (i1 < fftLen);
    8842:	9803      	ldr	r0, [sp, #12]
    8844:	4558      	cmp	r0, fp
    8846:	4416      	add	r6, r2
    8848:	f63f af0a 	bhi.w	8660 <arm_radix8_butterfly_f32+0x2d8>

         j++;
    884c:	3401      	adds	r4, #1
      } while (j < n2);
    884e:	42a1      	cmp	r1, r4
    8850:	f47f aead 	bne.w	85ae <arm_radix8_butterfly_f32+0x226>

      twidCoefModifier <<= 3;
    8854:	9b04      	ldr	r3, [sp, #16]
    8856:	9102      	str	r1, [sp, #8]
    8858:	00db      	lsls	r3, r3, #3
    885a:	b29b      	uxth	r3, r3
    885c:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
    885e:	e5a1      	b.n	83a4 <arm_radix8_butterfly_f32+0x1c>
}
    8860:	b00f      	add	sp, #60	; 0x3c
    8862:	ecbd 8b10 	vpop	{d8-d15}
    8866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    886a:	bf00      	nop

0000886c <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    886c:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    886e:	4604      	mov	r4, r0
    8870:	b140      	cbz	r0, 8884 <arm_rfft_32_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),16);
    8872:	2110      	movs	r1, #16
    8874:	f7ff fd3c 	bl	82f0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8878:	b918      	cbnz	r0, 8882 <arm_rfft_32_fast_init_f32+0x16>
  {
    return(status);
  }

  S->fftLenRFFT = 32U;
    887a:	2320      	movs	r3, #32
    887c:	8223      	strh	r3, [r4, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
    887e:	4b03      	ldr	r3, [pc, #12]	; (888c <arm_rfft_32_fast_init_f32+0x20>)
    8880:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8882:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8884:	f04f 30ff 	mov.w	r0, #4294967295
    8888:	e7fb      	b.n	8882 <arm_rfft_32_fast_init_f32+0x16>
    888a:	bf00      	nop
    888c:	0002b154 	.word	0x0002b154

00008890 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8890:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8892:	4604      	mov	r4, r0
    8894:	b140      	cbz	r0, 88a8 <arm_rfft_64_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),32);
    8896:	2120      	movs	r1, #32
    8898:	f7ff fd2a 	bl	82f0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    889c:	b918      	cbnz	r0, 88a6 <arm_rfft_64_fast_init_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 64U;
    889e:	2340      	movs	r3, #64	; 0x40
    88a0:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
    88a2:	4b03      	ldr	r3, [pc, #12]	; (88b0 <arm_rfft_64_fast_init_f32+0x20>)
    88a4:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    88a6:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    88a8:	f04f 30ff 	mov.w	r0, #4294967295
    88ac:	e7fb      	b.n	88a6 <arm_rfft_64_fast_init_f32+0x16>
    88ae:	bf00      	nop
    88b0:	0002f9d4 	.word	0x0002f9d4

000088b4 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    88b4:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    88b6:	4604      	mov	r4, r0
    88b8:	b140      	cbz	r0, 88cc <arm_rfft_128_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),64);
    88ba:	2140      	movs	r1, #64	; 0x40
    88bc:	f7ff fd18 	bl	82f0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    88c0:	b918      	cbnz	r0, 88ca <arm_rfft_128_fast_init_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 128;
    88c2:	2380      	movs	r3, #128	; 0x80
    88c4:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
    88c6:	4b03      	ldr	r3, [pc, #12]	; (88d4 <arm_rfft_128_fast_init_f32+0x20>)
    88c8:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    88ca:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    88cc:	f04f 30ff 	mov.w	r0, #4294967295
    88d0:	e7fb      	b.n	88ca <arm_rfft_128_fast_init_f32+0x16>
    88d2:	bf00      	nop
    88d4:	00028b54 	.word	0x00028b54

000088d8 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    88d8:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    88da:	4604      	mov	r4, r0
    88dc:	b148      	cbz	r0, 88f2 <arm_rfft_256_fast_init_f32+0x1a>

  status=arm_cfft_init_f32(&(S->Sint),128);
    88de:	2180      	movs	r1, #128	; 0x80
    88e0:	f7ff fd06 	bl	82f0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    88e4:	b920      	cbnz	r0, 88f0 <arm_rfft_256_fast_init_f32+0x18>
  {
    return(status);
  }
  S->fftLenRFFT = 256U;
    88e6:	f44f 7380 	mov.w	r3, #256	; 0x100
    88ea:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
    88ec:	4b02      	ldr	r3, [pc, #8]	; (88f8 <arm_rfft_256_fast_init_f32+0x20>)
    88ee:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    88f0:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    88f2:	f04f 30ff 	mov.w	r0, #4294967295
    88f6:	e7fb      	b.n	88f0 <arm_rfft_256_fast_init_f32+0x18>
    88f8:	0002ad54 	.word	0x0002ad54

000088fc <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    88fc:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    88fe:	4604      	mov	r4, r0
    8900:	b150      	cbz	r0, 8918 <arm_rfft_512_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),256);
    8902:	f44f 7180 	mov.w	r1, #256	; 0x100
    8906:	f7ff fcf3 	bl	82f0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    890a:	b920      	cbnz	r0, 8916 <arm_rfft_512_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 512U;
    890c:	f44f 7300 	mov.w	r3, #512	; 0x200
    8910:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
    8912:	4b03      	ldr	r3, [pc, #12]	; (8920 <arm_rfft_512_fast_init_f32+0x24>)
    8914:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8916:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8918:	f04f 30ff 	mov.w	r0, #4294967295
    891c:	e7fb      	b.n	8916 <arm_rfft_512_fast_init_f32+0x1a>
    891e:	bf00      	nop
    8920:	0002f1d4 	.word	0x0002f1d4

00008924 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8924:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8926:	4604      	mov	r4, r0
    8928:	b150      	cbz	r0, 8940 <arm_rfft_1024_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),512);
    892a:	f44f 7100 	mov.w	r1, #512	; 0x200
    892e:	f7ff fcdf 	bl	82f0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8932:	b920      	cbnz	r0, 893e <arm_rfft_1024_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 1024U;
    8934:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8938:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
    893a:	4b03      	ldr	r3, [pc, #12]	; (8948 <arm_rfft_1024_fast_init_f32+0x24>)
    893c:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    893e:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8940:	f04f 30ff 	mov.w	r0, #4294967295
    8944:	e7fb      	b.n	893e <arm_rfft_1024_fast_init_f32+0x1a>
    8946:	bf00      	nop
    8948:	00027b54 	.word	0x00027b54

0000894c <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    894c:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    894e:	4604      	mov	r4, r0
    8950:	b150      	cbz	r0, 8968 <arm_rfft_2048_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),1024);
    8952:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8956:	f7ff fccb 	bl	82f0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    895a:	b920      	cbnz	r0, 8966 <arm_rfft_2048_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 2048U;
    895c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    8960:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
    8962:	4b03      	ldr	r3, [pc, #12]	; (8970 <arm_rfft_2048_fast_init_f32+0x24>)
    8964:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8966:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8968:	f04f 30ff 	mov.w	r0, #4294967295
    896c:	e7fb      	b.n	8966 <arm_rfft_2048_fast_init_f32+0x1a>
    896e:	bf00      	nop
    8970:	00028d54 	.word	0x00028d54

00008974 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8974:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8976:	4604      	mov	r4, r0
    8978:	b150      	cbz	r0, 8990 <arm_rfft_4096_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),2048);
    897a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    897e:	f7ff fcb7 	bl	82f0 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8982:	b920      	cbnz	r0, 898e <arm_rfft_4096_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 4096U;
    8984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8988:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
    898a:	4b03      	ldr	r3, [pc, #12]	; (8998 <arm_rfft_4096_fast_init_f32+0x24>)
    898c:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    898e:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8990:	f04f 30ff 	mov.w	r0, #4294967295
    8994:	e7fb      	b.n	898e <arm_rfft_4096_fast_init_f32+0x1a>
    8996:	bf00      	nop
    8998:	0002b1d4 	.word	0x0002b1d4

0000899c <arm_rfft_fast_init_f32>:
  uint16_t fftLen)
{
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;

  switch (fftLen)
    899c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    89a0:	d01a      	beq.n	89d8 <arm_rfft_fast_init_f32+0x3c>
    89a2:	d80e      	bhi.n	89c2 <arm_rfft_fast_init_f32+0x26>
    89a4:	2980      	cmp	r1, #128	; 0x80
    89a6:	d019      	beq.n	89dc <arm_rfft_fast_init_f32+0x40>
    89a8:	d806      	bhi.n	89b8 <arm_rfft_fast_init_f32+0x1c>
    89aa:	2920      	cmp	r1, #32
    89ac:	d018      	beq.n	89e0 <arm_rfft_fast_init_f32+0x44>
    89ae:	2940      	cmp	r1, #64	; 0x40
    89b0:	d018      	beq.n	89e4 <arm_rfft_fast_init_f32+0x48>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
  return fptr( S );

}
    89b2:	f04f 30ff 	mov.w	r0, #4294967295
    89b6:	4770      	bx	lr
  switch (fftLen)
    89b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    89bc:	d1f9      	bne.n	89b2 <arm_rfft_fast_init_f32+0x16>
    fptr = arm_rfft_256_fast_init_f32;
    89be:	4b0c      	ldr	r3, [pc, #48]	; (89f0 <arm_rfft_fast_init_f32+0x54>)
    89c0:	e009      	b.n	89d6 <arm_rfft_fast_init_f32+0x3a>
  switch (fftLen)
    89c2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    89c6:	d00f      	beq.n	89e8 <arm_rfft_fast_init_f32+0x4c>
    89c8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    89cc:	d00e      	beq.n	89ec <arm_rfft_fast_init_f32+0x50>
    89ce:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    89d2:	d1ee      	bne.n	89b2 <arm_rfft_fast_init_f32+0x16>
    fptr = arm_rfft_1024_fast_init_f32;
    89d4:	4b07      	ldr	r3, [pc, #28]	; (89f4 <arm_rfft_fast_init_f32+0x58>)
  return fptr( S );
    89d6:	4718      	bx	r3
    fptr = arm_rfft_512_fast_init_f32;
    89d8:	4b07      	ldr	r3, [pc, #28]	; (89f8 <arm_rfft_fast_init_f32+0x5c>)
    89da:	e7fc      	b.n	89d6 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_128_fast_init_f32;
    89dc:	4b07      	ldr	r3, [pc, #28]	; (89fc <arm_rfft_fast_init_f32+0x60>)
    89de:	e7fa      	b.n	89d6 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_32_fast_init_f32;
    89e0:	4b07      	ldr	r3, [pc, #28]	; (8a00 <arm_rfft_fast_init_f32+0x64>)
    89e2:	e7f8      	b.n	89d6 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_64_fast_init_f32;
    89e4:	4b07      	ldr	r3, [pc, #28]	; (8a04 <arm_rfft_fast_init_f32+0x68>)
    89e6:	e7f6      	b.n	89d6 <arm_rfft_fast_init_f32+0x3a>
  switch (fftLen)
    89e8:	4b07      	ldr	r3, [pc, #28]	; (8a08 <arm_rfft_fast_init_f32+0x6c>)
    89ea:	e7f4      	b.n	89d6 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_4096_fast_init_f32;
    89ec:	4b07      	ldr	r3, [pc, #28]	; (8a0c <arm_rfft_fast_init_f32+0x70>)
    89ee:	e7f2      	b.n	89d6 <arm_rfft_fast_init_f32+0x3a>
    89f0:	000088d9 	.word	0x000088d9
    89f4:	00008925 	.word	0x00008925
    89f8:	000088fd 	.word	0x000088fd
    89fc:	000088b5 	.word	0x000088b5
    8a00:	0000886d 	.word	0x0000886d
    8a04:	00008891 	.word	0x00008891
    8a08:	0000894d 	.word	0x0000894d
    8a0c:	00008975 	.word	0x00008975

00008a10 <arm_rms_f32>:
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
    8a10:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8a8c <arm_rms_f32+0x7c>
{
    8a14:	b538      	push	{r3, r4, r5, lr}
        float32_t in;                                  /* Temporary variable to store input value */

#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = blockSize >> 2U;
    8a16:	088d      	lsrs	r5, r1, #2
{
    8a18:	4614      	mov	r4, r2
    8a1a:	4603      	mov	r3, r0
  blkCnt = blockSize >> 2U;
    8a1c:	462a      	mov	r2, r5
    8a1e:	eef0 6a67 	vmov.f32	s13, s15

  while (blkCnt > 0U)
    8a22:	3310      	adds	r3, #16
    8a24:	b9ba      	cbnz	r2, 8a56 <arm_rms_f32+0x46>
    8a26:	eb00 1005 	add.w	r0, r0, r5, lsl #4
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = blockSize % 0x4U;
    8a2a:	f001 0303 	and.w	r3, r1, #3
    8a2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
    8a32:	4298      	cmp	r0, r3
    8a34:	d121      	bne.n	8a7a <arm_rms_f32+0x6a>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
    8a36:	ee07 1a10 	vmov	s14, r1
    8a3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8a3e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
    8a42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    8a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a4a:	db1b      	blt.n	8a84 <arm_rms_f32+0x74>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
    8a4c:	f007 f916 	bl	fc7c <sqrtf>
    8a50:	ed84 0a00 	vstr	s0, [r4]
}
    8a54:	bd38      	pop	{r3, r4, r5, pc}
    in = *pSrc++;
    8a56:	ed13 7a04 	vldr	s14, [r3, #-16]
    sum += in * in;
    8a5a:	ee47 7a07 	vmla.f32	s15, s14, s14
    blkCnt--;
    8a5e:	3a01      	subs	r2, #1
    in = *pSrc++;
    8a60:	ed13 7a03 	vldr	s14, [r3, #-12]
    sum += in * in;
    8a64:	ee47 7a07 	vmla.f32	s15, s14, s14
    in = *pSrc++;
    8a68:	ed13 7a02 	vldr	s14, [r3, #-8]
    sum += in * in;
    8a6c:	ee47 7a07 	vmla.f32	s15, s14, s14
    in = *pSrc++;
    8a70:	ed13 7a01 	vldr	s14, [r3, #-4]
    sum += in * in;
    8a74:	ee47 7a07 	vmla.f32	s15, s14, s14
    blkCnt--;
    8a78:	e7d3      	b.n	8a22 <arm_rms_f32+0x12>
    in = *pSrc++;
    8a7a:	ecb0 7a01 	vldmia	r0!, {s14}
    sum += ( in * in);
    8a7e:	ee47 7a07 	vmla.f32	s15, s14, s14
    blkCnt--;
    8a82:	e7d6      	b.n	8a32 <arm_rms_f32+0x22>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
    8a84:	edc4 6a00 	vstr	s13, [r4]
}
    8a88:	e7e4      	b.n	8a54 <arm_rms_f32+0x44>
    8a8a:	bf00      	nop
    8a8c:	00000000 	.word	0x00000000

00008a90 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
    8a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a94:	b0a3      	sub	sp, #140	; 0x8c
    // Rounding offset to add for a right shift of 31
    q63_t mult = 1 << 30;

    if ((m1 < 0) ^ (m2 < 0))
    {
        mult = 1 - mult;
    8a96:	f8df e318 	ldr.w	lr, [pc, #792]	; 8db0 <arm_softmax_s8+0x320>
    8a9a:	9301      	str	r3, [sp, #4]
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    8a9c:	2300      	movs	r3, #0
{
    8a9e:	901c      	str	r0, [sp, #112]	; 0x70
    8aa0:	9121      	str	r1, [sp, #132]	; 0x84
    8aa2:	9214      	str	r2, [sp, #80]	; 0x50
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    8aa4:	9312      	str	r3, [sp, #72]	; 0x48
    8aa6:	9315      	str	r3, [sp, #84]	; 0x54
    8aa8:	f04f 3cff 	mov.w	ip, #4294967295
    8aac:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8aae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    8ab0:	4413      	add	r3, r2
    8ab2:	9318      	str	r3, [sp, #96]	; 0x60
    8ab4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    8ab6:	4413      	add	r3, r2
    8ab8:	931b      	str	r3, [sp, #108]	; 0x6c
    8aba:	9a21      	ldr	r2, [sp, #132]	; 0x84
    8abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8abe:	4293      	cmp	r3, r2
    8ac0:	db02      	blt.n	8ac8 <arm_softmax_s8+0x38>
        input += row_size;
        output += row_size;
    }

#endif
}
    8ac2:	b023      	add	sp, #140	; 0x8c
    8ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
    8ac8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    8aca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8acc:	569b      	ldrsb	r3, [r3, r2]
    8ace:	9313      	str	r3, [sp, #76]	; 0x4c
        for (col = 1; col < row_size; ++col)
    8ad0:	2301      	movs	r3, #1
    8ad2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8ad4:	4293      	cmp	r3, r2
    8ad6:	f2c0 8160 	blt.w	8d9a <arm_softmax_s8+0x30a>
        int32_t sum = 0;
    8ada:	2100      	movs	r1, #0
        for (col = 0; col < row_size; ++col)
    8adc:	9110      	str	r1, [sp, #64]	; 0x40
    8ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8ae0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8ae2:	4293      	cmp	r3, r2
    8ae4:	f2c0 8166 	blt.w	8db4 <arm_softmax_s8+0x324>
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
    8ae8:	fab1 f281 	clz	r2, r1
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
    8aec:	f1c2 0323 	rsb	r3, r2, #35	; 0x23
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
    8af0:	fa01 f202 	lsl.w	r2, r1, r2
    8af4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    8af8:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
    8afc:	9316      	str	r3, [sp, #88]	; 0x58
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
    8afe:	ea4f 73e2 	mov.w	r3, r2, asr #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    8b02:	f143 0200 	adc.w	r2, r3, #0
    8b06:	084b      	lsrs	r3, r1, #1
    8b08:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    mult = mult + (q63_t)m1 * m2;
    8b0c:	48a7      	ldr	r0, [pc, #668]	; (8dac <arm_softmax_s8+0x31c>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    8b0e:	1052      	asrs	r2, r2, #1
    mult = mult + (q63_t)m1 * m2;
    8b10:	425d      	negs	r5, r3
    8b12:	fb00 5502 	mla	r5, r0, r2, r5
    8b16:	fba3 0100 	umull	r0, r1, r3, r0
    result = (int32_t)(mult / (1ll << 31));
    8b1a:	eb10 040e 	adds.w	r4, r0, lr
    mult = mult + (q63_t)m1 * m2;
    8b1e:	4429      	add	r1, r5
    result = (int32_t)(mult / (1ll << 31));
    8b20:	eb41 010c 	adc.w	r1, r1, ip
    8b24:	9406      	str	r4, [sp, #24]
    8b26:	9107      	str	r1, [sp, #28]
    8b28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    8b2c:	2800      	cmp	r0, #0
    8b2e:	f171 0100 	sbcs.w	r1, r1, #0
    8b32:	da09      	bge.n	8b48 <arm_softmax_s8+0xb8>
    8b34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8b38:	1861      	adds	r1, r4, r1
    8b3a:	9807      	ldr	r0, [sp, #28]
    8b3c:	9106      	str	r1, [sp, #24]
    8b3e:	f04f 0100 	mov.w	r1, #0
    8b42:	eb41 0000 	adc.w	r0, r1, r0
    8b46:	9007      	str	r0, [sp, #28]
    8b48:	9906      	ldr	r1, [sp, #24]
    8b4a:	0fcd      	lsrs	r5, r1, #31
    8b4c:	9907      	ldr	r1, [sp, #28]
    8b4e:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
    8b52:	f105 355a 	add.w	r5, r5, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
    8b56:	17e9      	asrs	r1, r5, #31
    8b58:	fb05 f602 	mul.w	r6, r5, r2
    8b5c:	fb03 6601 	mla	r6, r3, r1, r6
    8b60:	fba5 0103 	umull	r0, r1, r5, r3
    8b64:	4431      	add	r1, r6
    8b66:	f110 4680 	adds.w	r6, r0, #1073741824	; 0x40000000
    8b6a:	f141 0100 	adc.w	r1, r1, #0
    result = (int32_t)(mult / (1ll << 31));
    8b6e:	0ff6      	lsrs	r6, r6, #31
    8b70:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    if ((m1 < 0) ^ (m2 < 0))
    8b74:	f1d6 5600 	rsbs	r6, r6, #536870912	; 0x20000000
        mult = 1 - mult;
    8b78:	bf47      	ittee	mi
    8b7a:	4670      	movmi	r0, lr
    8b7c:	4661      	movmi	r1, ip
    q63_t mult = 1 << 30;
    8b7e:	f04f 4080 	movpl.w	r0, #1073741824	; 0x40000000
    8b82:	2100      	movpl	r1, #0
    mult = mult + (q63_t)m1 * m2;
    8b84:	fbc6 0105 	smlal	r0, r1, r6, r5
    8b88:	4688      	mov	r8, r1
    result = (int32_t)(mult / (1ll << 31));
    8b8a:	2800      	cmp	r0, #0
    8b8c:	f178 0100 	sbcs.w	r1, r8, #0
    mult = mult + (q63_t)m1 * m2;
    8b90:	4607      	mov	r7, r0
    result = (int32_t)(mult / (1ll << 31));
    8b92:	da06      	bge.n	8ba2 <arm_softmax_s8+0x112>
    8b94:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    8b98:	19bf      	adds	r7, r7, r6
    8b9a:	f04f 0600 	mov.w	r6, #0
    8b9e:	eb46 0808 	adc.w	r8, r6, r8
    8ba2:	0ff8      	lsrs	r0, r7, #31
    8ba4:	ea40 0048 	orr.w	r0, r0, r8, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    8ba8:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
    8bac:	2d00      	cmp	r5, #0
    mult = mult + (q63_t)m1 * m2;
    8bae:	ea4f 71e5 	mov.w	r1, r5, asr #31
    8bb2:	fb05 f902 	mul.w	r9, r5, r2
    8bb6:	fb03 9901 	mla	r9, r3, r1, r9
        mult = 1 - mult;
    8bba:	bfb8      	it	lt
    8bbc:	4676      	movlt	r6, lr
    mult = mult + (q63_t)m1 * m2;
    8bbe:	fba5 0103 	umull	r0, r1, r5, r3
    q63_t mult = 1 << 30;
    8bc2:	bfaa      	itet	ge
    8bc4:	f04f 4680 	movge.w	r6, #1073741824	; 0x40000000
        mult = 1 - mult;
    8bc8:	4667      	movlt	r7, ip
    q63_t mult = 1 << 30;
    8bca:	2700      	movge	r7, #0
    mult = mult + (q63_t)m1 * m2;
    8bcc:	4449      	add	r1, r9
    result = (int32_t)(mult / (1ll << 31));
    8bce:	1984      	adds	r4, r0, r6
    8bd0:	4179      	adcs	r1, r7
    8bd2:	9408      	str	r4, [sp, #32]
    8bd4:	9109      	str	r1, [sp, #36]	; 0x24
    8bd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    8bda:	2800      	cmp	r0, #0
    8bdc:	f171 0100 	sbcs.w	r1, r1, #0
    if ((m1 < 0) ^ (m2 < 0))
    8be0:	ea4f 78d5 	mov.w	r8, r5, lsr #31
    result = (int32_t)(mult / (1ll << 31));
    8be4:	da09      	bge.n	8bfa <arm_softmax_s8+0x16a>
    8be6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8bea:	1861      	adds	r1, r4, r1
    8bec:	9809      	ldr	r0, [sp, #36]	; 0x24
    8bee:	9108      	str	r1, [sp, #32]
    8bf0:	f04f 0100 	mov.w	r1, #0
    8bf4:	eb41 0000 	adc.w	r0, r1, r0
    8bf8:	9009      	str	r0, [sp, #36]	; 0x24
    8bfa:	9908      	ldr	r1, [sp, #32]
    8bfc:	0fce      	lsrs	r6, r1, #31
    8bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
    8c00:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    8c04:	f1c6 5600 	rsb	r6, r6, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
    8c08:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
        mult = 1 - mult;
    8c0c:	bf19      	ittee	ne
    8c0e:	4670      	movne	r0, lr
    8c10:	4661      	movne	r1, ip
    q63_t mult = 1 << 30;
    8c12:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
    8c16:	2100      	moveq	r1, #0
    mult = mult + (q63_t)m1 * m2;
    8c18:	fbc6 0105 	smlal	r0, r1, r6, r5
    result = (int32_t)(mult / (1ll << 31));
    8c1c:	2800      	cmp	r0, #0
    mult = mult + (q63_t)m1 * m2;
    8c1e:	4688      	mov	r8, r1
    result = (int32_t)(mult / (1ll << 31));
    8c20:	f171 0100 	sbcs.w	r1, r1, #0
    mult = mult + (q63_t)m1 * m2;
    8c24:	4607      	mov	r7, r0
    result = (int32_t)(mult / (1ll << 31));
    8c26:	da06      	bge.n	8c36 <arm_softmax_s8+0x1a6>
    8c28:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    8c2c:	19bf      	adds	r7, r7, r6
    8c2e:	f04f 0600 	mov.w	r6, #0
    8c32:	eb46 0808 	adc.w	r8, r6, r8
    8c36:	0ff8      	lsrs	r0, r7, #31
    8c38:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    8c3c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    8c40:	bfab      	itete	ge
    8c42:	2100      	movge	r1, #0
    8c44:	f04f 31ff 	movlt.w	r1, #4294967295
    8c48:	f06f 4600 	mvnge.w	r6, #2147483648	; 0x80000000
    8c4c:	2600      	movlt	r6, #0
    8c4e:	ea01 0180 	and.w	r1, r1, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    8c52:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    8c56:	ea81 0106 	eor.w	r1, r1, r6
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    8c5a:	bfcb      	itete	gt
    8c5c:	f04f 36ff 	movgt.w	r6, #4294967295
    8c60:	2600      	movle	r6, #0
    8c62:	2000      	movgt	r0, #0
    8c64:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
    8c68:	4031      	ands	r1, r6
    8c6a:	4041      	eors	r1, r0
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    8c6c:	440d      	add	r5, r1
    if ((m1 < 0) ^ (m2 < 0))
    8c6e:	2d00      	cmp	r5, #0
    mult = mult + (q63_t)m1 * m2;
    8c70:	ea4f 71e5 	mov.w	r1, r5, asr #31
    8c74:	fb05 f202 	mul.w	r2, r5, r2
    8c78:	fb03 2201 	mla	r2, r3, r1, r2
        mult = 1 - mult;
    8c7c:	bfb8      	it	lt
    8c7e:	4676      	movlt	r6, lr
    mult = mult + (q63_t)m1 * m2;
    8c80:	fba5 0103 	umull	r0, r1, r5, r3
    q63_t mult = 1 << 30;
    8c84:	bfaa      	itet	ge
    8c86:	f04f 4680 	movge.w	r6, #1073741824	; 0x40000000
        mult = 1 - mult;
    8c8a:	4667      	movlt	r7, ip
    q63_t mult = 1 << 30;
    8c8c:	2700      	movge	r7, #0
    mult = mult + (q63_t)m1 * m2;
    8c8e:	4411      	add	r1, r2
    result = (int32_t)(mult / (1ll << 31));
    8c90:	1983      	adds	r3, r0, r6
    8c92:	930a      	str	r3, [sp, #40]	; 0x28
    8c94:	eb41 0307 	adc.w	r3, r1, r7
    8c98:	930b      	str	r3, [sp, #44]	; 0x2c
    8c9a:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	f174 0300 	sbcs.w	r3, r4, #0
    if ((m1 < 0) ^ (m2 < 0))
    8ca4:	ea4f 78d5 	mov.w	r8, r5, lsr #31
    result = (int32_t)(mult / (1ll << 31));
    8ca8:	da0a      	bge.n	8cc0 <arm_softmax_s8+0x230>
    8caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8cac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    8cb0:	18d3      	adds	r3, r2, r3
    8cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8cb4:	930a      	str	r3, [sp, #40]	; 0x28
    8cb6:	f04f 0300 	mov.w	r3, #0
    8cba:	eb43 0202 	adc.w	r2, r3, r2
    8cbe:	920b      	str	r2, [sp, #44]	; 0x2c
    8cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cc2:	0fd9      	lsrs	r1, r3, #31
    8cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8cc6:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    8cca:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
    8cce:	ebb8 7fd1 	cmp.w	r8, r1, lsr #31
        mult = 1 - mult;
    8cd2:	bf19      	ittee	ne
    8cd4:	4672      	movne	r2, lr
    8cd6:	4663      	movne	r3, ip
    q63_t mult = 1 << 30;
    8cd8:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
    8cdc:	2300      	moveq	r3, #0
    mult = mult + (q63_t)m1 * m2;
    8cde:	fbc1 2305 	smlal	r2, r3, r1, r5
    result = (int32_t)(mult / (1ll << 31));
    8ce2:	2a00      	cmp	r2, #0
    mult = mult + (q63_t)m1 * m2;
    8ce4:	461f      	mov	r7, r3
    result = (int32_t)(mult / (1ll << 31));
    8ce6:	f173 0300 	sbcs.w	r3, r3, #0
    mult = mult + (q63_t)m1 * m2;
    8cea:	4616      	mov	r6, r2
    result = (int32_t)(mult / (1ll << 31));
    8cec:	da06      	bge.n	8cfc <arm_softmax_s8+0x26c>
    8cee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8cf2:	1876      	adds	r6, r6, r1
    8cf4:	f04f 0100 	mov.w	r1, #0
    8cf8:	eb41 0707 	adc.w	r7, r1, r7
    8cfc:	0ff2      	lsrs	r2, r6, #31
    8cfe:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    8d02:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    8d06:	bfab      	itete	ge
    8d08:	2300      	movge	r3, #0
    8d0a:	f04f 33ff 	movlt.w	r3, #4294967295
    8d0e:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
    8d12:	2100      	movlt	r1, #0
    8d14:	ea03 0382 	and.w	r3, r3, r2, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    8d18:	f1b2 4f60 	cmp.w	r2, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    8d1c:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    8d20:	bfd5      	itete	le
    8d22:	2100      	movle	r1, #0
    8d24:	f04f 31ff 	movgt.w	r1, #4294967295
    8d28:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    8d2c:	2200      	movgt	r2, #0
    8d2e:	400b      	ands	r3, r1
    8d30:	4053      	eors	r3, r2
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    8d32:	441d      	add	r5, r3
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    8d34:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    8d38:	bfab      	itete	ge
    8d3a:	2300      	movge	r3, #0
    8d3c:	f04f 33ff 	movlt.w	r3, #4294967295
    8d40:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
    8d44:	2200      	movlt	r2, #0
    8d46:	ea03 0345 	and.w	r3, r3, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    8d4a:	f1b5 4f40 	cmp.w	r5, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    8d4e:	ea83 0302 	eor.w	r3, r3, r2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    8d52:	bfd5      	itete	le
    8d54:	2100      	movle	r1, #0
    8d56:	f04f 31ff 	movgt.w	r1, #4294967295
    8d5a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    8d5e:	2200      	movgt	r2, #0
    8d60:	400b      	ands	r3, r1
        for (col = 0; col < row_size; ++col)
    8d62:	4053      	eors	r3, r2
    8d64:	931d      	str	r3, [sp, #116]	; 0x74
    8d66:	f140 81ae 	bpl.w	90c6 <arm_softmax_s8+0x636>
    8d6a:	e9cd ec10 	strd	lr, ip, [sp, #64]	; 0x40
    const q31_t remainder_mask = (1 << exponent) - 1;
    8d6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8d70:	2301      	movs	r3, #1
    8d72:	4093      	lsls	r3, r2
    8d74:	3b01      	subs	r3, #1
    8d76:	9319      	str	r3, [sp, #100]	; 0x64
    q31_t threshold = remainder_mask >> 1;
    8d78:	105b      	asrs	r3, r3, #1
    8d7a:	931a      	str	r3, [sp, #104]	; 0x68
        threshold++;
    8d7c:	3301      	adds	r3, #1
    8d7e:	9320      	str	r3, [sp, #128]	; 0x80
    8d80:	2500      	movs	r5, #0
    8d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8d84:	429d      	cmp	r5, r3
    8d86:	f2c0 81b5 	blt.w	90f4 <arm_softmax_s8+0x664>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    8d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8d8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8d8e:	3301      	adds	r3, #1
    8d90:	9315      	str	r3, [sp, #84]	; 0x54
    8d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d94:	4413      	add	r3, r2
    8d96:	9312      	str	r3, [sp, #72]	; 0x48
    8d98:	e688      	b.n	8aac <arm_softmax_s8+0x1c>
            max = MAX(max, input[col]);
    8d9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8d9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8d9e:	56d2      	ldrsb	r2, [r2, r3]
    8da0:	4291      	cmp	r1, r2
    8da2:	bfb8      	it	lt
    8da4:	4611      	movlt	r1, r2
    8da6:	9113      	str	r1, [sp, #76]	; 0x4c
        for (col = 1; col < row_size; ++col)
    8da8:	3301      	adds	r3, #1
    8daa:	e692      	b.n	8ad2 <arm_softmax_s8+0x42>
    8dac:	c3c3c3c4 	.word	0xc3c3c3c4
    8db0:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
    8db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8db6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8db8:	569b      	ldrsb	r3, [r3, r2]
    8dba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8dbc:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
    8dbe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    8dc0:	429a      	cmp	r2, r3
    8dc2:	f300 817c 	bgt.w	90be <arm_softmax_s8+0x62e>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
    8dc6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8dc8:	4093      	lsls	r3, r2
    if ((m1 < 0) ^ (m2 < 0))
    8dca:	9a01      	ldr	r2, [sp, #4]
    8dcc:	0fd2      	lsrs	r2, r2, #31
    8dce:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
    mult = mult + (q63_t)m1 * m2;
    8dd2:	9a01      	ldr	r2, [sp, #4]
        mult = 1 - mult;
    8dd4:	bf19      	ittee	ne
    8dd6:	4676      	movne	r6, lr
    8dd8:	4667      	movne	r7, ip
    q63_t mult = 1 << 30;
    8dda:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    8dde:	2700      	moveq	r7, #0
    mult = mult + (q63_t)m1 * m2;
    8de0:	fbc2 6703 	smlal	r6, r7, r2, r3
    result = (int32_t)(mult / (1ll << 31));
    8de4:	2e00      	cmp	r6, #0
    8de6:	f177 0200 	sbcs.w	r2, r7, #0
    8dea:	da06      	bge.n	8dfa <arm_softmax_s8+0x36a>
    8dec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    8df0:	18b6      	adds	r6, r6, r2
    8df2:	f04f 0200 	mov.w	r2, #0
    8df6:	eb42 0707 	adc.w	r7, r2, r7
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    8dfa:	9801      	ldr	r0, [sp, #4]
    result = (int32_t)(mult / (1ll << 31));
    8dfc:	0ff2      	lsrs	r2, r6, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    8dfe:	4283      	cmp	r3, r0
    result = (int32_t)(mult / (1ll << 31));
    8e00:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    8e04:	d104      	bne.n	8e10 <arm_softmax_s8+0x380>
        result = Q31_MAX;
    8e06:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    8e0a:	bf08      	it	eq
    8e0c:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    8e10:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
    8e14:	1a83      	subs	r3, r0, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
    8e16:	0140      	lsls	r0, r0, #5
    8e18:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
    8e1c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    8e20:	2700      	movs	r7, #0
    8e22:	fbc0 6700 	smlal	r6, r7, r0, r0
    8e26:	4604      	mov	r4, r0
    8e28:	17c5      	asrs	r5, r0, #31
    result = (int32_t)(mult / (1ll << 31));
    8e2a:	2e00      	cmp	r6, #0
    mult = mult + (q63_t)m1 * m2;
    8e2c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    result = (int32_t)(mult / (1ll << 31));
    8e30:	f177 0400 	sbcs.w	r4, r7, #0
    8e34:	da06      	bge.n	8e44 <arm_softmax_s8+0x3b4>
    8e36:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    8e3a:	1976      	adds	r6, r6, r5
    8e3c:	f04f 0500 	mov.w	r5, #0
    8e40:	eb45 0707 	adc.w	r7, r5, r7
    8e44:	0ff5      	lsrs	r5, r6, #31
    8e46:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
    8e4a:	ea4f 79e7 	mov.w	r9, r7, asr #31
    mult = mult + (q63_t)m1 * m2;
    8e4e:	fb05 f809 	mul.w	r8, r5, r9
    8e52:	fba5 6705 	umull	r6, r7, r5, r5
    result = (int32_t)(mult / (1ll << 31));
    8e56:	f116 4480 	adds.w	r4, r6, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
    8e5a:	eb07 0748 	add.w	r7, r7, r8, lsl #1
    result = (int32_t)(mult / (1ll << 31));
    8e5e:	9402      	str	r4, [sp, #8]
    8e60:	f147 0400 	adc.w	r4, r7, #0
    8e64:	9403      	str	r4, [sp, #12]
    8e66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    8e6a:	2e00      	cmp	r6, #0
    8e6c:	f177 0400 	sbcs.w	r4, r7, #0
    8e70:	da0a      	bge.n	8e88 <arm_softmax_s8+0x3f8>
    8e72:	9c02      	ldr	r4, [sp, #8]
    8e74:	9f03      	ldr	r7, [sp, #12]
    8e76:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    8e7a:	19a4      	adds	r4, r4, r6
    8e7c:	f04f 0600 	mov.w	r6, #0
    8e80:	eb46 0707 	adc.w	r7, r6, r7
    8e84:	9402      	str	r4, [sp, #8]
    8e86:	9703      	str	r7, [sp, #12]
    8e88:	9c02      	ldr	r4, [sp, #8]
    8e8a:	ea4f 78d4 	mov.w	r8, r4, lsr #31
    8e8e:	9c03      	ldr	r4, [sp, #12]
    8e90:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
    int32_t remainder = remainder_mask & dividend;
    8e94:	f008 0603 	and.w	r6, r8, #3
        threshold++;
    8e98:	ea5f 08a8 	movs.w	r8, r8, asr #2
    8e9c:	bf54      	ite	pl
    8e9e:	2701      	movpl	r7, #1
    8ea0:	2702      	movmi	r7, #2
    if (remainder > threshold)
    8ea2:	42be      	cmp	r6, r7
    mult = mult + (q63_t)m1 * m2;
    8ea4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    if ((m1 < 0) ^ (m2 < 0))
    8ea6:	ea4f 76d0 	mov.w	r6, r0, lsr #31
        result++;
    8eaa:	bfc8      	it	gt
    8eac:	f108 0801 	addgt.w	r8, r8, #1
    mult = mult + (q63_t)m1 * m2;
    8eb0:	fb00 f909 	mul.w	r9, r0, r9
    if ((m1 < 0) ^ (m2 < 0))
    8eb4:	ebb6 7fd5 	cmp.w	r6, r5, lsr #31
    mult = mult + (q63_t)m1 * m2;
    8eb8:	fb05 9904 	mla	r9, r5, r4, r9
    8ebc:	fba0 6705 	umull	r6, r7, r0, r5
        mult = 1 - mult;
    8ec0:	bf15      	itete	ne
    8ec2:	46f2      	movne	sl, lr
    q63_t mult = 1 << 30;
    8ec4:	f04f 4a80 	moveq.w	sl, #1073741824	; 0x40000000
        mult = 1 - mult;
    8ec8:	46e3      	movne	fp, ip
    q63_t mult = 1 << 30;
    8eca:	f04f 0b00 	moveq.w	fp, #0
    mult = mult + (q63_t)m1 * m2;
    8ece:	444f      	add	r7, r9
    result = (int32_t)(mult / (1ll << 31));
    8ed0:	eb16 040a 	adds.w	r4, r6, sl
    8ed4:	9404      	str	r4, [sp, #16]
    8ed6:	eb47 040b 	adc.w	r4, r7, fp
    8eda:	9405      	str	r4, [sp, #20]
    8edc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    8ee0:	2e00      	cmp	r6, #0
    8ee2:	f177 0400 	sbcs.w	r4, r7, #0
    8ee6:	da0a      	bge.n	8efe <arm_softmax_s8+0x46e>
    8ee8:	9c04      	ldr	r4, [sp, #16]
    8eea:	9f05      	ldr	r7, [sp, #20]
    8eec:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    8ef0:	19a4      	adds	r4, r4, r6
    8ef2:	f04f 0600 	mov.w	r6, #0
    8ef6:	eb46 0707 	adc.w	r7, r6, r7
    8efa:	9404      	str	r4, [sp, #16]
    8efc:	9705      	str	r7, [sp, #20]
    8efe:	9c04      	ldr	r4, [sp, #16]
    8f00:	0fe6      	lsrs	r6, r4, #31
    8f02:	9c05      	ldr	r4, [sp, #20]
    8f04:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    if ((m1 < 0) ^ (m2 < 0))
    8f08:	eb18 0806 	adds.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
    8f0c:	4c71      	ldr	r4, [pc, #452]	; (90d4 <arm_softmax_s8+0x644>)
        mult = 1 - mult;
    8f0e:	bf47      	ittee	mi
    8f10:	4676      	movmi	r6, lr
    8f12:	4667      	movmi	r7, ip
    q63_t mult = 1 << 30;
    8f14:	f04f 4680 	movpl.w	r6, #1073741824	; 0x40000000
    8f18:	2700      	movpl	r7, #0
    mult = mult + (q63_t)m1 * m2;
    8f1a:	fbc4 6708 	smlal	r6, r7, r4, r8
    result = (int32_t)(mult / (1ll << 31));
    8f1e:	2e00      	cmp	r6, #0
    8f20:	f177 0400 	sbcs.w	r4, r7, #0
    mult = mult + (q63_t)m1 * m2;
    8f24:	46b1      	mov	r9, r6
    8f26:	46ba      	mov	sl, r7
    result = (int32_t)(mult / (1ll << 31));
    8f28:	da07      	bge.n	8f3a <arm_softmax_s8+0x4aa>
    8f2a:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    8f2e:	eb16 0908 	adds.w	r9, r6, r8
    8f32:	f04f 0800 	mov.w	r8, #0
    8f36:	eb47 0a08 	adc.w	sl, r7, r8
    8f3a:	ea4f 76d9 	mov.w	r6, r9, lsr #31
    8f3e:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    8f42:	4435      	add	r5, r6
    if (result < 0)
    8f44:	106e      	asrs	r6, r5, #1
    8f46:	d402      	bmi.n	8f4e <arm_softmax_s8+0x4be>
    if (remainder > threshold)
    8f48:	07ed      	lsls	r5, r5, #31
        result++;
    8f4a:	bf48      	it	mi
    8f4c:	3601      	addmi	r6, #1
    if ((m1 < 0) ^ (m2 < 0))
    8f4e:	1980      	adds	r0, r0, r6
    mult = mult + (q63_t)m1 * m2;
    8f50:	4c61      	ldr	r4, [pc, #388]	; (90d8 <arm_softmax_s8+0x648>)
        mult = 1 - mult;
    8f52:	bf47      	ittee	mi
    8f54:	4676      	movmi	r6, lr
    8f56:	4667      	movmi	r7, ip
    q63_t mult = 1 << 30;
    8f58:	f04f 4680 	movpl.w	r6, #1073741824	; 0x40000000
    8f5c:	2700      	movpl	r7, #0
    mult = mult + (q63_t)m1 * m2;
    8f5e:	fbc4 6700 	smlal	r6, r7, r4, r0
    result = (int32_t)(mult / (1ll << 31));
    8f62:	2e00      	cmp	r6, #0
    8f64:	f177 0000 	sbcs.w	r0, r7, #0
    8f68:	da06      	bge.n	8f78 <arm_softmax_s8+0x4e8>
    8f6a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8f6e:	1836      	adds	r6, r6, r0
    8f70:	f04f 0000 	mov.w	r0, #0
    8f74:	eb40 0707 	adc.w	r7, r0, r7
    8f78:	ea4f 7ad6 	mov.w	sl, r6, lsr #31
    8f7c:	ea4a 0a47 	orr.w	sl, sl, r7, lsl #1
    int32_t result = 1895147668 +
    8f80:	f10a 4ae2 	add.w	sl, sl, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
    8f84:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    8f88:	2700      	movs	r7, #0
    8f8a:	4854      	ldr	r0, [pc, #336]	; (90dc <arm_softmax_s8+0x64c>)
    8f8c:	4c54      	ldr	r4, [pc, #336]	; (90e0 <arm_softmax_s8+0x650>)
    int32_t result = 1895147668 +
    8f8e:	f5aa 2a25 	sub.w	sl, sl, #675840	; 0xa5000
    8f92:	f2aa 7a6c 	subw	sl, sl, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
    8f96:	46b0      	mov	r8, r6
    8f98:	46b9      	mov	r9, r7
    8f9a:	fbc0 890a 	smlal	r8, r9, r0, sl
    SELECT_IF_NON_ZERO(1672461947)
    8f9e:	f3c3 6b00 	ubfx	fp, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
    8fa2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
    8fa6:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    8faa:	f343 6500 	sbfx	r5, r3, #24, #1
    8fae:	f10b 3bff 	add.w	fp, fp, #4294967295
    8fb2:	ea0b 0b0a 	and.w	fp, fp, sl
    8fb6:	4005      	ands	r5, r0
    mult = mult + (q63_t)m1 * m2;
    8fb8:	484a      	ldr	r0, [pc, #296]	; (90e4 <arm_softmax_s8+0x654>)
    SELECT_IF_NON_ZERO(1672461947)
    8fba:	ea85 050b 	eor.w	r5, r5, fp
    mult = mult + (q63_t)m1 * m2;
    8fbe:	46b0      	mov	r8, r6
    8fc0:	46b9      	mov	r9, r7
    8fc2:	fbc0 8905 	smlal	r8, r9, r0, r5
    SELECT_IF_NON_ZERO(1302514674)
    8fc6:	f3c3 6a40 	ubfx	sl, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
    8fca:	ea4f 70d8 	mov.w	r0, r8, lsr #31
    SELECT_IF_NON_ZERO(1302514674)
    8fce:	f343 6b40 	sbfx	fp, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
    8fd2:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
    8fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
    8fda:	ea0a 0a05 	and.w	sl, sl, r5
    8fde:	ea0b 0000 	and.w	r0, fp, r0
    8fe2:	ea80 000a 	eor.w	r0, r0, sl
    mult = mult + (q63_t)m1 * m2;
    8fe6:	46b0      	mov	r8, r6
    8fe8:	46b9      	mov	r9, r7
    8fea:	fbc4 8900 	smlal	r8, r9, r4, r0
    SELECT_IF_NON_ZERO(790015084)
    8fee:	f3c3 6580 	ubfx	r5, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
    8ff2:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    8ff6:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(790015084)
    8ffa:	f343 6b80 	sbfx	fp, r3, #26, #1
    8ffe:	3d01      	subs	r5, #1
    9000:	4005      	ands	r5, r0
    mult = mult + (q63_t)m1 * m2;
    9002:	4c39      	ldr	r4, [pc, #228]	; (90e8 <arm_softmax_s8+0x658>)
    SELECT_IF_NON_ZERO(790015084)
    9004:	ea0b 0b08 	and.w	fp, fp, r8
    9008:	ea8b 0b05 	eor.w	fp, fp, r5
    mult = mult + (q63_t)m1 * m2;
    900c:	46b0      	mov	r8, r6
    900e:	46b9      	mov	r9, r7
    9010:	fbc4 890b 	smlal	r8, r9, r4, fp
    SELECT_IF_NON_ZERO(290630308)
    9014:	f3c3 60c0 	ubfx	r0, r3, #27, #1
    result = (int32_t)(mult / (1ll << 31));
    9018:	ea4f 75d8 	mov.w	r5, r8, lsr #31
    901c:	ea45 0549 	orr.w	r5, r5, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
    9020:	f343 6ac0 	sbfx	sl, r3, #27, #1
    9024:	3801      	subs	r0, #1
    9026:	ea00 000b 	and.w	r0, r0, fp
    902a:	ea0a 0a05 	and.w	sl, sl, r5
    902e:	ea8a 0a00 	eor.w	sl, sl, r0
    mult = mult + (q63_t)m1 * m2;
    9032:	482e      	ldr	r0, [pc, #184]	; (90ec <arm_softmax_s8+0x65c>)
    9034:	46b0      	mov	r8, r6
    9036:	46b9      	mov	r9, r7
    9038:	fbc0 890a 	smlal	r8, r9, r0, sl
    SELECT_IF_NON_ZERO(39332535)
    903c:	f3c3 7b00 	ubfx	fp, r3, #28, #1
    result = (int32_t)(mult / (1ll << 31));
    9040:	ea4f 70d8 	mov.w	r0, r8, lsr #31
    9044:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
    9048:	f343 7500 	sbfx	r5, r3, #28, #1
    904c:	f10b 3bff 	add.w	fp, fp, #4294967295
    9050:	4005      	ands	r5, r0
    9052:	ea0b 0b0a 	and.w	fp, fp, sl
    mult = mult + (q63_t)m1 * m2;
    9056:	4826      	ldr	r0, [pc, #152]	; (90f0 <arm_softmax_s8+0x660>)
    SELECT_IF_NON_ZERO(39332535)
    9058:	ea85 050b 	eor.w	r5, r5, fp
    mult = mult + (q63_t)m1 * m2;
    905c:	46b0      	mov	r8, r6
    905e:	46b9      	mov	r9, r7
    9060:	fbc0 8905 	smlal	r8, r9, r0, r5
    SELECT_IF_NON_ZERO(720401)
    9064:	f3c3 7a40 	ubfx	sl, r3, #29, #1
    result = (int32_t)(mult / (1ll << 31));
    9068:	ea4f 70d8 	mov.w	r0, r8, lsr #31
    906c:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
    9070:	f343 7840 	sbfx	r8, r3, #29, #1
    9074:	f10a 3aff 	add.w	sl, sl, #4294967295
    9078:	ea08 0000 	and.w	r0, r8, r0
    907c:	ea0a 0a05 	and.w	sl, sl, r5
    9080:	ea80 000a 	eor.w	r0, r0, sl
    mult = mult + (q63_t)m1 * m2;
    9084:	f04f 08f2 	mov.w	r8, #242	; 0xf2
    9088:	fbc8 6700 	smlal	r6, r7, r8, r0
    SELECT_IF_NON_ZERO(242)
    908c:	f3c3 7580 	ubfx	r5, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
    9090:	0ff6      	lsrs	r6, r6, #31
    9092:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    SELECT_IF_NON_ZERO(242)
    9096:	f343 7380 	sbfx	r3, r3, #30, #1
    909a:	3d01      	subs	r5, #1
    mask = MASK_IF_ZERO(val);
    909c:	fab2 f282 	clz	r2, r2
    90a0:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
    90a2:	4033      	ands	r3, r6
    90a4:	4005      	ands	r5, r0
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    90a6:	1e57      	subs	r7, r2, #1
    SELECT_IF_NON_ZERO(242)
    90a8:	406b      	eors	r3, r5
    mask = MASK_IF_ZERO(val);
    90aa:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    90ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    90b0:	403b      	ands	r3, r7
    90b2:	4053      	eors	r3, r2
    result = dividend >> exponent;
    90b4:	131a      	asrs	r2, r3, #12
    if (remainder > threshold)
    90b6:	051c      	lsls	r4, r3, #20
        result++;
    90b8:	bf48      	it	mi
    90ba:	3201      	addmi	r2, #1
    90bc:	4411      	add	r1, r2
        for (col = 0; col < row_size; ++col)
    90be:	9b10      	ldr	r3, [sp, #64]	; 0x40
    90c0:	3301      	adds	r3, #1
    90c2:	9310      	str	r3, [sp, #64]	; 0x40
    90c4:	e50b      	b.n	8ade <arm_softmax_s8+0x4e>
    90c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    90ca:	2400      	movs	r4, #0
    90cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    90d0:	e64d      	b.n	8d6e <arm_softmax_s8+0x2de>
    90d2:	bf00      	nop
    90d4:	2aaaaaab 	.word	0x2aaaaaab
    90d8:	70f5a894 	.word	0x70f5a894
    90dc:	63afbe7b 	.word	0x63afbe7b
    90e0:	2f16ac6c 	.word	0x2f16ac6c
    90e4:	4da2cbf2 	.word	0x4da2cbf2
    90e8:	1152aaa4 	.word	0x1152aaa4
    90ec:	02582ab7 	.word	0x02582ab7
    90f0:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
    90f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    90f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    90f8:	575b      	ldrsb	r3, [r3, r5]
    90fa:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
    90fc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    90fe:	4293      	cmp	r3, r2
    9100:	f2c0 81a4 	blt.w	944c <arm_softmax_s8+0x9bc>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
    9104:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    9106:	4093      	lsls	r3, r2
    if ((m1 < 0) ^ (m2 < 0))
    9108:	9a01      	ldr	r2, [sp, #4]
    910a:	0fd2      	lsrs	r2, r2, #31
    910c:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
    mult = mult + (q63_t)m1 * m2;
    9110:	9a01      	ldr	r2, [sp, #4]
        mult = 1 - mult;
    9112:	bf19      	ittee	ne
    9114:	4670      	movne	r0, lr
    9116:	4661      	movne	r1, ip
    q63_t mult = 1 << 30;
    9118:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
    911c:	2100      	moveq	r1, #0
    mult = mult + (q63_t)m1 * m2;
    911e:	fbc2 0103 	smlal	r0, r1, r2, r3
    result = (int32_t)(mult / (1ll << 31));
    9122:	2800      	cmp	r0, #0
    9124:	f171 0200 	sbcs.w	r2, r1, #0
    9128:	da06      	bge.n	9138 <arm_softmax_s8+0x6a8>
    912a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    912e:	1880      	adds	r0, r0, r2
    9130:	f04f 0200 	mov.w	r2, #0
    9134:	eb42 0101 	adc.w	r1, r2, r1
    9138:	0fc2      	lsrs	r2, r0, #31
    913a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    913e:	9901      	ldr	r1, [sp, #4]
    9140:	428b      	cmp	r3, r1
    9142:	d104      	bne.n	914e <arm_softmax_s8+0x6be>
        result = Q31_MAX;
    9144:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    9148:	bf08      	it	eq
    914a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    914e:	f042 417f 	orr.w	r1, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
    9152:	1a8b      	subs	r3, r1, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
    9154:	0149      	lsls	r1, r1, #5
    9156:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
    915a:	460e      	mov	r6, r1
    915c:	17cf      	asrs	r7, r1, #31
    915e:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
    9162:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    9166:	2700      	movs	r7, #0
    9168:	fbc1 6701 	smlal	r6, r7, r1, r1
    result = (int32_t)(mult / (1ll << 31));
    916c:	2e00      	cmp	r6, #0
    916e:	f177 0000 	sbcs.w	r0, r7, #0
    9172:	da06      	bge.n	9182 <arm_softmax_s8+0x6f2>
    9174:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9178:	1836      	adds	r6, r6, r0
    917a:	f04f 0000 	mov.w	r0, #0
    917e:	eb40 0707 	adc.w	r7, r0, r7
    9182:	0ff0      	lsrs	r0, r6, #31
    9184:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    9188:	ea4f 79e7 	mov.w	r9, r7, asr #31
    mult = mult + (q63_t)m1 * m2;
    918c:	fb00 f809 	mul.w	r8, r0, r9
    9190:	fba0 6700 	umull	r6, r7, r0, r0
    result = (int32_t)(mult / (1ll << 31));
    9194:	f116 4480 	adds.w	r4, r6, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
    9198:	eb07 0748 	add.w	r7, r7, r8, lsl #1
    result = (int32_t)(mult / (1ll << 31));
    919c:	940c      	str	r4, [sp, #48]	; 0x30
    919e:	f147 0400 	adc.w	r4, r7, #0
    91a2:	940d      	str	r4, [sp, #52]	; 0x34
    91a4:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    91a8:	2e00      	cmp	r6, #0
    91aa:	f177 0400 	sbcs.w	r4, r7, #0
    91ae:	da0a      	bge.n	91c6 <arm_softmax_s8+0x736>
    91b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    91b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    91b4:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    91b8:	19a4      	adds	r4, r4, r6
    91ba:	f04f 0600 	mov.w	r6, #0
    91be:	eb46 0707 	adc.w	r7, r6, r7
    91c2:	940c      	str	r4, [sp, #48]	; 0x30
    91c4:	970d      	str	r7, [sp, #52]	; 0x34
    91c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    91c8:	ea4f 78d4 	mov.w	r8, r4, lsr #31
    91cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    91ce:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
    int32_t remainder = remainder_mask & dividend;
    91d2:	f008 0703 	and.w	r7, r8, #3
        threshold++;
    91d6:	ea5f 08a8 	movs.w	r8, r8, asr #2
    91da:	bf54      	ite	pl
    91dc:	2601      	movpl	r6, #1
    91de:	2602      	movmi	r6, #2
    if (remainder > threshold)
    91e0:	42b7      	cmp	r7, r6
    mult = mult + (q63_t)m1 * m2;
    91e2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    if ((m1 < 0) ^ (m2 < 0))
    91e4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
        result++;
    91e8:	bfc8      	it	gt
    91ea:	f108 0801 	addgt.w	r8, r8, #1
    mult = mult + (q63_t)m1 * m2;
    91ee:	fb01 f909 	mul.w	r9, r1, r9
    if ((m1 < 0) ^ (m2 < 0))
    91f2:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
    mult = mult + (q63_t)m1 * m2;
    91f6:	fb00 9904 	mla	r9, r0, r4, r9
    91fa:	fba1 6700 	umull	r6, r7, r1, r0
        mult = 1 - mult;
    91fe:	bf15      	itete	ne
    9200:	46f2      	movne	sl, lr
    q63_t mult = 1 << 30;
    9202:	f04f 4a80 	moveq.w	sl, #1073741824	; 0x40000000
        mult = 1 - mult;
    9206:	46e3      	movne	fp, ip
    q63_t mult = 1 << 30;
    9208:	f04f 0b00 	moveq.w	fp, #0
    mult = mult + (q63_t)m1 * m2;
    920c:	444f      	add	r7, r9
    result = (int32_t)(mult / (1ll << 31));
    920e:	eb16 040a 	adds.w	r4, r6, sl
    9212:	940e      	str	r4, [sp, #56]	; 0x38
    9214:	eb47 040b 	adc.w	r4, r7, fp
    9218:	940f      	str	r4, [sp, #60]	; 0x3c
    921a:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    921e:	2e00      	cmp	r6, #0
    9220:	f177 0400 	sbcs.w	r4, r7, #0
    9224:	da0a      	bge.n	923c <arm_softmax_s8+0x7ac>
    9226:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9228:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    922a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    922e:	19a4      	adds	r4, r4, r6
    9230:	f04f 0600 	mov.w	r6, #0
    9234:	eb46 0707 	adc.w	r7, r6, r7
    9238:	940e      	str	r4, [sp, #56]	; 0x38
    923a:	970f      	str	r7, [sp, #60]	; 0x3c
    923c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    923e:	0fe6      	lsrs	r6, r4, #31
    9240:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    9242:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    if ((m1 < 0) ^ (m2 < 0))
    9246:	eb18 0806 	adds.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
    924a:	4c82      	ldr	r4, [pc, #520]	; (9454 <arm_softmax_s8+0x9c4>)
        mult = 1 - mult;
    924c:	bf47      	ittee	mi
    924e:	4676      	movmi	r6, lr
    9250:	4667      	movmi	r7, ip
    q63_t mult = 1 << 30;
    9252:	f04f 4680 	movpl.w	r6, #1073741824	; 0x40000000
    9256:	2700      	movpl	r7, #0
    mult = mult + (q63_t)m1 * m2;
    9258:	fbc4 6708 	smlal	r6, r7, r4, r8
    result = (int32_t)(mult / (1ll << 31));
    925c:	2e00      	cmp	r6, #0
    925e:	f177 0400 	sbcs.w	r4, r7, #0
    mult = mult + (q63_t)m1 * m2;
    9262:	46b1      	mov	r9, r6
    9264:	46ba      	mov	sl, r7
    result = (int32_t)(mult / (1ll << 31));
    9266:	da07      	bge.n	9278 <arm_softmax_s8+0x7e8>
    9268:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    926c:	eb16 0908 	adds.w	r9, r6, r8
    9270:	f04f 0800 	mov.w	r8, #0
    9274:	eb47 0a08 	adc.w	sl, r7, r8
    9278:	ea4f 76d9 	mov.w	r6, r9, lsr #31
    927c:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    9280:	4430      	add	r0, r6
    if (result < 0)
    9282:	1046      	asrs	r6, r0, #1
    9284:	d402      	bmi.n	928c <arm_softmax_s8+0x7fc>
    if (remainder > threshold)
    9286:	07c0      	lsls	r0, r0, #31
        result++;
    9288:	bf48      	it	mi
    928a:	3601      	addmi	r6, #1
    if ((m1 < 0) ^ (m2 < 0))
    928c:	198e      	adds	r6, r1, r6
    mult = mult + (q63_t)m1 * m2;
    928e:	4c72      	ldr	r4, [pc, #456]	; (9458 <arm_softmax_s8+0x9c8>)
        mult = 1 - mult;
    9290:	bf47      	ittee	mi
    9292:	4670      	movmi	r0, lr
    9294:	4661      	movmi	r1, ip
    q63_t mult = 1 << 30;
    9296:	f04f 4080 	movpl.w	r0, #1073741824	; 0x40000000
    929a:	2100      	movpl	r1, #0
    mult = mult + (q63_t)m1 * m2;
    929c:	fbc4 0106 	smlal	r0, r1, r4, r6
    result = (int32_t)(mult / (1ll << 31));
    92a0:	2800      	cmp	r0, #0
    92a2:	f171 0400 	sbcs.w	r4, r1, #0
    92a6:	da06      	bge.n	92b6 <arm_softmax_s8+0x826>
    92a8:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    92ac:	1980      	adds	r0, r0, r6
    92ae:	f04f 0600 	mov.w	r6, #0
    92b2:	eb46 0101 	adc.w	r1, r6, r1
    92b6:	ea4f 79d0 	mov.w	r9, r0, lsr #31
    92ba:	ea49 0941 	orr.w	r9, r9, r1, lsl #1
    int32_t result = 1895147668 +
    92be:	f109 49e2 	add.w	r9, r9, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
    92c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    92c6:	2100      	movs	r1, #0
    92c8:	4c64      	ldr	r4, [pc, #400]	; (945c <arm_softmax_s8+0x9cc>)
    int32_t result = 1895147668 +
    92ca:	f5a9 2925 	sub.w	r9, r9, #675840	; 0xa5000
    92ce:	f2a9 796c 	subw	r9, r9, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
    92d2:	4606      	mov	r6, r0
    92d4:	460f      	mov	r7, r1
    92d6:	fbc4 6709 	smlal	r6, r7, r4, r9
    SELECT_IF_NON_ZERO(1672461947)
    92da:	f3c3 6a00 	ubfx	sl, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
    92de:	0ff6      	lsrs	r6, r6, #31
    92e0:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    92e4:	f343 6800 	sbfx	r8, r3, #24, #1
    92e8:	f10a 3aff 	add.w	sl, sl, #4294967295
    92ec:	ea0a 0a09 	and.w	sl, sl, r9
    mult = mult + (q63_t)m1 * m2;
    92f0:	4c5b      	ldr	r4, [pc, #364]	; (9460 <arm_softmax_s8+0x9d0>)
    SELECT_IF_NON_ZERO(1672461947)
    92f2:	ea08 0806 	and.w	r8, r8, r6
    92f6:	ea88 080a 	eor.w	r8, r8, sl
    mult = mult + (q63_t)m1 * m2;
    92fa:	4606      	mov	r6, r0
    92fc:	460f      	mov	r7, r1
    92fe:	fbc4 6708 	smlal	r6, r7, r4, r8
    SELECT_IF_NON_ZERO(1302514674)
    9302:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
    9306:	0ff6      	lsrs	r6, r6, #31
    9308:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
    930c:	f343 6b40 	sbfx	fp, r3, #25, #1
    9310:	f109 39ff 	add.w	r9, r9, #4294967295
    9314:	ea09 0908 	and.w	r9, r9, r8
    mult = mult + (q63_t)m1 * m2;
    9318:	4c52      	ldr	r4, [pc, #328]	; (9464 <arm_softmax_s8+0x9d4>)
    SELECT_IF_NON_ZERO(1302514674)
    931a:	ea0b 0b06 	and.w	fp, fp, r6
    931e:	ea8b 0b09 	eor.w	fp, fp, r9
    mult = mult + (q63_t)m1 * m2;
    9322:	4606      	mov	r6, r0
    9324:	460f      	mov	r7, r1
    9326:	fbc4 670b 	smlal	r6, r7, r4, fp
    SELECT_IF_NON_ZERO(790015084)
    932a:	f3c3 6880 	ubfx	r8, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
    932e:	0ff6      	lsrs	r6, r6, #31
    9330:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    SELECT_IF_NON_ZERO(790015084)
    9334:	f343 6a80 	sbfx	sl, r3, #26, #1
    9338:	f108 38ff 	add.w	r8, r8, #4294967295
    933c:	ea08 080b 	and.w	r8, r8, fp
    mult = mult + (q63_t)m1 * m2;
    9340:	4c49      	ldr	r4, [pc, #292]	; (9468 <arm_softmax_s8+0x9d8>)
    SELECT_IF_NON_ZERO(790015084)
    9342:	ea0a 0a06 	and.w	sl, sl, r6
    9346:	ea8a 0a08 	eor.w	sl, sl, r8
    mult = mult + (q63_t)m1 * m2;
    934a:	4606      	mov	r6, r0
    934c:	460f      	mov	r7, r1
    934e:	fbc4 670a 	smlal	r6, r7, r4, sl
    SELECT_IF_NON_ZERO(290630308)
    9352:	f3c3 6bc0 	ubfx	fp, r3, #27, #1
    result = (int32_t)(mult / (1ll << 31));
    9356:	0ff6      	lsrs	r6, r6, #31
    9358:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    SELECT_IF_NON_ZERO(290630308)
    935c:	f343 69c0 	sbfx	r9, r3, #27, #1
    9360:	f10b 3bff 	add.w	fp, fp, #4294967295
    9364:	ea0b 0b0a 	and.w	fp, fp, sl
    9368:	ea09 0906 	and.w	r9, r9, r6
    mult = mult + (q63_t)m1 * m2;
    936c:	4c3f      	ldr	r4, [pc, #252]	; (946c <arm_softmax_s8+0x9dc>)
    SELECT_IF_NON_ZERO(290630308)
    936e:	ea89 090b 	eor.w	r9, r9, fp
    mult = mult + (q63_t)m1 * m2;
    9372:	4606      	mov	r6, r0
    9374:	460f      	mov	r7, r1
    9376:	fbc4 6709 	smlal	r6, r7, r4, r9
    SELECT_IF_NON_ZERO(39332535)
    937a:	f3c3 7a00 	ubfx	sl, r3, #28, #1
    result = (int32_t)(mult / (1ll << 31));
    937e:	0ff6      	lsrs	r6, r6, #31
    9380:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    SELECT_IF_NON_ZERO(39332535)
    9384:	f343 7800 	sbfx	r8, r3, #28, #1
    9388:	f10a 3aff 	add.w	sl, sl, #4294967295
    938c:	ea0a 0a09 	and.w	sl, sl, r9
    9390:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
    9394:	4e36      	ldr	r6, [pc, #216]	; (9470 <arm_softmax_s8+0x9e0>)
    SELECT_IF_NON_ZERO(39332535)
    9396:	ea88 080a 	eor.w	r8, r8, sl
    mult = mult + (q63_t)m1 * m2;
    939a:	468b      	mov	fp, r1
    939c:	4682      	mov	sl, r0
    939e:	fbc6 ab08 	smlal	sl, fp, r6, r8
    SELECT_IF_NON_ZERO(720401)
    93a2:	f3c3 7940 	ubfx	r9, r3, #29, #1
    result = (int32_t)(mult / (1ll << 31));
    93a6:	ea4f 76da 	mov.w	r6, sl, lsr #31
    SELECT_IF_NON_ZERO(720401)
    93aa:	f343 7740 	sbfx	r7, r3, #29, #1
    result = (int32_t)(mult / (1ll << 31));
    93ae:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
    SELECT_IF_NON_ZERO(720401)
    93b2:	f109 39ff 	add.w	r9, r9, #4294967295
    93b6:	403e      	ands	r6, r7
    93b8:	ea09 0908 	and.w	r9, r9, r8
    93bc:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
    93c0:	f04f 08f2 	mov.w	r8, #242	; 0xf2
    93c4:	fbc8 0106 	smlal	r0, r1, r8, r6
    SELECT_IF_NON_ZERO(242)
    93c8:	f3c3 7780 	ubfx	r7, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
    93cc:	0fc0      	lsrs	r0, r0, #31
    93ce:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
    SELECT_IF_NON_ZERO(242)
    93d2:	3f01      	subs	r7, #1
    93d4:	f343 7380 	sbfx	r3, r3, #30, #1
    mask = MASK_IF_ZERO(val);
    93d8:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
    93dc:	403e      	ands	r6, r7
    mask = MASK_IF_ZERO(val);
    93de:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
    93e0:	4003      	ands	r3, r0
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    93e2:	1e51      	subs	r1, r2, #1
    SELECT_IF_NON_ZERO(242)
    93e4:	4073      	eors	r3, r6
    mask = MASK_IF_ZERO(val);
    93e6:	4252      	negs	r2, r2
    mult = mult + (q63_t)m1 * m2;
    93e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    93ec:	400b      	ands	r3, r1
    93ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
    93f2:	991d      	ldr	r1, [sp, #116]	; 0x74
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    93f4:	4053      	eors	r3, r2
    mult = mult + (q63_t)m1 * m2;
    93f6:	fbc3 6701 	smlal	r6, r7, r3, r1
    result = (int32_t)(mult / (1ll << 31));
    93fa:	2e00      	cmp	r6, #0
    93fc:	f177 0300 	sbcs.w	r3, r7, #0
    9400:	da06      	bge.n	9410 <arm_softmax_s8+0x980>
    9402:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9406:	1876      	adds	r6, r6, r1
    9408:	f04f 0100 	mov.w	r1, #0
    940c:	eb41 0707 	adc.w	r7, r1, r7
    q31_t threshold = remainder_mask >> 1;
    9410:	9916      	ldr	r1, [sp, #88]	; 0x58
    int32_t remainder = remainder_mask & dividend;
    9412:	9b19      	ldr	r3, [sp, #100]	; 0x64
    q31_t threshold = remainder_mask >> 1;
    9414:	981a      	ldr	r0, [sp, #104]	; 0x68
    result = (int32_t)(mult / (1ll << 31));
    9416:	0ff2      	lsrs	r2, r6, #31
    9418:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    int32_t remainder = remainder_mask & dividend;
    941c:	4013      	ands	r3, r2
    q31_t threshold = remainder_mask >> 1;
    941e:	410a      	asrs	r2, r1
    9420:	9920      	ldr	r1, [sp, #128]	; 0x80
    9422:	bf58      	it	pl
    9424:	4601      	movpl	r1, r0
    if (remainder > threshold)
    9426:	428b      	cmp	r3, r1
        result++;
    9428:	bfc8      	it	gt
    942a:	3201      	addgt	r2, #1
                const int32_t res =
    942c:	3a80      	subs	r2, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
    942e:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
    9432:	db06      	blt.n	9442 <arm_softmax_s8+0x9b2>
    9434:	2a7e      	cmp	r2, #126	; 0x7e
    9436:	dc07      	bgt.n	9448 <arm_softmax_s8+0x9b8>
    9438:	b252      	sxtb	r2, r2
    943a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    943c:	555a      	strb	r2, [r3, r5]
        for (col = 0; col < row_size; ++col)
    943e:	3501      	adds	r5, #1
    9440:	e49f      	b.n	8d82 <arm_softmax_s8+0x2f2>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
    9442:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    9446:	e7f8      	b.n	943a <arm_softmax_s8+0x9aa>
    9448:	227f      	movs	r2, #127	; 0x7f
    944a:	e7f6      	b.n	943a <arm_softmax_s8+0x9aa>
                output[col] = -128;
    944c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    944e:	2380      	movs	r3, #128	; 0x80
    9450:	5553      	strb	r3, [r2, r5]
    9452:	e7f4      	b.n	943e <arm_softmax_s8+0x9ae>
    9454:	2aaaaaab 	.word	0x2aaaaaab
    9458:	70f5a894 	.word	0x70f5a894
    945c:	63afbe7b 	.word	0x63afbe7b
    9460:	4da2cbf2 	.word	0x4da2cbf2
    9464:	2f16ac6c 	.word	0x2f16ac6c
    9468:	1152aaa4 	.word	0x1152aaa4
    946c:	02582ab7 	.word	0x02582ab7
    9470:	000afe11 	.word	0x000afe11

00009474 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    9474:	2810      	cmp	r0, #16
    9476:	bf9a      	itte	ls
    9478:	4b02      	ldrls	r3, [pc, #8]	; (9484 <TfLiteTypeGetName+0x10>)
    947a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
    947e:	4802      	ldrhi	r0, [pc, #8]	; (9488 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
    9480:	4770      	bx	lr
    9482:	bf00      	nop
    9484:	0002fb64 	.word	0x0002fb64
    9488:	000464c6 	.word	0x000464c6

0000948c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    948c:	4a05      	ldr	r2, [pc, #20]	; (94a4 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
    948e:	e9d2 3200 	ldrd	r3, r2, [r2]
    9492:	1ad2      	subs	r2, r2, r3

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    9494:	ebb1 0fe2 	cmp.w	r1, r2, asr #3
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
    9498:	bfba      	itte	lt
    949a:	eb03 01c1 	addlt.w	r1, r3, r1, lsl #3
    949e:	6848      	ldrlt	r0, [r1, #4]
    return NULL;
    94a0:	2000      	movge	r0, #0
}
    94a2:	4770      	bx	lr
    94a4:	2000117c 	.word	0x2000117c

000094a8 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}
    94a8:	4801      	ldr	r0, [pc, #4]	; (94b0 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x8>)
    94aa:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    94ae:	4770      	bx	lr
    94b0:	20000820 	.word	0x20000820

000094b4 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}
    94b4:	4b02      	ldr	r3, [pc, #8]	; (94c0 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xc>)
    94b6:	200c      	movs	r0, #12
    94b8:	fb00 3001 	mla	r0, r0, r1, r3
    94bc:	4770      	bx	lr
    94be:	bf00      	nop
    94c0:	20000e84 	.word	0x20000e84

000094c4 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
    94c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94c8:	4603      	mov	r3, r0
    94ca:	b089      	sub	sp, #36	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
    94cc:	f641 4170 	movw	r1, #7280	; 0x1c70
    94d0:	2010      	movs	r0, #16
    94d2:	4798      	blx	r3
    94d4:	4b6e      	ldr	r3, [pc, #440]	; (9690 <_Z18trained_model_initPFPvjjE+0x1cc>)
    94d6:	4604      	mov	r4, r0
    94d8:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
    94da:	b930      	cbnz	r0, 94ea <_Z18trained_model_initPFPvjjE+0x26>
    printf("ERR: failed to allocate tensor arena\n");
    94dc:	486d      	ldr	r0, [pc, #436]	; (9694 <_Z18trained_model_initPFPvjjE+0x1d0>)
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    94de:	f007 fc11 	bl	10d04 <iprintf>
    return kTfLiteError;
    94e2:	2001      	movs	r0, #1
        return status;
      }
    }
  }
  return kTfLiteOk;
}
    94e4:	b009      	add	sp, #36	; 0x24
    94e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  current_location = tensor_arena + kTensorArenaSize;
    94ea:	4b6b      	ldr	r3, [pc, #428]	; (9698 <_Z18trained_model_initPFPvjjE+0x1d4>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
    94ec:	4a6b      	ldr	r2, [pc, #428]	; (969c <_Z18trained_model_initPFPvjjE+0x1d8>)
  tensor_boundary = tensor_arena;
    94ee:	4d6c      	ldr	r5, [pc, #432]	; (96a0 <_Z18trained_model_initPFPvjjE+0x1dc>)
    94f0:	4e6c      	ldr	r6, [pc, #432]	; (96a4 <_Z18trained_model_initPFPvjjE+0x1e0>)
    94f2:	6028      	str	r0, [r5, #0]
  current_location = tensor_arena + kTensorArenaSize;
    94f4:	f500 57e3 	add.w	r7, r0, #7264	; 0x1c60
    94f8:	3710      	adds	r7, #16
    94fa:	601f      	str	r7, [r3, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
    94fc:	4b6a      	ldr	r3, [pc, #424]	; (96a8 <_Z18trained_model_initPFPvjjE+0x1e4>)
    94fe:	6393      	str	r3, [r2, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
    9500:	4b6a      	ldr	r3, [pc, #424]	; (96ac <_Z18trained_model_initPFPvjjE+0x1e8>)
    9502:	6413      	str	r3, [r2, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
    9504:	4b6a      	ldr	r3, [pc, #424]	; (96b0 <_Z18trained_model_initPFPvjjE+0x1ec>)
    9506:	6453      	str	r3, [r2, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
    9508:	4b6a      	ldr	r3, [pc, #424]	; (96b4 <_Z18trained_model_initPFPvjjE+0x1f0>)
    950a:	6513      	str	r3, [r2, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
    950c:	4b6a      	ldr	r3, [pc, #424]	; (96b8 <_Z18trained_model_initPFPvjjE+0x1f4>)
    950e:	6553      	str	r3, [r2, #84]	; 0x54
  ctx.tensors_size = 23;
    9510:	2117      	movs	r1, #23
  ctx.tensors = tflTensors;
    9512:	4b6a      	ldr	r3, [pc, #424]	; (96bc <_Z18trained_model_initPFPvjjE+0x1f8>)
    9514:	6093      	str	r3, [r2, #8]
  ctx.tensors_size = 23;
    9516:	6011      	str	r1, [r2, #0]
  for(size_t i = 0; i < 23; ++i) {
    9518:	f04f 0c00 	mov.w	ip, #0
    951c:	4a68      	ldr	r2, [pc, #416]	; (96c0 <_Z18trained_model_initPFPvjjE+0x1fc>)
    tflTensors[i].is_variable = 0;
    951e:	46e6      	mov	lr, ip
    tflTensors[i].type = tensorData[i].type;
    9520:	7851      	ldrb	r1, [r2, #1]
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    9522:	f892 9000 	ldrb.w	r9, [r2]
    tflTensors[i].type = tensorData[i].type;
    9526:	7019      	strb	r1, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
    9528:	7231      	strb	r1, [r6, #8]
    tflTensors[i].dims = tensorData[i].dims;
    952a:	6891      	ldr	r1, [r2, #8]
    952c:	6099      	str	r1, [r3, #8]
    tflEvalTensors[i].dims = tensorData[i].dims;
    952e:	6071      	str	r1, [r6, #4]
    9530:	6851      	ldr	r1, [r2, #4]
    tflTensors[i].bytes = tensorData[i].bytes;
    9532:	f8d2 800c 	ldr.w	r8, [r2, #12]
    tflTensors[i].is_variable = 0;
    9536:	f883 e02d 	strb.w	lr, [r3, #45]	; 0x2d
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
    953a:	f1b9 0f02 	cmp.w	r9, #2
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
    953e:	bf08      	it	eq
    9540:	1909      	addeq	r1, r1, r4
       tflTensors[i].data.data = tensorData[i].data;
    9542:	6059      	str	r1, [r3, #4]
       tflEvalTensors[i].data.data = tensorData[i].data;
    9544:	6031      	str	r1, [r6, #0]
    tflTensors[i].quantization = tensorData[i].quantization;
    9546:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
    954a:	f103 0a30 	add.w	sl, r3, #48	; 0x30
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    954e:	f883 9014 	strb.w	r9, [r3, #20]
    tflTensors[i].bytes = tensorData[i].bytes;
    9552:	f8c3 8018 	str.w	r8, [r3, #24]
    tflTensors[i].quantization = tensorData[i].quantization;
    9556:	e88a 0003 	stmia.w	sl, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
    955a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    955e:	2901      	cmp	r1, #1
    9560:	d106      	bne.n	9570 <_Z18trained_model_initPFPvjjE+0xac>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    9562:	6951      	ldr	r1, [r2, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
    9564:	6808      	ldr	r0, [r1, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    9566:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
    9568:	6840      	ldr	r0, [r0, #4]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    956a:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
    956c:	60d8      	str	r0, [r3, #12]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    956e:	6119      	str	r1, [r3, #16]
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
    9570:	f1b9 0f02 	cmp.w	r9, #2
    9574:	d105      	bne.n	9582 <_Z18trained_model_initPFPvjjE+0xbe>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
    9576:	6859      	ldr	r1, [r3, #4]
      if (data_end_ptr > tensor_boundary) {
    9578:	6828      	ldr	r0, [r5, #0]
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
    957a:	4441      	add	r1, r8
      if (data_end_ptr > tensor_boundary) {
    957c:	4281      	cmp	r1, r0
        tensor_boundary = data_end_ptr;
    957e:	bf88      	it	hi
    9580:	6029      	strhi	r1, [r5, #0]
  for(size_t i = 0; i < 23; ++i) {
    9582:	f10c 0c01 	add.w	ip, ip, #1
    9586:	f1bc 0f17 	cmp.w	ip, #23
    958a:	f102 0218 	add.w	r2, r2, #24
    958e:	f103 0340 	add.w	r3, r3, #64	; 0x40
    9592:	f106 060c 	add.w	r6, r6, #12
    9596:	d1c3      	bne.n	9520 <_Z18trained_model_initPFPvjjE+0x5c>
  if (tensor_boundary > current_location /* end of arena size */) {
    9598:	682b      	ldr	r3, [r5, #0]
    959a:	429f      	cmp	r7, r3
    959c:	d201      	bcs.n	95a2 <_Z18trained_model_initPFPvjjE+0xde>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    959e:	4849      	ldr	r0, [pc, #292]	; (96c4 <_Z18trained_model_initPFPvjjE+0x200>)
    95a0:	e79d      	b.n	94de <_Z18trained_model_initPFPvjjE+0x1a>
  registrations[OP_RESHAPE] = Register_RESHAPE();
    95a2:	4668      	mov	r0, sp
    95a4:	466c      	mov	r4, sp
    95a6:	f7fe fa73 	bl	7a90 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    95aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    95ac:	4d46      	ldr	r5, [pc, #280]	; (96c8 <_Z18trained_model_initPFPvjjE+0x204>)
    95ae:	f8df 8120 	ldr.w	r8, [pc, #288]	; 96d0 <_Z18trained_model_initPFPvjjE+0x20c>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    95b2:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 969c <_Z18trained_model_initPFPvjjE+0x1d8>
  registrations[OP_RESHAPE] = Register_RESHAPE();
    95b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    95b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
    95bc:	466f      	mov	r7, sp
  registrations[OP_RESHAPE] = Register_RESHAPE();
    95be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
    95c2:	4668      	mov	r0, sp
    95c4:	f7fd f882 	bl	66cc <_ZN6tflite16Register_CONV_2DEv>
    95c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    95ca:	f105 0610 	add.w	r6, r5, #16
    95ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    95d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
    95d4:	466f      	mov	r7, sp
  registrations[OP_CONV_2D] = Register_CONV_2D();
    95d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
    95da:	4668      	mov	r0, sp
    95dc:	f7fd ff50 	bl	7480 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
    95e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    95e2:	f105 0630 	add.w	r6, r5, #48	; 0x30
    95e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    95e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
    95ec:	466f      	mov	r7, sp
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
    95ee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
    95f2:	4668      	mov	r0, sp
    95f4:	f7fd fe00 	bl	71f8 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    95f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    95fa:	f105 0650 	add.w	r6, r5, #80	; 0x50
    95fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    9600:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9604:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
    9608:	4668      	mov	r0, sp
    960a:	466e      	mov	r6, sp
    960c:	f7fe fac4 	bl	7b98 <_ZN6tflite16Register_SOFTMAXEv>
    9610:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    9612:	f105 0770 	add.w	r7, r5, #112	; 0x70
    9616:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    9618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    961c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  for(size_t i = 0; i < 11; ++i) {
    9620:	4f2a      	ldr	r7, [pc, #168]	; (96cc <_Z18trained_model_initPFPvjjE+0x208>)
    9622:	f04f 0900 	mov.w	r9, #0
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
    9626:	4644      	mov	r4, r8
    9628:	463e      	mov	r6, r7
    962a:	3d10      	subs	r5, #16
tflNodes[i].custom_initial_data = nullptr;
    962c:	46ca      	mov	sl, r9
    tflNodes[i].inputs = nodeData[i].inputs;
    962e:	6833      	ldr	r3, [r6, #0]
    9630:	6023      	str	r3, [r4, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
    9632:	6873      	ldr	r3, [r6, #4]
    9634:	6063      	str	r3, [r4, #4]
if (registrations[nodeData[i].used_op_index].init) {
    9636:	7b33      	ldrb	r3, [r6, #12]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    9638:	68b1      	ldr	r1, [r6, #8]
      tflNodes[i].custom_initial_data_size = 0;
    963a:	f8c4 a01c 	str.w	sl, [r4, #28]
if (registrations[nodeData[i].used_op_index].init) {
    963e:	015b      	lsls	r3, r3, #5
tflNodes[i].custom_initial_data = nullptr;
    9640:	e9c4 1a05 	strd	r1, sl, [r4, #20]
if (registrations[nodeData[i].used_op_index].init) {
    9644:	58eb      	ldr	r3, [r5, r3]
    9646:	b11b      	cbz	r3, 9650 <_Z18trained_model_initPFPvjjE+0x18c>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    9648:	2200      	movs	r2, #0
    964a:	4658      	mov	r0, fp
    964c:	4798      	blx	r3
    964e:	6120      	str	r0, [r4, #16]
  for(size_t i = 0; i < 11; ++i) {
    9650:	f109 0901 	add.w	r9, r9, #1
    9654:	f1b9 0f0b 	cmp.w	r9, #11
    9658:	f106 0610 	add.w	r6, r6, #16
    965c:	f104 0424 	add.w	r4, r4, #36	; 0x24
    9660:	d1e5      	bne.n	962e <_Z18trained_model_initPFPvjjE+0x16a>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
    9662:	4e0e      	ldr	r6, [pc, #56]	; (969c <_Z18trained_model_initPFPvjjE+0x1d8>)
  for(size_t i = 0; i < 11; ++i) {
    9664:	2400      	movs	r4, #0
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
    9666:	f04f 0924 	mov.w	r9, #36	; 0x24
    if (registrations[nodeData[i].used_op_index].prepare) {
    966a:	7b3b      	ldrb	r3, [r7, #12]
    966c:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9670:	689b      	ldr	r3, [r3, #8]
    9672:	b933      	cbnz	r3, 9682 <_Z18trained_model_initPFPvjjE+0x1be>
  for(size_t i = 0; i < 11; ++i) {
    9674:	3401      	adds	r4, #1
    9676:	2c0b      	cmp	r4, #11
    9678:	f107 0710 	add.w	r7, r7, #16
    967c:	d1f5      	bne.n	966a <_Z18trained_model_initPFPvjjE+0x1a6>
  return kTfLiteOk;
    967e:	2000      	movs	r0, #0
    9680:	e730      	b.n	94e4 <_Z18trained_model_initPFPvjjE+0x20>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
    9682:	fb09 8104 	mla	r1, r9, r4, r8
    9686:	4630      	mov	r0, r6
    9688:	4798      	blx	r3
      if (status != kTfLiteOk) {
    968a:	2800      	cmp	r0, #0
    968c:	d0f2      	beq.n	9674 <_Z18trained_model_initPFPvjjE+0x1b0>
    968e:	e729      	b.n	94e4 <_Z18trained_model_initPFPvjjE+0x20>
    9690:	20000de0 	.word	0x20000de0
    9694:	0004653e 	.word	0x0004653e
    9698:	2000118c 	.word	0x2000118c
    969c:	20000f98 	.word	0x20000f98
    96a0:	20001188 	.word	0x20001188
    96a4:	20000e84 	.word	0x20000e84
    96a8:	0000981d 	.word	0x0000981d
    96ac:	0000988d 	.word	0x0000988d
    96b0:	0000948d 	.word	0x0000948d
    96b4:	000094a9 	.word	0x000094a9
    96b8:	000094b5 	.word	0x000094b5
    96bc:	20000820 	.word	0x20000820
    96c0:	20000000 	.word	0x20000000
    96c4:	00046564 	.word	0x00046564
    96c8:	20000de4 	.word	0x20000de4
    96cc:	000301fc 	.word	0x000301fc
    96d0:	20000ff0 	.word	0x20000ff0

000096d4 <_Z19trained_model_inputi>:
static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}
    96d4:	4b01      	ldr	r3, [pc, #4]	; (96dc <_Z19trained_model_inputi+0x8>)
    96d6:	6898      	ldr	r0, [r3, #8]
    96d8:	4770      	bx	lr
    96da:	bf00      	nop
    96dc:	20000f98 	.word	0x20000f98

000096e0 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
    96e0:	4b02      	ldr	r3, [pc, #8]	; (96ec <_Z20trained_model_outputi+0xc>)
    96e2:	6898      	ldr	r0, [r3, #8]
}
    96e4:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
    96e8:	4770      	bx	lr
    96ea:	bf00      	nop
    96ec:	20000f98 	.word	0x20000f98

000096f0 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
    96f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96f4:	4e0b      	ldr	r6, [pc, #44]	; (9724 <_Z20trained_model_invokev+0x34>)
    96f6:	4d0c      	ldr	r5, [pc, #48]	; (9728 <_Z20trained_model_invokev+0x38>)
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    96f8:	4f0c      	ldr	r7, [pc, #48]	; (972c <_Z20trained_model_invokev+0x3c>)
    96fa:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9730 <_Z20trained_model_invokev+0x40>
  for(size_t i = 0; i < 11; ++i) {
    96fe:	2400      	movs	r4, #0
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    9700:	7b33      	ldrb	r3, [r6, #12]
    9702:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    9706:	4629      	mov	r1, r5
    9708:	68db      	ldr	r3, [r3, #12]
    970a:	4640      	mov	r0, r8
    970c:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
    970e:	b930      	cbnz	r0, 971e <_Z20trained_model_invokev+0x2e>
  for(size_t i = 0; i < 11; ++i) {
    9710:	3401      	adds	r4, #1
    9712:	2c0b      	cmp	r4, #11
    9714:	f106 0610 	add.w	r6, r6, #16
    9718:	f105 0524 	add.w	r5, r5, #36	; 0x24
    971c:	d1f0      	bne.n	9700 <_Z20trained_model_invokev+0x10>
      return status;
    }
  }
  return kTfLiteOk;
}
    971e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9722:	bf00      	nop
    9724:	000301fc 	.word	0x000301fc
    9728:	20000ff0 	.word	0x20000ff0
    972c:	20000de4 	.word	0x20000de4
    9730:	20000f98 	.word	0x20000f98

00009734 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
    9734:	4a0e      	ldr	r2, [pc, #56]	; (9770 <_Z19trained_model_resetPFvPvE+0x3c>)
TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
    9736:	b538      	push	{r3, r4, r5, lr}
    9738:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
    973a:	6810      	ldr	r0, [r2, #0]
    973c:	4d0d      	ldr	r5, [pc, #52]	; (9774 <_Z19trained_model_resetPFvPvE+0x40>)
    973e:	4798      	blx	r3
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
      { _M_erase_at_end(this->_M_impl._M_start); }
    9740:	4b0d      	ldr	r3, [pc, #52]	; (9778 <_Z19trained_model_resetPFvPvE+0x44>)
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
    9742:	e9d3 2100 	ldrd	r2, r1, [r3]
    9746:	428a      	cmp	r2, r1
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
    9748:	bf18      	it	ne
    974a:	605a      	strne	r2, [r3, #4]
TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
    974c:	2400      	movs	r4, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    974e:	e9d5 3200 	ldrd	r3, r2, [r5]
    9752:	1ad1      	subs	r1, r2, r3
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    9754:	ebb4 0fa1 	cmp.w	r4, r1, asr #2
    9758:	d205      	bcs.n	9766 <_Z19trained_model_resetPFvPvE+0x32>
    free(overflow_buffers[ix]);
    975a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    975e:	f006 fd93 	bl	10288 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    9762:	3401      	adds	r4, #1
    9764:	e7f3      	b.n	974e <_Z19trained_model_resetPFvPvE+0x1a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
    9766:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
    9768:	bf18      	it	ne
    976a:	606b      	strne	r3, [r5, #4]
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
    976c:	2000      	movs	r0, #0
    976e:	bd38      	pop	{r3, r4, r5, pc}
    9770:	20000de0 	.word	0x20000de0
    9774:	20001190 	.word	0x20001190
    9778:	2000117c 	.word	0x2000117c

0000977c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    977c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9780:	e9d0 9800 	ldrd	r9, r8, [r0]
    9784:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
    9786:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    978a:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
    978e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    9792:	4607      	mov	r7, r0
    9794:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9796:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
    979a:	d102      	bne.n	97a2 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
    979c:	481e      	ldr	r0, [pc, #120]	; (9818 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
    979e:	f00c fbf3 	bl	15f88 <_ZSt20__throw_length_errorPKc>
    97a2:	2c01      	cmp	r4, #1
    97a4:	4622      	mov	r2, r4
    97a6:	bf38      	it	cc
    97a8:	2201      	movcc	r2, #1
    97aa:	18a4      	adds	r4, r4, r2
    97ac:	eba1 0509 	sub.w	r5, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    97b0:	d22f      	bcs.n	9812 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    97b2:	b13c      	cbz	r4, 97c4 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
    97b4:	429c      	cmp	r4, r3
    97b6:	bf28      	it	cs
    97b8:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    97ba:	00a0      	lsls	r0, r4, #2
    97bc:	f00c fbce 	bl	15f5c <_Znwj>
    97c0:	4606      	mov	r6, r0
    97c2:	e000      	b.n	97c6 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
    97c4:	4626      	mov	r6, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    97c6:	42ee      	cmn	r6, r5
    97c8:	bf1c      	itt	ne
    97ca:	f8db 3000 	ldrne.w	r3, [fp]
    97ce:	5173      	strne	r3, [r6, r5]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
    97d0:	2d00      	cmp	r5, #0
    97d2:	dd04      	ble.n	97de <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x62>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    97d4:	462a      	mov	r2, r5
    97d6:	4649      	mov	r1, r9
    97d8:	4630      	mov	r0, r6
    97da:	f00c fc4a 	bl	16072 <memmove>
      ptrdiff_t __count = __last - __first;
    97de:	eba8 080a 	sub.w	r8, r8, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    97e2:	3504      	adds	r5, #4
      if (__count > 0)
    97e4:	f1b8 0f00 	cmp.w	r8, #0
    97e8:	4435      	add	r5, r6
    97ea:	dd04      	ble.n	97f6 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    97ec:	4642      	mov	r2, r8
    97ee:	4651      	mov	r1, sl
    97f0:	4628      	mov	r0, r5
    97f2:	f00c fc30 	bl	16056 <memcpy>
      return __result + __count;
    97f6:	4445      	add	r5, r8
	if (__p)
    97f8:	f1b9 0f00 	cmp.w	r9, #0
    97fc:	d002      	beq.n	9804 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	::operator delete(__p);
    97fe:	4648      	mov	r0, r9
    9800:	f00c fba8 	bl	15f54 <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    9804:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
    9808:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    980c:	60bc      	str	r4, [r7, #8]
    }
    980e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    9812:	461c      	mov	r4, r3
    9814:	e7d1      	b.n	97ba <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
    9816:	bf00      	nop
    9818:	000465b7 	.word	0x000465b7

0000981c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
                                       size_t bytes) {
    981c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (current_location - bytes < tensor_boundary) {
    981e:	4b17      	ldr	r3, [pc, #92]	; (987c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
    9820:	681c      	ldr	r4, [r3, #0]
                                       size_t bytes) {
    9822:	460a      	mov	r2, r1
  if (current_location - bytes < tensor_boundary) {
    9824:	1a64      	subs	r4, r4, r1
    9826:	4916      	ldr	r1, [pc, #88]	; (9880 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
    9828:	6809      	ldr	r1, [r1, #0]
    982a:	428c      	cmp	r4, r1
    982c:	d220      	bcs.n	9870 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x54>
    ptr = ei_calloc(bytes, 1);
    982e:	4610      	mov	r0, r2
    9830:	2101      	movs	r1, #1
    9832:	9201      	str	r2, [sp, #4]
    9834:	f008 f9ec 	bl	11c10 <_Z9ei_callocjj>
    if (ptr == NULL) {
    9838:	9a01      	ldr	r2, [sp, #4]
    ptr = ei_calloc(bytes, 1);
    983a:	9003      	str	r0, [sp, #12]
    983c:	4604      	mov	r4, r0
    if (ptr == NULL) {
    983e:	b930      	cbnz	r0, 984e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
    9840:	4810      	ldr	r0, [pc, #64]	; (9884 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
    9842:	4611      	mov	r1, r2
    9844:	f007 fa5e 	bl	10d04 <iprintf>
}
    9848:	4620      	mov	r0, r4
    984a:	b004      	add	sp, #16
    984c:	bd10      	pop	{r4, pc}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    984e:	480e      	ldr	r0, [pc, #56]	; (9888 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
    9850:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
    9854:	4299      	cmp	r1, r3
    9856:	4602      	mov	r2, r0
    9858:	d006      	beq.n	9868 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    985a:	b101      	cbz	r1, 985e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x42>
    985c:	600c      	str	r4, [r1, #0]
	    ++this->_M_impl._M_finish;
    985e:	6853      	ldr	r3, [r2, #4]
    9860:	3304      	adds	r3, #4
    9862:	6053      	str	r3, [r2, #4]
    return ptr;
    9864:	9c03      	ldr	r4, [sp, #12]
    9866:	e7ef      	b.n	9848 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x2c>
	  _M_realloc_insert(end(), __x);
    9868:	aa03      	add	r2, sp, #12
    986a:	f7ff ff87 	bl	977c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
    986e:	e7f9      	b.n	9864 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x48>
  memset(ptr, 0, bytes);
    9870:	2100      	movs	r1, #0
    9872:	4620      	mov	r0, r4
  current_location -= bytes;
    9874:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
    9876:	f00c fc16 	bl	160a6 <memset>
  return ptr;
    987a:	e7e5      	b.n	9848 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x2c>
    987c:	2000118c 	.word	0x2000118c
    9880:	20001188 	.word	0x20001188
    9884:	000465d1 	.word	0x000465d1
    9888:	20001190 	.word	0x20001190

0000988c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
    988c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9890:	4689      	mov	r9, r1
    9892:	4617      	mov	r7, r2
  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
    9894:	f7ff ffc2 	bl	981c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
  if (!b.ptr) {
    9898:	4683      	mov	fp, r0
    989a:	2800      	cmp	r0, #0
    989c:	d04e      	beq.n	993c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    989e:	4b29      	ldr	r3, [pc, #164]	; (9944 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb8>)
    98a0:	e9d3 4201 	ldrd	r4, r2, [r3, #4]
    98a4:	4294      	cmp	r4, r2
    98a6:	4698      	mov	r8, r3
    98a8:	d00e      	beq.n	98c8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3c>
    98aa:	b10c      	cbz	r4, 98b0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x24>
    98ac:	e9c4 9000 	strd	r9, r0, [r4]
	    ++this->_M_impl._M_finish;
    98b0:	3408      	adds	r4, #8
    98b2:	f8c8 4004 	str.w	r4, [r8, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    98b6:	e9d8 2300 	ldrd	r2, r3, [r8]
    98ba:	1a9b      	subs	r3, r3, r2
    98bc:	10db      	asrs	r3, r3, #3
  *buffer_idx = scratch_buffers.size() - 1;
    98be:	3b01      	subs	r3, #1
    98c0:	603b      	str	r3, [r7, #0]
  return kTfLiteOk;
    98c2:	2000      	movs	r0, #0
}
    98c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98c8:	f8d3 a000 	ldr.w	sl, [r3]
	if (max_size() - size() < __n)
    98cc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    98d0:	eba4 040a 	sub.w	r4, r4, sl
	if (max_size() - size() < __n)
    98d4:	ebb3 0fe4 	cmp.w	r3, r4, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    98d8:	ea4f 05e4 	mov.w	r5, r4, asr #3
	if (max_size() - size() < __n)
    98dc:	d102      	bne.n	98e4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x58>
	  __throw_length_error(__N(__s));
    98de:	481a      	ldr	r0, [pc, #104]	; (9948 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xbc>)
    98e0:	f00c fb52 	bl	15f88 <_ZSt20__throw_length_errorPKc>
    98e4:	2d01      	cmp	r5, #1
    98e6:	462a      	mov	r2, r5
    98e8:	bf38      	it	cc
    98ea:	2201      	movcc	r2, #1
    98ec:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    98ee:	d227      	bcs.n	9940 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb4>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    98f0:	b13d      	cbz	r5, 9902 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x76>
    98f2:	429d      	cmp	r5, r3
    98f4:	bf28      	it	cs
    98f6:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    98f8:	00e8      	lsls	r0, r5, #3
    98fa:	f00c fb2f 	bl	15f5c <_Znwj>
    98fe:	4606      	mov	r6, r0
    9900:	e000      	b.n	9904 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x78>
    9902:	462e      	mov	r6, r5
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    9904:	1933      	adds	r3, r6, r4
    9906:	bf1c      	itt	ne
    9908:	f846 9004 	strne.w	r9, [r6, r4]
    990c:	f8c3 b004 	strne.w	fp, [r3, #4]
      if (__count > 0)
    9910:	2c00      	cmp	r4, #0
    9912:	dd04      	ble.n	991e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x92>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    9914:	4622      	mov	r2, r4
    9916:	4651      	mov	r1, sl
    9918:	4630      	mov	r0, r6
    991a:	f00c fbaa 	bl	16072 <memmove>
	      ++__new_finish;
    991e:	3408      	adds	r4, #8
    9920:	4434      	add	r4, r6
	if (__p)
    9922:	f1ba 0f00 	cmp.w	sl, #0
    9926:	d002      	beq.n	992e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xa2>
	::operator delete(__p);
    9928:	4650      	mov	r0, sl
    992a:	f00c fb13 	bl	15f54 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    992e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
      this->_M_impl._M_finish = __new_finish;
    9932:	e9c8 6400 	strd	r6, r4, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    9936:	f8c8 5008 	str.w	r5, [r8, #8]
    993a:	e7bc      	b.n	98b6 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2a>
    return kTfLiteError;
    993c:	2001      	movs	r0, #1
    993e:	e7c1      	b.n	98c4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x38>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    9940:	461d      	mov	r5, r3
    9942:	e7d9      	b.n	98f8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x6c>
    9944:	2000117c 	.word	0x2000117c
    9948:	000465b7 	.word	0x000465b7

0000994c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
    994c:	4b19      	ldr	r3, [pc, #100]	; (99b4 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x68>)
	: _M_start(), _M_finish(), _M_end_of_storage()
    994e:	481a      	ldr	r0, [pc, #104]	; (99b8 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x6c>)
    9950:	681a      	ldr	r2, [r3, #0]
};const NodeInfo_t nodeData[] = {
    9952:	4b1a      	ldr	r3, [pc, #104]	; (99bc <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x70>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
    9954:	f502 6144 	add.w	r1, r2, #3136	; 0xc40
}
    9958:	b510      	push	{r4, lr}
};const NodeInfo_t nodeData[] = {
    995a:	6059      	str	r1, [r3, #4]
    995c:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
    9960:	f502 7144 	add.w	r1, r2, #784	; 0x310
    9964:	2400      	movs	r4, #0
};const NodeInfo_t nodeData[] = {
    9966:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
    996a:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    996e:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
    9972:	f502 71c8 	add.w	r1, r2, #400	; 0x190
    9976:	e9c0 4400 	strd	r4, r4, [r0]
};const NodeInfo_t nodeData[] = {
    997a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    997e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    9982:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    9986:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    998a:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    998e:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
    9992:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
static std::vector<void*> overflow_buffers;
    9996:	490a      	ldr	r1, [pc, #40]	; (99c0 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x74>)
    9998:	4a0a      	ldr	r2, [pc, #40]	; (99c4 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x78>)
    999a:	6084      	str	r4, [r0, #8]
    999c:	f00b fd50 	bl	15440 <__aeabi_atexit>
    99a0:	4809      	ldr	r0, [pc, #36]	; (99c8 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x7c>)
static std::vector<scratch_buffer_t> scratch_buffers;
    99a2:	4a08      	ldr	r2, [pc, #32]	; (99c4 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x78>)
    99a4:	6084      	str	r4, [r0, #8]
    99a6:	e9c0 4400 	strd	r4, r4, [r0]
    99aa:	4908      	ldr	r1, [pc, #32]	; (99cc <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x80>)
}
    99ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static std::vector<scratch_buffer_t> scratch_buffers;
    99b0:	f00b bd46 	b.w	15440 <__aeabi_atexit>
    99b4:	20000de0 	.word	0x20000de0
    99b8:	20001190 	.word	0x20001190
    99bc:	20000000 	.word	0x20000000
    99c0:	00014e13 	.word	0x00014e13
    99c4:	200011a0 	.word	0x200011a0
    99c8:	2000117c 	.word	0x2000117c
    99cc:	00014e23 	.word	0x00014e23

000099d0 <_ZN2ei5numpy19dequantize_zero_oneEh>:
        return quantized_values_one_zero[value];
    99d0:	4b02      	ldr	r3, [pc, #8]	; (99dc <_ZN2ei5numpy19dequantize_zero_oneEh+0xc>)
    99d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
    99d6:	ed90 0a00 	vldr	s0, [r0]
    99da:	4770      	bx	lr
    99dc:	0003fcc8 	.word	0x0003fcc8

000099e0 <_Z20raw_feature_get_datajjPf>:

};



int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    99e0:	b508      	push	{r3, lr}
    99e2:	4613      	mov	r3, r2
    memcpy(out_ptr, features + offset, length * sizeof(float));
    99e4:	008a      	lsls	r2, r1, #2
    99e6:	4904      	ldr	r1, [pc, #16]	; (99f8 <_Z20raw_feature_get_datajjPf+0x18>)
    99e8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    99ec:	4618      	mov	r0, r3
    99ee:	f00c fb32 	bl	16056 <memcpy>
    return 0;
}
    99f2:	2000      	movs	r0, #0
    99f4:	bd08      	pop	{r3, pc}
    99f6:	bf00      	nop
    99f8:	00030308 	.word	0x00030308

000099fc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
    static float ceil_unless_very_close_to_floor(float v) {
    99fc:	b508      	push	{r3, lr}
    99fe:	ed2d 8b02 	vpush	{d8}
    9a02:	eeb0 8a40 	vmov.f32	s16, s0
  { return __builtin_floorf(__x); }
    9a06:	f005 ff9b 	bl	f940 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
    9a0a:	eeb4 8ac0 	vcmpe.f32	s16, s0
    9a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a12:	dd08      	ble.n	9a26 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x2a>
    9a14:	ee78 7a40 	vsub.f32	s15, s16, s0
    9a18:	ed9f 7a08 	vldr	s14, [pc, #32]	; 9a3c <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x40>
    9a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
    9a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a24:	d407      	bmi.n	9a36 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x3a>
  { return __builtin_ceilf(__x); }
    9a26:	eeb0 0a48 	vmov.f32	s0, s16
    }
    9a2a:	ecbd 8b02 	vpop	{d8}
    9a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9a32:	f005 bf37 	b.w	f8a4 <ceilf>
    9a36:	ecbd 8b02 	vpop	{d8}
    9a3a:	bd08      	pop	{r3, pc}
    9a3c:	3a83126f 	.word	0x3a83126f

00009a40 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
    9a40:	b508      	push	{r3, lr}
	assert(ptr);
    9a42:	b928      	cbnz	r0, 9a50 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
    9a44:	4b06      	ldr	r3, [pc, #24]	; (9a60 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
    9a46:	4a07      	ldr	r2, [pc, #28]	; (9a64 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
    9a48:	4807      	ldr	r0, [pc, #28]	; (9a68 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
    9a4a:	215f      	movs	r1, #95	; 0x5f
    9a4c:	f006 fbdc 	bl	10208 <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
    9a50:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
    9a54:	1ac0      	subs	r0, r0, r3
}
    9a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
    9a5a:	f008 b8db 	b.w	11c14 <_Z7ei_freePv>
    9a5e:	bf00      	nop
    9a60:	000463e4 	.word	0x000463e4
    9a64:	0004660b 	.word	0x0004660b
    9a68:	00046634 	.word	0x00046634

00009a6c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
    9a6c:	1e43      	subs	r3, r0, #1
    9a6e:	4203      	tst	r3, r0
{
    9a70:	b510      	push	{r4, lr}
    9a72:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
    9a74:	d005      	beq.n	9a82 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
    9a76:	4b0d      	ldr	r3, [pc, #52]	; (9aac <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
    9a78:	4a0d      	ldr	r2, [pc, #52]	; (9ab0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
    9a7a:	480e      	ldr	r0, [pc, #56]	; (9ab4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
    9a7c:	213c      	movs	r1, #60	; 0x3c
    9a7e:	f006 fbc3 	bl	10208 <__assert_func>
	if(align && size)
    9a82:	b910      	cbnz	r0, 9a8a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
    9a84:	2400      	movs	r4, #0
}
    9a86:	4620      	mov	r0, r4
    9a88:	bd10      	pop	{r4, pc}
	if(align && size)
    9a8a:	2900      	cmp	r1, #0
    9a8c:	d0fa      	beq.n	9a84 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
    9a8e:	1c48      	adds	r0, r1, #1
    9a90:	4420      	add	r0, r4
    9a92:	2101      	movs	r1, #1
    9a94:	f008 f8bc 	bl	11c10 <_Z9ei_callocjj>
		if(p)
    9a98:	2800      	cmp	r0, #0
    9a9a:	d0f3      	beq.n	9a84 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
    9a9c:	1c63      	adds	r3, r4, #1
    9a9e:	4403      	add	r3, r0
    9aa0:	4264      	negs	r4, r4
    9aa2:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
    9aa4:	1a20      	subs	r0, r4, r0
    9aa6:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
    9aaa:	e7ec      	b.n	9a86 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
    9aac:	00046696 	.word	0x00046696
    9ab0:	000466b1 	.word	0x000466b1
    9ab4:	00046634 	.word	0x00046634

00009ab8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    9ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9aba:	4607      	mov	r7, r0
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
#endif
    ei_unique_ptr_t& p_tensor_arena) {
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
    9abc:	482d      	ldr	r0, [pc, #180]	; (9b74 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xbc>)
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    9abe:	460d      	mov	r5, r1
    9ac0:	4616      	mov	r6, r2
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
    9ac2:	f7ff fcff 	bl	94c4 <_Z18trained_model_initPFPvjjE>
    if (init_status != kTfLiteOk) {
    9ac6:	4604      	mov	r4, r0
    9ac8:	b130      	cbz	r0, 9ad8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x20>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
    9aca:	4601      	mov	r1, r0
    9acc:	482a      	ldr	r0, [pc, #168]	; (9b78 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xc0>)
    9ace:	f7fb fec9 	bl	5864 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    9ad2:	f06f 0005 	mvn.w	r0, #5
        }
#endif
        tflite_first_run = false;
    }
    return EI_IMPULSE_OK;
}
    9ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *ctx_start_us = ei_read_timer_us();
    9ad8:	f008 f885 	bl	11be6 <_Z16ei_read_timer_usv>
    9adc:	e9c7 0100 	strd	r0, r1, [r7]
    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    9ae0:	4620      	mov	r0, r4
    9ae2:	f7ff fdf7 	bl	96d4 <_Z19trained_model_inputi>
    9ae6:	6028      	str	r0, [r5, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    9ae8:	4620      	mov	r0, r4
    9aea:	f7ff fdf9 	bl	96e0 <_Z20trained_model_outputi>
    if (tflite_first_run) {
    9aee:	4a23      	ldr	r2, [pc, #140]	; (9b7c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xc4>)
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    9af0:	6030      	str	r0, [r6, #0]
    if (tflite_first_run) {
    9af2:	7813      	ldrb	r3, [r2, #0]
    9af4:	2b00      	cmp	r3, #0
    9af6:	d03b      	beq.n	9b70 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xb8>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
    9af8:	682b      	ldr	r3, [r5, #0]
    9afa:	7819      	ldrb	r1, [r3, #0]
    9afc:	2909      	cmp	r1, #9
    9afe:	d005      	beq.n	9b0c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
    9b00:	4b1f      	ldr	r3, [pc, #124]	; (9b80 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xc8>)
    9b02:	4a20      	ldr	r2, [pc, #128]	; (9b84 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xcc>)
    9b04:	2163      	movs	r1, #99	; 0x63
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
    9b06:	4820      	ldr	r0, [pc, #128]	; (9b88 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xd0>)
    9b08:	f006 fb7e 	bl	10208 <__assert_func>
    9b0c:	7801      	ldrb	r1, [r0, #0]
    9b0e:	2909      	cmp	r1, #9
    9b10:	d003      	beq.n	9b1a <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x62>
    9b12:	4b1e      	ldr	r3, [pc, #120]	; (9b8c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xd4>)
    9b14:	4a1b      	ldr	r2, [pc, #108]	; (9b84 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xcc>)
    9b16:	2164      	movs	r1, #100	; 0x64
    9b18:	e7f5      	b.n	9b06 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x4e>
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
    9b1a:	ed93 7a03 	vldr	s14, [r3, #12]
    9b1e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 9b90 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xd8>
    9b22:	eeb4 7a67 	vcmp.f32	s14, s15
    9b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b2a:	d003      	beq.n	9b34 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x7c>
    9b2c:	4b19      	ldr	r3, [pc, #100]	; (9b94 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xdc>)
    9b2e:	4a15      	ldr	r2, [pc, #84]	; (9b84 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xcc>)
    9b30:	216b      	movs	r1, #107	; 0x6b
    9b32:	e7e8      	b.n	9b06 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x4e>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
    9b34:	691b      	ldr	r3, [r3, #16]
    9b36:	3380      	adds	r3, #128	; 0x80
    9b38:	d003      	beq.n	9b42 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x8a>
    9b3a:	4b17      	ldr	r3, [pc, #92]	; (9b98 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xe0>)
    9b3c:	4a11      	ldr	r2, [pc, #68]	; (9b84 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xcc>)
    9b3e:	216c      	movs	r1, #108	; 0x6c
    9b40:	e7e1      	b.n	9b06 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x4e>
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
    9b42:	ed90 7a03 	vldr	s14, [r0, #12]
    9b46:	eddf 7a15 	vldr	s15, [pc, #84]	; 9b9c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xe4>
    9b4a:	eeb4 7a67 	vcmp.f32	s14, s15
    9b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b52:	d003      	beq.n	9b5c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xa4>
    9b54:	4b12      	ldr	r3, [pc, #72]	; (9ba0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xe8>)
    9b56:	4a0b      	ldr	r2, [pc, #44]	; (9b84 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xcc>)
    9b58:	216f      	movs	r1, #111	; 0x6f
    9b5a:	e7d4      	b.n	9b06 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x4e>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
    9b5c:	6903      	ldr	r3, [r0, #16]
    9b5e:	3380      	adds	r3, #128	; 0x80
    9b60:	d003      	beq.n	9b6a <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xb2>
    9b62:	4b10      	ldr	r3, [pc, #64]	; (9ba4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xec>)
    9b64:	4a07      	ldr	r2, [pc, #28]	; (9b84 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0xcc>)
    9b66:	2170      	movs	r1, #112	; 0x70
    9b68:	e7cd      	b.n	9b06 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x4e>
        tflite_first_run = false;
    9b6a:	7014      	strb	r4, [r2, #0]
    return EI_IMPULSE_OK;
    9b6c:	4620      	mov	r0, r4
    9b6e:	e7b2      	b.n	9ad6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x1e>
    9b70:	4618      	mov	r0, r3
    9b72:	e7b0      	b.n	9ad6 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0+0x1e>
    9b74:	00009a6d 	.word	0x00009a6d
    9b78:	000466e6 	.word	0x000466e6
    9b7c:	200005b4 	.word	0x200005b4
    9b80:	00046717 	.word	0x00046717
    9b84:	0004674d 	.word	0x0004674d
    9b88:	000467b2 	.word	0x000467b2
    9b8c:	00046821 	.word	0x00046821
    9b90:	3b6eeeef 	.word	0x3b6eeeef
    9b94:	00046859 	.word	0x00046859
    9b98:	00046894 	.word	0x00046894
    9b9c:	3b800000 	.word	0x3b800000
    9ba0:	000468d8 	.word	0x000468d8
    9ba4:	00046915 	.word	0x00046915

00009ba8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(uint64_t ctx_start_us,
    9ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9bac:	ed2d 8b04 	vpush	{d8-d9}
    9bb0:	4605      	mov	r5, r0
    9bb2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    9bb6:	4688      	mov	r8, r1
    9bb8:	4617      	mov	r7, r2
    9bba:	461c      	mov	r4, r3
    TfLiteTensor* scores_tensor,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
    if(trained_model_invoke() != kTfLiteOk) {
    9bbc:	f7ff fd98 	bl	96f0 <_Z20trained_model_invokev>
    9bc0:	2800      	cmp	r0, #0
    9bc2:	d173      	bne.n	9cac <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x104>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
    9bc4:	f008 f80f 	bl	11be6 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
    9bc8:	1b40      	subs	r0, r0, r5
    9bca:	eb61 0108 	sbc.w	r1, r1, r8
    9bce:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    result->timing.classification = (int)(result->timing.classification_us / 1000);
    9bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9bd6:	2300      	movs	r3, #0
    9bd8:	f7f6 ffb0 	bl	b3c <__aeabi_ldivmod>
    9bdc:	4601      	mov	r1, r0
    9bde:	62a0      	str	r0, [r4, #40]	; 0x28

    // Read the predicted y value from the model's output tensor
    if (debug) {
    9be0:	b116      	cbz	r6, 9be8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x40>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
    9be2:	4834      	ldr	r0, [pc, #208]	; (9cb4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x10c>)
    9be4:	f7fb fe3e 	bl	5864 <_Z9ei_printfPKcz>
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
    if (int8_output) {
    9be8:	783b      	ldrb	r3, [r7, #0]
    9bea:	687d      	ldr	r5, [r7, #4]
    9bec:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 9cbc <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x114>
    9bf0:	2b09      	cmp	r3, #9
    9bf2:	f104 0404 	add.w	r4, r4, #4
    9bf6:	d139      	bne.n	9c6c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0xc4>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
    9bf8:	edd7 7a04 	vldr	s15, [r7, #16]
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        float value = static_cast<float>(data[ix] - zero_point) * scale;

        if (debug) {
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9bfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 9cc0 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x118>
            ei_printf_float(value);
            ei_printf("\n");
    9c00:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 9cc4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x11c>
    9c04:	ed97 9a03 	vldr	s18, [r7, #12]
    9c08:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9c0c:	3d01      	subs	r5, #1
    9c0e:	f1a8 070c 	sub.w	r7, r8, #12
        float value = static_cast<float>(data[ix] - zero_point) * scale;
    9c12:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
    9c16:	ee08 3a10 	vmov	s16, r3
    9c1a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    9c1e:	ee38 8a68 	vsub.f32	s16, s16, s17
    9c22:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
    9c26:	b156      	cbz	r6, 9c3e <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x96>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9c28:	4650      	mov	r0, sl
    9c2a:	6839      	ldr	r1, [r7, #0]
    9c2c:	f7fb fe1a 	bl	5864 <_Z9ei_printfPKcz>
            ei_printf_float(value);
    9c30:	eeb0 0a48 	vmov.f32	s0, s16
    9c34:	f7fb fe30 	bl	5898 <_Z15ei_printf_floatf>
            ei_printf("\n");
    9c38:	4648      	mov	r0, r9
    9c3a:	f7fb fe13 	bl	5864 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
    9c3e:	f857 3b04 	ldr.w	r3, [r7], #4
    9c42:	f844 3c04 	str.w	r3, [r4, #-4]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9c46:	4547      	cmp	r7, r8
        result->classification[ix].value = value;
    9c48:	4623      	mov	r3, r4
    9c4a:	ed83 8a00 	vstr	s16, [r3]
    9c4e:	f104 0408 	add.w	r4, r4, #8
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9c52:	d1de      	bne.n	9c12 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x6a>
    else {
        fill_result_struct_f32(result, output->data.f, debug);
    }
#endif

    trained_model_reset(ei_aligned_free);
    9c54:	4818      	ldr	r0, [pc, #96]	; (9cb8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x110>)
    9c56:	f7ff fd6d 	bl	9734 <_Z19trained_model_resetPFvPvE>

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    9c5a:	f007 ffc2 	bl	11be2 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
    9c5e:	1c83      	adds	r3, r0, #2
    9c60:	bf18      	it	ne
    9c62:	2000      	movne	r0, #0
}
    9c64:	ecbd 8b04 	vpop	{d8-d9}
    9c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9c6c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9cc0 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x118>
            ei_printf_float(value);
            ei_printf("\n");
    9c70:	f8df a050 	ldr.w	sl, [pc, #80]	; 9cc4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0x11c>
    9c74:	f1a8 070c 	sub.w	r7, r8, #12
        float value = data[ix];
    9c78:	ecb5 8a01 	vldmia	r5!, {s16}
        if (debug) {
    9c7c:	b156      	cbz	r6, 9c94 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0xec>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9c7e:	4648      	mov	r0, r9
    9c80:	6839      	ldr	r1, [r7, #0]
    9c82:	f7fb fdef 	bl	5864 <_Z9ei_printfPKcz>
            ei_printf_float(value);
    9c86:	eeb0 0a48 	vmov.f32	s0, s16
    9c8a:	f7fb fe05 	bl	5898 <_Z15ei_printf_floatf>
            ei_printf("\n");
    9c8e:	4650      	mov	r0, sl
    9c90:	f7fb fde8 	bl	5864 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
    9c94:	f857 3b04 	ldr.w	r3, [r7], #4
    9c98:	f844 3c04 	str.w	r3, [r4, #-4]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9c9c:	4547      	cmp	r7, r8
        result->classification[ix].value = value;
    9c9e:	4623      	mov	r3, r4
    9ca0:	ed83 8a00 	vstr	s16, [r3]
    9ca4:	f104 0408 	add.w	r4, r4, #8
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9ca8:	d1e6      	bne.n	9c78 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0xd0>
    9caa:	e7d3      	b.n	9c54 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0xac>
        return EI_IMPULSE_TFLITE_ERROR;
    9cac:	f06f 0002 	mvn.w	r0, #2
    9cb0:	e7d8      	b.n	9c64 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0+0xbc>
    9cb2:	bf00      	nop
    9cb4:	0004695b 	.word	0x0004695b
    9cb8:	00009a41 	.word	0x00009a41
    9cbc:	20000234 	.word	0x20000234
    9cc0:	00046978 	.word	0x00046978
    9cc4:	00046b49 	.word	0x00046b49

00009cc8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
    static int scale(matrix_t *matrix, float scale) {
    9cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
    9cca:	6842      	ldr	r2, [r0, #4]
    9ccc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    9cd0:	d217      	bcs.n	9d02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
    9cd2:	6883      	ldr	r3, [r0, #8]
    9cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9cd8:	d213      	bcs.n	9d02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9cda:	6801      	ldr	r1, [r0, #0]
    9cdc:	9101      	str	r1, [sp, #4]
    9cde:	b292      	uxth	r2, r2
    9ce0:	b29b      	uxth	r3, r3
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9ce2:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
    9ce4:	4668      	mov	r0, sp
    9ce6:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9ce8:	f8ad 2000 	strh.w	r2, [sp]
    9cec:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9cf0:	f8ad 2008 	strh.w	r2, [sp, #8]
    9cf4:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
    9cf8:	f009 fa4e 	bl	13198 <arm_mat_scale_f32>
    }
    9cfc:	b005      	add	sp, #20
    9cfe:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
    9d02:	4801      	ldr	r0, [pc, #4]	; (9d08 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
    9d04:	e7fa      	b.n	9cfc <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
    9d06:	bf00      	nop
    9d08:	fffffc0c 	.word	0xfffffc0c

00009d0c <_ZN2ei5numpy4rollEPfji>:
    static int roll(float *input_array, size_t input_array_size, int shift) {
    9d0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        if (shift < 0) {
    9d0e:	1e14      	subs	r4, r2, #0
            shift = input_array_size + shift;
    9d10:	bfb8      	it	lt
    9d12:	1864      	addlt	r4, r4, r1
    static int roll(float *input_array, size_t input_array_size, int shift) {
    9d14:	4606      	mov	r6, r0
    9d16:	460d      	mov	r5, r1
        if (shift == 0) {
    9d18:	b1ec      	cbz	r4, 9d56 <_ZN2ei5numpy4rollEPfji+0x4a>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    9d1a:	2300      	movs	r3, #0
    9d1c:	4622      	mov	r2, r4
    9d1e:	2101      	movs	r1, #1
    9d20:	4668      	mov	r0, sp
    9d22:	f00b f8ed 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    9d26:	9800      	ldr	r0, [sp, #0]
    9d28:	b1c0      	cbz	r0, 9d5c <_ZN2ei5numpy4rollEPfji+0x50>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
    9d2a:	1b29      	subs	r1, r5, r4
    9d2c:	00a4      	lsls	r4, r4, #2
    9d2e:	4622      	mov	r2, r4
    9d30:	008d      	lsls	r5, r1, #2
    9d32:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9d36:	f00c f98e 	bl	16056 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
    9d3a:	462a      	mov	r2, r5
    9d3c:	4631      	mov	r1, r6
    9d3e:	1930      	adds	r0, r6, r4
    9d40:	f00c f997 	bl	16072 <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
    9d44:	4622      	mov	r2, r4
    9d46:	9900      	ldr	r1, [sp, #0]
    9d48:	4630      	mov	r0, r6
    9d4a:	f00c f984 	bl	16056 <memcpy>
        return EIDSP_OK;
    9d4e:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    9d50:	4668      	mov	r0, sp
    9d52:	f007 ff0e 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    }
    9d56:	4620      	mov	r0, r4
    9d58:	b004      	add	sp, #16
    9d5a:	bd70      	pop	{r4, r5, r6, pc}
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    9d5c:	4c00      	ldr	r4, [pc, #0]	; (9d60 <_ZN2ei5numpy4rollEPfji+0x54>)
    9d5e:	e7f7      	b.n	9d50 <_ZN2ei5numpy4rollEPfji+0x44>
    9d60:	fffffc16 	.word	0xfffffc16

00009d64 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
    9d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d68:	4617      	mov	r7, r2
    9d6a:	4698      	mov	r8, r3
        if (output->cols != input->cols) {
    9d6c:	688a      	ldr	r2, [r1, #8]
    9d6e:	6883      	ldr	r3, [r0, #8]
    9d70:	429a      	cmp	r2, r3
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
    9d72:	4604      	mov	r4, r0
    9d74:	460e      	mov	r6, r1
        if (output->cols != input->cols) {
    9d76:	d16e      	bne.n	9e56 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf2>
        if (output->rows != input->rows + pad_before + pad_after) {
    9d78:	6842      	ldr	r2, [r0, #4]
    9d7a:	6849      	ldr	r1, [r1, #4]
    9d7c:	eb08 0307 	add.w	r3, r8, r7
    9d80:	4413      	add	r3, r2
    9d82:	4299      	cmp	r1, r3
    9d84:	d167      	bne.n	9e56 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf2>
        if (input->rows == 0) {
    9d86:	2a00      	cmp	r2, #0
    9d88:	d068      	beq.n	9e5c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf8>
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    9d8a:	f107 3bff 	add.w	fp, r7, #4294967295
        bool pad_before_direction_up = true;
    9d8e:	f04f 0a01 	mov.w	sl, #1
        uint32_t pad_before_index = 0;
    9d92:	f04f 0900 	mov.w	r9, #0
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    9d96:	f1bb 3fff 	cmp.w	fp, #4294967295
    9d9a:	6830      	ldr	r0, [r6, #0]
    9d9c:	68a5      	ldr	r5, [r4, #8]
    9d9e:	6821      	ldr	r1, [r4, #0]
    9da0:	d023      	beq.n	9dea <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x86>
            memcpy(output->buffer + (input->cols * ix),
    9da2:	00aa      	lsls	r2, r5, #2
    9da4:	fb02 1109 	mla	r1, r2, r9, r1
    9da8:	fb02 000b 	mla	r0, r2, fp, r0
    9dac:	f00c f953 	bl	16056 <memcpy>
            if (pad_before_index == 0 && !pad_before_direction_up) {
    9db0:	f1b9 0f00 	cmp.w	r9, #0
    9db4:	d102      	bne.n	9dbc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x58>
    9db6:	f1ba 0f00 	cmp.w	sl, #0
    9dba:	d013      	beq.n	9de4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x80>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
    9dbc:	6863      	ldr	r3, [r4, #4]
    9dbe:	3b01      	subs	r3, #1
    9dc0:	454b      	cmp	r3, r9
    9dc2:	d107      	bne.n	9dd4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
    9dc4:	f1ba 0f00 	cmp.w	sl, #0
    9dc8:	d101      	bne.n	9dce <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x6a>
                pad_before_index--;
    9dca:	f109 39ff 	add.w	r9, r9, #4294967295
                pad_before_direction_up = false;
    9dce:	f04f 0a00 	mov.w	sl, #0
    9dd2:	e004      	b.n	9dde <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7a>
            else if (pad_before_direction_up) {
    9dd4:	f1ba 0f00 	cmp.w	sl, #0
    9dd8:	d0f7      	beq.n	9dca <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x66>
                pad_before_index++;
    9dda:	f109 0901 	add.w	r9, r9, #1
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    9dde:	f10b 3bff 	add.w	fp, fp, #4294967295
    9de2:	e7d8      	b.n	9d96 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x32>
                pad_before_direction_up = true;
    9de4:	f04f 0a01 	mov.w	sl, #1
    9de8:	e7f9      	b.n	9dde <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7a>
        memcpy(output->buffer + (input->cols * pad_before),
    9dea:	6862      	ldr	r2, [r4, #4]
    9dec:	436a      	muls	r2, r5
    9dee:	437d      	muls	r5, r7
    9df0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    9df4:	0092      	lsls	r2, r2, #2
    9df6:	f00c f92e 	bl	16056 <memcpy>
        int32_t pad_after_index = input->rows - 1;
    9dfa:	6865      	ldr	r5, [r4, #4]
        for (int32_t ix = 0; ix < pad_after; ix++) {
    9dfc:	f04f 0a00 	mov.w	sl, #0
        int32_t pad_after_index = input->rows - 1;
    9e00:	3d01      	subs	r5, #1
        bool pad_after_direction_up = false;
    9e02:	46d1      	mov	r9, sl
        for (int32_t ix = 0; ix < pad_after; ix++) {
    9e04:	45d0      	cmp	r8, sl
    9e06:	dd2b      	ble.n	9e60 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xfc>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
    9e08:	6863      	ldr	r3, [r4, #4]
    9e0a:	68a2      	ldr	r2, [r4, #8]
                input->buffer + (pad_after_index * input->cols),
    9e0c:	6821      	ldr	r1, [r4, #0]
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
    9e0e:	eb0a 0007 	add.w	r0, sl, r7
    9e12:	4418      	add	r0, r3
    9e14:	6833      	ldr	r3, [r6, #0]
    9e16:	0092      	lsls	r2, r2, #2
    9e18:	fb02 1105 	mla	r1, r2, r5, r1
    9e1c:	fb02 3000 	mla	r0, r2, r0, r3
    9e20:	f00c f919 	bl	16056 <memcpy>
            if (pad_after_index == 0 && !pad_after_direction_up) {
    9e24:	b915      	cbnz	r5, 9e2c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
    9e26:	f1b9 0f00 	cmp.w	r9, #0
    9e2a:	d011      	beq.n	9e50 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
    9e2c:	6863      	ldr	r3, [r4, #4]
    9e2e:	3b01      	subs	r3, #1
    9e30:	42ab      	cmp	r3, r5
    9e32:	d106      	bne.n	9e42 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
    9e34:	f1b9 0f00 	cmp.w	r9, #0
    9e38:	d100      	bne.n	9e3c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd8>
                pad_after_index--;
    9e3a:	3d01      	subs	r5, #1
                pad_after_direction_up = false;
    9e3c:	f04f 0900 	mov.w	r9, #0
    9e40:	e003      	b.n	9e4a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            else if (pad_after_direction_up) {
    9e42:	f1b9 0f00 	cmp.w	r9, #0
    9e46:	d0f8      	beq.n	9e3a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd6>
                pad_after_index++;
    9e48:	3501      	adds	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
    9e4a:	f10a 0a01 	add.w	sl, sl, #1
    9e4e:	e7d9      	b.n	9e04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xa0>
                pad_after_direction_up = true;
    9e50:	f04f 0901 	mov.w	r9, #1
    9e54:	e7f9      	b.n	9e4a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    9e56:	4803      	ldr	r0, [pc, #12]	; (9e64 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x100>)
    }
    9e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
    9e5c:	4802      	ldr	r0, [pc, #8]	; (9e68 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>)
    9e5e:	e7fb      	b.n	9e58 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
        return EIDSP_OK;
    9e60:	2000      	movs	r0, #0
    9e62:	e7f9      	b.n	9e58 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
    9e64:	fffffc14 	.word	0xfffffc14
    9e68:	fffffc12 	.word	0xfffffc12

00009e6c <_ZN2ei5numpy8linspaceEffjPf>:
    static int linspace(float start, float stop, uint32_t number, float *out)
    9e6c:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
    9e6e:	b318      	cbz	r0, 9eb8 <_ZN2ei5numpy8linspaceEffjPf+0x4c>
    9e70:	b311      	cbz	r1, 9eb8 <_ZN2ei5numpy8linspaceEffjPf+0x4c>
        if (number == 1) {
    9e72:	2801      	cmp	r0, #1
    9e74:	d103      	bne.n	9e7e <_ZN2ei5numpy8linspaceEffjPf+0x12>
            out[0] = start;
    9e76:	ed81 0a00 	vstr	s0, [r1]
        return EIDSP_OK;
    9e7a:	2000      	movs	r0, #0
    }
    9e7c:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
    9e7e:	1e42      	subs	r2, r0, #1
    9e80:	ee07 2a10 	vmov	s14, r2
    9e84:	ee70 7ac0 	vsub.f32	s15, s1, s0
    9e88:	eef8 6a47 	vcvt.f32.u32	s13, s14
    9e8c:	460c      	mov	r4, r1
    9e8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        for (uint32_t ix = 0; ix < number - 1; ix++) {
    9e92:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
    9e94:	ee07 3a90 	vmov	s15, r3
    9e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9e9c:	eef0 6a40 	vmov.f32	s13, s0
    9ea0:	eee7 6a87 	vfma.f32	s13, s15, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
    9ea4:	3301      	adds	r3, #1
    9ea6:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
    9ea8:	ece4 6a01 	vstmia	r4!, {s13}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
    9eac:	d8f2      	bhi.n	9e94 <_ZN2ei5numpy8linspaceEffjPf+0x28>
        out[number - 1] = stop;
    9eae:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9eb2:	ed41 0a01 	vstr	s1, [r1, #-4]
    9eb6:	e7e0      	b.n	9e7a <_ZN2ei5numpy8linspaceEffjPf+0xe>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
    9eb8:	4800      	ldr	r0, [pc, #0]	; (9ebc <_ZN2ei5numpy8linspaceEffjPf+0x50>)
    9eba:	e7df      	b.n	9e7c <_ZN2ei5numpy8linspaceEffjPf+0x10>
    9ebc:	fffffc10 	.word	0xfffffc10

00009ec0 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>:
    {
    9ec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9ec4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
    9ec8:	0875      	lsrs	r5, r6, #1
    9eca:	3501      	adds	r5, #1
    9ecc:	429d      	cmp	r5, r3
    {
    9ece:	4614      	mov	r4, r2
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
    9ed0:	d12c      	bne.n	9f2c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x6c>
        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
    9ed2:	9600      	str	r6, [sp, #0]
    9ed4:	f7f7 fe80 	bl	1bd8 <_ZN2ei5numpy4rfftEPKfjPfjj>
        if (r != EIDSP_OK) {
    9ed8:	4680      	mov	r8, r0
    9eda:	bb18      	cbnz	r0, 9f24 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x64>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
    9edc:	ee07 6a90 	vmov	s15, r6
    9ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9ee4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    9ee8:	ee17 0a90 	vmov	r0, s15
    9eec:	f7f6 fabc 	bl	468 <__aeabi_f2d>
    9ef0:	4602      	mov	r2, r0
    9ef2:	460b      	mov	r3, r1
    9ef4:	2000      	movs	r0, #0
    9ef6:	490f      	ldr	r1, [pc, #60]	; (9f34 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x74>)
    9ef8:	f7f6 fc38 	bl	76c <__aeabi_ddiv>
    9efc:	4606      	mov	r6, r0
    9efe:	460f      	mov	r7, r1
                (out_buffer[ix] * out_buffer[ix]);
    9f00:	edd4 7a00 	vldr	s15, [r4]
    9f04:	ee67 7aa7 	vmul.f32	s15, s15, s15
    9f08:	ee17 0a90 	vmov	r0, s15
    9f0c:	f7f6 faac 	bl	468 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
    9f10:	4632      	mov	r2, r6
    9f12:	463b      	mov	r3, r7
    9f14:	f7f6 fb00 	bl	518 <__aeabi_dmul>
    9f18:	f7f6 fdc0 	bl	a9c <__aeabi_d2f>
    9f1c:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
    9f20:	42a5      	cmp	r5, r4
    9f22:	d1ed      	bne.n	9f00 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x40>
    }
    9f24:	4640      	mov	r0, r8
    9f26:	b002      	add	sp, #8
    9f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    9f2c:	f8df 8008 	ldr.w	r8, [pc, #8]	; 9f38 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x78>
    9f30:	e7f8      	b.n	9f24 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x64>
    9f32:	bf00      	nop
    9f34:	3ff00000 	.word	0x3ff00000
    9f38:	fffffc14 	.word	0xfffffc14

00009f3c <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf>:
        if (blockSize <= 1U) {
    9f3c:	2901      	cmp	r1, #1
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
    9f3e:	b570      	push	{r4, r5, r6, lr}
    9f40:	eddf 7a2e 	vldr	s15, [pc, #184]	; 9ffc <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xc0>
        if (blockSize <= 1U) {
    9f44:	d802      	bhi.n	9f4c <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x10>
            *pResult = 0;
    9f46:	edc2 7a00 	vstr	s15, [r2]
    }
    9f4a:	bd70      	pop	{r4, r5, r6, pc}
        blkCnt = blockSize >> 2U;
    9f4c:	088d      	lsrs	r5, r1, #2
    9f4e:	4603      	mov	r3, r0
    9f50:	4604      	mov	r4, r0
    9f52:	462e      	mov	r6, r5
        while (blkCnt > 0U) {
    9f54:	3410      	adds	r4, #16
    9f56:	b18e      	cbz	r6, 9f7c <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x40>
            sum += *pInput++;
    9f58:	ed14 7a04 	vldr	s14, [r4, #-16]
    9f5c:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    9f60:	ed14 7a03 	vldr	s14, [r4, #-12]
    9f64:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    9f68:	ed14 7a02 	vldr	s14, [r4, #-8]
    9f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    9f70:	ed14 7a01 	vldr	s14, [r4, #-4]
            blkCnt--;
    9f74:	3e01      	subs	r6, #1
            sum += *pInput++;
    9f76:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
    9f7a:	e7eb      	b.n	9f54 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x18>
    9f7c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        blkCnt = blockSize % 0x4U;
    9f80:	f001 0603 	and.w	r6, r1, #3
    9f84:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    9f88:	4604      	mov	r4, r0
        while (blkCnt > 0U) {
    9f8a:	42b4      	cmp	r4, r6
    9f8c:	d004      	beq.n	9f98 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x5c>
            sum += *pInput++;
    9f8e:	ecb4 7a01 	vldmia	r4!, {s14}
    9f92:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
    9f96:	e7f8      	b.n	9f8a <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x4e>
        fMean = sum / (float32_t)blockSize;
    9f98:	ee07 1a10 	vmov	s14, r1
    9f9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    9fa0:	eec7 6a87 	vdiv.f32	s13, s15, s14
        float32_t fSum = 0.0f;
    9fa4:	eddf 7a15 	vldr	s15, [pc, #84]	; 9ffc <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xc0>
        while (blkCnt > 0U) {
    9fa8:	3310      	adds	r3, #16
    9faa:	b1cd      	cbz	r5, 9fe0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xa4>
            fValue = *pInput++ - fMean;
    9fac:	ed13 6a04 	vldr	s12, [r3, #-16]
    9fb0:	ee36 6a66 	vsub.f32	s12, s12, s13
            blkCnt--;
    9fb4:	3d01      	subs	r5, #1
            fSum += fValue * fValue;
    9fb6:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    9fba:	ed13 6a03 	vldr	s12, [r3, #-12]
    9fbe:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    9fc2:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    9fc6:	ed13 6a02 	vldr	s12, [r3, #-8]
    9fca:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    9fce:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    9fd2:	ed13 6a01 	vldr	s12, [r3, #-4]
    9fd6:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    9fda:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
    9fde:	e7e3      	b.n	9fa8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x6c>
        while (blkCnt > 0U) {
    9fe0:	4284      	cmp	r4, r0
    9fe2:	d006      	beq.n	9ff2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xb6>
            fValue = *pInput++ - fMean;
    9fe4:	ecb0 6a01 	vldmia	r0!, {s12}
    9fe8:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    9fec:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
    9ff0:	e7f6      	b.n	9fe0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xa4>
        *pResult = fSum / (float32_t)(blockSize);
    9ff2:	eec7 6a87 	vdiv.f32	s13, s15, s14
    9ff6:	edc2 6a00 	vstr	s13, [r2]
    9ffa:	e7a6      	b.n	9f4a <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xe>
    9ffc:	00000000 	.word	0x00000000

0000a000 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
    a000:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (input_matrix->cols != output_matrix->rows) {
    a002:	6882      	ldr	r2, [r0, #8]
    a004:	684b      	ldr	r3, [r1, #4]
    a006:	429a      	cmp	r2, r3
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
    a008:	b087      	sub	sp, #28
    a00a:	460e      	mov	r6, r1
        if (input_matrix->cols != output_matrix->rows) {
    a00c:	d144      	bne.n	a098 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        if (output_matrix->cols != 1) {
    a00e:	6889      	ldr	r1, [r1, #8]
    a010:	2901      	cmp	r1, #1
    a012:	d141      	bne.n	a098 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        arm_in_matrix.numRows = input_matrix->rows;
    a014:	6843      	ldr	r3, [r0, #4]
        arm_in_matrix.pData = &input_matrix->buffer[0];
    a016:	6800      	ldr	r0, [r0, #0]
    a018:	9003      	str	r0, [sp, #12]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    a01a:	fb03 f002 	mul.w	r0, r3, r2
        arm_in_matrix.numRows = input_matrix->rows;
    a01e:	b29c      	uxth	r4, r3
        arm_in_matrix.numCols = input_matrix->cols;
    a020:	b295      	uxth	r5, r2
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    a022:	0080      	lsls	r0, r0, #2
        arm_in_matrix.numRows = input_matrix->rows;
    a024:	f8ad 4008 	strh.w	r4, [sp, #8]
        arm_in_matrix.numCols = input_matrix->cols;
    a028:	f8ad 500a 	strh.w	r5, [sp, #10]
        arm_transposed_matrix.numRows = input_matrix->cols;
    a02c:	f8ad 5010 	strh.w	r5, [sp, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
    a030:	f8ad 4012 	strh.w	r4, [sp, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    a034:	f007 fdec 	bl	11c10 <_Z9ei_callocjj>
    a038:	9005      	str	r0, [sp, #20]
        if (arm_transposed_matrix.pData == NULL) {
    a03a:	b378      	cbz	r0, a09c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x9c>
        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
    a03c:	a904      	add	r1, sp, #16
    a03e:	a802      	add	r0, sp, #8
    a040:	f009 f8e4 	bl	1320c <arm_mat_trans_f32>
        if (ret != EIDSP_OK) {
    a044:	4604      	mov	r4, r0
    a046:	bb20      	cbnz	r0, a092 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
    a048:	4605      	mov	r5, r0
    a04a:	2700      	movs	r7, #0
    a04c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a050:	9805      	ldr	r0, [sp, #20]
    a052:	42ab      	cmp	r3, r5
    a054:	d91b      	bls.n	a08e <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
    a056:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    a05a:	fb05 f301 	mul.w	r3, r5, r1
    a05e:	aa01      	add	r2, sp, #4
    a060:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    a064:	f7ff ff6a 	bl	9f3c <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf>
            arm_sqrt_f32(var, &std);
    a068:	ed9d 0a01 	vldr	s0, [sp, #4]
    if (in >= 0.0f)
    a06c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    a070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a074:	db08      	blt.n	a088 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x88>
      *pOut = sqrtf(in);
    a076:	f005 fe01 	bl	fc7c <sqrtf>
            output_matrix->buffer[row] = std;
    a07a:	6833      	ldr	r3, [r6, #0]
    a07c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    a080:	ed83 0a00 	vstr	s0, [r3]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
    a084:	3501      	adds	r5, #1
    a086:	e7e1      	b.n	a04c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4c>
      *pOut = 0.0f;
    a088:	ee00 7a10 	vmov	s0, r7
    a08c:	e7f5      	b.n	a07a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x7a>
        ei_free(arm_transposed_matrix.pData);
    a08e:	f007 fdc1 	bl	11c14 <_Z7ei_freePv>
    }
    a092:	4620      	mov	r0, r4
    a094:	b007      	add	sp, #28
    a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    a098:	4c01      	ldr	r4, [pc, #4]	; (a0a0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa0>)
    a09a:	e7fa      	b.n	a092 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    a09c:	4c01      	ldr	r4, [pc, #4]	; (a0a4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa4>)
    a09e:	e7f8      	b.n	a092 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
    a0a0:	fffffc14 	.word	0xfffffc14
    a0a4:	fffffc16 	.word	0xfffffc16

0000a0a8 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
    static float frequency_to_mel(float f) {
    a0a8:	b510      	push	{r4, lr}
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
    a0aa:	eddf 7a24 	vldr	s15, [pc, #144]	; a13c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x94>
        e = (g - 0x3f2aaaab) & 0xff800000;
    a0ae:	4c24      	ldr	r4, [pc, #144]	; (a140 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x98>)
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    a0b0:	ed9f 1a24 	vldr	s2, [pc, #144]	; a144 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x9c>
    static float frequency_to_mel(float f) {
    a0b4:	ed2d 8b04 	vpush	{d8-d9}
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
    a0b8:	ee80 8a27 	vdiv.f32	s16, s0, s15
    a0bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        g = (int32_t) * ((int32_t *)&a);
    a0c0:	ee38 7a27 	vadd.f32	s14, s16, s15
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    a0c4:	ed9f 0a20 	vldr	s0, [pc, #128]	; a148 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa0>
        g = (int32_t) * ((int32_t *)&a);
    a0c8:	ee17 3a10 	vmov	r3, s14
        e = (g - 0x3f2aaaab) & 0xff800000;
    a0cc:	441c      	add	r4, r3
    a0ce:	0de4      	lsrs	r4, r4, #23
    a0d0:	05e4      	lsls	r4, r4, #23
        g = g - e;
    a0d2:	1b1b      	subs	r3, r3, r4
    a0d4:	ee08 3a10 	vmov	s16, r3
        f = m - 1.0f;
    a0d8:	ee38 8a67 	vsub.f32	s16, s16, s15
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    a0dc:	eef0 0a48 	vmov.f32	s1, s16
    a0e0:	f005 fc74 	bl	f9cc <fmaf>
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    a0e4:	eef0 0a48 	vmov.f32	s1, s16
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    a0e8:	eef0 8a40 	vmov.f32	s17, s0
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    a0ec:	ed9f 1a17 	vldr	s2, [pc, #92]	; a14c <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa4>
    a0f0:	ed9f 0a17 	vldr	s0, [pc, #92]	; a150 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa8>
    a0f4:	f005 fc6a 	bl	f9cc <fmaf>
        s = f * f;
    a0f8:	ee28 9a08 	vmul.f32	s18, s16, s16
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    a0fc:	eeb0 1a40 	vmov.f32	s2, s0
        r = fmaf(r, s, t);
    a100:	eef0 0a49 	vmov.f32	s1, s18
    a104:	eeb0 0a68 	vmov.f32	s0, s17
    a108:	f005 fc60 	bl	f9cc <fmaf>
        r = fmaf(r, s, f);
    a10c:	eeb0 1a48 	vmov.f32	s2, s16
    a110:	eef0 0a49 	vmov.f32	s1, s18
    a114:	f005 fc5a 	bl	f9cc <fmaf>
    a118:	eeb0 1a40 	vmov.f32	s2, s0
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
    a11c:	ee00 4a10 	vmov	s0, r4
    a120:	eddf 0a0c 	vldr	s1, [pc, #48]	; a154 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xac>
    a124:	eeba 0ae4 	vcvt.f32.s32	s0, s0, #23
    a128:	f005 fc50 	bl	f9cc <fmaf>
    }
    a12c:	ecbd 8b04 	vpop	{d8-d9}
    a130:	eddf 7a09 	vldr	s15, [pc, #36]	; a158 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xb0>
    a134:	ee20 0a27 	vmul.f32	s0, s0, s15
    a138:	bd10      	pop	{r4, pc}
    a13a:	bf00      	nop
    a13c:	442f0000 	.word	0x442f0000
    a140:	c0d55555 	.word	0xc0d55555
    a144:	be8ef46d 	.word	0xbe8ef46d
    a148:	3e6c6078 	.word	0x3e6c6078
    a14c:	beff712d 	.word	0xbeff712d
    a150:	3ea9e51a 	.word	0x3ea9e51a
    a154:	3f317218 	.word	0x3f317218
    a158:	448ce000 	.word	0x448ce000

0000a15c <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>:
     * to become an argument for any log function.
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input) {
        zero_handling(input->buffer, input->rows * input->cols);
    a15c:	e9d0 3100 	ldrd	r3, r1, [r0]
    a160:	6882      	ldr	r2, [r0, #8]
    a162:	434a      	muls	r2, r1
                input[ix] = 1e-10;
    a164:	4907      	ldr	r1, [pc, #28]	; (a184 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0x28>)
    a166:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
    a16a:	4293      	cmp	r3, r2
    a16c:	d009      	beq.n	a182 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0x26>
            if (input[ix] == 0) {
    a16e:	edd3 7a00 	vldr	s15, [r3]
    a172:	eef5 7a40 	vcmp.f32	s15, #0.0
    a176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
    a17a:	bf08      	it	eq
    a17c:	6019      	streq	r1, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
    a17e:	3304      	adds	r3, #4
    a180:	e7f3      	b.n	a16a <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0xe>
    }
    a182:	4770      	bx	lr
    a184:	2edbe6ff 	.word	0x2edbe6ff

0000a188 <_ZN2ei8speechpy9functions8triangleEPfjiii>:
     * @param x_size Size of the linspace output
     * @param left
     * @param middle
     * @param right
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
    a188:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    a18c:	4606      	mov	r6, r0
    a18e:	460c      	mov	r4, r1
    a190:	4617      	mov	r7, r2
    a192:	461d      	mov	r5, r3
        EI_DSP_MATRIX(out, 1, x_size);
    a194:	460a      	mov	r2, r1
    a196:	2300      	movs	r3, #0
    a198:	2101      	movs	r1, #1
    a19a:	4668      	mov	r0, sp
    a19c:	f00a feb0 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    a1a0:	9900      	ldr	r1, [sp, #0]
    a1a2:	2900      	cmp	r1, #0
    a1a4:	d056      	beq.n	a254 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xcc>
            if (x[ix] > left && x[ix] <= middle) {
                out.buffer[ix] = (x[ix] - left) / (middle - left);
            }

            if (x[ix] < right && middle <= x[ix]) {
                out.buffer[ix] = (right - x[ix]) / (right - middle);
    a1a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a1a8:	ea4f 0884 	mov.w	r8, r4, lsl #2
    a1ac:	460b      	mov	r3, r1
    a1ae:	4630      	mov	r0, r6
    a1b0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
                out.buffer[ix] = (x[ix] - left) / (middle - left);
    a1b4:	eba5 0c07 	sub.w	ip, r5, r7
                out.buffer[ix] = (right - x[ix]) / (right - middle);
    a1b8:	eba2 0e05 	sub.w	lr, r2, r5
        for (size_t ix = 0; ix < x_size; ix++) {
    a1bc:	42a0      	cmp	r0, r4
    a1be:	d03d      	beq.n	a23c <_ZN2ei8speechpy9functions8triangleEPfjiii+0xb4>
            if (x[ix] > left && x[ix] <= middle) {
    a1c0:	ee07 7a10 	vmov	s14, r7
    a1c4:	edd0 7a00 	vldr	s15, [r0]
    a1c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    a1cc:	eef4 7ac7 	vcmpe.f32	s15, s14
    a1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1d4:	dd12      	ble.n	a1fc <_ZN2ei8speechpy9functions8triangleEPfjiii+0x74>
    a1d6:	ee06 5a90 	vmov	s13, r5
    a1da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    a1de:	eef4 7ae6 	vcmpe.f32	s15, s13
    a1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1e6:	d809      	bhi.n	a1fc <_ZN2ei8speechpy9functions8triangleEPfjiii+0x74>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
    a1e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    a1ec:	ee07 ca10 	vmov	s14, ip
    a1f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    a1f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    a1f8:	ed83 7a00 	vstr	s14, [r3]
            if (x[ix] < right && middle <= x[ix]) {
    a1fc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
    a200:	ecb0 7a01 	vldmia	r0!, {s14}
    a204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a208:	eeb4 7ae7 	vcmpe.f32	s14, s15
    a20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a210:	d512      	bpl.n	a238 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xb0>
    a212:	ee06 5a90 	vmov	s13, r5
    a216:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    a21a:	eeb4 7ae6 	vcmpe.f32	s14, s13
    a21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a222:	db09      	blt.n	a238 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xb0>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
    a224:	ee77 7ac7 	vsub.f32	s15, s15, s14
    a228:	ee07 ea10 	vmov	s14, lr
    a22c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    a230:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    a234:	ed83 7a00 	vstr	s14, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
    a238:	3304      	adds	r3, #4
    a23a:	e7bf      	b.n	a1bc <_ZN2ei8speechpy9functions8triangleEPfjiii+0x34>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
    a23c:	4642      	mov	r2, r8
    a23e:	4630      	mov	r0, r6
    a240:	f00b ff09 	bl	16056 <memcpy>

        return EIDSP_OK;
    a244:	2400      	movs	r4, #0
        EI_DSP_MATRIX(out, 1, x_size);
    a246:	4668      	mov	r0, sp
    a248:	f007 fc93 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    }
    a24c:	4620      	mov	r0, r4
    a24e:	b004      	add	sp, #16
    a250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        EI_DSP_MATRIX(out, 1, x_size);
    a254:	4c00      	ldr	r4, [pc, #0]	; (a258 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xd0>)
    a256:	e7f6      	b.n	a246 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xbe>
    a258:	fffffc16 	.word	0xfffffc16

0000a25c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
        int get_data(size_t offset, size_t length, float *out_buffer) {
    a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a260:	ed2d 8b04 	vpush	{d8-d9}
    a264:	4698      	mov	r8, r3
            if (!_prev_buffer || !_end_of_signal_buffer) {
    a266:	68c3      	ldr	r3, [r0, #12]
        int get_data(size_t offset, size_t length, float *out_buffer) {
    a268:	b085      	sub	sp, #20
    a26a:	4604      	mov	r4, r0
    a26c:	460e      	mov	r6, r1
    a26e:	4617      	mov	r7, r2
            if (!_prev_buffer || !_end_of_signal_buffer) {
    a270:	2b00      	cmp	r3, #0
    a272:	d07a      	beq.n	a36a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10e>
    a274:	6902      	ldr	r2, [r0, #16]
    a276:	2a00      	cmp	r2, #0
    a278:	d077      	beq.n	a36a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10e>
            if (offset + length > _signal->total_length) {
    a27a:	6800      	ldr	r0, [r0, #0]
    a27c:	19ca      	adds	r2, r1, r7
    a27e:	6901      	ldr	r1, [r0, #16]
    a280:	428a      	cmp	r2, r1
    a282:	d874      	bhi.n	a36e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x112>
            if (static_cast<int32_t>(offset) - _shift >= 0) {
    a284:	6862      	ldr	r2, [r4, #4]
    a286:	1ab1      	subs	r1, r6, r2
    a288:	d549      	bpl.n	a31e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xc2>
            ret = _signal->get_data(offset, length, out_buffer);
    a28a:	6820      	ldr	r0, [r4, #0]
    a28c:	4643      	mov	r3, r8
    a28e:	463a      	mov	r2, r7
    a290:	4631      	mov	r1, r6
    a292:	f00a fe76 	bl	14f82 <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
    a296:	4605      	mov	r5, r0
    a298:	2800      	cmp	r0, #0
    a29a:	d145      	bne.n	a328 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xcc>
    a29c:	46c2      	mov	sl, r8
    a29e:	eb08 0b87 	add.w	fp, r8, r7, lsl #2
            bool all_between_min_1_and_1 = true;
    a2a2:	f04f 0901 	mov.w	r9, #1
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
    a2a6:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
    a2aa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
            for (size_t ix = 0; ix < length; ix++) {
    a2ae:	45d3      	cmp	fp, sl
    a2b0:	7e22      	ldrb	r2, [r4, #24]
    a2b2:	d042      	beq.n	a33a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xde>
                if (offset + ix < static_cast<uint32_t>(_shift)) {
    a2b4:	6861      	ldr	r1, [r4, #4]
    a2b6:	68e0      	ldr	r0, [r4, #12]
                float now = out_buffer[ix];
    a2b8:	ed9a 8a00 	vldr	s16, [sl]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
    a2bc:	edd4 7a02 	vldr	s15, [r4, #8]
    a2c0:	42b1      	cmp	r1, r6
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
    a2c2:	bf89      	itett	hi
    a2c4:	6923      	ldrhi	r3, [r4, #16]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
    a2c6:	ed90 7a00 	vldrls	s14, [r0]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
    a2ca:	eb03 0386 	addhi.w	r3, r3, r6, lsl #2
    a2ce:	ed93 7a00 	vldrhi	s14, [r3]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
    a2d2:	eef0 6a48 	vmov.f32	s13, s16
    a2d6:	eee7 6a67 	vfms.f32	s13, s14, s15
    a2da:	ecea 6a01 	vstmia	sl!, {s13}
                if (_rescale && all_between_min_1_and_1) {
    a2de:	b182      	cbz	r2, a302 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa6>
    a2e0:	f1b9 0f00 	cmp.w	r9, #0
    a2e4:	d00d      	beq.n	a302 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa6>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
    a2e6:	eef4 6ae8 	vcmpe.f32	s13, s17
    a2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a2ee:	d421      	bmi.n	a334 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd8>
    a2f0:	eef4 6ac9 	vcmpe.f32	s13, s18
    a2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a2f8:	bfd4      	ite	le
    a2fa:	f04f 0901 	movle.w	r9, #1
    a2fe:	f04f 0900 	movgt.w	r9, #0
                if (_shift != 1) {
    a302:	2901      	cmp	r1, #1
    a304:	d003      	beq.n	a30e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xb2>
                    numpy::roll(_prev_buffer, _shift, -1);
    a306:	f04f 32ff 	mov.w	r2, #4294967295
    a30a:	f7ff fcff 	bl	9d0c <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
    a30e:	6862      	ldr	r2, [r4, #4]
    a310:	68e3      	ldr	r3, [r4, #12]
    a312:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a316:	ed03 8a01 	vstr	s16, [r3, #-4]
            for (size_t ix = 0; ix < length; ix++) {
    a31a:	3601      	adds	r6, #1
    a31c:	e7c7      	b.n	a2ae <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x52>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
    a31e:	f00a fe30 	bl	14f82 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (ret != 0) {
    a322:	4605      	mov	r5, r0
    a324:	2800      	cmp	r0, #0
    a326:	d0b0      	beq.n	a28a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x2e>
        }
    a328:	4628      	mov	r0, r5
    a32a:	b005      	add	sp, #20
    a32c:	ecbd 8b04 	vpop	{d8-d9}
    a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a334:	f04f 0900 	mov.w	r9, #0
    a338:	e7e3      	b.n	a302 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa6>
            _next_offset_should_be += length;
    a33a:	6963      	ldr	r3, [r4, #20]
    a33c:	443b      	add	r3, r7
    a33e:	6163      	str	r3, [r4, #20]
            if (_rescale && !all_between_min_1_and_1) {
    a340:	2a00      	cmp	r2, #0
    a342:	d0f1      	beq.n	a328 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xcc>
    a344:	f1b9 0f00 	cmp.w	r9, #0
    a348:	d1ee      	bne.n	a328 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xcc>
                matrix_t scale_matrix(length, 1, out_buffer);
    a34a:	4643      	mov	r3, r8
    a34c:	2201      	movs	r2, #1
    a34e:	4639      	mov	r1, r7
    a350:	4668      	mov	r0, sp
    a352:	f00a fdd5 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
        if (scale == 1.0f) return EIDSP_OK;
    a356:	ed9f 0a07 	vldr	s0, [pc, #28]	; a374 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x118>
    a35a:	4668      	mov	r0, sp
    a35c:	f7ff fcb4 	bl	9cc8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
                if (ret != 0) {
    a360:	4605      	mov	r5, r0
                matrix_t scale_matrix(length, 1, out_buffer);
    a362:	4668      	mov	r0, sp
    a364:	f007 fc05 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    a368:	e7de      	b.n	a328 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xcc>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
    a36a:	4d03      	ldr	r5, [pc, #12]	; (a378 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x11c>)
    a36c:	e7dc      	b.n	a328 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xcc>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
    a36e:	4d03      	ldr	r5, [pc, #12]	; (a37c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x120>)
    a370:	e7da      	b.n	a328 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xcc>
    a372:	bf00      	nop
    a374:	38000000 	.word	0x38000000
    a378:	fffffc16 	.word	0xfffffc16
    a37c:	fffffc0e 	.word	0xfffffc0e

0000a380 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
    a380:	b508      	push	{r3, lr}
    a382:	4613      	mov	r3, r2
    return preemphasis->get_data(offset, length, out_ptr);
    a384:	460a      	mov	r2, r1
    a386:	4601      	mov	r1, r0
    a388:	4802      	ldr	r0, [pc, #8]	; (a394 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x14>)
    a38a:	6800      	ldr	r0, [r0, #0]
    a38c:	f7ff ff66 	bl	a25c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
}
    a390:	bd08      	pop	{r3, pc}
    a392:	bf00      	nop
    a394:	2000119c 	.word	0x2000119c

0000a398 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a39c:	ed2d 8b02 	vpush	{d8}
    a3a0:	460e      	mov	r6, r1
    a3a2:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a3a4:	4946      	ldr	r1, [pc, #280]	; (a4c0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
    a3a6:	f8d2 b004 	ldr.w	fp, [r2, #4]
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a3aa:	4605      	mov	r5, r0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a3ac:	6890      	ldr	r0, [r2, #8]
    a3ae:	f7f6 fdfd 	bl	fac <strcmp>

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
    a3b2:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a3b6:	2800      	cmp	r0, #0
    a3b8:	bf0c      	ite	eq
    a3ba:	f04f 0a01 	moveq.w	sl, #1
    a3be:	f04f 0a03 	movne.w	sl, #3
    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
    a3c2:	435c      	muls	r4, r3
    a3c4:	d00d      	beq.n	a3e2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
    a3c6:	483f      	ldr	r0, [pc, #252]	; (a4c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>)
    a3c8:	4621      	mov	r1, r4
    a3ca:	f7fb fa4b 	bl	5864 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
    a3ce:	483e      	ldr	r0, [pc, #248]	; (a4c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x130>)
    a3d0:	2100      	movs	r1, #0
    a3d2:	f7fb fa47 	bl	5864 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    a3d6:	483d      	ldr	r0, [pc, #244]	; (a4cc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x134>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
    a3d8:	b005      	add	sp, #20
    a3da:	ecbd 8b02 	vpop	{d8}
    a3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t bytes_left = signal->total_length;
    a3e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    a3e6:	ed9f 8a3a 	vldr	s16, [pc, #232]	; a4d0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a3ea:	eddf 8a3a 	vldr	s17, [pc, #232]	; a4d4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
    a3ee:	4627      	mov	r7, r4
    a3f0:	692b      	ldr	r3, [r5, #16]
    a3f2:	42bb      	cmp	r3, r7
    a3f4:	d961      	bls.n	a4ba <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x122>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
    a3f6:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
    a3fa:	46c8      	mov	r8, r9
    a3fc:	bf28      	it	cs
    a3fe:	f44f 6880 	movcs.w	r8, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
    a402:	2300      	movs	r3, #0
    a404:	465a      	mov	r2, fp
    a406:	4641      	mov	r1, r8
    a408:	4668      	mov	r0, sp
    a40a:	f00a fd79 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
        if (!input_matrix.buffer) {
    a40e:	9b00      	ldr	r3, [sp, #0]
    a410:	b923      	cbnz	r3, a41c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x84>
        matrix_t input_matrix(elements_to_read, config.axes);
    a412:	4668      	mov	r0, sp
    a414:	f007 fbad 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    a418:	482f      	ldr	r0, [pc, #188]	; (a4d8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x140>)
    a41a:	e7dd      	b.n	a3d8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x40>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
    a41c:	4642      	mov	r2, r8
    a41e:	4639      	mov	r1, r7
    a420:	4628      	mov	r0, r5
    a422:	f00a fdae 	bl	14f82 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    a426:	9a00      	ldr	r2, [sp, #0]
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a428:	eddf 5a2c 	vldr	s11, [pc, #176]	; a4dc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
    a42c:	ed9f 5a2c 	vldr	s10, [pc, #176]	; a4e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x148>
    a430:	eb02 0188 	add.w	r1, r2, r8, lsl #2
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    a434:	4291      	cmp	r1, r2
    a436:	d038      	beq.n	a4aa <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x112>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
    a438:	ecf2 7a01 	vldmia	r2!, {s15}
    a43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
    a440:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
    a444:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    a448:	f3c3 4007 	ubfx	r0, r3, #16, #8
    a44c:	ee07 0a90 	vmov	s15, r0
    a450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
    a454:	f3c3 2007 	ubfx	r0, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    a458:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    a45c:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
    a45e:	ee07 0a90 	vmov	s15, r0
    a462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a466:	f104 0001 	add.w	r0, r4, #1
    a46a:	ee87 7a88 	vdiv.f32	s14, s15, s16
                output_matrix->buffer[output_ix++] = b;
    a46e:	bf08      	it	eq
    a470:	1ce0      	addeq	r0, r4, #3
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    a472:	ee07 3a90 	vmov	s15, r3
    a476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a47a:	bf18      	it	ne
    a47c:	ee27 7a28 	vmulne.f32	s14, s14, s17
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    a480:	eec7 6a88 	vdiv.f32	s13, s15, s16
                output_matrix->buffer[output_ix++] = r;
    a484:	6833      	ldr	r3, [r6, #0]
    a486:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    a48a:	4604      	mov	r4, r0
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a48c:	bf15      	itete	ne
    a48e:	eea6 7a25 	vfmane.f32	s14, s12, s11
                output_matrix->buffer[output_ix++] = r;
    a492:	ed83 6a00 	vstreq	s12, [r3]
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a496:	eea6 7a85 	vfmane.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = g;
    a49a:	ed83 7a01 	vstreq	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
    a49e:	bf0c      	ite	eq
    a4a0:	edc3 6a02 	vstreq	s13, [r3, #8]
                output_matrix->buffer[output_ix++] = v;
    a4a4:	ed83 7a00 	vstrne	s14, [r3]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    a4a8:	e7c4      	b.n	a434 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9c>
        matrix_t input_matrix(elements_to_read, config.axes);
    a4aa:	4668      	mov	r0, sp
    a4ac:	f007 fb61 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        bytes_left -= elements_to_read;
    a4b0:	eba9 0908 	sub.w	r9, r9, r8
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
    a4b4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    a4b8:	e79a      	b.n	a3f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x58>
    return EIDSP_OK;
    a4ba:	2000      	movs	r0, #0
    a4bc:	e78c      	b.n	a3d8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x40>
    a4be:	bf00      	nop
    a4c0:	0004697d 	.word	0x0004697d
    a4c4:	00046987 	.word	0x00046987
    a4c8:	0004699e 	.word	0x0004699e
    a4cc:	fffffc14 	.word	0xfffffc14
    a4d0:	437f0000 	.word	0x437f0000
    a4d4:	3f1645a2 	.word	0x3f1645a2
    a4d8:	fffffc16 	.word	0xfffffc16
    a4dc:	3e991687 	.word	0x3e991687
    a4e0:	3de978d5 	.word	0x3de978d5

0000a4e4 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
    a4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4e8:	b088      	sub	sp, #32
    a4ea:	4690      	mov	r8, r2
    a4ec:	4606      	mov	r6, r0
    a4ee:	460d      	mov	r5, r1
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    uint64_t ctx_start_us = ei_read_timer_us();
    a4f0:	f007 fb79 	bl	11be6 <_Z16ei_read_timer_usv>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    a4f4:	4b29      	ldr	r3, [pc, #164]	; (a59c <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb8>)
    a4f6:	9306      	str	r3, [sp, #24]
    a4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a4fc:	2300      	movs	r3, #0
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
    a4fe:	aa03      	add	r2, sp, #12
    a500:	a902      	add	r1, sp, #8
    a502:	a804      	add	r0, sp, #16
    a504:	9307      	str	r3, [sp, #28]
    a506:	f7ff fad7 	bl	9ab8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0>
        &output_labels,
        &output_scores,
#endif
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
    a50a:	4604      	mov	r4, r0
    a50c:	2800      	cmp	r0, #0
    a50e:	d13e      	bne.n	a58e <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xaa>
        else {
            input->data.f[ix] = fmatrix->buffer[ix];
        }
    }
#else
    bool int8_input = input->type == TfLiteType::kTfLiteInt8;
    a510:	9b02      	ldr	r3, [sp, #8]
    a512:	f893 a000 	ldrb.w	sl, [r3]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
    a516:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    a51a:	4353      	muls	r3, r2
    a51c:	42a3      	cmp	r3, r4
    a51e:	d924      	bls.n	a56a <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x86>
        // Quantize the input if it is int8
        if (int8_input) {
    a520:	6833      	ldr	r3, [r6, #0]
    a522:	f8dd 9008 	ldr.w	r9, [sp, #8]
    a526:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    a52a:	f1ba 0f09 	cmp.w	sl, #9
    a52e:	f8d9 7004 	ldr.w	r7, [r9, #4]
    a532:	edd3 7a00 	vldr	s15, [r3]
    a536:	ea4f 0284 	mov.w	r2, r4, lsl #2
    a53a:	d112      	bne.n	a562 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x7e>
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    a53c:	ed99 0a03 	vldr	s0, [r9, #12]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    a540:	ee87 0a80 	vdiv.f32	s0, s15, s0
    a544:	f005 fa90 	bl	fa68 <roundf>
    a548:	edd9 7a04 	vldr	s15, [r9, #16]
    a54c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a550:	ee37 0a80 	vadd.f32	s0, s15, s0
    a554:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    a558:	ee17 3a90 	vmov	r3, s15
    a55c:	553b      	strb	r3, [r7, r4]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
    a55e:	3401      	adds	r4, #1
    a560:	e7d9      	b.n	a516 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x32>
            // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
        } else {
            input->data.f[ix] = fmatrix->buffer[ix];
    a562:	4417      	add	r7, r2
    a564:	edc7 7a00 	vstr	s15, [r7]
    a568:	e7f9      	b.n	a55e <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x7a>
        }
    }
#endif

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
    a56a:	462b      	mov	r3, r5
    a56c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a570:	9a03      	ldr	r2, [sp, #12]
    a572:	f8cd 8000 	str.w	r8, [sp]
    a576:	f7ff fb17 	bl	9ba8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.isra.0>
    a57a:	4604      	mov	r4, r0
        output_labels,
        output_scores,
#endif
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
    a57c:	f007 fb33 	bl	11be6 <_Z16ei_read_timer_usv>
    a580:	9b04      	ldr	r3, [sp, #16]
    a582:	1ac0      	subs	r0, r0, r3
    a584:	9b05      	ldr	r3, [sp, #20]
    a586:	eb61 0103 	sbc.w	r1, r1, r3
    a58a:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
    a58e:	a806      	add	r0, sp, #24
    a590:	f00a fd5a 	bl	15048 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
    a594:	4620      	mov	r0, r4
    a596:	b008      	add	sp, #32
    a598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a59c:	00009a41 	.word	0x00009a41

0000a5a0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    a5a0:	b530      	push	{r4, r5, lr}
    a5a2:	4608      	mov	r0, r1
    a5a4:	b087      	sub	sp, #28
    memset(result, 0, sizeof(ei_impulse_result_t));
    a5a6:	2250      	movs	r2, #80	; 0x50
    a5a8:	2100      	movs	r1, #0
    a5aa:	f00b fd7c 	bl	160a6 <memset>
    a5ae:	4b1f      	ldr	r3, [pc, #124]	; (a62c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x8c>)
    a5b0:	9304      	str	r3, [sp, #16]
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
    a5b2:	aa01      	add	r2, sp, #4
    a5b4:	2300      	movs	r3, #0
    a5b6:	4669      	mov	r1, sp
    a5b8:	a802      	add	r0, sp, #8
    a5ba:	9305      	str	r3, [sp, #20]
    a5bc:	f7ff fa7c 	bl	9ab8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.isra.0>
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        &output_labels,
        &output_scores,
    #endif
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
    a5c0:	4604      	mov	r4, r0
    a5c2:	bb48      	cbnz	r0, a618 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return init_res;
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
    a5c4:	9b00      	ldr	r3, [sp, #0]
    a5c6:	781b      	ldrb	r3, [r3, #0]
    a5c8:	2b09      	cmp	r3, #9
    a5ca:	d12b      	bne.n	a624 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x84>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
    a5cc:	f007 fb0b 	bl	11be6 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
    a5d0:	9b00      	ldr	r3, [sp, #0]
    a5d2:	685d      	ldr	r5, [r3, #4]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
    a5d4:	b935      	cbnz	r5, a5e4 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x44>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
    a5d6:	2101      	movs	r1, #1
    a5d8:	f44f 6044 	mov.w	r0, #3136	; 0xc40
    a5dc:	f007 fb18 	bl	11c10 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
    a5e0:	2401      	movs	r4, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
    a5e2:	4605      	mov	r5, r0

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
    a5e4:	4b12      	ldr	r3, [pc, #72]	; (a630 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x90>)
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a5e6:	4913      	ldr	r1, [pc, #76]	; (a634 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x94>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
    a5e8:	689b      	ldr	r3, [r3, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a5ea:	6898      	ldr	r0, [r3, #8]
    a5ec:	f7f6 fcde 	bl	fac <strcmp>

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
    a5f0:	4811      	ldr	r0, [pc, #68]	; (a638 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x98>)
    a5f2:	f44f 6144 	mov.w	r1, #3136	; 0xc40
    a5f6:	f7fb f935 	bl	5864 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
    a5fa:	4810      	ldr	r0, [pc, #64]	; (a63c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x9c>)
    a5fc:	2100      	movs	r1, #0
    a5fe:	f7fb f931 	bl	5864 <_Z9ei_printfPKcz>
    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
    a602:	490f      	ldr	r1, [pc, #60]	; (a640 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa0>)
    a604:	480f      	ldr	r0, [pc, #60]	; (a644 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa4>)
    a606:	f7fb f92d 	bl	5864 <_Z9ei_printfPKcz>
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
    a60a:	b11d      	cbz	r5, a614 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x74>
    a60c:	b114      	cbz	r4, a614 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x74>
            ei_free(buffer);
    a60e:	4628      	mov	r0, r5
    a610:	f007 fb00 	bl	11c14 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
    a614:	f06f 0404 	mvn.w	r4, #4
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
    a618:	a804      	add	r0, sp, #16
    a61a:	f00a fd15 	bl	15048 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;

    return EI_IMPULSE_OK;
}
    a61e:	4620      	mov	r0, r4
    a620:	b007      	add	sp, #28
    a622:	bd30      	pop	{r4, r5, pc}
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    a624:	f06f 0408 	mvn.w	r4, #8
    a628:	e7f6      	b.n	a618 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
    a62a:	bf00      	nop
    a62c:	00009a41 	.word	0x00009a41
    a630:	20000234 	.word	0x20000234
    a634:	0004697d 	.word	0x0004697d
    a638:	00046987 	.word	0x00046987
    a63c:	0004699e 	.word	0x0004699e
    a640:	fffffc14 	.word	0xfffffc14
    a644:	000469ba 	.word	0x000469ba

0000a648 <run_classifier_image_quantized>:
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a648:	4b0b      	ldr	r3, [pc, #44]	; (a678 <run_classifier_image_quantized+0x30>)
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    a64a:	b570      	push	{r4, r5, r6, lr}
    a64c:	4616      	mov	r6, r2
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a64e:	685a      	ldr	r2, [r3, #4]
    a650:	4b0a      	ldr	r3, [pc, #40]	; (a67c <run_classifier_image_quantized+0x34>)
    a652:	429a      	cmp	r2, r3
{
    a654:	4605      	mov	r5, r0
    a656:	460c      	mov	r4, r1
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a658:	d10b      	bne.n	a672 <run_classifier_image_quantized+0x2a>
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
    if (verify_res != EI_IMPULSE_OK) {
        return verify_res;
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
    a65a:	2250      	movs	r2, #80	; 0x50
    a65c:	2100      	movs	r1, #0
    a65e:	4620      	mov	r0, r4
    a660:	f00b fd21 	bl	160a6 <memset>

#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#else

    return run_nn_inference_image_quantized(signal, result, debug);
    a664:	4632      	mov	r2, r6
    a666:	4621      	mov	r1, r4
    a668:	4628      	mov	r0, r5
        result->classification[ix].value = value;
    }

    return EI_IMPULSE_OK;
#endif // (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
}
    a66a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return run_nn_inference_image_quantized(signal, result, debug);
    a66e:	f7ff bf97 	b.w	a5a0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>
}
    a672:	f06f 0008 	mvn.w	r0, #8
    a676:	bd70      	pop	{r4, r5, r6, pc}
    a678:	20000234 	.word	0x20000234
    a67c:	0000a399 	.word	0x0000a399

0000a680 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
    a680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
    a682:	4b08      	ldr	r3, [pc, #32]	; (a6a4 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x24>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    a684:	9100      	str	r1, [sp, #0]
	operator=(_Functor&& __f)
    a686:	4604      	mov	r4, r0
	  function(std::forward<_Functor>(__f)).swap(*this);
    a688:	4601      	mov	r1, r0
	    _M_invoker = &_My_handler::_M_invoke;
    a68a:	9303      	str	r3, [sp, #12]
	  function(std::forward<_Functor>(__f)).swap(*this);
    a68c:	4668      	mov	r0, sp
	    _M_manager = &_My_handler::_M_manager;
    a68e:	4b06      	ldr	r3, [pc, #24]	; (a6a8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
    a690:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
    a692:	f00a fcee 	bl	15072 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
    a696:	4668      	mov	r0, sp
    a698:	f00a fc29 	bl	14eee <_ZNSt14_Function_baseD1Ev>
	}
    a69c:	4620      	mov	r0, r4
    a69e:	b004      	add	sp, #16
    a6a0:	bd10      	pop	{r4, pc}
    a6a2:	bf00      	nop
    a6a4:	00014e33 	.word	0x00014e33
    a6a8:	00014e47 	.word	0x00014e47

0000a6ac <_ZN14SignalWithAxes10get_signalEv>:
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
    {

    }

    signal_t * get_signal() {
    a6ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
    a6ae:	6883      	ldr	r3, [r0, #8]
    a6b0:	6804      	ldr	r4, [r0, #0]
    a6b2:	2b01      	cmp	r3, #1
    a6b4:	d010      	beq.n	a6d8 <_ZN14SignalWithAxes10get_signalEv+0x2c>
            return this->_original_signal;
        }

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
    a6b6:	6922      	ldr	r2, [r4, #16]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    a6b8:	9000      	str	r0, [sp, #0]
    a6ba:	4353      	muls	r3, r2
    a6bc:	61c3      	str	r3, [r0, #28]
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
            return this->get_data(offset, length, out_ptr);
        };
    a6be:	f100 040c 	add.w	r4, r0, #12
	    _M_invoker = &_My_handler::_M_invoke;
    a6c2:	4b07      	ldr	r3, [pc, #28]	; (a6e0 <_ZN14SignalWithAxes10get_signalEv+0x34>)
    a6c4:	9303      	str	r3, [sp, #12]
	  function(std::forward<_Functor>(__f)).swap(*this);
    a6c6:	4668      	mov	r0, sp
	    _M_manager = &_My_handler::_M_manager;
    a6c8:	4b06      	ldr	r3, [pc, #24]	; (a6e4 <_ZN14SignalWithAxes10get_signalEv+0x38>)
    a6ca:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
    a6cc:	4621      	mov	r1, r4
    a6ce:	f00a fcd0 	bl	15072 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
    a6d2:	4668      	mov	r0, sp
    a6d4:	f00a fc0b 	bl	14eee <_ZNSt14_Function_baseD1Ev>
#endif
        return &wrapped_signal;
    }
    a6d8:	4620      	mov	r0, r4
    a6da:	b004      	add	sp, #16
    a6dc:	bd10      	pop	{r4, pc}
    a6de:	bf00      	nop
    a6e0:	00014ff1 	.word	0x00014ff1
    a6e4:	00014e5d 	.word	0x00014e5d

0000a6e8 <run_classifier>:
{
    a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a6ec:	4d47      	ldr	r5, [pc, #284]	; (a80c <run_classifier+0x124>)
    a6ee:	4f48      	ldr	r7, [pc, #288]	; (a810 <run_classifier+0x128>)
    a6f0:	686b      	ldr	r3, [r5, #4]
    a6f2:	42bb      	cmp	r3, r7
{
    a6f4:	b093      	sub	sp, #76	; 0x4c
    a6f6:	4680      	mov	r8, r0
    a6f8:	460c      	mov	r4, r1
    a6fa:	4616      	mov	r6, r2
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a6fc:	d106      	bne.n	a70c <run_classifier+0x24>
        return run_classifier_image_quantized(signal, result, debug);
    a6fe:	f7ff ffa3 	bl	a648 <run_classifier_image_quantized>
    a702:	4605      	mov	r5, r0
}
    a704:	4628      	mov	r0, r5
    a706:	b013      	add	sp, #76	; 0x4c
    a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset(result, 0, sizeof(ei_impulse_result_t));
    a70c:	2250      	movs	r2, #80	; 0x50
    a70e:	2100      	movs	r1, #0
    a710:	4620      	mov	r0, r4
    a712:	f00b fcc8 	bl	160a6 <memset>
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
    a716:	f44f 6244 	mov.w	r2, #3136	; 0xc40
    a71a:	2300      	movs	r3, #0
    a71c:	2101      	movs	r1, #1
    a71e:	a802      	add	r0, sp, #8
    a720:	f00a fbee 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    uint64_t dsp_start_us = ei_read_timer_us();
    a724:	f007 fa5f 	bl	11be6 <_Z16ei_read_timer_usv>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a728:	682a      	ldr	r2, [r5, #0]
        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
    a72a:	f5b2 6f44 	cmp.w	r2, #3136	; 0xc40
    uint64_t dsp_start_us = ei_read_timer_us();
    a72e:	4607      	mov	r7, r0
    a730:	4689      	mov	r9, r1
        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
    a732:	d908      	bls.n	a746 <run_classifier+0x5e>
            ei_printf("ERR: Would write outside feature buffer\n");
    a734:	4837      	ldr	r0, [pc, #220]	; (a814 <run_classifier+0x12c>)
    a736:	f7fb f895 	bl	5864 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
    a73a:	f06f 0504 	mvn.w	r5, #4
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
    a73e:	a802      	add	r0, sp, #8
    a740:	f007 fa17 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    a744:	e7de      	b.n	a704 <run_classifier+0x1c>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a746:	e9d5 ab02 	ldrd	sl, fp, [r5, #8]
    a74a:	686b      	ldr	r3, [r5, #4]
    a74c:	9301      	str	r3, [sp, #4]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a74e:	2101      	movs	r1, #1
    a750:	9b02      	ldr	r3, [sp, #8]
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a752:	692d      	ldr	r5, [r5, #16]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a754:	a806      	add	r0, sp, #24
    a756:	f00a fbd3 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    _Function_base() : _M_manager(nullptr) { }
    a75a:	2300      	movs	r3, #0
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
    a75c:	a80a      	add	r0, sp, #40	; 0x28
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
    a75e:	e9cd 8b0a 	strd	r8, fp, [sp, #40]	; 0x28
    a762:	930f      	str	r3, [sp, #60]	; 0x3c
    a764:	950c      	str	r5, [sp, #48]	; 0x30
    a766:	f7ff ffa1 	bl	a6ac <_ZN14SignalWithAxes10get_signalEv>
    a76a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; a818 <run_classifier+0x130>
    a76e:	9b01      	ldr	r3, [sp, #4]
    a770:	4652      	mov	r2, sl
    a772:	a906      	add	r1, sp, #24
    a774:	4798      	blx	r3
        if (ret != EIDSP_OK) {
    a776:	4680      	mov	r8, r0
    a778:	b160      	cbz	r0, a794 <run_classifier+0xac>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
    a77a:	4601      	mov	r1, r0
    a77c:	4827      	ldr	r0, [pc, #156]	; (a81c <run_classifier+0x134>)
    a77e:	f7fb f871 	bl	5864 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
    a782:	f06f 0504 	mvn.w	r5, #4
    class function<_Res(_ArgTypes...)>
    a786:	a80d      	add	r0, sp, #52	; 0x34
    a788:	f00a fbb1 	bl	14eee <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a78c:	a806      	add	r0, sp, #24
    a78e:	f007 f9f0 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    a792:	e7d4      	b.n	a73e <run_classifier+0x56>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    a794:	f007 fa25 	bl	11be2 <_Z29ei_run_impulse_check_canceledv>
    a798:	1c83      	adds	r3, r0, #2
    a79a:	4605      	mov	r5, r0
    a79c:	d0f3      	beq.n	a786 <run_classifier+0x9e>
    a79e:	a80d      	add	r0, sp, #52	; 0x34
    a7a0:	f00a fba5 	bl	14eee <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a7a4:	a806      	add	r0, sp, #24
    a7a6:	f007 f9e4 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
    a7aa:	f007 fa1c 	bl	11be6 <_Z16ei_read_timer_usv>
    a7ae:	1bc0      	subs	r0, r0, r7
    a7b0:	eb61 0109 	sbc.w	r1, r1, r9
    a7b4:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
    a7b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a7bc:	2300      	movs	r3, #0
    a7be:	f7f6 f9bd 	bl	b3c <__aeabi_ldivmod>
    a7c2:	4601      	mov	r1, r0
    a7c4:	6260      	str	r0, [r4, #36]	; 0x24
    if (debug) {
    a7c6:	b1ce      	cbz	r6, a7fc <run_classifier+0x114>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
    a7c8:	4815      	ldr	r0, [pc, #84]	; (a820 <run_classifier+0x138>)
            ei_printf(" ");
    a7ca:	4f16      	ldr	r7, [pc, #88]	; (a824 <run_classifier+0x13c>)
        ei_printf("Features (%d ms.): ", result->timing.dsp);
    a7cc:	f7fb f84a 	bl	5864 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
    a7d0:	9b04      	ldr	r3, [sp, #16]
    a7d2:	4543      	cmp	r3, r8
    a7d4:	d90c      	bls.n	a7f0 <run_classifier+0x108>
            ei_printf_float(features_matrix.buffer[ix]);
    a7d6:	9b02      	ldr	r3, [sp, #8]
    a7d8:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    a7dc:	ed93 0a00 	vldr	s0, [r3]
    a7e0:	f7fb f85a 	bl	5898 <_Z15ei_printf_floatf>
            ei_printf(" ");
    a7e4:	4638      	mov	r0, r7
    a7e6:	f7fb f83d 	bl	5864 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
    a7ea:	f108 0801 	add.w	r8, r8, #1
    a7ee:	e7ef      	b.n	a7d0 <run_classifier+0xe8>
        ei_printf("\n");
    a7f0:	480d      	ldr	r0, [pc, #52]	; (a828 <run_classifier+0x140>)
    a7f2:	f7fb f837 	bl	5864 <_Z9ei_printfPKcz>
        ei_printf("Running neural network...\n");
    a7f6:	480d      	ldr	r0, [pc, #52]	; (a82c <run_classifier+0x144>)
    a7f8:	f7fb f834 	bl	5864 <_Z9ei_printfPKcz>
    return run_inference(&features_matrix, result, debug);
    a7fc:	4632      	mov	r2, r6
    a7fe:	4621      	mov	r1, r4
    a800:	a802      	add	r0, sp, #8
    a802:	f00a fc29 	bl	15058 <run_inference>
    a806:	4605      	mov	r5, r0
    a808:	e799      	b.n	a73e <run_classifier+0x56>
    a80a:	bf00      	nop
    a80c:	20000234 	.word	0x20000234
    a810:	0000a399 	.word	0x0000a399
    a814:	000469df 	.word	0x000469df
    a818:	467a0000 	.word	0x467a0000
    a81c:	000469ba 	.word	0x000469ba
    a820:	00046a53 	.word	0x00046a53
    a824:	00046d81 	.word	0x00046d81
    a828:	00046b49 	.word	0x00046b49
    a82c:	00046a9f 	.word	0x00046a9f

0000a830 <main>:

int main() {
    a830:	b5f0      	push	{r4, r5, r6, r7, lr}
    // This is needed so that output of printf is output immediately without buffering
    setvbuf(stdout, NULL, _IONBF, 0);
    a832:	4b2a      	ldr	r3, [pc, #168]	; (a8dc <main+0xac>)

    while (1) {
        // the features are stored into flash, and we don't want to load everything into RAM
        signal_t features_signal;
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
        features_signal.get_data = &raw_feature_get_data;
    a834:	4e2a      	ldr	r6, [pc, #168]	; (a8e0 <main+0xb0>)
    setvbuf(stdout, NULL, _IONBF, 0);
    a836:	6818      	ldr	r0, [r3, #0]

        // invoke the impulse
        EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, true);
        printk("run_classifier returned: %d\n", res);
    a838:	4f2a      	ldr	r7, [pc, #168]	; (a8e4 <main+0xb4>)
    setvbuf(stdout, NULL, _IONBF, 0);
    a83a:	6880      	ldr	r0, [r0, #8]

        if (res != 0) return 1;

        printk("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
    a83c:	4d2a      	ldr	r5, [pc, #168]	; (a8e8 <main+0xb8>)
    setvbuf(stdout, NULL, _IONBF, 0);
    a83e:	2300      	movs	r3, #0
int main() {
    a840:	b09b      	sub	sp, #108	; 0x6c
    setvbuf(stdout, NULL, _IONBF, 0);
    a842:	4619      	mov	r1, r3
    a844:	2202      	movs	r2, #2
    a846:	f006 fa85 	bl	10d54 <setvbuf>
    printk("Edge Impulse standalone inferencing (Zephyr)\n");
    a84a:	4828      	ldr	r0, [pc, #160]	; (a8ec <main+0xbc>)
    a84c:	f00a fc64 	bl	15118 <printk>
    ei_impulse_result_t result = { 0 };
    a850:	2250      	movs	r2, #80	; 0x50
    a852:	2100      	movs	r1, #0
    a854:	a806      	add	r0, sp, #24
    a856:	f00b fc26 	bl	160a6 <memset>
    _Function_base() : _M_manager(nullptr) { }
    a85a:	2300      	movs	r3, #0
    a85c:	9303      	str	r3, [sp, #12]
        features_signal.get_data = &raw_feature_get_data;
    a85e:	4631      	mov	r1, r6
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
    a860:	f643 6370 	movw	r3, #15984	; 0x3e70
        features_signal.get_data = &raw_feature_get_data;
    a864:	a801      	add	r0, sp, #4
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
    a866:	9305      	str	r3, [sp, #20]
        features_signal.get_data = &raw_feature_get_data;
    a868:	f7ff ff0a 	bl	a680 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
        EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, true);
    a86c:	a906      	add	r1, sp, #24
    a86e:	2201      	movs	r2, #1
    a870:	a801      	add	r0, sp, #4
    a872:	f7ff ff39 	bl	a6e8 <run_classifier>
    a876:	4604      	mov	r4, r0
        printk("run_classifier returned: %d\n", res);
    a878:	4601      	mov	r1, r0
    a87a:	4638      	mov	r0, r7
    a87c:	f00a fc4c 	bl	15118 <printk>
        if (res != 0) return 1;
    a880:	bb34      	cbnz	r4, a8d0 <main+0xa0>
        printk("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
    a882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a886:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a888:	4628      	mov	r0, r5
    a88a:	f00a fc45 	bl	15118 <printk>
            result.timing.dsp, result.timing.classification, result.timing.anomaly);

        // print the predictions
        printk("[");
    a88e:	4818      	ldr	r0, [pc, #96]	; (a8f0 <main+0xc0>)
    a890:	f00a fc42 	bl	15118 <printk>
        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
            ei_printf_float(result.classification[ix].value);
    a894:	ed9d 0a07 	vldr	s0, [sp, #28]
    a898:	f7fa fffe 	bl	5898 <_Z15ei_printf_floatf>
#if EI_CLASSIFIER_HAS_ANOMALY == 1
            printk(", ");
#else
            if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
                printk(", ");
    a89c:	4815      	ldr	r0, [pc, #84]	; (a8f4 <main+0xc4>)
    a89e:	f00a fc3b 	bl	15118 <printk>
            ei_printf_float(result.classification[ix].value);
    a8a2:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
    a8a6:	f7fa fff7 	bl	5898 <_Z15ei_printf_floatf>
                printk(", ");
    a8aa:	4812      	ldr	r0, [pc, #72]	; (a8f4 <main+0xc4>)
    a8ac:	f00a fc34 	bl	15118 <printk>
            ei_printf_float(result.classification[ix].value);
    a8b0:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
    a8b4:	f7fa fff0 	bl	5898 <_Z15ei_printf_floatf>
#endif
        }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
        ei_printf_float(result.anomaly);
#endif
        printk("]\n");
    a8b8:	480f      	ldr	r0, [pc, #60]	; (a8f8 <main+0xc8>)
    a8ba:	f00a fc2d 	bl	15118 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    a8be:	2100      	movs	r1, #0
    a8c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    a8c4:	f004 fd02 	bl	f2cc <z_impl_k_sleep>
    class function<_Res(_ArgTypes...)>
    a8c8:	a801      	add	r0, sp, #4
    a8ca:	f00a fb10 	bl	14eee <_ZNSt14_Function_baseD1Ev>
    a8ce:	e7c4      	b.n	a85a <main+0x2a>
    a8d0:	a801      	add	r0, sp, #4
    a8d2:	f00a fb0c 	bl	14eee <_ZNSt14_Function_baseD1Ev>

        k_msleep(2000);
    }
}
    a8d6:	2001      	movs	r0, #1
    a8d8:	b01b      	add	sp, #108	; 0x6c
    a8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8dc:	20000384 	.word	0x20000384
    a8e0:	000099e1 	.word	0x000099e1
    a8e4:	00046ae8 	.word	0x00046ae8
    a8e8:	00046b05 	.word	0x00046b05
    a8ec:	00046aba 	.word	0x00046aba
    a8f0:	00046b4b 	.word	0x00046b4b
    a8f4:	00046b4d 	.word	0x00046b4d
    a8f8:	00046b50 	.word	0x00046b50

0000a8fc <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
    a8fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a900:	e9d0 9800 	ldrd	r9, r8, [r0]
    a904:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
    a906:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a90a:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
    a90e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    a912:	4607      	mov	r7, r0
    a914:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a916:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
    a91a:	d102      	bne.n	a922 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
    a91c:	481e      	ldr	r0, [pc, #120]	; (a998 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x9c>)
    a91e:	f00b fb33 	bl	15f88 <_ZSt20__throw_length_errorPKc>
    a922:	2c01      	cmp	r4, #1
    a924:	4622      	mov	r2, r4
    a926:	bf38      	it	cc
    a928:	2201      	movcc	r2, #1
    a92a:	18a4      	adds	r4, r4, r2
    a92c:	eba1 0509 	sub.w	r5, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    a930:	d22f      	bcs.n	a992 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    a932:	b13c      	cbz	r4, a944 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x48>
    a934:	429c      	cmp	r4, r3
    a936:	bf28      	it	cs
    a938:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    a93a:	00a0      	lsls	r0, r4, #2
    a93c:	f00b fb0e 	bl	15f5c <_Znwj>
    a940:	4606      	mov	r6, r0
    a942:	e000      	b.n	a946 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x4a>
    a944:	4626      	mov	r6, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    a946:	42ee      	cmn	r6, r5
    a948:	bf1c      	itt	ne
    a94a:	f8db 3000 	ldrne.w	r3, [fp]
    a94e:	5173      	strne	r3, [r6, r5]
      if (__count > 0)
    a950:	2d00      	cmp	r5, #0
    a952:	dd04      	ble.n	a95e <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x62>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    a954:	462a      	mov	r2, r5
    a956:	4649      	mov	r1, r9
    a958:	4630      	mov	r0, r6
    a95a:	f00b fb8a 	bl	16072 <memmove>
      ptrdiff_t __count = __last - __first;
    a95e:	eba8 080a 	sub.w	r8, r8, sl
	      ++__new_finish;
    a962:	3504      	adds	r5, #4
      if (__count > 0)
    a964:	f1b8 0f00 	cmp.w	r8, #0
    a968:	4435      	add	r5, r6
    a96a:	dd04      	ble.n	a976 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x7a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    a96c:	4642      	mov	r2, r8
    a96e:	4651      	mov	r1, sl
    a970:	4628      	mov	r0, r5
    a972:	f00b fb70 	bl	16056 <memcpy>
      return __result + __count;
    a976:	4445      	add	r5, r8
	if (__p)
    a978:	f1b9 0f00 	cmp.w	r9, #0
    a97c:	d002      	beq.n	a984 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x88>
	::operator delete(__p);
    a97e:	4648      	mov	r0, r9
    a980:	f00b fae8 	bl	15f54 <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    a984:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
    a988:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    a98c:	60bc      	str	r4, [r7, #8]
    }
    a98e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    a992:	461c      	mov	r4, r3
    a994:	e7d1      	b.n	a93a <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x3e>
    a996:	bf00      	nop
    a998:	000465b7 	.word	0x000465b7

0000a99c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>:
    static int stack_frames(stack_frames_info_t *info,
    a99c:	b570      	push	{r4, r5, r6, lr}
    a99e:	ed2d 8b02 	vpush	{d8}
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
    a9a2:	6805      	ldr	r5, [r0, #0]
    static int stack_frames(stack_frames_info_t *info,
    a9a4:	b084      	sub	sp, #16
    a9a6:	4606      	mov	r6, r0
    a9a8:	eef0 7a40 	vmov.f32	s15, s0
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
    a9ac:	2d00      	cmp	r5, #0
    a9ae:	d076      	beq.n	aa9e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
    a9b0:	68ab      	ldr	r3, [r5, #8]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d073      	beq.n	aa9e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
    a9b6:	692c      	ldr	r4, [r5, #16]
    a9b8:	2c00      	cmp	r4, #0
    a9ba:	d070      	beq.n	aa9e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
        if (version == 1) {
    a9bc:	2901      	cmp	r1, #1
    a9be:	ee20 0a20 	vmul.f32	s0, s0, s1
    a9c2:	ee67 8a81 	vmul.f32	s17, s15, s2
    a9c6:	d14b      	bne.n	aa60 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xc4>
    a9c8:	f005 f84e 	bl	fa68 <roundf>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
    a9cc:	eebd 8ac0 	vcvt.s32.f32	s16, s0
    a9d0:	eeb0 0a68 	vmov.f32	s0, s17
    a9d4:	f005 f848 	bl	fa68 <roundf>
            length = frame_sample_length;
    a9d8:	ee18 3a10 	vmov	r3, s16
    a9dc:	eef0 8a40 	vmov.f32	s17, s0
                floor(static_cast<float>(length_signal - length) / frame_stride));
    a9e0:	1ae3      	subs	r3, r4, r3
    a9e2:	ee00 3a10 	vmov	s0, r3
    a9e6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
  { return __builtin_floorf(__x); }
    a9ea:	ee80 0a28 	vdiv.f32	s0, s0, s17
    a9ee:	f004 ffa7 	bl	f940 <floorf>
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
    a9f2:	200c      	movs	r0, #12
            numframes = static_cast<int>(
    a9f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    a9f8:	ed8d 0a01 	vstr	s0, [sp, #4]
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
    a9fc:	9b01      	ldr	r3, [sp, #4]
    a9fe:	3b01      	subs	r3, #1
    aa00:	ee07 3a90 	vmov	s15, r3
    aa04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    aa08:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    aa0c:	eee8 7a87 	vfma.f32	s15, s17, s14
            len_sig = static_cast<int>(
    aa10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    aa14:	edcd 7a02 	vstr	s15, [sp, #8]
            info->signal->total_length = static_cast<size_t>(len_sig);
    aa18:	9b02      	ldr	r3, [sp, #8]
    aa1a:	612b      	str	r3, [r5, #16]
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
    aa1c:	f00b fa9e 	bl	15f5c <_Znwj>
    aa20:	4604      	mov	r4, r0
    aa22:	b118      	cbz	r0, aa2c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x90>
	: _M_start(), _M_finish(), _M_end_of_storage()
    aa24:	2300      	movs	r3, #0
    aa26:	e9c0 3300 	strd	r3, r3, [r0]
    aa2a:	6083      	str	r3, [r0, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
    aa2c:	2500      	movs	r5, #0
    aa2e:	9503      	str	r5, [sp, #12]
    aa30:	9b03      	ldr	r3, [sp, #12]
    aa32:	9a02      	ldr	r2, [sp, #8]
    aa34:	4293      	cmp	r3, r2
    aa36:	d22a      	bcs.n	aa8e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf2>
            if (++frame_count > numframes) break;
    aa38:	9a01      	ldr	r2, [sp, #4]
    aa3a:	3501      	adds	r5, #1
    aa3c:	4295      	cmp	r5, r2
    aa3e:	dc26      	bgt.n	aa8e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf2>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    aa40:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    aa44:	4291      	cmp	r1, r2
    aa46:	d01d      	beq.n	aa84 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    aa48:	b101      	cbz	r1, aa4c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb0>
    aa4a:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
    aa4c:	3104      	adds	r1, #4
    aa4e:	6061      	str	r1, [r4, #4]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
    aa50:	eefc 7ae8 	vcvt.u32.f32	s15, s17
    aa54:	9b03      	ldr	r3, [sp, #12]
    aa56:	ee17 2a90 	vmov	r2, s15
    aa5a:	4413      	add	r3, r2
    aa5c:	9303      	str	r3, [sp, #12]
    aa5e:	e7e7      	b.n	aa30 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x94>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
    aa60:	f7fe ffcc 	bl	99fc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
    aa64:	eebd 8ac0 	vcvt.s32.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
    aa68:	eeb0 0a68 	vmov.f32	s0, s17
    aa6c:	f7fe ffc6 	bl	99fc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            length = (frame_sample_length - (int)frame_stride);
    aa70:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    aa74:	ee18 2a10 	vmov	r2, s16
    aa78:	ee17 3a90 	vmov	r3, s15
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
    aa7c:	eef0 8a40 	vmov.f32	s17, s0
            length = (frame_sample_length - (int)frame_stride);
    aa80:	1ad3      	subs	r3, r2, r3
    aa82:	e7ad      	b.n	a9e0 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x44>
	  _M_realloc_insert(end(), __x);
    aa84:	aa03      	add	r2, sp, #12
    aa86:	4620      	mov	r0, r4
    aa88:	f7ff ff38 	bl	a8fc <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>
    aa8c:	e7e0      	b.n	aa50 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb4>
        info->frame_ixs = frame_indices;
    aa8e:	6074      	str	r4, [r6, #4]
        info->frame_length = frame_sample_length;
    aa90:	ed86 8a02 	vstr	s16, [r6, #8]
        return EIDSP_OK;
    aa94:	2000      	movs	r0, #0
    }
    aa96:	b004      	add	sp, #16
    aa98:	ecbd 8b02 	vpop	{d8}
    aa9c:	bd70      	pop	{r4, r5, r6, pc}
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
    aa9e:	4801      	ldr	r0, [pc, #4]	; (aaa4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x108>)
    aaa0:	e7f9      	b.n	aa96 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xfa>
    aaa2:	bf00      	nop
    aaa4:	fffffc15 	.word	0xfffffc15

0000aaa8 <_ZNKSt6vectorIjSaIjEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
    aaa8:	b508      	push	{r3, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    aaaa:	e9d0 2300 	ldrd	r2, r3, [r0]
    aaae:	1a9b      	subs	r3, r3, r2
	if (__n >= this->size())
    aab0:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    aab4:	ea4f 02a3 	mov.w	r2, r3, asr #2
	if (__n >= this->size())
    aab8:	d302      	bcc.n	aac0 <_ZNKSt6vectorIjSaIjEE14_M_range_checkEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
    aaba:	4802      	ldr	r0, [pc, #8]	; (aac4 <_ZNKSt6vectorIjSaIjEE14_M_range_checkEj+0x1c>)
    aabc:	f00b fa67 	bl	15f8e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
    aac0:	bd08      	pop	{r3, pc}
    aac2:	bf00      	nop
    aac4:	00046b53 	.word	0x00046b53

0000aac8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
    aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aacc:	b099      	sub	sp, #100	; 0x64
    aace:	461f      	mov	r7, r3
    aad0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
    aad4:	9304      	str	r3, [sp, #16]
        uint16_t version
        )
    {
        int ret = 0;

        if (high_frequency == 0) {
    aad6:	e9dd 8324 	ldrd	r8, r3, [sp, #144]	; 0x90
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
    aada:	f8bd a088 	ldrh.w	sl, [sp, #136]	; 0x88
    aade:	4605      	mov	r5, r0
    aae0:	460e      	mov	r6, r1
    aae2:	eeb0 1a60 	vmov.f32	s2, s1
        if (high_frequency == 0) {
    aae6:	b90b      	cbnz	r3, aaec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x24>
            high_frequency = sampling_frequency / 2;
    aae8:	087b      	lsrs	r3, r7, #1
    aaea:	9325      	str	r3, [sp, #148]	; 0x94
        }

        stack_frames_info_t stack_frame_info = { 0 };
        stack_frame_info.signal = signal;

        ret = processing::stack_frames(
    aaec:	ee07 7a90 	vmov	s15, r7
            low_frequency = 300;
    aaf0:	f1b8 0f00 	cmp.w	r8, #0
        stack_frames_info_t stack_frame_info = { 0 };
    aaf4:	f04f 0300 	mov.w	r3, #0
        ret = processing::stack_frames(
    aaf8:	eef0 0a40 	vmov.f32	s1, s0
    aafc:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
        stack_frame_info.signal = signal;
    ab00:	9208      	str	r2, [sp, #32]
        ret = processing::stack_frames(
    ab02:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    ab06:	a808      	add	r0, sp, #32
        stack_frames_info_t stack_frame_info = { 0 };
    ab08:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
            low_frequency = 300;
    ab0c:	bf08      	it	eq
    ab0e:	f44f 7896 	moveq.w	r8, #300	; 0x12c
        ret = processing::stack_frames(
    ab12:	f7ff ff43 	bl	a99c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
    ab16:	4604      	mov	r4, r0
    ab18:	2800      	cmp	r0, #0
    ab1a:	f040 80f0 	bne.w	acfe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x236>
            EIDSP_ERR(ret);
        }

        if (stack_frame_info.frame_ixs->size() != out_features->rows) {
    ab1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab20:	6869      	ldr	r1, [r5, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    ab22:	e9d2 2300 	ldrd	r2, r3, [r2]
    ab26:	1a9b      	subs	r3, r3, r2
    ab28:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
    ab2c:	f040 80f9 	bne.w	ad22 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x25a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (num_filters != out_features->cols) {
    ab30:	f8d5 b008 	ldr.w	fp, [r5, #8]
    ab34:	45da      	cmp	sl, fp
    ab36:	f040 80f4 	bne.w	ad22 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x25a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (stack_frame_info.frame_ixs->size() != out_energies->rows || out_energies->cols != 1) {
    ab3a:	6872      	ldr	r2, [r6, #4]
    ab3c:	428a      	cmp	r2, r1
    ab3e:	f040 80f0 	bne.w	ad22 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x25a>
    ab42:	68b1      	ldr	r1, [r6, #8]
    ab44:	2901      	cmp	r1, #1
    ab46:	f040 80ec 	bne.w	ad22 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x25a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    ab4a:	fb02 f20a 	mul.w	r2, r2, sl
            *(out_features->buffer + i) = 0;
    ab4e:	2000      	movs	r0, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    ab50:	42a2      	cmp	r2, r4
    ab52:	d005      	beq.n	ab60 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x98>
            *(out_features->buffer + i) = 0;
    ab54:	6829      	ldr	r1, [r5, #0]
    ab56:	eb01 0184 	add.w	r1, r1, r4, lsl #2
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    ab5a:	3401      	adds	r4, #1
            *(out_features->buffer + i) = 0;
    ab5c:	6008      	str	r0, [r1, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    ab5e:	e7f7      	b.n	ab50 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x88>
        }

        uint16_t coefficients = fft_length / 2 + 1;
    ab60:	9b04      	ldr	r3, [sp, #16]
    ab62:	ea4f 0953 	mov.w	r9, r3, lsr #1
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
    ab66:	2101      	movs	r1, #1
    ab68:	fb09 b00b 	mla	r0, r9, fp, fp
    ab6c:	f007 f850 	bl	11c10 <_Z9ei_callocjj>
    ab70:	f109 0401 	add.w	r4, r9, #1
            buffer_managed_by_me = true;
        }
        rows = n_rows;
        cols = n_cols;
        dequantization_fn = a_dequantization_fn;
    ab74:	4b6c      	ldr	r3, [pc, #432]	; (ad28 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x260>)
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
    ab76:	9013      	str	r0, [sp, #76]	; 0x4c
            buffer_managed_by_me = true;
    ab78:	2201      	movs	r2, #1
        cols = n_cols;
    ab7a:	e9cd b414 	strd	fp, r4, [sp, #80]	; 0x50
            buffer_managed_by_me = true;
    ab7e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
        dequantization_fn = a_dequantization_fn;
    ab82:	9317      	str	r3, [sp, #92]	; 0x5c

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
    ab84:	2800      	cmp	r0, #0
    ab86:	f000 80ca 	beq.w	ad1e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x256>
#endif
        if (!filterbanks.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        ret = feature::filterbanks(
    ab8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ab8c:	9202      	str	r2, [sp, #8]
    ab8e:	e9cd 8300 	strd	r8, r3, [sp]
    ab92:	4622      	mov	r2, r4
    ab94:	463b      	mov	r3, r7
    ab96:	4651      	mov	r1, sl
    ab98:	a813      	add	r0, sp, #76	; 0x4c
    ab9a:	f7f7 f9c1 	bl	1f20 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb>
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
    ab9e:	4604      	mov	r4, r0
    aba0:	2800      	cmp	r0, #0
    aba2:	f040 80a5 	bne.w	acf0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x228>
            EIDSP_ERR(ret);
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
    aba6:	4607      	mov	r7, r0
    aba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    abaa:	e9d2 2300 	ldrd	r2, r3, [r2]
    abae:	1a9b      	subs	r3, r3, r2
    abb0:	ebb7 0fa3 	cmp.w	r7, r3, asr #2
    abb4:	f080 80af 	bcs.w	ad16 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x24e>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);
    abb8:	f109 0801 	add.w	r8, r9, #1

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    abbc:	2300      	movs	r3, #0
    abbe:	4642      	mov	r2, r8
    abc0:	2101      	movs	r1, #1
    abc2:	a80b      	add	r0, sp, #44	; 0x2c
    abc4:	f00a f99c 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    abc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abca:	2b00      	cmp	r3, #0
    abcc:	f000 80a1 	beq.w	ad12 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x24a>
            if (!power_spectrum_frame.buffer) {
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    abd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    abd2:	2300      	movs	r3, #0
    abd4:	2101      	movs	r1, #1
    abd6:	a80f      	add	r0, sp, #60	; 0x3c
    abd8:	f00a f992 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    abdc:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
    abe0:	f1bb 0f00 	cmp.w	fp, #0
    abe4:	d07b      	beq.n	acde <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x216>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
    abe6:	9809      	ldr	r0, [sp, #36]	; 0x24
	_M_range_check(__n);
    abe8:	9005      	str	r0, [sp, #20]
    abea:	4639      	mov	r1, r7
    abec:	f7ff ff5c 	bl	aaa8 <_ZNKSt6vectorIjSaIjEE14_M_range_checkEj>
    abf0:	9805      	ldr	r0, [sp, #20]
            size_t signal_length = stack_frame_info.frame_length;
    abf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
    abf4:	6803      	ldr	r3, [r0, #0]
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
    abf6:	9808      	ldr	r0, [sp, #32]
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
    abf8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
    abfc:	6903      	ldr	r3, [r0, #16]
    abfe:	eb01 0c02 	add.w	ip, r1, r2
    ac02:	459c      	cmp	ip, r3
    ac04:	bf84      	itt	hi
    ac06:	1ad2      	subhi	r2, r2, r3
                signal_length = signal_length -
    ac08:	4462      	addhi	r2, ip
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
            }

            ret = stack_frame_info.signal->get_data(
    ac0a:	465b      	mov	r3, fp
    ac0c:	f00a f9b9 	bl	14f82 <_ZNKSt8functionIFijjPfEEclEjjS0_>
    ac10:	ea4f 0a87 	mov.w	sl, r7, lsl #2
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
    ac14:	4683      	mov	fp, r0
    ac16:	2800      	cmp	r0, #0
    ac18:	d163      	bne.n	ace2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x21a>
                EIDSP_ERR(ret);
            }

            ret = processing::power_spectrum(
    ac1a:	9b04      	ldr	r3, [sp, #16]
    ac1c:	9300      	str	r3, [sp, #0]
    ac1e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    ac22:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ac24:	4643      	mov	r3, r8
    ac26:	f7ff f94b 	bl	9ec0 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
    ac2a:	4683      	mov	fp, r0
    ac2c:	2800      	cmp	r0, #0
    ac2e:	d158      	bne.n	ace2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x21a>
                EIDSP_ERR(ret);
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
    ac30:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
        float res = 0.0f;
    ac34:	eddf 7a3d 	vldr	s15, [pc, #244]	; ad2c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x264>
    ac38:	4673      	mov	r3, lr
            res += input_array[ix];
    ac3a:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
    ac3e:	f10b 0b01 	add.w	fp, fp, #1
    ac42:	45d8      	cmp	r8, fp
            res += input_array[ix];
    ac44:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
    ac48:	d8f7      	bhi.n	ac3a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x172>
            if (energy == 0) {
    ac4a:	eef5 7a40 	vcmp.f32	s15, #0.0
                energy = 1e-10;
            }

            out_energies->buffer[ix] = energy;
    ac4e:	6833      	ldr	r3, [r6, #0]
            if (energy == 0) {
    ac50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
    ac54:	bf08      	it	eq
    ac56:	eddf 7a36 	vldreq	s15, [pc, #216]	; ad30 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x268>
            out_energies->buffer[ix] = energy;
    ac5a:	4453      	add	r3, sl
    ac5c:	edc3 7a00 	vstr	s15, [r3]
        if (matrix1_cols != matrix2->rows) {
    ac60:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac62:	4598      	cmp	r8, r3
    ac64:	d152      	bne.n	ad0c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    ac66:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    ac6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ac6c:	9305      	str	r3, [sp, #20]
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
    ac6e:	fb0c f307 	mul.w	r3, ip, r7
    ac72:	9306      	str	r3, [sp, #24]
    ac74:	2000      	movs	r0, #0
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    ac76:	b283      	uxth	r3, r0
    ac78:	4563      	cmp	r3, ip
    ac7a:	d228      	bcs.n	acce <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x206>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    ac7c:	9a05      	ldr	r2, [sp, #20]
            float tmp = 0.0;
    ac7e:	eddf 7a2b 	vldr	s15, [pc, #172]	; ad2c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x264>
    ac82:	f04f 0a00 	mov.w	sl, #0
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    ac86:	eb02 0b03 	add.w	fp, r2, r3
            for (uint16_t k = 0; k < matrix1_cols; k++) {
    ac8a:	fa1f f28a 	uxth.w	r2, sl
    ac8e:	4542      	cmp	r2, r8
    ac90:	d214      	bcs.n	acbc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1f4>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    ac92:	fb0c f102 	mul.w	r1, ip, r2
    ac96:	f81b 1001 	ldrb.w	r1, [fp, r1]
                if (u8) { // this matrix appears to be very sparsely populated
    ac9a:	b161      	cbz	r1, acb6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1ee>
                    tmp += row[k] * quantized_values_one_zero[u8];
    ac9c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    aca0:	9207      	str	r2, [sp, #28]
    aca2:	4a24      	ldr	r2, [pc, #144]	; (ad34 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x26c>)
    aca4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    aca8:	9a07      	ldr	r2, [sp, #28]
    acaa:	ed91 7a00 	vldr	s14, [r1]
    acae:	edd2 6a00 	vldr	s13, [r2]
    acb2:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (uint16_t k = 0; k < matrix1_cols; k++) {
    acb6:	f10a 0a01 	add.w	sl, sl, #1
    acba:	e7e6      	b.n	ac8a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1c2>
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
    acbc:	9a06      	ldr	r2, [sp, #24]
    acbe:	4413      	add	r3, r2
    acc0:	682a      	ldr	r2, [r5, #0]
    acc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    acc6:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    acca:	3001      	adds	r0, #1
    accc:	e7d3      	b.n	ac76 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1ae>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    acce:	a80f      	add	r0, sp, #60	; 0x3c
    acd0:	f006 ff4f 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    acd4:	a80b      	add	r0, sp, #44	; 0x2c
    acd6:	f006 ff4c 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
    acda:	3701      	adds	r7, #1
    acdc:	e764      	b.n	aba8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0xe0>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    acde:	f8df b058 	ldr.w	fp, [pc, #88]	; ad38 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x270>
    ace2:	a80f      	add	r0, sp, #60	; 0x3c
    ace4:	f006 ff45 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    ace8:	465c      	mov	r4, fp
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    acea:	a80b      	add	r0, sp, #44	; 0x2c
    acec:	f006 ff41 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
#endif
        }
    }

    ~ei_quantized_matrix() {
        if (buffer && buffer_managed_by_me) {
    acf0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    acf2:	b120      	cbz	r0, acfe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x236>
    acf4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    acf8:	b10b      	cbz	r3, acfe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x236>
            ei_free(buffer);
    acfa:	f006 ff8b 	bl	11c14 <_Z7ei_freePv>
        stack_frames_info_t stack_frame_info = { 0 };
    acfe:	a808      	add	r0, sp, #32
    ad00:	f00a f926 	bl	14f50 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
        }

        functions::zero_handling(out_features);

        return EIDSP_OK;
    }
    ad04:	4620      	mov	r0, r4
    ad06:	b019      	add	sp, #100	; 0x64
    ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    ad0c:	f8df b02c 	ldr.w	fp, [pc, #44]	; ad3c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x274>
    ad10:	e7e7      	b.n	ace2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x21a>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    ad12:	4c09      	ldr	r4, [pc, #36]	; (ad38 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x270>)
    ad14:	e7e9      	b.n	acea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x222>
        functions::zero_handling(out_features);
    ad16:	4628      	mov	r0, r5
    ad18:	f7ff fa20 	bl	a15c <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
    ad1c:	e7e8      	b.n	acf0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x228>
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
    ad1e:	4c06      	ldr	r4, [pc, #24]	; (ad38 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x270>)
    ad20:	e7e6      	b.n	acf0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x228>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    ad22:	4c06      	ldr	r4, [pc, #24]	; (ad3c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x274>)
    ad24:	e7eb      	b.n	acfe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x236>
    ad26:	bf00      	nop
    ad28:	000099d1 	.word	0x000099d1
    ad2c:	00000000 	.word	0x00000000
    ad30:	2edbe6ff 	.word	0x2edbe6ff
    ad34:	0003fcc8 	.word	0x0003fcc8
    ad38:	fffffc16 	.word	0xfffffc16
    ad3c:	fffffc14 	.word	0xfffffc14

0000ad40 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad44:	ed2d 8b02 	vpush	{d8}
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    ad48:	e9d2 8304 	ldrd	r8, r3, [r2, #16]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    ad4c:	b097      	sub	sp, #92	; 0x5c
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    ad4e:	8817      	ldrh	r7, [r2, #0]
    ad50:	930a      	str	r3, [sp, #40]	; 0x28
    ad52:	6993      	ldr	r3, [r2, #24]
    ad54:	9307      	str	r3, [sp, #28]
    ad56:	69d3      	ldr	r3, [r2, #28]
    ad58:	9308      	str	r3, [sp, #32]
    ad5a:	6a13      	ldr	r3, [r2, #32]
    ad5c:	9309      	str	r3, [sp, #36]	; 0x24
    if (config.axes != 1) {
    ad5e:	6853      	ldr	r3, [r2, #4]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    ad60:	ed92 8a02 	vldr	s16, [r2, #8]
    ad64:	edd2 8a03 	vldr	s17, [r2, #12]
    ad68:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
    if (config.axes != 1) {
    ad6c:	2b01      	cmp	r3, #1
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    ad6e:	4606      	mov	r6, r0
    ad70:	460c      	mov	r4, r1
    if (config.axes != 1) {
    ad72:	f040 80af 	bne.w	aed4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x194>
    if (signal->total_length == 0) {
    ad76:	6902      	ldr	r2, [r0, #16]
    ad78:	2a00      	cmp	r2, #0
    ad7a:	f000 80ad 	beq.w	aed8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x198>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
    ad7e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    _Function_base() : _M_manager(nullptr) { }
    ad82:	2100      	movs	r1, #0
    if (config.implementation_version < 3) {
    ad84:	2f02      	cmp	r7, #2
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
    ad86:	ee17 5a90 	vmov	r5, s15
    ad8a:	f8df a158 	ldr.w	sl, [pc, #344]	; aee4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>
    ad8e:	9113      	str	r1, [sp, #76]	; 0x4c
    if (config.implementation_version < 3) {
    ad90:	d82d      	bhi.n	adee <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        preemphasis = nullptr;
    ad92:	f8ca 1000 	str.w	r1, [sl]
        preemphasized_audio_signal.get_data = signal->get_data;
    ad96:	4601      	mov	r1, r0
    ad98:	a811      	add	r0, sp, #68	; 0x44
        preemphasized_audio_signal.total_length = signal->total_length;
    ad9a:	9215      	str	r2, [sp, #84]	; 0x54
        preemphasized_audio_signal.get_data = signal->get_data;
    ad9c:	f00a f983 	bl	150a6 <_ZNSt8functionIFijjPfEEaSERKS2_>
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
    ada0:	463a      	mov	r2, r7
    ada2:	4629      	mov	r1, r5
    ada4:	9815      	ldr	r0, [sp, #84]	; 0x54
    ada6:	eef0 0a68 	vmov.f32	s1, s17
    adaa:	eeb0 0a48 	vmov.f32	s0, s16
    adae:	f00a f861 	bl	14e74 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0>
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
    adb2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    adb6:	fa1f fa88 	uxth.w	sl, r8
    adba:	fb0a f900 	mul.w	r9, sl, r0
    adbe:	fb02 f301 	mul.w	r3, r2, r1
    adc2:	4599      	cmp	r9, r3
    adc4:	4606      	mov	r6, r0
    adc6:	d928      	bls.n	ae1a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xda>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
    adc8:	4844      	ldr	r0, [pc, #272]	; (aedc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
    adca:	f7fa fd4b 	bl	5864 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
    adce:	4844      	ldr	r0, [pc, #272]	; (aee0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>)
    add0:	4652      	mov	r2, sl
    add2:	4631      	mov	r1, r6
    add4:	f7fa fd46 	bl	5864 <_Z9ei_printfPKcz>
        if (preemphasis) {
    add8:	4b42      	ldr	r3, [pc, #264]	; (aee4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
    adda:	681c      	ldr	r4, [r3, #0]
    addc:	b12c      	cbz	r4, adea <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xaa>
            delete preemphasis;
    adde:	4620      	mov	r0, r4
    ade0:	f00a f8c3 	bl	14f6a <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    ade4:	4620      	mov	r0, r4
    ade6:	f00b f8b5 	bl	15f54 <_ZdlPv>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    adea:	4d3f      	ldr	r5, [pc, #252]	; (aee8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
    adec:	e047      	b.n	ae7e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13e>
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
    adee:	201c      	movs	r0, #28
    adf0:	930b      	str	r3, [sp, #44]	; 0x2c
    adf2:	f00b f8b3 	bl	15f5c <_Znwj>
    adf6:	4681      	mov	r9, r0
    adf8:	b130      	cbz	r0, ae08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>
    adfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adfc:	ed9f 0a3b 	vldr	s0, [pc, #236]	; aeec <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ac>
    ae00:	461a      	mov	r2, r3
    ae02:	4631      	mov	r1, r6
    ae04:	f00a f8cc 	bl	14fa0 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
        preemphasized_audio_signal.total_length = signal->total_length;
    ae08:	6933      	ldr	r3, [r6, #16]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    ae0a:	4939      	ldr	r1, [pc, #228]	; (aef0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>)
        preemphasis = pre;
    ae0c:	f8ca 9000 	str.w	r9, [sl]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    ae10:	a811      	add	r0, sp, #68	; 0x44
        preemphasized_audio_signal.total_length = signal->total_length;
    ae12:	9315      	str	r3, [sp, #84]	; 0x54
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    ae14:	f7ff fc34 	bl	a680 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
    ae18:	e7c2      	b.n	ada0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
    output_matrix->cols = out_matrix_size.cols;
    ae1a:	e9c4 0a01 	strd	r0, sl, [r4, #4]
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    ae1e:	2300      	movs	r3, #0
    ae20:	4601      	mov	r1, r0
    ae22:	2201      	movs	r2, #1
    ae24:	a80d      	add	r0, sp, #52	; 0x34
    ae26:	f00a f86b 	bl	14f00 <_ZN2ei9ei_matrixC1EjjPf>
    ae2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d04f      	beq.n	aed0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x190>
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
    ae30:	9b08      	ldr	r3, [sp, #32]
    ae32:	9303      	str	r3, [sp, #12]
    ae34:	9b07      	ldr	r3, [sp, #28]
    ae36:	9302      	str	r3, [sp, #8]
    ae38:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ae3c:	9301      	str	r3, [sp, #4]
    ae3e:	fa1f f388 	uxth.w	r3, r8
    ae42:	9300      	str	r3, [sp, #0]
    ae44:	9704      	str	r7, [sp, #16]
    ae46:	462b      	mov	r3, r5
    ae48:	eef0 0a68 	vmov.f32	s1, s17
    ae4c:	eeb0 0a48 	vmov.f32	s0, s16
    ae50:	aa11      	add	r2, sp, #68	; 0x44
    ae52:	a90d      	add	r1, sp, #52	; 0x34
    ae54:	4620      	mov	r0, r4
    ae56:	f7ff fe37 	bl	aac8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt>
    if (preemphasis) {
    ae5a:	4b22      	ldr	r3, [pc, #136]	; (aee4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
    ae5c:	681e      	ldr	r6, [r3, #0]
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
    ae5e:	4605      	mov	r5, r0
    if (preemphasis) {
    ae60:	b12e      	cbz	r6, ae6e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12e>
        delete preemphasis;
    ae62:	4630      	mov	r0, r6
    ae64:	f00a f881 	bl	14f6a <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    ae68:	4630      	mov	r0, r6
    ae6a:	f00b f873 	bl	15f54 <_ZdlPv>
    if (ret != EIDSP_OK) {
    ae6e:	b17d      	cbz	r5, ae90 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x150>
        ei_printf("ERR: MFE failed (%d)\n", ret);
    ae70:	4820      	ldr	r0, [pc, #128]	; (aef4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>)
    ae72:	4629      	mov	r1, r5
    ae74:	f7fa fcf6 	bl	5864 <_Z9ei_printfPKcz>
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    ae78:	a80d      	add	r0, sp, #52	; 0x34
    ae7a:	f006 fe7a 	bl	11b72 <_ZN2ei9ei_matrixD1Ev>
    class function<_Res(_ArgTypes...)>
    ae7e:	a811      	add	r0, sp, #68	; 0x44
    ae80:	f00a f835 	bl	14eee <_ZNSt14_Function_baseD1Ev>
}
    ae84:	4628      	mov	r0, r5
    ae86:	b017      	add	sp, #92	; 0x5c
    ae88:	ecbd 8b02 	vpop	{d8}
    ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (config.implementation_version < 3) {
    ae90:	2f02      	cmp	r7, #2
    ae92:	d80f      	bhi.n	aeb4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x174>
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
    ae94:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        if (win_size == 0) {
    ae98:	b1a9      	cbz	r1, aec6 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x186>
    ae9a:	2301      	movs	r3, #1
    ae9c:	462a      	mov	r2, r5
    ae9e:	4620      	mov	r0, r4
    aea0:	f7f6 ff32 	bl	1d08 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb.part.0>
        if (ret != EIDSP_OK) {
    aea4:	4606      	mov	r6, r0
    aea6:	b170      	cbz	r0, aec6 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x186>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
    aea8:	4601      	mov	r1, r0
    aeaa:	4813      	ldr	r0, [pc, #76]	; (aef8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>)
            ei_printf("ERR: normalization failed (%d)\n", ret);
    aeac:	f7fa fcda 	bl	5864 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
    aeb0:	4635      	mov	r5, r6
    aeb2:	e7e1      	b.n	ae78 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
    aeb4:	4659      	mov	r1, fp
    aeb6:	4620      	mov	r0, r4
    aeb8:	f7f6 fcf6 	bl	18a8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
    aebc:	4606      	mov	r6, r0
    aebe:	b110      	cbz	r0, aec6 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x186>
            ei_printf("ERR: normalization failed (%d)\n", ret);
    aec0:	4601      	mov	r1, r0
    aec2:	480e      	ldr	r0, [pc, #56]	; (aefc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
    aec4:	e7f2      	b.n	aeac <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16c>
    output_matrix->rows = 1;
    aec6:	2301      	movs	r3, #1
    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
    aec8:	f8c4 9008 	str.w	r9, [r4, #8]
    output_matrix->rows = 1;
    aecc:	6063      	str	r3, [r4, #4]
    return EIDSP_OK;
    aece:	e7d3      	b.n	ae78 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    aed0:	4d0b      	ldr	r5, [pc, #44]	; (af00 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
    aed2:	e7d1      	b.n	ae78 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    aed4:	4d04      	ldr	r5, [pc, #16]	; (aee8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
    aed6:	e7d5      	b.n	ae84 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
    aed8:	4d0a      	ldr	r5, [pc, #40]	; (af04 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>)
    aeda:	e7d3      	b.n	ae84 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
    aedc:	00046b9d 	.word	0x00046b9d
    aee0:	00046bb1 	.word	0x00046bb1
    aee4:	2000119c 	.word	0x2000119c
    aee8:	fffffc14 	.word	0xfffffc14
    aeec:	3f7ae148 	.word	0x3f7ae148
    aef0:	0000a381 	.word	0x0000a381
    aef4:	00046bca 	.word	0x00046bca
    aef8:	00046a67 	.word	0x00046a67
    aefc:	00046a7f 	.word	0x00046a7f
    af00:	fffffc16 	.word	0xfffffc16
    af04:	fffffc10 	.word	0xfffffc10

0000af08 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    af08:	680b      	ldr	r3, [r1, #0]
    af0a:	3301      	adds	r3, #1
    af0c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    af0e:	4b01      	ldr	r3, [pc, #4]	; (af14 <char_out+0xc>)
    af10:	681b      	ldr	r3, [r3, #0]
    af12:	4718      	bx	r3
    af14:	20000270 	.word	0x20000270

0000af18 <__printk_hook_install>:
	_char_out = fn;
    af18:	4b01      	ldr	r3, [pc, #4]	; (af20 <__printk_hook_install+0x8>)
    af1a:	6018      	str	r0, [r3, #0]
}
    af1c:	4770      	bx	lr
    af1e:	bf00      	nop
    af20:	20000270 	.word	0x20000270

0000af24 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    af24:	b507      	push	{r0, r1, r2, lr}
    af26:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    af28:	2100      	movs	r1, #0
{
    af2a:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    af2c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    af2e:	4803      	ldr	r0, [pc, #12]	; (af3c <vprintk+0x18>)
    af30:	a901      	add	r1, sp, #4
    af32:	f000 f953 	bl	b1dc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    af36:	b003      	add	sp, #12
    af38:	f85d fb04 	ldr.w	pc, [sp], #4
    af3c:	0000af09 	.word	0x0000af09

0000af40 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    af40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    af44:	f8b0 901c 	ldrh.w	r9, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    af48:	f019 0808 	ands.w	r8, r9, #8
{
    af4c:	4604      	mov	r4, r0
    af4e:	4693      	mov	fp, r2
	if (processing) {
    af50:	d00e      	beq.n	af70 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    af52:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    af54:	bf0c      	ite	eq
    af56:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    af5a:	f049 0920 	orrne.w	r9, r9, #32
    af5e:	f8a0 901c 	strh.w	r9, [r0, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    af62:	f38b 8811 	msr	BASEPRI, fp
    af66:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    af6a:	b003      	add	sp, #12
    af6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    af70:	f8df a198 	ldr.w	sl, [pc, #408]	; b10c <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    af74:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    af78:	2902      	cmp	r1, #2
    af7a:	d107      	bne.n	af8c <process_event+0x4c>
			evt = process_recheck(mgr);
    af7c:	4620      	mov	r0, r4
    af7e:	f00a f8d8 	bl	15132 <process_recheck>
		if (evt == EVT_NOP) {
    af82:	2800      	cmp	r0, #0
    af84:	d0ed      	beq.n	af62 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    af86:	2801      	cmp	r0, #1
    af88:	8ba3      	ldrh	r3, [r4, #28]
    af8a:	d14d      	bne.n	b028 <process_event+0xe8>
			res = mgr->last_res;
    af8c:	69a7      	ldr	r7, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    af8e:	8ba1      	ldrh	r1, [r4, #28]
	if (res < 0) {
    af90:	2f00      	cmp	r7, #0
    af92:	da15      	bge.n	afc0 <process_event+0x80>
		*clients = mgr->clients;
    af94:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    af96:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    af9a:	e9c4 8800 	strd	r8, r8, [r4]
    af9e:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    afa2:	83a1      	strh	r1, [r4, #28]
		onoff_transition_fn transit = NULL;
    afa4:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    afa6:	8ba1      	ldrh	r1, [r4, #28]
    afa8:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    afac:	454a      	cmp	r2, r9
    afae:	d002      	beq.n	afb6 <process_event+0x76>
		if (do_monitors
    afb0:	68a3      	ldr	r3, [r4, #8]
    afb2:	2b00      	cmp	r3, #0
    afb4:	d159      	bne.n	b06a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    afb6:	b90d      	cbnz	r5, afbc <process_event+0x7c>
		    || (transit != NULL)) {
    afb8:	2e00      	cmp	r6, #0
    afba:	d071      	beq.n	b0a0 <process_event+0x160>
    afbc:	2300      	movs	r3, #0
    afbe:	e055      	b.n	b06c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    afc0:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    afc4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    afc6:	2a01      	cmp	r2, #1
    afc8:	d81f      	bhi.n	b00a <process_event+0xca>
		*clients = mgr->clients;
    afca:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    afce:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    afd0:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    afd2:	b289      	uxth	r1, r1
	list->tail = NULL;
    afd4:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    afd8:	d10c      	bne.n	aff4 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    afda:	2d00      	cmp	r5, #0
    afdc:	462b      	mov	r3, r5
    afde:	bf38      	it	cc
    afe0:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    afe2:	b12b      	cbz	r3, aff0 <process_event+0xb0>
				mgr->refs += 1U;
    afe4:	8be2      	ldrh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    afe6:	681b      	ldr	r3, [r3, #0]
    afe8:	3201      	adds	r2, #1
    afea:	83e2      	strh	r2, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    afec:	2b00      	cmp	r3, #0
    afee:	d1f8      	bne.n	afe2 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aff0:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    aff4:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    aff6:	4620      	mov	r0, r4
    aff8:	f00a f89b 	bl	15132 <process_recheck>
    affc:	2800      	cmp	r0, #0
    affe:	d0d1      	beq.n	afa4 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b000:	8ba3      	ldrh	r3, [r4, #28]
    b002:	f043 0320 	orr.w	r3, r3, #32
    b006:	83a3      	strh	r3, [r4, #28]
    b008:	e7cc      	b.n	afa4 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    b00a:	2b04      	cmp	r3, #4
    b00c:	d10a      	bne.n	b024 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b00e:	f021 0107 	bic.w	r1, r1, #7
    b012:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    b014:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    b016:	4620      	mov	r0, r4
    b018:	f00a f88b 	bl	15132 <process_recheck>
    b01c:	b110      	cbz	r0, b024 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b01e:	f041 0120 	orr.w	r1, r1, #32
    b022:	83a1      	strh	r1, [r4, #28]
    b024:	2500      	movs	r5, #0
    b026:	e7bd      	b.n	afa4 <process_event+0x64>
		} else if (evt == EVT_START) {
    b028:	2803      	cmp	r0, #3
    b02a:	d109      	bne.n	b040 <process_event+0x100>
			transit = mgr->transitions->start;
    b02c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b02e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    b032:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b034:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    b038:	83a3      	strh	r3, [r4, #28]
}
    b03a:	2500      	movs	r5, #0
		res = 0;
    b03c:	462f      	mov	r7, r5
    b03e:	e7b2      	b.n	afa6 <process_event+0x66>
		} else if (evt == EVT_STOP) {
    b040:	2804      	cmp	r0, #4
    b042:	d106      	bne.n	b052 <process_event+0x112>
			transit = mgr->transitions->stop;
    b044:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b046:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    b04a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b04c:	f043 0304 	orr.w	r3, r3, #4
    b050:	e7f2      	b.n	b038 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    b052:	2805      	cmp	r0, #5
    b054:	d106      	bne.n	b064 <process_event+0x124>
			transit = mgr->transitions->reset;
    b056:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b058:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    b05c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b05e:	f043 0305 	orr.w	r3, r3, #5
    b062:	e7e9      	b.n	b038 <process_event+0xf8>
    b064:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    b066:	462e      	mov	r6, r5
    b068:	e7e8      	b.n	b03c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    b06a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b06c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b070:	83a1      	strh	r1, [r4, #28]
    b072:	f38b 8811 	msr	BASEPRI, fp
    b076:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    b07a:	bb03      	cbnz	r3, b0be <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    b07c:	2d00      	cmp	r5, #0
    b07e:	d134      	bne.n	b0ea <process_event+0x1aa>
			if (transit != NULL) {
    b080:	b116      	cbz	r6, b088 <process_event+0x148>
				transit(mgr, transition_complete);
    b082:	4651      	mov	r1, sl
    b084:	4620      	mov	r0, r4
    b086:	47b0      	blx	r6
	__asm__ volatile(
    b088:	f04f 0320 	mov.w	r3, #32
    b08c:	f3ef 8b11 	mrs	fp, BASEPRI
    b090:	f383 8812 	msr	BASEPRI_MAX, r3
    b094:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    b098:	8ba3      	ldrh	r3, [r4, #28]
    b09a:	f023 0308 	bic.w	r3, r3, #8
    b09e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    b0a0:	8ba3      	ldrh	r3, [r4, #28]
    b0a2:	06da      	lsls	r2, r3, #27
    b0a4:	d52a      	bpl.n	b0fc <process_event+0x1bc>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b0a6:	f023 0310 	bic.w	r3, r3, #16
    b0aa:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    b0ac:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    b0ae:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    b0b2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    b0b6:	2900      	cmp	r1, #0
    b0b8:	f47f af5e 	bne.w	af78 <process_event+0x38>
out:
    b0bc:	e751      	b.n	af62 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b0be:	68a1      	ldr	r1, [r4, #8]
    b0c0:	2900      	cmp	r1, #0
    b0c2:	d0db      	beq.n	b07c <process_event+0x13c>
	return node->next;
    b0c4:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    b0c6:	f8d1 b004 	ldr.w	fp, [r1, #4]
    b0ca:	9201      	str	r2, [sp, #4]
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	bf38      	it	cc
    b0d0:	2300      	movcc	r3, #0
    b0d2:	4699      	mov	r9, r3
    b0d4:	4620      	mov	r0, r4
    b0d6:	463b      	mov	r3, r7
    b0d8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b0da:	9a01      	ldr	r2, [sp, #4]
    b0dc:	f1b9 0f00 	cmp.w	r9, #0
    b0e0:	d0cc      	beq.n	b07c <process_event+0x13c>
    b0e2:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b0e6:	4649      	mov	r1, r9
    b0e8:	e7ed      	b.n	b0c6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b0ea:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    b0ec:	463b      	mov	r3, r7
    b0ee:	4620      	mov	r0, r4
    b0f0:	9201      	str	r2, [sp, #4]
    b0f2:	682d      	ldr	r5, [r5, #0]
    b0f4:	f00a f839 	bl	1516a <notify_one>
	while (!sys_slist_is_empty(list)) {
    b0f8:	9a01      	ldr	r2, [sp, #4]
    b0fa:	e7bf      	b.n	b07c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    b0fc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    b100:	bf1e      	ittt	ne
    b102:	f023 0320 	bicne.w	r3, r3, #32
    b106:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    b108:	2102      	movne	r1, #2
    b10a:	e7d0      	b.n	b0ae <process_event+0x16e>
    b10c:	00015197 	.word	0x00015197

0000b110 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    b110:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    b112:	4e09      	ldr	r6, [pc, #36]	; (b138 <extract_decimal+0x28>)
    b114:	6801      	ldr	r1, [r0, #0]
{
    b116:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    b118:	270a      	movs	r7, #10
	size_t val = 0;
    b11a:	2000      	movs	r0, #0
    b11c:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    b11e:	3101      	adds	r1, #1
    b120:	7823      	ldrb	r3, [r4, #0]
    b122:	5d9d      	ldrb	r5, [r3, r6]
    b124:	076d      	lsls	r5, r5, #29
    b126:	d401      	bmi.n	b12c <extract_decimal+0x1c>
	}
	*str = sp;
    b128:	6014      	str	r4, [r2, #0]
	return val;
}
    b12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    b12c:	fb07 3300 	mla	r3, r7, r0, r3
    b130:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    b134:	e7f2      	b.n	b11c <extract_decimal+0xc>
    b136:	bf00      	nop
    b138:	00046dcb 	.word	0x00046dcb

0000b13c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    b13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b140:	4614      	mov	r4, r2
    b142:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    b144:	78d3      	ldrb	r3, [r2, #3]
    b146:	4a24      	ldr	r2, [pc, #144]	; (b1d8 <encode_uint+0x9c>)
    b148:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    b14c:	2b6f      	cmp	r3, #111	; 0x6f
    b14e:	f00a 0203 	and.w	r2, sl, #3
{
    b152:	4606      	mov	r6, r0
    b154:	460f      	mov	r7, r1
    b156:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    b158:	d02d      	beq.n	b1b6 <encode_uint+0x7a>
    b15a:	d828      	bhi.n	b1ae <encode_uint+0x72>
		return 16;
    b15c:	2b58      	cmp	r3, #88	; 0x58
    b15e:	bf14      	ite	ne
    b160:	250a      	movne	r5, #10
    b162:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    b164:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    b168:	46aa      	mov	sl, r5
    b16a:	f04f 0b00 	mov.w	fp, #0
    b16e:	4652      	mov	r2, sl
    b170:	465b      	mov	r3, fp
    b172:	4630      	mov	r0, r6
    b174:	4639      	mov	r1, r7
    b176:	f7f5 fd31 	bl	bdc <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    b17a:	2a09      	cmp	r2, #9
    b17c:	b2d3      	uxtb	r3, r2
    b17e:	d81f      	bhi.n	b1c0 <encode_uint+0x84>
    b180:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    b182:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b184:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    b186:	bf08      	it	eq
    b188:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b18a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    b18e:	d301      	bcc.n	b194 <encode_uint+0x58>
    b190:	45c8      	cmp	r8, r9
    b192:	d812      	bhi.n	b1ba <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    b194:	7823      	ldrb	r3, [r4, #0]
    b196:	069b      	lsls	r3, r3, #26
    b198:	d505      	bpl.n	b1a6 <encode_uint+0x6a>
		if (radix == 8) {
    b19a:	2d08      	cmp	r5, #8
    b19c:	d116      	bne.n	b1cc <encode_uint+0x90>
			conv->altform_0 = true;
    b19e:	78a3      	ldrb	r3, [r4, #2]
    b1a0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    b1a4:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
    b1a6:	4640      	mov	r0, r8
    b1a8:	b003      	add	sp, #12
    b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    b1ae:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    b1b2:	2b70      	cmp	r3, #112	; 0x70
    b1b4:	e7d3      	b.n	b15e <encode_uint+0x22>
	switch (specifier) {
    b1b6:	2508      	movs	r5, #8
    b1b8:	e7d4      	b.n	b164 <encode_uint+0x28>
		value /= radix;
    b1ba:	4606      	mov	r6, r0
    b1bc:	460f      	mov	r7, r1
    b1be:	e7d6      	b.n	b16e <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b1c0:	9a01      	ldr	r2, [sp, #4]
    b1c2:	2a01      	cmp	r2, #1
    b1c4:	bf0c      	ite	eq
    b1c6:	3337      	addeq	r3, #55	; 0x37
    b1c8:	3357      	addne	r3, #87	; 0x57
    b1ca:	e7da      	b.n	b182 <encode_uint+0x46>
		} else if (radix == 16) {
    b1cc:	2d10      	cmp	r5, #16
    b1ce:	d1ea      	bne.n	b1a6 <encode_uint+0x6a>
			conv->altform_0c = true;
    b1d0:	78a3      	ldrb	r3, [r4, #2]
    b1d2:	f043 0310 	orr.w	r3, r3, #16
    b1d6:	e7e5      	b.n	b1a4 <encode_uint+0x68>
    b1d8:	00046dcb 	.word	0x00046dcb

0000b1dc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1e0:	b0a3      	sub	sp, #140	; 0x8c
    b1e2:	4688      	mov	r8, r1
    b1e4:	9006      	str	r0, [sp, #24]
    b1e6:	4691      	mov	r9, r2
    b1e8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b1ea:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b1ec:	f899 0000 	ldrb.w	r0, [r9]
    b1f0:	b910      	cbnz	r0, b1f8 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
    b1f2:	4628      	mov	r0, r5
    b1f4:	f000 bdae 	b.w	bd54 <cbvprintf+0xb78>
		if (*fp != '%') {
    b1f8:	f109 0301 	add.w	r3, r9, #1
    b1fc:	2825      	cmp	r0, #37	; 0x25
    b1fe:	9307      	str	r3, [sp, #28]
    b200:	d007      	beq.n	b212 <cbvprintf+0x36>
			OUTC(*fp++);
    b202:	4641      	mov	r1, r8
			OUTC('%');
    b204:	9b06      	ldr	r3, [sp, #24]
    b206:	4798      	blx	r3
    b208:	2800      	cmp	r0, #0
    b20a:	f2c0 85a3 	blt.w	bd54 <cbvprintf+0xb78>
    b20e:	3501      	adds	r5, #1
		if (bps == NULL) {
    b210:	e224      	b.n	b65c <cbvprintf+0x480>
		} state = {
    b212:	2218      	movs	r2, #24
    b214:	2100      	movs	r1, #0
    b216:	a814      	add	r0, sp, #80	; 0x50
    b218:	f00a ff45 	bl	160a6 <memset>
	if (*sp == '%') {
    b21c:	f899 3001 	ldrb.w	r3, [r9, #1]
    b220:	2b25      	cmp	r3, #37	; 0x25
    b222:	d059      	beq.n	b2d8 <cbvprintf+0xfc>
    b224:	9a07      	ldr	r2, [sp, #28]
    b226:	4616      	mov	r6, r2
		switch (*sp) {
    b228:	f812 3b01 	ldrb.w	r3, [r2], #1
    b22c:	2b2b      	cmp	r3, #43	; 0x2b
    b22e:	f000 808b 	beq.w	b348 <cbvprintf+0x16c>
    b232:	d879      	bhi.n	b328 <cbvprintf+0x14c>
    b234:	2b20      	cmp	r3, #32
    b236:	f000 808c 	beq.w	b352 <cbvprintf+0x176>
    b23a:	2b23      	cmp	r3, #35	; 0x23
    b23c:	f000 808e 	beq.w	b35c <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
    b240:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b244:	f003 0244 	and.w	r2, r3, #68	; 0x44
    b248:	2a44      	cmp	r2, #68	; 0x44
    b24a:	d103      	bne.n	b254 <cbvprintf+0x78>
		conv->flag_zero = false;
    b24c:	f36f 1386 	bfc	r3, #6, #1
    b250:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	conv->width_present = true;
    b254:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b258:	9612      	str	r6, [sp, #72]	; 0x48
    b25a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b25e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	if (*sp == '*') {
    b262:	7833      	ldrb	r3, [r6, #0]
    b264:	2b2a      	cmp	r3, #42	; 0x2a
    b266:	d17e      	bne.n	b366 <cbvprintf+0x18a>
		conv->width_star = true;
    b268:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    b26c:	f043 0301 	orr.w	r3, r3, #1
    b270:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		return ++sp;
    b274:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    b276:	9312      	str	r3, [sp, #72]	; 0x48
	conv->prec_present = (*sp == '.');
    b278:	781a      	ldrb	r2, [r3, #0]
    b27a:	2a2e      	cmp	r2, #46	; 0x2e
    b27c:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    b280:	bf0c      	ite	eq
    b282:	2101      	moveq	r1, #1
    b284:	2100      	movne	r1, #0
    b286:	f361 0241 	bfi	r2, r1, #1, #1
    b28a:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	if (!conv->prec_present) {
    b28e:	d10b      	bne.n	b2a8 <cbvprintf+0xcc>
	++sp;
    b290:	1c5a      	adds	r2, r3, #1
    b292:	9212      	str	r2, [sp, #72]	; 0x48
	if (*sp == '*') {
    b294:	785a      	ldrb	r2, [r3, #1]
    b296:	2a2a      	cmp	r2, #42	; 0x2a
    b298:	d17b      	bne.n	b392 <cbvprintf+0x1b6>
		conv->prec_star = true;
    b29a:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    b29e:	f042 0204 	orr.w	r2, r2, #4
    b2a2:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		return ++sp;
    b2a6:	3302      	adds	r3, #2
	switch (*sp) {
    b2a8:	461a      	mov	r2, r3
    b2aa:	f812 0b01 	ldrb.w	r0, [r2], #1
    b2ae:	286c      	cmp	r0, #108	; 0x6c
    b2b0:	f000 80cf 	beq.w	b452 <cbvprintf+0x276>
    b2b4:	d87d      	bhi.n	b3b2 <cbvprintf+0x1d6>
    b2b6:	2868      	cmp	r0, #104	; 0x68
    b2b8:	f000 8084 	beq.w	b3c4 <cbvprintf+0x1e8>
    b2bc:	286a      	cmp	r0, #106	; 0x6a
    b2be:	f000 80d2 	beq.w	b466 <cbvprintf+0x28a>
    b2c2:	284c      	cmp	r0, #76	; 0x4c
    b2c4:	f000 80d6 	beq.w	b474 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
    b2c8:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    b2cc:	f36f 02c6 	bfc	r2, #3, #4
    b2d0:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		break;
    b2d4:	461a      	mov	r2, r3
    b2d6:	e080      	b.n	b3da <cbvprintf+0x1fe>
		conv->specifier = *sp++;
    b2d8:	f109 0202 	add.w	r2, r9, #2
    b2dc:	9207      	str	r2, [sp, #28]
    b2de:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		if (conv->width_star) {
    b2e2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    b2e6:	07de      	lsls	r6, r3, #31
    b2e8:	f140 816d 	bpl.w	b5c6 <cbvprintf+0x3ea>
			width = va_arg(ap, int);
    b2ec:	f854 ab04 	ldr.w	sl, [r4], #4
			if (width < 0) {
    b2f0:	f1ba 0f00 	cmp.w	sl, #0
    b2f4:	da07      	bge.n	b306 <cbvprintf+0x12a>
				conv->flag_dash = true;
    b2f6:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    b2fa:	f042 0204 	orr.w	r2, r2, #4
    b2fe:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
				width = -width;
    b302:	f1ca 0a00 	rsb	sl, sl, #0
		if (conv->prec_star) {
    b306:	0758      	lsls	r0, r3, #29
    b308:	f140 8166 	bpl.w	b5d8 <cbvprintf+0x3fc>
			int arg = va_arg(ap, int);
    b30c:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    b310:	2f00      	cmp	r7, #0
    b312:	f280 8165 	bge.w	b5e0 <cbvprintf+0x404>
				conv->prec_present = false;
    b316:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    b31a:	f36f 0341 	bfc	r3, #1, #1
    b31e:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
    b322:	f04f 37ff 	mov.w	r7, #4294967295
    b326:	e15b      	b.n	b5e0 <cbvprintf+0x404>
		switch (*sp) {
    b328:	2b2d      	cmp	r3, #45	; 0x2d
    b32a:	d006      	beq.n	b33a <cbvprintf+0x15e>
    b32c:	2b30      	cmp	r3, #48	; 0x30
    b32e:	d187      	bne.n	b240 <cbvprintf+0x64>
			conv->flag_zero = true;
    b330:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b338:	e003      	b.n	b342 <cbvprintf+0x166>
			conv->flag_dash = true;
    b33a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b33e:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    b342:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
			break;
    b346:	e76e      	b.n	b226 <cbvprintf+0x4a>
			conv->flag_plus = true;
    b348:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b34c:	f043 0308 	orr.w	r3, r3, #8
    b350:	e7f7      	b.n	b342 <cbvprintf+0x166>
			conv->flag_space = true;
    b352:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b356:	f043 0310 	orr.w	r3, r3, #16
    b35a:	e7f2      	b.n	b342 <cbvprintf+0x166>
			conv->flag_hash = true;
    b35c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b360:	f043 0320 	orr.w	r3, r3, #32
    b364:	e7ed      	b.n	b342 <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
    b366:	a812      	add	r0, sp, #72	; 0x48
    b368:	f7ff fed2 	bl	b110 <extract_decimal>
	if (sp != wp) {
    b36c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b36e:	42b3      	cmp	r3, r6
    b370:	d081      	beq.n	b276 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
    b372:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
		conv->width_value = width;
    b376:	9017      	str	r0, [sp, #92]	; 0x5c
		conv->unsupported |= ((conv->width_value < 0)
    b378:	f3c6 0140 	ubfx	r1, r6, #1, #1
    b37c:	ea41 70d0 	orr.w	r0, r1, r0, lsr #31
    b380:	0042      	lsls	r2, r0, #1
    b382:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b386:	f006 067d 	and.w	r6, r6, #125	; 0x7d
    b38a:	4332      	orrs	r2, r6
    b38c:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    b390:	e771      	b.n	b276 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
    b392:	a812      	add	r0, sp, #72	; 0x48
    b394:	f7ff febc 	bl	b110 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    b398:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	conv->prec_value = prec;
    b39c:	9018      	str	r0, [sp, #96]	; 0x60
	conv->unsupported |= ((conv->prec_value < 0)
    b39e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    b3a2:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    b3a6:	f360 0341 	bfi	r3, r0, #1, #1
    b3aa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	return sp;
    b3ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b3b0:	e77a      	b.n	b2a8 <cbvprintf+0xcc>
	switch (*sp) {
    b3b2:	2874      	cmp	r0, #116	; 0x74
    b3b4:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    b3b8:	d059      	beq.n	b46e <cbvprintf+0x292>
    b3ba:	287a      	cmp	r0, #122	; 0x7a
    b3bc:	d184      	bne.n	b2c8 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
    b3be:	460b      	mov	r3, r1
    b3c0:	2106      	movs	r1, #6
    b3c2:	e041      	b.n	b448 <cbvprintf+0x26c>
		if (*++sp == 'h') {
    b3c4:	7859      	ldrb	r1, [r3, #1]
    b3c6:	2968      	cmp	r1, #104	; 0x68
    b3c8:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    b3cc:	d13a      	bne.n	b444 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
    b3ce:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
    b3d0:	f362 01c6 	bfi	r1, r2, #3, #4
    b3d4:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
			++sp;
    b3d8:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
    b3da:	4613      	mov	r3, r2
    b3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
    b3e0:	9307      	str	r3, [sp, #28]
	switch (conv->specifier) {
    b3e2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    b3e4:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
	switch (conv->specifier) {
    b3e8:	f200 80c5 	bhi.w	b576 <cbvprintf+0x39a>
    b3ec:	2a57      	cmp	r2, #87	; 0x57
    b3ee:	d84e      	bhi.n	b48e <cbvprintf+0x2b2>
    b3f0:	2a41      	cmp	r2, #65	; 0x41
    b3f2:	d004      	beq.n	b3fe <cbvprintf+0x222>
    b3f4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    b3f8:	2b02      	cmp	r3, #2
    b3fa:	f200 80bc 	bhi.w	b576 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    b3fe:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
    b402:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    b406:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    b408:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    b40c:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    b410:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
    b414:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		conv->specifier_cat = SPECIFIER_FP;
    b418:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
    b41c:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
    b420:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    b424:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    b426:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
		if (conv->specifier_a
    b42a:	b2cb      	uxtb	r3, r1
    b42c:	f100 80c9 	bmi.w	b5c2 <cbvprintf+0x3e6>
		if (conv->length_mod == LENGTH_L) {
    b430:	f003 0278 	and.w	r2, r3, #120	; 0x78
    b434:	2a18      	cmp	r2, #24
    b436:	f040 809b 	bne.w	b570 <cbvprintf+0x394>
			conv->length_mod = LENGTH_NONE;
    b43a:	f36f 03c6 	bfc	r3, #3, #4
    b43e:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    b442:	e082      	b.n	b54a <cbvprintf+0x36e>
			conv->length_mod = LENGTH_H;
    b444:	460b      	mov	r3, r1
    b446:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
    b448:	f361 03c6 	bfi	r3, r1, #3, #4
    b44c:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    b450:	e7c3      	b.n	b3da <cbvprintf+0x1fe>
		if (*++sp == 'l') {
    b452:	7859      	ldrb	r1, [r3, #1]
    b454:	296c      	cmp	r1, #108	; 0x6c
    b456:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
    b45a:	d101      	bne.n	b460 <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
    b45c:	2204      	movs	r2, #4
    b45e:	e7b7      	b.n	b3d0 <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
    b460:	460b      	mov	r3, r1
    b462:	2103      	movs	r1, #3
    b464:	e7f0      	b.n	b448 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
    b466:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    b46a:	2105      	movs	r1, #5
    b46c:	e7ec      	b.n	b448 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
    b46e:	460b      	mov	r3, r1
    b470:	2107      	movs	r1, #7
    b472:	e7e9      	b.n	b448 <cbvprintf+0x26c>
		conv->unsupported = true;
    b474:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    b478:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    b47c:	f023 0302 	bic.w	r3, r3, #2
    b480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    b484:	f043 0302 	orr.w	r3, r3, #2
    b488:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
		break;
    b48c:	e7a5      	b.n	b3da <cbvprintf+0x1fe>
    b48e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    b492:	2b20      	cmp	r3, #32
    b494:	d86f      	bhi.n	b576 <cbvprintf+0x39a>
    b496:	a101      	add	r1, pc, #4	; (adr r1, b49c <cbvprintf+0x2c0>)
    b498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    b49c:	0000b54f 	.word	0x0000b54f
    b4a0:	0000b577 	.word	0x0000b577
    b4a4:	0000b577 	.word	0x0000b577
    b4a8:	0000b577 	.word	0x0000b577
    b4ac:	0000b577 	.word	0x0000b577
    b4b0:	0000b577 	.word	0x0000b577
    b4b4:	0000b577 	.word	0x0000b577
    b4b8:	0000b577 	.word	0x0000b577
    b4bc:	0000b577 	.word	0x0000b577
    b4c0:	0000b3ff 	.word	0x0000b3ff
    b4c4:	0000b577 	.word	0x0000b577
    b4c8:	0000b54f 	.word	0x0000b54f
    b4cc:	0000b521 	.word	0x0000b521
    b4d0:	0000b3ff 	.word	0x0000b3ff
    b4d4:	0000b3ff 	.word	0x0000b3ff
    b4d8:	0000b3ff 	.word	0x0000b3ff
    b4dc:	0000b577 	.word	0x0000b577
    b4e0:	0000b521 	.word	0x0000b521
    b4e4:	0000b577 	.word	0x0000b577
    b4e8:	0000b577 	.word	0x0000b577
    b4ec:	0000b577 	.word	0x0000b577
    b4f0:	0000b577 	.word	0x0000b577
    b4f4:	0000b585 	.word	0x0000b585
    b4f8:	0000b54f 	.word	0x0000b54f
    b4fc:	0000b5a5 	.word	0x0000b5a5
    b500:	0000b577 	.word	0x0000b577
    b504:	0000b577 	.word	0x0000b577
    b508:	0000b5a5 	.word	0x0000b5a5
    b50c:	0000b577 	.word	0x0000b577
    b510:	0000b54f 	.word	0x0000b54f
    b514:	0000b577 	.word	0x0000b577
    b518:	0000b577 	.word	0x0000b577
    b51c:	0000b54f 	.word	0x0000b54f
		conv->specifier_cat = SPECIFIER_SINT;
    b520:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    b524:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    b526:	f361 0302 	bfi	r3, r1, #0, #3
    b52a:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
    b52e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    b532:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b536:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    b538:	bf02      	ittt	eq
    b53a:	f89d 1058 	ldrbeq.w	r1, [sp, #88]	; 0x58
    b53e:	f041 0101 	orreq.w	r1, r1, #1
    b542:	f88d 1058 	strbeq.w	r1, [sp, #88]	; 0x58
		if (conv->specifier == 'c') {
    b546:	2a63      	cmp	r2, #99	; 0x63
    b548:	d005      	beq.n	b556 <cbvprintf+0x37a>
	bool unsupported = false;
    b54a:	2300      	movs	r3, #0
    b54c:	e006      	b.n	b55c <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_UINT;
    b54e:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    b552:	2102      	movs	r1, #2
    b554:	e7e7      	b.n	b526 <cbvprintf+0x34a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b556:	3b00      	subs	r3, #0
    b558:	bf18      	it	ne
    b55a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    b55c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    b560:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b564:	430b      	orrs	r3, r1
    b566:	f363 0241 	bfi	r2, r3, #1, #1
    b56a:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	return sp;
    b56e:	e6b8      	b.n	b2e2 <cbvprintf+0x106>
		} else if ((conv->length_mod != LENGTH_NONE)
    b570:	f013 0f38 	tst.w	r3, #56	; 0x38
    b574:	d0e9      	beq.n	b54a <cbvprintf+0x36e>
			conv->invalid = true;
    b576:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b57a:	f043 0301 	orr.w	r3, r3, #1
    b57e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    b582:	e7e2      	b.n	b54a <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
    b584:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    b588:	2203      	movs	r2, #3
    b58a:	f362 0302 	bfi	r3, r2, #0, #3
    b58e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
    b592:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    b596:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b59a:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
    b59e:	427b      	negs	r3, r7
    b5a0:	417b      	adcs	r3, r7
    b5a2:	e7db      	b.n	b55c <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_PTR;
    b5a4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    b5a8:	2203      	movs	r2, #3
    b5aa:	f362 0302 	bfi	r3, r2, #0, #3
    b5ae:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod != LENGTH_NONE) {
    b5b2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    b5b6:	f013 0f78 	tst.w	r3, #120	; 0x78
    b5ba:	bf14      	ite	ne
    b5bc:	2301      	movne	r3, #1
    b5be:	2300      	moveq	r3, #0
    b5c0:	e7cc      	b.n	b55c <cbvprintf+0x380>
			unsupported = true;
    b5c2:	2301      	movs	r3, #1
    b5c4:	e7ca      	b.n	b55c <cbvprintf+0x380>
		} else if (conv->width_present) {
    b5c6:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
    b5ca:	2a00      	cmp	r2, #0
			width = conv->width_value;
    b5cc:	bfb4      	ite	lt
    b5ce:	f8dd a05c 	ldrlt.w	sl, [sp, #92]	; 0x5c
		int width = -1;
    b5d2:	f04f 3aff 	movge.w	sl, #4294967295
    b5d6:	e696      	b.n	b306 <cbvprintf+0x12a>
		} else if (conv->prec_present) {
    b5d8:	0799      	lsls	r1, r3, #30
    b5da:	f57f aea2 	bpl.w	b322 <cbvprintf+0x146>
			precision = conv->prec_value;
    b5de:	9f18      	ldr	r7, [sp, #96]	; 0x60
		conv->pad0_value = 0;
    b5e0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b5e2:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv->specifier_cat == SPECIFIER_FP)
    b5e6:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    b5ea:	f003 0307 	and.w	r3, r3, #7
    b5ee:	2b04      	cmp	r3, #4
    b5f0:	d109      	bne.n	b606 <cbvprintf+0x42a>
		    && !conv->prec_present) {
    b5f2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    b5f6:	079a      	lsls	r2, r3, #30
    b5f8:	d405      	bmi.n	b606 <cbvprintf+0x42a>
			if (conv->specifier_a) {
    b5fa:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
    b5fe:	2b00      	cmp	r3, #0
    b600:	bfb4      	ite	lt
    b602:	270d      	movlt	r7, #13
    b604:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
    b606:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			= (enum length_mod_enum)conv->length_mod;
    b60a:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		enum specifier_cat_enum specifier_cat
    b60e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b612:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b614:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b618:	d136      	bne.n	b688 <cbvprintf+0x4ac>
			switch (length_mod) {
    b61a:	1ecb      	subs	r3, r1, #3
    b61c:	2b04      	cmp	r3, #4
    b61e:	d820      	bhi.n	b662 <cbvprintf+0x486>
    b620:	e8df f003 	tbb	[pc, r3]
    b624:	1f070703 	.word	0x1f070703
    b628:	1f          	.byte	0x1f
    b629:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    b62a:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    b62e:	17d3      	asrs	r3, r2, #31
    b630:	e004      	b.n	b63c <cbvprintf+0x460>
					(sint_value_type)va_arg(ap, intmax_t);
    b632:	3407      	adds	r4, #7
    b634:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    b638:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    b63c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (conv->invalid || conv->unsupported) {
    b640:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
    b644:	07b3      	lsls	r3, r6, #30
    b646:	d055      	beq.n	b6f4 <cbvprintf+0x518>
			OUTS(sp, fp);
    b648:	9b07      	ldr	r3, [sp, #28]
    b64a:	9806      	ldr	r0, [sp, #24]
    b64c:	464a      	mov	r2, r9
    b64e:	4641      	mov	r1, r8
    b650:	f009 febe 	bl	153d0 <outs>
    b654:	2800      	cmp	r0, #0
    b656:	f2c0 837d 	blt.w	bd54 <cbvprintf+0xb78>
    b65a:	4405      	add	r5, r0
			while (pad_len-- > 0) {
    b65c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    b660:	e5c4      	b.n	b1ec <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b662:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    b666:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b668:	ea4f 73e2 	mov.w	r3, r2, asr #31
    b66c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
    b670:	d105      	bne.n	b67e <cbvprintf+0x4a2>
				value->uint = (unsigned char)value->uint;
    b672:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
				value->uint = (unsigned short)value->uint;
    b676:	9314      	str	r3, [sp, #80]	; 0x50
    b678:	2300      	movs	r3, #0
    b67a:	9315      	str	r3, [sp, #84]	; 0x54
    b67c:	e7e0      	b.n	b640 <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
    b67e:	2902      	cmp	r1, #2
    b680:	d1de      	bne.n	b640 <cbvprintf+0x464>
				value->sint = (short)value->sint;
    b682:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
    b686:	e7d2      	b.n	b62e <cbvprintf+0x452>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b688:	2b02      	cmp	r3, #2
    b68a:	d123      	bne.n	b6d4 <cbvprintf+0x4f8>
			switch (length_mod) {
    b68c:	1ecb      	subs	r3, r1, #3
    b68e:	2b04      	cmp	r3, #4
    b690:	d813      	bhi.n	b6ba <cbvprintf+0x4de>
    b692:	e8df f003 	tbb	[pc, r3]
    b696:	0a03      	.short	0x0a03
    b698:	120a      	.short	0x120a
    b69a:	12          	.byte	0x12
    b69b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    b69c:	6822      	ldr	r2, [r4, #0]
    b69e:	9214      	str	r2, [sp, #80]	; 0x50
    b6a0:	2300      	movs	r3, #0
    b6a2:	1d20      	adds	r0, r4, #4
    b6a4:	9315      	str	r3, [sp, #84]	; 0x54
					(uint_value_type)va_arg(ap, size_t);
    b6a6:	4604      	mov	r4, r0
    b6a8:	e7ca      	b.n	b640 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
    b6aa:	3407      	adds	r4, #7
    b6ac:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    b6b0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    b6b4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				break;
    b6b8:	e7f5      	b.n	b6a6 <cbvprintf+0x4ca>
					(uint_value_type)va_arg(ap, size_t);
    b6ba:	f854 3b04 	ldr.w	r3, [r4], #4
    b6be:	9314      	str	r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
    b6c0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    b6c2:	f04f 0300 	mov.w	r3, #0
    b6c6:	9315      	str	r3, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
    b6c8:	d0d3      	beq.n	b672 <cbvprintf+0x496>
			} else if (length_mod == LENGTH_H) {
    b6ca:	2902      	cmp	r1, #2
    b6cc:	d1b8      	bne.n	b640 <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
    b6ce:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    b6d2:	e7d0      	b.n	b676 <cbvprintf+0x49a>
		} else if (specifier_cat == SPECIFIER_FP) {
    b6d4:	2b04      	cmp	r3, #4
    b6d6:	d107      	bne.n	b6e8 <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
    b6d8:	3407      	adds	r4, #7
    b6da:	f024 0407 	bic.w	r4, r4, #7
    b6de:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    b6e2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    b6e6:	e7ab      	b.n	b640 <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b6e8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    b6ea:	bf04      	itt	eq
    b6ec:	f854 3b04 	ldreq.w	r3, [r4], #4
    b6f0:	9314      	streq	r3, [sp, #80]	; 0x50
    b6f2:	e7a5      	b.n	b640 <cbvprintf+0x464>
		switch (conv->specifier) {
    b6f4:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
    b6f8:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    b6fc:	d8ae      	bhi.n	b65c <cbvprintf+0x480>
    b6fe:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
    b702:	f200 80a6 	bhi.w	b852 <cbvprintf+0x676>
    b706:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    b70a:	f000 80ed 	beq.w	b8e8 <cbvprintf+0x70c>
    b70e:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
    b712:	d9a3      	bls.n	b65c <cbvprintf+0x480>
    b714:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    b718:	d003      	beq.n	b722 <cbvprintf+0x546>
    b71a:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
    b71e:	2b02      	cmp	r3, #2
    b720:	d89c      	bhi.n	b65c <cbvprintf+0x480>
	} u = {
    b722:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	if ((u.u64 & SIGN_MASK) != 0U) {
    b726:	2a00      	cmp	r2, #0
    b728:	f173 0100 	sbcs.w	r1, r3, #0
    b72c:	f2c0 8186 	blt.w	ba3c <cbvprintf+0x860>
	} else if (conv->flag_plus) {
    b730:	0731      	lsls	r1, r6, #28
    b732:	f100 8185 	bmi.w	ba40 <cbvprintf+0x864>
		*sign = ' ';
    b736:	f016 0610 	ands.w	r6, r6, #16
    b73a:	bf18      	it	ne
    b73c:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    b73e:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    b742:	f3c3 0313 	ubfx	r3, r3, #0, #20
    b746:	9204      	str	r2, [sp, #16]
    b748:	9305      	str	r3, [sp, #20]
    b74a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b74e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	bool is_subnormal = (expo == 0) && (fract != 0);
    b752:	f1bb 0f00 	cmp.w	fp, #0
    b756:	f040 8175 	bne.w	ba44 <cbvprintf+0x868>
    b75a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    b75e:	4313      	orrs	r3, r2
    b760:	bf14      	ite	ne
    b762:	f04f 0c01 	movne.w	ip, #1
    b766:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
    b76a:	9905      	ldr	r1, [sp, #20]
    b76c:	02cb      	lsls	r3, r1, #11
    b76e:	9904      	ldr	r1, [sp, #16]
    b770:	02ca      	lsls	r2, r1, #11
    b772:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
    b776:	4658      	mov	r0, fp
    b778:	ea4b 0102 	orr.w	r1, fp, r2
    b77c:	910a      	str	r1, [sp, #40]	; 0x28
    b77e:	17c1      	asrs	r1, r0, #31
    b780:	4319      	orrs	r1, r3
    b782:	910b      	str	r1, [sp, #44]	; 0x2c
    b784:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
		c = 'f';
    b788:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
    b78c:	bf08      	it	eq
    b78e:	f04f 0966 	moveq.w	r9, #102	; 0x66
	if ((expo | fract) != 0) {
    b792:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    b794:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((expo | fract) != 0) {
    b798:	f000 81c8 	beq.w	bb2c <cbvprintf+0x950>
		if (is_subnormal) {
    b79c:	f1bc 0f00 	cmp.w	ip, #0
    b7a0:	f040 8188 	bne.w	bab4 <cbvprintf+0x8d8>
		fract |= BIT_63;
    b7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b7a6:	9302      	str	r3, [sp, #8]
    b7a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b7aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b7ae:	9303      	str	r3, [sp, #12]
    b7b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b7b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    b7b8:	2300      	movs	r3, #0
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    b7ba:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
    b7be:	461a      	mov	r2, r3
		fract *= 5U;
    b7c0:	2105      	movs	r1, #5
	while (expo < -2) {
    b7c2:	f11b 0f02 	cmn.w	fp, #2
    b7c6:	f2c0 817e 	blt.w	bac6 <cbvprintf+0x8ea>
    b7ca:	b11b      	cbz	r3, b7d4 <cbvprintf+0x5f8>
    b7cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b7d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	while (expo > 0) {
    b7d4:	f1bb 0f00 	cmp.w	fp, #0
    b7d8:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
    b7dc:	f300 818e 	bgt.w	bafc <cbvprintf+0x920>
	fract >>= (4 - expo);
    b7e0:	9911      	ldr	r1, [sp, #68]	; 0x44
    b7e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b7e4:	f1cb 0004 	rsb	r0, fp, #4
    b7e8:	f10b 0b1c 	add.w	fp, fp, #28
    b7ec:	fa01 fb0b 	lsl.w	fp, r1, fp
    b7f0:	f1a0 0c20 	sub.w	ip, r0, #32
    b7f4:	40c3      	lsrs	r3, r0
    b7f6:	fa21 fc0c 	lsr.w	ip, r1, ip
    b7fa:	ea43 030b 	orr.w	r3, r3, fp
    b7fe:	ea43 030c 	orr.w	r3, r3, ip
    b802:	40c1      	lsrs	r1, r0
    b804:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	if ((c == 'g') || (c == 'G')) {
    b808:	f009 03df 	and.w	r3, r9, #223	; 0xdf
    b80c:	2b47      	cmp	r3, #71	; 0x47
    b80e:	f040 8194 	bne.w	bb3a <cbvprintf+0x95e>
		if (decexp < (-4 + 1) || decexp > precision) {
    b812:	1cd0      	adds	r0, r2, #3
    b814:	db02      	blt.n	b81c <cbvprintf+0x640>
    b816:	4297      	cmp	r7, r2
    b818:	f280 818b 	bge.w	bb32 <cbvprintf+0x956>
			c += 'e' - 'g';  /* e or E */
    b81c:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
    b820:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    b822:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
    b826:	dd00      	ble.n	b82a <cbvprintf+0x64e>
				precision--;
    b828:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    b82a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    b82e:	0699      	lsls	r1, r3, #26
    b830:	f100 8183 	bmi.w	bb3a <cbvprintf+0x95e>
    b834:	2f00      	cmp	r7, #0
    b836:	bfd4      	ite	le
    b838:	2300      	movle	r3, #0
    b83a:	2301      	movgt	r3, #1
	if (c == 'f') {
    b83c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
    b840:	930c      	str	r3, [sp, #48]	; 0x30
	if (c == 'f') {
    b842:	f040 817c 	bne.w	bb3e <cbvprintf+0x962>
		if (decimals < 0) {
    b846:	19d3      	adds	r3, r2, r7
    b848:	f140 817a 	bpl.w	bb40 <cbvprintf+0x964>
			decimals = 0;
    b84c:	f04f 0b00 	mov.w	fp, #0
    b850:	e17a      	b.n	bb48 <cbvprintf+0x96c>
    b852:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
    b856:	2b20      	cmp	r3, #32
    b858:	f63f af00 	bhi.w	b65c <cbvprintf+0x480>
    b85c:	a201      	add	r2, pc, #4	; (adr r2, b864 <cbvprintf+0x688>)
    b85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b862:	bf00      	nop
    b864:	0000b9dd 	.word	0x0000b9dd
    b868:	0000b65d 	.word	0x0000b65d
    b86c:	0000b65d 	.word	0x0000b65d
    b870:	0000b65d 	.word	0x0000b65d
    b874:	0000b65d 	.word	0x0000b65d
    b878:	0000b65d 	.word	0x0000b65d
    b87c:	0000b65d 	.word	0x0000b65d
    b880:	0000b65d 	.word	0x0000b65d
    b884:	0000b65d 	.word	0x0000b65d
    b888:	0000b723 	.word	0x0000b723
    b88c:	0000b65d 	.word	0x0000b65d
    b890:	0000b915 	.word	0x0000b915
    b894:	0000b97d 	.word	0x0000b97d
    b898:	0000b723 	.word	0x0000b723
    b89c:	0000b723 	.word	0x0000b723
    b8a0:	0000b723 	.word	0x0000b723
    b8a4:	0000b65d 	.word	0x0000b65d
    b8a8:	0000b97d 	.word	0x0000b97d
    b8ac:	0000b65d 	.word	0x0000b65d
    b8b0:	0000b65d 	.word	0x0000b65d
    b8b4:	0000b65d 	.word	0x0000b65d
    b8b8:	0000b65d 	.word	0x0000b65d
    b8bc:	0000ba13 	.word	0x0000ba13
    b8c0:	0000b9dd 	.word	0x0000b9dd
    b8c4:	0000b9e1 	.word	0x0000b9e1
    b8c8:	0000b65d 	.word	0x0000b65d
    b8cc:	0000b65d 	.word	0x0000b65d
    b8d0:	0000b8ef 	.word	0x0000b8ef
    b8d4:	0000b65d 	.word	0x0000b65d
    b8d8:	0000b9dd 	.word	0x0000b9dd
    b8dc:	0000b65d 	.word	0x0000b65d
    b8e0:	0000b65d 	.word	0x0000b65d
    b8e4:	0000b9dd 	.word	0x0000b9dd
			OUTC('%');
    b8e8:	4641      	mov	r1, r8
    b8ea:	4648      	mov	r0, r9
    b8ec:	e48a      	b.n	b204 <cbvprintf+0x28>
			if (precision >= 0) {
    b8ee:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    b8f0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
			if (precision >= 0) {
    b8f4:	db0a      	blt.n	b90c <cbvprintf+0x730>
				len = strnlen(bps, precision);
    b8f6:	4639      	mov	r1, r7
    b8f8:	4648      	mov	r0, r9
    b8fa:	f00a fd53 	bl	163a4 <strnlen>
			bpe = bps + len;
    b8fe:	eb09 0b00 	add.w	fp, r9, r0
		char sign = 0;
    b902:	2600      	movs	r6, #0
		if (bps == NULL) {
    b904:	f1b9 0f00 	cmp.w	r9, #0
    b908:	d10c      	bne.n	b924 <cbvprintf+0x748>
    b90a:	e6a7      	b.n	b65c <cbvprintf+0x480>
				len = strlen(bps);
    b90c:	4648      	mov	r0, r9
    b90e:	f7f5 fb57 	bl	fc0 <strlen>
    b912:	e7f4      	b.n	b8fe <cbvprintf+0x722>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b914:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b916:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		char sign = 0;
    b91a:	2600      	movs	r6, #0
			bpe = buf + 1;
    b91c:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
				bps = encode_float(value->dbl, conv, precision,
    b920:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
		size_t nj_len = (bpe - bps);
    b924:	ebab 0209 	sub.w	r2, fp, r9
		if (sign != 0) {
    b928:	b106      	cbz	r6, b92c <cbvprintf+0x750>
			nj_len += 1U;
    b92a:	3201      	adds	r2, #1
		if (conv->altform_0c) {
    b92c:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
    b930:	06c3      	lsls	r3, r0, #27
    b932:	f140 81fe 	bpl.w	bd32 <cbvprintf+0xb56>
			nj_len += 2U;
    b936:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
    b938:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if (conv->pad_fp) {
    b93a:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    b93c:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
    b93e:	bf44      	itt	mi
    b940:	9918      	ldrmi	r1, [sp, #96]	; 0x60
    b942:	1852      	addmi	r2, r2, r1
		if (width > 0) {
    b944:	f1ba 0f00 	cmp.w	sl, #0
    b948:	f340 8211 	ble.w	bd6e <cbvprintf+0xb92>
			width -= (int)nj_len;
    b94c:	ebaa 0a02 	sub.w	sl, sl, r2
			if (!conv->flag_dash) {
    b950:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    b954:	0751      	lsls	r1, r2, #29
    b956:	f3c2 0780 	ubfx	r7, r2, #2, #1
    b95a:	f100 8208 	bmi.w	bd6e <cbvprintf+0xb92>
				if (conv->flag_zero) {
    b95e:	0653      	lsls	r3, r2, #25
    b960:	f140 81fb 	bpl.w	bd5a <cbvprintf+0xb7e>
					if (sign != 0) {
    b964:	b146      	cbz	r6, b978 <cbvprintf+0x79c>
						OUTC(sign);
    b966:	9b06      	ldr	r3, [sp, #24]
    b968:	4641      	mov	r1, r8
    b96a:	4630      	mov	r0, r6
    b96c:	4798      	blx	r3
    b96e:	2800      	cmp	r0, #0
    b970:	f2c0 81f0 	blt.w	bd54 <cbvprintf+0xb78>
    b974:	3501      	adds	r5, #1
						sign = 0;
    b976:	463e      	mov	r6, r7
					pad = '0';
    b978:	2730      	movs	r7, #48	; 0x30
    b97a:	e1ef      	b.n	bd5c <cbvprintf+0xb80>
			if (conv->flag_plus) {
    b97c:	0730      	lsls	r0, r6, #28
    b97e:	d42b      	bmi.n	b9d8 <cbvprintf+0x7fc>
				sign = ' ';
    b980:	f016 0610 	ands.w	r6, r6, #16
    b984:	bf18      	it	ne
    b986:	2620      	movne	r6, #32
			sint = value->sint;
    b988:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
			if (sint < 0) {
    b98c:	2a00      	cmp	r2, #0
    b98e:	f173 0100 	sbcs.w	r1, r3, #0
    b992:	da05      	bge.n	b9a0 <cbvprintf+0x7c4>
				value->uint = (uint_value_type)-sint;
    b994:	4252      	negs	r2, r2
    b996:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b99a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				sign = '-';
    b99e:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    b9a0:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    b9a4:	9300      	str	r3, [sp, #0]
    b9a6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    b9aa:	ab1b      	add	r3, sp, #108	; 0x6c
    b9ac:	aa16      	add	r2, sp, #88	; 0x58
    b9ae:	f7ff fbc5 	bl	b13c <encode_uint>
    b9b2:	4681      	mov	r9, r0
			if (precision >= 0) {
    b9b4:	2f00      	cmp	r7, #0
    b9b6:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    b9ba:	db0b      	blt.n	b9d4 <cbvprintf+0x7f8>
				conv->flag_zero = false;
    b9bc:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
    b9c0:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    b9c4:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    b9c8:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    b9ca:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
    b9ce:	d901      	bls.n	b9d4 <cbvprintf+0x7f8>
					conv->pad0_value = precision - (int)len;
    b9d0:	1abf      	subs	r7, r7, r2
    b9d2:	9717      	str	r7, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
    b9d4:	469b      	mov	fp, r3
    b9d6:	e795      	b.n	b904 <cbvprintf+0x728>
				sign = '+';
    b9d8:	262b      	movs	r6, #43	; 0x2b
    b9da:	e7d5      	b.n	b988 <cbvprintf+0x7ac>
		switch (conv->specifier) {
    b9dc:	2600      	movs	r6, #0
    b9de:	e7df      	b.n	b9a0 <cbvprintf+0x7c4>
			if (value->ptr != NULL) {
    b9e0:	9814      	ldr	r0, [sp, #80]	; 0x50
    b9e2:	2800      	cmp	r0, #0
    b9e4:	f000 819f 	beq.w	bd26 <cbvprintf+0xb4a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b9e8:	f10d 0385 	add.w	r3, sp, #133	; 0x85
    b9ec:	9300      	str	r3, [sp, #0]
    b9ee:	aa16      	add	r2, sp, #88	; 0x58
    b9f0:	ab1b      	add	r3, sp, #108	; 0x6c
    b9f2:	2100      	movs	r1, #0
    b9f4:	f7ff fba2 	bl	b13c <encode_uint>
				conv->altform_0c = true;
    b9f8:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    b9fc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ba00:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ba04:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ba08:	4681      	mov	r9, r0
				conv->altform_0c = true;
    ba0a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
		char sign = 0;
    ba0e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    ba10:	e7d0      	b.n	b9b4 <cbvprintf+0x7d8>
				store_count(conv, value->ptr, count);
    ba12:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
    ba14:	2907      	cmp	r1, #7
    ba16:	f63f ae21 	bhi.w	b65c <cbvprintf+0x480>
    ba1a:	e8df f001 	tbb	[pc, r1]
    ba1e:	040d      	.short	0x040d
    ba20:	08080d06 	.word	0x08080d06
    ba24:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    ba26:	701d      	strb	r5, [r3, #0]
		break;
    ba28:	e618      	b.n	b65c <cbvprintf+0x480>
		*(short *)dp = (short)count;
    ba2a:	801d      	strh	r5, [r3, #0]
		break;
    ba2c:	e616      	b.n	b65c <cbvprintf+0x480>
		*(intmax_t *)dp = (intmax_t)count;
    ba2e:	4628      	mov	r0, r5
    ba30:	17e9      	asrs	r1, r5, #31
    ba32:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    ba36:	e611      	b.n	b65c <cbvprintf+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ba38:	601d      	str	r5, [r3, #0]
		break;
    ba3a:	e60f      	b.n	b65c <cbvprintf+0x480>
		*sign = '-';
    ba3c:	262d      	movs	r6, #45	; 0x2d
    ba3e:	e67e      	b.n	b73e <cbvprintf+0x562>
		*sign = '+';
    ba40:	262b      	movs	r6, #43	; 0x2b
    ba42:	e67c      	b.n	b73e <cbvprintf+0x562>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    ba44:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ba48:	459b      	cmp	fp, r3
    ba4a:	d12e      	bne.n	baaa <cbvprintf+0x8ce>
		if (fract == 0) {
    ba4c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ba50:	4bba      	ldr	r3, [pc, #744]	; (bd3c <cbvprintf+0xb60>)
    ba52:	f819 3003 	ldrb.w	r3, [r9, r3]
    ba56:	430a      	orrs	r2, r1
    ba58:	f003 0303 	and.w	r3, r3, #3
    ba5c:	d117      	bne.n	ba8e <cbvprintf+0x8b2>
			if (isupper((int)c)) {
    ba5e:	2b01      	cmp	r3, #1
				*buf++ = 'I';
    ba60:	bf0b      	itete	eq
    ba62:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
    ba66:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
    ba6a:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'i';
    ba6e:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'F';
    ba72:	bf0c      	ite	eq
    ba74:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
    ba76:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
    ba78:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		conv->flag_zero = false;
    ba7c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    ba80:	f36f 1386 	bfc	r3, #6, #1
    ba84:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
    ba88:	f10d 0b6f 	add.w	fp, sp, #111	; 0x6f
		return bps;
    ba8c:	e748      	b.n	b920 <cbvprintf+0x744>
			if (isupper((int)c)) {
    ba8e:	2b01      	cmp	r3, #1
				*buf++ = 'N';
    ba90:	bf0b      	itete	eq
    ba92:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
    ba96:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
    ba9a:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'n';
    ba9e:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'N';
    baa2:	bf0c      	ite	eq
    baa4:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
    baa6:	236e      	movne	r3, #110	; 0x6e
    baa8:	e7e6      	b.n	ba78 <cbvprintf+0x89c>
	bool is_subnormal = (expo == 0) && (fract != 0);
    baaa:	f04f 0c00 	mov.w	ip, #0
    baae:	e65c      	b.n	b76a <cbvprintf+0x58e>
				expo--;
    bab0:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
    bab4:	1892      	adds	r2, r2, r2
    bab6:	415b      	adcs	r3, r3
    bab8:	2a00      	cmp	r2, #0
    baba:	f173 0100 	sbcs.w	r1, r3, #0
    babe:	daf7      	bge.n	bab0 <cbvprintf+0x8d4>
    bac0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    bac4:	e66e      	b.n	b7a4 <cbvprintf+0x5c8>
			fract >>= 1;
    bac6:	9b02      	ldr	r3, [sp, #8]
    bac8:	9803      	ldr	r0, [sp, #12]
    baca:	085b      	lsrs	r3, r3, #1
    bacc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    bad0:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    bad2:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    bad6:	46de      	mov	lr, fp
			fract >>= 1;
    bad8:	e9cd 3002 	strd	r3, r0, [sp, #8]
			expo++;
    badc:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    bae0:	d2f1      	bcs.n	bac6 <cbvprintf+0x8ea>
		fract *= 5U;
    bae2:	fba3 bc01 	umull	fp, ip, r3, r1
    bae6:	e9cd bc02 	strd	fp, ip, [sp, #8]
    baea:	9b03      	ldr	r3, [sp, #12]
    baec:	4348      	muls	r0, r1
    baee:	18c3      	adds	r3, r0, r3
    baf0:	9303      	str	r3, [sp, #12]
		expo++;
    baf2:	f10e 0b02 	add.w	fp, lr, #2
		decexp--;
    baf6:	3a01      	subs	r2, #1
    baf8:	2301      	movs	r3, #1
    bafa:	e662      	b.n	b7c2 <cbvprintf+0x5e6>
		fract += 2;
    bafc:	3302      	adds	r3, #2
    bafe:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    bb02:	a810      	add	r0, sp, #64	; 0x40
		fract += 2;
    bb04:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
    bb08:	920c      	str	r2, [sp, #48]	; 0x30
		_ldiv5(&fract);
    bb0a:	f009 fc2a 	bl	15362 <_ldiv5>
		decexp++;
    bb0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bb10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		expo--;
    bb14:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
    bb18:	3201      	adds	r2, #1
			fract <<= 1;
    bb1a:	1800      	adds	r0, r0, r0
    bb1c:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    bb1e:	2800      	cmp	r0, #0
    bb20:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
    bb24:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
    bb28:	daf7      	bge.n	bb1a <cbvprintf+0x93e>
    bb2a:	e651      	b.n	b7d0 <cbvprintf+0x5f4>
    bb2c:	2200      	movs	r2, #0
    bb2e:	4693      	mov	fp, r2
    bb30:	e656      	b.n	b7e0 <cbvprintf+0x604>
			precision -= decexp;
    bb32:	1abf      	subs	r7, r7, r2
			c = 'f';
    bb34:	f04f 0966 	mov.w	r9, #102	; 0x66
    bb38:	e677      	b.n	b82a <cbvprintf+0x64e>
	bool prune_zero = false;
    bb3a:	2300      	movs	r3, #0
    bb3c:	e67e      	b.n	b83c <cbvprintf+0x660>
		decimals = precision + 1;
    bb3e:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    bb40:	2b10      	cmp	r3, #16
    bb42:	bfa8      	it	ge
    bb44:	2310      	movge	r3, #16
    bb46:	469b      	mov	fp, r3
    bb48:	2110      	movs	r1, #16
    bb4a:	910f      	str	r1, [sp, #60]	; 0x3c
	uint64_t round = BIT64(59); /* 0.5 */
    bb4c:	2000      	movs	r0, #0
    bb4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    bb52:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (decimals--) {
    bb56:	f10b 3bff 	add.w	fp, fp, #4294967295
    bb5a:	f1bb 3fff 	cmp.w	fp, #4294967295
    bb5e:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    bb62:	d11f      	bne.n	bba4 <cbvprintf+0x9c8>
	fract += round;
    bb64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bb66:	18cb      	adds	r3, r1, r3
    bb68:	9308      	str	r3, [sp, #32]
    bb6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bb6c:	eb40 0303 	adc.w	r3, r0, r3
    bb70:	9309      	str	r3, [sp, #36]	; 0x24
	if (fract >= BIT64(60)) {
    bb72:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
    bb76:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
    bb7a:	f04f 30ff 	mov.w	r0, #4294967295
    bb7e:	4561      	cmp	r1, ip
    bb80:	bf08      	it	eq
    bb82:	4558      	cmpeq	r0, fp
    bb84:	d31a      	bcc.n	bbbc <cbvprintf+0x9e0>
	fract += round;
    bb86:	4658      	mov	r0, fp
    bb88:	4661      	mov	r1, ip
    bb8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	if (c == 'f') {
    bb8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    bb92:	d153      	bne.n	bc3c <cbvprintf+0xa60>
		if (decexp > 0) {
    bb94:	2a00      	cmp	r2, #0
    bb96:	dc20      	bgt.n	bbda <cbvprintf+0x9fe>
			*buf++ = '0';
    bb98:	2330      	movs	r3, #48	; 0x30
    bb9a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    bb9e:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
    bba2:	e02b      	b.n	bbfc <cbvprintf+0xa20>
	*v >>= 1;
    bba4:	0849      	lsrs	r1, r1, #1
    bba6:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    bbaa:	0840      	lsrs	r0, r0, #1
    bbac:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
	_ldiv5(v);
    bbb0:	a812      	add	r0, sp, #72	; 0x48
    bbb2:	920d      	str	r2, [sp, #52]	; 0x34
    bbb4:	f009 fbd5 	bl	15362 <_ldiv5>
    bbb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
}
    bbba:	e7cc      	b.n	bb56 <cbvprintf+0x97a>
	*v >>= 1;
    bbbc:	9b08      	ldr	r3, [sp, #32]
    bbbe:	920d      	str	r2, [sp, #52]	; 0x34
    bbc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bbc2:	085b      	lsrs	r3, r3, #1
    bbc4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    bbc8:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    bbca:	a810      	add	r0, sp, #64	; 0x40
	*v >>= 1;
    bbcc:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	_ldiv5(v);
    bbd0:	f009 fbc7 	bl	15362 <_ldiv5>
		decexp++;
    bbd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bbd6:	3201      	adds	r2, #1
    bbd8:	e7d9      	b.n	bb8e <cbvprintf+0x9b2>
	char *buf = bps;
    bbda:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
			while (decexp > 0 && digit_count > 0) {
    bbde:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bbe0:	2900      	cmp	r1, #0
    bbe2:	dd09      	ble.n	bbf8 <cbvprintf+0xa1c>
				*buf++ = _get_digit(&fract, &digit_count);
    bbe4:	a90f      	add	r1, sp, #60	; 0x3c
    bbe6:	a810      	add	r0, sp, #64	; 0x40
    bbe8:	920d      	str	r2, [sp, #52]	; 0x34
    bbea:	f009 fbda 	bl	153a2 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    bbee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
				*buf++ = _get_digit(&fract, &digit_count);
    bbf0:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
    bbf4:	3a01      	subs	r2, #1
    bbf6:	d1f2      	bne.n	bbde <cbvprintf+0xa02>
			conv->pad0_value = decexp;
    bbf8:	9217      	str	r2, [sp, #92]	; 0x5c
			decexp = 0;
    bbfa:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    bbfc:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
    bc00:	0688      	lsls	r0, r1, #26
    bc02:	d401      	bmi.n	bc08 <cbvprintf+0xa2c>
    bc04:	2f00      	cmp	r7, #0
    bc06:	dd3f      	ble.n	bc88 <cbvprintf+0xaac>
			*buf++ = '.';
    bc08:	465b      	mov	r3, fp
    bc0a:	212e      	movs	r1, #46	; 0x2e
    bc0c:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    bc10:	b192      	cbz	r2, bc38 <cbvprintf+0xa5c>
    bc12:	2f00      	cmp	r7, #0
    bc14:	dd75      	ble.n	bd02 <cbvprintf+0xb26>
			conv->pad0_value = -decexp;
    bc16:	4251      	negs	r1, r2
    bc18:	42b9      	cmp	r1, r7
    bc1a:	bfa8      	it	ge
    bc1c:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    bc1e:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
			conv->pad0_value = -decexp;
    bc22:	9117      	str	r1, [sp, #92]	; 0x5c
			conv->pad_postdp = (conv->pad0_value > 0);
    bc24:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    bc26:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    bc2a:	bfd4      	ite	le
    bc2c:	2100      	movle	r1, #0
    bc2e:	2101      	movgt	r1, #1
    bc30:	f361 1045 	bfi	r0, r1, #5, #1
    bc34:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
			*buf++ = '.';
    bc38:	469b      	mov	fp, r3
    bc3a:	e020      	b.n	bc7e <cbvprintf+0xaa2>
		*buf = _get_digit(&fract, &digit_count);
    bc3c:	a90f      	add	r1, sp, #60	; 0x3c
    bc3e:	a810      	add	r0, sp, #64	; 0x40
    bc40:	920d      	str	r2, [sp, #52]	; 0x34
    bc42:	f009 fbae 	bl	153a2 <_get_digit>
		if (*buf++ != '0') {
    bc46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		if (conv->flag_hash || (precision > 0)) {
    bc48:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*buf = _get_digit(&fract, &digit_count);
    bc4c:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
		if (*buf++ != '0') {
    bc50:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    bc52:	bf18      	it	ne
    bc54:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    bc58:	0699      	lsls	r1, r3, #26
    bc5a:	d401      	bmi.n	bc60 <cbvprintf+0xa84>
    bc5c:	2f00      	cmp	r7, #0
    bc5e:	dd52      	ble.n	bd06 <cbvprintf+0xb2a>
			*buf++ = '.';
    bc60:	232e      	movs	r3, #46	; 0x2e
    bc62:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
    bc66:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
    bc6a:	e7e5      	b.n	bc38 <cbvprintf+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
    bc6c:	a90f      	add	r1, sp, #60	; 0x3c
    bc6e:	a810      	add	r0, sp, #64	; 0x40
    bc70:	920d      	str	r2, [sp, #52]	; 0x34
    bc72:	f009 fb96 	bl	153a2 <_get_digit>
    bc76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bc78:	f80b 0b01 	strb.w	r0, [fp], #1
		precision--;
    bc7c:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    bc7e:	2f00      	cmp	r7, #0
    bc80:	dd02      	ble.n	bc88 <cbvprintf+0xaac>
    bc82:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bc84:	2900      	cmp	r1, #0
    bc86:	dcf1      	bgt.n	bc6c <cbvprintf+0xa90>
	if (prune_zero) {
    bc88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc8a:	2b00      	cmp	r3, #0
    bc8c:	d13e      	bne.n	bd0c <cbvprintf+0xb30>
	conv->pad0_pre_exp = precision;
    bc8e:	9718      	str	r7, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
    bc90:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    bc94:	2945      	cmp	r1, #69	; 0x45
    bc96:	d122      	bne.n	bcde <cbvprintf+0xb02>
		if (decexp < 0) {
    bc98:	2a00      	cmp	r2, #0
		*buf++ = c;
    bc9a:	4658      	mov	r0, fp
			decexp = -decexp;
    bc9c:	bfba      	itte	lt
    bc9e:	4252      	neglt	r2, r2
			*buf++ = '-';
    bca0:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    bca2:	212b      	movge	r1, #43	; 0x2b
		if (decexp >= 100) {
    bca4:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    bca6:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    bcaa:	f88b 1001 	strb.w	r1, [fp, #1]
		if (decexp >= 100) {
    bcae:	dd0a      	ble.n	bcc6 <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
    bcb0:	2764      	movs	r7, #100	; 0x64
    bcb2:	fbb2 f1f7 	udiv	r1, r2, r7
    bcb6:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    bcba:	f10b 0003 	add.w	r0, fp, #3
    bcbe:	f88b c002 	strb.w	ip, [fp, #2]
			decexp %= 100;
    bcc2:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    bcc6:	270a      	movs	r7, #10
    bcc8:	4683      	mov	fp, r0
    bcca:	fbb2 f1f7 	udiv	r1, r2, r7
		*buf++ = (decexp % 10) + '0';
    bcce:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    bcd2:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    bcd6:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    bcd8:	f80b cb02 	strb.w	ip, [fp], #2
		*buf++ = (decexp % 10) + '0';
    bcdc:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    bcde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    bce0:	2a00      	cmp	r2, #0
    bce2:	dc1e      	bgt.n	bd22 <cbvprintf+0xb46>
    bce4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    bce6:	2a00      	cmp	r2, #0
    bce8:	bfd4      	ite	le
    bcea:	2200      	movle	r2, #0
    bcec:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    bcee:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
    bcf2:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    bcf6:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    bcf8:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
    bcfc:	f88b 2000 	strb.w	r2, [fp]
	return bps;
    bd00:	e60e      	b.n	b920 <cbvprintf+0x744>
			*buf++ = '.';
    bd02:	469b      	mov	fp, r3
    bd04:	e7c0      	b.n	bc88 <cbvprintf+0xaac>
		if (*buf++ != '0') {
    bd06:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
    bd0a:	e7bd      	b.n	bc88 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
    bd0c:	2100      	movs	r1, #0
    bd0e:	9118      	str	r1, [sp, #96]	; 0x60
		while (*--buf == '0') {
    bd10:	4658      	mov	r0, fp
    bd12:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
    bd16:	2930      	cmp	r1, #48	; 0x30
    bd18:	d0fa      	beq.n	bd10 <cbvprintf+0xb34>
		if (*buf != '.') {
    bd1a:	292e      	cmp	r1, #46	; 0x2e
    bd1c:	bf18      	it	ne
    bd1e:	4683      	movne	fp, r0
    bd20:	e7b6      	b.n	bc90 <cbvprintf+0xab4>
		|| (conv->pad0_pre_exp > 0);
    bd22:	2201      	movs	r2, #1
    bd24:	e7e3      	b.n	bcee <cbvprintf+0xb12>
			bpe = bps + 5;
    bd26:	f8df b018 	ldr.w	fp, [pc, #24]	; bd40 <cbvprintf+0xb64>
		char sign = 0;
    bd2a:	4606      	mov	r6, r0
			bps = "(nil)";
    bd2c:	f1ab 0905 	sub.w	r9, fp, #5
    bd30:	e5f8      	b.n	b924 <cbvprintf+0x748>
		} else if (conv->altform_0) {
    bd32:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    bd34:	bf48      	it	mi
    bd36:	3201      	addmi	r2, #1
    bd38:	e5fe      	b.n	b938 <cbvprintf+0x75c>
    bd3a:	bf00      	nop
    bd3c:	00046dcb 	.word	0x00046dcb
    bd40:	00046c07 	.word	0x00046c07
    bd44:	930c      	str	r3, [sp, #48]	; 0x30
					OUTC(pad);
    bd46:	4641      	mov	r1, r8
    bd48:	9b06      	ldr	r3, [sp, #24]
    bd4a:	4638      	mov	r0, r7
    bd4c:	4798      	blx	r3
    bd4e:	2800      	cmp	r0, #0
    bd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd52:	da05      	bge.n	bd60 <cbvprintf+0xb84>
#undef OUTS
#undef OUTC
}
    bd54:	b023      	add	sp, #140	; 0x8c
    bd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    bd5a:	2720      	movs	r7, #32
    bd5c:	eb0a 0305 	add.w	r3, sl, r5
    bd60:	4652      	mov	r2, sl
				while (width-- > 0) {
    bd62:	2a00      	cmp	r2, #0
    bd64:	eba3 050a 	sub.w	r5, r3, sl
    bd68:	f10a 3aff 	add.w	sl, sl, #4294967295
    bd6c:	dcea      	bgt.n	bd44 <cbvprintf+0xb68>
		if (sign != 0) {
    bd6e:	b136      	cbz	r6, bd7e <cbvprintf+0xba2>
			OUTC(sign);
    bd70:	9b06      	ldr	r3, [sp, #24]
    bd72:	4641      	mov	r1, r8
    bd74:	4630      	mov	r0, r6
    bd76:	4798      	blx	r3
    bd78:	2800      	cmp	r0, #0
    bd7a:	dbeb      	blt.n	bd54 <cbvprintf+0xb78>
    bd7c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    bd7e:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    bd82:	0650      	lsls	r0, r2, #25
    bd84:	d57d      	bpl.n	be82 <cbvprintf+0xca6>
			if (conv->specifier_a) {
    bd86:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
    bd8a:	2a00      	cmp	r2, #0
    bd8c:	db2c      	blt.n	bde8 <cbvprintf+0xc0c>
    bd8e:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
    bd92:	f899 0000 	ldrb.w	r0, [r9]
    bd96:	4b5b      	ldr	r3, [pc, #364]	; (bf04 <cbvprintf+0xd28>)
    bd98:	5cc2      	ldrb	r2, [r0, r3]
    bd9a:	464e      	mov	r6, r9
    bd9c:	0751      	lsls	r1, r2, #29
    bd9e:	eb05 0706 	add.w	r7, r5, r6
    bda2:	f109 0901 	add.w	r9, r9, #1
    bda6:	d43f      	bmi.n	be28 <cbvprintf+0xc4c>
				if (!conv->pad_postdp) {
    bda8:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv->pad0_value;
    bdac:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
				if (!conv->pad_postdp) {
    bdb0:	0692      	lsls	r2, r2, #26
    bdb2:	d408      	bmi.n	bdc6 <cbvprintf+0xbea>
    bdb4:	eb09 0507 	add.w	r5, r9, r7
    bdb8:	464a      	mov	r2, r9
					while (pad_len-- > 0) {
    bdba:	2a00      	cmp	r2, #0
    bdbc:	eba5 0709 	sub.w	r7, r5, r9
    bdc0:	f109 39ff 	add.w	r9, r9, #4294967295
    bdc4:	dc36      	bgt.n	be34 <cbvprintf+0xc58>
				if (*cp == '.') {
    bdc6:	7830      	ldrb	r0, [r6, #0]
    bdc8:	282e      	cmp	r0, #46	; 0x2e
    bdca:	d10a      	bne.n	bde2 <cbvprintf+0xc06>
					OUTC(*cp++);
    bdcc:	9b06      	ldr	r3, [sp, #24]
    bdce:	4641      	mov	r1, r8
    bdd0:	4798      	blx	r3
						OUTC('0');
    bdd2:	2800      	cmp	r0, #0
    bdd4:	dbbe      	blt.n	bd54 <cbvprintf+0xb78>
					while (pad_len-- > 0) {
    bdd6:	f1b9 0f00 	cmp.w	r9, #0
						OUTC('0');
    bdda:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
    bdde:	dc30      	bgt.n	be42 <cbvprintf+0xc66>
					OUTC(*cp++);
    bde0:	3601      	adds	r6, #1
    bde2:	46b1      	mov	r9, r6
    bde4:	1bbf      	subs	r7, r7, r6
    bde6:	e039      	b.n	be5c <cbvprintf+0xc80>
    bde8:	eba5 0709 	sub.w	r7, r5, r9
    bdec:	464d      	mov	r5, r9
    bdee:	eb07 0609 	add.w	r6, r7, r9
				while (*cp != 'p') {
    bdf2:	f819 0b01 	ldrb.w	r0, [r9], #1
    bdf6:	2870      	cmp	r0, #112	; 0x70
    bdf8:	d110      	bne.n	be1c <cbvprintf+0xc40>
			while (pad_len-- > 0) {
    bdfa:	9f18      	ldr	r7, [sp, #96]	; 0x60
    bdfc:	4437      	add	r7, r6
    bdfe:	1bba      	subs	r2, r7, r6
    be00:	2a00      	cmp	r2, #0
    be02:	dc35      	bgt.n	be70 <cbvprintf+0xc94>
			OUTS(cp, bpe);
    be04:	9806      	ldr	r0, [sp, #24]
    be06:	465b      	mov	r3, fp
    be08:	462a      	mov	r2, r5
    be0a:	4641      	mov	r1, r8
    be0c:	f009 fae0 	bl	153d0 <outs>
    be10:	2800      	cmp	r0, #0
    be12:	db9f      	blt.n	bd54 <cbvprintf+0xb78>
    be14:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    be16:	4605      	mov	r5, r0
    be18:	4482      	add	sl, r0
    be1a:	e06c      	b.n	bef6 <cbvprintf+0xd1a>
					OUTC(*cp++);
    be1c:	9b06      	ldr	r3, [sp, #24]
    be1e:	4641      	mov	r1, r8
    be20:	4798      	blx	r3
    be22:	2800      	cmp	r0, #0
    be24:	dae2      	bge.n	bdec <cbvprintf+0xc10>
    be26:	e795      	b.n	bd54 <cbvprintf+0xb78>
					OUTC(*cp++);
    be28:	9b06      	ldr	r3, [sp, #24]
    be2a:	4641      	mov	r1, r8
    be2c:	4798      	blx	r3
    be2e:	2800      	cmp	r0, #0
    be30:	daaf      	bge.n	bd92 <cbvprintf+0xbb6>
    be32:	e78f      	b.n	bd54 <cbvprintf+0xb78>
						OUTC('0');
    be34:	9b06      	ldr	r3, [sp, #24]
    be36:	4641      	mov	r1, r8
    be38:	2030      	movs	r0, #48	; 0x30
    be3a:	4798      	blx	r3
    be3c:	2800      	cmp	r0, #0
    be3e:	dabb      	bge.n	bdb8 <cbvprintf+0xbdc>
    be40:	e788      	b.n	bd54 <cbvprintf+0xb78>
						OUTC('0');
    be42:	9b06      	ldr	r3, [sp, #24]
    be44:	4641      	mov	r1, r8
    be46:	2030      	movs	r0, #48	; 0x30
    be48:	4798      	blx	r3
    be4a:	f109 39ff 	add.w	r9, r9, #4294967295
    be4e:	e7c0      	b.n	bdd2 <cbvprintf+0xbf6>
					OUTC(*cp++);
    be50:	9b06      	ldr	r3, [sp, #24]
    be52:	4641      	mov	r1, r8
    be54:	4798      	blx	r3
    be56:	2800      	cmp	r0, #0
    be58:	f6ff af7c 	blt.w	bd54 <cbvprintf+0xb78>
				while (isdigit((int)*cp)) {
    be5c:	4b29      	ldr	r3, [pc, #164]	; (bf04 <cbvprintf+0xd28>)
    be5e:	464d      	mov	r5, r9
    be60:	eb07 0609 	add.w	r6, r7, r9
    be64:	f819 0b01 	ldrb.w	r0, [r9], #1
    be68:	5cc2      	ldrb	r2, [r0, r3]
    be6a:	0753      	lsls	r3, r2, #29
    be6c:	d4f0      	bmi.n	be50 <cbvprintf+0xc74>
    be6e:	e7c4      	b.n	bdfa <cbvprintf+0xc1e>
				OUTC('0');
    be70:	9b06      	ldr	r3, [sp, #24]
    be72:	4641      	mov	r1, r8
    be74:	2030      	movs	r0, #48	; 0x30
    be76:	4798      	blx	r3
    be78:	2800      	cmp	r0, #0
    be7a:	f6ff af6b 	blt.w	bd54 <cbvprintf+0xb78>
    be7e:	3601      	adds	r6, #1
    be80:	e7bd      	b.n	bdfe <cbvprintf+0xc22>
			if (conv->altform_0c | conv->altform_0) {
    be82:	06d1      	lsls	r1, r2, #27
    be84:	d401      	bmi.n	be8a <cbvprintf+0xcae>
    be86:	0712      	lsls	r2, r2, #28
    be88:	d507      	bpl.n	be9a <cbvprintf+0xcbe>
				OUTC('0');
    be8a:	9b06      	ldr	r3, [sp, #24]
    be8c:	4641      	mov	r1, r8
    be8e:	2030      	movs	r0, #48	; 0x30
    be90:	4798      	blx	r3
    be92:	2800      	cmp	r0, #0
    be94:	f6ff af5e 	blt.w	bd54 <cbvprintf+0xb78>
    be98:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    be9a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    be9e:	06d3      	lsls	r3, r2, #27
    bea0:	d508      	bpl.n	beb4 <cbvprintf+0xcd8>
				OUTC(conv->specifier);
    bea2:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
    bea6:	9b06      	ldr	r3, [sp, #24]
    bea8:	4641      	mov	r1, r8
    beaa:	4798      	blx	r3
    beac:	2800      	cmp	r0, #0
    beae:	f6ff af51 	blt.w	bd54 <cbvprintf+0xb78>
    beb2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    beb4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    beb6:	442f      	add	r7, r5
    beb8:	1b7a      	subs	r2, r7, r5
    beba:	2a00      	cmp	r2, #0
    bebc:	dc0a      	bgt.n	bed4 <cbvprintf+0xcf8>
			OUTS(bps, bpe);
    bebe:	9806      	ldr	r0, [sp, #24]
    bec0:	465b      	mov	r3, fp
    bec2:	464a      	mov	r2, r9
    bec4:	4641      	mov	r1, r8
    bec6:	f009 fa83 	bl	153d0 <outs>
    beca:	2800      	cmp	r0, #0
    becc:	f6ff af42 	blt.w	bd54 <cbvprintf+0xb78>
    bed0:	4428      	add	r0, r5
    bed2:	e7a0      	b.n	be16 <cbvprintf+0xc3a>
				OUTC('0');
    bed4:	9b06      	ldr	r3, [sp, #24]
    bed6:	4641      	mov	r1, r8
    bed8:	2030      	movs	r0, #48	; 0x30
    beda:	4798      	blx	r3
    bedc:	2800      	cmp	r0, #0
    bede:	f6ff af39 	blt.w	bd54 <cbvprintf+0xb78>
    bee2:	3501      	adds	r5, #1
    bee4:	e7e8      	b.n	beb8 <cbvprintf+0xcdc>
			OUTC(' ');
    bee6:	9b06      	ldr	r3, [sp, #24]
    bee8:	4641      	mov	r1, r8
    beea:	2020      	movs	r0, #32
    beec:	4798      	blx	r3
    beee:	2800      	cmp	r0, #0
    bef0:	f6ff af30 	blt.w	bd54 <cbvprintf+0xb78>
    bef4:	3501      	adds	r5, #1
		while (width > 0) {
    bef6:	ebaa 0305 	sub.w	r3, sl, r5
    befa:	2b00      	cmp	r3, #0
    befc:	dcf3      	bgt.n	bee6 <cbvprintf+0xd0a>
    befe:	f7ff bbad 	b.w	b65c <cbvprintf+0x480>
    bf02:	bf00      	nop
    bf04:	00046dcb 	.word	0x00046dcb

0000bf08 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    bf08:	b508      	push	{r3, lr}
    bf0a:	f04f 0220 	mov.w	r2, #32
    bf0e:	f3ef 8311 	mrs	r3, BASEPRI
    bf12:	f382 8812 	msr	BASEPRI_MAX, r2
    bf16:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    bf1a:	f000 fef5 	bl	cd08 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    bf1e:	4803      	ldr	r0, [pc, #12]	; (bf2c <sys_reboot+0x24>)
    bf20:	f009 f8fa 	bl	15118 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    bf24:	f000 fa52 	bl	c3cc <arch_cpu_idle>
    bf28:	e7fc      	b.n	bf24 <sys_reboot+0x1c>
    bf2a:	bf00      	nop
    bf2c:	00046c08 	.word	0x00046c08

0000bf30 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    bf30:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    bf32:	4c04      	ldr	r4, [pc, #16]	; (bf44 <__do_init_array_aux+0x14>)
    bf34:	4d04      	ldr	r5, [pc, #16]	; (bf48 <__do_init_array_aux+0x18>)
    bf36:	42ac      	cmp	r4, r5
    bf38:	d300      	bcc.n	bf3c <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    bf3a:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    bf3c:	f854 3b04 	ldr.w	r3, [r4], #4
    bf40:	4798      	blx	r3
		func++) {
    bf42:	e7f8      	b.n	bf36 <__do_init_array_aux+0x6>
    bf44:	00016fb0 	.word	0x00016fb0
    bf48:	00016fb4 	.word	0x00016fb4

0000bf4c <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    bf4c:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    bf4e:	4c05      	ldr	r4, [pc, #20]	; (bf64 <__do_global_ctors_aux+0x18>)
    bf50:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    bf52:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    bf56:	b905      	cbnz	r5, bf5a <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    bf58:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    bf5a:	f854 3904 	ldr.w	r3, [r4], #-4
    bf5e:	3d01      	subs	r5, #1
    bf60:	4798      	blx	r3
    bf62:	e7f8      	b.n	bf56 <__do_global_ctors_aux+0xa>
    bf64:	00016fa8 	.word	0x00016fa8

0000bf68 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bf6c:	4605      	mov	r5, r0
    bf6e:	f04f 0320 	mov.w	r3, #32
    bf72:	f3ef 8611 	mrs	r6, BASEPRI
    bf76:	f383 8812 	msr	BASEPRI_MAX, r3
    bf7a:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    bf7e:	4b10      	ldr	r3, [pc, #64]	; (bfc0 <pm_state_notify+0x58>)
    bf80:	681c      	ldr	r4, [r3, #0]
    bf82:	2c00      	cmp	r4, #0
    bf84:	bf38      	it	cc
    bf86:	2400      	movcc	r4, #0
    bf88:	b19c      	cbz	r4, bfb2 <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    bf8a:	4f0e      	ldr	r7, [pc, #56]	; (bfc4 <pm_state_notify+0x5c>)
    bf8c:	f8df 8038 	ldr.w	r8, [pc, #56]	; bfc8 <pm_state_notify+0x60>
    bf90:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    bf94:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    bf98:	2d00      	cmp	r5, #0
    bf9a:	bf08      	it	eq
    bf9c:	4613      	moveq	r3, r2
		if (callback) {
    bf9e:	b12b      	cbz	r3, bfac <pm_state_notify+0x44>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    bfa0:	f898 2014 	ldrb.w	r2, [r8, #20]
    bfa4:	fb09 f202 	mul.w	r2, r9, r2
    bfa8:	5cb8      	ldrb	r0, [r7, r2]
    bfaa:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bfac:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    bfae:	2c00      	cmp	r4, #0
    bfb0:	d1f0      	bne.n	bf94 <pm_state_notify+0x2c>
	__asm__ volatile(
    bfb2:	f386 8811 	msr	BASEPRI, r6
    bfb6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    bfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bfbe:	bf00      	nop
    bfc0:	200011a4 	.word	0x200011a4
    bfc4:	200011ac 	.word	0x200011ac
    bfc8:	20001854 	.word	0x20001854

0000bfcc <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bfcc:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    bfce:	2301      	movs	r3, #1
    bfd0:	f000 001f 	and.w	r0, r0, #31
    bfd4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bfd8:	4b07      	ldr	r3, [pc, #28]	; (bff8 <atomic_clear_bit.constprop.0+0x2c>)
    bfda:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bfde:	43c0      	mvns	r0, r0
    bfe0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    bfe4:	e853 2f00 	ldrex	r2, [r3]
    bfe8:	4002      	ands	r2, r0
    bfea:	e843 2100 	strex	r1, r2, [r3]
    bfee:	2900      	cmp	r1, #0
    bff0:	d1f8      	bne.n	bfe4 <atomic_clear_bit.constprop.0+0x18>
    bff2:	f3bf 8f5b 	dmb	ish
}
    bff6:	4770      	bx	lr
    bff8:	200011b8 	.word	0x200011b8

0000bffc <pm_system_resume>:

void pm_system_resume(void)
{
    bffc:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    bffe:	4b1a      	ldr	r3, [pc, #104]	; (c068 <pm_system_resume+0x6c>)
    c000:	7d1d      	ldrb	r5, [r3, #20]
    c002:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    c006:	f005 031f 	and.w	r3, r5, #31
    c00a:	2201      	movs	r2, #1
    c00c:	409a      	lsls	r2, r3
    c00e:	4b17      	ldr	r3, [pc, #92]	; (c06c <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c010:	0969      	lsrs	r1, r5, #5
    c012:	43d0      	mvns	r0, r2
    c014:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c018:	e853 1f00 	ldrex	r1, [r3]
    c01c:	ea01 0400 	and.w	r4, r1, r0
    c020:	e843 4c00 	strex	ip, r4, [r3]
    c024:	f1bc 0f00 	cmp.w	ip, #0
    c028:	d1f6      	bne.n	c018 <pm_system_resume+0x1c>
    c02a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c02e:	4211      	tst	r1, r2
    c030:	d013      	beq.n	c05a <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    c032:	4b0f      	ldr	r3, [pc, #60]	; (c070 <pm_system_resume+0x74>)
    c034:	4c0f      	ldr	r4, [pc, #60]	; (c074 <pm_system_resume+0x78>)
    c036:	b18b      	cbz	r3, c05c <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c038:	230c      	movs	r3, #12
    c03a:	436b      	muls	r3, r5
    c03c:	18e2      	adds	r2, r4, r3
    c03e:	5ce0      	ldrb	r0, [r4, r3]
    c040:	7851      	ldrb	r1, [r2, #1]
    c042:	f009 fa44 	bl	154ce <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    c046:	2000      	movs	r0, #0
    c048:	f7ff ff8e 	bl	bf68 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c04c:	230c      	movs	r3, #12
    c04e:	436b      	muls	r3, r5
    c050:	2200      	movs	r2, #0
    c052:	18e1      	adds	r1, r4, r3
    c054:	50e2      	str	r2, [r4, r3]
    c056:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    c05a:	bd38      	pop	{r3, r4, r5, pc}
    c05c:	f383 8811 	msr	BASEPRI, r3
    c060:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    c064:	e7ef      	b.n	c046 <pm_system_resume+0x4a>
    c066:	bf00      	nop
    c068:	20001854 	.word	0x20001854
    c06c:	200011bc 	.word	0x200011bc
    c070:	000154cf 	.word	0x000154cf
    c074:	200011ac 	.word	0x200011ac

0000c078 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    c07c:	4b32      	ldr	r3, [pc, #200]	; (c148 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c07e:	4a33      	ldr	r2, [pc, #204]	; (c14c <pm_system_suspend+0xd4>)
    c080:	7d1c      	ldrb	r4, [r3, #20]
    c082:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    c086:	0963      	lsrs	r3, r4, #5
    c088:	ea4f 0983 	mov.w	r9, r3, lsl #2
    c08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c090:	4e2f      	ldr	r6, [pc, #188]	; (c150 <pm_system_suspend+0xd8>)
    c092:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    c096:	f004 081f 	and.w	r8, r4, #31
    c09a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    c09e:	f013 0f01 	tst.w	r3, #1
{
    c0a2:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    c0a4:	d10a      	bne.n	c0bc <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    c0a6:	4601      	mov	r1, r0
    c0a8:	4620      	mov	r0, r4
    c0aa:	f000 f869 	bl	c180 <pm_policy_next_state>
		if (info != NULL) {
    c0ae:	b128      	cbz	r0, c0bc <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    c0b0:	c807      	ldmia	r0, {r0, r1, r2}
    c0b2:	230c      	movs	r3, #12
    c0b4:	fb03 6304 	mla	r3, r3, r4, r6
    c0b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c0bc:	230c      	movs	r3, #12
    c0be:	4363      	muls	r3, r4
    c0c0:	18f2      	adds	r2, r6, r3
    c0c2:	5cf5      	ldrb	r5, [r6, r3]
    c0c4:	b92d      	cbnz	r5, c0d2 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    c0c6:	4620      	mov	r0, r4
    c0c8:	f7ff ff80 	bl	bfcc <atomic_clear_bit.constprop.0>
		ret = false;
    c0cc:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    c0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    c0d2:	1c7b      	adds	r3, r7, #1
    c0d4:	d00f      	beq.n	c0f6 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    c0d6:	f8d2 c008 	ldr.w	ip, [r2, #8]
    c0da:	481e      	ldr	r0, [pc, #120]	; (c154 <pm_system_suspend+0xdc>)
    c0dc:	4a1e      	ldr	r2, [pc, #120]	; (c158 <pm_system_suspend+0xe0>)
    c0de:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    c0e2:	2100      	movs	r1, #0
    c0e4:	2300      	movs	r3, #0
    c0e6:	fbe5 010c 	umlal	r0, r1, r5, ip
    c0ea:	f7f4 fd77 	bl	bdc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    c0ee:	2101      	movs	r1, #1
    c0f0:	1a38      	subs	r0, r7, r0
    c0f2:	f009 ff01 	bl	15ef8 <z_set_timeout_expiry>
	k_sched_lock();
    c0f6:	f002 fe57 	bl	eda8 <k_sched_lock>
	pm_state_notify(true);
    c0fa:	2001      	movs	r0, #1
    c0fc:	f7ff ff34 	bl	bf68 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c100:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c104:	2301      	movs	r3, #1
    c106:	fa03 f808 	lsl.w	r8, r3, r8
    c10a:	4b14      	ldr	r3, [pc, #80]	; (c15c <pm_system_suspend+0xe4>)
    c10c:	4499      	add	r9, r3
    c10e:	e859 3f00 	ldrex	r3, [r9]
    c112:	ea43 0308 	orr.w	r3, r3, r8
    c116:	e849 3200 	strex	r2, r3, [r9]
    c11a:	2a00      	cmp	r2, #0
    c11c:	d1f7      	bne.n	c10e <pm_system_suspend+0x96>
    c11e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    c122:	4b0f      	ldr	r3, [pc, #60]	; (c160 <pm_system_suspend+0xe8>)
    c124:	b133      	cbz	r3, c134 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    c126:	230c      	movs	r3, #12
    c128:	4363      	muls	r3, r4
    c12a:	18f2      	adds	r2, r6, r3
    c12c:	5cf0      	ldrb	r0, [r6, r3]
    c12e:	7851      	ldrb	r1, [r2, #1]
    c130:	f009 f9c1 	bl	154b6 <pm_state_set>
	pm_system_resume();
    c134:	f7ff ff62 	bl	bffc <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    c138:	4620      	mov	r0, r4
    c13a:	f7ff ff47 	bl	bfcc <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    c13e:	f003 f80f 	bl	f160 <k_sched_unlock>
	bool ret = true;
    c142:	2001      	movs	r0, #1
    c144:	e7c3      	b.n	c0ce <pm_system_suspend+0x56>
    c146:	bf00      	nop
    c148:	20001854 	.word	0x20001854
    c14c:	200011b8 	.word	0x200011b8
    c150:	200011ac 	.word	0x200011ac
    c154:	000f423f 	.word	0x000f423f
    c158:	000f4240 	.word	0x000f4240
    c15c:	200011bc 	.word	0x200011bc
    c160:	000154b7 	.word	0x000154b7

0000c164 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c164:	4b05      	ldr	r3, [pc, #20]	; (c17c <pm_policy_state_lock_is_active+0x18>)
    c166:	f3bf 8f5b 	dmb	ish
    c16a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    c16e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    c172:	3800      	subs	r0, #0
    c174:	bf18      	it	ne
    c176:	2001      	movne	r0, #1
    c178:	4770      	bx	lr
    c17a:	bf00      	nop
    c17c:	200011c0 	.word	0x200011c0

0000c180 <pm_policy_next_state>:
{
    c180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c184:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c186:	a901      	add	r1, sp, #4
    c188:	f000 f848 	bl	c21c <pm_state_cpu_get_all>
    c18c:	f8df 8084 	ldr.w	r8, [pc, #132]	; c214 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c190:	3801      	subs	r0, #1
    c192:	b204      	sxth	r4, r0
    c194:	f04f 0900 	mov.w	r9, #0
    c198:	1c63      	adds	r3, r4, #1
    c19a:	d104      	bne.n	c1a6 <pm_policy_next_state+0x26>
	return NULL;
    c19c:	2500      	movs	r5, #0
}
    c19e:	4628      	mov	r0, r5
    c1a0:	b003      	add	sp, #12
    c1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    c1a6:	9a01      	ldr	r2, [sp, #4]
    c1a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c1ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    c1b0:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    c1b4:	f7ff ffd6 	bl	c164 <pm_policy_state_lock_is_active>
    c1b8:	bb38      	cbnz	r0, c20a <pm_policy_next_state+0x8a>
    c1ba:	6869      	ldr	r1, [r5, #4]
    c1bc:	f8df b058 	ldr.w	fp, [pc, #88]	; c218 <pm_policy_next_state+0x98>
    c1c0:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    c1c4:	f04f 0c00 	mov.w	ip, #0
    c1c8:	fbea bc01 	umlal	fp, ip, sl, r1
    c1cc:	4642      	mov	r2, r8
    c1ce:	464b      	mov	r3, r9
    c1d0:	4658      	mov	r0, fp
    c1d2:	4661      	mov	r1, ip
    c1d4:	f7f4 fd02 	bl	bdc <__aeabi_uldivmod>
    c1d8:	f8df b03c 	ldr.w	fp, [pc, #60]	; c218 <pm_policy_next_state+0x98>
    c1dc:	68a9      	ldr	r1, [r5, #8]
    c1de:	f04f 0c00 	mov.w	ip, #0
    c1e2:	fbea bc01 	umlal	fp, ip, sl, r1
    c1e6:	464b      	mov	r3, r9
    c1e8:	4607      	mov	r7, r0
    c1ea:	4642      	mov	r2, r8
    c1ec:	4658      	mov	r0, fp
    c1ee:	4661      	mov	r1, ip
    c1f0:	f7f4 fcf4 	bl	bdc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c1f4:	4b06      	ldr	r3, [pc, #24]	; (c210 <pm_policy_next_state+0x90>)
    c1f6:	681b      	ldr	r3, [r3, #0]
    c1f8:	1c59      	adds	r1, r3, #1
    c1fa:	d001      	beq.n	c200 <pm_policy_next_state+0x80>
    c1fc:	4283      	cmp	r3, r0
    c1fe:	d904      	bls.n	c20a <pm_policy_next_state+0x8a>
		if ((ticks == K_TICKS_FOREVER) ||
    c200:	1c72      	adds	r2, r6, #1
    c202:	d0cc      	beq.n	c19e <pm_policy_next_state+0x1e>
		    (ticks >= (min_residency + exit_latency))) {
    c204:	4438      	add	r0, r7
		if ((ticks == K_TICKS_FOREVER) ||
    c206:	42b0      	cmp	r0, r6
    c208:	d9c9      	bls.n	c19e <pm_policy_next_state+0x1e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c20a:	3c01      	subs	r4, #1
    c20c:	b224      	sxth	r4, r4
    c20e:	e7c3      	b.n	c198 <pm_policy_next_state+0x18>
    c210:	20000274 	.word	0x20000274
    c214:	000f4240 	.word	0x000f4240
    c218:	000f423f 	.word	0x000f423f

0000c21c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c21c:	b908      	cbnz	r0, c222 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c21e:	4b02      	ldr	r3, [pc, #8]	; (c228 <pm_state_cpu_get_all+0xc>)
    c220:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c222:	2000      	movs	r0, #0
    c224:	4770      	bx	lr
    c226:	bf00      	nop
    c228:	00040084 	.word	0x00040084

0000c22c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    c22c:	4801      	ldr	r0, [pc, #4]	; (c234 <nrf_cc3xx_platform_abort_init+0x8>)
    c22e:	f005 bb11 	b.w	11854 <nrf_cc3xx_platform_set_abort>
    c232:	bf00      	nop
    c234:	00040084 	.word	0x00040084

0000c238 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    c238:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    c23a:	b1d0      	cbz	r0, c272 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    c23c:	6843      	ldr	r3, [r0, #4]
    c23e:	2b04      	cmp	r3, #4
    c240:	d111      	bne.n	c266 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c242:	2200      	movs	r2, #0
    c244:	6803      	ldr	r3, [r0, #0]
    c246:	f3bf 8f5b 	dmb	ish
    c24a:	e853 1f00 	ldrex	r1, [r3]
    c24e:	2901      	cmp	r1, #1
    c250:	d103      	bne.n	c25a <mutex_unlock_platform+0x22>
    c252:	e843 2000 	strex	r0, r2, [r3]
    c256:	2800      	cmp	r0, #0
    c258:	d1f7      	bne.n	c24a <mutex_unlock_platform+0x12>
    c25a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    c25e:	4807      	ldr	r0, [pc, #28]	; (c27c <mutex_unlock_platform+0x44>)
    c260:	bf08      	it	eq
    c262:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    c264:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    c266:	b13b      	cbz	r3, c278 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    c268:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    c26a:	f002 fcb5 	bl	ebd8 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    c26e:	2000      	movs	r0, #0
    c270:	e7f8      	b.n	c264 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    c272:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c276:	e7f5      	b.n	c264 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    c278:	4801      	ldr	r0, [pc, #4]	; (c280 <mutex_unlock_platform+0x48>)
    c27a:	e7f3      	b.n	c264 <mutex_unlock_platform+0x2c>
    c27c:	ffff8fe9 	.word	0xffff8fe9
    c280:	ffff8fea 	.word	0xffff8fea

0000c284 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    c284:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    c286:	4604      	mov	r4, r0
    c288:	b918      	cbnz	r0, c292 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    c28a:	4b0d      	ldr	r3, [pc, #52]	; (c2c0 <mutex_free_platform+0x3c>)
    c28c:	480d      	ldr	r0, [pc, #52]	; (c2c4 <mutex_free_platform+0x40>)
    c28e:	685b      	ldr	r3, [r3, #4]
    c290:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    c292:	6861      	ldr	r1, [r4, #4]
    c294:	2908      	cmp	r1, #8
    c296:	d00d      	beq.n	c2b4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    c298:	f031 0304 	bics.w	r3, r1, #4
    c29c:	d00a      	beq.n	c2b4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    c29e:	f011 0102 	ands.w	r1, r1, #2
    c2a2:	d008      	beq.n	c2b6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    c2a4:	4808      	ldr	r0, [pc, #32]	; (c2c8 <mutex_free_platform+0x44>)
    c2a6:	4621      	mov	r1, r4
    c2a8:	f009 fd1a 	bl	15ce0 <k_mem_slab_free>
        mutex->mutex = NULL;
    c2ac:	2300      	movs	r3, #0
    c2ae:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    c2b0:	2300      	movs	r3, #0
    c2b2:	6063      	str	r3, [r4, #4]
}
    c2b4:	bd10      	pop	{r4, pc}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    c2b6:	6820      	ldr	r0, [r4, #0]
    c2b8:	2214      	movs	r2, #20
    c2ba:	f009 fef4 	bl	160a6 <memset>
    c2be:	e7f7      	b.n	c2b0 <mutex_free_platform+0x2c>
    c2c0:	20000554 	.word	0x20000554
    c2c4:	00046c31 	.word	0x00046c31
    c2c8:	200011dc 	.word	0x200011dc

0000c2cc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    c2cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    c2ce:	4604      	mov	r4, r0
    c2d0:	b918      	cbnz	r0, c2da <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    c2d2:	4b16      	ldr	r3, [pc, #88]	; (c32c <mutex_init_platform+0x60>)
    c2d4:	4816      	ldr	r0, [pc, #88]	; (c330 <mutex_init_platform+0x64>)
    c2d6:	685b      	ldr	r3, [r3, #4]
    c2d8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    c2da:	6863      	ldr	r3, [r4, #4]
    c2dc:	2b04      	cmp	r3, #4
    c2de:	d023      	beq.n	c328 <mutex_init_platform+0x5c>
    c2e0:	2b08      	cmp	r3, #8
    c2e2:	d021      	beq.n	c328 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    c2e4:	b9cb      	cbnz	r3, c31a <mutex_init_platform+0x4e>
    c2e6:	6823      	ldr	r3, [r4, #0]
    c2e8:	b9bb      	cbnz	r3, c31a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    c2ea:	4812      	ldr	r0, [pc, #72]	; (c334 <mutex_init_platform+0x68>)
    c2ec:	f04f 32ff 	mov.w	r2, #4294967295
    c2f0:	f04f 33ff 	mov.w	r3, #4294967295
    c2f4:	4621      	mov	r1, r4
    c2f6:	f002 fb15 	bl	e924 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    c2fa:	b908      	cbnz	r0, c300 <mutex_init_platform+0x34>
    c2fc:	6823      	ldr	r3, [r4, #0]
    c2fe:	b91b      	cbnz	r3, c308 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    c300:	4b0a      	ldr	r3, [pc, #40]	; (c32c <mutex_init_platform+0x60>)
    c302:	480d      	ldr	r0, [pc, #52]	; (c338 <mutex_init_platform+0x6c>)
    c304:	685b      	ldr	r3, [r3, #4]
    c306:	4798      	blx	r3
    c308:	6820      	ldr	r0, [r4, #0]
    c30a:	2214      	movs	r2, #20
    c30c:	2100      	movs	r1, #0
    c30e:	f009 feca 	bl	160a6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    c312:	6863      	ldr	r3, [r4, #4]
    c314:	f043 0302 	orr.w	r3, r3, #2
    c318:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    c31a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    c31c:	f009 fd16 	bl	15d4c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    c320:	6863      	ldr	r3, [r4, #4]
    c322:	f043 0301 	orr.w	r3, r3, #1
    c326:	6063      	str	r3, [r4, #4]
}
    c328:	bd10      	pop	{r4, pc}
    c32a:	bf00      	nop
    c32c:	20000554 	.word	0x20000554
    c330:	00046c31 	.word	0x00046c31
    c334:	200011dc 	.word	0x200011dc
    c338:	00046c57 	.word	0x00046c57

0000c33c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    c33c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    c33e:	b308      	cbz	r0, c384 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    c340:	6843      	ldr	r3, [r0, #4]
    c342:	2b04      	cmp	r3, #4
    c344:	d110      	bne.n	c368 <mutex_lock_platform+0x2c>
    c346:	2201      	movs	r2, #1
    c348:	6803      	ldr	r3, [r0, #0]
    c34a:	f3bf 8f5b 	dmb	ish
    c34e:	e853 1f00 	ldrex	r1, [r3]
    c352:	2900      	cmp	r1, #0
    c354:	d103      	bne.n	c35e <mutex_lock_platform+0x22>
    c356:	e843 2000 	strex	r0, r2, [r3]
    c35a:	2800      	cmp	r0, #0
    c35c:	d1f7      	bne.n	c34e <mutex_lock_platform+0x12>
    c35e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    c362:	d10b      	bne.n	c37c <mutex_lock_platform+0x40>
    c364:	2000      	movs	r0, #0
}
    c366:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    c368:	b153      	cbz	r3, c380 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    c36a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    c36c:	f04f 32ff 	mov.w	r2, #4294967295
    c370:	f04f 33ff 	mov.w	r3, #4294967295
    c374:	f002 fbb2 	bl	eadc <z_impl_k_mutex_lock>
        if (ret == 0) {
    c378:	2800      	cmp	r0, #0
    c37a:	d0f3      	beq.n	c364 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    c37c:	4803      	ldr	r0, [pc, #12]	; (c38c <mutex_lock_platform+0x50>)
    c37e:	e7f2      	b.n	c366 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    c380:	4803      	ldr	r0, [pc, #12]	; (c390 <mutex_lock_platform+0x54>)
    c382:	e7f0      	b.n	c366 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    c384:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c388:	e7ed      	b.n	c366 <mutex_lock_platform+0x2a>
    c38a:	bf00      	nop
    c38c:	ffff8fe9 	.word	0xffff8fe9
    c390:	ffff8fea 	.word	0xffff8fea

0000c394 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    c394:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    c396:	4906      	ldr	r1, [pc, #24]	; (c3b0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    c398:	4806      	ldr	r0, [pc, #24]	; (c3b4 <nrf_cc3xx_platform_mutex_init+0x20>)
    c39a:	2340      	movs	r3, #64	; 0x40
    c39c:	2214      	movs	r2, #20
    c39e:	f009 fc83 	bl	15ca8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    c3a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    c3a6:	4904      	ldr	r1, [pc, #16]	; (c3b8 <nrf_cc3xx_platform_mutex_init+0x24>)
    c3a8:	4804      	ldr	r0, [pc, #16]	; (c3bc <nrf_cc3xx_platform_mutex_init+0x28>)
    c3aa:	f005 bab3 	b.w	11914 <nrf_cc3xx_platform_set_mutexes>
    c3ae:	bf00      	nop
    c3b0:	200011fc 	.word	0x200011fc
    c3b4:	200011dc 	.word	0x200011dc
    c3b8:	0004009c 	.word	0x0004009c
    c3bc:	0004008c 	.word	0x0004008c

0000c3c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    c3c0:	4901      	ldr	r1, [pc, #4]	; (c3c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    c3c2:	2210      	movs	r2, #16
	str	r2, [r1]
    c3c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    c3c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    c3c8:	e000ed10 	.word	0xe000ed10

0000c3cc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    c3cc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    c3ce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    c3d0:	f380 8811 	msr	BASEPRI, r0
	isb
    c3d4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    c3d8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    c3dc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    c3de:	b662      	cpsie	i
	isb
    c3e0:	f3bf 8f6f 	isb	sy

	bx	lr
    c3e4:	4770      	bx	lr
    c3e6:	bf00      	nop

0000c3e8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    c3e8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    c3ea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    c3ec:	f381 8811 	msr	BASEPRI, r1

	wfe
    c3f0:	bf20      	wfe

	msr	BASEPRI, r0
    c3f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    c3f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    c3f8:	4770      	bx	lr
    c3fa:	bf00      	nop

0000c3fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    c3fc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c3fe:	2b00      	cmp	r3, #0
    c400:	db08      	blt.n	c414 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c402:	2201      	movs	r2, #1
    c404:	f000 001f 	and.w	r0, r0, #31
    c408:	fa02 f000 	lsl.w	r0, r2, r0
    c40c:	095b      	lsrs	r3, r3, #5
    c40e:	4a02      	ldr	r2, [pc, #8]	; (c418 <arch_irq_enable+0x1c>)
    c410:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    c414:	4770      	bx	lr
    c416:	bf00      	nop
    c418:	e000e100 	.word	0xe000e100

0000c41c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    c41c:	4b05      	ldr	r3, [pc, #20]	; (c434 <arch_irq_is_enabled+0x18>)
    c41e:	0942      	lsrs	r2, r0, #5
    c420:	f000 001f 	and.w	r0, r0, #31
    c424:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    c428:	2301      	movs	r3, #1
    c42a:	fa03 f000 	lsl.w	r0, r3, r0
}
    c42e:	4010      	ands	r0, r2
    c430:	4770      	bx	lr
    c432:	bf00      	nop
    c434:	e000e100 	.word	0xe000e100

0000c438 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    c438:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    c43a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c43c:	bfa8      	it	ge
    c43e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    c442:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c446:	bfb8      	it	lt
    c448:	4b06      	ldrlt	r3, [pc, #24]	; (c464 <z_arm_irq_priority_set+0x2c>)
    c44a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c44e:	bfac      	ite	ge
    c450:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c454:	f000 000f 	andlt.w	r0, r0, #15
    c458:	b2c9      	uxtb	r1, r1
    c45a:	bfb4      	ite	lt
    c45c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c45e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    c462:	4770      	bx	lr
    c464:	e000ed14 	.word	0xe000ed14

0000c468 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    c468:	bf30      	wfi
    b z_SysNmiOnReset
    c46a:	f7ff bffd 	b.w	c468 <z_SysNmiOnReset>
    c46e:	bf00      	nop

0000c470 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c470:	4a14      	ldr	r2, [pc, #80]	; (c4c4 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    c472:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c474:	4b14      	ldr	r3, [pc, #80]	; (c4c8 <z_arm_prep_c+0x58>)
    c476:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    c47a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c47c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c480:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    c484:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c488:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    c48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    c490:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c494:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    c498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    c49c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    c4a0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    c4a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c4a8:	f3bf 8f6f 	isb	sy
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    c4ac:	2300      	movs	r3, #0
    c4ae:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    c4b2:	f002 f967 	bl	e784 <z_bss_zero>
	z_data_copy();
    c4b6:	f002 ff7b 	bl	f3b0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    c4ba:	f000 fa55 	bl	c968 <z_arm_interrupt_init>
	z_cstart();
    c4be:	f002 f9a5 	bl	e80c <z_cstart>
    c4c2:	bf00      	nop
    c4c4:	00000000 	.word	0x00000000
    c4c8:	e000ed00 	.word	0xe000ed00

0000c4cc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    c4cc:	4a09      	ldr	r2, [pc, #36]	; (c4f4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    c4ce:	490a      	ldr	r1, [pc, #40]	; (c4f8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    c4d0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    c4d2:	6809      	ldr	r1, [r1, #0]
    c4d4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c4d6:	4909      	ldr	r1, [pc, #36]	; (c4fc <arch_swap+0x30>)
	_current->arch.basepri = key;
    c4d8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c4da:	684b      	ldr	r3, [r1, #4]
    c4dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c4e0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    c4e2:	2300      	movs	r3, #0
    c4e4:	f383 8811 	msr	BASEPRI, r3
    c4e8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    c4ec:	6893      	ldr	r3, [r2, #8]
}
    c4ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
    c4f0:	4770      	bx	lr
    c4f2:	bf00      	nop
    c4f4:	20001854 	.word	0x20001854
    c4f8:	00040214 	.word	0x00040214
    c4fc:	e000ed00 	.word	0xe000ed00

0000c500 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c500:	4921      	ldr	r1, [pc, #132]	; (c588 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c502:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    c504:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c508:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    c50c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    c50e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    c512:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    c516:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    c51a:	d103      	bne.n	c524 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    c51c:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    c520:	ec80 8a10 	vstmia	r0, {s16-s31}

0000c524 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c524:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    c526:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    c52a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    c52e:	4f17      	ldr	r7, [pc, #92]	; (c58c <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    c530:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    c534:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    c536:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    c538:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    c53a:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    c53e:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    c540:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    c542:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    c544:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    c548:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    c54c:	d003      	beq.n	c556 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    c54e:	2300      	movs	r3, #0
    vmsr fpscr, r3
    c550:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    c554:	e003      	b.n	c55e <in_fp_endif>

0000c556 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    c556:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    c55a:	ec90 8a10 	vldmia	r0, {s16-s31}

0000c55e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    c55e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    c562:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    c566:	f383 8814 	msr	CONTROL, r3
    isb
    c56a:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    c56e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    c570:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    c572:	f000 fa93 	bl	ca9c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    c576:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    c57a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    c57e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    c582:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    c586:	4770      	bx	lr
    ldr r1, =_kernel
    c588:	20001854 	.word	0x20001854
    ldr v4, =_SCS_ICSR
    c58c:	e000ed04 	.word	0xe000ed04

0000c590 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    c590:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    c594:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    c596:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    c59a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    c59e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    c5a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    c5a4:	2902      	cmp	r1, #2
    beq _oops
    c5a6:	d0ff      	beq.n	c5a8 <_oops>

0000c5a8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    c5a8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    c5aa:	f008 ff3a 	bl	15422 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    c5ae:	bd01      	pop	{r0, pc}

0000c5b0 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    c5b0:	7b01      	ldrb	r1, [r0, #12]
{
    c5b2:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    c5b4:	f011 0402 	ands.w	r4, r1, #2
    c5b8:	d005      	beq.n	c5c6 <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
    c5ba:	6e41      	ldr	r1, [r0, #100]	; 0x64
    c5bc:	3160      	adds	r1, #96	; 0x60
    c5be:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
    c5c0:	6e81      	ldr	r1, [r0, #104]	; 0x68
    c5c2:	3960      	subs	r1, #96	; 0x60
    c5c4:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    c5c6:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    c5ca:	9b02      	ldr	r3, [sp, #8]
    c5cc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    c5d0:	9b03      	ldr	r3, [sp, #12]
    c5d2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->pc &= 0xfffffffe;
    c5d6:	490d      	ldr	r1, [pc, #52]	; (c60c <arch_new_thread+0x5c>)
	iframe->a4 = (uint32_t)p3;
    c5d8:	9b04      	ldr	r3, [sp, #16]
    c5da:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    c5de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c5e2:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    c5e6:	f021 0101 	bic.w	r1, r1, #1
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    c5ea:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
    c5ec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    c5f0:	3a20      	subs	r2, #32
	thread->arch.basepri = 0;
    c5f2:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    c5f4:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
    c5f8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    c5fa:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    c5fe:	b11c      	cbz	r4, c608 <arch_new_thread+0x58>
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    c600:	f64f 5308 	movw	r3, #64776	; 0xfd08
    c604:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    c608:	bd10      	pop	{r4, pc}
    c60a:	bf00      	nop
    c60c:	0001528b 	.word	0x0001528b

0000c610 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
    c610:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    c612:	7b01      	ldrb	r1, [r0, #12]
    c614:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    c618:	4a17      	ldr	r2, [pc, #92]	; (c678 <z_arm_mpu_stack_guard_and_fpu_adjust+0x68>)
    c61a:	f011 0f02 	tst.w	r1, #2
    c61e:	f003 0508 	and.w	r5, r3, #8
    c622:	d103      	bne.n	c62c <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
    c624:	f890 40bd 	ldrb.w	r4, [r0, #189]	; 0xbd
    c628:	06e4      	lsls	r4, r4, #27
    c62a:	d413      	bmi.n	c654 <z_arm_mpu_stack_guard_and_fpu_adjust+0x44>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
    c62c:	6854      	ldr	r4, [r2, #4]
    c62e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    c632:	6054      	str	r4, [r2, #4]
		if ((thread->arch.mode &
    c634:	b94d      	cbnz	r5, c64a <z_arm_mpu_stack_guard_and_fpu_adjust+0x3a>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    c636:	f043 0308 	orr.w	r3, r3, #8
    c63a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
    c63e:	6e43      	ldr	r3, [r0, #100]	; 0x64
    c640:	3360      	adds	r3, #96	; 0x60
    c642:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
    c644:	6e83      	ldr	r3, [r0, #104]	; 0x68
    c646:	3b60      	subs	r3, #96	; 0x60
    c648:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
    c64a:	f041 0102 	orr.w	r1, r1, #2
    c64e:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
    c650:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
    c652:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
    c654:	6851      	ldr	r1, [r2, #4]
    c656:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
    c65a:	6051      	str	r1, [r2, #4]
		if ((thread->arch.mode &
    c65c:	b14d      	cbz	r5, c672 <z_arm_mpu_stack_guard_and_fpu_adjust+0x62>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    c65e:	f023 0308 	bic.w	r3, r3, #8
    c662:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
    c666:	6e43      	ldr	r3, [r0, #100]	; 0x64
    c668:	3b60      	subs	r3, #96	; 0x60
    c66a:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
    c66c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    c66e:	3360      	adds	r3, #96	; 0x60
    c670:	6683      	str	r3, [r0, #104]	; 0x68
	return MPU_GUARD_ALIGN_AND_SIZE;
    c672:	2020      	movs	r0, #32
    c674:	e7ed      	b.n	c652 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
    c676:	bf00      	nop
    c678:	e000ef30 	.word	0xe000ef30

0000c67c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    c67c:	4b0f      	ldr	r3, [pc, #60]	; (c6bc <z_check_thread_stack_fail+0x40>)
{
    c67e:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    c680:	6898      	ldr	r0, [r3, #8]
{
    c682:	b510      	push	{r4, lr}

	if (thread == NULL) {
    c684:	b1c0      	cbz	r0, c6b8 <z_check_thread_stack_fail+0x3c>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
    c686:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    c68a:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
    c68c:	f013 0f08 	tst.w	r3, #8
    c690:	bf14      	ite	ne
    c692:	2480      	movne	r4, #128	; 0x80
    c694:	2420      	moveq	r4, #32
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    c696:	f112 0f16 	cmn.w	r2, #22
    c69a:	d004      	beq.n	c6a6 <z_check_thread_stack_fail+0x2a>
    c69c:	1b03      	subs	r3, r0, r4
    c69e:	4293      	cmp	r3, r2
    c6a0:	d806      	bhi.n	c6b0 <z_check_thread_stack_fail+0x34>
    c6a2:	4282      	cmp	r2, r0
    c6a4:	d204      	bcs.n	c6b0 <z_check_thread_stack_fail+0x34>
    c6a6:	4281      	cmp	r1, r0
    c6a8:	bf2c      	ite	cs
    c6aa:	2100      	movcs	r1, #0
    c6ac:	2101      	movcc	r1, #1
    c6ae:	e000      	b.n	c6b2 <z_check_thread_stack_fail+0x36>
    c6b0:	2100      	movs	r1, #0
    c6b2:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    c6b4:	bf08      	it	eq
    c6b6:	2000      	moveq	r0, #0
}
    c6b8:	bd10      	pop	{r4, pc}
    c6ba:	bf00      	nop
    c6bc:	20001854 	.word	0x20001854

0000c6c0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    c6c0:	4614      	mov	r4, r2
    c6c2:	b508      	push	{r3, lr}
    c6c4:	460d      	mov	r5, r1
    c6c6:	2200      	movs	r2, #0
    c6c8:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    c6cc:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    c6d0:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    c6d4:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
    c6d8:	f3bf 8f6f 	isb	sy
    c6dc:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    c6e0:	4a08      	ldr	r2, [pc, #32]	; (c704 <arch_switch_to_main_thread+0x44>)
    c6e2:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    c6e4:	f000 f9da 	bl	ca9c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c6e8:	4620      	mov	r0, r4
    c6ea:	f385 8809 	msr	PSP, r5
    c6ee:	2100      	movs	r1, #0
    c6f0:	b663      	cpsie	if
    c6f2:	f381 8811 	msr	BASEPRI, r1
    c6f6:	f3bf 8f6f 	isb	sy
    c6fa:	2200      	movs	r2, #0
    c6fc:	2300      	movs	r3, #0
    c6fe:	f008 fdc4 	bl	1528a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    c702:	bf00      	nop
    c704:	20001854 	.word	0x20001854

0000c708 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    c708:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    c70a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c70c:	4a0b      	ldr	r2, [pc, #44]	; (c73c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    c70e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    c710:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    c712:	bf1e      	ittt	ne
	movne	r1, #0
    c714:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    c716:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    c718:	f009 fb11 	blne	15d3e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    c71c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    c71e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    c722:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    c726:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    c72a:	4905      	ldr	r1, [pc, #20]	; (c740 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    c72c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    c72e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    c730:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    c732:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    c736:	4903      	ldr	r1, [pc, #12]	; (c744 <_isr_wrapper+0x3c>)
	bx r1
    c738:	4708      	bx	r1
    c73a:	0000      	.short	0x0000
	ldr r2, =_kernel
    c73c:	20001854 	.word	0x20001854
	ldr r1, =_sw_isr_table
    c740:	00016e28 	.word	0x00016e28
	ldr r1, =z_arm_int_exit
    c744:	0000c749 	.word	0x0000c749

0000c748 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    c748:	4b04      	ldr	r3, [pc, #16]	; (c75c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    c74a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    c74c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    c74e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    c750:	d003      	beq.n	c75a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    c752:	4903      	ldr	r1, [pc, #12]	; (c760 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    c754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    c758:	600a      	str	r2, [r1, #0]

0000c75a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    c75a:	4770      	bx	lr
	ldr r3, =_kernel
    c75c:	20001854 	.word	0x20001854
	ldr r1, =_SCS_ICSR
    c760:	e000ed04 	.word	0xe000ed04

0000c764 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    c764:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c766:	4b1c      	ldr	r3, [pc, #112]	; (c7d8 <mem_manage_fault+0x74>)
{
    c768:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    c76a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    c76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    c76e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c770:	0792      	lsls	r2, r2, #30
    c772:	d520      	bpl.n	c7b6 <mem_manage_fault+0x52>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    c774:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    c776:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    c778:	062d      	lsls	r5, r5, #24
    c77a:	d51c      	bpl.n	c7b6 <mem_manage_fault+0x52>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    c77c:	b119      	cbz	r1, c786 <mem_manage_fault+0x22>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    c77e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    c780:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    c784:	6299      	str	r1, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    c786:	6a99      	ldr	r1, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c788:	6a99      	ldr	r1, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c78a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    c78c:	06c9      	lsls	r1, r1, #27
    c78e:	d415      	bmi.n	c7bc <mem_manage_fault+0x58>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    c790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    c792:	079d      	lsls	r5, r3, #30
    c794:	d412      	bmi.n	c7bc <mem_manage_fault+0x58>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c796:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    c798:	4b0f      	ldr	r3, [pc, #60]	; (c7d8 <mem_manage_fault+0x74>)
    c79a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c79c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    c79e:	bf42      	ittt	mi
    c7a0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    c7a2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    c7a6:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    c7a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c7aa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    c7ae:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    c7b0:	2300      	movs	r3, #0
    c7b2:	7023      	strb	r3, [r4, #0]

	return reason;
}
    c7b4:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    c7b6:	f06f 0215 	mvn.w	r2, #21
    c7ba:	e7e4      	b.n	c786 <mem_manage_fault+0x22>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    c7bc:	4b06      	ldr	r3, [pc, #24]	; (c7d8 <mem_manage_fault+0x74>)
    c7be:	685b      	ldr	r3, [r3, #4]
    c7c0:	0519      	lsls	r1, r3, #20
    c7c2:	d5e8      	bpl.n	c796 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    c7c4:	4601      	mov	r1, r0
    c7c6:	4610      	mov	r0, r2
    c7c8:	f7ff ff58 	bl	c67c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    c7cc:	2800      	cmp	r0, #0
    c7ce:	d0e2      	beq.n	c796 <mem_manage_fault+0x32>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    c7d0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    c7d4:	2002      	movs	r0, #2
    c7d6:	e7df      	b.n	c798 <mem_manage_fault+0x34>
    c7d8:	e000ed00 	.word	0xe000ed00

0000c7dc <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    c7dc:	4b0d      	ldr	r3, [pc, #52]	; (c814 <bus_fault.isra.0+0x38>)
    c7de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    c7e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    c7e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c7e4:	0592      	lsls	r2, r2, #22
    c7e6:	d508      	bpl.n	c7fa <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    c7e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    c7ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c7ec:	0412      	lsls	r2, r2, #16
    c7ee:	d504      	bpl.n	c7fa <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    c7f0:	b118      	cbz	r0, c7fa <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    c7f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c7f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    c7f8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    c7fa:	4b06      	ldr	r3, [pc, #24]	; (c814 <bus_fault.isra.0+0x38>)
    c7fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    c7fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c800:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    c802:	bf58      	it	pl
    c804:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c806:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    c808:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    c80a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    c80e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    c810:	7008      	strb	r0, [r1, #0]

	return reason;
}
    c812:	4770      	bx	lr
    c814:	e000ed00 	.word	0xe000ed00

0000c818 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    c818:	4b07      	ldr	r3, [pc, #28]	; (c838 <usage_fault.isra.0+0x20>)
    c81a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    c81c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    c81e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    c820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    c822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    c824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    c826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c828:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    c82c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    c830:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    c832:	2000      	movs	r0, #0
    c834:	4770      	bx	lr
    c836:	bf00      	nop
    c838:	e000ed00 	.word	0xe000ed00

0000c83c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    c83c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c83e:	4b3e      	ldr	r3, [pc, #248]	; (c938 <z_arm_fault+0xfc>)
    c840:	685b      	ldr	r3, [r3, #4]
{
    c842:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    c844:	f3c3 0308 	ubfx	r3, r3, #0, #9
    c848:	2600      	movs	r6, #0
    c84a:	f386 8811 	msr	BASEPRI, r6
    c84e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    c852:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    c856:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    c85a:	d112      	bne.n	c882 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    c85c:	f002 040c 	and.w	r4, r2, #12
    c860:	2c08      	cmp	r4, #8
    c862:	d00e      	beq.n	c882 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    c864:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    c866:	bf4e      	itee	mi
    c868:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
    c86a:	4605      	movpl	r5, r0
			*nested_exc = true;
    c86c:	2601      	movpl	r6, #1
	*recoverable = false;
    c86e:	2200      	movs	r2, #0
    c870:	3b03      	subs	r3, #3
    c872:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    c876:	2b03      	cmp	r3, #3
    c878:	d857      	bhi.n	c92a <z_arm_fault+0xee>
    c87a:	e8df f003 	tbb	[pc, r3]
    c87e:	4e04      	.short	0x4e04
    c880:	4b52      	.short	0x4b52
		return NULL;
    c882:	4635      	mov	r5, r6
    c884:	e7f3      	b.n	c86e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    c886:	4b2c      	ldr	r3, [pc, #176]	; (c938 <z_arm_fault+0xfc>)
    c888:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    c88a:	f014 0402 	ands.w	r4, r4, #2
    c88e:	d14c      	bne.n	c92a <z_arm_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    c890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c892:	2a00      	cmp	r2, #0
    c894:	db18      	blt.n	c8c8 <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c898:	005b      	lsls	r3, r3, #1
    c89a:	d515      	bpl.n	c8c8 <z_arm_fault+0x8c>
	uint16_t fault_insn = *(ret_addr - 1);
    c89c:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    c89e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    c8a2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    c8a6:	429a      	cmp	r2, r3
    c8a8:	d00d      	beq.n	c8c6 <z_arm_fault+0x8a>
		} else if (SCB_MMFSR != 0) {
    c8aa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    c8ae:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    c8b2:	781b      	ldrb	r3, [r3, #0]
    c8b4:	b303      	cbz	r3, c8f8 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    c8b6:	f10d 0207 	add.w	r2, sp, #7
    c8ba:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    c8bc:	4628      	mov	r0, r5
    c8be:	f7ff ff51 	bl	c764 <mem_manage_fault>
    c8c2:	4604      	mov	r4, r0
		break;
    c8c4:	e000      	b.n	c8c8 <z_arm_fault+0x8c>
			reason = esf->basic.r0;
    c8c6:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    c8c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8cc:	b993      	cbnz	r3, c8f4 <z_arm_fault+0xb8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    c8ce:	2268      	movs	r2, #104	; 0x68
    c8d0:	4629      	mov	r1, r5
    c8d2:	a802      	add	r0, sp, #8
    c8d4:	f009 fbbf 	bl	16056 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    c8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8da:	b346      	cbz	r6, c92e <z_arm_fault+0xf2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    c8dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    c8e0:	b922      	cbnz	r2, c8ec <z_arm_fault+0xb0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    c8e2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    c8e6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c8ea:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    c8ec:	a902      	add	r1, sp, #8
    c8ee:	4620      	mov	r0, r4
    c8f0:	f008 fd95 	bl	1541e <z_arm_fatal_error>
}
    c8f4:	b01c      	add	sp, #112	; 0x70
    c8f6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    c8f8:	4b10      	ldr	r3, [pc, #64]	; (c93c <z_arm_fault+0x100>)
    c8fa:	781b      	ldrb	r3, [r3, #0]
    c8fc:	b12b      	cbz	r3, c90a <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    c8fe:	f10d 0107 	add.w	r1, sp, #7
    c902:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    c904:	f7ff ff6a 	bl	c7dc <bus_fault.isra.0>
    c908:	e7db      	b.n	c8c2 <z_arm_fault+0x86>
		} else if (SCB_UFSR != 0) {
    c90a:	4b0d      	ldr	r3, [pc, #52]	; (c940 <z_arm_fault+0x104>)
    c90c:	881b      	ldrh	r3, [r3, #0]
    c90e:	b29b      	uxth	r3, r3
    c910:	2b00      	cmp	r3, #0
    c912:	d0d9      	beq.n	c8c8 <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    c914:	f7ff ff80 	bl	c818 <usage_fault.isra.0>
    c918:	e7d3      	b.n	c8c2 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    c91a:	f10d 0207 	add.w	r2, sp, #7
    c91e:	2100      	movs	r1, #0
    c920:	e7cc      	b.n	c8bc <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
    c922:	f10d 0107 	add.w	r1, sp, #7
    c926:	2000      	movs	r0, #0
    c928:	e7ec      	b.n	c904 <z_arm_fault+0xc8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c92a:	2400      	movs	r4, #0
    c92c:	e7cc      	b.n	c8c8 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    c92e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    c932:	f023 0301 	bic.w	r3, r3, #1
    c936:	e7d8      	b.n	c8ea <z_arm_fault+0xae>
    c938:	e000ed00 	.word	0xe000ed00
    c93c:	e000ed29 	.word	0xe000ed29
    c940:	e000ed2a 	.word	0xe000ed2a

0000c944 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    c944:	4a02      	ldr	r2, [pc, #8]	; (c950 <z_arm_fault_init+0xc>)
    c946:	6953      	ldr	r3, [r2, #20]
    c948:	f043 0310 	orr.w	r3, r3, #16
    c94c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    c94e:	4770      	bx	lr
    c950:	e000ed00 	.word	0xe000ed00

0000c954 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    c954:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    c958:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    c95c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    c95e:	4672      	mov	r2, lr
	bl z_arm_fault
    c960:	f7ff ff6c 	bl	c83c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    c964:	bd01      	pop	{r0, pc}
    c966:	bf00      	nop

0000c968 <z_arm_interrupt_init>:
    c968:	4804      	ldr	r0, [pc, #16]	; (c97c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    c96a:	2300      	movs	r3, #0
    c96c:	2120      	movs	r1, #32
    c96e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    c970:	3301      	adds	r3, #1
    c972:	2b30      	cmp	r3, #48	; 0x30
    c974:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    c978:	d1f9      	bne.n	c96e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    c97a:	4770      	bx	lr
    c97c:	e000e100 	.word	0xe000e100

0000c980 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    c980:	2000      	movs	r0, #0
    msr CONTROL, r0
    c982:	f380 8814 	msr	CONTROL, r0
    isb
    c986:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    c98a:	f00a f9d3 	bl	16d34 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    c98e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    c990:	490d      	ldr	r1, [pc, #52]	; (c9c8 <__start+0x48>)
    str r0, [r1]
    c992:	6008      	str	r0, [r1, #0]
    dsb
    c994:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c998:	480c      	ldr	r0, [pc, #48]	; (c9cc <__start+0x4c>)
    msr msp, r0
    c99a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    c99e:	f000 f829 	bl	c9f4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c9a2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    c9a4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    c9a8:	4809      	ldr	r0, [pc, #36]	; (c9d0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    c9aa:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    c9ae:	1840      	adds	r0, r0, r1
    msr PSP, r0
    c9b0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    c9b4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    c9b8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    c9ba:	4308      	orrs	r0, r1
    msr CONTROL, r0
    c9bc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    c9c0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    c9c4:	f7ff fd54 	bl	c470 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    c9c8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    c9cc:	20004300 	.word	0x20004300
    ldr r0, =z_interrupt_stacks
    c9d0:	20004500 	.word	0x20004500

0000c9d4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    c9d4:	4a06      	ldr	r2, [pc, #24]	; (c9f0 <z_arm_clear_arm_mpu_config+0x1c>)
    c9d6:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    c9d8:	2300      	movs	r3, #0
	int num_regions =
    c9da:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    c9de:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    c9e0:	428b      	cmp	r3, r1
    c9e2:	d100      	bne.n	c9e6 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    c9e4:	4770      	bx	lr
  MPU->RNR = rnr;
    c9e6:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    c9e8:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    c9ea:	3301      	adds	r3, #1
    c9ec:	e7f8      	b.n	c9e0 <z_arm_clear_arm_mpu_config+0xc>
    c9ee:	bf00      	nop
    c9f0:	e000ed90 	.word	0xe000ed90

0000c9f4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    c9f4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    c9f6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    c9f8:	2300      	movs	r3, #0
    c9fa:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    c9fe:	f7ff ffe9 	bl	c9d4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    ca02:	4b14      	ldr	r3, [pc, #80]	; (ca54 <z_arm_init_arch_hw_at_boot+0x60>)
    ca04:	f04f 32ff 	mov.w	r2, #4294967295
    ca08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    ca0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    ca10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    ca14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    ca18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ca1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ca20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    ca24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    ca28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ca2c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    ca30:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    ca34:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    ca38:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    ca3c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    ca40:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    ca44:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    ca48:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    ca4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ca4e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    ca52:	bd08      	pop	{r3, pc}
    ca54:	e000e100 	.word	0xe000e100

0000ca58 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    ca58:	4b08      	ldr	r3, [pc, #32]	; (ca7c <z_impl_k_thread_abort+0x24>)
    ca5a:	689b      	ldr	r3, [r3, #8]
    ca5c:	4283      	cmp	r3, r0
    ca5e:	d10b      	bne.n	ca78 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ca60:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    ca64:	b143      	cbz	r3, ca78 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ca66:	4b06      	ldr	r3, [pc, #24]	; (ca80 <z_impl_k_thread_abort+0x28>)
    ca68:	685a      	ldr	r2, [r3, #4]
    ca6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    ca6e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    ca70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ca72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    ca76:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    ca78:	f002 bc48 	b.w	f30c <z_thread_abort>
    ca7c:	20001854 	.word	0x20001854
    ca80:	e000ed00 	.word	0xe000ed00

0000ca84 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    ca84:	4b02      	ldr	r3, [pc, #8]	; (ca90 <z_arm_configure_static_mpu_regions+0xc>)
    ca86:	4a03      	ldr	r2, [pc, #12]	; (ca94 <z_arm_configure_static_mpu_regions+0x10>)
    ca88:	4803      	ldr	r0, [pc, #12]	; (ca98 <z_arm_configure_static_mpu_regions+0x14>)
    ca8a:	2101      	movs	r1, #1
    ca8c:	f000 b86e 	b.w	cb6c <arm_core_mpu_configure_static_mpu_regions>
    ca90:	20040000 	.word	0x20040000
    ca94:	20000000 	.word	0x20000000
    ca98:	000400b0 	.word	0x000400b0

0000ca9c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    ca9c:	b510      	push	{r4, lr}
    ca9e:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    caa0:	f7ff fdb6 	bl	c610 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    caa4:	6e62      	ldr	r2, [r4, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    caa6:	4b06      	ldr	r3, [pc, #24]	; (cac0 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
    caa8:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
    caaa:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    caae:	4a05      	ldr	r2, [pc, #20]	; (cac4 <z_arm_configure_dynamic_mpu_regions+0x28>)
    cab0:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
    cab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    cab6:	2101      	movs	r1, #1
    cab8:	4618      	mov	r0, r3
    caba:	f000 b861 	b.w	cb80 <arm_core_mpu_configure_dynamic_mpu_regions>
    cabe:	bf00      	nop
    cac0:	200016fc 	.word	0x200016fc
    cac4:	150b0000 	.word	0x150b0000

0000cac8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    caca:	4f1e      	ldr	r7, [pc, #120]	; (cb44 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    cacc:	2600      	movs	r6, #0
    cace:	428e      	cmp	r6, r1
    cad0:	db01      	blt.n	cad6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    cad2:	4610      	mov	r0, r2
    cad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    cad6:	6844      	ldr	r4, [r0, #4]
    cad8:	b384      	cbz	r4, cb3c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    cada:	b153      	cbz	r3, caf2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    cadc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    cae0:	ea14 0f0c 	tst.w	r4, ip
    cae4:	d118      	bne.n	cb18 <mpu_configure_regions+0x50>
		&&
    cae6:	2c1f      	cmp	r4, #31
    cae8:	d916      	bls.n	cb18 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    caea:	6805      	ldr	r5, [r0, #0]
		&&
    caec:	ea1c 0f05 	tst.w	ip, r5
    caf0:	d112      	bne.n	cb18 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    caf2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    caf4:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    caf6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    cafa:	b2d2      	uxtb	r2, r2
    cafc:	d90f      	bls.n	cb1e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    cafe:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    cb02:	d80e      	bhi.n	cb22 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    cb04:	3c01      	subs	r4, #1
    cb06:	fab4 f484 	clz	r4, r4
    cb0a:	f1c4 041f 	rsb	r4, r4, #31
    cb0e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    cb10:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    cb12:	ea4c 0404 	orr.w	r4, ip, r4
    cb16:	d906      	bls.n	cb26 <mpu_configure_regions+0x5e>
			return -EINVAL;
    cb18:	f06f 0215 	mvn.w	r2, #21
    cb1c:	e7d9      	b.n	cad2 <mpu_configure_regions+0xa>
		return REGION_32B;
    cb1e:	2408      	movs	r4, #8
    cb20:	e7f6      	b.n	cb10 <mpu_configure_regions+0x48>
		return REGION_4G;
    cb22:	243e      	movs	r4, #62	; 0x3e
    cb24:	e7f4      	b.n	cb10 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    cb26:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    cb2a:	4315      	orrs	r5, r2
    cb2c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    cb30:	f044 0401 	orr.w	r4, r4, #1
    cb34:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    cb36:	60fd      	str	r5, [r7, #12]
		reg_index++;
    cb38:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    cb3a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    cb3c:	3601      	adds	r6, #1
    cb3e:	300c      	adds	r0, #12
    cb40:	e7c5      	b.n	cace <mpu_configure_regions+0x6>
    cb42:	bf00      	nop
    cb44:	e000ed90 	.word	0xe000ed90

0000cb48 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    cb48:	4b03      	ldr	r3, [pc, #12]	; (cb58 <arm_core_mpu_enable+0x10>)
    cb4a:	2205      	movs	r2, #5
    cb4c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    cb4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cb52:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    cb56:	4770      	bx	lr
    cb58:	e000ed90 	.word	0xe000ed90

0000cb5c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    cb5c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    cb60:	4b01      	ldr	r3, [pc, #4]	; (cb68 <arm_core_mpu_disable+0xc>)
    cb62:	2200      	movs	r2, #0
    cb64:	605a      	str	r2, [r3, #4]
}
    cb66:	4770      	bx	lr
    cb68:	e000ed90 	.word	0xe000ed90

0000cb6c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    cb6c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    cb6e:	4c03      	ldr	r4, [pc, #12]	; (cb7c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    cb70:	2301      	movs	r3, #1
    cb72:	7822      	ldrb	r2, [r4, #0]
    cb74:	f7ff ffa8 	bl	cac8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    cb78:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    cb7a:	bd10      	pop	{r4, pc}
    cb7c:	20001e75 	.word	0x20001e75

0000cb80 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    cb80:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    cb82:	4a08      	ldr	r2, [pc, #32]	; (cba4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    cb84:	2300      	movs	r3, #0
    cb86:	7812      	ldrb	r2, [r2, #0]
    cb88:	f7ff ff9e 	bl	cac8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    cb8c:	f110 0f16 	cmn.w	r0, #22
    cb90:	d003      	beq.n	cb9a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    cb92:	4b05      	ldr	r3, [pc, #20]	; (cba8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    cb94:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    cb96:	2807      	cmp	r0, #7
    cb98:	dd00      	ble.n	cb9c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    cb9a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    cb9c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    cb9e:	611a      	str	r2, [r3, #16]
    cba0:	3001      	adds	r0, #1
    cba2:	e7f8      	b.n	cb96 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    cba4:	20001e75 	.word	0x20001e75
    cba8:	e000ed90 	.word	0xe000ed90

0000cbac <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    cbac:	4913      	ldr	r1, [pc, #76]	; (cbfc <z_arm_mpu_init+0x50>)
    cbae:	6808      	ldr	r0, [r1, #0]
    cbb0:	2808      	cmp	r0, #8
{
    cbb2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    cbb4:	d81e      	bhi.n	cbf4 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    cbb6:	f7ff ffd1 	bl	cb5c <arm_core_mpu_disable>
    cbba:	4c11      	ldr	r4, [pc, #68]	; (cc00 <z_arm_mpu_init+0x54>)
    cbbc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    cbbe:	2200      	movs	r2, #0
    cbc0:	4290      	cmp	r0, r2
    cbc2:	f101 010c 	add.w	r1, r1, #12
    cbc6:	d105      	bne.n	cbd4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    cbc8:	4b0e      	ldr	r3, [pc, #56]	; (cc04 <z_arm_mpu_init+0x58>)
    cbca:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    cbcc:	f7ff ffbc 	bl	cb48 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    cbd0:	2000      	movs	r0, #0
}
    cbd2:	bd10      	pop	{r4, pc}
    cbd4:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    cbd6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    cbda:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    cbde:	4313      	orrs	r3, r2
    cbe0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    cbe4:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    cbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    cbea:	f043 0301 	orr.w	r3, r3, #1
    cbee:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    cbf0:	3201      	adds	r2, #1
    cbf2:	e7e5      	b.n	cbc0 <z_arm_mpu_init+0x14>
		return -1;
    cbf4:	f04f 30ff 	mov.w	r0, #4294967295
    cbf8:	e7eb      	b.n	cbd2 <z_arm_mpu_init+0x26>
    cbfa:	bf00      	nop
    cbfc:	000400bc 	.word	0x000400bc
    cc00:	e000ed90 	.word	0xe000ed90
    cc04:	20001e75 	.word	0x20001e75

0000cc08 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    cc08:	4b01      	ldr	r3, [pc, #4]	; (cc10 <__stdout_hook_install+0x8>)
    cc0a:	6018      	str	r0, [r3, #0]
}
    cc0c:	4770      	bx	lr
    cc0e:	bf00      	nop
    cc10:	2000029c 	.word	0x2000029c

0000cc14 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    cc16:	4f08      	ldr	r7, [pc, #32]	; (cc38 <z_impl_zephyr_read_stdin+0x24>)
{
    cc18:	4606      	mov	r6, r0
    cc1a:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    cc1c:	2400      	movs	r4, #0
    cc1e:	42ac      	cmp	r4, r5
    cc20:	da08      	bge.n	cc34 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    cc22:	683b      	ldr	r3, [r7, #0]
    cc24:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    cc26:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    cc28:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    cc2a:	f104 0401 	add.w	r4, r4, #1
    cc2e:	d001      	beq.n	cc34 <z_impl_zephyr_read_stdin+0x20>
    cc30:	280d      	cmp	r0, #13
    cc32:	d1f4      	bne.n	cc1e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    cc34:	4620      	mov	r0, r4
    cc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc38:	20000298 	.word	0x20000298

0000cc3c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc3e:	4f0a      	ldr	r7, [pc, #40]	; (cc68 <z_impl_zephyr_write_stdout+0x2c>)
    cc40:	460d      	mov	r5, r1
    cc42:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    cc44:	f1c0 0401 	rsb	r4, r0, #1
    cc48:	19a3      	adds	r3, r4, r6
    cc4a:	429d      	cmp	r5, r3
    cc4c:	dc01      	bgt.n	cc52 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    cc4e:	4628      	mov	r0, r5
    cc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    cc52:	7873      	ldrb	r3, [r6, #1]
    cc54:	2b0a      	cmp	r3, #10
    cc56:	d102      	bne.n	cc5e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    cc58:	683b      	ldr	r3, [r7, #0]
    cc5a:	200d      	movs	r0, #13
    cc5c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    cc5e:	683b      	ldr	r3, [r7, #0]
    cc60:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    cc64:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    cc66:	e7ef      	b.n	cc48 <z_impl_zephyr_write_stdout+0xc>
    cc68:	2000029c 	.word	0x2000029c

0000cc6c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    cc6c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    cc6e:	4802      	ldr	r0, [pc, #8]	; (cc78 <_exit+0xc>)
    cc70:	2105      	movs	r1, #5
    cc72:	f7ff ffe3 	bl	cc3c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    cc76:	e7fe      	b.n	cc76 <_exit+0xa>
    cc78:	00046c84 	.word	0x00046c84

0000cc7c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    cc7c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    cc7e:	4c07      	ldr	r4, [pc, #28]	; (cc9c <_sbrk+0x20>)
    cc80:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    cc82:	18c2      	adds	r2, r0, r3
    cc84:	4806      	ldr	r0, [pc, #24]	; (cca0 <_sbrk+0x24>)
    cc86:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    cc8a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    cc8e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    cc90:	bf3a      	itte	cc
    cc92:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    cc94:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    cc96:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
    cc9a:	bd10      	pop	{r4, pc}
    cc9c:	20001708 	.word	0x20001708
    cca0:	20004d80 	.word	0x20004d80

0000cca4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    cca4:	f04f 0320 	mov.w	r3, #32
    cca8:	f3ef 8111 	mrs	r1, BASEPRI
    ccac:	f383 8812 	msr	BASEPRI_MAX, r3
    ccb0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    ccb4:	4a0f      	ldr	r2, [pc, #60]	; (ccf4 <nordicsemi_nrf52_init+0x50>)
    ccb6:	2301      	movs	r3, #1
    ccb8:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    ccbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    ccc0:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ccc4:	4a0c      	ldr	r2, [pc, #48]	; (ccf8 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    ccc6:	6812      	ldr	r2, [r2, #0]
    ccc8:	2a08      	cmp	r2, #8
    ccca:	d108      	bne.n	ccde <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cccc:	4a0b      	ldr	r2, [pc, #44]	; (ccfc <nordicsemi_nrf52_init+0x58>)
    ccce:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    ccd0:	2a05      	cmp	r2, #5
    ccd2:	d804      	bhi.n	ccde <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    ccd4:	480a      	ldr	r0, [pc, #40]	; (cd00 <nordicsemi_nrf52_init+0x5c>)
    ccd6:	5c82      	ldrb	r2, [r0, r2]
    ccd8:	b10a      	cbz	r2, ccde <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    ccda:	4a0a      	ldr	r2, [pc, #40]	; (cd04 <nordicsemi_nrf52_init+0x60>)
    ccdc:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    ccde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cce2:	2201      	movs	r2, #1
    cce4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    cce8:	f381 8811 	msr	BASEPRI, r1
    ccec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    ccf0:	2000      	movs	r0, #0
    ccf2:	4770      	bx	lr
    ccf4:	4001e000 	.word	0x4001e000
    ccf8:	10000130 	.word	0x10000130
    ccfc:	10000134 	.word	0x10000134
    cd00:	00046c99 	.word	0x00046c99
    cd04:	40000638 	.word	0x40000638

0000cd08 <sys_arch_reboot>:
    *p_gpregret = val;
    cd08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cd0c:	b2c0      	uxtb	r0, r0
    cd0e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    cd12:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    cd16:	4905      	ldr	r1, [pc, #20]	; (cd2c <sys_arch_reboot+0x24>)
    cd18:	4b05      	ldr	r3, [pc, #20]	; (cd30 <sys_arch_reboot+0x28>)
    cd1a:	68ca      	ldr	r2, [r1, #12]
    cd1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    cd20:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    cd22:	60cb      	str	r3, [r1, #12]
    cd24:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    cd28:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    cd2a:	e7fd      	b.n	cd28 <sys_arch_reboot+0x20>
    cd2c:	e000ed00 	.word	0xe000ed00
    cd30:	05fa0004 	.word	0x05fa0004

0000cd34 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    cd34:	b120      	cbz	r0, cd40 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    cd36:	4b03      	ldr	r3, [pc, #12]	; (cd44 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    cd38:	0180      	lsls	r0, r0, #6
    cd3a:	f043 0301 	orr.w	r3, r3, #1
    cd3e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    cd40:	4770      	bx	lr
    cd42:	bf00      	nop
    cd44:	00017a50 	.word	0x00017a50

0000cd48 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    cd48:	4b0d      	ldr	r3, [pc, #52]	; (cd80 <onoff_stop+0x38>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    cd4a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    cd4c:	1ac5      	subs	r5, r0, r3
{
    cd4e:	4604      	mov	r4, r0
    cd50:	f3c5 1547 	ubfx	r5, r5, #5, #8
	err = set_off_state(&subdata->flags, ctx);
    cd54:	200c      	movs	r0, #12
    cd56:	fb00 3005 	mla	r0, r0, r5, r3
{
    cd5a:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    cd5c:	3048      	adds	r0, #72	; 0x48
    cd5e:	2140      	movs	r1, #64	; 0x40
    cd60:	f008 fbc4 	bl	154ec <set_off_state>
	if (err < 0) {
    cd64:	1e01      	subs	r1, r0, #0
    cd66:	db05      	blt.n	cd74 <onoff_stop+0x2c>
	get_sub_config(dev, type)->stop();
    cd68:	4b06      	ldr	r3, [pc, #24]	; (cd84 <onoff_stop+0x3c>)
    cd6a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    cd6e:	686b      	ldr	r3, [r5, #4]
    cd70:	4798      	blx	r3
	return 0;
    cd72:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    cd74:	4620      	mov	r0, r4
    cd76:	4633      	mov	r3, r6
}
    cd78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    cd7c:	4718      	bx	r3
    cd7e:	bf00      	nop
    cd80:	2000171c 	.word	0x2000171c
    cd84:	000400f4 	.word	0x000400f4

0000cd88 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    cd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    cd8c:	4c10      	ldr	r4, [pc, #64]	; (cdd0 <onoff_start+0x48>)
    cd8e:	1b07      	subs	r7, r0, r4
    cd90:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    cd94:	f04f 080c 	mov.w	r8, #12
    cd98:	fb08 f807 	mul.w	r8, r8, r7
{
    cd9c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    cd9e:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    cda2:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    cda4:	4420      	add	r0, r4
    cda6:	2140      	movs	r1, #64	; 0x40
    cda8:	f008 fbb9 	bl	1551e <set_starting_state>
	if (err < 0) {
    cdac:	1e01      	subs	r1, r0, #0
    cdae:	db09      	blt.n	cdc4 <onoff_start+0x3c>
	subdata->cb = cb;
    cdb0:	4b08      	ldr	r3, [pc, #32]	; (cdd4 <onoff_start+0x4c>)
    cdb2:	4444      	add	r4, r8
	subdata->user_data = user_data;
    cdb4:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    cdb8:	4b07      	ldr	r3, [pc, #28]	; (cdd8 <onoff_start+0x50>)
    cdba:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    cdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    cdc2:	4718      	bx	r3
		notify(mgr, err);
    cdc4:	4630      	mov	r0, r6
    cdc6:	462b      	mov	r3, r5
}
    cdc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    cdcc:	4718      	bx	r3
    cdce:	bf00      	nop
    cdd0:	2000171c 	.word	0x2000171c
    cdd4:	00015581 	.word	0x00015581
    cdd8:	000400f4 	.word	0x000400f4

0000cddc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cddc:	2200      	movs	r2, #0
{
    cdde:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cde0:	2101      	movs	r1, #1
{
    cde2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    cde4:	4610      	mov	r0, r2
    cde6:	f7ff fb27 	bl	c438 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    cdea:	480f      	ldr	r0, [pc, #60]	; (ce28 <clk_init+0x4c>)
    cdec:	f001 f880 	bl	def0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    cdf0:	4b0e      	ldr	r3, [pc, #56]	; (ce2c <clk_init+0x50>)
    cdf2:	4298      	cmp	r0, r3
    cdf4:	d115      	bne.n	ce22 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    cdf6:	f008 fec0 	bl	15b7a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    cdfa:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    cdfc:	490c      	ldr	r1, [pc, #48]	; (ce30 <clk_init+0x54>)
    cdfe:	4630      	mov	r0, r6
    ce00:	f008 f9e7 	bl	151d2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    ce04:	2800      	cmp	r0, #0
    ce06:	db0b      	blt.n	ce20 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ce08:	2501      	movs	r5, #1
    ce0a:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    ce0c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    ce0e:	4908      	ldr	r1, [pc, #32]	; (ce30 <clk_init+0x54>)
    ce10:	f104 0020 	add.w	r0, r4, #32
    ce14:	f008 f9dd 	bl	151d2 <onoff_manager_init>
		if (err < 0) {
    ce18:	2800      	cmp	r0, #0
    ce1a:	db01      	blt.n	ce20 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ce1c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    ce1e:	2000      	movs	r0, #0
}
    ce20:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ce22:	f06f 0004 	mvn.w	r0, #4
    ce26:	e7fb      	b.n	ce20 <clk_init+0x44>
    ce28:	0000ce71 	.word	0x0000ce71
    ce2c:	0bad0000 	.word	0x0bad0000
    ce30:	00040104 	.word	0x00040104

0000ce34 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    ce34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    ce36:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    ce38:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    ce3a:	480b      	ldr	r0, [pc, #44]	; (ce68 <clkstarted_handle.constprop.0+0x34>)
    ce3c:	434b      	muls	r3, r1
    ce3e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    ce40:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    ce44:	2600      	movs	r6, #0
	set_on_state(&sub_data->flags);
    ce46:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    ce48:	6426      	str	r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    ce4a:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    ce4c:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    ce4e:	f008 fb84 	bl	1555a <set_on_state>
	if (callback) {
    ce52:	b135      	cbz	r5, ce62 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    ce54:	9a01      	ldr	r2, [sp, #4]
    ce56:	4805      	ldr	r0, [pc, #20]	; (ce6c <clkstarted_handle.constprop.0+0x38>)
    ce58:	462b      	mov	r3, r5
}
    ce5a:	b002      	add	sp, #8
    ce5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    ce60:	4718      	bx	r3
}
    ce62:	b002      	add	sp, #8
    ce64:	bd70      	pop	{r4, r5, r6, pc}
    ce66:	bf00      	nop
    ce68:	2000171c 	.word	0x2000171c
    ce6c:	00016db0 	.word	0x00016db0

0000ce70 <clock_event_handler>:
	switch (event) {
    ce70:	b110      	cbz	r0, ce78 <clock_event_handler+0x8>
    ce72:	2801      	cmp	r0, #1
    ce74:	d004      	beq.n	ce80 <clock_event_handler+0x10>
    ce76:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    ce78:	4b03      	ldr	r3, [pc, #12]	; (ce88 <clock_event_handler+0x18>)
    ce7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ce7c:	075b      	lsls	r3, r3, #29
    ce7e:	d101      	bne.n	ce84 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    ce80:	f7ff bfd8 	b.w	ce34 <clkstarted_handle.constprop.0>
}
    ce84:	4770      	bx	lr
    ce86:	bf00      	nop
    ce88:	2000171c 	.word	0x2000171c

0000ce8c <generic_hfclk_start>:
{
    ce8c:	b508      	push	{r3, lr}
	__asm__ volatile(
    ce8e:	f04f 0320 	mov.w	r3, #32
    ce92:	f3ef 8111 	mrs	r1, BASEPRI
    ce96:	f383 8812 	msr	BASEPRI_MAX, r3
    ce9a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    ce9e:	4a12      	ldr	r2, [pc, #72]	; (cee8 <generic_hfclk_start+0x5c>)
    cea0:	6813      	ldr	r3, [r2, #0]
    cea2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    cea6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    ceaa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    ceac:	d00c      	beq.n	cec8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ceae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    ceb2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ceb6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    ceba:	f013 0301 	ands.w	r3, r3, #1
    cebe:	d003      	beq.n	cec8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    cec0:	480a      	ldr	r0, [pc, #40]	; (ceec <generic_hfclk_start+0x60>)
    cec2:	f008 fb4a 	bl	1555a <set_on_state>
			already_started = true;
    cec6:	2301      	movs	r3, #1
	__asm__ volatile(
    cec8:	f381 8811 	msr	BASEPRI, r1
    cecc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    ced0:	b123      	cbz	r3, cedc <generic_hfclk_start+0x50>
}
    ced2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    ced6:	2000      	movs	r0, #0
    ced8:	f7ff bfac 	b.w	ce34 <clkstarted_handle.constprop.0>
}
    cedc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    cee0:	2001      	movs	r0, #1
    cee2:	f001 b815 	b.w	df10 <nrfx_clock_start>
    cee6:	bf00      	nop
    cee8:	20001774 	.word	0x20001774
    ceec:	20001764 	.word	0x20001764

0000cef0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cef0:	4b09      	ldr	r3, [pc, #36]	; (cf18 <generic_hfclk_stop+0x28>)
    cef2:	f3bf 8f5b 	dmb	ish
    cef6:	e853 2f00 	ldrex	r2, [r3]
    cefa:	f022 0102 	bic.w	r1, r2, #2
    cefe:	e843 1000 	strex	r0, r1, [r3]
    cf02:	2800      	cmp	r0, #0
    cf04:	d1f7      	bne.n	cef6 <generic_hfclk_stop+0x6>
    cf06:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    cf0a:	07d3      	lsls	r3, r2, #31
    cf0c:	d402      	bmi.n	cf14 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    cf0e:	2001      	movs	r0, #1
    cf10:	f008 be40 	b.w	15b94 <nrfx_clock_stop>
}
    cf14:	4770      	bx	lr
    cf16:	bf00      	nop
    cf18:	20001774 	.word	0x20001774

0000cf1c <api_blocking_start>:
{
    cf1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    cf1e:	2200      	movs	r2, #0
    cf20:	2301      	movs	r3, #1
    cf22:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    cf26:	4a09      	ldr	r2, [pc, #36]	; (cf4c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    cf28:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    cf2c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    cf2e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    cf32:	f008 fb48 	bl	155c6 <api_start>
	if (err < 0) {
    cf36:	2800      	cmp	r0, #0
    cf38:	db05      	blt.n	cf46 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    cf3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    cf3e:	2300      	movs	r3, #0
    cf40:	4668      	mov	r0, sp
    cf42:	f001 feaf 	bl	eca4 <z_impl_k_sem_take>
}
    cf46:	b005      	add	sp, #20
    cf48:	f85d fb04 	ldr.w	pc, [sp], #4
    cf4c:	00015599 	.word	0x00015599

0000cf50 <z_nrf_clock_control_lf_on>:
{
    cf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cf54:	493a      	ldr	r1, [pc, #232]	; (d040 <z_nrf_clock_control_lf_on+0xf0>)
    cf56:	f3bf 8f5b 	dmb	ish
    cf5a:	4606      	mov	r6, r0
    cf5c:	2201      	movs	r2, #1
    cf5e:	e851 3f00 	ldrex	r3, [r1]
    cf62:	e841 2000 	strex	r0, r2, [r1]
    cf66:	2800      	cmp	r0, #0
    cf68:	d1f9      	bne.n	cf5e <z_nrf_clock_control_lf_on+0xe>
    cf6a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    cf6e:	b933      	cbnz	r3, cf7e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    cf70:	4934      	ldr	r1, [pc, #208]	; (d044 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    cf72:	4835      	ldr	r0, [pc, #212]	; (d048 <z_nrf_clock_control_lf_on+0xf8>)
    cf74:	604b      	str	r3, [r1, #4]
    cf76:	60cb      	str	r3, [r1, #12]
    cf78:	608a      	str	r2, [r1, #8]
    cf7a:	f008 f93d 	bl	151f8 <onoff_request>
	switch (start_mode) {
    cf7e:	1e73      	subs	r3, r6, #1
    cf80:	2b01      	cmp	r3, #1
    cf82:	d832      	bhi.n	cfea <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    cf84:	2e01      	cmp	r6, #1
    cf86:	d107      	bne.n	cf98 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    cf88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cf8c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    cf90:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    cf94:	2b01      	cmp	r3, #1
    cf96:	d028      	beq.n	cfea <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    cf98:	f008 fecb 	bl	15d32 <k_is_in_isr>
    cf9c:	4604      	mov	r4, r0
    cf9e:	b918      	cbnz	r0, cfa8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    cfa0:	4b2a      	ldr	r3, [pc, #168]	; (d04c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    cfa2:	781b      	ldrb	r3, [r3, #0]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d144      	bne.n	d032 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    cfa8:	f04f 0320 	mov.w	r3, #32
    cfac:	f3ef 8511 	mrs	r5, BASEPRI
    cfb0:	f383 8812 	msr	BASEPRI_MAX, r3
    cfb4:	f3bf 8f6f 	isb	sy
    cfb8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cfba:	4f25      	ldr	r7, [pc, #148]	; (d050 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cfbc:	f8df 8094 	ldr.w	r8, [pc, #148]	; d054 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cfc0:	f8df 9094 	ldr.w	r9, [pc, #148]	; d058 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cfc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    cfc8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cfcc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    cfd0:	03d2      	lsls	r2, r2, #15
    cfd2:	d50c      	bpl.n	cfee <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    cfd4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    cfd8:	2b01      	cmp	r3, #1
    cfda:	d001      	beq.n	cfe0 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    cfdc:	2e01      	cmp	r6, #1
    cfde:	d106      	bne.n	cfee <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    cfe0:	b30c      	cbz	r4, d026 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    cfe2:	f385 8811 	msr	BASEPRI, r5
    cfe6:	f3bf 8f6f 	isb	sy
}
    cfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    cfee:	b1ac      	cbz	r4, d01c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    cff0:	4628      	mov	r0, r5
    cff2:	f7ff f9f9 	bl	c3e8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    cff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    cffa:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    cffe:	2b00      	cmp	r3, #0
    d000:	d1e0      	bne.n	cfc4 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d002:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    d004:	2900      	cmp	r1, #0
    d006:	d0dd      	beq.n	cfc4 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d008:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d00a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    d00c:	2301      	movs	r3, #1
    d00e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    d012:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d016:	f8c9 3000 	str.w	r3, [r9]
}
    d01a:	e7d3      	b.n	cfc4 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    d01c:	2100      	movs	r1, #0
    d01e:	2021      	movs	r0, #33	; 0x21
    d020:	f002 f954 	bl	f2cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d024:	e7e7      	b.n	cff6 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    d026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d02a:	2202      	movs	r2, #2
    d02c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d030:	e7db      	b.n	cfea <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    d032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d036:	2202      	movs	r2, #2
    d038:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    d03c:	4605      	mov	r5, r0
}
    d03e:	e7bc      	b.n	cfba <z_nrf_clock_control_lf_on+0x6a>
    d040:	20001778 	.word	0x20001778
    d044:	2000170c 	.word	0x2000170c
    d048:	2000173c 	.word	0x2000173c
    d04c:	200022c6 	.word	0x200022c6
    d050:	40000104 	.word	0x40000104
    d054:	e000e100 	.word	0xe000e100
    d058:	40000008 	.word	0x40000008

0000d05c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    d05c:	280a      	cmp	r0, #10
{
    d05e:	b538      	push	{r3, r4, r5, lr}
    d060:	4d06      	ldr	r5, [pc, #24]	; (d07c <console_out+0x20>)
    d062:	4604      	mov	r4, r0
	if ('\n' == c) {
    d064:	d103      	bne.n	d06e <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
    d066:	6828      	ldr	r0, [r5, #0]
    d068:	210d      	movs	r1, #13
    d06a:	f008 fac7 	bl	155fc <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    d06e:	6828      	ldr	r0, [r5, #0]
    d070:	b2e1      	uxtb	r1, r4
    d072:	f008 fac3 	bl	155fc <uart_poll_out>

	return c;
}
    d076:	4620      	mov	r0, r4
    d078:	bd38      	pop	{r3, r4, r5, pc}
    d07a:	bf00      	nop
    d07c:	2000177c 	.word	0x2000177c

0000d080 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    d080:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    d082:	4b08      	ldr	r3, [pc, #32]	; (d0a4 <uart_console_init+0x24>)
    d084:	4808      	ldr	r0, [pc, #32]	; (d0a8 <uart_console_init+0x28>)
    d086:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    d088:	f008 fde4 	bl	15c54 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    d08c:	b138      	cbz	r0, d09e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    d08e:	4807      	ldr	r0, [pc, #28]	; (d0ac <uart_console_init+0x2c>)
    d090:	f7ff fdba 	bl	cc08 <__stdout_hook_install>
	__printk_hook_install(console_out);
    d094:	4805      	ldr	r0, [pc, #20]	; (d0ac <uart_console_init+0x2c>)
    d096:	f7fd ff3f 	bl	af18 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    d09a:	2000      	movs	r0, #0
}
    d09c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    d09e:	f06f 0012 	mvn.w	r0, #18
    d0a2:	e7fb      	b.n	d09c <uart_console_init+0x1c>
    d0a4:	2000177c 	.word	0x2000177c
    d0a8:	00016e10 	.word	0x00016e10
    d0ac:	0000d05d 	.word	0x0000d05d

0000d0b0 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d0b0:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    d0b2:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d0b4:	d002      	beq.n	d0bc <nrfx_gpio_handler+0xc>
    d0b6:	2b01      	cmp	r3, #1
    d0b8:	d01d      	beq.n	d0f6 <nrfx_gpio_handler+0x46>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    d0ba:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d0bc:	4e0f      	ldr	r6, [pc, #60]	; (d0fc <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d0be:	6933      	ldr	r3, [r6, #16]
    d0c0:	6859      	ldr	r1, [r3, #4]
    d0c2:	2900      	cmp	r1, #0
    d0c4:	d0f9      	beq.n	d0ba <nrfx_gpio_handler+0xa>
    d0c6:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    d0c8:	f000 031f 	and.w	r3, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    d0cc:	2501      	movs	r5, #1
    d0ce:	2c00      	cmp	r4, #0
    d0d0:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
    d0d4:	bf38      	it	cc
    d0d6:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    d0d8:	688a      	ldr	r2, [r1, #8]
    d0da:	402a      	ands	r2, r5
    d0dc:	d002      	beq.n	d0e4 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d0de:	684b      	ldr	r3, [r1, #4]
    d0e0:	4630      	mov	r0, r6
    d0e2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d0e4:	2c00      	cmp	r4, #0
    d0e6:	d0e8      	beq.n	d0ba <nrfx_gpio_handler+0xa>
    d0e8:	6823      	ldr	r3, [r4, #0]
    d0ea:	2b00      	cmp	r3, #0
    d0ec:	bf38      	it	cc
    d0ee:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d0f0:	4621      	mov	r1, r4
    d0f2:	461c      	mov	r4, r3
    d0f4:	e7f0      	b.n	d0d8 <nrfx_gpio_handler+0x28>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d0f6:	4e02      	ldr	r6, [pc, #8]	; (d100 <nrfx_gpio_handler+0x50>)
    d0f8:	e7e1      	b.n	d0be <nrfx_gpio_handler+0xe>
    d0fa:	bf00      	nop
    d0fc:	00016dc8 	.word	0x00016dc8
    d100:	00016de0 	.word	0x00016de0

0000d104 <gpio_nrfx_pin_interrupt_configure>:
{
    d104:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d106:	6840      	ldr	r0, [r0, #4]
    d108:	7b04      	ldrb	r4, [r0, #12]
    d10a:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    d10e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d112:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    d116:	b085      	sub	sp, #20
    d118:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    d11c:	d104      	bne.n	d128 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    d11e:	4628      	mov	r0, r5
    d120:	f001 f994 	bl	e44c <nrfx_gpiote_trigger_disable>
	return 0;
    d124:	2000      	movs	r0, #0
    d126:	e032      	b.n	d18e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    d128:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d12c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    d130:	d12f      	bne.n	d192 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d136:	bf0c      	ite	eq
    d138:	2304      	moveq	r3, #4
    d13a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    d13c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    d140:	6883      	ldr	r3, [r0, #8]
    d142:	fa23 f101 	lsr.w	r1, r3, r1
    d146:	07c9      	lsls	r1, r1, #31
    d148:	d42f      	bmi.n	d1aa <gpio_nrfx_pin_interrupt_configure+0xa6>
    d14a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    d14e:	d12c      	bne.n	d1aa <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
    d150:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    d152:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    d154:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    d158:	4a1c      	ldr	r2, [pc, #112]	; (d1cc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d15a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    d15e:	bf18      	it	ne
    d160:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    d168:	07db      	lsls	r3, r3, #31
    d16a:	d41e      	bmi.n	d1aa <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d16c:	f10d 0407 	add.w	r4, sp, #7
    d170:	4621      	mov	r1, r4
    d172:	4628      	mov	r0, r5
    d174:	f001 f8d6 	bl	e324 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    d178:	4b15      	ldr	r3, [pc, #84]	; (d1d0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    d17a:	4298      	cmp	r0, r3
    d17c:	d114      	bne.n	d1a8 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    d17e:	4620      	mov	r0, r4
    d180:	f001 f91a 	bl	e3b8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    d184:	4b13      	ldr	r3, [pc, #76]	; (d1d4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    d186:	4298      	cmp	r0, r3
    d188:	d00e      	beq.n	d1a8 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    d18a:	f06f 000b 	mvn.w	r0, #11
}
    d18e:	b005      	add	sp, #20
    d190:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d192:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    d196:	d005      	beq.n	d1a4 <gpio_nrfx_pin_interrupt_configure+0xa0>
    d198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d19c:	bf0c      	ite	eq
    d19e:	2302      	moveq	r3, #2
    d1a0:	2301      	movne	r3, #1
    d1a2:	e7cb      	b.n	d13c <gpio_nrfx_pin_interrupt_configure+0x38>
    d1a4:	2303      	movs	r3, #3
    d1a6:	e7c9      	b.n	d13c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    d1a8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d1aa:	2300      	movs	r3, #0
    d1ac:	4619      	mov	r1, r3
    d1ae:	aa02      	add	r2, sp, #8
    d1b0:	4628      	mov	r0, r5
    d1b2:	f000 ff95 	bl	e0e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d1b6:	4b07      	ldr	r3, [pc, #28]	; (d1d4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    d1b8:	4298      	cmp	r0, r3
    d1ba:	d104      	bne.n	d1c6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    d1bc:	2101      	movs	r1, #1
    d1be:	4628      	mov	r0, r5
    d1c0:	f001 f900 	bl	e3c4 <nrfx_gpiote_trigger_enable>
    d1c4:	e7ae      	b.n	d124 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    d1c6:	f06f 0004 	mvn.w	r0, #4
    d1ca:	e7e0      	b.n	d18e <gpio_nrfx_pin_interrupt_configure+0x8a>
    d1cc:	50000300 	.word	0x50000300
    d1d0:	0bad0004 	.word	0x0bad0004
    d1d4:	0bad0000 	.word	0x0bad0000

0000d1d8 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d1d8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    d1da:	f001 f8dd 	bl	e398 <nrfx_gpiote_is_init>
    d1de:	4604      	mov	r4, r0
    d1e0:	b968      	cbnz	r0, d1fe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    d1e2:	f001 f8b1 	bl	e348 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    d1e6:	4b08      	ldr	r3, [pc, #32]	; (d208 <gpio_nrfx_init+0x30>)
    d1e8:	4298      	cmp	r0, r3
    d1ea:	d10a      	bne.n	d202 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    d1ec:	4807      	ldr	r0, [pc, #28]	; (d20c <gpio_nrfx_init+0x34>)
    d1ee:	4621      	mov	r1, r4
    d1f0:	f001 f892 	bl	e318 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d1f4:	4622      	mov	r2, r4
    d1f6:	2105      	movs	r1, #5
    d1f8:	2006      	movs	r0, #6
    d1fa:	f7ff f91d 	bl	c438 <z_arm_irq_priority_set>
		return 0;
    d1fe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    d200:	bd10      	pop	{r4, pc}
		return -EIO;
    d202:	f06f 0004 	mvn.w	r0, #4
    d206:	e7fb      	b.n	d200 <gpio_nrfx_init+0x28>
    d208:	0bad0000 	.word	0x0bad0000
    d20c:	0000d0b1 	.word	0x0000d0b1

0000d210 <gpio_nrfx_pin_configure>:
{
    d210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    d214:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d216:	7b3b      	ldrb	r3, [r7, #12]
    d218:	f001 051f 	and.w	r5, r1, #31
{
    d21c:	b085      	sub	sp, #20
    d21e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d220:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    d224:	4614      	mov	r4, r2
    d226:	b9ca      	cbnz	r2, d25c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    d228:	a902      	add	r1, sp, #8
    d22a:	4628      	mov	r0, r5
    d22c:	f001 f87a 	bl	e324 <nrfx_gpiote_channel_get>
    d230:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    d232:	4628      	mov	r0, r5
    d234:	f001 f92c 	bl	e490 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    d238:	4b4a      	ldr	r3, [pc, #296]	; (d364 <gpio_nrfx_pin_configure+0x154>)
    d23a:	4298      	cmp	r0, r3
    d23c:	d004      	beq.n	d248 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    d23e:	f06f 0004 	mvn.w	r0, #4
}
    d242:	b005      	add	sp, #20
    d244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    d248:	4284      	cmp	r4, r0
    d24a:	d105      	bne.n	d258 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    d24c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    d250:	f001 f8ac 	bl	e3ac <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    d254:	42a0      	cmp	r0, r4
    d256:	d1f2      	bne.n	d23e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d258:	2000      	movs	r0, #0
    d25a:	e7f2      	b.n	d242 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    d25c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    d260:	f10d 0103 	add.w	r1, sp, #3
    d264:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    d266:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    d26a:	f001 f85b 	bl	e324 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d26e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    d270:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d272:	aa02      	add	r2, sp, #8
    d274:	4649      	mov	r1, r9
    d276:	4628      	mov	r0, r5
    d278:	f000 ff32 	bl	e0e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d27c:	4b39      	ldr	r3, [pc, #228]	; (d364 <gpio_nrfx_pin_configure+0x154>)
    d27e:	4298      	cmp	r0, r3
    d280:	d002      	beq.n	d288 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    d282:	f06f 0015 	mvn.w	r0, #21
    d286:	e7dc      	b.n	d242 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    d288:	4580      	cmp	r8, r0
    d28a:	d103      	bne.n	d294 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    d28c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d290:	f001 f88c 	bl	e3ac <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    d294:	03a3      	lsls	r3, r4, #14
    d296:	d551      	bpl.n	d33c <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    d298:	f240 6306 	movw	r3, #1542	; 0x606
    d29c:	4023      	ands	r3, r4
    d29e:	f240 2206 	movw	r2, #518	; 0x206
    d2a2:	4293      	cmp	r3, r2
    d2a4:	d03b      	beq.n	d31e <gpio_nrfx_pin_configure+0x10e>
    d2a6:	d80c      	bhi.n	d2c2 <gpio_nrfx_pin_configure+0xb2>
    d2a8:	2b06      	cmp	r3, #6
    d2aa:	d015      	beq.n	d2d8 <gpio_nrfx_pin_configure+0xc8>
    d2ac:	d804      	bhi.n	d2b8 <gpio_nrfx_pin_configure+0xa8>
    d2ae:	b19b      	cbz	r3, d2d8 <gpio_nrfx_pin_configure+0xc8>
    d2b0:	2b02      	cmp	r3, #2
    d2b2:	d1e6      	bne.n	d282 <gpio_nrfx_pin_configure+0x72>
    d2b4:	2304      	movs	r3, #4
    d2b6:	e00f      	b.n	d2d8 <gpio_nrfx_pin_configure+0xc8>
    d2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d2bc:	d1e1      	bne.n	d282 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    d2be:	2301      	movs	r3, #1
    d2c0:	e00a      	b.n	d2d8 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    d2c2:	f240 4202 	movw	r2, #1026	; 0x402
    d2c6:	4293      	cmp	r3, r2
    d2c8:	d02b      	beq.n	d322 <gpio_nrfx_pin_configure+0x112>
    d2ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    d2ce:	d02a      	beq.n	d326 <gpio_nrfx_pin_configure+0x116>
    d2d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    d2d4:	d1d5      	bne.n	d282 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    d2d6:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    d2d8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    d2dc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    d2e0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    d2e4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    d2e6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    d2ea:	bf54      	ite	pl
    d2ec:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    d2f0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d2f2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    d2f4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    d2f8:	d517      	bpl.n	d32a <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	2101      	movs	r1, #1
    d2fe:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    d302:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    d306:	2200      	movs	r2, #0
    d308:	a901      	add	r1, sp, #4
    d30a:	4628      	mov	r0, r5
    d30c:	f000 ff94 	bl	e238 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d310:	4b14      	ldr	r3, [pc, #80]	; (d364 <gpio_nrfx_pin_configure+0x154>)
    d312:	4298      	cmp	r0, r3
    d314:	bf14      	ite	ne
    d316:	f06f 0015 	mvnne.w	r0, #21
    d31a:	2000      	moveq	r0, #0
    d31c:	e791      	b.n	d242 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    d31e:	2307      	movs	r3, #7
    d320:	e7da      	b.n	d2d8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    d322:	2305      	movs	r3, #5
    d324:	e7d8      	b.n	d2d8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    d326:	2303      	movs	r3, #3
    d328:	e7d6      	b.n	d2d8 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    d32a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    d32c:	bf41      	itttt	mi
    d32e:	687b      	ldrmi	r3, [r7, #4]
    d330:	2101      	movmi	r1, #1
    d332:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    d336:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    d33a:	e7e4      	b.n	d306 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    d33c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d33e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    d342:	bf54      	ite	pl
    d344:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    d348:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d34a:	461a      	mov	r2, r3
    d34c:	a901      	add	r1, sp, #4
    d34e:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    d350:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    d354:	f000 fec4 	bl	e0e0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    d358:	4b02      	ldr	r3, [pc, #8]	; (d364 <gpio_nrfx_pin_configure+0x154>)
    d35a:	4298      	cmp	r0, r3
    d35c:	f43f af7c 	beq.w	d258 <gpio_nrfx_pin_configure+0x48>
    d360:	e78f      	b.n	d282 <gpio_nrfx_pin_configure+0x72>
    d362:	bf00      	nop
    d364:	0bad0000 	.word	0x0bad0000

0000d368 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    d368:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    d36a:	794b      	ldrb	r3, [r1, #5]
    d36c:	2b01      	cmp	r3, #1
    d36e:	d026      	beq.n	d3be <uarte_nrfx_configure+0x56>
    d370:	2b03      	cmp	r3, #3
    d372:	d121      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d374:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d376:	798b      	ldrb	r3, [r1, #6]
    d378:	2b03      	cmp	r3, #3
    d37a:	d11d      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    d37c:	79cc      	ldrb	r4, [r1, #7]
    d37e:	b10c      	cbz	r4, d384 <uarte_nrfx_configure+0x1c>
    d380:	2c01      	cmp	r4, #1
    d382:	d119      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    d384:	790a      	ldrb	r2, [r1, #4]
    d386:	b112      	cbz	r2, d38e <uarte_nrfx_configure+0x26>
    d388:	2a02      	cmp	r2, #2
    d38a:	d115      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    d38c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d38e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    d390:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    d392:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    d396:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    d398:	d065      	beq.n	d466 <uarte_nrfx_configure+0xfe>
    d39a:	d82d      	bhi.n	d3f8 <uarte_nrfx_configure+0x90>
    d39c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    d3a0:	d064      	beq.n	d46c <uarte_nrfx_configure+0x104>
    d3a2:	d816      	bhi.n	d3d2 <uarte_nrfx_configure+0x6a>
    d3a4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    d3a8:	d062      	beq.n	d470 <uarte_nrfx_configure+0x108>
    d3aa:	d80a      	bhi.n	d3c2 <uarte_nrfx_configure+0x5a>
    d3ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    d3b0:	d061      	beq.n	d476 <uarte_nrfx_configure+0x10e>
    d3b2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    d3b6:	d061      	beq.n	d47c <uarte_nrfx_configure+0x114>
    d3b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d3bc:	e052      	b.n	d464 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    d3be:	2600      	movs	r6, #0
    d3c0:	e7d9      	b.n	d376 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    d3c2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    d3c6:	d05c      	beq.n	d482 <uarte_nrfx_configure+0x11a>
    d3c8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    d3cc:	d1f4      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    d3ce:	4b37      	ldr	r3, [pc, #220]	; (d4ac <uarte_nrfx_configure+0x144>)
    d3d0:	e03c      	b.n	d44c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d3d2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    d3d6:	d057      	beq.n	d488 <uarte_nrfx_configure+0x120>
    d3d8:	d807      	bhi.n	d3ea <uarte_nrfx_configure+0x82>
    d3da:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    d3de:	d055      	beq.n	d48c <uarte_nrfx_configure+0x124>
    d3e0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    d3e4:	d1e8      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    d3e6:	4b32      	ldr	r3, [pc, #200]	; (d4b0 <uarte_nrfx_configure+0x148>)
    d3e8:	e030      	b.n	d44c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d3ea:	f647 2712 	movw	r7, #31250	; 0x7a12
    d3ee:	42bb      	cmp	r3, r7
    d3f0:	d1e2      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    d3f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    d3f6:	e029      	b.n	d44c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d3f8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    d3fc:	d048      	beq.n	d490 <uarte_nrfx_configure+0x128>
    d3fe:	d813      	bhi.n	d428 <uarte_nrfx_configure+0xc0>
    d400:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    d404:	d047      	beq.n	d496 <uarte_nrfx_configure+0x12e>
    d406:	d809      	bhi.n	d41c <uarte_nrfx_configure+0xb4>
    d408:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    d40c:	42bb      	cmp	r3, r7
    d40e:	d044      	beq.n	d49a <uarte_nrfx_configure+0x132>
    d410:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    d414:	d1d0      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    d416:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    d41a:	e017      	b.n	d44c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d41c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    d420:	d1ca      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    d422:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    d426:	e011      	b.n	d44c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d428:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    d42c:	d038      	beq.n	d4a0 <uarte_nrfx_configure+0x138>
    d42e:	d808      	bhi.n	d442 <uarte_nrfx_configure+0xda>
    d430:	4f20      	ldr	r7, [pc, #128]	; (d4b4 <uarte_nrfx_configure+0x14c>)
    d432:	42bb      	cmp	r3, r7
    d434:	d037      	beq.n	d4a6 <uarte_nrfx_configure+0x13e>
    d436:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    d43a:	d1bd      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    d43c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    d440:	e004      	b.n	d44c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d442:	4f1d      	ldr	r7, [pc, #116]	; (d4b8 <uarte_nrfx_configure+0x150>)
    d444:	42bb      	cmp	r3, r7
    d446:	d1b7      	bne.n	d3b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    d448:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    d44c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    d44e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    d452:	1d03      	adds	r3, r0, #4
    d454:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    d456:	4334      	orrs	r4, r6
    d458:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d45a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    d45e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    d462:	2000      	movs	r0, #0
}
    d464:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    d466:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    d46a:	e7ef      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    d46c:	4b13      	ldr	r3, [pc, #76]	; (d4bc <uarte_nrfx_configure+0x154>)
    d46e:	e7ed      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    d470:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    d474:	e7ea      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    d476:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    d47a:	e7e7      	b.n	d44c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    d47c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    d480:	e7e4      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    d482:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    d486:	e7e1      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    d488:	4b0d      	ldr	r3, [pc, #52]	; (d4c0 <uarte_nrfx_configure+0x158>)
    d48a:	e7df      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    d48c:	4b0d      	ldr	r3, [pc, #52]	; (d4c4 <uarte_nrfx_configure+0x15c>)
    d48e:	e7dd      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    d490:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    d494:	e7da      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    d496:	4b0c      	ldr	r3, [pc, #48]	; (d4c8 <uarte_nrfx_configure+0x160>)
    d498:	e7d8      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    d49a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    d49e:	e7d5      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    d4a0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    d4a4:	e7d2      	b.n	d44c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    d4a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    d4aa:	e7cf      	b.n	d44c <uarte_nrfx_configure+0xe4>
    d4ac:	0013b000 	.word	0x0013b000
    d4b0:	004ea000 	.word	0x004ea000
    d4b4:	0003d090 	.word	0x0003d090
    d4b8:	000f4240 	.word	0x000f4240
    d4bc:	00275000 	.word	0x00275000
    d4c0:	0075c000 	.word	0x0075c000
    d4c4:	003af000 	.word	0x003af000
    d4c8:	013a9000 	.word	0x013a9000

0000d4cc <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    d4cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    d4d0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    d4d4:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    d4d6:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    d4da:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d4de:	2100      	movs	r1, #0
    d4e0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    d4e4:	4607      	mov	r7, r0
	data->dev = dev;
    d4e6:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    d4e8:	aa01      	add	r2, sp, #4
    d4ea:	4648      	mov	r0, r9
    d4ec:	f008 fa71 	bl	159d2 <pinctrl_lookup_state>
	if (ret < 0) {
    d4f0:	1e05      	subs	r5, r0, #0
    d4f2:	db56      	blt.n	d5a2 <uarte_instance_init.isra.0+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    d4f4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    d4f6:	f8d9 2000 	ldr.w	r2, [r9]
    d4fa:	7919      	ldrb	r1, [r3, #4]
    d4fc:	6818      	ldr	r0, [r3, #0]
    d4fe:	f008 fa85 	bl	15a0c <pinctrl_configure_pins>
	if (err < 0) {
    d502:	1e05      	subs	r5, r0, #0
    d504:	db4d      	blt.n	d5a2 <uarte_instance_init.isra.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    d506:	1d31      	adds	r1, r6, #4
    d508:	4638      	mov	r0, r7
    d50a:	f7ff ff2d 	bl	d368 <uarte_nrfx_configure>
	if (err) {
    d50e:	4605      	mov	r5, r0
    d510:	2800      	cmp	r0, #0
    d512:	d146      	bne.n	d5a2 <uarte_instance_init.isra.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    d514:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    d518:	0799      	lsls	r1, r3, #30
    d51a:	d519      	bpl.n	d550 <uarte_instance_init.isra.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    d51c:	f106 0016 	add.w	r0, r6, #22
    d520:	f001 f8b2 	bl	e688 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    d524:	4b22      	ldr	r3, [pc, #136]	; (d5b0 <uarte_instance_init.isra.0+0xe4>)
    d526:	4298      	cmp	r0, r3
    d528:	d13f      	bne.n	d5aa <uarte_instance_init.isra.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    d52a:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    d52c:	00c3      	lsls	r3, r0, #3
    d52e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d532:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    d536:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    d53a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    d53e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    d542:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    d546:	4a1b      	ldr	r2, [pc, #108]	; (d5b4 <uarte_instance_init.isra.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    d548:	2301      	movs	r3, #1
    d54a:	4083      	lsls	r3, r0
    d54c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    d550:	2308      	movs	r3, #8
    d552:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    d556:	f898 3008 	ldrb.w	r3, [r8, #8]
    d55a:	b95b      	cbnz	r3, d574 <uarte_instance_init.isra.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d55c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    d560:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    d564:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    d568:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    d56c:	2301      	movs	r3, #1
    d56e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d572:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    d574:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d578:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    d57a:	bf5c      	itt	pl
    d57c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    d580:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d584:	06db      	lsls	r3, r3, #27
    d586:	bf44      	itt	mi
    d588:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    d58c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    d590:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    d592:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d594:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d598:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d59c:	2301      	movs	r3, #1
    d59e:	60a3      	str	r3, [r4, #8]
    d5a0:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    d5a2:	4628      	mov	r0, r5
    d5a4:	b003      	add	sp, #12
    d5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    d5aa:	f06f 0504 	mvn.w	r5, #4
    d5ae:	e7f8      	b.n	d5a2 <uarte_instance_init.isra.0+0xd6>
    d5b0:	0bad0000 	.word	0x0bad0000
    d5b4:	4001f000 	.word	0x4001f000

0000d5b8 <uarte_nrfx_poll_out>:
{
    d5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    d5ba:	6906      	ldr	r6, [r0, #16]
{
    d5bc:	4605      	mov	r5, r0
    d5be:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d5c0:	f008 fbb7 	bl	15d32 <k_is_in_isr>
    d5c4:	b910      	cbnz	r0, d5cc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    d5c6:	4b20      	ldr	r3, [pc, #128]	; (d648 <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
    d5c8:	781b      	ldrb	r3, [r3, #0]
    d5ca:	b983      	cbnz	r3, d5ee <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    d5cc:	f04f 0320 	mov.w	r3, #32
    d5d0:	f3ef 8411 	mrs	r4, BASEPRI
    d5d4:	f383 8812 	msr	BASEPRI_MAX, r3
    d5d8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    d5dc:	6868      	ldr	r0, [r5, #4]
    d5de:	f008 f951 	bl	15884 <is_tx_ready.isra.0>
    d5e2:	bb28      	cbnz	r0, d630 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    d5e4:	f384 8811 	msr	BASEPRI, r4
    d5e8:	f3bf 8f6f 	isb	sy
}
    d5ec:	e7ee      	b.n	d5cc <uarte_nrfx_poll_out+0x14>
{
    d5ee:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    d5f0:	6868      	ldr	r0, [r5, #4]
    d5f2:	f008 f947 	bl	15884 <is_tx_ready.isra.0>
    d5f6:	b970      	cbnz	r0, d616 <uarte_nrfx_poll_out+0x5e>
    d5f8:	2001      	movs	r0, #1
    d5fa:	f008 fabc 	bl	15b76 <nrfx_busy_wait>
    d5fe:	3c01      	subs	r4, #1
    d600:	d1f6      	bne.n	d5f0 <uarte_nrfx_poll_out+0x38>
    d602:	2100      	movs	r1, #0
    d604:	2021      	movs	r0, #33	; 0x21
    d606:	f001 fe61 	bl	f2cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d60a:	e7f0      	b.n	d5ee <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    d60c:	f384 8811 	msr	BASEPRI, r4
    d610:	f3bf 8f6f 	isb	sy
}
    d614:	e7f5      	b.n	d602 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    d616:	f04f 0320 	mov.w	r3, #32
    d61a:	f3ef 8411 	mrs	r4, BASEPRI
    d61e:	f383 8812 	msr	BASEPRI_MAX, r3
    d622:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    d626:	6868      	ldr	r0, [r5, #4]
    d628:	f008 f92c 	bl	15884 <is_tx_ready.isra.0>
    d62c:	2800      	cmp	r0, #0
    d62e:	d0ed      	beq.n	d60c <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    d630:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    d632:	2201      	movs	r2, #1
	data->char_out = c;
    d634:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    d638:	4628      	mov	r0, r5
    d63a:	f008 f934 	bl	158a6 <tx_start>
	__asm__ volatile(
    d63e:	f384 8811 	msr	BASEPRI, r4
    d642:	f3bf 8f6f 	isb	sy
}
    d646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d648:	200022c6 	.word	0x200022c6

0000d64c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    d64c:	4919      	ldr	r1, [pc, #100]	; (d6b4 <sys_clock_timeout_handler+0x68>)
{
    d64e:	b570      	push	{r4, r5, r6, lr}
    d650:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    d652:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    d656:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    d658:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    d65c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    d660:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    d662:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    d666:	f04f 0500 	mov.w	r5, #0
    d66a:	d20a      	bcs.n	d682 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    d66c:	4b12      	ldr	r3, [pc, #72]	; (d6b8 <sys_clock_timeout_handler+0x6c>)
    d66e:	6819      	ldr	r1, [r3, #0]
    d670:	060a      	lsls	r2, r1, #24
    d672:	0a0b      	lsrs	r3, r1, #8
    d674:	1992      	adds	r2, r2, r6
    d676:	4911      	ldr	r1, [pc, #68]	; (d6bc <sys_clock_timeout_handler+0x70>)
    d678:	f143 0300 	adc.w	r3, r3, #0
    d67c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    d680:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    d682:	f001 ff83 	bl	f58c <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    d686:	00a3      	lsls	r3, r4, #2
    d688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d68c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    d690:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    d694:	42b2      	cmp	r2, r6
    d696:	d10b      	bne.n	d6b0 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    d698:	b91d      	cbnz	r5, d6a2 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    d69a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    d69e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    d6a2:	4b07      	ldr	r3, [pc, #28]	; (d6c0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d6a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d6a8:	fa00 f404 	lsl.w	r4, r0, r4
    d6ac:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    d6b0:	bd70      	pop	{r4, r5, r6, pc}
    d6b2:	bf00      	nop
    d6b4:	20000670 	.word	0x20000670
    d6b8:	200017a0 	.word	0x200017a0
    d6bc:	20000658 	.word	0x20000658
    d6c0:	40011000 	.word	0x40011000

0000d6c4 <compare_int_lock>:
{
    d6c4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    d6c6:	2301      	movs	r3, #1
    d6c8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d6ca:	4a11      	ldr	r2, [pc, #68]	; (d710 <compare_int_lock+0x4c>)
    d6cc:	f3bf 8f5b 	dmb	ish
    d6d0:	43dc      	mvns	r4, r3
    d6d2:	e852 1f00 	ldrex	r1, [r2]
    d6d6:	ea01 0c04 	and.w	ip, r1, r4
    d6da:	e842 ce00 	strex	lr, ip, [r2]
    d6de:	f1be 0f00 	cmp.w	lr, #0
    d6e2:	d1f6      	bne.n	d6d2 <compare_int_lock+0xe>
    d6e4:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d6e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    d6ec:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    d6f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d6f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    d6f8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    d6fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d700:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    d704:	420b      	tst	r3, r1
}
    d706:	bf14      	ite	ne
    d708:	2001      	movne	r0, #1
    d70a:	2000      	moveq	r0, #0
    d70c:	bd10      	pop	{r4, pc}
    d70e:	bf00      	nop
    d710:	2000179c 	.word	0x2000179c

0000d714 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    d714:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d716:	4a12      	ldr	r2, [pc, #72]	; (d760 <compare_int_unlock.part.0+0x4c>)
    d718:	f3bf 8f5b 	dmb	ish
    d71c:	4083      	lsls	r3, r0
    d71e:	e852 1f00 	ldrex	r1, [r2]
    d722:	4319      	orrs	r1, r3
    d724:	e842 1c00 	strex	ip, r1, [r2]
    d728:	f1bc 0f00 	cmp.w	ip, #0
    d72c:	d1f7      	bne.n	d71e <compare_int_unlock.part.0+0xa>
    d72e:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    d732:	4a0c      	ldr	r2, [pc, #48]	; (d764 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    d738:	4083      	lsls	r3, r0
    d73a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d73e:	4b0a      	ldr	r3, [pc, #40]	; (d768 <compare_int_unlock.part.0+0x54>)
    d740:	f3bf 8f5b 	dmb	ish
    d744:	681b      	ldr	r3, [r3, #0]
    d746:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    d74a:	fa23 f000 	lsr.w	r0, r3, r0
    d74e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d750:	bf42      	ittt	mi
    d752:	4b06      	ldrmi	r3, [pc, #24]	; (d76c <compare_int_unlock.part.0+0x58>)
    d754:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    d758:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    d75c:	4770      	bx	lr
    d75e:	bf00      	nop
    d760:	2000179c 	.word	0x2000179c
    d764:	40011000 	.word	0x40011000
    d768:	20001798 	.word	0x20001798
    d76c:	e000e100 	.word	0xe000e100

0000d770 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    d770:	4b0d      	ldr	r3, [pc, #52]	; (d7a8 <z_nrf_rtc_timer_read+0x38>)
    d772:	681b      	ldr	r3, [r3, #0]
    d774:	0a19      	lsrs	r1, r3, #8
    d776:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    d778:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    d77c:	4b0b      	ldr	r3, [pc, #44]	; (d7ac <z_nrf_rtc_timer_read+0x3c>)
    d77e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    d782:	18c0      	adds	r0, r0, r3
    d784:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    d788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    d78c:	d20a      	bcs.n	d7a4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    d78e:	4b08      	ldr	r3, [pc, #32]	; (d7b0 <z_nrf_rtc_timer_read+0x40>)
    d790:	e9d3 2300 	ldrd	r2, r3, [r3]
    d794:	4299      	cmp	r1, r3
    d796:	bf08      	it	eq
    d798:	4290      	cmpeq	r0, r2
    d79a:	d203      	bcs.n	d7a4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    d79c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    d7a0:	f141 0100 	adc.w	r1, r1, #0
}
    d7a4:	4770      	bx	lr
    d7a6:	bf00      	nop
    d7a8:	200017a0 	.word	0x200017a0
    d7ac:	40011000 	.word	0x40011000
    d7b0:	20000658 	.word	0x20000658

0000d7b4 <compare_set>:
{
    d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7b8:	b085      	sub	sp, #20
    d7ba:	4616      	mov	r6, r2
    d7bc:	461f      	mov	r7, r3
    d7be:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    d7c0:	f7ff ff80 	bl	d6c4 <compare_int_lock>
    d7c4:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    d7c6:	f7ff ffd3 	bl	d770 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    d7ca:	42b9      	cmp	r1, r7
    d7cc:	bf08      	it	eq
    d7ce:	42b0      	cmpeq	r0, r6
    d7d0:	d27f      	bcs.n	d8d2 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    d7d2:	ebb6 0800 	subs.w	r8, r6, r0
    d7d6:	eb67 0901 	sbc.w	r9, r7, r1
    d7da:	2300      	movs	r3, #0
    d7dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d7e0:	454b      	cmp	r3, r9
    d7e2:	bf08      	it	eq
    d7e4:	4542      	cmpeq	r2, r8
    d7e6:	f0c0 8085 	bcc.w	d8f4 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    d7ea:	4b44      	ldr	r3, [pc, #272]	; (d8fc <compare_set+0x148>)
    d7ec:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    d7f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    d7f4:	429f      	cmp	r7, r3
    d7f6:	bf08      	it	eq
    d7f8:	4296      	cmpeq	r6, r2
    d7fa:	d054      	beq.n	d8a6 <compare_set+0xf2>
    d7fc:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d800:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    d804:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    d808:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d80c:	fa0b f205 	lsl.w	r2, fp, r5
    d810:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    d814:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d818:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    d81c:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    d81e:	4a38      	ldr	r2, [pc, #224]	; (d900 <compare_set+0x14c>)
    return p_reg->CC[ch];
    d820:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    d824:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d828:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    d82c:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    d830:	461c      	mov	r4, r3
    d832:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    d834:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    d838:	eba0 000a 	sub.w	r0, r0, sl
    d83c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    d840:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    d844:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    d846:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    d84a:	d105      	bne.n	d858 <compare_set+0xa4>
    d84c:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    d84e:	2013      	movs	r0, #19
    d850:	f008 fb73 	bl	15f3a <z_impl_k_busy_wait>
    d854:	4a2a      	ldr	r2, [pc, #168]	; (d900 <compare_set+0x14c>)
    d856:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    d858:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    d85a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    d85e:	eba4 000c 	sub.w	r0, r4, ip
    d862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    d866:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d86a:	bf88      	it	hi
    d86c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d86e:	2000      	movs	r0, #0
    d870:	f8c8 0000 	str.w	r0, [r8]
    d874:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    d878:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    d87c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    d880:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    d884:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    d888:	4582      	cmp	sl, r0
    d88a:	d006      	beq.n	d89a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    d88c:	1a20      	subs	r0, r4, r0
    d88e:	3802      	subs	r0, #2
    d890:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    d894:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d898:	d819      	bhi.n	d8ce <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    d89a:	1ae4      	subs	r4, r4, r3
    d89c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    d8a0:	1932      	adds	r2, r6, r4
    d8a2:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    d8a6:	4c15      	ldr	r4, [pc, #84]	; (d8fc <compare_set+0x148>)
    d8a8:	0129      	lsls	r1, r5, #4
    d8aa:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    d8ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    d8b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    d8b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    d8b6:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    d8b8:	6043      	str	r3, [r0, #4]
	return ret;
    d8ba:	2400      	movs	r4, #0
	if (key) {
    d8bc:	9b01      	ldr	r3, [sp, #4]
    d8be:	b113      	cbz	r3, d8c6 <compare_set+0x112>
    d8c0:	4628      	mov	r0, r5
    d8c2:	f7ff ff27 	bl	d714 <compare_int_unlock.part.0>
}
    d8c6:	4620      	mov	r0, r4
    d8c8:	b005      	add	sp, #20
    d8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8ce:	4620      	mov	r0, r4
    d8d0:	e7b0      	b.n	d834 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    d8d2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d8d4:	4a0b      	ldr	r2, [pc, #44]	; (d904 <compare_set+0x150>)
    d8d6:	f3bf 8f5b 	dmb	ish
    d8da:	40ab      	lsls	r3, r5
    d8dc:	e852 1f00 	ldrex	r1, [r2]
    d8e0:	4319      	orrs	r1, r3
    d8e2:	e842 1000 	strex	r0, r1, [r2]
    d8e6:	2800      	cmp	r0, #0
    d8e8:	d1f8      	bne.n	d8dc <compare_set+0x128>
    d8ea:	f3bf 8f5b 	dmb	ish
    d8ee:	4632      	mov	r2, r6
    d8f0:	463b      	mov	r3, r7
    d8f2:	e7d8      	b.n	d8a6 <compare_set+0xf2>
			return -EINVAL;
    d8f4:	f06f 0415 	mvn.w	r4, #21
    d8f8:	e7e0      	b.n	d8bc <compare_set+0x108>
    d8fa:	bf00      	nop
    d8fc:	20000660 	.word	0x20000660
    d900:	40011000 	.word	0x40011000
    d904:	20001798 	.word	0x20001798

0000d908 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    d908:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    d90a:	4b19      	ldr	r3, [pc, #100]	; (d970 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    d90c:	4d19      	ldr	r5, [pc, #100]	; (d974 <sys_clock_driver_init+0x6c>)
    d90e:	2400      	movs	r4, #0
    d910:	f04f 30ff 	mov.w	r0, #4294967295
    d914:	f04f 31ff 	mov.w	r1, #4294967295
    d918:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    d91c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    d920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    d924:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d928:	4b13      	ldr	r3, [pc, #76]	; (d978 <sys_clock_driver_init+0x70>)
    d92a:	2602      	movs	r6, #2
    d92c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    d930:	2101      	movs	r1, #1
    d932:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    d936:	2011      	movs	r0, #17
    d938:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d93c:	4622      	mov	r2, r4
    d93e:	f7fe fd7b 	bl	c438 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    d942:	2011      	movs	r0, #17
    d944:	f7fe fd5a 	bl	c3fc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    d948:	4a0c      	ldr	r2, [pc, #48]	; (d97c <sys_clock_driver_init+0x74>)
    d94a:	2301      	movs	r3, #1
    d94c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    d94e:	4a0c      	ldr	r2, [pc, #48]	; (d980 <sys_clock_driver_init+0x78>)
    d950:	602b      	str	r3, [r5, #0]
    d952:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    d954:	4b0b      	ldr	r3, [pc, #44]	; (d984 <sys_clock_driver_init+0x7c>)
    d956:	4a0c      	ldr	r2, [pc, #48]	; (d988 <sys_clock_driver_init+0x80>)
    d958:	9300      	str	r3, [sp, #0]
    d95a:	9401      	str	r4, [sp, #4]
    d95c:	2300      	movs	r3, #0
    d95e:	4620      	mov	r0, r4
    d960:	f7ff ff28 	bl	d7b4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    d964:	4630      	mov	r0, r6
    d966:	f7ff faf3 	bl	cf50 <z_nrf_clock_control_lf_on>

	return 0;
}
    d96a:	4620      	mov	r0, r4
    d96c:	b002      	add	sp, #8
    d96e:	bd70      	pop	{r4, r5, r6, pc}
    d970:	20000660 	.word	0x20000660
    d974:	40011000 	.word	0x40011000
    d978:	e000e100 	.word	0xe000e100
    d97c:	40011008 	.word	0x40011008
    d980:	2000179c 	.word	0x2000179c
    d984:	0000d64d 	.word	0x0000d64d
    d988:	007fffff 	.word	0x007fffff

0000d98c <rtc_nrf_isr>:
{
    d98c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    d990:	4c34      	ldr	r4, [pc, #208]	; (da64 <rtc_nrf_isr+0xd8>)
    d992:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    d996:	079a      	lsls	r2, r3, #30
    d998:	d509      	bpl.n	d9ae <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d99a:	4b33      	ldr	r3, [pc, #204]	; (da68 <rtc_nrf_isr+0xdc>)
    d99c:	681a      	ldr	r2, [r3, #0]
    d99e:	b132      	cbz	r2, d9ae <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d9a0:	2200      	movs	r2, #0
    d9a2:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    d9a4:	4a31      	ldr	r2, [pc, #196]	; (da6c <rtc_nrf_isr+0xe0>)
    d9a6:	681b      	ldr	r3, [r3, #0]
    d9a8:	6813      	ldr	r3, [r2, #0]
    d9aa:	3301      	adds	r3, #1
    d9ac:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    d9ae:	f04f 0320 	mov.w	r3, #32
    d9b2:	f3ef 8211 	mrs	r2, BASEPRI
    d9b6:	f383 8812 	msr	BASEPRI_MAX, r3
    d9ba:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    d9be:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    d9c2:	03db      	lsls	r3, r3, #15
    d9c4:	d512      	bpl.n	d9ec <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d9c6:	f3bf 8f5b 	dmb	ish
    d9ca:	4b29      	ldr	r3, [pc, #164]	; (da70 <rtc_nrf_isr+0xe4>)
    d9cc:	e853 1f00 	ldrex	r1, [r3]
    d9d0:	f021 0001 	bic.w	r0, r1, #1
    d9d4:	e843 0600 	strex	r6, r0, [r3]
    d9d8:	2e00      	cmp	r6, #0
    d9da:	d1f7      	bne.n	d9cc <rtc_nrf_isr+0x40>
    d9dc:	f3bf 8f5b 	dmb	ish
    d9e0:	4b24      	ldr	r3, [pc, #144]	; (da74 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    d9e2:	2900      	cmp	r1, #0
    d9e4:	d139      	bne.n	da5a <rtc_nrf_isr+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d9e6:	6819      	ldr	r1, [r3, #0]
		if (result) {
    d9e8:	2900      	cmp	r1, #0
    d9ea:	d136      	bne.n	da5a <rtc_nrf_isr+0xce>
{
    d9ec:	2300      	movs	r3, #0
	__asm__ volatile(
    d9ee:	f382 8811 	msr	BASEPRI, r2
    d9f2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    d9f6:	b36b      	cbz	r3, da54 <rtc_nrf_isr+0xc8>
		curr_time = z_nrf_rtc_timer_read();
    d9f8:	f7ff feba 	bl	d770 <z_nrf_rtc_timer_read>
    d9fc:	4606      	mov	r6, r0
    d9fe:	460f      	mov	r7, r1
	__asm__ volatile(
    da00:	f04f 0320 	mov.w	r3, #32
    da04:	f3ef 8011 	mrs	r0, BASEPRI
    da08:	f383 8812 	msr	BASEPRI_MAX, r3
    da0c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    da10:	4b19      	ldr	r3, [pc, #100]	; (da78 <rtc_nrf_isr+0xec>)
    da12:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    da16:	4549      	cmp	r1, r9
    da18:	bf08      	it	eq
    da1a:	4546      	cmpeq	r6, r8
    da1c:	f04f 0200 	mov.w	r2, #0
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    da20:	bf21      	itttt	cs
    da22:	f04f 36ff 	movcs.w	r6, #4294967295
    da26:	f04f 37ff 	movcs.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    da2a:	e9d3 1500 	ldrdcs	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    da2e:	e9c3 6702 	strdcs	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    da32:	bf23      	ittte	cs
    da34:	601a      	strcs	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    da36:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
    da3a:	f8c4 3348 	strcs.w	r3, [r4, #840]	; 0x348
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    da3e:	4611      	movcc	r1, r2
	__asm__ volatile(
    da40:	f380 8811 	msr	BASEPRI, r0
    da44:	f3bf 8f6f 	isb	sy
		if (handler) {
    da48:	b121      	cbz	r1, da54 <rtc_nrf_isr+0xc8>
			handler(chan, expire_time, user_context);
    da4a:	9500      	str	r5, [sp, #0]
    da4c:	4642      	mov	r2, r8
    da4e:	464b      	mov	r3, r9
    da50:	2000      	movs	r0, #0
    da52:	4788      	blx	r1
}
    da54:	b003      	add	sp, #12
    da56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da5a:	2100      	movs	r1, #0
    da5c:	6019      	str	r1, [r3, #0]
    da5e:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    da60:	2301      	movs	r3, #1
}
    da62:	e7c4      	b.n	d9ee <rtc_nrf_isr+0x62>
    da64:	40011000 	.word	0x40011000
    da68:	40011104 	.word	0x40011104
    da6c:	200017a0 	.word	0x200017a0
    da70:	20001798 	.word	0x20001798
    da74:	40011140 	.word	0x40011140
    da78:	20000660 	.word	0x20000660

0000da7c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    da7c:	1c43      	adds	r3, r0, #1
{
    da7e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    da80:	d021      	beq.n	dac6 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    da82:	2801      	cmp	r0, #1
    da84:	dd21      	ble.n	daca <sys_clock_set_timeout+0x4e>
    da86:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    da8a:	da20      	bge.n	dace <sys_clock_set_timeout+0x52>
    da8c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    da8e:	f7ff fe6f 	bl	d770 <z_nrf_rtc_timer_read>
    da92:	4b10      	ldr	r3, [pc, #64]	; (dad4 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    da94:	4910      	ldr	r1, [pc, #64]	; (dad8 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    da96:	e9d3 2300 	ldrd	r2, r3, [r3]
    da9a:	1a80      	subs	r0, r0, r2
		ticks = 0;
    da9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    daa0:	bf28      	it	cs
    daa2:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    daa4:	3001      	adds	r0, #1
    daa6:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    daa8:	480c      	ldr	r0, [pc, #48]	; (dadc <sys_clock_set_timeout+0x60>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    daaa:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    daac:	4284      	cmp	r4, r0
    daae:	bf28      	it	cs
    dab0:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    dab2:	1912      	adds	r2, r2, r4
    dab4:	f04f 0000 	mov.w	r0, #0
    dab8:	9001      	str	r0, [sp, #4]
    daba:	f143 0300 	adc.w	r3, r3, #0
    dabe:	f7ff fe79 	bl	d7b4 <compare_set>
}
    dac2:	b002      	add	sp, #8
    dac4:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    dac6:	4805      	ldr	r0, [pc, #20]	; (dadc <sys_clock_set_timeout+0x60>)
    dac8:	e7e0      	b.n	da8c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    daca:	2400      	movs	r4, #0
    dacc:	e7df      	b.n	da8e <sys_clock_set_timeout+0x12>
    dace:	4c03      	ldr	r4, [pc, #12]	; (dadc <sys_clock_set_timeout+0x60>)
    dad0:	e7dd      	b.n	da8e <sys_clock_set_timeout+0x12>
    dad2:	bf00      	nop
    dad4:	20000670 	.word	0x20000670
    dad8:	0000d64d 	.word	0x0000d64d
    dadc:	007fffff 	.word	0x007fffff

0000dae0 <sys_clock_elapsed>:
{
    dae0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    dae2:	f7ff fe45 	bl	d770 <z_nrf_rtc_timer_read>
    dae6:	4b02      	ldr	r3, [pc, #8]	; (daf0 <sys_clock_elapsed+0x10>)
    dae8:	681b      	ldr	r3, [r3, #0]
}
    daea:	1ac0      	subs	r0, r0, r3
    daec:	bd08      	pop	{r3, pc}
    daee:	bf00      	nop
    daf0:	20000670 	.word	0x20000670

0000daf4 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    daf4:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
    daf8:	2b00      	cmp	r3, #0
{
    dafa:	b530      	push	{r4, r5, lr}
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    dafc:	bf1c      	itt	ne
    dafe:	2100      	movne	r1, #0
    db00:	2201      	movne	r2, #1
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    db02:	f3c0 1581 	ubfx	r5, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    db06:	f000 041f 	and.w	r4, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    db0a:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    db0e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    db12:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
        case 1: return NRF_P1;
    db16:	4b06      	ldr	r3, [pc, #24]	; (db30 <nrf_pin_configure+0x3c>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    db18:	ea40 0001 	orr.w	r0, r0, r1
        case 1: return NRF_P1;
    db1c:	bf08      	it	eq
    db1e:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    db22:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    db26:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    db2a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    db2e:	bd30      	pop	{r4, r5, pc}
    db30:	50000300 	.word	0x50000300

0000db34 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    db34:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    db38:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    db3a:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    db3c:	4b04      	ldr	r3, [pc, #16]	; (db50 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    db3e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    db42:	bf18      	it	ne
    db44:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    db48:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    db4a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    db4e:	4770      	bx	lr
    db50:	50000300 	.word	0x50000300

0000db54 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    db54:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    db58:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    db5a:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    db5c:	4b04      	ldr	r3, [pc, #16]	; (db70 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    db5e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    db62:	bf18      	it	ne
    db64:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    db68:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    db6a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    db6e:	4770      	bx	lr
    db70:	50000300 	.word	0x50000300

0000db74 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    db74:	4b03      	ldr	r3, [pc, #12]	; (db84 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    db76:	6818      	ldr	r0, [r3, #0]
}
    db78:	f1a0 0308 	sub.w	r3, r0, #8
    db7c:	4258      	negs	r0, r3
    db7e:	4158      	adcs	r0, r3
    db80:	4770      	bx	lr
    db82:	bf00      	nop
    db84:	10000130 	.word	0x10000130

0000db88 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    db88:	4b06      	ldr	r3, [pc, #24]	; (dba4 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    db8a:	681b      	ldr	r3, [r3, #0]
    db8c:	2b08      	cmp	r3, #8
    db8e:	d106      	bne.n	db9e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    db90:	4b05      	ldr	r3, [pc, #20]	; (dba8 <nrf52_errata_103+0x20>)
    db92:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    db94:	2b05      	cmp	r3, #5
    db96:	d802      	bhi.n	db9e <nrf52_errata_103+0x16>
    db98:	4a04      	ldr	r2, [pc, #16]	; (dbac <nrf52_errata_103+0x24>)
    db9a:	5cd0      	ldrb	r0, [r2, r3]
    db9c:	4770      	bx	lr
        return false;
    db9e:	2000      	movs	r0, #0
}
    dba0:	4770      	bx	lr
    dba2:	bf00      	nop
    dba4:	10000130 	.word	0x10000130
    dba8:	10000134 	.word	0x10000134
    dbac:	00046cc7 	.word	0x00046cc7

0000dbb0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    dbb0:	4a02      	ldr	r2, [pc, #8]	; (dbbc <nvmc_wait+0xc>)
    dbb2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    dbb6:	2b00      	cmp	r3, #0
    dbb8:	d0fb      	beq.n	dbb2 <nvmc_wait+0x2>
}
    dbba:	4770      	bx	lr
    dbbc:	4001e000 	.word	0x4001e000

0000dbc0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    dbc0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    dbc2:	f7ff ffd7 	bl	db74 <nrf52_errata_136>
    dbc6:	b140      	cbz	r0, dbda <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    dbc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dbcc:	2200      	movs	r2, #0
    dbce:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    dbd2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    dbd6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    dbda:	f7ff ffcb 	bl	db74 <nrf52_errata_136>
    dbde:	2800      	cmp	r0, #0
    dbe0:	d046      	beq.n	dc70 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    dbe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    dbe6:	4b61      	ldr	r3, [pc, #388]	; (dd6c <SystemInit+0x1ac>)
    dbe8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    dbec:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    dbf0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    dbf4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    dbf8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    dbfc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    dc00:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    dc04:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    dc08:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    dc0c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    dc10:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    dc14:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    dc18:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    dc1c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    dc20:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    dc24:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    dc28:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    dc2c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    dc30:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    dc34:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    dc38:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    dc3c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    dc40:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    dc44:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    dc48:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    dc4c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    dc50:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    dc54:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    dc58:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    dc5c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    dc60:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    dc64:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    dc68:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    dc6c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    dc70:	f7ff ff8a 	bl	db88 <nrf52_errata_103>
    dc74:	b110      	cbz	r0, dc7c <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    dc76:	4b3e      	ldr	r3, [pc, #248]	; (dd70 <SystemInit+0x1b0>)
    dc78:	4a3e      	ldr	r2, [pc, #248]	; (dd74 <SystemInit+0x1b4>)
    dc7a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    dc7c:	f7ff ff84 	bl	db88 <nrf52_errata_103>
    dc80:	b118      	cbz	r0, dc8a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    dc82:	4b3d      	ldr	r3, [pc, #244]	; (dd78 <SystemInit+0x1b8>)
    dc84:	22fb      	movs	r2, #251	; 0xfb
    dc86:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    dc8a:	f7ff ff7d 	bl	db88 <nrf52_errata_103>
    dc8e:	b148      	cbz	r0, dca4 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    dc90:	493a      	ldr	r1, [pc, #232]	; (dd7c <SystemInit+0x1bc>)
    dc92:	4b3b      	ldr	r3, [pc, #236]	; (dd80 <SystemInit+0x1c0>)
    dc94:	680a      	ldr	r2, [r1, #0]
    dc96:	681b      	ldr	r3, [r3, #0]
    dc98:	f022 020f 	bic.w	r2, r2, #15
    dc9c:	f003 030f 	and.w	r3, r3, #15
    dca0:	4313      	orrs	r3, r2
    dca2:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    dca4:	f7ff ff70 	bl	db88 <nrf52_errata_103>
    dca8:	b118      	cbz	r0, dcb2 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    dcaa:	4b36      	ldr	r3, [pc, #216]	; (dd84 <SystemInit+0x1c4>)
    dcac:	f44f 7200 	mov.w	r2, #512	; 0x200
    dcb0:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    dcb2:	f7ff ff5f 	bl	db74 <nrf52_errata_136>
    dcb6:	b148      	cbz	r0, dccc <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    dcb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dcbc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    dcc0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    dcc2:	bf44      	itt	mi
    dcc4:	f06f 0201 	mvnmi.w	r2, #1
    dcc8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    dccc:	4a2e      	ldr	r2, [pc, #184]	; (dd88 <SystemInit+0x1c8>)
    dcce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    dcd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    dcd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    dcda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dcde:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    dce2:	4b2a      	ldr	r3, [pc, #168]	; (dd8c <SystemInit+0x1cc>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    dce4:	681b      	ldr	r3, [r3, #0]
    dce6:	2b08      	cmp	r3, #8
    dce8:	d10e      	bne.n	dd08 <SystemInit+0x148>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    dcea:	4b29      	ldr	r3, [pc, #164]	; (dd90 <SystemInit+0x1d0>)
    dcec:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    dcee:	2b05      	cmp	r3, #5
    dcf0:	d802      	bhi.n	dcf8 <SystemInit+0x138>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    dcf2:	4a28      	ldr	r2, [pc, #160]	; (dd94 <SystemInit+0x1d4>)
    dcf4:	5cd3      	ldrb	r3, [r2, r3]
    dcf6:	b13b      	cbz	r3, dd08 <SystemInit+0x148>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    dcf8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    dcfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    dd00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dd04:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    dd08:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    dd0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dd10:	2a00      	cmp	r2, #0
    dd12:	db03      	blt.n	dd1c <SystemInit+0x15c>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    dd14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    dd18:	2b00      	cmp	r3, #0
    dd1a:	da22      	bge.n	dd62 <SystemInit+0x1a2>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    dd1c:	491e      	ldr	r1, [pc, #120]	; (dd98 <SystemInit+0x1d8>)
    dd1e:	2301      	movs	r3, #1
    dd20:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    dd24:	f7ff ff44 	bl	dbb0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    dd28:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    dd2c:	2412      	movs	r4, #18
    dd2e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    dd32:	f7ff ff3d 	bl	dbb0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    dd36:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    dd3a:	f7ff ff39 	bl	dbb0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    dd3e:	2300      	movs	r3, #0
    dd40:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    dd44:	f7ff ff34 	bl	dbb0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    dd48:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    dd4c:	490e      	ldr	r1, [pc, #56]	; (dd88 <SystemInit+0x1c8>)
    dd4e:	4b13      	ldr	r3, [pc, #76]	; (dd9c <SystemInit+0x1dc>)
    dd50:	68ca      	ldr	r2, [r1, #12]
    dd52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    dd56:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    dd58:	60cb      	str	r3, [r1, #12]
    dd5a:	f3bf 8f4f 	dsb	sy
    __NOP();
    dd5e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    dd60:	e7fd      	b.n	dd5e <SystemInit+0x19e>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    dd62:	4b0f      	ldr	r3, [pc, #60]	; (dda0 <SystemInit+0x1e0>)
    dd64:	4a0f      	ldr	r2, [pc, #60]	; (dda4 <SystemInit+0x1e4>)
    dd66:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    dd68:	bd10      	pop	{r4, pc}
    dd6a:	bf00      	nop
    dd6c:	4000c000 	.word	0x4000c000
    dd70:	4000568c 	.word	0x4000568c
    dd74:	00038148 	.word	0x00038148
    dd78:	4000f000 	.word	0x4000f000
    dd7c:	40000ee4 	.word	0x40000ee4
    dd80:	10000258 	.word	0x10000258
    dd84:	40029640 	.word	0x40029640
    dd88:	e000ed00 	.word	0xe000ed00
    dd8c:	10000130 	.word	0x10000130
    dd90:	10000134 	.word	0x10000134
    dd94:	00046cc1 	.word	0x00046cc1
    dd98:	4001e000 	.word	0x4001e000
    dd9c:	05fa0004 	.word	0x05fa0004
    dda0:	200002f8 	.word	0x200002f8
    dda4:	03d09000 	.word	0x03d09000

0000dda8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    dda8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    ddaa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    ddac:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    ddae:	fab2 f382 	clz	r3, r2
    ddb2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    ddb6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    ddb8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    ddba:	d014      	beq.n	dde6 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ddbc:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    ddc0:	fa05 f303 	lsl.w	r3, r5, r3
    ddc4:	ea22 0303 	bic.w	r3, r2, r3
    ddc8:	e850 6f00 	ldrex	r6, [r0]
    ddcc:	4296      	cmp	r6, r2
    ddce:	d104      	bne.n	ddda <nrfx_flag32_alloc+0x32>
    ddd0:	e840 3c00 	strex	ip, r3, [r0]
    ddd4:	f1bc 0f00 	cmp.w	ip, #0
    ddd8:	d1f6      	bne.n	ddc8 <nrfx_flag32_alloc+0x20>
    ddda:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    ddde:	d1e5      	bne.n	ddac <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    dde0:	4802      	ldr	r0, [pc, #8]	; (ddec <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    dde2:	700c      	strb	r4, [r1, #0]
}
    dde4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    dde6:	4802      	ldr	r0, [pc, #8]	; (ddf0 <nrfx_flag32_alloc+0x48>)
    dde8:	e7fc      	b.n	dde4 <nrfx_flag32_alloc+0x3c>
    ddea:	bf00      	nop
    ddec:	0bad0000 	.word	0x0bad0000
    ddf0:	0bad0002 	.word	0x0bad0002

0000ddf4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    ddf4:	6803      	ldr	r3, [r0, #0]
    ddf6:	40cb      	lsrs	r3, r1
    ddf8:	07db      	lsls	r3, r3, #31
{
    ddfa:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    ddfc:	d415      	bmi.n	de2a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    ddfe:	2301      	movs	r3, #1
    de00:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    de04:	6803      	ldr	r3, [r0, #0]
    de06:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    de0a:	ea41 0203 	orr.w	r2, r1, r3
    de0e:	e850 4f00 	ldrex	r4, [r0]
    de12:	429c      	cmp	r4, r3
    de14:	d104      	bne.n	de20 <nrfx_flag32_free+0x2c>
    de16:	e840 2c00 	strex	ip, r2, [r0]
    de1a:	f1bc 0f00 	cmp.w	ip, #0
    de1e:	d1f6      	bne.n	de0e <nrfx_flag32_free+0x1a>
    de20:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    de24:	d1ee      	bne.n	de04 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    de26:	4802      	ldr	r0, [pc, #8]	; (de30 <nrfx_flag32_free+0x3c>)
}
    de28:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    de2a:	4802      	ldr	r0, [pc, #8]	; (de34 <nrfx_flag32_free+0x40>)
    de2c:	e7fc      	b.n	de28 <nrfx_flag32_free+0x34>
    de2e:	bf00      	nop
    de30:	0bad0000 	.word	0x0bad0000
    de34:	0bad0004 	.word	0x0bad0004

0000de38 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    de38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    de3a:	4604      	mov	r4, r0
    de3c:	b118      	cbz	r0, de46 <clock_stop+0xe>
    de3e:	2801      	cmp	r0, #1
    de40:	d02b      	beq.n	de9a <clock_stop+0x62>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    de42:	b003      	add	sp, #12
    de44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    de46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    de4a:	2202      	movs	r2, #2
    de4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    de50:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    de54:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    de58:	2201      	movs	r2, #1
    de5a:	681b      	ldr	r3, [r3, #0]
    de5c:	4b21      	ldr	r3, [pc, #132]	; (dee4 <clock_stop+0xac>)
    de5e:	601a      	str	r2, [r3, #0]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    de60:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    de62:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    de64:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    de68:	bf14      	ite	ne
    de6a:	2500      	movne	r5, #0
    de6c:	f10d 0507 	addeq.w	r5, sp, #7
    de70:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    de74:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    de78:	b1e4      	cbz	r4, deb4 <clock_stop+0x7c>
    de7a:	2c01      	cmp	r4, #1
    de7c:	d1e1      	bne.n	de42 <clock_stop+0xa>
            if (p_clk_src != NULL)
    de7e:	b125      	cbz	r5, de8a <clock_stop+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    de80:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    de84:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    de88:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    de8a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    de8e:	03db      	lsls	r3, r3, #15
    de90:	d41a      	bmi.n	dec8 <clock_stop+0x90>
            m_clock_cb.hfclk_started = false;
    de92:	4b15      	ldr	r3, [pc, #84]	; (dee8 <clock_stop+0xb0>)
    de94:	2200      	movs	r2, #0
    de96:	715a      	strb	r2, [r3, #5]
    de98:	e7d3      	b.n	de42 <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    de9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    de9e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    dea0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dea4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    dea8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    deac:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    deae:	4b0f      	ldr	r3, [pc, #60]	; (deec <clock_stop+0xb4>)
    deb0:	6018      	str	r0, [r3, #0]
}
    deb2:	e7d5      	b.n	de60 <clock_stop+0x28>
            if (p_clk_src != NULL)
    deb4:	b125      	cbz	r5, dec0 <clock_stop+0x88>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    deb6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    deba:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    debe:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dec0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    dec4:	03da      	lsls	r2, r3, #15
    dec6:	d5bc      	bpl.n	de42 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    dec8:	b92d      	cbnz	r5, ded6 <clock_stop+0x9e>
    deca:	2001      	movs	r0, #1
    decc:	f007 fe53 	bl	15b76 <nrfx_busy_wait>
    ded0:	3f01      	subs	r7, #1
    ded2:	d1d1      	bne.n	de78 <clock_stop+0x40>
    ded4:	e003      	b.n	dede <clock_stop+0xa6>
    ded6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    deda:	2b01      	cmp	r3, #1
    dedc:	d0f5      	beq.n	deca <clock_stop+0x92>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    dede:	2c01      	cmp	r4, #1
    dee0:	d0d7      	beq.n	de92 <clock_stop+0x5a>
    dee2:	e7ae      	b.n	de42 <clock_stop+0xa>
    dee4:	4000000c 	.word	0x4000000c
    dee8:	200017a4 	.word	0x200017a4
    deec:	40000004 	.word	0x40000004

0000def0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    def0:	4b04      	ldr	r3, [pc, #16]	; (df04 <nrfx_clock_init+0x14>)
    def2:	791a      	ldrb	r2, [r3, #4]
    def4:	b922      	cbnz	r2, df00 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    def6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    def8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    defa:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    defc:	4802      	ldr	r0, [pc, #8]	; (df08 <nrfx_clock_init+0x18>)
    defe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    df00:	4802      	ldr	r0, [pc, #8]	; (df0c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    df02:	4770      	bx	lr
    df04:	200017a4 	.word	0x200017a4
    df08:	0bad0000 	.word	0x0bad0000
    df0c:	0bad000c 	.word	0x0bad000c

0000df10 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    df10:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    df12:	b110      	cbz	r0, df1a <nrfx_clock_start+0xa>
    df14:	2801      	cmp	r0, #1
    df16:	d02d      	beq.n	df74 <nrfx_clock_start+0x64>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    df18:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    df1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    df1e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    df22:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    df26:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    df2a:	d10b      	bne.n	df44 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    df2c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    df30:	07c9      	lsls	r1, r1, #31
    df32:	d510      	bpl.n	df56 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    df34:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    df38:	079b      	lsls	r3, r3, #30
    df3a:	d408      	bmi.n	df4e <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    df3c:	2302      	movs	r3, #2
    df3e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    df42:	e7e9      	b.n	df18 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    df44:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    df48:	2b01      	cmp	r3, #1
    df4a:	d004      	beq.n	df56 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    df4c:	b11b      	cbz	r3, df56 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    df4e:	2000      	movs	r0, #0
    df50:	f7ff ff72 	bl	de38 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    df54:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    df56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df5a:	2100      	movs	r1, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    df5c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df60:	4b09      	ldr	r3, [pc, #36]	; (df88 <nrfx_clock_start+0x78>)
    df62:	6019      	str	r1, [r3, #0]
    df64:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    df66:	2302      	movs	r3, #2
    df68:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df6c:	4b07      	ldr	r3, [pc, #28]	; (df8c <nrfx_clock_start+0x7c>)
    df6e:	2201      	movs	r2, #1
    df70:	601a      	str	r2, [r3, #0]
}
    df72:	e7d1      	b.n	df18 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df74:	4b06      	ldr	r3, [pc, #24]	; (df90 <nrfx_clock_start+0x80>)
    df76:	2200      	movs	r2, #0
    df78:	601a      	str	r2, [r3, #0]
    df7a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    df7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    df80:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    df84:	6018      	str	r0, [r3, #0]
}
    df86:	e7c7      	b.n	df18 <nrfx_clock_start+0x8>
    df88:	40000104 	.word	0x40000104
    df8c:	40000008 	.word	0x40000008
    df90:	40000100 	.word	0x40000100

0000df94 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    df94:	4b16      	ldr	r3, [pc, #88]	; (dff0 <nrfx_power_clock_irq_handler+0x5c>)
    df96:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    df98:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    df9a:	b16a      	cbz	r2, dfb8 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    df9c:	2200      	movs	r2, #0
    df9e:	601a      	str	r2, [r3, #0]
    dfa0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    dfa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dfa6:	2201      	movs	r2, #1
    dfa8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    dfac:	4b11      	ldr	r3, [pc, #68]	; (dff4 <nrfx_power_clock_irq_handler+0x60>)
    dfae:	7958      	ldrb	r0, [r3, #5]
    dfb0:	b910      	cbnz	r0, dfb8 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    dfb2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    dfb4:	681b      	ldr	r3, [r3, #0]
    dfb6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    dfb8:	4b0f      	ldr	r3, [pc, #60]	; (dff8 <nrfx_power_clock_irq_handler+0x64>)
    dfba:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    dfbc:	b172      	cbz	r2, dfdc <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dfbe:	2200      	movs	r2, #0
    dfc0:	601a      	str	r2, [r3, #0]
    dfc2:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dfc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dfc8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dfcc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    dfd0:	0792      	lsls	r2, r2, #30
    dfd2:	d104      	bne.n	dfde <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    dfd4:	2201      	movs	r2, #1
    dfd6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dfda:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    dfdc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    dfde:	2202      	movs	r2, #2
    dfe0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    dfe4:	4b03      	ldr	r3, [pc, #12]	; (dff4 <nrfx_power_clock_irq_handler+0x60>)
}
    dfe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    dfea:	681b      	ldr	r3, [r3, #0]
    dfec:	2001      	movs	r0, #1
    dfee:	4718      	bx	r3
    dff0:	40000100 	.word	0x40000100
    dff4:	200017a4 	.word	0x200017a4
    dff8:	40000104 	.word	0x40000104

0000dffc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    dffc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    dffe:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    e002:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    e004:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    e006:	6002      	str	r2, [r0, #0]
}
    e008:	4802      	ldr	r0, [pc, #8]	; (e014 <nrf_gpio_pin_port_decode+0x18>)
    e00a:	bf18      	it	ne
    e00c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    e010:	4770      	bx	lr
    e012:	bf00      	nop
    e014:	50000300 	.word	0x50000300

0000e018 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    e018:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e01a:	f100 0308 	add.w	r3, r0, #8
    e01e:	4c0c      	ldr	r4, [pc, #48]	; (e050 <call_handler+0x38>)
    e020:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    e024:	05da      	lsls	r2, r3, #23
{
    e026:	4605      	mov	r5, r0
    e028:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e02a:	d507      	bpl.n	e03c <call_handler+0x24>
    e02c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    e030:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    e034:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    e038:	6852      	ldr	r2, [r2, #4]
    e03a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    e03c:	68a3      	ldr	r3, [r4, #8]
    e03e:	b12b      	cbz	r3, e04c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    e040:	68e2      	ldr	r2, [r4, #12]
    e042:	4631      	mov	r1, r6
    e044:	4628      	mov	r0, r5
    }
}
    e046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    e04a:	4718      	bx	r3
}
    e04c:	bd70      	pop	{r4, r5, r6, pc}
    e04e:	bf00      	nop
    e050:	200002fc 	.word	0x200002fc

0000e054 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e054:	4b13      	ldr	r3, [pc, #76]	; (e0a4 <release_handler+0x50>)
    e056:	3008      	adds	r0, #8
{
    e058:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    e05a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    e05e:	05d1      	lsls	r1, r2, #23
    e060:	d51c      	bpl.n	e09c <release_handler+0x48>
    e062:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    e066:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    e06a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    e06e:	f103 0410 	add.w	r4, r3, #16
    e072:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    e074:	f834 2b02 	ldrh.w	r2, [r4], #2
    e078:	f412 7f80 	tst.w	r2, #256	; 0x100
    e07c:	d003      	beq.n	e086 <release_handler+0x32>
    e07e:	f3c2 2243 	ubfx	r2, r2, #9, #4
    e082:	4291      	cmp	r1, r2
    e084:	d00a      	beq.n	e09c <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    e086:	3001      	adds	r0, #1
    e088:	2830      	cmp	r0, #48	; 0x30
    e08a:	d1f3      	bne.n	e074 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    e08c:	2200      	movs	r2, #0
    e08e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    e092:	4805      	ldr	r0, [pc, #20]	; (e0a8 <release_handler+0x54>)
}
    e094:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    e098:	f7ff beac 	b.w	ddf4 <nrfx_flag32_free>
}
    e09c:	f85d 4b04 	ldr.w	r4, [sp], #4
    e0a0:	4770      	bx	lr
    e0a2:	bf00      	nop
    e0a4:	200002fc 	.word	0x200002fc
    e0a8:	20000370 	.word	0x20000370

0000e0ac <pin_handler_trigger_uninit>:
{
    e0ac:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    e0ae:	4c0a      	ldr	r4, [pc, #40]	; (e0d8 <pin_handler_trigger_uninit+0x2c>)
    e0b0:	f100 0508 	add.w	r5, r0, #8
    e0b4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    e0b8:	069a      	lsls	r2, r3, #26
    e0ba:	d506      	bpl.n	e0ca <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    e0bc:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    e0be:	4a07      	ldr	r2, [pc, #28]	; (e0dc <pin_handler_trigger_uninit+0x30>)
    e0c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    e0c4:	2100      	movs	r1, #0
    e0c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    e0ca:	f7ff ffc3 	bl	e054 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    e0ce:	2300      	movs	r3, #0
    e0d0:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    e0d4:	bd38      	pop	{r3, r4, r5, pc}
    e0d6:	bf00      	nop
    e0d8:	200002fc 	.word	0x200002fc
    e0dc:	40006000 	.word	0x40006000

0000e0e0 <nrfx_gpiote_input_configure>:
{
    e0e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    e0e4:	4604      	mov	r4, r0
    e0e6:	4617      	mov	r7, r2
    e0e8:	461d      	mov	r5, r3
    if (p_input_config)
    e0ea:	b311      	cbz	r1, e132 <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e0ec:	4e4d      	ldr	r6, [pc, #308]	; (e224 <nrfx_gpiote_input_configure+0x144>)
    e0ee:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
    e0f2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    e0f6:	f003 0322 	and.w	r3, r3, #34	; 0x22
    e0fa:	2b22      	cmp	r3, #34	; 0x22
    e0fc:	d103      	bne.n	e106 <nrfx_gpiote_input_configure+0x26>
                return NRFX_ERROR_INVALID_PARAM;
    e0fe:	484a      	ldr	r0, [pc, #296]	; (e228 <nrfx_gpiote_input_configure+0x148>)
}
    e100:	b004      	add	sp, #16
    e102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    e106:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    e108:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    e10c:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    e110:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    e114:	f10d 020f 	add.w	r2, sp, #15
    e118:	460b      	mov	r3, r1
    e11a:	f10d 010e 	add.w	r1, sp, #14
    e11e:	f007 fd3b 	bl	15b98 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    e122:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    e126:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    e12a:	f043 0301 	orr.w	r3, r3, #1
    e12e:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    e132:	b197      	cbz	r7, e15a <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e134:	483b      	ldr	r0, [pc, #236]	; (e224 <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    e136:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    e138:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e13a:	f104 0308 	add.w	r3, r4, #8
    e13e:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
    e142:	078f      	lsls	r7, r1, #30
    e144:	d50c      	bpl.n	e160 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    e146:	2a00      	cmp	r2, #0
    e148:	d1d9      	bne.n	e0fe <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    e14a:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
    e14e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    e152:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    e156:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
    e15a:	bbcd      	cbnz	r5, e1d0 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
    e15c:	4833      	ldr	r0, [pc, #204]	; (e22c <nrfx_gpiote_input_configure+0x14c>)
    e15e:	e7cf      	b.n	e100 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    e160:	f021 0120 	bic.w	r1, r1, #32
    e164:	04c9      	lsls	r1, r1, #19
    e166:	0cc9      	lsrs	r1, r1, #19
    e168:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
    e16c:	2a00      	cmp	r2, #0
    e16e:	d0ec      	beq.n	e14a <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
    e170:	2e03      	cmp	r6, #3
    e172:	d8c4      	bhi.n	e0fe <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    e174:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    e176:	b92e      	cbnz	r6, e184 <nrfx_gpiote_input_configure+0xa4>
    e178:	4a2d      	ldr	r2, [pc, #180]	; (e230 <nrfx_gpiote_input_configure+0x150>)
    e17a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    e17e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    e182:	e7e2      	b.n	e14a <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    e184:	00ba      	lsls	r2, r7, #2
    e186:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e18a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e18e:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    e192:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    e196:	f02c 0c03 	bic.w	ip, ip, #3
    e19a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    e19e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    e1a2:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    e1a6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    e1aa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e1ae:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    e1b2:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
    e1b6:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    e1ba:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    e1be:	ea4c 0c0e 	orr.w	ip, ip, lr
    e1c2:	f041 0120 	orr.w	r1, r1, #32
    e1c6:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    e1ca:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    e1ce:	e7bc      	b.n	e14a <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    e1d0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    e1d4:	4620      	mov	r0, r4
    e1d6:	f7ff ff3d 	bl	e054 <release_handler>
    if (!handler)
    e1da:	2e00      	cmp	r6, #0
    e1dc:	d0be      	beq.n	e15c <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    e1de:	4d11      	ldr	r5, [pc, #68]	; (e224 <nrfx_gpiote_input_configure+0x144>)
    e1e0:	682b      	ldr	r3, [r5, #0]
    e1e2:	429e      	cmp	r6, r3
    e1e4:	d104      	bne.n	e1f0 <nrfx_gpiote_input_configure+0x110>
    e1e6:	686b      	ldr	r3, [r5, #4]
    e1e8:	429f      	cmp	r7, r3
    e1ea:	d101      	bne.n	e1f0 <nrfx_gpiote_input_configure+0x110>
    e1ec:	2200      	movs	r2, #0
    e1ee:	e00a      	b.n	e206 <nrfx_gpiote_input_configure+0x126>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    e1f0:	4810      	ldr	r0, [pc, #64]	; (e234 <nrfx_gpiote_input_configure+0x154>)
    e1f2:	f10d 010f 	add.w	r1, sp, #15
    e1f6:	f7ff fdd7 	bl	dda8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    e1fa:	4b0c      	ldr	r3, [pc, #48]	; (e22c <nrfx_gpiote_input_configure+0x14c>)
    e1fc:	4298      	cmp	r0, r3
    e1fe:	f47f af7f 	bne.w	e100 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    e202:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    e206:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    e20a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    e20e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    e210:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    e212:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    e216:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    e21a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e21e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    e222:	e79b      	b.n	e15c <nrfx_gpiote_input_configure+0x7c>
    e224:	200002fc 	.word	0x200002fc
    e228:	0bad0004 	.word	0x0bad0004
    e22c:	0bad0000 	.word	0x0bad0000
    e230:	40006000 	.word	0x40006000
    e234:	20000370 	.word	0x20000370

0000e238 <nrfx_gpiote_output_configure>:
{
    e238:	b5f0      	push	{r4, r5, r6, r7, lr}
    e23a:	4604      	mov	r4, r0
    e23c:	b085      	sub	sp, #20
    e23e:	4615      	mov	r5, r2
    if (p_config)
    e240:	b309      	cbz	r1, e286 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e242:	f100 0708 	add.w	r7, r0, #8
    e246:	4e31      	ldr	r6, [pc, #196]	; (e30c <nrfx_gpiote_output_configure+0xd4>)
    e248:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    e24c:	0798      	lsls	r0, r3, #30
    e24e:	d401      	bmi.n	e254 <nrfx_gpiote_output_configure+0x1c>
    e250:	069a      	lsls	r2, r3, #26
    e252:	d458      	bmi.n	e306 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    e254:	f013 0f1c 	tst.w	r3, #28
    e258:	d002      	beq.n	e260 <nrfx_gpiote_output_configure+0x28>
    e25a:	784b      	ldrb	r3, [r1, #1]
    e25c:	2b01      	cmp	r3, #1
    e25e:	d052      	beq.n	e306 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    e260:	2301      	movs	r3, #1
    e262:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    e266:	2300      	movs	r3, #0
    e268:	e9cd 1300 	strd	r1, r3, [sp]
    e26c:	1c4a      	adds	r2, r1, #1
    e26e:	1c8b      	adds	r3, r1, #2
    e270:	4620      	mov	r0, r4
    e272:	f10d 010f 	add.w	r1, sp, #15
    e276:	f007 fc8f 	bl	15b98 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    e27a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    e27e:	f043 0303 	orr.w	r3, r3, #3
    e282:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    e286:	b915      	cbnz	r5, e28e <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    e288:	4821      	ldr	r0, [pc, #132]	; (e310 <nrfx_gpiote_output_configure+0xd8>)
}
    e28a:	b005      	add	sp, #20
    e28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    e28e:	4e1f      	ldr	r6, [pc, #124]	; (e30c <nrfx_gpiote_output_configure+0xd4>)
    e290:	f104 0708 	add.w	r7, r4, #8
    e294:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    e298:	0783      	lsls	r3, r0, #30
    e29a:	d534      	bpl.n	e306 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    e29c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    e2a0:	4661      	mov	r1, ip
    e2a2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    e2a4:	f020 0020 	bic.w	r0, r0, #32
    e2a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    e2ac:	04c0      	lsls	r0, r0, #19
    e2ae:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    e2b2:	0cc0      	lsrs	r0, r0, #19
    e2b4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    e2b8:	2300      	movs	r3, #0
    e2ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    e2be:	786a      	ldrb	r2, [r5, #1]
    e2c0:	2a00      	cmp	r2, #0
    e2c2:	d0e1      	beq.n	e288 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    e2c4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    e2c8:	78ad      	ldrb	r5, [r5, #2]
    e2ca:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    e2ce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    e2d2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e2d6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    e2da:	0223      	lsls	r3, r4, #8
    e2dc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    e2e0:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e2e2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    e2e6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    e2ea:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e2ec:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    e2ee:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    e2f2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    e2f6:	432b      	orrs	r3, r5
    e2f8:	f040 0020 	orr.w	r0, r0, #32
    e2fc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    e300:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    e304:	e7c0      	b.n	e288 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    e306:	4803      	ldr	r0, [pc, #12]	; (e314 <nrfx_gpiote_output_configure+0xdc>)
    e308:	e7bf      	b.n	e28a <nrfx_gpiote_output_configure+0x52>
    e30a:	bf00      	nop
    e30c:	200002fc 	.word	0x200002fc
    e310:	0bad0000 	.word	0x0bad0000
    e314:	0bad0004 	.word	0x0bad0004

0000e318 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    e318:	4b01      	ldr	r3, [pc, #4]	; (e320 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    e31a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    e31e:	4770      	bx	lr
    e320:	200002fc 	.word	0x200002fc

0000e324 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    e324:	3008      	adds	r0, #8
    e326:	4b05      	ldr	r3, [pc, #20]	; (e33c <nrfx_gpiote_channel_get+0x18>)
    e328:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    e32c:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    e32e:	bf43      	ittte	mi
    e330:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    e332:	4803      	ldrmi	r0, [pc, #12]	; (e340 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    e334:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    e336:	4803      	ldrpl	r0, [pc, #12]	; (e344 <nrfx_gpiote_channel_get+0x20>)
}
    e338:	4770      	bx	lr
    e33a:	bf00      	nop
    e33c:	200002fc 	.word	0x200002fc
    e340:	0bad0000 	.word	0x0bad0000
    e344:	0bad0004 	.word	0x0bad0004

0000e348 <nrfx_gpiote_init>:
{
    e348:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    e34a:	4c0e      	ldr	r4, [pc, #56]	; (e384 <nrfx_gpiote_init+0x3c>)
    e34c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    e350:	b9b5      	cbnz	r5, e380 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    e352:	2260      	movs	r2, #96	; 0x60
    e354:	4629      	mov	r1, r5
    e356:	f104 0010 	add.w	r0, r4, #16
    e35a:	f007 fea4 	bl	160a6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    e35e:	2006      	movs	r0, #6
    e360:	f7fe f84c 	bl	c3fc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e364:	4b08      	ldr	r3, [pc, #32]	; (e388 <nrfx_gpiote_init+0x40>)
    return err_code;
    e366:	4809      	ldr	r0, [pc, #36]	; (e38c <nrfx_gpiote_init+0x44>)
    e368:	601d      	str	r5, [r3, #0]
    e36a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e36c:	4b08      	ldr	r3, [pc, #32]	; (e390 <nrfx_gpiote_init+0x48>)
    e36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    e372:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    e376:	2301      	movs	r3, #1
    e378:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    e37c:	6763      	str	r3, [r4, #116]	; 0x74
}
    e37e:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    e380:	4804      	ldr	r0, [pc, #16]	; (e394 <nrfx_gpiote_init+0x4c>)
    e382:	e7fc      	b.n	e37e <nrfx_gpiote_init+0x36>
    e384:	200002fc 	.word	0x200002fc
    e388:	4000617c 	.word	0x4000617c
    e38c:	0bad0000 	.word	0x0bad0000
    e390:	40006000 	.word	0x40006000
    e394:	0bad0005 	.word	0x0bad0005

0000e398 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    e398:	4b03      	ldr	r3, [pc, #12]	; (e3a8 <nrfx_gpiote_is_init+0x10>)
    e39a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    e39e:	3800      	subs	r0, #0
    e3a0:	bf18      	it	ne
    e3a2:	2001      	movne	r0, #1
    e3a4:	4770      	bx	lr
    e3a6:	bf00      	nop
    e3a8:	200002fc 	.word	0x200002fc

0000e3ac <nrfx_gpiote_channel_free>:
{
    e3ac:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    e3ae:	4801      	ldr	r0, [pc, #4]	; (e3b4 <nrfx_gpiote_channel_free+0x8>)
    e3b0:	f7ff bd20 	b.w	ddf4 <nrfx_flag32_free>
    e3b4:	2000036c 	.word	0x2000036c

0000e3b8 <nrfx_gpiote_channel_alloc>:
{
    e3b8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    e3ba:	4801      	ldr	r0, [pc, #4]	; (e3c0 <nrfx_gpiote_channel_alloc+0x8>)
    e3bc:	f7ff bcf4 	b.w	dda8 <nrfx_flag32_alloc>
    e3c0:	2000036c 	.word	0x2000036c

0000e3c4 <nrfx_gpiote_trigger_enable>:
{
    e3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    e3c6:	4b1f      	ldr	r3, [pc, #124]	; (e444 <nrfx_gpiote_trigger_enable+0x80>)
    e3c8:	f100 0208 	add.w	r2, r0, #8
{
    e3cc:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    e3ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    e3d2:	069a      	lsls	r2, r3, #26
    e3d4:	d51d      	bpl.n	e412 <nrfx_gpiote_trigger_enable+0x4e>
    e3d6:	f013 0502 	ands.w	r5, r3, #2
    e3da:	d11a      	bne.n	e412 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    e3dc:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    e3de:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    e3e0:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    e3e4:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    e3e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e3ec:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e3f0:	6005      	str	r5, [r0, #0]
    e3f2:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    e3f4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    e3f8:	f040 0001 	orr.w	r0, r0, #1
    e3fc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    e400:	b129      	cbz	r1, e40e <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    e402:	2201      	movs	r2, #1
    e404:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    e408:	4a0f      	ldr	r2, [pc, #60]	; (e448 <nrfx_gpiote_trigger_enable+0x84>)
    e40a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    e40e:	b003      	add	sp, #12
    e410:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    e412:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    e416:	2b04      	cmp	r3, #4
    e418:	d010      	beq.n	e43c <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    e41a:	2b05      	cmp	r3, #5
    e41c:	d010      	beq.n	e440 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e41e:	a801      	add	r0, sp, #4
    e420:	9401      	str	r4, [sp, #4]
    e422:	f7ff fdeb 	bl	dffc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    e426:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    e428:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    e42c:	40d9      	lsrs	r1, r3
    e42e:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    e432:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    e434:	4620      	mov	r0, r4
    e436:	f007 fbf6 	bl	15c26 <nrf_gpio_cfg_sense_set>
}
    e43a:	e7e8      	b.n	e40e <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    e43c:	2103      	movs	r1, #3
    e43e:	e7f9      	b.n	e434 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    e440:	2102      	movs	r1, #2
    e442:	e7f7      	b.n	e434 <nrfx_gpiote_trigger_enable+0x70>
    e444:	200002fc 	.word	0x200002fc
    e448:	40006000 	.word	0x40006000

0000e44c <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    e44c:	4b0e      	ldr	r3, [pc, #56]	; (e488 <nrfx_gpiote_trigger_disable+0x3c>)
    e44e:	f100 0208 	add.w	r2, r0, #8
    e452:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    e456:	0699      	lsls	r1, r3, #26
    e458:	d513      	bpl.n	e482 <nrfx_gpiote_trigger_disable+0x36>
    e45a:	079a      	lsls	r2, r3, #30
    e45c:	d411      	bmi.n	e482 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    e45e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    e460:	2201      	movs	r2, #1
    e462:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    e464:	009b      	lsls	r3, r3, #2
    e466:	4909      	ldr	r1, [pc, #36]	; (e48c <nrfx_gpiote_trigger_disable+0x40>)
    e468:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e46c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    e470:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    e474:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    e478:	f022 0203 	bic.w	r2, r2, #3
    e47c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    e480:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    e482:	2100      	movs	r1, #0
    e484:	f007 bbcf 	b.w	15c26 <nrf_gpio_cfg_sense_set>
    e488:	200002fc 	.word	0x200002fc
    e48c:	40006000 	.word	0x40006000

0000e490 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    e490:	4b0e      	ldr	r3, [pc, #56]	; (e4cc <nrfx_gpiote_pin_uninit+0x3c>)
    e492:	f100 0208 	add.w	r2, r0, #8
{
    e496:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    e498:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    e49c:	07db      	lsls	r3, r3, #31
{
    e49e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    e4a0:	d511      	bpl.n	e4c6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    e4a2:	f7ff ffd3 	bl	e44c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    e4a6:	4620      	mov	r0, r4
    e4a8:	f7ff fe00 	bl	e0ac <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e4ac:	a801      	add	r0, sp, #4
    e4ae:	9401      	str	r4, [sp, #4]
    e4b0:	f7ff fda4 	bl	dffc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    e4b4:	9b01      	ldr	r3, [sp, #4]
    e4b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    e4ba:	2202      	movs	r2, #2
    e4bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    e4c0:	4803      	ldr	r0, [pc, #12]	; (e4d0 <nrfx_gpiote_pin_uninit+0x40>)
}
    e4c2:	b002      	add	sp, #8
    e4c4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    e4c6:	4803      	ldr	r0, [pc, #12]	; (e4d4 <nrfx_gpiote_pin_uninit+0x44>)
    e4c8:	e7fb      	b.n	e4c2 <nrfx_gpiote_pin_uninit+0x32>
    e4ca:	bf00      	nop
    e4cc:	200002fc 	.word	0x200002fc
    e4d0:	0bad0000 	.word	0x0bad0000
    e4d4:	0bad0004 	.word	0x0bad0004

0000e4d8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4dc:	4b64      	ldr	r3, [pc, #400]	; (e670 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    e4de:	4865      	ldr	r0, [pc, #404]	; (e674 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    e4e0:	4965      	ldr	r1, [pc, #404]	; (e678 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    e4e2:	2500      	movs	r5, #0
{
    e4e4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    e4e6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e4e8:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e4ea:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    e4ec:	b136      	cbz	r6, e4fc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    e4ee:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    e4f2:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e4f4:	bf1e      	ittt	ne
    e4f6:	601c      	strne	r4, [r3, #0]
    e4f8:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    e4fa:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    e4fc:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    e4fe:	428b      	cmp	r3, r1
        mask <<= 1;
    e500:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    e504:	d1f1      	bne.n	e4ea <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e506:	4f5d      	ldr	r7, [pc, #372]	; (e67c <nrfx_gpiote_irq_handler+0x1a4>)
    e508:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    e50a:	b37b      	cbz	r3, e56c <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    e50c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e510:	4e5b      	ldr	r6, [pc, #364]	; (e680 <nrfx_gpiote_irq_handler+0x1a8>)
    e512:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    e516:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    e518:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    e51c:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    e520:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    e522:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    e526:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    e528:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    e52c:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    e530:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    e534:	f8d9 3000 	ldr.w	r3, [r9]
    e538:	b9f3      	cbnz	r3, e578 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    e53a:	f108 0820 	add.w	r8, r8, #32
    e53e:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    e542:	f109 0904 	add.w	r9, r9, #4
    e546:	d1f5      	bne.n	e534 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    e548:	603b      	str	r3, [r7, #0]
    e54a:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    e54c:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
    e54e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e552:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    e556:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    e558:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    e55c:	9b00      	ldr	r3, [sp, #0]
    e55e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    e562:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    e564:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    e568:	4313      	orrs	r3, r2
    e56a:	d1dd      	bne.n	e528 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    e56c:	2401      	movs	r4, #1
    while (mask)
    e56e:	2d00      	cmp	r5, #0
    e570:	d166      	bne.n	e640 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    e572:	b007      	add	sp, #28
    e574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    e578:	fa93 f3a3 	rbit	r3, r3
    e57c:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    e580:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    e584:	f106 0208 	add.w	r2, r6, #8
    e588:	4b3e      	ldr	r3, [pc, #248]	; (e684 <nrfx_gpiote_irq_handler+0x1ac>)
    e58a:	9603      	str	r6, [sp, #12]
    e58c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    e590:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    e594:	08f4      	lsrs	r4, r6, #3
    e596:	9301      	str	r3, [sp, #4]
    e598:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    e59a:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
    e59c:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    e5a0:	fa0b fc00 	lsl.w	ip, fp, r0
    e5a4:	5d18      	ldrb	r0, [r3, r4]
    e5a6:	ea20 000c 	bic.w	r0, r0, ip
    e5aa:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e5ac:	a803      	add	r0, sp, #12
    e5ae:	0891      	lsrs	r1, r2, #2
    e5b0:	f7ff fd24 	bl	dffc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    e5b4:	9c03      	ldr	r4, [sp, #12]
    e5b6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
    e5ba:	074b      	lsls	r3, r1, #29
    e5bc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    e5c0:	f3c4 4401 	ubfx	r4, r4, #16, #2
    e5c4:	d523      	bpl.n	e60e <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
    e5c6:	4651      	mov	r1, sl
    e5c8:	4630      	mov	r0, r6
    e5ca:	f7ff fd25 	bl	e018 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e5ce:	a803      	add	r0, sp, #12
    e5d0:	9603      	str	r6, [sp, #12]
    e5d2:	f7ff fd13 	bl	dffc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    e5d6:	9a03      	ldr	r2, [sp, #12]
    e5d8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    e5dc:	b2e4      	uxtb	r4, r4
    e5de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    e5e2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    e5e6:	4294      	cmp	r4, r2
    e5e8:	d107      	bne.n	e5fa <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    e5ea:	2100      	movs	r1, #0
    e5ec:	4630      	mov	r0, r6
    e5ee:	f007 fb1a 	bl	15c26 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    e5f2:	4621      	mov	r1, r4
    e5f4:	4630      	mov	r0, r6
    e5f6:	f007 fb16 	bl	15c26 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e5fa:	a803      	add	r0, sp, #12
    e5fc:	9603      	str	r6, [sp, #12]
    e5fe:	f7ff fcfd 	bl	dffc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    e602:	9b03      	ldr	r3, [sp, #12]
    e604:	fa0b f303 	lsl.w	r3, fp, r3
    e608:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    e60c:	e792      	b.n	e534 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    e60e:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    e610:	bf0c      	ite	eq
    e612:	2103      	moveq	r1, #3
    e614:	2102      	movne	r1, #2
    e616:	4630      	mov	r0, r6
    e618:	f007 fb05 	bl	15c26 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    e61c:	9b01      	ldr	r3, [sp, #4]
    e61e:	2b03      	cmp	r3, #3
    e620:	d004      	beq.n	e62c <nrfx_gpiote_irq_handler+0x154>
    e622:	2c02      	cmp	r4, #2
    e624:	d107      	bne.n	e636 <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    e626:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    e62a:	d1e6      	bne.n	e5fa <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
    e62c:	4651      	mov	r1, sl
    e62e:	4630      	mov	r0, r6
    e630:	f7ff fcf2 	bl	e018 <call_handler>
    e634:	e7e1      	b.n	e5fa <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    e636:	2c03      	cmp	r4, #3
    e638:	d1df      	bne.n	e5fa <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    e63a:	f1ba 0f02 	cmp.w	sl, #2
    e63e:	e7f4      	b.n	e62a <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
    e640:	fa95 f3a5 	rbit	r3, r5
    e644:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    e648:	fa04 f203 	lsl.w	r2, r4, r3
    e64c:	009b      	lsls	r3, r3, #2
    e64e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e652:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    e656:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    e65a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    e65e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    e662:	f3c0 2005 	ubfx	r0, r0, #8, #6
    e666:	f3c1 4101 	ubfx	r1, r1, #16, #2
    e66a:	f7ff fcd5 	bl	e018 <call_handler>
    e66e:	e77e      	b.n	e56e <nrfx_gpiote_irq_handler+0x96>
    e670:	40006100 	.word	0x40006100
    e674:	40006000 	.word	0x40006000
    e678:	40006120 	.word	0x40006120
    e67c:	4000617c 	.word	0x4000617c
    e680:	50000300 	.word	0x50000300
    e684:	200002fc 	.word	0x200002fc

0000e688 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    e688:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    e68a:	4801      	ldr	r0, [pc, #4]	; (e690 <nrfx_ppi_channel_alloc+0x8>)
    e68c:	f7ff bb8c 	b.w	dda8 <nrfx_flag32_alloc>
    e690:	20000378 	.word	0x20000378

0000e694 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    e694:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    e696:	4c14      	ldr	r4, [pc, #80]	; (e6e8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    e698:	4a14      	ldr	r2, [pc, #80]	; (e6ec <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    e69a:	4915      	ldr	r1, [pc, #84]	; (e6f0 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    e69c:	2303      	movs	r3, #3
    e69e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    e6a0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    e6a2:	4b14      	ldr	r3, [pc, #80]	; (e6f4 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    e6a4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    e6a6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    e6a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e6ac:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    e6ae:	2300      	movs	r3, #0
    e6b0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    e6b2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    e6b4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    e6b6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    e6b8:	4a0f      	ldr	r2, [pc, #60]	; (e6f8 <_DoInit+0x64>)
    e6ba:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    e6bc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    e6be:	2210      	movs	r2, #16
    e6c0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    e6c2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    e6c4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    e6c6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    e6c8:	f007 fe64 	bl	16394 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    e6cc:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    e6d0:	490a      	ldr	r1, [pc, #40]	; (e6fc <_DoInit+0x68>)
    e6d2:	4620      	mov	r0, r4
    e6d4:	f007 fe5e 	bl	16394 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    e6d8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    e6dc:	2320      	movs	r3, #32
    e6de:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    e6e0:	f3bf 8f5f 	dmb	sy
}
    e6e4:	bd10      	pop	{r4, pc}
    e6e6:	bf00      	nop
    e6e8:	200017ac 	.word	0x200017ac
    e6ec:	00046ccd 	.word	0x00046ccd
    e6f0:	00046cd6 	.word	0x00046cd6
    e6f4:	20001ec6 	.word	0x20001ec6
    e6f8:	20001eb6 	.word	0x20001eb6
    e6fc:	00046cda 	.word	0x00046cda

0000e700 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e700:	4b0e      	ldr	r3, [pc, #56]	; (e73c <z_sys_init_run_level+0x3c>)
{
    e702:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e704:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    e708:	3001      	adds	r0, #1
    e70a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    e70e:	42a6      	cmp	r6, r4
    e710:	d800      	bhi.n	e714 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    e712:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    e714:	e9d4 3500 	ldrd	r3, r5, [r4]
    e718:	4628      	mov	r0, r5
    e71a:	4798      	blx	r3
		if (dev != NULL) {
    e71c:	b165      	cbz	r5, e738 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    e71e:	68eb      	ldr	r3, [r5, #12]
    e720:	b130      	cbz	r0, e730 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    e722:	2800      	cmp	r0, #0
    e724:	bfb8      	it	lt
    e726:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    e728:	28ff      	cmp	r0, #255	; 0xff
    e72a:	bfa8      	it	ge
    e72c:	20ff      	movge	r0, #255	; 0xff
    e72e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    e730:	785a      	ldrb	r2, [r3, #1]
    e732:	f042 0201 	orr.w	r2, r2, #1
    e736:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    e738:	3408      	adds	r4, #8
    e73a:	e7e8      	b.n	e70e <z_sys_init_run_level+0xe>
    e73c:	00040200 	.word	0x00040200

0000e740 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    e740:	4b01      	ldr	r3, [pc, #4]	; (e748 <z_impl_z_errno+0x8>)
    e742:	6898      	ldr	r0, [r3, #8]
}
    e744:	3060      	adds	r0, #96	; 0x60
    e746:	4770      	bx	lr
    e748:	20001854 	.word	0x20001854

0000e74c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    e74c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    e74e:	4b0b      	ldr	r3, [pc, #44]	; (e77c <bg_thread_main+0x30>)
    e750:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    e752:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    e754:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    e756:	f7ff ffd3 	bl	e700 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    e75a:	f000 ff9d 	bl	f698 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    e75e:	f006 fe51 	bl	15404 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    e762:	2003      	movs	r0, #3
    e764:	f7ff ffcc 	bl	e700 <z_sys_init_run_level>

	z_init_static_threads();
    e768:	f000 f93e 	bl	e9e8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    e76c:	f7fc f860 	bl	a830 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    e770:	4a03      	ldr	r2, [pc, #12]	; (e780 <bg_thread_main+0x34>)
    e772:	7b13      	ldrb	r3, [r2, #12]
    e774:	f023 0301 	bic.w	r3, r3, #1
    e778:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    e77a:	bd08      	pop	{r3, pc}
    e77c:	200022c6 	.word	0x200022c6
    e780:	20000738 	.word	0x20000738

0000e784 <z_bss_zero>:
{
    e784:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    e786:	4803      	ldr	r0, [pc, #12]	; (e794 <z_bss_zero+0x10>)
    e788:	4a03      	ldr	r2, [pc, #12]	; (e798 <z_bss_zero+0x14>)
    e78a:	2100      	movs	r1, #0
    e78c:	1a12      	subs	r2, r2, r0
    e78e:	f007 fa87 	bl	15ca0 <z_early_memset>
}
    e792:	bd08      	pop	{r3, pc}
    e794:	20000658 	.word	0x20000658
    e798:	200022d0 	.word	0x200022d0

0000e79c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    e79c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    e79e:	4b16      	ldr	r3, [pc, #88]	; (e7f8 <z_init_cpu+0x5c>)
	z_setup_new_thread(thread, stack,
    e7a0:	4916      	ldr	r1, [pc, #88]	; (e7fc <z_init_cpu+0x60>)
	struct k_thread *thread = &z_idle_threads[i];
    e7a2:	26c0      	movs	r6, #192	; 0xc0
{
    e7a4:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    e7a6:	fb06 3600 	mla	r6, r6, r0, r3
	z_setup_new_thread(thread, stack,
    e7aa:	2201      	movs	r2, #1
    e7ac:	2300      	movs	r3, #0
    e7ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e7b2:	220f      	movs	r2, #15
    e7b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    e7b8:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    e7ba:	4b11      	ldr	r3, [pc, #68]	; (e800 <z_init_cpu+0x64>)
    e7bc:	2518      	movs	r5, #24
    e7be:	fb05 3500 	mla	r5, r5, r0, r3
{
    e7c2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    e7c4:	f44f 70c0 	mov.w	r0, #384	; 0x180
    e7c8:	fb00 1104 	mla	r1, r0, r4, r1
    e7cc:	4b0d      	ldr	r3, [pc, #52]	; (e804 <z_init_cpu+0x68>)
    e7ce:	9500      	str	r5, [sp, #0]
    e7d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    e7d4:	4630      	mov	r0, r6
    e7d6:	f000 f8d5 	bl	e984 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e7da:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    e7dc:	480a      	ldr	r0, [pc, #40]	; (e808 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    e7de:	752c      	strb	r4, [r5, #20]
    e7e0:	f023 0304 	bic.w	r3, r3, #4
    e7e4:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    e7e6:	f44f 6308 	mov.w	r3, #2176	; 0x880
    e7ea:	fb03 0404 	mla	r4, r3, r4, r0
    e7ee:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    e7f0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    e7f2:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    e7f4:	b006      	add	sp, #24
    e7f6:	bd70      	pop	{r4, r5, r6, pc}
    e7f8:	20000678 	.word	0x20000678
    e7fc:	20004380 	.word	0x20004380
    e800:	20001854 	.word	0x20001854
    e804:	0000eaa5 	.word	0x0000eaa5
    e808:	20004500 	.word	0x20004500

0000e80c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    e80c:	b500      	push	{lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    e80e:	4b2d      	ldr	r3, [pc, #180]	; (e8c4 <z_cstart+0xb8>)
    e810:	b0b9      	sub	sp, #228	; 0xe4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    e812:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    e816:	4d2c      	ldr	r5, [pc, #176]	; (e8c8 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    e818:	4e2c      	ldr	r6, [pc, #176]	; (e8cc <z_cstart+0xc0>)
    e81a:	696b      	ldr	r3, [r5, #20]
    e81c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e820:	2400      	movs	r4, #0
    e822:	616b      	str	r3, [r5, #20]
    e824:	23e0      	movs	r3, #224	; 0xe0
    e826:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    e82a:	77ec      	strb	r4, [r5, #31]
    e82c:	762c      	strb	r4, [r5, #24]
    e82e:	766c      	strb	r4, [r5, #25]
    e830:	76ac      	strb	r4, [r5, #26]
    e832:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    e836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e838:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    e83c:	626b      	str	r3, [r5, #36]	; 0x24
    e83e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    e842:	f7fe f87f 	bl	c944 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    e846:	f7fd fdbb 	bl	c3c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    e84a:	f04f 33ff 	mov.w	r3, #4294967295
    e84e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    e850:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    e852:	f7fe f9ab 	bl	cbac <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    e856:	f7fe f915 	bl	ca84 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    e85a:	f240 1301 	movw	r3, #257	; 0x101
    e85e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    e862:	ab08      	add	r3, sp, #32
    e864:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    e866:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	dummy_thread->resource_pool = NULL;
    e86a:	9424      	str	r4, [sp, #144]	; 0x90
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    e86c:	f007 f9f1 	bl	15c52 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    e870:	4620      	mov	r0, r4
	_kernel.ready_q.cache = &z_main_thread;
    e872:	4d17      	ldr	r5, [pc, #92]	; (e8d0 <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    e874:	f7ff ff44 	bl	e700 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    e878:	2001      	movs	r0, #1
    e87a:	f7ff ff41 	bl	e700 <z_sys_init_run_level>
	z_sched_init();
    e87e:	f000 fc8b 	bl	f198 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    e882:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    e884:	4b13      	ldr	r3, [pc, #76]	; (e8d4 <z_cstart+0xc8>)
    e886:	4e14      	ldr	r6, [pc, #80]	; (e8d8 <z_cstart+0xcc>)
    e888:	9305      	str	r3, [sp, #20]
    e88a:	2301      	movs	r3, #1
    e88c:	4913      	ldr	r1, [pc, #76]	; (e8dc <z_cstart+0xd0>)
    e88e:	9400      	str	r4, [sp, #0]
    e890:	e9cd 4303 	strd	r4, r3, [sp, #12]
    e894:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    e898:	4633      	mov	r3, r6
    e89a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e89e:	4628      	mov	r0, r5
    e8a0:	f000 f870 	bl	e984 <z_setup_new_thread>
    e8a4:	7b6a      	ldrb	r2, [r5, #13]
    e8a6:	9007      	str	r0, [sp, #28]
    e8a8:	f022 0204 	bic.w	r2, r2, #4
    e8ac:	736a      	strb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    e8ae:	4628      	mov	r0, r5
    e8b0:	f007 fa85 	bl	15dbe <z_ready_thread>
	z_init_cpu(0);
    e8b4:	4620      	mov	r0, r4
    e8b6:	f7ff ff71 	bl	e79c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    e8ba:	9907      	ldr	r1, [sp, #28]
    e8bc:	4632      	mov	r2, r6
    e8be:	4628      	mov	r0, r5
    e8c0:	f7fd fefe 	bl	c6c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    e8c4:	20004d80 	.word	0x20004d80
    e8c8:	e000ed00 	.word	0xe000ed00
    e8cc:	20001854 	.word	0x20001854
    e8d0:	20000738 	.word	0x20000738
    e8d4:	00046ce1 	.word	0x00046ce1
    e8d8:	0000e74d 	.word	0x0000e74d
    e8dc:	20002300 	.word	0x20002300

0000e8e0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    e8e0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    e8e2:	4b0e      	ldr	r3, [pc, #56]	; (e91c <init_mem_slab_module+0x3c>)
    e8e4:	4c0e      	ldr	r4, [pc, #56]	; (e920 <init_mem_slab_module+0x40>)
    e8e6:	42a3      	cmp	r3, r4
    e8e8:	d301      	bcc.n	e8ee <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    e8ea:	2000      	movs	r0, #0
	return rc;
}
    e8ec:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    e8ee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    e8f2:	ea41 0200 	orr.w	r2, r1, r0
    e8f6:	f012 0203 	ands.w	r2, r2, #3
    e8fa:	d10b      	bne.n	e914 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    e8fc:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
    e8fe:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    e900:	42aa      	cmp	r2, r5
    e902:	d101      	bne.n	e908 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    e904:	3320      	adds	r3, #32
    e906:	e7ee      	b.n	e8e6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    e908:	699e      	ldr	r6, [r3, #24]
    e90a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    e90c:	3201      	adds	r2, #1
		slab->free_list = p;
    e90e:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
    e910:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    e912:	e7f5      	b.n	e900 <init_mem_slab_module+0x20>
		return -EINVAL;
    e914:	f06f 0015 	mvn.w	r0, #21
	return rc;
    e918:	e7e8      	b.n	e8ec <init_mem_slab_module+0xc>
    e91a:	bf00      	nop
    e91c:	200005cc 	.word	0x200005cc
    e920:	200005cc 	.word	0x200005cc

0000e924 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    e924:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    e926:	460c      	mov	r4, r1
    e928:	4616      	mov	r6, r2
    e92a:	461f      	mov	r7, r3
	__asm__ volatile(
    e92c:	f04f 0320 	mov.w	r3, #32
    e930:	f3ef 8111 	mrs	r1, BASEPRI
    e934:	f383 8812 	msr	BASEPRI_MAX, r3
    e938:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    e93c:	6983      	ldr	r3, [r0, #24]
    e93e:	b15b      	cbz	r3, e958 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    e940:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    e942:	681b      	ldr	r3, [r3, #0]
    e944:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    e946:	69c3      	ldr	r3, [r0, #28]
    e948:	3301      	adds	r3, #1
    e94a:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    e94c:	2000      	movs	r0, #0
	__asm__ volatile(
    e94e:	f381 8811 	msr	BASEPRI, r1
    e952:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    e956:	e011      	b.n	e97c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    e958:	ea56 0207 	orrs.w	r2, r6, r7
    e95c:	d103      	bne.n	e966 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    e95e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    e960:	f06f 000b 	mvn.w	r0, #11
    e964:	e7f3      	b.n	e94e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    e966:	4602      	mov	r2, r0
    e968:	e9cd 6700 	strd	r6, r7, [sp]
    e96c:	3008      	adds	r0, #8
    e96e:	f000 fb65 	bl	f03c <z_pend_curr>
		if (result == 0) {
    e972:	b918      	cbnz	r0, e97c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    e974:	4b02      	ldr	r3, [pc, #8]	; (e980 <k_mem_slab_alloc+0x5c>)
    e976:	689b      	ldr	r3, [r3, #8]
    e978:	695b      	ldr	r3, [r3, #20]
    e97a:	6023      	str	r3, [r4, #0]
}
    e97c:	b002      	add	sp, #8
    e97e:	bdd0      	pop	{r4, r6, r7, pc}
    e980:	20001854 	.word	0x20001854

0000e984 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    e984:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    e988:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    e98a:	7306      	strb	r6, [r0, #12]
{
    e98c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e98e:	3207      	adds	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    e990:	f100 0558 	add.w	r5, r0, #88	; 0x58
    e994:	f022 0207 	bic.w	r2, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    e998:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    e99a:	3720      	adds	r7, #32
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    e99c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
    e9a0:	e9c0 7219 	strd	r7, r2, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    e9a4:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
    e9a6:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e9a8:	f102 0820 	add.w	r8, r2, #32

	thread_base->prio = priority;
    e9ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e9ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    e9b0:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    e9b2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
    e9b6:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
    e9b8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    e9ba:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e9bc:	9202      	str	r2, [sp, #8]
    e9be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e9c0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    e9c2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e9c6:	9200      	str	r2, [sp, #0]
    e9c8:	4642      	mov	r2, r8
{
    e9ca:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e9cc:	f7fd fdf0 	bl	c5b0 <arch_new_thread>
	if (!_current) {
    e9d0:	4b04      	ldr	r3, [pc, #16]	; (e9e4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    e9d2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    e9d4:	689b      	ldr	r3, [r3, #8]
    e9d6:	b103      	cbz	r3, e9da <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    e9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    e9da:	6723      	str	r3, [r4, #112]	; 0x70
}
    e9dc:	4640      	mov	r0, r8
    e9de:	b004      	add	sp, #16
    e9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9e4:	20001854 	.word	0x20001854

0000e9e8 <z_init_static_threads>:
{
    e9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    e9ec:	4e2a      	ldr	r6, [pc, #168]	; (ea98 <z_init_static_threads+0xb0>)
    e9ee:	4d2b      	ldr	r5, [pc, #172]	; (ea9c <z_init_static_threads+0xb4>)
{
    e9f0:	b086      	sub	sp, #24
    e9f2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    e9f4:	42b5      	cmp	r5, r6
    e9f6:	f105 0430 	add.w	r4, r5, #48	; 0x30
    e9fa:	d310      	bcc.n	ea1e <z_init_static_threads+0x36>
	k_sched_lock();
    e9fc:	f000 f9d4 	bl	eda8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    ea00:	4c26      	ldr	r4, [pc, #152]	; (ea9c <z_init_static_threads+0xb4>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ea02:	f8df a09c 	ldr.w	sl, [pc, #156]	; eaa0 <z_init_static_threads+0xb8>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    ea06:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    ea0a:	f240 36e7 	movw	r6, #999	; 0x3e7
    ea0e:	2700      	movs	r7, #0
    ea10:	4544      	cmp	r4, r8
    ea12:	d321      	bcc.n	ea58 <z_init_static_threads+0x70>
}
    ea14:	b006      	add	sp, #24
    ea16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    ea1a:	f000 bba1 	b.w	f160 <k_sched_unlock>
		z_setup_new_thread(
    ea1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ea22:	9305      	str	r3, [sp, #20]
    ea24:	f854 3c10 	ldr.w	r3, [r4, #-16]
    ea28:	9304      	str	r3, [sp, #16]
    ea2a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    ea2e:	9303      	str	r3, [sp, #12]
    ea30:	f854 3c18 	ldr.w	r3, [r4, #-24]
    ea34:	9302      	str	r3, [sp, #8]
    ea36:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    ea3a:	9301      	str	r3, [sp, #4]
    ea3c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    ea40:	9300      	str	r3, [sp, #0]
    ea42:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    ea46:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    ea4a:	f7ff ff9b 	bl	e984 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    ea4e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    ea52:	655d      	str	r5, [r3, #84]	; 0x54
    ea54:	4625      	mov	r5, r4
    ea56:	e7cd      	b.n	e9f4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    ea58:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ea5a:	1c5a      	adds	r2, r3, #1
    ea5c:	d00d      	beq.n	ea7a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    ea5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ea62:	4630      	mov	r0, r6
    ea64:	4639      	mov	r1, r7
    ea66:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    ea6a:	42b9      	cmp	r1, r7
    ea6c:	bf08      	it	eq
    ea6e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    ea70:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    ea72:	d104      	bne.n	ea7e <z_init_static_threads+0x96>
	z_sched_start(thread);
    ea74:	4628      	mov	r0, r5
    ea76:	f000 fa85 	bl	ef84 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    ea7a:	3430      	adds	r4, #48	; 0x30
    ea7c:	e7c8      	b.n	ea10 <z_init_static_threads+0x28>
    ea7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ea82:	2300      	movs	r3, #0
    ea84:	f7f2 f8aa 	bl	bdc <__aeabi_uldivmod>
    ea88:	4602      	mov	r2, r0
    ea8a:	460b      	mov	r3, r1
    ea8c:	f105 0018 	add.w	r0, r5, #24
    ea90:	4651      	mov	r1, sl
    ea92:	f000 fcf3 	bl	f47c <z_add_timeout>
    ea96:	e7f0      	b.n	ea7a <z_init_static_threads+0x92>
    ea98:	200005cc 	.word	0x200005cc
    ea9c:	200005cc 	.word	0x200005cc
    eaa0:	00015ddf 	.word	0x00015ddf

0000eaa4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    eaa4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    eaa6:	4c0b      	ldr	r4, [pc, #44]	; (ead4 <idle+0x30>)
	return !z_sys_post_kernel;
    eaa8:	4d0b      	ldr	r5, [pc, #44]	; (ead8 <idle+0x34>)
	__asm__ volatile(
    eaaa:	f04f 0220 	mov.w	r2, #32
    eaae:	f3ef 8311 	mrs	r3, BASEPRI
    eab2:	f382 8812 	msr	BASEPRI_MAX, r2
    eab6:	f3bf 8f6f 	isb	sy
    eaba:	f007 fa0d 	bl	15ed8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    eabe:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    eac0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    eac2:	b913      	cbnz	r3, eaca <idle+0x26>
	arch_cpu_idle();
    eac4:	f7fd fc82 	bl	c3cc <arch_cpu_idle>
}
    eac8:	e7ef      	b.n	eaaa <idle+0x6>
    eaca:	f7fd fad5 	bl	c078 <pm_system_suspend>
    eace:	2800      	cmp	r0, #0
    ead0:	d1eb      	bne.n	eaaa <idle+0x6>
    ead2:	e7f7      	b.n	eac4 <idle+0x20>
    ead4:	20001854 	.word	0x20001854
    ead8:	200022c6 	.word	0x200022c6

0000eadc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    eadc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    eae0:	4604      	mov	r4, r0
    eae2:	4616      	mov	r6, r2
    eae4:	461f      	mov	r7, r3
    eae6:	f04f 0320 	mov.w	r3, #32
    eaea:	f3ef 8811 	mrs	r8, BASEPRI
    eaee:	f383 8812 	msr	BASEPRI_MAX, r3
    eaf2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    eaf6:	68c3      	ldr	r3, [r0, #12]
    eaf8:	4a35      	ldr	r2, [pc, #212]	; (ebd0 <z_impl_k_mutex_lock+0xf4>)
    eafa:	b16b      	cbz	r3, eb18 <z_impl_k_mutex_lock+0x3c>
    eafc:	6880      	ldr	r0, [r0, #8]
    eafe:	6891      	ldr	r1, [r2, #8]
    eb00:	4288      	cmp	r0, r1
    eb02:	d019      	beq.n	eb38 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    eb04:	ea56 0307 	orrs.w	r3, r6, r7
    eb08:	d118      	bne.n	eb3c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    eb0a:	f388 8811 	msr	BASEPRI, r8
    eb0e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    eb12:	f06f 000f 	mvn.w	r0, #15
    eb16:	e00c      	b.n	eb32 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    eb18:	6891      	ldr	r1, [r2, #8]
    eb1a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    eb1e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    eb20:	3301      	adds	r3, #1
    eb22:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    eb24:	6893      	ldr	r3, [r2, #8]
    eb26:	60a3      	str	r3, [r4, #8]
    eb28:	f388 8811 	msr	BASEPRI, r8
    eb2c:	f3bf 8f6f 	isb	sy
		return 0;
    eb30:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    eb32:	b002      	add	sp, #8
    eb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    eb38:	6921      	ldr	r1, [r4, #16]
    eb3a:	e7f0      	b.n	eb1e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    eb3c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    eb40:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    eb44:	4299      	cmp	r1, r3
    eb46:	bfa8      	it	ge
    eb48:	4619      	movge	r1, r3
    eb4a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    eb4e:	4291      	cmp	r1, r2
    eb50:	bfb8      	it	lt
    eb52:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    eb54:	428b      	cmp	r3, r1
    eb56:	dd2f      	ble.n	ebb8 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    eb58:	f000 fa84 	bl	f064 <z_set_prio>
    eb5c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    eb5e:	e9cd 6700 	strd	r6, r7, [sp]
    eb62:	481c      	ldr	r0, [pc, #112]	; (ebd4 <z_impl_k_mutex_lock+0xf8>)
    eb64:	4622      	mov	r2, r4
    eb66:	4641      	mov	r1, r8
    eb68:	f000 fa68 	bl	f03c <z_pend_curr>
	if (got_mutex == 0) {
    eb6c:	2800      	cmp	r0, #0
    eb6e:	d0e0      	beq.n	eb32 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    eb70:	f04f 0320 	mov.w	r3, #32
    eb74:	f3ef 8611 	mrs	r6, BASEPRI
    eb78:	f383 8812 	msr	BASEPRI_MAX, r3
    eb7c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    eb80:	6823      	ldr	r3, [r4, #0]
    eb82:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eb84:	429c      	cmp	r4, r3
    eb86:	d00a      	beq.n	eb9e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    eb88:	b14b      	cbz	r3, eb9e <z_impl_k_mutex_lock+0xc2>
    eb8a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    eb8e:	4299      	cmp	r1, r3
    eb90:	bfa8      	it	ge
    eb92:	4619      	movge	r1, r3
    eb94:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    eb98:	4299      	cmp	r1, r3
    eb9a:	bfb8      	it	lt
    eb9c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    eb9e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    eba0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    eba4:	4299      	cmp	r1, r3
    eba6:	d109      	bne.n	ebbc <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    eba8:	b16d      	cbz	r5, ebc6 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    ebaa:	480a      	ldr	r0, [pc, #40]	; (ebd4 <z_impl_k_mutex_lock+0xf8>)
    ebac:	4631      	mov	r1, r6
    ebae:	f000 f8e9 	bl	ed84 <z_reschedule>
	return -EAGAIN;
    ebb2:	f06f 000a 	mvn.w	r0, #10
    ebb6:	e7bc      	b.n	eb32 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    ebb8:	2500      	movs	r5, #0
    ebba:	e7d0      	b.n	eb5e <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    ebbc:	f000 fa52 	bl	f064 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    ebc0:	2800      	cmp	r0, #0
    ebc2:	d1f2      	bne.n	ebaa <z_impl_k_mutex_lock+0xce>
    ebc4:	e7f0      	b.n	eba8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    ebc6:	f386 8811 	msr	BASEPRI, r6
    ebca:	f3bf 8f6f 	isb	sy
    ebce:	e7f0      	b.n	ebb2 <z_impl_k_mutex_lock+0xd6>
    ebd0:	20001854 	.word	0x20001854
    ebd4:	200022c7 	.word	0x200022c7

0000ebd8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    ebd8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    ebda:	6883      	ldr	r3, [r0, #8]
{
    ebdc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    ebde:	2b00      	cmp	r3, #0
    ebe0:	d036      	beq.n	ec50 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    ebe2:	4a1e      	ldr	r2, [pc, #120]	; (ec5c <z_impl_k_mutex_unlock+0x84>)
    ebe4:	6892      	ldr	r2, [r2, #8]
    ebe6:	4293      	cmp	r3, r2
    ebe8:	d135      	bne.n	ec56 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    ebea:	7bda      	ldrb	r2, [r3, #15]
    ebec:	3a01      	subs	r2, #1
    ebee:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    ebf0:	68c3      	ldr	r3, [r0, #12]
    ebf2:	2b01      	cmp	r3, #1
    ebf4:	d905      	bls.n	ec02 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    ebf6:	3b01      	subs	r3, #1
    ebf8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    ebfa:	f000 fab1 	bl	f160 <k_sched_unlock>

	return 0;
    ebfe:	2000      	movs	r0, #0
}
    ec00:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    ec02:	f04f 0320 	mov.w	r3, #32
    ec06:	f3ef 8511 	mrs	r5, BASEPRI
    ec0a:	f383 8812 	msr	BASEPRI_MAX, r3
    ec0e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ec12:	6901      	ldr	r1, [r0, #16]
    ec14:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    ec16:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ec1a:	4299      	cmp	r1, r3
    ec1c:	d001      	beq.n	ec22 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    ec1e:	f000 fa21 	bl	f064 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ec22:	4620      	mov	r0, r4
    ec24:	f007 f92a 	bl	15e7c <z_unpend_first_thread>
	mutex->owner = new_owner;
    ec28:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ec2a:	b158      	cbz	r0, ec44 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    ec2c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    ec30:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ec32:	2200      	movs	r2, #0
    ec34:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    ec36:	f007 f8c2 	bl	15dbe <z_ready_thread>
		z_reschedule(&lock, key);
    ec3a:	4809      	ldr	r0, [pc, #36]	; (ec60 <z_impl_k_mutex_unlock+0x88>)
    ec3c:	4629      	mov	r1, r5
    ec3e:	f000 f8a1 	bl	ed84 <z_reschedule>
    ec42:	e7da      	b.n	ebfa <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    ec44:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    ec46:	f385 8811 	msr	BASEPRI, r5
    ec4a:	f3bf 8f6f 	isb	sy
    ec4e:	e7d4      	b.n	ebfa <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    ec50:	f06f 0015 	mvn.w	r0, #21
    ec54:	e7d4      	b.n	ec00 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    ec56:	f04f 30ff 	mov.w	r0, #4294967295
    ec5a:	e7d1      	b.n	ec00 <z_impl_k_mutex_unlock+0x28>
    ec5c:	20001854 	.word	0x20001854
    ec60:	200022c7 	.word	0x200022c7

0000ec64 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    ec64:	b538      	push	{r3, r4, r5, lr}
    ec66:	4604      	mov	r4, r0
	__asm__ volatile(
    ec68:	f04f 0320 	mov.w	r3, #32
    ec6c:	f3ef 8511 	mrs	r5, BASEPRI
    ec70:	f383 8812 	msr	BASEPRI_MAX, r3
    ec74:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    ec78:	f007 f900 	bl	15e7c <z_unpend_first_thread>

	if (thread != NULL) {
    ec7c:	b148      	cbz	r0, ec92 <z_impl_k_sem_give+0x2e>
    ec7e:	2200      	movs	r2, #0
    ec80:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    ec82:	f007 f89c 	bl	15dbe <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    ec86:	4629      	mov	r1, r5
    ec88:	4805      	ldr	r0, [pc, #20]	; (eca0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    ec8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    ec8e:	f000 b879 	b.w	ed84 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    ec92:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    ec96:	429a      	cmp	r2, r3
    ec98:	bf18      	it	ne
    ec9a:	3301      	addne	r3, #1
    ec9c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    ec9e:	e7f2      	b.n	ec86 <z_impl_k_sem_give+0x22>
    eca0:	200022c8 	.word	0x200022c8

0000eca4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    eca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eca6:	4614      	mov	r4, r2
    eca8:	461d      	mov	r5, r3
    ecaa:	f04f 0320 	mov.w	r3, #32
    ecae:	f3ef 8111 	mrs	r1, BASEPRI
    ecb2:	f383 8812 	msr	BASEPRI_MAX, r3
    ecb6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    ecba:	6883      	ldr	r3, [r0, #8]
    ecbc:	b143      	cbz	r3, ecd0 <z_impl_k_sem_take+0x2c>
		sem->count--;
    ecbe:	3b01      	subs	r3, #1
    ecc0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    ecc2:	f381 8811 	msr	BASEPRI, r1
    ecc6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    ecca:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    eccc:	b003      	add	sp, #12
    ecce:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ecd0:	ea54 0305 	orrs.w	r3, r4, r5
    ecd4:	d106      	bne.n	ece4 <z_impl_k_sem_take+0x40>
    ecd6:	f381 8811 	msr	BASEPRI, r1
    ecda:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    ecde:	f06f 000f 	mvn.w	r0, #15
    ece2:	e7f3      	b.n	eccc <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ece4:	4602      	mov	r2, r0
    ece6:	e9cd 4500 	strd	r4, r5, [sp]
    ecea:	4802      	ldr	r0, [pc, #8]	; (ecf4 <z_impl_k_sem_take+0x50>)
    ecec:	f000 f9a6 	bl	f03c <z_pend_curr>
	return ret;
    ecf0:	e7ec      	b.n	eccc <z_impl_k_sem_take+0x28>
    ecf2:	bf00      	nop
    ecf4:	200022c8 	.word	0x200022c8

0000ecf8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    ecf8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    ecfa:	4d07      	ldr	r5, [pc, #28]	; (ed18 <z_reset_time_slice+0x20>)
    ecfc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    ecfe:	b154      	cbz	r4, ed16 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    ed00:	f7fe feee 	bl	dae0 <sys_clock_elapsed>
    ed04:	4b05      	ldr	r3, [pc, #20]	; (ed1c <z_reset_time_slice+0x24>)
    ed06:	4420      	add	r0, r4
    ed08:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    ed0a:	2100      	movs	r1, #0
    ed0c:	6828      	ldr	r0, [r5, #0]
	}
}
    ed0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    ed12:	f007 b8f1 	b.w	15ef8 <z_set_timeout_expiry>
}
    ed16:	bd38      	pop	{r3, r4, r5, pc}
    ed18:	20001888 	.word	0x20001888
    ed1c:	20001854 	.word	0x20001854

0000ed20 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    ed20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed22:	4605      	mov	r5, r0
    ed24:	460e      	mov	r6, r1
	__asm__ volatile(
    ed26:	f04f 0320 	mov.w	r3, #32
    ed2a:	f3ef 8711 	mrs	r7, BASEPRI
    ed2e:	f383 8812 	msr	BASEPRI_MAX, r3
    ed32:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    ed36:	4c10      	ldr	r4, [pc, #64]	; (ed78 <k_sched_time_slice_set+0x58>)
    ed38:	2300      	movs	r3, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    ed3a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    ed3e:	f240 30e7 	movw	r0, #999	; 0x3e7
    ed42:	2100      	movs	r1, #0
    ed44:	6123      	str	r3, [r4, #16]
    ed46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ed4a:	2300      	movs	r3, #0
    ed4c:	fbec 0105 	umlal	r0, r1, ip, r5
    ed50:	f7f1 ff44 	bl	bdc <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    ed54:	2d00      	cmp	r5, #0
    ed56:	4b09      	ldr	r3, [pc, #36]	; (ed7c <k_sched_time_slice_set+0x5c>)
    ed58:	dc0a      	bgt.n	ed70 <k_sched_time_slice_set+0x50>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    ed5a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    ed5c:	4b08      	ldr	r3, [pc, #32]	; (ed80 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    ed5e:	68a0      	ldr	r0, [r4, #8]
		slice_max_prio = prio;
    ed60:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    ed62:	f7ff ffc9 	bl	ecf8 <z_reset_time_slice>
	__asm__ volatile(
    ed66:	f387 8811 	msr	BASEPRI, r7
    ed6a:	f3bf 8f6f 	isb	sy
	}
}
    ed6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    ed70:	2802      	cmp	r0, #2
    ed72:	bfb8      	it	lt
    ed74:	2002      	movlt	r0, #2
    ed76:	e7f0      	b.n	ed5a <k_sched_time_slice_set+0x3a>
    ed78:	20001854 	.word	0x20001854
    ed7c:	20001888 	.word	0x20001888
    ed80:	20001884 	.word	0x20001884

0000ed84 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ed84:	b949      	cbnz	r1, ed9a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ed86:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    ed8a:	b930      	cbnz	r0, ed9a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    ed8c:	4b05      	ldr	r3, [pc, #20]	; (eda4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    ed8e:	69da      	ldr	r2, [r3, #28]
    ed90:	689b      	ldr	r3, [r3, #8]
    ed92:	429a      	cmp	r2, r3
    ed94:	d001      	beq.n	ed9a <z_reschedule+0x16>
	ret = arch_swap(key);
    ed96:	f7fd bb99 	b.w	c4cc <arch_swap>
    ed9a:	f381 8811 	msr	BASEPRI, r1
    ed9e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    eda2:	4770      	bx	lr
    eda4:	20001854 	.word	0x20001854

0000eda8 <k_sched_lock>:
	__asm__ volatile(
    eda8:	f04f 0320 	mov.w	r3, #32
    edac:	f3ef 8111 	mrs	r1, BASEPRI
    edb0:	f383 8812 	msr	BASEPRI_MAX, r3
    edb4:	f3bf 8f6f 	isb	sy
    edb8:	4b04      	ldr	r3, [pc, #16]	; (edcc <k_sched_lock+0x24>)
    edba:	689a      	ldr	r2, [r3, #8]
    edbc:	7bd3      	ldrb	r3, [r2, #15]
    edbe:	3b01      	subs	r3, #1
    edc0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    edc2:	f381 8811 	msr	BASEPRI, r1
    edc6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    edca:	4770      	bx	lr
    edcc:	20001854 	.word	0x20001854

0000edd0 <update_cache>:
{
    edd0:	b538      	push	{r3, r4, r5, lr}
    edd2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    edd4:	480c      	ldr	r0, [pc, #48]	; (ee08 <update_cache+0x38>)
    edd6:	4d0d      	ldr	r5, [pc, #52]	; (ee0c <update_cache+0x3c>)
    edd8:	f006 ffe7 	bl	15daa <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    eddc:	4604      	mov	r4, r0
    edde:	b900      	cbnz	r0, ede2 <update_cache+0x12>
    ede0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    ede2:	68ab      	ldr	r3, [r5, #8]
    ede4:	b94a      	cbnz	r2, edfa <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    ede6:	7b5a      	ldrb	r2, [r3, #13]
    ede8:	06d2      	lsls	r2, r2, #27
    edea:	d106      	bne.n	edfa <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    edec:	69a2      	ldr	r2, [r4, #24]
    edee:	b922      	cbnz	r2, edfa <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    edf0:	89da      	ldrh	r2, [r3, #14]
    edf2:	2a7f      	cmp	r2, #127	; 0x7f
    edf4:	d901      	bls.n	edfa <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    edf6:	61eb      	str	r3, [r5, #28]
}
    edf8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    edfa:	429c      	cmp	r4, r3
    edfc:	d002      	beq.n	ee04 <update_cache+0x34>
			z_reset_time_slice(thread);
    edfe:	4620      	mov	r0, r4
    ee00:	f7ff ff7a 	bl	ecf8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ee04:	61ec      	str	r4, [r5, #28]
}
    ee06:	e7f7      	b.n	edf8 <update_cache+0x28>
    ee08:	20001874 	.word	0x20001874
    ee0c:	20001854 	.word	0x20001854

0000ee10 <move_thread_to_end_of_prio_q>:
{
    ee10:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    ee12:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    ee16:	7b43      	ldrb	r3, [r0, #13]
    ee18:	2a00      	cmp	r2, #0
{
    ee1a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ee1c:	da04      	bge.n	ee28 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ee1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ee22:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    ee24:	f006 ff99 	bl	15d5a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    ee28:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    ee2a:	4a17      	ldr	r2, [pc, #92]	; (ee88 <move_thread_to_end_of_prio_q+0x78>)
    ee2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ee30:	4610      	mov	r0, r2
    ee32:	734b      	strb	r3, [r1, #13]
    ee34:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ee38:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ee3a:	4283      	cmp	r3, r0
    ee3c:	bf08      	it	eq
    ee3e:	2300      	moveq	r3, #0
    ee40:	2b00      	cmp	r3, #0
    ee42:	bf38      	it	cc
    ee44:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ee46:	b1cb      	cbz	r3, ee7c <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    ee48:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    ee4c:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    ee50:	42a6      	cmp	r6, r4
    ee52:	d00f      	beq.n	ee74 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    ee54:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    ee56:	2c00      	cmp	r4, #0
    ee58:	dd0c      	ble.n	ee74 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    ee5a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    ee5c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    ee60:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    ee62:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    ee64:	6890      	ldr	r0, [r2, #8]
    ee66:	1a43      	subs	r3, r0, r1
    ee68:	4258      	negs	r0, r3
}
    ee6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    ee6e:	4158      	adcs	r0, r3
    ee70:	f7ff bfae 	b.w	edd0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ee74:	42ab      	cmp	r3, r5
    ee76:	d001      	beq.n	ee7c <move_thread_to_end_of_prio_q+0x6c>
    ee78:	681b      	ldr	r3, [r3, #0]
    ee7a:	e7e4      	b.n	ee46 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    ee7c:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    ee80:	6029      	str	r1, [r5, #0]
	list->tail = node;
    ee82:	6251      	str	r1, [r2, #36]	; 0x24
}
    ee84:	e7ee      	b.n	ee64 <move_thread_to_end_of_prio_q+0x54>
    ee86:	bf00      	nop
    ee88:	20001854 	.word	0x20001854

0000ee8c <z_time_slice>:
{
    ee8c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    ee8e:	f04f 0320 	mov.w	r3, #32
    ee92:	f3ef 8511 	mrs	r5, BASEPRI
    ee96:	f383 8812 	msr	BASEPRI_MAX, r3
    ee9a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    ee9e:	4b18      	ldr	r3, [pc, #96]	; (ef00 <z_time_slice+0x74>)
    eea0:	4a18      	ldr	r2, [pc, #96]	; (ef04 <z_time_slice+0x78>)
    eea2:	689c      	ldr	r4, [r3, #8]
    eea4:	6811      	ldr	r1, [r2, #0]
    eea6:	428c      	cmp	r4, r1
    eea8:	4619      	mov	r1, r3
    eeaa:	d107      	bne.n	eebc <z_time_slice+0x30>
	z_reset_time_slice(curr);
    eeac:	4620      	mov	r0, r4
    eeae:	f7ff ff23 	bl	ecf8 <z_reset_time_slice>
	__asm__ volatile(
    eeb2:	f385 8811 	msr	BASEPRI, r5
    eeb6:	f3bf 8f6f 	isb	sy
}
    eeba:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    eebc:	2600      	movs	r6, #0
    eebe:	6016      	str	r6, [r2, #0]
	int ret = slice_ticks;
    eec0:	4a11      	ldr	r2, [pc, #68]	; (ef08 <z_time_slice+0x7c>)
	if (slice_time(_current) && sliceable(_current)) {
    eec2:	6812      	ldr	r2, [r2, #0]
    eec4:	b1c2      	cbz	r2, eef8 <z_time_slice+0x6c>
		&& !z_is_idle_thread_object(thread);
    eec6:	89e2      	ldrh	r2, [r4, #14]
    eec8:	2a7f      	cmp	r2, #127	; 0x7f
    eeca:	d815      	bhi.n	eef8 <z_time_slice+0x6c>
		&& !z_is_thread_prevented_from_running(thread)
    eecc:	7b62      	ldrb	r2, [r4, #13]
    eece:	06d2      	lsls	r2, r2, #27
    eed0:	d112      	bne.n	eef8 <z_time_slice+0x6c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    eed2:	4a0e      	ldr	r2, [pc, #56]	; (ef0c <z_time_slice+0x80>)
    eed4:	f994 600e 	ldrsb.w	r6, [r4, #14]
    eed8:	6812      	ldr	r2, [r2, #0]
    eeda:	4296      	cmp	r6, r2
    eedc:	db0c      	blt.n	eef8 <z_time_slice+0x6c>
	if (slice_time(_current) && sliceable(_current)) {
    eede:	4a0c      	ldr	r2, [pc, #48]	; (ef10 <z_time_slice+0x84>)
    eee0:	4294      	cmp	r4, r2
    eee2:	d009      	beq.n	eef8 <z_time_slice+0x6c>
		if (ticks >= _current_cpu->slice_ticks) {
    eee4:	691a      	ldr	r2, [r3, #16]
    eee6:	4282      	cmp	r2, r0
    eee8:	dc03      	bgt.n	eef2 <z_time_slice+0x66>
		move_thread_to_end_of_prio_q(curr);
    eeea:	4620      	mov	r0, r4
    eeec:	f7ff ff90 	bl	ee10 <move_thread_to_end_of_prio_q>
    eef0:	e7dc      	b.n	eeac <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    eef2:	1a10      	subs	r0, r2, r0
    eef4:	6118      	str	r0, [r3, #16]
    eef6:	e7dc      	b.n	eeb2 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    eef8:	2300      	movs	r3, #0
    eefa:	610b      	str	r3, [r1, #16]
    eefc:	e7d9      	b.n	eeb2 <z_time_slice+0x26>
    eefe:	bf00      	nop
    ef00:	20001854 	.word	0x20001854
    ef04:	20001880 	.word	0x20001880
    ef08:	20001888 	.word	0x20001888
    ef0c:	20001884 	.word	0x20001884
    ef10:	20000678 	.word	0x20000678

0000ef14 <ready_thread>:
{
    ef14:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    ef16:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ef1a:	7b42      	ldrb	r2, [r0, #13]
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	db2d      	blt.n	ef7c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ef20:	06d3      	lsls	r3, r2, #27
    ef22:	d12b      	bne.n	ef7c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    ef24:	6983      	ldr	r3, [r0, #24]
    ef26:	bb4b      	cbnz	r3, ef7c <ready_thread+0x68>
	return list->head == list;
    ef28:	4915      	ldr	r1, [pc, #84]	; (ef80 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    ef2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ef2e:	7342      	strb	r2, [r0, #13]
    ef30:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ef32:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
    ef34:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ef38:	4294      	cmp	r4, r2
    ef3a:	bf18      	it	ne
    ef3c:	4623      	movne	r3, r4
    ef3e:	2b00      	cmp	r3, #0
    ef40:	bf38      	it	cc
    ef42:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ef44:	b1ab      	cbz	r3, ef72 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    ef46:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ef4a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    ef4e:	42a6      	cmp	r6, r4
    ef50:	d00b      	beq.n	ef6a <ready_thread+0x56>
		return b2 - b1;
    ef52:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    ef54:	2c00      	cmp	r4, #0
    ef56:	dd08      	ble.n	ef6a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    ef58:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ef5a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    ef5e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    ef60:	6058      	str	r0, [r3, #4]
}
    ef62:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    ef64:	2000      	movs	r0, #0
    ef66:	f7ff bf33 	b.w	edd0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ef6a:	42ab      	cmp	r3, r5
    ef6c:	d001      	beq.n	ef72 <ready_thread+0x5e>
    ef6e:	681b      	ldr	r3, [r3, #0]
    ef70:	e7e8      	b.n	ef44 <ready_thread+0x30>
	node->prev = tail;
    ef72:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    ef76:	6028      	str	r0, [r5, #0]
	list->tail = node;
    ef78:	6248      	str	r0, [r1, #36]	; 0x24
}
    ef7a:	e7f2      	b.n	ef62 <ready_thread+0x4e>
}
    ef7c:	bc70      	pop	{r4, r5, r6}
    ef7e:	4770      	bx	lr
    ef80:	20001854 	.word	0x20001854

0000ef84 <z_sched_start>:
{
    ef84:	b510      	push	{r4, lr}
	__asm__ volatile(
    ef86:	f04f 0220 	mov.w	r2, #32
    ef8a:	f3ef 8411 	mrs	r4, BASEPRI
    ef8e:	f382 8812 	msr	BASEPRI_MAX, r2
    ef92:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    ef96:	7b42      	ldrb	r2, [r0, #13]
    ef98:	0751      	lsls	r1, r2, #29
    ef9a:	d404      	bmi.n	efa6 <z_sched_start+0x22>
	__asm__ volatile(
    ef9c:	f384 8811 	msr	BASEPRI, r4
    efa0:	f3bf 8f6f 	isb	sy
}
    efa4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    efa6:	f022 0204 	bic.w	r2, r2, #4
    efaa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    efac:	f7ff ffb2 	bl	ef14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    efb0:	4621      	mov	r1, r4
    efb2:	4802      	ldr	r0, [pc, #8]	; (efbc <z_sched_start+0x38>)
}
    efb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    efb8:	f7ff bee4 	b.w	ed84 <z_reschedule>
    efbc:	200022c9 	.word	0x200022c9

0000efc0 <unready_thread>:
{
    efc0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    efc2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    efc6:	7b43      	ldrb	r3, [r0, #13]
    efc8:	2a00      	cmp	r2, #0
{
    efca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    efcc:	da04      	bge.n	efd8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    efce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    efd2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    efd4:	f006 fec1 	bl	15d5a <sys_dlist_remove>
	update_cache(thread == _current);
    efd8:	4b04      	ldr	r3, [pc, #16]	; (efec <unready_thread+0x2c>)
    efda:	6898      	ldr	r0, [r3, #8]
    efdc:	1a43      	subs	r3, r0, r1
    efde:	4258      	negs	r0, r3
    efe0:	4158      	adcs	r0, r3
}
    efe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    efe6:	f7ff bef3 	b.w	edd0 <update_cache>
    efea:	bf00      	nop
    efec:	20001854 	.word	0x20001854

0000eff0 <pend>:
{
    eff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eff4:	4606      	mov	r6, r0
    eff6:	4614      	mov	r4, r2
    eff8:	461d      	mov	r5, r3
	__asm__ volatile(
    effa:	f04f 0320 	mov.w	r3, #32
    effe:	f3ef 8711 	mrs	r7, BASEPRI
    f002:	f383 8812 	msr	BASEPRI_MAX, r3
    f006:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    f00a:	f006 ff0a 	bl	15e22 <add_to_waitq_locked>
	__asm__ volatile(
    f00e:	f387 8811 	msr	BASEPRI, r7
    f012:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f016:	1c6b      	adds	r3, r5, #1
    f018:	bf08      	it	eq
    f01a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    f01e:	d008      	beq.n	f032 <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f020:	4622      	mov	r2, r4
    f022:	462b      	mov	r3, r5
    f024:	f106 0018 	add.w	r0, r6, #24
    f028:	4903      	ldr	r1, [pc, #12]	; (f038 <pend+0x48>)
}
    f02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f02e:	f000 ba25 	b.w	f47c <z_add_timeout>
    f032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f036:	bf00      	nop
    f038:	00015ddf 	.word	0x00015ddf

0000f03c <z_pend_curr>:
{
    f03c:	b510      	push	{r4, lr}
	pending_current = _current;
    f03e:	4b07      	ldr	r3, [pc, #28]	; (f05c <z_pend_curr+0x20>)
    f040:	6898      	ldr	r0, [r3, #8]
    f042:	4b07      	ldr	r3, [pc, #28]	; (f060 <z_pend_curr+0x24>)
{
    f044:	460c      	mov	r4, r1
	pending_current = _current;
    f046:	6018      	str	r0, [r3, #0]
{
    f048:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    f04a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f04e:	f7ff ffcf 	bl	eff0 <pend>
    f052:	4620      	mov	r0, r4
}
    f054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f058:	f7fd ba38 	b.w	c4cc <arch_swap>
    f05c:	20001854 	.word	0x20001854
    f060:	20001880 	.word	0x20001880

0000f064 <z_set_prio>:
{
    f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f066:	4604      	mov	r4, r0
	__asm__ volatile(
    f068:	f04f 0320 	mov.w	r3, #32
    f06c:	f3ef 8611 	mrs	r6, BASEPRI
    f070:	f383 8812 	msr	BASEPRI_MAX, r3
    f074:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f078:	7b43      	ldrb	r3, [r0, #13]
    f07a:	06da      	lsls	r2, r3, #27
    f07c:	b249      	sxtb	r1, r1
    f07e:	d138      	bne.n	f0f2 <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    f080:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    f082:	2d00      	cmp	r5, #0
    f084:	d135      	bne.n	f0f2 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f08a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f08c:	f006 fe65 	bl	15d5a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    f090:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    f092:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    f094:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f098:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    f09a:	4817      	ldr	r0, [pc, #92]	; (f0f8 <z_set_prio+0x94>)
    f09c:	4603      	mov	r3, r0
    f09e:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f0a2:	429f      	cmp	r7, r3
    f0a4:	bf18      	it	ne
    f0a6:	463d      	movne	r5, r7
    f0a8:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f0aa:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f0ac:	461a      	mov	r2, r3
    f0ae:	462b      	mov	r3, r5
    f0b0:	bf38      	it	cc
    f0b2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f0b4:	b1c3      	cbz	r3, f0e8 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    f0b6:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    f0ba:	42a9      	cmp	r1, r5
    f0bc:	d010      	beq.n	f0e0 <z_set_prio+0x7c>
		return b2 - b1;
    f0be:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    f0c0:	2d00      	cmp	r5, #0
    f0c2:	dd0d      	ble.n	f0e0 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    f0c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f0c6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    f0ca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f0cc:	605c      	str	r4, [r3, #4]
			update_cache(1);
    f0ce:	2001      	movs	r0, #1
    f0d0:	f7ff fe7e 	bl	edd0 <update_cache>
    f0d4:	2001      	movs	r0, #1
	__asm__ volatile(
    f0d6:	f386 8811 	msr	BASEPRI, r6
    f0da:	f3bf 8f6f 	isb	sy
}
    f0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    f0e0:	42bb      	cmp	r3, r7
    f0e2:	d001      	beq.n	f0e8 <z_set_prio+0x84>
    f0e4:	681b      	ldr	r3, [r3, #0]
    f0e6:	e7e5      	b.n	f0b4 <z_set_prio+0x50>
	node->prev = tail;
    f0e8:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    f0ec:	603c      	str	r4, [r7, #0]
	list->tail = node;
    f0ee:	6244      	str	r4, [r0, #36]	; 0x24
}
    f0f0:	e7ed      	b.n	f0ce <z_set_prio+0x6a>
			thread->base.prio = prio;
    f0f2:	73a1      	strb	r1, [r4, #14]
    f0f4:	2000      	movs	r0, #0
    f0f6:	e7ee      	b.n	f0d6 <z_set_prio+0x72>
    f0f8:	20001854 	.word	0x20001854

0000f0fc <z_impl_k_thread_suspend>:
{
    f0fc:	b570      	push	{r4, r5, r6, lr}
    f0fe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    f100:	3018      	adds	r0, #24
    f102:	f006 fed3 	bl	15eac <z_abort_timeout>
	__asm__ volatile(
    f106:	f04f 0320 	mov.w	r3, #32
    f10a:	f3ef 8611 	mrs	r6, BASEPRI
    f10e:	f383 8812 	msr	BASEPRI_MAX, r3
    f112:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    f116:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    f11a:	7b63      	ldrb	r3, [r4, #13]
    f11c:	2a00      	cmp	r2, #0
    f11e:	da05      	bge.n	f12c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f124:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f126:	4620      	mov	r0, r4
    f128:	f006 fe17 	bl	15d5a <sys_dlist_remove>
		update_cache(thread == _current);
    f12c:	4d0b      	ldr	r5, [pc, #44]	; (f15c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f12e:	7b63      	ldrb	r3, [r4, #13]
    f130:	68a8      	ldr	r0, [r5, #8]
    f132:	f043 0310 	orr.w	r3, r3, #16
    f136:	7363      	strb	r3, [r4, #13]
    f138:	1b03      	subs	r3, r0, r4
    f13a:	4258      	negs	r0, r3
    f13c:	4158      	adcs	r0, r3
    f13e:	f7ff fe47 	bl	edd0 <update_cache>
	__asm__ volatile(
    f142:	f386 8811 	msr	BASEPRI, r6
    f146:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    f14a:	68ab      	ldr	r3, [r5, #8]
    f14c:	42a3      	cmp	r3, r4
    f14e:	d103      	bne.n	f158 <z_impl_k_thread_suspend+0x5c>
}
    f150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    f154:	f006 be1f 	b.w	15d96 <z_reschedule_unlocked>
}
    f158:	bd70      	pop	{r4, r5, r6, pc}
    f15a:	bf00      	nop
    f15c:	20001854 	.word	0x20001854

0000f160 <k_sched_unlock>:
{
    f160:	b510      	push	{r4, lr}
	__asm__ volatile(
    f162:	f04f 0320 	mov.w	r3, #32
    f166:	f3ef 8411 	mrs	r4, BASEPRI
    f16a:	f383 8812 	msr	BASEPRI_MAX, r3
    f16e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    f172:	4b08      	ldr	r3, [pc, #32]	; (f194 <k_sched_unlock+0x34>)
    f174:	689a      	ldr	r2, [r3, #8]
    f176:	7bd3      	ldrb	r3, [r2, #15]
    f178:	3301      	adds	r3, #1
    f17a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    f17c:	2000      	movs	r0, #0
    f17e:	f7ff fe27 	bl	edd0 <update_cache>
	__asm__ volatile(
    f182:	f384 8811 	msr	BASEPRI, r4
    f186:	f3bf 8f6f 	isb	sy
}
    f18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    f18e:	f006 be02 	b.w	15d96 <z_reschedule_unlocked>
    f192:	bf00      	nop
    f194:	20001854 	.word	0x20001854

0000f198 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    f198:	4b04      	ldr	r3, [pc, #16]	; (f1ac <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    f19a:	2100      	movs	r1, #0
    f19c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    f1a0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    f1a4:	4608      	mov	r0, r1
    f1a6:	f7ff bdbb 	b.w	ed20 <k_sched_time_slice_set>
    f1aa:	bf00      	nop
    f1ac:	20001854 	.word	0x20001854

0000f1b0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    f1b2:	f04f 0320 	mov.w	r3, #32
    f1b6:	f3ef 8411 	mrs	r4, BASEPRI
    f1ba:	f383 8812 	msr	BASEPRI_MAX, r3
    f1be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    f1c2:	491b      	ldr	r1, [pc, #108]	; (f230 <z_impl_k_yield+0x80>)
    f1c4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f1c6:	7b43      	ldrb	r3, [r0, #13]
    f1c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f1cc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f1ce:	f006 fdc4 	bl	15d5a <sys_dlist_remove>
	}
	queue_thread(_current);
    f1d2:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    f1d4:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    f1d6:	4608      	mov	r0, r1
    f1d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f1dc:	7353      	strb	r3, [r2, #13]
    f1de:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f1e2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f1e4:	4283      	cmp	r3, r0
    f1e6:	bf08      	it	eq
    f1e8:	2300      	moveq	r3, #0
    f1ea:	2b00      	cmp	r3, #0
    f1ec:	bf38      	it	cc
    f1ee:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f1f0:	b1cb      	cbz	r3, f226 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    f1f2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    f1f6:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    f1fa:	42af      	cmp	r7, r5
    f1fc:	d00f      	beq.n	f21e <z_impl_k_yield+0x6e>
		return b2 - b1;
    f1fe:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    f200:	2d00      	cmp	r5, #0
    f202:	dd0c      	ble.n	f21e <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    f204:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    f206:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    f20a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    f20c:	605a      	str	r2, [r3, #4]
	update_cache(1);
    f20e:	2001      	movs	r0, #1
    f210:	f7ff fdde 	bl	edd0 <update_cache>
    f214:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    f216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f21a:	f7fd b957 	b.w	c4cc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    f21e:	42b3      	cmp	r3, r6
    f220:	d001      	beq.n	f226 <z_impl_k_yield+0x76>
    f222:	681b      	ldr	r3, [r3, #0]
    f224:	e7e4      	b.n	f1f0 <z_impl_k_yield+0x40>
	node->prev = tail;
    f226:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    f22a:	6032      	str	r2, [r6, #0]
	list->tail = node;
    f22c:	624a      	str	r2, [r1, #36]	; 0x24
}
    f22e:	e7ee      	b.n	f20e <z_impl_k_yield+0x5e>
    f230:	20001854 	.word	0x20001854

0000f234 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    f234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f238:	4604      	mov	r4, r0
    f23a:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    f23c:	ea54 0105 	orrs.w	r1, r4, r5
    f240:	d104      	bne.n	f24c <z_tick_sleep+0x18>
	z_impl_k_yield();
    f242:	f7ff ffb5 	bl	f1b0 <z_impl_k_yield>
		k_yield();
		return 0;
    f246:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    f24c:	f06f 0101 	mvn.w	r1, #1
    f250:	1a0a      	subs	r2, r1, r0
    f252:	f04f 31ff 	mov.w	r1, #4294967295
    f256:	eb61 0305 	sbc.w	r3, r1, r5
    f25a:	2a01      	cmp	r2, #1
    f25c:	f173 0300 	sbcs.w	r3, r3, #0
    f260:	da2a      	bge.n	f2b8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    f262:	f006 fe64 	bl	15f2e <sys_clock_tick_get_32>
    f266:	1906      	adds	r6, r0, r4
    f268:	f04f 0320 	mov.w	r3, #32
    f26c:	f3ef 8811 	mrs	r8, BASEPRI
    f270:	f383 8812 	msr	BASEPRI_MAX, r3
    f274:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    f278:	4f11      	ldr	r7, [pc, #68]	; (f2c0 <z_tick_sleep+0x8c>)
    f27a:	4b12      	ldr	r3, [pc, #72]	; (f2c4 <z_tick_sleep+0x90>)
    f27c:	68b8      	ldr	r0, [r7, #8]
    f27e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    f280:	f7ff fe9e 	bl	efc0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    f284:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f286:	4910      	ldr	r1, [pc, #64]	; (f2c8 <z_tick_sleep+0x94>)
    f288:	4622      	mov	r2, r4
    f28a:	462b      	mov	r3, r5
    f28c:	3018      	adds	r0, #24
    f28e:	f000 f8f5 	bl	f47c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    f292:	68ba      	ldr	r2, [r7, #8]
    f294:	7b53      	ldrb	r3, [r2, #13]
    f296:	f043 0310 	orr.w	r3, r3, #16
    f29a:	7353      	strb	r3, [r2, #13]
    f29c:	4640      	mov	r0, r8
    f29e:	f7fd f915 	bl	c4cc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    f2a2:	f006 fe44 	bl	15f2e <sys_clock_tick_get_32>
    f2a6:	1a30      	subs	r0, r6, r0
    f2a8:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    f2ac:	2801      	cmp	r0, #1
    f2ae:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    f2b2:	bfb8      	it	lt
    f2b4:	2000      	movlt	r0, #0
    f2b6:	e7c7      	b.n	f248 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    f2b8:	f06f 0601 	mvn.w	r6, #1
    f2bc:	1a36      	subs	r6, r6, r0
    f2be:	e7d3      	b.n	f268 <z_tick_sleep+0x34>
    f2c0:	20001854 	.word	0x20001854
    f2c4:	20001880 	.word	0x20001880
    f2c8:	00015ddf 	.word	0x00015ddf

0000f2cc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    f2cc:	b508      	push	{r3, lr}
    f2ce:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f2d0:	3301      	adds	r3, #1
    f2d2:	bf08      	it	eq
    f2d4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    f2d8:	d106      	bne.n	f2e8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    f2da:	4b08      	ldr	r3, [pc, #32]	; (f2fc <z_impl_k_sleep+0x30>)
    f2dc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    f2de:	f7ff ff0d 	bl	f0fc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    f2e2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    f2e6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    f2e8:	f7ff ffa4 	bl	f234 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    f2ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f2f0:	fb80 0103 	smull	r0, r1, r0, r3
    f2f4:	0bc3      	lsrs	r3, r0, #15
    f2f6:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return ret;
    f2fa:	e7f4      	b.n	f2e6 <z_impl_k_sleep+0x1a>
    f2fc:	20001854 	.word	0x20001854

0000f300 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    f300:	4b01      	ldr	r3, [pc, #4]	; (f308 <z_impl_z_current_get+0x8>)
    f302:	6898      	ldr	r0, [r3, #8]
    f304:	4770      	bx	lr
    f306:	bf00      	nop
    f308:	20001854 	.word	0x20001854

0000f30c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    f30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f310:	4604      	mov	r4, r0
    f312:	f04f 0320 	mov.w	r3, #32
    f316:	f3ef 8611 	mrs	r6, BASEPRI
    f31a:	f383 8812 	msr	BASEPRI_MAX, r3
    f31e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    f322:	7b43      	ldrb	r3, [r0, #13]
    f324:	071a      	lsls	r2, r3, #28
    f326:	d505      	bpl.n	f334 <z_thread_abort+0x28>
	__asm__ volatile(
    f328:	f386 8811 	msr	BASEPRI, r6
    f32c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    f330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    f334:	f023 0220 	bic.w	r2, r3, #32
    f338:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    f33c:	09d2      	lsrs	r2, r2, #7
    f33e:	d120      	bne.n	f382 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    f340:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    f342:	68a3      	ldr	r3, [r4, #8]
    f344:	b113      	cbz	r3, f34c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    f346:	4620      	mov	r0, r4
    f348:	f006 fd0f 	bl	15d6a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    f34c:	f104 0018 	add.w	r0, r4, #24
    f350:	f006 fdac 	bl	15eac <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    f354:	f104 0758 	add.w	r7, r4, #88	; 0x58
    f358:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    f35c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f35e:	42bd      	cmp	r5, r7
    f360:	d000      	beq.n	f364 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f362:	b9b5      	cbnz	r5, f392 <z_thread_abort+0x86>
		update_cache(1);
    f364:	2001      	movs	r0, #1
    f366:	f7ff fd33 	bl	edd0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    f36a:	4b10      	ldr	r3, [pc, #64]	; (f3ac <z_thread_abort+0xa0>)
    f36c:	689b      	ldr	r3, [r3, #8]
    f36e:	42a3      	cmp	r3, r4
    f370:	d1da      	bne.n	f328 <z_thread_abort+0x1c>
    f372:	f3ef 8305 	mrs	r3, IPSR
    f376:	2b00      	cmp	r3, #0
    f378:	d1d6      	bne.n	f328 <z_thread_abort+0x1c>
    f37a:	4630      	mov	r0, r6
    f37c:	f7fd f8a6 	bl	c4cc <arch_swap>
	return ret;
    f380:	e7d2      	b.n	f328 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f382:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    f386:	f043 0308 	orr.w	r3, r3, #8
    f38a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    f38c:	f006 fce5 	bl	15d5a <sys_dlist_remove>
}
    f390:	e7d7      	b.n	f342 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    f392:	4628      	mov	r0, r5
    f394:	f006 fce9 	bl	15d6a <unpend_thread_no_timeout>
    f398:	f105 0018 	add.w	r0, r5, #24
    f39c:	f006 fd86 	bl	15eac <z_abort_timeout>
    f3a0:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    f3a4:	4628      	mov	r0, r5
    f3a6:	f7ff fdb5 	bl	ef14 <ready_thread>
    f3aa:	e7d7      	b.n	f35c <z_thread_abort+0x50>
    f3ac:	20001854 	.word	0x20001854

0000f3b0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    f3b0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    f3b2:	4806      	ldr	r0, [pc, #24]	; (f3cc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    f3b4:	4a06      	ldr	r2, [pc, #24]	; (f3d0 <z_data_copy+0x20>)
    f3b6:	4907      	ldr	r1, [pc, #28]	; (f3d4 <z_data_copy+0x24>)
    f3b8:	1a12      	subs	r2, r2, r0
    f3ba:	f006 fc73 	bl	15ca4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    f3be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    f3c2:	4a05      	ldr	r2, [pc, #20]	; (f3d8 <z_data_copy+0x28>)
    f3c4:	4905      	ldr	r1, [pc, #20]	; (f3dc <z_data_copy+0x2c>)
    f3c6:	4806      	ldr	r0, [pc, #24]	; (f3e0 <z_data_copy+0x30>)
    f3c8:	f006 bc6c 	b.w	15ca4 <z_early_memcpy>
    f3cc:	20000000 	.word	0x20000000
    f3d0:	20000658 	.word	0x20000658
    f3d4:	00046f24 	.word	0x00046f24
    f3d8:	00000000 	.word	0x00000000
    f3dc:	00046f24 	.word	0x00046f24
    f3e0:	20000000 	.word	0x20000000

0000f3e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    f3e4:	4b03      	ldr	r3, [pc, #12]	; (f3f4 <elapsed+0x10>)
    f3e6:	681b      	ldr	r3, [r3, #0]
    f3e8:	b90b      	cbnz	r3, f3ee <elapsed+0xa>
    f3ea:	f7fe bb79 	b.w	dae0 <sys_clock_elapsed>
}
    f3ee:	2000      	movs	r0, #0
    f3f0:	4770      	bx	lr
    f3f2:	bf00      	nop
    f3f4:	2000188c 	.word	0x2000188c

0000f3f8 <remove_timeout>:
{
    f3f8:	b530      	push	{r4, r5, lr}
    f3fa:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f3fc:	b168      	cbz	r0, f41a <remove_timeout+0x22>
    f3fe:	4a0a      	ldr	r2, [pc, #40]	; (f428 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    f400:	6852      	ldr	r2, [r2, #4]
    f402:	4290      	cmp	r0, r2
    f404:	d009      	beq.n	f41a <remove_timeout+0x22>
	if (next(t) != NULL) {
    f406:	b143      	cbz	r3, f41a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    f408:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    f40c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    f410:	1912      	adds	r2, r2, r4
    f412:	eb45 0101 	adc.w	r1, r5, r1
    f416:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    f41a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    f41c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f41e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f420:	2300      	movs	r3, #0
	node->prev = NULL;
    f422:	e9c0 3300 	strd	r3, r3, [r0]
}
    f426:	bd30      	pop	{r4, r5, pc}
    f428:	2000037c 	.word	0x2000037c

0000f42c <next_timeout>:
	return list->head == list;
    f42c:	4b11      	ldr	r3, [pc, #68]	; (f474 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    f42e:	b510      	push	{r4, lr}
    f430:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f432:	429c      	cmp	r4, r3
    f434:	bf08      	it	eq
    f436:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    f438:	f7ff ffd4 	bl	f3e4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    f43c:	b1bc      	cbz	r4, f46e <next_timeout+0x42>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    f43e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f442:	1a12      	subs	r2, r2, r0
    f444:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	if ((to == NULL) ||
    f448:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    f44c:	f173 0100 	sbcs.w	r1, r3, #0
    f450:	da0d      	bge.n	f46e <next_timeout+0x42>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    f452:	4619      	mov	r1, r3
    f454:	2a00      	cmp	r2, #0
    f456:	f171 0300 	sbcs.w	r3, r1, #0
    f45a:	4610      	mov	r0, r2
    f45c:	da00      	bge.n	f460 <next_timeout+0x34>
    f45e:	2000      	movs	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    f460:	4b05      	ldr	r3, [pc, #20]	; (f478 <next_timeout+0x4c>)
    f462:	691b      	ldr	r3, [r3, #16]
    f464:	b113      	cbz	r3, f46c <next_timeout+0x40>
    f466:	4298      	cmp	r0, r3
    f468:	bfa8      	it	ge
    f46a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    f46c:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    f46e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f472:	e7f5      	b.n	f460 <next_timeout+0x34>
    f474:	2000037c 	.word	0x2000037c
    f478:	20001854 	.word	0x20001854

0000f47c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f47c:	f1b3 3fff 	cmp.w	r3, #4294967295
    f480:	bf08      	it	eq
    f482:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    f486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f48a:	4604      	mov	r4, r0
    f48c:	4692      	mov	sl, r2
    f48e:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f490:	d073      	beq.n	f57a <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    f492:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    f494:	f04f 0320 	mov.w	r3, #32
    f498:	f3ef 8511 	mrs	r5, BASEPRI
    f49c:	f383 8812 	msr	BASEPRI_MAX, r3
    f4a0:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    f4a4:	f06f 0301 	mvn.w	r3, #1
    f4a8:	ebb3 080a 	subs.w	r8, r3, sl
    f4ac:	f04f 32ff 	mov.w	r2, #4294967295
    f4b0:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    f4b4:	f1b8 0f00 	cmp.w	r8, #0
    f4b8:	f179 0100 	sbcs.w	r1, r9, #0
    f4bc:	db1c      	blt.n	f4f8 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    f4be:	4830      	ldr	r0, [pc, #192]	; (f580 <z_add_timeout+0x104>)
    f4c0:	e9d0 1000 	ldrd	r1, r0, [r0]
    f4c4:	1a5b      	subs	r3, r3, r1
    f4c6:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    f4ca:	ebb3 060a 	subs.w	r6, r3, sl
    f4ce:	eb62 070b 	sbc.w	r7, r2, fp
    f4d2:	2e01      	cmp	r6, #1
    f4d4:	f177 0300 	sbcs.w	r3, r7, #0
    f4d8:	bfbc      	itt	lt
    f4da:	2601      	movlt	r6, #1
    f4dc:	2700      	movlt	r7, #0
    f4de:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    f4e2:	4a28      	ldr	r2, [pc, #160]	; (f584 <z_add_timeout+0x108>)
    f4e4:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f4e8:	4293      	cmp	r3, r2
    f4ea:	d11e      	bne.n	f52a <z_add_timeout+0xae>
	node->prev = tail;
    f4ec:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    f4f0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    f4f4:	6054      	str	r4, [r2, #4]
}
    f4f6:	e02d      	b.n	f554 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    f4f8:	f7ff ff74 	bl	f3e4 <elapsed>
    f4fc:	f11a 0301 	adds.w	r3, sl, #1
    f500:	9300      	str	r3, [sp, #0]
    f502:	f14b 0300 	adc.w	r3, fp, #0
    f506:	9301      	str	r3, [sp, #4]
    f508:	e9dd 2300 	ldrd	r2, r3, [sp]
    f50c:	1812      	adds	r2, r2, r0
    f50e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    f512:	e9c4 2304 	strd	r2, r3, [r4, #16]
    f516:	e7e4      	b.n	f4e2 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    f518:	ebb6 0008 	subs.w	r0, r6, r8
    f51c:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    f520:	4563      	cmp	r3, ip
    f522:	e9c4 0104 	strd	r0, r1, [r4, #16]
    f526:	d0e1      	beq.n	f4ec <z_add_timeout+0x70>
    f528:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    f52a:	2b00      	cmp	r3, #0
    f52c:	d0de      	beq.n	f4ec <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    f52e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    f532:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    f536:	4546      	cmp	r6, r8
    f538:	eb77 0109 	sbcs.w	r1, r7, r9
    f53c:	daec      	bge.n	f518 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    f53e:	ebb8 0006 	subs.w	r0, r8, r6
    f542:	eb69 0107 	sbc.w	r1, r9, r7
    f546:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    f54a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    f54c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    f550:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    f552:	605c      	str	r4, [r3, #4]
	return list->head == list;
    f554:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f556:	4293      	cmp	r3, r2
    f558:	d00b      	beq.n	f572 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    f55a:	429c      	cmp	r4, r3
    f55c:	d109      	bne.n	f572 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    f55e:	f7ff ff65 	bl	f42c <next_timeout>

			if (next_time == 0 ||
    f562:	b118      	cbz	r0, f56c <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    f564:	4b08      	ldr	r3, [pc, #32]	; (f588 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    f566:	691b      	ldr	r3, [r3, #16]
    f568:	4283      	cmp	r3, r0
    f56a:	d002      	beq.n	f572 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    f56c:	2100      	movs	r1, #0
    f56e:	f7fe fa85 	bl	da7c <sys_clock_set_timeout>
	__asm__ volatile(
    f572:	f385 8811 	msr	BASEPRI, r5
    f576:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    f57a:	b003      	add	sp, #12
    f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f580:	200007f8 	.word	0x200007f8
    f584:	2000037c 	.word	0x2000037c
    f588:	20001854 	.word	0x20001854

0000f58c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    f58c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f590:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    f592:	f7ff fc7b 	bl	ee8c <z_time_slice>
	__asm__ volatile(
    f596:	f04f 0320 	mov.w	r3, #32
    f59a:	f3ef 8411 	mrs	r4, BASEPRI
    f59e:	f383 8812 	msr	BASEPRI_MAX, r3
    f5a2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    f5a6:	4d2c      	ldr	r5, [pc, #176]	; (f658 <sys_clock_announce+0xcc>)
    f5a8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; f65c <sys_clock_announce+0xd0>
	return list->head == list;
    f5ac:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f660 <sys_clock_announce+0xd4>
    f5b0:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    f5b2:	4651      	mov	r1, sl
    f5b4:	f8d5 c000 	ldr.w	ip, [r5]
    f5b8:	f8db 0000 	ldr.w	r0, [fp]
    f5bc:	4662      	mov	r2, ip
    f5be:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f5c0:	4558      	cmp	r0, fp
    f5c2:	e9da 8900 	ldrd	r8, r9, [sl]
    f5c6:	e9cd 2300 	strd	r2, r3, [sp]
    f5ca:	d00d      	beq.n	f5e8 <sys_clock_announce+0x5c>
    f5cc:	b160      	cbz	r0, f5e8 <sys_clock_announce+0x5c>
    f5ce:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    f5d2:	45b4      	cmp	ip, r6
    f5d4:	41bb      	sbcs	r3, r7
    f5d6:	da1e      	bge.n	f616 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    f5d8:	9b00      	ldr	r3, [sp, #0]
    f5da:	ebb6 0c03 	subs.w	ip, r6, r3
    f5de:	9b01      	ldr	r3, [sp, #4]
    f5e0:	eb67 0603 	sbc.w	r6, r7, r3
    f5e4:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    f5e8:	9b00      	ldr	r3, [sp, #0]
    f5ea:	eb13 0208 	adds.w	r2, r3, r8
    f5ee:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    f5f0:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    f5f4:	eb43 0309 	adc.w	r3, r3, r9
    f5f8:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    f5fc:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    f5fe:	f7ff ff15 	bl	f42c <next_timeout>
    f602:	4631      	mov	r1, r6
    f604:	f7fe fa3a 	bl	da7c <sys_clock_set_timeout>
	__asm__ volatile(
    f608:	f384 8811 	msr	BASEPRI, r4
    f60c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    f610:	b003      	add	sp, #12
    f612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    f616:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    f61a:	f04f 0200 	mov.w	r2, #0
    f61e:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    f622:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    f626:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    f62a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    f62e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    f632:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    f634:	f7ff fee0 	bl	f3f8 <remove_timeout>
    f638:	f384 8811 	msr	BASEPRI, r4
    f63c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    f640:	6883      	ldr	r3, [r0, #8]
    f642:	4798      	blx	r3
	__asm__ volatile(
    f644:	f04f 0320 	mov.w	r3, #32
    f648:	f3ef 8411 	mrs	r4, BASEPRI
    f64c:	f383 8812 	msr	BASEPRI_MAX, r3
    f650:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    f654:	4901      	ldr	r1, [pc, #4]	; (f65c <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    f656:	e7ad      	b.n	f5b4 <sys_clock_announce+0x28>
    f658:	2000188c 	.word	0x2000188c
    f65c:	200007f8 	.word	0x200007f8
    f660:	2000037c 	.word	0x2000037c

0000f664 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    f664:	b510      	push	{r4, lr}
    f666:	f04f 0320 	mov.w	r3, #32
    f66a:	f3ef 8411 	mrs	r4, BASEPRI
    f66e:	f383 8812 	msr	BASEPRI_MAX, r3
    f672:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    f676:	f7fe fa33 	bl	dae0 <sys_clock_elapsed>
    f67a:	4b06      	ldr	r3, [pc, #24]	; (f694 <sys_clock_tick_get+0x30>)
    f67c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f680:	1812      	adds	r2, r2, r0
    f682:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    f686:	f384 8811 	msr	BASEPRI, r4
    f68a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    f68e:	4610      	mov	r0, r2
    f690:	4619      	mov	r1, r3
    f692:	bd10      	pop	{r4, pc}
    f694:	200007f8 	.word	0x200007f8

0000f698 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    f698:	4a02      	ldr	r2, [pc, #8]	; (f6a4 <boot_banner+0xc>)
    f69a:	4903      	ldr	r1, [pc, #12]	; (f6a8 <boot_banner+0x10>)
    f69c:	4803      	ldr	r0, [pc, #12]	; (f6ac <boot_banner+0x14>)
    f69e:	f005 bd3b 	b.w	15118 <printk>
    f6a2:	bf00      	nop
    f6a4:	0004697c 	.word	0x0004697c
    f6a8:	00046ce6 	.word	0x00046ce6
    f6ac:	00046cf3 	.word	0x00046cf3

0000f6b0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    f6b0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f6b2:	4c06      	ldr	r4, [pc, #24]	; (f6cc <statics_init+0x1c>)
    f6b4:	4d06      	ldr	r5, [pc, #24]	; (f6d0 <statics_init+0x20>)
    f6b6:	42ac      	cmp	r4, r5
    f6b8:	d301      	bcc.n	f6be <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    f6ba:	2000      	movs	r0, #0
    f6bc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    f6be:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    f6c2:	4620      	mov	r0, r4
    f6c4:	f006 fc3d 	bl	15f42 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f6c8:	3418      	adds	r4, #24
    f6ca:	e7f4      	b.n	f6b6 <statics_init+0x6>
    f6cc:	200005cc 	.word	0x200005cc
    f6d0:	200005cc 	.word	0x200005cc

0000f6d4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
    f6d4:	b580      	push	{r7, lr}
    f6d6:	b09c      	sub	sp, #112	; 0x70
    f6d8:	4606      	mov	r6, r0
    f6da:	af00      	add	r7, sp, #0
    f6dc:	460c      	mov	r4, r1
    f6de:	1ba4      	subs	r4, r4, r6
    f6e0:	490e      	ldr	r1, [pc, #56]	; (f71c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
    f6e2:	2269      	movs	r2, #105	; 0x69
    f6e4:	1d38      	adds	r0, r7, #4
    f6e6:	f006 fcb6 	bl	16056 <memcpy>
    f6ea:	f104 0370 	add.w	r3, r4, #112	; 0x70
    f6ee:	f023 0307 	bic.w	r3, r3, #7
    f6f2:	ebad 0d03 	sub.w	sp, sp, r3
    f6f6:	466d      	mov	r5, sp
    f6f8:	2268      	movs	r2, #104	; 0x68
    f6fa:	1d39      	adds	r1, r7, #4
    f6fc:	4628      	mov	r0, r5
    f6fe:	f006 fcaa 	bl	16056 <memcpy>
    f702:	4622      	mov	r2, r4
    f704:	4631      	mov	r1, r6
    f706:	f105 0068 	add.w	r0, r5, #104	; 0x68
    f70a:	442c      	add	r4, r5
    f70c:	f006 fca3 	bl	16056 <memcpy>
    f710:	2300      	movs	r3, #0
    f712:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    f716:	4628      	mov	r0, r5
    f718:	f006 fc33 	bl	15f82 <_ZSt19__throw_logic_errorPKc>
    f71c:	00046d1a 	.word	0x00046d1a

0000f720 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
    f720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f724:	af00      	add	r7, sp, #0
    f726:	b084      	sub	sp, #16
    f728:	466d      	mov	r5, sp
    f72a:	f105 040c 	add.w	r4, r5, #12
    f72e:	f8df 8044 	ldr.w	r8, [pc, #68]	; f774 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
    f732:	4623      	mov	r3, r4
    f734:	f04f 0c0a 	mov.w	ip, #10
    f738:	fbb2 f6fc 	udiv	r6, r2, ip
    f73c:	fb0c 2e16 	mls	lr, ip, r6, r2
    f740:	f818 e00e 	ldrb.w	lr, [r8, lr]
    f744:	f803 ed01 	strb.w	lr, [r3, #-1]!
    f748:	4696      	mov	lr, r2
    f74a:	f1be 0f09 	cmp.w	lr, #9
    f74e:	4632      	mov	r2, r6
    f750:	d8f2      	bhi.n	f738 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
    f752:	1ae4      	subs	r4, r4, r3
    f754:	428c      	cmp	r4, r1
    f756:	d809      	bhi.n	f76c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
    f758:	f1c4 010c 	rsb	r1, r4, #12
    f75c:	4622      	mov	r2, r4
    f75e:	4429      	add	r1, r5
    f760:	f006 fc79 	bl	16056 <memcpy>
    f764:	4620      	mov	r0, r4
    f766:	46bd      	mov	sp, r7
    f768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f76c:	f04f 34ff 	mov.w	r4, #4294967295
    f770:	e7f8      	b.n	f764 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
    f772:	bf00      	nop
    f774:	00046d83 	.word	0x00046d83

0000f778 <_ZSt15get_new_handlerv>:
    f778:	4b02      	ldr	r3, [pc, #8]	; (f784 <_ZSt15get_new_handlerv+0xc>)
    f77a:	6818      	ldr	r0, [r3, #0]
    f77c:	f3bf 8f5b 	dmb	ish
    f780:	4770      	bx	lr
    f782:	bf00      	nop
    f784:	20001890 	.word	0x20001890

0000f788 <fabs>:
    f788:	ec51 0b10 	vmov	r0, r1, d0
    f78c:	ee10 2a10 	vmov	r2, s0
    f790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    f794:	ec43 2b10 	vmov	d0, r2, r3
    f798:	4770      	bx	lr
    f79a:	bf00      	nop

0000f79c <frexp>:
    f79c:	ec53 2b10 	vmov	r2, r3, d0
    f7a0:	b570      	push	{r4, r5, r6, lr}
    f7a2:	4e16      	ldr	r6, [pc, #88]	; (f7fc <frexp+0x60>)
    f7a4:	4605      	mov	r5, r0
    f7a6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    f7aa:	2000      	movs	r0, #0
    f7ac:	42b1      	cmp	r1, r6
    f7ae:	6028      	str	r0, [r5, #0]
    f7b0:	dc21      	bgt.n	f7f6 <frexp+0x5a>
    f7b2:	ee10 6a10 	vmov	r6, s0
    f7b6:	430e      	orrs	r6, r1
    f7b8:	d01d      	beq.n	f7f6 <frexp+0x5a>
    f7ba:	4e11      	ldr	r6, [pc, #68]	; (f800 <frexp+0x64>)
    f7bc:	401e      	ands	r6, r3
    f7be:	461c      	mov	r4, r3
    f7c0:	b966      	cbnz	r6, f7dc <frexp+0x40>
    f7c2:	4619      	mov	r1, r3
    f7c4:	2200      	movs	r2, #0
    f7c6:	ee10 0a10 	vmov	r0, s0
    f7ca:	4b0e      	ldr	r3, [pc, #56]	; (f804 <frexp+0x68>)
    f7cc:	f7f0 fea4 	bl	518 <__aeabi_dmul>
    f7d0:	4602      	mov	r2, r0
    f7d2:	460c      	mov	r4, r1
    f7d4:	f06f 0035 	mvn.w	r0, #53	; 0x35
    f7d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f7dc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
    f7e0:	1509      	asrs	r1, r1, #20
    f7e2:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
    f7e6:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
    f7ea:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
    f7ee:	4401      	add	r1, r0
    f7f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    f7f4:	6029      	str	r1, [r5, #0]
    f7f6:	ec43 2b10 	vmov	d0, r2, r3
    f7fa:	bd70      	pop	{r4, r5, r6, pc}
    f7fc:	7fefffff 	.word	0x7fefffff
    f800:	7ff00000 	.word	0x7ff00000
    f804:	43500000 	.word	0x43500000

0000f808 <round>:
    f808:	ec53 2b10 	vmov	r2, r3, d0
    f80c:	b570      	push	{r4, r5, r6, lr}
    f80e:	f3c3 540a 	ubfx	r4, r3, #20, #11
    f812:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
    f816:	2913      	cmp	r1, #19
    f818:	ee10 0a10 	vmov	r0, s0
    f81c:	461d      	mov	r5, r3
    f81e:	dc0a      	bgt.n	f836 <round+0x2e>
    f820:	2900      	cmp	r1, #0
    f822:	db26      	blt.n	f872 <round+0x6a>
    f824:	4c1e      	ldr	r4, [pc, #120]	; (f8a0 <round+0x98>)
    f826:	410c      	asrs	r4, r1
    f828:	ea03 0604 	and.w	r6, r3, r4
    f82c:	4330      	orrs	r0, r6
    f82e:	d12e      	bne.n	f88e <round+0x86>
    f830:	ec43 2b10 	vmov	d0, r2, r3
    f834:	bd70      	pop	{r4, r5, r6, pc}
    f836:	2933      	cmp	r1, #51	; 0x33
    f838:	dd08      	ble.n	f84c <round+0x44>
    f83a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    f83e:	d1f7      	bne.n	f830 <round+0x28>
    f840:	4619      	mov	r1, r3
    f842:	f7f0 fcb3 	bl	1ac <__adddf3>
    f846:	ec41 0b10 	vmov	d0, r0, r1
    f84a:	bd70      	pop	{r4, r5, r6, pc}
    f84c:	f2a4 4413 	subw	r4, r4, #1043	; 0x413
    f850:	f04f 36ff 	mov.w	r6, #4294967295
    f854:	fa26 f404 	lsr.w	r4, r6, r4
    f858:	4222      	tst	r2, r4
    f85a:	d0e9      	beq.n	f830 <round+0x28>
    f85c:	2301      	movs	r3, #1
    f85e:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
    f862:	fa03 f101 	lsl.w	r1, r3, r1
    f866:	1840      	adds	r0, r0, r1
    f868:	bf28      	it	cs
    f86a:	18ed      	addcs	r5, r5, r3
    f86c:	ea20 0004 	bic.w	r0, r0, r4
    f870:	e008      	b.n	f884 <round+0x7c>
    f872:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
    f876:	3101      	adds	r1, #1
    f878:	bf04      	itt	eq
    f87a:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
    f87e:	f445 1540 	orreq.w	r5, r5, #3145728	; 0x300000
    f882:	2000      	movs	r0, #0
    f884:	462b      	mov	r3, r5
    f886:	4602      	mov	r2, r0
    f888:	ec43 2b10 	vmov	d0, r2, r3
    f88c:	bd70      	pop	{r4, r5, r6, pc}
    f88e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    f892:	fa43 f101 	asr.w	r1, r3, r1
    f896:	440d      	add	r5, r1
    f898:	ea25 0504 	bic.w	r5, r5, r4
    f89c:	2000      	movs	r0, #0
    f89e:	e7f1      	b.n	f884 <round+0x7c>
    f8a0:	000fffff 	.word	0x000fffff

0000f8a4 <ceilf>:
    f8a4:	ee10 2a10 	vmov	r2, s0
    f8a8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
    f8ac:	3b7f      	subs	r3, #127	; 0x7f
    f8ae:	2b16      	cmp	r3, #22
    f8b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
    f8b4:	dc1a      	bgt.n	f8ec <ceilf+0x48>
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	db21      	blt.n	f8fe <ceilf+0x5a>
    f8ba:	491a      	ldr	r1, [pc, #104]	; (f924 <ceilf+0x80>)
    f8bc:	4119      	asrs	r1, r3
    f8be:	420a      	tst	r2, r1
    f8c0:	d01c      	beq.n	f8fc <ceilf+0x58>
    f8c2:	eddf 7a19 	vldr	s15, [pc, #100]	; f928 <ceilf+0x84>
    f8c6:	ee70 7a27 	vadd.f32	s15, s0, s15
    f8ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    f8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f8d2:	dd13      	ble.n	f8fc <ceilf+0x58>
    f8d4:	2a00      	cmp	r2, #0
    f8d6:	dd04      	ble.n	f8e2 <ceilf+0x3e>
    f8d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    f8dc:	fa40 f303 	asr.w	r3, r0, r3
    f8e0:	441a      	add	r2, r3
    f8e2:	ea22 0301 	bic.w	r3, r2, r1
    f8e6:	ee00 3a10 	vmov	s0, r3
    f8ea:	4770      	bx	lr
    f8ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    f8f0:	d304      	bcc.n	f8fc <ceilf+0x58>
    f8f2:	ee30 0a00 	vadd.f32	s0, s0, s0
    f8f6:	4770      	bx	lr
    f8f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; f92c <ceilf+0x88>
    f8fc:	4770      	bx	lr
    f8fe:	eddf 7a0a 	vldr	s15, [pc, #40]	; f928 <ceilf+0x84>
    f902:	ee70 7a27 	vadd.f32	s15, s0, s15
    f906:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    f90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f90e:	ddf5      	ble.n	f8fc <ceilf+0x58>
    f910:	2a00      	cmp	r2, #0
    f912:	dbf1      	blt.n	f8f8 <ceilf+0x54>
    f914:	2900      	cmp	r1, #0
    f916:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f91a:	bf18      	it	ne
    f91c:	eeb0 0a67 	vmovne.f32	s0, s15
    f920:	4770      	bx	lr
    f922:	bf00      	nop
    f924:	007fffff 	.word	0x007fffff
    f928:	7149f2ca 	.word	0x7149f2ca
    f92c:	80000000 	.word	0x80000000

0000f930 <fabsf>:
    f930:	ee10 3a10 	vmov	r3, s0
    f934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f938:	ee00 3a10 	vmov	s0, r3
    f93c:	4770      	bx	lr
    f93e:	bf00      	nop

0000f940 <floorf>:
    f940:	ee10 2a10 	vmov	r2, s0
    f944:	f3c2 53c7 	ubfx	r3, r2, #23, #8
    f948:	3b7f      	subs	r3, #127	; 0x7f
    f94a:	2b16      	cmp	r3, #22
    f94c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
    f950:	dc1a      	bgt.n	f988 <floorf+0x48>
    f952:	2b00      	cmp	r3, #0
    f954:	db1e      	blt.n	f994 <floorf+0x54>
    f956:	491a      	ldr	r1, [pc, #104]	; (f9c0 <floorf+0x80>)
    f958:	4119      	asrs	r1, r3
    f95a:	420a      	tst	r2, r1
    f95c:	d027      	beq.n	f9ae <floorf+0x6e>
    f95e:	eddf 7a19 	vldr	s15, [pc, #100]	; f9c4 <floorf+0x84>
    f962:	ee70 7a27 	vadd.f32	s15, s0, s15
    f966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    f96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f96e:	dd1e      	ble.n	f9ae <floorf+0x6e>
    f970:	2a00      	cmp	r2, #0
    f972:	da04      	bge.n	f97e <floorf+0x3e>
    f974:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    f978:	fa40 f303 	asr.w	r3, r0, r3
    f97c:	441a      	add	r2, r3
    f97e:	ea22 0301 	bic.w	r3, r2, r1
    f982:	ee00 3a10 	vmov	s0, r3
    f986:	4770      	bx	lr
    f988:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    f98c:	d30f      	bcc.n	f9ae <floorf+0x6e>
    f98e:	ee30 0a00 	vadd.f32	s0, s0, s0
    f992:	4770      	bx	lr
    f994:	eddf 7a0b 	vldr	s15, [pc, #44]	; f9c4 <floorf+0x84>
    f998:	ee70 7a27 	vadd.f32	s15, s0, s15
    f99c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    f9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9a4:	dd03      	ble.n	f9ae <floorf+0x6e>
    f9a6:	2a00      	cmp	r2, #0
    f9a8:	db02      	blt.n	f9b0 <floorf+0x70>
    f9aa:	ed9f 0a07 	vldr	s0, [pc, #28]	; f9c8 <floorf+0x88>
    f9ae:	4770      	bx	lr
    f9b0:	2900      	cmp	r1, #0
    f9b2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    f9b6:	bf18      	it	ne
    f9b8:	eeb0 0a67 	vmovne.f32	s0, s15
    f9bc:	4770      	bx	lr
    f9be:	bf00      	nop
    f9c0:	007fffff 	.word	0x007fffff
    f9c4:	7149f2ca 	.word	0x7149f2ca
    f9c8:	00000000 	.word	0x00000000

0000f9cc <fmaf>:
    f9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9ce:	ee10 0a10 	vmov	r0, s0
    f9d2:	ee10 7a90 	vmov	r7, s1
    f9d6:	ee11 6a10 	vmov	r6, s2
    f9da:	f7f0 fd45 	bl	468 <__aeabi_f2d>
    f9de:	4604      	mov	r4, r0
    f9e0:	4638      	mov	r0, r7
    f9e2:	460d      	mov	r5, r1
    f9e4:	f7f0 fd40 	bl	468 <__aeabi_f2d>
    f9e8:	4602      	mov	r2, r0
    f9ea:	460b      	mov	r3, r1
    f9ec:	4620      	mov	r0, r4
    f9ee:	4629      	mov	r1, r5
    f9f0:	f7f0 fd92 	bl	518 <__aeabi_dmul>
    f9f4:	4604      	mov	r4, r0
    f9f6:	4630      	mov	r0, r6
    f9f8:	460d      	mov	r5, r1
    f9fa:	f7f0 fd35 	bl	468 <__aeabi_f2d>
    f9fe:	4602      	mov	r2, r0
    fa00:	460b      	mov	r3, r1
    fa02:	4620      	mov	r0, r4
    fa04:	4629      	mov	r1, r5
    fa06:	f7f0 fbd1 	bl	1ac <__adddf3>
    fa0a:	f7f1 f847 	bl	a9c <__aeabi_d2f>
    fa0e:	ee00 0a10 	vmov	s0, r0
    fa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fa14 <frexpf>:
    fa14:	ee10 2a10 	vmov	r2, s0
    fa18:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    fa1c:	b410      	push	{r4}
    fa1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
    fa22:	f04f 0400 	mov.w	r4, #0
    fa26:	6004      	str	r4, [r0, #0]
    fa28:	da17      	bge.n	fa5a <frexpf+0x46>
    fa2a:	b1b3      	cbz	r3, fa5a <frexpf+0x46>
    fa2c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
    fa30:	ee10 1a10 	vmov	r1, s0
    fa34:	d109      	bne.n	fa4a <frexpf+0x36>
    fa36:	eddf 7a0b 	vldr	s15, [pc, #44]	; fa64 <frexpf+0x50>
    fa3a:	ee60 7a27 	vmul.f32	s15, s0, s15
    fa3e:	f06f 0418 	mvn.w	r4, #24
    fa42:	ee17 1a90 	vmov	r1, s15
    fa46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    fa4a:	15db      	asrs	r3, r3, #23
    fa4c:	3b7e      	subs	r3, #126	; 0x7e
    fa4e:	4423      	add	r3, r4
    fa50:	f021 42ff 	bic.w	r2, r1, #2139095040	; 0x7f800000
    fa54:	6003      	str	r3, [r0, #0]
    fa56:	f042 527c 	orr.w	r2, r2, #1056964608	; 0x3f000000
    fa5a:	ee00 2a10 	vmov	s0, r2
    fa5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    fa62:	4770      	bx	lr
    fa64:	4c000000 	.word	0x4c000000

0000fa68 <roundf>:
    fa68:	ee10 3a10 	vmov	r3, s0
    fa6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    fa70:	3a7f      	subs	r2, #127	; 0x7f
    fa72:	2a16      	cmp	r2, #22
    fa74:	ee10 1a10 	vmov	r1, s0
    fa78:	dc0e      	bgt.n	fa98 <roundf+0x30>
    fa7a:	2a00      	cmp	r2, #0
    fa7c:	db11      	blt.n	faa2 <roundf+0x3a>
    fa7e:	480c      	ldr	r0, [pc, #48]	; (fab0 <roundf+0x48>)
    fa80:	4110      	asrs	r0, r2
    fa82:	4203      	tst	r3, r0
    fa84:	d005      	beq.n	fa92 <roundf+0x2a>
    fa86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    fa8a:	4113      	asrs	r3, r2
    fa8c:	440b      	add	r3, r1
    fa8e:	ea23 0300 	bic.w	r3, r3, r0
    fa92:	ee00 3a10 	vmov	s0, r3
    fa96:	4770      	bx	lr
    fa98:	2a80      	cmp	r2, #128	; 0x80
    fa9a:	d1fa      	bne.n	fa92 <roundf+0x2a>
    fa9c:	ee30 0a00 	vadd.f32	s0, s0, s0
    faa0:	4770      	bx	lr
    faa2:	3201      	adds	r2, #1
    faa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    faa8:	d1f3      	bne.n	fa92 <roundf+0x2a>
    faaa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
    faae:	e7f0      	b.n	fa92 <roundf+0x2a>
    fab0:	007fffff 	.word	0x007fffff

0000fab4 <sqrt>:
    fab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fab8:	ed2d 8b02 	vpush	{d8}
    fabc:	b08b      	sub	sp, #44	; 0x2c
    fabe:	ec55 4b10 	vmov	r4, r5, d0
    fac2:	f000 f933 	bl	fd2c <__ieee754_sqrt>
    fac6:	4b28      	ldr	r3, [pc, #160]	; (fb68 <sqrt+0xb4>)
    fac8:	eeb0 8a40 	vmov.f32	s16, s0
    facc:	eef0 8a60 	vmov.f32	s17, s1
    fad0:	f993 7000 	ldrsb.w	r7, [r3]
    fad4:	1c7b      	adds	r3, r7, #1
    fad6:	d012      	beq.n	fafe <sqrt+0x4a>
    fad8:	4622      	mov	r2, r4
    fada:	462b      	mov	r3, r5
    fadc:	4620      	mov	r0, r4
    fade:	4629      	mov	r1, r5
    fae0:	f7f1 fa4e 	bl	f80 <__aeabi_dcmpun>
    fae4:	4606      	mov	r6, r0
    fae6:	b950      	cbnz	r0, fafe <sqrt+0x4a>
    fae8:	f04f 0800 	mov.w	r8, #0
    faec:	f04f 0900 	mov.w	r9, #0
    faf0:	4620      	mov	r0, r4
    faf2:	4629      	mov	r1, r5
    faf4:	4642      	mov	r2, r8
    faf6:	464b      	mov	r3, r9
    faf8:	f7f0 ff80 	bl	9fc <__aeabi_dcmplt>
    fafc:	b940      	cbnz	r0, fb10 <sqrt+0x5c>
    fafe:	eeb0 0a48 	vmov.f32	s0, s16
    fb02:	eef0 0a68 	vmov.f32	s1, s17
    fb06:	b00b      	add	sp, #44	; 0x2c
    fb08:	ecbd 8b02 	vpop	{d8}
    fb0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fb10:	4b16      	ldr	r3, [pc, #88]	; (fb6c <sqrt+0xb8>)
    fb12:	9608      	str	r6, [sp, #32]
    fb14:	2201      	movs	r2, #1
    fb16:	e9cd 4504 	strd	r4, r5, [sp, #16]
    fb1a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    fb1e:	9200      	str	r2, [sp, #0]
    fb20:	9301      	str	r3, [sp, #4]
    fb22:	b197      	cbz	r7, fb4a <sqrt+0x96>
    fb24:	4642      	mov	r2, r8
    fb26:	464b      	mov	r3, r9
    fb28:	4640      	mov	r0, r8
    fb2a:	4649      	mov	r1, r9
    fb2c:	f7f0 fe1e 	bl	76c <__aeabi_ddiv>
    fb30:	2f02      	cmp	r7, #2
    fb32:	e9cd 0106 	strd	r0, r1, [sp, #24]
    fb36:	d10a      	bne.n	fb4e <sqrt+0x9a>
    fb38:	f005 fcbb 	bl	154b2 <__errno>
    fb3c:	2321      	movs	r3, #33	; 0x21
    fb3e:	6003      	str	r3, [r0, #0]
    fb40:	9b08      	ldr	r3, [sp, #32]
    fb42:	b963      	cbnz	r3, fb5e <sqrt+0xaa>
    fb44:	ed9d 8b06 	vldr	d8, [sp, #24]
    fb48:	e7d9      	b.n	fafe <sqrt+0x4a>
    fb4a:	e9cd 8906 	strd	r8, r9, [sp, #24]
    fb4e:	4668      	mov	r0, sp
    fb50:	f000 fab8 	bl	100c4 <matherr>
    fb54:	2800      	cmp	r0, #0
    fb56:	d0ef      	beq.n	fb38 <sqrt+0x84>
    fb58:	9b08      	ldr	r3, [sp, #32]
    fb5a:	2b00      	cmp	r3, #0
    fb5c:	d0f2      	beq.n	fb44 <sqrt+0x90>
    fb5e:	f005 fca8 	bl	154b2 <__errno>
    fb62:	9b08      	ldr	r3, [sp, #32]
    fb64:	6003      	str	r3, [r0, #0]
    fb66:	e7ed      	b.n	fb44 <sqrt+0x90>
    fb68:	200005b5 	.word	0x200005b5
    fb6c:	0004021c 	.word	0x0004021c

0000fb70 <expf>:
    fb70:	b5d0      	push	{r4, r6, r7, lr}
    fb72:	ed2d 8b02 	vpush	{d8}
    fb76:	4c3b      	ldr	r4, [pc, #236]	; (fc64 <expf+0xf4>)
    fb78:	b08a      	sub	sp, #40	; 0x28
    fb7a:	eef0 8a40 	vmov.f32	s17, s0
    fb7e:	f000 f999 	bl	feb4 <__ieee754_expf>
    fb82:	f994 3000 	ldrsb.w	r3, [r4]
    fb86:	3301      	adds	r3, #1
    fb88:	eeb0 8a40 	vmov.f32	s16, s0
    fb8c:	d012      	beq.n	fbb4 <expf+0x44>
    fb8e:	eeb0 0a68 	vmov.f32	s0, s17
    fb92:	f000 fb2b 	bl	101ec <finitef>
    fb96:	b168      	cbz	r0, fbb4 <expf+0x44>
    fb98:	eddf 7a33 	vldr	s15, [pc, #204]	; fc68 <expf+0xf8>
    fb9c:	eef4 8ae7 	vcmpe.f32	s17, s15
    fba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fba4:	dc40      	bgt.n	fc28 <expf+0xb8>
    fba6:	eddf 7a31 	vldr	s15, [pc, #196]	; fc6c <expf+0xfc>
    fbaa:	eef4 8ae7 	vcmpe.f32	s17, s15
    fbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fbb2:	d405      	bmi.n	fbc0 <expf+0x50>
    fbb4:	eeb0 0a48 	vmov.f32	s0, s16
    fbb8:	b00a      	add	sp, #40	; 0x28
    fbba:	ecbd 8b02 	vpop	{d8}
    fbbe:	bdd0      	pop	{r4, r6, r7, pc}
    fbc0:	2304      	movs	r3, #4
    fbc2:	4a2b      	ldr	r2, [pc, #172]	; (fc70 <expf+0x100>)
    fbc4:	9300      	str	r3, [sp, #0]
    fbc6:	ee18 0a90 	vmov	r0, s17
    fbca:	2300      	movs	r3, #0
    fbcc:	9308      	str	r3, [sp, #32]
    fbce:	9201      	str	r2, [sp, #4]
    fbd0:	f7f0 fc4a 	bl	468 <__aeabi_f2d>
    fbd4:	f994 3000 	ldrsb.w	r3, [r4]
    fbd8:	2600      	movs	r6, #0
    fbda:	2700      	movs	r7, #0
    fbdc:	2b02      	cmp	r3, #2
    fbde:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fbe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    fbe6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    fbea:	d018      	beq.n	fc1e <expf+0xae>
    fbec:	4668      	mov	r0, sp
    fbee:	f000 fa69 	bl	100c4 <matherr>
    fbf2:	b1a0      	cbz	r0, fc1e <expf+0xae>
    fbf4:	9b08      	ldr	r3, [sp, #32]
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	d12e      	bne.n	fc58 <expf+0xe8>
    fbfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    fbfe:	f7f0 ff4d 	bl	a9c <__aeabi_d2f>
    fc02:	ee08 0a10 	vmov	s16, r0
    fc06:	eeb0 0a48 	vmov.f32	s0, s16
    fc0a:	b00a      	add	sp, #40	; 0x28
    fc0c:	ecbd 8b02 	vpop	{d8}
    fc10:	bdd0      	pop	{r4, r6, r7, pc}
    fc12:	4918      	ldr	r1, [pc, #96]	; (fc74 <expf+0x104>)
    fc14:	2000      	movs	r0, #0
    fc16:	2b02      	cmp	r3, #2
    fc18:	e9cd 0106 	strd	r0, r1, [sp, #24]
    fc1c:	d1e6      	bne.n	fbec <expf+0x7c>
    fc1e:	f005 fc48 	bl	154b2 <__errno>
    fc22:	2322      	movs	r3, #34	; 0x22
    fc24:	6003      	str	r3, [r0, #0]
    fc26:	e7e5      	b.n	fbf4 <expf+0x84>
    fc28:	2303      	movs	r3, #3
    fc2a:	4a11      	ldr	r2, [pc, #68]	; (fc70 <expf+0x100>)
    fc2c:	9300      	str	r3, [sp, #0]
    fc2e:	ee18 0a90 	vmov	r0, s17
    fc32:	2300      	movs	r3, #0
    fc34:	9308      	str	r3, [sp, #32]
    fc36:	9201      	str	r2, [sp, #4]
    fc38:	f7f0 fc16 	bl	468 <__aeabi_f2d>
    fc3c:	f994 3000 	ldrsb.w	r3, [r4]
    fc40:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fc44:	e9cd 0102 	strd	r0, r1, [sp, #8]
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d1e2      	bne.n	fc12 <expf+0xa2>
    fc4c:	4b0a      	ldr	r3, [pc, #40]	; (fc78 <expf+0x108>)
    fc4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    fc52:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fc56:	e7c9      	b.n	fbec <expf+0x7c>
    fc58:	f005 fc2b 	bl	154b2 <__errno>
    fc5c:	9b08      	ldr	r3, [sp, #32]
    fc5e:	6003      	str	r3, [r0, #0]
    fc60:	e7cb      	b.n	fbfa <expf+0x8a>
    fc62:	bf00      	nop
    fc64:	200005b5 	.word	0x200005b5
    fc68:	42b17180 	.word	0x42b17180
    fc6c:	c2cff1b5 	.word	0xc2cff1b5
    fc70:	00040224 	.word	0x00040224
    fc74:	7ff00000 	.word	0x7ff00000
    fc78:	47efffff 	.word	0x47efffff

0000fc7c <sqrtf>:
    fc7c:	b510      	push	{r4, lr}
    fc7e:	ed2d 8b02 	vpush	{d8}
    fc82:	b08a      	sub	sp, #40	; 0x28
    fc84:	eeb0 8a40 	vmov.f32	s16, s0
    fc88:	f000 fa0c 	bl	100a4 <__ieee754_sqrtf>
    fc8c:	4b25      	ldr	r3, [pc, #148]	; (fd24 <sqrtf+0xa8>)
    fc8e:	f993 4000 	ldrsb.w	r4, [r3]
    fc92:	1c63      	adds	r3, r4, #1
    fc94:	d009      	beq.n	fcaa <sqrtf+0x2e>
    fc96:	eeb4 8a48 	vcmp.f32	s16, s16
    fc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc9e:	d604      	bvs.n	fcaa <sqrtf+0x2e>
    fca0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fca8:	d403      	bmi.n	fcb2 <sqrtf+0x36>
    fcaa:	b00a      	add	sp, #40	; 0x28
    fcac:	ecbd 8b02 	vpop	{d8}
    fcb0:	bd10      	pop	{r4, pc}
    fcb2:	2301      	movs	r3, #1
    fcb4:	4a1c      	ldr	r2, [pc, #112]	; (fd28 <sqrtf+0xac>)
    fcb6:	9300      	str	r3, [sp, #0]
    fcb8:	ee18 0a10 	vmov	r0, s16
    fcbc:	2300      	movs	r3, #0
    fcbe:	9201      	str	r2, [sp, #4]
    fcc0:	9308      	str	r3, [sp, #32]
    fcc2:	f7f0 fbd1 	bl	468 <__aeabi_f2d>
    fcc6:	2200      	movs	r2, #0
    fcc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    fccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    fcd0:	2300      	movs	r3, #0
    fcd2:	b1bc      	cbz	r4, fd04 <sqrtf+0x88>
    fcd4:	4610      	mov	r0, r2
    fcd6:	4619      	mov	r1, r3
    fcd8:	f7f0 fd48 	bl	76c <__aeabi_ddiv>
    fcdc:	2c02      	cmp	r4, #2
    fcde:	e9cd 0106 	strd	r0, r1, [sp, #24]
    fce2:	d111      	bne.n	fd08 <sqrtf+0x8c>
    fce4:	f005 fbe5 	bl	154b2 <__errno>
    fce8:	2321      	movs	r3, #33	; 0x21
    fcea:	6003      	str	r3, [r0, #0]
    fcec:	9b08      	ldr	r3, [sp, #32]
    fcee:	b99b      	cbnz	r3, fd18 <sqrtf+0x9c>
    fcf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    fcf4:	f7f0 fed2 	bl	a9c <__aeabi_d2f>
    fcf8:	ee00 0a10 	vmov	s0, r0
    fcfc:	b00a      	add	sp, #40	; 0x28
    fcfe:	ecbd 8b02 	vpop	{d8}
    fd02:	bd10      	pop	{r4, pc}
    fd04:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fd08:	4668      	mov	r0, sp
    fd0a:	f000 f9db 	bl	100c4 <matherr>
    fd0e:	2800      	cmp	r0, #0
    fd10:	d0e8      	beq.n	fce4 <sqrtf+0x68>
    fd12:	9b08      	ldr	r3, [sp, #32]
    fd14:	2b00      	cmp	r3, #0
    fd16:	d0eb      	beq.n	fcf0 <sqrtf+0x74>
    fd18:	f005 fbcb 	bl	154b2 <__errno>
    fd1c:	9b08      	ldr	r3, [sp, #32]
    fd1e:	6003      	str	r3, [r0, #0]
    fd20:	e7e6      	b.n	fcf0 <sqrtf+0x74>
    fd22:	bf00      	nop
    fd24:	200005b5 	.word	0x200005b5
    fd28:	0004022c 	.word	0x0004022c

0000fd2c <__ieee754_sqrt>:
    fd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd30:	4a5f      	ldr	r2, [pc, #380]	; (feb0 <__ieee754_sqrt+0x184>)
    fd32:	ec57 6b10 	vmov	r6, r7, d0
    fd36:	43ba      	bics	r2, r7
    fd38:	f000 8098 	beq.w	fe6c <__ieee754_sqrt+0x140>
    fd3c:	2f00      	cmp	r7, #0
    fd3e:	ee10 4a10 	vmov	r4, s0
    fd42:	463b      	mov	r3, r7
    fd44:	dd4e      	ble.n	fde4 <__ieee754_sqrt+0xb8>
    fd46:	1539      	asrs	r1, r7, #20
    fd48:	d05b      	beq.n	fe02 <__ieee754_sqrt+0xd6>
    fd4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    fd4e:	07ca      	lsls	r2, r1, #31
    fd50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    fd54:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
    fd58:	d403      	bmi.n	fd62 <__ieee754_sqrt+0x36>
    fd5a:	005b      	lsls	r3, r3, #1
    fd5c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
    fd60:	0064      	lsls	r4, r4, #1
    fd62:	0fe2      	lsrs	r2, r4, #31
    fd64:	f04f 0c00 	mov.w	ip, #0
    fd68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    fd6c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    fd70:	0064      	lsls	r4, r4, #1
    fd72:	4666      	mov	r6, ip
    fd74:	2516      	movs	r5, #22
    fd76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    fd7a:	18b1      	adds	r1, r6, r2
    fd7c:	4299      	cmp	r1, r3
    fd7e:	dc02      	bgt.n	fd86 <__ieee754_sqrt+0x5a>
    fd80:	1a5b      	subs	r3, r3, r1
    fd82:	188e      	adds	r6, r1, r2
    fd84:	4494      	add	ip, r2
    fd86:	005b      	lsls	r3, r3, #1
    fd88:	3d01      	subs	r5, #1
    fd8a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
    fd8e:	ea4f 0252 	mov.w	r2, r2, lsr #1
    fd92:	ea4f 0444 	mov.w	r4, r4, lsl #1
    fd96:	d1f0      	bne.n	fd7a <__ieee754_sqrt+0x4e>
    fd98:	462f      	mov	r7, r5
    fd9a:	2020      	movs	r0, #32
    fd9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    fda0:	e009      	b.n	fdb6 <__ieee754_sqrt+0x8a>
    fda2:	d03e      	beq.n	fe22 <__ieee754_sqrt+0xf6>
    fda4:	0fe1      	lsrs	r1, r4, #31
    fda6:	3801      	subs	r0, #1
    fda8:	ea4f 0252 	mov.w	r2, r2, lsr #1
    fdac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    fdb0:	ea4f 0444 	mov.w	r4, r4, lsl #1
    fdb4:	d03e      	beq.n	fe34 <__ieee754_sqrt+0x108>
    fdb6:	42b3      	cmp	r3, r6
    fdb8:	eb02 0105 	add.w	r1, r2, r5
    fdbc:	ddf1      	ble.n	fda2 <__ieee754_sqrt+0x76>
    fdbe:	2900      	cmp	r1, #0
    fdc0:	eb01 0502 	add.w	r5, r1, r2
    fdc4:	db09      	blt.n	fdda <__ieee754_sqrt+0xae>
    fdc6:	46b0      	mov	r8, r6
    fdc8:	1b9b      	subs	r3, r3, r6
    fdca:	42a1      	cmp	r1, r4
    fdcc:	bf88      	it	hi
    fdce:	f103 33ff 	addhi.w	r3, r3, #4294967295
    fdd2:	1a64      	subs	r4, r4, r1
    fdd4:	4417      	add	r7, r2
    fdd6:	4646      	mov	r6, r8
    fdd8:	e7e4      	b.n	fda4 <__ieee754_sqrt+0x78>
    fdda:	2d00      	cmp	r5, #0
    fddc:	dbf3      	blt.n	fdc6 <__ieee754_sqrt+0x9a>
    fdde:	f106 0801 	add.w	r8, r6, #1
    fde2:	e7f1      	b.n	fdc8 <__ieee754_sqrt+0x9c>
    fde4:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
    fde8:	4332      	orrs	r2, r6
    fdea:	d036      	beq.n	fe5a <__ieee754_sqrt+0x12e>
    fdec:	2f00      	cmp	r7, #0
    fdee:	d14d      	bne.n	fe8c <__ieee754_sqrt+0x160>
    fdf0:	4639      	mov	r1, r7
    fdf2:	0ae2      	lsrs	r2, r4, #11
    fdf4:	3915      	subs	r1, #21
    fdf6:	0564      	lsls	r4, r4, #21
    fdf8:	4613      	mov	r3, r2
    fdfa:	2a00      	cmp	r2, #0
    fdfc:	d0f9      	beq.n	fdf2 <__ieee754_sqrt+0xc6>
    fdfe:	02d7      	lsls	r7, r2, #11
    fe00:	d451      	bmi.n	fea6 <__ieee754_sqrt+0x17a>
    fe02:	2000      	movs	r0, #0
    fe04:	005b      	lsls	r3, r3, #1
    fe06:	02de      	lsls	r6, r3, #11
    fe08:	4605      	mov	r5, r0
    fe0a:	f100 0001 	add.w	r0, r0, #1
    fe0e:	d5f9      	bpl.n	fe04 <__ieee754_sqrt+0xd8>
    fe10:	461a      	mov	r2, r3
    fe12:	4623      	mov	r3, r4
    fe14:	4084      	lsls	r4, r0
    fe16:	f1c0 0020 	rsb	r0, r0, #32
    fe1a:	40c3      	lsrs	r3, r0
    fe1c:	4313      	orrs	r3, r2
    fe1e:	1b49      	subs	r1, r1, r5
    fe20:	e793      	b.n	fd4a <__ieee754_sqrt+0x1e>
    fe22:	42a1      	cmp	r1, r4
    fe24:	d8be      	bhi.n	fda4 <__ieee754_sqrt+0x78>
    fe26:	2900      	cmp	r1, #0
    fe28:	eb01 0502 	add.w	r5, r1, r2
    fe2c:	dbd5      	blt.n	fdda <__ieee754_sqrt+0xae>
    fe2e:	4698      	mov	r8, r3
    fe30:	2300      	movs	r3, #0
    fe32:	e7ce      	b.n	fdd2 <__ieee754_sqrt+0xa6>
    fe34:	4323      	orrs	r3, r4
    fe36:	d112      	bne.n	fe5e <__ieee754_sqrt+0x132>
    fe38:	0878      	lsrs	r0, r7, #1
    fe3a:	ea4f 016c 	mov.w	r1, ip, asr #1
    fe3e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
    fe42:	f01c 0f01 	tst.w	ip, #1
    fe46:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    fe4a:	bf18      	it	ne
    fe4c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
    fe50:	eb01 530e 	add.w	r3, r1, lr, lsl #20
    fe54:	4602      	mov	r2, r0
    fe56:	ec43 2b10 	vmov	d0, r2, r3
    fe5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe5e:	1c7b      	adds	r3, r7, #1
    fe60:	bf16      	itet	ne
    fe62:	1c78      	addne	r0, r7, #1
    fe64:	f10c 0c01 	addeq.w	ip, ip, #1
    fe68:	0840      	lsrne	r0, r0, #1
    fe6a:	e7e6      	b.n	fe3a <__ieee754_sqrt+0x10e>
    fe6c:	ee10 2a10 	vmov	r2, s0
    fe70:	ee10 0a10 	vmov	r0, s0
    fe74:	463b      	mov	r3, r7
    fe76:	4639      	mov	r1, r7
    fe78:	f7f0 fb4e 	bl	518 <__aeabi_dmul>
    fe7c:	4632      	mov	r2, r6
    fe7e:	463b      	mov	r3, r7
    fe80:	f7f0 f994 	bl	1ac <__adddf3>
    fe84:	ec41 0b10 	vmov	d0, r0, r1
    fe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe8c:	ee10 2a10 	vmov	r2, s0
    fe90:	4630      	mov	r0, r6
    fe92:	4639      	mov	r1, r7
    fe94:	f7f0 f988 	bl	1a8 <__aeabi_dsub>
    fe98:	4602      	mov	r2, r0
    fe9a:	460b      	mov	r3, r1
    fe9c:	f7f0 fc66 	bl	76c <__aeabi_ddiv>
    fea0:	ec41 0b10 	vmov	d0, r0, r1
    fea4:	e7d9      	b.n	fe5a <__ieee754_sqrt+0x12e>
    fea6:	4623      	mov	r3, r4
    fea8:	2020      	movs	r0, #32
    feaa:	f04f 35ff 	mov.w	r5, #4294967295
    feae:	e7b4      	b.n	fe1a <__ieee754_sqrt+0xee>
    feb0:	7ff00000 	.word	0x7ff00000

0000feb4 <__ieee754_expf>:
    feb4:	ee10 3a10 	vmov	r3, s0
    feb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    febc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fec0:	d857      	bhi.n	ff72 <__ieee754_expf+0xbe>
    fec2:	ea4f 71d3 	mov.w	r1, r3, lsr #31
    fec6:	f000 8098 	beq.w	fffa <__ieee754_expf+0x146>
    feca:	4864      	ldr	r0, [pc, #400]	; (1005c <__ieee754_expf+0x1a8>)
    fecc:	4283      	cmp	r3, r0
    fece:	dc53      	bgt.n	ff78 <__ieee754_expf+0xc4>
    fed0:	2b00      	cmp	r3, #0
    fed2:	f2c0 808b 	blt.w	ffec <__ieee754_expf+0x138>
    fed6:	4b62      	ldr	r3, [pc, #392]	; (10060 <__ieee754_expf+0x1ac>)
    fed8:	429a      	cmp	r2, r3
    feda:	d952      	bls.n	ff82 <__ieee754_expf+0xce>
    fedc:	4b61      	ldr	r3, [pc, #388]	; (10064 <__ieee754_expf+0x1b0>)
    fede:	429a      	cmp	r2, r3
    fee0:	f200 809e 	bhi.w	10020 <__ieee754_expf+0x16c>
    fee4:	4b60      	ldr	r3, [pc, #384]	; (10068 <__ieee754_expf+0x1b4>)
    fee6:	4a61      	ldr	r2, [pc, #388]	; (1006c <__ieee754_expf+0x1b8>)
    fee8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    feec:	ed93 4a00 	vldr	s8, [r3]
    fef0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    fef4:	f1c1 0301 	rsb	r3, r1, #1
    fef8:	ee30 4a44 	vsub.f32	s8, s0, s8
    fefc:	ed92 7a00 	vldr	s14, [r2]
    ff00:	1a5b      	subs	r3, r3, r1
    ff02:	ee34 0a47 	vsub.f32	s0, s8, s14
    ff06:	eddf 7a5a 	vldr	s15, [pc, #360]	; 10070 <__ieee754_expf+0x1bc>
    ff0a:	eddf 4a5a 	vldr	s9, [pc, #360]	; 10074 <__ieee754_expf+0x1c0>
    ff0e:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 10078 <__ieee754_expf+0x1c4>
    ff12:	eddf 5a5a 	vldr	s11, [pc, #360]	; 1007c <__ieee754_expf+0x1c8>
    ff16:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 10080 <__ieee754_expf+0x1cc>
    ff1a:	ee60 6a00 	vmul.f32	s13, s0, s0
    ff1e:	eee6 4aa7 	vfma.f32	s9, s13, s15
    ff22:	eef0 7a40 	vmov.f32	s15, s0
    ff26:	eea4 5aa6 	vfma.f32	s10, s9, s13
    ff2a:	eee5 5a26 	vfma.f32	s11, s10, s13
    ff2e:	eea5 6aa6 	vfma.f32	s12, s11, s13
    ff32:	eee6 7a66 	vfms.f32	s15, s12, s13
    ff36:	eef0 6a67 	vmov.f32	s13, s15
    ff3a:	2b00      	cmp	r3, #0
    ff3c:	d047      	beq.n	ffce <__ieee754_expf+0x11a>
    ff3e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    ff42:	ee60 5a27 	vmul.f32	s11, s0, s15
    ff46:	ee76 6a67 	vsub.f32	s13, s12, s15
    ff4a:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
    ff4e:	ee85 0aa6 	vdiv.f32	s0, s11, s13
    ff52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    ff56:	ee37 0a40 	vsub.f32	s0, s14, s0
    ff5a:	ee30 0a44 	vsub.f32	s0, s0, s8
    ff5e:	ee37 0ac0 	vsub.f32	s0, s15, s0
    ff62:	db51      	blt.n	10008 <__ieee754_expf+0x154>
    ff64:	ee10 2a10 	vmov	r2, s0
    ff68:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
    ff6c:	ee00 3a10 	vmov	s0, r3
    ff70:	4770      	bx	lr
    ff72:	ee30 0a00 	vadd.f32	s0, s0, s0
    ff76:	4770      	bx	lr
    ff78:	ed9f 0a42 	vldr	s0, [pc, #264]	; 10084 <__ieee754_expf+0x1d0>
    ff7c:	ee20 0a00 	vmul.f32	s0, s0, s0
    ff80:	4770      	bx	lr
    ff82:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
    ff86:	d20a      	bcs.n	ff9e <__ieee754_expf+0xea>
    ff88:	eddf 7a3e 	vldr	s15, [pc, #248]	; 10084 <__ieee754_expf+0x1d0>
    ff8c:	ee70 7a27 	vadd.f32	s15, s0, s15
    ff90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    ff94:	eef4 7ac7 	vcmpe.f32	s15, s14
    ff98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff9c:	dc5a      	bgt.n	10054 <__ieee754_expf+0x1a0>
    ff9e:	ee60 7a00 	vmul.f32	s15, s0, s0
    ffa2:	ed9f 5a33 	vldr	s10, [pc, #204]	; 10070 <__ieee754_expf+0x1bc>
    ffa6:	eddf 5a33 	vldr	s11, [pc, #204]	; 10074 <__ieee754_expf+0x1c0>
    ffaa:	ed9f 6a33 	vldr	s12, [pc, #204]	; 10078 <__ieee754_expf+0x1c4>
    ffae:	eddf 6a33 	vldr	s13, [pc, #204]	; 1007c <__ieee754_expf+0x1c8>
    ffb2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 10080 <__ieee754_expf+0x1cc>
    ffb6:	eee7 5a85 	vfma.f32	s11, s15, s10
    ffba:	eea7 6aa5 	vfma.f32	s12, s15, s11
    ffbe:	eee7 6a86 	vfma.f32	s13, s15, s12
    ffc2:	eea7 7aa6 	vfma.f32	s14, s15, s13
    ffc6:	eef0 6a40 	vmov.f32	s13, s0
    ffca:	eee7 6ac7 	vfms.f32	s13, s15, s14
    ffce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    ffd2:	ee36 7ac7 	vsub.f32	s14, s13, s14
    ffd6:	ee60 6a26 	vmul.f32	s13, s0, s13
    ffda:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    ffde:	eec6 7a87 	vdiv.f32	s15, s13, s14
    ffe2:	ee37 0ac0 	vsub.f32	s0, s15, s0
    ffe6:	ee36 0a40 	vsub.f32	s0, s12, s0
    ffea:	4770      	bx	lr
    ffec:	4b26      	ldr	r3, [pc, #152]	; (10088 <__ieee754_expf+0x1d4>)
    ffee:	429a      	cmp	r2, r3
    fff0:	f67f af71 	bls.w	fed6 <__ieee754_expf+0x22>
    fff4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 1008c <__ieee754_expf+0x1d8>
    fff8:	4770      	bx	lr
    fffa:	eddf 7a24 	vldr	s15, [pc, #144]	; 1008c <__ieee754_expf+0x1d8>
    fffe:	2900      	cmp	r1, #0
   10000:	bf18      	it	ne
   10002:	eeb0 0a67 	vmovne.f32	s0, s15
   10006:	4770      	bx	lr
   10008:	ee10 2a10 	vmov	r2, s0
   1000c:	3364      	adds	r3, #100	; 0x64
   1000e:	eb02 53c3 	add.w	r3, r2, r3, lsl #23
   10012:	eddf 7a1f 	vldr	s15, [pc, #124]	; 10090 <__ieee754_expf+0x1dc>
   10016:	ee00 3a10 	vmov	s0, r3
   1001a:	ee20 0a27 	vmul.f32	s0, s0, s15
   1001e:	4770      	bx	lr
   10020:	4b1c      	ldr	r3, [pc, #112]	; (10094 <__ieee754_expf+0x1e0>)
   10022:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 10098 <__ieee754_expf+0x1e4>
   10026:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 1009c <__ieee754_expf+0x1e8>
   1002a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 100a0 <__ieee754_expf+0x1ec>
   1002e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10032:	edd3 7a00 	vldr	s15, [r3]
   10036:	eee0 7a07 	vfma.f32	s15, s0, s14
   1003a:	eeb0 4a40 	vmov.f32	s8, s0
   1003e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   10042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   10046:	ee17 3a90 	vmov	r3, s15
   1004a:	eea7 4a46 	vfms.f32	s8, s14, s12
   1004e:	ee27 7a26 	vmul.f32	s14, s14, s13
   10052:	e756      	b.n	ff02 <__ieee754_expf+0x4e>
   10054:	ee30 0a07 	vadd.f32	s0, s0, s14
   10058:	4770      	bx	lr
   1005a:	bf00      	nop
   1005c:	42b17217 	.word	0x42b17217
   10060:	3eb17218 	.word	0x3eb17218
   10064:	3f851591 	.word	0x3f851591
   10068:	000403c4 	.word	0x000403c4
   1006c:	000403cc 	.word	0x000403cc
   10070:	3331bb4c 	.word	0x3331bb4c
   10074:	b5ddea0e 	.word	0xb5ddea0e
   10078:	388ab355 	.word	0x388ab355
   1007c:	bb360b61 	.word	0xbb360b61
   10080:	3e2aaaab 	.word	0x3e2aaaab
   10084:	7149f2ca 	.word	0x7149f2ca
   10088:	42cff1b5 	.word	0x42cff1b5
   1008c:	00000000 	.word	0x00000000
   10090:	0d800000 	.word	0x0d800000
   10094:	000403bc 	.word	0x000403bc
   10098:	3fb8aa3b 	.word	0x3fb8aa3b
   1009c:	3f317180 	.word	0x3f317180
   100a0:	3717f7d1 	.word	0x3717f7d1

000100a4 <__ieee754_sqrtf>:
   100a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
   100a8:	4770      	bx	lr
   100aa:	bf00      	nop

000100ac <finite>:
   100ac:	b082      	sub	sp, #8
   100ae:	ed8d 0b00 	vstr	d0, [sp]
   100b2:	9801      	ldr	r0, [sp, #4]
   100b4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   100b8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   100bc:	0fc0      	lsrs	r0, r0, #31
   100be:	b002      	add	sp, #8
   100c0:	4770      	bx	lr
   100c2:	bf00      	nop

000100c4 <matherr>:
   100c4:	2000      	movs	r0, #0
   100c6:	4770      	bx	lr

000100c8 <rint>:
   100c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   100ca:	ec53 2b10 	vmov	r2, r3, d0
   100ce:	f3c3 560a 	ubfx	r6, r3, #20, #11
   100d2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   100d6:	2813      	cmp	r0, #19
   100d8:	ee10 5a10 	vmov	r5, s0
   100dc:	b083      	sub	sp, #12
   100de:	4619      	mov	r1, r3
   100e0:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   100e4:	dc31      	bgt.n	1014a <rint+0x82>
   100e6:	2800      	cmp	r0, #0
   100e8:	db4c      	blt.n	10184 <rint+0xbc>
   100ea:	4e3e      	ldr	r6, [pc, #248]	; (101e4 <rint+0x11c>)
   100ec:	4106      	asrs	r6, r0
   100ee:	ea03 0706 	and.w	r7, r3, r6
   100f2:	4317      	orrs	r7, r2
   100f4:	d02e      	beq.n	10154 <rint+0x8c>
   100f6:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   100fa:	431d      	orrs	r5, r3
   100fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
   10100:	d00c      	beq.n	1011c <rint+0x54>
   10102:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   10106:	2813      	cmp	r0, #19
   10108:	ea21 0606 	bic.w	r6, r1, r6
   1010c:	fa43 f100 	asr.w	r1, r3, r0
   10110:	ea41 0106 	orr.w	r1, r1, r6
   10114:	bf0c      	ite	eq
   10116:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   1011a:	2500      	movne	r5, #0
   1011c:	4832      	ldr	r0, [pc, #200]	; (101e8 <rint+0x120>)
   1011e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   10122:	462a      	mov	r2, r5
   10124:	e9d4 4500 	ldrd	r4, r5, [r4]
   10128:	460b      	mov	r3, r1
   1012a:	4620      	mov	r0, r4
   1012c:	4629      	mov	r1, r5
   1012e:	f7f0 f83d 	bl	1ac <__adddf3>
   10132:	e9cd 0100 	strd	r0, r1, [sp]
   10136:	e9dd 0100 	ldrd	r0, r1, [sp]
   1013a:	4622      	mov	r2, r4
   1013c:	462b      	mov	r3, r5
   1013e:	f7f0 f833 	bl	1a8 <__aeabi_dsub>
   10142:	ec41 0b10 	vmov	d0, r0, r1
   10146:	b003      	add	sp, #12
   10148:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1014a:	2833      	cmp	r0, #51	; 0x33
   1014c:	dd06      	ble.n	1015c <rint+0x94>
   1014e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   10152:	d040      	beq.n	101d6 <rint+0x10e>
   10154:	ec43 2b10 	vmov	d0, r2, r3
   10158:	b003      	add	sp, #12
   1015a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1015c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   10160:	f04f 30ff 	mov.w	r0, #4294967295
   10164:	40f0      	lsrs	r0, r6
   10166:	4202      	tst	r2, r0
   10168:	d0f4      	beq.n	10154 <rint+0x8c>
   1016a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   1016e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   10172:	d0d3      	beq.n	1011c <rint+0x54>
   10174:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10178:	ea25 0503 	bic.w	r5, r5, r3
   1017c:	fa42 f606 	asr.w	r6, r2, r6
   10180:	4335      	orrs	r5, r6
   10182:	e7cb      	b.n	1011c <rint+0x54>
   10184:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   10188:	4310      	orrs	r0, r2
   1018a:	d0e3      	beq.n	10154 <rint+0x8c>
   1018c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   10190:	4310      	orrs	r0, r2
   10192:	4245      	negs	r5, r0
   10194:	4305      	orrs	r5, r0
   10196:	4814      	ldr	r0, [pc, #80]	; (101e8 <rint+0x120>)
   10198:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1019c:	e9d0 6700 	ldrd	r6, r7, [r0]
   101a0:	0c59      	lsrs	r1, r3, #17
   101a2:	0b2d      	lsrs	r5, r5, #12
   101a4:	0449      	lsls	r1, r1, #17
   101a6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   101aa:	ea45 0301 	orr.w	r3, r5, r1
   101ae:	4630      	mov	r0, r6
   101b0:	4639      	mov	r1, r7
   101b2:	f7ef fffb 	bl	1ac <__adddf3>
   101b6:	e9cd 0100 	strd	r0, r1, [sp]
   101ba:	463b      	mov	r3, r7
   101bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   101c0:	4632      	mov	r2, r6
   101c2:	f7ef fff1 	bl	1a8 <__aeabi_dsub>
   101c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   101ca:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   101ce:	ec41 0b10 	vmov	d0, r0, r1
   101d2:	b003      	add	sp, #12
   101d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101d6:	ee10 0a10 	vmov	r0, s0
   101da:	f7ef ffe7 	bl	1ac <__adddf3>
   101de:	ec41 0b10 	vmov	d0, r0, r1
   101e2:	e7b9      	b.n	10158 <rint+0x90>
   101e4:	000fffff 	.word	0x000fffff
   101e8:	00017ab0 	.word	0x00017ab0

000101ec <finitef>:
   101ec:	b082      	sub	sp, #8
   101ee:	ed8d 0a01 	vstr	s0, [sp, #4]
   101f2:	9801      	ldr	r0, [sp, #4]
   101f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   101f8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   101fc:	bfac      	ite	ge
   101fe:	2000      	movge	r0, #0
   10200:	2001      	movlt	r0, #1
   10202:	b002      	add	sp, #8
   10204:	4770      	bx	lr
   10206:	bf00      	nop

00010208 <__assert_func>:
   10208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1020a:	4614      	mov	r4, r2
   1020c:	461a      	mov	r2, r3
   1020e:	4b09      	ldr	r3, [pc, #36]	; (10234 <__assert_func+0x2c>)
   10210:	681b      	ldr	r3, [r3, #0]
   10212:	4605      	mov	r5, r0
   10214:	68d8      	ldr	r0, [r3, #12]
   10216:	b14c      	cbz	r4, 1022c <__assert_func+0x24>
   10218:	4b07      	ldr	r3, [pc, #28]	; (10238 <__assert_func+0x30>)
   1021a:	9100      	str	r1, [sp, #0]
   1021c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   10220:	4906      	ldr	r1, [pc, #24]	; (1023c <__assert_func+0x34>)
   10222:	462b      	mov	r3, r5
   10224:	f000 f816 	bl	10254 <fiprintf>
   10228:	f005 ff0e 	bl	16048 <abort>
   1022c:	4b04      	ldr	r3, [pc, #16]	; (10240 <__assert_func+0x38>)
   1022e:	461c      	mov	r4, r3
   10230:	e7f3      	b.n	1021a <__assert_func+0x12>
   10232:	bf00      	nop
   10234:	20000384 	.word	0x20000384
   10238:	00046d8e 	.word	0x00046d8e
   1023c:	00046d9b 	.word	0x00046d9b
   10240:	0004697c 	.word	0x0004697c

00010244 <calloc>:
   10244:	4b02      	ldr	r3, [pc, #8]	; (10250 <calloc+0xc>)
   10246:	460a      	mov	r2, r1
   10248:	4601      	mov	r1, r0
   1024a:	6818      	ldr	r0, [r3, #0]
   1024c:	f005 bf33 	b.w	160b6 <_calloc_r>
   10250:	20000384 	.word	0x20000384

00010254 <fiprintf>:
   10254:	b40e      	push	{r1, r2, r3}
   10256:	b503      	push	{r0, r1, lr}
   10258:	4601      	mov	r1, r0
   1025a:	ab03      	add	r3, sp, #12
   1025c:	4805      	ldr	r0, [pc, #20]	; (10274 <fiprintf+0x20>)
   1025e:	f853 2b04 	ldr.w	r2, [r3], #4
   10262:	6800      	ldr	r0, [r0, #0]
   10264:	9301      	str	r3, [sp, #4]
   10266:	f000 f8c1 	bl	103ec <_vfiprintf_r>
   1026a:	b002      	add	sp, #8
   1026c:	f85d eb04 	ldr.w	lr, [sp], #4
   10270:	b003      	add	sp, #12
   10272:	4770      	bx	lr
   10274:	20000384 	.word	0x20000384

00010278 <malloc>:
   10278:	4b02      	ldr	r3, [pc, #8]	; (10284 <malloc+0xc>)
   1027a:	4601      	mov	r1, r0
   1027c:	6818      	ldr	r0, [r3, #0]
   1027e:	f000 b85b 	b.w	10338 <_malloc_r>
   10282:	bf00      	nop
   10284:	20000384 	.word	0x20000384

00010288 <free>:
   10288:	4b02      	ldr	r3, [pc, #8]	; (10294 <free+0xc>)
   1028a:	4601      	mov	r1, r0
   1028c:	6818      	ldr	r0, [r3, #0]
   1028e:	f000 b803 	b.w	10298 <_free_r>
   10292:	bf00      	nop
   10294:	20000384 	.word	0x20000384

00010298 <_free_r>:
   10298:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1029a:	2900      	cmp	r1, #0
   1029c:	d048      	beq.n	10330 <_free_r+0x98>
   1029e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   102a2:	9001      	str	r0, [sp, #4]
   102a4:	2b00      	cmp	r3, #0
   102a6:	f1a1 0404 	sub.w	r4, r1, #4
   102aa:	bfb8      	it	lt
   102ac:	18e4      	addlt	r4, r4, r3
   102ae:	f001 f8c5 	bl	1143c <__malloc_lock>
   102b2:	4a20      	ldr	r2, [pc, #128]	; (10334 <_free_r+0x9c>)
   102b4:	9801      	ldr	r0, [sp, #4]
   102b6:	6813      	ldr	r3, [r2, #0]
   102b8:	4615      	mov	r5, r2
   102ba:	b933      	cbnz	r3, 102ca <_free_r+0x32>
   102bc:	6063      	str	r3, [r4, #4]
   102be:	6014      	str	r4, [r2, #0]
   102c0:	b003      	add	sp, #12
   102c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   102c6:	f001 b8bf 	b.w	11448 <__malloc_unlock>
   102ca:	42a3      	cmp	r3, r4
   102cc:	d90b      	bls.n	102e6 <_free_r+0x4e>
   102ce:	6821      	ldr	r1, [r4, #0]
   102d0:	1862      	adds	r2, r4, r1
   102d2:	4293      	cmp	r3, r2
   102d4:	bf04      	itt	eq
   102d6:	681a      	ldreq	r2, [r3, #0]
   102d8:	685b      	ldreq	r3, [r3, #4]
   102da:	6063      	str	r3, [r4, #4]
   102dc:	bf04      	itt	eq
   102de:	1852      	addeq	r2, r2, r1
   102e0:	6022      	streq	r2, [r4, #0]
   102e2:	602c      	str	r4, [r5, #0]
   102e4:	e7ec      	b.n	102c0 <_free_r+0x28>
   102e6:	461a      	mov	r2, r3
   102e8:	685b      	ldr	r3, [r3, #4]
   102ea:	b10b      	cbz	r3, 102f0 <_free_r+0x58>
   102ec:	42a3      	cmp	r3, r4
   102ee:	d9fa      	bls.n	102e6 <_free_r+0x4e>
   102f0:	6811      	ldr	r1, [r2, #0]
   102f2:	1855      	adds	r5, r2, r1
   102f4:	42a5      	cmp	r5, r4
   102f6:	d10b      	bne.n	10310 <_free_r+0x78>
   102f8:	6824      	ldr	r4, [r4, #0]
   102fa:	4421      	add	r1, r4
   102fc:	1854      	adds	r4, r2, r1
   102fe:	42a3      	cmp	r3, r4
   10300:	6011      	str	r1, [r2, #0]
   10302:	d1dd      	bne.n	102c0 <_free_r+0x28>
   10304:	681c      	ldr	r4, [r3, #0]
   10306:	685b      	ldr	r3, [r3, #4]
   10308:	6053      	str	r3, [r2, #4]
   1030a:	4421      	add	r1, r4
   1030c:	6011      	str	r1, [r2, #0]
   1030e:	e7d7      	b.n	102c0 <_free_r+0x28>
   10310:	d902      	bls.n	10318 <_free_r+0x80>
   10312:	230c      	movs	r3, #12
   10314:	6003      	str	r3, [r0, #0]
   10316:	e7d3      	b.n	102c0 <_free_r+0x28>
   10318:	6825      	ldr	r5, [r4, #0]
   1031a:	1961      	adds	r1, r4, r5
   1031c:	428b      	cmp	r3, r1
   1031e:	bf04      	itt	eq
   10320:	6819      	ldreq	r1, [r3, #0]
   10322:	685b      	ldreq	r3, [r3, #4]
   10324:	6063      	str	r3, [r4, #4]
   10326:	bf04      	itt	eq
   10328:	1949      	addeq	r1, r1, r5
   1032a:	6021      	streq	r1, [r4, #0]
   1032c:	6054      	str	r4, [r2, #4]
   1032e:	e7c7      	b.n	102c0 <_free_r+0x28>
   10330:	b003      	add	sp, #12
   10332:	bd30      	pop	{r4, r5, pc}
   10334:	20001894 	.word	0x20001894

00010338 <_malloc_r>:
   10338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1033a:	1ccd      	adds	r5, r1, #3
   1033c:	f025 0503 	bic.w	r5, r5, #3
   10340:	3508      	adds	r5, #8
   10342:	2d0c      	cmp	r5, #12
   10344:	bf38      	it	cc
   10346:	250c      	movcc	r5, #12
   10348:	2d00      	cmp	r5, #0
   1034a:	4606      	mov	r6, r0
   1034c:	db01      	blt.n	10352 <_malloc_r+0x1a>
   1034e:	42a9      	cmp	r1, r5
   10350:	d903      	bls.n	1035a <_malloc_r+0x22>
   10352:	230c      	movs	r3, #12
   10354:	6033      	str	r3, [r6, #0]
   10356:	2000      	movs	r0, #0
   10358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1035a:	f001 f86f 	bl	1143c <__malloc_lock>
   1035e:	4921      	ldr	r1, [pc, #132]	; (103e4 <_malloc_r+0xac>)
   10360:	680a      	ldr	r2, [r1, #0]
   10362:	4614      	mov	r4, r2
   10364:	b99c      	cbnz	r4, 1038e <_malloc_r+0x56>
   10366:	4f20      	ldr	r7, [pc, #128]	; (103e8 <_malloc_r+0xb0>)
   10368:	683b      	ldr	r3, [r7, #0]
   1036a:	b923      	cbnz	r3, 10376 <_malloc_r+0x3e>
   1036c:	4621      	mov	r1, r4
   1036e:	4630      	mov	r0, r6
   10370:	f000 fce0 	bl	10d34 <_sbrk_r>
   10374:	6038      	str	r0, [r7, #0]
   10376:	4629      	mov	r1, r5
   10378:	4630      	mov	r0, r6
   1037a:	f000 fcdb 	bl	10d34 <_sbrk_r>
   1037e:	1c43      	adds	r3, r0, #1
   10380:	d123      	bne.n	103ca <_malloc_r+0x92>
   10382:	230c      	movs	r3, #12
   10384:	6033      	str	r3, [r6, #0]
   10386:	4630      	mov	r0, r6
   10388:	f001 f85e 	bl	11448 <__malloc_unlock>
   1038c:	e7e3      	b.n	10356 <_malloc_r+0x1e>
   1038e:	6823      	ldr	r3, [r4, #0]
   10390:	1b5b      	subs	r3, r3, r5
   10392:	d417      	bmi.n	103c4 <_malloc_r+0x8c>
   10394:	2b0b      	cmp	r3, #11
   10396:	d903      	bls.n	103a0 <_malloc_r+0x68>
   10398:	6023      	str	r3, [r4, #0]
   1039a:	441c      	add	r4, r3
   1039c:	6025      	str	r5, [r4, #0]
   1039e:	e004      	b.n	103aa <_malloc_r+0x72>
   103a0:	6863      	ldr	r3, [r4, #4]
   103a2:	42a2      	cmp	r2, r4
   103a4:	bf0c      	ite	eq
   103a6:	600b      	streq	r3, [r1, #0]
   103a8:	6053      	strne	r3, [r2, #4]
   103aa:	4630      	mov	r0, r6
   103ac:	f001 f84c 	bl	11448 <__malloc_unlock>
   103b0:	f104 000b 	add.w	r0, r4, #11
   103b4:	1d23      	adds	r3, r4, #4
   103b6:	f020 0007 	bic.w	r0, r0, #7
   103ba:	1ac2      	subs	r2, r0, r3
   103bc:	d0cc      	beq.n	10358 <_malloc_r+0x20>
   103be:	1a1b      	subs	r3, r3, r0
   103c0:	50a3      	str	r3, [r4, r2]
   103c2:	e7c9      	b.n	10358 <_malloc_r+0x20>
   103c4:	4622      	mov	r2, r4
   103c6:	6864      	ldr	r4, [r4, #4]
   103c8:	e7cc      	b.n	10364 <_malloc_r+0x2c>
   103ca:	1cc4      	adds	r4, r0, #3
   103cc:	f024 0403 	bic.w	r4, r4, #3
   103d0:	42a0      	cmp	r0, r4
   103d2:	d0e3      	beq.n	1039c <_malloc_r+0x64>
   103d4:	1a21      	subs	r1, r4, r0
   103d6:	4630      	mov	r0, r6
   103d8:	f000 fcac 	bl	10d34 <_sbrk_r>
   103dc:	3001      	adds	r0, #1
   103de:	d1dd      	bne.n	1039c <_malloc_r+0x64>
   103e0:	e7cf      	b.n	10382 <_malloc_r+0x4a>
   103e2:	bf00      	nop
   103e4:	20001894 	.word	0x20001894
   103e8:	20001898 	.word	0x20001898

000103ec <_vfiprintf_r>:
   103ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103f0:	460d      	mov	r5, r1
   103f2:	b09d      	sub	sp, #116	; 0x74
   103f4:	4614      	mov	r4, r2
   103f6:	4698      	mov	r8, r3
   103f8:	4606      	mov	r6, r0
   103fa:	b118      	cbz	r0, 10404 <_vfiprintf_r+0x18>
   103fc:	6983      	ldr	r3, [r0, #24]
   103fe:	b90b      	cbnz	r3, 10404 <_vfiprintf_r+0x18>
   10400:	f000 ff5a 	bl	112b8 <__sinit>
   10404:	4b89      	ldr	r3, [pc, #548]	; (1062c <_vfiprintf_r+0x240>)
   10406:	429d      	cmp	r5, r3
   10408:	d11b      	bne.n	10442 <_vfiprintf_r+0x56>
   1040a:	6875      	ldr	r5, [r6, #4]
   1040c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1040e:	07d9      	lsls	r1, r3, #31
   10410:	d405      	bmi.n	1041e <_vfiprintf_r+0x32>
   10412:	89ab      	ldrh	r3, [r5, #12]
   10414:	059a      	lsls	r2, r3, #22
   10416:	d402      	bmi.n	1041e <_vfiprintf_r+0x32>
   10418:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1041a:	f005 f842 	bl	154a2 <__retarget_lock_acquire_recursive>
   1041e:	89ab      	ldrh	r3, [r5, #12]
   10420:	071b      	lsls	r3, r3, #28
   10422:	d501      	bpl.n	10428 <_vfiprintf_r+0x3c>
   10424:	692b      	ldr	r3, [r5, #16]
   10426:	b9eb      	cbnz	r3, 10464 <_vfiprintf_r+0x78>
   10428:	4629      	mov	r1, r5
   1042a:	4630      	mov	r0, r6
   1042c:	f000 fdd2 	bl	10fd4 <__swsetup_r>
   10430:	b1c0      	cbz	r0, 10464 <_vfiprintf_r+0x78>
   10432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10434:	07dc      	lsls	r4, r3, #31
   10436:	d50e      	bpl.n	10456 <_vfiprintf_r+0x6a>
   10438:	f04f 30ff 	mov.w	r0, #4294967295
   1043c:	b01d      	add	sp, #116	; 0x74
   1043e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10442:	4b7b      	ldr	r3, [pc, #492]	; (10630 <_vfiprintf_r+0x244>)
   10444:	429d      	cmp	r5, r3
   10446:	d101      	bne.n	1044c <_vfiprintf_r+0x60>
   10448:	68b5      	ldr	r5, [r6, #8]
   1044a:	e7df      	b.n	1040c <_vfiprintf_r+0x20>
   1044c:	4b79      	ldr	r3, [pc, #484]	; (10634 <_vfiprintf_r+0x248>)
   1044e:	429d      	cmp	r5, r3
   10450:	bf08      	it	eq
   10452:	68f5      	ldreq	r5, [r6, #12]
   10454:	e7da      	b.n	1040c <_vfiprintf_r+0x20>
   10456:	89ab      	ldrh	r3, [r5, #12]
   10458:	0598      	lsls	r0, r3, #22
   1045a:	d4ed      	bmi.n	10438 <_vfiprintf_r+0x4c>
   1045c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1045e:	f005 f826 	bl	154ae <__retarget_lock_release_recursive>
   10462:	e7e9      	b.n	10438 <_vfiprintf_r+0x4c>
   10464:	2300      	movs	r3, #0
   10466:	9309      	str	r3, [sp, #36]	; 0x24
   10468:	2320      	movs	r3, #32
   1046a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1046e:	f8cd 800c 	str.w	r8, [sp, #12]
   10472:	2330      	movs	r3, #48	; 0x30
   10474:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 10638 <_vfiprintf_r+0x24c>
   10478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1047c:	f04f 0901 	mov.w	r9, #1
   10480:	4623      	mov	r3, r4
   10482:	469a      	mov	sl, r3
   10484:	f813 2b01 	ldrb.w	r2, [r3], #1
   10488:	b10a      	cbz	r2, 1048e <_vfiprintf_r+0xa2>
   1048a:	2a25      	cmp	r2, #37	; 0x25
   1048c:	d1f9      	bne.n	10482 <_vfiprintf_r+0x96>
   1048e:	ebba 0b04 	subs.w	fp, sl, r4
   10492:	d00b      	beq.n	104ac <_vfiprintf_r+0xc0>
   10494:	465b      	mov	r3, fp
   10496:	4622      	mov	r2, r4
   10498:	4629      	mov	r1, r5
   1049a:	4630      	mov	r0, r6
   1049c:	f005 fe31 	bl	16102 <__sfputs_r>
   104a0:	3001      	adds	r0, #1
   104a2:	f000 80aa 	beq.w	105fa <_vfiprintf_r+0x20e>
   104a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   104a8:	445a      	add	r2, fp
   104aa:	9209      	str	r2, [sp, #36]	; 0x24
   104ac:	f89a 3000 	ldrb.w	r3, [sl]
   104b0:	2b00      	cmp	r3, #0
   104b2:	f000 80a2 	beq.w	105fa <_vfiprintf_r+0x20e>
   104b6:	2300      	movs	r3, #0
   104b8:	f04f 32ff 	mov.w	r2, #4294967295
   104bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
   104c0:	f10a 0a01 	add.w	sl, sl, #1
   104c4:	9304      	str	r3, [sp, #16]
   104c6:	9307      	str	r3, [sp, #28]
   104c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   104cc:	931a      	str	r3, [sp, #104]	; 0x68
   104ce:	4654      	mov	r4, sl
   104d0:	2205      	movs	r2, #5
   104d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   104d6:	4858      	ldr	r0, [pc, #352]	; (10638 <_vfiprintf_r+0x24c>)
   104d8:	f7ef fe12 	bl	100 <memchr>
   104dc:	9a04      	ldr	r2, [sp, #16]
   104de:	b9d8      	cbnz	r0, 10518 <_vfiprintf_r+0x12c>
   104e0:	06d1      	lsls	r1, r2, #27
   104e2:	bf44      	itt	mi
   104e4:	2320      	movmi	r3, #32
   104e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   104ea:	0713      	lsls	r3, r2, #28
   104ec:	bf44      	itt	mi
   104ee:	232b      	movmi	r3, #43	; 0x2b
   104f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   104f4:	f89a 3000 	ldrb.w	r3, [sl]
   104f8:	2b2a      	cmp	r3, #42	; 0x2a
   104fa:	d015      	beq.n	10528 <_vfiprintf_r+0x13c>
   104fc:	9a07      	ldr	r2, [sp, #28]
   104fe:	4654      	mov	r4, sl
   10500:	2000      	movs	r0, #0
   10502:	f04f 0c0a 	mov.w	ip, #10
   10506:	4621      	mov	r1, r4
   10508:	f811 3b01 	ldrb.w	r3, [r1], #1
   1050c:	3b30      	subs	r3, #48	; 0x30
   1050e:	2b09      	cmp	r3, #9
   10510:	d94e      	bls.n	105b0 <_vfiprintf_r+0x1c4>
   10512:	b1b0      	cbz	r0, 10542 <_vfiprintf_r+0x156>
   10514:	9207      	str	r2, [sp, #28]
   10516:	e014      	b.n	10542 <_vfiprintf_r+0x156>
   10518:	eba0 0308 	sub.w	r3, r0, r8
   1051c:	fa09 f303 	lsl.w	r3, r9, r3
   10520:	4313      	orrs	r3, r2
   10522:	9304      	str	r3, [sp, #16]
   10524:	46a2      	mov	sl, r4
   10526:	e7d2      	b.n	104ce <_vfiprintf_r+0xe2>
   10528:	9b03      	ldr	r3, [sp, #12]
   1052a:	1d19      	adds	r1, r3, #4
   1052c:	681b      	ldr	r3, [r3, #0]
   1052e:	9103      	str	r1, [sp, #12]
   10530:	2b00      	cmp	r3, #0
   10532:	bfbb      	ittet	lt
   10534:	425b      	neglt	r3, r3
   10536:	f042 0202 	orrlt.w	r2, r2, #2
   1053a:	9307      	strge	r3, [sp, #28]
   1053c:	9307      	strlt	r3, [sp, #28]
   1053e:	bfb8      	it	lt
   10540:	9204      	strlt	r2, [sp, #16]
   10542:	7823      	ldrb	r3, [r4, #0]
   10544:	2b2e      	cmp	r3, #46	; 0x2e
   10546:	d10c      	bne.n	10562 <_vfiprintf_r+0x176>
   10548:	7863      	ldrb	r3, [r4, #1]
   1054a:	2b2a      	cmp	r3, #42	; 0x2a
   1054c:	d135      	bne.n	105ba <_vfiprintf_r+0x1ce>
   1054e:	9b03      	ldr	r3, [sp, #12]
   10550:	1d1a      	adds	r2, r3, #4
   10552:	681b      	ldr	r3, [r3, #0]
   10554:	9203      	str	r2, [sp, #12]
   10556:	2b00      	cmp	r3, #0
   10558:	bfb8      	it	lt
   1055a:	f04f 33ff 	movlt.w	r3, #4294967295
   1055e:	3402      	adds	r4, #2
   10560:	9305      	str	r3, [sp, #20]
   10562:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 10648 <_vfiprintf_r+0x25c>
   10566:	7821      	ldrb	r1, [r4, #0]
   10568:	2203      	movs	r2, #3
   1056a:	4650      	mov	r0, sl
   1056c:	f7ef fdc8 	bl	100 <memchr>
   10570:	b140      	cbz	r0, 10584 <_vfiprintf_r+0x198>
   10572:	2340      	movs	r3, #64	; 0x40
   10574:	eba0 000a 	sub.w	r0, r0, sl
   10578:	fa03 f000 	lsl.w	r0, r3, r0
   1057c:	9b04      	ldr	r3, [sp, #16]
   1057e:	4303      	orrs	r3, r0
   10580:	3401      	adds	r4, #1
   10582:	9304      	str	r3, [sp, #16]
   10584:	f814 1b01 	ldrb.w	r1, [r4], #1
   10588:	482c      	ldr	r0, [pc, #176]	; (1063c <_vfiprintf_r+0x250>)
   1058a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1058e:	2206      	movs	r2, #6
   10590:	f7ef fdb6 	bl	100 <memchr>
   10594:	2800      	cmp	r0, #0
   10596:	d03f      	beq.n	10618 <_vfiprintf_r+0x22c>
   10598:	4b29      	ldr	r3, [pc, #164]	; (10640 <_vfiprintf_r+0x254>)
   1059a:	bb1b      	cbnz	r3, 105e4 <_vfiprintf_r+0x1f8>
   1059c:	9b03      	ldr	r3, [sp, #12]
   1059e:	3307      	adds	r3, #7
   105a0:	f023 0307 	bic.w	r3, r3, #7
   105a4:	3308      	adds	r3, #8
   105a6:	9303      	str	r3, [sp, #12]
   105a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   105aa:	443b      	add	r3, r7
   105ac:	9309      	str	r3, [sp, #36]	; 0x24
   105ae:	e767      	b.n	10480 <_vfiprintf_r+0x94>
   105b0:	fb0c 3202 	mla	r2, ip, r2, r3
   105b4:	460c      	mov	r4, r1
   105b6:	2001      	movs	r0, #1
   105b8:	e7a5      	b.n	10506 <_vfiprintf_r+0x11a>
   105ba:	2300      	movs	r3, #0
   105bc:	3401      	adds	r4, #1
   105be:	9305      	str	r3, [sp, #20]
   105c0:	4619      	mov	r1, r3
   105c2:	f04f 0c0a 	mov.w	ip, #10
   105c6:	4620      	mov	r0, r4
   105c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   105cc:	3a30      	subs	r2, #48	; 0x30
   105ce:	2a09      	cmp	r2, #9
   105d0:	d903      	bls.n	105da <_vfiprintf_r+0x1ee>
   105d2:	2b00      	cmp	r3, #0
   105d4:	d0c5      	beq.n	10562 <_vfiprintf_r+0x176>
   105d6:	9105      	str	r1, [sp, #20]
   105d8:	e7c3      	b.n	10562 <_vfiprintf_r+0x176>
   105da:	fb0c 2101 	mla	r1, ip, r1, r2
   105de:	4604      	mov	r4, r0
   105e0:	2301      	movs	r3, #1
   105e2:	e7f0      	b.n	105c6 <_vfiprintf_r+0x1da>
   105e4:	ab03      	add	r3, sp, #12
   105e6:	9300      	str	r3, [sp, #0]
   105e8:	462a      	mov	r2, r5
   105ea:	4b16      	ldr	r3, [pc, #88]	; (10644 <_vfiprintf_r+0x258>)
   105ec:	a904      	add	r1, sp, #16
   105ee:	4630      	mov	r0, r6
   105f0:	f000 f82c 	bl	1064c <_printf_float>
   105f4:	4607      	mov	r7, r0
   105f6:	1c78      	adds	r0, r7, #1
   105f8:	d1d6      	bne.n	105a8 <_vfiprintf_r+0x1bc>
   105fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   105fc:	07d9      	lsls	r1, r3, #31
   105fe:	d405      	bmi.n	1060c <_vfiprintf_r+0x220>
   10600:	89ab      	ldrh	r3, [r5, #12]
   10602:	059a      	lsls	r2, r3, #22
   10604:	d402      	bmi.n	1060c <_vfiprintf_r+0x220>
   10606:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10608:	f004 ff51 	bl	154ae <__retarget_lock_release_recursive>
   1060c:	89ab      	ldrh	r3, [r5, #12]
   1060e:	065b      	lsls	r3, r3, #25
   10610:	f53f af12 	bmi.w	10438 <_vfiprintf_r+0x4c>
   10614:	9809      	ldr	r0, [sp, #36]	; 0x24
   10616:	e711      	b.n	1043c <_vfiprintf_r+0x50>
   10618:	ab03      	add	r3, sp, #12
   1061a:	9300      	str	r3, [sp, #0]
   1061c:	462a      	mov	r2, r5
   1061e:	4b09      	ldr	r3, [pc, #36]	; (10644 <_vfiprintf_r+0x258>)
   10620:	a904      	add	r1, sp, #16
   10622:	4630      	mov	r0, r6
   10624:	f000 fa48 	bl	10ab8 <_printf_i>
   10628:	e7e4      	b.n	105f4 <_vfiprintf_r+0x208>
   1062a:	bf00      	nop
   1062c:	00040408 	.word	0x00040408
   10630:	00040428 	.word	0x00040428
   10634:	000403e8 	.word	0x000403e8
   10638:	00046ecb 	.word	0x00046ecb
   1063c:	00046ed5 	.word	0x00046ed5
   10640:	0001064d 	.word	0x0001064d
   10644:	00016103 	.word	0x00016103
   10648:	00046ed1 	.word	0x00046ed1

0001064c <_printf_float>:
   1064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10650:	ed2d 8b02 	vpush	{d8}
   10654:	b08d      	sub	sp, #52	; 0x34
   10656:	460c      	mov	r4, r1
   10658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   1065c:	4616      	mov	r6, r2
   1065e:	461f      	mov	r7, r3
   10660:	4605      	mov	r5, r0
   10662:	f000 fea7 	bl	113b4 <_localeconv_r>
   10666:	f8d0 a000 	ldr.w	sl, [r0]
   1066a:	4650      	mov	r0, sl
   1066c:	f7f0 fca8 	bl	fc0 <strlen>
   10670:	2300      	movs	r3, #0
   10672:	930a      	str	r3, [sp, #40]	; 0x28
   10674:	6823      	ldr	r3, [r4, #0]
   10676:	9305      	str	r3, [sp, #20]
   10678:	f8d8 3000 	ldr.w	r3, [r8]
   1067c:	f894 b018 	ldrb.w	fp, [r4, #24]
   10680:	3307      	adds	r3, #7
   10682:	f023 0307 	bic.w	r3, r3, #7
   10686:	f103 0208 	add.w	r2, r3, #8
   1068a:	f8c8 2000 	str.w	r2, [r8]
   1068e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10692:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   10696:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   1069a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   1069e:	9307      	str	r3, [sp, #28]
   106a0:	f8cd 8018 	str.w	r8, [sp, #24]
   106a4:	ee08 0a10 	vmov	s16, r0
   106a8:	4b9f      	ldr	r3, [pc, #636]	; (10928 <_printf_float+0x2dc>)
   106aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   106ae:	f04f 32ff 	mov.w	r2, #4294967295
   106b2:	f7f0 fc65 	bl	f80 <__aeabi_dcmpun>
   106b6:	bb88      	cbnz	r0, 1071c <_printf_float+0xd0>
   106b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   106bc:	4b9a      	ldr	r3, [pc, #616]	; (10928 <_printf_float+0x2dc>)
   106be:	f04f 32ff 	mov.w	r2, #4294967295
   106c2:	f7f0 f9a5 	bl	a10 <__aeabi_dcmple>
   106c6:	bb48      	cbnz	r0, 1071c <_printf_float+0xd0>
   106c8:	2200      	movs	r2, #0
   106ca:	2300      	movs	r3, #0
   106cc:	4640      	mov	r0, r8
   106ce:	4649      	mov	r1, r9
   106d0:	f7f0 f994 	bl	9fc <__aeabi_dcmplt>
   106d4:	b110      	cbz	r0, 106dc <_printf_float+0x90>
   106d6:	232d      	movs	r3, #45	; 0x2d
   106d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   106dc:	4b93      	ldr	r3, [pc, #588]	; (1092c <_printf_float+0x2e0>)
   106de:	4894      	ldr	r0, [pc, #592]	; (10930 <_printf_float+0x2e4>)
   106e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   106e4:	bf94      	ite	ls
   106e6:	4698      	movls	r8, r3
   106e8:	4680      	movhi	r8, r0
   106ea:	2303      	movs	r3, #3
   106ec:	6123      	str	r3, [r4, #16]
   106ee:	9b05      	ldr	r3, [sp, #20]
   106f0:	f023 0204 	bic.w	r2, r3, #4
   106f4:	6022      	str	r2, [r4, #0]
   106f6:	f04f 0900 	mov.w	r9, #0
   106fa:	9700      	str	r7, [sp, #0]
   106fc:	4633      	mov	r3, r6
   106fe:	aa0b      	add	r2, sp, #44	; 0x2c
   10700:	4621      	mov	r1, r4
   10702:	4628      	mov	r0, r5
   10704:	f005 fdaf 	bl	16266 <_printf_common>
   10708:	3001      	adds	r0, #1
   1070a:	f040 8090 	bne.w	1082e <_printf_float+0x1e2>
   1070e:	f04f 30ff 	mov.w	r0, #4294967295
   10712:	b00d      	add	sp, #52	; 0x34
   10714:	ecbd 8b02 	vpop	{d8}
   10718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1071c:	4642      	mov	r2, r8
   1071e:	464b      	mov	r3, r9
   10720:	4640      	mov	r0, r8
   10722:	4649      	mov	r1, r9
   10724:	f7f0 fc2c 	bl	f80 <__aeabi_dcmpun>
   10728:	b140      	cbz	r0, 1073c <_printf_float+0xf0>
   1072a:	464b      	mov	r3, r9
   1072c:	2b00      	cmp	r3, #0
   1072e:	bfbc      	itt	lt
   10730:	232d      	movlt	r3, #45	; 0x2d
   10732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   10736:	487f      	ldr	r0, [pc, #508]	; (10934 <_printf_float+0x2e8>)
   10738:	4b7f      	ldr	r3, [pc, #508]	; (10938 <_printf_float+0x2ec>)
   1073a:	e7d1      	b.n	106e0 <_printf_float+0x94>
   1073c:	6863      	ldr	r3, [r4, #4]
   1073e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   10742:	9206      	str	r2, [sp, #24]
   10744:	1c5a      	adds	r2, r3, #1
   10746:	d13f      	bne.n	107c8 <_printf_float+0x17c>
   10748:	2306      	movs	r3, #6
   1074a:	6063      	str	r3, [r4, #4]
   1074c:	9b05      	ldr	r3, [sp, #20]
   1074e:	6861      	ldr	r1, [r4, #4]
   10750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   10754:	2300      	movs	r3, #0
   10756:	9303      	str	r3, [sp, #12]
   10758:	ab0a      	add	r3, sp, #40	; 0x28
   1075a:	e9cd b301 	strd	fp, r3, [sp, #4]
   1075e:	ab09      	add	r3, sp, #36	; 0x24
   10760:	ec49 8b10 	vmov	d0, r8, r9
   10764:	9300      	str	r3, [sp, #0]
   10766:	6022      	str	r2, [r4, #0]
   10768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1076c:	4628      	mov	r0, r5
   1076e:	f005 fcda 	bl	16126 <__cvt>
   10772:	9b06      	ldr	r3, [sp, #24]
   10774:	9909      	ldr	r1, [sp, #36]	; 0x24
   10776:	2b47      	cmp	r3, #71	; 0x47
   10778:	4680      	mov	r8, r0
   1077a:	d108      	bne.n	1078e <_printf_float+0x142>
   1077c:	1cc8      	adds	r0, r1, #3
   1077e:	db02      	blt.n	10786 <_printf_float+0x13a>
   10780:	6863      	ldr	r3, [r4, #4]
   10782:	4299      	cmp	r1, r3
   10784:	dd41      	ble.n	1080a <_printf_float+0x1be>
   10786:	f1ab 0b02 	sub.w	fp, fp, #2
   1078a:	fa5f fb8b 	uxtb.w	fp, fp
   1078e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   10792:	d820      	bhi.n	107d6 <_printf_float+0x18a>
   10794:	3901      	subs	r1, #1
   10796:	465a      	mov	r2, fp
   10798:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1079c:	9109      	str	r1, [sp, #36]	; 0x24
   1079e:	f005 fd24 	bl	161ea <__exponent>
   107a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   107a4:	1813      	adds	r3, r2, r0
   107a6:	2a01      	cmp	r2, #1
   107a8:	4681      	mov	r9, r0
   107aa:	6123      	str	r3, [r4, #16]
   107ac:	dc02      	bgt.n	107b4 <_printf_float+0x168>
   107ae:	6822      	ldr	r2, [r4, #0]
   107b0:	07d2      	lsls	r2, r2, #31
   107b2:	d501      	bpl.n	107b8 <_printf_float+0x16c>
   107b4:	3301      	adds	r3, #1
   107b6:	6123      	str	r3, [r4, #16]
   107b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   107bc:	2b00      	cmp	r3, #0
   107be:	d09c      	beq.n	106fa <_printf_float+0xae>
   107c0:	232d      	movs	r3, #45	; 0x2d
   107c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   107c6:	e798      	b.n	106fa <_printf_float+0xae>
   107c8:	9a06      	ldr	r2, [sp, #24]
   107ca:	2a47      	cmp	r2, #71	; 0x47
   107cc:	d1be      	bne.n	1074c <_printf_float+0x100>
   107ce:	2b00      	cmp	r3, #0
   107d0:	d1bc      	bne.n	1074c <_printf_float+0x100>
   107d2:	2301      	movs	r3, #1
   107d4:	e7b9      	b.n	1074a <_printf_float+0xfe>
   107d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   107da:	d118      	bne.n	1080e <_printf_float+0x1c2>
   107dc:	2900      	cmp	r1, #0
   107de:	6863      	ldr	r3, [r4, #4]
   107e0:	dd0b      	ble.n	107fa <_printf_float+0x1ae>
   107e2:	6121      	str	r1, [r4, #16]
   107e4:	b913      	cbnz	r3, 107ec <_printf_float+0x1a0>
   107e6:	6822      	ldr	r2, [r4, #0]
   107e8:	07d0      	lsls	r0, r2, #31
   107ea:	d502      	bpl.n	107f2 <_printf_float+0x1a6>
   107ec:	3301      	adds	r3, #1
   107ee:	440b      	add	r3, r1
   107f0:	6123      	str	r3, [r4, #16]
   107f2:	65a1      	str	r1, [r4, #88]	; 0x58
   107f4:	f04f 0900 	mov.w	r9, #0
   107f8:	e7de      	b.n	107b8 <_printf_float+0x16c>
   107fa:	b913      	cbnz	r3, 10802 <_printf_float+0x1b6>
   107fc:	6822      	ldr	r2, [r4, #0]
   107fe:	07d2      	lsls	r2, r2, #31
   10800:	d501      	bpl.n	10806 <_printf_float+0x1ba>
   10802:	3302      	adds	r3, #2
   10804:	e7f4      	b.n	107f0 <_printf_float+0x1a4>
   10806:	2301      	movs	r3, #1
   10808:	e7f2      	b.n	107f0 <_printf_float+0x1a4>
   1080a:	f04f 0b67 	mov.w	fp, #103	; 0x67
   1080e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10810:	4299      	cmp	r1, r3
   10812:	db05      	blt.n	10820 <_printf_float+0x1d4>
   10814:	6823      	ldr	r3, [r4, #0]
   10816:	6121      	str	r1, [r4, #16]
   10818:	07d8      	lsls	r0, r3, #31
   1081a:	d5ea      	bpl.n	107f2 <_printf_float+0x1a6>
   1081c:	1c4b      	adds	r3, r1, #1
   1081e:	e7e7      	b.n	107f0 <_printf_float+0x1a4>
   10820:	2900      	cmp	r1, #0
   10822:	bfd4      	ite	le
   10824:	f1c1 0202 	rsble	r2, r1, #2
   10828:	2201      	movgt	r2, #1
   1082a:	4413      	add	r3, r2
   1082c:	e7e0      	b.n	107f0 <_printf_float+0x1a4>
   1082e:	6823      	ldr	r3, [r4, #0]
   10830:	055a      	lsls	r2, r3, #21
   10832:	d407      	bmi.n	10844 <_printf_float+0x1f8>
   10834:	6923      	ldr	r3, [r4, #16]
   10836:	4642      	mov	r2, r8
   10838:	4631      	mov	r1, r6
   1083a:	4628      	mov	r0, r5
   1083c:	47b8      	blx	r7
   1083e:	3001      	adds	r0, #1
   10840:	d12c      	bne.n	1089c <_printf_float+0x250>
   10842:	e764      	b.n	1070e <_printf_float+0xc2>
   10844:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   10848:	f240 80e0 	bls.w	10a0c <_printf_float+0x3c0>
   1084c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   10850:	2200      	movs	r2, #0
   10852:	2300      	movs	r3, #0
   10854:	f7f0 f8c8 	bl	9e8 <__aeabi_dcmpeq>
   10858:	2800      	cmp	r0, #0
   1085a:	d034      	beq.n	108c6 <_printf_float+0x27a>
   1085c:	4a37      	ldr	r2, [pc, #220]	; (1093c <_printf_float+0x2f0>)
   1085e:	2301      	movs	r3, #1
   10860:	4631      	mov	r1, r6
   10862:	4628      	mov	r0, r5
   10864:	47b8      	blx	r7
   10866:	3001      	adds	r0, #1
   10868:	f43f af51 	beq.w	1070e <_printf_float+0xc2>
   1086c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10870:	429a      	cmp	r2, r3
   10872:	db02      	blt.n	1087a <_printf_float+0x22e>
   10874:	6823      	ldr	r3, [r4, #0]
   10876:	07d8      	lsls	r0, r3, #31
   10878:	d510      	bpl.n	1089c <_printf_float+0x250>
   1087a:	ee18 3a10 	vmov	r3, s16
   1087e:	4652      	mov	r2, sl
   10880:	4631      	mov	r1, r6
   10882:	4628      	mov	r0, r5
   10884:	47b8      	blx	r7
   10886:	3001      	adds	r0, #1
   10888:	f43f af41 	beq.w	1070e <_printf_float+0xc2>
   1088c:	f04f 0800 	mov.w	r8, #0
   10890:	f104 091a 	add.w	r9, r4, #26
   10894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10896:	3b01      	subs	r3, #1
   10898:	4543      	cmp	r3, r8
   1089a:	dc09      	bgt.n	108b0 <_printf_float+0x264>
   1089c:	6823      	ldr	r3, [r4, #0]
   1089e:	079b      	lsls	r3, r3, #30
   108a0:	f100 8105 	bmi.w	10aae <_printf_float+0x462>
   108a4:	68e0      	ldr	r0, [r4, #12]
   108a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   108a8:	4298      	cmp	r0, r3
   108aa:	bfb8      	it	lt
   108ac:	4618      	movlt	r0, r3
   108ae:	e730      	b.n	10712 <_printf_float+0xc6>
   108b0:	2301      	movs	r3, #1
   108b2:	464a      	mov	r2, r9
   108b4:	4631      	mov	r1, r6
   108b6:	4628      	mov	r0, r5
   108b8:	47b8      	blx	r7
   108ba:	3001      	adds	r0, #1
   108bc:	f43f af27 	beq.w	1070e <_printf_float+0xc2>
   108c0:	f108 0801 	add.w	r8, r8, #1
   108c4:	e7e6      	b.n	10894 <_printf_float+0x248>
   108c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   108c8:	2b00      	cmp	r3, #0
   108ca:	dc39      	bgt.n	10940 <_printf_float+0x2f4>
   108cc:	4a1b      	ldr	r2, [pc, #108]	; (1093c <_printf_float+0x2f0>)
   108ce:	2301      	movs	r3, #1
   108d0:	4631      	mov	r1, r6
   108d2:	4628      	mov	r0, r5
   108d4:	47b8      	blx	r7
   108d6:	3001      	adds	r0, #1
   108d8:	f43f af19 	beq.w	1070e <_printf_float+0xc2>
   108dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   108e0:	4313      	orrs	r3, r2
   108e2:	d102      	bne.n	108ea <_printf_float+0x29e>
   108e4:	6823      	ldr	r3, [r4, #0]
   108e6:	07d9      	lsls	r1, r3, #31
   108e8:	d5d8      	bpl.n	1089c <_printf_float+0x250>
   108ea:	ee18 3a10 	vmov	r3, s16
   108ee:	4652      	mov	r2, sl
   108f0:	4631      	mov	r1, r6
   108f2:	4628      	mov	r0, r5
   108f4:	47b8      	blx	r7
   108f6:	3001      	adds	r0, #1
   108f8:	f43f af09 	beq.w	1070e <_printf_float+0xc2>
   108fc:	f04f 0900 	mov.w	r9, #0
   10900:	f104 0a1a 	add.w	sl, r4, #26
   10904:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10906:	425b      	negs	r3, r3
   10908:	454b      	cmp	r3, r9
   1090a:	dc01      	bgt.n	10910 <_printf_float+0x2c4>
   1090c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1090e:	e792      	b.n	10836 <_printf_float+0x1ea>
   10910:	2301      	movs	r3, #1
   10912:	4652      	mov	r2, sl
   10914:	4631      	mov	r1, r6
   10916:	4628      	mov	r0, r5
   10918:	47b8      	blx	r7
   1091a:	3001      	adds	r0, #1
   1091c:	f43f aef7 	beq.w	1070e <_printf_float+0xc2>
   10920:	f109 0901 	add.w	r9, r9, #1
   10924:	e7ee      	b.n	10904 <_printf_float+0x2b8>
   10926:	bf00      	nop
   10928:	7fefffff 	.word	0x7fefffff
   1092c:	00046edc 	.word	0x00046edc
   10930:	00046ee0 	.word	0x00046ee0
   10934:	00046ee8 	.word	0x00046ee8
   10938:	00046ee4 	.word	0x00046ee4
   1093c:	000466af 	.word	0x000466af
   10940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10942:	6da3      	ldr	r3, [r4, #88]	; 0x58
   10944:	429a      	cmp	r2, r3
   10946:	bfa8      	it	ge
   10948:	461a      	movge	r2, r3
   1094a:	2a00      	cmp	r2, #0
   1094c:	4691      	mov	r9, r2
   1094e:	dc37      	bgt.n	109c0 <_printf_float+0x374>
   10950:	f04f 0b00 	mov.w	fp, #0
   10954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   10958:	f104 021a 	add.w	r2, r4, #26
   1095c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1095e:	9305      	str	r3, [sp, #20]
   10960:	eba3 0309 	sub.w	r3, r3, r9
   10964:	455b      	cmp	r3, fp
   10966:	dc33      	bgt.n	109d0 <_printf_float+0x384>
   10968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1096c:	429a      	cmp	r2, r3
   1096e:	db3b      	blt.n	109e8 <_printf_float+0x39c>
   10970:	6823      	ldr	r3, [r4, #0]
   10972:	07da      	lsls	r2, r3, #31
   10974:	d438      	bmi.n	109e8 <_printf_float+0x39c>
   10976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10978:	9b05      	ldr	r3, [sp, #20]
   1097a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1097c:	1ad3      	subs	r3, r2, r3
   1097e:	eba2 0901 	sub.w	r9, r2, r1
   10982:	4599      	cmp	r9, r3
   10984:	bfa8      	it	ge
   10986:	4699      	movge	r9, r3
   10988:	f1b9 0f00 	cmp.w	r9, #0
   1098c:	dc35      	bgt.n	109fa <_printf_float+0x3ae>
   1098e:	f04f 0800 	mov.w	r8, #0
   10992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   10996:	f104 0a1a 	add.w	sl, r4, #26
   1099a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1099e:	1a9b      	subs	r3, r3, r2
   109a0:	eba3 0309 	sub.w	r3, r3, r9
   109a4:	4543      	cmp	r3, r8
   109a6:	f77f af79 	ble.w	1089c <_printf_float+0x250>
   109aa:	2301      	movs	r3, #1
   109ac:	4652      	mov	r2, sl
   109ae:	4631      	mov	r1, r6
   109b0:	4628      	mov	r0, r5
   109b2:	47b8      	blx	r7
   109b4:	3001      	adds	r0, #1
   109b6:	f43f aeaa 	beq.w	1070e <_printf_float+0xc2>
   109ba:	f108 0801 	add.w	r8, r8, #1
   109be:	e7ec      	b.n	1099a <_printf_float+0x34e>
   109c0:	4613      	mov	r3, r2
   109c2:	4631      	mov	r1, r6
   109c4:	4642      	mov	r2, r8
   109c6:	4628      	mov	r0, r5
   109c8:	47b8      	blx	r7
   109ca:	3001      	adds	r0, #1
   109cc:	d1c0      	bne.n	10950 <_printf_float+0x304>
   109ce:	e69e      	b.n	1070e <_printf_float+0xc2>
   109d0:	2301      	movs	r3, #1
   109d2:	4631      	mov	r1, r6
   109d4:	4628      	mov	r0, r5
   109d6:	9205      	str	r2, [sp, #20]
   109d8:	47b8      	blx	r7
   109da:	3001      	adds	r0, #1
   109dc:	f43f ae97 	beq.w	1070e <_printf_float+0xc2>
   109e0:	9a05      	ldr	r2, [sp, #20]
   109e2:	f10b 0b01 	add.w	fp, fp, #1
   109e6:	e7b9      	b.n	1095c <_printf_float+0x310>
   109e8:	ee18 3a10 	vmov	r3, s16
   109ec:	4652      	mov	r2, sl
   109ee:	4631      	mov	r1, r6
   109f0:	4628      	mov	r0, r5
   109f2:	47b8      	blx	r7
   109f4:	3001      	adds	r0, #1
   109f6:	d1be      	bne.n	10976 <_printf_float+0x32a>
   109f8:	e689      	b.n	1070e <_printf_float+0xc2>
   109fa:	9a05      	ldr	r2, [sp, #20]
   109fc:	464b      	mov	r3, r9
   109fe:	4442      	add	r2, r8
   10a00:	4631      	mov	r1, r6
   10a02:	4628      	mov	r0, r5
   10a04:	47b8      	blx	r7
   10a06:	3001      	adds	r0, #1
   10a08:	d1c1      	bne.n	1098e <_printf_float+0x342>
   10a0a:	e680      	b.n	1070e <_printf_float+0xc2>
   10a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10a0e:	2a01      	cmp	r2, #1
   10a10:	dc01      	bgt.n	10a16 <_printf_float+0x3ca>
   10a12:	07db      	lsls	r3, r3, #31
   10a14:	d538      	bpl.n	10a88 <_printf_float+0x43c>
   10a16:	2301      	movs	r3, #1
   10a18:	4642      	mov	r2, r8
   10a1a:	4631      	mov	r1, r6
   10a1c:	4628      	mov	r0, r5
   10a1e:	47b8      	blx	r7
   10a20:	3001      	adds	r0, #1
   10a22:	f43f ae74 	beq.w	1070e <_printf_float+0xc2>
   10a26:	ee18 3a10 	vmov	r3, s16
   10a2a:	4652      	mov	r2, sl
   10a2c:	4631      	mov	r1, r6
   10a2e:	4628      	mov	r0, r5
   10a30:	47b8      	blx	r7
   10a32:	3001      	adds	r0, #1
   10a34:	f43f ae6b 	beq.w	1070e <_printf_float+0xc2>
   10a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   10a3c:	2200      	movs	r2, #0
   10a3e:	2300      	movs	r3, #0
   10a40:	f7ef ffd2 	bl	9e8 <__aeabi_dcmpeq>
   10a44:	b9d8      	cbnz	r0, 10a7e <_printf_float+0x432>
   10a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a48:	f108 0201 	add.w	r2, r8, #1
   10a4c:	3b01      	subs	r3, #1
   10a4e:	4631      	mov	r1, r6
   10a50:	4628      	mov	r0, r5
   10a52:	47b8      	blx	r7
   10a54:	3001      	adds	r0, #1
   10a56:	d10e      	bne.n	10a76 <_printf_float+0x42a>
   10a58:	e659      	b.n	1070e <_printf_float+0xc2>
   10a5a:	2301      	movs	r3, #1
   10a5c:	4652      	mov	r2, sl
   10a5e:	4631      	mov	r1, r6
   10a60:	4628      	mov	r0, r5
   10a62:	47b8      	blx	r7
   10a64:	3001      	adds	r0, #1
   10a66:	f43f ae52 	beq.w	1070e <_printf_float+0xc2>
   10a6a:	f108 0801 	add.w	r8, r8, #1
   10a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a70:	3b01      	subs	r3, #1
   10a72:	4543      	cmp	r3, r8
   10a74:	dcf1      	bgt.n	10a5a <_printf_float+0x40e>
   10a76:	464b      	mov	r3, r9
   10a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
   10a7c:	e6dc      	b.n	10838 <_printf_float+0x1ec>
   10a7e:	f04f 0800 	mov.w	r8, #0
   10a82:	f104 0a1a 	add.w	sl, r4, #26
   10a86:	e7f2      	b.n	10a6e <_printf_float+0x422>
   10a88:	2301      	movs	r3, #1
   10a8a:	4642      	mov	r2, r8
   10a8c:	e7df      	b.n	10a4e <_printf_float+0x402>
   10a8e:	2301      	movs	r3, #1
   10a90:	464a      	mov	r2, r9
   10a92:	4631      	mov	r1, r6
   10a94:	4628      	mov	r0, r5
   10a96:	47b8      	blx	r7
   10a98:	3001      	adds	r0, #1
   10a9a:	f43f ae38 	beq.w	1070e <_printf_float+0xc2>
   10a9e:	f108 0801 	add.w	r8, r8, #1
   10aa2:	68e3      	ldr	r3, [r4, #12]
   10aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10aa6:	1a5b      	subs	r3, r3, r1
   10aa8:	4543      	cmp	r3, r8
   10aaa:	dcf0      	bgt.n	10a8e <_printf_float+0x442>
   10aac:	e6fa      	b.n	108a4 <_printf_float+0x258>
   10aae:	f04f 0800 	mov.w	r8, #0
   10ab2:	f104 0919 	add.w	r9, r4, #25
   10ab6:	e7f4      	b.n	10aa2 <_printf_float+0x456>

00010ab8 <_printf_i>:
   10ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   10abc:	460c      	mov	r4, r1
   10abe:	4691      	mov	r9, r2
   10ac0:	7e27      	ldrb	r7, [r4, #24]
   10ac2:	990c      	ldr	r1, [sp, #48]	; 0x30
   10ac4:	2f78      	cmp	r7, #120	; 0x78
   10ac6:	4680      	mov	r8, r0
   10ac8:	469a      	mov	sl, r3
   10aca:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10ace:	d807      	bhi.n	10ae0 <_printf_i+0x28>
   10ad0:	2f62      	cmp	r7, #98	; 0x62
   10ad2:	d80a      	bhi.n	10aea <_printf_i+0x32>
   10ad4:	2f00      	cmp	r7, #0
   10ad6:	f000 80d8 	beq.w	10c8a <_printf_i+0x1d2>
   10ada:	2f58      	cmp	r7, #88	; 0x58
   10adc:	f000 80a3 	beq.w	10c26 <_printf_i+0x16e>
   10ae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   10ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   10ae8:	e03a      	b.n	10b60 <_printf_i+0xa8>
   10aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   10aee:	2b15      	cmp	r3, #21
   10af0:	d8f6      	bhi.n	10ae0 <_printf_i+0x28>
   10af2:	a001      	add	r0, pc, #4	; (adr r0, 10af8 <_printf_i+0x40>)
   10af4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   10af8:	00010b51 	.word	0x00010b51
   10afc:	00010b65 	.word	0x00010b65
   10b00:	00010ae1 	.word	0x00010ae1
   10b04:	00010ae1 	.word	0x00010ae1
   10b08:	00010ae1 	.word	0x00010ae1
   10b0c:	00010ae1 	.word	0x00010ae1
   10b10:	00010b65 	.word	0x00010b65
   10b14:	00010ae1 	.word	0x00010ae1
   10b18:	00010ae1 	.word	0x00010ae1
   10b1c:	00010ae1 	.word	0x00010ae1
   10b20:	00010ae1 	.word	0x00010ae1
   10b24:	00010c71 	.word	0x00010c71
   10b28:	00010b95 	.word	0x00010b95
   10b2c:	00010c53 	.word	0x00010c53
   10b30:	00010ae1 	.word	0x00010ae1
   10b34:	00010ae1 	.word	0x00010ae1
   10b38:	00010c93 	.word	0x00010c93
   10b3c:	00010ae1 	.word	0x00010ae1
   10b40:	00010b95 	.word	0x00010b95
   10b44:	00010ae1 	.word	0x00010ae1
   10b48:	00010ae1 	.word	0x00010ae1
   10b4c:	00010c5b 	.word	0x00010c5b
   10b50:	680b      	ldr	r3, [r1, #0]
   10b52:	1d1a      	adds	r2, r3, #4
   10b54:	681b      	ldr	r3, [r3, #0]
   10b56:	600a      	str	r2, [r1, #0]
   10b58:	f104 0642 	add.w	r6, r4, #66	; 0x42
   10b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   10b60:	2301      	movs	r3, #1
   10b62:	e0a3      	b.n	10cac <_printf_i+0x1f4>
   10b64:	6825      	ldr	r5, [r4, #0]
   10b66:	6808      	ldr	r0, [r1, #0]
   10b68:	062e      	lsls	r6, r5, #24
   10b6a:	f100 0304 	add.w	r3, r0, #4
   10b6e:	d50a      	bpl.n	10b86 <_printf_i+0xce>
   10b70:	6805      	ldr	r5, [r0, #0]
   10b72:	600b      	str	r3, [r1, #0]
   10b74:	2d00      	cmp	r5, #0
   10b76:	da03      	bge.n	10b80 <_printf_i+0xc8>
   10b78:	232d      	movs	r3, #45	; 0x2d
   10b7a:	426d      	negs	r5, r5
   10b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10b80:	485e      	ldr	r0, [pc, #376]	; (10cfc <_printf_i+0x244>)
   10b82:	230a      	movs	r3, #10
   10b84:	e019      	b.n	10bba <_printf_i+0x102>
   10b86:	f015 0f40 	tst.w	r5, #64	; 0x40
   10b8a:	6805      	ldr	r5, [r0, #0]
   10b8c:	600b      	str	r3, [r1, #0]
   10b8e:	bf18      	it	ne
   10b90:	b22d      	sxthne	r5, r5
   10b92:	e7ef      	b.n	10b74 <_printf_i+0xbc>
   10b94:	680b      	ldr	r3, [r1, #0]
   10b96:	6825      	ldr	r5, [r4, #0]
   10b98:	1d18      	adds	r0, r3, #4
   10b9a:	6008      	str	r0, [r1, #0]
   10b9c:	0628      	lsls	r0, r5, #24
   10b9e:	d501      	bpl.n	10ba4 <_printf_i+0xec>
   10ba0:	681d      	ldr	r5, [r3, #0]
   10ba2:	e002      	b.n	10baa <_printf_i+0xf2>
   10ba4:	0669      	lsls	r1, r5, #25
   10ba6:	d5fb      	bpl.n	10ba0 <_printf_i+0xe8>
   10ba8:	881d      	ldrh	r5, [r3, #0]
   10baa:	4854      	ldr	r0, [pc, #336]	; (10cfc <_printf_i+0x244>)
   10bac:	2f6f      	cmp	r7, #111	; 0x6f
   10bae:	bf0c      	ite	eq
   10bb0:	2308      	moveq	r3, #8
   10bb2:	230a      	movne	r3, #10
   10bb4:	2100      	movs	r1, #0
   10bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   10bba:	6866      	ldr	r6, [r4, #4]
   10bbc:	60a6      	str	r6, [r4, #8]
   10bbe:	2e00      	cmp	r6, #0
   10bc0:	bfa2      	ittt	ge
   10bc2:	6821      	ldrge	r1, [r4, #0]
   10bc4:	f021 0104 	bicge.w	r1, r1, #4
   10bc8:	6021      	strge	r1, [r4, #0]
   10bca:	b90d      	cbnz	r5, 10bd0 <_printf_i+0x118>
   10bcc:	2e00      	cmp	r6, #0
   10bce:	d04d      	beq.n	10c6c <_printf_i+0x1b4>
   10bd0:	4616      	mov	r6, r2
   10bd2:	fbb5 f1f3 	udiv	r1, r5, r3
   10bd6:	fb03 5711 	mls	r7, r3, r1, r5
   10bda:	5dc7      	ldrb	r7, [r0, r7]
   10bdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
   10be0:	462f      	mov	r7, r5
   10be2:	42bb      	cmp	r3, r7
   10be4:	460d      	mov	r5, r1
   10be6:	d9f4      	bls.n	10bd2 <_printf_i+0x11a>
   10be8:	2b08      	cmp	r3, #8
   10bea:	d10b      	bne.n	10c04 <_printf_i+0x14c>
   10bec:	6823      	ldr	r3, [r4, #0]
   10bee:	07df      	lsls	r7, r3, #31
   10bf0:	d508      	bpl.n	10c04 <_printf_i+0x14c>
   10bf2:	6923      	ldr	r3, [r4, #16]
   10bf4:	6861      	ldr	r1, [r4, #4]
   10bf6:	4299      	cmp	r1, r3
   10bf8:	bfde      	ittt	le
   10bfa:	2330      	movle	r3, #48	; 0x30
   10bfc:	f806 3c01 	strble.w	r3, [r6, #-1]
   10c00:	f106 36ff 	addle.w	r6, r6, #4294967295
   10c04:	1b92      	subs	r2, r2, r6
   10c06:	6122      	str	r2, [r4, #16]
   10c08:	f8cd a000 	str.w	sl, [sp]
   10c0c:	464b      	mov	r3, r9
   10c0e:	aa03      	add	r2, sp, #12
   10c10:	4621      	mov	r1, r4
   10c12:	4640      	mov	r0, r8
   10c14:	f005 fb27 	bl	16266 <_printf_common>
   10c18:	3001      	adds	r0, #1
   10c1a:	d14c      	bne.n	10cb6 <_printf_i+0x1fe>
   10c1c:	f04f 30ff 	mov.w	r0, #4294967295
   10c20:	b004      	add	sp, #16
   10c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c26:	4835      	ldr	r0, [pc, #212]	; (10cfc <_printf_i+0x244>)
   10c28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   10c2c:	6823      	ldr	r3, [r4, #0]
   10c2e:	680e      	ldr	r6, [r1, #0]
   10c30:	061f      	lsls	r7, r3, #24
   10c32:	f856 5b04 	ldr.w	r5, [r6], #4
   10c36:	600e      	str	r6, [r1, #0]
   10c38:	d514      	bpl.n	10c64 <_printf_i+0x1ac>
   10c3a:	07d9      	lsls	r1, r3, #31
   10c3c:	bf44      	itt	mi
   10c3e:	f043 0320 	orrmi.w	r3, r3, #32
   10c42:	6023      	strmi	r3, [r4, #0]
   10c44:	b91d      	cbnz	r5, 10c4e <_printf_i+0x196>
   10c46:	6823      	ldr	r3, [r4, #0]
   10c48:	f023 0320 	bic.w	r3, r3, #32
   10c4c:	6023      	str	r3, [r4, #0]
   10c4e:	2310      	movs	r3, #16
   10c50:	e7b0      	b.n	10bb4 <_printf_i+0xfc>
   10c52:	6823      	ldr	r3, [r4, #0]
   10c54:	f043 0320 	orr.w	r3, r3, #32
   10c58:	6023      	str	r3, [r4, #0]
   10c5a:	2378      	movs	r3, #120	; 0x78
   10c5c:	4828      	ldr	r0, [pc, #160]	; (10d00 <_printf_i+0x248>)
   10c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   10c62:	e7e3      	b.n	10c2c <_printf_i+0x174>
   10c64:	065e      	lsls	r6, r3, #25
   10c66:	bf48      	it	mi
   10c68:	b2ad      	uxthmi	r5, r5
   10c6a:	e7e6      	b.n	10c3a <_printf_i+0x182>
   10c6c:	4616      	mov	r6, r2
   10c6e:	e7bb      	b.n	10be8 <_printf_i+0x130>
   10c70:	680b      	ldr	r3, [r1, #0]
   10c72:	6826      	ldr	r6, [r4, #0]
   10c74:	6960      	ldr	r0, [r4, #20]
   10c76:	1d1d      	adds	r5, r3, #4
   10c78:	600d      	str	r5, [r1, #0]
   10c7a:	0635      	lsls	r5, r6, #24
   10c7c:	681b      	ldr	r3, [r3, #0]
   10c7e:	d501      	bpl.n	10c84 <_printf_i+0x1cc>
   10c80:	6018      	str	r0, [r3, #0]
   10c82:	e002      	b.n	10c8a <_printf_i+0x1d2>
   10c84:	0671      	lsls	r1, r6, #25
   10c86:	d5fb      	bpl.n	10c80 <_printf_i+0x1c8>
   10c88:	8018      	strh	r0, [r3, #0]
   10c8a:	2300      	movs	r3, #0
   10c8c:	6123      	str	r3, [r4, #16]
   10c8e:	4616      	mov	r6, r2
   10c90:	e7ba      	b.n	10c08 <_printf_i+0x150>
   10c92:	680b      	ldr	r3, [r1, #0]
   10c94:	1d1a      	adds	r2, r3, #4
   10c96:	600a      	str	r2, [r1, #0]
   10c98:	681e      	ldr	r6, [r3, #0]
   10c9a:	6862      	ldr	r2, [r4, #4]
   10c9c:	2100      	movs	r1, #0
   10c9e:	4630      	mov	r0, r6
   10ca0:	f7ef fa2e 	bl	100 <memchr>
   10ca4:	b108      	cbz	r0, 10caa <_printf_i+0x1f2>
   10ca6:	1b80      	subs	r0, r0, r6
   10ca8:	6060      	str	r0, [r4, #4]
   10caa:	6863      	ldr	r3, [r4, #4]
   10cac:	6123      	str	r3, [r4, #16]
   10cae:	2300      	movs	r3, #0
   10cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10cb4:	e7a8      	b.n	10c08 <_printf_i+0x150>
   10cb6:	6923      	ldr	r3, [r4, #16]
   10cb8:	4632      	mov	r2, r6
   10cba:	4649      	mov	r1, r9
   10cbc:	4640      	mov	r0, r8
   10cbe:	47d0      	blx	sl
   10cc0:	3001      	adds	r0, #1
   10cc2:	d0ab      	beq.n	10c1c <_printf_i+0x164>
   10cc4:	6823      	ldr	r3, [r4, #0]
   10cc6:	079b      	lsls	r3, r3, #30
   10cc8:	d413      	bmi.n	10cf2 <_printf_i+0x23a>
   10cca:	68e0      	ldr	r0, [r4, #12]
   10ccc:	9b03      	ldr	r3, [sp, #12]
   10cce:	4298      	cmp	r0, r3
   10cd0:	bfb8      	it	lt
   10cd2:	4618      	movlt	r0, r3
   10cd4:	e7a4      	b.n	10c20 <_printf_i+0x168>
   10cd6:	2301      	movs	r3, #1
   10cd8:	4632      	mov	r2, r6
   10cda:	4649      	mov	r1, r9
   10cdc:	4640      	mov	r0, r8
   10cde:	47d0      	blx	sl
   10ce0:	3001      	adds	r0, #1
   10ce2:	d09b      	beq.n	10c1c <_printf_i+0x164>
   10ce4:	3501      	adds	r5, #1
   10ce6:	68e3      	ldr	r3, [r4, #12]
   10ce8:	9903      	ldr	r1, [sp, #12]
   10cea:	1a5b      	subs	r3, r3, r1
   10cec:	42ab      	cmp	r3, r5
   10cee:	dcf2      	bgt.n	10cd6 <_printf_i+0x21e>
   10cf0:	e7eb      	b.n	10cca <_printf_i+0x212>
   10cf2:	2500      	movs	r5, #0
   10cf4:	f104 0619 	add.w	r6, r4, #25
   10cf8:	e7f5      	b.n	10ce6 <_printf_i+0x22e>
   10cfa:	bf00      	nop
   10cfc:	00046eec 	.word	0x00046eec
   10d00:	00046efd 	.word	0x00046efd

00010d04 <iprintf>:
   10d04:	b40f      	push	{r0, r1, r2, r3}
   10d06:	4b0a      	ldr	r3, [pc, #40]	; (10d30 <iprintf+0x2c>)
   10d08:	b513      	push	{r0, r1, r4, lr}
   10d0a:	681c      	ldr	r4, [r3, #0]
   10d0c:	b124      	cbz	r4, 10d18 <iprintf+0x14>
   10d0e:	69a3      	ldr	r3, [r4, #24]
   10d10:	b913      	cbnz	r3, 10d18 <iprintf+0x14>
   10d12:	4620      	mov	r0, r4
   10d14:	f000 fad0 	bl	112b8 <__sinit>
   10d18:	ab05      	add	r3, sp, #20
   10d1a:	9a04      	ldr	r2, [sp, #16]
   10d1c:	68a1      	ldr	r1, [r4, #8]
   10d1e:	9301      	str	r3, [sp, #4]
   10d20:	4620      	mov	r0, r4
   10d22:	f7ff fb63 	bl	103ec <_vfiprintf_r>
   10d26:	b002      	add	sp, #8
   10d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10d2c:	b004      	add	sp, #16
   10d2e:	4770      	bx	lr
   10d30:	20000384 	.word	0x20000384

00010d34 <_sbrk_r>:
   10d34:	b538      	push	{r3, r4, r5, lr}
   10d36:	4d06      	ldr	r5, [pc, #24]	; (10d50 <_sbrk_r+0x1c>)
   10d38:	2300      	movs	r3, #0
   10d3a:	4604      	mov	r4, r0
   10d3c:	4608      	mov	r0, r1
   10d3e:	602b      	str	r3, [r5, #0]
   10d40:	f7fb ff9c 	bl	cc7c <_sbrk>
   10d44:	1c43      	adds	r3, r0, #1
   10d46:	d102      	bne.n	10d4e <_sbrk_r+0x1a>
   10d48:	682b      	ldr	r3, [r5, #0]
   10d4a:	b103      	cbz	r3, 10d4e <_sbrk_r+0x1a>
   10d4c:	6023      	str	r3, [r4, #0]
   10d4e:	bd38      	pop	{r3, r4, r5, pc}
   10d50:	200022cc 	.word	0x200022cc

00010d54 <setvbuf>:
   10d54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10d58:	461d      	mov	r5, r3
   10d5a:	4b5d      	ldr	r3, [pc, #372]	; (10ed0 <setvbuf+0x17c>)
   10d5c:	681f      	ldr	r7, [r3, #0]
   10d5e:	4604      	mov	r4, r0
   10d60:	460e      	mov	r6, r1
   10d62:	4690      	mov	r8, r2
   10d64:	b127      	cbz	r7, 10d70 <setvbuf+0x1c>
   10d66:	69bb      	ldr	r3, [r7, #24]
   10d68:	b913      	cbnz	r3, 10d70 <setvbuf+0x1c>
   10d6a:	4638      	mov	r0, r7
   10d6c:	f000 faa4 	bl	112b8 <__sinit>
   10d70:	4b58      	ldr	r3, [pc, #352]	; (10ed4 <setvbuf+0x180>)
   10d72:	429c      	cmp	r4, r3
   10d74:	d167      	bne.n	10e46 <setvbuf+0xf2>
   10d76:	687c      	ldr	r4, [r7, #4]
   10d78:	f1b8 0f02 	cmp.w	r8, #2
   10d7c:	d006      	beq.n	10d8c <setvbuf+0x38>
   10d7e:	f1b8 0f01 	cmp.w	r8, #1
   10d82:	f200 809f 	bhi.w	10ec4 <setvbuf+0x170>
   10d86:	2d00      	cmp	r5, #0
   10d88:	f2c0 809c 	blt.w	10ec4 <setvbuf+0x170>
   10d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10d8e:	07db      	lsls	r3, r3, #31
   10d90:	d405      	bmi.n	10d9e <setvbuf+0x4a>
   10d92:	89a3      	ldrh	r3, [r4, #12]
   10d94:	0598      	lsls	r0, r3, #22
   10d96:	d402      	bmi.n	10d9e <setvbuf+0x4a>
   10d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10d9a:	f004 fb82 	bl	154a2 <__retarget_lock_acquire_recursive>
   10d9e:	4621      	mov	r1, r4
   10da0:	4638      	mov	r0, r7
   10da2:	f000 fa0b 	bl	111bc <_fflush_r>
   10da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10da8:	b141      	cbz	r1, 10dbc <setvbuf+0x68>
   10daa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   10dae:	4299      	cmp	r1, r3
   10db0:	d002      	beq.n	10db8 <setvbuf+0x64>
   10db2:	4638      	mov	r0, r7
   10db4:	f7ff fa70 	bl	10298 <_free_r>
   10db8:	2300      	movs	r3, #0
   10dba:	6363      	str	r3, [r4, #52]	; 0x34
   10dbc:	2300      	movs	r3, #0
   10dbe:	61a3      	str	r3, [r4, #24]
   10dc0:	6063      	str	r3, [r4, #4]
   10dc2:	89a3      	ldrh	r3, [r4, #12]
   10dc4:	0619      	lsls	r1, r3, #24
   10dc6:	d503      	bpl.n	10dd0 <setvbuf+0x7c>
   10dc8:	6921      	ldr	r1, [r4, #16]
   10dca:	4638      	mov	r0, r7
   10dcc:	f7ff fa64 	bl	10298 <_free_r>
   10dd0:	89a3      	ldrh	r3, [r4, #12]
   10dd2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   10dd6:	f023 0303 	bic.w	r3, r3, #3
   10dda:	f1b8 0f02 	cmp.w	r8, #2
   10dde:	81a3      	strh	r3, [r4, #12]
   10de0:	d06c      	beq.n	10ebc <setvbuf+0x168>
   10de2:	ab01      	add	r3, sp, #4
   10de4:	466a      	mov	r2, sp
   10de6:	4621      	mov	r1, r4
   10de8:	4638      	mov	r0, r7
   10dea:	f005 fbd4 	bl	16596 <__swhatbuf_r>
   10dee:	89a3      	ldrh	r3, [r4, #12]
   10df0:	4318      	orrs	r0, r3
   10df2:	81a0      	strh	r0, [r4, #12]
   10df4:	2d00      	cmp	r5, #0
   10df6:	d130      	bne.n	10e5a <setvbuf+0x106>
   10df8:	9d00      	ldr	r5, [sp, #0]
   10dfa:	4628      	mov	r0, r5
   10dfc:	f7ff fa3c 	bl	10278 <malloc>
   10e00:	4606      	mov	r6, r0
   10e02:	2800      	cmp	r0, #0
   10e04:	d155      	bne.n	10eb2 <setvbuf+0x15e>
   10e06:	f8dd 9000 	ldr.w	r9, [sp]
   10e0a:	45a9      	cmp	r9, r5
   10e0c:	d14a      	bne.n	10ea4 <setvbuf+0x150>
   10e0e:	f04f 35ff 	mov.w	r5, #4294967295
   10e12:	2200      	movs	r2, #0
   10e14:	60a2      	str	r2, [r4, #8]
   10e16:	f104 0247 	add.w	r2, r4, #71	; 0x47
   10e1a:	6022      	str	r2, [r4, #0]
   10e1c:	6122      	str	r2, [r4, #16]
   10e1e:	2201      	movs	r2, #1
   10e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10e24:	6162      	str	r2, [r4, #20]
   10e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10e28:	f043 0302 	orr.w	r3, r3, #2
   10e2c:	07d2      	lsls	r2, r2, #31
   10e2e:	81a3      	strh	r3, [r4, #12]
   10e30:	d405      	bmi.n	10e3e <setvbuf+0xea>
   10e32:	f413 7f00 	tst.w	r3, #512	; 0x200
   10e36:	d102      	bne.n	10e3e <setvbuf+0xea>
   10e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10e3a:	f004 fb38 	bl	154ae <__retarget_lock_release_recursive>
   10e3e:	4628      	mov	r0, r5
   10e40:	b003      	add	sp, #12
   10e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10e46:	4b24      	ldr	r3, [pc, #144]	; (10ed8 <setvbuf+0x184>)
   10e48:	429c      	cmp	r4, r3
   10e4a:	d101      	bne.n	10e50 <setvbuf+0xfc>
   10e4c:	68bc      	ldr	r4, [r7, #8]
   10e4e:	e793      	b.n	10d78 <setvbuf+0x24>
   10e50:	4b22      	ldr	r3, [pc, #136]	; (10edc <setvbuf+0x188>)
   10e52:	429c      	cmp	r4, r3
   10e54:	bf08      	it	eq
   10e56:	68fc      	ldreq	r4, [r7, #12]
   10e58:	e78e      	b.n	10d78 <setvbuf+0x24>
   10e5a:	2e00      	cmp	r6, #0
   10e5c:	d0cd      	beq.n	10dfa <setvbuf+0xa6>
   10e5e:	69bb      	ldr	r3, [r7, #24]
   10e60:	b913      	cbnz	r3, 10e68 <setvbuf+0x114>
   10e62:	4638      	mov	r0, r7
   10e64:	f000 fa28 	bl	112b8 <__sinit>
   10e68:	f1b8 0f01 	cmp.w	r8, #1
   10e6c:	bf08      	it	eq
   10e6e:	89a3      	ldrheq	r3, [r4, #12]
   10e70:	6026      	str	r6, [r4, #0]
   10e72:	bf04      	itt	eq
   10e74:	f043 0301 	orreq.w	r3, r3, #1
   10e78:	81a3      	strheq	r3, [r4, #12]
   10e7a:	89a2      	ldrh	r2, [r4, #12]
   10e7c:	f012 0308 	ands.w	r3, r2, #8
   10e80:	e9c4 6504 	strd	r6, r5, [r4, #16]
   10e84:	d01c      	beq.n	10ec0 <setvbuf+0x16c>
   10e86:	07d3      	lsls	r3, r2, #31
   10e88:	bf41      	itttt	mi
   10e8a:	2300      	movmi	r3, #0
   10e8c:	426d      	negmi	r5, r5
   10e8e:	60a3      	strmi	r3, [r4, #8]
   10e90:	61a5      	strmi	r5, [r4, #24]
   10e92:	bf58      	it	pl
   10e94:	60a5      	strpl	r5, [r4, #8]
   10e96:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10e98:	f015 0501 	ands.w	r5, r5, #1
   10e9c:	d115      	bne.n	10eca <setvbuf+0x176>
   10e9e:	f412 7f00 	tst.w	r2, #512	; 0x200
   10ea2:	e7c8      	b.n	10e36 <setvbuf+0xe2>
   10ea4:	4648      	mov	r0, r9
   10ea6:	f7ff f9e7 	bl	10278 <malloc>
   10eaa:	4606      	mov	r6, r0
   10eac:	2800      	cmp	r0, #0
   10eae:	d0ae      	beq.n	10e0e <setvbuf+0xba>
   10eb0:	464d      	mov	r5, r9
   10eb2:	89a3      	ldrh	r3, [r4, #12]
   10eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10eb8:	81a3      	strh	r3, [r4, #12]
   10eba:	e7d0      	b.n	10e5e <setvbuf+0x10a>
   10ebc:	2500      	movs	r5, #0
   10ebe:	e7a8      	b.n	10e12 <setvbuf+0xbe>
   10ec0:	60a3      	str	r3, [r4, #8]
   10ec2:	e7e8      	b.n	10e96 <setvbuf+0x142>
   10ec4:	f04f 35ff 	mov.w	r5, #4294967295
   10ec8:	e7b9      	b.n	10e3e <setvbuf+0xea>
   10eca:	2500      	movs	r5, #0
   10ecc:	e7b7      	b.n	10e3e <setvbuf+0xea>
   10ece:	bf00      	nop
   10ed0:	20000384 	.word	0x20000384
   10ed4:	00040408 	.word	0x00040408
   10ed8:	00040428 	.word	0x00040428
   10edc:	000403e8 	.word	0x000403e8

00010ee0 <raise>:
   10ee0:	4b02      	ldr	r3, [pc, #8]	; (10eec <raise+0xc>)
   10ee2:	4601      	mov	r1, r0
   10ee4:	6818      	ldr	r0, [r3, #0]
   10ee6:	f005 ba2b 	b.w	16340 <_raise_r>
   10eea:	bf00      	nop
   10eec:	20000384 	.word	0x20000384

00010ef0 <_kill_r>:
   10ef0:	b538      	push	{r3, r4, r5, lr}
   10ef2:	4d07      	ldr	r5, [pc, #28]	; (10f10 <_kill_r+0x20>)
   10ef4:	2300      	movs	r3, #0
   10ef6:	4604      	mov	r4, r0
   10ef8:	4608      	mov	r0, r1
   10efa:	4611      	mov	r1, r2
   10efc:	602b      	str	r3, [r5, #0]
   10efe:	f004 fabd 	bl	1547c <_kill>
   10f02:	1c43      	adds	r3, r0, #1
   10f04:	d102      	bne.n	10f0c <_kill_r+0x1c>
   10f06:	682b      	ldr	r3, [r5, #0]
   10f08:	b103      	cbz	r3, 10f0c <_kill_r+0x1c>
   10f0a:	6023      	str	r3, [r4, #0]
   10f0c:	bd38      	pop	{r3, r4, r5, pc}
   10f0e:	bf00      	nop
   10f10:	200022cc 	.word	0x200022cc

00010f14 <vsniprintf>:
   10f14:	b507      	push	{r0, r1, r2, lr}
   10f16:	9300      	str	r3, [sp, #0]
   10f18:	4613      	mov	r3, r2
   10f1a:	460a      	mov	r2, r1
   10f1c:	4601      	mov	r1, r0
   10f1e:	4803      	ldr	r0, [pc, #12]	; (10f2c <vsniprintf+0x18>)
   10f20:	6800      	ldr	r0, [r0, #0]
   10f22:	f005 fa4c 	bl	163be <_vsniprintf_r>
   10f26:	b003      	add	sp, #12
   10f28:	f85d fb04 	ldr.w	pc, [sp], #4
   10f2c:	20000384 	.word	0x20000384

00010f30 <__swbuf_r>:
   10f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f32:	460e      	mov	r6, r1
   10f34:	4614      	mov	r4, r2
   10f36:	4605      	mov	r5, r0
   10f38:	b118      	cbz	r0, 10f42 <__swbuf_r+0x12>
   10f3a:	6983      	ldr	r3, [r0, #24]
   10f3c:	b90b      	cbnz	r3, 10f42 <__swbuf_r+0x12>
   10f3e:	f000 f9bb 	bl	112b8 <__sinit>
   10f42:	4b21      	ldr	r3, [pc, #132]	; (10fc8 <__swbuf_r+0x98>)
   10f44:	429c      	cmp	r4, r3
   10f46:	d12b      	bne.n	10fa0 <__swbuf_r+0x70>
   10f48:	686c      	ldr	r4, [r5, #4]
   10f4a:	69a3      	ldr	r3, [r4, #24]
   10f4c:	60a3      	str	r3, [r4, #8]
   10f4e:	89a3      	ldrh	r3, [r4, #12]
   10f50:	071a      	lsls	r2, r3, #28
   10f52:	d52f      	bpl.n	10fb4 <__swbuf_r+0x84>
   10f54:	6923      	ldr	r3, [r4, #16]
   10f56:	b36b      	cbz	r3, 10fb4 <__swbuf_r+0x84>
   10f58:	6923      	ldr	r3, [r4, #16]
   10f5a:	6820      	ldr	r0, [r4, #0]
   10f5c:	1ac0      	subs	r0, r0, r3
   10f5e:	6963      	ldr	r3, [r4, #20]
   10f60:	b2f6      	uxtb	r6, r6
   10f62:	4283      	cmp	r3, r0
   10f64:	4637      	mov	r7, r6
   10f66:	dc04      	bgt.n	10f72 <__swbuf_r+0x42>
   10f68:	4621      	mov	r1, r4
   10f6a:	4628      	mov	r0, r5
   10f6c:	f000 f926 	bl	111bc <_fflush_r>
   10f70:	bb30      	cbnz	r0, 10fc0 <__swbuf_r+0x90>
   10f72:	68a3      	ldr	r3, [r4, #8]
   10f74:	3b01      	subs	r3, #1
   10f76:	60a3      	str	r3, [r4, #8]
   10f78:	6823      	ldr	r3, [r4, #0]
   10f7a:	1c5a      	adds	r2, r3, #1
   10f7c:	6022      	str	r2, [r4, #0]
   10f7e:	701e      	strb	r6, [r3, #0]
   10f80:	6963      	ldr	r3, [r4, #20]
   10f82:	3001      	adds	r0, #1
   10f84:	4283      	cmp	r3, r0
   10f86:	d004      	beq.n	10f92 <__swbuf_r+0x62>
   10f88:	89a3      	ldrh	r3, [r4, #12]
   10f8a:	07db      	lsls	r3, r3, #31
   10f8c:	d506      	bpl.n	10f9c <__swbuf_r+0x6c>
   10f8e:	2e0a      	cmp	r6, #10
   10f90:	d104      	bne.n	10f9c <__swbuf_r+0x6c>
   10f92:	4621      	mov	r1, r4
   10f94:	4628      	mov	r0, r5
   10f96:	f000 f911 	bl	111bc <_fflush_r>
   10f9a:	b988      	cbnz	r0, 10fc0 <__swbuf_r+0x90>
   10f9c:	4638      	mov	r0, r7
   10f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fa0:	4b0a      	ldr	r3, [pc, #40]	; (10fcc <__swbuf_r+0x9c>)
   10fa2:	429c      	cmp	r4, r3
   10fa4:	d101      	bne.n	10faa <__swbuf_r+0x7a>
   10fa6:	68ac      	ldr	r4, [r5, #8]
   10fa8:	e7cf      	b.n	10f4a <__swbuf_r+0x1a>
   10faa:	4b09      	ldr	r3, [pc, #36]	; (10fd0 <__swbuf_r+0xa0>)
   10fac:	429c      	cmp	r4, r3
   10fae:	bf08      	it	eq
   10fb0:	68ec      	ldreq	r4, [r5, #12]
   10fb2:	e7ca      	b.n	10f4a <__swbuf_r+0x1a>
   10fb4:	4621      	mov	r1, r4
   10fb6:	4628      	mov	r0, r5
   10fb8:	f000 f80c 	bl	10fd4 <__swsetup_r>
   10fbc:	2800      	cmp	r0, #0
   10fbe:	d0cb      	beq.n	10f58 <__swbuf_r+0x28>
   10fc0:	f04f 37ff 	mov.w	r7, #4294967295
   10fc4:	e7ea      	b.n	10f9c <__swbuf_r+0x6c>
   10fc6:	bf00      	nop
   10fc8:	00040408 	.word	0x00040408
   10fcc:	00040428 	.word	0x00040428
   10fd0:	000403e8 	.word	0x000403e8

00010fd4 <__swsetup_r>:
   10fd4:	4b32      	ldr	r3, [pc, #200]	; (110a0 <__swsetup_r+0xcc>)
   10fd6:	b570      	push	{r4, r5, r6, lr}
   10fd8:	681d      	ldr	r5, [r3, #0]
   10fda:	4606      	mov	r6, r0
   10fdc:	460c      	mov	r4, r1
   10fde:	b125      	cbz	r5, 10fea <__swsetup_r+0x16>
   10fe0:	69ab      	ldr	r3, [r5, #24]
   10fe2:	b913      	cbnz	r3, 10fea <__swsetup_r+0x16>
   10fe4:	4628      	mov	r0, r5
   10fe6:	f000 f967 	bl	112b8 <__sinit>
   10fea:	4b2e      	ldr	r3, [pc, #184]	; (110a4 <__swsetup_r+0xd0>)
   10fec:	429c      	cmp	r4, r3
   10fee:	d10f      	bne.n	11010 <__swsetup_r+0x3c>
   10ff0:	686c      	ldr	r4, [r5, #4]
   10ff2:	89a3      	ldrh	r3, [r4, #12]
   10ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   10ff8:	0719      	lsls	r1, r3, #28
   10ffa:	d42c      	bmi.n	11056 <__swsetup_r+0x82>
   10ffc:	06dd      	lsls	r5, r3, #27
   10ffe:	d411      	bmi.n	11024 <__swsetup_r+0x50>
   11000:	2309      	movs	r3, #9
   11002:	6033      	str	r3, [r6, #0]
   11004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   11008:	81a3      	strh	r3, [r4, #12]
   1100a:	f04f 30ff 	mov.w	r0, #4294967295
   1100e:	e03e      	b.n	1108e <__swsetup_r+0xba>
   11010:	4b25      	ldr	r3, [pc, #148]	; (110a8 <__swsetup_r+0xd4>)
   11012:	429c      	cmp	r4, r3
   11014:	d101      	bne.n	1101a <__swsetup_r+0x46>
   11016:	68ac      	ldr	r4, [r5, #8]
   11018:	e7eb      	b.n	10ff2 <__swsetup_r+0x1e>
   1101a:	4b24      	ldr	r3, [pc, #144]	; (110ac <__swsetup_r+0xd8>)
   1101c:	429c      	cmp	r4, r3
   1101e:	bf08      	it	eq
   11020:	68ec      	ldreq	r4, [r5, #12]
   11022:	e7e6      	b.n	10ff2 <__swsetup_r+0x1e>
   11024:	0758      	lsls	r0, r3, #29
   11026:	d512      	bpl.n	1104e <__swsetup_r+0x7a>
   11028:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1102a:	b141      	cbz	r1, 1103e <__swsetup_r+0x6a>
   1102c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   11030:	4299      	cmp	r1, r3
   11032:	d002      	beq.n	1103a <__swsetup_r+0x66>
   11034:	4630      	mov	r0, r6
   11036:	f7ff f92f 	bl	10298 <_free_r>
   1103a:	2300      	movs	r3, #0
   1103c:	6363      	str	r3, [r4, #52]	; 0x34
   1103e:	89a3      	ldrh	r3, [r4, #12]
   11040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   11044:	81a3      	strh	r3, [r4, #12]
   11046:	2300      	movs	r3, #0
   11048:	6063      	str	r3, [r4, #4]
   1104a:	6923      	ldr	r3, [r4, #16]
   1104c:	6023      	str	r3, [r4, #0]
   1104e:	89a3      	ldrh	r3, [r4, #12]
   11050:	f043 0308 	orr.w	r3, r3, #8
   11054:	81a3      	strh	r3, [r4, #12]
   11056:	6923      	ldr	r3, [r4, #16]
   11058:	b94b      	cbnz	r3, 1106e <__swsetup_r+0x9a>
   1105a:	89a3      	ldrh	r3, [r4, #12]
   1105c:	f403 7320 	and.w	r3, r3, #640	; 0x280
   11060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11064:	d003      	beq.n	1106e <__swsetup_r+0x9a>
   11066:	4621      	mov	r1, r4
   11068:	4630      	mov	r0, r6
   1106a:	f000 f9a7 	bl	113bc <__smakebuf_r>
   1106e:	89a0      	ldrh	r0, [r4, #12]
   11070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11074:	f010 0301 	ands.w	r3, r0, #1
   11078:	d00a      	beq.n	11090 <__swsetup_r+0xbc>
   1107a:	2300      	movs	r3, #0
   1107c:	60a3      	str	r3, [r4, #8]
   1107e:	6963      	ldr	r3, [r4, #20]
   11080:	425b      	negs	r3, r3
   11082:	61a3      	str	r3, [r4, #24]
   11084:	6923      	ldr	r3, [r4, #16]
   11086:	b943      	cbnz	r3, 1109a <__swsetup_r+0xc6>
   11088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   1108c:	d1ba      	bne.n	11004 <__swsetup_r+0x30>
   1108e:	bd70      	pop	{r4, r5, r6, pc}
   11090:	0781      	lsls	r1, r0, #30
   11092:	bf58      	it	pl
   11094:	6963      	ldrpl	r3, [r4, #20]
   11096:	60a3      	str	r3, [r4, #8]
   11098:	e7f4      	b.n	11084 <__swsetup_r+0xb0>
   1109a:	2000      	movs	r0, #0
   1109c:	e7f7      	b.n	1108e <__swsetup_r+0xba>
   1109e:	bf00      	nop
   110a0:	20000384 	.word	0x20000384
   110a4:	00040408 	.word	0x00040408
   110a8:	00040428 	.word	0x00040428
   110ac:	000403e8 	.word	0x000403e8

000110b0 <__sflush_r>:
   110b0:	898a      	ldrh	r2, [r1, #12]
   110b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110b6:	4605      	mov	r5, r0
   110b8:	0710      	lsls	r0, r2, #28
   110ba:	460c      	mov	r4, r1
   110bc:	d458      	bmi.n	11170 <__sflush_r+0xc0>
   110be:	684b      	ldr	r3, [r1, #4]
   110c0:	2b00      	cmp	r3, #0
   110c2:	dc05      	bgt.n	110d0 <__sflush_r+0x20>
   110c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   110c6:	2b00      	cmp	r3, #0
   110c8:	dc02      	bgt.n	110d0 <__sflush_r+0x20>
   110ca:	2000      	movs	r0, #0
   110cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   110d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   110d2:	2e00      	cmp	r6, #0
   110d4:	d0f9      	beq.n	110ca <__sflush_r+0x1a>
   110d6:	2300      	movs	r3, #0
   110d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   110dc:	682f      	ldr	r7, [r5, #0]
   110de:	602b      	str	r3, [r5, #0]
   110e0:	d032      	beq.n	11148 <__sflush_r+0x98>
   110e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
   110e4:	89a3      	ldrh	r3, [r4, #12]
   110e6:	075a      	lsls	r2, r3, #29
   110e8:	d505      	bpl.n	110f6 <__sflush_r+0x46>
   110ea:	6863      	ldr	r3, [r4, #4]
   110ec:	1ac0      	subs	r0, r0, r3
   110ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
   110f0:	b10b      	cbz	r3, 110f6 <__sflush_r+0x46>
   110f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   110f4:	1ac0      	subs	r0, r0, r3
   110f6:	2300      	movs	r3, #0
   110f8:	4602      	mov	r2, r0
   110fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   110fc:	6a21      	ldr	r1, [r4, #32]
   110fe:	4628      	mov	r0, r5
   11100:	47b0      	blx	r6
   11102:	1c43      	adds	r3, r0, #1
   11104:	89a3      	ldrh	r3, [r4, #12]
   11106:	d106      	bne.n	11116 <__sflush_r+0x66>
   11108:	6829      	ldr	r1, [r5, #0]
   1110a:	291d      	cmp	r1, #29
   1110c:	d82c      	bhi.n	11168 <__sflush_r+0xb8>
   1110e:	4a2a      	ldr	r2, [pc, #168]	; (111b8 <__sflush_r+0x108>)
   11110:	40ca      	lsrs	r2, r1
   11112:	07d6      	lsls	r6, r2, #31
   11114:	d528      	bpl.n	11168 <__sflush_r+0xb8>
   11116:	2200      	movs	r2, #0
   11118:	6062      	str	r2, [r4, #4]
   1111a:	04d9      	lsls	r1, r3, #19
   1111c:	6922      	ldr	r2, [r4, #16]
   1111e:	6022      	str	r2, [r4, #0]
   11120:	d504      	bpl.n	1112c <__sflush_r+0x7c>
   11122:	1c42      	adds	r2, r0, #1
   11124:	d101      	bne.n	1112a <__sflush_r+0x7a>
   11126:	682b      	ldr	r3, [r5, #0]
   11128:	b903      	cbnz	r3, 1112c <__sflush_r+0x7c>
   1112a:	6560      	str	r0, [r4, #84]	; 0x54
   1112c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1112e:	602f      	str	r7, [r5, #0]
   11130:	2900      	cmp	r1, #0
   11132:	d0ca      	beq.n	110ca <__sflush_r+0x1a>
   11134:	f104 0344 	add.w	r3, r4, #68	; 0x44
   11138:	4299      	cmp	r1, r3
   1113a:	d002      	beq.n	11142 <__sflush_r+0x92>
   1113c:	4628      	mov	r0, r5
   1113e:	f7ff f8ab 	bl	10298 <_free_r>
   11142:	2000      	movs	r0, #0
   11144:	6360      	str	r0, [r4, #52]	; 0x34
   11146:	e7c1      	b.n	110cc <__sflush_r+0x1c>
   11148:	6a21      	ldr	r1, [r4, #32]
   1114a:	2301      	movs	r3, #1
   1114c:	4628      	mov	r0, r5
   1114e:	47b0      	blx	r6
   11150:	1c41      	adds	r1, r0, #1
   11152:	d1c7      	bne.n	110e4 <__sflush_r+0x34>
   11154:	682b      	ldr	r3, [r5, #0]
   11156:	2b00      	cmp	r3, #0
   11158:	d0c4      	beq.n	110e4 <__sflush_r+0x34>
   1115a:	2b1d      	cmp	r3, #29
   1115c:	d001      	beq.n	11162 <__sflush_r+0xb2>
   1115e:	2b16      	cmp	r3, #22
   11160:	d101      	bne.n	11166 <__sflush_r+0xb6>
   11162:	602f      	str	r7, [r5, #0]
   11164:	e7b1      	b.n	110ca <__sflush_r+0x1a>
   11166:	89a3      	ldrh	r3, [r4, #12]
   11168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1116c:	81a3      	strh	r3, [r4, #12]
   1116e:	e7ad      	b.n	110cc <__sflush_r+0x1c>
   11170:	690f      	ldr	r7, [r1, #16]
   11172:	2f00      	cmp	r7, #0
   11174:	d0a9      	beq.n	110ca <__sflush_r+0x1a>
   11176:	0793      	lsls	r3, r2, #30
   11178:	680e      	ldr	r6, [r1, #0]
   1117a:	bf08      	it	eq
   1117c:	694b      	ldreq	r3, [r1, #20]
   1117e:	600f      	str	r7, [r1, #0]
   11180:	bf18      	it	ne
   11182:	2300      	movne	r3, #0
   11184:	eba6 0807 	sub.w	r8, r6, r7
   11188:	608b      	str	r3, [r1, #8]
   1118a:	f1b8 0f00 	cmp.w	r8, #0
   1118e:	dd9c      	ble.n	110ca <__sflush_r+0x1a>
   11190:	6a21      	ldr	r1, [r4, #32]
   11192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   11194:	4643      	mov	r3, r8
   11196:	463a      	mov	r2, r7
   11198:	4628      	mov	r0, r5
   1119a:	47b0      	blx	r6
   1119c:	2800      	cmp	r0, #0
   1119e:	dc06      	bgt.n	111ae <__sflush_r+0xfe>
   111a0:	89a3      	ldrh	r3, [r4, #12]
   111a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   111a6:	81a3      	strh	r3, [r4, #12]
   111a8:	f04f 30ff 	mov.w	r0, #4294967295
   111ac:	e78e      	b.n	110cc <__sflush_r+0x1c>
   111ae:	4407      	add	r7, r0
   111b0:	eba8 0800 	sub.w	r8, r8, r0
   111b4:	e7e9      	b.n	1118a <__sflush_r+0xda>
   111b6:	bf00      	nop
   111b8:	20400001 	.word	0x20400001

000111bc <_fflush_r>:
   111bc:	b538      	push	{r3, r4, r5, lr}
   111be:	690b      	ldr	r3, [r1, #16]
   111c0:	4605      	mov	r5, r0
   111c2:	460c      	mov	r4, r1
   111c4:	b913      	cbnz	r3, 111cc <_fflush_r+0x10>
   111c6:	2500      	movs	r5, #0
   111c8:	4628      	mov	r0, r5
   111ca:	bd38      	pop	{r3, r4, r5, pc}
   111cc:	b118      	cbz	r0, 111d6 <_fflush_r+0x1a>
   111ce:	6983      	ldr	r3, [r0, #24]
   111d0:	b90b      	cbnz	r3, 111d6 <_fflush_r+0x1a>
   111d2:	f000 f871 	bl	112b8 <__sinit>
   111d6:	4b14      	ldr	r3, [pc, #80]	; (11228 <_fflush_r+0x6c>)
   111d8:	429c      	cmp	r4, r3
   111da:	d11b      	bne.n	11214 <_fflush_r+0x58>
   111dc:	686c      	ldr	r4, [r5, #4]
   111de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   111e2:	2b00      	cmp	r3, #0
   111e4:	d0ef      	beq.n	111c6 <_fflush_r+0xa>
   111e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   111e8:	07d0      	lsls	r0, r2, #31
   111ea:	d404      	bmi.n	111f6 <_fflush_r+0x3a>
   111ec:	0599      	lsls	r1, r3, #22
   111ee:	d402      	bmi.n	111f6 <_fflush_r+0x3a>
   111f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   111f2:	f004 f956 	bl	154a2 <__retarget_lock_acquire_recursive>
   111f6:	4628      	mov	r0, r5
   111f8:	4621      	mov	r1, r4
   111fa:	f7ff ff59 	bl	110b0 <__sflush_r>
   111fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11200:	07da      	lsls	r2, r3, #31
   11202:	4605      	mov	r5, r0
   11204:	d4e0      	bmi.n	111c8 <_fflush_r+0xc>
   11206:	89a3      	ldrh	r3, [r4, #12]
   11208:	059b      	lsls	r3, r3, #22
   1120a:	d4dd      	bmi.n	111c8 <_fflush_r+0xc>
   1120c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1120e:	f004 f94e 	bl	154ae <__retarget_lock_release_recursive>
   11212:	e7d9      	b.n	111c8 <_fflush_r+0xc>
   11214:	4b05      	ldr	r3, [pc, #20]	; (1122c <_fflush_r+0x70>)
   11216:	429c      	cmp	r4, r3
   11218:	d101      	bne.n	1121e <_fflush_r+0x62>
   1121a:	68ac      	ldr	r4, [r5, #8]
   1121c:	e7df      	b.n	111de <_fflush_r+0x22>
   1121e:	4b04      	ldr	r3, [pc, #16]	; (11230 <_fflush_r+0x74>)
   11220:	429c      	cmp	r4, r3
   11222:	bf08      	it	eq
   11224:	68ec      	ldreq	r4, [r5, #12]
   11226:	e7da      	b.n	111de <_fflush_r+0x22>
   11228:	00040408 	.word	0x00040408
   1122c:	00040428 	.word	0x00040428
   11230:	000403e8 	.word	0x000403e8

00011234 <std>:
   11234:	2300      	movs	r3, #0
   11236:	b510      	push	{r4, lr}
   11238:	4604      	mov	r4, r0
   1123a:	e9c0 3300 	strd	r3, r3, [r0]
   1123e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   11242:	6083      	str	r3, [r0, #8]
   11244:	8181      	strh	r1, [r0, #12]
   11246:	6643      	str	r3, [r0, #100]	; 0x64
   11248:	81c2      	strh	r2, [r0, #14]
   1124a:	6183      	str	r3, [r0, #24]
   1124c:	4619      	mov	r1, r3
   1124e:	2208      	movs	r2, #8
   11250:	305c      	adds	r0, #92	; 0x5c
   11252:	f004 ff28 	bl	160a6 <memset>
   11256:	4b05      	ldr	r3, [pc, #20]	; (1126c <std+0x38>)
   11258:	6263      	str	r3, [r4, #36]	; 0x24
   1125a:	4b05      	ldr	r3, [pc, #20]	; (11270 <std+0x3c>)
   1125c:	62a3      	str	r3, [r4, #40]	; 0x28
   1125e:	4b05      	ldr	r3, [pc, #20]	; (11274 <std+0x40>)
   11260:	62e3      	str	r3, [r4, #44]	; 0x2c
   11262:	4b05      	ldr	r3, [pc, #20]	; (11278 <std+0x44>)
   11264:	6224      	str	r4, [r4, #32]
   11266:	6323      	str	r3, [r4, #48]	; 0x30
   11268:	bd10      	pop	{r4, pc}
   1126a:	bf00      	nop
   1126c:	00016c5f 	.word	0x00016c5f
   11270:	00016c81 	.word	0x00016c81
   11274:	00016cb9 	.word	0x00016cb9
   11278:	00016cdd 	.word	0x00016cdd

0001127c <_cleanup_r>:
   1127c:	4901      	ldr	r1, [pc, #4]	; (11284 <_cleanup_r+0x8>)
   1127e:	f005 b96b 	b.w	16558 <_fwalk_reent>
   11282:	bf00      	nop
   11284:	000111bd 	.word	0x000111bd

00011288 <__sfp_lock_acquire>:
   11288:	4801      	ldr	r0, [pc, #4]	; (11290 <__sfp_lock_acquire+0x8>)
   1128a:	f004 b90a 	b.w	154a2 <__retarget_lock_acquire_recursive>
   1128e:	bf00      	nop
   11290:	200005e0 	.word	0x200005e0

00011294 <__sfp_lock_release>:
   11294:	4801      	ldr	r0, [pc, #4]	; (1129c <__sfp_lock_release+0x8>)
   11296:	f004 b90a 	b.w	154ae <__retarget_lock_release_recursive>
   1129a:	bf00      	nop
   1129c:	200005e0 	.word	0x200005e0

000112a0 <__sinit_lock_acquire>:
   112a0:	4801      	ldr	r0, [pc, #4]	; (112a8 <__sinit_lock_acquire+0x8>)
   112a2:	f004 b8fe 	b.w	154a2 <__retarget_lock_acquire_recursive>
   112a6:	bf00      	nop
   112a8:	200005f4 	.word	0x200005f4

000112ac <__sinit_lock_release>:
   112ac:	4801      	ldr	r0, [pc, #4]	; (112b4 <__sinit_lock_release+0x8>)
   112ae:	f004 b8fe 	b.w	154ae <__retarget_lock_release_recursive>
   112b2:	bf00      	nop
   112b4:	200005f4 	.word	0x200005f4

000112b8 <__sinit>:
   112b8:	b510      	push	{r4, lr}
   112ba:	4604      	mov	r4, r0
   112bc:	f7ff fff0 	bl	112a0 <__sinit_lock_acquire>
   112c0:	69a3      	ldr	r3, [r4, #24]
   112c2:	b11b      	cbz	r3, 112cc <__sinit+0x14>
   112c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   112c8:	f7ff bff0 	b.w	112ac <__sinit_lock_release>
   112cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   112d0:	6523      	str	r3, [r4, #80]	; 0x50
   112d2:	4b13      	ldr	r3, [pc, #76]	; (11320 <__sinit+0x68>)
   112d4:	4a13      	ldr	r2, [pc, #76]	; (11324 <__sinit+0x6c>)
   112d6:	681b      	ldr	r3, [r3, #0]
   112d8:	62a2      	str	r2, [r4, #40]	; 0x28
   112da:	42a3      	cmp	r3, r4
   112dc:	bf04      	itt	eq
   112de:	2301      	moveq	r3, #1
   112e0:	61a3      	streq	r3, [r4, #24]
   112e2:	4620      	mov	r0, r4
   112e4:	f000 f820 	bl	11328 <__sfp>
   112e8:	6060      	str	r0, [r4, #4]
   112ea:	4620      	mov	r0, r4
   112ec:	f000 f81c 	bl	11328 <__sfp>
   112f0:	60a0      	str	r0, [r4, #8]
   112f2:	4620      	mov	r0, r4
   112f4:	f000 f818 	bl	11328 <__sfp>
   112f8:	2200      	movs	r2, #0
   112fa:	60e0      	str	r0, [r4, #12]
   112fc:	2104      	movs	r1, #4
   112fe:	6860      	ldr	r0, [r4, #4]
   11300:	f7ff ff98 	bl	11234 <std>
   11304:	68a0      	ldr	r0, [r4, #8]
   11306:	2201      	movs	r2, #1
   11308:	2109      	movs	r1, #9
   1130a:	f7ff ff93 	bl	11234 <std>
   1130e:	68e0      	ldr	r0, [r4, #12]
   11310:	2202      	movs	r2, #2
   11312:	2112      	movs	r1, #18
   11314:	f7ff ff8e 	bl	11234 <std>
   11318:	2301      	movs	r3, #1
   1131a:	61a3      	str	r3, [r4, #24]
   1131c:	e7d2      	b.n	112c4 <__sinit+0xc>
   1131e:	bf00      	nop
   11320:	000403e4 	.word	0x000403e4
   11324:	0001127d 	.word	0x0001127d

00011328 <__sfp>:
   11328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1132a:	4607      	mov	r7, r0
   1132c:	f7ff ffac 	bl	11288 <__sfp_lock_acquire>
   11330:	4b1e      	ldr	r3, [pc, #120]	; (113ac <__sfp+0x84>)
   11332:	681e      	ldr	r6, [r3, #0]
   11334:	69b3      	ldr	r3, [r6, #24]
   11336:	b913      	cbnz	r3, 1133e <__sfp+0x16>
   11338:	4630      	mov	r0, r6
   1133a:	f7ff ffbd 	bl	112b8 <__sinit>
   1133e:	3648      	adds	r6, #72	; 0x48
   11340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   11344:	3b01      	subs	r3, #1
   11346:	d503      	bpl.n	11350 <__sfp+0x28>
   11348:	6833      	ldr	r3, [r6, #0]
   1134a:	b30b      	cbz	r3, 11390 <__sfp+0x68>
   1134c:	6836      	ldr	r6, [r6, #0]
   1134e:	e7f7      	b.n	11340 <__sfp+0x18>
   11350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   11354:	b9d5      	cbnz	r5, 1138c <__sfp+0x64>
   11356:	4b16      	ldr	r3, [pc, #88]	; (113b0 <__sfp+0x88>)
   11358:	60e3      	str	r3, [r4, #12]
   1135a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1135e:	6665      	str	r5, [r4, #100]	; 0x64
   11360:	f004 f895 	bl	1548e <__retarget_lock_init_recursive>
   11364:	f7ff ff96 	bl	11294 <__sfp_lock_release>
   11368:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1136c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   11370:	6025      	str	r5, [r4, #0]
   11372:	61a5      	str	r5, [r4, #24]
   11374:	2208      	movs	r2, #8
   11376:	4629      	mov	r1, r5
   11378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1137c:	f004 fe93 	bl	160a6 <memset>
   11380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   11384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   11388:	4620      	mov	r0, r4
   1138a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1138c:	3468      	adds	r4, #104	; 0x68
   1138e:	e7d9      	b.n	11344 <__sfp+0x1c>
   11390:	2104      	movs	r1, #4
   11392:	4638      	mov	r0, r7
   11394:	f005 f8ca 	bl	1652c <__sfmoreglue>
   11398:	4604      	mov	r4, r0
   1139a:	6030      	str	r0, [r6, #0]
   1139c:	2800      	cmp	r0, #0
   1139e:	d1d5      	bne.n	1134c <__sfp+0x24>
   113a0:	f7ff ff78 	bl	11294 <__sfp_lock_release>
   113a4:	230c      	movs	r3, #12
   113a6:	603b      	str	r3, [r7, #0]
   113a8:	e7ee      	b.n	11388 <__sfp+0x60>
   113aa:	bf00      	nop
   113ac:	000403e4 	.word	0x000403e4
   113b0:	ffff0001 	.word	0xffff0001

000113b4 <_localeconv_r>:
   113b4:	4800      	ldr	r0, [pc, #0]	; (113b8 <_localeconv_r+0x4>)
   113b6:	4770      	bx	lr
   113b8:	200004d8 	.word	0x200004d8

000113bc <__smakebuf_r>:
   113bc:	898b      	ldrh	r3, [r1, #12]
   113be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   113c0:	079d      	lsls	r5, r3, #30
   113c2:	4606      	mov	r6, r0
   113c4:	460c      	mov	r4, r1
   113c6:	d507      	bpl.n	113d8 <__smakebuf_r+0x1c>
   113c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
   113cc:	6023      	str	r3, [r4, #0]
   113ce:	6123      	str	r3, [r4, #16]
   113d0:	2301      	movs	r3, #1
   113d2:	6163      	str	r3, [r4, #20]
   113d4:	b002      	add	sp, #8
   113d6:	bd70      	pop	{r4, r5, r6, pc}
   113d8:	ab01      	add	r3, sp, #4
   113da:	466a      	mov	r2, sp
   113dc:	f005 f8db 	bl	16596 <__swhatbuf_r>
   113e0:	9900      	ldr	r1, [sp, #0]
   113e2:	4605      	mov	r5, r0
   113e4:	4630      	mov	r0, r6
   113e6:	f7fe ffa7 	bl	10338 <_malloc_r>
   113ea:	b948      	cbnz	r0, 11400 <__smakebuf_r+0x44>
   113ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   113f0:	059a      	lsls	r2, r3, #22
   113f2:	d4ef      	bmi.n	113d4 <__smakebuf_r+0x18>
   113f4:	f023 0303 	bic.w	r3, r3, #3
   113f8:	f043 0302 	orr.w	r3, r3, #2
   113fc:	81a3      	strh	r3, [r4, #12]
   113fe:	e7e3      	b.n	113c8 <__smakebuf_r+0xc>
   11400:	4b0d      	ldr	r3, [pc, #52]	; (11438 <__smakebuf_r+0x7c>)
   11402:	62b3      	str	r3, [r6, #40]	; 0x28
   11404:	89a3      	ldrh	r3, [r4, #12]
   11406:	6020      	str	r0, [r4, #0]
   11408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1140c:	81a3      	strh	r3, [r4, #12]
   1140e:	9b00      	ldr	r3, [sp, #0]
   11410:	6163      	str	r3, [r4, #20]
   11412:	9b01      	ldr	r3, [sp, #4]
   11414:	6120      	str	r0, [r4, #16]
   11416:	b15b      	cbz	r3, 11430 <__smakebuf_r+0x74>
   11418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1141c:	4630      	mov	r0, r6
   1141e:	f000 f99b 	bl	11758 <_isatty_r>
   11422:	b128      	cbz	r0, 11430 <__smakebuf_r+0x74>
   11424:	89a3      	ldrh	r3, [r4, #12]
   11426:	f023 0303 	bic.w	r3, r3, #3
   1142a:	f043 0301 	orr.w	r3, r3, #1
   1142e:	81a3      	strh	r3, [r4, #12]
   11430:	89a0      	ldrh	r0, [r4, #12]
   11432:	4305      	orrs	r5, r0
   11434:	81a5      	strh	r5, [r4, #12]
   11436:	e7cd      	b.n	113d4 <__smakebuf_r+0x18>
   11438:	0001127d 	.word	0x0001127d

0001143c <__malloc_lock>:
   1143c:	4801      	ldr	r0, [pc, #4]	; (11444 <__malloc_lock+0x8>)
   1143e:	f004 b830 	b.w	154a2 <__retarget_lock_acquire_recursive>
   11442:	bf00      	nop
   11444:	200005cc 	.word	0x200005cc

00011448 <__malloc_unlock>:
   11448:	4801      	ldr	r0, [pc, #4]	; (11450 <__malloc_unlock+0x8>)
   1144a:	f004 b830 	b.w	154ae <__retarget_lock_release_recursive>
   1144e:	bf00      	nop
   11450:	200005cc 	.word	0x200005cc

00011454 <__pow5mult>:
   11454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11458:	4615      	mov	r5, r2
   1145a:	f012 0203 	ands.w	r2, r2, #3
   1145e:	4606      	mov	r6, r0
   11460:	460f      	mov	r7, r1
   11462:	d007      	beq.n	11474 <__pow5mult+0x20>
   11464:	4c21      	ldr	r4, [pc, #132]	; (114ec <__pow5mult+0x98>)
   11466:	3a01      	subs	r2, #1
   11468:	2300      	movs	r3, #0
   1146a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1146e:	f005 f901 	bl	16674 <__multadd>
   11472:	4607      	mov	r7, r0
   11474:	10ad      	asrs	r5, r5, #2
   11476:	d035      	beq.n	114e4 <__pow5mult+0x90>
   11478:	6a74      	ldr	r4, [r6, #36]	; 0x24
   1147a:	b93c      	cbnz	r4, 1148c <__pow5mult+0x38>
   1147c:	2010      	movs	r0, #16
   1147e:	f7fe fefb 	bl	10278 <malloc>
   11482:	e9c0 4401 	strd	r4, r4, [r0, #4]
   11486:	6270      	str	r0, [r6, #36]	; 0x24
   11488:	6004      	str	r4, [r0, #0]
   1148a:	60c4      	str	r4, [r0, #12]
   1148c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   11490:	f8d8 4008 	ldr.w	r4, [r8, #8]
   11494:	b94c      	cbnz	r4, 114aa <__pow5mult+0x56>
   11496:	f240 2171 	movw	r1, #625	; 0x271
   1149a:	4630      	mov	r0, r6
   1149c:	f005 f978 	bl	16790 <__i2b>
   114a0:	2300      	movs	r3, #0
   114a2:	f8c8 0008 	str.w	r0, [r8, #8]
   114a6:	4604      	mov	r4, r0
   114a8:	6003      	str	r3, [r0, #0]
   114aa:	f04f 0900 	mov.w	r9, #0
   114ae:	07eb      	lsls	r3, r5, #31
   114b0:	d50a      	bpl.n	114c8 <__pow5mult+0x74>
   114b2:	4639      	mov	r1, r7
   114b4:	4622      	mov	r2, r4
   114b6:	4630      	mov	r0, r6
   114b8:	f005 f973 	bl	167a2 <__multiply>
   114bc:	4639      	mov	r1, r7
   114be:	4680      	mov	r8, r0
   114c0:	4630      	mov	r0, r6
   114c2:	f005 f8c0 	bl	16646 <_Bfree>
   114c6:	4647      	mov	r7, r8
   114c8:	106d      	asrs	r5, r5, #1
   114ca:	d00b      	beq.n	114e4 <__pow5mult+0x90>
   114cc:	6820      	ldr	r0, [r4, #0]
   114ce:	b938      	cbnz	r0, 114e0 <__pow5mult+0x8c>
   114d0:	4622      	mov	r2, r4
   114d2:	4621      	mov	r1, r4
   114d4:	4630      	mov	r0, r6
   114d6:	f005 f964 	bl	167a2 <__multiply>
   114da:	6020      	str	r0, [r4, #0]
   114dc:	f8c0 9000 	str.w	r9, [r0]
   114e0:	4604      	mov	r4, r0
   114e2:	e7e4      	b.n	114ae <__pow5mult+0x5a>
   114e4:	4638      	mov	r0, r7
   114e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   114ea:	bf00      	nop
   114ec:	00040448 	.word	0x00040448

000114f0 <_svfiprintf_r>:
   114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f4:	4698      	mov	r8, r3
   114f6:	898b      	ldrh	r3, [r1, #12]
   114f8:	061b      	lsls	r3, r3, #24
   114fa:	b09d      	sub	sp, #116	; 0x74
   114fc:	4607      	mov	r7, r0
   114fe:	460d      	mov	r5, r1
   11500:	4614      	mov	r4, r2
   11502:	d50e      	bpl.n	11522 <_svfiprintf_r+0x32>
   11504:	690b      	ldr	r3, [r1, #16]
   11506:	b963      	cbnz	r3, 11522 <_svfiprintf_r+0x32>
   11508:	2140      	movs	r1, #64	; 0x40
   1150a:	f7fe ff15 	bl	10338 <_malloc_r>
   1150e:	6028      	str	r0, [r5, #0]
   11510:	6128      	str	r0, [r5, #16]
   11512:	b920      	cbnz	r0, 1151e <_svfiprintf_r+0x2e>
   11514:	230c      	movs	r3, #12
   11516:	603b      	str	r3, [r7, #0]
   11518:	f04f 30ff 	mov.w	r0, #4294967295
   1151c:	e0d1      	b.n	116c2 <_svfiprintf_r+0x1d2>
   1151e:	2340      	movs	r3, #64	; 0x40
   11520:	616b      	str	r3, [r5, #20]
   11522:	2300      	movs	r3, #0
   11524:	9309      	str	r3, [sp, #36]	; 0x24
   11526:	2320      	movs	r3, #32
   11528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1152c:	f8cd 800c 	str.w	r8, [sp, #12]
   11530:	2330      	movs	r3, #48	; 0x30
   11532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 116dc <_svfiprintf_r+0x1ec>
   11536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1153a:	f04f 0901 	mov.w	r9, #1
   1153e:	4623      	mov	r3, r4
   11540:	469a      	mov	sl, r3
   11542:	f813 2b01 	ldrb.w	r2, [r3], #1
   11546:	b10a      	cbz	r2, 1154c <_svfiprintf_r+0x5c>
   11548:	2a25      	cmp	r2, #37	; 0x25
   1154a:	d1f9      	bne.n	11540 <_svfiprintf_r+0x50>
   1154c:	ebba 0b04 	subs.w	fp, sl, r4
   11550:	d00b      	beq.n	1156a <_svfiprintf_r+0x7a>
   11552:	465b      	mov	r3, fp
   11554:	4622      	mov	r2, r4
   11556:	4629      	mov	r1, r5
   11558:	4638      	mov	r0, r7
   1155a:	f005 fb25 	bl	16ba8 <__ssputs_r>
   1155e:	3001      	adds	r0, #1
   11560:	f000 80aa 	beq.w	116b8 <_svfiprintf_r+0x1c8>
   11564:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11566:	445a      	add	r2, fp
   11568:	9209      	str	r2, [sp, #36]	; 0x24
   1156a:	f89a 3000 	ldrb.w	r3, [sl]
   1156e:	2b00      	cmp	r3, #0
   11570:	f000 80a2 	beq.w	116b8 <_svfiprintf_r+0x1c8>
   11574:	2300      	movs	r3, #0
   11576:	f04f 32ff 	mov.w	r2, #4294967295
   1157a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1157e:	f10a 0a01 	add.w	sl, sl, #1
   11582:	9304      	str	r3, [sp, #16]
   11584:	9307      	str	r3, [sp, #28]
   11586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1158a:	931a      	str	r3, [sp, #104]	; 0x68
   1158c:	4654      	mov	r4, sl
   1158e:	2205      	movs	r2, #5
   11590:	f814 1b01 	ldrb.w	r1, [r4], #1
   11594:	4851      	ldr	r0, [pc, #324]	; (116dc <_svfiprintf_r+0x1ec>)
   11596:	f7ee fdb3 	bl	100 <memchr>
   1159a:	9a04      	ldr	r2, [sp, #16]
   1159c:	b9d8      	cbnz	r0, 115d6 <_svfiprintf_r+0xe6>
   1159e:	06d0      	lsls	r0, r2, #27
   115a0:	bf44      	itt	mi
   115a2:	2320      	movmi	r3, #32
   115a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   115a8:	0711      	lsls	r1, r2, #28
   115aa:	bf44      	itt	mi
   115ac:	232b      	movmi	r3, #43	; 0x2b
   115ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   115b2:	f89a 3000 	ldrb.w	r3, [sl]
   115b6:	2b2a      	cmp	r3, #42	; 0x2a
   115b8:	d015      	beq.n	115e6 <_svfiprintf_r+0xf6>
   115ba:	9a07      	ldr	r2, [sp, #28]
   115bc:	4654      	mov	r4, sl
   115be:	2000      	movs	r0, #0
   115c0:	f04f 0c0a 	mov.w	ip, #10
   115c4:	4621      	mov	r1, r4
   115c6:	f811 3b01 	ldrb.w	r3, [r1], #1
   115ca:	3b30      	subs	r3, #48	; 0x30
   115cc:	2b09      	cmp	r3, #9
   115ce:	d94e      	bls.n	1166e <_svfiprintf_r+0x17e>
   115d0:	b1b0      	cbz	r0, 11600 <_svfiprintf_r+0x110>
   115d2:	9207      	str	r2, [sp, #28]
   115d4:	e014      	b.n	11600 <_svfiprintf_r+0x110>
   115d6:	eba0 0308 	sub.w	r3, r0, r8
   115da:	fa09 f303 	lsl.w	r3, r9, r3
   115de:	4313      	orrs	r3, r2
   115e0:	9304      	str	r3, [sp, #16]
   115e2:	46a2      	mov	sl, r4
   115e4:	e7d2      	b.n	1158c <_svfiprintf_r+0x9c>
   115e6:	9b03      	ldr	r3, [sp, #12]
   115e8:	1d19      	adds	r1, r3, #4
   115ea:	681b      	ldr	r3, [r3, #0]
   115ec:	9103      	str	r1, [sp, #12]
   115ee:	2b00      	cmp	r3, #0
   115f0:	bfbb      	ittet	lt
   115f2:	425b      	neglt	r3, r3
   115f4:	f042 0202 	orrlt.w	r2, r2, #2
   115f8:	9307      	strge	r3, [sp, #28]
   115fa:	9307      	strlt	r3, [sp, #28]
   115fc:	bfb8      	it	lt
   115fe:	9204      	strlt	r2, [sp, #16]
   11600:	7823      	ldrb	r3, [r4, #0]
   11602:	2b2e      	cmp	r3, #46	; 0x2e
   11604:	d10c      	bne.n	11620 <_svfiprintf_r+0x130>
   11606:	7863      	ldrb	r3, [r4, #1]
   11608:	2b2a      	cmp	r3, #42	; 0x2a
   1160a:	d135      	bne.n	11678 <_svfiprintf_r+0x188>
   1160c:	9b03      	ldr	r3, [sp, #12]
   1160e:	1d1a      	adds	r2, r3, #4
   11610:	681b      	ldr	r3, [r3, #0]
   11612:	9203      	str	r2, [sp, #12]
   11614:	2b00      	cmp	r3, #0
   11616:	bfb8      	it	lt
   11618:	f04f 33ff 	movlt.w	r3, #4294967295
   1161c:	3402      	adds	r4, #2
   1161e:	9305      	str	r3, [sp, #20]
   11620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 116ec <_svfiprintf_r+0x1fc>
   11624:	7821      	ldrb	r1, [r4, #0]
   11626:	2203      	movs	r2, #3
   11628:	4650      	mov	r0, sl
   1162a:	f7ee fd69 	bl	100 <memchr>
   1162e:	b140      	cbz	r0, 11642 <_svfiprintf_r+0x152>
   11630:	2340      	movs	r3, #64	; 0x40
   11632:	eba0 000a 	sub.w	r0, r0, sl
   11636:	fa03 f000 	lsl.w	r0, r3, r0
   1163a:	9b04      	ldr	r3, [sp, #16]
   1163c:	4303      	orrs	r3, r0
   1163e:	3401      	adds	r4, #1
   11640:	9304      	str	r3, [sp, #16]
   11642:	f814 1b01 	ldrb.w	r1, [r4], #1
   11646:	4826      	ldr	r0, [pc, #152]	; (116e0 <_svfiprintf_r+0x1f0>)
   11648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1164c:	2206      	movs	r2, #6
   1164e:	f7ee fd57 	bl	100 <memchr>
   11652:	2800      	cmp	r0, #0
   11654:	d038      	beq.n	116c8 <_svfiprintf_r+0x1d8>
   11656:	4b23      	ldr	r3, [pc, #140]	; (116e4 <_svfiprintf_r+0x1f4>)
   11658:	bb1b      	cbnz	r3, 116a2 <_svfiprintf_r+0x1b2>
   1165a:	9b03      	ldr	r3, [sp, #12]
   1165c:	3307      	adds	r3, #7
   1165e:	f023 0307 	bic.w	r3, r3, #7
   11662:	3308      	adds	r3, #8
   11664:	9303      	str	r3, [sp, #12]
   11666:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11668:	4433      	add	r3, r6
   1166a:	9309      	str	r3, [sp, #36]	; 0x24
   1166c:	e767      	b.n	1153e <_svfiprintf_r+0x4e>
   1166e:	fb0c 3202 	mla	r2, ip, r2, r3
   11672:	460c      	mov	r4, r1
   11674:	2001      	movs	r0, #1
   11676:	e7a5      	b.n	115c4 <_svfiprintf_r+0xd4>
   11678:	2300      	movs	r3, #0
   1167a:	3401      	adds	r4, #1
   1167c:	9305      	str	r3, [sp, #20]
   1167e:	4619      	mov	r1, r3
   11680:	f04f 0c0a 	mov.w	ip, #10
   11684:	4620      	mov	r0, r4
   11686:	f810 2b01 	ldrb.w	r2, [r0], #1
   1168a:	3a30      	subs	r2, #48	; 0x30
   1168c:	2a09      	cmp	r2, #9
   1168e:	d903      	bls.n	11698 <_svfiprintf_r+0x1a8>
   11690:	2b00      	cmp	r3, #0
   11692:	d0c5      	beq.n	11620 <_svfiprintf_r+0x130>
   11694:	9105      	str	r1, [sp, #20]
   11696:	e7c3      	b.n	11620 <_svfiprintf_r+0x130>
   11698:	fb0c 2101 	mla	r1, ip, r1, r2
   1169c:	4604      	mov	r4, r0
   1169e:	2301      	movs	r3, #1
   116a0:	e7f0      	b.n	11684 <_svfiprintf_r+0x194>
   116a2:	ab03      	add	r3, sp, #12
   116a4:	9300      	str	r3, [sp, #0]
   116a6:	462a      	mov	r2, r5
   116a8:	4b0f      	ldr	r3, [pc, #60]	; (116e8 <_svfiprintf_r+0x1f8>)
   116aa:	a904      	add	r1, sp, #16
   116ac:	4638      	mov	r0, r7
   116ae:	f7fe ffcd 	bl	1064c <_printf_float>
   116b2:	1c42      	adds	r2, r0, #1
   116b4:	4606      	mov	r6, r0
   116b6:	d1d6      	bne.n	11666 <_svfiprintf_r+0x176>
   116b8:	89ab      	ldrh	r3, [r5, #12]
   116ba:	065b      	lsls	r3, r3, #25
   116bc:	f53f af2c 	bmi.w	11518 <_svfiprintf_r+0x28>
   116c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   116c2:	b01d      	add	sp, #116	; 0x74
   116c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116c8:	ab03      	add	r3, sp, #12
   116ca:	9300      	str	r3, [sp, #0]
   116cc:	462a      	mov	r2, r5
   116ce:	4b06      	ldr	r3, [pc, #24]	; (116e8 <_svfiprintf_r+0x1f8>)
   116d0:	a904      	add	r1, sp, #16
   116d2:	4638      	mov	r0, r7
   116d4:	f7ff f9f0 	bl	10ab8 <_printf_i>
   116d8:	e7eb      	b.n	116b2 <_svfiprintf_r+0x1c2>
   116da:	bf00      	nop
   116dc:	00046ecb 	.word	0x00046ecb
   116e0:	00046ed5 	.word	0x00046ed5
   116e4:	0001064d 	.word	0x0001064d
   116e8:	00016ba9 	.word	0x00016ba9
   116ec:	00046ed1 	.word	0x00046ed1

000116f0 <_write_r>:
   116f0:	b538      	push	{r3, r4, r5, lr}
   116f2:	4d07      	ldr	r5, [pc, #28]	; (11710 <_write_r+0x20>)
   116f4:	4604      	mov	r4, r0
   116f6:	4608      	mov	r0, r1
   116f8:	4611      	mov	r1, r2
   116fa:	2200      	movs	r2, #0
   116fc:	602a      	str	r2, [r5, #0]
   116fe:	461a      	mov	r2, r3
   11700:	f003 feae 	bl	15460 <_write>
   11704:	1c43      	adds	r3, r0, #1
   11706:	d102      	bne.n	1170e <_write_r+0x1e>
   11708:	682b      	ldr	r3, [r5, #0]
   1170a:	b103      	cbz	r3, 1170e <_write_r+0x1e>
   1170c:	6023      	str	r3, [r4, #0]
   1170e:	bd38      	pop	{r3, r4, r5, pc}
   11710:	200022cc 	.word	0x200022cc

00011714 <_close_r>:
   11714:	b538      	push	{r3, r4, r5, lr}
   11716:	4d06      	ldr	r5, [pc, #24]	; (11730 <_close_r+0x1c>)
   11718:	2300      	movs	r3, #0
   1171a:	4604      	mov	r4, r0
   1171c:	4608      	mov	r0, r1
   1171e:	602b      	str	r3, [r5, #0]
   11720:	f003 fea2 	bl	15468 <_close>
   11724:	1c43      	adds	r3, r0, #1
   11726:	d102      	bne.n	1172e <_close_r+0x1a>
   11728:	682b      	ldr	r3, [r5, #0]
   1172a:	b103      	cbz	r3, 1172e <_close_r+0x1a>
   1172c:	6023      	str	r3, [r4, #0]
   1172e:	bd38      	pop	{r3, r4, r5, pc}
   11730:	200022cc 	.word	0x200022cc

00011734 <_fstat_r>:
   11734:	b538      	push	{r3, r4, r5, lr}
   11736:	4d07      	ldr	r5, [pc, #28]	; (11754 <_fstat_r+0x20>)
   11738:	2300      	movs	r3, #0
   1173a:	4604      	mov	r4, r0
   1173c:	4608      	mov	r0, r1
   1173e:	4611      	mov	r1, r2
   11740:	602b      	str	r3, [r5, #0]
   11742:	f003 fe9f 	bl	15484 <_fstat>
   11746:	1c43      	adds	r3, r0, #1
   11748:	d102      	bne.n	11750 <_fstat_r+0x1c>
   1174a:	682b      	ldr	r3, [r5, #0]
   1174c:	b103      	cbz	r3, 11750 <_fstat_r+0x1c>
   1174e:	6023      	str	r3, [r4, #0]
   11750:	bd38      	pop	{r3, r4, r5, pc}
   11752:	bf00      	nop
   11754:	200022cc 	.word	0x200022cc

00011758 <_isatty_r>:
   11758:	b538      	push	{r3, r4, r5, lr}
   1175a:	4d06      	ldr	r5, [pc, #24]	; (11774 <_isatty_r+0x1c>)
   1175c:	2300      	movs	r3, #0
   1175e:	4604      	mov	r4, r0
   11760:	4608      	mov	r0, r1
   11762:	602b      	str	r3, [r5, #0]
   11764:	f003 fe85 	bl	15472 <_isatty>
   11768:	1c43      	adds	r3, r0, #1
   1176a:	d102      	bne.n	11772 <_isatty_r+0x1a>
   1176c:	682b      	ldr	r3, [r5, #0]
   1176e:	b103      	cbz	r3, 11772 <_isatty_r+0x1a>
   11770:	6023      	str	r3, [r4, #0]
   11772:	bd38      	pop	{r3, r4, r5, pc}
   11774:	200022cc 	.word	0x200022cc

00011778 <_lseek_r>:
   11778:	b538      	push	{r3, r4, r5, lr}
   1177a:	4d07      	ldr	r5, [pc, #28]	; (11798 <_lseek_r+0x20>)
   1177c:	4604      	mov	r4, r0
   1177e:	4608      	mov	r0, r1
   11780:	4611      	mov	r1, r2
   11782:	2200      	movs	r2, #0
   11784:	602a      	str	r2, [r5, #0]
   11786:	461a      	mov	r2, r3
   11788:	f003 fe71 	bl	1546e <_lseek>
   1178c:	1c43      	adds	r3, r0, #1
   1178e:	d102      	bne.n	11796 <_lseek_r+0x1e>
   11790:	682b      	ldr	r3, [r5, #0]
   11792:	b103      	cbz	r3, 11796 <_lseek_r+0x1e>
   11794:	6023      	str	r3, [r4, #0]
   11796:	bd38      	pop	{r3, r4, r5, pc}
   11798:	200022cc 	.word	0x200022cc

0001179c <_read_r>:
   1179c:	b538      	push	{r3, r4, r5, lr}
   1179e:	4d07      	ldr	r5, [pc, #28]	; (117bc <_read_r+0x20>)
   117a0:	4604      	mov	r4, r0
   117a2:	4608      	mov	r0, r1
   117a4:	4611      	mov	r1, r2
   117a6:	2200      	movs	r2, #0
   117a8:	602a      	str	r2, [r5, #0]
   117aa:	461a      	mov	r2, r3
   117ac:	f003 fe54 	bl	15458 <_read>
   117b0:	1c43      	adds	r3, r0, #1
   117b2:	d102      	bne.n	117ba <_read_r+0x1e>
   117b4:	682b      	ldr	r3, [r5, #0]
   117b6:	b103      	cbz	r3, 117ba <_read_r+0x1e>
   117b8:	6023      	str	r3, [r4, #0]
   117ba:	bd38      	pop	{r3, r4, r5, pc}
   117bc:	200022cc 	.word	0x200022cc

000117c0 <nrf_cc3xx_platform_init_no_rng>:
   117c0:	b510      	push	{r4, lr}
   117c2:	4c0a      	ldr	r4, [pc, #40]	; (117ec <nrf_cc3xx_platform_init_no_rng+0x2c>)
   117c4:	6823      	ldr	r3, [r4, #0]
   117c6:	b11b      	cbz	r3, 117d0 <nrf_cc3xx_platform_init_no_rng+0x10>
   117c8:	2301      	movs	r3, #1
   117ca:	6023      	str	r3, [r4, #0]
   117cc:	2000      	movs	r0, #0
   117ce:	bd10      	pop	{r4, pc}
   117d0:	f000 f8d0 	bl	11974 <CC_LibInitNoRng>
   117d4:	2800      	cmp	r0, #0
   117d6:	d0f7      	beq.n	117c8 <nrf_cc3xx_platform_init_no_rng+0x8>
   117d8:	3801      	subs	r0, #1
   117da:	2806      	cmp	r0, #6
   117dc:	d803      	bhi.n	117e6 <nrf_cc3xx_platform_init_no_rng+0x26>
   117de:	4b04      	ldr	r3, [pc, #16]	; (117f0 <nrf_cc3xx_platform_init_no_rng+0x30>)
   117e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   117e4:	bd10      	pop	{r4, pc}
   117e6:	4803      	ldr	r0, [pc, #12]	; (117f4 <nrf_cc3xx_platform_init_no_rng+0x34>)
   117e8:	bd10      	pop	{r4, pc}
   117ea:	bf00      	nop
   117ec:	2000189c 	.word	0x2000189c
   117f0:	00040454 	.word	0x00040454
   117f4:	ffff8ffe 	.word	0xffff8ffe

000117f8 <nrf_cc3xx_platform_abort>:
   117f8:	f3bf 8f4f 	dsb	sy
   117fc:	4905      	ldr	r1, [pc, #20]	; (11814 <nrf_cc3xx_platform_abort+0x1c>)
   117fe:	4b06      	ldr	r3, [pc, #24]	; (11818 <nrf_cc3xx_platform_abort+0x20>)
   11800:	68ca      	ldr	r2, [r1, #12]
   11802:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11806:	4313      	orrs	r3, r2
   11808:	60cb      	str	r3, [r1, #12]
   1180a:	f3bf 8f4f 	dsb	sy
   1180e:	bf00      	nop
   11810:	e7fd      	b.n	1180e <nrf_cc3xx_platform_abort+0x16>
   11812:	bf00      	nop
   11814:	e000ed00 	.word	0xe000ed00
   11818:	05fa0004 	.word	0x05fa0004

0001181c <CC_PalAbort>:
   1181c:	b410      	push	{r4}
   1181e:	4b0a      	ldr	r3, [pc, #40]	; (11848 <CC_PalAbort+0x2c>)
   11820:	490a      	ldr	r1, [pc, #40]	; (1184c <CC_PalAbort+0x30>)
   11822:	4c0b      	ldr	r4, [pc, #44]	; (11850 <CC_PalAbort+0x34>)
   11824:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   11828:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1182c:	6849      	ldr	r1, [r1, #4]
   1182e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   11832:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   11836:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1183a:	2300      	movs	r3, #0
   1183c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   11840:	f85d 4b04 	ldr.w	r4, [sp], #4
   11844:	4708      	bx	r1
   11846:	bf00      	nop
   11848:	5002b000 	.word	0x5002b000
   1184c:	20000554 	.word	0x20000554
   11850:	5002a000 	.word	0x5002a000

00011854 <nrf_cc3xx_platform_set_abort>:
   11854:	e9d0 1200 	ldrd	r1, r2, [r0]
   11858:	4b01      	ldr	r3, [pc, #4]	; (11860 <nrf_cc3xx_platform_set_abort+0xc>)
   1185a:	e9c3 1200 	strd	r1, r2, [r3]
   1185e:	4770      	bx	lr
   11860:	20000554 	.word	0x20000554

00011864 <mutex_free>:
   11864:	b510      	push	{r4, lr}
   11866:	4604      	mov	r4, r0
   11868:	b130      	cbz	r0, 11878 <mutex_free+0x14>
   1186a:	6863      	ldr	r3, [r4, #4]
   1186c:	06db      	lsls	r3, r3, #27
   1186e:	d502      	bpl.n	11876 <mutex_free+0x12>
   11870:	2300      	movs	r3, #0
   11872:	6023      	str	r3, [r4, #0]
   11874:	6063      	str	r3, [r4, #4]
   11876:	bd10      	pop	{r4, pc}
   11878:	4b02      	ldr	r3, [pc, #8]	; (11884 <mutex_free+0x20>)
   1187a:	4803      	ldr	r0, [pc, #12]	; (11888 <mutex_free+0x24>)
   1187c:	685b      	ldr	r3, [r3, #4]
   1187e:	4798      	blx	r3
   11880:	e7f3      	b.n	1186a <mutex_free+0x6>
   11882:	bf00      	nop
   11884:	20000554 	.word	0x20000554
   11888:	00040470 	.word	0x00040470

0001188c <mutex_lock>:
   1188c:	b1b0      	cbz	r0, 118bc <mutex_lock+0x30>
   1188e:	6843      	ldr	r3, [r0, #4]
   11890:	b193      	cbz	r3, 118b8 <mutex_lock+0x2c>
   11892:	06db      	lsls	r3, r3, #27
   11894:	d50e      	bpl.n	118b4 <mutex_lock+0x28>
   11896:	2301      	movs	r3, #1
   11898:	e850 2f00 	ldrex	r2, [r0]
   1189c:	4619      	mov	r1, r3
   1189e:	e840 1c00 	strex	ip, r1, [r0]
   118a2:	f09c 0f00 	teq	ip, #0
   118a6:	d1f7      	bne.n	11898 <mutex_lock+0xc>
   118a8:	2a01      	cmp	r2, #1
   118aa:	d0f5      	beq.n	11898 <mutex_lock+0xc>
   118ac:	f3bf 8f5f 	dmb	sy
   118b0:	2000      	movs	r0, #0
   118b2:	4770      	bx	lr
   118b4:	4803      	ldr	r0, [pc, #12]	; (118c4 <mutex_lock+0x38>)
   118b6:	4770      	bx	lr
   118b8:	4803      	ldr	r0, [pc, #12]	; (118c8 <mutex_lock+0x3c>)
   118ba:	4770      	bx	lr
   118bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   118c0:	4770      	bx	lr
   118c2:	bf00      	nop
   118c4:	ffff8fe9 	.word	0xffff8fe9
   118c8:	ffff8fea 	.word	0xffff8fea

000118cc <mutex_unlock>:
   118cc:	b168      	cbz	r0, 118ea <mutex_unlock+0x1e>
   118ce:	6843      	ldr	r3, [r0, #4]
   118d0:	b13b      	cbz	r3, 118e2 <mutex_unlock+0x16>
   118d2:	06db      	lsls	r3, r3, #27
   118d4:	d507      	bpl.n	118e6 <mutex_unlock+0x1a>
   118d6:	f3bf 8f5f 	dmb	sy
   118da:	2300      	movs	r3, #0
   118dc:	6003      	str	r3, [r0, #0]
   118de:	4618      	mov	r0, r3
   118e0:	4770      	bx	lr
   118e2:	4803      	ldr	r0, [pc, #12]	; (118f0 <mutex_unlock+0x24>)
   118e4:	4770      	bx	lr
   118e6:	4803      	ldr	r0, [pc, #12]	; (118f4 <mutex_unlock+0x28>)
   118e8:	4770      	bx	lr
   118ea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   118ee:	4770      	bx	lr
   118f0:	ffff8fea 	.word	0xffff8fea
   118f4:	ffff8fe9 	.word	0xffff8fe9

000118f8 <mutex_init>:
   118f8:	b510      	push	{r4, lr}
   118fa:	4604      	mov	r4, r0
   118fc:	b120      	cbz	r0, 11908 <mutex_init+0x10>
   118fe:	2200      	movs	r2, #0
   11900:	2311      	movs	r3, #17
   11902:	6022      	str	r2, [r4, #0]
   11904:	6063      	str	r3, [r4, #4]
   11906:	bd10      	pop	{r4, pc}
   11908:	4801      	ldr	r0, [pc, #4]	; (11910 <mutex_init+0x18>)
   1190a:	f7ff ff87 	bl	1181c <CC_PalAbort>
   1190e:	e7f6      	b.n	118fe <mutex_init+0x6>
   11910:	00040498 	.word	0x00040498

00011914 <nrf_cc3xx_platform_set_mutexes>:
   11914:	b570      	push	{r4, r5, r6, lr}
   11916:	e9d0 2300 	ldrd	r2, r3, [r0]
   1191a:	4c13      	ldr	r4, [pc, #76]	; (11968 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1191c:	4d13      	ldr	r5, [pc, #76]	; (1196c <nrf_cc3xx_platform_set_mutexes+0x58>)
   1191e:	6063      	str	r3, [r4, #4]
   11920:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   11924:	e9c4 3002 	strd	r3, r0, [r4, #8]
   11928:	6022      	str	r2, [r4, #0]
   1192a:	4b11      	ldr	r3, [pc, #68]	; (11970 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1192c:	6808      	ldr	r0, [r1, #0]
   1192e:	6018      	str	r0, [r3, #0]
   11930:	6848      	ldr	r0, [r1, #4]
   11932:	6058      	str	r0, [r3, #4]
   11934:	6888      	ldr	r0, [r1, #8]
   11936:	6098      	str	r0, [r3, #8]
   11938:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   1193c:	60d8      	str	r0, [r3, #12]
   1193e:	6119      	str	r1, [r3, #16]
   11940:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   11944:	06db      	lsls	r3, r3, #27
   11946:	d50d      	bpl.n	11964 <nrf_cc3xx_platform_set_mutexes+0x50>
   11948:	2300      	movs	r3, #0
   1194a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   1194e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   11952:	f505 708a 	add.w	r0, r5, #276	; 0x114
   11956:	4790      	blx	r2
   11958:	6823      	ldr	r3, [r4, #0]
   1195a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1195e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11962:	4718      	bx	r3
   11964:	bd70      	pop	{r4, r5, r6, pc}
   11966:	bf00      	nop
   11968:	20000564 	.word	0x20000564
   1196c:	200018b4 	.word	0x200018b4
   11970:	20000574 	.word	0x20000574

00011974 <CC_LibInitNoRng>:
   11974:	b538      	push	{r3, r4, r5, lr}
   11976:	f000 f82f 	bl	119d8 <CC_HalInit>
   1197a:	b120      	cbz	r0, 11986 <CC_LibInitNoRng+0x12>
   1197c:	2403      	movs	r4, #3
   1197e:	f000 f863 	bl	11a48 <CC_PalTerminate>
   11982:	4620      	mov	r0, r4
   11984:	bd38      	pop	{r3, r4, r5, pc}
   11986:	f000 f831 	bl	119ec <CC_PalInit>
   1198a:	b998      	cbnz	r0, 119b4 <CC_LibInitNoRng+0x40>
   1198c:	f000 f8ac 	bl	11ae8 <CC_PalPowerSaveModeSelect>
   11990:	b998      	cbnz	r0, 119ba <CC_LibInitNoRng+0x46>
   11992:	4d0f      	ldr	r5, [pc, #60]	; (119d0 <CC_LibInitNoRng+0x5c>)
   11994:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   11998:	0e1b      	lsrs	r3, r3, #24
   1199a:	2bf0      	cmp	r3, #240	; 0xf0
   1199c:	d108      	bne.n	119b0 <CC_LibInitNoRng+0x3c>
   1199e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
   119a2:	4b0c      	ldr	r3, [pc, #48]	; (119d4 <CC_LibInitNoRng+0x60>)
   119a4:	429a      	cmp	r2, r3
   119a6:	d00a      	beq.n	119be <CC_LibInitNoRng+0x4a>
   119a8:	2407      	movs	r4, #7
   119aa:	f000 f817 	bl	119dc <CC_HalTerminate>
   119ae:	e7e6      	b.n	1197e <CC_LibInitNoRng+0xa>
   119b0:	2406      	movs	r4, #6
   119b2:	e7fa      	b.n	119aa <CC_LibInitNoRng+0x36>
   119b4:	2404      	movs	r4, #4
   119b6:	4620      	mov	r0, r4
   119b8:	bd38      	pop	{r3, r4, r5, pc}
   119ba:	2400      	movs	r4, #0
   119bc:	e7f5      	b.n	119aa <CC_LibInitNoRng+0x36>
   119be:	2001      	movs	r0, #1
   119c0:	f000 f892 	bl	11ae8 <CC_PalPowerSaveModeSelect>
   119c4:	4604      	mov	r4, r0
   119c6:	2800      	cmp	r0, #0
   119c8:	d1f7      	bne.n	119ba <CC_LibInitNoRng+0x46>
   119ca:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
   119ce:	e7d8      	b.n	11982 <CC_LibInitNoRng+0xe>
   119d0:	5002b000 	.word	0x5002b000
   119d4:	20e00000 	.word	0x20e00000

000119d8 <CC_HalInit>:
   119d8:	2000      	movs	r0, #0
   119da:	4770      	bx	lr

000119dc <CC_HalTerminate>:
   119dc:	2000      	movs	r0, #0
   119de:	4770      	bx	lr

000119e0 <CC_HalMaskInterrupt>:
   119e0:	4b01      	ldr	r3, [pc, #4]	; (119e8 <CC_HalMaskInterrupt+0x8>)
   119e2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   119e6:	4770      	bx	lr
   119e8:	5002b000 	.word	0x5002b000

000119ec <CC_PalInit>:
   119ec:	b510      	push	{r4, lr}
   119ee:	4811      	ldr	r0, [pc, #68]	; (11a34 <CC_PalInit+0x48>)
   119f0:	f000 f848 	bl	11a84 <CC_PalMutexCreate>
   119f4:	b100      	cbz	r0, 119f8 <CC_PalInit+0xc>
   119f6:	bd10      	pop	{r4, pc}
   119f8:	480f      	ldr	r0, [pc, #60]	; (11a38 <CC_PalInit+0x4c>)
   119fa:	f000 f843 	bl	11a84 <CC_PalMutexCreate>
   119fe:	2800      	cmp	r0, #0
   11a00:	d1f9      	bne.n	119f6 <CC_PalInit+0xa>
   11a02:	4c0e      	ldr	r4, [pc, #56]	; (11a3c <CC_PalInit+0x50>)
   11a04:	4620      	mov	r0, r4
   11a06:	f000 f83d 	bl	11a84 <CC_PalMutexCreate>
   11a0a:	2800      	cmp	r0, #0
   11a0c:	d1f3      	bne.n	119f6 <CC_PalInit+0xa>
   11a0e:	4b0c      	ldr	r3, [pc, #48]	; (11a40 <CC_PalInit+0x54>)
   11a10:	480c      	ldr	r0, [pc, #48]	; (11a44 <CC_PalInit+0x58>)
   11a12:	601c      	str	r4, [r3, #0]
   11a14:	f000 f836 	bl	11a84 <CC_PalMutexCreate>
   11a18:	4601      	mov	r1, r0
   11a1a:	2800      	cmp	r0, #0
   11a1c:	d1eb      	bne.n	119f6 <CC_PalInit+0xa>
   11a1e:	f000 f82d 	bl	11a7c <CC_PalDmaInit>
   11a22:	4604      	mov	r4, r0
   11a24:	b108      	cbz	r0, 11a2a <CC_PalInit+0x3e>
   11a26:	4620      	mov	r0, r4
   11a28:	bd10      	pop	{r4, pc}
   11a2a:	f000 f83f 	bl	11aac <CC_PalPowerSaveModeInit>
   11a2e:	4620      	mov	r0, r4
   11a30:	e7fa      	b.n	11a28 <CC_PalInit+0x3c>
   11a32:	bf00      	nop
   11a34:	200005ac 	.word	0x200005ac
   11a38:	200005a0 	.word	0x200005a0
   11a3c:	200005a8 	.word	0x200005a8
   11a40:	200005b0 	.word	0x200005b0
   11a44:	200005a4 	.word	0x200005a4

00011a48 <CC_PalTerminate>:
   11a48:	b508      	push	{r3, lr}
   11a4a:	4808      	ldr	r0, [pc, #32]	; (11a6c <CC_PalTerminate+0x24>)
   11a4c:	f000 f824 	bl	11a98 <CC_PalMutexDestroy>
   11a50:	4807      	ldr	r0, [pc, #28]	; (11a70 <CC_PalTerminate+0x28>)
   11a52:	f000 f821 	bl	11a98 <CC_PalMutexDestroy>
   11a56:	4807      	ldr	r0, [pc, #28]	; (11a74 <CC_PalTerminate+0x2c>)
   11a58:	f000 f81e 	bl	11a98 <CC_PalMutexDestroy>
   11a5c:	4806      	ldr	r0, [pc, #24]	; (11a78 <CC_PalTerminate+0x30>)
   11a5e:	f000 f81b 	bl	11a98 <CC_PalMutexDestroy>
   11a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11a66:	f000 b80b 	b.w	11a80 <CC_PalDmaTerminate>
   11a6a:	bf00      	nop
   11a6c:	200005ac 	.word	0x200005ac
   11a70:	200005a0 	.word	0x200005a0
   11a74:	200005a8 	.word	0x200005a8
   11a78:	200005a4 	.word	0x200005a4

00011a7c <CC_PalDmaInit>:
   11a7c:	2000      	movs	r0, #0
   11a7e:	4770      	bx	lr

00011a80 <CC_PalDmaTerminate>:
   11a80:	4770      	bx	lr
   11a82:	bf00      	nop

00011a84 <CC_PalMutexCreate>:
   11a84:	b508      	push	{r3, lr}
   11a86:	4b03      	ldr	r3, [pc, #12]	; (11a94 <CC_PalMutexCreate+0x10>)
   11a88:	6802      	ldr	r2, [r0, #0]
   11a8a:	681b      	ldr	r3, [r3, #0]
   11a8c:	6810      	ldr	r0, [r2, #0]
   11a8e:	4798      	blx	r3
   11a90:	2000      	movs	r0, #0
   11a92:	bd08      	pop	{r3, pc}
   11a94:	20000564 	.word	0x20000564

00011a98 <CC_PalMutexDestroy>:
   11a98:	b508      	push	{r3, lr}
   11a9a:	4b03      	ldr	r3, [pc, #12]	; (11aa8 <CC_PalMutexDestroy+0x10>)
   11a9c:	6802      	ldr	r2, [r0, #0]
   11a9e:	685b      	ldr	r3, [r3, #4]
   11aa0:	6810      	ldr	r0, [r2, #0]
   11aa2:	4798      	blx	r3
   11aa4:	2000      	movs	r0, #0
   11aa6:	bd08      	pop	{r3, pc}
   11aa8:	20000564 	.word	0x20000564

00011aac <CC_PalPowerSaveModeInit>:
   11aac:	b570      	push	{r4, r5, r6, lr}
   11aae:	4c09      	ldr	r4, [pc, #36]	; (11ad4 <CC_PalPowerSaveModeInit+0x28>)
   11ab0:	4d09      	ldr	r5, [pc, #36]	; (11ad8 <CC_PalPowerSaveModeInit+0x2c>)
   11ab2:	6920      	ldr	r0, [r4, #16]
   11ab4:	68ab      	ldr	r3, [r5, #8]
   11ab6:	4798      	blx	r3
   11ab8:	b118      	cbz	r0, 11ac2 <CC_PalPowerSaveModeInit+0x16>
   11aba:	4b08      	ldr	r3, [pc, #32]	; (11adc <CC_PalPowerSaveModeInit+0x30>)
   11abc:	4808      	ldr	r0, [pc, #32]	; (11ae0 <CC_PalPowerSaveModeInit+0x34>)
   11abe:	685b      	ldr	r3, [r3, #4]
   11ac0:	4798      	blx	r3
   11ac2:	4a08      	ldr	r2, [pc, #32]	; (11ae4 <CC_PalPowerSaveModeInit+0x38>)
   11ac4:	68eb      	ldr	r3, [r5, #12]
   11ac6:	6920      	ldr	r0, [r4, #16]
   11ac8:	2100      	movs	r1, #0
   11aca:	6011      	str	r1, [r2, #0]
   11acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11ad0:	4718      	bx	r3
   11ad2:	bf00      	nop
   11ad4:	20000574 	.word	0x20000574
   11ad8:	20000564 	.word	0x20000564
   11adc:	20000554 	.word	0x20000554
   11ae0:	000404bc 	.word	0x000404bc
   11ae4:	200018b0 	.word	0x200018b0

00011ae8 <CC_PalPowerSaveModeSelect>:
   11ae8:	b570      	push	{r4, r5, r6, lr}
   11aea:	4d1b      	ldr	r5, [pc, #108]	; (11b58 <CC_PalPowerSaveModeSelect+0x70>)
   11aec:	4e1b      	ldr	r6, [pc, #108]	; (11b5c <CC_PalPowerSaveModeSelect+0x74>)
   11aee:	4604      	mov	r4, r0
   11af0:	68b2      	ldr	r2, [r6, #8]
   11af2:	6928      	ldr	r0, [r5, #16]
   11af4:	4790      	blx	r2
   11af6:	b9f8      	cbnz	r0, 11b38 <CC_PalPowerSaveModeSelect+0x50>
   11af8:	b15c      	cbz	r4, 11b12 <CC_PalPowerSaveModeSelect+0x2a>
   11afa:	4c19      	ldr	r4, [pc, #100]	; (11b60 <CC_PalPowerSaveModeSelect+0x78>)
   11afc:	6823      	ldr	r3, [r4, #0]
   11afe:	b1b3      	cbz	r3, 11b2e <CC_PalPowerSaveModeSelect+0x46>
   11b00:	2b01      	cmp	r3, #1
   11b02:	d01b      	beq.n	11b3c <CC_PalPowerSaveModeSelect+0x54>
   11b04:	3b01      	subs	r3, #1
   11b06:	6023      	str	r3, [r4, #0]
   11b08:	6928      	ldr	r0, [r5, #16]
   11b0a:	68f3      	ldr	r3, [r6, #12]
   11b0c:	4798      	blx	r3
   11b0e:	2000      	movs	r0, #0
   11b10:	bd70      	pop	{r4, r5, r6, pc}
   11b12:	4c13      	ldr	r4, [pc, #76]	; (11b60 <CC_PalPowerSaveModeSelect+0x78>)
   11b14:	6821      	ldr	r1, [r4, #0]
   11b16:	b941      	cbnz	r1, 11b2a <CC_PalPowerSaveModeSelect+0x42>
   11b18:	4b12      	ldr	r3, [pc, #72]	; (11b64 <CC_PalPowerSaveModeSelect+0x7c>)
   11b1a:	2201      	movs	r2, #1
   11b1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   11b20:	4a11      	ldr	r2, [pc, #68]	; (11b68 <CC_PalPowerSaveModeSelect+0x80>)
   11b22:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   11b26:	2b00      	cmp	r3, #0
   11b28:	d1fb      	bne.n	11b22 <CC_PalPowerSaveModeSelect+0x3a>
   11b2a:	3101      	adds	r1, #1
   11b2c:	6021      	str	r1, [r4, #0]
   11b2e:	68f3      	ldr	r3, [r6, #12]
   11b30:	6928      	ldr	r0, [r5, #16]
   11b32:	4798      	blx	r3
   11b34:	2000      	movs	r0, #0
   11b36:	bd70      	pop	{r4, r5, r6, pc}
   11b38:	480c      	ldr	r0, [pc, #48]	; (11b6c <CC_PalPowerSaveModeSelect+0x84>)
   11b3a:	bd70      	pop	{r4, r5, r6, pc}
   11b3c:	4a0a      	ldr	r2, [pc, #40]	; (11b68 <CC_PalPowerSaveModeSelect+0x80>)
   11b3e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   11b42:	2b00      	cmp	r3, #0
   11b44:	d1fb      	bne.n	11b3e <CC_PalPowerSaveModeSelect+0x56>
   11b46:	4a07      	ldr	r2, [pc, #28]	; (11b64 <CC_PalPowerSaveModeSelect+0x7c>)
   11b48:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   11b4c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   11b50:	f7ff ff46 	bl	119e0 <CC_HalMaskInterrupt>
   11b54:	6823      	ldr	r3, [r4, #0]
   11b56:	e7d5      	b.n	11b04 <CC_PalPowerSaveModeSelect+0x1c>
   11b58:	20000574 	.word	0x20000574
   11b5c:	20000564 	.word	0x20000564
   11b60:	200018b0 	.word	0x200018b0
   11b64:	5002a000 	.word	0x5002a000
   11b68:	5002b000 	.word	0x5002b000
   11b6c:	ffff8fe9 	.word	0xffff8fe9

00011b70 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   11b70:	4770      	bx	lr

00011b72 <_ZN2ei9ei_matrixD1Ev>:
    ~ei_matrix() {
   11b72:	b510      	push	{r4, lr}
   11b74:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
   11b76:	6800      	ldr	r0, [r0, #0]
   11b78:	b118      	cbz	r0, 11b82 <_ZN2ei9ei_matrixD1Ev+0x10>
   11b7a:	7b23      	ldrb	r3, [r4, #12]
   11b7c:	b10b      	cbz	r3, 11b82 <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
   11b7e:	f000 f849 	bl	11c14 <_Z7ei_freePv>
    }
   11b82:	4620      	mov	r0, r4
   11b84:	bd10      	pop	{r4, pc}

00011b86 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
   11b86:	e7fe      	b.n	11b86 <_ZSt25__throw_bad_function_callv>

00011b88 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
   11b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (fin == fout) {
   11b8c:	4291      	cmp	r1, r2
{
   11b8e:	4604      	mov	r4, r0
   11b90:	460d      	mov	r5, r1
   11b92:	4610      	mov	r0, r2
   11b94:	461f      	mov	r7, r3
   11b96:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
   11b9a:	d117      	bne.n	11bcc <kiss_fft_stride+0x44>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   11b9c:	6820      	ldr	r0, [r4, #0]
   11b9e:	00c0      	lsls	r0, r0, #3
   11ba0:	f000 f834 	bl	11c0c <_Z9ei_mallocj>
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   11ba4:	463b      	mov	r3, r7
   11ba6:	4629      	mov	r1, r5
   11ba8:	e9cd 8400 	strd	r8, r4, [sp]
   11bac:	2201      	movs	r2, #1
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   11bae:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   11bb0:	f7f3 facc 	bl	514c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
   11bb4:	6822      	ldr	r2, [r4, #0]
   11bb6:	4631      	mov	r1, r6
   11bb8:	00d2      	lsls	r2, r2, #3
   11bba:	4628      	mov	r0, r5
   11bbc:	f004 fa4b 	bl	16056 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
   11bc0:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
   11bc2:	b002      	add	sp, #8
   11bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
   11bc8:	f000 b824 	b.w	11c14 <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
   11bcc:	e9cd 8400 	strd	r8, r4, [sp]
   11bd0:	2201      	movs	r2, #1
   11bd2:	f7f3 fabb 	bl	514c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
   11bd6:	b002      	add	sp, #8
   11bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011bdc <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
   11bdc:	2301      	movs	r3, #1
   11bde:	f7ff bfd3 	b.w	11b88 <kiss_fft_stride>

00011be2 <_Z29ei_run_impulse_check_canceledv>:
}
   11be2:	2000      	movs	r0, #0
   11be4:	4770      	bx	lr

00011be6 <_Z16ei_read_timer_usv>:
uint64_t ei_read_timer_us() {
   11be6:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   11be8:	f004 f9a5 	bl	15f36 <z_impl_k_uptime_ticks>
   11bec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11bf0:	460b      	mov	r3, r1
   11bf2:	fba0 0102 	umull	r0, r1, r0, r2
   11bf6:	fb02 1103 	mla	r1, r2, r3, r1
   11bfa:	0bc3      	lsrs	r3, r0, #15
   11bfc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11c00:	0bcc      	lsrs	r4, r1, #15
    return k_uptime_get() * 1000;
   11c02:	fba3 0102 	umull	r0, r1, r3, r2
   11c06:	fb02 1104 	mla	r1, r2, r4, r1
}
   11c0a:	bd10      	pop	{r4, pc}

00011c0c <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
   11c0c:	f7fe bb34 	b.w	10278 <malloc>

00011c10 <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
   11c10:	f7fe bb18 	b.w	10244 <calloc>

00011c14 <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
   11c14:	f7fe bb38 	b.w	10288 <free>

00011c18 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   11c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   11c1c:	2401      	movs	r4, #1
                         int total_signed_bits) {
   11c1e:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   11c20:	fa04 f000 	lsl.w	r0, r4, r0
   11c24:	3801      	subs	r0, #1
                         int total_signed_bits) {
   11c26:	4688      	mov	r8, r1
   11c28:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   11c2a:	f7ee fc0b 	bl	444 <__aeabi_i2d>
   11c2e:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   11c30:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   11c34:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   11c36:	f1c0 0320 	rsb	r3, r0, #32
   11c3a:	f1a0 0120 	sub.w	r1, r0, #32
   11c3e:	fa24 f303 	lsr.w	r3, r4, r3
   11c42:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   11c46:	fa04 f000 	lsl.w	r0, r4, r0
   11c4a:	4319      	orrs	r1, r3
   11c4c:	f7ee fc36 	bl	4bc <__aeabi_l2d>
   11c50:	4602      	mov	r2, r0
   11c52:	460b      	mov	r3, r1
   11c54:	4630      	mov	r0, r6
   11c56:	4639      	mov	r1, r7
   11c58:	f7ee fc5e 	bl	518 <__aeabi_dmul>
      (1ll << input_left_shift);
   11c5c:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   11c60:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   11c62:	f1a8 0120 	sub.w	r1, r8, #32
   11c66:	fa24 f303 	lsr.w	r3, r4, r3
   11c6a:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   11c6e:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   11c70:	4319      	orrs	r1, r3
   11c72:	fa04 f008 	lsl.w	r0, r4, r8
   11c76:	f7ee fc21 	bl	4bc <__aeabi_l2d>
   11c7a:	4602      	mov	r2, r0
   11c7c:	460b      	mov	r3, r1
  const double max_input_rescaled =
   11c7e:	4630      	mov	r0, r6
   11c80:	4639      	mov	r1, r7
   11c82:	f7ee fd73 	bl	76c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   11c86:	ec41 0b10 	vmov	d0, r0, r1
   11c8a:	f7f0 fb15 	bl	22b8 <floor>
   11c8e:	ec51 0b10 	vmov	r0, r1, d0
   11c92:	f7ee fedb 	bl	a4c <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   11c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011c9a <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   11c9a:	edd0 7a00 	vldr	s15, [r0]
   11c9e:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   11ca2:	b510      	push	{r4, lr}
   11ca4:	4604      	mov	r4, r0
   11ca6:	ee17 0a90 	vmov	r0, s15
   11caa:	f7ee fbdd 	bl	468 <__aeabi_f2d>
   11cae:	ec41 0b10 	vmov	d0, r0, r1
   11cb2:	f7fd fda9 	bl	f808 <round>
   11cb6:	ec51 0b10 	vmov	r0, r1, d0
   11cba:	f7ee feef 	bl	a9c <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   11cbe:	ee07 0a90 	vmov	s15, r0
   11cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   11cc6:	6863      	ldr	r3, [r4, #4]
   11cc8:	ee17 0a90 	vmov	r0, s15
  };
   11ccc:	4418      	add	r0, r3
   11cce:	bd10      	pop	{r4, pc}

00011cd0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
  if (context->tensors != nullptr) {
   11cd0:	6883      	ldr	r3, [r0, #8]
                                      int tensor_index) {
   11cd2:	b410      	push	{r4}
  if (context->tensors != nullptr) {
   11cd4:	b123      	cbz	r3, 11ce0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x10>
    return &context->tensors[tensor_index];
   11cd6:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   11cda:	f85d 4b04 	ldr.w	r4, [sp], #4
   11cde:	4770      	bx	lr
    return context->GetTensor(context, tensor_index);
   11ce0:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
   11ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
   11ce6:	4718      	bx	r3

00011ce8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0>:
  if (index >= 0 && index < max_size) {
   11ce8:	2800      	cmp	r0, #0
   11cea:	db04      	blt.n	11cf6 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0+0xe>
   11cec:	4288      	cmp	r0, r1
   11cee:	da02      	bge.n	11cf6 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0+0xe>
    const int tensor_index = tensor_indices[index];
   11cf0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   11cf4:	4770      	bx	lr
  return -1;
   11cf6:	f04f 30ff 	mov.w	r0, #4294967295
}
   11cfa:	4770      	bx	lr

00011cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
   11cfc:	6809      	ldr	r1, [r1, #0]
                             const TfLiteNode* node, int index) {
   11cfe:	b508      	push	{r3, lr}
   11d00:	4603      	mov	r3, r0
   11d02:	4610      	mov	r0, r2
  const int tensor_index = ValidateTensorIndexing(
   11d04:	1d0a      	adds	r2, r1, #4
   11d06:	6809      	ldr	r1, [r1, #0]
   11d08:	f7ff ffee 	bl	11ce8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0>
  if (tensor_index < 0) {
   11d0c:	1e01      	subs	r1, r0, #0
   11d0e:	db04      	blt.n	11d1a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x1e>
  return GetTensorAtIndex(context, tensor_index);
   11d10:	4618      	mov	r0, r3
}
   11d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return GetTensorAtIndex(context, tensor_index);
   11d16:	f7ff bfdb 	b.w	11cd0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   11d1a:	2000      	movs	r0, #0
   11d1c:	bd08      	pop	{r3, pc}

00011d1e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
      context, index, node->outputs->size, node->outputs->data);
   11d1e:	6849      	ldr	r1, [r1, #4]
                        int index) {
   11d20:	b508      	push	{r3, lr}
   11d22:	4603      	mov	r3, r0
   11d24:	4610      	mov	r0, r2
  const int tensor_index = ValidateTensorIndexing(
   11d26:	1d0a      	adds	r2, r1, #4
   11d28:	6809      	ldr	r1, [r1, #0]
   11d2a:	f7ff ffdd 	bl	11ce8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.isra.0>
  if (tensor_index < 0) {
   11d2e:	1e01      	subs	r1, r0, #0
   11d30:	db04      	blt.n	11d3c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1e>
  return GetTensorAtIndex(context, tensor_index);
   11d32:	4618      	mov	r0, r3
}
   11d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return GetTensorAtIndex(context, tensor_index);
   11d38:	f7ff bfca 	b.w	11cd0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   11d3c:	2000      	movs	r0, #0
   11d3e:	bd08      	pop	{r3, pc}

00011d40 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  return GetInput(context, node, index);
   11d40:	f7ff bfdc 	b.w	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>

00011d44 <_ZN6tflite12RuntimeShapeD1Ev>:
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
    if (size_ > kMaxSmallSize) {
   11d44:	6803      	ldr	r3, [r0, #0]
   11d46:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   11d48:	b510      	push	{r4, lr}
   11d4a:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   11d4c:	dd03      	ble.n	11d56 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
   11d4e:	6840      	ldr	r0, [r0, #4]
   11d50:	b108      	cbz	r0, 11d56 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   11d52:	f004 f901 	bl	15f58 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
   11d56:	4620      	mov	r0, r4
   11d58:	bd10      	pop	{r4, pc}

00011d5a <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32_t DimensionsCount() const { return size_; }
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   11d5a:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
   11d5c:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   11d5e:	da01      	bge.n	11d64 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   11d60:	f004 f972 	bl	16048 <abort>
    TFLITE_DCHECK_LT(i, size_);
   11d64:	6803      	ldr	r3, [r0, #0]
   11d66:	428b      	cmp	r3, r1
   11d68:	ddfa      	ble.n	11d60 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   11d6a:	2b05      	cmp	r3, #5
   11d6c:	bfcb      	itete	gt
   11d6e:	6843      	ldrgt	r3, [r0, #4]
   11d70:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   11d74:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   11d78:	6840      	ldrle	r0, [r0, #4]
  }
   11d7a:	bd08      	pop	{r3, pc}

00011d7c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   11d7c:	b570      	push	{r4, r5, r6, lr}
   11d7e:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   11d80:	b911      	cbnz	r1, 11d88 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   11d82:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   11d84:	4620      	mov	r0, r4
   11d86:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   11d88:	688d      	ldr	r5, [r1, #8]
   11d8a:	f855 3b04 	ldr.w	r3, [r5], #4
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
   11d8e:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   11d90:	2b05      	cmp	r3, #5
   11d92:	ea4f 0683 	mov.w	r6, r3, lsl #2
   11d96:	dc05      	bgt.n	11da4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11d98:	1d20      	adds	r0, r4, #4
  }

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    Resize(dimensions_count);
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   11d9a:	4632      	mov	r2, r6
   11d9c:	4629      	mov	r1, r5
   11d9e:	f004 f95a 	bl	16056 <memcpy>
  }
   11da2:	e7ef      	b.n	11d84 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32_t[dimensions_count];
   11da4:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   11da8:	4283      	cmp	r3, r0
   11daa:	bfb4      	ite	lt
   11dac:	4630      	movlt	r0, r6
   11dae:	f04f 30ff 	movge.w	r0, #4294967295
   11db2:	f004 f8e4 	bl	15f7e <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11db6:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   11db8:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11dba:	2b05      	cmp	r3, #5
   11dbc:	dced      	bgt.n	11d9a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   11dbe:	e7eb      	b.n	11d98 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

00011dc0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
                                             int index) {
   11dc0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   11dc2:	b908      	cbnz	r0, 11dc8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   11dc4:	f004 f940 	bl	16048 <abort>
  TFLITE_DCHECK(node != nullptr);
   11dc8:	2900      	cmp	r1, #0
   11dca:	d0fb      	beq.n	11dc4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   11dcc:	6809      	ldr	r1, [r1, #0]
   11dce:	6d43      	ldr	r3, [r0, #84]	; 0x54
   11dd0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
   11dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
   11dd8:	6851      	ldr	r1, [r2, #4]
   11dda:	4718      	bx	r3

00011ddc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
                                       const TfLiteNode* node, int index) {
   11ddc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   11dde:	b908      	cbnz	r0, 11de4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   11de0:	f004 f932 	bl	16048 <abort>
  TFLITE_DCHECK(node != nullptr);
   11de4:	2900      	cmp	r1, #0
   11de6:	d0fb      	beq.n	11de0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   11de8:	6849      	ldr	r1, [r1, #4]
   11dea:	6d43      	ldr	r3, [r0, #84]	; 0x54
   11dec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
   11df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
   11df4:	6851      	ldr	r1, [r2, #4]
   11df6:	4718      	bx	r3

00011df8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
   11df8:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11dfa:	6801      	ldr	r1, [r0, #0]
   11dfc:	2905      	cmp	r1, #5
   11dfe:	bfcc      	ite	gt
   11e00:	6843      	ldrgt	r3, [r0, #4]
   11e02:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
   11e04:	2200      	movs	r2, #0
    int buffer_size = 1;
   11e06:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   11e08:	428a      	cmp	r2, r1
   11e0a:	da04      	bge.n	11e16 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   11e0c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   11e10:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   11e12:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   11e14:	e7f8      	b.n	11e08 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
   11e16:	bd10      	pop	{r4, pc}

00011e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   11e18:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   11e1a:	6804      	ldr	r4, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   11e1c:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   11e1e:	2c04      	cmp	r4, #4
   11e20:	d001      	beq.n	11e26 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   11e22:	f004 f911 	bl	16048 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   11e26:	2900      	cmp	r1, #0
   11e28:	dbfb      	blt.n	11e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   11e2a:	6844      	ldr	r4, [r0, #4]
   11e2c:	428c      	cmp	r4, r1
   11e2e:	ddf8      	ble.n	11e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   11e30:	2a00      	cmp	r2, #0
   11e32:	dbf6      	blt.n	11e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   11e34:	6884      	ldr	r4, [r0, #8]
   11e36:	4294      	cmp	r4, r2
   11e38:	ddf3      	ble.n	11e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   11e3a:	2b00      	cmp	r3, #0
   11e3c:	dbf1      	blt.n	11e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   11e3e:	68c6      	ldr	r6, [r0, #12]
   11e40:	429e      	cmp	r6, r3
   11e42:	ddee      	ble.n	11e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   11e44:	2d00      	cmp	r5, #0
   11e46:	dbec      	blt.n	11e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   11e48:	6900      	ldr	r0, [r0, #16]
   11e4a:	42a8      	cmp	r0, r5
   11e4c:	dde9      	ble.n	11e22 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   11e4e:	fb01 2204 	mla	r2, r1, r4, r2
   11e52:	fb06 3302 	mla	r3, r6, r2, r3
}
   11e56:	fb00 5003 	mla	r0, r0, r3, r5
   11e5a:	bd70      	pop	{r4, r5, r6, pc}

00011e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
   11e5c:	b570      	push	{r4, r5, r6, lr}
   11e5e:	4615      	mov	r5, r2
   11e60:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   11e62:	f7ff ff7a 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
   11e66:	4631      	mov	r1, r6
   11e68:	4604      	mov	r4, r0
   11e6a:	4628      	mov	r0, r5
   11e6c:	f7ff ff75 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
   11e70:	4284      	cmp	r4, r0
   11e72:	d001      	beq.n	11e78 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   11e74:	f004 f8e8 	bl	16048 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
   11e78:	bd70      	pop	{r4, r5, r6, pc}

00011e7a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   11e7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   11e7c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   11e7e:	b90b      	cbnz	r3, 11e84 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   11e80:	f004 f8e2 	bl	16048 <abort>
}
   11e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   11e88:	2138      	movs	r1, #56	; 0x38
   11e8a:	4718      	bx	r3

00011e8c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  if (stride == 0) return 0;
   11e8c:	b123      	cbz	r3, 11e98 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  switch (padding) {
   11e8e:	2801      	cmp	r0, #1
   11e90:	d004      	beq.n	11e9c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>
   11e92:	2802      	cmp	r0, #2
   11e94:	d007      	beq.n	11ea6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>
   11e96:	2300      	movs	r3, #0
}
   11e98:	4618      	mov	r0, r3
   11e9a:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   11e9c:	4419      	add	r1, r3
   11e9e:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
   11ea0:	fb91 f3f3 	sdiv	r3, r1, r3
   11ea4:	e7f8      	b.n	11e98 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   11ea6:	9800      	ldr	r0, [sp, #0]
   11ea8:	3a01      	subs	r2, #1
   11eaa:	4350      	muls	r0, r2
      return (image_size + stride - effective_filter_size) / stride;
   11eac:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   11eae:	3001      	adds	r0, #1
      return (image_size + stride - effective_filter_size) / stride;
   11eb0:	1a09      	subs	r1, r1, r0
   11eb2:	e7f5      	b.n	11ea0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x14>

00011eb4 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
  op_params.input_offset = -data.input_zero_point;
   11eb4:	6913      	ldr	r3, [r2, #16]
   11eb6:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   11eb8:	b570      	push	{r4, r5, r6, lr}
  op_params.input_offset = -data.input_zero_point;
   11eba:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   11ebc:	6953      	ldr	r3, [r2, #20]
   11ebe:	425b      	negs	r3, r3
   11ec0:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   11ec2:	6993      	ldr	r3, [r2, #24]
   11ec4:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   11ec6:	69d3      	ldr	r3, [r2, #28]
   11ec8:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   11eca:	6a13      	ldr	r3, [r2, #32]
                               const OpDataConv& data) {
   11ecc:	4615      	mov	r5, r2
  op_params.output_shift = -data.output_shift;
   11ece:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   11ed0:	4604      	mov	r4, r0
  op_params.output_shift = -data.output_shift;
   11ed2:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   11ed4:	7808      	ldrb	r0, [r1, #0]
                               const OpDataConv& data) {
   11ed6:	460e      	mov	r6, r1
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   11ed8:	f000 f8ad 	bl	12036 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
   11edc:	686b      	ldr	r3, [r5, #4]
   11ede:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   11ee0:	682b      	ldr	r3, [r5, #0]
   11ee2:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   11ee4:	68b3      	ldr	r3, [r6, #8]
   11ee6:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   11ee8:	6873      	ldr	r3, [r6, #4]
   11eea:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   11eec:	6973      	ldr	r3, [r6, #20]
   11eee:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   11ef0:	6933      	ldr	r3, [r6, #16]
   11ef2:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   11ef4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   11ef6:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   11ef8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   11efa:	7020      	strb	r0, [r4, #0]
  op_params.quantized_activation_max = data.output_activation_max;
   11efc:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   11efe:	4620      	mov	r0, r4
   11f00:	bd70      	pop	{r4, r5, r6, pc}

00011f02 <_ZN6tflite13GetReciprocalEiiPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
   11f02:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   11f04:	fab0 f380 	clz	r3, r0
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   11f08:	1ac9      	subs	r1, r1, r3
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
   11f0a:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   11f0c:	6011      	str	r1, [r2, #0]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
   11f0e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   11f12:	f7f4 fd47 	bl	69a4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return shifted_scale.raw();
}
   11f16:	bd08      	pop	{r3, pc}

00011f18 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   11f18:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   11f1a:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   11f1c:	b90b      	cbnz	r3, 11f22 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   11f1e:	f004 f893 	bl	16048 <abort>
}
   11f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   11f26:	2124      	movs	r1, #36	; 0x24
   11f28:	4718      	bx	r3

00011f2a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   11f2a:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   11f2c:	b538      	push	{r3, r4, r5, lr}
  const int dims_count = shape.DimensionsCount();
   11f2e:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   11f30:	db01      	blt.n	11f36 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   11f32:	42a1      	cmp	r1, r4
   11f34:	db01      	blt.n	11f3a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   11f36:	f004 f887 	bl	16048 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11f3a:	2c05      	cmp	r4, #5
   11f3c:	bfcc      	ite	gt
   11f3e:	6843      	ldrgt	r3, [r0, #4]
   11f40:	1d03      	addle	r3, r0, #4
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
   11f42:	2200      	movs	r2, #0
  int flat_size = 1;
   11f44:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   11f46:	4291      	cmp	r1, r2
   11f48:	bf18      	it	ne
   11f4a:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   11f4e:	f102 0201 	add.w	r2, r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   11f52:	bf08      	it	eq
   11f54:	2501      	moveq	r5, #1
  for (int i = 0; i < dims_count; ++i) {
   11f56:	42a2      	cmp	r2, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   11f58:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   11f5c:	dbf3      	blt.n	11f46 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
  }
  return flat_size;
}
   11f5e:	bd38      	pop	{r3, r4, r5, pc}

00011f60 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
  op_params.input_offset = -op_data.input_zero_point;
   11f60:	694a      	ldr	r2, [r1, #20]
   11f62:	4252      	negs	r2, r2
   11f64:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   11f66:	698a      	ldr	r2, [r1, #24]
   11f68:	4252      	negs	r2, r2
   11f6a:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   11f6c:	69ca      	ldr	r2, [r1, #28]
   11f6e:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   11f70:	680a      	ldr	r2, [r1, #0]
   11f72:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   11f74:	684a      	ldr	r2, [r1, #4]
   11f76:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   11f78:	688a      	ldr	r2, [r1, #8]
   11f7a:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   11f7c:	68ca      	ldr	r2, [r1, #12]
   11f7e:	6182      	str	r2, [r0, #24]
}
   11f80:	4770      	bx	lr

00011f82 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   11f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11f86:	b085      	sub	sp, #20
  if (data_type != kTfLiteFloat32) {
   11f88:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
   11f8a:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
   11f8e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   11f92:	4606      	mov	r6, r0
   11f94:	460f      	mov	r7, r1
   11f96:	461d      	mov	r5, r3
  if (data_type != kTfLiteFloat32) {
   11f98:	d027      	beq.n	11fea <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
   11f9a:	2200      	movs	r2, #0
   11f9c:	2300      	movs	r3, #0
   11f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   11fa2:	ab02      	add	r3, sp, #8
   11fa4:	e9cd 8300 	strd	r8, r3, [sp]
   11fa8:	464a      	mov	r2, r9
   11faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11fac:	4629      	mov	r1, r5
   11fae:	f7ef f9eb 	bl	1388 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   11fb2:	b9b8      	cbnz	r0, 11fe4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   11fb4:	1d21      	adds	r1, r4, #4
   11fb6:	4620      	mov	r0, r4
   11fb8:	ed9d 0b02 	vldr	d0, [sp, #8]
   11fbc:	f7f3 fc7a 	bl	58b4 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
   11fc0:	692b      	ldr	r3, [r5, #16]
   11fc2:	6163      	str	r3, [r4, #20]
    data->filter_zero_point = filter->params.zero_point;
   11fc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   11fc8:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
   11fca:	f8d8 3010 	ldr.w	r3, [r8, #16]
   11fce:	61e3      	str	r3, [r4, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
   11fd0:	f104 030c 	add.w	r3, r4, #12
   11fd4:	9300      	str	r3, [sp, #0]
   11fd6:	4642      	mov	r2, r8
   11fd8:	f104 0308 	add.w	r3, r4, #8
   11fdc:	4639      	mov	r1, r7
   11fde:	4630      	mov	r0, r6
   11fe0:	f7f3 fcfa 	bl	59d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
   11fe4:	b005      	add	sp, #20
   11fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
   11fea:	2000      	movs	r0, #0
   11fec:	e7fa      	b.n	11fe4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

00011fee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   11fee:	b570      	push	{r4, r5, r6, lr}
   11ff0:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   11ff2:	b109      	cbz	r1, 11ff8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
   11ff4:	684d      	ldr	r5, [r1, #4]
   11ff6:	b91d      	cbnz	r5, 12000 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
   11ff8:	2300      	movs	r3, #0
   11ffa:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   11ffc:	4620      	mov	r0, r4
   11ffe:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   12000:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
   12004:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   12006:	2b05      	cmp	r3, #5
   12008:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1200c:	dc05      	bgt.n	1201a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1200e:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   12010:	4632      	mov	r2, r6
   12012:	4629      	mov	r1, r5
   12014:	f004 f81f 	bl	16056 <memcpy>
  }
   12018:	e7f0      	b.n	11ffc <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
   1201a:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   1201e:	4283      	cmp	r3, r0
   12020:	bfb4      	ite	lt
   12022:	4630      	movlt	r0, r6
   12024:	f04f 30ff 	movge.w	r0, #4294967295
   12028:	f003 ffa9 	bl	15f7e <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1202c:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   1202e:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   12030:	2b05      	cmp	r3, #5
   12032:	dced      	bgt.n	12010 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
   12034:	e7eb      	b.n	1200e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

00012036 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   12036:	2801      	cmp	r0, #1
   12038:	d002      	beq.n	12040 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   1203a:	2802      	cmp	r0, #2
   1203c:	bf18      	it	ne
   1203e:	2000      	movne	r0, #0
  }
}
   12040:	4770      	bx	lr

00012042 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
   12042:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const int dims_count = shape.DimensionsCount();
   12046:	6807      	ldr	r7, [r0, #0]
                                   const RuntimeShape& check_shape_0) {
   12048:	4604      	mov	r4, r0
   1204a:	460d      	mov	r5, r1
   1204c:	4690      	mov	r8, r2
  for (int i = 0; i < dims_count; ++i) {
   1204e:	2600      	movs	r6, #0
   12050:	42be      	cmp	r6, r7
   12052:	da10      	bge.n	12076 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   12054:	42ae      	cmp	r6, r5
   12056:	d00c      	beq.n	12072 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   12058:	4631      	mov	r1, r6
   1205a:	4620      	mov	r0, r4
   1205c:	f7ff fe7d 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
   12060:	4631      	mov	r1, r6
   12062:	4681      	mov	r9, r0
   12064:	4640      	mov	r0, r8
   12066:	f7ff fe78 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
   1206a:	4581      	cmp	r9, r0
   1206c:	d001      	beq.n	12072 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   1206e:	f003 ffeb 	bl	16048 <abort>
  for (int i = 0; i < dims_count; ++i) {
   12072:	3601      	adds	r6, #1
   12074:	e7ec      	b.n	12050 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   12076:	2d00      	cmp	r5, #0
   12078:	dbf9      	blt.n	1206e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   1207a:	42bd      	cmp	r5, r7
   1207c:	daf7      	bge.n	1206e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1207e:	2f05      	cmp	r7, #5
   12080:	bfcc      	ite	gt
   12082:	6864      	ldrgt	r4, [r4, #4]
   12084:	3404      	addle	r4, #4
  int flat_size = 1;
   12086:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   12088:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   1208a:	429d      	cmp	r5, r3
   1208c:	bf18      	it	ne
   1208e:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   12092:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   12096:	bf08      	it	eq
   12098:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
   1209a:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   1209c:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   120a0:	dcf3      	bgt.n	1208a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
   120a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000120a6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   120a6:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   120a8:	2100      	movs	r1, #0
   120aa:	f7f4 fc55 	bl	6958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   120ae:	bd08      	pop	{r3, pc}

000120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   120b0:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   120b2:	f7f4 fc27 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   120b6:	bd08      	pop	{r3, pc}

000120b8 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   120b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   120ba:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   120bc:	b90b      	cbnz	r3, 120c2 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0xa>
   120be:	f003 ffc3 	bl	16048 <abort>
}
   120c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   120c6:	2124      	movs	r1, #36	; 0x24
   120c8:	4718      	bx	r3

000120ca <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8_t* input_data,
                        const RuntimeShape& output_shape,
                        uint8_t* output_data) {
   120ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120ce:	b097      	sub	sp, #92	; 0x5c
   120d0:	461f      	mov	r7, r3
   120d2:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   120d4:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   120d8:	429a      	cmp	r2, r3
                        uint8_t* output_data) {
   120da:	4604      	mov	r4, r0
   120dc:	460e      	mov	r6, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   120de:	dd01      	ble.n	120e4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   120e0:	f003 ffb2 	bl	16048 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   120e4:	680b      	ldr	r3, [r1, #0]
   120e6:	2b04      	cmp	r3, #4
   120e8:	d1fa      	bne.n	120e0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   120ea:	683b      	ldr	r3, [r7, #0]
   120ec:	2b04      	cmp	r3, #4
   120ee:	d1f7      	bne.n	120e0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   120f0:	2300      	movs	r3, #0
   120f2:	4619      	mov	r1, r3
   120f4:	463a      	mov	r2, r7
   120f6:	4630      	mov	r0, r6
   120f8:	f7ff feb0 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   120fc:	2303      	movs	r3, #3
   120fe:	4619      	mov	r1, r3
   12100:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   12102:	900b      	str	r0, [sp, #44]	; 0x2c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   12104:	4630      	mov	r0, r6
   12106:	f7ff fea9 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1210a:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1210c:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_height = input_shape.Dims(1);
   1210e:	4630      	mov	r0, r6
   12110:	f7ff fe23 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   12114:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   12116:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_width = input_shape.Dims(2);
   12118:	4630      	mov	r0, r6
   1211a:	f7ff fe1e 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1211e:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   12120:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
   12122:	4638      	mov	r0, r7
   12124:	f7ff fe19 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   12128:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1212a:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
   1212c:	4638      	mov	r0, r7
   1212e:	f7ff fe14 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   12132:	68e3      	ldr	r3, [r4, #12]
   12134:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
   12136:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   12138:	9010      	str	r0, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   1213a:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
   1213c:	2100      	movs	r1, #0
   1213e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12140:	4299      	cmp	r1, r3
   12142:	f280 8091 	bge.w	12268 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19e>
   12146:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1214a:	f8cd b014 	str.w	fp, [sp, #20]
   1214e:	9b05      	ldr	r3, [sp, #20]
   12150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12152:	4293      	cmp	r3, r2
   12154:	f280 8086 	bge.w	12264 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   12158:	2300      	movs	r3, #0
   1215a:	9304      	str	r3, [sp, #16]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1215c:	9306      	str	r3, [sp, #24]
   1215e:	9b06      	ldr	r3, [sp, #24]
   12160:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12162:	4293      	cmp	r3, r2
   12164:	da78      	bge.n	12258 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x18e>
        for (int channel = 0; channel < depth; ++channel) {
   12166:	2300      	movs	r3, #0
   12168:	9303      	str	r3, [sp, #12]
   1216a:	9b03      	ldr	r3, [sp, #12]
   1216c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1216e:	4293      	cmp	r3, r2
   12170:	da6a      	bge.n	12248 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   12172:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
          const int in_x_origin =
   12176:	9b04      	ldr	r3, [sp, #16]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   12178:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int in_x_origin =
   1217c:	eba3 0308 	sub.w	r3, r3, r8
   12180:	9309      	str	r3, [sp, #36]	; 0x24
          const int in_y_origin =
   12182:	ebab 0302 	sub.w	r3, fp, r2
   12186:	9308      	str	r3, [sp, #32]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   12188:	9b04      	ldr	r3, [sp, #16]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1218a:	9809      	ldr	r0, [sp, #36]	; 0x24
          const int filter_x_start = std::max(0, -in_x_origin);
   1218c:	eba8 0803 	sub.w	r8, r8, r3
              std::min(params.filter_width, input_width - in_x_origin);
   12190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12192:	eba3 0900 	sub.w	r9, r3, r0
   12196:	69a3      	ldr	r3, [r4, #24]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   12198:	9808      	ldr	r0, [sp, #32]
   1219a:	4599      	cmp	r9, r3
   1219c:	bfa8      	it	ge
   1219e:	4699      	movge	r9, r3
   121a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   121a2:	f8cd 901c 	str.w	r9, [sp, #28]
   121a6:	1a18      	subs	r0, r3, r0
   121a8:	6963      	ldr	r3, [r4, #20]
   121aa:	4298      	cmp	r0, r3
   121ac:	bfa8      	it	ge
   121ae:	4618      	movge	r0, r3
   121b0:	9b08      	ldr	r3, [sp, #32]
   121b2:	900a      	str	r0, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
   121b4:	eba2 020b 	sub.w	r2, r2, fp
   121b8:	2a00      	cmp	r2, #0
   121ba:	bfa8      	it	ge
   121bc:	189b      	addge	r3, r3, r2
          int32_t acc = 0;
   121be:	2500      	movs	r5, #0
   121c0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   121c4:	461a      	mov	r2, r3
          int filter_count = 0;
   121c6:	46aa      	mov	sl, r5
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   121c8:	9b08      	ldr	r3, [sp, #32]
   121ca:	980a      	ldr	r0, [sp, #40]	; 0x28
   121cc:	1ad3      	subs	r3, r2, r3
   121ce:	4283      	cmp	r3, r0
   121d0:	da1e      	bge.n	12210 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x146>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   121d2:	46c1      	mov	r9, r8
   121d4:	9b07      	ldr	r3, [sp, #28]
   121d6:	4599      	cmp	r9, r3
   121d8:	da10      	bge.n	121fc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x132>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   121da:	9b03      	ldr	r3, [sp, #12]
   121dc:	9300      	str	r3, [sp, #0]
   121de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   121e0:	4630      	mov	r0, r6
   121e2:	444b      	add	r3, r9
   121e4:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   121e8:	f7ff fe16 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   121ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   121ee:	5c1b      	ldrb	r3, [r3, r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   121f0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   121f4:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   121f6:	f109 0901 	add.w	r9, r9, #1
   121fa:	e7eb      	b.n	121d4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x10a>
   121fc:	9b07      	ldr	r3, [sp, #28]
   121fe:	9807      	ldr	r0, [sp, #28]
   12200:	eba3 0308 	sub.w	r3, r3, r8
   12204:	4540      	cmp	r0, r8
   12206:	bfb8      	it	lt
   12208:	2300      	movlt	r3, #0
   1220a:	449a      	add	sl, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1220c:	3201      	adds	r2, #1
   1220e:	e7db      	b.n	121c8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xfe>
              filter_count++;
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
   12210:	eb05 056a 	add.w	r5, r5, sl, asr #1
   12214:	fbb5 fafa 	udiv	sl, r5, sl
   12218:	69e5      	ldr	r5, [r4, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1221a:	9b03      	ldr	r3, [sp, #12]
   1221c:	9300      	str	r3, [sp, #0]
   1221e:	45aa      	cmp	sl, r5
   12220:	bfb8      	it	lt
   12222:	46aa      	movlt	sl, r5
   12224:	6a25      	ldr	r5, [r4, #32]
   12226:	9107      	str	r1, [sp, #28]
   12228:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   1222c:	45aa      	cmp	sl, r5
   1222e:	4638      	mov	r0, r7
   12230:	bfa8      	it	ge
   12232:	46aa      	movge	sl, r5
   12234:	f7ff fdf0 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   12238:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   1223a:	9907      	ldr	r1, [sp, #28]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1223c:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   12240:	9b03      	ldr	r3, [sp, #12]
   12242:	3301      	adds	r3, #1
   12244:	9303      	str	r3, [sp, #12]
   12246:	e790      	b.n	1216a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa0>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   12248:	9b06      	ldr	r3, [sp, #24]
   1224a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1224c:	3301      	adds	r3, #1
   1224e:	9306      	str	r3, [sp, #24]
   12250:	9b04      	ldr	r3, [sp, #16]
   12252:	4413      	add	r3, r2
   12254:	9304      	str	r3, [sp, #16]
   12256:	e782      	b.n	1215e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x94>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   12258:	9b05      	ldr	r3, [sp, #20]
   1225a:	3301      	adds	r3, #1
   1225c:	9305      	str	r3, [sp, #20]
   1225e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12260:	449b      	add	fp, r3
   12262:	e774      	b.n	1214e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x84>
  for (int batch = 0; batch < batches; ++batch) {
   12264:	3101      	adds	r1, #1
   12266:	e76a      	b.n	1213e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x74>
              static_cast<uint8_t>(acc);
        }
      }
    }
  }
}
   12268:	b017      	add	sp, #92	; 0x5c
   1226a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001226e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   1226e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12272:	ed2d 8b04 	vpush	{d8-d9}
   12276:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   12278:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   1227a:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1227c:	2b04      	cmp	r3, #4
                    float* output_data) {
   1227e:	4604      	mov	r4, r0
   12280:	460d      	mov	r5, r1
   12282:	9211      	str	r2, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   12284:	d001      	beq.n	1228a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   12286:	f003 fedf 	bl	16048 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1228a:	6833      	ldr	r3, [r6, #0]
   1228c:	2b04      	cmp	r3, #4
   1228e:	d1fa      	bne.n	12286 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   12290:	2300      	movs	r3, #0
   12292:	4619      	mov	r1, r3
   12294:	4632      	mov	r2, r6
   12296:	4628      	mov	r0, r5
   12298:	f7ff fde0 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1229c:	2303      	movs	r3, #3
   1229e:	4619      	mov	r1, r3
   122a0:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   122a2:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   122a4:	4628      	mov	r0, r5
   122a6:	f7ff fdd9 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   122aa:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   122ac:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   122ae:	4628      	mov	r0, r5
   122b0:	f7ff fd53 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   122b4:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   122b6:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   122b8:	4628      	mov	r0, r5
   122ba:	f7ff fd4e 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   122be:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   122c0:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
   122c2:	4630      	mov	r0, r6
   122c4:	f7ff fd49 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   122c8:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   122ca:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   122cc:	4630      	mov	r0, r6
   122ce:	f7ff fd44 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   122d2:	68e3      	ldr	r3, [r4, #12]
   122d4:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   122d6:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   122d8:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   122da:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   122dc:	2100      	movs	r1, #0
   122de:	9b08      	ldr	r3, [sp, #32]
   122e0:	4299      	cmp	r1, r3
   122e2:	f280 8097 	bge.w	12414 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a6>
   122e6:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   122ea:	46da      	mov	sl, fp
   122ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122ee:	459a      	cmp	sl, r3
   122f0:	f280 808e 	bge.w	12410 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a2>
   122f4:	f04f 0800 	mov.w	r8, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   122f8:	46c1      	mov	r9, r8
   122fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   122fc:	4599      	cmp	r9, r3
   122fe:	f280 8082 	bge.w	12406 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x198>
        for (int channel = 0; channel < depth; ++channel) {
   12302:	2300      	movs	r3, #0
   12304:	9303      	str	r3, [sp, #12]
   12306:	9b03      	ldr	r3, [sp, #12]
   12308:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1230a:	4293      	cmp	r3, r2
   1230c:	da76      	bge.n	123fc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   1230e:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   12312:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int in_x_origin =
   12316:	eba8 0307 	sub.w	r3, r8, r7
   1231a:	9306      	str	r3, [sp, #24]
          const int in_y_origin =
   1231c:	ebab 0302 	sub.w	r3, fp, r2
   12320:	9304      	str	r3, [sp, #16]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   12322:	eba7 0308 	sub.w	r3, r7, r8
   12326:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   1232a:	9806      	ldr	r0, [sp, #24]
   1232c:	9305      	str	r3, [sp, #20]
   1232e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12330:	1a18      	subs	r0, r3, r0
   12332:	69a3      	ldr	r3, [r4, #24]
   12334:	4298      	cmp	r0, r3
   12336:	bfa8      	it	ge
   12338:	4618      	movge	r0, r3
   1233a:	900b      	str	r0, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   1233c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1233e:	9804      	ldr	r0, [sp, #16]
   12340:	1a18      	subs	r0, r3, r0
   12342:	6963      	ldr	r3, [r4, #20]
   12344:	4298      	cmp	r0, r3
   12346:	bfa8      	it	ge
   12348:	4618      	movge	r0, r3
          float max = std::numeric_limits<float>::lowest();
   1234a:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   1234e:	9315      	str	r3, [sp, #84]	; 0x54
   12350:	9b04      	ldr	r3, [sp, #16]
   12352:	9007      	str	r0, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
   12354:	eba2 020b 	sub.w	r2, r2, fp
   12358:	2a00      	cmp	r2, #0
   1235a:	bfa8      	it	ge
   1235c:	189b      	addge	r3, r3, r2
   1235e:	461a      	mov	r2, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   12360:	9b04      	ldr	r3, [sp, #16]
   12362:	9807      	ldr	r0, [sp, #28]
   12364:	1ad3      	subs	r3, r2, r3
   12366:	4298      	cmp	r0, r3
   12368:	dd22      	ble.n	123b0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x142>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1236a:	9f05      	ldr	r7, [sp, #20]
   1236c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1236e:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   12372:	429f      	cmp	r7, r3
   12374:	da1a      	bge.n	123ac <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13e>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   12376:	9b03      	ldr	r3, [sp, #12]
   12378:	9300      	str	r3, [sp, #0]
   1237a:	9b06      	ldr	r3, [sp, #24]
   1237c:	4628      	mov	r0, r5
   1237e:	18fb      	adds	r3, r7, r3
   12380:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
   12384:	f7ff fd48 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   12388:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1238a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
      if (__a < __b)
   1238e:	edd0 7a00 	vldr	s15, [r0]
   12392:	eef4 7ac8 	vcmpe.f32	s15, s16
      return __a;
   12396:	ab15      	add	r3, sp, #84	; 0x54
      if (__a < __b)
   12398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   1239c:	bfd8      	it	le
   1239e:	4618      	movle	r0, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   123a0:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
              max = std::max(
   123a4:	6803      	ldr	r3, [r0, #0]
   123a6:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   123a8:	3701      	adds	r7, #1
   123aa:	e7df      	b.n	1236c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfe>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   123ac:	3201      	adds	r2, #1
   123ae:	e7d7      	b.n	12360 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf2>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   123b0:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   123b4:	9b03      	ldr	r3, [sp, #12]
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   123b6:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   123ba:	9300      	str	r3, [sp, #0]
   123bc:	4652      	mov	r2, sl
   123be:	464b      	mov	r3, r9
   123c0:	4630      	mov	r0, r6
   123c2:	9104      	str	r1, [sp, #16]
   123c4:	f7ff fd28 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   123c8:	eeb4 9ac8 	vcmpe.f32	s18, s16
                                           params.float_activation_max);
   123cc:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   123d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
        for (int channel = 0; channel < depth; ++channel) {
   123d2:	9904      	ldr	r1, [sp, #16]
   123d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123d8:	bf58      	it	pl
   123da:	eeb0 8a49 	vmovpl.f32	s16, s18
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   123de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	return __b;
   123e2:	eef4 8a48 	vcmp.f32	s17, s16
        for (int channel = 0; channel < depth; ++channel) {
   123e6:	9b03      	ldr	r3, [sp, #12]
   123e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   123ec:	bf48      	it	mi
   123ee:	eeb0 8a68 	vmovmi.f32	s16, s17
   123f2:	3301      	adds	r3, #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   123f4:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   123f8:	9303      	str	r3, [sp, #12]
   123fa:	e784      	b.n	12306 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   123fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   123fe:	f109 0901 	add.w	r9, r9, #1
   12402:	4498      	add	r8, r3
   12404:	e779      	b.n	122fa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   12406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12408:	f10a 0a01 	add.w	sl, sl, #1
   1240c:	449b      	add	fp, r3
   1240e:	e76d      	b.n	122ec <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
  for (int batch = 0; batch < batches; ++batch) {
   12410:	3101      	adds	r1, #1
   12412:	e764      	b.n	122de <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x70>
        }
      }
    }
  }
}
   12414:	b017      	add	sp, #92	; 0x5c
   12416:	ecbd 8b04 	vpop	{d8-d9}
   1241a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001241e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
   1241e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12422:	b097      	sub	sp, #92	; 0x5c
   12424:	461e      	mov	r6, r3
   12426:	9208      	str	r2, [sp, #32]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   12428:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   1242c:	429a      	cmp	r2, r3
                    uint8_t* output_data) {
   1242e:	4604      	mov	r4, r0
   12430:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   12432:	dd01      	ble.n	12438 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   12434:	f003 fe08 	bl	16048 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   12438:	2a00      	cmp	r2, #0
   1243a:	dbfb      	blt.n	12434 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   1243c:	2bff      	cmp	r3, #255	; 0xff
   1243e:	dcf9      	bgt.n	12434 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   12440:	680b      	ldr	r3, [r1, #0]
   12442:	2b04      	cmp	r3, #4
   12444:	d1f6      	bne.n	12434 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   12446:	6833      	ldr	r3, [r6, #0]
   12448:	2b04      	cmp	r3, #4
   1244a:	d1f3      	bne.n	12434 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1244c:	2300      	movs	r3, #0
   1244e:	4619      	mov	r1, r3
   12450:	4632      	mov	r2, r6
   12452:	4628      	mov	r0, r5
   12454:	f7ff fd02 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   12458:	2303      	movs	r3, #3
   1245a:	4619      	mov	r1, r3
   1245c:	4632      	mov	r2, r6
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1245e:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   12460:	4628      	mov	r0, r5
   12462:	f7ff fcfb 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   12466:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   12468:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   1246a:	4628      	mov	r0, r5
   1246c:	f7ff fc75 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   12470:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   12472:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   12474:	4628      	mov	r0, r5
   12476:	f7ff fc70 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1247a:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1247c:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   1247e:	4630      	mov	r0, r6
   12480:	f7ff fc6b 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   12484:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   12486:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
   12488:	4630      	mov	r0, r6
   1248a:	f7ff fc66 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1248e:	68e3      	ldr	r3, [r4, #12]
   12490:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
   12492:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   12494:	9010      	str	r0, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   12496:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
   12498:	f04f 0b00 	mov.w	fp, #0
   1249c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1249e:	459b      	cmp	fp, r3
   124a0:	f280 808b 	bge.w	125ba <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
   124a4:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   124a8:	46d0      	mov	r8, sl
   124aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   124ac:	4598      	cmp	r8, r3
   124ae:	f280 8081 	bge.w	125b4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x196>
   124b2:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   124b4:	9703      	str	r7, [sp, #12]
   124b6:	9b03      	ldr	r3, [sp, #12]
   124b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   124ba:	4293      	cmp	r3, r2
   124bc:	da75      	bge.n	125aa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x18c>
        for (int channel = 0; channel < depth; ++channel) {
   124be:	2300      	movs	r3, #0
   124c0:	9302      	str	r3, [sp, #8]
   124c2:	9b02      	ldr	r3, [sp, #8]
   124c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   124c6:	4293      	cmp	r3, r2
   124c8:	da69      	bge.n	1259e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x180>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   124ca:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_x_origin =
   124ce:	1afa      	subs	r2, r7, r3
   124d0:	9206      	str	r2, [sp, #24]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   124d2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   124d6:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   124d8:	ebaa 0102 	sub.w	r1, sl, r2
   124dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   124e0:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   124e2:	9305      	str	r3, [sp, #20]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   124e4:	9906      	ldr	r1, [sp, #24]
   124e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   124e8:	1a58      	subs	r0, r3, r1
   124ea:	69a3      	ldr	r3, [r4, #24]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   124ec:	9904      	ldr	r1, [sp, #16]
   124ee:	4298      	cmp	r0, r3
   124f0:	bfa8      	it	ge
   124f2:	4618      	movge	r0, r3
   124f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   124f6:	9009      	str	r0, [sp, #36]	; 0x24
   124f8:	1a58      	subs	r0, r3, r1
   124fa:	6963      	ldr	r3, [r4, #20]
   124fc:	4298      	cmp	r0, r3
   124fe:	bfa8      	it	ge
   12500:	4618      	movge	r0, r3
          uint8_t max = 0;
   12502:	2300      	movs	r3, #0
          const int filter_y_start = std::max(0, -in_y_origin);
   12504:	eba2 020a 	sub.w	r2, r2, sl
          uint8_t max = 0;
   12508:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1250c:	460b      	mov	r3, r1
   1250e:	2a00      	cmp	r2, #0
   12510:	bfa8      	it	ge
   12512:	189b      	addge	r3, r3, r2
   12514:	900e      	str	r0, [sp, #56]	; 0x38
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   12516:	461a      	mov	r2, r3
   12518:	9b04      	ldr	r3, [sp, #16]
   1251a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1251c:	1ad3      	subs	r3, r2, r3
   1251e:	428b      	cmp	r3, r1
   12520:	da23      	bge.n	1256a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x14c>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   12522:	f8dd 9014 	ldr.w	r9, [sp, #20]
   12526:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   1252a:	9307      	str	r3, [sp, #28]
   1252c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1252e:	454b      	cmp	r3, r9
   12530:	dd19      	ble.n	12566 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x148>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   12532:	9b02      	ldr	r3, [sp, #8]
   12534:	9300      	str	r3, [sp, #0]
   12536:	9b06      	ldr	r3, [sp, #24]
   12538:	9213      	str	r2, [sp, #76]	; 0x4c
   1253a:	444b      	add	r3, r9
   1253c:	4659      	mov	r1, fp
   1253e:	4628      	mov	r0, r5
   12540:	f7ff fc6a 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   12544:	9a08      	ldr	r2, [sp, #32]
   12546:	9b08      	ldr	r3, [sp, #32]
   12548:	4403      	add	r3, r0
   1254a:	5c10      	ldrb	r0, [r2, r0]
   1254c:	9a07      	ldr	r2, [sp, #28]
   1254e:	4290      	cmp	r0, r2
      return __a;
   12550:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   12554:	bf98      	it	ls
   12556:	4613      	movls	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   12558:	f109 0901 	add.w	r9, r9, #1
              max = std::max(
   1255c:	781b      	ldrb	r3, [r3, #0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1255e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   12560:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   12564:	e7df      	b.n	12526 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x108>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   12566:	3201      	adds	r2, #1
   12568:	e7d6      	b.n	12518 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xfa>
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
          max = std::min<uint8_t>(max, params.quantized_activation_max);
   1256a:	f894 901c 	ldrb.w	r9, [r4, #28]
   1256e:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   12572:	4599      	cmp	r9, r3
   12574:	bf38      	it	cc
   12576:	4699      	movcc	r9, r3
   12578:	f894 3020 	ldrb.w	r3, [r4, #32]
   1257c:	4599      	cmp	r9, r3
   1257e:	bf28      	it	cs
   12580:	4699      	movcs	r9, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   12582:	9b02      	ldr	r3, [sp, #8]
   12584:	9300      	str	r3, [sp, #0]
   12586:	4642      	mov	r2, r8
   12588:	9b03      	ldr	r3, [sp, #12]
   1258a:	4659      	mov	r1, fp
   1258c:	4630      	mov	r0, r6
   1258e:	f7ff fc43 	bl	11e18 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   12592:	9b20      	ldr	r3, [sp, #128]	; 0x80
   12594:	f803 9000 	strb.w	r9, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   12598:	9b02      	ldr	r3, [sp, #8]
   1259a:	3301      	adds	r3, #1
   1259c:	e790      	b.n	124c0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1259e:	9b03      	ldr	r3, [sp, #12]
   125a0:	3301      	adds	r3, #1
   125a2:	9303      	str	r3, [sp, #12]
   125a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   125a6:	441f      	add	r7, r3
   125a8:	e785      	b.n	124b6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   125aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   125ac:	f108 0801 	add.w	r8, r8, #1
   125b0:	449a      	add	sl, r3
   125b2:	e77a      	b.n	124aa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8c>
  for (int batch = 0; batch < batches; ++batch) {
   125b4:	f10b 0b01 	add.w	fp, fp, #1
   125b8:	e770      	b.n	1249c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8_t>(max);
        }
      }
    }
  }
}
   125ba:	b017      	add	sp, #92	; 0x5c
   125bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000125c0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
                             OpData* data) {
   125c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c4:	ed2d 8b02 	vpush	{d8}
   125c8:	ee08 3a90 	vmov	s17, r3
  int height = SizeOfDimension(input, 1);
   125cc:	6893      	ldr	r3, [r2, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   125ce:	f8d1 b00c 	ldr.w	fp, [r1, #12]
  return t->dims->data[dim];
   125d2:	68df      	ldr	r7, [r3, #12]
   125d4:	f891 a000 	ldrb.w	sl, [r1]
                             OpData* data) {
   125d8:	b087      	sub	sp, #28
      params->stride_height, params->stride_width,
   125da:	e9d1 8901 	ldrd	r8, r9, [r1, #4]
                             OpData* data) {
   125de:	4616      	mov	r6, r2
   125e0:	689a      	ldr	r2, [r3, #8]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   125e2:	690b      	ldr	r3, [r1, #16]
   125e4:	9303      	str	r3, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   125e6:	2301      	movs	r3, #1
                             OpData* data) {
   125e8:	460d      	mov	r5, r1
   125ea:	9204      	str	r2, [sp, #16]
   125ec:	9300      	str	r3, [sp, #0]
   125ee:	465a      	mov	r2, fp
   125f0:	4643      	mov	r3, r8
   125f2:	4639      	mov	r1, r7
   125f4:	ee08 0a10 	vmov	s16, r0
   125f8:	4650      	mov	r0, sl
   125fa:	f7ff fc47 	bl	11e8c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   125fe:	2301      	movs	r3, #1
   12600:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   12604:	9005      	str	r0, [sp, #20]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   12606:	9300      	str	r3, [sp, #0]
   12608:	4650      	mov	r0, sl
   1260a:	464b      	mov	r3, r9
   1260c:	f7ff fc3e 	bl	11e8c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   12610:	9b03      	ldr	r3, [sp, #12]
   12612:	9c12      	ldr	r4, [sp, #72]	; 0x48
   12614:	3801      	subs	r0, #1
   12616:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
   1261a:	9b04      	ldr	r3, [sp, #16]
   1261c:	7d28      	ldrb	r0, [r5, #20]
   1261e:	eba9 0903 	sub.w	r9, r9, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
   12622:	9b05      	ldr	r3, [sp, #20]
   12624:	3b01      	subs	r3, #1
   12626:	fb08 b303 	mla	r3, r8, r3, fp
  int total_padding =
   1262a:	1bdb      	subs	r3, r3, r7
  total_padding = total_padding > 0 ? total_padding : 0;
   1262c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
   12630:	105a      	asrs	r2, r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   12632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  *offset = total_padding % 2;
   12636:	f003 0301 	and.w	r3, r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
   1263a:	60a3      	str	r3, [r4, #8]
   1263c:	f009 0301 	and.w	r3, r9, #1
   12640:	60e3      	str	r3, [r4, #12]
  if (input->type == kTfLiteFloat32) {
   12642:	7833      	ldrb	r3, [r6, #0]
      params->filter_width, params->padding, &out_height, &out_width);
   12644:	6022      	str	r2, [r4, #0]
  if (input->type == kTfLiteFloat32) {
   12646:	2b01      	cmp	r3, #1
  return total_padding / 2;
   12648:	ea4f 0269 	mov.w	r2, r9, asr #1
      params->filter_width, params->padding, &out_height, &out_width);
   1264c:	6062      	str	r2, [r4, #4]
  if (input->type == kTfLiteFloat32) {
   1264e:	d10e      	bne.n	1266e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xae>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
   12650:	f104 0220 	add.w	r2, r4, #32
   12654:	f104 011c 	add.w	r1, r4, #28
   12658:	f7f4 fa3c 	bl	6ad4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  data->buffer_idx = -1;
   1265c:	f04f 33ff 	mov.w	r3, #4294967295
   12660:	6123      	str	r3, [r4, #16]
  return kTfLiteOk;
   12662:	2000      	movs	r0, #0
}
   12664:	b007      	add	sp, #28
   12666:	ecbd 8b02 	vpop	{d8}
   1266a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1266e:	f104 0318 	add.w	r3, r4, #24
   12672:	9300      	str	r3, [sp, #0]
   12674:	4601      	mov	r1, r0
   12676:	ee18 2a90 	vmov	r2, s17
   1267a:	ee18 0a10 	vmov	r0, s16
   1267e:	f104 0314 	add.w	r3, r4, #20
   12682:	f7f3 f9a9 	bl	59d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   12686:	2800      	cmp	r0, #0
   12688:	d1ec      	bne.n	12664 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa4>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
   1268a:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1268e:	429a      	cmp	r2, r3
   12690:	dde4      	ble.n	1265c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x9c>
   12692:	f003 fcd9 	bl	16048 <abort>

00012696 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
   12696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1269a:	690f      	ldr	r7, [r1, #16]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
   1269c:	b08f      	sub	sp, #60	; 0x3c
   1269e:	4604      	mov	r4, r0
   126a0:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   126a2:	b90f      	cbnz	r7, 126a8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x12>
   126a4:	f003 fcd0 	bl	16048 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   126a8:	f8d1 9014 	ldr.w	r9, [r1, #20]
   126ac:	f1b9 0f00 	cmp.w	r9, #0
   126b0:	d0f8      	beq.n	126a4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   126b2:	2200      	movs	r2, #0
   126b4:	f7ff fb22 	bl	11cfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   126b8:	4629      	mov	r1, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   126ba:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   126bc:	2200      	movs	r2, #0
   126be:	4620      	mov	r0, r4
   126c0:	f7ff fb2d 	bl	11d1e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
   126c4:	9700      	str	r7, [sp, #0]
   126c6:	4603      	mov	r3, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   126c8:	4680      	mov	r8, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
   126ca:	4632      	mov	r2, r6
   126cc:	4649      	mov	r1, r9
   126ce:	4620      	mov	r0, r4
   126d0:	f7ff ff76 	bl	125c0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
   126d4:	4605      	mov	r5, r0
   126d6:	bb70      	cbnz	r0, 12736 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
  if (input->type == kTfLiteInt8) {
   126d8:	7833      	ldrb	r3, [r6, #0]
   126da:	2b09      	cmp	r3, #9
   126dc:	d12b      	bne.n	12736 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    RuntimeShape input_shape = GetTensorShape(input);
   126de:	4631      	mov	r1, r6
   126e0:	a802      	add	r0, sp, #8
   126e2:	f7ff fb4b 	bl	11d7c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   126e6:	9b02      	ldr	r3, [sp, #8]
   126e8:	2b04      	cmp	r3, #4
   126ea:	d1db      	bne.n	126a4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
    RuntimeShape output_shape = GetTensorShape(output);
   126ec:	4641      	mov	r1, r8
   126ee:	a808      	add	r0, sp, #32
   126f0:	f7ff fb44 	bl	11d7c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   126f4:	9b08      	ldr	r3, [sp, #32]
   126f6:	2b04      	cmp	r3, #4
   126f8:	d1d4      	bne.n	126a4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   126fa:	2303      	movs	r3, #3
   126fc:	4619      	mov	r1, r3
   126fe:	aa08      	add	r2, sp, #32
   12700:	a802      	add	r0, sp, #8
   12702:	f7ff fbab 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_width = output_shape.Dims(2);
   12706:	2102      	movs	r1, #2
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   12708:	4606      	mov	r6, r0
    const int output_width = output_shape.Dims(2);
   1270a:	a808      	add	r0, sp, #32
   1270c:	f7ff fb25 	bl	11d5a <_ZNK6tflite12RuntimeShape4DimsEi>
        arm_avgpool_s8_get_buffer_size(output_width, depth);
   12710:	4631      	mov	r1, r6
   12712:	f002 fa34 	bl	14b7e <arm_avgpool_s8_get_buffer_size>
    if (buffer_size > 0) {
   12716:	1e01      	subs	r1, r0, #0
   12718:	dd11      	ble.n	1273e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   1271a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1271c:	4620      	mov	r0, r4
   1271e:	f107 0210 	add.w	r2, r7, #16
   12722:	4798      	blx	r3
   12724:	4604      	mov	r4, r0
   12726:	b168      	cbz	r0, 12744 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xae>
    RuntimeShape output_shape = GetTensorShape(output);
   12728:	a808      	add	r0, sp, #32
   1272a:	f7ff fb0b 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = GetTensorShape(input);
   1272e:	a802      	add	r0, sp, #8
   12730:	f7ff fb08 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
   12734:	4625      	mov	r5, r4
}
   12736:	4628      	mov	r0, r5
   12738:	b00f      	add	sp, #60	; 0x3c
   1273a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      data->buffer_idx = -1;
   1273e:	f04f 33ff 	mov.w	r3, #4294967295
   12742:	613b      	str	r3, [r7, #16]
    RuntimeShape output_shape = GetTensorShape(output);
   12744:	a808      	add	r0, sp, #32
   12746:	f7ff fafd 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = GetTensorShape(input);
   1274a:	a802      	add	r0, sp, #8
   1274c:	f7ff fafa 	bl	11d44 <_ZN6tflite12RuntimeShapeD1Ev>
   12750:	e7f1      	b.n	12736 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

00012752 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   12752:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12754:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
   12756:	4605      	mov	r5, r0
   12758:	b908      	cbnz	r0, 1275e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0xc>
   1275a:	f003 fc75 	bl	16048 <abort>
  TFLITE_DCHECK(node != nullptr);
   1275e:	2900      	cmp	r1, #0
   12760:	d0fb      	beq.n	1275a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   12762:	680a      	ldr	r2, [r1, #0]
   12764:	6d43      	ldr	r3, [r0, #84]	; 0x54
   12766:	6851      	ldr	r1, [r2, #4]
   12768:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   1276a:	6872      	ldr	r2, [r6, #4]
   1276c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1276e:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
   12770:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   12772:	4628      	mov	r0, r5
   12774:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   12776:	a901      	add	r1, sp, #4
   12778:	4606      	mov	r6, r0
   1277a:	7a20      	ldrb	r0, [r4, #8]
   1277c:	f000 f8e4 	bl	12948 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   12780:	4605      	mov	r5, r0
   12782:	b998      	cbnz	r0, 127ac <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  input_bytes *= ElementCount(*input->dims);
   12784:	6860      	ldr	r0, [r4, #4]
   12786:	f000 f8fa 	bl	1297e <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   1278a:	9b01      	ldr	r3, [sp, #4]
  if (input->data.raw != output->data.raw) {
   1278c:	6822      	ldr	r2, [r4, #0]
  input_bytes *= ElementCount(*input->dims);
   1278e:	4358      	muls	r0, r3
  if (input->data.raw != output->data.raw) {
   12790:	6833      	ldr	r3, [r6, #0]
  input_bytes *= ElementCount(*input->dims);
   12792:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   12794:	429a      	cmp	r2, r3
   12796:	d009      	beq.n	127ac <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    for (size_t i = 0; i < input_bytes; ++i) {
   12798:	462b      	mov	r3, r5
   1279a:	9a01      	ldr	r2, [sp, #4]
   1279c:	429a      	cmp	r2, r3
   1279e:	d905      	bls.n	127ac <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
      output->data.raw[i] = input->data.raw[i];
   127a0:	6822      	ldr	r2, [r4, #0]
   127a2:	5cd1      	ldrb	r1, [r2, r3]
   127a4:	6832      	ldr	r2, [r6, #0]
   127a6:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   127a8:	3301      	adds	r3, #1
   127aa:	e7f6      	b.n	1279a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   127ac:	4628      	mov	r0, r5
   127ae:	b002      	add	sp, #8
   127b0:	bd70      	pop	{r4, r5, r6, pc}

000127b2 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   127b2:	11c3      	asrs	r3, r0, #7
   127b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
  int16_t base = lut[index];
   127b8:	b29b      	uxth	r3, r3
  int16_t offset = value & 0x7f;
   127ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  int16_t slope = lut[index + 1] - lut[index];
   127be:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   127c2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   127c6:	884b      	ldrh	r3, [r1, #2]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   127c8:	2140      	movs	r1, #64	; 0x40
  int16_t slope = lut[index + 1] - lut[index];
   127ca:	1a9b      	subs	r3, r3, r2
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   127cc:	fb13 1000 	smlabb	r0, r3, r0, r1
  return base + delta;
   127d0:	eb02 10e0 	add.w	r0, r2, r0, asr #7
}
   127d4:	b200      	sxth	r0, r0
   127d6:	4770      	bx	lr

000127d8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   127d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127dc:	b08d      	sub	sp, #52	; 0x34
   127de:	460c      	mov	r4, r1
   127e0:	9203      	str	r2, [sp, #12]
   127e2:	461a      	mov	r2, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
   127e4:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   127e8:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   127ea:	6983      	ldr	r3, [r0, #24]
   127ec:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   127ee:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   127f0:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   127f2:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   127f4:	4619      	mov	r1, r3
   127f6:	4620      	mov	r0, r4
   127f8:	9304      	str	r3, [sp, #16]
   127fa:	f7ff fc22 	bl	12042 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   127fe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   12802:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   12804:	4619      	mov	r1, r3
   12806:	4620      	mov	r0, r4
   12808:	f7ff fb28 	bl	11e5c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1280c:	2400      	movs	r4, #0
   1280e:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   12810:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   12812:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   12814:	9b02      	ldr	r3, [sp, #8]
   12816:	4598      	cmp	r8, r3
   12818:	da71      	bge.n	128fe <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   1281a:	9b03      	ldr	r3, [sp, #12]
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1281c:	f88d 901f 	strb.w	r9, [sp, #31]
   12820:	191f      	adds	r7, r3, r4
   12822:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   12824:	2200      	movs	r2, #0
   12826:	42aa      	cmp	r2, r5
   12828:	da0e      	bge.n	12848 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1282a:	460b      	mov	r3, r1
      if (__a < __b)
   1282c:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12830:	781e      	ldrb	r6, [r3, #0]
   12832:	4286      	cmp	r6, r0
      return __a;
   12834:	f10d 001f 	add.w	r0, sp, #31
   12838:	bf98      	it	ls
   1283a:	4603      	movls	r3, r0
   1283c:	3101      	adds	r1, #1
   1283e:	781b      	ldrb	r3, [r3, #0]
   12840:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   12844:	3201      	adds	r2, #1
   12846:	e7ee      	b.n	12826 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   12848:	2600      	movs	r6, #0
   1284a:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   1284c:	46b2      	mov	sl, r6
   1284e:	45aa      	cmp	sl, r5
   12850:	da17      	bge.n	12882 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   12852:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12856:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32_t input_diff =
   1285a:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   1285c:	9a01      	ldr	r2, [sp, #4]
   1285e:	4282      	cmp	r2, r0
   12860:	dc0c      	bgt.n	1287c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   12862:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   12864:	9b00      	ldr	r3, [sp, #0]
   12866:	4659      	mov	r1, fp
   12868:	4098      	lsls	r0, r3
   1286a:	f7f4 f84b 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   1286e:	f7f5 fa91 	bl	7d94 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   12872:	210c      	movs	r1, #12
   12874:	f7f4 f870 	bl	6958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   12878:	9b04      	ldr	r3, [sp, #16]
   1287a:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   1287c:	f10a 0a01 	add.w	sl, sl, #1
   12880:	e7e5      	b.n	1284e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   12882:	4630      	mov	r0, r6
   12884:	aa08      	add	r2, sp, #32
   12886:	210c      	movs	r1, #12
   12888:	f7ff fb3b 	bl	11f02 <_ZN6tflite13GetReciprocalEiiPi>
   1288c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1288e:	4682      	mov	sl, r0
   12890:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   12892:	2300      	movs	r3, #0
   12894:	42ab      	cmp	r3, r5
   12896:	da2e      	bge.n	128f6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   12898:	f89d 101f 	ldrb.w	r1, [sp, #31]
   1289c:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32_t input_diff =
   128a0:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   128a2:	9901      	ldr	r1, [sp, #4]
   128a4:	4281      	cmp	r1, r0
   128a6:	dc23      	bgt.n	128f0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   128a8:	9304      	str	r3, [sp, #16]
   128aa:	9b00      	ldr	r3, [sp, #0]
   128ac:	4659      	mov	r1, fp
   128ae:	4098      	lsls	r0, r3
   128b0:	f7f4 f828 	bl	6904 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   128b4:	f7f5 fa6e 	bl	7d94 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   128b8:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   128ba:	4650      	mov	r0, sl
   128bc:	f7ff fbf8 	bl	120b0 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
   128c0:	9908      	ldr	r1, [sp, #32]
   128c2:	3117      	adds	r1, #23
   128c4:	f7f4 f848 	bl	6958 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   128c8:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   128ca:	4298      	cmp	r0, r3
	return __b;
   128cc:	bfcc      	ite	gt
   128ce:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   128d0:	a909      	addle	r1, sp, #36	; 0x24
   128d2:	930a      	str	r3, [sp, #40]	; 0x28
        const int32_t shifted_output =
   128d4:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   128d6:	6808      	ldr	r0, [r1, #0]
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
   128d8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
      if (__b < __a)
   128dc:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   128de:	2800      	cmp	r0, #0
	return __b;
   128e0:	bfb8      	it	lt
   128e2:	4611      	movlt	r1, r2
      if (__b < __a)
   128e4:	9b04      	ldr	r3, [sp, #16]
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   128e6:	6809      	ldr	r1, [r1, #0]
   128e8:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   128ea:	3301      	adds	r3, #1
   128ec:	3601      	adds	r6, #1
   128ee:	e7d1      	b.n	12894 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   128f0:	f886 9000 	strb.w	r9, [r6]
   128f4:	e7f9      	b.n	128ea <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   128f6:	f108 0801 	add.w	r8, r8, #1
   128fa:	442c      	add	r4, r5
   128fc:	e78a      	b.n	12814 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   128fe:	b00d      	add	sp, #52	; 0x34
   12900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012904 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   12904:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   12908:	ee30 0a27 	vadd.f32	s0, s0, s15
   1290c:	ee87 0a80 	vdiv.f32	s0, s15, s0
   12910:	4770      	bx	lr

00012912 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  { return __builtin_expf(__x); }
   12912:	f7fd b92d 	b.w	fb70 <expf>

00012916 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   12916:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   12918:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1291a:	b90b      	cbnz	r3, 12920 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
   1291c:	f003 fb94 	bl	16048 <abort>
}
   12920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   12924:	2138      	movs	r1, #56	; 0x38
   12926:	4718      	bx	r3

00012928 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
   12928:	b508      	push	{r3, lr}
   1292a:	ee10 0a10 	vmov	r0, s0
   1292e:	f7ed fd9b 	bl	468 <__aeabi_f2d>
   12932:	ec41 0b10 	vmov	d0, r0, r1
   12936:	f7fc ff67 	bl	f808 <round>
   1293a:	ec51 0b10 	vmov	r0, r1, d0
   1293e:	f7ee f8ad 	bl	a9c <__aeabi_d2f>
   12942:	ee00 0a10 	vmov	s0, r0
   12946:	bd08      	pop	{r3, pc}

00012948 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
   12948:	3801      	subs	r0, #1
   1294a:	280f      	cmp	r0, #15
   1294c:	d815      	bhi.n	1297a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
   1294e:	e8df f000 	tbb	[pc, r0]
   12952:	0c0c      	.short	0x0c0c
   12954:	10140e10 	.word	0x10140e10
   12958:	08100e08 	.word	0x08100e08
   1295c:	140e120e 	.word	0x140e120e
   12960:	0c14      	.short	0x0c14
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
   12962:	2302      	movs	r3, #2
      break;
    case kTfLiteFloat32:
      *size = sizeof(float);
   12964:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
   12966:	2000      	movs	r0, #0
      break;
   12968:	4770      	bx	lr
      *size = sizeof(float);
   1296a:	2304      	movs	r3, #4
   1296c:	e7fa      	b.n	12964 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double);
   1296e:	2308      	movs	r3, #8
   12970:	e7f8      	b.n	12964 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(uint8_t);
   12972:	2301      	movs	r3, #1
   12974:	e7f6      	b.n	12964 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double) * 2;
   12976:	2310      	movs	r3, #16
   12978:	e7f4      	b.n	12964 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
  return kTfLiteOk;
   1297a:	2001      	movs	r0, #1
}
   1297c:	4770      	bx	lr

0001297e <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   1297e:	b510      	push	{r4, lr}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   12980:	f850 4b04 	ldr.w	r4, [r0], #4
   12984:	2200      	movs	r2, #0
  int result = 1;
   12986:	2301      	movs	r3, #1
  for (int i = 0; i < dims.size; ++i) {
   12988:	4294      	cmp	r4, r2
   1298a:	dd04      	ble.n	12996 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   1298c:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   12990:	3201      	adds	r2, #1
    result *= dims.data[i];
   12992:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   12994:	e7f8      	b.n	12988 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   12996:	4618      	mov	r0, r3
   12998:	bd10      	pop	{r4, pc}

0001299a <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
   1299a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
   1299e:	2300      	movs	r3, #0
{
   129a0:	4688      	mov	r8, r1
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
   129a2:	f102 0c02 	add.w	ip, r2, #2
  for (i = 0; i < bitRevLen; )
   129a6:	4598      	cmp	r8, r3
   129a8:	d801      	bhi.n	129ae <arm_bitreversal_32+0x14>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
   129aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a = pBitRevTab[i    ] >> 2;
   129ae:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
   129b2:	f83c 4013 	ldrh.w	r4, [ip, r3, lsl #1]
     a = pBitRevTab[i    ] >> 2;
   129b6:	08ad      	lsrs	r5, r5, #2
     b = pBitRevTab[i + 1] >> 2;
   129b8:	08a4      	lsrs	r4, r4, #2
     tmp = pSrc[a];
   129ba:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
     pSrc[a] = pSrc[b];
   129be:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   129c2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
     tmp = pSrc[a];
   129c6:	00af      	lsls	r7, r5, #2
     pSrc[a] = pSrc[b];
   129c8:	00a6      	lsls	r6, r4, #2
     pSrc[b] = tmp;
   129ca:	f840 e024 	str.w	lr, [r0, r4, lsl #2]
     tmp = pSrc[a+1];
   129ce:	1d3d      	adds	r5, r7, #4
     pSrc[a+1] = pSrc[b+1];
   129d0:	1d34      	adds	r4, r6, #4
     tmp = pSrc[a+1];
   129d2:	5947      	ldr	r7, [r0, r5]
     pSrc[a+1] = pSrc[b+1];
   129d4:	5906      	ldr	r6, [r0, r4]
   129d6:	5146      	str	r6, [r0, r5]
    i += 2;
   129d8:	3302      	adds	r3, #2
     pSrc[b+1] = tmp;
   129da:	5107      	str	r7, [r0, r4]
    i += 2;
   129dc:	e7e3      	b.n	129a6 <arm_bitreversal_32+0xc>

000129de <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
   129de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   129e2:	4680      	mov	r8, r0
   129e4:	ed2d 8b02 	vpush	{d8}
  uint32_t    L  = S->fftLen;
   129e8:	f8b8 7000 	ldrh.w	r7, [r8]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
   129ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
  float32_t * p2 = p1 + L;
   129f0:	eb01 0987 	add.w	r9, r1, r7, lsl #2
{
   129f4:	4608      	mov	r0, r1

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
   129f6:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
   129f8:	08ff      	lsrs	r7, r7, #3
{
   129fa:	b083      	sub	sp, #12
   129fc:	4606      	mov	r6, r0
  pMid1 = p1 + L;
   129fe:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  pMid2 = p2 + L;
   12a02:	eb09 0481 	add.w	r4, r9, r1, lsl #2
   12a06:	464b      	mov	r3, r9
   12a08:	eb02 1707 	add.w	r7, r2, r7, lsl #4
  const float32_t * tw = (float32_t *) S->pTwiddle;
   12a0c:	4694      	mov	ip, r2
  for (l = L >> 2; l > 0; l-- )
   12a0e:	45bc      	cmp	ip, r7
   12a10:	f106 0610 	add.w	r6, r6, #16
   12a14:	f105 0510 	add.w	r5, r5, #16
   12a18:	f104 0410 	add.w	r4, r4, #16
   12a1c:	f103 0310 	add.w	r3, r3, #16
   12a20:	d110      	bne.n	12a44 <arm_cfft_radix8by2_f32+0x66>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
   12a22:	b289      	uxth	r1, r1
   12a24:	2302      	movs	r3, #2
   12a26:	9101      	str	r1, [sp, #4]
   12a28:	f7f5 fcae 	bl	8388 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   12a2c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   12a30:	9901      	ldr	r1, [sp, #4]
   12a32:	2302      	movs	r3, #2
   12a34:	4648      	mov	r0, r9
}
   12a36:	b003      	add	sp, #12
   12a38:	ecbd 8b02 	vpop	{d8}
   12a3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   12a40:	f7f5 bca2 	b.w	8388 <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
   12a44:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
   12a48:	ed16 6a04 	vldr	s12, [r6, #-16]
    t2[1] = p2[1];
   12a4c:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
   12a50:	ed16 4a03 	vldr	s8, [r6, #-12]
    t4[0] = pMid2[0];
   12a54:	ed54 6a04 	vldr	s13, [r4, #-16]
    t4[1] = pMid2[1];
   12a58:	ed54 4a03 	vldr	s9, [r4, #-12]
    t2[2] = p2[2];
   12a5c:	ed13 7a02 	vldr	s14, [r3, #-8]
    t2[3] = p2[3];
   12a60:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
   12a64:	ed55 2a03 	vldr	s5, [r5, #-12]
    t3[2] = pMid1[2];
   12a68:	ed15 3a02 	vldr	s6, [r5, #-8]
    t3[3] = pMid1[3];
   12a6c:	ed55 3a01 	vldr	s7, [r5, #-4]
    t4[2] = pMid2[2];
   12a70:	ed54 7a02 	vldr	s15, [r4, #-8]
    t4[3] = pMid2[3];
   12a74:	ed54 5a01 	vldr	s11, [r4, #-4]
    t1[2] = p1[2];
   12a78:	ed16 1a02 	vldr	s2, [r6, #-8]
    t3[0] = pMid1[0];
   12a7c:	ed15 2a04 	vldr	s4, [r5, #-16]
    t1[3] = p1[3];
   12a80:	ed56 1a01 	vldr	s3, [r6, #-4]
    *p1++ = t1[0] + t2[0];
   12a84:	ee36 8a00 	vadd.f32	s16, s12, s0
    t2[0] = t1[0] - t2[0];
   12a88:	ee36 6a40 	vsub.f32	s12, s12, s0
    *p1++ = t1[0] + t2[0];
   12a8c:	ed06 8a04 	vstr	s16, [r6, #-16]
    *p1++ = t1[1] + t2[1];
   12a90:	ee34 8a20 	vadd.f32	s16, s8, s1
    t2[1] = t1[1] - t2[1];
   12a94:	ee34 4a60 	vsub.f32	s8, s8, s1
    *p1++ = t1[1] + t2[1];
   12a98:	ed06 8a03 	vstr	s16, [r6, #-12]
    *p1++ = t1[2] + t2[2];
   12a9c:	ee31 8a07 	vadd.f32	s16, s2, s14
   12aa0:	f10c 0c10 	add.w	ip, ip, #16
   12aa4:	ed06 8a02 	vstr	s16, [r6, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
   12aa8:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
   12aac:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
   12ab0:	ee72 1a26 	vadd.f32	s3, s4, s13
    *p1++ = t1[3] + t2[3];    /* col 1 */
   12ab4:	ed06 8a01 	vstr	s16, [r6, #-4]
    *pMid1++ = t3[0] + t4[0];
   12ab8:	ed45 1a04 	vstr	s3, [r5, #-16]
    *pMid1++ = t3[1] + t4[1];
   12abc:	ee72 1aa4 	vadd.f32	s3, s5, s9
    t4[1] = t4[1] - t3[1];
   12ac0:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *pMid1++ = t3[1] + t4[1];
   12ac4:	ed45 1a03 	vstr	s3, [r5, #-12]
    *pMid1++ = t3[2] + t4[2];
   12ac8:	ee73 1a27 	vadd.f32	s3, s6, s15
    t4[2] = t4[2] - t3[2];
   12acc:	ee77 7ac3 	vsub.f32	s15, s15, s6
    *pMid1++ = t3[2] + t4[2];
   12ad0:	ed45 1a02 	vstr	s3, [r5, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   12ad4:	ee73 1aa5 	vadd.f32	s3, s7, s11
    t4[3] = t4[3] - t3[3];    /* for col 2 */
   12ad8:	ee75 5ae3 	vsub.f32	s11, s11, s7
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   12adc:	ed45 1a01 	vstr	s3, [r5, #-4]
    twI = *tw++;
   12ae0:	ed5c 3a03 	vldr	s7, [ip, #-12]
    twR = *tw++;
   12ae4:	ed1c 3a04 	vldr	s6, [ip, #-16]
    m1 = t2[1] * twI;
   12ae8:	ee64 2a23 	vmul.f32	s5, s8, s7
    *p2++ = m0 + m1;
   12aec:	ee46 2a03 	vmla.f32	s5, s12, s6
    m3 = t2[0] * twI;
   12af0:	ee26 6a23 	vmul.f32	s12, s12, s7
    *p2++ = m2 - m3;
   12af4:	ee14 6a03 	vnmls.f32	s12, s8, s6
    t4[0] = t4[0] - t3[0];
   12af8:	ee76 6ac2 	vsub.f32	s13, s13, s4
    *p2++ = m2 - m3;
   12afc:	ed03 6a03 	vstr	s12, [r3, #-12]
    m1 = t4[1] * twR;
   12b00:	ee24 6a83 	vmul.f32	s12, s9, s6
    *pMid2++ = m0 - m1;
   12b04:	ee16 6aa3 	vnmls.f32	s12, s13, s7
    m3 = t4[0] * twR;
   12b08:	ee66 6a83 	vmul.f32	s13, s13, s6
    *pMid2++ = m2 + m3;
   12b0c:	ee44 6aa3 	vmla.f32	s13, s9, s7
    *p2++ = m0 + m1;
   12b10:	ed43 2a04 	vstr	s5, [r3, #-16]
    *pMid2++ = m0 - m1;
   12b14:	ed04 6a04 	vstr	s12, [r4, #-16]
    *pMid2++ = m2 + m3;
   12b18:	ed44 6a03 	vstr	s13, [r4, #-12]
    twR = *tw++;
   12b1c:	ed1c 6a02 	vldr	s12, [ip, #-8]
    twI = *tw++;
   12b20:	ed5c 6a01 	vldr	s13, [ip, #-4]
    t2[2] = t1[2] - t2[2];
   12b24:	ee31 7a47 	vsub.f32	s14, s2, s14
    m1 = t2[3] * twI;
   12b28:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
   12b2c:	ee47 4a06 	vmla.f32	s9, s14, s12
    m3 = t2[2] * twI;
   12b30:	ee27 7a26 	vmul.f32	s14, s14, s13
    *p2++ = m2 - m3;
   12b34:	ee15 7a06 	vnmls.f32	s14, s10, s12
    *p2++ = m0 + m1;
   12b38:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
   12b3c:	ed03 7a01 	vstr	s14, [r3, #-4]
    m1 = t4[3] * twR;
   12b40:	ee25 7a86 	vmul.f32	s14, s11, s12
    *pMid2++ = m0 - m1;
   12b44:	ee17 7aa6 	vnmls.f32	s14, s15, s13
    m3 = t4[2] * twR;
   12b48:	ee67 7a86 	vmul.f32	s15, s15, s12
    *pMid2++ = m2 + m3;
   12b4c:	ee45 7aa6 	vmla.f32	s15, s11, s13
    *pMid2++ = m0 - m1;
   12b50:	ed04 7a02 	vstr	s14, [r4, #-8]
    *pMid2++ = m2 + m3;
   12b54:	ed44 7a01 	vstr	s15, [r4, #-4]
  for (l = L >> 2; l > 0; l-- )
   12b58:	e759      	b.n	12a0e <arm_cfft_radix8by2_f32+0x30>

00012b5a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
    uint32_t    L  = S->fftLen >> 1;
   12b5a:	8803      	ldrh	r3, [r0, #0]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
   12b5c:	edd1 7a00 	vldr	s15, [r1]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   12b60:	6842      	ldr	r2, [r0, #4]
    uint32_t    L  = S->fftLen >> 1;
   12b62:	085b      	lsrs	r3, r3, #1
{
   12b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t * p3 = p2 + L;
   12b68:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
    p1ap3_0 = p1[0] + p3[0];
   12b6c:	ed95 7a00 	vldr	s14, [r5]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
   12b70:	edd5 5a01 	vldr	s11, [r5, #4]
    p1ap3_0 = p1[0] + p3[0];
   12b74:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
   12b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
   12b7c:	ed91 7a01 	vldr	s14, [r1, #4]
    float32_t * p2 = p1 + L;
   12b80:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    p1ap3_1 = p1[1] + p3[1];
   12b84:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
   12b88:	ee77 5a65 	vsub.f32	s11, s14, s11

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   12b8c:	ed96 7a00 	vldr	s14, [r6]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   12b90:	edd6 3a01 	vldr	s7, [r6, #4]
{
   12b94:	ed2d 8b04 	vpush	{d8-d9}
    float32_t * p4 = p3 + L;
   12b98:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   12b9c:	edd4 4a00 	vldr	s9, [r4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   12ba0:	ed94 4a01 	vldr	s8, [r4, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12ba4:	ee37 5a06 	vadd.f32	s10, s14, s12
{
   12ba8:	b08f      	sub	sp, #60	; 0x3c
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12baa:	ee35 5a24 	vadd.f32	s10, s10, s9
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   12bae:	9202      	str	r2, [sp, #8]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12bb0:	ed81 5a00 	vstr	s10, [r1]
    L >>= 1;
   12bb4:	085a      	lsrs	r2, r3, #1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12bb6:	ed96 5a01 	vldr	s10, [r6, #4]
    L >>= 1;
   12bba:	920a      	str	r2, [sp, #40]	; 0x28
    p1ap3_0 = p1[0] + p3[0];
   12bbc:	460a      	mov	r2, r1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12bbe:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12bc0:	ed94 3a01 	vldr	s6, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12bc4:	9206      	str	r2, [sp, #24]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12bc6:	ee36 5a85 	vadd.f32	s10, s13, s10

    /* Twiddle factors are ones */
    *p2++ = t2[0];
   12bca:	4632      	mov	r2, r6
   12bcc:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12bce:	ee35 5a03 	vadd.f32	s10, s10, s6
    *p2++ = t2[0];
   12bd2:	920b      	str	r2, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
   12bd4:	462a      	mov	r2, r5
   12bd6:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12bd8:	ed81 5a01 	vstr	s10, [r1, #4]
    *p3++ = t3[0];
   12bdc:	920c      	str	r2, [sp, #48]	; 0x30
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   12bde:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p3++ = t3[1];
    *p4++ = t4[0];
   12be2:	4622      	mov	r2, r4
   12be4:	3208      	adds	r2, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   12be6:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p4++ = t4[0];
   12bea:	920d      	str	r2, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
   12bec:	9a02      	ldr	r2, [sp, #8]
    *p2++ = t2[0];
   12bee:	ed86 5a00 	vstr	s10, [r6]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   12bf2:	ee36 6a47 	vsub.f32	s12, s12, s14
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   12bf6:	ee35 5ac7 	vsub.f32	s10, s11, s14
    tw2 += twMod2;
   12bfa:	3208      	adds	r2, #8
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   12bfc:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   12c00:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   12c04:	ee37 7a25 	vadd.f32	s14, s14, s11
    tw2 += twMod2;
   12c08:	9207      	str	r2, [sp, #28]
    tw3 += twMod3;
   12c0a:	9a02      	ldr	r2, [sp, #8]
{
   12c0c:	9100      	str	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   12c0e:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   12c12:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   12c16:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   12c1a:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   12c1e:	ee37 7a64 	vsub.f32	s14, s14, s9
    tw3 += twMod3;
   12c22:	3210      	adds	r2, #16
    *p2++ = t2[1];
   12c24:	ed86 5a01 	vstr	s10, [r6, #4]
    *p3++ = t3[0];
   12c28:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
   12c2c:	edc5 6a01 	vstr	s13, [r5, #4]
    *p4++ = t4[0];
   12c30:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
   12c34:	ed84 7a01 	vstr	s14, [r4, #4]
    tw3 += twMod3;
   12c38:	9208      	str	r2, [sp, #32]
    tw4 += twMod4;
   12c3a:	9a02      	ldr	r2, [sp, #8]
   12c3c:	3218      	adds	r2, #24
   12c3e:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
   12c40:	085a      	lsrs	r2, r3, #1
   12c42:	3a02      	subs	r2, #2
   12c44:	ea4f 0852 	mov.w	r8, r2, lsr #1
   12c48:	9a07      	ldr	r2, [sp, #28]
   12c4a:	9204      	str	r2, [sp, #16]
   12c4c:	9a08      	ldr	r2, [sp, #32]
   12c4e:	9203      	str	r2, [sp, #12]
   12c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12c52:	9201      	str	r2, [sp, #4]
   12c54:	9a00      	ldr	r2, [sp, #0]
   12c56:	f8cd 8014 	str.w	r8, [sp, #20]
   12c5a:	f1a4 0a04 	sub.w	sl, r4, #4
   12c5e:	f102 0e10 	add.w	lr, r2, #16
{
   12c62:	4683      	mov	fp, r0
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
   12c64:	f1a6 0904 	sub.w	r9, r6, #4
    pEnd2 = p3 - 1;
   12c68:	1f2f      	subs	r7, r5, #4
    pEnd4 = pEnd3 + L;
   12c6a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   12c6e:	f106 0110 	add.w	r1, r6, #16
   12c72:	f105 0c10 	add.w	ip, r5, #16
   12c76:	f104 0210 	add.w	r2, r4, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
   12c7a:	9804      	ldr	r0, [sp, #16]
   12c7c:	ed5c 3a02 	vldr	s7, [ip, #-8]
   12c80:	ed1e 6a02 	vldr	s12, [lr, #-8]
   12c84:	ed11 7a01 	vldr	s14, [r1, #-4]
   12c88:	ed1c 3a01 	vldr	s6, [ip, #-4]
   12c8c:	ed12 4a01 	vldr	s8, [r2, #-4]
   12c90:	ed5e 7a01 	vldr	s15, [lr, #-4]
   12c94:	ed12 5a02 	vldr	s10, [r2, #-8]
   12c98:	3008      	adds	r0, #8
   12c9a:	ee76 4a63 	vsub.f32	s9, s12, s7
   12c9e:	9004      	str	r0, [sp, #16]
   12ca0:	9803      	ldr	r0, [sp, #12]
   12ca2:	ee77 6a24 	vadd.f32	s13, s14, s9
   12ca6:	3010      	adds	r0, #16
   12ca8:	9003      	str	r0, [sp, #12]
   12caa:	9801      	ldr	r0, [sp, #4]
   12cac:	ee77 5ac3 	vsub.f32	s11, s15, s6
   12cb0:	ee36 6a23 	vadd.f32	s12, s12, s7
   12cb4:	ee76 2ac4 	vsub.f32	s5, s13, s8
   12cb8:	ee77 7a83 	vadd.f32	s15, s15, s6
   12cbc:	ed51 6a02 	vldr	s13, [r1, #-8]
   12cc0:	3018      	adds	r0, #24
   12cc2:	ee35 2ae6 	vsub.f32	s4, s11, s13
   12cc6:	ee76 3a66 	vsub.f32	s7, s12, s13
   12cca:	ee37 3ac7 	vsub.f32	s6, s15, s14
   12cce:	ee76 5aa5 	vadd.f32	s11, s13, s11
   12cd2:	ee34 7ac7 	vsub.f32	s14, s9, s14
   12cd6:	ee76 6a86 	vadd.f32	s13, s13, s12
   12cda:	9001      	str	r0, [sp, #4]
   12cdc:	9805      	ldr	r0, [sp, #20]
   12cde:	ee32 2a05 	vadd.f32	s4, s4, s10
   12ce2:	ee73 3ac5 	vsub.f32	s7, s7, s10
   12ce6:	ee33 3a44 	vsub.f32	s6, s6, s8
   12cea:	ee37 7a04 	vadd.f32	s14, s14, s8
   12cee:	ee75 5ac5 	vsub.f32	s11, s11, s10
   12cf2:	ee76 6a85 	vadd.f32	s13, s13, s10
   12cf6:	f1a9 0908 	sub.w	r9, r9, #8
   12cfa:	3f08      	subs	r7, #8
   12cfc:	f1aa 0a08 	sub.w	sl, sl, #8
   12d00:	3b08      	subs	r3, #8
   12d02:	f10e 0e08 	add.w	lr, lr, #8
   12d06:	3108      	adds	r1, #8
   12d08:	f10c 0c08 	add.w	ip, ip, #8
   12d0c:	3208      	adds	r2, #8
   12d0e:	2800      	cmp	r0, #0
   12d10:	d174      	bne.n	12dfc <arm_cfft_radix8by4_f32+0x2a2>
   12d12:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d14:	9b06      	ldr	r3, [sp, #24]
   12d16:	2718      	movs	r7, #24
   12d18:	fb07 0708 	mla	r7, r7, r8, r0
   12d1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12d1e:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
   12d22:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
   12d26:	9b07      	ldr	r3, [sp, #28]
   12d28:	980c      	ldr	r0, [sp, #48]	; 0x30
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12d2a:	edc2 6a00 	vstr	s13, [r2]
   12d2e:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
   12d32:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
   12d36:	980d      	ldr	r0, [sp, #52]	; 0x34
   12d38:	9b08      	ldr	r3, [sp, #32]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12d3a:	eddc 6a01 	vldr	s13, [ip, #4]
   12d3e:	eb03 1308 	add.w	r3, r3, r8, lsl #4
   12d42:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
   12d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
   12d4a:	edd8 6a01 	vldr	s13, [r8, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   12d4e:	9800      	ldr	r0, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
   12d54:	edc2 7a01 	vstr	s15, [r2, #4]
    twI = tw2[1];
   12d58:	edd1 6a01 	vldr	s13, [r1, #4]
    twR = tw2[0];
   12d5c:	ed91 6a00 	vldr	s12, [r1]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   12d60:	9a02      	ldr	r2, [sp, #8]
   12d62:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   12d66:	9101      	str	r1, [sp, #4]
    m1 = t2[1] * twI;
   12d68:	ee66 7a82 	vmul.f32	s15, s13, s4
    m3 = t2[0] * twI;
   12d6c:	ee66 6aa2 	vmul.f32	s13, s13, s5
    *p2++ = m0 + m1;
   12d70:	ee46 7a22 	vmla.f32	s15, s12, s5
    *p2++ = m2 - m3;
   12d74:	ee56 6a02 	vnmls.f32	s13, s12, s4
    *p2++ = m0 + m1;
   12d78:	edcc 7a00 	vstr	s15, [ip]
    *p2++ = m2 - m3;
   12d7c:	edcc 6a01 	vstr	s13, [ip, #4]
    twI = tw3[1];
   12d80:	edd3 7a01 	vldr	s15, [r3, #4]
    twR = tw3[0];
   12d84:	ed93 6a00 	vldr	s12, [r3]
    m1 = t3[1] * twI;
   12d88:	ee67 6a83 	vmul.f32	s13, s15, s6
    m3 = t3[0] * twI;
   12d8c:	ee67 7aa3 	vmul.f32	s15, s15, s7
    *p3++ = m0 + m1;
   12d90:	ee46 6a23 	vmla.f32	s13, s12, s7
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   12d94:	2304      	movs	r3, #4
    *p3++ = m2 - m3;
   12d96:	ee56 7a03 	vnmls.f32	s15, s12, s6
    *p3++ = m0 + m1;
   12d9a:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
   12d9e:	edce 7a01 	vstr	s15, [lr, #4]
    twI = tw4[1];
   12da2:	edd7 7a01 	vldr	s15, [r7, #4]
    twR = tw4[0];
   12da6:	ed97 6a00 	vldr	s12, [r7]
    m1 = t4[1] * twI;
   12daa:	ee67 6aa5 	vmul.f32	s13, s15, s11
    *p4++ = m0 + m1;
   12dae:	ee46 6a07 	vmla.f32	s13, s12, s14
    m3 = t4[0] * twI;
   12db2:	ee27 7a87 	vmul.f32	s14, s15, s14
    *p4++ = m2 - m3;
   12db6:	ee16 7a25 	vnmls.f32	s14, s12, s11
    *p4++ = m0 + m1;
   12dba:	edc8 6a00 	vstr	s13, [r8]
    *p4++ = m2 - m3;
   12dbe:	ed88 7a01 	vstr	s14, [r8, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   12dc2:	f7f5 fae1 	bl	8388 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
   12dc6:	9901      	ldr	r1, [sp, #4]
   12dc8:	f8db 2004 	ldr.w	r2, [fp, #4]
   12dcc:	9100      	str	r1, [sp, #0]
   12dce:	4630      	mov	r0, r6
   12dd0:	2304      	movs	r3, #4
   12dd2:	f7f5 fad9 	bl	8388 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
   12dd6:	f8db 2004 	ldr.w	r2, [fp, #4]
   12dda:	9900      	ldr	r1, [sp, #0]
   12ddc:	4628      	mov	r0, r5
   12dde:	2304      	movs	r3, #4
   12de0:	f7f5 fad2 	bl	8388 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   12de4:	f8db 2004 	ldr.w	r2, [fp, #4]
   12de8:	9900      	ldr	r1, [sp, #0]
   12dea:	2304      	movs	r3, #4
   12dec:	4620      	mov	r0, r4
}
   12dee:	b00f      	add	sp, #60	; 0x3c
   12df0:	ecbd 8b04 	vpop	{d8-d9}
   12df4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   12df8:	f7f5 bac6 	b.w	8388 <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   12dfc:	ed4e 6a04 	vstr	s13, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   12e00:	ed51 6a03 	vldr	s13, [r1, #-12]
      twR = *tw2++;
   12e04:	9804      	ldr	r0, [sp, #16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   12e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
   12e0a:	ed52 6a03 	vldr	s13, [r2, #-12]
   12e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
   12e12:	ed4e 7a03 	vstr	s15, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   12e16:	edda 7a01 	vldr	s15, [sl, #4]
   12e1a:	edd9 1a01 	vldr	s3, [r9, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   12e1e:	edd9 4a02 	vldr	s9, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   12e22:	edd3 0a02 	vldr	s1, [r3, #8]
   12e26:	ed97 6a02 	vldr	s12, [r7, #8]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   12e2a:	ed93 4a01 	vldr	s8, [r3, #4]
   12e2e:	ed97 8a01 	vldr	s16, [r7, #4]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   12e32:	ee31 5aa7 	vadd.f32	s10, s3, s15
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
   12e36:	ee71 1ae7 	vsub.f32	s3, s3, s15
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   12e3a:	edda 7a02 	vldr	s15, [sl, #8]
   12e3e:	ee74 8aa7 	vadd.f32	s17, s9, s15
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   12e42:	ee36 9a60 	vsub.f32	s18, s12, s1
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   12e46:	ee38 1ac6 	vsub.f32	s2, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   12e4a:	ee36 6a28 	vadd.f32	s12, s12, s17
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
   12e4e:	ee74 4ae7 	vsub.f32	s9, s9, s15
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   12e52:	ee36 6a20 	vadd.f32	s12, s12, s1
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   12e56:	ee75 7a48 	vsub.f32	s15, s10, s16
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   12e5a:	ed89 6a02 	vstr	s12, [r9, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   12e5e:	ed97 6a01 	vldr	s12, [r7, #4]
   12e62:	ee35 5a06 	vadd.f32	s10, s10, s12
   12e66:	ed93 6a01 	vldr	s12, [r3, #4]
   12e6a:	ee35 5a06 	vadd.f32	s10, s10, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   12e6e:	ee74 6ac8 	vsub.f32	s13, s9, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   12e72:	ed89 5a01 	vstr	s10, [r9, #4]
      twI = *tw2++;
   12e76:	ed10 6a01 	vldr	s12, [r0, #-4]
      twR = *tw2++;
   12e7a:	ed10 5a02 	vldr	s10, [r0, #-8]
      twR = tw3[0];
   12e7e:	9803      	ldr	r0, [sp, #12]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   12e80:	ee77 7ac4 	vsub.f32	s15, s15, s8
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   12e84:	ee76 6a84 	vadd.f32	s13, s13, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   12e88:	ee34 4a48 	vsub.f32	s8, s8, s16
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   12e8c:	ee39 0a21 	vadd.f32	s0, s18, s3
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   12e90:	ee74 4a64 	vsub.f32	s9, s8, s9
      m1 = t2[1] * twI;
   12e94:	ee26 4a02 	vmul.f32	s8, s12, s4
      *p2++ = m0 + m1;
   12e98:	ee05 4a22 	vmla.f32	s8, s10, s5
      m3 = t2[0] * twI;
   12e9c:	ee66 2a22 	vmul.f32	s5, s12, s5
      *p2++ = m0 + m1;
   12ea0:	ed01 4a04 	vstr	s8, [r1, #-16]
      m1 = t2[2] * twR;
   12ea4:	ee20 4a05 	vmul.f32	s8, s0, s10
      *pEnd2-- = m0 - m1;
   12ea8:	ee16 4a86 	vnmls.f32	s8, s13, s12
      m3 = t2[3] * twR;
   12eac:	ee66 6a85 	vmul.f32	s13, s13, s10
      *pEnd2-- = m2 + m3;
   12eb0:	ee40 6a06 	vmla.f32	s13, s0, s12
      *p2++ = m2 - m3;
   12eb4:	ee55 2a02 	vnmls.f32	s5, s10, s4
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   12eb8:	ee31 1a60 	vsub.f32	s2, s2, s1
      *p2++ = m2 - m3;
   12ebc:	ed41 2a03 	vstr	s5, [r1, #-12]
      *pEnd2-- = m0 - m1;
   12ec0:	ed87 4a02 	vstr	s8, [r7, #8]
      *pEnd2-- = m2 + m3;
   12ec4:	edc7 6a01 	vstr	s13, [r7, #4]
      twI = tw3[1];
   12ec8:	ed10 6a03 	vldr	s12, [r0, #-12]
      twR = tw3[0];
   12ecc:	ed50 6a04 	vldr	s13, [r0, #-16]
      twR = tw4[0];
   12ed0:	9801      	ldr	r0, [sp, #4]
      m1 = t3[1] * twI;
   12ed2:	ee26 5a03 	vmul.f32	s10, s12, s6
      *p3++ = m0 + m1;
   12ed6:	ee06 5aa3 	vmla.f32	s10, s13, s7
      m3 = t3[0] * twI;
   12eda:	ee66 3a23 	vmul.f32	s7, s12, s7
      *p3++ = m0 + m1;
   12ede:	ed0c 5a04 	vstr	s10, [ip, #-16]
      m1 =  t3[2] * twI;
   12ee2:	ee27 5a86 	vmul.f32	s10, s15, s12
      *p3++ = m2 - m3;
   12ee6:	ee56 3a83 	vnmls.f32	s7, s13, s6
      *pEnd3-- = m0 - m1;
   12eea:	ee11 5a66 	vnmla.f32	s10, s2, s13
      m2 =  t3[2] * twR;
   12eee:	ee67 6aa6 	vmul.f32	s13, s15, s13
      *pEnd3-- = m3 - m2;
   12ef2:	ee51 6a06 	vnmls.f32	s13, s2, s12
      *p3++ = m2 - m3;
   12ef6:	ed4c 3a03 	vstr	s7, [ip, #-12]
      *pEnd3-- = m0 - m1;
   12efa:	ed8a 5a02 	vstr	s10, [sl, #8]
      *pEnd3-- = m3 - m2;
   12efe:	edca 6a01 	vstr	s13, [sl, #4]
      twR = tw4[0];
   12f02:	ed50 7a06 	vldr	s15, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
   12f06:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
    for (l = (L - 2) >> 1; l > 0; l-- )
   12f0a:	9805      	ldr	r0, [sp, #20]
      m1 = t4[1] * twI;
   12f0c:	ee26 6aa5 	vmul.f32	s12, s13, s11
      *p4++ = m0 + m1;
   12f10:	ee07 6a87 	vmla.f32	s12, s15, s14
    for (l = (L - 2) >> 1; l > 0; l-- )
   12f14:	3801      	subs	r0, #1
   12f16:	9005      	str	r0, [sp, #20]
      m3 = t4[0] * twI;
   12f18:	ee26 7a87 	vmul.f32	s14, s13, s14
      *p4++ = m2 - m3;
   12f1c:	ee17 7aa5 	vnmls.f32	s14, s15, s11
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
   12f20:	ee79 1a61 	vsub.f32	s3, s18, s3
      *p4++ = m2 - m3;
   12f24:	ed02 7a03 	vstr	s14, [r2, #-12]
      m1 = t4[2] * twR;
   12f28:	ee21 7aa7 	vmul.f32	s14, s3, s15
      m3 = t4[3] * twR;
   12f2c:	ee64 7aa7 	vmul.f32	s15, s9, s15
      *pEnd4-- = m0 - m1;
   12f30:	ee14 7aa6 	vnmls.f32	s14, s9, s13
      *pEnd4-- = m2 + m3;
   12f34:	ee41 7aa6 	vmla.f32	s15, s3, s13
      *p4++ = m0 + m1;
   12f38:	ed02 6a04 	vstr	s12, [r2, #-16]
      *pEnd4-- = m0 - m1;
   12f3c:	ed83 7a02 	vstr	s14, [r3, #8]
      *pEnd4-- = m2 + m3;
   12f40:	edc3 7a01 	vstr	s15, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   12f44:	e699      	b.n	12c7a <arm_cfft_radix8by4_f32+0x120>

00012f46 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
   12f46:	2a01      	cmp	r2, #1
{
   12f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
   12f4c:	8805      	ldrh	r5, [r0, #0]
{
   12f4e:	4606      	mov	r6, r0
   12f50:	460c      	mov	r4, r1
   12f52:	4617      	mov	r7, r2
   12f54:	4698      	mov	r8, r3
  if (ifftFlag == 1U)
   12f56:	d03e      	beq.n	12fd6 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
   12f58:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   12f5c:	d049      	beq.n	12ff2 <arm_cfft_f32+0xac>
   12f5e:	d826      	bhi.n	12fae <arm_cfft_f32+0x68>
   12f60:	2d40      	cmp	r5, #64	; 0x40
   12f62:	d031      	beq.n	12fc8 <arm_cfft_f32+0x82>
   12f64:	d81c      	bhi.n	12fa0 <arm_cfft_f32+0x5a>
   12f66:	2d10      	cmp	r5, #16
   12f68:	d01c      	beq.n	12fa4 <arm_cfft_f32+0x5e>
   12f6a:	2d20      	cmp	r5, #32
   12f6c:	d041      	beq.n	12ff2 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
   12f6e:	f1b8 0f00 	cmp.w	r8, #0
   12f72:	d004      	beq.n	12f7e <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
   12f74:	68b2      	ldr	r2, [r6, #8]
   12f76:	89b1      	ldrh	r1, [r6, #12]
   12f78:	4620      	mov	r0, r4
   12f7a:	f7ff fd0e 	bl	1299a <arm_bitreversal_32>

  if (ifftFlag == 1U)
   12f7e:	2f01      	cmp	r7, #1
   12f80:	d10c      	bne.n	12f9c <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
   12f82:	ee07 5a90 	vmov	s15, r5
   12f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
   12f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   12f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
   12f92:	2300      	movs	r3, #0
   12f94:	42ab      	cmp	r3, r5
   12f96:	f104 0408 	add.w	r4, r4, #8
   12f9a:	d32f      	bcc.n	12ffc <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
   12f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
   12fa0:	2d80      	cmp	r5, #128	; 0x80
   12fa2:	d1e4      	bne.n	12f6e <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
   12fa4:	4621      	mov	r1, r4
   12fa6:	4630      	mov	r0, r6
   12fa8:	f7ff fd19 	bl	129de <arm_cfft_radix8by2_f32>
    break;
   12fac:	e7df      	b.n	12f6e <arm_cfft_f32+0x28>
  switch (L)
   12fae:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
   12fb2:	d01e      	beq.n	12ff2 <arm_cfft_f32+0xac>
   12fb4:	d805      	bhi.n	12fc2 <arm_cfft_f32+0x7c>
   12fb6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   12fba:	d005      	beq.n	12fc8 <arm_cfft_f32+0x82>
   12fbc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   12fc0:	e7ef      	b.n	12fa2 <arm_cfft_f32+0x5c>
   12fc2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   12fc6:	d1d2      	bne.n	12f6e <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
   12fc8:	6872      	ldr	r2, [r6, #4]
   12fca:	2301      	movs	r3, #1
   12fcc:	4629      	mov	r1, r5
   12fce:	4620      	mov	r0, r4
   12fd0:	f7f5 f9da 	bl	8388 <arm_radix8_butterfly_f32>
    break;
   12fd4:	e7cb      	b.n	12f6e <arm_cfft_f32+0x28>
    pSrc = p1 + 1;
   12fd6:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
   12fd8:	2300      	movs	r3, #0
   12fda:	42ab      	cmp	r3, r5
   12fdc:	f102 0208 	add.w	r2, r2, #8
   12fe0:	d2ba      	bcs.n	12f58 <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
   12fe2:	ed52 7a02 	vldr	s15, [r2, #-8]
   12fe6:	eef1 7a67 	vneg.f32	s15, s15
   12fea:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
   12fee:	3301      	adds	r3, #1
   12ff0:	e7f3      	b.n	12fda <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
   12ff2:	4621      	mov	r1, r4
   12ff4:	4630      	mov	r0, r6
   12ff6:	f7ff fdb0 	bl	12b5a <arm_cfft_radix8by4_f32>
    break;
   12ffa:	e7b8      	b.n	12f6e <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
   12ffc:	ed54 7a02 	vldr	s15, [r4, #-8]
   13000:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
   13004:	3301      	adds	r3, #1
      *pSrc++ *=   invL ;
   13006:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
   1300a:	ed54 7a01 	vldr	s15, [r4, #-4]
   1300e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   13012:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
   13016:	e7bd      	b.n	12f94 <arm_cfft_f32+0x4e>

00013018 <stage_rfft_f32>:
   twR = *pCoeff++ ;
   twI = *pCoeff++ ;


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
   13018:	edd1 7a00 	vldr	s15, [r1]

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
   1301c:	edd1 6a01 	vldr	s13, [r1, #4]
   k = (S->Sint).fftLen - 1;
   13020:	8803      	ldrh	r3, [r0, #0]
   t1b = xBI + xAI  ;
   13022:	ee76 6aa6 	vadd.f32	s13, s13, s13
   t1a = xBR + xAR  ;
   13026:	ee77 7aa7 	vadd.f32	s15, s15, s15
{
   1302a:	b510      	push	{r4, lr}

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
   1302c:	ee37 6aa6 	vadd.f32	s12, s15, s13
   *pOut++ = 0.5f * ( t1a - t1b );
   13030:	ee77 7ae6 	vsub.f32	s15, s15, s13
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
   13034:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( t1a + t1b );
   13036:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1303a:	ee26 6a07 	vmul.f32	s12, s12, s14
   *pOut++ = 0.5f * ( t1a - t1b );
   1303e:	ee67 7a87 	vmul.f32	s15, s15, s14
   k = (S->Sint).fftLen - 1;
   13042:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
   13044:	f104 0010 	add.w	r0, r4, #16
   13048:	f101 0410 	add.w	r4, r1, #16
   1304c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   13050:	ed82 6a00 	vstr	s12, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
   13054:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
   13058:	3908      	subs	r1, #8
   1305a:	3210      	adds	r2, #16
   1305c:	eef0 6a47 	vmov.f32	s13, s14
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
      xBR = pB[0];
   13060:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
   13064:	ed54 3a02 	vldr	s7, [r4, #-8]
      xBI = pB[1];
   13068:	ed91 4a03 	vldr	s8, [r1, #12]
      xAI = pA[1];
   1306c:	ed54 7a01 	vldr	s15, [r4, #-4]

      twR = *pCoeff++;
   13070:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
   13074:	ed50 4a01 	vldr	s9, [r0, #-4]

      t1a = xBR - xAR ;
   13078:	ee37 5a63 	vsub.f32	s10, s14, s7
      t1b = xBI + xAI ;
   1307c:	ee34 6a27 	vadd.f32	s12, s8, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   13080:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   13084:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   13088:	ee05 7a85 	vmla.f32	s14, s11, s10


      pA += 2;
      pB -= 2;
      k--;
   1308c:	3b01      	subs	r3, #1
   } while (k > 0);
   1308e:	2b00      	cmp	r3, #0
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   13090:	ee44 7a85 	vmla.f32	s15, s9, s10
   13094:	f100 0008 	add.w	r0, r0, #8
   13098:	f102 0208 	add.w	r2, r2, #8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   1309c:	ee04 7a86 	vmla.f32	s14, s9, s12
   130a0:	f104 0408 	add.w	r4, r4, #8
   130a4:	f1a1 0108 	sub.w	r1, r1, #8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   130a8:	ee45 7ac6 	vmls.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   130ac:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   130b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   130b4:	ed02 7a04 	vstr	s14, [r2, #-16]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   130b8:	ed42 7a03 	vstr	s15, [r2, #-12]
   } while (k > 0);
   130bc:	dcd0      	bgt.n	13060 <stage_rfft_f32+0x48>
}
   130be:	bd10      	pop	{r4, pc}

000130c0 <merge_rfft_f32>:
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
   130c0:	ed91 7a00 	vldr	s14, [r1]
   xAI = pA[1];
   130c4:	ed91 6a01 	vldr	s12, [r1, #4]
   k = (S->Sint).fftLen - 1;
   130c8:	8803      	ldrh	r3, [r0, #0]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
   130ca:	ee77 6a06 	vadd.f32	s13, s14, s12
   *pOut++ = 0.5f * ( xAR - xAI );
   130ce:	ee37 7a46 	vsub.f32	s14, s14, s12
   *pOut++ = 0.5f * ( xAR + xAI );
   130d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
   130d6:	b510      	push	{r4, lr}
   *pOut++ = 0.5f * ( xAR + xAI );
   130d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
   130dc:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( xAR + xAI );
   130de:	edc2 6a00 	vstr	s13, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
   130e2:	ee27 7a27 	vmul.f32	s14, s14, s15
   k = (S->Sint).fftLen - 1;
   130e6:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR - xAI );
   130e8:	ed82 7a01 	vstr	s14, [r2, #4]
   pCoeff += 2 ;
   130ec:	f104 0008 	add.w	r0, r4, #8
   130f0:	3208      	adds	r2, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
   130f2:	f101 0408 	add.w	r4, r1, #8
   130f6:	eef0 6a67 	vmov.f32	s13, s15
   pB  =  p + 2*k ;
   130fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3

   while (k > 0)
   130fe:	2b00      	cmp	r3, #0
   13100:	f102 0208 	add.w	r2, r2, #8
   13104:	f100 0008 	add.w	r0, r0, #8
   13108:	f104 0408 	add.w	r4, r4, #8
   1310c:	f1a1 0108 	sub.w	r1, r1, #8
   13110:	dc00      	bgt.n	13114 <merge_rfft_f32+0x54>
      pA += 2;
      pB -= 2;
      k--;
   }

}
   13112:	bd10      	pop	{r4, pc}
      xBR =   pB[0]    ;
   13114:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
   13118:	ed54 3a02 	vldr	s7, [r4, #-8]
      xBI =   pB[1]    ;
   1311c:	ed91 4a03 	vldr	s8, [r1, #12]
      xAI =  pA[1];
   13120:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
   13124:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
   13128:	ed50 4a01 	vldr	s9, [r0, #-4]
      t1a = xAR - xBR ;
   1312c:	ee33 5ac7 	vsub.f32	s10, s7, s14
      t1b = xAI + xBI ;
   13130:	ee34 6a27 	vadd.f32	s12, s8, s15
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   13134:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   13138:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   1313c:	ee05 7ac5 	vmls.f32	s14, s11, s10
      k--;
   13140:	3b01      	subs	r3, #1
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   13142:	ee44 7a85 	vmla.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   13146:	ee04 7ac6 	vmls.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   1314a:	ee45 7ac6 	vmls.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   1314e:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   13152:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   13156:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   1315a:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
   1315e:	e7ce      	b.n	130fe <merge_rfft_f32+0x3e>

00013160 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
   13160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13164:	4605      	mov	r5, r0
   13166:	460f      	mov	r7, r1
   13168:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
   1316a:	461c      	mov	r4, r3
   1316c:	b14b      	cbz	r3, 13182 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
   1316e:	f7ff ffa7 	bl	130c0 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   13172:	4622      	mov	r2, r4
   13174:	4631      	mov	r1, r6
   13176:	4628      	mov	r0, r5
   13178:	2301      	movs	r3, #1
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
   1317a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   1317e:	f7ff bee2 	b.w	12f46 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
   13182:	4622      	mov	r2, r4
   13184:	2301      	movs	r3, #1
   13186:	f7ff fede 	bl	12f46 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
   1318a:	4632      	mov	r2, r6
   1318c:	4639      	mov	r1, r7
   1318e:	4628      	mov	r0, r5
}
   13190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
   13194:	f7ff bf40 	b.w	13018 <stage_rfft_f32>

00013198 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
   13198:	b570      	push	{r4, r5, r6, lr}

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   1319a:	8843      	ldrh	r3, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
   1319c:	684c      	ldr	r4, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   1319e:	8801      	ldrh	r1, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
   131a0:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   131a2:	434b      	muls	r3, r1

#if defined (ARM_MATH_LOOPUNROLL)

    /* Loop unrolling: Compute 4 outputs at a time */
    blkCnt = numSamples >> 2U;
   131a4:	089d      	lsrs	r5, r3, #2

    while (blkCnt > 0U)
   131a6:	4610      	mov	r0, r2
   131a8:	4621      	mov	r1, r4
    blkCnt = numSamples >> 2U;
   131aa:	462e      	mov	r6, r5
    while (blkCnt > 0U)
   131ac:	3010      	adds	r0, #16
   131ae:	3110      	adds	r1, #16
   131b0:	b95e      	cbnz	r6, 131ca <arm_mat_scale_f32+0x32>
   131b2:	eb02 1205 	add.w	r2, r2, r5, lsl #4
      /* Decrement loop counter */
      blkCnt--;
    }

    /* Loop unrolling: Compute remaining outputs */
    blkCnt = numSamples % 0x4U;
   131b6:	f003 0303 	and.w	r3, r3, #3
   131ba:	eb04 1105 	add.w	r1, r4, r5, lsl #4
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
   131be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   131c2:	429a      	cmp	r2, r3
   131c4:	d11b      	bne.n	131fe <arm_mat_scale_f32+0x66>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   131c6:	2000      	movs	r0, #0
   131c8:	bd70      	pop	{r4, r5, r6, pc}
      *pOut++ = (*pIn++) * scale;
   131ca:	ed50 7a04 	vldr	s15, [r0, #-16]
   131ce:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
   131d2:	3e01      	subs	r6, #1
      *pOut++ = (*pIn++) * scale;
   131d4:	ed41 7a04 	vstr	s15, [r1, #-16]
      *pOut++ = (*pIn++) * scale;
   131d8:	ed50 7a03 	vldr	s15, [r0, #-12]
   131dc:	ee67 7a80 	vmul.f32	s15, s15, s0
   131e0:	ed41 7a03 	vstr	s15, [r1, #-12]
      *pOut++ = (*pIn++) * scale;
   131e4:	ed50 7a02 	vldr	s15, [r0, #-8]
   131e8:	ee67 7a80 	vmul.f32	s15, s15, s0
   131ec:	ed41 7a02 	vstr	s15, [r1, #-8]
      *pOut++ = (*pIn++) * scale;
   131f0:	ed50 7a01 	vldr	s15, [r0, #-4]
   131f4:	ee67 7a80 	vmul.f32	s15, s15, s0
   131f8:	ed41 7a01 	vstr	s15, [r1, #-4]
      blkCnt--;
   131fc:	e7d6      	b.n	131ac <arm_mat_scale_f32+0x14>
      *pOut++ = (*pIn++) * scale;
   131fe:	ecf2 7a01 	vldmia	r2!, {s15}
   13202:	ee67 7a80 	vmul.f32	s15, s15, s0
   13206:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
   1320a:	e7da      	b.n	131c2 <arm_mat_scale_f32+0x2a>

0001320c <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
   1320c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
   13210:	8847      	ldrh	r7, [r0, #2]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
   13212:	8802      	ldrh	r2, [r0, #0]
   13214:	684b      	ldr	r3, [r1, #4]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
   13216:	6844      	ldr	r4, [r0, #4]
      px = pOut + i;

#if defined (ARM_MATH_LOOPUNROLL)

      /* Loop unrolling: Compute 4 outputs at a time */
      col = nCols >> 2U;
   13218:	08be      	lsrs	r6, r7, #2
   1321a:	f007 0903 	and.w	r9, r7, #3
   1321e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
   13222:	0095      	lsls	r5, r2, #2
   13224:	eb09 0786 	add.w	r7, r9, r6, lsl #2
   13228:	9100      	str	r1, [sp, #0]
   1322a:	fb06 fc05 	mul.w	ip, r6, r5
   1322e:	00b9      	lsls	r1, r7, #2
   13230:	ea4f 1802 	mov.w	r8, r2, lsl #4
   13234:	ea4f 1a06 	mov.w	sl, r6, lsl #4
   13238:	00d2      	lsls	r2, r2, #3
   1323a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   1323e:	9101      	str	r1, [sp, #4]
      px = pOut + i;
   13240:	4618      	mov	r0, r3
      while (col > 0U)        /* column loop */
   13242:	18d7      	adds	r7, r2, r3
   13244:	4621      	mov	r1, r4
      col = nCols >> 2U;
   13246:	46b6      	mov	lr, r6
      while (col > 0U)        /* column loop */
   13248:	3110      	adds	r1, #16
   1324a:	f1be 0f00 	cmp.w	lr, #0
   1324e:	d10e      	bne.n	1326e <arm_mat_trans_f32+0x62>
   13250:	eb04 070a 	add.w	r7, r4, sl
   13254:	eb0c 0103 	add.w	r1, ip, r3
      col = nCols % 0x4U;
   13258:	4648      	mov	r0, r9
      while (col > 0U)
   1325a:	bb08      	cbnz	r0, 132a0 <arm_mat_trans_f32+0x94>
   1325c:	9901      	ldr	r1, [sp, #4]
   1325e:	440c      	add	r4, r1
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
   13260:	9900      	ldr	r1, [sp, #0]
   13262:	3304      	adds	r3, #4
   13264:	428b      	cmp	r3, r1
   13266:	d1eb      	bne.n	13240 <arm_mat_trans_f32+0x34>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   13268:	b003      	add	sp, #12
   1326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *px = *pIn++;
   1326e:	f851 bc10 	ldr.w	fp, [r1, #-16]
   13272:	f8c0 b000 	str.w	fp, [r0]
        *px = *pIn++;
   13276:	ed51 7a03 	vldr	s15, [r1, #-12]
   1327a:	eb00 0b05 	add.w	fp, r0, r5
   1327e:	edcb 7a00 	vstr	s15, [fp]
        *px = *pIn++;
   13282:	f851 bc08 	ldr.w	fp, [r1, #-8]
   13286:	f8c7 b000 	str.w	fp, [r7]
        *px = *pIn++;
   1328a:	ed51 7a01 	vldr	s15, [r1, #-4]
   1328e:	eb07 0b05 	add.w	fp, r7, r5
   13292:	edcb 7a00 	vstr	s15, [fp]
        px += nRows;
   13296:	4440      	add	r0, r8
        col--;
   13298:	f10e 3eff 	add.w	lr, lr, #4294967295
   1329c:	4447      	add	r7, r8
   1329e:	e7d3      	b.n	13248 <arm_mat_trans_f32+0x3c>
        *px = *pIn++;
   132a0:	f857 eb04 	ldr.w	lr, [r7], #4
   132a4:	f8c1 e000 	str.w	lr, [r1]
        col--;
   132a8:	3801      	subs	r0, #1
        px += nRows;
   132aa:	4429      	add	r1, r5
        col--;
   132ac:	e7d5      	b.n	1325a <arm_mat_trans_f32+0x4e>

000132ae <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
   132ae:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
   132b0:	edd0 7a00 	vldr	s15, [r0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
  /* Initialise index of maximum value. */
  index = 0U;

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = (blockSize - 1U) >> 2U;
   132b4:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
   132b6:	4606      	mov	r6, r0
  index = 0U;
   132b8:	2500      	movs	r5, #0
  out = *pSrc++;
   132ba:	3614      	adds	r6, #20
  blkCnt = (blockSize - 1U) >> 2U;
   132bc:	ea4f 0c94 	mov.w	ip, r4, lsr #2

  while (blkCnt > 0U)
   132c0:	f024 0e03 	bic.w	lr, r4, #3
  outIndex = 0U;
   132c4:	462f      	mov	r7, r5
  while (blkCnt > 0U)
   132c6:	4575      	cmp	r5, lr
   132c8:	d109      	bne.n	132de <arm_max_f32+0x30>
   132ca:	eb00 100c 	add.w	r0, r0, ip, lsl #4
   132ce:	3004      	adds	r0, #4
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = (blockSize - 1U) % 4U;
   132d0:	f004 0403 	and.w	r4, r4, #3
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   132d4:	bb94      	cbnz	r4, 1333c <arm_max_f32+0x8e>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
   132d6:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
   132da:	601f      	str	r7, [r3, #0]
}
   132dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    maxVal = *pSrc++;
   132de:	ed16 7a04 	vldr	s14, [r6, #-16]
    if (out < maxVal)
   132e2:	eef4 7ac7 	vcmpe.f32	s15, s14
   132e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal;
   132ea:	bf48      	it	mi
   132ec:	eef0 7a47 	vmovmi.f32	s15, s14
    maxVal = *pSrc++;
   132f0:	ed16 7a03 	vldr	s14, [r6, #-12]
    if (out < maxVal)
   132f4:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 1U;
   132f8:	bf48      	it	mi
   132fa:	1c6f      	addmi	r7, r5, #1
    if (out < maxVal)
   132fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal;
   13300:	bf48      	it	mi
   13302:	eef0 7a47 	vmovmi.f32	s15, s14
    maxVal = *pSrc++;
   13306:	ed16 7a02 	vldr	s14, [r6, #-8]
    if (out < maxVal)
   1330a:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 2U;
   1330e:	bf48      	it	mi
   13310:	1caf      	addmi	r7, r5, #2
    if (out < maxVal)
   13312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal;
   13316:	bf48      	it	mi
   13318:	eef0 7a47 	vmovmi.f32	s15, s14
    maxVal = *pSrc++;
   1331c:	ed16 7a01 	vldr	s14, [r6, #-4]
    if (out < maxVal)
   13320:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 3U;
   13324:	bf48      	it	mi
   13326:	1cef      	addmi	r7, r5, #3
    if (out < maxVal)
   13328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1332c:	f105 0504 	add.w	r5, r5, #4
      outIndex = index + 4U;
   13330:	bf44      	itt	mi
   13332:	462f      	movmi	r7, r5
      out = maxVal;
   13334:	eef0 7a47 	vmovmi.f32	s15, s14
    blkCnt--;
   13338:	3610      	adds	r6, #16
   1333a:	e7c4      	b.n	132c6 <arm_max_f32+0x18>
    maxVal = *pSrc++;
   1333c:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out < maxVal)
   13340:	eef4 7ac7 	vcmpe.f32	s15, s14
   13344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      outIndex = blockSize - blkCnt;
   13348:	bf44      	itt	mi
   1334a:	1b0f      	submi	r7, r1, r4
      out = maxVal;
   1334c:	eef0 7a47 	vmovmi.f32	s15, s14
    blkCnt--;
   13350:	3c01      	subs	r4, #1
   13352:	e7bf      	b.n	132d4 <arm_max_f32+0x26>

00013354 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
   13354:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
   13356:	edd0 7a00 	vldr	s15, [r0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
  /* Initialise index of maximum value. */
  index = 0U;

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = (blockSize - 1U) >> 2U;
   1335a:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
   1335c:	4606      	mov	r6, r0
  index = 0U;
   1335e:	2500      	movs	r5, #0
  out = *pSrc++;
   13360:	3614      	adds	r6, #20
  blkCnt = (blockSize - 1U) >> 2U;
   13362:	ea4f 0c94 	mov.w	ip, r4, lsr #2

  while (blkCnt > 0U)
   13366:	f024 0e03 	bic.w	lr, r4, #3
  outIndex = 0U;
   1336a:	462f      	mov	r7, r5
  while (blkCnt > 0U)
   1336c:	4575      	cmp	r5, lr
   1336e:	d109      	bne.n	13384 <arm_min_f32+0x30>
   13370:	eb00 100c 	add.w	r0, r0, ip, lsl #4
   13374:	3004      	adds	r0, #4
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = (blockSize - 1U) % 4U;
   13376:	f004 0403 	and.w	r4, r4, #3
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   1337a:	bb94      	cbnz	r4, 133e2 <arm_min_f32+0x8e>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
   1337c:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
   13380:	601f      	str	r7, [r3, #0]
}
   13382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    minVal = *pSrc++;
   13384:	ed16 7a04 	vldr	s14, [r6, #-16]
    if (out > minVal)
   13388:	eef4 7ac7 	vcmpe.f32	s15, s14
   1338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal;
   13390:	bfc8      	it	gt
   13392:	eef0 7a47 	vmovgt.f32	s15, s14
    minVal = *pSrc++;
   13396:	ed16 7a03 	vldr	s14, [r6, #-12]
    if (out > minVal)
   1339a:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 1U;
   1339e:	bfc8      	it	gt
   133a0:	1c6f      	addgt	r7, r5, #1
    if (out > minVal)
   133a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal;
   133a6:	bfc8      	it	gt
   133a8:	eef0 7a47 	vmovgt.f32	s15, s14
    minVal = *pSrc++;
   133ac:	ed16 7a02 	vldr	s14, [r6, #-8]
    if (out > minVal)
   133b0:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 2U;
   133b4:	bfc8      	it	gt
   133b6:	1caf      	addgt	r7, r5, #2
    if (out > minVal)
   133b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal;
   133bc:	bfc8      	it	gt
   133be:	eef0 7a47 	vmovgt.f32	s15, s14
    minVal = *pSrc++;
   133c2:	ed16 7a01 	vldr	s14, [r6, #-4]
    if (out > minVal)
   133c6:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 3U;
   133ca:	bfc8      	it	gt
   133cc:	1cef      	addgt	r7, r5, #3
    if (out > minVal)
   133ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   133d2:	f105 0504 	add.w	r5, r5, #4
      outIndex = index + 4U;
   133d6:	bfc4      	itt	gt
   133d8:	462f      	movgt	r7, r5
      out = minVal;
   133da:	eef0 7a47 	vmovgt.f32	s15, s14
    blkCnt--;
   133de:	3610      	adds	r6, #16
   133e0:	e7c4      	b.n	1336c <arm_min_f32+0x18>
    minVal = *pSrc++;
   133e2:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out > minVal)
   133e6:	eef4 7ac7 	vcmpe.f32	s15, s14
   133ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      outIndex = blockSize - blkCnt;
   133ee:	bfc4      	itt	gt
   133f0:	1b0f      	subgt	r7, r1, r4
      out = minVal;
   133f2:	eef0 7a47 	vmovgt.f32	s15, s14
    blkCnt--;
   133f6:	3c01      	subs	r4, #1
   133f8:	e7bf      	b.n	1337a <arm_min_f32+0x26>

000133fa <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
   133fa:	b410      	push	{r4}
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
   133fc:	9c06      	ldr	r4, [sp, #24]
   133fe:	68a4      	ldr	r4, [r4, #8]
   13400:	07a4      	lsls	r4, r4, #30
   13402:	d103      	bne.n	1340c <arm_convolve_1_x_n_s8+0x12>
#endif

out:
    /* Return to application */
    return status;
}
   13404:	f85d 4b04 	ldr.w	r4, [sp], #4
    status = arm_convolve_s8(ctx,
   13408:	f000 b83f 	b.w	1348a <arm_convolve_s8>
}
   1340c:	f06f 0002 	mvn.w	r0, #2
   13410:	f85d 4b04 	ldr.w	r4, [sp], #4
   13414:	4770      	bx	lr

00013416 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   13416:	68c3      	ldr	r3, [r0, #12]
   13418:	6888      	ldr	r0, [r1, #8]
   1341a:	4343      	muls	r3, r0
   1341c:	6848      	ldr	r0, [r1, #4]
   1341e:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   13420:	0080      	lsls	r0, r0, #2
   13422:	4770      	bx	lr

00013424 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
   13424:	b530      	push	{r4, r5, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   13426:	68d8      	ldr	r0, [r3, #12]
   13428:	0784      	lsls	r4, r0, #30
{
   1342a:	b08b      	sub	sp, #44	; 0x2c
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   1342c:	d128      	bne.n	13480 <arm_convolve_1x1_s8_fast+0x5c>
   1342e:	690c      	ldr	r4, [r1, #16]
   13430:	bb34      	cbnz	r4, 13480 <arm_convolve_1x1_s8_fast+0x5c>
   13432:	694c      	ldr	r4, [r1, #20]
   13434:	bb24      	cbnz	r4, 13480 <arm_convolve_1x1_s8_fast+0x5c>
   13436:	688d      	ldr	r5, [r1, #8]
   13438:	2d01      	cmp	r5, #1
   1343a:	d121      	bne.n	13480 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
   1343c:	68cd      	ldr	r5, [r1, #12]
   1343e:	2d01      	cmp	r5, #1
   13440:	d11e      	bne.n	13480 <arm_convolve_1x1_s8_fast+0x5c>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
   13442:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   13444:	9508      	str	r5, [sp, #32]
   13446:	6a0d      	ldr	r5, [r1, #32]
   13448:	9507      	str	r5, [sp, #28]
   1344a:	684d      	ldr	r5, [r1, #4]
   1344c:	9506      	str	r5, [sp, #24]
   1344e:	6809      	ldr	r1, [r1, #0]
   13450:	e9cd 0104 	strd	r0, r1, [sp, #16]
   13454:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13456:	68c9      	ldr	r1, [r1, #12]
   13458:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   1345a:	e9d3 1001 	ldrd	r1, r0, [r3, #4]
   1345e:	681b      	ldr	r3, [r3, #0]
   13460:	4341      	muls	r1, r0
   13462:	434b      	muls	r3, r1
    arm_nn_mat_mult_nt_t_s8(input_data,
   13464:	9302      	str	r3, [sp, #8]
   13466:	6853      	ldr	r3, [r2, #4]
   13468:	9301      	str	r3, [sp, #4]
   1346a:	6813      	ldr	r3, [r2, #0]
   1346c:	9300      	str	r3, [sp, #0]
   1346e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13470:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13472:	9910      	ldr	r1, [sp, #64]	; 0x40
   13474:	980e      	ldr	r0, [sp, #56]	; 0x38
   13476:	f000 fcb1 	bl	13ddc <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
   1347a:	4620      	mov	r0, r4
}
   1347c:	b00b      	add	sp, #44	; 0x2c
   1347e:	bd30      	pop	{r4, r5, pc}
        return ARM_MATH_SIZE_MISMATCH;
   13480:	f06f 0002 	mvn.w	r0, #2
   13484:	e7fa      	b.n	1347c <arm_convolve_1x1_s8_fast+0x58>

00013486 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
   13486:	2000      	movs	r0, #0
   13488:	4770      	bx	lr

0001348a <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
   1348a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1348e:	ed2d 8b02 	vpush	{d8}
   13492:	b0b5      	sub	sp, #212	; 0xd4
   13494:	4694      	mov	ip, r2
   13496:	9c45      	ldr	r4, [sp, #276]	; 0x114
   13498:	9e41      	ldr	r6, [sp, #260]	; 0x104
    const uint16_t input_ch = input_dims->c;
    const uint16_t kernel_x = filter_dims->w;
    const uint16_t kernel_y = filter_dims->h;
    const uint16_t output_x = output_dims->w;
    const uint16_t output_y = output_dims->h;
    const uint16_t output_ch = output_dims->c;
   1349a:	68e7      	ldr	r7, [r4, #12]
    q15_t *buffer_a = (q15_t *)ctx->buf;
   1349c:	f8d0 a000 	ldr.w	sl, [r0]
    const uint16_t input_batches = input_dims->n;
   134a0:	6818      	ldr	r0, [r3, #0]
    const uint16_t input_ch = input_dims->c;
   134a2:	68dd      	ldr	r5, [r3, #12]
    const uint16_t input_batches = input_dims->n;
   134a4:	9025      	str	r0, [sp, #148]	; 0x94
    const uint16_t output_ch = output_dims->c;
   134a6:	b2ba      	uxth	r2, r7
   134a8:	ee08 2a10 	vmov	s16, r2

    const uint16_t pad_x = conv_params->padding.w;
   134ac:	690a      	ldr	r2, [r1, #16]
   134ae:	9226      	str	r2, [sp, #152]	; 0x98
    const uint16_t pad_y = conv_params->padding.h;
   134b0:	694a      	ldr	r2, [r1, #20]
   134b2:	9227      	str	r2, [sp, #156]	; 0x9c
    const uint16_t stride_x = conv_params->stride.w;
   134b4:	688a      	ldr	r2, [r1, #8]
   134b6:	9228      	str	r2, [sp, #160]	; 0xa0
    const uint16_t stride_y = conv_params->stride.h;
   134b8:	68ca      	ldr	r2, [r1, #12]
   134ba:	9229      	str	r2, [sp, #164]	; 0xa4

    const int32_t input_offset = conv_params->input_offset;
    const int32_t out_offset = conv_params->output_offset;
   134bc:	684a      	ldr	r2, [r1, #4]
   134be:	9219      	str	r2, [sp, #100]	; 0x64
    const int32_t out_activation_min = conv_params->activation.min;
   134c0:	6a0a      	ldr	r2, [r1, #32]
   134c2:	921a      	str	r2, [sp, #104]	; 0x68
    const int32_t out_activation_max = conv_params->activation.max;
   134c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
   134c6:	921b      	str	r2, [sp, #108]	; 0x6c
    int32_t *output_mult = quant_params->multiplier;
   134c8:	f8dc 2000 	ldr.w	r2, [ip]
   134cc:	921c      	str	r2, [sp, #112]	; 0x70
    int32_t *output_shift = quant_params->shift;
   134ce:	f8dc 2004 	ldr.w	r2, [ip, #4]
   134d2:	921d      	str	r2, [sp, #116]	; 0x74
   134d4:	88a2      	ldrh	r2, [r4, #4]
   134d6:	921e      	str	r2, [sp, #120]	; 0x78
   134d8:	891a      	ldrh	r2, [r3, #8]
    const uint16_t kernel_y = filter_dims->h;
   134da:	e9d6 6001 	ldrd	r6, r0, [r6, #4]

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   134de:	920b      	str	r2, [sp, #44]	; 0x2c
   134e0:	889b      	ldrh	r3, [r3, #4]
   134e2:	9317      	str	r3, [sp, #92]	; 0x5c
   134e4:	fa1f fb85 	uxth.w	fp, r5
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   134e8:	4353      	muls	r3, r2
   134ea:	fb0b f303 	mul.w	r3, fp, r3
   134ee:	932d      	str	r3, [sp, #180]	; 0xb4
   134f0:	8923      	ldrh	r3, [r4, #8]
   134f2:	9320      	str	r3, [sp, #128]	; 0x80
   134f4:	b2bb      	uxth	r3, r7
        output_data += (output_x * output_y * output_ch);
   134f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   134f8:	9321      	str	r3, [sp, #132]	; 0x84
   134fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
   134fc:	4353      	muls	r3, r2
   134fe:	ee18 2a10 	vmov	r2, s16
   13502:	4353      	muls	r3, r2
   13504:	932e      	str	r3, [sp, #184]	; 0xb8
   13506:	b2b3      	uxth	r3, r6
   13508:	9322      	str	r3, [sp, #136]	; 0x88
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   1350a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1350c:	b283      	uxth	r3, r0
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1350e:	fb10 f006 	smulbb	r0, r0, r6
   13512:	fb10 f505 	smulbb	r5, r0, r5
   13516:	930c      	str	r3, [sp, #48]	; 0x30
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   13518:	4353      	muls	r3, r2
   1351a:	fb0b f303 	mul.w	r3, fp, r3
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1351e:	b2aa      	uxth	r2, r5
   13520:	922c      	str	r2, [sp, #176]	; 0xb0
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   13522:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
   13526:	922a      	str	r2, [sp, #168]	; 0xa8
   13528:	f3c3 038f 	ubfx	r3, r3, #2, #16
   1352c:	f005 0203 	and.w	r2, r5, #3
   13530:	9215      	str	r2, [sp, #84]	; 0x54
   13532:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   13536:	921f      	str	r2, [sp, #124]	; 0x7c
   13538:	9a42      	ldr	r2, [sp, #264]	; 0x108
   1353a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1353e:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   13542:	9330      	str	r3, [sp, #192]	; 0xc0
   13544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13546:	922b      	str	r2, [sp, #172]	; 0xac
   13548:	fb0b f303 	mul.w	r3, fp, r3
   1354c:	9331      	str	r3, [sp, #196]	; 0xc4
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1354e:	2300      	movs	r3, #0
   13550:	930d      	str	r3, [sp, #52]	; 0x34
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   13552:	f9b1 3000 	ldrsh.w	r3, [r1]
   13556:	ee08 3a90 	vmov	s17, r3
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1355a:	ea4f 094b 	mov.w	r9, fp, lsl #1
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1355e:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
   13562:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13564:	429a      	cmp	r2, r3
   13566:	f2c0 809c 	blt.w	136a2 <arm_convolve_s8+0x218>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
   1356a:	2000      	movs	r0, #0
   1356c:	b035      	add	sp, #212	; 0xd4
   1356e:	ecbd 8b02 	vpop	{d8}
   13572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   13576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13578:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
   1357c:	9932      	ldr	r1, [sp, #200]	; 0xc8
   1357e:	9840      	ldr	r0, [sp, #256]	; 0x100
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   13580:	970e      	str	r7, [sp, #56]	; 0x38
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   13582:	4353      	muls	r3, r2
   13584:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
   13588:	1a9c      	subs	r4, r3, r2
   1358a:	1861      	adds	r1, r4, r1
   1358c:	fb0b 0101 	mla	r1, fp, r1, r0
   13590:	9114      	str	r1, [sp, #80]	; 0x50
   13592:	990c      	ldr	r1, [sp, #48]	; 0x30
   13594:	1ad3      	subs	r3, r2, r3
   13596:	190d      	adds	r5, r1, r4
   13598:	441d      	add	r5, r3
   1359a:	9324      	str	r3, [sp, #144]	; 0x90
   1359c:	fb09 f305 	mul.w	r3, r9, r5
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   135a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   135a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   135a4:	932f      	str	r3, [sp, #188]	; 0xbc
   135a6:	462b      	mov	r3, r5
   135a8:	4413      	add	r3, r2
   135aa:	9316      	str	r3, [sp, #88]	; 0x58
   135ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   135ae:	42ab      	cmp	r3, r5
   135b0:	dc6e      	bgt.n	13690 <arm_convolve_s8+0x206>
   135b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   135b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   135b6:	1a9b      	subs	r3, r3, r2
   135b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   135ba:	4413      	add	r3, r2
   135bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   135be:	4414      	add	r4, r2
   135c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   135c2:	fb09 f303 	mul.w	r3, r9, r3
   135c6:	4422      	add	r2, r4
   135c8:	fb02 7703 	mla	r7, r2, r3, r7
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   135cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   135ce:	42bb      	cmp	r3, r7
   135d0:	d118      	bne.n	13604 <arm_convolve_s8+0x17a>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   135d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   135d4:	9306      	str	r3, [sp, #24]
   135d6:	9b44      	ldr	r3, [sp, #272]	; 0x110
   135d8:	9305      	str	r3, [sp, #20]
   135da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   135dc:	9304      	str	r3, [sp, #16]
   135de:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
   135e2:	9303      	str	r3, [sp, #12]
   135e4:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
   135e8:	9302      	str	r3, [sp, #8]
   135ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
   135ec:	9301      	str	r3, [sp, #4]
   135ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   135f0:	9300      	str	r3, [sp, #0]
   135f2:	ee18 2a10 	vmov	r2, s16
   135f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   135f8:	9842      	ldr	r0, [sp, #264]	; 0x108
   135fa:	4651      	mov	r1, sl
   135fc:	f000 f968 	bl	138d0 <arm_nn_mat_mult_kernel_s8_s16>
    q15_t *buffer_a = (q15_t *)ctx->buf;
   13600:	4657      	mov	r7, sl
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   13602:	900f      	str	r0, [sp, #60]	; 0x3c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   13604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13606:	3301      	adds	r3, #1
   13608:	930a      	str	r3, [sp, #40]	; 0x28
   1360a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1360c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1360e:	4293      	cmp	r3, r2
   13610:	dbb1      	blt.n	13576 <arm_convolve_s8+0xec>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   13612:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13614:	3301      	adds	r3, #1
   13616:	9309      	str	r3, [sp, #36]	; 0x24
   13618:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1361a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1361c:	4293      	cmp	r3, r2
   1361e:	da45      	bge.n	136ac <arm_convolve_s8+0x222>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   13620:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13622:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
   13626:	4353      	muls	r3, r2
   13628:	9318      	str	r3, [sp, #96]	; 0x60
   1362a:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
   1362e:	9323      	str	r3, [sp, #140]	; 0x8c
   13630:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13632:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13634:	1a9b      	subs	r3, r3, r2
   13636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13638:	9310      	str	r3, [sp, #64]	; 0x40
   1363a:	4353      	muls	r3, r2
   1363c:	9332      	str	r3, [sp, #200]	; 0xc8
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1363e:	2300      	movs	r3, #0
   13640:	e7e2      	b.n	13608 <arm_convolve_s8+0x17e>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
   13642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13644:	42ab      	cmp	r3, r5
   13646:	d904      	bls.n	13652 <arm_convolve_s8+0x1c8>
   13648:	2e00      	cmp	r6, #0
   1364a:	db02      	blt.n	13652 <arm_convolve_s8+0x1c8>
   1364c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1364e:	429e      	cmp	r6, r3
   13650:	db16      	blt.n	13680 <arm_convolve_s8+0x1f6>
   13652:	464a      	mov	r2, r9
   13654:	2100      	movs	r1, #0
   13656:	4640      	mov	r0, r8
   13658:	f002 fd25 	bl	160a6 <memset>
                        two_column_buf += input_ch;
   1365c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1365e:	445b      	add	r3, fp
   13660:	44c8      	add	r8, r9
                         i_ker_x++)
   13662:	3601      	adds	r6, #1
   13664:	9311      	str	r3, [sp, #68]	; 0x44
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   13666:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   13668:	42b3      	cmp	r3, r6
   1366a:	dcea      	bgt.n	13642 <arm_convolve_s8+0x1b8>
   1366c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1366e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13670:	4413      	add	r3, r2
   13672:	930e      	str	r3, [sp, #56]	; 0x38
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   13674:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   13676:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13678:	4413      	add	r3, r2
   1367a:	3501      	adds	r5, #1
   1367c:	9314      	str	r3, [sp, #80]	; 0x50
   1367e:	e795      	b.n	135ac <arm_convolve_s8+0x122>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   13680:	ee18 3a90 	vmov	r3, s17
   13684:	9811      	ldr	r0, [sp, #68]	; 0x44
   13686:	465a      	mov	r2, fp
   13688:	4641      	mov	r1, r8
   1368a:	f001 f974 	bl	14976 <arm_q7_to_q15_with_offset>
   1368e:	e7e5      	b.n	1365c <arm_convolve_s8+0x1d2>
   13690:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13692:	9311      	str	r3, [sp, #68]	; 0x44
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   13694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13696:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   1369a:	18e3      	adds	r3, r4, r3
   1369c:	4626      	mov	r6, r4
   1369e:	9333      	str	r3, [sp, #204]	; 0xcc
   136a0:	e7e1      	b.n	13666 <arm_convolve_s8+0x1dc>
        q7_t *out = output_data;
   136a2:	9b46      	ldr	r3, [sp, #280]	; 0x118
   136a4:	930f      	str	r3, [sp, #60]	; 0x3c
    q15_t *buffer_a = (q15_t *)ctx->buf;
   136a6:	4657      	mov	r7, sl
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   136a8:	2300      	movs	r3, #0
   136aa:	e7b4      	b.n	13616 <arm_convolve_s8+0x18c>
        if (two_column_buf != buffer_a)
   136ac:	4557      	cmp	r7, sl
   136ae:	d175      	bne.n	1379c <arm_convolve_s8+0x312>
        input_data += (input_x * input_y * input_ch);
   136b0:	9b40      	ldr	r3, [sp, #256]	; 0x100
   136b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   136b4:	4413      	add	r3, r2
   136b6:	9340      	str	r3, [sp, #256]	; 0x100
        output_data += (output_x * output_y * output_ch);
   136b8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   136ba:	9b46      	ldr	r3, [sp, #280]	; 0x118
   136bc:	4413      	add	r3, r2
   136be:	9346      	str	r3, [sp, #280]	; 0x118
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   136c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   136c2:	3301      	adds	r3, #1
   136c4:	930d      	str	r3, [sp, #52]	; 0x34
   136c6:	e74a      	b.n	1355e <arm_convolve_s8+0xd4>
                if (bias_data)
   136c8:	9b44      	ldr	r3, [sp, #272]	; 0x110
   136ca:	2b00      	cmp	r3, #0
   136cc:	d048      	beq.n	13760 <arm_convolve_s8+0x2d6>
                    sum = bias_data[i];
   136ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                while (col_count)
   136d2:	4656      	mov	r6, sl
   136d4:	4627      	mov	r7, r4
   136d6:	42b8      	cmp	r0, r7
   136d8:	4602      	mov	r2, r0
   136da:	d143      	bne.n	13764 <arm_convolve_s8+0x2da>
                while (col_count)
   136dc:	9f15      	ldr	r7, [sp, #84]	; 0x54
   136de:	9e30      	ldr	r6, [sp, #192]	; 0xc0
   136e0:	4407      	add	r7, r0
   136e2:	42ba      	cmp	r2, r7
   136e4:	d153      	bne.n	1378e <arm_convolve_s8+0x304>
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
   136e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   136e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   136ea:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
    mult.word.high = 0;
   136ee:	2700      	movs	r7, #0
   136f0:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   136f4:	e9cd c712 	strd	ip, r7, [sp, #72]	; 0x48
   136f8:	4414      	add	r4, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   136fa:	ea26 77e6 	bic.w	r7, r6, r6, asr #31
   136fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13700:	40bb      	lsls	r3, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13702:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
   13706:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1370a:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1370c:	fbc2 7803 	smlal	r7, r8, r2, r3
    result = (int32_t)(mult.long_long >> 31);
   13710:	ea4f 72d7 	mov.w	r2, r7, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13714:	bfd4      	ite	le
   13716:	4276      	negle	r6, r6
   13718:	2600      	movgt	r6, #0
    result = (int32_t)(mult.long_long >> 31);
   1371a:	ea42 0348 	orr.w	r3, r2, r8, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1371e:	fa05 f206 	lsl.w	r2, r5, r6
   13722:	3a01      	subs	r2, #1
    if (result < 0)
   13724:	fa53 f606 	asrs.w	r6, r3, r6
    int32_t remainder = remainder_mask & dividend;
   13728:	ea03 0702 	and.w	r7, r3, r2
    q31_t threshold = remainder_mask >> 1;
   1372c:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   13730:	bf48      	it	mi
   13732:	3201      	addmi	r2, #1
                sum += out_offset;
   13734:	9b19      	ldr	r3, [sp, #100]	; 0x64
    if (remainder > threshold)
   13736:	4297      	cmp	r7, r2
        result++;
   13738:	bfc8      	it	gt
   1373a:	3601      	addgt	r6, #1
   1373c:	441e      	add	r6, r3
                sum = MAX(sum, out_activation_min);
   1373e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13740:	429e      	cmp	r6, r3
   13742:	bfb8      	it	lt
   13744:	461e      	movlt	r6, r3
                sum = MIN(sum, out_activation_max);
   13746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13748:	429e      	cmp	r6, r3
   1374a:	bfa8      	it	ge
   1374c:	461e      	movge	r6, r3
                *out++ = (q7_t)sum;
   1374e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13750:	545e      	strb	r6, [r3, r1]
            for (i = 0; i < output_ch; i++)
   13752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13754:	3101      	adds	r1, #1
   13756:	4418      	add	r0, r3
   13758:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1375a:	4299      	cmp	r1, r3
   1375c:	d1b4      	bne.n	136c8 <arm_convolve_s8+0x23e>
   1375e:	e7a7      	b.n	136b0 <arm_convolve_s8+0x226>
                q31_t sum = 0;
   13760:	9b44      	ldr	r3, [sp, #272]	; 0x110
   13762:	e7b6      	b.n	136d2 <arm_convolve_s8+0x248>
    memcpy(&val, *in_q7, 4);
   13764:	f857 cb04 	ldr.w	ip, [r7], #4
  return (op1 >> op2) | (op1 << (32U - op2));
   13768:	ea4f 223c 	mov.w	r2, ip, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1376c:	fa2f fe82 	sxtb16	lr, r2
   13770:	fa2f f28c 	sxtb16	r2, ip
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   13774:	eace 4c22 	pkhtb	ip, lr, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   13778:	eac2 420e 	pkhbt	r2, r2, lr, lsl #16

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1377c:	f8d6 e000 	ldr.w	lr, [r6]
   13780:	fb22 320e 	smlad	r2, r2, lr, r3
    memcpy(&val, *in_q15, 4);
   13784:	6873      	ldr	r3, [r6, #4]
    *in_q15 += 2;
   13786:	3608      	adds	r6, #8
   13788:	fb2c 2303 	smlad	r3, ip, r3, r2
                    col_count--;
   1378c:	e7a3      	b.n	136d6 <arm_convolve_s8+0x24c>
                    sum += ker_a1 * ip_b1;
   1378e:	f912 cb01 	ldrsb.w	ip, [r2], #1
   13792:	f836 eb02 	ldrh.w	lr, [r6], #2
   13796:	fb1e 330c 	smlabb	r3, lr, ip, r3
                    col_count--;
   1379a:	e7a2      	b.n	136e2 <arm_convolve_s8+0x258>
   1379c:	982b      	ldr	r0, [sp, #172]	; 0xac
            const q7_t *ker_a = filter_data;
   1379e:	9c42      	ldr	r4, [sp, #264]	; 0x108
            for (i = 0; i < output_ch; i++)
   137a0:	2100      	movs	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   137a2:	2501      	movs	r5, #1
   137a4:	e7d8      	b.n	13758 <arm_convolve_s8+0x2ce>

000137a6 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   137a6:	68c3      	ldr	r3, [r0, #12]
   137a8:	6888      	ldr	r0, [r1, #8]
   137aa:	4343      	muls	r3, r0
   137ac:	6848      	ldr	r0, [r1, #4]
   137ae:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   137b0:	0080      	lsls	r0, r0, #2
   137b2:	4770      	bx	lr

000137b4 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
   137b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   137ba:	9600      	str	r6, [sp, #0]
   137bc:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
   137c0:	9701      	str	r7, [sp, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   137c2:	690f      	ldr	r7, [r1, #16]
{
   137c4:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
   137c8:	e9dd 8911 	ldrd	r8, r9, [sp, #68]	; 0x44
   137cc:	4684      	mov	ip, r0
   137ce:	460c      	mov	r4, r1
   137d0:	4696      	mov	lr, r2
   137d2:	461d      	mov	r5, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   137d4:	b9af      	cbnz	r7, 13802 <arm_convolve_wrapper_s8+0x4e>
   137d6:	694f      	ldr	r7, [r1, #20]
   137d8:	b99f      	cbnz	r7, 13802 <arm_convolve_wrapper_s8+0x4e>
   137da:	68df      	ldr	r7, [r3, #12]
   137dc:	07bf      	lsls	r7, r7, #30
   137de:	d110      	bne.n	13802 <arm_convolve_wrapper_s8+0x4e>
   137e0:	688f      	ldr	r7, [r1, #8]
   137e2:	2f01      	cmp	r7, #1
   137e4:	d10d      	bne.n	13802 <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   137e6:	68cf      	ldr	r7, [r1, #12]
   137e8:	2f01      	cmp	r7, #1
   137ea:	d10a      	bne.n	13802 <arm_convolve_wrapper_s8+0x4e>
   137ec:	68b7      	ldr	r7, [r6, #8]
   137ee:	2f01      	cmp	r7, #1
   137f0:	d107      	bne.n	13802 <arm_convolve_wrapper_s8+0x4e>
   137f2:	6877      	ldr	r7, [r6, #4]
   137f4:	2f01      	cmp	r7, #1
   137f6:	d104      	bne.n	13802 <arm_convolve_wrapper_s8+0x4e>
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
   137f8:	b003      	add	sp, #12
   137fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
   137fe:	f7ff be11 	b.w	13424 <arm_convolve_1x1_s8_fast>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   13802:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13806:	2b01      	cmp	r3, #1
   13808:	d11e      	bne.n	13848 <arm_convolve_wrapper_s8+0x94>
   1380a:	686b      	ldr	r3, [r5, #4]
   1380c:	2b01      	cmp	r3, #1
   1380e:	d11b      	bne.n	13848 <arm_convolve_wrapper_s8+0x94>
   13810:	6873      	ldr	r3, [r6, #4]
   13812:	2b01      	cmp	r3, #1
   13814:	d118      	bne.n	13848 <arm_convolve_wrapper_s8+0x94>
   13816:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1381a:	079b      	lsls	r3, r3, #30
   1381c:	d114      	bne.n	13848 <arm_convolve_wrapper_s8+0x94>
   1381e:	682b      	ldr	r3, [r5, #0]
   13820:	2b01      	cmp	r3, #1
   13822:	d111      	bne.n	13848 <arm_convolve_wrapper_s8+0x94>
        return arm_convolve_1_x_n_s8(ctx,
   13824:	9b01      	ldr	r3, [sp, #4]
   13826:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
   1382a:	9b00      	ldr	r3, [sp, #0]
   1382c:	930c      	str	r3, [sp, #48]	; 0x30
   1382e:	4672      	mov	r2, lr
   13830:	462b      	mov	r3, r5
   13832:	4621      	mov	r1, r4
   13834:	4660      	mov	r0, ip
   13836:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
   1383a:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   1383e:	b003      	add	sp, #12
   13840:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
   13844:	f7ff bdd9 	b.w	133fa <arm_convolve_1_x_n_s8>
        return arm_convolve_s8(ctx,
   13848:	9b01      	ldr	r3, [sp, #4]
   1384a:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
   1384e:	9b00      	ldr	r3, [sp, #0]
   13850:	930c      	str	r3, [sp, #48]	; 0x30
   13852:	4672      	mov	r2, lr
   13854:	462b      	mov	r3, r5
   13856:	4621      	mov	r1, r4
   13858:	4660      	mov	r0, ip
   1385a:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
   1385e:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   13862:	b003      	add	sp, #12
   13864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
   13868:	f7ff be0f 	b.w	1348a <arm_convolve_s8>

0001386c <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
   1386c:	b410      	push	{r4}
   1386e:	4604      	mov	r4, r0
   13870:	4608      	mov	r0, r1
   13872:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   13874:	6922      	ldr	r2, [r4, #16]
   13876:	b9a2      	cbnz	r2, 138a2 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   13878:	6962      	ldr	r2, [r4, #20]
   1387a:	b992      	cbnz	r2, 138a2 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   1387c:	68c2      	ldr	r2, [r0, #12]
   1387e:	0792      	lsls	r2, r2, #30
   13880:	d10f      	bne.n	138a2 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   13882:	68a2      	ldr	r2, [r4, #8]
   13884:	2a01      	cmp	r2, #1
   13886:	d10c      	bne.n	138a2 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   13888:	68e2      	ldr	r2, [r4, #12]
   1388a:	2a01      	cmp	r2, #1
   1388c:	d109      	bne.n	138a2 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   1388e:	688a      	ldr	r2, [r1, #8]
   13890:	2a01      	cmp	r2, #1
   13892:	d106      	bne.n	138a2 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   13894:	684a      	ldr	r2, [r1, #4]
   13896:	2a01      	cmp	r2, #1
   13898:	d103      	bne.n	138a2 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    }
}
   1389a:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
   1389e:	f7ff bdf2 	b.w	13486 <arm_convolve_1x1_s8_fast_get_buffer_size>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   138a2:	685a      	ldr	r2, [r3, #4]
   138a4:	2a01      	cmp	r2, #1
   138a6:	d10f      	bne.n	138c8 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   138a8:	6842      	ldr	r2, [r0, #4]
   138aa:	2a01      	cmp	r2, #1
   138ac:	d10c      	bne.n	138c8 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   138ae:	684a      	ldr	r2, [r1, #4]
   138b0:	2a01      	cmp	r2, #1
   138b2:	d109      	bne.n	138c8 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   138b4:	689b      	ldr	r3, [r3, #8]
   138b6:	079b      	lsls	r3, r3, #30
   138b8:	d106      	bne.n	138c8 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   138ba:	6803      	ldr	r3, [r0, #0]
   138bc:	2b01      	cmp	r3, #1
   138be:	d103      	bne.n	138c8 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
}
   138c0:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
   138c4:	f7ff bda7 	b.w	13416 <arm_convolve_1_x_n_s8_get_buffer_size>
}
   138c8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   138cc:	f7ff bf6b 	b.w	137a6 <arm_convolve_s8_get_buffer_size>

000138d0 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
   138d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d4:	b09f      	sub	sp, #124	; 0x7c
   138d6:	468b      	mov	fp, r1
   138d8:	9303      	str	r3, [sp, #12]
   138da:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
   138de:	9304      	str	r3, [sp, #16]
   138e0:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
   138e4:	9305      	str	r3, [sp, #20]
   138e6:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
   138ea:	9301      	str	r3, [sp, #4]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
   138ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
{
   138ee:	9209      	str	r2, [sp, #36]	; 0x24
    q7_t *out_1 = out_0 + output_ch;
   138f0:	4413      	add	r3, r2
   138f2:	930a      	str	r3, [sp, #40]	; 0x28
    /* this loop over rows in A */
    while (row_count)
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   138f4:	9b01      	ldr	r3, [sp, #4]
{
   138f6:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
   138fa:	9014      	str	r0, [sp, #80]	; 0x50
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   138fc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   13900:	9302      	str	r3, [sp, #8]
   13902:	9b01      	ldr	r3, [sp, #4]
   13904:	f003 0303 	and.w	r3, r3, #3
   13908:	9317      	str	r3, [sp, #92]	; 0x5c
   1390a:	9b01      	ldr	r3, [sp, #4]
   1390c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1390e:	089b      	lsrs	r3, r3, #2
   13910:	009a      	lsls	r2, r3, #2
   13912:	921b      	str	r2, [sp, #108]	; 0x6c
   13914:	9a01      	ldr	r2, [sp, #4]
   13916:	1855      	adds	r5, r2, r1
   13918:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   1391c:	920b      	str	r2, [sp, #44]	; 0x2c
   1391e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   13922:	9207      	str	r2, [sp, #28]
   13924:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13926:	0852      	lsrs	r2, r2, #1
   13928:	921c      	str	r2, [sp, #112]	; 0x70
   1392a:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   1392e:	9208      	str	r2, [sp, #32]
   13930:	9a02      	ldr	r2, [sp, #8]
   13932:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13936:	9316      	str	r3, [sp, #88]	; 0x58
    while (row_count)
   13938:	2301      	movs	r3, #1
   1393a:	9300      	str	r3, [sp, #0]
    const q7_t *ip_a0 = input_a;
   1393c:	4605      	mov	r5, r0
    while (row_count)
   1393e:	2300      	movs	r3, #0
   13940:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13942:	4293      	cmp	r3, r2
   13944:	f040 808d 	bne.w	13a62 <arm_nn_mat_mult_kernel_s8_s16+0x192>
   13948:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1394a:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1394c:	982e      	ldr	r0, [sp, #184]	; 0xb8
   1394e:	fb03 5504 	mla	r5, r3, r4, r5
        ip_a0 += num_col_a;
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
   13952:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13954:	07e1      	lsls	r1, r4, #31
   13956:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   1395a:	ea4f 0943 	mov.w	r9, r3, lsl #1
   1395e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   13962:	d579      	bpl.n	13a58 <arm_nn_mat_mult_kernel_s8_s16+0x188>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
   13964:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   13966:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
   1396a:	462e      	mov	r6, r5
        q31_t ch_0_out_1 = *bias++;
   1396c:	469c      	mov	ip, r3
        while (col_count)
   1396e:	9908      	ldr	r1, [sp, #32]
   13970:	458b      	cmp	fp, r1
   13972:	f040 81d2 	bne.w	13d1a <arm_nn_mat_mult_kernel_s8_s16+0x44a>
   13976:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13978:	440d      	add	r5, r1
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
   1397a:	9901      	ldr	r1, [sp, #4]
   1397c:	2400      	movs	r4, #0
   1397e:	f001 0703 	and.w	r7, r1, #3
   13982:	42bc      	cmp	r4, r7
   13984:	f040 81ea 	bne.w	13d5c <arm_nn_mat_mult_kernel_s8_s16+0x48c>

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   13988:	9903      	ldr	r1, [sp, #12]
   1398a:	f85a 6002 	ldr.w	r6, [sl, r2]
   1398e:	f851 e002 	ldr.w	lr, [r1, r2]
        ch_0_out_0 += out_offset;
   13992:	9929      	ldr	r1, [sp, #164]	; 0xa4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13994:	ea2e 77ee 	bic.w	r7, lr, lr, asr #31
    mult.word.high = 0;
   13998:	2500      	movs	r5, #0
   1399a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1399e:	40bb      	lsls	r3, r7
   139a0:	f1be 0f00 	cmp.w	lr, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   139a4:	4627      	mov	r7, r4
   139a6:	46a8      	mov	r8, r5
   139a8:	fbc6 7803 	smlal	r7, r8, r6, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   139ac:	bfcc      	ite	gt
   139ae:	46ae      	movgt	lr, r5
   139b0:	f1ce 0e00 	rsble	lr, lr, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   139b4:	2401      	movs	r4, #1
    result = (int32_t)(mult.long_long >> 31);
   139b6:	0ffb      	lsrs	r3, r7, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   139b8:	fa04 f40e 	lsl.w	r4, r4, lr
    result = (int32_t)(mult.long_long >> 31);
   139bc:	ea43 0348 	orr.w	r3, r3, r8, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   139c0:	3c01      	subs	r4, #1
    int32_t remainder = remainder_mask & dividend;
   139c2:	ea03 0504 	and.w	r5, r3, r4
    if (result < 0)
   139c6:	fa53 f30e 	asrs.w	r3, r3, lr
    q31_t threshold = remainder_mask >> 1;
   139ca:	ea4f 0464 	mov.w	r4, r4, asr #1
        threshold++;
   139ce:	bf48      	it	mi
   139d0:	3401      	addmi	r4, #1
    if (remainder > threshold)
   139d2:	42a5      	cmp	r5, r4
        result++;
   139d4:	bfc8      	it	gt
   139d6:	3301      	addgt	r3, #1
   139d8:	440b      	add	r3, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   139da:	9904      	ldr	r1, [sp, #16]
   139dc:	428b      	cmp	r3, r1
   139de:	bfb8      	it	lt
   139e0:	460b      	movlt	r3, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   139e2:	9905      	ldr	r1, [sp, #20]
   139e4:	428b      	cmp	r3, r1
   139e6:	bfa8      	it	ge
   139e8:	460b      	movge	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
   139ea:	992e      	ldr	r1, [sp, #184]	; 0xb8
   139ec:	f801 3009 	strb.w	r3, [r1, r9]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   139f0:	9b03      	ldr	r3, [sp, #12]
   139f2:	f85a 4002 	ldr.w	r4, [sl, r2]
   139f6:	589e      	ldr	r6, [r3, r2]
    mult.word.high = 0;
   139f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   139fc:	2300      	movs	r3, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   139fe:	ea26 75e6 	bic.w	r5, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13a02:	4617      	mov	r7, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a04:	2e00      	cmp	r6, #0
   13a06:	fa0c fc05 	lsl.w	ip, ip, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13a0a:	4698      	mov	r8, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a0c:	bfc8      	it	gt
   13a0e:	461a      	movgt	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13a10:	fbc4 780c 	smlal	r7, r8, r4, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a14:	bfd8      	it	le
   13a16:	4272      	negle	r2, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
   13a18:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   13a1a:	0ffc      	lsrs	r4, r7, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   13a1c:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
   13a1e:	ea44 0448 	orr.w	r4, r4, r8, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13a22:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   13a24:	ea04 0503 	and.w	r5, r4, r3
    if (result < 0)
   13a28:	4114      	asrs	r4, r2
    q31_t threshold = remainder_mask >> 1;
   13a2a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   13a2e:	bf48      	it	mi
   13a30:	3301      	addmi	r3, #1
    if (remainder > threshold)
   13a32:	429d      	cmp	r5, r3
        ch_0_out_1 += out_offset;
   13a34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
        result++;
   13a36:	bfc8      	it	gt
   13a38:	3401      	addgt	r4, #1
   13a3a:	441c      	add	r4, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   13a3c:	9b04      	ldr	r3, [sp, #16]
   13a3e:	42a3      	cmp	r3, r4
   13a40:	bfb8      	it	lt
   13a42:	4623      	movlt	r3, r4
   13a44:	461c      	mov	r4, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   13a46:	9b05      	ldr	r3, [sp, #20]
   13a48:	42a3      	cmp	r3, r4
   13a4a:	bfa8      	it	ge
   13a4c:	4623      	movge	r3, r4
   13a4e:	461c      	mov	r4, r3
        *out_1++ = (q7_t)ch_0_out_1;
   13a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a52:	f803 4009 	strb.w	r4, [r3, r9]
        *out_0++ = (q7_t)ch_0_out_0;
   13a56:	3001      	adds	r0, #1
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   13a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13a5a:	4418      	add	r0, r3
   13a5c:	b01f      	add	sp, #124	; 0x7c
   13a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   13a62:	9901      	ldr	r1, [sp, #4]
        q31_t ch_1_out_0 = *bias;
   13a64:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13a66:	9a00      	ldr	r2, [sp, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   13a68:	9f02      	ldr	r7, [sp, #8]
        q31_t ch_1_out_0 = *bias;
   13a6a:	f850 c022 	ldr.w	ip, [r0, r2, lsl #2]
   13a6e:	951d      	str	r5, [sp, #116]	; 0x74
   13a70:	1869      	adds	r1, r5, r1
   13a72:	9115      	str	r1, [sp, #84]	; 0x54
        q31_t ch_0_out_0 = *bias;
   13a74:	992d      	ldr	r1, [sp, #180]	; 0xb4
        q31_t ch_1_out_1 = *bias++;
   13a76:	f8cd c018 	str.w	ip, [sp, #24]
        q31_t ch_0_out_0 = *bias;
   13a7a:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
        const q15_t *ip_b0 = input_b;
   13a7e:	465e      	mov	r6, fp
        q31_t ch_0_out_1 = *bias++;
   13a80:	460c      	mov	r4, r1
        while (col_count)
   13a82:	9a08      	ldr	r2, [sp, #32]
   13a84:	4296      	cmp	r6, r2
   13a86:	f040 80f8 	bne.w	13c7a <arm_nn_mat_mult_kernel_s8_s16+0x3aa>
   13a8a:	9807      	ldr	r0, [sp, #28]
   13a8c:	9a01      	ldr	r2, [sp, #4]
        while (col_count)
   13a8e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   13a90:	9e16      	ldr	r6, [sp, #88]	; 0x58
   13a92:	1817      	adds	r7, r2, r0
   13a94:	9a08      	ldr	r2, [sp, #32]
   13a96:	9215      	str	r2, [sp, #84]	; 0x54
   13a98:	4602      	mov	r2, r0
   13a9a:	442a      	add	r2, r5
   13a9c:	9218      	str	r2, [sp, #96]	; 0x60
   13a9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13aa0:	4290      	cmp	r0, r2
   13aa2:	f040 8125 	bne.w	13cf0 <arm_nn_mat_mult_kernel_s8_s16+0x420>
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   13aa6:	9a03      	ldr	r2, [sp, #12]
   13aa8:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
   13aac:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
    mult.word.high = 0;
   13ab0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   13ab4:	2200      	movs	r2, #0
   13ab6:	e9cd 720c 	strd	r7, r2, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13aba:	ea25 76e5 	bic.w	r6, r5, r5, asr #31
   13abe:	40b1      	lsls	r1, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13ac0:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13ac4:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13ac6:	fbc0 6701 	smlal	r6, r7, r0, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13aca:	f04f 0201 	mov.w	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   13ace:	ea4f 70d6 	mov.w	r0, r6, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13ad2:	bfd4      	ite	le
   13ad4:	426d      	negle	r5, r5
   13ad6:	2500      	movgt	r5, #0
    result = (int32_t)(mult.long_long >> 31);
   13ad8:	ea40 0147 	orr.w	r1, r0, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13adc:	fa02 f005 	lsl.w	r0, r2, r5
   13ae0:	3801      	subs	r0, #1
    if (result < 0)
   13ae2:	fa51 f505 	asrs.w	r5, r1, r5
    int32_t remainder = remainder_mask & dividend;
   13ae6:	ea01 0600 	and.w	r6, r1, r0
    q31_t threshold = remainder_mask >> 1;
   13aea:	fa40 f002 	asr.w	r0, r0, r2
        threshold++;
   13aee:	bf48      	it	mi
   13af0:	1880      	addmi	r0, r0, r2
    if (remainder > threshold)
   13af2:	4286      	cmp	r6, r0
        ch_0_out_0 += out_offset;
   13af4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
        result++;
   13af6:	bfc8      	it	gt
   13af8:	3501      	addgt	r5, #1
   13afa:	4415      	add	r5, r2
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   13afc:	9a04      	ldr	r2, [sp, #16]
   13afe:	4295      	cmp	r5, r2
   13b00:	bfb8      	it	lt
   13b02:	4615      	movlt	r5, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   13b04:	9a05      	ldr	r2, [sp, #20]
   13b06:	4295      	cmp	r5, r2
   13b08:	bfa8      	it	ge
   13b0a:	4615      	movge	r5, r2
        *out_0++ = (q7_t)ch_0_out_0;
   13b0c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   13b0e:	f802 5013 	strb.w	r5, [r2, r3, lsl #1]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   13b12:	9a03      	ldr	r2, [sp, #12]
   13b14:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
   13b18:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
    mult.word.high = 0;
   13b1c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   13b20:	2200      	movs	r2, #0
   13b22:	e9cd 620e 	strd	r6, r2, [sp, #56]	; 0x38
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13b26:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13b2a:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
   13b2e:	4084      	lsls	r4, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13b30:	fbc1 6704 	smlal	r6, r7, r1, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13b34:	2d00      	cmp	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   13b36:	f04f 0201 	mov.w	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   13b3a:	ea4f 70d6 	mov.w	r0, r6, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13b3e:	bfd4      	ite	le
   13b40:	426d      	negle	r5, r5
   13b42:	2500      	movgt	r5, #0
    result = (int32_t)(mult.long_long >> 31);
   13b44:	ea40 0147 	orr.w	r1, r0, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13b48:	fa02 f005 	lsl.w	r0, r2, r5
   13b4c:	3801      	subs	r0, #1
    if (result < 0)
   13b4e:	fa51 f505 	asrs.w	r5, r1, r5
    int32_t remainder = remainder_mask & dividend;
   13b52:	ea01 0400 	and.w	r4, r1, r0
    q31_t threshold = remainder_mask >> 1;
   13b56:	fa40 f002 	asr.w	r0, r0, r2
        threshold++;
   13b5a:	bf48      	it	mi
   13b5c:	1880      	addmi	r0, r0, r2
    if (remainder > threshold)
   13b5e:	4284      	cmp	r4, r0
        ch_0_out_1 += out_offset;
   13b60:	9a29      	ldr	r2, [sp, #164]	; 0xa4
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   13b62:	9800      	ldr	r0, [sp, #0]
        result++;
   13b64:	bfc8      	it	gt
   13b66:	3501      	addgt	r5, #1
        ch_0_out_1 += out_offset;
   13b68:	4415      	add	r5, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   13b6a:	9a04      	ldr	r2, [sp, #16]
   13b6c:	4295      	cmp	r5, r2
   13b6e:	bfb8      	it	lt
   13b70:	4615      	movlt	r5, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   13b72:	9a05      	ldr	r2, [sp, #20]
   13b74:	4295      	cmp	r5, r2
   13b76:	bfa8      	it	ge
   13b78:	4615      	movge	r5, r2
        *out_1++ = (q7_t)ch_0_out_1;
   13b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13b7c:	f802 5013 	strb.w	r5, [r2, r3, lsl #1]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   13b80:	9a00      	ldr	r2, [sp, #0]
   13b82:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   13b86:	9a03      	ldr	r2, [sp, #12]
    mult.word.high = 0;
   13b88:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   13b8c:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
   13b90:	2200      	movs	r2, #0
   13b92:	e9cd 5210 	strd	r5, r2, [sp, #64]	; 0x40
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13b96:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13b9a:	ea24 79e4 	bic.w	r9, r4, r4, asr #31
   13b9e:	fa0c f909 	lsl.w	r9, ip, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13ba2:	fbc1 5609 	smlal	r5, r6, r1, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13ba6:	2c00      	cmp	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   13ba8:	f04f 0201 	mov.w	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   13bac:	ea4f 70d5 	mov.w	r0, r5, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13bb0:	bfd4      	ite	le
   13bb2:	4264      	negle	r4, r4
   13bb4:	2400      	movgt	r4, #0
    result = (int32_t)(mult.long_long >> 31);
   13bb6:	ea40 0146 	orr.w	r1, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13bba:	fa02 f004 	lsl.w	r0, r2, r4
   13bbe:	3801      	subs	r0, #1
    if (result < 0)
   13bc0:	fa51 f404 	asrs.w	r4, r1, r4
    int32_t remainder = remainder_mask & dividend;
   13bc4:	ea01 0500 	and.w	r5, r1, r0
    q31_t threshold = remainder_mask >> 1;
   13bc8:	fa40 f002 	asr.w	r0, r0, r2
        threshold++;
   13bcc:	bf48      	it	mi
   13bce:	1880      	addmi	r0, r0, r2
    if (remainder > threshold)
   13bd0:	4285      	cmp	r5, r0
        ch_1_out_0 += out_offset;
   13bd2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
        *out_0++ = (q7_t)ch_1_out_0;
   13bd4:	9900      	ldr	r1, [sp, #0]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
   13bd6:	9800      	ldr	r0, [sp, #0]
        result++;
   13bd8:	bfc8      	it	gt
   13bda:	3401      	addgt	r4, #1
        ch_1_out_0 += out_offset;
   13bdc:	4414      	add	r4, r2
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   13bde:	9a04      	ldr	r2, [sp, #16]
   13be0:	4294      	cmp	r4, r2
   13be2:	bfb8      	it	lt
   13be4:	4614      	movlt	r4, r2
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   13be6:	9a05      	ldr	r2, [sp, #20]
   13be8:	4294      	cmp	r4, r2
   13bea:	bfa8      	it	ge
   13bec:	4614      	movge	r4, r2
        *out_0++ = (q7_t)ch_1_out_0;
   13bee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   13bf0:	5454      	strb	r4, [r2, r1]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
   13bf2:	9a03      	ldr	r2, [sp, #12]
   13bf4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   13bf8:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
    mult.word.high = 0;
   13bfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   13c00:	2200      	movs	r2, #0
   13c02:	e9cd 0212 	strd	r0, r2, [sp, #72]	; 0x48
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13c06:	9a06      	ldr	r2, [sp, #24]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13c08:	e9dd 5612 	ldrd	r5, r6, [sp, #72]	; 0x48
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13c0c:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
   13c10:	fa02 f808 	lsl.w	r8, r2, r8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13c14:	fbc1 5608 	smlal	r5, r6, r1, r8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13c18:	2c00      	cmp	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   13c1a:	f04f 0201 	mov.w	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   13c1e:	ea4f 70d5 	mov.w	r0, r5, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13c22:	bfd4      	ite	le
   13c24:	4264      	negle	r4, r4
   13c26:	2400      	movgt	r4, #0
    result = (int32_t)(mult.long_long >> 31);
   13c28:	ea40 0146 	orr.w	r1, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13c2c:	fa02 f004 	lsl.w	r0, r2, r4
   13c30:	3801      	subs	r0, #1
    if (result < 0)
   13c32:	fa51 f404 	asrs.w	r4, r1, r4
    int32_t remainder = remainder_mask & dividend;
   13c36:	ea01 0500 	and.w	r5, r1, r0
    q31_t threshold = remainder_mask >> 1;
   13c3a:	fa40 f002 	asr.w	r0, r0, r2
        threshold++;
   13c3e:	bf48      	it	mi
   13c40:	1880      	addmi	r0, r0, r2
    if (remainder > threshold)
   13c42:	4285      	cmp	r5, r0
        ch_1_out_1 += out_offset;
   13c44:	9a29      	ldr	r2, [sp, #164]	; 0xa4
        *out_1++ = (q7_t)ch_1_out_1;
   13c46:	9900      	ldr	r1, [sp, #0]
        result++;
   13c48:	bfc8      	it	gt
   13c4a:	3401      	addgt	r4, #1
        ch_1_out_1 += out_offset;
   13c4c:	4414      	add	r4, r2
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   13c4e:	9a04      	ldr	r2, [sp, #16]
   13c50:	4294      	cmp	r4, r2
   13c52:	bfb8      	it	lt
   13c54:	4614      	movlt	r4, r2
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   13c56:	9a05      	ldr	r2, [sp, #20]
   13c58:	4294      	cmp	r4, r2
   13c5a:	bfa8      	it	ge
   13c5c:	4614      	movge	r4, r2
        *out_1++ = (q7_t)ch_1_out_1;
   13c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13c60:	5454      	strb	r4, [r2, r1]
        ip_a0 += num_col_a;
   13c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13c64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13c66:	440a      	add	r2, r1
   13c68:	4615      	mov	r5, r2
        row_count--;
   13c6a:	9a07      	ldr	r2, [sp, #28]
   13c6c:	440a      	add	r2, r1
   13c6e:	9207      	str	r2, [sp, #28]
   13c70:	9a00      	ldr	r2, [sp, #0]
   13c72:	3202      	adds	r2, #2
   13c74:	3301      	adds	r3, #1
   13c76:	9200      	str	r2, [sp, #0]
   13c78:	e662      	b.n	13940 <arm_nn_mat_mult_kernel_s8_s16+0x70>
    memcpy(&val, *in_q15, 4);
   13c7a:	f855 9b04 	ldr.w	r9, [r5], #4
   13c7e:	6830      	ldr	r0, [r6, #0]
   13c80:	9018      	str	r0, [sp, #96]	; 0x60
  return (op1 >> op2) | (op1 << (32U - op2));
   13c82:	ea4f 2039 	mov.w	r0, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13c86:	fa2f f989 	sxtb16	r9, r9
   13c8a:	fa2f f080 	sxtb16	r0, r0
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   13c8e:	eac0 4229 	pkhtb	r2, r0, r9, asr #16
   13c92:	9219      	str	r2, [sp, #100]	; 0x64
   13c94:	9a15      	ldr	r2, [sp, #84]	; 0x54
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   13c96:	eac9 4900 	pkhbt	r9, r9, r0, lsl #16
   13c9a:	f852 0b04 	ldr.w	r0, [r2], #4
   13c9e:	9215      	str	r2, [sp, #84]	; 0x54
  return (op1 >> op2) | (op1 << (32U - op2));
   13ca0:	ea4f 2e30 	mov.w	lr, r0, ror #8
   13ca4:	f8d7 8000 	ldr.w	r8, [r7]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13ca8:	fa2f f28e 	sxtb16	r2, lr
   13cac:	fa2f f080 	sxtb16	r0, r0
   13cb0:	921a      	str	r2, [sp, #104]	; 0x68
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   13cb2:	eac2 4e20 	pkhtb	lr, r2, r0, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   13cb6:	eac0 4002 	pkhbt	r0, r0, r2, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13cba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13cbc:	fb29 1102 	smlad	r1, r9, r2, r1
   13cc0:	fb29 4408 	smlad	r4, r9, r8, r4
   13cc4:	fb20 cc02 	smlad	ip, r0, r2, ip
   13cc8:	9a06      	ldr	r2, [sp, #24]
   13cca:	fb20 2008 	smlad	r0, r0, r8, r2
    memcpy(&val, *in_q15, 4);
   13cce:	f8d6 9004 	ldr.w	r9, [r6, #4]
    *in_q15 += 2;
   13cd2:	f8d7 8004 	ldr.w	r8, [r7, #4]
   13cd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   13cd8:	3608      	adds	r6, #8
   13cda:	3708      	adds	r7, #8
   13cdc:	fb22 1109 	smlad	r1, r2, r9, r1
   13ce0:	fb22 4408 	smlad	r4, r2, r8, r4
   13ce4:	fb2e cc09 	smlad	ip, lr, r9, ip
   13ce8:	fb2e 0208 	smlad	r2, lr, r8, r0
   13cec:	9206      	str	r2, [sp, #24]
            col_count--;
   13cee:	e6c8      	b.n	13a82 <arm_nn_mat_mult_kernel_s8_s16+0x1b2>
            q15_t b0 = *ip_b0++;
   13cf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
            q15_t b1 = *ip_b1++;
   13cf2:	f936 eb02 	ldrsh.w	lr, [r6], #2
            q15_t b0 = *ip_b0++;
   13cf6:	f932 8b02 	ldrsh.w	r8, [r2], #2
            ch_1_out_1 += a1 * b1;
   13cfa:	9d06      	ldr	r5, [sp, #24]
            q15_t b0 = *ip_b0++;
   13cfc:	9215      	str	r2, [sp, #84]	; 0x54
            q7_t a1 = *ip_a1++;
   13cfe:	f917 2b01 	ldrsb.w	r2, [r7], #1
            q7_t a0 = *ip_a0++;
   13d02:	f910 9b01 	ldrsb.w	r9, [r0], #1
            ch_1_out_0 += a1 * b0;
   13d06:	fb18 cc02 	smlabb	ip, r8, r2, ip
            ch_1_out_1 += a1 * b1;
   13d0a:	fb1e 5202 	smlabb	r2, lr, r2, r5
            ch_0_out_0 += a0 * b0;
   13d0e:	fb18 1109 	smlabb	r1, r8, r9, r1
            ch_0_out_1 += a0 * b1;
   13d12:	fb1e 4409 	smlabb	r4, lr, r9, r4
            ch_1_out_1 += a1 * b1;
   13d16:	9206      	str	r2, [sp, #24]
            col_count--;
   13d18:	e6c1      	b.n	13a9e <arm_nn_mat_mult_kernel_s8_s16+0x1ce>
    memcpy(&val, *in_q7, 4);
   13d1a:	f856 4b04 	ldr.w	r4, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
   13d1e:	ea4f 2e34 	mov.w	lr, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13d22:	fa2f f484 	sxtb16	r4, r4
   13d26:	fa2f fe8e 	sxtb16	lr, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   13d2a:	eace 4724 	pkhtb	r7, lr, r4, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   13d2e:	eac4 440e 	pkhbt	r4, r4, lr, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13d32:	f8db e000 	ldr.w	lr, [fp]
   13d36:	fb24 330e 	smlad	r3, r4, lr, r3
   13d3a:	9902      	ldr	r1, [sp, #8]
   13d3c:	f8d1 e000 	ldr.w	lr, [r1]
   13d40:	fb24 cc0e 	smlad	ip, r4, lr, ip
    memcpy(&val, *in_q15, 4);
   13d44:	684c      	ldr	r4, [r1, #4]
   13d46:	f8db e004 	ldr.w	lr, [fp, #4]
    *in_q15 += 2;
   13d4a:	3108      	adds	r1, #8
   13d4c:	f10b 0b08 	add.w	fp, fp, #8
   13d50:	9102      	str	r1, [sp, #8]
   13d52:	fb27 330e 	smlad	r3, r7, lr, r3
   13d56:	fb27 cc04 	smlad	ip, r7, r4, ip
            col_count--;
   13d5a:	e608      	b.n	1396e <arm_nn_mat_mult_kernel_s8_s16+0x9e>
            ch_0_out_0 += a0 * b0;
   13d5c:	9908      	ldr	r1, [sp, #32]
            q7_t a0 = *ip_a0++;
   13d5e:	572e      	ldrsb	r6, [r5, r4]
            ch_0_out_0 += a0 * b0;
   13d60:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
            ch_0_out_1 += a0 * b1;
   13d64:	9916      	ldr	r1, [sp, #88]	; 0x58
            ch_0_out_0 += a0 * b0;
   13d66:	fb1e 3306 	smlabb	r3, lr, r6, r3
            ch_0_out_1 += a0 * b1;
   13d6a:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
   13d6e:	3401      	adds	r4, #1
   13d70:	fb1e cc06 	smlabb	ip, lr, r6, ip
            col_count--;
   13d74:	e605      	b.n	13982 <arm_nn_mat_mult_kernel_s8_s16+0xb2>

00013d76 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
   13d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d7a:	b08a      	sub	sp, #40	; 0x28
   13d7c:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
   13d80:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
   13d84:	681d      	ldr	r5, [r3, #0]
{
   13d86:	460c      	mov	r4, r1
   13d88:	4616      	mov	r6, r2

    while (batch_cnt)
   13d8a:	b91d      	cbnz	r5, 13d94 <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
   13d8c:	4628      	mov	r0, r5
   13d8e:	b00a      	add	sp, #40	; 0x28
   13d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
   13d94:	6923      	ldr	r3, [r4, #16]
   13d96:	9308      	str	r3, [sp, #32]
   13d98:	68e3      	ldr	r3, [r4, #12]
   13d9a:	9307      	str	r3, [sp, #28]
   13d9c:	f8da 300c 	ldr.w	r3, [sl, #12]
   13da0:	9306      	str	r3, [sp, #24]
   13da2:	f8d9 3000 	ldr.w	r3, [r9]
   13da6:	9305      	str	r3, [sp, #20]
   13da8:	6873      	ldr	r3, [r6, #4]
   13daa:	9304      	str	r3, [sp, #16]
   13dac:	6833      	ldr	r3, [r6, #0]
   13dae:	9303      	str	r3, [sp, #12]
   13db0:	68a3      	ldr	r3, [r4, #8]
   13db2:	9302      	str	r3, [sp, #8]
   13db4:	6863      	ldr	r3, [r4, #4]
   13db6:	9301      	str	r3, [sp, #4]
   13db8:	6823      	ldr	r3, [r4, #0]
   13dba:	9300      	str	r3, [sp, #0]
   13dbc:	4638      	mov	r0, r7
   13dbe:	4643      	mov	r3, r8
   13dc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13dc2:	9914      	ldr	r1, [sp, #80]	; 0x50
   13dc4:	f000 fbb0 	bl	14528 <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
   13dc8:	f8d9 3000 	ldr.w	r3, [r9]
   13dcc:	441f      	add	r7, r3
        output += output_dims->c;
   13dce:	f8da 300c 	ldr.w	r3, [sl, #12]
        batch_cnt--;
   13dd2:	3d01      	subs	r5, #1
        output += output_dims->c;
   13dd4:	4498      	add	r8, r3
        batch_cnt--;
   13dd6:	e7d8      	b.n	13d8a <arm_fully_connected_s8+0x14>

00013dd8 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
   13dd8:	2000      	movs	r0, #0
   13dda:	4770      	bx	lr

00013ddc <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
   13ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13de0:	b0a9      	sub	sp, #164	; 0xa4
   13de2:	9320      	str	r3, [sp, #128]	; 0x80
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
   13de4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
{
   13de6:	9209      	str	r2, [sp, #36]	; 0x24
        int32_t lhs_rows_idx = lhs_rows >> 1;
   13de8:	105b      	asrs	r3, r3, #1
   13dea:	9322      	str	r3, [sp, #136]	; 0x88

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
   13dec:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   13dee:	9a22      	ldr	r2, [sp, #136]	; 0x88
{
   13df0:	911f      	str	r1, [sp, #124]	; 0x7c
        rhs += 2 * rhs_cols;
   13df2:	005b      	lsls	r3, r3, #1
   13df4:	930f      	str	r3, [sp, #60]	; 0x3c
   13df6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
{
   13df8:	900e      	str	r0, [sp, #56]	; 0x38
   13dfa:	4353      	muls	r3, r2
   13dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13dfe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   13e02:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   13e04:	930d      	str	r3, [sp, #52]	; 0x34
   13e06:	460b      	mov	r3, r1
   13e08:	4413      	add	r3, r2
   13e0a:	2a00      	cmp	r2, #0
   13e0c:	931e      	str	r3, [sp, #120]	; 0x78
   13e0e:	f022 030f 	bic.w	r3, r2, #15
   13e12:	bfb8      	it	lt
   13e14:	2300      	movlt	r3, #0
   13e16:	9308      	str	r3, [sp, #32]
   13e18:	4613      	mov	r3, r2
   13e1a:	9a08      	ldr	r2, [sp, #32]
   13e1c:	9908      	ldr	r1, [sp, #32]
   13e1e:	1a9b      	subs	r3, r3, r2
   13e20:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   13e22:	428a      	cmp	r2, r1
   13e24:	bfb8      	it	lt
   13e26:	2300      	movlt	r3, #0
   13e28:	4413      	add	r3, r2
   13e2a:	9324      	str	r3, [sp, #144]	; 0x90
   13e2c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   13e2e:	005b      	lsls	r3, r3, #1
   13e30:	9325      	str	r3, [sp, #148]	; 0x94
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   13e32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   13e34:	9303      	str	r3, [sp, #12]
   13e36:	2304      	movs	r3, #4
   13e38:	9306      	str	r3, [sp, #24]
   13e3a:	2300      	movs	r3, #0
   13e3c:	9300      	str	r3, [sp, #0]
   13e3e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   13e40:	3b01      	subs	r3, #1
   13e42:	9326      	str	r3, [sp, #152]	; 0x98
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13e44:	f1a2 030f 	sub.w	r3, r2, #15
   13e48:	9323      	str	r3, [sp, #140]	; 0x8c
            dst_ptr[1] = (q7_t)res11;
   13e4a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   13e4c:	3301      	adds	r3, #1
   13e4e:	9327      	str	r3, [sp, #156]	; 0x9c
   13e50:	9a00      	ldr	r2, [sp, #0]
   13e52:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13e54:	4413      	add	r3, r2
   13e56:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   13e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
   13e5a:	4293      	cmp	r3, r2
   13e5c:	f340 82e9 	ble.w	14432 <arm_nn_mat_mult_nt_t_s8+0x656>
   13e60:	9b03      	ldr	r3, [sp, #12]
        for (int32_t x = 0; x < rhs_cols; ++x)
   13e62:	9803      	ldr	r0, [sp, #12]
   13e64:	1e5a      	subs	r2, r3, #1
        q31_t lhs_offset_contribution1 = 0;
   13e66:	2300      	movs	r3, #0
        q31_t lhs_offset_contribution0 = 0;
   13e68:	4619      	mov	r1, r3
        for (int32_t x = 0; x < rhs_cols; ++x)
   13e6a:	f1c0 0001 	rsb	r0, r0, #1
   13e6e:	e005      	b.n	13e7c <arm_nn_mat_mult_nt_t_s8+0xa0>
            lhs_offset_contribution0 += rhs[x];
   13e70:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
   13e74:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   13e76:	9c36      	ldr	r4, [sp, #216]	; 0xd8
   13e78:	5714      	ldrsb	r4, [r2, r4]
   13e7a:	4423      	add	r3, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
   13e7c:	9d36      	ldr	r5, [sp, #216]	; 0xd8
   13e7e:	1884      	adds	r4, r0, r2
   13e80:	42a5      	cmp	r5, r4
   13e82:	dcf5      	bgt.n	13e70 <arm_nn_mat_mult_nt_t_s8+0x94>
        lhs_offset_contribution0 *= lhs_offset;
   13e84:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   13e86:	434a      	muls	r2, r1
   13e88:	9201      	str	r2, [sp, #4]
        lhs_offset_contribution1 *= lhs_offset;
   13e8a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   13e8c:	4353      	muls	r3, r2
   13e8e:	9302      	str	r3, [sp, #8]
        if (bias)
   13e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13e92:	b15b      	cbz	r3, 13eac <arm_nn_mat_mult_nt_t_s8+0xd0>
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   13e94:	9a00      	ldr	r2, [sp, #0]
   13e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13e9a:	9a01      	ldr	r2, [sp, #4]
   13e9c:	441a      	add	r2, r3
   13e9e:	9201      	str	r2, [sp, #4]
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   13ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13ea2:	9a06      	ldr	r2, [sp, #24]
   13ea4:	589b      	ldr	r3, [r3, r2]
   13ea6:	9a02      	ldr	r2, [sp, #8]
   13ea8:	441a      	add	r2, r3
   13eaa:	9202      	str	r2, [sp, #8]
        while (lhs_rows_idx)
   13eac:	9b08      	ldr	r3, [sp, #32]
   13eae:	9a03      	ldr	r2, [sp, #12]
   13eb0:	3b01      	subs	r3, #1
   13eb2:	18d3      	adds	r3, r2, r3
   13eb4:	930c      	str	r3, [sp, #48]	; 0x30
        const q7_t *lhs_ptr = &lhs[0];
   13eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13eb8:	9305      	str	r3, [sp, #20]
        int32_t lhs_rows_idx = lhs_rows >> 1;
   13eba:	9b22      	ldr	r3, [sp, #136]	; 0x88
            lhs_rows_idx--;
   13ebc:	9304      	str	r3, [sp, #16]
        while (lhs_rows_idx)
   13ebe:	9b04      	ldr	r3, [sp, #16]
   13ec0:	2b00      	cmp	r3, #0
   13ec2:	f000 81a3 	beq.w	1420c <arm_nn_mat_mult_nt_t_s8+0x430>
   13ec6:	9b05      	ldr	r3, [sp, #20]
   13ec8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
            q31_t res10 = lhs_offset_contribution0;
   13eca:	f8dd b004 	ldr.w	fp, [sp, #4]
        while (lhs_rows_idx)
   13ece:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   13ed0:	189d      	adds	r5, r3, r2
            q31_t res11 = lhs_offset_contribution1;
   13ed2:	9b02      	ldr	r3, [sp, #8]
   13ed4:	930a      	str	r3, [sp, #40]	; 0x28
            int32_t rhs_cols_idx = 0;
   13ed6:	2200      	movs	r2, #0
            q31_t res01 = lhs_offset_contribution1;
   13ed8:	461e      	mov	r6, r3
            int32_t rhs_cols_idx = 0;
   13eda:	920b      	str	r2, [sp, #44]	; 0x2c
            q31_t res00 = lhs_offset_contribution0;
   13edc:	465b      	mov	r3, fp
   13ede:	e0a0      	b.n	14022 <arm_nn_mat_mult_nt_t_s8+0x246>
    memcpy(&val, *in_q7, 4);
   13ee0:	f8d9 1000 	ldr.w	r1, [r9]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13ee4:	f8da 0000 	ldr.w	r0, [sl]
   13ee8:	fa2f fe81 	sxtb16	lr, r1
   13eec:	fa2f f880 	sxtb16	r8, r0
    memcpy(&val, in_q7, 4);
   13ef0:	6822      	ldr	r2, [r4, #0]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13ef2:	fa2f f191 	sxtb16	r1, r1, ror #8
   13ef6:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13efa:	fb28 330e 	smlad	r3, r8, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13efe:	fa2f f782 	sxtb16	r7, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f02:	fb20 3301 	smlad	r3, r0, r1, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13f06:	fa2f fc92 	sxtb16	ip, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f0a:	fb28 6607 	smlad	r6, r8, r7, r6
   13f0e:	fb20 600c 	smlad	r0, r0, ip, r6
   13f12:	682a      	ldr	r2, [r5, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13f14:	fa2f f882 	sxtb16	r8, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13f18:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f1c:	fb28 be0e 	smlad	lr, r8, lr, fp
   13f20:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   13f22:	fb28 6707 	smlad	r7, r8, r7, r6
   13f26:	fb22 e101 	smlad	r1, r2, r1, lr
    memcpy(&val, *in_q7, 4);
   13f2a:	f8d9 e004 	ldr.w	lr, [r9, #4]
   13f2e:	fb22 720c 	smlad	r2, r2, ip, r7
    memcpy(&val, in_q7, 4);
   13f32:	f8da 8004 	ldr.w	r8, [sl, #4]
   13f36:	f8d4 c004 	ldr.w	ip, [r4, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13f3a:	fa2f f68e 	sxtb16	r6, lr
   13f3e:	fa2f f788 	sxtb16	r7, r8
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13f42:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   13f46:	fa2f f898 	sxtb16	r8, r8, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f4a:	fb27 3306 	smlad	r3, r7, r6, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13f4e:	fa2f fb8c 	sxtb16	fp, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f52:	fb28 330e 	smlad	r3, r8, lr, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13f56:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f5a:	fb27 000b 	smlad	r0, r7, fp, r0
   13f5e:	fb28 080c 	smlad	r8, r8, ip, r0
   13f62:	6868      	ldr	r0, [r5, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13f64:	fa2f f780 	sxtb16	r7, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13f68:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f6c:	fb27 1106 	smlad	r1, r7, r6, r1
   13f70:	fb27 220b 	smlad	r2, r7, fp, r2
   13f74:	fb20 1e0e 	smlad	lr, r0, lr, r1
    memcpy(&val, *in_q7, 4);
   13f78:	f8d9 b008 	ldr.w	fp, [r9, #8]
   13f7c:	fb20 2c0c 	smlad	ip, r0, ip, r2
    memcpy(&val, in_q7, 4);
   13f80:	f8da 1008 	ldr.w	r1, [sl, #8]
   13f84:	68a7      	ldr	r7, [r4, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13f86:	fa2f f28b 	sxtb16	r2, fp
   13f8a:	fa2f f081 	sxtb16	r0, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13f8e:	fa2f fb9b 	sxtb16	fp, fp, ror #8
   13f92:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f96:	fb20 3302 	smlad	r3, r0, r2, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13f9a:	fa2f f687 	sxtb16	r6, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f9e:	fb21 330b 	smlad	r3, r1, fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13fa2:	fa2f f797 	sxtb16	r7, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fa6:	fb20 8806 	smlad	r8, r0, r6, r8
   13faa:	fb21 8107 	smlad	r1, r1, r7, r8
   13fae:	f8d5 8008 	ldr.w	r8, [r5, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13fb2:	fa2f f088 	sxtb16	r0, r8
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13fb6:	fa2f f898 	sxtb16	r8, r8, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fba:	fb20 ee02 	smlad	lr, r0, r2, lr
   13fbe:	fb20 cc06 	smlad	ip, r0, r6, ip
   13fc2:	fb28 eb0b 	smlad	fp, r8, fp, lr
    memcpy(&val, *in_q7, 4);
   13fc6:	f8d9 000c 	ldr.w	r0, [r9, #12]
   13fca:	fb28 c707 	smlad	r7, r8, r7, ip
    memcpy(&val, in_q7, 4);
   13fce:	f8da 600c 	ldr.w	r6, [sl, #12]
   13fd2:	68e2      	ldr	r2, [r4, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13fd4:	fa2f fe80 	sxtb16	lr, r0
   13fd8:	fa2f f986 	sxtb16	r9, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13fdc:	fa2f fa90 	sxtb16	sl, r0, ror #8
   13fe0:	fa2f fc96 	sxtb16	ip, r6, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fe4:	fb29 330e 	smlad	r3, r9, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13fe8:	fa2f f882 	sxtb16	r8, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fec:	fb2c 330a 	smlad	r3, ip, sl, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13ff0:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13ff4:	fb29 1108 	smlad	r1, r9, r8, r1
   13ff8:	fb2c 1602 	smlad	r6, ip, r2, r1
   13ffc:	68ed      	ldr	r5, [r5, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13ffe:	fa2f f085 	sxtb16	r0, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   14002:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14006:	fb20 bb0e 	smlad	fp, r0, lr, fp
   1400a:	fb20 7708 	smlad	r7, r0, r8, r7
   1400e:	fb25 bb0a 	smlad	fp, r5, sl, fp
   14012:	fb25 7202 	smlad	r2, r5, r2, r7
   14016:	920a      	str	r2, [sp, #40]	; 0x28
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   14018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1401a:	9d21      	ldr	r5, [sp, #132]	; 0x84
   1401c:	3210      	adds	r2, #16
   1401e:	920b      	str	r2, [sp, #44]	; 0x2c
   14020:	3410      	adds	r4, #16
   14022:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14024:	9a05      	ldr	r2, [sp, #20]
   14026:	eb02 0a01 	add.w	sl, r2, r1
   1402a:	9a03      	ldr	r2, [sp, #12]
   1402c:	eb02 0901 	add.w	r9, r2, r1
   14030:	f105 0210 	add.w	r2, r5, #16
   14034:	9221      	str	r2, [sp, #132]	; 0x84
   14036:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   14038:	428a      	cmp	r2, r1
   1403a:	f73f af51 	bgt.w	13ee0 <arm_nn_mat_mult_nt_t_s8+0x104>
   1403e:	9908      	ldr	r1, [sp, #32]
   14040:	9a05      	ldr	r2, [sp, #20]
   14042:	f8dd e020 	ldr.w	lr, [sp, #32]
   14046:	440a      	add	r2, r1
   14048:	990c      	ldr	r1, [sp, #48]	; 0x30
   1404a:	4614      	mov	r4, r2
   1404c:	1e50      	subs	r0, r2, #1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1404e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   14050:	4596      	cmp	lr, r2
   14052:	f2c0 80c6 	blt.w	141e2 <arm_nn_mat_mult_nt_t_s8+0x406>
   14056:	9a24      	ldr	r2, [sp, #144]	; 0x90
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   14058:	9900      	ldr	r1, [sp, #0]
   1405a:	18a2      	adds	r2, r4, r2
   1405c:	9205      	str	r2, [sp, #20]
   1405e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   14060:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   14064:	9221      	str	r2, [sp, #132]	; 0x84
   14066:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    mult.word.high = 0;
   14068:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
   1406c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14070:	9921      	ldr	r1, [sp, #132]	; 0x84
    mult.word.high = 0;
   14072:	2200      	movs	r2, #0
   14074:	e9cd 9210 	strd	r9, r2, [sp, #64]	; 0x40
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14078:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1407c:	ea25 7ee5 	bic.w	lr, r5, r5, asr #31
   14080:	2d00      	cmp	r5, #0
   14082:	fa03 f30e 	lsl.w	r3, r3, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14086:	fbc1 7803 	smlal	r7, r8, r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1408a:	bfd4      	ite	le
   1408c:	426d      	negle	r5, r5
   1408e:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   14090:	2301      	movs	r3, #1
   14092:	fa03 fc05 	lsl.w	ip, r3, r5
    result = (int32_t)(mult.long_long >> 31);
   14096:	0ffc      	lsrs	r4, r7, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   14098:	f10c 33ff 	add.w	r3, ip, #4294967295
    result = (int32_t)(mult.long_long >> 31);
   1409c:	ea44 0448 	orr.w	r4, r4, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
   140a0:	ea04 0203 	and.w	r2, r4, r3
    q31_t threshold = remainder_mask >> 1;
   140a4:	ea4f 0963 	mov.w	r9, r3, asr #1
    if (result < 0)
   140a8:	412c      	asrs	r4, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
   140aa:	930b      	str	r3, [sp, #44]	; 0x2c
        threshold++;
   140ac:	bf4c      	ite	mi
   140ae:	f109 0301 	addmi.w	r3, r9, #1
    q31_t threshold = remainder_mask >> 1;
   140b2:	464b      	movpl	r3, r9
    if (remainder > threshold)
   140b4:	429a      	cmp	r2, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   140b6:	9a06      	ldr	r2, [sp, #24]
   140b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   140ba:	5899      	ldr	r1, [r3, r2]
   140bc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    mult.word.high = 0;
   140be:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   140c2:	5898      	ldr	r0, [r3, r2]
   140c4:	f04f 0300 	mov.w	r3, #0
   140c8:	e9cd 8312 	strd	r8, r3, [sp, #72]	; 0x48
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   140cc:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   140d0:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
   140d4:	fa06 f602 	lsl.w	r6, r6, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   140d8:	fbc1 7806 	smlal	r7, r8, r1, r6
        result++;
   140dc:	bfc8      	it	gt
   140de:	3401      	addgt	r4, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   140e0:	2800      	cmp	r0, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   140e2:	f04f 0601 	mov.w	r6, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   140e6:	bfd4      	ite	le
   140e8:	4240      	negle	r0, r0
   140ea:	2000      	movgt	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   140ec:	0ffb      	lsrs	r3, r7, #31
   140ee:	ea43 0348 	orr.w	r3, r3, r8, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   140f2:	fa06 f800 	lsl.w	r8, r6, r0
   140f6:	f108 38ff 	add.w	r8, r8, #4294967295
    q31_t threshold = remainder_mask >> 1;
   140fa:	fa48 fa06 	asr.w	sl, r8, r6
    int32_t remainder = remainder_mask & dividend;
   140fe:	ea03 0708 	and.w	r7, r3, r8
    if (result < 0)
   14102:	4103      	asrs	r3, r0
        threshold++;
   14104:	bf4c      	ite	mi
   14106:	4456      	addmi	r6, sl
    q31_t threshold = remainder_mask >> 1;
   14108:	4656      	movpl	r6, sl
    if (remainder > threshold)
   1410a:	42b7      	cmp	r7, r6
    mult.word.high = 0;
   1410c:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   14110:	f04f 0600 	mov.w	r6, #0
   14114:	e9cd c614 	strd	ip, r6, [sp, #80]	; 0x50
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14118:	fa0b fe0e 	lsl.w	lr, fp, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1411c:	e9dd bc14 	ldrd	fp, ip, [sp, #80]	; 0x50
   14120:	9f21      	ldr	r7, [sp, #132]	; 0x84
    int32_t remainder = remainder_mask & dividend;
   14122:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14124:	fbc7 bc0e 	smlal	fp, ip, r7, lr
    result = (int32_t)(mult.long_long >> 31);
   14128:	ea4f 7edb 	mov.w	lr, fp, lsr #31
   1412c:	ea4e 0e4c 	orr.w	lr, lr, ip, lsl #1
    int32_t remainder = remainder_mask & dividend;
   14130:	ea0e 0c06 	and.w	ip, lr, r6
    mult.word.high = 0;
   14134:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   14138:	f04f 0600 	mov.w	r6, #0
   1413c:	e9cd 7616 	strd	r7, r6, [sp, #88]	; 0x58
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14140:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14142:	fa06 f602 	lsl.w	r6, r6, r2
   14146:	4632      	mov	r2, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14148:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
        result++;
   1414c:	bfc8      	it	gt
   1414e:	3301      	addgt	r3, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14150:	fbc1 6702 	smlal	r6, r7, r1, r2
    if (result < 0)
   14154:	fa5e f505 	asrs.w	r5, lr, r5
        threshold++;
   14158:	bf48      	it	mi
   1415a:	f109 0901 	addmi.w	r9, r9, #1
    result = (int32_t)(mult.long_long >> 31);
   1415e:	0ff2      	lsrs	r2, r6, #31
   14160:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    if (remainder > threshold)
   14164:	45cc      	cmp	ip, r9
        result++;
   14166:	bfc8      	it	gt
   14168:	3501      	addgt	r5, #1
    if (result < 0)
   1416a:	fa52 f000 	asrs.w	r0, r2, r0
    int32_t remainder = remainder_mask & dividend;
   1416e:	ea02 0808 	and.w	r8, r2, r8
        threshold++;
   14172:	bf48      	it	mi
   14174:	f10a 0a01 	addmi.w	sl, sl, #1
            res00 += dst_offset;
   14178:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    if (remainder > threshold)
   1417a:	45d0      	cmp	r8, sl
        result++;
   1417c:	bfc8      	it	gt
   1417e:	3001      	addgt	r0, #1
            res01 += dst_offset;
   14180:	4413      	add	r3, r2
            res00 += dst_offset;
   14182:	4414      	add	r4, r2
            res10 += dst_offset;
   14184:	4415      	add	r5, r2
            res11 += dst_offset;
   14186:	4410      	add	r0, r2
            res00 = MAX(res00, activation_min);
   14188:	9a39      	ldr	r2, [sp, #228]	; 0xe4
   1418a:	4294      	cmp	r4, r2
   1418c:	bfb8      	it	lt
   1418e:	4614      	movlt	r4, r2
            res01 = MAX(res01, activation_min);
   14190:	4293      	cmp	r3, r2
   14192:	bfb8      	it	lt
   14194:	4613      	movlt	r3, r2
            res10 = MAX(res10, activation_min);
   14196:	4295      	cmp	r5, r2
   14198:	bfb8      	it	lt
   1419a:	4615      	movlt	r5, r2
            res11 = MAX(res11, activation_min);
   1419c:	4290      	cmp	r0, r2
   1419e:	bfb8      	it	lt
   141a0:	4610      	movlt	r0, r2
            res00 = MIN(res00, activation_max);
   141a2:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   141a4:	4294      	cmp	r4, r2
   141a6:	bfa8      	it	ge
   141a8:	4614      	movge	r4, r2
            dst_ptr[0] = (q7_t)res00;
   141aa:	9a07      	ldr	r2, [sp, #28]
   141ac:	7014      	strb	r4, [r2, #0]
            res01 = MIN(res01, activation_max);
   141ae:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   141b0:	4293      	cmp	r3, r2
   141b2:	bfa8      	it	ge
   141b4:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
   141b6:	9a07      	ldr	r2, [sp, #28]
   141b8:	7053      	strb	r3, [r2, #1]
            res10 = MIN(res10, activation_max);
   141ba:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   141bc:	429d      	cmp	r5, r3
   141be:	bfa8      	it	ge
   141c0:	461d      	movge	r5, r3
            dst_ptr[0] = (q7_t)res10;
   141c2:	4613      	mov	r3, r2
   141c4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   141c6:	549d      	strb	r5, [r3, r2]
            res11 = MIN(res11, activation_max);
   141c8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
            dst_ptr[1] = (q7_t)res11;
   141ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            res11 = MIN(res11, activation_max);
   141cc:	4298      	cmp	r0, r3
   141ce:	bfa8      	it	ge
   141d0:	4618      	movge	r0, r3
            dst_ptr[1] = (q7_t)res11;
   141d2:	9b07      	ldr	r3, [sp, #28]
   141d4:	5498      	strb	r0, [r3, r2]
            dst_ptr += rhs_rows;
   141d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   141d8:	4413      	add	r3, r2
   141da:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
   141dc:	9b04      	ldr	r3, [sp, #16]
   141de:	3b01      	subs	r3, #1
   141e0:	e66c      	b.n	13ebc <arm_nn_mat_mult_nt_t_s8+0xe0>
                q7_t rhs_value0 = rhs_ptr[0];
   141e2:	f911 cf01 	ldrsb.w	ip, [r1, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   141e6:	9d36      	ldr	r5, [sp, #216]	; 0xd8
                res11 += lhs_value * rhs_value1;
   141e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   141ea:	574f      	ldrsb	r7, [r1, r5]
                q7_t lhs_value = lhs_ptr[0];
   141ec:	f910 5f01 	ldrsb.w	r5, [r0, #1]!
                res00 += lhs_value * rhs_value0;
   141f0:	fb15 330c 	smlabb	r3, r5, ip, r3
                res01 += lhs_value * rhs_value1;
   141f4:	fb15 6607 	smlabb	r6, r5, r7, r6
                lhs_value = lhs_ptr[rhs_cols];
   141f8:	9d36      	ldr	r5, [sp, #216]	; 0xd8
   141fa:	5745      	ldrsb	r5, [r0, r5]
                res10 += lhs_value * rhs_value0;
   141fc:	fb1c bb05 	smlabb	fp, ip, r5, fp
                res11 += lhs_value * rhs_value1;
   14200:	fb17 2505 	smlabb	r5, r7, r5, r2
   14204:	950a      	str	r5, [sp, #40]	; 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   14206:	f10e 0e01 	add.w	lr, lr, #1
   1420a:	e720      	b.n	1404e <arm_nn_mat_mult_nt_t_s8+0x272>
        if (lhs_rows % 2)
   1420c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   1420e:	07de      	lsls	r6, r3, #31
   14210:	f140 8084 	bpl.w	1431c <arm_nn_mat_mult_nt_t_s8+0x540>
   14214:	9b03      	ldr	r3, [sp, #12]
   14216:	9a36      	ldr	r2, [sp, #216]	; 0xd8
            int32_t rhs_cols_idx = 0;
   14218:	9c04      	ldr	r4, [sp, #16]
   1421a:	1899      	adds	r1, r3, r2
   1421c:	9b05      	ldr	r3, [sp, #20]
   1421e:	191e      	adds	r6, r3, r4
   14220:	9b03      	ldr	r3, [sp, #12]
   14222:	191d      	adds	r5, r3, r4
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   14224:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   14226:	42a3      	cmp	r3, r4
   14228:	f300 8089 	bgt.w	1433e <arm_nn_mat_mult_nt_t_s8+0x562>
   1422c:	9a08      	ldr	r2, [sp, #32]
   1422e:	9b05      	ldr	r3, [sp, #20]
   14230:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   14232:	9a05      	ldr	r2, [sp, #20]
   14234:	4254      	negs	r4, r2
   14236:	9936      	ldr	r1, [sp, #216]	; 0xd8
   14238:	191a      	adds	r2, r3, r4
   1423a:	4291      	cmp	r1, r2
   1423c:	f300 80e7 	bgt.w	1440e <arm_nn_mat_mult_nt_t_s8+0x632>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   14240:	9a00      	ldr	r2, [sp, #0]
   14242:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   14244:	9900      	ldr	r1, [sp, #0]
   14246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1424a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    mult.word.high = 0;
   1424c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   14250:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14254:	9901      	ldr	r1, [sp, #4]
    mult.word.high = 0;
   14256:	2200      	movs	r2, #0
   14258:	e9cd 5218 	strd	r5, r2, [sp, #96]	; 0x60
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1425c:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14260:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
   14264:	2800      	cmp	r0, #0
   14266:	fa01 f102 	lsl.w	r1, r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1426a:	fbc3 4501 	smlal	r4, r5, r3, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1426e:	bfd4      	ite	le
   14270:	4240      	negle	r0, r0
   14272:	2000      	movgt	r0, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   14274:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   14276:	0fe1      	lsrs	r1, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   14278:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1427a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1427e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   14280:	ea01 0203 	and.w	r2, r1, r3
    if (result < 0)
   14284:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   14286:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1428a:	bf48      	it	mi
   1428c:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1428e:	429a      	cmp	r2, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   14290:	9a06      	ldr	r2, [sp, #24]
   14292:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   14294:	9806      	ldr	r0, [sp, #24]
   14296:	589b      	ldr	r3, [r3, r2]
   14298:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    mult.word.high = 0;
   1429a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1429e:	5810      	ldr	r0, [r2, r0]
   142a0:	f04f 0200 	mov.w	r2, #0
   142a4:	e9cd 421a 	strd	r4, r2, [sp, #104]	; 0x68
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   142a8:	9c02      	ldr	r4, [sp, #8]
   142aa:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
   142ae:	fa04 f402 	lsl.w	r4, r4, r2
   142b2:	4622      	mov	r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   142b4:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
   142b8:	fbc3 4502 	smlal	r4, r5, r3, r2
    result = (int32_t)(mult.long_long >> 31);
   142bc:	ea4f 72d4 	mov.w	r2, r4, lsr #31
        result++;
   142c0:	bfc8      	it	gt
   142c2:	3101      	addgt	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   142c4:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
   142c6:	ea42 0345 	orr.w	r3, r2, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   142ca:	bfdc      	itt	le
   142cc:	4242      	negle	r2, r0
   142ce:	9204      	strle	r2, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   142d0:	9a04      	ldr	r2, [sp, #16]
    if (result < 0)
   142d2:	9c04      	ldr	r4, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   142d4:	2001      	movs	r0, #1
   142d6:	fa00 f202 	lsl.w	r2, r0, r2
   142da:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   142dc:	ea03 0002 	and.w	r0, r3, r2
    if (result < 0)
   142e0:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
   142e2:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   142e6:	bf48      	it	mi
   142e8:	3201      	addmi	r2, #1
    if (remainder > threshold)
   142ea:	4290      	cmp	r0, r2
            res00 += dst_offset;
   142ec:	9a38      	ldr	r2, [sp, #224]	; 0xe0
        result++;
   142ee:	bfc8      	it	gt
   142f0:	3301      	addgt	r3, #1
   142f2:	4411      	add	r1, r2
            res01 += dst_offset;
   142f4:	4413      	add	r3, r2
            res00 = MAX(res00, activation_min);
   142f6:	9a39      	ldr	r2, [sp, #228]	; 0xe4
   142f8:	4291      	cmp	r1, r2
   142fa:	bfb8      	it	lt
   142fc:	4611      	movlt	r1, r2
            res01 = MAX(res01, activation_min);
   142fe:	4293      	cmp	r3, r2
   14300:	bfb8      	it	lt
   14302:	4613      	movlt	r3, r2
            res00 = MIN(res00, activation_max);
   14304:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   14306:	4291      	cmp	r1, r2
   14308:	bfa8      	it	ge
   1430a:	4611      	movge	r1, r2
            dst_ptr[0] = (q7_t)res00;
   1430c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1430e:	7011      	strb	r1, [r2, #0]
            res01 = MIN(res01, activation_max);
   14310:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   14312:	4293      	cmp	r3, r2
   14314:	bfa8      	it	ge
   14316:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
   14318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1431a:	7053      	strb	r3, [r2, #1]
        rhs += 2 * rhs_cols;
   1431c:	9b03      	ldr	r3, [sp, #12]
   1431e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14320:	4413      	add	r3, r2
   14322:	9303      	str	r3, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   14324:	9b00      	ldr	r3, [sp, #0]
   14326:	3302      	adds	r3, #2
   14328:	9300      	str	r3, [sp, #0]
   1432a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1432c:	3302      	adds	r3, #2
   1432e:	930d      	str	r3, [sp, #52]	; 0x34
   14330:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14332:	4413      	add	r3, r2
   14334:	931e      	str	r3, [sp, #120]	; 0x78
   14336:	9b06      	ldr	r3, [sp, #24]
   14338:	3308      	adds	r3, #8
   1433a:	9306      	str	r3, [sp, #24]
   1433c:	e588      	b.n	13e50 <arm_nn_mat_mult_nt_t_s8+0x74>
    memcpy(&val, *in_q7, 4);
   1433e:	682f      	ldr	r7, [r5, #0]
    memcpy(&val, in_q7, 4);
   14340:	680a      	ldr	r2, [r1, #0]
    memcpy(&val, *in_q7, 4);
   14342:	6833      	ldr	r3, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   14344:	fa2f f887 	sxtb16	r8, r7
   14348:	fa2f fc83 	sxtb16	ip, r3
   1434c:	fa2f fe82 	sxtb16	lr, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   14350:	fa2f f797 	sxtb16	r7, r7, ror #8
   14354:	fa2f f393 	sxtb16	r3, r3, ror #8
   14358:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1435c:	9801      	ldr	r0, [sp, #4]
   1435e:	fb2c 0808 	smlad	r8, ip, r8, r0
   14362:	fb23 8707 	smlad	r7, r3, r7, r8
   14366:	9802      	ldr	r0, [sp, #8]
   14368:	fb2c 0c0e 	smlad	ip, ip, lr, r0
   1436c:	fb23 c202 	smlad	r2, r3, r2, ip
   14370:	6868      	ldr	r0, [r5, #4]
    memcpy(&val, in_q7, 4);
   14372:	f8d1 c004 	ldr.w	ip, [r1, #4]
    memcpy(&val, *in_q7, 4);
   14376:	6873      	ldr	r3, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   14378:	fa2f f980 	sxtb16	r9, r0
   1437c:	fa2f fe83 	sxtb16	lr, r3
   14380:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   14384:	fa2f f090 	sxtb16	r0, r0, ror #8
   14388:	fa2f f393 	sxtb16	r3, r3, ror #8
   1438c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14390:	fb2e 7709 	smlad	r7, lr, r9, r7
   14394:	fb23 7000 	smlad	r0, r3, r0, r7
   14398:	fb2e 2208 	smlad	r2, lr, r8, r2
   1439c:	fb23 230c 	smlad	r3, r3, ip, r2
   143a0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy(&val, in_q7, 4);
   143a4:	f8d1 e008 	ldr.w	lr, [r1, #8]
    memcpy(&val, *in_q7, 4);
   143a8:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   143ac:	fa2f f788 	sxtb16	r7, r8
   143b0:	fa2f f28c 	sxtb16	r2, ip
   143b4:	fa2f f98e 	sxtb16	r9, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   143b8:	fa2f f898 	sxtb16	r8, r8, ror #8
   143bc:	fa2f fc9c 	sxtb16	ip, ip, ror #8
   143c0:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   143c4:	fb22 0007 	smlad	r0, r2, r7, r0
   143c8:	fb2c 0808 	smlad	r8, ip, r8, r0
   143cc:	fb22 3309 	smlad	r3, r2, r9, r3
   143d0:	fb2c 3e0e 	smlad	lr, ip, lr, r3
   143d4:	68eb      	ldr	r3, [r5, #12]
    memcpy(&val, in_q7, 4);
   143d6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    memcpy(&val, *in_q7, 4);
   143da:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   143dc:	fa2f f083 	sxtb16	r0, r3
   143e0:	fa2f fc85 	sxtb16	ip, r5
   143e4:	fa2f f28a 	sxtb16	r2, sl
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   143e8:	fa2f f393 	sxtb16	r3, r3, ror #8
   143ec:	fa2f f595 	sxtb16	r5, r5, ror #8
   143f0:	fa2f fa9a 	sxtb16	sl, sl, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   143f4:	fb2c 8800 	smlad	r8, ip, r0, r8
   143f8:	fb25 8303 	smlad	r3, r5, r3, r8
   143fc:	9301      	str	r3, [sp, #4]
   143fe:	fb2c ee02 	smlad	lr, ip, r2, lr
   14402:	fb25 e30a 	smlad	r3, r5, sl, lr
   14406:	9302      	str	r3, [sp, #8]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   14408:	3410      	adds	r4, #16
   1440a:	3110      	adds	r1, #16
   1440c:	e706      	b.n	1421c <arm_nn_mat_mult_nt_t_s8+0x440>
                res00 += lhs_value * rhs_value0;
   1440e:	980c      	ldr	r0, [sp, #48]	; 0x30
                q7_t lhs_value = lhs_ptr[0];
   14410:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
   14414:	f910 1f01 	ldrsb.w	r1, [r0, #1]!
   14418:	900c      	str	r0, [sp, #48]	; 0x30
   1441a:	9801      	ldr	r0, [sp, #4]
   1441c:	fb12 0101 	smlabb	r1, r2, r1, r0
   14420:	9101      	str	r1, [sp, #4]
                res01 += lhs_value * rhs_value1;
   14422:	9836      	ldr	r0, [sp, #216]	; 0xd8
   14424:	990c      	ldr	r1, [sp, #48]	; 0x30
   14426:	5609      	ldrsb	r1, [r1, r0]
   14428:	9802      	ldr	r0, [sp, #8]
   1442a:	fb12 0201 	smlabb	r2, r2, r1, r0
   1442e:	9202      	str	r2, [sp, #8]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   14430:	e701      	b.n	14236 <arm_nn_mat_mult_nt_t_s8+0x45a>
   14432:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   14434:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   14436:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14438:	2a00      	cmp	r2, #0
   1443a:	ea4f 0353 	mov.w	r3, r3, lsr #1
   1443e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14440:	bfac      	ite	ge
   14442:	4619      	movge	r1, r3
   14444:	2100      	movlt	r1, #0
   14446:	fb02 0b01 	mla	fp, r2, r1, r0
   1444a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1444c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   14450:	bfb8      	it	lt
   14452:	2300      	movlt	r3, #0
   14454:	441a      	add	r2, r3
   14456:	4613      	mov	r3, r2
        dst += 2;
    }

    if (rhs_rows % 2)
   14458:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   1445a:	07d1      	lsls	r1, r2, #31
   1445c:	d514      	bpl.n	14488 <arm_nn_mat_mult_nt_t_s8+0x6ac>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
   1445e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   14462:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14464:	3801      	subs	r0, #1
   14466:	eb02 0780 	add.w	r7, r2, r0, lsl #2
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1446a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   1446c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
   14470:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   14472:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   14476:	9a36      	ldr	r2, [sp, #216]	; 0xd8
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   14478:	2600      	movs	r6, #0
   1447a:	ea22 7ee2 	bic.w	lr, r2, r2, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1447e:	f04f 0801 	mov.w	r8, #1
   14482:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   14484:	4296      	cmp	r6, r2
   14486:	db03      	blt.n	14490 <arm_nn_mat_mult_nt_t_s8+0x6b4>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
   14488:	2000      	movs	r0, #0
   1448a:	b029      	add	sp, #164	; 0xa4
   1448c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (bias)
   14490:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14492:	2a00      	cmp	r2, #0
   14494:	d03c      	beq.n	14510 <arm_nn_mat_mult_nt_t_s8+0x734>
                res00 = bias[rhs_rows - 1];
   14496:	683d      	ldr	r5, [r7, #0]
            q31_t res00 = 0;
   14498:	2200      	movs	r2, #0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1449a:	9936      	ldr	r1, [sp, #216]	; 0xd8
   1449c:	428a      	cmp	r2, r1
   1449e:	db39      	blt.n	14514 <arm_nn_mat_mult_nt_t_s8+0x738>
   144a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   144a2:	f8dc 4000 	ldr.w	r4, [ip]
    mult.word.high = 0;
   144a6:	2100      	movs	r1, #0
   144a8:	4472      	add	r2, lr
   144aa:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
   144ae:	e9cd 911c 	strd	r9, r1, [sp, #112]	; 0x70
   144b2:	920e      	str	r2, [sp, #56]	; 0x38
   144b4:	6802      	ldr	r2, [r0, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   144b6:	ea22 79e2 	bic.w	r9, r2, r2, asr #31
   144ba:	fa05 f509 	lsl.w	r5, r5, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   144be:	e9dd 9a1c 	ldrd	r9, sl, [sp, #112]	; 0x70
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   144c2:	428a      	cmp	r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   144c4:	fbc4 9a05 	smlal	r9, sl, r4, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   144c8:	bfd4      	ite	le
   144ca:	4252      	negle	r2, r2
   144cc:	2200      	movgt	r2, #0
    result = (int32_t)(mult.long_long >> 31);
   144ce:	ea4f 74d9 	mov.w	r4, r9, lsr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   144d2:	fa08 f502 	lsl.w	r5, r8, r2
    result = (int32_t)(mult.long_long >> 31);
   144d6:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   144da:	3d01      	subs	r5, #1
    if (result < 0)
   144dc:	fa54 f202 	asrs.w	r2, r4, r2
    int32_t remainder = remainder_mask & dividend;
   144e0:	ea04 0905 	and.w	r9, r4, r5
    q31_t threshold = remainder_mask >> 1;
   144e4:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
   144e8:	bf48      	it	mi
   144ea:	3501      	addmi	r5, #1
            res00 += dst_offset;
   144ec:	9938      	ldr	r1, [sp, #224]	; 0xe0
    if (remainder > threshold)
   144ee:	45a9      	cmp	r9, r5
        result++;
   144f0:	bfc8      	it	gt
   144f2:	3201      	addgt	r2, #1
   144f4:	440a      	add	r2, r1
            res00 = MAX(res00, activation_min);
   144f6:	9939      	ldr	r1, [sp, #228]	; 0xe4
   144f8:	428a      	cmp	r2, r1
   144fa:	bfb8      	it	lt
   144fc:	460a      	movlt	r2, r1
            res00 = MIN(res00, activation_max);
   144fe:	993a      	ldr	r1, [sp, #232]	; 0xe8
   14500:	428a      	cmp	r2, r1
   14502:	bfa8      	it	ge
   14504:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
   14506:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
   14508:	9a35      	ldr	r2, [sp, #212]	; 0xd4
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1450a:	3601      	adds	r6, #1
            dst_ptr += rhs_rows;
   1450c:	4413      	add	r3, r2
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1450e:	e7b8      	b.n	14482 <arm_nn_mat_mult_nt_t_s8+0x6a6>
            q31_t res00 = 0;
   14510:	9d09      	ldr	r5, [sp, #36]	; 0x24
   14512:	e7c1      	b.n	14498 <arm_nn_mat_mult_nt_t_s8+0x6bc>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   14514:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   14516:	9937      	ldr	r1, [sp, #220]	; 0xdc
   14518:	56a4      	ldrsb	r4, [r4, r2]
                q31_t rhs_value = rhs_ptr[0];
   1451a:	f91b 9002 	ldrsb.w	r9, [fp, r2]
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1451e:	440c      	add	r4, r1
                res00 += lhs_value * rhs_value;
   14520:	fb09 5504 	mla	r5, r9, r4, r5
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   14524:	3201      	adds	r2, #1
   14526:	e7b8      	b.n	1449a <arm_nn_mat_mult_nt_t_s8+0x6be>

00014528 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
   14528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1452c:	b099      	sub	sp, #100	; 0x64
   1452e:	930c      	str	r3, [sp, #48]	; 0x30
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   14530:	9b22      	ldr	r3, [sp, #136]	; 0x88
{
   14532:	9110      	str	r1, [sp, #64]	; 0x40
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   14534:	b21c      	sxth	r4, r3
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   14536:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   14538:	9926      	ldr	r1, [sp, #152]	; 0x98
{
   1453a:	9003      	str	r0, [sp, #12]
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   1453c:	b218      	sxth	r0, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1453e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   14540:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   14544:	2900      	cmp	r1, #0
   14546:	f1c3 0300 	rsb	r3, r3, #0
   1454a:	bfc8      	it	gt
   1454c:	2300      	movgt	r3, #0
   1454e:	9304      	str	r3, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   14550:	9904      	ldr	r1, [sp, #16]
   14552:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
   14556:	2301      	movs	r3, #1
   14558:	408b      	lsls	r3, r1
   1455a:	3b01      	subs	r3, #1
   1455c:	9305      	str	r3, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   1455e:	105b      	asrs	r3, r3, #1
   14560:	9306      	str	r3, [sp, #24]
        threshold++;
   14562:	3301      	adds	r3, #1
   14564:	930d      	str	r3, [sp, #52]	; 0x34
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
   14566:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   14568:	005b      	lsls	r3, r3, #1
   1456a:	930e      	str	r3, [sp, #56]	; 0x38
   1456c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1456e:	3302      	adds	r3, #2
   14570:	9301      	str	r3, [sp, #4]
   14572:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   14574:	091b      	lsrs	r3, r3, #4
   14576:	9312      	str	r3, [sp, #72]	; 0x48
   14578:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1457a:	f023 010f 	bic.w	r1, r3, #15
   1457e:	2b00      	cmp	r3, #0
   14580:	bfac      	ite	ge
   14582:	460b      	movge	r3, r1
   14584:	2300      	movlt	r3, #0
   14586:	9307      	str	r3, [sp, #28]
   14588:	9907      	ldr	r1, [sp, #28]
   1458a:	9b03      	ldr	r3, [sp, #12]
   1458c:	440b      	add	r3, r1
   1458e:	930f      	str	r3, [sp, #60]	; 0x3c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   14590:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14592:	9302      	str	r3, [sp, #8]
   14594:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   14596:	3b01      	subs	r3, #1
   14598:	9313      	str	r3, [sp, #76]	; 0x4c
   1459a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1459c:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
   145a0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   145a4:	33fe      	adds	r3, #254	; 0xfe
   145a6:	9314      	str	r3, [sp, #80]	; 0x50
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   145a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   145aa:	3b0f      	subs	r3, #15
   145ac:	9315      	str	r3, [sp, #84]	; 0x54
   145ae:	1e4b      	subs	r3, r1, #1
   145b0:	9316      	str	r3, [sp, #88]	; 0x58
   145b2:	9b03      	ldr	r3, [sp, #12]
   145b4:	425b      	negs	r3, r3
   145b6:	9317      	str	r3, [sp, #92]	; 0x5c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   145b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   145ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   145be:	9311      	str	r3, [sp, #68]	; 0x44
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   145c0:	9901      	ldr	r1, [sp, #4]
   145c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   145c4:	440b      	add	r3, r1
   145c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   145c8:	4299      	cmp	r1, r3
   145ca:	dc67      	bgt.n	1469c <arm_nn_vec_mat_mult_t_s8+0x174>
   145cc:	9928      	ldr	r1, [sp, #160]	; 0xa0
   145ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   145d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   145d2:	9e10      	ldr	r6, [sp, #64]	; 0x40
   145d4:	2900      	cmp	r1, #0
   145d6:	ea4f 0353 	mov.w	r3, r3, lsr #1
   145da:	bfac      	ite	ge
   145dc:	4619      	movge	r1, r3
   145de:	2100      	movlt	r1, #0
   145e0:	fb05 6101 	mla	r1, r5, r1, r6
   145e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   145e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
   145ea:	bfb8      	it	lt
   145ec:	2300      	movlt	r3, #0
   145ee:	441d      	add	r5, r3
   145f0:	462b      	mov	r3, r5
    }

    if (rhs_rows % 2)
   145f2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   145f4:	07ed      	lsls	r5, r5, #31
   145f6:	d54d      	bpl.n	14694 <arm_nn_vec_mat_mult_t_s8+0x16c>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = 0;
        if (bias)
   145f8:	b102      	cbz	r2, 145fc <arm_nn_vec_mat_mult_t_s8+0xd4>
        {
            res00 = *bias++;
   145fa:	6812      	ldr	r2, [r2, #0]
        }

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   145fc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
        q31_t res00 = 0;
   145fe:	f04f 0c00 	mov.w	ip, #0
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   14602:	f1a5 090f 	sub.w	r9, r5, #15
   14606:	9d03      	ldr	r5, [sp, #12]
   14608:	45e1      	cmp	r9, ip
   1460a:	eb05 080c 	add.w	r8, r5, ip
   1460e:	eb01 0e0c 	add.w	lr, r1, ip
   14612:	f300 8152 	bgt.w	148ba <arm_nn_vec_mat_mult_t_s8+0x392>
   14616:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   14618:	9812      	ldr	r0, [sp, #72]	; 0x48
   1461a:	2c00      	cmp	r4, #0
   1461c:	9c07      	ldr	r4, [sp, #28]
   1461e:	f104 34ff 	add.w	r4, r4, #4294967295
   14622:	4421      	add	r1, r4
   14624:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   14626:	ea4f 1000 	mov.w	r0, r0, lsl #4
   1462a:	bfb8      	it	lt
   1462c:	2000      	movlt	r0, #0
   1462e:	1b00      	subs	r0, r0, r4
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   14630:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   14632:	1825      	adds	r5, r4, r0
   14634:	42b5      	cmp	r5, r6
   14636:	f2c0 8193 	blt.w	14960 <arm_nn_vec_mat_mult_t_s8+0x438>
   1463a:	9c26      	ldr	r4, [sp, #152]	; 0x98
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1463c:	9d25      	ldr	r5, [sp, #148]	; 0x94
    mult.word.high = 0;
   1463e:	2100      	movs	r1, #0
   14640:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14644:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   14648:	40a2      	lsls	r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1464a:	4606      	mov	r6, r0
   1464c:	460f      	mov	r7, r1
   1464e:	fbc5 6702 	smlal	r6, r7, r5, r2
    result = (int32_t)(mult.long_long >> 31);
   14652:	0ff2      	lsrs	r2, r6, #31
   14654:	ea42 0447 	orr.w	r4, r2, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14658:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1465a:	2a00      	cmp	r2, #0
   1465c:	bfcc      	ite	gt
   1465e:	460a      	movgt	r2, r1
   14660:	4252      	negle	r2, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
   14662:	2101      	movs	r1, #1
   14664:	4091      	lsls	r1, r2
   14666:	3901      	subs	r1, #1
    if (result < 0)
   14668:	fa54 f202 	asrs.w	r2, r4, r2
    int32_t remainder = remainder_mask & dividend;
   1466c:	ea04 0001 	and.w	r0, r4, r1
    q31_t threshold = remainder_mask >> 1;
   14670:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   14674:	bf48      	it	mi
   14676:	3101      	addmi	r1, #1
    if (remainder > threshold)
   14678:	4288      	cmp	r0, r1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
   1467a:	9924      	ldr	r1, [sp, #144]	; 0x90
        result++;
   1467c:	bfc8      	it	gt
   1467e:	3201      	addgt	r2, #1
   14680:	440a      	add	r2, r1

        // Clamp the result
        res00 = MAX(res00, activation_min);
   14682:	9929      	ldr	r1, [sp, #164]	; 0xa4
   14684:	428a      	cmp	r2, r1
   14686:	bfb8      	it	lt
   14688:	460a      	movlt	r2, r1
        res00 = MIN(res00, activation_max);
   1468a:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1468c:	428a      	cmp	r2, r1
   1468e:	bfa8      	it	ge
   14690:	460a      	movge	r2, r1

        *dst = (q7_t)res00;
   14692:	701a      	strb	r2, [r3, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
   14694:	2000      	movs	r0, #0
   14696:	b019      	add	sp, #100	; 0x64
   14698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
   1469c:	2a00      	cmp	r2, #0
   1469e:	d074      	beq.n	1478a <arm_nn_vec_mat_mult_t_s8+0x262>
            res00 = *bias++;
   146a0:	4615      	mov	r5, r2
            res01 = *bias++;
   146a2:	6853      	ldr	r3, [r2, #4]
            res00 = *bias++;
   146a4:	f855 1b08 	ldr.w	r1, [r5], #8
            res01 = *bias++;
   146a8:	462a      	mov	r2, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   146aa:	9d02      	ldr	r5, [sp, #8]
   146ac:	9e27      	ldr	r6, [sp, #156]	; 0x9c
        int32_t rhs_cols_idx = 0;
   146ae:	f04f 0c00 	mov.w	ip, #0
   146b2:	19af      	adds	r7, r5, r6
   146b4:	9d03      	ldr	r5, [sp, #12]
   146b6:	eb05 080c 	add.w	r8, r5, ip
   146ba:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   146bc:	eba7 0e05 	sub.w	lr, r7, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   146c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
   146c2:	4565      	cmp	r5, ip
   146c4:	dc64      	bgt.n	14790 <arm_nn_vec_mat_mult_t_s8+0x268>
   146c6:	9d02      	ldr	r5, [sp, #8]
   146c8:	9e16      	ldr	r6, [sp, #88]	; 0x58
   146ca:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   146ce:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   146d0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   146d2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   146d4:	4475      	add	r5, lr
   146d6:	42ae      	cmp	r6, r5
   146d8:	f300 80dd 	bgt.w	14896 <arm_nn_vec_mat_mult_t_s8+0x36e>
    mult.word.high = 0;
   146dc:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   146e0:	2500      	movs	r5, #0
   146e2:	e9cd 7508 	strd	r7, r5, [sp, #32]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   146e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   146e8:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   146ec:	40a9      	lsls	r1, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   146ee:	9d25      	ldr	r5, [sp, #148]	; 0x94
   146f0:	fbc5 6701 	smlal	r6, r7, r5, r1
    result = (int32_t)(mult.long_long >> 31);
   146f4:	0ff1      	lsrs	r1, r6, #31
    int32_t remainder = remainder_mask & dividend;
   146f6:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   146f8:	9e04      	ldr	r6, [sp, #16]
    result = (int32_t)(mult.long_long >> 31);
   146fa:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    q31_t threshold = remainder_mask >> 1;
   146fe:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
   14700:	400d      	ands	r5, r1
    q31_t threshold = remainder_mask >> 1;
   14702:	4131      	asrs	r1, r6
   14704:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14706:	bf58      	it	pl
   14708:	463e      	movpl	r6, r7
    if (remainder > threshold)
   1470a:	42b5      	cmp	r5, r6
    mult.word.high = 0;
   1470c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   14710:	f04f 0500 	mov.w	r5, #0
   14714:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   14718:	9d11      	ldr	r5, [sp, #68]	; 0x44
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1471a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1471e:	fa03 f305 	lsl.w	r3, r3, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   14722:	9d25      	ldr	r5, [sp, #148]	; 0x94
   14724:	fbc5 6703 	smlal	r6, r7, r5, r3
    result = (int32_t)(mult.long_long >> 31);
   14728:	ea4f 73d6 	mov.w	r3, r6, lsr #31
    int32_t remainder = remainder_mask & dividend;
   1472c:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   1472e:	9e04      	ldr	r6, [sp, #16]
    result = (int32_t)(mult.long_long >> 31);
   14730:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    q31_t threshold = remainder_mask >> 1;
   14734:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
   14736:	ea03 0505 	and.w	r5, r3, r5
        result++;
   1473a:	bfc8      	it	gt
   1473c:	3101      	addgt	r1, #1
    q31_t threshold = remainder_mask >> 1;
   1473e:	4133      	asrs	r3, r6
   14740:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14742:	bf58      	it	pl
   14744:	463e      	movpl	r6, r7
    if (remainder > threshold)
   14746:	42b5      	cmp	r5, r6
        res00 += dst_offset;
   14748:	9d24      	ldr	r5, [sp, #144]	; 0x90
        result++;
   1474a:	bfc8      	it	gt
   1474c:	3301      	addgt	r3, #1
   1474e:	4429      	add	r1, r5
        res01 += dst_offset;
   14750:	442b      	add	r3, r5
        res00 = MAX(res00, activation_min);
   14752:	9d29      	ldr	r5, [sp, #164]	; 0xa4
   14754:	42a9      	cmp	r1, r5
   14756:	bfb8      	it	lt
   14758:	4629      	movlt	r1, r5
        res01 = MAX(res01, activation_min);
   1475a:	42ab      	cmp	r3, r5
   1475c:	bfb8      	it	lt
   1475e:	462b      	movlt	r3, r5
        res00 = MIN(res00, activation_max);
   14760:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
   14762:	42a9      	cmp	r1, r5
   14764:	bfa8      	it	ge
   14766:	4629      	movge	r1, r5
        *dst++ = (q7_t)res00;
   14768:	9d01      	ldr	r5, [sp, #4]
   1476a:	f805 1c02 	strb.w	r1, [r5, #-2]
        res01 = MIN(res01, activation_max);
   1476e:	992a      	ldr	r1, [sp, #168]	; 0xa8
   14770:	428b      	cmp	r3, r1
   14772:	bfa8      	it	ge
   14774:	460b      	movge	r3, r1
        *dst++ = (q7_t)res01;
   14776:	f805 3c01 	strb.w	r3, [r5, #-1]
        rhs += 2 * rhs_cols;
   1477a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1477c:	9b02      	ldr	r3, [sp, #8]
   1477e:	440b      	add	r3, r1
   14780:	9302      	str	r3, [sp, #8]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   14782:	462b      	mov	r3, r5
   14784:	3302      	adds	r3, #2
   14786:	9301      	str	r3, [sp, #4]
   14788:	e71a      	b.n	145c0 <arm_nn_vec_mat_mult_t_s8+0x98>
        q31_t res01 = 0;
   1478a:	4613      	mov	r3, r2
        q31_t res00 = 0;
   1478c:	4611      	mov	r1, r2
   1478e:	e78c      	b.n	146aa <arm_nn_vec_mat_mult_t_s8+0x182>
    memcpy(&val, *in_q7, 4);
   14790:	f8de b000 	ldr.w	fp, [lr]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14794:	f8d8 5000 	ldr.w	r5, [r8]
   14798:	fa20 f68b 	sxtab16	r6, r0, fp
   1479c:	fa24 fa85 	sxtab16	sl, r4, r5
   147a0:	f8d7 9000 	ldr.w	r9, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
   147a4:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   147a8:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147ac:	fa20 fb8b 	sxtab16	fp, r0, fp
   147b0:	fa24 f585 	sxtab16	r5, r4, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   147b4:	fb2a 1106 	smlad	r1, sl, r6, r1
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147b8:	fa20 f689 	sxtab16	r6, r0, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   147bc:	fb25 110b 	smlad	r1, r5, fp, r1
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147c0:	f8de b004 	ldr.w	fp, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   147c4:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147c8:	fa20 f989 	sxtab16	r9, r0, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   147cc:	fb2a 3306 	smlad	r3, sl, r6, r3
   147d0:	fb25 3309 	smlad	r3, r5, r9, r3
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
   147d8:	fa20 f68b 	sxtab16	r6, r0, fp
   147dc:	fa24 fa85 	sxtab16	sl, r4, r5
   147e0:	f8d7 9004 	ldr.w	r9, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   147e4:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   147e8:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147ec:	fa20 fb8b 	sxtab16	fp, r0, fp
   147f0:	fa24 f585 	sxtab16	r5, r4, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   147f4:	fb2a 1106 	smlad	r1, sl, r6, r1
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   147f8:	fa20 f689 	sxtab16	r6, r0, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   147fc:	fb25 110b 	smlad	r1, r5, fp, r1
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14800:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   14804:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14808:	fa20 f989 	sxtab16	r9, r0, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1480c:	fb2a 3606 	smlad	r6, sl, r6, r3
   14810:	fb25 6609 	smlad	r6, r5, r9, r6
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14814:	f8d8 5008 	ldr.w	r5, [r8, #8]
   14818:	fa20 f38b 	sxtab16	r3, r0, fp
   1481c:	fa24 f985 	sxtab16	r9, r4, r5
   14820:	f8d7 a008 	ldr.w	sl, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   14824:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   14828:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1482c:	fa20 fb8b 	sxtab16	fp, r0, fp
   14830:	fa24 f585 	sxtab16	r5, r4, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14834:	fb29 1103 	smlad	r1, r9, r3, r1
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14838:	fa20 f38a 	sxtab16	r3, r0, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1483c:	fb25 1b0b 	smlad	fp, r5, fp, r1
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14840:	f8de e00c 	ldr.w	lr, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
   14844:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14848:	fa20 fa8a 	sxtab16	sl, r0, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1484c:	fb29 6603 	smlad	r6, r9, r3, r6
   14850:	fb25 650a 	smlad	r5, r5, sl, r6
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14854:	f8d8 800c 	ldr.w	r8, [r8, #12]
   14858:	fa20 f98e 	sxtab16	r9, r0, lr
  return (op1 >> op2) | (op1 << (32U - op2));
   1485c:	ea4f 213e 	mov.w	r1, lr, ror #8
   14860:	ea4f 2338 	mov.w	r3, r8, ror #8
   14864:	68fe      	ldr	r6, [r7, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14866:	fa20 f181 	sxtab16	r1, r0, r1
   1486a:	fa24 fa88 	sxtab16	sl, r4, r8
   1486e:	fa24 fe83 	sxtab16	lr, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14872:	fb2a bb09 	smlad	fp, sl, r9, fp
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14876:	fa20 f886 	sxtab16	r8, r0, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1487a:	fb2e b101 	smlad	r1, lr, r1, fp
  return (op1 >> op2) | (op1 << (32U - op2));
   1487e:	ea4f 2336 	mov.w	r3, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14882:	fa20 f383 	sxtab16	r3, r0, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14886:	fb2a 5508 	smlad	r5, sl, r8, r5
   1488a:	fb2e 5303 	smlad	r3, lr, r3, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1488e:	f10c 0c10 	add.w	ip, ip, #16
   14892:	3710      	adds	r7, #16
   14894:	e70e      	b.n	146b4 <arm_nn_vec_mat_mult_t_s8+0x18c>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   14896:	9e22      	ldr	r6, [sp, #136]	; 0x88
   14898:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   1489c:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   148a0:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   148a2:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   148a4:	44b4      	add	ip, r6
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   148a6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
            res00 += lhs_value * rhs_value0;
   148a8:	fb05 110c 	mla	r1, r5, ip, r1
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   148ac:	f917 c006 	ldrsb.w	ip, [r7, r6]
   148b0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   148b2:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
   148b4:	fb05 330c 	mla	r3, r5, ip, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   148b8:	e70a      	b.n	146d0 <arm_nn_vec_mat_mult_t_s8+0x1a8>
   148ba:	f8de 7000 	ldr.w	r7, [lr]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148be:	f8d8 6000 	ldr.w	r6, [r8]
   148c2:	fa20 fb87 	sxtab16	fp, r0, r7
   148c6:	fa24 fa86 	sxtab16	sl, r4, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   148ca:	ea4f 2737 	mov.w	r7, r7, ror #8
   148ce:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148d2:	fa20 f787 	sxtab16	r7, r0, r7
   148d6:	fa24 f686 	sxtab16	r6, r4, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   148da:	fb2a 220b 	smlad	r2, sl, fp, r2
   148de:	fb26 2207 	smlad	r2, r6, r7, r2
   148e2:	f8de 5004 	ldr.w	r5, [lr, #4]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148e6:	f8d8 6004 	ldr.w	r6, [r8, #4]
   148ea:	fa20 fb85 	sxtab16	fp, r0, r5
   148ee:	fa24 fa86 	sxtab16	sl, r4, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   148f2:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148f6:	fa20 f785 	sxtab16	r7, r0, r5
  return (op1 >> op2) | (op1 << (32U - op2));
   148fa:	ea4f 2536 	mov.w	r5, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   148fe:	fa24 f585 	sxtab16	r5, r4, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14902:	fb2a 220b 	smlad	r2, sl, fp, r2
   14906:	fb25 2507 	smlad	r5, r5, r7, r2
   1490a:	f8de 7008 	ldr.w	r7, [lr, #8]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1490e:	f8d8 6008 	ldr.w	r6, [r8, #8]
   14912:	fa20 fb87 	sxtab16	fp, r0, r7
   14916:	fa24 fa86 	sxtab16	sl, r4, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   1491a:	ea4f 2737 	mov.w	r7, r7, ror #8
   1491e:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14922:	fa20 f787 	sxtab16	r7, r0, r7
   14926:	fa24 f686 	sxtab16	r6, r4, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1492a:	fb2a 550b 	smlad	r5, sl, fp, r5
   1492e:	fb26 5607 	smlad	r6, r6, r7, r5
   14932:	f8de 200c 	ldr.w	r2, [lr, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14936:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   1493a:	fa20 f582 	sxtab16	r5, r0, r2
   1493e:	fa24 f78e 	sxtab16	r7, r4, lr
  return (op1 >> op2) | (op1 << (32U - op2));
   14942:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14946:	fa20 f882 	sxtab16	r8, r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
   1494a:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1494e:	fa24 f282 	sxtab16	r2, r4, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14952:	fb27 6605 	smlad	r6, r7, r5, r6
   14956:	fb22 6208 	smlad	r2, r2, r8, r6
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1495a:	f10c 0c10 	add.w	ip, ip, #16
   1495e:	e652      	b.n	14606 <arm_nn_vec_mat_mult_t_s8+0xde>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   14960:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   14962:	f911 5f01 	ldrsb.w	r5, [r1, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   14966:	9f22      	ldr	r7, [sp, #136]	; 0x88
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   14968:	4435      	add	r5, r6
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1496a:	f914 6b01 	ldrsb.w	r6, [r4], #1
   1496e:	443e      	add	r6, r7
            res00 += lhs_value * rhs_value0;
   14970:	fb06 2205 	mla	r2, r6, r5, r2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   14974:	e65c      	b.n	14630 <arm_nn_vec_mat_mult_t_s8+0x108>

00014976 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
   14976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
   1497a:	eac3 4c03 	pkhbt	ip, r3, r3, lsl #16
   1497e:	f022 0703 	bic.w	r7, r2, #3
    block_cnt = block_size >> 2;
   14982:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    while (block_cnt > 0)
   14986:	4407      	add	r7, r0
   14988:	460d      	mov	r5, r1
   1498a:	4287      	cmp	r7, r0
   1498c:	d108      	bne.n	149a0 <arm_q7_to_q15_with_offset+0x2a>
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
   1498e:	f002 0203 	and.w	r2, r2, #3
   14992:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
   14996:	4402      	add	r2, r0
   14998:	4282      	cmp	r2, r0
   1499a:	d113      	bne.n	149c4 <arm_q7_to_q15_with_offset+0x4e>
        *dst++ = (q15_t)*src++ + offset;

        /* Decrement the loop counter */
        block_cnt--;
    }
}
   1499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149a0:	f850 4b04 	ldr.w	r4, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   149a4:	3508      	adds	r5, #8
  return (op1 >> op2) | (op1 << (32U - op2));
   149a6:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   149aa:	fa2c f484 	sxtab16	r4, ip, r4
   149ae:	fa2c f686 	sxtab16	r6, ip, r6
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
   149b2:	eac6 4824 	pkhtb	r8, r6, r4, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
   149b6:	eac4 4406 	pkhbt	r4, r4, r6, lsl #16
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   149ba:	f845 8c04 	str.w	r8, [r5, #-4]
   149be:	f845 4c08 	str.w	r4, [r5, #-8]
        block_cnt--;
   149c2:	e7e2      	b.n	1498a <arm_q7_to_q15_with_offset+0x14>
        *dst++ = (q15_t)*src++ + offset;
   149c4:	f910 4b01 	ldrsb.w	r4, [r0], #1
   149c8:	441c      	add	r4, r3
   149ca:	f821 4b02 	strh.w	r4, [r1], #2
        block_cnt--;
   149ce:	e7e3      	b.n	14998 <arm_q7_to_q15_with_offset+0x22>

000149d0 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
   149d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d4:	b099      	sub	sp, #100	; 0x64
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
   149d6:	6895      	ldr	r5, [r2, #8]
{
   149d8:	9314      	str	r3, [sp, #80]	; 0x50
   149da:	e9dd 3422 	ldrd	r3, r4, [sp, #136]	; 0x88
    const int32_t input_x = input_dims->w;
   149de:	9504      	str	r5, [sp, #16]
    const int32_t output_y = output_dims->h;
   149e0:	6865      	ldr	r5, [r4, #4]
    const int32_t output_x = output_dims->w;
   149e2:	68a4      	ldr	r4, [r4, #8]
   149e4:	940c      	str	r4, [sp, #48]	; 0x30
    const int32_t stride_y = pool_params->stride.h;
   149e6:	684c      	ldr	r4, [r1, #4]
   149e8:	9405      	str	r4, [sp, #20]
    const int32_t stride_x = pool_params->stride.w;
   149ea:	680c      	ldr	r4, [r1, #0]
   149ec:	9406      	str	r4, [sp, #24]
    const int32_t kernel_y = filter_dims->h;
   149ee:	685c      	ldr	r4, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
   149f0:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
   149f2:	940e      	str	r4, [sp, #56]	; 0x38
    const int32_t kernel_x = filter_dims->w;
   149f4:	930f      	str	r3, [sp, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
   149f6:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
   149fa:	9307      	str	r3, [sp, #28]
    const int32_t act_min = pool_params->activation.min;
   149fc:	690b      	ldr	r3, [r1, #16]
   149fe:	9310      	str	r3, [sp, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
   14a00:	694b      	ldr	r3, [r1, #20]
   14a02:	9311      	str	r3, [sp, #68]	; 0x44
    const int32_t ch_src = input_dims->c;
   14a04:	68d3      	ldr	r3, [r2, #12]
   14a06:	6852      	ldr	r2, [r2, #4]
    q31_t *buffer = (q31_t *)ctx->buf;
   14a08:	6806      	ldr	r6, [r0, #0]
    const int32_t output_y = output_dims->h;
   14a0a:	950d      	str	r5, [sp, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
   14a0c:	18a2      	adds	r2, r4, r2
   14a0e:	920a      	str	r2, [sp, #40]	; 0x28
   14a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14a12:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14a16:	435a      	muls	r2, r3
   14a18:	f1c4 0b00 	rsb	fp, r4, #0
   14a1c:	46a6      	mov	lr, r4
   14a1e:	9212      	str	r2, [sp, #72]	; 0x48
   14a20:	f04f 0a00 	mov.w	sl, #0
   14a24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14a26:	4592      	cmp	sl, r2
   14a28:	db03      	blt.n	14a32 <arm_avgpool_s8+0x62>
        }
    }

#endif
    return ARM_MATH_SUCCESS;
}
   14a2a:	2000      	movs	r0, #0
   14a2c:	b019      	add	sp, #100	; 0x64
   14a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   14a32:	9a07      	ldr	r2, [sp, #28]
   14a34:	9907      	ldr	r1, [sp, #28]
   14a36:	f1bb 0f00 	cmp.w	fp, #0
   14a3a:	f1c2 0c00 	rsb	ip, r2, #0
   14a3e:	bfd4      	ite	le
   14a40:	4672      	movle	r2, lr
   14a42:	2200      	movgt	r2, #0
   14a44:	920b      	str	r2, [sp, #44]	; 0x2c
   14a46:	9a07      	ldr	r2, [sp, #28]
   14a48:	9209      	str	r2, [sp, #36]	; 0x24
   14a4a:	9a04      	ldr	r2, [sp, #16]
   14a4c:	440a      	add	r2, r1
   14a4e:	9201      	str	r2, [sp, #4]
   14a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14a52:	9904      	ldr	r1, [sp, #16]
   14a54:	445a      	add	r2, fp
   14a56:	434a      	muls	r2, r1
   14a58:	9213      	str	r2, [sp, #76]	; 0x4c
   14a5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14a5c:	9202      	str	r2, [sp, #8]
   14a5e:	2200      	movs	r2, #0
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
   14a60:	990e      	ldr	r1, [sp, #56]	; 0x38
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   14a62:	9203      	str	r2, [sp, #12]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
   14a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14a66:	428a      	cmp	r2, r1
   14a68:	bfa8      	it	ge
   14a6a:	460a      	movge	r2, r1
   14a6c:	9217      	str	r2, [sp, #92]	; 0x5c
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   14a6e:	9a03      	ldr	r2, [sp, #12]
   14a70:	990c      	ldr	r1, [sp, #48]	; 0x30
   14a72:	428a      	cmp	r2, r1
   14a74:	db0e      	blt.n	14a94 <arm_avgpool_s8+0xc4>
   14a76:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14a78:	9912      	ldr	r1, [sp, #72]	; 0x48
   14a7a:	440a      	add	r2, r1
   14a7c:	9224      	str	r2, [sp, #144]	; 0x90
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
   14a7e:	9a05      	ldr	r2, [sp, #20]
   14a80:	9905      	ldr	r1, [sp, #20]
   14a82:	4493      	add	fp, r2
   14a84:	ebae 0e02 	sub.w	lr, lr, r2
   14a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14a8a:	1a52      	subs	r2, r2, r1
   14a8c:	f10a 0a01 	add.w	sl, sl, #1
   14a90:	920a      	str	r2, [sp, #40]	; 0x28
   14a92:	e7c7      	b.n	14a24 <arm_avgpool_s8+0x54>
            const int32_t kernel_x_start = MAX(0, -idx_x);
   14a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   14a96:	990f      	ldr	r1, [sp, #60]	; 0x3c
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   14a98:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
            const int32_t kernel_x_start = MAX(0, -idx_x);
   14a9c:	f1bc 0f00 	cmp.w	ip, #0
   14aa0:	bfd8      	it	le
   14aa2:	4614      	movle	r4, r2
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   14aa4:	9a01      	ldr	r2, [sp, #4]
            const int32_t kernel_x_start = MAX(0, -idx_x);
   14aa6:	bfc8      	it	gt
   14aa8:	2400      	movgt	r4, #0
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   14aaa:	428a      	cmp	r2, r1
   14aac:	bfa8      	it	ge
   14aae:	460a      	movge	r2, r1
   14ab0:	4691      	mov	r9, r2
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   14ab2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14ab4:	9208      	str	r2, [sp, #32]
   14ab6:	eb0c 0204 	add.w	r2, ip, r4
            int count = 0;
   14aba:	2000      	movs	r0, #0
   14abc:	9216      	str	r2, [sp, #88]	; 0x58
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   14abe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14ac0:	4590      	cmp	r8, r2
   14ac2:	da34      	bge.n	14b2e <arm_avgpool_s8+0x15e>
   14ac4:	9908      	ldr	r1, [sp, #32]
   14ac6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14ac8:	440a      	add	r2, r1
   14aca:	9914      	ldr	r1, [sp, #80]	; 0x50
   14acc:	fb03 1202 	mla	r2, r3, r2, r1
                    if (count == 0)
   14ad0:	1b01      	subs	r1, r0, r4
   14ad2:	9200      	str	r2, [sp, #0]
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
   14ad4:	4625      	mov	r5, r4
                    if (count == 0)
   14ad6:	9115      	str	r1, [sp, #84]	; 0x54
   14ad8:	e01a      	b.n	14b10 <arm_avgpool_s8+0x140>
   14ada:	9915      	ldr	r1, [sp, #84]	; 0x54
   14adc:	1949      	adds	r1, r1, r5
   14ade:	d011      	beq.n	14b04 <arm_avgpool_s8+0x134>
                        for (int i = 0; i < ch_src; i++)
   14ae0:	2100      	movs	r1, #0
   14ae2:	4299      	cmp	r1, r3
   14ae4:	da10      	bge.n	14b08 <arm_avgpool_s8+0x138>
                            buffer[i] = __QADD(start[i], buffer[i]);
   14ae6:	9a00      	ldr	r2, [sp, #0]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14ae8:	f856 7021 	ldr.w	r7, [r6, r1, lsl #2]
   14aec:	5652      	ldrsb	r2, [r2, r1]
   14aee:	fa87 f782 	qadd	r7, r2, r7
   14af2:	f846 7021 	str.w	r7, [r6, r1, lsl #2]
                        for (int i = 0; i < ch_src; i++)
   14af6:	3101      	adds	r1, #1
   14af8:	e7f3      	b.n	14ae2 <arm_avgpool_s8+0x112>
                            buffer[i] = start[i];
   14afa:	9a00      	ldr	r2, [sp, #0]
   14afc:	5657      	ldrsb	r7, [r2, r1]
   14afe:	f846 7021 	str.w	r7, [r6, r1, lsl #2]
                        for (int i = 0; i < ch_src; i++)
   14b02:	3101      	adds	r1, #1
   14b04:	4299      	cmp	r1, r3
   14b06:	dbf8      	blt.n	14afa <arm_avgpool_s8+0x12a>
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
   14b08:	9a00      	ldr	r2, [sp, #0]
   14b0a:	441a      	add	r2, r3
   14b0c:	3501      	adds	r5, #1
   14b0e:	9200      	str	r2, [sp, #0]
   14b10:	454d      	cmp	r5, r9
   14b12:	dbe2      	blt.n	14ada <arm_avgpool_s8+0x10a>
   14b14:	eba9 0204 	sub.w	r2, r9, r4
   14b18:	454c      	cmp	r4, r9
   14b1a:	bfc8      	it	gt
   14b1c:	2200      	movgt	r2, #0
   14b1e:	9904      	ldr	r1, [sp, #16]
   14b20:	4410      	add	r0, r2
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   14b22:	9a08      	ldr	r2, [sp, #32]
   14b24:	440a      	add	r2, r1
   14b26:	f108 0801 	add.w	r8, r8, #1
   14b2a:	9208      	str	r2, [sp, #32]
   14b2c:	e7c7      	b.n	14abe <arm_avgpool_s8+0xee>
    const int half_count = count / 2;
   14b2e:	1044      	asrs	r4, r0, #1
    for (int i = 0; i < length; i++)
   14b30:	2100      	movs	r1, #0
   14b32:	428b      	cmp	r3, r1
   14b34:	dc0f      	bgt.n	14b56 <arm_avgpool_s8+0x186>
            dst += ch_src;
   14b36:	9a02      	ldr	r2, [sp, #8]
   14b38:	9906      	ldr	r1, [sp, #24]
   14b3a:	441a      	add	r2, r3
   14b3c:	9202      	str	r2, [sp, #8]
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   14b3e:	9a06      	ldr	r2, [sp, #24]
   14b40:	4494      	add	ip, r2
   14b42:	9a03      	ldr	r2, [sp, #12]
   14b44:	3201      	adds	r2, #1
   14b46:	9203      	str	r2, [sp, #12]
   14b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14b4a:	1a52      	subs	r2, r2, r1
   14b4c:	9209      	str	r2, [sp, #36]	; 0x24
   14b4e:	9a01      	ldr	r2, [sp, #4]
   14b50:	1a52      	subs	r2, r2, r1
   14b52:	9201      	str	r2, [sp, #4]
   14b54:	e78b      	b.n	14a6e <arm_avgpool_s8+0x9e>
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
   14b56:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
        sum = MAX(sum, act_min);
   14b5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
   14b5c:	2a00      	cmp	r2, #0
   14b5e:	bfcc      	ite	gt
   14b60:	1912      	addgt	r2, r2, r4
   14b62:	1b12      	suble	r2, r2, r4
        sum = sum / count;
   14b64:	fb92 f2f0 	sdiv	r2, r2, r0
        sum = MAX(sum, act_min);
   14b68:	42aa      	cmp	r2, r5
   14b6a:	bfb8      	it	lt
   14b6c:	462a      	movlt	r2, r5
        sum = MIN(sum, act_max);
   14b6e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   14b70:	42aa      	cmp	r2, r5
   14b72:	bfa8      	it	ge
   14b74:	462a      	movge	r2, r5
        target[i] = (q7_t)sum;
   14b76:	9d02      	ldr	r5, [sp, #8]
   14b78:	546a      	strb	r2, [r5, r1]
    for (int i = 0; i < length; i++)
   14b7a:	3101      	adds	r1, #1
   14b7c:	e7d9      	b.n	14b32 <arm_avgpool_s8+0x162>

00014b7e <arm_avgpool_s8_get_buffer_size>:
    return (ch_src * sizeof(int32_t));
#else
    (void)ch_src;
    return 0;
#endif
}
   14b7e:	0088      	lsls	r0, r1, #2
   14b80:	4770      	bx	lr

00014b82 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
   14b82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b86:	b0a1      	sub	sp, #132	; 0x84
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
   14b88:	6894      	ldr	r4, [r2, #8]
{
   14b8a:	931d      	str	r3, [sp, #116]	; 0x74
   14b8c:	e9dd 302a 	ldrd	r3, r0, [sp, #168]	; 0xa8
    const int32_t input_x = input_dims->w;
   14b90:	9408      	str	r4, [sp, #32]
    const int32_t output_y = output_dims->h;
   14b92:	6844      	ldr	r4, [r0, #4]
    const int32_t output_x = output_dims->w;
   14b94:	6880      	ldr	r0, [r0, #8]
   14b96:	9009      	str	r0, [sp, #36]	; 0x24
    const int32_t stride_y = pool_params->stride.h;
   14b98:	6848      	ldr	r0, [r1, #4]
   14b9a:	900a      	str	r0, [sp, #40]	; 0x28
    const int32_t stride_x = pool_params->stride.w;
   14b9c:	6808      	ldr	r0, [r1, #0]
   14b9e:	900b      	str	r0, [sp, #44]	; 0x2c
    const int32_t kernel_y = filter_dims->h;
   14ba0:	6858      	ldr	r0, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
   14ba2:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
   14ba4:	9016      	str	r0, [sp, #88]	; 0x58
    const int32_t kernel_x = filter_dims->w;
   14ba6:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
   14ba8:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
   14bac:	9302      	str	r3, [sp, #8]
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
   14bae:	e9d1 8904 	ldrd	r8, r9, [r1, #16]
    const int32_t output_y = output_dims->h;
   14bb2:	9412      	str	r4, [sp, #72]	; 0x48
    const int32_t channel_in = input_dims->c;
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14bb4:	4259      	negs	r1, r3
    const int32_t channel_in = input_dims->c;
   14bb6:	68d4      	ldr	r4, [r2, #12]
   14bb8:	6853      	ldr	r3, [r2, #4]
   14bba:	9a02      	ldr	r2, [sp, #8]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14bbc:	9100      	str	r1, [sp, #0]
   14bbe:	18d3      	adds	r3, r2, r3
   14bc0:	9310      	str	r3, [sp, #64]	; 0x40
   14bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    const int32_t pad_x = pool_params->padding.w;
   14bc4:	900c      	str	r0, [sp, #48]	; 0x30
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14bc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    int32_t cnt = length >> 2;
   14bca:	10a1      	asrs	r1, r4, #2
   14bcc:	4363      	muls	r3, r4
   14bce:	931b      	str	r3, [sp, #108]	; 0x6c
   14bd0:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   14bd4:	009b      	lsls	r3, r3, #2
   14bd6:	911a      	str	r1, [sp, #104]	; 0x68
   14bd8:	9315      	str	r3, [sp, #84]	; 0x54
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14bda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   14bdc:	9303      	str	r3, [sp, #12]
   14bde:	2300      	movs	r3, #0
   14be0:	9304      	str	r3, [sp, #16]
   14be2:	9b04      	ldr	r3, [sp, #16]
   14be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14be6:	4293      	cmp	r3, r2
   14be8:	db18      	blt.n	14c1c <arm_max_pool_s8+0x9a>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
   14bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14bec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    while (cnt > 0l)
   14bee:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
   14bf0:	435a      	muls	r2, r3
   14bf2:	4354      	muls	r4, r2
    int32_t cnt = length >> 2;
   14bf4:	10a1      	asrs	r1, r4, #2
   14bf6:	4608      	mov	r0, r1
    while (cnt > 0l)
   14bf8:	2800      	cmp	r0, #0
   14bfa:	f300 80d0 	bgt.w	14d9e <arm_max_pool_s8+0x21c>
   14bfe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   14c00:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   14c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cnt = length & 0x3;
   14c08:	f004 0403 	and.w	r4, r4, #3
   14c0c:	441c      	add	r4, r3
    while (cnt > 0l)
   14c0e:	42a3      	cmp	r3, r4
   14c10:	f040 80f4 	bne.w	14dfc <arm_max_pool_s8+0x27a>

    return ARM_MATH_SUCCESS;
}
   14c14:	2000      	movs	r0, #0
   14c16:	b021      	add	sp, #132	; 0x84
   14c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   14c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14c20:	9e03      	ldr	r6, [sp, #12]
   14c22:	425b      	negs	r3, r3
   14c24:	9301      	str	r3, [sp, #4]
   14c26:	9b00      	ldr	r3, [sp, #0]
   14c28:	2b00      	cmp	r3, #0
   14c2a:	9b02      	ldr	r3, [sp, #8]
   14c2c:	bfc8      	it	gt
   14c2e:	2300      	movgt	r3, #0
   14c30:	9311      	str	r3, [sp, #68]	; 0x44
   14c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14c34:	930f      	str	r3, [sp, #60]	; 0x3c
   14c36:	9b08      	ldr	r3, [sp, #32]
   14c38:	4413      	add	r3, r2
   14c3a:	930d      	str	r3, [sp, #52]	; 0x34
   14c3c:	9a00      	ldr	r2, [sp, #0]
   14c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14c40:	4413      	add	r3, r2
   14c42:	9a08      	ldr	r2, [sp, #32]
   14c44:	4353      	muls	r3, r2
   14c46:	931c      	str	r3, [sp, #112]	; 0x70
   14c48:	2300      	movs	r3, #0
   14c4a:	9305      	str	r3, [sp, #20]
   14c4c:	9b05      	ldr	r3, [sp, #20]
   14c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14c50:	4293      	cmp	r3, r2
   14c52:	db11      	blt.n	14c78 <arm_max_pool_s8+0xf6>
   14c54:	9b03      	ldr	r3, [sp, #12]
   14c56:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14c58:	4413      	add	r3, r2
   14c5a:	9303      	str	r3, [sp, #12]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14c5e:	9b00      	ldr	r3, [sp, #0]
   14c60:	4413      	add	r3, r2
   14c62:	9300      	str	r3, [sp, #0]
   14c64:	9b04      	ldr	r3, [sp, #16]
   14c66:	3301      	adds	r3, #1
   14c68:	9304      	str	r3, [sp, #16]
   14c6a:	9b02      	ldr	r3, [sp, #8]
   14c6c:	1a9b      	subs	r3, r3, r2
   14c6e:	9302      	str	r3, [sp, #8]
   14c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14c72:	1a9b      	subs	r3, r3, r2
   14c74:	9310      	str	r3, [sp, #64]	; 0x40
   14c76:	e7b4      	b.n	14be2 <arm_max_pool_s8+0x60>
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   14c78:	9b01      	ldr	r3, [sp, #4]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
   14c7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14c7c:	9901      	ldr	r1, [sp, #4]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   14c7e:	2b00      	cmp	r3, #0
   14c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14c82:	bfc8      	it	gt
   14c84:	2300      	movgt	r3, #0
   14c86:	9314      	str	r3, [sp, #80]	; 0x50
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
   14c88:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14c8a:	4293      	cmp	r3, r2
   14c8c:	bfa8      	it	ge
   14c8e:	4613      	movge	r3, r2
   14c90:	9318      	str	r3, [sp, #96]	; 0x60
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
   14c92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14c96:	4293      	cmp	r3, r2
   14c98:	bfa8      	it	ge
   14c9a:	4613      	movge	r3, r2
   14c9c:	9319      	str	r3, [sp, #100]	; 0x64
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   14c9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14ca0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14ca2:	18f3      	adds	r3, r6, r3
   14ca4:	9313      	str	r3, [sp, #76]	; 0x4c
   14ca6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   14ca8:	930e      	str	r3, [sp, #56]	; 0x38
   14caa:	440a      	add	r2, r1
   14cac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14cae:	9306      	str	r3, [sp, #24]
   14cb0:	921f      	str	r2, [sp, #124]	; 0x7c
            int count = 0;
   14cb2:	2300      	movs	r3, #0
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   14cb4:	9a06      	ldr	r2, [sp, #24]
   14cb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   14cb8:	428a      	cmp	r2, r1
   14cba:	da61      	bge.n	14d80 <arm_max_pool_s8+0x1fe>
   14cbc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14cbe:	990e      	ldr	r1, [sp, #56]	; 0x38
   14cc0:	1855      	adds	r5, r2, r1
   14cc2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14cc4:	fb04 2505 	mla	r5, r4, r5, r2
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   14cc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14cca:	9207      	str	r2, [sp, #28]
    cnt = length & 0x3;
   14ccc:	f004 0203 	and.w	r2, r4, #3
   14cd0:	921e      	str	r2, [sp, #120]	; 0x78
   14cd2:	e00b      	b.n	14cec <arm_max_pool_s8+0x16a>
                    if (count == 0)
   14cd4:	2b00      	cmp	r3, #0
   14cd6:	d14f      	bne.n	14d78 <arm_max_pool_s8+0x1f6>
   14cd8:	4622      	mov	r2, r4
   14cda:	4629      	mov	r1, r5
   14cdc:	4630      	mov	r0, r6
   14cde:	f001 f9ba 	bl	16056 <memcpy>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   14ce2:	9b07      	ldr	r3, [sp, #28]
   14ce4:	3301      	adds	r3, #1
   14ce6:	9307      	str	r3, [sp, #28]
   14ce8:	4425      	add	r5, r4
   14cea:	2301      	movs	r3, #1
   14cec:	9a07      	ldr	r2, [sp, #28]
   14cee:	9919      	ldr	r1, [sp, #100]	; 0x64
   14cf0:	428a      	cmp	r2, r1
   14cf2:	dbef      	blt.n	14cd4 <arm_max_pool_s8+0x152>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   14cf4:	9a06      	ldr	r2, [sp, #24]
   14cf6:	9908      	ldr	r1, [sp, #32]
   14cf8:	3201      	adds	r2, #1
   14cfa:	9206      	str	r2, [sp, #24]
   14cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14cfe:	440a      	add	r2, r1
   14d00:	920e      	str	r2, [sp, #56]	; 0x38
   14d02:	e7d7      	b.n	14cb4 <arm_max_pool_s8+0x132>
    memcpy(&val, in_q7, 4);
   14d04:	f8dc 3000 	ldr.w	r3, [ip]
    return (val);
   14d08:	f85e 1b04 	ldr.w	r1, [lr], #4
        if (comp_max.bytes[0] > ref_max.bytes[0])
   14d0c:	fa4f fb83 	sxtb.w	fp, r3
   14d10:	fa4f fa81 	sxtb.w	sl, r1
        ref_max.word = arm_nn_read_q7x4(dst);
   14d14:	461a      	mov	r2, r3
        if (comp_max.bytes[0] > ref_max.bytes[0])
   14d16:	45da      	cmp	sl, fp
            ref_max.bytes[0] = comp_max.bytes[0];
   14d18:	bfc8      	it	gt
   14d1a:	f36a 0207 	bfigt	r2, sl, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
   14d1e:	f343 2b07 	sbfx	fp, r3, #8, #8
   14d22:	f341 2a07 	sbfx	sl, r1, #8, #8
   14d26:	45d3      	cmp	fp, sl
            ref_max.bytes[1] = comp_max.bytes[1];
   14d28:	bfb8      	it	lt
   14d2a:	f36a 220f 	bfilt	r2, sl, #8, #8
        if (comp_max.bytes[2] > ref_max.bytes[2])
   14d2e:	f343 4b07 	sbfx	fp, r3, #16, #8
   14d32:	f341 4a07 	sbfx	sl, r1, #16, #8
   14d36:	45d3      	cmp	fp, sl
        if (comp_max.bytes[3] > ref_max.bytes[3])
   14d38:	ea4f 6323 	mov.w	r3, r3, asr #24
            ref_max.bytes[2] = comp_max.bytes[2];
   14d3c:	bfb8      	it	lt
   14d3e:	f36a 4217 	bfilt	r2, sl, #16, #8
        if (comp_max.bytes[3] > ref_max.bytes[3])
   14d42:	ea4f 6a21 	mov.w	sl, r1, asr #24
   14d46:	ebb3 6f21 	cmp.w	r3, r1, asr #24
            ref_max.bytes[3] = comp_max.bytes[3];
   14d4a:	bfb8      	it	lt
   14d4c:	f36a 621f 	bfilt	r2, sl, #24, #8
   14d50:	f84c 2b04 	str.w	r2, [ip], #4
        cnt--;
   14d54:	3801      	subs	r0, #1
    while (cnt > 0l)
   14d56:	2800      	cmp	r0, #0
   14d58:	dcd4      	bgt.n	14d04 <arm_max_pool_s8+0x182>
   14d5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14d5c:	18e9      	adds	r1, r5, r3
    while (cnt > 0l)
   14d5e:	2300      	movs	r3, #0
   14d60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14d62:	4293      	cmp	r3, r2
   14d64:	d0bd      	beq.n	14ce2 <arm_max_pool_s8+0x160>
        if (*src > *dst)
   14d66:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14d68:	56ca      	ldrsb	r2, [r1, r3]
   14d6a:	56c0      	ldrsb	r0, [r0, r3]
   14d6c:	4290      	cmp	r0, r2
            *dst = *src;
   14d6e:	bfbc      	itt	lt
   14d70:	9813      	ldrlt	r0, [sp, #76]	; 0x4c
   14d72:	54c2      	strblt	r2, [r0, r3]
        cnt--;
   14d74:	3301      	adds	r3, #1
   14d76:	e7f3      	b.n	14d60 <arm_max_pool_s8+0x1de>
    int32_t cnt = length >> 2;
   14d78:	981a      	ldr	r0, [sp, #104]	; 0x68
    const q7_t *src = target;
   14d7a:	46ae      	mov	lr, r5
   14d7c:	46b4      	mov	ip, r6
   14d7e:	e7ea      	b.n	14d56 <arm_max_pool_s8+0x1d4>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   14d80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14d82:	9b01      	ldr	r3, [sp, #4]
   14d84:	4413      	add	r3, r2
   14d86:	9301      	str	r3, [sp, #4]
   14d88:	9b05      	ldr	r3, [sp, #20]
   14d8a:	3301      	adds	r3, #1
   14d8c:	9305      	str	r3, [sp, #20]
   14d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14d90:	1a9b      	subs	r3, r3, r2
   14d92:	930f      	str	r3, [sp, #60]	; 0x3c
   14d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14d96:	1a9b      	subs	r3, r3, r2
            dst += channel_in;
   14d98:	4426      	add	r6, r4
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   14d9a:	930d      	str	r3, [sp, #52]	; 0x34
   14d9c:	e756      	b.n	14c4c <arm_max_pool_s8+0xca>
    memcpy(&val, in_q7, 4);
   14d9e:	682b      	ldr	r3, [r5, #0]
        in.bytes[0] = MAX(in.bytes[0], act_min);
   14da0:	b25a      	sxtb	r2, r3
   14da2:	4542      	cmp	r2, r8
   14da4:	bfb8      	it	lt
   14da6:	4642      	movlt	r2, r8
        in.bytes[0] = MIN(in.bytes[0], act_max);
   14da8:	b252      	sxtb	r2, r2
   14daa:	454a      	cmp	r2, r9
   14dac:	bfa8      	it	ge
   14dae:	464a      	movge	r2, r9
   14db0:	f362 0707 	bfi	r7, r2, #0, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
   14db4:	f343 2207 	sbfx	r2, r3, #8, #8
   14db8:	4542      	cmp	r2, r8
   14dba:	bfb8      	it	lt
   14dbc:	4642      	movlt	r2, r8
        in.bytes[1] = MIN(in.bytes[1], act_max);
   14dbe:	b252      	sxtb	r2, r2
   14dc0:	454a      	cmp	r2, r9
   14dc2:	bfa8      	it	ge
   14dc4:	464a      	movge	r2, r9
   14dc6:	f362 270f 	bfi	r7, r2, #8, #8
        in.bytes[2] = MAX(in.bytes[2], act_min);
   14dca:	f343 4207 	sbfx	r2, r3, #16, #8
   14dce:	4542      	cmp	r2, r8
   14dd0:	bfb8      	it	lt
   14dd2:	4642      	movlt	r2, r8
        in.bytes[2] = MIN(in.bytes[2], act_max);
   14dd4:	b252      	sxtb	r2, r2
        in.bytes[3] = MAX(in.bytes[3], act_min);
   14dd6:	161b      	asrs	r3, r3, #24
        in.bytes[2] = MIN(in.bytes[2], act_max);
   14dd8:	454a      	cmp	r2, r9
   14dda:	bfa8      	it	ge
   14ddc:	464a      	movge	r2, r9
        in.bytes[3] = MAX(in.bytes[3], act_min);
   14dde:	4543      	cmp	r3, r8
   14de0:	bfb8      	it	lt
   14de2:	4643      	movlt	r3, r8
        in.bytes[3] = MIN(in.bytes[3], act_max);
   14de4:	b25b      	sxtb	r3, r3
   14de6:	454b      	cmp	r3, r9
        in.bytes[2] = MIN(in.bytes[2], act_max);
   14de8:	f362 4717 	bfi	r7, r2, #16, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
   14dec:	bfa8      	it	ge
   14dee:	464b      	movge	r3, r9
   14df0:	f363 671f 	bfi	r7, r3, #24, #8
   14df4:	f845 7b04 	str.w	r7, [r5], #4
        cnt--;
   14df8:	3801      	subs	r0, #1
   14dfa:	e6fd      	b.n	14bf8 <arm_max_pool_s8+0x76>
        int32_t comp = *source;
   14dfc:	f993 2000 	ldrsb.w	r2, [r3]
        comp = MAX(comp, act_min);
   14e00:	4542      	cmp	r2, r8
   14e02:	bfb8      	it	lt
   14e04:	4642      	movlt	r2, r8
        comp = MIN(comp, act_max);
   14e06:	454a      	cmp	r2, r9
   14e08:	bfa8      	it	ge
   14e0a:	464a      	movge	r2, r9
        *source++ = (int8_t)comp;
   14e0c:	f803 2b01 	strb.w	r2, [r3], #1
        cnt--;
   14e10:	e6fd      	b.n	14c0e <arm_max_pool_s8+0x8c>

00014e12 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   14e12:	b510      	push	{r4, lr}
   14e14:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   14e16:	6800      	ldr	r0, [r0, #0]
	if (__p)
   14e18:	b108      	cbz	r0, 14e1e <_ZNSt6vectorIPvSaIS0_EED1Ev+0xc>
	::operator delete(__p);
   14e1a:	f001 f89b 	bl	15f54 <_ZdlPv>
      }
   14e1e:	4620      	mov	r0, r4
   14e20:	bd10      	pop	{r4, pc}

00014e22 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   14e22:	b510      	push	{r4, lr}
   14e24:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   14e26:	6800      	ldr	r0, [r0, #0]
	if (__p)
   14e28:	b108      	cbz	r0, 14e2e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev+0xc>
   14e2a:	f001 f893 	bl	15f54 <_ZdlPv>
      }
   14e2e:	4620      	mov	r0, r4
   14e30:	bd10      	pop	{r4, pc}

00014e32 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   14e32:	b430      	push	{r4, r5}
	return (*_Base::_M_get_pointer(__functor))(
   14e34:	6804      	ldr	r4, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   14e36:	460d      	mov	r5, r1
   14e38:	4611      	mov	r1, r2
	return (*_Base::_M_get_pointer(__functor))(
   14e3a:	6828      	ldr	r0, [r5, #0]
   14e3c:	681a      	ldr	r2, [r3, #0]
   14e3e:	6809      	ldr	r1, [r1, #0]
   14e40:	4623      	mov	r3, r4
      }
   14e42:	bc30      	pop	{r4, r5}
	return (*_Base::_M_get_pointer(__functor))(
   14e44:	4718      	bx	r3

00014e46 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   14e46:	2a01      	cmp	r2, #1
   14e48:	d003      	beq.n	14e52 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xc>
   14e4a:	2a02      	cmp	r2, #2
   14e4c:	d003      	beq.n	14e56 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x10>
	}
   14e4e:	2000      	movs	r0, #0
   14e50:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   14e52:	6001      	str	r1, [r0, #0]
	      break;
   14e54:	e7fb      	b.n	14e4e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   14e56:	680b      	ldr	r3, [r1, #0]
   14e58:	6003      	str	r3, [r0, #0]
	}
   14e5a:	e7f8      	b.n	14e4e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x8>

00014e5c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   14e5c:	2a02      	cmp	r2, #2
   14e5e:	d006      	beq.n	14e6e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   14e60:	2a03      	cmp	r2, #3
   14e62:	d002      	beq.n	14e6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   14e64:	2a01      	cmp	r2, #1
   14e66:	d100      	bne.n	14e6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   14e68:	6001      	str	r1, [r0, #0]
	}
   14e6a:	2000      	movs	r0, #0
   14e6c:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   14e6e:	680b      	ldr	r3, [r1, #0]
   14e70:	6003      	str	r3, [r0, #0]
	}
   14e72:	e7fa      	b.n	14e6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

00014e74 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0>:
    static int32_t calculate_no_of_stack_frames(
   14e74:	b530      	push	{r4, r5, lr}
   14e76:	ee07 1a90 	vmov	s15, r1
   14e7a:	ed2d 8b02 	vpush	{d8}
   14e7e:	eef8 8a67 	vcvt.f32.u32	s17, s15
        if (version == 1) {
   14e82:	2a01      	cmp	r2, #1
   14e84:	ee20 0a28 	vmul.f32	s0, s0, s17
    static int32_t calculate_no_of_stack_frames(
   14e88:	b083      	sub	sp, #12
   14e8a:	ee60 8aa8 	vmul.f32	s17, s1, s17
   14e8e:	4605      	mov	r5, r0
        if (version == 1) {
   14e90:	d11b      	bne.n	14eca <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0+0x56>
  { return __builtin_roundf(__x); }
   14e92:	f7fa fde9 	bl	fa68 <roundf>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   14e96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   14e9a:	eeb0 0a68 	vmov.f32	s0, s17
   14e9e:	ee17 4a90 	vmov	r4, s15
   14ea2:	f7fa fde1 	bl	fa68 <roundf>
                floor(static_cast<float>(signal_size - length) / frame_stride));
   14ea6:	1b2c      	subs	r4, r5, r4
   14ea8:	ee07 4a90 	vmov	s15, r4
   14eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
  { return __builtin_floorf(__x); }
   14eb0:	ee87 0a80 	vdiv.f32	s0, s15, s0
   14eb4:	f7fa fd44 	bl	f940 <floorf>
            numframes = static_cast<int>(
   14eb8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   14ebc:	ed8d 0a01 	vstr	s0, [sp, #4]
        return numframes;
   14ec0:	9801      	ldr	r0, [sp, #4]
    }
   14ec2:	b003      	add	sp, #12
   14ec4:	ecbd 8b02 	vpop	{d8}
   14ec8:	bd30      	pop	{r4, r5, pc}
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   14eca:	f7f4 fd97 	bl	99fc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
   14ece:	eeb0 8a40 	vmov.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
   14ed2:	eeb0 0a68 	vmov.f32	s0, s17
   14ed6:	f7f4 fd91 	bl	99fc <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   14eda:	eebd 8ac8 	vcvt.s32.f32	s16, s16
            length = (frame_sample_length - (int)frame_stride);
   14ede:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   14ee2:	ee18 3a10 	vmov	r3, s16
   14ee6:	ee17 4a90 	vmov	r4, s15
   14eea:	1b1c      	subs	r4, r3, r4
   14eec:	e7db      	b.n	14ea6 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0+0x32>

00014eee <_ZNSt14_Function_baseD1Ev>:
      if (_M_manager)
   14eee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   14ef0:	b510      	push	{r4, lr}
   14ef2:	4604      	mov	r4, r0
      if (_M_manager)
   14ef4:	b113      	cbz	r3, 14efc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   14ef6:	2203      	movs	r2, #3
   14ef8:	4601      	mov	r1, r0
   14efa:	4798      	blx	r3
    }
   14efc:	4620      	mov	r0, r4
   14efe:	bd10      	pop	{r4, pc}

00014f00 <_ZN2ei9ei_matrixC1EjjPf>:
    ei_matrix(
   14f00:	b570      	push	{r4, r5, r6, lr}
   14f02:	4604      	mov	r4, r0
   14f04:	460e      	mov	r6, r1
   14f06:	4615      	mov	r5, r2
        if (a_buffer) {
   14f08:	b133      	cbz	r3, 14f18 <_ZN2ei9ei_matrixC1EjjPf+0x18>
            buffer = a_buffer;
   14f0a:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
   14f0c:	2300      	movs	r3, #0
        cols = n_cols;
   14f0e:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
   14f12:	7323      	strb	r3, [r4, #12]
    }
   14f14:	4620      	mov	r0, r4
   14f16:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   14f18:	fb02 f001 	mul.w	r0, r2, r1
   14f1c:	0080      	lsls	r0, r0, #2
   14f1e:	2101      	movs	r1, #1
   14f20:	f7fc fe76 	bl	11c10 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   14f24:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   14f26:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
   14f28:	e7f1      	b.n	14f0e <_ZN2ei9ei_matrixC1EjjPf+0xe>

00014f2a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   14f2a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   14f2e:	4359      	muls	r1, r3
   14f30:	2300      	movs	r3, #0
   14f32:	4299      	cmp	r1, r3
   14f34:	d00a      	beq.n	14f4c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
   14f36:	6802      	ldr	r2, [r0, #0]
   14f38:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14f3c:	edd2 7a00 	vldr	s15, [r2]
   14f40:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   14f44:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
   14f46:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   14f4a:	e7f2      	b.n	14f32 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x8>
    }
   14f4c:	2000      	movs	r0, #0
   14f4e:	4770      	bx	lr

00014f50 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
    ~ei_stack_frames_info() {
   14f50:	b538      	push	{r3, r4, r5, lr}
        if (frame_ixs) {
   14f52:	6845      	ldr	r5, [r0, #4]
    ~ei_stack_frames_info() {
   14f54:	4604      	mov	r4, r0
        if (frame_ixs) {
   14f56:	b135      	cbz	r5, 14f66 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x16>
	_M_deallocate(_M_impl._M_start,
   14f58:	6828      	ldr	r0, [r5, #0]
	if (__p)
   14f5a:	b108      	cbz	r0, 14f60 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x10>
   14f5c:	f000 fffa 	bl	15f54 <_ZdlPv>
            delete frame_ixs;
   14f60:	4628      	mov	r0, r5
   14f62:	f000 fff7 	bl	15f54 <_ZdlPv>
    }
   14f66:	4620      	mov	r0, r4
   14f68:	bd38      	pop	{r3, r4, r5, pc}

00014f6a <_ZN2ei8speechpy10processing11preemphasisD1Ev>:
        ~preemphasis() {
   14f6a:	b510      	push	{r4, lr}
   14f6c:	4604      	mov	r4, r0
            if (_prev_buffer) {
   14f6e:	68c0      	ldr	r0, [r0, #12]
   14f70:	b108      	cbz	r0, 14f76 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0xc>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   14f72:	f7fc fe4f 	bl	11c14 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   14f76:	6920      	ldr	r0, [r4, #16]
   14f78:	b108      	cbz	r0, 14f7e <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x14>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   14f7a:	f7fc fe4b 	bl	11c14 <_Z7ei_freePv>
        }
   14f7e:	4620      	mov	r0, r4
   14f80:	bd10      	pop	{r4, pc}

00014f82 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   14f82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14f84:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   14f86:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
   14f88:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
   14f8c:	b90b      	cbnz	r3, 14f92 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
   14f8e:	f7fc fdfa 	bl	11b86 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   14f92:	68c4      	ldr	r4, [r0, #12]
   14f94:	ab01      	add	r3, sp, #4
   14f96:	aa02      	add	r2, sp, #8
   14f98:	a903      	add	r1, sp, #12
   14f9a:	47a0      	blx	r4
    }
   14f9c:	b004      	add	sp, #16
   14f9e:	bd10      	pop	{r4, pc}

00014fa0 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   14fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   14fa2:	0097      	lsls	r7, r2, #2
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   14fa4:	4604      	mov	r4, r0
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   14fa6:	e9c0 1200 	strd	r1, r2, [r0]
   14faa:	7603      	strb	r3, [r0, #24]
   14fac:	ed80 0a02 	vstr	s0, [r0, #8]
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   14fb0:	460e      	mov	r6, r1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   14fb2:	4638      	mov	r0, r7
   14fb4:	2101      	movs	r1, #1
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   14fb6:	4615      	mov	r5, r2
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   14fb8:	f7fc fe2a 	bl	11c10 <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   14fbc:	2101      	movs	r1, #1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   14fbe:	60e0      	str	r0, [r4, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   14fc0:	4638      	mov	r0, r7
   14fc2:	f7fc fe25 	bl	11c10 <_Z9ei_callocjj>
            _next_offset_should_be = 0;
   14fc6:	2300      	movs	r3, #0
            if (shift < 0) {
   14fc8:	429d      	cmp	r5, r3
            _next_offset_should_be = 0;
   14fca:	6163      	str	r3, [r4, #20]
                _shift = signal->total_length + shift;
   14fcc:	bfb8      	it	lt
   14fce:	6933      	ldrlt	r3, [r6, #16]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   14fd0:	6120      	str	r0, [r4, #16]
                _shift = signal->total_length + shift;
   14fd2:	bfbc      	itt	lt
   14fd4:	195b      	addlt	r3, r3, r5
   14fd6:	6063      	strlt	r3, [r4, #4]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   14fd8:	68e3      	ldr	r3, [r4, #12]
   14fda:	b13b      	cbz	r3, 14fec <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
   14fdc:	b130      	cbz	r0, 14fec <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
   14fde:	6931      	ldr	r1, [r6, #16]
   14fe0:	4603      	mov	r3, r0
   14fe2:	462a      	mov	r2, r5
   14fe4:	1b49      	subs	r1, r1, r5
   14fe6:	4630      	mov	r0, r6
   14fe8:	f7ff ffcb 	bl	14f82 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        }
   14fec:	4620      	mov	r0, r4
   14fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014ff0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   14ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (*_Base::_M_get_pointer(__functor))(
   14ff4:	6807      	ldr	r7, [r0, #0]
   14ff6:	f8d3 9000 	ldr.w	r9, [r3]

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   14ffa:	680c      	ldr	r4, [r1, #0]
   14ffc:	68bb      	ldr	r3, [r7, #8]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   14ffe:	6815      	ldr	r5, [r2, #0]

        size_t out_ptr_ix = 0;

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   15000:	fbb4 f4f3 	udiv	r4, r4, r3
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   15004:	fbb5 f5f3 	udiv	r5, r5, r3
        size_t out_ptr_ix = 0;
   15008:	f04f 0800 	mov.w	r8, #0
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   1500c:	4425      	add	r5, r4
   1500e:	42a5      	cmp	r5, r4
   15010:	d917      	bls.n	15042 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x52>
   15012:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   15016:	2600      	movs	r6, #0
   15018:	68ba      	ldr	r2, [r7, #8]
   1501a:	42b2      	cmp	r2, r6
   1501c:	eb06 0308 	add.w	r3, r6, r8
   15020:	d90c      	bls.n	1503c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x4c>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   15022:	687b      	ldr	r3, [r7, #4]
   15024:	6838      	ldr	r0, [r7, #0]
   15026:	5d99      	ldrb	r1, [r3, r6]
   15028:	2201      	movs	r2, #1
   1502a:	4653      	mov	r3, sl
   1502c:	4421      	add	r1, r4
   1502e:	f7ff ffa8 	bl	14f82 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
   15032:	f10a 0a04 	add.w	sl, sl, #4
   15036:	b928      	cbnz	r0, 15044 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   15038:	3601      	adds	r6, #1
   1503a:	e7ed      	b.n	15018 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x28>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   1503c:	3401      	adds	r4, #1
   1503e:	4698      	mov	r8, r3
   15040:	e7e5      	b.n	1500e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x1e>
                    return r;
                }
            }
        }

        return 0;
   15042:	2000      	movs	r0, #0
      }
   15044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00015048 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   15048:	b510      	push	{r4, lr}
   1504a:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   1504c:	6840      	ldr	r0, [r0, #4]
   1504e:	b108      	cbz	r0, 15054 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
   15050:	6823      	ldr	r3, [r4, #0]
   15052:	4798      	blx	r3
	__ptr = pointer();
      }
   15054:	4620      	mov	r0, r4
   15056:	bd10      	pop	{r4, pc}

00015058 <run_inference>:
{
   15058:	b510      	push	{r4, lr}
    EI_IMPULSE_ERROR run_res = run_nn_inference(fmatrix, result, debug);
   1505a:	f7f5 fa43 	bl	a4e4 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>
    if (run_res != EI_IMPULSE_OK) {
   1505e:	4604      	mov	r4, r0
   15060:	b928      	cbnz	r0, 1506e <run_inference+0x16>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   15062:	f7fc fdbe 	bl	11be2 <_Z29ei_run_impulse_check_canceledv>
   15066:	3002      	adds	r0, #2
        return EI_IMPULSE_CANCELED;
   15068:	bf08      	it	eq
   1506a:	f06f 0401 	mvneq.w	r4, #1
}
   1506e:	4620      	mov	r0, r4
   15070:	bd10      	pop	{r4, pc}

00015072 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
   15072:	b513      	push	{r0, r1, r4, lr}
   15074:	460b      	mov	r3, r1
   15076:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   15078:	e9d0 0100 	ldrd	r0, r1, [r0]
   1507c:	466c      	mov	r4, sp
   1507e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   15082:	e893 0003 	ldmia.w	r3, {r0, r1}
   15086:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   1508a:	e894 0003 	ldmia.w	r4, {r0, r1}
   1508e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   15092:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   15094:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   15096:	6090      	str	r0, [r2, #8]
   15098:	68d8      	ldr	r0, [r3, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   1509a:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   1509c:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   1509e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   150a0:	60d9      	str	r1, [r3, #12]
      }
   150a2:	b002      	add	sp, #8
   150a4:	bd10      	pop	{r4, pc}

000150a6 <_ZNSt8functionIFijjPfEEaSERKS2_>:
      operator=(const function& __x)
   150a6:	b530      	push	{r4, r5, lr}
   150a8:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   150aa:	2300      	movs	r3, #0
   150ac:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   150ae:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   150b0:	4605      	mov	r5, r0
   150b2:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   150b4:	b133      	cbz	r3, 150c4 <_ZNSt8functionIFijjPfEEaSERKS2_+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   150b6:	2202      	movs	r2, #2
   150b8:	4668      	mov	r0, sp
   150ba:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   150bc:	68e3      	ldr	r3, [r4, #12]
   150be:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   150c0:	68a3      	ldr	r3, [r4, #8]
   150c2:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   150c4:	4629      	mov	r1, r5
   150c6:	4668      	mov	r0, sp
   150c8:	f7ff ffd3 	bl	15072 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
   150cc:	4668      	mov	r0, sp
   150ce:	f7ff ff0e 	bl	14eee <_ZNSt14_Function_baseD1Ev>
      }
   150d2:	4628      	mov	r0, r5
   150d4:	b005      	add	sp, #20
   150d6:	bd30      	pop	{r4, r5, pc}

000150d8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   150d8:	b160      	cbz	r0, 150f4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   150da:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   150dc:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   150e0:	2b01      	cmp	r3, #1
   150e2:	d003      	beq.n	150ec <sys_notify_validate+0x14>
   150e4:	2b03      	cmp	r3, #3
   150e6:	d105      	bne.n	150f4 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   150e8:	6803      	ldr	r3, [r0, #0]
   150ea:	b11b      	cbz	r3, 150f4 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   150ec:	2300      	movs	r3, #0
   150ee:	6083      	str	r3, [r0, #8]
   150f0:	4618      	mov	r0, r3
   150f2:	4770      	bx	lr
		return -EINVAL;
   150f4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   150f8:	4770      	bx	lr

000150fa <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   150fa:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   150fc:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   150fe:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
   15102:	2b03      	cmp	r3, #3
   15104:	f04f 0200 	mov.w	r2, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   15108:	bf0c      	ite	eq
   1510a:	6803      	ldreq	r3, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1510c:	4613      	movne	r3, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1510e:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   15110:	4618      	mov	r0, r3
   15112:	4770      	bx	lr

00015114 <arch_printk_char_out>:
}
   15114:	2000      	movs	r0, #0
   15116:	4770      	bx	lr

00015118 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   15118:	b40f      	push	{r0, r1, r2, r3}
   1511a:	b507      	push	{r0, r1, r2, lr}
   1511c:	a904      	add	r1, sp, #16
   1511e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   15122:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   15124:	f7f5 fefe 	bl	af24 <vprintk>

	va_end(ap);
}
   15128:	b003      	add	sp, #12
   1512a:	f85d eb04 	ldr.w	lr, [sp], #4
   1512e:	b004      	add	sp, #16
   15130:	4770      	bx	lr

00015132 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15132:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   15134:	f013 0307 	ands.w	r3, r3, #7
   15138:	d105      	bne.n	15146 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1513a:	6803      	ldr	r3, [r0, #0]
   1513c:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1513e:	bf0c      	ite	eq
   15140:	2000      	moveq	r0, #0
   15142:	2003      	movne	r0, #3
   15144:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   15146:	2b02      	cmp	r3, #2
   15148:	d105      	bne.n	15156 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1514a:	8bc3      	ldrh	r3, [r0, #30]
   1514c:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1514e:	bf14      	ite	ne
   15150:	2000      	movne	r0, #0
   15152:	2004      	moveq	r0, #4
   15154:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   15156:	2b01      	cmp	r3, #1
   15158:	d105      	bne.n	15166 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1515a:	6803      	ldr	r3, [r0, #0]
   1515c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1515e:	bf0c      	ite	eq
   15160:	2000      	moveq	r0, #0
   15162:	2005      	movne	r0, #5
   15164:	4770      	bx	lr
	int evt = EVT_NOP;
   15166:	2000      	movs	r0, #0
}
   15168:	4770      	bx	lr

0001516a <notify_one>:
{
   1516a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1516c:	460d      	mov	r5, r1
   1516e:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15170:	4619      	mov	r1, r3
   15172:	1d28      	adds	r0, r5, #4
{
   15174:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15176:	9300      	str	r3, [sp, #0]
   15178:	f7ff ffbf 	bl	150fa <sys_notify_finalize>
	if (cb) {
   1517c:	4604      	mov	r4, r0
   1517e:	b140      	cbz	r0, 15192 <notify_one+0x28>
		cb(mgr, cli, state, res);
   15180:	e9dd 3200 	ldrd	r3, r2, [sp]
   15184:	4629      	mov	r1, r5
   15186:	4630      	mov	r0, r6
   15188:	46a4      	mov	ip, r4
}
   1518a:	b002      	add	sp, #8
   1518c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   15190:	4760      	bx	ip
}
   15192:	b002      	add	sp, #8
   15194:	bd70      	pop	{r4, r5, r6, pc}

00015196 <transition_complete>:
{
   15196:	b410      	push	{r4}
	__asm__ volatile(
   15198:	f04f 0420 	mov.w	r4, #32
   1519c:	f3ef 8211 	mrs	r2, BASEPRI
   151a0:	f384 8812 	msr	BASEPRI_MAX, r4
   151a4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   151a8:	6181      	str	r1, [r0, #24]
}
   151aa:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   151ae:	2101      	movs	r1, #1
   151b0:	f7f5 bec6 	b.w	af40 <process_event>

000151b4 <validate_args>:
{
   151b4:	b510      	push	{r4, lr}
   151b6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   151b8:	b140      	cbz	r0, 151cc <validate_args+0x18>
   151ba:	b139      	cbz	r1, 151cc <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   151bc:	1d08      	adds	r0, r1, #4
   151be:	f7ff ff8b 	bl	150d8 <sys_notify_validate>
	if ((rv == 0)
   151c2:	b928      	cbnz	r0, 151d0 <validate_args+0x1c>
	    && ((cli->notify.flags
   151c4:	68a3      	ldr	r3, [r4, #8]
   151c6:	f033 0303 	bics.w	r3, r3, #3
   151ca:	d001      	beq.n	151d0 <validate_args+0x1c>
		rv = -EINVAL;
   151cc:	f06f 0015 	mvn.w	r0, #21
}
   151d0:	bd10      	pop	{r4, pc}

000151d2 <onoff_manager_init>:
{
   151d2:	b538      	push	{r3, r4, r5, lr}
   151d4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   151d6:	4605      	mov	r5, r0
   151d8:	b158      	cbz	r0, 151f2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   151da:	b151      	cbz	r1, 151f2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   151dc:	680b      	ldr	r3, [r1, #0]
   151de:	b143      	cbz	r3, 151f2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   151e0:	684b      	ldr	r3, [r1, #4]
   151e2:	b133      	cbz	r3, 151f2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   151e4:	2220      	movs	r2, #32
   151e6:	2100      	movs	r1, #0
   151e8:	f000 ff5d 	bl	160a6 <memset>
   151ec:	612c      	str	r4, [r5, #16]
	return 0;
   151ee:	2000      	movs	r0, #0
}
   151f0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   151f2:	f06f 0015 	mvn.w	r0, #21
   151f6:	e7fb      	b.n	151f0 <onoff_manager_init+0x1e>

000151f8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   151f8:	b570      	push	{r4, r5, r6, lr}
   151fa:	4604      	mov	r4, r0
   151fc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   151fe:	f7ff ffd9 	bl	151b4 <validate_args>

	if (rv < 0) {
   15202:	1e05      	subs	r5, r0, #0
   15204:	db31      	blt.n	1526a <onoff_request+0x72>
   15206:	f04f 0320 	mov.w	r3, #32
   1520a:	f3ef 8111 	mrs	r1, BASEPRI
   1520e:	f383 8812 	msr	BASEPRI_MAX, r3
   15212:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   15216:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15218:	8ba0      	ldrh	r0, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1521a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1521e:	42ab      	cmp	r3, r5
   15220:	f000 0207 	and.w	r2, r0, #7
   15224:	d02e      	beq.n	15284 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   15226:	2a02      	cmp	r2, #2
   15228:	d10e      	bne.n	15248 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1522a:	3301      	adds	r3, #1
   1522c:	83e3      	strh	r3, [r4, #30]
	rv = state;
   1522e:	4615      	mov	r5, r2
		notify = true;
   15230:	2301      	movs	r3, #1
	__asm__ volatile(
   15232:	f381 8811 	msr	BASEPRI, r1
   15236:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1523a:	b1b3      	cbz	r3, 1526a <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1523c:	2300      	movs	r3, #0
   1523e:	4631      	mov	r1, r6
   15240:	4620      	mov	r0, r4
   15242:	f7ff ff92 	bl	1516a <notify_one>
   15246:	e010      	b.n	1526a <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   15248:	0783      	lsls	r3, r0, #30
   1524a:	d001      	beq.n	15250 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1524c:	2a06      	cmp	r2, #6
   1524e:	d10e      	bne.n	1526e <onoff_request+0x76>
	parent->next = child;
   15250:	2300      	movs	r3, #0
   15252:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   15254:	6863      	ldr	r3, [r4, #4]
   15256:	b993      	cbnz	r3, 1527e <onoff_request+0x86>
	list->head = node;
   15258:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1525c:	4615      	mov	r5, r2
   1525e:	b962      	cbnz	r2, 1527a <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   15260:	460a      	mov	r2, r1
   15262:	4620      	mov	r0, r4
   15264:	2102      	movs	r1, #2
   15266:	f7f5 fe6b 	bl	af40 <process_event>
		}
	}

	return rv;
}
   1526a:	4628      	mov	r0, r5
   1526c:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1526e:	2a05      	cmp	r2, #5
   15270:	bf0c      	ite	eq
   15272:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   15276:	f06f 0504 	mvnne.w	r5, #4
   1527a:	2300      	movs	r3, #0
   1527c:	e7d9      	b.n	15232 <onoff_request+0x3a>
	parent->next = child;
   1527e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15280:	6066      	str	r6, [r4, #4]
}
   15282:	e7eb      	b.n	1525c <onoff_request+0x64>
		rv = -EAGAIN;
   15284:	f06f 050a 	mvn.w	r5, #10
   15288:	e7f7      	b.n	1527a <onoff_request+0x82>

0001528a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1528a:	4604      	mov	r4, r0
   1528c:	b508      	push	{r3, lr}
   1528e:	4608      	mov	r0, r1
   15290:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   15292:	461a      	mov	r2, r3
   15294:	47a0      	blx	r4
	return z_impl_z_current_get();
   15296:	f7fa f833 	bl	f300 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1529a:	f7f7 fbdd 	bl	ca58 <z_impl_k_thread_abort>

0001529e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1529e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   152a2:	8848      	ldrh	r0, [r1, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   152a4:	0840      	lsrs	r0, r0, #1
   152a6:	4770      	bx	lr

000152a8 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   152a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152aa:	460c      	mov	r4, r1
   152ac:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   152ae:	f7ff fff6 	bl	1529e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   152b2:	fab0 f080 	clz	r0, r0
   152b6:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   152ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   152be:	00e2      	lsls	r2, r4, #3
   152c0:	f8dc 6010 	ldr.w	r6, [ip, #16]
   152c4:	1d17      	adds	r7, r2, #4
   152c6:	b2a5      	uxth	r5, r4
   152c8:	3206      	adds	r2, #6
   152ca:	b956      	cbnz	r6, 152e2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   152cc:	2101      	movs	r1, #1
   152ce:	fa01 f000 	lsl.w	r0, r1, r0
   152d2:	68d9      	ldr	r1, [r3, #12]
   152d4:	4301      	orrs	r1, r0
   152d6:	60d9      	str	r1, [r3, #12]
		b->next = c;
   152d8:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   152dc:	53dd      	strh	r5, [r3, r7]
   152de:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   152e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   152e2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   152e4:	3104      	adds	r1, #4
   152e6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   152e8:	53d8      	strh	r0, [r3, r7]
   152ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   152ee:	529e      	strh	r6, [r3, r2]
   152f0:	80c5      	strh	r5, [r0, #6]
   152f2:	525d      	strh	r5, [r3, r1]
   152f4:	e7f4      	b.n	152e0 <free_list_add+0x38>

000152f6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   152f6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   152f8:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   152fa:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   152fc:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   15300:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   15304:	1ad2      	subs	r2, r2, r3
{
   15306:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   15308:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1530a:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1530c:	fab4 f084 	clz	r0, r4
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   15310:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   15314:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   15316:	1dc1      	adds	r1, r0, #7
	h->avail_buckets = 0;
   15318:	2500      	movs	r5, #0
	h->end_chunk = heap_sz;
   1531a:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   1531c:	60dd      	str	r5, [r3, #12]
   1531e:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   15320:	f103 0610 	add.w	r6, r3, #16
   15324:	4418      	add	r0, r3
   15326:	4286      	cmp	r6, r0
   15328:	d118      	bne.n	1535c <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1532a:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1532c:	f040 0001 	orr.w	r0, r0, #1
   15330:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   15332:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   15336:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15338:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1533a:	801d      	strh	r5, [r3, #0]
   1533c:	8077      	strh	r7, [r6, #2]
   1533e:	189e      	adds	r6, r3, r2
   15340:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   15344:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
   15348:	8075      	strh	r5, [r6, #2]
   1534a:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1534c:	8862      	ldrh	r2, [r4, #2]
   1534e:	f042 0201 	orr.w	r2, r2, #1
   15352:	8062      	strh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   15354:	4618      	mov	r0, r3
}
   15356:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   15358:	f7ff bfa6 	b.w	152a8 <free_list_add>
		h->buckets[i].next = 0;
   1535c:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
   15360:	e7e1      	b.n	15326 <sys_heap_init+0x30>

00015362 <_ldiv5>:
{
   15362:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   15366:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   1536a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1536e:	fba2 bc03 	umull	fp, ip, r2, r3
   15372:	eb1b 0603 	adds.w	r6, fp, r3
   15376:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   1537a:	462f      	mov	r7, r5
	result += (uint64_t)v_hi * m;
   1537c:	fba4 4503 	umull	r4, r5, r4, r3
   15380:	eb1b 0204 	adds.w	r2, fp, r4
	result >>= 32;
   15384:	f04f 0600 	mov.w	r6, #0
	result += (uint64_t)v_hi * m;
   15388:	eb4c 0105 	adc.w	r1, ip, r5
   1538c:	19d2      	adds	r2, r2, r7
   1538e:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   15392:	1863      	adds	r3, r4, r1
	result >>= 32;
   15394:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   15396:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   1539a:	e9c0 3200 	strd	r3, r2, [r0]
}
   1539e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

000153a2 <_get_digit>:
	if (*digit_count > 0) {
   153a2:	680b      	ldr	r3, [r1, #0]
   153a4:	2b00      	cmp	r3, #0
{
   153a6:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   153a8:	dd10      	ble.n	153cc <_get_digit+0x2a>
		*fr *= 10U;
   153aa:	6802      	ldr	r2, [r0, #0]
   153ac:	6844      	ldr	r4, [r0, #4]
		--*digit_count;
   153ae:	3b01      	subs	r3, #1
   153b0:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   153b2:	210a      	movs	r1, #10
   153b4:	fba2 5601 	umull	r5, r6, r2, r1
   153b8:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   153bc:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   153c0:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   153c4:	0f31      	lsrs	r1, r6, #28
   153c6:	3130      	adds	r1, #48	; 0x30
}
   153c8:	4608      	mov	r0, r1
   153ca:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   153cc:	2130      	movs	r1, #48	; 0x30
   153ce:	e7fb      	b.n	153c8 <_get_digit+0x26>

000153d0 <outs>:
{
   153d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   153d4:	4680      	mov	r8, r0
   153d6:	4689      	mov	r9, r1
   153d8:	4616      	mov	r6, r2
   153da:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   153dc:	4615      	mov	r5, r2
   153de:	42bd      	cmp	r5, r7
   153e0:	eba5 0406 	sub.w	r4, r5, r6
   153e4:	d305      	bcc.n	153f2 <outs+0x22>
   153e6:	b10f      	cbz	r7, 153ec <outs+0x1c>
	return (int)count;
   153e8:	4620      	mov	r0, r4
   153ea:	e008      	b.n	153fe <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   153ec:	782b      	ldrb	r3, [r5, #0]
   153ee:	2b00      	cmp	r3, #0
   153f0:	d0fa      	beq.n	153e8 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   153f2:	f815 0b01 	ldrb.w	r0, [r5], #1
   153f6:	4649      	mov	r1, r9
   153f8:	47c0      	blx	r8
		if (rc < 0) {
   153fa:	2800      	cmp	r0, #0
   153fc:	daef      	bge.n	153de <outs+0xe>
}
   153fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015402 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   15402:	4770      	bx	lr

00015404 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   15404:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   15406:	f7f6 fda1 	bl	bf4c <__do_global_ctors_aux>
	__do_init_array_aux();
}
   1540a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
   1540e:	f7f6 bd8f 	b.w	bf30 <__do_init_array_aux>

00015412 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   15412:	2000      	movs	r0, #0
   15414:	4770      	bx	lr

00015416 <abort_function>:
{
   15416:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   15418:	2000      	movs	r0, #0
   1541a:	f7f6 fd75 	bl	bf08 <sys_reboot>

0001541e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1541e:	f000 bc23 	b.w	15c68 <z_fatal_error>

00015422 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   15422:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   15424:	6800      	ldr	r0, [r0, #0]
   15426:	f000 bc1f 	b.w	15c68 <z_fatal_error>

0001542a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1542a:	2100      	movs	r1, #0
   1542c:	2001      	movs	r0, #1
   1542e:	f7ff bff6 	b.w	1541e <z_arm_fatal_error>

00015432 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   15432:	b508      	push	{r3, lr}
	handler();
   15434:	f7f7 f818 	bl	c468 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   15438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1543c:	f7f7 b984 	b.w	c748 <z_arm_exc_exit>

00015440 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   15440:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   15442:	4601      	mov	r1, r0
   15444:	4618      	mov	r0, r3
   15446:	f7ff bfe4 	b.w	15412 <__cxa_atexit>

0001544a <malloc_prepare>:
}
   1544a:	2000      	movs	r0, #0
   1544c:	4770      	bx	lr

0001544e <_stdout_hook_default>:
}
   1544e:	f04f 30ff 	mov.w	r0, #4294967295
   15452:	4770      	bx	lr

00015454 <_stdin_hook_default>:
}
   15454:	2000      	movs	r0, #0
   15456:	4770      	bx	lr

00015458 <_read>:
{
   15458:	4608      	mov	r0, r1
   1545a:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   1545c:	f7f7 bbda 	b.w	cc14 <z_impl_zephyr_read_stdin>

00015460 <_write>:
{
   15460:	4608      	mov	r0, r1
   15462:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15464:	f7f7 bbea 	b.w	cc3c <z_impl_zephyr_write_stdout>

00015468 <_close>:
   15468:	f04f 30ff 	mov.w	r0, #4294967295
   1546c:	4770      	bx	lr

0001546e <_lseek>:
}
   1546e:	2000      	movs	r0, #0
   15470:	4770      	bx	lr

00015472 <_isatty>:
}
   15472:	2802      	cmp	r0, #2
   15474:	bfcc      	ite	gt
   15476:	2000      	movgt	r0, #0
   15478:	2001      	movle	r0, #1
   1547a:	4770      	bx	lr

0001547c <_kill>:
}
   1547c:	2000      	movs	r0, #0
   1547e:	4770      	bx	lr

00015480 <_getpid>:
}
   15480:	2000      	movs	r0, #0
   15482:	4770      	bx	lr

00015484 <_fstat>:
	st->st_mode = S_IFCHR;
   15484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   15488:	604b      	str	r3, [r1, #4]
}
   1548a:	2000      	movs	r0, #0
   1548c:	4770      	bx	lr

0001548e <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   1548e:	b510      	push	{r4, lr}
   15490:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   15492:	2014      	movs	r0, #20
   15494:	f7fa fef0 	bl	10278 <malloc>
   15498:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   1549a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   1549e:	f000 bc55 	b.w	15d4c <z_impl_k_mutex_init>

000154a2 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   154a2:	f04f 32ff 	mov.w	r2, #4294967295
   154a6:	f04f 33ff 	mov.w	r3, #4294967295
   154aa:	f7f9 bb17 	b.w	eadc <z_impl_k_mutex_lock>

000154ae <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   154ae:	f7f9 bb93 	b.w	ebd8 <z_impl_k_mutex_unlock>

000154b2 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   154b2:	f7f9 b945 	b.w	e740 <z_impl_z_errno>

000154b6 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   154b6:	2806      	cmp	r0, #6
   154b8:	d108      	bne.n	154cc <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   154ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   154be:	2201      	movs	r2, #1
   154c0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   154c4:	f3bf 8f4f 	dsb	sy
        __WFE();
   154c8:	bf20      	wfe
    while (true)
   154ca:	e7fd      	b.n	154c8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   154cc:	4770      	bx	lr

000154ce <pm_state_exit_post_ops>:
   154ce:	2300      	movs	r3, #0
   154d0:	f383 8811 	msr	BASEPRI, r3
   154d4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   154d8:	4770      	bx	lr

000154da <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   154da:	6902      	ldr	r2, [r0, #16]
   154dc:	b2cb      	uxtb	r3, r1
   154de:	210c      	movs	r1, #12
   154e0:	fb03 2101 	mla	r1, r3, r1, r2
   154e4:	6c88      	ldr	r0, [r1, #72]	; 0x48
}
   154e6:	f000 0007 	and.w	r0, r0, #7
   154ea:	4770      	bx	lr

000154ec <set_off_state>:
	__asm__ volatile(
   154ec:	f04f 0320 	mov.w	r3, #32
   154f0:	f3ef 8211 	mrs	r2, BASEPRI
   154f4:	f383 8812 	msr	BASEPRI_MAX, r3
   154f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   154fc:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   154fe:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   15502:	d001      	beq.n	15508 <set_off_state+0x1c>
   15504:	428b      	cmp	r3, r1
   15506:	d107      	bne.n	15518 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   15508:	2301      	movs	r3, #1
   1550a:	6003      	str	r3, [r0, #0]
	int err = 0;
   1550c:	2000      	movs	r0, #0
	__asm__ volatile(
   1550e:	f382 8811 	msr	BASEPRI, r2
   15512:	f3bf 8f6f 	isb	sy
}
   15516:	4770      	bx	lr
		err = -EPERM;
   15518:	f04f 30ff 	mov.w	r0, #4294967295
   1551c:	e7f7      	b.n	1550e <set_off_state+0x22>

0001551e <set_starting_state>:
{
   1551e:	b510      	push	{r4, lr}
	__asm__ volatile(
   15520:	f04f 0320 	mov.w	r3, #32
   15524:	f3ef 8211 	mrs	r2, BASEPRI
   15528:	f383 8812 	msr	BASEPRI_MAX, r3
   1552c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15530:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   15532:	f003 0407 	and.w	r4, r3, #7
   15536:	2c01      	cmp	r4, #1
   15538:	d106      	bne.n	15548 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1553a:	6001      	str	r1, [r0, #0]
	int err = 0;
   1553c:	2000      	movs	r0, #0
	__asm__ volatile(
   1553e:	f382 8811 	msr	BASEPRI, r2
   15542:	f3bf 8f6f 	isb	sy
}
   15546:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   15548:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1554c:	428b      	cmp	r3, r1
		err = -EALREADY;
   1554e:	bf14      	ite	ne
   15550:	f04f 30ff 	movne.w	r0, #4294967295
   15554:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   15558:	e7f1      	b.n	1553e <set_starting_state+0x20>

0001555a <set_on_state>:
	__asm__ volatile(
   1555a:	f04f 0320 	mov.w	r3, #32
   1555e:	f3ef 8211 	mrs	r2, BASEPRI
   15562:	f383 8812 	msr	BASEPRI_MAX, r3
   15566:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1556a:	6803      	ldr	r3, [r0, #0]
   1556c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15570:	f043 0302 	orr.w	r3, r3, #2
   15574:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   15576:	f382 8811 	msr	BASEPRI, r2
   1557a:	f3bf 8f6f 	isb	sy
}
   1557e:	4770      	bx	lr

00015580 <onoff_started_callback>:
	return &data->mgr[type];
   15580:	6900      	ldr	r0, [r0, #16]
   15582:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   15584:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   15588:	2100      	movs	r1, #0
   1558a:	4710      	bx	r2

0001558c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1558c:	2000      	movs	r0, #0
   1558e:	f7f8 bcbf 	b.w	df10 <nrfx_clock_start>

00015592 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   15592:	2000      	movs	r0, #0
   15594:	f000 bafe 	b.w	15b94 <nrfx_clock_stop>

00015598 <blocking_start_callback>:
{
   15598:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1559a:	f7f9 bb63 	b.w	ec64 <z_impl_k_sem_give>

0001559e <api_stop>:
{
   1559e:	b538      	push	{r3, r4, r5, lr}
   155a0:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   155a2:	230c      	movs	r3, #12
{
   155a4:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   155a6:	4363      	muls	r3, r4
   155a8:	6900      	ldr	r0, [r0, #16]
   155aa:	3348      	adds	r3, #72	; 0x48
   155ac:	2180      	movs	r1, #128	; 0x80
   155ae:	4418      	add	r0, r3
   155b0:	f7ff ff9c 	bl	154ec <set_off_state>
	if (err < 0) {
   155b4:	2800      	cmp	r0, #0
   155b6:	db05      	blt.n	155c4 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   155b8:	6869      	ldr	r1, [r5, #4]
   155ba:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   155be:	6863      	ldr	r3, [r4, #4]
   155c0:	4798      	blx	r3
	return 0;
   155c2:	2000      	movs	r0, #0
}
   155c4:	bd38      	pop	{r3, r4, r5, pc}

000155c6 <api_start>:
{
   155c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   155ca:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   155cc:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   155ce:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   155d0:	436f      	muls	r7, r5
{
   155d2:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   155d4:	f107 0048 	add.w	r0, r7, #72	; 0x48
   155d8:	2180      	movs	r1, #128	; 0x80
   155da:	4420      	add	r0, r4
{
   155dc:	4690      	mov	r8, r2
   155de:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   155e0:	f7ff ff9d 	bl	1551e <set_starting_state>
	if (err < 0) {
   155e4:	2800      	cmp	r0, #0
   155e6:	db07      	blt.n	155f8 <api_start+0x32>
	subdata->cb = cb;
   155e8:	443c      	add	r4, r7
	subdata->user_data = user_data;
   155ea:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   155ee:	6873      	ldr	r3, [r6, #4]
   155f0:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   155f4:	4798      	blx	r3
	return 0;
   155f6:	2000      	movs	r0, #0
}
   155f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000155fc <uart_poll_out>:
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   155fc:	6883      	ldr	r3, [r0, #8]
   155fe:	685b      	ldr	r3, [r3, #4]
   15600:	4718      	bx	r3

00015602 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15602:	6843      	ldr	r3, [r0, #4]
   15604:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   15606:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1560a:	600b      	str	r3, [r1, #0]
}
   1560c:	2000      	movs	r0, #0
   1560e:	4770      	bx	lr

00015610 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15610:	6843      	ldr	r3, [r0, #4]
   15612:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   15614:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   15618:	4042      	eors	r2, r0
   1561a:	400a      	ands	r2, r1
   1561c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1561e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   15622:	2000      	movs	r0, #0
   15624:	4770      	bx	lr

00015626 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15626:	6843      	ldr	r3, [r0, #4]
   15628:	685b      	ldr	r3, [r3, #4]
}
   1562a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1562c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   15630:	4770      	bx	lr

00015632 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15632:	6843      	ldr	r3, [r0, #4]
   15634:	685b      	ldr	r3, [r3, #4]
}
   15636:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   15638:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1563c:	4770      	bx	lr

0001563e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1563e:	6843      	ldr	r3, [r0, #4]
   15640:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   15642:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   15646:	4059      	eors	r1, r3
    p_reg->OUT = value;
   15648:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1564c:	2000      	movs	r0, #0
   1564e:	4770      	bx	lr

00015650 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15650:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   15652:	6858      	ldr	r0, [r3, #4]
{
   15654:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   15656:	b158      	cbz	r0, 15670 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15658:	2400      	movs	r4, #0
   1565a:	4281      	cmp	r1, r0
   1565c:	d113      	bne.n	15686 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1565e:	6808      	ldr	r0, [r1, #0]
   15660:	b95c      	cbnz	r4, 1567a <gpio_nrfx_manage_callback+0x2a>
   15662:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   15664:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   15666:	42a1      	cmp	r1, r4
   15668:	d100      	bne.n	1566c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1566a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1566c:	2000      	movs	r0, #0
   1566e:	6008      	str	r0, [r1, #0]
	if (set) {
   15670:	b972      	cbnz	r2, 15690 <gpio_nrfx_manage_callback+0x40>
	return 0;
   15672:	2000      	movs	r0, #0
}
   15674:	bd30      	pop	{r4, r5, pc}
   15676:	4628      	mov	r0, r5
   15678:	e7ef      	b.n	1565a <gpio_nrfx_manage_callback+0xa>
   1567a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1567c:	6898      	ldr	r0, [r3, #8]
   1567e:	4281      	cmp	r1, r0
	list->tail = node;
   15680:	bf08      	it	eq
   15682:	609c      	streq	r4, [r3, #8]
}
   15684:	e7f2      	b.n	1566c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15686:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15688:	4604      	mov	r4, r0
   1568a:	2d00      	cmp	r5, #0
   1568c:	d1f3      	bne.n	15676 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1568e:	b13a      	cbz	r2, 156a0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   15690:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   15692:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   15694:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   15696:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   15698:	2800      	cmp	r0, #0
   1569a:	d1ea      	bne.n	15672 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1569c:	6099      	str	r1, [r3, #8]
}
   1569e:	e7e9      	b.n	15674 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   156a0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   156a4:	e7e6      	b.n	15674 <gpio_nrfx_manage_callback+0x24>

000156a6 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   156a6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   156a8:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   156aa:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   156ae:	05c9      	lsls	r1, r1, #23
{
   156b0:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   156b2:	d518      	bpl.n	156e6 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   156b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   156b8:	b1a9      	cbz	r1, 156e6 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   156ba:	f04f 0420 	mov.w	r4, #32
   156be:	f3ef 8111 	mrs	r1, BASEPRI
   156c2:	f384 8812 	msr	BASEPRI_MAX, r4
   156c6:	f3bf 8f6f 	isb	sy
   156ca:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   156ce:	b134      	cbz	r4, 156de <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   156d0:	2400      	movs	r4, #0
   156d2:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   156d6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   156da:	2401      	movs	r4, #1
   156dc:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   156de:	f381 8811 	msr	BASEPRI, r1
   156e2:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   156e6:	6852      	ldr	r2, [r2, #4]
   156e8:	06d2      	lsls	r2, r2, #27
   156ea:	d51a      	bpl.n	15722 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   156ec:	f04f 0220 	mov.w	r2, #32
   156f0:	f3ef 8111 	mrs	r1, BASEPRI
   156f4:	f382 8812 	msr	BASEPRI_MAX, r2
   156f8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   156fc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   15700:	b112      	cbz	r2, 15708 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15702:	2200      	movs	r2, #0
   15704:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   15708:	6902      	ldr	r2, [r0, #16]
   1570a:	68d2      	ldr	r2, [r2, #12]
   1570c:	b10a      	cbz	r2, 15712 <uarte_nrfx_isr_int+0x6c>
   1570e:	6912      	ldr	r2, [r2, #16]
   15710:	b91a      	cbnz	r2, 1571a <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   15712:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   15716:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1571a:	f381 8811 	msr	BASEPRI, r1
   1571e:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   15722:	6902      	ldr	r2, [r0, #16]
   15724:	68d2      	ldr	r2, [r2, #12]
   15726:	b15a      	cbz	r2, 15740 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15728:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1572c:	b159      	cbz	r1, 15746 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   1572e:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   15730:	2100      	movs	r1, #0
   15732:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   15734:	b13c      	cbz	r4, 15746 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   15736:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1573a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1573e:	7391      	strb	r1, [r2, #14]
}
   15740:	f85d 4b04 	ldr.w	r4, [sp], #4
   15744:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15746:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1574a:	b121      	cbz	r1, 15756 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1574c:	2100      	movs	r1, #0
   1574e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   15752:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   15756:	6813      	ldr	r3, [r2, #0]
   15758:	2b00      	cmp	r3, #0
   1575a:	d0f1      	beq.n	15740 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1575c:	6851      	ldr	r1, [r2, #4]
}
   1575e:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   15762:	4718      	bx	r3

00015764 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   15764:	6902      	ldr	r2, [r0, #16]
{
   15766:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   15768:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1576c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   15770:	2000      	movs	r0, #0
   15772:	4770      	bx	lr

00015774 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   15774:	6843      	ldr	r3, [r0, #4]
   15776:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   15778:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1577c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   15780:	4770      	bx	lr

00015782 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   15782:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   15784:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   15786:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15788:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1578c:	b148      	cbz	r0, 157a2 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1578e:	7d52      	ldrb	r2, [r2, #21]
   15790:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15792:	2000      	movs	r0, #0
   15794:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   15798:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1579c:	2201      	movs	r2, #1
   1579e:	601a      	str	r2, [r3, #0]
	return 0;
   157a0:	4770      	bx	lr
		return -1;
   157a2:	f04f 30ff 	mov.w	r0, #4294967295
}
   157a6:	4770      	bx	lr

000157a8 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   157a8:	2a00      	cmp	r2, #0
   157aa:	dd0f      	ble.n	157cc <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
   157ac:	6843      	ldr	r3, [r0, #4]
   157ae:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   157b0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   157b4:	b153      	cbz	r3, 157cc <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = dev->data;
   157b6:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   157b8:	2000      	movs	r0, #0
   157ba:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   157be:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   157c2:	7d5b      	ldrb	r3, [r3, #21]
   157c4:	700b      	strb	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   157c6:	2001      	movs	r0, #1
   157c8:	6010      	str	r0, [r2, #0]
}
   157ca:	4770      	bx	lr
	int num_rx = 0;
   157cc:	2000      	movs	r0, #0
   157ce:	4770      	bx	lr

000157d0 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   157d0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   157d2:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   157d4:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   157d6:	f04f 0020 	mov.w	r0, #32
   157da:	f3ef 8311 	mrs	r3, BASEPRI
   157de:	f380 8812 	msr	BASEPRI_MAX, r0
   157e2:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   157e6:	68c9      	ldr	r1, [r1, #12]
   157e8:	2000      	movs	r0, #0
   157ea:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   157ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   157f0:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   157f4:	f383 8811 	msr	BASEPRI, r3
   157f8:	f3bf 8f6f 	isb	sy
}
   157fc:	4770      	bx	lr

000157fe <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   157fe:	6903      	ldr	r3, [r0, #16]
   15800:	68db      	ldr	r3, [r3, #12]
   15802:	2201      	movs	r2, #1
   15804:	739a      	strb	r2, [r3, #14]
}
   15806:	4770      	bx	lr

00015808 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   15808:	6903      	ldr	r3, [r0, #16]
   1580a:	68db      	ldr	r3, [r3, #12]
   1580c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1580e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   15812:	b962      	cbnz	r2, 1582e <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   15814:	6842      	ldr	r2, [r0, #4]
   15816:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15818:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1581c:	b140      	cbz	r0, 15830 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1581e:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   15822:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   15826:	d003      	beq.n	15830 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   15828:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1582a:	2001      	movs	r0, #1
   1582c:	4770      	bx	lr
   1582e:	2000      	movs	r0, #0
}
   15830:	4770      	bx	lr

00015832 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   15832:	6843      	ldr	r3, [r0, #4]
   15834:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15836:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1583a:	3800      	subs	r0, #0
   1583c:	bf18      	it	ne
   1583e:	2001      	movne	r0, #1
   15840:	4770      	bx	lr

00015842 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   15842:	6843      	ldr	r3, [r0, #4]
   15844:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   15846:	2210      	movs	r2, #16
   15848:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1584c:	4770      	bx	lr

0001584e <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   1584e:	6843      	ldr	r3, [r0, #4]
   15850:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   15852:	2210      	movs	r2, #16
   15854:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15858:	4770      	bx	lr

0001585a <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   1585a:	6843      	ldr	r3, [r0, #4]
   1585c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1585e:	f44f 7200 	mov.w	r2, #512	; 0x200
   15862:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   15866:	4770      	bx	lr

00015868 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   15868:	6843      	ldr	r3, [r0, #4]
   1586a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1586c:	f44f 7200 	mov.w	r2, #512	; 0x200
   15870:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15874:	4770      	bx	lr

00015876 <uarte_nrfx_irq_update>:
}
   15876:	2001      	movs	r0, #1
   15878:	4770      	bx	lr

0001587a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1587a:	6903      	ldr	r3, [r0, #16]
   1587c:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1587e:	e9c3 1200 	strd	r1, r2, [r3]
}
   15882:	4770      	bx	lr

00015884 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   15884:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15886:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1588a:	b943      	cbnz	r3, 1589e <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1588c:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1588e:	0789      	lsls	r1, r1, #30
   15890:	d407      	bmi.n	158a2 <is_tx_ready.isra.0+0x1e>
   15892:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   15896:	3800      	subs	r0, #0
   15898:	bf18      	it	ne
   1589a:	2001      	movne	r0, #1
   1589c:	4770      	bx	lr
   1589e:	2001      	movs	r0, #1
   158a0:	4770      	bx	lr
   158a2:	4618      	mov	r0, r3
}
   158a4:	4770      	bx	lr

000158a6 <tx_start>:
	const struct uarte_nrfx_config *config = dev->config;
   158a6:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   158a8:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   158aa:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   158ae:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158b2:	2200      	movs	r2, #0
   158b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   158b8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   158bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   158c0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   158c4:	6842      	ldr	r2, [r0, #4]
   158c6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   158c8:	bf41      	itttt	mi
   158ca:	2208      	movmi	r2, #8
   158cc:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   158d0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   158d4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   158d8:	2201      	movs	r2, #1
   158da:	609a      	str	r2, [r3, #8]
}
   158dc:	4770      	bx	lr

000158de <uarte_nrfx_fifo_fill>:
{
   158de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   158e0:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   158e2:	68f3      	ldr	r3, [r6, #12]
   158e4:	899c      	ldrh	r4, [r3, #12]
   158e6:	f3bf 8f5b 	dmb	ish
   158ea:	4294      	cmp	r4, r2
   158ec:	bfa8      	it	ge
   158ee:	4614      	movge	r4, r2
{
   158f0:	4605      	mov	r5, r0
   158f2:	3310      	adds	r3, #16
   158f4:	2201      	movs	r2, #1
   158f6:	e853 0f00 	ldrex	r0, [r3]
   158fa:	2800      	cmp	r0, #0
   158fc:	d103      	bne.n	15906 <uarte_nrfx_fifo_fill+0x28>
   158fe:	e843 2700 	strex	r7, r2, [r3]
   15902:	2f00      	cmp	r7, #0
   15904:	d1f7      	bne.n	158f6 <uarte_nrfx_fifo_fill+0x18>
   15906:	f3bf 8f5b 	dmb	ish
   1590a:	bf0c      	ite	eq
   1590c:	4613      	moveq	r3, r2
   1590e:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   15910:	d01d      	beq.n	1594e <uarte_nrfx_fifo_fill+0x70>
		return 0;
   15912:	461c      	mov	r4, r3
}
   15914:	4620      	mov	r0, r4
   15916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   15918:	68f2      	ldr	r2, [r6, #12]
   1591a:	5cc8      	ldrb	r0, [r1, r3]
   1591c:	6892      	ldr	r2, [r2, #8]
   1591e:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   15920:	3301      	adds	r3, #1
   15922:	42a3      	cmp	r3, r4
   15924:	dbf8      	blt.n	15918 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   15926:	f04f 0320 	mov.w	r3, #32
   1592a:	f3ef 8711 	mrs	r7, BASEPRI
   1592e:	f383 8812 	msr	BASEPRI_MAX, r3
   15932:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   15936:	6868      	ldr	r0, [r5, #4]
   15938:	f7ff ffa4 	bl	15884 <is_tx_ready.isra.0>
   1593c:	68f3      	ldr	r3, [r6, #12]
   1593e:	b940      	cbnz	r0, 15952 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   15940:	6118      	str	r0, [r3, #16]
		len = 0;
   15942:	4604      	mov	r4, r0
	__asm__ volatile(
   15944:	f387 8811 	msr	BASEPRI, r7
   15948:	f3bf 8f6f 	isb	sy
	return len;
   1594c:	e7e2      	b.n	15914 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   1594e:	2300      	movs	r3, #0
   15950:	e7e7      	b.n	15922 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   15952:	6899      	ldr	r1, [r3, #8]
   15954:	4622      	mov	r2, r4
   15956:	4628      	mov	r0, r5
   15958:	f7ff ffa5 	bl	158a6 <tx_start>
   1595c:	e7f2      	b.n	15944 <uarte_nrfx_fifo_fill+0x66>

0001595e <uarte_nrfx_irq_is_pending>:
{
   1595e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   15960:	6843      	ldr	r3, [r0, #4]
   15962:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   15964:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   15968:	025b      	lsls	r3, r3, #9
{
   1596a:	4604      	mov	r4, r0
		||
   1596c:	d405      	bmi.n	1597a <uarte_nrfx_irq_is_pending+0x1c>
   1596e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   15972:	f010 0010 	ands.w	r0, r0, #16
   15976:	d106      	bne.n	15986 <uarte_nrfx_irq_is_pending+0x28>
}
   15978:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1597a:	f7ff ff45 	bl	15808 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1597e:	2800      	cmp	r0, #0
   15980:	d0f5      	beq.n	1596e <uarte_nrfx_irq_is_pending+0x10>
		||
   15982:	2001      	movs	r0, #1
   15984:	e7f8      	b.n	15978 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   15986:	4620      	mov	r0, r4
   15988:	f7ff ff53 	bl	15832 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1598c:	3800      	subs	r0, #0
   1598e:	bf18      	it	ne
   15990:	2001      	movne	r0, #1
   15992:	e7f1      	b.n	15978 <uarte_nrfx_irq_is_pending+0x1a>

00015994 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15994:	b510      	push	{r4, lr}
   15996:	2200      	movs	r2, #0
   15998:	4604      	mov	r4, r0
   1599a:	2101      	movs	r1, #1
   1599c:	2002      	movs	r0, #2
   1599e:	f7f6 fd4b 	bl	c438 <z_arm_irq_priority_set>
   159a2:	2002      	movs	r0, #2
   159a4:	f7f6 fd2a 	bl	c3fc <arch_irq_enable>
   159a8:	4620      	mov	r0, r4
   159aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   159ae:	f7f7 bd8d 	b.w	d4cc <uarte_instance_init.isra.0>

000159b2 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   159b2:	b510      	push	{r4, lr}
   159b4:	2200      	movs	r2, #0
   159b6:	4604      	mov	r4, r0
   159b8:	2101      	movs	r1, #1
   159ba:	2028      	movs	r0, #40	; 0x28
   159bc:	f7f6 fd3c 	bl	c438 <z_arm_irq_priority_set>
   159c0:	2028      	movs	r0, #40	; 0x28
   159c2:	f7f6 fd1b 	bl	c3fc <arch_irq_enable>
   159c6:	4620      	mov	r0, r4
   159c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   159cc:	f7f7 bd7e 	b.w	d4cc <uarte_instance_init.isra.0>

000159d0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   159d0:	4770      	bx	lr

000159d2 <pinctrl_lookup_state>:
#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
	*state = &config->states[0];
   159d2:	6843      	ldr	r3, [r0, #4]
   159d4:	6013      	str	r3, [r2, #0]
{
   159d6:	b570      	push	{r4, r5, r6, lr}
	while (*state <= &config->states[config->state_cnt - 1U]) {
   159d8:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
   159dc:	7a04      	ldrb	r4, [r0, #8]
   159de:	6813      	ldr	r3, [r2, #0]
   159e0:	19a5      	adds	r5, r4, r6
   159e2:	6844      	ldr	r4, [r0, #4]
   159e4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   159e8:	42a3      	cmp	r3, r4
   159ea:	d902      	bls.n	159f2 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   159ec:	f06f 0001 	mvn.w	r0, #1
}
   159f0:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   159f2:	795c      	ldrb	r4, [r3, #5]
   159f4:	428c      	cmp	r4, r1
   159f6:	d002      	beq.n	159fe <pinctrl_lookup_state+0x2c>
		(*state)++;
   159f8:	3308      	adds	r3, #8
   159fa:	6013      	str	r3, [r2, #0]
   159fc:	e7ee      	b.n	159dc <pinctrl_lookup_state+0xa>
			return 0;
   159fe:	2000      	movs	r0, #0
   15a00:	e7f6      	b.n	159f0 <pinctrl_lookup_state+0x1e>

00015a02 <nrf_gpio_pin_write>:
    if (value == 0)
   15a02:	b909      	cbnz	r1, 15a08 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   15a04:	f7f8 b896 	b.w	db34 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   15a08:	f7f8 b8a4 	b.w	db54 <nrf_gpio_pin_set>

00015a0c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   15a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a0e:	4605      	mov	r5, r0
   15a10:	460f      	mov	r7, r1
   15a12:	4616      	mov	r6, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   15a14:	2400      	movs	r4, #0
   15a16:	42a7      	cmp	r7, r4
   15a18:	d101      	bne.n	15a1e <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   15a1a:	2000      	movs	r0, #0
}
   15a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (NRF_GET_FUN(pins[i])) {
   15a1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   15a22:	0c1a      	lsrs	r2, r3, #16
   15a24:	2a22      	cmp	r2, #34	; 0x22
   15a26:	f200 8093 	bhi.w	15b50 <pinctrl_configure_pins+0x144>
   15a2a:	e8df f002 	tbb	[pc, r2]
   15a2e:	1e12      	.short	0x1e12
   15a30:	3c2a4725 	.word	0x3c2a4725
   15a34:	91919147 	.word	0x91919147
   15a38:	91514c91 	.word	0x91514c91
   15a3c:	91919191 	.word	0x91919191
   15a40:	91919191 	.word	0x91919191
   15a44:	6d686356 	.word	0x6d686356
   15a48:	72919191 	.word	0x72919191
   15a4c:	87827d78 	.word	0x87827d78
   15a50:	8c          	.byte	0x8c
   15a51:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   15a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a56:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   15a5a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   15a5e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15a62:	f7f8 f877 	bl	db54 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   15a66:	2201      	movs	r2, #1
   15a68:	e016      	b.n	15a98 <pinctrl_configure_pins+0x8c>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   15a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a6e:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15a72:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15a74:	2100      	movs	r1, #0
   15a76:	e010      	b.n	15a9a <pinctrl_configure_pins+0x8e>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   15a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a7c:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
   15a80:	e7eb      	b.n	15a5a <pinctrl_configure_pins+0x4e>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   15a82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a86:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   15a8a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
        nrf_gpio_pin_clear(pin_number);
   15a8e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15a92:	f7f8 f84f 	bl	db34 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   15a96:	2200      	movs	r2, #0
   15a98:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15a9a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   15a9e:	f7f8 f829 	bl	daf4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   15aa2:	3401      	adds	r4, #1
   15aa4:	e7b7      	b.n	15a16 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   15aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15aaa:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   15aae:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   15ab2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15ab6:	f7f8 f83d 	bl	db34 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   15aba:	e7d4      	b.n	15a66 <pinctrl_configure_pins+0x5a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   15abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15ac0:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15ac4:	e7d5      	b.n	15a72 <pinctrl_configure_pins+0x66>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   15ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15aca:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15ace:	e7d0      	b.n	15a72 <pinctrl_configure_pins+0x66>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   15ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15ad4:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
   15ad8:	e7cb      	b.n	15a72 <pinctrl_configure_pins+0x66>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   15ada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15ade:	f8c6 3560 	str.w	r3, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   15ae2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   15ae6:	f3c0 3140 	ubfx	r1, r0, #13, #1
   15aea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15aee:	f7ff ff88 	bl	15a02 <nrf_gpio_pin_write>
   15af2:	e7b8      	b.n	15a66 <pinctrl_configure_pins+0x5a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   15af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15af8:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   15afc:	e7f1      	b.n	15ae2 <pinctrl_configure_pins+0xd6>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   15afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b02:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   15b06:	e7ec      	b.n	15ae2 <pinctrl_configure_pins+0xd6>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   15b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b0c:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c
   15b10:	e7e7      	b.n	15ae2 <pinctrl_configure_pins+0xd6>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   15b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b16:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15b1a:	2201      	movs	r2, #1
   15b1c:	e7aa      	b.n	15a74 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   15b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b22:	f8c6 3528 	str.w	r3, [r6, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15b26:	e7f8      	b.n	15b1a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   15b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b2c:	f8c6 3530 	str.w	r3, [r6, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15b30:	e7f3      	b.n	15b1a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   15b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b36:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15b3a:	e7ee      	b.n	15b1a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   15b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b40:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15b44:	e7e9      	b.n	15b1a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   15b46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15b4a:	f8c6 353c 	str.w	r3, [r6, #1340]	; 0x53c
   15b4e:	e7e4      	b.n	15b1a <pinctrl_configure_pins+0x10e>
		switch (NRF_GET_FUN(pins[i])) {
   15b50:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15b54:	e762      	b.n	15a1c <pinctrl_configure_pins+0x10>

00015b56 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   15b56:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   15b58:	2000      	movs	r0, #0
   15b5a:	f7f7 f8d5 	bl	cd08 <sys_arch_reboot>

00015b5e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   15b5e:	f7fb be2f 	b.w	117c0 <nrf_cc3xx_platform_init_no_rng>

00015b62 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   15b62:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   15b64:	f7f6 fb62 	bl	c22c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   15b68:	f7f6 fc14 	bl	c394 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   15b6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   15b70:	f7fb be26 	b.w	117c0 <nrf_cc3xx_platform_init_no_rng>

00015b74 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   15b74:	4700      	bx	r0

00015b76 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   15b76:	f000 b9e0 	b.w	15f3a <z_impl_k_busy_wait>

00015b7a <nrfx_clock_enable>:
{
   15b7a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15b7c:	2000      	movs	r0, #0
   15b7e:	f7f6 fc4d 	bl	c41c <arch_irq_is_enabled>
   15b82:	b908      	cbnz	r0, 15b88 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15b84:	f7f6 fc3a 	bl	c3fc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15b8c:	2200      	movs	r2, #0
   15b8e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   15b92:	bd08      	pop	{r3, pc}

00015b94 <nrfx_clock_stop>:
    clock_stop(domain);
   15b94:	f7f8 b950 	b.w	de38 <clock_stop>

00015b98 <nrf_gpio_reconfigure>:
{
   15b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15b9a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15b9c:	a801      	add	r0, sp, #4
{
   15b9e:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   15ba2:	4617      	mov	r7, r2
   15ba4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15ba6:	f7f8 fa29 	bl	dffc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   15baa:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15bac:	2f00      	cmp	r7, #0
   15bae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15bb2:	bf14      	ite	ne
   15bb4:	2302      	movne	r3, #2
   15bb6:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   15bb8:	2900      	cmp	r1, #0
   15bba:	bf18      	it	ne
   15bbc:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   15bc0:	2d00      	cmp	r5, #0
   15bc2:	bf14      	ite	ne
   15bc4:	f04f 0c0c 	movne.w	ip, #12
   15bc8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   15bcc:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15bce:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   15bd2:	bf14      	ite	ne
   15bd4:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   15bd8:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   15bdc:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   15bde:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   15be2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   15be6:	bf14      	ite	ne
   15be8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   15bec:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   15bf0:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   15bf4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15bf8:	b101      	cbz	r1, 15bfc <nrf_gpio_reconfigure+0x64>
   15bfa:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   15bfc:	b10f      	cbz	r7, 15c02 <nrf_gpio_reconfigure+0x6a>
   15bfe:	783f      	ldrb	r7, [r7, #0]
   15c00:	007f      	lsls	r7, r7, #1
   15c02:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   15c04:	b10d      	cbz	r5, 15c0a <nrf_gpio_reconfigure+0x72>
   15c06:	782d      	ldrb	r5, [r5, #0]
   15c08:	00ad      	lsls	r5, r5, #2
   15c0a:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   15c0c:	b10c      	cbz	r4, 15c12 <nrf_gpio_reconfigure+0x7a>
   15c0e:	7822      	ldrb	r2, [r4, #0]
   15c10:	0214      	lsls	r4, r2, #8
   15c12:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   15c14:	b10e      	cbz	r6, 15c1a <nrf_gpio_reconfigure+0x82>
   15c16:	7836      	ldrb	r6, [r6, #0]
   15c18:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   15c1a:	432c      	orrs	r4, r5
   15c1c:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   15c1e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   15c22:	b003      	add	sp, #12
   15c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015c26 <nrf_gpio_cfg_sense_set>:
{
   15c26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   15c28:	f10d 030f 	add.w	r3, sp, #15
   15c2c:	9301      	str	r3, [sp, #4]
   15c2e:	2300      	movs	r3, #0
{
   15c30:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   15c34:	9300      	str	r3, [sp, #0]
   15c36:	461a      	mov	r2, r3
   15c38:	4619      	mov	r1, r3
   15c3a:	f7ff ffad 	bl	15b98 <nrf_gpio_reconfigure>
}
   15c3e:	b005      	add	sp, #20
   15c40:	f85d fb04 	ldr.w	pc, [sp], #4

00015c44 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   15c44:	f7f8 bd26 	b.w	e694 <_DoInit>

00015c48 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   15c48:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   15c4a:	f7ff fffb 	bl	15c44 <SEGGER_RTT_Init>

	return 0;
}
   15c4e:	2000      	movs	r0, #0
   15c50:	bd08      	pop	{r3, pc}

00015c52 <z_device_state_init>:
}
   15c52:	4770      	bx	lr

00015c54 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   15c54:	b138      	cbz	r0, 15c66 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   15c56:	68c3      	ldr	r3, [r0, #12]
   15c58:	8818      	ldrh	r0, [r3, #0]
   15c5a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   15c5e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   15c62:	4258      	negs	r0, r3
   15c64:	4158      	adcs	r0, r3
}
   15c66:	4770      	bx	lr

00015c68 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15c6a:	4605      	mov	r5, r0
   15c6c:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   15c6e:	f04f 0320 	mov.w	r3, #32
   15c72:	f3ef 8611 	mrs	r6, BASEPRI
   15c76:	f383 8812 	msr	BASEPRI_MAX, r3
   15c7a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   15c7e:	f7f9 fb3f 	bl	f300 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   15c82:	9901      	ldr	r1, [sp, #4]
   15c84:	4604      	mov	r4, r0
   15c86:	4628      	mov	r0, r5
   15c88:	f7ff ff65 	bl	15b56 <k_sys_fatal_error_handler>
	__asm__ volatile(
   15c8c:	f386 8811 	msr	BASEPRI, r6
   15c90:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15c94:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15c96:	b002      	add	sp, #8
   15c98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15c9c:	f7f6 bedc 	b.w	ca58 <z_impl_k_thread_abort>

00015ca0 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   15ca0:	f000 ba01 	b.w	160a6 <memset>

00015ca4 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15ca4:	f000 b9d7 	b.w	16056 <memcpy>

00015ca8 <k_mem_slab_init>:
{
   15ca8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   15caa:	2400      	movs	r4, #0
   15cac:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   15cae:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15cb0:	ea41 0402 	orr.w	r4, r1, r2
   15cb4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   15cb8:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   15cbc:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15cbe:	d10c      	bne.n	15cda <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   15cc0:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15cc2:	42a3      	cmp	r3, r4
   15cc4:	d103      	bne.n	15cce <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   15cc6:	e9c0 0000 	strd	r0, r0, [r0]
}
   15cca:	2000      	movs	r0, #0
}
   15ccc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   15cce:	6985      	ldr	r5, [r0, #24]
   15cd0:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   15cd2:	3401      	adds	r4, #1
		slab->free_list = p;
   15cd4:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   15cd6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   15cd8:	e7f3      	b.n	15cc2 <k_mem_slab_init+0x1a>
		return -EINVAL;
   15cda:	f06f 0015 	mvn.w	r0, #21
	return rc;
   15cde:	e7f5      	b.n	15ccc <k_mem_slab_init+0x24>

00015ce0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   15ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ce2:	4604      	mov	r4, r0
   15ce4:	460d      	mov	r5, r1
	__asm__ volatile(
   15ce6:	f04f 0320 	mov.w	r3, #32
   15cea:	f3ef 8611 	mrs	r6, BASEPRI
   15cee:	f383 8812 	msr	BASEPRI_MAX, r3
   15cf2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   15cf6:	6987      	ldr	r7, [r0, #24]
   15cf8:	b977      	cbnz	r7, 15d18 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   15cfa:	f000 f8bf 	bl	15e7c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   15cfe:	b158      	cbz	r0, 15d18 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   15d00:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   15d02:	6142      	str	r2, [r0, #20]
   15d04:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   15d06:	f000 f85a 	bl	15dbe <z_ready_thread>
			z_reschedule(&slab->lock, key);
   15d0a:	4631      	mov	r1, r6
   15d0c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   15d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   15d14:	f7f9 b836 	b.w	ed84 <z_reschedule>
	**(char ***) mem = slab->free_list;
   15d18:	682b      	ldr	r3, [r5, #0]
   15d1a:	69a2      	ldr	r2, [r4, #24]
   15d1c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   15d1e:	682b      	ldr	r3, [r5, #0]
   15d20:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   15d22:	69e3      	ldr	r3, [r4, #28]
   15d24:	3b01      	subs	r3, #1
   15d26:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15d28:	f386 8811 	msr	BASEPRI, r6
   15d2c:	f3bf 8f6f 	isb	sy
}
   15d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015d32 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15d32:	f3ef 8005 	mrs	r0, IPSR
}
   15d36:	3800      	subs	r0, #0
   15d38:	bf18      	it	ne
   15d3a:	2001      	movne	r0, #1
   15d3c:	4770      	bx	lr

00015d3e <z_pm_save_idle_exit>:
{
   15d3e:	b508      	push	{r3, lr}
	pm_system_resume();
   15d40:	f7f6 f95c 	bl	bffc <pm_system_resume>
}
   15d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   15d48:	f7ff be42 	b.w	159d0 <sys_clock_idle_exit>

00015d4c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   15d4c:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
   15d4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   15d52:	e9c0 0000 	strd	r0, r0, [r0]
}
   15d56:	4618      	mov	r0, r3
   15d58:	4770      	bx	lr

00015d5a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   15d5a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   15d5e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15d60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15d62:	2300      	movs	r3, #0
	node->prev = NULL;
   15d64:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   15d68:	4770      	bx	lr

00015d6a <unpend_thread_no_timeout>:
{
   15d6a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   15d6c:	f7ff fff5 	bl	15d5a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15d70:	7b43      	ldrb	r3, [r0, #13]
   15d72:	f023 0302 	bic.w	r3, r3, #2
   15d76:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   15d78:	2300      	movs	r3, #0
   15d7a:	6083      	str	r3, [r0, #8]
}
   15d7c:	bd08      	pop	{r3, pc}

00015d7e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15d7e:	4603      	mov	r3, r0
   15d80:	b920      	cbnz	r0, 15d8c <z_reschedule_irqlock+0xe>
   15d82:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   15d86:	b90a      	cbnz	r2, 15d8c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   15d88:	f7f6 bba0 	b.w	c4cc <arch_swap>
   15d8c:	f383 8811 	msr	BASEPRI, r3
   15d90:	f3bf 8f6f 	isb	sy
}
   15d94:	4770      	bx	lr

00015d96 <z_reschedule_unlocked>:
	__asm__ volatile(
   15d96:	f04f 0320 	mov.w	r3, #32
   15d9a:	f3ef 8011 	mrs	r0, BASEPRI
   15d9e:	f383 8812 	msr	BASEPRI_MAX, r3
   15da2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15da6:	f7ff bfea 	b.w	15d7e <z_reschedule_irqlock>

00015daa <z_priq_dumb_best>:
	return list->head == list;
   15daa:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15dac:	4298      	cmp	r0, r3
   15dae:	d004      	beq.n	15dba <z_priq_dumb_best+0x10>
	if (n != NULL) {
   15db0:	2b00      	cmp	r3, #0
   15db2:	bf38      	it	cc
   15db4:	2300      	movcc	r3, #0
   15db6:	4618      	mov	r0, r3
   15db8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15dba:	2000      	movs	r0, #0
}
   15dbc:	4770      	bx	lr

00015dbe <z_ready_thread>:
{
   15dbe:	b510      	push	{r4, lr}
   15dc0:	f04f 0320 	mov.w	r3, #32
   15dc4:	f3ef 8411 	mrs	r4, BASEPRI
   15dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   15dcc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   15dd0:	f7f9 f8a0 	bl	ef14 <ready_thread>
	__asm__ volatile(
   15dd4:	f384 8811 	msr	BASEPRI, r4
   15dd8:	f3bf 8f6f 	isb	sy
}
   15ddc:	bd10      	pop	{r4, pc}

00015dde <z_thread_timeout>:
{
   15dde:	b510      	push	{r4, lr}
   15de0:	4601      	mov	r1, r0
	__asm__ volatile(
   15de2:	f04f 0320 	mov.w	r3, #32
   15de6:	f3ef 8411 	mrs	r4, BASEPRI
   15dea:	f383 8812 	msr	BASEPRI_MAX, r3
   15dee:	f3bf 8f6f 	isb	sy
		if (!killed) {
   15df2:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   15df6:	f013 0f28 	tst.w	r3, #40	; 0x28
   15dfa:	d10d      	bne.n	15e18 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   15dfc:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   15e00:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   15e02:	b10b      	cbz	r3, 15e08 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   15e04:	f7ff ffb1 	bl	15d6a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   15e08:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   15e0c:	f023 0314 	bic.w	r3, r3, #20
   15e10:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   15e14:	f7f9 f87e 	bl	ef14 <ready_thread>
	__asm__ volatile(
   15e18:	f384 8811 	msr	BASEPRI, r4
   15e1c:	f3bf 8f6f 	isb	sy
}
   15e20:	bd10      	pop	{r4, pc}

00015e22 <add_to_waitq_locked>:
{
   15e22:	b538      	push	{r3, r4, r5, lr}
   15e24:	4604      	mov	r4, r0
   15e26:	460d      	mov	r5, r1
	unready_thread(thread);
   15e28:	f7f9 f8ca 	bl	efc0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   15e2c:	7b63      	ldrb	r3, [r4, #13]
   15e2e:	f043 0302 	orr.w	r3, r3, #2
   15e32:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   15e34:	b1b5      	cbz	r5, 15e64 <add_to_waitq_locked+0x42>
	return list->head == list;
   15e36:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   15e38:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15e3a:	429d      	cmp	r5, r3
   15e3c:	bf08      	it	eq
   15e3e:	2300      	moveq	r3, #0
   15e40:	2b00      	cmp	r3, #0
   15e42:	bf38      	it	cc
   15e44:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15e46:	b19b      	cbz	r3, 15e70 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   15e48:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   15e4c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   15e50:	4291      	cmp	r1, r2
   15e52:	d008      	beq.n	15e66 <add_to_waitq_locked+0x44>
		return b2 - b1;
   15e54:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   15e56:	2a00      	cmp	r2, #0
   15e58:	dd05      	ble.n	15e66 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   15e5a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15e5c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   15e60:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   15e62:	605c      	str	r4, [r3, #4]
}
   15e64:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   15e66:	686a      	ldr	r2, [r5, #4]
   15e68:	4293      	cmp	r3, r2
   15e6a:	d001      	beq.n	15e70 <add_to_waitq_locked+0x4e>
   15e6c:	681b      	ldr	r3, [r3, #0]
   15e6e:	e7ea      	b.n	15e46 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   15e70:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   15e72:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   15e76:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15e78:	606c      	str	r4, [r5, #4]
   15e7a:	e7f3      	b.n	15e64 <add_to_waitq_locked+0x42>

00015e7c <z_unpend_first_thread>:
{
   15e7c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15e7e:	f04f 0320 	mov.w	r3, #32
   15e82:	f3ef 8511 	mrs	r5, BASEPRI
   15e86:	f383 8812 	msr	BASEPRI_MAX, r3
   15e8a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   15e8e:	f7ff ff8c 	bl	15daa <z_priq_dumb_best>
		if (thread != NULL) {
   15e92:	4604      	mov	r4, r0
   15e94:	b120      	cbz	r0, 15ea0 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   15e96:	f7ff ff68 	bl	15d6a <unpend_thread_no_timeout>
   15e9a:	3018      	adds	r0, #24
   15e9c:	f000 f806 	bl	15eac <z_abort_timeout>
	__asm__ volatile(
   15ea0:	f385 8811 	msr	BASEPRI, r5
   15ea4:	f3bf 8f6f 	isb	sy
}
   15ea8:	4620      	mov	r0, r4
   15eaa:	bd38      	pop	{r3, r4, r5, pc}

00015eac <z_abort_timeout>:
{
   15eac:	b510      	push	{r4, lr}
	__asm__ volatile(
   15eae:	f04f 0220 	mov.w	r2, #32
   15eb2:	f3ef 8411 	mrs	r4, BASEPRI
   15eb6:	f382 8812 	msr	BASEPRI_MAX, r2
   15eba:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   15ebe:	6803      	ldr	r3, [r0, #0]
   15ec0:	b13b      	cbz	r3, 15ed2 <z_abort_timeout+0x26>
			remove_timeout(to);
   15ec2:	f7f9 fa99 	bl	f3f8 <remove_timeout>
			ret = 0;
   15ec6:	2000      	movs	r0, #0
	__asm__ volatile(
   15ec8:	f384 8811 	msr	BASEPRI, r4
   15ecc:	f3bf 8f6f 	isb	sy
}
   15ed0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   15ed2:	f06f 0015 	mvn.w	r0, #21
   15ed6:	e7f7      	b.n	15ec8 <z_abort_timeout+0x1c>

00015ed8 <z_get_next_timeout_expiry>:
{
   15ed8:	b510      	push	{r4, lr}
	__asm__ volatile(
   15eda:	f04f 0320 	mov.w	r3, #32
   15ede:	f3ef 8411 	mrs	r4, BASEPRI
   15ee2:	f383 8812 	msr	BASEPRI_MAX, r3
   15ee6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   15eea:	f7f9 fa9f 	bl	f42c <next_timeout>
	__asm__ volatile(
   15eee:	f384 8811 	msr	BASEPRI, r4
   15ef2:	f3bf 8f6f 	isb	sy
}
   15ef6:	bd10      	pop	{r4, pc}

00015ef8 <z_set_timeout_expiry>:
{
   15ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15efa:	4604      	mov	r4, r0
   15efc:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   15efe:	f04f 0320 	mov.w	r3, #32
   15f02:	f3ef 8511 	mrs	r5, BASEPRI
   15f06:	f383 8812 	msr	BASEPRI_MAX, r3
   15f0a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   15f0e:	f7f9 fa8d 	bl	f42c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   15f12:	2801      	cmp	r0, #1
   15f14:	dd05      	ble.n	15f22 <z_set_timeout_expiry+0x2a>
   15f16:	42a0      	cmp	r0, r4
   15f18:	9901      	ldr	r1, [sp, #4]
   15f1a:	db02      	blt.n	15f22 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   15f1c:	4620      	mov	r0, r4
   15f1e:	f7f7 fdad 	bl	da7c <sys_clock_set_timeout>
	__asm__ volatile(
   15f22:	f385 8811 	msr	BASEPRI, r5
   15f26:	f3bf 8f6f 	isb	sy
}
   15f2a:	b003      	add	sp, #12
   15f2c:	bd30      	pop	{r4, r5, pc}

00015f2e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   15f2e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   15f30:	f7f9 fb98 	bl	f664 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   15f34:	bd08      	pop	{r3, pc}

00015f36 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   15f36:	f7f9 bb95 	b.w	f664 <sys_clock_tick_get>

00015f3a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   15f3a:	b108      	cbz	r0, 15f40 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   15f3c:	f7f6 befa 	b.w	cd34 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   15f40:	4770      	bx	lr

00015f42 <k_heap_init>:
{
   15f42:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   15f44:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   15f48:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   15f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   15f50:	f7ff b9d1 	b.w	152f6 <sys_heap_init>

00015f54 <_ZdlPv>:
   15f54:	f7fa b998 	b.w	10288 <free>

00015f58 <_ZdaPv>:
   15f58:	f7ff bffc 	b.w	15f54 <_ZdlPv>

00015f5c <_Znwj>:
   15f5c:	2801      	cmp	r0, #1
   15f5e:	bf38      	it	cc
   15f60:	2001      	movcc	r0, #1
   15f62:	b510      	push	{r4, lr}
   15f64:	4604      	mov	r4, r0
   15f66:	4620      	mov	r0, r4
   15f68:	f7fa f986 	bl	10278 <malloc>
   15f6c:	b930      	cbnz	r0, 15f7c <_Znwj+0x20>
   15f6e:	f7f9 fc03 	bl	f778 <_ZSt15get_new_handlerv>
   15f72:	b908      	cbnz	r0, 15f78 <_Znwj+0x1c>
   15f74:	f000 f868 	bl	16048 <abort>
   15f78:	4780      	blx	r0
   15f7a:	e7f4      	b.n	15f66 <_Znwj+0xa>
   15f7c:	bd10      	pop	{r4, pc}

00015f7e <_Znaj>:
   15f7e:	f7ff bfed 	b.w	15f5c <_Znwj>

00015f82 <_ZSt19__throw_logic_errorPKc>:
   15f82:	b508      	push	{r3, lr}
   15f84:	f000 f860 	bl	16048 <abort>

00015f88 <_ZSt20__throw_length_errorPKc>:
   15f88:	b508      	push	{r3, lr}
   15f8a:	f000 f85d 	bl	16048 <abort>

00015f8e <_ZSt24__throw_out_of_range_fmtPKcz>:
   15f8e:	b40f      	push	{r0, r1, r2, r3}
   15f90:	b580      	push	{r7, lr}
   15f92:	b084      	sub	sp, #16
   15f94:	af00      	add	r7, sp, #0
   15f96:	f107 0418 	add.w	r4, r7, #24
   15f9a:	f854 2b04 	ldr.w	r2, [r4], #4
   15f9e:	607a      	str	r2, [r7, #4]
   15fa0:	4610      	mov	r0, r2
   15fa2:	f7eb f80d 	bl	fc0 <strlen>
   15fa6:	f200 2307 	addw	r3, r0, #519	; 0x207
   15faa:	f023 0307 	bic.w	r3, r3, #7
   15fae:	ebad 0d03 	sub.w	sp, sp, r3
   15fb2:	f500 7100 	add.w	r1, r0, #512	; 0x200
   15fb6:	687a      	ldr	r2, [r7, #4]
   15fb8:	60fc      	str	r4, [r7, #12]
   15fba:	4623      	mov	r3, r4
   15fbc:	4668      	mov	r0, sp
   15fbe:	f000 f802 	bl	15fc6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   15fc2:	f000 f841 	bl	16048 <abort>

00015fc6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   15fc6:	3901      	subs	r1, #1
   15fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fcc:	4607      	mov	r7, r0
   15fce:	4615      	mov	r5, r2
   15fd0:	eb00 0801 	add.w	r8, r0, r1
   15fd4:	4604      	mov	r4, r0
   15fd6:	782a      	ldrb	r2, [r5, #0]
   15fd8:	b362      	cbz	r2, 16034 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   15fda:	4544      	cmp	r4, r8
   15fdc:	d22e      	bcs.n	1603c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   15fde:	2a25      	cmp	r2, #37	; 0x25
   15fe0:	d107      	bne.n	15ff2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   15fe2:	786a      	ldrb	r2, [r5, #1]
   15fe4:	2a73      	cmp	r2, #115	; 0x73
   15fe6:	d009      	beq.n	15ffc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   15fe8:	2a7a      	cmp	r2, #122	; 0x7a
   15fea:	d012      	beq.n	16012 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   15fec:	2a25      	cmp	r2, #37	; 0x25
   15fee:	d100      	bne.n	15ff2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   15ff0:	3501      	adds	r5, #1
   15ff2:	f815 2b01 	ldrb.w	r2, [r5], #1
   15ff6:	f804 2b01 	strb.w	r2, [r4], #1
   15ffa:	e7ec      	b.n	15fd6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   15ffc:	f853 2b04 	ldr.w	r2, [r3], #4
   16000:	3a01      	subs	r2, #1
   16002:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   16006:	b1e9      	cbz	r1, 16044 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
   16008:	4544      	cmp	r4, r8
   1600a:	d017      	beq.n	1603c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   1600c:	f804 1b01 	strb.w	r1, [r4], #1
   16010:	e7f7      	b.n	16002 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   16012:	78aa      	ldrb	r2, [r5, #2]
   16014:	2a75      	cmp	r2, #117	; 0x75
   16016:	d1ec      	bne.n	15ff2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   16018:	461e      	mov	r6, r3
   1601a:	eba8 0104 	sub.w	r1, r8, r4
   1601e:	f856 2b04 	ldr.w	r2, [r6], #4
   16022:	4620      	mov	r0, r4
   16024:	f7f9 fb7c 	bl	f720 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   16028:	2800      	cmp	r0, #0
   1602a:	dd07      	ble.n	1603c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   1602c:	4404      	add	r4, r0
   1602e:	3503      	adds	r5, #3
   16030:	4633      	mov	r3, r6
   16032:	e7d0      	b.n	15fd6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   16034:	7022      	strb	r2, [r4, #0]
   16036:	1be0      	subs	r0, r4, r7
   16038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1603c:	4621      	mov	r1, r4
   1603e:	4638      	mov	r0, r7
   16040:	f7f9 fb48 	bl	f6d4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   16044:	3502      	adds	r5, #2
   16046:	e7c6      	b.n	15fd6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

00016048 <abort>:
   16048:	b508      	push	{r3, lr}
   1604a:	2006      	movs	r0, #6
   1604c:	f7fa ff48 	bl	10ee0 <raise>
   16050:	2001      	movs	r0, #1
   16052:	f7f6 fe0b 	bl	cc6c <_exit>

00016056 <memcpy>:
   16056:	440a      	add	r2, r1
   16058:	4291      	cmp	r1, r2
   1605a:	f100 33ff 	add.w	r3, r0, #4294967295
   1605e:	d100      	bne.n	16062 <memcpy+0xc>
   16060:	4770      	bx	lr
   16062:	b510      	push	{r4, lr}
   16064:	f811 4b01 	ldrb.w	r4, [r1], #1
   16068:	f803 4f01 	strb.w	r4, [r3, #1]!
   1606c:	4291      	cmp	r1, r2
   1606e:	d1f9      	bne.n	16064 <memcpy+0xe>
   16070:	bd10      	pop	{r4, pc}

00016072 <memmove>:
   16072:	4288      	cmp	r0, r1
   16074:	b510      	push	{r4, lr}
   16076:	eb01 0402 	add.w	r4, r1, r2
   1607a:	d902      	bls.n	16082 <memmove+0x10>
   1607c:	4284      	cmp	r4, r0
   1607e:	4623      	mov	r3, r4
   16080:	d807      	bhi.n	16092 <memmove+0x20>
   16082:	1e43      	subs	r3, r0, #1
   16084:	42a1      	cmp	r1, r4
   16086:	d008      	beq.n	1609a <memmove+0x28>
   16088:	f811 2b01 	ldrb.w	r2, [r1], #1
   1608c:	f803 2f01 	strb.w	r2, [r3, #1]!
   16090:	e7f8      	b.n	16084 <memmove+0x12>
   16092:	4402      	add	r2, r0
   16094:	4601      	mov	r1, r0
   16096:	428a      	cmp	r2, r1
   16098:	d100      	bne.n	1609c <memmove+0x2a>
   1609a:	bd10      	pop	{r4, pc}
   1609c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   160a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   160a4:	e7f7      	b.n	16096 <memmove+0x24>

000160a6 <memset>:
   160a6:	4402      	add	r2, r0
   160a8:	4603      	mov	r3, r0
   160aa:	4293      	cmp	r3, r2
   160ac:	d100      	bne.n	160b0 <memset+0xa>
   160ae:	4770      	bx	lr
   160b0:	f803 1b01 	strb.w	r1, [r3], #1
   160b4:	e7f9      	b.n	160aa <memset+0x4>

000160b6 <_calloc_r>:
   160b6:	b513      	push	{r0, r1, r4, lr}
   160b8:	434a      	muls	r2, r1
   160ba:	4611      	mov	r1, r2
   160bc:	9201      	str	r2, [sp, #4]
   160be:	f7fa f93b 	bl	10338 <_malloc_r>
   160c2:	4604      	mov	r4, r0
   160c4:	b118      	cbz	r0, 160ce <_calloc_r+0x18>
   160c6:	9a01      	ldr	r2, [sp, #4]
   160c8:	2100      	movs	r1, #0
   160ca:	f7ff ffec 	bl	160a6 <memset>
   160ce:	4620      	mov	r0, r4
   160d0:	b002      	add	sp, #8
   160d2:	bd10      	pop	{r4, pc}

000160d4 <__sfputc_r>:
   160d4:	6893      	ldr	r3, [r2, #8]
   160d6:	3b01      	subs	r3, #1
   160d8:	2b00      	cmp	r3, #0
   160da:	b410      	push	{r4}
   160dc:	6093      	str	r3, [r2, #8]
   160de:	da08      	bge.n	160f2 <__sfputc_r+0x1e>
   160e0:	6994      	ldr	r4, [r2, #24]
   160e2:	42a3      	cmp	r3, r4
   160e4:	db01      	blt.n	160ea <__sfputc_r+0x16>
   160e6:	290a      	cmp	r1, #10
   160e8:	d103      	bne.n	160f2 <__sfputc_r+0x1e>
   160ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   160ee:	f7fa bf1f 	b.w	10f30 <__swbuf_r>
   160f2:	6813      	ldr	r3, [r2, #0]
   160f4:	1c58      	adds	r0, r3, #1
   160f6:	6010      	str	r0, [r2, #0]
   160f8:	7019      	strb	r1, [r3, #0]
   160fa:	4608      	mov	r0, r1
   160fc:	f85d 4b04 	ldr.w	r4, [sp], #4
   16100:	4770      	bx	lr

00016102 <__sfputs_r>:
   16102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16104:	4606      	mov	r6, r0
   16106:	460f      	mov	r7, r1
   16108:	4614      	mov	r4, r2
   1610a:	18d5      	adds	r5, r2, r3
   1610c:	42ac      	cmp	r4, r5
   1610e:	d101      	bne.n	16114 <__sfputs_r+0x12>
   16110:	2000      	movs	r0, #0
   16112:	e007      	b.n	16124 <__sfputs_r+0x22>
   16114:	f814 1b01 	ldrb.w	r1, [r4], #1
   16118:	463a      	mov	r2, r7
   1611a:	4630      	mov	r0, r6
   1611c:	f7ff ffda 	bl	160d4 <__sfputc_r>
   16120:	1c43      	adds	r3, r0, #1
   16122:	d1f3      	bne.n	1610c <__sfputs_r+0xa>
   16124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016126 <__cvt>:
   16126:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1612a:	ec55 4b10 	vmov	r4, r5, d0
   1612e:	2d00      	cmp	r5, #0
   16130:	460e      	mov	r6, r1
   16132:	4619      	mov	r1, r3
   16134:	462b      	mov	r3, r5
   16136:	bfbb      	ittet	lt
   16138:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   1613c:	461d      	movlt	r5, r3
   1613e:	2300      	movge	r3, #0
   16140:	232d      	movlt	r3, #45	; 0x2d
   16142:	700b      	strb	r3, [r1, #0]
   16144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16146:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   1614a:	4691      	mov	r9, r2
   1614c:	f023 0820 	bic.w	r8, r3, #32
   16150:	bfbc      	itt	lt
   16152:	4622      	movlt	r2, r4
   16154:	4614      	movlt	r4, r2
   16156:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1615a:	d005      	beq.n	16168 <__cvt+0x42>
   1615c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   16160:	d100      	bne.n	16164 <__cvt+0x3e>
   16162:	3601      	adds	r6, #1
   16164:	2102      	movs	r1, #2
   16166:	e000      	b.n	1616a <__cvt+0x44>
   16168:	2103      	movs	r1, #3
   1616a:	ab03      	add	r3, sp, #12
   1616c:	9301      	str	r3, [sp, #4]
   1616e:	ab02      	add	r3, sp, #8
   16170:	9300      	str	r3, [sp, #0]
   16172:	ec45 4b10 	vmov	d0, r4, r5
   16176:	4653      	mov	r3, sl
   16178:	4632      	mov	r2, r6
   1617a:	f7ee fa09 	bl	4590 <_dtoa_r>
   1617e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   16182:	4607      	mov	r7, r0
   16184:	d102      	bne.n	1618c <__cvt+0x66>
   16186:	f019 0f01 	tst.w	r9, #1
   1618a:	d022      	beq.n	161d2 <__cvt+0xac>
   1618c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   16190:	eb07 0906 	add.w	r9, r7, r6
   16194:	d110      	bne.n	161b8 <__cvt+0x92>
   16196:	783b      	ldrb	r3, [r7, #0]
   16198:	2b30      	cmp	r3, #48	; 0x30
   1619a:	d10a      	bne.n	161b2 <__cvt+0x8c>
   1619c:	2200      	movs	r2, #0
   1619e:	2300      	movs	r3, #0
   161a0:	4620      	mov	r0, r4
   161a2:	4629      	mov	r1, r5
   161a4:	f7ea fc20 	bl	9e8 <__aeabi_dcmpeq>
   161a8:	b918      	cbnz	r0, 161b2 <__cvt+0x8c>
   161aa:	f1c6 0601 	rsb	r6, r6, #1
   161ae:	f8ca 6000 	str.w	r6, [sl]
   161b2:	f8da 3000 	ldr.w	r3, [sl]
   161b6:	4499      	add	r9, r3
   161b8:	2200      	movs	r2, #0
   161ba:	2300      	movs	r3, #0
   161bc:	4620      	mov	r0, r4
   161be:	4629      	mov	r1, r5
   161c0:	f7ea fc12 	bl	9e8 <__aeabi_dcmpeq>
   161c4:	b108      	cbz	r0, 161ca <__cvt+0xa4>
   161c6:	f8cd 900c 	str.w	r9, [sp, #12]
   161ca:	2230      	movs	r2, #48	; 0x30
   161cc:	9b03      	ldr	r3, [sp, #12]
   161ce:	454b      	cmp	r3, r9
   161d0:	d307      	bcc.n	161e2 <__cvt+0xbc>
   161d2:	9b03      	ldr	r3, [sp, #12]
   161d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   161d6:	1bdb      	subs	r3, r3, r7
   161d8:	4638      	mov	r0, r7
   161da:	6013      	str	r3, [r2, #0]
   161dc:	b004      	add	sp, #16
   161de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   161e2:	1c59      	adds	r1, r3, #1
   161e4:	9103      	str	r1, [sp, #12]
   161e6:	701a      	strb	r2, [r3, #0]
   161e8:	e7f0      	b.n	161cc <__cvt+0xa6>

000161ea <__exponent>:
   161ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   161ec:	4603      	mov	r3, r0
   161ee:	2900      	cmp	r1, #0
   161f0:	bfb8      	it	lt
   161f2:	4249      	neglt	r1, r1
   161f4:	f803 2b02 	strb.w	r2, [r3], #2
   161f8:	bfb4      	ite	lt
   161fa:	222d      	movlt	r2, #45	; 0x2d
   161fc:	222b      	movge	r2, #43	; 0x2b
   161fe:	2909      	cmp	r1, #9
   16200:	7042      	strb	r2, [r0, #1]
   16202:	dd2a      	ble.n	1625a <__exponent+0x70>
   16204:	f10d 0407 	add.w	r4, sp, #7
   16208:	46a4      	mov	ip, r4
   1620a:	270a      	movs	r7, #10
   1620c:	46a6      	mov	lr, r4
   1620e:	460a      	mov	r2, r1
   16210:	fb91 f6f7 	sdiv	r6, r1, r7
   16214:	fb07 1516 	mls	r5, r7, r6, r1
   16218:	3530      	adds	r5, #48	; 0x30
   1621a:	2a63      	cmp	r2, #99	; 0x63
   1621c:	f104 34ff 	add.w	r4, r4, #4294967295
   16220:	f80e 5c01 	strb.w	r5, [lr, #-1]
   16224:	4631      	mov	r1, r6
   16226:	dcf1      	bgt.n	1620c <__exponent+0x22>
   16228:	3130      	adds	r1, #48	; 0x30
   1622a:	f1ae 0502 	sub.w	r5, lr, #2
   1622e:	f804 1c01 	strb.w	r1, [r4, #-1]
   16232:	1c44      	adds	r4, r0, #1
   16234:	4629      	mov	r1, r5
   16236:	4561      	cmp	r1, ip
   16238:	d30a      	bcc.n	16250 <__exponent+0x66>
   1623a:	f10d 0209 	add.w	r2, sp, #9
   1623e:	eba2 020e 	sub.w	r2, r2, lr
   16242:	4565      	cmp	r5, ip
   16244:	bf88      	it	hi
   16246:	2200      	movhi	r2, #0
   16248:	4413      	add	r3, r2
   1624a:	1a18      	subs	r0, r3, r0
   1624c:	b003      	add	sp, #12
   1624e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16250:	f811 2b01 	ldrb.w	r2, [r1], #1
   16254:	f804 2f01 	strb.w	r2, [r4, #1]!
   16258:	e7ed      	b.n	16236 <__exponent+0x4c>
   1625a:	2330      	movs	r3, #48	; 0x30
   1625c:	3130      	adds	r1, #48	; 0x30
   1625e:	7083      	strb	r3, [r0, #2]
   16260:	70c1      	strb	r1, [r0, #3]
   16262:	1d03      	adds	r3, r0, #4
   16264:	e7f1      	b.n	1624a <__exponent+0x60>

00016266 <_printf_common>:
   16266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1626a:	4616      	mov	r6, r2
   1626c:	4699      	mov	r9, r3
   1626e:	688a      	ldr	r2, [r1, #8]
   16270:	690b      	ldr	r3, [r1, #16]
   16272:	f8dd 8020 	ldr.w	r8, [sp, #32]
   16276:	4293      	cmp	r3, r2
   16278:	bfb8      	it	lt
   1627a:	4613      	movlt	r3, r2
   1627c:	6033      	str	r3, [r6, #0]
   1627e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   16282:	4607      	mov	r7, r0
   16284:	460c      	mov	r4, r1
   16286:	b10a      	cbz	r2, 1628c <_printf_common+0x26>
   16288:	3301      	adds	r3, #1
   1628a:	6033      	str	r3, [r6, #0]
   1628c:	6823      	ldr	r3, [r4, #0]
   1628e:	0699      	lsls	r1, r3, #26
   16290:	bf42      	ittt	mi
   16292:	6833      	ldrmi	r3, [r6, #0]
   16294:	3302      	addmi	r3, #2
   16296:	6033      	strmi	r3, [r6, #0]
   16298:	6825      	ldr	r5, [r4, #0]
   1629a:	f015 0506 	ands.w	r5, r5, #6
   1629e:	d106      	bne.n	162ae <_printf_common+0x48>
   162a0:	f104 0a19 	add.w	sl, r4, #25
   162a4:	68e3      	ldr	r3, [r4, #12]
   162a6:	6832      	ldr	r2, [r6, #0]
   162a8:	1a9b      	subs	r3, r3, r2
   162aa:	42ab      	cmp	r3, r5
   162ac:	dc26      	bgt.n	162fc <_printf_common+0x96>
   162ae:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   162b2:	1e13      	subs	r3, r2, #0
   162b4:	6822      	ldr	r2, [r4, #0]
   162b6:	bf18      	it	ne
   162b8:	2301      	movne	r3, #1
   162ba:	0692      	lsls	r2, r2, #26
   162bc:	d42b      	bmi.n	16316 <_printf_common+0xb0>
   162be:	f104 0243 	add.w	r2, r4, #67	; 0x43
   162c2:	4649      	mov	r1, r9
   162c4:	4638      	mov	r0, r7
   162c6:	47c0      	blx	r8
   162c8:	3001      	adds	r0, #1
   162ca:	d01e      	beq.n	1630a <_printf_common+0xa4>
   162cc:	6823      	ldr	r3, [r4, #0]
   162ce:	68e5      	ldr	r5, [r4, #12]
   162d0:	6832      	ldr	r2, [r6, #0]
   162d2:	f003 0306 	and.w	r3, r3, #6
   162d6:	2b04      	cmp	r3, #4
   162d8:	bf08      	it	eq
   162da:	1aad      	subeq	r5, r5, r2
   162dc:	68a3      	ldr	r3, [r4, #8]
   162de:	6922      	ldr	r2, [r4, #16]
   162e0:	bf0c      	ite	eq
   162e2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   162e6:	2500      	movne	r5, #0
   162e8:	4293      	cmp	r3, r2
   162ea:	bfc4      	itt	gt
   162ec:	1a9b      	subgt	r3, r3, r2
   162ee:	18ed      	addgt	r5, r5, r3
   162f0:	2600      	movs	r6, #0
   162f2:	341a      	adds	r4, #26
   162f4:	42b5      	cmp	r5, r6
   162f6:	d11a      	bne.n	1632e <_printf_common+0xc8>
   162f8:	2000      	movs	r0, #0
   162fa:	e008      	b.n	1630e <_printf_common+0xa8>
   162fc:	2301      	movs	r3, #1
   162fe:	4652      	mov	r2, sl
   16300:	4649      	mov	r1, r9
   16302:	4638      	mov	r0, r7
   16304:	47c0      	blx	r8
   16306:	3001      	adds	r0, #1
   16308:	d103      	bne.n	16312 <_printf_common+0xac>
   1630a:	f04f 30ff 	mov.w	r0, #4294967295
   1630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16312:	3501      	adds	r5, #1
   16314:	e7c6      	b.n	162a4 <_printf_common+0x3e>
   16316:	18e1      	adds	r1, r4, r3
   16318:	1c5a      	adds	r2, r3, #1
   1631a:	2030      	movs	r0, #48	; 0x30
   1631c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   16320:	4422      	add	r2, r4
   16322:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   16326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1632a:	3302      	adds	r3, #2
   1632c:	e7c7      	b.n	162be <_printf_common+0x58>
   1632e:	2301      	movs	r3, #1
   16330:	4622      	mov	r2, r4
   16332:	4649      	mov	r1, r9
   16334:	4638      	mov	r0, r7
   16336:	47c0      	blx	r8
   16338:	3001      	adds	r0, #1
   1633a:	d0e6      	beq.n	1630a <_printf_common+0xa4>
   1633c:	3601      	adds	r6, #1
   1633e:	e7d9      	b.n	162f4 <_printf_common+0x8e>

00016340 <_raise_r>:
   16340:	291f      	cmp	r1, #31
   16342:	b538      	push	{r3, r4, r5, lr}
   16344:	4604      	mov	r4, r0
   16346:	460d      	mov	r5, r1
   16348:	d904      	bls.n	16354 <_raise_r+0x14>
   1634a:	2316      	movs	r3, #22
   1634c:	6003      	str	r3, [r0, #0]
   1634e:	f04f 30ff 	mov.w	r0, #4294967295
   16352:	bd38      	pop	{r3, r4, r5, pc}
   16354:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16356:	b112      	cbz	r2, 1635e <_raise_r+0x1e>
   16358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1635c:	b94b      	cbnz	r3, 16372 <_raise_r+0x32>
   1635e:	4620      	mov	r0, r4
   16360:	f000 f816 	bl	16390 <_getpid_r>
   16364:	462a      	mov	r2, r5
   16366:	4601      	mov	r1, r0
   16368:	4620      	mov	r0, r4
   1636a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1636e:	f7fa bdbf 	b.w	10ef0 <_kill_r>
   16372:	2b01      	cmp	r3, #1
   16374:	d00a      	beq.n	1638c <_raise_r+0x4c>
   16376:	1c59      	adds	r1, r3, #1
   16378:	d103      	bne.n	16382 <_raise_r+0x42>
   1637a:	2316      	movs	r3, #22
   1637c:	6003      	str	r3, [r0, #0]
   1637e:	2001      	movs	r0, #1
   16380:	e7e7      	b.n	16352 <_raise_r+0x12>
   16382:	2400      	movs	r4, #0
   16384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   16388:	4628      	mov	r0, r5
   1638a:	4798      	blx	r3
   1638c:	2000      	movs	r0, #0
   1638e:	e7e0      	b.n	16352 <_raise_r+0x12>

00016390 <_getpid_r>:
   16390:	f7ff b876 	b.w	15480 <_getpid>

00016394 <strcpy>:
   16394:	4603      	mov	r3, r0
   16396:	f811 2b01 	ldrb.w	r2, [r1], #1
   1639a:	f803 2b01 	strb.w	r2, [r3], #1
   1639e:	2a00      	cmp	r2, #0
   163a0:	d1f9      	bne.n	16396 <strcpy+0x2>
   163a2:	4770      	bx	lr

000163a4 <strnlen>:
   163a4:	b510      	push	{r4, lr}
   163a6:	4602      	mov	r2, r0
   163a8:	4401      	add	r1, r0
   163aa:	428a      	cmp	r2, r1
   163ac:	4613      	mov	r3, r2
   163ae:	d101      	bne.n	163b4 <strnlen+0x10>
   163b0:	1a18      	subs	r0, r3, r0
   163b2:	bd10      	pop	{r4, pc}
   163b4:	781c      	ldrb	r4, [r3, #0]
   163b6:	3201      	adds	r2, #1
   163b8:	2c00      	cmp	r4, #0
   163ba:	d1f6      	bne.n	163aa <strnlen+0x6>
   163bc:	e7f8      	b.n	163b0 <strnlen+0xc>

000163be <_vsniprintf_r>:
   163be:	b530      	push	{r4, r5, lr}
   163c0:	1e14      	subs	r4, r2, #0
   163c2:	4605      	mov	r5, r0
   163c4:	b09b      	sub	sp, #108	; 0x6c
   163c6:	4618      	mov	r0, r3
   163c8:	da05      	bge.n	163d6 <_vsniprintf_r+0x18>
   163ca:	238b      	movs	r3, #139	; 0x8b
   163cc:	602b      	str	r3, [r5, #0]
   163ce:	f04f 30ff 	mov.w	r0, #4294967295
   163d2:	b01b      	add	sp, #108	; 0x6c
   163d4:	bd30      	pop	{r4, r5, pc}
   163d6:	f44f 7302 	mov.w	r3, #520	; 0x208
   163da:	f8ad 300c 	strh.w	r3, [sp, #12]
   163de:	bf14      	ite	ne
   163e0:	f104 33ff 	addne.w	r3, r4, #4294967295
   163e4:	4623      	moveq	r3, r4
   163e6:	9302      	str	r3, [sp, #8]
   163e8:	9305      	str	r3, [sp, #20]
   163ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   163ee:	9100      	str	r1, [sp, #0]
   163f0:	9104      	str	r1, [sp, #16]
   163f2:	f8ad 300e 	strh.w	r3, [sp, #14]
   163f6:	4602      	mov	r2, r0
   163f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   163fa:	4669      	mov	r1, sp
   163fc:	4628      	mov	r0, r5
   163fe:	f7fb f877 	bl	114f0 <_svfiprintf_r>
   16402:	1c43      	adds	r3, r0, #1
   16404:	bfbc      	itt	lt
   16406:	238b      	movlt	r3, #139	; 0x8b
   16408:	602b      	strlt	r3, [r5, #0]
   1640a:	2c00      	cmp	r4, #0
   1640c:	d0e1      	beq.n	163d2 <_vsniprintf_r+0x14>
   1640e:	9b00      	ldr	r3, [sp, #0]
   16410:	2200      	movs	r2, #0
   16412:	701a      	strb	r2, [r3, #0]
   16414:	e7dd      	b.n	163d2 <_vsniprintf_r+0x14>

00016416 <quorem>:
   16416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1641a:	6903      	ldr	r3, [r0, #16]
   1641c:	690c      	ldr	r4, [r1, #16]
   1641e:	42a3      	cmp	r3, r4
   16420:	4607      	mov	r7, r0
   16422:	f2c0 8081 	blt.w	16528 <quorem+0x112>
   16426:	3c01      	subs	r4, #1
   16428:	f101 0814 	add.w	r8, r1, #20
   1642c:	f100 0514 	add.w	r5, r0, #20
   16430:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   16434:	9301      	str	r3, [sp, #4]
   16436:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   1643a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1643e:	3301      	adds	r3, #1
   16440:	429a      	cmp	r2, r3
   16442:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   16446:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   1644a:	fbb2 f6f3 	udiv	r6, r2, r3
   1644e:	d331      	bcc.n	164b4 <quorem+0x9e>
   16450:	f04f 0e00 	mov.w	lr, #0
   16454:	4640      	mov	r0, r8
   16456:	46ac      	mov	ip, r5
   16458:	46f2      	mov	sl, lr
   1645a:	f850 2b04 	ldr.w	r2, [r0], #4
   1645e:	b293      	uxth	r3, r2
   16460:	fb06 e303 	mla	r3, r6, r3, lr
   16464:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   16468:	b29b      	uxth	r3, r3
   1646a:	ebaa 0303 	sub.w	r3, sl, r3
   1646e:	0c12      	lsrs	r2, r2, #16
   16470:	f8dc a000 	ldr.w	sl, [ip]
   16474:	fb06 e202 	mla	r2, r6, r2, lr
   16478:	fa13 f38a 	uxtah	r3, r3, sl
   1647c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   16480:	fa1f fa82 	uxth.w	sl, r2
   16484:	f8dc 2000 	ldr.w	r2, [ip]
   16488:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1648c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   16490:	b29b      	uxth	r3, r3
   16492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   16496:	4581      	cmp	r9, r0
   16498:	f84c 3b04 	str.w	r3, [ip], #4
   1649c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   164a0:	d2db      	bcs.n	1645a <quorem+0x44>
   164a2:	f855 300b 	ldr.w	r3, [r5, fp]
   164a6:	b92b      	cbnz	r3, 164b4 <quorem+0x9e>
   164a8:	9b01      	ldr	r3, [sp, #4]
   164aa:	3b04      	subs	r3, #4
   164ac:	429d      	cmp	r5, r3
   164ae:	461a      	mov	r2, r3
   164b0:	d32e      	bcc.n	16510 <quorem+0xfa>
   164b2:	613c      	str	r4, [r7, #16]
   164b4:	4638      	mov	r0, r7
   164b6:	f000 fa6f 	bl	16998 <__mcmp>
   164ba:	2800      	cmp	r0, #0
   164bc:	db24      	blt.n	16508 <quorem+0xf2>
   164be:	3601      	adds	r6, #1
   164c0:	4628      	mov	r0, r5
   164c2:	f04f 0c00 	mov.w	ip, #0
   164c6:	f858 2b04 	ldr.w	r2, [r8], #4
   164ca:	f8d0 e000 	ldr.w	lr, [r0]
   164ce:	b293      	uxth	r3, r2
   164d0:	ebac 0303 	sub.w	r3, ip, r3
   164d4:	0c12      	lsrs	r2, r2, #16
   164d6:	fa13 f38e 	uxtah	r3, r3, lr
   164da:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   164de:	eb02 4223 	add.w	r2, r2, r3, asr #16
   164e2:	b29b      	uxth	r3, r3
   164e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   164e8:	45c1      	cmp	r9, r8
   164ea:	f840 3b04 	str.w	r3, [r0], #4
   164ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
   164f2:	d2e8      	bcs.n	164c6 <quorem+0xb0>
   164f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   164f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   164fc:	b922      	cbnz	r2, 16508 <quorem+0xf2>
   164fe:	3b04      	subs	r3, #4
   16500:	429d      	cmp	r5, r3
   16502:	461a      	mov	r2, r3
   16504:	d30a      	bcc.n	1651c <quorem+0x106>
   16506:	613c      	str	r4, [r7, #16]
   16508:	4630      	mov	r0, r6
   1650a:	b003      	add	sp, #12
   1650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16510:	6812      	ldr	r2, [r2, #0]
   16512:	3b04      	subs	r3, #4
   16514:	2a00      	cmp	r2, #0
   16516:	d1cc      	bne.n	164b2 <quorem+0x9c>
   16518:	3c01      	subs	r4, #1
   1651a:	e7c7      	b.n	164ac <quorem+0x96>
   1651c:	6812      	ldr	r2, [r2, #0]
   1651e:	3b04      	subs	r3, #4
   16520:	2a00      	cmp	r2, #0
   16522:	d1f0      	bne.n	16506 <quorem+0xf0>
   16524:	3c01      	subs	r4, #1
   16526:	e7eb      	b.n	16500 <quorem+0xea>
   16528:	2000      	movs	r0, #0
   1652a:	e7ee      	b.n	1650a <quorem+0xf4>

0001652c <__sfmoreglue>:
   1652c:	b570      	push	{r4, r5, r6, lr}
   1652e:	1e4a      	subs	r2, r1, #1
   16530:	2568      	movs	r5, #104	; 0x68
   16532:	4355      	muls	r5, r2
   16534:	460e      	mov	r6, r1
   16536:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1653a:	f7f9 fefd 	bl	10338 <_malloc_r>
   1653e:	4604      	mov	r4, r0
   16540:	b140      	cbz	r0, 16554 <__sfmoreglue+0x28>
   16542:	2100      	movs	r1, #0
   16544:	e9c0 1600 	strd	r1, r6, [r0]
   16548:	300c      	adds	r0, #12
   1654a:	60a0      	str	r0, [r4, #8]
   1654c:	f105 0268 	add.w	r2, r5, #104	; 0x68
   16550:	f7ff fda9 	bl	160a6 <memset>
   16554:	4620      	mov	r0, r4
   16556:	bd70      	pop	{r4, r5, r6, pc}

00016558 <_fwalk_reent>:
   16558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1655c:	4606      	mov	r6, r0
   1655e:	4688      	mov	r8, r1
   16560:	f100 0448 	add.w	r4, r0, #72	; 0x48
   16564:	2700      	movs	r7, #0
   16566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1656a:	f1b9 0901 	subs.w	r9, r9, #1
   1656e:	d505      	bpl.n	1657c <_fwalk_reent+0x24>
   16570:	6824      	ldr	r4, [r4, #0]
   16572:	2c00      	cmp	r4, #0
   16574:	d1f7      	bne.n	16566 <_fwalk_reent+0xe>
   16576:	4638      	mov	r0, r7
   16578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1657c:	89ab      	ldrh	r3, [r5, #12]
   1657e:	2b01      	cmp	r3, #1
   16580:	d907      	bls.n	16592 <_fwalk_reent+0x3a>
   16582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   16586:	3301      	adds	r3, #1
   16588:	d003      	beq.n	16592 <_fwalk_reent+0x3a>
   1658a:	4629      	mov	r1, r5
   1658c:	4630      	mov	r0, r6
   1658e:	47c0      	blx	r8
   16590:	4307      	orrs	r7, r0
   16592:	3568      	adds	r5, #104	; 0x68
   16594:	e7e9      	b.n	1656a <_fwalk_reent+0x12>

00016596 <__swhatbuf_r>:
   16596:	b570      	push	{r4, r5, r6, lr}
   16598:	460e      	mov	r6, r1
   1659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1659e:	2900      	cmp	r1, #0
   165a0:	b096      	sub	sp, #88	; 0x58
   165a2:	4614      	mov	r4, r2
   165a4:	461d      	mov	r5, r3
   165a6:	da07      	bge.n	165b8 <__swhatbuf_r+0x22>
   165a8:	2300      	movs	r3, #0
   165aa:	602b      	str	r3, [r5, #0]
   165ac:	89b3      	ldrh	r3, [r6, #12]
   165ae:	061a      	lsls	r2, r3, #24
   165b0:	d410      	bmi.n	165d4 <__swhatbuf_r+0x3e>
   165b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   165b6:	e00e      	b.n	165d6 <__swhatbuf_r+0x40>
   165b8:	466a      	mov	r2, sp
   165ba:	f7fb f8bb 	bl	11734 <_fstat_r>
   165be:	2800      	cmp	r0, #0
   165c0:	dbf2      	blt.n	165a8 <__swhatbuf_r+0x12>
   165c2:	9a01      	ldr	r2, [sp, #4]
   165c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   165c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   165cc:	425a      	negs	r2, r3
   165ce:	415a      	adcs	r2, r3
   165d0:	602a      	str	r2, [r5, #0]
   165d2:	e7ee      	b.n	165b2 <__swhatbuf_r+0x1c>
   165d4:	2340      	movs	r3, #64	; 0x40
   165d6:	2000      	movs	r0, #0
   165d8:	6023      	str	r3, [r4, #0]
   165da:	b016      	add	sp, #88	; 0x58
   165dc:	bd70      	pop	{r4, r5, r6, pc}

000165de <_Balloc>:
   165de:	b570      	push	{r4, r5, r6, lr}
   165e0:	6a46      	ldr	r6, [r0, #36]	; 0x24
   165e2:	4604      	mov	r4, r0
   165e4:	460d      	mov	r5, r1
   165e6:	b93e      	cbnz	r6, 165f8 <_Balloc+0x1a>
   165e8:	2010      	movs	r0, #16
   165ea:	f7f9 fe45 	bl	10278 <malloc>
   165ee:	e9c0 6601 	strd	r6, r6, [r0, #4]
   165f2:	6260      	str	r0, [r4, #36]	; 0x24
   165f4:	6006      	str	r6, [r0, #0]
   165f6:	60c6      	str	r6, [r0, #12]
   165f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   165fa:	68f3      	ldr	r3, [r6, #12]
   165fc:	b183      	cbz	r3, 16620 <_Balloc+0x42>
   165fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16600:	68db      	ldr	r3, [r3, #12]
   16602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   16606:	b9b8      	cbnz	r0, 16638 <_Balloc+0x5a>
   16608:	2101      	movs	r1, #1
   1660a:	fa01 f605 	lsl.w	r6, r1, r5
   1660e:	1d72      	adds	r2, r6, #5
   16610:	0092      	lsls	r2, r2, #2
   16612:	4620      	mov	r0, r4
   16614:	f7ff fd4f 	bl	160b6 <_calloc_r>
   16618:	b160      	cbz	r0, 16634 <_Balloc+0x56>
   1661a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1661e:	e00e      	b.n	1663e <_Balloc+0x60>
   16620:	2221      	movs	r2, #33	; 0x21
   16622:	2104      	movs	r1, #4
   16624:	4620      	mov	r0, r4
   16626:	f7ff fd46 	bl	160b6 <_calloc_r>
   1662a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1662c:	60f0      	str	r0, [r6, #12]
   1662e:	68db      	ldr	r3, [r3, #12]
   16630:	2b00      	cmp	r3, #0
   16632:	d1e4      	bne.n	165fe <_Balloc+0x20>
   16634:	2000      	movs	r0, #0
   16636:	bd70      	pop	{r4, r5, r6, pc}
   16638:	6802      	ldr	r2, [r0, #0]
   1663a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   1663e:	2300      	movs	r3, #0
   16640:	e9c0 3303 	strd	r3, r3, [r0, #12]
   16644:	e7f7      	b.n	16636 <_Balloc+0x58>

00016646 <_Bfree>:
   16646:	b570      	push	{r4, r5, r6, lr}
   16648:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1664a:	4605      	mov	r5, r0
   1664c:	460c      	mov	r4, r1
   1664e:	b93e      	cbnz	r6, 16660 <_Bfree+0x1a>
   16650:	2010      	movs	r0, #16
   16652:	f7f9 fe11 	bl	10278 <malloc>
   16656:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1665a:	6268      	str	r0, [r5, #36]	; 0x24
   1665c:	6006      	str	r6, [r0, #0]
   1665e:	60c6      	str	r6, [r0, #12]
   16660:	b13c      	cbz	r4, 16672 <_Bfree+0x2c>
   16662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16664:	6862      	ldr	r2, [r4, #4]
   16666:	68db      	ldr	r3, [r3, #12]
   16668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1666c:	6021      	str	r1, [r4, #0]
   1666e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   16672:	bd70      	pop	{r4, r5, r6, pc}

00016674 <__multadd>:
   16674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16678:	690e      	ldr	r6, [r1, #16]
   1667a:	4607      	mov	r7, r0
   1667c:	4698      	mov	r8, r3
   1667e:	460c      	mov	r4, r1
   16680:	f101 0014 	add.w	r0, r1, #20
   16684:	2300      	movs	r3, #0
   16686:	6805      	ldr	r5, [r0, #0]
   16688:	b2a9      	uxth	r1, r5
   1668a:	fb02 8101 	mla	r1, r2, r1, r8
   1668e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   16692:	0c2d      	lsrs	r5, r5, #16
   16694:	fb02 c505 	mla	r5, r2, r5, ip
   16698:	b289      	uxth	r1, r1
   1669a:	3301      	adds	r3, #1
   1669c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   166a0:	429e      	cmp	r6, r3
   166a2:	f840 1b04 	str.w	r1, [r0], #4
   166a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
   166aa:	dcec      	bgt.n	16686 <__multadd+0x12>
   166ac:	f1b8 0f00 	cmp.w	r8, #0
   166b0:	d01b      	beq.n	166ea <__multadd+0x76>
   166b2:	68a3      	ldr	r3, [r4, #8]
   166b4:	42b3      	cmp	r3, r6
   166b6:	dc12      	bgt.n	166de <__multadd+0x6a>
   166b8:	6861      	ldr	r1, [r4, #4]
   166ba:	4638      	mov	r0, r7
   166bc:	3101      	adds	r1, #1
   166be:	f7ff ff8e 	bl	165de <_Balloc>
   166c2:	6922      	ldr	r2, [r4, #16]
   166c4:	3202      	adds	r2, #2
   166c6:	f104 010c 	add.w	r1, r4, #12
   166ca:	4605      	mov	r5, r0
   166cc:	0092      	lsls	r2, r2, #2
   166ce:	300c      	adds	r0, #12
   166d0:	f7ff fcc1 	bl	16056 <memcpy>
   166d4:	4621      	mov	r1, r4
   166d6:	4638      	mov	r0, r7
   166d8:	f7ff ffb5 	bl	16646 <_Bfree>
   166dc:	462c      	mov	r4, r5
   166de:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   166e2:	3601      	adds	r6, #1
   166e4:	f8c3 8014 	str.w	r8, [r3, #20]
   166e8:	6126      	str	r6, [r4, #16]
   166ea:	4620      	mov	r0, r4
   166ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000166f0 <__hi0bits>:
   166f0:	0c03      	lsrs	r3, r0, #16
   166f2:	041b      	lsls	r3, r3, #16
   166f4:	b9d3      	cbnz	r3, 1672c <__hi0bits+0x3c>
   166f6:	0400      	lsls	r0, r0, #16
   166f8:	2310      	movs	r3, #16
   166fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   166fe:	bf04      	itt	eq
   16700:	0200      	lsleq	r0, r0, #8
   16702:	3308      	addeq	r3, #8
   16704:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   16708:	bf04      	itt	eq
   1670a:	0100      	lsleq	r0, r0, #4
   1670c:	3304      	addeq	r3, #4
   1670e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   16712:	bf04      	itt	eq
   16714:	0080      	lsleq	r0, r0, #2
   16716:	3302      	addeq	r3, #2
   16718:	2800      	cmp	r0, #0
   1671a:	db05      	blt.n	16728 <__hi0bits+0x38>
   1671c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   16720:	f103 0301 	add.w	r3, r3, #1
   16724:	bf08      	it	eq
   16726:	2320      	moveq	r3, #32
   16728:	4618      	mov	r0, r3
   1672a:	4770      	bx	lr
   1672c:	2300      	movs	r3, #0
   1672e:	e7e4      	b.n	166fa <__hi0bits+0xa>

00016730 <__lo0bits>:
   16730:	6803      	ldr	r3, [r0, #0]
   16732:	f013 0207 	ands.w	r2, r3, #7
   16736:	4601      	mov	r1, r0
   16738:	d00b      	beq.n	16752 <__lo0bits+0x22>
   1673a:	07da      	lsls	r2, r3, #31
   1673c:	d424      	bmi.n	16788 <__lo0bits+0x58>
   1673e:	0798      	lsls	r0, r3, #30
   16740:	bf49      	itett	mi
   16742:	085b      	lsrmi	r3, r3, #1
   16744:	089b      	lsrpl	r3, r3, #2
   16746:	2001      	movmi	r0, #1
   16748:	600b      	strmi	r3, [r1, #0]
   1674a:	bf5c      	itt	pl
   1674c:	600b      	strpl	r3, [r1, #0]
   1674e:	2002      	movpl	r0, #2
   16750:	4770      	bx	lr
   16752:	b298      	uxth	r0, r3
   16754:	b9b0      	cbnz	r0, 16784 <__lo0bits+0x54>
   16756:	0c1b      	lsrs	r3, r3, #16
   16758:	2010      	movs	r0, #16
   1675a:	f013 0fff 	tst.w	r3, #255	; 0xff
   1675e:	bf04      	itt	eq
   16760:	0a1b      	lsreq	r3, r3, #8
   16762:	3008      	addeq	r0, #8
   16764:	071a      	lsls	r2, r3, #28
   16766:	bf04      	itt	eq
   16768:	091b      	lsreq	r3, r3, #4
   1676a:	3004      	addeq	r0, #4
   1676c:	079a      	lsls	r2, r3, #30
   1676e:	bf04      	itt	eq
   16770:	089b      	lsreq	r3, r3, #2
   16772:	3002      	addeq	r0, #2
   16774:	07da      	lsls	r2, r3, #31
   16776:	d403      	bmi.n	16780 <__lo0bits+0x50>
   16778:	085b      	lsrs	r3, r3, #1
   1677a:	f100 0001 	add.w	r0, r0, #1
   1677e:	d005      	beq.n	1678c <__lo0bits+0x5c>
   16780:	600b      	str	r3, [r1, #0]
   16782:	4770      	bx	lr
   16784:	4610      	mov	r0, r2
   16786:	e7e8      	b.n	1675a <__lo0bits+0x2a>
   16788:	2000      	movs	r0, #0
   1678a:	4770      	bx	lr
   1678c:	2020      	movs	r0, #32
   1678e:	4770      	bx	lr

00016790 <__i2b>:
   16790:	b510      	push	{r4, lr}
   16792:	460c      	mov	r4, r1
   16794:	2101      	movs	r1, #1
   16796:	f7ff ff22 	bl	165de <_Balloc>
   1679a:	2201      	movs	r2, #1
   1679c:	6144      	str	r4, [r0, #20]
   1679e:	6102      	str	r2, [r0, #16]
   167a0:	bd10      	pop	{r4, pc}

000167a2 <__multiply>:
   167a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167a6:	4615      	mov	r5, r2
   167a8:	690a      	ldr	r2, [r1, #16]
   167aa:	692b      	ldr	r3, [r5, #16]
   167ac:	429a      	cmp	r2, r3
   167ae:	bfb8      	it	lt
   167b0:	460b      	movlt	r3, r1
   167b2:	460c      	mov	r4, r1
   167b4:	bfbc      	itt	lt
   167b6:	462c      	movlt	r4, r5
   167b8:	461d      	movlt	r5, r3
   167ba:	6927      	ldr	r7, [r4, #16]
   167bc:	f8d5 9010 	ldr.w	r9, [r5, #16]
   167c0:	68a3      	ldr	r3, [r4, #8]
   167c2:	6861      	ldr	r1, [r4, #4]
   167c4:	eb07 0609 	add.w	r6, r7, r9
   167c8:	42b3      	cmp	r3, r6
   167ca:	bfb8      	it	lt
   167cc:	3101      	addlt	r1, #1
   167ce:	b085      	sub	sp, #20
   167d0:	f7ff ff05 	bl	165de <_Balloc>
   167d4:	f100 0114 	add.w	r1, r0, #20
   167d8:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   167dc:	460b      	mov	r3, r1
   167de:	2200      	movs	r2, #0
   167e0:	4543      	cmp	r3, r8
   167e2:	d31d      	bcc.n	16820 <__multiply+0x7e>
   167e4:	f104 0314 	add.w	r3, r4, #20
   167e8:	f105 0214 	add.w	r2, r5, #20
   167ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   167f0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   167f4:	9302      	str	r3, [sp, #8]
   167f6:	1b3b      	subs	r3, r7, r4
   167f8:	3b15      	subs	r3, #21
   167fa:	f023 0303 	bic.w	r3, r3, #3
   167fe:	3304      	adds	r3, #4
   16800:	f104 0515 	add.w	r5, r4, #21
   16804:	42af      	cmp	r7, r5
   16806:	bf38      	it	cc
   16808:	2304      	movcc	r3, #4
   1680a:	9301      	str	r3, [sp, #4]
   1680c:	9b02      	ldr	r3, [sp, #8]
   1680e:	9203      	str	r2, [sp, #12]
   16810:	4293      	cmp	r3, r2
   16812:	d808      	bhi.n	16826 <__multiply+0x84>
   16814:	2e00      	cmp	r6, #0
   16816:	dc5a      	bgt.n	168ce <__multiply+0x12c>
   16818:	6106      	str	r6, [r0, #16]
   1681a:	b005      	add	sp, #20
   1681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16820:	f843 2b04 	str.w	r2, [r3], #4
   16824:	e7dc      	b.n	167e0 <__multiply+0x3e>
   16826:	f8b2 a000 	ldrh.w	sl, [r2]
   1682a:	f1ba 0f00 	cmp.w	sl, #0
   1682e:	d024      	beq.n	1687a <__multiply+0xd8>
   16830:	f104 0e14 	add.w	lr, r4, #20
   16834:	4689      	mov	r9, r1
   16836:	f04f 0c00 	mov.w	ip, #0
   1683a:	f85e 5b04 	ldr.w	r5, [lr], #4
   1683e:	f8d9 b000 	ldr.w	fp, [r9]
   16842:	b2ab      	uxth	r3, r5
   16844:	fa1f fb8b 	uxth.w	fp, fp
   16848:	fb0a b303 	mla	r3, sl, r3, fp
   1684c:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   16850:	f8d9 5000 	ldr.w	r5, [r9]
   16854:	4463      	add	r3, ip
   16856:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   1685a:	fb0a c50b 	mla	r5, sl, fp, ip
   1685e:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   16862:	b29b      	uxth	r3, r3
   16864:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   16868:	4577      	cmp	r7, lr
   1686a:	f849 3b04 	str.w	r3, [r9], #4
   1686e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   16872:	d8e2      	bhi.n	1683a <__multiply+0x98>
   16874:	9b01      	ldr	r3, [sp, #4]
   16876:	f841 c003 	str.w	ip, [r1, r3]
   1687a:	9b03      	ldr	r3, [sp, #12]
   1687c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   16880:	3204      	adds	r2, #4
   16882:	f1b9 0f00 	cmp.w	r9, #0
   16886:	d020      	beq.n	168ca <__multiply+0x128>
   16888:	680b      	ldr	r3, [r1, #0]
   1688a:	f104 0c14 	add.w	ip, r4, #20
   1688e:	468e      	mov	lr, r1
   16890:	f04f 0a00 	mov.w	sl, #0
   16894:	f8bc 5000 	ldrh.w	r5, [ip]
   16898:	f8be b002 	ldrh.w	fp, [lr, #2]
   1689c:	fb09 b505 	mla	r5, r9, r5, fp
   168a0:	44aa      	add	sl, r5
   168a2:	b29b      	uxth	r3, r3
   168a4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   168a8:	f84e 3b04 	str.w	r3, [lr], #4
   168ac:	f85c 3b04 	ldr.w	r3, [ip], #4
   168b0:	f8be 5000 	ldrh.w	r5, [lr]
   168b4:	0c1b      	lsrs	r3, r3, #16
   168b6:	fb09 5303 	mla	r3, r9, r3, r5
   168ba:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   168be:	4567      	cmp	r7, ip
   168c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   168c4:	d8e6      	bhi.n	16894 <__multiply+0xf2>
   168c6:	9d01      	ldr	r5, [sp, #4]
   168c8:	514b      	str	r3, [r1, r5]
   168ca:	3104      	adds	r1, #4
   168cc:	e79e      	b.n	1680c <__multiply+0x6a>
   168ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   168d2:	2b00      	cmp	r3, #0
   168d4:	d1a0      	bne.n	16818 <__multiply+0x76>
   168d6:	3e01      	subs	r6, #1
   168d8:	e79c      	b.n	16814 <__multiply+0x72>

000168da <__lshift>:
   168da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168de:	460c      	mov	r4, r1
   168e0:	6849      	ldr	r1, [r1, #4]
   168e2:	6923      	ldr	r3, [r4, #16]
   168e4:	eb03 1862 	add.w	r8, r3, r2, asr #5
   168e8:	68a3      	ldr	r3, [r4, #8]
   168ea:	4607      	mov	r7, r0
   168ec:	4691      	mov	r9, r2
   168ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
   168f2:	f108 0601 	add.w	r6, r8, #1
   168f6:	42b3      	cmp	r3, r6
   168f8:	db3f      	blt.n	1697a <__lshift+0xa0>
   168fa:	4638      	mov	r0, r7
   168fc:	f7ff fe6f 	bl	165de <_Balloc>
   16900:	2300      	movs	r3, #0
   16902:	4605      	mov	r5, r0
   16904:	f100 0114 	add.w	r1, r0, #20
   16908:	f100 0210 	add.w	r2, r0, #16
   1690c:	4618      	mov	r0, r3
   1690e:	4553      	cmp	r3, sl
   16910:	db36      	blt.n	16980 <__lshift+0xa6>
   16912:	6920      	ldr	r0, [r4, #16]
   16914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   16918:	f104 0314 	add.w	r3, r4, #20
   1691c:	f019 091f 	ands.w	r9, r9, #31
   16920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   16924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   16928:	d02e      	beq.n	16988 <__lshift+0xae>
   1692a:	f1c9 0e20 	rsb	lr, r9, #32
   1692e:	468a      	mov	sl, r1
   16930:	2200      	movs	r2, #0
   16932:	6818      	ldr	r0, [r3, #0]
   16934:	fa00 f009 	lsl.w	r0, r0, r9
   16938:	4302      	orrs	r2, r0
   1693a:	f84a 2b04 	str.w	r2, [sl], #4
   1693e:	f853 2b04 	ldr.w	r2, [r3], #4
   16942:	459c      	cmp	ip, r3
   16944:	fa22 f20e 	lsr.w	r2, r2, lr
   16948:	d8f3      	bhi.n	16932 <__lshift+0x58>
   1694a:	ebac 0304 	sub.w	r3, ip, r4
   1694e:	3b15      	subs	r3, #21
   16950:	f023 0303 	bic.w	r3, r3, #3
   16954:	3304      	adds	r3, #4
   16956:	f104 0015 	add.w	r0, r4, #21
   1695a:	4560      	cmp	r0, ip
   1695c:	bf88      	it	hi
   1695e:	2304      	movhi	r3, #4
   16960:	50ca      	str	r2, [r1, r3]
   16962:	b10a      	cbz	r2, 16968 <__lshift+0x8e>
   16964:	f108 0602 	add.w	r6, r8, #2
   16968:	3e01      	subs	r6, #1
   1696a:	4638      	mov	r0, r7
   1696c:	612e      	str	r6, [r5, #16]
   1696e:	4621      	mov	r1, r4
   16970:	f7ff fe69 	bl	16646 <_Bfree>
   16974:	4628      	mov	r0, r5
   16976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1697a:	3101      	adds	r1, #1
   1697c:	005b      	lsls	r3, r3, #1
   1697e:	e7ba      	b.n	168f6 <__lshift+0x1c>
   16980:	f842 0f04 	str.w	r0, [r2, #4]!
   16984:	3301      	adds	r3, #1
   16986:	e7c2      	b.n	1690e <__lshift+0x34>
   16988:	3904      	subs	r1, #4
   1698a:	f853 2b04 	ldr.w	r2, [r3], #4
   1698e:	f841 2f04 	str.w	r2, [r1, #4]!
   16992:	459c      	cmp	ip, r3
   16994:	d8f9      	bhi.n	1698a <__lshift+0xb0>
   16996:	e7e7      	b.n	16968 <__lshift+0x8e>

00016998 <__mcmp>:
   16998:	b530      	push	{r4, r5, lr}
   1699a:	6902      	ldr	r2, [r0, #16]
   1699c:	690c      	ldr	r4, [r1, #16]
   1699e:	1b12      	subs	r2, r2, r4
   169a0:	d10e      	bne.n	169c0 <__mcmp+0x28>
   169a2:	f100 0314 	add.w	r3, r0, #20
   169a6:	3114      	adds	r1, #20
   169a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   169ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   169b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   169b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   169b8:	42a5      	cmp	r5, r4
   169ba:	d003      	beq.n	169c4 <__mcmp+0x2c>
   169bc:	d305      	bcc.n	169ca <__mcmp+0x32>
   169be:	2201      	movs	r2, #1
   169c0:	4610      	mov	r0, r2
   169c2:	bd30      	pop	{r4, r5, pc}
   169c4:	4283      	cmp	r3, r0
   169c6:	d3f3      	bcc.n	169b0 <__mcmp+0x18>
   169c8:	e7fa      	b.n	169c0 <__mcmp+0x28>
   169ca:	f04f 32ff 	mov.w	r2, #4294967295
   169ce:	e7f7      	b.n	169c0 <__mcmp+0x28>

000169d0 <__mdiff>:
   169d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169d4:	460c      	mov	r4, r1
   169d6:	4606      	mov	r6, r0
   169d8:	4611      	mov	r1, r2
   169da:	4620      	mov	r0, r4
   169dc:	4617      	mov	r7, r2
   169de:	f7ff ffdb 	bl	16998 <__mcmp>
   169e2:	1e05      	subs	r5, r0, #0
   169e4:	d108      	bne.n	169f8 <__mdiff+0x28>
   169e6:	4629      	mov	r1, r5
   169e8:	4630      	mov	r0, r6
   169ea:	f7ff fdf8 	bl	165de <_Balloc>
   169ee:	2301      	movs	r3, #1
   169f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
   169f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f8:	bfa4      	itt	ge
   169fa:	463b      	movge	r3, r7
   169fc:	4627      	movge	r7, r4
   169fe:	4630      	mov	r0, r6
   16a00:	6879      	ldr	r1, [r7, #4]
   16a02:	bfa6      	itte	ge
   16a04:	461c      	movge	r4, r3
   16a06:	2500      	movge	r5, #0
   16a08:	2501      	movlt	r5, #1
   16a0a:	f7ff fde8 	bl	165de <_Balloc>
   16a0e:	693e      	ldr	r6, [r7, #16]
   16a10:	60c5      	str	r5, [r0, #12]
   16a12:	6925      	ldr	r5, [r4, #16]
   16a14:	f107 0114 	add.w	r1, r7, #20
   16a18:	f104 0914 	add.w	r9, r4, #20
   16a1c:	f100 0e14 	add.w	lr, r0, #20
   16a20:	f107 0210 	add.w	r2, r7, #16
   16a24:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   16a28:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   16a2c:	46f2      	mov	sl, lr
   16a2e:	2700      	movs	r7, #0
   16a30:	f859 3b04 	ldr.w	r3, [r9], #4
   16a34:	f852 bf04 	ldr.w	fp, [r2, #4]!
   16a38:	fa1f f883 	uxth.w	r8, r3
   16a3c:	fa17 f78b 	uxtah	r7, r7, fp
   16a40:	0c1b      	lsrs	r3, r3, #16
   16a42:	eba7 0808 	sub.w	r8, r7, r8
   16a46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   16a4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
   16a4e:	fa1f f888 	uxth.w	r8, r8
   16a52:	141f      	asrs	r7, r3, #16
   16a54:	454d      	cmp	r5, r9
   16a56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   16a5a:	f84a 3b04 	str.w	r3, [sl], #4
   16a5e:	d8e7      	bhi.n	16a30 <__mdiff+0x60>
   16a60:	1b2b      	subs	r3, r5, r4
   16a62:	3b15      	subs	r3, #21
   16a64:	f023 0303 	bic.w	r3, r3, #3
   16a68:	3304      	adds	r3, #4
   16a6a:	3415      	adds	r4, #21
   16a6c:	42a5      	cmp	r5, r4
   16a6e:	bf38      	it	cc
   16a70:	2304      	movcc	r3, #4
   16a72:	4419      	add	r1, r3
   16a74:	4473      	add	r3, lr
   16a76:	469e      	mov	lr, r3
   16a78:	460d      	mov	r5, r1
   16a7a:	4565      	cmp	r5, ip
   16a7c:	d30e      	bcc.n	16a9c <__mdiff+0xcc>
   16a7e:	f10c 0203 	add.w	r2, ip, #3
   16a82:	1a52      	subs	r2, r2, r1
   16a84:	f022 0203 	bic.w	r2, r2, #3
   16a88:	3903      	subs	r1, #3
   16a8a:	458c      	cmp	ip, r1
   16a8c:	bf38      	it	cc
   16a8e:	2200      	movcc	r2, #0
   16a90:	441a      	add	r2, r3
   16a92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   16a96:	b17b      	cbz	r3, 16ab8 <__mdiff+0xe8>
   16a98:	6106      	str	r6, [r0, #16]
   16a9a:	e7ab      	b.n	169f4 <__mdiff+0x24>
   16a9c:	f855 8b04 	ldr.w	r8, [r5], #4
   16aa0:	fa17 f488 	uxtah	r4, r7, r8
   16aa4:	1422      	asrs	r2, r4, #16
   16aa6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   16aaa:	b2a4      	uxth	r4, r4
   16aac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   16ab0:	f84e 4b04 	str.w	r4, [lr], #4
   16ab4:	1417      	asrs	r7, r2, #16
   16ab6:	e7e0      	b.n	16a7a <__mdiff+0xaa>
   16ab8:	3e01      	subs	r6, #1
   16aba:	e7ea      	b.n	16a92 <__mdiff+0xc2>

00016abc <__d2b>:
   16abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16ac0:	4689      	mov	r9, r1
   16ac2:	2101      	movs	r1, #1
   16ac4:	ec57 6b10 	vmov	r6, r7, d0
   16ac8:	4690      	mov	r8, r2
   16aca:	f7ff fd88 	bl	165de <_Balloc>
   16ace:	f3c7 550a 	ubfx	r5, r7, #20, #11
   16ad2:	4604      	mov	r4, r0
   16ad4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   16ad8:	bb35      	cbnz	r5, 16b28 <__d2b+0x6c>
   16ada:	2e00      	cmp	r6, #0
   16adc:	9301      	str	r3, [sp, #4]
   16ade:	d028      	beq.n	16b32 <__d2b+0x76>
   16ae0:	4668      	mov	r0, sp
   16ae2:	9600      	str	r6, [sp, #0]
   16ae4:	f7ff fe24 	bl	16730 <__lo0bits>
   16ae8:	9900      	ldr	r1, [sp, #0]
   16aea:	b300      	cbz	r0, 16b2e <__d2b+0x72>
   16aec:	9a01      	ldr	r2, [sp, #4]
   16aee:	f1c0 0320 	rsb	r3, r0, #32
   16af2:	fa02 f303 	lsl.w	r3, r2, r3
   16af6:	430b      	orrs	r3, r1
   16af8:	40c2      	lsrs	r2, r0
   16afa:	6163      	str	r3, [r4, #20]
   16afc:	9201      	str	r2, [sp, #4]
   16afe:	9b01      	ldr	r3, [sp, #4]
   16b00:	61a3      	str	r3, [r4, #24]
   16b02:	2b00      	cmp	r3, #0
   16b04:	bf14      	ite	ne
   16b06:	2202      	movne	r2, #2
   16b08:	2201      	moveq	r2, #1
   16b0a:	6122      	str	r2, [r4, #16]
   16b0c:	b1d5      	cbz	r5, 16b44 <__d2b+0x88>
   16b0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   16b12:	4405      	add	r5, r0
   16b14:	f8c9 5000 	str.w	r5, [r9]
   16b18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   16b1c:	f8c8 0000 	str.w	r0, [r8]
   16b20:	4620      	mov	r0, r4
   16b22:	b003      	add	sp, #12
   16b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16b2c:	e7d5      	b.n	16ada <__d2b+0x1e>
   16b2e:	6161      	str	r1, [r4, #20]
   16b30:	e7e5      	b.n	16afe <__d2b+0x42>
   16b32:	a801      	add	r0, sp, #4
   16b34:	f7ff fdfc 	bl	16730 <__lo0bits>
   16b38:	9b01      	ldr	r3, [sp, #4]
   16b3a:	6163      	str	r3, [r4, #20]
   16b3c:	2201      	movs	r2, #1
   16b3e:	6122      	str	r2, [r4, #16]
   16b40:	3020      	adds	r0, #32
   16b42:	e7e3      	b.n	16b0c <__d2b+0x50>
   16b44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   16b48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   16b4c:	f8c9 0000 	str.w	r0, [r9]
   16b50:	6918      	ldr	r0, [r3, #16]
   16b52:	f7ff fdcd 	bl	166f0 <__hi0bits>
   16b56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   16b5a:	e7df      	b.n	16b1c <__d2b+0x60>

00016b5c <_realloc_r>:
   16b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b5e:	4607      	mov	r7, r0
   16b60:	4614      	mov	r4, r2
   16b62:	460e      	mov	r6, r1
   16b64:	b921      	cbnz	r1, 16b70 <_realloc_r+0x14>
   16b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16b6a:	4611      	mov	r1, r2
   16b6c:	f7f9 bbe4 	b.w	10338 <_malloc_r>
   16b70:	b922      	cbnz	r2, 16b7c <_realloc_r+0x20>
   16b72:	f7f9 fb91 	bl	10298 <_free_r>
   16b76:	4625      	mov	r5, r4
   16b78:	4628      	mov	r0, r5
   16b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b7c:	f000 f8c4 	bl	16d08 <_malloc_usable_size_r>
   16b80:	42a0      	cmp	r0, r4
   16b82:	d20f      	bcs.n	16ba4 <_realloc_r+0x48>
   16b84:	4621      	mov	r1, r4
   16b86:	4638      	mov	r0, r7
   16b88:	f7f9 fbd6 	bl	10338 <_malloc_r>
   16b8c:	4605      	mov	r5, r0
   16b8e:	2800      	cmp	r0, #0
   16b90:	d0f2      	beq.n	16b78 <_realloc_r+0x1c>
   16b92:	4631      	mov	r1, r6
   16b94:	4622      	mov	r2, r4
   16b96:	f7ff fa5e 	bl	16056 <memcpy>
   16b9a:	4631      	mov	r1, r6
   16b9c:	4638      	mov	r0, r7
   16b9e:	f7f9 fb7b 	bl	10298 <_free_r>
   16ba2:	e7e9      	b.n	16b78 <_realloc_r+0x1c>
   16ba4:	4635      	mov	r5, r6
   16ba6:	e7e7      	b.n	16b78 <_realloc_r+0x1c>

00016ba8 <__ssputs_r>:
   16ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bac:	688e      	ldr	r6, [r1, #8]
   16bae:	429e      	cmp	r6, r3
   16bb0:	4682      	mov	sl, r0
   16bb2:	460c      	mov	r4, r1
   16bb4:	4690      	mov	r8, r2
   16bb6:	461f      	mov	r7, r3
   16bb8:	d838      	bhi.n	16c2c <__ssputs_r+0x84>
   16bba:	898a      	ldrh	r2, [r1, #12]
   16bbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
   16bc0:	d032      	beq.n	16c28 <__ssputs_r+0x80>
   16bc2:	6825      	ldr	r5, [r4, #0]
   16bc4:	6909      	ldr	r1, [r1, #16]
   16bc6:	eba5 0901 	sub.w	r9, r5, r1
   16bca:	6965      	ldr	r5, [r4, #20]
   16bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   16bd4:	3301      	adds	r3, #1
   16bd6:	444b      	add	r3, r9
   16bd8:	106d      	asrs	r5, r5, #1
   16bda:	429d      	cmp	r5, r3
   16bdc:	bf38      	it	cc
   16bde:	461d      	movcc	r5, r3
   16be0:	0553      	lsls	r3, r2, #21
   16be2:	d531      	bpl.n	16c48 <__ssputs_r+0xa0>
   16be4:	4629      	mov	r1, r5
   16be6:	f7f9 fba7 	bl	10338 <_malloc_r>
   16bea:	4606      	mov	r6, r0
   16bec:	b950      	cbnz	r0, 16c04 <__ssputs_r+0x5c>
   16bee:	230c      	movs	r3, #12
   16bf0:	f8ca 3000 	str.w	r3, [sl]
   16bf4:	89a3      	ldrh	r3, [r4, #12]
   16bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16bfa:	81a3      	strh	r3, [r4, #12]
   16bfc:	f04f 30ff 	mov.w	r0, #4294967295
   16c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16c04:	6921      	ldr	r1, [r4, #16]
   16c06:	464a      	mov	r2, r9
   16c08:	f7ff fa25 	bl	16056 <memcpy>
   16c0c:	89a3      	ldrh	r3, [r4, #12]
   16c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   16c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16c16:	81a3      	strh	r3, [r4, #12]
   16c18:	6126      	str	r6, [r4, #16]
   16c1a:	6165      	str	r5, [r4, #20]
   16c1c:	444e      	add	r6, r9
   16c1e:	eba5 0509 	sub.w	r5, r5, r9
   16c22:	6026      	str	r6, [r4, #0]
   16c24:	60a5      	str	r5, [r4, #8]
   16c26:	463e      	mov	r6, r7
   16c28:	42be      	cmp	r6, r7
   16c2a:	d900      	bls.n	16c2e <__ssputs_r+0x86>
   16c2c:	463e      	mov	r6, r7
   16c2e:	4632      	mov	r2, r6
   16c30:	6820      	ldr	r0, [r4, #0]
   16c32:	4641      	mov	r1, r8
   16c34:	f7ff fa1d 	bl	16072 <memmove>
   16c38:	68a3      	ldr	r3, [r4, #8]
   16c3a:	6822      	ldr	r2, [r4, #0]
   16c3c:	1b9b      	subs	r3, r3, r6
   16c3e:	4432      	add	r2, r6
   16c40:	60a3      	str	r3, [r4, #8]
   16c42:	6022      	str	r2, [r4, #0]
   16c44:	2000      	movs	r0, #0
   16c46:	e7db      	b.n	16c00 <__ssputs_r+0x58>
   16c48:	462a      	mov	r2, r5
   16c4a:	f7ff ff87 	bl	16b5c <_realloc_r>
   16c4e:	4606      	mov	r6, r0
   16c50:	2800      	cmp	r0, #0
   16c52:	d1e1      	bne.n	16c18 <__ssputs_r+0x70>
   16c54:	6921      	ldr	r1, [r4, #16]
   16c56:	4650      	mov	r0, sl
   16c58:	f7f9 fb1e 	bl	10298 <_free_r>
   16c5c:	e7c7      	b.n	16bee <__ssputs_r+0x46>

00016c5e <__sread>:
   16c5e:	b510      	push	{r4, lr}
   16c60:	460c      	mov	r4, r1
   16c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16c66:	f7fa fd99 	bl	1179c <_read_r>
   16c6a:	2800      	cmp	r0, #0
   16c6c:	bfab      	itete	ge
   16c6e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   16c70:	89a3      	ldrhlt	r3, [r4, #12]
   16c72:	181b      	addge	r3, r3, r0
   16c74:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   16c78:	bfac      	ite	ge
   16c7a:	6563      	strge	r3, [r4, #84]	; 0x54
   16c7c:	81a3      	strhlt	r3, [r4, #12]
   16c7e:	bd10      	pop	{r4, pc}

00016c80 <__swrite>:
   16c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c84:	461f      	mov	r7, r3
   16c86:	898b      	ldrh	r3, [r1, #12]
   16c88:	05db      	lsls	r3, r3, #23
   16c8a:	4605      	mov	r5, r0
   16c8c:	460c      	mov	r4, r1
   16c8e:	4616      	mov	r6, r2
   16c90:	d505      	bpl.n	16c9e <__swrite+0x1e>
   16c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16c96:	2302      	movs	r3, #2
   16c98:	2200      	movs	r2, #0
   16c9a:	f7fa fd6d 	bl	11778 <_lseek_r>
   16c9e:	89a3      	ldrh	r3, [r4, #12]
   16ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   16ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   16ca8:	81a3      	strh	r3, [r4, #12]
   16caa:	4632      	mov	r2, r6
   16cac:	463b      	mov	r3, r7
   16cae:	4628      	mov	r0, r5
   16cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16cb4:	f7fa bd1c 	b.w	116f0 <_write_r>

00016cb8 <__sseek>:
   16cb8:	b510      	push	{r4, lr}
   16cba:	460c      	mov	r4, r1
   16cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16cc0:	f7fa fd5a 	bl	11778 <_lseek_r>
   16cc4:	1c43      	adds	r3, r0, #1
   16cc6:	89a3      	ldrh	r3, [r4, #12]
   16cc8:	bf15      	itete	ne
   16cca:	6560      	strne	r0, [r4, #84]	; 0x54
   16ccc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   16cd0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   16cd4:	81a3      	strheq	r3, [r4, #12]
   16cd6:	bf18      	it	ne
   16cd8:	81a3      	strhne	r3, [r4, #12]
   16cda:	bd10      	pop	{r4, pc}

00016cdc <__sclose>:
   16cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16ce0:	f7fa bd18 	b.w	11714 <_close_r>

00016ce4 <__ascii_mbtowc>:
   16ce4:	b082      	sub	sp, #8
   16ce6:	b901      	cbnz	r1, 16cea <__ascii_mbtowc+0x6>
   16ce8:	a901      	add	r1, sp, #4
   16cea:	b142      	cbz	r2, 16cfe <__ascii_mbtowc+0x1a>
   16cec:	b14b      	cbz	r3, 16d02 <__ascii_mbtowc+0x1e>
   16cee:	7813      	ldrb	r3, [r2, #0]
   16cf0:	600b      	str	r3, [r1, #0]
   16cf2:	7812      	ldrb	r2, [r2, #0]
   16cf4:	1e10      	subs	r0, r2, #0
   16cf6:	bf18      	it	ne
   16cf8:	2001      	movne	r0, #1
   16cfa:	b002      	add	sp, #8
   16cfc:	4770      	bx	lr
   16cfe:	4610      	mov	r0, r2
   16d00:	e7fb      	b.n	16cfa <__ascii_mbtowc+0x16>
   16d02:	f06f 0001 	mvn.w	r0, #1
   16d06:	e7f8      	b.n	16cfa <__ascii_mbtowc+0x16>

00016d08 <_malloc_usable_size_r>:
   16d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
   16d0c:	1f18      	subs	r0, r3, #4
   16d0e:	2b00      	cmp	r3, #0
   16d10:	bfbc      	itt	lt
   16d12:	580b      	ldrlt	r3, [r1, r0]
   16d14:	18c0      	addlt	r0, r0, r3
   16d16:	4770      	bx	lr

00016d18 <__ascii_wctomb>:
   16d18:	b149      	cbz	r1, 16d2e <__ascii_wctomb+0x16>
   16d1a:	2aff      	cmp	r2, #255	; 0xff
   16d1c:	bf85      	ittet	hi
   16d1e:	238a      	movhi	r3, #138	; 0x8a
   16d20:	6003      	strhi	r3, [r0, #0]
   16d22:	700a      	strbls	r2, [r1, #0]
   16d24:	f04f 30ff 	movhi.w	r0, #4294967295
   16d28:	bf98      	it	ls
   16d2a:	2001      	movls	r0, #1
   16d2c:	4770      	bx	lr
   16d2e:	4608      	mov	r0, r1
   16d30:	4770      	bx	lr
	...

00016d34 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   16d34:	f7f6 bf44 	b.w	dbc0 <SystemInit>
