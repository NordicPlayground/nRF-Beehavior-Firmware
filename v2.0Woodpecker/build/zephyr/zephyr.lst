
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	00 43 00 20 cd be 00 00 2f 4c 01 00 a1 be 00 00     .C. ..../L......
  10:	a1 be 00 00 a1 be 00 00 a1 be 00 00 00 00 00 00     ................
	...
  2c:	e5 ba 00 00 a1 be 00 00 00 00 00 00 55 ba 00 00     ............U...
  3c:	a1 be 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  50:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  60:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  70:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  80:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  90:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  a0:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  b0:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  c0:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  d0:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  e0:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...
  f0:	59 bc 00 00 59 bc 00 00 59 bc 00 00 59 bc 00 00     Y...Y...Y...Y...

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__adddf3+0x240>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__adddf3+0x24e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__adddf3+0x212>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__adddf3+0x230>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__data_size+0x13e>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__data_size+0x16>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__data_size+0x40>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__data_size+0x19a>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__data_size+0xc6>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__data_size+0x96>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__data_size+0x124>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__data_size+0x108>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__data_size+0x128>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__data_size+0x168>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__data_size+0xfe>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__data_size+0x1ac>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__data_size+0x184>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__data_size+0x1ac>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__data_size+0x196>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__data_size+0x1ac>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__data_size+0x40>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__data_size+0x40>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__data_size+0x40>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__data_size+0x1ac>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__data_size+0x1ac>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__data_size+0x196>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__data_size+0x1ac>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__data_size+0x15a>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__data_size+0x1ac>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__data_size+0xfe>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__data_size+0x196>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__data_size+0x15a>
     93a:	e712      	b.n	762 <__data_size+0x1ac>

0000093c <__gedf2>:
     93c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     940:	e006      	b.n	950 <__cmpdf2+0x4>
     942:	bf00      	nop

00000944 <__ledf2>:
     944:	f04f 0c01 	mov.w	ip, #1
     948:	e002      	b.n	950 <__cmpdf2+0x4>
     94a:	bf00      	nop

0000094c <__cmpdf2>:
     94c:	f04f 0c01 	mov.w	ip, #1
     950:	f84d cd04 	str.w	ip, [sp, #-4]!
     954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     95c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     960:	bf18      	it	ne
     962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     966:	d01b      	beq.n	9a0 <__cmpdf2+0x54>
     968:	b001      	add	sp, #4
     96a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     96e:	bf0c      	ite	eq
     970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     974:	ea91 0f03 	teqne	r1, r3
     978:	bf02      	ittt	eq
     97a:	ea90 0f02 	teqeq	r0, r2
     97e:	2000      	moveq	r0, #0
     980:	4770      	bxeq	lr
     982:	f110 0f00 	cmn.w	r0, #0
     986:	ea91 0f03 	teq	r1, r3
     98a:	bf58      	it	pl
     98c:	4299      	cmppl	r1, r3
     98e:	bf08      	it	eq
     990:	4290      	cmpeq	r0, r2
     992:	bf2c      	ite	cs
     994:	17d8      	asrcs	r0, r3, #31
     996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     99a:	f040 0001 	orr.w	r0, r0, #1
     99e:	4770      	bx	lr
     9a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9a8:	d102      	bne.n	9b0 <__cmpdf2+0x64>
     9aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9ae:	d107      	bne.n	9c0 <__cmpdf2+0x74>
     9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9b8:	d1d6      	bne.n	968 <__cmpdf2+0x1c>
     9ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9be:	d0d3      	beq.n	968 <__cmpdf2+0x1c>
     9c0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <__aeabi_cdrcmple>:
     9c8:	4684      	mov	ip, r0
     9ca:	4610      	mov	r0, r2
     9cc:	4662      	mov	r2, ip
     9ce:	468c      	mov	ip, r1
     9d0:	4619      	mov	r1, r3
     9d2:	4663      	mov	r3, ip
     9d4:	e000      	b.n	9d8 <__aeabi_cdcmpeq>
     9d6:	bf00      	nop

000009d8 <__aeabi_cdcmpeq>:
     9d8:	b501      	push	{r0, lr}
     9da:	f7ff ffb7 	bl	94c <__cmpdf2>
     9de:	2800      	cmp	r0, #0
     9e0:	bf48      	it	mi
     9e2:	f110 0f00 	cmnmi.w	r0, #0
     9e6:	bd01      	pop	{r0, pc}

000009e8 <__aeabi_dcmpeq>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff fff4 	bl	9d8 <__aeabi_cdcmpeq>
     9f0:	bf0c      	ite	eq
     9f2:	2001      	moveq	r0, #1
     9f4:	2000      	movne	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_dcmplt>:
     9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
     a00:	f7ff ffea 	bl	9d8 <__aeabi_cdcmpeq>
     a04:	bf34      	ite	cc
     a06:	2001      	movcc	r0, #1
     a08:	2000      	movcs	r0, #0
     a0a:	f85d fb08 	ldr.w	pc, [sp], #8
     a0e:	bf00      	nop

00000a10 <__aeabi_dcmple>:
     a10:	f84d ed08 	str.w	lr, [sp, #-8]!
     a14:	f7ff ffe0 	bl	9d8 <__aeabi_cdcmpeq>
     a18:	bf94      	ite	ls
     a1a:	2001      	movls	r0, #1
     a1c:	2000      	movhi	r0, #0
     a1e:	f85d fb08 	ldr.w	pc, [sp], #8
     a22:	bf00      	nop

00000a24 <__aeabi_dcmpge>:
     a24:	f84d ed08 	str.w	lr, [sp, #-8]!
     a28:	f7ff ffce 	bl	9c8 <__aeabi_cdrcmple>
     a2c:	bf94      	ite	ls
     a2e:	2001      	movls	r0, #1
     a30:	2000      	movhi	r0, #0
     a32:	f85d fb08 	ldr.w	pc, [sp], #8
     a36:	bf00      	nop

00000a38 <__aeabi_dcmpgt>:
     a38:	f84d ed08 	str.w	lr, [sp, #-8]!
     a3c:	f7ff ffc4 	bl	9c8 <__aeabi_cdrcmple>
     a40:	bf34      	ite	cc
     a42:	2001      	movcc	r0, #1
     a44:	2000      	movcs	r0, #0
     a46:	f85d fb08 	ldr.w	pc, [sp], #8
     a4a:	bf00      	nop

00000a4c <__aeabi_d2iz>:
     a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d215      	bcs.n	a82 <__aeabi_d2iz+0x36>
     a56:	d511      	bpl.n	a7c <__aeabi_d2iz+0x30>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d912      	bls.n	a88 <__aeabi_d2iz+0x3c>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a72:	fa23 f002 	lsr.w	r0, r3, r2
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	4770      	bx	lr
     a7c:	f04f 0000 	mov.w	r0, #0
     a80:	4770      	bx	lr
     a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a86:	d105      	bne.n	a94 <__aeabi_d2iz+0x48>
     a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a8c:	bf08      	it	eq
     a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a92:	4770      	bx	lr
     a94:	f04f 0000 	mov.w	r0, #0
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_d2f>:
     a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     aa4:	bf24      	itt	cs
     aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     aae:	d90d      	bls.n	acc <__aeabi_d2f+0x30>
     ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     ac4:	bf08      	it	eq
     ac6:	f020 0001 	biceq.w	r0, r0, #1
     aca:	4770      	bx	lr
     acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     ad0:	d121      	bne.n	b16 <__aeabi_d2f+0x7a>
     ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     ad6:	bfbc      	itt	lt
     ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     adc:	4770      	bxlt	lr
     ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     ae6:	f1c2 0218 	rsb	r2, r2, #24
     aea:	f1c2 0c20 	rsb	ip, r2, #32
     aee:	fa10 f30c 	lsls.w	r3, r0, ip
     af2:	fa20 f002 	lsr.w	r0, r0, r2
     af6:	bf18      	it	ne
     af8:	f040 0001 	orrne.w	r0, r0, #1
     afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     b04:	fa03 fc0c 	lsl.w	ip, r3, ip
     b08:	ea40 000c 	orr.w	r0, r0, ip
     b0c:	fa23 f302 	lsr.w	r3, r3, r2
     b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b14:	e7cc      	b.n	ab0 <__aeabi_d2f+0x14>
     b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
     b1a:	d107      	bne.n	b2c <__aeabi_d2f+0x90>
     b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     b20:	bf1e      	ittt	ne
     b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     b2a:	4770      	bxne	lr
     b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <__aeabi_ldivmod>:
     b3c:	b97b      	cbnz	r3, b5e <__aeabi_ldivmod+0x22>
     b3e:	b972      	cbnz	r2, b5e <__aeabi_ldivmod+0x22>
     b40:	2900      	cmp	r1, #0
     b42:	bfbe      	ittt	lt
     b44:	2000      	movlt	r0, #0
     b46:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     b4a:	e006      	blt.n	b5a <__aeabi_ldivmod+0x1e>
     b4c:	bf08      	it	eq
     b4e:	2800      	cmpeq	r0, #0
     b50:	bf1c      	itt	ne
     b52:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     b56:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     b5a:	f000 b875 	b.w	c48 <__aeabi_idiv0>
     b5e:	f1ad 0c08 	sub.w	ip, sp, #8
     b62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     b66:	2900      	cmp	r1, #0
     b68:	db09      	blt.n	b7e <__aeabi_ldivmod+0x42>
     b6a:	2b00      	cmp	r3, #0
     b6c:	db1a      	blt.n	ba4 <__aeabi_ldivmod+0x68>
     b6e:	f000 f8ba 	bl	ce6 <__udivmoddi4>
     b72:	f8dd e004 	ldr.w	lr, [sp, #4]
     b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b7a:	b004      	add	sp, #16
     b7c:	4770      	bx	lr
     b7e:	4240      	negs	r0, r0
     b80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b84:	2b00      	cmp	r3, #0
     b86:	db1b      	blt.n	bc0 <__aeabi_ldivmod+0x84>
     b88:	f000 f8ad 	bl	ce6 <__udivmoddi4>
     b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
     b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b94:	b004      	add	sp, #16
     b96:	4240      	negs	r0, r0
     b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b9c:	4252      	negs	r2, r2
     b9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ba2:	4770      	bx	lr
     ba4:	4252      	negs	r2, r2
     ba6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     baa:	f000 f89c 	bl	ce6 <__udivmoddi4>
     bae:	f8dd e004 	ldr.w	lr, [sp, #4]
     bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bb6:	b004      	add	sp, #16
     bb8:	4240      	negs	r0, r0
     bba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     bbe:	4770      	bx	lr
     bc0:	4252      	negs	r2, r2
     bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     bc6:	f000 f88e 	bl	ce6 <__udivmoddi4>
     bca:	f8dd e004 	ldr.w	lr, [sp, #4]
     bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bd2:	b004      	add	sp, #16
     bd4:	4252      	negs	r2, r2
     bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     bda:	4770      	bx	lr

00000bdc <__aeabi_uldivmod>:
     bdc:	b953      	cbnz	r3, bf4 <__aeabi_uldivmod+0x18>
     bde:	b94a      	cbnz	r2, bf4 <__aeabi_uldivmod+0x18>
     be0:	2900      	cmp	r1, #0
     be2:	bf08      	it	eq
     be4:	2800      	cmpeq	r0, #0
     be6:	bf1c      	itt	ne
     be8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     bec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     bf0:	f000 b82a 	b.w	c48 <__aeabi_idiv0>
     bf4:	f1ad 0c08 	sub.w	ip, sp, #8
     bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     bfc:	f000 f873 	bl	ce6 <__udivmoddi4>
     c00:	f8dd e004 	ldr.w	lr, [sp, #4]
     c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     c08:	b004      	add	sp, #16
     c0a:	4770      	bx	lr

00000c0c <__aeabi_d2ulz>:
     c0c:	b5d0      	push	{r4, r6, r7, lr}
     c0e:	4b0c      	ldr	r3, [pc, #48]	; (c40 <__aeabi_d2ulz+0x34>)
     c10:	2200      	movs	r2, #0
     c12:	4606      	mov	r6, r0
     c14:	460f      	mov	r7, r1
     c16:	f7ff fc7f 	bl	518 <__aeabi_dmul>
     c1a:	f000 f817 	bl	c4c <__aeabi_d2uiz>
     c1e:	4604      	mov	r4, r0
     c20:	f7ff fc00 	bl	424 <__aeabi_ui2d>
     c24:	4b07      	ldr	r3, [pc, #28]	; (c44 <__aeabi_d2ulz+0x38>)
     c26:	2200      	movs	r2, #0
     c28:	f7ff fc76 	bl	518 <__aeabi_dmul>
     c2c:	4602      	mov	r2, r0
     c2e:	460b      	mov	r3, r1
     c30:	4630      	mov	r0, r6
     c32:	4639      	mov	r1, r7
     c34:	f7ff fab8 	bl	1a8 <__aeabi_dsub>
     c38:	f000 f808 	bl	c4c <__aeabi_d2uiz>
     c3c:	4621      	mov	r1, r4
     c3e:	bdd0      	pop	{r4, r6, r7, pc}
     c40:	3df00000 	.word	0x3df00000
     c44:	41f00000 	.word	0x41f00000

00000c48 <__aeabi_idiv0>:
     c48:	4770      	bx	lr
     c4a:	bf00      	nop

00000c4c <__aeabi_d2uiz>:
     c4c:	004a      	lsls	r2, r1, #1
     c4e:	d211      	bcs.n	c74 <__aeabi_d2uiz+0x28>
     c50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     c54:	d211      	bcs.n	c7a <__aeabi_d2uiz+0x2e>
     c56:	d50d      	bpl.n	c74 <__aeabi_d2uiz+0x28>
     c58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     c5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     c60:	d40e      	bmi.n	c80 <__aeabi_d2uiz+0x34>
     c62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     c6e:	fa23 f002 	lsr.w	r0, r3, r2
     c72:	4770      	bx	lr
     c74:	f04f 0000 	mov.w	r0, #0
     c78:	4770      	bx	lr
     c7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     c7e:	d102      	bne.n	c86 <__aeabi_d2uiz+0x3a>
     c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c84:	4770      	bx	lr
     c86:	f04f 0000 	mov.w	r0, #0
     c8a:	4770      	bx	lr

00000c8c <__aeabi_dcmpun>:
     c8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     c90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c94:	d102      	bne.n	c9c <__aeabi_dcmpun+0x10>
     c96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     c9a:	d10a      	bne.n	cb2 <__aeabi_dcmpun+0x26>
     c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     ca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     ca4:	d102      	bne.n	cac <__aeabi_dcmpun+0x20>
     ca6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     caa:	d102      	bne.n	cb2 <__aeabi_dcmpun+0x26>
     cac:	f04f 0000 	mov.w	r0, #0
     cb0:	4770      	bx	lr
     cb2:	f04f 0001 	mov.w	r0, #1
     cb6:	4770      	bx	lr

00000cb8 <__aeabi_d2lz>:
     cb8:	b538      	push	{r3, r4, r5, lr}
     cba:	2200      	movs	r2, #0
     cbc:	2300      	movs	r3, #0
     cbe:	4604      	mov	r4, r0
     cc0:	460d      	mov	r5, r1
     cc2:	f7ff fe9b 	bl	9fc <__aeabi_dcmplt>
     cc6:	b928      	cbnz	r0, cd4 <__aeabi_d2lz+0x1c>
     cc8:	4620      	mov	r0, r4
     cca:	4629      	mov	r1, r5
     ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     cd0:	f7ff bf9c 	b.w	c0c <__aeabi_d2ulz>
     cd4:	4620      	mov	r0, r4
     cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
     cda:	f7ff ff97 	bl	c0c <__aeabi_d2ulz>
     cde:	4240      	negs	r0, r0
     ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ce4:	bd38      	pop	{r3, r4, r5, pc}

00000ce6 <__udivmoddi4>:
     ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cea:	9e09      	ldr	r6, [sp, #36]	; 0x24
     cec:	4688      	mov	r8, r1
     cee:	468e      	mov	lr, r1
     cf0:	4615      	mov	r5, r2
     cf2:	4604      	mov	r4, r0
     cf4:	4619      	mov	r1, r3
     cf6:	2b00      	cmp	r3, #0
     cf8:	f040 80c7 	bne.w	e8a <__udivmoddi4+0x1a4>
     cfc:	4542      	cmp	r2, r8
     cfe:	fab2 f782 	clz	r7, r2
     d02:	d946      	bls.n	d92 <__udivmoddi4+0xac>
     d04:	b14f      	cbz	r7, d1a <__udivmoddi4+0x34>
     d06:	f1c7 0c20 	rsb	ip, r7, #32
     d0a:	fa08 f307 	lsl.w	r3, r8, r7
     d0e:	fa20 fc0c 	lsr.w	ip, r0, ip
     d12:	40bd      	lsls	r5, r7
     d14:	ea4c 0e03 	orr.w	lr, ip, r3
     d18:	40bc      	lsls	r4, r7
     d1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     d1e:	fa1f fc85 	uxth.w	ip, r5
     d22:	fbbe f9f8 	udiv	r9, lr, r8
     d26:	0c22      	lsrs	r2, r4, #16
     d28:	fb08 e319 	mls	r3, r8, r9, lr
     d2c:	fb09 fa0c 	mul.w	sl, r9, ip
     d30:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     d34:	459a      	cmp	sl, r3
     d36:	d928      	bls.n	d8a <__udivmoddi4+0xa4>
     d38:	18eb      	adds	r3, r5, r3
     d3a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     d3e:	d204      	bcs.n	d4a <__udivmoddi4+0x64>
     d40:	459a      	cmp	sl, r3
     d42:	d902      	bls.n	d4a <__udivmoddi4+0x64>
     d44:	f1a9 0002 	sub.w	r0, r9, #2
     d48:	442b      	add	r3, r5
     d4a:	eba3 030a 	sub.w	r3, r3, sl
     d4e:	b2a4      	uxth	r4, r4
     d50:	fbb3 f2f8 	udiv	r2, r3, r8
     d54:	fb08 3312 	mls	r3, r8, r2, r3
     d58:	fb02 fc0c 	mul.w	ip, r2, ip
     d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d60:	45a4      	cmp	ip, r4
     d62:	d914      	bls.n	d8e <__udivmoddi4+0xa8>
     d64:	192c      	adds	r4, r5, r4
     d66:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     d6a:	d203      	bcs.n	d74 <__udivmoddi4+0x8e>
     d6c:	45a4      	cmp	ip, r4
     d6e:	d901      	bls.n	d74 <__udivmoddi4+0x8e>
     d70:	1e93      	subs	r3, r2, #2
     d72:	442c      	add	r4, r5
     d74:	eba4 040c 	sub.w	r4, r4, ip
     d78:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d7c:	b11e      	cbz	r6, d86 <__udivmoddi4+0xa0>
     d7e:	40fc      	lsrs	r4, r7
     d80:	2300      	movs	r3, #0
     d82:	6034      	str	r4, [r6, #0]
     d84:	6073      	str	r3, [r6, #4]
     d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d8a:	4648      	mov	r0, r9
     d8c:	e7dd      	b.n	d4a <__udivmoddi4+0x64>
     d8e:	4613      	mov	r3, r2
     d90:	e7f0      	b.n	d74 <__udivmoddi4+0x8e>
     d92:	b902      	cbnz	r2, d96 <__udivmoddi4+0xb0>
     d94:	deff      	udf	#255	; 0xff
     d96:	bb8f      	cbnz	r7, dfc <__udivmoddi4+0x116>
     d98:	eba8 0302 	sub.w	r3, r8, r2
     d9c:	2101      	movs	r1, #1
     d9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     da2:	b2aa      	uxth	r2, r5
     da4:	fbb3 fcfe 	udiv	ip, r3, lr
     da8:	0c20      	lsrs	r0, r4, #16
     daa:	fb0e 331c 	mls	r3, lr, ip, r3
     dae:	fb0c f802 	mul.w	r8, ip, r2
     db2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     db6:	4598      	cmp	r8, r3
     db8:	d963      	bls.n	e82 <__udivmoddi4+0x19c>
     dba:	18eb      	adds	r3, r5, r3
     dbc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     dc0:	d204      	bcs.n	dcc <__udivmoddi4+0xe6>
     dc2:	4598      	cmp	r8, r3
     dc4:	d902      	bls.n	dcc <__udivmoddi4+0xe6>
     dc6:	f1ac 0002 	sub.w	r0, ip, #2
     dca:	442b      	add	r3, r5
     dcc:	eba3 0308 	sub.w	r3, r3, r8
     dd0:	b2a4      	uxth	r4, r4
     dd2:	fbb3 fcfe 	udiv	ip, r3, lr
     dd6:	fb0e 331c 	mls	r3, lr, ip, r3
     dda:	fb0c f202 	mul.w	r2, ip, r2
     dde:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     de2:	42a2      	cmp	r2, r4
     de4:	d94f      	bls.n	e86 <__udivmoddi4+0x1a0>
     de6:	192c      	adds	r4, r5, r4
     de8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     dec:	d204      	bcs.n	df8 <__udivmoddi4+0x112>
     dee:	42a2      	cmp	r2, r4
     df0:	d902      	bls.n	df8 <__udivmoddi4+0x112>
     df2:	f1ac 0302 	sub.w	r3, ip, #2
     df6:	442c      	add	r4, r5
     df8:	1aa4      	subs	r4, r4, r2
     dfa:	e7bd      	b.n	d78 <__udivmoddi4+0x92>
     dfc:	f1c7 0c20 	rsb	ip, r7, #32
     e00:	fa28 f90c 	lsr.w	r9, r8, ip
     e04:	fa08 f307 	lsl.w	r3, r8, r7
     e08:	fa20 fc0c 	lsr.w	ip, r0, ip
     e0c:	40bd      	lsls	r5, r7
     e0e:	ea4c 0203 	orr.w	r2, ip, r3
     e12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     e16:	b2ab      	uxth	r3, r5
     e18:	fbb9 fcfe 	udiv	ip, r9, lr
     e1c:	0c11      	lsrs	r1, r2, #16
     e1e:	fb0e 901c 	mls	r0, lr, ip, r9
     e22:	fb0c f803 	mul.w	r8, ip, r3
     e26:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     e2a:	4580      	cmp	r8, r0
     e2c:	fa04 f407 	lsl.w	r4, r4, r7
     e30:	d923      	bls.n	e7a <__udivmoddi4+0x194>
     e32:	1828      	adds	r0, r5, r0
     e34:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     e38:	d204      	bcs.n	e44 <__udivmoddi4+0x15e>
     e3a:	4580      	cmp	r8, r0
     e3c:	d902      	bls.n	e44 <__udivmoddi4+0x15e>
     e3e:	f1ac 0102 	sub.w	r1, ip, #2
     e42:	4428      	add	r0, r5
     e44:	eba0 0008 	sub.w	r0, r0, r8
     e48:	b292      	uxth	r2, r2
     e4a:	fbb0 fcfe 	udiv	ip, r0, lr
     e4e:	fb0e 001c 	mls	r0, lr, ip, r0
     e52:	fb0c f803 	mul.w	r8, ip, r3
     e56:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     e5a:	4598      	cmp	r8, r3
     e5c:	d90f      	bls.n	e7e <__udivmoddi4+0x198>
     e5e:	18eb      	adds	r3, r5, r3
     e60:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     e64:	d204      	bcs.n	e70 <__udivmoddi4+0x18a>
     e66:	4598      	cmp	r8, r3
     e68:	d902      	bls.n	e70 <__udivmoddi4+0x18a>
     e6a:	f1ac 0202 	sub.w	r2, ip, #2
     e6e:	442b      	add	r3, r5
     e70:	eba3 0308 	sub.w	r3, r3, r8
     e74:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     e78:	e791      	b.n	d9e <__udivmoddi4+0xb8>
     e7a:	4661      	mov	r1, ip
     e7c:	e7e2      	b.n	e44 <__udivmoddi4+0x15e>
     e7e:	4662      	mov	r2, ip
     e80:	e7f6      	b.n	e70 <__udivmoddi4+0x18a>
     e82:	4660      	mov	r0, ip
     e84:	e7a2      	b.n	dcc <__udivmoddi4+0xe6>
     e86:	4663      	mov	r3, ip
     e88:	e7b6      	b.n	df8 <__udivmoddi4+0x112>
     e8a:	4543      	cmp	r3, r8
     e8c:	d905      	bls.n	e9a <__udivmoddi4+0x1b4>
     e8e:	b10e      	cbz	r6, e94 <__udivmoddi4+0x1ae>
     e90:	e9c6 0800 	strd	r0, r8, [r6]
     e94:	2100      	movs	r1, #0
     e96:	4608      	mov	r0, r1
     e98:	e775      	b.n	d86 <__udivmoddi4+0xa0>
     e9a:	fab3 fc83 	clz	ip, r3
     e9e:	f1bc 0f00 	cmp.w	ip, #0
     ea2:	d110      	bne.n	ec6 <__udivmoddi4+0x1e0>
     ea4:	4543      	cmp	r3, r8
     ea6:	d301      	bcc.n	eac <__udivmoddi4+0x1c6>
     ea8:	4282      	cmp	r2, r0
     eaa:	d80a      	bhi.n	ec2 <__udivmoddi4+0x1dc>
     eac:	1a84      	subs	r4, r0, r2
     eae:	eb68 0303 	sbc.w	r3, r8, r3
     eb2:	2001      	movs	r0, #1
     eb4:	469e      	mov	lr, r3
     eb6:	2e00      	cmp	r6, #0
     eb8:	d068      	beq.n	f8c <__udivmoddi4+0x2a6>
     eba:	e9c6 4e00 	strd	r4, lr, [r6]
     ebe:	2100      	movs	r1, #0
     ec0:	e761      	b.n	d86 <__udivmoddi4+0xa0>
     ec2:	4660      	mov	r0, ip
     ec4:	e7f7      	b.n	eb6 <__udivmoddi4+0x1d0>
     ec6:	f1cc 0e20 	rsb	lr, ip, #32
     eca:	fa03 f30c 	lsl.w	r3, r3, ip
     ece:	fa22 f40e 	lsr.w	r4, r2, lr
     ed2:	431c      	orrs	r4, r3
     ed4:	fa20 f10e 	lsr.w	r1, r0, lr
     ed8:	fa08 f30c 	lsl.w	r3, r8, ip
     edc:	fa28 fb0e 	lsr.w	fp, r8, lr
     ee0:	4319      	orrs	r1, r3
     ee2:	ea4f 4914 	mov.w	r9, r4, lsr #16
     ee6:	fa02 f50c 	lsl.w	r5, r2, ip
     eea:	fbbb f8f9 	udiv	r8, fp, r9
     eee:	b2a3      	uxth	r3, r4
     ef0:	fb09 bb18 	mls	fp, r9, r8, fp
     ef4:	0c0a      	lsrs	r2, r1, #16
     ef6:	fb08 fa03 	mul.w	sl, r8, r3
     efa:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     efe:	4592      	cmp	sl, r2
     f00:	fa00 f70c 	lsl.w	r7, r0, ip
     f04:	d93e      	bls.n	f84 <__udivmoddi4+0x29e>
     f06:	18a2      	adds	r2, r4, r2
     f08:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     f0c:	d204      	bcs.n	f18 <__udivmoddi4+0x232>
     f0e:	4592      	cmp	sl, r2
     f10:	d902      	bls.n	f18 <__udivmoddi4+0x232>
     f12:	f1a8 0002 	sub.w	r0, r8, #2
     f16:	4422      	add	r2, r4
     f18:	eba2 020a 	sub.w	r2, r2, sl
     f1c:	b289      	uxth	r1, r1
     f1e:	fbb2 f8f9 	udiv	r8, r2, r9
     f22:	fb09 2218 	mls	r2, r9, r8, r2
     f26:	fb08 f303 	mul.w	r3, r8, r3
     f2a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
     f2e:	4293      	cmp	r3, r2
     f30:	d92a      	bls.n	f88 <__udivmoddi4+0x2a2>
     f32:	18a2      	adds	r2, r4, r2
     f34:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
     f38:	d204      	bcs.n	f44 <__udivmoddi4+0x25e>
     f3a:	4293      	cmp	r3, r2
     f3c:	d902      	bls.n	f44 <__udivmoddi4+0x25e>
     f3e:	f1a8 0102 	sub.w	r1, r8, #2
     f42:	4422      	add	r2, r4
     f44:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     f48:	fba0 9805 	umull	r9, r8, r0, r5
     f4c:	1ad2      	subs	r2, r2, r3
     f4e:	4542      	cmp	r2, r8
     f50:	464b      	mov	r3, r9
     f52:	4641      	mov	r1, r8
     f54:	d302      	bcc.n	f5c <__udivmoddi4+0x276>
     f56:	d106      	bne.n	f66 <__udivmoddi4+0x280>
     f58:	454f      	cmp	r7, r9
     f5a:	d204      	bcs.n	f66 <__udivmoddi4+0x280>
     f5c:	ebb9 0305 	subs.w	r3, r9, r5
     f60:	eb68 0104 	sbc.w	r1, r8, r4
     f64:	3801      	subs	r0, #1
     f66:	b18e      	cbz	r6, f8c <__udivmoddi4+0x2a6>
     f68:	1afc      	subs	r4, r7, r3
     f6a:	eb62 0701 	sbc.w	r7, r2, r1
     f6e:	fa07 fe0e 	lsl.w	lr, r7, lr
     f72:	fa24 f30c 	lsr.w	r3, r4, ip
     f76:	ea4e 0303 	orr.w	r3, lr, r3
     f7a:	fa27 f70c 	lsr.w	r7, r7, ip
     f7e:	e9c6 3700 	strd	r3, r7, [r6]
     f82:	e79c      	b.n	ebe <__udivmoddi4+0x1d8>
     f84:	4640      	mov	r0, r8
     f86:	e7c7      	b.n	f18 <__udivmoddi4+0x232>
     f88:	4641      	mov	r1, r8
     f8a:	e7db      	b.n	f44 <__udivmoddi4+0x25e>
     f8c:	4631      	mov	r1, r6
     f8e:	e6fa      	b.n	d86 <__udivmoddi4+0xa0>

00000f90 <strcmp>:
     f90:	f810 2b01 	ldrb.w	r2, [r0], #1
     f94:	f811 3b01 	ldrb.w	r3, [r1], #1
     f98:	2a01      	cmp	r2, #1
     f9a:	bf28      	it	cs
     f9c:	429a      	cmpcs	r2, r3
     f9e:	d0f7      	beq.n	f90 <strcmp>
     fa0:	1ad0      	subs	r0, r2, r3
     fa2:	4770      	bx	lr

00000fa4 <strlen>:
     fa4:	4603      	mov	r3, r0
     fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
     faa:	2a00      	cmp	r2, #0
     fac:	d1fb      	bne.n	fa6 <strlen+0x2>
     fae:	1a18      	subs	r0, r3, r0
     fb0:	3801      	subs	r0, #1
     fb2:	4770      	bx	lr
     fb4:	0000      	movs	r0, r0
	...

00000fb8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
     fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
     fbc:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
     fc0:	ed2d 8b02 	vpush	{d8}
     fc4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
     fc8:	4604      	mov	r4, r0
     fca:	460e      	mov	r6, r1
     fcc:	4615      	mov	r5, r2
    size_t memneeded = sizeof(struct kiss_fft_state)
     fce:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
     fd0:	2b00      	cmp	r3, #0
     fd2:	d13d      	bne.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
     fd4:	4638      	mov	r0, r7
     fd6:	f010 fa49 	bl	1146c <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
     fda:	4605      	mov	r5, r0
     fdc:	b3d0      	cbz	r0, 1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
     fde:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
     fe2:	f505 7a84 	add.w	sl, r5, #264	; 0x108
     fe6:	2e00      	cmp	r6, #0
     fe8:	d044      	beq.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
     fea:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
     fec:	f04f 0a00 	mov.w	sl, #0
    floor_sqrt = floor( sqrt((double)n) );
     ff0:	4620      	mov	r0, r4
     ff2:	f7ff fa27 	bl	444 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
     ff6:	45a2      	cmp	sl, r4
    floor_sqrt = floor( sqrt((double)n) );
     ff8:	4680      	mov	r8, r0
     ffa:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
     ffc:	f106 0608 	add.w	r6, r6, #8
    1000:	da67      	bge.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
    1002:	4650      	mov	r0, sl
    1004:	f7ff fa1e 	bl	444 <__aeabi_i2d>
    1008:	a34b      	add	r3, pc, #300	; (adr r3, 1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
    100a:	e9d3 2300 	ldrd	r2, r3, [r3]
    100e:	f7ff fa83 	bl	518 <__aeabi_dmul>
    1012:	4642      	mov	r2, r8
    1014:	464b      	mov	r3, r9
    1016:	f7ff fba9 	bl	76c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
    101a:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
    101e:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
    1022:	f001 ffad 	bl	2f80 <cos>
    1026:	ec51 0b10 	vmov	r0, r1, d0
    102a:	f7ff fd37 	bl	a9c <__aeabi_d2f>
    102e:	eeb0 0a48 	vmov.f32	s0, s16
    1032:	eef0 0a68 	vmov.f32	s1, s17
    1036:	f846 0c08 	str.w	r0, [r6, #-8]
    103a:	f002 f875 	bl	3128 <sin>
    103e:	ec51 0b10 	vmov	r0, r1, d0
    1042:	f7ff fd2b 	bl	a9c <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
    1046:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
    104a:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
    104e:	e7cf      	b.n	ff0 <kiss_fft_alloc+0x38>
        if (mem != NULL && *lenmem >= memneeded)
    1050:	b952      	cbnz	r2, 1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
        *lenmem = memneeded;
    1052:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
    1054:	f1bb 0f00 	cmp.w	fp, #0
    1058:	d001      	beq.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
        *memallocated = memneeded;
    105a:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
    105e:	ecbd 8b02 	vpop	{d8}
    1062:	4628      	mov	r0, r5
    1064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
    1068:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
    106a:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
    106c:	42ba      	cmp	r2, r7
    106e:	d2b6      	bcs.n	fde <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
    1070:	2500      	movs	r5, #0
    1072:	e7ef      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    floor_sqrt = floor( sqrt((double)n) );
    1074:	4620      	mov	r0, r4
    1076:	f7ff f9e5 	bl	444 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
    107a:	42a6      	cmp	r6, r4
    floor_sqrt = floor( sqrt((double)n) );
    107c:	4680      	mov	r8, r0
    107e:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
    1080:	f10a 0a08 	add.w	sl, sl, #8
    1084:	da25      	bge.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
                double phase = -2*pi*i / nfft;
    1086:	4630      	mov	r0, r6
    1088:	f7ff f9dc 	bl	444 <__aeabi_i2d>
    108c:	a32c      	add	r3, pc, #176	; (adr r3, 1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>)
    108e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1092:	f7ff fa41 	bl	518 <__aeabi_dmul>
    1096:	4642      	mov	r2, r8
    1098:	464b      	mov	r3, r9
    109a:	f7ff fb67 	bl	76c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
    109e:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
    10a2:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
    10a6:	f001 ff6b 	bl	2f80 <cos>
    10aa:	ec51 0b10 	vmov	r0, r1, d0
    10ae:	f7ff fcf5 	bl	a9c <__aeabi_d2f>
    10b2:	eeb0 0a48 	vmov.f32	s0, s16
    10b6:	eef0 0a68 	vmov.f32	s1, s17
    10ba:	f84a 0c08 	str.w	r0, [sl, #-8]
    10be:	f002 f833 	bl	3128 <sin>
    10c2:	ec51 0b10 	vmov	r0, r1, d0
    10c6:	f7ff fce9 	bl	a9c <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
    10ca:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
    10cc:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
    10d0:	e7d0      	b.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
    floor_sqrt = floor( sqrt((double)n) );
    10d2:	4620      	mov	r0, r4
    10d4:	f7ff f9b6 	bl	444 <__aeabi_i2d>
    10d8:	ec41 0b10 	vmov	d0, r0, r1
    10dc:	f00d ff56 	bl	ef8c <sqrt>
    10e0:	f001 ffa2 	bl	3028 <floor>
    10e4:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
    10e8:	f105 0a08 	add.w	sl, r5, #8
    int p=4;
    10ec:	2604      	movs	r6, #4
        while (n % p) {
    10ee:	fb94 f3f6 	sdiv	r3, r4, r6
    10f2:	fb06 4213 	mls	r2, r6, r3, r4
    10f6:	b1aa      	cbz	r2, 1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
            switch (p) {
    10f8:	2e02      	cmp	r6, #2
    10fa:	d00f      	beq.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
    10fc:	2e04      	cmp	r6, #4
    10fe:	d00f      	beq.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
                default: p += 2; break;
    1100:	3602      	adds	r6, #2
            if (p > floor_sqrt)
    1102:	4630      	mov	r0, r6
    1104:	f7ff f99e 	bl	444 <__aeabi_i2d>
    1108:	4602      	mov	r2, r0
    110a:	460b      	mov	r3, r1
    110c:	4640      	mov	r0, r8
    110e:	4649      	mov	r1, r9
    1110:	f7ff fc74 	bl	9fc <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
    1114:	2800      	cmp	r0, #0
    1116:	bf18      	it	ne
    1118:	4626      	movne	r6, r4
    111a:	e7e8      	b.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
                case 2: p = 3; break;
    111c:	2603      	movs	r6, #3
    111e:	e7f0      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
            switch (p) {
    1120:	2602      	movs	r6, #2
    1122:	e7ee      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    } while (n > 1);
    1124:	2b01      	cmp	r3, #1
        *facbuf++ = n;
    1126:	e9ca 6300 	strd	r6, r3, [sl]
        n /= p;
    112a:	461c      	mov	r4, r3
    } while (n > 1);
    112c:	dd92      	ble.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
        *facbuf++ = n;
    112e:	f10a 0a08 	add.w	sl, sl, #8
    1132:	e7dc      	b.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
    1134:	f3af 8000 	nop.w
    1138:	54442d18 	.word	0x54442d18
    113c:	401921fb 	.word	0x401921fb
    1140:	54442d18 	.word	0x54442d18
    1144:	c01921fb 	.word	0xc01921fb

00001148 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
    1148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    114c:	ed2d 8b02 	vpush	{d8}
    1150:	b085      	sub	sp, #20
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
    1152:	2500      	movs	r5, #0

    if (nfft & 1) {
    1154:	f010 0a01 	ands.w	sl, r0, #1
{
    1158:	468b      	mov	fp, r1
    115a:	4614      	mov	r4, r2
    115c:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
    115e:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
    1160:	d009      	beq.n	1176 <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
    1162:	4863      	ldr	r0, [pc, #396]	; (12f0 <kiss_fftr_alloc+0x1a8>)
    1164:	f004 fe44 	bl	5df0 <_Z9ei_printfPKcz>
        return NULL;
    1168:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
    116a:	4620      	mov	r0, r4
    116c:	b005      	add	sp, #20
    116e:	ecbd 8b02 	vpop	{d8}
    1172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
    1176:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
    1178:	ab03      	add	r3, sp, #12
    117a:	f8cd a000 	str.w	sl, [sp]
    117e:	4652      	mov	r2, sl
    1180:	4628      	mov	r0, r5
    1182:	f7ff ff19 	bl	fb8 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
    1186:	eb05 0645 	add.w	r6, r5, r5, lsl #1
    118a:	9b03      	ldr	r3, [sp, #12]
    118c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    1190:	1076      	asrs	r6, r6, #1
    1192:	330c      	adds	r3, #12
    1194:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
    1198:	2f00      	cmp	r7, #0
    119a:	d158      	bne.n	124e <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
    119c:	4630      	mov	r0, r6
    119e:	f010 f965 	bl	1146c <_Z9ei_mallocj>
    11a2:	4604      	mov	r4, r0
    if (!st)
    11a4:	2c00      	cmp	r4, #0
    11a6:	d0e0      	beq.n	116a <kiss_fftr_alloc+0x22>
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
    11a8:	9b03      	ldr	r3, [sp, #12]
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    11aa:	f104 020c 	add.w	r2, r4, #12
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
    11ae:	4413      	add	r3, r2
    11b0:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
    11b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    11b6:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    11b8:	2300      	movs	r3, #0
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
    11ba:	6022      	str	r2, [r4, #0]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    11bc:	4659      	mov	r1, fp
    11be:	9300      	str	r3, [sp, #0]
    11c0:	4628      	mov	r0, r5
    11c2:	ab03      	add	r3, sp, #12
        for (i = 0; i < nfft/2; ++i) {
    11c4:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
    11c8:	f7ff fef6 	bl	fb8 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
    11cc:	107f      	asrs	r7, r7, #1
    if (inverse_fft) {
    11ce:	f1bb 0f00 	cmp.w	fp, #0
    11d2:	d042      	beq.n	125a <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
    11d4:	4557      	cmp	r7, sl
    11d6:	dd7d      	ble.n	12d4 <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
    11d8:	f10a 0a01 	add.w	sl, sl, #1
    11dc:	4650      	mov	r0, sl
    11de:	f7ff f931 	bl	444 <__aeabi_i2d>
    11e2:	4680      	mov	r8, r0
    11e4:	4628      	mov	r0, r5
    11e6:	4689      	mov	r9, r1
    11e8:	f7ff f92c 	bl	444 <__aeabi_i2d>
    11ec:	4602      	mov	r2, r0
    11ee:	460b      	mov	r3, r1
    11f0:	4640      	mov	r0, r8
    11f2:	4649      	mov	r1, r9
    11f4:	f7ff faba 	bl	76c <__aeabi_ddiv>
    11f8:	4b3e      	ldr	r3, [pc, #248]	; (12f4 <kiss_fftr_alloc+0x1ac>)
    11fa:	2200      	movs	r2, #0
    11fc:	f7fe ffd6 	bl	1ac <__adddf3>
            double phase =
    1200:	a337      	add	r3, pc, #220	; (adr r3, 12e0 <kiss_fftr_alloc+0x198>)
    1202:	e9d3 2300 	ldrd	r2, r3, [r3]
    1206:	f7ff f987 	bl	518 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
    120a:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
    120e:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
    1212:	f001 feb5 	bl	2f80 <cos>
    1216:	ea4f 08ca 	mov.w	r8, sl, lsl #3
    121a:	68a3      	ldr	r3, [r4, #8]
    121c:	ec51 0b10 	vmov	r0, r1, d0
    1220:	f1a8 0808 	sub.w	r8, r8, #8
    1224:	eb03 0908 	add.w	r9, r3, r8
    1228:	f7ff fc38 	bl	a9c <__aeabi_d2f>
    122c:	eeb0 0a48 	vmov.f32	s0, s16
    1230:	eef0 0a68 	vmov.f32	s1, s17
    1234:	f8c9 0000 	str.w	r0, [r9]
    1238:	f001 ff76 	bl	3128 <sin>
    123c:	68a3      	ldr	r3, [r4, #8]
    123e:	ec51 0b10 	vmov	r0, r1, d0
    1242:	4498      	add	r8, r3
    1244:	f7ff fc2a 	bl	a9c <__aeabi_d2f>
    1248:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
    124c:	e7c2      	b.n	11d4 <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
    124e:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
    1250:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
    1252:	42b3      	cmp	r3, r6
    1254:	d2a6      	bcs.n	11a4 <kiss_fftr_alloc+0x5c>
        return NULL;
    1256:	4654      	mov	r4, sl
    1258:	e787      	b.n	116a <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
    125a:	455f      	cmp	r7, fp
    125c:	dd3a      	ble.n	12d4 <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
    125e:	f10b 0b01 	add.w	fp, fp, #1
    1262:	4658      	mov	r0, fp
    1264:	f7ff f8ee 	bl	444 <__aeabi_i2d>
    1268:	4680      	mov	r8, r0
    126a:	4628      	mov	r0, r5
    126c:	4689      	mov	r9, r1
    126e:	f7ff f8e9 	bl	444 <__aeabi_i2d>
    1272:	4602      	mov	r2, r0
    1274:	460b      	mov	r3, r1
    1276:	4640      	mov	r0, r8
    1278:	4649      	mov	r1, r9
    127a:	f7ff fa77 	bl	76c <__aeabi_ddiv>
    127e:	4b1d      	ldr	r3, [pc, #116]	; (12f4 <kiss_fftr_alloc+0x1ac>)
    1280:	2200      	movs	r2, #0
    1282:	f7fe ff93 	bl	1ac <__adddf3>
            double phase =
    1286:	a318      	add	r3, pc, #96	; (adr r3, 12e8 <kiss_fftr_alloc+0x1a0>)
    1288:	e9d3 2300 	ldrd	r2, r3, [r3]
    128c:	f7ff f944 	bl	518 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
    1290:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
    1294:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
    1298:	f001 fe72 	bl	2f80 <cos>
    129c:	ea4f 08cb 	mov.w	r8, fp, lsl #3
    12a0:	68a3      	ldr	r3, [r4, #8]
    12a2:	ec51 0b10 	vmov	r0, r1, d0
    12a6:	f1a8 0808 	sub.w	r8, r8, #8
    12aa:	eb03 0908 	add.w	r9, r3, r8
    12ae:	f7ff fbf5 	bl	a9c <__aeabi_d2f>
    12b2:	eeb0 0a48 	vmov.f32	s0, s16
    12b6:	eef0 0a68 	vmov.f32	s1, s17
    12ba:	f8c9 0000 	str.w	r0, [r9]
    12be:	f001 ff33 	bl	3128 <sin>
    12c2:	68a3      	ldr	r3, [r4, #8]
    12c4:	ec51 0b10 	vmov	r0, r1, d0
    12c8:	4498      	add	r8, r3
    12ca:	f7ff fbe7 	bl	a9c <__aeabi_d2f>
    12ce:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
    12d2:	e7c2      	b.n	125a <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
    12d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    12d6:	2b00      	cmp	r3, #0
    12d8:	f43f af47 	beq.w	116a <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
    12dc:	601e      	str	r6, [r3, #0]
    12de:	e744      	b.n	116a <kiss_fftr_alloc+0x22>
    12e0:	54442d18 	.word	0x54442d18
    12e4:	400921fb 	.word	0x400921fb
    12e8:	54442d18 	.word	0x54442d18
    12ec:	c00921fb 	.word	0xc00921fb
    12f0:	00044e28 	.word	0x00044e28
    12f4:	3fe00000 	.word	0x3fe00000

000012f8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    12f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    12fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
    1300:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    1304:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
    1308:	ec57 6b10 	vmov	r6, r7, d0
    130c:	ec59 8b11 	vmov	r8, r9, d1
    1310:	4693      	mov	fp, r2
    1312:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    1314:	f7ff f896 	bl	444 <__aeabi_i2d>
    1318:	4642      	mov	r2, r8
    131a:	4604      	mov	r4, r0
    131c:	460d      	mov	r5, r1
    131e:	464b      	mov	r3, r9
    1320:	4630      	mov	r0, r6
    1322:	4639      	mov	r1, r7
    1324:	f7ff f8f8 	bl	518 <__aeabi_dmul>
    1328:	4602      	mov	r2, r0
    132a:	460b      	mov	r3, r1
    132c:	4620      	mov	r0, r4
    132e:	4629      	mov	r1, r5
    1330:	f7ff f8f2 	bl	518 <__aeabi_dmul>
    1334:	4602      	mov	r2, r0
    1336:	460b      	mov	r3, r1
    1338:	ec43 2b18 	vmov	d8, r2, r3
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    133c:	a30a      	add	r3, pc, #40	; (adr r3, 1368 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>)
    133e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1342:	f7ff fb79 	bl	a38 <__aeabi_dcmpgt>
    1346:	b108      	cbz	r0, 134c <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x54>
	return __b;
    1348:	ed9f 8b07 	vldr	d8, [pc, #28]	; 1368 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    134c:	eeb0 0a48 	vmov.f32	s0, s16
    1350:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
    1354:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1358:	4659      	mov	r1, fp
    135a:	4650      	mov	r0, sl
}
    135c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1360:	f004 bdb0 	b.w	5ec4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
    1364:	f3af 8000 	nop.w
    1368:	ffc00000 	.word	0xffc00000
    136c:	41dfffff 	.word	0x41dfffff

00001370 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1374:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1376:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
    1378:	4615      	mov	r5, r2
    137a:	461e      	mov	r6, r3
    137c:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    137e:	f7ff f873 	bl	468 <__aeabi_f2d>
    1382:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
    1384:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1386:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    1388:	f7ff f86e 	bl	468 <__aeabi_f2d>
    138c:	4602      	mov	r2, r0
    138e:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1390:	4640      	mov	r0, r8
    1392:	4649      	mov	r1, r9
    1394:	f7ff f8c0 	bl	518 <__aeabi_dmul>
                                              double* multiplier) {
    1398:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
    139c:	4680      	mov	r8, r0
    139e:	4689      	mov	r9, r1
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    13a0:	b1d6      	cbz	r6, 13d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
    13a2:	68f0      	ldr	r0, [r6, #12]
    13a4:	f7ff f860 	bl	468 <__aeabi_f2d>
    13a8:	4602      	mov	r2, r0
    13aa:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    13ac:	4640      	mov	r0, r8
    13ae:	4649      	mov	r1, r9
    13b0:	f7fe fefa 	bl	1a8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    13b4:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
    13b6:	68f8      	ldr	r0, [r7, #12]
    13b8:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
    13bc:	f7ff f854 	bl	468 <__aeabi_f2d>
    13c0:	4602      	mov	r2, r0
    13c2:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    13c4:	4640      	mov	r0, r8
    13c6:	4649      	mov	r1, r9
    13c8:	f7ff f9d0 	bl	76c <__aeabi_ddiv>
    13cc:	a311      	add	r3, pc, #68	; (adr r3, 1414 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    13ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    13d2:	f7ff fb1d 	bl	a10 <__aeabi_dcmple>
    13d6:	b150      	cbz	r0, 13ee <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    13d8:	463b      	mov	r3, r7
    13da:	462a      	mov	r2, r5
    13dc:	4651      	mov	r1, sl
    13de:	4620      	mov	r0, r4
    13e0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
    13e4:	b003      	add	sp, #12
    13e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    13ea:	f004 bd87 	b.w	5efc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    13ee:	4b06      	ldr	r3, [pc, #24]	; (1408 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    13f0:	9300      	str	r3, [sp, #0]
    13f2:	4620      	mov	r0, r4
    13f4:	6965      	ldr	r5, [r4, #20]
    13f6:	4a05      	ldr	r2, [pc, #20]	; (140c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
    13f8:	4905      	ldr	r1, [pc, #20]	; (1410 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    13fa:	f44f 73a2 	mov.w	r3, #324	; 0x144
    13fe:	47a8      	blx	r5
}
    1400:	2001      	movs	r0, #1
    1402:	b003      	add	sp, #12
    1404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1408:	00044edd 	.word	0x00044edd
    140c:	00044e6d 	.word	0x00044e6d
    1410:	00044ead 	.word	0x00044ead
    1414:	47ae147b 	.word	0x47ae147b
    1418:	3f947ae1 	.word	0x3f947ae1
    141c:	00000000 	.word	0x00000000

00001420 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    1420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    1424:	680b      	ldr	r3, [r1, #0]
    1426:	ed2d 8b02 	vpush	{d8}
    142a:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    142c:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    142e:	b089      	sub	sp, #36	; 0x24
    1430:	4604      	mov	r4, r0
    1432:	4689      	mov	r9, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    1434:	d011      	beq.n	145a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    1436:	2501      	movs	r5, #1
    1438:	4b9c      	ldr	r3, [pc, #624]	; (16ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    143a:	9301      	str	r3, [sp, #4]
    143c:	e9cd 6502 	strd	r6, r5, [sp, #8]
    1440:	4b9b      	ldr	r3, [pc, #620]	; (16b0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
    1442:	9300      	str	r3, [sp, #0]
    1444:	6944      	ldr	r4, [r0, #20]
    1446:	4a9b      	ldr	r2, [pc, #620]	; (16b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1448:	499b      	ldr	r1, [pc, #620]	; (16b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    144a:	235d      	movs	r3, #93	; 0x5d
    144c:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    144e:	4628      	mov	r0, r5
    1450:	b009      	add	sp, #36	; 0x24
    1452:	ecbd 8b02 	vpop	{d8}
    1456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    145a:	684b      	ldr	r3, [r1, #4]
    145c:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    145e:	2d01      	cmp	r5, #1
    1460:	d00c      	beq.n	147c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    1462:	4b92      	ldr	r3, [pc, #584]	; (16ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
    1464:	9301      	str	r3, [sp, #4]
    1466:	e9cd 5602 	strd	r5, r6, [sp, #8]
    146a:	4b94      	ldr	r3, [pc, #592]	; (16bc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
    146c:	9300      	str	r3, [sp, #0]
    146e:	6944      	ldr	r4, [r0, #20]
    1470:	4a90      	ldr	r2, [pc, #576]	; (16b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1472:	4991      	ldr	r1, [pc, #580]	; (16b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    1474:	235e      	movs	r3, #94	; 0x5e
    1476:	47a0      	blx	r4
    TF_LITE_ENSURE(context,
    1478:	2501      	movs	r5, #1
    147a:	e7e8      	b.n	144e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
    147c:	2200      	movs	r2, #0
    147e:	f010 f871 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    1482:	4680      	mov	r8, r0
    1484:	b940      	cbnz	r0, 1498 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    1486:	4b8e      	ldr	r3, [pc, #568]	; (16c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
    1488:	9300      	str	r3, [sp, #0]
    148a:	6966      	ldr	r6, [r4, #20]
    148c:	2360      	movs	r3, #96	; 0x60
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    148e:	4a89      	ldr	r2, [pc, #548]	; (16b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1490:	498c      	ldr	r1, [pc, #560]	; (16c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    1492:	4620      	mov	r0, r4
    1494:	47b0      	blx	r6
    1496:	e7da      	b.n	144e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    1498:	6883      	ldr	r3, [r0, #8]
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	2b00      	cmp	r3, #0
    149e:	dc04      	bgt.n	14aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    14a0:	4b89      	ldr	r3, [pc, #548]	; (16c8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
    14a2:	9300      	str	r3, [sp, #0]
    14a4:	6966      	ldr	r6, [r4, #20]
    14a6:	2361      	movs	r3, #97	; 0x61
    14a8:	e7f1      	b.n	148e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TfLiteTensor* output = GetOutput(context, node, 0);
    14aa:	2200      	movs	r2, #0
    14ac:	4649      	mov	r1, r9
    14ae:	4620      	mov	r0, r4
    14b0:	f010 f85b 	bl	1156a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    14b4:	4606      	mov	r6, r0
    14b6:	b920      	cbnz	r0, 14c2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
    14b8:	4b84      	ldr	r3, [pc, #528]	; (16cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
    14ba:	9300      	str	r3, [sp, #0]
    14bc:	6966      	ldr	r6, [r4, #20]
    14be:	2363      	movs	r3, #99	; 0x63
    14c0:	e7e5      	b.n	148e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    14c2:	f8d9 7010 	ldr.w	r7, [r9, #16]
    14c6:	b927      	cbnz	r7, 14d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    14c8:	4b81      	ldr	r3, [pc, #516]	; (16d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
    14ca:	9300      	str	r3, [sp, #0]
    14cc:	6966      	ldr	r6, [r4, #20]
    14ce:	2365      	movs	r3, #101	; 0x65
    14d0:	e7dd      	b.n	148e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  if (input->type == kTfLiteInt16) {
    14d2:	f898 3000 	ldrb.w	r3, [r8]
    14d6:	2b07      	cmp	r3, #7
    14d8:	d117      	bne.n	150a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xea>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    14da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    14dc:	f240 4102 	movw	r1, #1026	; 0x402
    14e0:	4620      	mov	r0, r4
    14e2:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    14e4:	b920      	cbnz	r0, 14f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>
    14e6:	4b7b      	ldr	r3, [pc, #492]	; (16d4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
    14e8:	9300      	str	r3, [sp, #0]
    14ea:	6966      	ldr	r6, [r4, #20]
    14ec:	236b      	movs	r3, #107	; 0x6b
    14ee:	e7ce      	b.n	148e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    14f0:	62b8      	str	r0, [r7, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    14f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    14f4:	f240 4102 	movw	r1, #1026	; 0x402
    14f8:	4620      	mov	r0, r4
    14fa:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    14fc:	b920      	cbnz	r0, 1508 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>
    14fe:	4b76      	ldr	r3, [pc, #472]	; (16d8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
    1500:	9300      	str	r3, [sp, #0]
    1502:	6966      	ldr	r6, [r4, #20]
    1504:	236f      	movs	r3, #111	; 0x6f
    1506:	e7c2      	b.n	148e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    op_data->one_over_one_plus_x_lut =
    1508:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
    150a:	7832      	ldrb	r2, [r6, #0]
    TF_LITE_ENSURE(context,
    150c:	f898 3000 	ldrb.w	r3, [r8]
  if (output->type == kTfLiteInt16) {
    1510:	2a07      	cmp	r2, #7
    1512:	d10c      	bne.n	152e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
    TF_LITE_ENSURE(context,
    1514:	2b09      	cmp	r3, #9
    1516:	d03d      	beq.n	1594 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
    1518:	2b07      	cmp	r3, #7
    151a:	d017      	beq.n	154c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    151c:	4b6f      	ldr	r3, [pc, #444]	; (16dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
    151e:	9300      	str	r3, [sp, #0]
    1520:	6965      	ldr	r5, [r4, #20]
    1522:	2375      	movs	r3, #117	; 0x75
    1524:	4a63      	ldr	r2, [pc, #396]	; (16b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1526:	4967      	ldr	r1, [pc, #412]	; (16c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
    1528:	4620      	mov	r0, r4
    152a:	47a8      	blx	r5
    152c:	e7a4      	b.n	1478 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    152e:	429a      	cmp	r2, r3
    1530:	d030      	beq.n	1594 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>
    1532:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1536:	4b6a      	ldr	r3, [pc, #424]	; (16e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    1538:	9301      	str	r3, [sp, #4]
    153a:	4b6a      	ldr	r3, [pc, #424]	; (16e4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    153c:	9300      	str	r3, [sp, #0]
    153e:	6965      	ldr	r5, [r4, #20]
    1540:	2378      	movs	r3, #120	; 0x78
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1542:	4a5c      	ldr	r2, [pc, #368]	; (16b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    1544:	495c      	ldr	r1, [pc, #368]	; (16b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
    1546:	4620      	mov	r0, r4
    1548:	47a8      	blx	r5
    154a:	e795      	b.n	1478 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    154c:	6933      	ldr	r3, [r6, #16]
    154e:	b14b      	cbz	r3, 1564 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x144>
    1550:	2200      	movs	r2, #0
    1552:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1556:	4b64      	ldr	r3, [pc, #400]	; (16e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    1558:	9301      	str	r3, [sp, #4]
    155a:	4b64      	ldr	r3, [pc, #400]	; (16ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    155c:	9300      	str	r3, [sp, #0]
    155e:	6965      	ldr	r5, [r4, #20]
    1560:	237d      	movs	r3, #125	; 0x7d
    1562:	e7ee      	b.n	1542 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    1564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1566:	eddf 0a62 	vldr	s1, [pc, #392]	; 16f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    156a:	4862      	ldr	r0, [pc, #392]	; (16f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    156c:	f240 2201 	movw	r2, #513	; 0x201
    1570:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
    1574:	f007 f890 	bl	8698 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    1578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    157a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 16f0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>
    157e:	485e      	ldr	r0, [pc, #376]	; (16f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
    1580:	f240 2201 	movw	r2, #513	; 0x201
    1584:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    1588:	f007 f886 	bl	8698 <_ZN6tflite7gen_lutEPFffEffPsi>
    op_data->zero_point = output->params.zero_point;
    158c:	6933      	ldr	r3, [r6, #16]
    158e:	61fb      	str	r3, [r7, #28]
    op_data->scale = output->params.scale;
    1590:	68f3      	ldr	r3, [r6, #12]
    1592:	623b      	str	r3, [r7, #32]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    1594:	f898 5000 	ldrb.w	r5, [r8]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
    1598:	f8d9 9014 	ldr.w	r9, [r9, #20]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    159c:	2d09      	cmp	r5, #9
    159e:	d039      	beq.n	1614 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f4>
    15a0:	2d07      	cmp	r5, #7
    15a2:	f040 8129 	bne.w	17f8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3d8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    15a6:	6933      	ldr	r3, [r6, #16]
    15a8:	b14b      	cbz	r3, 15be <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
    15aa:	2200      	movs	r2, #0
    15ac:	e9cd 3202 	strd	r3, r2, [sp, #8]
    15b0:	4b4d      	ldr	r3, [pc, #308]	; (16e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    15b2:	9301      	str	r3, [sp, #4]
    15b4:	4b4d      	ldr	r3, [pc, #308]	; (16ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    15b6:	9300      	str	r3, [sp, #0]
    15b8:	6965      	ldr	r5, [r4, #20]
    15ba:	2325      	movs	r3, #37	; 0x25
    15bc:	e7c1      	b.n	1542 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    15be:	eddf 7a4f 	vldr	s15, [pc, #316]	; 16fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>
    15c2:	ed96 7a03 	vldr	s14, [r6, #12]
    15c6:	eddf 6a4e 	vldr	s13, [pc, #312]	; 1700 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>
    15ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
    15ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15d2:	bfcc      	ite	gt
    15d4:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    15d8:	ee77 7ac7 	vsuble.f32	s15, s15, s14
    15dc:	eef4 7ae6 	vcmpe.f32	s15, s13
    15e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15e4:	f340 80c1 	ble.w	176a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x34a>
    15e8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    15ec:	2200      	movs	r2, #0
    15ee:	ee17 0a10 	vmov	r0, s14
    15f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    15f6:	f7fe ff37 	bl	468 <__aeabi_f2d>
    15fa:	4b42      	ldr	r3, [pc, #264]	; (1704 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    15fc:	9301      	str	r3, [sp, #4]
    15fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1602:	4b41      	ldr	r3, [pc, #260]	; (1708 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    1604:	9300      	str	r3, [sp, #0]
    1606:	6965      	ldr	r5, [r4, #20]
    1608:	2326      	movs	r3, #38	; 0x26
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    160a:	4a2a      	ldr	r2, [pc, #168]	; (16b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    160c:	493f      	ldr	r1, [pc, #252]	; (170c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
    160e:	4620      	mov	r0, r4
    1610:	47a8      	blx	r5
    1612:	e731      	b.n	1478 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
      if (output->type == kTfLiteInt16) {
    1614:	7830      	ldrb	r0, [r6, #0]
    1616:	2807      	cmp	r0, #7
    1618:	d133      	bne.n	1682 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x262>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    161a:	6933      	ldr	r3, [r6, #16]
    161c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    1620:	d009      	beq.n	1636 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x216>
    1622:	4a3b      	ldr	r2, [pc, #236]	; (1710 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
    1624:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1628:	4b3a      	ldr	r3, [pc, #232]	; (1714 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
    162a:	9301      	str	r3, [sp, #4]
    162c:	4b2f      	ldr	r3, [pc, #188]	; (16ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    162e:	9300      	str	r3, [sp, #0]
    1630:	6965      	ldr	r5, [r4, #20]
    1632:	232b      	movs	r3, #43	; 0x2b
    1634:	e785      	b.n	1542 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    1636:	eddf 7a38 	vldr	s15, [pc, #224]	; 1718 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>
    163a:	ed96 7a03 	vldr	s14, [r6, #12]
    163e:	eddf 6a37 	vldr	s13, [pc, #220]	; 171c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>
    1642:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    164a:	bfcc      	ite	gt
    164c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
    1650:	ee77 7ac7 	vsuble.f32	s15, s15, s14
    1654:	eef4 7ae6 	vcmpe.f32	s15, s13
    1658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    165c:	f340 80a6 	ble.w	17ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
    1660:	4b2f      	ldr	r3, [pc, #188]	; (1720 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    1662:	2200      	movs	r2, #0
    1664:	ee17 0a10 	vmov	r0, s14
    1668:	e9cd 2304 	strd	r2, r3, [sp, #16]
    166c:	f7fe fefc 	bl	468 <__aeabi_f2d>
    1670:	4b2c      	ldr	r3, [pc, #176]	; (1724 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    1672:	9301      	str	r3, [sp, #4]
    1674:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1678:	4b23      	ldr	r3, [pc, #140]	; (1708 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    167a:	9300      	str	r3, [sp, #0]
    167c:	6965      	ldr	r5, [r4, #20]
    167e:	232c      	movs	r3, #44	; 0x2c
    1680:	e7c3      	b.n	160a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ea>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    1682:	2809      	cmp	r0, #9
    1684:	d054      	beq.n	1730 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>
    1686:	6967      	ldr	r7, [r4, #20]
    1688:	f008 f8da 	bl	9840 <TfLiteTypeGetName>
    168c:	4606      	mov	r6, r0
    168e:	4628      	mov	r0, r5
    1690:	f008 f8d6 	bl	9840 <TfLiteTypeGetName>
    1694:	4b24      	ldr	r3, [pc, #144]	; (1728 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    1696:	9301      	str	r3, [sp, #4]
    1698:	4b11      	ldr	r3, [pc, #68]	; (16e0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    169a:	9300      	str	r3, [sp, #0]
    169c:	e9cd 6002 	strd	r6, r0, [sp, #8]
    16a0:	4a04      	ldr	r2, [pc, #16]	; (16b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
    16a2:	4922      	ldr	r1, [pc, #136]	; (172c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    16a4:	232f      	movs	r3, #47	; 0x2f
    16a6:	4620      	mov	r0, r4
    16a8:	47b8      	blx	r7
    16aa:	e6e5      	b.n	1478 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    16ac:	0004566b 	.word	0x0004566b
    16b0:	00045643 	.word	0x00045643
    16b4:	000455ff 	.word	0x000455ff
    16b8:	00044f05 	.word	0x00044f05
    16bc:	000455c7 	.word	0x000455c7
    16c0:	0004513a 	.word	0x0004513a
    16c4:	00044ead 	.word	0x00044ead
    16c8:	00045653 	.word	0x00045653
    16cc:	0004515d 	.word	0x0004515d
    16d0:	0004566d 	.word	0x0004566d
    16d4:	00045688 	.word	0x00045688
    16d8:	0004569f 	.word	0x0004569f
    16dc:	00044f9b 	.word	0x00044f9b
    16e0:	0004516f 	.word	0x0004516f
    16e4:	0004517c 	.word	0x0004517c
    16e8:	00045922 	.word	0x00045922
    16ec:	000456c2 	.word	0x000456c2
    16f0:	00000000 	.word	0x00000000
    16f4:	0001216b 	.word	0x0001216b
    16f8:	0001215d 	.word	0x0001215d
    16fc:	38000000 	.word	0x38000000
    1700:	3303126f 	.word	0x3303126f
    1704:	000456fc 	.word	0x000456fc
    1708:	00045708 	.word	0x00045708
    170c:	000456dc 	.word	0x000456dc
    1710:	ffff8000 	.word	0xffff8000
    1714:	0004571d 	.word	0x0004571d
    1718:	37800000 	.word	0x37800000
    171c:	3283126f 	.word	0x3283126f
    1720:	3ef00000 	.word	0x3ef00000
    1724:	00045724 	.word	0x00045724
    1728:	00044fd5 	.word	0x00044fd5
    172c:	00045402 	.word	0x00045402
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1730:	6933      	ldr	r3, [r6, #16]
    1732:	f113 0f80 	cmn.w	r3, #128	; 0x80
    1736:	d00a      	beq.n	174e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x32e>
    1738:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    173c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1740:	4b49      	ldr	r3, [pc, #292]	; (1868 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x448>)
    1742:	9301      	str	r3, [sp, #4]
    1744:	4b49      	ldr	r3, [pc, #292]	; (186c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x44c>)
    1746:	9300      	str	r3, [sp, #0]
    1748:	6965      	ldr	r5, [r4, #20]
    174a:	2330      	movs	r3, #48	; 0x30
    174c:	e6f9      	b.n	1542 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x122>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    174e:	ed96 7a03 	vldr	s14, [r6, #12]
    1752:	eddf 7a47 	vldr	s15, [pc, #284]	; 1870 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x450>
    1756:	eeb4 7a67 	vcmp.f32	s14, s15
    175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    175e:	d025      	beq.n	17ac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x38c>
    1760:	4b44      	ldr	r3, [pc, #272]	; (1874 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x454>)
    1762:	9300      	str	r3, [sp, #0]
    1764:	6965      	ldr	r5, [r4, #20]
    1766:	2331      	movs	r3, #49	; 0x31
    1768:	e6dc      	b.n	1524 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x104>
          static_cast<double>(input->params.scale) *
    176a:	f8d8 000c 	ldr.w	r0, [r8, #12]
    176e:	f7fe fe7b 	bl	468 <__aeabi_f2d>
    1772:	4604      	mov	r4, r0
          static_cast<double>(params->beta) /
    1774:	f8d9 0000 	ldr.w	r0, [r9]
          static_cast<double>(input->params.scale) *
    1778:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    177a:	f7fe fe75 	bl	468 <__aeabi_f2d>
    177e:	4602      	mov	r2, r0
    1780:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    1782:	4620      	mov	r0, r4
    1784:	4629      	mov	r1, r5
    1786:	f7fe fec7 	bl	518 <__aeabi_dmul>
      double input_scale_beta_rescale =
    178a:	a335      	add	r3, pc, #212	; (adr r3, 1860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x440>)
    178c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1790:	f7fe ffec 	bl	76c <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    1794:	f107 0608 	add.w	r6, r7, #8
      double input_scale_beta_rescale =
    1798:	ec41 0b10 	vmov	d0, r0, r1
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    179c:	a907      	add	r1, sp, #28
    179e:	4630      	mov	r0, r6
    17a0:	f004 fb4e 	bl	5e40 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    17a4:	9b07      	ldr	r3, [sp, #28]
    17a6:	60fb      	str	r3, [r7, #12]
  return kTfLiteOk;
    17a8:	2500      	movs	r5, #0
    17aa:	e650      	b.n	144e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      tflite::PreprocessSoftmaxScaling(
    17ac:	f8d8 000c 	ldr.w	r0, [r8, #12]
    17b0:	f7fe fe5a 	bl	468 <__aeabi_f2d>
    17b4:	ec41 0b18 	vmov	d8, r0, r1
    17b8:	f8d9 0000 	ldr.w	r0, [r9]
    17bc:	f7fe fe54 	bl	468 <__aeabi_f2d>
    17c0:	eeb0 1a48 	vmov.f32	s2, s16
    17c4:	eef0 1a68 	vmov.f32	s3, s17
    17c8:	f107 0408 	add.w	r4, r7, #8
    17cc:	ec41 0b10 	vmov	d0, r0, r1
    17d0:	aa07      	add	r2, sp, #28
    17d2:	4621      	mov	r1, r4
    17d4:	2005      	movs	r0, #5
    17d6:	f7ff fd8f 	bl	12f8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    17da:	9907      	ldr	r1, [sp, #28]
    17dc:	60f9      	str	r1, [r7, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    17de:	221f      	movs	r2, #31
    17e0:	2005      	movs	r0, #5
    17e2:	f00f fe49 	bl	11478 <_ZN6tflite20CalculateInputRadiusEiii>
    17e6:	f7fe fe2d 	bl	444 <__aeabi_i2d>
    17ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
    17ee:	4619      	mov	r1, r3
    17f0:	f7ff f92c 	bl	a4c <__aeabi_d2iz>
    17f4:	61b8      	str	r0, [r7, #24]
    17f6:	e7d7      	b.n	17a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    17f8:	2d01      	cmp	r5, #1
    17fa:	d013      	beq.n	1824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x404>
    17fc:	4628      	mov	r0, r5
    17fe:	6966      	ldr	r6, [r4, #20]
    1800:	f008 f81e 	bl	9840 <TfLiteTypeGetName>
    1804:	4605      	mov	r5, r0
    1806:	2001      	movs	r0, #1
    1808:	f008 f81a 	bl	9840 <TfLiteTypeGetName>
    180c:	4b1a      	ldr	r3, [pc, #104]	; (1878 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
    180e:	9301      	str	r3, [sp, #4]
    1810:	4b1a      	ldr	r3, [pc, #104]	; (187c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x45c>)
    1812:	9300      	str	r3, [sp, #0]
    1814:	e9cd 5002 	strd	r5, r0, [sp, #8]
    1818:	4a19      	ldr	r2, [pc, #100]	; (1880 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
    181a:	491a      	ldr	r1, [pc, #104]	; (1884 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
    181c:	234e      	movs	r3, #78	; 0x4e
    181e:	4620      	mov	r0, r4
    1820:	47b0      	blx	r6
    1822:	e629      	b.n	1478 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    1824:	7830      	ldrb	r0, [r6, #0]
    1826:	2801      	cmp	r0, #1
    1828:	d012      	beq.n	1850 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x430>
    182a:	6967      	ldr	r7, [r4, #20]
    182c:	f008 f808 	bl	9840 <TfLiteTypeGetName>
    1830:	4606      	mov	r6, r0
    1832:	4628      	mov	r0, r5
    1834:	f008 f804 	bl	9840 <TfLiteTypeGetName>
    1838:	4b0f      	ldr	r3, [pc, #60]	; (1878 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x458>)
    183a:	9301      	str	r3, [sp, #4]
    183c:	4b12      	ldr	r3, [pc, #72]	; (1888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x468>)
    183e:	9300      	str	r3, [sp, #0]
    1840:	e9cd 6002 	strd	r6, r0, [sp, #8]
    1844:	4a0e      	ldr	r2, [pc, #56]	; (1880 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x460>)
    1846:	490f      	ldr	r1, [pc, #60]	; (1884 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x464>)
    1848:	234f      	movs	r3, #79	; 0x4f
    184a:	4620      	mov	r0, r4
    184c:	47b8      	blx	r7
    184e:	e5fe      	b.n	144e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    op_data->beta = static_cast<double>(params->beta);
    1850:	f8d9 0000 	ldr.w	r0, [r9]
    1854:	f7fe fe08 	bl	468 <__aeabi_f2d>
    1858:	e9c7 0100 	strd	r0, r1, [r7]
    185c:	e7a4      	b.n	17a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
    185e:	bf00      	nop
    1860:	00140014 	.word	0x00140014
    1864:	3f240014 	.word	0x3f240014
    1868:	00045730 	.word	0x00045730
    186c:	000456c2 	.word	0x000456c2
    1870:	3b800000 	.word	0x3b800000
    1874:	00045735 	.word	0x00045735
    1878:	00045757 	.word	0x00045757
    187c:	0004517c 	.word	0x0004517c
    1880:	000455ff 	.word	0x000455ff
    1884:	00045402 	.word	0x00045402
    1888:	0004516f 	.word	0x0004516f
    188c:	00000000 	.word	0x00000000

00001890 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
    /**
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    1890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        const float noise = static_cast<float>(noise_floor_db * -1);
    1894:	4249      	negs	r1, r1
    1896:	ee07 1a90 	vmov	s15, r1
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    189a:	ed2d 8b06 	vpush	{d8-d10}
        const float noise = static_cast<float>(noise_floor_db * -1);
    189e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
    18a2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    18a6:	ee78 7a27 	vadd.f32	s15, s16, s15
    18aa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    18ae:	eec8 9aa7 	vdiv.f32	s19, s17, s15

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
            float f = features_matrix->buffer[ix];
            if (f < 1e-30) {
    18b2:	a73a      	add	r7, pc, #232	; (adr r7, 199c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x10c>)
    18b4:	e9d7 6700 	ldrd	r6, r7, [r7]
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
    18b8:	b083      	sub	sp, #12
    18ba:	4604      	mov	r4, r0
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    18bc:	2500      	movs	r5, #0
                f = 1e-30;
    18be:	ed9f 9a30 	vldr	s18, [pc, #192]	; 1980 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf0>
    {
        int e;
        float f = frexpf(fabsf(a), &e);
        float y = 1.23149591368684f;
        y *= f;
        y += -4.11852516267426f;
    18c2:	ed9f aa30 	vldr	s20, [pc, #192]	; 1984 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf4>
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    18c6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    18ca:	4353      	muls	r3, r2
    18cc:	42ab      	cmp	r3, r5
    18ce:	d94f      	bls.n	1970 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe0>
            float f = features_matrix->buffer[ix];
    18d0:	6823      	ldr	r3, [r4, #0]
    18d2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    18d6:	ea4f 0885 	mov.w	r8, r5, lsl #2
    18da:	f8d3 9000 	ldr.w	r9, [r3]
            if (f < 1e-30) {
    18de:	4648      	mov	r0, r9
    18e0:	f7fe fdc2 	bl	468 <__aeabi_f2d>
    18e4:	4632      	mov	r2, r6
    18e6:	463b      	mov	r3, r7
    18e8:	f7ff f888 	bl	9fc <__aeabi_dcmplt>
        float f = frexpf(fabsf(a), &e);
    18ec:	ee00 9a10 	vmov	s0, r9
                f = 1e-30;
    18f0:	2800      	cmp	r0, #0
    18f2:	bf18      	it	ne
    18f4:	eeb0 0a49 	vmovne.f32	s0, s18
    18f8:	f013 ffea 	bl	158d0 <fabsf>
    18fc:	a801      	add	r0, sp, #4
    18fe:	f00d fa4d 	bl	ed9c <frexpf>
        y += -4.11852516267426f;
    1902:	eddf 7a21 	vldr	s15, [pc, #132]	; 1988 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf8>
        y *= f;
        y += 6.02197014179219f;
    1906:	eddf 6a21 	vldr	s13, [pc, #132]	; 198c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xfc>
        y *= f;
        y += -3.13396450166353f;
    190a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 1990 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x100>
        y += -4.11852516267426f;
    190e:	eee0 7a0a 	vfma.f32	s15, s0, s20
        y += 6.02197014179219f;
    1912:	eee0 6a27 	vfma.f32	s13, s0, s15
        y += -3.13396450166353f;
    1916:	eef0 7a47 	vmov.f32	s15, s14
    191a:	eee0 7a26 	vfma.f32	s15, s0, s13
        y += e;
    191e:	ed9d 7a01 	vldr	s14, [sp, #4]
    1922:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            }
            f = numpy::log10(f);
            f *= 10.0f; // scale by 10
            f += noise;
    1926:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    192a:	ee37 7a27 	vadd.f32	s14, s14, s15
     * @param a Input number
     * @returns Log10 value of a
     */
    __attribute__((always_inline)) static inline float log10(float a)
    {
        return numpy::log2(a) * 0.3010299956639812f;
    192e:	eddf 7a19 	vldr	s15, [pc, #100]	; 1994 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x104>
    1932:	ee27 7a27 	vmul.f32	s14, s14, s15
    1936:	eef0 7a48 	vmov.f32	s15, s16
    193a:	eee7 7a26 	vfma.f32	s15, s14, s13
            f *= noise_scale;
    193e:	ee69 7aa7 	vmul.f32	s15, s19, s15
            // clip again
            if (f < 0.0f) f = 0.0f;
    1942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    194a:	d40e      	bmi.n	196a <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xda>
            else if (f > 1.0f) f = 1.0f;
    194c:	eef4 7a68 	vcmp.f32	s15, s17
    1950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1958:	bfc8      	it	gt
    195a:	eef0 7a47 	vmovgt.f32	s15, s14
            features_matrix->buffer[ix] = f;
    195e:	6823      	ldr	r3, [r4, #0]
    1960:	4443      	add	r3, r8
    1962:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
    1966:	3501      	adds	r5, #1
    1968:	e7ad      	b.n	18c6 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x36>
            if (f < 0.0f) f = 0.0f;
    196a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1998 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x108>
    196e:	e7f6      	b.n	195e <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xce>
        }

        return EIDSP_OK;
    }
    1970:	2000      	movs	r0, #0
    1972:	b003      	add	sp, #12
    1974:	ecbd 8b06 	vpop	{d8-d10}
    1978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    197c:	f3af 8000 	nop.w
    1980:	0da24260 	.word	0x0da24260
    1984:	3f9da1a8 	.word	0x3f9da1a8
    1988:	c083caf5 	.word	0xc083caf5
    198c:	40c0b3fb 	.word	0x40c0b3fb
    1990:	c04892e0 	.word	0xc04892e0
    1994:	3e9a209b 	.word	0x3e9a209b
    1998:	00000000 	.word	0x00000000
    199c:	feebc2a0 	.word	0xfeebc2a0
    19a0:	39b4484b 	.word	0x39b4484b
    19a4:	00000000 	.word	0x00000000

000019a8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
    19a8:	b530      	push	{r4, r5, lr}
    19aa:	ed2d 8b04 	vpush	{d8-d9}
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    19ae:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    static int normalize(matrix_t *matrix) {
    19b2:	b08f      	sub	sp, #60	; 0x3c
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    19b4:	6803      	ldr	r3, [r0, #0]
    19b6:	434a      	muls	r2, r1
    19b8:	a802      	add	r0, sp, #8
    19ba:	2101      	movs	r1, #1
    19bc:	f012 fea4 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>

        matrix_t min_matrix(1, 1);
    19c0:	2201      	movs	r2, #1
    19c2:	2300      	movs	r3, #0
    19c4:	4611      	mov	r1, r2
    19c6:	a806      	add	r0, sp, #24
    19c8:	f012 fe9e 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
        if (!min_matrix.buffer) {
    19cc:	9b06      	ldr	r3, [sp, #24]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d07d      	beq.n	1ace <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x126>
        if (input_matrix->rows != output_matrix->rows) {
    19d2:	9a03      	ldr	r2, [sp, #12]
    19d4:	9b07      	ldr	r3, [sp, #28]
    19d6:	429a      	cmp	r2, r3
    19d8:	d17b      	bne.n	1ad2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        if (output_matrix->cols != 1) {
    19da:	9b08      	ldr	r3, [sp, #32]
    19dc:	2b01      	cmp	r3, #1
    19de:	d178      	bne.n	1ad2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        for (size_t row = 0; row < input_matrix->rows; row++) {
    19e0:	2400      	movs	r4, #0
    19e2:	9b03      	ldr	r3, [sp, #12]
    19e4:	42a3      	cmp	r3, r4
    19e6:	d910      	bls.n	1a0a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x62>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
    19e8:	9904      	ldr	r1, [sp, #16]
    19ea:	9802      	ldr	r0, [sp, #8]
    19ec:	fb01 f504 	mul.w	r5, r1, r4
    19f0:	ab0a      	add	r3, sp, #40	; 0x28
    19f2:	aa01      	add	r2, sp, #4
    19f4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    19f8:	f011 f8d7 	bl	12baa <arm_min_f32>
            output_matrix->buffer[row] = min;
    19fc:	9b06      	ldr	r3, [sp, #24]
    19fe:	9a01      	ldr	r2, [sp, #4]
    1a00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a04:	3401      	adds	r4, #1
            output_matrix->buffer[row] = min;
    1a06:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a08:	e7eb      	b.n	19e2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
        r = min(&temp_matrix, &min_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        matrix_t max_matrix(1, 1);
    1a0a:	2201      	movs	r2, #1
    1a0c:	2300      	movs	r3, #0
    1a0e:	4611      	mov	r1, r2
    1a10:	a80a      	add	r0, sp, #40	; 0x28
    1a12:	f012 fe79 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
        if (!max_matrix.buffer) {
    1a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d054      	beq.n	1ac6 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x11e>
        if (input_matrix->rows != output_matrix->rows) {
    1a1c:	9a03      	ldr	r2, [sp, #12]
    1a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a20:	429a      	cmp	r2, r3
    1a22:	d152      	bne.n	1aca <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        if (output_matrix->cols != 1) {
    1a24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1a26:	2b01      	cmp	r3, #1
    1a28:	d14f      	bne.n	1aca <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a2a:	2400      	movs	r4, #0
    1a2c:	9b03      	ldr	r3, [sp, #12]
    1a2e:	42a3      	cmp	r3, r4
    1a30:	d910      	bls.n	1a54 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xac>
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
    1a32:	9904      	ldr	r1, [sp, #16]
    1a34:	9802      	ldr	r0, [sp, #8]
    1a36:	fb01 f504 	mul.w	r5, r1, r4
    1a3a:	ab01      	add	r3, sp, #4
    1a3c:	466a      	mov	r2, sp
    1a3e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1a42:	f011 f85b 	bl	12afc <arm_max_f32>
            output_matrix->buffer[row] = max;
    1a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a48:	9a00      	ldr	r2, [sp, #0]
    1a4a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a4e:	3401      	adds	r4, #1
            output_matrix->buffer[row] = max;
    1a50:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
    1a52:	e7eb      	b.n	1a2c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x84>
        r = max(&temp_matrix, &max_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
    1a54:	9b06      	ldr	r3, [sp, #24]
    1a56:	edd3 9a00 	vldr	s19, [r3]
    1a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a5c:	ed93 8a00 	vldr	s16, [r3]
    1a60:	ee38 8a69 	vsub.f32	s16, s16, s19
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
    1a64:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    1a68:	ee18 0a10 	vmov	r0, s16
    1a6c:	f7fe fcfc 	bl	468 <__aeabi_f2d>
    1a70:	a31b      	add	r3, pc, #108	; (adr r3, 1ae0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
    1a72:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a76:	f7fe ffc1 	bl	9fc <__aeabi_dcmplt>
    1a7a:	bb08      	cbnz	r0, 1ac0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x118>
    1a7c:	eec9 8a08 	vdiv.f32	s17, s18, s16

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
    1a80:	a802      	add	r0, sp, #8
    1a82:	eeb0 0a69 	vmov.f32	s0, s19
    1a86:	f012 fe54 	bl	14732 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
        if (r != EIDSP_OK) {
    1a8a:	4604      	mov	r4, r0
    1a8c:	b950      	cbnz	r0, 1aa4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
        if (scale == 1.0f) return EIDSP_OK;
    1a8e:	eef4 8a49 	vcmp.f32	s17, s18
    1a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a96:	d005      	beq.n	1aa4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
    1a98:	eeb0 0a68 	vmov.f32	s0, s17
    1a9c:	a802      	add	r0, sp, #8
    1a9e:	f008 f9f5 	bl	9e8c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
    1aa2:	4604      	mov	r4, r0
        matrix_t max_matrix(1, 1);
    1aa4:	a80a      	add	r0, sp, #40	; 0x28
    1aa6:	f00f fc95 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
    1aaa:	a806      	add	r0, sp, #24
    1aac:	f00f fc92 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
    1ab0:	a802      	add	r0, sp, #8
    1ab2:	f00f fc8f 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        return EIDSP_OK;
    }
    1ab6:	4620      	mov	r0, r4
    1ab8:	b00f      	add	sp, #60	; 0x3c
    1aba:	ecbd 8b04 	vpop	{d8-d9}
    1abe:	bd30      	pop	{r4, r5, pc}
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
    1ac0:	eef0 8a49 	vmov.f32	s17, s18
    1ac4:	e7dc      	b.n	1a80 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xd8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1ac6:	4c04      	ldr	r4, [pc, #16]	; (1ad8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
    1ac8:	e7ec      	b.n	1aa4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1aca:	4c04      	ldr	r4, [pc, #16]	; (1adc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
    1acc:	e7ea      	b.n	1aa4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1ace:	4c02      	ldr	r4, [pc, #8]	; (1ad8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
    1ad0:	e7eb      	b.n	1aaa <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1ad2:	4c02      	ldr	r4, [pc, #8]	; (1adc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
    1ad4:	e7e9      	b.n	1aaa <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
    1ad6:	bf00      	nop
    1ad8:	fffffc16 	.word	0xfffffc16
    1adc:	fffffc14 	.word	0xfffffc14
    1ae0:	d2f1a9fc 	.word	0xd2f1a9fc
    1ae4:	3f50624d 	.word	0x3f50624d

00001ae8 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

        return EIDSP_OK;
    }

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
    1ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1aec:	ed2d 8b02 	vpush	{d8}
    1af0:	4607      	mov	r7, r0
    1af2:	b085      	sub	sp, #20
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
    1af4:	00d8      	lsls	r0, r3, #3
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
    1af6:	460d      	mov	r5, r1
    1af8:	4616      	mov	r6, r2
    1afa:	4698      	mov	r8, r3
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
    1afc:	f00f fcb6 	bl	1146c <_Z9ei_mallocj>
        if (!fft_output) {
    1b00:	4604      	mov	r4, r0
    1b02:	b160      	cbz	r0, 1b1e <_ZN2ei5numpy13software_rfftEPfS1_jj+0x36>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
    1b04:	ab03      	add	r3, sp, #12
    1b06:	9300      	str	r3, [sp, #0]
    1b08:	2300      	movs	r3, #0
    1b0a:	4630      	mov	r0, r6
    1b0c:	461a      	mov	r2, r3
    1b0e:	4619      	mov	r1, r3
    1b10:	f7ff fb1a 	bl	1148 <kiss_fftr_alloc>
        if (!cfg) {
    1b14:	4606      	mov	r6, r0
    1b16:	b920      	cbnz	r0, 1b22 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
    1b18:	4620      	mov	r0, r4
    1b1a:	f00f fcab 	bl	11474 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1b1e:	4826      	ldr	r0, [pc, #152]	; (1bb8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd0>)
    1b20:	e040      	b.n	1ba4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xbc>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
    1b22:	4639      	mov	r1, r7
    1b24:	4622      	mov	r2, r4
    1b26:	f004 f8f3 	bl	5d10 <kiss_fftr>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    1b2a:	ed9f 8b21 	vldr	d8, [pc, #132]	; 1bb0 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
    1b2e:	4627      	mov	r7, r4

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    1b30:	f04f 0900 	mov.w	r9, #0
    1b34:	45c1      	cmp	r9, r8
    1b36:	f107 0708 	add.w	r7, r7, #8
    1b3a:	d02c      	beq.n	1b96 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xae>
    1b3c:	f857 0c08 	ldr.w	r0, [r7, #-8]
    1b40:	f7fe fc92 	bl	468 <__aeabi_f2d>
    1b44:	eeb0 1a48 	vmov.f32	s2, s16
    1b48:	eef0 1a68 	vmov.f32	s3, s17
    1b4c:	ec41 0b10 	vmov	d0, r0, r1
    1b50:	f00d f96e 	bl	ee30 <pow>
    1b54:	f857 0c04 	ldr.w	r0, [r7, #-4]
    1b58:	ec5b ab10 	vmov	sl, fp, d0
    1b5c:	f7fe fc84 	bl	468 <__aeabi_f2d>
    1b60:	eeb0 1a48 	vmov.f32	s2, s16
    1b64:	eef0 1a68 	vmov.f32	s3, s17
    1b68:	ec41 0b10 	vmov	d0, r0, r1
    1b6c:	f00d f960 	bl	ee30 <pow>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
    1b70:	4652      	mov	r2, sl
    1b72:	465b      	mov	r3, fp
    1b74:	ec51 0b10 	vmov	r0, r1, d0
    1b78:	f7fe fb18 	bl	1ac <__adddf3>
    1b7c:	ec41 0b10 	vmov	d0, r0, r1
    1b80:	f00d fa04 	bl	ef8c <sqrt>
    1b84:	ec51 0b10 	vmov	r0, r1, d0
    1b88:	f7fe ff88 	bl	a9c <__aeabi_d2f>
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    1b8c:	f109 0901 	add.w	r9, r9, #1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
    1b90:	f845 0b04 	str.w	r0, [r5], #4
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
    1b94:	e7ce      	b.n	1b34 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x4c>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
    1b96:	4630      	mov	r0, r6
    1b98:	f00f fc6c 	bl	11474 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
    1b9c:	4620      	mov	r0, r4
    1b9e:	f00f fc69 	bl	11474 <_Z7ei_freePv>

        return EIDSP_OK;
    1ba2:	2000      	movs	r0, #0
    }
    1ba4:	b005      	add	sp, #20
    1ba6:	ecbd 8b02 	vpop	{d8}
    1baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bae:	bf00      	nop
    1bb0:	00000000 	.word	0x00000000
    1bb4:	40000000 	.word	0x40000000
    1bb8:	fffffc16 	.word	0xfffffc16
    1bbc:	00000000 	.word	0x00000000

00001bc0 <_ZN2ei5numpy4rfftEPKfjPfjj>:
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
    1bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bc4:	b090      	sub	sp, #64	; 0x40
    1bc6:	4680      	mov	r8, r0
    1bc8:	9c18      	ldr	r4, [sp, #96]	; 0x60
        size_t n_fft_out_features = (n_fft / 2) + 1;
    1bca:	0867      	lsrs	r7, r4, #1
    1bcc:	f107 0901 	add.w	r9, r7, #1
        if (output_size != n_fft_out_features) {
    1bd0:	4599      	cmp	r9, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
    1bd2:	460d      	mov	r5, r1
    1bd4:	4616      	mov	r6, r2
        if (output_size != n_fft_out_features) {
    1bd6:	d17e      	bne.n	1cd6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x116>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1bd8:	2300      	movs	r3, #0
    1bda:	4622      	mov	r2, r4
    1bdc:	2101      	movs	r1, #1
    1bde:	a802      	add	r0, sp, #8
    1be0:	f012 fd92 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    1be4:	9802      	ldr	r0, [sp, #8]
    1be6:	2800      	cmp	r0, #0
    1be8:	d073      	beq.n	1cd2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x112>
    1bea:	42a5      	cmp	r5, r4
    1bec:	bf28      	it	cs
    1bee:	4625      	movcs	r5, r4
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
    1bf0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1bf4:	4652      	mov	r2, sl
    1bf6:	4641      	mov	r1, r8
    1bf8:	f013 feb7 	bl	1596a <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
    1bfc:	9802      	ldr	r0, [sp, #8]
    1bfe:	1b62      	subs	r2, r4, r5
    1c00:	0092      	lsls	r2, r2, #2
    1c02:	2100      	movs	r1, #0
    1c04:	4450      	add	r0, sl
    1c06:	f013 fed8 	bl	159ba <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
    1c0a:	2c20      	cmp	r4, #32
    1c0c:	d020      	beq.n	1c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c0e:	2c40      	cmp	r4, #64	; 0x40
    1c10:	d01e      	beq.n	1c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c12:	2c80      	cmp	r4, #128	; 0x80
    1c14:	d01c      	beq.n	1c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c16:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    1c1a:	d019      	beq.n	1c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c1c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1c20:	d016      	beq.n	1c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
    1c22:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    1c26:	d013      	beq.n	1c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c28:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    1c2c:	d010      	beq.n	1c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
    1c2e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    1c32:	d00d      	beq.n	1c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
    1c34:	9802      	ldr	r0, [sp, #8]
    1c36:	464b      	mov	r3, r9
    1c38:	4622      	mov	r2, r4
    1c3a:	4631      	mov	r1, r6
    1c3c:	f7ff ff54 	bl	1ae8 <_ZN2ei5numpy13software_rfftEPfS1_jj>
    1c40:	4605      	mov	r5, r0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1c42:	a802      	add	r0, sp, #8
    1c44:	f00f fbc6 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    }
    1c48:	4628      	mov	r0, r5
    1c4a:	b010      	add	sp, #64	; 0x40
    1c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
    1c50:	b2a1      	uxth	r1, r4
    1c52:	a80a      	add	r0, sp, #40	; 0x28
    1c54:	f007 f922 	bl	8e9c <arm_rfft_fast_init_f32>
            if (status != ARM_MATH_SUCCESS) {
    1c58:	4605      	mov	r5, r0
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d1f1      	bne.n	1c42 <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1c5e:	4603      	mov	r3, r0
    1c60:	4622      	mov	r2, r4
    1c62:	2101      	movs	r1, #1
    1c64:	a806      	add	r0, sp, #24
    1c66:	f012 fd4f 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    1c6a:	9a06      	ldr	r2, [sp, #24]
    1c6c:	b92a      	cbnz	r2, 1c7a <_ZN2ei5numpy4rfftEPKfjPfjj+0xba>
    1c6e:	a806      	add	r0, sp, #24
    1c70:	f00f fbb0 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    1c74:	f2a5 35ea 	subw	r5, r5, #1002	; 0x3ea
    1c78:	e7e3      	b.n	1c42 <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
    1c7a:	462b      	mov	r3, r5
    1c7c:	9902      	ldr	r1, [sp, #8]
    1c7e:	a80a      	add	r0, sp, #40	; 0x28
    1c80:	f010 fe95 	bl	129ae <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
    1c84:	9b06      	ldr	r3, [sp, #24]
    1c86:	681a      	ldr	r2, [r3, #0]
    1c88:	6032      	str	r2, [r6, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    1c8a:	685a      	ldr	r2, [r3, #4]
                output[ix] = rms_result * sqrt(2);
    1c8c:	f20f 0958 	addw	r9, pc, #88	; 0x58
    1c90:	e9d9 8900 	ldrd	r8, r9, [r9]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    1c94:	eb06 0387 	add.w	r3, r6, r7, lsl #2
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1c98:	2401      	movs	r4, #1
            output[n_fft_out_features - 1] = fft_output.buffer[1];
    1c9a:	601a      	str	r2, [r3, #0]
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1c9c:	3604      	adds	r6, #4
    1c9e:	42a7      	cmp	r7, r4
    1ca0:	d913      	bls.n	1cca <_ZN2ei5numpy4rfftEPKfjPfjj+0x10a>
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
    1ca2:	9806      	ldr	r0, [sp, #24]
    1ca4:	aa01      	add	r2, sp, #4
    1ca6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    1caa:	2102      	movs	r1, #2
    1cac:	f007 f930 	bl	8f10 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
    1cb0:	9801      	ldr	r0, [sp, #4]
    1cb2:	f7fe fbd9 	bl	468 <__aeabi_f2d>
    1cb6:	4642      	mov	r2, r8
    1cb8:	464b      	mov	r3, r9
    1cba:	f7fe fc2d 	bl	518 <__aeabi_dmul>
    1cbe:	f7fe feed 	bl	a9c <__aeabi_d2f>
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1cc2:	3401      	adds	r4, #1
                output[ix] = rms_result * sqrt(2);
    1cc4:	f846 0b04 	str.w	r0, [r6], #4
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
    1cc8:	e7e9      	b.n	1c9e <_ZN2ei5numpy4rfftEPKfjPfjj+0xde>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
    1cca:	a806      	add	r0, sp, #24
    1ccc:	f00f fb82 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    1cd0:	e7b7      	b.n	1c42 <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
    1cd2:	4d03      	ldr	r5, [pc, #12]	; (1ce0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x120>)
    1cd4:	e7b5      	b.n	1c42 <_ZN2ei5numpy4rfftEPKfjPfjj+0x82>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
    1cd6:	4d03      	ldr	r5, [pc, #12]	; (1ce4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x124>)
    1cd8:	e7b6      	b.n	1c48 <_ZN2ei5numpy4rfftEPKfjPfjj+0x88>
    1cda:	bf00      	nop
    1cdc:	f3af 8000 	nop.w
    1ce0:	fffffc16 	.word	0xfffffc16
    1ce4:	fffffc11 	.word	0xfffffc11
    1ce8:	667f3bcd 	.word	0x667f3bcd
    1cec:	3ff6a09e 	.word	0x3ff6a09e

00001cf0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
    {
    1cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cf4:	ed2d 8b02 	vpush	{d8}
    1cf8:	b093      	sub	sp, #76	; 0x4c
    1cfa:	e9cd 2300 	strd	r2, r3, [sp]
    1cfe:	4605      	mov	r5, r0
        if (win_size == 0) {
    1d00:	460e      	mov	r6, r1
    1d02:	2900      	cmp	r1, #0
    1d04:	f000 80f8 	beq.w	1ef8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x208>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1d08:	6840      	ldr	r0, [r0, #4]
    1d0a:	68aa      	ldr	r2, [r5, #8]
        uint16_t pad_size = (win_size - 1) / 2;
    1d0c:	3901      	subs	r1, #1
    1d0e:	104f      	asrs	r7, r1, #1
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1d10:	f021 0101 	bic.w	r1, r1, #1
    1d14:	2300      	movs	r3, #0
    1d16:	4401      	add	r1, r0
    1d18:	a802      	add	r0, sp, #8
    1d1a:	f012 fcf5 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    1d1e:	9b02      	ldr	r3, [sp, #8]
    1d20:	2b00      	cmp	r3, #0
    1d22:	f000 80e7 	beq.w	1ef4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x204>
        uint16_t pad_size = (win_size - 1) / 2;
    1d26:	b2bf      	uxth	r7, r7
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
    1d28:	463b      	mov	r3, r7
    1d2a:	463a      	mov	r2, r7
    1d2c:	a902      	add	r1, sp, #8
    1d2e:	4628      	mov	r0, r5
    1d30:	f008 fa02 	bl	a138 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
    1d34:	4604      	mov	r4, r0
    1d36:	2800      	cmp	r0, #0
    1d38:	d173      	bne.n	1e22 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x132>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    1d3a:	4603      	mov	r3, r0
    1d3c:	9904      	ldr	r1, [sp, #16]
    1d3e:	2201      	movs	r2, #1
    1d40:	a806      	add	r0, sp, #24
    1d42:	f012 fce1 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    1d46:	9b06      	ldr	r3, [sp, #24]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	f000 80d1 	beq.w	1ef0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x200>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    1d4e:	4623      	mov	r3, r4
    1d50:	9904      	ldr	r1, [sp, #16]
    1d52:	2201      	movs	r2, #1
    1d54:	a80a      	add	r0, sp, #40	; 0x28
    1d56:	f012 fcd7 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    1d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	f000 80c5 	beq.w	1eec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1fc>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    1d62:	686b      	ldr	r3, [r5, #4]
    1d64:	42a3      	cmp	r3, r4
    1d66:	d967      	bls.n	1e38 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x148>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1d68:	9a04      	ldr	r2, [sp, #16]
    1d6a:	9b02      	ldr	r3, [sp, #8]
    1d6c:	fb02 f104 	mul.w	r1, r2, r4
    1d70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1d74:	a80e      	add	r0, sp, #56	; 0x38
    1d76:	4631      	mov	r1, r6
    1d78:	f012 fcc6 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    1d7c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    1d80:	f1b8 0f00 	cmp.w	r8, #0
    1d84:	d043      	beq.n	1e0e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x11e>
        if (input_matrix->cols != output_matrix->rows) {
    1d86:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1d88:	9b07      	ldr	r3, [sp, #28]
    1d8a:	429a      	cmp	r2, r3
    1d8c:	d152      	bne.n	1e34 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x144>
        if (output_matrix->cols != 1) {
    1d8e:	9b08      	ldr	r3, [sp, #32]
    1d90:	2b01      	cmp	r3, #1
    1d92:	d14f      	bne.n	1e34 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x144>
    1d94:	9906      	ldr	r1, [sp, #24]
            for (size_t row = 0; row < input_matrix->rows; row++) {
    1d96:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    1d9a:	ea4f 0982 	mov.w	r9, r2, lsl #2
            output_matrix->buffer[col] = sum / input_matrix->rows;
    1d9e:	468e      	mov	lr, r1
        for (size_t col = 0; col < input_matrix->cols; col++) {
    1da0:	2300      	movs	r3, #0
    1da2:	429a      	cmp	r2, r3
    1da4:	d00f      	beq.n	1dc6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xd6>
            float sum = 0.0f;
    1da6:	eddf 7a58 	vldr	s15, [pc, #352]	; 1f08 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x218>
    1daa:	eb08 0083 	add.w	r0, r8, r3, lsl #2
            for (size_t row = 0; row < input_matrix->rows; row++) {
    1dae:	f04f 0c00 	mov.w	ip, #0
    1db2:	45e2      	cmp	sl, ip
    1db4:	d01c      	beq.n	1df0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x100>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
    1db6:	ed90 7a00 	vldr	s14, [r0]
            for (size_t row = 0; row < input_matrix->rows; row++) {
    1dba:	f10c 0c01 	add.w	ip, ip, #1
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
    1dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
            for (size_t row = 0; row < input_matrix->rows; row++) {
    1dc2:	4448      	add	r0, r9
    1dc4:	e7f5      	b.n	1db2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc2>
    1dc6:	68a8      	ldr	r0, [r5, #8]
    1dc8:	0083      	lsls	r3, r0, #2
    1dca:	4363      	muls	r3, r4
    1dcc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1dd0:	1a5b      	subs	r3, r3, r1
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
    1dd2:	4288      	cmp	r0, r1
    1dd4:	d016      	beq.n	1e04 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x114>
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
    1dd6:	682a      	ldr	r2, [r5, #0]
    1dd8:	eb01 0c03 	add.w	ip, r1, r3
    1ddc:	4462      	add	r2, ip
    1dde:	ecb1 7a01 	vldmia	r1!, {s14}
    1de2:	edd2 7a00 	vldr	s15, [r2]
    1de6:	ee77 7ac7 	vsub.f32	s15, s15, s14
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
    1dea:	edc2 7a00 	vstr	s15, [r2]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
    1dee:	e7f0      	b.n	1dd2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xe2>
            output_matrix->buffer[col] = sum / input_matrix->rows;
    1df0:	ee07 aa10 	vmov	s14, sl
    1df4:	eef8 6a47 	vcvt.f32.u32	s13, s14
        for (size_t col = 0; col < input_matrix->cols; col++) {
    1df8:	3301      	adds	r3, #1
            output_matrix->buffer[col] = sum / input_matrix->rows;
    1dfa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    1dfe:	ecae 7a01 	vstmia	lr!, {s14}
        for (size_t col = 0; col < input_matrix->cols; col++) {
    1e02:	e7ce      	b.n	1da2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xb2>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1e04:	a80e      	add	r0, sp, #56	; 0x38
    1e06:	f00f fae5 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    1e0a:	3401      	adds	r4, #1
    1e0c:	e7a9      	b.n	1d62 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x72>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1e0e:	4c3f      	ldr	r4, [pc, #252]	; (1f0c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    1e10:	a80e      	add	r0, sp, #56	; 0x38
    1e12:	f00f fadf 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    1e16:	a80a      	add	r0, sp, #40	; 0x28
    1e18:	f00f fadc 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    1e1c:	a806      	add	r0, sp, #24
    1e1e:	f00f fad9 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1e22:	a802      	add	r0, sp, #8
    1e24:	f00f fad6 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    }
    1e28:	4620      	mov	r0, r4
    1e2a:	b013      	add	sp, #76	; 0x4c
    1e2c:	ecbd 8b02 	vpop	{d8}
    1e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    1e34:	4c36      	ldr	r4, [pc, #216]	; (1f10 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x220>)
    1e36:	e7eb      	b.n	1e10 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x120>
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
    1e38:	463b      	mov	r3, r7
    1e3a:	463a      	mov	r2, r7
    1e3c:	a902      	add	r1, sp, #8
    1e3e:	4628      	mov	r0, r5
    1e40:	f008 f97a 	bl	a138 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
    1e44:	4604      	mov	r4, r0
    1e46:	2800      	cmp	r0, #0
    1e48:	d1e5      	bne.n	1e16 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    1e4a:	4680      	mov	r8, r0
    1e4c:	686b      	ldr	r3, [r5, #4]
    1e4e:	4543      	cmp	r3, r8
    1e50:	d944      	bls.n	1edc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1ec>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1e52:	9a04      	ldr	r2, [sp, #16]
    1e54:	9b02      	ldr	r3, [sp, #8]
    1e56:	fb02 f108 	mul.w	r1, r2, r8
    1e5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e5e:	a80e      	add	r0, sp, #56	; 0x38
    1e60:	4631      	mov	r1, r6
    1e62:	f012 fc51 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    1e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e68:	b393      	cbz	r3, 1ed0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e0>
            if (variance_normalization == true) {
    1e6a:	9b00      	ldr	r3, [sp, #0]
    1e6c:	b353      	cbz	r3, 1ec4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1d4>
        return std_axis0_CMSIS(input_matrix, output_matrix);
    1e6e:	a90a      	add	r1, sp, #40	; 0x28
    1e70:	a80e      	add	r0, sp, #56	; 0x38
    1e72:	f008 fa85 	bl	a380 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
                if (ret != EIDSP_OK) {
    1e76:	4607      	mov	r7, r0
    1e78:	bb58      	cbnz	r0, 1ed2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e2>
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
    1e7a:	9f04      	ldr	r7, [sp, #16]
    1e7c:	682b      	ldr	r3, [r5, #0]
    1e7e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    1e82:	00bf      	lsls	r7, r7, #2
    1e84:	fb08 3907 	mla	r9, r8, r7, r3
    1e88:	4457      	add	r7, sl
                for (size_t col = 0; col < vec_pad.cols; col++) {
    1e8a:	45ba      	cmp	sl, r7
    1e8c:	d01a      	beq.n	1ec4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1d4>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    1e8e:	f8d9 0000 	ldr.w	r0, [r9]
                                             (window_variance.buffer[col] + 1e-10);
    1e92:	f85a bb04 	ldr.w	fp, [sl], #4
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    1e96:	f7fe fae7 	bl	468 <__aeabi_f2d>
    1e9a:	ec41 0b18 	vmov	d8, r0, r1
                                             (window_variance.buffer[col] + 1e-10);
    1e9e:	4658      	mov	r0, fp
    1ea0:	f7fe fae2 	bl	468 <__aeabi_f2d>
    1ea4:	a316      	add	r3, pc, #88	; (adr r3, 1f00 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x210>)
    1ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1eaa:	f7fe f97f 	bl	1ac <__adddf3>
    1eae:	4602      	mov	r2, r0
    1eb0:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
    1eb2:	ec51 0b18 	vmov	r0, r1, d8
    1eb6:	f7fe fc59 	bl	76c <__aeabi_ddiv>
    1eba:	f7fe fdef 	bl	a9c <__aeabi_d2f>
    1ebe:	f849 0b04 	str.w	r0, [r9], #4
                for (size_t col = 0; col < vec_pad.cols; col++) {
    1ec2:	e7e2      	b.n	1e8a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1ec4:	a80e      	add	r0, sp, #56	; 0x38
    1ec6:	f00f fa85 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
    1eca:	f108 0801 	add.w	r8, r8, #1
    1ece:	e7bd      	b.n	1e4c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x15c>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
    1ed0:	4f0e      	ldr	r7, [pc, #56]	; (1f0c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    1ed2:	a80e      	add	r0, sp, #56	; 0x38
    1ed4:	f00f fa7e 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    1ed8:	463c      	mov	r4, r7
    1eda:	e79c      	b.n	1e16 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
        if (scale) {
    1edc:	9b01      	ldr	r3, [sp, #4]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d099      	beq.n	1e16 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
            ret = numpy::normalize(features_matrix);
    1ee2:	4628      	mov	r0, r5
    1ee4:	f7ff fd60 	bl	19a8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
    1ee8:	4604      	mov	r4, r0
            if (ret != EIDSP_OK) {
    1eea:	e794      	b.n	1e16 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
    1eec:	4c07      	ldr	r4, [pc, #28]	; (1f0c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    1eee:	e792      	b.n	1e16 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
    1ef0:	4c06      	ldr	r4, [pc, #24]	; (1f0c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    1ef2:	e793      	b.n	1e1c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x12c>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
    1ef4:	4c05      	ldr	r4, [pc, #20]	; (1f0c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x21c>)
    1ef6:	e794      	b.n	1e22 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x132>
            return EIDSP_OK;
    1ef8:	460c      	mov	r4, r1
    1efa:	e795      	b.n	1e28 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x138>
    1efc:	f3af 8000 	nop.w
    1f00:	d9d7bdbb 	.word	0xd9d7bdbb
    1f04:	3ddb7cdf 	.word	0x3ddb7cdf
    1f08:	00000000 	.word	0x00000000
    1f0c:	fffffc16 	.word	0xfffffc16
    1f10:	fffffc14 	.word	0xfffffc14
    1f14:	00000000 	.word	0x00000000

00001f18 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
    1f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f1c:	ed2d 8b06 	vpush	{d8-d10}
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
    1f20:	1c8e      	adds	r6, r1, #2
    static int filterbanks(
    1f22:	b08f      	sub	sp, #60	; 0x3c
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
    1f24:	ea4f 0986 	mov.w	r9, r6, lsl #2
    static int filterbanks(
    1f28:	ee08 3a90 	vmov	s17, r3
    1f2c:	4604      	mov	r4, r0
    1f2e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
    1f32:	9102      	str	r1, [sp, #8]
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
    1f34:	4648      	mov	r0, r9
    static int filterbanks(
    1f36:	4615      	mov	r5, r2
    1f38:	9303      	str	r3, [sp, #12]
        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
    1f3a:	f00f fa97 	bl	1146c <_Z9ei_mallocj>
        if (!mels) {
    1f3e:	4607      	mov	r7, r0
    1f40:	b378      	cbz	r0, 1fa2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
    1f42:	6863      	ldr	r3, [r4, #4]
    1f44:	9a02      	ldr	r2, [sp, #8]
    1f46:	4293      	cmp	r3, r2
    1f48:	f040 819c 	bne.w	2284 <CONFIG_MAIN_STACK_SIZE+0x284>
    1f4c:	68a2      	ldr	r2, [r4, #8]
    1f4e:	42aa      	cmp	r2, r5
    1f50:	f040 8198 	bne.w	2284 <CONFIG_MAIN_STACK_SIZE+0x284>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
    1f54:	435a      	muls	r2, r3
    1f56:	2100      	movs	r1, #0
    1f58:	6820      	ldr	r0, [r4, #0]
    1f5a:	f013 fd2e 	bl	159ba <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
    1f5e:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
    1f62:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    1f66:	eeb0 0a48 	vmov.f32	s0, s16
    1f6a:	f008 fa5d 	bl	a428 <_ZN2ei8speechpy9functions16frequency_to_melEf>
    1f6e:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
    1f72:	eeb8 9a67 	vcvt.f32.u32	s18, s15
    1f76:	eef0 9a40 	vmov.f32	s19, s0
    1f7a:	eeb0 0a49 	vmov.f32	s0, s18
    1f7e:	f008 fa53 	bl	a428 <_ZN2ei8speechpy9functions16frequency_to_melEf>
    1f82:	4630      	mov	r0, r6
    1f84:	eef0 0a40 	vmov.f32	s1, s0
    1f88:	4639      	mov	r1, r7
    1f8a:	eeb0 0a69 	vmov.f32	s0, s19
    1f8e:	f012 fb8d 	bl	146ac <_ZN2ei5numpy8linspaceEffjPf.isra.0>
            num_filter + 2,
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
    1f92:	4648      	mov	r0, r9
    1f94:	f00f fa6a 	bl	1146c <_Z9ei_mallocj>
        if (!hertz) {
    1f98:	4606      	mov	r6, r0
    1f9a:	b920      	cbnz	r0, 1fa6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8e>
            ei_dsp_free(mels, mels_mem_size);
    1f9c:	4638      	mov	r0, r7
        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
        if (!freq_index) {
            ei_dsp_free(hertz, hertz_mem_size);
    1f9e:	f00f fa69 	bl	11474 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    1fa2:	48bb      	ldr	r0, [pc, #748]	; (2290 <CONFIG_MAIN_STACK_SIZE+0x290>)
    1fa4:	e169      	b.n	227a <CONFIG_MAIN_STACK_SIZE+0x27a>
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
    1fa6:	eddf 9abb 	vldr	s19, [pc, #748]	; 2294 <CONFIG_MAIN_STACK_SIZE+0x294>
    1faa:	ed9f aabb 	vldr	s20, [pc, #748]	; 2298 <CONFIG_MAIN_STACK_SIZE+0x298>
    1fae:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    1fb2:	9b02      	ldr	r3, [sp, #8]
    1fb4:	f103 0801 	add.w	r8, r3, #1
    1fb8:	fa1f f38a 	uxth.w	r3, sl
    1fbc:	4598      	cmp	r8, r3
    1fbe:	db34      	blt.n	202a <CONFIG_MAIN_STACK_SIZE+0x2a>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
    1fc0:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    1fc4:	ed92 0a00 	vldr	s0, [r2]
    1fc8:	9301      	str	r3, [sp, #4]
  { return __builtin_expf(__x); }
    1fca:	ee80 0a29 	vdiv.f32	s0, s0, s19
    1fce:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
    1fd2:	f00d f80f 	bl	eff4 <expf>
            if (ix == num_filter + 2 - 1) {
    1fd6:	9b01      	ldr	r3, [sp, #4]
    1fd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1fdc:	ee30 0a67 	vsub.f32	s0, s0, s15
    1fe0:	ee20 0a0a 	vmul.f32	s0, s0, s20
                hertz[ix] = low_freq;
    1fe4:	eeb4 8a40 	vcmp.f32	s16, s0
    1fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1fec:	bfc8      	it	gt
    1fee:	eeb0 0a48 	vmovgt.f32	s0, s16
                hertz[ix] = high_freq;
    1ff2:	eeb4 9a40 	vcmp.f32	s18, s0
    1ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1ffa:	bf48      	it	mi
    1ffc:	eeb0 0a49 	vmovmi.f32	s0, s18
            if (ix == num_filter + 2 - 1) {
    2000:	4598      	cmp	r8, r3
    2002:	d004      	beq.n	200e <CONFIG_MAIN_STACK_SIZE+0xe>
    2004:	ed8b 0a00 	vstr	s0, [fp]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    2008:	f10a 0a01 	add.w	sl, sl, #1
    200c:	e7d1      	b.n	1fb2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x9a>
                hertz[ix] -= 0.001;
    200e:	ee10 0a10 	vmov	r0, s0
    2012:	f7fe fa29 	bl	468 <__aeabi_f2d>
    2016:	a39c      	add	r3, pc, #624	; (adr r3, 2288 <CONFIG_MAIN_STACK_SIZE+0x288>)
    2018:	e9d3 2300 	ldrd	r2, r3, [r3]
    201c:	f7fe f8c4 	bl	1a8 <__aeabi_dsub>
    2020:	f7fe fd3c 	bl	a9c <__aeabi_d2f>
    2024:	f8cb 0000 	str.w	r0, [fp]
    2028:	e7ee      	b.n	2008 <CONFIG_MAIN_STACK_SIZE+0x8>
        ei_dsp_free(mels, mels_mem_size);
    202a:	4638      	mov	r0, r7
    202c:	f00f fa22 	bl	11474 <_Z7ei_freePv>
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
    2030:	4648      	mov	r0, r9
    2032:	f00f fa1b 	bl	1146c <_Z9ei_mallocj>
        if (!freq_index) {
    2036:	4607      	mov	r7, r0
    2038:	b908      	cbnz	r0, 203e <CONFIG_MAIN_STACK_SIZE+0x3e>
            ei_dsp_free(hertz, hertz_mem_size);
    203a:	4630      	mov	r0, r6
    203c:	e7af      	b.n	1f9e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x86>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
    203e:	3501      	adds	r5, #1
    2040:	ee07 5a90 	vmov	s15, r5
    2044:	eef8 8a68 	vcvt.f32.u32	s17, s17
    2048:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    204c:	f04f 0900 	mov.w	r9, #0
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
    2050:	eb06 0389 	add.w	r3, r6, r9, lsl #2
    2054:	ed93 0a00 	vldr	s0, [r3]
    2058:	ee28 0a00 	vmul.f32	s0, s16, s0
  { return __builtin_floorf(__x); }
    205c:	ee80 0a28 	vdiv.f32	s0, s0, s17
    2060:	f00c fe5a 	bl	ed18 <floorf>
    2064:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    2068:	ee10 3a10 	vmov	r3, s0
    206c:	f847 3029 	str.w	r3, [r7, r9, lsl #2]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
    2070:	f109 0901 	add.w	r9, r9, #1
    2074:	fa1f f989 	uxth.w	r9, r9
    2078:	45c8      	cmp	r8, r9
    207a:	dae9      	bge.n	2050 <CONFIG_MAIN_STACK_SIZE+0x50>
        }
        ei_dsp_free(hertz, hertz_mem_size);
    207c:	4630      	mov	r0, r6
    207e:	f00f f9f9 	bl	11474 <_Z7ei_freePv>
            if (value < quantized_values_one_zero[mid]) {
    2082:	f8df b218 	ldr.w	fp, [pc, #536]	; 229c <CONFIG_MAIN_STACK_SIZE+0x29c>
    2086:	46b8      	mov	r8, r7

        for (size_t i = 0; i < num_filter; i++) {
    2088:	2500      	movs	r5, #0
    208a:	9b02      	ldr	r3, [sp, #8]
    208c:	42ab      	cmp	r3, r5
    208e:	f240 80e9 	bls.w	2264 <CONFIG_MAIN_STACK_SIZE+0x264>
            int left = freq_index[i];
    2092:	f8d8 3000 	ldr.w	r3, [r8]
    2096:	9301      	str	r3, [sp, #4]
            int middle = freq_index[i + 1];
    2098:	1c6b      	adds	r3, r5, #1
    209a:	9304      	str	r3, [sp, #16]
            int right = freq_index[i + 2];
    209c:	f8d8 6008 	ldr.w	r6, [r8, #8]

            EI_DSP_MATRIX(z, 1, (right - left + 1));
    20a0:	9b01      	ldr	r3, [sp, #4]
            int middle = freq_index[i + 1];
    20a2:	ed98 8a01 	vldr	s16, [r8, #4]
            EI_DSP_MATRIX(z, 1, (right - left + 1));
    20a6:	eba6 0903 	sub.w	r9, r6, r3
    20aa:	f109 0201 	add.w	r2, r9, #1
    20ae:	2101      	movs	r1, #1
    20b0:	2300      	movs	r3, #0
    20b2:	a806      	add	r0, sp, #24
    20b4:	9205      	str	r2, [sp, #20]
    20b6:	f012 fb27 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    20ba:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
            int middle = freq_index[i + 1];
    20be:	f108 0804 	add.w	r8, r8, #4
            EI_DSP_MATRIX(z, 1, (right - left + 1));
    20c2:	b919      	cbnz	r1, 20cc <CONFIG_MAIN_STACK_SIZE+0xcc>
    20c4:	a806      	add	r0, sp, #24
    20c6:	f00f f985 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    20ca:	e76a      	b.n	1fa2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb+0x8a>
            if (!z.buffer) {
                ei_dsp_free(freq_index, freq_index_mem_size);
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
    20cc:	eddd 7a01 	vldr	s15, [sp, #4]
    20d0:	9205      	str	r2, [sp, #20]
    20d2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    20d6:	ee07 6a90 	vmov	s15, r6
    20da:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    20de:	4610      	mov	r0, r2
    20e0:	eef0 0a49 	vmov.f32	s1, s18
    20e4:	eeb0 0a68 	vmov.f32	s0, s17
    20e8:	f012 fae0 	bl	146ac <_ZN2ei5numpy8linspaceEffjPf.isra.0>
     * @param left
     * @param middle
     * @param right
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
        EI_DSP_MATRIX(out, 1, x_size);
    20ec:	2101      	movs	r1, #1
    20ee:	9a05      	ldr	r2, [sp, #20]
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
    20f0:	f8dd a018 	ldr.w	sl, [sp, #24]
    20f4:	2300      	movs	r3, #0
    20f6:	a80a      	add	r0, sp, #40	; 0x28
    20f8:	f012 fb06 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    20fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    20fe:	2900      	cmp	r1, #0
    2100:	d046      	beq.n	2190 <CONFIG_MAIN_STACK_SIZE+0x190>

        for (size_t ix = 0; ix < x_size; ix++) {
            if (x[ix] > left && x[ix] <= middle) {
                out.buffer[ix] = (x[ix] - left) / (middle - left);
    2102:	9a01      	ldr	r2, [sp, #4]
    2104:	ee18 ea10 	vmov	lr, s16
    2108:	ebae 0e02 	sub.w	lr, lr, r2
            }

            if (x[ix] < right && middle <= x[ix]) {
                out.buffer[ix] = (right - x[ix]) / (right - middle);
    210c:	ee18 2a10 	vmov	r2, s16
    2110:	f10a 0c04 	add.w	ip, sl, #4
    2114:	1ab6      	subs	r6, r6, r2
    2116:	9a05      	ldr	r2, [sp, #20]
    2118:	460b      	mov	r3, r1
    211a:	4650      	mov	r0, sl
    211c:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
        for (size_t ix = 0; ix < x_size; ix++) {
    2120:	4584      	cmp	ip, r0
    2122:	d031      	beq.n	2188 <CONFIG_MAIN_STACK_SIZE+0x188>
            if (x[ix] > left && x[ix] <= middle) {
    2124:	edd0 7a00 	vldr	s15, [r0]
    2128:	eef4 8ae7 	vcmpe.f32	s17, s15
    212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2130:	d510      	bpl.n	2154 <CONFIG_MAIN_STACK_SIZE+0x154>
    2132:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
    2136:	eef4 7ac7 	vcmpe.f32	s15, s14
    213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    213e:	d809      	bhi.n	2154 <CONFIG_MAIN_STACK_SIZE+0x154>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
    2140:	ee07 ea10 	vmov	s14, lr
    2144:	ee77 7ae8 	vsub.f32	s15, s15, s17
    2148:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    214c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2150:	ed83 7a00 	vstr	s14, [r3]
            if (x[ix] < right && middle <= x[ix]) {
    2154:	ecf0 7a01 	vldmia	r0!, {s15}
    2158:	eeb4 9ae7 	vcmpe.f32	s18, s15
    215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2160:	dd10      	ble.n	2184 <CONFIG_MAIN_STACK_SIZE+0x184>
    2162:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
    2166:	eef4 7ac7 	vcmpe.f32	s15, s14
    216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    216e:	db09      	blt.n	2184 <CONFIG_MAIN_STACK_SIZE+0x184>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
    2170:	ee07 6a10 	vmov	s14, r6
    2174:	ee79 7a67 	vsub.f32	s15, s18, s15
    2178:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    217c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    2180:	ed83 7a00 	vstr	s14, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
    2184:	3304      	adds	r3, #4
    2186:	e7cb      	b.n	2120 <CONFIG_MAIN_STACK_SIZE+0x120>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
    2188:	0092      	lsls	r2, r2, #2
    218a:	4650      	mov	r0, sl
    218c:	f013 fbed 	bl	1596a <memcpy>
        EI_DSP_MATRIX(out, 1, x_size);
    2190:	a80a      	add	r0, sp, #40	; 0x28
    2192:	f00f f91f 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
    2196:	2200      	movs	r2, #0
        if (value > quantized_values_one_zero[length - 1]) {
    2198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    219c:	4591      	cmp	r9, r2
    219e:	db5c      	blt.n	225a <CONFIG_MAIN_STACK_SIZE+0x25a>
                size_t index = (i * filterbanks->cols) + (left + zx);
    21a0:	9901      	ldr	r1, [sp, #4]
    21a2:	68a3      	ldr	r3, [r4, #8]
    21a4:	1888      	adds	r0, r1, r2

                if (output_transposed) {
    21a6:	9903      	ldr	r1, [sp, #12]
    21a8:	b999      	cbnz	r1, 21d2 <CONFIG_MAIN_STACK_SIZE+0x1d2>
                size_t index = (i * filterbanks->cols) + (left + zx);
    21aa:	fb05 0003 	mla	r0, r5, r3, r0
                    index = ((left + zx) * filterbanks->rows) + i;
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
    21ae:	9b06      	ldr	r3, [sp, #24]
    21b0:	493a      	ldr	r1, [pc, #232]	; (229c <CONFIG_MAIN_STACK_SIZE+0x29c>)
    21b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    21b6:	edd3 7a00 	vldr	s15, [r3]
    21ba:	6823      	ldr	r3, [r4, #0]
    21bc:	4418      	add	r0, r3
        for (size_t ix = 0; ix < length; ix++) {
    21be:	2300      	movs	r3, #0
            if (quantized_values_one_zero[ix] == value) return ix;
    21c0:	ecb1 7a01 	vldmia	r1!, {s14}
    21c4:	eef4 7a47 	vcmp.f32	s15, s14
    21c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    21cc:	d105      	bne.n	21da <CONFIG_MAIN_STACK_SIZE+0x1da>
            hi;
    21ce:	b2db      	uxtb	r3, r3
    21d0:	e03c      	b.n	224c <CONFIG_MAIN_STACK_SIZE+0x24c>
                    index = ((left + zx) * filterbanks->rows) + i;
    21d2:	6863      	ldr	r3, [r4, #4]
    21d4:	fb03 5000 	mla	r0, r3, r0, r5
    21d8:	e7e9      	b.n	21ae <CONFIG_MAIN_STACK_SIZE+0x1ae>
        for (size_t ix = 0; ix < length; ix++) {
    21da:	3301      	adds	r3, #1
    21dc:	2bef      	cmp	r3, #239	; 0xef
    21de:	d1ef      	bne.n	21c0 <CONFIG_MAIN_STACK_SIZE+0x1c0>
        if (value < quantized_values_one_zero[0]) {
    21e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    21e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    21e8:	d433      	bmi.n	2252 <CONFIG_MAIN_STACK_SIZE+0x252>
        if (value > quantized_values_one_zero[length - 1]) {
    21ea:	eef4 7ae6 	vcmpe.f32	s15, s13
    21ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    21f2:	dc30      	bgt.n	2256 <CONFIG_MAIN_STACK_SIZE+0x256>
        int hi = length - 1;
    21f4:	23ee      	movs	r3, #238	; 0xee
        int lo = 0;
    21f6:	2100      	movs	r1, #0
            int mid = (hi + lo) / 2;
    21f8:	18ce      	adds	r6, r1, r3
    21fa:	1076      	asrs	r6, r6, #1
            if (value < quantized_values_one_zero[mid]) {
    21fc:	eb0b 0c86 	add.w	ip, fp, r6, lsl #2
    2200:	ed9c 7a00 	vldr	s14, [ip]
    2204:	eef4 7ac7 	vcmpe.f32	s15, s14
    2208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    220c:	d515      	bpl.n	223a <CONFIG_MAIN_STACK_SIZE+0x23a>
                hi = mid - 1;
    220e:	1e73      	subs	r3, r6, #1
        while (lo <= hi) {
    2210:	428b      	cmp	r3, r1
    2212:	daf1      	bge.n	21f8 <CONFIG_MAIN_STACK_SIZE+0x1f8>
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
    2214:	eb0b 0681 	add.w	r6, fp, r1, lsl #2
    2218:	ed96 7a00 	vldr	s14, [r6]
    221c:	eb0b 0683 	add.w	r6, fp, r3, lsl #2
    2220:	ed96 6a00 	vldr	s12, [r6]
    2224:	ee37 7a67 	vsub.f32	s14, s14, s15
    2228:	ee77 7ac6 	vsub.f32	s15, s15, s12
            hi;
    222c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2234:	d5cb      	bpl.n	21ce <CONFIG_MAIN_STACK_SIZE+0x1ce>
    2236:	b2cb      	uxtb	r3, r1
    2238:	e008      	b.n	224c <CONFIG_MAIN_STACK_SIZE+0x24c>
            } else if (value > quantized_values_one_zero[mid]) {
    223a:	dd01      	ble.n	2240 <CONFIG_MAIN_STACK_SIZE+0x240>
                lo = mid + 1;
    223c:	1c71      	adds	r1, r6, #1
    223e:	e7e7      	b.n	2210 <CONFIG_MAIN_STACK_SIZE+0x210>
                return quantized_values_one_zero[mid];
    2240:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    2244:	edcd 7a05 	vstr	s15, [sp, #20]
    2248:	f89d 3014 	ldrb.w	r3, [sp, #20]
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
    224c:	7003      	strb	r3, [r0, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
    224e:	3201      	adds	r2, #1
    2250:	e7a4      	b.n	219c <CONFIG_MAIN_STACK_SIZE+0x19c>
            return quantized_values_one_zero[0];
    2252:	2300      	movs	r3, #0
    2254:	e7fa      	b.n	224c <CONFIG_MAIN_STACK_SIZE+0x24c>
            return quantized_values_one_zero[length - 1];
    2256:	2301      	movs	r3, #1
    2258:	e7f8      	b.n	224c <CONFIG_MAIN_STACK_SIZE+0x24c>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
    225a:	a806      	add	r0, sp, #24
    225c:	f00f f8ba 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
    2260:	9d04      	ldr	r5, [sp, #16]
    2262:	e712      	b.n	208a <CONFIG_MAIN_STACK_SIZE+0x8a>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
    2264:	9b03      	ldr	r3, [sp, #12]
    2266:	b123      	cbz	r3, 2272 <CONFIG_MAIN_STACK_SIZE+0x272>
            uint16_t r = filterbanks->rows;
            filterbanks->rows = filterbanks->cols;
    2268:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
            filterbanks->cols = r;
    226c:	b29b      	uxth	r3, r3
            filterbanks->rows = filterbanks->cols;
    226e:	6062      	str	r2, [r4, #4]
            filterbanks->cols = r;
    2270:	60a3      	str	r3, [r4, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
    2272:	4638      	mov	r0, r7
    2274:	f00f f8fe 	bl	11474 <_Z7ei_freePv>

        return EIDSP_OK;
    2278:	2000      	movs	r0, #0
    }
    227a:	b00f      	add	sp, #60	; 0x3c
    227c:	ecbd 8b06 	vpop	{d8-d10}
    2280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    2284:	4806      	ldr	r0, [pc, #24]	; (22a0 <CONFIG_MAIN_STACK_SIZE+0x2a0>)
    2286:	e7f8      	b.n	227a <CONFIG_MAIN_STACK_SIZE+0x27a>
    2288:	d2f1a9fc 	.word	0xd2f1a9fc
    228c:	3f50624d 	.word	0x3f50624d
    2290:	fffffc16 	.word	0xfffffc16
    2294:	448ce000 	.word	0x448ce000
    2298:	442f0000 	.word	0x442f0000
    229c:	0003f158 	.word	0x0003f158
    22a0:	fffffc14 	.word	0xfffffc14
    22a4:	00000000 	.word	0x00000000

000022a8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    22a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22ac:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
    22b0:	ed9f 8bab 	vldr	d8, [pc, #684]	; 2560 <cbvprintf+0x2b8>
{
    22b4:	b09b      	sub	sp, #108	; 0x6c
    22b6:	4681      	mov	r9, r0
    22b8:	468a      	mov	sl, r1
    22ba:	4615      	mov	r5, r2
    22bc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    22be:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    22c0:	7828      	ldrb	r0, [r5, #0]
    22c2:	b910      	cbnz	r0, 22ca <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
    22c4:	4630      	mov	r0, r6
    22c6:	f000 bdcb 	b.w	2e60 <cbvprintf+0xbb8>
			OUTC(*fp++);
    22ca:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    22cc:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    22ce:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    22d0:	d006      	beq.n	22e0 <cbvprintf+0x38>
			OUTC(*fp++);
    22d2:	4651      	mov	r1, sl
			OUTC('%');
    22d4:	47c8      	blx	r9
    22d6:	2800      	cmp	r0, #0
    22d8:	f2c0 85c2 	blt.w	2e60 <cbvprintf+0xbb8>
    22dc:	3601      	adds	r6, #1
		if (bps == NULL) {
    22de:	e22e      	b.n	273e <cbvprintf+0x496>
		} state = {
    22e0:	2218      	movs	r2, #24
    22e2:	2100      	movs	r1, #0
    22e4:	a80c      	add	r0, sp, #48	; 0x30
    22e6:	f013 fb68 	bl	159ba <memset>
	if (*sp == '%') {
    22ea:	786b      	ldrb	r3, [r5, #1]
    22ec:	2b25      	cmp	r3, #37	; 0x25
    22ee:	d059      	beq.n	23a4 <cbvprintf+0xfc>
    22f0:	1c6a      	adds	r2, r5, #1
    22f2:	4617      	mov	r7, r2
		switch (*sp) {
    22f4:	f812 3b01 	ldrb.w	r3, [r2], #1
    22f8:	2b2b      	cmp	r3, #43	; 0x2b
    22fa:	f000 808b 	beq.w	2414 <cbvprintf+0x16c>
    22fe:	d879      	bhi.n	23f4 <cbvprintf+0x14c>
    2300:	2b20      	cmp	r3, #32
    2302:	f000 808c 	beq.w	241e <cbvprintf+0x176>
    2306:	2b23      	cmp	r3, #35	; 0x23
    2308:	f000 808e 	beq.w	2428 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
    230c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2310:	f003 0244 	and.w	r2, r3, #68	; 0x44
    2314:	2a44      	cmp	r2, #68	; 0x44
    2316:	d103      	bne.n	2320 <cbvprintf+0x78>
		conv->flag_zero = false;
    2318:	f36f 1386 	bfc	r3, #6, #1
    231c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    2320:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2324:	970a      	str	r7, [sp, #40]	; 0x28
    2326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    232a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    232e:	783b      	ldrb	r3, [r7, #0]
    2330:	2b2a      	cmp	r3, #42	; 0x2a
    2332:	d17e      	bne.n	2432 <cbvprintf+0x18a>
		conv->width_star = true;
    2334:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2338:	f043 0301 	orr.w	r3, r3, #1
    233c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    2340:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
    2342:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
    2344:	781a      	ldrb	r2, [r3, #0]
    2346:	2a2e      	cmp	r2, #46	; 0x2e
    2348:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    234c:	bf0c      	ite	eq
    234e:	2101      	moveq	r1, #1
    2350:	2100      	movne	r1, #0
    2352:	f361 0241 	bfi	r2, r1, #1, #1
    2356:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    235a:	d10b      	bne.n	2374 <cbvprintf+0xcc>
	++sp;
    235c:	1c5a      	adds	r2, r3, #1
    235e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
    2360:	785a      	ldrb	r2, [r3, #1]
    2362:	2a2a      	cmp	r2, #42	; 0x2a
    2364:	d17b      	bne.n	245e <cbvprintf+0x1b6>
		conv->prec_star = true;
    2366:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    236a:	f042 0204 	orr.w	r2, r2, #4
    236e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    2372:	3302      	adds	r3, #2
	switch (*sp) {
    2374:	4619      	mov	r1, r3
    2376:	f811 0b01 	ldrb.w	r0, [r1], #1
    237a:	286c      	cmp	r0, #108	; 0x6c
    237c:	f000 80cf 	beq.w	251e <cbvprintf+0x276>
    2380:	d87d      	bhi.n	247e <cbvprintf+0x1d6>
    2382:	2868      	cmp	r0, #104	; 0x68
    2384:	f000 8084 	beq.w	2490 <cbvprintf+0x1e8>
    2388:	286a      	cmp	r0, #106	; 0x6a
    238a:	f000 80d2 	beq.w	2532 <cbvprintf+0x28a>
    238e:	284c      	cmp	r0, #76	; 0x4c
    2390:	f000 80d6 	beq.w	2540 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
    2394:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2398:	f36f 02c6 	bfc	r2, #3, #4
    239c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    23a0:	4619      	mov	r1, r3
    23a2:	e080      	b.n	24a6 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
    23a4:	1caa      	adds	r2, r5, #2
    23a6:	9202      	str	r2, [sp, #8]
    23a8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    23ac:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    23b0:	07df      	lsls	r7, r3, #31
    23b2:	f140 8178 	bpl.w	26a6 <cbvprintf+0x3fe>
			width = va_arg(ap, int);
    23b6:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    23ba:	f1bb 0f00 	cmp.w	fp, #0
    23be:	da07      	bge.n	23d0 <cbvprintf+0x128>
				conv->flag_dash = true;
    23c0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    23c4:	f042 0204 	orr.w	r2, r2, #4
    23c8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    23cc:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    23d0:	0758      	lsls	r0, r3, #29
    23d2:	f140 8171 	bpl.w	26b8 <cbvprintf+0x410>
			int arg = va_arg(ap, int);
    23d6:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    23da:	f1b8 0f00 	cmp.w	r8, #0
    23de:	f280 8170 	bge.w	26c2 <cbvprintf+0x41a>
				conv->prec_present = false;
    23e2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    23e6:	f36f 0341 	bfc	r3, #1, #1
    23ea:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    23ee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    23f2:	e166      	b.n	26c2 <cbvprintf+0x41a>
		switch (*sp) {
    23f4:	2b2d      	cmp	r3, #45	; 0x2d
    23f6:	d006      	beq.n	2406 <cbvprintf+0x15e>
    23f8:	2b30      	cmp	r3, #48	; 0x30
    23fa:	d187      	bne.n	230c <cbvprintf+0x64>
			conv->flag_zero = true;
    23fc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2404:	e003      	b.n	240e <cbvprintf+0x166>
			conv->flag_dash = true;
    2406:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    240a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    240e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    2412:	e76e      	b.n	22f2 <cbvprintf+0x4a>
			conv->flag_plus = true;
    2414:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2418:	f043 0308 	orr.w	r3, r3, #8
    241c:	e7f7      	b.n	240e <cbvprintf+0x166>
			conv->flag_space = true;
    241e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2422:	f043 0310 	orr.w	r3, r3, #16
    2426:	e7f2      	b.n	240e <cbvprintf+0x166>
			conv->flag_hash = true;
    2428:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    242c:	f043 0320 	orr.w	r3, r3, #32
    2430:	e7ed      	b.n	240e <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
    2432:	a80a      	add	r0, sp, #40	; 0x28
    2434:	f008 ffb4 	bl	b3a0 <extract_decimal>
	if (sp != wp) {
    2438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    243a:	42bb      	cmp	r3, r7
    243c:	d081      	beq.n	2342 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
    243e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
    2442:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    2444:	f3c7 0140 	ubfx	r1, r7, #1, #1
    2448:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
    244c:	0052      	lsls	r2, r2, #1
    244e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2452:	f007 017d 	and.w	r1, r7, #125	; 0x7d
    2456:	430a      	orrs	r2, r1
    2458:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    245c:	e771      	b.n	2342 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
    245e:	a80a      	add	r0, sp, #40	; 0x28
    2460:	f008 ff9e 	bl	b3a0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    2464:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    2468:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    246a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    246e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    2472:	f360 0341 	bfi	r3, r0, #1, #1
    2476:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    247a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    247c:	e77a      	b.n	2374 <cbvprintf+0xcc>
	switch (*sp) {
    247e:	2874      	cmp	r0, #116	; 0x74
    2480:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2484:	d059      	beq.n	253a <cbvprintf+0x292>
    2486:	287a      	cmp	r0, #122	; 0x7a
    2488:	d184      	bne.n	2394 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
    248a:	4613      	mov	r3, r2
    248c:	2206      	movs	r2, #6
    248e:	e041      	b.n	2514 <cbvprintf+0x26c>
		if (*++sp == 'h') {
    2490:	785a      	ldrb	r2, [r3, #1]
    2492:	2a68      	cmp	r2, #104	; 0x68
    2494:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2498:	d13a      	bne.n	2510 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
    249a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    249c:	f361 02c6 	bfi	r2, r1, #3, #4
    24a0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    24a4:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    24a6:	460b      	mov	r3, r1
    24a8:	f813 2b01 	ldrb.w	r2, [r3], #1
    24ac:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    24ae:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    24b0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    24b4:	f200 80cd 	bhi.w	2652 <cbvprintf+0x3aa>
    24b8:	2a57      	cmp	r2, #87	; 0x57
    24ba:	d855      	bhi.n	2568 <cbvprintf+0x2c0>
    24bc:	2a41      	cmp	r2, #65	; 0x41
    24be:	d004      	beq.n	24ca <cbvprintf+0x222>
    24c0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    24c4:	2b02      	cmp	r3, #2
    24c6:	f200 80c4 	bhi.w	2652 <cbvprintf+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
    24ca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    24ce:	2104      	movs	r1, #4
    24d0:	f361 0302 	bfi	r3, r1, #0, #3
    24d4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    24d8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
    24dc:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
    24e0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
    24e4:	f1d8 0300 	rsbs	r3, r8, #0
    24e8:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
    24ec:	f363 12c7 	bfi	r2, r3, #7, #1
    24f0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
    24f4:	b2d3      	uxtb	r3, r2
    24f6:	0612      	lsls	r2, r2, #24
    24f8:	f100 80d3 	bmi.w	26a2 <cbvprintf+0x3fa>
		if (conv->length_mod == LENGTH_L) {
    24fc:	f003 0278 	and.w	r2, r3, #120	; 0x78
    2500:	2a18      	cmp	r2, #24
    2502:	f040 80a3 	bne.w	264c <cbvprintf+0x3a4>
			conv->length_mod = LENGTH_NONE;
    2506:	f36f 03c6 	bfc	r3, #3, #4
    250a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    250e:	e08a      	b.n	2626 <cbvprintf+0x37e>
			conv->length_mod = LENGTH_H;
    2510:	4613      	mov	r3, r2
    2512:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    2514:	f362 03c6 	bfi	r3, r2, #3, #4
    2518:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    251c:	e7c3      	b.n	24a6 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
    251e:	785a      	ldrb	r2, [r3, #1]
    2520:	2a6c      	cmp	r2, #108	; 0x6c
    2522:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2526:	d101      	bne.n	252c <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
    2528:	2104      	movs	r1, #4
    252a:	e7b7      	b.n	249c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
    252c:	4613      	mov	r3, r2
    252e:	2203      	movs	r2, #3
    2530:	e7f0      	b.n	2514 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
    2532:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2536:	2205      	movs	r2, #5
    2538:	e7ec      	b.n	2514 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
    253a:	4613      	mov	r3, r2
    253c:	2207      	movs	r2, #7
    253e:	e7e9      	b.n	2514 <cbvprintf+0x26c>
		conv->unsupported = true;
    2540:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    2544:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    2548:	f023 0302 	bic.w	r3, r3, #2
    254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2550:	f043 0302 	orr.w	r3, r3, #2
    2554:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    2558:	e7a5      	b.n	24a6 <cbvprintf+0x1fe>
    255a:	bf00      	nop
    255c:	f3af 8000 	nop.w
    2560:	00000000 	.word	0x00000000
    2564:	08000000 	.word	0x08000000
	switch (conv->specifier) {
    2568:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    256c:	2b20      	cmp	r3, #32
    256e:	d870      	bhi.n	2652 <cbvprintf+0x3aa>
    2570:	a101      	add	r1, pc, #4	; (adr r1, 2578 <cbvprintf+0x2d0>)
    2572:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    2576:	bf00      	nop
    2578:	0000262b 	.word	0x0000262b
    257c:	00002653 	.word	0x00002653
    2580:	00002653 	.word	0x00002653
    2584:	00002653 	.word	0x00002653
    2588:	00002653 	.word	0x00002653
    258c:	00002653 	.word	0x00002653
    2590:	00002653 	.word	0x00002653
    2594:	00002653 	.word	0x00002653
    2598:	00002653 	.word	0x00002653
    259c:	000024cb 	.word	0x000024cb
    25a0:	00002653 	.word	0x00002653
    25a4:	0000262b 	.word	0x0000262b
    25a8:	000025fd 	.word	0x000025fd
    25ac:	000024cb 	.word	0x000024cb
    25b0:	000024cb 	.word	0x000024cb
    25b4:	000024cb 	.word	0x000024cb
    25b8:	00002653 	.word	0x00002653
    25bc:	000025fd 	.word	0x000025fd
    25c0:	00002653 	.word	0x00002653
    25c4:	00002653 	.word	0x00002653
    25c8:	00002653 	.word	0x00002653
    25cc:	00002653 	.word	0x00002653
    25d0:	00002661 	.word	0x00002661
    25d4:	0000262b 	.word	0x0000262b
    25d8:	00002685 	.word	0x00002685
    25dc:	00002653 	.word	0x00002653
    25e0:	00002653 	.word	0x00002653
    25e4:	00002685 	.word	0x00002685
    25e8:	00002653 	.word	0x00002653
    25ec:	0000262b 	.word	0x0000262b
    25f0:	00002653 	.word	0x00002653
    25f4:	00002653 	.word	0x00002653
    25f8:	0000262b 	.word	0x0000262b
		conv->specifier_cat = SPECIFIER_SINT;
    25fc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2600:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    2602:	f361 0302 	bfi	r3, r1, #0, #3
    2606:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    260a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    260e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2612:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    2614:	bf02      	ittt	eq
    2616:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    261a:	f041 0101 	orreq.w	r1, r1, #1
    261e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    2622:	2a63      	cmp	r2, #99	; 0x63
    2624:	d005      	beq.n	2632 <cbvprintf+0x38a>
	bool unsupported = false;
    2626:	2300      	movs	r3, #0
    2628:	e006      	b.n	2638 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
    262a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    262e:	2102      	movs	r1, #2
    2630:	e7e7      	b.n	2602 <cbvprintf+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2632:	3b00      	subs	r3, #0
    2634:	bf18      	it	ne
    2636:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2638:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    263c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2640:	430b      	orrs	r3, r1
    2642:	f363 0241 	bfi	r2, r3, #1, #1
    2646:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    264a:	e6af      	b.n	23ac <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
    264c:	f013 0f38 	tst.w	r3, #56	; 0x38
    2650:	d0e9      	beq.n	2626 <cbvprintf+0x37e>
			conv->invalid = true;
    2652:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2656:	f043 0301 	orr.w	r3, r3, #1
    265a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    265e:	e7e2      	b.n	2626 <cbvprintf+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
    2660:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2664:	2203      	movs	r2, #3
    2666:	f362 0302 	bfi	r3, r2, #0, #3
    266a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    266e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2672:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2676:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    267a:	f1dc 0300 	rsbs	r3, ip, #0
    267e:	eb43 030c 	adc.w	r3, r3, ip
    2682:	e7d9      	b.n	2638 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
    2684:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2688:	2203      	movs	r2, #3
    268a:	f362 0302 	bfi	r3, r2, #0, #3
    268e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    2692:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2696:	f013 0f78 	tst.w	r3, #120	; 0x78
    269a:	bf14      	ite	ne
    269c:	2301      	movne	r3, #1
    269e:	2300      	moveq	r3, #0
    26a0:	e7ca      	b.n	2638 <cbvprintf+0x390>
			unsupported = true;
    26a2:	2301      	movs	r3, #1
    26a4:	e7c8      	b.n	2638 <cbvprintf+0x390>
		} else if (conv->width_present) {
    26a6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    26aa:	2a00      	cmp	r2, #0
			width = conv->width_value;
    26ac:	bfb4      	ite	lt
    26ae:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    26b2:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    26b6:	e68b      	b.n	23d0 <cbvprintf+0x128>
		} else if (conv->prec_present) {
    26b8:	0799      	lsls	r1, r3, #30
    26ba:	f57f ae98 	bpl.w	23ee <cbvprintf+0x146>
			precision = conv->prec_value;
    26be:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    26c2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    26c6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    26c8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    26cc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    26d0:	f003 0207 	and.w	r2, r3, #7
    26d4:	2a04      	cmp	r2, #4
    26d6:	d109      	bne.n	26ec <cbvprintf+0x444>
		    && !conv->prec_present) {
    26d8:	078a      	lsls	r2, r1, #30
    26da:	d407      	bmi.n	26ec <cbvprintf+0x444>
			if (conv->specifier_a) {
    26dc:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    26e0:	2a00      	cmp	r2, #0
    26e2:	bfb4      	ite	lt
    26e4:	f04f 080d 	movlt.w	r8, #13
    26e8:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    26ec:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    26f0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    26f2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    26f6:	d137      	bne.n	2768 <cbvprintf+0x4c0>
			switch (length_mod) {
    26f8:	1ecb      	subs	r3, r1, #3
    26fa:	2b04      	cmp	r3, #4
    26fc:	d821      	bhi.n	2742 <cbvprintf+0x49a>
    26fe:	e8df f003 	tbb	[pc, r3]
    2702:	0903      	.short	0x0903
    2704:	2009      	.short	0x2009
    2706:	20          	.byte	0x20
    2707:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    2708:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    270c:	17da      	asrs	r2, r3, #31
    270e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    2712:	e006      	b.n	2722 <cbvprintf+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
    2714:	3407      	adds	r4, #7
    2716:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    271a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    271e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    2722:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    2726:	07bb      	lsls	r3, r7, #30
    2728:	d056      	beq.n	27d8 <cbvprintf+0x530>
			OUTS(sp, fp);
    272a:	9b02      	ldr	r3, [sp, #8]
    272c:	462a      	mov	r2, r5
    272e:	4651      	mov	r1, sl
    2730:	4648      	mov	r0, r9
    2732:	f012 fa4b 	bl	14bcc <outs>
    2736:	2800      	cmp	r0, #0
    2738:	f2c0 8392 	blt.w	2e60 <cbvprintf+0xbb8>
    273c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    273e:	9d02      	ldr	r5, [sp, #8]
    2740:	e5be      	b.n	22c0 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2742:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2746:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2748:	ea4f 72e3 	mov.w	r2, r3, asr #31
    274c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    2750:	d105      	bne.n	275e <cbvprintf+0x4b6>
				value->uint = (unsigned char)value->uint;
    2752:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    2756:	930c      	str	r3, [sp, #48]	; 0x30
    2758:	2300      	movs	r3, #0
    275a:	930d      	str	r3, [sp, #52]	; 0x34
    275c:	e7e1      	b.n	2722 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
    275e:	2902      	cmp	r1, #2
    2760:	d1df      	bne.n	2722 <cbvprintf+0x47a>
				value->sint = (short)value->sint;
    2762:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    2766:	e7d1      	b.n	270c <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2768:	2b02      	cmp	r3, #2
    276a:	d123      	bne.n	27b4 <cbvprintf+0x50c>
			switch (length_mod) {
    276c:	1ecb      	subs	r3, r1, #3
    276e:	2b04      	cmp	r3, #4
    2770:	d813      	bhi.n	279a <cbvprintf+0x4f2>
    2772:	e8df f003 	tbb	[pc, r3]
    2776:	0a03      	.short	0x0a03
    2778:	120a      	.short	0x120a
    277a:	12          	.byte	0x12
    277b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    277c:	6820      	ldr	r0, [r4, #0]
    277e:	900c      	str	r0, [sp, #48]	; 0x30
    2780:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
    2782:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    2784:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    2786:	461c      	mov	r4, r3
    2788:	e7cb      	b.n	2722 <cbvprintf+0x47a>
					(uint_value_type)va_arg(ap,
    278a:	1de3      	adds	r3, r4, #7
    278c:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
    2790:	ecb3 7b02 	vldmia	r3!, {d7}
    2794:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
    2798:	e7f5      	b.n	2786 <cbvprintf+0x4de>
					(uint_value_type)va_arg(ap, size_t);
    279a:	f854 3b04 	ldr.w	r3, [r4], #4
    279e:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    27a0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    27a2:	f04f 0300 	mov.w	r3, #0
    27a6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    27a8:	d0d3      	beq.n	2752 <cbvprintf+0x4aa>
			} else if (length_mod == LENGTH_H) {
    27aa:	2902      	cmp	r1, #2
    27ac:	d1b9      	bne.n	2722 <cbvprintf+0x47a>
				value->uint = (unsigned short)value->uint;
    27ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    27b2:	e7d0      	b.n	2756 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_FP) {
    27b4:	2b04      	cmp	r3, #4
    27b6:	d109      	bne.n	27cc <cbvprintf+0x524>
					(sint_value_type)va_arg(ap, long long);
    27b8:	1de3      	adds	r3, r4, #7
    27ba:	f023 0307 	bic.w	r3, r3, #7
    27be:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    27c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    27c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    27ca:	e7aa      	b.n	2722 <cbvprintf+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    27cc:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    27ce:	bf04      	itt	eq
    27d0:	f854 3b04 	ldreq.w	r3, [r4], #4
    27d4:	930c      	streq	r3, [sp, #48]	; 0x30
    27d6:	e7a4      	b.n	2722 <cbvprintf+0x47a>
		switch (conv->specifier) {
    27d8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    27dc:	2a78      	cmp	r2, #120	; 0x78
    27de:	d8ae      	bhi.n	273e <cbvprintf+0x496>
    27e0:	2a57      	cmp	r2, #87	; 0x57
    27e2:	f200 808c 	bhi.w	28fe <cbvprintf+0x656>
    27e6:	2a25      	cmp	r2, #37	; 0x25
    27e8:	f000 80d4 	beq.w	2994 <cbvprintf+0x6ec>
    27ec:	2a24      	cmp	r2, #36	; 0x24
    27ee:	d9a6      	bls.n	273e <cbvprintf+0x496>
    27f0:	2a41      	cmp	r2, #65	; 0x41
    27f2:	d003      	beq.n	27fc <cbvprintf+0x554>
    27f4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    27f8:	2b02      	cmp	r3, #2
    27fa:	d8a0      	bhi.n	273e <cbvprintf+0x496>
	} u = {
    27fc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    2800:	2b00      	cmp	r3, #0
    2802:	f2c0 81b7 	blt.w	2b74 <cbvprintf+0x8cc>
	} else if (conv->flag_plus) {
    2806:	0738      	lsls	r0, r7, #28
    2808:	f100 81b6 	bmi.w	2b78 <cbvprintf+0x8d0>
		*sign = ' ';
    280c:	f017 0710 	ands.w	r7, r7, #16
    2810:	bf18      	it	ne
    2812:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2814:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    2818:	f3c3 0313 	ubfx	r3, r3, #0, #20
    281c:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    2820:	2d00      	cmp	r5, #0
    2822:	f040 81ab 	bne.w	2b7c <cbvprintf+0x8d4>
    2826:	ea51 0003 	orrs.w	r0, r1, r3
    282a:	bf14      	ite	ne
    282c:	2001      	movne	r0, #1
    282e:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    2830:	02db      	lsls	r3, r3, #11
    2832:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    2836:	02c9      	lsls	r1, r1, #11
		c = 'f';
    2838:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    283a:	ea45 0e01 	orr.w	lr, r5, r1
    283e:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    2842:	bf08      	it	eq
    2844:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    2846:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    284a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    284e:	f000 8203 	beq.w	2c58 <cbvprintf+0x9b0>
		if (is_subnormal) {
    2852:	2800      	cmp	r0, #0
    2854:	f040 81cb 	bne.w	2bee <cbvprintf+0x946>
		fract |= BIT_63;
    2858:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    285c:	f04f 0c00 	mov.w	ip, #0
    2860:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    2864:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    2868:	9109      	str	r1, [sp, #36]	; 0x24
    286a:	4663      	mov	r3, ip
		fract *= 5U;
    286c:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    2870:	f115 0f02 	cmn.w	r5, #2
    2874:	f2c0 81c2 	blt.w	2bfc <cbvprintf+0x954>
    2878:	f1bc 0f00 	cmp.w	ip, #0
    287c:	d001      	beq.n	2882 <cbvprintf+0x5da>
    287e:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    2882:	2d00      	cmp	r5, #0
		fract += 2;
    2884:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
    2888:	f300 81cd 	bgt.w	2c26 <cbvprintf+0x97e>
	fract >>= (4 - expo);
    288c:	9809      	ldr	r0, [sp, #36]	; 0x24
    288e:	9908      	ldr	r1, [sp, #32]
    2890:	f1c5 0c04 	rsb	ip, r5, #4
    2894:	351c      	adds	r5, #28
    2896:	fa00 f505 	lsl.w	r5, r0, r5
    289a:	f1ac 0e20 	sub.w	lr, ip, #32
    289e:	fa21 f10c 	lsr.w	r1, r1, ip
    28a2:	fa20 fe0e 	lsr.w	lr, r0, lr
    28a6:	4329      	orrs	r1, r5
    28a8:	ea41 010e 	orr.w	r1, r1, lr
    28ac:	fa20 f00c 	lsr.w	r0, r0, ip
    28b0:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    28b4:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    28b8:	2947      	cmp	r1, #71	; 0x47
    28ba:	f040 81d4 	bne.w	2c66 <cbvprintf+0x9be>
		if (decexp < (-4 + 1) || decexp > precision) {
    28be:	1cdd      	adds	r5, r3, #3
    28c0:	db02      	blt.n	28c8 <cbvprintf+0x620>
    28c2:	4598      	cmp	r8, r3
    28c4:	f280 81cb 	bge.w	2c5e <cbvprintf+0x9b6>
			c += 'e' - 'g';  /* e or E */
    28c8:	3a02      	subs	r2, #2
			if (precision > 0) {
    28ca:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    28ce:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    28d0:	dd01      	ble.n	28d6 <cbvprintf+0x62e>
				precision--;
    28d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    28d6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    28da:	0688      	lsls	r0, r1, #26
    28dc:	f100 81c3 	bmi.w	2c66 <cbvprintf+0x9be>
    28e0:	f1b8 0f00 	cmp.w	r8, #0
    28e4:	bfd4      	ite	le
    28e6:	2100      	movle	r1, #0
    28e8:	2101      	movgt	r1, #1
	if (c == 'f') {
    28ea:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    28ec:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    28ee:	f040 81bc 	bne.w	2c6a <cbvprintf+0x9c2>
		if (decimals < 0) {
    28f2:	eb13 0108 	adds.w	r1, r3, r8
    28f6:	f140 81ba 	bpl.w	2c6e <cbvprintf+0x9c6>
			decimals = 0;
    28fa:	2100      	movs	r1, #0
    28fc:	e1ba      	b.n	2c74 <cbvprintf+0x9cc>
		switch (conv->specifier) {
    28fe:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    2902:	2b20      	cmp	r3, #32
    2904:	f63f af1b 	bhi.w	273e <cbvprintf+0x496>
    2908:	a001      	add	r0, pc, #4	; (adr r0, 2910 <cbvprintf+0x668>)
    290a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    290e:	bf00      	nop
    2910:	00002b17 	.word	0x00002b17
    2914:	0000273f 	.word	0x0000273f
    2918:	0000273f 	.word	0x0000273f
    291c:	0000273f 	.word	0x0000273f
    2920:	0000273f 	.word	0x0000273f
    2924:	0000273f 	.word	0x0000273f
    2928:	0000273f 	.word	0x0000273f
    292c:	0000273f 	.word	0x0000273f
    2930:	0000273f 	.word	0x0000273f
    2934:	000027fd 	.word	0x000027fd
    2938:	0000273f 	.word	0x0000273f
    293c:	000029c1 	.word	0x000029c1
    2940:	00002ab7 	.word	0x00002ab7
    2944:	000027fd 	.word	0x000027fd
    2948:	000027fd 	.word	0x000027fd
    294c:	000027fd 	.word	0x000027fd
    2950:	0000273f 	.word	0x0000273f
    2954:	00002ab7 	.word	0x00002ab7
    2958:	0000273f 	.word	0x0000273f
    295c:	0000273f 	.word	0x0000273f
    2960:	0000273f 	.word	0x0000273f
    2964:	0000273f 	.word	0x0000273f
    2968:	00002b4d 	.word	0x00002b4d
    296c:	00002b17 	.word	0x00002b17
    2970:	00002b1b 	.word	0x00002b1b
    2974:	0000273f 	.word	0x0000273f
    2978:	0000273f 	.word	0x0000273f
    297c:	0000299b 	.word	0x0000299b
    2980:	0000273f 	.word	0x0000273f
    2984:	00002b17 	.word	0x00002b17
    2988:	0000273f 	.word	0x0000273f
    298c:	0000273f 	.word	0x0000273f
    2990:	00002b17 	.word	0x00002b17
			OUTC('%');
    2994:	4651      	mov	r1, sl
    2996:	4610      	mov	r0, r2
    2998:	e49c      	b.n	22d4 <cbvprintf+0x2c>
			if (precision >= 0) {
    299a:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    299e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    29a0:	db09      	blt.n	29b6 <cbvprintf+0x70e>
				len = strnlen(bps, precision);
    29a2:	4641      	mov	r1, r8
    29a4:	4610      	mov	r0, r2
    29a6:	9203      	str	r2, [sp, #12]
    29a8:	f013 f986 	bl	15cb8 <strnlen>
				len = strlen(bps);
    29ac:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    29ae:	2700      	movs	r7, #0
			bpe = bps + len;
    29b0:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    29b2:	b962      	cbnz	r2, 29ce <cbvprintf+0x726>
    29b4:	e6c3      	b.n	273e <cbvprintf+0x496>
				len = strlen(bps);
    29b6:	4610      	mov	r0, r2
    29b8:	9203      	str	r2, [sp, #12]
    29ba:	f7fe faf3 	bl	fa4 <strlen>
    29be:	e7f5      	b.n	29ac <cbvprintf+0x704>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    29c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    29c2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    29c6:	2700      	movs	r7, #0
			bpe = buf + 1;
    29c8:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    29cc:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    29ce:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    29d0:	b107      	cbz	r7, 29d4 <cbvprintf+0x72c>
			nj_len += 1U;
    29d2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    29d4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    29d8:	06c1      	lsls	r1, r0, #27
    29da:	f140 8235 	bpl.w	2e48 <cbvprintf+0xba0>
			nj_len += 2U;
    29de:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    29e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    29e2:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    29e4:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    29e6:	bf44      	itt	mi
    29e8:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    29ea:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    29ec:	f1bb 0f00 	cmp.w	fp, #0
    29f0:	dd23      	ble.n	2a3a <cbvprintf+0x792>
			width -= (int)nj_len;
    29f2:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    29f6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    29fa:	0759      	lsls	r1, r3, #29
    29fc:	f3c3 0880 	ubfx	r8, r3, #2, #1
    2a00:	d41b      	bmi.n	2a3a <cbvprintf+0x792>
				if (conv->flag_zero) {
    2a02:	0658      	lsls	r0, r3, #25
    2a04:	f140 8236 	bpl.w	2e74 <cbvprintf+0xbcc>
					if (sign != 0) {
    2a08:	2f00      	cmp	r7, #0
    2a0a:	f000 8236 	beq.w	2e7a <cbvprintf+0xbd2>
						OUTC(sign);
    2a0e:	4651      	mov	r1, sl
    2a10:	4638      	mov	r0, r7
    2a12:	9203      	str	r2, [sp, #12]
    2a14:	47c8      	blx	r9
    2a16:	2800      	cmp	r0, #0
    2a18:	f2c0 8222 	blt.w	2e60 <cbvprintf+0xbb8>
    2a1c:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    2a1e:	4647      	mov	r7, r8
						OUTC(sign);
    2a20:	3601      	adds	r6, #1
					pad = '0';
    2a22:	f04f 0830 	mov.w	r8, #48	; 0x30
    2a26:	445e      	add	r6, fp
    2a28:	465b      	mov	r3, fp
				while (width-- > 0) {
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	eba6 000b 	sub.w	r0, r6, fp
    2a30:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    2a34:	f300 820c 	bgt.w	2e50 <cbvprintf+0xba8>
    2a38:	4606      	mov	r6, r0
		if (sign != 0) {
    2a3a:	b147      	cbz	r7, 2a4e <cbvprintf+0x7a6>
			OUTC(sign);
    2a3c:	4651      	mov	r1, sl
    2a3e:	4638      	mov	r0, r7
    2a40:	9203      	str	r2, [sp, #12]
    2a42:	47c8      	blx	r9
    2a44:	2800      	cmp	r0, #0
    2a46:	f2c0 820b 	blt.w	2e60 <cbvprintf+0xbb8>
    2a4a:	9a03      	ldr	r2, [sp, #12]
    2a4c:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    2a4e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2a52:	0659      	lsls	r1, r3, #25
    2a54:	f140 8265 	bpl.w	2f22 <cbvprintf+0xc7a>
			if (conv->specifier_a) {
    2a58:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	eba6 0602 	sub.w	r6, r6, r2
    2a62:	f280 8219 	bge.w	2e98 <cbvprintf+0xbf0>
    2a66:	4617      	mov	r7, r2
    2a68:	46b8      	mov	r8, r7
    2a6a:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    2a6c:	f817 0b01 	ldrb.w	r0, [r7], #1
    2a70:	2870      	cmp	r0, #112	; 0x70
    2a72:	f040 8205 	bne.w	2e80 <cbvprintf+0xbd8>
			while (pad_len-- > 0) {
    2a76:	9f10      	ldr	r7, [sp, #64]	; 0x40
    2a78:	461e      	mov	r6, r3
    2a7a:	441f      	add	r7, r3
    2a7c:	1bbb      	subs	r3, r7, r6
    2a7e:	2b00      	cmp	r3, #0
    2a80:	f300 8248 	bgt.w	2f14 <cbvprintf+0xc6c>
			OUTS(cp, bpe);
    2a84:	462b      	mov	r3, r5
    2a86:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    2a88:	4651      	mov	r1, sl
    2a8a:	4648      	mov	r0, r9
    2a8c:	f012 f89e 	bl	14bcc <outs>
    2a90:	2800      	cmp	r0, #0
    2a92:	f2c0 81e5 	blt.w	2e60 <cbvprintf+0xbb8>
    2a96:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    2a98:	4606      	mov	r6, r0
    2a9a:	4483      	add	fp, r0
		while (width > 0) {
    2a9c:	ebab 0306 	sub.w	r3, fp, r6
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	f77f ae4c 	ble.w	273e <cbvprintf+0x496>
			OUTC(' ');
    2aa6:	4651      	mov	r1, sl
    2aa8:	2020      	movs	r0, #32
    2aaa:	47c8      	blx	r9
    2aac:	2800      	cmp	r0, #0
    2aae:	f2c0 81d7 	blt.w	2e60 <cbvprintf+0xbb8>
    2ab2:	3601      	adds	r6, #1
			--width;
    2ab4:	e7f2      	b.n	2a9c <cbvprintf+0x7f4>
			if (conv->flag_plus) {
    2ab6:	073d      	lsls	r5, r7, #28
    2ab8:	d42b      	bmi.n	2b12 <cbvprintf+0x86a>
				sign = ' ';
    2aba:	f017 0710 	ands.w	r7, r7, #16
    2abe:	bf18      	it	ne
    2ac0:	2720      	movne	r7, #32
			sint = value->sint;
    2ac2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	da05      	bge.n	2ad6 <cbvprintf+0x82e>
				value->uint = (uint_value_type)-sint;
    2aca:	4252      	negs	r2, r2
    2acc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2ad0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    2ad4:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    2ad6:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    2ada:	9300      	str	r3, [sp, #0]
    2adc:	aa0e      	add	r2, sp, #56	; 0x38
    2ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2ae2:	ab13      	add	r3, sp, #76	; 0x4c
    2ae4:	f008 fc72 	bl	b3cc <encode_uint>
    2ae8:	4602      	mov	r2, r0
			if (precision >= 0) {
    2aea:	f1b8 0f00 	cmp.w	r8, #0
    2aee:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    2af2:	f6ff af5e 	blt.w	29b2 <cbvprintf+0x70a>
				conv->flag_zero = false;
    2af6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    2afa:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    2afc:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    2b00:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    2b02:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    2b06:	f67f af54 	bls.w	29b2 <cbvprintf+0x70a>
					conv->pad0_value = precision - (int)len;
    2b0a:	eba8 0303 	sub.w	r3, r8, r3
    2b0e:	930f      	str	r3, [sp, #60]	; 0x3c
    2b10:	e74f      	b.n	29b2 <cbvprintf+0x70a>
				sign = '+';
    2b12:	272b      	movs	r7, #43	; 0x2b
    2b14:	e7d5      	b.n	2ac2 <cbvprintf+0x81a>
		switch (conv->specifier) {
    2b16:	2700      	movs	r7, #0
    2b18:	e7dd      	b.n	2ad6 <cbvprintf+0x82e>
			if (value->ptr != NULL) {
    2b1a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b1c:	2800      	cmp	r0, #0
    2b1e:	f000 818f 	beq.w	2e40 <cbvprintf+0xb98>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2b22:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    2b26:	9300      	str	r3, [sp, #0]
    2b28:	aa0e      	add	r2, sp, #56	; 0x38
    2b2a:	ab13      	add	r3, sp, #76	; 0x4c
    2b2c:	2100      	movs	r1, #0
    2b2e:	f008 fc4d 	bl	b3cc <encode_uint>
				conv->altform_0c = true;
    2b32:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    2b36:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2b3a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2b3e:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2b42:	4602      	mov	r2, r0
				conv->altform_0c = true;
    2b44:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    2b48:	2700      	movs	r7, #0
				goto prec_int_pad0;
    2b4a:	e7ce      	b.n	2aea <cbvprintf+0x842>
				store_count(conv, value->ptr, count);
    2b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    2b4e:	2907      	cmp	r1, #7
    2b50:	f63f adf5 	bhi.w	273e <cbvprintf+0x496>
    2b54:	e8df f001 	tbb	[pc, r1]
    2b58:	0c06040c 	.word	0x0c06040c
    2b5c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2b60:	701e      	strb	r6, [r3, #0]
		break;
    2b62:	e5ec      	b.n	273e <cbvprintf+0x496>
		*(short *)dp = (short)count;
    2b64:	801e      	strh	r6, [r3, #0]
		break;
    2b66:	e5ea      	b.n	273e <cbvprintf+0x496>
		*(intmax_t *)dp = (intmax_t)count;
    2b68:	17f2      	asrs	r2, r6, #31
    2b6a:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    2b6e:	e5e6      	b.n	273e <cbvprintf+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2b70:	601e      	str	r6, [r3, #0]
		break;
    2b72:	e5e4      	b.n	273e <cbvprintf+0x496>
		*sign = '-';
    2b74:	272d      	movs	r7, #45	; 0x2d
    2b76:	e64d      	b.n	2814 <cbvprintf+0x56c>
		*sign = '+';
    2b78:	272b      	movs	r7, #43	; 0x2b
    2b7a:	e64b      	b.n	2814 <cbvprintf+0x56c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    2b7c:	f240 70ff 	movw	r0, #2047	; 0x7ff
    2b80:	4285      	cmp	r5, r0
    2b82:	d131      	bne.n	2be8 <cbvprintf+0x940>
			if (isupper((int)c)) {
    2b84:	3201      	adds	r2, #1
    2b86:	48b9      	ldr	r0, [pc, #740]	; (2e6c <cbvprintf+0xbc4>)
    2b88:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
    2b8a:	430b      	orrs	r3, r1
    2b8c:	5c12      	ldrb	r2, [r2, r0]
    2b8e:	f002 0203 	and.w	r2, r2, #3
    2b92:	d11b      	bne.n	2bcc <cbvprintf+0x924>
			if (isupper((int)c)) {
    2b94:	2a01      	cmp	r2, #1
    2b96:	d111      	bne.n	2bbc <cbvprintf+0x914>
				*buf++ = 'I';
    2b98:	2349      	movs	r3, #73	; 0x49
    2b9a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    2b9e:	234e      	movs	r3, #78	; 0x4e
    2ba0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    2ba4:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    2ba6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    2baa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2bae:	f36f 1386 	bfc	r3, #6, #1
    2bb2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    2bb6:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    2bba:	e707      	b.n	29cc <cbvprintf+0x724>
				*buf++ = 'i';
    2bbc:	2369      	movs	r3, #105	; 0x69
    2bbe:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    2bc2:	236e      	movs	r3, #110	; 0x6e
    2bc4:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    2bc8:	2366      	movs	r3, #102	; 0x66
    2bca:	e7ec      	b.n	2ba6 <cbvprintf+0x8fe>
			if (isupper((int)c)) {
    2bcc:	2a01      	cmp	r2, #1
				*buf++ = 'N';
    2bce:	bf07      	ittee	eq
    2bd0:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
    2bd2:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
    2bd4:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
    2bd6:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
    2bd8:	bf0c      	ite	eq
    2bda:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    2bde:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    2be2:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    2be6:	e7de      	b.n	2ba6 <cbvprintf+0x8fe>
	bool is_subnormal = (expo == 0) && (fract != 0);
    2be8:	2000      	movs	r0, #0
    2bea:	e621      	b.n	2830 <cbvprintf+0x588>
				expo--;
    2bec:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    2bee:	1849      	adds	r1, r1, r1
    2bf0:	415b      	adcs	r3, r3
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	dafa      	bge.n	2bec <cbvprintf+0x944>
    2bf6:	e9cd 1308 	strd	r1, r3, [sp, #32]
    2bfa:	e62d      	b.n	2858 <cbvprintf+0x5b0>
			fract >>= 1;
    2bfc:	0840      	lsrs	r0, r0, #1
    2bfe:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    2c02:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2c04:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    2c08:	46ac      	mov	ip, r5
			expo++;
    2c0a:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2c0e:	d2f5      	bcs.n	2bfc <cbvprintf+0x954>
		fract *= 5U;
    2c10:	fb0e f501 	mul.w	r5, lr, r1
    2c14:	fba0 010e 	umull	r0, r1, r0, lr
    2c18:	4429      	add	r1, r5
		decexp--;
    2c1a:	3b01      	subs	r3, #1
		expo++;
    2c1c:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    2c20:	f04f 0c01 	mov.w	ip, #1
    2c24:	e624      	b.n	2870 <cbvprintf+0x5c8>
		fract += 2;
    2c26:	3002      	adds	r0, #2
    2c28:	f141 0100 	adc.w	r1, r1, #0
    2c2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
    2c30:	a808      	add	r0, sp, #32
    2c32:	e9cd 2303 	strd	r2, r3, [sp, #12]
    2c36:	f011 ff9a 	bl	14b6e <_ldiv5>
		decexp++;
    2c3a:	9b04      	ldr	r3, [sp, #16]
    2c3c:	9a03      	ldr	r2, [sp, #12]
    2c3e:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    2c42:	3d01      	subs	r5, #1
		decexp++;
    2c44:	3301      	adds	r3, #1
			fract <<= 1;
    2c46:	1849      	adds	r1, r1, r1
    2c48:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    2c4a:	2800      	cmp	r0, #0
			expo--;
    2c4c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    2c50:	daf9      	bge.n	2c46 <cbvprintf+0x99e>
    2c52:	e9cd 1008 	strd	r1, r0, [sp, #32]
    2c56:	e614      	b.n	2882 <cbvprintf+0x5da>
    2c58:	2300      	movs	r3, #0
    2c5a:	461d      	mov	r5, r3
    2c5c:	e616      	b.n	288c <cbvprintf+0x5e4>
			precision -= decexp;
    2c5e:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    2c62:	2266      	movs	r2, #102	; 0x66
    2c64:	e637      	b.n	28d6 <cbvprintf+0x62e>
	bool prune_zero = false;
    2c66:	2100      	movs	r1, #0
    2c68:	e63f      	b.n	28ea <cbvprintf+0x642>
		decimals = precision + 1;
    2c6a:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
    2c6e:	2910      	cmp	r1, #16
    2c70:	bfa8      	it	ge
    2c72:	2110      	movge	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
    2c74:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
    2c78:	2010      	movs	r0, #16
    2c7a:	9007      	str	r0, [sp, #28]
	while (decimals--) {
    2c7c:	460d      	mov	r5, r1
	*v >>= 1;
    2c7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
    2c82:	b9a5      	cbnz	r5, 2cae <cbvprintf+0xa06>
	fract += round;
    2c84:	9d08      	ldr	r5, [sp, #32]
    2c86:	1940      	adds	r0, r0, r5
    2c88:	9d09      	ldr	r5, [sp, #36]	; 0x24
    2c8a:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
    2c8e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    2c92:	d21b      	bcs.n	2ccc <cbvprintf+0xa24>
	fract += round;
    2c94:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
    2c98:	2a66      	cmp	r2, #102	; 0x66
    2c9a:	f040 8099 	bne.w	2dd0 <cbvprintf+0xb28>
		if (decexp > 0) {
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	dc23      	bgt.n	2cea <cbvprintf+0xa42>
			*buf++ = '0';
    2ca2:	2130      	movs	r1, #48	; 0x30
    2ca4:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    2ca8:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    2cac:	e02f      	b.n	2d0e <cbvprintf+0xa66>
	*v >>= 1;
    2cae:	0840      	lsrs	r0, r0, #1
    2cb0:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    2cb4:	0849      	lsrs	r1, r1, #1
    2cb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
    2cba:	a80a      	add	r0, sp, #40	; 0x28
    2cbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2cc0:	3d01      	subs	r5, #1
    2cc2:	f011 ff54 	bl	14b6e <_ldiv5>
    2cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    2cca:	e7d8      	b.n	2c7e <cbvprintf+0x9d6>
	*v >>= 1;
    2ccc:	0840      	lsrs	r0, r0, #1
    2cce:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    2cd2:	0849      	lsrs	r1, r1, #1
    2cd4:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
    2cd8:	a808      	add	r0, sp, #32
    2cda:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2cde:	f011 ff46 	bl	14b6e <_ldiv5>
		decexp++;
    2ce2:	9b05      	ldr	r3, [sp, #20]
    2ce4:	9a04      	ldr	r2, [sp, #16]
    2ce6:	3301      	adds	r3, #1
    2ce8:	e7d6      	b.n	2c98 <cbvprintf+0x9f0>
	char *buf = bps;
    2cea:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    2cec:	9907      	ldr	r1, [sp, #28]
    2cee:	2900      	cmp	r1, #0
    2cf0:	dd0b      	ble.n	2d0a <cbvprintf+0xa62>
				*buf++ = _get_digit(&fract, &digit_count);
    2cf2:	a907      	add	r1, sp, #28
    2cf4:	a808      	add	r0, sp, #32
    2cf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2cfa:	f011 ff50 	bl	14b9e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2cfe:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    2d00:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    2d04:	3b01      	subs	r3, #1
    2d06:	9a04      	ldr	r2, [sp, #16]
    2d08:	d1f0      	bne.n	2cec <cbvprintf+0xa44>
			conv->pad0_value = decexp;
    2d0a:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    2d0c:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    2d0e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    2d12:	0689      	lsls	r1, r1, #26
    2d14:	d402      	bmi.n	2d1c <cbvprintf+0xa74>
    2d16:	f1b8 0f00 	cmp.w	r8, #0
    2d1a:	dd1d      	ble.n	2d58 <cbvprintf+0xab0>
			*buf++ = '.';
    2d1c:	212e      	movs	r1, #46	; 0x2e
    2d1e:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    2d22:	b19b      	cbz	r3, 2d4c <cbvprintf+0xaa4>
    2d24:	f1b8 0f00 	cmp.w	r8, #0
    2d28:	dd16      	ble.n	2d58 <cbvprintf+0xab0>
			conv->pad0_value = -decexp;
    2d2a:	4259      	negs	r1, r3
    2d2c:	4541      	cmp	r1, r8
    2d2e:	bfa8      	it	ge
    2d30:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    2d32:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    2d36:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    2d38:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    2d3a:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    2d3e:	bfd4      	ite	le
    2d40:	2100      	movle	r1, #0
    2d42:	2101      	movgt	r1, #1
    2d44:	f361 1045 	bfi	r0, r1, #5, #1
    2d48:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    2d4c:	f1b8 0f00 	cmp.w	r8, #0
    2d50:	dd02      	ble.n	2d58 <cbvprintf+0xab0>
    2d52:	9907      	ldr	r1, [sp, #28]
    2d54:	2900      	cmp	r1, #0
    2d56:	dc56      	bgt.n	2e06 <cbvprintf+0xb5e>
	if (prune_zero) {
    2d58:	9903      	ldr	r1, [sp, #12]
    2d5a:	2900      	cmp	r1, #0
    2d5c:	d163      	bne.n	2e26 <cbvprintf+0xb7e>
	conv->pad0_pre_exp = precision;
    2d5e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    2d62:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    2d66:	2945      	cmp	r1, #69	; 0x45
    2d68:	d121      	bne.n	2dae <cbvprintf+0xb06>
		if (decexp < 0) {
    2d6a:	2b00      	cmp	r3, #0
		*buf++ = c;
    2d6c:	4629      	mov	r1, r5
			decexp = -decexp;
    2d6e:	bfb8      	it	lt
    2d70:	425b      	neglt	r3, r3
		*buf++ = c;
    2d72:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    2d76:	bfb4      	ite	lt
    2d78:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    2d7a:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    2d7c:	2b63      	cmp	r3, #99	; 0x63
    2d7e:	706a      	strb	r2, [r5, #1]
    2d80:	dd09      	ble.n	2d96 <cbvprintf+0xaee>
			*buf++ = (decexp / 100) + '0';
    2d82:	2064      	movs	r0, #100	; 0x64
    2d84:	fbb3 f2f0 	udiv	r2, r3, r0
    2d88:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    2d8c:	1ce9      	adds	r1, r5, #3
    2d8e:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    2d92:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    2d96:	200a      	movs	r0, #10
    2d98:	460d      	mov	r5, r1
    2d9a:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    2d9e:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    2da2:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2da6:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2da8:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    2dac:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    2dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2db0:	2b00      	cmp	r3, #0
    2db2:	dc43      	bgt.n	2e3c <cbvprintf+0xb94>
    2db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2db6:	2b00      	cmp	r3, #0
    2db8:	bfd4      	ite	le
    2dba:	2300      	movle	r3, #0
    2dbc:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2dbe:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    2dc2:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    2dc6:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    2dc8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    2dcc:	702b      	strb	r3, [r5, #0]
	return bps;
    2dce:	e5fd      	b.n	29cc <cbvprintf+0x724>
		*buf = _get_digit(&fract, &digit_count);
    2dd0:	a907      	add	r1, sp, #28
    2dd2:	a808      	add	r0, sp, #32
    2dd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2dd8:	f011 fee1 	bl	14b9e <_get_digit>
		if (*buf++ != '0') {
    2ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    2de0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    2de4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    2de8:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2dea:	bf18      	it	ne
    2dec:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    2df0:	0688      	lsls	r0, r1, #26
    2df2:	d402      	bmi.n	2dfa <cbvprintf+0xb52>
    2df4:	f1b8 0f00 	cmp.w	r8, #0
    2df8:	dd12      	ble.n	2e20 <cbvprintf+0xb78>
			*buf++ = '.';
    2dfa:	212e      	movs	r1, #46	; 0x2e
    2dfc:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    2e00:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    2e04:	e7a2      	b.n	2d4c <cbvprintf+0xaa4>
		*buf++ = _get_digit(&fract, &digit_count);
    2e06:	a907      	add	r1, sp, #28
    2e08:	a808      	add	r0, sp, #32
    2e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2e0e:	f011 fec6 	bl	14b9e <_get_digit>
		precision--;
    2e12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    2e1a:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    2e1e:	e795      	b.n	2d4c <cbvprintf+0xaa4>
		if (*buf++ != '0') {
    2e20:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    2e24:	e798      	b.n	2d58 <cbvprintf+0xab0>
		conv->pad0_pre_exp = 0;
    2e26:	2100      	movs	r1, #0
    2e28:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    2e2a:	4628      	mov	r0, r5
    2e2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    2e30:	2930      	cmp	r1, #48	; 0x30
    2e32:	d0fa      	beq.n	2e2a <cbvprintf+0xb82>
		if (*buf != '.') {
    2e34:	292e      	cmp	r1, #46	; 0x2e
    2e36:	bf18      	it	ne
    2e38:	4605      	movne	r5, r0
    2e3a:	e792      	b.n	2d62 <cbvprintf+0xaba>
		|| (conv->pad0_pre_exp > 0);
    2e3c:	2301      	movs	r3, #1
    2e3e:	e7be      	b.n	2dbe <cbvprintf+0xb16>
			bpe = bps + 5;
    2e40:	4d0b      	ldr	r5, [pc, #44]	; (2e70 <cbvprintf+0xbc8>)
		char sign = 0;
    2e42:	4607      	mov	r7, r0
			bps = "(nil)";
    2e44:	1f6a      	subs	r2, r5, #5
    2e46:	e5c2      	b.n	29ce <cbvprintf+0x726>
		} else if (conv->altform_0) {
    2e48:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    2e4a:	bf48      	it	mi
    2e4c:	3301      	addmi	r3, #1
    2e4e:	e5c7      	b.n	29e0 <cbvprintf+0x738>
					OUTC(pad);
    2e50:	4651      	mov	r1, sl
    2e52:	4640      	mov	r0, r8
    2e54:	9203      	str	r2, [sp, #12]
    2e56:	47c8      	blx	r9
    2e58:	2800      	cmp	r0, #0
    2e5a:	9a03      	ldr	r2, [sp, #12]
    2e5c:	f6bf ade4 	bge.w	2a28 <cbvprintf+0x780>
#undef OUTS
#undef OUTC
}
    2e60:	b01b      	add	sp, #108	; 0x6c
    2e62:	ecbd 8b02 	vpop	{d8}
    2e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e6a:	bf00      	nop
    2e6c:	00046010 	.word	0x00046010
    2e70:	00045e4d 	.word	0x00045e4d
				char pad = ' ';
    2e74:	f04f 0820 	mov.w	r8, #32
    2e78:	e5d5      	b.n	2a26 <cbvprintf+0x77e>
					pad = '0';
    2e7a:	f04f 0830 	mov.w	r8, #48	; 0x30
    2e7e:	e5d2      	b.n	2a26 <cbvprintf+0x77e>
					OUTC(*cp++);
    2e80:	4651      	mov	r1, sl
    2e82:	47c8      	blx	r9
    2e84:	2800      	cmp	r0, #0
    2e86:	f6bf adef 	bge.w	2a68 <cbvprintf+0x7c0>
    2e8a:	e7e9      	b.n	2e60 <cbvprintf+0xbb8>
					OUTC(*cp++);
    2e8c:	4651      	mov	r1, sl
    2e8e:	9203      	str	r2, [sp, #12]
    2e90:	47c8      	blx	r9
    2e92:	2800      	cmp	r0, #0
    2e94:	9a03      	ldr	r2, [sp, #12]
    2e96:	dbe3      	blt.n	2e60 <cbvprintf+0xbb8>
				while (isdigit((int)*cp)) {
    2e98:	7810      	ldrb	r0, [r2, #0]
    2e9a:	4b37      	ldr	r3, [pc, #220]	; (2f78 <cbvprintf+0xcd0>)
    2e9c:	5cc3      	ldrb	r3, [r0, r3]
    2e9e:	075b      	lsls	r3, r3, #29
    2ea0:	4617      	mov	r7, r2
    2ea2:	eb06 0802 	add.w	r8, r6, r2
    2ea6:	f102 0201 	add.w	r2, r2, #1
    2eaa:	d4ef      	bmi.n	2e8c <cbvprintf+0xbe4>
				if (!conv->pad_postdp) {
    2eac:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    2eb0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    2eb2:	0699      	lsls	r1, r3, #26
    2eb4:	d407      	bmi.n	2ec6 <cbvprintf+0xc1e>
    2eb6:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    2eb8:	2e00      	cmp	r6, #0
    2eba:	eba8 0206 	sub.w	r2, r8, r6
    2ebe:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    2ec2:	dc0f      	bgt.n	2ee4 <cbvprintf+0xc3c>
    2ec4:	4690      	mov	r8, r2
				if (*cp == '.') {
    2ec6:	7838      	ldrb	r0, [r7, #0]
    2ec8:	282e      	cmp	r0, #46	; 0x2e
    2eca:	d108      	bne.n	2ede <cbvprintf+0xc36>
					OUTC(*cp++);
    2ecc:	4651      	mov	r1, sl
    2ece:	47c8      	blx	r9
						OUTC('0');
    2ed0:	2800      	cmp	r0, #0
    2ed2:	dbc5      	blt.n	2e60 <cbvprintf+0xbb8>
					while (pad_len-- > 0) {
    2ed4:	2e00      	cmp	r6, #0
						OUTC('0');
    2ed6:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    2eda:	dc09      	bgt.n	2ef0 <cbvprintf+0xc48>
					OUTC(*cp++);
    2edc:	3701      	adds	r7, #1
    2ede:	eba8 0607 	sub.w	r6, r8, r7
    2ee2:	e00e      	b.n	2f02 <cbvprintf+0xc5a>
						OUTC('0');
    2ee4:	4651      	mov	r1, sl
    2ee6:	2030      	movs	r0, #48	; 0x30
    2ee8:	47c8      	blx	r9
    2eea:	2800      	cmp	r0, #0
    2eec:	dae4      	bge.n	2eb8 <cbvprintf+0xc10>
    2eee:	e7b7      	b.n	2e60 <cbvprintf+0xbb8>
						OUTC('0');
    2ef0:	4651      	mov	r1, sl
    2ef2:	2030      	movs	r0, #48	; 0x30
    2ef4:	47c8      	blx	r9
    2ef6:	3e01      	subs	r6, #1
    2ef8:	e7ea      	b.n	2ed0 <cbvprintf+0xc28>
					OUTC(*cp++);
    2efa:	4651      	mov	r1, sl
    2efc:	47c8      	blx	r9
    2efe:	2800      	cmp	r0, #0
    2f00:	dbae      	blt.n	2e60 <cbvprintf+0xbb8>
				while (isdigit((int)*cp)) {
    2f02:	4a1d      	ldr	r2, [pc, #116]	; (2f78 <cbvprintf+0xcd0>)
    2f04:	46b8      	mov	r8, r7
    2f06:	19f3      	adds	r3, r6, r7
    2f08:	f817 0b01 	ldrb.w	r0, [r7], #1
    2f0c:	5c12      	ldrb	r2, [r2, r0]
    2f0e:	0752      	lsls	r2, r2, #29
    2f10:	d4f3      	bmi.n	2efa <cbvprintf+0xc52>
    2f12:	e5b0      	b.n	2a76 <cbvprintf+0x7ce>
				OUTC('0');
    2f14:	4651      	mov	r1, sl
    2f16:	2030      	movs	r0, #48	; 0x30
    2f18:	47c8      	blx	r9
    2f1a:	2800      	cmp	r0, #0
    2f1c:	dba0      	blt.n	2e60 <cbvprintf+0xbb8>
    2f1e:	3601      	adds	r6, #1
    2f20:	e5ac      	b.n	2a7c <cbvprintf+0x7d4>
			if (conv->altform_0c | conv->altform_0) {
    2f22:	06d8      	lsls	r0, r3, #27
    2f24:	d401      	bmi.n	2f2a <cbvprintf+0xc82>
    2f26:	0719      	lsls	r1, r3, #28
    2f28:	d507      	bpl.n	2f3a <cbvprintf+0xc92>
				OUTC('0');
    2f2a:	4651      	mov	r1, sl
    2f2c:	2030      	movs	r0, #48	; 0x30
    2f2e:	9203      	str	r2, [sp, #12]
    2f30:	47c8      	blx	r9
    2f32:	2800      	cmp	r0, #0
    2f34:	db94      	blt.n	2e60 <cbvprintf+0xbb8>
    2f36:	9a03      	ldr	r2, [sp, #12]
    2f38:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    2f3a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2f3e:	06db      	lsls	r3, r3, #27
    2f40:	d508      	bpl.n	2f54 <cbvprintf+0xcac>
				OUTC(conv->specifier);
    2f42:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    2f46:	9203      	str	r2, [sp, #12]
    2f48:	4651      	mov	r1, sl
    2f4a:	47c8      	blx	r9
    2f4c:	2800      	cmp	r0, #0
    2f4e:	db87      	blt.n	2e60 <cbvprintf+0xbb8>
    2f50:	9a03      	ldr	r2, [sp, #12]
    2f52:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    2f54:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    2f56:	4437      	add	r7, r6
    2f58:	1bbb      	subs	r3, r7, r6
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	dc01      	bgt.n	2f62 <cbvprintf+0xcba>
			OUTS(bps, bpe);
    2f5e:	462b      	mov	r3, r5
    2f60:	e592      	b.n	2a88 <cbvprintf+0x7e0>
				OUTC('0');
    2f62:	4651      	mov	r1, sl
    2f64:	2030      	movs	r0, #48	; 0x30
    2f66:	9203      	str	r2, [sp, #12]
    2f68:	47c8      	blx	r9
    2f6a:	2800      	cmp	r0, #0
    2f6c:	f6ff af78 	blt.w	2e60 <cbvprintf+0xbb8>
    2f70:	9a03      	ldr	r2, [sp, #12]
    2f72:	3601      	adds	r6, #1
    2f74:	e7f0      	b.n	2f58 <cbvprintf+0xcb0>
    2f76:	bf00      	nop
    2f78:	00046011 	.word	0x00046011
    2f7c:	00000000 	.word	0x00000000

00002f80 <cos>:
    2f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2f82:	ec53 2b10 	vmov	r2, r3, d0
    2f86:	4826      	ldr	r0, [pc, #152]	; (3020 <cos+0xa0>)
    2f88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    2f8c:	4281      	cmp	r1, r0
    2f8e:	dc06      	bgt.n	2f9e <cos+0x1e>
    2f90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 3018 <cos+0x98>
    2f94:	b005      	add	sp, #20
    2f96:	f85d eb04 	ldr.w	lr, [sp], #4
    2f9a:	f001 b849 	b.w	4030 <__kernel_cos>
    2f9e:	4821      	ldr	r0, [pc, #132]	; (3024 <cos+0xa4>)
    2fa0:	4281      	cmp	r1, r0
    2fa2:	dd09      	ble.n	2fb8 <cos+0x38>
    2fa4:	ee10 0a10 	vmov	r0, s0
    2fa8:	4619      	mov	r1, r3
    2faa:	f7fd f8fd 	bl	1a8 <__aeabi_dsub>
    2fae:	ec41 0b10 	vmov	d0, r0, r1
    2fb2:	b005      	add	sp, #20
    2fb4:	f85d fb04 	ldr.w	pc, [sp], #4
    2fb8:	4668      	mov	r0, sp
    2fba:	f000 fe2d 	bl	3c18 <__ieee754_rem_pio2>
    2fbe:	f000 0003 	and.w	r0, r0, #3
    2fc2:	2801      	cmp	r0, #1
    2fc4:	d00b      	beq.n	2fde <cos+0x5e>
    2fc6:	2802      	cmp	r0, #2
    2fc8:	d016      	beq.n	2ff8 <cos+0x78>
    2fca:	b9e0      	cbnz	r0, 3006 <cos+0x86>
    2fcc:	ed9d 1b02 	vldr	d1, [sp, #8]
    2fd0:	ed9d 0b00 	vldr	d0, [sp]
    2fd4:	f001 f82c 	bl	4030 <__kernel_cos>
    2fd8:	ec51 0b10 	vmov	r0, r1, d0
    2fdc:	e7e7      	b.n	2fae <cos+0x2e>
    2fde:	ed9d 1b02 	vldr	d1, [sp, #8]
    2fe2:	ed9d 0b00 	vldr	d0, [sp]
    2fe6:	f001 fc37 	bl	4858 <__kernel_sin>
    2fea:	ec53 2b10 	vmov	r2, r3, d0
    2fee:	ee10 0a10 	vmov	r0, s0
    2ff2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    2ff6:	e7da      	b.n	2fae <cos+0x2e>
    2ff8:	ed9d 1b02 	vldr	d1, [sp, #8]
    2ffc:	ed9d 0b00 	vldr	d0, [sp]
    3000:	f001 f816 	bl	4030 <__kernel_cos>
    3004:	e7f1      	b.n	2fea <cos+0x6a>
    3006:	ed9d 1b02 	vldr	d1, [sp, #8]
    300a:	ed9d 0b00 	vldr	d0, [sp]
    300e:	2001      	movs	r0, #1
    3010:	f001 fc22 	bl	4858 <__kernel_sin>
    3014:	e7e0      	b.n	2fd8 <cos+0x58>
    3016:	bf00      	nop
	...
    3020:	3fe921fb 	.word	0x3fe921fb
    3024:	7fefffff 	.word	0x7fefffff

00003028 <floor>:
    3028:	ec51 0b10 	vmov	r0, r1, d0
    302c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3030:	f3c1 570a 	ubfx	r7, r1, #20, #11
    3034:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    3038:	2e13      	cmp	r6, #19
    303a:	ee10 5a10 	vmov	r5, s0
    303e:	ee10 8a10 	vmov	r8, s0
    3042:	460c      	mov	r4, r1
    3044:	dc32      	bgt.n	30ac <floor+0x84>
    3046:	2e00      	cmp	r6, #0
    3048:	da14      	bge.n	3074 <floor+0x4c>
    304a:	a333      	add	r3, pc, #204	; (adr r3, 3118 <floor+0xf0>)
    304c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3050:	f7fd f8ac 	bl	1ac <__adddf3>
    3054:	2200      	movs	r2, #0
    3056:	2300      	movs	r3, #0
    3058:	f7fd fcee 	bl	a38 <__aeabi_dcmpgt>
    305c:	b138      	cbz	r0, 306e <floor+0x46>
    305e:	2c00      	cmp	r4, #0
    3060:	da57      	bge.n	3112 <floor+0xea>
    3062:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    3066:	431d      	orrs	r5, r3
    3068:	d001      	beq.n	306e <floor+0x46>
    306a:	4c2d      	ldr	r4, [pc, #180]	; (3120 <floor+0xf8>)
    306c:	2500      	movs	r5, #0
    306e:	4621      	mov	r1, r4
    3070:	4628      	mov	r0, r5
    3072:	e025      	b.n	30c0 <floor+0x98>
    3074:	4f2b      	ldr	r7, [pc, #172]	; (3124 <floor+0xfc>)
    3076:	4137      	asrs	r7, r6
    3078:	ea01 0307 	and.w	r3, r1, r7
    307c:	4303      	orrs	r3, r0
    307e:	d01f      	beq.n	30c0 <floor+0x98>
    3080:	a325      	add	r3, pc, #148	; (adr r3, 3118 <floor+0xf0>)
    3082:	e9d3 2300 	ldrd	r2, r3, [r3]
    3086:	f7fd f891 	bl	1ac <__adddf3>
    308a:	2200      	movs	r2, #0
    308c:	2300      	movs	r3, #0
    308e:	f7fd fcd3 	bl	a38 <__aeabi_dcmpgt>
    3092:	2800      	cmp	r0, #0
    3094:	d0eb      	beq.n	306e <floor+0x46>
    3096:	2c00      	cmp	r4, #0
    3098:	bfbe      	ittt	lt
    309a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    309e:	fa43 f606 	asrlt.w	r6, r3, r6
    30a2:	19a4      	addlt	r4, r4, r6
    30a4:	ea24 0407 	bic.w	r4, r4, r7
    30a8:	2500      	movs	r5, #0
    30aa:	e7e0      	b.n	306e <floor+0x46>
    30ac:	2e33      	cmp	r6, #51	; 0x33
    30ae:	dd0b      	ble.n	30c8 <floor+0xa0>
    30b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    30b4:	d104      	bne.n	30c0 <floor+0x98>
    30b6:	ee10 2a10 	vmov	r2, s0
    30ba:	460b      	mov	r3, r1
    30bc:	f7fd f876 	bl	1ac <__adddf3>
    30c0:	ec41 0b10 	vmov	d0, r0, r1
    30c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    30cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30d0:	fa23 f707 	lsr.w	r7, r3, r7
    30d4:	4207      	tst	r7, r0
    30d6:	d0f3      	beq.n	30c0 <floor+0x98>
    30d8:	a30f      	add	r3, pc, #60	; (adr r3, 3118 <floor+0xf0>)
    30da:	e9d3 2300 	ldrd	r2, r3, [r3]
    30de:	f7fd f865 	bl	1ac <__adddf3>
    30e2:	2200      	movs	r2, #0
    30e4:	2300      	movs	r3, #0
    30e6:	f7fd fca7 	bl	a38 <__aeabi_dcmpgt>
    30ea:	2800      	cmp	r0, #0
    30ec:	d0bf      	beq.n	306e <floor+0x46>
    30ee:	2c00      	cmp	r4, #0
    30f0:	da02      	bge.n	30f8 <floor+0xd0>
    30f2:	2e14      	cmp	r6, #20
    30f4:	d103      	bne.n	30fe <floor+0xd6>
    30f6:	3401      	adds	r4, #1
    30f8:	ea25 0507 	bic.w	r5, r5, r7
    30fc:	e7b7      	b.n	306e <floor+0x46>
    30fe:	2301      	movs	r3, #1
    3100:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    3104:	fa03 f606 	lsl.w	r6, r3, r6
    3108:	4435      	add	r5, r6
    310a:	4545      	cmp	r5, r8
    310c:	bf38      	it	cc
    310e:	18e4      	addcc	r4, r4, r3
    3110:	e7f2      	b.n	30f8 <floor+0xd0>
    3112:	2500      	movs	r5, #0
    3114:	462c      	mov	r4, r5
    3116:	e7aa      	b.n	306e <floor+0x46>
    3118:	8800759c 	.word	0x8800759c
    311c:	7e37e43c 	.word	0x7e37e43c
    3120:	bff00000 	.word	0xbff00000
    3124:	000fffff 	.word	0x000fffff

00003128 <sin>:
    3128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    312a:	ec53 2b10 	vmov	r2, r3, d0
    312e:	4828      	ldr	r0, [pc, #160]	; (31d0 <sin+0xa8>)
    3130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    3134:	4281      	cmp	r1, r0
    3136:	dc07      	bgt.n	3148 <sin+0x20>
    3138:	ed9f 1b23 	vldr	d1, [pc, #140]	; 31c8 <sin+0xa0>
    313c:	2000      	movs	r0, #0
    313e:	b005      	add	sp, #20
    3140:	f85d eb04 	ldr.w	lr, [sp], #4
    3144:	f001 bb88 	b.w	4858 <__kernel_sin>
    3148:	4822      	ldr	r0, [pc, #136]	; (31d4 <sin+0xac>)
    314a:	4281      	cmp	r1, r0
    314c:	dd09      	ble.n	3162 <sin+0x3a>
    314e:	ee10 0a10 	vmov	r0, s0
    3152:	4619      	mov	r1, r3
    3154:	f7fd f828 	bl	1a8 <__aeabi_dsub>
    3158:	ec41 0b10 	vmov	d0, r0, r1
    315c:	b005      	add	sp, #20
    315e:	f85d fb04 	ldr.w	pc, [sp], #4
    3162:	4668      	mov	r0, sp
    3164:	f000 fd58 	bl	3c18 <__ieee754_rem_pio2>
    3168:	f000 0003 	and.w	r0, r0, #3
    316c:	2801      	cmp	r0, #1
    316e:	d00c      	beq.n	318a <sin+0x62>
    3170:	2802      	cmp	r0, #2
    3172:	d011      	beq.n	3198 <sin+0x70>
    3174:	b9f0      	cbnz	r0, 31b4 <sin+0x8c>
    3176:	ed9d 1b02 	vldr	d1, [sp, #8]
    317a:	ed9d 0b00 	vldr	d0, [sp]
    317e:	2001      	movs	r0, #1
    3180:	f001 fb6a 	bl	4858 <__kernel_sin>
    3184:	ec51 0b10 	vmov	r0, r1, d0
    3188:	e7e6      	b.n	3158 <sin+0x30>
    318a:	ed9d 1b02 	vldr	d1, [sp, #8]
    318e:	ed9d 0b00 	vldr	d0, [sp]
    3192:	f000 ff4d 	bl	4030 <__kernel_cos>
    3196:	e7f5      	b.n	3184 <sin+0x5c>
    3198:	ed9d 1b02 	vldr	d1, [sp, #8]
    319c:	ed9d 0b00 	vldr	d0, [sp]
    31a0:	2001      	movs	r0, #1
    31a2:	f001 fb59 	bl	4858 <__kernel_sin>
    31a6:	ec53 2b10 	vmov	r2, r3, d0
    31aa:	ee10 0a10 	vmov	r0, s0
    31ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    31b2:	e7d1      	b.n	3158 <sin+0x30>
    31b4:	ed9d 1b02 	vldr	d1, [sp, #8]
    31b8:	ed9d 0b00 	vldr	d0, [sp]
    31bc:	f000 ff38 	bl	4030 <__kernel_cos>
    31c0:	e7f1      	b.n	31a6 <sin+0x7e>
    31c2:	bf00      	nop
    31c4:	f3af 8000 	nop.w
	...
    31d0:	3fe921fb 	.word	0x3fe921fb
    31d4:	7fefffff 	.word	0x7fefffff

000031d8 <__ieee754_pow>:
    31d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31dc:	ed2d 8b06 	vpush	{d8-d10}
    31e0:	b089      	sub	sp, #36	; 0x24
    31e2:	ed8d 1b00 	vstr	d1, [sp]
    31e6:	e9dd 0700 	ldrd	r0, r7, [sp]
    31ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
    31ee:	ea56 0100 	orrs.w	r1, r6, r0
    31f2:	ec53 2b10 	vmov	r2, r3, d0
    31f6:	f000 84cc 	beq.w	3b92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfa>
    31fa:	497f      	ldr	r1, [pc, #508]	; (33f8 <__ieee754_pow+0x220>)
    31fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    3200:	428c      	cmp	r4, r1
    3202:	ee10 8a10 	vmov	r8, s0
    3206:	4699      	mov	r9, r3
    3208:	dc09      	bgt.n	321e <__ieee754_pow+0x46>
    320a:	d103      	bne.n	3214 <__ieee754_pow+0x3c>
    320c:	b97a      	cbnz	r2, 322e <__ieee754_pow+0x56>
    320e:	42a6      	cmp	r6, r4
    3210:	dd02      	ble.n	3218 <__ieee754_pow+0x40>
    3212:	e00c      	b.n	322e <__ieee754_pow+0x56>
    3214:	428e      	cmp	r6, r1
    3216:	dc02      	bgt.n	321e <__ieee754_pow+0x46>
    3218:	428e      	cmp	r6, r1
    321a:	d110      	bne.n	323e <__ieee754_pow+0x66>
    321c:	b178      	cbz	r0, 323e <__ieee754_pow+0x66>
    321e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    3222:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    3226:	ea54 0308 	orrs.w	r3, r4, r8
    322a:	f000 84b2 	beq.w	3b92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfa>
    322e:	4873      	ldr	r0, [pc, #460]	; (33fc <__ieee754_pow+0x224>)
    3230:	b009      	add	sp, #36	; 0x24
    3232:	ecbd 8b06 	vpop	{d8-d10}
    3236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    323a:	f001 bbcd 	b.w	49d8 <nan>
    323e:	f1b9 0f00 	cmp.w	r9, #0
    3242:	da36      	bge.n	32b2 <__ieee754_pow+0xda>
    3244:	496e      	ldr	r1, [pc, #440]	; (3400 <__ieee754_pow+0x228>)
    3246:	428e      	cmp	r6, r1
    3248:	dc51      	bgt.n	32ee <__ieee754_pow+0x116>
    324a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
    324e:	428e      	cmp	r6, r1
    3250:	f340 84aa 	ble.w	3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
    3254:	1531      	asrs	r1, r6, #20
    3256:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    325a:	2914      	cmp	r1, #20
    325c:	dd0f      	ble.n	327e <__ieee754_pow+0xa6>
    325e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
    3262:	fa20 fc01 	lsr.w	ip, r0, r1
    3266:	fa0c f101 	lsl.w	r1, ip, r1
    326a:	4281      	cmp	r1, r0
    326c:	f040 849c 	bne.w	3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
    3270:	f00c 0c01 	and.w	ip, ip, #1
    3274:	f1cc 0102 	rsb	r1, ip, #2
    3278:	9104      	str	r1, [sp, #16]
    327a:	b180      	cbz	r0, 329e <__ieee754_pow+0xc6>
    327c:	e059      	b.n	3332 <__ieee754_pow+0x15a>
    327e:	2800      	cmp	r0, #0
    3280:	d155      	bne.n	332e <__ieee754_pow+0x156>
    3282:	f1c1 0114 	rsb	r1, r1, #20
    3286:	fa46 fc01 	asr.w	ip, r6, r1
    328a:	fa0c f101 	lsl.w	r1, ip, r1
    328e:	42b1      	cmp	r1, r6
    3290:	f040 8487 	bne.w	3ba2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10a>
    3294:	f00c 0c01 	and.w	ip, ip, #1
    3298:	f1cc 0102 	rsb	r1, ip, #2
    329c:	9104      	str	r1, [sp, #16]
    329e:	4959      	ldr	r1, [pc, #356]	; (3404 <__ieee754_pow+0x22c>)
    32a0:	428e      	cmp	r6, r1
    32a2:	d12d      	bne.n	3300 <__ieee754_pow+0x128>
    32a4:	2f00      	cmp	r7, #0
    32a6:	da79      	bge.n	339c <__ieee754_pow+0x1c4>
    32a8:	4956      	ldr	r1, [pc, #344]	; (3404 <__ieee754_pow+0x22c>)
    32aa:	2000      	movs	r0, #0
    32ac:	f7fd fa5e 	bl	76c <__aeabi_ddiv>
    32b0:	e016      	b.n	32e0 <__ieee754_pow+0x108>
    32b2:	2100      	movs	r1, #0
    32b4:	9104      	str	r1, [sp, #16]
    32b6:	2800      	cmp	r0, #0
    32b8:	d13b      	bne.n	3332 <__ieee754_pow+0x15a>
    32ba:	494f      	ldr	r1, [pc, #316]	; (33f8 <__ieee754_pow+0x220>)
    32bc:	428e      	cmp	r6, r1
    32be:	d1ee      	bne.n	329e <__ieee754_pow+0xc6>
    32c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    32c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    32c8:	ea53 0308 	orrs.w	r3, r3, r8
    32cc:	f000 8461 	beq.w	3b92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfa>
    32d0:	4b4d      	ldr	r3, [pc, #308]	; (3408 <__ieee754_pow+0x230>)
    32d2:	429c      	cmp	r4, r3
    32d4:	dd0d      	ble.n	32f2 <__ieee754_pow+0x11a>
    32d6:	2f00      	cmp	r7, #0
    32d8:	f280 845f 	bge.w	3b9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x102>
    32dc:	2000      	movs	r0, #0
    32de:	2100      	movs	r1, #0
    32e0:	ec41 0b10 	vmov	d0, r0, r1
    32e4:	b009      	add	sp, #36	; 0x24
    32e6:	ecbd 8b06 	vpop	{d8-d10}
    32ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32ee:	2102      	movs	r1, #2
    32f0:	e7e0      	b.n	32b4 <__ieee754_pow+0xdc>
    32f2:	2f00      	cmp	r7, #0
    32f4:	daf2      	bge.n	32dc <__ieee754_pow+0x104>
    32f6:	e9dd 0300 	ldrd	r0, r3, [sp]
    32fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    32fe:	e7ef      	b.n	32e0 <__ieee754_pow+0x108>
    3300:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
    3304:	d104      	bne.n	3310 <__ieee754_pow+0x138>
    3306:	4610      	mov	r0, r2
    3308:	4619      	mov	r1, r3
    330a:	f7fd f905 	bl	518 <__aeabi_dmul>
    330e:	e7e7      	b.n	32e0 <__ieee754_pow+0x108>
    3310:	493e      	ldr	r1, [pc, #248]	; (340c <__ieee754_pow+0x234>)
    3312:	428f      	cmp	r7, r1
    3314:	d10d      	bne.n	3332 <__ieee754_pow+0x15a>
    3316:	f1b9 0f00 	cmp.w	r9, #0
    331a:	db0a      	blt.n	3332 <__ieee754_pow+0x15a>
    331c:	ec43 2b10 	vmov	d0, r2, r3
    3320:	b009      	add	sp, #36	; 0x24
    3322:	ecbd 8b06 	vpop	{d8-d10}
    3326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    332a:	f00b bec7 	b.w	f0bc <__ieee754_sqrt>
    332e:	2100      	movs	r1, #0
    3330:	9104      	str	r1, [sp, #16]
    3332:	ec43 2b10 	vmov	d0, r2, r3
    3336:	e9cd 2302 	strd	r2, r3, [sp, #8]
    333a:	f012 fac0 	bl	158be <fabs>
    333e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3342:	ec51 0b10 	vmov	r0, r1, d0
    3346:	f1b8 0f00 	cmp.w	r8, #0
    334a:	d12a      	bne.n	33a2 <__ieee754_pow+0x1ca>
    334c:	b12c      	cbz	r4, 335a <__ieee754_pow+0x182>
    334e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 3404 <__ieee754_pow+0x22c>
    3352:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
    3356:	45e6      	cmp	lr, ip
    3358:	d123      	bne.n	33a2 <__ieee754_pow+0x1ca>
    335a:	2f00      	cmp	r7, #0
    335c:	da05      	bge.n	336a <__ieee754_pow+0x192>
    335e:	4602      	mov	r2, r0
    3360:	460b      	mov	r3, r1
    3362:	2000      	movs	r0, #0
    3364:	4927      	ldr	r1, [pc, #156]	; (3404 <__ieee754_pow+0x22c>)
    3366:	f7fd fa01 	bl	76c <__aeabi_ddiv>
    336a:	f1b9 0f00 	cmp.w	r9, #0
    336e:	dab7      	bge.n	32e0 <__ieee754_pow+0x108>
    3370:	9b04      	ldr	r3, [sp, #16]
    3372:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    3376:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    337a:	4323      	orrs	r3, r4
    337c:	d108      	bne.n	3390 <__ieee754_pow+0x1b8>
    337e:	4602      	mov	r2, r0
    3380:	460b      	mov	r3, r1
    3382:	4610      	mov	r0, r2
    3384:	4619      	mov	r1, r3
    3386:	f7fc ff0f 	bl	1a8 <__aeabi_dsub>
    338a:	4602      	mov	r2, r0
    338c:	460b      	mov	r3, r1
    338e:	e78d      	b.n	32ac <__ieee754_pow+0xd4>
    3390:	9b04      	ldr	r3, [sp, #16]
    3392:	2b01      	cmp	r3, #1
    3394:	d1a4      	bne.n	32e0 <__ieee754_pow+0x108>
    3396:	4602      	mov	r2, r0
    3398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    339c:	4610      	mov	r0, r2
    339e:	4619      	mov	r1, r3
    33a0:	e79e      	b.n	32e0 <__ieee754_pow+0x108>
    33a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
    33a6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
    33aa:	9506      	str	r5, [sp, #24]
    33ac:	9d04      	ldr	r5, [sp, #16]
    33ae:	46ac      	mov	ip, r5
    33b0:	9d06      	ldr	r5, [sp, #24]
    33b2:	ea5c 0505 	orrs.w	r5, ip, r5
    33b6:	d0e4      	beq.n	3382 <__ieee754_pow+0x1aa>
    33b8:	4b15      	ldr	r3, [pc, #84]	; (3410 <__ieee754_pow+0x238>)
    33ba:	429e      	cmp	r6, r3
    33bc:	f340 80fc 	ble.w	35b8 <__ieee754_pow+0x3e0>
    33c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    33c4:	429e      	cmp	r6, r3
    33c6:	4b10      	ldr	r3, [pc, #64]	; (3408 <__ieee754_pow+0x230>)
    33c8:	dd07      	ble.n	33da <__ieee754_pow+0x202>
    33ca:	429c      	cmp	r4, r3
    33cc:	dc0a      	bgt.n	33e4 <__ieee754_pow+0x20c>
    33ce:	2f00      	cmp	r7, #0
    33d0:	da84      	bge.n	32dc <__ieee754_pow+0x104>
    33d2:	a307      	add	r3, pc, #28	; (adr r3, 33f0 <__ieee754_pow+0x218>)
    33d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    33d8:	e795      	b.n	3306 <__ieee754_pow+0x12e>
    33da:	429c      	cmp	r4, r3
    33dc:	dbf7      	blt.n	33ce <__ieee754_pow+0x1f6>
    33de:	4b09      	ldr	r3, [pc, #36]	; (3404 <__ieee754_pow+0x22c>)
    33e0:	429c      	cmp	r4, r3
    33e2:	dd17      	ble.n	3414 <__ieee754_pow+0x23c>
    33e4:	2f00      	cmp	r7, #0
    33e6:	dcf4      	bgt.n	33d2 <__ieee754_pow+0x1fa>
    33e8:	e778      	b.n	32dc <__ieee754_pow+0x104>
    33ea:	bf00      	nop
    33ec:	f3af 8000 	nop.w
    33f0:	8800759c 	.word	0x8800759c
    33f4:	7e37e43c 	.word	0x7e37e43c
    33f8:	7ff00000 	.word	0x7ff00000
    33fc:	0004597a 	.word	0x0004597a
    3400:	433fffff 	.word	0x433fffff
    3404:	3ff00000 	.word	0x3ff00000
    3408:	3fefffff 	.word	0x3fefffff
    340c:	3fe00000 	.word	0x3fe00000
    3410:	41e00000 	.word	0x41e00000
    3414:	4b64      	ldr	r3, [pc, #400]	; (35a8 <__ieee754_pow+0x3d0>)
    3416:	2200      	movs	r2, #0
    3418:	f7fc fec6 	bl	1a8 <__aeabi_dsub>
    341c:	a356      	add	r3, pc, #344	; (adr r3, 3578 <__ieee754_pow+0x3a0>)
    341e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3422:	4604      	mov	r4, r0
    3424:	460d      	mov	r5, r1
    3426:	f7fd f877 	bl	518 <__aeabi_dmul>
    342a:	a355      	add	r3, pc, #340	; (adr r3, 3580 <__ieee754_pow+0x3a8>)
    342c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3430:	4606      	mov	r6, r0
    3432:	460f      	mov	r7, r1
    3434:	4620      	mov	r0, r4
    3436:	4629      	mov	r1, r5
    3438:	f7fd f86e 	bl	518 <__aeabi_dmul>
    343c:	4b5b      	ldr	r3, [pc, #364]	; (35ac <__ieee754_pow+0x3d4>)
    343e:	4682      	mov	sl, r0
    3440:	468b      	mov	fp, r1
    3442:	2200      	movs	r2, #0
    3444:	4620      	mov	r0, r4
    3446:	4629      	mov	r1, r5
    3448:	f7fd f866 	bl	518 <__aeabi_dmul>
    344c:	4602      	mov	r2, r0
    344e:	460b      	mov	r3, r1
    3450:	a14d      	add	r1, pc, #308	; (adr r1, 3588 <__ieee754_pow+0x3b0>)
    3452:	e9d1 0100 	ldrd	r0, r1, [r1]
    3456:	f7fc fea7 	bl	1a8 <__aeabi_dsub>
    345a:	4622      	mov	r2, r4
    345c:	462b      	mov	r3, r5
    345e:	f7fd f85b 	bl	518 <__aeabi_dmul>
    3462:	4602      	mov	r2, r0
    3464:	460b      	mov	r3, r1
    3466:	2000      	movs	r0, #0
    3468:	4951      	ldr	r1, [pc, #324]	; (35b0 <__ieee754_pow+0x3d8>)
    346a:	f7fc fe9d 	bl	1a8 <__aeabi_dsub>
    346e:	4622      	mov	r2, r4
    3470:	4680      	mov	r8, r0
    3472:	4689      	mov	r9, r1
    3474:	462b      	mov	r3, r5
    3476:	4620      	mov	r0, r4
    3478:	4629      	mov	r1, r5
    347a:	f7fd f84d 	bl	518 <__aeabi_dmul>
    347e:	4602      	mov	r2, r0
    3480:	460b      	mov	r3, r1
    3482:	4640      	mov	r0, r8
    3484:	4649      	mov	r1, r9
    3486:	f7fd f847 	bl	518 <__aeabi_dmul>
    348a:	a341      	add	r3, pc, #260	; (adr r3, 3590 <__ieee754_pow+0x3b8>)
    348c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3490:	f7fd f842 	bl	518 <__aeabi_dmul>
    3494:	4602      	mov	r2, r0
    3496:	460b      	mov	r3, r1
    3498:	4650      	mov	r0, sl
    349a:	4659      	mov	r1, fp
    349c:	f7fc fe84 	bl	1a8 <__aeabi_dsub>
    34a0:	4602      	mov	r2, r0
    34a2:	460b      	mov	r3, r1
    34a4:	4680      	mov	r8, r0
    34a6:	4689      	mov	r9, r1
    34a8:	4630      	mov	r0, r6
    34aa:	4639      	mov	r1, r7
    34ac:	f7fc fe7e 	bl	1ac <__adddf3>
    34b0:	2000      	movs	r0, #0
    34b2:	4632      	mov	r2, r6
    34b4:	463b      	mov	r3, r7
    34b6:	4604      	mov	r4, r0
    34b8:	460d      	mov	r5, r1
    34ba:	f7fc fe75 	bl	1a8 <__aeabi_dsub>
    34be:	4602      	mov	r2, r0
    34c0:	460b      	mov	r3, r1
    34c2:	4640      	mov	r0, r8
    34c4:	4649      	mov	r1, r9
    34c6:	f7fc fe6f 	bl	1a8 <__aeabi_dsub>
    34ca:	9b04      	ldr	r3, [sp, #16]
    34cc:	9a06      	ldr	r2, [sp, #24]
    34ce:	3b01      	subs	r3, #1
    34d0:	4313      	orrs	r3, r2
    34d2:	4682      	mov	sl, r0
    34d4:	468b      	mov	fp, r1
    34d6:	f040 81f0 	bne.w	38ba <__ieee754_pow+0x6e2>
    34da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 3598 <__ieee754_pow+0x3c0>
    34de:	eeb0 8a47 	vmov.f32	s16, s14
    34e2:	eef0 8a67 	vmov.f32	s17, s15
    34e6:	e9dd 6700 	ldrd	r6, r7, [sp]
    34ea:	2600      	movs	r6, #0
    34ec:	4632      	mov	r2, r6
    34ee:	463b      	mov	r3, r7
    34f0:	e9dd 0100 	ldrd	r0, r1, [sp]
    34f4:	f7fc fe58 	bl	1a8 <__aeabi_dsub>
    34f8:	4622      	mov	r2, r4
    34fa:	462b      	mov	r3, r5
    34fc:	f7fd f80c 	bl	518 <__aeabi_dmul>
    3500:	e9dd 2300 	ldrd	r2, r3, [sp]
    3504:	4680      	mov	r8, r0
    3506:	4689      	mov	r9, r1
    3508:	4650      	mov	r0, sl
    350a:	4659      	mov	r1, fp
    350c:	f7fd f804 	bl	518 <__aeabi_dmul>
    3510:	4602      	mov	r2, r0
    3512:	460b      	mov	r3, r1
    3514:	4640      	mov	r0, r8
    3516:	4649      	mov	r1, r9
    3518:	f7fc fe48 	bl	1ac <__adddf3>
    351c:	4632      	mov	r2, r6
    351e:	463b      	mov	r3, r7
    3520:	4680      	mov	r8, r0
    3522:	4689      	mov	r9, r1
    3524:	4620      	mov	r0, r4
    3526:	4629      	mov	r1, r5
    3528:	f7fc fff6 	bl	518 <__aeabi_dmul>
    352c:	460b      	mov	r3, r1
    352e:	4604      	mov	r4, r0
    3530:	460d      	mov	r5, r1
    3532:	4602      	mov	r2, r0
    3534:	4649      	mov	r1, r9
    3536:	4640      	mov	r0, r8
    3538:	f7fc fe38 	bl	1ac <__adddf3>
    353c:	4b1d      	ldr	r3, [pc, #116]	; (35b4 <__ieee754_pow+0x3dc>)
    353e:	4299      	cmp	r1, r3
    3540:	ec45 4b19 	vmov	d9, r4, r5
    3544:	4606      	mov	r6, r0
    3546:	460f      	mov	r7, r1
    3548:	468b      	mov	fp, r1
    354a:	f340 82f9 	ble.w	3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>
    354e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    3552:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    3556:	4303      	orrs	r3, r0
    3558:	f000 81ec 	beq.w	3934 <__ieee754_pow+0x75c>
    355c:	a310      	add	r3, pc, #64	; (adr r3, 35a0 <__ieee754_pow+0x3c8>)
    355e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3562:	ec51 0b18 	vmov	r0, r1, d8
    3566:	f7fc ffd7 	bl	518 <__aeabi_dmul>
    356a:	a30d      	add	r3, pc, #52	; (adr r3, 35a0 <__ieee754_pow+0x3c8>)
    356c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3570:	e6cb      	b.n	330a <__ieee754_pow+0x132>
    3572:	bf00      	nop
    3574:	f3af 8000 	nop.w
    3578:	60000000 	.word	0x60000000
    357c:	3ff71547 	.word	0x3ff71547
    3580:	f85ddf44 	.word	0xf85ddf44
    3584:	3e54ae0b 	.word	0x3e54ae0b
    3588:	55555555 	.word	0x55555555
    358c:	3fd55555 	.word	0x3fd55555
    3590:	652b82fe 	.word	0x652b82fe
    3594:	3ff71547 	.word	0x3ff71547
    3598:	00000000 	.word	0x00000000
    359c:	bff00000 	.word	0xbff00000
    35a0:	8800759c 	.word	0x8800759c
    35a4:	7e37e43c 	.word	0x7e37e43c
    35a8:	3ff00000 	.word	0x3ff00000
    35ac:	3fd00000 	.word	0x3fd00000
    35b0:	3fe00000 	.word	0x3fe00000
    35b4:	408fffff 	.word	0x408fffff
    35b8:	4bd5      	ldr	r3, [pc, #852]	; (3910 <__ieee754_pow+0x738>)
    35ba:	ea03 0309 	and.w	r3, r3, r9
    35be:	2200      	movs	r2, #0
    35c0:	b92b      	cbnz	r3, 35ce <__ieee754_pow+0x3f6>
    35c2:	4bd4      	ldr	r3, [pc, #848]	; (3914 <__ieee754_pow+0x73c>)
    35c4:	f7fc ffa8 	bl	518 <__aeabi_dmul>
    35c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
    35cc:	460c      	mov	r4, r1
    35ce:	1523      	asrs	r3, r4, #20
    35d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    35d4:	4413      	add	r3, r2
    35d6:	9305      	str	r3, [sp, #20]
    35d8:	4bcf      	ldr	r3, [pc, #828]	; (3918 <__ieee754_pow+0x740>)
    35da:	f3c4 0413 	ubfx	r4, r4, #0, #20
    35de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    35e2:	429c      	cmp	r4, r3
    35e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    35e8:	dd08      	ble.n	35fc <__ieee754_pow+0x424>
    35ea:	4bcc      	ldr	r3, [pc, #816]	; (391c <__ieee754_pow+0x744>)
    35ec:	429c      	cmp	r4, r3
    35ee:	f340 8162 	ble.w	38b6 <__ieee754_pow+0x6de>
    35f2:	9b05      	ldr	r3, [sp, #20]
    35f4:	3301      	adds	r3, #1
    35f6:	9305      	str	r3, [sp, #20]
    35f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    35fc:	2400      	movs	r4, #0
    35fe:	00e3      	lsls	r3, r4, #3
    3600:	9307      	str	r3, [sp, #28]
    3602:	4bc7      	ldr	r3, [pc, #796]	; (3920 <__ieee754_pow+0x748>)
    3604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    3608:	ed93 7b00 	vldr	d7, [r3]
    360c:	4629      	mov	r1, r5
    360e:	ec53 2b17 	vmov	r2, r3, d7
    3612:	eeb0 9a47 	vmov.f32	s18, s14
    3616:	eef0 9a67 	vmov.f32	s19, s15
    361a:	4682      	mov	sl, r0
    361c:	f7fc fdc4 	bl	1a8 <__aeabi_dsub>
    3620:	4652      	mov	r2, sl
    3622:	4606      	mov	r6, r0
    3624:	460f      	mov	r7, r1
    3626:	462b      	mov	r3, r5
    3628:	ec51 0b19 	vmov	r0, r1, d9
    362c:	f7fc fdbe 	bl	1ac <__adddf3>
    3630:	4602      	mov	r2, r0
    3632:	460b      	mov	r3, r1
    3634:	2000      	movs	r0, #0
    3636:	49bb      	ldr	r1, [pc, #748]	; (3924 <__ieee754_pow+0x74c>)
    3638:	f7fd f898 	bl	76c <__aeabi_ddiv>
    363c:	ec41 0b1a 	vmov	d10, r0, r1
    3640:	4602      	mov	r2, r0
    3642:	460b      	mov	r3, r1
    3644:	4630      	mov	r0, r6
    3646:	4639      	mov	r1, r7
    3648:	f7fc ff66 	bl	518 <__aeabi_dmul>
    364c:	2300      	movs	r3, #0
    364e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    3652:	9302      	str	r3, [sp, #8]
    3654:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    3658:	46ab      	mov	fp, r5
    365a:	106d      	asrs	r5, r5, #1
    365c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    3660:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    3664:	ec41 0b18 	vmov	d8, r0, r1
    3668:	eb05 4384 	add.w	r3, r5, r4, lsl #18
    366c:	2200      	movs	r2, #0
    366e:	4640      	mov	r0, r8
    3670:	4649      	mov	r1, r9
    3672:	4614      	mov	r4, r2
    3674:	461d      	mov	r5, r3
    3676:	f7fc ff4f 	bl	518 <__aeabi_dmul>
    367a:	4602      	mov	r2, r0
    367c:	460b      	mov	r3, r1
    367e:	4630      	mov	r0, r6
    3680:	4639      	mov	r1, r7
    3682:	f7fc fd91 	bl	1a8 <__aeabi_dsub>
    3686:	ec53 2b19 	vmov	r2, r3, d9
    368a:	4606      	mov	r6, r0
    368c:	460f      	mov	r7, r1
    368e:	4620      	mov	r0, r4
    3690:	4629      	mov	r1, r5
    3692:	f7fc fd89 	bl	1a8 <__aeabi_dsub>
    3696:	4602      	mov	r2, r0
    3698:	460b      	mov	r3, r1
    369a:	4650      	mov	r0, sl
    369c:	4659      	mov	r1, fp
    369e:	f7fc fd83 	bl	1a8 <__aeabi_dsub>
    36a2:	4642      	mov	r2, r8
    36a4:	464b      	mov	r3, r9
    36a6:	f7fc ff37 	bl	518 <__aeabi_dmul>
    36aa:	4602      	mov	r2, r0
    36ac:	460b      	mov	r3, r1
    36ae:	4630      	mov	r0, r6
    36b0:	4639      	mov	r1, r7
    36b2:	f7fc fd79 	bl	1a8 <__aeabi_dsub>
    36b6:	ec53 2b1a 	vmov	r2, r3, d10
    36ba:	f7fc ff2d 	bl	518 <__aeabi_dmul>
    36be:	ec53 2b18 	vmov	r2, r3, d8
    36c2:	ec41 0b19 	vmov	d9, r0, r1
    36c6:	ec51 0b18 	vmov	r0, r1, d8
    36ca:	f7fc ff25 	bl	518 <__aeabi_dmul>
    36ce:	a37c      	add	r3, pc, #496	; (adr r3, 38c0 <__ieee754_pow+0x6e8>)
    36d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36d4:	4604      	mov	r4, r0
    36d6:	460d      	mov	r5, r1
    36d8:	f7fc ff1e 	bl	518 <__aeabi_dmul>
    36dc:	a37a      	add	r3, pc, #488	; (adr r3, 38c8 <__ieee754_pow+0x6f0>)
    36de:	e9d3 2300 	ldrd	r2, r3, [r3]
    36e2:	f7fc fd63 	bl	1ac <__adddf3>
    36e6:	4622      	mov	r2, r4
    36e8:	462b      	mov	r3, r5
    36ea:	f7fc ff15 	bl	518 <__aeabi_dmul>
    36ee:	a378      	add	r3, pc, #480	; (adr r3, 38d0 <__ieee754_pow+0x6f8>)
    36f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36f4:	f7fc fd5a 	bl	1ac <__adddf3>
    36f8:	4622      	mov	r2, r4
    36fa:	462b      	mov	r3, r5
    36fc:	f7fc ff0c 	bl	518 <__aeabi_dmul>
    3700:	a375      	add	r3, pc, #468	; (adr r3, 38d8 <__ieee754_pow+0x700>)
    3702:	e9d3 2300 	ldrd	r2, r3, [r3]
    3706:	f7fc fd51 	bl	1ac <__adddf3>
    370a:	4622      	mov	r2, r4
    370c:	462b      	mov	r3, r5
    370e:	f7fc ff03 	bl	518 <__aeabi_dmul>
    3712:	a373      	add	r3, pc, #460	; (adr r3, 38e0 <__ieee754_pow+0x708>)
    3714:	e9d3 2300 	ldrd	r2, r3, [r3]
    3718:	f7fc fd48 	bl	1ac <__adddf3>
    371c:	4622      	mov	r2, r4
    371e:	462b      	mov	r3, r5
    3720:	f7fc fefa 	bl	518 <__aeabi_dmul>
    3724:	a370      	add	r3, pc, #448	; (adr r3, 38e8 <__ieee754_pow+0x710>)
    3726:	e9d3 2300 	ldrd	r2, r3, [r3]
    372a:	f7fc fd3f 	bl	1ac <__adddf3>
    372e:	4622      	mov	r2, r4
    3730:	4606      	mov	r6, r0
    3732:	460f      	mov	r7, r1
    3734:	462b      	mov	r3, r5
    3736:	4620      	mov	r0, r4
    3738:	4629      	mov	r1, r5
    373a:	f7fc feed 	bl	518 <__aeabi_dmul>
    373e:	4602      	mov	r2, r0
    3740:	460b      	mov	r3, r1
    3742:	4630      	mov	r0, r6
    3744:	4639      	mov	r1, r7
    3746:	f7fc fee7 	bl	518 <__aeabi_dmul>
    374a:	4642      	mov	r2, r8
    374c:	4604      	mov	r4, r0
    374e:	460d      	mov	r5, r1
    3750:	464b      	mov	r3, r9
    3752:	ec51 0b18 	vmov	r0, r1, d8
    3756:	f7fc fd29 	bl	1ac <__adddf3>
    375a:	ec53 2b19 	vmov	r2, r3, d9
    375e:	f7fc fedb 	bl	518 <__aeabi_dmul>
    3762:	4622      	mov	r2, r4
    3764:	462b      	mov	r3, r5
    3766:	f7fc fd21 	bl	1ac <__adddf3>
    376a:	4642      	mov	r2, r8
    376c:	4682      	mov	sl, r0
    376e:	468b      	mov	fp, r1
    3770:	464b      	mov	r3, r9
    3772:	4640      	mov	r0, r8
    3774:	4649      	mov	r1, r9
    3776:	f7fc fecf 	bl	518 <__aeabi_dmul>
    377a:	4b6b      	ldr	r3, [pc, #428]	; (3928 <__ieee754_pow+0x750>)
    377c:	2200      	movs	r2, #0
    377e:	4606      	mov	r6, r0
    3780:	460f      	mov	r7, r1
    3782:	f7fc fd13 	bl	1ac <__adddf3>
    3786:	4652      	mov	r2, sl
    3788:	465b      	mov	r3, fp
    378a:	f7fc fd0f 	bl	1ac <__adddf3>
    378e:	2000      	movs	r0, #0
    3790:	4604      	mov	r4, r0
    3792:	460d      	mov	r5, r1
    3794:	4602      	mov	r2, r0
    3796:	460b      	mov	r3, r1
    3798:	4640      	mov	r0, r8
    379a:	4649      	mov	r1, r9
    379c:	f7fc febc 	bl	518 <__aeabi_dmul>
    37a0:	4b61      	ldr	r3, [pc, #388]	; (3928 <__ieee754_pow+0x750>)
    37a2:	4680      	mov	r8, r0
    37a4:	4689      	mov	r9, r1
    37a6:	2200      	movs	r2, #0
    37a8:	4620      	mov	r0, r4
    37aa:	4629      	mov	r1, r5
    37ac:	f7fc fcfc 	bl	1a8 <__aeabi_dsub>
    37b0:	4632      	mov	r2, r6
    37b2:	463b      	mov	r3, r7
    37b4:	f7fc fcf8 	bl	1a8 <__aeabi_dsub>
    37b8:	4602      	mov	r2, r0
    37ba:	460b      	mov	r3, r1
    37bc:	4650      	mov	r0, sl
    37be:	4659      	mov	r1, fp
    37c0:	f7fc fcf2 	bl	1a8 <__aeabi_dsub>
    37c4:	ec53 2b18 	vmov	r2, r3, d8
    37c8:	f7fc fea6 	bl	518 <__aeabi_dmul>
    37cc:	4622      	mov	r2, r4
    37ce:	4606      	mov	r6, r0
    37d0:	460f      	mov	r7, r1
    37d2:	462b      	mov	r3, r5
    37d4:	ec51 0b19 	vmov	r0, r1, d9
    37d8:	f7fc fe9e 	bl	518 <__aeabi_dmul>
    37dc:	4602      	mov	r2, r0
    37de:	460b      	mov	r3, r1
    37e0:	4630      	mov	r0, r6
    37e2:	4639      	mov	r1, r7
    37e4:	f7fc fce2 	bl	1ac <__adddf3>
    37e8:	4606      	mov	r6, r0
    37ea:	460f      	mov	r7, r1
    37ec:	4602      	mov	r2, r0
    37ee:	460b      	mov	r3, r1
    37f0:	4640      	mov	r0, r8
    37f2:	4649      	mov	r1, r9
    37f4:	f7fc fcda 	bl	1ac <__adddf3>
    37f8:	a33d      	add	r3, pc, #244	; (adr r3, 38f0 <__ieee754_pow+0x718>)
    37fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    37fe:	2000      	movs	r0, #0
    3800:	4604      	mov	r4, r0
    3802:	460d      	mov	r5, r1
    3804:	f7fc fe88 	bl	518 <__aeabi_dmul>
    3808:	4642      	mov	r2, r8
    380a:	ec41 0b18 	vmov	d8, r0, r1
    380e:	464b      	mov	r3, r9
    3810:	4620      	mov	r0, r4
    3812:	4629      	mov	r1, r5
    3814:	f7fc fcc8 	bl	1a8 <__aeabi_dsub>
    3818:	4602      	mov	r2, r0
    381a:	460b      	mov	r3, r1
    381c:	4630      	mov	r0, r6
    381e:	4639      	mov	r1, r7
    3820:	f7fc fcc2 	bl	1a8 <__aeabi_dsub>
    3824:	a334      	add	r3, pc, #208	; (adr r3, 38f8 <__ieee754_pow+0x720>)
    3826:	e9d3 2300 	ldrd	r2, r3, [r3]
    382a:	f7fc fe75 	bl	518 <__aeabi_dmul>
    382e:	a334      	add	r3, pc, #208	; (adr r3, 3900 <__ieee754_pow+0x728>)
    3830:	e9d3 2300 	ldrd	r2, r3, [r3]
    3834:	4606      	mov	r6, r0
    3836:	460f      	mov	r7, r1
    3838:	4620      	mov	r0, r4
    383a:	4629      	mov	r1, r5
    383c:	f7fc fe6c 	bl	518 <__aeabi_dmul>
    3840:	4602      	mov	r2, r0
    3842:	460b      	mov	r3, r1
    3844:	4630      	mov	r0, r6
    3846:	4639      	mov	r1, r7
    3848:	f7fc fcb0 	bl	1ac <__adddf3>
    384c:	9a07      	ldr	r2, [sp, #28]
    384e:	4b37      	ldr	r3, [pc, #220]	; (392c <__ieee754_pow+0x754>)
    3850:	4413      	add	r3, r2
    3852:	e9d3 2300 	ldrd	r2, r3, [r3]
    3856:	f7fc fca9 	bl	1ac <__adddf3>
    385a:	4682      	mov	sl, r0
    385c:	9805      	ldr	r0, [sp, #20]
    385e:	468b      	mov	fp, r1
    3860:	f7fc fdf0 	bl	444 <__aeabi_i2d>
    3864:	9a07      	ldr	r2, [sp, #28]
    3866:	4b32      	ldr	r3, [pc, #200]	; (3930 <__ieee754_pow+0x758>)
    3868:	4413      	add	r3, r2
    386a:	e9d3 8900 	ldrd	r8, r9, [r3]
    386e:	4606      	mov	r6, r0
    3870:	460f      	mov	r7, r1
    3872:	4652      	mov	r2, sl
    3874:	465b      	mov	r3, fp
    3876:	ec51 0b18 	vmov	r0, r1, d8
    387a:	f7fc fc97 	bl	1ac <__adddf3>
    387e:	4642      	mov	r2, r8
    3880:	464b      	mov	r3, r9
    3882:	f7fc fc93 	bl	1ac <__adddf3>
    3886:	4632      	mov	r2, r6
    3888:	463b      	mov	r3, r7
    388a:	f7fc fc8f 	bl	1ac <__adddf3>
    388e:	2000      	movs	r0, #0
    3890:	4632      	mov	r2, r6
    3892:	463b      	mov	r3, r7
    3894:	4604      	mov	r4, r0
    3896:	460d      	mov	r5, r1
    3898:	f7fc fc86 	bl	1a8 <__aeabi_dsub>
    389c:	4642      	mov	r2, r8
    389e:	464b      	mov	r3, r9
    38a0:	f7fc fc82 	bl	1a8 <__aeabi_dsub>
    38a4:	ec53 2b18 	vmov	r2, r3, d8
    38a8:	f7fc fc7e 	bl	1a8 <__aeabi_dsub>
    38ac:	4602      	mov	r2, r0
    38ae:	460b      	mov	r3, r1
    38b0:	4650      	mov	r0, sl
    38b2:	4659      	mov	r1, fp
    38b4:	e607      	b.n	34c6 <__ieee754_pow+0x2ee>
    38b6:	2401      	movs	r4, #1
    38b8:	e6a1      	b.n	35fe <__ieee754_pow+0x426>
    38ba:	ed9f 7b13 	vldr	d7, [pc, #76]	; 3908 <__ieee754_pow+0x730>
    38be:	e60e      	b.n	34de <__ieee754_pow+0x306>
    38c0:	4a454eef 	.word	0x4a454eef
    38c4:	3fca7e28 	.word	0x3fca7e28
    38c8:	93c9db65 	.word	0x93c9db65
    38cc:	3fcd864a 	.word	0x3fcd864a
    38d0:	a91d4101 	.word	0xa91d4101
    38d4:	3fd17460 	.word	0x3fd17460
    38d8:	518f264d 	.word	0x518f264d
    38dc:	3fd55555 	.word	0x3fd55555
    38e0:	db6fabff 	.word	0xdb6fabff
    38e4:	3fdb6db6 	.word	0x3fdb6db6
    38e8:	33333303 	.word	0x33333303
    38ec:	3fe33333 	.word	0x3fe33333
    38f0:	e0000000 	.word	0xe0000000
    38f4:	3feec709 	.word	0x3feec709
    38f8:	dc3a03fd 	.word	0xdc3a03fd
    38fc:	3feec709 	.word	0x3feec709
    3900:	145b01f5 	.word	0x145b01f5
    3904:	be3e2fe0 	.word	0xbe3e2fe0
    3908:	00000000 	.word	0x00000000
    390c:	3ff00000 	.word	0x3ff00000
    3910:	7ff00000 	.word	0x7ff00000
    3914:	43400000 	.word	0x43400000
    3918:	0003988e 	.word	0x0003988e
    391c:	000bb679 	.word	0x000bb679
    3920:	00016ed0 	.word	0x00016ed0
    3924:	3ff00000 	.word	0x3ff00000
    3928:	40080000 	.word	0x40080000
    392c:	00016ef0 	.word	0x00016ef0
    3930:	00016ee0 	.word	0x00016ee0
    3934:	a3b5      	add	r3, pc, #724	; (adr r3, 3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>)
    3936:	e9d3 2300 	ldrd	r2, r3, [r3]
    393a:	4640      	mov	r0, r8
    393c:	4649      	mov	r1, r9
    393e:	f7fc fc35 	bl	1ac <__adddf3>
    3942:	4622      	mov	r2, r4
    3944:	ec41 0b1a 	vmov	d10, r0, r1
    3948:	462b      	mov	r3, r5
    394a:	4630      	mov	r0, r6
    394c:	4639      	mov	r1, r7
    394e:	f7fc fc2b 	bl	1a8 <__aeabi_dsub>
    3952:	4602      	mov	r2, r0
    3954:	460b      	mov	r3, r1
    3956:	ec51 0b1a 	vmov	r0, r1, d10
    395a:	f7fd f86d 	bl	a38 <__aeabi_dcmpgt>
    395e:	2800      	cmp	r0, #0
    3960:	f47f adfc 	bne.w	355c <__ieee754_pow+0x384>
    3964:	4aa4      	ldr	r2, [pc, #656]	; (3bf8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x160>)
    3966:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    396a:	4293      	cmp	r3, r2
    396c:	f340 810a 	ble.w	3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>
    3970:	151b      	asrs	r3, r3, #20
    3972:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    3976:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    397a:	fa4a f303 	asr.w	r3, sl, r3
    397e:	445b      	add	r3, fp
    3980:	f3c3 520a 	ubfx	r2, r3, #20, #11
    3984:	4e9d      	ldr	r6, [pc, #628]	; (3bfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x164>)
    3986:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    398a:	4116      	asrs	r6, r2
    398c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    3990:	2000      	movs	r0, #0
    3992:	ea23 0106 	bic.w	r1, r3, r6
    3996:	f1c2 0214 	rsb	r2, r2, #20
    399a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    399e:	fa4a fa02 	asr.w	sl, sl, r2
    39a2:	f1bb 0f00 	cmp.w	fp, #0
    39a6:	4602      	mov	r2, r0
    39a8:	460b      	mov	r3, r1
    39aa:	4620      	mov	r0, r4
    39ac:	4629      	mov	r1, r5
    39ae:	bfb8      	it	lt
    39b0:	f1ca 0a00 	rsblt	sl, sl, #0
    39b4:	f7fc fbf8 	bl	1a8 <__aeabi_dsub>
    39b8:	ec41 0b19 	vmov	d9, r0, r1
    39bc:	4642      	mov	r2, r8
    39be:	464b      	mov	r3, r9
    39c0:	ec51 0b19 	vmov	r0, r1, d9
    39c4:	f7fc fbf2 	bl	1ac <__adddf3>
    39c8:	a379      	add	r3, pc, #484	; (adr r3, 3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>)
    39ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    39ce:	2000      	movs	r0, #0
    39d0:	4604      	mov	r4, r0
    39d2:	460d      	mov	r5, r1
    39d4:	f7fc fda0 	bl	518 <__aeabi_dmul>
    39d8:	ec53 2b19 	vmov	r2, r3, d9
    39dc:	4606      	mov	r6, r0
    39de:	460f      	mov	r7, r1
    39e0:	4620      	mov	r0, r4
    39e2:	4629      	mov	r1, r5
    39e4:	f7fc fbe0 	bl	1a8 <__aeabi_dsub>
    39e8:	4602      	mov	r2, r0
    39ea:	460b      	mov	r3, r1
    39ec:	4640      	mov	r0, r8
    39ee:	4649      	mov	r1, r9
    39f0:	f7fc fbda 	bl	1a8 <__aeabi_dsub>
    39f4:	a370      	add	r3, pc, #448	; (adr r3, 3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>)
    39f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    39fa:	f7fc fd8d 	bl	518 <__aeabi_dmul>
    39fe:	a370      	add	r3, pc, #448	; (adr r3, 3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>)
    3a00:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a04:	4680      	mov	r8, r0
    3a06:	4689      	mov	r9, r1
    3a08:	4620      	mov	r0, r4
    3a0a:	4629      	mov	r1, r5
    3a0c:	f7fc fd84 	bl	518 <__aeabi_dmul>
    3a10:	4602      	mov	r2, r0
    3a12:	460b      	mov	r3, r1
    3a14:	4640      	mov	r0, r8
    3a16:	4649      	mov	r1, r9
    3a18:	f7fc fbc8 	bl	1ac <__adddf3>
    3a1c:	4604      	mov	r4, r0
    3a1e:	460d      	mov	r5, r1
    3a20:	4602      	mov	r2, r0
    3a22:	460b      	mov	r3, r1
    3a24:	4630      	mov	r0, r6
    3a26:	4639      	mov	r1, r7
    3a28:	f7fc fbc0 	bl	1ac <__adddf3>
    3a2c:	4632      	mov	r2, r6
    3a2e:	463b      	mov	r3, r7
    3a30:	4680      	mov	r8, r0
    3a32:	4689      	mov	r9, r1
    3a34:	f7fc fbb8 	bl	1a8 <__aeabi_dsub>
    3a38:	4602      	mov	r2, r0
    3a3a:	460b      	mov	r3, r1
    3a3c:	4620      	mov	r0, r4
    3a3e:	4629      	mov	r1, r5
    3a40:	f7fc fbb2 	bl	1a8 <__aeabi_dsub>
    3a44:	4642      	mov	r2, r8
    3a46:	4606      	mov	r6, r0
    3a48:	460f      	mov	r7, r1
    3a4a:	464b      	mov	r3, r9
    3a4c:	4640      	mov	r0, r8
    3a4e:	4649      	mov	r1, r9
    3a50:	f7fc fd62 	bl	518 <__aeabi_dmul>
    3a54:	a35c      	add	r3, pc, #368	; (adr r3, 3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>)
    3a56:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a5a:	4604      	mov	r4, r0
    3a5c:	460d      	mov	r5, r1
    3a5e:	f7fc fd5b 	bl	518 <__aeabi_dmul>
    3a62:	a35b      	add	r3, pc, #364	; (adr r3, 3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>)
    3a64:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a68:	f7fc fb9e 	bl	1a8 <__aeabi_dsub>
    3a6c:	4622      	mov	r2, r4
    3a6e:	462b      	mov	r3, r5
    3a70:	f7fc fd52 	bl	518 <__aeabi_dmul>
    3a74:	a358      	add	r3, pc, #352	; (adr r3, 3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>)
    3a76:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a7a:	f7fc fb97 	bl	1ac <__adddf3>
    3a7e:	4622      	mov	r2, r4
    3a80:	462b      	mov	r3, r5
    3a82:	f7fc fd49 	bl	518 <__aeabi_dmul>
    3a86:	a356      	add	r3, pc, #344	; (adr r3, 3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>)
    3a88:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a8c:	f7fc fb8c 	bl	1a8 <__aeabi_dsub>
    3a90:	4622      	mov	r2, r4
    3a92:	462b      	mov	r3, r5
    3a94:	f7fc fd40 	bl	518 <__aeabi_dmul>
    3a98:	a353      	add	r3, pc, #332	; (adr r3, 3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>)
    3a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a9e:	f7fc fb85 	bl	1ac <__adddf3>
    3aa2:	4622      	mov	r2, r4
    3aa4:	462b      	mov	r3, r5
    3aa6:	f7fc fd37 	bl	518 <__aeabi_dmul>
    3aaa:	4602      	mov	r2, r0
    3aac:	460b      	mov	r3, r1
    3aae:	4640      	mov	r0, r8
    3ab0:	4649      	mov	r1, r9
    3ab2:	f7fc fb79 	bl	1a8 <__aeabi_dsub>
    3ab6:	4604      	mov	r4, r0
    3ab8:	460d      	mov	r5, r1
    3aba:	4602      	mov	r2, r0
    3abc:	460b      	mov	r3, r1
    3abe:	4640      	mov	r0, r8
    3ac0:	4649      	mov	r1, r9
    3ac2:	f7fc fd29 	bl	518 <__aeabi_dmul>
    3ac6:	2200      	movs	r2, #0
    3ac8:	ec41 0b19 	vmov	d9, r0, r1
    3acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ad0:	4620      	mov	r0, r4
    3ad2:	4629      	mov	r1, r5
    3ad4:	f7fc fb68 	bl	1a8 <__aeabi_dsub>
    3ad8:	4602      	mov	r2, r0
    3ada:	460b      	mov	r3, r1
    3adc:	ec51 0b19 	vmov	r0, r1, d9
    3ae0:	f7fc fe44 	bl	76c <__aeabi_ddiv>
    3ae4:	4632      	mov	r2, r6
    3ae6:	4604      	mov	r4, r0
    3ae8:	460d      	mov	r5, r1
    3aea:	463b      	mov	r3, r7
    3aec:	4640      	mov	r0, r8
    3aee:	4649      	mov	r1, r9
    3af0:	f7fc fd12 	bl	518 <__aeabi_dmul>
    3af4:	4632      	mov	r2, r6
    3af6:	463b      	mov	r3, r7
    3af8:	f7fc fb58 	bl	1ac <__adddf3>
    3afc:	4602      	mov	r2, r0
    3afe:	460b      	mov	r3, r1
    3b00:	4620      	mov	r0, r4
    3b02:	4629      	mov	r1, r5
    3b04:	f7fc fb50 	bl	1a8 <__aeabi_dsub>
    3b08:	4642      	mov	r2, r8
    3b0a:	464b      	mov	r3, r9
    3b0c:	f7fc fb4c 	bl	1a8 <__aeabi_dsub>
    3b10:	460b      	mov	r3, r1
    3b12:	4602      	mov	r2, r0
    3b14:	493a      	ldr	r1, [pc, #232]	; (3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>)
    3b16:	2000      	movs	r0, #0
    3b18:	f7fc fb46 	bl	1a8 <__aeabi_dsub>
    3b1c:	ec41 0b10 	vmov	d0, r0, r1
    3b20:	ee10 3a90 	vmov	r3, s1
    3b24:	eb03 530a 	add.w	r3, r3, sl, lsl #20
    3b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3b2c:	da2d      	bge.n	3b8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf2>
    3b2e:	4650      	mov	r0, sl
    3b30:	f000 ff5a 	bl	49e8 <scalbn>
    3b34:	ec51 0b10 	vmov	r0, r1, d0
    3b38:	ec53 2b18 	vmov	r2, r3, d8
    3b3c:	f7ff bbe5 	b.w	330a <__ieee754_pow+0x132>
    3b40:	4b30      	ldr	r3, [pc, #192]	; (3c04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16c>)
    3b42:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    3b46:	429e      	cmp	r6, r3
    3b48:	f77f af0c 	ble.w	3964 <__ieee754_pow+0x78c>
    3b4c:	4b2e      	ldr	r3, [pc, #184]	; (3c08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x170>)
    3b4e:	440b      	add	r3, r1
    3b50:	4303      	orrs	r3, r0
    3b52:	d00b      	beq.n	3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3b54:	a326      	add	r3, pc, #152	; (adr r3, 3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>)
    3b56:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b5a:	ec51 0b18 	vmov	r0, r1, d8
    3b5e:	f7fc fcdb 	bl	518 <__aeabi_dmul>
    3b62:	a323      	add	r3, pc, #140	; (adr r3, 3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>)
    3b64:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b68:	f7ff bbcf 	b.w	330a <__ieee754_pow+0x132>
    3b6c:	4622      	mov	r2, r4
    3b6e:	462b      	mov	r3, r5
    3b70:	f7fc fb1a 	bl	1a8 <__aeabi_dsub>
    3b74:	4642      	mov	r2, r8
    3b76:	464b      	mov	r3, r9
    3b78:	f7fc ff54 	bl	a24 <__aeabi_dcmpge>
    3b7c:	2800      	cmp	r0, #0
    3b7e:	f43f aef1 	beq.w	3964 <__ieee754_pow+0x78c>
    3b82:	e7e7      	b.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b84:	f04f 0a00 	mov.w	sl, #0
    3b88:	e718      	b.n	39bc <__ieee754_pow+0x7e4>
    3b8a:	ec51 0b10 	vmov	r0, r1, d0
    3b8e:	4619      	mov	r1, r3
    3b90:	e7d2      	b.n	3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    3b92:	491b      	ldr	r1, [pc, #108]	; (3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>)
    3b94:	2000      	movs	r0, #0
    3b96:	f7ff bba3 	b.w	32e0 <__ieee754_pow+0x108>
    3b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
    3b9e:	f7ff bb9f 	b.w	32e0 <__ieee754_pow+0x108>
    3ba2:	9004      	str	r0, [sp, #16]
    3ba4:	f7ff bb7b 	b.w	329e <__ieee754_pow+0xc6>
    3ba8:	2100      	movs	r1, #0
    3baa:	f7ff bb65 	b.w	3278 <__ieee754_pow+0xa0>
    3bae:	bf00      	nop
    3bb0:	00000000 	.word	0x00000000
    3bb4:	3fe62e43 	.word	0x3fe62e43
    3bb8:	fefa39ef 	.word	0xfefa39ef
    3bbc:	3fe62e42 	.word	0x3fe62e42
    3bc0:	0ca86c39 	.word	0x0ca86c39
    3bc4:	be205c61 	.word	0xbe205c61
    3bc8:	72bea4d0 	.word	0x72bea4d0
    3bcc:	3e663769 	.word	0x3e663769
    3bd0:	c5d26bf1 	.word	0xc5d26bf1
    3bd4:	3ebbbd41 	.word	0x3ebbbd41
    3bd8:	af25de2c 	.word	0xaf25de2c
    3bdc:	3f11566a 	.word	0x3f11566a
    3be0:	16bebd93 	.word	0x16bebd93
    3be4:	3f66c16c 	.word	0x3f66c16c
    3be8:	5555553e 	.word	0x5555553e
    3bec:	3fc55555 	.word	0x3fc55555
    3bf0:	c2f8f359 	.word	0xc2f8f359
    3bf4:	01a56e1f 	.word	0x01a56e1f
    3bf8:	3fe00000 	.word	0x3fe00000
    3bfc:	000fffff 	.word	0x000fffff
    3c00:	3ff00000 	.word	0x3ff00000
    3c04:	4090cbff 	.word	0x4090cbff
    3c08:	3f6f3400 	.word	0x3f6f3400
    3c0c:	652b82fe 	.word	0x652b82fe
    3c10:	3c971547 	.word	0x3c971547
    3c14:	00000000 	.word	0x00000000

00003c18 <__ieee754_rem_pio2>:
    3c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c1c:	ed2d 8b02 	vpush	{d8}
    3c20:	ec55 4b10 	vmov	r4, r5, d0
    3c24:	4bca      	ldr	r3, [pc, #808]	; (3f50 <__ieee754_rem_pio2+0x338>)
    3c26:	b08b      	sub	sp, #44	; 0x2c
    3c28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
    3c2c:	4598      	cmp	r8, r3
    3c2e:	4682      	mov	sl, r0
    3c30:	9502      	str	r5, [sp, #8]
    3c32:	dc08      	bgt.n	3c46 <__ieee754_rem_pio2+0x2e>
    3c34:	2200      	movs	r2, #0
    3c36:	2300      	movs	r3, #0
    3c38:	ed80 0b00 	vstr	d0, [r0]
    3c3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
    3c40:	f04f 0b00 	mov.w	fp, #0
    3c44:	e028      	b.n	3c98 <__ieee754_rem_pio2+0x80>
    3c46:	4bc3      	ldr	r3, [pc, #780]	; (3f54 <__ieee754_rem_pio2+0x33c>)
    3c48:	4598      	cmp	r8, r3
    3c4a:	dc78      	bgt.n	3d3e <__ieee754_rem_pio2+0x126>
    3c4c:	9b02      	ldr	r3, [sp, #8]
    3c4e:	4ec2      	ldr	r6, [pc, #776]	; (3f58 <__ieee754_rem_pio2+0x340>)
    3c50:	2b00      	cmp	r3, #0
    3c52:	ee10 0a10 	vmov	r0, s0
    3c56:	a3b0      	add	r3, pc, #704	; (adr r3, 3f18 <__ieee754_rem_pio2+0x300>)
    3c58:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c5c:	4629      	mov	r1, r5
    3c5e:	dd39      	ble.n	3cd4 <__ieee754_rem_pio2+0xbc>
    3c60:	f7fc faa2 	bl	1a8 <__aeabi_dsub>
    3c64:	45b0      	cmp	r8, r6
    3c66:	4604      	mov	r4, r0
    3c68:	460d      	mov	r5, r1
    3c6a:	d01b      	beq.n	3ca4 <__ieee754_rem_pio2+0x8c>
    3c6c:	a3ac      	add	r3, pc, #688	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c72:	f7fc fa99 	bl	1a8 <__aeabi_dsub>
    3c76:	4602      	mov	r2, r0
    3c78:	460b      	mov	r3, r1
    3c7a:	e9ca 2300 	strd	r2, r3, [sl]
    3c7e:	4620      	mov	r0, r4
    3c80:	4629      	mov	r1, r5
    3c82:	f7fc fa91 	bl	1a8 <__aeabi_dsub>
    3c86:	a3a6      	add	r3, pc, #664	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3c88:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c8c:	f7fc fa8c 	bl	1a8 <__aeabi_dsub>
    3c90:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3c94:	f04f 0b01 	mov.w	fp, #1
    3c98:	4658      	mov	r0, fp
    3c9a:	b00b      	add	sp, #44	; 0x2c
    3c9c:	ecbd 8b02 	vpop	{d8}
    3ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ca4:	a3a0      	add	r3, pc, #640	; (adr r3, 3f28 <__ieee754_rem_pio2+0x310>)
    3ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3caa:	f7fc fa7d 	bl	1a8 <__aeabi_dsub>
    3cae:	a3a0      	add	r3, pc, #640	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cb4:	4604      	mov	r4, r0
    3cb6:	460d      	mov	r5, r1
    3cb8:	f7fc fa76 	bl	1a8 <__aeabi_dsub>
    3cbc:	4602      	mov	r2, r0
    3cbe:	460b      	mov	r3, r1
    3cc0:	e9ca 2300 	strd	r2, r3, [sl]
    3cc4:	4620      	mov	r0, r4
    3cc6:	4629      	mov	r1, r5
    3cc8:	f7fc fa6e 	bl	1a8 <__aeabi_dsub>
    3ccc:	a398      	add	r3, pc, #608	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3cce:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cd2:	e7db      	b.n	3c8c <__ieee754_rem_pio2+0x74>
    3cd4:	f7fc fa6a 	bl	1ac <__adddf3>
    3cd8:	45b0      	cmp	r8, r6
    3cda:	4604      	mov	r4, r0
    3cdc:	460d      	mov	r5, r1
    3cde:	d016      	beq.n	3d0e <__ieee754_rem_pio2+0xf6>
    3ce0:	a38f      	add	r3, pc, #572	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ce6:	f7fc fa61 	bl	1ac <__adddf3>
    3cea:	4602      	mov	r2, r0
    3cec:	460b      	mov	r3, r1
    3cee:	e9ca 2300 	strd	r2, r3, [sl]
    3cf2:	4620      	mov	r0, r4
    3cf4:	4629      	mov	r1, r5
    3cf6:	f7fc fa57 	bl	1a8 <__aeabi_dsub>
    3cfa:	a389      	add	r3, pc, #548	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d00:	f7fc fa54 	bl	1ac <__adddf3>
    3d04:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    3d08:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3d0c:	e7c4      	b.n	3c98 <__ieee754_rem_pio2+0x80>
    3d0e:	a386      	add	r3, pc, #536	; (adr r3, 3f28 <__ieee754_rem_pio2+0x310>)
    3d10:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d14:	f7fc fa4a 	bl	1ac <__adddf3>
    3d18:	a385      	add	r3, pc, #532	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d1e:	4604      	mov	r4, r0
    3d20:	460d      	mov	r5, r1
    3d22:	f7fc fa43 	bl	1ac <__adddf3>
    3d26:	4602      	mov	r2, r0
    3d28:	460b      	mov	r3, r1
    3d2a:	e9ca 2300 	strd	r2, r3, [sl]
    3d2e:	4620      	mov	r0, r4
    3d30:	4629      	mov	r1, r5
    3d32:	f7fc fa39 	bl	1a8 <__aeabi_dsub>
    3d36:	a37e      	add	r3, pc, #504	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3d38:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d3c:	e7e0      	b.n	3d00 <__ieee754_rem_pio2+0xe8>
    3d3e:	4b87      	ldr	r3, [pc, #540]	; (3f5c <__ieee754_rem_pio2+0x344>)
    3d40:	4598      	cmp	r8, r3
    3d42:	f300 80d9 	bgt.w	3ef8 <__ieee754_rem_pio2+0x2e0>
    3d46:	f011 fdba 	bl	158be <fabs>
    3d4a:	ec55 4b10 	vmov	r4, r5, d0
    3d4e:	ee10 0a10 	vmov	r0, s0
    3d52:	a379      	add	r3, pc, #484	; (adr r3, 3f38 <__ieee754_rem_pio2+0x320>)
    3d54:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d58:	4629      	mov	r1, r5
    3d5a:	f7fc fbdd 	bl	518 <__aeabi_dmul>
    3d5e:	4b80      	ldr	r3, [pc, #512]	; (3f60 <__ieee754_rem_pio2+0x348>)
    3d60:	2200      	movs	r2, #0
    3d62:	f7fc fa23 	bl	1ac <__adddf3>
    3d66:	f7fc fe71 	bl	a4c <__aeabi_d2iz>
    3d6a:	4683      	mov	fp, r0
    3d6c:	f7fc fb6a 	bl	444 <__aeabi_i2d>
    3d70:	4602      	mov	r2, r0
    3d72:	460b      	mov	r3, r1
    3d74:	ec43 2b18 	vmov	d8, r2, r3
    3d78:	a367      	add	r3, pc, #412	; (adr r3, 3f18 <__ieee754_rem_pio2+0x300>)
    3d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d7e:	f7fc fbcb 	bl	518 <__aeabi_dmul>
    3d82:	4602      	mov	r2, r0
    3d84:	460b      	mov	r3, r1
    3d86:	4620      	mov	r0, r4
    3d88:	4629      	mov	r1, r5
    3d8a:	f7fc fa0d 	bl	1a8 <__aeabi_dsub>
    3d8e:	a364      	add	r3, pc, #400	; (adr r3, 3f20 <__ieee754_rem_pio2+0x308>)
    3d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d94:	4606      	mov	r6, r0
    3d96:	460f      	mov	r7, r1
    3d98:	ec51 0b18 	vmov	r0, r1, d8
    3d9c:	f7fc fbbc 	bl	518 <__aeabi_dmul>
    3da0:	f1bb 0f1f 	cmp.w	fp, #31
    3da4:	4604      	mov	r4, r0
    3da6:	460d      	mov	r5, r1
    3da8:	dc0d      	bgt.n	3dc6 <__ieee754_rem_pio2+0x1ae>
    3daa:	4b6e      	ldr	r3, [pc, #440]	; (3f64 <__ieee754_rem_pio2+0x34c>)
    3dac:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    3db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3db4:	4543      	cmp	r3, r8
    3db6:	d006      	beq.n	3dc6 <__ieee754_rem_pio2+0x1ae>
    3db8:	4622      	mov	r2, r4
    3dba:	462b      	mov	r3, r5
    3dbc:	4630      	mov	r0, r6
    3dbe:	4639      	mov	r1, r7
    3dc0:	f7fc f9f2 	bl	1a8 <__aeabi_dsub>
    3dc4:	e00f      	b.n	3de6 <__ieee754_rem_pio2+0x1ce>
    3dc6:	462b      	mov	r3, r5
    3dc8:	4622      	mov	r2, r4
    3dca:	4630      	mov	r0, r6
    3dcc:	4639      	mov	r1, r7
    3dce:	f7fc f9eb 	bl	1a8 <__aeabi_dsub>
    3dd2:	ea4f 5328 	mov.w	r3, r8, asr #20
    3dd6:	9303      	str	r3, [sp, #12]
    3dd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
    3ddc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
    3de0:	f1b8 0f10 	cmp.w	r8, #16
    3de4:	dc02      	bgt.n	3dec <__ieee754_rem_pio2+0x1d4>
    3de6:	e9ca 0100 	strd	r0, r1, [sl]
    3dea:	e039      	b.n	3e60 <__ieee754_rem_pio2+0x248>
    3dec:	a34e      	add	r3, pc, #312	; (adr r3, 3f28 <__ieee754_rem_pio2+0x310>)
    3dee:	e9d3 2300 	ldrd	r2, r3, [r3]
    3df2:	ec51 0b18 	vmov	r0, r1, d8
    3df6:	f7fc fb8f 	bl	518 <__aeabi_dmul>
    3dfa:	4604      	mov	r4, r0
    3dfc:	460d      	mov	r5, r1
    3dfe:	4602      	mov	r2, r0
    3e00:	460b      	mov	r3, r1
    3e02:	4630      	mov	r0, r6
    3e04:	4639      	mov	r1, r7
    3e06:	f7fc f9cf 	bl	1a8 <__aeabi_dsub>
    3e0a:	4602      	mov	r2, r0
    3e0c:	460b      	mov	r3, r1
    3e0e:	4680      	mov	r8, r0
    3e10:	4689      	mov	r9, r1
    3e12:	4630      	mov	r0, r6
    3e14:	4639      	mov	r1, r7
    3e16:	f7fc f9c7 	bl	1a8 <__aeabi_dsub>
    3e1a:	4622      	mov	r2, r4
    3e1c:	462b      	mov	r3, r5
    3e1e:	f7fc f9c3 	bl	1a8 <__aeabi_dsub>
    3e22:	a343      	add	r3, pc, #268	; (adr r3, 3f30 <__ieee754_rem_pio2+0x318>)
    3e24:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e28:	4604      	mov	r4, r0
    3e2a:	460d      	mov	r5, r1
    3e2c:	ec51 0b18 	vmov	r0, r1, d8
    3e30:	f7fc fb72 	bl	518 <__aeabi_dmul>
    3e34:	4622      	mov	r2, r4
    3e36:	462b      	mov	r3, r5
    3e38:	f7fc f9b6 	bl	1a8 <__aeabi_dsub>
    3e3c:	4602      	mov	r2, r0
    3e3e:	460b      	mov	r3, r1
    3e40:	4604      	mov	r4, r0
    3e42:	460d      	mov	r5, r1
    3e44:	4640      	mov	r0, r8
    3e46:	4649      	mov	r1, r9
    3e48:	f7fc f9ae 	bl	1a8 <__aeabi_dsub>
    3e4c:	9a03      	ldr	r2, [sp, #12]
    3e4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
    3e52:	1ad3      	subs	r3, r2, r3
    3e54:	2b31      	cmp	r3, #49	; 0x31
    3e56:	dc24      	bgt.n	3ea2 <__ieee754_rem_pio2+0x28a>
    3e58:	e9ca 0100 	strd	r0, r1, [sl]
    3e5c:	4646      	mov	r6, r8
    3e5e:	464f      	mov	r7, r9
    3e60:	e9da 8900 	ldrd	r8, r9, [sl]
    3e64:	4630      	mov	r0, r6
    3e66:	4642      	mov	r2, r8
    3e68:	464b      	mov	r3, r9
    3e6a:	4639      	mov	r1, r7
    3e6c:	f7fc f99c 	bl	1a8 <__aeabi_dsub>
    3e70:	462b      	mov	r3, r5
    3e72:	4622      	mov	r2, r4
    3e74:	f7fc f998 	bl	1a8 <__aeabi_dsub>
    3e78:	9b02      	ldr	r3, [sp, #8]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3e80:	f6bf af0a 	bge.w	3c98 <__ieee754_rem_pio2+0x80>
    3e84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    3e88:	f8ca 3004 	str.w	r3, [sl, #4]
    3e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    3e90:	f8ca 8000 	str.w	r8, [sl]
    3e94:	f8ca 0008 	str.w	r0, [sl, #8]
    3e98:	f8ca 300c 	str.w	r3, [sl, #12]
    3e9c:	f1cb 0b00 	rsb	fp, fp, #0
    3ea0:	e6fa      	b.n	3c98 <__ieee754_rem_pio2+0x80>
    3ea2:	a327      	add	r3, pc, #156	; (adr r3, 3f40 <__ieee754_rem_pio2+0x328>)
    3ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ea8:	ec51 0b18 	vmov	r0, r1, d8
    3eac:	f7fc fb34 	bl	518 <__aeabi_dmul>
    3eb0:	4604      	mov	r4, r0
    3eb2:	460d      	mov	r5, r1
    3eb4:	4602      	mov	r2, r0
    3eb6:	460b      	mov	r3, r1
    3eb8:	4640      	mov	r0, r8
    3eba:	4649      	mov	r1, r9
    3ebc:	f7fc f974 	bl	1a8 <__aeabi_dsub>
    3ec0:	4602      	mov	r2, r0
    3ec2:	460b      	mov	r3, r1
    3ec4:	4606      	mov	r6, r0
    3ec6:	460f      	mov	r7, r1
    3ec8:	4640      	mov	r0, r8
    3eca:	4649      	mov	r1, r9
    3ecc:	f7fc f96c 	bl	1a8 <__aeabi_dsub>
    3ed0:	4622      	mov	r2, r4
    3ed2:	462b      	mov	r3, r5
    3ed4:	f7fc f968 	bl	1a8 <__aeabi_dsub>
    3ed8:	a31b      	add	r3, pc, #108	; (adr r3, 3f48 <__ieee754_rem_pio2+0x330>)
    3eda:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ede:	4604      	mov	r4, r0
    3ee0:	460d      	mov	r5, r1
    3ee2:	ec51 0b18 	vmov	r0, r1, d8
    3ee6:	f7fc fb17 	bl	518 <__aeabi_dmul>
    3eea:	4622      	mov	r2, r4
    3eec:	462b      	mov	r3, r5
    3eee:	f7fc f95b 	bl	1a8 <__aeabi_dsub>
    3ef2:	4604      	mov	r4, r0
    3ef4:	460d      	mov	r5, r1
    3ef6:	e75f      	b.n	3db8 <__ieee754_rem_pio2+0x1a0>
    3ef8:	4b1b      	ldr	r3, [pc, #108]	; (3f68 <__ieee754_rem_pio2+0x350>)
    3efa:	4598      	cmp	r8, r3
    3efc:	dd36      	ble.n	3f6c <__ieee754_rem_pio2+0x354>
    3efe:	ee10 2a10 	vmov	r2, s0
    3f02:	462b      	mov	r3, r5
    3f04:	4620      	mov	r0, r4
    3f06:	4629      	mov	r1, r5
    3f08:	f7fc f94e 	bl	1a8 <__aeabi_dsub>
    3f0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    3f10:	e9ca 0100 	strd	r0, r1, [sl]
    3f14:	e694      	b.n	3c40 <__ieee754_rem_pio2+0x28>
    3f16:	bf00      	nop
    3f18:	54400000 	.word	0x54400000
    3f1c:	3ff921fb 	.word	0x3ff921fb
    3f20:	1a626331 	.word	0x1a626331
    3f24:	3dd0b461 	.word	0x3dd0b461
    3f28:	1a600000 	.word	0x1a600000
    3f2c:	3dd0b461 	.word	0x3dd0b461
    3f30:	2e037073 	.word	0x2e037073
    3f34:	3ba3198a 	.word	0x3ba3198a
    3f38:	6dc9c883 	.word	0x6dc9c883
    3f3c:	3fe45f30 	.word	0x3fe45f30
    3f40:	2e000000 	.word	0x2e000000
    3f44:	3ba3198a 	.word	0x3ba3198a
    3f48:	252049c1 	.word	0x252049c1
    3f4c:	397b839a 	.word	0x397b839a
    3f50:	3fe921fb 	.word	0x3fe921fb
    3f54:	4002d97b 	.word	0x4002d97b
    3f58:	3ff921fb 	.word	0x3ff921fb
    3f5c:	413921fb 	.word	0x413921fb
    3f60:	3fe00000 	.word	0x3fe00000
    3f64:	0003f6a8 	.word	0x0003f6a8
    3f68:	7fefffff 	.word	0x7fefffff
    3f6c:	ea4f 5428 	mov.w	r4, r8, asr #20
    3f70:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
    3f74:	ee10 0a10 	vmov	r0, s0
    3f78:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
    3f7c:	ee10 6a10 	vmov	r6, s0
    3f80:	460f      	mov	r7, r1
    3f82:	f7fc fd63 	bl	a4c <__aeabi_d2iz>
    3f86:	f7fc fa5d 	bl	444 <__aeabi_i2d>
    3f8a:	4602      	mov	r2, r0
    3f8c:	460b      	mov	r3, r1
    3f8e:	4630      	mov	r0, r6
    3f90:	4639      	mov	r1, r7
    3f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3f96:	f7fc f907 	bl	1a8 <__aeabi_dsub>
    3f9a:	4b23      	ldr	r3, [pc, #140]	; (4028 <__ieee754_rem_pio2+0x410>)
    3f9c:	2200      	movs	r2, #0
    3f9e:	f7fc fabb 	bl	518 <__aeabi_dmul>
    3fa2:	460f      	mov	r7, r1
    3fa4:	4606      	mov	r6, r0
    3fa6:	f7fc fd51 	bl	a4c <__aeabi_d2iz>
    3faa:	f7fc fa4b 	bl	444 <__aeabi_i2d>
    3fae:	4602      	mov	r2, r0
    3fb0:	460b      	mov	r3, r1
    3fb2:	4630      	mov	r0, r6
    3fb4:	4639      	mov	r1, r7
    3fb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3fba:	f7fc f8f5 	bl	1a8 <__aeabi_dsub>
    3fbe:	4b1a      	ldr	r3, [pc, #104]	; (4028 <__ieee754_rem_pio2+0x410>)
    3fc0:	2200      	movs	r2, #0
    3fc2:	f7fc faa9 	bl	518 <__aeabi_dmul>
    3fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    3fca:	ad04      	add	r5, sp, #16
    3fcc:	f04f 0803 	mov.w	r8, #3
    3fd0:	46a9      	mov	r9, r5
    3fd2:	2600      	movs	r6, #0
    3fd4:	2700      	movs	r7, #0
    3fd6:	4632      	mov	r2, r6
    3fd8:	463b      	mov	r3, r7
    3fda:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    3fde:	46c3      	mov	fp, r8
    3fe0:	3d08      	subs	r5, #8
    3fe2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3fe6:	f7fc fcff 	bl	9e8 <__aeabi_dcmpeq>
    3fea:	2800      	cmp	r0, #0
    3fec:	d1f3      	bne.n	3fd6 <__ieee754_rem_pio2+0x3be>
    3fee:	4b0f      	ldr	r3, [pc, #60]	; (402c <__ieee754_rem_pio2+0x414>)
    3ff0:	9301      	str	r3, [sp, #4]
    3ff2:	2302      	movs	r3, #2
    3ff4:	9300      	str	r3, [sp, #0]
    3ff6:	4622      	mov	r2, r4
    3ff8:	465b      	mov	r3, fp
    3ffa:	4651      	mov	r1, sl
    3ffc:	4648      	mov	r0, r9
    3ffe:	f000 f8df 	bl	41c0 <__kernel_rem_pio2>
    4002:	9b02      	ldr	r3, [sp, #8]
    4004:	2b00      	cmp	r3, #0
    4006:	4683      	mov	fp, r0
    4008:	f6bf ae46 	bge.w	3c98 <__ieee754_rem_pio2+0x80>
    400c:	e9da 2100 	ldrd	r2, r1, [sl]
    4010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4014:	e9ca 2300 	strd	r2, r3, [sl]
    4018:	e9da 2102 	ldrd	r2, r1, [sl, #8]
    401c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4020:	e9ca 2302 	strd	r2, r3, [sl, #8]
    4024:	e73a      	b.n	3e9c <__ieee754_rem_pio2+0x284>
    4026:	bf00      	nop
    4028:	41700000 	.word	0x41700000
    402c:	0003f728 	.word	0x0003f728

00004030 <__kernel_cos>:
    4030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4034:	ec57 6b10 	vmov	r6, r7, d0
    4038:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
    403c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
    4040:	ed8d 1b00 	vstr	d1, [sp]
    4044:	da07      	bge.n	4056 <__kernel_cos+0x26>
    4046:	ee10 0a10 	vmov	r0, s0
    404a:	4639      	mov	r1, r7
    404c:	f7fc fcfe 	bl	a4c <__aeabi_d2iz>
    4050:	2800      	cmp	r0, #0
    4052:	f000 8088 	beq.w	4166 <__kernel_cos+0x136>
    4056:	4632      	mov	r2, r6
    4058:	463b      	mov	r3, r7
    405a:	4630      	mov	r0, r6
    405c:	4639      	mov	r1, r7
    405e:	f7fc fa5b 	bl	518 <__aeabi_dmul>
    4062:	4b51      	ldr	r3, [pc, #324]	; (41a8 <__kernel_cos+0x178>)
    4064:	2200      	movs	r2, #0
    4066:	4604      	mov	r4, r0
    4068:	460d      	mov	r5, r1
    406a:	f7fc fa55 	bl	518 <__aeabi_dmul>
    406e:	a340      	add	r3, pc, #256	; (adr r3, 4170 <__kernel_cos+0x140>)
    4070:	e9d3 2300 	ldrd	r2, r3, [r3]
    4074:	4682      	mov	sl, r0
    4076:	468b      	mov	fp, r1
    4078:	4620      	mov	r0, r4
    407a:	4629      	mov	r1, r5
    407c:	f7fc fa4c 	bl	518 <__aeabi_dmul>
    4080:	a33d      	add	r3, pc, #244	; (adr r3, 4178 <__kernel_cos+0x148>)
    4082:	e9d3 2300 	ldrd	r2, r3, [r3]
    4086:	f7fc f891 	bl	1ac <__adddf3>
    408a:	4622      	mov	r2, r4
    408c:	462b      	mov	r3, r5
    408e:	f7fc fa43 	bl	518 <__aeabi_dmul>
    4092:	a33b      	add	r3, pc, #236	; (adr r3, 4180 <__kernel_cos+0x150>)
    4094:	e9d3 2300 	ldrd	r2, r3, [r3]
    4098:	f7fc f886 	bl	1a8 <__aeabi_dsub>
    409c:	4622      	mov	r2, r4
    409e:	462b      	mov	r3, r5
    40a0:	f7fc fa3a 	bl	518 <__aeabi_dmul>
    40a4:	a338      	add	r3, pc, #224	; (adr r3, 4188 <__kernel_cos+0x158>)
    40a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    40aa:	f7fc f87f 	bl	1ac <__adddf3>
    40ae:	4622      	mov	r2, r4
    40b0:	462b      	mov	r3, r5
    40b2:	f7fc fa31 	bl	518 <__aeabi_dmul>
    40b6:	a336      	add	r3, pc, #216	; (adr r3, 4190 <__kernel_cos+0x160>)
    40b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    40bc:	f7fc f874 	bl	1a8 <__aeabi_dsub>
    40c0:	4622      	mov	r2, r4
    40c2:	462b      	mov	r3, r5
    40c4:	f7fc fa28 	bl	518 <__aeabi_dmul>
    40c8:	a333      	add	r3, pc, #204	; (adr r3, 4198 <__kernel_cos+0x168>)
    40ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    40ce:	f7fc f86d 	bl	1ac <__adddf3>
    40d2:	4622      	mov	r2, r4
    40d4:	462b      	mov	r3, r5
    40d6:	f7fc fa1f 	bl	518 <__aeabi_dmul>
    40da:	4622      	mov	r2, r4
    40dc:	462b      	mov	r3, r5
    40de:	f7fc fa1b 	bl	518 <__aeabi_dmul>
    40e2:	e9dd 2300 	ldrd	r2, r3, [sp]
    40e6:	4604      	mov	r4, r0
    40e8:	460d      	mov	r5, r1
    40ea:	4630      	mov	r0, r6
    40ec:	4639      	mov	r1, r7
    40ee:	f7fc fa13 	bl	518 <__aeabi_dmul>
    40f2:	460b      	mov	r3, r1
    40f4:	4602      	mov	r2, r0
    40f6:	4629      	mov	r1, r5
    40f8:	4620      	mov	r0, r4
    40fa:	f7fc f855 	bl	1a8 <__aeabi_dsub>
    40fe:	4b2b      	ldr	r3, [pc, #172]	; (41ac <__kernel_cos+0x17c>)
    4100:	4598      	cmp	r8, r3
    4102:	4606      	mov	r6, r0
    4104:	460f      	mov	r7, r1
    4106:	dc10      	bgt.n	412a <__kernel_cos+0xfa>
    4108:	4602      	mov	r2, r0
    410a:	460b      	mov	r3, r1
    410c:	4650      	mov	r0, sl
    410e:	4659      	mov	r1, fp
    4110:	f7fc f84a 	bl	1a8 <__aeabi_dsub>
    4114:	460b      	mov	r3, r1
    4116:	4926      	ldr	r1, [pc, #152]	; (41b0 <__kernel_cos+0x180>)
    4118:	4602      	mov	r2, r0
    411a:	2000      	movs	r0, #0
    411c:	f7fc f844 	bl	1a8 <__aeabi_dsub>
    4120:	ec41 0b10 	vmov	d0, r0, r1
    4124:	b003      	add	sp, #12
    4126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    412a:	4b22      	ldr	r3, [pc, #136]	; (41b4 <__kernel_cos+0x184>)
    412c:	4920      	ldr	r1, [pc, #128]	; (41b0 <__kernel_cos+0x180>)
    412e:	4598      	cmp	r8, r3
    4130:	bfcc      	ite	gt
    4132:	4d21      	ldrgt	r5, [pc, #132]	; (41b8 <__kernel_cos+0x188>)
    4134:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
    4138:	2400      	movs	r4, #0
    413a:	4622      	mov	r2, r4
    413c:	462b      	mov	r3, r5
    413e:	2000      	movs	r0, #0
    4140:	f7fc f832 	bl	1a8 <__aeabi_dsub>
    4144:	4622      	mov	r2, r4
    4146:	4680      	mov	r8, r0
    4148:	4689      	mov	r9, r1
    414a:	462b      	mov	r3, r5
    414c:	4650      	mov	r0, sl
    414e:	4659      	mov	r1, fp
    4150:	f7fc f82a 	bl	1a8 <__aeabi_dsub>
    4154:	4632      	mov	r2, r6
    4156:	463b      	mov	r3, r7
    4158:	f7fc f826 	bl	1a8 <__aeabi_dsub>
    415c:	4602      	mov	r2, r0
    415e:	460b      	mov	r3, r1
    4160:	4640      	mov	r0, r8
    4162:	4649      	mov	r1, r9
    4164:	e7da      	b.n	411c <__kernel_cos+0xec>
    4166:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 41a0 <__kernel_cos+0x170>
    416a:	e7db      	b.n	4124 <__kernel_cos+0xf4>
    416c:	f3af 8000 	nop.w
    4170:	be8838d4 	.word	0xbe8838d4
    4174:	bda8fae9 	.word	0xbda8fae9
    4178:	bdb4b1c4 	.word	0xbdb4b1c4
    417c:	3e21ee9e 	.word	0x3e21ee9e
    4180:	809c52ad 	.word	0x809c52ad
    4184:	3e927e4f 	.word	0x3e927e4f
    4188:	19cb1590 	.word	0x19cb1590
    418c:	3efa01a0 	.word	0x3efa01a0
    4190:	16c15177 	.word	0x16c15177
    4194:	3f56c16c 	.word	0x3f56c16c
    4198:	5555554c 	.word	0x5555554c
    419c:	3fa55555 	.word	0x3fa55555
    41a0:	00000000 	.word	0x00000000
    41a4:	3ff00000 	.word	0x3ff00000
    41a8:	3fe00000 	.word	0x3fe00000
    41ac:	3fd33332 	.word	0x3fd33332
    41b0:	3ff00000 	.word	0x3ff00000
    41b4:	3fe90000 	.word	0x3fe90000
    41b8:	3fd20000 	.word	0x3fd20000
    41bc:	00000000 	.word	0x00000000

000041c0 <__kernel_rem_pio2>:
    41c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41c4:	ed2d 8b02 	vpush	{d8}
    41c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    41cc:	f112 0f14 	cmn.w	r2, #20
    41d0:	9308      	str	r3, [sp, #32]
    41d2:	9101      	str	r1, [sp, #4]
    41d4:	4bc4      	ldr	r3, [pc, #784]	; (44e8 <__kernel_rem_pio2+0x328>)
    41d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
    41d8:	900b      	str	r0, [sp, #44]	; 0x2c
    41da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    41de:	9302      	str	r3, [sp, #8]
    41e0:	9b08      	ldr	r3, [sp, #32]
    41e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    41e6:	bfa8      	it	ge
    41e8:	1ed4      	subge	r4, r2, #3
    41ea:	9306      	str	r3, [sp, #24]
    41ec:	bfb2      	itee	lt
    41ee:	2400      	movlt	r4, #0
    41f0:	2318      	movge	r3, #24
    41f2:	fb94 f4f3 	sdivge	r4, r4, r3
    41f6:	f06f 0317 	mvn.w	r3, #23
    41fa:	fb04 3303 	mla	r3, r4, r3, r3
    41fe:	eb03 0a02 	add.w	sl, r3, r2
    4202:	9b02      	ldr	r3, [sp, #8]
    4204:	9a06      	ldr	r2, [sp, #24]
    4206:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 44d8 <__kernel_rem_pio2+0x318>
    420a:	eb03 0802 	add.w	r8, r3, r2
    420e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
    4210:	1aa7      	subs	r7, r4, r2
    4212:	ae22      	add	r6, sp, #136	; 0x88
    4214:	eb03 0987 	add.w	r9, r3, r7, lsl #2
    4218:	2500      	movs	r5, #0
    421a:	4545      	cmp	r5, r8
    421c:	dd13      	ble.n	4246 <__kernel_rem_pio2+0x86>
    421e:	9b08      	ldr	r3, [sp, #32]
    4220:	ed9f 8bad 	vldr	d8, [pc, #692]	; 44d8 <__kernel_rem_pio2+0x318>
    4224:	aa22      	add	r2, sp, #136	; 0x88
    4226:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    422a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
    422e:	f04f 0800 	mov.w	r8, #0
    4232:	9b02      	ldr	r3, [sp, #8]
    4234:	4598      	cmp	r8, r3
    4236:	dc2f      	bgt.n	4298 <__kernel_rem_pio2+0xd8>
    4238:	ed8d 8b04 	vstr	d8, [sp, #16]
    423c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    4240:	462f      	mov	r7, r5
    4242:	2600      	movs	r6, #0
    4244:	e01b      	b.n	427e <__kernel_rem_pio2+0xbe>
    4246:	42ef      	cmn	r7, r5
    4248:	d407      	bmi.n	425a <__kernel_rem_pio2+0x9a>
    424a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
    424e:	f7fc f8f9 	bl	444 <__aeabi_i2d>
    4252:	e8e6 0102 	strd	r0, r1, [r6], #8
    4256:	3501      	adds	r5, #1
    4258:	e7df      	b.n	421a <__kernel_rem_pio2+0x5a>
    425a:	ec51 0b18 	vmov	r0, r1, d8
    425e:	e7f8      	b.n	4252 <__kernel_rem_pio2+0x92>
    4260:	e9d7 2300 	ldrd	r2, r3, [r7]
    4264:	e8f9 0102 	ldrd	r0, r1, [r9], #8
    4268:	f7fc f956 	bl	518 <__aeabi_dmul>
    426c:	4602      	mov	r2, r0
    426e:	460b      	mov	r3, r1
    4270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4274:	f7fb ff9a 	bl	1ac <__adddf3>
    4278:	e9cd 0104 	strd	r0, r1, [sp, #16]
    427c:	3601      	adds	r6, #1
    427e:	9b06      	ldr	r3, [sp, #24]
    4280:	429e      	cmp	r6, r3
    4282:	f1a7 0708 	sub.w	r7, r7, #8
    4286:	ddeb      	ble.n	4260 <__kernel_rem_pio2+0xa0>
    4288:	ed9d 7b04 	vldr	d7, [sp, #16]
    428c:	f108 0801 	add.w	r8, r8, #1
    4290:	ecab 7b02 	vstmia	fp!, {d7}
    4294:	3508      	adds	r5, #8
    4296:	e7cc      	b.n	4232 <__kernel_rem_pio2+0x72>
    4298:	9b02      	ldr	r3, [sp, #8]
    429a:	aa0e      	add	r2, sp, #56	; 0x38
    429c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    42a0:	930d      	str	r3, [sp, #52]	; 0x34
    42a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
    42a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    42a8:	9c02      	ldr	r4, [sp, #8]
    42aa:	930c      	str	r3, [sp, #48]	; 0x30
    42ac:	00e3      	lsls	r3, r4, #3
    42ae:	930a      	str	r3, [sp, #40]	; 0x28
    42b0:	ab9a      	add	r3, sp, #616	; 0x268
    42b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    42b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
    42ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    42be:	ab72      	add	r3, sp, #456	; 0x1c8
    42c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
    42c4:	46c3      	mov	fp, r8
    42c6:	46a1      	mov	r9, r4
    42c8:	f1b9 0f00 	cmp.w	r9, #0
    42cc:	f1a5 0508 	sub.w	r5, r5, #8
    42d0:	dc77      	bgt.n	43c2 <__kernel_rem_pio2+0x202>
    42d2:	ec47 6b10 	vmov	d0, r6, r7
    42d6:	4650      	mov	r0, sl
    42d8:	f000 fb86 	bl	49e8 <scalbn>
    42dc:	ec57 6b10 	vmov	r6, r7, d0
    42e0:	2200      	movs	r2, #0
    42e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    42e6:	ee10 0a10 	vmov	r0, s0
    42ea:	4639      	mov	r1, r7
    42ec:	f7fc f914 	bl	518 <__aeabi_dmul>
    42f0:	ec41 0b10 	vmov	d0, r0, r1
    42f4:	f7fe fe98 	bl	3028 <floor>
    42f8:	4b7c      	ldr	r3, [pc, #496]	; (44ec <__kernel_rem_pio2+0x32c>)
    42fa:	ec51 0b10 	vmov	r0, r1, d0
    42fe:	2200      	movs	r2, #0
    4300:	f7fc f90a 	bl	518 <__aeabi_dmul>
    4304:	4602      	mov	r2, r0
    4306:	460b      	mov	r3, r1
    4308:	4630      	mov	r0, r6
    430a:	4639      	mov	r1, r7
    430c:	f7fb ff4c 	bl	1a8 <__aeabi_dsub>
    4310:	460f      	mov	r7, r1
    4312:	4606      	mov	r6, r0
    4314:	f7fc fb9a 	bl	a4c <__aeabi_d2iz>
    4318:	9004      	str	r0, [sp, #16]
    431a:	f7fc f893 	bl	444 <__aeabi_i2d>
    431e:	4602      	mov	r2, r0
    4320:	460b      	mov	r3, r1
    4322:	4630      	mov	r0, r6
    4324:	4639      	mov	r1, r7
    4326:	f7fb ff3f 	bl	1a8 <__aeabi_dsub>
    432a:	f1ba 0f00 	cmp.w	sl, #0
    432e:	4606      	mov	r6, r0
    4330:	460f      	mov	r7, r1
    4332:	dd6d      	ble.n	4410 <__kernel_rem_pio2+0x250>
    4334:	1e62      	subs	r2, r4, #1
    4336:	ab0e      	add	r3, sp, #56	; 0x38
    4338:	9d04      	ldr	r5, [sp, #16]
    433a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    433e:	f1ca 0118 	rsb	r1, sl, #24
    4342:	fa40 f301 	asr.w	r3, r0, r1
    4346:	441d      	add	r5, r3
    4348:	408b      	lsls	r3, r1
    434a:	1ac0      	subs	r0, r0, r3
    434c:	ab0e      	add	r3, sp, #56	; 0x38
    434e:	9504      	str	r5, [sp, #16]
    4350:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    4354:	f1ca 0317 	rsb	r3, sl, #23
    4358:	fa40 fb03 	asr.w	fp, r0, r3
    435c:	f1bb 0f00 	cmp.w	fp, #0
    4360:	dd65      	ble.n	442e <__kernel_rem_pio2+0x26e>
    4362:	9b04      	ldr	r3, [sp, #16]
    4364:	2200      	movs	r2, #0
    4366:	3301      	adds	r3, #1
    4368:	9304      	str	r3, [sp, #16]
    436a:	4615      	mov	r5, r2
    436c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    4370:	4294      	cmp	r4, r2
    4372:	f300 809c 	bgt.w	44ae <__kernel_rem_pio2+0x2ee>
    4376:	f1ba 0f00 	cmp.w	sl, #0
    437a:	dd07      	ble.n	438c <__kernel_rem_pio2+0x1cc>
    437c:	f1ba 0f01 	cmp.w	sl, #1
    4380:	f000 80c0 	beq.w	4504 <__kernel_rem_pio2+0x344>
    4384:	f1ba 0f02 	cmp.w	sl, #2
    4388:	f000 80c6 	beq.w	4518 <__kernel_rem_pio2+0x358>
    438c:	f1bb 0f02 	cmp.w	fp, #2
    4390:	d14d      	bne.n	442e <__kernel_rem_pio2+0x26e>
    4392:	4632      	mov	r2, r6
    4394:	463b      	mov	r3, r7
    4396:	4956      	ldr	r1, [pc, #344]	; (44f0 <__kernel_rem_pio2+0x330>)
    4398:	2000      	movs	r0, #0
    439a:	f7fb ff05 	bl	1a8 <__aeabi_dsub>
    439e:	4606      	mov	r6, r0
    43a0:	460f      	mov	r7, r1
    43a2:	2d00      	cmp	r5, #0
    43a4:	d043      	beq.n	442e <__kernel_rem_pio2+0x26e>
    43a6:	4650      	mov	r0, sl
    43a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 44e0 <__kernel_rem_pio2+0x320>
    43ac:	f000 fb1c 	bl	49e8 <scalbn>
    43b0:	4630      	mov	r0, r6
    43b2:	4639      	mov	r1, r7
    43b4:	ec53 2b10 	vmov	r2, r3, d0
    43b8:	f7fb fef6 	bl	1a8 <__aeabi_dsub>
    43bc:	4606      	mov	r6, r0
    43be:	460f      	mov	r7, r1
    43c0:	e035      	b.n	442e <__kernel_rem_pio2+0x26e>
    43c2:	4b4c      	ldr	r3, [pc, #304]	; (44f4 <__kernel_rem_pio2+0x334>)
    43c4:	2200      	movs	r2, #0
    43c6:	4630      	mov	r0, r6
    43c8:	4639      	mov	r1, r7
    43ca:	f7fc f8a5 	bl	518 <__aeabi_dmul>
    43ce:	f7fc fb3d 	bl	a4c <__aeabi_d2iz>
    43d2:	f7fc f837 	bl	444 <__aeabi_i2d>
    43d6:	4602      	mov	r2, r0
    43d8:	460b      	mov	r3, r1
    43da:	ec43 2b18 	vmov	d8, r2, r3
    43de:	4b46      	ldr	r3, [pc, #280]	; (44f8 <__kernel_rem_pio2+0x338>)
    43e0:	2200      	movs	r2, #0
    43e2:	f7fc f899 	bl	518 <__aeabi_dmul>
    43e6:	4602      	mov	r2, r0
    43e8:	460b      	mov	r3, r1
    43ea:	4630      	mov	r0, r6
    43ec:	4639      	mov	r1, r7
    43ee:	f7fb fedb 	bl	1a8 <__aeabi_dsub>
    43f2:	f7fc fb2b 	bl	a4c <__aeabi_d2iz>
    43f6:	e9d5 2300 	ldrd	r2, r3, [r5]
    43fa:	f84b 0b04 	str.w	r0, [fp], #4
    43fe:	ec51 0b18 	vmov	r0, r1, d8
    4402:	f7fb fed3 	bl	1ac <__adddf3>
    4406:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    440a:	4606      	mov	r6, r0
    440c:	460f      	mov	r7, r1
    440e:	e75b      	b.n	42c8 <__kernel_rem_pio2+0x108>
    4410:	d106      	bne.n	4420 <__kernel_rem_pio2+0x260>
    4412:	1e63      	subs	r3, r4, #1
    4414:	aa0e      	add	r2, sp, #56	; 0x38
    4416:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    441a:	ea4f 5be0 	mov.w	fp, r0, asr #23
    441e:	e79d      	b.n	435c <__kernel_rem_pio2+0x19c>
    4420:	4b36      	ldr	r3, [pc, #216]	; (44fc <__kernel_rem_pio2+0x33c>)
    4422:	2200      	movs	r2, #0
    4424:	f7fc fafe 	bl	a24 <__aeabi_dcmpge>
    4428:	2800      	cmp	r0, #0
    442a:	d13d      	bne.n	44a8 <__kernel_rem_pio2+0x2e8>
    442c:	4683      	mov	fp, r0
    442e:	2200      	movs	r2, #0
    4430:	2300      	movs	r3, #0
    4432:	4630      	mov	r0, r6
    4434:	4639      	mov	r1, r7
    4436:	f7fc fad7 	bl	9e8 <__aeabi_dcmpeq>
    443a:	2800      	cmp	r0, #0
    443c:	f000 80bf 	beq.w	45be <__kernel_rem_pio2+0x3fe>
    4440:	1e65      	subs	r5, r4, #1
    4442:	462b      	mov	r3, r5
    4444:	2200      	movs	r2, #0
    4446:	9902      	ldr	r1, [sp, #8]
    4448:	428b      	cmp	r3, r1
    444a:	da6c      	bge.n	4526 <__kernel_rem_pio2+0x366>
    444c:	2a00      	cmp	r2, #0
    444e:	f000 8088 	beq.w	4562 <__kernel_rem_pio2+0x3a2>
    4452:	ab0e      	add	r3, sp, #56	; 0x38
    4454:	f1aa 0a18 	sub.w	sl, sl, #24
    4458:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    445c:	2b00      	cmp	r3, #0
    445e:	f000 80ac 	beq.w	45ba <__kernel_rem_pio2+0x3fa>
    4462:	4650      	mov	r0, sl
    4464:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 44e0 <__kernel_rem_pio2+0x320>
    4468:	f000 fabe 	bl	49e8 <scalbn>
    446c:	ab9a      	add	r3, sp, #616	; 0x268
    446e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    4472:	ec57 6b10 	vmov	r6, r7, d0
    4476:	00ec      	lsls	r4, r5, #3
    4478:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
    447c:	46aa      	mov	sl, r5
    447e:	f1ba 0f00 	cmp.w	sl, #0
    4482:	f280 80d5 	bge.w	4630 <__kernel_rem_pio2+0x470>
    4486:	ed9f 8b14 	vldr	d8, [pc, #80]	; 44d8 <__kernel_rem_pio2+0x318>
    448a:	462e      	mov	r6, r5
    448c:	2e00      	cmp	r6, #0
    448e:	f2c0 8103 	blt.w	4698 <__kernel_rem_pio2+0x4d8>
    4492:	ab72      	add	r3, sp, #456	; 0x1c8
    4494:	ed8d 8b06 	vstr	d8, [sp, #24]
    4498:	f8df a064 	ldr.w	sl, [pc, #100]	; 4500 <__kernel_rem_pio2+0x340>
    449c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
    44a0:	f04f 0800 	mov.w	r8, #0
    44a4:	1baf      	subs	r7, r5, r6
    44a6:	e0e9      	b.n	467c <__kernel_rem_pio2+0x4bc>
    44a8:	f04f 0b02 	mov.w	fp, #2
    44ac:	e759      	b.n	4362 <__kernel_rem_pio2+0x1a2>
    44ae:	f8d8 3000 	ldr.w	r3, [r8]
    44b2:	b955      	cbnz	r5, 44ca <__kernel_rem_pio2+0x30a>
    44b4:	b123      	cbz	r3, 44c0 <__kernel_rem_pio2+0x300>
    44b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
    44ba:	f8c8 3000 	str.w	r3, [r8]
    44be:	2301      	movs	r3, #1
    44c0:	3201      	adds	r2, #1
    44c2:	f108 0804 	add.w	r8, r8, #4
    44c6:	461d      	mov	r5, r3
    44c8:	e752      	b.n	4370 <__kernel_rem_pio2+0x1b0>
    44ca:	1acb      	subs	r3, r1, r3
    44cc:	f8c8 3000 	str.w	r3, [r8]
    44d0:	462b      	mov	r3, r5
    44d2:	e7f5      	b.n	44c0 <__kernel_rem_pio2+0x300>
    44d4:	f3af 8000 	nop.w
	...
    44e4:	3ff00000 	.word	0x3ff00000
    44e8:	0003f848 	.word	0x0003f848
    44ec:	40200000 	.word	0x40200000
    44f0:	3ff00000 	.word	0x3ff00000
    44f4:	3e700000 	.word	0x3e700000
    44f8:	41700000 	.word	0x41700000
    44fc:	3fe00000 	.word	0x3fe00000
    4500:	00016f00 	.word	0x00016f00
    4504:	1e62      	subs	r2, r4, #1
    4506:	ab0e      	add	r3, sp, #56	; 0x38
    4508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    450c:	f3c3 0316 	ubfx	r3, r3, #0, #23
    4510:	a90e      	add	r1, sp, #56	; 0x38
    4512:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    4516:	e739      	b.n	438c <__kernel_rem_pio2+0x1cc>
    4518:	1e62      	subs	r2, r4, #1
    451a:	ab0e      	add	r3, sp, #56	; 0x38
    451c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4520:	f3c3 0315 	ubfx	r3, r3, #0, #22
    4524:	e7f4      	b.n	4510 <__kernel_rem_pio2+0x350>
    4526:	a90e      	add	r1, sp, #56	; 0x38
    4528:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    452c:	3b01      	subs	r3, #1
    452e:	430a      	orrs	r2, r1
    4530:	e789      	b.n	4446 <__kernel_rem_pio2+0x286>
    4532:	3301      	adds	r3, #1
    4534:	f852 1d04 	ldr.w	r1, [r2, #-4]!
    4538:	2900      	cmp	r1, #0
    453a:	d0fa      	beq.n	4532 <__kernel_rem_pio2+0x372>
    453c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    453e:	a99a      	add	r1, sp, #616	; 0x268
    4540:	440a      	add	r2, r1
    4542:	3a98      	subs	r2, #152	; 0x98
    4544:	920a      	str	r2, [sp, #40]	; 0x28
    4546:	9a08      	ldr	r2, [sp, #32]
    4548:	18e3      	adds	r3, r4, r3
    454a:	18a5      	adds	r5, r4, r2
    454c:	aa22      	add	r2, sp, #136	; 0x88
    454e:	f104 0801 	add.w	r8, r4, #1
    4552:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
    4556:	9304      	str	r3, [sp, #16]
    4558:	9b04      	ldr	r3, [sp, #16]
    455a:	4543      	cmp	r3, r8
    455c:	da04      	bge.n	4568 <__kernel_rem_pio2+0x3a8>
    455e:	461c      	mov	r4, r3
    4560:	e6a4      	b.n	42ac <__kernel_rem_pio2+0xec>
    4562:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4564:	2301      	movs	r3, #1
    4566:	e7e5      	b.n	4534 <__kernel_rem_pio2+0x374>
    4568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    456a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
    456e:	f7fb ff69 	bl	444 <__aeabi_i2d>
    4572:	e8e5 0102 	strd	r0, r1, [r5], #8
    4576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4578:	46ab      	mov	fp, r5
    457a:	461c      	mov	r4, r3
    457c:	f04f 0900 	mov.w	r9, #0
    4580:	2600      	movs	r6, #0
    4582:	2700      	movs	r7, #0
    4584:	9b06      	ldr	r3, [sp, #24]
    4586:	4599      	cmp	r9, r3
    4588:	dd06      	ble.n	4598 <__kernel_rem_pio2+0x3d8>
    458a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    458c:	e8e3 6702 	strd	r6, r7, [r3], #8
    4590:	f108 0801 	add.w	r8, r8, #1
    4594:	930a      	str	r3, [sp, #40]	; 0x28
    4596:	e7df      	b.n	4558 <__kernel_rem_pio2+0x398>
    4598:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
    459c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    45a0:	f7fb ffba 	bl	518 <__aeabi_dmul>
    45a4:	4602      	mov	r2, r0
    45a6:	460b      	mov	r3, r1
    45a8:	4630      	mov	r0, r6
    45aa:	4639      	mov	r1, r7
    45ac:	f7fb fdfe 	bl	1ac <__adddf3>
    45b0:	f109 0901 	add.w	r9, r9, #1
    45b4:	4606      	mov	r6, r0
    45b6:	460f      	mov	r7, r1
    45b8:	e7e4      	b.n	4584 <__kernel_rem_pio2+0x3c4>
    45ba:	3d01      	subs	r5, #1
    45bc:	e749      	b.n	4452 <__kernel_rem_pio2+0x292>
    45be:	ec47 6b10 	vmov	d0, r6, r7
    45c2:	f1ca 0000 	rsb	r0, sl, #0
    45c6:	f000 fa0f 	bl	49e8 <scalbn>
    45ca:	ec57 6b10 	vmov	r6, r7, d0
    45ce:	4ba0      	ldr	r3, [pc, #640]	; (4850 <__kernel_rem_pio2+0x690>)
    45d0:	ee10 0a10 	vmov	r0, s0
    45d4:	2200      	movs	r2, #0
    45d6:	4639      	mov	r1, r7
    45d8:	f7fc fa24 	bl	a24 <__aeabi_dcmpge>
    45dc:	b1f8      	cbz	r0, 461e <__kernel_rem_pio2+0x45e>
    45de:	4b9d      	ldr	r3, [pc, #628]	; (4854 <__kernel_rem_pio2+0x694>)
    45e0:	2200      	movs	r2, #0
    45e2:	4630      	mov	r0, r6
    45e4:	4639      	mov	r1, r7
    45e6:	f7fb ff97 	bl	518 <__aeabi_dmul>
    45ea:	f7fc fa2f 	bl	a4c <__aeabi_d2iz>
    45ee:	4680      	mov	r8, r0
    45f0:	f7fb ff28 	bl	444 <__aeabi_i2d>
    45f4:	4b96      	ldr	r3, [pc, #600]	; (4850 <__kernel_rem_pio2+0x690>)
    45f6:	2200      	movs	r2, #0
    45f8:	f7fb ff8e 	bl	518 <__aeabi_dmul>
    45fc:	460b      	mov	r3, r1
    45fe:	4602      	mov	r2, r0
    4600:	4639      	mov	r1, r7
    4602:	4630      	mov	r0, r6
    4604:	f7fb fdd0 	bl	1a8 <__aeabi_dsub>
    4608:	f7fc fa20 	bl	a4c <__aeabi_d2iz>
    460c:	1c65      	adds	r5, r4, #1
    460e:	ab0e      	add	r3, sp, #56	; 0x38
    4610:	f10a 0a18 	add.w	sl, sl, #24
    4614:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    4618:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
    461c:	e721      	b.n	4462 <__kernel_rem_pio2+0x2a2>
    461e:	4630      	mov	r0, r6
    4620:	4639      	mov	r1, r7
    4622:	f7fc fa13 	bl	a4c <__aeabi_d2iz>
    4626:	ab0e      	add	r3, sp, #56	; 0x38
    4628:	4625      	mov	r5, r4
    462a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    462e:	e718      	b.n	4462 <__kernel_rem_pio2+0x2a2>
    4630:	ab0e      	add	r3, sp, #56	; 0x38
    4632:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    4636:	f7fb ff05 	bl	444 <__aeabi_i2d>
    463a:	4632      	mov	r2, r6
    463c:	463b      	mov	r3, r7
    463e:	f7fb ff6b 	bl	518 <__aeabi_dmul>
    4642:	4b84      	ldr	r3, [pc, #528]	; (4854 <__kernel_rem_pio2+0x694>)
    4644:	e968 0102 	strd	r0, r1, [r8, #-8]!
    4648:	2200      	movs	r2, #0
    464a:	4630      	mov	r0, r6
    464c:	4639      	mov	r1, r7
    464e:	f7fb ff63 	bl	518 <__aeabi_dmul>
    4652:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    4656:	4606      	mov	r6, r0
    4658:	460f      	mov	r7, r1
    465a:	e710      	b.n	447e <__kernel_rem_pio2+0x2be>
    465c:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    4660:	e8fa 0102 	ldrd	r0, r1, [sl], #8
    4664:	f7fb ff58 	bl	518 <__aeabi_dmul>
    4668:	4602      	mov	r2, r0
    466a:	460b      	mov	r3, r1
    466c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4670:	f7fb fd9c 	bl	1ac <__adddf3>
    4674:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4678:	f108 0801 	add.w	r8, r8, #1
    467c:	9b02      	ldr	r3, [sp, #8]
    467e:	4598      	cmp	r8, r3
    4680:	dc01      	bgt.n	4686 <__kernel_rem_pio2+0x4c6>
    4682:	45b8      	cmp	r8, r7
    4684:	ddea      	ble.n	465c <__kernel_rem_pio2+0x49c>
    4686:	ed9d 7b06 	vldr	d7, [sp, #24]
    468a:	ab4a      	add	r3, sp, #296	; 0x128
    468c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    4690:	ed87 7b00 	vstr	d7, [r7]
    4694:	3e01      	subs	r6, #1
    4696:	e6f9      	b.n	448c <__kernel_rem_pio2+0x2cc>
    4698:	9ba6      	ldr	r3, [sp, #664]	; 0x298
    469a:	2b02      	cmp	r3, #2
    469c:	dc0b      	bgt.n	46b6 <__kernel_rem_pio2+0x4f6>
    469e:	2b00      	cmp	r3, #0
    46a0:	dc35      	bgt.n	470e <__kernel_rem_pio2+0x54e>
    46a2:	d059      	beq.n	4758 <__kernel_rem_pio2+0x598>
    46a4:	9b04      	ldr	r3, [sp, #16]
    46a6:	f003 0007 	and.w	r0, r3, #7
    46aa:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
    46ae:	ecbd 8b02 	vpop	{d8}
    46b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46b6:	9ba6      	ldr	r3, [sp, #664]	; 0x298
    46b8:	2b03      	cmp	r3, #3
    46ba:	d1f3      	bne.n	46a4 <__kernel_rem_pio2+0x4e4>
    46bc:	ab4a      	add	r3, sp, #296	; 0x128
    46be:	4423      	add	r3, r4
    46c0:	9306      	str	r3, [sp, #24]
    46c2:	461c      	mov	r4, r3
    46c4:	469a      	mov	sl, r3
    46c6:	9502      	str	r5, [sp, #8]
    46c8:	9b02      	ldr	r3, [sp, #8]
    46ca:	2b00      	cmp	r3, #0
    46cc:	f1aa 0a08 	sub.w	sl, sl, #8
    46d0:	dc69      	bgt.n	47a6 <__kernel_rem_pio2+0x5e6>
    46d2:	46aa      	mov	sl, r5
    46d4:	f1ba 0f01 	cmp.w	sl, #1
    46d8:	f1a4 0408 	sub.w	r4, r4, #8
    46dc:	f300 8083 	bgt.w	47e6 <__kernel_rem_pio2+0x626>
    46e0:	9c06      	ldr	r4, [sp, #24]
    46e2:	2000      	movs	r0, #0
    46e4:	3408      	adds	r4, #8
    46e6:	2100      	movs	r1, #0
    46e8:	2d01      	cmp	r5, #1
    46ea:	f300 809b 	bgt.w	4824 <__kernel_rem_pio2+0x664>
    46ee:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
    46f2:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
    46f6:	f1bb 0f00 	cmp.w	fp, #0
    46fa:	f040 8099 	bne.w	4830 <__kernel_rem_pio2+0x670>
    46fe:	9b01      	ldr	r3, [sp, #4]
    4700:	e9c3 5600 	strd	r5, r6, [r3]
    4704:	e9c3 7802 	strd	r7, r8, [r3, #8]
    4708:	e9c3 0104 	strd	r0, r1, [r3, #16]
    470c:	e7ca      	b.n	46a4 <__kernel_rem_pio2+0x4e4>
    470e:	3408      	adds	r4, #8
    4710:	ab4a      	add	r3, sp, #296	; 0x128
    4712:	441c      	add	r4, r3
    4714:	462e      	mov	r6, r5
    4716:	2000      	movs	r0, #0
    4718:	2100      	movs	r1, #0
    471a:	2e00      	cmp	r6, #0
    471c:	da34      	bge.n	4788 <__kernel_rem_pio2+0x5c8>
    471e:	f1bb 0f00 	cmp.w	fp, #0
    4722:	d037      	beq.n	4794 <__kernel_rem_pio2+0x5d4>
    4724:	4602      	mov	r2, r0
    4726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    472a:	9c01      	ldr	r4, [sp, #4]
    472c:	e9c4 2300 	strd	r2, r3, [r4]
    4730:	4602      	mov	r2, r0
    4732:	460b      	mov	r3, r1
    4734:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
    4738:	f7fb fd36 	bl	1a8 <__aeabi_dsub>
    473c:	ae4c      	add	r6, sp, #304	; 0x130
    473e:	2401      	movs	r4, #1
    4740:	42a5      	cmp	r5, r4
    4742:	da2a      	bge.n	479a <__kernel_rem_pio2+0x5da>
    4744:	f1bb 0f00 	cmp.w	fp, #0
    4748:	d002      	beq.n	4750 <__kernel_rem_pio2+0x590>
    474a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    474e:	4619      	mov	r1, r3
    4750:	9b01      	ldr	r3, [sp, #4]
    4752:	e9c3 0102 	strd	r0, r1, [r3, #8]
    4756:	e7a5      	b.n	46a4 <__kernel_rem_pio2+0x4e4>
    4758:	ab9a      	add	r3, sp, #616	; 0x268
    475a:	441c      	add	r4, r3
    475c:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
    4760:	2000      	movs	r0, #0
    4762:	2100      	movs	r1, #0
    4764:	2d00      	cmp	r5, #0
    4766:	da09      	bge.n	477c <__kernel_rem_pio2+0x5bc>
    4768:	f1bb 0f00 	cmp.w	fp, #0
    476c:	d002      	beq.n	4774 <__kernel_rem_pio2+0x5b4>
    476e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4772:	4619      	mov	r1, r3
    4774:	9b01      	ldr	r3, [sp, #4]
    4776:	e9c3 0100 	strd	r0, r1, [r3]
    477a:	e793      	b.n	46a4 <__kernel_rem_pio2+0x4e4>
    477c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    4780:	f7fb fd14 	bl	1ac <__adddf3>
    4784:	3d01      	subs	r5, #1
    4786:	e7ed      	b.n	4764 <__kernel_rem_pio2+0x5a4>
    4788:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    478c:	f7fb fd0e 	bl	1ac <__adddf3>
    4790:	3e01      	subs	r6, #1
    4792:	e7c2      	b.n	471a <__kernel_rem_pio2+0x55a>
    4794:	4602      	mov	r2, r0
    4796:	460b      	mov	r3, r1
    4798:	e7c7      	b.n	472a <__kernel_rem_pio2+0x56a>
    479a:	e8f6 2302 	ldrd	r2, r3, [r6], #8
    479e:	f7fb fd05 	bl	1ac <__adddf3>
    47a2:	3401      	adds	r4, #1
    47a4:	e7cc      	b.n	4740 <__kernel_rem_pio2+0x580>
    47a6:	e9da 8900 	ldrd	r8, r9, [sl]
    47aa:	e9da 6702 	ldrd	r6, r7, [sl, #8]
    47ae:	9b02      	ldr	r3, [sp, #8]
    47b0:	3b01      	subs	r3, #1
    47b2:	9302      	str	r3, [sp, #8]
    47b4:	4632      	mov	r2, r6
    47b6:	463b      	mov	r3, r7
    47b8:	4640      	mov	r0, r8
    47ba:	4649      	mov	r1, r9
    47bc:	f7fb fcf6 	bl	1ac <__adddf3>
    47c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    47c4:	4602      	mov	r2, r0
    47c6:	460b      	mov	r3, r1
    47c8:	4640      	mov	r0, r8
    47ca:	4649      	mov	r1, r9
    47cc:	f7fb fcec 	bl	1a8 <__aeabi_dsub>
    47d0:	4632      	mov	r2, r6
    47d2:	463b      	mov	r3, r7
    47d4:	f7fb fcea 	bl	1ac <__adddf3>
    47d8:	ed9d 7b08 	vldr	d7, [sp, #32]
    47dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
    47e0:	ed8a 7b00 	vstr	d7, [sl]
    47e4:	e770      	b.n	46c8 <__kernel_rem_pio2+0x508>
    47e6:	e9d4 8900 	ldrd	r8, r9, [r4]
    47ea:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    47ee:	4640      	mov	r0, r8
    47f0:	4632      	mov	r2, r6
    47f2:	463b      	mov	r3, r7
    47f4:	4649      	mov	r1, r9
    47f6:	f7fb fcd9 	bl	1ac <__adddf3>
    47fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    47fe:	4602      	mov	r2, r0
    4800:	460b      	mov	r3, r1
    4802:	4640      	mov	r0, r8
    4804:	4649      	mov	r1, r9
    4806:	f7fb fccf 	bl	1a8 <__aeabi_dsub>
    480a:	4632      	mov	r2, r6
    480c:	463b      	mov	r3, r7
    480e:	f7fb fccd 	bl	1ac <__adddf3>
    4812:	ed9d 7b02 	vldr	d7, [sp, #8]
    4816:	e9c4 0102 	strd	r0, r1, [r4, #8]
    481a:	ed84 7b00 	vstr	d7, [r4]
    481e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    4822:	e757      	b.n	46d4 <__kernel_rem_pio2+0x514>
    4824:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    4828:	f7fb fcc0 	bl	1ac <__adddf3>
    482c:	3d01      	subs	r5, #1
    482e:	e75b      	b.n	46e8 <__kernel_rem_pio2+0x528>
    4830:	9b01      	ldr	r3, [sp, #4]
    4832:	9a01      	ldr	r2, [sp, #4]
    4834:	601d      	str	r5, [r3, #0]
    4836:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
    483a:	605c      	str	r4, [r3, #4]
    483c:	609f      	str	r7, [r3, #8]
    483e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
    4842:	60d3      	str	r3, [r2, #12]
    4844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    4848:	6110      	str	r0, [r2, #16]
    484a:	6153      	str	r3, [r2, #20]
    484c:	e72a      	b.n	46a4 <__kernel_rem_pio2+0x4e4>
    484e:	bf00      	nop
    4850:	41700000 	.word	0x41700000
    4854:	3e700000 	.word	0x3e700000

00004858 <__kernel_sin>:
    4858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    485c:	ed2d 8b04 	vpush	{d8-d9}
    4860:	eeb0 8a41 	vmov.f32	s16, s2
    4864:	eef0 8a61 	vmov.f32	s17, s3
    4868:	ec55 4b10 	vmov	r4, r5, d0
    486c:	b083      	sub	sp, #12
    486e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    4872:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    4876:	9001      	str	r0, [sp, #4]
    4878:	da06      	bge.n	4888 <__kernel_sin+0x30>
    487a:	ee10 0a10 	vmov	r0, s0
    487e:	4629      	mov	r1, r5
    4880:	f7fc f8e4 	bl	a4c <__aeabi_d2iz>
    4884:	2800      	cmp	r0, #0
    4886:	d051      	beq.n	492c <__kernel_sin+0xd4>
    4888:	4622      	mov	r2, r4
    488a:	462b      	mov	r3, r5
    488c:	4620      	mov	r0, r4
    488e:	4629      	mov	r1, r5
    4890:	f7fb fe42 	bl	518 <__aeabi_dmul>
    4894:	4682      	mov	sl, r0
    4896:	468b      	mov	fp, r1
    4898:	4602      	mov	r2, r0
    489a:	460b      	mov	r3, r1
    489c:	4620      	mov	r0, r4
    489e:	4629      	mov	r1, r5
    48a0:	f7fb fe3a 	bl	518 <__aeabi_dmul>
    48a4:	a341      	add	r3, pc, #260	; (adr r3, 49ac <__kernel_sin+0x154>)
    48a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    48aa:	4680      	mov	r8, r0
    48ac:	4689      	mov	r9, r1
    48ae:	4650      	mov	r0, sl
    48b0:	4659      	mov	r1, fp
    48b2:	f7fb fe31 	bl	518 <__aeabi_dmul>
    48b6:	a33f      	add	r3, pc, #252	; (adr r3, 49b4 <__kernel_sin+0x15c>)
    48b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    48bc:	f7fb fc74 	bl	1a8 <__aeabi_dsub>
    48c0:	4652      	mov	r2, sl
    48c2:	465b      	mov	r3, fp
    48c4:	f7fb fe28 	bl	518 <__aeabi_dmul>
    48c8:	a33c      	add	r3, pc, #240	; (adr r3, 49bc <__kernel_sin+0x164>)
    48ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    48ce:	f7fb fc6d 	bl	1ac <__adddf3>
    48d2:	4652      	mov	r2, sl
    48d4:	465b      	mov	r3, fp
    48d6:	f7fb fe1f 	bl	518 <__aeabi_dmul>
    48da:	a33a      	add	r3, pc, #232	; (adr r3, 49c4 <__kernel_sin+0x16c>)
    48dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    48e0:	f7fb fc62 	bl	1a8 <__aeabi_dsub>
    48e4:	4652      	mov	r2, sl
    48e6:	465b      	mov	r3, fp
    48e8:	f7fb fe16 	bl	518 <__aeabi_dmul>
    48ec:	a337      	add	r3, pc, #220	; (adr r3, 49cc <__kernel_sin+0x174>)
    48ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    48f2:	f7fb fc5b 	bl	1ac <__adddf3>
    48f6:	9b01      	ldr	r3, [sp, #4]
    48f8:	4606      	mov	r6, r0
    48fa:	460f      	mov	r7, r1
    48fc:	b9eb      	cbnz	r3, 493a <__kernel_sin+0xe2>
    48fe:	4602      	mov	r2, r0
    4900:	460b      	mov	r3, r1
    4902:	4650      	mov	r0, sl
    4904:	4659      	mov	r1, fp
    4906:	f7fb fe07 	bl	518 <__aeabi_dmul>
    490a:	a325      	add	r3, pc, #148	; (adr r3, 49a0 <__kernel_sin+0x148>)
    490c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4910:	f7fb fc4a 	bl	1a8 <__aeabi_dsub>
    4914:	4642      	mov	r2, r8
    4916:	464b      	mov	r3, r9
    4918:	f7fb fdfe 	bl	518 <__aeabi_dmul>
    491c:	4602      	mov	r2, r0
    491e:	460b      	mov	r3, r1
    4920:	4620      	mov	r0, r4
    4922:	4629      	mov	r1, r5
    4924:	f7fb fc42 	bl	1ac <__adddf3>
    4928:	4604      	mov	r4, r0
    492a:	460d      	mov	r5, r1
    492c:	ec45 4b10 	vmov	d0, r4, r5
    4930:	b003      	add	sp, #12
    4932:	ecbd 8b04 	vpop	{d8-d9}
    4936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    493a:	4b1b      	ldr	r3, [pc, #108]	; (49a8 <__kernel_sin+0x150>)
    493c:	ec51 0b18 	vmov	r0, r1, d8
    4940:	2200      	movs	r2, #0
    4942:	f7fb fde9 	bl	518 <__aeabi_dmul>
    4946:	4632      	mov	r2, r6
    4948:	ec41 0b19 	vmov	d9, r0, r1
    494c:	463b      	mov	r3, r7
    494e:	4640      	mov	r0, r8
    4950:	4649      	mov	r1, r9
    4952:	f7fb fde1 	bl	518 <__aeabi_dmul>
    4956:	4602      	mov	r2, r0
    4958:	460b      	mov	r3, r1
    495a:	ec51 0b19 	vmov	r0, r1, d9
    495e:	f7fb fc23 	bl	1a8 <__aeabi_dsub>
    4962:	4652      	mov	r2, sl
    4964:	465b      	mov	r3, fp
    4966:	f7fb fdd7 	bl	518 <__aeabi_dmul>
    496a:	ec53 2b18 	vmov	r2, r3, d8
    496e:	f7fb fc1b 	bl	1a8 <__aeabi_dsub>
    4972:	a30b      	add	r3, pc, #44	; (adr r3, 49a0 <__kernel_sin+0x148>)
    4974:	e9d3 2300 	ldrd	r2, r3, [r3]
    4978:	4606      	mov	r6, r0
    497a:	460f      	mov	r7, r1
    497c:	4640      	mov	r0, r8
    497e:	4649      	mov	r1, r9
    4980:	f7fb fdca 	bl	518 <__aeabi_dmul>
    4984:	4602      	mov	r2, r0
    4986:	460b      	mov	r3, r1
    4988:	4630      	mov	r0, r6
    498a:	4639      	mov	r1, r7
    498c:	f7fb fc0e 	bl	1ac <__adddf3>
    4990:	4602      	mov	r2, r0
    4992:	460b      	mov	r3, r1
    4994:	4620      	mov	r0, r4
    4996:	4629      	mov	r1, r5
    4998:	f7fb fc06 	bl	1a8 <__aeabi_dsub>
    499c:	e7c4      	b.n	4928 <__kernel_sin+0xd0>
    499e:	bf00      	nop
    49a0:	55555549 	.word	0x55555549
    49a4:	3fc55555 	.word	0x3fc55555
    49a8:	3fe00000 	.word	0x3fe00000
    49ac:	5acfd57c 	.word	0x5acfd57c
    49b0:	3de5d93a 	.word	0x3de5d93a
    49b4:	8a2b9ceb 	.word	0x8a2b9ceb
    49b8:	3e5ae5e6 	.word	0x3e5ae5e6
    49bc:	57b1fe7d 	.word	0x57b1fe7d
    49c0:	3ec71de3 	.word	0x3ec71de3
    49c4:	19c161d5 	.word	0x19c161d5
    49c8:	3f2a01a0 	.word	0x3f2a01a0
    49cc:	1110f8a6 	.word	0x1110f8a6
    49d0:	3f811111 	.word	0x3f811111
    49d4:	00000000 	.word	0x00000000

000049d8 <nan>:
    49d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 49e0 <nan+0x8>
    49dc:	4770      	bx	lr
    49de:	bf00      	nop
    49e0:	00000000 	.word	0x00000000
    49e4:	7ff80000 	.word	0x7ff80000

000049e8 <scalbn>:
    49e8:	b570      	push	{r4, r5, r6, lr}
    49ea:	ec55 4b10 	vmov	r4, r5, d0
    49ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
    49f2:	4606      	mov	r6, r0
    49f4:	462b      	mov	r3, r5
    49f6:	b99a      	cbnz	r2, 4a20 <scalbn+0x38>
    49f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    49fc:	4323      	orrs	r3, r4
    49fe:	d036      	beq.n	4a6e <scalbn+0x86>
    4a00:	4b39      	ldr	r3, [pc, #228]	; (4ae8 <scalbn+0x100>)
    4a02:	4629      	mov	r1, r5
    4a04:	ee10 0a10 	vmov	r0, s0
    4a08:	2200      	movs	r2, #0
    4a0a:	f7fb fd85 	bl	518 <__aeabi_dmul>
    4a0e:	4b37      	ldr	r3, [pc, #220]	; (4aec <scalbn+0x104>)
    4a10:	429e      	cmp	r6, r3
    4a12:	4604      	mov	r4, r0
    4a14:	460d      	mov	r5, r1
    4a16:	da10      	bge.n	4a3a <scalbn+0x52>
    4a18:	a32b      	add	r3, pc, #172	; (adr r3, 4ac8 <scalbn+0xe0>)
    4a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a1e:	e03a      	b.n	4a96 <scalbn+0xae>
    4a20:	f240 71ff 	movw	r1, #2047	; 0x7ff
    4a24:	428a      	cmp	r2, r1
    4a26:	d10c      	bne.n	4a42 <scalbn+0x5a>
    4a28:	ee10 2a10 	vmov	r2, s0
    4a2c:	4620      	mov	r0, r4
    4a2e:	4629      	mov	r1, r5
    4a30:	f7fb fbbc 	bl	1ac <__adddf3>
    4a34:	4604      	mov	r4, r0
    4a36:	460d      	mov	r5, r1
    4a38:	e019      	b.n	4a6e <scalbn+0x86>
    4a3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
    4a3e:	460b      	mov	r3, r1
    4a40:	3a36      	subs	r2, #54	; 0x36
    4a42:	4432      	add	r2, r6
    4a44:	f240 71fe 	movw	r1, #2046	; 0x7fe
    4a48:	428a      	cmp	r2, r1
    4a4a:	dd08      	ble.n	4a5e <scalbn+0x76>
    4a4c:	2d00      	cmp	r5, #0
    4a4e:	a120      	add	r1, pc, #128	; (adr r1, 4ad0 <scalbn+0xe8>)
    4a50:	e9d1 0100 	ldrd	r0, r1, [r1]
    4a54:	da1c      	bge.n	4a90 <scalbn+0xa8>
    4a56:	a120      	add	r1, pc, #128	; (adr r1, 4ad8 <scalbn+0xf0>)
    4a58:	e9d1 0100 	ldrd	r0, r1, [r1]
    4a5c:	e018      	b.n	4a90 <scalbn+0xa8>
    4a5e:	2a00      	cmp	r2, #0
    4a60:	dd08      	ble.n	4a74 <scalbn+0x8c>
    4a62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    4a66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    4a6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    4a6e:	ec45 4b10 	vmov	d0, r4, r5
    4a72:	bd70      	pop	{r4, r5, r6, pc}
    4a74:	f112 0f35 	cmn.w	r2, #53	; 0x35
    4a78:	da19      	bge.n	4aae <scalbn+0xc6>
    4a7a:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a7e:	429e      	cmp	r6, r3
    4a80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
    4a84:	dd0a      	ble.n	4a9c <scalbn+0xb4>
    4a86:	a112      	add	r1, pc, #72	; (adr r1, 4ad0 <scalbn+0xe8>)
    4a88:	e9d1 0100 	ldrd	r0, r1, [r1]
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d1e2      	bne.n	4a56 <scalbn+0x6e>
    4a90:	a30f      	add	r3, pc, #60	; (adr r3, 4ad0 <scalbn+0xe8>)
    4a92:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a96:	f7fb fd3f 	bl	518 <__aeabi_dmul>
    4a9a:	e7cb      	b.n	4a34 <scalbn+0x4c>
    4a9c:	a10a      	add	r1, pc, #40	; (adr r1, 4ac8 <scalbn+0xe0>)
    4a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d0b8      	beq.n	4a18 <scalbn+0x30>
    4aa6:	a10e      	add	r1, pc, #56	; (adr r1, 4ae0 <scalbn+0xf8>)
    4aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
    4aac:	e7b4      	b.n	4a18 <scalbn+0x30>
    4aae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    4ab2:	3236      	adds	r2, #54	; 0x36
    4ab4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    4ab8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
    4abc:	4620      	mov	r0, r4
    4abe:	4b0c      	ldr	r3, [pc, #48]	; (4af0 <scalbn+0x108>)
    4ac0:	2200      	movs	r2, #0
    4ac2:	e7e8      	b.n	4a96 <scalbn+0xae>
    4ac4:	f3af 8000 	nop.w
    4ac8:	c2f8f359 	.word	0xc2f8f359
    4acc:	01a56e1f 	.word	0x01a56e1f
    4ad0:	8800759c 	.word	0x8800759c
    4ad4:	7e37e43c 	.word	0x7e37e43c
    4ad8:	8800759c 	.word	0x8800759c
    4adc:	fe37e43c 	.word	0xfe37e43c
    4ae0:	c2f8f359 	.word	0xc2f8f359
    4ae4:	81a56e1f 	.word	0x81a56e1f
    4ae8:	43500000 	.word	0x43500000
    4aec:	ffff3cb0 	.word	0xffff3cb0
    4af0:	3c900000 	.word	0x3c900000
    4af4:	00000000 	.word	0x00000000

00004af8 <_dtoa_r>:
    4af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4afc:	ed2d 8b04 	vpush	{d8-d9}
    4b00:	ec57 6b10 	vmov	r6, r7, d0
    4b04:	b093      	sub	sp, #76	; 0x4c
    4b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
    4b08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    4b0c:	9106      	str	r1, [sp, #24]
    4b0e:	ee10 aa10 	vmov	sl, s0
    4b12:	4604      	mov	r4, r0
    4b14:	9209      	str	r2, [sp, #36]	; 0x24
    4b16:	930c      	str	r3, [sp, #48]	; 0x30
    4b18:	46bb      	mov	fp, r7
    4b1a:	b975      	cbnz	r5, 4b3a <_dtoa_r+0x42>
    4b1c:	2010      	movs	r0, #16
    4b1e:	f00a fd17 	bl	f550 <malloc>
    4b22:	4602      	mov	r2, r0
    4b24:	6260      	str	r0, [r4, #36]	; 0x24
    4b26:	b920      	cbnz	r0, 4b32 <_dtoa_r+0x3a>
    4b28:	4ba7      	ldr	r3, [pc, #668]	; (4dc8 <_dtoa_r+0x2d0>)
    4b2a:	21ea      	movs	r1, #234	; 0xea
    4b2c:	48a7      	ldr	r0, [pc, #668]	; (4dcc <_dtoa_r+0x2d4>)
    4b2e:	f00a fcd7 	bl	f4e0 <__assert_func>
    4b32:	e9c0 5501 	strd	r5, r5, [r0, #4]
    4b36:	6005      	str	r5, [r0, #0]
    4b38:	60c5      	str	r5, [r0, #12]
    4b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b3c:	6819      	ldr	r1, [r3, #0]
    4b3e:	b151      	cbz	r1, 4b56 <_dtoa_r+0x5e>
    4b40:	685a      	ldr	r2, [r3, #4]
    4b42:	604a      	str	r2, [r1, #4]
    4b44:	2301      	movs	r3, #1
    4b46:	4093      	lsls	r3, r2
    4b48:	608b      	str	r3, [r1, #8]
    4b4a:	4620      	mov	r0, r4
    4b4c:	f00b fe2a 	bl	107a4 <_Bfree>
    4b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b52:	2200      	movs	r2, #0
    4b54:	601a      	str	r2, [r3, #0]
    4b56:	1e3b      	subs	r3, r7, #0
    4b58:	bfaa      	itet	ge
    4b5a:	2300      	movge	r3, #0
    4b5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
    4b60:	f8c8 3000 	strge.w	r3, [r8]
    4b64:	4b9a      	ldr	r3, [pc, #616]	; (4dd0 <_dtoa_r+0x2d8>)
    4b66:	bfbc      	itt	lt
    4b68:	2201      	movlt	r2, #1
    4b6a:	f8c8 2000 	strlt.w	r2, [r8]
    4b6e:	ea33 030b 	bics.w	r3, r3, fp
    4b72:	d11b      	bne.n	4bac <_dtoa_r+0xb4>
    4b74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b76:	f242 730f 	movw	r3, #9999	; 0x270f
    4b7a:	6013      	str	r3, [r2, #0]
    4b7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
    4b80:	4333      	orrs	r3, r6
    4b82:	f000 8592 	beq.w	56aa <_dtoa_r+0xbb2>
    4b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4b88:	b963      	cbnz	r3, 4ba4 <_dtoa_r+0xac>
    4b8a:	4b92      	ldr	r3, [pc, #584]	; (4dd4 <_dtoa_r+0x2dc>)
    4b8c:	e022      	b.n	4bd4 <_dtoa_r+0xdc>
    4b8e:	4b92      	ldr	r3, [pc, #584]	; (4dd8 <_dtoa_r+0x2e0>)
    4b90:	9301      	str	r3, [sp, #4]
    4b92:	3308      	adds	r3, #8
    4b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
    4b96:	6013      	str	r3, [r2, #0]
    4b98:	9801      	ldr	r0, [sp, #4]
    4b9a:	b013      	add	sp, #76	; 0x4c
    4b9c:	ecbd 8b04 	vpop	{d8-d9}
    4ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ba4:	4b8b      	ldr	r3, [pc, #556]	; (4dd4 <_dtoa_r+0x2dc>)
    4ba6:	9301      	str	r3, [sp, #4]
    4ba8:	3303      	adds	r3, #3
    4baa:	e7f3      	b.n	4b94 <_dtoa_r+0x9c>
    4bac:	2200      	movs	r2, #0
    4bae:	2300      	movs	r3, #0
    4bb0:	4650      	mov	r0, sl
    4bb2:	4659      	mov	r1, fp
    4bb4:	f7fb ff18 	bl	9e8 <__aeabi_dcmpeq>
    4bb8:	ec4b ab19 	vmov	d9, sl, fp
    4bbc:	4680      	mov	r8, r0
    4bbe:	b158      	cbz	r0, 4bd8 <_dtoa_r+0xe0>
    4bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4bc2:	2301      	movs	r3, #1
    4bc4:	6013      	str	r3, [r2, #0]
    4bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4bc8:	2b00      	cmp	r3, #0
    4bca:	f000 856b 	beq.w	56a4 <_dtoa_r+0xbac>
    4bce:	4883      	ldr	r0, [pc, #524]	; (4ddc <_dtoa_r+0x2e4>)
    4bd0:	6018      	str	r0, [r3, #0]
    4bd2:	1e43      	subs	r3, r0, #1
    4bd4:	9301      	str	r3, [sp, #4]
    4bd6:	e7df      	b.n	4b98 <_dtoa_r+0xa0>
    4bd8:	ec4b ab10 	vmov	d0, sl, fp
    4bdc:	aa10      	add	r2, sp, #64	; 0x40
    4bde:	a911      	add	r1, sp, #68	; 0x44
    4be0:	4620      	mov	r0, r4
    4be2:	f00c f85b 	bl	10c9c <__d2b>
    4be6:	f3cb 550a 	ubfx	r5, fp, #20, #11
    4bea:	ee08 0a10 	vmov	s16, r0
    4bee:	2d00      	cmp	r5, #0
    4bf0:	f000 8084 	beq.w	4cfc <_dtoa_r+0x204>
    4bf4:	ee19 3a90 	vmov	r3, s19
    4bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4bfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
    4c00:	4656      	mov	r6, sl
    4c02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    4c06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    4c0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    4c0e:	4b74      	ldr	r3, [pc, #464]	; (4de0 <_dtoa_r+0x2e8>)
    4c10:	2200      	movs	r2, #0
    4c12:	4630      	mov	r0, r6
    4c14:	4639      	mov	r1, r7
    4c16:	f7fb fac7 	bl	1a8 <__aeabi_dsub>
    4c1a:	a365      	add	r3, pc, #404	; (adr r3, 4db0 <_dtoa_r+0x2b8>)
    4c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c20:	f7fb fc7a 	bl	518 <__aeabi_dmul>
    4c24:	a364      	add	r3, pc, #400	; (adr r3, 4db8 <_dtoa_r+0x2c0>)
    4c26:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c2a:	f7fb fabf 	bl	1ac <__adddf3>
    4c2e:	4606      	mov	r6, r0
    4c30:	4628      	mov	r0, r5
    4c32:	460f      	mov	r7, r1
    4c34:	f7fb fc06 	bl	444 <__aeabi_i2d>
    4c38:	a361      	add	r3, pc, #388	; (adr r3, 4dc0 <_dtoa_r+0x2c8>)
    4c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c3e:	f7fb fc6b 	bl	518 <__aeabi_dmul>
    4c42:	4602      	mov	r2, r0
    4c44:	460b      	mov	r3, r1
    4c46:	4630      	mov	r0, r6
    4c48:	4639      	mov	r1, r7
    4c4a:	f7fb faaf 	bl	1ac <__adddf3>
    4c4e:	4606      	mov	r6, r0
    4c50:	460f      	mov	r7, r1
    4c52:	f7fb fefb 	bl	a4c <__aeabi_d2iz>
    4c56:	2200      	movs	r2, #0
    4c58:	9000      	str	r0, [sp, #0]
    4c5a:	2300      	movs	r3, #0
    4c5c:	4630      	mov	r0, r6
    4c5e:	4639      	mov	r1, r7
    4c60:	f7fb fecc 	bl	9fc <__aeabi_dcmplt>
    4c64:	b150      	cbz	r0, 4c7c <_dtoa_r+0x184>
    4c66:	9800      	ldr	r0, [sp, #0]
    4c68:	f7fb fbec 	bl	444 <__aeabi_i2d>
    4c6c:	4632      	mov	r2, r6
    4c6e:	463b      	mov	r3, r7
    4c70:	f7fb feba 	bl	9e8 <__aeabi_dcmpeq>
    4c74:	b910      	cbnz	r0, 4c7c <_dtoa_r+0x184>
    4c76:	9b00      	ldr	r3, [sp, #0]
    4c78:	3b01      	subs	r3, #1
    4c7a:	9300      	str	r3, [sp, #0]
    4c7c:	9b00      	ldr	r3, [sp, #0]
    4c7e:	2b16      	cmp	r3, #22
    4c80:	d85a      	bhi.n	4d38 <_dtoa_r+0x240>
    4c82:	9a00      	ldr	r2, [sp, #0]
    4c84:	4b57      	ldr	r3, [pc, #348]	; (4de4 <_dtoa_r+0x2ec>)
    4c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c8e:	ec51 0b19 	vmov	r0, r1, d9
    4c92:	f7fb feb3 	bl	9fc <__aeabi_dcmplt>
    4c96:	2800      	cmp	r0, #0
    4c98:	d050      	beq.n	4d3c <_dtoa_r+0x244>
    4c9a:	9b00      	ldr	r3, [sp, #0]
    4c9c:	3b01      	subs	r3, #1
    4c9e:	9300      	str	r3, [sp, #0]
    4ca0:	2300      	movs	r3, #0
    4ca2:	930b      	str	r3, [sp, #44]	; 0x2c
    4ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4ca6:	1b5d      	subs	r5, r3, r5
    4ca8:	1e6b      	subs	r3, r5, #1
    4caa:	9305      	str	r3, [sp, #20]
    4cac:	bf45      	ittet	mi
    4cae:	f1c5 0301 	rsbmi	r3, r5, #1
    4cb2:	9304      	strmi	r3, [sp, #16]
    4cb4:	2300      	movpl	r3, #0
    4cb6:	2300      	movmi	r3, #0
    4cb8:	bf4c      	ite	mi
    4cba:	9305      	strmi	r3, [sp, #20]
    4cbc:	9304      	strpl	r3, [sp, #16]
    4cbe:	9b00      	ldr	r3, [sp, #0]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	db3d      	blt.n	4d40 <_dtoa_r+0x248>
    4cc4:	9b05      	ldr	r3, [sp, #20]
    4cc6:	9a00      	ldr	r2, [sp, #0]
    4cc8:	920a      	str	r2, [sp, #40]	; 0x28
    4cca:	4413      	add	r3, r2
    4ccc:	9305      	str	r3, [sp, #20]
    4cce:	2300      	movs	r3, #0
    4cd0:	9307      	str	r3, [sp, #28]
    4cd2:	9b06      	ldr	r3, [sp, #24]
    4cd4:	2b09      	cmp	r3, #9
    4cd6:	f200 8089 	bhi.w	4dec <_dtoa_r+0x2f4>
    4cda:	2b05      	cmp	r3, #5
    4cdc:	bfc4      	itt	gt
    4cde:	3b04      	subgt	r3, #4
    4ce0:	9306      	strgt	r3, [sp, #24]
    4ce2:	9b06      	ldr	r3, [sp, #24]
    4ce4:	f1a3 0302 	sub.w	r3, r3, #2
    4ce8:	bfcc      	ite	gt
    4cea:	2500      	movgt	r5, #0
    4cec:	2501      	movle	r5, #1
    4cee:	2b03      	cmp	r3, #3
    4cf0:	f200 8087 	bhi.w	4e02 <_dtoa_r+0x30a>
    4cf4:	e8df f003 	tbb	[pc, r3]
    4cf8:	59383a2d 	.word	0x59383a2d
    4cfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
    4d00:	441d      	add	r5, r3
    4d02:	f205 4332 	addw	r3, r5, #1074	; 0x432
    4d06:	2b20      	cmp	r3, #32
    4d08:	bfc1      	itttt	gt
    4d0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    4d0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
    4d12:	fa0b f303 	lslgt.w	r3, fp, r3
    4d16:	fa26 f000 	lsrgt.w	r0, r6, r0
    4d1a:	bfda      	itte	le
    4d1c:	f1c3 0320 	rsble	r3, r3, #32
    4d20:	fa06 f003 	lslle.w	r0, r6, r3
    4d24:	4318      	orrgt	r0, r3
    4d26:	f7fb fb7d 	bl	424 <__aeabi_ui2d>
    4d2a:	2301      	movs	r3, #1
    4d2c:	4606      	mov	r6, r0
    4d2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
    4d32:	3d01      	subs	r5, #1
    4d34:	930e      	str	r3, [sp, #56]	; 0x38
    4d36:	e76a      	b.n	4c0e <_dtoa_r+0x116>
    4d38:	2301      	movs	r3, #1
    4d3a:	e7b2      	b.n	4ca2 <_dtoa_r+0x1aa>
    4d3c:	900b      	str	r0, [sp, #44]	; 0x2c
    4d3e:	e7b1      	b.n	4ca4 <_dtoa_r+0x1ac>
    4d40:	9b04      	ldr	r3, [sp, #16]
    4d42:	9a00      	ldr	r2, [sp, #0]
    4d44:	1a9b      	subs	r3, r3, r2
    4d46:	9304      	str	r3, [sp, #16]
    4d48:	4253      	negs	r3, r2
    4d4a:	9307      	str	r3, [sp, #28]
    4d4c:	2300      	movs	r3, #0
    4d4e:	930a      	str	r3, [sp, #40]	; 0x28
    4d50:	e7bf      	b.n	4cd2 <_dtoa_r+0x1da>
    4d52:	2300      	movs	r3, #0
    4d54:	9308      	str	r3, [sp, #32]
    4d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4d58:	2b00      	cmp	r3, #0
    4d5a:	dc55      	bgt.n	4e08 <_dtoa_r+0x310>
    4d5c:	2301      	movs	r3, #1
    4d5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    4d62:	461a      	mov	r2, r3
    4d64:	9209      	str	r2, [sp, #36]	; 0x24
    4d66:	e00c      	b.n	4d82 <_dtoa_r+0x28a>
    4d68:	2301      	movs	r3, #1
    4d6a:	e7f3      	b.n	4d54 <_dtoa_r+0x25c>
    4d6c:	2300      	movs	r3, #0
    4d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4d70:	9308      	str	r3, [sp, #32]
    4d72:	9b00      	ldr	r3, [sp, #0]
    4d74:	4413      	add	r3, r2
    4d76:	9302      	str	r3, [sp, #8]
    4d78:	3301      	adds	r3, #1
    4d7a:	2b01      	cmp	r3, #1
    4d7c:	9303      	str	r3, [sp, #12]
    4d7e:	bfb8      	it	lt
    4d80:	2301      	movlt	r3, #1
    4d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4d84:	2200      	movs	r2, #0
    4d86:	6042      	str	r2, [r0, #4]
    4d88:	2204      	movs	r2, #4
    4d8a:	f102 0614 	add.w	r6, r2, #20
    4d8e:	429e      	cmp	r6, r3
    4d90:	6841      	ldr	r1, [r0, #4]
    4d92:	d93d      	bls.n	4e10 <_dtoa_r+0x318>
    4d94:	4620      	mov	r0, r4
    4d96:	f00b fcc5 	bl	10724 <_Balloc>
    4d9a:	9001      	str	r0, [sp, #4]
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d13b      	bne.n	4e18 <_dtoa_r+0x320>
    4da0:	4b11      	ldr	r3, [pc, #68]	; (4de8 <_dtoa_r+0x2f0>)
    4da2:	4602      	mov	r2, r0
    4da4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4da8:	e6c0      	b.n	4b2c <_dtoa_r+0x34>
    4daa:	2301      	movs	r3, #1
    4dac:	e7df      	b.n	4d6e <_dtoa_r+0x276>
    4dae:	bf00      	nop
    4db0:	636f4361 	.word	0x636f4361
    4db4:	3fd287a7 	.word	0x3fd287a7
    4db8:	8b60c8b3 	.word	0x8b60c8b3
    4dbc:	3fc68a28 	.word	0x3fc68a28
    4dc0:	509f79fb 	.word	0x509f79fb
    4dc4:	3fd34413 	.word	0x3fd34413
    4dc8:	00046161 	.word	0x00046161
    4dcc:	00046178 	.word	0x00046178
    4dd0:	7ff00000 	.word	0x7ff00000
    4dd4:	0004615d 	.word	0x0004615d
    4dd8:	00046154 	.word	0x00046154
    4ddc:	00045923 	.word	0x00045923
    4de0:	3ff80000 	.word	0x3ff80000
    4de4:	00016f78 	.word	0x00016f78
    4de8:	000461d4 	.word	0x000461d4
    4dec:	2501      	movs	r5, #1
    4dee:	2300      	movs	r3, #0
    4df0:	9306      	str	r3, [sp, #24]
    4df2:	9508      	str	r5, [sp, #32]
    4df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4df8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    4dfc:	2200      	movs	r2, #0
    4dfe:	2312      	movs	r3, #18
    4e00:	e7b0      	b.n	4d64 <_dtoa_r+0x26c>
    4e02:	2301      	movs	r3, #1
    4e04:	9308      	str	r3, [sp, #32]
    4e06:	e7f5      	b.n	4df4 <_dtoa_r+0x2fc>
    4e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    4e0e:	e7b8      	b.n	4d82 <_dtoa_r+0x28a>
    4e10:	3101      	adds	r1, #1
    4e12:	6041      	str	r1, [r0, #4]
    4e14:	0052      	lsls	r2, r2, #1
    4e16:	e7b8      	b.n	4d8a <_dtoa_r+0x292>
    4e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e1a:	9a01      	ldr	r2, [sp, #4]
    4e1c:	601a      	str	r2, [r3, #0]
    4e1e:	9b03      	ldr	r3, [sp, #12]
    4e20:	2b0e      	cmp	r3, #14
    4e22:	f200 809d 	bhi.w	4f60 <_dtoa_r+0x468>
    4e26:	2d00      	cmp	r5, #0
    4e28:	f000 809a 	beq.w	4f60 <_dtoa_r+0x468>
    4e2c:	9b00      	ldr	r3, [sp, #0]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	dd32      	ble.n	4e98 <_dtoa_r+0x3a0>
    4e32:	4ab7      	ldr	r2, [pc, #732]	; (5110 <_dtoa_r+0x618>)
    4e34:	f003 030f 	and.w	r3, r3, #15
    4e38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
    4e40:	9b00      	ldr	r3, [sp, #0]
    4e42:	05d8      	lsls	r0, r3, #23
    4e44:	ea4f 1723 	mov.w	r7, r3, asr #4
    4e48:	d516      	bpl.n	4e78 <_dtoa_r+0x380>
    4e4a:	4bb2      	ldr	r3, [pc, #712]	; (5114 <_dtoa_r+0x61c>)
    4e4c:	ec51 0b19 	vmov	r0, r1, d9
    4e50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    4e54:	f7fb fc8a 	bl	76c <__aeabi_ddiv>
    4e58:	f007 070f 	and.w	r7, r7, #15
    4e5c:	4682      	mov	sl, r0
    4e5e:	468b      	mov	fp, r1
    4e60:	2503      	movs	r5, #3
    4e62:	4eac      	ldr	r6, [pc, #688]	; (5114 <_dtoa_r+0x61c>)
    4e64:	b957      	cbnz	r7, 4e7c <_dtoa_r+0x384>
    4e66:	4642      	mov	r2, r8
    4e68:	464b      	mov	r3, r9
    4e6a:	4650      	mov	r0, sl
    4e6c:	4659      	mov	r1, fp
    4e6e:	f7fb fc7d 	bl	76c <__aeabi_ddiv>
    4e72:	4682      	mov	sl, r0
    4e74:	468b      	mov	fp, r1
    4e76:	e028      	b.n	4eca <_dtoa_r+0x3d2>
    4e78:	2502      	movs	r5, #2
    4e7a:	e7f2      	b.n	4e62 <_dtoa_r+0x36a>
    4e7c:	07f9      	lsls	r1, r7, #31
    4e7e:	d508      	bpl.n	4e92 <_dtoa_r+0x39a>
    4e80:	4640      	mov	r0, r8
    4e82:	4649      	mov	r1, r9
    4e84:	e9d6 2300 	ldrd	r2, r3, [r6]
    4e88:	f7fb fb46 	bl	518 <__aeabi_dmul>
    4e8c:	3501      	adds	r5, #1
    4e8e:	4680      	mov	r8, r0
    4e90:	4689      	mov	r9, r1
    4e92:	107f      	asrs	r7, r7, #1
    4e94:	3608      	adds	r6, #8
    4e96:	e7e5      	b.n	4e64 <_dtoa_r+0x36c>
    4e98:	f000 809b 	beq.w	4fd2 <_dtoa_r+0x4da>
    4e9c:	9b00      	ldr	r3, [sp, #0]
    4e9e:	4f9d      	ldr	r7, [pc, #628]	; (5114 <_dtoa_r+0x61c>)
    4ea0:	425e      	negs	r6, r3
    4ea2:	4b9b      	ldr	r3, [pc, #620]	; (5110 <_dtoa_r+0x618>)
    4ea4:	f006 020f 	and.w	r2, r6, #15
    4ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4eac:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eb0:	ec51 0b19 	vmov	r0, r1, d9
    4eb4:	f7fb fb30 	bl	518 <__aeabi_dmul>
    4eb8:	1136      	asrs	r6, r6, #4
    4eba:	4682      	mov	sl, r0
    4ebc:	468b      	mov	fp, r1
    4ebe:	2300      	movs	r3, #0
    4ec0:	2502      	movs	r5, #2
    4ec2:	2e00      	cmp	r6, #0
    4ec4:	d17a      	bne.n	4fbc <_dtoa_r+0x4c4>
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d1d3      	bne.n	4e72 <_dtoa_r+0x37a>
    4eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ecc:	2b00      	cmp	r3, #0
    4ece:	f000 8082 	beq.w	4fd6 <_dtoa_r+0x4de>
    4ed2:	4b91      	ldr	r3, [pc, #580]	; (5118 <_dtoa_r+0x620>)
    4ed4:	2200      	movs	r2, #0
    4ed6:	4650      	mov	r0, sl
    4ed8:	4659      	mov	r1, fp
    4eda:	f7fb fd8f 	bl	9fc <__aeabi_dcmplt>
    4ede:	2800      	cmp	r0, #0
    4ee0:	d079      	beq.n	4fd6 <_dtoa_r+0x4de>
    4ee2:	9b03      	ldr	r3, [sp, #12]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d076      	beq.n	4fd6 <_dtoa_r+0x4de>
    4ee8:	9b02      	ldr	r3, [sp, #8]
    4eea:	2b00      	cmp	r3, #0
    4eec:	dd36      	ble.n	4f5c <_dtoa_r+0x464>
    4eee:	9b00      	ldr	r3, [sp, #0]
    4ef0:	4650      	mov	r0, sl
    4ef2:	4659      	mov	r1, fp
    4ef4:	1e5f      	subs	r7, r3, #1
    4ef6:	2200      	movs	r2, #0
    4ef8:	4b88      	ldr	r3, [pc, #544]	; (511c <_dtoa_r+0x624>)
    4efa:	f7fb fb0d 	bl	518 <__aeabi_dmul>
    4efe:	9e02      	ldr	r6, [sp, #8]
    4f00:	4682      	mov	sl, r0
    4f02:	468b      	mov	fp, r1
    4f04:	3501      	adds	r5, #1
    4f06:	4628      	mov	r0, r5
    4f08:	f7fb fa9c 	bl	444 <__aeabi_i2d>
    4f0c:	4652      	mov	r2, sl
    4f0e:	465b      	mov	r3, fp
    4f10:	f7fb fb02 	bl	518 <__aeabi_dmul>
    4f14:	4b82      	ldr	r3, [pc, #520]	; (5120 <_dtoa_r+0x628>)
    4f16:	2200      	movs	r2, #0
    4f18:	f7fb f948 	bl	1ac <__adddf3>
    4f1c:	46d0      	mov	r8, sl
    4f1e:	46d9      	mov	r9, fp
    4f20:	4682      	mov	sl, r0
    4f22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
    4f26:	2e00      	cmp	r6, #0
    4f28:	d158      	bne.n	4fdc <_dtoa_r+0x4e4>
    4f2a:	4b7e      	ldr	r3, [pc, #504]	; (5124 <_dtoa_r+0x62c>)
    4f2c:	2200      	movs	r2, #0
    4f2e:	4640      	mov	r0, r8
    4f30:	4649      	mov	r1, r9
    4f32:	f7fb f939 	bl	1a8 <__aeabi_dsub>
    4f36:	4652      	mov	r2, sl
    4f38:	465b      	mov	r3, fp
    4f3a:	4680      	mov	r8, r0
    4f3c:	4689      	mov	r9, r1
    4f3e:	f7fb fd7b 	bl	a38 <__aeabi_dcmpgt>
    4f42:	2800      	cmp	r0, #0
    4f44:	f040 8295 	bne.w	5472 <_dtoa_r+0x97a>
    4f48:	4652      	mov	r2, sl
    4f4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
    4f4e:	4640      	mov	r0, r8
    4f50:	4649      	mov	r1, r9
    4f52:	f7fb fd53 	bl	9fc <__aeabi_dcmplt>
    4f56:	2800      	cmp	r0, #0
    4f58:	f040 8289 	bne.w	546e <_dtoa_r+0x976>
    4f5c:	ec5b ab19 	vmov	sl, fp, d9
    4f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4f62:	2b00      	cmp	r3, #0
    4f64:	f2c0 8148 	blt.w	51f8 <_dtoa_r+0x700>
    4f68:	9a00      	ldr	r2, [sp, #0]
    4f6a:	2a0e      	cmp	r2, #14
    4f6c:	f300 8144 	bgt.w	51f8 <_dtoa_r+0x700>
    4f70:	4b67      	ldr	r3, [pc, #412]	; (5110 <_dtoa_r+0x618>)
    4f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4f76:	e9d3 8900 	ldrd	r8, r9, [r3]
    4f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	f280 80d5 	bge.w	512c <_dtoa_r+0x634>
    4f82:	9b03      	ldr	r3, [sp, #12]
    4f84:	2b00      	cmp	r3, #0
    4f86:	f300 80d1 	bgt.w	512c <_dtoa_r+0x634>
    4f8a:	f040 826f 	bne.w	546c <_dtoa_r+0x974>
    4f8e:	4b65      	ldr	r3, [pc, #404]	; (5124 <_dtoa_r+0x62c>)
    4f90:	2200      	movs	r2, #0
    4f92:	4640      	mov	r0, r8
    4f94:	4649      	mov	r1, r9
    4f96:	f7fb fabf 	bl	518 <__aeabi_dmul>
    4f9a:	4652      	mov	r2, sl
    4f9c:	465b      	mov	r3, fp
    4f9e:	f7fb fd41 	bl	a24 <__aeabi_dcmpge>
    4fa2:	9e03      	ldr	r6, [sp, #12]
    4fa4:	4637      	mov	r7, r6
    4fa6:	2800      	cmp	r0, #0
    4fa8:	f040 8245 	bne.w	5436 <_dtoa_r+0x93e>
    4fac:	9d01      	ldr	r5, [sp, #4]
    4fae:	2331      	movs	r3, #49	; 0x31
    4fb0:	f805 3b01 	strb.w	r3, [r5], #1
    4fb4:	9b00      	ldr	r3, [sp, #0]
    4fb6:	3301      	adds	r3, #1
    4fb8:	9300      	str	r3, [sp, #0]
    4fba:	e240      	b.n	543e <_dtoa_r+0x946>
    4fbc:	07f2      	lsls	r2, r6, #31
    4fbe:	d505      	bpl.n	4fcc <_dtoa_r+0x4d4>
    4fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
    4fc4:	f7fb faa8 	bl	518 <__aeabi_dmul>
    4fc8:	3501      	adds	r5, #1
    4fca:	2301      	movs	r3, #1
    4fcc:	1076      	asrs	r6, r6, #1
    4fce:	3708      	adds	r7, #8
    4fd0:	e777      	b.n	4ec2 <_dtoa_r+0x3ca>
    4fd2:	2502      	movs	r5, #2
    4fd4:	e779      	b.n	4eca <_dtoa_r+0x3d2>
    4fd6:	9f00      	ldr	r7, [sp, #0]
    4fd8:	9e03      	ldr	r6, [sp, #12]
    4fda:	e794      	b.n	4f06 <_dtoa_r+0x40e>
    4fdc:	9901      	ldr	r1, [sp, #4]
    4fde:	4b4c      	ldr	r3, [pc, #304]	; (5110 <_dtoa_r+0x618>)
    4fe0:	4431      	add	r1, r6
    4fe2:	910d      	str	r1, [sp, #52]	; 0x34
    4fe4:	9908      	ldr	r1, [sp, #32]
    4fe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    4fea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    4fee:	2900      	cmp	r1, #0
    4ff0:	d043      	beq.n	507a <_dtoa_r+0x582>
    4ff2:	494d      	ldr	r1, [pc, #308]	; (5128 <_dtoa_r+0x630>)
    4ff4:	2000      	movs	r0, #0
    4ff6:	f7fb fbb9 	bl	76c <__aeabi_ddiv>
    4ffa:	4652      	mov	r2, sl
    4ffc:	465b      	mov	r3, fp
    4ffe:	f7fb f8d3 	bl	1a8 <__aeabi_dsub>
    5002:	9d01      	ldr	r5, [sp, #4]
    5004:	4682      	mov	sl, r0
    5006:	468b      	mov	fp, r1
    5008:	4649      	mov	r1, r9
    500a:	4640      	mov	r0, r8
    500c:	f7fb fd1e 	bl	a4c <__aeabi_d2iz>
    5010:	4606      	mov	r6, r0
    5012:	f7fb fa17 	bl	444 <__aeabi_i2d>
    5016:	4602      	mov	r2, r0
    5018:	460b      	mov	r3, r1
    501a:	4640      	mov	r0, r8
    501c:	4649      	mov	r1, r9
    501e:	f7fb f8c3 	bl	1a8 <__aeabi_dsub>
    5022:	3630      	adds	r6, #48	; 0x30
    5024:	f805 6b01 	strb.w	r6, [r5], #1
    5028:	4652      	mov	r2, sl
    502a:	465b      	mov	r3, fp
    502c:	4680      	mov	r8, r0
    502e:	4689      	mov	r9, r1
    5030:	f7fb fce4 	bl	9fc <__aeabi_dcmplt>
    5034:	2800      	cmp	r0, #0
    5036:	d163      	bne.n	5100 <_dtoa_r+0x608>
    5038:	4642      	mov	r2, r8
    503a:	464b      	mov	r3, r9
    503c:	4936      	ldr	r1, [pc, #216]	; (5118 <_dtoa_r+0x620>)
    503e:	2000      	movs	r0, #0
    5040:	f7fb f8b2 	bl	1a8 <__aeabi_dsub>
    5044:	4652      	mov	r2, sl
    5046:	465b      	mov	r3, fp
    5048:	f7fb fcd8 	bl	9fc <__aeabi_dcmplt>
    504c:	2800      	cmp	r0, #0
    504e:	f040 80b5 	bne.w	51bc <_dtoa_r+0x6c4>
    5052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5054:	429d      	cmp	r5, r3
    5056:	d081      	beq.n	4f5c <_dtoa_r+0x464>
    5058:	4b30      	ldr	r3, [pc, #192]	; (511c <_dtoa_r+0x624>)
    505a:	2200      	movs	r2, #0
    505c:	4650      	mov	r0, sl
    505e:	4659      	mov	r1, fp
    5060:	f7fb fa5a 	bl	518 <__aeabi_dmul>
    5064:	4b2d      	ldr	r3, [pc, #180]	; (511c <_dtoa_r+0x624>)
    5066:	4682      	mov	sl, r0
    5068:	468b      	mov	fp, r1
    506a:	4640      	mov	r0, r8
    506c:	4649      	mov	r1, r9
    506e:	2200      	movs	r2, #0
    5070:	f7fb fa52 	bl	518 <__aeabi_dmul>
    5074:	4680      	mov	r8, r0
    5076:	4689      	mov	r9, r1
    5078:	e7c6      	b.n	5008 <_dtoa_r+0x510>
    507a:	4650      	mov	r0, sl
    507c:	4659      	mov	r1, fp
    507e:	f7fb fa4b 	bl	518 <__aeabi_dmul>
    5082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5084:	9d01      	ldr	r5, [sp, #4]
    5086:	930f      	str	r3, [sp, #60]	; 0x3c
    5088:	4682      	mov	sl, r0
    508a:	468b      	mov	fp, r1
    508c:	4649      	mov	r1, r9
    508e:	4640      	mov	r0, r8
    5090:	f7fb fcdc 	bl	a4c <__aeabi_d2iz>
    5094:	4606      	mov	r6, r0
    5096:	f7fb f9d5 	bl	444 <__aeabi_i2d>
    509a:	3630      	adds	r6, #48	; 0x30
    509c:	4602      	mov	r2, r0
    509e:	460b      	mov	r3, r1
    50a0:	4640      	mov	r0, r8
    50a2:	4649      	mov	r1, r9
    50a4:	f7fb f880 	bl	1a8 <__aeabi_dsub>
    50a8:	f805 6b01 	strb.w	r6, [r5], #1
    50ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    50ae:	429d      	cmp	r5, r3
    50b0:	4680      	mov	r8, r0
    50b2:	4689      	mov	r9, r1
    50b4:	f04f 0200 	mov.w	r2, #0
    50b8:	d124      	bne.n	5104 <_dtoa_r+0x60c>
    50ba:	4b1b      	ldr	r3, [pc, #108]	; (5128 <_dtoa_r+0x630>)
    50bc:	4650      	mov	r0, sl
    50be:	4659      	mov	r1, fp
    50c0:	f7fb f874 	bl	1ac <__adddf3>
    50c4:	4602      	mov	r2, r0
    50c6:	460b      	mov	r3, r1
    50c8:	4640      	mov	r0, r8
    50ca:	4649      	mov	r1, r9
    50cc:	f7fb fcb4 	bl	a38 <__aeabi_dcmpgt>
    50d0:	2800      	cmp	r0, #0
    50d2:	d173      	bne.n	51bc <_dtoa_r+0x6c4>
    50d4:	4652      	mov	r2, sl
    50d6:	465b      	mov	r3, fp
    50d8:	4913      	ldr	r1, [pc, #76]	; (5128 <_dtoa_r+0x630>)
    50da:	2000      	movs	r0, #0
    50dc:	f7fb f864 	bl	1a8 <__aeabi_dsub>
    50e0:	4602      	mov	r2, r0
    50e2:	460b      	mov	r3, r1
    50e4:	4640      	mov	r0, r8
    50e6:	4649      	mov	r1, r9
    50e8:	f7fb fc88 	bl	9fc <__aeabi_dcmplt>
    50ec:	2800      	cmp	r0, #0
    50ee:	f43f af35 	beq.w	4f5c <_dtoa_r+0x464>
    50f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    50f4:	1e6b      	subs	r3, r5, #1
    50f6:	930f      	str	r3, [sp, #60]	; 0x3c
    50f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    50fc:	2b30      	cmp	r3, #48	; 0x30
    50fe:	d0f8      	beq.n	50f2 <_dtoa_r+0x5fa>
    5100:	9700      	str	r7, [sp, #0]
    5102:	e049      	b.n	5198 <_dtoa_r+0x6a0>
    5104:	4b05      	ldr	r3, [pc, #20]	; (511c <_dtoa_r+0x624>)
    5106:	f7fb fa07 	bl	518 <__aeabi_dmul>
    510a:	4680      	mov	r8, r0
    510c:	4689      	mov	r9, r1
    510e:	e7bd      	b.n	508c <_dtoa_r+0x594>
    5110:	00016f78 	.word	0x00016f78
    5114:	00016f50 	.word	0x00016f50
    5118:	3ff00000 	.word	0x3ff00000
    511c:	40240000 	.word	0x40240000
    5120:	401c0000 	.word	0x401c0000
    5124:	40140000 	.word	0x40140000
    5128:	3fe00000 	.word	0x3fe00000
    512c:	9d01      	ldr	r5, [sp, #4]
    512e:	4656      	mov	r6, sl
    5130:	465f      	mov	r7, fp
    5132:	4642      	mov	r2, r8
    5134:	464b      	mov	r3, r9
    5136:	4630      	mov	r0, r6
    5138:	4639      	mov	r1, r7
    513a:	f7fb fb17 	bl	76c <__aeabi_ddiv>
    513e:	f7fb fc85 	bl	a4c <__aeabi_d2iz>
    5142:	4682      	mov	sl, r0
    5144:	f7fb f97e 	bl	444 <__aeabi_i2d>
    5148:	4642      	mov	r2, r8
    514a:	464b      	mov	r3, r9
    514c:	f7fb f9e4 	bl	518 <__aeabi_dmul>
    5150:	4602      	mov	r2, r0
    5152:	460b      	mov	r3, r1
    5154:	4630      	mov	r0, r6
    5156:	4639      	mov	r1, r7
    5158:	f10a 0630 	add.w	r6, sl, #48	; 0x30
    515c:	f7fb f824 	bl	1a8 <__aeabi_dsub>
    5160:	f805 6b01 	strb.w	r6, [r5], #1
    5164:	9e01      	ldr	r6, [sp, #4]
    5166:	9f03      	ldr	r7, [sp, #12]
    5168:	1bae      	subs	r6, r5, r6
    516a:	42b7      	cmp	r7, r6
    516c:	4602      	mov	r2, r0
    516e:	460b      	mov	r3, r1
    5170:	d135      	bne.n	51de <_dtoa_r+0x6e6>
    5172:	f7fb f81b 	bl	1ac <__adddf3>
    5176:	4642      	mov	r2, r8
    5178:	464b      	mov	r3, r9
    517a:	4606      	mov	r6, r0
    517c:	460f      	mov	r7, r1
    517e:	f7fb fc5b 	bl	a38 <__aeabi_dcmpgt>
    5182:	b9d0      	cbnz	r0, 51ba <_dtoa_r+0x6c2>
    5184:	4642      	mov	r2, r8
    5186:	464b      	mov	r3, r9
    5188:	4630      	mov	r0, r6
    518a:	4639      	mov	r1, r7
    518c:	f7fb fc2c 	bl	9e8 <__aeabi_dcmpeq>
    5190:	b110      	cbz	r0, 5198 <_dtoa_r+0x6a0>
    5192:	f01a 0f01 	tst.w	sl, #1
    5196:	d110      	bne.n	51ba <_dtoa_r+0x6c2>
    5198:	4620      	mov	r0, r4
    519a:	ee18 1a10 	vmov	r1, s16
    519e:	f00b fb01 	bl	107a4 <_Bfree>
    51a2:	2300      	movs	r3, #0
    51a4:	9800      	ldr	r0, [sp, #0]
    51a6:	702b      	strb	r3, [r5, #0]
    51a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    51aa:	3001      	adds	r0, #1
    51ac:	6018      	str	r0, [r3, #0]
    51ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    51b0:	2b00      	cmp	r3, #0
    51b2:	f43f acf1 	beq.w	4b98 <_dtoa_r+0xa0>
    51b6:	601d      	str	r5, [r3, #0]
    51b8:	e4ee      	b.n	4b98 <_dtoa_r+0xa0>
    51ba:	9f00      	ldr	r7, [sp, #0]
    51bc:	462b      	mov	r3, r5
    51be:	461d      	mov	r5, r3
    51c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    51c4:	2a39      	cmp	r2, #57	; 0x39
    51c6:	d106      	bne.n	51d6 <_dtoa_r+0x6de>
    51c8:	9a01      	ldr	r2, [sp, #4]
    51ca:	429a      	cmp	r2, r3
    51cc:	d1f7      	bne.n	51be <_dtoa_r+0x6c6>
    51ce:	9901      	ldr	r1, [sp, #4]
    51d0:	2230      	movs	r2, #48	; 0x30
    51d2:	3701      	adds	r7, #1
    51d4:	700a      	strb	r2, [r1, #0]
    51d6:	781a      	ldrb	r2, [r3, #0]
    51d8:	3201      	adds	r2, #1
    51da:	701a      	strb	r2, [r3, #0]
    51dc:	e790      	b.n	5100 <_dtoa_r+0x608>
    51de:	4ba6      	ldr	r3, [pc, #664]	; (5478 <_dtoa_r+0x980>)
    51e0:	2200      	movs	r2, #0
    51e2:	f7fb f999 	bl	518 <__aeabi_dmul>
    51e6:	2200      	movs	r2, #0
    51e8:	2300      	movs	r3, #0
    51ea:	4606      	mov	r6, r0
    51ec:	460f      	mov	r7, r1
    51ee:	f7fb fbfb 	bl	9e8 <__aeabi_dcmpeq>
    51f2:	2800      	cmp	r0, #0
    51f4:	d09d      	beq.n	5132 <_dtoa_r+0x63a>
    51f6:	e7cf      	b.n	5198 <_dtoa_r+0x6a0>
    51f8:	9a08      	ldr	r2, [sp, #32]
    51fa:	2a00      	cmp	r2, #0
    51fc:	f000 80d7 	beq.w	53ae <_dtoa_r+0x8b6>
    5200:	9a06      	ldr	r2, [sp, #24]
    5202:	2a01      	cmp	r2, #1
    5204:	f300 80ba 	bgt.w	537c <_dtoa_r+0x884>
    5208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    520a:	2a00      	cmp	r2, #0
    520c:	f000 80b2 	beq.w	5374 <_dtoa_r+0x87c>
    5210:	f203 4333 	addw	r3, r3, #1075	; 0x433
    5214:	9e07      	ldr	r6, [sp, #28]
    5216:	9d04      	ldr	r5, [sp, #16]
    5218:	9a04      	ldr	r2, [sp, #16]
    521a:	441a      	add	r2, r3
    521c:	9204      	str	r2, [sp, #16]
    521e:	9a05      	ldr	r2, [sp, #20]
    5220:	2101      	movs	r1, #1
    5222:	441a      	add	r2, r3
    5224:	4620      	mov	r0, r4
    5226:	9205      	str	r2, [sp, #20]
    5228:	f00b fb24 	bl	10874 <__i2b>
    522c:	4607      	mov	r7, r0
    522e:	2d00      	cmp	r5, #0
    5230:	dd0c      	ble.n	524c <_dtoa_r+0x754>
    5232:	9b05      	ldr	r3, [sp, #20]
    5234:	2b00      	cmp	r3, #0
    5236:	dd09      	ble.n	524c <_dtoa_r+0x754>
    5238:	42ab      	cmp	r3, r5
    523a:	9a04      	ldr	r2, [sp, #16]
    523c:	bfa8      	it	ge
    523e:	462b      	movge	r3, r5
    5240:	1ad2      	subs	r2, r2, r3
    5242:	9204      	str	r2, [sp, #16]
    5244:	9a05      	ldr	r2, [sp, #20]
    5246:	1aed      	subs	r5, r5, r3
    5248:	1ad3      	subs	r3, r2, r3
    524a:	9305      	str	r3, [sp, #20]
    524c:	9b07      	ldr	r3, [sp, #28]
    524e:	b31b      	cbz	r3, 5298 <_dtoa_r+0x7a0>
    5250:	9b08      	ldr	r3, [sp, #32]
    5252:	2b00      	cmp	r3, #0
    5254:	f000 80af 	beq.w	53b6 <_dtoa_r+0x8be>
    5258:	2e00      	cmp	r6, #0
    525a:	dd13      	ble.n	5284 <_dtoa_r+0x78c>
    525c:	4639      	mov	r1, r7
    525e:	4632      	mov	r2, r6
    5260:	4620      	mov	r0, r4
    5262:	f00b fbc7 	bl	109f4 <__pow5mult>
    5266:	ee18 2a10 	vmov	r2, s16
    526a:	4601      	mov	r1, r0
    526c:	4607      	mov	r7, r0
    526e:	4620      	mov	r0, r4
    5270:	f00b fb16 	bl	108a0 <__multiply>
    5274:	ee18 1a10 	vmov	r1, s16
    5278:	4680      	mov	r8, r0
    527a:	4620      	mov	r0, r4
    527c:	f00b fa92 	bl	107a4 <_Bfree>
    5280:	ee08 8a10 	vmov	s16, r8
    5284:	9b07      	ldr	r3, [sp, #28]
    5286:	1b9a      	subs	r2, r3, r6
    5288:	d006      	beq.n	5298 <_dtoa_r+0x7a0>
    528a:	ee18 1a10 	vmov	r1, s16
    528e:	4620      	mov	r0, r4
    5290:	f00b fbb0 	bl	109f4 <__pow5mult>
    5294:	ee08 0a10 	vmov	s16, r0
    5298:	2101      	movs	r1, #1
    529a:	4620      	mov	r0, r4
    529c:	f00b faea 	bl	10874 <__i2b>
    52a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    52a2:	2b00      	cmp	r3, #0
    52a4:	4606      	mov	r6, r0
    52a6:	f340 8088 	ble.w	53ba <_dtoa_r+0x8c2>
    52aa:	461a      	mov	r2, r3
    52ac:	4601      	mov	r1, r0
    52ae:	4620      	mov	r0, r4
    52b0:	f00b fba0 	bl	109f4 <__pow5mult>
    52b4:	9b06      	ldr	r3, [sp, #24]
    52b6:	2b01      	cmp	r3, #1
    52b8:	4606      	mov	r6, r0
    52ba:	f340 8081 	ble.w	53c0 <_dtoa_r+0x8c8>
    52be:	f04f 0800 	mov.w	r8, #0
    52c2:	6933      	ldr	r3, [r6, #16]
    52c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    52c8:	6918      	ldr	r0, [r3, #16]
    52ca:	f010 fe11 	bl	15ef0 <__hi0bits>
    52ce:	f1c0 0020 	rsb	r0, r0, #32
    52d2:	9b05      	ldr	r3, [sp, #20]
    52d4:	4418      	add	r0, r3
    52d6:	f010 001f 	ands.w	r0, r0, #31
    52da:	f000 8092 	beq.w	5402 <_dtoa_r+0x90a>
    52de:	f1c0 0320 	rsb	r3, r0, #32
    52e2:	2b04      	cmp	r3, #4
    52e4:	f340 808a 	ble.w	53fc <_dtoa_r+0x904>
    52e8:	f1c0 001c 	rsb	r0, r0, #28
    52ec:	9b04      	ldr	r3, [sp, #16]
    52ee:	4403      	add	r3, r0
    52f0:	9304      	str	r3, [sp, #16]
    52f2:	9b05      	ldr	r3, [sp, #20]
    52f4:	4403      	add	r3, r0
    52f6:	4405      	add	r5, r0
    52f8:	9305      	str	r3, [sp, #20]
    52fa:	9b04      	ldr	r3, [sp, #16]
    52fc:	2b00      	cmp	r3, #0
    52fe:	dd07      	ble.n	5310 <_dtoa_r+0x818>
    5300:	ee18 1a10 	vmov	r1, s16
    5304:	461a      	mov	r2, r3
    5306:	4620      	mov	r0, r4
    5308:	f00b fbce 	bl	10aa8 <__lshift>
    530c:	ee08 0a10 	vmov	s16, r0
    5310:	9b05      	ldr	r3, [sp, #20]
    5312:	2b00      	cmp	r3, #0
    5314:	dd05      	ble.n	5322 <_dtoa_r+0x82a>
    5316:	4631      	mov	r1, r6
    5318:	461a      	mov	r2, r3
    531a:	4620      	mov	r0, r4
    531c:	f00b fbc4 	bl	10aa8 <__lshift>
    5320:	4606      	mov	r6, r0
    5322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5324:	2b00      	cmp	r3, #0
    5326:	d06e      	beq.n	5406 <_dtoa_r+0x90e>
    5328:	ee18 0a10 	vmov	r0, s16
    532c:	4631      	mov	r1, r6
    532e:	f010 fe2e 	bl	15f8e <__mcmp>
    5332:	2800      	cmp	r0, #0
    5334:	da67      	bge.n	5406 <_dtoa_r+0x90e>
    5336:	9b00      	ldr	r3, [sp, #0]
    5338:	3b01      	subs	r3, #1
    533a:	ee18 1a10 	vmov	r1, s16
    533e:	9300      	str	r3, [sp, #0]
    5340:	220a      	movs	r2, #10
    5342:	2300      	movs	r3, #0
    5344:	4620      	mov	r0, r4
    5346:	f00b fa4f 	bl	107e8 <__multadd>
    534a:	9b08      	ldr	r3, [sp, #32]
    534c:	ee08 0a10 	vmov	s16, r0
    5350:	2b00      	cmp	r3, #0
    5352:	f000 81b1 	beq.w	56b8 <_dtoa_r+0xbc0>
    5356:	2300      	movs	r3, #0
    5358:	4639      	mov	r1, r7
    535a:	220a      	movs	r2, #10
    535c:	4620      	mov	r0, r4
    535e:	f00b fa43 	bl	107e8 <__multadd>
    5362:	9b02      	ldr	r3, [sp, #8]
    5364:	2b00      	cmp	r3, #0
    5366:	4607      	mov	r7, r0
    5368:	f300 808e 	bgt.w	5488 <_dtoa_r+0x990>
    536c:	9b06      	ldr	r3, [sp, #24]
    536e:	2b02      	cmp	r3, #2
    5370:	dc51      	bgt.n	5416 <_dtoa_r+0x91e>
    5372:	e089      	b.n	5488 <_dtoa_r+0x990>
    5374:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    537a:	e74b      	b.n	5214 <_dtoa_r+0x71c>
    537c:	9b03      	ldr	r3, [sp, #12]
    537e:	1e5e      	subs	r6, r3, #1
    5380:	9b07      	ldr	r3, [sp, #28]
    5382:	42b3      	cmp	r3, r6
    5384:	bfbf      	itttt	lt
    5386:	9b07      	ldrlt	r3, [sp, #28]
    5388:	9607      	strlt	r6, [sp, #28]
    538a:	1af2      	sublt	r2, r6, r3
    538c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    538e:	bfb6      	itet	lt
    5390:	189b      	addlt	r3, r3, r2
    5392:	1b9e      	subge	r6, r3, r6
    5394:	930a      	strlt	r3, [sp, #40]	; 0x28
    5396:	9b03      	ldr	r3, [sp, #12]
    5398:	bfb8      	it	lt
    539a:	2600      	movlt	r6, #0
    539c:	2b00      	cmp	r3, #0
    539e:	bfb7      	itett	lt
    53a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
    53a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
    53a8:	1a9d      	sublt	r5, r3, r2
    53aa:	2300      	movlt	r3, #0
    53ac:	e734      	b.n	5218 <_dtoa_r+0x720>
    53ae:	9e07      	ldr	r6, [sp, #28]
    53b0:	9d04      	ldr	r5, [sp, #16]
    53b2:	9f08      	ldr	r7, [sp, #32]
    53b4:	e73b      	b.n	522e <_dtoa_r+0x736>
    53b6:	9a07      	ldr	r2, [sp, #28]
    53b8:	e767      	b.n	528a <_dtoa_r+0x792>
    53ba:	9b06      	ldr	r3, [sp, #24]
    53bc:	2b01      	cmp	r3, #1
    53be:	dc18      	bgt.n	53f2 <_dtoa_r+0x8fa>
    53c0:	f1ba 0f00 	cmp.w	sl, #0
    53c4:	d115      	bne.n	53f2 <_dtoa_r+0x8fa>
    53c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
    53ca:	b993      	cbnz	r3, 53f2 <_dtoa_r+0x8fa>
    53cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    53d0:	0d1b      	lsrs	r3, r3, #20
    53d2:	051b      	lsls	r3, r3, #20
    53d4:	b183      	cbz	r3, 53f8 <_dtoa_r+0x900>
    53d6:	9b04      	ldr	r3, [sp, #16]
    53d8:	3301      	adds	r3, #1
    53da:	9304      	str	r3, [sp, #16]
    53dc:	9b05      	ldr	r3, [sp, #20]
    53de:	3301      	adds	r3, #1
    53e0:	9305      	str	r3, [sp, #20]
    53e2:	f04f 0801 	mov.w	r8, #1
    53e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    53e8:	2b00      	cmp	r3, #0
    53ea:	f47f af6a 	bne.w	52c2 <_dtoa_r+0x7ca>
    53ee:	2001      	movs	r0, #1
    53f0:	e76f      	b.n	52d2 <_dtoa_r+0x7da>
    53f2:	f04f 0800 	mov.w	r8, #0
    53f6:	e7f6      	b.n	53e6 <_dtoa_r+0x8ee>
    53f8:	4698      	mov	r8, r3
    53fa:	e7f4      	b.n	53e6 <_dtoa_r+0x8ee>
    53fc:	f43f af7d 	beq.w	52fa <_dtoa_r+0x802>
    5400:	4618      	mov	r0, r3
    5402:	301c      	adds	r0, #28
    5404:	e772      	b.n	52ec <_dtoa_r+0x7f4>
    5406:	9b03      	ldr	r3, [sp, #12]
    5408:	2b00      	cmp	r3, #0
    540a:	dc37      	bgt.n	547c <_dtoa_r+0x984>
    540c:	9b06      	ldr	r3, [sp, #24]
    540e:	2b02      	cmp	r3, #2
    5410:	dd34      	ble.n	547c <_dtoa_r+0x984>
    5412:	9b03      	ldr	r3, [sp, #12]
    5414:	9302      	str	r3, [sp, #8]
    5416:	9b02      	ldr	r3, [sp, #8]
    5418:	b96b      	cbnz	r3, 5436 <_dtoa_r+0x93e>
    541a:	4631      	mov	r1, r6
    541c:	2205      	movs	r2, #5
    541e:	4620      	mov	r0, r4
    5420:	f00b f9e2 	bl	107e8 <__multadd>
    5424:	4601      	mov	r1, r0
    5426:	4606      	mov	r6, r0
    5428:	ee18 0a10 	vmov	r0, s16
    542c:	f010 fdaf 	bl	15f8e <__mcmp>
    5430:	2800      	cmp	r0, #0
    5432:	f73f adbb 	bgt.w	4fac <_dtoa_r+0x4b4>
    5436:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5438:	9d01      	ldr	r5, [sp, #4]
    543a:	43db      	mvns	r3, r3
    543c:	9300      	str	r3, [sp, #0]
    543e:	f04f 0800 	mov.w	r8, #0
    5442:	4631      	mov	r1, r6
    5444:	4620      	mov	r0, r4
    5446:	f00b f9ad 	bl	107a4 <_Bfree>
    544a:	2f00      	cmp	r7, #0
    544c:	f43f aea4 	beq.w	5198 <_dtoa_r+0x6a0>
    5450:	f1b8 0f00 	cmp.w	r8, #0
    5454:	d005      	beq.n	5462 <_dtoa_r+0x96a>
    5456:	45b8      	cmp	r8, r7
    5458:	d003      	beq.n	5462 <_dtoa_r+0x96a>
    545a:	4641      	mov	r1, r8
    545c:	4620      	mov	r0, r4
    545e:	f00b f9a1 	bl	107a4 <_Bfree>
    5462:	4639      	mov	r1, r7
    5464:	4620      	mov	r0, r4
    5466:	f00b f99d 	bl	107a4 <_Bfree>
    546a:	e695      	b.n	5198 <_dtoa_r+0x6a0>
    546c:	2600      	movs	r6, #0
    546e:	4637      	mov	r7, r6
    5470:	e7e1      	b.n	5436 <_dtoa_r+0x93e>
    5472:	9700      	str	r7, [sp, #0]
    5474:	4637      	mov	r7, r6
    5476:	e599      	b.n	4fac <_dtoa_r+0x4b4>
    5478:	40240000 	.word	0x40240000
    547c:	9b08      	ldr	r3, [sp, #32]
    547e:	2b00      	cmp	r3, #0
    5480:	f000 80ca 	beq.w	5618 <_dtoa_r+0xb20>
    5484:	9b03      	ldr	r3, [sp, #12]
    5486:	9302      	str	r3, [sp, #8]
    5488:	2d00      	cmp	r5, #0
    548a:	dd05      	ble.n	5498 <_dtoa_r+0x9a0>
    548c:	4639      	mov	r1, r7
    548e:	462a      	mov	r2, r5
    5490:	4620      	mov	r0, r4
    5492:	f00b fb09 	bl	10aa8 <__lshift>
    5496:	4607      	mov	r7, r0
    5498:	f1b8 0f00 	cmp.w	r8, #0
    549c:	d05b      	beq.n	5556 <_dtoa_r+0xa5e>
    549e:	6879      	ldr	r1, [r7, #4]
    54a0:	4620      	mov	r0, r4
    54a2:	f00b f93f 	bl	10724 <_Balloc>
    54a6:	4605      	mov	r5, r0
    54a8:	b928      	cbnz	r0, 54b6 <_dtoa_r+0x9be>
    54aa:	4b87      	ldr	r3, [pc, #540]	; (56c8 <_dtoa_r+0xbd0>)
    54ac:	4602      	mov	r2, r0
    54ae:	f240 21ea 	movw	r1, #746	; 0x2ea
    54b2:	f7ff bb3b 	b.w	4b2c <_dtoa_r+0x34>
    54b6:	693a      	ldr	r2, [r7, #16]
    54b8:	3202      	adds	r2, #2
    54ba:	0092      	lsls	r2, r2, #2
    54bc:	f107 010c 	add.w	r1, r7, #12
    54c0:	300c      	adds	r0, #12
    54c2:	f010 fa52 	bl	1596a <memcpy>
    54c6:	2201      	movs	r2, #1
    54c8:	4629      	mov	r1, r5
    54ca:	4620      	mov	r0, r4
    54cc:	f00b faec 	bl	10aa8 <__lshift>
    54d0:	9b01      	ldr	r3, [sp, #4]
    54d2:	f103 0901 	add.w	r9, r3, #1
    54d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    54da:	4413      	add	r3, r2
    54dc:	9305      	str	r3, [sp, #20]
    54de:	f00a 0301 	and.w	r3, sl, #1
    54e2:	46b8      	mov	r8, r7
    54e4:	9304      	str	r3, [sp, #16]
    54e6:	4607      	mov	r7, r0
    54e8:	4631      	mov	r1, r6
    54ea:	ee18 0a10 	vmov	r0, s16
    54ee:	f010 fc1a 	bl	15d26 <quorem>
    54f2:	4641      	mov	r1, r8
    54f4:	9002      	str	r0, [sp, #8]
    54f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    54fa:	ee18 0a10 	vmov	r0, s16
    54fe:	f010 fd46 	bl	15f8e <__mcmp>
    5502:	463a      	mov	r2, r7
    5504:	9003      	str	r0, [sp, #12]
    5506:	4631      	mov	r1, r6
    5508:	4620      	mov	r0, r4
    550a:	f00b fb3d 	bl	10b88 <__mdiff>
    550e:	68c2      	ldr	r2, [r0, #12]
    5510:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    5514:	4605      	mov	r5, r0
    5516:	bb02      	cbnz	r2, 555a <_dtoa_r+0xa62>
    5518:	4601      	mov	r1, r0
    551a:	ee18 0a10 	vmov	r0, s16
    551e:	f010 fd36 	bl	15f8e <__mcmp>
    5522:	4602      	mov	r2, r0
    5524:	4629      	mov	r1, r5
    5526:	4620      	mov	r0, r4
    5528:	9207      	str	r2, [sp, #28]
    552a:	f00b f93b 	bl	107a4 <_Bfree>
    552e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    5532:	ea43 0102 	orr.w	r1, r3, r2
    5536:	9b04      	ldr	r3, [sp, #16]
    5538:	430b      	orrs	r3, r1
    553a:	464d      	mov	r5, r9
    553c:	d10f      	bne.n	555e <_dtoa_r+0xa66>
    553e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    5542:	d02a      	beq.n	559a <_dtoa_r+0xaa2>
    5544:	9b03      	ldr	r3, [sp, #12]
    5546:	2b00      	cmp	r3, #0
    5548:	dd02      	ble.n	5550 <_dtoa_r+0xa58>
    554a:	9b02      	ldr	r3, [sp, #8]
    554c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
    5550:	f88b a000 	strb.w	sl, [fp]
    5554:	e775      	b.n	5442 <_dtoa_r+0x94a>
    5556:	4638      	mov	r0, r7
    5558:	e7ba      	b.n	54d0 <_dtoa_r+0x9d8>
    555a:	2201      	movs	r2, #1
    555c:	e7e2      	b.n	5524 <_dtoa_r+0xa2c>
    555e:	9b03      	ldr	r3, [sp, #12]
    5560:	2b00      	cmp	r3, #0
    5562:	db04      	blt.n	556e <_dtoa_r+0xa76>
    5564:	9906      	ldr	r1, [sp, #24]
    5566:	430b      	orrs	r3, r1
    5568:	9904      	ldr	r1, [sp, #16]
    556a:	430b      	orrs	r3, r1
    556c:	d122      	bne.n	55b4 <_dtoa_r+0xabc>
    556e:	2a00      	cmp	r2, #0
    5570:	ddee      	ble.n	5550 <_dtoa_r+0xa58>
    5572:	ee18 1a10 	vmov	r1, s16
    5576:	2201      	movs	r2, #1
    5578:	4620      	mov	r0, r4
    557a:	f00b fa95 	bl	10aa8 <__lshift>
    557e:	4631      	mov	r1, r6
    5580:	ee08 0a10 	vmov	s16, r0
    5584:	f010 fd03 	bl	15f8e <__mcmp>
    5588:	2800      	cmp	r0, #0
    558a:	dc03      	bgt.n	5594 <_dtoa_r+0xa9c>
    558c:	d1e0      	bne.n	5550 <_dtoa_r+0xa58>
    558e:	f01a 0f01 	tst.w	sl, #1
    5592:	d0dd      	beq.n	5550 <_dtoa_r+0xa58>
    5594:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    5598:	d1d7      	bne.n	554a <_dtoa_r+0xa52>
    559a:	2339      	movs	r3, #57	; 0x39
    559c:	f88b 3000 	strb.w	r3, [fp]
    55a0:	462b      	mov	r3, r5
    55a2:	461d      	mov	r5, r3
    55a4:	3b01      	subs	r3, #1
    55a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    55aa:	2a39      	cmp	r2, #57	; 0x39
    55ac:	d071      	beq.n	5692 <_dtoa_r+0xb9a>
    55ae:	3201      	adds	r2, #1
    55b0:	701a      	strb	r2, [r3, #0]
    55b2:	e746      	b.n	5442 <_dtoa_r+0x94a>
    55b4:	2a00      	cmp	r2, #0
    55b6:	dd07      	ble.n	55c8 <_dtoa_r+0xad0>
    55b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    55bc:	d0ed      	beq.n	559a <_dtoa_r+0xaa2>
    55be:	f10a 0301 	add.w	r3, sl, #1
    55c2:	f88b 3000 	strb.w	r3, [fp]
    55c6:	e73c      	b.n	5442 <_dtoa_r+0x94a>
    55c8:	9b05      	ldr	r3, [sp, #20]
    55ca:	f809 ac01 	strb.w	sl, [r9, #-1]
    55ce:	4599      	cmp	r9, r3
    55d0:	d047      	beq.n	5662 <_dtoa_r+0xb6a>
    55d2:	ee18 1a10 	vmov	r1, s16
    55d6:	2300      	movs	r3, #0
    55d8:	220a      	movs	r2, #10
    55da:	4620      	mov	r0, r4
    55dc:	f00b f904 	bl	107e8 <__multadd>
    55e0:	45b8      	cmp	r8, r7
    55e2:	ee08 0a10 	vmov	s16, r0
    55e6:	f04f 0300 	mov.w	r3, #0
    55ea:	f04f 020a 	mov.w	r2, #10
    55ee:	4641      	mov	r1, r8
    55f0:	4620      	mov	r0, r4
    55f2:	d106      	bne.n	5602 <_dtoa_r+0xb0a>
    55f4:	f00b f8f8 	bl	107e8 <__multadd>
    55f8:	4680      	mov	r8, r0
    55fa:	4607      	mov	r7, r0
    55fc:	f109 0901 	add.w	r9, r9, #1
    5600:	e772      	b.n	54e8 <_dtoa_r+0x9f0>
    5602:	f00b f8f1 	bl	107e8 <__multadd>
    5606:	4639      	mov	r1, r7
    5608:	4680      	mov	r8, r0
    560a:	2300      	movs	r3, #0
    560c:	220a      	movs	r2, #10
    560e:	4620      	mov	r0, r4
    5610:	f00b f8ea 	bl	107e8 <__multadd>
    5614:	4607      	mov	r7, r0
    5616:	e7f1      	b.n	55fc <_dtoa_r+0xb04>
    5618:	9b03      	ldr	r3, [sp, #12]
    561a:	9302      	str	r3, [sp, #8]
    561c:	9d01      	ldr	r5, [sp, #4]
    561e:	ee18 0a10 	vmov	r0, s16
    5622:	4631      	mov	r1, r6
    5624:	f010 fb7f 	bl	15d26 <quorem>
    5628:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    562c:	9b01      	ldr	r3, [sp, #4]
    562e:	f805 ab01 	strb.w	sl, [r5], #1
    5632:	1aea      	subs	r2, r5, r3
    5634:	9b02      	ldr	r3, [sp, #8]
    5636:	4293      	cmp	r3, r2
    5638:	dd09      	ble.n	564e <_dtoa_r+0xb56>
    563a:	ee18 1a10 	vmov	r1, s16
    563e:	2300      	movs	r3, #0
    5640:	220a      	movs	r2, #10
    5642:	4620      	mov	r0, r4
    5644:	f00b f8d0 	bl	107e8 <__multadd>
    5648:	ee08 0a10 	vmov	s16, r0
    564c:	e7e7      	b.n	561e <_dtoa_r+0xb26>
    564e:	9b02      	ldr	r3, [sp, #8]
    5650:	2b00      	cmp	r3, #0
    5652:	bfc8      	it	gt
    5654:	461d      	movgt	r5, r3
    5656:	9b01      	ldr	r3, [sp, #4]
    5658:	bfd8      	it	le
    565a:	2501      	movle	r5, #1
    565c:	441d      	add	r5, r3
    565e:	f04f 0800 	mov.w	r8, #0
    5662:	ee18 1a10 	vmov	r1, s16
    5666:	2201      	movs	r2, #1
    5668:	4620      	mov	r0, r4
    566a:	f00b fa1d 	bl	10aa8 <__lshift>
    566e:	4631      	mov	r1, r6
    5670:	ee08 0a10 	vmov	s16, r0
    5674:	f010 fc8b 	bl	15f8e <__mcmp>
    5678:	2800      	cmp	r0, #0
    567a:	dc91      	bgt.n	55a0 <_dtoa_r+0xaa8>
    567c:	d102      	bne.n	5684 <_dtoa_r+0xb8c>
    567e:	f01a 0f01 	tst.w	sl, #1
    5682:	d18d      	bne.n	55a0 <_dtoa_r+0xaa8>
    5684:	462b      	mov	r3, r5
    5686:	461d      	mov	r5, r3
    5688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    568c:	2a30      	cmp	r2, #48	; 0x30
    568e:	d0fa      	beq.n	5686 <_dtoa_r+0xb8e>
    5690:	e6d7      	b.n	5442 <_dtoa_r+0x94a>
    5692:	9a01      	ldr	r2, [sp, #4]
    5694:	429a      	cmp	r2, r3
    5696:	d184      	bne.n	55a2 <_dtoa_r+0xaaa>
    5698:	9b00      	ldr	r3, [sp, #0]
    569a:	3301      	adds	r3, #1
    569c:	9300      	str	r3, [sp, #0]
    569e:	2331      	movs	r3, #49	; 0x31
    56a0:	7013      	strb	r3, [r2, #0]
    56a2:	e6ce      	b.n	5442 <_dtoa_r+0x94a>
    56a4:	4b09      	ldr	r3, [pc, #36]	; (56cc <_dtoa_r+0xbd4>)
    56a6:	f7ff ba95 	b.w	4bd4 <_dtoa_r+0xdc>
    56aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    56ac:	2b00      	cmp	r3, #0
    56ae:	f47f aa6e 	bne.w	4b8e <_dtoa_r+0x96>
    56b2:	4b07      	ldr	r3, [pc, #28]	; (56d0 <_dtoa_r+0xbd8>)
    56b4:	f7ff ba8e 	b.w	4bd4 <_dtoa_r+0xdc>
    56b8:	9b02      	ldr	r3, [sp, #8]
    56ba:	2b00      	cmp	r3, #0
    56bc:	dcae      	bgt.n	561c <_dtoa_r+0xb24>
    56be:	9b06      	ldr	r3, [sp, #24]
    56c0:	2b02      	cmp	r3, #2
    56c2:	f73f aea8 	bgt.w	5416 <_dtoa_r+0x91e>
    56c6:	e7a9      	b.n	561c <_dtoa_r+0xb24>
    56c8:	000461d4 	.word	0x000461d4
    56cc:	00045922 	.word	0x00045922
    56d0:	00046154 	.word	0x00046154

000056d4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
{
    56d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56d8:	ed2d 8b08 	vpush	{d8-d11}
    56dc:	b089      	sub	sp, #36	; 0x24
    56de:	4616      	mov	r6, r2
    56e0:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
    56e4:	460f      	mov	r7, r1
    const int m=*factors++; /* stage's fft length/p */
    56e6:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
    56ea:	6811      	ldr	r1, [r2, #0]
    56ec:	9103      	str	r1, [sp, #12]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    56ee:	fb0a f901 	mul.w	r9, sl, r1
    if (m==1) {
    56f2:	f1ba 0f01 	cmp.w	sl, #1
            f += fstride*in_stride;
    56f6:	fb06 f103 	mul.w	r1, r6, r3
{
    56fa:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    56fc:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
            f += fstride*in_stride;
    5700:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    if (m==1) {
    5704:	d116      	bne.n	5734 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
    5706:	4603      	mov	r3, r0
            *Fout = *f;
    5708:	e897 0003 	ldmia.w	r7, {r0, r1}
    570c:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
    5710:	3308      	adds	r3, #8
    5712:	4599      	cmp	r9, r3
            f += fstride*in_stride;
    5714:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
    5716:	d1f7      	bne.n	5708 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    kiss_fft_cpx * tw1 = st->twiddles;
    5718:	f505 7384 	add.w	r3, r5, #264	; 0x108
    571c:	9305      	str	r3, [sp, #20]
    switch (p) {
    571e:	9b03      	ldr	r3, [sp, #12]
    5720:	3b02      	subs	r3, #2
    5722:	2b03      	cmp	r3, #3
    5724:	f200 8284 	bhi.w	5c30 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x55c>
    5728:	e8df f013 	tbh	[pc, r3, lsl #1]
    572c:	0056001b 	.word	0x0056001b
    5730:	019600f9 	.word	0x019600f9
    const int m=*factors++; /* stage's fft length/p */
    5734:	3208      	adds	r2, #8
    5736:	9204      	str	r2, [sp, #16]
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    5738:	9a03      	ldr	r2, [sp, #12]
        }while( (Fout += m) != Fout_end );
    573a:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    573e:	4372      	muls	r2, r6
    5740:	9904      	ldr	r1, [sp, #16]
    5742:	9100      	str	r1, [sp, #0]
    5744:	9501      	str	r5, [sp, #4]
    5746:	4639      	mov	r1, r7
    5748:	e9cd 2306 	strd	r2, r3, [sp, #24]
    574c:	9005      	str	r0, [sp, #20]
    574e:	f7ff ffc1 	bl	56d4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
    5752:	9805      	ldr	r0, [sp, #20]
    5754:	4458      	add	r0, fp
    5756:	4581      	cmp	r9, r0
    5758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
            f += fstride*in_stride;
    575c:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
    575e:	d1ef      	bne.n	5740 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
    5760:	e7da      	b.n	5718 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
    5762:	f10a 0301 	add.w	r3, sl, #1
    5766:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
    576a:	00f6      	lsls	r6, r6, #3
    576c:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
    576e:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    5772:	ed53 5a01 	vldr	s11, [r3, #-4]
    5776:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
    577a:	ed13 6a02 	vldr	s12, [r3, #-8]
    577e:	ee26 7ae5 	vnmul.f32	s14, s13, s11
    }while (--m);
    5782:	f1ba 0a01 	subs.w	sl, sl, #1
        C_MUL (t,  *Fout2 , *tw1);
    5786:	eea6 7a27 	vfma.f32	s14, s12, s15
    }while (--m);
    578a:	f103 0308 	add.w	r3, r3, #8
    578e:	f104 0408 	add.w	r4, r4, #8
        C_MUL (t,  *Fout2 , *tw1);
    5792:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }while (--m);
    5796:	4435      	add	r5, r6
        C_MUL (t,  *Fout2 , *tw1);
    5798:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
    579c:	ed54 6a04 	vldr	s13, [r4, #-16]
    57a0:	ee76 6ac7 	vsub.f32	s13, s13, s14
    57a4:	ed43 6a04 	vstr	s13, [r3, #-16]
    57a8:	ed54 6a03 	vldr	s13, [r4, #-12]
    57ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
    57b0:	ed43 6a03 	vstr	s13, [r3, #-12]
        C_ADDTO( *Fout ,  t );
    57b4:	ed54 6a04 	vldr	s13, [r4, #-16]
    57b8:	ee36 7a87 	vadd.f32	s14, s13, s14
    57bc:	ed04 7a04 	vstr	s14, [r4, #-16]
    57c0:	ed14 7a03 	vldr	s14, [r4, #-12]
    57c4:	ee77 7a27 	vadd.f32	s15, s14, s15
    57c8:	ed44 7a03 	vstr	s15, [r4, #-12]
    }while (--m);
    57cc:	d1cf      	bne.n	576e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
}
    57ce:	b009      	add	sp, #36	; 0x24
    57d0:	ecbd 8b08 	vpop	{d8-d11}
    57d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
    57d8:	fb06 f30a 	mul.w	r3, r6, sl
    57dc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    57e0:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
    57e4:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
    57e8:	0133      	lsls	r3, r6, #4
    57ea:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
    57ee:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
    57f2:	f104 0608 	add.w	r6, r4, #8
    57f6:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
    57f8:	4657      	mov	r7, sl
         tw2 += fstride*2;
    57fa:	9303      	str	r3, [sp, #12]
    57fc:	3404      	adds	r4, #4
    57fe:	46aa      	mov	sl, r5
         Fout[m2].i = Fout[m].i - scratch[0].r;
    5800:	eef1 9a49 	vneg.f32	s19, s18
         C_MUL(scratch[1],Fout[m] , *tw1);
    5804:	edd8 7a01 	vldr	s15, [r8, #4]
    5808:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    580c:	ed14 6a01 	vldr	s12, [r4, #-4]
    5810:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
         C_MUL(scratch[2],Fout[m2] , *tw2);
    5814:	edd9 5a01 	vldr	s11, [r9, #4]
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
    5818:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_MUL(scratch[1],Fout[m] , *tw1);
    581c:	ee66 8ae7 	vnmul.f32	s17, s13, s15
     }while(--k);
    5820:	3608      	adds	r6, #8
         C_MUL(scratch[1],Fout[m] , *tw1);
    5822:	eeb0 7a68 	vmov.f32	s14, s17
    5826:	eea6 7a08 	vfma.f32	s14, s12, s16
     }while(--k);
    582a:	f108 0808 	add.w	r8, r8, #8
    582e:	445d      	add	r5, fp
         C_MUL(scratch[1],Fout[m] , *tw1);
    5830:	ee28 8a27 	vmul.f32	s16, s16, s15
     }while(--k);
    5834:	f109 0908 	add.w	r9, r9, #8
         C_MUL(scratch[1],Fout[m] , *tw1);
    5838:	eef0 7a48 	vmov.f32	s15, s16
    583c:	eee6 7a26 	vfma.f32	s15, s12, s13
     }while(--k);
    5840:	3408      	adds	r4, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
    5842:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
    5846:	ed19 6a02 	vldr	s12, [r9, #-8]
    584a:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
    584e:	ee66 8ae5 	vnmul.f32	s17, s13, s11
    5852:	eee6 8a08 	vfma.f32	s17, s12, s16
    5856:	ee28 8a25 	vmul.f32	s16, s16, s11
         C_ADD(scratch[3],scratch[1],scratch[2]);
    585a:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_MUL(scratch[2],Fout[m2] , *tw2);
    585e:	eea6 8a26 	vfma.f32	s16, s12, s13
         C_SUB(scratch[0],scratch[1],scratch[2]);
    5862:	ee77 8a68 	vsub.f32	s17, s14, s17
         C_ADD(scratch[3],scratch[1],scratch[2]);
    5866:	ee37 aa88 	vadd.f32	s20, s15, s16
         C_SUB(scratch[0],scratch[1],scratch[2]);
    586a:	ee37 8ac8 	vsub.f32	s16, s15, s16
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
    586e:	f7fa fdfb 	bl	468 <__aeabi_f2d>
    5872:	ec41 0b1b 	vmov	d11, r0, r1
    5876:	ee1a 0a90 	vmov	r0, s21
    587a:	f7fa fdf5 	bl	468 <__aeabi_f2d>
    587e:	4beb      	ldr	r3, [pc, #940]	; (5c2c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x558>)
    5880:	2200      	movs	r2, #0
    5882:	f7fa fe49 	bl	518 <__aeabi_dmul>
    5886:	4602      	mov	r2, r0
    5888:	460b      	mov	r3, r1
    588a:	ec51 0b1b 	vmov	r0, r1, d11
    588e:	f7fa fc8b 	bl	1a8 <__aeabi_dsub>
    5892:	f7fb f903 	bl	a9c <__aeabi_d2f>
    5896:	f844 0c0c 	str.w	r0, [r4, #-12]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
    589a:	f856 0c0c 	ldr.w	r0, [r6, #-12]
    589e:	f7fa fde3 	bl	468 <__aeabi_f2d>
    58a2:	ec41 0b1b 	vmov	d11, r0, r1
    58a6:	ee1a 0a10 	vmov	r0, s20
    58aa:	f7fa fddd 	bl	468 <__aeabi_f2d>
    58ae:	4bdf      	ldr	r3, [pc, #892]	; (5c2c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x558>)
    58b0:	2200      	movs	r2, #0
    58b2:	f7fa fe31 	bl	518 <__aeabi_dmul>
    58b6:	460b      	mov	r3, r1
    58b8:	4602      	mov	r2, r0
    58ba:	ec51 0b1b 	vmov	r0, r1, d11
    58be:	f7fa fc73 	bl	1a8 <__aeabi_dsub>
    58c2:	f7fb f8eb 	bl	a9c <__aeabi_d2f>
    58c6:	f848 0c04 	str.w	r0, [r8, #-4]
         C_ADDTO(*Fout,scratch[3]);
    58ca:	ed56 7a04 	vldr	s15, [r6, #-16]
    58ce:	ee77 7aaa 	vadd.f32	s15, s15, s21
     }while(--k);
    58d2:	3f01      	subs	r7, #1
         C_ADDTO(*Fout,scratch[3]);
    58d4:	ed46 7a04 	vstr	s15, [r6, #-16]
    58d8:	ed56 7a03 	vldr	s15, [r6, #-12]
    58dc:	ee77 7a8a 	vadd.f32	s15, s15, s20
    58e0:	ed46 7a03 	vstr	s15, [r6, #-12]
         Fout[m2].r = Fout[m].r + scratch[0].i;
    58e4:	ed54 7a03 	vldr	s15, [r4, #-12]
    58e8:	eee9 7a08 	vfma.f32	s15, s18, s16
    58ec:	ed49 7a02 	vstr	s15, [r9, #-8]
         Fout[m2].i = Fout[m].i - scratch[0].r;
    58f0:	ed58 7a01 	vldr	s15, [r8, #-4]
    58f4:	eee9 7aa8 	vfma.f32	s15, s19, s17
    58f8:	ed49 7a01 	vstr	s15, [r9, #-4]
         Fout[m].r -= scratch[0].i;
    58fc:	ed54 7a03 	vldr	s15, [r4, #-12]
    5900:	eee9 7a88 	vfma.f32	s15, s19, s16
    5904:	ed44 7a03 	vstr	s15, [r4, #-12]
         Fout[m].i += scratch[0].r;
    5908:	ed58 7a01 	vldr	s15, [r8, #-4]
    590c:	eee9 7a28 	vfma.f32	s15, s18, s17
    5910:	ed48 7a01 	vstr	s15, [r8, #-4]
     }while(--k);
    5914:	9b03      	ldr	r3, [sp, #12]
    5916:	449a      	add	sl, r3
    5918:	f47f af74 	bne.w	5804 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
    591c:	e757      	b.n	57ce <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
    591e:	4657      	mov	r7, sl
        tw3 += fstride*3;
    5920:	2218      	movs	r2, #24
        tw1 += fstride;
    5922:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
        tw2 += fstride*2;
    5926:	ea4f 1906 	mov.w	r9, r6, lsl #4
    592a:	eb04 1007 	add.w	r0, r4, r7, lsl #4
        tw3 += fstride*3;
    592e:	4356      	muls	r6, r2
        if(st->inverse) {
    5930:	686a      	ldr	r2, [r5, #4]
    5932:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
    5936:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
    593a:	f104 0c04 	add.w	ip, r4, #4
    593e:	46ae      	mov	lr, r5
    5940:	46a8      	mov	r8, r5
        C_MUL(scratch[0],Fout[m] , *tw1 );
    5942:	edd1 6a01 	vldr	s13, [r1, #4]
    5946:	edd5 7a43 	vldr	s15, [r5, #268]	; 0x10c
    594a:	ed91 6a00 	vldr	s12, [r1]
    594e:	ed95 7a42 	vldr	s14, [r5, #264]	; 0x108
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    5952:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    5956:	edd3 3a01 	vldr	s7, [r3, #4]
    595a:	ed93 4a00 	vldr	s8, [r3]
        C_SUB( scratch[5] , *Fout, scratch[1] );
    595e:	ed1c 3a01 	vldr	s6, [ip, #-4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
    5962:	ee67 5ae6 	vnmul.f32	s11, s15, s13
    5966:	eee6 5a07 	vfma.f32	s11, s12, s14
    596a:	ee27 7a26 	vmul.f32	s14, s14, s13
    596e:	eeb0 5a65 	vmov.f32	s10, s11
    5972:	eea6 7a27 	vfma.f32	s14, s12, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    5976:	edd0 5a00 	vldr	s11, [r0]
    597a:	edd8 7a42 	vldr	s15, [r8, #264]	; 0x108
        C_MUL(scratch[0],Fout[m] , *tw1 );
    597e:	eef0 6a47 	vmov.f32	s13, s14
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    5982:	ed98 7a43 	vldr	s14, [r8, #268]	; 0x10c
    5986:	ee27 6a64 	vnmul.f32	s12, s14, s9
    598a:	eea5 6aa7 	vfma.f32	s12, s11, s15
    598e:	ee67 7aa4 	vmul.f32	s15, s15, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    5992:	edde 4a43 	vldr	s9, [lr, #268]	; 0x10c
        C_MUL(scratch[1],Fout[m2] , *tw2 );
    5996:	eee5 7a87 	vfma.f32	s15, s11, s14
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    599a:	ed9e 7a42 	vldr	s14, [lr, #264]	; 0x108
    599e:	ee64 5ae3 	vnmul.f32	s11, s9, s7
    59a2:	eee4 5a07 	vfma.f32	s11, s8, s14
    59a6:	ee27 7a23 	vmul.f32	s14, s14, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
    59aa:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
    59ae:	eea4 7a24 	vfma.f32	s14, s8, s9
        C_SUB( scratch[5] , *Fout, scratch[1] );
    59b2:	ee33 4a46 	vsub.f32	s8, s6, s12
    59b6:	ee73 4ae7 	vsub.f32	s9, s7, s15
        C_ADDTO(*Fout, scratch[1]);
    59ba:	ee36 6a03 	vadd.f32	s12, s12, s6
    59be:	ee77 7aa3 	vadd.f32	s15, s15, s7
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
    59c2:	ee35 3a25 	vadd.f32	s6, s10, s11
    59c6:	ee76 3a87 	vadd.f32	s7, s13, s14
        C_ADDTO(*Fout, scratch[1]);
    59ca:	ed0c 6a01 	vstr	s12, [ip, #-4]
    59ce:	edc4 7a01 	vstr	s15, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
    59d2:	ee36 6a43 	vsub.f32	s12, s12, s6
    59d6:	ee77 7ae3 	vsub.f32	s15, s15, s7
    59da:	ed80 6a00 	vstr	s12, [r0]
    59de:	edc0 7a01 	vstr	s15, [r0, #4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
    59e2:	ee36 7ac7 	vsub.f32	s14, s13, s14
        C_ADDTO( *Fout , scratch[3] );
    59e6:	ed5c 6a01 	vldr	s13, [ip, #-4]
    59ea:	ee76 6a83 	vadd.f32	s13, s13, s6
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
    59ee:	ee75 5a65 	vsub.f32	s11, s10, s11
        C_ADDTO( *Fout , scratch[3] );
    59f2:	ed4c 6a01 	vstr	s13, [ip, #-4]
    59f6:	edd4 7a01 	vldr	s15, [r4, #4]
    59fa:	ee77 7aa3 	vadd.f32	s15, s15, s7
            Fout[m3].r = scratch[5].r + scratch[4].i;
    59fe:	ee74 6a07 	vadd.f32	s13, s8, s14
        C_ADDTO( *Fout , scratch[3] );
    5a02:	edc4 7a01 	vstr	s15, [r4, #4]
            Fout[m].r = scratch[5].r - scratch[4].i;
    5a06:	ee34 7a47 	vsub.f32	s14, s8, s14
            Fout[m3].i = scratch[5].i - scratch[4].r;
    5a0a:	ee74 7ae5 	vsub.f32	s15, s9, s11
            Fout[m].i = scratch[5].i + scratch[4].r;
    5a0e:	ee74 5aa5 	vadd.f32	s11, s9, s11
        if(st->inverse) {
    5a12:	b1c2      	cbz	r2, 5a46 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x372>
            Fout[m].r = scratch[5].r - scratch[4].i;
    5a14:	ed81 7a00 	vstr	s14, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
    5a18:	edc1 5a01 	vstr	s11, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
    5a1c:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
    5a20:	edc3 7a01 	vstr	s15, [r3, #4]
    }while(--k);
    5a24:	3f01      	subs	r7, #1
        ++Fout;
    5a26:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
    5a2a:	f101 0108 	add.w	r1, r1, #8
    5a2e:	4455      	add	r5, sl
    5a30:	f100 0008 	add.w	r0, r0, #8
    5a34:	44c8      	add	r8, r9
    5a36:	f103 0308 	add.w	r3, r3, #8
    5a3a:	44b6      	add	lr, r6
    5a3c:	f10c 0c08 	add.w	ip, ip, #8
    5a40:	f47f af7f 	bne.w	5942 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x26e>
    5a44:	e6c3      	b.n	57ce <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
    5a46:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
    5a4a:	edc1 7a01 	vstr	s15, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
    5a4e:	ed83 7a00 	vstr	s14, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
    5a52:	edc3 5a01 	vstr	s11, [r3, #4]
    5a56:	e7e5      	b.n	5a24 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x350>
    ya = twiddles[fstride*m];
    5a58:	9a05      	ldr	r2, [sp, #20]
    5a5a:	fb0a f306 	mul.w	r3, sl, r6
    5a5e:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
    5a62:	00f2      	lsls	r2, r6, #3
    5a64:	ed97 2a01 	vldr	s4, [r7, #4]
    5a68:	9203      	str	r2, [sp, #12]
    5a6a:	2218      	movs	r2, #24
    5a6c:	4372      	muls	r2, r6
    5a6e:	edd7 1a00 	vldr	s3, [r7]
    yb = twiddles[fstride*2*m];
    5a72:	9204      	str	r2, [sp, #16]
    5a74:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
    5a78:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
    5a7c:	ed97 1a00 	vldr	s2, [r7]
    5a80:	edd7 2a01 	vldr	s5, [r7, #4]
    for ( u=0; u<m; ++u ) {
    5a84:	ea4f 1b06 	mov.w	fp, r6, lsl #4
    5a88:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
    5a8c:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
    5a90:	eb03 100a 	add.w	r0, r3, sl, lsl #4
    5a94:	0176      	lsls	r6, r6, #5
    5a96:	46ac      	mov	ip, r5
    5a98:	46ae      	mov	lr, r5
    5a9a:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
    5a9c:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    5aa0:	eef1 0a42 	vneg.f32	s1, s4
    for ( u=0; u<m; ++u ) {
    5aa4:	45ca      	cmp	sl, r9
    5aa6:	f104 0408 	add.w	r4, r4, #8
    5aaa:	f107 0708 	add.w	r7, r7, #8
    5aae:	f103 0308 	add.w	r3, r3, #8
    5ab2:	f101 0108 	add.w	r1, r1, #8
    5ab6:	f100 0008 	add.w	r0, r0, #8
    5aba:	f77f ae88 	ble.w	57ce <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    5abe:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
    5ac2:	ed57 3a01 	vldr	s7, [r7, #-4]
    5ac6:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
    5aca:	ed17 6a02 	vldr	s12, [r7, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    5ace:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
    5ad2:	ed13 5a02 	vldr	s10, [r3, #-8]
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    5ad6:	ed11 4a02 	vldr	s8, [r1, #-8]
        scratch[0] = *Fout0;
    5ada:	ed14 7a02 	vldr	s14, [r4, #-8]
    5ade:	ed54 7a01 	vldr	s15, [r4, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    5ae2:	9a03      	ldr	r2, [sp, #12]
    5ae4:	ee26 3ae3 	vnmul.f32	s6, s13, s7
    5ae8:	4415      	add	r5, r2
    5aea:	eea6 3a25 	vfma.f32	s6, s12, s11
    5aee:	9a04      	ldr	r2, [sp, #16]
    5af0:	ee65 5aa3 	vmul.f32	s11, s11, s7
    5af4:	eef0 9a43 	vmov.f32	s19, s6
    5af8:	eee6 5a26 	vfma.f32	s11, s12, s13
    for ( u=0; u<m; ++u ) {
    5afc:	f109 0901 	add.w	r9, r9, #1
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    5b00:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
    5b04:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    5b08:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
    5b0c:	ee25 6ae6 	vnmul.f32	s12, s11, s13
    5b10:	ee64 6aa6 	vmul.f32	s13, s9, s13
    5b14:	eea5 6a24 	vfma.f32	s12, s10, s9
    5b18:	44d8      	add	r8, fp
    5b1a:	eee5 6a25 	vfma.f32	s13, s10, s11
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    5b1e:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
    5b22:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    5b26:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    5b2a:	ed51 6a01 	vldr	s13, [r1, #-4]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
    5b2e:	eef0 8a46 	vmov.f32	s17, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    5b32:	ee25 6ae6 	vnmul.f32	s12, s11, s13
    5b36:	4496      	add	lr, r2
    5b38:	eea4 6a05 	vfma.f32	s12, s8, s10
    5b3c:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    5b40:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    5b44:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    5b48:	ed50 5a01 	vldr	s11, [r0, #-4]
    5b4c:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
    5b50:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    5b54:	ee26 3ae5 	vnmul.f32	s6, s13, s11
    5b58:	ed10 6a02 	vldr	s12, [r0, #-8]
    5b5c:	eea6 3a04 	vfma.f32	s6, s12, s8
    5b60:	44b4      	add	ip, r6
    5b62:	ee64 5a25 	vmul.f32	s11, s8, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
    5b66:	ee39 aa83 	vadd.f32	s20, s19, s6
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
    5b6a:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_SUB( scratch[10],scratch[1],scratch[4]);
    5b6e:	ee39 3ac3 	vsub.f32	s6, s19, s6
        C_ADD( scratch[8],scratch[2],scratch[3]);
    5b72:	ee78 9a80 	vadd.f32	s19, s17, s0
    5b76:	ee34 8a85 	vadd.f32	s16, s9, s10
        C_SUB( scratch[9],scratch[2],scratch[3]);
    5b7a:	ee74 6ac5 	vsub.f32	s13, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
    5b7e:	ee3a 5a29 	vadd.f32	s10, s20, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
    5b82:	ee33 9aa5 	vadd.f32	s18, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
    5b86:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    5b8a:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->r += scratch[7].r + scratch[8].r;
    5b8e:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
    5b92:	ee39 5a08 	vadd.f32	s10, s18, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    5b96:	eee1 4a8a 	vfma.f32	s9, s3, s20
        Fout0->i += scratch[7].i + scratch[8].i;
    5b9a:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
    5b9e:	ee38 6ac0 	vsub.f32	s12, s17, s0
        Fout0->i += scratch[7].i + scratch[8].i;
    5ba2:	ed04 5a01 	vstr	s10, [r4, #-4]
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    5ba6:	eeb0 5a67 	vmov.f32	s10, s15
        C_SUB( scratch[10],scratch[1],scratch[4]);
    5baa:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    5bae:	eea1 5a89 	vfma.f32	s10, s3, s18
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    5bb2:	ee62 3aa6 	vmul.f32	s7, s5, s13
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    5bb6:	eea1 7a0a 	vfma.f32	s14, s2, s20
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    5bba:	eee2 3a25 	vfma.f32	s7, s4, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    5bbe:	eee1 4a29 	vfma.f32	s9, s2, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    5bc2:	ee26 4a62 	vnmul.f32	s8, s12, s5
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    5bc6:	eee1 7a09 	vfma.f32	s15, s2, s18
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    5bca:	ee65 5ae2 	vnmul.f32	s11, s11, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    5bce:	eea1 5a08 	vfma.f32	s10, s2, s16
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    5bd2:	eee2 5a26 	vfma.f32	s11, s4, s13
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    5bd6:	eea0 4a83 	vfma.f32	s8, s1, s6
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    5bda:	eea1 7aa9 	vfma.f32	s14, s3, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    5bde:	ee66 6a42 	vnmul.f32	s13, s12, s4
        C_SUB(*Fout1,scratch[5],scratch[6]);
    5be2:	ee34 0ae3 	vsub.f32	s0, s9, s7
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    5be6:	eee1 7a88 	vfma.f32	s15, s3, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    5bea:	eee2 6a83 	vfma.f32	s13, s5, s6
        C_SUB(*Fout1,scratch[5],scratch[6]);
    5bee:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
    5bf2:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
    5bf6:	ee35 0a44 	vsub.f32	s0, s10, s8
        C_ADD(*Fout4,scratch[5],scratch[6]);
    5bfa:	ee74 4aa3 	vadd.f32	s9, s9, s7
    5bfe:	ee35 5a04 	vadd.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
    5c02:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
    5c06:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
    5c0a:	ed40 4a02 	vstr	s9, [r0, #-8]
    5c0e:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
    5c12:	ed03 6a02 	vstr	s12, [r3, #-8]
    5c16:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
    5c1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
        C_ADD(*Fout2,scratch[11],scratch[12]);
    5c1e:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
    5c22:	ed01 7a02 	vstr	s14, [r1, #-8]
    5c26:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
    5c2a:	e73b      	b.n	5aa4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3d0>
    5c2c:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
    5c30:	682b      	ldr	r3, [r5, #0]
    5c32:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
    5c34:	9b03      	ldr	r3, [sp, #12]
    5c36:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    5c3a:	4658      	mov	r0, fp
    5c3c:	f00b fc16 	bl	1146c <_Z9ei_mallocj>
    5c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    5c44:	9207      	str	r2, [sp, #28]
    5c46:	f04f 0c00 	mov.w	ip, #0
    5c4a:	fb0a f206 	mul.w	r2, sl, r6
    5c4e:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
    5c50:	9206      	str	r2, [sp, #24]
    5c52:	4483      	add	fp, r0
    5c54:	4665      	mov	r5, ip
    5c56:	45aa      	cmp	sl, r5
    5c58:	dd51      	ble.n	5cfe <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x62a>
    5c5a:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
    5c5c:	2200      	movs	r2, #0
    5c5e:	9903      	ldr	r1, [sp, #12]
    5c60:	4291      	cmp	r1, r2
    5c62:	dc38      	bgt.n	5cd6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x602>
    5c64:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
    5c68:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
    5c6a:	f04f 0800 	mov.w	r8, #0
    5c6e:	9903      	ldr	r1, [sp, #12]
    5c70:	4541      	cmp	r1, r8
    5c72:	dd41      	ble.n	5cf8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x624>
            Fout[ k ] = scratch[0];
    5c74:	e893 0003 	ldmia.w	r3, {r0, r1}
    5c78:	e882 0003 	stmia.w	r2, {r0, r1}
            for (q=1;q<p;++q ) {
    5c7c:	f103 0008 	add.w	r0, r3, #8
            int twidx=0;
    5c80:	2100      	movs	r1, #0
            for (q=1;q<p;++q ) {
    5c82:	4558      	cmp	r0, fp
    5c84:	d031      	beq.n	5cea <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x616>
                if (twidx>=Norig) twidx-=Norig;
    5c86:	9f04      	ldr	r7, [sp, #16]
                C_MUL(t,scratch[q] , twiddles[twidx] );
    5c88:	ed90 5a01 	vldr	s10, [r0, #4]
    5c8c:	edd0 5a00 	vldr	s11, [r0]
                twidx += fstride * k;
    5c90:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
    5c92:	428f      	cmp	r7, r1
    5c94:	bfd8      	it	le
    5c96:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
    5c98:	9f05      	ldr	r7, [sp, #20]
    5c9a:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    5c9e:	ed99 6a01 	vldr	s12, [r9, #4]
    5ca2:	edd9 7a00 	vldr	s15, [r9]
    5ca6:	ee26 7a45 	vnmul.f32	s14, s12, s10
    5caa:	3008      	adds	r0, #8
    5cac:	eea5 7aa7 	vfma.f32	s14, s11, s15
    5cb0:	ee67 7a85 	vmul.f32	s15, s15, s10
    5cb4:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
    5cb8:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
    5cbc:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
    5cc0:	ee37 7a26 	vadd.f32	s14, s14, s13
    5cc4:	ed82 7a00 	vstr	s14, [r2]
    5cc8:	ed92 7a01 	vldr	s14, [r2, #4]
    5ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
    5cd0:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
    5cd4:	e7d5      	b.n	5c82 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5ae>
            scratch[q1] = Fout[ k  ];
    5cd6:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    5cda:	c903      	ldmia	r1, {r0, r1}
    5cdc:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
    5ce0:	e888 0003 	stmia.w	r8, {r0, r1}
            k += m;
    5ce4:	44d6      	add	lr, sl
        for ( q1=0 ; q1<p ; ++q1 ) {
    5ce6:	3201      	adds	r2, #1
    5ce8:	e7b9      	b.n	5c5e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x58a>
        for ( q1=0 ; q1<p ; ++q1 ) {
    5cea:	9907      	ldr	r1, [sp, #28]
    5cec:	440a      	add	r2, r1
    5cee:	9906      	ldr	r1, [sp, #24]
    5cf0:	f108 0801 	add.w	r8, r8, #1
    5cf4:	448e      	add	lr, r1
    5cf6:	e7ba      	b.n	5c6e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x59a>
    for ( u=0; u<m; ++u ) {
    5cf8:	3501      	adds	r5, #1
    5cfa:	44b4      	add	ip, r6
    5cfc:	e7ab      	b.n	5c56 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x582>
    KISS_FFT_TMP_FREE(scratch);
    5cfe:	4618      	mov	r0, r3
}
    5d00:	b009      	add	sp, #36	; 0x24
    5d02:	ecbd 8b08 	vpop	{d8-d11}
    5d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
    5d0a:	f00b bbb3 	b.w	11474 <_Z7ei_freePv>
    5d0e:	bf00      	nop

00005d10 <kiss_fftr>:
{
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
    5d10:	6803      	ldr	r3, [r0, #0]
    5d12:	685b      	ldr	r3, [r3, #4]
{
    5d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5d16:	4606      	mov	r6, r0
    5d18:	4614      	mov	r4, r2
    if ( st->substate->inverse) {
    5d1a:	b123      	cbz	r3, 5d26 <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
    5d1c:	4833      	ldr	r0, [pc, #204]	; (5dec <kiss_fftr+0xdc>)
    5d1e:	9101      	str	r1, [sp, #4]
    5d20:	f000 f866 	bl	5df0 <_Z9ei_printfPKcz>
    5d24:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
    5d26:	6830      	ldr	r0, [r6, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
    5d28:	6872      	ldr	r2, [r6, #4]
    ncfft = st->substate->nfft;
    5d2a:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
    5d2c:	f00b fb87 	bl	1143e <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
    5d30:	6873      	ldr	r3, [r6, #4]
    5d32:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
    5d36:	ed93 7a01 	vldr	s14, [r3, #4]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
    5d3a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
    5d3e:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
    5d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
    5d46:	2100      	movs	r1, #0
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
    5d48:	eb05 7cd5 	add.w	ip, r5, r5, lsr #31
    freqdata[0].r = tdc.r + tdc.i;
    5d4c:	edc4 6a00 	vstr	s13, [r4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    5d50:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    freqdata[ncfft].r = tdc.r - tdc.i;
    5d54:	edc2 7a00 	vstr	s15, [r2]
    freqdata[ncfft].i = freqdata[0].i = 0;
    5d58:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    5d5c:	6061      	str	r1, [r4, #4]

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    5d5e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    freqdata[ncfft].i = freqdata[0].i = 0;
    5d62:	6051      	str	r1, [r2, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    5d64:	2101      	movs	r1, #1
    5d66:	458c      	cmp	ip, r1
    5d68:	db3e      	blt.n	5de8 <kiss_fftr+0xd8>
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    5d6a:	00c8      	lsls	r0, r1, #3
    5d6c:	f1a0 0708 	sub.w	r7, r0, #8
    5d70:	68b0      	ldr	r0, [r6, #8]
        fpk    = st->tmpbuf[k];
    5d72:	edd3 5a03 	vldr	s11, [r3, #12]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
    5d76:	ed55 4a02 	vldr	s9, [r5, #-8]
        fpk    = st->tmpbuf[k];
    5d7a:	edd3 6a02 	vldr	s13, [r3, #8]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
    5d7e:	ed55 7a01 	vldr	s15, [r5, #-4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    5d82:	4438      	add	r0, r7
        C_ADD( f1k, fpk , fpnk );
    5d84:	ee34 7aa6 	vadd.f32	s14, s9, s13
    5d88:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
    5d8c:	ee76 6ae4 	vsub.f32	s13, s13, s9
    5d90:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    5d94:	edd0 4a01 	vldr	s9, [r0, #4]
    5d98:	ed90 4a00 	vldr	s8, [r0]
    5d9c:	ee64 5ae7 	vnmul.f32	s11, s9, s15
    5da0:	ee67 7a84 	vmul.f32	s15, s15, s8
    5da4:	eee6 5a84 	vfma.f32	s11, s13, s8
    for ( k=1;k <= ncfft/2 ; ++k ) {
    5da8:	3101      	adds	r1, #1
    5daa:	3308      	adds	r3, #8
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
    5dac:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    5db0:	3d08      	subs	r5, #8
    5db2:	3408      	adds	r4, #8
    5db4:	ee77 6a25 	vadd.f32	s13, s14, s11
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    5db8:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    5dbc:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    5dc0:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
    5dc4:	edc4 6a00 	vstr	s13, [r4]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    5dc8:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    5dcc:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    5dd0:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    5dd4:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
    5dd8:	edc4 6a01 	vstr	s13, [r4, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
    5ddc:	3a08      	subs	r2, #8
    5dde:	ed82 7a00 	vstr	s14, [r2]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
    5de2:	edc2 7a01 	vstr	s15, [r2, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
    5de6:	e7be      	b.n	5d66 <kiss_fftr+0x56>
    }
}
    5de8:	b003      	add	sp, #12
    5dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5dec:	00044e41 	.word	0x00044e41

00005df0 <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
    5df0:	b40f      	push	{r0, r1, r2, r3}
    5df2:	b507      	push	{r0, r1, r2, lr}
    5df4:	ab04      	add	r3, sp, #16
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
    5df6:	4809      	ldr	r0, [pc, #36]	; (5e1c <_Z9ei_printfPKcz+0x2c>)
__attribute__((weak)) void ei_printf(const char *format, ...) {
    5df8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
    5dfc:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
    5dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
    5e02:	f00a f9ef 	bl	101e4 <vsniprintf>
    va_end(args);

    if (r > 0) {
    5e06:	2800      	cmp	r0, #0
    5e08:	dd03      	ble.n	5e12 <_Z9ei_printfPKcz+0x22>
        printf("%s", print_buf);
    5e0a:	4904      	ldr	r1, [pc, #16]	; (5e1c <_Z9ei_printfPKcz+0x2c>)
    5e0c:	4804      	ldr	r0, [pc, #16]	; (5e20 <_Z9ei_printfPKcz+0x30>)
    5e0e:	f00a f8e1 	bl	ffd4 <iprintf>
    }
}
    5e12:	b003      	add	sp, #12
    5e14:	f85d eb04 	ldr.w	lr, [sp], #4
    5e18:	b004      	add	sp, #16
    5e1a:	4770      	bx	lr
    5e1c:	20001a78 	.word	0x20001a78
    5e20:	00044e67 	.word	0x00044e67

00005e24 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
    5e24:	b510      	push	{r4, lr}
    5e26:	ee10 0a10 	vmov	r0, s0
    printf("%f", f);
    5e2a:	f7fa fb1d 	bl	468 <__aeabi_f2d>
}
    5e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("%f", f);
    5e32:	4602      	mov	r2, r0
    5e34:	460b      	mov	r3, r1
    5e36:	4801      	ldr	r0, [pc, #4]	; (5e3c <_Z15ei_printf_floatf+0x18>)
    5e38:	f00a b8cc 	b.w	ffd4 <iprintf>
    5e3c:	00044e6a 	.word	0x00044e6a

00005e40 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    5e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
    5e42:	2200      	movs	r2, #0
                        int* shift) {
    5e44:	4606      	mov	r6, r0
    5e46:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
    5e48:	2300      	movs	r3, #0
    5e4a:	ec51 0b10 	vmov	r0, r1, d0
    5e4e:	ed8d 0b00 	vstr	d0, [sp]
    5e52:	f7fa fdc9 	bl	9e8 <__aeabi_dcmpeq>
    5e56:	ed9d 0b00 	vldr	d0, [sp]
    5e5a:	4605      	mov	r5, r0
    5e5c:	b120      	cbz	r0, 5e68 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x28>
    *quantized_multiplier = 0;
    5e5e:	2300      	movs	r3, #0
    5e60:	6033      	str	r3, [r6, #0]
    *shift = 0;
    5e62:	6023      	str	r3, [r4, #0]
}
    5e64:	b002      	add	sp, #8
    5e66:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
    5e68:	4620      	mov	r0, r4
    5e6a:	f008 fe95 	bl	eb98 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    5e6e:	4b14      	ldr	r3, [pc, #80]	; (5ec0 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x80>)
    5e70:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
    5e72:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    5e76:	f7fa fb4f 	bl	518 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    5e7a:	ec41 0b10 	vmov	d0, r0, r1
    5e7e:	f008 fec3 	bl	ec08 <round>
    5e82:	ec51 0b10 	vmov	r0, r1, d0
    5e86:	f7fa ff17 	bl	cb8 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    5e8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5e8e:	4282      	cmp	r2, r0
    5e90:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    5e94:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    5e96:	da01      	bge.n	5e9c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x5c>
    5e98:	f00f fd60 	bl	1595c <abort>
  if (q_fixed == (1ll << 31)) {
    5e9c:	42a9      	cmp	r1, r5
    5e9e:	bf08      	it	eq
    5ea0:	4290      	cmpeq	r0, r2
    ++*shift;
    5ea2:	bf02      	ittt	eq
    5ea4:	6823      	ldreq	r3, [r4, #0]
    5ea6:	3301      	addeq	r3, #1
    5ea8:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
    5eaa:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
    5eac:	bf08      	it	eq
    5eae:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
    5eb2:	321f      	adds	r2, #31
    *shift = 0;
    5eb4:	bfbc      	itt	lt
    5eb6:	2300      	movlt	r3, #0
    5eb8:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    5eba:	6033      	str	r3, [r6, #0]
    5ebc:	e7d2      	b.n	5e64 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x24>
    5ebe:	bf00      	nop
    5ec0:	41e00000 	.word	0x41e00000

00005ec4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    5ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    5ec6:	4b0c      	ldr	r3, [pc, #48]	; (5ef8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x34>)
                                      int* left_shift) {
    5ec8:	4605      	mov	r5, r0
    5eca:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
    5ecc:	2200      	movs	r2, #0
    5ece:	ec51 0b10 	vmov	r0, r1, d0
    5ed2:	ed8d 0b00 	vstr	d0, [sp]
    5ed6:	f7fa fdaf 	bl	a38 <__aeabi_dcmpgt>
    5eda:	ed9d 0b00 	vldr	d0, [sp]
    5ede:	b908      	cbnz	r0, 5ee4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x20>
    5ee0:	f00f fd3c 	bl	1595c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    5ee4:	4621      	mov	r1, r4
    5ee6:	4628      	mov	r0, r5
    5ee8:	f7ff ffaa 	bl	5e40 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    5eec:	6823      	ldr	r3, [r4, #0]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	dbf6      	blt.n	5ee0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x1c>
}
    5ef2:	b003      	add	sp, #12
    5ef4:	bd30      	pop	{r4, r5, pc}
    5ef6:	bf00      	nop
    5ef8:	3ff00000 	.word	0x3ff00000

00005efc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
    5efc:	edd1 7a03 	vldr	s15, [r1, #12]
    5f00:	ed92 7a03 	vldr	s14, [r2, #12]
    5f04:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
    5f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    5f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
    5f12:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    5f14:	da0a      	bge.n	5f2c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
    5f16:	4b0f      	ldr	r3, [pc, #60]	; (5f54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
    5f18:	9300      	str	r3, [sp, #0]
    5f1a:	6944      	ldr	r4, [r0, #20]
    5f1c:	4a0e      	ldr	r2, [pc, #56]	; (5f58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
    5f1e:	490f      	ldr	r1, [pc, #60]	; (5f5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    5f20:	f240 1351 	movw	r3, #337	; 0x151
    5f24:	47a0      	blx	r4
    5f26:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
    5f28:	b002      	add	sp, #8
    5f2a:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
    5f2c:	ee17 0a90 	vmov	r0, s15
    5f30:	f7fa fa9a 	bl	468 <__aeabi_f2d>
    5f34:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    5f36:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
    5f38:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    5f3a:	f7fa fa95 	bl	468 <__aeabi_f2d>
    5f3e:	460b      	mov	r3, r1
    5f40:	4602      	mov	r2, r0
    5f42:	4629      	mov	r1, r5
    5f44:	4620      	mov	r0, r4
    5f46:	f7fa fc11 	bl	76c <__aeabi_ddiv>
    5f4a:	9b06      	ldr	r3, [sp, #24]
    5f4c:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    5f50:	2000      	movs	r0, #0
    5f52:	e7e9      	b.n	5f28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
    5f54:	00044ec4 	.word	0x00044ec4
    5f58:	00044e6d 	.word	0x00044e6d
    5f5c:	00044ead 	.word	0x00044ead

00005f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    5f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f62:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    5f64:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
    5f66:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
    5f68:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
    5f6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
    5f6c:	d00e      	beq.n	5f8c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    5f6e:	2b09      	cmp	r3, #9
    5f70:	d01f      	beq.n	5fb2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x52>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    5f72:	2b07      	cmp	r3, #7
    5f74:	d021      	beq.n	5fba <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    5f76:	4b26      	ldr	r3, [pc, #152]	; (6010 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
    5f78:	9300      	str	r3, [sp, #0]
    5f7a:	6944      	ldr	r4, [r0, #20]
    5f7c:	4a25      	ldr	r2, [pc, #148]	; (6014 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
    5f7e:	4926      	ldr	r1, [pc, #152]	; (6018 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>)
    5f80:	f44f 73c2 	mov.w	r3, #388	; 0x184
    5f84:	47a0      	blx	r4
    5f86:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
    5f88:	b005      	add	sp, #20
    5f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
    5f8c:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    5f8e:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
    5f90:	6913      	ldr	r3, [r2, #16]
  };
    5f92:	68d2      	ldr	r2, [r2, #12]
    5f94:	9202      	str	r2, [sp, #8]
  if (activation == kTfLiteActRelu) {
    5f96:	2901      	cmp	r1, #1
  };
    5f98:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
    5f9a:	d112      	bne.n	5fc2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x62>
    *act_min = std::max(qmin, quantize(0.0));
    5f9c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 601c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>
    5fa0:	a802      	add	r0, sp, #8
    5fa2:	f00b faaa 	bl	114fa <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    5fa6:	4286      	cmp	r6, r0
    5fa8:	bfac      	ite	ge
    5faa:	602e      	strge	r6, [r5, #0]
    5fac:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
    5fae:	603c      	str	r4, [r7, #0]
    5fb0:	e01b      	b.n	5fea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8a>
    qmax = std::numeric_limits<int8_t>::max();
    5fb2:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    5fb4:	f06f 067f 	mvn.w	r6, #127	; 0x7f
    5fb8:	e7ea      	b.n	5f90 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int16_t>::min();
    5fba:	4e19      	ldr	r6, [pc, #100]	; (6020 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xc0>)
    qmax = std::numeric_limits<int16_t>::max();
    5fbc:	f647 74ff 	movw	r4, #32767	; 0x7fff
    5fc0:	e7e6      	b.n	5f90 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
  } else if (activation == kTfLiteActRelu6) {
    5fc2:	2903      	cmp	r1, #3
    5fc4:	d113      	bne.n	5fee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8e>
    *act_min = std::max(qmin, quantize(0.0));
    5fc6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 601c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>
    5fca:	a802      	add	r0, sp, #8
    5fcc:	f00b fa95 	bl	114fa <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
    5fd0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
    5fd4:	4286      	cmp	r6, r0
    5fd6:	bfac      	ite	ge
    5fd8:	602e      	strge	r6, [r5, #0]
    5fda:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
    5fdc:	a802      	add	r0, sp, #8
    5fde:	f00b fa8c 	bl	114fa <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    5fe2:	4284      	cmp	r4, r0
    5fe4:	bfd4      	ite	le
    5fe6:	603c      	strle	r4, [r7, #0]
    5fe8:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
    5fea:	2000      	movs	r0, #0
    5fec:	e7cc      	b.n	5f88 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x28>
  } else if (activation == kTfLiteActReluN1To1) {
    5fee:	2902      	cmp	r1, #2
    5ff0:	d10b      	bne.n	600a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xaa>
    *act_min = std::max(qmin, quantize(-1.0));
    5ff2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    5ff6:	a802      	add	r0, sp, #8
    5ff8:	f00b fa7f 	bl	114fa <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
    5ffc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
    6000:	4286      	cmp	r6, r0
    6002:	bfac      	ite	ge
    6004:	602e      	strge	r6, [r5, #0]
    6006:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
    6008:	e7e8      	b.n	5fdc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7c>
    *act_min = qmin;
    600a:	602e      	str	r6, [r5, #0]
    600c:	e7cf      	b.n	5fae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4e>
    600e:	bf00      	nop
    6010:	00044eff 	.word	0x00044eff
    6014:	00044e6d 	.word	0x00044e6d
    6018:	00044ead 	.word	0x00044ead
    601c:	00000000 	.word	0x00000000
    6020:	ffff8000 	.word	0xffff8000

00006024 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    6024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6028:	ed2d 8b06 	vpush	{d8-d10}
    602c:	b093      	sub	sp, #76	; 0x4c
    602e:	ee09 3a10 	vmov	s18, r3
    6032:	9b22      	ldr	r3, [sp, #136]	; 0x88
    6034:	9306      	str	r3, [sp, #24]
    6036:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    6038:	9308      	str	r3, [sp, #32]
    603a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    603c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    6040:	ee09 3a90 	vmov	s19, r3
    6044:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6046:	9309      	str	r3, [sp, #36]	; 0x24
    6048:	9b26      	ldr	r3, [sp, #152]	; 0x98
    604a:	ee0a 3a10 	vmov	s20, r3
    604e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6050:	930a      	str	r3, [sp, #40]	; 0x28
    6052:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    6054:	930b      	str	r3, [sp, #44]	; 0x2c
    6056:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    6058:	930c      	str	r3, [sp, #48]	; 0x30
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    605a:	2d01      	cmp	r5, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
    605c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    605e:	9307      	str	r3, [sp, #28]
    6060:	4604      	mov	r4, r0
    6062:	468b      	mov	fp, r1
    6064:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    6066:	d011      	beq.n	608c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x68>
    6068:	2601      	movs	r6, #1
    606a:	4b77      	ldr	r3, [pc, #476]	; (6248 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    606c:	9301      	str	r3, [sp, #4]
    606e:	e9cd 5602 	strd	r5, r6, [sp, #8]
    6072:	4b76      	ldr	r3, [pc, #472]	; (624c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    6074:	9300      	str	r3, [sp, #0]
    6076:	6944      	ldr	r4, [r0, #20]
    6078:	4a75      	ldr	r2, [pc, #468]	; (6250 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    607a:	4976      	ldr	r1, [pc, #472]	; (6254 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    607c:	23e0      	movs	r3, #224	; 0xe0
    607e:	47a0      	blx	r4
}
    6080:	4630      	mov	r0, r6
    6082:	b013      	add	sp, #76	; 0x4c
    6084:	ecbd 8b06 	vpop	{d8-d10}
    6088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    608c:	f892 6030 	ldrb.w	r6, [r2, #48]	; 0x30
    6090:	2e01      	cmp	r6, #1
    6092:	d00c      	beq.n	60ae <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x8a>
    6094:	e9cd 6502 	strd	r6, r5, [sp, #8]
    6098:	4b6b      	ldr	r3, [pc, #428]	; (6248 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    609a:	9301      	str	r3, [sp, #4]
    609c:	4b6e      	ldr	r3, [pc, #440]	; (6258 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x234>)
    609e:	9300      	str	r3, [sp, #0]
    60a0:	6944      	ldr	r4, [r0, #20]
    60a2:	4a6b      	ldr	r2, [pc, #428]	; (6250 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    60a4:	496b      	ldr	r1, [pc, #428]	; (6254 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    60a6:	23e2      	movs	r3, #226	; 0xe2
    60a8:	47a0      	blx	r4
    60aa:	462e      	mov	r6, r5
    60ac:	e7e8      	b.n	6080 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
  const auto* affine_quantization =
    60ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    60b0:	b93a      	cbnz	r2, 60c2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x9e>
    60b2:	4b6a      	ldr	r3, [pc, #424]	; (625c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x238>)
    60b4:	9300      	str	r3, [sp, #0]
    60b6:	6944      	ldr	r4, [r0, #20]
    60b8:	23ed      	movs	r3, #237	; 0xed
  TF_LITE_ENSURE(context, affine_quantization->scale);
    60ba:	4a65      	ldr	r2, [pc, #404]	; (6250 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    60bc:	4968      	ldr	r1, [pc, #416]	; (6260 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    60be:	47a0      	blx	r4
    60c0:	e7de      	b.n	6080 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
    60c2:	6817      	ldr	r7, [r2, #0]
    60c4:	b927      	cbnz	r7, 60d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xac>
    60c6:	4b67      	ldr	r3, [pc, #412]	; (6264 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x240>)
    60c8:	9300      	str	r3, [sp, #0]
    60ca:	6944      	ldr	r4, [r0, #20]
    60cc:	23ee      	movs	r3, #238	; 0xee
    60ce:	e7f4      	b.n	60ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x96>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    60d0:	683d      	ldr	r5, [r7, #0]
  if (is_per_channel) {
    60d2:	2d01      	cmp	r5, #1
    60d4:	dd38      	ble.n	6148 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x124>
    TF_LITE_ENSURE(context,
    60d6:	780b      	ldrb	r3, [r1, #0]
    60d8:	2b09      	cmp	r3, #9
    60da:	d006      	beq.n	60ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc6>
    60dc:	2b07      	cmp	r3, #7
    60de:	d004      	beq.n	60ea <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc6>
    60e0:	4b61      	ldr	r3, [pc, #388]	; (6268 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x244>)
    60e2:	9300      	str	r3, [sp, #0]
    60e4:	6944      	ldr	r4, [r0, #20]
    60e6:	23f2      	movs	r3, #242	; 0xf2
    60e8:	e7e7      	b.n	60ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x96>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    60ea:	f89a 3000 	ldrb.w	r3, [sl]
    60ee:	2b09      	cmp	r3, #9
    60f0:	d00d      	beq.n	610e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xea>
    60f2:	2209      	movs	r2, #9
    60f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    60f8:	4b5c      	ldr	r3, [pc, #368]	; (626c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x248>)
    60fa:	9301      	str	r3, [sp, #4]
    60fc:	4b5c      	ldr	r3, [pc, #368]	; (6270 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x24c>)
    60fe:	9300      	str	r3, [sp, #0]
    6100:	6965      	ldr	r5, [r4, #20]
    6102:	23f4      	movs	r3, #244	; 0xf4
    TF_LITE_ENSURE_EQ(
    6104:	4a52      	ldr	r2, [pc, #328]	; (6250 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    6106:	4953      	ldr	r1, [pc, #332]	; (6254 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    6108:	4620      	mov	r0, r4
    610a:	47a8      	blx	r5
    610c:	e7b8      	b.n	6080 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    610e:	9b07      	ldr	r3, [sp, #28]
    6110:	429d      	cmp	r5, r3
    6112:	d008      	beq.n	6126 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x102>
    6114:	e9cd 5302 	strd	r5, r3, [sp, #8]
    6118:	4b56      	ldr	r3, [pc, #344]	; (6274 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x250>)
    611a:	9301      	str	r3, [sp, #4]
    611c:	4b56      	ldr	r3, [pc, #344]	; (6278 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x254>)
    611e:	9300      	str	r3, [sp, #0]
    6120:	6965      	ldr	r5, [r4, #20]
    6122:	23f5      	movs	r3, #245	; 0xf5
    6124:	e7ee      	b.n	6104 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe0>
    TF_LITE_ENSURE_EQ(
    6126:	f8da 3008 	ldr.w	r3, [sl, #8]
    612a:	6892      	ldr	r2, [r2, #8]
    612c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6130:	685b      	ldr	r3, [r3, #4]
    6132:	42ab      	cmp	r3, r5
    6134:	d008      	beq.n	6148 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x124>
    6136:	e9cd 5302 	strd	r5, r3, [sp, #8]
    613a:	4b50      	ldr	r3, [pc, #320]	; (627c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x258>)
    613c:	9301      	str	r3, [sp, #4]
    613e:	4b4d      	ldr	r3, [pc, #308]	; (6274 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x250>)
    6140:	9300      	str	r3, [sp, #0]
    6142:	6965      	ldr	r5, [r4, #20]
    6144:	23f6      	movs	r3, #246	; 0xf6
    6146:	e7dd      	b.n	6104 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe0>
  const float input_scale = input->params.scale;
    6148:	eddb 7a03 	vldr	s15, [fp, #12]
  const float output_scale = output->params.scale;
    614c:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
    614e:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
    6152:	edd3 7a03 	vldr	s15, [r3, #12]
    6156:	1d3b      	adds	r3, r7, #4
    6158:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
    615c:	9305      	str	r3, [sp, #20]
    615e:	2600      	movs	r6, #0
    6160:	9b07      	ldr	r3, [sp, #28]
    6162:	429e      	cmp	r6, r3
    6164:	da34      	bge.n	61d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ac>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    6166:	2d01      	cmp	r5, #1
    6168:	bfca      	itet	gt
    616a:	9b05      	ldrgt	r3, [sp, #20]
    616c:	687b      	ldrle	r3, [r7, #4]
    616e:	681b      	ldrgt	r3, [r3, #0]
    6170:	930d      	str	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
    6172:	ee18 0a10 	vmov	r0, s16
    6176:	f7fa f977 	bl	468 <__aeabi_f2d>
    const double filter_scale = static_cast<double>(scale);
    617a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
    617c:	4680      	mov	r8, r0
    const double filter_scale = static_cast<double>(scale);
    617e:	4618      	mov	r0, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
    6180:	4689      	mov	r9, r1
    const double filter_scale = static_cast<double>(scale);
    6182:	f7fa f971 	bl	468 <__aeabi_f2d>
    6186:	4602      	mov	r2, r0
    6188:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    618a:	4640      	mov	r0, r8
    618c:	4649      	mov	r1, r9
    618e:	f7fa f9c3 	bl	518 <__aeabi_dmul>
    6192:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
    6194:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
    6198:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
    619a:	f7fa f965 	bl	468 <__aeabi_f2d>
    619e:	4602      	mov	r2, r0
    61a0:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    61a2:	4640      	mov	r0, r8
    61a4:	4649      	mov	r1, r9
    61a6:	f7fa fae1 	bl	76c <__aeabi_ddiv>
    61aa:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    61ae:	a910      	add	r1, sp, #64	; 0x40
    61b0:	a80f      	add	r0, sp, #60	; 0x3c
    61b2:	f7ff fe45 	bl	5e40 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    61b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    61b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    61ba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
    61be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    61c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    61c2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    61c6:	9b05      	ldr	r3, [sp, #20]
    61c8:	3304      	adds	r3, #4
    61ca:	3601      	adds	r6, #1
    61cc:	9305      	str	r3, [sp, #20]
    61ce:	e7c7      	b.n	6160 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x13c>
  if (input->type == kTfLiteUInt8) {
    61d0:	f89b 3000 	ldrb.w	r3, [fp]
    61d4:	2b03      	cmp	r3, #3
    61d6:	d11d      	bne.n	6214 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f0>
    double real_multiplier = 0.0;
    61d8:	2200      	movs	r2, #0
    61da:	2300      	movs	r3, #0
    61dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    61e0:	ab10      	add	r3, sp, #64	; 0x40
    61e2:	9301      	str	r3, [sp, #4]
    61e4:	9b06      	ldr	r3, [sp, #24]
    61e6:	9300      	str	r3, [sp, #0]
    61e8:	4652      	mov	r2, sl
    61ea:	ee19 3a10 	vmov	r3, s18
    61ee:	4659      	mov	r1, fp
    61f0:	4620      	mov	r0, r4
    61f2:	f7fb f8bd 	bl	1370 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    61f6:	4606      	mov	r6, r0
    61f8:	2800      	cmp	r0, #0
    61fa:	f47f af41 	bne.w	6080 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    61fe:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
    6202:	ee19 0a90 	vmov	r0, s19
    6206:	a90f      	add	r1, sp, #60	; 0x3c
    6208:	f7ff fe1a 	bl	5e40 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    620c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    620e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6210:	425b      	negs	r3, r3
    6212:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    6214:	f89b 3000 	ldrb.w	r3, [fp]
    6218:	2b09      	cmp	r3, #9
    621a:	d003      	beq.n	6224 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>
    621c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    6220:	2b03      	cmp	r3, #3
    6222:	d10e      	bne.n	6242 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    6224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6226:	9908      	ldr	r1, [sp, #32]
    6228:	9322      	str	r3, [sp, #136]	; 0x88
    622a:	9a06      	ldr	r2, [sp, #24]
    622c:	7809      	ldrb	r1, [r1, #0]
    622e:	ee1a 3a10 	vmov	r3, s20
    6232:	4620      	mov	r0, r4
}
    6234:	b013      	add	sp, #76	; 0x4c
    6236:	ecbd 8b06 	vpop	{d8-d10}
    623a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    623e:	f7ff be8f 	b.w	5f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  return kTfLiteOk;
    6242:	2600      	movs	r6, #0
    6244:	e71c      	b.n	6080 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5c>
    6246:	bf00      	nop
    6248:	00044f1f 	.word	0x00044f1f
    624c:	00044f39 	.word	0x00044f39
    6250:	00044e6d 	.word	0x00044e6d
    6254:	00044f05 	.word	0x00044f05
    6258:	00044f52 	.word	0x00044f52
    625c:	00044f6c 	.word	0x00044f6c
    6260:	00044ead 	.word	0x00044ead
    6264:	00044f80 	.word	0x00044f80
    6268:	00044f9b 	.word	0x00044f9b
    626c:	00044fd5 	.word	0x00044fd5
    6270:	00044fe1 	.word	0x00044fe1
    6274:	00044fee 	.word	0x00044fee
    6278:	00044ffb 	.word	0x00044ffb
    627c:	0004501c 	.word	0x0004501c

00006280 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    6280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6284:	b0a1      	sub	sp, #132	; 0x84
    6286:	4698      	mov	r8, r3
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    6288:	6943      	ldr	r3, [r0, #20]
    628a:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
    628c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    6290:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    6292:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    6296:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    6298:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    629c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    629e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    62a2:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    62a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    62a8:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    62aa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    62ae:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
    62b0:	69c3      	ldr	r3, [r0, #28]
    62b2:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    62b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    62b6:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
    62b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    62ba:	930b      	str	r3, [sp, #44]	; 0x2c
    int8_t* output_data) {
    62bc:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    62c0:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    62c4:	4293      	cmp	r3, r2
    int8_t* output_data) {
    62c6:	9e2b      	ldr	r6, [sp, #172]	; 0xac
    62c8:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    62ca:	dd01      	ble.n	62d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
    62cc:	f00f fb46 	bl	1595c <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    62d0:	f8d8 3000 	ldr.w	r3, [r8]
    62d4:	2b04      	cmp	r3, #4
    62d6:	d1f9      	bne.n	62cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    62d8:	6833      	ldr	r3, [r6, #0]
    62da:	2b04      	cmp	r3, #4
    62dc:	d1f6      	bne.n	62cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    62de:	683b      	ldr	r3, [r7, #0]
    62e0:	2b04      	cmp	r3, #4
    62e2:	d1f3      	bne.n	62cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    62e4:	2300      	movs	r3, #0
    62e6:	4619      	mov	r1, r3
    62e8:	463a      	mov	r2, r7
    62ea:	4640      	mov	r0, r8
    62ec:	f00b f9e4 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    62f0:	2303      	movs	r3, #3
    62f2:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    62f4:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    62f6:	4632      	mov	r2, r6
    62f8:	4640      	mov	r0, r8
    62fa:	f00b f9dd 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    62fe:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    6300:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    6302:	463a      	mov	r2, r7
    6304:	2100      	movs	r1, #0
    6306:	4630      	mov	r0, r6
    6308:	f00b f9d6 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    630c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    630e:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
    6310:	b12b      	cbz	r3, 631e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    6312:	982d      	ldr	r0, [sp, #180]	; 0xb4
    6314:	f00b f995 	bl	11642 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    6318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    631a:	4298      	cmp	r0, r3
    631c:	d1d6      	bne.n	62cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
    631e:	2101      	movs	r1, #1
    6320:	4640      	mov	r0, r8
    6322:	f00b f93f 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    6326:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    6328:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
    632a:	4640      	mov	r0, r8
    632c:	f00b f93a 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    6330:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    6332:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
    6334:	4630      	mov	r0, r6
    6336:	f00b f935 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    633a:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    633c:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
    633e:	4630      	mov	r0, r6
    6340:	f00b f930 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    6344:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    6346:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
    6348:	4638      	mov	r0, r7
    634a:	f00b f92b 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    634e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    6350:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
    6352:	4638      	mov	r0, r7
    6354:	f00b f926 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
    6358:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
    635c:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
    635e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6360:	459b      	cmp	fp, r3
    6362:	f280 80d3 	bge.w	650c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28c>
    6366:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6368:	425b      	negs	r3, r3
    636a:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
    636c:	2300      	movs	r3, #0
    636e:	9304      	str	r3, [sp, #16]
    6370:	9b04      	ldr	r3, [sp, #16]
    6372:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6374:	4293      	cmp	r3, r2
    6376:	f280 80c6 	bge.w	6506 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
    637a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    637c:	425b      	negs	r3, r3
    637e:	9308      	str	r3, [sp, #32]
    6380:	2300      	movs	r3, #0
    6382:	9305      	str	r3, [sp, #20]
    6384:	9b05      	ldr	r3, [sp, #20]
    6386:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    6388:	4293      	cmp	r3, r2
    638a:	f280 80b4 	bge.w	64f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x276>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    638e:	2500      	movs	r5, #0
    6390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6392:	429d      	cmp	r5, r3
    6394:	f280 80a7 	bge.w	64e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x266>
          int32_t acc = 0;
    6398:	2400      	movs	r4, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    639a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    639e:	9406      	str	r4, [sp, #24]
    63a0:	9b06      	ldr	r3, [sp, #24]
    63a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    63a4:	4293      	cmp	r3, r2
    63a6:	da41      	bge.n	642c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    63a8:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    63aa:	f8dd a020 	ldr.w	sl, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    63ae:	9307      	str	r3, [sp, #28]
    63b0:	9b07      	ldr	r3, [sp, #28]
    63b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    63b4:	4293      	cmp	r3, r2
    63b6:	da33      	bge.n	6420 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    63b8:	f1ba 0f00 	cmp.w	sl, #0
    63bc:	db2a      	blt.n	6414 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    63be:	9b19      	ldr	r3, [sp, #100]	; 0x64
    63c0:	4553      	cmp	r3, sl
    63c2:	dd27      	ble.n	6414 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    63c4:	f1b9 0f00 	cmp.w	r9, #0
    63c8:	db24      	blt.n	6414 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    63ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
    63cc:	454b      	cmp	r3, r9
    63ce:	dd21      	ble.n	6414 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
    63d0:	2300      	movs	r3, #0
    63d2:	9303      	str	r3, [sp, #12]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    63d4:	9b03      	ldr	r3, [sp, #12]
    63d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    63d8:	4293      	cmp	r3, r2
    63da:	da1b      	bge.n	6414 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    63dc:	9300      	str	r3, [sp, #0]
    63de:	464a      	mov	r2, r9
    63e0:	4653      	mov	r3, sl
    63e2:	4659      	mov	r1, fp
    63e4:	4640      	mov	r0, r8
    63e6:	f00b f93c 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
    63ea:	9b03      	ldr	r3, [sp, #12]
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
    63ec:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
    63ee:	9300      	str	r3, [sp, #0]
    63f0:	4629      	mov	r1, r5
    63f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    63f6:	4630      	mov	r0, r6
    63f8:	f00b f933 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
    63fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    63fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    6400:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
    6402:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6404:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    6406:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    6408:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
    640a:	fb02 4403 	mla	r4, r2, r3, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    640e:	9b03      	ldr	r3, [sp, #12]
    6410:	3301      	adds	r3, #1
    6412:	e7de      	b.n	63d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    6414:	9b07      	ldr	r3, [sp, #28]
    6416:	3301      	adds	r3, #1
    6418:	9307      	str	r3, [sp, #28]
    641a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    641c:	449a      	add	sl, r3
    641e:	e7c7      	b.n	63b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x130>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    6420:	9b06      	ldr	r3, [sp, #24]
    6422:	3301      	adds	r3, #1
    6424:	9306      	str	r3, [sp, #24]
    6426:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6428:	4499      	add	r9, r3
    642a:	e7b9      	b.n	63a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x120>
              }
            }
          }

          if (bias_data) {
    642c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    642e:	b113      	cbz	r3, 6436 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
    6430:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    6434:	441c      	add	r4, r3
          }
          acc = MultiplyByQuantizedMultiplier(
    6436:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    6438:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    643c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    643e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
    6442:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    6446:	2b00      	cmp	r3, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    6448:	fa04 f401 	lsl.w	r4, r4, r1
  int right_shift = shift > 0 ? 0 : -shift;
    644c:	bfd4      	ite	le
    644e:	425b      	negle	r3, r3
    6450:	2300      	movgt	r3, #0
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6452:	42a2      	cmp	r2, r4
    6454:	d121      	bne.n	649a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
    6456:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
    645a:	4248      	negs	r0, r1
    645c:	4148      	adcs	r0, r1
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
    645e:	fb84 4202 	smull	r4, r2, r4, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6462:	2a00      	cmp	r2, #0
    6464:	492b      	ldr	r1, [pc, #172]	; (6514 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>)
    6466:	bfa8      	it	ge
    6468:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    646c:	b9b8      	cbnz	r0, 649e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    646e:	190c      	adds	r4, r1, r4
    6470:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
    6474:	2a00      	cmp	r2, #0
    6476:	da04      	bge.n	6482 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
    6478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    647c:	1864      	adds	r4, r4, r1
    647e:	f142 0200 	adc.w	r2, r2, #0
    6482:	0fe4      	lsrs	r4, r4, #31
    6484:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
    6488:	2b1f      	cmp	r3, #31
    648a:	dd0b      	ble.n	64a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x224>
    648c:	4b22      	ldr	r3, [pc, #136]	; (6518 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x298>)
    648e:	4a23      	ldr	r2, [pc, #140]	; (651c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29c>)
    6490:	4823      	ldr	r0, [pc, #140]	; (6520 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>)
    6492:	f240 1167 	movw	r1, #359	; 0x167
    6496:	f009 f823 	bl	f4e0 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    649a:	2000      	movs	r0, #0
    649c:	e7df      	b.n	645e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
    649e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    64a2:	e7f1      	b.n	6488 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    64a4:	2201      	movs	r2, #1
    64a6:	409a      	lsls	r2, r3
    64a8:	3a01      	subs	r2, #1
  return a & b;
    64aa:	ea02 0104 	and.w	r1, r2, r4
  return a >> offset;
    64ae:	1052      	asrs	r2, r2, #1
  return a + b;
    64b0:	eb02 72d4 	add.w	r2, r2, r4, lsr #31
  return a >> offset;
    64b4:	411c      	asrs	r4, r3
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
    64b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    64b8:	9500      	str	r5, [sp, #0]
  return a + b;
    64ba:	4291      	cmp	r1, r2
    64bc:	bfc8      	it	gt
    64be:	3401      	addgt	r4, #1
          acc += output_offset;
    64c0:	441c      	add	r4, r3
    64c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    64c4:	429c      	cmp	r4, r3
    64c6:	bfb8      	it	lt
    64c8:	461c      	movlt	r4, r3
    64ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    64cc:	429c      	cmp	r4, r3
    64ce:	bfa8      	it	ge
    64d0:	461c      	movge	r4, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    64d2:	4659      	mov	r1, fp
    64d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    64d8:	4638      	mov	r0, r7
    64da:	f00b f8c2 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    64de:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    64e0:	3501      	adds	r5, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    64e2:	541c      	strb	r4, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    64e4:	e754      	b.n	6390 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x110>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    64e6:	9b05      	ldr	r3, [sp, #20]
    64e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    64ea:	3301      	adds	r3, #1
    64ec:	9305      	str	r3, [sp, #20]
    64ee:	9b08      	ldr	r3, [sp, #32]
    64f0:	4413      	add	r3, r2
    64f2:	9308      	str	r3, [sp, #32]
    64f4:	e746      	b.n	6384 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x104>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    64f6:	9b04      	ldr	r3, [sp, #16]
    64f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    64fa:	3301      	adds	r3, #1
    64fc:	9304      	str	r3, [sp, #16]
    64fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6500:	4413      	add	r3, r2
    6502:	9309      	str	r3, [sp, #36]	; 0x24
    6504:	e734      	b.n	6370 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf0>
  for (int batch = 0; batch < batches; ++batch) {
    6506:	f10b 0b01 	add.w	fp, fp, #1
    650a:	e728      	b.n	635e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xde>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
    650c:	b021      	add	sp, #132	; 0x84
    650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6512:	bf00      	nop
    6514:	c0000001 	.word	0xc0000001
    6518:	00045059 	.word	0x00045059
    651c:	00045068 	.word	0x00045068
    6520:	000450bd 	.word	0x000450bd

00006524 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    6524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    6528:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    652a:	b0ad      	sub	sp, #180	; 0xb4
    652c:	4604      	mov	r4, r0
    652e:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    6530:	b90e      	cbnz	r6, 6536 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    6532:	f00f fa13 	bl	1595c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    6536:	f8d1 8014 	ldr.w	r8, [r1, #20]
    653a:	f1b8 0f00 	cmp.w	r8, #0
    653e:	d0f8      	beq.n	6532 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  int32_t buf_size = 0;
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    6540:	4b5f      	ldr	r3, [pc, #380]	; (66c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    6542:	681a      	ldr	r2, [r3, #0]
    6544:	f00b f80e 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    6548:	4607      	mov	r7, r0
    654a:	b960      	cbnz	r0, 6566 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
    654c:	4b5d      	ldr	r3, [pc, #372]	; (66c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    654e:	6965      	ldr	r5, [r4, #20]
    6550:	9300      	str	r3, [sp, #0]
    6552:	233d      	movs	r3, #61	; 0x3d
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
    6554:	4a5c      	ldr	r2, [pc, #368]	; (66c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    6556:	495d      	ldr	r1, [pc, #372]	; (66cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    6558:	4620      	mov	r0, r4
    655a:	47a8      	blx	r5
    655c:	2501      	movs	r5, #1
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}
    655e:	4628      	mov	r0, r5
    6560:	b02d      	add	sp, #180	; 0xb4
    6562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    6566:	4b5a      	ldr	r3, [pc, #360]	; (66d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    6568:	4629      	mov	r1, r5
    656a:	681a      	ldr	r2, [r3, #0]
    656c:	4620      	mov	r0, r4
    656e:	f00a fff9 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    6572:	4682      	mov	sl, r0
    6574:	b920      	cbnz	r0, 6580 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
    6576:	4b57      	ldr	r3, [pc, #348]	; (66d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    6578:	9300      	str	r3, [sp, #0]
    657a:	6965      	ldr	r5, [r4, #20]
    657c:	233f      	movs	r3, #63	; 0x3f
    657e:	e7e9      	b.n	6554 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    6580:	4b55      	ldr	r3, [pc, #340]	; (66d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>)
    6582:	4629      	mov	r1, r5
    6584:	681a      	ldr	r2, [r3, #0]
    6586:	4620      	mov	r0, r4
    6588:	f00a ffef 	bl	1156a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    658c:	4681      	mov	r9, r0
    658e:	b920      	cbnz	r0, 659a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
    6590:	4b52      	ldr	r3, [pc, #328]	; (66dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b8>)
    6592:	9300      	str	r3, [sp, #0]
    6594:	6965      	ldr	r5, [r4, #20]
    6596:	2341      	movs	r3, #65	; 0x41
    6598:	e7dc      	b.n	6554 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  RuntimeShape input_shape = GetTensorShape(input);
    659a:	4639      	mov	r1, r7
    659c:	a816      	add	r0, sp, #88	; 0x58
    659e:	f00b f812 	bl	115c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
    65a2:	4649      	mov	r1, r9
    65a4:	a81c      	add	r0, sp, #112	; 0x70
    65a6:	f00b f80e 	bl	115c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
    65aa:	2300      	movs	r3, #0
    65ac:	4619      	mov	r1, r3
    65ae:	aa1c      	add	r2, sp, #112	; 0x70
    65b0:	a816      	add	r0, sp, #88	; 0x58
    65b2:	f00b f881 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.h = input->dims->data[1];
    65b6:	68bb      	ldr	r3, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
    65b8:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.h = input->dims->data[1];
    65ba:	689a      	ldr	r2, [r3, #8]
  input_dims.w = input->dims->data[2];
    65bc:	68db      	ldr	r3, [r3, #12]
  input_dims.h = input->dims->data[1];
    65be:	920b      	str	r2, [sp, #44]	; 0x2c
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
    65c0:	4683      	mov	fp, r0
  input_dims.c = input_shape.Dims(3);
    65c2:	2103      	movs	r1, #3
    65c4:	a816      	add	r0, sp, #88	; 0x58
  input_dims.w = input->dims->data[2];
    65c6:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims.c = input_shape.Dims(3);
    65c8:	f00a ffec 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.n = output_shape.Dims(3);
    65cc:	2103      	movs	r1, #3
  input_dims.c = input_shape.Dims(3);
    65ce:	900d      	str	r0, [sp, #52]	; 0x34
    65d0:	9009      	str	r0, [sp, #36]	; 0x24
  filter_dims.n = output_shape.Dims(3);
    65d2:	a81c      	add	r0, sp, #112	; 0x70
    65d4:	f00a ffe6 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = filter->dims->data[1];
    65d8:	f8da a008 	ldr.w	sl, [sl, #8]
  filter_dims.c = input_dims.c;
    65dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  filter_dims.h = filter->dims->data[1];
    65de:	f8da 2008 	ldr.w	r2, [sl, #8]
    65e2:	920f      	str	r2, [sp, #60]	; 0x3c
  filter_dims.w = filter->dims->data[2];
    65e4:	f8da 200c 	ldr.w	r2, [sl, #12]
  filter_dims.n = output_shape.Dims(3);
    65e8:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.n = input_dims.n;
    65ea:	e9cd 3b11 	strd	r3, fp, [sp, #68]	; 0x44
  output_dims.h = output->dims->data[1];
    65ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
  filter_dims.w = filter->dims->data[2];
    65f2:	9210      	str	r2, [sp, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
    65f4:	2103      	movs	r1, #3
  output_dims.h = output->dims->data[1];
    65f6:	689a      	ldr	r2, [r3, #8]
  output_dims.w = output->dims->data[2];
    65f8:	68db      	ldr	r3, [r3, #12]
  output_dims.h = output->dims->data[1];
    65fa:	9213      	str	r2, [sp, #76]	; 0x4c
  output_dims.c = output_shape.Dims(3);
    65fc:	a81c      	add	r0, sp, #112	; 0x70
  output_dims.w = output->dims->data[2];
    65fe:	9314      	str	r3, [sp, #80]	; 0x50
  output_dims.c = output_shape.Dims(3);
    6600:	f00a ffd0 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    6604:	4b36      	ldr	r3, [pc, #216]	; (66e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>)
  output_dims.c = output_shape.Dims(3);
    6606:	9015      	str	r0, [sp, #84]	; 0x54
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    6608:	681b      	ldr	r3, [r3, #0]
    660a:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    660e:	4620      	mov	r0, r4
    6610:	f8da 1004 	ldr.w	r1, [sl, #4]
    6614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6616:	0089      	lsls	r1, r1, #2
    6618:	9109      	str	r1, [sp, #36]	; 0x24
    661a:	4798      	blx	r3
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    661c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    661e:	9909      	ldr	r1, [sp, #36]	; 0x24
  data->reference_op_data.per_channel_output_multiplier =
    6620:	6270      	str	r0, [r6, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    6622:	4620      	mov	r0, r4
    6624:	4798      	blx	r3
  data->reference_op_data.per_channel_output_shift =
    6626:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    6628:	9606      	str	r6, [sp, #24]
    662a:	783b      	ldrb	r3, [r7, #0]
    662c:	9305      	str	r3, [sp, #20]
    662e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6630:	9304      	str	r3, [sp, #16]
    6632:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6634:	9303      	str	r3, [sp, #12]
    6636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6638:	9302      	str	r3, [sp, #8]
    663a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    663c:	9301      	str	r3, [sp, #4]
    663e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6640:	9300      	str	r3, [sp, #0]
    6642:	4629      	mov	r1, r5
    6644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6646:	4642      	mov	r2, r8
    6648:	4620      	mov	r0, r4
    664a:	f000 fb2b 	bl	6ca4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    664e:	4605      	mov	r5, r0
    6650:	2800      	cmp	r0, #0
    6652:	d12a      	bne.n	66aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
  if (input->type == kTfLiteInt8) {
    6654:	783b      	ldrb	r3, [r7, #0]
    6656:	2b09      	cmp	r3, #9
    6658:	d12e      	bne.n	66b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>
    conv_params.input_offset = -input->params.zero_point;
    665a:	693b      	ldr	r3, [r7, #16]
    665c:	425b      	negs	r3, r3
    665e:	9322      	str	r3, [sp, #136]	; 0x88
    conv_params.output_offset = output->params.zero_point;
    6660:	f8d9 3010 	ldr.w	r3, [r9, #16]
    6664:	9323      	str	r3, [sp, #140]	; 0x8c
    conv_params.stride.h = params.stride_height;
    6666:	f8d8 3008 	ldr.w	r3, [r8, #8]
    666a:	9325      	str	r3, [sp, #148]	; 0x94
    conv_params.stride.w = params.stride_width;
    666c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6670:	9324      	str	r3, [sp, #144]	; 0x90
    conv_params.dilation.h = params.dilation_height_factor;
    6672:	f8d8 3014 	ldr.w	r3, [r8, #20]
    6676:	9329      	str	r3, [sp, #164]	; 0xa4
    conv_params.dilation.w = params.dilation_width_factor;
    6678:	f8d8 3010 	ldr.w	r3, [r8, #16]
    667c:	9328      	str	r3, [sp, #160]	; 0xa0
    conv_params.padding.h = data->reference_op_data.padding.height;
    667e:	6873      	ldr	r3, [r6, #4]
    6680:	9327      	str	r3, [sp, #156]	; 0x9c
    conv_params.padding.w = data->reference_op_data.padding.width;
    6682:	6833      	ldr	r3, [r6, #0]
    6684:	9326      	str	r3, [sp, #152]	; 0x98
    conv_params.activation.min = data->reference_op_data.output_activation_min;
    6686:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6688:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.activation.max = data->reference_op_data.output_activation_max;
    668a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    668c:	932b      	str	r3, [sp, #172]	; 0xac
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
    668e:	a90a      	add	r1, sp, #40	; 0x28
    6690:	ab12      	add	r3, sp, #72	; 0x48
    6692:	aa0e      	add	r2, sp, #56	; 0x38
    6694:	a822      	add	r0, sp, #136	; 0x88
    6696:	f00c fd10 	bl	130ba <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
    669a:	1e01      	subs	r1, r0, #0
    669c:	dd0c      	ble.n	66b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
    669e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    66a0:	f106 0234 	add.w	r2, r6, #52	; 0x34
    66a4:	4620      	mov	r0, r4
    66a6:	4798      	blx	r3
    66a8:	4605      	mov	r5, r0
  RuntimeShape output_shape = GetTensorShape(output);
    66aa:	a81c      	add	r0, sp, #112	; 0x70
    66ac:	f00a ff6f 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
    66b0:	a816      	add	r0, sp, #88	; 0x58
    66b2:	f00a ff6c 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    66b6:	e752      	b.n	655e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    data->buffer_idx = -1;
    66b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    66bc:	6373      	str	r3, [r6, #52]	; 0x34
    66be:	e7f4      	b.n	66aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x186>
    66c0:	00017044 	.word	0x00017044
    66c4:	0004513a 	.word	0x0004513a
    66c8:	00045100 	.word	0x00045100
    66cc:	00044ead 	.word	0x00044ead
    66d0:	0001704c 	.word	0x0001704c
    66d4:	0004514b 	.word	0x0004514b
    66d8:	00017048 	.word	0x00017048
    66dc:	0004515d 	.word	0x0004515d
    66e0:	00017050 	.word	0x00017050

000066e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    66e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66e8:	ed2d 8b04 	vpush	{d8-d9}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    66ec:	4b9e      	ldr	r3, [pc, #632]	; (6968 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    66ee:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
}

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
    66f2:	681a      	ldr	r2, [r3, #0]
    66f4:	460d      	mov	r5, r1
    66f6:	4604      	mov	r4, r0
    66f8:	f00a ff87 	bl	1160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    66fc:	4b9b      	ldr	r3, [pc, #620]	; (696c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>)
    66fe:	4607      	mov	r7, r0
    6700:	681a      	ldr	r2, [r3, #0]
    6702:	4629      	mov	r1, r5
    6704:	4620      	mov	r0, r4
    6706:	f00a ff80 	bl	1160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    670a:	682b      	ldr	r3, [r5, #0]
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    670c:	681b      	ldr	r3, [r3, #0]
    670e:	2b03      	cmp	r3, #3
    6710:	4680      	mov	r8, r0
    6712:	d109      	bne.n	6728 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44>
    6714:	4b96      	ldr	r3, [pc, #600]	; (6970 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28c>)
    6716:	4629      	mov	r1, r5
    6718:	681a      	ldr	r2, [r3, #0]
    671a:	4620      	mov	r0, r4
    671c:	f00a ff75 	bl	1160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
    6720:	4606      	mov	r6, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    6722:	b91c      	cbnz	r4, 672c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x48>
    6724:	f00f f91a 	bl	1595c <abort>
    6728:	2600      	movs	r6, #0
    672a:	e7fa      	b.n	6722 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e>
  TFLITE_DCHECK(node != nullptr);
  return context->GetEvalTensor(context, node->outputs->data[index]);
    672c:	4a91      	ldr	r2, [pc, #580]	; (6974 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>)
    672e:	686b      	ldr	r3, [r5, #4]
    6730:	6812      	ldr	r2, [r2, #0]
    6732:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6736:	4620      	mov	r0, r4
    6738:	6859      	ldr	r1, [r3, #4]
    673a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    673c:	4790      	blx	r2
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
    673e:	6969      	ldr	r1, [r5, #20]
    6740:	4681      	mov	r9, r0
    6742:	2900      	cmp	r1, #0
    6744:	d0ee      	beq.n	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
    6746:	692d      	ldr	r5, [r5, #16]
    6748:	2d00      	cmp	r5, #0
    674a:	d0eb      	beq.n	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    674c:	7a3b      	ldrb	r3, [r7, #8]
    674e:	7a02      	ldrb	r2, [r0, #8]
    6750:	4293      	cmp	r3, r2
    6752:	d00e      	beq.n	6772 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8e>
    6754:	e9cd 3202 	strd	r3, r2, [sp, #8]
    6758:	4b87      	ldr	r3, [pc, #540]	; (6978 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x294>)
    675a:	9301      	str	r3, [sp, #4]
    675c:	4b87      	ldr	r3, [pc, #540]	; (697c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x298>)
    675e:	9300      	str	r3, [sp, #0]
    6760:	6965      	ldr	r5, [r4, #20]
    6762:	4a87      	ldr	r2, [pc, #540]	; (6980 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
    6764:	4987      	ldr	r1, [pc, #540]	; (6984 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
    6766:	f44f 7386 	mov.w	r3, #268	; 0x10c
    676a:	4620      	mov	r0, r4
    676c:	47a8      	blx	r5
                                     bias, output, nullptr);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    676e:	2001      	movs	r0, #1
    6770:	e157      	b.n	6a22 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    6772:	f898 0008 	ldrb.w	r0, [r8, #8]
    6776:	4298      	cmp	r0, r3
    6778:	d004      	beq.n	6784 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
    677a:	6963      	ldr	r3, [r4, #20]
    677c:	4982      	ldr	r1, [pc, #520]	; (6988 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a4>)
    677e:	4620      	mov	r0, r4
    6780:	4798      	blx	r3
    6782:	e7f4      	b.n	676e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  switch (input->type) {  // Already know in/out types are same.
    6784:	2801      	cmp	r0, #1
    6786:	d00b      	beq.n	67a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
    6788:	2809      	cmp	r0, #9
    678a:	f000 8150 	beq.w	6a2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x34a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    678e:	6965      	ldr	r5, [r4, #20]
    6790:	f003 f856 	bl	9840 <TfLiteTypeGetName>
    6794:	7a3b      	ldrb	r3, [r7, #8]
    6796:	497d      	ldr	r1, [pc, #500]	; (698c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a8>)
    6798:	4602      	mov	r2, r0
    679a:	4620      	mov	r0, r4
    679c:	47a8      	blx	r5
    679e:	e7e6      	b.n	676e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
          ConvParamsFloat(params, data.reference_op_data),
    67a0:	462a      	mov	r2, r5
    67a2:	a886      	add	r0, sp, #536	; 0x218
    67a4:	f000 fa4a 	bl	6c3c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    67a8:	4639      	mov	r1, r7
    67aa:	a834      	add	r0, sp, #208	; 0xd0
    67ac:	f00b f844 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  return reinterpret_cast<const T*>(tensor->data.raw);
    67b0:	683b      	ldr	r3, [r7, #0]
    67b2:	931f      	str	r3, [sp, #124]	; 0x7c
          tflite::micro::GetTensorShape(filter),
    67b4:	4641      	mov	r1, r8
    67b6:	a83a      	add	r0, sp, #232	; 0xe8
    67b8:	f00b f83e 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    67bc:	f8d8 3000 	ldr.w	r3, [r8]
    67c0:	931e      	str	r3, [sp, #120]	; 0x78
          tflite::micro::GetTensorShape(bias),
    67c2:	4631      	mov	r1, r6
    67c4:	a840      	add	r0, sp, #256	; 0x100
    67c6:	f00b f837 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    67ca:	2e00      	cmp	r6, #0
    67cc:	d0aa      	beq.n	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  return reinterpret_cast<const T*>(tensor->data.raw);
    67ce:	6833      	ldr	r3, [r6, #0]
    67d0:	930a      	str	r3, [sp, #40]	; 0x28
          tflite::micro::GetTensorShape(output),
    67d2:	4649      	mov	r1, r9
    67d4:	a846      	add	r0, sp, #280	; 0x118
    67d6:	f00b f82f 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    67da:	f8d9 3000 	ldr.w	r3, [r9]
    67de:	930e      	str	r3, [sp, #56]	; 0x38
          tflite::micro::GetTensorShape(nullptr), nullptr);
    67e0:	2100      	movs	r1, #0
    67e2:	a84c      	add	r0, sp, #304	; 0x130
    67e4:	f00b f828 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
  const int stride_width = params.stride_width;
    67e8:	f9bd 3222 	ldrsh.w	r3, [sp, #546]	; 0x222
    67ec:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    67ee:	f9bd 3224 	ldrsh.w	r3, [sp, #548]	; 0x224
    67f2:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    67f4:	f9bd 3226 	ldrsh.w	r3, [sp, #550]	; 0x226
    67f8:	9311      	str	r3, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    67fa:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
    67fe:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    6800:	f9bd 321a 	ldrsh.w	r3, [sp, #538]	; 0x21a
    6804:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    6806:	f9bd 321c 	ldrsh.w	r3, [sp, #540]	; 0x21c
    680a:	9314      	str	r3, [sp, #80]	; 0x50
  const float output_activation_min = params.float_activation_min;
  const float output_activation_max = params.float_activation_max;
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    680c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
  const float output_activation_min = params.float_activation_min;
    680e:	ed9d 9a92 	vldr	s18, [sp, #584]	; 0x248
  const float output_activation_max = params.float_activation_max;
    6812:	eddd 9a93 	vldr	s19, [sp, #588]	; 0x24c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    6816:	2b04      	cmp	r3, #4
    6818:	d184      	bne.n	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    681a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    681c:	2b04      	cmp	r3, #4
    681e:	d181      	bne.n	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    6820:	9b46      	ldr	r3, [sp, #280]	; 0x118
    6822:	2b04      	cmp	r3, #4
    6824:	f47f af7e 	bne.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    6828:	2300      	movs	r3, #0
    682a:	4619      	mov	r1, r3
    682c:	aa46      	add	r2, sp, #280	; 0x118
    682e:	a834      	add	r0, sp, #208	; 0xd0
    6830:	f00a ff42 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    6834:	2303      	movs	r3, #3
    6836:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    6838:	9015      	str	r0, [sp, #84]	; 0x54
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    683a:	aa3a      	add	r2, sp, #232	; 0xe8
    683c:	a834      	add	r0, sp, #208	; 0xd0
    683e:	f00a ff3b 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    6842:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    6844:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    6846:	aa46      	add	r2, sp, #280	; 0x118
    6848:	2100      	movs	r1, #0
    684a:	a83a      	add	r0, sp, #232	; 0xe8
    684c:	f00a ff34 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
    6850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    6852:	900d      	str	r0, [sp, #52]	; 0x34
  if (bias_data) {
    6854:	b133      	cbz	r3, 6864 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    6856:	a840      	add	r0, sp, #256	; 0x100
    6858:	f00a fef3 	bl	11642 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    685c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    685e:	4283      	cmp	r3, r0
    6860:	f47f af60 	bne.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  }
  const int input_height = input_shape.Dims(1);
    6864:	2101      	movs	r1, #1
    6866:	a834      	add	r0, sp, #208	; 0xd0
    6868:	f00a fe9c 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    686c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    686e:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_width = input_shape.Dims(2);
    6870:	a834      	add	r0, sp, #208	; 0xd0
    6872:	f00a fe97 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
    6876:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    6878:	9018      	str	r0, [sp, #96]	; 0x60
  const int filter_height = filter_shape.Dims(1);
    687a:	a83a      	add	r0, sp, #232	; 0xe8
    687c:	f00a fe92 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
    6880:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
    6882:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_width = filter_shape.Dims(2);
    6884:	a83a      	add	r0, sp, #232	; 0xe8
    6886:	f00a fe8d 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    688a:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
    688c:	901a      	str	r0, [sp, #104]	; 0x68
  const int output_height = output_shape.Dims(1);
    688e:	a846      	add	r0, sp, #280	; 0x118
    6890:	f00a fe88 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    6894:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    6896:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_width = output_shape.Dims(2);
    6898:	a846      	add	r0, sp, #280	; 0x118
    689a:	f00a fe83 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
    689e:	2500      	movs	r5, #0
  const int output_width = output_shape.Dims(2);
    68a0:	901c      	str	r0, [sp, #112]	; 0x70
  for (int batch = 0; batch < batches; ++batch) {
    68a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    68a4:	42ab      	cmp	r3, r5
    68a6:	f340 80ac 	ble.w	6a02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31e>
    68aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    68ac:	425b      	negs	r3, r3
    68ae:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int out_y = 0; out_y < output_height; ++out_y) {
    68b0:	f04f 0900 	mov.w	r9, #0
    68b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    68b6:	454b      	cmp	r3, r9
    68b8:	f340 80a1 	ble.w	69fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31a>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
    68bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    68be:	425b      	negs	r3, r3
    68c0:	930c      	str	r3, [sp, #48]	; 0x30
    68c2:	f04f 0800 	mov.w	r8, #0
    68c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    68c8:	4543      	cmp	r3, r8
    68ca:	f340 8091 	ble.w	69f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30c>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    68ce:	2400      	movs	r4, #0
    68d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    68d2:	42a3      	cmp	r3, r4
    68d4:	f340 8085 	ble.w	69e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fe>
    68d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
          float total = 0.f;
    68da:	eddf 8a2d 	vldr	s17, [pc, #180]	; 6990 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    68de:	f04f 0a00 	mov.w	sl, #0
    68e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    68e4:	4553      	cmp	r3, sl
    68e6:	dd55      	ble.n	6994 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    68e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    68ea:	f04f 0b00 	mov.w	fp, #0
    68ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    68f0:	455b      	cmp	r3, fp
    68f2:	dd34      	ble.n	695e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    68f4:	2f00      	cmp	r7, #0
    68f6:	db2d      	blt.n	6954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
    68f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    68fa:	42bb      	cmp	r3, r7
    68fc:	dd2a      	ble.n	6954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
    68fe:	2e00      	cmp	r6, #0
    6900:	db28      	blt.n	6954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
    6902:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6904:	42b3      	cmp	r3, r6
    6906:	dd25      	ble.n	6954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
    6908:	2300      	movs	r3, #0
    690a:	9309      	str	r3, [sp, #36]	; 0x24

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    690c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    690e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6910:	4293      	cmp	r3, r2
    6912:	dd1f      	ble.n	6954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>
                float input_value = input_data[Offset(input_shape, batch, in_y,
    6914:	9200      	str	r2, [sp, #0]
    6916:	463b      	mov	r3, r7
    6918:	4632      	mov	r2, r6
    691a:	4629      	mov	r1, r5
    691c:	a834      	add	r0, sp, #208	; 0xd0
    691e:	f00a fea0 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                float filter_value = filter_data[Offset(
    6922:	9b09      	ldr	r3, [sp, #36]	; 0x24
                float input_value = input_data[Offset(input_shape, batch, in_y,
    6924:	901d      	str	r0, [sp, #116]	; 0x74
                float filter_value = filter_data[Offset(
    6926:	9300      	str	r3, [sp, #0]
    6928:	4652      	mov	r2, sl
    692a:	465b      	mov	r3, fp
    692c:	4621      	mov	r1, r4
    692e:	a83a      	add	r0, sp, #232	; 0xe8
    6930:	f00a fe97 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
    6934:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    6936:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6938:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    693c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
                total += (input_value * filter_value);
    693e:	ed93 7a00 	vldr	s14, [r3]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    6942:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    6944:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                total += (input_value * filter_value);
    6948:	edd0 7a00 	vldr	s15, [r0]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    694c:	3301      	adds	r3, #1
                total += (input_value * filter_value);
    694e:	eee7 8a27 	vfma.f32	s17, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    6952:	e7da      	b.n	690a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x226>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    6954:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6956:	f10b 0b01 	add.w	fp, fp, #1
    695a:	441f      	add	r7, r3
    695c:	e7c7      	b.n	68ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    695e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6960:	f10a 0a01 	add.w	sl, sl, #1
    6964:	441e      	add	r6, r3
    6966:	e7bc      	b.n	68e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    6968:	00017044 	.word	0x00017044
    696c:	0001704c 	.word	0x0001704c
    6970:	00017040 	.word	0x00017040
    6974:	00017048 	.word	0x00017048
    6978:	0004516f 	.word	0x0004516f
    697c:	0004517c 	.word	0x0004517c
    6980:	00045100 	.word	0x00045100
    6984:	00044f05 	.word	0x00044f05
    6988:	00045188 	.word	0x00045188
    698c:	000451f3 	.word	0x000451f3
    6990:	00000000 	.word	0x00000000
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
    6994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6996:	b30b      	cbz	r3, 69dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
            bias_value = bias_data[out_channel];
    6998:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    699c:	ed93 8a00 	vldr	s16, [r3]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    69a0:	9400      	str	r4, [sp, #0]
              ActivationFunctionWithMinMax(total + bias_value,
    69a2:	ee38 8a28 	vadd.f32	s16, s16, s17
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    69a6:	4643      	mov	r3, r8
    69a8:	464a      	mov	r2, r9
    69aa:	4629      	mov	r1, r5
    69ac:	a846      	add	r0, sp, #280	; 0x118
    69ae:	f00a fe58 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
    69b2:	eeb4 9a48 	vcmp.f32	s18, s16
    69b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    69ba:	bfc8      	it	gt
    69bc:	eeb0 8a49 	vmovgt.f32	s16, s18
	return __b;
    69c0:	eef4 9a48 	vcmp.f32	s19, s16
    69c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    69c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    69ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    69ce:	bf48      	it	mi
    69d0:	eeb0 8a69 	vmovmi.f32	s16, s19
    69d4:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    69d8:	3401      	adds	r4, #1
    69da:	e779      	b.n	68d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>
          float bias_value = 0.0f;
    69dc:	ed1f 8a14 	vldr	s16, [pc, #-80]	; 6990 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    69e0:	e7de      	b.n	69a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    69e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    69e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    69e6:	4413      	add	r3, r2
    69e8:	f108 0801 	add.w	r8, r8, #1
    69ec:	930c      	str	r3, [sp, #48]	; 0x30
    69ee:	e76a      	b.n	68c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    69f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    69f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    69f4:	4413      	add	r3, r2
    69f6:	f109 0901 	add.w	r9, r9, #1
    69fa:	930b      	str	r3, [sp, #44]	; 0x2c
    69fc:	e75a      	b.n	68b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
  for (int batch = 0; batch < batches; ++batch) {
    69fe:	3501      	adds	r5, #1
    6a00:	e74f      	b.n	68a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1be>
    6a02:	a84c      	add	r0, sp, #304	; 0x130
    6a04:	f00a fdc3 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
    6a08:	a846      	add	r0, sp, #280	; 0x118
    6a0a:	f00a fdc0 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    6a0e:	a840      	add	r0, sp, #256	; 0x100
    6a10:	f00a fdbd 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    6a14:	a83a      	add	r0, sp, #232	; 0xe8
    6a16:	f00a fdba 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    6a1a:	a834      	add	r0, sp, #208	; 0xd0
        tflite::micro::GetTensorShape(input),
    6a1c:	f00a fdb7 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
    6a20:	2000      	movs	r0, #0
  }
  return kTfLiteOk;
}
    6a22:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
    6a26:	ecbd 8b04 	vpop	{d8-d9}
    6a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  conv_params.dilation.h = params.dilation_height_factor;
    6a2e:	694a      	ldr	r2, [r1, #20]
  conv_params.dilation.w = params.dilation_width_factor;
    6a30:	690b      	ldr	r3, [r1, #16]
  conv_params.dilation.h = params.dilation_height_factor;
    6a32:	9283      	str	r2, [sp, #524]	; 0x20c
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
    6a34:	2a01      	cmp	r2, #1
  conv_params.dilation.w = params.dilation_width_factor;
    6a36:	9382      	str	r3, [sp, #520]	; 0x208
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
    6a38:	f040 80b5 	bne.w	6ba6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c2>
    6a3c:	2b01      	cmp	r3, #1
    6a3e:	f040 80b2 	bne.w	6ba6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c2>
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
    6a42:	692b      	ldr	r3, [r5, #16]
    6a44:	425b      	negs	r3, r3
    6a46:	937c      	str	r3, [sp, #496]	; 0x1f0
    conv_params.output_offset = data.reference_op_data.output_zero_point;
    6a48:	69ab      	ldr	r3, [r5, #24]
    6a4a:	937d      	str	r3, [sp, #500]	; 0x1f4
    conv_params.stride.h = params.stride_height;
    6a4c:	688b      	ldr	r3, [r1, #8]
    6a4e:	937f      	str	r3, [sp, #508]	; 0x1fc
    conv_params.stride.w = params.stride_width;
    6a50:	684b      	ldr	r3, [r1, #4]
    6a52:	937e      	str	r3, [sp, #504]	; 0x1f8
    conv_params.padding.h = data.reference_op_data.padding.height;
    6a54:	686b      	ldr	r3, [r5, #4]
    6a56:	9381      	str	r3, [sp, #516]	; 0x204
    conv_params.padding.w = data.reference_op_data.padding.width;
    6a58:	682b      	ldr	r3, [r5, #0]
    6a5a:	9380      	str	r3, [sp, #512]	; 0x200
    conv_params.activation.min = data.reference_op_data.output_activation_min;
    6a5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6a5e:	9384      	str	r3, [sp, #528]	; 0x210
    conv_params.activation.max = data.reference_op_data.output_activation_max;
    6a60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    6a62:	9385      	str	r3, [sp, #532]	; 0x214
    quant_params.multiplier = const_cast<int32_t*>(
    6a64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6a66:	9320      	str	r3, [sp, #128]	; 0x80
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6a68:	4641      	mov	r1, r8
    quant_params.shift =
    6a6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a6c:	9321      	str	r3, [sp, #132]	; 0x84
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6a6e:	a852      	add	r0, sp, #328	; 0x148
    6a70:	f00a fee2 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    6a74:	4639      	mov	r1, r7
    6a76:	a858      	add	r0, sp, #352	; 0x160
    6a78:	f00a fede 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    6a7c:	4649      	mov	r1, r9
    6a7e:	a85e      	add	r0, sp, #376	; 0x178
    6a80:	f00a feda 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
    6a84:	4631      	mov	r1, r6
    6a86:	a864      	add	r0, sp, #400	; 0x190
    6a88:	f00a fed6 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
    6a8c:	e9dd 2384 	ldrd	r2, r3, [sp, #528]	; 0x210
    6a90:	429a      	cmp	r2, r3
    6a92:	f73f ae47 	bgt.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    6a96:	9b58      	ldr	r3, [sp, #352]	; 0x160
    6a98:	2b04      	cmp	r3, #4
    6a9a:	f47f ae43 	bne.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    6a9e:	9b52      	ldr	r3, [sp, #328]	; 0x148
    6aa0:	2b04      	cmp	r3, #4
    6aa2:	f47f ae3f 	bne.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    6aa6:	9b5e      	ldr	r3, [sp, #376]	; 0x178
    6aa8:	2b04      	cmp	r3, #4
    6aaa:	f47f ae3b 	bne.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
    6aae:	2300      	movs	r3, #0
    6ab0:	4619      	mov	r1, r3
    6ab2:	aa5e      	add	r2, sp, #376	; 0x178
    6ab4:	a858      	add	r0, sp, #352	; 0x160
    6ab6:	f00a fdff 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    6aba:	2303      	movs	r3, #3
    6abc:	4619      	mov	r1, r3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
    6abe:	9009      	str	r0, [sp, #36]	; 0x24
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    6ac0:	aa52      	add	r2, sp, #328	; 0x148
    6ac2:	a858      	add	r0, sp, #352	; 0x160
    6ac4:	f00a fdf8 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    6ac8:	2303      	movs	r3, #3
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
    6aca:	900a      	str	r0, [sp, #40]	; 0x28
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
    6acc:	aa5e      	add	r2, sp, #376	; 0x178
    6ace:	2100      	movs	r1, #0
    6ad0:	a852      	add	r0, sp, #328	; 0x148
    6ad2:	f00a fdf1 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    6ad6:	4682      	mov	sl, r0
  TFLITE_DCHECK(tensor != nullptr);
    6ad8:	2e00      	cmp	r6, #0
    6ada:	f43f ae23 	beq.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
    6ade:	6833      	ldr	r3, [r6, #0]
    6ae0:	b12b      	cbz	r3, 6aee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40a>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    6ae2:	a864      	add	r0, sp, #400	; 0x190
    6ae4:	f00a fdad 	bl	11642 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
    6ae8:	4582      	cmp	sl, r0
    6aea:	f47f ae1b 	bne.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    input_dims.n = batch_size;
    6aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6af0:	9324      	str	r3, [sp, #144]	; 0x90
    input_dims.h = input_shape.Dims(1);
    6af2:	2101      	movs	r1, #1
    6af4:	a858      	add	r0, sp, #352	; 0x160
    6af6:	f00a fd55 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
    6afa:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
    6afc:	9025      	str	r0, [sp, #148]	; 0x94
    input_dims.w = input_shape.Dims(2);
    6afe:	a858      	add	r0, sp, #352	; 0x160
    6b00:	f00a fd50 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.c = input_depth;
    6b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    input_dims.w = input_shape.Dims(2);
    6b06:	9026      	str	r0, [sp, #152]	; 0x98
    filter_dims.h = filter_shape.Dims(1);
    6b08:	2101      	movs	r1, #1
    6b0a:	a852      	add	r0, sp, #328	; 0x148
    input_dims.c = input_depth;
    6b0c:	9327      	str	r3, [sp, #156]	; 0x9c
    filter_dims.n = output_depth;
    6b0e:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
    filter_dims.h = filter_shape.Dims(1);
    6b12:	f00a fd47 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.w = filter_shape.Dims(2);
    6b16:	2102      	movs	r1, #2
    filter_dims.h = filter_shape.Dims(1);
    6b18:	9029      	str	r0, [sp, #164]	; 0xa4
    filter_dims.w = filter_shape.Dims(2);
    6b1a:	a852      	add	r0, sp, #328	; 0x148
    6b1c:	f00a fd42 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.c = input_depth;
    6b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    filter_dims.w = filter_shape.Dims(2);
    6b22:	902a      	str	r0, [sp, #168]	; 0xa8
    bias_dims.n = 1;
    6b24:	2101      	movs	r1, #1
    filter_dims.c = input_depth;
    6b26:	932b      	str	r3, [sp, #172]	; 0xac
    output_dims.h = output_shape.Dims(1);
    6b28:	a85e      	add	r0, sp, #376	; 0x178
    output_dims.n = batch_size;
    6b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b2c:	9330      	str	r3, [sp, #192]	; 0xc0
    bias_dims.h = 1;
    6b2e:	e9cd 112c 	strd	r1, r1, [sp, #176]	; 0xb0
    bias_dims.c = output_depth;
    6b32:	e9cd 1a2e 	strd	r1, sl, [sp, #184]	; 0xb8
    output_dims.h = output_shape.Dims(1);
    6b36:	f00a fd35 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
    6b3a:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
    6b3c:	9031      	str	r0, [sp, #196]	; 0xc4
    output_dims.w = output_shape.Dims(2);
    6b3e:	a85e      	add	r0, sp, #376	; 0x178
    6b40:	f00a fd30 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (data.buffer_idx > -1) {
    6b44:	6b69      	ldr	r1, [r5, #52]	; 0x34
    ctx.buf = nullptr;
    6b46:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
    6b48:	4299      	cmp	r1, r3
    filter_dims.n = output_depth;
    6b4a:	f10d 0ba0 	add.w	fp, sp, #160	; 0xa0
    output_dims.c = output_depth;
    6b4e:	e9cd 0a32 	strd	r0, sl, [sp, #200]	; 0xc8
    ctx.size = 0;
    6b52:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
    if (data.buffer_idx > -1) {
    6b56:	db03      	blt.n	6b60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47c>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    6b58:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6b5a:	4620      	mov	r0, r4
    6b5c:	4798      	blx	r3
    6b5e:	9022      	str	r0, [sp, #136]	; 0x88
    TFLITE_DCHECK_EQ(
    6b60:	f8d9 3000 	ldr.w	r3, [r9]
    6b64:	9306      	str	r3, [sp, #24]
    6b66:	ab30      	add	r3, sp, #192	; 0xc0
    6b68:	9305      	str	r3, [sp, #20]
    6b6a:	6833      	ldr	r3, [r6, #0]
    6b6c:	9304      	str	r3, [sp, #16]
    6b6e:	ab2c      	add	r3, sp, #176	; 0xb0
    6b70:	9303      	str	r3, [sp, #12]
    6b72:	f8d8 3000 	ldr.w	r3, [r8]
    6b76:	e9cd b301 	strd	fp, r3, [sp, #4]
    6b7a:	683b      	ldr	r3, [r7, #0]
    6b7c:	9300      	str	r3, [sp, #0]
    6b7e:	aa20      	add	r2, sp, #128	; 0x80
    6b80:	ab24      	add	r3, sp, #144	; 0x90
    6b82:	a97c      	add	r1, sp, #496	; 0x1f0
    6b84:	a822      	add	r0, sp, #136	; 0x88
    6b86:	f00c fa3c 	bl	13002 <arm_convolve_wrapper_s8>
    6b8a:	2800      	cmp	r0, #0
    6b8c:	f47f adca 	bne.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
    6b90:	a864      	add	r0, sp, #400	; 0x190
    6b92:	f00a fcfc 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    6b96:	a85e      	add	r0, sp, #376	; 0x178
    6b98:	f00a fcf9 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    6b9c:	a858      	add	r0, sp, #352	; 0x160
    6b9e:	f00a fcf6 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6ba2:	a852      	add	r0, sp, #328	; 0x148
    6ba4:	e73a      	b.n	6a1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x338>
        ConvParamsQuantized(params, data.reference_op_data),
    6ba6:	462a      	mov	r2, r5
    6ba8:	a894      	add	r0, sp, #592	; 0x250
    6baa:	f00a fda8 	bl	116fe <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        tflite::micro::GetTensorShape(filter),
    6bae:	ac70      	add	r4, sp, #448	; 0x1c0
        tflite::micro::GetTensorShape(input),
    6bb0:	4639      	mov	r1, r7
    6bb2:	a86a      	add	r0, sp, #424	; 0x1a8
        data.reference_op_data.per_channel_output_shift,
    6bb4:	e9d5 ab09 	ldrd	sl, fp, [r5, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
    6bb8:	f00a fe3e 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(bias),
    6bbc:	ad76      	add	r5, sp, #472	; 0x1d8
        tflite::micro::GetTensorShape(filter),
    6bbe:	4641      	mov	r1, r8
    6bc0:	4620      	mov	r0, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
    6bc2:	683f      	ldr	r7, [r7, #0]
    6bc4:	f00a fe38 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(bias),
    6bc8:	4631      	mov	r1, r6
    6bca:	4628      	mov	r0, r5
    6bcc:	f8d8 8000 	ldr.w	r8, [r8]
    6bd0:	f00a fe32 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    6bd4:	2e00      	cmp	r6, #0
    6bd6:	f43f ada5 	beq.w	6724 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40>
  return reinterpret_cast<const T*>(tensor->data.raw);
    6bda:	6833      	ldr	r3, [r6, #0]
    6bdc:	9309      	str	r3, [sp, #36]	; 0x24
        tflite::micro::GetTensorShape(output),
    6bde:	ae86      	add	r6, sp, #536	; 0x218
    6be0:	4649      	mov	r1, r9
    6be2:	4630      	mov	r0, r6
    6be4:	f00a fe28 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
    6be8:	f8d9 2000 	ldr.w	r2, [r9]
    6bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6bee:	9700      	str	r7, [sp, #0]
    6bf0:	4651      	mov	r1, sl
    6bf2:	e9cd 6205 	strd	r6, r2, [sp, #20]
    6bf6:	e9cd 5303 	strd	r5, r3, [sp, #12]
    6bfa:	465a      	mov	r2, fp
    6bfc:	ab6a      	add	r3, sp, #424	; 0x1a8
    6bfe:	a894      	add	r0, sp, #592	; 0x250
    6c00:	e9cd 4801 	strd	r4, r8, [sp, #4]
    6c04:	f7ff fb3c 	bl	6280 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
    6c08:	4630      	mov	r0, r6
    6c0a:	f00a fcc0 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
    6c0e:	4628      	mov	r0, r5
    6c10:	f00a fcbd 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
    6c14:	4620      	mov	r0, r4
    6c16:	f00a fcba 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
    6c1a:	a86a      	add	r0, sp, #424	; 0x1a8
    6c1c:	e6fe      	b.n	6a1c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x338>
    6c1e:	bf00      	nop

00006c20 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    6c20:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    6c22:	4d05      	ldr	r5, [pc, #20]	; (6c38 <_ZN6tflite16Register_CONV_2DEv+0x18>)
TfLiteRegistration Register_CONV_2D() {
    6c24:	4606      	mov	r6, r0
          /*version=*/0};
    6c26:	4604      	mov	r4, r0
    6c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6c2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    6c34:	4630      	mov	r0, r6
    6c36:	bd70      	pop	{r4, r5, r6, pc}
    6c38:	00016440 	.word	0x00016440

00006c3c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
    6c3c:	7b0b      	ldrb	r3, [r1, #12]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    6c3e:	2b01      	cmp	r3, #1
                           const OpDataConv& data) {
    6c40:	b570      	push	{r4, r5, r6, lr}
    6c42:	4604      	mov	r4, r0
    6c44:	460d      	mov	r5, r1
    6c46:	4616      	mov	r6, r2
    6c48:	d103      	bne.n	6c52 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x16>
    *activation_min = 0;
    6c4a:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    6c4c:	6323      	str	r3, [r4, #48]	; 0x30
    *activation_max = std::numeric_limits<T>::max();
    6c4e:	4b12      	ldr	r3, [pc, #72]	; (6c98 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x5c>)
    6c50:	e004      	b.n	6c5c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
  } else if (activation == kTfLiteActRelu6) {
    6c52:	2b03      	cmp	r3, #3
    6c54:	d115      	bne.n	6c82 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x46>
    *activation_min = 0;
    6c56:	2300      	movs	r3, #0
    6c58:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 6;
    6c5a:	4b10      	ldr	r3, [pc, #64]	; (6c9c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x60>)
    *activation_max = std::numeric_limits<T>::max();
    6c5c:	6363      	str	r3, [r4, #52]	; 0x34
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    6c5e:	7828      	ldrb	r0, [r5, #0]
    6c60:	f00a fe0e 	bl	11880 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.width = data.padding.width;
    6c64:	6833      	ldr	r3, [r6, #0]
    6c66:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
    6c68:	6873      	ldr	r3, [r6, #4]
    6c6a:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
    6c6c:	686b      	ldr	r3, [r5, #4]
    6c6e:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
    6c70:	68ab      	ldr	r3, [r5, #8]
    6c72:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
    6c74:	692b      	ldr	r3, [r5, #16]
    6c76:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
    6c78:	696b      	ldr	r3, [r5, #20]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
    6c7a:	7020      	strb	r0, [r4, #0]
  op_params.dilation_height_factor = params.dilation_height_factor;
    6c7c:	8223      	strh	r3, [r4, #16]
  return op_params;
}
    6c7e:	4620      	mov	r0, r4
    6c80:	bd70      	pop	{r4, r5, r6, pc}
  } else if (activation == kTfLiteActReluN1To1) {
    6c82:	2b02      	cmp	r3, #2
    6c84:	d104      	bne.n	6c90 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x54>
    *activation_min = -1;
    6c86:	4b06      	ldr	r3, [pc, #24]	; (6ca0 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x64>)
    6c88:	6303      	str	r3, [r0, #48]	; 0x30
    *activation_max = 1;
    6c8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    6c8e:	e7e5      	b.n	6c5c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x20>
    *activation_min = std::numeric_limits<T>::lowest();
    6c90:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    6c94:	e7da      	b.n	6c4c <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x10>
    6c96:	bf00      	nop
    6c98:	7f7fffff 	.word	0x7f7fffff
    6c9c:	40c00000 	.word	0x40c00000
    6ca0:	bf800000 	.word	0xbf800000

00006ca4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    6ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ca8:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
    6caa:	680b      	ldr	r3, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    6cac:	681b      	ldr	r3, [r3, #0]
                                 OpDataConv* data) {
    6cae:	b08f      	sub	sp, #60	; 0x3c
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    6cb0:	3b02      	subs	r3, #2
    6cb2:	2b01      	cmp	r3, #1
                                 OpDataConv* data) {
    6cb4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    6cb6:	4605      	mov	r5, r0
    6cb8:	4688      	mov	r8, r1
    6cba:	4617      	mov	r7, r2
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    6cbc:	d90b      	bls.n	6cd6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x32>
    6cbe:	4b5d      	ldr	r3, [pc, #372]	; (6e34 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
    6cc0:	9300      	str	r3, [sp, #0]
    6cc2:	6944      	ldr	r4, [r0, #20]
    6cc4:	4a5c      	ldr	r2, [pc, #368]	; (6e38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    6cc6:	495d      	ldr	r1, [pc, #372]	; (6e3c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
    6cc8:	2356      	movs	r3, #86	; 0x56
    6cca:	47a0      	blx	r4
    6ccc:	2401      	movs	r4, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    6cce:	4620      	mov	r0, r4
    6cd0:	b00f      	add	sp, #60	; 0x3c
    6cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    6cd6:	684b      	ldr	r3, [r1, #4]
    6cd8:	681c      	ldr	r4, [r3, #0]
    6cda:	2c01      	cmp	r4, #1
    6cdc:	d00c      	beq.n	6cf8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    6cde:	2601      	movs	r6, #1
    6ce0:	e9cd 4602 	strd	r4, r6, [sp, #8]
    6ce4:	4b56      	ldr	r3, [pc, #344]	; (6e40 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
    6ce6:	9301      	str	r3, [sp, #4]
    6ce8:	4b56      	ldr	r3, [pc, #344]	; (6e44 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
    6cea:	9300      	str	r3, [sp, #0]
    6cec:	6944      	ldr	r4, [r0, #20]
    6cee:	4a52      	ldr	r2, [pc, #328]	; (6e38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    6cf0:	4955      	ldr	r1, [pc, #340]	; (6e48 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
    6cf2:	2357      	movs	r3, #87	; 0x57
    6cf4:	47a0      	blx	r4
    6cf6:	e7e9      	b.n	6ccc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
    6cf8:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
  auto padding = params.padding;
    6cfc:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    6d00:	930a      	str	r3, [sp, #40]	; 0x28
    6d02:	6953      	ldr	r3, [r2, #20]
    6d04:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
    6d06:	6913      	ldr	r3, [r2, #16]
    6d08:	930c      	str	r3, [sp, #48]	; 0x30

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    6d0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6d0c:	9300      	str	r3, [sp, #0]
    6d0e:	4649      	mov	r1, r9
    6d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6d12:	4658      	mov	r0, fp
    6d14:	f00a fcdf 	bl	116d6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    6d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6d1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    6d1c:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
    6d1e:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
    6d20:	9300      	str	r3, [sp, #0]
    6d22:	4658      	mov	r0, fp
    6d24:	4653      	mov	r3, sl
    6d26:	f00a fcd6 	bl	116d6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    6d2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6d2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6d2e:	3b01      	subs	r3, #1
    6d30:	4353      	muls	r3, r2
    6d32:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    6d34:	3801      	subs	r0, #1
    6d36:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
    6d3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    6d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int total_padding =
    6d3e:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    6d42:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6d44:	3b01      	subs	r3, #1
    6d46:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
    6d48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6d4a:	1e50      	subs	r0, r2, #1
    6d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    6d4e:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    6d50:	fb02 3300 	mla	r3, r2, r0, r3
  int total_padding =
    6d54:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
    6d58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  return total_padding / 2;
    6d60:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
    6d62:	f003 0301 	and.w	r3, r3, #1
      padding, &out_height, &out_width);
    6d66:	6032      	str	r2, [r6, #0]
    6d68:	60b3      	str	r3, [r6, #8]
  return total_padding / 2;
    6d6a:	ea4f 026a 	mov.w	r2, sl, asr #1
  *offset = total_padding % 2;
    6d6e:	f00a 0301 	and.w	r3, sl, #1
    6d72:	6072      	str	r2, [r6, #4]
    6d74:	60f3      	str	r3, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    6d76:	2200      	movs	r2, #0
    6d78:	4641      	mov	r1, r8
    6d7a:	4628      	mov	r0, r5
    6d7c:	f00a fbf2 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    6d80:	4682      	mov	sl, r0
    6d82:	b940      	cbnz	r0, 6d96 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf2>
    6d84:	4b31      	ldr	r3, [pc, #196]	; (6e4c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
    6d86:	696e      	ldr	r6, [r5, #20]
    6d88:	9300      	str	r3, [sp, #0]
    6d8a:	2361      	movs	r3, #97	; 0x61
  TF_LITE_ENSURE(context, filter != nullptr);
    6d8c:	4a2a      	ldr	r2, [pc, #168]	; (6e38 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
    6d8e:	492b      	ldr	r1, [pc, #172]	; (6e3c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
    6d90:	4628      	mov	r0, r5
    6d92:	47b0      	blx	r6
    6d94:	e79b      	b.n	6cce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    6d96:	4622      	mov	r2, r4
    6d98:	4641      	mov	r1, r8
    6d9a:	4628      	mov	r0, r5
    6d9c:	f00a fbe2 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    6da0:	4681      	mov	r9, r0
    6da2:	b920      	cbnz	r0, 6dae <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
    6da4:	4b2a      	ldr	r3, [pc, #168]	; (6e50 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
    6da6:	9300      	str	r3, [sp, #0]
    6da8:	696e      	ldr	r6, [r5, #20]
    6daa:	2363      	movs	r3, #99	; 0x63
    6dac:	e7ee      	b.n	6d8c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    6dae:	4641      	mov	r1, r8
    6db0:	2202      	movs	r2, #2
    6db2:	4628      	mov	r0, r5
    6db4:	f00a fbe8 	bl	11588 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    6db8:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    6dba:	900a      	str	r0, [sp, #40]	; 0x28
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    6dbc:	2200      	movs	r2, #0
    6dbe:	4628      	mov	r0, r5
    6dc0:	f00a fbd3 	bl	1156a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    6dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6dc6:	4680      	mov	r8, r0
    6dc8:	b920      	cbnz	r0, 6dd4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x130>
    6dca:	4b22      	ldr	r3, [pc, #136]	; (6e54 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
    6dcc:	9300      	str	r3, [sp, #0]
    6dce:	696e      	ldr	r6, [r5, #20]
    6dd0:	2367      	movs	r3, #103	; 0x67
    6dd2:	e7db      	b.n	6d8c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
    6dd4:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
    6dd8:	2a01      	cmp	r2, #1
    6dda:	d10a      	bne.n	6df2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14e>
  data->input_zero_point = input->params.zero_point;
    6ddc:	f8da 3010 	ldr.w	r3, [sl, #16]
    6de0:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
    6de2:	f8d9 3010 	ldr.w	r3, [r9, #16]
    6de6:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
    6de8:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6dec:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
    6dee:	2400      	movs	r4, #0
    6df0:	e76d      	b.n	6cce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    6df2:	f8d9 2008 	ldr.w	r2, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    6df6:	6852      	ldr	r2, [r2, #4]
    6df8:	9208      	str	r2, [sp, #32]
    6dfa:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    6dfc:	9207      	str	r2, [sp, #28]
    6dfe:	6a72      	ldr	r2, [r6, #36]	; 0x24
    6e00:	9206      	str	r2, [sp, #24]
    6e02:	f106 0230 	add.w	r2, r6, #48	; 0x30
    6e06:	9205      	str	r2, [sp, #20]
    6e08:	f106 022c 	add.w	r2, r6, #44	; 0x2c
    6e0c:	9204      	str	r2, [sp, #16]
    6e0e:	f106 0220 	add.w	r2, r6, #32
    6e12:	9203      	str	r2, [sp, #12]
    6e14:	370c      	adds	r7, #12
    6e16:	f106 021c 	add.w	r2, r6, #28
    6e1a:	e9cd 0700 	strd	r0, r7, [sp]
    6e1e:	9202      	str	r2, [sp, #8]
    6e20:	4651      	mov	r1, sl
    6e22:	464a      	mov	r2, r9
    6e24:	4628      	mov	r0, r5
    6e26:	f7ff f8fd 	bl	6024 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    6e2a:	4604      	mov	r4, r0
    6e2c:	2800      	cmp	r0, #0
    6e2e:	d0d5      	beq.n	6ddc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
    6e30:	e74d      	b.n	6cce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    6e32:	bf00      	nop
    6e34:	00045250 	.word	0x00045250
    6e38:	0004520f 	.word	0x0004520f
    6e3c:	00044ead 	.word	0x00044ead
    6e40:	0004566b 	.word	0x0004566b
    6e44:	00045274 	.word	0x00045274
    6e48:	00044f05 	.word	0x00044f05
    6e4c:	0004513a 	.word	0x0004513a
    6e50:	0004514b 	.word	0x0004514b
    6e54:	0004515d 	.word	0x0004515d

00006e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6e58:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
    6e5a:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6e5c:	d119      	bne.n	6e92 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3a>
    6e5e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
    6e62:	425c      	negs	r4, r3
    6e64:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
    6e66:	fb80 0301 	smull	r0, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	4a0b      	ldr	r2, [pc, #44]	; (6e9c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>)
    6e6e:	bfa8      	it	ge
    6e70:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    6e74:	b97c      	cbnz	r4, 6e96 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    6e76:	1811      	adds	r1, r2, r0
    6e78:	eb43 70e2 	adc.w	r0, r3, r2, asr #31
    6e7c:	2800      	cmp	r0, #0
    6e7e:	da04      	bge.n	6e8a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x32>
    6e80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    6e84:	18c9      	adds	r1, r1, r3
    6e86:	f140 0000 	adc.w	r0, r0, #0
    6e8a:	0fc9      	lsrs	r1, r1, #31
    6e8c:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}
    6e90:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    6e92:	2400      	movs	r4, #0
    6e94:	e7e7      	b.n	6e66 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
    6e96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6e9a:	e7f9      	b.n	6e90 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x38>
    6e9c:	c0000001 	.word	0xc0000001

00006ea0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    6ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  std::int64_t sum = a64 + b64;
    6ea2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  std::int64_t a64 = a;
    6ea6:	17c5      	asrs	r5, r0, #31
  std::int64_t sum = a64 + b64;
    6ea8:	18c0      	adds	r0, r0, r3
    6eaa:	f145 0500 	adc.w	r5, r5, #0
  std::int64_t sign = sum >= 0 ? 1 : -1;
    6eae:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    6eb2:	bf08      	it	eq
    6eb4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    6eb8:	bf0b      	itete	eq
    6eba:	4603      	moveq	r3, r0
    6ebc:	2301      	movne	r3, #1
    6ebe:	462a      	moveq	r2, r5
    6ec0:	2200      	movne	r2, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
    6ec2:	18c0      	adds	r0, r0, r3
    6ec4:	eb45 0502 	adc.w	r5, r5, r2
    6ec8:	0feb      	lsrs	r3, r5, #31
    6eca:	1818      	adds	r0, r3, r0
    6ecc:	f145 0500 	adc.w	r5, r5, #0
    6ed0:	0840      	lsrs	r0, r0, #1
    6ed2:	ea40 75c5 	orr.w	r5, r0, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    6ed6:	4936      	ldr	r1, [pc, #216]	; (6fb0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x110>)
    6ed8:	4628      	mov	r0, r5
    6eda:	f7ff ffbd 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
    6ede:	2603      	movs	r6, #3
    6ee0:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
    6ee4:	4621      	mov	r1, r4
    6ee6:	4628      	mov	r0, r5
    6ee8:	f7ff ffb6 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    6eec:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    6ef0:	4620      	mov	r0, r4
    6ef2:	f7ff ffb1 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
    6ef6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    6efa:	da45      	bge.n	6f88 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xe8>
    6efc:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    6f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6f04:	f04f 0700 	mov.w	r7, #0
    6f08:	bfc8      	it	gt
    6f0a:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    6f0c:	17c2      	asrs	r2, r0, #31
    6f0e:	0092      	lsls	r2, r2, #2
    6f10:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    6f14:	0080      	lsls	r0, r0, #2
             ? min
    6f16:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    6f1a:	f172 33ff 	sbcs.w	r3, r2, #4294967295	; 0xffffffff
    6f1e:	db37      	blt.n	6f90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf0>
             : wide_shifted > max ? max
    6f20:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    6f24:	f172 0300 	sbcs.w	r3, r2, #0
    6f28:	da35      	bge.n	6f96 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf6>
  return a & b;
    6f2a:	ea20 0307 	bic.w	r3, r0, r7
    6f2e:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
  return a ^ b;
    6f32:	407b      	eors	r3, r7
  return a & b;
    6f34:	ea23 0301 	bic.w	r3, r3, r1
    6f38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
    6f3c:	404b      	eors	r3, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
    6f3e:	3e01      	subs	r6, #1
  return a + b;
    6f40:	441c      	add	r4, r3
  for (int i = 0; i < 3; i++) {
    6f42:	d1cf      	bne.n	6ee4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x44>
  return a ? BitNot(zero) : zero;
    6f44:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    6f48:	da28      	bge.n	6f9c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xfc>
    6f4a:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
    6f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6f52:	4633      	mov	r3, r6
    6f54:	bfc8      	it	gt
    6f56:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
    6f58:	17e2      	asrs	r2, r4, #31
    6f5a:	1924      	adds	r4, r4, r4
    6f5c:	4152      	adcs	r2, r2
             ? min
    6f5e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6f62:	f172 31ff 	sbcs.w	r1, r2, #4294967295	; 0xffffffff
    6f66:	db1d      	blt.n	6fa4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x104>
             : wide_shifted > max ? max
    6f68:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6f6c:	f172 0200 	sbcs.w	r2, r2, #0
    6f70:	da1b      	bge.n	6faa <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  return a & b;
    6f72:	ea24 0403 	bic.w	r4, r4, r3
    6f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  return a ^ b;
    6f7a:	405c      	eors	r4, r3
  return a & b;
    6f7c:	ea24 0400 	bic.w	r4, r4, r0
    6f80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
    6f84:	4060      	eors	r0, r4
    6f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return a ? BitNot(zero) : zero;
    6f88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    6f8c:	2100      	movs	r1, #0
    6f8e:	e7bd      	b.n	6f0c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6c>
             ? min
    6f90:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    6f94:	e7c9      	b.n	6f2a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x8a>
             : wide_shifted > max ? max
    6f96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6f9a:	e7c6      	b.n	6f2a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x8a>
  return a ? BitNot(zero) : zero;
    6f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6fa0:	4630      	mov	r0, r6
    6fa2:	e7d9      	b.n	6f58 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xb8>
             ? min
    6fa4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    6fa8:	e7e3      	b.n	6f72 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xd2>
             : wide_shifted > max ? max
    6faa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    6fae:	e7e0      	b.n	6f72 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xd2>
    6fb0:	c3c3c3c4 	.word	0xc3c3c3c4

00006fb4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
    6fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fb8:	b0b7      	sub	sp, #220	; 0xdc
    6fba:	e9dd a640 	ldrd	sl, r6, [sp, #256]	; 0x100
    6fbe:	4607      	mov	r7, r0
    6fc0:	460c      	mov	r4, r1
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    6fc2:	a824      	add	r0, sp, #144	; 0x90
    6fc4:	4631      	mov	r1, r6
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
    6fc6:	4698      	mov	r8, r3
    6fc8:	4691      	mov	r9, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    6fca:	f00a fc35 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    6fce:	9b24      	ldr	r3, [sp, #144]	; 0x90
    6fd0:	2b02      	cmp	r3, #2
    6fd2:	d001      	beq.n	6fd8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x24>
    6fd4:	f00e fcc2 	bl	1595c <abort>
  const int batches = output_shape.Dims(0);
    6fd8:	2100      	movs	r1, #0
    6fda:	a824      	add	r0, sp, #144	; 0x90
    6fdc:	f00a fae2 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
    6fe0:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
    6fe2:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = output_shape.Dims(1);
    6fe4:	a824      	add	r0, sp, #144	; 0x90
    6fe6:	f00a fadd 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6fea:	4641      	mov	r1, r8
  const int output_depth = output_shape.Dims(1);
    6fec:	4683      	mov	fp, r0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    6fee:	a82a      	add	r0, sp, #168	; 0xa8
    6ff0:	f00a fc22 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    6ff4:	992a      	ldr	r1, [sp, #168]	; 0xa8
    6ff6:	a82a      	add	r0, sp, #168	; 0xa8
    6ff8:	3901      	subs	r1, #1
    6ffa:	f00a fad3 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    6ffe:	4649      	mov	r1, r9
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    7000:	9008      	str	r0, [sp, #32]
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    7002:	a830      	add	r0, sp, #192	; 0xc0
    7004:	f00a fc18 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
    7008:	6961      	ldr	r1, [r4, #20]
  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
  quant_params.shift = data.reference_op_data.output_shift;

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
    700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  input_dims.h = 1;
  input_dims.w = 1;
  input_dims.c = accum_depth;
    700c:	9a08      	ldr	r2, [sp, #32]
  input_dims.n = batches;
    700e:	930f      	str	r3, [sp, #60]	; 0x3c
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
    7010:	4249      	negs	r1, r1
    7012:	911f      	str	r1, [sp, #124]	; 0x7c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
    7014:	69e1      	ldr	r1, [r4, #28]
    7016:	9121      	str	r1, [sp, #132]	; 0x84
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
    7018:	69a1      	ldr	r1, [r4, #24]

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
  output_dims.h = 1;
  output_dims.w = 1;
  output_dims.c = output_depth;
    701a:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
    701e:	4249      	negs	r1, r1
    7020:	9120      	str	r1, [sp, #128]	; 0x80
  fc_params.activation.min = data.reference_op_data.output_activation_min;
    7022:	68a1      	ldr	r1, [r4, #8]
    7024:	9122      	str	r1, [sp, #136]	; 0x88
  fc_params.activation.max = data.reference_op_data.output_activation_max;
    7026:	68e1      	ldr	r1, [r4, #12]
    7028:	9123      	str	r1, [sp, #140]	; 0x8c
  quant_params.multiplier = data.reference_op_data.output_multiplier;
    702a:	6821      	ldr	r1, [r4, #0]
    702c:	910b      	str	r1, [sp, #44]	; 0x2c
  input_dims.h = 1;
    702e:	2501      	movs	r5, #1
  quant_params.shift = data.reference_op_data.output_shift;
    7030:	6861      	ldr	r1, [r4, #4]
    7032:	910c      	str	r1, [sp, #48]	; 0x30
  output_dims.n = batches;
    7034:	e9cd b31a 	strd	fp, r3, [sp, #104]	; 0x68

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
    7038:	2300      	movs	r3, #0
  input_dims.w = 1;
    703a:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  filter_dims.n = accum_depth;
    703e:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  filter_dims.w = 1;
    7042:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  bias_dims.n = 1;
    7046:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
  bias_dims.w = 1;
    704a:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
  output_dims.w = 1;
    704e:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
  ctx.size = 0;
    7052:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34

  if (data.buffer_idx > -1) {
    7056:	6a21      	ldr	r1, [r4, #32]
    7058:	4299      	cmp	r1, r3
    705a:	db03      	blt.n	7064 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xb0>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    705c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    705e:	4638      	mov	r0, r7
    7060:	4798      	blx	r3
    7062:	900d      	str	r0, [sp, #52]	; 0x34
  TFLITE_DCHECK(tensor != nullptr);
    7064:	f1b9 0f00 	cmp.w	r9, #0
    7068:	d0b4      	beq.n	6fd4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    706a:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK(tensor != nullptr);
    706e:	f1b8 0f00 	cmp.w	r8, #0
    7072:	d0af      	beq.n	6fd4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    7074:	f8d8 1000 	ldr.w	r1, [r8]
  TFLITE_DCHECK(tensor != nullptr);
    7078:	f1ba 0f00 	cmp.w	sl, #0
    707c:	d0aa      	beq.n	6fd4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
    707e:	f8da 0000 	ldr.w	r0, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7082:	2e00      	cmp	r6, #0
    7084:	d045      	beq.n	7112 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x15e>
    7086:	6833      	ldr	r3, [r6, #0]
  }

  TF_LITE_ENSURE_EQ(
    7088:	9306      	str	r3, [sp, #24]
    708a:	ab1b      	add	r3, sp, #108	; 0x6c
    708c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    7090:	ab17      	add	r3, sp, #92	; 0x5c
    7092:	e9cd 1302 	strd	r1, r3, [sp, #8]
    7096:	ab13      	add	r3, sp, #76	; 0x4c
    7098:	e9cd 2300 	strd	r2, r3, [sp]
    709c:	a91f      	add	r1, sp, #124	; 0x7c
    709e:	ab0f      	add	r3, sp, #60	; 0x3c
    70a0:	aa0b      	add	r2, sp, #44	; 0x2c
    70a2:	a80d      	add	r0, sp, #52	; 0x34
    70a4:	f00c fa6a 	bl	1357c <arm_fully_connected_s8>
    70a8:	4604      	mov	r4, r0
    70aa:	b328      	cbz	r0, 70f8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
    70ac:	697c      	ldr	r4, [r7, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
    70ae:	f8d9 3000 	ldr.w	r3, [r9]
    70b2:	f8d8 2000 	ldr.w	r2, [r8]
    70b6:	f8da 1000 	ldr.w	r1, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    70ba:	b106      	cbz	r6, 70be <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
    70bc:	6836      	ldr	r6, [r6, #0]
    70be:	9606      	str	r6, [sp, #24]
    70c0:	a81b      	add	r0, sp, #108	; 0x6c
    70c2:	e9cd 1004 	strd	r1, r0, [sp, #16]
    70c6:	a917      	add	r1, sp, #92	; 0x5c
    70c8:	e9cd 2102 	strd	r2, r1, [sp, #8]
    70cc:	aa13      	add	r2, sp, #76	; 0x4c
    70ce:	e9cd 3200 	strd	r3, r2, [sp]
    70d2:	a91f      	add	r1, sp, #124	; 0x7c
    70d4:	ab0f      	add	r3, sp, #60	; 0x3c
    70d6:	aa0b      	add	r2, sp, #44	; 0x2c
    70d8:	a80d      	add	r0, sp, #52	; 0x34
    70da:	f00c fa4f 	bl	1357c <arm_fully_connected_s8>
    70de:	2300      	movs	r3, #0
    70e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
    70e4:	4b0c      	ldr	r3, [pc, #48]	; (7118 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x164>)
    70e6:	9301      	str	r3, [sp, #4]
    70e8:	4b0c      	ldr	r3, [pc, #48]	; (711c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x168>)
    70ea:	9300      	str	r3, [sp, #0]
    70ec:	4a0c      	ldr	r2, [pc, #48]	; (7120 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x16c>)
    70ee:	490d      	ldr	r1, [pc, #52]	; (7124 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x170>)
    70f0:	23a6      	movs	r3, #166	; 0xa6
    70f2:	4638      	mov	r0, r7
    70f4:	47a0      	blx	r4
    70f6:	2401      	movs	r4, #1
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    70f8:	a830      	add	r0, sp, #192	; 0xc0
    70fa:	f00a fa48 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
    70fe:	a82a      	add	r0, sp, #168	; 0xa8
    7100:	f00a fa45 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    7104:	a824      	add	r0, sp, #144	; 0x90
    7106:	f00a fa42 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
}
    710a:	4620      	mov	r0, r4
    710c:	b037      	add	sp, #220	; 0xdc
    710e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7112:	4633      	mov	r3, r6
    7114:	e7b8      	b.n	7088 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xd4>
    7116:	bf00      	nop
    7118:	000452cd 	.word	0x000452cd
    711c:	000452de 	.word	0x000452de
    7120:	00045288 	.word	0x00045288
    7124:	00044f05 	.word	0x00044f05

00007128 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    7128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    712c:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    7130:	b095      	sub	sp, #84	; 0x54
    7132:	4604      	mov	r4, r0
    7134:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    7136:	f1b9 0f00 	cmp.w	r9, #0
    713a:	d101      	bne.n	7140 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
    713c:	f00e fc0e 	bl	1595c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    7140:	f8d1 b014 	ldr.w	fp, [r1, #20]
    7144:	f1bb 0f00 	cmp.w	fp, #0
    7148:	d0f8      	beq.n	713c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
      GetInput(context, node, kFullyConnectedInputTensor);
    714a:	4b50      	ldr	r3, [pc, #320]	; (728c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
    714c:	681a      	ldr	r2, [r3, #0]
    714e:	f00a fa09 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    7152:	4680      	mov	r8, r0
    7154:	b960      	cbnz	r0, 7170 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x48>
    7156:	4b4e      	ldr	r3, [pc, #312]	; (7290 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
    7158:	9300      	str	r3, [sp, #0]
    715a:	6965      	ldr	r5, [r4, #20]
    715c:	2340      	movs	r3, #64	; 0x40
  TF_LITE_ENSURE(context, filter != nullptr);
    715e:	4a4d      	ldr	r2, [pc, #308]	; (7294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    7160:	494d      	ldr	r1, [pc, #308]	; (7298 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
    7162:	4620      	mov	r0, r4
    7164:	47a8      	blx	r5
    7166:	2501      	movs	r5, #1
}
    7168:	4628      	mov	r0, r5
    716a:	b015      	add	sp, #84	; 0x54
    716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kFullyConnectedWeightsTensor);
    7170:	4b4a      	ldr	r3, [pc, #296]	; (729c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
    7172:	4629      	mov	r1, r5
    7174:	681a      	ldr	r2, [r3, #0]
    7176:	4620      	mov	r0, r4
    7178:	f00a f9f4 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    717c:	4607      	mov	r7, r0
    717e:	b920      	cbnz	r0, 718a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    7180:	4b47      	ldr	r3, [pc, #284]	; (72a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
    7182:	9300      	str	r3, [sp, #0]
    7184:	6965      	ldr	r5, [r4, #20]
    7186:	2343      	movs	r3, #67	; 0x43
    7188:	e7e9      	b.n	715e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    718a:	4b46      	ldr	r3, [pc, #280]	; (72a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
    718c:	4629      	mov	r1, r5
    718e:	681a      	ldr	r2, [r3, #0]
    7190:	4620      	mov	r0, r4
    7192:	f00a f9f9 	bl	11588 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    7196:	4b44      	ldr	r3, [pc, #272]	; (72a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    7198:	4682      	mov	sl, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    719a:	681a      	ldr	r2, [r3, #0]
    719c:	4629      	mov	r1, r5
    719e:	4620      	mov	r0, r4
    71a0:	f00a f9e3 	bl	1156a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    71a4:	4606      	mov	r6, r0
    71a6:	b920      	cbnz	r0, 71b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    71a8:	4b40      	ldr	r3, [pc, #256]	; (72ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    71aa:	9300      	str	r3, [sp, #0]
    71ac:	6965      	ldr	r5, [r4, #20]
    71ae:	2347      	movs	r3, #71	; 0x47
    71b0:	e7d5      	b.n	715e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    71b2:	f898 0000 	ldrb.w	r0, [r8]
    71b6:	7833      	ldrb	r3, [r6, #0]
    71b8:	4283      	cmp	r3, r0
    71ba:	d012      	beq.n	71e2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
    71bc:	6967      	ldr	r7, [r4, #20]
    71be:	f002 fb3f 	bl	9840 <TfLiteTypeGetName>
    71c2:	4605      	mov	r5, r0
    71c4:	7830      	ldrb	r0, [r6, #0]
    71c6:	f002 fb3b 	bl	9840 <TfLiteTypeGetName>
    71ca:	4b39      	ldr	r3, [pc, #228]	; (72b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    71cc:	9301      	str	r3, [sp, #4]
    71ce:	4b39      	ldr	r3, [pc, #228]	; (72b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    71d0:	9300      	str	r3, [sp, #0]
    71d2:	e9cd 5002 	strd	r5, r0, [sp, #8]
    71d6:	4a2f      	ldr	r2, [pc, #188]	; (7294 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
    71d8:	4937      	ldr	r1, [pc, #220]	; (72b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    71da:	2349      	movs	r3, #73	; 0x49
    71dc:	4620      	mov	r0, r4
    71de:	47b8      	blx	r7
    71e0:	e7c1      	b.n	7166 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    71e2:	783a      	ldrb	r2, [r7, #0]
    71e4:	429a      	cmp	r2, r3
    71e6:	d004      	beq.n	71f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xca>
    71e8:	6963      	ldr	r3, [r4, #20]
    71ea:	4934      	ldr	r1, [pc, #208]	; (72bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    71ec:	4620      	mov	r0, r4
    71ee:	4798      	blx	r3
    71f0:	e7b9      	b.n	7166 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  data->buffer_idx = -1;
    71f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71f6:	f8c9 3020 	str.w	r3, [r9, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
    71fa:	f89b 1000 	ldrb.w	r1, [fp]
    71fe:	4643      	mov	r3, r8
    7200:	e9cd 6902 	strd	r6, r9, [sp, #8]
    7204:	e9cd 7a00 	strd	r7, sl, [sp]
    7208:	4620      	mov	r0, r4
    720a:	f00a fadf 	bl	117cc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
    720e:	4605      	mov	r5, r0
    7210:	2800      	cmp	r0, #0
    7212:	d1a9      	bne.n	7168 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  if (input->type == kTfLiteInt8) {
    7214:	f898 3000 	ldrb.w	r3, [r8]
    7218:	2b09      	cmp	r3, #9
    721a:	d1a5      	bne.n	7168 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape filter_shape = GetTensorShape(filter);
    721c:	4639      	mov	r1, r7
    721e:	a808      	add	r0, sp, #32
    7220:	f00a f9d1 	bl	115c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
    7224:	4631      	mov	r1, r6
    7226:	a80e      	add	r0, sp, #56	; 0x38
    7228:	f00a f9cd 	bl	115c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    722c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    722e:	2b02      	cmp	r3, #2
    7230:	d184      	bne.n	713c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
    7232:	9908      	ldr	r1, [sp, #32]
    7234:	a808      	add	r0, sp, #32
    7236:	3901      	subs	r1, #1
    7238:	f00a f9b4 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = 1;
    723c:	2101      	movs	r1, #1
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
    723e:	9004      	str	r0, [sp, #16]
    filter_dims.c = output_shape.Dims(1);
    7240:	a80e      	add	r0, sp, #56	; 0x38
    filter_dims.w = 1;
    7242:	e9cd 1105 	strd	r1, r1, [sp, #20]
    filter_dims.c = output_shape.Dims(1);
    7246:	f00a f9ad 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    724a:	9007      	str	r0, [sp, #28]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
    724c:	a804      	add	r0, sp, #16
    724e:	f00c f9c6 	bl	135de <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
    7252:	1e01      	subs	r1, r0, #0
    7254:	dd0e      	ble.n	7274 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
    7256:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7258:	4620      	mov	r0, r4
    725a:	f109 0220 	add.w	r2, r9, #32
    725e:	4798      	blx	r3
    7260:	4604      	mov	r4, r0
    7262:	b158      	cbz	r0, 727c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
    7264:	a80e      	add	r0, sp, #56	; 0x38
    7266:	f00a f992 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    726a:	a808      	add	r0, sp, #32
    726c:	f00a f98f 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    7270:	4625      	mov	r5, r4
    7272:	e779      	b.n	7168 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
      data->buffer_idx = -1;
    7274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7278:	f8c9 3020 	str.w	r3, [r9, #32]
    RuntimeShape output_shape = GetTensorShape(output);
    727c:	a80e      	add	r0, sp, #56	; 0x38
    727e:	f00a f986 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = GetTensorShape(filter);
    7282:	a808      	add	r0, sp, #32
    7284:	f00a f983 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    7288:	e76e      	b.n	7168 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    728a:	bf00      	nop
    728c:	00017058 	.word	0x00017058
    7290:	0004513a 	.word	0x0004513a
    7294:	00045288 	.word	0x00045288
    7298:	00044ead 	.word	0x00044ead
    729c:	00017060 	.word	0x00017060
    72a0:	0004514b 	.word	0x0004514b
    72a4:	00017054 	.word	0x00017054
    72a8:	0001705c 	.word	0x0001705c
    72ac:	0004515d 	.word	0x0004515d
    72b0:	0004516f 	.word	0x0004516f
    72b4:	0004517c 	.word	0x0004517c
    72b8:	00045402 	.word	0x00045402
    72bc:	0004541c 	.word	0x0004541c

000072c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    72c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72c4:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    72c8:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    72cc:	b0d1      	sub	sp, #324	; 0x144
    72ce:	4607      	mov	r7, r0
    72d0:	4688      	mov	r8, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    72d2:	f1b9 0f00 	cmp.w	r9, #0
    72d6:	d101      	bne.n	72dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
    72d8:	f00e fb40 	bl	1595c <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    72dc:	4ba6      	ldr	r3, [pc, #664]	; (7578 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
  return GetMutableEvalInput(context, node, index);
    72de:	681a      	ldr	r2, [r3, #0]
    72e0:	f00a f993 	bl	1160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    72e4:	4ba5      	ldr	r3, [pc, #660]	; (757c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    72e6:	4641      	mov	r1, r8
    72e8:	681a      	ldr	r2, [r3, #0]
    72ea:	4604      	mov	r4, r0
    72ec:	4638      	mov	r0, r7
    72ee:	f00a f98c 	bl	1160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    72f2:	4ba3      	ldr	r3, [pc, #652]	; (7580 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    72f4:	4641      	mov	r1, r8
    72f6:	681a      	ldr	r2, [r3, #0]
    72f8:	4606      	mov	r6, r0
    72fa:	4638      	mov	r0, r7
    72fc:	f00a f985 	bl	1160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    7300:	4ba0      	ldr	r3, [pc, #640]	; (7584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    7302:	4641      	mov	r1, r8
    7304:	681a      	ldr	r2, [r3, #0]
    7306:	4605      	mov	r5, r0
    7308:	4638      	mov	r0, r7
    730a:	f00a f98c 	bl	11626 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
    730e:	f8d8 1010 	ldr.w	r1, [r8, #16]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    7312:	4683      	mov	fp, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    7314:	2900      	cmp	r1, #0
    7316:	d0df      	beq.n	72d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
    7318:	7a20      	ldrb	r0, [r4, #8]
    731a:	2803      	cmp	r0, #3
    731c:	f000 80a6 	beq.w	746c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
    7320:	2809      	cmp	r0, #9
    7322:	f000 8097 	beq.w	7454 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x194>
    7326:	2801      	cmp	r0, #1
    7328:	f040 8195 	bne.w	7656 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x396>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
    732c:	f899 1000 	ldrb.w	r1, [r9]
    7330:	a83c      	add	r0, sp, #240	; 0xf0
    7332:	f000 f9c5 	bl	76c0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    7336:	4621      	mov	r1, r4
    7338:	a812      	add	r0, sp, #72	; 0x48
    733a:	f00a fa7d 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    733e:	6823      	ldr	r3, [r4, #0]
    7340:	9303      	str	r3, [sp, #12]
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
    7342:	4631      	mov	r1, r6
    7344:	a818      	add	r0, sp, #96	; 0x60
    7346:	f00a fa77 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    734a:	2e00      	cmp	r6, #0
    734c:	d0c4      	beq.n	72d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
    734e:	6833      	ldr	r3, [r6, #0]
    7350:	9302      	str	r3, [sp, #8]
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
    7352:	4629      	mov	r1, r5
    7354:	a81e      	add	r0, sp, #120	; 0x78
    7356:	f00a fa6f 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    735a:	2d00      	cmp	r5, #0
    735c:	d0bc      	beq.n	72d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
    735e:	4659      	mov	r1, fp
    7360:	a846      	add	r0, sp, #280	; 0x118
  return reinterpret_cast<const T*>(tensor->data.raw);
    7362:	f8d5 8000 	ldr.w	r8, [r5]
    7366:	f00a fa67 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    736a:	f1bb 0f00 	cmp.w	fp, #0
    736e:	d001      	beq.n	7374 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    7370:	f8db b000 	ldr.w	fp, [fp]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    7374:	9b46      	ldr	r3, [sp, #280]	; 0x118
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
  }

  inline int32_t DimensionsCount() const { return size_; }
    7376:	9d18      	ldr	r5, [sp, #96]	; 0x60
  const float output_activation_min = params.float_activation_min;
    7378:	ed9d 8a43 	vldr	s16, [sp, #268]	; 0x10c
  const float output_activation_max = params.float_activation_max;
    737c:	eddd 8a44 	vldr	s17, [sp, #272]	; 0x110
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    7380:	3b01      	subs	r3, #1
    7382:	4619      	mov	r1, r3
    7384:	a846      	add	r0, sp, #280	; 0x118
    7386:	9305      	str	r3, [sp, #20]
    7388:	f00a f9f4 	bl	11774 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    738c:	9b05      	ldr	r3, [sp, #20]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
    738e:	9004      	str	r0, [sp, #16]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    7390:	aa46      	add	r2, sp, #280	; 0x118
    7392:	1ea9      	subs	r1, r5, #2
    7394:	a818      	add	r0, sp, #96	; 0x60
    7396:	f00a f98f 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    739a:	1e69      	subs	r1, r5, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
    739c:	4604      	mov	r4, r0
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    739e:	a818      	add	r0, sp, #96	; 0x60
    73a0:	f00a f900 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    73a4:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
    73a6:	eddf 6a78 	vldr	s13, [pc, #480]	; 7588 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
    73aa:	4602      	mov	r2, r0
    73ac:	461e      	mov	r6, r3
  for (int b = 0; b < batches; ++b) {
    73ae:	4618      	mov	r0, r3
    73b0:	9904      	ldr	r1, [sp, #16]
    73b2:	4281      	cmp	r1, r0
    73b4:	dd40      	ble.n	7438 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    73b6:	9903      	ldr	r1, [sp, #12]
    73b8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    73bc:	9105      	str	r1, [sp, #20]
    73be:	2100      	movs	r1, #0
    73c0:	eb0b 0e86 	add.w	lr, fp, r6, lsl #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    73c4:	460d      	mov	r5, r1
    73c6:	42ac      	cmp	r4, r5
    73c8:	dd32      	ble.n	7430 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x170>
    73ca:	9f02      	ldr	r7, [sp, #8]
    73cc:	f8dd a014 	ldr.w	sl, [sp, #20]
      float total = 0.f;
    73d0:	eddf 7a6d 	vldr	s15, [pc, #436]	; 7588 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
    73d4:	eb07 0981 	add.w	r9, r7, r1, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
    73d8:	f04f 0c00 	mov.w	ip, #0
    73dc:	4562      	cmp	r2, ip
    73de:	dd08      	ble.n	73f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x132>
        total += input_data[b * accum_depth + d] *
    73e0:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
    73e4:	ecb9 7a01 	vldmia	r9!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
    73e8:	f10c 0c01 	add.w	ip, ip, #1
        total += input_data[b * accum_depth + d] *
    73ec:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
    73f0:	e7f4      	b.n	73dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11c>
      if (bias_data) {
    73f2:	f1b8 0f00 	cmp.w	r8, #0
    73f6:	d018      	beq.n	742a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
        bias_value = bias_data[out_c];
    73f8:	eb08 0c85 	add.w	ip, r8, r5, lsl #2
    73fc:	ed9c 7a00 	vldr	s14, [ip]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    7400:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    7404:	3501      	adds	r5, #1
	return __b;
    7406:	eeb4 8a67 	vcmp.f32	s16, s15
    740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    740e:	bfc8      	it	gt
    7410:	eef0 7a48 	vmovgt.f32	s15, s16
	return __b;
    7414:	eef4 8a67 	vcmp.f32	s17, s15
    7418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    741c:	bf48      	it	mi
    741e:	eef0 7a68 	vmovmi.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    7422:	ecee 7a01 	vstmia	lr!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    7426:	4411      	add	r1, r2
    7428:	e7cd      	b.n	73c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x106>
      float bias_value = 0.0f;
    742a:	eeb0 7a66 	vmov.f32	s14, s13
    742e:	e7e7      	b.n	7400 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  for (int b = 0; b < batches; ++b) {
    7430:	3001      	adds	r0, #1
    7432:	4426      	add	r6, r4
    7434:	4413      	add	r3, r2
    7436:	e7bb      	b.n	73b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>
    7438:	a846      	add	r0, sp, #280	; 0x118
    743a:	f00a f8a8 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    743e:	a81e      	add	r0, sp, #120	; 0x78
    7440:	f00a f8a5 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    7444:	a818      	add	r0, sp, #96	; 0x60
    7446:	f00a f8a2 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    744a:	a812      	add	r0, sp, #72	; 0x48
                               output);
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
          tflite::micro::GetTensorShape(input),
    744c:	f00a f89f 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
    7450:	2000      	movs	r0, #0
      break;
    7452:	e006      	b.n	7462 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
    7454:	e9cd 5b00 	strd	r5, fp, [sp]
    7458:	4633      	mov	r3, r6
    745a:	4622      	mov	r2, r4
    745c:	4638      	mov	r0, r7
    745e:	f7ff fda9 	bl	6fb4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
}
    7462:	b051      	add	sp, #324	; 0x144
    7464:	ecbd 8b02 	vpop	{d8}
    7468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          FullyConnectedParamsQuantized(data.reference_op_data),
    746c:	a846      	add	r0, sp, #280	; 0x118
    746e:	f00a f99c 	bl	117aa <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    7472:	4621      	mov	r1, r4
    7474:	a824      	add	r0, sp, #144	; 0x90
    7476:	f00a f9df 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    747a:	6823      	ldr	r3, [r4, #0]
    747c:	930b      	str	r3, [sp, #44]	; 0x2c
          tflite::micro::GetTensorShape(filter),
    747e:	4631      	mov	r1, r6
    7480:	a82a      	add	r0, sp, #168	; 0xa8
    7482:	f00a f9d9 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    7486:	2e00      	cmp	r6, #0
    7488:	f43f af26 	beq.w	72d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
    748c:	6833      	ldr	r3, [r6, #0]
    748e:	930a      	str	r3, [sp, #40]	; 0x28
          tflite::micro::GetTensorShape(bias),
    7490:	4629      	mov	r1, r5
    7492:	a830      	add	r0, sp, #192	; 0xc0
    7494:	f00a f9d0 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
    7498:	2d00      	cmp	r5, #0
    749a:	f43f af1d 	beq.w	72d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
    749e:	682b      	ldr	r3, [r5, #0]
    74a0:	9303      	str	r3, [sp, #12]
          tflite::micro::GetTensorShape(output),
    74a2:	4659      	mov	r1, fp
    74a4:	a836      	add	r0, sp, #216	; 0xd8
    74a6:	f00a f9c7 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    74aa:	f1bb 0f00 	cmp.w	fp, #0
    74ae:	d001      	beq.n	74b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f4>
    74b0:	f8db b000 	ldr.w	fp, [fp]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    74b4:	9b46      	ldr	r3, [sp, #280]	; 0x118
    74b6:	930c      	str	r3, [sp, #48]	; 0x30
  const int32_t filter_offset = params.weights_offset;
    74b8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    74ba:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    74bc:	930d      	str	r3, [sp, #52]	; 0x34
  const int32_t output_offset = params.output_offset;
    74be:	9b48      	ldr	r3, [sp, #288]	; 0x120
    74c0:	930e      	str	r3, [sp, #56]	; 0x38
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
    74c2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    74c4:	9304      	str	r3, [sp, #16]
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    74c6:	2d01      	cmp	r5, #1
  const int32_t output_activation_max = params.quantized_activation_max;
    74c8:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    74ca:	9305      	str	r3, [sp, #20]
  const int output_shift = params.output_shift;
    74cc:	e9dd a449 	ldrd	sl, r4, [sp, #292]	; 0x124
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    74d0:	f77f af02 	ble.w	72d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
    74d4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
    74d6:	2b00      	cmp	r3, #0
    74d8:	f77f aefe 	ble.w	72d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    74dc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
    74e0:	428a      	cmp	r2, r1
    74e2:	f73f aef9 	bgt.w	72d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    74e6:	3b01      	subs	r3, #1
    74e8:	4619      	mov	r1, r3
    74ea:	a836      	add	r0, sp, #216	; 0xd8
    74ec:	9302      	str	r3, [sp, #8]
    74ee:	f00a f941 	bl	11774 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    74f2:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
    74f4:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    74f6:	aa36      	add	r2, sp, #216	; 0xd8
    74f8:	1ea9      	subs	r1, r5, #2
    74fa:	a82a      	add	r0, sp, #168	; 0xa8
    74fc:	f00a f8dc 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    7500:	1e69      	subs	r1, r5, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
    7502:	9006      	str	r0, [sp, #24]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    7504:	a82a      	add	r0, sp, #168	; 0xa8
    7506:	f00a f84d 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int b = 0; b < batches; ++b) {
    750a:	2c00      	cmp	r4, #0
    750c:	f1c4 0100 	rsb	r1, r4, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    7510:	f04f 0301 	mov.w	r3, #1
    7514:	bfc8      	it	gt
    7516:	2100      	movgt	r1, #0
    7518:	408b      	lsls	r3, r1
    751a:	3b01      	subs	r3, #1
    751c:	9307      	str	r3, [sp, #28]
  return a >> offset;
    751e:	105b      	asrs	r3, r3, #1
    7520:	2200      	movs	r2, #0
    7522:	9310      	str	r3, [sp, #64]	; 0x40
  int left_shift = shift > 0 ? shift : 0;
    7524:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    7528:	9202      	str	r2, [sp, #8]
    752a:	4694      	mov	ip, r2
    752c:	9311      	str	r3, [sp, #68]	; 0x44
    752e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7530:	4563      	cmp	r3, ip
    7532:	f340 8085 	ble.w	7640 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x380>
    7536:	9b02      	ldr	r3, [sp, #8]
    7538:	2500      	movs	r5, #0
    753a:	445b      	add	r3, fp
    753c:	9308      	str	r3, [sp, #32]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    753e:	462c      	mov	r4, r5
    7540:	9b06      	ldr	r3, [sp, #24]
    7542:	42a3      	cmp	r3, r4
    7544:	dd74      	ble.n	7630 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>
      int32_t acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
    7546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7548:	4413      	add	r3, r2
    754a:	9309      	str	r3, [sp, #36]	; 0x24
    754c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    754e:	eb03 0905 	add.w	r9, r3, r5
      int32_t acc = 0;
    7552:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
    7554:	461e      	mov	r6, r3
    7556:	42b0      	cmp	r0, r6
    7558:	dd18      	ble.n	758c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
        int32_t input_val = input_data[b * accum_depth + d];
    755a:	9f09      	ldr	r7, [sp, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    755c:	f819 eb01 	ldrb.w	lr, [r9], #1
        int32_t input_val = input_data[b * accum_depth + d];
    7560:	f817 8b01 	ldrb.w	r8, [r7], #1
    7564:	9709      	str	r7, [sp, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    7566:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    7568:	44be      	add	lr, r7
    756a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    756c:	44b8      	add	r8, r7
    756e:	fb08 330e 	mla	r3, r8, lr, r3
      for (int d = 0; d < accum_depth; ++d) {
    7572:	3601      	adds	r6, #1
    7574:	e7ef      	b.n	7556 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
    7576:	bf00      	nop
    7578:	00017058 	.word	0x00017058
    757c:	00017060 	.word	0x00017060
    7580:	00017054 	.word	0x00017054
    7584:	0001705c 	.word	0x0001705c
    7588:	00000000 	.word	0x00000000
      }
      if (bias_data) {
    758c:	9e03      	ldr	r6, [sp, #12]
    758e:	b116      	cbz	r6, 7596 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d6>
        acc += bias_data[out_c];
    7590:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
    7594:	4433      	add	r3, r6
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    7596:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7598:	40b3      	lsls	r3, r6
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    759a:	459a      	cmp	sl, r3
    759c:	d128      	bne.n	75f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x330>
    759e:	f10a 4600 	add.w	r6, sl, #2147483648	; 0x80000000
    75a2:	f1d6 0800 	rsbs	r8, r6, #0
    75a6:	eb48 0806 	adc.w	r8, r8, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    75aa:	4f30      	ldr	r7, [pc, #192]	; (766c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>)
  std::int64_t ab_64 = a_64 * b_64;
    75ac:	fb83 360a 	smull	r3, r6, r3, sl
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    75b0:	2e00      	cmp	r6, #0
    75b2:	bfac      	ite	ge
    75b4:	f04f 4e80 	movge.w	lr, #1073741824	; 0x40000000
    75b8:	46be      	movlt	lr, r7
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    75ba:	f1b8 0f00 	cmp.w	r8, #0
    75be:	d11a      	bne.n	75f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x336>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    75c0:	eb1e 0303 	adds.w	r3, lr, r3
    75c4:	eb46 76ee 	adc.w	r6, r6, lr, asr #31
    75c8:	2e00      	cmp	r6, #0
    75ca:	da04      	bge.n	75d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x316>
    75cc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    75d0:	19db      	adds	r3, r3, r7
    75d2:	f146 0600 	adc.w	r6, r6, #0
    75d6:	0fdb      	lsrs	r3, r3, #31
    75d8:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  assert(exponent <= 31);
    75dc:	291f      	cmp	r1, #31
    75de:	4405      	add	r5, r0
    75e0:	dd0c      	ble.n	75fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33c>
    75e2:	4b23      	ldr	r3, [pc, #140]	; (7670 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b0>)
    75e4:	4a23      	ldr	r2, [pc, #140]	; (7674 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b4>)
    75e6:	4824      	ldr	r0, [pc, #144]	; (7678 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b8>)
    75e8:	f240 1167 	movw	r1, #359	; 0x167
    75ec:	f007 ff78 	bl	f4e0 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    75f0:	f04f 0800 	mov.w	r8, #0
    75f4:	e7d9      	b.n	75aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    75f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    75fa:	e7ef      	b.n	75dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31c>
  return a & b;
    75fc:	9e07      	ldr	r6, [sp, #28]
    75fe:	ea06 0903 	and.w	r9, r6, r3
  return a + b;
    7602:	9e10      	ldr	r6, [sp, #64]	; 0x40
    7604:	eb06 78d3 	add.w	r8, r6, r3, lsr #31
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
    7608:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  return a >> offset;
    760a:	410b      	asrs	r3, r1
  return a + b;
    760c:	45c1      	cmp	r9, r8
    760e:	bfc8      	it	gt
    7610:	3301      	addgt	r3, #1
    7612:	4433      	add	r3, r6
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
    7614:	9e04      	ldr	r6, [sp, #16]
    7616:	42b3      	cmp	r3, r6
    7618:	bfb8      	it	lt
    761a:	4633      	movlt	r3, r6
    761c:	9e05      	ldr	r6, [sp, #20]
    761e:	42b3      	cmp	r3, r6
    7620:	bfa8      	it	ge
    7622:	4633      	movge	r3, r6
    7624:	9e08      	ldr	r6, [sp, #32]
    7626:	f806 3b01 	strb.w	r3, [r6], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    762a:	3401      	adds	r4, #1
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
    762c:	9608      	str	r6, [sp, #32]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    762e:	e787      	b.n	7540 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>
  for (int b = 0; b < batches; ++b) {
    7630:	9c02      	ldr	r4, [sp, #8]
    7632:	9b06      	ldr	r3, [sp, #24]
    7634:	441c      	add	r4, r3
    7636:	f10c 0c01 	add.w	ip, ip, #1
    763a:	9402      	str	r4, [sp, #8]
    763c:	4402      	add	r2, r0
    763e:	e776      	b.n	752e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26e>
    7640:	a836      	add	r0, sp, #216	; 0xd8
    7642:	f009 ffa4 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
    7646:	a830      	add	r0, sp, #192	; 0xc0
    7648:	f009 ffa1 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
    764c:	a82a      	add	r0, sp, #168	; 0xa8
    764e:	f009 ff9e 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
    7652:	a824      	add	r0, sp, #144	; 0x90
    7654:	e6fa      	b.n	744c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    7656:	697d      	ldr	r5, [r7, #20]
    7658:	f002 f8f2 	bl	9840 <TfLiteTypeGetName>
    765c:	7a23      	ldrb	r3, [r4, #8]
    765e:	4907      	ldr	r1, [pc, #28]	; (767c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>)
    7660:	4602      	mov	r2, r0
    7662:	4638      	mov	r0, r7
    7664:	47a8      	blx	r5
      return kTfLiteError;
    7666:	2001      	movs	r0, #1
    7668:	e6fb      	b.n	7462 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
    766a:	bf00      	nop
    766c:	c0000001 	.word	0xc0000001
    7670:	00045059 	.word	0x00045059
    7674:	00045068 	.word	0x00045068
    7678:	000450bd 	.word	0x000450bd
    767c:	000451f3 	.word	0x000451f3

00007680 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    7680:	b570      	push	{r4, r5, r6, lr}
  fully_connected_registration.init = Init;
    7682:	4c0b      	ldr	r4, [pc, #44]	; (76b0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
  fully_connected_registration.free = nullptr;
  fully_connected_registration.prepare = Prepare;
    7684:	4a0b      	ldr	r2, [pc, #44]	; (76b4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x34>)
    7686:	60a2      	str	r2, [r4, #8]
  fully_connected_registration.init = Init;
    7688:	4b0b      	ldr	r3, [pc, #44]	; (76b8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
  fully_connected_registration.invoke = Eval;
    768a:	4a0c      	ldr	r2, [pc, #48]	; (76bc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.init = Init;
    768c:	6023      	str	r3, [r4, #0]
  fully_connected_registration.free = nullptr;
    768e:	2300      	movs	r3, #0
  fully_connected_registration.profiling_string = nullptr;
    7690:	e9c4 2303 	strd	r2, r3, [r4, #12]
  fully_connected_registration.free = nullptr;
    7694:	6063      	str	r3, [r4, #4]
TfLiteRegistration Register_FULLY_CONNECTED() {
    7696:	4606      	mov	r6, r0
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
    7698:	e9c4 3305 	strd	r3, r3, [r4, #20]
  fully_connected_registration.version = 0;
    769c:	61e3      	str	r3, [r4, #28]
  return fully_connected_registration;
    769e:	4605      	mov	r5, r0
    76a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    76a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    76a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    76a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    76ac:	4630      	mov	r0, r6
    76ae:	bd70      	pop	{r4, r5, r6, pc}
    76b0:	20000800 	.word	0x20000800
    76b4:	00007129 	.word	0x00007129
    76b8:	00011763 	.word	0x00011763
    76bc:	000072c1 	.word	0x000072c1

000076c0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  if (activation == kTfLiteActRelu) {
    76c0:	2901      	cmp	r1, #1
    76c2:	d103      	bne.n	76cc <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0xc>
    *activation_min = 0;
    76c4:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    76c6:	61c3      	str	r3, [r0, #28]
    *activation_max = std::numeric_limits<T>::max();
    76c8:	4b09      	ldr	r3, [pc, #36]	; (76f0 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x30>)
    76ca:	e004      	b.n	76d6 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
  } else if (activation == kTfLiteActRelu6) {
    76cc:	2903      	cmp	r1, #3
    76ce:	d104      	bne.n	76da <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1a>
    *activation_min = 0;
    76d0:	2300      	movs	r3, #0
    76d2:	61c3      	str	r3, [r0, #28]
    *activation_max = 6;
    76d4:	4b07      	ldr	r3, [pc, #28]	; (76f4 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x34>)
    *activation_max = std::numeric_limits<T>::max();
    76d6:	6203      	str	r3, [r0, #32]
    TfLiteFusedActivation activation) {
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
    76d8:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
    76da:	2902      	cmp	r1, #2
    76dc:	d104      	bne.n	76e8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x28>
    *activation_min = -1;
    76de:	4b06      	ldr	r3, [pc, #24]	; (76f8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x38>)
    76e0:	61c3      	str	r3, [r0, #28]
    *activation_max = 1;
    76e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    76e6:	e7f6      	b.n	76d6 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
    76e8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    76ec:	e7eb      	b.n	76c6 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x6>
    76ee:	bf00      	nop
    76f0:	7f7fffff 	.word	0x7f7fffff
    76f4:	40c00000 	.word	0x40c00000
    76f8:	bf800000 	.word	0xbf800000

000076fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
    76fc:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
    76fe:	b508      	push	{r3, lr}
  assert(exponent >= 0);
    7700:	da06      	bge.n	7710 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
    7702:	4b0d      	ldr	r3, [pc, #52]	; (7738 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
    7704:	4a0d      	ldr	r2, [pc, #52]	; (773c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    7706:	f44f 71b3 	mov.w	r1, #358	; 0x166
  assert(exponent <= 31);
    770a:	480d      	ldr	r0, [pc, #52]	; (7740 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
    770c:	f007 fee8 	bl	f4e0 <__assert_func>
    7710:	291f      	cmp	r1, #31
    7712:	dd04      	ble.n	771e <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
    7714:	4b0b      	ldr	r3, [pc, #44]	; (7744 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
    7716:	4a09      	ldr	r2, [pc, #36]	; (773c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
    7718:	f240 1167 	movw	r1, #359	; 0x167
    771c:	e7f5      	b.n	770a <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    771e:	2301      	movs	r3, #1
    7720:	408b      	lsls	r3, r1
    7722:	3b01      	subs	r3, #1
  return a & b;
    7724:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
    7728:	105b      	asrs	r3, r3, #1
  return a + b;
    772a:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
    772e:	4108      	asrs	r0, r1
}
    7730:	429a      	cmp	r2, r3
    7732:	bfc8      	it	gt
    7734:	3001      	addgt	r0, #1
    7736:	bd08      	pop	{r3, pc}
    7738:	00045492 	.word	0x00045492
    773c:	00045068 	.word	0x00045068
    7740:	000450bd 	.word	0x000450bd
    7744:	00045059 	.word	0x00045059

00007748 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    7748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    774c:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
    774e:	4814      	ldr	r0, [pc, #80]	; (77a0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
    7750:	f00a f8ce 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    7754:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    7756:	4813      	ldr	r0, [pc, #76]	; (77a4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
    7758:	f00a f8ca 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
    775c:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
    7760:	4680      	mov	r8, r0
  F x2 = x * x;
    7762:	4621      	mov	r1, r4
    7764:	4620      	mov	r0, r4
    7766:	f00a f8c8 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
    776a:	4621      	mov	r1, r4
  F x2 = x * x;
    776c:	4605      	mov	r5, r0
  F x3 = x2 * x;
    776e:	f00a f8c4 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
    7772:	4629      	mov	r1, r5
  F x3 = x2 * x;
    7774:	4607      	mov	r7, r0
  F x4 = x2 * x2;
    7776:	4628      	mov	r0, r5
    7778:	f00a f8bf 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    777c:	2102      	movs	r1, #2
    777e:	f7ff ffbd 	bl	76fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
    7782:	4641      	mov	r1, r8
    7784:	4438      	add	r0, r7
    7786:	f00a f8b8 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    778a:	2101      	movs	r1, #1
    778c:	4428      	add	r0, r5
    778e:	f7ff ffb5 	bl	76fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
    7792:	1821      	adds	r1, r4, r0
    7794:	4630      	mov	r0, r6
    7796:	f00a f8b0 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
    779a:	4430      	add	r0, r6
    779c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77a0:	70f5a894 	.word	0x70f5a894
    77a4:	2aaaaaab 	.word	0x2aaaaaab

000077a8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
    77a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    77ac:	ed2d 8b04 	vpush	{d8-d9}
    77b0:	461f      	mov	r7, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    77b2:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
    77b4:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    77b6:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
    77b8:	4604      	mov	r4, r0
    77ba:	460e      	mov	r6, r1
    77bc:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    77be:	d001      	beq.n	77c4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
    77c0:	f00e f8cc 	bl	1595c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    77c4:	683b      	ldr	r3, [r7, #0]
    77c6:	2b04      	cmp	r3, #4
    77c8:	d1fa      	bne.n	77c0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    77ca:	2300      	movs	r3, #0
    77cc:	4619      	mov	r1, r3
    77ce:	463a      	mov	r2, r7
    77d0:	4630      	mov	r0, r6
    77d2:	f009 ff71 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    77d6:	2303      	movs	r3, #3
    77d8:	4619      	mov	r1, r3
    77da:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
    77dc:	9009      	str	r0, [sp, #36]	; 0x24
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    77de:	4630      	mov	r0, r6
    77e0:	f009 ff6a 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
    77e4:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    77e6:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_height = input_shape.Dims(1);
    77e8:	4630      	mov	r0, r6
    77ea:	f009 fedb 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
    77ee:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
    77f0:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_width = input_shape.Dims(2);
    77f2:	4630      	mov	r0, r6
    77f4:	f009 fed6 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
    77f8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
    77fa:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
    77fc:	4638      	mov	r0, r7
    77fe:	f009 fed1 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
    7802:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
    7804:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
    7806:	4638      	mov	r0, r7
    7808:	f009 fecc 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
    780c:	68e3      	ldr	r3, [r4, #12]
    780e:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
    7810:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
    7812:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
    7814:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
    7816:	f04f 0b00 	mov.w	fp, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
    781a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  for (int batch = 0; batch < batches; ++batch) {
    781e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7820:	459b      	cmp	fp, r3
    7822:	f280 8093 	bge.w	794c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
    7826:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
    782a:	f8cd a00c 	str.w	sl, [sp, #12]
    782e:	9b03      	ldr	r3, [sp, #12]
    7830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7832:	4293      	cmp	r3, r2
    7834:	f280 8087 	bge.w	7946 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19e>
    7838:	f04f 0900 	mov.w	r9, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
    783c:	f8cd 9010 	str.w	r9, [sp, #16]
    7840:	9b04      	ldr	r3, [sp, #16]
    7842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7844:	4293      	cmp	r3, r2
    7846:	da78      	bge.n	793a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
        for (int channel = 0; channel < depth; ++channel) {
    7848:	2300      	movs	r3, #0
    784a:	9302      	str	r3, [sp, #8]
    784c:	9b02      	ldr	r3, [sp, #8]
    784e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7850:	4293      	cmp	r3, r2
    7852:	da6c      	bge.n	792e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x186>
              (out_x * stride_width) - params.padding_values.width;
    7854:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
    7858:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          float filter_count = 0;
    785c:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 7958 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1b0>
          const int in_x_origin =
    7860:	eba9 0308 	sub.w	r3, r9, r8
    7864:	9306      	str	r3, [sp, #24]
          const int in_y_origin =
    7866:	ebaa 0305 	sub.w	r3, sl, r5
    786a:	9307      	str	r3, [sp, #28]
          const int filter_x_start = std::max(0, -in_x_origin);
    786c:	eba8 0309 	sub.w	r3, r8, r9
    7870:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
              std::min(params.filter_width, input_width - in_x_origin);
    7874:	9a06      	ldr	r2, [sp, #24]
    7876:	9305      	str	r3, [sp, #20]
    7878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    787a:	1a9a      	subs	r2, r3, r2
    787c:	69a3      	ldr	r3, [r4, #24]
    787e:	429a      	cmp	r2, r3
    7880:	bfa8      	it	ge
    7882:	461a      	movge	r2, r3
    7884:	9211      	str	r2, [sp, #68]	; 0x44
              std::min(params.filter_height, input_height - in_y_origin);
    7886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7888:	9a07      	ldr	r2, [sp, #28]
    788a:	1a9a      	subs	r2, r3, r2
    788c:	6963      	ldr	r3, [r4, #20]
    788e:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
    7890:	eba5 050a 	sub.w	r5, r5, sl
    7894:	bfa8      	it	ge
    7896:	461a      	movge	r2, r3
    7898:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    min(const _Tp& __a, const _Tp& __b)
    789c:	9208      	str	r2, [sp, #32]
          float total = 0.f;
    789e:	eef0 8a48 	vmov.f32	s17, s16
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    78a2:	9b08      	ldr	r3, [sp, #32]
    78a4:	42ab      	cmp	r3, r5
    78a6:	dd1e      	ble.n	78e6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13e>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    78a8:	9b07      	ldr	r3, [sp, #28]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    78aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    78ae:	18ea      	adds	r2, r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    78b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    78b2:	4598      	cmp	r8, r3
    78b4:	da15      	bge.n	78e2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13a>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    78b6:	9b02      	ldr	r3, [sp, #8]
    78b8:	9300      	str	r3, [sp, #0]
    78ba:	9b06      	ldr	r3, [sp, #24]
    78bc:	9213      	str	r2, [sp, #76]	; 0x4c
    78be:	4443      	add	r3, r8
    78c0:	4659      	mov	r1, fp
    78c2:	4630      	mov	r0, r6
    78c4:	f009 fecd 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    78c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    78ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
    78cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              total +=
    78d0:	edd0 7a00 	vldr	s15, [r0]
              filter_count++;
    78d4:	ee38 8a29 	vadd.f32	s16, s16, s19
              total +=
    78d8:	ee78 8aa7 	vadd.f32	s17, s17, s15
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
    78dc:	f108 0801 	add.w	r8, r8, #1
    78e0:	e7e6      	b.n	78b0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
    78e2:	3501      	adds	r5, #1
    78e4:	e7dd      	b.n	78a2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfa>
            }
          }
          const float average = total / filter_count;
    78e6:	ee88 9a88 	vdiv.f32	s18, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    78ea:	9b02      	ldr	r3, [sp, #8]
    78ec:	9300      	str	r3, [sp, #0]
    78ee:	4659      	mov	r1, fp
    78f0:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    78f4:	4638      	mov	r0, r7
    78f6:	f009 feb4 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    78fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    78fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(average, params.float_activation_min,
    7900:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
                                           params.float_activation_max);
    7904:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
        for (int channel = 0; channel < depth; ++channel) {
    7908:	9b02      	ldr	r3, [sp, #8]
      return __a;
    790a:	eeb4 8ac9 	vcmpe.f32	s16, s18
    790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7912:	bfd8      	it	le
    7914:	eeb0 8a49 	vmovle.f32	s16, s18
	return __b;
    7918:	eef4 8a48 	vcmp.f32	s17, s16
    791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7920:	bf48      	it	mi
    7922:	eeb0 8a68 	vmovmi.f32	s16, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
    7926:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
    792a:	3301      	adds	r3, #1
    792c:	e78d      	b.n	784a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    792e:	9b04      	ldr	r3, [sp, #16]
    7930:	3301      	adds	r3, #1
    7932:	9304      	str	r3, [sp, #16]
    7934:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7936:	4499      	add	r9, r3
    7938:	e782      	b.n	7840 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    793a:	9b03      	ldr	r3, [sp, #12]
    793c:	3301      	adds	r3, #1
    793e:	9303      	str	r3, [sp, #12]
    7940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7942:	449a      	add	sl, r3
    7944:	e773      	b.n	782e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x86>
  for (int batch = 0; batch < batches; ++batch) {
    7946:	f10b 0b01 	add.w	fp, fp, #1
    794a:	e768      	b.n	781e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x76>
        }
      }
    }
  }
}
    794c:	b015      	add	sp, #84	; 0x54
    794e:	ecbd 8b04 	vpop	{d8-d9}
    7952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7956:	bf00      	nop
    7958:	00000000 	.word	0x00000000

0000795c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
    795c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    795e:	4d05      	ldr	r5, [pc, #20]	; (7974 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x18>)
TfLiteRegistration Register_MAX_POOL_2D() {
    7960:	4606      	mov	r6, r0
          /*version=*/0};
    7962:	4604      	mov	r4, r0
    7964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7968:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    796c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    7970:	4630      	mov	r0, r6
    7972:	bd70      	pop	{r4, r5, r6, pc}
    7974:	00016480 	.word	0x00016480

00007978 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
  if (activation == kTfLiteActRelu) {
    7978:	2801      	cmp	r0, #1
    797a:	d103      	bne.n	7984 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0xc>
    *activation_min = 0;
    797c:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
    797e:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    7980:	4b09      	ldr	r3, [pc, #36]	; (79a8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x30>)
    7982:	e004      	b.n	798e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
  } else if (activation == kTfLiteActRelu6) {
    7984:	2803      	cmp	r0, #3
    7986:	d104      	bne.n	7992 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x1a>
    *activation_min = 0;
    7988:	2300      	movs	r3, #0
    798a:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    798c:	4b07      	ldr	r3, [pc, #28]	; (79ac <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x34>)
    *activation_max = std::numeric_limits<T>::max();
    798e:	6013      	str	r3, [r2, #0]
  }
}
    7990:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
    7992:	2802      	cmp	r0, #2
    7994:	d104      	bne.n	79a0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x28>
    *activation_min = -1;
    7996:	4b06      	ldr	r3, [pc, #24]	; (79b0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    7998:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    799a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    799e:	e7f6      	b.n	798e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
    79a0:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    79a4:	e7eb      	b.n	797e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x6>
    79a6:	bf00      	nop
    79a8:	7f7fffff 	.word	0x7f7fffff
    79ac:	40c00000 	.word	0x40c00000
    79b0:	bf800000 	.word	0xbf800000

000079b4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    79b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
    79b8:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    79bc:	4604      	mov	r4, r0
    79be:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    79c0:	f1b8 0f00 	cmp.w	r8, #0
    79c4:	d101      	bne.n	79ca <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
    79c6:	f00d ffc9 	bl	1595c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    79ca:	694f      	ldr	r7, [r1, #20]
    79cc:	2f00      	cmp	r7, #0
    79ce:	d0fa      	beq.n	79c6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x12>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    79d0:	2200      	movs	r2, #0
    79d2:	f009 fdc7 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    79d6:	4606      	mov	r6, r0
    79d8:	b960      	cbnz	r0, 79f4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x40>
    79da:	4b11      	ldr	r3, [pc, #68]	; (7a20 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
    79dc:	6965      	ldr	r5, [r4, #20]
    79de:	9300      	str	r3, [sp, #0]
    79e0:	f44f 738e 	mov.w	r3, #284	; 0x11c
  TF_LITE_ENSURE(context, output != nullptr);
    79e4:	4620      	mov	r0, r4
    79e6:	4a0f      	ldr	r2, [pc, #60]	; (7a24 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
    79e8:	490f      	ldr	r1, [pc, #60]	; (7a28 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
    79ea:	47a8      	blx	r5
    79ec:	2001      	movs	r0, #1
}
    79ee:	b002      	add	sp, #8
    79f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    79f4:	2200      	movs	r2, #0
    79f6:	4629      	mov	r1, r5
    79f8:	4620      	mov	r0, r4
    79fa:	f009 fdb6 	bl	1156a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    79fe:	4603      	mov	r3, r0
    7a00:	b928      	cbnz	r0, 7a0e <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
    7a02:	4b0a      	ldr	r3, [pc, #40]	; (7a2c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    7a04:	9300      	str	r3, [sp, #0]
    7a06:	6965      	ldr	r5, [r4, #20]
    7a08:	f44f 738f 	mov.w	r3, #286	; 0x11e
    7a0c:	e7ea      	b.n	79e4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
    7a0e:	f8cd 8000 	str.w	r8, [sp]
    7a12:	4632      	mov	r2, r6
    7a14:	4639      	mov	r1, r7
    7a16:	4620      	mov	r0, r4
    7a18:	f00a f9fb 	bl	11e12 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
    7a1c:	e7e7      	b.n	79ee <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    7a1e:	bf00      	nop
    7a20:	0004513a 	.word	0x0004513a
    7a24:	000454a0 	.word	0x000454a0
    7a28:	00044ead 	.word	0x00044ead
    7a2c:	0004515d 	.word	0x0004515d

00007a30 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    7a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    7a34:	694e      	ldr	r6, [r1, #20]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    7a36:	b0ac      	sub	sp, #176	; 0xb0
    7a38:	4680      	mov	r8, r0
    7a3a:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    7a3c:	b90e      	cbnz	r6, 7a42 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x12>
    7a3e:	f00d ff8d 	bl	1595c <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    7a42:	690d      	ldr	r5, [r1, #16]
    7a44:	2d00      	cmp	r5, #0
    7a46:	d0fa      	beq.n	7a3e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
  return GetMutableEvalInput(context, node, index);
    7a48:	2200      	movs	r2, #0
    7a4a:	f009 fdde 	bl	1160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
    7a4e:	4621      	mov	r1, r4
    7a50:	4607      	mov	r7, r0
    7a52:	2200      	movs	r2, #0
    7a54:	4640      	mov	r0, r8
    7a56:	f009 fde6 	bl	11626 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
    7a5a:	4604      	mov	r4, r0
  switch (input->type) {
    7a5c:	7a38      	ldrb	r0, [r7, #8]
    7a5e:	2803      	cmp	r0, #3
    7a60:	d038      	beq.n	7ad4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    7a62:	2809      	cmp	r0, #9
    7a64:	d05c      	beq.n	7b20 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xf0>
    7a66:	2801      	cmp	r0, #1
    7a68:	f040 80b4 	bne.w	7bd4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
  CalculateActivationRange(params->activation, &activation_min,
    7a6c:	aa11      	add	r2, sp, #68	; 0x44
    7a6e:	7d30      	ldrb	r0, [r6, #20]
    7a70:	a90d      	add	r1, sp, #52	; 0x34
    7a72:	f7ff ff81 	bl	7978 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
    7a76:	68b3      	ldr	r3, [r6, #8]
    7a78:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
    7a7a:	6873      	ldr	r3, [r6, #4]
    7a7c:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
    7a7e:	6933      	ldr	r3, [r6, #16]
    7a80:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
    7a82:	68f3      	ldr	r3, [r6, #12]
    7a84:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
    7a86:	686b      	ldr	r3, [r5, #4]
    7a88:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
    7a8c:	682b      	ldr	r3, [r5, #0]
    7a8e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.float_activation_min = data.activation_min_f32;
    7a92:	69eb      	ldr	r3, [r5, #28]
    7a94:	932a      	str	r3, [sp, #168]	; 0xa8
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7a96:	4639      	mov	r1, r7
  op_params.float_activation_max = data.activation_max_f32;
    7a98:	6a2b      	ldr	r3, [r5, #32]
    7a9a:	932b      	str	r3, [sp, #172]	; 0xac
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7a9c:	a815      	add	r0, sp, #84	; 0x54
    7a9e:	f009 fecb 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    7aa2:	683a      	ldr	r2, [r7, #0]
    7aa4:	9205      	str	r2, [sp, #20]
                         tflite::micro::GetTensorShape(output),
    7aa6:	4621      	mov	r1, r4
    7aa8:	a81b      	add	r0, sp, #108	; 0x6c
    7aaa:	f009 fec5 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7aae:	9a05      	ldr	r2, [sp, #20]
    7ab0:	b104      	cbz	r4, 7ab4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x84>
    7ab2:	6824      	ldr	r4, [r4, #0]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7ab4:	9400      	str	r4, [sp, #0]
    7ab6:	ab1b      	add	r3, sp, #108	; 0x6c
    7ab8:	a915      	add	r1, sp, #84	; 0x54
    7aba:	a821      	add	r0, sp, #132	; 0x84
    7abc:	f009 fffc 	bl	11ab8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
    7ac0:	a81b      	add	r0, sp, #108	; 0x6c
    7ac2:	f009 fd64 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7ac6:	a815      	add	r0, sp, #84	; 0x54
    7ac8:	f009 fd61 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    7acc:	2000      	movs	r0, #0
}
    7ace:	b02c      	add	sp, #176	; 0xb0
    7ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  op_params.stride_height = params->stride_height;
    7ad4:	68b3      	ldr	r3, [r6, #8]
    7ad6:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
    7ad8:	6873      	ldr	r3, [r6, #4]
    7ada:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
    7adc:	6933      	ldr	r3, [r6, #16]
    7ade:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
    7ae0:	68f3      	ldr	r3, [r6, #12]
    7ae2:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
    7ae4:	686b      	ldr	r3, [r5, #4]
    7ae6:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
    7aea:	682b      	ldr	r3, [r5, #0]
    7aec:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.quantized_activation_min = data.activation_min;
    7af0:	696b      	ldr	r3, [r5, #20]
    7af2:	9328      	str	r3, [sp, #160]	; 0xa0
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7af4:	4639      	mov	r1, r7
  op_params.quantized_activation_max = data.activation_max;
    7af6:	69ab      	ldr	r3, [r5, #24]
    7af8:	9329      	str	r3, [sp, #164]	; 0xa4
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7afa:	a815      	add	r0, sp, #84	; 0x54
    7afc:	f009 fe9c 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    7b00:	683a      	ldr	r2, [r7, #0]
    7b02:	9205      	str	r2, [sp, #20]
                         tflite::micro::GetTensorShape(output),
    7b04:	4621      	mov	r1, r4
    7b06:	a81b      	add	r0, sp, #108	; 0x6c
    7b08:	f009 fe96 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7b0c:	9a05      	ldr	r2, [sp, #20]
    7b0e:	b104      	cbz	r4, 7b12 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    7b10:	6824      	ldr	r4, [r4, #0]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
    7b12:	9400      	str	r4, [sp, #0]
    7b14:	ab1b      	add	r3, sp, #108	; 0x6c
    7b16:	a915      	add	r1, sp, #84	; 0x54
    7b18:	a821      	add	r0, sp, #132	; 0x84
    7b1a:	f00a f8a7 	bl	11c6c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    7b1e:	e7cf      	b.n	7ac0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    7b20:	4639      	mov	r1, r7
    7b22:	a815      	add	r0, sp, #84	; 0x54
    7b24:	f009 fe88 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    7b28:	4621      	mov	r1, r4
    7b2a:	a81b      	add	r0, sp, #108	; 0x6c
    7b2c:	f009 fe84 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    7b30:	2303      	movs	r3, #3
    7b32:	4619      	mov	r1, r3
    7b34:	aa1b      	add	r2, sp, #108	; 0x6c
    7b36:	a815      	add	r0, sp, #84	; 0x54
    7b38:	f009 fdbe 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.n = 1;
    7b3c:	f04f 0901 	mov.w	r9, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    7b40:	4682      	mov	sl, r0
  input_dims.h = input_shape.Dims(1);
    7b42:	4649      	mov	r1, r9
    7b44:	a815      	add	r0, sp, #84	; 0x54
  input_dims.n = 1;
    7b46:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  input_dims.h = input_shape.Dims(1);
    7b4a:	f009 fd2b 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  input_dims.w = input_shape.Dims(2);
    7b4e:	2102      	movs	r1, #2
  input_dims.h = input_shape.Dims(1);
    7b50:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.w = input_shape.Dims(2);
    7b52:	a815      	add	r0, sp, #84	; 0x54
    7b54:	f009 fd26 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.h = output_shape.Dims(1);
    7b58:	4649      	mov	r1, r9
  input_dims.c = depth;
    7b5a:	e9cd 0a0b 	strd	r0, sl, [sp, #44]	; 0x2c
  output_dims.h = output_shape.Dims(1);
    7b5e:	a81b      	add	r0, sp, #108	; 0x6c
  output_dims.n = 1;
    7b60:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  output_dims.h = output_shape.Dims(1);
    7b64:	f009 fd1e 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.w = output_shape.Dims(2);
    7b68:	2102      	movs	r1, #2
  output_dims.h = output_shape.Dims(1);
    7b6a:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.w = output_shape.Dims(2);
    7b6c:	a81b      	add	r0, sp, #108	; 0x6c
    7b6e:	f009 fd19 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  pool_params.stride.h = params->stride_height;
    7b72:	68b3      	ldr	r3, [r6, #8]
    7b74:	9322      	str	r3, [sp, #136]	; 0x88
  pool_params.stride.w = params->stride_width;
    7b76:	6873      	ldr	r3, [r6, #4]
    7b78:	9321      	str	r3, [sp, #132]	; 0x84
  pool_params.padding.h = data.padding.height;
    7b7a:	686b      	ldr	r3, [r5, #4]
    7b7c:	9324      	str	r3, [sp, #144]	; 0x90
  pool_params.padding.w = data.padding.width;
    7b7e:	682b      	ldr	r3, [r5, #0]
    7b80:	9323      	str	r3, [sp, #140]	; 0x8c
  pool_params.activation.min = data.activation_min;
    7b82:	696b      	ldr	r3, [r5, #20]
    7b84:	9325      	str	r3, [sp, #148]	; 0x94
  pool_params.activation.max = data.activation_max;
    7b86:	69ab      	ldr	r3, [r5, #24]
    7b88:	9326      	str	r3, [sp, #152]	; 0x98
  filter_dims.h = params->filter_height;
    7b8a:	6933      	ldr	r3, [r6, #16]
    7b8c:	9312      	str	r3, [sp, #72]	; 0x48
  filter_dims.w = params->filter_width;
    7b8e:	68f3      	ldr	r3, [r6, #12]
  if (data.buffer_idx > -1) {
    7b90:	6929      	ldr	r1, [r5, #16]
  filter_dims.n = 1;
    7b92:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  filter_dims.c = 1;
    7b96:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
  ctx.buf = nullptr;
    7b9a:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
    7b9c:	4299      	cmp	r1, r3
  output_dims.c = depth;
    7b9e:	e9cd 0a0f 	strd	r0, sl, [sp, #60]	; 0x3c
  ctx.size = 0;
    7ba2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (data.buffer_idx > -1) {
    7ba6:	db04      	blt.n	7bb2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    7ba8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    7bac:	4640      	mov	r0, r8
    7bae:	4798      	blx	r3
    7bb0:	9007      	str	r0, [sp, #28]
  return reinterpret_cast<const T*>(tensor->data.raw);
    7bb2:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7bb4:	b104      	cbz	r4, 7bb8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x188>
    7bb6:	6824      	ldr	r4, [r4, #0]
  TFLITE_DCHECK_EQ(
    7bb8:	9402      	str	r4, [sp, #8]
    7bba:	aa0d      	add	r2, sp, #52	; 0x34
    7bbc:	9201      	str	r2, [sp, #4]
    7bbe:	aa11      	add	r2, sp, #68	; 0x44
    7bc0:	9200      	str	r2, [sp, #0]
    7bc2:	a921      	add	r1, sp, #132	; 0x84
    7bc4:	aa09      	add	r2, sp, #36	; 0x24
    7bc6:	a807      	add	r0, sp, #28
    7bc8:	f00c fbb8 	bl	1433c <arm_max_pool_s8>
    7bcc:	2800      	cmp	r0, #0
    7bce:	f43f af77 	beq.w	7ac0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x90>
    7bd2:	e734      	b.n	7a3e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xe>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    7bd4:	f8d8 4014 	ldr.w	r4, [r8, #20]
    7bd8:	f001 fe32 	bl	9840 <TfLiteTypeGetName>
    7bdc:	4902      	ldr	r1, [pc, #8]	; (7be8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
    7bde:	4602      	mov	r2, r0
    7be0:	4640      	mov	r0, r8
    7be2:	47a0      	blx	r4
      return kTfLiteError;
    7be4:	2001      	movs	r0, #1
    7be6:	e772      	b.n	7ace <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
    7be8:	000454dd 	.word	0x000454dd

00007bec <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    7bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    7bf0:	694d      	ldr	r5, [r1, #20]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    7bf2:	b0ac      	sub	sp, #176	; 0xb0
    7bf4:	4680      	mov	r8, r0
    7bf6:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    7bf8:	b90d      	cbnz	r5, 7bfe <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x12>
    7bfa:	f00d feaf 	bl	1595c <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    7bfe:	690e      	ldr	r6, [r1, #16]
    7c00:	2e00      	cmp	r6, #0
    7c02:	d0fa      	beq.n	7bfa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
  return GetMutableEvalInput(context, node, index);
    7c04:	2200      	movs	r2, #0
    7c06:	f009 fd00 	bl	1160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
    7c0a:	4621      	mov	r1, r4
    7c0c:	4607      	mov	r7, r0
    7c0e:	2200      	movs	r2, #0
    7c10:	4640      	mov	r0, r8
    7c12:	f009 fd08 	bl	11626 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
    7c16:	4604      	mov	r4, r0
  switch (input->type) {
    7c18:	7a38      	ldrb	r0, [r7, #8]
    7c1a:	2803      	cmp	r0, #3
    7c1c:	d038      	beq.n	7c90 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    7c1e:	2809      	cmp	r0, #9
    7c20:	d05c      	beq.n	7cdc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xf0>
    7c22:	2801      	cmp	r0, #1
    7c24:	f040 80ba 	bne.w	7d9c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1b0>
  CalculateActivationRange(params->activation, &activation_min,
    7c28:	aa11      	add	r2, sp, #68	; 0x44
    7c2a:	7d28      	ldrb	r0, [r5, #20]
    7c2c:	a90d      	add	r1, sp, #52	; 0x34
    7c2e:	f7ff fea3 	bl	7978 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
    7c32:	68ab      	ldr	r3, [r5, #8]
    7c34:	9324      	str	r3, [sp, #144]	; 0x90
  op_params.stride_width = params->stride_width;
    7c36:	686b      	ldr	r3, [r5, #4]
    7c38:	9325      	str	r3, [sp, #148]	; 0x94
  op_params.filter_height = params->filter_height;
    7c3a:	692b      	ldr	r3, [r5, #16]
    7c3c:	9326      	str	r3, [sp, #152]	; 0x98
  op_params.filter_width = params->filter_width;
    7c3e:	68eb      	ldr	r3, [r5, #12]
    7c40:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.padding_values.height = data.padding.height;
    7c42:	6873      	ldr	r3, [r6, #4]
    7c44:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  op_params.padding_values.width = data.padding.width;
    7c48:	6833      	ldr	r3, [r6, #0]
    7c4a:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
  op_params.float_activation_min = activation_min;
    7c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c50:	932a      	str	r3, [sp, #168]	; 0xa8
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    7c52:	4639      	mov	r1, r7
  op_params.float_activation_max = activation_max;
    7c54:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7c56:	932b      	str	r3, [sp, #172]	; 0xac
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    7c58:	a815      	add	r0, sp, #84	; 0x54
    7c5a:	f009 fded 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    7c5e:	683a      	ldr	r2, [r7, #0]
    7c60:	9205      	str	r2, [sp, #20]
                             tflite::micro::GetTensorShape(output),
    7c62:	4621      	mov	r1, r4
    7c64:	a81b      	add	r0, sp, #108	; 0x6c
    7c66:	f009 fde7 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7c6a:	9a05      	ldr	r2, [sp, #20]
    7c6c:	b104      	cbz	r4, 7c70 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x84>
    7c6e:	6824      	ldr	r4, [r4, #0]
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    7c70:	9400      	str	r4, [sp, #0]
    7c72:	ab1b      	add	r3, sp, #108	; 0x6c
    7c74:	a915      	add	r1, sp, #84	; 0x54
    7c76:	a821      	add	r0, sp, #132	; 0x84
    7c78:	f7ff fd96 	bl	77a8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                               tflite::micro::GetTensorShape(output),
    7c7c:	a81b      	add	r0, sp, #108	; 0x6c
    7c7e:	f009 fc86 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    7c82:	a815      	add	r0, sp, #84	; 0x54
    7c84:	f009 fc83 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
    7c88:	2000      	movs	r0, #0
}
    7c8a:	b02c      	add	sp, #176	; 0xb0
    7c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    op_params.stride_height = params->stride_height;
    7c90:	68ab      	ldr	r3, [r5, #8]
    7c92:	9324      	str	r3, [sp, #144]	; 0x90
    op_params.stride_width = params->stride_width;
    7c94:	686b      	ldr	r3, [r5, #4]
    7c96:	9325      	str	r3, [sp, #148]	; 0x94
    op_params.filter_height = params->filter_height;
    7c98:	692b      	ldr	r3, [r5, #16]
    7c9a:	9326      	str	r3, [sp, #152]	; 0x98
    op_params.filter_width = params->filter_width;
    7c9c:	68eb      	ldr	r3, [r5, #12]
    7c9e:	9327      	str	r3, [sp, #156]	; 0x9c
    op_params.padding_values.height = data.padding.height;
    7ca0:	6873      	ldr	r3, [r6, #4]
    7ca2:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    op_params.padding_values.width = data.padding.width;
    7ca6:	6833      	ldr	r3, [r6, #0]
    7ca8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    op_params.quantized_activation_min = data.activation_min;
    7cac:	6973      	ldr	r3, [r6, #20]
    7cae:	9328      	str	r3, [sp, #160]	; 0xa0
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    7cb0:	4639      	mov	r1, r7
    op_params.quantized_activation_max = data.activation_max;
    7cb2:	69b3      	ldr	r3, [r6, #24]
    7cb4:	9329      	str	r3, [sp, #164]	; 0xa4
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    7cb6:	a815      	add	r0, sp, #84	; 0x54
    7cb8:	f009 fdbe 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    7cbc:	683a      	ldr	r2, [r7, #0]
    7cbe:	9205      	str	r2, [sp, #20]
                               tflite::micro::GetTensorShape(output),
    7cc0:	4621      	mov	r1, r4
    7cc2:	a81b      	add	r0, sp, #108	; 0x6c
    7cc4:	f009 fdb8 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7cc8:	9a05      	ldr	r2, [sp, #20]
    7cca:	b104      	cbz	r4, 7cce <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    7ccc:	6824      	ldr	r4, [r4, #0]
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
    7cce:	9400      	str	r4, [sp, #0]
    7cd0:	ab1b      	add	r3, sp, #108	; 0x6c
    7cd2:	a915      	add	r1, sp, #84	; 0x54
    7cd4:	a821      	add	r0, sp, #132	; 0x84
    7cd6:	f009 fe1d 	bl	11914 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
    7cda:	e7cf      	b.n	7c7c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x90>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
    7cdc:	4639      	mov	r1, r7
    7cde:	a815      	add	r0, sp, #84	; 0x54
    7ce0:	f009 fdaa 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    7ce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7ce6:	2b04      	cmp	r3, #4
    7ce8:	d187      	bne.n	7bfa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
    7cea:	4621      	mov	r1, r4
    7cec:	a81b      	add	r0, sp, #108	; 0x6c
    7cee:	f009 fda3 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    7cf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7cf4:	2b04      	cmp	r3, #4
    7cf6:	d180      	bne.n	7bfa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    7cf8:	2303      	movs	r3, #3
    7cfa:	4619      	mov	r1, r3
    7cfc:	aa1b      	add	r2, sp, #108	; 0x6c
    7cfe:	a815      	add	r0, sp, #84	; 0x54
    7d00:	f009 fcda 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    input_dims.n = 1;
    7d04:	f04f 0901 	mov.w	r9, #1
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
    7d08:	4682      	mov	sl, r0
    input_dims.h = input_shape.Dims(1);
    7d0a:	4649      	mov	r1, r9
    7d0c:	a815      	add	r0, sp, #84	; 0x54
    input_dims.n = 1;
    7d0e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    input_dims.h = input_shape.Dims(1);
    7d12:	f009 fc47 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
    7d16:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
    7d18:	900a      	str	r0, [sp, #40]	; 0x28
    input_dims.w = input_shape.Dims(2);
    7d1a:	a815      	add	r0, sp, #84	; 0x54
    7d1c:	f009 fc42 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.h = output_shape.Dims(1);
    7d20:	4649      	mov	r1, r9
    input_dims.c = depth;
    7d22:	e9cd 0a0b 	strd	r0, sl, [sp, #44]	; 0x2c
    output_dims.h = output_shape.Dims(1);
    7d26:	a81b      	add	r0, sp, #108	; 0x6c
    output_dims.n = 1;
    7d28:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    output_dims.h = output_shape.Dims(1);
    7d2c:	f009 fc3a 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
    7d30:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
    7d32:	900e      	str	r0, [sp, #56]	; 0x38
    output_dims.w = output_shape.Dims(2);
    7d34:	a81b      	add	r0, sp, #108	; 0x6c
    7d36:	f009 fc35 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
    pool_params.stride.h = params->stride_height;
    7d3a:	68ab      	ldr	r3, [r5, #8]
    7d3c:	9322      	str	r3, [sp, #136]	; 0x88
    pool_params.stride.w = params->stride_width;
    7d3e:	686b      	ldr	r3, [r5, #4]
    7d40:	9321      	str	r3, [sp, #132]	; 0x84
    pool_params.padding.h = data.padding.height;
    7d42:	6873      	ldr	r3, [r6, #4]
    7d44:	9324      	str	r3, [sp, #144]	; 0x90
    pool_params.padding.w = data.padding.width;
    7d46:	6833      	ldr	r3, [r6, #0]
    7d48:	9323      	str	r3, [sp, #140]	; 0x8c
    pool_params.activation.min = data.activation_min;
    7d4a:	6973      	ldr	r3, [r6, #20]
    7d4c:	9325      	str	r3, [sp, #148]	; 0x94
    pool_params.activation.max = data.activation_max;
    7d4e:	69b3      	ldr	r3, [r6, #24]
    7d50:	9326      	str	r3, [sp, #152]	; 0x98
    filter_dims.h = params->filter_height;
    7d52:	692b      	ldr	r3, [r5, #16]
    7d54:	9312      	str	r3, [sp, #72]	; 0x48
    filter_dims.w = params->filter_width;
    7d56:	68eb      	ldr	r3, [r5, #12]
    if (data.buffer_idx > -1) {
    7d58:	6931      	ldr	r1, [r6, #16]
    filter_dims.n = 1;
    7d5a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    filter_dims.c = 1;
    7d5e:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
    ctx.buf = nullptr;
    7d62:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
    7d64:	4299      	cmp	r1, r3
    output_dims.c = depth;
    7d66:	e9cd 0a0f 	strd	r0, sl, [sp, #60]	; 0x3c
    ctx.size = 0;
    7d6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
    if (data.buffer_idx > -1) {
    7d6e:	db04      	blt.n	7d7a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x18e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
    7d70:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    7d74:	4640      	mov	r0, r8
    7d76:	4798      	blx	r3
    7d78:	9007      	str	r0, [sp, #28]
  return reinterpret_cast<const T*>(tensor->data.raw);
    7d7a:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    7d7c:	b104      	cbz	r4, 7d80 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x194>
    7d7e:	6824      	ldr	r4, [r4, #0]
    TFLITE_DCHECK_EQ(
    7d80:	9402      	str	r4, [sp, #8]
    7d82:	aa0d      	add	r2, sp, #52	; 0x34
    7d84:	9201      	str	r2, [sp, #4]
    7d86:	aa11      	add	r2, sp, #68	; 0x44
    7d88:	9200      	str	r2, [sp, #0]
    7d8a:	a921      	add	r1, sp, #132	; 0x84
    7d8c:	aa09      	add	r2, sp, #36	; 0x24
    7d8e:	a807      	add	r0, sp, #28
    7d90:	f00c f9f6 	bl	14180 <arm_avgpool_s8>
    7d94:	2800      	cmp	r0, #0
    7d96:	f43f af71 	beq.w	7c7c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x90>
    7d9a:	e72e      	b.n	7bfa <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    7d9c:	f8d8 4014 	ldr.w	r4, [r8, #20]
    7da0:	f001 fd4e 	bl	9840 <TfLiteTypeGetName>
    7da4:	4902      	ldr	r1, [pc, #8]	; (7db0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
    7da6:	4602      	mov	r2, r0
    7da8:	4640      	mov	r0, r8
    7daa:	47a0      	blx	r4
      return kTfLiteError;
    7dac:	2001      	movs	r0, #1
    7dae:	e76c      	b.n	7c8a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x9e>
    7db0:	000454fe 	.word	0x000454fe

00007db4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    7db4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    7db8:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    7dba:	4604      	mov	r4, r0
    7dbc:	4688      	mov	r8, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    7dbe:	f009 fbd1 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    7dc2:	4607      	mov	r7, r0
    7dc4:	b958      	cbnz	r0, 7dde <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
    7dc6:	4b40      	ldr	r3, [pc, #256]	; (7ec8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>)
    7dc8:	6965      	ldr	r5, [r4, #20]
    7dca:	9300      	str	r3, [sp, #0]
    7dcc:	2323      	movs	r3, #35	; 0x23
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
    7dce:	4a3f      	ldr	r2, [pc, #252]	; (7ecc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
    7dd0:	493f      	ldr	r1, [pc, #252]	; (7ed0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
    7dd2:	4620      	mov	r0, r4
    7dd4:	47a8      	blx	r5
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    7dd6:	2001      	movs	r0, #1
  return kTfLiteOk;
}
    7dd8:	b004      	add	sp, #16
    7dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    7dde:	2200      	movs	r2, #0
    7de0:	4641      	mov	r1, r8
    7de2:	4620      	mov	r0, r4
    7de4:	f009 fbc1 	bl	1156a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    7de8:	4606      	mov	r6, r0
    7dea:	b920      	cbnz	r0, 7df6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x42>
    7dec:	4b39      	ldr	r3, [pc, #228]	; (7ed4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
    7dee:	9300      	str	r3, [sp, #0]
    7df0:	6965      	ldr	r5, [r4, #20]
    7df2:	2325      	movs	r3, #37	; 0x25
    7df4:	e7eb      	b.n	7dce <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a>
  for (int i = 0; i < dims->size; ++i) {
    7df6:	68bb      	ldr	r3, [r7, #8]
    7df8:	f853 0b04 	ldr.w	r0, [r3], #4
    7dfc:	2200      	movs	r2, #0
  int64_t count = 1;
    7dfe:	2501      	movs	r5, #1
  for (int i = 0; i < dims->size; ++i) {
    7e00:	4290      	cmp	r0, r2
    7e02:	dd05      	ble.n	7e10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5c>
    count *= dims->data[i];
    7e04:	f853 1b04 	ldr.w	r1, [r3], #4
  for (int i = 0; i < dims->size; ++i) {
    7e08:	3201      	adds	r2, #1
    count *= dims->data[i];
    7e0a:	fba5 5101 	umull	r5, r1, r5, r1
  for (int i = 0; i < dims->size; ++i) {
    7e0e:	e7f7      	b.n	7e00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x4c>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    7e10:	f8d8 3000 	ldr.w	r3, [r8]
  TfLiteIntArray* output_shape = output->dims;
    7e14:	68b2      	ldr	r2, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    7e16:	681b      	ldr	r3, [r3, #0]
    7e18:	2b01      	cmp	r3, #1
    7e1a:	d105      	bne.n	7e28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    7e1c:	6813      	ldr	r3, [r2, #0]
    7e1e:	2b01      	cmp	r3, #1
    7e20:	d102      	bne.n	7e28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    7e22:	6853      	ldr	r3, [r2, #4]
    7e24:	b903      	cbnz	r3, 7e28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
    output_shape->size = 0;
    7e26:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < output_shape->size; ++i) {
    7e28:	4694      	mov	ip, r2
    7e2a:	2000      	movs	r0, #0
    7e2c:	f85c 8b04 	ldr.w	r8, [ip], #4
  int stretch_dim = -1;
    7e30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  int num_output_elements = 1;
    7e34:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
    7e36:	4580      	cmp	r8, r0
    7e38:	dd1a      	ble.n	7e70 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xbc>
    int value = output_shape->data[i];
    7e3a:	f85c eb04 	ldr.w	lr, [ip], #4
    if (value == -1) {
    7e3e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    7e42:	d10f      	bne.n	7e64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    7e44:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    7e48:	d010      	beq.n	7e6c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb8>
    7e4a:	4b23      	ldr	r3, [pc, #140]	; (7ed8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
    7e4c:	9301      	str	r3, [sp, #4]
    7e4e:	e9cd 1e02 	strd	r1, lr, [sp, #8]
    7e52:	4b22      	ldr	r3, [pc, #136]	; (7edc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
    7e54:	6965      	ldr	r5, [r4, #20]
    7e56:	9300      	str	r3, [sp, #0]
    7e58:	233a      	movs	r3, #58	; 0x3a
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    7e5a:	4a1c      	ldr	r2, [pc, #112]	; (7ecc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
    7e5c:	4920      	ldr	r1, [pc, #128]	; (7ee0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
    7e5e:	4620      	mov	r0, r4
    7e60:	47a8      	blx	r5
    7e62:	e7b8      	b.n	7dd6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
      num_output_elements *= value;
    7e64:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
    7e68:	3001      	adds	r0, #1
    7e6a:	e7e4      	b.n	7e36 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
    7e6c:	4601      	mov	r1, r0
    7e6e:	e7fb      	b.n	7e68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb4>
  if (stretch_dim != -1) {
    7e70:	1c48      	adds	r0, r1, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    7e72:	bf1f      	itttt	ne
    7e74:	eb02 0281 	addne.w	r2, r2, r1, lsl #2
    7e78:	fb95 f0f3 	sdivne	r0, r5, r3
    7e7c:	6050      	strne	r0, [r2, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    7e7e:	4343      	mulne	r3, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    7e80:	7832      	ldrb	r2, [r6, #0]
    7e82:	7838      	ldrb	r0, [r7, #0]
    7e84:	4282      	cmp	r2, r0
    7e86:	d012      	beq.n	7eae <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
    7e88:	6967      	ldr	r7, [r4, #20]
    7e8a:	f001 fcd9 	bl	9840 <TfLiteTypeGetName>
    7e8e:	4605      	mov	r5, r0
    7e90:	7830      	ldrb	r0, [r6, #0]
    7e92:	f001 fcd5 	bl	9840 <TfLiteTypeGetName>
    7e96:	4b13      	ldr	r3, [pc, #76]	; (7ee4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
    7e98:	9301      	str	r3, [sp, #4]
    7e9a:	4b13      	ldr	r3, [pc, #76]	; (7ee8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
    7e9c:	9300      	str	r3, [sp, #0]
    7e9e:	e9cd 5002 	strd	r5, r0, [sp, #8]
    7ea2:	4a0a      	ldr	r2, [pc, #40]	; (7ecc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
    7ea4:	4911      	ldr	r1, [pc, #68]	; (7eec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
    7ea6:	2345      	movs	r3, #69	; 0x45
    7ea8:	4620      	mov	r0, r4
    7eaa:	47b8      	blx	r7
    7eac:	e793      	b.n	7dd6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    7eae:	42ab      	cmp	r3, r5
    7eb0:	d008      	beq.n	7ec4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x110>
    7eb2:	e9cd 5302 	strd	r5, r3, [sp, #8]
    7eb6:	4b0e      	ldr	r3, [pc, #56]	; (7ef0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13c>)
    7eb8:	9301      	str	r3, [sp, #4]
    7eba:	4b0e      	ldr	r3, [pc, #56]	; (7ef4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>)
    7ebc:	9300      	str	r3, [sp, #0]
    7ebe:	6965      	ldr	r5, [r4, #20]
    7ec0:	2346      	movs	r3, #70	; 0x46
    7ec2:	e7ca      	b.n	7e5a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
  return kTfLiteOk;
    7ec4:	2000      	movs	r0, #0
    7ec6:	e787      	b.n	7dd8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
    7ec8:	0004513a 	.word	0x0004513a
    7ecc:	00045527 	.word	0x00045527
    7ed0:	00044ead 	.word	0x00044ead
    7ed4:	0004515d 	.word	0x0004515d
    7ed8:	00045564 	.word	0x00045564
    7edc:	00045567 	.word	0x00045567
    7ee0:	00044f05 	.word	0x00044f05
    7ee4:	0004516f 	.word	0x0004516f
    7ee8:	0004517c 	.word	0x0004517c
    7eec:	00045402 	.word	0x00045402
    7ef0:	00045573 	.word	0x00045573
    7ef4:	00045587 	.word	0x00045587

00007ef8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
    7ef8:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    7efa:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    7efc:	681b      	ldr	r3, [r3, #0]
    7efe:	3b01      	subs	r3, #1
    7f00:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    7f02:	b085      	sub	sp, #20
    7f04:	4605      	mov	r5, r0
    7f06:	460c      	mov	r4, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    7f08:	d909      	bls.n	7f1e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    7f0a:	4b19      	ldr	r3, [pc, #100]	; (7f70 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
    7f0c:	9300      	str	r3, [sp, #0]
    7f0e:	6944      	ldr	r4, [r0, #20]
    7f10:	4a18      	ldr	r2, [pc, #96]	; (7f74 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    7f12:	4919      	ldr	r1, [pc, #100]	; (7f78 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    7f14:	234b      	movs	r3, #75	; 0x4b
    7f16:	47a0      	blx	r4
    7f18:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    7f1a:	b005      	add	sp, #20
    7f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    7f1e:	684b      	ldr	r3, [r1, #4]
    7f20:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    7f22:	2e01      	cmp	r6, #1
    7f24:	d00c      	beq.n	7f40 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
    7f26:	2401      	movs	r4, #1
    7f28:	e9cd 6402 	strd	r6, r4, [sp, #8]
    7f2c:	4b13      	ldr	r3, [pc, #76]	; (7f7c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    7f2e:	9301      	str	r3, [sp, #4]
    7f30:	4b13      	ldr	r3, [pc, #76]	; (7f80 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    7f32:	9300      	str	r3, [sp, #0]
    7f34:	6945      	ldr	r5, [r0, #20]
    7f36:	4a0f      	ldr	r2, [pc, #60]	; (7f74 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    7f38:	4912      	ldr	r1, [pc, #72]	; (7f84 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    7f3a:	234c      	movs	r3, #76	; 0x4c
    7f3c:	47a8      	blx	r5
    7f3e:	e7eb      	b.n	7f18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    7f40:	f7ff ff38 	bl	7db4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    7f44:	2800      	cmp	r0, #0
    7f46:	d0e8      	beq.n	7f1a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    7f48:	4621      	mov	r1, r4
    7f4a:	4628      	mov	r0, r5
    7f4c:	696f      	ldr	r7, [r5, #20]
    7f4e:	f7ff ff31 	bl	7db4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    7f52:	2300      	movs	r3, #0
    7f54:	e9cd 0302 	strd	r0, r3, [sp, #8]
    7f58:	4b0b      	ldr	r3, [pc, #44]	; (7f88 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    7f5a:	9301      	str	r3, [sp, #4]
    7f5c:	4b0b      	ldr	r3, [pc, #44]	; (7f8c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    7f5e:	9300      	str	r3, [sp, #0]
    7f60:	4628      	mov	r0, r5
    7f62:	4a04      	ldr	r2, [pc, #16]	; (7f74 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
    7f64:	4907      	ldr	r1, [pc, #28]	; (7f84 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    7f66:	234d      	movs	r3, #77	; 0x4d
    7f68:	47b8      	blx	r7
    7f6a:	4630      	mov	r0, r6
    7f6c:	e7d5      	b.n	7f1a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
    7f6e:	bf00      	nop
    7f70:	0004559a 	.word	0x0004559a
    7f74:	00045527 	.word	0x00045527
    7f78:	00044ead 	.word	0x00044ead
    7f7c:	0004566b 	.word	0x0004566b
    7f80:	000455c7 	.word	0x000455c7
    7f84:	00044f05 	.word	0x00044f05
    7f88:	000455d8 	.word	0x000455d8
    7f8c:	000455e2 	.word	0x000455e2

00007f90 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    7f90:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    7f92:	4d05      	ldr	r5, [pc, #20]	; (7fa8 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
TfLiteRegistration Register_RESHAPE() {
    7f94:	4606      	mov	r6, r0
          /*version=*/0};
    7f96:	4604      	mov	r4, r0
    7f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7f9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    7fa4:	4630      	mov	r0, r6
    7fa6:	bd70      	pop	{r4, r5, r6, pc}
    7fa8:	000164a0 	.word	0x000164a0

00007fac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
    7fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fb0:	ed2d 8b04 	vpush	{d8-d9}
    7fb4:	4691      	mov	r9, r2
    7fb6:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7fb8:	680b      	ldr	r3, [r1, #0]

  for (int i = 0; i < outer_size; ++i) {
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
    7fba:	ed9f 9a35 	vldr	s18, [pc, #212]	; 8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
                    const RuntimeShape& output_shape, float* output_data) {
    7fbe:	b087      	sub	sp, #28
    7fc0:	460c      	mov	r4, r1
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    7fc2:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7fc4:	4619      	mov	r1, r3
                    const RuntimeShape& output_shape, float* output_data) {
    7fc6:	9001      	str	r0, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7fc8:	4620      	mov	r0, r4
    7fca:	9203      	str	r2, [sp, #12]
    7fcc:	9302      	str	r3, [sp, #8]
    7fce:	f009 fc5d 	bl	1188c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    7fd2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    7fd6:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    7fd8:	4619      	mov	r1, r3
    7fda:	4620      	mov	r0, r4
    7fdc:	f009 fb6c 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    7fe0:	2600      	movs	r6, #0
    7fe2:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
    7fe4:	46b0      	mov	r8, r6
      return __a;
    7fe6:	aa05      	add	r2, sp, #20
    7fe8:	45b8      	cmp	r8, r7
    7fea:	da4b      	bge.n	8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>
    float max = std::numeric_limits<float>::lowest();
    7fec:	eb09 0b86 	add.w	fp, r9, r6, lsl #2
    7ff0:	ed8d 9a05 	vstr	s18, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    7ff4:	00b5      	lsls	r5, r6, #2
    float max = std::numeric_limits<float>::lowest();
    7ff6:	4658      	mov	r0, fp
    for (int c = 0; c < depth; ++c) {
    7ff8:	2100      	movs	r1, #0
    7ffa:	42a1      	cmp	r1, r4
    7ffc:	db23      	blt.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    7ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
      max = std::max(max, input_data[i * depth + c]);
    }

    // Compute sum.
    float sum = 0.f;
    8000:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    8004:	441d      	add	r5, r3
    for (int c = 0; c < depth; ++c) {
    8006:	462b      	mov	r3, r5
    for (int c = 0; c < depth; ++c) {
    8008:	f04f 0a00 	mov.w	sl, #0
    800c:	45a2      	cmp	sl, r4
    800e:	9302      	str	r3, [sp, #8]
    8010:	da29      	bge.n	8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
                                   static_cast<float>(params.beta));
    8012:	9b01      	ldr	r3, [sp, #4]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    8014:	ed9d 0a05 	vldr	s0, [sp, #20]
    8018:	ecfb 8a01 	vldmia	fp!, {s17}
                                   static_cast<float>(params.beta));
    801c:	e9d3 0100 	ldrd	r0, r1, [r3]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    8020:	ee78 8ac0 	vsub.f32	s17, s17, s0
                                   static_cast<float>(params.beta));
    8024:	f7f8 fd3a 	bl	a9c <__aeabi_d2f>
  { return __builtin_expf(__x); }
    8028:	ee07 0a90 	vmov	s15, r0
    802c:	ee28 0aa7 	vmul.f32	s0, s17, s15
    8030:	f006 ffe0 	bl	eff4 <expf>
      output_data[i * depth + c] = exp_c;
    8034:	9b02      	ldr	r3, [sp, #8]
      sum += exp_c;
    8036:	ee38 8a00 	vadd.f32	s16, s16, s0
      output_data[i * depth + c] = exp_c;
    803a:	eca3 0a01 	vstmia	r3!, {s0}
    for (int c = 0; c < depth; ++c) {
    803e:	f10a 0a01 	add.w	sl, sl, #1
    8042:	aa05      	add	r2, sp, #20
    8044:	e7e2      	b.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
      max = std::max(max, input_data[i * depth + c]);
    8046:	4603      	mov	r3, r0
      if (__a < __b)
    8048:	ed93 7a00 	vldr	s14, [r3]
    804c:	eddd 7a05 	vldr	s15, [sp, #20]
    8050:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
    8058:	bfd8      	it	le
    805a:	4613      	movle	r3, r2
    805c:	3004      	adds	r0, #4
    805e:	681b      	ldr	r3, [r3, #0]
    8060:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
    8062:	3101      	adds	r1, #1
    8064:	e7c9      	b.n	7ffa <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
    8066:	2300      	movs	r3, #0
    8068:	42a3      	cmp	r3, r4
    806a:	da07      	bge.n	807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    806c:	ed95 7a00 	vldr	s14, [r5]
    8070:	eec7 7a08 	vdiv.f32	s15, s14, s16
    for (int c = 0; c < depth; ++c) {
    8074:	3301      	adds	r3, #1
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    8076:	ece5 7a01 	vstmia	r5!, {s15}
    for (int c = 0; c < depth; ++c) {
    807a:	e7f5      	b.n	8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
  for (int i = 0; i < outer_size; ++i) {
    807c:	f108 0801 	add.w	r8, r8, #1
    8080:	4426      	add	r6, r4
    8082:	e7b1      	b.n	7fe8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
    8084:	b007      	add	sp, #28
    8086:	ecbd 8b04 	vpop	{d8-d9}
    808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    808e:	bf00      	nop
    8090:	ff7fffff 	.word	0xff7fffff
    8094:	00000000 	.word	0x00000000

00008098 <_ZN6tflite16Register_SOFTMAXEv>:
  }
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    8098:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    809a:	4d05      	ldr	r5, [pc, #20]	; (80b0 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
TfLiteRegistration Register_SOFTMAX() {
    809c:	4606      	mov	r6, r0
          /*version=*/0};
    809e:	4604      	mov	r4, r0
    80a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    80a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    80a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    80a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    80ac:	4630      	mov	r0, r6
    80ae:	bd70      	pop	{r4, r5, r6, pc}
    80b0:	000164c0 	.word	0x000164c0

000080b4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
    80b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80b8:	b091      	sub	sp, #68	; 0x44
    80ba:	460c      	mov	r4, r1
    80bc:	9208      	str	r2, [sp, #32]
    80be:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    80c0:	680b      	ldr	r3, [r1, #0]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    80c2:	9204      	str	r2, [sp, #16]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    80c4:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    80c6:	4619      	mov	r1, r3
                         int16_t* output_data) {
    80c8:	4683      	mov	fp, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    80ca:	4620      	mov	r0, r4
    80cc:	9301      	str	r3, [sp, #4]
    80ce:	f009 fbdd 	bl	1188c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    80d2:	9b01      	ldr	r3, [sp, #4]
    80d4:	9a04      	ldr	r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    80d6:	9005      	str	r0, [sp, #20]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    80d8:	4619      	mov	r1, r3
    80da:	4620      	mov	r0, r4
    80dc:	f009 faec 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    80e0:	f04f 0a00 	mov.w	sl, #0
    80e4:	4681      	mov	r9, r0

  for (int i = 0; i < outer_size; ++i) {
    80e6:	f8cd a010 	str.w	sl, [sp, #16]
    80ea:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    80ee:	4293      	cmp	r3, r2
    80f0:	f280 80cd 	bge.w	828e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1da>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    80f4:	f248 0300 	movw	r3, #32768	; 0x8000
    80f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    for (int c = 0; c < depth; ++c) {
    80fc:	9b08      	ldr	r3, [sp, #32]
    80fe:	eb03 084a 	add.w	r8, r3, sl, lsl #1
    8102:	ea4f 054a 	mov.w	r5, sl, lsl #1
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    8106:	4641      	mov	r1, r8
    for (int c = 0; c < depth; ++c) {
    8108:	2200      	movs	r2, #0
    810a:	f10d 062e 	add.w	r6, sp, #46	; 0x2e
    810e:	454a      	cmp	r2, r9
    8110:	da0e      	bge.n	8130 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7c>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    8112:	460b      	mov	r3, r1
      if (__a < __b)
    8114:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
    8118:	f9b3 4000 	ldrsh.w	r4, [r3]
    811c:	4284      	cmp	r4, r0
      return __a;
    811e:	bfd8      	it	le
    8120:	4633      	movle	r3, r6
    8122:	3102      	adds	r1, #2
    8124:	f9b3 3000 	ldrsh.w	r3, [r3]
    8128:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    for (int c = 0; c < depth; ++c) {
    812c:	3201      	adds	r2, #1
    812e:	e7ee      	b.n	810e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x5a>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    8130:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    for (int c = 0; c < depth; ++c) {
    8132:	2700      	movs	r7, #0
    8134:	442b      	add	r3, r5
    8136:	9301      	str	r3, [sp, #4]
    8138:	9307      	str	r3, [sp, #28]
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    813a:	463c      	mov	r4, r7
  int32_t sym_scaled_diff = scaled_diff + 32767;
    813c:	f647 76ff 	movw	r6, #32767	; 0x7fff
    for (int c = 0; c < depth; ++c) {
    8140:	454f      	cmp	r7, r9
    8142:	da2e      	bge.n	81a2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xee>
      input_diff, params.input_multiplier, params.input_left_shift);
    8144:	e9db 1502 	ldrd	r1, r5, [fp, #8]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    8148:	f938 3b02 	ldrsh.w	r3, [r8], #2
    814c:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
  int right_shift = shift > 0 ? 0 : -shift;
    8150:	2d00      	cmp	r5, #0
    8152:	eba3 0300 	sub.w	r3, r3, r0
  int left_shift = shift > 0 ? shift : 0;
    8156:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    815a:	fa03 f000 	lsl.w	r0, r3, r0
  int right_shift = shift > 0 ? 0 : -shift;
    815e:	bfd4      	ite	le
    8160:	426d      	negle	r5, r5
    8162:	2500      	movgt	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    8164:	f7fe fe78 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
    8168:	4629      	mov	r1, r5
    816a:	f7ff fac7 	bl	76fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    816e:	4b49      	ldr	r3, [pc, #292]	; (8294 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e0>)
    8170:	930f      	str	r3, [sp, #60]	; 0x3c
  int32_t sym_scaled_diff = scaled_diff + 32767;
    8172:	4430      	add	r0, r6
      if (__a < __b)
    8174:	4298      	cmp	r0, r3
      return __a;
    8176:	bfac      	ite	ge
    8178:	ab0d      	addge	r3, sp, #52	; 0x34
	return __b;
    817a:	ab0f      	addlt	r3, sp, #60	; 0x3c
    817c:	900d      	str	r0, [sp, #52]	; 0x34
      if (__b < __a)
    817e:	681a      	ldr	r2, [r3, #0]
               static_cast<int32_t>(32767));
    8180:	960e      	str	r6, [sp, #56]	; 0x38
    8182:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
    8186:	bfa8      	it	ge
    8188:	ab0e      	addge	r3, sp, #56	; 0x38
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
    818a:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
    818e:	f9b3 0000 	ldrsh.w	r0, [r3]
    8192:	f009 ff37 	bl	12004 <_ZN6tflite26generic_int16_table_lookupEsPKs>
      exp_results_Q015[c] =
    8196:	9b01      	ldr	r3, [sp, #4]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
    8198:	4404      	add	r4, r0
      exp_results_Q015[c] =
    819a:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
    for (int c = 0; c < depth; ++c) {
    819e:	3701      	adds	r7, #1
    81a0:	e7ce      	b.n	8140 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x8c>
template <typename T>
int CountLeadingZeros(T integer_input) {
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
    81a2:	fab4 f284 	clz	r2, r4

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    81a6:	1e50      	subs	r0, r2, #1
    81a8:	17e3      	asrs	r3, r4, #31
    81aa:	f1a2 0121 	sub.w	r1, r2, #33	; 0x21
    81ae:	fa04 f101 	lsl.w	r1, r4, r1
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    81b2:	4615      	mov	r5, r2
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    81b4:	4083      	lsls	r3, r0
    81b6:	f1c2 0221 	rsb	r2, r2, #33	; 0x21
    81ba:	fa24 f202 	lsr.w	r2, r4, r2
    81be:	430b      	orrs	r3, r1
    81c0:	4084      	lsls	r4, r0
    81c2:	f514 5400 	adds.w	r4, r4, #8192	; 0x2000
    81c6:	ea43 0302 	orr.w	r3, r3, r2
    81ca:	f143 0300 	adc.w	r3, r3, #0
         (1 << 13)) >>
    81ce:	0ba4      	lsrs	r4, r4, #14
    81d0:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    81d4:	4b2f      	ldr	r3, [pc, #188]	; (8294 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e0>)
    81d6:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    81d8:	f5a4 34c0 	sub.w	r4, r4, #98304	; 0x18000
      if (__a < __b)
    81dc:	429c      	cmp	r4, r3
      return __a;
    81de:	bfac      	ite	ge
    81e0:	ab0c      	addge	r3, sp, #48	; 0x30
	return __b;
    81e2:	ab0e      	addlt	r3, sp, #56	; 0x38
    81e4:	940c      	str	r4, [sp, #48]	; 0x30
                 static_cast<int32_t>(32767)));
    81e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
    81ea:	920f      	str	r2, [sp, #60]	; 0x3c
      if (__b < __a)
    81ec:	681a      	ldr	r2, [r3, #0]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
    81ee:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
    81f2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return __b;
    81f6:	bfa8      	it	ge
    81f8:	ab0f      	addge	r3, sp, #60	; 0x3c
	return __b;
    81fa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    81fe:	f9b3 0000 	ldrsh.w	r0, [r3]
    8202:	f009 feff 	bl	12004 <_ZN6tflite26generic_int16_table_lookupEsPKs>
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
      uint8_t right_shift = 31 - headroom_plus_one;
    8206:	f1c5 031f 	rsb	r3, r5, #31
    820a:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
    820c:	1e5a      	subs	r2, r3, #1
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
    820e:	9006      	str	r0, [sp, #24]
      int64_t round = 1 << (right_shift - 1);
    8210:	2001      	movs	r0, #1
    8212:	4090      	lsls	r0, r2
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    8214:	17c2      	asrs	r2, r0, #31
    for (int c = 0; c < depth; ++c) {
    8216:	2100      	movs	r1, #0
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    8218:	9209      	str	r2, [sp, #36]	; 0x24
      return __a;
    821a:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
	return __b;
    821e:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
    for (int c = 0; c < depth; ++c) {
    8222:	4549      	cmp	r1, r9
    8224:	da2e      	bge.n	8284 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d0>
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    8226:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8228:	9203      	str	r2, [sp, #12]
    822a:	9002      	str	r0, [sp, #8]
    822c:	9a07      	ldr	r2, [sp, #28]
    822e:	9c06      	ldr	r4, [sp, #24]
    8230:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    8234:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
                        round) >>
    8238:	f1c3 0520 	rsb	r5, r3, #32
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    823c:	fbc2 6784 	smlalbb	r6, r7, r2, r4
                        round) >>
    8240:	fa26 f203 	lsr.w	r2, r6, r3
    8244:	f1b3 0420 	subs.w	r4, r3, #32
    8248:	fa07 f505 	lsl.w	r5, r7, r5
    824c:	ea42 0205 	orr.w	r2, r2, r5
    8250:	bf5c      	itt	pl
    8252:	fa47 f404 	asrpl.w	r4, r7, r4
    8256:	4322      	orrpl	r2, r4
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
    8258:	2400      	movs	r4, #0
      if (__a < __b)
    825a:	42a2      	cmp	r2, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    825c:	920d      	str	r2, [sp, #52]	; 0x34
	return __b;
    825e:	bfac      	ite	ge
    8260:	4672      	movge	r2, lr
    8262:	4642      	movlt	r2, r8
          std::min(std::max(result, static_cast<int32_t>(0)),
    8264:	940e      	str	r4, [sp, #56]	; 0x38
                   static_cast<int32_t>(32767)));
    8266:	f647 74ff 	movw	r4, #32767	; 0x7fff
    826a:	940f      	str	r4, [sp, #60]	; 0x3c
      if (__b < __a)
    826c:	6814      	ldr	r4, [r2, #0]
    826e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
	return __b;
    8272:	bfa8      	it	ge
    8274:	4662      	movge	r2, ip
      output_data[i * depth + c] = static_cast<int16_t>(
    8276:	9c01      	ldr	r4, [sp, #4]
    8278:	6812      	ldr	r2, [r2, #0]
    827a:	f824 2b02 	strh.w	r2, [r4], #2
    for (int c = 0; c < depth; ++c) {
    827e:	3101      	adds	r1, #1
      output_data[i * depth + c] = static_cast<int16_t>(
    8280:	9401      	str	r4, [sp, #4]
    for (int c = 0; c < depth; ++c) {
    8282:	e7ce      	b.n	8222 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x16e>
  for (int i = 0; i < outer_size; ++i) {
    8284:	9b04      	ldr	r3, [sp, #16]
    8286:	3301      	adds	r3, #1
    8288:	9304      	str	r3, [sp, #16]
    828a:	44ca      	add	sl, r9
    828c:	e72d      	b.n	80ea <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x36>
    }
  }
}
    828e:	b011      	add	sp, #68	; 0x44
    8290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8294:	ffff8000 	.word	0xffff8000

00008298 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    8298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
    829c:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
    82a0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    82a2:	0160      	lsls	r0, r4, #5
    82a4:	f7ff fa50 	bl	7748 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    82a8:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    82aa:	4842      	ldr	r0, [pc, #264]	; (83b4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
    82ac:	f009 fb20 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    82b0:	4601      	mov	r1, r0
    82b2:	4630      	mov	r0, r6
  return a - b;
    82b4:	1b64      	subs	r4, r4, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    82b6:	f009 fb20 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    82ba:	f3c4 6b00 	ubfx	fp, r4, #24, #1
    82be:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
    82c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    82c6:	ea00 0909 	and.w	r9, r0, r9
    82ca:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
    82ce:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    82d2:	4839      	ldr	r0, [pc, #228]	; (83b8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
    82d4:	f009 fb0c 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    82d8:	4601      	mov	r1, r0
    82da:	4650      	mov	r0, sl
    82dc:	f009 fb0d 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    82e0:	f3c4 6940 	ubfx	r9, r4, #25, #1
    82e4:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    82e8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    82ec:	ea00 0008 	and.w	r0, r0, r8
    82f0:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
    82f4:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    82f8:	4830      	ldr	r0, [pc, #192]	; (83bc <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
    82fa:	f009 faf9 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    82fe:	4601      	mov	r1, r0
    8300:	4648      	mov	r0, r9
    8302:	f009 fafa 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    8306:	f3c4 6780 	ubfx	r7, r4, #26, #1
    830a:	427e      	negs	r6, r7
  return a & b;
    830c:	3f01      	subs	r7, #1
    830e:	4030      	ands	r0, r6
    8310:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    8314:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    8316:	482a      	ldr	r0, [pc, #168]	; (83c0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
    8318:	f009 faea 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    831c:	4601      	mov	r1, r0
    831e:	4638      	mov	r0, r7
    8320:	f009 faeb 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    8324:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
    8328:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
    832c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    8330:	ea00 000a 	and.w	r0, r0, sl
    8334:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
    8338:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    833c:	4821      	ldr	r0, [pc, #132]	; (83c4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
    833e:	f009 fad7 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    8342:	4601      	mov	r1, r0
    8344:	4658      	mov	r0, fp
    8346:	f009 fad8 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    834a:	f3c4 7900 	ubfx	r9, r4, #28, #1
    834e:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
    8352:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    8356:	ea00 0008 	and.w	r0, r0, r8
    835a:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
    835e:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    8362:	4819      	ldr	r0, [pc, #100]	; (83c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
    8364:	f009 fac4 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    8368:	4601      	mov	r1, r0
    836a:	4648      	mov	r0, r9
    836c:	f009 fac5 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    8370:	f3c4 7740 	ubfx	r7, r4, #29, #1
    8374:	427e      	negs	r6, r7
  return a & b;
    8376:	3f01      	subs	r7, #1
    8378:	4030      	ands	r0, r6
    837a:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
    837e:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    8380:	20f2      	movs	r0, #242	; 0xf2
    8382:	f009 fab5 	bl	118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
    8386:	4601      	mov	r1, r0
    8388:	4638      	mov	r0, r7
    838a:	f009 fab6 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
    838e:	f3c4 7480 	ubfx	r4, r4, #30, #1
    8392:	4263      	negs	r3, r4
  return a & b;
    8394:	4018      	ands	r0, r3
    8396:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
    8398:	fab5 f385 	clz	r3, r5
  return a & b;
    839c:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
    839e:	095b      	lsrs	r3, r3, #5
  return a ^ b;
    83a0:	4044      	eors	r4, r0
  return a & b;
    83a2:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
    83a4:	425b      	negs	r3, r3
  return a & b;
    83a6:	4020      	ands	r0, r4
    83a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
    83ac:	4058      	eors	r0, r3
    83ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83b2:	bf00      	nop
    83b4:	63afbe7b 	.word	0x63afbe7b
    83b8:	4da2cbf2 	.word	0x4da2cbf2
    83bc:	2f16ac6c 	.word	0x2f16ac6c
    83c0:	1152aaa4 	.word	0x1152aaa4
    83c4:	02582ab7 	.word	0x02582ab7
    83c8:	000afe11 	.word	0x000afe11

000083cc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    83cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83d0:	b08d      	sub	sp, #52	; 0x34
    83d2:	460c      	mov	r4, r1
    83d4:	9203      	str	r2, [sp, #12]
    83d6:	461a      	mov	r2, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
    83d8:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
    83dc:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
    83de:	6983      	ldr	r3, [r0, #24]
    83e0:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    83e2:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    83e4:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    83e6:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    83e8:	4619      	mov	r1, r3
    83ea:	4620      	mov	r0, r4
    83ec:	9304      	str	r3, [sp, #16]
    83ee:	f009 fa4d 	bl	1188c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    83f2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    83f6:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    83f8:	4619      	mov	r1, r3
    83fa:	4620      	mov	r0, r4
    83fc:	f009 f95c 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    8400:	2500      	movs	r5, #0
    8402:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
    8404:	46a8      	mov	r8, r5
    8406:	9b02      	ldr	r3, [sp, #8]
    8408:	4598      	cmp	r8, r3
    840a:	da7b      	bge.n	8504 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x138>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    840c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    8410:	f88d 301f 	strb.w	r3, [sp, #31]
    8414:	9b03      	ldr	r3, [sp, #12]
    8416:	195f      	adds	r7, r3, r5
    8418:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
    841a:	2200      	movs	r2, #0
      return __a;
    841c:	f10d 0c1f 	add.w	ip, sp, #31
    8420:	42a2      	cmp	r2, r4
    8422:	da0e      	bge.n	8442 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    8424:	460b      	mov	r3, r1
      if (__a < __b)
    8426:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    842a:	f993 6000 	ldrsb.w	r6, [r3]
    842e:	4286      	cmp	r6, r0
      return __a;
    8430:	bfd8      	it	le
    8432:	4663      	movle	r3, ip
    8434:	3101      	adds	r1, #1
    8436:	f993 3000 	ldrsb.w	r3, [r3]
    843a:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
    843e:	3201      	adds	r2, #1
    8440:	e7ee      	b.n	8420 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x54>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    8442:	2600      	movs	r6, #0
    8444:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
    8446:	46b1      	mov	r9, r6
    8448:	45a1      	cmp	r9, r4
    844a:	da15      	bge.n	8478 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    844c:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    8450:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32_t input_diff =
    8454:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
    8456:	9b01      	ldr	r3, [sp, #4]
    8458:	4283      	cmp	r3, r0
    845a:	dc0a      	bgt.n	8472 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa6>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    845c:	9b00      	ldr	r3, [sp, #0]
    845e:	4659      	mov	r1, fp
    8460:	4098      	lsls	r0, r3
    8462:	f7fe fcf9 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    8466:	f7ff ff17 	bl	8298 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
    846a:	210c      	movs	r1, #12
    846c:	f7ff f946 	bl	76fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
    8470:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
    8472:	f109 0901 	add.w	r9, r9, #1
    8476:	e7e7      	b.n	8448 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    8478:	4630      	mov	r0, r6
    847a:	aa08      	add	r2, sp, #32
    847c:	210c      	movs	r1, #12
    847e:	f009 f965 	bl	1174c <_ZN6tflite13GetReciprocalEiiPi>
    8482:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8484:	4682      	mov	sl, r0
    8486:	eb03 0645 	add.w	r6, r3, r5, lsl #1
    for (int c = 0; c < depth; ++c) {
    848a:	f04f 0900 	mov.w	r9, #0
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    848e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    for (int c = 0; c < depth; ++c) {
    8492:	45a1      	cmp	r9, r4
    8494:	da32      	bge.n	84fc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x130>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    8496:	f99d 101f 	ldrsb.w	r1, [sp, #31]
    849a:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32_t input_diff =
    849e:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
    84a0:	9901      	ldr	r1, [sp, #4]
    84a2:	4281      	cmp	r1, r0
    84a4:	dc28      	bgt.n	84f8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12c>
    84a6:	9b00      	ldr	r3, [sp, #0]
    84a8:	4659      	mov	r1, fp
    84aa:	4098      	lsls	r0, r3
    84ac:	f7fe fcd4 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    84b0:	f7ff fef2 	bl	8298 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    84b4:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    84b6:	4650      	mov	r0, sl
    84b8:	f009 fa1f 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
    84bc:	9908      	ldr	r1, [sp, #32]
    84be:	310f      	adds	r1, #15
    84c0:	f7ff f91c 	bl	76fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            unsat_output +
    84c4:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
    84c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      return __a;
    84cc:	bfb4      	ite	lt
    84ce:	a909      	addlt	r1, sp, #36	; 0x24
	return __b;
    84d0:	a90a      	addge	r1, sp, #40	; 0x28
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    84d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
        const int32_t shifted_output =
    84d6:	9009      	str	r0, [sp, #36]	; 0x24
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    84d8:	920a      	str	r2, [sp, #40]	; 0x28
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    84da:	480c      	ldr	r0, [pc, #48]	; (850c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x140>)
    84dc:	900b      	str	r0, [sp, #44]	; 0x2c
      if (__a < __b)
    84de:	6808      	ldr	r0, [r1, #0]
    84e0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
    84e4:	bfb8      	it	lt
    84e6:	a90b      	addlt	r1, sp, #44	; 0x2c
      if (__b < __a)
    84e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    84ec:	6809      	ldr	r1, [r1, #0]
    84ee:	8031      	strh	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
    84f0:	f109 0901 	add.w	r9, r9, #1
    84f4:	3602      	adds	r6, #2
    84f6:	e7cc      	b.n	8492 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc6>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    84f8:	8033      	strh	r3, [r6, #0]
    84fa:	e7f9      	b.n	84f0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x124>
  for (int i = 0; i < outer_size; ++i) {
    84fc:	f108 0801 	add.w	r8, r8, #1
    8500:	4425      	add	r5, r4
    8502:	e780      	b.n	8406 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
    8504:	b00d      	add	sp, #52	; 0x34
    8506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    850a:	bf00      	nop
    850c:	ffff8000 	.word	0xffff8000

00008510 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    8510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8514:	460c      	mov	r4, r1
    8516:	b0a0      	sub	sp, #128	; 0x80
  TFLITE_DCHECK(context != nullptr);
    8518:	4680      	mov	r8, r0
    851a:	b908      	cbnz	r0, 8520 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
    851c:	f00d fa1e 	bl	1595c <abort>
  TFLITE_DCHECK(node != nullptr);
    8520:	2900      	cmp	r1, #0
    8522:	d0fb      	beq.n	851c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    8524:	680a      	ldr	r2, [r1, #0]
    8526:	6d43      	ldr	r3, [r0, #84]	; 0x54
    8528:	6851      	ldr	r1, [r2, #4]
    852a:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
    852c:	6862      	ldr	r2, [r4, #4]
    852e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    8532:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
    8534:	4607      	mov	r7, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
    8536:	4640      	mov	r0, r8
    8538:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
    853a:	6924      	ldr	r4, [r4, #16]
    853c:	4605      	mov	r5, r0
    853e:	2c00      	cmp	r4, #0
    8540:	d0ec      	beq.n	851c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const SoftmaxParams data =
    8542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8544:	ae12      	add	r6, sp, #72	; 0x48
    8546:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    854a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    854c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    854e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8550:	e894 0003 	ldmia.w	r4, {r0, r1}
    8554:	e886 0003 	stmia.w	r6, {r0, r1}
  switch (input->type) {
    8558:	7a38      	ldrb	r0, [r7, #8]
    855a:	1e43      	subs	r3, r0, #1
    855c:	2b08      	cmp	r3, #8
    855e:	f200 808d 	bhi.w	867c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16c>
    8562:	e8df f003 	tbb	[pc, r3]
    8566:	8b05      	.short	0x8b05
    8568:	8b8b8b22 	.word	0x8b8b8b22
    856c:	8b22      	.short	0x8b22
    856e:	22          	.byte	0x22
    856f:	00          	.byte	0x00
          data, tflite::micro::GetTensorShape(input),
    8570:	4639      	mov	r1, r7
    8572:	a806      	add	r0, sp, #24
    8574:	f009 f960 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    8578:	683a      	ldr	r2, [r7, #0]
    857a:	9205      	str	r2, [sp, #20]
          tflite::micro::GetTensorShape(output),
    857c:	4629      	mov	r1, r5
    857e:	a80c      	add	r0, sp, #48	; 0x30
    8580:	f009 f95a 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8584:	9a05      	ldr	r2, [sp, #20]
    8586:	b105      	cbz	r5, 858a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    8588:	682d      	ldr	r5, [r5, #0]
      tflite::reference_ops::Softmax(
    858a:	9500      	str	r5, [sp, #0]
    858c:	ab0c      	add	r3, sp, #48	; 0x30
    858e:	a906      	add	r1, sp, #24
    8590:	a812      	add	r0, sp, #72	; 0x48
    8592:	f7ff fd0b 	bl	7fac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      const auto output_shape = tflite::micro::GetTensorShape(output);
    8596:	a80c      	add	r0, sp, #48	; 0x30
    8598:	f008 fff9 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
    859c:	a806      	add	r0, sp, #24
    859e:	f008 fff6 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
    85a2:	2000      	movs	r0, #0
}
    85a4:	b020      	add	sp, #128	; 0x80
    85a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (input->type == kTfLiteUInt8) {
    85aa:	2803      	cmp	r0, #3
    85ac:	d117      	bne.n	85de <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
        op_data, tflite::micro::GetTensorShape(input),
    85ae:	4639      	mov	r1, r7
    85b0:	a80c      	add	r0, sp, #48	; 0x30
    85b2:	f009 f941 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    85b6:	683a      	ldr	r2, [r7, #0]
    85b8:	9205      	str	r2, [sp, #20]
        tflite::micro::GetTensorShape(output),
    85ba:	4629      	mov	r1, r5
    85bc:	a806      	add	r0, sp, #24
    85be:	f009 f93b 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    85c2:	9a05      	ldr	r2, [sp, #20]
    85c4:	b105      	cbz	r5, 85c8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>
    85c6:	682d      	ldr	r5, [r5, #0]
    tflite::reference_ops::Softmax(
    85c8:	9500      	str	r5, [sp, #0]
    85ca:	ab06      	add	r3, sp, #24
    85cc:	a90c      	add	r1, sp, #48	; 0x30
    85ce:	a812      	add	r0, sp, #72	; 0x48
    85d0:	f009 fd2e 	bl	12030 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
    85d4:	a806      	add	r0, sp, #24
    85d6:	f008 ffda 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
    85da:	a80c      	add	r0, sp, #48	; 0x30
    85dc:	e7df      	b.n	859e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8e>
  } else if (input->type == kTfLiteInt8) {
    85de:	2809      	cmp	r0, #9
    85e0:	d138      	bne.n	8654 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x144>
    if (output->type == kTfLiteInt16) {
    85e2:	7a2b      	ldrb	r3, [r5, #8]
    85e4:	2b07      	cmp	r3, #7
          op_data, tflite::micro::GetTensorShape(input),
    85e6:	4639      	mov	r1, r7
    if (output->type == kTfLiteInt16) {
    85e8:	d111      	bne.n	860e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xfe>
          op_data, tflite::micro::GetTensorShape(input),
    85ea:	a80c      	add	r0, sp, #48	; 0x30
    85ec:	f009 f924 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
    85f0:	683a      	ldr	r2, [r7, #0]
    85f2:	9205      	str	r2, [sp, #20]
          tflite::micro::GetTensorShape(output),
    85f4:	4629      	mov	r1, r5
    85f6:	a806      	add	r0, sp, #24
    85f8:	f009 f91e 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    85fc:	682b      	ldr	r3, [r5, #0]
    85fe:	9300      	str	r3, [sp, #0]
    8600:	9a05      	ldr	r2, [sp, #20]
    8602:	ab06      	add	r3, sp, #24
    8604:	a90c      	add	r1, sp, #48	; 0x30
    8606:	a812      	add	r0, sp, #72	; 0x48
    8608:	f7ff fee0 	bl	83cc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    860c:	e7e2      	b.n	85d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
    860e:	a806      	add	r0, sp, #24
    8610:	f009 f912 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
    8614:	4629      	mov	r1, r5
    8616:	a80c      	add	r0, sp, #48	; 0x30
    8618:	f009 f90e 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
    861c:	9b06      	ldr	r3, [sp, #24]
    861e:	3b01      	subs	r3, #1
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    8620:	aa0c      	add	r2, sp, #48	; 0x30
    8622:	4619      	mov	r1, r3
    8624:	a806      	add	r0, sp, #24
    8626:	9305      	str	r3, [sp, #20]
    8628:	f009 f930 	bl	1188c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    862c:	9b05      	ldr	r3, [sp, #20]
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
    862e:	4604      	mov	r4, r0
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8630:	aa0c      	add	r2, sp, #48	; 0x30
    8632:	4619      	mov	r1, r3
    8634:	a806      	add	r0, sp, #24
    8636:	f009 f83f 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
    863a:	682b      	ldr	r3, [r5, #0]
    863c:	9302      	str	r3, [sp, #8]
    863e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8640:	9301      	str	r3, [sp, #4]
    8642:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8644:	9300      	str	r3, [sp, #0]
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
    8646:	4602      	mov	r2, r0
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
    8648:	9b14      	ldr	r3, [sp, #80]	; 0x50
    864a:	6838      	ldr	r0, [r7, #0]
    864c:	4621      	mov	r1, r4
    864e:	f000 fc9f 	bl	8f90 <arm_softmax_s8>
    8652:	e7a0      	b.n	8596 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
        op_data, tflite::micro::GetTensorShape(input),
    8654:	4639      	mov	r1, r7
    8656:	a80c      	add	r0, sp, #48	; 0x30
    8658:	f009 f8ee 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    865c:	683a      	ldr	r2, [r7, #0]
    865e:	9205      	str	r2, [sp, #20]
        tflite::micro::GetTensorShape(output),
    8660:	4629      	mov	r1, r5
    8662:	a806      	add	r0, sp, #24
    8664:	f009 f8e8 	bl	11838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    8668:	9a05      	ldr	r2, [sp, #20]
    866a:	b105      	cbz	r5, 866e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x15e>
    866c:	682d      	ldr	r5, [r5, #0]
    tflite::reference_ops::SoftmaxInt16(
    866e:	9500      	str	r5, [sp, #0]
    8670:	ab06      	add	r3, sp, #24
    8672:	a90c      	add	r1, sp, #48	; 0x30
    8674:	a812      	add	r0, sp, #72	; 0x48
    8676:	f7ff fd1d 	bl	80b4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
    867a:	e7ab      	b.n	85d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    867c:	f8d8 4014 	ldr.w	r4, [r8, #20]
    8680:	f001 f8de 	bl	9840 <TfLiteTypeGetName>
    8684:	7a3b      	ldrb	r3, [r7, #8]
    8686:	4903      	ldr	r1, [pc, #12]	; (8694 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x184>)
    8688:	4602      	mov	r2, r0
    868a:	4640      	mov	r0, r8
    868c:	47a0      	blx	r4
      return kTfLiteError;
    868e:	2001      	movs	r0, #1
    8690:	e788      	b.n	85a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x94>
    8692:	bf00      	nop
    8694:	000451f3 	.word	0x000451f3

00008698 <_ZN6tflite7gen_lutEPFffEffPsi>:
// func - the function to build the LUT for (e.g exp(x))
// min,max - table limits
// table - pointer to buffer
// num - number of elements in the LUT
inline void gen_lut(float (*func)(float), float min, float max, int16_t* table,
                    const int num) {
    8698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // size of table should equal to num + 1
  // last element only for slope calculation
  float step = (max - min) / (num - 1);
    869c:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    86a0:	ee07 9a90 	vmov	s15, r9
    86a4:	ee30 7ac0 	vsub.f32	s14, s1, s0
    86a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    const int num) {
    86ac:	ed2d 8b0c 	vpush	{d8-d13}
  float step = (max - min) / (num - 1);
    86b0:	eec7 ca27 	vdiv.f32	s25, s14, s15
                    const int num) {
    86b4:	b085      	sub	sp, #20
    86b6:	4604      	mov	r4, r0
    86b8:	460f      	mov	r7, r1
    86ba:	4615      	mov	r5, r2
    86bc:	f1a1 0802 	sub.w	r8, r1, #2
  float half_step = step / 2.0f;
  for (int i = 0; i < num - 1; i++) {
    86c0:	2600      	movs	r6, #0
  float half_step = step / 2.0f;
    86c2:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    86c6:	ee2c caab 	vmul.f32	s24, s25, s23
  for (int i = 0; i < num - 1; i++) {
    86ca:	eddf 8a48 	vldr	s17, [pc, #288]	; 87ec <_ZN6tflite7gen_lutEPFffEffPsi+0x154>
    86ce:	eddf aa48 	vldr	s21, [pc, #288]	; 87f0 <_ZN6tflite7gen_lutEPFffEffPsi+0x158>
    86d2:	ed9f aa48 	vldr	s20, [pc, #288]	; 87f4 <_ZN6tflite7gen_lutEPFffEffPsi+0x15c>
                    const int num) {
    86d6:	eeb0 9a40 	vmov.f32	s18, s0
    86da:	eeb0 ba60 	vmov.f32	s22, s1
  for (int i = 0; i < num - 1; i++) {
    86de:	45b1      	cmp	r9, r6
    86e0:	dd58      	ble.n	8794 <_ZN6tflite7gen_lutEPFffEffPsi+0xfc>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    86e2:	ee07 6a90 	vmov	s15, r6
    86e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    86ea:	eeb0 da49 	vmov.f32	s26, s18
    86ee:	eea7 daac 	vfma.f32	s26, s15, s25
    float midpoint_interp_val =
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    86f2:	3601      	adds	r6, #1
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    86f4:	eeb0 0a4d 	vmov.f32	s0, s26
    86f8:	47a0      	blx	r4
    86fa:	ee20 0a28 	vmul.f32	s0, s0, s17
    86fe:	f009 fd3f 	bl	12180 <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    8702:	ee07 6a90 	vmov	s15, r6
    8706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    870a:	eeb0 8a40 	vmov.f32	s16, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    870e:	eeb0 0a49 	vmov.f32	s0, s18
    8712:	eea7 0aac 	vfma.f32	s0, s15, s25
    8716:	47a0      	blx	r4
    8718:	eef0 9a40 	vmov.f32	s19, s0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    871c:	eeb0 0a4d 	vmov.f32	s0, s26
    8720:	47a0      	blx	r4
    8722:	ee20 0a28 	vmul.f32	s0, s0, s17
    8726:	f009 fd2b 	bl	12180 <_ZN6tflite11TfLiteRoundIfEET_S1_>
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    872a:	eea9 0aa8 	vfma.f32	s0, s19, s17
    872e:	ee20 0a2b 	vmul.f32	s0, s0, s23
    8732:	f009 fd25 	bl	12180 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    8736:	eef0 9a40 	vmov.f32	s19, s0
                    2.0f);
    float midpoint_val =
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    873a:	ee3d 0a0c 	vadd.f32	s0, s26, s24
    873e:	47a0      	blx	r4
    8740:	ee20 0a28 	vmul.f32	s0, s0, s17
    8744:	f009 fd1c 	bl	12180 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    float midpoint_err = midpoint_interp_val - midpoint_val;
    8748:	ee39 0ac0 	vsub.f32	s0, s19, s0
    float bias = TfLiteRound(midpoint_err / 2.0f);
    874c:	ee20 0a2b 	vmul.f32	s0, s0, s23
    8750:	f009 fd16 	bl	12180 <_ZN6tflite11TfLiteRoundIfEET_S1_>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    8754:	ee78 7a40 	vsub.f32	s15, s16, s0
    8758:	edcd aa02 	vstr	s21, [sp, #8]
      if (__a < __b)
    875c:	eef4 7aea 	vcmpe.f32	s15, s21
    8760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
    8764:	bf4c      	ite	mi
    8766:	ab02      	addmi	r3, sp, #8
      return __a;
    8768:	ab01      	addpl	r3, sp, #4
    876a:	edcd 7a01 	vstr	s15, [sp, #4]
      if (__b < __a)
    876e:	edd3 7a00 	vldr	s15, [r3]
                               32767.0f);
    8772:	ed8d aa03 	vstr	s20, [sp, #12]
    8776:	eef4 7aca 	vcmpe.f32	s15, s20
    877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
    877e:	bfc8      	it	gt
    8780:	ab03      	addgt	r3, sp, #12
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    8782:	edd3 7a00 	vldr	s15, [r3]
    8786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    878a:	ee17 3a90 	vmov	r3, s15
    878e:	f828 3f02 	strh.w	r3, [r8, #2]!
  for (int i = 0; i < num - 1; i++) {
    8792:	e7a4      	b.n	86de <_ZN6tflite7gen_lutEPFffEffPsi+0x46>
  }
  table[num - 1] = std::min<float>(
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    8794:	eeb0 0a4b 	vmov.f32	s0, s22
    8798:	47a0      	blx	r4
    879a:	ee20 0a28 	vmul.f32	s0, s0, s17
    879e:	f009 fcef 	bl	12180 <_ZN6tflite11TfLiteRoundIfEET_S1_>
      if (__a < __b)
    87a2:	eeb4 0aea 	vcmpe.f32	s0, s21
    87a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
    87aa:	bf4c      	ite	mi
    87ac:	ab02      	addmi	r3, sp, #8
      return __a;
    87ae:	ab01      	addpl	r3, sp, #4
    87b0:	ed8d 0a01 	vstr	s0, [sp, #4]
    87b4:	edcd aa02 	vstr	s21, [sp, #8]
      if (__b < __a)
    87b8:	edd3 7a00 	vldr	s15, [r3]
    87bc:	ed8d aa03 	vstr	s20, [sp, #12]
    87c0:	eef4 7aca 	vcmpe.f32	s15, s20
    87c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return __b;
    87c8:	bfc8      	it	gt
    87ca:	ab03      	addgt	r3, sp, #12
  table[num - 1] = std::min<float>(
    87cc:	edd3 7a00 	vldr	s15, [r3]
    87d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    87d4:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
    87d8:	ee17 3a90 	vmov	r3, s15
    87dc:	3a01      	subs	r2, #1
    87de:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
}
    87e2:	b005      	add	sp, #20
    87e4:	ecbd 8b0c 	vpop	{d8-d13}
    87e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    87ec:	47000000 	.word	0x47000000
    87f0:	c7000000 	.word	0xc7000000
    87f4:	46fffe00 	.word	0x46fffe00

000087f8 <arm_cfft_init_f32>:

        /*  Initialise the FFT length */
        S->fftLen = fftLen;

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
    87f8:	2300      	movs	r3, #0


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
    87fa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        S->fftLen = fftLen;
    87fe:	8001      	strh	r1, [r0, #0]
        S->pTwiddle = NULL;
    8800:	6043      	str	r3, [r0, #4]
        switch (S->fftLen) {
    8802:	d02a      	beq.n	885a <arm_cfft_init_f32+0x62>
    8804:	d80d      	bhi.n	8822 <arm_cfft_init_f32+0x2a>
    8806:	2940      	cmp	r1, #64	; 0x40
    8808:	d029      	beq.n	885e <arm_cfft_init_f32+0x66>
    880a:	d806      	bhi.n	881a <arm_cfft_init_f32+0x22>
    880c:	2910      	cmp	r1, #16
    880e:	d02a      	beq.n	8866 <arm_cfft_init_f32+0x6e>
    8810:	2920      	cmp	r1, #32
    8812:	d026      	beq.n	8862 <arm_cfft_init_f32+0x6a>
    8814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8818:	e019      	b.n	884e <arm_cfft_init_f32+0x56>
    881a:	2980      	cmp	r1, #128	; 0x80
    881c:	d1fa      	bne.n	8814 <arm_cfft_init_f32+0x1c>
            break;
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
    881e:	4a13      	ldr	r2, [pc, #76]	; (886c <arm_cfft_init_f32+0x74>)
    8820:	e00f      	b.n	8842 <arm_cfft_init_f32+0x4a>
        switch (S->fftLen) {
    8822:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    8826:	d014      	beq.n	8852 <arm_cfft_init_f32+0x5a>
    8828:	d807      	bhi.n	883a <arm_cfft_init_f32+0x42>
    882a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    882e:	d012      	beq.n	8856 <arm_cfft_init_f32+0x5e>
    8830:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    8834:	d1ee      	bne.n	8814 <arm_cfft_init_f32+0x1c>
            FFTINIT(f32,1024);
    8836:	4a0e      	ldr	r2, [pc, #56]	; (8870 <arm_cfft_init_f32+0x78>)
    8838:	e003      	b.n	8842 <arm_cfft_init_f32+0x4a>
        switch (S->fftLen) {
    883a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    883e:	d1e9      	bne.n	8814 <arm_cfft_init_f32+0x1c>
            FFTINIT(f32,4096);
    8840:	4a0c      	ldr	r2, [pc, #48]	; (8874 <arm_cfft_init_f32+0x7c>)
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
    8842:	8991      	ldrh	r1, [r2, #12]
    8844:	8181      	strh	r1, [r0, #12]
    8846:	6891      	ldr	r1, [r2, #8]
    8848:	6852      	ldr	r2, [r2, #4]
    884a:	6081      	str	r1, [r0, #8]
    884c:	6042      	str	r2, [r0, #4]
            break;
        }


        return (status);
}
    884e:	4618      	mov	r0, r3
    8850:	4770      	bx	lr
            FFTINIT(f32,2048);
    8852:	4a09      	ldr	r2, [pc, #36]	; (8878 <arm_cfft_init_f32+0x80>)
    8854:	e7f5      	b.n	8842 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,512);
    8856:	4a09      	ldr	r2, [pc, #36]	; (887c <arm_cfft_init_f32+0x84>)
    8858:	e7f3      	b.n	8842 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,256);
    885a:	4a09      	ldr	r2, [pc, #36]	; (8880 <arm_cfft_init_f32+0x88>)
    885c:	e7f1      	b.n	8842 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,64);
    885e:	4a09      	ldr	r2, [pc, #36]	; (8884 <arm_cfft_init_f32+0x8c>)
    8860:	e7ef      	b.n	8842 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,32);
    8862:	4a09      	ldr	r2, [pc, #36]	; (8888 <arm_cfft_init_f32+0x90>)
    8864:	e7ed      	b.n	8842 <arm_cfft_init_f32+0x4a>
            FFTINIT(f32,16);
    8866:	4a09      	ldr	r2, [pc, #36]	; (888c <arm_cfft_init_f32+0x94>)
    8868:	e7eb      	b.n	8842 <arm_cfft_init_f32+0x4a>
    886a:	bf00      	nop
    886c:	0002ef74 	.word	0x0002ef74
    8870:	0002ef64 	.word	0x0002ef64
    8874:	0002efc4 	.word	0x0002efc4
    8878:	0002ef94 	.word	0x0002ef94
    887c:	0002efd4 	.word	0x0002efd4
    8880:	0002efa4 	.word	0x0002efa4
    8884:	0002efe4 	.word	0x0002efe4
    8888:	0002efb4 	.word	0x0002efb4
    888c:	0002ef84 	.word	0x0002ef84

00008890 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
    8890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8894:	ed2d 8b10 	vpush	{d8-d15}
    8898:	b08f      	sub	sp, #60	; 0x3c
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
    889a:	ed9f 5ab0 	vldr	s10, [pc, #704]	; 8b5c <arm_radix8_butterfly_f32+0x2cc>
{
    889e:	9001      	str	r0, [sp, #4]
    88a0:	9103      	str	r1, [sp, #12]
    88a2:	920d      	str	r2, [sp, #52]	; 0x34
    88a4:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
    88a6:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
    88a8:	9b02      	ldr	r3, [sp, #8]
    88aa:	08da      	lsrs	r2, r3, #3
      i1 = 0;
    88ac:	0151      	lsls	r1, r2, #5
    88ae:	9108      	str	r1, [sp, #32]
    88b0:	9901      	ldr	r1, [sp, #4]
    88b2:	eb01 1c42 	add.w	ip, r1, r2, lsl #5
    88b6:	00d1      	lsls	r1, r2, #3
    88b8:	9107      	str	r1, [sp, #28]
    88ba:	f06f 0117 	mvn.w	r1, #23
    88be:	4351      	muls	r1, r2
    88c0:	2018      	movs	r0, #24
    88c2:	fb00 f402 	mul.w	r4, r0, r2
    88c6:	eb0c 0701 	add.w	r7, ip, r1
    88ca:	2028      	movs	r0, #40	; 0x28
    88cc:	940c      	str	r4, [sp, #48]	; 0x30
    88ce:	eb07 1642 	add.w	r6, r7, r2, lsl #5
    88d2:	fb00 f402 	mul.w	r4, r0, r2
    88d6:	2030      	movs	r0, #48	; 0x30
    88d8:	1875      	adds	r5, r6, r1
    88da:	9406      	str	r4, [sp, #24]
    88dc:	fb00 fb02 	mul.w	fp, r0, r2
    88e0:	0114      	lsls	r4, r2, #4
    88e2:	2038      	movs	r0, #56	; 0x38
    88e4:	9405      	str	r4, [sp, #20]
    88e6:	fb00 fa02 	mul.w	sl, r0, r2
    88ea:	eb05 1442 	add.w	r4, r5, r2, lsl #5
    88ee:	9801      	ldr	r0, [sp, #4]
    88f0:	4421      	add	r1, r4
    88f2:	00db      	lsls	r3, r3, #3
    88f4:	eb01 1842 	add.w	r8, r1, r2, lsl #5
    88f8:	f100 0e04 	add.w	lr, r0, #4
    88fc:	f04f 0900 	mov.w	r9, #0
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
    8900:	eddc 7a00 	vldr	s15, [ip]
    8904:	ed1e 7a01 	vldr	s14, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
    8908:	ed97 6a00 	vldr	s12, [r7]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    890c:	edd8 3a00 	vldr	s7, [r8]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
    8910:	edd5 4a00 	vldr	s9, [r5]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8914:	edd1 2a00 	vldr	s5, [r1]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
    8918:	ee77 6a27 	vadd.f32	s13, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
    891c:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
    8920:	edd6 7a00 	vldr	s15, [r6]
    8924:	ee76 5a27 	vadd.f32	s11, s12, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
    8928:	ee36 6a67 	vsub.f32	s12, s12, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
    892c:	edd4 7a00 	vldr	s15, [r4]
    8930:	ee34 4aa7 	vadd.f32	s8, s9, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
    8934:	ee74 4ae7 	vsub.f32	s9, s9, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8938:	ee72 7aa3 	vadd.f32	s15, s5, s7
         t1 = r1 - r3;
    893c:	ee36 0ac4 	vsub.f32	s0, s13, s8
         r3 = r2 - r4;
    8940:	ee75 0ae7 	vsub.f32	s1, s11, s15
         r1 = r1 + r3;
    8944:	ee76 6a84 	vadd.f32	s13, s13, s8
         r2 = r2 + r4;
    8948:	ee75 7aa7 	vadd.f32	s15, s11, s15
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
    894c:	ee72 2ae3 	vsub.f32	s5, s5, s7
         pSrc[2 * i1] = r1 + r2;
    8950:	ee76 5aa7 	vadd.f32	s11, s13, s15
         pSrc[2 * i5] = r1 - r2;
    8954:	ee76 6ae7 	vsub.f32	s13, s13, s15
         pSrc[2 * i1] = r1 + r2;
    8958:	ed4e 5a01 	vstr	s11, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
    895c:	edcc 6a00 	vstr	s13, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    8960:	eddc 7a01 	vldr	s15, [ip, #4]
    8964:	ed9e 4a00 	vldr	s8, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    8968:	edd7 3a01 	vldr	s7, [r7, #4]
    896c:	edd6 6a01 	vldr	s13, [r6, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    8970:	ed95 3a01 	vldr	s6, [r5, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    8974:	ed98 2a01 	vldr	s4, [r8, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    8978:	ee74 5a27 	vadd.f32	s11, s8, s15
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
    897c:	ee34 4a67 	vsub.f32	s8, s8, s15
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    8980:	ee73 7aa6 	vadd.f32	s15, s7, s13
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
    8984:	ee73 6ae6 	vsub.f32	s13, s7, s13
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    8988:	edd4 3a01 	vldr	s7, [r4, #4]
    898c:	ee73 1a23 	vadd.f32	s3, s6, s7
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
    8990:	ee73 3a63 	vsub.f32	s7, s6, s7
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    8994:	ed91 3a01 	vldr	s6, [r1, #4]
    8998:	ee33 1a02 	vadd.f32	s2, s6, s4
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
    899c:	ee33 3a42 	vsub.f32	s6, s6, s4
         t2 = r1 - s3;
    89a0:	ee35 2ae1 	vsub.f32	s4, s11, s3
         r1 = r1 + s3;
    89a4:	ee75 5aa1 	vadd.f32	s11, s11, s3
         s3 = r2 - r4;
    89a8:	ee77 1ac1 	vsub.f32	s3, s15, s2
         r2 = r2 + r4;
    89ac:	ee77 7a81 	vadd.f32	s15, s15, s2
         pSrc[2 * i1 + 1] = r1 + r2;
    89b0:	ee35 1aa7 	vadd.f32	s2, s11, s15
         pSrc[2 * i5 + 1] = r1 - r2;
    89b4:	ee75 5ae7 	vsub.f32	s11, s11, s15
         pSrc[2 * i3]     = t1 + s3;
    89b8:	ee70 7a21 	vadd.f32	s15, s0, s3
         pSrc[2 * i1 + 1] = r1 + r2;
    89bc:	ed8e 1a00 	vstr	s2, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
    89c0:	edcc 5a01 	vstr	s11, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
    89c4:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i7]     = t1 - s3;
    89c8:	ee70 5a61 	vsub.f32	s11, s0, s3
         pSrc[2 * i3 + 1] = t2 - r3;
    89cc:	ee72 7a60 	vsub.f32	s15, s4, s1
         pSrc[2 * i7]     = t1 - s3;
    89d0:	edc4 5a00 	vstr	s11, [r4]
         pSrc[2 * i3 + 1] = t2 - r3;
    89d4:	edc5 7a01 	vstr	s15, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
    89d8:	ee70 7a82 	vadd.f32	s15, s1, s4
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
         pSrc[2 * i4 + 1] = t2 + r8;

         i1 += n1;
      } while (i1 < fftLen);
    89dc:	449c      	add	ip, r3
         pSrc[2 * i7 + 1] = t2 + r3;
    89de:	edc4 7a01 	vstr	s15, [r4, #4]
         r1 = (r6 - r8) * C81;
    89e2:	ee76 7a62 	vsub.f32	s15, s12, s5
         r6 = (r6 + r8) * C81;
    89e6:	ee36 6a22 	vadd.f32	s12, s12, s5
         r2 = (s6 - s8) * C81;
    89ea:	ee76 2ac3 	vsub.f32	s5, s13, s6
         s6 = (s6 + s8) * C81;
    89ee:	ee76 6a83 	vadd.f32	s13, s13, s6
         r1 = (r6 - r8) * C81;
    89f2:	ee67 7a85 	vmul.f32	s15, s15, s10
         r6 = (r6 + r8) * C81;
    89f6:	ee26 6a05 	vmul.f32	s12, s12, s10
         r2 = (s6 - s8) * C81;
    89fa:	ee62 2a85 	vmul.f32	s5, s5, s10
         s6 = (s6 + s8) * C81;
    89fe:	ee66 6a85 	vmul.f32	s13, s13, s10
         t1 = r5 - r1;
    8a02:	ee37 3a67 	vsub.f32	s6, s14, s15
         r8 = r7 - r6;
    8a06:	ee74 5ac6 	vsub.f32	s11, s9, s12
         r5 = r5 + r1;
    8a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
         r7 = r7 + r6;
    8a0e:	ee74 7a86 	vadd.f32	s15, s9, s12
         t2 = s5 - r2;
    8a12:	ee74 4a62 	vsub.f32	s9, s8, s5
         s5 = s5 + r2;
    8a16:	ee34 6a22 	vadd.f32	s12, s8, s5
         s8 = s7 - s6;
    8a1a:	ee33 4ae6 	vsub.f32	s8, s7, s13
         s7 = s7 + s6;
    8a1e:	ee73 6aa6 	vadd.f32	s13, s7, s13
      } while (i1 < fftLen);
    8a22:	441d      	add	r5, r3
         pSrc[2 * i2]     = r5 + s7;
    8a24:	ee77 3a26 	vadd.f32	s7, s14, s13
         pSrc[2 * i8]     = r5 - s7;
    8a28:	ee37 7a66 	vsub.f32	s14, s14, s13
         pSrc[2 * i2]     = r5 + s7;
    8a2c:	edc7 3a00 	vstr	s7, [r7]
         pSrc[2 * i8]     = r5 - s7;
    8a30:	ed88 7a00 	vstr	s14, [r8]
         pSrc[2 * i6]     = t1 + s8;
    8a34:	ee33 7a04 	vadd.f32	s14, s6, s8
         pSrc[2 * i4]     = t1 - s8;
    8a38:	ee33 3a44 	vsub.f32	s6, s6, s8
         pSrc[2 * i6]     = t1 + s8;
    8a3c:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
    8a40:	ee36 7a67 	vsub.f32	s14, s12, s15
         pSrc[2 * i8 + 1] = s5 + r7;
    8a44:	ee77 7a86 	vadd.f32	s15, s15, s12
         pSrc[2 * i4]     = t1 - s8;
    8a48:	ed81 3a00 	vstr	s6, [r1]
         pSrc[2 * i2 + 1] = s5 - r7;
    8a4c:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
    8a50:	edc8 7a01 	vstr	s15, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
    8a54:	ee74 7ae5 	vsub.f32	s15, s9, s11
         pSrc[2 * i4 + 1] = t2 + r8;
    8a58:	ee75 5aa4 	vadd.f32	s11, s11, s9
         pSrc[2 * i6 + 1] = t2 - r8;
    8a5c:	edc6 7a01 	vstr	s15, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
    8a60:	edc1 5a01 	vstr	s11, [r1, #4]
         i1 += n1;
    8a64:	9802      	ldr	r0, [sp, #8]
    8a66:	4481      	add	r9, r0
      } while (i1 < fftLen);
    8a68:	9803      	ldr	r0, [sp, #12]
    8a6a:	4548      	cmp	r0, r9
    8a6c:	441f      	add	r7, r3
    8a6e:	441e      	add	r6, r3
    8a70:	441c      	add	r4, r3
    8a72:	4419      	add	r1, r3
    8a74:	4498      	add	r8, r3
    8a76:	449e      	add	lr, r3
    8a78:	f63f af42 	bhi.w	8900 <arm_radix8_butterfly_f32+0x70>

      if (n2 < 8)
    8a7c:	2a07      	cmp	r2, #7
    8a7e:	f240 816f 	bls.w	8d60 <arm_radix8_butterfly_f32+0x4d0>
    8a82:	9801      	ldr	r0, [sp, #4]
    8a84:	9908      	ldr	r1, [sp, #32]
    8a86:	4401      	add	r1, r0
    8a88:	910b      	str	r1, [sp, #44]	; 0x2c
    8a8a:	9907      	ldr	r1, [sp, #28]
    8a8c:	4401      	add	r1, r0
    8a8e:	910a      	str	r1, [sp, #40]	; 0x28
    8a90:	9906      	ldr	r1, [sp, #24]
    8a92:	4401      	add	r1, r0
    8a94:	9109      	str	r1, [sp, #36]	; 0x24
    8a96:	9905      	ldr	r1, [sp, #20]
    8a98:	4401      	add	r1, r0
    8a9a:	9108      	str	r1, [sp, #32]
    8a9c:	eb0b 0100 	add.w	r1, fp, r0
    8aa0:	9107      	str	r1, [sp, #28]
    8aa2:	990c      	ldr	r1, [sp, #48]	; 0x30
    8aa4:	4401      	add	r1, r0
    8aa6:	9106      	str	r1, [sp, #24]
    8aa8:	eb0a 0100 	add.w	r1, sl, r0
    8aac:	9105      	str	r1, [sp, #20]
         break;

      ia1 = 0;
      j = 1;
    8aae:	2401      	movs	r4, #1
      ia1 = 0;
    8ab0:	2100      	movs	r1, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
    8ab2:	9804      	ldr	r0, [sp, #16]
    8ab4:	4401      	add	r1, r0
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;

         co2 = pCoef[2 * ia1];
    8ab6:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ab8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    8abc:	edd5 1a00 	vldr	s3, [r5]
         co3 = pCoef[2 * ia2];
    8ac0:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    8ac4:	ed95 8a00 	vldr	s16, [r5]
         co4 = pCoef[2 * ia3];
    8ac8:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    8acc:	edd5 4a00 	vldr	s9, [r5]
         co5 = pCoef[2 * ia4];
    8ad0:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    8ad4:	ed95 9a00 	vldr	s18, [r5]
         co6 = pCoef[2 * ia5];
    8ad8:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    8adc:	edd5 3a00 	vldr	s7, [r5]
         co7 = pCoef[2 * ia6];
    8ae0:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    8ae4:	f06f 002f 	mvn.w	r0, #47	; 0x2f
    8ae8:	edd5 0a00 	vldr	s1, [r5]
         co8 = pCoef[2 * ia7];
    8aec:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    8af0:	fb00 5601 	mla	r6, r0, r1, r5
    8af4:	9801      	ldr	r0, [sp, #4]
         si2 = pCoef[2 * ia1 + 1];
    8af6:	ed96 1a01 	vldr	s2, [r6, #4]
         co8 = pCoef[2 * ia7];
    8afa:	edd5 2a00 	vldr	s5, [r5]
         si3 = pCoef[2 * ia2 + 1];
         si4 = pCoef[2 * ia3 + 1];
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];
    8afe:	ed95 2a01 	vldr	s4, [r5, #4]
    8b02:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
    8b06:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8b08:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
    8b0c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8b0e:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
    8b12:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b14:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
    8b18:	9808      	ldr	r0, [sp, #32]
    8b1a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
         si3 = pCoef[2 * ia2 + 1];
    8b1e:	edd6 8a01 	vldr	s17, [r6, #4]
         si4 = pCoef[2 * ia3 + 1];
    8b22:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
    8b26:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    8b2a:	9807      	ldr	r0, [sp, #28]
    8b2c:	ed96 4a01 	vldr	s8, [r6, #4]
         si5 = pCoef[2 * ia4 + 1];
    8b30:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    8b34:	edd6 9a01 	vldr	s19, [r6, #4]
         si6 = pCoef[2 * ia5 + 1];
    8b38:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
    8b3c:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    8b40:	9806      	ldr	r0, [sp, #24]
    8b42:	ed96 3a01 	vldr	s6, [r6, #4]
         si7 = pCoef[2 * ia6 + 1];
    8b46:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    8b4a:	ed96 0a01 	vldr	s0, [r6, #4]

         i1 = j;
    8b4e:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
    8b52:	9805      	ldr	r0, [sp, #20]
    8b54:	46a3      	mov	fp, r4
    8b56:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
    8b5a:	e001      	b.n	8b60 <arm_radix8_butterfly_f32+0x2d0>
    8b5c:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
    8b60:	edd9 7a00 	vldr	s15, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
    8b64:	edd8 6a00 	vldr	s13, [r8]
    8b68:	ed9e 7a00 	vldr	s14, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
    8b6c:	edda aa00 	vldr	s21, [sl]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8b70:	ed96 6a00 	vldr	s12, [r6]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
    8b74:	ee36 dac7 	vsub.f32	s26, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
    8b78:	ee3a aaa7 	vadd.f32	s20, s21, s15
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
    8b7c:	ee7a aae7 	vsub.f32	s21, s21, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
    8b80:	ee76 7a87 	vadd.f32	s15, s13, s14
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
    8b84:	eddc 6a00 	vldr	s13, [ip]
    8b88:	ed97 7a00 	vldr	s14, [r7]
    8b8c:	ee76 5a87 	vadd.f32	s11, s13, s14
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
    8b90:	ee36 bac7 	vsub.f32	s22, s13, s14
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
    8b94:	edd5 6a00 	vldr	s13, [r5]
    8b98:	ee36 7a26 	vadd.f32	s14, s12, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
    8b9c:	ee76 6a66 	vsub.f32	s13, s12, s13
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
    8ba0:	ee77 eac7 	vsub.f32	s29, s15, s14
            t1 = r1 - r3;
    8ba4:	ee3a 6a65 	vsub.f32	s12, s20, s11
            r2 = r2 + r4;
    8ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
            r1 = r1 + r3;
    8bac:	ee3a aa25 	vadd.f32	s20, s20, s11
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    8bb0:	edda 5a01 	vldr	s11, [sl, #4]
            pSrc[2 * i1] = r1 + r2;
    8bb4:	ee3a 7a27 	vadd.f32	s14, s20, s15
            r2 = r1 - r2;
    8bb8:	ee3a aa67 	vsub.f32	s20, s20, s15
            pSrc[2 * i1] = r1 + r2;
    8bbc:	ed8a 7a00 	vstr	s14, [sl]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    8bc0:	edd9 7a01 	vldr	s15, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    8bc4:	ed98 7a01 	vldr	s14, [r8, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
    8bc8:	ee35 faa7 	vadd.f32	s30, s11, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
    8bcc:	ee35 cae7 	vsub.f32	s24, s11, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    8bd0:	edde 7a01 	vldr	s15, [lr, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
    8bd4:	ee77 ca67 	vsub.f32	s25, s14, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
    8bd8:	ee37 ea27 	vadd.f32	s28, s14, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    8bdc:	ed9c 7a01 	vldr	s14, [ip, #4]
    8be0:	edd7 7a01 	vldr	s15, [r7, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
    8be4:	ee77 ba67 	vsub.f32	s23, s14, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
    8be8:	ee77 da27 	vadd.f32	s27, s14, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
    8bec:	edd5 7a01 	vldr	s15, [r5, #4]
    8bf0:	ed96 7a01 	vldr	s14, [r6, #4]
    8bf4:	ee77 5a27 	vadd.f32	s11, s14, s15
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
    8bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
            t2 = s1 - s3;
    8bfc:	ee7f 7a6d 	vsub.f32	s15, s30, s27
            s1 = s1 + s3;
    8c00:	ee7f da2d 	vadd.f32	s27, s30, s27
            s3 = s2 - s4;
    8c04:	ee3e fa65 	vsub.f32	s30, s28, s11
            s2 = s2 + s4;
    8c08:	ee3e ea25 	vadd.f32	s28, s28, s11
            r1 = t1 + s3;
    8c0c:	ee76 5a0f 	vadd.f32	s11, s12, s30
            t1 = t1 - s3;
    8c10:	ee36 6a4f 	vsub.f32	s12, s12, s30
            pSrc[2 * i1 + 1] = s1 + s2;
    8c14:	ee3d fa8e 	vadd.f32	s30, s27, s28
            s2 = s1 - s2;
    8c18:	ee7d dace 	vsub.f32	s27, s27, s28
            s1 = t2 - r3;
    8c1c:	ee37 eaee 	vsub.f32	s28, s15, s29
            t2 = t2 + r3;
    8c20:	ee7e 7aa7 	vadd.f32	s15, s29, s15
            p1 = co5 * r2;
            p2 = si5 * s2;
    8c24:	ee69 eaad 	vmul.f32	s29, s19, s27
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
    8c28:	ee49 ea0a 	vmla.f32	s29, s18, s20
            p4 = si5 * r2;
    8c2c:	ee29 aa8a 	vmul.f32	s20, s19, s20
            pSrc[2 * i5 + 1] = p3 - p4;
    8c30:	ee19 aa2d 	vnmls.f32	s20, s18, s27
            pSrc[2 * i1 + 1] = s1 + s2;
    8c34:	ed8a fa01 	vstr	s30, [sl, #4]
            pSrc[2 * i5 + 1] = p3 - p4;
    8c38:	ed89 aa01 	vstr	s20, [r9, #4]
            p1 = co3 * r1;
            p2 = si3 * s1;
    8c3c:	ee28 aa8e 	vmul.f32	s20, s17, s28
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
    8c40:	ee08 aa25 	vmla.f32	s20, s16, s11
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;

            i1 += n1;
         } while (i1 < fftLen);
    8c44:	449a      	add	sl, r3
            p4 = si3 * r1;
    8c46:	ee68 5aa5 	vmul.f32	s11, s17, s11
            pSrc[2 * i3 + 1] = p3 - p4;
    8c4a:	ee58 5a0e 	vnmls.f32	s11, s16, s28
            pSrc[2 * i5]     = p1 + p2;
    8c4e:	edc9 ea00 	vstr	s29, [r9]
            pSrc[2 * i3 + 1] = p3 - p4;
    8c52:	edcc 5a01 	vstr	s11, [ip, #4]
            p2 = si7 * t2;
    8c56:	ee60 5a27 	vmul.f32	s11, s0, s15
            pSrc[2 * i7]     = p1 + p2;
    8c5a:	ee40 5a86 	vmla.f32	s11, s1, s12
         } while (i1 < fftLen);
    8c5e:	4499      	add	r9, r3
            p4 = si7 * t1;
    8c60:	ee20 6a06 	vmul.f32	s12, s0, s12
            pSrc[2 * i7 + 1] = p3 - p4;
    8c64:	ee10 6aa7 	vnmls.f32	s12, s1, s15
            pSrc[2 * i3]     = p1 + p2;
    8c68:	ed8c aa00 	vstr	s20, [ip]
            pSrc[2 * i7]     = p1 + p2;
    8c6c:	edc7 5a00 	vstr	s11, [r7]
            r1 = (r6 - r8) * C81;
    8c70:	ee3d aa66 	vsub.f32	s20, s26, s13
            s1 = (s6 - s8) * C81;
    8c74:	ee7c 5ac7 	vsub.f32	s11, s25, s14
            r6 = (r6 + r8) * C81;
    8c78:	ee7d 6a26 	vadd.f32	s13, s26, s13
            s6 = (s6 + s8) * C81;
    8c7c:	ee3c 7a87 	vadd.f32	s14, s25, s14
            pSrc[2 * i7 + 1] = p3 - p4;
    8c80:	ed87 6a01 	vstr	s12, [r7, #4]
            r6 = (r6 + r8) * C81;
    8c84:	ee66 6a85 	vmul.f32	s13, s13, s10
            s1 = (s6 - s8) * C81;
    8c88:	ee25 6a85 	vmul.f32	s12, s11, s10
            r1 = (r6 - r8) * C81;
    8c8c:	ee2a aa05 	vmul.f32	s20, s20, s10
            s6 = (s6 + s8) * C81;
    8c90:	ee27 7a05 	vmul.f32	s14, s14, s10
            r8 = r7 - r6;
    8c94:	ee7b ca66 	vsub.f32	s25, s22, s13
            s5 = s5 + s1;
    8c98:	ee7c 5a06 	vadd.f32	s11, s24, s12
            r7 = r7 + r6;
    8c9c:	ee7b 6a26 	vadd.f32	s13, s22, s13
            t1 = r5 - r1;
    8ca0:	ee3a daca 	vsub.f32	s26, s21, s20
            r5 = r5 + r1;
    8ca4:	ee3a aa8a 	vadd.f32	s20, s21, s20
            s8 = s7 - s6;
    8ca8:	ee7b aac7 	vsub.f32	s21, s23, s14
            s7 = s7 + s6;
    8cac:	ee3b 7a87 	vadd.f32	s14, s23, s14
            t2 = s5 - s1;
    8cb0:	ee3c ba46 	vsub.f32	s22, s24, s12
            s1 = s5 - r7;
    8cb4:	ee75 bae6 	vsub.f32	s23, s11, s13
            r1 = r5 + s7;
    8cb8:	ee3a 6a07 	vadd.f32	s12, s20, s14
            r5 = r5 - s7;
    8cbc:	ee7a 7a47 	vsub.f32	s15, s20, s14
            s5 = s5 + r7;
    8cc0:	ee76 6aa5 	vadd.f32	s13, s13, s11
            r6 = t1 + s8;
    8cc4:	ee3d 7a2a 	vadd.f32	s14, s26, s21
            t1 = t1 - s8;
    8cc8:	ee3d aa6a 	vsub.f32	s20, s26, s21
            t2 = t2 + r8;
    8ccc:	ee7c 5a8b 	vadd.f32	s11, s25, s22
            s6 = t2 - r8;
    8cd0:	ee7b aa6c 	vsub.f32	s21, s22, s25
            p2 = si2 * s1;
    8cd4:	ee21 ba2b 	vmul.f32	s22, s2, s23
            pSrc[2 * i2]     = p1 + p2;
    8cd8:	ee01 ba86 	vmla.f32	s22, s3, s12
         } while (i1 < fftLen);
    8cdc:	449c      	add	ip, r3
    8cde:	441f      	add	r7, r3
            p4 = si2 * r1;
    8ce0:	ee21 6a06 	vmul.f32	s12, s2, s12
            pSrc[2 * i2 + 1] = p3 - p4;
    8ce4:	ee11 6aab 	vnmls.f32	s12, s3, s23
            pSrc[2 * i2]     = p1 + p2;
    8ce8:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i2 + 1] = p3 - p4;
    8cec:	ed88 6a01 	vstr	s12, [r8, #4]
            p2 = si8 * s5;
    8cf0:	ee22 6a26 	vmul.f32	s12, s4, s13
            pSrc[2 * i8]     = p1 + p2;
    8cf4:	ee02 6aa7 	vmla.f32	s12, s5, s15
         } while (i1 < fftLen);
    8cf8:	4498      	add	r8, r3
            pSrc[2 * i8]     = p1 + p2;
    8cfa:	ed85 6a00 	vstr	s12, [r5]
            p4 = si8 * r5;
    8cfe:	ee22 6a27 	vmul.f32	s12, s4, s15
            p2 = si6 * s6;
    8d02:	ee63 7a2a 	vmul.f32	s15, s6, s21
            pSrc[2 * i6]     = p1 + p2;
    8d06:	ee43 7a87 	vmla.f32	s15, s7, s14
            pSrc[2 * i8 + 1] = p3 - p4;
    8d0a:	ee12 6aa6 	vnmls.f32	s12, s5, s13
            p4 = si6 * r6;
    8d0e:	ee23 7a07 	vmul.f32	s14, s6, s14
            pSrc[2 * i8 + 1] = p3 - p4;
    8d12:	ed85 6a01 	vstr	s12, [r5, #4]
            pSrc[2 * i6]     = p1 + p2;
    8d16:	edce 7a00 	vstr	s15, [lr]
            p2 = si4 * t2;
    8d1a:	ee64 7a25 	vmul.f32	s15, s8, s11
            pSrc[2 * i4]     = p1 + p2;
    8d1e:	ee44 7a8a 	vmla.f32	s15, s9, s20
         } while (i1 < fftLen);
    8d22:	441d      	add	r5, r3
            pSrc[2 * i6 + 1] = p3 - p4;
    8d24:	ee13 7aaa 	vnmls.f32	s14, s7, s21
    8d28:	ed8e 7a01 	vstr	s14, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
    8d2c:	edc6 7a00 	vstr	s15, [r6]
            p4 = si4 * t1;
    8d30:	ee64 7a0a 	vmul.f32	s15, s8, s20
            pSrc[2 * i4 + 1] = p3 - p4;
    8d34:	ee54 7aa5 	vnmls.f32	s15, s9, s11
         } while (i1 < fftLen);
    8d38:	449e      	add	lr, r3
            pSrc[2 * i4 + 1] = p3 - p4;
    8d3a:	edc6 7a01 	vstr	s15, [r6, #4]
            i1 += n1;
    8d3e:	9802      	ldr	r0, [sp, #8]
    8d40:	4483      	add	fp, r0
         } while (i1 < fftLen);
    8d42:	9803      	ldr	r0, [sp, #12]
    8d44:	4558      	cmp	r0, fp
    8d46:	441e      	add	r6, r3
    8d48:	f63f af0a 	bhi.w	8b60 <arm_radix8_butterfly_f32+0x2d0>

         j++;
    8d4c:	3401      	adds	r4, #1
      } while (j < n2);
    8d4e:	42a2      	cmp	r2, r4
    8d50:	f47f aeaf 	bne.w	8ab2 <arm_radix8_butterfly_f32+0x222>

      twidCoefModifier <<= 3;
    8d54:	9b04      	ldr	r3, [sp, #16]
    8d56:	9202      	str	r2, [sp, #8]
    8d58:	00db      	lsls	r3, r3, #3
    8d5a:	b29b      	uxth	r3, r3
    8d5c:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
    8d5e:	e5a3      	b.n	88a8 <arm_radix8_butterfly_f32+0x18>
}
    8d60:	b00f      	add	sp, #60	; 0x3c
    8d62:	ecbd 8b10 	vpop	{d8-d15}
    8d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d6a:	bf00      	nop

00008d6c <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8d6c:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8d6e:	4604      	mov	r4, r0
    8d70:	b140      	cbz	r0, 8d84 <arm_rfft_32_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),16);
    8d72:	2110      	movs	r1, #16
    8d74:	f7ff fd40 	bl	87f8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8d78:	b918      	cbnz	r0, 8d82 <arm_rfft_32_fast_init_f32+0x16>
  {
    return(status);
  }

  S->fftLenRFFT = 32U;
    8d7a:	2320      	movs	r3, #32
    8d7c:	8223      	strh	r3, [r4, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
    8d7e:	4b03      	ldr	r3, [pc, #12]	; (8d8c <arm_rfft_32_fast_init_f32+0x20>)
    8d80:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8d82:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8d88:	e7fb      	b.n	8d82 <arm_rfft_32_fast_init_f32+0x16>
    8d8a:	bf00      	nop
    8d8c:	0002a5e4 	.word	0x0002a5e4

00008d90 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8d90:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8d92:	4604      	mov	r4, r0
    8d94:	b140      	cbz	r0, 8da8 <arm_rfft_64_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),32);
    8d96:	2120      	movs	r1, #32
    8d98:	f7ff fd2e 	bl	87f8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8d9c:	b918      	cbnz	r0, 8da6 <arm_rfft_64_fast_init_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 64U;
    8d9e:	2340      	movs	r3, #64	; 0x40
    8da0:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
    8da2:	4b03      	ldr	r3, [pc, #12]	; (8db0 <arm_rfft_64_fast_init_f32+0x20>)
    8da4:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8da6:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8dac:	e7fb      	b.n	8da6 <arm_rfft_64_fast_init_f32+0x16>
    8dae:	bf00      	nop
    8db0:	0002ee64 	.word	0x0002ee64

00008db4 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8db4:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8db6:	4604      	mov	r4, r0
    8db8:	b140      	cbz	r0, 8dcc <arm_rfft_128_fast_init_f32+0x18>

  status=arm_cfft_init_f32(&(S->Sint),64);
    8dba:	2140      	movs	r1, #64	; 0x40
    8dbc:	f7ff fd1c 	bl	87f8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8dc0:	b918      	cbnz	r0, 8dca <arm_rfft_128_fast_init_f32+0x16>
  {
    return(status);
  }
  S->fftLenRFFT = 128;
    8dc2:	2380      	movs	r3, #128	; 0x80
    8dc4:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
    8dc6:	4b03      	ldr	r3, [pc, #12]	; (8dd4 <arm_rfft_128_fast_init_f32+0x20>)
    8dc8:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8dca:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8dd0:	e7fb      	b.n	8dca <arm_rfft_128_fast_init_f32+0x16>
    8dd2:	bf00      	nop
    8dd4:	00027fe4 	.word	0x00027fe4

00008dd8 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8dd8:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8dda:	4604      	mov	r4, r0
    8ddc:	b148      	cbz	r0, 8df2 <arm_rfft_256_fast_init_f32+0x1a>

  status=arm_cfft_init_f32(&(S->Sint),128);
    8dde:	2180      	movs	r1, #128	; 0x80
    8de0:	f7ff fd0a 	bl	87f8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8de4:	b920      	cbnz	r0, 8df0 <arm_rfft_256_fast_init_f32+0x18>
  {
    return(status);
  }
  S->fftLenRFFT = 256U;
    8de6:	f44f 7380 	mov.w	r3, #256	; 0x100
    8dea:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
    8dec:	4b02      	ldr	r3, [pc, #8]	; (8df8 <arm_rfft_256_fast_init_f32+0x20>)
    8dee:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8df0:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8df6:	e7fb      	b.n	8df0 <arm_rfft_256_fast_init_f32+0x18>
    8df8:	0002a1e4 	.word	0x0002a1e4

00008dfc <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8dfc:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8dfe:	4604      	mov	r4, r0
    8e00:	b150      	cbz	r0, 8e18 <arm_rfft_512_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),256);
    8e02:	f44f 7180 	mov.w	r1, #256	; 0x100
    8e06:	f7ff fcf7 	bl	87f8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8e0a:	b920      	cbnz	r0, 8e16 <arm_rfft_512_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 512U;
    8e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
    8e10:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
    8e12:	4b03      	ldr	r3, [pc, #12]	; (8e20 <arm_rfft_512_fast_init_f32+0x24>)
    8e14:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8e16:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e1c:	e7fb      	b.n	8e16 <arm_rfft_512_fast_init_f32+0x1a>
    8e1e:	bf00      	nop
    8e20:	0002e664 	.word	0x0002e664

00008e24 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8e24:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8e26:	4604      	mov	r4, r0
    8e28:	b150      	cbz	r0, 8e40 <arm_rfft_1024_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),512);
    8e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
    8e2e:	f7ff fce3 	bl	87f8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8e32:	b920      	cbnz	r0, 8e3e <arm_rfft_1024_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 1024U;
    8e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8e38:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
    8e3a:	4b03      	ldr	r3, [pc, #12]	; (8e48 <arm_rfft_1024_fast_init_f32+0x24>)
    8e3c:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8e3e:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e44:	e7fb      	b.n	8e3e <arm_rfft_1024_fast_init_f32+0x1a>
    8e46:	bf00      	nop
    8e48:	00026fe4 	.word	0x00026fe4

00008e4c <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8e4c:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8e4e:	4604      	mov	r4, r0
    8e50:	b150      	cbz	r0, 8e68 <arm_rfft_2048_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),1024);
    8e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8e56:	f7ff fccf 	bl	87f8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8e5a:	b920      	cbnz	r0, 8e66 <arm_rfft_2048_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 2048U;
    8e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    8e60:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
    8e62:	4b03      	ldr	r3, [pc, #12]	; (8e70 <arm_rfft_2048_fast_init_f32+0x24>)
    8e64:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8e66:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e6c:	e7fb      	b.n	8e66 <arm_rfft_2048_fast_init_f32+0x1a>
    8e6e:	bf00      	nop
    8e70:	000281e4 	.word	0x000281e4

00008e74 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
    8e74:	b510      	push	{r4, lr}

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8e76:	4604      	mov	r4, r0
    8e78:	b150      	cbz	r0, 8e90 <arm_rfft_4096_fast_init_f32+0x1c>

  status=arm_cfft_init_f32(&(S->Sint),2048);
    8e7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8e7e:	f7ff fcbb 	bl	87f8 <arm_cfft_init_f32>
  if (status != ARM_MATH_SUCCESS)
    8e82:	b920      	cbnz	r0, 8e8e <arm_rfft_4096_fast_init_f32+0x1a>
  {
    return(status);
  }
  S->fftLenRFFT = 4096U;
    8e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8e88:	8223      	strh	r3, [r4, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
    8e8a:	4b03      	ldr	r3, [pc, #12]	; (8e98 <arm_rfft_4096_fast_init_f32+0x24>)
    8e8c:	6163      	str	r3, [r4, #20]

  return ARM_MATH_SUCCESS;
}
    8e8e:	bd10      	pop	{r4, pc}
  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
    8e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e94:	e7fb      	b.n	8e8e <arm_rfft_4096_fast_init_f32+0x1a>
    8e96:	bf00      	nop
    8e98:	0002a664 	.word	0x0002a664

00008e9c <arm_rfft_fast_init_f32>:
  uint16_t fftLen)
{
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;

  switch (fftLen)
    8e9c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8ea0:	d01a      	beq.n	8ed8 <arm_rfft_fast_init_f32+0x3c>
    8ea2:	d80e      	bhi.n	8ec2 <arm_rfft_fast_init_f32+0x26>
    8ea4:	2980      	cmp	r1, #128	; 0x80
    8ea6:	d019      	beq.n	8edc <arm_rfft_fast_init_f32+0x40>
    8ea8:	d806      	bhi.n	8eb8 <arm_rfft_fast_init_f32+0x1c>
    8eaa:	2920      	cmp	r1, #32
    8eac:	d018      	beq.n	8ee0 <arm_rfft_fast_init_f32+0x44>
    8eae:	2940      	cmp	r1, #64	; 0x40
    8eb0:	d018      	beq.n	8ee4 <arm_rfft_fast_init_f32+0x48>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
  return fptr( S );

}
    8eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8eb6:	4770      	bx	lr
  switch (fftLen)
    8eb8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8ebc:	d1f9      	bne.n	8eb2 <arm_rfft_fast_init_f32+0x16>
    fptr = arm_rfft_256_fast_init_f32;
    8ebe:	4b0c      	ldr	r3, [pc, #48]	; (8ef0 <arm_rfft_fast_init_f32+0x54>)
    8ec0:	e009      	b.n	8ed6 <arm_rfft_fast_init_f32+0x3a>
  switch (fftLen)
    8ec2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    8ec6:	d00f      	beq.n	8ee8 <arm_rfft_fast_init_f32+0x4c>
    8ec8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    8ecc:	d00e      	beq.n	8eec <arm_rfft_fast_init_f32+0x50>
    8ece:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    8ed2:	d1ee      	bne.n	8eb2 <arm_rfft_fast_init_f32+0x16>
    fptr = arm_rfft_1024_fast_init_f32;
    8ed4:	4b07      	ldr	r3, [pc, #28]	; (8ef4 <arm_rfft_fast_init_f32+0x58>)
  return fptr( S );
    8ed6:	4718      	bx	r3
    fptr = arm_rfft_512_fast_init_f32;
    8ed8:	4b07      	ldr	r3, [pc, #28]	; (8ef8 <arm_rfft_fast_init_f32+0x5c>)
    8eda:	e7fc      	b.n	8ed6 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_128_fast_init_f32;
    8edc:	4b07      	ldr	r3, [pc, #28]	; (8efc <arm_rfft_fast_init_f32+0x60>)
    8ede:	e7fa      	b.n	8ed6 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_32_fast_init_f32;
    8ee0:	4b07      	ldr	r3, [pc, #28]	; (8f00 <arm_rfft_fast_init_f32+0x64>)
    8ee2:	e7f8      	b.n	8ed6 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_64_fast_init_f32;
    8ee4:	4b07      	ldr	r3, [pc, #28]	; (8f04 <arm_rfft_fast_init_f32+0x68>)
    8ee6:	e7f6      	b.n	8ed6 <arm_rfft_fast_init_f32+0x3a>
  switch (fftLen)
    8ee8:	4b07      	ldr	r3, [pc, #28]	; (8f08 <arm_rfft_fast_init_f32+0x6c>)
    8eea:	e7f4      	b.n	8ed6 <arm_rfft_fast_init_f32+0x3a>
    fptr = arm_rfft_4096_fast_init_f32;
    8eec:	4b07      	ldr	r3, [pc, #28]	; (8f0c <arm_rfft_fast_init_f32+0x70>)
    8eee:	e7f2      	b.n	8ed6 <arm_rfft_fast_init_f32+0x3a>
    8ef0:	00008dd9 	.word	0x00008dd9
    8ef4:	00008e25 	.word	0x00008e25
    8ef8:	00008dfd 	.word	0x00008dfd
    8efc:	00008db5 	.word	0x00008db5
    8f00:	00008d6d 	.word	0x00008d6d
    8f04:	00008d91 	.word	0x00008d91
    8f08:	00008e4d 	.word	0x00008e4d
    8f0c:	00008e75 	.word	0x00008e75

00008f10 <arm_rms_f32>:
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
    8f10:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8f8c <arm_rms_f32+0x7c>
{
    8f14:	b538      	push	{r3, r4, r5, lr}
        float32_t in;                                  /* Temporary variable to store input value */

#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = blockSize >> 2U;
    8f16:	088d      	lsrs	r5, r1, #2
{
    8f18:	4614      	mov	r4, r2
    8f1a:	4603      	mov	r3, r0
  blkCnt = blockSize >> 2U;
    8f1c:	462a      	mov	r2, r5
    8f1e:	eef0 6a67 	vmov.f32	s13, s15

  while (blkCnt > 0U)
    8f22:	3310      	adds	r3, #16
    8f24:	b9ba      	cbnz	r2, 8f56 <arm_rms_f32+0x46>
    8f26:	eb00 1005 	add.w	r0, r0, r5, lsl #4
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = blockSize % 0x4U;
    8f2a:	f001 0303 	and.w	r3, r1, #3
    8f2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
    8f32:	4298      	cmp	r0, r3
    8f34:	d121      	bne.n	8f7a <arm_rms_f32+0x6a>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
    8f36:	ee07 1a10 	vmov	s14, r1
    8f3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8f3e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
    8f42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    8f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f4a:	db1b      	blt.n	8f84 <arm_rms_f32+0x74>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
    8f4c:	f006 f890 	bl	f070 <sqrtf>
    8f50:	ed84 0a00 	vstr	s0, [r4]
}
    8f54:	bd38      	pop	{r3, r4, r5, pc}
    in = *pSrc++;
    8f56:	ed13 7a04 	vldr	s14, [r3, #-16]
    sum += in * in;
    8f5a:	ee47 7a07 	vmla.f32	s15, s14, s14
    blkCnt--;
    8f5e:	3a01      	subs	r2, #1
    in = *pSrc++;
    8f60:	ed13 7a03 	vldr	s14, [r3, #-12]
    sum += in * in;
    8f64:	ee47 7a07 	vmla.f32	s15, s14, s14
    in = *pSrc++;
    8f68:	ed13 7a02 	vldr	s14, [r3, #-8]
    sum += in * in;
    8f6c:	ee47 7a07 	vmla.f32	s15, s14, s14
    in = *pSrc++;
    8f70:	ed13 7a01 	vldr	s14, [r3, #-4]
    sum += in * in;
    8f74:	ee47 7a07 	vmla.f32	s15, s14, s14
    blkCnt--;
    8f78:	e7d3      	b.n	8f22 <arm_rms_f32+0x12>
    in = *pSrc++;
    8f7a:	ecb0 7a01 	vldmia	r0!, {s14}
    sum += ( in * in);
    8f7e:	ee47 7a07 	vmla.f32	s15, s14, s14
    blkCnt--;
    8f82:	e7d6      	b.n	8f32 <arm_rms_f32+0x22>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
    8f84:	edc4 6a00 	vstr	s13, [r4]
}
    8f88:	e7e4      	b.n	8f54 <arm_rms_f32+0x44>
    8f8a:	bf00      	nop
    8f8c:	00000000 	.word	0x00000000

00008f90 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
    8f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f94:	b08f      	sub	sp, #60	; 0x3c
    8f96:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    8f98:	2300      	movs	r3, #0
{
    8f9a:	9008      	str	r0, [sp, #32]
    8f9c:	910b      	str	r1, [sp, #44]	; 0x2c
    8f9e:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    8fa0:	9300      	str	r3, [sp, #0]
    8fa2:	9303      	str	r3, [sp, #12]
    8fa4:	9a00      	ldr	r2, [sp, #0]
    8fa6:	9b08      	ldr	r3, [sp, #32]
    8fa8:	4413      	add	r3, r2
    8faa:	9304      	str	r3, [sp, #16]
    8fac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8fae:	4413      	add	r3, r2
    8fb0:	9307      	str	r3, [sp, #28]
    8fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8fb4:	9b03      	ldr	r3, [sp, #12]
    8fb6:	4293      	cmp	r3, r2
    8fb8:	db02      	blt.n	8fc0 <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
    8fba:	b00f      	add	sp, #60	; 0x3c
    8fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
    8fc0:	9b08      	ldr	r3, [sp, #32]
    8fc2:	9a00      	ldr	r2, [sp, #0]
    8fc4:	569b      	ldrsb	r3, [r3, r2]
    8fc6:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
    8fc8:	2301      	movs	r3, #1
    8fca:	9a02      	ldr	r2, [sp, #8]
    8fcc:	4293      	cmp	r3, r2
    8fce:	f2c0 8136 	blt.w	923e <arm_softmax_s8+0x2ae>
        int32_t sum = 0;
    8fd2:	2300      	movs	r3, #0
    // Rounding offset to add for a right shift of 31
    q63_t mult = 1 << 30;

    if ((m1 < 0) ^ (m2 < 0))
    {
        mult = 1 - mult;
    8fd4:	f8df 827c 	ldr.w	r8, [pc, #636]	; 9254 <arm_softmax_s8+0x2c4>
        for (col = 0; col < row_size; ++col)
    8fd8:	469e      	mov	lr, r3
    8fda:	9a02      	ldr	r2, [sp, #8]
    8fdc:	4596      	cmp	lr, r2
    8fde:	f2c0 813b 	blt.w	9258 <arm_softmax_s8+0x2c8>
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
    8fe2:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
    8fe6:	4093      	lsls	r3, r2
    8fe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
    8fec:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    8fee:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
    8ff2:	f141 0100 	adc.w	r1, r1, #0
    8ff6:	085b      	lsrs	r3, r3, #1
    8ff8:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
    8ffc:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
    mult = mult + (q63_t)m1 * m2;
    9000:	4a93      	ldr	r2, [pc, #588]	; (9250 <arm_softmax_s8+0x2c0>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
    9002:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
    9004:	425c      	negs	r4, r3
    9006:	fb02 4401 	mla	r4, r2, r1, r4
    900a:	fba3 2002 	umull	r2, r0, r3, r2
    900e:	4404      	add	r4, r0
    9010:	4890      	ldr	r0, [pc, #576]	; (9254 <arm_softmax_s8+0x2c4>)
    9012:	1812      	adds	r2, r2, r0
    result = (int32_t)(mult / (1ll << 31));
    9014:	f164 0400 	sbc.w	r4, r4, #0
    9018:	2c00      	cmp	r4, #0
    901a:	da04      	bge.n	9026 <arm_softmax_s8+0x96>
    901c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9020:	1812      	adds	r2, r2, r0
    9022:	f144 0400 	adc.w	r4, r4, #0
    9026:	0fd2      	lsrs	r2, r2, #31
    9028:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
    902c:	f102 305a 	add.w	r0, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
    9030:	17c2      	asrs	r2, r0, #31
    9032:	fb00 f501 	mul.w	r5, r0, r1
    9036:	fb03 5502 	mla	r5, r3, r2, r5
    903a:	fba0 4203 	umull	r4, r2, r0, r3
    903e:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
    9042:	eb45 0202 	adc.w	r2, r5, r2
    result = (int32_t)(mult / (1ll << 31));
    9046:	0fe4      	lsrs	r4, r4, #31
    9048:	ea44 0442 	orr.w	r4, r4, r2, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    904c:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
        mult = 1 - mult;
    9050:	2c00      	cmp	r4, #0
    9052:	4a80      	ldr	r2, [pc, #512]	; (9254 <arm_softmax_s8+0x2c4>)
    9054:	bfa6      	itte	ge
    9056:	2500      	movge	r5, #0
    9058:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
    905c:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    9060:	fbc0 2504 	smlal	r2, r5, r0, r4
    9064:	2d00      	cmp	r5, #0
    9066:	da04      	bge.n	9072 <arm_softmax_s8+0xe2>
    9068:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    906c:	1912      	adds	r2, r2, r4
    906e:	f145 0500 	adc.w	r5, r5, #0
    9072:	0fd2      	lsrs	r2, r2, #31
    9074:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    9078:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        mult = 1 - mult;
    907c:	2a00      	cmp	r2, #0
    907e:	4d75      	ldr	r5, [pc, #468]	; (9254 <arm_softmax_s8+0x2c4>)
    mult = mult + (q63_t)m1 * m2;
    9080:	ea4f 70e2 	mov.w	r0, r2, asr #31
    9084:	fb02 f401 	mul.w	r4, r2, r1
    9088:	fb03 4400 	mla	r4, r3, r0, r4
        mult = 1 - mult;
    908c:	bfa8      	it	ge
    908e:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
    9092:	fba2 0e03 	umull	r0, lr, r2, r3
        mult = 1 - mult;
    9096:	bfac      	ite	ge
    9098:	f04f 0c00 	movge.w	ip, #0
    909c:	f04f 3cff 	movlt.w	ip, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
    90a0:	4474      	add	r4, lr
    90a2:	1940      	adds	r0, r0, r5
    result = (int32_t)(mult / (1ll << 31));
    90a4:	eb44 040c 	adc.w	r4, r4, ip
    90a8:	2c00      	cmp	r4, #0
    if ((m1 < 0) ^ (m2 < 0))
    90aa:	ea4f 76d2 	mov.w	r6, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
    90ae:	da04      	bge.n	90ba <arm_softmax_s8+0x12a>
    90b0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    90b4:	1940      	adds	r0, r0, r5
    90b6:	f144 0400 	adc.w	r4, r4, #0
    90ba:	0fc0      	lsrs	r0, r0, #31
    90bc:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    90c0:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
    90c4:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
    90c8:	4e62      	ldr	r6, [pc, #392]	; (9254 <arm_softmax_s8+0x2c4>)
    90ca:	bf06      	itte	eq
    90cc:	2400      	moveq	r4, #0
    90ce:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    90d2:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    90d6:	fbc2 6400 	smlal	r6, r4, r2, r0
    90da:	4625      	mov	r5, r4
    90dc:	2d00      	cmp	r5, #0
    90de:	4634      	mov	r4, r6
    90e0:	da04      	bge.n	90ec <arm_softmax_s8+0x15c>
    90e2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    90e6:	1834      	adds	r4, r6, r0
    90e8:	f145 0500 	adc.w	r5, r5, #0
    90ec:	0fe4      	lsrs	r4, r4, #31
    90ee:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    90f2:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    90f6:	bfab      	itete	ge
    90f8:	2000      	movge	r0, #0
    90fa:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
    90fe:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
    9102:	2500      	movlt	r5, #0
    9104:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    9108:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    910c:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    9110:	bfcb      	itete	gt
    9112:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
    9116:	2500      	movle	r5, #0
    9118:	2400      	movgt	r4, #0
    911a:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
    911e:	4028      	ands	r0, r5
    9120:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    9122:	4402      	add	r2, r0
        mult = 1 - mult;
    9124:	2a00      	cmp	r2, #0
    9126:	484b      	ldr	r0, [pc, #300]	; (9254 <arm_softmax_s8+0x2c4>)
    mult = mult + (q63_t)m1 * m2;
    9128:	ea4f 76e2 	mov.w	r6, r2, asr #31
    912c:	fb02 f101 	mul.w	r1, r2, r1
    9130:	fb03 1106 	mla	r1, r3, r6, r1
        mult = 1 - mult;
    9134:	bfa8      	it	ge
    9136:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
    913a:	fba2 3603 	umull	r3, r6, r2, r3
        mult = 1 - mult;
    913e:	bfac      	ite	ge
    9140:	2500      	movge	r5, #0
    9142:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
    9146:	4431      	add	r1, r6
    9148:	181b      	adds	r3, r3, r0
    result = (int32_t)(mult / (1ll << 31));
    914a:	eb41 0105 	adc.w	r1, r1, r5
    914e:	2900      	cmp	r1, #0
    if ((m1 < 0) ^ (m2 < 0))
    9150:	ea4f 74d2 	mov.w	r4, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
    9154:	da04      	bge.n	9160 <arm_softmax_s8+0x1d0>
    9156:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    915a:	181b      	adds	r3, r3, r0
    915c:	f141 0100 	adc.w	r1, r1, #0
    9160:	0fdb      	lsrs	r3, r3, #31
    9162:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    9166:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
    916a:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
    916e:	4939      	ldr	r1, [pc, #228]	; (9254 <arm_softmax_s8+0x2c4>)
    9170:	bf06      	itte	eq
    9172:	2000      	moveq	r0, #0
    9174:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    9178:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    917c:	fbc2 1003 	smlal	r1, r0, r2, r3
    9180:	2800      	cmp	r0, #0
    9182:	da04      	bge.n	918e <arm_softmax_s8+0x1fe>
    9184:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    9188:	18c9      	adds	r1, r1, r3
    918a:	f140 0000 	adc.w	r0, r0, #0
    918e:	0fc9      	lsrs	r1, r1, #31
    9190:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    9194:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    9198:	bfab      	itete	ge
    919a:	2300      	movge	r3, #0
    919c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    91a0:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
    91a4:	2100      	movlt	r1, #0
    91a6:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    91aa:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    91ae:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    91b2:	bfd5      	itete	le
    91b4:	2000      	movle	r0, #0
    91b6:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
    91ba:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
    91be:	2100      	movgt	r1, #0
    91c0:	4018      	ands	r0, r3
    91c2:	4048      	eors	r0, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
    91c4:	4402      	add	r2, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    91c6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    91ca:	bfab      	itete	ge
    91cc:	2300      	movge	r3, #0
    91ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    91d2:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
    91d6:	2100      	movlt	r1, #0
    91d8:	ea03 0342 	and.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    91dc:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
    91e0:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
    91e4:	bfcb      	itete	gt
    91e6:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
    91ea:	2100      	movle	r1, #0
    91ec:	2200      	movgt	r2, #0
    91ee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    91f2:	400b      	ands	r3, r1
        for (col = 0; col < row_size; ++col)
    91f4:	4053      	eors	r3, r2
    91f6:	bf48      	it	mi
    91f8:	4a16      	ldrmi	r2, [pc, #88]	; (9254 <arm_softmax_s8+0x2c4>)
    91fa:	9309      	str	r3, [sp, #36]	; 0x24
    91fc:	bf56      	itet	pl
    91fe:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
    9202:	f04f 33ff 	movmi.w	r3, #4294967295	; 0xffffffff
    9206:	2300      	movpl	r3, #0
    9208:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
    920c:	2301      	movs	r3, #1
    920e:	fa03 f30a 	lsl.w	r3, r3, sl
    9212:	3b01      	subs	r3, #1
    9214:	9305      	str	r3, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
    9216:	105b      	asrs	r3, r3, #1
    9218:	9306      	str	r3, [sp, #24]
        mult = 1 - mult;
    921a:	f8df e038 	ldr.w	lr, [pc, #56]	; 9254 <arm_softmax_s8+0x2c4>
        threshold++;
    921e:	3301      	adds	r3, #1
    9220:	930a      	str	r3, [sp, #40]	; 0x28
    9222:	f04f 0c00 	mov.w	ip, #0
    9226:	9b02      	ldr	r3, [sp, #8]
    9228:	459c      	cmp	ip, r3
    922a:	f2c0 8183 	blt.w	9534 <arm_softmax_s8+0x5a4>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
    922e:	9b03      	ldr	r3, [sp, #12]
    9230:	9a00      	ldr	r2, [sp, #0]
    9232:	3301      	adds	r3, #1
    9234:	9303      	str	r3, [sp, #12]
    9236:	9b02      	ldr	r3, [sp, #8]
    9238:	441a      	add	r2, r3
    923a:	9200      	str	r2, [sp, #0]
    923c:	e6b2      	b.n	8fa4 <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
    923e:	9a04      	ldr	r2, [sp, #16]
    9240:	9901      	ldr	r1, [sp, #4]
    9242:	56d2      	ldrsb	r2, [r2, r3]
    9244:	4291      	cmp	r1, r2
    9246:	bfb8      	it	lt
    9248:	4611      	movlt	r1, r2
    924a:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
    924c:	3301      	adds	r3, #1
    924e:	e6bc      	b.n	8fca <arm_softmax_s8+0x3a>
    9250:	c3c3c3c4 	.word	0xc3c3c3c4
    9254:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
    9258:	9a04      	ldr	r2, [sp, #16]
    925a:	f912 000e 	ldrsb.w	r0, [r2, lr]
    925e:	9a01      	ldr	r2, [sp, #4]
    9260:	1a80      	subs	r0, r0, r2
            if (diff >= diff_min)
    9262:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9264:	4282      	cmp	r2, r0
    9266:	f300 8152 	bgt.w	950e <arm_softmax_s8+0x57e>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
    926a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    926c:	4090      	lsls	r0, r2
    if ((m1 < 0) ^ (m2 < 0))
    926e:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
    9270:	ebb2 7fdb 	cmp.w	r2, fp, lsr #31
    9274:	bf0b      	itete	eq
    9276:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    927a:	4641      	movne	r1, r8
    927c:	2200      	moveq	r2, #0
    927e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    9282:	fbc0 120b 	smlal	r1, r2, r0, fp
    9286:	2a00      	cmp	r2, #0
    9288:	4614      	mov	r4, r2
    928a:	da04      	bge.n	9296 <arm_softmax_s8+0x306>
    928c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9290:	1889      	adds	r1, r1, r2
    9292:	f144 0400 	adc.w	r4, r4, #0
    9296:	0fca      	lsrs	r2, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    9298:	4558      	cmp	r0, fp
    result = (int32_t)(mult / (1ll << 31));
    929a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    929e:	d104      	bne.n	92aa <arm_softmax_s8+0x31a>
        result = Q31_MAX;
    92a0:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
    92a4:	bf08      	it	eq
    92a6:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    92aa:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
    92ae:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
    92b2:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    92b6:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
    92ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    92be:	2400      	movs	r4, #0
    92c0:	fbcc 140c 	smlal	r1, r4, ip, ip
    92c4:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
    92c6:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
    92ca:	da04      	bge.n	92d6 <arm_softmax_s8+0x346>
    92cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    92d0:	1809      	adds	r1, r1, r0
    92d2:	f144 0400 	adc.w	r4, r4, #0
    92d6:	0fc9      	lsrs	r1, r1, #31
    92d8:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
    92dc:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t)(mult / (1ll << 31));
    92e0:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
    92e2:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    92e6:	fb01 fa04 	mul.w	sl, r1, r4
    result = (int32_t)(mult / (1ll << 31));
    92ea:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
    92ee:	f1b9 0f00 	cmp.w	r9, #0
    92f2:	da05      	bge.n	9300 <arm_softmax_s8+0x370>
    92f4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    92f8:	eb10 000a 	adds.w	r0, r0, sl
    92fc:	f149 0900 	adc.w	r9, r9, #0
    9300:	0fc0      	lsrs	r0, r0, #31
    9302:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
    9306:	f000 0903 	and.w	r9, r0, #3
        threshold++;
    930a:	1080      	asrs	r0, r0, #2
    930c:	bf54      	ite	pl
    930e:	f04f 0a01 	movpl.w	sl, #1
    9312:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
    9316:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
    9318:	ea4f 79d1 	mov.w	r9, r1, lsr #31
        result++;
    931c:	bfc8      	it	gt
    931e:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
    9320:	fb0c f404 	mul.w	r4, ip, r4
        mult = 1 - mult;
    9324:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
    mult = mult + (q63_t)m1 * m2;
    9328:	fb01 4406 	mla	r4, r1, r6, r4
        mult = 1 - mult;
    932c:	bf08      	it	eq
    932e:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
    9332:	fbac 6701 	umull	r6, r7, ip, r1
        mult = 1 - mult;
    9336:	bf16      	itet	ne
    9338:	46c1      	movne	r9, r8
    933a:	f04f 0a00 	moveq.w	sl, #0
    933e:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
    9342:	443c      	add	r4, r7
    9344:	eb16 0609 	adds.w	r6, r6, r9
    result = (int32_t)(mult / (1ll << 31));
    9348:	eb44 040a 	adc.w	r4, r4, sl
    934c:	2c00      	cmp	r4, #0
    934e:	da05      	bge.n	935c <arm_softmax_s8+0x3cc>
    9350:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    9354:	eb16 0609 	adds.w	r6, r6, r9
    9358:	f144 0400 	adc.w	r4, r4, #0
    935c:	0ff6      	lsrs	r6, r6, #31
    935e:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    9362:	4430      	add	r0, r6
        mult = 1 - mult;
    9364:	2800      	cmp	r0, #0
    result = (int32_t)(mult / (1ll << 31));
    9366:	4f6b      	ldr	r7, [pc, #428]	; (9514 <arm_softmax_s8+0x584>)
        mult = 1 - mult;
    9368:	bfab      	itete	ge
    936a:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
    936e:	4644      	movlt	r4, r8
    9370:	2600      	movge	r6, #0
    9372:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    9376:	fbc0 4607 	smlal	r4, r6, r0, r7
    937a:	2e00      	cmp	r6, #0
    937c:	da04      	bge.n	9388 <arm_softmax_s8+0x3f8>
    937e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9382:	1824      	adds	r4, r4, r0
    9384:	f146 0600 	adc.w	r6, r6, #0
    9388:	0fe4      	lsrs	r4, r4, #31
    938a:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    938e:	440c      	add	r4, r1
    if (result < 0)
    9390:	1061      	asrs	r1, r4, #1
    9392:	d402      	bmi.n	939a <arm_softmax_s8+0x40a>
    if (remainder > threshold)
    9394:	07e6      	lsls	r6, r4, #31
        result++;
    9396:	bf48      	it	mi
    9398:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    939a:	448c      	add	ip, r1
        mult = 1 - mult;
    939c:	f1bc 0f00 	cmp.w	ip, #0
    result = (int32_t)(mult / (1ll << 31));
    93a0:	485d      	ldr	r0, [pc, #372]	; (9518 <arm_softmax_s8+0x588>)
        mult = 1 - mult;
    93a2:	bfab      	itete	ge
    93a4:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
    93a8:	4644      	movlt	r4, r8
    93aa:	2100      	movge	r1, #0
    93ac:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    93b0:	fbcc 4100 	smlal	r4, r1, ip, r0
    93b4:	2900      	cmp	r1, #0
    93b6:	da04      	bge.n	93c2 <arm_softmax_s8+0x432>
    93b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    93bc:	1824      	adds	r4, r4, r0
    93be:	f141 0100 	adc.w	r1, r1, #0
    93c2:	0fe4      	lsrs	r4, r4, #31
    93c4:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    int32_t result = 1895147668 +
    93c8:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
    93cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    93d0:	2000      	movs	r0, #0
    93d2:	4f52      	ldr	r7, [pc, #328]	; (951c <arm_softmax_s8+0x58c>)
    int32_t result = 1895147668 +
    93d4:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
    93d8:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
    93dc:	468c      	mov	ip, r1
    93de:	4682      	mov	sl, r0
    93e0:	fbc4 ca07 	smlal	ip, sl, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
    93e4:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t)(mult / (1ll << 31));
    93e8:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    93ec:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    93f0:	f345 6900 	sbfx	r9, r5, #24, #1
    93f4:	3e01      	subs	r6, #1
    93f6:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
    93fa:	4f49      	ldr	r7, [pc, #292]	; (9520 <arm_softmax_s8+0x590>)
    SELECT_IF_NON_ZERO(1672461947)
    93fc:	4034      	ands	r4, r6
    93fe:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
    9402:	468c      	mov	ip, r1
    9404:	4606      	mov	r6, r0
    9406:	fbc4 c607 	smlal	ip, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
    940a:	f3c5 6a40 	ubfx	sl, r5, #25, #1
    result = (int32_t)(mult / (1ll << 31));
    940e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    9412:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
    9416:	f345 6940 	sbfx	r9, r5, #25, #1
    941a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    941e:	ea0a 0a04 	and.w	sl, sl, r4
    9422:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
    9426:	4f3f      	ldr	r7, [pc, #252]	; (9524 <arm_softmax_s8+0x594>)
    SELECT_IF_NON_ZERO(1302514674)
    9428:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
    942c:	460e      	mov	r6, r1
    942e:	4604      	mov	r4, r0
    9430:	fbc9 6407 	smlal	r6, r4, r9, r7
    SELECT_IF_NON_ZERO(790015084)
    9434:	f3c5 6a80 	ubfx	sl, r5, #26, #1
    result = (int32_t)(mult / (1ll << 31));
    9438:	0ff6      	lsrs	r6, r6, #31
    943a:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
    943e:	f345 6c80 	sbfx	ip, r5, #26, #1
    9442:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    9446:	ea0a 0a09 	and.w	sl, sl, r9
    944a:	ea0c 0c06 	and.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
    944e:	4e36      	ldr	r6, [pc, #216]	; (9528 <arm_softmax_s8+0x598>)
    SELECT_IF_NON_ZERO(790015084)
    9450:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
    9454:	460c      	mov	r4, r1
    9456:	4682      	mov	sl, r0
    9458:	fbcc 4a06 	smlal	r4, sl, ip, r6
    SELECT_IF_NON_ZERO(290630308)
    945c:	f3c5 69c0 	ubfx	r9, r5, #27, #1
    result = (int32_t)(mult / (1ll << 31));
    9460:	0fe4      	lsrs	r4, r4, #31
    9462:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
    9466:	f345 66c0 	sbfx	r6, r5, #27, #1
    946a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    946e:	ea09 090c 	and.w	r9, r9, ip
    9472:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
    9474:	4c2d      	ldr	r4, [pc, #180]	; (952c <arm_softmax_s8+0x59c>)
    SELECT_IF_NON_ZERO(290630308)
    9476:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
    947a:	4682      	mov	sl, r0
    947c:	4689      	mov	r9, r1
    947e:	fbc6 9a04 	smlal	r9, sl, r6, r4
    SELECT_IF_NON_ZERO(39332535)
    9482:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    result = (int32_t)(mult / (1ll << 31));
    9486:	ea4f 79d9 	mov.w	r9, r9, lsr #31
    948a:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
    948e:	f345 7400 	sbfx	r4, r5, #28, #1
    9492:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    9496:	ea0c 0c06 	and.w	ip, ip, r6
    949a:	ea04 0409 	and.w	r4, r4, r9
    mult = mult + (q63_t)m1 * m2;
    949e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9530 <arm_softmax_s8+0x5a0>
    SELECT_IF_NON_ZERO(39332535)
    94a2:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
    94a6:	4682      	mov	sl, r0
    94a8:	468c      	mov	ip, r1
    94aa:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
    94ae:	f3c5 7640 	ubfx	r6, r5, #29, #1
    result = (int32_t)(mult / (1ll << 31));
    94b2:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    94b6:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
    94ba:	f345 7940 	sbfx	r9, r5, #29, #1
    94be:	3e01      	subs	r6, #1
    94c0:	4026      	ands	r6, r4
    94c2:	ea09 0c0c 	and.w	ip, r9, ip
    94c6:	ea8c 0c06 	eor.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
    94ca:	24f2      	movs	r4, #242	; 0xf2
    94cc:	fbcc 1004 	smlal	r1, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
    94d0:	f3c5 7a80 	ubfx	sl, r5, #30, #1
    result = (int32_t)(mult / (1ll << 31));
    94d4:	0fc9      	lsrs	r1, r1, #31
    94d6:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
    94da:	f345 7580 	sbfx	r5, r5, #30, #1
    94de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    mask = MASK_IF_ZERO(val);
    94e2:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
    94e6:	ea0a 0a0c 	and.w	sl, sl, ip
    mask = MASK_IF_ZERO(val);
    94ea:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
    94ec:	4029      	ands	r1, r5
    94ee:	ea81 010a 	eor.w	r1, r1, sl
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    94f2:	1e50      	subs	r0, r2, #1
    mask = MASK_IF_ZERO(val);
    94f4:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    94f6:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
    94fa:	4001      	ands	r1, r0
    94fc:	ea81 0a0a 	eor.w	sl, r1, sl
    result = dividend >> exponent;
    9500:	ea4f 322a 	mov.w	r2, sl, asr #12
    if (remainder > threshold)
    9504:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
    9508:	bf18      	it	ne
    950a:	3201      	addne	r2, #1
    950c:	4413      	add	r3, r2
        for (col = 0; col < row_size; ++col)
    950e:	f10e 0e01 	add.w	lr, lr, #1
    9512:	e562      	b.n	8fda <arm_softmax_s8+0x4a>
    9514:	2aaaaaab 	.word	0x2aaaaaab
    9518:	70f5a894 	.word	0x70f5a894
    951c:	63afbe7b 	.word	0x63afbe7b
    9520:	4da2cbf2 	.word	0x4da2cbf2
    9524:	2f16ac6c 	.word	0x2f16ac6c
    9528:	1152aaa4 	.word	0x1152aaa4
    952c:	02582ab7 	.word	0x02582ab7
    9530:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
    9534:	9b04      	ldr	r3, [sp, #16]
    9536:	f913 100c 	ldrsb.w	r1, [r3, ip]
    953a:	9b01      	ldr	r3, [sp, #4]
    953c:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
    953e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9540:	4299      	cmp	r1, r3
    9542:	f2c0 816b 	blt.w	981c <arm_softmax_s8+0x88c>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
    9546:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9548:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
    954a:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
    954c:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
    9550:	bf0b      	itete	eq
    9552:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    9556:	4673      	movne	r3, lr
    9558:	2200      	moveq	r2, #0
    955a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    955e:	fbc1 320b 	smlal	r3, r2, r1, fp
    9562:	2a00      	cmp	r2, #0
    9564:	4610      	mov	r0, r2
    9566:	da04      	bge.n	9572 <arm_softmax_s8+0x5e2>
    9568:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    956c:	189b      	adds	r3, r3, r2
    956e:	f140 0000 	adc.w	r0, r0, #0
    9572:	0fda      	lsrs	r2, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    9574:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
    9576:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
    957a:	d104      	bne.n	9586 <arm_softmax_s8+0x5f6>
        result = Q31_MAX;
    957c:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
    9580:	bf08      	it	eq
    9582:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    9586:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
    958a:	1ab3      	subs	r3, r6, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
    958c:	0176      	lsls	r6, r6, #5
    958e:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
    9592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
    9596:	2400      	movs	r4, #0
    9598:	fbc6 1406 	smlal	r1, r4, r6, r6
    959c:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
    959e:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t)(mult / (1ll << 31));
    95a2:	da04      	bge.n	95ae <arm_softmax_s8+0x61e>
    95a4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    95a8:	1809      	adds	r1, r1, r0
    95aa:	f144 0400 	adc.w	r4, r4, #0
    95ae:	0fc9      	lsrs	r1, r1, #31
    95b0:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
    95b4:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t)(mult / (1ll << 31));
    95b8:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
    95ba:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    95be:	fb01 f904 	mul.w	r9, r1, r4
    result = (int32_t)(mult / (1ll << 31));
    95c2:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
    95c6:	f1b8 0f00 	cmp.w	r8, #0
    95ca:	da05      	bge.n	95d8 <arm_softmax_s8+0x648>
    95cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    95d0:	eb10 0009 	adds.w	r0, r0, r9
    95d4:	f148 0800 	adc.w	r8, r8, #0
    95d8:	0fc0      	lsrs	r0, r0, #31
    95da:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
    95de:	f000 0803 	and.w	r8, r0, #3
        threshold++;
    95e2:	1080      	asrs	r0, r0, #2
    95e4:	bf54      	ite	pl
    95e6:	f04f 0901 	movpl.w	r9, #1
    95ea:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
    95ee:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
    95f0:	ea4f 78d1 	mov.w	r8, r1, lsr #31
        result++;
    95f4:	bfc8      	it	gt
    95f6:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
    95f8:	4374      	muls	r4, r6
        mult = 1 - mult;
    95fa:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
    mult = mult + (q63_t)m1 * m2;
    95fe:	fb01 4405 	mla	r4, r1, r5, r4
        mult = 1 - mult;
    9602:	bf08      	it	eq
    9604:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
    9608:	fba6 5701 	umull	r5, r7, r6, r1
        mult = 1 - mult;
    960c:	bf16      	itet	ne
    960e:	46f0      	movne	r8, lr
    9610:	f04f 0900 	moveq.w	r9, #0
    9614:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
    9618:	443c      	add	r4, r7
    961a:	eb15 0508 	adds.w	r5, r5, r8
    result = (int32_t)(mult / (1ll << 31));
    961e:	eb44 0409 	adc.w	r4, r4, r9
    9622:	2c00      	cmp	r4, #0
    9624:	da05      	bge.n	9632 <arm_softmax_s8+0x6a2>
    9626:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    962a:	eb15 0508 	adds.w	r5, r5, r8
    962e:	f144 0400 	adc.w	r4, r4, #0
    9632:	0fed      	lsrs	r5, r5, #31
    9634:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    9638:	4428      	add	r0, r5
        mult = 1 - mult;
    963a:	2800      	cmp	r0, #0
    result = (int32_t)(mult / (1ll << 31));
    963c:	4f78      	ldr	r7, [pc, #480]	; (9820 <arm_softmax_s8+0x890>)
        mult = 1 - mult;
    963e:	bfab      	itete	ge
    9640:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
    9644:	4674      	movlt	r4, lr
    9646:	2500      	movge	r5, #0
    9648:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    964c:	fbc0 4507 	smlal	r4, r5, r0, r7
    9650:	2d00      	cmp	r5, #0
    9652:	da04      	bge.n	965e <arm_softmax_s8+0x6ce>
    9654:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9658:	1824      	adds	r4, r4, r0
    965a:	f145 0500 	adc.w	r5, r5, #0
    965e:	0fe4      	lsrs	r4, r4, #31
    9660:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    9664:	440c      	add	r4, r1
    if (result < 0)
    9666:	1061      	asrs	r1, r4, #1
    9668:	d402      	bmi.n	9670 <arm_softmax_s8+0x6e0>
    if (remainder > threshold)
    966a:	07e0      	lsls	r0, r4, #31
        result++;
    966c:	bf48      	it	mi
    966e:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
    9670:	440e      	add	r6, r1
        mult = 1 - mult;
    9672:	2e00      	cmp	r6, #0
    result = (int32_t)(mult / (1ll << 31));
    9674:	486b      	ldr	r0, [pc, #428]	; (9824 <arm_softmax_s8+0x894>)
        mult = 1 - mult;
    9676:	bfab      	itete	ge
    9678:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
    967c:	4674      	movlt	r4, lr
    967e:	2100      	movge	r1, #0
    9680:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
    9684:	fbc6 4100 	smlal	r4, r1, r6, r0
    9688:	2900      	cmp	r1, #0
    968a:	da04      	bge.n	9696 <arm_softmax_s8+0x706>
    968c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9690:	1824      	adds	r4, r4, r0
    9692:	f141 0100 	adc.w	r1, r1, #0
    9696:	0fe4      	lsrs	r4, r4, #31
    9698:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    int32_t result = 1895147668 +
    969c:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
    96a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    96a4:	2000      	movs	r0, #0
    96a6:	4f60      	ldr	r7, [pc, #384]	; (9828 <arm_softmax_s8+0x898>)
    int32_t result = 1895147668 +
    96a8:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
    96ac:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
    96b0:	460e      	mov	r6, r1
    96b2:	4681      	mov	r9, r0
    96b4:	fbc4 6907 	smlal	r6, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
    96b8:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
    96bc:	0ff6      	lsrs	r6, r6, #31
    96be:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
    96c2:	f343 6800 	sbfx	r8, r3, #24, #1
    96c6:	3d01      	subs	r5, #1
    96c8:	ea08 0806 	and.w	r8, r8, r6
    96cc:	402c      	ands	r4, r5
    mult = mult + (q63_t)m1 * m2;
    96ce:	4f57      	ldr	r7, [pc, #348]	; (982c <arm_softmax_s8+0x89c>)
    SELECT_IF_NON_ZERO(1672461947)
    96d0:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
    96d4:	460e      	mov	r6, r1
    96d6:	4605      	mov	r5, r0
    96d8:	fbc4 6507 	smlal	r6, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
    96dc:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
    96e0:	0ff6      	lsrs	r6, r6, #31
    96e2:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
    96e6:	f343 6840 	sbfx	r8, r3, #25, #1
    96ea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    96ee:	ea09 0904 	and.w	r9, r9, r4
    96f2:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
    96f6:	4e4e      	ldr	r6, [pc, #312]	; (9830 <arm_softmax_s8+0x8a0>)
    SELECT_IF_NON_ZERO(1302514674)
    96f8:	ea88 0809 	eor.w	r8, r8, r9
    mult = mult + (q63_t)m1 * m2;
    96fc:	460d      	mov	r5, r1
    96fe:	4604      	mov	r4, r0
    9700:	fbc8 5406 	smlal	r5, r4, r8, r6
    SELECT_IF_NON_ZERO(790015084)
    9704:	f3c3 6980 	ubfx	r9, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
    9708:	0fed      	lsrs	r5, r5, #31
    970a:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
    970e:	f343 6680 	sbfx	r6, r3, #26, #1
    9712:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9716:	ea09 0908 	and.w	r9, r9, r8
    971a:	402e      	ands	r6, r5
    mult = mult + (q63_t)m1 * m2;
    971c:	4d45      	ldr	r5, [pc, #276]	; (9834 <arm_softmax_s8+0x8a4>)
    SELECT_IF_NON_ZERO(790015084)
    971e:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
    9722:	460c      	mov	r4, r1
    9724:	4681      	mov	r9, r0
    9726:	fbc6 4905 	smlal	r4, r9, r6, r5
    SELECT_IF_NON_ZERO(290630308)
    972a:	f3c3 68c0 	ubfx	r8, r3, #27, #1
    result = (int32_t)(mult / (1ll << 31));
    972e:	0fe4      	lsrs	r4, r4, #31
    9730:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
    9734:	f343 65c0 	sbfx	r5, r3, #27, #1
    9738:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    973c:	ea08 0806 	and.w	r8, r8, r6
    9740:	4025      	ands	r5, r4
    mult = mult + (q63_t)m1 * m2;
    9742:	4c3d      	ldr	r4, [pc, #244]	; (9838 <arm_softmax_s8+0x8a8>)
    SELECT_IF_NON_ZERO(290630308)
    9744:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
    9748:	4681      	mov	r9, r0
    974a:	4688      	mov	r8, r1
    974c:	fbc5 8904 	smlal	r8, r9, r5, r4
    SELECT_IF_NON_ZERO(39332535)
    9750:	f3c3 7600 	ubfx	r6, r3, #28, #1
    result = (int32_t)(mult / (1ll << 31));
    9754:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    9758:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
    975c:	f343 7400 	sbfx	r4, r3, #28, #1
    9760:	3e01      	subs	r6, #1
    9762:	402e      	ands	r6, r5
    9764:	ea04 0408 	and.w	r4, r4, r8
    mult = mult + (q63_t)m1 * m2;
    9768:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 983c <arm_softmax_s8+0x8ac>
    SELECT_IF_NON_ZERO(39332535)
    976c:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
    976e:	4681      	mov	r9, r0
    9770:	460e      	mov	r6, r1
    9772:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
    9776:	f3c3 7540 	ubfx	r5, r3, #29, #1
    result = (int32_t)(mult / (1ll << 31));
    977a:	0ff6      	lsrs	r6, r6, #31
    977c:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
    9780:	f343 7840 	sbfx	r8, r3, #29, #1
    9784:	3d01      	subs	r5, #1
    9786:	4025      	ands	r5, r4
    9788:	ea08 0606 	and.w	r6, r8, r6
    978c:	406e      	eors	r6, r5
    mult = mult + (q63_t)m1 * m2;
    978e:	24f2      	movs	r4, #242	; 0xf2
    9790:	fbc6 1004 	smlal	r1, r0, r6, r4
    SELECT_IF_NON_ZERO(242)
    9794:	f3c3 7980 	ubfx	r9, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
    9798:	0fc9      	lsrs	r1, r1, #31
    979a:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
    979e:	f343 7380 	sbfx	r3, r3, #30, #1
    97a2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    mask = MASK_IF_ZERO(val);
    97a6:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
    97aa:	4019      	ands	r1, r3
    mask = MASK_IF_ZERO(val);
    97ac:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
    97ae:	ea09 0906 	and.w	r9, r9, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    97b2:	1e50      	subs	r0, r2, #1
    SELECT_IF_NON_ZERO(242)
    97b4:	ea81 0109 	eor.w	r1, r1, r9
    mask = MASK_IF_ZERO(val);
    97b8:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    97ba:	4001      	ands	r1, r0
    97bc:	f022 4000 	bic.w	r0, r2, #2147483648	; 0x80000000
    result = (int32_t)(mult / (1ll << 31));
    97c0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    return SELECT_USING_MASK(mask, Q31_MAX, result);
    97c4:	4048      	eors	r0, r1
    result = (int32_t)(mult / (1ll << 31));
    97c6:	9909      	ldr	r1, [sp, #36]	; 0x24
    97c8:	fbc1 3200 	smlal	r3, r2, r1, r0
    97cc:	2a00      	cmp	r2, #0
    97ce:	4614      	mov	r4, r2
    97d0:	da04      	bge.n	97dc <arm_softmax_s8+0x84c>
    97d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    97d6:	189b      	adds	r3, r3, r2
    97d8:	f144 0400 	adc.w	r4, r4, #0
    int32_t remainder = remainder_mask & dividend;
    97dc:	9a05      	ldr	r2, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
    97de:	9806      	ldr	r0, [sp, #24]
    97e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    result = (int32_t)(mult / (1ll << 31));
    97e2:	0fdb      	lsrs	r3, r3, #31
    97e4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    int32_t remainder = remainder_mask & dividend;
    97e8:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
    97ea:	fa53 f30a 	asrs.w	r3, r3, sl
    97ee:	bf58      	it	pl
    97f0:	4601      	movpl	r1, r0
    if (remainder > threshold)
    97f2:	428a      	cmp	r2, r1
        result++;
    97f4:	bfc8      	it	gt
    97f6:	3301      	addgt	r3, #1
                const int32_t res =
    97f8:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
    97fa:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
    97fe:	db08      	blt.n	9812 <arm_softmax_s8+0x882>
    9800:	2b7e      	cmp	r3, #126	; 0x7e
    9802:	dc09      	bgt.n	9818 <arm_softmax_s8+0x888>
    9804:	b25b      	sxtb	r3, r3
                output[col] = -128;
    9806:	9a07      	ldr	r2, [sp, #28]
    9808:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
    980c:	f10c 0c01 	add.w	ip, ip, #1
    9810:	e509      	b.n	9226 <arm_softmax_s8+0x296>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
    9812:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9816:	e7f6      	b.n	9806 <arm_softmax_s8+0x876>
    9818:	237f      	movs	r3, #127	; 0x7f
    981a:	e7f4      	b.n	9806 <arm_softmax_s8+0x876>
                output[col] = -128;
    981c:	2380      	movs	r3, #128	; 0x80
    981e:	e7f2      	b.n	9806 <arm_softmax_s8+0x876>
    9820:	2aaaaaab 	.word	0x2aaaaaab
    9824:	70f5a894 	.word	0x70f5a894
    9828:	63afbe7b 	.word	0x63afbe7b
    982c:	4da2cbf2 	.word	0x4da2cbf2
    9830:	2f16ac6c 	.word	0x2f16ac6c
    9834:	1152aaa4 	.word	0x1152aaa4
    9838:	02582ab7 	.word	0x02582ab7
    983c:	000afe11 	.word	0x000afe11

00009840 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    9840:	2810      	cmp	r0, #16
    9842:	bf9a      	itte	ls
    9844:	4b02      	ldrls	r3, [pc, #8]	; (9850 <TfLiteTypeGetName+0x10>)
    9846:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
    984a:	4802      	ldrhi	r0, [pc, #8]	; (9854 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
    984c:	4770      	bx	lr
    984e:	bf00      	nop
    9850:	0002eff4 	.word	0x0002eff4
    9854:	00045766 	.word	0x00045766

00009858 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9858:	4a05      	ldr	r2, [pc, #20]	; (9870 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
    985a:	e9d2 3200 	ldrd	r3, r2, [r2]
    985e:	1ad2      	subs	r2, r2, r3

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    9860:	ebb1 0fe2 	cmp.w	r1, r2, asr #3
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
    9864:	bfba      	itte	lt
    9866:	eb03 03c1 	addlt.w	r3, r3, r1, lsl #3
    986a:	6858      	ldrlt	r0, [r3, #4]
    return NULL;
    986c:	2000      	movge	r0, #0
}
    986e:	4770      	bx	lr
    9870:	2000117c 	.word	0x2000117c

00009874 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}
    9874:	4801      	ldr	r0, [pc, #4]	; (987c <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x8>)
    9876:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    987a:	4770      	bx	lr
    987c:	20000820 	.word	0x20000820

00009880 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}
    9880:	4b02      	ldr	r3, [pc, #8]	; (988c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xc>)
    9882:	200c      	movs	r0, #12
    9884:	fb00 3001 	mla	r0, r0, r1, r3
    9888:	4770      	bx	lr
    988a:	bf00      	nop
    988c:	20000e84 	.word	0x20000e84

00009890 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
    9890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9894:	4603      	mov	r3, r0
    9896:	b089      	sub	sp, #36	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
    9898:	f641 4170 	movw	r1, #7280	; 0x1c70
    989c:	2010      	movs	r0, #16
    989e:	4798      	blx	r3
    98a0:	4b70      	ldr	r3, [pc, #448]	; (9a64 <_Z18trained_model_initPFPvjjE+0x1d4>)
    98a2:	4604      	mov	r4, r0
    98a4:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
    98a6:	b930      	cbnz	r0, 98b6 <_Z18trained_model_initPFPvjjE+0x26>
    printf("ERR: failed to allocate tensor arena\n");
    98a8:	486f      	ldr	r0, [pc, #444]	; (9a68 <_Z18trained_model_initPFPvjjE+0x1d8>)
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    98aa:	f006 fb93 	bl	ffd4 <iprintf>
    return kTfLiteError;
    98ae:	2001      	movs	r0, #1
        return status;
      }
    }
  }
  return kTfLiteOk;
}
    98b0:	b009      	add	sp, #36	; 0x24
    98b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  current_location = tensor_arena + kTensorArenaSize;
    98b6:	4b6d      	ldr	r3, [pc, #436]	; (9a6c <_Z18trained_model_initPFPvjjE+0x1dc>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
    98b8:	4a6d      	ldr	r2, [pc, #436]	; (9a70 <_Z18trained_model_initPFPvjjE+0x1e0>)
  tensor_boundary = tensor_arena;
    98ba:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 9a9c <_Z18trained_model_initPFPvjjE+0x20c>
    98be:	4d6d      	ldr	r5, [pc, #436]	; (9a74 <_Z18trained_model_initPFPvjjE+0x1e4>)
    98c0:	f8cc 0000 	str.w	r0, [ip]
  current_location = tensor_arena + kTensorArenaSize;
    98c4:	f500 56e3 	add.w	r6, r0, #7264	; 0x1c60
    98c8:	3610      	adds	r6, #16
    98ca:	601e      	str	r6, [r3, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
    98cc:	4b6a      	ldr	r3, [pc, #424]	; (9a78 <_Z18trained_model_initPFPvjjE+0x1e8>)
    98ce:	6393      	str	r3, [r2, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
    98d0:	4b6a      	ldr	r3, [pc, #424]	; (9a7c <_Z18trained_model_initPFPvjjE+0x1ec>)
    98d2:	6413      	str	r3, [r2, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
    98d4:	4b6a      	ldr	r3, [pc, #424]	; (9a80 <_Z18trained_model_initPFPvjjE+0x1f0>)
    98d6:	6453      	str	r3, [r2, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
    98d8:	4b6a      	ldr	r3, [pc, #424]	; (9a84 <_Z18trained_model_initPFPvjjE+0x1f4>)
    98da:	6513      	str	r3, [r2, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
    98dc:	4b6a      	ldr	r3, [pc, #424]	; (9a88 <_Z18trained_model_initPFPvjjE+0x1f8>)
    98de:	6553      	str	r3, [r2, #84]	; 0x54
  ctx.tensors_size = 23;
    98e0:	2717      	movs	r7, #23
  ctx.tensors = tflTensors;
    98e2:	4b6a      	ldr	r3, [pc, #424]	; (9a8c <_Z18trained_model_initPFPvjjE+0x1fc>)
    98e4:	6093      	str	r3, [r2, #8]
  ctx.tensors_size = 23;
    98e6:	6017      	str	r7, [r2, #0]
  for(size_t i = 0; i < 23; ++i) {
    98e8:	4a69      	ldr	r2, [pc, #420]	; (9a90 <_Z18trained_model_initPFPvjjE+0x200>)
    tflTensors[i].is_variable = 0;
    98ea:	f04f 0e00 	mov.w	lr, #0
    tflTensors[i].type = tensorData[i].type;
    98ee:	7851      	ldrb	r1, [r2, #1]
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    98f0:	f892 9000 	ldrb.w	r9, [r2]
    tflTensors[i].type = tensorData[i].type;
    98f4:	7019      	strb	r1, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
    98f6:	7229      	strb	r1, [r5, #8]
    tflTensors[i].dims = tensorData[i].dims;
    98f8:	6891      	ldr	r1, [r2, #8]
    98fa:	6099      	str	r1, [r3, #8]
    tflEvalTensors[i].dims = tensorData[i].dims;
    98fc:	6069      	str	r1, [r5, #4]
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
    98fe:	6851      	ldr	r1, [r2, #4]
    tflTensors[i].bytes = tensorData[i].bytes;
    9900:	f8d2 800c 	ldr.w	r8, [r2, #12]
    tflTensors[i].is_variable = 0;
    9904:	f883 e02d 	strb.w	lr, [r3, #45]	; 0x2d
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
    9908:	f1b9 0f02 	cmp.w	r9, #2
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
    990c:	bf08      	it	eq
    990e:	1909      	addeq	r1, r1, r4
       tflTensors[i].data.data = tensorData[i].data;
    9910:	6059      	str	r1, [r3, #4]
       tflEvalTensors[i].data.data = tensorData[i].data;
    9912:	6029      	str	r1, [r5, #0]
    tflTensors[i].quantization = tensorData[i].quantization;
    9914:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
    9918:	f103 0a30 	add.w	sl, r3, #48	; 0x30
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    991c:	f883 9014 	strb.w	r9, [r3, #20]
    tflTensors[i].bytes = tensorData[i].bytes;
    9920:	f8c3 8018 	str.w	r8, [r3, #24]
    tflTensors[i].quantization = tensorData[i].quantization;
    9924:	e88a 0003 	stmia.w	sl, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
    9928:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    992c:	2901      	cmp	r1, #1
    992e:	d106      	bne.n	993e <_Z18trained_model_initPFPvjjE+0xae>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    9930:	6951      	ldr	r1, [r2, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
    9932:	6808      	ldr	r0, [r1, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    9934:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
    9936:	6840      	ldr	r0, [r0, #4]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    9938:	6849      	ldr	r1, [r1, #4]
      tflTensors[i].params.scale = quant->scale->data[0];
    993a:	60d8      	str	r0, [r3, #12]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    993c:	6119      	str	r1, [r3, #16]
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
    993e:	f1b9 0f02 	cmp.w	r9, #2
    9942:	d107      	bne.n	9954 <_Z18trained_model_initPFPvjjE+0xc4>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
    9944:	6859      	ldr	r1, [r3, #4]
      if (data_end_ptr > tensor_boundary) {
    9946:	f8dc 0000 	ldr.w	r0, [ip]
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
    994a:	4441      	add	r1, r8
      if (data_end_ptr > tensor_boundary) {
    994c:	4281      	cmp	r1, r0
        tensor_boundary = data_end_ptr;
    994e:	bf88      	it	hi
    9950:	f8cc 1000 	strhi.w	r1, [ip]
  for(size_t i = 0; i < 23; ++i) {
    9954:	3f01      	subs	r7, #1
    9956:	f102 0218 	add.w	r2, r2, #24
    995a:	f103 0340 	add.w	r3, r3, #64	; 0x40
    995e:	f105 050c 	add.w	r5, r5, #12
    9962:	d1c4      	bne.n	98ee <_Z18trained_model_initPFPvjjE+0x5e>
  if (tensor_boundary > current_location /* end of arena size */) {
    9964:	f8dc 3000 	ldr.w	r3, [ip]
    9968:	429e      	cmp	r6, r3
    996a:	d201      	bcs.n	9970 <_Z18trained_model_initPFPvjjE+0xe0>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    996c:	4849      	ldr	r0, [pc, #292]	; (9a94 <_Z18trained_model_initPFPvjjE+0x204>)
    996e:	e79c      	b.n	98aa <_Z18trained_model_initPFPvjjE+0x1a>
  registrations[OP_RESHAPE] = Register_RESHAPE();
    9970:	4668      	mov	r0, sp
    9972:	466c      	mov	r4, sp
    9974:	f7fe fb0c 	bl	7f90 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    9978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    997a:	4d47      	ldr	r5, [pc, #284]	; (9a98 <_Z18trained_model_initPFPvjjE+0x208>)
    997c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 9aa0 <_Z18trained_model_initPFPvjjE+0x210>
    9980:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9aa4 <_Z18trained_model_initPFPvjjE+0x214>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    9984:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 9a70 <_Z18trained_model_initPFPvjjE+0x1e0>
  registrations[OP_RESHAPE] = Register_RESHAPE();
    9988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    998a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    998e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
    9992:	4668      	mov	r0, sp
    9994:	f7fd f944 	bl	6c20 <_ZN6tflite16Register_CONV_2DEv>
    9998:	46ec      	mov	ip, sp
    999a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    999e:	f105 0610 	add.w	r6, r5, #16
    99a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    99a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    99a8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
    99ac:	4668      	mov	r0, sp
    99ae:	f7fd ffd5 	bl	795c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
    99b2:	46ec      	mov	ip, sp
    99b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    99b8:	f105 0630 	add.w	r6, r5, #48	; 0x30
    99bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    99be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    99c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
    99c6:	4668      	mov	r0, sp
    99c8:	f7fd fe5a 	bl	7680 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    99cc:	46ec      	mov	ip, sp
    99ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    99d2:	f105 0650 	add.w	r6, r5, #80	; 0x50
    99d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    99d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    99dc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
    99e0:	4668      	mov	r0, sp
    99e2:	466e      	mov	r6, sp
    99e4:	f7fe fb58 	bl	8098 <_ZN6tflite16Register_SOFTMAXEv>
    99e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    99ea:	f105 0c70 	add.w	ip, r5, #112	; 0x70
    99ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    99f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    99f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    99fa:	4644      	mov	r4, r8
    99fc:	46ca      	mov	sl, r9
    99fe:	260b      	movs	r6, #11
    9a00:	3d10      	subs	r5, #16
    tflNodes[i].inputs = nodeData[i].inputs;
    9a02:	f8da 3000 	ldr.w	r3, [sl]
    9a06:	6023      	str	r3, [r4, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
    9a08:	f8da 3004 	ldr.w	r3, [sl, #4]
    9a0c:	6063      	str	r3, [r4, #4]
if (registrations[nodeData[i].used_op_index].init) {
    9a0e:	f89a 300c 	ldrb.w	r3, [sl, #12]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    9a12:	f8da 1008 	ldr.w	r1, [sl, #8]
      tflNodes[i].custom_initial_data_size = 0;
    9a16:	61e7      	str	r7, [r4, #28]
if (registrations[nodeData[i].used_op_index].init) {
    9a18:	015b      	lsls	r3, r3, #5
tflNodes[i].custom_initial_data = nullptr;
    9a1a:	e9c4 1705 	strd	r1, r7, [r4, #20]
if (registrations[nodeData[i].used_op_index].init) {
    9a1e:	58eb      	ldr	r3, [r5, r3]
    9a20:	b11b      	cbz	r3, 9a2a <_Z18trained_model_initPFPvjjE+0x19a>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    9a22:	2200      	movs	r2, #0
    9a24:	4658      	mov	r0, fp
    9a26:	4798      	blx	r3
    9a28:	6120      	str	r0, [r4, #16]
  for(size_t i = 0; i < 11; ++i) {
    9a2a:	3e01      	subs	r6, #1
    9a2c:	f10a 0a10 	add.w	sl, sl, #16
    9a30:	f104 0424 	add.w	r4, r4, #36	; 0x24
    9a34:	d1e5      	bne.n	9a02 <_Z18trained_model_initPFPvjjE+0x172>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
    9a36:	4c0e      	ldr	r4, [pc, #56]	; (9a70 <_Z18trained_model_initPFPvjjE+0x1e0>)
    if (registrations[nodeData[i].used_op_index].prepare) {
    9a38:	f899 300c 	ldrb.w	r3, [r9, #12]
    9a3c:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9a40:	689b      	ldr	r3, [r3, #8]
    9a42:	b943      	cbnz	r3, 9a56 <_Z18trained_model_initPFPvjjE+0x1c6>
  for(size_t i = 0; i < 11; ++i) {
    9a44:	3601      	adds	r6, #1
    9a46:	2e0b      	cmp	r6, #11
    9a48:	f109 0910 	add.w	r9, r9, #16
    9a4c:	f108 0824 	add.w	r8, r8, #36	; 0x24
    9a50:	d1f2      	bne.n	9a38 <_Z18trained_model_initPFPvjjE+0x1a8>
  return kTfLiteOk;
    9a52:	2000      	movs	r0, #0
    9a54:	e72c      	b.n	98b0 <_Z18trained_model_initPFPvjjE+0x20>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
    9a56:	4641      	mov	r1, r8
    9a58:	4620      	mov	r0, r4
    9a5a:	4798      	blx	r3
      if (status != kTfLiteOk) {
    9a5c:	2800      	cmp	r0, #0
    9a5e:	d0f1      	beq.n	9a44 <_Z18trained_model_initPFPvjjE+0x1b4>
    9a60:	e726      	b.n	98b0 <_Z18trained_model_initPFPvjjE+0x20>
    9a62:	bf00      	nop
    9a64:	20000de0 	.word	0x20000de0
    9a68:	000457de 	.word	0x000457de
    9a6c:	2000118c 	.word	0x2000118c
    9a70:	20000f98 	.word	0x20000f98
    9a74:	20000e84 	.word	0x20000e84
    9a78:	00009bf1 	.word	0x00009bf1
    9a7c:	00009c61 	.word	0x00009c61
    9a80:	00009859 	.word	0x00009859
    9a84:	00009875 	.word	0x00009875
    9a88:	00009881 	.word	0x00009881
    9a8c:	20000820 	.word	0x20000820
    9a90:	20000000 	.word	0x20000000
    9a94:	00045804 	.word	0x00045804
    9a98:	20000de4 	.word	0x20000de4
    9a9c:	20001188 	.word	0x20001188
    9aa0:	0002f68c 	.word	0x0002f68c
    9aa4:	20000ff0 	.word	0x20000ff0

00009aa8 <_Z19trained_model_inputi>:
static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}
    9aa8:	4b01      	ldr	r3, [pc, #4]	; (9ab0 <_Z19trained_model_inputi+0x8>)
    9aaa:	6898      	ldr	r0, [r3, #8]
    9aac:	4770      	bx	lr
    9aae:	bf00      	nop
    9ab0:	20000f98 	.word	0x20000f98

00009ab4 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
    9ab4:	4b02      	ldr	r3, [pc, #8]	; (9ac0 <_Z20trained_model_outputi+0xc>)
    9ab6:	6898      	ldr	r0, [r3, #8]
}
    9ab8:	f500 60b0 	add.w	r0, r0, #1408	; 0x580
    9abc:	4770      	bx	lr
    9abe:	bf00      	nop
    9ac0:	20000f98 	.word	0x20000f98

00009ac4 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
    9ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ac8:	4e0b      	ldr	r6, [pc, #44]	; (9af8 <_Z20trained_model_invokev+0x34>)
    9aca:	4d0c      	ldr	r5, [pc, #48]	; (9afc <_Z20trained_model_invokev+0x38>)
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    9acc:	4f0c      	ldr	r7, [pc, #48]	; (9b00 <_Z20trained_model_invokev+0x3c>)
    9ace:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9b04 <_Z20trained_model_invokev+0x40>
  for(size_t i = 0; i < 11; ++i) {
    9ad2:	2400      	movs	r4, #0
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    9ad4:	7b33      	ldrb	r3, [r6, #12]
    9ad6:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    9ada:	4629      	mov	r1, r5
    9adc:	68db      	ldr	r3, [r3, #12]
    9ade:	4640      	mov	r0, r8
    9ae0:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
    9ae2:	b930      	cbnz	r0, 9af2 <_Z20trained_model_invokev+0x2e>
  for(size_t i = 0; i < 11; ++i) {
    9ae4:	3401      	adds	r4, #1
    9ae6:	2c0b      	cmp	r4, #11
    9ae8:	f106 0610 	add.w	r6, r6, #16
    9aec:	f105 0524 	add.w	r5, r5, #36	; 0x24
    9af0:	d1f0      	bne.n	9ad4 <_Z20trained_model_invokev+0x10>
      return status;
    }
  }
  return kTfLiteOk;
}
    9af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9af6:	bf00      	nop
    9af8:	0002f68c 	.word	0x0002f68c
    9afc:	20000ff0 	.word	0x20000ff0
    9b00:	20000de4 	.word	0x20000de4
    9b04:	20000f98 	.word	0x20000f98

00009b08 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
    9b08:	4a0e      	ldr	r2, [pc, #56]	; (9b44 <_Z19trained_model_resetPFvPvE+0x3c>)
TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
    9b0a:	b538      	push	{r3, r4, r5, lr}
    9b0c:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
    9b0e:	6810      	ldr	r0, [r2, #0]
    9b10:	4d0d      	ldr	r5, [pc, #52]	; (9b48 <_Z19trained_model_resetPFvPvE+0x40>)
    9b12:	4798      	blx	r3
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
      { _M_erase_at_end(this->_M_impl._M_start); }
    9b14:	4b0d      	ldr	r3, [pc, #52]	; (9b4c <_Z19trained_model_resetPFvPvE+0x44>)
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
    9b16:	e9d3 2100 	ldrd	r2, r1, [r3]
    9b1a:	428a      	cmp	r2, r1
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
    9b1c:	bf18      	it	ne
    9b1e:	605a      	strne	r2, [r3, #4]
TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
    9b20:	2400      	movs	r4, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9b22:	e9d5 3200 	ldrd	r3, r2, [r5]
    9b26:	1ad1      	subs	r1, r2, r3
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    9b28:	ebb4 0fa1 	cmp.w	r4, r1, asr #2
    9b2c:	d205      	bcs.n	9b3a <_Z19trained_model_resetPFvPvE+0x32>
    free(overflow_buffers[ix]);
    9b2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    9b32:	f005 fd15 	bl	f560 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    9b36:	3401      	adds	r4, #1
    9b38:	e7f3      	b.n	9b22 <_Z19trained_model_resetPFvPvE+0x1a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
    9b3a:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
    9b3c:	bf18      	it	ne
    9b3e:	606b      	strne	r3, [r5, #4]
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
    9b40:	2000      	movs	r0, #0
    9b42:	bd38      	pop	{r3, r4, r5, pc}
    9b44:	20000de0 	.word	0x20000de0
    9b48:	20001190 	.word	0x20001190
    9b4c:	2000117c 	.word	0x2000117c

00009b50 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    9b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9b54:	e9d0 9800 	ldrd	r9, r8, [r0]
    9b58:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
    9b5a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9b5e:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
    9b62:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    9b66:	4607      	mov	r7, r0
    9b68:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9b6a:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
    9b6e:	d102      	bne.n	9b76 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
    9b70:	481e      	ldr	r0, [pc, #120]	; (9bec <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
    9b72:	f00b fe44 	bl	157fe <_ZSt20__throw_length_errorPKc>
    9b76:	2c01      	cmp	r4, #1
    9b78:	4622      	mov	r2, r4
    9b7a:	bf38      	it	cc
    9b7c:	2201      	movcc	r2, #1
    9b7e:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    9b80:	eba1 0509 	sub.w	r5, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    9b84:	d22d      	bcs.n	9be2 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x92>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    9b86:	b374      	cbz	r4, 9be6 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
    9b88:	429c      	cmp	r4, r3
    9b8a:	bf28      	it	cs
    9b8c:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    9b8e:	00a0      	lsls	r0, r4, #2
    9b90:	f00b fe1f 	bl	157d2 <_Znwj>
    9b94:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    9b96:	42ee      	cmn	r6, r5
    9b98:	bf1c      	itt	ne
    9b9a:	f8db 3000 	ldrne.w	r3, [fp]
    9b9e:	5173      	strne	r3, [r6, r5]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
    9ba0:	2d00      	cmp	r5, #0
    9ba2:	dd04      	ble.n	9bae <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    9ba4:	462a      	mov	r2, r5
    9ba6:	4649      	mov	r1, r9
    9ba8:	4630      	mov	r0, r6
    9baa:	f00b feec 	bl	15986 <memmove>
      ptrdiff_t __count = __last - __first;
    9bae:	eba8 080a 	sub.w	r8, r8, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    9bb2:	3504      	adds	r5, #4
      if (__count > 0)
    9bb4:	f1b8 0f00 	cmp.w	r8, #0
    9bb8:	4435      	add	r5, r6
    9bba:	dd04      	ble.n	9bc6 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    9bbc:	4642      	mov	r2, r8
    9bbe:	4651      	mov	r1, sl
    9bc0:	4628      	mov	r0, r5
    9bc2:	f00b fed2 	bl	1596a <memcpy>
      return __result + __count;
    9bc6:	4445      	add	r5, r8
	if (__p)
    9bc8:	f1b9 0f00 	cmp.w	r9, #0
    9bcc:	d002      	beq.n	9bd4 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	::operator delete(__p
    9bce:	4648      	mov	r0, r9
    9bd0:	f00b fdfb 	bl	157ca <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    9bd4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
    9bd8:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    9bdc:	60bc      	str	r4, [r7, #8]
    }
    9bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    9be2:	461c      	mov	r4, r3
    9be4:	e7d3      	b.n	9b8e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    9be6:	4626      	mov	r6, r4
    9be8:	e7d5      	b.n	9b96 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
    9bea:	bf00      	nop
    9bec:	00045857 	.word	0x00045857

00009bf0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
                                       size_t bytes) {
    9bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (current_location - bytes < tensor_boundary) {
    9bf2:	4b17      	ldr	r3, [pc, #92]	; (9c50 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
    9bf4:	681c      	ldr	r4, [r3, #0]
                                       size_t bytes) {
    9bf6:	460a      	mov	r2, r1
  if (current_location - bytes < tensor_boundary) {
    9bf8:	1a64      	subs	r4, r4, r1
    9bfa:	4916      	ldr	r1, [pc, #88]	; (9c54 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
    9bfc:	6809      	ldr	r1, [r1, #0]
    9bfe:	428c      	cmp	r4, r1
    9c00:	d21f      	bcs.n	9c42 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x52>
    ptr = ei_calloc(bytes, 1);
    9c02:	4610      	mov	r0, r2
    9c04:	2101      	movs	r1, #1
    9c06:	9201      	str	r2, [sp, #4]
    9c08:	f007 fc32 	bl	11470 <_Z9ei_callocjj>
    if (ptr == NULL) {
    9c0c:	9a01      	ldr	r2, [sp, #4]
    ptr = ei_calloc(bytes, 1);
    9c0e:	9003      	str	r0, [sp, #12]
    9c10:	4604      	mov	r4, r0
    if (ptr == NULL) {
    9c12:	b930      	cbnz	r0, 9c22 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
    9c14:	4810      	ldr	r0, [pc, #64]	; (9c58 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
    9c16:	4611      	mov	r1, r2
    9c18:	f006 f9dc 	bl	ffd4 <iprintf>
}
    9c1c:	4620      	mov	r0, r4
    9c1e:	b004      	add	sp, #16
    9c20:	bd10      	pop	{r4, pc}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    9c22:	480e      	ldr	r0, [pc, #56]	; (9c5c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
    9c24:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
    9c28:	4299      	cmp	r1, r3
    9c2a:	d006      	beq.n	9c3a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    9c2c:	b101      	cbz	r1, 9c30 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x40>
    9c2e:	600c      	str	r4, [r1, #0]
	    ++this->_M_impl._M_finish;
    9c30:	6843      	ldr	r3, [r0, #4]
    9c32:	3304      	adds	r3, #4
    9c34:	6043      	str	r3, [r0, #4]
    return ptr;
    9c36:	9c03      	ldr	r4, [sp, #12]
    9c38:	e7f0      	b.n	9c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x2c>
	  _M_realloc_insert(end(), __x);
    9c3a:	aa03      	add	r2, sp, #12
    9c3c:	f7ff ff88 	bl	9b50 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
    9c40:	e7f9      	b.n	9c36 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x46>
  memset(ptr, 0, bytes);
    9c42:	2100      	movs	r1, #0
    9c44:	4620      	mov	r0, r4
  current_location -= bytes;
    9c46:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
    9c48:	f00b feb7 	bl	159ba <memset>
  return ptr;
    9c4c:	e7e6      	b.n	9c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x2c>
    9c4e:	bf00      	nop
    9c50:	2000118c 	.word	0x2000118c
    9c54:	20001188 	.word	0x20001188
    9c58:	00045871 	.word	0x00045871
    9c5c:	20001190 	.word	0x20001190

00009c60 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
    9c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c64:	4689      	mov	r9, r1
    9c66:	4617      	mov	r7, r2
  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
    9c68:	f7ff ffc2 	bl	9bf0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
  if (!b.ptr) {
    9c6c:	4683      	mov	fp, r0
    9c6e:	2800      	cmp	r0, #0
    9c70:	d04e      	beq.n	9d10 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    9c72:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 9d1c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xbc>
    9c76:	e9d8 4301 	ldrd	r4, r3, [r8, #4]
    9c7a:	429c      	cmp	r4, r3
    9c7c:	d00e      	beq.n	9c9c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3c>
    9c7e:	b10c      	cbz	r4, 9c84 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x24>
    9c80:	e9c4 9000 	strd	r9, r0, [r4]
	    ++this->_M_impl._M_finish;
    9c84:	3408      	adds	r4, #8
    9c86:	f8c8 4004 	str.w	r4, [r8, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9c8a:	e9d8 2300 	ldrd	r2, r3, [r8]
    9c8e:	1a9b      	subs	r3, r3, r2
    9c90:	10db      	asrs	r3, r3, #3
  *buffer_idx = scratch_buffers.size() - 1;
    9c92:	3b01      	subs	r3, #1
    9c94:	603b      	str	r3, [r7, #0]
  return kTfLiteOk;
    9c96:	2000      	movs	r0, #0
}
    9c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c9c:	f8d8 a000 	ldr.w	sl, [r8]
	if (max_size() - size() < __n)
    9ca0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9ca4:	eba4 040a 	sub.w	r4, r4, sl
	if (max_size() - size() < __n)
    9ca8:	ebb3 0fe4 	cmp.w	r3, r4, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    9cac:	ea4f 05e4 	mov.w	r5, r4, asr #3
	if (max_size() - size() < __n)
    9cb0:	d102      	bne.n	9cb8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x58>
	  __throw_length_error(__N(__s));
    9cb2:	4819      	ldr	r0, [pc, #100]	; (9d18 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb8>)
    9cb4:	f00b fda3 	bl	157fe <_ZSt20__throw_length_errorPKc>
    9cb8:	2d01      	cmp	r5, #1
    9cba:	462a      	mov	r2, r5
    9cbc:	bf38      	it	cc
    9cbe:	2201      	movcc	r2, #1
    9cc0:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    9cc2:	d227      	bcs.n	9d14 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xb4>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    9cc4:	b13d      	cbz	r5, 9cd6 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x76>
    9cc6:	429d      	cmp	r5, r3
    9cc8:	bf28      	it	cs
    9cca:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    9ccc:	00e8      	lsls	r0, r5, #3
    9cce:	f00b fd80 	bl	157d2 <_Znwj>
    9cd2:	4606      	mov	r6, r0
    9cd4:	e000      	b.n	9cd8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x78>
    9cd6:	462e      	mov	r6, r5
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    9cd8:	1933      	adds	r3, r6, r4
    9cda:	bf1c      	itt	ne
    9cdc:	f846 9004 	strne.w	r9, [r6, r4]
    9ce0:	f8c3 b004 	strne.w	fp, [r3, #4]
      if (__count > 0)
    9ce4:	2c00      	cmp	r4, #0
    9ce6:	dd04      	ble.n	9cf2 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x92>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    9ce8:	4622      	mov	r2, r4
    9cea:	4651      	mov	r1, sl
    9cec:	4630      	mov	r0, r6
    9cee:	f00b fe4a 	bl	15986 <memmove>
	      ++__new_finish;
    9cf2:	3408      	adds	r4, #8
    9cf4:	4434      	add	r4, r6
	if (__p)
    9cf6:	f1ba 0f00 	cmp.w	sl, #0
    9cfa:	d002      	beq.n	9d02 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0xa2>
	::operator delete(__p
    9cfc:	4650      	mov	r0, sl
    9cfe:	f00b fd64 	bl	157ca <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    9d02:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
      this->_M_impl._M_finish = __new_finish;
    9d06:	e9c8 6400 	strd	r6, r4, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    9d0a:	f8c8 5008 	str.w	r5, [r8, #8]
    9d0e:	e7bc      	b.n	9c8a <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2a>
    return kTfLiteError;
    9d10:	2001      	movs	r0, #1
    9d12:	e7c1      	b.n	9c98 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x38>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    9d14:	461d      	mov	r5, r3
    9d16:	e7d9      	b.n	9ccc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x6c>
    9d18:	00045857 	.word	0x00045857
    9d1c:	2000117c 	.word	0x2000117c

00009d20 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
    9d20:	4b19      	ldr	r3, [pc, #100]	; (9d88 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x68>)
	: _M_start(), _M_finish(), _M_end_of_storage()
    9d22:	481a      	ldr	r0, [pc, #104]	; (9d8c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x6c>)
    9d24:	681a      	ldr	r2, [r3, #0]
};const NodeInfo_t nodeData[] = {
    9d26:	4b1a      	ldr	r3, [pc, #104]	; (9d90 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x70>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
    9d28:	f502 6144 	add.w	r1, r2, #3136	; 0xc40
}
    9d2c:	b510      	push	{r4, lr}
};const NodeInfo_t nodeData[] = {
    9d2e:	6059      	str	r1, [r3, #4]
    9d30:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
    9d34:	f502 7144 	add.w	r1, r2, #784	; 0x310
    9d38:	2400      	movs	r4, #0
};const NodeInfo_t nodeData[] = {
    9d3a:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
    9d3e:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    9d42:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
    9d46:	f502 71c8 	add.w	r1, r2, #400	; 0x190
    9d4a:	e9c0 4400 	strd	r4, r4, [r0]
};const NodeInfo_t nodeData[] = {
    9d4e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    9d52:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    9d56:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    9d5a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    9d5e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    9d62:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
    9d66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
static std::vector<void*> overflow_buffers;
    9d6a:	490a      	ldr	r1, [pc, #40]	; (9d94 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x74>)
    9d6c:	4a0a      	ldr	r2, [pc, #40]	; (9d98 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x78>)
    9d6e:	6084      	str	r4, [r0, #8]
    9d70:	f00a ff64 	bl	14c3c <__aeabi_atexit>
    9d74:	4809      	ldr	r0, [pc, #36]	; (9d9c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x7c>)
static std::vector<scratch_buffer_t> scratch_buffers;
    9d76:	4a08      	ldr	r2, [pc, #32]	; (9d98 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x78>)
    9d78:	6084      	str	r4, [r0, #8]
    9d7a:	e9c0 4400 	strd	r4, r4, [r0]
    9d7e:	4908      	ldr	r1, [pc, #32]	; (9da0 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x80>)
}
    9d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static std::vector<scratch_buffer_t> scratch_buffers;
    9d84:	f00a bf5a 	b.w	14c3c <__aeabi_atexit>
    9d88:	20000de0 	.word	0x20000de0
    9d8c:	20001190 	.word	0x20001190
    9d90:	20000000 	.word	0x20000000
    9d94:	000145d7 	.word	0x000145d7
    9d98:	200011a0 	.word	0x200011a0
    9d9c:	2000117c 	.word	0x2000117c
    9da0:	000145e7 	.word	0x000145e7

00009da4 <_ZN2ei5numpy19dequantize_zero_oneEh>:
        return quantized_values_one_zero[value];
    9da4:	4b02      	ldr	r3, [pc, #8]	; (9db0 <_ZN2ei5numpy19dequantize_zero_oneEh+0xc>)
    9da6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
    9daa:	ed90 0a00 	vldr	s0, [r0]
    9dae:	4770      	bx	lr
    9db0:	0003f158 	.word	0x0003f158

00009db4 <_Z20raw_feature_get_datajjPf>:



};

int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    9db4:	b508      	push	{r3, lr}
    9db6:	4613      	mov	r3, r2
    memcpy(out_ptr, features + offset, length * sizeof(float));
    9db8:	008a      	lsls	r2, r1, #2
    9dba:	4904      	ldr	r1, [pc, #16]	; (9dcc <_Z20raw_feature_get_datajjPf+0x18>)
    9dbc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9dc0:	4618      	mov	r0, r3
    9dc2:	f00b fdd2 	bl	1596a <memcpy>
    return 0;
}
    9dc6:	2000      	movs	r0, #0
    9dc8:	bd08      	pop	{r3, pc}
    9dca:	bf00      	nop
    9dcc:	0002f798 	.word	0x0002f798

00009dd0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
    static float ceil_unless_very_close_to_floor(float v) {
    9dd0:	b508      	push	{r3, lr}
    9dd2:	ed2d 8b02 	vpush	{d8}
    9dd6:	eeb0 8a40 	vmov.f32	s16, s0
  { return __builtin_floorf(__x); }
    9dda:	f004 ff9d 	bl	ed18 <floorf>
        if (v > floor(v) && v - floor(v) < 0.001f) {
    9dde:	eeb4 8ac0 	vcmpe.f32	s16, s0
    9de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9de6:	dd08      	ble.n	9dfa <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x2a>
    9de8:	ee78 7a40 	vsub.f32	s15, s16, s0
    9dec:	ed9f 7a08 	vldr	s14, [pc, #32]	; 9e10 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x40>
    9df0:	eef4 7ac7 	vcmpe.f32	s15, s14
    9df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9df8:	d407      	bmi.n	9e0a <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x3a>
  { return __builtin_ceilf(__x); }
    9dfa:	eeb0 0a48 	vmov.f32	s0, s16
    }
    9dfe:	ecbd 8b02 	vpop	{d8}
    9e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9e06:	f004 bf45 	b.w	ec94 <ceilf>
    9e0a:	ecbd 8b02 	vpop	{d8}
    9e0e:	bd08      	pop	{r3, pc}
    9e10:	3a83126f 	.word	0x3a83126f

00009e14 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
    9e14:	b508      	push	{r3, lr}
	assert(ptr);
    9e16:	b928      	cbnz	r0, 9e24 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
    9e18:	4b06      	ldr	r3, [pc, #24]	; (9e34 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
    9e1a:	4a07      	ldr	r2, [pc, #28]	; (9e38 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
    9e1c:	4807      	ldr	r0, [pc, #28]	; (9e3c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
    9e1e:	215f      	movs	r1, #95	; 0x5f
    9e20:	f005 fb5e 	bl	f4e0 <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
    9e24:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
    9e28:	1ac0      	subs	r0, r0, r3
}
    9e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
    9e2e:	f007 bb21 	b.w	11474 <_Z7ei_freePv>
    9e32:	bf00      	nop
    9e34:	00045684 	.word	0x00045684
    9e38:	000458ab 	.word	0x000458ab
    9e3c:	000458d4 	.word	0x000458d4

00009e40 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
    9e40:	1e43      	subs	r3, r0, #1
    9e42:	4203      	tst	r3, r0
{
    9e44:	b510      	push	{r4, lr}
    9e46:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
    9e48:	d005      	beq.n	9e56 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
    9e4a:	4b0d      	ldr	r3, [pc, #52]	; (9e80 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
    9e4c:	4a0d      	ldr	r2, [pc, #52]	; (9e84 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
    9e4e:	480e      	ldr	r0, [pc, #56]	; (9e88 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
    9e50:	213c      	movs	r1, #60	; 0x3c
    9e52:	f005 fb45 	bl	f4e0 <__assert_func>
	if(align && size)
    9e56:	b910      	cbnz	r0, 9e5e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
    9e58:	2400      	movs	r4, #0
}
    9e5a:	4620      	mov	r0, r4
    9e5c:	bd10      	pop	{r4, pc}
	if(align && size)
    9e5e:	2900      	cmp	r1, #0
    9e60:	d0fa      	beq.n	9e58 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
    9e62:	1c48      	adds	r0, r1, #1
    9e64:	4420      	add	r0, r4
    9e66:	2101      	movs	r1, #1
    9e68:	f007 fb02 	bl	11470 <_Z9ei_callocjj>
		if(p)
    9e6c:	2800      	cmp	r0, #0
    9e6e:	d0f3      	beq.n	9e58 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
    9e70:	1c63      	adds	r3, r4, #1
    9e72:	4403      	add	r3, r0
    9e74:	4264      	negs	r4, r4
    9e76:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
    9e78:	1a20      	subs	r0, r4, r0
    9e7a:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
    9e7e:	e7ec      	b.n	9e5a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
    9e80:	00045909 	.word	0x00045909
    9e84:	00045924 	.word	0x00045924
    9e88:	000458d4 	.word	0x000458d4

00009e8c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
    static int scale(matrix_t *matrix, float scale) {
    9e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
    9e8e:	6842      	ldr	r2, [r0, #4]
    9e90:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    9e94:	d217      	bcs.n	9ec6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
    9e96:	6883      	ldr	r3, [r0, #8]
    9e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9e9c:	d213      	bcs.n	9ec6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9e9e:	6801      	ldr	r1, [r0, #0]
    9ea0:	9101      	str	r1, [sp, #4]
    9ea2:	b292      	uxth	r2, r2
    9ea4:	b29b      	uxth	r3, r3
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9ea6:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
    9ea8:	4668      	mov	r0, sp
    9eaa:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9eac:	f8ad 2000 	strh.w	r2, [sp]
    9eb0:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
    9eb4:	f8ad 2008 	strh.w	r2, [sp, #8]
    9eb8:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
    9ebc:	f008 fd93 	bl	129e6 <arm_mat_scale_f32>
    }
    9ec0:	b005      	add	sp, #20
    9ec2:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
    9ec6:	4801      	ldr	r0, [pc, #4]	; (9ecc <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
    9ec8:	e7fa      	b.n	9ec0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
    9eca:	bf00      	nop
    9ecc:	fffffc0c 	.word	0xfffffc0c

00009ed0 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(uint64_t ctx_start_us,
    9ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ed4:	ed2d 8b04 	vpush	{d8-d9}
    9ed8:	4605      	mov	r5, r0
    9eda:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    9ede:	4688      	mov	r8, r1
    9ee0:	4617      	mov	r7, r2
    9ee2:	461c      	mov	r4, r3
    TfLiteTensor* scores_tensor,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
    if(trained_model_invoke() != kTfLiteOk) {
    9ee4:	f7ff fdee 	bl	9ac4 <_Z20trained_model_invokev>
    9ee8:	2800      	cmp	r0, #0
    9eea:	d173      	bne.n	9fd4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x104>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
    9eec:	f007 faac 	bl	11448 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
    9ef0:	1b40      	subs	r0, r0, r5
    9ef2:	eb61 0108 	sbc.w	r1, r1, r8
    9ef6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    result->timing.classification = (int)(result->timing.classification_us / 1000);
    9efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9efe:	2300      	movs	r3, #0
    9f00:	f7f6 fe1c 	bl	b3c <__aeabi_ldivmod>
    9f04:	4601      	mov	r1, r0
    9f06:	62a0      	str	r0, [r4, #40]	; 0x28

    // Read the predicted y value from the model's output tensor
    if (debug) {
    9f08:	b116      	cbz	r6, 9f10 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x40>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
    9f0a:	4834      	ldr	r0, [pc, #208]	; (9fdc <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x10c>)
    9f0c:	f7fb ff70 	bl	5df0 <_Z9ei_printfPKcz>
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
    if (int8_output) {
    9f10:	783b      	ldrb	r3, [r7, #0]
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
    9f12:	687d      	ldr	r5, [r7, #4]
    9f14:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 9fe4 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x114>
    if (int8_output) {
    9f18:	2b09      	cmp	r3, #9
    9f1a:	f104 0404 	add.w	r4, r4, #4
    9f1e:	d139      	bne.n	9f94 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xc4>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
    9f20:	edd7 7a04 	vldr	s15, [r7, #16]
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        float value = static_cast<float>(data[ix] - zero_point) * scale;

        if (debug) {
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9f24:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 9fe8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x118>
            ei_printf_float(value);
            ei_printf("\n");
    9f28:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 9fec <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x11c>
    9f2c:	ed97 9a03 	vldr	s18, [r7, #12]
    9f30:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9f34:	3d01      	subs	r5, #1
    9f36:	f1a8 070c 	sub.w	r7, r8, #12
        float value = static_cast<float>(data[ix] - zero_point) * scale;
    9f3a:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
    9f3e:	ee08 3a10 	vmov	s16, r3
    9f42:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    9f46:	ee38 8a68 	vsub.f32	s16, s16, s17
    9f4a:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
    9f4e:	b156      	cbz	r6, 9f66 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x96>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9f50:	4650      	mov	r0, sl
    9f52:	6839      	ldr	r1, [r7, #0]
    9f54:	f7fb ff4c 	bl	5df0 <_Z9ei_printfPKcz>
            ei_printf_float(value);
    9f58:	eeb0 0a48 	vmov.f32	s0, s16
    9f5c:	f7fb ff62 	bl	5e24 <_Z15ei_printf_floatf>
            ei_printf("\n");
    9f60:	4648      	mov	r0, r9
    9f62:	f7fb ff45 	bl	5df0 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
    9f66:	f857 3b04 	ldr.w	r3, [r7], #4
    9f6a:	f844 3c04 	str.w	r3, [r4, #-4]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9f6e:	4547      	cmp	r7, r8
        result->classification[ix].value = value;
    9f70:	4623      	mov	r3, r4
    9f72:	ed83 8a00 	vstr	s16, [r3]
    9f76:	f104 0408 	add.w	r4, r4, #8
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9f7a:	d1de      	bne.n	9f3a <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x6a>
    else {
        fill_result_struct_f32(result, output->data.f, debug);
    }
#endif

    trained_model_reset(ei_aligned_free);
    9f7c:	4818      	ldr	r0, [pc, #96]	; (9fe0 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x110>)
    9f7e:	f7ff fdc3 	bl	9b08 <_Z19trained_model_resetPFvPvE>

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    9f82:	f007 fa5f 	bl	11444 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
    9f86:	1c83      	adds	r3, r0, #2
    9f88:	bf18      	it	ne
    9f8a:	2000      	movne	r0, #0
}
    9f8c:	ecbd 8b04 	vpop	{d8-d9}
    9f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9f94:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9fe8 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x118>
            ei_printf_float(value);
            ei_printf("\n");
    9f98:	f8df a050 	ldr.w	sl, [pc, #80]	; 9fec <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0x11c>
    9f9c:	f1a8 070c 	sub.w	r7, r8, #12
        float value = data[ix];
    9fa0:	ecb5 8a01 	vldmia	r5!, {s16}
        if (debug) {
    9fa4:	b156      	cbz	r6, 9fbc <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xec>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
    9fa6:	4648      	mov	r0, r9
    9fa8:	6839      	ldr	r1, [r7, #0]
    9faa:	f7fb ff21 	bl	5df0 <_Z9ei_printfPKcz>
            ei_printf_float(value);
    9fae:	eeb0 0a48 	vmov.f32	s0, s16
    9fb2:	f7fb ff37 	bl	5e24 <_Z15ei_printf_floatf>
            ei_printf("\n");
    9fb6:	4650      	mov	r0, sl
    9fb8:	f7fb ff1a 	bl	5df0 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
    9fbc:	f857 3b04 	ldr.w	r3, [r7], #4
    9fc0:	f844 3c04 	str.w	r3, [r4, #-4]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9fc4:	4547      	cmp	r7, r8
        result->classification[ix].value = value;
    9fc6:	4623      	mov	r3, r4
    9fc8:	ed83 8a00 	vstr	s16, [r3]
    9fcc:	f104 0408 	add.w	r4, r4, #8
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    9fd0:	d1e6      	bne.n	9fa0 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xd0>
    9fd2:	e7d3      	b.n	9f7c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xac>
        return EI_IMPULSE_TFLITE_ERROR;
    9fd4:	f06f 0002 	mvn.w	r0, #2
    9fd8:	e7d8      	b.n	9f8c <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0+0xbc>
    9fda:	bf00      	nop
    9fdc:	00045959 	.word	0x00045959
    9fe0:	00009e15 	.word	0x00009e15
    9fe4:	20000234 	.word	0x20000234
    9fe8:	00045976 	.word	0x00045976
    9fec:	00045dd9 	.word	0x00045dd9

00009ff0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0>:
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    9ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ff2:	4607      	mov	r7, r0
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
    9ff4:	482d      	ldr	r0, [pc, #180]	; (a0ac <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xbc>)
static EI_IMPULSE_ERROR inference_tflite_setup(uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    9ff6:	460d      	mov	r5, r1
    9ff8:	4616      	mov	r6, r2
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
    9ffa:	f7ff fc49 	bl	9890 <_Z18trained_model_initPFPvjjE>
    if (init_status != kTfLiteOk) {
    9ffe:	4604      	mov	r4, r0
    a000:	b130      	cbz	r0, a010 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x20>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
    a002:	4601      	mov	r1, r0
    a004:	482a      	ldr	r0, [pc, #168]	; (a0b0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc0>)
    a006:	f7fb fef3 	bl	5df0 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    a00a:	f06f 0005 	mvn.w	r0, #5
}
    a00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *ctx_start_us = ei_read_timer_us();
    a010:	f007 fa1a 	bl	11448 <_Z16ei_read_timer_usv>
    a014:	e9c7 0100 	strd	r0, r1, [r7]
    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    a018:	4620      	mov	r0, r4
    a01a:	f7ff fd45 	bl	9aa8 <_Z19trained_model_inputi>
    a01e:	6028      	str	r0, [r5, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    a020:	4620      	mov	r0, r4
    a022:	f7ff fd47 	bl	9ab4 <_Z20trained_model_outputi>
    if (tflite_first_run) {
    a026:	4a23      	ldr	r2, [pc, #140]	; (a0b4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc4>)
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
    a028:	6030      	str	r0, [r6, #0]
    if (tflite_first_run) {
    a02a:	7813      	ldrb	r3, [r2, #0]
    a02c:	2b00      	cmp	r3, #0
    a02e:	d03b      	beq.n	a0a8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xb8>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
    a030:	682b      	ldr	r3, [r5, #0]
    a032:	7819      	ldrb	r1, [r3, #0]
    a034:	2909      	cmp	r1, #9
    a036:	d005      	beq.n	a044 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x54>
    a038:	4b1f      	ldr	r3, [pc, #124]	; (a0b8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xc8>)
    a03a:	4a20      	ldr	r2, [pc, #128]	; (a0bc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    a03c:	2163      	movs	r1, #99	; 0x63
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
    a03e:	4820      	ldr	r0, [pc, #128]	; (a0c0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd0>)
    a040:	f005 fa4e 	bl	f4e0 <__assert_func>
    a044:	7801      	ldrb	r1, [r0, #0]
    a046:	2909      	cmp	r1, #9
    a048:	d003      	beq.n	a052 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    a04a:	4b1e      	ldr	r3, [pc, #120]	; (a0c4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd4>)
    a04c:	4a1b      	ldr	r2, [pc, #108]	; (a0bc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    a04e:	2164      	movs	r1, #100	; 0x64
    a050:	e7f5      	b.n	a03e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
    a052:	ed93 7a03 	vldr	s14, [r3, #12]
    a056:	eddf 7a1c 	vldr	s15, [pc, #112]	; a0c8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xd8>
    a05a:	eeb4 7a67 	vcmp.f32	s14, s15
    a05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a062:	d003      	beq.n	a06c <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x7c>
    a064:	4b19      	ldr	r3, [pc, #100]	; (a0cc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xdc>)
    a066:	4a15      	ldr	r2, [pc, #84]	; (a0bc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    a068:	216b      	movs	r1, #107	; 0x6b
    a06a:	e7e8      	b.n	a03e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
    a06c:	691b      	ldr	r3, [r3, #16]
    a06e:	3380      	adds	r3, #128	; 0x80
    a070:	d003      	beq.n	a07a <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x8a>
    a072:	4b17      	ldr	r3, [pc, #92]	; (a0d0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe0>)
    a074:	4a11      	ldr	r2, [pc, #68]	; (a0bc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    a076:	216c      	movs	r1, #108	; 0x6c
    a078:	e7e1      	b.n	a03e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
    a07a:	ed90 7a03 	vldr	s14, [r0, #12]
    a07e:	eddf 7a15 	vldr	s15, [pc, #84]	; a0d4 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe4>
    a082:	eeb4 7a67 	vcmp.f32	s14, s15
    a086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a08a:	d003      	beq.n	a094 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xa4>
    a08c:	4b12      	ldr	r3, [pc, #72]	; (a0d8 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xe8>)
    a08e:	4a0b      	ldr	r2, [pc, #44]	; (a0bc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    a090:	216f      	movs	r1, #111	; 0x6f
    a092:	e7d4      	b.n	a03e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
    a094:	6903      	ldr	r3, [r0, #16]
    a096:	3380      	adds	r3, #128	; 0x80
    a098:	d003      	beq.n	a0a2 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xb2>
    a09a:	4b10      	ldr	r3, [pc, #64]	; (a0dc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xec>)
    a09c:	4a07      	ldr	r2, [pc, #28]	; (a0bc <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0xcc>)
    a09e:	2170      	movs	r1, #112	; 0x70
    a0a0:	e7cd      	b.n	a03e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4e>
        tflite_first_run = false;
    a0a2:	7014      	strb	r4, [r2, #0]
    return EI_IMPULSE_OK;
    a0a4:	4620      	mov	r0, r4
    a0a6:	e7b2      	b.n	a00e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x1e>
    a0a8:	4618      	mov	r0, r3
    a0aa:	e7b0      	b.n	a00e <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0+0x1e>
    a0ac:	00009e41 	.word	0x00009e41
    a0b0:	0004597b 	.word	0x0004597b
    a0b4:	200005b4 	.word	0x200005b4
    a0b8:	000459ac 	.word	0x000459ac
    a0bc:	000459e2 	.word	0x000459e2
    a0c0:	00045a47 	.word	0x00045a47
    a0c4:	00045a89 	.word	0x00045a89
    a0c8:	3b6eeeef 	.word	0x3b6eeeef
    a0cc:	00045ac1 	.word	0x00045ac1
    a0d0:	00045afc 	.word	0x00045afc
    a0d4:	3b800000 	.word	0x3b800000
    a0d8:	00045b40 	.word	0x00045b40
    a0dc:	00045b7d 	.word	0x00045b7d

0000a0e0 <_ZN2ei5numpy4rollEPfji>:
    static int roll(float *input_array, size_t input_array_size, int shift) {
    a0e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        if (shift < 0) {
    a0e2:	1e14      	subs	r4, r2, #0
            shift = input_array_size + shift;
    a0e4:	bfb8      	it	lt
    a0e6:	1864      	addlt	r4, r4, r1
    static int roll(float *input_array, size_t input_array_size, int shift) {
    a0e8:	4606      	mov	r6, r0
    a0ea:	460d      	mov	r5, r1
        if (shift == 0) {
    a0ec:	b1ec      	cbz	r4, a12a <_ZN2ei5numpy4rollEPfji+0x4a>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    a0ee:	2300      	movs	r3, #0
    a0f0:	4622      	mov	r2, r4
    a0f2:	2101      	movs	r1, #1
    a0f4:	4668      	mov	r0, sp
    a0f6:	f00a fb07 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    a0fa:	9800      	ldr	r0, [sp, #0]
    a0fc:	b1c0      	cbz	r0, a130 <_ZN2ei5numpy4rollEPfji+0x50>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
    a0fe:	1b29      	subs	r1, r5, r4
    a100:	00a4      	lsls	r4, r4, #2
    a102:	4622      	mov	r2, r4
    a104:	008d      	lsls	r5, r1, #2
    a106:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    a10a:	f00b fc2e 	bl	1596a <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
    a10e:	462a      	mov	r2, r5
    a110:	4631      	mov	r1, r6
    a112:	1930      	adds	r0, r6, r4
    a114:	f00b fc37 	bl	15986 <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
    a118:	4622      	mov	r2, r4
    a11a:	9900      	ldr	r1, [sp, #0]
    a11c:	4630      	mov	r0, r6
    a11e:	f00b fc24 	bl	1596a <memcpy>
        return EIDSP_OK;
    a122:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    a124:	4668      	mov	r0, sp
    a126:	f007 f955 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    }
    a12a:	4620      	mov	r0, r4
    a12c:	b004      	add	sp, #16
    a12e:	bd70      	pop	{r4, r5, r6, pc}
        EI_DSP_MATRIX(shift_matrix, 1, shift);
    a130:	4c00      	ldr	r4, [pc, #0]	; (a134 <_ZN2ei5numpy4rollEPfji+0x54>)
    a132:	e7f7      	b.n	a124 <_ZN2ei5numpy4rollEPfji+0x44>
    a134:	fffffc16 	.word	0xfffffc16

0000a138 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
    a138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a13c:	4617      	mov	r7, r2
    a13e:	4698      	mov	r8, r3
        if (output->cols != input->cols) {
    a140:	688a      	ldr	r2, [r1, #8]
    a142:	6883      	ldr	r3, [r0, #8]
    a144:	429a      	cmp	r2, r3
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
    a146:	4604      	mov	r4, r0
    a148:	460e      	mov	r6, r1
        if (output->cols != input->cols) {
    a14a:	d16e      	bne.n	a22a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf2>
        if (output->rows != input->rows + pad_before + pad_after) {
    a14c:	6842      	ldr	r2, [r0, #4]
    a14e:	6849      	ldr	r1, [r1, #4]
    a150:	eb08 0307 	add.w	r3, r8, r7
    a154:	4413      	add	r3, r2
    a156:	4299      	cmp	r1, r3
    a158:	d167      	bne.n	a22a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf2>
        if (input->rows == 0) {
    a15a:	2a00      	cmp	r2, #0
    a15c:	d068      	beq.n	a230 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf8>
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    a15e:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
        bool pad_before_direction_up = true;
    a162:	f04f 0a01 	mov.w	sl, #1
        uint32_t pad_before_index = 0;
    a166:	f04f 0900 	mov.w	r9, #0
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    a16a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
            memcpy(output->buffer + (input->cols * ix),
    a16e:	6830      	ldr	r0, [r6, #0]
    a170:	68a5      	ldr	r5, [r4, #8]
                input->buffer + (pad_before_index * input->cols),
    a172:	6821      	ldr	r1, [r4, #0]
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    a174:	d023      	beq.n	a1be <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x86>
            memcpy(output->buffer + (input->cols * ix),
    a176:	00aa      	lsls	r2, r5, #2
    a178:	fb02 1109 	mla	r1, r2, r9, r1
    a17c:	fb02 000b 	mla	r0, r2, fp, r0
    a180:	f00b fbf3 	bl	1596a <memcpy>
            if (pad_before_index == 0 && !pad_before_direction_up) {
    a184:	f1b9 0f00 	cmp.w	r9, #0
    a188:	d102      	bne.n	a190 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x58>
    a18a:	f1ba 0f00 	cmp.w	sl, #0
    a18e:	d013      	beq.n	a1b8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x80>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
    a190:	6863      	ldr	r3, [r4, #4]
    a192:	3b01      	subs	r3, #1
    a194:	454b      	cmp	r3, r9
    a196:	d107      	bne.n	a1a8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
    a198:	f1ba 0f00 	cmp.w	sl, #0
    a19c:	d101      	bne.n	a1a2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x6a>
                pad_before_index--;
    a19e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
                pad_before_direction_up = false;
    a1a2:	f04f 0a00 	mov.w	sl, #0
    a1a6:	e004      	b.n	a1b2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7a>
            else if (pad_before_direction_up) {
    a1a8:	f1ba 0f00 	cmp.w	sl, #0
    a1ac:	d0f7      	beq.n	a19e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x66>
                pad_before_index++;
    a1ae:	f109 0901 	add.w	r9, r9, #1
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
    a1b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    a1b6:	e7d8      	b.n	a16a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x32>
                pad_before_direction_up = true;
    a1b8:	f04f 0a01 	mov.w	sl, #1
    a1bc:	e7f9      	b.n	a1b2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7a>
        memcpy(output->buffer + (input->cols * pad_before),
    a1be:	6862      	ldr	r2, [r4, #4]
    a1c0:	436a      	muls	r2, r5
    a1c2:	437d      	muls	r5, r7
    a1c4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    a1c8:	0092      	lsls	r2, r2, #2
    a1ca:	f00b fbce 	bl	1596a <memcpy>
        int32_t pad_after_index = input->rows - 1;
    a1ce:	6865      	ldr	r5, [r4, #4]
        for (int32_t ix = 0; ix < pad_after; ix++) {
    a1d0:	f04f 0a00 	mov.w	sl, #0
        int32_t pad_after_index = input->rows - 1;
    a1d4:	3d01      	subs	r5, #1
        bool pad_after_direction_up = false;
    a1d6:	46d1      	mov	r9, sl
        for (int32_t ix = 0; ix < pad_after; ix++) {
    a1d8:	45d0      	cmp	r8, sl
    a1da:	dd2b      	ble.n	a234 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xfc>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
    a1dc:	6863      	ldr	r3, [r4, #4]
    a1de:	68a2      	ldr	r2, [r4, #8]
                input->buffer + (pad_after_index * input->cols),
    a1e0:	6821      	ldr	r1, [r4, #0]
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
    a1e2:	eb0a 0007 	add.w	r0, sl, r7
    a1e6:	4418      	add	r0, r3
    a1e8:	6833      	ldr	r3, [r6, #0]
    a1ea:	0092      	lsls	r2, r2, #2
    a1ec:	fb02 1105 	mla	r1, r2, r5, r1
    a1f0:	fb02 3000 	mla	r0, r2, r0, r3
    a1f4:	f00b fbb9 	bl	1596a <memcpy>
            if (pad_after_index == 0 && !pad_after_direction_up) {
    a1f8:	b915      	cbnz	r5, a200 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
    a1fa:	f1b9 0f00 	cmp.w	r9, #0
    a1fe:	d011      	beq.n	a224 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
    a200:	6863      	ldr	r3, [r4, #4]
    a202:	3b01      	subs	r3, #1
    a204:	42ab      	cmp	r3, r5
    a206:	d106      	bne.n	a216 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
    a208:	f1b9 0f00 	cmp.w	r9, #0
    a20c:	d100      	bne.n	a210 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd8>
                pad_after_index--;
    a20e:	3d01      	subs	r5, #1
                pad_after_direction_up = false;
    a210:	f04f 0900 	mov.w	r9, #0
    a214:	e003      	b.n	a21e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            else if (pad_after_direction_up) {
    a216:	f1b9 0f00 	cmp.w	r9, #0
    a21a:	d0f8      	beq.n	a20e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd6>
                pad_after_index++;
    a21c:	3501      	adds	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
    a21e:	f10a 0a01 	add.w	sl, sl, #1
    a222:	e7d9      	b.n	a1d8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xa0>
                pad_after_direction_up = true;
    a224:	f04f 0901 	mov.w	r9, #1
    a228:	e7f9      	b.n	a21e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    a22a:	4803      	ldr	r0, [pc, #12]	; (a238 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x100>)
    }
    a22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
    a230:	4802      	ldr	r0, [pc, #8]	; (a23c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>)
    a232:	e7fb      	b.n	a22c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
        return EIDSP_OK;
    a234:	2000      	movs	r0, #0
    a236:	e7f9      	b.n	a22c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
    a238:	fffffc14 	.word	0xfffffc14
    a23c:	fffffc12 	.word	0xfffffc12

0000a240 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>:
    {
    a240:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a244:	f8bd 6020 	ldrh.w	r6, [sp, #32]
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
    a248:	0875      	lsrs	r5, r6, #1
    a24a:	3501      	adds	r5, #1
    a24c:	429d      	cmp	r5, r3
    {
    a24e:	4614      	mov	r4, r2
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
    a250:	d12c      	bne.n	a2ac <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x6c>
        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
    a252:	9600      	str	r6, [sp, #0]
    a254:	f7f7 fcb4 	bl	1bc0 <_ZN2ei5numpy4rfftEPKfjPfjj>
        if (r != EIDSP_OK) {
    a258:	4680      	mov	r8, r0
    a25a:	bb18      	cbnz	r0, a2a4 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x64>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
    a25c:	ee07 6a90 	vmov	s15, r6
    a260:	eef8 7a67 	vcvt.f32.u32	s15, s15
    a264:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    a268:	ee17 0a90 	vmov	r0, s15
    a26c:	f7f6 f8fc 	bl	468 <__aeabi_f2d>
    a270:	4602      	mov	r2, r0
    a272:	460b      	mov	r3, r1
    a274:	2000      	movs	r0, #0
    a276:	490f      	ldr	r1, [pc, #60]	; (a2b4 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x74>)
    a278:	f7f6 fa78 	bl	76c <__aeabi_ddiv>
    a27c:	4606      	mov	r6, r0
    a27e:	460f      	mov	r7, r1
                (out_buffer[ix] * out_buffer[ix]);
    a280:	edd4 7a00 	vldr	s15, [r4]
    a284:	ee67 7aa7 	vmul.f32	s15, s15, s15
    a288:	ee17 0a90 	vmov	r0, s15
    a28c:	f7f6 f8ec 	bl	468 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
    a290:	4632      	mov	r2, r6
    a292:	463b      	mov	r3, r7
    a294:	f7f6 f940 	bl	518 <__aeabi_dmul>
    a298:	f7f6 fc00 	bl	a9c <__aeabi_d2f>
    a29c:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
    a2a0:	42a5      	cmp	r5, r4
    a2a2:	d1ed      	bne.n	a280 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x40>
    }
    a2a4:	4640      	mov	r0, r8
    a2a6:	b002      	add	sp, #8
    a2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    a2ac:	f8df 8008 	ldr.w	r8, [pc, #8]	; a2b8 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x78>
    a2b0:	e7f8      	b.n	a2a4 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x64>
    a2b2:	bf00      	nop
    a2b4:	3ff00000 	.word	0x3ff00000
    a2b8:	fffffc14 	.word	0xfffffc14

0000a2bc <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf>:
        if (blockSize <= 1U) {
    a2bc:	2901      	cmp	r1, #1
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
    a2be:	b570      	push	{r4, r5, r6, lr}
    a2c0:	eddf 7a2e 	vldr	s15, [pc, #184]	; a37c <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xc0>
        if (blockSize <= 1U) {
    a2c4:	d802      	bhi.n	a2cc <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x10>
            *pResult = 0;
    a2c6:	edc2 7a00 	vstr	s15, [r2]
    }
    a2ca:	bd70      	pop	{r4, r5, r6, pc}
        blkCnt = blockSize >> 2U;
    a2cc:	088d      	lsrs	r5, r1, #2
    a2ce:	4603      	mov	r3, r0
    a2d0:	4604      	mov	r4, r0
    a2d2:	462e      	mov	r6, r5
        while (blkCnt > 0U) {
    a2d4:	3410      	adds	r4, #16
    a2d6:	b18e      	cbz	r6, a2fc <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x40>
            sum += *pInput++;
    a2d8:	ed14 7a04 	vldr	s14, [r4, #-16]
    a2dc:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    a2e0:	ed14 7a03 	vldr	s14, [r4, #-12]
    a2e4:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    a2e8:	ed14 7a02 	vldr	s14, [r4, #-8]
    a2ec:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
    a2f0:	ed14 7a01 	vldr	s14, [r4, #-4]
            blkCnt--;
    a2f4:	3e01      	subs	r6, #1
            sum += *pInput++;
    a2f6:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
    a2fa:	e7eb      	b.n	a2d4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x18>
    a2fc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        blkCnt = blockSize % 0x4U;
    a300:	f001 0403 	and.w	r4, r1, #3
    a304:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    a308:	4606      	mov	r6, r0
        while (blkCnt > 0U) {
    a30a:	42a6      	cmp	r6, r4
    a30c:	d004      	beq.n	a318 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x5c>
            sum += *pInput++;
    a30e:	ecb6 7a01 	vldmia	r6!, {s14}
    a312:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
    a316:	e7f8      	b.n	a30a <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x4e>
        fMean = sum / (float32_t)blockSize;
    a318:	ee07 1a10 	vmov	s14, r1
    a31c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    a320:	eec7 6a87 	vdiv.f32	s13, s15, s14
        float32_t fSum = 0.0f;
    a324:	eddf 7a15 	vldr	s15, [pc, #84]	; a37c <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xc0>
        while (blkCnt > 0U) {
    a328:	3310      	adds	r3, #16
    a32a:	b1cd      	cbz	r5, a360 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xa4>
            fValue = *pInput++ - fMean;
    a32c:	ed13 6a04 	vldr	s12, [r3, #-16]
    a330:	ee36 6a66 	vsub.f32	s12, s12, s13
            blkCnt--;
    a334:	3d01      	subs	r5, #1
            fSum += fValue * fValue;
    a336:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    a33a:	ed13 6a03 	vldr	s12, [r3, #-12]
    a33e:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    a342:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    a346:	ed13 6a02 	vldr	s12, [r3, #-8]
    a34a:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    a34e:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
    a352:	ed13 6a01 	vldr	s12, [r3, #-4]
    a356:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    a35a:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
    a35e:	e7e3      	b.n	a328 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0x6c>
        while (blkCnt > 0U) {
    a360:	42a0      	cmp	r0, r4
    a362:	d006      	beq.n	a372 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xb6>
            fValue = *pInput++ - fMean;
    a364:	ecb0 6a01 	vldmia	r0!, {s12}
    a368:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
    a36c:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
    a370:	e7f6      	b.n	a360 <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xa4>
        *pResult = fSum / (float32_t)(blockSize);
    a372:	eec7 6a87 	vdiv.f32	s13, s15, s14
    a376:	edc2 6a00 	vstr	s13, [r2]
    a37a:	e7a6      	b.n	a2ca <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf+0xe>
    a37c:	00000000 	.word	0x00000000

0000a380 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
    a380:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (input_matrix->cols != output_matrix->rows) {
    a382:	6883      	ldr	r3, [r0, #8]
    a384:	684a      	ldr	r2, [r1, #4]
    a386:	4293      	cmp	r3, r2
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
    a388:	b087      	sub	sp, #28
    a38a:	460e      	mov	r6, r1
        if (input_matrix->cols != output_matrix->rows) {
    a38c:	d144      	bne.n	a418 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        if (output_matrix->cols != 1) {
    a38e:	6889      	ldr	r1, [r1, #8]
    a390:	2901      	cmp	r1, #1
    a392:	d141      	bne.n	a418 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        arm_in_matrix.numRows = input_matrix->rows;
    a394:	6842      	ldr	r2, [r0, #4]
        arm_in_matrix.pData = &input_matrix->buffer[0];
    a396:	6800      	ldr	r0, [r0, #0]
    a398:	9003      	str	r0, [sp, #12]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    a39a:	fb02 f003 	mul.w	r0, r2, r3
        arm_in_matrix.numRows = input_matrix->rows;
    a39e:	b294      	uxth	r4, r2
        arm_in_matrix.numCols = input_matrix->cols;
    a3a0:	b29d      	uxth	r5, r3
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    a3a2:	0080      	lsls	r0, r0, #2
        arm_in_matrix.numRows = input_matrix->rows;
    a3a4:	f8ad 4008 	strh.w	r4, [sp, #8]
        arm_in_matrix.numCols = input_matrix->cols;
    a3a8:	f8ad 500a 	strh.w	r5, [sp, #10]
        arm_transposed_matrix.numRows = input_matrix->cols;
    a3ac:	f8ad 5010 	strh.w	r5, [sp, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
    a3b0:	f8ad 4012 	strh.w	r4, [sp, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
    a3b4:	f007 f85c 	bl	11470 <_Z9ei_callocjj>
    a3b8:	9005      	str	r0, [sp, #20]
        if (arm_transposed_matrix.pData == NULL) {
    a3ba:	b378      	cbz	r0, a41c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x9c>
        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
    a3bc:	a904      	add	r1, sp, #16
    a3be:	a802      	add	r0, sp, #8
    a3c0:	f008 fb4b 	bl	12a5a <arm_mat_trans_f32>
        if (ret != EIDSP_OK) {
    a3c4:	4604      	mov	r4, r0
    a3c6:	bb20      	cbnz	r0, a412 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
    a3c8:	4605      	mov	r5, r0
    a3ca:	2700      	movs	r7, #0
    a3cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
    a3d0:	9805      	ldr	r0, [sp, #20]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
    a3d2:	42ab      	cmp	r3, r5
    a3d4:	d91b      	bls.n	a40e <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
    a3d6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    a3da:	fb05 f301 	mul.w	r3, r5, r1
    a3de:	aa01      	add	r2, sp, #4
    a3e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    a3e4:	f7ff ff6a 	bl	a2bc <_ZN2ei5numpy18cmsis_arm_varianceEPKfjPf>
            arm_sqrt_f32(var, &std);
    a3e8:	ed9d 0a01 	vldr	s0, [sp, #4]
    if (in >= 0.0f)
    a3ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    a3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3f4:	db08      	blt.n	a408 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x88>
      *pOut = sqrtf(in);
    a3f6:	f004 fe3b 	bl	f070 <sqrtf>
            output_matrix->buffer[row] = std;
    a3fa:	6833      	ldr	r3, [r6, #0]
    a3fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    a400:	ed83 0a00 	vstr	s0, [r3]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
    a404:	3501      	adds	r5, #1
    a406:	e7e1      	b.n	a3cc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4c>
      *pOut = 0.0f;
    a408:	ee00 7a10 	vmov	s0, r7
    a40c:	e7f5      	b.n	a3fa <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x7a>
        ei_free(arm_transposed_matrix.pData);
    a40e:	f007 f831 	bl	11474 <_Z7ei_freePv>
    }
    a412:	4620      	mov	r0, r4
    a414:	b007      	add	sp, #28
    a416:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    a418:	4c01      	ldr	r4, [pc, #4]	; (a420 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa0>)
    a41a:	e7fa      	b.n	a412 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    a41c:	4c01      	ldr	r4, [pc, #4]	; (a424 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa4>)
    a41e:	e7f8      	b.n	a412 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
    a420:	fffffc14 	.word	0xfffffc14
    a424:	fffffc16 	.word	0xfffffc16

0000a428 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
    static float frequency_to_mel(float f) {
    a428:	b510      	push	{r4, lr}
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
    a42a:	eddf 7a24 	vldr	s15, [pc, #144]	; a4bc <_ZN2ei8speechpy9functions16frequency_to_melEf+0x94>
        e = (g - 0x3f2aaaab) & 0xff800000;
    a42e:	4c24      	ldr	r4, [pc, #144]	; (a4c0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x98>)
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    a430:	ed9f 1a24 	vldr	s2, [pc, #144]	; a4c4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x9c>
    static float frequency_to_mel(float f) {
    a434:	ed2d 8b04 	vpush	{d8-d9}
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
    a438:	ee80 8a27 	vdiv.f32	s16, s0, s15
    a43c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        g = (int32_t) * ((int32_t *)&a);
    a440:	ee38 7a27 	vadd.f32	s14, s16, s15
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    a444:	ed9f 0a20 	vldr	s0, [pc, #128]	; a4c8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa0>
        g = (int32_t) * ((int32_t *)&a);
    a448:	ee17 3a10 	vmov	r3, s14
        e = (g - 0x3f2aaaab) & 0xff800000;
    a44c:	441c      	add	r4, r3
    a44e:	0de4      	lsrs	r4, r4, #23
    a450:	05e4      	lsls	r4, r4, #23
        g = g - e;
    a452:	1b1b      	subs	r3, r3, r4
    a454:	ee08 3a10 	vmov	s16, r3
        f = m - 1.0f;
    a458:	ee38 8a67 	vsub.f32	s16, s16, s15
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    a45c:	eef0 0a48 	vmov.f32	s1, s16
    a460:	f00b fa3d 	bl	158de <fmaf>
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    a464:	eef0 0a48 	vmov.f32	s1, s16
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
    a468:	eef0 8a40 	vmov.f32	s17, s0
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    a46c:	ed9f 1a17 	vldr	s2, [pc, #92]	; a4cc <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa4>
    a470:	ed9f 0a17 	vldr	s0, [pc, #92]	; a4d0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xa8>
    a474:	f00b fa33 	bl	158de <fmaf>
        s = f * f;
    a478:	ee28 9a08 	vmul.f32	s18, s16, s16
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
    a47c:	eeb0 1a40 	vmov.f32	s2, s0
        r = fmaf(r, s, t);
    a480:	eef0 0a49 	vmov.f32	s1, s18
    a484:	eeb0 0a68 	vmov.f32	s0, s17
    a488:	f00b fa29 	bl	158de <fmaf>
        r = fmaf(r, s, f);
    a48c:	eeb0 1a48 	vmov.f32	s2, s16
    a490:	eef0 0a49 	vmov.f32	s1, s18
    a494:	f00b fa23 	bl	158de <fmaf>
    a498:	eeb0 1a40 	vmov.f32	s2, s0
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
    a49c:	ee00 4a10 	vmov	s0, r4
    a4a0:	eddf 0a0c 	vldr	s1, [pc, #48]	; a4d4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xac>
    a4a4:	eeba 0ae4 	vcvt.f32.s32	s0, s0, #23
    a4a8:	f00b fa19 	bl	158de <fmaf>
    }
    a4ac:	ecbd 8b04 	vpop	{d8-d9}
    a4b0:	eddf 7a09 	vldr	s15, [pc, #36]	; a4d8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xb0>
    a4b4:	ee20 0a27 	vmul.f32	s0, s0, s15
    a4b8:	bd10      	pop	{r4, pc}
    a4ba:	bf00      	nop
    a4bc:	442f0000 	.word	0x442f0000
    a4c0:	c0d55555 	.word	0xc0d55555
    a4c4:	be8ef46d 	.word	0xbe8ef46d
    a4c8:	3e6c6078 	.word	0x3e6c6078
    a4cc:	beff712d 	.word	0xbeff712d
    a4d0:	3ea9e51a 	.word	0x3ea9e51a
    a4d4:	3f317218 	.word	0x3f317218
    a4d8:	448ce000 	.word	0x448ce000

0000a4dc <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>:
        zero_handling(input->buffer, input->rows * input->cols);
    a4dc:	e9d0 3200 	ldrd	r3, r2, [r0]
    a4e0:	6881      	ldr	r1, [r0, #8]
    a4e2:	434a      	muls	r2, r1
                input[ix] = 1e-10;
    a4e4:	4907      	ldr	r1, [pc, #28]	; (a504 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0x28>)
    a4e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
    a4ea:	4293      	cmp	r3, r2
    a4ec:	d009      	beq.n	a502 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0x26>
            if (input[ix] == 0) {
    a4ee:	edd3 7a00 	vldr	s15, [r3]
    a4f2:	eef5 7a40 	vcmp.f32	s15, #0.0
    a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
    a4fa:	bf08      	it	eq
    a4fc:	6019      	streq	r1, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
    a4fe:	3304      	adds	r3, #4
    a500:	e7f3      	b.n	a4ea <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE+0xe>
    }
    a502:	4770      	bx	lr
    a504:	2edbe6ff 	.word	0x2edbe6ff

0000a508 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
        int get_data(size_t offset, size_t length, float *out_buffer) {
    a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a50c:	ed2d 8b04 	vpush	{d8-d9}
    a510:	4698      	mov	r8, r3
            if (!_prev_buffer || !_end_of_signal_buffer) {
    a512:	68c3      	ldr	r3, [r0, #12]
        int get_data(size_t offset, size_t length, float *out_buffer) {
    a514:	b085      	sub	sp, #20
    a516:	4604      	mov	r4, r0
    a518:	460e      	mov	r6, r1
    a51a:	4617      	mov	r7, r2
            if (!_prev_buffer || !_end_of_signal_buffer) {
    a51c:	2b00      	cmp	r3, #0
    a51e:	d079      	beq.n	a614 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10c>
    a520:	6902      	ldr	r2, [r0, #16]
    a522:	2a00      	cmp	r2, #0
    a524:	d076      	beq.n	a614 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10c>
            if (offset + length > _signal->total_length) {
    a526:	6800      	ldr	r0, [r0, #0]
    a528:	6902      	ldr	r2, [r0, #16]
    a52a:	eb01 0a07 	add.w	sl, r1, r7
    a52e:	4592      	cmp	sl, r2
    a530:	d872      	bhi.n	a618 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x110>
            if (static_cast<int32_t>(offset) - _shift >= 0) {
    a532:	6862      	ldr	r2, [r4, #4]
    a534:	1a89      	subs	r1, r1, r2
    a536:	d547      	bpl.n	a5c8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xc0>
            ret = _signal->get_data(offset, length, out_buffer);
    a538:	6820      	ldr	r0, [r4, #0]
    a53a:	4643      	mov	r3, r8
    a53c:	463a      	mov	r2, r7
    a53e:	4631      	mov	r1, r6
    a540:	f00a f923 	bl	1478a <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
    a544:	4605      	mov	r5, r0
    a546:	2800      	cmp	r0, #0
    a548:	d143      	bne.n	a5d2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
    a54a:	46c3      	mov	fp, r8
            bool all_between_min_1_and_1 = true;
    a54c:	f04f 0901 	mov.w	r9, #1
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
    a550:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
    a554:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
            for (size_t ix = 0; ix < length; ix++) {
    a558:	45b2      	cmp	sl, r6
    a55a:	7e22      	ldrb	r2, [r4, #24]
    a55c:	d042      	beq.n	a5e4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xdc>
                if (offset + ix < static_cast<uint32_t>(_shift)) {
    a55e:	6861      	ldr	r1, [r4, #4]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
    a560:	68e0      	ldr	r0, [r4, #12]
                float now = out_buffer[ix];
    a562:	ed9b 8a00 	vldr	s16, [fp]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
    a566:	ed94 7a02 	vldr	s14, [r4, #8]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
    a56a:	42b1      	cmp	r1, r6
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
    a56c:	bf89      	itett	hi
    a56e:	6923      	ldrhi	r3, [r4, #16]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
    a570:	edd0 6a00 	vldrls	s13, [r0]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
    a574:	eb03 0386 	addhi.w	r3, r3, r6, lsl #2
    a578:	edd3 6a00 	vldrhi	s13, [r3]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
    a57c:	eef0 7a48 	vmov.f32	s15, s16
    a580:	eee6 7ac7 	vfms.f32	s15, s13, s14
    a584:	eceb 7a01 	vstmia	fp!, {s15}
                if (_rescale && all_between_min_1_and_1) {
    a588:	b182      	cbz	r2, a5ac <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa4>
    a58a:	f1b9 0f00 	cmp.w	r9, #0
    a58e:	d00d      	beq.n	a5ac <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa4>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
    a590:	eef4 7ae8 	vcmpe.f32	s15, s17
    a594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a598:	d421      	bmi.n	a5de <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd6>
    a59a:	eef4 7ac9 	vcmpe.f32	s15, s18
    a59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5a2:	bfd4      	ite	le
    a5a4:	f04f 0901 	movle.w	r9, #1
    a5a8:	f04f 0900 	movgt.w	r9, #0
                if (_shift != 1) {
    a5ac:	2901      	cmp	r1, #1
    a5ae:	d003      	beq.n	a5b8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xb0>
                    numpy::roll(_prev_buffer, _shift, -1);
    a5b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a5b4:	f7ff fd94 	bl	a0e0 <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
    a5b8:	6862      	ldr	r2, [r4, #4]
    a5ba:	68e3      	ldr	r3, [r4, #12]
    a5bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    a5c0:	ed03 8a01 	vstr	s16, [r3, #-4]
            for (size_t ix = 0; ix < length; ix++) {
    a5c4:	3601      	adds	r6, #1
    a5c6:	e7c7      	b.n	a558 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x50>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
    a5c8:	f00a f8df 	bl	1478a <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (ret != 0) {
    a5cc:	4605      	mov	r5, r0
    a5ce:	2800      	cmp	r0, #0
    a5d0:	d0b2      	beq.n	a538 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x30>
        }
    a5d2:	4628      	mov	r0, r5
    a5d4:	b005      	add	sp, #20
    a5d6:	ecbd 8b04 	vpop	{d8-d9}
    a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5de:	f04f 0900 	mov.w	r9, #0
    a5e2:	e7e3      	b.n	a5ac <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa4>
            _next_offset_should_be += length;
    a5e4:	6963      	ldr	r3, [r4, #20]
    a5e6:	443b      	add	r3, r7
    a5e8:	6163      	str	r3, [r4, #20]
            if (_rescale && !all_between_min_1_and_1) {
    a5ea:	2a00      	cmp	r2, #0
    a5ec:	d0f1      	beq.n	a5d2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
    a5ee:	f1b9 0f00 	cmp.w	r9, #0
    a5f2:	d1ee      	bne.n	a5d2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                matrix_t scale_matrix(length, 1, out_buffer);
    a5f4:	4643      	mov	r3, r8
    a5f6:	2201      	movs	r2, #1
    a5f8:	4639      	mov	r1, r7
    a5fa:	4668      	mov	r0, sp
    a5fc:	f00a f884 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
        if (scale == 1.0f) return EIDSP_OK;
    a600:	ed9f 0a06 	vldr	s0, [pc, #24]	; a61c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x114>
    a604:	4668      	mov	r0, sp
    a606:	f7ff fc41 	bl	9e8c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
                if (ret != 0) {
    a60a:	4605      	mov	r5, r0
                    EIDSP_ERR(ret);
    a60c:	4668      	mov	r0, sp
                matrix_t scale_matrix(length, 1, out_buffer);
    a60e:	f006 fee1 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    a612:	e7de      	b.n	a5d2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
    a614:	4d02      	ldr	r5, [pc, #8]	; (a620 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x118>)
    a616:	e7dc      	b.n	a5d2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
    a618:	4d02      	ldr	r5, [pc, #8]	; (a624 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x11c>)
    a61a:	e7da      	b.n	a5d2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
    a61c:	38000000 	.word	0x38000000
    a620:	fffffc16 	.word	0xfffffc16
    a624:	fffffc0e 	.word	0xfffffc0e

0000a628 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
    a628:	b508      	push	{r3, lr}
    a62a:	4613      	mov	r3, r2
    return preemphasis->get_data(offset, length, out_ptr);
    a62c:	460a      	mov	r2, r1
    a62e:	4601      	mov	r1, r0
    a630:	4802      	ldr	r0, [pc, #8]	; (a63c <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x14>)
    a632:	6800      	ldr	r0, [r0, #0]
    a634:	f7ff ff68 	bl	a508 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
}
    a638:	bd08      	pop	{r3, pc}
    a63a:	bf00      	nop
    a63c:	2000119c 	.word	0x2000119c

0000a640 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a644:	ed2d 8b02 	vpush	{d8}
    a648:	460e      	mov	r6, r1
    a64a:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a64c:	4946      	ldr	r1, [pc, #280]	; (a768 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
    a64e:	f8d2 b004 	ldr.w	fp, [r2, #4]
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
    a652:	4605      	mov	r5, r0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a654:	6890      	ldr	r0, [r2, #8]
    a656:	f7f6 fc9b 	bl	f90 <strcmp>

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
    a65a:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a65e:	2800      	cmp	r0, #0
    a660:	bf0c      	ite	eq
    a662:	f04f 0a01 	moveq.w	sl, #1
    a666:	f04f 0a03 	movne.w	sl, #3
    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
    a66a:	435c      	muls	r4, r3
    a66c:	d00d      	beq.n	a68a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
    a66e:	483f      	ldr	r0, [pc, #252]	; (a76c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>)
    a670:	4621      	mov	r1, r4
    a672:	f7fb fbbd 	bl	5df0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_FRAMES * EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
    a676:	483e      	ldr	r0, [pc, #248]	; (a770 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x130>)
    a678:	2100      	movs	r1, #0
    a67a:	f7fb fbb9 	bl	5df0 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    a67e:	483d      	ldr	r0, [pc, #244]	; (a774 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x134>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
    a680:	b005      	add	sp, #20
    a682:	ecbd 8b02 	vpop	{d8}
    a686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t bytes_left = signal->total_length;
    a68a:	f8d5 9010 	ldr.w	r9, [r5, #16]
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    a68e:	ed9f 8a3a 	vldr	s16, [pc, #232]	; a778 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a692:	eddf 8a3a 	vldr	s17, [pc, #232]	; a77c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
    a696:	4627      	mov	r7, r4
    a698:	692b      	ldr	r3, [r5, #16]
    a69a:	42bb      	cmp	r3, r7
    a69c:	d961      	bls.n	a762 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x122>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
    a69e:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
    a6a2:	46c8      	mov	r8, r9
    a6a4:	bf28      	it	cs
    a6a6:	f44f 6880 	movcs.w	r8, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
    a6aa:	2300      	movs	r3, #0
    a6ac:	465a      	mov	r2, fp
    a6ae:	4641      	mov	r1, r8
    a6b0:	4668      	mov	r0, sp
    a6b2:	f00a f829 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
        if (!input_matrix.buffer) {
    a6b6:	9b00      	ldr	r3, [sp, #0]
    a6b8:	b923      	cbnz	r3, a6c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x84>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
    a6ba:	4668      	mov	r0, sp
    a6bc:	f006 fe8a 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    a6c0:	482f      	ldr	r0, [pc, #188]	; (a780 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x140>)
    a6c2:	e7dd      	b.n	a680 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x40>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
    a6c4:	4642      	mov	r2, r8
    a6c6:	4639      	mov	r1, r7
    a6c8:	4628      	mov	r0, r5
    a6ca:	f00a f85e 	bl	1478a <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    a6ce:	9a00      	ldr	r2, [sp, #0]
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a6d0:	eddf 5a2c 	vldr	s11, [pc, #176]	; a784 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
    a6d4:	ed9f 5a2c 	vldr	s10, [pc, #176]	; a788 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x148>
    a6d8:	eb02 0188 	add.w	r1, r2, r8, lsl #2
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    a6dc:	4291      	cmp	r1, r2
    a6de:	d038      	beq.n	a752 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x112>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
    a6e0:	ecf2 7a01 	vldmia	r2!, {s15}
    a6e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
    a6e8:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
    a6ec:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    a6f0:	f3c3 4007 	ubfx	r0, r3, #16, #8
    a6f4:	ee07 0a90 	vmov	s15, r0
    a6f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
    a6fc:	f3c3 2007 	ubfx	r0, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
    a700:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    a704:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
    a706:	ee07 0a90 	vmov	s15, r0
    a70a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
    a70e:	f104 0001 	add.w	r0, r4, #1
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
    a712:	ee87 7a88 	vdiv.f32	s14, s15, s16
                output_matrix->buffer[output_ix++] = b;
    a716:	bf08      	it	eq
    a718:	1ce0      	addeq	r0, r4, #3
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    a71a:	ee07 3a90 	vmov	s15, r3
    a71e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a722:	bf18      	it	ne
    a724:	ee27 7a28 	vmulne.f32	s14, s14, s17
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
    a728:	eec7 6a88 	vdiv.f32	s13, s15, s16
                output_matrix->buffer[output_ix++] = r;
    a72c:	6833      	ldr	r3, [r6, #0]
    a72e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    a732:	4604      	mov	r4, r0
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a734:	bf15      	itete	ne
    a736:	eea6 7a25 	vfmane.f32	s14, s12, s11
                output_matrix->buffer[output_ix++] = r;
    a73a:	ed83 6a00 	vstreq	s12, [r3]
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
    a73e:	eea6 7a85 	vfmane.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = g;
    a742:	ed83 7a01 	vstreq	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
    a746:	bf0c      	ite	eq
    a748:	edc3 6a02 	vstreq	s13, [r3, #8]
                output_matrix->buffer[output_ix++] = v;
    a74c:	ed83 7a00 	vstrne	s14, [r3]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
    a750:	e7c4      	b.n	a6dc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9c>
        matrix_t input_matrix(elements_to_read, config.axes);
    a752:	4668      	mov	r0, sp
    a754:	f006 fe3e 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        bytes_left -= elements_to_read;
    a758:	eba9 0908 	sub.w	r9, r9, r8
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
    a75c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    a760:	e79a      	b.n	a698 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x58>
    return EIDSP_OK;
    a762:	2000      	movs	r0, #0
    a764:	e78c      	b.n	a680 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x40>
    a766:	bf00      	nop
    a768:	00045bc3 	.word	0x00045bc3
    a76c:	00045bcd 	.word	0x00045bcd
    a770:	00045be4 	.word	0x00045be4
    a774:	fffffc14 	.word	0xfffffc14
    a778:	437f0000 	.word	0x437f0000
    a77c:	3f1645a2 	.word	0x3f1645a2
    a780:	fffffc16 	.word	0xfffffc16
    a784:	3e991687 	.word	0x3e991687
    a788:	3de978d5 	.word	0x3de978d5

0000a78c <_ZNSt6vectorIjSaIjEE2atEj>:
      at(size_type __n)
    a78c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a78e:	e9d0 5400 	ldrd	r5, r4, [r0]
    a792:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
    a794:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    a798:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
    a79c:	d302      	bcc.n	a7a4 <_ZNSt6vectorIjSaIjEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
    a79e:	4803      	ldr	r0, [pc, #12]	; (a7ac <_ZNSt6vectorIjSaIjEE2atEj+0x20>)
    a7a0:	f00b f830 	bl	15804 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
    a7a4:	eb05 0081 	add.w	r0, r5, r1, lsl #2
    a7a8:	bd38      	pop	{r3, r4, r5, pc}
    a7aa:	bf00      	nop
    a7ac:	00045c00 	.word	0x00045c00

0000a7b0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
    a7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a7b4:	b088      	sub	sp, #32
    a7b6:	4691      	mov	r9, r2
    a7b8:	4607      	mov	r7, r0
    a7ba:	460e      	mov	r6, r1
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    uint64_t ctx_start_us = ei_read_timer_us();
    a7bc:	f006 fe44 	bl	11448 <_Z16ei_read_timer_usv>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    a7c0:	4b29      	ldr	r3, [pc, #164]	; (a868 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xb8>)
    a7c2:	9306      	str	r3, [sp, #24]
    a7c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a7c8:	2300      	movs	r3, #0
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
    a7ca:	aa03      	add	r2, sp, #12
    a7cc:	a902      	add	r1, sp, #8
    a7ce:	a804      	add	r0, sp, #16
    a7d0:	9307      	str	r3, [sp, #28]
    a7d2:	f7ff fc0d 	bl	9ff0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &output_labels,
        &output_scores,
#endif
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
    a7d6:	4604      	mov	r4, r0
    a7d8:	2800      	cmp	r0, #0
    a7da:	d13e      	bne.n	a85a <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0xaa>
        else {
            input->data.f[ix] = fmatrix->buffer[ix];
        }
    }
#else
    bool int8_input = input->type == TfLiteType::kTfLiteInt8;
    a7dc:	9b02      	ldr	r3, [sp, #8]
    a7de:	f893 a000 	ldrb.w	sl, [r3]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
    a7e2:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    a7e6:	4353      	muls	r3, r2
    a7e8:	42a3      	cmp	r3, r4
    a7ea:	d924      	bls.n	a836 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x86>
        // Quantize the input if it is int8
        if (int8_input) {
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    a7ec:	683b      	ldr	r3, [r7, #0]
    a7ee:	9d02      	ldr	r5, [sp, #8]
    a7f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        if (int8_input) {
    a7f4:	f1ba 0f09 	cmp.w	sl, #9
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    a7f8:	f8d5 8004 	ldr.w	r8, [r5, #4]
    a7fc:	edd3 7a00 	vldr	s15, [r3]
    a800:	ea4f 0284 	mov.w	r2, r4, lsl #2
        if (int8_input) {
    a804:	d113      	bne.n	a82e <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x7e>
            input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
    a806:	ed95 0a03 	vldr	s0, [r5, #12]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    a80a:	ee87 0a80 	vdiv.f32	s0, s15, s0
    a80e:	f004 faeb 	bl	ede8 <roundf>
    a812:	edd5 7a04 	vldr	s15, [r5, #16]
    a816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a81a:	ee37 0a80 	vadd.f32	s0, s15, s0
    a81e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    a822:	ee17 5a90 	vmov	r5, s15
    a826:	f808 5004 	strb.w	r5, [r8, r4]
    for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
    a82a:	3401      	adds	r4, #1
    a82c:	e7d9      	b.n	a7e2 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x32>
            // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
        } else {
            input->data.f[ix] = fmatrix->buffer[ix];
    a82e:	4490      	add	r8, r2
    a830:	edc8 7a00 	vstr	s15, [r8]
    a834:	e7f9      	b.n	a82a <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb+0x7a>
        }
    }
#endif

    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
    a836:	4633      	mov	r3, r6
    a838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a83c:	9a03      	ldr	r2, [sp, #12]
    a83e:	f8cd 9000 	str.w	r9, [sp]
    a842:	f7ff fb45 	bl	9ed0 <_ZL20inference_tflite_runyP12TfLiteTensorPhP19ei_impulse_result_tb.constprop.0>
    a846:	4604      	mov	r4, r0
        output_labels,
        output_scores,
#endif
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
    a848:	f006 fdfe 	bl	11448 <_Z16ei_read_timer_usv>
    a84c:	9b04      	ldr	r3, [sp, #16]
    a84e:	1ac0      	subs	r0, r0, r3
    a850:	9b05      	ldr	r3, [sp, #20]
    a852:	eb61 0103 	sbc.w	r1, r1, r3
    a856:	e9c6 010e 	strd	r0, r1, [r6, #56]	; 0x38
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
    a85a:	a806      	add	r0, sp, #24
    a85c:	f009 fff8 	bl	14850 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
    a860:	4620      	mov	r0, r4
    a862:	b008      	add	sp, #32
    a864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a868:	00009e15 	.word	0x00009e15

0000a86c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    a86c:	b530      	push	{r4, r5, lr}
    a86e:	4608      	mov	r0, r1
    a870:	b087      	sub	sp, #28
    memset(result, 0, sizeof(ei_impulse_result_t));
    a872:	2250      	movs	r2, #80	; 0x50
    a874:	2100      	movs	r1, #0
    a876:	f00b f8a0 	bl	159ba <memset>
    a87a:	4b1f      	ldr	r3, [pc, #124]	; (a8f8 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x8c>)
    a87c:	9304      	str	r3, [sp, #16]
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
    a87e:	aa01      	add	r2, sp, #4
    a880:	2300      	movs	r3, #0
    a882:	4669      	mov	r1, sp
    a884:	a802      	add	r0, sp, #8
    a886:	9305      	str	r3, [sp, #20]
    a888:	f7ff fbb2 	bl	9ff0 <_ZL22inference_tflite_setupPyPP12TfLiteTensorS2_RSt10unique_ptrIvPFvPvEE.constprop.0>
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        &output_labels,
        &output_scores,
    #endif
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
    a88c:	4604      	mov	r4, r0
    a88e:	bb48      	cbnz	r0, a8e4 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return init_res;
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
    a890:	9b00      	ldr	r3, [sp, #0]
    a892:	781b      	ldrb	r3, [r3, #0]
    a894:	2b09      	cmp	r3, #9
    a896:	d12b      	bne.n	a8f0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x84>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
    a898:	f006 fdd6 	bl	11448 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
    a89c:	9b00      	ldr	r3, [sp, #0]
    a89e:	685d      	ldr	r5, [r3, #4]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
    a8a0:	b935      	cbnz	r5, a8b0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x44>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
    a8a2:	2101      	movs	r1, #1
    a8a4:	f44f 6044 	mov.w	r0, #3136	; 0xc40
    a8a8:	f006 fde2 	bl	11470 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
    a8ac:	2401      	movs	r4, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
    a8ae:	4605      	mov	r5, r0

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
    a8b0:	4b12      	ldr	r3, [pc, #72]	; (a8fc <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x90>)
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a8b2:	4913      	ldr	r1, [pc, #76]	; (a900 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x94>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
    a8b4:	689b      	ldr	r3, [r3, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
    a8b6:	6898      	ldr	r0, [r3, #8]
    a8b8:	f7f6 fb6a 	bl	f90 <strcmp>

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
    a8bc:	4811      	ldr	r0, [pc, #68]	; (a904 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x98>)
    a8be:	f44f 6144 	mov.w	r1, #3136	; 0xc40
    a8c2:	f7fb fa95 	bl	5df0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
    a8c6:	4810      	ldr	r0, [pc, #64]	; (a908 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x9c>)
    a8c8:	2100      	movs	r1, #0
    a8ca:	f7fb fa91 	bl	5df0 <_Z9ei_printfPKcz>
    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
    a8ce:	490f      	ldr	r1, [pc, #60]	; (a90c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa0>)
    a8d0:	480f      	ldr	r0, [pc, #60]	; (a910 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0xa4>)
    a8d2:	f7fb fa8d 	bl	5df0 <_Z9ei_printfPKcz>
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
    a8d6:	b11d      	cbz	r5, a8e0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x74>
    a8d8:	b114      	cbz	r4, a8e0 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x74>
            ei_free(buffer);
    a8da:	4628      	mov	r0, r5
    a8dc:	f006 fdca 	bl	11474 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
    a8e0:	f06f 0404 	mvn.w	r4, #4
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
    a8e4:	a804      	add	r0, sp, #16
    a8e6:	f009 ffb3 	bl	14850 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;

    return EI_IMPULSE_OK;
}
    a8ea:	4620      	mov	r0, r4
    a8ec:	b007      	add	sp, #28
    a8ee:	bd30      	pop	{r4, r5, pc}
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    a8f0:	f06f 0408 	mvn.w	r4, #8
    a8f4:	e7f6      	b.n	a8e4 <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
    a8f6:	bf00      	nop
    a8f8:	00009e15 	.word	0x00009e15
    a8fc:	20000234 	.word	0x20000234
    a900:	00045bc3 	.word	0x00045bc3
    a904:	00045bcd 	.word	0x00045bcd
    a908:	00045be4 	.word	0x00045be4
    a90c:	fffffc14 	.word	0xfffffc14
    a910:	00045c4a 	.word	0x00045c4a

0000a914 <run_classifier_image_quantized>:
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a914:	4b0b      	ldr	r3, [pc, #44]	; (a944 <run_classifier_image_quantized+0x30>)
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    a916:	b570      	push	{r4, r5, r6, lr}
    a918:	4616      	mov	r6, r2
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a91a:	685a      	ldr	r2, [r3, #4]
    a91c:	4b0a      	ldr	r3, [pc, #40]	; (a948 <run_classifier_image_quantized+0x34>)
    a91e:	429a      	cmp	r2, r3
{
    a920:	4605      	mov	r5, r0
    a922:	460c      	mov	r4, r1
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a924:	d10b      	bne.n	a93e <run_classifier_image_quantized+0x2a>
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
    if (verify_res != EI_IMPULSE_OK) {
        return verify_res;
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
    a926:	2250      	movs	r2, #80	; 0x50
    a928:	2100      	movs	r1, #0
    a92a:	4620      	mov	r0, r4
    a92c:	f00b f845 	bl	159ba <memset>

#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#else

    return run_nn_inference_image_quantized(signal, result, debug);
    a930:	4632      	mov	r2, r6
    a932:	4621      	mov	r1, r4
    a934:	4628      	mov	r0, r5
        result->classification[ix].value = value;
    }

    return EI_IMPULSE_OK;
#endif // (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
}
    a936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return run_nn_inference_image_quantized(signal, result, debug);
    a93a:	f7ff bf97 	b.w	a86c <_Z32run_nn_inference_image_quantizedPN2ei11ei_signal_tEP19ei_impulse_result_tb>
}
    a93e:	f06f 0008 	mvn.w	r0, #8
    a942:	bd70      	pop	{r4, r5, r6, pc}
    a944:	20000234 	.word	0x20000234
    a948:	0000a641 	.word	0x0000a641

0000a94c <_ZN14SignalWithAxes10get_signalEv>:
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
    {

    }

    signal_t * get_signal() {
    a94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
    a94e:	6882      	ldr	r2, [r0, #8]
            return this->_original_signal;
    a950:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
    a952:	2a01      	cmp	r2, #1
    a954:	d010      	beq.n	a978 <_ZN14SignalWithAxes10get_signalEv+0x2c>
        }

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
    a956:	6923      	ldr	r3, [r4, #16]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    a958:	9000      	str	r0, [sp, #0]
    a95a:	4353      	muls	r3, r2
    a95c:	61c3      	str	r3, [r0, #28]
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
            return this->get_data(offset, length, out_ptr);
        };
    a95e:	f100 040c 	add.w	r4, r0, #12
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
    a962:	4b07      	ldr	r3, [pc, #28]	; (a980 <_ZN14SignalWithAxes10get_signalEv+0x34>)
    a964:	9303      	str	r3, [sp, #12]
	  function(std::forward<_Functor>(__f)).swap(*this);
    a966:	4668      	mov	r0, sp
	    _M_manager = &_My_handler::_M_manager;
    a968:	4b06      	ldr	r3, [pc, #24]	; (a984 <_ZN14SignalWithAxes10get_signalEv+0x38>)
    a96a:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
    a96c:	4621      	mov	r1, r4
    a96e:	f009 ff84 	bl	1487a <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
    a972:	4668      	mov	r0, sp
    a974:	f009 febf 	bl	146f6 <_ZNSt14_Function_baseD1Ev>
#endif
        return &wrapped_signal;
    }
    a978:	4620      	mov	r0, r4
    a97a:	b004      	add	sp, #16
    a97c:	bd10      	pop	{r4, pc}
    a97e:	bf00      	nop
    a980:	000147f9 	.word	0x000147f9
    a984:	00014671 	.word	0x00014671

0000a988 <run_classifier>:
{
    a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a98c:	4d47      	ldr	r5, [pc, #284]	; (aaac <run_classifier+0x124>)
    a98e:	4f48      	ldr	r7, [pc, #288]	; (aab0 <run_classifier+0x128>)
    a990:	686b      	ldr	r3, [r5, #4]
    a992:	42bb      	cmp	r3, r7
{
    a994:	b093      	sub	sp, #76	; 0x4c
    a996:	4680      	mov	r8, r0
    a998:	460c      	mov	r4, r1
    a99a:	4616      	mov	r6, r2
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
    a99c:	d104      	bne.n	a9a8 <run_classifier+0x20>
}
    a99e:	b013      	add	sp, #76	; 0x4c
    a9a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return run_classifier_image_quantized(signal, result, debug);
    a9a4:	f7ff bfb6 	b.w	a914 <run_classifier_image_quantized>
    memset(result, 0, sizeof(ei_impulse_result_t));
    a9a8:	2250      	movs	r2, #80	; 0x50
    a9aa:	2100      	movs	r1, #0
    a9ac:	4620      	mov	r0, r4
    a9ae:	f00b f804 	bl	159ba <memset>
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
    a9b2:	f44f 6244 	mov.w	r2, #3136	; 0xc40
    a9b6:	2300      	movs	r3, #0
    a9b8:	2101      	movs	r1, #1
    a9ba:	a802      	add	r0, sp, #8
    a9bc:	f009 fea4 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    uint64_t dsp_start_us = ei_read_timer_us();
    a9c0:	f006 fd42 	bl	11448 <_Z16ei_read_timer_usv>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a9c4:	682a      	ldr	r2, [r5, #0]
        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
    a9c6:	f5b2 6f44 	cmp.w	r2, #3136	; 0xc40
    uint64_t dsp_start_us = ei_read_timer_us();
    a9ca:	4607      	mov	r7, r0
    a9cc:	4689      	mov	r9, r1
        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
    a9ce:	d90b      	bls.n	a9e8 <run_classifier+0x60>
            ei_printf("ERR: Would write outside feature buffer\n");
    a9d0:	4838      	ldr	r0, [pc, #224]	; (aab4 <run_classifier+0x12c>)
    a9d2:	f7fb fa0d 	bl	5df0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
    a9d6:	f06f 0504 	mvn.w	r5, #4
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
    a9da:	a802      	add	r0, sp, #8
    a9dc:	f006 fcfa 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
}
    a9e0:	4628      	mov	r0, r5
    a9e2:	b013      	add	sp, #76	; 0x4c
    a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a9e8:	e9d5 ab02 	ldrd	sl, fp, [r5, #8]
    a9ec:	686b      	ldr	r3, [r5, #4]
    a9ee:	9301      	str	r3, [sp, #4]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a9f0:	2101      	movs	r1, #1
    a9f2:	9b02      	ldr	r3, [sp, #8]
        ei_model_dsp_t block = ei_dsp_blocks[ix];
    a9f4:	692d      	ldr	r5, [r5, #16]
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    a9f6:	a806      	add	r0, sp, #24
    a9f8:	f009 fe86 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    _Function_base() : _M_manager(nullptr) { }
    a9fc:	2300      	movs	r3, #0
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
    a9fe:	a80a      	add	r0, sp, #40	; 0x28
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
    aa00:	e9cd 8b0a 	strd	r8, fp, [sp, #40]	; 0x28
    aa04:	930f      	str	r3, [sp, #60]	; 0x3c
    aa06:	950c      	str	r5, [sp, #48]	; 0x30
    aa08:	f7ff ffa0 	bl	a94c <_ZN14SignalWithAxes10get_signalEv>
    aa0c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; aab8 <run_classifier+0x130>
    aa10:	9b01      	ldr	r3, [sp, #4]
    aa12:	4652      	mov	r2, sl
    aa14:	a906      	add	r1, sp, #24
    aa16:	4798      	blx	r3
        if (ret != EIDSP_OK) {
    aa18:	4680      	mov	r8, r0
    aa1a:	b160      	cbz	r0, aa36 <run_classifier+0xae>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
    aa1c:	4601      	mov	r1, r0
    aa1e:	4827      	ldr	r0, [pc, #156]	; (aabc <run_classifier+0x134>)
    aa20:	f7fb f9e6 	bl	5df0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
    aa24:	f06f 0504 	mvn.w	r5, #4
    class function<_Res(_ArgTypes...)>
    aa28:	a80d      	add	r0, sp, #52	; 0x34
    aa2a:	f009 fe64 	bl	146f6 <_ZNSt14_Function_baseD1Ev>
    aa2e:	a806      	add	r0, sp, #24
    aa30:	f006 fcd0 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    aa34:	e7d1      	b.n	a9da <run_classifier+0x52>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
    aa36:	f006 fd05 	bl	11444 <_Z29ei_run_impulse_check_canceledv>
    aa3a:	1c83      	adds	r3, r0, #2
    aa3c:	4605      	mov	r5, r0
    aa3e:	d0f3      	beq.n	aa28 <run_classifier+0xa0>
    aa40:	a80d      	add	r0, sp, #52	; 0x34
    aa42:	f009 fe58 	bl	146f6 <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
    aa46:	a806      	add	r0, sp, #24
    aa48:	f006 fcc4 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
    aa4c:	f006 fcfc 	bl	11448 <_Z16ei_read_timer_usv>
    aa50:	1bc0      	subs	r0, r0, r7
    aa52:	eb61 0109 	sbc.w	r1, r1, r9
    aa56:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
    aa5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aa5e:	2300      	movs	r3, #0
    aa60:	f7f6 f86c 	bl	b3c <__aeabi_ldivmod>
    aa64:	4601      	mov	r1, r0
    aa66:	6260      	str	r0, [r4, #36]	; 0x24
    if (debug) {
    aa68:	b1ce      	cbz	r6, aa9e <run_classifier+0x116>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
    aa6a:	4815      	ldr	r0, [pc, #84]	; (aac0 <run_classifier+0x138>)
            ei_printf(" ");
    aa6c:	4f15      	ldr	r7, [pc, #84]	; (aac4 <run_classifier+0x13c>)
        ei_printf("Features (%d ms.): ", result->timing.dsp);
    aa6e:	f7fb f9bf 	bl	5df0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
    aa72:	9b04      	ldr	r3, [sp, #16]
    aa74:	4543      	cmp	r3, r8
    aa76:	d90c      	bls.n	aa92 <run_classifier+0x10a>
            ei_printf_float(features_matrix.buffer[ix]);
    aa78:	9b02      	ldr	r3, [sp, #8]
    aa7a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    aa7e:	ed93 0a00 	vldr	s0, [r3]
    aa82:	f7fb f9cf 	bl	5e24 <_Z15ei_printf_floatf>
            ei_printf(" ");
    aa86:	4638      	mov	r0, r7
    aa88:	f7fb f9b2 	bl	5df0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
    aa8c:	f108 0801 	add.w	r8, r8, #1
    aa90:	e7ef      	b.n	aa72 <run_classifier+0xea>
        ei_printf("\n");
    aa92:	480d      	ldr	r0, [pc, #52]	; (aac8 <run_classifier+0x140>)
    aa94:	f7fb f9ac 	bl	5df0 <_Z9ei_printfPKcz>
        ei_printf("Running neural network...\n");
    aa98:	480c      	ldr	r0, [pc, #48]	; (aacc <run_classifier+0x144>)
    aa9a:	f7fb f9a9 	bl	5df0 <_Z9ei_printfPKcz>
    return run_inference(&features_matrix, result, debug);
    aa9e:	4632      	mov	r2, r6
    aaa0:	4621      	mov	r1, r4
    aaa2:	a802      	add	r0, sp, #8
    aaa4:	f009 fedc 	bl	14860 <run_inference>
    aaa8:	4605      	mov	r5, r0
    aaaa:	e796      	b.n	a9da <run_classifier+0x52>
    aaac:	20000234 	.word	0x20000234
    aab0:	0000a641 	.word	0x0000a641
    aab4:	00045c6f 	.word	0x00045c6f
    aab8:	467a0000 	.word	0x467a0000
    aabc:	00045c4a 	.word	0x00045c4a
    aac0:	00045ce3 	.word	0x00045ce3
    aac4:	00045fc7 	.word	0x00045fc7
    aac8:	00045dd9 	.word	0x00045dd9
    aacc:	00045d2f 	.word	0x00045d2f

0000aad0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
    aad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
    aad2:	2300      	movs	r3, #0
    aad4:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
    aad6:	b121      	cbz	r1, aae2 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
    aad8:	4b07      	ldr	r3, [pc, #28]	; (aaf8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
    aada:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
    aadc:	4b07      	ldr	r3, [pc, #28]	; (aafc <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    aade:	9100      	str	r1, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
    aae0:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
    aae2:	4601      	mov	r1, r0
    aae4:	4668      	mov	r0, sp
    aae6:	f009 fec8 	bl	1487a <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
    aaea:	4668      	mov	r0, sp
    aaec:	f009 fe03 	bl	146f6 <_ZNSt14_Function_baseD1Ev>
	}
    aaf0:	b005      	add	sp, #20
    aaf2:	f85d fb04 	ldr.w	pc, [sp], #4
    aaf6:	bf00      	nop
    aaf8:	00014699 	.word	0x00014699
    aafc:	00014685 	.word	0x00014685

0000ab00 <main>:

int main() {
    ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
    // This is needed so that output of printf is output immediately without buffering
    setvbuf(stdout, NULL, _IONBF, 0);
    ab02:	4b2a      	ldr	r3, [pc, #168]	; (abac <main+0xac>)

    while (1) {
        // the features are stored into flash, and we don't want to load everything into RAM
        signal_t features_signal;
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
        features_signal.get_data = &raw_feature_get_data;
    ab04:	4e2a      	ldr	r6, [pc, #168]	; (abb0 <main+0xb0>)
    setvbuf(stdout, NULL, _IONBF, 0);
    ab06:	6818      	ldr	r0, [r3, #0]

        // invoke the impulse
        EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, true);
        printk("run_classifier returned: %d\n", res);
    ab08:	4f2a      	ldr	r7, [pc, #168]	; (abb4 <main+0xb4>)
    setvbuf(stdout, NULL, _IONBF, 0);
    ab0a:	6880      	ldr	r0, [r0, #8]

        if (res != 0) return 1;

        printk("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
    ab0c:	4d2a      	ldr	r5, [pc, #168]	; (abb8 <main+0xb8>)
    setvbuf(stdout, NULL, _IONBF, 0);
    ab0e:	2300      	movs	r3, #0
int main() {
    ab10:	b09b      	sub	sp, #108	; 0x6c
    setvbuf(stdout, NULL, _IONBF, 0);
    ab12:	4619      	mov	r1, r3
    ab14:	2202      	movs	r2, #2
    ab16:	f005 fa85 	bl	10024 <setvbuf>
    printk("Edge Impulse standalone inferencing (Zephyr)\n");
    ab1a:	4828      	ldr	r0, [pc, #160]	; (abbc <main+0xbc>)
    ab1c:	f009 feff 	bl	1491e <printk>
    ei_impulse_result_t result = { 0 };
    ab20:	2250      	movs	r2, #80	; 0x50
    ab22:	2100      	movs	r1, #0
    ab24:	a806      	add	r0, sp, #24
    ab26:	f00a ff48 	bl	159ba <memset>
    _Function_base() : _M_manager(nullptr) { }
    ab2a:	2300      	movs	r3, #0
    ab2c:	9303      	str	r3, [sp, #12]
        features_signal.get_data = &raw_feature_get_data;
    ab2e:	4631      	mov	r1, r6
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
    ab30:	f643 6370 	movw	r3, #15984	; 0x3e70
        features_signal.get_data = &raw_feature_get_data;
    ab34:	a801      	add	r0, sp, #4
        features_signal.total_length = sizeof(features) / sizeof(features[0]);
    ab36:	9305      	str	r3, [sp, #20]
        features_signal.get_data = &raw_feature_get_data;
    ab38:	f7ff ffca 	bl	aad0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
        EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, true);
    ab3c:	a906      	add	r1, sp, #24
    ab3e:	2201      	movs	r2, #1
    ab40:	a801      	add	r0, sp, #4
    ab42:	f7ff ff21 	bl	a988 <run_classifier>
    ab46:	4604      	mov	r4, r0
        printk("run_classifier returned: %d\n", res);
    ab48:	4601      	mov	r1, r0
    ab4a:	4638      	mov	r0, r7
    ab4c:	f009 fee7 	bl	1491e <printk>
        if (res != 0) return 1;
    ab50:	bb34      	cbnz	r4, aba0 <main+0xa0>
        printk("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
    ab52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ab56:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ab58:	4628      	mov	r0, r5
    ab5a:	f009 fee0 	bl	1491e <printk>
            result.timing.dsp, result.timing.classification, result.timing.anomaly);

        // print the predictions
        printk("[");
    ab5e:	4818      	ldr	r0, [pc, #96]	; (abc0 <main+0xc0>)
    ab60:	f009 fedd 	bl	1491e <printk>
        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
            ei_printf_float(result.classification[ix].value);
    ab64:	ed9d 0a07 	vldr	s0, [sp, #28]
    ab68:	f7fb f95c 	bl	5e24 <_Z15ei_printf_floatf>
#if EI_CLASSIFIER_HAS_ANOMALY == 1
            printk(", ");
#else
            if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
                printk(", ");
    ab6c:	4815      	ldr	r0, [pc, #84]	; (abc4 <main+0xc4>)
    ab6e:	f009 fed6 	bl	1491e <printk>
            ei_printf_float(result.classification[ix].value);
    ab72:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
    ab76:	f7fb f955 	bl	5e24 <_Z15ei_printf_floatf>
                printk(", ");
    ab7a:	4812      	ldr	r0, [pc, #72]	; (abc4 <main+0xc4>)
    ab7c:	f009 fecf 	bl	1491e <printk>
            ei_printf_float(result.classification[ix].value);
    ab80:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
    ab84:	f7fb f94e 	bl	5e24 <_Z15ei_printf_floatf>
#endif
        }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
        ei_printf_float(result.anomaly);
#endif
        printk("]\n");
    ab88:	480f      	ldr	r0, [pc, #60]	; (abc8 <main+0xc8>)
    ab8a:	f009 fec8 	bl	1491e <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    ab8e:	2100      	movs	r1, #0
    ab90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ab94:	f003 fdc6 	bl	e724 <z_impl_k_sleep>
    class function<_Res(_ArgTypes...)>
    ab98:	a801      	add	r0, sp, #4
    ab9a:	f009 fdac 	bl	146f6 <_ZNSt14_Function_baseD1Ev>
    ab9e:	e7c4      	b.n	ab2a <main+0x2a>
    aba0:	a801      	add	r0, sp, #4
    aba2:	f009 fda8 	bl	146f6 <_ZNSt14_Function_baseD1Ev>

        k_msleep(2000);
    }
}
    aba6:	2001      	movs	r0, #1
    aba8:	b01b      	add	sp, #108	; 0x6c
    abaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    abac:	20000384 	.word	0x20000384
    abb0:	00009db5 	.word	0x00009db5
    abb4:	00045d78 	.word	0x00045d78
    abb8:	00045d95 	.word	0x00045d95
    abbc:	00045d4a 	.word	0x00045d4a
    abc0:	00045ddb 	.word	0x00045ddb
    abc4:	00045ddd 	.word	0x00045ddd
    abc8:	00045de0 	.word	0x00045de0

0000abcc <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
    abcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    abd0:	e9d0 9800 	ldrd	r9, r8, [r0]
    abd4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
    abd6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    abda:	eba8 0209 	sub.w	r2, r8, r9
	if (max_size() - size() < __n)
    abde:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
    abe2:	4607      	mov	r7, r0
    abe4:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    abe6:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
    abea:	d102      	bne.n	abf2 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
    abec:	481e      	ldr	r0, [pc, #120]	; (ac68 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x9c>)
    abee:	f00a fe06 	bl	157fe <_ZSt20__throw_length_errorPKc>
    abf2:	2c01      	cmp	r4, #1
    abf4:	4622      	mov	r2, r4
    abf6:	bf38      	it	cc
    abf8:	2201      	movcc	r2, #1
    abfa:	18a4      	adds	r4, r4, r2
    abfc:	eba1 0509 	sub.w	r5, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    ac00:	d22d      	bcs.n	ac5e <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x92>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ac02:	b374      	cbz	r4, ac62 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x96>
    ac04:	429c      	cmp	r4, r3
    ac06:	bf28      	it	cs
    ac08:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    ac0a:	00a0      	lsls	r0, r4, #2
    ac0c:	f00a fde1 	bl	157d2 <_Znwj>
    ac10:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    ac12:	42ee      	cmn	r6, r5
    ac14:	bf1c      	itt	ne
    ac16:	f8db 3000 	ldrne.w	r3, [fp]
    ac1a:	5173      	strne	r3, [r6, r5]
      if (__count > 0)
    ac1c:	2d00      	cmp	r5, #0
    ac1e:	dd04      	ble.n	ac2a <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x5e>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    ac20:	462a      	mov	r2, r5
    ac22:	4649      	mov	r1, r9
    ac24:	4630      	mov	r0, r6
    ac26:	f00a feae 	bl	15986 <memmove>
      ptrdiff_t __count = __last - __first;
    ac2a:	eba8 080a 	sub.w	r8, r8, sl
	      ++__new_finish;
    ac2e:	3504      	adds	r5, #4
      if (__count > 0)
    ac30:	f1b8 0f00 	cmp.w	r8, #0
    ac34:	4435      	add	r5, r6
    ac36:	dd04      	ble.n	ac42 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    ac38:	4642      	mov	r2, r8
    ac3a:	4651      	mov	r1, sl
    ac3c:	4628      	mov	r0, r5
    ac3e:	f00a fe94 	bl	1596a <memcpy>
      return __result + __count;
    ac42:	4445      	add	r5, r8
	if (__p)
    ac44:	f1b9 0f00 	cmp.w	r9, #0
    ac48:	d002      	beq.n	ac50 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x84>
	::operator delete(__p
    ac4a:	4648      	mov	r0, r9
    ac4c:	f00a fdbd 	bl	157ca <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    ac50:	eb06 0484 	add.w	r4, r6, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
    ac54:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    ac58:	60bc      	str	r4, [r7, #8]
    }
    ac5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    ac5e:	461c      	mov	r4, r3
    ac60:	e7d3      	b.n	ac0a <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    ac62:	4626      	mov	r6, r4
    ac64:	e7d5      	b.n	ac12 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0x46>
    ac66:	bf00      	nop
    ac68:	00045857 	.word	0x00045857

0000ac6c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>:
    static int stack_frames(stack_frames_info_t *info,
    ac6c:	b570      	push	{r4, r5, r6, lr}
    ac6e:	ed2d 8b02 	vpush	{d8}
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
    ac72:	6805      	ldr	r5, [r0, #0]
    static int stack_frames(stack_frames_info_t *info,
    ac74:	b084      	sub	sp, #16
    ac76:	4606      	mov	r6, r0
    ac78:	eef0 7a40 	vmov.f32	s15, s0
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
    ac7c:	2d00      	cmp	r5, #0
    ac7e:	d076      	beq.n	ad6e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
    ac80:	68ab      	ldr	r3, [r5, #8]
    ac82:	2b00      	cmp	r3, #0
    ac84:	d073      	beq.n	ad6e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
    ac86:	692c      	ldr	r4, [r5, #16]
    ac88:	2c00      	cmp	r4, #0
    ac8a:	d070      	beq.n	ad6e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x102>
        if (version == 1) {
    ac8c:	2901      	cmp	r1, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
    ac8e:	ee20 0a20 	vmul.f32	s0, s0, s1
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
    ac92:	ee67 8a81 	vmul.f32	s17, s15, s2
        if (version == 1) {
    ac96:	d14b      	bne.n	ad30 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xc4>
    ac98:	f004 f8a6 	bl	ede8 <roundf>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
    ac9c:	eebd 8ac0 	vcvt.s32.f32	s16, s0
    aca0:	eeb0 0a68 	vmov.f32	s0, s17
    aca4:	f004 f8a0 	bl	ede8 <roundf>
            length = frame_sample_length;
    aca8:	ee18 3a10 	vmov	r3, s16
    acac:	eef0 8a40 	vmov.f32	s17, s0
                floor(static_cast<float>(length_signal - length) / frame_stride));
    acb0:	1ae3      	subs	r3, r4, r3
    acb2:	ee00 3a10 	vmov	s0, r3
    acb6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
  { return __builtin_floorf(__x); }
    acba:	ee80 0a28 	vdiv.f32	s0, s0, s17
    acbe:	f004 f82b 	bl	ed18 <floorf>
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
    acc2:	200c      	movs	r0, #12
            numframes = static_cast<int>(
    acc4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    acc8:	ed8d 0a01 	vstr	s0, [sp, #4]
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
    accc:	9b01      	ldr	r3, [sp, #4]
    acce:	3b01      	subs	r3, #1
    acd0:	ee07 3a90 	vmov	s15, r3
    acd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    acd8:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    acdc:	eee8 7a87 	vfma.f32	s15, s17, s14
            len_sig = static_cast<int>(
    ace0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    ace4:	edcd 7a02 	vstr	s15, [sp, #8]
            info->signal->total_length = static_cast<size_t>(len_sig);
    ace8:	9b02      	ldr	r3, [sp, #8]
    acea:	612b      	str	r3, [r5, #16]
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
    acec:	f00a fd71 	bl	157d2 <_Znwj>
    acf0:	4604      	mov	r4, r0
    acf2:	b118      	cbz	r0, acfc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x90>
	: _M_start(), _M_finish(), _M_end_of_storage()
    acf4:	2300      	movs	r3, #0
    acf6:	e9c0 3300 	strd	r3, r3, [r0]
    acfa:	6083      	str	r3, [r0, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
    acfc:	2500      	movs	r5, #0
    acfe:	9503      	str	r5, [sp, #12]
    ad00:	9b03      	ldr	r3, [sp, #12]
    ad02:	9a02      	ldr	r2, [sp, #8]
    ad04:	4293      	cmp	r3, r2
    ad06:	d22a      	bcs.n	ad5e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf2>
            if (++frame_count > numframes) break;
    ad08:	9a01      	ldr	r2, [sp, #4]
    ad0a:	3501      	adds	r5, #1
    ad0c:	4295      	cmp	r5, r2
    ad0e:	dc26      	bgt.n	ad5e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf2>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    ad10:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    ad14:	4291      	cmp	r1, r2
    ad16:	d01d      	beq.n	ad54 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    ad18:	b101      	cbz	r1, ad1c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb0>
    ad1a:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
    ad1c:	3104      	adds	r1, #4
    ad1e:	6061      	str	r1, [r4, #4]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
    ad20:	eefc 7ae8 	vcvt.u32.f32	s15, s17
    ad24:	9b03      	ldr	r3, [sp, #12]
    ad26:	ee17 2a90 	vmov	r2, s15
    ad2a:	4413      	add	r3, r2
    ad2c:	9303      	str	r3, [sp, #12]
    ad2e:	e7e7      	b.n	ad00 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x94>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
    ad30:	f7ff f84e 	bl	9dd0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
    ad34:	eebd 8ac0 	vcvt.s32.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
    ad38:	eeb0 0a68 	vmov.f32	s0, s17
    ad3c:	f7ff f848 	bl	9dd0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            length = (frame_sample_length - (int)frame_stride);
    ad40:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    ad44:	ee18 2a10 	vmov	r2, s16
    ad48:	ee17 3a90 	vmov	r3, s15
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
    ad4c:	eef0 8a40 	vmov.f32	s17, s0
            length = (frame_sample_length - (int)frame_stride);
    ad50:	1ad3      	subs	r3, r2, r3
    ad52:	e7ad      	b.n	acb0 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x44>
	  _M_realloc_insert(end(), __x);
    ad54:	aa03      	add	r2, sp, #12
    ad56:	4620      	mov	r0, r4
    ad58:	f7ff ff38 	bl	abcc <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>
    ad5c:	e7e0      	b.n	ad20 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb4>
        info->frame_ixs = frame_indices;
    ad5e:	6074      	str	r4, [r6, #4]
        info->frame_length = frame_sample_length;
    ad60:	ed86 8a02 	vstr	s16, [r6, #8]
        return EIDSP_OK;
    ad64:	2000      	movs	r0, #0
    }
    ad66:	b004      	add	sp, #16
    ad68:	ecbd 8b02 	vpop	{d8}
    ad6c:	bd70      	pop	{r4, r5, r6, pc}
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
    ad6e:	4801      	ldr	r0, [pc, #4]	; (ad74 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x108>)
    ad70:	e7f9      	b.n	ad66 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xfa>
    ad72:	bf00      	nop
    ad74:	fffffc15 	.word	0xfffffc15

0000ad78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
    ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad7c:	b099      	sub	sp, #100	; 0x64
    ad7e:	4698      	mov	r8, r3
    ad80:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
    ad84:	9306      	str	r3, [sp, #24]
        uint16_t version
        )
    {
        int ret = 0;

        if (high_frequency == 0) {
    ad86:	e9dd 9324 	ldrd	r9, r3, [sp, #144]	; 0x90
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
    ad8a:	f8bd a088 	ldrh.w	sl, [sp, #136]	; 0x88
    ad8e:	4605      	mov	r5, r0
    ad90:	460f      	mov	r7, r1
    ad92:	eeb0 1a60 	vmov.f32	s2, s1
        if (high_frequency == 0) {
    ad96:	b913      	cbnz	r3, ad9e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x26>
            high_frequency = sampling_frequency / 2;
    ad98:	ea4f 0358 	mov.w	r3, r8, lsr #1
    ad9c:	9325      	str	r3, [sp, #148]	; 0x94
        }

        stack_frames_info_t stack_frame_info = { 0 };
        stack_frame_info.signal = signal;

        ret = processing::stack_frames(
    ad9e:	ee07 8a90 	vmov	s15, r8
            low_frequency = 300;
    ada2:	f1b9 0f00 	cmp.w	r9, #0
        stack_frames_info_t stack_frame_info = { 0 };
    ada6:	f04f 0300 	mov.w	r3, #0
        ret = processing::stack_frames(
    adaa:	eef0 0a40 	vmov.f32	s1, s0
    adae:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
        stack_frame_info.signal = signal;
    adb2:	9208      	str	r2, [sp, #32]
        ret = processing::stack_frames(
    adb4:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    adb8:	a808      	add	r0, sp, #32
        stack_frames_info_t stack_frame_info = { 0 };
    adba:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
            low_frequency = 300;
    adbe:	bf08      	it	eq
    adc0:	f44f 7996 	moveq.w	r9, #300	; 0x12c
        ret = processing::stack_frames(
    adc4:	f7ff ff52 	bl	ac6c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
    adc8:	4604      	mov	r4, r0
    adca:	2800      	cmp	r0, #0
    adcc:	f040 80e4 	bne.w	af98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x220>
            EIDSP_ERR(ret);
        }

        if (stack_frame_info.frame_ixs->size() != out_features->rows) {
    add0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    add2:	6869      	ldr	r1, [r5, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    add4:	e9d2 2300 	ldrd	r2, r3, [r2]
    add8:	1a9b      	subs	r3, r3, r2
    adda:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
    adde:	f040 80ed 	bne.w	afbc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (num_filters != out_features->cols) {
    ade2:	f8d5 b008 	ldr.w	fp, [r5, #8]
    ade6:	45da      	cmp	sl, fp
    ade8:	f040 80e8 	bne.w	afbc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (stack_frame_info.frame_ixs->size() != out_energies->rows || out_energies->cols != 1) {
    adec:	687a      	ldr	r2, [r7, #4]
    adee:	428a      	cmp	r2, r1
    adf0:	f040 80e4 	bne.w	afbc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
    adf4:	68b9      	ldr	r1, [r7, #8]
    adf6:	2901      	cmp	r1, #1
    adf8:	f040 80e0 	bne.w	afbc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x244>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    adfc:	fb02 f20a 	mul.w	r2, r2, sl
            *(out_features->buffer + i) = 0;
    ae00:	2000      	movs	r0, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    ae02:	42a2      	cmp	r2, r4
    ae04:	d005      	beq.n	ae12 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x9a>
            *(out_features->buffer + i) = 0;
    ae06:	6829      	ldr	r1, [r5, #0]
    ae08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    ae0c:	3401      	adds	r4, #1
            *(out_features->buffer + i) = 0;
    ae0e:	6008      	str	r0, [r1, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
    ae10:	e7f7      	b.n	ae02 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x8a>
        }

        uint16_t coefficients = fft_length / 2 + 1;
    ae12:	9b06      	ldr	r3, [sp, #24]
    ae14:	0858      	lsrs	r0, r3, #1
    ae16:	1c46      	adds	r6, r0, #1
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
    ae18:	2101      	movs	r1, #1
    ae1a:	fb00 b00b 	mla	r0, r0, fp, fp
    ae1e:	f006 fb27 	bl	11470 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
        }
        rows = n_rows;
        cols = n_cols;
        dequantization_fn = a_dequantization_fn;
    ae22:	4b67      	ldr	r3, [pc, #412]	; (afc0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x248>)
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
    ae24:	9013      	str	r0, [sp, #76]	; 0x4c
            buffer_managed_by_me = true;
    ae26:	2201      	movs	r2, #1
        cols = n_cols;
    ae28:	e9cd b614 	strd	fp, r6, [sp, #80]	; 0x50
            buffer_managed_by_me = true;
    ae2c:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
        dequantization_fn = a_dequantization_fn;
    ae30:	9317      	str	r3, [sp, #92]	; 0x5c

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
    ae32:	2800      	cmp	r0, #0
    ae34:	f000 80c0 	beq.w	afb8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x240>
#endif
        if (!filterbanks.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        ret = feature::filterbanks(
    ae38:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ae3a:	9202      	str	r2, [sp, #8]
    ae3c:	e9cd 9300 	strd	r9, r3, [sp]
    ae40:	4632      	mov	r2, r6
    ae42:	4643      	mov	r3, r8
    ae44:	4651      	mov	r1, sl
    ae46:	a813      	add	r0, sp, #76	; 0x4c
    ae48:	f7f7 f866 	bl	1f18 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtijjjb>
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
    ae4c:	4604      	mov	r4, r0
    ae4e:	2800      	cmp	r0, #0
    ae50:	f040 809b 	bne.w	af8a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x212>
            EIDSP_ERR(ret);
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
    ae54:	4680      	mov	r8, r0
    ae56:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ae58:	e9d2 2300 	ldrd	r2, r3, [r2]
    ae5c:	1a9b      	subs	r3, r3, r2
    ae5e:	ebb8 0fa3 	cmp.w	r8, r3, asr #2
    ae62:	f080 80a5 	bcs.w	afb0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x238>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    ae66:	2300      	movs	r3, #0
    ae68:	4632      	mov	r2, r6
    ae6a:	2101      	movs	r1, #1
    ae6c:	a80b      	add	r0, sp, #44	; 0x2c
    ae6e:	f009 fc4b 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    ae72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae74:	2b00      	cmp	r3, #0
    ae76:	f000 8099 	beq.w	afac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x234>
            if (!power_spectrum_frame.buffer) {
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    ae7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae7c:	2300      	movs	r3, #0
    ae7e:	2101      	movs	r1, #1
    ae80:	a80f      	add	r0, sp, #60	; 0x3c
    ae82:	f009 fc41 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    ae86:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    ae8a:	f1b9 0f00 	cmp.w	r9, #0
    ae8e:	d073      	beq.n	af78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x200>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
    ae90:	9809      	ldr	r0, [sp, #36]	; 0x24
    ae92:	4641      	mov	r1, r8
    ae94:	f7ff fc7a 	bl	a78c <_ZNSt6vectorIjSaIjEE2atEj>
    ae98:	6801      	ldr	r1, [r0, #0]
            size_t signal_length = stack_frame_info.frame_length;
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
    ae9a:	9808      	ldr	r0, [sp, #32]
            size_t signal_length = stack_frame_info.frame_length;
    ae9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
    ae9e:	f8d0 c010 	ldr.w	ip, [r0, #16]
    aea2:	188b      	adds	r3, r1, r2
    aea4:	4563      	cmp	r3, ip
                signal_length = signal_length -
    aea6:	bf84      	itt	hi
    aea8:	eba2 020c 	subhi.w	r2, r2, ip
    aeac:	18d2      	addhi	r2, r2, r3
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
            }

            ret = stack_frame_info.signal->get_data(
    aeae:	464b      	mov	r3, r9
    aeb0:	f009 fc6b 	bl	1478a <_ZNKSt8functionIFijjPfEEclEjjS0_>
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
    aeb4:	4682      	mov	sl, r0
    aeb6:	2800      	cmp	r0, #0
    aeb8:	d160      	bne.n	af7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x204>
                EIDSP_ERR(ret);
            }

            ret = processing::power_spectrum(
    aeba:	9b06      	ldr	r3, [sp, #24]
    aebc:	9300      	str	r3, [sp, #0]
    aebe:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    aec2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    aec4:	4633      	mov	r3, r6
    aec6:	f7ff f9bb 	bl	a240 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
    aeca:	4682      	mov	sl, r0
    aecc:	2800      	cmp	r0, #0
    aece:	d155      	bne.n	af7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x204>
                EIDSP_ERR(ret);
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
    aed0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
        float res = 0.0f;
    aed4:	eddf 7a3b 	vldr	s15, [pc, #236]	; afc4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x24c>
    aed8:	464b      	mov	r3, r9
            res += input_array[ix];
    aeda:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
    aede:	f10a 0a01 	add.w	sl, sl, #1
    aee2:	4556      	cmp	r6, sl
            res += input_array[ix];
    aee4:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
    aee8:	d8f7      	bhi.n	aeda <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x162>
            if (energy == 0) {
    aeea:	eef5 7a40 	vcmp.f32	s15, #0.0
                energy = 1e-10;
            }

            out_energies->buffer[ix] = energy;
    aeee:	683b      	ldr	r3, [r7, #0]
            if (energy == 0) {
    aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
    aef4:	bf08      	it	eq
    aef6:	eddf 7a34 	vldreq	s15, [pc, #208]	; afc8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x250>
            out_energies->buffer[ix] = energy;
    aefa:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    aefe:	edc3 7a00 	vstr	s15, [r3]
        if (matrix1_cols != matrix2->rows) {
    af02:	9b14      	ldr	r3, [sp, #80]	; 0x50
    af04:	429e      	cmp	r6, r3
    af06:	d14e      	bne.n	afa6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x22e>
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    af08:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    af0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    af0e:	9307      	str	r3, [sp, #28]
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
    af10:	fb0c fb08 	mul.w	fp, ip, r8
    af14:	2300      	movs	r3, #0
    af16:	9305      	str	r3, [sp, #20]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    af18:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    af1c:	459c      	cmp	ip, r3
    af1e:	d922      	bls.n	af66 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1ee>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    af20:	9907      	ldr	r1, [sp, #28]
            float tmp = 0.0;
    af22:	eddf 7a28 	vldr	s15, [pc, #160]	; afc4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x24c>
    af26:	2200      	movs	r2, #0
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    af28:	eb01 0a03 	add.w	sl, r1, r3
            for (uint16_t k = 0; k < matrix1_cols; k++) {
    af2c:	4296      	cmp	r6, r2
    af2e:	d911      	bls.n	af54 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1dc>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
    af30:	fb02 f10c 	mul.w	r1, r2, ip
    af34:	f81a 1001 	ldrb.w	r1, [sl, r1]
                if (u8) { // this matrix appears to be very sparsely populated
    af38:	b151      	cbz	r1, af50 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1d8>
                    tmp += row[k] * quantized_values_one_zero[u8];
    af3a:	4824      	ldr	r0, [pc, #144]	; (afcc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x254>)
    af3c:	eb09 0e82 	add.w	lr, r9, r2, lsl #2
    af40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    af44:	edde 6a00 	vldr	s13, [lr]
    af48:	ed91 7a00 	vldr	s14, [r1]
    af4c:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (uint16_t k = 0; k < matrix1_cols; k++) {
    af50:	3201      	adds	r2, #1
    af52:	e7eb      	b.n	af2c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x1b4>
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
    af54:	682a      	ldr	r2, [r5, #0]
    af56:	445b      	add	r3, fp
    af58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    af5c:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
    af60:	9b05      	ldr	r3, [sp, #20]
    af62:	3301      	adds	r3, #1
    af64:	e7d7      	b.n	af16 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x19e>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    af66:	a80f      	add	r0, sp, #60	; 0x3c
    af68:	f006 fa34 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    af6c:	a80b      	add	r0, sp, #44	; 0x2c
    af6e:	f006 fa31 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
    af72:	f108 0801 	add.w	r8, r8, #1
    af76:	e76e      	b.n	ae56 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0xde>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
    af78:	f8df a054 	ldr.w	sl, [pc, #84]	; afd0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x258>
    af7c:	a80f      	add	r0, sp, #60	; 0x3c
    af7e:	f006 fa29 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    af82:	4654      	mov	r4, sl
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    af84:	a80b      	add	r0, sp, #44	; 0x2c
    af86:	f006 fa25 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
#endif
        }
    }

    ~ei_quantized_matrix() {
        if (buffer && buffer_managed_by_me) {
    af8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    af8c:	b120      	cbz	r0, af98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x220>
    af8e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    af92:	b10b      	cbz	r3, af98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x220>
            ei_free(buffer);
    af94:	f006 fa6e 	bl	11474 <_Z7ei_freePv>
        stack_frames_info_t stack_frame_info = { 0 };
    af98:	a808      	add	r0, sp, #32
    af9a:	f009 fbdd 	bl	14758 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
        }

        functions::zero_handling(out_features);

        return EIDSP_OK;
    }
    af9e:	4620      	mov	r0, r4
    afa0:	b019      	add	sp, #100	; 0x64
    afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    afa6:	f8df a02c 	ldr.w	sl, [pc, #44]	; afd4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x25c>
    afaa:	e7e7      	b.n	af7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x204>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
    afac:	4c08      	ldr	r4, [pc, #32]	; (afd0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x258>)
    afae:	e7e9      	b.n	af84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x20c>
        functions::zero_handling(out_features);
    afb0:	4628      	mov	r0, r5
    afb2:	f7ff fa93 	bl	a4dc <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
    afb6:	e7e8      	b.n	af8a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x212>
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
    afb8:	4c05      	ldr	r4, [pc, #20]	; (afd0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x258>)
    afba:	e7e6      	b.n	af8a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x212>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    afbc:	4c05      	ldr	r4, [pc, #20]	; (afd4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x25c>)
    afbe:	e7eb      	b.n	af98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt+0x220>
    afc0:	00009da5 	.word	0x00009da5
    afc4:	00000000 	.word	0x00000000
    afc8:	2edbe6ff 	.word	0x2edbe6ff
    afcc:	0003f158 	.word	0x0003f158
    afd0:	fffffc16 	.word	0xfffffc16
    afd4:	fffffc14 	.word	0xfffffc14

0000afd8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afdc:	ed2d 8b02 	vpush	{d8}
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    afe0:	e9d2 8304 	ldrd	r8, r3, [r2, #16]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    afe4:	b097      	sub	sp, #92	; 0x5c
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    afe6:	8817      	ldrh	r7, [r2, #0]
    afe8:	9307      	str	r3, [sp, #28]
    afea:	6993      	ldr	r3, [r2, #24]
    afec:	9308      	str	r3, [sp, #32]
    afee:	69d3      	ldr	r3, [r2, #28]
    aff0:	9309      	str	r3, [sp, #36]	; 0x24
    aff2:	6a13      	ldr	r3, [r2, #32]
    aff4:	930a      	str	r3, [sp, #40]	; 0x28
    if (config.axes != 1) {
    aff6:	6853      	ldr	r3, [r2, #4]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
    aff8:	ed92 8a02 	vldr	s16, [r2, #8]
    affc:	edd2 8a03 	vldr	s17, [r2, #12]
    b000:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
    if (config.axes != 1) {
    b004:	2b01      	cmp	r3, #1
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
    b006:	4606      	mov	r6, r0
    b008:	460c      	mov	r4, r1
    if (config.axes != 1) {
    b00a:	f040 80ae 	bne.w	b16a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x192>
    if (signal->total_length == 0) {
    b00e:	6902      	ldr	r2, [r0, #16]
    b010:	2a00      	cmp	r2, #0
    b012:	f000 80ac 	beq.w	b16e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
    b016:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    _Function_base() : _M_manager(nullptr) { }
    b01a:	2100      	movs	r1, #0
    if (config.implementation_version < 3) {
    b01c:	2f02      	cmp	r7, #2
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
    b01e:	ee17 5a90 	vmov	r5, s15
    b022:	f8df a158 	ldr.w	sl, [pc, #344]	; b17c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>
    b026:	9113      	str	r1, [sp, #76]	; 0x4c
    if (config.implementation_version < 3) {
    b028:	d82d      	bhi.n	b086 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        preemphasis = nullptr;
    b02a:	f8ca 1000 	str.w	r1, [sl]
        preemphasized_audio_signal.get_data = signal->get_data;
    b02e:	4601      	mov	r1, r0
    b030:	a811      	add	r0, sp, #68	; 0x44
        preemphasized_audio_signal.total_length = signal->total_length;
    b032:	9215      	str	r2, [sp, #84]	; 0x54
        preemphasized_audio_signal.get_data = signal->get_data;
    b034:	f009 fc3b 	bl	148ae <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
    b038:	463a      	mov	r2, r7
    b03a:	4629      	mov	r1, r5
    b03c:	9815      	ldr	r0, [sp, #84]	; 0x54
    b03e:	eef0 0a68 	vmov.f32	s1, s17
    b042:	eeb0 0a48 	vmov.f32	s0, s16
    b046:	f009 fad6 	bl	145f6 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0>
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
    b04a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    b04e:	fa1f fa88 	uxth.w	sl, r8
    b052:	fb0a f900 	mul.w	r9, sl, r0
    b056:	fb02 f301 	mul.w	r3, r2, r1
    b05a:	4599      	cmp	r9, r3
    b05c:	4606      	mov	r6, r0
    b05e:	d928      	bls.n	b0b2 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xda>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
    b060:	4844      	ldr	r0, [pc, #272]	; (b174 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
    b062:	f7fa fec5 	bl	5df0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
    b066:	4844      	ldr	r0, [pc, #272]	; (b178 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>)
    b068:	4652      	mov	r2, sl
    b06a:	4631      	mov	r1, r6
    b06c:	f7fa fec0 	bl	5df0 <_Z9ei_printfPKcz>
        if (preemphasis) {
    b070:	4b42      	ldr	r3, [pc, #264]	; (b17c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
    b072:	681c      	ldr	r4, [r3, #0]
    b074:	b12c      	cbz	r4, b082 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xaa>
            delete preemphasis;
    b076:	4620      	mov	r0, r4
    b078:	f009 fb7b 	bl	14772 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    b07c:	4620      	mov	r0, r4
    b07e:	f00a fba4 	bl	157ca <_ZdlPv>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    b082:	4d3f      	ldr	r5, [pc, #252]	; (b180 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
    b084:	e047      	b.n	b116 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13e>
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
    b086:	201c      	movs	r0, #28
    b088:	930b      	str	r3, [sp, #44]	; 0x2c
    b08a:	f00a fba2 	bl	157d2 <_Znwj>
    b08e:	4681      	mov	r9, r0
    b090:	b130      	cbz	r0, b0a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>
    b092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b094:	ed9f 0a3b 	vldr	s0, [pc, #236]	; b184 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ac>
    b098:	461a      	mov	r2, r3
    b09a:	4631      	mov	r1, r6
    b09c:	f009 fb84 	bl	147a8 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
        preemphasized_audio_signal.total_length = signal->total_length;
    b0a0:	6933      	ldr	r3, [r6, #16]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    b0a2:	4939      	ldr	r1, [pc, #228]	; (b188 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>)
        preemphasis = pre;
    b0a4:	f8ca 9000 	str.w	r9, [sl]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    b0a8:	a811      	add	r0, sp, #68	; 0x44
        preemphasized_audio_signal.total_length = signal->total_length;
    b0aa:	9315      	str	r3, [sp, #84]	; 0x54
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
    b0ac:	f7ff fd10 	bl	aad0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
    b0b0:	e7c2      	b.n	b038 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
    output_matrix->cols = out_matrix_size.cols;
    b0b2:	e9c4 0a01 	strd	r0, sl, [r4, #4]
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    b0b6:	2300      	movs	r3, #0
    b0b8:	4601      	mov	r1, r0
    b0ba:	2201      	movs	r2, #1
    b0bc:	a80d      	add	r0, sp, #52	; 0x34
    b0be:	f009 fb23 	bl	14708 <_ZN2ei9ei_matrixC1EjjPf>
    b0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b0c4:	2b00      	cmp	r3, #0
    b0c6:	d04e      	beq.n	b166 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18e>
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
    b0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0ca:	9303      	str	r3, [sp, #12]
    b0cc:	9b08      	ldr	r3, [sp, #32]
    b0ce:	9302      	str	r3, [sp, #8]
    b0d0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    b0d4:	9301      	str	r3, [sp, #4]
    b0d6:	fa1f f388 	uxth.w	r3, r8
    b0da:	9300      	str	r3, [sp, #0]
    b0dc:	9704      	str	r7, [sp, #16]
    b0de:	462b      	mov	r3, r5
    b0e0:	eef0 0a68 	vmov.f32	s1, s17
    b0e4:	eeb0 0a48 	vmov.f32	s0, s16
    b0e8:	aa11      	add	r2, sp, #68	; 0x44
    b0ea:	a90d      	add	r1, sp, #52	; 0x34
    b0ec:	4620      	mov	r0, r4
    b0ee:	f7ff fe43 	bl	ad78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEjffttjjt>
    if (preemphasis) {
    b0f2:	4b22      	ldr	r3, [pc, #136]	; (b17c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
    b0f4:	681e      	ldr	r6, [r3, #0]
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
    b0f6:	4605      	mov	r5, r0
    if (preemphasis) {
    b0f8:	b12e      	cbz	r6, b106 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12e>
        delete preemphasis;
    b0fa:	4630      	mov	r0, r6
    b0fc:	f009 fb39 	bl	14772 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    b100:	4630      	mov	r0, r6
    b102:	f00a fb62 	bl	157ca <_ZdlPv>
    if (ret != EIDSP_OK) {
    b106:	b17d      	cbz	r5, b128 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x150>
        ei_printf("ERR: MFE failed (%d)\n", ret);
    b108:	4820      	ldr	r0, [pc, #128]	; (b18c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>)
    b10a:	4629      	mov	r1, r5
    b10c:	f7fa fe70 	bl	5df0 <_Z9ei_printfPKcz>
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    b110:	a80d      	add	r0, sp, #52	; 0x34
    b112:	f006 f95f 	bl	113d4 <_ZN2ei9ei_matrixD1Ev>
    class function<_Res(_ArgTypes...)>
    b116:	a811      	add	r0, sp, #68	; 0x44
    b118:	f009 faed 	bl	146f6 <_ZNSt14_Function_baseD1Ev>
}
    b11c:	4628      	mov	r0, r5
    b11e:	b017      	add	sp, #92	; 0x5c
    b120:	ecbd 8b02 	vpop	{d8}
    b124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (config.implementation_version < 3) {
    b128:	2f02      	cmp	r7, #2
    b12a:	d80e      	bhi.n	b14a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x172>
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
    b12c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    b130:	2301      	movs	r3, #1
    b132:	462a      	mov	r2, r5
    b134:	4620      	mov	r0, r4
    b136:	f7f6 fddb 	bl	1cf0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
        if (ret != EIDSP_OK) {
    b13a:	4606      	mov	r6, r0
    b13c:	b170      	cbz	r0, b15c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
    b13e:	4601      	mov	r1, r0
    b140:	4813      	ldr	r0, [pc, #76]	; (b190 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>)
            ei_printf("ERR: normalization failed (%d)\n", ret);
    b142:	f7fa fe55 	bl	5df0 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
    b146:	4635      	mov	r5, r6
    b148:	e7e2      	b.n	b110 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
    b14a:	4659      	mov	r1, fp
    b14c:	4620      	mov	r0, r4
    b14e:	f7f6 fb9f 	bl	1890 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
    b152:	4606      	mov	r6, r0
    b154:	b110      	cbz	r0, b15c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            ei_printf("ERR: normalization failed (%d)\n", ret);
    b156:	4601      	mov	r1, r0
    b158:	480e      	ldr	r0, [pc, #56]	; (b194 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
    b15a:	e7f2      	b.n	b142 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16a>
    output_matrix->rows = 1;
    b15c:	2301      	movs	r3, #1
    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
    b15e:	f8c4 9008 	str.w	r9, [r4, #8]
    output_matrix->rows = 1;
    b162:	6063      	str	r3, [r4, #4]
    return EIDSP_OK;
    b164:	e7d4      	b.n	b110 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
    b166:	4d0c      	ldr	r5, [pc, #48]	; (b198 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
    b168:	e7d2      	b.n	b110 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
    b16a:	4d05      	ldr	r5, [pc, #20]	; (b180 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
    b16c:	e7d6      	b.n	b11c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
    b16e:	4d0b      	ldr	r5, [pc, #44]	; (b19c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>)
    b170:	e7d4      	b.n	b11c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
    b172:	bf00      	nop
    b174:	00045de3 	.word	0x00045de3
    b178:	00045df7 	.word	0x00045df7
    b17c:	2000119c 	.word	0x2000119c
    b180:	fffffc14 	.word	0xfffffc14
    b184:	3f7ae148 	.word	0x3f7ae148
    b188:	0000a629 	.word	0x0000a629
    b18c:	00045e10 	.word	0x00045e10
    b190:	00045cf7 	.word	0x00045cf7
    b194:	00045d0f 	.word	0x00045d0f
    b198:	fffffc16 	.word	0xfffffc16
    b19c:	fffffc10 	.word	0xfffffc10

0000b1a0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    b1a0:	680b      	ldr	r3, [r1, #0]
    b1a2:	3301      	adds	r3, #1
    b1a4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    b1a6:	4b01      	ldr	r3, [pc, #4]	; (b1ac <char_out+0xc>)
    b1a8:	681b      	ldr	r3, [r3, #0]
    b1aa:	4718      	bx	r3
    b1ac:	20000270 	.word	0x20000270

0000b1b0 <__printk_hook_install>:
	_char_out = fn;
    b1b0:	4b01      	ldr	r3, [pc, #4]	; (b1b8 <__printk_hook_install+0x8>)
    b1b2:	6018      	str	r0, [r3, #0]
}
    b1b4:	4770      	bx	lr
    b1b6:	bf00      	nop
    b1b8:	20000270 	.word	0x20000270

0000b1bc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    b1bc:	b507      	push	{r0, r1, r2, lr}
    b1be:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    b1c0:	2100      	movs	r1, #0
{
    b1c2:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    b1c4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    b1c6:	4803      	ldr	r0, [pc, #12]	; (b1d4 <vprintk+0x18>)
    b1c8:	a901      	add	r1, sp, #4
    b1ca:	f7f7 f86d 	bl	22a8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    b1ce:	b003      	add	sp, #12
    b1d0:	f85d fb04 	ldr.w	pc, [sp], #4
    b1d4:	0000b1a1 	.word	0x0000b1a1

0000b1d8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    b1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b1dc:	f8b0 901c 	ldrh.w	r9, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    b1e0:	f019 0808 	ands.w	r8, r9, #8
{
    b1e4:	4604      	mov	r4, r0
    b1e6:	4693      	mov	fp, r2
	if (processing) {
    b1e8:	d00e      	beq.n	b208 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    b1ea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    b1ec:	bf0c      	ite	eq
    b1ee:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    b1f2:	f049 0920 	orrne.w	r9, r9, #32
    b1f6:	f8a0 901c 	strh.w	r9, [r0, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    b1fa:	f38b 8811 	msr	BASEPRI, fp
    b1fe:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    b202:	b003      	add	sp, #12
    b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    b208:	f8df a190 	ldr.w	sl, [pc, #400]	; b39c <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b20c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    b210:	2902      	cmp	r1, #2
    b212:	d107      	bne.n	b224 <process_event+0x4c>
			evt = process_recheck(mgr);
    b214:	4620      	mov	r0, r4
    b216:	f009 fb8f 	bl	14938 <process_recheck>
		if (evt == EVT_NOP) {
    b21a:	2800      	cmp	r0, #0
    b21c:	d0ed      	beq.n	b1fa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    b21e:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b220:	8ba3      	ldrh	r3, [r4, #28]
		if (evt == EVT_COMPLETE) {
    b222:	d14b      	bne.n	b2bc <process_event+0xe4>
			res = mgr->last_res;
    b224:	69a7      	ldr	r7, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b226:	8ba1      	ldrh	r1, [r4, #28]
	if (res < 0) {
    b228:	2f00      	cmp	r7, #0
    b22a:	da15      	bge.n	b258 <process_event+0x80>
		*clients = mgr->clients;
    b22c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b22e:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    b232:	e9c4 8800 	strd	r8, r8, [r4]
    b236:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    b23a:	83a1      	strh	r1, [r4, #28]
		onoff_transition_fn transit = NULL;
    b23c:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    b23e:	8ba1      	ldrh	r1, [r4, #28]
    b240:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    b244:	454a      	cmp	r2, r9
    b246:	d002      	beq.n	b24e <process_event+0x76>
		if (do_monitors
    b248:	68a3      	ldr	r3, [r4, #8]
    b24a:	2b00      	cmp	r3, #0
    b24c:	d157      	bne.n	b2fe <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    b24e:	b90d      	cbnz	r5, b254 <process_event+0x7c>
		    || (transit != NULL)) {
    b250:	2e00      	cmp	r6, #0
    b252:	d06f      	beq.n	b334 <process_event+0x15c>
    b254:	2300      	movs	r3, #0
    b256:	e053      	b.n	b300 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b258:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    b25c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    b25e:	2a01      	cmp	r2, #1
    b260:	d81d      	bhi.n	b29e <process_event+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b262:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    b266:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    b268:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b26a:	b289      	uxth	r1, r1
    b26c:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    b270:	d10a      	bne.n	b288 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    b272:	b13d      	cbz	r5, b284 <process_event+0xac>
    b274:	8be3      	ldrh	r3, [r4, #30]
    b276:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    b278:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    b27a:	3301      	adds	r3, #1
    b27c:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    b27e:	2a00      	cmp	r2, #0
    b280:	d1fa      	bne.n	b278 <process_event+0xa0>
    b282:	83e3      	strh	r3, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b284:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    b288:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    b28a:	4620      	mov	r0, r4
    b28c:	f009 fb54 	bl	14938 <process_recheck>
    b290:	2800      	cmp	r0, #0
    b292:	d0d3      	beq.n	b23c <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b294:	8ba3      	ldrh	r3, [r4, #28]
    b296:	f043 0320 	orr.w	r3, r3, #32
    b29a:	83a3      	strh	r3, [r4, #28]
    b29c:	e7ce      	b.n	b23c <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    b29e:	2b04      	cmp	r3, #4
    b2a0:	d10a      	bne.n	b2b8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2a2:	f021 0107 	bic.w	r1, r1, #7
    b2a6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    b2a8:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    b2aa:	4620      	mov	r0, r4
    b2ac:	f009 fb44 	bl	14938 <process_recheck>
    b2b0:	b110      	cbz	r0, b2b8 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b2b2:	f041 0120 	orr.w	r1, r1, #32
    b2b6:	83a1      	strh	r1, [r4, #28]
    b2b8:	2500      	movs	r5, #0
    b2ba:	e7bf      	b.n	b23c <process_event+0x64>
		} else if (evt == EVT_START) {
    b2bc:	2803      	cmp	r0, #3
    b2be:	d109      	bne.n	b2d4 <process_event+0xfc>
			transit = mgr->transitions->start;
    b2c0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2c2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    b2c6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2c8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    b2cc:	83a3      	strh	r3, [r4, #28]
}
    b2ce:	2500      	movs	r5, #0
		res = 0;
    b2d0:	462f      	mov	r7, r5
    b2d2:	e7b4      	b.n	b23e <process_event+0x66>
		} else if (evt == EVT_STOP) {
    b2d4:	2804      	cmp	r0, #4
    b2d6:	d106      	bne.n	b2e6 <process_event+0x10e>
			transit = mgr->transitions->stop;
    b2d8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2da:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    b2de:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2e0:	f043 0304 	orr.w	r3, r3, #4
    b2e4:	e7f2      	b.n	b2cc <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    b2e6:	2805      	cmp	r0, #5
    b2e8:	d106      	bne.n	b2f8 <process_event+0x120>
			transit = mgr->transitions->reset;
    b2ea:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2ec:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    b2f0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b2f2:	f043 0305 	orr.w	r3, r3, #5
    b2f6:	e7e9      	b.n	b2cc <process_event+0xf4>
    b2f8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    b2fa:	462e      	mov	r6, r5
    b2fc:	e7e8      	b.n	b2d0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    b2fe:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    b300:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    b304:	83a1      	strh	r1, [r4, #28]
    b306:	f38b 8811 	msr	BASEPRI, fp
    b30a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    b30e:	bb03      	cbnz	r3, b352 <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
    b310:	2d00      	cmp	r5, #0
    b312:	d131      	bne.n	b378 <process_event+0x1a0>
			if (transit != NULL) {
    b314:	b116      	cbz	r6, b31c <process_event+0x144>
				transit(mgr, transition_complete);
    b316:	4651      	mov	r1, sl
    b318:	4620      	mov	r0, r4
    b31a:	47b0      	blx	r6
	__asm__ volatile(
    b31c:	f04f 0320 	mov.w	r3, #32
    b320:	f3ef 8b11 	mrs	fp, BASEPRI
    b324:	f383 8812 	msr	BASEPRI_MAX, r3
    b328:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    b32c:	8ba3      	ldrh	r3, [r4, #28]
    b32e:	f023 0308 	bic.w	r3, r3, #8
    b332:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    b334:	8ba3      	ldrh	r3, [r4, #28]
    b336:	06da      	lsls	r2, r3, #27
    b338:	d527      	bpl.n	b38a <process_event+0x1b2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    b33a:	f023 0310 	bic.w	r3, r3, #16
    b33e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    b340:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    b342:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    b346:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    b34a:	2900      	cmp	r1, #0
    b34c:	f47f af60 	bne.w	b210 <process_event+0x38>
out:
    b350:	e753      	b.n	b1fa <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    b352:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b354:	2900      	cmp	r1, #0
    b356:	d0db      	beq.n	b310 <process_event+0x138>
	return node->next;
    b358:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    b35c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    b360:	9201      	str	r2, [sp, #4]
    b362:	463b      	mov	r3, r7
    b364:	4620      	mov	r0, r4
    b366:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b368:	9a01      	ldr	r2, [sp, #4]
    b36a:	f1b9 0f00 	cmp.w	r9, #0
    b36e:	d0cf      	beq.n	b310 <process_event+0x138>
    b370:	4649      	mov	r1, r9
    b372:	f8d9 9000 	ldr.w	r9, [r9]
    b376:	e7f1      	b.n	b35c <process_event+0x184>
    b378:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    b37a:	463b      	mov	r3, r7
    b37c:	4620      	mov	r0, r4
    b37e:	9201      	str	r2, [sp, #4]
    b380:	682d      	ldr	r5, [r5, #0]
    b382:	f009 faf5 	bl	14970 <notify_one>
	while (!sys_slist_is_empty(list)) {
    b386:	9a01      	ldr	r2, [sp, #4]
    b388:	e7c2      	b.n	b310 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    b38a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    b38e:	bf1e      	ittt	ne
    b390:	f023 0320 	bicne.w	r3, r3, #32
    b394:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    b396:	2102      	movne	r1, #2
    b398:	e7d3      	b.n	b342 <process_event+0x16a>
    b39a:	bf00      	nop
    b39c:	0001499d 	.word	0x0001499d

0000b3a0 <extract_decimal>:
{
    b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
    b3a2:	4e09      	ldr	r6, [pc, #36]	; (b3c8 <extract_decimal+0x28>)
    b3a4:	6801      	ldr	r1, [r0, #0]
{
    b3a6:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    b3a8:	270a      	movs	r7, #10
	size_t val = 0;
    b3aa:	2000      	movs	r0, #0
    b3ac:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    b3ae:	3101      	adds	r1, #1
    b3b0:	7823      	ldrb	r3, [r4, #0]
    b3b2:	5d9d      	ldrb	r5, [r3, r6]
    b3b4:	076d      	lsls	r5, r5, #29
    b3b6:	d401      	bmi.n	b3bc <extract_decimal+0x1c>
	*str = sp;
    b3b8:	6014      	str	r4, [r2, #0]
}
    b3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    b3bc:	fb07 3300 	mla	r3, r7, r0, r3
    b3c0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    b3c4:	e7f2      	b.n	b3ac <extract_decimal+0xc>
    b3c6:	bf00      	nop
    b3c8:	00046011 	.word	0x00046011

0000b3cc <encode_uint>:
{
    b3cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3d0:	4615      	mov	r5, r2
    b3d2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    b3d4:	78d3      	ldrb	r3, [r2, #3]
    b3d6:	4a22      	ldr	r2, [pc, #136]	; (b460 <encode_uint+0x94>)
    b3d8:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
    b3dc:	2b6f      	cmp	r3, #111	; 0x6f
{
    b3de:	4680      	mov	r8, r0
    b3e0:	460f      	mov	r7, r1
    b3e2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    b3e6:	d029      	beq.n	b43c <encode_uint+0x70>
    b3e8:	d824      	bhi.n	b434 <encode_uint+0x68>
		return 16;
    b3ea:	2b58      	cmp	r3, #88	; 0x58
    b3ec:	bf14      	ite	ne
    b3ee:	260a      	movne	r6, #10
    b3f0:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    b3f2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    b3f6:	4632      	mov	r2, r6
    b3f8:	2300      	movs	r3, #0
    b3fa:	4640      	mov	r0, r8
    b3fc:	4639      	mov	r1, r7
    b3fe:	f7f5 fbed 	bl	bdc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b402:	2a09      	cmp	r2, #9
    b404:	b2d4      	uxtb	r4, r2
    b406:	d81e      	bhi.n	b446 <encode_uint+0x7a>
    b408:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    b40a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b40c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    b40e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b412:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    b416:	d301      	bcc.n	b41c <encode_uint+0x50>
    b418:	45d1      	cmp	r9, sl
    b41a:	d811      	bhi.n	b440 <encode_uint+0x74>
	if (conv->flag_hash) {
    b41c:	782b      	ldrb	r3, [r5, #0]
    b41e:	069b      	lsls	r3, r3, #26
    b420:	d505      	bpl.n	b42e <encode_uint+0x62>
		if (radix == 8) {
    b422:	2e08      	cmp	r6, #8
    b424:	d115      	bne.n	b452 <encode_uint+0x86>
			conv->altform_0 = true;
    b426:	78ab      	ldrb	r3, [r5, #2]
    b428:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    b42c:	70ab      	strb	r3, [r5, #2]
}
    b42e:	4648      	mov	r0, r9
    b430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    b434:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    b438:	2b70      	cmp	r3, #112	; 0x70
    b43a:	e7d7      	b.n	b3ec <encode_uint+0x20>
	switch (specifier) {
    b43c:	2608      	movs	r6, #8
    b43e:	e7d8      	b.n	b3f2 <encode_uint+0x26>
		value /= radix;
    b440:	4680      	mov	r8, r0
    b442:	460f      	mov	r7, r1
    b444:	e7d7      	b.n	b3f6 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b446:	f1bb 0f01 	cmp.w	fp, #1
    b44a:	bf0c      	ite	eq
    b44c:	3437      	addeq	r4, #55	; 0x37
    b44e:	3457      	addne	r4, #87	; 0x57
    b450:	e7db      	b.n	b40a <encode_uint+0x3e>
		} else if (radix == 16) {
    b452:	2e10      	cmp	r6, #16
    b454:	d1eb      	bne.n	b42e <encode_uint+0x62>
			conv->altform_0c = true;
    b456:	78ab      	ldrb	r3, [r5, #2]
    b458:	f043 0310 	orr.w	r3, r3, #16
    b45c:	e7e6      	b.n	b42c <encode_uint+0x60>
    b45e:	bf00      	nop
    b460:	00046011 	.word	0x00046011

0000b464 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    b464:	b508      	push	{r3, lr}
    b466:	f04f 0220 	mov.w	r2, #32
    b46a:	f3ef 8311 	mrs	r3, BASEPRI
    b46e:	f382 8812 	msr	BASEPRI_MAX, r2
    b472:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    b476:	f000 fef7 	bl	c268 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    b47a:	4803      	ldr	r0, [pc, #12]	; (b488 <sys_reboot+0x24>)
    b47c:	f009 fa4f 	bl	1491e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    b480:	f000 fa4e 	bl	b920 <arch_cpu_idle>
    b484:	e7fc      	b.n	b480 <sys_reboot+0x1c>
    b486:	bf00      	nop
    b488:	00045e4e 	.word	0x00045e4e

0000b48c <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    b48c:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    b48e:	4c04      	ldr	r4, [pc, #16]	; (b4a0 <__do_init_array_aux+0x14>)
    b490:	4d04      	ldr	r5, [pc, #16]	; (b4a4 <__do_init_array_aux+0x18>)
    b492:	42ac      	cmp	r4, r5
    b494:	d300      	bcc.n	b498 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    b496:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    b498:	f854 3b04 	ldr.w	r3, [r4], #4
    b49c:	4798      	blx	r3
		func++) {
    b49e:	e7f8      	b.n	b492 <__do_init_array_aux+0x6>
    b4a0:	00016418 	.word	0x00016418
    b4a4:	0001641c 	.word	0x0001641c

0000b4a8 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    b4a8:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    b4aa:	4c05      	ldr	r4, [pc, #20]	; (b4c0 <__do_global_ctors_aux+0x18>)
    b4ac:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    b4ae:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    b4b2:	b905      	cbnz	r5, b4b6 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    b4b4:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    b4b6:	f854 3904 	ldr.w	r3, [r4], #-4
    b4ba:	3d01      	subs	r5, #1
    b4bc:	4798      	blx	r3
    b4be:	e7f8      	b.n	b4b2 <__do_global_ctors_aux+0xa>
    b4c0:	00016410 	.word	0x00016410

0000b4c4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    b4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b4c8:	4605      	mov	r5, r0
    b4ca:	f04f 0320 	mov.w	r3, #32
    b4ce:	f3ef 8611 	mrs	r6, BASEPRI
    b4d2:	f383 8812 	msr	BASEPRI_MAX, r3
    b4d6:	f3bf 8f6f 	isb	sy
	return list->head;
    b4da:	4b0e      	ldr	r3, [pc, #56]	; (b514 <pm_state_notify+0x50>)
    b4dc:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b4de:	b19c      	cbz	r4, b508 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b4e0:	4f0d      	ldr	r7, [pc, #52]	; (b518 <pm_state_notify+0x54>)
    b4e2:	f8df 8038 	ldr.w	r8, [pc, #56]	; b51c <pm_state_notify+0x58>
    b4e6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    b4ea:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    b4ee:	2d00      	cmp	r5, #0
    b4f0:	bf08      	it	eq
    b4f2:	4613      	moveq	r3, r2
		if (callback) {
    b4f4:	b12b      	cbz	r3, b502 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b4f6:	f898 2014 	ldrb.w	r2, [r8, #20]
    b4fa:	fb09 f202 	mul.w	r2, r9, r2
    b4fe:	5cb8      	ldrb	r0, [r7, r2]
    b500:	4798      	blx	r3
	return node->next;
    b502:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b504:	2c00      	cmp	r4, #0
    b506:	d1f0      	bne.n	b4ea <pm_state_notify+0x26>
	__asm__ volatile(
    b508:	f386 8811 	msr	BASEPRI, r6
    b50c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    b510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b514:	200011a4 	.word	0x200011a4
    b518:	200011ac 	.word	0x200011ac
    b51c:	20001854 	.word	0x20001854

0000b520 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b520:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    b522:	2301      	movs	r3, #1
    b524:	f000 001f 	and.w	r0, r0, #31
    b528:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b52c:	4b07      	ldr	r3, [pc, #28]	; (b54c <atomic_clear_bit.constprop.0+0x2c>)
    b52e:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b532:	43c0      	mvns	r0, r0
    b534:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b538:	e853 2f00 	ldrex	r2, [r3]
    b53c:	4002      	ands	r2, r0
    b53e:	e843 2100 	strex	r1, r2, [r3]
    b542:	2900      	cmp	r1, #0
    b544:	d1f8      	bne.n	b538 <atomic_clear_bit.constprop.0+0x18>
    b546:	f3bf 8f5b 	dmb	ish
}
    b54a:	4770      	bx	lr
    b54c:	200011b8 	.word	0x200011b8

0000b550 <pm_system_resume>:

void pm_system_resume(void)
{
    b550:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    b552:	4b1a      	ldr	r3, [pc, #104]	; (b5bc <pm_system_resume+0x6c>)
    b554:	7d1c      	ldrb	r4, [r3, #20]
    b556:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    b55a:	f004 031f 	and.w	r3, r4, #31
    b55e:	2201      	movs	r2, #1
    b560:	409a      	lsls	r2, r3
    b562:	4b17      	ldr	r3, [pc, #92]	; (b5c0 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b564:	0961      	lsrs	r1, r4, #5
    b566:	43d0      	mvns	r0, r2
    b568:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b56c:	e853 1f00 	ldrex	r1, [r3]
    b570:	ea01 0500 	and.w	r5, r1, r0
    b574:	e843 5c00 	strex	ip, r5, [r3]
    b578:	f1bc 0f00 	cmp.w	ip, #0
    b57c:	d1f6      	bne.n	b56c <pm_system_resume+0x1c>
    b57e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    b582:	4211      	tst	r1, r2
    b584:	d013      	beq.n	b5ae <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    b586:	4b0f      	ldr	r3, [pc, #60]	; (b5c4 <pm_system_resume+0x74>)
    b588:	4d0f      	ldr	r5, [pc, #60]	; (b5c8 <pm_system_resume+0x78>)
    b58a:	b18b      	cbz	r3, b5b0 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    b58c:	230c      	movs	r3, #12
    b58e:	4363      	muls	r3, r4
    b590:	18ea      	adds	r2, r5, r3
    b592:	5ce8      	ldrb	r0, [r5, r3]
    b594:	7851      	ldrb	r1, [r2, #1]
    b596:	f009 fb98 	bl	14cca <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    b59a:	2000      	movs	r0, #0
    b59c:	f7ff ff92 	bl	b4c4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    b5a0:	230c      	movs	r3, #12
    b5a2:	435c      	muls	r4, r3
    b5a4:	192a      	adds	r2, r5, r4
    b5a6:	2300      	movs	r3, #0
    b5a8:	512b      	str	r3, [r5, r4]
    b5aa:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    b5ae:	bd38      	pop	{r3, r4, r5, pc}
    b5b0:	f383 8811 	msr	BASEPRI, r3
    b5b4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b5b8:	e7ef      	b.n	b59a <pm_system_resume+0x4a>
    b5ba:	bf00      	nop
    b5bc:	20001854 	.word	0x20001854
    b5c0:	200011bc 	.word	0x200011bc
    b5c4:	00014ccb 	.word	0x00014ccb
    b5c8:	200011ac 	.word	0x200011ac

0000b5cc <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    b5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    b5d0:	4b32      	ldr	r3, [pc, #200]	; (b69c <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b5d2:	4a33      	ldr	r2, [pc, #204]	; (b6a0 <pm_system_suspend+0xd4>)
    b5d4:	7d1c      	ldrb	r4, [r3, #20]
    b5d6:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b5da:	0963      	lsrs	r3, r4, #5
    b5dc:	ea4f 0983 	mov.w	r9, r3, lsl #2
    b5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5e4:	4e2f      	ldr	r6, [pc, #188]	; (b6a4 <pm_system_suspend+0xd8>)
    b5e6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b5ea:	f004 081f 	and.w	r8, r4, #31
    b5ee:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    b5f2:	f013 0f01 	tst.w	r3, #1
{
    b5f6:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    b5f8:	d10a      	bne.n	b610 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    b5fa:	4601      	mov	r1, r0
    b5fc:	4620      	mov	r0, r4
    b5fe:	f000 f869 	bl	b6d4 <pm_policy_next_state>
		if (info != NULL) {
    b602:	b128      	cbz	r0, b610 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    b604:	c807      	ldmia	r0, {r0, r1, r2}
    b606:	230c      	movs	r3, #12
    b608:	fb03 6304 	mla	r3, r3, r4, r6
    b60c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    b610:	230c      	movs	r3, #12
    b612:	4363      	muls	r3, r4
    b614:	18f2      	adds	r2, r6, r3
    b616:	5cf5      	ldrb	r5, [r6, r3]
    b618:	b92d      	cbnz	r5, b626 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    b61a:	4620      	mov	r0, r4
    b61c:	f7ff ff80 	bl	b520 <atomic_clear_bit.constprop.0>
		ret = false;
    b620:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    b622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    b626:	1c7b      	adds	r3, r7, #1
    b628:	d00f      	beq.n	b64a <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    b62a:	f8d2 c008 	ldr.w	ip, [r2, #8]
    b62e:	481e      	ldr	r0, [pc, #120]	; (b6a8 <pm_system_suspend+0xdc>)
    b630:	4a1e      	ldr	r2, [pc, #120]	; (b6ac <pm_system_suspend+0xe0>)
    b632:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    b636:	2100      	movs	r1, #0
    b638:	2300      	movs	r3, #0
    b63a:	fbec 0105 	umlal	r0, r1, ip, r5
    b63e:	f7f5 facd 	bl	bdc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    b642:	2101      	movs	r1, #1
    b644:	1a38      	subs	r0, r7, r0
    b646:	f00a f891 	bl	1576c <z_set_timeout_expiry>
	k_sched_lock();
    b64a:	f002 fdeb 	bl	e224 <k_sched_lock>
	pm_state_notify(true);
    b64e:	2001      	movs	r0, #1
    b650:	f7ff ff38 	bl	b4c4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b654:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b658:	2301      	movs	r3, #1
    b65a:	fa03 f808 	lsl.w	r8, r3, r8
    b65e:	4b14      	ldr	r3, [pc, #80]	; (b6b0 <pm_system_suspend+0xe4>)
    b660:	4499      	add	r9, r3
    b662:	e859 3f00 	ldrex	r3, [r9]
    b666:	ea43 0308 	orr.w	r3, r3, r8
    b66a:	e849 3200 	strex	r2, r3, [r9]
    b66e:	2a00      	cmp	r2, #0
    b670:	d1f7      	bne.n	b662 <pm_system_suspend+0x96>
    b672:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    b676:	4b0f      	ldr	r3, [pc, #60]	; (b6b4 <pm_system_suspend+0xe8>)
    b678:	b133      	cbz	r3, b688 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    b67a:	230c      	movs	r3, #12
    b67c:	4363      	muls	r3, r4
    b67e:	18f2      	adds	r2, r6, r3
    b680:	5cf0      	ldrb	r0, [r6, r3]
    b682:	7851      	ldrb	r1, [r2, #1]
    b684:	f009 fb15 	bl	14cb2 <pm_state_set>
	pm_system_resume();
    b688:	f7ff ff62 	bl	b550 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    b68c:	4620      	mov	r0, r4
    b68e:	f7ff ff47 	bl	b520 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    b692:	f002 ff97 	bl	e5c4 <k_sched_unlock>
	bool ret = true;
    b696:	2001      	movs	r0, #1
    b698:	e7c3      	b.n	b622 <pm_system_suspend+0x56>
    b69a:	bf00      	nop
    b69c:	20001854 	.word	0x20001854
    b6a0:	200011b8 	.word	0x200011b8
    b6a4:	200011ac 	.word	0x200011ac
    b6a8:	000f423f 	.word	0x000f423f
    b6ac:	000f4240 	.word	0x000f4240
    b6b0:	200011bc 	.word	0x200011bc
    b6b4:	00014cb3 	.word	0x00014cb3

0000b6b8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b6b8:	4b05      	ldr	r3, [pc, #20]	; (b6d0 <pm_policy_state_lock_is_active+0x18>)
    b6ba:	f3bf 8f5b 	dmb	ish
    b6be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b6c2:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    b6c6:	3800      	subs	r0, #0
    b6c8:	bf18      	it	ne
    b6ca:	2001      	movne	r0, #1
    b6cc:	4770      	bx	lr
    b6ce:	bf00      	nop
    b6d0:	200011c0 	.word	0x200011c0

0000b6d4 <pm_policy_next_state>:
{
    b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6d8:	b085      	sub	sp, #20
    b6da:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b6dc:	a903      	add	r1, sp, #12
    b6de:	f000 f847 	bl	b770 <pm_state_cpu_get_all>
    b6e2:	f8df 8084 	ldr.w	r8, [pc, #132]	; b768 <pm_policy_next_state+0x94>
    b6e6:	f8df a084 	ldr.w	sl, [pc, #132]	; b76c <pm_policy_next_state+0x98>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b6ea:	3801      	subs	r0, #1
    b6ec:	b204      	sxth	r4, r0
    b6ee:	f04f 0b00 	mov.w	fp, #0
    b6f2:	1c63      	adds	r3, r4, #1
    b6f4:	d104      	bne.n	b700 <pm_policy_next_state+0x2c>
	return NULL;
    b6f6:	2600      	movs	r6, #0
}
    b6f8:	4630      	mov	r0, r6
    b6fa:	b005      	add	sp, #20
    b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    b700:	9a03      	ldr	r2, [sp, #12]
    b702:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    b706:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    b70a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    b70e:	f7ff ffd3 	bl	b6b8 <pm_policy_state_lock_is_active>
    b712:	4605      	mov	r5, r0
    b714:	bb10      	cbnz	r0, b75c <pm_policy_next_state+0x88>
    b716:	6870      	ldr	r0, [r6, #4]
    b718:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    b71c:	46c4      	mov	ip, r8
    b71e:	4629      	mov	r1, r5
    b720:	fbe0 c109 	umlal	ip, r1, r0, r9
    b724:	4652      	mov	r2, sl
    b726:	465b      	mov	r3, fp
    b728:	4660      	mov	r0, ip
    b72a:	f7f5 fa57 	bl	bdc <__aeabi_uldivmod>
    b72e:	9001      	str	r0, [sp, #4]
    b730:	68b0      	ldr	r0, [r6, #8]
    b732:	46c4      	mov	ip, r8
    b734:	4629      	mov	r1, r5
    b736:	fbe0 c109 	umlal	ip, r1, r0, r9
    b73a:	465b      	mov	r3, fp
    b73c:	4652      	mov	r2, sl
    b73e:	4660      	mov	r0, ip
    b740:	f7f5 fa4c 	bl	bdc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b744:	4b07      	ldr	r3, [pc, #28]	; (b764 <pm_policy_next_state+0x90>)
    b746:	681b      	ldr	r3, [r3, #0]
    b748:	1c59      	adds	r1, r3, #1
    b74a:	d001      	beq.n	b750 <pm_policy_next_state+0x7c>
    b74c:	4283      	cmp	r3, r0
    b74e:	d905      	bls.n	b75c <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    b750:	1c7a      	adds	r2, r7, #1
    b752:	d0d1      	beq.n	b6f8 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    b754:	9b01      	ldr	r3, [sp, #4]
    b756:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    b758:	42b8      	cmp	r0, r7
    b75a:	d9cd      	bls.n	b6f8 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b75c:	3c01      	subs	r4, #1
    b75e:	b224      	sxth	r4, r4
    b760:	e7c7      	b.n	b6f2 <pm_policy_next_state+0x1e>
    b762:	bf00      	nop
    b764:	20000274 	.word	0x20000274
    b768:	000f423f 	.word	0x000f423f
    b76c:	000f4240 	.word	0x000f4240

0000b770 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    b770:	b908      	cbnz	r0, b776 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    b772:	4b02      	ldr	r3, [pc, #8]	; (b77c <pm_state_cpu_get_all+0xc>)
    b774:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    b776:	2000      	movs	r0, #0
    b778:	4770      	bx	lr
    b77a:	bf00      	nop
    b77c:	0003f514 	.word	0x0003f514

0000b780 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    b780:	4801      	ldr	r0, [pc, #4]	; (b788 <nrf_cc3xx_platform_abort_init+0x8>)
    b782:	f005 bc99 	b.w	110b8 <nrf_cc3xx_platform_set_abort>
    b786:	bf00      	nop
    b788:	0003f514 	.word	0x0003f514

0000b78c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    b78c:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    b78e:	4604      	mov	r4, r0
    b790:	b918      	cbnz	r0, b79a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    b792:	4b0d      	ldr	r3, [pc, #52]	; (b7c8 <mutex_free_platform+0x3c>)
    b794:	480d      	ldr	r0, [pc, #52]	; (b7cc <mutex_free_platform+0x40>)
    b796:	685b      	ldr	r3, [r3, #4]
    b798:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    b79a:	6861      	ldr	r1, [r4, #4]
    b79c:	2908      	cmp	r1, #8
    b79e:	d00d      	beq.n	b7bc <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    b7a0:	f031 0304 	bics.w	r3, r1, #4
    b7a4:	d00a      	beq.n	b7bc <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    b7a6:	f011 0102 	ands.w	r1, r1, #2
    b7aa:	d008      	beq.n	b7be <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    b7ac:	4808      	ldr	r0, [pc, #32]	; (b7d0 <mutex_free_platform+0x44>)
    b7ae:	4621      	mov	r1, r4
    b7b0:	f009 fecf 	bl	15552 <k_mem_slab_free>
        mutex->mutex = NULL;
    b7b4:	2300      	movs	r3, #0
    b7b6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    b7b8:	2300      	movs	r3, #0
    b7ba:	6063      	str	r3, [r4, #4]
}
    b7bc:	bd10      	pop	{r4, pc}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    b7be:	6820      	ldr	r0, [r4, #0]
    b7c0:	2214      	movs	r2, #20
    b7c2:	f00a f8fa 	bl	159ba <memset>
    b7c6:	e7f7      	b.n	b7b8 <mutex_free_platform+0x2c>
    b7c8:	20000554 	.word	0x20000554
    b7cc:	00045e77 	.word	0x00045e77
    b7d0:	200011dc 	.word	0x200011dc

0000b7d4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    b7d4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    b7d6:	b308      	cbz	r0, b81c <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    b7d8:	6843      	ldr	r3, [r0, #4]
    b7da:	2b04      	cmp	r3, #4
    b7dc:	d110      	bne.n	b800 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b7de:	2201      	movs	r2, #1
    b7e0:	6803      	ldr	r3, [r0, #0]
    b7e2:	f3bf 8f5b 	dmb	ish
    b7e6:	e853 1f00 	ldrex	r1, [r3]
    b7ea:	2900      	cmp	r1, #0
    b7ec:	d103      	bne.n	b7f6 <mutex_lock_platform+0x22>
    b7ee:	e843 2000 	strex	r0, r2, [r3]
    b7f2:	2800      	cmp	r0, #0
    b7f4:	d1f7      	bne.n	b7e6 <mutex_lock_platform+0x12>
    b7f6:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    b7fa:	d10b      	bne.n	b814 <mutex_lock_platform+0x40>
    b7fc:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    b7fe:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    b800:	b153      	cbz	r3, b818 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    b802:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    b804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b80c:	f002 fbb0 	bl	df70 <z_impl_k_mutex_lock>
        if (ret == 0) {
    b810:	2800      	cmp	r0, #0
    b812:	d0f3      	beq.n	b7fc <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    b814:	4803      	ldr	r0, [pc, #12]	; (b824 <mutex_lock_platform+0x50>)
    b816:	e7f2      	b.n	b7fe <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    b818:	4803      	ldr	r0, [pc, #12]	; (b828 <mutex_lock_platform+0x54>)
    b81a:	e7f0      	b.n	b7fe <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    b81c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b820:	e7ed      	b.n	b7fe <mutex_lock_platform+0x2a>
    b822:	bf00      	nop
    b824:	ffff8fe9 	.word	0xffff8fe9
    b828:	ffff8fea 	.word	0xffff8fea

0000b82c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    b82c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    b82e:	b1d0      	cbz	r0, b866 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    b830:	6843      	ldr	r3, [r0, #4]
    b832:	2b04      	cmp	r3, #4
    b834:	d111      	bne.n	b85a <mutex_unlock_platform+0x2e>
    b836:	2200      	movs	r2, #0
    b838:	6803      	ldr	r3, [r0, #0]
    b83a:	f3bf 8f5b 	dmb	ish
    b83e:	e853 1f00 	ldrex	r1, [r3]
    b842:	2901      	cmp	r1, #1
    b844:	d103      	bne.n	b84e <mutex_unlock_platform+0x22>
    b846:	e843 2000 	strex	r0, r2, [r3]
    b84a:	2800      	cmp	r0, #0
    b84c:	d1f7      	bne.n	b83e <mutex_unlock_platform+0x12>
    b84e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    b852:	4807      	ldr	r0, [pc, #28]	; (b870 <mutex_unlock_platform+0x44>)
    b854:	bf08      	it	eq
    b856:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    b858:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    b85a:	b13b      	cbz	r3, b86c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    b85c:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    b85e:	f002 fbff 	bl	e060 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    b862:	2000      	movs	r0, #0
    b864:	e7f8      	b.n	b858 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    b866:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b86a:	e7f5      	b.n	b858 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    b86c:	4801      	ldr	r0, [pc, #4]	; (b874 <mutex_unlock_platform+0x48>)
    b86e:	e7f3      	b.n	b858 <mutex_unlock_platform+0x2c>
    b870:	ffff8fe9 	.word	0xffff8fe9
    b874:	ffff8fea 	.word	0xffff8fea

0000b878 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    b878:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    b87a:	4604      	mov	r4, r0
    b87c:	b918      	cbnz	r0, b886 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    b87e:	4b16      	ldr	r3, [pc, #88]	; (b8d8 <mutex_init_platform+0x60>)
    b880:	4816      	ldr	r0, [pc, #88]	; (b8dc <mutex_init_platform+0x64>)
    b882:	685b      	ldr	r3, [r3, #4]
    b884:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    b886:	6863      	ldr	r3, [r4, #4]
    b888:	2b04      	cmp	r3, #4
    b88a:	d023      	beq.n	b8d4 <mutex_init_platform+0x5c>
    b88c:	2b08      	cmp	r3, #8
    b88e:	d021      	beq.n	b8d4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    b890:	b9cb      	cbnz	r3, b8c6 <mutex_init_platform+0x4e>
    b892:	6823      	ldr	r3, [r4, #0]
    b894:	b9bb      	cbnz	r3, b8c6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    b896:	4812      	ldr	r0, [pc, #72]	; (b8e0 <mutex_init_platform+0x68>)
    b898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b8a0:	4621      	mov	r1, r4
    b8a2:	f002 fa8d 	bl	ddc0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    b8a6:	b908      	cbnz	r0, b8ac <mutex_init_platform+0x34>
    b8a8:	6823      	ldr	r3, [r4, #0]
    b8aa:	b91b      	cbnz	r3, b8b4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    b8ac:	4b0a      	ldr	r3, [pc, #40]	; (b8d8 <mutex_init_platform+0x60>)
    b8ae:	480d      	ldr	r0, [pc, #52]	; (b8e4 <mutex_init_platform+0x6c>)
    b8b0:	685b      	ldr	r3, [r3, #4]
    b8b2:	4798      	blx	r3
    b8b4:	6820      	ldr	r0, [r4, #0]
    b8b6:	2214      	movs	r2, #20
    b8b8:	2100      	movs	r1, #0
    b8ba:	f00a f87e 	bl	159ba <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    b8be:	6863      	ldr	r3, [r4, #4]
    b8c0:	f043 0302 	orr.w	r3, r3, #2
    b8c4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    b8c6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    b8c8:	f009 fe81 	bl	155ce <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    b8cc:	6863      	ldr	r3, [r4, #4]
    b8ce:	f043 0301 	orr.w	r3, r3, #1
    b8d2:	6063      	str	r3, [r4, #4]
}
    b8d4:	bd10      	pop	{r4, pc}
    b8d6:	bf00      	nop
    b8d8:	20000554 	.word	0x20000554
    b8dc:	00045e77 	.word	0x00045e77
    b8e0:	200011dc 	.word	0x200011dc
    b8e4:	00045e9d 	.word	0x00045e9d

0000b8e8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    b8e8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    b8ea:	4906      	ldr	r1, [pc, #24]	; (b904 <nrf_cc3xx_platform_mutex_init+0x1c>)
    b8ec:	4806      	ldr	r0, [pc, #24]	; (b908 <nrf_cc3xx_platform_mutex_init+0x20>)
    b8ee:	2340      	movs	r3, #64	; 0x40
    b8f0:	2214      	movs	r2, #20
    b8f2:	f009 fe12 	bl	1551a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    b8f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    b8fa:	4904      	ldr	r1, [pc, #16]	; (b90c <nrf_cc3xx_platform_mutex_init+0x24>)
    b8fc:	4804      	ldr	r0, [pc, #16]	; (b910 <nrf_cc3xx_platform_mutex_init+0x28>)
    b8fe:	f005 bc3b 	b.w	11178 <nrf_cc3xx_platform_set_mutexes>
    b902:	bf00      	nop
    b904:	200011fc 	.word	0x200011fc
    b908:	200011dc 	.word	0x200011dc
    b90c:	0003f52c 	.word	0x0003f52c
    b910:	0003f51c 	.word	0x0003f51c

0000b914 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b914:	4901      	ldr	r1, [pc, #4]	; (b91c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b916:	2210      	movs	r2, #16
	str	r2, [r1]
    b918:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b91a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b91c:	e000ed10 	.word	0xe000ed10

0000b920 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b920:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b922:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b924:	f380 8811 	msr	BASEPRI, r0
	isb
    b928:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    b92c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    b930:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b932:	b662      	cpsie	i
	isb
    b934:	f3bf 8f6f 	isb	sy

	bx	lr
    b938:	4770      	bx	lr
    b93a:	bf00      	nop

0000b93c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b93c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b93e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b940:	f381 8811 	msr	BASEPRI, r1

	wfe
    b944:	bf20      	wfe

	msr	BASEPRI, r0
    b946:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b94a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b94c:	4770      	bx	lr
    b94e:	bf00      	nop

0000b950 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b950:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b952:	2b00      	cmp	r3, #0
    b954:	db08      	blt.n	b968 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b956:	2201      	movs	r2, #1
    b958:	f000 001f 	and.w	r0, r0, #31
    b95c:	fa02 f000 	lsl.w	r0, r2, r0
    b960:	095b      	lsrs	r3, r3, #5
    b962:	4a02      	ldr	r2, [pc, #8]	; (b96c <arch_irq_enable+0x1c>)
    b964:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    b968:	4770      	bx	lr
    b96a:	bf00      	nop
    b96c:	e000e100 	.word	0xe000e100

0000b970 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b970:	4b05      	ldr	r3, [pc, #20]	; (b988 <arch_irq_is_enabled+0x18>)
    b972:	0942      	lsrs	r2, r0, #5
    b974:	f000 001f 	and.w	r0, r0, #31
    b978:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b97c:	2301      	movs	r3, #1
    b97e:	fa03 f000 	lsl.w	r0, r3, r0
}
    b982:	4010      	ands	r0, r2
    b984:	4770      	bx	lr
    b986:	bf00      	nop
    b988:	e000e100 	.word	0xe000e100

0000b98c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b98c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b98e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b990:	bfa8      	it	ge
    b992:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    b996:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b99a:	bfb8      	it	lt
    b99c:	4b06      	ldrlt	r3, [pc, #24]	; (b9b8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b99e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    b9a2:	bfac      	ite	ge
    b9a4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b9a8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b9ac:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b9ae:	bfb4      	ite	lt
    b9b0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b9b2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    b9b6:	4770      	bx	lr
    b9b8:	e000ed14 	.word	0xe000ed14

0000b9bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b9bc:	bf30      	wfi
    b z_SysNmiOnReset
    b9be:	f7ff bffd 	b.w	b9bc <z_SysNmiOnReset>
    b9c2:	bf00      	nop

0000b9c4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b9c4:	4a14      	ldr	r2, [pc, #80]	; (ba18 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    b9c6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b9c8:	4b14      	ldr	r3, [pc, #80]	; (ba1c <z_arm_prep_c+0x58>)
    b9ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    b9ce:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b9d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b9d4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    b9d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b9dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    b9e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b9e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    b9ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    b9f0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    b9f4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    b9f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b9fc:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    ba00:	2300      	movs	r3, #0
    ba02:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ba06:	f002 f90b 	bl	dc20 <z_bss_zero>
	z_data_copy();
    ba0a:	f002 fefd 	bl	e808 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    ba0e:	f000 fa51 	bl	beb4 <z_arm_interrupt_init>
	z_cstart();
    ba12:	f002 f949 	bl	dca8 <z_cstart>
    ba16:	bf00      	nop
    ba18:	00000000 	.word	0x00000000
    ba1c:	e000ed00 	.word	0xe000ed00

0000ba20 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    ba20:	4a09      	ldr	r2, [pc, #36]	; (ba48 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    ba22:	490a      	ldr	r1, [pc, #40]	; (ba4c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    ba24:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    ba26:	6809      	ldr	r1, [r1, #0]
    ba28:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ba2a:	4909      	ldr	r1, [pc, #36]	; (ba50 <arch_swap+0x30>)
	_current->arch.basepri = key;
    ba2c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ba2e:	684b      	ldr	r3, [r1, #4]
    ba30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ba34:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    ba36:	2300      	movs	r3, #0
    ba38:	f383 8811 	msr	BASEPRI, r3
    ba3c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    ba40:	6893      	ldr	r3, [r2, #8]
}
    ba42:	6f98      	ldr	r0, [r3, #120]	; 0x78
    ba44:	4770      	bx	lr
    ba46:	bf00      	nop
    ba48:	20001854 	.word	0x20001854
    ba4c:	0003f6a4 	.word	0x0003f6a4
    ba50:	e000ed00 	.word	0xe000ed00

0000ba54 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ba54:	4921      	ldr	r1, [pc, #132]	; (badc <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ba56:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    ba58:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ba5c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    ba60:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ba62:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ba66:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    ba6a:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    ba6e:	d103      	bne.n	ba78 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    ba70:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    ba74:	ec80 8a10 	vstmia	r0, {s16-s31}

0000ba78 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ba78:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    ba7a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ba7e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ba82:	4f17      	ldr	r7, [pc, #92]	; (bae0 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ba84:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ba88:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    ba8a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ba8c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    ba8e:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ba92:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    ba94:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ba96:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ba98:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    ba9c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    baa0:	d003      	beq.n	baaa <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    baa2:	2300      	movs	r3, #0
    vmsr fpscr, r3
    baa4:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    baa8:	e003      	b.n	bab2 <in_fp_endif>

0000baaa <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    baaa:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    baae:	ec90 8a10 	vldmia	r0, {s16-s31}

0000bab2 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    bab2:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    bab6:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    baba:	f383 8814 	msr	CONTROL, r3
    isb
    babe:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    bac2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    bac4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    bac6:	f000 fa91 	bl	bfec <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    baca:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    bace:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    bad2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    bad6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    bada:	4770      	bx	lr
    ldr r1, =_kernel
    badc:	20001854 	.word	0x20001854
    ldr v4, =_SCS_ICSR
    bae0:	e000ed04 	.word	0xe000ed04

0000bae4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    bae4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    bae8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    baea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    baee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    baf2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    baf4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    baf8:	2902      	cmp	r1, #2
    beq _oops
    bafa:	d0ff      	beq.n	bafc <_oops>

0000bafc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    bafc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    bafe:	f009 f88e 	bl	14c1e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    bb02:	bd01      	pop	{r0, pc}

0000bb04 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    bb04:	7b01      	ldrb	r1, [r0, #12]
{
    bb06:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    bb08:	f011 0402 	ands.w	r4, r1, #2
    bb0c:	d005      	beq.n	bb1a <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
    bb0e:	6e41      	ldr	r1, [r0, #100]	; 0x64
    bb10:	3160      	adds	r1, #96	; 0x60
    bb12:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
    bb14:	6e81      	ldr	r1, [r0, #104]	; 0x68
    bb16:	3960      	subs	r1, #96	; 0x60
    bb18:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    bb1a:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    bb1e:	9b02      	ldr	r3, [sp, #8]
    bb20:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    bb24:	490f      	ldr	r1, [pc, #60]	; (bb64 <arch_new_thread+0x60>)
	iframe->a3 = (uint32_t)p2;
    bb26:	9b03      	ldr	r3, [sp, #12]
    bb28:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    bb2c:	9b04      	ldr	r3, [sp, #16]
    bb2e:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    bb32:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    bb36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    bb3a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    bb3e:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    bb42:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    bb44:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    bb46:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    bb48:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    bb4a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    bb4e:	b91c      	cbnz	r4, bb58 <arch_new_thread+0x54>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
    bb50:	23fd      	movs	r3, #253	; 0xfd
    bb52:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    bb56:	bd10      	pop	{r4, pc}
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    bb58:	f64f 5308 	movw	r3, #64776	; 0xfd08
    bb5c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
    bb60:	e7f9      	b.n	bb56 <arch_new_thread+0x52>
    bb62:	bf00      	nop
    bb64:	00014a91 	.word	0x00014a91

0000bb68 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
    bb68:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    bb6a:	7b01      	ldrb	r1, [r0, #12]
		if ((thread->arch.mode &
    bb6c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    bb70:	4a17      	ldr	r2, [pc, #92]	; (bbd0 <z_arm_mpu_stack_guard_and_fpu_adjust+0x68>)
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    bb72:	f011 0f02 	tst.w	r1, #2
		if ((thread->arch.mode &
    bb76:	f003 0508 	and.w	r5, r3, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    bb7a:	d103      	bne.n	bb84 <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
    bb7c:	f890 40bd 	ldrb.w	r4, [r0, #189]	; 0xbd
    bb80:	06e4      	lsls	r4, r4, #27
    bb82:	d413      	bmi.n	bbac <z_arm_mpu_stack_guard_and_fpu_adjust+0x44>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
    bb84:	6b54      	ldr	r4, [r2, #52]	; 0x34
    bb86:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    bb8a:	6354      	str	r4, [r2, #52]	; 0x34
		if ((thread->arch.mode &
    bb8c:	b94d      	cbnz	r5, bba2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x3a>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    bb8e:	f043 0308 	orr.w	r3, r3, #8
    bb92:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
    bb96:	6e43      	ldr	r3, [r0, #100]	; 0x64
    bb98:	3360      	adds	r3, #96	; 0x60
    bb9a:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
    bb9c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    bb9e:	3b60      	subs	r3, #96	; 0x60
    bba0:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
    bba2:	f041 0102 	orr.w	r1, r1, #2
    bba6:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
    bba8:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
    bbaa:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
    bbac:	6b51      	ldr	r1, [r2, #52]	; 0x34
    bbae:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
    bbb2:	6351      	str	r1, [r2, #52]	; 0x34
		if ((thread->arch.mode &
    bbb4:	b14d      	cbz	r5, bbca <z_arm_mpu_stack_guard_and_fpu_adjust+0x62>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    bbb6:	f023 0308 	bic.w	r3, r3, #8
    bbba:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
    bbbe:	6e43      	ldr	r3, [r0, #100]	; 0x64
    bbc0:	3b60      	subs	r3, #96	; 0x60
    bbc2:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
    bbc4:	6e83      	ldr	r3, [r0, #104]	; 0x68
    bbc6:	3360      	adds	r3, #96	; 0x60
    bbc8:	6683      	str	r3, [r0, #104]	; 0x68
	return MPU_GUARD_ALIGN_AND_SIZE;
    bbca:	2020      	movs	r0, #32
    bbcc:	e7ed      	b.n	bbaa <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
    bbce:	bf00      	nop
    bbd0:	e000ef00 	.word	0xe000ef00

0000bbd4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    bbd4:	4b0d      	ldr	r3, [pc, #52]	; (bc0c <z_check_thread_stack_fail+0x38>)
{
    bbd6:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    bbd8:	6898      	ldr	r0, [r3, #8]
{
    bbda:	b510      	push	{r4, lr}

	if (thread == NULL) {
    bbdc:	b190      	cbz	r0, bc04 <z_check_thread_stack_fail+0x30>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
    bbde:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    bbe2:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
    bbe4:	f013 0f08 	tst.w	r3, #8
    bbe8:	bf14      	ite	ne
    bbea:	2480      	movne	r4, #128	; 0x80
    bbec:	2420      	moveq	r4, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    bbee:	f112 0f16 	cmn.w	r2, #22
    bbf2:	d004      	beq.n	bbfe <z_check_thread_stack_fail+0x2a>
    bbf4:	1b03      	subs	r3, r0, r4
    bbf6:	4293      	cmp	r3, r2
    bbf8:	d805      	bhi.n	bc06 <z_check_thread_stack_fail+0x32>
    bbfa:	4282      	cmp	r2, r0
    bbfc:	d203      	bcs.n	bc06 <z_check_thread_stack_fail+0x32>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    bbfe:	4281      	cmp	r1, r0
    bc00:	bf28      	it	cs
    bc02:	2000      	movcs	r0, #0
}
    bc04:	bd10      	pop	{r4, pc}
	return 0;
    bc06:	2000      	movs	r0, #0
    bc08:	e7fc      	b.n	bc04 <z_check_thread_stack_fail+0x30>
    bc0a:	bf00      	nop
    bc0c:	20001854 	.word	0x20001854

0000bc10 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    bc10:	b508      	push	{r3, lr}
    bc12:	4614      	mov	r4, r2
    bc14:	460d      	mov	r5, r1
    bc16:	2200      	movs	r2, #0
    bc18:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    bc1c:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    bc20:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    bc24:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
    bc28:	f3bf 8f6f 	isb	sy
    bc2c:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    bc30:	4a08      	ldr	r2, [pc, #32]	; (bc54 <arch_switch_to_main_thread+0x44>)
    bc32:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    bc34:	f000 f9da 	bl	bfec <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    bc38:	4620      	mov	r0, r4
    bc3a:	f385 8809 	msr	PSP, r5
    bc3e:	2100      	movs	r1, #0
    bc40:	b663      	cpsie	if
    bc42:	f381 8811 	msr	BASEPRI, r1
    bc46:	f3bf 8f6f 	isb	sy
    bc4a:	2200      	movs	r2, #0
    bc4c:	2300      	movs	r3, #0
    bc4e:	f008 ff1f 	bl	14a90 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    bc52:	bf00      	nop
    bc54:	20001854 	.word	0x20001854

0000bc58 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    bc58:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    bc5a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    bc5c:	4a0b      	ldr	r2, [pc, #44]	; (bc8c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    bc5e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    bc60:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    bc62:	bf1e      	ittt	ne
	movne	r1, #0
    bc64:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    bc66:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    bc68:	f009 fca2 	blne	155b0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    bc6c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    bc6e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    bc72:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    bc76:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    bc7a:	4905      	ldr	r1, [pc, #20]	; (bc90 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    bc7c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    bc7e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    bc80:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    bc82:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    bc86:	4903      	ldr	r1, [pc, #12]	; (bc94 <_isr_wrapper+0x3c>)
	bx r1
    bc88:	4708      	bx	r1
    bc8a:	0000      	.short	0x0000
	ldr r2, =_kernel
    bc8c:	20001854 	.word	0x20001854
	ldr r1, =_sw_isr_table
    bc90:	00016290 	.word	0x00016290
	ldr r1, =z_arm_int_exit
    bc94:	0000bc99 	.word	0x0000bc99

0000bc98 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    bc98:	4b04      	ldr	r3, [pc, #16]	; (bcac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    bc9a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    bc9c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    bc9e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    bca0:	d003      	beq.n	bcaa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    bca2:	4903      	ldr	r1, [pc, #12]	; (bcb0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    bca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    bca8:	600a      	str	r2, [r1, #0]

0000bcaa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    bcaa:	4770      	bx	lr
	ldr r3, =_kernel
    bcac:	20001854 	.word	0x20001854
	ldr r1, =_SCS_ICSR
    bcb0:	e000ed04 	.word	0xe000ed04

0000bcb4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    bcb4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    bcb6:	4b1c      	ldr	r3, [pc, #112]	; (bd28 <mem_manage_fault+0x74>)
{
    bcb8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    bcba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    bcbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    bcbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    bcc0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    bcc2:	0790      	lsls	r0, r2, #30
    bcc4:	d520      	bpl.n	bd08 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    bcc6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    bcc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bcca:	0612      	lsls	r2, r2, #24
    bccc:	d51c      	bpl.n	bd08 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    bcce:	b119      	cbz	r1, bcd8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    bcd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bcd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    bcd6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    bcd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    bcda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    bcdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bcde:	06d2      	lsls	r2, r2, #27
    bce0:	d415      	bmi.n	bd0e <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    bce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    bce4:	079b      	lsls	r3, r3, #30
    bce6:	d412      	bmi.n	bd0e <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    bce8:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    bcea:	4b0f      	ldr	r3, [pc, #60]	; (bd28 <mem_manage_fault+0x74>)
    bcec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bcee:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    bcf0:	bf42      	ittt	mi
    bcf2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    bcf4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    bcf8:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    bcfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bcfc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    bd00:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    bd02:	2300      	movs	r3, #0
    bd04:	7023      	strb	r3, [r4, #0]

	return reason;
}
    bd06:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    bd08:	f06f 0015 	mvn.w	r0, #21
    bd0c:	e7e4      	b.n	bcd8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    bd0e:	4b06      	ldr	r3, [pc, #24]	; (bd28 <mem_manage_fault+0x74>)
    bd10:	685b      	ldr	r3, [r3, #4]
    bd12:	0519      	lsls	r1, r3, #20
    bd14:	d5e8      	bpl.n	bce8 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    bd16:	4629      	mov	r1, r5
    bd18:	f7ff ff5c 	bl	bbd4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    bd1c:	2800      	cmp	r0, #0
    bd1e:	d0e3      	beq.n	bce8 <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    bd20:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    bd24:	2002      	movs	r0, #2
    bd26:	e7e0      	b.n	bcea <mem_manage_fault+0x36>
    bd28:	e000ed00 	.word	0xe000ed00

0000bd2c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    bd2c:	4b0d      	ldr	r3, [pc, #52]	; (bd64 <bus_fault.constprop.0+0x38>)
    bd2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    bd30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    bd32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bd34:	0592      	lsls	r2, r2, #22
    bd36:	d508      	bpl.n	bd4a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    bd38:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    bd3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bd3c:	0412      	lsls	r2, r2, #16
    bd3e:	d504      	bpl.n	bd4a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    bd40:	b118      	cbz	r0, bd4a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    bd42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bd44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    bd48:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    bd4a:	4b06      	ldr	r3, [pc, #24]	; (bd64 <bus_fault.constprop.0+0x38>)
    bd4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    bd4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bd50:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    bd52:	bf58      	it	pl
    bd54:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    bd56:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    bd58:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    bd5a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    bd5e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    bd60:	7008      	strb	r0, [r1, #0]

	return reason;
}
    bd62:	4770      	bx	lr
    bd64:	e000ed00 	.word	0xe000ed00

0000bd68 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    bd68:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bd6a:	4b48      	ldr	r3, [pc, #288]	; (be8c <z_arm_fault+0x124>)
    bd6c:	685b      	ldr	r3, [r3, #4]
{
    bd6e:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bd70:	f3c3 0308 	ubfx	r3, r3, #0, #9
    bd74:	2600      	movs	r6, #0
    bd76:	f386 8811 	msr	BASEPRI, r6
    bd7a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    bd7e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    bd82:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    bd86:	d112      	bne.n	bdae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    bd88:	f002 040c 	and.w	r4, r2, #12
    bd8c:	2c08      	cmp	r4, #8
    bd8e:	d00e      	beq.n	bdae <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    bd90:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    bd92:	bf4e      	itee	mi
    bd94:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
    bd96:	4605      	movpl	r5, r0
			*nested_exc = true;
    bd98:	2601      	movpl	r6, #1
	*recoverable = false;
    bd9a:	2200      	movs	r2, #0
	switch (fault) {
    bd9c:	3b03      	subs	r3, #3
	*recoverable = false;
    bd9e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    bda2:	2b03      	cmp	r3, #3
    bda4:	d86b      	bhi.n	be7e <z_arm_fault+0x116>
    bda6:	e8df f003 	tbb	[pc, r3]
    bdaa:	5504      	.short	0x5504
    bdac:	5d59      	.short	0x5d59
		return NULL;
    bdae:	4635      	mov	r5, r6
    bdb0:	e7f3      	b.n	bd9a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bdb2:	4b36      	ldr	r3, [pc, #216]	; (be8c <z_arm_fault+0x124>)
    bdb4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    bdb6:	f014 0402 	ands.w	r4, r4, #2
    bdba:	d160      	bne.n	be7e <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    bdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdbe:	2a00      	cmp	r2, #0
    bdc0:	db15      	blt.n	bdee <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    bdc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdc4:	0052      	lsls	r2, r2, #1
    bdc6:	d512      	bpl.n	bdee <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    bdc8:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    bdca:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    bdce:	f64d 7202 	movw	r2, #57090	; 0xdf02
    bdd2:	4291      	cmp	r1, r2
    bdd4:	d00a      	beq.n	bdec <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    bdd6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    bdda:	b30a      	cbz	r2, be20 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    bddc:	f10d 0207 	add.w	r2, sp, #7
    bde0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    bde2:	4628      	mov	r0, r5
    bde4:	f7ff ff66 	bl	bcb4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    bde8:	4604      	mov	r4, r0
		break;
    bdea:	e000      	b.n	bdee <z_arm_fault+0x86>
			reason = esf->basic.r0;
    bdec:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    bdee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bdf2:	b99b      	cbnz	r3, be1c <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    bdf4:	2268      	movs	r2, #104	; 0x68
    bdf6:	4629      	mov	r1, r5
    bdf8:	a802      	add	r0, sp, #8
    bdfa:	f009 fdb6 	bl	1596a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    bdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be00:	2e00      	cmp	r6, #0
    be02:	d03e      	beq.n	be82 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    be04:	f3c3 0208 	ubfx	r2, r3, #0, #9
    be08:	b922      	cbnz	r2, be14 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    be0a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    be0e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    be12:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    be14:	a902      	add	r1, sp, #8
    be16:	4620      	mov	r0, r4
    be18:	f008 feff 	bl	14c1a <z_arm_fatal_error>
}
    be1c:	b01c      	add	sp, #112	; 0x70
    be1e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    be20:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    be24:	b12a      	cbz	r2, be32 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    be26:	f10d 0107 	add.w	r1, sp, #7
    be2a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    be2c:	f7ff ff7e 	bl	bd2c <bus_fault.constprop.0>
    be30:	e7da      	b.n	bde8 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    be32:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    be34:	b292      	uxth	r2, r2
    be36:	2a00      	cmp	r2, #0
    be38:	d0d9      	beq.n	bdee <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    be3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    be3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    be3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    be40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    be42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    be44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    be46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    be48:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    be4c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    be50:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    be52:	e7cc      	b.n	bdee <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    be54:	f10d 0207 	add.w	r2, sp, #7
    be58:	2100      	movs	r1, #0
    be5a:	e7c2      	b.n	bde2 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    be5c:	f10d 0107 	add.w	r1, sp, #7
    be60:	2000      	movs	r0, #0
    be62:	e7e3      	b.n	be2c <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    be64:	4b09      	ldr	r3, [pc, #36]	; (be8c <z_arm_fault+0x124>)
    be66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    be68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    be6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    be6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    be6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    be70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    be72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    be74:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    be78:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    be7c:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    be7e:	2400      	movs	r4, #0
    be80:	e7b5      	b.n	bdee <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    be82:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    be86:	f023 0301 	bic.w	r3, r3, #1
    be8a:	e7c2      	b.n	be12 <z_arm_fault+0xaa>
    be8c:	e000ed00 	.word	0xe000ed00

0000be90 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    be90:	4a02      	ldr	r2, [pc, #8]	; (be9c <z_arm_fault_init+0xc>)
    be92:	6953      	ldr	r3, [r2, #20]
    be94:	f043 0310 	orr.w	r3, r3, #16
    be98:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    be9a:	4770      	bx	lr
    be9c:	e000ed00 	.word	0xe000ed00

0000bea0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    bea0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    bea4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    bea8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    beaa:	4672      	mov	r2, lr
	bl z_arm_fault
    beac:	f7ff ff5c 	bl	bd68 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    beb0:	bd01      	pop	{r0, pc}
    beb2:	bf00      	nop

0000beb4 <z_arm_interrupt_init>:
    beb4:	4804      	ldr	r0, [pc, #16]	; (bec8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    beb6:	2300      	movs	r3, #0
    beb8:	2120      	movs	r1, #32
    beba:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    bebc:	3301      	adds	r3, #1
    bebe:	2b30      	cmp	r3, #48	; 0x30
    bec0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    bec4:	d1f9      	bne.n	beba <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    bec6:	4770      	bx	lr
    bec8:	e000e100 	.word	0xe000e100

0000becc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    becc:	2000      	movs	r0, #0
    msr CONTROL, r0
    bece:	f380 8814 	msr	CONTROL, r0
    isb
    bed2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    bed6:	f00a f961 	bl	1619c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    beda:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    bedc:	490d      	ldr	r1, [pc, #52]	; (bf14 <__start+0x48>)
    str r0, [r1]
    bede:	6008      	str	r0, [r1, #0]
    dsb
    bee0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bee4:	480c      	ldr	r0, [pc, #48]	; (bf18 <__start+0x4c>)
    msr msp, r0
    bee6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    beea:	f000 f82b 	bl	bf44 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    beee:	2020      	movs	r0, #32
    msr BASEPRI, r0
    bef0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    bef4:	4809      	ldr	r0, [pc, #36]	; (bf1c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    bef6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    befa:	1840      	adds	r0, r0, r1
    msr PSP, r0
    befc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    bf00:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    bf04:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    bf06:	4308      	orrs	r0, r1
    msr CONTROL, r0
    bf08:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    bf0c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    bf10:	f7ff fd58 	bl	b9c4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    bf14:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bf18:	20004300 	.word	0x20004300
    ldr r0, =z_interrupt_stacks
    bf1c:	20004500 	.word	0x20004500

0000bf20 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    bf20:	4907      	ldr	r1, [pc, #28]	; (bf40 <z_arm_clear_arm_mpu_config+0x20>)
    bf22:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    bf26:	2300      	movs	r3, #0
	int num_regions =
    bf28:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    bf2c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    bf2e:	4293      	cmp	r3, r2
    bf30:	d100      	bne.n	bf34 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    bf32:	4770      	bx	lr
  MPU->RNR = rnr;
    bf34:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    bf38:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    bf3c:	3301      	adds	r3, #1
    bf3e:	e7f6      	b.n	bf2e <z_arm_clear_arm_mpu_config+0xe>
    bf40:	e000ed00 	.word	0xe000ed00

0000bf44 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    bf44:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    bf46:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    bf48:	2300      	movs	r3, #0
    bf4a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    bf4e:	f7ff ffe7 	bl	bf20 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    bf52:	4b14      	ldr	r3, [pc, #80]	; (bfa4 <z_arm_init_arch_hw_at_boot+0x60>)
    bf54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bf58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    bf5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    bf60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    bf64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    bf68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    bf6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    bf70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    bf74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    bf78:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    bf7c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    bf80:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    bf84:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    bf88:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    bf8c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    bf90:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    bf94:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    bf98:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    bf9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bf9e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    bfa2:	bd08      	pop	{r3, pc}
    bfa4:	e000e100 	.word	0xe000e100

0000bfa8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    bfa8:	4b08      	ldr	r3, [pc, #32]	; (bfcc <z_impl_k_thread_abort+0x24>)
    bfaa:	689b      	ldr	r3, [r3, #8]
    bfac:	4283      	cmp	r3, r0
    bfae:	d10b      	bne.n	bfc8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bfb0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    bfb4:	b143      	cbz	r3, bfc8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bfb6:	4b06      	ldr	r3, [pc, #24]	; (bfd0 <z_impl_k_thread_abort+0x28>)
    bfb8:	685a      	ldr	r2, [r3, #4]
    bfba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    bfbe:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    bfc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bfc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    bfc6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    bfc8:	f002 bbcc 	b.w	e764 <z_thread_abort>
    bfcc:	20001854 	.word	0x20001854
    bfd0:	e000ed00 	.word	0xe000ed00

0000bfd4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    bfd4:	4b02      	ldr	r3, [pc, #8]	; (bfe0 <z_arm_configure_static_mpu_regions+0xc>)
    bfd6:	4a03      	ldr	r2, [pc, #12]	; (bfe4 <z_arm_configure_static_mpu_regions+0x10>)
    bfd8:	4803      	ldr	r0, [pc, #12]	; (bfe8 <z_arm_configure_static_mpu_regions+0x14>)
    bfda:	2101      	movs	r1, #1
    bfdc:	f000 b874 	b.w	c0c8 <arm_core_mpu_configure_static_mpu_regions>
    bfe0:	20040000 	.word	0x20040000
    bfe4:	20000000 	.word	0x20000000
    bfe8:	0003f540 	.word	0x0003f540

0000bfec <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    bfec:	b510      	push	{r4, lr}
    bfee:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    bff0:	f7ff fdba 	bl	bb68 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    bff4:	6e62      	ldr	r2, [r4, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    bff6:	4b06      	ldr	r3, [pc, #24]	; (c010 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
    bff8:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
    bffa:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    bffe:	4a05      	ldr	r2, [pc, #20]	; (c014 <z_arm_configure_dynamic_mpu_regions+0x28>)
    c000:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
    c002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    c006:	2101      	movs	r1, #1
    c008:	4618      	mov	r0, r3
    c00a:	f000 b867 	b.w	c0dc <arm_core_mpu_configure_dynamic_mpu_regions>
    c00e:	bf00      	nop
    c010:	200016fc 	.word	0x200016fc
    c014:	150b0000 	.word	0x150b0000

0000c018 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    c018:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    c01a:	4f1f      	ldr	r7, [pc, #124]	; (c098 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    c01c:	2600      	movs	r6, #0
    c01e:	428e      	cmp	r6, r1
    c020:	db01      	blt.n	c026 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    c022:	4610      	mov	r0, r2
    c024:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    c026:	6844      	ldr	r4, [r0, #4]
    c028:	b39c      	cbz	r4, c092 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    c02a:	b153      	cbz	r3, c042 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    c02c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    c030:	ea14 0f0c 	tst.w	r4, ip
    c034:	d118      	bne.n	c068 <mpu_configure_regions+0x50>
		&&
    c036:	2c1f      	cmp	r4, #31
    c038:	d916      	bls.n	c068 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    c03a:	6805      	ldr	r5, [r0, #0]
		&&
    c03c:	ea1c 0f05 	tst.w	ip, r5
    c040:	d112      	bne.n	c068 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    c042:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    c044:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c046:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    c04a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    c04c:	d90f      	bls.n	c06e <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    c04e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    c052:	d80e      	bhi.n	c072 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    c054:	3c01      	subs	r4, #1
    c056:	fab4 f484 	clz	r4, r4
    c05a:	f1c4 041f 	rsb	r4, r4, #31
    c05e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    c060:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c062:	ea4c 0404 	orr.w	r4, ip, r4
    c066:	d906      	bls.n	c076 <mpu_configure_regions+0x5e>
			return -EINVAL;
    c068:	f06f 0215 	mvn.w	r2, #21
    c06c:	e7d9      	b.n	c022 <mpu_configure_regions+0xa>
		return REGION_32B;
    c06e:	2408      	movs	r4, #8
    c070:	e7f6      	b.n	c060 <mpu_configure_regions+0x48>
		return REGION_4G;
    c072:	243e      	movs	r4, #62	; 0x3e
    c074:	e7f4      	b.n	c060 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c076:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    c07a:	4315      	orrs	r5, r2
    c07c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c080:	f044 0401 	orr.w	r4, r4, #1
    c084:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c088:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    c08c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c08e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    c092:	3601      	adds	r6, #1
    c094:	300c      	adds	r0, #12
    c096:	e7c2      	b.n	c01e <mpu_configure_regions+0x6>
    c098:	e000ed00 	.word	0xe000ed00

0000c09c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    c09c:	4b04      	ldr	r3, [pc, #16]	; (c0b0 <arm_core_mpu_enable+0x14>)
    c09e:	2205      	movs	r2, #5
    c0a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    c0a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c0a8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    c0ac:	4770      	bx	lr
    c0ae:	bf00      	nop
    c0b0:	e000ed00 	.word	0xe000ed00

0000c0b4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    c0b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    c0b8:	4b02      	ldr	r3, [pc, #8]	; (c0c4 <arm_core_mpu_disable+0x10>)
    c0ba:	2200      	movs	r2, #0
    c0bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c0c0:	4770      	bx	lr
    c0c2:	bf00      	nop
    c0c4:	e000ed00 	.word	0xe000ed00

0000c0c8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    c0c8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    c0ca:	4c03      	ldr	r4, [pc, #12]	; (c0d8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    c0cc:	2301      	movs	r3, #1
    c0ce:	7822      	ldrb	r2, [r4, #0]
    c0d0:	f7ff ffa2 	bl	c018 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    c0d4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    c0d6:	bd10      	pop	{r4, pc}
    c0d8:	20001e79 	.word	0x20001e79

0000c0dc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    c0dc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    c0de:	4a09      	ldr	r2, [pc, #36]	; (c104 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    c0e0:	2300      	movs	r3, #0
    c0e2:	7812      	ldrb	r2, [r2, #0]
    c0e4:	f7ff ff98 	bl	c018 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    c0e8:	f110 0f16 	cmn.w	r0, #22
    c0ec:	d002      	beq.n	c0f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    c0ee:	4a06      	ldr	r2, [pc, #24]	; (c108 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    c0f0:	2807      	cmp	r0, #7
    c0f2:	dd00      	ble.n	c0f6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    c0f4:	bd08      	pop	{r3, pc}
    c0f6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    c0fa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    c0fe:	3001      	adds	r0, #1
    c100:	e7f6      	b.n	c0f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    c102:	bf00      	nop
    c104:	20001e79 	.word	0x20001e79
    c108:	e000ed00 	.word	0xe000ed00

0000c10c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c10c:	4914      	ldr	r1, [pc, #80]	; (c160 <z_arm_mpu_init+0x54>)
    c10e:	6808      	ldr	r0, [r1, #0]
    c110:	2808      	cmp	r0, #8
{
    c112:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    c114:	d821      	bhi.n	c15a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    c116:	f7ff ffcd 	bl	c0b4 <arm_core_mpu_disable>
    c11a:	4c12      	ldr	r4, [pc, #72]	; (c164 <z_arm_mpu_init+0x58>)
    c11c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c11e:	2200      	movs	r2, #0
    c120:	4290      	cmp	r0, r2
    c122:	f101 010c 	add.w	r1, r1, #12
    c126:	d105      	bne.n	c134 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c128:	4b0f      	ldr	r3, [pc, #60]	; (c168 <z_arm_mpu_init+0x5c>)
    c12a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    c12c:	f7ff ffb6 	bl	c09c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c130:	2000      	movs	r0, #0
}
    c132:	bd10      	pop	{r4, pc}
    c134:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c138:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    c13c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    c140:	4313      	orrs	r3, r2
    c142:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    c146:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    c14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c14e:	f043 0301 	orr.w	r3, r3, #1
    c152:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c156:	3201      	adds	r2, #1
    c158:	e7e2      	b.n	c120 <z_arm_mpu_init+0x14>
		return -1;
    c15a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c15e:	e7e8      	b.n	c132 <z_arm_mpu_init+0x26>
    c160:	0003f54c 	.word	0x0003f54c
    c164:	e000ed00 	.word	0xe000ed00
    c168:	20001e79 	.word	0x20001e79

0000c16c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    c16c:	4b01      	ldr	r3, [pc, #4]	; (c174 <__stdout_hook_install+0x8>)
    c16e:	6018      	str	r0, [r3, #0]
}
    c170:	4770      	bx	lr
    c172:	bf00      	nop
    c174:	2000029c 	.word	0x2000029c

0000c178 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    c178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    c17a:	4f08      	ldr	r7, [pc, #32]	; (c19c <z_impl_zephyr_read_stdin+0x24>)
{
    c17c:	4606      	mov	r6, r0
    c17e:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    c180:	2400      	movs	r4, #0
    c182:	42ac      	cmp	r4, r5
    c184:	da08      	bge.n	c198 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    c186:	683b      	ldr	r3, [r7, #0]
    c188:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    c18a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    c18c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    c18e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    c192:	d001      	beq.n	c198 <z_impl_zephyr_read_stdin+0x20>
    c194:	280d      	cmp	r0, #13
    c196:	d1f4      	bne.n	c182 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    c198:	4620      	mov	r0, r4
    c19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c19c:	20000298 	.word	0x20000298

0000c1a0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    c1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1a2:	4f0a      	ldr	r7, [pc, #40]	; (c1cc <z_impl_zephyr_write_stdout+0x2c>)
    c1a4:	460d      	mov	r5, r1
    c1a6:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    c1a8:	f1c0 0401 	rsb	r4, r0, #1
    c1ac:	19a3      	adds	r3, r4, r6
    c1ae:	429d      	cmp	r5, r3
    c1b0:	dc01      	bgt.n	c1b6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    c1b2:	4628      	mov	r0, r5
    c1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    c1b6:	7873      	ldrb	r3, [r6, #1]
    c1b8:	2b0a      	cmp	r3, #10
    c1ba:	d102      	bne.n	c1c2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    c1bc:	683b      	ldr	r3, [r7, #0]
    c1be:	200d      	movs	r0, #13
    c1c0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    c1c2:	683b      	ldr	r3, [r7, #0]
    c1c4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    c1c8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    c1ca:	e7ef      	b.n	c1ac <z_impl_zephyr_write_stdout+0xc>
    c1cc:	2000029c 	.word	0x2000029c

0000c1d0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    c1d0:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    c1d2:	4802      	ldr	r0, [pc, #8]	; (c1dc <_exit+0xc>)
    c1d4:	2105      	movs	r1, #5
    c1d6:	f7ff ffe3 	bl	c1a0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    c1da:	e7fe      	b.n	c1da <_exit+0xa>
    c1dc:	00045eca 	.word	0x00045eca

0000c1e0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    c1e0:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    c1e2:	4c07      	ldr	r4, [pc, #28]	; (c200 <_sbrk+0x20>)
    c1e4:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    c1e6:	18c2      	adds	r2, r0, r3
    c1e8:	4806      	ldr	r0, [pc, #24]	; (c204 <_sbrk+0x24>)
    c1ea:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    c1ee:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    c1f2:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    c1f4:	bf3a      	itte	cc
    c1f6:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    c1f8:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    c1fa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    c1fe:	bd10      	pop	{r4, pc}
    c200:	20001708 	.word	0x20001708
    c204:	20004d80 	.word	0x20004d80

0000c208 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    c208:	b510      	push	{r4, lr}
	__asm__ volatile(
    c20a:	f04f 0320 	mov.w	r3, #32
    c20e:	f3ef 8011 	mrs	r0, BASEPRI
    c212:	f383 8812 	msr	BASEPRI_MAX, r3
    c216:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c21a:	4a11      	ldr	r2, [pc, #68]	; (c260 <nordicsemi_nrf52_init+0x58>)
    c21c:	2301      	movs	r3, #1
    c21e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    c222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c226:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    c22a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    c22e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    c232:	2c08      	cmp	r4, #8
    c234:	d108      	bne.n	c248 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c236:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    c23a:	2905      	cmp	r1, #5
    c23c:	d804      	bhi.n	c248 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    c23e:	4c09      	ldr	r4, [pc, #36]	; (c264 <nordicsemi_nrf52_init+0x5c>)
    c240:	5c61      	ldrb	r1, [r4, r1]
    c242:	b109      	cbz	r1, c248 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    c244:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    c248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c24c:	2201      	movs	r2, #1
    c24e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    c252:	f380 8811 	msr	BASEPRI, r0
    c256:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c25a:	2000      	movs	r0, #0
    c25c:	bd10      	pop	{r4, pc}
    c25e:	bf00      	nop
    c260:	4001e000 	.word	0x4001e000
    c264:	00045edf 	.word	0x00045edf

0000c268 <sys_arch_reboot>:
    *p_gpregret = val;
    c268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c26c:	b2c0      	uxtb	r0, r0
    c26e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    c272:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c276:	4905      	ldr	r1, [pc, #20]	; (c28c <sys_arch_reboot+0x24>)
    c278:	4b05      	ldr	r3, [pc, #20]	; (c290 <sys_arch_reboot+0x28>)
    c27a:	68ca      	ldr	r2, [r1, #12]
    c27c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c280:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c282:	60cb      	str	r3, [r1, #12]
    c284:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c288:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c28a:	e7fd      	b.n	c288 <sys_arch_reboot+0x20>
    c28c:	e000ed00 	.word	0xe000ed00
    c290:	05fa0004 	.word	0x05fa0004

0000c294 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c294:	b120      	cbz	r0, c2a0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    c296:	4b03      	ldr	r3, [pc, #12]	; (c2a4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c298:	0180      	lsls	r0, r0, #6
    c29a:	f043 0301 	orr.w	r3, r3, #1
    c29e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    c2a0:	4770      	bx	lr
    c2a2:	bf00      	nop
    c2a4:	00016eb0 	.word	0x00016eb0

0000c2a8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    c2a8:	b570      	push	{r4, r5, r6, lr}
    c2aa:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    c2ac:	4906      	ldr	r1, [pc, #24]	; (c2c8 <onoff_stop+0x20>)
    c2ae:	1a41      	subs	r1, r0, r1
{
    c2b0:	4604      	mov	r4, r0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c2b2:	1149      	asrs	r1, r1, #5
    c2b4:	4805      	ldr	r0, [pc, #20]	; (c2cc <onoff_stop+0x24>)
    c2b6:	2240      	movs	r2, #64	; 0x40
    c2b8:	f008 fd29 	bl	14d0e <stop>
	notify(mgr, res);
    c2bc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    c2be:	4601      	mov	r1, r0
	notify(mgr, res);
    c2c0:	4620      	mov	r0, r4
}
    c2c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    c2c6:	4718      	bx	r3
    c2c8:	2000171c 	.word	0x2000171c
    c2cc:	00016218 	.word	0x00016218

0000c2d0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    c2d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c2d2:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    c2d4:	490a      	ldr	r1, [pc, #40]	; (c300 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    c2d6:	4a0b      	ldr	r2, [pc, #44]	; (c304 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    c2d8:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    c2da:	2340      	movs	r3, #64	; 0x40
    c2dc:	9300      	str	r3, [sp, #0]
    c2de:	1149      	asrs	r1, r1, #5
{
    c2e0:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    c2e2:	4623      	mov	r3, r4
    c2e4:	4808      	ldr	r0, [pc, #32]	; (c308 <onoff_start+0x38>)
    c2e6:	f008 fd3e 	bl	14d66 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    c2ea:	1e01      	subs	r1, r0, #0
    c2ec:	da05      	bge.n	c2fa <onoff_start+0x2a>
		notify(mgr, err);
    c2ee:	4628      	mov	r0, r5
    c2f0:	4623      	mov	r3, r4
	}
}
    c2f2:	b003      	add	sp, #12
    c2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    c2f8:	4718      	bx	r3
}
    c2fa:	b003      	add	sp, #12
    c2fc:	bd30      	pop	{r4, r5, pc}
    c2fe:	bf00      	nop
    c300:	2000171c 	.word	0x2000171c
    c304:	00014dd5 	.word	0x00014dd5
    c308:	00016218 	.word	0x00016218

0000c30c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c30c:	2200      	movs	r2, #0
{
    c30e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c310:	2101      	movs	r1, #1
{
    c312:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c314:	4610      	mov	r0, r2
    c316:	f7ff fb39 	bl	b98c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    c31a:	480f      	ldr	r0, [pc, #60]	; (c358 <clk_init+0x4c>)
    c31c:	f001 f85c 	bl	d3d8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    c320:	4b0e      	ldr	r3, [pc, #56]	; (c35c <clk_init+0x50>)
    c322:	4298      	cmp	r0, r3
    c324:	d115      	bne.n	c352 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    c326:	f009 f824 	bl	15372 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    c32a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    c32c:	490c      	ldr	r1, [pc, #48]	; (c360 <clk_init+0x54>)
    c32e:	4630      	mov	r0, r6
    c330:	f008 fb52 	bl	149d8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    c334:	2800      	cmp	r0, #0
    c336:	db0b      	blt.n	c350 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    c338:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c33a:	4909      	ldr	r1, [pc, #36]	; (c360 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c33c:	2501      	movs	r5, #1
    c33e:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c340:	f104 0020 	add.w	r0, r4, #32
    c344:	f008 fb48 	bl	149d8 <onoff_manager_init>
		if (err < 0) {
    c348:	2800      	cmp	r0, #0
    c34a:	db01      	blt.n	c350 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c34c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    c34e:	2000      	movs	r0, #0
}
    c350:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    c352:	f06f 0004 	mvn.w	r0, #4
    c356:	e7fb      	b.n	c350 <clk_init+0x44>
    c358:	0000c3a1 	.word	0x0000c3a1
    c35c:	0bad0000 	.word	0x0bad0000
    c360:	0003f594 	.word	0x0003f594

0000c364 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    c364:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    c366:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    c368:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    c36a:	480b      	ldr	r0, [pc, #44]	; (c398 <clkstarted_handle.constprop.0+0x34>)
    c36c:	434b      	muls	r3, r1
    c36e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    c370:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    c374:	2600      	movs	r6, #0
	set_on_state(&sub_data->flags);
    c376:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    c378:	6426      	str	r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    c37a:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    c37c:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    c37e:	f008 fcb3 	bl	14ce8 <set_on_state>
	if (callback) {
    c382:	b135      	cbz	r5, c392 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c384:	9a01      	ldr	r2, [sp, #4]
    c386:	4805      	ldr	r0, [pc, #20]	; (c39c <clkstarted_handle.constprop.0+0x38>)
    c388:	462b      	mov	r3, r5
}
    c38a:	b002      	add	sp, #8
    c38c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    c390:	4718      	bx	r3
}
    c392:	b002      	add	sp, #8
    c394:	bd70      	pop	{r4, r5, r6, pc}
    c396:	bf00      	nop
    c398:	2000171c 	.word	0x2000171c
    c39c:	00016218 	.word	0x00016218

0000c3a0 <clock_event_handler>:
	switch (event) {
    c3a0:	b110      	cbz	r0, c3a8 <clock_event_handler+0x8>
    c3a2:	2801      	cmp	r0, #1
    c3a4:	d004      	beq.n	c3b0 <clock_event_handler+0x10>
    c3a6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    c3a8:	4b03      	ldr	r3, [pc, #12]	; (c3b8 <clock_event_handler+0x18>)
    c3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c3ac:	075b      	lsls	r3, r3, #29
    c3ae:	d101      	bne.n	c3b4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    c3b0:	f7ff bfd8 	b.w	c364 <clkstarted_handle.constprop.0>
}
    c3b4:	4770      	bx	lr
    c3b6:	bf00      	nop
    c3b8:	2000171c 	.word	0x2000171c

0000c3bc <generic_hfclk_start>:
{
    c3bc:	b508      	push	{r3, lr}
	__asm__ volatile(
    c3be:	f04f 0320 	mov.w	r3, #32
    c3c2:	f3ef 8111 	mrs	r1, BASEPRI
    c3c6:	f383 8812 	msr	BASEPRI_MAX, r3
    c3ca:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    c3ce:	4a12      	ldr	r2, [pc, #72]	; (c418 <generic_hfclk_start+0x5c>)
    c3d0:	6813      	ldr	r3, [r2, #0]
    c3d2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    c3d6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    c3da:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    c3dc:	d00c      	beq.n	c3f8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c3de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    c3e2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c3e6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    c3ea:	f013 0301 	ands.w	r3, r3, #1
    c3ee:	d003      	beq.n	c3f8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    c3f0:	480a      	ldr	r0, [pc, #40]	; (c41c <generic_hfclk_start+0x60>)
    c3f2:	f008 fc79 	bl	14ce8 <set_on_state>
			already_started = true;
    c3f6:	2301      	movs	r3, #1
	__asm__ volatile(
    c3f8:	f381 8811 	msr	BASEPRI, r1
    c3fc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    c400:	b123      	cbz	r3, c40c <generic_hfclk_start+0x50>
}
    c402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    c406:	2000      	movs	r0, #0
    c408:	f7ff bfac 	b.w	c364 <clkstarted_handle.constprop.0>
}
    c40c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c410:	2001      	movs	r0, #1
    c412:	f008 bfbb 	b.w	1538c <nrfx_clock_start>
    c416:	bf00      	nop
    c418:	20001774 	.word	0x20001774
    c41c:	20001764 	.word	0x20001764

0000c420 <api_blocking_start>:
{
    c420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c422:	2200      	movs	r2, #0
    c424:	2301      	movs	r3, #1
    c426:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c42a:	4a09      	ldr	r2, [pc, #36]	; (c450 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c42c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c430:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c432:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c436:	f008 fcc6 	bl	14dc6 <api_start>
	if (err < 0) {
    c43a:	2800      	cmp	r0, #0
    c43c:	db05      	blt.n	c44a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    c43e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c442:	2300      	movs	r3, #0
    c444:	4668      	mov	r0, sp
    c446:	f001 fe6d 	bl	e124 <z_impl_k_sem_take>
}
    c44a:	b005      	add	sp, #20
    c44c:	f85d fb04 	ldr.w	pc, [sp], #4
    c450:	00014ded 	.word	0x00014ded

0000c454 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c454:	4b09      	ldr	r3, [pc, #36]	; (c47c <generic_hfclk_stop+0x28>)
    c456:	f3bf 8f5b 	dmb	ish
    c45a:	e853 2f00 	ldrex	r2, [r3]
    c45e:	f022 0102 	bic.w	r1, r2, #2
    c462:	e843 1000 	strex	r0, r1, [r3]
    c466:	2800      	cmp	r0, #0
    c468:	d1f7      	bne.n	c45a <generic_hfclk_stop+0x6>
    c46a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    c46e:	07d3      	lsls	r3, r2, #31
    c470:	d402      	bmi.n	c478 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c472:	2001      	movs	r0, #1
    c474:	f008 bfc7 	b.w	15406 <nrfx_clock_stop>
}
    c478:	4770      	bx	lr
    c47a:	bf00      	nop
    c47c:	20001774 	.word	0x20001774

0000c480 <z_nrf_clock_control_lf_on>:
{
    c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c484:	4939      	ldr	r1, [pc, #228]	; (c56c <z_nrf_clock_control_lf_on+0xec>)
    c486:	f3bf 8f5b 	dmb	ish
    c48a:	4607      	mov	r7, r0
    c48c:	2201      	movs	r2, #1
    c48e:	e851 3f00 	ldrex	r3, [r1]
    c492:	e841 2000 	strex	r0, r2, [r1]
    c496:	2800      	cmp	r0, #0
    c498:	d1f9      	bne.n	c48e <z_nrf_clock_control_lf_on+0xe>
    c49a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    c49e:	b933      	cbnz	r3, c4ae <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    c4a0:	4933      	ldr	r1, [pc, #204]	; (c570 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    c4a2:	4834      	ldr	r0, [pc, #208]	; (c574 <z_nrf_clock_control_lf_on+0xf4>)
    c4a4:	604b      	str	r3, [r1, #4]
    c4a6:	60cb      	str	r3, [r1, #12]
    c4a8:	608a      	str	r2, [r1, #8]
    c4aa:	f008 faa8 	bl	149fe <onoff_request>
	switch (start_mode) {
    c4ae:	1e7b      	subs	r3, r7, #1
    c4b0:	2b01      	cmp	r3, #1
    c4b2:	d82f      	bhi.n	c514 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c4b4:	2f01      	cmp	r7, #1
    c4b6:	d107      	bne.n	c4c8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c4b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c4bc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    c4c0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    c4c4:	2b01      	cmp	r3, #1
    c4c6:	d025      	beq.n	c514 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    c4c8:	f009 f86c 	bl	155a4 <k_is_in_isr>
    c4cc:	4604      	mov	r4, r0
    c4ce:	b918      	cbnz	r0, c4d8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    c4d0:	4b29      	ldr	r3, [pc, #164]	; (c578 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    c4d2:	781b      	ldrb	r3, [r3, #0]
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	d141      	bne.n	c55c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    c4d8:	f04f 0320 	mov.w	r3, #32
    c4dc:	f3ef 8611 	mrs	r6, BASEPRI
    c4e0:	f383 8812 	msr	BASEPRI_MAX, r3
    c4e4:	f3bf 8f6f 	isb	sy
    c4e8:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c4ea:	f8df 8090 	ldr.w	r8, [pc, #144]	; c57c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c4ee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c4f2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c4f6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    c4fa:	03d2      	lsls	r2, r2, #15
    c4fc:	d50c      	bpl.n	c518 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    c4fe:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c502:	2b01      	cmp	r3, #1
    c504:	d001      	beq.n	c50a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    c506:	2f01      	cmp	r7, #1
    c508:	d106      	bne.n	c518 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    c50a:	b30c      	cbz	r4, c550 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    c50c:	f386 8811 	msr	BASEPRI, r6
    c510:	f3bf 8f6f 	isb	sy
}
    c514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    c518:	b1ac      	cbz	r4, c546 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    c51a:	4630      	mov	r0, r6
    c51c:	f7ff fa0e 	bl	b93c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    c520:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    c524:	2b00      	cmp	r3, #0
    c526:	d1e4      	bne.n	c4f2 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c528:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    c52c:	2a00      	cmp	r2, #0
    c52e:	d0e0      	beq.n	c4f2 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c530:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    c534:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    c538:	2301      	movs	r3, #1
    c53a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    c53e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c542:	60ab      	str	r3, [r5, #8]
}
    c544:	e7d5      	b.n	c4f2 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    c546:	2100      	movs	r1, #0
    c548:	2021      	movs	r0, #33	; 0x21
    c54a:	f002 f8eb 	bl	e724 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    c54e:	e7e7      	b.n	c520 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    c550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c554:	2202      	movs	r2, #2
    c556:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    c55a:	e7db      	b.n	c514 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    c55c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c560:	2202      	movs	r2, #2
    c562:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    c566:	4606      	mov	r6, r0
}
    c568:	e7bf      	b.n	c4ea <z_nrf_clock_control_lf_on+0x6a>
    c56a:	bf00      	nop
    c56c:	20001778 	.word	0x20001778
    c570:	2000170c 	.word	0x2000170c
    c574:	2000173c 	.word	0x2000173c
    c578:	200022ca 	.word	0x200022ca
    c57c:	e000e100 	.word	0xe000e100

0000c580 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    c580:	280a      	cmp	r0, #10
{
    c582:	b538      	push	{r3, r4, r5, lr}
    c584:	4d06      	ldr	r5, [pc, #24]	; (c5a0 <console_out+0x20>)
    c586:	4604      	mov	r4, r0
	if ('\n' == c) {
    c588:	d103      	bne.n	c592 <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
    c58a:	6828      	ldr	r0, [r5, #0]
    c58c:	210d      	movs	r1, #13
    c58e:	f008 fc30 	bl	14df2 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    c592:	6828      	ldr	r0, [r5, #0]
    c594:	b2e1      	uxtb	r1, r4
    c596:	f008 fc2c 	bl	14df2 <uart_poll_out>

	return c;
}
    c59a:	4620      	mov	r0, r4
    c59c:	bd38      	pop	{r3, r4, r5, pc}
    c59e:	bf00      	nop
    c5a0:	2000177c 	.word	0x2000177c

0000c5a4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    c5a4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    c5a6:	4b08      	ldr	r3, [pc, #32]	; (c5c8 <uart_console_init+0x24>)
    c5a8:	4808      	ldr	r0, [pc, #32]	; (c5cc <uart_console_init+0x28>)
    c5aa:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    c5ac:	f008 ff8b 	bl	154c6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    c5b0:	b138      	cbz	r0, c5c2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    c5b2:	4807      	ldr	r0, [pc, #28]	; (c5d0 <uart_console_init+0x2c>)
    c5b4:	f7ff fdda 	bl	c16c <__stdout_hook_install>
	__printk_hook_install(console_out);
    c5b8:	4805      	ldr	r0, [pc, #20]	; (c5d0 <uart_console_init+0x2c>)
    c5ba:	f7fe fdf9 	bl	b1b0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    c5be:	2000      	movs	r0, #0
}
    c5c0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    c5c2:	f06f 0012 	mvn.w	r0, #18
    c5c6:	e7fb      	b.n	c5c0 <uart_console_init+0x1c>
    c5c8:	2000177c 	.word	0x2000177c
    c5cc:	00016278 	.word	0x00016278
    c5d0:	0000c581 	.word	0x0000c581

0000c5d4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    c5d4:	b530      	push	{r4, r5, lr}
	return port->config;
    c5d6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    c5d8:	7b04      	ldrb	r4, [r0, #12]
    c5da:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    c5de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    c5e2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    c5e6:	b085      	sub	sp, #20
    c5e8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    c5ec:	d104      	bne.n	c5f8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    c5ee:	4628      	mov	r0, r5
    c5f0:	f001 f976 	bl	d8e0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    c5f4:	2000      	movs	r0, #0
    c5f6:	e032      	b.n	c65e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    c5f8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    c5fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    c600:	d12f      	bne.n	c662 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    c602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    c606:	bf0c      	ite	eq
    c608:	2304      	moveq	r3, #4
    c60a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    c60c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    c610:	6883      	ldr	r3, [r0, #8]
    c612:	fa23 f101 	lsr.w	r1, r3, r1
    c616:	07c9      	lsls	r1, r1, #31
    c618:	d42f      	bmi.n	c67a <gpio_nrfx_pin_interrupt_configure+0xa6>
    c61a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    c61e:	d12c      	bne.n	c67a <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    c620:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    c622:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    c624:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    c628:	4a1c      	ldr	r2, [pc, #112]	; (c69c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    c62a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    c62e:	bf18      	it	ne
    c630:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    c634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    c638:	07db      	lsls	r3, r3, #31
    c63a:	d41e      	bmi.n	c67a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    c63c:	f10d 0407 	add.w	r4, sp, #7
    c640:	4621      	mov	r1, r4
    c642:	4628      	mov	r0, r5
    c644:	f001 f8b0 	bl	d7a8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    c648:	4b15      	ldr	r3, [pc, #84]	; (c6a0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    c64a:	4298      	cmp	r0, r3
    c64c:	d114      	bne.n	c678 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    c64e:	4620      	mov	r0, r4
    c650:	f001 f8f8 	bl	d844 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    c654:	4b13      	ldr	r3, [pc, #76]	; (c6a4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    c656:	4298      	cmp	r0, r3
    c658:	d00e      	beq.n	c678 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    c65a:	f06f 000b 	mvn.w	r0, #11
}
    c65e:	b005      	add	sp, #20
    c660:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c662:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    c666:	d005      	beq.n	c674 <gpio_nrfx_pin_interrupt_configure+0xa0>
    c668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    c66c:	bf0c      	ite	eq
    c66e:	2302      	moveq	r3, #2
    c670:	2301      	movne	r3, #1
    c672:	e7cb      	b.n	c60c <gpio_nrfx_pin_interrupt_configure+0x38>
    c674:	2303      	movs	r3, #3
    c676:	e7c9      	b.n	c60c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    c678:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    c67a:	2300      	movs	r3, #0
    c67c:	4619      	mov	r1, r3
    c67e:	aa02      	add	r2, sp, #8
    c680:	4628      	mov	r0, r5
    c682:	f000 ff6b 	bl	d55c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    c686:	4b07      	ldr	r3, [pc, #28]	; (c6a4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    c688:	4298      	cmp	r0, r3
    c68a:	d104      	bne.n	c696 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    c68c:	2101      	movs	r1, #1
    c68e:	4628      	mov	r0, r5
    c690:	f001 f8de 	bl	d850 <nrfx_gpiote_trigger_enable>
    c694:	e7ae      	b.n	c5f4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    c696:	f06f 0004 	mvn.w	r0, #4
    c69a:	e7e0      	b.n	c65e <gpio_nrfx_pin_interrupt_configure+0x8a>
    c69c:	50000300 	.word	0x50000300
    c6a0:	0bad0004 	.word	0x0bad0004
    c6a4:	0bad0000 	.word	0x0bad0000

0000c6a8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    c6a8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    c6aa:	f001 f8bb 	bl	d824 <nrfx_gpiote_is_init>
    c6ae:	4604      	mov	r4, r0
    c6b0:	b968      	cbnz	r0, c6ce <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    c6b2:	f001 f88f 	bl	d7d4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    c6b6:	4b08      	ldr	r3, [pc, #32]	; (c6d8 <gpio_nrfx_init+0x30>)
    c6b8:	4298      	cmp	r0, r3
    c6ba:	d10a      	bne.n	c6d2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    c6bc:	4807      	ldr	r0, [pc, #28]	; (c6dc <gpio_nrfx_init+0x34>)
    c6be:	4621      	mov	r1, r4
    c6c0:	f001 f86c 	bl	d79c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    c6c4:	4622      	mov	r2, r4
    c6c6:	2105      	movs	r1, #5
    c6c8:	2006      	movs	r0, #6
    c6ca:	f7ff f95f 	bl	b98c <z_arm_irq_priority_set>
		return 0;
    c6ce:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    c6d0:	bd10      	pop	{r4, pc}
		return -EIO;
    c6d2:	f06f 0004 	mvn.w	r0, #4
    c6d6:	e7fb      	b.n	c6d0 <gpio_nrfx_init+0x28>
    c6d8:	0bad0000 	.word	0x0bad0000
    c6dc:	0000c6e1 	.word	0x0000c6e1

0000c6e0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    c6e0:	0943      	lsrs	r3, r0, #5
{
    c6e2:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    c6e4:	d002      	beq.n	c6ec <nrfx_gpio_handler+0xc>
    c6e6:	2b01      	cmp	r3, #1
    c6e8:	d015      	beq.n	c716 <nrfx_gpio_handler+0x36>
}
    c6ea:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    c6ec:	4e0b      	ldr	r6, [pc, #44]	; (c71c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    c6ee:	6933      	ldr	r3, [r6, #16]
    c6f0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    c6f2:	2900      	cmp	r1, #0
    c6f4:	d0f9      	beq.n	c6ea <nrfx_gpio_handler+0xa>
    *p_pin = pin_number & 0x1F;
    c6f6:	f000 031f 	and.w	r3, r0, #31
    c6fa:	2501      	movs	r5, #1
    c6fc:	680c      	ldr	r4, [r1, #0]
    c6fe:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    c700:	688a      	ldr	r2, [r1, #8]
    c702:	402a      	ands	r2, r5
    c704:	d002      	beq.n	c70c <nrfx_gpio_handler+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    c706:	684b      	ldr	r3, [r1, #4]
    c708:	4630      	mov	r0, r6
    c70a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    c70c:	2c00      	cmp	r4, #0
    c70e:	d0ec      	beq.n	c6ea <nrfx_gpio_handler+0xa>
    c710:	4621      	mov	r1, r4
    c712:	6824      	ldr	r4, [r4, #0]
    c714:	e7f4      	b.n	c700 <nrfx_gpio_handler+0x20>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    c716:	4e02      	ldr	r6, [pc, #8]	; (c720 <nrfx_gpio_handler+0x40>)
    c718:	e7e9      	b.n	c6ee <nrfx_gpio_handler+0xe>
    c71a:	bf00      	nop
    c71c:	00016230 	.word	0x00016230
    c720:	00016248 	.word	0x00016248

0000c724 <gpio_nrfx_pin_configure>:
{
    c724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    c728:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    c72a:	7b3b      	ldrb	r3, [r7, #12]
    c72c:	f001 051f 	and.w	r5, r1, #31
{
    c730:	b085      	sub	sp, #20
    c732:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    c734:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    c738:	4614      	mov	r4, r2
    c73a:	b9ca      	cbnz	r2, c770 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    c73c:	a902      	add	r1, sp, #8
    c73e:	4628      	mov	r0, r5
    c740:	f001 f832 	bl	d7a8 <nrfx_gpiote_channel_get>
    c744:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    c746:	4628      	mov	r0, r5
    c748:	f001 f8f2 	bl	d930 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    c74c:	4b4a      	ldr	r3, [pc, #296]	; (c878 <gpio_nrfx_pin_configure+0x154>)
    c74e:	4298      	cmp	r0, r3
    c750:	d004      	beq.n	c75c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    c752:	f06f 0004 	mvn.w	r0, #4
}
    c756:	b005      	add	sp, #20
    c758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    c75c:	4284      	cmp	r4, r0
    c75e:	d105      	bne.n	c76c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    c760:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c764:	f001 f868 	bl	d838 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    c768:	42a0      	cmp	r0, r4
    c76a:	d1f2      	bne.n	c752 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    c76c:	2000      	movs	r0, #0
    c76e:	e7f2      	b.n	c756 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    c770:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    c774:	f10d 0103 	add.w	r1, sp, #3
    c778:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    c77a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    c77e:	f001 f813 	bl	d7a8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    c782:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    c784:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    c786:	aa02      	add	r2, sp, #8
    c788:	4649      	mov	r1, r9
    c78a:	4628      	mov	r0, r5
    c78c:	f000 fee6 	bl	d55c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    c790:	4b39      	ldr	r3, [pc, #228]	; (c878 <gpio_nrfx_pin_configure+0x154>)
    c792:	4298      	cmp	r0, r3
    c794:	d002      	beq.n	c79c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c796:	f06f 0015 	mvn.w	r0, #21
    c79a:	e7dc      	b.n	c756 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    c79c:	4580      	cmp	r8, r0
    c79e:	d103      	bne.n	c7a8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    c7a0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    c7a4:	f001 f848 	bl	d838 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    c7a8:	03a3      	lsls	r3, r4, #14
    c7aa:	d551      	bpl.n	c850 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c7ac:	f240 6306 	movw	r3, #1542	; 0x606
    c7b0:	4023      	ands	r3, r4
    c7b2:	f240 2206 	movw	r2, #518	; 0x206
    c7b6:	4293      	cmp	r3, r2
    c7b8:	d03b      	beq.n	c832 <gpio_nrfx_pin_configure+0x10e>
    c7ba:	d80c      	bhi.n	c7d6 <gpio_nrfx_pin_configure+0xb2>
    c7bc:	2b06      	cmp	r3, #6
    c7be:	d015      	beq.n	c7ec <gpio_nrfx_pin_configure+0xc8>
    c7c0:	d804      	bhi.n	c7cc <gpio_nrfx_pin_configure+0xa8>
    c7c2:	b19b      	cbz	r3, c7ec <gpio_nrfx_pin_configure+0xc8>
    c7c4:	2b02      	cmp	r3, #2
    c7c6:	d1e6      	bne.n	c796 <gpio_nrfx_pin_configure+0x72>
    c7c8:	2304      	movs	r3, #4
    c7ca:	e00f      	b.n	c7ec <gpio_nrfx_pin_configure+0xc8>
    c7cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c7d0:	d1e1      	bne.n	c796 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    c7d2:	2301      	movs	r3, #1
    c7d4:	e00a      	b.n	c7ec <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c7d6:	f240 4202 	movw	r2, #1026	; 0x402
    c7da:	4293      	cmp	r3, r2
    c7dc:	d02b      	beq.n	c836 <gpio_nrfx_pin_configure+0x112>
    c7de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    c7e2:	d02a      	beq.n	c83a <gpio_nrfx_pin_configure+0x116>
    c7e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c7e8:	d1d5      	bne.n	c796 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    c7ea:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    c7ec:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    c7f0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    c7f4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    c7f8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    c7fa:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    c7fe:	bf54      	ite	pl
    c800:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    c804:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    c806:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    c808:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    c80c:	d517      	bpl.n	c83e <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    c80e:	687b      	ldr	r3, [r7, #4]
    c810:	2101      	movs	r1, #1
    c812:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    c816:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    c81a:	2200      	movs	r2, #0
    c81c:	a901      	add	r1, sp, #4
    c81e:	4628      	mov	r0, r5
    c820:	f000 ff4a 	bl	d6b8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    c824:	4b14      	ldr	r3, [pc, #80]	; (c878 <gpio_nrfx_pin_configure+0x154>)
    c826:	4298      	cmp	r0, r3
    c828:	bf14      	ite	ne
    c82a:	f06f 0015 	mvnne.w	r0, #21
    c82e:	2000      	moveq	r0, #0
    c830:	e791      	b.n	c756 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    c832:	2307      	movs	r3, #7
    c834:	e7da      	b.n	c7ec <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    c836:	2305      	movs	r3, #5
    c838:	e7d8      	b.n	c7ec <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    c83a:	2303      	movs	r3, #3
    c83c:	e7d6      	b.n	c7ec <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    c83e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    c840:	bf41      	itttt	mi
    c842:	687b      	ldrmi	r3, [r7, #4]
    c844:	2101      	movmi	r1, #1
    c846:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    c84a:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    c84e:	e7e4      	b.n	c81a <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    c850:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    c852:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    c856:	bf54      	ite	pl
    c858:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    c85c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    c85e:	461a      	mov	r2, r3
    c860:	a901      	add	r1, sp, #4
    c862:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    c864:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    c868:	f000 fe78 	bl	d55c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    c86c:	4b02      	ldr	r3, [pc, #8]	; (c878 <gpio_nrfx_pin_configure+0x154>)
    c86e:	4298      	cmp	r0, r3
    c870:	f43f af7c 	beq.w	c76c <gpio_nrfx_pin_configure+0x48>
    c874:	e78f      	b.n	c796 <gpio_nrfx_pin_configure+0x72>
    c876:	bf00      	nop
    c878:	0bad0000 	.word	0x0bad0000

0000c87c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    c87c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    c87e:	794b      	ldrb	r3, [r1, #5]
    c880:	2b01      	cmp	r3, #1
    c882:	d026      	beq.n	c8d2 <uarte_nrfx_configure+0x56>
    c884:	2b03      	cmp	r3, #3
    c886:	d121      	bne.n	c8cc <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    c888:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    c88a:	798b      	ldrb	r3, [r1, #6]
    c88c:	2b03      	cmp	r3, #3
    c88e:	d11d      	bne.n	c8cc <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    c890:	79cc      	ldrb	r4, [r1, #7]
    c892:	b10c      	cbz	r4, c898 <uarte_nrfx_configure+0x1c>
    c894:	2c01      	cmp	r4, #1
    c896:	d119      	bne.n	c8cc <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    c898:	790a      	ldrb	r2, [r1, #4]
    c89a:	b112      	cbz	r2, c8a2 <uarte_nrfx_configure+0x26>
    c89c:	2a02      	cmp	r2, #2
    c89e:	d115      	bne.n	c8cc <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    c8a0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    c8a2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    c8a4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    c8a6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    c8aa:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    c8ac:	d065      	beq.n	c97a <uarte_nrfx_configure+0xfe>
    c8ae:	d82d      	bhi.n	c90c <uarte_nrfx_configure+0x90>
    c8b0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    c8b4:	d064      	beq.n	c980 <uarte_nrfx_configure+0x104>
    c8b6:	d816      	bhi.n	c8e6 <uarte_nrfx_configure+0x6a>
    c8b8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    c8bc:	d062      	beq.n	c984 <uarte_nrfx_configure+0x108>
    c8be:	d80a      	bhi.n	c8d6 <uarte_nrfx_configure+0x5a>
    c8c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    c8c4:	d061      	beq.n	c98a <uarte_nrfx_configure+0x10e>
    c8c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    c8ca:	d061      	beq.n	c990 <uarte_nrfx_configure+0x114>
    c8cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c8d0:	e052      	b.n	c978 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    c8d2:	2600      	movs	r6, #0
    c8d4:	e7d9      	b.n	c88a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    c8d6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    c8da:	d05c      	beq.n	c996 <uarte_nrfx_configure+0x11a>
    c8dc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    c8e0:	d1f4      	bne.n	c8cc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    c8e2:	4b37      	ldr	r3, [pc, #220]	; (c9c0 <uarte_nrfx_configure+0x144>)
    c8e4:	e03c      	b.n	c960 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    c8e6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    c8ea:	d057      	beq.n	c99c <uarte_nrfx_configure+0x120>
    c8ec:	d807      	bhi.n	c8fe <uarte_nrfx_configure+0x82>
    c8ee:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    c8f2:	d055      	beq.n	c9a0 <uarte_nrfx_configure+0x124>
    c8f4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    c8f8:	d1e8      	bne.n	c8cc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    c8fa:	4b32      	ldr	r3, [pc, #200]	; (c9c4 <uarte_nrfx_configure+0x148>)
    c8fc:	e030      	b.n	c960 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    c8fe:	f647 2712 	movw	r7, #31250	; 0x7a12
    c902:	42bb      	cmp	r3, r7
    c904:	d1e2      	bne.n	c8cc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    c906:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    c90a:	e029      	b.n	c960 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    c90c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    c910:	d048      	beq.n	c9a4 <uarte_nrfx_configure+0x128>
    c912:	d813      	bhi.n	c93c <uarte_nrfx_configure+0xc0>
    c914:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    c918:	d047      	beq.n	c9aa <uarte_nrfx_configure+0x12e>
    c91a:	d809      	bhi.n	c930 <uarte_nrfx_configure+0xb4>
    c91c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    c920:	42bb      	cmp	r3, r7
    c922:	d044      	beq.n	c9ae <uarte_nrfx_configure+0x132>
    c924:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    c928:	d1d0      	bne.n	c8cc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    c92a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    c92e:	e017      	b.n	c960 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    c930:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    c934:	d1ca      	bne.n	c8cc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    c936:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    c93a:	e011      	b.n	c960 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    c93c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    c940:	d038      	beq.n	c9b4 <uarte_nrfx_configure+0x138>
    c942:	d808      	bhi.n	c956 <uarte_nrfx_configure+0xda>
    c944:	4f20      	ldr	r7, [pc, #128]	; (c9c8 <uarte_nrfx_configure+0x14c>)
    c946:	42bb      	cmp	r3, r7
    c948:	d037      	beq.n	c9ba <uarte_nrfx_configure+0x13e>
    c94a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    c94e:	d1bd      	bne.n	c8cc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    c950:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    c954:	e004      	b.n	c960 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    c956:	4f1d      	ldr	r7, [pc, #116]	; (c9cc <uarte_nrfx_configure+0x150>)
    c958:	42bb      	cmp	r3, r7
    c95a:	d1b7      	bne.n	c8cc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    c95c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    c960:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    c962:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    c966:	1d03      	adds	r3, r0, #4
    c968:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    c96a:	4334      	orrs	r4, r6
    c96c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    c96e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    c972:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    c976:	2000      	movs	r0, #0
}
    c978:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    c97a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    c97e:	e7ef      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    c980:	4b13      	ldr	r3, [pc, #76]	; (c9d0 <uarte_nrfx_configure+0x154>)
    c982:	e7ed      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    c984:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    c988:	e7ea      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    c98a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    c98e:	e7e7      	b.n	c960 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    c990:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    c994:	e7e4      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    c996:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    c99a:	e7e1      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    c99c:	4b0d      	ldr	r3, [pc, #52]	; (c9d4 <uarte_nrfx_configure+0x158>)
    c99e:	e7df      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    c9a0:	4b0d      	ldr	r3, [pc, #52]	; (c9d8 <uarte_nrfx_configure+0x15c>)
    c9a2:	e7dd      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    c9a4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    c9a8:	e7da      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    c9aa:	4b0c      	ldr	r3, [pc, #48]	; (c9dc <uarte_nrfx_configure+0x160>)
    c9ac:	e7d8      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    c9ae:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    c9b2:	e7d5      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    c9b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    c9b8:	e7d2      	b.n	c960 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    c9ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    c9be:	e7cf      	b.n	c960 <uarte_nrfx_configure+0xe4>
    c9c0:	0013b000 	.word	0x0013b000
    c9c4:	004ea000 	.word	0x004ea000
    c9c8:	0003d090 	.word	0x0003d090
    c9cc:	000f4240 	.word	0x000f4240
    c9d0:	00275000 	.word	0x00275000
    c9d4:	0075c000 	.word	0x0075c000
    c9d8:	003af000 	.word	0x003af000
    c9dc:	013a9000 	.word	0x013a9000

0000c9e0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    c9e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    c9e4:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    c9e8:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    c9ea:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    c9ee:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c9f2:	2100      	movs	r1, #0
    c9f4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    c9f8:	4607      	mov	r7, r0
	data->dev = dev;
    c9fa:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    c9fc:	aa01      	add	r2, sp, #4
    c9fe:	4648      	mov	r0, r9
    ca00:	f008 fbe0 	bl	151c4 <pinctrl_lookup_state>
	if (ret < 0) {
    ca04:	1e05      	subs	r5, r0, #0
    ca06:	db56      	blt.n	cab6 <uarte_instance_init.constprop.0+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    ca08:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    ca0a:	f8d9 2000 	ldr.w	r2, [r9]
    ca0e:	7919      	ldrb	r1, [r3, #4]
    ca10:	6818      	ldr	r0, [r3, #0]
    ca12:	f008 fbf4 	bl	151fe <pinctrl_configure_pins>
	if (err < 0) {
    ca16:	1e05      	subs	r5, r0, #0
    ca18:	db4d      	blt.n	cab6 <uarte_instance_init.constprop.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    ca1a:	1d31      	adds	r1, r6, #4
    ca1c:	4638      	mov	r0, r7
    ca1e:	f7ff ff2d 	bl	c87c <uarte_nrfx_configure>
	if (err) {
    ca22:	4605      	mov	r5, r0
    ca24:	2800      	cmp	r0, #0
    ca26:	d146      	bne.n	cab6 <uarte_instance_init.constprop.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    ca28:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    ca2c:	0799      	lsls	r1, r3, #30
    ca2e:	d519      	bpl.n	ca64 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    ca30:	f106 0016 	add.w	r0, r6, #22
    ca34:	f001 f876 	bl	db24 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    ca38:	4b22      	ldr	r3, [pc, #136]	; (cac4 <uarte_instance_init.constprop.0+0xe4>)
    ca3a:	4298      	cmp	r0, r3
    ca3c:	d13f      	bne.n	cabe <uarte_instance_init.constprop.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    ca3e:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    ca40:	00c3      	lsls	r3, r0, #3
    ca42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ca46:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    ca4a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    ca4e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    ca52:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ca56:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    ca5a:	4a1b      	ldr	r2, [pc, #108]	; (cac8 <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    ca5c:	2301      	movs	r3, #1
    ca5e:	4083      	lsls	r3, r0
    ca60:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ca64:	2308      	movs	r3, #8
    ca66:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    ca6a:	f898 3008 	ldrb.w	r3, [r8, #8]
    ca6e:	b95b      	cbnz	r3, ca88 <uarte_instance_init.constprop.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca70:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ca74:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    ca78:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ca7c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    ca80:	2301      	movs	r3, #1
    ca82:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ca86:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    ca88:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ca8c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    ca8e:	bf5c      	itt	pl
    ca90:	f44f 7280 	movpl.w	r2, #256	; 0x100
    ca94:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ca98:	06db      	lsls	r3, r3, #27
    ca9a:	bf44      	itt	mi
    ca9c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    caa0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    caa4:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    caa6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    caa8:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    caac:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cab0:	2301      	movs	r3, #1
    cab2:	60a3      	str	r3, [r4, #8]
    cab4:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    cab6:	4628      	mov	r0, r5
    cab8:	b003      	add	sp, #12
    caba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    cabe:	f06f 0504 	mvn.w	r5, #4
    cac2:	e7f8      	b.n	cab6 <uarte_instance_init.constprop.0+0xd6>
    cac4:	0bad0000 	.word	0x0bad0000
    cac8:	4001f000 	.word	0x4001f000

0000cacc <uarte_nrfx_poll_out>:
{
    cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    cace:	6906      	ldr	r6, [r0, #16]
{
    cad0:	4605      	mov	r5, r0
    cad2:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    cad4:	f008 fd66 	bl	155a4 <k_is_in_isr>
    cad8:	b910      	cbnz	r0, cae0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    cada:	4b20      	ldr	r3, [pc, #128]	; (cb5c <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
    cadc:	781b      	ldrb	r3, [r3, #0]
    cade:	b983      	cbnz	r3, cb02 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    cae0:	f04f 0320 	mov.w	r3, #32
    cae4:	f3ef 8411 	mrs	r4, BASEPRI
    cae8:	f383 8812 	msr	BASEPRI_MAX, r3
    caec:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    caf0:	6868      	ldr	r0, [r5, #4]
    caf2:	f008 fa98 	bl	15026 <is_tx_ready.isra.0>
    caf6:	bb28      	cbnz	r0, cb44 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    caf8:	f384 8811 	msr	BASEPRI, r4
    cafc:	f3bf 8f6f 	isb	sy
}
    cb00:	e7ee      	b.n	cae0 <uarte_nrfx_poll_out+0x14>
{
    cb02:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    cb04:	6868      	ldr	r0, [r5, #4]
    cb06:	f008 fa8e 	bl	15026 <is_tx_ready.isra.0>
    cb0a:	b970      	cbnz	r0, cb2a <uarte_nrfx_poll_out+0x5e>
    cb0c:	2001      	movs	r0, #1
    cb0e:	f008 fc2e 	bl	1536e <nrfx_busy_wait>
    cb12:	3c01      	subs	r4, #1
    cb14:	d1f6      	bne.n	cb04 <uarte_nrfx_poll_out+0x38>
    cb16:	2100      	movs	r1, #0
    cb18:	2021      	movs	r0, #33	; 0x21
    cb1a:	f001 fe03 	bl	e724 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    cb1e:	e7f0      	b.n	cb02 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    cb20:	f384 8811 	msr	BASEPRI, r4
    cb24:	f3bf 8f6f 	isb	sy
}
    cb28:	e7f5      	b.n	cb16 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    cb2a:	f04f 0320 	mov.w	r3, #32
    cb2e:	f3ef 8411 	mrs	r4, BASEPRI
    cb32:	f383 8812 	msr	BASEPRI_MAX, r3
    cb36:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    cb3a:	6868      	ldr	r0, [r5, #4]
    cb3c:	f008 fa73 	bl	15026 <is_tx_ready.isra.0>
    cb40:	2800      	cmp	r0, #0
    cb42:	d0ed      	beq.n	cb20 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    cb44:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    cb46:	2201      	movs	r2, #1
	data->char_out = c;
    cb48:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    cb4c:	6868      	ldr	r0, [r5, #4]
    cb4e:	f008 fa4f 	bl	14ff0 <tx_start.isra.0>
	__asm__ volatile(
    cb52:	f384 8811 	msr	BASEPRI, r4
    cb56:	f3bf 8f6f 	isb	sy
}
    cb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb5c:	200022ca 	.word	0x200022ca

0000cb60 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    cb60:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    cb62:	2301      	movs	r3, #1
    cb64:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cb66:	4a11      	ldr	r2, [pc, #68]	; (cbac <compare_int_lock+0x4c>)
    cb68:	f3bf 8f5b 	dmb	ish
    cb6c:	43dc      	mvns	r4, r3
    cb6e:	e852 1f00 	ldrex	r1, [r2]
    cb72:	ea01 0c04 	and.w	ip, r1, r4
    cb76:	e842 ce00 	strex	lr, ip, [r2]
    cb7a:	f1be 0f00 	cmp.w	lr, #0
    cb7e:	d1f6      	bne.n	cb6e <compare_int_lock+0xe>
    cb80:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    cb84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    cb88:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    cb8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    cb90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    cb94:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    cb98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cb9c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    cba0:	420b      	tst	r3, r1
}
    cba2:	bf14      	ite	ne
    cba4:	2001      	movne	r0, #1
    cba6:	2000      	moveq	r0, #0
    cba8:	bd10      	pop	{r4, pc}
    cbaa:	bf00      	nop
    cbac:	2000179c 	.word	0x2000179c

0000cbb0 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    cbb0:	4919      	ldr	r1, [pc, #100]	; (cc18 <sys_clock_timeout_handler+0x68>)
{
    cbb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cbb4:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    cbb6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    cbba:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    cbbc:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    cbc0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    cbc4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    cbc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    cbca:	d222      	bcs.n	cc12 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    cbcc:	4b13      	ldr	r3, [pc, #76]	; (cc1c <sys_clock_timeout_handler+0x6c>)
    cbce:	681b      	ldr	r3, [r3, #0]
    cbd0:	0a1a      	lsrs	r2, r3, #8
    cbd2:	061b      	lsls	r3, r3, #24
    cbd4:	195e      	adds	r6, r3, r5
    cbd6:	4b12      	ldr	r3, [pc, #72]	; (cc20 <sys_clock_timeout_handler+0x70>)
    cbd8:	f142 0700 	adc.w	r7, r2, #0
    cbdc:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    cbe0:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    cbe2:	f001 feed 	bl	e9c0 <sys_clock_announce>
    return p_reg->CC[ch];
    cbe6:	00a3      	lsls	r3, r4, #2
    cbe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cbec:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    cbf0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    cbf4:	42aa      	cmp	r2, r5
    cbf6:	d10b      	bne.n	cc10 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    cbf8:	b91e      	cbnz	r6, cc02 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    cbfa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    cbfe:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    cc02:	4b08      	ldr	r3, [pc, #32]	; (cc24 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    cc04:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    cc08:	fa00 f404 	lsl.w	r4, r0, r4
    cc0c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    cc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    cc12:	2600      	movs	r6, #0
    cc14:	e7e5      	b.n	cbe2 <sys_clock_timeout_handler+0x32>
    cc16:	bf00      	nop
    cc18:	20000670 	.word	0x20000670
    cc1c:	200017a0 	.word	0x200017a0
    cc20:	20000658 	.word	0x20000658
    cc24:	40011000 	.word	0x40011000

0000cc28 <compare_int_unlock>:
	if (key) {
    cc28:	b319      	cbz	r1, cc72 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc2a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    cc2e:	2301      	movs	r3, #1
    cc30:	4a10      	ldr	r2, [pc, #64]	; (cc74 <compare_int_unlock+0x4c>)
    cc32:	4083      	lsls	r3, r0
    cc34:	e852 1f00 	ldrex	r1, [r2]
    cc38:	4319      	orrs	r1, r3
    cc3a:	e842 1c00 	strex	ip, r1, [r2]
    cc3e:	f1bc 0f00 	cmp.w	ip, #0
    cc42:	d1f7      	bne.n	cc34 <compare_int_unlock+0xc>
    cc44:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    cc48:	4a0b      	ldr	r2, [pc, #44]	; (cc78 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    cc4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    cc4e:	4083      	lsls	r3, r0
    cc50:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cc54:	4b09      	ldr	r3, [pc, #36]	; (cc7c <compare_int_unlock+0x54>)
    cc56:	f3bf 8f5b 	dmb	ish
    cc5a:	681b      	ldr	r3, [r3, #0]
    cc5c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    cc60:	fa23 f000 	lsr.w	r0, r3, r0
    cc64:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc66:	bf42      	ittt	mi
    cc68:	4b05      	ldrmi	r3, [pc, #20]	; (cc80 <compare_int_unlock+0x58>)
    cc6a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    cc6e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    cc72:	4770      	bx	lr
    cc74:	2000179c 	.word	0x2000179c
    cc78:	40011000 	.word	0x40011000
    cc7c:	20001798 	.word	0x20001798
    cc80:	e000e100 	.word	0xe000e100

0000cc84 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    cc84:	4b0d      	ldr	r3, [pc, #52]	; (ccbc <z_nrf_rtc_timer_read+0x38>)
    cc86:	6818      	ldr	r0, [r3, #0]
    cc88:	0a01      	lsrs	r1, r0, #8
    cc8a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    cc8c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    cc90:	4b0b      	ldr	r3, [pc, #44]	; (ccc0 <z_nrf_rtc_timer_read+0x3c>)
    cc92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    cc96:	1818      	adds	r0, r3, r0
    cc98:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    cc9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    cca0:	d20a      	bcs.n	ccb8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    cca2:	4b08      	ldr	r3, [pc, #32]	; (ccc4 <z_nrf_rtc_timer_read+0x40>)
    cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cca8:	4290      	cmp	r0, r2
    ccaa:	eb71 0303 	sbcs.w	r3, r1, r3
    ccae:	d203      	bcs.n	ccb8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    ccb0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    ccb4:	f141 0100 	adc.w	r1, r1, #0
}
    ccb8:	4770      	bx	lr
    ccba:	bf00      	nop
    ccbc:	200017a0 	.word	0x200017a0
    ccc0:	40011000 	.word	0x40011000
    ccc4:	20000658 	.word	0x20000658

0000ccc8 <compare_set>:
{
    ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cccc:	ed2d 8b02 	vpush	{d8}
    ccd0:	b085      	sub	sp, #20
    ccd2:	4616      	mov	r6, r2
    ccd4:	4698      	mov	r8, r3
    ccd6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    ccd8:	f7ff ff42 	bl	cb60 <compare_int_lock>
    ccdc:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    cce0:	f7ff ffd0 	bl	cc84 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    cce4:	42b0      	cmp	r0, r6
    cce6:	eb71 0308 	sbcs.w	r3, r1, r8
    ccea:	d27b      	bcs.n	cde4 <compare_set+0x11c>
		if (target_time - curr_time > COUNTER_SPAN) {
    ccec:	4b47      	ldr	r3, [pc, #284]	; (ce0c <compare_set+0x144>)
    ccee:	1a30      	subs	r0, r6, r0
    ccf0:	eb68 0101 	sbc.w	r1, r8, r1
    ccf4:	4298      	cmp	r0, r3
    ccf6:	f171 0300 	sbcs.w	r3, r1, #0
    ccfa:	f080 8084 	bcs.w	ce06 <compare_set+0x13e>
		if (target_time != cc_data[chan].target_time) {
    ccfe:	4b44      	ldr	r3, [pc, #272]	; (ce10 <compare_set+0x148>)
    cd00:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    cd04:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    cd08:	45d8      	cmp	r8, fp
    cd0a:	bf08      	it	eq
    cd0c:	4556      	cmpeq	r6, sl
    cd0e:	d051      	beq.n	cdb4 <compare_set+0xec>
    cd10:	ea4f 0985 	mov.w	r9, r5, lsl #2
    cd14:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    cd18:	f105 0750 	add.w	r7, r5, #80	; 0x50
    cd1c:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    cd20:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    cd22:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    cd26:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cd2a:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    cd2c:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    cd30:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    cd34:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    cd36:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    cd3a:	4b36      	ldr	r3, [pc, #216]	; (ce14 <compare_set+0x14c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cd3c:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    cd40:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    cd42:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    cd46:	1a40      	subs	r0, r0, r1
    cd48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    cd4c:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    cd50:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    cd52:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    cd56:	d107      	bne.n	cd68 <compare_set+0xa0>
    cd58:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    cd5c:	2013      	movs	r0, #19
    cd5e:	f008 fd26 	bl	157ae <z_impl_k_busy_wait>
    cd62:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    cd66:	4b2b      	ldr	r3, [pc, #172]	; (ce14 <compare_set+0x14c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    cd68:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    cd6c:	eba4 000c 	sub.w	r0, r4, ip
    cd70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    cd74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cd78:	bf88      	it	hi
    cd7a:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cd7c:	2000      	movs	r0, #0
    cd7e:	6038      	str	r0, [r7, #0]
    cd80:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    cd82:	9801      	ldr	r0, [sp, #4]
    cd84:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    cd88:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    cd8c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    cd90:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    cd94:	4281      	cmp	r1, r0
    cd96:	d006      	beq.n	cda6 <compare_set+0xde>
	return (a - b) & COUNTER_MAX;
    cd98:	1a20      	subs	r0, r4, r0
    cd9a:	3802      	subs	r0, #2
    cd9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    cda0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cda4:	d81c      	bhi.n	cde0 <compare_set+0x118>
	return (a - b) & COUNTER_MAX;
    cda6:	1aa4      	subs	r4, r4, r2
    cda8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    cdac:	eb14 0a06 	adds.w	sl, r4, r6
    cdb0:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    cdb4:	4916      	ldr	r1, [pc, #88]	; (ce10 <compare_set+0x148>)
	cc_data[chan].callback = handler;
    cdb6:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
    cdb8:	012b      	lsls	r3, r5, #4
    cdba:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    cdbe:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    cdc2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    cdc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cdc6:	6053      	str	r3, [r2, #4]
	return ret;
    cdc8:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    cdca:	4628      	mov	r0, r5
    cdcc:	ee18 1a10 	vmov	r1, s16
    cdd0:	f7ff ff2a 	bl	cc28 <compare_int_unlock>
}
    cdd4:	4620      	mov	r0, r4
    cdd6:	b005      	add	sp, #20
    cdd8:	ecbd 8b02 	vpop	{d8}
    cddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cde0:	4620      	mov	r0, r4
    cde2:	e7ae      	b.n	cd42 <compare_set+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    cde4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cde6:	4a0c      	ldr	r2, [pc, #48]	; (ce18 <compare_set+0x150>)
    cde8:	f3bf 8f5b 	dmb	ish
    cdec:	40ab      	lsls	r3, r5
    cdee:	e852 1f00 	ldrex	r1, [r2]
    cdf2:	4319      	orrs	r1, r3
    cdf4:	e842 1000 	strex	r0, r1, [r2]
    cdf8:	2800      	cmp	r0, #0
    cdfa:	d1f8      	bne.n	cdee <compare_set+0x126>
    cdfc:	f3bf 8f5b 	dmb	ish
    ce00:	46b2      	mov	sl, r6
    ce02:	46c3      	mov	fp, r8
    ce04:	e7d6      	b.n	cdb4 <compare_set+0xec>
			return -EINVAL;
    ce06:	f06f 0415 	mvn.w	r4, #21
    ce0a:	e7de      	b.n	cdca <compare_set+0x102>
    ce0c:	01000001 	.word	0x01000001
    ce10:	20000660 	.word	0x20000660
    ce14:	40011000 	.word	0x40011000
    ce18:	20001798 	.word	0x20001798

0000ce1c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    ce1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    ce1e:	4b19      	ldr	r3, [pc, #100]	; (ce84 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    ce20:	4d19      	ldr	r5, [pc, #100]	; (ce88 <sys_clock_driver_init+0x6c>)
    ce22:	2400      	movs	r4, #0
    ce24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ce28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ce2c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    ce30:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    ce34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ce38:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ce3c:	4b13      	ldr	r3, [pc, #76]	; (ce8c <sys_clock_driver_init+0x70>)
    ce3e:	2602      	movs	r6, #2
    ce40:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    ce44:	2101      	movs	r1, #1
    ce46:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    ce4a:	2011      	movs	r0, #17
    ce4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ce50:	4622      	mov	r2, r4
    ce52:	f7fe fd9b 	bl	b98c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    ce56:	2011      	movs	r0, #17
    ce58:	f7fe fd7a 	bl	b950 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    ce5c:	4a0c      	ldr	r2, [pc, #48]	; (ce90 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    ce5e:	2301      	movs	r3, #1
    ce60:	60ab      	str	r3, [r5, #8]
    ce62:	602b      	str	r3, [r5, #0]
    ce64:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    ce66:	4b0b      	ldr	r3, [pc, #44]	; (ce94 <sys_clock_driver_init+0x78>)
    ce68:	4a0b      	ldr	r2, [pc, #44]	; (ce98 <sys_clock_driver_init+0x7c>)
    ce6a:	9300      	str	r3, [sp, #0]
    ce6c:	9401      	str	r4, [sp, #4]
    ce6e:	2300      	movs	r3, #0
    ce70:	4620      	mov	r0, r4
    ce72:	f7ff ff29 	bl	ccc8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    ce76:	4630      	mov	r0, r6
    ce78:	f7ff fb02 	bl	c480 <z_nrf_clock_control_lf_on>

	return 0;
}
    ce7c:	4620      	mov	r0, r4
    ce7e:	b002      	add	sp, #8
    ce80:	bd70      	pop	{r4, r5, r6, pc}
    ce82:	bf00      	nop
    ce84:	20000660 	.word	0x20000660
    ce88:	40011000 	.word	0x40011000
    ce8c:	e000e100 	.word	0xe000e100
    ce90:	2000179c 	.word	0x2000179c
    ce94:	0000cbb1 	.word	0x0000cbb1
    ce98:	007fffff 	.word	0x007fffff

0000ce9c <rtc_nrf_isr>:
{
    ce9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    cea0:	4c36      	ldr	r4, [pc, #216]	; (cf7c <rtc_nrf_isr+0xe0>)
    cea2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    cea6:	079a      	lsls	r2, r3, #30
    cea8:	d50b      	bpl.n	cec2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ceaa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    ceae:	b143      	cbz	r3, cec2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    ceb0:	4a33      	ldr	r2, [pc, #204]	; (cf80 <rtc_nrf_isr+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ceb2:	2300      	movs	r3, #0
    ceb4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    ceb8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    cebc:	6813      	ldr	r3, [r2, #0]
    cebe:	3301      	adds	r3, #1
    cec0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    cec2:	f04f 0320 	mov.w	r3, #32
    cec6:	f3ef 8211 	mrs	r2, BASEPRI
    ceca:	f383 8812 	msr	BASEPRI_MAX, r3
    cece:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    ced2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    ced6:	03db      	lsls	r3, r3, #15
    ced8:	d512      	bpl.n	cf00 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ceda:	f3bf 8f5b 	dmb	ish
    cede:	4b29      	ldr	r3, [pc, #164]	; (cf84 <rtc_nrf_isr+0xe8>)
    cee0:	e853 1f00 	ldrex	r1, [r3]
    cee4:	f021 0001 	bic.w	r0, r1, #1
    cee8:	e843 0600 	strex	r6, r0, [r3]
    ceec:	2e00      	cmp	r6, #0
    ceee:	d1f7      	bne.n	cee0 <rtc_nrf_isr+0x44>
    cef0:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    cef4:	2900      	cmp	r1, #0
    cef6:	d139      	bne.n	cf6c <rtc_nrf_isr+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cef8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    cefc:	2b00      	cmp	r3, #0
    cefe:	d135      	bne.n	cf6c <rtc_nrf_isr+0xd0>
{
    cf00:	2300      	movs	r3, #0
	__asm__ volatile(
    cf02:	f382 8811 	msr	BASEPRI, r2
    cf06:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    cf0a:	b363      	cbz	r3, cf66 <rtc_nrf_isr+0xca>
		curr_time = z_nrf_rtc_timer_read();
    cf0c:	f7ff feba 	bl	cc84 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    cf10:	f04f 0320 	mov.w	r3, #32
    cf14:	f3ef 8c11 	mrs	ip, BASEPRI
    cf18:	f383 8812 	msr	BASEPRI_MAX, r3
    cf1c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    cf20:	4b19      	ldr	r3, [pc, #100]	; (cf88 <rtc_nrf_isr+0xec>)
    cf22:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    cf26:	42b0      	cmp	r0, r6
    cf28:	eb71 0207 	sbcs.w	r2, r1, r7
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    cf2c:	bf28      	it	cs
    cf2e:	f04f 38ff 	movcs.w	r8, #4294967295	; 0xffffffff
    cf32:	f04f 0200 	mov.w	r2, #0
    cf36:	bf21      	itttt	cs
    cf38:	f04f 39ff 	movcs.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    cf3c:	e9d3 1500 	ldrdcs	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    cf40:	e9c3 8902 	strdcs	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    cf44:	601a      	strcs	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    cf46:	bf26      	itte	cs
    cf48:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
    cf4c:	f8c4 3348 	strcs.w	r3, [r4, #840]	; 0x348
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    cf50:	4611      	movcc	r1, r2
	__asm__ volatile(
    cf52:	f38c 8811 	msr	BASEPRI, ip
    cf56:	f3bf 8f6f 	isb	sy
		if (handler) {
    cf5a:	b121      	cbz	r1, cf66 <rtc_nrf_isr+0xca>
			handler(chan, expire_time, user_context);
    cf5c:	9500      	str	r5, [sp, #0]
    cf5e:	4632      	mov	r2, r6
    cf60:	463b      	mov	r3, r7
    cf62:	2000      	movs	r0, #0
    cf64:	4788      	blx	r1
}
    cf66:	b003      	add	sp, #12
    cf68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cf6c:	2300      	movs	r3, #0
    cf6e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    cf72:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    cf76:	2301      	movs	r3, #1
}
    cf78:	e7c3      	b.n	cf02 <rtc_nrf_isr+0x66>
    cf7a:	bf00      	nop
    cf7c:	40011000 	.word	0x40011000
    cf80:	200017a0 	.word	0x200017a0
    cf84:	20001798 	.word	0x20001798
    cf88:	20000660 	.word	0x20000660

0000cf8c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    cf8c:	1c43      	adds	r3, r0, #1
{
    cf8e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    cf90:	d021      	beq.n	cfd6 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    cf92:	2801      	cmp	r0, #1
    cf94:	dd21      	ble.n	cfda <sys_clock_set_timeout+0x4e>
    cf96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cf9a:	da20      	bge.n	cfde <sys_clock_set_timeout+0x52>
    cf9c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    cf9e:	f7ff fe71 	bl	cc84 <z_nrf_rtc_timer_read>
    cfa2:	4b10      	ldr	r3, [pc, #64]	; (cfe4 <sys_clock_set_timeout+0x58>)
    cfa4:	e9d3 1300 	ldrd	r1, r3, [r3]
    cfa8:	1a40      	subs	r0, r0, r1
		ticks = 0;
    cfaa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cfae:	bf28      	it	cs
    cfb0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    cfb2:	3001      	adds	r0, #1
    cfb4:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    cfb6:	480c      	ldr	r0, [pc, #48]	; (cfe8 <sys_clock_set_timeout+0x5c>)
    cfb8:	4282      	cmp	r2, r0
    cfba:	bf28      	it	cs
    cfbc:	4602      	movcs	r2, r0
    cfbe:	1852      	adds	r2, r2, r1
    cfc0:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    cfc4:	4909      	ldr	r1, [pc, #36]	; (cfec <sys_clock_set_timeout+0x60>)
    cfc6:	9001      	str	r0, [sp, #4]
    cfc8:	9100      	str	r1, [sp, #0]
    cfca:	f143 0300 	adc.w	r3, r3, #0
    cfce:	f7ff fe7b 	bl	ccc8 <compare_set>
}
    cfd2:	b002      	add	sp, #8
    cfd4:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    cfd6:	4804      	ldr	r0, [pc, #16]	; (cfe8 <sys_clock_set_timeout+0x5c>)
    cfd8:	e7e0      	b.n	cf9c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    cfda:	2400      	movs	r4, #0
    cfdc:	e7df      	b.n	cf9e <sys_clock_set_timeout+0x12>
    cfde:	4c02      	ldr	r4, [pc, #8]	; (cfe8 <sys_clock_set_timeout+0x5c>)
    cfe0:	e7dd      	b.n	cf9e <sys_clock_set_timeout+0x12>
    cfe2:	bf00      	nop
    cfe4:	20000670 	.word	0x20000670
    cfe8:	007fffff 	.word	0x007fffff
    cfec:	0000cbb1 	.word	0x0000cbb1

0000cff0 <sys_clock_elapsed>:
{
    cff0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    cff2:	f7ff fe47 	bl	cc84 <z_nrf_rtc_timer_read>
    cff6:	4b02      	ldr	r3, [pc, #8]	; (d000 <sys_clock_elapsed+0x10>)
    cff8:	681b      	ldr	r3, [r3, #0]
}
    cffa:	1ac0      	subs	r0, r0, r3
    cffc:	bd08      	pop	{r3, pc}
    cffe:	bf00      	nop
    d000:	20000670 	.word	0x20000670

0000d004 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    d004:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    d008:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    d00a:	2801      	cmp	r0, #1
    d00c:	4b04      	ldr	r3, [pc, #16]	; (d020 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d00e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    d012:	bf18      	it	ne
    d014:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d018:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    d01a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    d01e:	4770      	bx	lr
    d020:	50000300 	.word	0x50000300

0000d024 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    d024:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d028:	2b00      	cmp	r3, #0
{
    d02a:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d02c:	bf1c      	itt	ne
    d02e:	2100      	movne	r1, #0
    d030:	2201      	movne	r2, #1
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    d032:	f3c0 1581 	ubfx	r5, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    d036:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
    d03a:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    d03e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d042:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
        case 1: return NRF_P1;
    d046:	4b06      	ldr	r3, [pc, #24]	; (d060 <nrf_pin_configure+0x3c>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d048:	ea40 0001 	orr.w	r0, r0, r1
        case 1: return NRF_P1;
    d04c:	bf08      	it	eq
    d04e:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    d052:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d056:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    d05a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    d05e:	bd30      	pop	{r4, r5, pc}
    d060:	50000300 	.word	0x50000300

0000d064 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    d064:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    d068:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    d06a:	2801      	cmp	r0, #1
    d06c:	4b04      	ldr	r3, [pc, #16]	; (d080 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d06e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    d072:	bf18      	it	ne
    d074:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d078:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    d07a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    d07e:	4770      	bx	lr
    d080:	50000300 	.word	0x50000300

0000d084 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    d084:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    d088:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    d08c:	2a08      	cmp	r2, #8
    d08e:	d106      	bne.n	d09e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    d090:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    d094:	2b05      	cmp	r3, #5
    d096:	d802      	bhi.n	d09e <nrf52_errata_103+0x1a>
    d098:	4a02      	ldr	r2, [pc, #8]	; (d0a4 <nrf52_errata_103+0x20>)
    d09a:	5cd0      	ldrb	r0, [r2, r3]
    d09c:	4770      	bx	lr
        return false;
    d09e:	2000      	movs	r0, #0
}
    d0a0:	4770      	bx	lr
    d0a2:	bf00      	nop
    d0a4:	00045f0d 	.word	0x00045f0d

0000d0a8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    d0a8:	4a02      	ldr	r2, [pc, #8]	; (d0b4 <nvmc_wait+0xc>)
    d0aa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d0fb      	beq.n	d0aa <nvmc_wait+0x2>
}
    d0b2:	4770      	bx	lr
    d0b4:	4001e000 	.word	0x4001e000

0000d0b8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    d0b8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    d0ba:	f008 f94e 	bl	1535a <nrf52_errata_136>
    d0be:	b140      	cbz	r0, d0d2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    d0c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d0c4:	2200      	movs	r2, #0
    d0c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    d0ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    d0ce:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    d0d2:	f008 f942 	bl	1535a <nrf52_errata_136>
    d0d6:	2800      	cmp	r0, #0
    d0d8:	d046      	beq.n	d168 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    d0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d0de:	4b65      	ldr	r3, [pc, #404]	; (d274 <SystemInit+0x1bc>)
    d0e0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    d0e4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    d0e8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    d0ec:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    d0f0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    d0f4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    d0f8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    d0fc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    d100:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    d104:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    d108:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    d10c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    d110:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    d114:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    d118:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    d11c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    d120:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    d124:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    d128:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    d12c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    d130:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    d134:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    d138:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    d13c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    d140:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    d144:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    d148:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    d14c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    d150:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    d154:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    d158:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    d15c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    d160:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    d164:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    d168:	f7ff ff8c 	bl	d084 <nrf52_errata_103>
    d16c:	b118      	cbz	r0, d176 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    d16e:	4b42      	ldr	r3, [pc, #264]	; (d278 <SystemInit+0x1c0>)
    d170:	4a42      	ldr	r2, [pc, #264]	; (d27c <SystemInit+0x1c4>)
    d172:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    d176:	f7ff ff85 	bl	d084 <nrf52_errata_103>
    d17a:	b118      	cbz	r0, d184 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    d17c:	4b40      	ldr	r3, [pc, #256]	; (d280 <SystemInit+0x1c8>)
    d17e:	22fb      	movs	r2, #251	; 0xfb
    d180:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    d184:	f7ff ff7e 	bl	d084 <nrf52_errata_103>
    d188:	b170      	cbz	r0, d1a8 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    d18a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d18e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d192:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    d196:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    d19a:	f022 020f 	bic.w	r2, r2, #15
    d19e:	f003 030f 	and.w	r3, r3, #15
    d1a2:	4313      	orrs	r3, r2
    d1a4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    d1a8:	f7ff ff6c 	bl	d084 <nrf52_errata_103>
    d1ac:	b120      	cbz	r0, d1b8 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    d1ae:	4b35      	ldr	r3, [pc, #212]	; (d284 <SystemInit+0x1cc>)
    d1b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    d1b4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    d1b8:	f008 f8cf 	bl	1535a <nrf52_errata_136>
    d1bc:	b148      	cbz	r0, d1d2 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    d1be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d1c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    d1c6:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    d1c8:	bf44      	itt	mi
    d1ca:	f06f 0201 	mvnmi.w	r2, #1
    d1ce:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    d1d2:	4a2d      	ldr	r2, [pc, #180]	; (d288 <SystemInit+0x1d0>)
    d1d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    d1d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    d1dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    d1e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d1e4:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    d1e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    d1ec:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    d1f0:	2a08      	cmp	r2, #8
    d1f2:	d10e      	bne.n	d212 <SystemInit+0x15a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    d1f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    d1f8:	2b05      	cmp	r3, #5
    d1fa:	d802      	bhi.n	d202 <SystemInit+0x14a>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    d1fc:	4a23      	ldr	r2, [pc, #140]	; (d28c <SystemInit+0x1d4>)
    d1fe:	5cd3      	ldrb	r3, [r2, r3]
    d200:	b13b      	cbz	r3, d212 <SystemInit+0x15a>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    d202:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    d206:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    d20a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d20e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    d212:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    d216:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d21a:	2a00      	cmp	r2, #0
    d21c:	db03      	blt.n	d226 <SystemInit+0x16e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    d21e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    d222:	2b00      	cmp	r3, #0
    d224:	da22      	bge.n	d26c <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    d226:	491a      	ldr	r1, [pc, #104]	; (d290 <SystemInit+0x1d8>)
    d228:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    d22a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    d22e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    d232:	2412      	movs	r4, #18
    nvmc_wait();
    d234:	f7ff ff38 	bl	d0a8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    d238:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    d23c:	f7ff ff34 	bl	d0a8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    d240:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    d244:	f7ff ff30 	bl	d0a8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    d248:	2300      	movs	r3, #0
    d24a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    d24e:	f7ff ff2b 	bl	d0a8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    d252:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d256:	490c      	ldr	r1, [pc, #48]	; (d288 <SystemInit+0x1d0>)
    d258:	4b0e      	ldr	r3, [pc, #56]	; (d294 <SystemInit+0x1dc>)
    d25a:	68ca      	ldr	r2, [r1, #12]
    d25c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d260:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d262:	60cb      	str	r3, [r1, #12]
    d264:	f3bf 8f4f 	dsb	sy
    __NOP();
    d268:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d26a:	e7fd      	b.n	d268 <SystemInit+0x1b0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    d26c:	4b0a      	ldr	r3, [pc, #40]	; (d298 <SystemInit+0x1e0>)
    d26e:	4a0b      	ldr	r2, [pc, #44]	; (d29c <SystemInit+0x1e4>)
    d270:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    d272:	bd10      	pop	{r4, pc}
    d274:	4000c000 	.word	0x4000c000
    d278:	40005000 	.word	0x40005000
    d27c:	00038148 	.word	0x00038148
    d280:	4000f000 	.word	0x4000f000
    d284:	40029000 	.word	0x40029000
    d288:	e000ed00 	.word	0xe000ed00
    d28c:	00045f07 	.word	0x00045f07
    d290:	4001e000 	.word	0x4001e000
    d294:	05fa0004 	.word	0x05fa0004
    d298:	200002f8 	.word	0x200002f8
    d29c:	03d09000 	.word	0x03d09000

0000d2a0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    d2a0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    d2a2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    d2a4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    d2a6:	fab2 f382 	clz	r3, r2
    d2aa:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    d2ae:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    d2b0:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    d2b2:	d014      	beq.n	d2de <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d2b4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    d2b8:	fa05 f303 	lsl.w	r3, r5, r3
    d2bc:	ea22 0303 	bic.w	r3, r2, r3
    d2c0:	e850 6f00 	ldrex	r6, [r0]
    d2c4:	4296      	cmp	r6, r2
    d2c6:	d104      	bne.n	d2d2 <nrfx_flag32_alloc+0x32>
    d2c8:	e840 3c00 	strex	ip, r3, [r0]
    d2cc:	f1bc 0f00 	cmp.w	ip, #0
    d2d0:	d1f6      	bne.n	d2c0 <nrfx_flag32_alloc+0x20>
    d2d2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    d2d6:	d1e5      	bne.n	d2a4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    d2d8:	4802      	ldr	r0, [pc, #8]	; (d2e4 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    d2da:	700c      	strb	r4, [r1, #0]
}
    d2dc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    d2de:	4802      	ldr	r0, [pc, #8]	; (d2e8 <nrfx_flag32_alloc+0x48>)
    d2e0:	e7fc      	b.n	d2dc <nrfx_flag32_alloc+0x3c>
    d2e2:	bf00      	nop
    d2e4:	0bad0000 	.word	0x0bad0000
    d2e8:	0bad0002 	.word	0x0bad0002

0000d2ec <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    d2ec:	6803      	ldr	r3, [r0, #0]
    d2ee:	40cb      	lsrs	r3, r1
    d2f0:	07db      	lsls	r3, r3, #31
{
    d2f2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    d2f4:	d415      	bmi.n	d322 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    d2f6:	2301      	movs	r3, #1
    d2f8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    d2fc:	6803      	ldr	r3, [r0, #0]
    d2fe:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    d302:	ea41 0203 	orr.w	r2, r1, r3
    d306:	e850 4f00 	ldrex	r4, [r0]
    d30a:	429c      	cmp	r4, r3
    d30c:	d104      	bne.n	d318 <nrfx_flag32_free+0x2c>
    d30e:	e840 2c00 	strex	ip, r2, [r0]
    d312:	f1bc 0f00 	cmp.w	ip, #0
    d316:	d1f6      	bne.n	d306 <nrfx_flag32_free+0x1a>
    d318:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    d31c:	d1ee      	bne.n	d2fc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    d31e:	4802      	ldr	r0, [pc, #8]	; (d328 <nrfx_flag32_free+0x3c>)
}
    d320:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d322:	4802      	ldr	r0, [pc, #8]	; (d32c <nrfx_flag32_free+0x40>)
    d324:	e7fc      	b.n	d320 <nrfx_flag32_free+0x34>
    d326:	bf00      	nop
    d328:	0bad0000 	.word	0x0bad0000
    d32c:	0bad0004 	.word	0x0bad0004

0000d330 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    d330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    d332:	4604      	mov	r4, r0
    d334:	b118      	cbz	r0, d33e <clock_stop+0xe>
    d336:	2801      	cmp	r0, #1
    d338:	d029      	beq.n	d38e <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    d33a:	b003      	add	sp, #12
    d33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    d33e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d342:	2202      	movs	r2, #2
    d344:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d348:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    d34c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d350:	2201      	movs	r2, #1
    d352:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    d354:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d356:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    d358:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    d35c:	bf14      	ite	ne
    d35e:	2500      	movne	r5, #0
    d360:	f10d 0507 	addeq.w	r5, sp, #7
    d364:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d368:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    d36c:	b1d4      	cbz	r4, d3a4 <clock_stop+0x74>
    d36e:	2c01      	cmp	r4, #1
    d370:	d1e3      	bne.n	d33a <clock_stop+0xa>
            if (p_clk_src != NULL)
    d372:	b125      	cbz	r5, d37e <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d374:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d378:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    d37c:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d37e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d382:	03db      	lsls	r3, r3, #15
    d384:	d418      	bmi.n	d3b8 <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    d386:	4b13      	ldr	r3, [pc, #76]	; (d3d4 <clock_stop+0xa4>)
    d388:	2200      	movs	r2, #0
    d38a:	715a      	strb	r2, [r3, #5]
    d38c:	e7d5      	b.n	d33a <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    d38e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d392:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    d394:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d398:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d39c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d3a0:	6058      	str	r0, [r3, #4]
}
    d3a2:	e7d7      	b.n	d354 <clock_stop+0x24>
            if (p_clk_src != NULL)
    d3a4:	b125      	cbz	r5, d3b0 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d3a6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    d3aa:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    d3ae:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d3b0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d3b4:	03da      	lsls	r2, r3, #15
    d3b6:	d5c0      	bpl.n	d33a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    d3b8:	b92d      	cbnz	r5, d3c6 <clock_stop+0x96>
    d3ba:	2001      	movs	r0, #1
    d3bc:	f007 ffd7 	bl	1536e <nrfx_busy_wait>
    d3c0:	3f01      	subs	r7, #1
    d3c2:	d1d3      	bne.n	d36c <clock_stop+0x3c>
    d3c4:	e003      	b.n	d3ce <clock_stop+0x9e>
    d3c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3ca:	2b01      	cmp	r3, #1
    d3cc:	d0f5      	beq.n	d3ba <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    d3ce:	2c01      	cmp	r4, #1
    d3d0:	d0d9      	beq.n	d386 <clock_stop+0x56>
    d3d2:	e7b2      	b.n	d33a <clock_stop+0xa>
    d3d4:	200017a4 	.word	0x200017a4

0000d3d8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    d3d8:	4b04      	ldr	r3, [pc, #16]	; (d3ec <nrfx_clock_init+0x14>)
    d3da:	791a      	ldrb	r2, [r3, #4]
    d3dc:	b922      	cbnz	r2, d3e8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    d3de:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    d3e0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    d3e2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    d3e4:	4802      	ldr	r0, [pc, #8]	; (d3f0 <nrfx_clock_init+0x18>)
    d3e6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    d3e8:	4802      	ldr	r0, [pc, #8]	; (d3f4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    d3ea:	4770      	bx	lr
    d3ec:	200017a4 	.word	0x200017a4
    d3f0:	0bad0000 	.word	0x0bad0000
    d3f4:	0bad000c 	.word	0x0bad000c

0000d3f8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d3f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    d3fc:	b510      	push	{r4, lr}
    d3fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    d402:	b16a      	cbz	r2, d420 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d404:	2200      	movs	r2, #0
    d406:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d40a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    d40e:	2201      	movs	r2, #1
    d410:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    d414:	4b11      	ldr	r3, [pc, #68]	; (d45c <nrfx_power_clock_irq_handler+0x64>)
    d416:	7958      	ldrb	r0, [r3, #5]
    d418:	b910      	cbnz	r0, d420 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    d41a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    d41c:	681b      	ldr	r3, [r3, #0]
    d41e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d424:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    d428:	b172      	cbz	r2, d448 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d42a:	2200      	movs	r2, #0
    d42c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d430:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d434:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d438:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    d43c:	0792      	lsls	r2, r2, #30
    d43e:	d104      	bne.n	d44a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    d440:	2201      	movs	r2, #1
    d442:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d446:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    d448:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    d44a:	2202      	movs	r2, #2
    d44c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    d450:	4b02      	ldr	r3, [pc, #8]	; (d45c <nrfx_power_clock_irq_handler+0x64>)
}
    d452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    d456:	681b      	ldr	r3, [r3, #0]
    d458:	2001      	movs	r0, #1
    d45a:	4718      	bx	r3
    d45c:	200017a4 	.word	0x200017a4

0000d460 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    d460:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    d462:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    d466:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    d468:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    d46a:	6002      	str	r2, [r0, #0]
}
    d46c:	4802      	ldr	r0, [pc, #8]	; (d478 <nrf_gpio_pin_port_decode+0x18>)
    d46e:	bf18      	it	ne
    d470:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    d474:	4770      	bx	lr
    d476:	bf00      	nop
    d478:	50000300 	.word	0x50000300

0000d47c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    d47c:	4b03      	ldr	r3, [pc, #12]	; (d48c <pin_in_use_by_te+0x10>)
    d47e:	3008      	adds	r0, #8
    d480:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    d484:	f3c0 1040 	ubfx	r0, r0, #5, #1
    d488:	4770      	bx	lr
    d48a:	bf00      	nop
    d48c:	200002fc 	.word	0x200002fc

0000d490 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    d490:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    d492:	f100 0308 	add.w	r3, r0, #8
    d496:	4c0c      	ldr	r4, [pc, #48]	; (d4c8 <call_handler+0x38>)
    d498:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    d49c:	05da      	lsls	r2, r3, #23
{
    d49e:	4605      	mov	r5, r0
    d4a0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    d4a2:	d507      	bpl.n	d4b4 <call_handler+0x24>
    d4a4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    d4a8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    d4ac:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    d4b0:	6852      	ldr	r2, [r2, #4]
    d4b2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    d4b4:	68a3      	ldr	r3, [r4, #8]
    d4b6:	b12b      	cbz	r3, d4c4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    d4b8:	68e2      	ldr	r2, [r4, #12]
    d4ba:	4631      	mov	r1, r6
    d4bc:	4628      	mov	r0, r5
    }
}
    d4be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    d4c2:	4718      	bx	r3
}
    d4c4:	bd70      	pop	{r4, r5, r6, pc}
    d4c6:	bf00      	nop
    d4c8:	200002fc 	.word	0x200002fc

0000d4cc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    d4cc:	4a13      	ldr	r2, [pc, #76]	; (d51c <release_handler+0x50>)
    d4ce:	3008      	adds	r0, #8
{
    d4d0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    d4d2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    d4d6:	05d9      	lsls	r1, r3, #23
    d4d8:	d51c      	bpl.n	d514 <release_handler+0x48>
    d4da:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    d4de:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    d4e2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    d4e6:	f102 0410 	add.w	r4, r2, #16
    d4ea:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    d4ec:	f834 3b02 	ldrh.w	r3, [r4], #2
    d4f0:	f413 7f80 	tst.w	r3, #256	; 0x100
    d4f4:	d003      	beq.n	d4fe <release_handler+0x32>
    d4f6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    d4fa:	4299      	cmp	r1, r3
    d4fc:	d00a      	beq.n	d514 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    d4fe:	3001      	adds	r0, #1
    d500:	2830      	cmp	r0, #48	; 0x30
    d502:	d1f3      	bne.n	d4ec <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    d504:	2300      	movs	r3, #0
    d506:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    d50a:	4805      	ldr	r0, [pc, #20]	; (d520 <release_handler+0x54>)
}
    d50c:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    d510:	f7ff beec 	b.w	d2ec <nrfx_flag32_free>
}
    d514:	f85d 4b04 	ldr.w	r4, [sp], #4
    d518:	4770      	bx	lr
    d51a:	bf00      	nop
    d51c:	200002fc 	.word	0x200002fc
    d520:	20000370 	.word	0x20000370

0000d524 <pin_handler_trigger_uninit>:
{
    d524:	b538      	push	{r3, r4, r5, lr}
    d526:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    d528:	f7ff ffa8 	bl	d47c <pin_in_use_by_te>
    d52c:	4c09      	ldr	r4, [pc, #36]	; (d554 <pin_handler_trigger_uninit+0x30>)
    d52e:	f102 0508 	add.w	r5, r2, #8
    d532:	b140      	cbz	r0, d546 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d534:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    d538:	4907      	ldr	r1, [pc, #28]	; (d558 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    d53a:	0b5b      	lsrs	r3, r3, #13
    d53c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    d540:	2000      	movs	r0, #0
    d542:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    d546:	4610      	mov	r0, r2
    d548:	f7ff ffc0 	bl	d4cc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    d54c:	2300      	movs	r3, #0
    d54e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    d552:	bd38      	pop	{r3, r4, r5, pc}
    d554:	200002fc 	.word	0x200002fc
    d558:	40006000 	.word	0x40006000

0000d55c <nrfx_gpiote_input_configure>:
{
    d55c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d560:	4604      	mov	r4, r0
    d562:	4617      	mov	r7, r2
    d564:	461d      	mov	r5, r3
    if (p_input_config)
    d566:	b321      	cbz	r1, d5b2 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d568:	4e4e      	ldr	r6, [pc, #312]	; (d6a4 <nrfx_gpiote_input_configure+0x148>)
    d56a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    d56e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    d572:	079b      	lsls	r3, r3, #30
    d574:	d506      	bpl.n	d584 <nrfx_gpiote_input_configure+0x28>
    d576:	f7ff ff81 	bl	d47c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    d57a:	b118      	cbz	r0, d584 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    d57c:	484a      	ldr	r0, [pc, #296]	; (d6a8 <nrfx_gpiote_input_configure+0x14c>)
}
    d57e:	b004      	add	sp, #16
    d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    d584:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    d586:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    d58a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    d58e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    d592:	f10d 020f 	add.w	r2, sp, #15
    d596:	460b      	mov	r3, r1
    d598:	4620      	mov	r0, r4
    d59a:	f10d 010e 	add.w	r1, sp, #14
    d59e:	f007 ff34 	bl	1540a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    d5a2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    d5a6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    d5aa:	f043 0301 	orr.w	r3, r3, #1
    d5ae:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    d5b2:	b197      	cbz	r7, d5da <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d5b4:	4b3b      	ldr	r3, [pc, #236]	; (d6a4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    d5b6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    d5b8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d5ba:	f104 0008 	add.w	r0, r4, #8
    d5be:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    d5c2:	078f      	lsls	r7, r1, #30
    d5c4:	d50c      	bpl.n	d5e0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    d5c6:	2a00      	cmp	r2, #0
    d5c8:	d1d8      	bne.n	d57c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    d5ca:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    d5ce:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    d5d2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    d5d6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    d5da:	bbcd      	cbnz	r5, d650 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    d5dc:	4833      	ldr	r0, [pc, #204]	; (d6ac <nrfx_gpiote_input_configure+0x150>)
    d5de:	e7ce      	b.n	d57e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    d5e0:	f021 0120 	bic.w	r1, r1, #32
    d5e4:	04c9      	lsls	r1, r1, #19
    d5e6:	0cc9      	lsrs	r1, r1, #19
    d5e8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    d5ec:	2a00      	cmp	r2, #0
    d5ee:	d0ec      	beq.n	d5ca <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    d5f0:	2e03      	cmp	r6, #3
    d5f2:	d8c3      	bhi.n	d57c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    d5f4:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    d5f6:	b92e      	cbnz	r6, d604 <nrfx_gpiote_input_configure+0xa8>
    d5f8:	4a2d      	ldr	r2, [pc, #180]	; (d6b0 <nrfx_gpiote_input_configure+0x154>)
    d5fa:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    d5fe:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    d602:	e7e2      	b.n	d5ca <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d604:	00ba      	lsls	r2, r7, #2
    d606:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d60a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    d60e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    d612:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    d616:	f02c 0c03 	bic.w	ip, ip, #3
    d61a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    d61e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    d622:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    d626:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    d62a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d62e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    d632:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    d636:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    d63a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    d63e:	ea4c 0c0e 	orr.w	ip, ip, lr
    d642:	f041 0120 	orr.w	r1, r1, #32
    d646:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    d64a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    d64e:	e7bc      	b.n	d5ca <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    d650:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    d654:	4620      	mov	r0, r4
    d656:	f7ff ff39 	bl	d4cc <release_handler>
    if (!handler)
    d65a:	2e00      	cmp	r6, #0
    d65c:	d0be      	beq.n	d5dc <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    d65e:	4d11      	ldr	r5, [pc, #68]	; (d6a4 <nrfx_gpiote_input_configure+0x148>)
    d660:	682b      	ldr	r3, [r5, #0]
    d662:	429e      	cmp	r6, r3
    d664:	d104      	bne.n	d670 <nrfx_gpiote_input_configure+0x114>
    d666:	686b      	ldr	r3, [r5, #4]
    d668:	429f      	cmp	r7, r3
    d66a:	d101      	bne.n	d670 <nrfx_gpiote_input_configure+0x114>
    d66c:	2200      	movs	r2, #0
    d66e:	e00a      	b.n	d686 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    d670:	4810      	ldr	r0, [pc, #64]	; (d6b4 <nrfx_gpiote_input_configure+0x158>)
    d672:	f10d 010f 	add.w	r1, sp, #15
    d676:	f7ff fe13 	bl	d2a0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    d67a:	4b0c      	ldr	r3, [pc, #48]	; (d6ac <nrfx_gpiote_input_configure+0x150>)
    d67c:	4298      	cmp	r0, r3
    d67e:	f47f af7e 	bne.w	d57e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    d682:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    d686:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    d68a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    d68e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    d690:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    d692:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    d696:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    d69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d69e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    d6a2:	e79b      	b.n	d5dc <nrfx_gpiote_input_configure+0x80>
    d6a4:	200002fc 	.word	0x200002fc
    d6a8:	0bad0004 	.word	0x0bad0004
    d6ac:	0bad0000 	.word	0x0bad0000
    d6b0:	40006000 	.word	0x40006000
    d6b4:	20000370 	.word	0x20000370

0000d6b8 <nrfx_gpiote_output_configure>:
{
    d6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6ba:	4604      	mov	r4, r0
    d6bc:	b085      	sub	sp, #20
    d6be:	4615      	mov	r5, r2
    if (p_config)
    d6c0:	b319      	cbz	r1, d70a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d6c2:	4e33      	ldr	r6, [pc, #204]	; (d790 <nrfx_gpiote_output_configure+0xd8>)
    d6c4:	f100 0708 	add.w	r7, r0, #8
    d6c8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    d6cc:	0793      	lsls	r3, r2, #30
    d6ce:	d403      	bmi.n	d6d8 <nrfx_gpiote_output_configure+0x20>
    d6d0:	f7ff fed4 	bl	d47c <pin_in_use_by_te>
    d6d4:	2800      	cmp	r0, #0
    d6d6:	d158      	bne.n	d78a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    d6d8:	f012 0f1c 	tst.w	r2, #28
    d6dc:	d002      	beq.n	d6e4 <nrfx_gpiote_output_configure+0x2c>
    d6de:	784b      	ldrb	r3, [r1, #1]
    d6e0:	2b01      	cmp	r3, #1
    d6e2:	d052      	beq.n	d78a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d6e4:	2301      	movs	r3, #1
    d6e6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    d6ea:	2300      	movs	r3, #0
    d6ec:	e9cd 1300 	strd	r1, r3, [sp]
    d6f0:	1c4a      	adds	r2, r1, #1
    d6f2:	1c8b      	adds	r3, r1, #2
    d6f4:	4620      	mov	r0, r4
    d6f6:	f10d 010f 	add.w	r1, sp, #15
    d6fa:	f007 fe86 	bl	1540a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    d6fe:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    d702:	f043 0303 	orr.w	r3, r3, #3
    d706:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    d70a:	b915      	cbnz	r5, d712 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    d70c:	4821      	ldr	r0, [pc, #132]	; (d794 <nrfx_gpiote_output_configure+0xdc>)
}
    d70e:	b005      	add	sp, #20
    d710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d712:	4e1f      	ldr	r6, [pc, #124]	; (d790 <nrfx_gpiote_output_configure+0xd8>)
    d714:	f104 0708 	add.w	r7, r4, #8
    d718:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    d71c:	0783      	lsls	r3, r0, #30
    d71e:	d534      	bpl.n	d78a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    d720:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    d724:	4661      	mov	r1, ip
    d726:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    d728:	f020 0020 	bic.w	r0, r0, #32
    d72c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    d730:	04c0      	lsls	r0, r0, #19
    d732:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    d736:	0cc0      	lsrs	r0, r0, #19
    d738:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    d73c:	2300      	movs	r3, #0
    d73e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    d742:	786a      	ldrb	r2, [r5, #1]
    d744:	2a00      	cmp	r2, #0
    d746:	d0e1      	beq.n	d70c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    d748:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    d74c:	78ad      	ldrb	r5, [r5, #2]
    d74e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    d752:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    d756:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d75a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    d75e:	0223      	lsls	r3, r4, #8
    d760:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    d764:	0412      	lsls	r2, r2, #16
    d766:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d76a:	ea43 030e 	orr.w	r3, r3, lr
    d76e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    d770:	052a      	lsls	r2, r5, #20
    d772:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    d776:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d77a:	4313      	orrs	r3, r2
    d77c:	f040 0020 	orr.w	r0, r0, #32
    d780:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    d784:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    d788:	e7c0      	b.n	d70c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    d78a:	4803      	ldr	r0, [pc, #12]	; (d798 <nrfx_gpiote_output_configure+0xe0>)
    d78c:	e7bf      	b.n	d70e <nrfx_gpiote_output_configure+0x56>
    d78e:	bf00      	nop
    d790:	200002fc 	.word	0x200002fc
    d794:	0bad0000 	.word	0x0bad0000
    d798:	0bad0004 	.word	0x0bad0004

0000d79c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    d79c:	4b01      	ldr	r3, [pc, #4]	; (d7a4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    d79e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    d7a2:	4770      	bx	lr
    d7a4:	200002fc 	.word	0x200002fc

0000d7a8 <nrfx_gpiote_channel_get>:
{
    d7a8:	b508      	push	{r3, lr}
    d7aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    d7ac:	f7ff fe66 	bl	d47c <pin_in_use_by_te>
    d7b0:	b138      	cbz	r0, d7c2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d7b2:	4b05      	ldr	r3, [pc, #20]	; (d7c8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    d7b4:	4805      	ldr	r0, [pc, #20]	; (d7cc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d7b6:	3208      	adds	r2, #8
    d7b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    d7bc:	0b5b      	lsrs	r3, r3, #13
    d7be:	700b      	strb	r3, [r1, #0]
}
    d7c0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d7c2:	4803      	ldr	r0, [pc, #12]	; (d7d0 <nrfx_gpiote_channel_get+0x28>)
    d7c4:	e7fc      	b.n	d7c0 <nrfx_gpiote_channel_get+0x18>
    d7c6:	bf00      	nop
    d7c8:	200002fc 	.word	0x200002fc
    d7cc:	0bad0000 	.word	0x0bad0000
    d7d0:	0bad0004 	.word	0x0bad0004

0000d7d4 <nrfx_gpiote_init>:
{
    d7d4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d7d6:	4c0f      	ldr	r4, [pc, #60]	; (d814 <nrfx_gpiote_init+0x40>)
    d7d8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    d7dc:	b9bd      	cbnz	r5, d80e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    d7de:	2260      	movs	r2, #96	; 0x60
    d7e0:	4629      	mov	r1, r5
    d7e2:	f104 0010 	add.w	r0, r4, #16
    d7e6:	f008 f8e8 	bl	159ba <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    d7ea:	2006      	movs	r0, #6
    d7ec:	f7fe f8b0 	bl	b950 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d7f0:	4b09      	ldr	r3, [pc, #36]	; (d818 <nrfx_gpiote_init+0x44>)
    return err_code;
    d7f2:	480a      	ldr	r0, [pc, #40]	; (d81c <nrfx_gpiote_init+0x48>)
    d7f4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    d7f8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    d7fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d800:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d804:	2301      	movs	r3, #1
    d806:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    d80a:	6763      	str	r3, [r4, #116]	; 0x74
}
    d80c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    d80e:	4804      	ldr	r0, [pc, #16]	; (d820 <nrfx_gpiote_init+0x4c>)
    d810:	e7fc      	b.n	d80c <nrfx_gpiote_init+0x38>
    d812:	bf00      	nop
    d814:	200002fc 	.word	0x200002fc
    d818:	40006000 	.word	0x40006000
    d81c:	0bad0000 	.word	0x0bad0000
    d820:	0bad0005 	.word	0x0bad0005

0000d824 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    d824:	4b03      	ldr	r3, [pc, #12]	; (d834 <nrfx_gpiote_is_init+0x10>)
    d826:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    d82a:	3800      	subs	r0, #0
    d82c:	bf18      	it	ne
    d82e:	2001      	movne	r0, #1
    d830:	4770      	bx	lr
    d832:	bf00      	nop
    d834:	200002fc 	.word	0x200002fc

0000d838 <nrfx_gpiote_channel_free>:
{
    d838:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    d83a:	4801      	ldr	r0, [pc, #4]	; (d840 <nrfx_gpiote_channel_free+0x8>)
    d83c:	f7ff bd56 	b.w	d2ec <nrfx_flag32_free>
    d840:	2000036c 	.word	0x2000036c

0000d844 <nrfx_gpiote_channel_alloc>:
{
    d844:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    d846:	4801      	ldr	r0, [pc, #4]	; (d84c <nrfx_gpiote_channel_alloc+0x8>)
    d848:	f7ff bd2a 	b.w	d2a0 <nrfx_flag32_alloc>
    d84c:	2000036c 	.word	0x2000036c

0000d850 <nrfx_gpiote_trigger_enable>:
{
    d850:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d852:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d854:	f7ff fe12 	bl	d47c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d858:	f104 0208 	add.w	r2, r4, #8
    d85c:	4b1e      	ldr	r3, [pc, #120]	; (d8d8 <nrfx_gpiote_trigger_enable+0x88>)
    d85e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d862:	b1e8      	cbz	r0, d8a0 <nrfx_gpiote_trigger_enable+0x50>
    d864:	f013 0502 	ands.w	r5, r3, #2
    d868:	d11a      	bne.n	d8a0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d86a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    d86c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    d86e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    d872:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    d876:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d87a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d87e:	6005      	str	r5, [r0, #0]
    d880:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    d882:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    d886:	f040 0001 	orr.w	r0, r0, #1
    d88a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    d88e:	b129      	cbz	r1, d89c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    d890:	2201      	movs	r2, #1
    d892:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    d896:	4a11      	ldr	r2, [pc, #68]	; (d8dc <nrfx_gpiote_trigger_enable+0x8c>)
    d898:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d89c:	b003      	add	sp, #12
    d89e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d8a0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    d8a4:	2b04      	cmp	r3, #4
    d8a6:	d012      	beq.n	d8ce <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    d8a8:	2b05      	cmp	r3, #5
    d8aa:	d012      	beq.n	d8d2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d8ac:	a801      	add	r0, sp, #4
    d8ae:	9401      	str	r4, [sp, #4]
    d8b0:	f7ff fdd6 	bl	d460 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d8b4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    d8b6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d8ba:	40d9      	lsrs	r1, r3
    d8bc:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    d8c0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d8c2:	4620      	mov	r0, r4
}
    d8c4:	b003      	add	sp, #12
    d8c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d8ca:	f007 bde5 	b.w	15498 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    d8ce:	2103      	movs	r1, #3
    d8d0:	e7f7      	b.n	d8c2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    d8d2:	2102      	movs	r1, #2
    d8d4:	e7f5      	b.n	d8c2 <nrfx_gpiote_trigger_enable+0x72>
    d8d6:	bf00      	nop
    d8d8:	200002fc 	.word	0x200002fc
    d8dc:	40006000 	.word	0x40006000

0000d8e0 <nrfx_gpiote_trigger_disable>:
{
    d8e0:	b508      	push	{r3, lr}
    d8e2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d8e4:	f7ff fdca 	bl	d47c <pin_in_use_by_te>
    d8e8:	b1c0      	cbz	r0, d91c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d8ea:	f102 0108 	add.w	r1, r2, #8
    d8ee:	4b0e      	ldr	r3, [pc, #56]	; (d928 <nrfx_gpiote_trigger_disable+0x48>)
    d8f0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d8f4:	0799      	lsls	r1, r3, #30
    d8f6:	d411      	bmi.n	d91c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d8f8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d8fa:	2201      	movs	r2, #1
    d8fc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    d8fe:	009b      	lsls	r3, r3, #2
    d900:	490a      	ldr	r1, [pc, #40]	; (d92c <nrfx_gpiote_trigger_disable+0x4c>)
    d902:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d906:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    d90a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d90e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d912:	f022 0203 	bic.w	r2, r2, #3
    d916:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    d91a:	bd08      	pop	{r3, pc}
    d91c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d920:	2100      	movs	r1, #0
    d922:	4610      	mov	r0, r2
    d924:	f007 bdb8 	b.w	15498 <nrf_gpio_cfg_sense_set>
    d928:	200002fc 	.word	0x200002fc
    d92c:	40006000 	.word	0x40006000

0000d930 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d930:	4b0e      	ldr	r3, [pc, #56]	; (d96c <nrfx_gpiote_pin_uninit+0x3c>)
    d932:	f100 0208 	add.w	r2, r0, #8
{
    d936:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d938:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    d93c:	07db      	lsls	r3, r3, #31
{
    d93e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    d940:	d511      	bpl.n	d966 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    d942:	f7ff ffcd 	bl	d8e0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    d946:	4620      	mov	r0, r4
    d948:	f7ff fdec 	bl	d524 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d94c:	a801      	add	r0, sp, #4
    d94e:	9401      	str	r4, [sp, #4]
    d950:	f7ff fd86 	bl	d460 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d954:	9b01      	ldr	r3, [sp, #4]
    d956:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d95a:	2202      	movs	r2, #2
    d95c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    d960:	4803      	ldr	r0, [pc, #12]	; (d970 <nrfx_gpiote_pin_uninit+0x40>)
}
    d962:	b002      	add	sp, #8
    d964:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d966:	4803      	ldr	r0, [pc, #12]	; (d974 <nrfx_gpiote_pin_uninit+0x44>)
    d968:	e7fb      	b.n	d962 <nrfx_gpiote_pin_uninit+0x32>
    d96a:	bf00      	nop
    d96c:	200002fc 	.word	0x200002fc
    d970:	0bad0000 	.word	0x0bad0000
    d974:	0bad0004 	.word	0x0bad0004

0000d978 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d97c:	4b64      	ldr	r3, [pc, #400]	; (db10 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    d97e:	4865      	ldr	r0, [pc, #404]	; (db14 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d980:	4965      	ldr	r1, [pc, #404]	; (db18 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    d982:	2600      	movs	r6, #0
{
    d984:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    d986:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d988:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d98a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    d98c:	b135      	cbz	r5, d99c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    d98e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    d992:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d994:	bf1e      	ittt	ne
    d996:	601c      	strne	r4, [r3, #0]
    d998:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    d99a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d99c:	3304      	adds	r3, #4
    d99e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    d9a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d9a4:	d1f1      	bne.n	d98a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d9a6:	f8df 816c 	ldr.w	r8, [pc, #364]	; db14 <nrfx_gpiote_irq_handler+0x19c>
    d9aa:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    d9ae:	2b00      	cmp	r3, #0
    d9b0:	f000 8091 	beq.w	dad6 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    d9b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d9b8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    d9bc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    d9be:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    d9c2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    d9c6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    d9c8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    d9cc:	2700      	movs	r7, #0
            while (latch[i])
    d9ce:	f10d 0910 	add.w	r9, sp, #16
    d9d2:	017b      	lsls	r3, r7, #5
    d9d4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    d9d6:	f04f 0a01 	mov.w	sl, #1
    d9da:	e049      	b.n	da70 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    d9dc:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d9de:	4a4f      	ldr	r2, [pc, #316]	; (db1c <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    d9e0:	fa94 f4a4 	rbit	r4, r4
    d9e4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    d9e8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d9ea:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    d9ee:	08e0      	lsrs	r0, r4, #3
    d9f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d9f4:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    d9f6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    d9fa:	fa0a fc02 	lsl.w	ip, sl, r2
    d9fe:	f819 2000 	ldrb.w	r2, [r9, r0]
    da02:	ea22 020c 	bic.w	r2, r2, ip
    da06:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    da0a:	a803      	add	r0, sp, #12
    da0c:	f3c3 0582 	ubfx	r5, r3, #2, #3
    da10:	0899      	lsrs	r1, r3, #2
    da12:	f7ff fd25 	bl	d460 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    da16:	9a03      	ldr	r2, [sp, #12]
    da18:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    da1c:	074b      	lsls	r3, r1, #29
    da1e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    da22:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    da24:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    da28:	d529      	bpl.n	da7e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    da2a:	4620      	mov	r0, r4
    da2c:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    da2e:	b2d5      	uxtb	r5, r2
    da30:	f7ff fd2e 	bl	d490 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    da34:	a803      	add	r0, sp, #12
    da36:	9403      	str	r4, [sp, #12]
    da38:	f7ff fd12 	bl	d460 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    da3c:	9b03      	ldr	r3, [sp, #12]
    da3e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    da42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    da46:	f3c3 4301 	ubfx	r3, r3, #16, #2
    da4a:	429d      	cmp	r5, r3
    da4c:	d107      	bne.n	da5e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    da4e:	2100      	movs	r1, #0
    da50:	4620      	mov	r0, r4
    da52:	f007 fd21 	bl	15498 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    da56:	4629      	mov	r1, r5
    da58:	4620      	mov	r0, r4
    da5a:	f007 fd1d 	bl	15498 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    da5e:	a803      	add	r0, sp, #12
    da60:	9403      	str	r4, [sp, #12]
    da62:	f7ff fcfd 	bl	d460 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    da66:	9b03      	ldr	r3, [sp, #12]
    da68:	fa0a f303 	lsl.w	r3, sl, r3
    da6c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    da70:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    da74:	2c00      	cmp	r4, #0
    da76:	d1b1      	bne.n	d9dc <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    da78:	b9cf      	cbnz	r7, daae <nrfx_gpiote_irq_handler+0x136>
    da7a:	2701      	movs	r7, #1
    da7c:	e7a9      	b.n	d9d2 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    da7e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    da80:	bf0c      	ite	eq
    da82:	2103      	moveq	r1, #3
    da84:	2102      	movne	r1, #2
    da86:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    da88:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    da8a:	f007 fd05 	bl	15498 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    da8e:	2d03      	cmp	r5, #3
    da90:	d004      	beq.n	da9c <nrfx_gpiote_irq_handler+0x124>
    da92:	9a01      	ldr	r2, [sp, #4]
    da94:	2a02      	cmp	r2, #2
    da96:	d106      	bne.n	daa6 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    da98:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    da9a:	d1e0      	bne.n	da5e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    da9c:	4659      	mov	r1, fp
    da9e:	4620      	mov	r0, r4
    daa0:	f7ff fcf6 	bl	d490 <call_handler>
    daa4:	e7db      	b.n	da5e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    daa6:	2a03      	cmp	r2, #3
    daa8:	d1d9      	bne.n	da5e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    daaa:	2d02      	cmp	r5, #2
    daac:	e7f5      	b.n	da9a <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    daae:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    dab2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    dab6:	491a      	ldr	r1, [pc, #104]	; (db20 <nrfx_gpiote_irq_handler+0x1a8>)
    dab8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    dabc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    dac0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    dac2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    dac6:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    daca:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    dacc:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    dad0:	4313      	orrs	r3, r2
    dad2:	f47f af7b 	bne.w	d9cc <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    dad6:	2401      	movs	r4, #1
    while (mask)
    dad8:	b916      	cbnz	r6, dae0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    dada:	b007      	add	sp, #28
    dadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    dae0:	fa96 f3a6 	rbit	r3, r6
    dae4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    dae8:	fa04 f203 	lsl.w	r2, r4, r3
    daec:	009b      	lsls	r3, r3, #2
    daee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    daf2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    daf6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    dafa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    dafe:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    db02:	f3c0 2005 	ubfx	r0, r0, #8, #6
    db06:	f3c1 4101 	ubfx	r1, r1, #16, #2
    db0a:	f7ff fcc1 	bl	d490 <call_handler>
    db0e:	e7e3      	b.n	dad8 <nrfx_gpiote_irq_handler+0x160>
    db10:	40006100 	.word	0x40006100
    db14:	40006000 	.word	0x40006000
    db18:	40006120 	.word	0x40006120
    db1c:	200002fc 	.word	0x200002fc
    db20:	50000300 	.word	0x50000300

0000db24 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    db24:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    db26:	4801      	ldr	r0, [pc, #4]	; (db2c <nrfx_ppi_channel_alloc+0x8>)
    db28:	f7ff bbba 	b.w	d2a0 <nrfx_flag32_alloc>
    db2c:	20000378 	.word	0x20000378

0000db30 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    db30:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    db32:	4c14      	ldr	r4, [pc, #80]	; (db84 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    db34:	4a14      	ldr	r2, [pc, #80]	; (db88 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    db36:	4915      	ldr	r1, [pc, #84]	; (db8c <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    db38:	2303      	movs	r3, #3
    db3a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    db3c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    db3e:	4b14      	ldr	r3, [pc, #80]	; (db90 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    db40:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    db42:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    db44:	f44f 6380 	mov.w	r3, #1024	; 0x400
    db48:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    db4a:	2300      	movs	r3, #0
    db4c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    db4e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    db50:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    db52:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    db54:	4a0f      	ldr	r2, [pc, #60]	; (db94 <_DoInit+0x64>)
    db56:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    db58:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    db5a:	2210      	movs	r2, #16
    db5c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    db5e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    db60:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    db62:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    db64:	f008 f8a0 	bl	15ca8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    db68:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    db6c:	490a      	ldr	r1, [pc, #40]	; (db98 <_DoInit+0x68>)
    db6e:	4620      	mov	r0, r4
    db70:	f008 f89a 	bl	15ca8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    db74:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    db78:	2320      	movs	r3, #32
    db7a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    db7c:	f3bf 8f5f 	dmb	sy
}
    db80:	bd10      	pop	{r4, pc}
    db82:	bf00      	nop
    db84:	200017ac 	.word	0x200017ac
    db88:	00045f13 	.word	0x00045f13
    db8c:	00045f1c 	.word	0x00045f1c
    db90:	20001eca 	.word	0x20001eca
    db94:	20001eba 	.word	0x20001eba
    db98:	00045f20 	.word	0x00045f20

0000db9c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    db9c:	4b0e      	ldr	r3, [pc, #56]	; (dbd8 <z_sys_init_run_level+0x3c>)
{
    db9e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    dba0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    dba4:	3001      	adds	r0, #1
    dba6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    dbaa:	42a6      	cmp	r6, r4
    dbac:	d800      	bhi.n	dbb0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    dbae:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    dbb0:	e9d4 3500 	ldrd	r3, r5, [r4]
    dbb4:	4628      	mov	r0, r5
    dbb6:	4798      	blx	r3
		if (dev != NULL) {
    dbb8:	b165      	cbz	r5, dbd4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    dbba:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    dbbc:	b130      	cbz	r0, dbcc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    dbbe:	2800      	cmp	r0, #0
    dbc0:	bfb8      	it	lt
    dbc2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    dbc4:	28ff      	cmp	r0, #255	; 0xff
    dbc6:	bfa8      	it	ge
    dbc8:	20ff      	movge	r0, #255	; 0xff
    dbca:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    dbcc:	785a      	ldrb	r2, [r3, #1]
    dbce:	f042 0201 	orr.w	r2, r2, #1
    dbd2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    dbd4:	3408      	adds	r4, #8
    dbd6:	e7e8      	b.n	dbaa <z_sys_init_run_level+0xe>
    dbd8:	0003f690 	.word	0x0003f690

0000dbdc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    dbdc:	4b01      	ldr	r3, [pc, #4]	; (dbe4 <z_impl_z_errno+0x8>)
    dbde:	6898      	ldr	r0, [r3, #8]
}
    dbe0:	3060      	adds	r0, #96	; 0x60
    dbe2:	4770      	bx	lr
    dbe4:	20001854 	.word	0x20001854

0000dbe8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    dbe8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    dbea:	4b0b      	ldr	r3, [pc, #44]	; (dc18 <bg_thread_main+0x30>)
    dbec:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    dbee:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    dbf0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    dbf2:	f7ff ffd3 	bl	db9c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    dbf6:	f000 ff57 	bl	eaa8 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    dbfa:	f007 f801 	bl	14c00 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    dbfe:	2003      	movs	r0, #3
    dc00:	f7ff ffcc 	bl	db9c <z_sys_init_run_level>

	z_init_static_threads();
    dc04:	f000 f93c 	bl	de80 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    dc08:	f7fc ff7a 	bl	ab00 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    dc0c:	4a03      	ldr	r2, [pc, #12]	; (dc1c <bg_thread_main+0x34>)
    dc0e:	7b13      	ldrb	r3, [r2, #12]
    dc10:	f023 0301 	bic.w	r3, r3, #1
    dc14:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    dc16:	bd08      	pop	{r3, pc}
    dc18:	200022ca 	.word	0x200022ca
    dc1c:	20000738 	.word	0x20000738

0000dc20 <z_bss_zero>:
{
    dc20:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    dc22:	4803      	ldr	r0, [pc, #12]	; (dc30 <z_bss_zero+0x10>)
    dc24:	4a03      	ldr	r2, [pc, #12]	; (dc34 <z_bss_zero+0x14>)
    dc26:	2100      	movs	r1, #0
    dc28:	1a12      	subs	r2, r2, r0
    dc2a:	f007 fc72 	bl	15512 <z_early_memset>
}
    dc2e:	bd08      	pop	{r3, pc}
    dc30:	20000658 	.word	0x20000658
    dc34:	200022d0 	.word	0x200022d0

0000dc38 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    dc38:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    dc3a:	4e16      	ldr	r6, [pc, #88]	; (dc94 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    dc3c:	4d16      	ldr	r5, [pc, #88]	; (dc98 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    dc3e:	4917      	ldr	r1, [pc, #92]	; (dc9c <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
    dc40:	23c0      	movs	r3, #192	; 0xc0
{
    dc42:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    dc44:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    dc48:	2201      	movs	r2, #1
    dc4a:	2300      	movs	r3, #0
    dc4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dc50:	220f      	movs	r2, #15
    dc52:	e9cd 3202 	strd	r3, r2, [sp, #8]
    dc56:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    dc58:	2318      	movs	r3, #24
    dc5a:	fb03 5500 	mla	r5, r3, r0, r5
{
    dc5e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    dc60:	f44f 70c0 	mov.w	r0, #384	; 0x180
    dc64:	fb00 1104 	mla	r1, r0, r4, r1
    dc68:	4b0d      	ldr	r3, [pc, #52]	; (dca0 <z_init_cpu+0x68>)
    dc6a:	9500      	str	r5, [sp, #0]
    dc6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    dc70:	4630      	mov	r0, r6
    dc72:	f000 f8d3 	bl	de1c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    dc76:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    dc78:	480a      	ldr	r0, [pc, #40]	; (dca4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    dc7a:	752c      	strb	r4, [r5, #20]
    dc7c:	f023 0304 	bic.w	r3, r3, #4
    dc80:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    dc82:	f44f 6308 	mov.w	r3, #2176	; 0x880
    dc86:	fb03 0404 	mla	r4, r3, r4, r0
    dc8a:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    dc8c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    dc8e:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    dc90:	b006      	add	sp, #24
    dc92:	bd70      	pop	{r4, r5, r6, pc}
    dc94:	20000678 	.word	0x20000678
    dc98:	20001854 	.word	0x20001854
    dc9c:	20004380 	.word	0x20004380
    dca0:	0000df39 	.word	0x0000df39
    dca4:	20004500 	.word	0x20004500

0000dca8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    dca8:	b500      	push	{lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    dcaa:	4b2d      	ldr	r3, [pc, #180]	; (dd60 <z_cstart+0xb8>)
    dcac:	b0b9      	sub	sp, #228	; 0xe4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    dcae:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    dcb2:	4d2c      	ldr	r5, [pc, #176]	; (dd64 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    dcb4:	4e2c      	ldr	r6, [pc, #176]	; (dd68 <z_cstart+0xc0>)
    dcb6:	696b      	ldr	r3, [r5, #20]
    dcb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcbc:	2400      	movs	r4, #0
    dcbe:	616b      	str	r3, [r5, #20]
    dcc0:	23e0      	movs	r3, #224	; 0xe0
    dcc2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    dcc6:	77ec      	strb	r4, [r5, #31]
    dcc8:	762c      	strb	r4, [r5, #24]
    dcca:	766c      	strb	r4, [r5, #25]
    dccc:	76ac      	strb	r4, [r5, #26]
    dcce:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    dcd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dcd4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    dcd8:	626b      	str	r3, [r5, #36]	; 0x24
    dcda:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    dcde:	f7fe f8d7 	bl	be90 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    dce2:	f7fd fe17 	bl	b914 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    dce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dcea:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    dcec:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    dcee:	f7fe fa0d 	bl	c10c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    dcf2:	f7fe f96f 	bl	bfd4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    dcf6:	f240 1301 	movw	r3, #257	; 0x101
    dcfa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    dcfe:	ab08      	add	r3, sp, #32
    dd00:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    dd02:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	dummy_thread->resource_pool = NULL;
    dd06:	9424      	str	r4, [sp, #144]	; 0x90
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    dd08:	f007 fbdc 	bl	154c4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    dd0c:	4620      	mov	r0, r4
	_kernel.ready_q.cache = &z_main_thread;
    dd0e:	4d17      	ldr	r5, [pc, #92]	; (dd6c <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    dd10:	f7ff ff44 	bl	db9c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    dd14:	2001      	movs	r0, #1
    dd16:	f7ff ff41 	bl	db9c <z_sys_init_run_level>
	z_sched_init();
    dd1a:	f000 fc6f 	bl	e5fc <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    dd1e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    dd20:	4b13      	ldr	r3, [pc, #76]	; (dd70 <z_cstart+0xc8>)
    dd22:	4e14      	ldr	r6, [pc, #80]	; (dd74 <z_cstart+0xcc>)
    dd24:	9305      	str	r3, [sp, #20]
    dd26:	2301      	movs	r3, #1
    dd28:	4913      	ldr	r1, [pc, #76]	; (dd78 <z_cstart+0xd0>)
    dd2a:	9400      	str	r4, [sp, #0]
    dd2c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    dd30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    dd34:	4633      	mov	r3, r6
    dd36:	e9cd 4401 	strd	r4, r4, [sp, #4]
    dd3a:	4628      	mov	r0, r5
    dd3c:	f000 f86e 	bl	de1c <z_setup_new_thread>
    dd40:	7b6a      	ldrb	r2, [r5, #13]
    dd42:	9007      	str	r0, [sp, #28]
    dd44:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    dd48:	4628      	mov	r0, r5
    dd4a:	736a      	strb	r2, [r5, #13]
    dd4c:	f007 fc74 	bl	15638 <z_ready_thread>
	z_init_cpu(0);
    dd50:	4620      	mov	r0, r4
    dd52:	f7ff ff71 	bl	dc38 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    dd56:	9907      	ldr	r1, [sp, #28]
    dd58:	4632      	mov	r2, r6
    dd5a:	4628      	mov	r0, r5
    dd5c:	f7fd ff58 	bl	bc10 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    dd60:	20004d80 	.word	0x20004d80
    dd64:	e000ed00 	.word	0xe000ed00
    dd68:	20001854 	.word	0x20001854
    dd6c:	20000738 	.word	0x20000738
    dd70:	00045f27 	.word	0x00045f27
    dd74:	0000dbe9 	.word	0x0000dbe9
    dd78:	20002300 	.word	0x20002300

0000dd7c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    dd7c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    dd7e:	4b0e      	ldr	r3, [pc, #56]	; (ddb8 <init_mem_slab_module+0x3c>)
    dd80:	4c0e      	ldr	r4, [pc, #56]	; (ddbc <init_mem_slab_module+0x40>)
    dd82:	42a3      	cmp	r3, r4
    dd84:	d301      	bcc.n	dd8a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    dd86:	2000      	movs	r0, #0
	return rc;
}
    dd88:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    dd8a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    dd8e:	ea41 0200 	orr.w	r2, r1, r0
    dd92:	f012 0203 	ands.w	r2, r2, #3
    dd96:	d10b      	bne.n	ddb0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    dd98:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
    dd9a:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    dd9c:	42aa      	cmp	r2, r5
    dd9e:	d101      	bne.n	dda4 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    dda0:	3320      	adds	r3, #32
    dda2:	e7ee      	b.n	dd82 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    dda4:	699e      	ldr	r6, [r3, #24]
    dda6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    dda8:	3201      	adds	r2, #1
		slab->free_list = p;
    ddaa:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
    ddac:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    ddae:	e7f5      	b.n	dd9c <init_mem_slab_module+0x20>
	return rc;
    ddb0:	f06f 0015 	mvn.w	r0, #21
    ddb4:	e7e8      	b.n	dd88 <init_mem_slab_module+0xc>
    ddb6:	bf00      	nop
    ddb8:	200005cc 	.word	0x200005cc
    ddbc:	200005cc 	.word	0x200005cc

0000ddc0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    ddc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ddc2:	460c      	mov	r4, r1
	__asm__ volatile(
    ddc4:	f04f 0520 	mov.w	r5, #32
    ddc8:	f3ef 8111 	mrs	r1, BASEPRI
    ddcc:	f385 8812 	msr	BASEPRI_MAX, r5
    ddd0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    ddd4:	6985      	ldr	r5, [r0, #24]
    ddd6:	b15d      	cbz	r5, ddf0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    ddd8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    ddda:	682b      	ldr	r3, [r5, #0]
    dddc:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    ddde:	69c3      	ldr	r3, [r0, #28]
    dde0:	3301      	adds	r3, #1
    dde2:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    dde4:	2000      	movs	r0, #0
	__asm__ volatile(
    dde6:	f381 8811 	msr	BASEPRI, r1
    ddea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    ddee:	e011      	b.n	de14 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    ddf0:	ea52 0c03 	orrs.w	ip, r2, r3
    ddf4:	d103      	bne.n	ddfe <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    ddf6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    ddf8:	f06f 000b 	mvn.w	r0, #11
    ddfc:	e7f3      	b.n	dde6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    ddfe:	e9cd 2300 	strd	r2, r3, [sp]
    de02:	4602      	mov	r2, r0
    de04:	3008      	adds	r0, #8
    de06:	f000 fb4f 	bl	e4a8 <z_pend_curr>
		if (result == 0) {
    de0a:	b918      	cbnz	r0, de14 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    de0c:	4b02      	ldr	r3, [pc, #8]	; (de18 <k_mem_slab_alloc+0x58>)
    de0e:	689b      	ldr	r3, [r3, #8]
    de10:	695b      	ldr	r3, [r3, #20]
    de12:	6023      	str	r3, [r4, #0]
}
    de14:	b003      	add	sp, #12
    de16:	bd30      	pop	{r4, r5, pc}
    de18:	20001854 	.word	0x20001854

0000de1c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    de1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    de20:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    de22:	7306      	strb	r6, [r0, #12]
{
    de24:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    de26:	3207      	adds	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    de28:	f100 0558 	add.w	r5, r0, #88	; 0x58
    de2c:	f022 0207 	bic.w	r2, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    de30:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    de32:	3720      	adds	r7, #32
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    de34:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
    de38:	e9c0 7219 	strd	r7, r2, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    de3c:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
    de3e:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    de40:	f102 0820 	add.w	r8, r2, #32

	thread_base->prio = priority;
    de44:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    de46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    de48:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    de4a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
    de4e:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
    de50:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    de52:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    de54:	9202      	str	r2, [sp, #8]
    de56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    de58:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    de5a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    de5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de5e:	9200      	str	r2, [sp, #0]
    de60:	4642      	mov	r2, r8
{
    de62:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    de64:	f7fd fe4e 	bl	bb04 <arch_new_thread>
	if (!_current) {
    de68:	4b04      	ldr	r3, [pc, #16]	; (de7c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    de6a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    de6c:	689b      	ldr	r3, [r3, #8]
    de6e:	b103      	cbz	r3, de72 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    de70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    de72:	6723      	str	r3, [r4, #112]	; 0x70
}
    de74:	4640      	mov	r0, r8
    de76:	b004      	add	sp, #16
    de78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de7c:	20001854 	.word	0x20001854

0000de80 <z_init_static_threads>:
{
    de80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    de84:	4c29      	ldr	r4, [pc, #164]	; (df2c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    de86:	4d2a      	ldr	r5, [pc, #168]	; (df30 <z_init_static_threads+0xb0>)
{
    de88:	b087      	sub	sp, #28
    de8a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    de8c:	42ae      	cmp	r6, r5
    de8e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    de92:	d30f      	bcc.n	deb4 <z_init_static_threads+0x34>
	k_sched_lock();
    de94:	f000 f9c6 	bl	e224 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    de98:	4c24      	ldr	r4, [pc, #144]	; (df2c <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    de9a:	f8df 9098 	ldr.w	r9, [pc, #152]	; df34 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    de9e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    dea2:	f240 37e7 	movw	r7, #999	; 0x3e7
    dea6:	42ac      	cmp	r4, r5
    dea8:	d320      	bcc.n	deec <z_init_static_threads+0x6c>
}
    deaa:	b007      	add	sp, #28
    deac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    deb0:	f000 bb88 	b.w	e5c4 <k_sched_unlock>
		z_setup_new_thread(
    deb4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    deb8:	9305      	str	r3, [sp, #20]
    deba:	f854 3c10 	ldr.w	r3, [r4, #-16]
    debe:	9304      	str	r3, [sp, #16]
    dec0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    dec4:	9303      	str	r3, [sp, #12]
    dec6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    deca:	9302      	str	r3, [sp, #8]
    decc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    ded0:	9301      	str	r3, [sp, #4]
    ded2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    ded6:	9300      	str	r3, [sp, #0]
    ded8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    dedc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    dee0:	f7ff ff9c 	bl	de1c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    dee4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    dee8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    deea:	e7ce      	b.n	de8a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    deec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    deee:	1c5a      	adds	r2, r3, #1
    def0:	d00d      	beq.n	df0e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    def2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    def6:	2100      	movs	r1, #0
    def8:	4638      	mov	r0, r7
    defa:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    defe:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    df02:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    df06:	d104      	bne.n	df12 <z_init_static_threads+0x92>
	z_sched_start(thread);
    df08:	4640      	mov	r0, r8
    df0a:	f000 fa71 	bl	e3f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    df0e:	3430      	adds	r4, #48	; 0x30
    df10:	e7c9      	b.n	dea6 <z_init_static_threads+0x26>
    df12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    df16:	2300      	movs	r3, #0
    df18:	f7f2 fe60 	bl	bdc <__aeabi_uldivmod>
    df1c:	4602      	mov	r2, r0
    df1e:	460b      	mov	r3, r1
    df20:	f108 0018 	add.w	r0, r8, #24
    df24:	4649      	mov	r1, r9
    df26:	f000 fcd3 	bl	e8d0 <z_add_timeout>
    df2a:	e7f0      	b.n	df0e <z_init_static_threads+0x8e>
    df2c:	200005cc 	.word	0x200005cc
    df30:	200005cc 	.word	0x200005cc
    df34:	00015659 	.word	0x00015659

0000df38 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    df38:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    df3a:	4c0b      	ldr	r4, [pc, #44]	; (df68 <idle+0x30>)
	return !z_sys_post_kernel;
    df3c:	4d0b      	ldr	r5, [pc, #44]	; (df6c <idle+0x34>)
	__asm__ volatile(
    df3e:	f04f 0220 	mov.w	r2, #32
    df42:	f3ef 8311 	mrs	r3, BASEPRI
    df46:	f382 8812 	msr	BASEPRI_MAX, r2
    df4a:	f3bf 8f6f 	isb	sy
    df4e:	f007 fbfd 	bl	1574c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    df52:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    df54:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    df56:	b913      	cbnz	r3, df5e <idle+0x26>
	arch_cpu_idle();
    df58:	f7fd fce2 	bl	b920 <arch_cpu_idle>
}
    df5c:	e7ef      	b.n	df3e <idle+0x6>
    df5e:	f7fd fb35 	bl	b5cc <pm_system_suspend>
    df62:	2800      	cmp	r0, #0
    df64:	d1eb      	bne.n	df3e <idle+0x6>
    df66:	e7f7      	b.n	df58 <idle+0x20>
    df68:	20001854 	.word	0x20001854
    df6c:	200022ca 	.word	0x200022ca

0000df70 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    df70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    df74:	4604      	mov	r4, r0
    df76:	4617      	mov	r7, r2
    df78:	461e      	mov	r6, r3
    df7a:	f04f 0320 	mov.w	r3, #32
    df7e:	f3ef 8811 	mrs	r8, BASEPRI
    df82:	f383 8812 	msr	BASEPRI_MAX, r3
    df86:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    df8a:	68c3      	ldr	r3, [r0, #12]
    df8c:	4a32      	ldr	r2, [pc, #200]	; (e058 <z_impl_k_mutex_lock+0xe8>)
    df8e:	b16b      	cbz	r3, dfac <z_impl_k_mutex_lock+0x3c>
    df90:	6880      	ldr	r0, [r0, #8]
    df92:	6891      	ldr	r1, [r2, #8]
    df94:	4288      	cmp	r0, r1
    df96:	d019      	beq.n	dfcc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    df98:	ea57 0306 	orrs.w	r3, r7, r6
    df9c:	d118      	bne.n	dfd0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    df9e:	f388 8811 	msr	BASEPRI, r8
    dfa2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    dfa6:	f06f 000f 	mvn.w	r0, #15
    dfaa:	e00c      	b.n	dfc6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    dfac:	6891      	ldr	r1, [r2, #8]
    dfae:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    dfb2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    dfb4:	3301      	adds	r3, #1
    dfb6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    dfb8:	6893      	ldr	r3, [r2, #8]
    dfba:	60a3      	str	r3, [r4, #8]
    dfbc:	f388 8811 	msr	BASEPRI, r8
    dfc0:	f3bf 8f6f 	isb	sy
		return 0;
    dfc4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    dfc6:	b002      	add	sp, #8
    dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    dfcc:	6921      	ldr	r1, [r4, #16]
    dfce:	e7f0      	b.n	dfb2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    dfd0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    dfd4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    dfd8:	4299      	cmp	r1, r3
    dfda:	bfa8      	it	ge
    dfdc:	4619      	movge	r1, r3
    dfde:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    dfe2:	4291      	cmp	r1, r2
    dfe4:	bfb8      	it	lt
    dfe6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    dfe8:	428b      	cmp	r3, r1
    dfea:	dd2e      	ble.n	e04a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    dfec:	f007 fae7 	bl	155be <adjust_owner_prio.isra.0>
    dff0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    dff2:	e9cd 7600 	strd	r7, r6, [sp]
    dff6:	4819      	ldr	r0, [pc, #100]	; (e05c <z_impl_k_mutex_lock+0xec>)
    dff8:	4622      	mov	r2, r4
    dffa:	4641      	mov	r1, r8
    dffc:	f000 fa54 	bl	e4a8 <z_pend_curr>
	if (got_mutex == 0) {
    e000:	2800      	cmp	r0, #0
    e002:	d0e0      	beq.n	dfc6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    e004:	f04f 0320 	mov.w	r3, #32
    e008:	f3ef 8611 	mrs	r6, BASEPRI
    e00c:	f383 8812 	msr	BASEPRI_MAX, r3
    e010:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    e014:	6823      	ldr	r3, [r4, #0]
    e016:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e018:	429c      	cmp	r4, r3
    e01a:	d00a      	beq.n	e032 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    e01c:	b14b      	cbz	r3, e032 <z_impl_k_mutex_lock+0xc2>
    e01e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    e022:	4299      	cmp	r1, r3
    e024:	bfa8      	it	ge
    e026:	4619      	movge	r1, r3
    e028:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    e02c:	4299      	cmp	r1, r3
    e02e:	bfb8      	it	lt
    e030:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e032:	68a0      	ldr	r0, [r4, #8]
    e034:	f007 fac3 	bl	155be <adjust_owner_prio.isra.0>
    e038:	b900      	cbnz	r0, e03c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    e03a:	b145      	cbz	r5, e04e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    e03c:	4807      	ldr	r0, [pc, #28]	; (e05c <z_impl_k_mutex_lock+0xec>)
    e03e:	4631      	mov	r1, r6
    e040:	f000 f8de 	bl	e200 <z_reschedule>
	return -EAGAIN;
    e044:	f06f 000a 	mvn.w	r0, #10
    e048:	e7bd      	b.n	dfc6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    e04a:	2500      	movs	r5, #0
    e04c:	e7d1      	b.n	dff2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    e04e:	f386 8811 	msr	BASEPRI, r6
    e052:	f3bf 8f6f 	isb	sy
    e056:	e7f5      	b.n	e044 <z_impl_k_mutex_lock+0xd4>
    e058:	20001854 	.word	0x20001854
    e05c:	200022cb 	.word	0x200022cb

0000e060 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    e060:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    e062:	6883      	ldr	r3, [r0, #8]
{
    e064:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    e066:	2b00      	cmp	r3, #0
    e068:	d032      	beq.n	e0d0 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    e06a:	4a1c      	ldr	r2, [pc, #112]	; (e0dc <z_impl_k_mutex_unlock+0x7c>)
    e06c:	6892      	ldr	r2, [r2, #8]
    e06e:	4293      	cmp	r3, r2
    e070:	d131      	bne.n	e0d6 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    e072:	7bda      	ldrb	r2, [r3, #15]
    e074:	3a01      	subs	r2, #1
    e076:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    e078:	68c3      	ldr	r3, [r0, #12]
    e07a:	2b01      	cmp	r3, #1
    e07c:	d905      	bls.n	e08a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    e07e:	3b01      	subs	r3, #1
    e080:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    e082:	f000 fa9f 	bl	e5c4 <k_sched_unlock>

	return 0;
    e086:	2000      	movs	r0, #0
}
    e088:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    e08a:	f04f 0320 	mov.w	r3, #32
    e08e:	f3ef 8511 	mrs	r5, BASEPRI
    e092:	f383 8812 	msr	BASEPRI_MAX, r3
    e096:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    e09a:	6901      	ldr	r1, [r0, #16]
    e09c:	6880      	ldr	r0, [r0, #8]
    e09e:	f007 fa8e 	bl	155be <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    e0a2:	4620      	mov	r0, r4
    e0a4:	f007 fb24 	bl	156f0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    e0a8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    e0aa:	b158      	cbz	r0, e0c4 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    e0ac:	f990 200e 	ldrsb.w	r2, [r0, #14]
    e0b0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    e0b2:	2200      	movs	r2, #0
    e0b4:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    e0b6:	f007 fabf 	bl	15638 <z_ready_thread>
		z_reschedule(&lock, key);
    e0ba:	4809      	ldr	r0, [pc, #36]	; (e0e0 <z_impl_k_mutex_unlock+0x80>)
    e0bc:	4629      	mov	r1, r5
    e0be:	f000 f89f 	bl	e200 <z_reschedule>
    e0c2:	e7de      	b.n	e082 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    e0c4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    e0c6:	f385 8811 	msr	BASEPRI, r5
    e0ca:	f3bf 8f6f 	isb	sy
    e0ce:	e7d8      	b.n	e082 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    e0d0:	f06f 0015 	mvn.w	r0, #21
    e0d4:	e7d8      	b.n	e088 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    e0d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e0da:	e7d5      	b.n	e088 <z_impl_k_mutex_unlock+0x28>
    e0dc:	20001854 	.word	0x20001854
    e0e0:	200022cb 	.word	0x200022cb

0000e0e4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    e0e4:	b538      	push	{r3, r4, r5, lr}
    e0e6:	4604      	mov	r4, r0
	__asm__ volatile(
    e0e8:	f04f 0320 	mov.w	r3, #32
    e0ec:	f3ef 8511 	mrs	r5, BASEPRI
    e0f0:	f383 8812 	msr	BASEPRI_MAX, r3
    e0f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    e0f8:	f007 fafa 	bl	156f0 <z_unpend_first_thread>

	if (thread != NULL) {
    e0fc:	b148      	cbz	r0, e112 <z_impl_k_sem_give+0x2e>
    e0fe:	2200      	movs	r2, #0
    e100:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    e102:	f007 fa99 	bl	15638 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    e106:	4629      	mov	r1, r5
    e108:	4805      	ldr	r0, [pc, #20]	; (e120 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    e10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    e10e:	f000 b877 	b.w	e200 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    e112:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    e116:	429a      	cmp	r2, r3
    e118:	bf18      	it	ne
    e11a:	3301      	addne	r3, #1
    e11c:	60a3      	str	r3, [r4, #8]
}
    e11e:	e7f2      	b.n	e106 <z_impl_k_sem_give+0x22>
    e120:	200022cc 	.word	0x200022cc

0000e124 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    e124:	b513      	push	{r0, r1, r4, lr}
    e126:	f04f 0420 	mov.w	r4, #32
    e12a:	f3ef 8111 	mrs	r1, BASEPRI
    e12e:	f384 8812 	msr	BASEPRI_MAX, r4
    e132:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    e136:	6884      	ldr	r4, [r0, #8]
    e138:	b144      	cbz	r4, e14c <z_impl_k_sem_take+0x28>
		sem->count--;
    e13a:	3c01      	subs	r4, #1
    e13c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    e13e:	f381 8811 	msr	BASEPRI, r1
    e142:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    e146:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    e148:	b002      	add	sp, #8
    e14a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e14c:	ea52 0403 	orrs.w	r4, r2, r3
    e150:	d106      	bne.n	e160 <z_impl_k_sem_take+0x3c>
    e152:	f381 8811 	msr	BASEPRI, r1
    e156:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    e15a:	f06f 000f 	mvn.w	r0, #15
    e15e:	e7f3      	b.n	e148 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    e160:	e9cd 2300 	strd	r2, r3, [sp]
    e164:	4602      	mov	r2, r0
    e166:	4802      	ldr	r0, [pc, #8]	; (e170 <z_impl_k_sem_take+0x4c>)
    e168:	f000 f99e 	bl	e4a8 <z_pend_curr>
	return ret;
    e16c:	e7ec      	b.n	e148 <z_impl_k_sem_take+0x24>
    e16e:	bf00      	nop
    e170:	200022cc 	.word	0x200022cc

0000e174 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    e174:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    e176:	4d07      	ldr	r5, [pc, #28]	; (e194 <z_reset_time_slice+0x20>)
    e178:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    e17a:	b154      	cbz	r4, e192 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    e17c:	f7fe ff38 	bl	cff0 <sys_clock_elapsed>
    e180:	4b05      	ldr	r3, [pc, #20]	; (e198 <z_reset_time_slice+0x24>)
    e182:	4420      	add	r0, r4
    e184:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    e186:	2100      	movs	r1, #0
    e188:	6828      	ldr	r0, [r5, #0]
	}
}
    e18a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    e18e:	f007 baed 	b.w	1576c <z_set_timeout_expiry>
}
    e192:	bd38      	pop	{r3, r4, r5, pc}
    e194:	20001888 	.word	0x20001888
    e198:	20001854 	.word	0x20001854

0000e19c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e19e:	4604      	mov	r4, r0
    e1a0:	460d      	mov	r5, r1
	__asm__ volatile(
    e1a2:	f04f 0320 	mov.w	r3, #32
    e1a6:	f3ef 8711 	mrs	r7, BASEPRI
    e1aa:	f383 8812 	msr	BASEPRI_MAX, r3
    e1ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    e1b2:	4e10      	ldr	r6, [pc, #64]	; (e1f4 <k_sched_time_slice_set+0x58>)
    e1b4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    e1b6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    e1ba:	f240 30e7 	movw	r0, #999	; 0x3e7
    e1be:	6131      	str	r1, [r6, #16]
    e1c0:	2300      	movs	r3, #0
    e1c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e1c6:	fbe4 010c 	umlal	r0, r1, r4, ip
    e1ca:	f7f2 fd07 	bl	bdc <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    e1ce:	2c00      	cmp	r4, #0
    e1d0:	4b09      	ldr	r3, [pc, #36]	; (e1f8 <k_sched_time_slice_set+0x5c>)
    e1d2:	dc0a      	bgt.n	e1ea <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    e1d4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    e1d6:	4b09      	ldr	r3, [pc, #36]	; (e1fc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    e1d8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    e1da:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    e1dc:	f7ff ffca 	bl	e174 <z_reset_time_slice>
	__asm__ volatile(
    e1e0:	f387 8811 	msr	BASEPRI, r7
    e1e4:	f3bf 8f6f 	isb	sy
	}
}
    e1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    e1ea:	2802      	cmp	r0, #2
    e1ec:	bfb8      	it	lt
    e1ee:	2002      	movlt	r0, #2
    e1f0:	e7f0      	b.n	e1d4 <k_sched_time_slice_set+0x38>
    e1f2:	bf00      	nop
    e1f4:	20001854 	.word	0x20001854
    e1f8:	20001888 	.word	0x20001888
    e1fc:	20001884 	.word	0x20001884

0000e200 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e200:	b949      	cbnz	r1, e216 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e202:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    e206:	b930      	cbnz	r0, e216 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    e208:	4b05      	ldr	r3, [pc, #20]	; (e220 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    e20a:	69da      	ldr	r2, [r3, #28]
    e20c:	689b      	ldr	r3, [r3, #8]
    e20e:	429a      	cmp	r2, r3
    e210:	d001      	beq.n	e216 <z_reschedule+0x16>
	ret = arch_swap(key);
    e212:	f7fd bc05 	b.w	ba20 <arch_swap>
    e216:	f381 8811 	msr	BASEPRI, r1
    e21a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    e21e:	4770      	bx	lr
    e220:	20001854 	.word	0x20001854

0000e224 <k_sched_lock>:
	__asm__ volatile(
    e224:	f04f 0320 	mov.w	r3, #32
    e228:	f3ef 8111 	mrs	r1, BASEPRI
    e22c:	f383 8812 	msr	BASEPRI_MAX, r3
    e230:	f3bf 8f6f 	isb	sy
    e234:	4b04      	ldr	r3, [pc, #16]	; (e248 <k_sched_lock+0x24>)
    e236:	689a      	ldr	r2, [r3, #8]
    e238:	7bd3      	ldrb	r3, [r2, #15]
    e23a:	3b01      	subs	r3, #1
    e23c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    e23e:	f381 8811 	msr	BASEPRI, r1
    e242:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    e246:	4770      	bx	lr
    e248:	20001854 	.word	0x20001854

0000e24c <update_cache>:
{
    e24c:	b538      	push	{r3, r4, r5, lr}
    e24e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    e250:	480c      	ldr	r0, [pc, #48]	; (e284 <update_cache+0x38>)
    e252:	4d0d      	ldr	r5, [pc, #52]	; (e288 <update_cache+0x3c>)
    e254:	f007 f9ea 	bl	1562c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    e258:	4604      	mov	r4, r0
    e25a:	b900      	cbnz	r0, e25e <update_cache+0x12>
    e25c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    e25e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    e260:	b94a      	cbnz	r2, e276 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    e262:	7b5a      	ldrb	r2, [r3, #13]
    e264:	06d2      	lsls	r2, r2, #27
    e266:	d106      	bne.n	e276 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    e268:	69a2      	ldr	r2, [r4, #24]
    e26a:	b922      	cbnz	r2, e276 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    e26c:	89da      	ldrh	r2, [r3, #14]
    e26e:	2a7f      	cmp	r2, #127	; 0x7f
    e270:	d901      	bls.n	e276 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    e272:	61eb      	str	r3, [r5, #28]
}
    e274:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    e276:	429c      	cmp	r4, r3
    e278:	d002      	beq.n	e280 <update_cache+0x34>
			z_reset_time_slice(thread);
    e27a:	4620      	mov	r0, r4
    e27c:	f7ff ff7a 	bl	e174 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    e280:	61ec      	str	r4, [r5, #28]
}
    e282:	e7f7      	b.n	e274 <update_cache+0x28>
    e284:	20001874 	.word	0x20001874
    e288:	20001854 	.word	0x20001854

0000e28c <move_thread_to_end_of_prio_q>:
{
    e28c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    e28e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    e292:	7b43      	ldrb	r3, [r0, #13]
    e294:	2a00      	cmp	r2, #0
{
    e296:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    e298:	da04      	bge.n	e2a4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e29e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    e2a0:	f007 f99c 	bl	155dc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    e2a4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    e2a6:	4a15      	ldr	r2, [pc, #84]	; (e2fc <move_thread_to_end_of_prio_q+0x70>)
    e2a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e2ac:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    e2ae:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e2b2:	f102 0520 	add.w	r5, r2, #32
    e2b6:	42ab      	cmp	r3, r5
    e2b8:	d01b      	beq.n	e2f2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e2ba:	b1d3      	cbz	r3, e2f2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    e2bc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    e2c0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    e2c4:	4286      	cmp	r6, r0
    e2c6:	d00f      	beq.n	e2e8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    e2c8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    e2ca:	2800      	cmp	r0, #0
    e2cc:	dd0c      	ble.n	e2e8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    e2ce:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    e2d0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    e2d4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    e2d6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    e2d8:	6890      	ldr	r0, [r2, #8]
    e2da:	1a43      	subs	r3, r0, r1
    e2dc:	4258      	negs	r0, r3
}
    e2de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    e2e2:	4158      	adcs	r0, r3
    e2e4:	f7ff bfb2 	b.w	e24c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    e2e8:	42a3      	cmp	r3, r4
    e2ea:	d002      	beq.n	e2f2 <move_thread_to_end_of_prio_q+0x66>
    e2ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d1e6      	bne.n	e2c0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    e2f2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    e2f6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    e2f8:	6251      	str	r1, [r2, #36]	; 0x24
}
    e2fa:	e7ed      	b.n	e2d8 <move_thread_to_end_of_prio_q+0x4c>
    e2fc:	20001854 	.word	0x20001854

0000e300 <z_time_slice>:
{
    e300:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e302:	f04f 0320 	mov.w	r3, #32
    e306:	f3ef 8511 	mrs	r5, BASEPRI
    e30a:	f383 8812 	msr	BASEPRI_MAX, r3
    e30e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    e312:	4b17      	ldr	r3, [pc, #92]	; (e370 <z_time_slice+0x70>)
    e314:	4a17      	ldr	r2, [pc, #92]	; (e374 <z_time_slice+0x74>)
    e316:	689c      	ldr	r4, [r3, #8]
    e318:	6811      	ldr	r1, [r2, #0]
    e31a:	428c      	cmp	r4, r1
    e31c:	d107      	bne.n	e32e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    e31e:	4620      	mov	r0, r4
    e320:	f7ff ff28 	bl	e174 <z_reset_time_slice>
	__asm__ volatile(
    e324:	f385 8811 	msr	BASEPRI, r5
    e328:	f3bf 8f6f 	isb	sy
}
    e32c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    e32e:	2100      	movs	r1, #0
    e330:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    e332:	4a11      	ldr	r2, [pc, #68]	; (e378 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    e334:	6812      	ldr	r2, [r2, #0]
    e336:	b1c2      	cbz	r2, e36a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    e338:	89e2      	ldrh	r2, [r4, #14]
    e33a:	2a7f      	cmp	r2, #127	; 0x7f
    e33c:	d815      	bhi.n	e36a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    e33e:	7b62      	ldrb	r2, [r4, #13]
    e340:	06d2      	lsls	r2, r2, #27
    e342:	d112      	bne.n	e36a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    e344:	4a0d      	ldr	r2, [pc, #52]	; (e37c <z_time_slice+0x7c>)
    e346:	f994 100e 	ldrsb.w	r1, [r4, #14]
    e34a:	6812      	ldr	r2, [r2, #0]
    e34c:	4291      	cmp	r1, r2
    e34e:	db0c      	blt.n	e36a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    e350:	4a0b      	ldr	r2, [pc, #44]	; (e380 <z_time_slice+0x80>)
    e352:	4294      	cmp	r4, r2
    e354:	d009      	beq.n	e36a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    e356:	691a      	ldr	r2, [r3, #16]
    e358:	4282      	cmp	r2, r0
    e35a:	dc03      	bgt.n	e364 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    e35c:	4620      	mov	r0, r4
    e35e:	f7ff ff95 	bl	e28c <move_thread_to_end_of_prio_q>
    e362:	e7dc      	b.n	e31e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    e364:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    e366:	611a      	str	r2, [r3, #16]
    e368:	e7dc      	b.n	e324 <z_time_slice+0x24>
    e36a:	2200      	movs	r2, #0
    e36c:	e7fb      	b.n	e366 <z_time_slice+0x66>
    e36e:	bf00      	nop
    e370:	20001854 	.word	0x20001854
    e374:	20001880 	.word	0x20001880
    e378:	20001888 	.word	0x20001888
    e37c:	20001884 	.word	0x20001884
    e380:	20000678 	.word	0x20000678

0000e384 <ready_thread>:
{
    e384:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    e386:	f990 200d 	ldrsb.w	r2, [r0, #13]
    e38a:	7b43      	ldrb	r3, [r0, #13]
    e38c:	2a00      	cmp	r2, #0
    e38e:	db2a      	blt.n	e3e6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e390:	06da      	lsls	r2, r3, #27
    e392:	d128      	bne.n	e3e6 <ready_thread+0x62>
    e394:	6982      	ldr	r2, [r0, #24]
    e396:	bb32      	cbnz	r2, e3e6 <ready_thread+0x62>
	return list->head == list;
    e398:	4a14      	ldr	r2, [pc, #80]	; (e3ec <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    e39a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e39e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    e3a0:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e3a4:	f102 0520 	add.w	r5, r2, #32
    e3a8:	42ab      	cmp	r3, r5
    e3aa:	d017      	beq.n	e3dc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e3ac:	b1b3      	cbz	r3, e3dc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    e3ae:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    e3b2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    e3b6:	428e      	cmp	r6, r1
    e3b8:	d00b      	beq.n	e3d2 <ready_thread+0x4e>
		return b2 - b1;
    e3ba:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    e3bc:	2900      	cmp	r1, #0
    e3be:	dd08      	ble.n	e3d2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    e3c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e3c2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    e3c6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    e3c8:	6058      	str	r0, [r3, #4]
}
    e3ca:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    e3cc:	2000      	movs	r0, #0
    e3ce:	f7ff bf3d 	b.w	e24c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    e3d2:	42a3      	cmp	r3, r4
    e3d4:	d002      	beq.n	e3dc <ready_thread+0x58>
    e3d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e3d8:	2b00      	cmp	r3, #0
    e3da:	d1ea      	bne.n	e3b2 <ready_thread+0x2e>
	node->prev = tail;
    e3dc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    e3e0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    e3e2:	6250      	str	r0, [r2, #36]	; 0x24
}
    e3e4:	e7f1      	b.n	e3ca <ready_thread+0x46>
}
    e3e6:	bc70      	pop	{r4, r5, r6}
    e3e8:	4770      	bx	lr
    e3ea:	bf00      	nop
    e3ec:	20001854 	.word	0x20001854

0000e3f0 <z_sched_start>:
{
    e3f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    e3f2:	f04f 0220 	mov.w	r2, #32
    e3f6:	f3ef 8411 	mrs	r4, BASEPRI
    e3fa:	f382 8812 	msr	BASEPRI_MAX, r2
    e3fe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    e402:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    e404:	0751      	lsls	r1, r2, #29
    e406:	d404      	bmi.n	e412 <z_sched_start+0x22>
	__asm__ volatile(
    e408:	f384 8811 	msr	BASEPRI, r4
    e40c:	f3bf 8f6f 	isb	sy
}
    e410:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e412:	f022 0204 	bic.w	r2, r2, #4
    e416:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    e418:	f7ff ffb4 	bl	e384 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    e41c:	4621      	mov	r1, r4
    e41e:	4802      	ldr	r0, [pc, #8]	; (e428 <z_sched_start+0x38>)
}
    e420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    e424:	f7ff beec 	b.w	e200 <z_reschedule>
    e428:	200022cd 	.word	0x200022cd

0000e42c <unready_thread>:
{
    e42c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    e42e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    e432:	7b43      	ldrb	r3, [r0, #13]
    e434:	2a00      	cmp	r2, #0
{
    e436:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    e438:	da04      	bge.n	e444 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e43a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e43e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e440:	f007 f8cc 	bl	155dc <sys_dlist_remove>
	update_cache(thread == _current);
    e444:	4b04      	ldr	r3, [pc, #16]	; (e458 <unready_thread+0x2c>)
    e446:	6898      	ldr	r0, [r3, #8]
    e448:	1a43      	subs	r3, r0, r1
    e44a:	4258      	negs	r0, r3
    e44c:	4158      	adcs	r0, r3
}
    e44e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    e452:	f7ff befb 	b.w	e24c <update_cache>
    e456:	bf00      	nop
    e458:	20001854 	.word	0x20001854

0000e45c <pend>:
{
    e45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e460:	4606      	mov	r6, r0
    e462:	4615      	mov	r5, r2
    e464:	461c      	mov	r4, r3
	__asm__ volatile(
    e466:	f04f 0320 	mov.w	r3, #32
    e46a:	f3ef 8711 	mrs	r7, BASEPRI
    e46e:	f383 8812 	msr	BASEPRI_MAX, r3
    e472:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    e476:	f007 f911 	bl	1569c <add_to_waitq_locked>
	__asm__ volatile(
    e47a:	f387 8811 	msr	BASEPRI, r7
    e47e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e482:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e486:	bf08      	it	eq
    e488:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    e48c:	d008      	beq.n	e4a0 <pend+0x44>
    e48e:	462a      	mov	r2, r5
    e490:	4623      	mov	r3, r4
    e492:	f106 0018 	add.w	r0, r6, #24
    e496:	4903      	ldr	r1, [pc, #12]	; (e4a4 <pend+0x48>)
}
    e498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e49c:	f000 ba18 	b.w	e8d0 <z_add_timeout>
    e4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4a4:	00015659 	.word	0x00015659

0000e4a8 <z_pend_curr>:
{
    e4a8:	b510      	push	{r4, lr}
	pending_current = _current;
    e4aa:	4b07      	ldr	r3, [pc, #28]	; (e4c8 <z_pend_curr+0x20>)
    e4ac:	6898      	ldr	r0, [r3, #8]
    e4ae:	4b07      	ldr	r3, [pc, #28]	; (e4cc <z_pend_curr+0x24>)
{
    e4b0:	460c      	mov	r4, r1
	pending_current = _current;
    e4b2:	6018      	str	r0, [r3, #0]
{
    e4b4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    e4b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e4ba:	f7ff ffcf 	bl	e45c <pend>
    e4be:	4620      	mov	r0, r4
}
    e4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4c4:	f7fd baac 	b.w	ba20 <arch_swap>
    e4c8:	20001854 	.word	0x20001854
    e4cc:	20001880 	.word	0x20001880

0000e4d0 <z_set_prio>:
{
    e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4d2:	4604      	mov	r4, r0
	__asm__ volatile(
    e4d4:	f04f 0320 	mov.w	r3, #32
    e4d8:	f3ef 8611 	mrs	r6, BASEPRI
    e4dc:	f383 8812 	msr	BASEPRI_MAX, r3
    e4e0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    e4e4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e4e6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    e4e8:	b249      	sxtb	r1, r1
    e4ea:	d133      	bne.n	e554 <z_set_prio+0x84>
		if (need_sched) {
    e4ec:	6982      	ldr	r2, [r0, #24]
    e4ee:	bb8a      	cbnz	r2, e554 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e4f4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e4f6:	f007 f871 	bl	155dc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    e4fa:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    e4fc:	4a17      	ldr	r2, [pc, #92]	; (e55c <z_set_prio+0x8c>)
				thread->base.prio = prio;
    e4fe:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    e500:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e504:	7343      	strb	r3, [r0, #13]
    e506:	4610      	mov	r0, r2
    e508:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e50c:	4283      	cmp	r3, r0
    e50e:	d01b      	beq.n	e548 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e510:	b1d3      	cbz	r3, e548 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    e512:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    e514:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    e518:	42a9      	cmp	r1, r5
    e51a:	d010      	beq.n	e53e <z_set_prio+0x6e>
		return b2 - b1;
    e51c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    e51e:	2d00      	cmp	r5, #0
    e520:	dd0d      	ble.n	e53e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    e522:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e524:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    e528:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    e52a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    e52c:	2001      	movs	r0, #1
    e52e:	f7ff fe8d 	bl	e24c <update_cache>
    e532:	2001      	movs	r0, #1
	__asm__ volatile(
    e534:	f386 8811 	msr	BASEPRI, r6
    e538:	f3bf 8f6f 	isb	sy
}
    e53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    e53e:	42bb      	cmp	r3, r7
    e540:	d002      	beq.n	e548 <z_set_prio+0x78>
    e542:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e544:	2b00      	cmp	r3, #0
    e546:	d1e5      	bne.n	e514 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    e548:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    e54a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    e54e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e550:	6254      	str	r4, [r2, #36]	; 0x24
}
    e552:	e7eb      	b.n	e52c <z_set_prio+0x5c>
			thread->base.prio = prio;
    e554:	73a1      	strb	r1, [r4, #14]
    e556:	2000      	movs	r0, #0
    e558:	e7ec      	b.n	e534 <z_set_prio+0x64>
    e55a:	bf00      	nop
    e55c:	20001854 	.word	0x20001854

0000e560 <z_impl_k_thread_suspend>:
{
    e560:	b570      	push	{r4, r5, r6, lr}
    e562:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    e564:	3018      	adds	r0, #24
    e566:	f007 f8db 	bl	15720 <z_abort_timeout>
	__asm__ volatile(
    e56a:	f04f 0320 	mov.w	r3, #32
    e56e:	f3ef 8611 	mrs	r6, BASEPRI
    e572:	f383 8812 	msr	BASEPRI_MAX, r3
    e576:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    e57a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    e57e:	7b63      	ldrb	r3, [r4, #13]
    e580:	2a00      	cmp	r2, #0
    e582:	da05      	bge.n	e590 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e588:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e58a:	4620      	mov	r0, r4
    e58c:	f007 f826 	bl	155dc <sys_dlist_remove>
		update_cache(thread == _current);
    e590:	4d0b      	ldr	r5, [pc, #44]	; (e5c0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    e592:	7b63      	ldrb	r3, [r4, #13]
    e594:	68a8      	ldr	r0, [r5, #8]
    e596:	f043 0310 	orr.w	r3, r3, #16
    e59a:	7363      	strb	r3, [r4, #13]
    e59c:	1b03      	subs	r3, r0, r4
    e59e:	4258      	negs	r0, r3
    e5a0:	4158      	adcs	r0, r3
    e5a2:	f7ff fe53 	bl	e24c <update_cache>
	__asm__ volatile(
    e5a6:	f386 8811 	msr	BASEPRI, r6
    e5aa:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    e5ae:	68ab      	ldr	r3, [r5, #8]
    e5b0:	42a3      	cmp	r3, r4
    e5b2:	d103      	bne.n	e5bc <z_impl_k_thread_suspend+0x5c>
}
    e5b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    e5b8:	f007 b82e 	b.w	15618 <z_reschedule_unlocked>
}
    e5bc:	bd70      	pop	{r4, r5, r6, pc}
    e5be:	bf00      	nop
    e5c0:	20001854 	.word	0x20001854

0000e5c4 <k_sched_unlock>:
{
    e5c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    e5c6:	f04f 0320 	mov.w	r3, #32
    e5ca:	f3ef 8411 	mrs	r4, BASEPRI
    e5ce:	f383 8812 	msr	BASEPRI_MAX, r3
    e5d2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    e5d6:	4b08      	ldr	r3, [pc, #32]	; (e5f8 <k_sched_unlock+0x34>)
    e5d8:	689a      	ldr	r2, [r3, #8]
    e5da:	7bd3      	ldrb	r3, [r2, #15]
    e5dc:	3301      	adds	r3, #1
    e5de:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    e5e0:	2000      	movs	r0, #0
    e5e2:	f7ff fe33 	bl	e24c <update_cache>
	__asm__ volatile(
    e5e6:	f384 8811 	msr	BASEPRI, r4
    e5ea:	f3bf 8f6f 	isb	sy
}
    e5ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    e5f2:	f007 b811 	b.w	15618 <z_reschedule_unlocked>
    e5f6:	bf00      	nop
    e5f8:	20001854 	.word	0x20001854

0000e5fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    e5fc:	4b04      	ldr	r3, [pc, #16]	; (e610 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    e5fe:	2100      	movs	r1, #0
    e600:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    e604:	e9c3 2208 	strd	r2, r2, [r3, #32]
    e608:	4608      	mov	r0, r1
    e60a:	f7ff bdc7 	b.w	e19c <k_sched_time_slice_set>
    e60e:	bf00      	nop
    e610:	20001854 	.word	0x20001854

0000e614 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    e614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    e616:	f04f 0320 	mov.w	r3, #32
    e61a:	f3ef 8511 	mrs	r5, BASEPRI
    e61e:	f383 8812 	msr	BASEPRI_MAX, r3
    e622:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    e626:	491a      	ldr	r1, [pc, #104]	; (e690 <z_impl_k_yield+0x7c>)
    e628:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e62a:	7b43      	ldrb	r3, [r0, #13]
    e62c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e630:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e632:	f006 ffd3 	bl	155dc <sys_dlist_remove>
	}
	queue_thread(_current);
    e636:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    e638:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    e63a:	4608      	mov	r0, r1
    e63c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    e640:	735a      	strb	r2, [r3, #13]
    e642:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e646:	4282      	cmp	r2, r0
    e648:	d01c      	beq.n	e684 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e64a:	b1da      	cbz	r2, e684 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    e64c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    e64e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    e652:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    e656:	42a6      	cmp	r6, r4
    e658:	d00f      	beq.n	e67a <z_impl_k_yield+0x66>
		return b2 - b1;
    e65a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    e65c:	2c00      	cmp	r4, #0
    e65e:	dd0c      	ble.n	e67a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    e660:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    e662:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    e666:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    e668:	6053      	str	r3, [r2, #4]
	update_cache(1);
    e66a:	2001      	movs	r0, #1
    e66c:	f7ff fdee 	bl	e24c <update_cache>
    e670:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    e672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e676:	f7fd b9d3 	b.w	ba20 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    e67a:	42ba      	cmp	r2, r7
    e67c:	d002      	beq.n	e684 <z_impl_k_yield+0x70>
    e67e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e680:	2a00      	cmp	r2, #0
    e682:	d1e6      	bne.n	e652 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    e684:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    e686:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    e68a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e68c:	624b      	str	r3, [r1, #36]	; 0x24
}
    e68e:	e7ec      	b.n	e66a <z_impl_k_yield+0x56>
    e690:	20001854 	.word	0x20001854

0000e694 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    e694:	ea50 0301 	orrs.w	r3, r0, r1
{
    e698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e69c:	4605      	mov	r5, r0
    e69e:	460e      	mov	r6, r1
	if (ticks == 0) {
    e6a0:	d103      	bne.n	e6aa <z_tick_sleep+0x16>
	z_impl_k_yield();
    e6a2:	f7ff ffb7 	bl	e614 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    e6a6:	2000      	movs	r0, #0
    e6a8:	e033      	b.n	e712 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    e6aa:	f06f 0401 	mvn.w	r4, #1
    e6ae:	1a24      	subs	r4, r4, r0
    e6b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e6b4:	eb63 0301 	sbc.w	r3, r3, r1
    e6b8:	2c01      	cmp	r4, #1
    e6ba:	f173 0300 	sbcs.w	r3, r3, #0
    e6be:	da02      	bge.n	e6c6 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    e6c0:	f007 f86f 	bl	157a2 <sys_clock_tick_get_32>
    e6c4:	1944      	adds	r4, r0, r5
    e6c6:	f04f 0320 	mov.w	r3, #32
    e6ca:	f3ef 8811 	mrs	r8, BASEPRI
    e6ce:	f383 8812 	msr	BASEPRI_MAX, r3
    e6d2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    e6d6:	4f10      	ldr	r7, [pc, #64]	; (e718 <z_tick_sleep+0x84>)
    e6d8:	4b10      	ldr	r3, [pc, #64]	; (e71c <z_tick_sleep+0x88>)
    e6da:	68b8      	ldr	r0, [r7, #8]
    e6dc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    e6de:	f7ff fea5 	bl	e42c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    e6e2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    e6e4:	490e      	ldr	r1, [pc, #56]	; (e720 <z_tick_sleep+0x8c>)
    e6e6:	462a      	mov	r2, r5
    e6e8:	4633      	mov	r3, r6
    e6ea:	3018      	adds	r0, #24
    e6ec:	f000 f8f0 	bl	e8d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    e6f0:	68ba      	ldr	r2, [r7, #8]
    e6f2:	7b53      	ldrb	r3, [r2, #13]
    e6f4:	f043 0310 	orr.w	r3, r3, #16
    e6f8:	7353      	strb	r3, [r2, #13]
    e6fa:	4640      	mov	r0, r8
    e6fc:	f7fd f990 	bl	ba20 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    e700:	f007 f84f 	bl	157a2 <sys_clock_tick_get_32>
    e704:	1a20      	subs	r0, r4, r0
    e706:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    e70a:	2801      	cmp	r0, #1
    e70c:	f173 0300 	sbcs.w	r3, r3, #0
    e710:	dbc9      	blt.n	e6a6 <z_tick_sleep+0x12>
}
    e712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e716:	bf00      	nop
    e718:	20001854 	.word	0x20001854
    e71c:	20001880 	.word	0x20001880
    e720:	00015659 	.word	0x00015659

0000e724 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e724:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    e728:	bf08      	it	eq
    e72a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    e72e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e730:	d106      	bne.n	e740 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    e732:	4b08      	ldr	r3, [pc, #32]	; (e754 <z_impl_k_sleep+0x30>)
    e734:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    e736:	f7ff ff13 	bl	e560 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    e73a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    e73e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    e740:	f7ff ffa8 	bl	e694 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    e744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e748:	fb80 0303 	smull	r0, r3, r0, r3
    e74c:	0bc0      	lsrs	r0, r0, #15
    e74e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    e752:	e7f4      	b.n	e73e <z_impl_k_sleep+0x1a>
    e754:	20001854 	.word	0x20001854

0000e758 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    e758:	4b01      	ldr	r3, [pc, #4]	; (e760 <z_impl_z_current_get+0x8>)
    e75a:	6898      	ldr	r0, [r3, #8]
    e75c:	4770      	bx	lr
    e75e:	bf00      	nop
    e760:	20001854 	.word	0x20001854

0000e764 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    e764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e768:	4604      	mov	r4, r0
    e76a:	f04f 0320 	mov.w	r3, #32
    e76e:	f3ef 8611 	mrs	r6, BASEPRI
    e772:	f383 8812 	msr	BASEPRI_MAX, r3
    e776:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    e77a:	7b43      	ldrb	r3, [r0, #13]
    e77c:	071a      	lsls	r2, r3, #28
    e77e:	d505      	bpl.n	e78c <z_thread_abort+0x28>
	__asm__ volatile(
    e780:	f386 8811 	msr	BASEPRI, r6
    e784:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    e788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e78c:	f023 0220 	bic.w	r2, r3, #32
    e790:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    e794:	09d2      	lsrs	r2, r2, #7
    e796:	d120      	bne.n	e7da <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e798:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    e79a:	68a3      	ldr	r3, [r4, #8]
    e79c:	b113      	cbz	r3, e7a4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    e79e:	4620      	mov	r0, r4
    e7a0:	f006 ff24 	bl	155ec <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    e7a4:	f104 0018 	add.w	r0, r4, #24
    e7a8:	f006 ffba 	bl	15720 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    e7ac:	f104 0758 	add.w	r7, r4, #88	; 0x58
    e7b0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    e7b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e7b6:	42bd      	cmp	r5, r7
    e7b8:	d000      	beq.n	e7bc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e7ba:	b9b5      	cbnz	r5, e7ea <z_thread_abort+0x86>
		update_cache(1);
    e7bc:	2001      	movs	r0, #1
    e7be:	f7ff fd45 	bl	e24c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    e7c2:	4b10      	ldr	r3, [pc, #64]	; (e804 <z_thread_abort+0xa0>)
    e7c4:	689b      	ldr	r3, [r3, #8]
    e7c6:	42a3      	cmp	r3, r4
    e7c8:	d1da      	bne.n	e780 <z_thread_abort+0x1c>
    e7ca:	f3ef 8305 	mrs	r3, IPSR
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d1d6      	bne.n	e780 <z_thread_abort+0x1c>
    e7d2:	4630      	mov	r0, r6
    e7d4:	f7fd f924 	bl	ba20 <arch_swap>
	return ret;
    e7d8:	e7d2      	b.n	e780 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e7da:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    e7de:	f043 0308 	orr.w	r3, r3, #8
    e7e2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e7e4:	f006 fefa 	bl	155dc <sys_dlist_remove>
}
    e7e8:	e7d7      	b.n	e79a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    e7ea:	4628      	mov	r0, r5
    e7ec:	f006 fefe 	bl	155ec <unpend_thread_no_timeout>
    e7f0:	f105 0018 	add.w	r0, r5, #24
    e7f4:	f006 ff94 	bl	15720 <z_abort_timeout>
    e7f8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    e7fc:	4628      	mov	r0, r5
    e7fe:	f7ff fdc1 	bl	e384 <ready_thread>
    e802:	e7d7      	b.n	e7b4 <z_thread_abort+0x50>
    e804:	20001854 	.word	0x20001854

0000e808 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    e808:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    e80a:	4806      	ldr	r0, [pc, #24]	; (e824 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    e80c:	4a06      	ldr	r2, [pc, #24]	; (e828 <z_data_copy+0x20>)
    e80e:	4907      	ldr	r1, [pc, #28]	; (e82c <z_data_copy+0x24>)
    e810:	1a12      	subs	r2, r2, r0
    e812:	f006 fe80 	bl	15516 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    e816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    e81a:	4a05      	ldr	r2, [pc, #20]	; (e830 <z_data_copy+0x28>)
    e81c:	4905      	ldr	r1, [pc, #20]	; (e834 <z_data_copy+0x2c>)
    e81e:	4806      	ldr	r0, [pc, #24]	; (e838 <z_data_copy+0x30>)
    e820:	f006 be79 	b.w	15516 <z_early_memcpy>
    e824:	20000000 	.word	0x20000000
    e828:	20000658 	.word	0x20000658
    e82c:	0004624c 	.word	0x0004624c
    e830:	00000000 	.word	0x00000000
    e834:	0004624c 	.word	0x0004624c
    e838:	20000000 	.word	0x20000000

0000e83c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    e83c:	4b03      	ldr	r3, [pc, #12]	; (e84c <elapsed+0x10>)
    e83e:	681b      	ldr	r3, [r3, #0]
    e840:	b90b      	cbnz	r3, e846 <elapsed+0xa>
    e842:	f7fe bbd5 	b.w	cff0 <sys_clock_elapsed>
}
    e846:	2000      	movs	r0, #0
    e848:	4770      	bx	lr
    e84a:	bf00      	nop
    e84c:	2000188c 	.word	0x2000188c

0000e850 <next_timeout>:
	return list->head == list;
    e850:	4b10      	ldr	r3, [pc, #64]	; (e894 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    e852:	b510      	push	{r4, lr}
    e854:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e856:	429c      	cmp	r4, r3
    e858:	bf08      	it	eq
    e85a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    e85c:	f7ff ffee 	bl	e83c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    e860:	b1a4      	cbz	r4, e88c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    e862:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    e866:	1a1b      	subs	r3, r3, r0
    e868:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    e86c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    e870:	f170 0200 	sbcs.w	r2, r0, #0
    e874:	da0a      	bge.n	e88c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    e876:	2800      	cmp	r0, #0
    e878:	bfac      	ite	ge
    e87a:	4618      	movge	r0, r3
    e87c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    e87e:	4b06      	ldr	r3, [pc, #24]	; (e898 <next_timeout+0x48>)
    e880:	691b      	ldr	r3, [r3, #16]
    e882:	b113      	cbz	r3, e88a <next_timeout+0x3a>
    e884:	4298      	cmp	r0, r3
    e886:	bfa8      	it	ge
    e888:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    e88a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    e88c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e890:	e7f5      	b.n	e87e <next_timeout+0x2e>
    e892:	bf00      	nop
    e894:	2000037c 	.word	0x2000037c
    e898:	20001854 	.word	0x20001854

0000e89c <remove_timeout>:
{
    e89c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    e89e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e8a0:	b168      	cbz	r0, e8be <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    e8a2:	4a0a      	ldr	r2, [pc, #40]	; (e8cc <remove_timeout+0x30>)
    e8a4:	6852      	ldr	r2, [r2, #4]
    e8a6:	4290      	cmp	r0, r2
    e8a8:	d009      	beq.n	e8be <remove_timeout+0x22>
	if (next(t) != NULL) {
    e8aa:	b143      	cbz	r3, e8be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    e8ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    e8b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    e8b4:	1912      	adds	r2, r2, r4
    e8b6:	eb41 0105 	adc.w	r1, r1, r5
    e8ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    e8be:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    e8c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e8c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e8c4:	2300      	movs	r3, #0
	node->prev = NULL;
    e8c6:	e9c0 3300 	strd	r3, r3, [r0]
}
    e8ca:	bd30      	pop	{r4, r5, pc}
    e8cc:	2000037c 	.word	0x2000037c

0000e8d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e8d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e8d4:	bf08      	it	eq
    e8d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    e8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8dc:	4604      	mov	r4, r0
    e8de:	461f      	mov	r7, r3
    e8e0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e8e2:	d065      	beq.n	e9b0 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    e8e4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    e8e6:	f04f 0320 	mov.w	r3, #32
    e8ea:	f3ef 8611 	mrs	r6, BASEPRI
    e8ee:	f383 8812 	msr	BASEPRI_MAX, r3
    e8f2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    e8f6:	f06f 0201 	mvn.w	r2, #1
    e8fa:	1b53      	subs	r3, r2, r5
    e8fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    e900:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    e904:	2b00      	cmp	r3, #0
    e906:	db1b      	blt.n	e940 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    e908:	4b2a      	ldr	r3, [pc, #168]	; (e9b4 <z_add_timeout+0xe4>)
    e90a:	e9d3 1300 	ldrd	r1, r3, [r3]
    e90e:	1a52      	subs	r2, r2, r1
    e910:	eb6c 0303 	sbc.w	r3, ip, r3
    e914:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    e916:	eb63 0307 	sbc.w	r3, r3, r7
    e91a:	2d01      	cmp	r5, #1
    e91c:	f173 0200 	sbcs.w	r2, r3, #0
    e920:	da01      	bge.n	e926 <z_add_timeout+0x56>
    e922:	2501      	movs	r5, #1
    e924:	2300      	movs	r3, #0
	return list->head == list;
    e926:	4824      	ldr	r0, [pc, #144]	; (e9b8 <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    e928:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
    e92c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e930:	4283      	cmp	r3, r0
    e932:	d116      	bne.n	e962 <z_add_timeout+0x92>
	node->prev = tail;
    e934:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    e938:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    e93c:	6044      	str	r4, [r0, #4]
}
    e93e:	e024      	b.n	e98a <z_add_timeout+0xba>
    e940:	f7ff ff7c 	bl	e83c <elapsed>
    e944:	3501      	adds	r5, #1
    e946:	f147 0300 	adc.w	r3, r7, #0
    e94a:	182d      	adds	r5, r5, r0
    e94c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    e950:	e7e9      	b.n	e926 <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    e952:	1a52      	subs	r2, r2, r1
    e954:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    e958:	459c      	cmp	ip, r3
    e95a:	e9c4 2504 	strd	r2, r5, [r4, #16]
    e95e:	d0e9      	beq.n	e934 <z_add_timeout+0x64>
    e960:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    e962:	2b00      	cmp	r3, #0
    e964:	d0e6      	beq.n	e934 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    e966:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    e96a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    e96e:	428a      	cmp	r2, r1
    e970:	eb75 0e07 	sbcs.w	lr, r5, r7
    e974:	daed      	bge.n	e952 <z_add_timeout+0x82>
				t->dticks -= to->dticks;
    e976:	1a8a      	subs	r2, r1, r2
    e978:	eb67 0505 	sbc.w	r5, r7, r5
    e97c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    e980:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e982:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    e986:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    e988:	605c      	str	r4, [r3, #4]
	return list->head == list;
    e98a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e98c:	4283      	cmp	r3, r0
    e98e:	d00b      	beq.n	e9a8 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    e990:	429c      	cmp	r4, r3
    e992:	d109      	bne.n	e9a8 <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    e994:	f7ff ff5c 	bl	e850 <next_timeout>

			if (next_time == 0 ||
    e998:	b118      	cbz	r0, e9a2 <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
    e99a:	4b08      	ldr	r3, [pc, #32]	; (e9bc <z_add_timeout+0xec>)
			if (next_time == 0 ||
    e99c:	691b      	ldr	r3, [r3, #16]
    e99e:	4283      	cmp	r3, r0
    e9a0:	d002      	beq.n	e9a8 <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
    e9a2:	2100      	movs	r1, #0
    e9a4:	f7fe faf2 	bl	cf8c <sys_clock_set_timeout>
	__asm__ volatile(
    e9a8:	f386 8811 	msr	BASEPRI, r6
    e9ac:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    e9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e9b2:	bf00      	nop
    e9b4:	200007f8 	.word	0x200007f8
    e9b8:	2000037c 	.word	0x2000037c
    e9bc:	20001854 	.word	0x20001854

0000e9c0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    e9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e9c4:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    e9c6:	f7ff fc9b 	bl	e300 <z_time_slice>
	__asm__ volatile(
    e9ca:	f04f 0320 	mov.w	r3, #32
    e9ce:	f3ef 8411 	mrs	r4, BASEPRI
    e9d2:	f383 8812 	msr	BASEPRI_MAX, r3
    e9d6:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    e9da:	4e24      	ldr	r6, [pc, #144]	; (ea6c <sys_clock_announce+0xac>)
	return list->head == list;
    e9dc:	f8df 8094 	ldr.w	r8, [pc, #148]	; ea74 <sys_clock_announce+0xb4>
    e9e0:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    e9e2:	4d23      	ldr	r5, [pc, #140]	; (ea70 <sys_clock_announce+0xb0>)
    e9e4:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    e9e8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e9ea:	4540      	cmp	r0, r8
		curr_tick += dt;
    e9ec:	e9d5 1e00 	ldrd	r1, lr, [r5]
    e9f0:	ea4f 77e2 	mov.w	r7, r2, asr #31
    e9f4:	d00b      	beq.n	ea0e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    e9f6:	b150      	cbz	r0, ea0e <sys_clock_announce+0x4e>
    e9f8:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    e9fc:	429a      	cmp	r2, r3
    e9fe:	eb77 090c 	sbcs.w	r9, r7, ip
    ea02:	da16      	bge.n	ea32 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    ea04:	1a9b      	subs	r3, r3, r2
    ea06:	eb6c 0c07 	sbc.w	ip, ip, r7
    ea0a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    ea0e:	1852      	adds	r2, r2, r1
    ea10:	eb4e 0707 	adc.w	r7, lr, r7
    ea14:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    ea18:	2500      	movs	r5, #0
    ea1a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    ea1c:	f7ff ff18 	bl	e850 <next_timeout>
    ea20:	4629      	mov	r1, r5
    ea22:	f7fe fab3 	bl	cf8c <sys_clock_set_timeout>
	__asm__ volatile(
    ea26:	f384 8811 	msr	BASEPRI, r4
    ea2a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    ea2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    ea32:	1859      	adds	r1, r3, r1
    ea34:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    ea38:	1ad3      	subs	r3, r2, r3
    ea3a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    ea3c:	2200      	movs	r2, #0
    ea3e:	2300      	movs	r3, #0
    ea40:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    ea44:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    ea48:	f7ff ff28 	bl	e89c <remove_timeout>
    ea4c:	f384 8811 	msr	BASEPRI, r4
    ea50:	f3bf 8f6f 	isb	sy
		t->fn(t);
    ea54:	6883      	ldr	r3, [r0, #8]
    ea56:	4798      	blx	r3
	__asm__ volatile(
    ea58:	f04f 0320 	mov.w	r3, #32
    ea5c:	f3ef 8411 	mrs	r4, BASEPRI
    ea60:	f383 8812 	msr	BASEPRI_MAX, r3
    ea64:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    ea68:	e7bc      	b.n	e9e4 <sys_clock_announce+0x24>
    ea6a:	bf00      	nop
    ea6c:	2000188c 	.word	0x2000188c
    ea70:	200007f8 	.word	0x200007f8
    ea74:	2000037c 	.word	0x2000037c

0000ea78 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    ea78:	b510      	push	{r4, lr}
    ea7a:	f04f 0320 	mov.w	r3, #32
    ea7e:	f3ef 8411 	mrs	r4, BASEPRI
    ea82:	f383 8812 	msr	BASEPRI_MAX, r3
    ea86:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    ea8a:	f7fe fab1 	bl	cff0 <sys_clock_elapsed>
    ea8e:	4a05      	ldr	r2, [pc, #20]	; (eaa4 <sys_clock_tick_get+0x2c>)
    ea90:	e9d2 3100 	ldrd	r3, r1, [r2]
    ea94:	18c0      	adds	r0, r0, r3
    ea96:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    ea9a:	f384 8811 	msr	BASEPRI, r4
    ea9e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    eaa2:	bd10      	pop	{r4, pc}
    eaa4:	200007f8 	.word	0x200007f8

0000eaa8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    eaa8:	4a02      	ldr	r2, [pc, #8]	; (eab4 <boot_banner+0xc>)
    eaaa:	4903      	ldr	r1, [pc, #12]	; (eab8 <boot_banner+0x10>)
    eaac:	4803      	ldr	r0, [pc, #12]	; (eabc <boot_banner+0x14>)
    eaae:	f005 bf36 	b.w	1491e <printk>
    eab2:	bf00      	nop
    eab4:	0004597a 	.word	0x0004597a
    eab8:	00045f2c 	.word	0x00045f2c
    eabc:	00045f39 	.word	0x00045f39

0000eac0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    eac0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    eac2:	4c06      	ldr	r4, [pc, #24]	; (eadc <statics_init+0x1c>)
    eac4:	4d06      	ldr	r5, [pc, #24]	; (eae0 <statics_init+0x20>)
    eac6:	42ac      	cmp	r4, r5
    eac8:	d301      	bcc.n	eace <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    eaca:	2000      	movs	r0, #0
    eacc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    eace:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    ead2:	4620      	mov	r0, r4
    ead4:	f006 fe6f 	bl	157b6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ead8:	3418      	adds	r4, #24
    eada:	e7f4      	b.n	eac6 <statics_init+0x6>
    eadc:	200005cc 	.word	0x200005cc
    eae0:	200005cc 	.word	0x200005cc

0000eae4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
    eae4:	b580      	push	{r7, lr}
    eae6:	b09c      	sub	sp, #112	; 0x70
    eae8:	4606      	mov	r6, r0
    eaea:	af00      	add	r7, sp, #0
    eaec:	460c      	mov	r4, r1
    eaee:	1ba4      	subs	r4, r4, r6
    eaf0:	490e      	ldr	r1, [pc, #56]	; (eb2c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
    eaf2:	2269      	movs	r2, #105	; 0x69
    eaf4:	1d38      	adds	r0, r7, #4
    eaf6:	f006 ff38 	bl	1596a <memcpy>
    eafa:	f104 0370 	add.w	r3, r4, #112	; 0x70
    eafe:	f023 0307 	bic.w	r3, r3, #7
    eb02:	ebad 0d03 	sub.w	sp, sp, r3
    eb06:	466d      	mov	r5, sp
    eb08:	2268      	movs	r2, #104	; 0x68
    eb0a:	1d39      	adds	r1, r7, #4
    eb0c:	4628      	mov	r0, r5
    eb0e:	f006 ff2c 	bl	1596a <memcpy>
    eb12:	4622      	mov	r2, r4
    eb14:	4631      	mov	r1, r6
    eb16:	f105 0068 	add.w	r0, r5, #104	; 0x68
    eb1a:	442c      	add	r4, r5
    eb1c:	f006 ff25 	bl	1596a <memcpy>
    eb20:	2300      	movs	r3, #0
    eb22:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    eb26:	4628      	mov	r0, r5
    eb28:	f006 fe66 	bl	157f8 <_ZSt19__throw_logic_errorPKc>
    eb2c:	00045f60 	.word	0x00045f60

0000eb30 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
    eb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb34:	af00      	add	r7, sp, #0
    eb36:	b084      	sub	sp, #16
    eb38:	466d      	mov	r5, sp
    eb3a:	f105 040c 	add.w	r4, r5, #12
    eb3e:	f8df 8044 	ldr.w	r8, [pc, #68]	; eb84 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
    eb42:	4623      	mov	r3, r4
    eb44:	f04f 0c0a 	mov.w	ip, #10
    eb48:	fbb2 f6fc 	udiv	r6, r2, ip
    eb4c:	fb0c 2e16 	mls	lr, ip, r6, r2
    eb50:	f818 e00e 	ldrb.w	lr, [r8, lr]
    eb54:	f803 ed01 	strb.w	lr, [r3, #-1]!
    eb58:	4696      	mov	lr, r2
    eb5a:	f1be 0f09 	cmp.w	lr, #9
    eb5e:	4632      	mov	r2, r6
    eb60:	d8f2      	bhi.n	eb48 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
    eb62:	1ae4      	subs	r4, r4, r3
    eb64:	428c      	cmp	r4, r1
    eb66:	d809      	bhi.n	eb7c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
    eb68:	f1c4 030c 	rsb	r3, r4, #12
    eb6c:	4622      	mov	r2, r4
    eb6e:	18e9      	adds	r1, r5, r3
    eb70:	f006 fefb 	bl	1596a <memcpy>
    eb74:	4620      	mov	r0, r4
    eb76:	46bd      	mov	sp, r7
    eb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    eb80:	e7f8      	b.n	eb74 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
    eb82:	bf00      	nop
    eb84:	00045fc9 	.word	0x00045fc9

0000eb88 <_ZSt15get_new_handlerv>:
    eb88:	4b02      	ldr	r3, [pc, #8]	; (eb94 <_ZSt15get_new_handlerv+0xc>)
    eb8a:	6818      	ldr	r0, [r3, #0]
    eb8c:	f3bf 8f5b 	dmb	ish
    eb90:	4770      	bx	lr
    eb92:	bf00      	nop
    eb94:	20001890 	.word	0x20001890

0000eb98 <frexp>:
    eb98:	b570      	push	{r4, r5, r6, lr}
    eb9a:	2100      	movs	r1, #0
    eb9c:	ec55 4b10 	vmov	r4, r5, d0
    eba0:	6001      	str	r1, [r0, #0]
    eba2:	4916      	ldr	r1, [pc, #88]	; (ebfc <frexp+0x64>)
    eba4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
    eba8:	428a      	cmp	r2, r1
    ebaa:	4606      	mov	r6, r0
    ebac:	462b      	mov	r3, r5
    ebae:	dc22      	bgt.n	ebf6 <frexp+0x5e>
    ebb0:	ee10 1a10 	vmov	r1, s0
    ebb4:	4311      	orrs	r1, r2
    ebb6:	d01e      	beq.n	ebf6 <frexp+0x5e>
    ebb8:	4911      	ldr	r1, [pc, #68]	; (ec00 <frexp+0x68>)
    ebba:	4029      	ands	r1, r5
    ebbc:	b969      	cbnz	r1, ebda <frexp+0x42>
    ebbe:	4b11      	ldr	r3, [pc, #68]	; (ec04 <frexp+0x6c>)
    ebc0:	2200      	movs	r2, #0
    ebc2:	ee10 0a10 	vmov	r0, s0
    ebc6:	4629      	mov	r1, r5
    ebc8:	f7f1 fca6 	bl	518 <__aeabi_dmul>
    ebcc:	460b      	mov	r3, r1
    ebce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    ebd2:	f06f 0135 	mvn.w	r1, #53	; 0x35
    ebd6:	4604      	mov	r4, r0
    ebd8:	6031      	str	r1, [r6, #0]
    ebda:	6831      	ldr	r1, [r6, #0]
    ebdc:	1512      	asrs	r2, r2, #20
    ebde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    ebe2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
    ebe6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    ebea:	440a      	add	r2, r1
    ebec:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
    ebf0:	6032      	str	r2, [r6, #0]
    ebf2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    ebf6:	ec45 4b10 	vmov	d0, r4, r5
    ebfa:	bd70      	pop	{r4, r5, r6, pc}
    ebfc:	7fefffff 	.word	0x7fefffff
    ec00:	7ff00000 	.word	0x7ff00000
    ec04:	43500000 	.word	0x43500000

0000ec08 <round>:
    ec08:	ec51 0b10 	vmov	r0, r1, d0
    ec0c:	b570      	push	{r4, r5, r6, lr}
    ec0e:	f3c1 550a 	ubfx	r5, r1, #20, #11
    ec12:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
    ec16:	2c13      	cmp	r4, #19
    ec18:	ee10 2a10 	vmov	r2, s0
    ec1c:	460b      	mov	r3, r1
    ec1e:	dc19      	bgt.n	ec54 <round+0x4c>
    ec20:	2c00      	cmp	r4, #0
    ec22:	da09      	bge.n	ec38 <round+0x30>
    ec24:	3401      	adds	r4, #1
    ec26:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    ec2a:	d103      	bne.n	ec34 <round+0x2c>
    ec2c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    ec30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ec34:	2200      	movs	r2, #0
    ec36:	e028      	b.n	ec8a <round+0x82>
    ec38:	4d15      	ldr	r5, [pc, #84]	; (ec90 <round+0x88>)
    ec3a:	4125      	asrs	r5, r4
    ec3c:	ea01 0605 	and.w	r6, r1, r5
    ec40:	4332      	orrs	r2, r6
    ec42:	d00e      	beq.n	ec62 <round+0x5a>
    ec44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    ec48:	fa42 f404 	asr.w	r4, r2, r4
    ec4c:	4423      	add	r3, r4
    ec4e:	ea23 0305 	bic.w	r3, r3, r5
    ec52:	e7ef      	b.n	ec34 <round+0x2c>
    ec54:	2c33      	cmp	r4, #51	; 0x33
    ec56:	dd07      	ble.n	ec68 <round+0x60>
    ec58:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    ec5c:	d101      	bne.n	ec62 <round+0x5a>
    ec5e:	f7f1 faa5 	bl	1ac <__adddf3>
    ec62:	ec41 0b10 	vmov	d0, r0, r1
    ec66:	bd70      	pop	{r4, r5, r6, pc}
    ec68:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
    ec6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    ec70:	40f5      	lsrs	r5, r6
    ec72:	4228      	tst	r0, r5
    ec74:	d0f5      	beq.n	ec62 <round+0x5a>
    ec76:	2101      	movs	r1, #1
    ec78:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
    ec7c:	fa01 f404 	lsl.w	r4, r1, r4
    ec80:	1912      	adds	r2, r2, r4
    ec82:	bf28      	it	cs
    ec84:	185b      	addcs	r3, r3, r1
    ec86:	ea22 0205 	bic.w	r2, r2, r5
    ec8a:	4619      	mov	r1, r3
    ec8c:	4610      	mov	r0, r2
    ec8e:	e7e8      	b.n	ec62 <round+0x5a>
    ec90:	000fffff 	.word	0x000fffff

0000ec94 <ceilf>:
    ec94:	ee10 3a10 	vmov	r3, s0
    ec98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    ec9c:	3a7f      	subs	r2, #127	; 0x7f
    ec9e:	2a16      	cmp	r2, #22
    eca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    eca4:	dc2a      	bgt.n	ecfc <ceilf+0x68>
    eca6:	2a00      	cmp	r2, #0
    eca8:	da11      	bge.n	ecce <ceilf+0x3a>
    ecaa:	eddf 7a19 	vldr	s15, [pc, #100]	; ed10 <ceilf+0x7c>
    ecae:	ee30 0a27 	vadd.f32	s0, s0, s15
    ecb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    ecb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ecba:	dd05      	ble.n	ecc8 <ceilf+0x34>
    ecbc:	2b00      	cmp	r3, #0
    ecbe:	db23      	blt.n	ed08 <ceilf+0x74>
    ecc0:	2900      	cmp	r1, #0
    ecc2:	bf18      	it	ne
    ecc4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
    ecc8:	ee00 3a10 	vmov	s0, r3
    eccc:	4770      	bx	lr
    ecce:	4911      	ldr	r1, [pc, #68]	; (ed14 <ceilf+0x80>)
    ecd0:	4111      	asrs	r1, r2
    ecd2:	420b      	tst	r3, r1
    ecd4:	d0fa      	beq.n	eccc <ceilf+0x38>
    ecd6:	eddf 7a0e 	vldr	s15, [pc, #56]	; ed10 <ceilf+0x7c>
    ecda:	ee30 0a27 	vadd.f32	s0, s0, s15
    ecde:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    ece2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ece6:	ddef      	ble.n	ecc8 <ceilf+0x34>
    ece8:	2b00      	cmp	r3, #0
    ecea:	bfc2      	ittt	gt
    ecec:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
    ecf0:	fa40 f202 	asrgt.w	r2, r0, r2
    ecf4:	189b      	addgt	r3, r3, r2
    ecf6:	ea23 0301 	bic.w	r3, r3, r1
    ecfa:	e7e5      	b.n	ecc8 <ceilf+0x34>
    ecfc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    ed00:	d3e4      	bcc.n	eccc <ceilf+0x38>
    ed02:	ee30 0a00 	vadd.f32	s0, s0, s0
    ed06:	4770      	bx	lr
    ed08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    ed0c:	e7dc      	b.n	ecc8 <ceilf+0x34>
    ed0e:	bf00      	nop
    ed10:	7149f2ca 	.word	0x7149f2ca
    ed14:	007fffff 	.word	0x007fffff

0000ed18 <floorf>:
    ed18:	ee10 3a10 	vmov	r3, s0
    ed1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    ed20:	3a7f      	subs	r2, #127	; 0x7f
    ed22:	2a16      	cmp	r2, #22
    ed24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    ed28:	dc2a      	bgt.n	ed80 <floorf+0x68>
    ed2a:	2a00      	cmp	r2, #0
    ed2c:	da11      	bge.n	ed52 <floorf+0x3a>
    ed2e:	eddf 7a18 	vldr	s15, [pc, #96]	; ed90 <floorf+0x78>
    ed32:	ee30 0a27 	vadd.f32	s0, s0, s15
    ed36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    ed3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed3e:	dd05      	ble.n	ed4c <floorf+0x34>
    ed40:	2b00      	cmp	r3, #0
    ed42:	da23      	bge.n	ed8c <floorf+0x74>
    ed44:	4a13      	ldr	r2, [pc, #76]	; (ed94 <floorf+0x7c>)
    ed46:	2900      	cmp	r1, #0
    ed48:	bf18      	it	ne
    ed4a:	4613      	movne	r3, r2
    ed4c:	ee00 3a10 	vmov	s0, r3
    ed50:	4770      	bx	lr
    ed52:	4911      	ldr	r1, [pc, #68]	; (ed98 <floorf+0x80>)
    ed54:	4111      	asrs	r1, r2
    ed56:	420b      	tst	r3, r1
    ed58:	d0fa      	beq.n	ed50 <floorf+0x38>
    ed5a:	eddf 7a0d 	vldr	s15, [pc, #52]	; ed90 <floorf+0x78>
    ed5e:	ee30 0a27 	vadd.f32	s0, s0, s15
    ed62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    ed66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed6a:	ddef      	ble.n	ed4c <floorf+0x34>
    ed6c:	2b00      	cmp	r3, #0
    ed6e:	bfbe      	ittt	lt
    ed70:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
    ed74:	fa40 f202 	asrlt.w	r2, r0, r2
    ed78:	189b      	addlt	r3, r3, r2
    ed7a:	ea23 0301 	bic.w	r3, r3, r1
    ed7e:	e7e5      	b.n	ed4c <floorf+0x34>
    ed80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    ed84:	d3e4      	bcc.n	ed50 <floorf+0x38>
    ed86:	ee30 0a00 	vadd.f32	s0, s0, s0
    ed8a:	4770      	bx	lr
    ed8c:	2300      	movs	r3, #0
    ed8e:	e7dd      	b.n	ed4c <floorf+0x34>
    ed90:	7149f2ca 	.word	0x7149f2ca
    ed94:	bf800000 	.word	0xbf800000
    ed98:	007fffff 	.word	0x007fffff

0000ed9c <frexpf>:
    ed9c:	ee10 3a10 	vmov	r3, s0
    eda0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    eda4:	2100      	movs	r1, #0
    eda6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    edaa:	6001      	str	r1, [r0, #0]
    edac:	da19      	bge.n	ede2 <frexpf+0x46>
    edae:	b1c2      	cbz	r2, ede2 <frexpf+0x46>
    edb0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
    edb4:	d10a      	bne.n	edcc <frexpf+0x30>
    edb6:	eddf 7a0b 	vldr	s15, [pc, #44]	; ede4 <frexpf+0x48>
    edba:	ee60 7a27 	vmul.f32	s15, s0, s15
    edbe:	f06f 0118 	mvn.w	r1, #24
    edc2:	ee17 3a90 	vmov	r3, s15
    edc6:	6001      	str	r1, [r0, #0]
    edc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    edcc:	6801      	ldr	r1, [r0, #0]
    edce:	15d2      	asrs	r2, r2, #23
    edd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    edd4:	3a7e      	subs	r2, #126	; 0x7e
    edd6:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
    edda:	440a      	add	r2, r1
    eddc:	ee00 3a10 	vmov	s0, r3
    ede0:	6002      	str	r2, [r0, #0]
    ede2:	4770      	bx	lr
    ede4:	4c000000 	.word	0x4c000000

0000ede8 <roundf>:
    ede8:	ee10 0a10 	vmov	r0, s0
    edec:	f3c0 52c7 	ubfx	r2, r0, #23, #8
    edf0:	3a7f      	subs	r2, #127	; 0x7f
    edf2:	2a16      	cmp	r2, #22
    edf4:	dc15      	bgt.n	ee22 <roundf+0x3a>
    edf6:	2a00      	cmp	r2, #0
    edf8:	da08      	bge.n	ee0c <roundf+0x24>
    edfa:	3201      	adds	r2, #1
    edfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    ee00:	d101      	bne.n	ee06 <roundf+0x1e>
    ee02:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
    ee06:	ee00 3a10 	vmov	s0, r3
    ee0a:	4770      	bx	lr
    ee0c:	4907      	ldr	r1, [pc, #28]	; (ee2c <roundf+0x44>)
    ee0e:	4111      	asrs	r1, r2
    ee10:	4208      	tst	r0, r1
    ee12:	d0fa      	beq.n	ee0a <roundf+0x22>
    ee14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ee18:	4113      	asrs	r3, r2
    ee1a:	4403      	add	r3, r0
    ee1c:	ea23 0301 	bic.w	r3, r3, r1
    ee20:	e7f1      	b.n	ee06 <roundf+0x1e>
    ee22:	2a80      	cmp	r2, #128	; 0x80
    ee24:	d1f1      	bne.n	ee0a <roundf+0x22>
    ee26:	ee30 0a00 	vadd.f32	s0, s0, s0
    ee2a:	4770      	bx	lr
    ee2c:	007fffff 	.word	0x007fffff

0000ee30 <pow>:
    ee30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee34:	ec59 8b10 	vmov	r8, r9, d0
    ee38:	ec57 6b11 	vmov	r6, r7, d1
    ee3c:	f7f4 f9cc 	bl	31d8 <__ieee754_pow>
    ee40:	4b4e      	ldr	r3, [pc, #312]	; (ef7c <pow+0x14c>)
    ee42:	f993 3000 	ldrsb.w	r3, [r3]
    ee46:	3301      	adds	r3, #1
    ee48:	ec55 4b10 	vmov	r4, r5, d0
    ee4c:	d015      	beq.n	ee7a <pow+0x4a>
    ee4e:	4632      	mov	r2, r6
    ee50:	463b      	mov	r3, r7
    ee52:	4630      	mov	r0, r6
    ee54:	4639      	mov	r1, r7
    ee56:	f7f1 ff19 	bl	c8c <__aeabi_dcmpun>
    ee5a:	b970      	cbnz	r0, ee7a <pow+0x4a>
    ee5c:	4642      	mov	r2, r8
    ee5e:	464b      	mov	r3, r9
    ee60:	4640      	mov	r0, r8
    ee62:	4649      	mov	r1, r9
    ee64:	f7f1 ff12 	bl	c8c <__aeabi_dcmpun>
    ee68:	2200      	movs	r2, #0
    ee6a:	2300      	movs	r3, #0
    ee6c:	b148      	cbz	r0, ee82 <pow+0x52>
    ee6e:	4630      	mov	r0, r6
    ee70:	4639      	mov	r1, r7
    ee72:	f7f1 fdb9 	bl	9e8 <__aeabi_dcmpeq>
    ee76:	2800      	cmp	r0, #0
    ee78:	d17d      	bne.n	ef76 <pow+0x146>
    ee7a:	ec45 4b10 	vmov	d0, r4, r5
    ee7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ee82:	4640      	mov	r0, r8
    ee84:	4649      	mov	r1, r9
    ee86:	f7f1 fdaf 	bl	9e8 <__aeabi_dcmpeq>
    ee8a:	b1e0      	cbz	r0, eec6 <pow+0x96>
    ee8c:	2200      	movs	r2, #0
    ee8e:	2300      	movs	r3, #0
    ee90:	4630      	mov	r0, r6
    ee92:	4639      	mov	r1, r7
    ee94:	f7f1 fda8 	bl	9e8 <__aeabi_dcmpeq>
    ee98:	2800      	cmp	r0, #0
    ee9a:	d16c      	bne.n	ef76 <pow+0x146>
    ee9c:	ec47 6b10 	vmov	d0, r6, r7
    eea0:	f006 fd44 	bl	1592c <finite>
    eea4:	2800      	cmp	r0, #0
    eea6:	d0e8      	beq.n	ee7a <pow+0x4a>
    eea8:	2200      	movs	r2, #0
    eeaa:	2300      	movs	r3, #0
    eeac:	4630      	mov	r0, r6
    eeae:	4639      	mov	r1, r7
    eeb0:	f7f1 fda4 	bl	9fc <__aeabi_dcmplt>
    eeb4:	2800      	cmp	r0, #0
    eeb6:	d0e0      	beq.n	ee7a <pow+0x4a>
    eeb8:	f005 fef9 	bl	14cae <__errno>
    eebc:	2321      	movs	r3, #33	; 0x21
    eebe:	6003      	str	r3, [r0, #0]
    eec0:	2400      	movs	r4, #0
    eec2:	4d2f      	ldr	r5, [pc, #188]	; (ef80 <pow+0x150>)
    eec4:	e7d9      	b.n	ee7a <pow+0x4a>
    eec6:	ec45 4b10 	vmov	d0, r4, r5
    eeca:	f006 fd2f 	bl	1592c <finite>
    eece:	bbb8      	cbnz	r0, ef40 <pow+0x110>
    eed0:	ec49 8b10 	vmov	d0, r8, r9
    eed4:	f006 fd2a 	bl	1592c <finite>
    eed8:	b390      	cbz	r0, ef40 <pow+0x110>
    eeda:	ec47 6b10 	vmov	d0, r6, r7
    eede:	f006 fd25 	bl	1592c <finite>
    eee2:	b368      	cbz	r0, ef40 <pow+0x110>
    eee4:	4622      	mov	r2, r4
    eee6:	462b      	mov	r3, r5
    eee8:	4620      	mov	r0, r4
    eeea:	4629      	mov	r1, r5
    eeec:	f7f1 fece 	bl	c8c <__aeabi_dcmpun>
    eef0:	b160      	cbz	r0, ef0c <pow+0xdc>
    eef2:	f005 fedc 	bl	14cae <__errno>
    eef6:	2321      	movs	r3, #33	; 0x21
    eef8:	6003      	str	r3, [r0, #0]
    eefa:	2200      	movs	r2, #0
    eefc:	2300      	movs	r3, #0
    eefe:	4610      	mov	r0, r2
    ef00:	4619      	mov	r1, r3
    ef02:	f7f1 fc33 	bl	76c <__aeabi_ddiv>
    ef06:	4604      	mov	r4, r0
    ef08:	460d      	mov	r5, r1
    ef0a:	e7b6      	b.n	ee7a <pow+0x4a>
    ef0c:	f005 fecf 	bl	14cae <__errno>
    ef10:	2322      	movs	r3, #34	; 0x22
    ef12:	6003      	str	r3, [r0, #0]
    ef14:	2200      	movs	r2, #0
    ef16:	2300      	movs	r3, #0
    ef18:	4640      	mov	r0, r8
    ef1a:	4649      	mov	r1, r9
    ef1c:	f7f1 fd6e 	bl	9fc <__aeabi_dcmplt>
    ef20:	2400      	movs	r4, #0
    ef22:	b158      	cbz	r0, ef3c <pow+0x10c>
    ef24:	ec47 6b10 	vmov	d0, r6, r7
    ef28:	f000 fa4c 	bl	f3c4 <rint>
    ef2c:	4632      	mov	r2, r6
    ef2e:	ec51 0b10 	vmov	r0, r1, d0
    ef32:	463b      	mov	r3, r7
    ef34:	f7f1 fd58 	bl	9e8 <__aeabi_dcmpeq>
    ef38:	2800      	cmp	r0, #0
    ef3a:	d0c2      	beq.n	eec2 <pow+0x92>
    ef3c:	4d11      	ldr	r5, [pc, #68]	; (ef84 <pow+0x154>)
    ef3e:	e79c      	b.n	ee7a <pow+0x4a>
    ef40:	2200      	movs	r2, #0
    ef42:	2300      	movs	r3, #0
    ef44:	4620      	mov	r0, r4
    ef46:	4629      	mov	r1, r5
    ef48:	f7f1 fd4e 	bl	9e8 <__aeabi_dcmpeq>
    ef4c:	2800      	cmp	r0, #0
    ef4e:	d094      	beq.n	ee7a <pow+0x4a>
    ef50:	ec49 8b10 	vmov	d0, r8, r9
    ef54:	f006 fcea 	bl	1592c <finite>
    ef58:	2800      	cmp	r0, #0
    ef5a:	d08e      	beq.n	ee7a <pow+0x4a>
    ef5c:	ec47 6b10 	vmov	d0, r6, r7
    ef60:	f006 fce4 	bl	1592c <finite>
    ef64:	2800      	cmp	r0, #0
    ef66:	d088      	beq.n	ee7a <pow+0x4a>
    ef68:	f005 fea1 	bl	14cae <__errno>
    ef6c:	2322      	movs	r3, #34	; 0x22
    ef6e:	6003      	str	r3, [r0, #0]
    ef70:	2400      	movs	r4, #0
    ef72:	2500      	movs	r5, #0
    ef74:	e781      	b.n	ee7a <pow+0x4a>
    ef76:	4d04      	ldr	r5, [pc, #16]	; (ef88 <pow+0x158>)
    ef78:	2400      	movs	r4, #0
    ef7a:	e77e      	b.n	ee7a <pow+0x4a>
    ef7c:	200005b5 	.word	0x200005b5
    ef80:	fff00000 	.word	0xfff00000
    ef84:	7ff00000 	.word	0x7ff00000
    ef88:	3ff00000 	.word	0x3ff00000

0000ef8c <sqrt>:
    ef8c:	b538      	push	{r3, r4, r5, lr}
    ef8e:	ed2d 8b02 	vpush	{d8}
    ef92:	ec55 4b10 	vmov	r4, r5, d0
    ef96:	f000 f891 	bl	f0bc <__ieee754_sqrt>
    ef9a:	4b15      	ldr	r3, [pc, #84]	; (eff0 <sqrt+0x64>)
    ef9c:	eeb0 8a40 	vmov.f32	s16, s0
    efa0:	eef0 8a60 	vmov.f32	s17, s1
    efa4:	f993 3000 	ldrsb.w	r3, [r3]
    efa8:	3301      	adds	r3, #1
    efaa:	d019      	beq.n	efe0 <sqrt+0x54>
    efac:	4622      	mov	r2, r4
    efae:	462b      	mov	r3, r5
    efb0:	4620      	mov	r0, r4
    efb2:	4629      	mov	r1, r5
    efb4:	f7f1 fe6a 	bl	c8c <__aeabi_dcmpun>
    efb8:	b990      	cbnz	r0, efe0 <sqrt+0x54>
    efba:	2200      	movs	r2, #0
    efbc:	2300      	movs	r3, #0
    efbe:	4620      	mov	r0, r4
    efc0:	4629      	mov	r1, r5
    efc2:	f7f1 fd1b 	bl	9fc <__aeabi_dcmplt>
    efc6:	b158      	cbz	r0, efe0 <sqrt+0x54>
    efc8:	f005 fe71 	bl	14cae <__errno>
    efcc:	2321      	movs	r3, #33	; 0x21
    efce:	6003      	str	r3, [r0, #0]
    efd0:	2200      	movs	r2, #0
    efd2:	2300      	movs	r3, #0
    efd4:	4610      	mov	r0, r2
    efd6:	4619      	mov	r1, r3
    efd8:	f7f1 fbc8 	bl	76c <__aeabi_ddiv>
    efdc:	ec41 0b18 	vmov	d8, r0, r1
    efe0:	eeb0 0a48 	vmov.f32	s0, s16
    efe4:	eef0 0a68 	vmov.f32	s1, s17
    efe8:	ecbd 8b02 	vpop	{d8}
    efec:	bd38      	pop	{r3, r4, r5, pc}
    efee:	bf00      	nop
    eff0:	200005b5 	.word	0x200005b5

0000eff4 <expf>:
    eff4:	b508      	push	{r3, lr}
    eff6:	ed2d 8b02 	vpush	{d8}
    effa:	eef0 8a40 	vmov.f32	s17, s0
    effe:	f000 f90f 	bl	f220 <__ieee754_expf>
    f002:	4b16      	ldr	r3, [pc, #88]	; (f05c <expf+0x68>)
    f004:	f993 3000 	ldrsb.w	r3, [r3]
    f008:	3301      	adds	r3, #1
    f00a:	eeb0 8a40 	vmov.f32	s16, s0
    f00e:	d011      	beq.n	f034 <expf+0x40>
    f010:	eeb0 0a68 	vmov.f32	s0, s17
    f014:	f006 fc95 	bl	15942 <finitef>
    f018:	b160      	cbz	r0, f034 <expf+0x40>
    f01a:	eddf 7a11 	vldr	s15, [pc, #68]	; f060 <expf+0x6c>
    f01e:	eef4 8ae7 	vcmpe.f32	s17, s15
    f022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f026:	dd0a      	ble.n	f03e <expf+0x4a>
    f028:	f005 fe41 	bl	14cae <__errno>
    f02c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; f064 <expf+0x70>
    f030:	2322      	movs	r3, #34	; 0x22
    f032:	6003      	str	r3, [r0, #0]
    f034:	eeb0 0a48 	vmov.f32	s0, s16
    f038:	ecbd 8b02 	vpop	{d8}
    f03c:	bd08      	pop	{r3, pc}
    f03e:	eddf 7a0a 	vldr	s15, [pc, #40]	; f068 <expf+0x74>
    f042:	eef4 8ae7 	vcmpe.f32	s17, s15
    f046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f04a:	d5f3      	bpl.n	f034 <expf+0x40>
    f04c:	f005 fe2f 	bl	14cae <__errno>
    f050:	2322      	movs	r3, #34	; 0x22
    f052:	ed9f 8a06 	vldr	s16, [pc, #24]	; f06c <expf+0x78>
    f056:	6003      	str	r3, [r0, #0]
    f058:	e7ec      	b.n	f034 <expf+0x40>
    f05a:	bf00      	nop
    f05c:	200005b5 	.word	0x200005b5
    f060:	42b17180 	.word	0x42b17180
    f064:	7f800000 	.word	0x7f800000
    f068:	c2cff1b5 	.word	0xc2cff1b5
    f06c:	00000000 	.word	0x00000000

0000f070 <sqrtf>:
    f070:	b508      	push	{r3, lr}
    f072:	ed2d 8b02 	vpush	{d8}
    f076:	eeb0 8a40 	vmov.f32	s16, s0
    f07a:	f006 fc54 	bl	15926 <__ieee754_sqrtf>
    f07e:	4b0d      	ldr	r3, [pc, #52]	; (f0b4 <sqrtf+0x44>)
    f080:	f993 3000 	ldrsb.w	r3, [r3]
    f084:	3301      	adds	r3, #1
    f086:	d011      	beq.n	f0ac <sqrtf+0x3c>
    f088:	eeb4 8a48 	vcmp.f32	s16, s16
    f08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f090:	d60c      	bvs.n	f0ac <sqrtf+0x3c>
    f092:	eddf 8a09 	vldr	s17, [pc, #36]	; f0b8 <sqrtf+0x48>
    f096:	eeb4 8ae8 	vcmpe.f32	s16, s17
    f09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f09e:	d505      	bpl.n	f0ac <sqrtf+0x3c>
    f0a0:	f005 fe05 	bl	14cae <__errno>
    f0a4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
    f0a8:	2321      	movs	r3, #33	; 0x21
    f0aa:	6003      	str	r3, [r0, #0]
    f0ac:	ecbd 8b02 	vpop	{d8}
    f0b0:	bd08      	pop	{r3, pc}
    f0b2:	bf00      	nop
    f0b4:	200005b5 	.word	0x200005b5
    f0b8:	00000000 	.word	0x00000000

0000f0bc <__ieee754_sqrt>:
    f0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0c0:	ec55 4b10 	vmov	r4, r5, d0
    f0c4:	4e55      	ldr	r6, [pc, #340]	; (f21c <__ieee754_sqrt+0x160>)
    f0c6:	43ae      	bics	r6, r5
    f0c8:	ee10 0a10 	vmov	r0, s0
    f0cc:	ee10 3a10 	vmov	r3, s0
    f0d0:	462a      	mov	r2, r5
    f0d2:	4629      	mov	r1, r5
    f0d4:	d110      	bne.n	f0f8 <__ieee754_sqrt+0x3c>
    f0d6:	ee10 2a10 	vmov	r2, s0
    f0da:	462b      	mov	r3, r5
    f0dc:	f7f1 fa1c 	bl	518 <__aeabi_dmul>
    f0e0:	4602      	mov	r2, r0
    f0e2:	460b      	mov	r3, r1
    f0e4:	4620      	mov	r0, r4
    f0e6:	4629      	mov	r1, r5
    f0e8:	f7f1 f860 	bl	1ac <__adddf3>
    f0ec:	4604      	mov	r4, r0
    f0ee:	460d      	mov	r5, r1
    f0f0:	ec45 4b10 	vmov	d0, r4, r5
    f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f0f8:	2d00      	cmp	r5, #0
    f0fa:	dc10      	bgt.n	f11e <__ieee754_sqrt+0x62>
    f0fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
    f100:	4330      	orrs	r0, r6
    f102:	d0f5      	beq.n	f0f0 <__ieee754_sqrt+0x34>
    f104:	b15d      	cbz	r5, f11e <__ieee754_sqrt+0x62>
    f106:	ee10 2a10 	vmov	r2, s0
    f10a:	462b      	mov	r3, r5
    f10c:	ee10 0a10 	vmov	r0, s0
    f110:	f7f1 f84a 	bl	1a8 <__aeabi_dsub>
    f114:	4602      	mov	r2, r0
    f116:	460b      	mov	r3, r1
    f118:	f7f1 fb28 	bl	76c <__aeabi_ddiv>
    f11c:	e7e6      	b.n	f0ec <__ieee754_sqrt+0x30>
    f11e:	1512      	asrs	r2, r2, #20
    f120:	d074      	beq.n	f20c <__ieee754_sqrt+0x150>
    f122:	07d4      	lsls	r4, r2, #31
    f124:	f3c1 0113 	ubfx	r1, r1, #0, #20
    f128:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
    f12c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    f130:	bf5e      	ittt	pl
    f132:	0fda      	lsrpl	r2, r3, #31
    f134:	005b      	lslpl	r3, r3, #1
    f136:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
    f13a:	2400      	movs	r4, #0
    f13c:	0fda      	lsrs	r2, r3, #31
    f13e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f142:	107f      	asrs	r7, r7, #1
    f144:	005b      	lsls	r3, r3, #1
    f146:	2516      	movs	r5, #22
    f148:	4620      	mov	r0, r4
    f14a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f14e:	1886      	adds	r6, r0, r2
    f150:	428e      	cmp	r6, r1
    f152:	bfde      	ittt	le
    f154:	1b89      	suble	r1, r1, r6
    f156:	18b0      	addle	r0, r6, r2
    f158:	18a4      	addle	r4, r4, r2
    f15a:	0049      	lsls	r1, r1, #1
    f15c:	3d01      	subs	r5, #1
    f15e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
    f162:	ea4f 0252 	mov.w	r2, r2, lsr #1
    f166:	ea4f 0343 	mov.w	r3, r3, lsl #1
    f16a:	d1f0      	bne.n	f14e <__ieee754_sqrt+0x92>
    f16c:	462a      	mov	r2, r5
    f16e:	f04f 0e20 	mov.w	lr, #32
    f172:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    f176:	4281      	cmp	r1, r0
    f178:	eb06 0c05 	add.w	ip, r6, r5
    f17c:	dc02      	bgt.n	f184 <__ieee754_sqrt+0xc8>
    f17e:	d113      	bne.n	f1a8 <__ieee754_sqrt+0xec>
    f180:	459c      	cmp	ip, r3
    f182:	d811      	bhi.n	f1a8 <__ieee754_sqrt+0xec>
    f184:	f1bc 0f00 	cmp.w	ip, #0
    f188:	eb0c 0506 	add.w	r5, ip, r6
    f18c:	da43      	bge.n	f216 <__ieee754_sqrt+0x15a>
    f18e:	2d00      	cmp	r5, #0
    f190:	db41      	blt.n	f216 <__ieee754_sqrt+0x15a>
    f192:	f100 0801 	add.w	r8, r0, #1
    f196:	1a09      	subs	r1, r1, r0
    f198:	459c      	cmp	ip, r3
    f19a:	bf88      	it	hi
    f19c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
    f1a0:	eba3 030c 	sub.w	r3, r3, ip
    f1a4:	4432      	add	r2, r6
    f1a6:	4640      	mov	r0, r8
    f1a8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
    f1ac:	f1be 0e01 	subs.w	lr, lr, #1
    f1b0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    f1b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    f1b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
    f1bc:	d1db      	bne.n	f176 <__ieee754_sqrt+0xba>
    f1be:	430b      	orrs	r3, r1
    f1c0:	d006      	beq.n	f1d0 <__ieee754_sqrt+0x114>
    f1c2:	1c50      	adds	r0, r2, #1
    f1c4:	bf13      	iteet	ne
    f1c6:	3201      	addne	r2, #1
    f1c8:	3401      	addeq	r4, #1
    f1ca:	4672      	moveq	r2, lr
    f1cc:	f022 0201 	bicne.w	r2, r2, #1
    f1d0:	1063      	asrs	r3, r4, #1
    f1d2:	0852      	lsrs	r2, r2, #1
    f1d4:	07e1      	lsls	r1, r4, #31
    f1d6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    f1da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    f1de:	bf48      	it	mi
    f1e0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
    f1e4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
    f1e8:	4614      	mov	r4, r2
    f1ea:	e781      	b.n	f0f0 <__ieee754_sqrt+0x34>
    f1ec:	0ad9      	lsrs	r1, r3, #11
    f1ee:	3815      	subs	r0, #21
    f1f0:	055b      	lsls	r3, r3, #21
    f1f2:	2900      	cmp	r1, #0
    f1f4:	d0fa      	beq.n	f1ec <__ieee754_sqrt+0x130>
    f1f6:	02cd      	lsls	r5, r1, #11
    f1f8:	d50a      	bpl.n	f210 <__ieee754_sqrt+0x154>
    f1fa:	f1c2 0420 	rsb	r4, r2, #32
    f1fe:	fa23 f404 	lsr.w	r4, r3, r4
    f202:	1e55      	subs	r5, r2, #1
    f204:	4093      	lsls	r3, r2
    f206:	4321      	orrs	r1, r4
    f208:	1b42      	subs	r2, r0, r5
    f20a:	e78a      	b.n	f122 <__ieee754_sqrt+0x66>
    f20c:	4610      	mov	r0, r2
    f20e:	e7f0      	b.n	f1f2 <__ieee754_sqrt+0x136>
    f210:	0049      	lsls	r1, r1, #1
    f212:	3201      	adds	r2, #1
    f214:	e7ef      	b.n	f1f6 <__ieee754_sqrt+0x13a>
    f216:	4680      	mov	r8, r0
    f218:	e7bd      	b.n	f196 <__ieee754_sqrt+0xda>
    f21a:	bf00      	nop
    f21c:	7ff00000 	.word	0x7ff00000

0000f220 <__ieee754_expf>:
    f220:	ee10 2a10 	vmov	r2, s0
    f224:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
    f228:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    f22c:	d902      	bls.n	f234 <__ieee754_expf+0x14>
    f22e:	ee30 0a00 	vadd.f32	s0, s0, s0
    f232:	4770      	bx	lr
    f234:	ea4f 73d2 	mov.w	r3, r2, lsr #31
    f238:	d106      	bne.n	f248 <__ieee754_expf+0x28>
    f23a:	eddf 7a50 	vldr	s15, [pc, #320]	; f37c <__ieee754_expf+0x15c>
    f23e:	2b00      	cmp	r3, #0
    f240:	bf18      	it	ne
    f242:	eeb0 0a67 	vmovne.f32	s0, s15
    f246:	4770      	bx	lr
    f248:	484d      	ldr	r0, [pc, #308]	; (f380 <__ieee754_expf+0x160>)
    f24a:	4282      	cmp	r2, r0
    f24c:	dd04      	ble.n	f258 <__ieee754_expf+0x38>
    f24e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; f384 <__ieee754_expf+0x164>
    f252:	ee20 0a00 	vmul.f32	s0, s0, s0
    f256:	4770      	bx	lr
    f258:	2a00      	cmp	r2, #0
    f25a:	da03      	bge.n	f264 <__ieee754_expf+0x44>
    f25c:	4a4a      	ldr	r2, [pc, #296]	; (f388 <__ieee754_expf+0x168>)
    f25e:	4291      	cmp	r1, r2
    f260:	f200 8088 	bhi.w	f374 <__ieee754_expf+0x154>
    f264:	4a49      	ldr	r2, [pc, #292]	; (f38c <__ieee754_expf+0x16c>)
    f266:	4291      	cmp	r1, r2
    f268:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    f26c:	d952      	bls.n	f314 <__ieee754_expf+0xf4>
    f26e:	4a48      	ldr	r2, [pc, #288]	; (f390 <__ieee754_expf+0x170>)
    f270:	4291      	cmp	r1, r2
    f272:	ea4f 0283 	mov.w	r2, r3, lsl #2
    f276:	d834      	bhi.n	f2e2 <__ieee754_expf+0xc2>
    f278:	4946      	ldr	r1, [pc, #280]	; (f394 <__ieee754_expf+0x174>)
    f27a:	4411      	add	r1, r2
    f27c:	ed91 7a00 	vldr	s14, [r1]
    f280:	4945      	ldr	r1, [pc, #276]	; (f398 <__ieee754_expf+0x178>)
    f282:	440a      	add	r2, r1
    f284:	edd2 7a00 	vldr	s15, [r2]
    f288:	ee30 7a47 	vsub.f32	s14, s0, s14
    f28c:	f1c3 0201 	rsb	r2, r3, #1
    f290:	1ad2      	subs	r2, r2, r3
    f292:	ee37 0a67 	vsub.f32	s0, s14, s15
    f296:	ee20 6a00 	vmul.f32	s12, s0, s0
    f29a:	ed9f 5a40 	vldr	s10, [pc, #256]	; f39c <__ieee754_expf+0x17c>
    f29e:	eddf 6a40 	vldr	s13, [pc, #256]	; f3a0 <__ieee754_expf+0x180>
    f2a2:	eee6 6a05 	vfma.f32	s13, s12, s10
    f2a6:	ed9f 5a3f 	vldr	s10, [pc, #252]	; f3a4 <__ieee754_expf+0x184>
    f2aa:	eea6 5a86 	vfma.f32	s10, s13, s12
    f2ae:	eddf 6a3e 	vldr	s13, [pc, #248]	; f3a8 <__ieee754_expf+0x188>
    f2b2:	eee5 6a06 	vfma.f32	s13, s10, s12
    f2b6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; f3ac <__ieee754_expf+0x18c>
    f2ba:	eea6 5a86 	vfma.f32	s10, s13, s12
    f2be:	eef0 6a40 	vmov.f32	s13, s0
    f2c2:	eee5 6a46 	vfms.f32	s13, s10, s12
    f2c6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    f2ca:	ee20 5a26 	vmul.f32	s10, s0, s13
    f2ce:	bb92      	cbnz	r2, f336 <__ieee754_expf+0x116>
    f2d0:	ee76 6ac6 	vsub.f32	s13, s13, s12
    f2d4:	eec5 7a26 	vdiv.f32	s15, s10, s13
    f2d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
    f2dc:	ee35 0ac0 	vsub.f32	s0, s11, s0
    f2e0:	4770      	bx	lr
    f2e2:	4b33      	ldr	r3, [pc, #204]	; (f3b0 <__ieee754_expf+0x190>)
    f2e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; f3b4 <__ieee754_expf+0x194>
    f2e8:	eddf 6a33 	vldr	s13, [pc, #204]	; f3b8 <__ieee754_expf+0x198>
    f2ec:	4413      	add	r3, r2
    f2ee:	edd3 7a00 	vldr	s15, [r3]
    f2f2:	eee0 7a07 	vfma.f32	s15, s0, s14
    f2f6:	eeb0 7a40 	vmov.f32	s14, s0
    f2fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    f2fe:	ee17 2a90 	vmov	r2, s15
    f302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    f306:	eea7 7ae6 	vfms.f32	s14, s15, s13
    f30a:	eddf 6a2c 	vldr	s13, [pc, #176]	; f3bc <__ieee754_expf+0x19c>
    f30e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    f312:	e7be      	b.n	f292 <__ieee754_expf+0x72>
    f314:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
    f318:	d20b      	bcs.n	f332 <__ieee754_expf+0x112>
    f31a:	eddf 6a1a 	vldr	s13, [pc, #104]	; f384 <__ieee754_expf+0x164>
    f31e:	ee70 6a26 	vadd.f32	s13, s0, s13
    f322:	eef4 6ae5 	vcmpe.f32	s13, s11
    f326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f32a:	dd02      	ble.n	f332 <__ieee754_expf+0x112>
    f32c:	ee30 0a25 	vadd.f32	s0, s0, s11
    f330:	4770      	bx	lr
    f332:	2200      	movs	r2, #0
    f334:	e7af      	b.n	f296 <__ieee754_expf+0x76>
    f336:	ee76 6a66 	vsub.f32	s13, s12, s13
    f33a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
    f33e:	ee85 0a26 	vdiv.f32	s0, s10, s13
    f342:	bfb8      	it	lt
    f344:	3264      	addlt	r2, #100	; 0x64
    f346:	ee77 7ac0 	vsub.f32	s15, s15, s0
    f34a:	ee37 0ac7 	vsub.f32	s0, s15, s14
    f34e:	ee75 7ac0 	vsub.f32	s15, s11, s0
    f352:	ee17 3a90 	vmov	r3, s15
    f356:	bfab      	itete	ge
    f358:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
    f35c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
    f360:	ee00 3a10 	vmovge	s0, r3
    f364:	eddf 7a16 	vldrlt	s15, [pc, #88]	; f3c0 <__ieee754_expf+0x1a0>
    f368:	bfbc      	itt	lt
    f36a:	ee00 3a10 	vmovlt	s0, r3
    f36e:	ee20 0a27 	vmullt.f32	s0, s0, s15
    f372:	4770      	bx	lr
    f374:	ed9f 0a01 	vldr	s0, [pc, #4]	; f37c <__ieee754_expf+0x15c>
    f378:	4770      	bx	lr
    f37a:	bf00      	nop
    f37c:	00000000 	.word	0x00000000
    f380:	42b17217 	.word	0x42b17217
    f384:	7149f2ca 	.word	0x7149f2ca
    f388:	42cff1b5 	.word	0x42cff1b5
    f38c:	3eb17218 	.word	0x3eb17218
    f390:	3f851591 	.word	0x3f851591
    f394:	0003f838 	.word	0x0003f838
    f398:	0003f840 	.word	0x0003f840
    f39c:	3331bb4c 	.word	0x3331bb4c
    f3a0:	b5ddea0e 	.word	0xb5ddea0e
    f3a4:	388ab355 	.word	0x388ab355
    f3a8:	bb360b61 	.word	0xbb360b61
    f3ac:	3e2aaaab 	.word	0x3e2aaaab
    f3b0:	0003f830 	.word	0x0003f830
    f3b4:	3fb8aa3b 	.word	0x3fb8aa3b
    f3b8:	3f317180 	.word	0x3f317180
    f3bc:	3717f7d1 	.word	0x3717f7d1
    f3c0:	0d800000 	.word	0x0d800000

0000f3c4 <rint>:
    f3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f3c6:	ec51 0b10 	vmov	r0, r1, d0
    f3ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
    f3ce:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
    f3d2:	2d13      	cmp	r5, #19
    f3d4:	ee10 3a10 	vmov	r3, s0
    f3d8:	460c      	mov	r4, r1
    f3da:	ea4f 76d1 	mov.w	r6, r1, lsr #31
    f3de:	dc5b      	bgt.n	f498 <rint+0xd4>
    f3e0:	2d00      	cmp	r5, #0
    f3e2:	da2d      	bge.n	f440 <rint+0x7c>
    f3e4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    f3e8:	4302      	orrs	r2, r0
    f3ea:	d025      	beq.n	f438 <rint+0x74>
    f3ec:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f3f0:	4302      	orrs	r2, r0
    f3f2:	4253      	negs	r3, r2
    f3f4:	4313      	orrs	r3, r2
    f3f6:	0b1b      	lsrs	r3, r3, #12
    f3f8:	0c4a      	lsrs	r2, r1, #17
    f3fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    f3fe:	0452      	lsls	r2, r2, #17
    f400:	ea43 0102 	orr.w	r1, r3, r2
    f404:	460b      	mov	r3, r1
    f406:	4934      	ldr	r1, [pc, #208]	; (f4d8 <rint+0x114>)
    f408:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
    f40c:	e9d6 6700 	ldrd	r6, r7, [r6]
    f410:	4602      	mov	r2, r0
    f412:	4639      	mov	r1, r7
    f414:	4630      	mov	r0, r6
    f416:	f7f0 fec9 	bl	1ac <__adddf3>
    f41a:	e9cd 0100 	strd	r0, r1, [sp]
    f41e:	463b      	mov	r3, r7
    f420:	e9dd 0100 	ldrd	r0, r1, [sp]
    f424:	4632      	mov	r2, r6
    f426:	f7f0 febf 	bl	1a8 <__aeabi_dsub>
    f42a:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
    f42e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    f432:	ea43 0704 	orr.w	r7, r3, r4
    f436:	4639      	mov	r1, r7
    f438:	ec41 0b10 	vmov	d0, r0, r1
    f43c:	b003      	add	sp, #12
    f43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f440:	4a26      	ldr	r2, [pc, #152]	; (f4dc <rint+0x118>)
    f442:	412a      	asrs	r2, r5
    f444:	ea01 0702 	and.w	r7, r1, r2
    f448:	4307      	orrs	r7, r0
    f44a:	d0f5      	beq.n	f438 <rint+0x74>
    f44c:	0851      	lsrs	r1, r2, #1
    f44e:	ea04 0252 	and.w	r2, r4, r2, lsr #1
    f452:	4313      	orrs	r3, r2
    f454:	d00c      	beq.n	f470 <rint+0xac>
    f456:	ea24 0201 	bic.w	r2, r4, r1
    f45a:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    f45e:	2d13      	cmp	r5, #19
    f460:	fa44 f505 	asr.w	r5, r4, r5
    f464:	bf0c      	ite	eq
    f466:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    f46a:	2300      	movne	r3, #0
    f46c:	ea42 0405 	orr.w	r4, r2, r5
    f470:	4919      	ldr	r1, [pc, #100]	; (f4d8 <rint+0x114>)
    f472:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
    f476:	461a      	mov	r2, r3
    f478:	4623      	mov	r3, r4
    f47a:	e9d6 4500 	ldrd	r4, r5, [r6]
    f47e:	4620      	mov	r0, r4
    f480:	4629      	mov	r1, r5
    f482:	f7f0 fe93 	bl	1ac <__adddf3>
    f486:	e9cd 0100 	strd	r0, r1, [sp]
    f48a:	e9dd 0100 	ldrd	r0, r1, [sp]
    f48e:	4622      	mov	r2, r4
    f490:	462b      	mov	r3, r5
    f492:	f7f0 fe89 	bl	1a8 <__aeabi_dsub>
    f496:	e7cf      	b.n	f438 <rint+0x74>
    f498:	2d33      	cmp	r5, #51	; 0x33
    f49a:	dd08      	ble.n	f4ae <rint+0xea>
    f49c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    f4a0:	d1ca      	bne.n	f438 <rint+0x74>
    f4a2:	ee10 2a10 	vmov	r2, s0
    f4a6:	460b      	mov	r3, r1
    f4a8:	f7f0 fe80 	bl	1ac <__adddf3>
    f4ac:	e7c4      	b.n	f438 <rint+0x74>
    f4ae:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
    f4b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    f4b6:	40d5      	lsrs	r5, r2
    f4b8:	4228      	tst	r0, r5
    f4ba:	d0bd      	beq.n	f438 <rint+0x74>
    f4bc:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
    f4c0:	ea4f 0155 	mov.w	r1, r5, lsr #1
    f4c4:	bf1f      	itttt	ne
    f4c6:	ea23 0101 	bicne.w	r1, r3, r1
    f4ca:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
    f4ce:	fa43 f202 	asrne.w	r2, r3, r2
    f4d2:	ea41 0302 	orrne.w	r3, r1, r2
    f4d6:	e7cb      	b.n	f470 <rint+0xac>
    f4d8:	00016f40 	.word	0x00016f40
    f4dc:	000fffff 	.word	0x000fffff

0000f4e0 <__assert_func>:
    f4e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f4e2:	4614      	mov	r4, r2
    f4e4:	461a      	mov	r2, r3
    f4e6:	4b09      	ldr	r3, [pc, #36]	; (f50c <__assert_func+0x2c>)
    f4e8:	681b      	ldr	r3, [r3, #0]
    f4ea:	4605      	mov	r5, r0
    f4ec:	68d8      	ldr	r0, [r3, #12]
    f4ee:	b14c      	cbz	r4, f504 <__assert_func+0x24>
    f4f0:	4b07      	ldr	r3, [pc, #28]	; (f510 <__assert_func+0x30>)
    f4f2:	9100      	str	r1, [sp, #0]
    f4f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
    f4f8:	4906      	ldr	r1, [pc, #24]	; (f514 <__assert_func+0x34>)
    f4fa:	462b      	mov	r3, r5
    f4fc:	f000 f816 	bl	f52c <fiprintf>
    f500:	f006 fa2c 	bl	1595c <abort>
    f504:	4b04      	ldr	r3, [pc, #16]	; (f518 <__assert_func+0x38>)
    f506:	461c      	mov	r4, r3
    f508:	e7f3      	b.n	f4f2 <__assert_func+0x12>
    f50a:	bf00      	nop
    f50c:	20000384 	.word	0x20000384
    f510:	00045fd4 	.word	0x00045fd4
    f514:	00045fe1 	.word	0x00045fe1
    f518:	0004597a 	.word	0x0004597a

0000f51c <calloc>:
    f51c:	4b02      	ldr	r3, [pc, #8]	; (f528 <calloc+0xc>)
    f51e:	460a      	mov	r2, r1
    f520:	4601      	mov	r1, r0
    f522:	6818      	ldr	r0, [r3, #0]
    f524:	f006 ba51 	b.w	159ca <_calloc_r>
    f528:	20000384 	.word	0x20000384

0000f52c <fiprintf>:
    f52c:	b40e      	push	{r1, r2, r3}
    f52e:	b503      	push	{r0, r1, lr}
    f530:	4601      	mov	r1, r0
    f532:	ab03      	add	r3, sp, #12
    f534:	4805      	ldr	r0, [pc, #20]	; (f54c <fiprintf+0x20>)
    f536:	f853 2b04 	ldr.w	r2, [r3], #4
    f53a:	6800      	ldr	r0, [r0, #0]
    f53c:	9301      	str	r3, [sp, #4]
    f53e:	f000 f8bd 	bl	f6bc <_vfiprintf_r>
    f542:	b002      	add	sp, #8
    f544:	f85d eb04 	ldr.w	lr, [sp], #4
    f548:	b003      	add	sp, #12
    f54a:	4770      	bx	lr
    f54c:	20000384 	.word	0x20000384

0000f550 <malloc>:
    f550:	4b02      	ldr	r3, [pc, #8]	; (f55c <malloc+0xc>)
    f552:	4601      	mov	r1, r0
    f554:	6818      	ldr	r0, [r3, #0]
    f556:	f000 b857 	b.w	f608 <_malloc_r>
    f55a:	bf00      	nop
    f55c:	20000384 	.word	0x20000384

0000f560 <free>:
    f560:	4b02      	ldr	r3, [pc, #8]	; (f56c <free+0xc>)
    f562:	4601      	mov	r1, r0
    f564:	6818      	ldr	r0, [r3, #0]
    f566:	f000 b803 	b.w	f570 <_free_r>
    f56a:	bf00      	nop
    f56c:	20000384 	.word	0x20000384

0000f570 <_free_r>:
    f570:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f572:	2900      	cmp	r1, #0
    f574:	d044      	beq.n	f600 <_free_r+0x90>
    f576:	f851 3c04 	ldr.w	r3, [r1, #-4]
    f57a:	9001      	str	r0, [sp, #4]
    f57c:	2b00      	cmp	r3, #0
    f57e:	f1a1 0404 	sub.w	r4, r1, #4
    f582:	bfb8      	it	lt
    f584:	18e4      	addlt	r4, r4, r3
    f586:	f001 f8c1 	bl	1070c <__malloc_lock>
    f58a:	4a1e      	ldr	r2, [pc, #120]	; (f604 <_free_r+0x94>)
    f58c:	9801      	ldr	r0, [sp, #4]
    f58e:	6813      	ldr	r3, [r2, #0]
    f590:	b933      	cbnz	r3, f5a0 <_free_r+0x30>
    f592:	6063      	str	r3, [r4, #4]
    f594:	6014      	str	r4, [r2, #0]
    f596:	b003      	add	sp, #12
    f598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f59c:	f001 b8bc 	b.w	10718 <__malloc_unlock>
    f5a0:	42a3      	cmp	r3, r4
    f5a2:	d908      	bls.n	f5b6 <_free_r+0x46>
    f5a4:	6825      	ldr	r5, [r4, #0]
    f5a6:	1961      	adds	r1, r4, r5
    f5a8:	428b      	cmp	r3, r1
    f5aa:	bf01      	itttt	eq
    f5ac:	6819      	ldreq	r1, [r3, #0]
    f5ae:	685b      	ldreq	r3, [r3, #4]
    f5b0:	1949      	addeq	r1, r1, r5
    f5b2:	6021      	streq	r1, [r4, #0]
    f5b4:	e7ed      	b.n	f592 <_free_r+0x22>
    f5b6:	461a      	mov	r2, r3
    f5b8:	685b      	ldr	r3, [r3, #4]
    f5ba:	b10b      	cbz	r3, f5c0 <_free_r+0x50>
    f5bc:	42a3      	cmp	r3, r4
    f5be:	d9fa      	bls.n	f5b6 <_free_r+0x46>
    f5c0:	6811      	ldr	r1, [r2, #0]
    f5c2:	1855      	adds	r5, r2, r1
    f5c4:	42a5      	cmp	r5, r4
    f5c6:	d10b      	bne.n	f5e0 <_free_r+0x70>
    f5c8:	6824      	ldr	r4, [r4, #0]
    f5ca:	4421      	add	r1, r4
    f5cc:	1854      	adds	r4, r2, r1
    f5ce:	42a3      	cmp	r3, r4
    f5d0:	6011      	str	r1, [r2, #0]
    f5d2:	d1e0      	bne.n	f596 <_free_r+0x26>
    f5d4:	681c      	ldr	r4, [r3, #0]
    f5d6:	685b      	ldr	r3, [r3, #4]
    f5d8:	6053      	str	r3, [r2, #4]
    f5da:	4421      	add	r1, r4
    f5dc:	6011      	str	r1, [r2, #0]
    f5de:	e7da      	b.n	f596 <_free_r+0x26>
    f5e0:	d902      	bls.n	f5e8 <_free_r+0x78>
    f5e2:	230c      	movs	r3, #12
    f5e4:	6003      	str	r3, [r0, #0]
    f5e6:	e7d6      	b.n	f596 <_free_r+0x26>
    f5e8:	6825      	ldr	r5, [r4, #0]
    f5ea:	1961      	adds	r1, r4, r5
    f5ec:	428b      	cmp	r3, r1
    f5ee:	bf04      	itt	eq
    f5f0:	6819      	ldreq	r1, [r3, #0]
    f5f2:	685b      	ldreq	r3, [r3, #4]
    f5f4:	6063      	str	r3, [r4, #4]
    f5f6:	bf04      	itt	eq
    f5f8:	1949      	addeq	r1, r1, r5
    f5fa:	6021      	streq	r1, [r4, #0]
    f5fc:	6054      	str	r4, [r2, #4]
    f5fe:	e7ca      	b.n	f596 <_free_r+0x26>
    f600:	b003      	add	sp, #12
    f602:	bd30      	pop	{r4, r5, pc}
    f604:	20001894 	.word	0x20001894

0000f608 <_malloc_r>:
    f608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f60a:	1ccd      	adds	r5, r1, #3
    f60c:	f025 0503 	bic.w	r5, r5, #3
    f610:	3508      	adds	r5, #8
    f612:	2d0c      	cmp	r5, #12
    f614:	bf38      	it	cc
    f616:	250c      	movcc	r5, #12
    f618:	2d00      	cmp	r5, #0
    f61a:	4606      	mov	r6, r0
    f61c:	db01      	blt.n	f622 <_malloc_r+0x1a>
    f61e:	42a9      	cmp	r1, r5
    f620:	d903      	bls.n	f62a <_malloc_r+0x22>
    f622:	230c      	movs	r3, #12
    f624:	6033      	str	r3, [r6, #0]
    f626:	2000      	movs	r0, #0
    f628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f62a:	f001 f86f 	bl	1070c <__malloc_lock>
    f62e:	4921      	ldr	r1, [pc, #132]	; (f6b4 <_malloc_r+0xac>)
    f630:	680a      	ldr	r2, [r1, #0]
    f632:	4614      	mov	r4, r2
    f634:	b99c      	cbnz	r4, f65e <_malloc_r+0x56>
    f636:	4f20      	ldr	r7, [pc, #128]	; (f6b8 <_malloc_r+0xb0>)
    f638:	683b      	ldr	r3, [r7, #0]
    f63a:	b923      	cbnz	r3, f646 <_malloc_r+0x3e>
    f63c:	4621      	mov	r1, r4
    f63e:	4630      	mov	r0, r6
    f640:	f000 fce0 	bl	10004 <_sbrk_r>
    f644:	6038      	str	r0, [r7, #0]
    f646:	4629      	mov	r1, r5
    f648:	4630      	mov	r0, r6
    f64a:	f000 fcdb 	bl	10004 <_sbrk_r>
    f64e:	1c43      	adds	r3, r0, #1
    f650:	d123      	bne.n	f69a <_malloc_r+0x92>
    f652:	230c      	movs	r3, #12
    f654:	6033      	str	r3, [r6, #0]
    f656:	4630      	mov	r0, r6
    f658:	f001 f85e 	bl	10718 <__malloc_unlock>
    f65c:	e7e3      	b.n	f626 <_malloc_r+0x1e>
    f65e:	6823      	ldr	r3, [r4, #0]
    f660:	1b5b      	subs	r3, r3, r5
    f662:	d417      	bmi.n	f694 <_malloc_r+0x8c>
    f664:	2b0b      	cmp	r3, #11
    f666:	d903      	bls.n	f670 <_malloc_r+0x68>
    f668:	6023      	str	r3, [r4, #0]
    f66a:	441c      	add	r4, r3
    f66c:	6025      	str	r5, [r4, #0]
    f66e:	e004      	b.n	f67a <_malloc_r+0x72>
    f670:	6863      	ldr	r3, [r4, #4]
    f672:	42a2      	cmp	r2, r4
    f674:	bf0c      	ite	eq
    f676:	600b      	streq	r3, [r1, #0]
    f678:	6053      	strne	r3, [r2, #4]
    f67a:	4630      	mov	r0, r6
    f67c:	f001 f84c 	bl	10718 <__malloc_unlock>
    f680:	f104 000b 	add.w	r0, r4, #11
    f684:	1d23      	adds	r3, r4, #4
    f686:	f020 0007 	bic.w	r0, r0, #7
    f68a:	1ac2      	subs	r2, r0, r3
    f68c:	d0cc      	beq.n	f628 <_malloc_r+0x20>
    f68e:	1a1b      	subs	r3, r3, r0
    f690:	50a3      	str	r3, [r4, r2]
    f692:	e7c9      	b.n	f628 <_malloc_r+0x20>
    f694:	4622      	mov	r2, r4
    f696:	6864      	ldr	r4, [r4, #4]
    f698:	e7cc      	b.n	f634 <_malloc_r+0x2c>
    f69a:	1cc4      	adds	r4, r0, #3
    f69c:	f024 0403 	bic.w	r4, r4, #3
    f6a0:	42a0      	cmp	r0, r4
    f6a2:	d0e3      	beq.n	f66c <_malloc_r+0x64>
    f6a4:	1a21      	subs	r1, r4, r0
    f6a6:	4630      	mov	r0, r6
    f6a8:	f000 fcac 	bl	10004 <_sbrk_r>
    f6ac:	3001      	adds	r0, #1
    f6ae:	d1dd      	bne.n	f66c <_malloc_r+0x64>
    f6b0:	e7cf      	b.n	f652 <_malloc_r+0x4a>
    f6b2:	bf00      	nop
    f6b4:	20001894 	.word	0x20001894
    f6b8:	20001898 	.word	0x20001898

0000f6bc <_vfiprintf_r>:
    f6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6c0:	460d      	mov	r5, r1
    f6c2:	b09d      	sub	sp, #116	; 0x74
    f6c4:	4614      	mov	r4, r2
    f6c6:	4698      	mov	r8, r3
    f6c8:	4606      	mov	r6, r0
    f6ca:	b118      	cbz	r0, f6d4 <_vfiprintf_r+0x18>
    f6cc:	6983      	ldr	r3, [r0, #24]
    f6ce:	b90b      	cbnz	r3, f6d4 <_vfiprintf_r+0x18>
    f6d0:	f000 ff5a 	bl	10588 <__sinit>
    f6d4:	4b89      	ldr	r3, [pc, #548]	; (f8fc <_vfiprintf_r+0x240>)
    f6d6:	429d      	cmp	r5, r3
    f6d8:	d11b      	bne.n	f712 <_vfiprintf_r+0x56>
    f6da:	6875      	ldr	r5, [r6, #4]
    f6dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    f6de:	07d9      	lsls	r1, r3, #31
    f6e0:	d405      	bmi.n	f6ee <_vfiprintf_r+0x32>
    f6e2:	89ab      	ldrh	r3, [r5, #12]
    f6e4:	059a      	lsls	r2, r3, #22
    f6e6:	d402      	bmi.n	f6ee <_vfiprintf_r+0x32>
    f6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    f6ea:	f005 fad8 	bl	14c9e <__retarget_lock_acquire_recursive>
    f6ee:	89ab      	ldrh	r3, [r5, #12]
    f6f0:	071b      	lsls	r3, r3, #28
    f6f2:	d501      	bpl.n	f6f8 <_vfiprintf_r+0x3c>
    f6f4:	692b      	ldr	r3, [r5, #16]
    f6f6:	b9eb      	cbnz	r3, f734 <_vfiprintf_r+0x78>
    f6f8:	4629      	mov	r1, r5
    f6fa:	4630      	mov	r0, r6
    f6fc:	f000 fdd2 	bl	102a4 <__swsetup_r>
    f700:	b1c0      	cbz	r0, f734 <_vfiprintf_r+0x78>
    f702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    f704:	07dc      	lsls	r4, r3, #31
    f706:	d50e      	bpl.n	f726 <_vfiprintf_r+0x6a>
    f708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f70c:	b01d      	add	sp, #116	; 0x74
    f70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f712:	4b7b      	ldr	r3, [pc, #492]	; (f900 <_vfiprintf_r+0x244>)
    f714:	429d      	cmp	r5, r3
    f716:	d101      	bne.n	f71c <_vfiprintf_r+0x60>
    f718:	68b5      	ldr	r5, [r6, #8]
    f71a:	e7df      	b.n	f6dc <_vfiprintf_r+0x20>
    f71c:	4b79      	ldr	r3, [pc, #484]	; (f904 <_vfiprintf_r+0x248>)
    f71e:	429d      	cmp	r5, r3
    f720:	bf08      	it	eq
    f722:	68f5      	ldreq	r5, [r6, #12]
    f724:	e7da      	b.n	f6dc <_vfiprintf_r+0x20>
    f726:	89ab      	ldrh	r3, [r5, #12]
    f728:	0598      	lsls	r0, r3, #22
    f72a:	d4ed      	bmi.n	f708 <_vfiprintf_r+0x4c>
    f72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    f72e:	f005 fabc 	bl	14caa <__retarget_lock_release_recursive>
    f732:	e7e9      	b.n	f708 <_vfiprintf_r+0x4c>
    f734:	2300      	movs	r3, #0
    f736:	9309      	str	r3, [sp, #36]	; 0x24
    f738:	2320      	movs	r3, #32
    f73a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    f73e:	f8cd 800c 	str.w	r8, [sp, #12]
    f742:	2330      	movs	r3, #48	; 0x30
    f744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; f908 <_vfiprintf_r+0x24c>
    f748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    f74c:	f04f 0901 	mov.w	r9, #1
    f750:	4623      	mov	r3, r4
    f752:	469a      	mov	sl, r3
    f754:	f813 2b01 	ldrb.w	r2, [r3], #1
    f758:	b10a      	cbz	r2, f75e <_vfiprintf_r+0xa2>
    f75a:	2a25      	cmp	r2, #37	; 0x25
    f75c:	d1f9      	bne.n	f752 <_vfiprintf_r+0x96>
    f75e:	ebba 0b04 	subs.w	fp, sl, r4
    f762:	d00b      	beq.n	f77c <_vfiprintf_r+0xc0>
    f764:	465b      	mov	r3, fp
    f766:	4622      	mov	r2, r4
    f768:	4629      	mov	r1, r5
    f76a:	4630      	mov	r0, r6
    f76c:	f006 f953 	bl	15a16 <__sfputs_r>
    f770:	3001      	adds	r0, #1
    f772:	f000 80aa 	beq.w	f8ca <_vfiprintf_r+0x20e>
    f776:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f778:	445a      	add	r2, fp
    f77a:	9209      	str	r2, [sp, #36]	; 0x24
    f77c:	f89a 3000 	ldrb.w	r3, [sl]
    f780:	2b00      	cmp	r3, #0
    f782:	f000 80a2 	beq.w	f8ca <_vfiprintf_r+0x20e>
    f786:	2300      	movs	r3, #0
    f788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f78c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    f790:	f10a 0a01 	add.w	sl, sl, #1
    f794:	9304      	str	r3, [sp, #16]
    f796:	9307      	str	r3, [sp, #28]
    f798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    f79c:	931a      	str	r3, [sp, #104]	; 0x68
    f79e:	4654      	mov	r4, sl
    f7a0:	2205      	movs	r2, #5
    f7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
    f7a6:	4858      	ldr	r0, [pc, #352]	; (f908 <_vfiprintf_r+0x24c>)
    f7a8:	f7f0 fcaa 	bl	100 <memchr>
    f7ac:	9a04      	ldr	r2, [sp, #16]
    f7ae:	b9d8      	cbnz	r0, f7e8 <_vfiprintf_r+0x12c>
    f7b0:	06d1      	lsls	r1, r2, #27
    f7b2:	bf44      	itt	mi
    f7b4:	2320      	movmi	r3, #32
    f7b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    f7ba:	0713      	lsls	r3, r2, #28
    f7bc:	bf44      	itt	mi
    f7be:	232b      	movmi	r3, #43	; 0x2b
    f7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    f7c4:	f89a 3000 	ldrb.w	r3, [sl]
    f7c8:	2b2a      	cmp	r3, #42	; 0x2a
    f7ca:	d015      	beq.n	f7f8 <_vfiprintf_r+0x13c>
    f7cc:	9a07      	ldr	r2, [sp, #28]
    f7ce:	4654      	mov	r4, sl
    f7d0:	2000      	movs	r0, #0
    f7d2:	f04f 0c0a 	mov.w	ip, #10
    f7d6:	4621      	mov	r1, r4
    f7d8:	f811 3b01 	ldrb.w	r3, [r1], #1
    f7dc:	3b30      	subs	r3, #48	; 0x30
    f7de:	2b09      	cmp	r3, #9
    f7e0:	d94e      	bls.n	f880 <_vfiprintf_r+0x1c4>
    f7e2:	b1b0      	cbz	r0, f812 <_vfiprintf_r+0x156>
    f7e4:	9207      	str	r2, [sp, #28]
    f7e6:	e014      	b.n	f812 <_vfiprintf_r+0x156>
    f7e8:	eba0 0308 	sub.w	r3, r0, r8
    f7ec:	fa09 f303 	lsl.w	r3, r9, r3
    f7f0:	4313      	orrs	r3, r2
    f7f2:	9304      	str	r3, [sp, #16]
    f7f4:	46a2      	mov	sl, r4
    f7f6:	e7d2      	b.n	f79e <_vfiprintf_r+0xe2>
    f7f8:	9b03      	ldr	r3, [sp, #12]
    f7fa:	1d19      	adds	r1, r3, #4
    f7fc:	681b      	ldr	r3, [r3, #0]
    f7fe:	9103      	str	r1, [sp, #12]
    f800:	2b00      	cmp	r3, #0
    f802:	bfbb      	ittet	lt
    f804:	425b      	neglt	r3, r3
    f806:	f042 0202 	orrlt.w	r2, r2, #2
    f80a:	9307      	strge	r3, [sp, #28]
    f80c:	9307      	strlt	r3, [sp, #28]
    f80e:	bfb8      	it	lt
    f810:	9204      	strlt	r2, [sp, #16]
    f812:	7823      	ldrb	r3, [r4, #0]
    f814:	2b2e      	cmp	r3, #46	; 0x2e
    f816:	d10c      	bne.n	f832 <_vfiprintf_r+0x176>
    f818:	7863      	ldrb	r3, [r4, #1]
    f81a:	2b2a      	cmp	r3, #42	; 0x2a
    f81c:	d135      	bne.n	f88a <_vfiprintf_r+0x1ce>
    f81e:	9b03      	ldr	r3, [sp, #12]
    f820:	1d1a      	adds	r2, r3, #4
    f822:	681b      	ldr	r3, [r3, #0]
    f824:	9203      	str	r2, [sp, #12]
    f826:	2b00      	cmp	r3, #0
    f828:	bfb8      	it	lt
    f82a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    f82e:	3402      	adds	r4, #2
    f830:	9305      	str	r3, [sp, #20]
    f832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; f918 <_vfiprintf_r+0x25c>
    f836:	7821      	ldrb	r1, [r4, #0]
    f838:	2203      	movs	r2, #3
    f83a:	4650      	mov	r0, sl
    f83c:	f7f0 fc60 	bl	100 <memchr>
    f840:	b140      	cbz	r0, f854 <_vfiprintf_r+0x198>
    f842:	2340      	movs	r3, #64	; 0x40
    f844:	eba0 000a 	sub.w	r0, r0, sl
    f848:	fa03 f000 	lsl.w	r0, r3, r0
    f84c:	9b04      	ldr	r3, [sp, #16]
    f84e:	4303      	orrs	r3, r0
    f850:	3401      	adds	r4, #1
    f852:	9304      	str	r3, [sp, #16]
    f854:	f814 1b01 	ldrb.w	r1, [r4], #1
    f858:	482c      	ldr	r0, [pc, #176]	; (f90c <_vfiprintf_r+0x250>)
    f85a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    f85e:	2206      	movs	r2, #6
    f860:	f7f0 fc4e 	bl	100 <memchr>
    f864:	2800      	cmp	r0, #0
    f866:	d03f      	beq.n	f8e8 <_vfiprintf_r+0x22c>
    f868:	4b29      	ldr	r3, [pc, #164]	; (f910 <_vfiprintf_r+0x254>)
    f86a:	bb1b      	cbnz	r3, f8b4 <_vfiprintf_r+0x1f8>
    f86c:	9b03      	ldr	r3, [sp, #12]
    f86e:	3307      	adds	r3, #7
    f870:	f023 0307 	bic.w	r3, r3, #7
    f874:	3308      	adds	r3, #8
    f876:	9303      	str	r3, [sp, #12]
    f878:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f87a:	443b      	add	r3, r7
    f87c:	9309      	str	r3, [sp, #36]	; 0x24
    f87e:	e767      	b.n	f750 <_vfiprintf_r+0x94>
    f880:	fb0c 3202 	mla	r2, ip, r2, r3
    f884:	460c      	mov	r4, r1
    f886:	2001      	movs	r0, #1
    f888:	e7a5      	b.n	f7d6 <_vfiprintf_r+0x11a>
    f88a:	2300      	movs	r3, #0
    f88c:	3401      	adds	r4, #1
    f88e:	9305      	str	r3, [sp, #20]
    f890:	4619      	mov	r1, r3
    f892:	f04f 0c0a 	mov.w	ip, #10
    f896:	4620      	mov	r0, r4
    f898:	f810 2b01 	ldrb.w	r2, [r0], #1
    f89c:	3a30      	subs	r2, #48	; 0x30
    f89e:	2a09      	cmp	r2, #9
    f8a0:	d903      	bls.n	f8aa <_vfiprintf_r+0x1ee>
    f8a2:	2b00      	cmp	r3, #0
    f8a4:	d0c5      	beq.n	f832 <_vfiprintf_r+0x176>
    f8a6:	9105      	str	r1, [sp, #20]
    f8a8:	e7c3      	b.n	f832 <_vfiprintf_r+0x176>
    f8aa:	fb0c 2101 	mla	r1, ip, r1, r2
    f8ae:	4604      	mov	r4, r0
    f8b0:	2301      	movs	r3, #1
    f8b2:	e7f0      	b.n	f896 <_vfiprintf_r+0x1da>
    f8b4:	ab03      	add	r3, sp, #12
    f8b6:	9300      	str	r3, [sp, #0]
    f8b8:	462a      	mov	r2, r5
    f8ba:	4b16      	ldr	r3, [pc, #88]	; (f914 <_vfiprintf_r+0x258>)
    f8bc:	a904      	add	r1, sp, #16
    f8be:	4630      	mov	r0, r6
    f8c0:	f000 f82c 	bl	f91c <_printf_float>
    f8c4:	4607      	mov	r7, r0
    f8c6:	1c78      	adds	r0, r7, #1
    f8c8:	d1d6      	bne.n	f878 <_vfiprintf_r+0x1bc>
    f8ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    f8cc:	07d9      	lsls	r1, r3, #31
    f8ce:	d405      	bmi.n	f8dc <_vfiprintf_r+0x220>
    f8d0:	89ab      	ldrh	r3, [r5, #12]
    f8d2:	059a      	lsls	r2, r3, #22
    f8d4:	d402      	bmi.n	f8dc <_vfiprintf_r+0x220>
    f8d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    f8d8:	f005 f9e7 	bl	14caa <__retarget_lock_release_recursive>
    f8dc:	89ab      	ldrh	r3, [r5, #12]
    f8de:	065b      	lsls	r3, r3, #25
    f8e0:	f53f af12 	bmi.w	f708 <_vfiprintf_r+0x4c>
    f8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
    f8e6:	e711      	b.n	f70c <_vfiprintf_r+0x50>
    f8e8:	ab03      	add	r3, sp, #12
    f8ea:	9300      	str	r3, [sp, #0]
    f8ec:	462a      	mov	r2, r5
    f8ee:	4b09      	ldr	r3, [pc, #36]	; (f914 <_vfiprintf_r+0x258>)
    f8f0:	a904      	add	r1, sp, #16
    f8f2:	4630      	mov	r0, r6
    f8f4:	f000 fa48 	bl	fd88 <_printf_i>
    f8f8:	e7e4      	b.n	f8c4 <_vfiprintf_r+0x208>
    f8fa:	bf00      	nop
    f8fc:	0003f87c 	.word	0x0003f87c
    f900:	0003f89c 	.word	0x0003f89c
    f904:	0003f85c 	.word	0x0003f85c
    f908:	00046111 	.word	0x00046111
    f90c:	0004611b 	.word	0x0004611b
    f910:	0000f91d 	.word	0x0000f91d
    f914:	00015a17 	.word	0x00015a17
    f918:	00046117 	.word	0x00046117

0000f91c <_printf_float>:
    f91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f920:	ed2d 8b02 	vpush	{d8}
    f924:	b08d      	sub	sp, #52	; 0x34
    f926:	460c      	mov	r4, r1
    f928:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    f92c:	4616      	mov	r6, r2
    f92e:	461f      	mov	r7, r3
    f930:	4605      	mov	r5, r0
    f932:	f000 fea7 	bl	10684 <_localeconv_r>
    f936:	f8d0 a000 	ldr.w	sl, [r0]
    f93a:	4650      	mov	r0, sl
    f93c:	f7f1 fb32 	bl	fa4 <strlen>
    f940:	2300      	movs	r3, #0
    f942:	930a      	str	r3, [sp, #40]	; 0x28
    f944:	6823      	ldr	r3, [r4, #0]
    f946:	9305      	str	r3, [sp, #20]
    f948:	f8d8 3000 	ldr.w	r3, [r8]
    f94c:	f894 b018 	ldrb.w	fp, [r4, #24]
    f950:	3307      	adds	r3, #7
    f952:	f023 0307 	bic.w	r3, r3, #7
    f956:	f103 0208 	add.w	r2, r3, #8
    f95a:	f8c8 2000 	str.w	r2, [r8]
    f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f962:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    f966:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
    f96a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    f96e:	9307      	str	r3, [sp, #28]
    f970:	f8cd 8018 	str.w	r8, [sp, #24]
    f974:	ee08 0a10 	vmov	s16, r0
    f978:	4b9f      	ldr	r3, [pc, #636]	; (fbf8 <_printf_float+0x2dc>)
    f97a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f97e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f982:	f7f1 f983 	bl	c8c <__aeabi_dcmpun>
    f986:	bb88      	cbnz	r0, f9ec <_printf_float+0xd0>
    f988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f98c:	4b9a      	ldr	r3, [pc, #616]	; (fbf8 <_printf_float+0x2dc>)
    f98e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f992:	f7f1 f83d 	bl	a10 <__aeabi_dcmple>
    f996:	bb48      	cbnz	r0, f9ec <_printf_float+0xd0>
    f998:	2200      	movs	r2, #0
    f99a:	2300      	movs	r3, #0
    f99c:	4640      	mov	r0, r8
    f99e:	4649      	mov	r1, r9
    f9a0:	f7f1 f82c 	bl	9fc <__aeabi_dcmplt>
    f9a4:	b110      	cbz	r0, f9ac <_printf_float+0x90>
    f9a6:	232d      	movs	r3, #45	; 0x2d
    f9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    f9ac:	4b93      	ldr	r3, [pc, #588]	; (fbfc <_printf_float+0x2e0>)
    f9ae:	4894      	ldr	r0, [pc, #592]	; (fc00 <_printf_float+0x2e4>)
    f9b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
    f9b4:	bf94      	ite	ls
    f9b6:	4698      	movls	r8, r3
    f9b8:	4680      	movhi	r8, r0
    f9ba:	2303      	movs	r3, #3
    f9bc:	6123      	str	r3, [r4, #16]
    f9be:	9b05      	ldr	r3, [sp, #20]
    f9c0:	f023 0204 	bic.w	r2, r3, #4
    f9c4:	6022      	str	r2, [r4, #0]
    f9c6:	f04f 0900 	mov.w	r9, #0
    f9ca:	9700      	str	r7, [sp, #0]
    f9cc:	4633      	mov	r3, r6
    f9ce:	aa0b      	add	r2, sp, #44	; 0x2c
    f9d0:	4621      	mov	r1, r4
    f9d2:	4628      	mov	r0, r5
    f9d4:	f006 f8d1 	bl	15b7a <_printf_common>
    f9d8:	3001      	adds	r0, #1
    f9da:	f040 8090 	bne.w	fafe <_printf_float+0x1e2>
    f9de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f9e2:	b00d      	add	sp, #52	; 0x34
    f9e4:	ecbd 8b02 	vpop	{d8}
    f9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9ec:	4642      	mov	r2, r8
    f9ee:	464b      	mov	r3, r9
    f9f0:	4640      	mov	r0, r8
    f9f2:	4649      	mov	r1, r9
    f9f4:	f7f1 f94a 	bl	c8c <__aeabi_dcmpun>
    f9f8:	b140      	cbz	r0, fa0c <_printf_float+0xf0>
    f9fa:	464b      	mov	r3, r9
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	bfbc      	itt	lt
    fa00:	232d      	movlt	r3, #45	; 0x2d
    fa02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
    fa06:	487f      	ldr	r0, [pc, #508]	; (fc04 <_printf_float+0x2e8>)
    fa08:	4b7f      	ldr	r3, [pc, #508]	; (fc08 <_printf_float+0x2ec>)
    fa0a:	e7d1      	b.n	f9b0 <_printf_float+0x94>
    fa0c:	6863      	ldr	r3, [r4, #4]
    fa0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    fa12:	9206      	str	r2, [sp, #24]
    fa14:	1c5a      	adds	r2, r3, #1
    fa16:	d13f      	bne.n	fa98 <_printf_float+0x17c>
    fa18:	2306      	movs	r3, #6
    fa1a:	6063      	str	r3, [r4, #4]
    fa1c:	9b05      	ldr	r3, [sp, #20]
    fa1e:	6861      	ldr	r1, [r4, #4]
    fa20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    fa24:	2300      	movs	r3, #0
    fa26:	9303      	str	r3, [sp, #12]
    fa28:	ab0a      	add	r3, sp, #40	; 0x28
    fa2a:	e9cd b301 	strd	fp, r3, [sp, #4]
    fa2e:	ab09      	add	r3, sp, #36	; 0x24
    fa30:	ec49 8b10 	vmov	d0, r8, r9
    fa34:	9300      	str	r3, [sp, #0]
    fa36:	6022      	str	r2, [r4, #0]
    fa38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    fa3c:	4628      	mov	r0, r5
    fa3e:	f005 fffc 	bl	15a3a <__cvt>
    fa42:	9b06      	ldr	r3, [sp, #24]
    fa44:	9909      	ldr	r1, [sp, #36]	; 0x24
    fa46:	2b47      	cmp	r3, #71	; 0x47
    fa48:	4680      	mov	r8, r0
    fa4a:	d108      	bne.n	fa5e <_printf_float+0x142>
    fa4c:	1cc8      	adds	r0, r1, #3
    fa4e:	db02      	blt.n	fa56 <_printf_float+0x13a>
    fa50:	6863      	ldr	r3, [r4, #4]
    fa52:	4299      	cmp	r1, r3
    fa54:	dd41      	ble.n	fada <_printf_float+0x1be>
    fa56:	f1ab 0b02 	sub.w	fp, fp, #2
    fa5a:	fa5f fb8b 	uxtb.w	fp, fp
    fa5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
    fa62:	d820      	bhi.n	faa6 <_printf_float+0x18a>
    fa64:	3901      	subs	r1, #1
    fa66:	465a      	mov	r2, fp
    fa68:	f104 0050 	add.w	r0, r4, #80	; 0x50
    fa6c:	9109      	str	r1, [sp, #36]	; 0x24
    fa6e:	f006 f846 	bl	15afe <__exponent>
    fa72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa74:	1813      	adds	r3, r2, r0
    fa76:	2a01      	cmp	r2, #1
    fa78:	4681      	mov	r9, r0
    fa7a:	6123      	str	r3, [r4, #16]
    fa7c:	dc02      	bgt.n	fa84 <_printf_float+0x168>
    fa7e:	6822      	ldr	r2, [r4, #0]
    fa80:	07d2      	lsls	r2, r2, #31
    fa82:	d501      	bpl.n	fa88 <_printf_float+0x16c>
    fa84:	3301      	adds	r3, #1
    fa86:	6123      	str	r3, [r4, #16]
    fa88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fa8c:	2b00      	cmp	r3, #0
    fa8e:	d09c      	beq.n	f9ca <_printf_float+0xae>
    fa90:	232d      	movs	r3, #45	; 0x2d
    fa92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    fa96:	e798      	b.n	f9ca <_printf_float+0xae>
    fa98:	9a06      	ldr	r2, [sp, #24]
    fa9a:	2a47      	cmp	r2, #71	; 0x47
    fa9c:	d1be      	bne.n	fa1c <_printf_float+0x100>
    fa9e:	2b00      	cmp	r3, #0
    faa0:	d1bc      	bne.n	fa1c <_printf_float+0x100>
    faa2:	2301      	movs	r3, #1
    faa4:	e7b9      	b.n	fa1a <_printf_float+0xfe>
    faa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
    faaa:	d118      	bne.n	fade <_printf_float+0x1c2>
    faac:	2900      	cmp	r1, #0
    faae:	6863      	ldr	r3, [r4, #4]
    fab0:	dd0b      	ble.n	faca <_printf_float+0x1ae>
    fab2:	6121      	str	r1, [r4, #16]
    fab4:	b913      	cbnz	r3, fabc <_printf_float+0x1a0>
    fab6:	6822      	ldr	r2, [r4, #0]
    fab8:	07d0      	lsls	r0, r2, #31
    faba:	d502      	bpl.n	fac2 <_printf_float+0x1a6>
    fabc:	3301      	adds	r3, #1
    fabe:	440b      	add	r3, r1
    fac0:	6123      	str	r3, [r4, #16]
    fac2:	65a1      	str	r1, [r4, #88]	; 0x58
    fac4:	f04f 0900 	mov.w	r9, #0
    fac8:	e7de      	b.n	fa88 <_printf_float+0x16c>
    faca:	b913      	cbnz	r3, fad2 <_printf_float+0x1b6>
    facc:	6822      	ldr	r2, [r4, #0]
    face:	07d2      	lsls	r2, r2, #31
    fad0:	d501      	bpl.n	fad6 <_printf_float+0x1ba>
    fad2:	3302      	adds	r3, #2
    fad4:	e7f4      	b.n	fac0 <_printf_float+0x1a4>
    fad6:	2301      	movs	r3, #1
    fad8:	e7f2      	b.n	fac0 <_printf_float+0x1a4>
    fada:	f04f 0b67 	mov.w	fp, #103	; 0x67
    fade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fae0:	4299      	cmp	r1, r3
    fae2:	db05      	blt.n	faf0 <_printf_float+0x1d4>
    fae4:	6823      	ldr	r3, [r4, #0]
    fae6:	6121      	str	r1, [r4, #16]
    fae8:	07d8      	lsls	r0, r3, #31
    faea:	d5ea      	bpl.n	fac2 <_printf_float+0x1a6>
    faec:	1c4b      	adds	r3, r1, #1
    faee:	e7e7      	b.n	fac0 <_printf_float+0x1a4>
    faf0:	2900      	cmp	r1, #0
    faf2:	bfd4      	ite	le
    faf4:	f1c1 0202 	rsble	r2, r1, #2
    faf8:	2201      	movgt	r2, #1
    fafa:	4413      	add	r3, r2
    fafc:	e7e0      	b.n	fac0 <_printf_float+0x1a4>
    fafe:	6823      	ldr	r3, [r4, #0]
    fb00:	055a      	lsls	r2, r3, #21
    fb02:	d407      	bmi.n	fb14 <_printf_float+0x1f8>
    fb04:	6923      	ldr	r3, [r4, #16]
    fb06:	4642      	mov	r2, r8
    fb08:	4631      	mov	r1, r6
    fb0a:	4628      	mov	r0, r5
    fb0c:	47b8      	blx	r7
    fb0e:	3001      	adds	r0, #1
    fb10:	d12c      	bne.n	fb6c <_printf_float+0x250>
    fb12:	e764      	b.n	f9de <_printf_float+0xc2>
    fb14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
    fb18:	f240 80e0 	bls.w	fcdc <_printf_float+0x3c0>
    fb1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    fb20:	2200      	movs	r2, #0
    fb22:	2300      	movs	r3, #0
    fb24:	f7f0 ff60 	bl	9e8 <__aeabi_dcmpeq>
    fb28:	2800      	cmp	r0, #0
    fb2a:	d034      	beq.n	fb96 <_printf_float+0x27a>
    fb2c:	4a37      	ldr	r2, [pc, #220]	; (fc0c <_printf_float+0x2f0>)
    fb2e:	2301      	movs	r3, #1
    fb30:	4631      	mov	r1, r6
    fb32:	4628      	mov	r0, r5
    fb34:	47b8      	blx	r7
    fb36:	3001      	adds	r0, #1
    fb38:	f43f af51 	beq.w	f9de <_printf_float+0xc2>
    fb3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    fb40:	429a      	cmp	r2, r3
    fb42:	db02      	blt.n	fb4a <_printf_float+0x22e>
    fb44:	6823      	ldr	r3, [r4, #0]
    fb46:	07d8      	lsls	r0, r3, #31
    fb48:	d510      	bpl.n	fb6c <_printf_float+0x250>
    fb4a:	ee18 3a10 	vmov	r3, s16
    fb4e:	4652      	mov	r2, sl
    fb50:	4631      	mov	r1, r6
    fb52:	4628      	mov	r0, r5
    fb54:	47b8      	blx	r7
    fb56:	3001      	adds	r0, #1
    fb58:	f43f af41 	beq.w	f9de <_printf_float+0xc2>
    fb5c:	f04f 0800 	mov.w	r8, #0
    fb60:	f104 091a 	add.w	r9, r4, #26
    fb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fb66:	3b01      	subs	r3, #1
    fb68:	4543      	cmp	r3, r8
    fb6a:	dc09      	bgt.n	fb80 <_printf_float+0x264>
    fb6c:	6823      	ldr	r3, [r4, #0]
    fb6e:	079b      	lsls	r3, r3, #30
    fb70:	f100 8105 	bmi.w	fd7e <_printf_float+0x462>
    fb74:	68e0      	ldr	r0, [r4, #12]
    fb76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fb78:	4298      	cmp	r0, r3
    fb7a:	bfb8      	it	lt
    fb7c:	4618      	movlt	r0, r3
    fb7e:	e730      	b.n	f9e2 <_printf_float+0xc6>
    fb80:	2301      	movs	r3, #1
    fb82:	464a      	mov	r2, r9
    fb84:	4631      	mov	r1, r6
    fb86:	4628      	mov	r0, r5
    fb88:	47b8      	blx	r7
    fb8a:	3001      	adds	r0, #1
    fb8c:	f43f af27 	beq.w	f9de <_printf_float+0xc2>
    fb90:	f108 0801 	add.w	r8, r8, #1
    fb94:	e7e6      	b.n	fb64 <_printf_float+0x248>
    fb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb98:	2b00      	cmp	r3, #0
    fb9a:	dc39      	bgt.n	fc10 <_printf_float+0x2f4>
    fb9c:	4a1b      	ldr	r2, [pc, #108]	; (fc0c <_printf_float+0x2f0>)
    fb9e:	2301      	movs	r3, #1
    fba0:	4631      	mov	r1, r6
    fba2:	4628      	mov	r0, r5
    fba4:	47b8      	blx	r7
    fba6:	3001      	adds	r0, #1
    fba8:	f43f af19 	beq.w	f9de <_printf_float+0xc2>
    fbac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    fbb0:	4313      	orrs	r3, r2
    fbb2:	d102      	bne.n	fbba <_printf_float+0x29e>
    fbb4:	6823      	ldr	r3, [r4, #0]
    fbb6:	07d9      	lsls	r1, r3, #31
    fbb8:	d5d8      	bpl.n	fb6c <_printf_float+0x250>
    fbba:	ee18 3a10 	vmov	r3, s16
    fbbe:	4652      	mov	r2, sl
    fbc0:	4631      	mov	r1, r6
    fbc2:	4628      	mov	r0, r5
    fbc4:	47b8      	blx	r7
    fbc6:	3001      	adds	r0, #1
    fbc8:	f43f af09 	beq.w	f9de <_printf_float+0xc2>
    fbcc:	f04f 0900 	mov.w	r9, #0
    fbd0:	f104 0a1a 	add.w	sl, r4, #26
    fbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbd6:	425b      	negs	r3, r3
    fbd8:	454b      	cmp	r3, r9
    fbda:	dc01      	bgt.n	fbe0 <_printf_float+0x2c4>
    fbdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fbde:	e792      	b.n	fb06 <_printf_float+0x1ea>
    fbe0:	2301      	movs	r3, #1
    fbe2:	4652      	mov	r2, sl
    fbe4:	4631      	mov	r1, r6
    fbe6:	4628      	mov	r0, r5
    fbe8:	47b8      	blx	r7
    fbea:	3001      	adds	r0, #1
    fbec:	f43f aef7 	beq.w	f9de <_printf_float+0xc2>
    fbf0:	f109 0901 	add.w	r9, r9, #1
    fbf4:	e7ee      	b.n	fbd4 <_printf_float+0x2b8>
    fbf6:	bf00      	nop
    fbf8:	7fefffff 	.word	0x7fefffff
    fbfc:	00046122 	.word	0x00046122
    fc00:	00046126 	.word	0x00046126
    fc04:	0004612e 	.word	0x0004612e
    fc08:	0004612a 	.word	0x0004612a
    fc0c:	00045922 	.word	0x00045922
    fc10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fc12:	6da3      	ldr	r3, [r4, #88]	; 0x58
    fc14:	429a      	cmp	r2, r3
    fc16:	bfa8      	it	ge
    fc18:	461a      	movge	r2, r3
    fc1a:	2a00      	cmp	r2, #0
    fc1c:	4691      	mov	r9, r2
    fc1e:	dc37      	bgt.n	fc90 <_printf_float+0x374>
    fc20:	f04f 0b00 	mov.w	fp, #0
    fc24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    fc28:	f104 021a 	add.w	r2, r4, #26
    fc2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    fc2e:	9305      	str	r3, [sp, #20]
    fc30:	eba3 0309 	sub.w	r3, r3, r9
    fc34:	455b      	cmp	r3, fp
    fc36:	dc33      	bgt.n	fca0 <_printf_float+0x384>
    fc38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    fc3c:	429a      	cmp	r2, r3
    fc3e:	db3b      	blt.n	fcb8 <_printf_float+0x39c>
    fc40:	6823      	ldr	r3, [r4, #0]
    fc42:	07da      	lsls	r2, r3, #31
    fc44:	d438      	bmi.n	fcb8 <_printf_float+0x39c>
    fc46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc48:	9a05      	ldr	r2, [sp, #20]
    fc4a:	9909      	ldr	r1, [sp, #36]	; 0x24
    fc4c:	1a9a      	subs	r2, r3, r2
    fc4e:	eba3 0901 	sub.w	r9, r3, r1
    fc52:	4591      	cmp	r9, r2
    fc54:	bfa8      	it	ge
    fc56:	4691      	movge	r9, r2
    fc58:	f1b9 0f00 	cmp.w	r9, #0
    fc5c:	dc35      	bgt.n	fcca <_printf_float+0x3ae>
    fc5e:	f04f 0800 	mov.w	r8, #0
    fc62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    fc66:	f104 0a1a 	add.w	sl, r4, #26
    fc6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    fc6e:	1a9b      	subs	r3, r3, r2
    fc70:	eba3 0309 	sub.w	r3, r3, r9
    fc74:	4543      	cmp	r3, r8
    fc76:	f77f af79 	ble.w	fb6c <_printf_float+0x250>
    fc7a:	2301      	movs	r3, #1
    fc7c:	4652      	mov	r2, sl
    fc7e:	4631      	mov	r1, r6
    fc80:	4628      	mov	r0, r5
    fc82:	47b8      	blx	r7
    fc84:	3001      	adds	r0, #1
    fc86:	f43f aeaa 	beq.w	f9de <_printf_float+0xc2>
    fc8a:	f108 0801 	add.w	r8, r8, #1
    fc8e:	e7ec      	b.n	fc6a <_printf_float+0x34e>
    fc90:	4613      	mov	r3, r2
    fc92:	4631      	mov	r1, r6
    fc94:	4642      	mov	r2, r8
    fc96:	4628      	mov	r0, r5
    fc98:	47b8      	blx	r7
    fc9a:	3001      	adds	r0, #1
    fc9c:	d1c0      	bne.n	fc20 <_printf_float+0x304>
    fc9e:	e69e      	b.n	f9de <_printf_float+0xc2>
    fca0:	2301      	movs	r3, #1
    fca2:	4631      	mov	r1, r6
    fca4:	4628      	mov	r0, r5
    fca6:	9205      	str	r2, [sp, #20]
    fca8:	47b8      	blx	r7
    fcaa:	3001      	adds	r0, #1
    fcac:	f43f ae97 	beq.w	f9de <_printf_float+0xc2>
    fcb0:	9a05      	ldr	r2, [sp, #20]
    fcb2:	f10b 0b01 	add.w	fp, fp, #1
    fcb6:	e7b9      	b.n	fc2c <_printf_float+0x310>
    fcb8:	ee18 3a10 	vmov	r3, s16
    fcbc:	4652      	mov	r2, sl
    fcbe:	4631      	mov	r1, r6
    fcc0:	4628      	mov	r0, r5
    fcc2:	47b8      	blx	r7
    fcc4:	3001      	adds	r0, #1
    fcc6:	d1be      	bne.n	fc46 <_printf_float+0x32a>
    fcc8:	e689      	b.n	f9de <_printf_float+0xc2>
    fcca:	9a05      	ldr	r2, [sp, #20]
    fccc:	464b      	mov	r3, r9
    fcce:	4442      	add	r2, r8
    fcd0:	4631      	mov	r1, r6
    fcd2:	4628      	mov	r0, r5
    fcd4:	47b8      	blx	r7
    fcd6:	3001      	adds	r0, #1
    fcd8:	d1c1      	bne.n	fc5e <_printf_float+0x342>
    fcda:	e680      	b.n	f9de <_printf_float+0xc2>
    fcdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fcde:	2a01      	cmp	r2, #1
    fce0:	dc01      	bgt.n	fce6 <_printf_float+0x3ca>
    fce2:	07db      	lsls	r3, r3, #31
    fce4:	d538      	bpl.n	fd58 <_printf_float+0x43c>
    fce6:	2301      	movs	r3, #1
    fce8:	4642      	mov	r2, r8
    fcea:	4631      	mov	r1, r6
    fcec:	4628      	mov	r0, r5
    fcee:	47b8      	blx	r7
    fcf0:	3001      	adds	r0, #1
    fcf2:	f43f ae74 	beq.w	f9de <_printf_float+0xc2>
    fcf6:	ee18 3a10 	vmov	r3, s16
    fcfa:	4652      	mov	r2, sl
    fcfc:	4631      	mov	r1, r6
    fcfe:	4628      	mov	r0, r5
    fd00:	47b8      	blx	r7
    fd02:	3001      	adds	r0, #1
    fd04:	f43f ae6b 	beq.w	f9de <_printf_float+0xc2>
    fd08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    fd0c:	2200      	movs	r2, #0
    fd0e:	2300      	movs	r3, #0
    fd10:	f7f0 fe6a 	bl	9e8 <__aeabi_dcmpeq>
    fd14:	b9d8      	cbnz	r0, fd4e <_printf_float+0x432>
    fd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd18:	f108 0201 	add.w	r2, r8, #1
    fd1c:	3b01      	subs	r3, #1
    fd1e:	4631      	mov	r1, r6
    fd20:	4628      	mov	r0, r5
    fd22:	47b8      	blx	r7
    fd24:	3001      	adds	r0, #1
    fd26:	d10e      	bne.n	fd46 <_printf_float+0x42a>
    fd28:	e659      	b.n	f9de <_printf_float+0xc2>
    fd2a:	2301      	movs	r3, #1
    fd2c:	4652      	mov	r2, sl
    fd2e:	4631      	mov	r1, r6
    fd30:	4628      	mov	r0, r5
    fd32:	47b8      	blx	r7
    fd34:	3001      	adds	r0, #1
    fd36:	f43f ae52 	beq.w	f9de <_printf_float+0xc2>
    fd3a:	f108 0801 	add.w	r8, r8, #1
    fd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd40:	3b01      	subs	r3, #1
    fd42:	4543      	cmp	r3, r8
    fd44:	dcf1      	bgt.n	fd2a <_printf_float+0x40e>
    fd46:	464b      	mov	r3, r9
    fd48:	f104 0250 	add.w	r2, r4, #80	; 0x50
    fd4c:	e6dc      	b.n	fb08 <_printf_float+0x1ec>
    fd4e:	f04f 0800 	mov.w	r8, #0
    fd52:	f104 0a1a 	add.w	sl, r4, #26
    fd56:	e7f2      	b.n	fd3e <_printf_float+0x422>
    fd58:	2301      	movs	r3, #1
    fd5a:	4642      	mov	r2, r8
    fd5c:	e7df      	b.n	fd1e <_printf_float+0x402>
    fd5e:	2301      	movs	r3, #1
    fd60:	464a      	mov	r2, r9
    fd62:	4631      	mov	r1, r6
    fd64:	4628      	mov	r0, r5
    fd66:	47b8      	blx	r7
    fd68:	3001      	adds	r0, #1
    fd6a:	f43f ae38 	beq.w	f9de <_printf_float+0xc2>
    fd6e:	f108 0801 	add.w	r8, r8, #1
    fd72:	68e3      	ldr	r3, [r4, #12]
    fd74:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fd76:	1a5b      	subs	r3, r3, r1
    fd78:	4543      	cmp	r3, r8
    fd7a:	dcf0      	bgt.n	fd5e <_printf_float+0x442>
    fd7c:	e6fa      	b.n	fb74 <_printf_float+0x258>
    fd7e:	f04f 0800 	mov.w	r8, #0
    fd82:	f104 0919 	add.w	r9, r4, #25
    fd86:	e7f4      	b.n	fd72 <_printf_float+0x456>

0000fd88 <_printf_i>:
    fd88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    fd8c:	7e0f      	ldrb	r7, [r1, #24]
    fd8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    fd90:	2f78      	cmp	r7, #120	; 0x78
    fd92:	4691      	mov	r9, r2
    fd94:	4680      	mov	r8, r0
    fd96:	460c      	mov	r4, r1
    fd98:	469a      	mov	sl, r3
    fd9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
    fd9e:	d807      	bhi.n	fdb0 <_printf_i+0x28>
    fda0:	2f62      	cmp	r7, #98	; 0x62
    fda2:	d80a      	bhi.n	fdba <_printf_i+0x32>
    fda4:	2f00      	cmp	r7, #0
    fda6:	f000 80d8 	beq.w	ff5a <_printf_i+0x1d2>
    fdaa:	2f58      	cmp	r7, #88	; 0x58
    fdac:	f000 80a3 	beq.w	fef6 <_printf_i+0x16e>
    fdb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    fdb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    fdb8:	e03a      	b.n	fe30 <_printf_i+0xa8>
    fdba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    fdbe:	2b15      	cmp	r3, #21
    fdc0:	d8f6      	bhi.n	fdb0 <_printf_i+0x28>
    fdc2:	a101      	add	r1, pc, #4	; (adr r1, fdc8 <_printf_i+0x40>)
    fdc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    fdc8:	0000fe21 	.word	0x0000fe21
    fdcc:	0000fe35 	.word	0x0000fe35
    fdd0:	0000fdb1 	.word	0x0000fdb1
    fdd4:	0000fdb1 	.word	0x0000fdb1
    fdd8:	0000fdb1 	.word	0x0000fdb1
    fddc:	0000fdb1 	.word	0x0000fdb1
    fde0:	0000fe35 	.word	0x0000fe35
    fde4:	0000fdb1 	.word	0x0000fdb1
    fde8:	0000fdb1 	.word	0x0000fdb1
    fdec:	0000fdb1 	.word	0x0000fdb1
    fdf0:	0000fdb1 	.word	0x0000fdb1
    fdf4:	0000ff41 	.word	0x0000ff41
    fdf8:	0000fe65 	.word	0x0000fe65
    fdfc:	0000ff23 	.word	0x0000ff23
    fe00:	0000fdb1 	.word	0x0000fdb1
    fe04:	0000fdb1 	.word	0x0000fdb1
    fe08:	0000ff63 	.word	0x0000ff63
    fe0c:	0000fdb1 	.word	0x0000fdb1
    fe10:	0000fe65 	.word	0x0000fe65
    fe14:	0000fdb1 	.word	0x0000fdb1
    fe18:	0000fdb1 	.word	0x0000fdb1
    fe1c:	0000ff2b 	.word	0x0000ff2b
    fe20:	682b      	ldr	r3, [r5, #0]
    fe22:	1d1a      	adds	r2, r3, #4
    fe24:	681b      	ldr	r3, [r3, #0]
    fe26:	602a      	str	r2, [r5, #0]
    fe28:	f104 0542 	add.w	r5, r4, #66	; 0x42
    fe2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    fe30:	2301      	movs	r3, #1
    fe32:	e0a3      	b.n	ff7c <_printf_i+0x1f4>
    fe34:	6820      	ldr	r0, [r4, #0]
    fe36:	6829      	ldr	r1, [r5, #0]
    fe38:	0606      	lsls	r6, r0, #24
    fe3a:	f101 0304 	add.w	r3, r1, #4
    fe3e:	d50a      	bpl.n	fe56 <_printf_i+0xce>
    fe40:	680e      	ldr	r6, [r1, #0]
    fe42:	602b      	str	r3, [r5, #0]
    fe44:	2e00      	cmp	r6, #0
    fe46:	da03      	bge.n	fe50 <_printf_i+0xc8>
    fe48:	232d      	movs	r3, #45	; 0x2d
    fe4a:	4276      	negs	r6, r6
    fe4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    fe50:	485e      	ldr	r0, [pc, #376]	; (ffcc <_printf_i+0x244>)
    fe52:	230a      	movs	r3, #10
    fe54:	e019      	b.n	fe8a <_printf_i+0x102>
    fe56:	680e      	ldr	r6, [r1, #0]
    fe58:	602b      	str	r3, [r5, #0]
    fe5a:	f010 0f40 	tst.w	r0, #64	; 0x40
    fe5e:	bf18      	it	ne
    fe60:	b236      	sxthne	r6, r6
    fe62:	e7ef      	b.n	fe44 <_printf_i+0xbc>
    fe64:	682b      	ldr	r3, [r5, #0]
    fe66:	6820      	ldr	r0, [r4, #0]
    fe68:	1d19      	adds	r1, r3, #4
    fe6a:	6029      	str	r1, [r5, #0]
    fe6c:	0601      	lsls	r1, r0, #24
    fe6e:	d501      	bpl.n	fe74 <_printf_i+0xec>
    fe70:	681e      	ldr	r6, [r3, #0]
    fe72:	e002      	b.n	fe7a <_printf_i+0xf2>
    fe74:	0646      	lsls	r6, r0, #25
    fe76:	d5fb      	bpl.n	fe70 <_printf_i+0xe8>
    fe78:	881e      	ldrh	r6, [r3, #0]
    fe7a:	4854      	ldr	r0, [pc, #336]	; (ffcc <_printf_i+0x244>)
    fe7c:	2f6f      	cmp	r7, #111	; 0x6f
    fe7e:	bf0c      	ite	eq
    fe80:	2308      	moveq	r3, #8
    fe82:	230a      	movne	r3, #10
    fe84:	2100      	movs	r1, #0
    fe86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    fe8a:	6865      	ldr	r5, [r4, #4]
    fe8c:	60a5      	str	r5, [r4, #8]
    fe8e:	2d00      	cmp	r5, #0
    fe90:	bfa2      	ittt	ge
    fe92:	6821      	ldrge	r1, [r4, #0]
    fe94:	f021 0104 	bicge.w	r1, r1, #4
    fe98:	6021      	strge	r1, [r4, #0]
    fe9a:	b90e      	cbnz	r6, fea0 <_printf_i+0x118>
    fe9c:	2d00      	cmp	r5, #0
    fe9e:	d04d      	beq.n	ff3c <_printf_i+0x1b4>
    fea0:	4615      	mov	r5, r2
    fea2:	fbb6 f1f3 	udiv	r1, r6, r3
    fea6:	fb03 6711 	mls	r7, r3, r1, r6
    feaa:	5dc7      	ldrb	r7, [r0, r7]
    feac:	f805 7d01 	strb.w	r7, [r5, #-1]!
    feb0:	4637      	mov	r7, r6
    feb2:	42bb      	cmp	r3, r7
    feb4:	460e      	mov	r6, r1
    feb6:	d9f4      	bls.n	fea2 <_printf_i+0x11a>
    feb8:	2b08      	cmp	r3, #8
    feba:	d10b      	bne.n	fed4 <_printf_i+0x14c>
    febc:	6823      	ldr	r3, [r4, #0]
    febe:	07de      	lsls	r6, r3, #31
    fec0:	d508      	bpl.n	fed4 <_printf_i+0x14c>
    fec2:	6923      	ldr	r3, [r4, #16]
    fec4:	6861      	ldr	r1, [r4, #4]
    fec6:	4299      	cmp	r1, r3
    fec8:	bfde      	ittt	le
    feca:	2330      	movle	r3, #48	; 0x30
    fecc:	f805 3c01 	strble.w	r3, [r5, #-1]
    fed0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    fed4:	1b52      	subs	r2, r2, r5
    fed6:	6122      	str	r2, [r4, #16]
    fed8:	f8cd a000 	str.w	sl, [sp]
    fedc:	464b      	mov	r3, r9
    fede:	aa03      	add	r2, sp, #12
    fee0:	4621      	mov	r1, r4
    fee2:	4640      	mov	r0, r8
    fee4:	f005 fe49 	bl	15b7a <_printf_common>
    fee8:	3001      	adds	r0, #1
    feea:	d14c      	bne.n	ff86 <_printf_i+0x1fe>
    feec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fef0:	b004      	add	sp, #16
    fef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fef6:	4835      	ldr	r0, [pc, #212]	; (ffcc <_printf_i+0x244>)
    fef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    fefc:	6829      	ldr	r1, [r5, #0]
    fefe:	6823      	ldr	r3, [r4, #0]
    ff00:	f851 6b04 	ldr.w	r6, [r1], #4
    ff04:	6029      	str	r1, [r5, #0]
    ff06:	061d      	lsls	r5, r3, #24
    ff08:	d514      	bpl.n	ff34 <_printf_i+0x1ac>
    ff0a:	07df      	lsls	r7, r3, #31
    ff0c:	bf44      	itt	mi
    ff0e:	f043 0320 	orrmi.w	r3, r3, #32
    ff12:	6023      	strmi	r3, [r4, #0]
    ff14:	b91e      	cbnz	r6, ff1e <_printf_i+0x196>
    ff16:	6823      	ldr	r3, [r4, #0]
    ff18:	f023 0320 	bic.w	r3, r3, #32
    ff1c:	6023      	str	r3, [r4, #0]
    ff1e:	2310      	movs	r3, #16
    ff20:	e7b0      	b.n	fe84 <_printf_i+0xfc>
    ff22:	6823      	ldr	r3, [r4, #0]
    ff24:	f043 0320 	orr.w	r3, r3, #32
    ff28:	6023      	str	r3, [r4, #0]
    ff2a:	2378      	movs	r3, #120	; 0x78
    ff2c:	4828      	ldr	r0, [pc, #160]	; (ffd0 <_printf_i+0x248>)
    ff2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    ff32:	e7e3      	b.n	fefc <_printf_i+0x174>
    ff34:	0659      	lsls	r1, r3, #25
    ff36:	bf48      	it	mi
    ff38:	b2b6      	uxthmi	r6, r6
    ff3a:	e7e6      	b.n	ff0a <_printf_i+0x182>
    ff3c:	4615      	mov	r5, r2
    ff3e:	e7bb      	b.n	feb8 <_printf_i+0x130>
    ff40:	682b      	ldr	r3, [r5, #0]
    ff42:	6826      	ldr	r6, [r4, #0]
    ff44:	6961      	ldr	r1, [r4, #20]
    ff46:	1d18      	adds	r0, r3, #4
    ff48:	6028      	str	r0, [r5, #0]
    ff4a:	0635      	lsls	r5, r6, #24
    ff4c:	681b      	ldr	r3, [r3, #0]
    ff4e:	d501      	bpl.n	ff54 <_printf_i+0x1cc>
    ff50:	6019      	str	r1, [r3, #0]
    ff52:	e002      	b.n	ff5a <_printf_i+0x1d2>
    ff54:	0670      	lsls	r0, r6, #25
    ff56:	d5fb      	bpl.n	ff50 <_printf_i+0x1c8>
    ff58:	8019      	strh	r1, [r3, #0]
    ff5a:	2300      	movs	r3, #0
    ff5c:	6123      	str	r3, [r4, #16]
    ff5e:	4615      	mov	r5, r2
    ff60:	e7ba      	b.n	fed8 <_printf_i+0x150>
    ff62:	682b      	ldr	r3, [r5, #0]
    ff64:	1d1a      	adds	r2, r3, #4
    ff66:	602a      	str	r2, [r5, #0]
    ff68:	681d      	ldr	r5, [r3, #0]
    ff6a:	6862      	ldr	r2, [r4, #4]
    ff6c:	2100      	movs	r1, #0
    ff6e:	4628      	mov	r0, r5
    ff70:	f7f0 f8c6 	bl	100 <memchr>
    ff74:	b108      	cbz	r0, ff7a <_printf_i+0x1f2>
    ff76:	1b40      	subs	r0, r0, r5
    ff78:	6060      	str	r0, [r4, #4]
    ff7a:	6863      	ldr	r3, [r4, #4]
    ff7c:	6123      	str	r3, [r4, #16]
    ff7e:	2300      	movs	r3, #0
    ff80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    ff84:	e7a8      	b.n	fed8 <_printf_i+0x150>
    ff86:	6923      	ldr	r3, [r4, #16]
    ff88:	462a      	mov	r2, r5
    ff8a:	4649      	mov	r1, r9
    ff8c:	4640      	mov	r0, r8
    ff8e:	47d0      	blx	sl
    ff90:	3001      	adds	r0, #1
    ff92:	d0ab      	beq.n	feec <_printf_i+0x164>
    ff94:	6823      	ldr	r3, [r4, #0]
    ff96:	079b      	lsls	r3, r3, #30
    ff98:	d413      	bmi.n	ffc2 <_printf_i+0x23a>
    ff9a:	68e0      	ldr	r0, [r4, #12]
    ff9c:	9b03      	ldr	r3, [sp, #12]
    ff9e:	4298      	cmp	r0, r3
    ffa0:	bfb8      	it	lt
    ffa2:	4618      	movlt	r0, r3
    ffa4:	e7a4      	b.n	fef0 <_printf_i+0x168>
    ffa6:	2301      	movs	r3, #1
    ffa8:	4632      	mov	r2, r6
    ffaa:	4649      	mov	r1, r9
    ffac:	4640      	mov	r0, r8
    ffae:	47d0      	blx	sl
    ffb0:	3001      	adds	r0, #1
    ffb2:	d09b      	beq.n	feec <_printf_i+0x164>
    ffb4:	3501      	adds	r5, #1
    ffb6:	68e3      	ldr	r3, [r4, #12]
    ffb8:	9903      	ldr	r1, [sp, #12]
    ffba:	1a5b      	subs	r3, r3, r1
    ffbc:	42ab      	cmp	r3, r5
    ffbe:	dcf2      	bgt.n	ffa6 <_printf_i+0x21e>
    ffc0:	e7eb      	b.n	ff9a <_printf_i+0x212>
    ffc2:	2500      	movs	r5, #0
    ffc4:	f104 0619 	add.w	r6, r4, #25
    ffc8:	e7f5      	b.n	ffb6 <_printf_i+0x22e>
    ffca:	bf00      	nop
    ffcc:	00046132 	.word	0x00046132
    ffd0:	00046143 	.word	0x00046143

0000ffd4 <iprintf>:
    ffd4:	b40f      	push	{r0, r1, r2, r3}
    ffd6:	4b0a      	ldr	r3, [pc, #40]	; (10000 <iprintf+0x2c>)
    ffd8:	b513      	push	{r0, r1, r4, lr}
    ffda:	681c      	ldr	r4, [r3, #0]
    ffdc:	b124      	cbz	r4, ffe8 <iprintf+0x14>
    ffde:	69a3      	ldr	r3, [r4, #24]
    ffe0:	b913      	cbnz	r3, ffe8 <iprintf+0x14>
    ffe2:	4620      	mov	r0, r4
    ffe4:	f000 fad0 	bl	10588 <__sinit>
    ffe8:	ab05      	add	r3, sp, #20
    ffea:	9a04      	ldr	r2, [sp, #16]
    ffec:	68a1      	ldr	r1, [r4, #8]
    ffee:	9301      	str	r3, [sp, #4]
    fff0:	4620      	mov	r0, r4
    fff2:	f7ff fb63 	bl	f6bc <_vfiprintf_r>
    fff6:	b002      	add	sp, #8
    fff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fffc:	b004      	add	sp, #16
    fffe:	4770      	bx	lr
   10000:	20000384 	.word	0x20000384

00010004 <_sbrk_r>:
   10004:	b538      	push	{r3, r4, r5, lr}
   10006:	4d06      	ldr	r5, [pc, #24]	; (10020 <_sbrk_r+0x1c>)
   10008:	2300      	movs	r3, #0
   1000a:	4604      	mov	r4, r0
   1000c:	4608      	mov	r0, r1
   1000e:	602b      	str	r3, [r5, #0]
   10010:	f7fc f8e6 	bl	c1e0 <_sbrk>
   10014:	1c43      	adds	r3, r0, #1
   10016:	d102      	bne.n	1001e <_sbrk_r+0x1a>
   10018:	682b      	ldr	r3, [r5, #0]
   1001a:	b103      	cbz	r3, 1001e <_sbrk_r+0x1a>
   1001c:	6023      	str	r3, [r4, #0]
   1001e:	bd38      	pop	{r3, r4, r5, pc}
   10020:	2000189c 	.word	0x2000189c

00010024 <setvbuf>:
   10024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10028:	461d      	mov	r5, r3
   1002a:	4b5d      	ldr	r3, [pc, #372]	; (101a0 <setvbuf+0x17c>)
   1002c:	681f      	ldr	r7, [r3, #0]
   1002e:	4604      	mov	r4, r0
   10030:	460e      	mov	r6, r1
   10032:	4690      	mov	r8, r2
   10034:	b127      	cbz	r7, 10040 <setvbuf+0x1c>
   10036:	69bb      	ldr	r3, [r7, #24]
   10038:	b913      	cbnz	r3, 10040 <setvbuf+0x1c>
   1003a:	4638      	mov	r0, r7
   1003c:	f000 faa4 	bl	10588 <__sinit>
   10040:	4b58      	ldr	r3, [pc, #352]	; (101a4 <setvbuf+0x180>)
   10042:	429c      	cmp	r4, r3
   10044:	d167      	bne.n	10116 <setvbuf+0xf2>
   10046:	687c      	ldr	r4, [r7, #4]
   10048:	f1b8 0f02 	cmp.w	r8, #2
   1004c:	d006      	beq.n	1005c <setvbuf+0x38>
   1004e:	f1b8 0f01 	cmp.w	r8, #1
   10052:	f200 809f 	bhi.w	10194 <setvbuf+0x170>
   10056:	2d00      	cmp	r5, #0
   10058:	f2c0 809c 	blt.w	10194 <setvbuf+0x170>
   1005c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1005e:	07db      	lsls	r3, r3, #31
   10060:	d405      	bmi.n	1006e <setvbuf+0x4a>
   10062:	89a3      	ldrh	r3, [r4, #12]
   10064:	0598      	lsls	r0, r3, #22
   10066:	d402      	bmi.n	1006e <setvbuf+0x4a>
   10068:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1006a:	f004 fe18 	bl	14c9e <__retarget_lock_acquire_recursive>
   1006e:	4621      	mov	r1, r4
   10070:	4638      	mov	r0, r7
   10072:	f000 fa0b 	bl	1048c <_fflush_r>
   10076:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10078:	b141      	cbz	r1, 1008c <setvbuf+0x68>
   1007a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1007e:	4299      	cmp	r1, r3
   10080:	d002      	beq.n	10088 <setvbuf+0x64>
   10082:	4638      	mov	r0, r7
   10084:	f7ff fa74 	bl	f570 <_free_r>
   10088:	2300      	movs	r3, #0
   1008a:	6363      	str	r3, [r4, #52]	; 0x34
   1008c:	2300      	movs	r3, #0
   1008e:	61a3      	str	r3, [r4, #24]
   10090:	6063      	str	r3, [r4, #4]
   10092:	89a3      	ldrh	r3, [r4, #12]
   10094:	0619      	lsls	r1, r3, #24
   10096:	d503      	bpl.n	100a0 <setvbuf+0x7c>
   10098:	6921      	ldr	r1, [r4, #16]
   1009a:	4638      	mov	r0, r7
   1009c:	f7ff fa68 	bl	f570 <_free_r>
   100a0:	89a3      	ldrh	r3, [r4, #12]
   100a2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   100a6:	f023 0303 	bic.w	r3, r3, #3
   100aa:	f1b8 0f02 	cmp.w	r8, #2
   100ae:	81a3      	strh	r3, [r4, #12]
   100b0:	d06c      	beq.n	1018c <setvbuf+0x168>
   100b2:	ab01      	add	r3, sp, #4
   100b4:	466a      	mov	r2, sp
   100b6:	4621      	mov	r1, r4
   100b8:	4638      	mov	r0, r7
   100ba:	f005 fef4 	bl	15ea6 <__swhatbuf_r>
   100be:	89a3      	ldrh	r3, [r4, #12]
   100c0:	4318      	orrs	r0, r3
   100c2:	81a0      	strh	r0, [r4, #12]
   100c4:	2d00      	cmp	r5, #0
   100c6:	d130      	bne.n	1012a <setvbuf+0x106>
   100c8:	9d00      	ldr	r5, [sp, #0]
   100ca:	4628      	mov	r0, r5
   100cc:	f7ff fa40 	bl	f550 <malloc>
   100d0:	4606      	mov	r6, r0
   100d2:	2800      	cmp	r0, #0
   100d4:	d155      	bne.n	10182 <setvbuf+0x15e>
   100d6:	f8dd 9000 	ldr.w	r9, [sp]
   100da:	45a9      	cmp	r9, r5
   100dc:	d14a      	bne.n	10174 <setvbuf+0x150>
   100de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   100e2:	2200      	movs	r2, #0
   100e4:	60a2      	str	r2, [r4, #8]
   100e6:	f104 0247 	add.w	r2, r4, #71	; 0x47
   100ea:	6022      	str	r2, [r4, #0]
   100ec:	6122      	str	r2, [r4, #16]
   100ee:	2201      	movs	r2, #1
   100f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   100f4:	6162      	str	r2, [r4, #20]
   100f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   100f8:	f043 0302 	orr.w	r3, r3, #2
   100fc:	07d2      	lsls	r2, r2, #31
   100fe:	81a3      	strh	r3, [r4, #12]
   10100:	d405      	bmi.n	1010e <setvbuf+0xea>
   10102:	f413 7f00 	tst.w	r3, #512	; 0x200
   10106:	d102      	bne.n	1010e <setvbuf+0xea>
   10108:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1010a:	f004 fdce 	bl	14caa <__retarget_lock_release_recursive>
   1010e:	4628      	mov	r0, r5
   10110:	b003      	add	sp, #12
   10112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10116:	4b24      	ldr	r3, [pc, #144]	; (101a8 <setvbuf+0x184>)
   10118:	429c      	cmp	r4, r3
   1011a:	d101      	bne.n	10120 <setvbuf+0xfc>
   1011c:	68bc      	ldr	r4, [r7, #8]
   1011e:	e793      	b.n	10048 <setvbuf+0x24>
   10120:	4b22      	ldr	r3, [pc, #136]	; (101ac <setvbuf+0x188>)
   10122:	429c      	cmp	r4, r3
   10124:	bf08      	it	eq
   10126:	68fc      	ldreq	r4, [r7, #12]
   10128:	e78e      	b.n	10048 <setvbuf+0x24>
   1012a:	2e00      	cmp	r6, #0
   1012c:	d0cd      	beq.n	100ca <setvbuf+0xa6>
   1012e:	69bb      	ldr	r3, [r7, #24]
   10130:	b913      	cbnz	r3, 10138 <setvbuf+0x114>
   10132:	4638      	mov	r0, r7
   10134:	f000 fa28 	bl	10588 <__sinit>
   10138:	f1b8 0f01 	cmp.w	r8, #1
   1013c:	bf08      	it	eq
   1013e:	89a3      	ldrheq	r3, [r4, #12]
   10140:	6026      	str	r6, [r4, #0]
   10142:	bf04      	itt	eq
   10144:	f043 0301 	orreq.w	r3, r3, #1
   10148:	81a3      	strheq	r3, [r4, #12]
   1014a:	89a2      	ldrh	r2, [r4, #12]
   1014c:	f012 0308 	ands.w	r3, r2, #8
   10150:	e9c4 6504 	strd	r6, r5, [r4, #16]
   10154:	d01c      	beq.n	10190 <setvbuf+0x16c>
   10156:	07d3      	lsls	r3, r2, #31
   10158:	bf41      	itttt	mi
   1015a:	2300      	movmi	r3, #0
   1015c:	426d      	negmi	r5, r5
   1015e:	60a3      	strmi	r3, [r4, #8]
   10160:	61a5      	strmi	r5, [r4, #24]
   10162:	bf58      	it	pl
   10164:	60a5      	strpl	r5, [r4, #8]
   10166:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10168:	f015 0501 	ands.w	r5, r5, #1
   1016c:	d115      	bne.n	1019a <setvbuf+0x176>
   1016e:	f412 7f00 	tst.w	r2, #512	; 0x200
   10172:	e7c8      	b.n	10106 <setvbuf+0xe2>
   10174:	4648      	mov	r0, r9
   10176:	f7ff f9eb 	bl	f550 <malloc>
   1017a:	4606      	mov	r6, r0
   1017c:	2800      	cmp	r0, #0
   1017e:	d0ae      	beq.n	100de <setvbuf+0xba>
   10180:	464d      	mov	r5, r9
   10182:	89a3      	ldrh	r3, [r4, #12]
   10184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10188:	81a3      	strh	r3, [r4, #12]
   1018a:	e7d0      	b.n	1012e <setvbuf+0x10a>
   1018c:	2500      	movs	r5, #0
   1018e:	e7a8      	b.n	100e2 <setvbuf+0xbe>
   10190:	60a3      	str	r3, [r4, #8]
   10192:	e7e8      	b.n	10166 <setvbuf+0x142>
   10194:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10198:	e7b9      	b.n	1010e <setvbuf+0xea>
   1019a:	2500      	movs	r5, #0
   1019c:	e7b7      	b.n	1010e <setvbuf+0xea>
   1019e:	bf00      	nop
   101a0:	20000384 	.word	0x20000384
   101a4:	0003f87c 	.word	0x0003f87c
   101a8:	0003f89c 	.word	0x0003f89c
   101ac:	0003f85c 	.word	0x0003f85c

000101b0 <raise>:
   101b0:	4b02      	ldr	r3, [pc, #8]	; (101bc <raise+0xc>)
   101b2:	4601      	mov	r1, r0
   101b4:	6818      	ldr	r0, [r3, #0]
   101b6:	f005 bd4d 	b.w	15c54 <_raise_r>
   101ba:	bf00      	nop
   101bc:	20000384 	.word	0x20000384

000101c0 <_kill_r>:
   101c0:	b538      	push	{r3, r4, r5, lr}
   101c2:	4d07      	ldr	r5, [pc, #28]	; (101e0 <_kill_r+0x20>)
   101c4:	2300      	movs	r3, #0
   101c6:	4604      	mov	r4, r0
   101c8:	4608      	mov	r0, r1
   101ca:	4611      	mov	r1, r2
   101cc:	602b      	str	r3, [r5, #0]
   101ce:	f004 fd53 	bl	14c78 <_kill>
   101d2:	1c43      	adds	r3, r0, #1
   101d4:	d102      	bne.n	101dc <_kill_r+0x1c>
   101d6:	682b      	ldr	r3, [r5, #0]
   101d8:	b103      	cbz	r3, 101dc <_kill_r+0x1c>
   101da:	6023      	str	r3, [r4, #0]
   101dc:	bd38      	pop	{r3, r4, r5, pc}
   101de:	bf00      	nop
   101e0:	2000189c 	.word	0x2000189c

000101e4 <vsniprintf>:
   101e4:	b507      	push	{r0, r1, r2, lr}
   101e6:	9300      	str	r3, [sp, #0]
   101e8:	4613      	mov	r3, r2
   101ea:	460a      	mov	r2, r1
   101ec:	4601      	mov	r1, r0
   101ee:	4803      	ldr	r0, [pc, #12]	; (101fc <vsniprintf+0x18>)
   101f0:	6800      	ldr	r0, [r0, #0]
   101f2:	f005 fd6d 	bl	15cd0 <_vsniprintf_r>
   101f6:	b003      	add	sp, #12
   101f8:	f85d fb04 	ldr.w	pc, [sp], #4
   101fc:	20000384 	.word	0x20000384

00010200 <__swbuf_r>:
   10200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10202:	460e      	mov	r6, r1
   10204:	4614      	mov	r4, r2
   10206:	4605      	mov	r5, r0
   10208:	b118      	cbz	r0, 10212 <__swbuf_r+0x12>
   1020a:	6983      	ldr	r3, [r0, #24]
   1020c:	b90b      	cbnz	r3, 10212 <__swbuf_r+0x12>
   1020e:	f000 f9bb 	bl	10588 <__sinit>
   10212:	4b21      	ldr	r3, [pc, #132]	; (10298 <__swbuf_r+0x98>)
   10214:	429c      	cmp	r4, r3
   10216:	d12b      	bne.n	10270 <__swbuf_r+0x70>
   10218:	686c      	ldr	r4, [r5, #4]
   1021a:	69a3      	ldr	r3, [r4, #24]
   1021c:	60a3      	str	r3, [r4, #8]
   1021e:	89a3      	ldrh	r3, [r4, #12]
   10220:	071a      	lsls	r2, r3, #28
   10222:	d52f      	bpl.n	10284 <__swbuf_r+0x84>
   10224:	6923      	ldr	r3, [r4, #16]
   10226:	b36b      	cbz	r3, 10284 <__swbuf_r+0x84>
   10228:	6923      	ldr	r3, [r4, #16]
   1022a:	6820      	ldr	r0, [r4, #0]
   1022c:	1ac0      	subs	r0, r0, r3
   1022e:	6963      	ldr	r3, [r4, #20]
   10230:	b2f6      	uxtb	r6, r6
   10232:	4283      	cmp	r3, r0
   10234:	4637      	mov	r7, r6
   10236:	dc04      	bgt.n	10242 <__swbuf_r+0x42>
   10238:	4621      	mov	r1, r4
   1023a:	4628      	mov	r0, r5
   1023c:	f000 f926 	bl	1048c <_fflush_r>
   10240:	bb30      	cbnz	r0, 10290 <__swbuf_r+0x90>
   10242:	68a3      	ldr	r3, [r4, #8]
   10244:	3b01      	subs	r3, #1
   10246:	60a3      	str	r3, [r4, #8]
   10248:	6823      	ldr	r3, [r4, #0]
   1024a:	1c5a      	adds	r2, r3, #1
   1024c:	6022      	str	r2, [r4, #0]
   1024e:	701e      	strb	r6, [r3, #0]
   10250:	6963      	ldr	r3, [r4, #20]
   10252:	3001      	adds	r0, #1
   10254:	4283      	cmp	r3, r0
   10256:	d004      	beq.n	10262 <__swbuf_r+0x62>
   10258:	89a3      	ldrh	r3, [r4, #12]
   1025a:	07db      	lsls	r3, r3, #31
   1025c:	d506      	bpl.n	1026c <__swbuf_r+0x6c>
   1025e:	2e0a      	cmp	r6, #10
   10260:	d104      	bne.n	1026c <__swbuf_r+0x6c>
   10262:	4621      	mov	r1, r4
   10264:	4628      	mov	r0, r5
   10266:	f000 f911 	bl	1048c <_fflush_r>
   1026a:	b988      	cbnz	r0, 10290 <__swbuf_r+0x90>
   1026c:	4638      	mov	r0, r7
   1026e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10270:	4b0a      	ldr	r3, [pc, #40]	; (1029c <__swbuf_r+0x9c>)
   10272:	429c      	cmp	r4, r3
   10274:	d101      	bne.n	1027a <__swbuf_r+0x7a>
   10276:	68ac      	ldr	r4, [r5, #8]
   10278:	e7cf      	b.n	1021a <__swbuf_r+0x1a>
   1027a:	4b09      	ldr	r3, [pc, #36]	; (102a0 <__swbuf_r+0xa0>)
   1027c:	429c      	cmp	r4, r3
   1027e:	bf08      	it	eq
   10280:	68ec      	ldreq	r4, [r5, #12]
   10282:	e7ca      	b.n	1021a <__swbuf_r+0x1a>
   10284:	4621      	mov	r1, r4
   10286:	4628      	mov	r0, r5
   10288:	f000 f80c 	bl	102a4 <__swsetup_r>
   1028c:	2800      	cmp	r0, #0
   1028e:	d0cb      	beq.n	10228 <__swbuf_r+0x28>
   10290:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10294:	e7ea      	b.n	1026c <__swbuf_r+0x6c>
   10296:	bf00      	nop
   10298:	0003f87c 	.word	0x0003f87c
   1029c:	0003f89c 	.word	0x0003f89c
   102a0:	0003f85c 	.word	0x0003f85c

000102a4 <__swsetup_r>:
   102a4:	4b32      	ldr	r3, [pc, #200]	; (10370 <__swsetup_r+0xcc>)
   102a6:	b570      	push	{r4, r5, r6, lr}
   102a8:	681d      	ldr	r5, [r3, #0]
   102aa:	4606      	mov	r6, r0
   102ac:	460c      	mov	r4, r1
   102ae:	b125      	cbz	r5, 102ba <__swsetup_r+0x16>
   102b0:	69ab      	ldr	r3, [r5, #24]
   102b2:	b913      	cbnz	r3, 102ba <__swsetup_r+0x16>
   102b4:	4628      	mov	r0, r5
   102b6:	f000 f967 	bl	10588 <__sinit>
   102ba:	4b2e      	ldr	r3, [pc, #184]	; (10374 <__swsetup_r+0xd0>)
   102bc:	429c      	cmp	r4, r3
   102be:	d10f      	bne.n	102e0 <__swsetup_r+0x3c>
   102c0:	686c      	ldr	r4, [r5, #4]
   102c2:	89a3      	ldrh	r3, [r4, #12]
   102c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   102c8:	0719      	lsls	r1, r3, #28
   102ca:	d42c      	bmi.n	10326 <__swsetup_r+0x82>
   102cc:	06dd      	lsls	r5, r3, #27
   102ce:	d411      	bmi.n	102f4 <__swsetup_r+0x50>
   102d0:	2309      	movs	r3, #9
   102d2:	6033      	str	r3, [r6, #0]
   102d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   102d8:	81a3      	strh	r3, [r4, #12]
   102da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   102de:	e03e      	b.n	1035e <__swsetup_r+0xba>
   102e0:	4b25      	ldr	r3, [pc, #148]	; (10378 <__swsetup_r+0xd4>)
   102e2:	429c      	cmp	r4, r3
   102e4:	d101      	bne.n	102ea <__swsetup_r+0x46>
   102e6:	68ac      	ldr	r4, [r5, #8]
   102e8:	e7eb      	b.n	102c2 <__swsetup_r+0x1e>
   102ea:	4b24      	ldr	r3, [pc, #144]	; (1037c <__swsetup_r+0xd8>)
   102ec:	429c      	cmp	r4, r3
   102ee:	bf08      	it	eq
   102f0:	68ec      	ldreq	r4, [r5, #12]
   102f2:	e7e6      	b.n	102c2 <__swsetup_r+0x1e>
   102f4:	0758      	lsls	r0, r3, #29
   102f6:	d512      	bpl.n	1031e <__swsetup_r+0x7a>
   102f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   102fa:	b141      	cbz	r1, 1030e <__swsetup_r+0x6a>
   102fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   10300:	4299      	cmp	r1, r3
   10302:	d002      	beq.n	1030a <__swsetup_r+0x66>
   10304:	4630      	mov	r0, r6
   10306:	f7ff f933 	bl	f570 <_free_r>
   1030a:	2300      	movs	r3, #0
   1030c:	6363      	str	r3, [r4, #52]	; 0x34
   1030e:	89a3      	ldrh	r3, [r4, #12]
   10310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   10314:	81a3      	strh	r3, [r4, #12]
   10316:	2300      	movs	r3, #0
   10318:	6063      	str	r3, [r4, #4]
   1031a:	6923      	ldr	r3, [r4, #16]
   1031c:	6023      	str	r3, [r4, #0]
   1031e:	89a3      	ldrh	r3, [r4, #12]
   10320:	f043 0308 	orr.w	r3, r3, #8
   10324:	81a3      	strh	r3, [r4, #12]
   10326:	6923      	ldr	r3, [r4, #16]
   10328:	b94b      	cbnz	r3, 1033e <__swsetup_r+0x9a>
   1032a:	89a3      	ldrh	r3, [r4, #12]
   1032c:	f403 7320 	and.w	r3, r3, #640	; 0x280
   10330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10334:	d003      	beq.n	1033e <__swsetup_r+0x9a>
   10336:	4621      	mov	r1, r4
   10338:	4630      	mov	r0, r6
   1033a:	f000 f9a7 	bl	1068c <__smakebuf_r>
   1033e:	89a0      	ldrh	r0, [r4, #12]
   10340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   10344:	f010 0301 	ands.w	r3, r0, #1
   10348:	d00a      	beq.n	10360 <__swsetup_r+0xbc>
   1034a:	2300      	movs	r3, #0
   1034c:	60a3      	str	r3, [r4, #8]
   1034e:	6963      	ldr	r3, [r4, #20]
   10350:	425b      	negs	r3, r3
   10352:	61a3      	str	r3, [r4, #24]
   10354:	6923      	ldr	r3, [r4, #16]
   10356:	b943      	cbnz	r3, 1036a <__swsetup_r+0xc6>
   10358:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   1035c:	d1ba      	bne.n	102d4 <__swsetup_r+0x30>
   1035e:	bd70      	pop	{r4, r5, r6, pc}
   10360:	0781      	lsls	r1, r0, #30
   10362:	bf58      	it	pl
   10364:	6963      	ldrpl	r3, [r4, #20]
   10366:	60a3      	str	r3, [r4, #8]
   10368:	e7f4      	b.n	10354 <__swsetup_r+0xb0>
   1036a:	2000      	movs	r0, #0
   1036c:	e7f7      	b.n	1035e <__swsetup_r+0xba>
   1036e:	bf00      	nop
   10370:	20000384 	.word	0x20000384
   10374:	0003f87c 	.word	0x0003f87c
   10378:	0003f89c 	.word	0x0003f89c
   1037c:	0003f85c 	.word	0x0003f85c

00010380 <__sflush_r>:
   10380:	898a      	ldrh	r2, [r1, #12]
   10382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10386:	4605      	mov	r5, r0
   10388:	0710      	lsls	r0, r2, #28
   1038a:	460c      	mov	r4, r1
   1038c:	d458      	bmi.n	10440 <__sflush_r+0xc0>
   1038e:	684b      	ldr	r3, [r1, #4]
   10390:	2b00      	cmp	r3, #0
   10392:	dc05      	bgt.n	103a0 <__sflush_r+0x20>
   10394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10396:	2b00      	cmp	r3, #0
   10398:	dc02      	bgt.n	103a0 <__sflush_r+0x20>
   1039a:	2000      	movs	r0, #0
   1039c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   103a2:	2e00      	cmp	r6, #0
   103a4:	d0f9      	beq.n	1039a <__sflush_r+0x1a>
   103a6:	2300      	movs	r3, #0
   103a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   103ac:	682f      	ldr	r7, [r5, #0]
   103ae:	602b      	str	r3, [r5, #0]
   103b0:	d032      	beq.n	10418 <__sflush_r+0x98>
   103b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
   103b4:	89a3      	ldrh	r3, [r4, #12]
   103b6:	075a      	lsls	r2, r3, #29
   103b8:	d505      	bpl.n	103c6 <__sflush_r+0x46>
   103ba:	6863      	ldr	r3, [r4, #4]
   103bc:	1ac0      	subs	r0, r0, r3
   103be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   103c0:	b10b      	cbz	r3, 103c6 <__sflush_r+0x46>
   103c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   103c4:	1ac0      	subs	r0, r0, r3
   103c6:	2300      	movs	r3, #0
   103c8:	4602      	mov	r2, r0
   103ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   103cc:	6a21      	ldr	r1, [r4, #32]
   103ce:	4628      	mov	r0, r5
   103d0:	47b0      	blx	r6
   103d2:	1c43      	adds	r3, r0, #1
   103d4:	89a3      	ldrh	r3, [r4, #12]
   103d6:	d106      	bne.n	103e6 <__sflush_r+0x66>
   103d8:	6829      	ldr	r1, [r5, #0]
   103da:	291d      	cmp	r1, #29
   103dc:	d82c      	bhi.n	10438 <__sflush_r+0xb8>
   103de:	4a2a      	ldr	r2, [pc, #168]	; (10488 <__sflush_r+0x108>)
   103e0:	40ca      	lsrs	r2, r1
   103e2:	07d6      	lsls	r6, r2, #31
   103e4:	d528      	bpl.n	10438 <__sflush_r+0xb8>
   103e6:	2200      	movs	r2, #0
   103e8:	6062      	str	r2, [r4, #4]
   103ea:	04d9      	lsls	r1, r3, #19
   103ec:	6922      	ldr	r2, [r4, #16]
   103ee:	6022      	str	r2, [r4, #0]
   103f0:	d504      	bpl.n	103fc <__sflush_r+0x7c>
   103f2:	1c42      	adds	r2, r0, #1
   103f4:	d101      	bne.n	103fa <__sflush_r+0x7a>
   103f6:	682b      	ldr	r3, [r5, #0]
   103f8:	b903      	cbnz	r3, 103fc <__sflush_r+0x7c>
   103fa:	6560      	str	r0, [r4, #84]	; 0x54
   103fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   103fe:	602f      	str	r7, [r5, #0]
   10400:	2900      	cmp	r1, #0
   10402:	d0ca      	beq.n	1039a <__sflush_r+0x1a>
   10404:	f104 0344 	add.w	r3, r4, #68	; 0x44
   10408:	4299      	cmp	r1, r3
   1040a:	d002      	beq.n	10412 <__sflush_r+0x92>
   1040c:	4628      	mov	r0, r5
   1040e:	f7ff f8af 	bl	f570 <_free_r>
   10412:	2000      	movs	r0, #0
   10414:	6360      	str	r0, [r4, #52]	; 0x34
   10416:	e7c1      	b.n	1039c <__sflush_r+0x1c>
   10418:	6a21      	ldr	r1, [r4, #32]
   1041a:	2301      	movs	r3, #1
   1041c:	4628      	mov	r0, r5
   1041e:	47b0      	blx	r6
   10420:	1c41      	adds	r1, r0, #1
   10422:	d1c7      	bne.n	103b4 <__sflush_r+0x34>
   10424:	682b      	ldr	r3, [r5, #0]
   10426:	2b00      	cmp	r3, #0
   10428:	d0c4      	beq.n	103b4 <__sflush_r+0x34>
   1042a:	2b1d      	cmp	r3, #29
   1042c:	d001      	beq.n	10432 <__sflush_r+0xb2>
   1042e:	2b16      	cmp	r3, #22
   10430:	d101      	bne.n	10436 <__sflush_r+0xb6>
   10432:	602f      	str	r7, [r5, #0]
   10434:	e7b1      	b.n	1039a <__sflush_r+0x1a>
   10436:	89a3      	ldrh	r3, [r4, #12]
   10438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1043c:	81a3      	strh	r3, [r4, #12]
   1043e:	e7ad      	b.n	1039c <__sflush_r+0x1c>
   10440:	690f      	ldr	r7, [r1, #16]
   10442:	2f00      	cmp	r7, #0
   10444:	d0a9      	beq.n	1039a <__sflush_r+0x1a>
   10446:	0793      	lsls	r3, r2, #30
   10448:	680e      	ldr	r6, [r1, #0]
   1044a:	bf08      	it	eq
   1044c:	694b      	ldreq	r3, [r1, #20]
   1044e:	600f      	str	r7, [r1, #0]
   10450:	bf18      	it	ne
   10452:	2300      	movne	r3, #0
   10454:	eba6 0807 	sub.w	r8, r6, r7
   10458:	608b      	str	r3, [r1, #8]
   1045a:	f1b8 0f00 	cmp.w	r8, #0
   1045e:	dd9c      	ble.n	1039a <__sflush_r+0x1a>
   10460:	6a21      	ldr	r1, [r4, #32]
   10462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10464:	4643      	mov	r3, r8
   10466:	463a      	mov	r2, r7
   10468:	4628      	mov	r0, r5
   1046a:	47b0      	blx	r6
   1046c:	2800      	cmp	r0, #0
   1046e:	dc06      	bgt.n	1047e <__sflush_r+0xfe>
   10470:	89a3      	ldrh	r3, [r4, #12]
   10472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10476:	81a3      	strh	r3, [r4, #12]
   10478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1047c:	e78e      	b.n	1039c <__sflush_r+0x1c>
   1047e:	4407      	add	r7, r0
   10480:	eba8 0800 	sub.w	r8, r8, r0
   10484:	e7e9      	b.n	1045a <__sflush_r+0xda>
   10486:	bf00      	nop
   10488:	20400001 	.word	0x20400001

0001048c <_fflush_r>:
   1048c:	b538      	push	{r3, r4, r5, lr}
   1048e:	690b      	ldr	r3, [r1, #16]
   10490:	4605      	mov	r5, r0
   10492:	460c      	mov	r4, r1
   10494:	b913      	cbnz	r3, 1049c <_fflush_r+0x10>
   10496:	2500      	movs	r5, #0
   10498:	4628      	mov	r0, r5
   1049a:	bd38      	pop	{r3, r4, r5, pc}
   1049c:	b118      	cbz	r0, 104a6 <_fflush_r+0x1a>
   1049e:	6983      	ldr	r3, [r0, #24]
   104a0:	b90b      	cbnz	r3, 104a6 <_fflush_r+0x1a>
   104a2:	f000 f871 	bl	10588 <__sinit>
   104a6:	4b14      	ldr	r3, [pc, #80]	; (104f8 <_fflush_r+0x6c>)
   104a8:	429c      	cmp	r4, r3
   104aa:	d11b      	bne.n	104e4 <_fflush_r+0x58>
   104ac:	686c      	ldr	r4, [r5, #4]
   104ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   104b2:	2b00      	cmp	r3, #0
   104b4:	d0ef      	beq.n	10496 <_fflush_r+0xa>
   104b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   104b8:	07d0      	lsls	r0, r2, #31
   104ba:	d404      	bmi.n	104c6 <_fflush_r+0x3a>
   104bc:	0599      	lsls	r1, r3, #22
   104be:	d402      	bmi.n	104c6 <_fflush_r+0x3a>
   104c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   104c2:	f004 fbec 	bl	14c9e <__retarget_lock_acquire_recursive>
   104c6:	4628      	mov	r0, r5
   104c8:	4621      	mov	r1, r4
   104ca:	f7ff ff59 	bl	10380 <__sflush_r>
   104ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   104d0:	07da      	lsls	r2, r3, #31
   104d2:	4605      	mov	r5, r0
   104d4:	d4e0      	bmi.n	10498 <_fflush_r+0xc>
   104d6:	89a3      	ldrh	r3, [r4, #12]
   104d8:	059b      	lsls	r3, r3, #22
   104da:	d4dd      	bmi.n	10498 <_fflush_r+0xc>
   104dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   104de:	f004 fbe4 	bl	14caa <__retarget_lock_release_recursive>
   104e2:	e7d9      	b.n	10498 <_fflush_r+0xc>
   104e4:	4b05      	ldr	r3, [pc, #20]	; (104fc <_fflush_r+0x70>)
   104e6:	429c      	cmp	r4, r3
   104e8:	d101      	bne.n	104ee <_fflush_r+0x62>
   104ea:	68ac      	ldr	r4, [r5, #8]
   104ec:	e7df      	b.n	104ae <_fflush_r+0x22>
   104ee:	4b04      	ldr	r3, [pc, #16]	; (10500 <_fflush_r+0x74>)
   104f0:	429c      	cmp	r4, r3
   104f2:	bf08      	it	eq
   104f4:	68ec      	ldreq	r4, [r5, #12]
   104f6:	e7da      	b.n	104ae <_fflush_r+0x22>
   104f8:	0003f87c 	.word	0x0003f87c
   104fc:	0003f89c 	.word	0x0003f89c
   10500:	0003f85c 	.word	0x0003f85c

00010504 <std>:
   10504:	2300      	movs	r3, #0
   10506:	b510      	push	{r4, lr}
   10508:	4604      	mov	r4, r0
   1050a:	e9c0 3300 	strd	r3, r3, [r0]
   1050e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   10512:	6083      	str	r3, [r0, #8]
   10514:	8181      	strh	r1, [r0, #12]
   10516:	6643      	str	r3, [r0, #100]	; 0x64
   10518:	81c2      	strh	r2, [r0, #14]
   1051a:	6183      	str	r3, [r0, #24]
   1051c:	4619      	mov	r1, r3
   1051e:	2208      	movs	r2, #8
   10520:	305c      	adds	r0, #92	; 0x5c
   10522:	f005 fa4a 	bl	159ba <memset>
   10526:	4b05      	ldr	r3, [pc, #20]	; (1053c <std+0x38>)
   10528:	6263      	str	r3, [r4, #36]	; 0x24
   1052a:	4b05      	ldr	r3, [pc, #20]	; (10540 <std+0x3c>)
   1052c:	62a3      	str	r3, [r4, #40]	; 0x28
   1052e:	4b05      	ldr	r3, [pc, #20]	; (10544 <std+0x40>)
   10530:	62e3      	str	r3, [r4, #44]	; 0x2c
   10532:	4b05      	ldr	r3, [pc, #20]	; (10548 <std+0x44>)
   10534:	6224      	str	r4, [r4, #32]
   10536:	6323      	str	r3, [r4, #48]	; 0x30
   10538:	bd10      	pop	{r4, pc}
   1053a:	bf00      	nop
   1053c:	000160c9 	.word	0x000160c9
   10540:	000160eb 	.word	0x000160eb
   10544:	00016123 	.word	0x00016123
   10548:	00016147 	.word	0x00016147

0001054c <_cleanup_r>:
   1054c:	4901      	ldr	r1, [pc, #4]	; (10554 <_cleanup_r+0x8>)
   1054e:	f005 bc8b 	b.w	15e68 <_fwalk_reent>
   10552:	bf00      	nop
   10554:	0001048d 	.word	0x0001048d

00010558 <__sfp_lock_acquire>:
   10558:	4801      	ldr	r0, [pc, #4]	; (10560 <__sfp_lock_acquire+0x8>)
   1055a:	f004 bba0 	b.w	14c9e <__retarget_lock_acquire_recursive>
   1055e:	bf00      	nop
   10560:	200005e0 	.word	0x200005e0

00010564 <__sfp_lock_release>:
   10564:	4801      	ldr	r0, [pc, #4]	; (1056c <__sfp_lock_release+0x8>)
   10566:	f004 bba0 	b.w	14caa <__retarget_lock_release_recursive>
   1056a:	bf00      	nop
   1056c:	200005e0 	.word	0x200005e0

00010570 <__sinit_lock_acquire>:
   10570:	4801      	ldr	r0, [pc, #4]	; (10578 <__sinit_lock_acquire+0x8>)
   10572:	f004 bb94 	b.w	14c9e <__retarget_lock_acquire_recursive>
   10576:	bf00      	nop
   10578:	200005f4 	.word	0x200005f4

0001057c <__sinit_lock_release>:
   1057c:	4801      	ldr	r0, [pc, #4]	; (10584 <__sinit_lock_release+0x8>)
   1057e:	f004 bb94 	b.w	14caa <__retarget_lock_release_recursive>
   10582:	bf00      	nop
   10584:	200005f4 	.word	0x200005f4

00010588 <__sinit>:
   10588:	b510      	push	{r4, lr}
   1058a:	4604      	mov	r4, r0
   1058c:	f7ff fff0 	bl	10570 <__sinit_lock_acquire>
   10590:	69a3      	ldr	r3, [r4, #24]
   10592:	b11b      	cbz	r3, 1059c <__sinit+0x14>
   10594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10598:	f7ff bff0 	b.w	1057c <__sinit_lock_release>
   1059c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   105a0:	6523      	str	r3, [r4, #80]	; 0x50
   105a2:	4b13      	ldr	r3, [pc, #76]	; (105f0 <__sinit+0x68>)
   105a4:	4a13      	ldr	r2, [pc, #76]	; (105f4 <__sinit+0x6c>)
   105a6:	681b      	ldr	r3, [r3, #0]
   105a8:	62a2      	str	r2, [r4, #40]	; 0x28
   105aa:	42a3      	cmp	r3, r4
   105ac:	bf04      	itt	eq
   105ae:	2301      	moveq	r3, #1
   105b0:	61a3      	streq	r3, [r4, #24]
   105b2:	4620      	mov	r0, r4
   105b4:	f000 f820 	bl	105f8 <__sfp>
   105b8:	6060      	str	r0, [r4, #4]
   105ba:	4620      	mov	r0, r4
   105bc:	f000 f81c 	bl	105f8 <__sfp>
   105c0:	60a0      	str	r0, [r4, #8]
   105c2:	4620      	mov	r0, r4
   105c4:	f000 f818 	bl	105f8 <__sfp>
   105c8:	2200      	movs	r2, #0
   105ca:	60e0      	str	r0, [r4, #12]
   105cc:	2104      	movs	r1, #4
   105ce:	6860      	ldr	r0, [r4, #4]
   105d0:	f7ff ff98 	bl	10504 <std>
   105d4:	68a0      	ldr	r0, [r4, #8]
   105d6:	2201      	movs	r2, #1
   105d8:	2109      	movs	r1, #9
   105da:	f7ff ff93 	bl	10504 <std>
   105de:	68e0      	ldr	r0, [r4, #12]
   105e0:	2202      	movs	r2, #2
   105e2:	2112      	movs	r1, #18
   105e4:	f7ff ff8e 	bl	10504 <std>
   105e8:	2301      	movs	r3, #1
   105ea:	61a3      	str	r3, [r4, #24]
   105ec:	e7d2      	b.n	10594 <__sinit+0xc>
   105ee:	bf00      	nop
   105f0:	0003f858 	.word	0x0003f858
   105f4:	0001054d 	.word	0x0001054d

000105f8 <__sfp>:
   105f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105fa:	4607      	mov	r7, r0
   105fc:	f7ff ffac 	bl	10558 <__sfp_lock_acquire>
   10600:	4b1e      	ldr	r3, [pc, #120]	; (1067c <__sfp+0x84>)
   10602:	681e      	ldr	r6, [r3, #0]
   10604:	69b3      	ldr	r3, [r6, #24]
   10606:	b913      	cbnz	r3, 1060e <__sfp+0x16>
   10608:	4630      	mov	r0, r6
   1060a:	f7ff ffbd 	bl	10588 <__sinit>
   1060e:	3648      	adds	r6, #72	; 0x48
   10610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   10614:	3b01      	subs	r3, #1
   10616:	d503      	bpl.n	10620 <__sfp+0x28>
   10618:	6833      	ldr	r3, [r6, #0]
   1061a:	b30b      	cbz	r3, 10660 <__sfp+0x68>
   1061c:	6836      	ldr	r6, [r6, #0]
   1061e:	e7f7      	b.n	10610 <__sfp+0x18>
   10620:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   10624:	b9d5      	cbnz	r5, 1065c <__sfp+0x64>
   10626:	4b16      	ldr	r3, [pc, #88]	; (10680 <__sfp+0x88>)
   10628:	60e3      	str	r3, [r4, #12]
   1062a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1062e:	6665      	str	r5, [r4, #100]	; 0x64
   10630:	f004 fb2b 	bl	14c8a <__retarget_lock_init_recursive>
   10634:	f7ff ff96 	bl	10564 <__sfp_lock_release>
   10638:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1063c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   10640:	6025      	str	r5, [r4, #0]
   10642:	61a5      	str	r5, [r4, #24]
   10644:	2208      	movs	r2, #8
   10646:	4629      	mov	r1, r5
   10648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1064c:	f005 f9b5 	bl	159ba <memset>
   10650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   10654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   10658:	4620      	mov	r0, r4
   1065a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1065c:	3468      	adds	r4, #104	; 0x68
   1065e:	e7d9      	b.n	10614 <__sfp+0x1c>
   10660:	2104      	movs	r1, #4
   10662:	4638      	mov	r0, r7
   10664:	f005 fbea 	bl	15e3c <__sfmoreglue>
   10668:	4604      	mov	r4, r0
   1066a:	6030      	str	r0, [r6, #0]
   1066c:	2800      	cmp	r0, #0
   1066e:	d1d5      	bne.n	1061c <__sfp+0x24>
   10670:	f7ff ff78 	bl	10564 <__sfp_lock_release>
   10674:	230c      	movs	r3, #12
   10676:	603b      	str	r3, [r7, #0]
   10678:	e7ee      	b.n	10658 <__sfp+0x60>
   1067a:	bf00      	nop
   1067c:	0003f858 	.word	0x0003f858
   10680:	ffff0001 	.word	0xffff0001

00010684 <_localeconv_r>:
   10684:	4800      	ldr	r0, [pc, #0]	; (10688 <_localeconv_r+0x4>)
   10686:	4770      	bx	lr
   10688:	200004d8 	.word	0x200004d8

0001068c <__smakebuf_r>:
   1068c:	898b      	ldrh	r3, [r1, #12]
   1068e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10690:	079d      	lsls	r5, r3, #30
   10692:	4606      	mov	r6, r0
   10694:	460c      	mov	r4, r1
   10696:	d507      	bpl.n	106a8 <__smakebuf_r+0x1c>
   10698:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1069c:	6023      	str	r3, [r4, #0]
   1069e:	6123      	str	r3, [r4, #16]
   106a0:	2301      	movs	r3, #1
   106a2:	6163      	str	r3, [r4, #20]
   106a4:	b002      	add	sp, #8
   106a6:	bd70      	pop	{r4, r5, r6, pc}
   106a8:	ab01      	add	r3, sp, #4
   106aa:	466a      	mov	r2, sp
   106ac:	f005 fbfb 	bl	15ea6 <__swhatbuf_r>
   106b0:	9900      	ldr	r1, [sp, #0]
   106b2:	4605      	mov	r5, r0
   106b4:	4630      	mov	r0, r6
   106b6:	f7fe ffa7 	bl	f608 <_malloc_r>
   106ba:	b948      	cbnz	r0, 106d0 <__smakebuf_r+0x44>
   106bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   106c0:	059a      	lsls	r2, r3, #22
   106c2:	d4ef      	bmi.n	106a4 <__smakebuf_r+0x18>
   106c4:	f023 0303 	bic.w	r3, r3, #3
   106c8:	f043 0302 	orr.w	r3, r3, #2
   106cc:	81a3      	strh	r3, [r4, #12]
   106ce:	e7e3      	b.n	10698 <__smakebuf_r+0xc>
   106d0:	4b0d      	ldr	r3, [pc, #52]	; (10708 <__smakebuf_r+0x7c>)
   106d2:	62b3      	str	r3, [r6, #40]	; 0x28
   106d4:	89a3      	ldrh	r3, [r4, #12]
   106d6:	6020      	str	r0, [r4, #0]
   106d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   106dc:	81a3      	strh	r3, [r4, #12]
   106de:	9b00      	ldr	r3, [sp, #0]
   106e0:	6163      	str	r3, [r4, #20]
   106e2:	9b01      	ldr	r3, [sp, #4]
   106e4:	6120      	str	r0, [r4, #16]
   106e6:	b15b      	cbz	r3, 10700 <__smakebuf_r+0x74>
   106e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   106ec:	4630      	mov	r0, r6
   106ee:	f000 fc65 	bl	10fbc <_isatty_r>
   106f2:	b128      	cbz	r0, 10700 <__smakebuf_r+0x74>
   106f4:	89a3      	ldrh	r3, [r4, #12]
   106f6:	f023 0303 	bic.w	r3, r3, #3
   106fa:	f043 0301 	orr.w	r3, r3, #1
   106fe:	81a3      	strh	r3, [r4, #12]
   10700:	89a0      	ldrh	r0, [r4, #12]
   10702:	4305      	orrs	r5, r0
   10704:	81a5      	strh	r5, [r4, #12]
   10706:	e7cd      	b.n	106a4 <__smakebuf_r+0x18>
   10708:	0001054d 	.word	0x0001054d

0001070c <__malloc_lock>:
   1070c:	4801      	ldr	r0, [pc, #4]	; (10714 <__malloc_lock+0x8>)
   1070e:	f004 bac6 	b.w	14c9e <__retarget_lock_acquire_recursive>
   10712:	bf00      	nop
   10714:	200005cc 	.word	0x200005cc

00010718 <__malloc_unlock>:
   10718:	4801      	ldr	r0, [pc, #4]	; (10720 <__malloc_unlock+0x8>)
   1071a:	f004 bac6 	b.w	14caa <__retarget_lock_release_recursive>
   1071e:	bf00      	nop
   10720:	200005cc 	.word	0x200005cc

00010724 <_Balloc>:
   10724:	b570      	push	{r4, r5, r6, lr}
   10726:	6a46      	ldr	r6, [r0, #36]	; 0x24
   10728:	4604      	mov	r4, r0
   1072a:	460d      	mov	r5, r1
   1072c:	b976      	cbnz	r6, 1074c <_Balloc+0x28>
   1072e:	2010      	movs	r0, #16
   10730:	f7fe ff0e 	bl	f550 <malloc>
   10734:	4602      	mov	r2, r0
   10736:	6260      	str	r0, [r4, #36]	; 0x24
   10738:	b920      	cbnz	r0, 10744 <_Balloc+0x20>
   1073a:	4b18      	ldr	r3, [pc, #96]	; (1079c <_Balloc+0x78>)
   1073c:	4818      	ldr	r0, [pc, #96]	; (107a0 <_Balloc+0x7c>)
   1073e:	2166      	movs	r1, #102	; 0x66
   10740:	f7fe fece 	bl	f4e0 <__assert_func>
   10744:	e9c0 6601 	strd	r6, r6, [r0, #4]
   10748:	6006      	str	r6, [r0, #0]
   1074a:	60c6      	str	r6, [r0, #12]
   1074c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1074e:	68f3      	ldr	r3, [r6, #12]
   10750:	b183      	cbz	r3, 10774 <_Balloc+0x50>
   10752:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10754:	68db      	ldr	r3, [r3, #12]
   10756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1075a:	b9b8      	cbnz	r0, 1078c <_Balloc+0x68>
   1075c:	2101      	movs	r1, #1
   1075e:	fa01 f605 	lsl.w	r6, r1, r5
   10762:	1d72      	adds	r2, r6, #5
   10764:	0092      	lsls	r2, r2, #2
   10766:	4620      	mov	r0, r4
   10768:	f005 f92f 	bl	159ca <_calloc_r>
   1076c:	b160      	cbz	r0, 10788 <_Balloc+0x64>
   1076e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   10772:	e00e      	b.n	10792 <_Balloc+0x6e>
   10774:	2221      	movs	r2, #33	; 0x21
   10776:	2104      	movs	r1, #4
   10778:	4620      	mov	r0, r4
   1077a:	f005 f926 	bl	159ca <_calloc_r>
   1077e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10780:	60f0      	str	r0, [r6, #12]
   10782:	68db      	ldr	r3, [r3, #12]
   10784:	2b00      	cmp	r3, #0
   10786:	d1e4      	bne.n	10752 <_Balloc+0x2e>
   10788:	2000      	movs	r0, #0
   1078a:	bd70      	pop	{r4, r5, r6, pc}
   1078c:	6802      	ldr	r2, [r0, #0]
   1078e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   10792:	2300      	movs	r3, #0
   10794:	e9c0 3303 	strd	r3, r3, [r0, #12]
   10798:	e7f7      	b.n	1078a <_Balloc+0x66>
   1079a:	bf00      	nop
   1079c:	00046161 	.word	0x00046161
   107a0:	000461e5 	.word	0x000461e5

000107a4 <_Bfree>:
   107a4:	b570      	push	{r4, r5, r6, lr}
   107a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   107a8:	4605      	mov	r5, r0
   107aa:	460c      	mov	r4, r1
   107ac:	b976      	cbnz	r6, 107cc <_Bfree+0x28>
   107ae:	2010      	movs	r0, #16
   107b0:	f7fe fece 	bl	f550 <malloc>
   107b4:	4602      	mov	r2, r0
   107b6:	6268      	str	r0, [r5, #36]	; 0x24
   107b8:	b920      	cbnz	r0, 107c4 <_Bfree+0x20>
   107ba:	4b09      	ldr	r3, [pc, #36]	; (107e0 <_Bfree+0x3c>)
   107bc:	4809      	ldr	r0, [pc, #36]	; (107e4 <_Bfree+0x40>)
   107be:	218a      	movs	r1, #138	; 0x8a
   107c0:	f7fe fe8e 	bl	f4e0 <__assert_func>
   107c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   107c8:	6006      	str	r6, [r0, #0]
   107ca:	60c6      	str	r6, [r0, #12]
   107cc:	b13c      	cbz	r4, 107de <_Bfree+0x3a>
   107ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   107d0:	6862      	ldr	r2, [r4, #4]
   107d2:	68db      	ldr	r3, [r3, #12]
   107d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   107d8:	6021      	str	r1, [r4, #0]
   107da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   107de:	bd70      	pop	{r4, r5, r6, pc}
   107e0:	00046161 	.word	0x00046161
   107e4:	000461e5 	.word	0x000461e5

000107e8 <__multadd>:
   107e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107ec:	690d      	ldr	r5, [r1, #16]
   107ee:	4607      	mov	r7, r0
   107f0:	460c      	mov	r4, r1
   107f2:	461e      	mov	r6, r3
   107f4:	f101 0c14 	add.w	ip, r1, #20
   107f8:	2000      	movs	r0, #0
   107fa:	f8dc 3000 	ldr.w	r3, [ip]
   107fe:	b299      	uxth	r1, r3
   10800:	fb02 6101 	mla	r1, r2, r1, r6
   10804:	0c1e      	lsrs	r6, r3, #16
   10806:	0c0b      	lsrs	r3, r1, #16
   10808:	fb02 3306 	mla	r3, r2, r6, r3
   1080c:	b289      	uxth	r1, r1
   1080e:	3001      	adds	r0, #1
   10810:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   10814:	4285      	cmp	r5, r0
   10816:	f84c 1b04 	str.w	r1, [ip], #4
   1081a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1081e:	dcec      	bgt.n	107fa <__multadd+0x12>
   10820:	b30e      	cbz	r6, 10866 <__multadd+0x7e>
   10822:	68a3      	ldr	r3, [r4, #8]
   10824:	42ab      	cmp	r3, r5
   10826:	dc19      	bgt.n	1085c <__multadd+0x74>
   10828:	6861      	ldr	r1, [r4, #4]
   1082a:	4638      	mov	r0, r7
   1082c:	3101      	adds	r1, #1
   1082e:	f7ff ff79 	bl	10724 <_Balloc>
   10832:	4680      	mov	r8, r0
   10834:	b928      	cbnz	r0, 10842 <__multadd+0x5a>
   10836:	4602      	mov	r2, r0
   10838:	4b0c      	ldr	r3, [pc, #48]	; (1086c <__multadd+0x84>)
   1083a:	480d      	ldr	r0, [pc, #52]	; (10870 <__multadd+0x88>)
   1083c:	21b5      	movs	r1, #181	; 0xb5
   1083e:	f7fe fe4f 	bl	f4e0 <__assert_func>
   10842:	6922      	ldr	r2, [r4, #16]
   10844:	3202      	adds	r2, #2
   10846:	f104 010c 	add.w	r1, r4, #12
   1084a:	0092      	lsls	r2, r2, #2
   1084c:	300c      	adds	r0, #12
   1084e:	f005 f88c 	bl	1596a <memcpy>
   10852:	4621      	mov	r1, r4
   10854:	4638      	mov	r0, r7
   10856:	f7ff ffa5 	bl	107a4 <_Bfree>
   1085a:	4644      	mov	r4, r8
   1085c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   10860:	3501      	adds	r5, #1
   10862:	615e      	str	r6, [r3, #20]
   10864:	6125      	str	r5, [r4, #16]
   10866:	4620      	mov	r0, r4
   10868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1086c:	000461d4 	.word	0x000461d4
   10870:	000461e5 	.word	0x000461e5

00010874 <__i2b>:
   10874:	b510      	push	{r4, lr}
   10876:	460c      	mov	r4, r1
   10878:	2101      	movs	r1, #1
   1087a:	f7ff ff53 	bl	10724 <_Balloc>
   1087e:	4602      	mov	r2, r0
   10880:	b928      	cbnz	r0, 1088e <__i2b+0x1a>
   10882:	4b05      	ldr	r3, [pc, #20]	; (10898 <__i2b+0x24>)
   10884:	4805      	ldr	r0, [pc, #20]	; (1089c <__i2b+0x28>)
   10886:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1088a:	f7fe fe29 	bl	f4e0 <__assert_func>
   1088e:	2301      	movs	r3, #1
   10890:	6144      	str	r4, [r0, #20]
   10892:	6103      	str	r3, [r0, #16]
   10894:	bd10      	pop	{r4, pc}
   10896:	bf00      	nop
   10898:	000461d4 	.word	0x000461d4
   1089c:	000461e5 	.word	0x000461e5

000108a0 <__multiply>:
   108a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108a4:	4691      	mov	r9, r2
   108a6:	690a      	ldr	r2, [r1, #16]
   108a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   108ac:	429a      	cmp	r2, r3
   108ae:	bfb8      	it	lt
   108b0:	460b      	movlt	r3, r1
   108b2:	460c      	mov	r4, r1
   108b4:	bfbc      	itt	lt
   108b6:	464c      	movlt	r4, r9
   108b8:	4699      	movlt	r9, r3
   108ba:	6927      	ldr	r7, [r4, #16]
   108bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
   108c0:	68a3      	ldr	r3, [r4, #8]
   108c2:	6861      	ldr	r1, [r4, #4]
   108c4:	eb07 060a 	add.w	r6, r7, sl
   108c8:	42b3      	cmp	r3, r6
   108ca:	b085      	sub	sp, #20
   108cc:	bfb8      	it	lt
   108ce:	3101      	addlt	r1, #1
   108d0:	f7ff ff28 	bl	10724 <_Balloc>
   108d4:	b930      	cbnz	r0, 108e4 <__multiply+0x44>
   108d6:	4602      	mov	r2, r0
   108d8:	4b44      	ldr	r3, [pc, #272]	; (109ec <__multiply+0x14c>)
   108da:	4845      	ldr	r0, [pc, #276]	; (109f0 <__multiply+0x150>)
   108dc:	f240 115d 	movw	r1, #349	; 0x15d
   108e0:	f7fe fdfe 	bl	f4e0 <__assert_func>
   108e4:	f100 0514 	add.w	r5, r0, #20
   108e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   108ec:	462b      	mov	r3, r5
   108ee:	2200      	movs	r2, #0
   108f0:	4543      	cmp	r3, r8
   108f2:	d321      	bcc.n	10938 <__multiply+0x98>
   108f4:	f104 0314 	add.w	r3, r4, #20
   108f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   108fc:	f109 0314 	add.w	r3, r9, #20
   10900:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   10904:	9202      	str	r2, [sp, #8]
   10906:	1b3a      	subs	r2, r7, r4
   10908:	3a15      	subs	r2, #21
   1090a:	f022 0203 	bic.w	r2, r2, #3
   1090e:	3204      	adds	r2, #4
   10910:	f104 0115 	add.w	r1, r4, #21
   10914:	428f      	cmp	r7, r1
   10916:	bf38      	it	cc
   10918:	2204      	movcc	r2, #4
   1091a:	9201      	str	r2, [sp, #4]
   1091c:	9a02      	ldr	r2, [sp, #8]
   1091e:	9303      	str	r3, [sp, #12]
   10920:	429a      	cmp	r2, r3
   10922:	d80c      	bhi.n	1093e <__multiply+0x9e>
   10924:	2e00      	cmp	r6, #0
   10926:	dd03      	ble.n	10930 <__multiply+0x90>
   10928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1092c:	2b00      	cmp	r3, #0
   1092e:	d05a      	beq.n	109e6 <__multiply+0x146>
   10930:	6106      	str	r6, [r0, #16]
   10932:	b005      	add	sp, #20
   10934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10938:	f843 2b04 	str.w	r2, [r3], #4
   1093c:	e7d8      	b.n	108f0 <__multiply+0x50>
   1093e:	f8b3 a000 	ldrh.w	sl, [r3]
   10942:	f1ba 0f00 	cmp.w	sl, #0
   10946:	d024      	beq.n	10992 <__multiply+0xf2>
   10948:	f104 0e14 	add.w	lr, r4, #20
   1094c:	46a9      	mov	r9, r5
   1094e:	f04f 0c00 	mov.w	ip, #0
   10952:	f85e 2b04 	ldr.w	r2, [lr], #4
   10956:	f8d9 1000 	ldr.w	r1, [r9]
   1095a:	fa1f fb82 	uxth.w	fp, r2
   1095e:	b289      	uxth	r1, r1
   10960:	fb0a 110b 	mla	r1, sl, fp, r1
   10964:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   10968:	f8d9 2000 	ldr.w	r2, [r9]
   1096c:	4461      	add	r1, ip
   1096e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   10972:	fb0a c20b 	mla	r2, sl, fp, ip
   10976:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   1097a:	b289      	uxth	r1, r1
   1097c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   10980:	4577      	cmp	r7, lr
   10982:	f849 1b04 	str.w	r1, [r9], #4
   10986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   1098a:	d8e2      	bhi.n	10952 <__multiply+0xb2>
   1098c:	9a01      	ldr	r2, [sp, #4]
   1098e:	f845 c002 	str.w	ip, [r5, r2]
   10992:	9a03      	ldr	r2, [sp, #12]
   10994:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   10998:	3304      	adds	r3, #4
   1099a:	f1b9 0f00 	cmp.w	r9, #0
   1099e:	d020      	beq.n	109e2 <__multiply+0x142>
   109a0:	6829      	ldr	r1, [r5, #0]
   109a2:	f104 0c14 	add.w	ip, r4, #20
   109a6:	46ae      	mov	lr, r5
   109a8:	f04f 0a00 	mov.w	sl, #0
   109ac:	f8bc b000 	ldrh.w	fp, [ip]
   109b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
   109b4:	fb09 220b 	mla	r2, r9, fp, r2
   109b8:	4492      	add	sl, r2
   109ba:	b289      	uxth	r1, r1
   109bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   109c0:	f84e 1b04 	str.w	r1, [lr], #4
   109c4:	f85c 2b04 	ldr.w	r2, [ip], #4
   109c8:	f8be 1000 	ldrh.w	r1, [lr]
   109cc:	0c12      	lsrs	r2, r2, #16
   109ce:	fb09 1102 	mla	r1, r9, r2, r1
   109d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   109d6:	4567      	cmp	r7, ip
   109d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   109dc:	d8e6      	bhi.n	109ac <__multiply+0x10c>
   109de:	9a01      	ldr	r2, [sp, #4]
   109e0:	50a9      	str	r1, [r5, r2]
   109e2:	3504      	adds	r5, #4
   109e4:	e79a      	b.n	1091c <__multiply+0x7c>
   109e6:	3e01      	subs	r6, #1
   109e8:	e79c      	b.n	10924 <__multiply+0x84>
   109ea:	bf00      	nop
   109ec:	000461d4 	.word	0x000461d4
   109f0:	000461e5 	.word	0x000461e5

000109f4 <__pow5mult>:
   109f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   109f8:	4615      	mov	r5, r2
   109fa:	f012 0203 	ands.w	r2, r2, #3
   109fe:	4606      	mov	r6, r0
   10a00:	460f      	mov	r7, r1
   10a02:	d007      	beq.n	10a14 <__pow5mult+0x20>
   10a04:	4c25      	ldr	r4, [pc, #148]	; (10a9c <__pow5mult+0xa8>)
   10a06:	3a01      	subs	r2, #1
   10a08:	2300      	movs	r3, #0
   10a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   10a0e:	f7ff feeb 	bl	107e8 <__multadd>
   10a12:	4607      	mov	r7, r0
   10a14:	10ad      	asrs	r5, r5, #2
   10a16:	d03d      	beq.n	10a94 <__pow5mult+0xa0>
   10a18:	6a74      	ldr	r4, [r6, #36]	; 0x24
   10a1a:	b97c      	cbnz	r4, 10a3c <__pow5mult+0x48>
   10a1c:	2010      	movs	r0, #16
   10a1e:	f7fe fd97 	bl	f550 <malloc>
   10a22:	4602      	mov	r2, r0
   10a24:	6270      	str	r0, [r6, #36]	; 0x24
   10a26:	b928      	cbnz	r0, 10a34 <__pow5mult+0x40>
   10a28:	4b1d      	ldr	r3, [pc, #116]	; (10aa0 <__pow5mult+0xac>)
   10a2a:	481e      	ldr	r0, [pc, #120]	; (10aa4 <__pow5mult+0xb0>)
   10a2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   10a30:	f7fe fd56 	bl	f4e0 <__assert_func>
   10a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
   10a38:	6004      	str	r4, [r0, #0]
   10a3a:	60c4      	str	r4, [r0, #12]
   10a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   10a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
   10a44:	b94c      	cbnz	r4, 10a5a <__pow5mult+0x66>
   10a46:	f240 2171 	movw	r1, #625	; 0x271
   10a4a:	4630      	mov	r0, r6
   10a4c:	f7ff ff12 	bl	10874 <__i2b>
   10a50:	2300      	movs	r3, #0
   10a52:	f8c8 0008 	str.w	r0, [r8, #8]
   10a56:	4604      	mov	r4, r0
   10a58:	6003      	str	r3, [r0, #0]
   10a5a:	f04f 0900 	mov.w	r9, #0
   10a5e:	07eb      	lsls	r3, r5, #31
   10a60:	d50a      	bpl.n	10a78 <__pow5mult+0x84>
   10a62:	4639      	mov	r1, r7
   10a64:	4622      	mov	r2, r4
   10a66:	4630      	mov	r0, r6
   10a68:	f7ff ff1a 	bl	108a0 <__multiply>
   10a6c:	4639      	mov	r1, r7
   10a6e:	4680      	mov	r8, r0
   10a70:	4630      	mov	r0, r6
   10a72:	f7ff fe97 	bl	107a4 <_Bfree>
   10a76:	4647      	mov	r7, r8
   10a78:	106d      	asrs	r5, r5, #1
   10a7a:	d00b      	beq.n	10a94 <__pow5mult+0xa0>
   10a7c:	6820      	ldr	r0, [r4, #0]
   10a7e:	b938      	cbnz	r0, 10a90 <__pow5mult+0x9c>
   10a80:	4622      	mov	r2, r4
   10a82:	4621      	mov	r1, r4
   10a84:	4630      	mov	r0, r6
   10a86:	f7ff ff0b 	bl	108a0 <__multiply>
   10a8a:	6020      	str	r0, [r4, #0]
   10a8c:	f8c0 9000 	str.w	r9, [r0]
   10a90:	4604      	mov	r4, r0
   10a92:	e7e4      	b.n	10a5e <__pow5mult+0x6a>
   10a94:	4638      	mov	r0, r7
   10a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10a9a:	bf00      	nop
   10a9c:	0003f8bc 	.word	0x0003f8bc
   10aa0:	00046161 	.word	0x00046161
   10aa4:	000461e5 	.word	0x000461e5

00010aa8 <__lshift>:
   10aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10aac:	460c      	mov	r4, r1
   10aae:	6849      	ldr	r1, [r1, #4]
   10ab0:	6923      	ldr	r3, [r4, #16]
   10ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   10ab6:	68a3      	ldr	r3, [r4, #8]
   10ab8:	4607      	mov	r7, r0
   10aba:	4691      	mov	r9, r2
   10abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
   10ac0:	f108 0601 	add.w	r6, r8, #1
   10ac4:	42b3      	cmp	r3, r6
   10ac6:	db0b      	blt.n	10ae0 <__lshift+0x38>
   10ac8:	4638      	mov	r0, r7
   10aca:	f7ff fe2b 	bl	10724 <_Balloc>
   10ace:	4605      	mov	r5, r0
   10ad0:	b948      	cbnz	r0, 10ae6 <__lshift+0x3e>
   10ad2:	4602      	mov	r2, r0
   10ad4:	4b2a      	ldr	r3, [pc, #168]	; (10b80 <__lshift+0xd8>)
   10ad6:	482b      	ldr	r0, [pc, #172]	; (10b84 <__lshift+0xdc>)
   10ad8:	f240 11d9 	movw	r1, #473	; 0x1d9
   10adc:	f7fe fd00 	bl	f4e0 <__assert_func>
   10ae0:	3101      	adds	r1, #1
   10ae2:	005b      	lsls	r3, r3, #1
   10ae4:	e7ee      	b.n	10ac4 <__lshift+0x1c>
   10ae6:	2300      	movs	r3, #0
   10ae8:	f100 0114 	add.w	r1, r0, #20
   10aec:	f100 0210 	add.w	r2, r0, #16
   10af0:	4618      	mov	r0, r3
   10af2:	4553      	cmp	r3, sl
   10af4:	db37      	blt.n	10b66 <__lshift+0xbe>
   10af6:	6920      	ldr	r0, [r4, #16]
   10af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   10afc:	f104 0314 	add.w	r3, r4, #20
   10b00:	f019 091f 	ands.w	r9, r9, #31
   10b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   10b08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   10b0c:	d02f      	beq.n	10b6e <__lshift+0xc6>
   10b0e:	f1c9 0e20 	rsb	lr, r9, #32
   10b12:	468a      	mov	sl, r1
   10b14:	f04f 0c00 	mov.w	ip, #0
   10b18:	681a      	ldr	r2, [r3, #0]
   10b1a:	fa02 f209 	lsl.w	r2, r2, r9
   10b1e:	ea42 020c 	orr.w	r2, r2, ip
   10b22:	f84a 2b04 	str.w	r2, [sl], #4
   10b26:	f853 2b04 	ldr.w	r2, [r3], #4
   10b2a:	4298      	cmp	r0, r3
   10b2c:	fa22 fc0e 	lsr.w	ip, r2, lr
   10b30:	d8f2      	bhi.n	10b18 <__lshift+0x70>
   10b32:	1b03      	subs	r3, r0, r4
   10b34:	3b15      	subs	r3, #21
   10b36:	f023 0303 	bic.w	r3, r3, #3
   10b3a:	3304      	adds	r3, #4
   10b3c:	f104 0215 	add.w	r2, r4, #21
   10b40:	4290      	cmp	r0, r2
   10b42:	bf38      	it	cc
   10b44:	2304      	movcc	r3, #4
   10b46:	f841 c003 	str.w	ip, [r1, r3]
   10b4a:	f1bc 0f00 	cmp.w	ip, #0
   10b4e:	d001      	beq.n	10b54 <__lshift+0xac>
   10b50:	f108 0602 	add.w	r6, r8, #2
   10b54:	3e01      	subs	r6, #1
   10b56:	4638      	mov	r0, r7
   10b58:	612e      	str	r6, [r5, #16]
   10b5a:	4621      	mov	r1, r4
   10b5c:	f7ff fe22 	bl	107a4 <_Bfree>
   10b60:	4628      	mov	r0, r5
   10b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10b66:	f842 0f04 	str.w	r0, [r2, #4]!
   10b6a:	3301      	adds	r3, #1
   10b6c:	e7c1      	b.n	10af2 <__lshift+0x4a>
   10b6e:	3904      	subs	r1, #4
   10b70:	f853 2b04 	ldr.w	r2, [r3], #4
   10b74:	f841 2f04 	str.w	r2, [r1, #4]!
   10b78:	4298      	cmp	r0, r3
   10b7a:	d8f9      	bhi.n	10b70 <__lshift+0xc8>
   10b7c:	e7ea      	b.n	10b54 <__lshift+0xac>
   10b7e:	bf00      	nop
   10b80:	000461d4 	.word	0x000461d4
   10b84:	000461e5 	.word	0x000461e5

00010b88 <__mdiff>:
   10b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b8c:	460c      	mov	r4, r1
   10b8e:	4606      	mov	r6, r0
   10b90:	4611      	mov	r1, r2
   10b92:	4620      	mov	r0, r4
   10b94:	4690      	mov	r8, r2
   10b96:	f005 f9fa 	bl	15f8e <__mcmp>
   10b9a:	1e05      	subs	r5, r0, #0
   10b9c:	d110      	bne.n	10bc0 <__mdiff+0x38>
   10b9e:	4629      	mov	r1, r5
   10ba0:	4630      	mov	r0, r6
   10ba2:	f7ff fdbf 	bl	10724 <_Balloc>
   10ba6:	b930      	cbnz	r0, 10bb6 <__mdiff+0x2e>
   10ba8:	4b3a      	ldr	r3, [pc, #232]	; (10c94 <__mdiff+0x10c>)
   10baa:	4602      	mov	r2, r0
   10bac:	f240 2132 	movw	r1, #562	; 0x232
   10bb0:	4839      	ldr	r0, [pc, #228]	; (10c98 <__mdiff+0x110>)
   10bb2:	f7fe fc95 	bl	f4e0 <__assert_func>
   10bb6:	2301      	movs	r3, #1
   10bb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
   10bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bc0:	bfa4      	itt	ge
   10bc2:	4643      	movge	r3, r8
   10bc4:	46a0      	movge	r8, r4
   10bc6:	4630      	mov	r0, r6
   10bc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   10bcc:	bfa6      	itte	ge
   10bce:	461c      	movge	r4, r3
   10bd0:	2500      	movge	r5, #0
   10bd2:	2501      	movlt	r5, #1
   10bd4:	f7ff fda6 	bl	10724 <_Balloc>
   10bd8:	b920      	cbnz	r0, 10be4 <__mdiff+0x5c>
   10bda:	4b2e      	ldr	r3, [pc, #184]	; (10c94 <__mdiff+0x10c>)
   10bdc:	4602      	mov	r2, r0
   10bde:	f44f 7110 	mov.w	r1, #576	; 0x240
   10be2:	e7e5      	b.n	10bb0 <__mdiff+0x28>
   10be4:	f8d8 7010 	ldr.w	r7, [r8, #16]
   10be8:	6926      	ldr	r6, [r4, #16]
   10bea:	60c5      	str	r5, [r0, #12]
   10bec:	f104 0914 	add.w	r9, r4, #20
   10bf0:	f108 0514 	add.w	r5, r8, #20
   10bf4:	f100 0e14 	add.w	lr, r0, #20
   10bf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   10bfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   10c00:	f108 0210 	add.w	r2, r8, #16
   10c04:	46f2      	mov	sl, lr
   10c06:	2100      	movs	r1, #0
   10c08:	f859 3b04 	ldr.w	r3, [r9], #4
   10c0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
   10c10:	fa1f f883 	uxth.w	r8, r3
   10c14:	fa11 f18b 	uxtah	r1, r1, fp
   10c18:	0c1b      	lsrs	r3, r3, #16
   10c1a:	eba1 0808 	sub.w	r8, r1, r8
   10c1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   10c22:	eb03 4328 	add.w	r3, r3, r8, asr #16
   10c26:	fa1f f888 	uxth.w	r8, r8
   10c2a:	1419      	asrs	r1, r3, #16
   10c2c:	454e      	cmp	r6, r9
   10c2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   10c32:	f84a 3b04 	str.w	r3, [sl], #4
   10c36:	d8e7      	bhi.n	10c08 <__mdiff+0x80>
   10c38:	1b33      	subs	r3, r6, r4
   10c3a:	3b15      	subs	r3, #21
   10c3c:	f023 0303 	bic.w	r3, r3, #3
   10c40:	3304      	adds	r3, #4
   10c42:	3415      	adds	r4, #21
   10c44:	42a6      	cmp	r6, r4
   10c46:	bf38      	it	cc
   10c48:	2304      	movcc	r3, #4
   10c4a:	441d      	add	r5, r3
   10c4c:	4473      	add	r3, lr
   10c4e:	469e      	mov	lr, r3
   10c50:	462e      	mov	r6, r5
   10c52:	4566      	cmp	r6, ip
   10c54:	d30e      	bcc.n	10c74 <__mdiff+0xec>
   10c56:	f10c 0203 	add.w	r2, ip, #3
   10c5a:	1b52      	subs	r2, r2, r5
   10c5c:	f022 0203 	bic.w	r2, r2, #3
   10c60:	3d03      	subs	r5, #3
   10c62:	45ac      	cmp	ip, r5
   10c64:	bf38      	it	cc
   10c66:	2200      	movcc	r2, #0
   10c68:	441a      	add	r2, r3
   10c6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   10c6e:	b17b      	cbz	r3, 10c90 <__mdiff+0x108>
   10c70:	6107      	str	r7, [r0, #16]
   10c72:	e7a3      	b.n	10bbc <__mdiff+0x34>
   10c74:	f856 8b04 	ldr.w	r8, [r6], #4
   10c78:	fa11 f288 	uxtah	r2, r1, r8
   10c7c:	1414      	asrs	r4, r2, #16
   10c7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   10c82:	b292      	uxth	r2, r2
   10c84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   10c88:	f84e 2b04 	str.w	r2, [lr], #4
   10c8c:	1421      	asrs	r1, r4, #16
   10c8e:	e7e0      	b.n	10c52 <__mdiff+0xca>
   10c90:	3f01      	subs	r7, #1
   10c92:	e7ea      	b.n	10c6a <__mdiff+0xe2>
   10c94:	000461d4 	.word	0x000461d4
   10c98:	000461e5 	.word	0x000461e5

00010c9c <__d2b>:
   10c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10ca0:	4689      	mov	r9, r1
   10ca2:	2101      	movs	r1, #1
   10ca4:	ec57 6b10 	vmov	r6, r7, d0
   10ca8:	4690      	mov	r8, r2
   10caa:	f7ff fd3b 	bl	10724 <_Balloc>
   10cae:	4604      	mov	r4, r0
   10cb0:	b930      	cbnz	r0, 10cc0 <__d2b+0x24>
   10cb2:	4602      	mov	r2, r0
   10cb4:	4b25      	ldr	r3, [pc, #148]	; (10d4c <__d2b+0xb0>)
   10cb6:	4826      	ldr	r0, [pc, #152]	; (10d50 <__d2b+0xb4>)
   10cb8:	f240 310a 	movw	r1, #778	; 0x30a
   10cbc:	f7fe fc10 	bl	f4e0 <__assert_func>
   10cc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
   10cc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   10cc8:	bb35      	cbnz	r5, 10d18 <__d2b+0x7c>
   10cca:	2e00      	cmp	r6, #0
   10ccc:	9301      	str	r3, [sp, #4]
   10cce:	d028      	beq.n	10d22 <__d2b+0x86>
   10cd0:	4668      	mov	r0, sp
   10cd2:	9600      	str	r6, [sp, #0]
   10cd4:	f005 f92c 	bl	15f30 <__lo0bits>
   10cd8:	9900      	ldr	r1, [sp, #0]
   10cda:	b300      	cbz	r0, 10d1e <__d2b+0x82>
   10cdc:	9a01      	ldr	r2, [sp, #4]
   10cde:	f1c0 0320 	rsb	r3, r0, #32
   10ce2:	fa02 f303 	lsl.w	r3, r2, r3
   10ce6:	430b      	orrs	r3, r1
   10ce8:	40c2      	lsrs	r2, r0
   10cea:	6163      	str	r3, [r4, #20]
   10cec:	9201      	str	r2, [sp, #4]
   10cee:	9b01      	ldr	r3, [sp, #4]
   10cf0:	61a3      	str	r3, [r4, #24]
   10cf2:	2b00      	cmp	r3, #0
   10cf4:	bf14      	ite	ne
   10cf6:	2202      	movne	r2, #2
   10cf8:	2201      	moveq	r2, #1
   10cfa:	6122      	str	r2, [r4, #16]
   10cfc:	b1d5      	cbz	r5, 10d34 <__d2b+0x98>
   10cfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   10d02:	4405      	add	r5, r0
   10d04:	f8c9 5000 	str.w	r5, [r9]
   10d08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   10d0c:	f8c8 0000 	str.w	r0, [r8]
   10d10:	4620      	mov	r0, r4
   10d12:	b003      	add	sp, #12
   10d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10d1c:	e7d5      	b.n	10cca <__d2b+0x2e>
   10d1e:	6161      	str	r1, [r4, #20]
   10d20:	e7e5      	b.n	10cee <__d2b+0x52>
   10d22:	a801      	add	r0, sp, #4
   10d24:	f005 f904 	bl	15f30 <__lo0bits>
   10d28:	9b01      	ldr	r3, [sp, #4]
   10d2a:	6163      	str	r3, [r4, #20]
   10d2c:	2201      	movs	r2, #1
   10d2e:	6122      	str	r2, [r4, #16]
   10d30:	3020      	adds	r0, #32
   10d32:	e7e3      	b.n	10cfc <__d2b+0x60>
   10d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   10d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   10d3c:	f8c9 0000 	str.w	r0, [r9]
   10d40:	6918      	ldr	r0, [r3, #16]
   10d42:	f005 f8d5 	bl	15ef0 <__hi0bits>
   10d46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   10d4a:	e7df      	b.n	10d0c <__d2b+0x70>
   10d4c:	000461d4 	.word	0x000461d4
   10d50:	000461e5 	.word	0x000461e5

00010d54 <_svfiprintf_r>:
   10d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d58:	4698      	mov	r8, r3
   10d5a:	898b      	ldrh	r3, [r1, #12]
   10d5c:	061b      	lsls	r3, r3, #24
   10d5e:	b09d      	sub	sp, #116	; 0x74
   10d60:	4607      	mov	r7, r0
   10d62:	460d      	mov	r5, r1
   10d64:	4614      	mov	r4, r2
   10d66:	d50e      	bpl.n	10d86 <_svfiprintf_r+0x32>
   10d68:	690b      	ldr	r3, [r1, #16]
   10d6a:	b963      	cbnz	r3, 10d86 <_svfiprintf_r+0x32>
   10d6c:	2140      	movs	r1, #64	; 0x40
   10d6e:	f7fe fc4b 	bl	f608 <_malloc_r>
   10d72:	6028      	str	r0, [r5, #0]
   10d74:	6128      	str	r0, [r5, #16]
   10d76:	b920      	cbnz	r0, 10d82 <_svfiprintf_r+0x2e>
   10d78:	230c      	movs	r3, #12
   10d7a:	603b      	str	r3, [r7, #0]
   10d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d80:	e0d1      	b.n	10f26 <_svfiprintf_r+0x1d2>
   10d82:	2340      	movs	r3, #64	; 0x40
   10d84:	616b      	str	r3, [r5, #20]
   10d86:	2300      	movs	r3, #0
   10d88:	9309      	str	r3, [sp, #36]	; 0x24
   10d8a:	2320      	movs	r3, #32
   10d8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   10d90:	f8cd 800c 	str.w	r8, [sp, #12]
   10d94:	2330      	movs	r3, #48	; 0x30
   10d96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 10f40 <_svfiprintf_r+0x1ec>
   10d9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   10d9e:	f04f 0901 	mov.w	r9, #1
   10da2:	4623      	mov	r3, r4
   10da4:	469a      	mov	sl, r3
   10da6:	f813 2b01 	ldrb.w	r2, [r3], #1
   10daa:	b10a      	cbz	r2, 10db0 <_svfiprintf_r+0x5c>
   10dac:	2a25      	cmp	r2, #37	; 0x25
   10dae:	d1f9      	bne.n	10da4 <_svfiprintf_r+0x50>
   10db0:	ebba 0b04 	subs.w	fp, sl, r4
   10db4:	d00b      	beq.n	10dce <_svfiprintf_r+0x7a>
   10db6:	465b      	mov	r3, fp
   10db8:	4622      	mov	r2, r4
   10dba:	4629      	mov	r1, r5
   10dbc:	4638      	mov	r0, r7
   10dbe:	f005 f928 	bl	16012 <__ssputs_r>
   10dc2:	3001      	adds	r0, #1
   10dc4:	f000 80aa 	beq.w	10f1c <_svfiprintf_r+0x1c8>
   10dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10dca:	445a      	add	r2, fp
   10dcc:	9209      	str	r2, [sp, #36]	; 0x24
   10dce:	f89a 3000 	ldrb.w	r3, [sl]
   10dd2:	2b00      	cmp	r3, #0
   10dd4:	f000 80a2 	beq.w	10f1c <_svfiprintf_r+0x1c8>
   10dd8:	2300      	movs	r3, #0
   10dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
   10de2:	f10a 0a01 	add.w	sl, sl, #1
   10de6:	9304      	str	r3, [sp, #16]
   10de8:	9307      	str	r3, [sp, #28]
   10dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   10dee:	931a      	str	r3, [sp, #104]	; 0x68
   10df0:	4654      	mov	r4, sl
   10df2:	2205      	movs	r2, #5
   10df4:	f814 1b01 	ldrb.w	r1, [r4], #1
   10df8:	4851      	ldr	r0, [pc, #324]	; (10f40 <_svfiprintf_r+0x1ec>)
   10dfa:	f7ef f981 	bl	100 <memchr>
   10dfe:	9a04      	ldr	r2, [sp, #16]
   10e00:	b9d8      	cbnz	r0, 10e3a <_svfiprintf_r+0xe6>
   10e02:	06d0      	lsls	r0, r2, #27
   10e04:	bf44      	itt	mi
   10e06:	2320      	movmi	r3, #32
   10e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10e0c:	0711      	lsls	r1, r2, #28
   10e0e:	bf44      	itt	mi
   10e10:	232b      	movmi	r3, #43	; 0x2b
   10e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10e16:	f89a 3000 	ldrb.w	r3, [sl]
   10e1a:	2b2a      	cmp	r3, #42	; 0x2a
   10e1c:	d015      	beq.n	10e4a <_svfiprintf_r+0xf6>
   10e1e:	9a07      	ldr	r2, [sp, #28]
   10e20:	4654      	mov	r4, sl
   10e22:	2000      	movs	r0, #0
   10e24:	f04f 0c0a 	mov.w	ip, #10
   10e28:	4621      	mov	r1, r4
   10e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
   10e2e:	3b30      	subs	r3, #48	; 0x30
   10e30:	2b09      	cmp	r3, #9
   10e32:	d94e      	bls.n	10ed2 <_svfiprintf_r+0x17e>
   10e34:	b1b0      	cbz	r0, 10e64 <_svfiprintf_r+0x110>
   10e36:	9207      	str	r2, [sp, #28]
   10e38:	e014      	b.n	10e64 <_svfiprintf_r+0x110>
   10e3a:	eba0 0308 	sub.w	r3, r0, r8
   10e3e:	fa09 f303 	lsl.w	r3, r9, r3
   10e42:	4313      	orrs	r3, r2
   10e44:	9304      	str	r3, [sp, #16]
   10e46:	46a2      	mov	sl, r4
   10e48:	e7d2      	b.n	10df0 <_svfiprintf_r+0x9c>
   10e4a:	9b03      	ldr	r3, [sp, #12]
   10e4c:	1d19      	adds	r1, r3, #4
   10e4e:	681b      	ldr	r3, [r3, #0]
   10e50:	9103      	str	r1, [sp, #12]
   10e52:	2b00      	cmp	r3, #0
   10e54:	bfbb      	ittet	lt
   10e56:	425b      	neglt	r3, r3
   10e58:	f042 0202 	orrlt.w	r2, r2, #2
   10e5c:	9307      	strge	r3, [sp, #28]
   10e5e:	9307      	strlt	r3, [sp, #28]
   10e60:	bfb8      	it	lt
   10e62:	9204      	strlt	r2, [sp, #16]
   10e64:	7823      	ldrb	r3, [r4, #0]
   10e66:	2b2e      	cmp	r3, #46	; 0x2e
   10e68:	d10c      	bne.n	10e84 <_svfiprintf_r+0x130>
   10e6a:	7863      	ldrb	r3, [r4, #1]
   10e6c:	2b2a      	cmp	r3, #42	; 0x2a
   10e6e:	d135      	bne.n	10edc <_svfiprintf_r+0x188>
   10e70:	9b03      	ldr	r3, [sp, #12]
   10e72:	1d1a      	adds	r2, r3, #4
   10e74:	681b      	ldr	r3, [r3, #0]
   10e76:	9203      	str	r2, [sp, #12]
   10e78:	2b00      	cmp	r3, #0
   10e7a:	bfb8      	it	lt
   10e7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   10e80:	3402      	adds	r4, #2
   10e82:	9305      	str	r3, [sp, #20]
   10e84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 10f50 <_svfiprintf_r+0x1fc>
   10e88:	7821      	ldrb	r1, [r4, #0]
   10e8a:	2203      	movs	r2, #3
   10e8c:	4650      	mov	r0, sl
   10e8e:	f7ef f937 	bl	100 <memchr>
   10e92:	b140      	cbz	r0, 10ea6 <_svfiprintf_r+0x152>
   10e94:	2340      	movs	r3, #64	; 0x40
   10e96:	eba0 000a 	sub.w	r0, r0, sl
   10e9a:	fa03 f000 	lsl.w	r0, r3, r0
   10e9e:	9b04      	ldr	r3, [sp, #16]
   10ea0:	4303      	orrs	r3, r0
   10ea2:	3401      	adds	r4, #1
   10ea4:	9304      	str	r3, [sp, #16]
   10ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
   10eaa:	4826      	ldr	r0, [pc, #152]	; (10f44 <_svfiprintf_r+0x1f0>)
   10eac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   10eb0:	2206      	movs	r2, #6
   10eb2:	f7ef f925 	bl	100 <memchr>
   10eb6:	2800      	cmp	r0, #0
   10eb8:	d038      	beq.n	10f2c <_svfiprintf_r+0x1d8>
   10eba:	4b23      	ldr	r3, [pc, #140]	; (10f48 <_svfiprintf_r+0x1f4>)
   10ebc:	bb1b      	cbnz	r3, 10f06 <_svfiprintf_r+0x1b2>
   10ebe:	9b03      	ldr	r3, [sp, #12]
   10ec0:	3307      	adds	r3, #7
   10ec2:	f023 0307 	bic.w	r3, r3, #7
   10ec6:	3308      	adds	r3, #8
   10ec8:	9303      	str	r3, [sp, #12]
   10eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ecc:	4433      	add	r3, r6
   10ece:	9309      	str	r3, [sp, #36]	; 0x24
   10ed0:	e767      	b.n	10da2 <_svfiprintf_r+0x4e>
   10ed2:	fb0c 3202 	mla	r2, ip, r2, r3
   10ed6:	460c      	mov	r4, r1
   10ed8:	2001      	movs	r0, #1
   10eda:	e7a5      	b.n	10e28 <_svfiprintf_r+0xd4>
   10edc:	2300      	movs	r3, #0
   10ede:	3401      	adds	r4, #1
   10ee0:	9305      	str	r3, [sp, #20]
   10ee2:	4619      	mov	r1, r3
   10ee4:	f04f 0c0a 	mov.w	ip, #10
   10ee8:	4620      	mov	r0, r4
   10eea:	f810 2b01 	ldrb.w	r2, [r0], #1
   10eee:	3a30      	subs	r2, #48	; 0x30
   10ef0:	2a09      	cmp	r2, #9
   10ef2:	d903      	bls.n	10efc <_svfiprintf_r+0x1a8>
   10ef4:	2b00      	cmp	r3, #0
   10ef6:	d0c5      	beq.n	10e84 <_svfiprintf_r+0x130>
   10ef8:	9105      	str	r1, [sp, #20]
   10efa:	e7c3      	b.n	10e84 <_svfiprintf_r+0x130>
   10efc:	fb0c 2101 	mla	r1, ip, r1, r2
   10f00:	4604      	mov	r4, r0
   10f02:	2301      	movs	r3, #1
   10f04:	e7f0      	b.n	10ee8 <_svfiprintf_r+0x194>
   10f06:	ab03      	add	r3, sp, #12
   10f08:	9300      	str	r3, [sp, #0]
   10f0a:	462a      	mov	r2, r5
   10f0c:	4b0f      	ldr	r3, [pc, #60]	; (10f4c <_svfiprintf_r+0x1f8>)
   10f0e:	a904      	add	r1, sp, #16
   10f10:	4638      	mov	r0, r7
   10f12:	f7fe fd03 	bl	f91c <_printf_float>
   10f16:	1c42      	adds	r2, r0, #1
   10f18:	4606      	mov	r6, r0
   10f1a:	d1d6      	bne.n	10eca <_svfiprintf_r+0x176>
   10f1c:	89ab      	ldrh	r3, [r5, #12]
   10f1e:	065b      	lsls	r3, r3, #25
   10f20:	f53f af2c 	bmi.w	10d7c <_svfiprintf_r+0x28>
   10f24:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f26:	b01d      	add	sp, #116	; 0x74
   10f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f2c:	ab03      	add	r3, sp, #12
   10f2e:	9300      	str	r3, [sp, #0]
   10f30:	462a      	mov	r2, r5
   10f32:	4b06      	ldr	r3, [pc, #24]	; (10f4c <_svfiprintf_r+0x1f8>)
   10f34:	a904      	add	r1, sp, #16
   10f36:	4638      	mov	r0, r7
   10f38:	f7fe ff26 	bl	fd88 <_printf_i>
   10f3c:	e7eb      	b.n	10f16 <_svfiprintf_r+0x1c2>
   10f3e:	bf00      	nop
   10f40:	00046111 	.word	0x00046111
   10f44:	0004611b 	.word	0x0004611b
   10f48:	0000f91d 	.word	0x0000f91d
   10f4c:	00016013 	.word	0x00016013
   10f50:	00046117 	.word	0x00046117

00010f54 <_write_r>:
   10f54:	b538      	push	{r3, r4, r5, lr}
   10f56:	4d07      	ldr	r5, [pc, #28]	; (10f74 <_write_r+0x20>)
   10f58:	4604      	mov	r4, r0
   10f5a:	4608      	mov	r0, r1
   10f5c:	4611      	mov	r1, r2
   10f5e:	2200      	movs	r2, #0
   10f60:	602a      	str	r2, [r5, #0]
   10f62:	461a      	mov	r2, r3
   10f64:	f003 fe7a 	bl	14c5c <_write>
   10f68:	1c43      	adds	r3, r0, #1
   10f6a:	d102      	bne.n	10f72 <_write_r+0x1e>
   10f6c:	682b      	ldr	r3, [r5, #0]
   10f6e:	b103      	cbz	r3, 10f72 <_write_r+0x1e>
   10f70:	6023      	str	r3, [r4, #0]
   10f72:	bd38      	pop	{r3, r4, r5, pc}
   10f74:	2000189c 	.word	0x2000189c

00010f78 <_close_r>:
   10f78:	b538      	push	{r3, r4, r5, lr}
   10f7a:	4d06      	ldr	r5, [pc, #24]	; (10f94 <_close_r+0x1c>)
   10f7c:	2300      	movs	r3, #0
   10f7e:	4604      	mov	r4, r0
   10f80:	4608      	mov	r0, r1
   10f82:	602b      	str	r3, [r5, #0]
   10f84:	f003 fe6e 	bl	14c64 <_close>
   10f88:	1c43      	adds	r3, r0, #1
   10f8a:	d102      	bne.n	10f92 <_close_r+0x1a>
   10f8c:	682b      	ldr	r3, [r5, #0]
   10f8e:	b103      	cbz	r3, 10f92 <_close_r+0x1a>
   10f90:	6023      	str	r3, [r4, #0]
   10f92:	bd38      	pop	{r3, r4, r5, pc}
   10f94:	2000189c 	.word	0x2000189c

00010f98 <_fstat_r>:
   10f98:	b538      	push	{r3, r4, r5, lr}
   10f9a:	4d07      	ldr	r5, [pc, #28]	; (10fb8 <_fstat_r+0x20>)
   10f9c:	2300      	movs	r3, #0
   10f9e:	4604      	mov	r4, r0
   10fa0:	4608      	mov	r0, r1
   10fa2:	4611      	mov	r1, r2
   10fa4:	602b      	str	r3, [r5, #0]
   10fa6:	f003 fe6b 	bl	14c80 <_fstat>
   10faa:	1c43      	adds	r3, r0, #1
   10fac:	d102      	bne.n	10fb4 <_fstat_r+0x1c>
   10fae:	682b      	ldr	r3, [r5, #0]
   10fb0:	b103      	cbz	r3, 10fb4 <_fstat_r+0x1c>
   10fb2:	6023      	str	r3, [r4, #0]
   10fb4:	bd38      	pop	{r3, r4, r5, pc}
   10fb6:	bf00      	nop
   10fb8:	2000189c 	.word	0x2000189c

00010fbc <_isatty_r>:
   10fbc:	b538      	push	{r3, r4, r5, lr}
   10fbe:	4d06      	ldr	r5, [pc, #24]	; (10fd8 <_isatty_r+0x1c>)
   10fc0:	2300      	movs	r3, #0
   10fc2:	4604      	mov	r4, r0
   10fc4:	4608      	mov	r0, r1
   10fc6:	602b      	str	r3, [r5, #0]
   10fc8:	f003 fe51 	bl	14c6e <_isatty>
   10fcc:	1c43      	adds	r3, r0, #1
   10fce:	d102      	bne.n	10fd6 <_isatty_r+0x1a>
   10fd0:	682b      	ldr	r3, [r5, #0]
   10fd2:	b103      	cbz	r3, 10fd6 <_isatty_r+0x1a>
   10fd4:	6023      	str	r3, [r4, #0]
   10fd6:	bd38      	pop	{r3, r4, r5, pc}
   10fd8:	2000189c 	.word	0x2000189c

00010fdc <_lseek_r>:
   10fdc:	b538      	push	{r3, r4, r5, lr}
   10fde:	4d07      	ldr	r5, [pc, #28]	; (10ffc <_lseek_r+0x20>)
   10fe0:	4604      	mov	r4, r0
   10fe2:	4608      	mov	r0, r1
   10fe4:	4611      	mov	r1, r2
   10fe6:	2200      	movs	r2, #0
   10fe8:	602a      	str	r2, [r5, #0]
   10fea:	461a      	mov	r2, r3
   10fec:	f003 fe3d 	bl	14c6a <_lseek>
   10ff0:	1c43      	adds	r3, r0, #1
   10ff2:	d102      	bne.n	10ffa <_lseek_r+0x1e>
   10ff4:	682b      	ldr	r3, [r5, #0]
   10ff6:	b103      	cbz	r3, 10ffa <_lseek_r+0x1e>
   10ff8:	6023      	str	r3, [r4, #0]
   10ffa:	bd38      	pop	{r3, r4, r5, pc}
   10ffc:	2000189c 	.word	0x2000189c

00011000 <_read_r>:
   11000:	b538      	push	{r3, r4, r5, lr}
   11002:	4d07      	ldr	r5, [pc, #28]	; (11020 <_read_r+0x20>)
   11004:	4604      	mov	r4, r0
   11006:	4608      	mov	r0, r1
   11008:	4611      	mov	r1, r2
   1100a:	2200      	movs	r2, #0
   1100c:	602a      	str	r2, [r5, #0]
   1100e:	461a      	mov	r2, r3
   11010:	f003 fe20 	bl	14c54 <_read>
   11014:	1c43      	adds	r3, r0, #1
   11016:	d102      	bne.n	1101e <_read_r+0x1e>
   11018:	682b      	ldr	r3, [r5, #0]
   1101a:	b103      	cbz	r3, 1101e <_read_r+0x1e>
   1101c:	6023      	str	r3, [r4, #0]
   1101e:	bd38      	pop	{r3, r4, r5, pc}
   11020:	2000189c 	.word	0x2000189c

00011024 <nrf_cc3xx_platform_init_no_rng>:
   11024:	b510      	push	{r4, lr}
   11026:	4c0a      	ldr	r4, [pc, #40]	; (11050 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   11028:	6823      	ldr	r3, [r4, #0]
   1102a:	b11b      	cbz	r3, 11034 <nrf_cc3xx_platform_init_no_rng+0x10>
   1102c:	2301      	movs	r3, #1
   1102e:	6023      	str	r3, [r4, #0]
   11030:	2000      	movs	r0, #0
   11032:	bd10      	pop	{r4, pc}
   11034:	f000 f8d0 	bl	111d8 <CC_LibInitNoRng>
   11038:	2800      	cmp	r0, #0
   1103a:	d0f7      	beq.n	1102c <nrf_cc3xx_platform_init_no_rng+0x8>
   1103c:	3801      	subs	r0, #1
   1103e:	2806      	cmp	r0, #6
   11040:	d803      	bhi.n	1104a <nrf_cc3xx_platform_init_no_rng+0x26>
   11042:	4b04      	ldr	r3, [pc, #16]	; (11054 <nrf_cc3xx_platform_init_no_rng+0x30>)
   11044:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   11048:	bd10      	pop	{r4, pc}
   1104a:	4803      	ldr	r0, [pc, #12]	; (11058 <nrf_cc3xx_platform_init_no_rng+0x34>)
   1104c:	bd10      	pop	{r4, pc}
   1104e:	bf00      	nop
   11050:	200018a0 	.word	0x200018a0
   11054:	0003f8c8 	.word	0x0003f8c8
   11058:	ffff8ffe 	.word	0xffff8ffe

0001105c <nrf_cc3xx_platform_abort>:
   1105c:	f3bf 8f4f 	dsb	sy
   11060:	4905      	ldr	r1, [pc, #20]	; (11078 <nrf_cc3xx_platform_abort+0x1c>)
   11062:	4b06      	ldr	r3, [pc, #24]	; (1107c <nrf_cc3xx_platform_abort+0x20>)
   11064:	68ca      	ldr	r2, [r1, #12]
   11066:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1106a:	4313      	orrs	r3, r2
   1106c:	60cb      	str	r3, [r1, #12]
   1106e:	f3bf 8f4f 	dsb	sy
   11072:	bf00      	nop
   11074:	e7fd      	b.n	11072 <nrf_cc3xx_platform_abort+0x16>
   11076:	bf00      	nop
   11078:	e000ed00 	.word	0xe000ed00
   1107c:	05fa0004 	.word	0x05fa0004

00011080 <CC_PalAbort>:
   11080:	b410      	push	{r4}
   11082:	4b0a      	ldr	r3, [pc, #40]	; (110ac <CC_PalAbort+0x2c>)
   11084:	490a      	ldr	r1, [pc, #40]	; (110b0 <CC_PalAbort+0x30>)
   11086:	4c0b      	ldr	r4, [pc, #44]	; (110b4 <CC_PalAbort+0x34>)
   11088:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1108c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   11090:	6849      	ldr	r1, [r1, #4]
   11092:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   11096:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1109a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1109e:	2300      	movs	r3, #0
   110a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   110a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   110a8:	4708      	bx	r1
   110aa:	bf00      	nop
   110ac:	5002b000 	.word	0x5002b000
   110b0:	20000554 	.word	0x20000554
   110b4:	5002a000 	.word	0x5002a000

000110b8 <nrf_cc3xx_platform_set_abort>:
   110b8:	e9d0 1200 	ldrd	r1, r2, [r0]
   110bc:	4b01      	ldr	r3, [pc, #4]	; (110c4 <nrf_cc3xx_platform_set_abort+0xc>)
   110be:	e9c3 1200 	strd	r1, r2, [r3]
   110c2:	4770      	bx	lr
   110c4:	20000554 	.word	0x20000554

000110c8 <mutex_free>:
   110c8:	b510      	push	{r4, lr}
   110ca:	4604      	mov	r4, r0
   110cc:	b130      	cbz	r0, 110dc <mutex_free+0x14>
   110ce:	6863      	ldr	r3, [r4, #4]
   110d0:	06db      	lsls	r3, r3, #27
   110d2:	d502      	bpl.n	110da <mutex_free+0x12>
   110d4:	2300      	movs	r3, #0
   110d6:	6023      	str	r3, [r4, #0]
   110d8:	6063      	str	r3, [r4, #4]
   110da:	bd10      	pop	{r4, pc}
   110dc:	4b02      	ldr	r3, [pc, #8]	; (110e8 <mutex_free+0x20>)
   110de:	4803      	ldr	r0, [pc, #12]	; (110ec <mutex_free+0x24>)
   110e0:	685b      	ldr	r3, [r3, #4]
   110e2:	4798      	blx	r3
   110e4:	e7f3      	b.n	110ce <mutex_free+0x6>
   110e6:	bf00      	nop
   110e8:	20000554 	.word	0x20000554
   110ec:	0003f8e4 	.word	0x0003f8e4

000110f0 <mutex_lock>:
   110f0:	b1b0      	cbz	r0, 11120 <mutex_lock+0x30>
   110f2:	6843      	ldr	r3, [r0, #4]
   110f4:	b193      	cbz	r3, 1111c <mutex_lock+0x2c>
   110f6:	06db      	lsls	r3, r3, #27
   110f8:	d50e      	bpl.n	11118 <mutex_lock+0x28>
   110fa:	2301      	movs	r3, #1
   110fc:	e850 2f00 	ldrex	r2, [r0]
   11100:	4619      	mov	r1, r3
   11102:	e840 1c00 	strex	ip, r1, [r0]
   11106:	f09c 0f00 	teq	ip, #0
   1110a:	d1f7      	bne.n	110fc <mutex_lock+0xc>
   1110c:	2a01      	cmp	r2, #1
   1110e:	d0f5      	beq.n	110fc <mutex_lock+0xc>
   11110:	f3bf 8f5f 	dmb	sy
   11114:	2000      	movs	r0, #0
   11116:	4770      	bx	lr
   11118:	4803      	ldr	r0, [pc, #12]	; (11128 <mutex_lock+0x38>)
   1111a:	4770      	bx	lr
   1111c:	4803      	ldr	r0, [pc, #12]	; (1112c <mutex_lock+0x3c>)
   1111e:	4770      	bx	lr
   11120:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11124:	4770      	bx	lr
   11126:	bf00      	nop
   11128:	ffff8fe9 	.word	0xffff8fe9
   1112c:	ffff8fea 	.word	0xffff8fea

00011130 <mutex_unlock>:
   11130:	b168      	cbz	r0, 1114e <mutex_unlock+0x1e>
   11132:	6843      	ldr	r3, [r0, #4]
   11134:	b13b      	cbz	r3, 11146 <mutex_unlock+0x16>
   11136:	06db      	lsls	r3, r3, #27
   11138:	d507      	bpl.n	1114a <mutex_unlock+0x1a>
   1113a:	f3bf 8f5f 	dmb	sy
   1113e:	2300      	movs	r3, #0
   11140:	6003      	str	r3, [r0, #0]
   11142:	4618      	mov	r0, r3
   11144:	4770      	bx	lr
   11146:	4803      	ldr	r0, [pc, #12]	; (11154 <mutex_unlock+0x24>)
   11148:	4770      	bx	lr
   1114a:	4803      	ldr	r0, [pc, #12]	; (11158 <mutex_unlock+0x28>)
   1114c:	4770      	bx	lr
   1114e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11152:	4770      	bx	lr
   11154:	ffff8fea 	.word	0xffff8fea
   11158:	ffff8fe9 	.word	0xffff8fe9

0001115c <mutex_init>:
   1115c:	b510      	push	{r4, lr}
   1115e:	4604      	mov	r4, r0
   11160:	b120      	cbz	r0, 1116c <mutex_init+0x10>
   11162:	2200      	movs	r2, #0
   11164:	2311      	movs	r3, #17
   11166:	6022      	str	r2, [r4, #0]
   11168:	6063      	str	r3, [r4, #4]
   1116a:	bd10      	pop	{r4, pc}
   1116c:	4801      	ldr	r0, [pc, #4]	; (11174 <mutex_init+0x18>)
   1116e:	f7ff ff87 	bl	11080 <CC_PalAbort>
   11172:	e7f6      	b.n	11162 <mutex_init+0x6>
   11174:	0003f90c 	.word	0x0003f90c

00011178 <nrf_cc3xx_platform_set_mutexes>:
   11178:	b570      	push	{r4, r5, r6, lr}
   1117a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1117e:	4c13      	ldr	r4, [pc, #76]	; (111cc <nrf_cc3xx_platform_set_mutexes+0x54>)
   11180:	4d13      	ldr	r5, [pc, #76]	; (111d0 <nrf_cc3xx_platform_set_mutexes+0x58>)
   11182:	6063      	str	r3, [r4, #4]
   11184:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   11188:	e9c4 3002 	strd	r3, r0, [r4, #8]
   1118c:	6022      	str	r2, [r4, #0]
   1118e:	4b11      	ldr	r3, [pc, #68]	; (111d4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   11190:	6808      	ldr	r0, [r1, #0]
   11192:	6018      	str	r0, [r3, #0]
   11194:	6848      	ldr	r0, [r1, #4]
   11196:	6058      	str	r0, [r3, #4]
   11198:	6888      	ldr	r0, [r1, #8]
   1119a:	6098      	str	r0, [r3, #8]
   1119c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   111a0:	60d8      	str	r0, [r3, #12]
   111a2:	6119      	str	r1, [r3, #16]
   111a4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   111a8:	06db      	lsls	r3, r3, #27
   111aa:	d50d      	bpl.n	111c8 <nrf_cc3xx_platform_set_mutexes+0x50>
   111ac:	2300      	movs	r3, #0
   111ae:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   111b2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   111b6:	f505 708a 	add.w	r0, r5, #276	; 0x114
   111ba:	4790      	blx	r2
   111bc:	6823      	ldr	r3, [r4, #0]
   111be:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   111c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   111c6:	4718      	bx	r3
   111c8:	bd70      	pop	{r4, r5, r6, pc}
   111ca:	bf00      	nop
   111cc:	20000564 	.word	0x20000564
   111d0:	200018b8 	.word	0x200018b8
   111d4:	20000574 	.word	0x20000574

000111d8 <CC_LibInitNoRng>:
   111d8:	b538      	push	{r3, r4, r5, lr}
   111da:	f000 f82f 	bl	1123c <CC_HalInit>
   111de:	b120      	cbz	r0, 111ea <CC_LibInitNoRng+0x12>
   111e0:	2403      	movs	r4, #3
   111e2:	f000 f863 	bl	112ac <CC_PalTerminate>
   111e6:	4620      	mov	r0, r4
   111e8:	bd38      	pop	{r3, r4, r5, pc}
   111ea:	f000 f831 	bl	11250 <CC_PalInit>
   111ee:	b998      	cbnz	r0, 11218 <CC_LibInitNoRng+0x40>
   111f0:	f000 f8ac 	bl	1134c <CC_PalPowerSaveModeSelect>
   111f4:	b998      	cbnz	r0, 1121e <CC_LibInitNoRng+0x46>
   111f6:	4d0f      	ldr	r5, [pc, #60]	; (11234 <CC_LibInitNoRng+0x5c>)
   111f8:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   111fc:	0e1b      	lsrs	r3, r3, #24
   111fe:	2bf0      	cmp	r3, #240	; 0xf0
   11200:	d108      	bne.n	11214 <CC_LibInitNoRng+0x3c>
   11202:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
   11206:	4b0c      	ldr	r3, [pc, #48]	; (11238 <CC_LibInitNoRng+0x60>)
   11208:	429a      	cmp	r2, r3
   1120a:	d00a      	beq.n	11222 <CC_LibInitNoRng+0x4a>
   1120c:	2407      	movs	r4, #7
   1120e:	f000 f817 	bl	11240 <CC_HalTerminate>
   11212:	e7e6      	b.n	111e2 <CC_LibInitNoRng+0xa>
   11214:	2406      	movs	r4, #6
   11216:	e7fa      	b.n	1120e <CC_LibInitNoRng+0x36>
   11218:	2404      	movs	r4, #4
   1121a:	4620      	mov	r0, r4
   1121c:	bd38      	pop	{r3, r4, r5, pc}
   1121e:	2400      	movs	r4, #0
   11220:	e7f5      	b.n	1120e <CC_LibInitNoRng+0x36>
   11222:	2001      	movs	r0, #1
   11224:	f000 f892 	bl	1134c <CC_PalPowerSaveModeSelect>
   11228:	4604      	mov	r4, r0
   1122a:	2800      	cmp	r0, #0
   1122c:	d1f7      	bne.n	1121e <CC_LibInitNoRng+0x46>
   1122e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
   11232:	e7d8      	b.n	111e6 <CC_LibInitNoRng+0xe>
   11234:	5002b000 	.word	0x5002b000
   11238:	20e00000 	.word	0x20e00000

0001123c <CC_HalInit>:
   1123c:	2000      	movs	r0, #0
   1123e:	4770      	bx	lr

00011240 <CC_HalTerminate>:
   11240:	2000      	movs	r0, #0
   11242:	4770      	bx	lr

00011244 <CC_HalMaskInterrupt>:
   11244:	4b01      	ldr	r3, [pc, #4]	; (1124c <CC_HalMaskInterrupt+0x8>)
   11246:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1124a:	4770      	bx	lr
   1124c:	5002b000 	.word	0x5002b000

00011250 <CC_PalInit>:
   11250:	b510      	push	{r4, lr}
   11252:	4811      	ldr	r0, [pc, #68]	; (11298 <CC_PalInit+0x48>)
   11254:	f000 f848 	bl	112e8 <CC_PalMutexCreate>
   11258:	b100      	cbz	r0, 1125c <CC_PalInit+0xc>
   1125a:	bd10      	pop	{r4, pc}
   1125c:	480f      	ldr	r0, [pc, #60]	; (1129c <CC_PalInit+0x4c>)
   1125e:	f000 f843 	bl	112e8 <CC_PalMutexCreate>
   11262:	2800      	cmp	r0, #0
   11264:	d1f9      	bne.n	1125a <CC_PalInit+0xa>
   11266:	4c0e      	ldr	r4, [pc, #56]	; (112a0 <CC_PalInit+0x50>)
   11268:	4620      	mov	r0, r4
   1126a:	f000 f83d 	bl	112e8 <CC_PalMutexCreate>
   1126e:	2800      	cmp	r0, #0
   11270:	d1f3      	bne.n	1125a <CC_PalInit+0xa>
   11272:	4b0c      	ldr	r3, [pc, #48]	; (112a4 <CC_PalInit+0x54>)
   11274:	480c      	ldr	r0, [pc, #48]	; (112a8 <CC_PalInit+0x58>)
   11276:	601c      	str	r4, [r3, #0]
   11278:	f000 f836 	bl	112e8 <CC_PalMutexCreate>
   1127c:	4601      	mov	r1, r0
   1127e:	2800      	cmp	r0, #0
   11280:	d1eb      	bne.n	1125a <CC_PalInit+0xa>
   11282:	f000 f82d 	bl	112e0 <CC_PalDmaInit>
   11286:	4604      	mov	r4, r0
   11288:	b108      	cbz	r0, 1128e <CC_PalInit+0x3e>
   1128a:	4620      	mov	r0, r4
   1128c:	bd10      	pop	{r4, pc}
   1128e:	f000 f83f 	bl	11310 <CC_PalPowerSaveModeInit>
   11292:	4620      	mov	r0, r4
   11294:	e7fa      	b.n	1128c <CC_PalInit+0x3c>
   11296:	bf00      	nop
   11298:	200005ac 	.word	0x200005ac
   1129c:	200005a0 	.word	0x200005a0
   112a0:	200005a8 	.word	0x200005a8
   112a4:	200005b0 	.word	0x200005b0
   112a8:	200005a4 	.word	0x200005a4

000112ac <CC_PalTerminate>:
   112ac:	b508      	push	{r3, lr}
   112ae:	4808      	ldr	r0, [pc, #32]	; (112d0 <CC_PalTerminate+0x24>)
   112b0:	f000 f824 	bl	112fc <CC_PalMutexDestroy>
   112b4:	4807      	ldr	r0, [pc, #28]	; (112d4 <CC_PalTerminate+0x28>)
   112b6:	f000 f821 	bl	112fc <CC_PalMutexDestroy>
   112ba:	4807      	ldr	r0, [pc, #28]	; (112d8 <CC_PalTerminate+0x2c>)
   112bc:	f000 f81e 	bl	112fc <CC_PalMutexDestroy>
   112c0:	4806      	ldr	r0, [pc, #24]	; (112dc <CC_PalTerminate+0x30>)
   112c2:	f000 f81b 	bl	112fc <CC_PalMutexDestroy>
   112c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   112ca:	f000 b80b 	b.w	112e4 <CC_PalDmaTerminate>
   112ce:	bf00      	nop
   112d0:	200005ac 	.word	0x200005ac
   112d4:	200005a0 	.word	0x200005a0
   112d8:	200005a8 	.word	0x200005a8
   112dc:	200005a4 	.word	0x200005a4

000112e0 <CC_PalDmaInit>:
   112e0:	2000      	movs	r0, #0
   112e2:	4770      	bx	lr

000112e4 <CC_PalDmaTerminate>:
   112e4:	4770      	bx	lr
   112e6:	bf00      	nop

000112e8 <CC_PalMutexCreate>:
   112e8:	b508      	push	{r3, lr}
   112ea:	4b03      	ldr	r3, [pc, #12]	; (112f8 <CC_PalMutexCreate+0x10>)
   112ec:	6802      	ldr	r2, [r0, #0]
   112ee:	681b      	ldr	r3, [r3, #0]
   112f0:	6810      	ldr	r0, [r2, #0]
   112f2:	4798      	blx	r3
   112f4:	2000      	movs	r0, #0
   112f6:	bd08      	pop	{r3, pc}
   112f8:	20000564 	.word	0x20000564

000112fc <CC_PalMutexDestroy>:
   112fc:	b508      	push	{r3, lr}
   112fe:	4b03      	ldr	r3, [pc, #12]	; (1130c <CC_PalMutexDestroy+0x10>)
   11300:	6802      	ldr	r2, [r0, #0]
   11302:	685b      	ldr	r3, [r3, #4]
   11304:	6810      	ldr	r0, [r2, #0]
   11306:	4798      	blx	r3
   11308:	2000      	movs	r0, #0
   1130a:	bd08      	pop	{r3, pc}
   1130c:	20000564 	.word	0x20000564

00011310 <CC_PalPowerSaveModeInit>:
   11310:	b570      	push	{r4, r5, r6, lr}
   11312:	4c09      	ldr	r4, [pc, #36]	; (11338 <CC_PalPowerSaveModeInit+0x28>)
   11314:	4d09      	ldr	r5, [pc, #36]	; (1133c <CC_PalPowerSaveModeInit+0x2c>)
   11316:	6920      	ldr	r0, [r4, #16]
   11318:	68ab      	ldr	r3, [r5, #8]
   1131a:	4798      	blx	r3
   1131c:	b118      	cbz	r0, 11326 <CC_PalPowerSaveModeInit+0x16>
   1131e:	4b08      	ldr	r3, [pc, #32]	; (11340 <CC_PalPowerSaveModeInit+0x30>)
   11320:	4808      	ldr	r0, [pc, #32]	; (11344 <CC_PalPowerSaveModeInit+0x34>)
   11322:	685b      	ldr	r3, [r3, #4]
   11324:	4798      	blx	r3
   11326:	4a08      	ldr	r2, [pc, #32]	; (11348 <CC_PalPowerSaveModeInit+0x38>)
   11328:	68eb      	ldr	r3, [r5, #12]
   1132a:	6920      	ldr	r0, [r4, #16]
   1132c:	2100      	movs	r1, #0
   1132e:	6011      	str	r1, [r2, #0]
   11330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11334:	4718      	bx	r3
   11336:	bf00      	nop
   11338:	20000574 	.word	0x20000574
   1133c:	20000564 	.word	0x20000564
   11340:	20000554 	.word	0x20000554
   11344:	0003f930 	.word	0x0003f930
   11348:	200018b4 	.word	0x200018b4

0001134c <CC_PalPowerSaveModeSelect>:
   1134c:	b570      	push	{r4, r5, r6, lr}
   1134e:	4d1b      	ldr	r5, [pc, #108]	; (113bc <CC_PalPowerSaveModeSelect+0x70>)
   11350:	4e1b      	ldr	r6, [pc, #108]	; (113c0 <CC_PalPowerSaveModeSelect+0x74>)
   11352:	4604      	mov	r4, r0
   11354:	68b2      	ldr	r2, [r6, #8]
   11356:	6928      	ldr	r0, [r5, #16]
   11358:	4790      	blx	r2
   1135a:	b9f8      	cbnz	r0, 1139c <CC_PalPowerSaveModeSelect+0x50>
   1135c:	b15c      	cbz	r4, 11376 <CC_PalPowerSaveModeSelect+0x2a>
   1135e:	4c19      	ldr	r4, [pc, #100]	; (113c4 <CC_PalPowerSaveModeSelect+0x78>)
   11360:	6823      	ldr	r3, [r4, #0]
   11362:	b1b3      	cbz	r3, 11392 <CC_PalPowerSaveModeSelect+0x46>
   11364:	2b01      	cmp	r3, #1
   11366:	d01b      	beq.n	113a0 <CC_PalPowerSaveModeSelect+0x54>
   11368:	3b01      	subs	r3, #1
   1136a:	6023      	str	r3, [r4, #0]
   1136c:	6928      	ldr	r0, [r5, #16]
   1136e:	68f3      	ldr	r3, [r6, #12]
   11370:	4798      	blx	r3
   11372:	2000      	movs	r0, #0
   11374:	bd70      	pop	{r4, r5, r6, pc}
   11376:	4c13      	ldr	r4, [pc, #76]	; (113c4 <CC_PalPowerSaveModeSelect+0x78>)
   11378:	6821      	ldr	r1, [r4, #0]
   1137a:	b941      	cbnz	r1, 1138e <CC_PalPowerSaveModeSelect+0x42>
   1137c:	4b12      	ldr	r3, [pc, #72]	; (113c8 <CC_PalPowerSaveModeSelect+0x7c>)
   1137e:	2201      	movs	r2, #1
   11380:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   11384:	4a11      	ldr	r2, [pc, #68]	; (113cc <CC_PalPowerSaveModeSelect+0x80>)
   11386:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1138a:	2b00      	cmp	r3, #0
   1138c:	d1fb      	bne.n	11386 <CC_PalPowerSaveModeSelect+0x3a>
   1138e:	3101      	adds	r1, #1
   11390:	6021      	str	r1, [r4, #0]
   11392:	68f3      	ldr	r3, [r6, #12]
   11394:	6928      	ldr	r0, [r5, #16]
   11396:	4798      	blx	r3
   11398:	2000      	movs	r0, #0
   1139a:	bd70      	pop	{r4, r5, r6, pc}
   1139c:	480c      	ldr	r0, [pc, #48]	; (113d0 <CC_PalPowerSaveModeSelect+0x84>)
   1139e:	bd70      	pop	{r4, r5, r6, pc}
   113a0:	4a0a      	ldr	r2, [pc, #40]	; (113cc <CC_PalPowerSaveModeSelect+0x80>)
   113a2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   113a6:	2b00      	cmp	r3, #0
   113a8:	d1fb      	bne.n	113a2 <CC_PalPowerSaveModeSelect+0x56>
   113aa:	4a07      	ldr	r2, [pc, #28]	; (113c8 <CC_PalPowerSaveModeSelect+0x7c>)
   113ac:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   113b0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   113b4:	f7ff ff46 	bl	11244 <CC_HalMaskInterrupt>
   113b8:	6823      	ldr	r3, [r4, #0]
   113ba:	e7d5      	b.n	11368 <CC_PalPowerSaveModeSelect+0x1c>
   113bc:	20000574 	.word	0x20000574
   113c0:	20000564 	.word	0x20000564
   113c4:	200018b4 	.word	0x200018b4
   113c8:	5002a000 	.word	0x5002a000
   113cc:	5002b000 	.word	0x5002b000
   113d0:	ffff8fe9 	.word	0xffff8fe9

000113d4 <_ZN2ei9ei_matrixD1Ev>:
            }
#endif
        }
    }

    ~ei_matrix() {
   113d4:	b510      	push	{r4, lr}
   113d6:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
   113d8:	6800      	ldr	r0, [r0, #0]
   113da:	b118      	cbz	r0, 113e4 <_ZN2ei9ei_matrixD1Ev+0x10>
   113dc:	7b23      	ldrb	r3, [r4, #12]
   113de:	b10b      	cbz	r3, 113e4 <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
   113e0:	f000 f848 	bl	11474 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
   113e4:	4620      	mov	r0, r4
   113e6:	bd10      	pop	{r4, pc}

000113e8 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
   113e8:	e7fe      	b.n	113e8 <_ZSt25__throw_bad_function_callv>

000113ea <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
   113ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (fin == fout) {
   113ee:	4291      	cmp	r1, r2
{
   113f0:	4604      	mov	r4, r0
   113f2:	460d      	mov	r5, r1
   113f4:	4610      	mov	r0, r2
   113f6:	461f      	mov	r7, r3
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   113f8:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
   113fc:	d117      	bne.n	1142e <kiss_fft_stride+0x44>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   113fe:	6820      	ldr	r0, [r4, #0]
   11400:	00c0      	lsls	r0, r0, #3
   11402:	f000 f833 	bl	1146c <_Z9ei_mallocj>
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   11406:	463b      	mov	r3, r7
   11408:	4629      	mov	r1, r5
   1140a:	e9cd 8400 	strd	r8, r4, [sp]
   1140e:	2201      	movs	r2, #1
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   11410:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   11412:	f7f4 f95f 	bl	56d4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
   11416:	6822      	ldr	r2, [r4, #0]
   11418:	4631      	mov	r1, r6
   1141a:	00d2      	lsls	r2, r2, #3
   1141c:	4628      	mov	r0, r5
   1141e:	f004 faa4 	bl	1596a <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
   11422:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
   11424:	b002      	add	sp, #8
   11426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
   1142a:	f000 b823 	b.w	11474 <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
   1142e:	e9cd 8400 	strd	r8, r4, [sp]
   11432:	2201      	movs	r2, #1
   11434:	f7f4 f94e 	bl	56d4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
   11438:	b002      	add	sp, #8
   1143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001143e <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
   1143e:	2301      	movs	r3, #1
   11440:	f7ff bfd3 	b.w	113ea <kiss_fft_stride>

00011444 <_Z29ei_run_impulse_check_canceledv>:
}
   11444:	2000      	movs	r0, #0
   11446:	4770      	bx	lr

00011448 <_Z16ei_read_timer_usv>:
uint64_t ei_read_timer_us() {
   11448:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   1144a:	f004 f9ae 	bl	157aa <z_impl_k_uptime_ticks>
   1144e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11452:	fba0 0302 	umull	r0, r3, r0, r2
   11456:	fb02 3101 	mla	r1, r2, r1, r3
   1145a:	0bc0      	lsrs	r0, r0, #15
   1145c:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    return k_uptime_get() * 1000;
   11460:	fba0 0302 	umull	r0, r3, r0, r2
   11464:	0bc9      	lsrs	r1, r1, #15
}
   11466:	fb02 3101 	mla	r1, r2, r1, r3
   1146a:	bd08      	pop	{r3, pc}

0001146c <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
   1146c:	f7fe b870 	b.w	f550 <malloc>

00011470 <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
   11470:	f7fe b854 	b.w	f51c <calloc>

00011474 <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
   11474:	f7fe b874 	b.w	f560 <free>

00011478 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   11478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   1147c:	2401      	movs	r4, #1
                         int total_signed_bits) {
   1147e:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   11480:	fa04 f000 	lsl.w	r0, r4, r0
   11484:	3801      	subs	r0, #1
                         int total_signed_bits) {
   11486:	4688      	mov	r8, r1
   11488:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   1148a:	f7ee ffdb 	bl	444 <__aeabi_i2d>
   1148e:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   11490:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   11494:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   11496:	f1c0 0320 	rsb	r3, r0, #32
   1149a:	f1a0 0120 	sub.w	r1, r0, #32
   1149e:	fa24 f303 	lsr.w	r3, r4, r3
   114a2:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   114a6:	fa04 f000 	lsl.w	r0, r4, r0
   114aa:	4319      	orrs	r1, r3
   114ac:	f7ef f806 	bl	4bc <__aeabi_l2d>
   114b0:	4602      	mov	r2, r0
   114b2:	460b      	mov	r3, r1
   114b4:	4630      	mov	r0, r6
   114b6:	4639      	mov	r1, r7
   114b8:	f7ef f82e 	bl	518 <__aeabi_dmul>
      (1ll << input_left_shift);
   114bc:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   114c0:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   114c2:	f1a8 0120 	sub.w	r1, r8, #32
   114c6:	fa24 f303 	lsr.w	r3, r4, r3
   114ca:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   114ce:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   114d0:	4319      	orrs	r1, r3
   114d2:	fa04 f008 	lsl.w	r0, r4, r8
   114d6:	f7ee fff1 	bl	4bc <__aeabi_l2d>
   114da:	4602      	mov	r2, r0
   114dc:	460b      	mov	r3, r1
  const double max_input_rescaled =
   114de:	4630      	mov	r0, r6
   114e0:	4639      	mov	r1, r7
   114e2:	f7ef f943 	bl	76c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   114e6:	ec41 0b10 	vmov	d0, r0, r1
   114ea:	f7f1 fd9d 	bl	3028 <floor>
   114ee:	ec51 0b10 	vmov	r0, r1, d0
   114f2:	f7ef faab 	bl	a4c <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   114f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000114fa <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   114fa:	edd0 7a00 	vldr	s15, [r0]
   114fe:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   11502:	b510      	push	{r4, lr}
   11504:	4604      	mov	r4, r0
   11506:	ee17 0a90 	vmov	r0, s15
   1150a:	f7ee ffad 	bl	468 <__aeabi_f2d>
   1150e:	ec41 0b10 	vmov	d0, r0, r1
   11512:	f7fd fb79 	bl	ec08 <round>
   11516:	ec51 0b10 	vmov	r0, r1, d0
   1151a:	f7ef fabf 	bl	a9c <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   1151e:	ee07 0a90 	vmov	s15, r0
   11522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   11526:	6863      	ldr	r3, [r4, #4]
   11528:	ee17 0a90 	vmov	r0, s15
  };
   1152c:	4418      	add	r0, r3
   1152e:	bd10      	pop	{r4, pc}

00011530 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
  if (context->tensors != nullptr) {
   11530:	6883      	ldr	r3, [r0, #8]
                                      int tensor_index) {
   11532:	b410      	push	{r4}
  if (context->tensors != nullptr) {
   11534:	b91b      	cbnz	r3, 1153e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0xe>
    return context->GetTensor(context, tensor_index);
   11536:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
   11538:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
   1153c:	4718      	bx	r3
    return &context->tensors[tensor_index];
   1153e:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   11542:	f85d 4b04 	ldr.w	r4, [sp], #4
   11546:	4770      	bx	lr

00011548 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
  if (index >= 0 && index < max_size) {
   11548:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   1154a:	f851 3b04 	ldr.w	r3, [r1], #4
  if (index >= 0 && index < max_size) {
   1154e:	db07      	blt.n	11560 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
   11550:	4293      	cmp	r3, r2
   11552:	dd05      	ble.n	11560 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
    const int tensor_index = tensor_indices[index];
   11554:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
   11558:	2900      	cmp	r1, #0
   1155a:	db01      	blt.n	11560 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
  return GetTensorAtIndex(context, tensor_index);
   1155c:	f7ff bfe8 	b.w	11530 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   11560:	2000      	movs	r0, #0
   11562:	4770      	bx	lr

00011564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
   11564:	6809      	ldr	r1, [r1, #0]
   11566:	f7ff bfef 	b.w	11548 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

0001156a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
   1156a:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
   1156c:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   1156e:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   11572:	db07      	blt.n	11584 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
   11574:	4291      	cmp	r1, r2
   11576:	dd05      	ble.n	11584 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
    const int tensor_index = tensor_indices[index];
   11578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   1157c:	2900      	cmp	r1, #0
   1157e:	db01      	blt.n	11584 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
  return GetTensorAtIndex(context, tensor_index);
   11580:	f7ff bfd6 	b.w	11530 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
   11584:	2000      	movs	r0, #0
   11586:	4770      	bx	lr

00011588 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
   11588:	6809      	ldr	r1, [r1, #0]
   1158a:	f7ff bfdd 	b.w	11548 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

0001158e <_ZN6tflite12RuntimeShapeD1Ev>:
    if (size_ > kMaxSmallSize) {
   1158e:	6803      	ldr	r3, [r0, #0]
   11590:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   11592:	b510      	push	{r4, lr}
   11594:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   11596:	dd03      	ble.n	115a0 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   11598:	6840      	ldr	r0, [r0, #4]
      delete[] dims_pointer_;
   1159a:	b108      	cbz	r0, 115a0 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   1159c:	f004 f917 	bl	157ce <_ZdaPv>
  }
   115a0:	4620      	mov	r0, r4
   115a2:	bd10      	pop	{r4, pc}

000115a4 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   115a4:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
   115a6:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   115a8:	da01      	bge.n	115ae <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   115aa:	f004 f9d7 	bl	1595c <abort>
    TFLITE_DCHECK_LT(i, size_);
   115ae:	6803      	ldr	r3, [r0, #0]
   115b0:	428b      	cmp	r3, r1
   115b2:	ddfa      	ble.n	115aa <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   115b4:	2b05      	cmp	r3, #5
   115b6:	bfcb      	itete	gt
   115b8:	6843      	ldrgt	r3, [r0, #4]
   115ba:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   115be:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   115c2:	6840      	ldrle	r0, [r0, #4]
  }
   115c4:	bd08      	pop	{r3, pc}

000115c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   115c6:	b570      	push	{r4, r5, r6, lr}
   115c8:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   115ca:	b911      	cbnz	r1, 115d2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   115cc:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   115ce:	4620      	mov	r0, r4
   115d0:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   115d2:	688d      	ldr	r5, [r1, #8]
   115d4:	f855 3b04 	ldr.w	r3, [r5], #4
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
   115d8:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   115da:	2b05      	cmp	r3, #5
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
   115dc:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   115e0:	dc05      	bgt.n	115ee <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   115e2:	1d20      	adds	r0, r4, #4
  }

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    Resize(dimensions_count);
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   115e4:	4632      	mov	r2, r6
   115e6:	4629      	mov	r1, r5
   115e8:	f004 f9bf 	bl	1596a <memcpy>
  }
   115ec:	e7ef      	b.n	115ce <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32_t[dimensions_count];
   115ee:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   115f2:	4293      	cmp	r3, r2
   115f4:	bfb4      	ite	lt
   115f6:	4630      	movlt	r0, r6
   115f8:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   115fc:	f004 f8fa 	bl	157f4 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11600:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   11602:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11604:	2b05      	cmp	r3, #5
   11606:	dced      	bgt.n	115e4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   11608:	e7eb      	b.n	115e2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

0001160a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
                                             int index) {
   1160a:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   1160c:	b908      	cbnz	r0, 11612 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   1160e:	f004 f9a5 	bl	1595c <abort>
  TFLITE_DCHECK(node != nullptr);
   11612:	2900      	cmp	r1, #0
   11614:	d0fb      	beq.n	1160e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   11616:	6809      	ldr	r1, [r1, #0]
   11618:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1161a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
   1161e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
   11622:	6851      	ldr	r1, [r2, #4]
   11624:	4718      	bx	r3

00011626 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
                                       const TfLiteNode* node, int index) {
   11626:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   11628:	b908      	cbnz	r0, 1162e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   1162a:	f004 f997 	bl	1595c <abort>
  TFLITE_DCHECK(node != nullptr);
   1162e:	2900      	cmp	r1, #0
   11630:	d0fb      	beq.n	1162a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   11632:	6849      	ldr	r1, [r1, #4]
   11634:	6d43      	ldr	r3, [r0, #84]	; 0x54
   11636:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
   1163a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
   1163e:	6851      	ldr	r1, [r2, #4]
   11640:	4718      	bx	r3

00011642 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
   11642:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11644:	6801      	ldr	r1, [r0, #0]
   11646:	2905      	cmp	r1, #5
   11648:	bfcc      	ite	gt
   1164a:	6843      	ldrgt	r3, [r0, #4]
   1164c:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
   1164e:	2200      	movs	r2, #0
    int buffer_size = 1;
   11650:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   11652:	428a      	cmp	r2, r1
   11654:	da04      	bge.n	11660 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   11656:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   1165a:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   1165c:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   1165e:	e7f8      	b.n	11652 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
   11660:	bd10      	pop	{r4, pc}

00011662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   11662:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   11664:	6805      	ldr	r5, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   11666:	9c04      	ldr	r4, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   11668:	2d04      	cmp	r5, #4
   1166a:	d001      	beq.n	11670 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   1166c:	f004 f976 	bl	1595c <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   11670:	2900      	cmp	r1, #0
   11672:	dbfb      	blt.n	1166c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   11674:	6845      	ldr	r5, [r0, #4]
   11676:	428d      	cmp	r5, r1
   11678:	ddf8      	ble.n	1166c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1167a:	2a00      	cmp	r2, #0
   1167c:	dbf6      	blt.n	1166c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   1167e:	6886      	ldr	r6, [r0, #8]
   11680:	4296      	cmp	r6, r2
   11682:	ddf3      	ble.n	1166c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   11684:	2b00      	cmp	r3, #0
   11686:	dbf1      	blt.n	1166c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   11688:	68c5      	ldr	r5, [r0, #12]
   1168a:	429d      	cmp	r5, r3
   1168c:	ddee      	ble.n	1166c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1168e:	2c00      	cmp	r4, #0
   11690:	dbec      	blt.n	1166c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   11692:	6900      	ldr	r0, [r0, #16]
   11694:	42a0      	cmp	r0, r4
   11696:	dde9      	ble.n	1166c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   11698:	fb01 2206 	mla	r2, r1, r6, r2
   1169c:	fb05 3302 	mla	r3, r5, r2, r3
}
   116a0:	fb00 4003 	mla	r0, r0, r3, r4
   116a4:	bd70      	pop	{r4, r5, r6, pc}

000116a6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   116a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   116a8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   116aa:	b90b      	cbnz	r3, 116b0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   116ac:	f004 f956 	bl	1595c <abort>
}
   116b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   116b4:	2138      	movs	r1, #56	; 0x38
   116b6:	4718      	bx	r3

000116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
   116b8:	b570      	push	{r4, r5, r6, lr}
   116ba:	4615      	mov	r5, r2
   116bc:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   116be:	f7ff ff71 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
   116c2:	4631      	mov	r1, r6
   116c4:	4604      	mov	r4, r0
   116c6:	4628      	mov	r0, r5
   116c8:	f7ff ff6c 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
   116cc:	4284      	cmp	r4, r0
   116ce:	d001      	beq.n	116d4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   116d0:	f004 f944 	bl	1595c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
   116d4:	bd70      	pop	{r4, r5, r6, pc}

000116d6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  if (stride == 0) return 0;
   116d6:	b123      	cbz	r3, 116e2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  switch (padding) {
   116d8:	2801      	cmp	r0, #1
   116da:	d004      	beq.n	116e6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>
   116dc:	2802      	cmp	r0, #2
   116de:	d007      	beq.n	116f0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>
   116e0:	2300      	movs	r3, #0
}
   116e2:	4618      	mov	r0, r3
   116e4:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   116e6:	4419      	add	r1, r3
   116e8:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
   116ea:	fb91 f3f3 	sdiv	r3, r1, r3
   116ee:	e7f8      	b.n	116e2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   116f0:	9800      	ldr	r0, [sp, #0]
   116f2:	3a01      	subs	r2, #1
   116f4:	4342      	muls	r2, r0
      return (image_size + stride - effective_filter_size) / stride;
   116f6:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   116f8:	3201      	adds	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
   116fa:	1a89      	subs	r1, r1, r2
   116fc:	e7f5      	b.n	116ea <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x14>

000116fe <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
  op_params.input_offset = -data.input_zero_point;
   116fe:	6913      	ldr	r3, [r2, #16]
   11700:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   11702:	b570      	push	{r4, r5, r6, lr}
  op_params.input_offset = -data.input_zero_point;
   11704:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   11706:	6953      	ldr	r3, [r2, #20]
   11708:	425b      	negs	r3, r3
   1170a:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   1170c:	6993      	ldr	r3, [r2, #24]
   1170e:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   11710:	69d3      	ldr	r3, [r2, #28]
   11712:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   11714:	6a13      	ldr	r3, [r2, #32]
                               const OpDataConv& data) {
   11716:	4615      	mov	r5, r2
  op_params.output_shift = -data.output_shift;
   11718:	425b      	negs	r3, r3
                               const OpDataConv& data) {
   1171a:	4604      	mov	r4, r0
  op_params.output_shift = -data.output_shift;
   1171c:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   1171e:	7808      	ldrb	r0, [r1, #0]
                               const OpDataConv& data) {
   11720:	460e      	mov	r6, r1
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   11722:	f000 f8ad 	bl	11880 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
   11726:	686b      	ldr	r3, [r5, #4]
   11728:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   1172a:	682b      	ldr	r3, [r5, #0]
   1172c:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   1172e:	68b3      	ldr	r3, [r6, #8]
   11730:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   11732:	6873      	ldr	r3, [r6, #4]
   11734:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   11736:	6973      	ldr	r3, [r6, #20]
   11738:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   1173a:	6933      	ldr	r3, [r6, #16]
   1173c:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   1173e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   11740:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   11742:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   11744:	7020      	strb	r0, [r4, #0]
  op_params.quantized_activation_max = data.output_activation_max;
   11746:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   11748:	4620      	mov	r0, r4
   1174a:	bd70      	pop	{r4, r5, r6, pc}

0001174c <_ZN6tflite13GetReciprocalEiiPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
   1174c:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   1174e:	fab0 f380 	clz	r3, r0
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   11752:	1ac9      	subs	r1, r1, r3
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
   11754:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   11756:	6011      	str	r1, [r2, #0]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
   11758:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   1175c:	f7f5 fba0 	bl	6ea0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return shifted_scale.raw();
}
   11760:	bd08      	pop	{r3, pc}

00011762 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   11762:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   11764:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   11766:	b90b      	cbnz	r3, 1176c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   11768:	f004 f8f8 	bl	1595c <abort>
}
   1176c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   11770:	2124      	movs	r1, #36	; 0x24
   11772:	4718      	bx	r3

00011774 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   11774:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   11776:	b538      	push	{r3, r4, r5, lr}
  inline int32_t DimensionsCount() const { return size_; }
   11778:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   1177a:	db01      	blt.n	11780 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   1177c:	42a1      	cmp	r1, r4
   1177e:	db01      	blt.n	11784 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   11780:	f004 f8ec 	bl	1595c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11784:	2c05      	cmp	r4, #5
   11786:	bfcc      	ite	gt
   11788:	6843      	ldrgt	r3, [r0, #4]
   1178a:	1d03      	addle	r3, r0, #4
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
   1178c:	2200      	movs	r2, #0
  int flat_size = 1;
   1178e:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   11790:	4291      	cmp	r1, r2
   11792:	bf18      	it	ne
   11794:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   11798:	f102 0201 	add.w	r2, r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   1179c:	bf08      	it	eq
   1179e:	2501      	moveq	r5, #1
  for (int i = 0; i < dims_count; ++i) {
   117a0:	4294      	cmp	r4, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   117a2:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   117a6:	dcf3      	bgt.n	11790 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
  }
  return flat_size;
}
   117a8:	bd38      	pop	{r3, r4, r5, pc}

000117aa <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
  op_params.input_offset = -op_data.input_zero_point;
   117aa:	694a      	ldr	r2, [r1, #20]
   117ac:	4252      	negs	r2, r2
   117ae:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   117b0:	698a      	ldr	r2, [r1, #24]
   117b2:	4252      	negs	r2, r2
   117b4:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   117b6:	69ca      	ldr	r2, [r1, #28]
   117b8:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   117ba:	680a      	ldr	r2, [r1, #0]
   117bc:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   117be:	684a      	ldr	r2, [r1, #4]
   117c0:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   117c2:	688a      	ldr	r2, [r1, #8]
   117c4:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   117c6:	68ca      	ldr	r2, [r1, #12]
   117c8:	6182      	str	r2, [r0, #24]
}
   117ca:	4770      	bx	lr

000117cc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   117cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   117d0:	b085      	sub	sp, #20
  if (data_type != kTfLiteFloat32) {
   117d2:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
   117d4:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
   117d8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   117dc:	4606      	mov	r6, r0
   117de:	460f      	mov	r7, r1
   117e0:	461d      	mov	r5, r3
  if (data_type != kTfLiteFloat32) {
   117e2:	d027      	beq.n	11834 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
   117e4:	2200      	movs	r2, #0
   117e6:	2300      	movs	r3, #0
   117e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   117ec:	ab02      	add	r3, sp, #8
   117ee:	e9cd 8300 	strd	r8, r3, [sp]
   117f2:	464a      	mov	r2, r9
   117f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   117f6:	4629      	mov	r1, r5
   117f8:	f7ef fdba 	bl	1370 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   117fc:	b9b8      	cbnz	r0, 1182e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   117fe:	1d21      	adds	r1, r4, #4
   11800:	4620      	mov	r0, r4
   11802:	ed9d 0b02 	vldr	d0, [sp, #8]
   11806:	f7f4 fb1b 	bl	5e40 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
   1180a:	692b      	ldr	r3, [r5, #16]
   1180c:	6163      	str	r3, [r4, #20]
    data->filter_zero_point = filter->params.zero_point;
   1180e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   11812:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
   11814:	f8d8 3010 	ldr.w	r3, [r8, #16]
   11818:	61e3      	str	r3, [r4, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
   1181a:	f104 030c 	add.w	r3, r4, #12
   1181e:	9300      	str	r3, [sp, #0]
   11820:	4642      	mov	r2, r8
   11822:	f104 0308 	add.w	r3, r4, #8
   11826:	4639      	mov	r1, r7
   11828:	4630      	mov	r0, r6
   1182a:	f7f4 fb99 	bl	5f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
   1182e:	b005      	add	sp, #20
   11830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
   11834:	2000      	movs	r0, #0
   11836:	e7fa      	b.n	1182e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

00011838 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   11838:	b570      	push	{r4, r5, r6, lr}
   1183a:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   1183c:	b109      	cbz	r1, 11842 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
   1183e:	684d      	ldr	r5, [r1, #4]
   11840:	b91d      	cbnz	r5, 1184a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
   11842:	2300      	movs	r3, #0
   11844:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   11846:	4620      	mov	r0, r4
   11848:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   1184a:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
   1184e:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   11850:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
   11852:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
   11856:	dc05      	bgt.n	11864 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11858:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   1185a:	4632      	mov	r2, r6
   1185c:	4629      	mov	r1, r5
   1185e:	f004 f884 	bl	1596a <memcpy>
  }
   11862:	e7f0      	b.n	11846 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
   11864:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   11868:	4293      	cmp	r3, r2
   1186a:	bfb4      	ite	lt
   1186c:	4630      	movlt	r0, r6
   1186e:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   11872:	f003 ffbf 	bl	157f4 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   11876:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
   11878:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1187a:	2b05      	cmp	r3, #5
   1187c:	dced      	bgt.n	1185a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
   1187e:	e7eb      	b.n	11858 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

00011880 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   11880:	2801      	cmp	r0, #1
   11882:	d002      	beq.n	1188a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   11884:	2802      	cmp	r0, #2
   11886:	bf18      	it	ne
   11888:	2000      	movne	r0, #0
  }
}
   1188a:	4770      	bx	lr

0001188c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
   1188c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  inline int32_t DimensionsCount() const { return size_; }
   11890:	6807      	ldr	r7, [r0, #0]
                                   const RuntimeShape& check_shape_0) {
   11892:	4604      	mov	r4, r0
   11894:	460d      	mov	r5, r1
   11896:	4690      	mov	r8, r2
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   11898:	2600      	movs	r6, #0
   1189a:	42be      	cmp	r6, r7
   1189c:	da10      	bge.n	118c0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   1189e:	42ae      	cmp	r6, r5
   118a0:	d00c      	beq.n	118bc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   118a2:	4631      	mov	r1, r6
   118a4:	4620      	mov	r0, r4
   118a6:	f7ff fe7d 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
   118aa:	4631      	mov	r1, r6
   118ac:	4681      	mov	r9, r0
   118ae:	4640      	mov	r0, r8
   118b0:	f7ff fe78 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
   118b4:	4581      	cmp	r9, r0
   118b6:	d001      	beq.n	118bc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   118b8:	f004 f850 	bl	1595c <abort>
  for (int i = 0; i < dims_count; ++i) {
   118bc:	3601      	adds	r6, #1
   118be:	e7ec      	b.n	1189a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   118c0:	2d00      	cmp	r5, #0
   118c2:	dbf9      	blt.n	118b8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   118c4:	42bd      	cmp	r5, r7
   118c6:	daf7      	bge.n	118b8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   118c8:	2f05      	cmp	r7, #5
   118ca:	bfcc      	ite	gt
   118cc:	6864      	ldrgt	r4, [r4, #4]
   118ce:	3404      	addle	r4, #4
  int flat_size = 1;
   118d0:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   118d2:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   118d4:	429d      	cmp	r5, r3
   118d6:	bf18      	it	ne
   118d8:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   118dc:	f103 0301 	add.w	r3, r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   118e0:	bf08      	it	eq
   118e2:	2201      	moveq	r2, #1
  for (int i = 0; i < dims_count; ++i) {
   118e4:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   118e6:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   118ea:	dcf3      	bgt.n	118d4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
   118ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000118f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   118f0:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   118f2:	2100      	movs	r1, #0
   118f4:	f7f5 ff02 	bl	76fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   118f8:	bd08      	pop	{r3, pc}

000118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   118fa:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   118fc:	f7f5 faac 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   11900:	bd08      	pop	{r3, pc}

00011902 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   11902:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   11904:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   11906:	b90b      	cbnz	r3, 1190c <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0xa>
   11908:	f004 f828 	bl	1595c <abort>
}
   1190c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   11910:	2124      	movs	r1, #36	; 0x24
   11912:	4718      	bx	r3

00011914 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8_t* input_data,
                        const RuntimeShape& output_shape,
                        uint8_t* output_data) {
   11914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11918:	b097      	sub	sp, #92	; 0x5c
   1191a:	4698      	mov	r8, r3
   1191c:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1191e:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   11922:	429a      	cmp	r2, r3
                        uint8_t* output_data) {
   11924:	4604      	mov	r4, r0
   11926:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   11928:	dd01      	ble.n	1192e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   1192a:	f004 f817 	bl	1595c <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1192e:	680b      	ldr	r3, [r1, #0]
   11930:	2b04      	cmp	r3, #4
   11932:	d1fa      	bne.n	1192a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   11934:	f8d8 3000 	ldr.w	r3, [r8]
   11938:	2b04      	cmp	r3, #4
   1193a:	d1f6      	bne.n	1192a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1193c:	2300      	movs	r3, #0
   1193e:	4619      	mov	r1, r3
   11940:	4642      	mov	r2, r8
   11942:	4638      	mov	r0, r7
   11944:	f7ff feb8 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11948:	2303      	movs	r3, #3
   1194a:	4619      	mov	r1, r3
   1194c:	4642      	mov	r2, r8
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1194e:	900b      	str	r0, [sp, #44]	; 0x2c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11950:	4638      	mov	r0, r7
   11952:	f7ff feb1 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   11956:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11958:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_height = input_shape.Dims(1);
   1195a:	4638      	mov	r0, r7
   1195c:	f7ff fe22 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   11960:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   11962:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_width = input_shape.Dims(2);
   11964:	4638      	mov	r0, r7
   11966:	f7ff fe1d 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1196a:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1196c:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
   1196e:	4640      	mov	r0, r8
   11970:	f7ff fe18 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   11974:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   11976:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
   11978:	4640      	mov	r0, r8
   1197a:	f7ff fe13 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   1197e:	68e3      	ldr	r3, [r4, #12]
   11980:	9311      	str	r3, [sp, #68]	; 0x44
  const int stride_width = params.stride_width;
   11982:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   11984:	9010      	str	r0, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   11986:	9312      	str	r3, [sp, #72]	; 0x48
  for (int batch = 0; batch < batches; ++batch) {
   11988:	2100      	movs	r1, #0
   1198a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1198c:	4299      	cmp	r1, r3
   1198e:	f280 8090 	bge.w	11ab2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19e>
   11992:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   11996:	f8cd b010 	str.w	fp, [sp, #16]
   1199a:	9b04      	ldr	r3, [sp, #16]
   1199c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1199e:	4293      	cmp	r3, r2
   119a0:	f280 8085 	bge.w	11aae <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   119a4:	2300      	movs	r3, #0
   119a6:	9303      	str	r3, [sp, #12]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   119a8:	9305      	str	r3, [sp, #20]
   119aa:	9b05      	ldr	r3, [sp, #20]
   119ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
   119ae:	4293      	cmp	r3, r2
   119b0:	da77      	bge.n	11aa2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x18e>
        for (int channel = 0; channel < depth; ++channel) {
   119b2:	2300      	movs	r3, #0
   119b4:	9302      	str	r3, [sp, #8]
   119b6:	9b02      	ldr	r3, [sp, #8]
   119b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   119ba:	4293      	cmp	r3, r2
   119bc:	da69      	bge.n	11a92 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   119be:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
          const int in_x_origin =
   119c2:	9b03      	ldr	r3, [sp, #12]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   119c4:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
          const int in_x_origin =
   119c8:	eba3 0309 	sub.w	r3, r3, r9
   119cc:	9308      	str	r3, [sp, #32]
          const int in_y_origin =
   119ce:	ebab 0306 	sub.w	r3, fp, r6
   119d2:	9309      	str	r3, [sp, #36]	; 0x24
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   119d4:	9b03      	ldr	r3, [sp, #12]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   119d6:	9a08      	ldr	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   119d8:	eba9 0903 	sub.w	r9, r9, r3
              std::min(params.filter_width, input_width - in_x_origin);
   119dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   119de:	1a9a      	subs	r2, r3, r2
   119e0:	69a3      	ldr	r3, [r4, #24]
   119e2:	429a      	cmp	r2, r3
   119e4:	bfa8      	it	ge
   119e6:	461a      	movge	r2, r3
   119e8:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   119ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   119ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   119ee:	1a9a      	subs	r2, r3, r2
   119f0:	6963      	ldr	r3, [r4, #20]
   119f2:	429a      	cmp	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   119f4:	eba6 060b 	sub.w	r6, r6, fp
   119f8:	bfa8      	it	ge
   119fa:	461a      	movge	r2, r3
          int32_t acc = 0;
   119fc:	2500      	movs	r5, #0
   119fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
          const int filter_y_start = std::max(0, -in_y_origin);
   11a02:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    min(const _Tp& __a, const _Tp& __b)
   11a06:	920a      	str	r2, [sp, #40]	; 0x28
          int filter_count = 0;
   11a08:	46aa      	mov	sl, r5
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   11a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11a0c:	429e      	cmp	r6, r3
   11a0e:	da24      	bge.n	11a5a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x146>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   11a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11a12:	f8cd 9018 	str.w	r9, [sp, #24]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   11a16:	18f2      	adds	r2, r6, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11a18:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   11a1c:	4283      	cmp	r3, r0
   11a1e:	da12      	bge.n	11a46 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x132>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   11a20:	9b02      	ldr	r3, [sp, #8]
   11a22:	9806      	ldr	r0, [sp, #24]
   11a24:	9300      	str	r3, [sp, #0]
   11a26:	9b08      	ldr	r3, [sp, #32]
   11a28:	4403      	add	r3, r0
   11a2a:	4638      	mov	r0, r7
   11a2c:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   11a30:	f7ff fe17 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
   11a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11a36:	5c1b      	ldrb	r3, [r3, r0]
   11a38:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11a3a:	9b06      	ldr	r3, [sp, #24]
   11a3c:	3301      	adds	r3, #1
   11a3e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   11a42:	9306      	str	r3, [sp, #24]
   11a44:	e7e8      	b.n	11a18 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
   11a46:	9b07      	ldr	r3, [sp, #28]
   11a48:	9a07      	ldr	r2, [sp, #28]
   11a4a:	eba3 0309 	sub.w	r3, r3, r9
   11a4e:	454a      	cmp	r2, r9
   11a50:	bfb8      	it	lt
   11a52:	2300      	movlt	r3, #0
   11a54:	449a      	add	sl, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   11a56:	3601      	adds	r6, #1
   11a58:	e7d7      	b.n	11a0a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf6>
              filter_count++;
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
   11a5a:	eb05 056a 	add.w	r5, r5, sl, asr #1
   11a5e:	fbb5 fafa 	udiv	sl, r5, sl
   11a62:	69e5      	ldr	r5, [r4, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   11a64:	9b02      	ldr	r3, [sp, #8]
   11a66:	9300      	str	r3, [sp, #0]
   11a68:	45aa      	cmp	sl, r5
   11a6a:	bfb8      	it	lt
   11a6c:	46aa      	movlt	sl, r5
   11a6e:	6a25      	ldr	r5, [r4, #32]
   11a70:	9106      	str	r1, [sp, #24]
   11a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11a76:	45aa      	cmp	sl, r5
   11a78:	4640      	mov	r0, r8
   11a7a:	bfa8      	it	ge
   11a7c:	46aa      	movge	sl, r5
   11a7e:	f7ff fdf0 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   11a82:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   11a84:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   11a86:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   11a8a:	9b02      	ldr	r3, [sp, #8]
   11a8c:	3301      	adds	r3, #1
   11a8e:	9302      	str	r3, [sp, #8]
   11a90:	e791      	b.n	119b6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   11a92:	9b05      	ldr	r3, [sp, #20]
   11a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11a96:	3301      	adds	r3, #1
   11a98:	9305      	str	r3, [sp, #20]
   11a9a:	9b03      	ldr	r3, [sp, #12]
   11a9c:	4413      	add	r3, r2
   11a9e:	9303      	str	r3, [sp, #12]
   11aa0:	e783      	b.n	119aa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x96>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   11aa2:	9b04      	ldr	r3, [sp, #16]
   11aa4:	3301      	adds	r3, #1
   11aa6:	9304      	str	r3, [sp, #16]
   11aa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11aaa:	449b      	add	fp, r3
   11aac:	e775      	b.n	1199a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   11aae:	3101      	adds	r1, #1
   11ab0:	e76b      	b.n	1198a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
              static_cast<uint8_t>(acc);
        }
      }
    }
  }
}
   11ab2:	b017      	add	sp, #92	; 0x5c
   11ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011ab8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   11ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11abc:	ed2d 8b04 	vpush	{d8-d9}
   11ac0:	461f      	mov	r7, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   11ac2:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   11ac4:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   11ac6:	2b04      	cmp	r3, #4
                    float* output_data) {
   11ac8:	4604      	mov	r4, r0
   11aca:	460e      	mov	r6, r1
   11acc:	9211      	str	r2, [sp, #68]	; 0x44
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   11ace:	d001      	beq.n	11ad4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   11ad0:	f003 ff44 	bl	1595c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   11ad4:	683b      	ldr	r3, [r7, #0]
   11ad6:	2b04      	cmp	r3, #4
   11ad8:	d1fa      	bne.n	11ad0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   11ada:	2300      	movs	r3, #0
   11adc:	4619      	mov	r1, r3
   11ade:	463a      	mov	r2, r7
   11ae0:	4630      	mov	r0, r6
   11ae2:	f7ff fde9 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11ae6:	2303      	movs	r3, #3
   11ae8:	4619      	mov	r1, r3
   11aea:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   11aec:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11aee:	4630      	mov	r0, r6
   11af0:	f7ff fde2 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   11af4:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11af6:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   11af8:	4630      	mov	r0, r6
   11afa:	f7ff fd53 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   11afe:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   11b00:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   11b02:	4630      	mov	r0, r6
   11b04:	f7ff fd4e 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   11b08:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   11b0a:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
   11b0c:	4638      	mov	r0, r7
   11b0e:	f7ff fd49 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   11b12:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   11b14:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   11b16:	4638      	mov	r0, r7
   11b18:	f7ff fd44 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   11b1c:	68e3      	ldr	r3, [r4, #12]
   11b1e:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   11b20:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   11b22:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   11b24:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   11b26:	2100      	movs	r1, #0
   11b28:	9b08      	ldr	r3, [sp, #32]
   11b2a:	4299      	cmp	r1, r3
   11b2c:	f280 8099 	bge.w	11c62 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1aa>
   11b30:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   11b34:	46da      	mov	sl, fp
   11b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11b38:	459a      	cmp	sl, r3
   11b3a:	f280 8090 	bge.w	11c5e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a6>
   11b3e:	f04f 0900 	mov.w	r9, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   11b42:	f8cd 900c 	str.w	r9, [sp, #12]
   11b46:	9b03      	ldr	r3, [sp, #12]
   11b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11b4a:	4293      	cmp	r3, r2
   11b4c:	f280 8082 	bge.w	11c54 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
        for (int channel = 0; channel < depth; ++channel) {
   11b50:	2300      	movs	r3, #0
   11b52:	9302      	str	r3, [sp, #8]
   11b54:	9b02      	ldr	r3, [sp, #8]
   11b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11b58:	4293      	cmp	r3, r2
   11b5a:	da75      	bge.n	11c48 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x190>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   11b5c:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   11b60:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          const int in_x_origin =
   11b64:	eba9 0308 	sub.w	r3, r9, r8
   11b68:	9305      	str	r3, [sp, #20]
          const int in_y_origin =
   11b6a:	ebab 0305 	sub.w	r3, fp, r5
   11b6e:	9306      	str	r3, [sp, #24]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   11b70:	eba8 0309 	sub.w	r3, r8, r9
   11b74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   11b78:	9a05      	ldr	r2, [sp, #20]
   11b7a:	9304      	str	r3, [sp, #16]
   11b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11b7e:	1a9a      	subs	r2, r3, r2
   11b80:	69a3      	ldr	r3, [r4, #24]
   11b82:	429a      	cmp	r2, r3
   11b84:	bfa8      	it	ge
   11b86:	461a      	movge	r2, r3
   11b88:	920b      	str	r2, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   11b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11b8c:	9a06      	ldr	r2, [sp, #24]
   11b8e:	1a9a      	subs	r2, r3, r2
   11b90:	6963      	ldr	r3, [r4, #20]
   11b92:	429a      	cmp	r2, r3
   11b94:	bfa8      	it	ge
   11b96:	461a      	movge	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   11b98:	eba5 050b 	sub.w	r5, r5, fp
          float max = std::numeric_limits<float>::lowest();
   11b9c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   11ba0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   11ba4:	9207      	str	r2, [sp, #28]
   11ba6:	9315      	str	r3, [sp, #84]	; 0x54
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   11ba8:	9b07      	ldr	r3, [sp, #28]
   11baa:	429d      	cmp	r5, r3
   11bac:	da26      	bge.n	11bfc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x144>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   11bae:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11bb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   11bb4:	18ea      	adds	r2, r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      if (__a < __b)
   11bb8:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   11bbc:	4598      	cmp	r8, r3
   11bbe:	da1b      	bge.n	11bf8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   11bc0:	9b02      	ldr	r3, [sp, #8]
   11bc2:	9300      	str	r3, [sp, #0]
   11bc4:	9b05      	ldr	r3, [sp, #20]
   11bc6:	4630      	mov	r0, r6
   11bc8:	4443      	add	r3, r8
   11bca:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
   11bce:	f7ff fd48 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   11bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11bd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   11bd8:	edd0 7a00 	vldr	s15, [r0]
   11bdc:	eef4 7ac8 	vcmpe.f32	s15, s16
      return __a;
   11be0:	ab15      	add	r3, sp, #84	; 0x54
      if (__a < __b)
   11be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   11be6:	bfd8      	it	le
   11be8:	4618      	movle	r0, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11bea:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
              max = std::max(
   11bee:	6803      	ldr	r3, [r0, #0]
   11bf0:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11bf2:	f108 0801 	add.w	r8, r8, #1
   11bf6:	e7de      	b.n	11bb6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfe>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   11bf8:	3501      	adds	r5, #1
   11bfa:	e7d5      	b.n	11ba8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf0>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   11bfc:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   11c00:	9b02      	ldr	r3, [sp, #8]
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   11c02:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   11c06:	9300      	str	r3, [sp, #0]
   11c08:	4652      	mov	r2, sl
   11c0a:	9b03      	ldr	r3, [sp, #12]
   11c0c:	9104      	str	r1, [sp, #16]
   11c0e:	4638      	mov	r0, r7
   11c10:	f7ff fd27 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   11c14:	eeb4 9ac8 	vcmpe.f32	s18, s16
                                           params.float_activation_max);
   11c18:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   11c1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
        for (int channel = 0; channel < depth; ++channel) {
   11c1e:	9904      	ldr	r1, [sp, #16]
   11c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c24:	bf58      	it	pl
   11c26:	eeb0 8a49 	vmovpl.f32	s16, s18
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   11c2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	return __b;
   11c2e:	eef4 8a48 	vcmp.f32	s17, s16
        for (int channel = 0; channel < depth; ++channel) {
   11c32:	9b02      	ldr	r3, [sp, #8]
   11c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c38:	bf48      	it	mi
   11c3a:	eeb0 8a68 	vmovmi.f32	s16, s17
   11c3e:	3301      	adds	r3, #1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   11c40:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   11c44:	9302      	str	r3, [sp, #8]
   11c46:	e785      	b.n	11b54 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   11c48:	9b03      	ldr	r3, [sp, #12]
   11c4a:	3301      	adds	r3, #1
   11c4c:	9303      	str	r3, [sp, #12]
   11c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11c50:	4499      	add	r9, r3
   11c52:	e778      	b.n	11b46 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   11c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11c56:	f10a 0a01 	add.w	sl, sl, #1
   11c5a:	449b      	add	fp, r3
   11c5c:	e76b      	b.n	11b36 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x7e>
  for (int batch = 0; batch < batches; ++batch) {
   11c5e:	3101      	adds	r1, #1
   11c60:	e762      	b.n	11b28 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x70>
        }
      }
    }
  }
}
   11c62:	b017      	add	sp, #92	; 0x5c
   11c64:	ecbd 8b04 	vpop	{d8-d9}
   11c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011c6c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
   11c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c70:	b099      	sub	sp, #100	; 0x64
   11c72:	461f      	mov	r7, r3
   11c74:	920a      	str	r2, [sp, #40]	; 0x28
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   11c76:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   11c7a:	429a      	cmp	r2, r3
                    uint8_t* output_data) {
   11c7c:	4604      	mov	r4, r0
   11c7e:	460e      	mov	r6, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   11c80:	dd01      	ble.n	11c86 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   11c82:	f003 fe6b 	bl	1595c <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   11c86:	2a00      	cmp	r2, #0
   11c88:	dbfb      	blt.n	11c82 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   11c8a:	2bff      	cmp	r3, #255	; 0xff
   11c8c:	dcf9      	bgt.n	11c82 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   11c8e:	680b      	ldr	r3, [r1, #0]
   11c90:	2b04      	cmp	r3, #4
   11c92:	d1f6      	bne.n	11c82 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   11c94:	683b      	ldr	r3, [r7, #0]
   11c96:	2b04      	cmp	r3, #4
   11c98:	d1f3      	bne.n	11c82 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   11c9a:	2300      	movs	r3, #0
   11c9c:	4619      	mov	r1, r3
   11c9e:	463a      	mov	r2, r7
   11ca0:	4630      	mov	r0, r6
   11ca2:	f7ff fd09 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11ca6:	2303      	movs	r3, #3
   11ca8:	4619      	mov	r1, r3
   11caa:	463a      	mov	r2, r7
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   11cac:	900c      	str	r0, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11cae:	4630      	mov	r0, r6
   11cb0:	f7ff fd02 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   11cb4:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11cb6:	900d      	str	r0, [sp, #52]	; 0x34
  const int input_height = input_shape.Dims(1);
   11cb8:	4630      	mov	r0, r6
   11cba:	f7ff fc73 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   11cbe:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   11cc0:	900e      	str	r0, [sp, #56]	; 0x38
  const int input_width = input_shape.Dims(2);
   11cc2:	4630      	mov	r0, r6
   11cc4:	f7ff fc6e 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   11cc8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   11cca:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
   11ccc:	4638      	mov	r0, r7
   11cce:	f7ff fc69 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   11cd2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   11cd4:	9011      	str	r0, [sp, #68]	; 0x44
  const int output_width = output_shape.Dims(2);
   11cd6:	4638      	mov	r0, r7
   11cd8:	f7ff fc64 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
   11cdc:	68e3      	ldr	r3, [r4, #12]
   11cde:	9313      	str	r3, [sp, #76]	; 0x4c
  const int stride_width = params.stride_width;
   11ce0:	6923      	ldr	r3, [r4, #16]
  const int output_width = output_shape.Dims(2);
   11ce2:	9012      	str	r0, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   11ce4:	9314      	str	r3, [sp, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
   11ce6:	f04f 0b00 	mov.w	fp, #0
   11cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11cec:	459b      	cmp	fp, r3
   11cee:	f280 808d 	bge.w	11e0c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a0>
   11cf2:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   11cf6:	46d1      	mov	r9, sl
   11cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11cfa:	4599      	cmp	r9, r3
   11cfc:	f280 8083 	bge.w	11e06 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19a>
   11d00:	f04f 0800 	mov.w	r8, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   11d04:	f8cd 8010 	str.w	r8, [sp, #16]
   11d08:	9b04      	ldr	r3, [sp, #16]
   11d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11d0c:	4293      	cmp	r3, r2
   11d0e:	da75      	bge.n	11dfc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
        for (int channel = 0; channel < depth; ++channel) {
   11d10:	2300      	movs	r3, #0
   11d12:	9303      	str	r3, [sp, #12]
   11d14:	9b03      	ldr	r3, [sp, #12]
   11d16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11d18:	4293      	cmp	r3, r2
   11d1a:	da69      	bge.n	11df0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x184>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
   11d1c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   11d20:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
          const int in_x_origin =
   11d24:	eba8 0203 	sub.w	r2, r8, r3
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   11d28:	eba3 0308 	sub.w	r3, r3, r8
          const int in_x_origin =
   11d2c:	9207      	str	r2, [sp, #28]
          const int in_y_origin =
   11d2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11d32:	ebaa 0205 	sub.w	r2, sl, r5
   11d36:	9208      	str	r2, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   11d38:	9306      	str	r3, [sp, #24]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   11d3a:	9a07      	ldr	r2, [sp, #28]
   11d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11d3e:	1a9a      	subs	r2, r3, r2
   11d40:	69a3      	ldr	r3, [r4, #24]
   11d42:	429a      	cmp	r2, r3
   11d44:	bfa8      	it	ge
   11d46:	461a      	movge	r2, r3
   11d48:	920b      	str	r2, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   11d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11d4c:	9a08      	ldr	r2, [sp, #32]
   11d4e:	1a9a      	subs	r2, r3, r2
   11d50:	6963      	ldr	r3, [r4, #20]
   11d52:	429a      	cmp	r2, r3
   11d54:	bfa8      	it	ge
   11d56:	461a      	movge	r2, r3
          const int filter_y_start = std::max(0, -in_y_origin);
   11d58:	eba5 050a 	sub.w	r5, r5, sl
          uint8_t max = 0;
   11d5c:	2300      	movs	r3, #0
   11d5e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    min(const _Tp& __a, const _Tp& __b)
   11d62:	9210      	str	r2, [sp, #64]	; 0x40
   11d64:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   11d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11d6a:	429d      	cmp	r5, r3
   11d6c:	da28      	bge.n	11dc0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x154>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11d6e:	9b06      	ldr	r3, [sp, #24]
   11d70:	9305      	str	r3, [sp, #20]
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   11d72:	9b08      	ldr	r3, [sp, #32]
   11d74:	18ea      	adds	r2, r5, r3
      if (__a < __b)
   11d76:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11d7a:	9905      	ldr	r1, [sp, #20]
   11d7c:	9309      	str	r3, [sp, #36]	; 0x24
   11d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11d80:	428b      	cmp	r3, r1
   11d82:	dd1b      	ble.n	11dbc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x150>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   11d84:	9b03      	ldr	r3, [sp, #12]
   11d86:	9300      	str	r3, [sp, #0]
   11d88:	460b      	mov	r3, r1
   11d8a:	9907      	ldr	r1, [sp, #28]
   11d8c:	9215      	str	r2, [sp, #84]	; 0x54
   11d8e:	440b      	add	r3, r1
   11d90:	4630      	mov	r0, r6
   11d92:	4659      	mov	r1, fp
   11d94:	f7ff fc65 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   11d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d9c:	4403      	add	r3, r0
   11d9e:	5c10      	ldrb	r0, [r2, r0]
   11da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11da2:	4290      	cmp	r0, r2
      return __a;
   11da4:	f10d 025f 	add.w	r2, sp, #95	; 0x5f
   11da8:	bf98      	it	ls
   11daa:	4613      	movls	r3, r2
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11dac:	9a15      	ldr	r2, [sp, #84]	; 0x54
              max = std::max(
   11dae:	781b      	ldrb	r3, [r3, #0]
   11db0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   11db4:	9b05      	ldr	r3, [sp, #20]
   11db6:	3301      	adds	r3, #1
   11db8:	9305      	str	r3, [sp, #20]
   11dba:	e7dc      	b.n	11d76 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x10a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   11dbc:	3501      	adds	r5, #1
   11dbe:	e7d3      	b.n	11d68 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xfc>
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
          max = std::min<uint8_t>(max, params.quantized_activation_max);
   11dc0:	7f25      	ldrb	r5, [r4, #28]
   11dc2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
   11dc6:	429d      	cmp	r5, r3
   11dc8:	bf38      	it	cc
   11dca:	461d      	movcc	r5, r3
   11dcc:	f894 3020 	ldrb.w	r3, [r4, #32]
   11dd0:	429d      	cmp	r5, r3
   11dd2:	bf28      	it	cs
   11dd4:	461d      	movcs	r5, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   11dd6:	9b03      	ldr	r3, [sp, #12]
   11dd8:	9300      	str	r3, [sp, #0]
   11dda:	464a      	mov	r2, r9
   11ddc:	9b04      	ldr	r3, [sp, #16]
   11dde:	4659      	mov	r1, fp
   11de0:	4638      	mov	r0, r7
   11de2:	f7ff fc3e 	bl	11662 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   11de6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11de8:	541d      	strb	r5, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   11dea:	9b03      	ldr	r3, [sp, #12]
   11dec:	3301      	adds	r3, #1
   11dee:	e790      	b.n	11d12 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa6>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   11df0:	9b04      	ldr	r3, [sp, #16]
   11df2:	3301      	adds	r3, #1
   11df4:	9304      	str	r3, [sp, #16]
   11df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11df8:	4498      	add	r8, r3
   11dfa:	e785      	b.n	11d08 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   11dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11dfe:	f109 0901 	add.w	r9, r9, #1
   11e02:	449a      	add	sl, r3
   11e04:	e778      	b.n	11cf8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8c>
  for (int batch = 0; batch < batches; ++batch) {
   11e06:	f10b 0b01 	add.w	fp, fp, #1
   11e0a:	e76e      	b.n	11cea <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8_t>(max);
        }
      }
    }
  }
}
   11e0c:	b019      	add	sp, #100	; 0x64
   11e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011e12 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
                             OpData* data) {
   11e12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e16:	ed2d 8b02 	vpush	{d8}
   11e1a:	ee08 3a90 	vmov	s17, r3
  return t->dims->data[dim];
   11e1e:	6893      	ldr	r3, [r2, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   11e20:	f8d1 b00c 	ldr.w	fp, [r1, #12]
   11e24:	68df      	ldr	r7, [r3, #12]
   11e26:	f891 a000 	ldrb.w	sl, [r1]
                             OpData* data) {
   11e2a:	b087      	sub	sp, #28
      params->stride_height, params->stride_width,
   11e2c:	e9d1 8901 	ldrd	r8, r9, [r1, #4]
                             OpData* data) {
   11e30:	4616      	mov	r6, r2
   11e32:	689a      	ldr	r2, [r3, #8]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   11e34:	690b      	ldr	r3, [r1, #16]
   11e36:	9303      	str	r3, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   11e38:	2301      	movs	r3, #1
                             OpData* data) {
   11e3a:	460d      	mov	r5, r1
   11e3c:	9204      	str	r2, [sp, #16]
   11e3e:	9300      	str	r3, [sp, #0]
   11e40:	465a      	mov	r2, fp
   11e42:	4643      	mov	r3, r8
   11e44:	4639      	mov	r1, r7
   11e46:	ee08 0a10 	vmov	s16, r0
   11e4a:	4650      	mov	r0, sl
   11e4c:	f7ff fc43 	bl	116d6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   11e50:	2301      	movs	r3, #1
   11e52:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   11e56:	9005      	str	r0, [sp, #20]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   11e58:	9300      	str	r3, [sp, #0]
   11e5a:	4650      	mov	r0, sl
   11e5c:	464b      	mov	r3, r9
   11e5e:	f7ff fc3a 	bl	116d6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
   11e62:	9b03      	ldr	r3, [sp, #12]
   11e64:	9c12      	ldr	r4, [sp, #72]	; 0x48
   11e66:	3801      	subs	r0, #1
   11e68:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
   11e6c:	9b04      	ldr	r3, [sp, #16]
    CalculateActivationRange(params->activation, &data->activation_min_f32,
   11e6e:	7d28      	ldrb	r0, [r5, #20]
   11e70:	eba9 0903 	sub.w	r9, r9, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
   11e74:	9b05      	ldr	r3, [sp, #20]
   11e76:	3b01      	subs	r3, #1
   11e78:	fb08 b303 	mla	r3, r8, r3, fp
  int total_padding =
   11e7c:	1bdb      	subs	r3, r3, r7
  total_padding = total_padding > 0 ? total_padding : 0;
   11e7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
   11e82:	105a      	asrs	r2, r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   11e84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  *offset = total_padding % 2;
   11e88:	f003 0301 	and.w	r3, r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
   11e8c:	60a3      	str	r3, [r4, #8]
   11e8e:	f009 0301 	and.w	r3, r9, #1
   11e92:	60e3      	str	r3, [r4, #12]
  if (input->type == kTfLiteFloat32) {
   11e94:	7833      	ldrb	r3, [r6, #0]
      params->filter_width, params->padding, &out_height, &out_width);
   11e96:	6022      	str	r2, [r4, #0]
  if (input->type == kTfLiteFloat32) {
   11e98:	2b01      	cmp	r3, #1
  return total_padding / 2;
   11e9a:	ea4f 0269 	mov.w	r2, r9, asr #1
      params->filter_width, params->padding, &out_height, &out_width);
   11e9e:	6062      	str	r2, [r4, #4]
  if (input->type == kTfLiteFloat32) {
   11ea0:	d10e      	bne.n	11ec0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xae>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
   11ea2:	f104 0220 	add.w	r2, r4, #32
   11ea6:	f104 011c 	add.w	r1, r4, #28
   11eaa:	f7f5 fd65 	bl	7978 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  data->buffer_idx = -1;
   11eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11eb2:	6123      	str	r3, [r4, #16]
  return kTfLiteOk;
   11eb4:	2000      	movs	r0, #0
}
   11eb6:	b007      	add	sp, #28
   11eb8:	ecbd 8b02 	vpop	{d8}
   11ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   11ec0:	f104 0318 	add.w	r3, r4, #24
   11ec4:	9300      	str	r3, [sp, #0]
   11ec6:	4601      	mov	r1, r0
   11ec8:	ee18 2a90 	vmov	r2, s17
   11ecc:	ee18 0a10 	vmov	r0, s16
   11ed0:	f104 0314 	add.w	r3, r4, #20
   11ed4:	f7f4 f844 	bl	5f60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   11ed8:	2800      	cmp	r0, #0
   11eda:	d1ec      	bne.n	11eb6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa4>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
   11edc:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   11ee0:	429a      	cmp	r2, r3
   11ee2:	dde4      	ble.n	11eae <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x9c>
   11ee4:	f003 fd3a 	bl	1595c <abort>

00011ee8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
   11ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   11eec:	690f      	ldr	r7, [r1, #16]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
   11eee:	b08f      	sub	sp, #60	; 0x3c
   11ef0:	4604      	mov	r4, r0
   11ef2:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   11ef4:	b90f      	cbnz	r7, 11efa <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x12>
   11ef6:	f003 fd31 	bl	1595c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   11efa:	f8d1 9014 	ldr.w	r9, [r1, #20]
   11efe:	f1b9 0f00 	cmp.w	r9, #0
   11f02:	d0f8      	beq.n	11ef6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   11f04:	2200      	movs	r2, #0
   11f06:	f7ff fb2d 	bl	11564 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   11f0a:	4629      	mov	r1, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   11f0c:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   11f0e:	2200      	movs	r2, #0
   11f10:	4620      	mov	r0, r4
   11f12:	f7ff fb2a 	bl	1156a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
   11f16:	9700      	str	r7, [sp, #0]
   11f18:	4603      	mov	r3, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   11f1a:	4680      	mov	r8, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
   11f1c:	4632      	mov	r2, r6
   11f1e:	4649      	mov	r1, r9
   11f20:	4620      	mov	r0, r4
   11f22:	f7ff ff76 	bl	11e12 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
   11f26:	4605      	mov	r5, r0
   11f28:	bb70      	cbnz	r0, 11f88 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
  if (input->type == kTfLiteInt8) {
   11f2a:	7833      	ldrb	r3, [r6, #0]
   11f2c:	2b09      	cmp	r3, #9
   11f2e:	d12b      	bne.n	11f88 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    RuntimeShape input_shape = GetTensorShape(input);
   11f30:	4631      	mov	r1, r6
   11f32:	a802      	add	r0, sp, #8
   11f34:	f7ff fb47 	bl	115c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   11f38:	9b02      	ldr	r3, [sp, #8]
   11f3a:	2b04      	cmp	r3, #4
   11f3c:	d1db      	bne.n	11ef6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
    RuntimeShape output_shape = GetTensorShape(output);
   11f3e:	4641      	mov	r1, r8
   11f40:	a808      	add	r0, sp, #32
   11f42:	f7ff fb40 	bl	115c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   11f46:	9b08      	ldr	r3, [sp, #32]
   11f48:	2b04      	cmp	r3, #4
   11f4a:	d1d4      	bne.n	11ef6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11f4c:	2303      	movs	r3, #3
   11f4e:	4619      	mov	r1, r3
   11f50:	aa08      	add	r2, sp, #32
   11f52:	a802      	add	r0, sp, #8
   11f54:	f7ff fbb0 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_width = output_shape.Dims(2);
   11f58:	2102      	movs	r1, #2
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   11f5a:	4606      	mov	r6, r0
    const int output_width = output_shape.Dims(2);
   11f5c:	a808      	add	r0, sp, #32
   11f5e:	f7ff fb21 	bl	115a4 <_ZNK6tflite12RuntimeShape4DimsEi>
        arm_avgpool_s8_get_buffer_size(output_width, depth);
   11f62:	4631      	mov	r1, r6
   11f64:	f002 f9e8 	bl	14338 <arm_avgpool_s8_get_buffer_size>
    if (buffer_size > 0) {
   11f68:	1e01      	subs	r1, r0, #0
   11f6a:	dd11      	ble.n	11f90 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   11f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11f6e:	4620      	mov	r0, r4
   11f70:	f107 0210 	add.w	r2, r7, #16
   11f74:	4798      	blx	r3
   11f76:	4604      	mov	r4, r0
   11f78:	b168      	cbz	r0, 11f96 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xae>
   11f7a:	a808      	add	r0, sp, #32
   11f7c:	f7ff fb07 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
   11f80:	a802      	add	r0, sp, #8
   11f82:	f7ff fb04 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
   11f86:	4625      	mov	r5, r4
}
   11f88:	4628      	mov	r0, r5
   11f8a:	b00f      	add	sp, #60	; 0x3c
   11f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      data->buffer_idx = -1;
   11f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f94:	613b      	str	r3, [r7, #16]
    RuntimeShape output_shape = GetTensorShape(output);
   11f96:	a808      	add	r0, sp, #32
   11f98:	f7ff faf9 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = GetTensorShape(input);
   11f9c:	a802      	add	r0, sp, #8
   11f9e:	f7ff faf6 	bl	1158e <_ZN6tflite12RuntimeShapeD1Ev>
   11fa2:	e7f1      	b.n	11f88 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

00011fa4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   11fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11fa6:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
   11fa8:	4605      	mov	r5, r0
   11faa:	b908      	cbnz	r0, 11fb0 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0xc>
   11fac:	f003 fcd6 	bl	1595c <abort>
  TFLITE_DCHECK(node != nullptr);
   11fb0:	2900      	cmp	r1, #0
   11fb2:	d0fb      	beq.n	11fac <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   11fb4:	680a      	ldr	r2, [r1, #0]
   11fb6:	6d43      	ldr	r3, [r0, #84]	; 0x54
   11fb8:	6851      	ldr	r1, [r2, #4]
   11fba:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
   11fbc:	6872      	ldr	r2, [r6, #4]
   11fbe:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   11fc0:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
   11fc2:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
   11fc4:	4628      	mov	r0, r5
   11fc6:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   11fc8:	a901      	add	r1, sp, #4
   11fca:	4606      	mov	r6, r0
   11fcc:	7a20      	ldrb	r0, [r4, #8]
   11fce:	f000 f8e7 	bl	121a0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   11fd2:	4605      	mov	r5, r0
   11fd4:	b998      	cbnz	r0, 11ffe <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  input_bytes *= ElementCount(*input->dims);
   11fd6:	6860      	ldr	r0, [r4, #4]
   11fd8:	f000 f8fd 	bl	121d6 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   11fdc:	9b01      	ldr	r3, [sp, #4]
  if (input->data.raw != output->data.raw) {
   11fde:	6822      	ldr	r2, [r4, #0]
  input_bytes *= ElementCount(*input->dims);
   11fe0:	4358      	muls	r0, r3
  if (input->data.raw != output->data.raw) {
   11fe2:	6833      	ldr	r3, [r6, #0]
  input_bytes *= ElementCount(*input->dims);
   11fe4:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   11fe6:	429a      	cmp	r2, r3
   11fe8:	d009      	beq.n	11ffe <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    for (size_t i = 0; i < input_bytes; ++i) {
   11fea:	462b      	mov	r3, r5
   11fec:	9a01      	ldr	r2, [sp, #4]
   11fee:	429a      	cmp	r2, r3
   11ff0:	d905      	bls.n	11ffe <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
      output->data.raw[i] = input->data.raw[i];
   11ff2:	6822      	ldr	r2, [r4, #0]
   11ff4:	5cd1      	ldrb	r1, [r2, r3]
   11ff6:	6832      	ldr	r2, [r6, #0]
   11ff8:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   11ffa:	3301      	adds	r3, #1
   11ffc:	e7f6      	b.n	11fec <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   11ffe:	4628      	mov	r0, r5
   12000:	b002      	add	sp, #8
   12002:	bd70      	pop	{r4, r5, r6, pc}

00012004 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   12004:	f3c0 13cf 	ubfx	r3, r0, #7, #16
   12008:	f503 7280 	add.w	r2, r3, #256	; 0x100
  int16_t slope = lut[index + 1] - lut[index];
   1200c:	f203 1301 	addw	r3, r3, #257	; 0x101
  int16_t base = lut[index];
   12010:	b292      	uxth	r2, r2
  int16_t slope = lut[index + 1] - lut[index];
   12012:	b29b      	uxth	r3, r3
   12014:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   12018:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  int16_t offset = value & 0x7f;
   1201c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  int16_t slope = lut[index + 1] - lut[index];
   12020:	1a9b      	subs	r3, r3, r2
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   12022:	2140      	movs	r1, #64	; 0x40
   12024:	fb13 1000 	smlabb	r0, r3, r0, r1
  return base + delta;
   12028:	eb02 10e0 	add.w	r0, r2, r0, asr #7
}
   1202c:	b200      	sxth	r0, r0
   1202e:	4770      	bx	lr

00012030 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   12030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12034:	b08d      	sub	sp, #52	; 0x34
   12036:	460c      	mov	r4, r1
   12038:	9203      	str	r2, [sp, #12]
   1203a:	461a      	mov	r2, r3
  const int32_t input_beta_left_shift = params.input_left_shift;
   1203c:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   12040:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   12042:	6983      	ldr	r3, [r0, #24]
   12044:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   12046:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   12048:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1204a:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1204c:	4619      	mov	r1, r3
   1204e:	4620      	mov	r0, r4
   12050:	9304      	str	r3, [sp, #16]
   12052:	f7ff fc1b 	bl	1188c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   12056:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1205a:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1205c:	4619      	mov	r1, r3
   1205e:	4620      	mov	r0, r4
   12060:	f7ff fb2a 	bl	116b8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   12064:	2400      	movs	r4, #0
   12066:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   12068:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1206a:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   1206c:	9b02      	ldr	r3, [sp, #8]
   1206e:	4598      	cmp	r8, r3
   12070:	da71      	bge.n	12156 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   12072:	9b03      	ldr	r3, [sp, #12]
    InputT max_in_row = std::numeric_limits<InputT>::min();
   12074:	f88d 901f 	strb.w	r9, [sp, #31]
   12078:	191f      	adds	r7, r3, r4
   1207a:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   1207c:	2200      	movs	r2, #0
   1207e:	42aa      	cmp	r2, r5
   12080:	da0e      	bge.n	120a0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   12082:	460b      	mov	r3, r1
      if (__a < __b)
   12084:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12088:	781e      	ldrb	r6, [r3, #0]
   1208a:	4286      	cmp	r6, r0
      return __a;
   1208c:	f10d 001f 	add.w	r0, sp, #31
   12090:	bf98      	it	ls
   12092:	4603      	movls	r3, r0
   12094:	3101      	adds	r1, #1
   12096:	781b      	ldrb	r3, [r3, #0]
   12098:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   1209c:	3201      	adds	r2, #1
   1209e:	e7ee      	b.n	1207e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   120a0:	2600      	movs	r6, #0
   120a2:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   120a4:	46b2      	mov	sl, r6
   120a6:	45aa      	cmp	sl, r5
   120a8:	da17      	bge.n	120da <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   120aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   120ae:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32_t input_diff =
   120b2:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   120b4:	9a01      	ldr	r2, [sp, #4]
   120b6:	4282      	cmp	r2, r0
   120b8:	dc0c      	bgt.n	120d4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   120ba:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   120bc:	9b00      	ldr	r3, [sp, #0]
   120be:	4659      	mov	r1, fp
   120c0:	4098      	lsls	r0, r3
   120c2:	f7f4 fec9 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   120c6:	f7f6 f8e7 	bl	8298 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   120ca:	210c      	movs	r1, #12
   120cc:	f7f5 fb16 	bl	76fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   120d0:	9b04      	ldr	r3, [sp, #16]
   120d2:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   120d4:	f10a 0a01 	add.w	sl, sl, #1
   120d8:	e7e5      	b.n	120a6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   120da:	4630      	mov	r0, r6
   120dc:	aa08      	add	r2, sp, #32
   120de:	210c      	movs	r1, #12
   120e0:	f7ff fb34 	bl	1174c <_ZN6tflite13GetReciprocalEiiPi>
   120e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   120e6:	4682      	mov	sl, r0
   120e8:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   120ea:	2300      	movs	r3, #0
   120ec:	42ab      	cmp	r3, r5
   120ee:	da2e      	bge.n	1214e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   120f0:	f89d 101f 	ldrb.w	r1, [sp, #31]
   120f4:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32_t input_diff =
   120f8:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   120fa:	9901      	ldr	r1, [sp, #4]
   120fc:	4281      	cmp	r1, r0
   120fe:	dc23      	bgt.n	12148 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   12100:	9304      	str	r3, [sp, #16]
   12102:	9b00      	ldr	r3, [sp, #0]
   12104:	4659      	mov	r1, fp
   12106:	4098      	lsls	r0, r3
   12108:	f7f4 fea6 	bl	6e58 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1210c:	f7f6 f8c4 	bl	8298 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   12110:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   12112:	4650      	mov	r0, sl
   12114:	f7ff fbf1 	bl	118fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
   12118:	9908      	ldr	r1, [sp, #32]
   1211a:	3117      	adds	r1, #23
   1211c:	f7f5 faee 	bl	76fc <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   12120:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   12122:	4298      	cmp	r0, r3
	return __b;
   12124:	bfcc      	ite	gt
   12126:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   12128:	a909      	addle	r1, sp, #36	; 0x24
   1212a:	930a      	str	r3, [sp, #40]	; 0x28
        const int32_t shifted_output =
   1212c:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   1212e:	6808      	ldr	r0, [r1, #0]
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
   12130:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
      if (__b < __a)
   12134:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   12136:	2800      	cmp	r0, #0
	return __b;
   12138:	bfb8      	it	lt
   1213a:	4611      	movlt	r1, r2
      if (__b < __a)
   1213c:	9b04      	ldr	r3, [sp, #16]
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1213e:	6809      	ldr	r1, [r1, #0]
   12140:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   12142:	3301      	adds	r3, #1
   12144:	3601      	adds	r6, #1
   12146:	e7d1      	b.n	120ec <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   12148:	f886 9000 	strb.w	r9, [r6]
   1214c:	e7f9      	b.n	12142 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   1214e:	f108 0801 	add.w	r8, r8, #1
   12152:	442c      	add	r4, r5
   12154:	e78a      	b.n	1206c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   12156:	b00d      	add	sp, #52	; 0x34
   12158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001215c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   1215c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   12160:	ee30 0a27 	vadd.f32	s0, s0, s15
   12164:	ee87 0a80 	vdiv.f32	s0, s15, s0
   12168:	4770      	bx	lr

0001216a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  { return __builtin_expf(__x); }
   1216a:	f7fc bf43 	b.w	eff4 <expf>

0001216e <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1216e:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   12170:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   12172:	b90b      	cbnz	r3, 12178 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
   12174:	f003 fbf2 	bl	1595c <abort>
}
   12178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   1217c:	2138      	movs	r1, #56	; 0x38
   1217e:	4718      	bx	r3

00012180 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
   12180:	b508      	push	{r3, lr}
   12182:	ee10 0a10 	vmov	r0, s0
   12186:	f7ee f96f 	bl	468 <__aeabi_f2d>
   1218a:	ec41 0b10 	vmov	d0, r0, r1
   1218e:	f7fc fd3b 	bl	ec08 <round>
   12192:	ec51 0b10 	vmov	r0, r1, d0
   12196:	f7ee fc81 	bl	a9c <__aeabi_d2f>
   1219a:	ee00 0a10 	vmov	s0, r0
   1219e:	bd08      	pop	{r3, pc}

000121a0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
   121a0:	3801      	subs	r0, #1
   121a2:	280f      	cmp	r0, #15
   121a4:	d815      	bhi.n	121d2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
   121a6:	e8df f000 	tbb	[pc, r0]
   121aa:	0c0c      	.short	0x0c0c
   121ac:	10140e10 	.word	0x10140e10
   121b0:	08100e08 	.word	0x08100e08
   121b4:	140e120e 	.word	0x140e120e
   121b8:	0c14      	.short	0x0c14
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
   121ba:	2302      	movs	r3, #2
      break;
    case kTfLiteFloat32:
      *size = sizeof(float);
   121bc:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
   121be:	2000      	movs	r0, #0
      break;
   121c0:	4770      	bx	lr
      *size = sizeof(float);
   121c2:	2304      	movs	r3, #4
   121c4:	e7fa      	b.n	121bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double);
   121c6:	2308      	movs	r3, #8
   121c8:	e7f8      	b.n	121bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(uint8_t);
   121ca:	2301      	movs	r3, #1
   121cc:	e7f6      	b.n	121bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double) * 2;
   121ce:	2310      	movs	r3, #16
   121d0:	e7f4      	b.n	121bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
  switch (type) {
   121d2:	2001      	movs	r0, #1
}
   121d4:	4770      	bx	lr

000121d6 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   121d6:	b510      	push	{r4, lr}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   121d8:	f850 4b04 	ldr.w	r4, [r0], #4
   121dc:	2200      	movs	r2, #0
  int result = 1;
   121de:	2301      	movs	r3, #1
  for (int i = 0; i < dims.size; ++i) {
   121e0:	4294      	cmp	r4, r2
   121e2:	dd04      	ble.n	121ee <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   121e4:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   121e8:	3201      	adds	r2, #1
    result *= dims.data[i];
   121ea:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   121ec:	e7f8      	b.n	121e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   121ee:	4618      	mov	r0, r3
   121f0:	bd10      	pop	{r4, pc}

000121f2 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
   121f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   121f4:	468c      	mov	ip, r1
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
   121f6:	2500      	movs	r5, #0
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
   121f8:	1c96      	adds	r6, r2, #2
  for (i = 0; i < bitRevLen; )
   121fa:	45ac      	cmp	ip, r5
   121fc:	d800      	bhi.n	12200 <arm_bitreversal_32+0xe>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
   121fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a = pBitRevTab[i    ] >> 2;
   12200:	f832 4015 	ldrh.w	r4, [r2, r5, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
   12204:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
     a = pBitRevTab[i    ] >> 2;
   12208:	08a4      	lsrs	r4, r4, #2
     b = pBitRevTab[i + 1] >> 2;
   1220a:	089b      	lsrs	r3, r3, #2
     tmp = pSrc[a];
   1220c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a] = pSrc[b];
   12210:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   12214:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b] = tmp;
   12218:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
     tmp = pSrc[a+1];
   1221c:	3401      	adds	r4, #1
     pSrc[a+1] = pSrc[b+1];
   1221e:	3301      	adds	r3, #1
     tmp = pSrc[a+1];
   12220:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
   12224:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   12228:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
    i += 2;
   1222c:	3502      	adds	r5, #2
     pSrc[b+1] = tmp;
   1222e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    i += 2;
   12232:	e7e2      	b.n	121fa <arm_bitreversal_32+0x8>

00012234 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
   12234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12238:	4680      	mov	r8, r0
   1223a:	ed2d 8b02 	vpush	{d8}
  uint32_t    L  = S->fftLen;
   1223e:	f8b8 7000 	ldrh.w	r7, [r8]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
   12242:	f8d8 2004 	ldr.w	r2, [r8, #4]
  float32_t * p2 = p1 + L;
   12246:	eb01 0987 	add.w	r9, r1, r7, lsl #2
{
   1224a:	4608      	mov	r0, r1

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
   1224c:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
   1224e:	08ff      	lsrs	r7, r7, #3
{
   12250:	b083      	sub	sp, #12
   12252:	4606      	mov	r6, r0
  pMid1 = p1 + L;
   12254:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  pMid2 = p2 + L;
   12258:	eb09 0481 	add.w	r4, r9, r1, lsl #2
   1225c:	464b      	mov	r3, r9
   1225e:	eb02 1707 	add.w	r7, r2, r7, lsl #4
  const float32_t * tw = (float32_t *) S->pTwiddle;
   12262:	4694      	mov	ip, r2
  for (l = L >> 2; l > 0; l-- )
   12264:	45bc      	cmp	ip, r7
   12266:	f106 0610 	add.w	r6, r6, #16
   1226a:	f105 0510 	add.w	r5, r5, #16
   1226e:	f104 0410 	add.w	r4, r4, #16
   12272:	f103 0310 	add.w	r3, r3, #16
   12276:	d110      	bne.n	1229a <arm_cfft_radix8by2_f32+0x66>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
   12278:	b289      	uxth	r1, r1
   1227a:	2302      	movs	r3, #2
   1227c:	9101      	str	r1, [sp, #4]
   1227e:	f7f6 fb07 	bl	8890 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   12282:	f8d8 2004 	ldr.w	r2, [r8, #4]
   12286:	9901      	ldr	r1, [sp, #4]
   12288:	2302      	movs	r3, #2
   1228a:	4648      	mov	r0, r9
}
   1228c:	b003      	add	sp, #12
   1228e:	ecbd 8b02 	vpop	{d8}
   12292:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
   12296:	f7f6 bafb 	b.w	8890 <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
   1229a:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
   1229e:	ed16 6a04 	vldr	s12, [r6, #-16]
    t2[1] = p2[1];
   122a2:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
   122a6:	ed16 4a03 	vldr	s8, [r6, #-12]
    t4[0] = pMid2[0];
   122aa:	ed54 6a04 	vldr	s13, [r4, #-16]
    t4[1] = pMid2[1];
   122ae:	ed54 4a03 	vldr	s9, [r4, #-12]
    t2[2] = p2[2];
   122b2:	ed13 7a02 	vldr	s14, [r3, #-8]
    t2[3] = p2[3];
   122b6:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
   122ba:	ed55 2a03 	vldr	s5, [r5, #-12]
    t3[2] = pMid1[2];
   122be:	ed15 3a02 	vldr	s6, [r5, #-8]
    t3[3] = pMid1[3];
   122c2:	ed55 3a01 	vldr	s7, [r5, #-4]
    t4[2] = pMid2[2];
   122c6:	ed54 7a02 	vldr	s15, [r4, #-8]
    t4[3] = pMid2[3];
   122ca:	ed54 5a01 	vldr	s11, [r4, #-4]
    t1[2] = p1[2];
   122ce:	ed16 1a02 	vldr	s2, [r6, #-8]
    t3[0] = pMid1[0];
   122d2:	ed15 2a04 	vldr	s4, [r5, #-16]
    t1[3] = p1[3];
   122d6:	ed56 1a01 	vldr	s3, [r6, #-4]
    *p1++ = t1[0] + t2[0];
   122da:	ee36 8a00 	vadd.f32	s16, s12, s0
    t2[0] = t1[0] - t2[0];
   122de:	ee36 6a40 	vsub.f32	s12, s12, s0
    *p1++ = t1[0] + t2[0];
   122e2:	ed06 8a04 	vstr	s16, [r6, #-16]
    *p1++ = t1[1] + t2[1];
   122e6:	ee34 8a20 	vadd.f32	s16, s8, s1
    t2[1] = t1[1] - t2[1];
   122ea:	ee34 4a60 	vsub.f32	s8, s8, s1
    *p1++ = t1[1] + t2[1];
   122ee:	ed06 8a03 	vstr	s16, [r6, #-12]
    *p1++ = t1[2] + t2[2];
   122f2:	ee31 8a07 	vadd.f32	s16, s2, s14
   122f6:	f10c 0c10 	add.w	ip, ip, #16
   122fa:	ed06 8a02 	vstr	s16, [r6, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
   122fe:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
   12302:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
   12306:	ee72 1a26 	vadd.f32	s3, s4, s13
    *p1++ = t1[3] + t2[3];    /* col 1 */
   1230a:	ed06 8a01 	vstr	s16, [r6, #-4]
    *pMid1++ = t3[0] + t4[0];
   1230e:	ed45 1a04 	vstr	s3, [r5, #-16]
    *pMid1++ = t3[1] + t4[1];
   12312:	ee72 1aa4 	vadd.f32	s3, s5, s9
    t4[1] = t4[1] - t3[1];
   12316:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *pMid1++ = t3[1] + t4[1];
   1231a:	ed45 1a03 	vstr	s3, [r5, #-12]
    *pMid1++ = t3[2] + t4[2];
   1231e:	ee73 1a27 	vadd.f32	s3, s6, s15
    t4[2] = t4[2] - t3[2];
   12322:	ee77 7ac3 	vsub.f32	s15, s15, s6
    *pMid1++ = t3[2] + t4[2];
   12326:	ed45 1a02 	vstr	s3, [r5, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   1232a:	ee73 1aa5 	vadd.f32	s3, s7, s11
    t4[3] = t4[3] - t3[3];    /* for col 2 */
   1232e:	ee75 5ae3 	vsub.f32	s11, s11, s7
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
   12332:	ed45 1a01 	vstr	s3, [r5, #-4]
    twI = *tw++;
   12336:	ed5c 3a03 	vldr	s7, [ip, #-12]
    twR = *tw++;
   1233a:	ed1c 3a04 	vldr	s6, [ip, #-16]
    m1 = t2[1] * twI;
   1233e:	ee64 2a23 	vmul.f32	s5, s8, s7
    *p2++ = m0 + m1;
   12342:	ee46 2a03 	vmla.f32	s5, s12, s6
    m3 = t2[0] * twI;
   12346:	ee26 6a23 	vmul.f32	s12, s12, s7
    *p2++ = m2 - m3;
   1234a:	ee14 6a03 	vnmls.f32	s12, s8, s6
    t4[0] = t4[0] - t3[0];
   1234e:	ee76 6ac2 	vsub.f32	s13, s13, s4
    *p2++ = m2 - m3;
   12352:	ed03 6a03 	vstr	s12, [r3, #-12]
    m1 = t4[1] * twR;
   12356:	ee24 6a83 	vmul.f32	s12, s9, s6
    *pMid2++ = m0 - m1;
   1235a:	ee16 6aa3 	vnmls.f32	s12, s13, s7
    m3 = t4[0] * twR;
   1235e:	ee66 6a83 	vmul.f32	s13, s13, s6
    *pMid2++ = m2 + m3;
   12362:	ee44 6aa3 	vmla.f32	s13, s9, s7
    *p2++ = m0 + m1;
   12366:	ed43 2a04 	vstr	s5, [r3, #-16]
    *pMid2++ = m0 - m1;
   1236a:	ed04 6a04 	vstr	s12, [r4, #-16]
    *pMid2++ = m2 + m3;
   1236e:	ed44 6a03 	vstr	s13, [r4, #-12]
    twR = *tw++;
   12372:	ed1c 6a02 	vldr	s12, [ip, #-8]
    twI = *tw++;
   12376:	ed5c 6a01 	vldr	s13, [ip, #-4]
    t2[2] = t1[2] - t2[2];
   1237a:	ee31 7a47 	vsub.f32	s14, s2, s14
    m1 = t2[3] * twI;
   1237e:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
   12382:	ee47 4a06 	vmla.f32	s9, s14, s12
    m3 = t2[2] * twI;
   12386:	ee27 7a26 	vmul.f32	s14, s14, s13
    *p2++ = m2 - m3;
   1238a:	ee15 7a06 	vnmls.f32	s14, s10, s12
    *p2++ = m0 + m1;
   1238e:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
   12392:	ed03 7a01 	vstr	s14, [r3, #-4]
    m1 = t4[3] * twR;
   12396:	ee25 7a86 	vmul.f32	s14, s11, s12
    *pMid2++ = m0 - m1;
   1239a:	ee17 7aa6 	vnmls.f32	s14, s15, s13
    m3 = t4[2] * twR;
   1239e:	ee67 7a86 	vmul.f32	s15, s15, s12
    *pMid2++ = m2 + m3;
   123a2:	ee45 7aa6 	vmla.f32	s15, s11, s13
    *pMid2++ = m0 - m1;
   123a6:	ed04 7a02 	vstr	s14, [r4, #-8]
    *pMid2++ = m2 + m3;
   123aa:	ed44 7a01 	vstr	s15, [r4, #-4]
  for (l = L >> 2; l > 0; l-- )
   123ae:	e759      	b.n	12264 <arm_cfft_radix8by2_f32+0x30>

000123b0 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
    uint32_t    L  = S->fftLen >> 1;
   123b0:	8803      	ldrh	r3, [r0, #0]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
   123b2:	edd1 7a00 	vldr	s15, [r1]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   123b6:	6842      	ldr	r2, [r0, #4]
    uint32_t    L  = S->fftLen >> 1;
   123b8:	085b      	lsrs	r3, r3, #1
{
   123ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t * p3 = p2 + L;
   123be:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
    p1ap3_0 = p1[0] + p3[0];
   123c2:	ed95 7a00 	vldr	s14, [r5]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
   123c6:	edd5 5a01 	vldr	s11, [r5, #4]
    p1ap3_0 = p1[0] + p3[0];
   123ca:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
   123ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
   123d2:	ed91 7a01 	vldr	s14, [r1, #4]
    float32_t * p2 = p1 + L;
   123d6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    p1ap3_1 = p1[1] + p3[1];
   123da:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
   123de:	ee77 5a65 	vsub.f32	s11, s14, s11

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   123e2:	ed96 7a00 	vldr	s14, [r6]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   123e6:	edd6 3a01 	vldr	s7, [r6, #4]
{
   123ea:	ed2d 8b04 	vpush	{d8-d9}
    float32_t * p4 = p3 + L;
   123ee:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   123f2:	edd4 4a00 	vldr	s9, [r4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   123f6:	ed94 4a01 	vldr	s8, [r4, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   123fa:	ee37 5a06 	vadd.f32	s10, s14, s12
{
   123fe:	b08f      	sub	sp, #60	; 0x3c
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12400:	ee35 5a24 	vadd.f32	s10, s10, s9
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
   12404:	9202      	str	r2, [sp, #8]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12406:	ed81 5a00 	vstr	s10, [r1]
    L >>= 1;
   1240a:	085a      	lsrs	r2, r3, #1
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   1240c:	ed96 5a01 	vldr	s10, [r6, #4]
    L >>= 1;
   12410:	920a      	str	r2, [sp, #40]	; 0x28
    p1ap3_0 = p1[0] + p3[0];
   12412:	460a      	mov	r2, r1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12414:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12416:	ed94 3a01 	vldr	s6, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   1241a:	9206      	str	r2, [sp, #24]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   1241c:	ee36 5a85 	vadd.f32	s10, s13, s10

    /* Twiddle factors are ones */
    *p2++ = t2[0];
   12420:	4632      	mov	r2, r6
   12422:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12424:	ee35 5a03 	vadd.f32	s10, s10, s6
    *p2++ = t2[0];
   12428:	920b      	str	r2, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
   1242a:	462a      	mov	r2, r5
   1242c:	3208      	adds	r2, #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   1242e:	ed81 5a01 	vstr	s10, [r1, #4]
    *p3++ = t3[0];
   12432:	920c      	str	r2, [sp, #48]	; 0x30
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   12434:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p3++ = t3[1];
    *p4++ = t4[0];
   12438:	4622      	mov	r2, r4
   1243a:	3208      	adds	r2, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
   1243c:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p4++ = t4[0];
   12440:	920d      	str	r2, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
   12442:	9a02      	ldr	r2, [sp, #8]
    *p2++ = t2[0];
   12444:	ed86 5a00 	vstr	s10, [r6]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   12448:	ee36 6a47 	vsub.f32	s12, s12, s14
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   1244c:	ee35 5ac7 	vsub.f32	s10, s11, s14
    tw2 += twMod2;
   12450:	3208      	adds	r2, #8
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   12452:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   12456:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   1245a:	ee37 7a25 	vadd.f32	s14, s14, s11
    tw2 += twMod2;
   1245e:	9207      	str	r2, [sp, #28]
    tw3 += twMod3;
   12460:	9a02      	ldr	r2, [sp, #8]
{
   12462:	9100      	str	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
   12464:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
   12468:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
   1246c:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
   12470:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
   12474:	ee37 7a64 	vsub.f32	s14, s14, s9
    tw3 += twMod3;
   12478:	3210      	adds	r2, #16
    *p2++ = t2[1];
   1247a:	ed86 5a01 	vstr	s10, [r6, #4]
    *p3++ = t3[0];
   1247e:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
   12482:	edc5 6a01 	vstr	s13, [r5, #4]
    *p4++ = t4[0];
   12486:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
   1248a:	ed84 7a01 	vstr	s14, [r4, #4]
    tw3 += twMod3;
   1248e:	9208      	str	r2, [sp, #32]
    tw4 += twMod4;
   12490:	9a02      	ldr	r2, [sp, #8]
   12492:	3218      	adds	r2, #24
   12494:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
   12496:	085a      	lsrs	r2, r3, #1
   12498:	3a02      	subs	r2, #2
   1249a:	ea4f 0852 	mov.w	r8, r2, lsr #1
   1249e:	9a07      	ldr	r2, [sp, #28]
   124a0:	9204      	str	r2, [sp, #16]
   124a2:	9a08      	ldr	r2, [sp, #32]
   124a4:	9203      	str	r2, [sp, #12]
   124a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   124a8:	9201      	str	r2, [sp, #4]
   124aa:	9a00      	ldr	r2, [sp, #0]
   124ac:	f8cd 8014 	str.w	r8, [sp, #20]
   124b0:	f1a4 0a04 	sub.w	sl, r4, #4
   124b4:	f102 0e10 	add.w	lr, r2, #16
{
   124b8:	4683      	mov	fp, r0
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
   124ba:	f1a6 0904 	sub.w	r9, r6, #4
    pEnd2 = p3 - 1;
   124be:	1f2f      	subs	r7, r5, #4
    pEnd4 = pEnd3 + L;
   124c0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   124c4:	f106 0110 	add.w	r1, r6, #16
   124c8:	f105 0c10 	add.w	ip, r5, #16
   124cc:	f104 0210 	add.w	r2, r4, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
   124d0:	9804      	ldr	r0, [sp, #16]
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
   124d2:	ed1c 3a02 	vldr	s6, [ip, #-8]
   124d6:	ed1e 6a02 	vldr	s12, [lr, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   124da:	ed11 7a01 	vldr	s14, [r1, #-4]
      p1ap3_1 = p1[1] + p3[1];
   124de:	ed5c 3a01 	vldr	s7, [ip, #-4]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   124e2:	ed12 4a01 	vldr	s8, [r2, #-4]
      p1ap3_1 = p1[1] + p3[1];
   124e6:	ed5e 7a01 	vldr	s15, [lr, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   124ea:	ed12 5a02 	vldr	s10, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
   124ee:	3008      	adds	r0, #8
      p1sp3_0 = p1[0] - p3[0];
   124f0:	ee76 4a43 	vsub.f32	s9, s12, s6
    for (l = (L - 2) >> 1; l > 0; l-- )
   124f4:	9004      	str	r0, [sp, #16]
   124f6:	9803      	ldr	r0, [sp, #12]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   124f8:	ee77 6a24 	vadd.f32	s13, s14, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
   124fc:	3010      	adds	r0, #16
   124fe:	9003      	str	r0, [sp, #12]
   12500:	9801      	ldr	r0, [sp, #4]
      p1sp3_1 = p1[1] - p3[1];
   12502:	ee77 5ae3 	vsub.f32	s11, s15, s7
      p1ap3_0 = p1[0] + p3[0];
   12506:	ee36 6a03 	vadd.f32	s12, s12, s6
      t2[0] = p1sp3_0 + p2[1] - p4[1];
   1250a:	ee36 2ac4 	vsub.f32	s4, s13, s8
      p1ap3_1 = p1[1] + p3[1];
   1250e:	ee77 7aa3 	vadd.f32	s15, s15, s7
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   12512:	ed51 6a02 	vldr	s13, [r1, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
   12516:	3018      	adds	r0, #24
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   12518:	ee75 2ae6 	vsub.f32	s5, s11, s13
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   1251c:	ee36 3a66 	vsub.f32	s6, s12, s13
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   12520:	ee77 3ac7 	vsub.f32	s7, s15, s14
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   12524:	ee76 5aa5 	vadd.f32	s11, s13, s11
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   12528:	ee34 7ac7 	vsub.f32	s14, s9, s14
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   1252c:	ee76 6a86 	vadd.f32	s13, s13, s12
    for (l = (L - 2) >> 1; l > 0; l-- )
   12530:	9001      	str	r0, [sp, #4]
   12532:	9805      	ldr	r0, [sp, #20]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
   12534:	ee72 2a85 	vadd.f32	s5, s5, s10
      t3[0] = p1ap3_0 - p2[0] - p4[0];
   12538:	ee33 3a45 	vsub.f32	s6, s6, s10
      t3[1] = p1ap3_1 - p2[1] - p4[1];
   1253c:	ee73 3ac4 	vsub.f32	s7, s7, s8
      t4[0] = p1sp3_0 - p2[1] + p4[1];
   12540:	ee37 7a04 	vadd.f32	s14, s14, s8
      t4[1] = p1sp3_1 + p2[0] - p4[0];
   12544:	ee75 5ac5 	vsub.f32	s11, s11, s10
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   12548:	ee76 6a85 	vadd.f32	s13, s13, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
   1254c:	f1a9 0908 	sub.w	r9, r9, #8
   12550:	3f08      	subs	r7, #8
   12552:	f1aa 0a08 	sub.w	sl, sl, #8
   12556:	3b08      	subs	r3, #8
   12558:	f10e 0e08 	add.w	lr, lr, #8
   1255c:	3108      	adds	r1, #8
   1255e:	f10c 0c08 	add.w	ip, ip, #8
   12562:	3208      	adds	r2, #8
   12564:	2800      	cmp	r0, #0
   12566:	d174      	bne.n	12652 <arm_cfft_radix8by4_f32+0x2a2>
   12568:	9809      	ldr	r0, [sp, #36]	; 0x24
   1256a:	9b06      	ldr	r3, [sp, #24]
   1256c:	2718      	movs	r7, #24
   1256e:	fb07 0708 	mla	r7, r7, r8, r0
   12572:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12574:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
   12578:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
   1257c:	9b07      	ldr	r3, [sp, #28]
   1257e:	980c      	ldr	r0, [sp, #48]	; 0x30
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
   12580:	edc2 6a00 	vstr	s13, [r2]
   12584:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
   12588:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
   1258c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1258e:	9b08      	ldr	r3, [sp, #32]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   12590:	eddc 6a01 	vldr	s13, [ip, #4]
   12594:	eb03 1308 	add.w	r3, r3, r8, lsl #4
   12598:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
   1259c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   125a0:	edd8 6a01 	vldr	s13, [r8, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   125a4:	9800      	ldr	r0, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
   125a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
   125aa:	edc2 7a01 	vstr	s15, [r2, #4]
    twI = tw2[1];
   125ae:	edd1 6a01 	vldr	s13, [r1, #4]
    twR = tw2[0];
   125b2:	ed91 6a00 	vldr	s12, [r1]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   125b6:	9a02      	ldr	r2, [sp, #8]
   125b8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   125bc:	9101      	str	r1, [sp, #4]
    m1 = t2[1] * twI;
   125be:	ee66 7aa2 	vmul.f32	s15, s13, s5
    m3 = t2[0] * twI;
   125c2:	ee66 6a82 	vmul.f32	s13, s13, s4
    *p2++ = m0 + m1;
   125c6:	ee46 7a02 	vmla.f32	s15, s12, s4
    *p2++ = m2 - m3;
   125ca:	ee56 6a22 	vnmls.f32	s13, s12, s5
    *p2++ = m0 + m1;
   125ce:	edcc 7a00 	vstr	s15, [ip]
    *p2++ = m2 - m3;
   125d2:	edcc 6a01 	vstr	s13, [ip, #4]
    twI = tw3[1];
   125d6:	edd3 7a01 	vldr	s15, [r3, #4]
    twR = tw3[0];
   125da:	ed93 6a00 	vldr	s12, [r3]
    m1 = t3[1] * twI;
   125de:	ee67 6aa3 	vmul.f32	s13, s15, s7
    m3 = t3[0] * twI;
   125e2:	ee67 7a83 	vmul.f32	s15, s15, s6
    *p3++ = m0 + m1;
   125e6:	ee46 6a03 	vmla.f32	s13, s12, s6
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   125ea:	2304      	movs	r3, #4
    *p3++ = m2 - m3;
   125ec:	ee56 7a23 	vnmls.f32	s15, s12, s7
    *p3++ = m0 + m1;
   125f0:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
   125f4:	edce 7a01 	vstr	s15, [lr, #4]
    twI = tw4[1];
   125f8:	edd7 7a01 	vldr	s15, [r7, #4]
    twR = tw4[0];
   125fc:	ed97 6a00 	vldr	s12, [r7]
    m1 = t4[1] * twI;
   12600:	ee67 6aa5 	vmul.f32	s13, s15, s11
    m3 = t4[0] * twI;
   12604:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p4++ = m0 + m1;
   12608:	ee46 6a07 	vmla.f32	s13, s12, s14
    *p4++ = m2 - m3;
   1260c:	ee56 7a25 	vnmls.f32	s15, s12, s11
    *p4++ = m0 + m1;
   12610:	edc8 6a00 	vstr	s13, [r8]
    *p4++ = m2 - m3;
   12614:	edc8 7a01 	vstr	s15, [r8, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
   12618:	f7f6 f93a 	bl	8890 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
   1261c:	9901      	ldr	r1, [sp, #4]
   1261e:	f8db 2004 	ldr.w	r2, [fp, #4]
   12622:	9100      	str	r1, [sp, #0]
   12624:	4630      	mov	r0, r6
   12626:	2304      	movs	r3, #4
   12628:	f7f6 f932 	bl	8890 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
   1262c:	f8db 2004 	ldr.w	r2, [fp, #4]
   12630:	9900      	ldr	r1, [sp, #0]
   12632:	4628      	mov	r0, r5
   12634:	2304      	movs	r3, #4
   12636:	f7f6 f92b 	bl	8890 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   1263a:	f8db 2004 	ldr.w	r2, [fp, #4]
   1263e:	9900      	ldr	r1, [sp, #0]
   12640:	2304      	movs	r3, #4
   12642:	4620      	mov	r0, r4
}
   12644:	b00f      	add	sp, #60	; 0x3c
   12646:	ecbd 8b04 	vpop	{d8-d9}
   1264a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
   1264e:	f7f6 b91f 	b.w	8890 <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
   12652:	ed4e 6a04 	vstr	s13, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   12656:	ed51 6a03 	vldr	s13, [r1, #-12]
      twR = *tw2++;
   1265a:	9804      	ldr	r0, [sp, #16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
   1265c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   12660:	ed52 6a03 	vldr	s13, [r2, #-12]
   12664:	ee77 7aa6 	vadd.f32	s15, s15, s13
   12668:	ed4e 7a03 	vstr	s15, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   1266c:	edda 7a01 	vldr	s15, [sl, #4]
   12670:	edd9 1a01 	vldr	s3, [r9, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   12674:	edd9 4a02 	vldr	s9, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   12678:	ed93 0a02 	vldr	s0, [r3, #8]
   1267c:	ed97 6a02 	vldr	s12, [r7, #8]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   12680:	ed93 4a01 	vldr	s8, [r3, #4]
   12684:	ed97 8a01 	vldr	s16, [r7, #4]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
   12688:	ee31 5aa7 	vadd.f32	s10, s3, s15
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
   1268c:	ee71 1ae7 	vsub.f32	s3, s3, s15
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
   12690:	edda 7a02 	vldr	s15, [sl, #8]
   12694:	ee74 8aa7 	vadd.f32	s17, s9, s15
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   12698:	ee36 9a40 	vsub.f32	s18, s12, s0
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   1269c:	ee38 1ac6 	vsub.f32	s2, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   126a0:	ee36 6a28 	vadd.f32	s12, s12, s17
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
   126a4:	ee74 4ae7 	vsub.f32	s9, s9, s15
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   126a8:	ee36 6a00 	vadd.f32	s12, s12, s0
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   126ac:	ee75 7a48 	vsub.f32	s15, s10, s16
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
   126b0:	ed89 6a02 	vstr	s12, [r9, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   126b4:	ed97 6a01 	vldr	s12, [r7, #4]
   126b8:	ee35 5a06 	vadd.f32	s10, s10, s12
   126bc:	ed93 6a01 	vldr	s12, [r3, #4]
   126c0:	ee35 5a06 	vadd.f32	s10, s10, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   126c4:	ee74 6ac8 	vsub.f32	s13, s9, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
   126c8:	ed89 5a01 	vstr	s10, [r9, #4]
      twI = *tw2++;
   126cc:	ed10 6a01 	vldr	s12, [r0, #-4]
      twR = *tw2++;
   126d0:	ed10 5a02 	vldr	s10, [r0, #-8]
      twR = tw3[0];
   126d4:	9803      	ldr	r0, [sp, #12]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
   126d6:	ee77 7ac4 	vsub.f32	s15, s15, s8
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
   126da:	ee76 6a84 	vadd.f32	s13, s13, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   126de:	ee34 4a48 	vsub.f32	s8, s8, s16
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
   126e2:	ee79 0a21 	vadd.f32	s1, s18, s3
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
   126e6:	ee74 4a64 	vsub.f32	s9, s8, s9
      m1 = t2[1] * twI;
   126ea:	ee26 4a22 	vmul.f32	s8, s12, s5
      *p2++ = m0 + m1;
   126ee:	ee05 4a02 	vmla.f32	s8, s10, s4
      m3 = t2[0] * twI;
   126f2:	ee26 2a02 	vmul.f32	s4, s12, s4
      *p2++ = m0 + m1;
   126f6:	ed01 4a04 	vstr	s8, [r1, #-16]
      m1 = t2[2] * twR;
   126fa:	ee20 4a85 	vmul.f32	s8, s1, s10
      *pEnd2-- = m0 - m1;
   126fe:	ee16 4a86 	vnmls.f32	s8, s13, s12
      m3 = t2[3] * twR;
   12702:	ee66 6a85 	vmul.f32	s13, s13, s10
      *pEnd2-- = m2 + m3;
   12706:	ee40 6a86 	vmla.f32	s13, s1, s12
      *p2++ = m2 - m3;
   1270a:	ee15 2a22 	vnmls.f32	s4, s10, s5
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
   1270e:	ee31 1a40 	vsub.f32	s2, s2, s0
      *p2++ = m2 - m3;
   12712:	ed01 2a03 	vstr	s4, [r1, #-12]
      *pEnd2-- = m0 - m1;
   12716:	ed87 4a02 	vstr	s8, [r7, #8]
      *pEnd2-- = m2 + m3;
   1271a:	edc7 6a01 	vstr	s13, [r7, #4]
      twI = tw3[1];
   1271e:	ed10 6a03 	vldr	s12, [r0, #-12]
      twR = tw3[0];
   12722:	ed50 6a04 	vldr	s13, [r0, #-16]
      twR = tw4[0];
   12726:	9801      	ldr	r0, [sp, #4]
      m1 = t3[1] * twI;
   12728:	ee26 5a23 	vmul.f32	s10, s12, s7
      *p3++ = m0 + m1;
   1272c:	ee06 5a83 	vmla.f32	s10, s13, s6
      m3 = t3[0] * twI;
   12730:	ee26 3a03 	vmul.f32	s6, s12, s6
      *p3++ = m0 + m1;
   12734:	ed0c 5a04 	vstr	s10, [ip, #-16]
      m1 =  t3[2] * twI;
   12738:	ee27 5a86 	vmul.f32	s10, s15, s12
      *p3++ = m2 - m3;
   1273c:	ee16 3aa3 	vnmls.f32	s6, s13, s7
      *pEnd3-- = m0 - m1;
   12740:	ee11 5a66 	vnmla.f32	s10, s2, s13
      m2 =  t3[2] * twR;
   12744:	ee67 6aa6 	vmul.f32	s13, s15, s13
      *pEnd3-- = m3 - m2;
   12748:	ee51 6a06 	vnmls.f32	s13, s2, s12
      *p3++ = m2 - m3;
   1274c:	ed0c 3a03 	vstr	s6, [ip, #-12]
      *pEnd3-- = m0 - m1;
   12750:	ed8a 5a02 	vstr	s10, [sl, #8]
      *pEnd3-- = m3 - m2;
   12754:	edca 6a01 	vstr	s13, [sl, #4]
      twR = tw4[0];
   12758:	ed50 7a06 	vldr	s15, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
   1275c:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
    for (l = (L - 2) >> 1; l > 0; l-- )
   12760:	9805      	ldr	r0, [sp, #20]
      m1 = t4[1] * twI;
   12762:	ee26 6aa5 	vmul.f32	s12, s13, s11
      *p4++ = m0 + m1;
   12766:	ee07 6a87 	vmla.f32	s12, s15, s14
    for (l = (L - 2) >> 1; l > 0; l-- )
   1276a:	3801      	subs	r0, #1
   1276c:	9005      	str	r0, [sp, #20]
      m3 = t4[0] * twI;
   1276e:	ee26 7a87 	vmul.f32	s14, s13, s14
      *p4++ = m2 - m3;
   12772:	ee17 7aa5 	vnmls.f32	s14, s15, s11
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
   12776:	ee79 1a61 	vsub.f32	s3, s18, s3
      *p4++ = m2 - m3;
   1277a:	ed02 7a03 	vstr	s14, [r2, #-12]
      m1 = t4[2] * twR;
   1277e:	ee21 7aa7 	vmul.f32	s14, s3, s15
      m3 = t4[3] * twR;
   12782:	ee64 7aa7 	vmul.f32	s15, s9, s15
      *pEnd4-- = m0 - m1;
   12786:	ee14 7aa6 	vnmls.f32	s14, s9, s13
      *pEnd4-- = m2 + m3;
   1278a:	ee41 7aa6 	vmla.f32	s15, s3, s13
      *p4++ = m0 + m1;
   1278e:	ed02 6a04 	vstr	s12, [r2, #-16]
      *pEnd4-- = m0 - m1;
   12792:	ed83 7a02 	vstr	s14, [r3, #8]
      *pEnd4-- = m2 + m3;
   12796:	edc3 7a01 	vstr	s15, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
   1279a:	e699      	b.n	124d0 <arm_cfft_radix8by4_f32+0x120>

0001279c <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
   1279c:	2a01      	cmp	r2, #1
{
   1279e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
   127a2:	8805      	ldrh	r5, [r0, #0]
{
   127a4:	4606      	mov	r6, r0
   127a6:	460c      	mov	r4, r1
   127a8:	4617      	mov	r7, r2
   127aa:	4698      	mov	r8, r3
  if (ifftFlag == 1U)
   127ac:	d03e      	beq.n	1282c <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
   127ae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   127b2:	d049      	beq.n	12848 <arm_cfft_f32+0xac>
   127b4:	d826      	bhi.n	12804 <arm_cfft_f32+0x68>
   127b6:	2d40      	cmp	r5, #64	; 0x40
   127b8:	d031      	beq.n	1281e <arm_cfft_f32+0x82>
   127ba:	d81c      	bhi.n	127f6 <arm_cfft_f32+0x5a>
   127bc:	2d10      	cmp	r5, #16
   127be:	d01c      	beq.n	127fa <arm_cfft_f32+0x5e>
   127c0:	2d20      	cmp	r5, #32
   127c2:	d041      	beq.n	12848 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
   127c4:	f1b8 0f00 	cmp.w	r8, #0
   127c8:	d004      	beq.n	127d4 <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
   127ca:	68b2      	ldr	r2, [r6, #8]
   127cc:	89b1      	ldrh	r1, [r6, #12]
   127ce:	4620      	mov	r0, r4
   127d0:	f7ff fd0f 	bl	121f2 <arm_bitreversal_32>

  if (ifftFlag == 1U)
   127d4:	2f01      	cmp	r7, #1
   127d6:	d10c      	bne.n	127f2 <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
   127d8:	ee07 5a90 	vmov	s15, r5
   127dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   127e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   127e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
   127e8:	2300      	movs	r3, #0
   127ea:	42ab      	cmp	r3, r5
   127ec:	f104 0408 	add.w	r4, r4, #8
   127f0:	d32f      	bcc.n	12852 <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
   127f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
   127f6:	2d80      	cmp	r5, #128	; 0x80
   127f8:	d1e4      	bne.n	127c4 <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
   127fa:	4621      	mov	r1, r4
   127fc:	4630      	mov	r0, r6
   127fe:	f7ff fd19 	bl	12234 <arm_cfft_radix8by2_f32>
    break;
   12802:	e7df      	b.n	127c4 <arm_cfft_f32+0x28>
  switch (L)
   12804:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
   12808:	d01e      	beq.n	12848 <arm_cfft_f32+0xac>
   1280a:	d805      	bhi.n	12818 <arm_cfft_f32+0x7c>
   1280c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   12810:	d005      	beq.n	1281e <arm_cfft_f32+0x82>
   12812:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   12816:	e7ef      	b.n	127f8 <arm_cfft_f32+0x5c>
   12818:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1281c:	d1d2      	bne.n	127c4 <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
   1281e:	6872      	ldr	r2, [r6, #4]
   12820:	2301      	movs	r3, #1
   12822:	4629      	mov	r1, r5
   12824:	4620      	mov	r0, r4
   12826:	f7f6 f833 	bl	8890 <arm_radix8_butterfly_f32>
    break;
   1282a:	e7cb      	b.n	127c4 <arm_cfft_f32+0x28>
    pSrc = p1 + 1;
   1282c:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
   1282e:	2300      	movs	r3, #0
   12830:	42ab      	cmp	r3, r5
   12832:	f102 0208 	add.w	r2, r2, #8
   12836:	d2ba      	bcs.n	127ae <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
   12838:	ed52 7a02 	vldr	s15, [r2, #-8]
   1283c:	eef1 7a67 	vneg.f32	s15, s15
   12840:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
   12844:	3301      	adds	r3, #1
   12846:	e7f3      	b.n	12830 <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
   12848:	4621      	mov	r1, r4
   1284a:	4630      	mov	r0, r6
   1284c:	f7ff fdb0 	bl	123b0 <arm_cfft_radix8by4_f32>
    break;
   12850:	e7b8      	b.n	127c4 <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
   12852:	ed54 7a02 	vldr	s15, [r4, #-8]
   12856:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
   1285a:	3301      	adds	r3, #1
      *pSrc++ *=   invL ;
   1285c:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
   12860:	ed54 7a01 	vldr	s15, [r4, #-4]
   12864:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   12868:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
   1286c:	e7bd      	b.n	127ea <arm_cfft_f32+0x4e>

0001286e <stage_rfft_f32>:
   twR = *pCoeff++ ;
   twI = *pCoeff++ ;


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
   1286e:	edd1 7a00 	vldr	s15, [r1]

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
   12872:	ed91 7a01 	vldr	s14, [r1, #4]
   k = (S->Sint).fftLen - 1;
   12876:	8803      	ldrh	r3, [r0, #0]
   t1a = xBR + xAR  ;
   12878:	ee77 7aa7 	vadd.f32	s15, s15, s15
   t1b = xBI + xAI  ;
   1287c:	ee37 7a07 	vadd.f32	s14, s14, s14
{
   12880:	b510      	push	{r4, lr}

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
   12882:	ee37 6a87 	vadd.f32	s12, s15, s14
   *pOut++ = 0.5f * ( t1a - t1b );
   12886:	ee77 7ac7 	vsub.f32	s15, s15, s14
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
   1288a:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( t1a + t1b );
   1288c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   12890:	ee26 6a26 	vmul.f32	s12, s12, s13
   *pOut++ = 0.5f * ( t1a - t1b );
   12894:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
   12898:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
   1289a:	f104 0010 	add.w	r0, r4, #16
   1289e:	f101 0410 	add.w	r4, r1, #16
   128a2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   128a6:	ed82 6a00 	vstr	s12, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
   128aa:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
   128ae:	3908      	subs	r1, #8
   128b0:	3210      	adds	r2, #16
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
      xBR = pB[0];
   128b2:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
   128b6:	ed54 3a02 	vldr	s7, [r4, #-8]
      xBI = pB[1];
   128ba:	ed91 4a03 	vldr	s8, [r1, #12]
      xAI = pA[1];
   128be:	ed54 7a01 	vldr	s15, [r4, #-4]

      twR = *pCoeff++;
   128c2:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
   128c6:	ed50 4a01 	vldr	s9, [r0, #-4]

      t1a = xBR - xAR ;
   128ca:	ee37 5a63 	vsub.f32	s10, s14, s7
      t1b = xBI + xAI ;
   128ce:	ee34 6a27 	vadd.f32	s12, s8, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   128d2:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   128d6:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   128da:	ee05 7a85 	vmla.f32	s14, s11, s10


      pA += 2;
      pB -= 2;
      k--;
   128de:	3b01      	subs	r3, #1
   } while (k > 0);
   128e0:	2b00      	cmp	r3, #0
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   128e2:	ee44 7a85 	vmla.f32	s15, s9, s10
   } while (k > 0);
   128e6:	f100 0008 	add.w	r0, r0, #8
   128ea:	f102 0208 	add.w	r2, r2, #8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   128ee:	ee04 7a86 	vmla.f32	s14, s9, s12
   } while (k > 0);
   128f2:	f104 0408 	add.w	r4, r4, #8
   128f6:	f1a1 0108 	sub.w	r1, r1, #8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   128fa:	ee45 7ac6 	vmls.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   128fe:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   12902:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
   12906:	ed02 7a04 	vstr	s14, [r2, #-16]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
   1290a:	ed42 7a03 	vstr	s15, [r2, #-12]
   } while (k > 0);
   1290e:	dcd0      	bgt.n	128b2 <stage_rfft_f32+0x44>
}
   12910:	bd10      	pop	{r4, pc}

00012912 <merge_rfft_f32>:
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
   12912:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
   12916:	ed91 6a01 	vldr	s12, [r1, #4]
   k = (S->Sint).fftLen - 1;
   1291a:	8803      	ldrh	r3, [r0, #0]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
   1291c:	ee37 7a86 	vadd.f32	s14, s15, s12
   *pOut++ = 0.5f * ( xAR - xAI );
   12920:	ee77 7ac6 	vsub.f32	s15, s15, s12
   *pOut++ = 0.5f * ( xAR + xAI );
   12924:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
{
   12928:	b510      	push	{r4, lr}
   *pOut++ = 0.5f * ( xAR + xAI );
   1292a:	ee27 7a26 	vmul.f32	s14, s14, s13
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
   1292e:	6944      	ldr	r4, [r0, #20]
   *pOut++ = 0.5f * ( xAR + xAI );
   12930:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
   12934:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
   12938:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR - xAI );
   1293a:	edc2 7a01 	vstr	s15, [r2, #4]
   pCoeff += 2 ;
   1293e:	f104 0008 	add.w	r0, r4, #8
   12942:	3208      	adds	r2, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
   12944:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
   12948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3

   while (k > 0)
   1294c:	2b00      	cmp	r3, #0
   1294e:	f102 0208 	add.w	r2, r2, #8
   12952:	f100 0008 	add.w	r0, r0, #8
   12956:	f104 0408 	add.w	r4, r4, #8
   1295a:	f1a1 0108 	sub.w	r1, r1, #8
   1295e:	dc00      	bgt.n	12962 <merge_rfft_f32+0x50>
      pA += 2;
      pB -= 2;
      k--;
   }

}
   12960:	bd10      	pop	{r4, pc}
      xBR =   pB[0]    ;
   12962:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
   12966:	ed54 3a02 	vldr	s7, [r4, #-8]
      xBI =   pB[1]    ;
   1296a:	ed91 4a03 	vldr	s8, [r1, #12]
      xAI =  pA[1];
   1296e:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
   12972:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
   12976:	ed50 4a01 	vldr	s9, [r0, #-4]
      t1a = xAR - xBR ;
   1297a:	ee33 5ac7 	vsub.f32	s10, s7, s14
      t1b = xAI + xBI ;
   1297e:	ee34 6a27 	vadd.f32	s12, s8, s15
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   12982:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   12986:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   1298a:	ee05 7ac5 	vmls.f32	s14, s11, s10
      k--;
   1298e:	3b01      	subs	r3, #1
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   12990:	ee44 7a85 	vmla.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   12994:	ee04 7ac6 	vmls.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   12998:	ee45 7ac6 	vmls.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   1299c:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   129a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
   129a4:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
   129a8:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
   129ac:	e7ce      	b.n	1294c <merge_rfft_f32+0x3a>

000129ae <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
   129ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129b2:	4605      	mov	r5, r0
   129b4:	460f      	mov	r7, r1
   129b6:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
   129b8:	461c      	mov	r4, r3
   129ba:	b14b      	cbz	r3, 129d0 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
   129bc:	f7ff ffa9 	bl	12912 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   129c0:	4622      	mov	r2, r4
   129c2:	4631      	mov	r1, r6
   129c4:	4628      	mov	r0, r5
   129c6:	2301      	movs	r3, #1
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
   129c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   129cc:	f7ff bee6 	b.w	1279c <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
   129d0:	4622      	mov	r2, r4
   129d2:	2301      	movs	r3, #1
   129d4:	f7ff fee2 	bl	1279c <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
   129d8:	4632      	mov	r2, r6
   129da:	4639      	mov	r1, r7
   129dc:	4628      	mov	r0, r5
}
   129de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
   129e2:	f7ff bf44 	b.w	1286e <stage_rfft_f32>

000129e6 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
   129e6:	b570      	push	{r4, r5, r6, lr}

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   129e8:	8803      	ldrh	r3, [r0, #0]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
   129ea:	684c      	ldr	r4, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   129ec:	8841      	ldrh	r1, [r0, #2]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
   129ee:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   129f0:	434b      	muls	r3, r1

#if defined (ARM_MATH_LOOPUNROLL)

    /* Loop unrolling: Compute 4 outputs at a time */
    blkCnt = numSamples >> 2U;
   129f2:	089d      	lsrs	r5, r3, #2

    while (blkCnt > 0U)
   129f4:	4610      	mov	r0, r2
   129f6:	4621      	mov	r1, r4
    blkCnt = numSamples >> 2U;
   129f8:	462e      	mov	r6, r5
    while (blkCnt > 0U)
   129fa:	3010      	adds	r0, #16
   129fc:	3110      	adds	r1, #16
   129fe:	b95e      	cbnz	r6, 12a18 <arm_mat_scale_f32+0x32>
   12a00:	eb02 1205 	add.w	r2, r2, r5, lsl #4
      /* Decrement loop counter */
      blkCnt--;
    }

    /* Loop unrolling: Compute remaining outputs */
    blkCnt = numSamples % 0x4U;
   12a04:	f003 0303 	and.w	r3, r3, #3
   12a08:	eb04 1105 	add.w	r1, r4, r5, lsl #4
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
   12a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12a10:	429a      	cmp	r2, r3
   12a12:	d11b      	bne.n	12a4c <arm_mat_scale_f32+0x66>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   12a14:	2000      	movs	r0, #0
   12a16:	bd70      	pop	{r4, r5, r6, pc}
      *pOut++ = (*pIn++) * scale;
   12a18:	ed50 7a04 	vldr	s15, [r0, #-16]
   12a1c:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
   12a20:	3e01      	subs	r6, #1
      *pOut++ = (*pIn++) * scale;
   12a22:	ed41 7a04 	vstr	s15, [r1, #-16]
      *pOut++ = (*pIn++) * scale;
   12a26:	ed50 7a03 	vldr	s15, [r0, #-12]
   12a2a:	ee67 7a80 	vmul.f32	s15, s15, s0
   12a2e:	ed41 7a03 	vstr	s15, [r1, #-12]
      *pOut++ = (*pIn++) * scale;
   12a32:	ed50 7a02 	vldr	s15, [r0, #-8]
   12a36:	ee67 7a80 	vmul.f32	s15, s15, s0
   12a3a:	ed41 7a02 	vstr	s15, [r1, #-8]
      *pOut++ = (*pIn++) * scale;
   12a3e:	ed50 7a01 	vldr	s15, [r0, #-4]
   12a42:	ee67 7a80 	vmul.f32	s15, s15, s0
   12a46:	ed41 7a01 	vstr	s15, [r1, #-4]
      blkCnt--;
   12a4a:	e7d6      	b.n	129fa <arm_mat_scale_f32+0x14>
      *pOut++ = (*pIn++) * scale;
   12a4c:	ecf2 7a01 	vldmia	r2!, {s15}
   12a50:	ee67 7a80 	vmul.f32	s15, s15, s0
   12a54:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
   12a58:	e7da      	b.n	12a10 <arm_mat_scale_f32+0x2a>

00012a5a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
   12a5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
   12a5e:	8847      	ldrh	r7, [r0, #2]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
   12a60:	8802      	ldrh	r2, [r0, #0]
   12a62:	684b      	ldr	r3, [r1, #4]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
   12a64:	6844      	ldr	r4, [r0, #4]
      px = pOut + i;

#if defined (ARM_MATH_LOOPUNROLL)

      /* Loop unrolling: Compute 4 outputs at a time */
      col = nCols >> 2U;
   12a66:	08be      	lsrs	r6, r7, #2
   12a68:	f007 0903 	and.w	r9, r7, #3
   12a6c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
   12a70:	0095      	lsls	r5, r2, #2
   12a72:	eb09 0786 	add.w	r7, r9, r6, lsl #2
   12a76:	9100      	str	r1, [sp, #0]
   12a78:	fb06 fc05 	mul.w	ip, r6, r5
   12a7c:	00b9      	lsls	r1, r7, #2
   12a7e:	ea4f 1802 	mov.w	r8, r2, lsl #4
   12a82:	ea4f 1a06 	mov.w	sl, r6, lsl #4
   12a86:	00d2      	lsls	r2, r2, #3
   12a88:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   12a8c:	9101      	str	r1, [sp, #4]
      px = pOut + i;
   12a8e:	4618      	mov	r0, r3
      while (col > 0U)        /* column loop */
   12a90:	18d7      	adds	r7, r2, r3
   12a92:	4621      	mov	r1, r4
      col = nCols >> 2U;
   12a94:	46b6      	mov	lr, r6
      while (col > 0U)        /* column loop */
   12a96:	3110      	adds	r1, #16
   12a98:	f1be 0f00 	cmp.w	lr, #0
   12a9c:	d10e      	bne.n	12abc <arm_mat_trans_f32+0x62>
   12a9e:	eb04 070a 	add.w	r7, r4, sl
   12aa2:	eb0c 0103 	add.w	r1, ip, r3
      col = nCols % 0x4U;
   12aa6:	4648      	mov	r0, r9
      while (col > 0U)
   12aa8:	bb08      	cbnz	r0, 12aee <arm_mat_trans_f32+0x94>
   12aaa:	9901      	ldr	r1, [sp, #4]
   12aac:	440c      	add	r4, r1
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
   12aae:	9900      	ldr	r1, [sp, #0]
   12ab0:	3304      	adds	r3, #4
   12ab2:	428b      	cmp	r3, r1
   12ab4:	d1eb      	bne.n	12a8e <arm_mat_trans_f32+0x34>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   12ab6:	b003      	add	sp, #12
   12ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *px = *pIn++;
   12abc:	f851 bc10 	ldr.w	fp, [r1, #-16]
   12ac0:	f8c0 b000 	str.w	fp, [r0]
        *px = *pIn++;
   12ac4:	ed51 7a03 	vldr	s15, [r1, #-12]
   12ac8:	eb00 0b05 	add.w	fp, r0, r5
   12acc:	edcb 7a00 	vstr	s15, [fp]
        *px = *pIn++;
   12ad0:	f851 bc08 	ldr.w	fp, [r1, #-8]
   12ad4:	f8c7 b000 	str.w	fp, [r7]
        *px = *pIn++;
   12ad8:	ed51 7a01 	vldr	s15, [r1, #-4]
   12adc:	eb07 0b05 	add.w	fp, r7, r5
   12ae0:	edcb 7a00 	vstr	s15, [fp]
        px += nRows;
   12ae4:	4440      	add	r0, r8
        col--;
   12ae6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   12aea:	4447      	add	r7, r8
   12aec:	e7d3      	b.n	12a96 <arm_mat_trans_f32+0x3c>
        *px = *pIn++;
   12aee:	f857 eb04 	ldr.w	lr, [r7], #4
   12af2:	f8c1 e000 	str.w	lr, [r1]
        col--;
   12af6:	3801      	subs	r0, #1
        px += nRows;
   12af8:	4429      	add	r1, r5
        col--;
   12afa:	e7d5      	b.n	12aa8 <arm_mat_trans_f32+0x4e>

00012afc <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
   12afc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
   12afe:	edd0 7a00 	vldr	s15, [r0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
  /* Initialise index of maximum value. */
  index = 0U;

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = (blockSize - 1U) >> 2U;
   12b02:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
   12b04:	4606      	mov	r6, r0
  index = 0U;
   12b06:	2500      	movs	r5, #0
  out = *pSrc++;
   12b08:	3614      	adds	r6, #20
  blkCnt = (blockSize - 1U) >> 2U;
   12b0a:	ea4f 0c94 	mov.w	ip, r4, lsr #2

  while (blkCnt > 0U)
   12b0e:	f024 0e03 	bic.w	lr, r4, #3
  outIndex = 0U;
   12b12:	462f      	mov	r7, r5
  while (blkCnt > 0U)
   12b14:	4575      	cmp	r5, lr
   12b16:	d10b      	bne.n	12b30 <arm_max_f32+0x34>
   12b18:	eb00 100c 	add.w	r0, r0, ip, lsl #4
   12b1c:	1d05      	adds	r5, r0, #4
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = (blockSize - 1U) % 4U;
   12b1e:	f004 0003 	and.w	r0, r4, #3
   12b22:	1a08      	subs	r0, r1, r0
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   12b24:	4281      	cmp	r1, r0
   12b26:	d132      	bne.n	12b8e <arm_max_f32+0x92>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
   12b28:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
   12b2c:	601f      	str	r7, [r3, #0]
}
   12b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    maxVal = *pSrc++;
   12b30:	ed16 7a04 	vldr	s14, [r6, #-16]
    if (out < maxVal)
   12b34:	eef4 7ac7 	vcmpe.f32	s15, s14
   12b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal;
   12b3c:	bf48      	it	mi
   12b3e:	eef0 7a47 	vmovmi.f32	s15, s14
    maxVal = *pSrc++;
   12b42:	ed16 7a03 	vldr	s14, [r6, #-12]
    if (out < maxVal)
   12b46:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 1U;
   12b4a:	bf48      	it	mi
   12b4c:	1c6f      	addmi	r7, r5, #1
    if (out < maxVal)
   12b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal;
   12b52:	bf48      	it	mi
   12b54:	eef0 7a47 	vmovmi.f32	s15, s14
    maxVal = *pSrc++;
   12b58:	ed16 7a02 	vldr	s14, [r6, #-8]
    if (out < maxVal)
   12b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 2U;
   12b60:	bf48      	it	mi
   12b62:	1caf      	addmi	r7, r5, #2
    if (out < maxVal)
   12b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal;
   12b68:	bf48      	it	mi
   12b6a:	eef0 7a47 	vmovmi.f32	s15, s14
    maxVal = *pSrc++;
   12b6e:	ed16 7a01 	vldr	s14, [r6, #-4]
    if (out < maxVal)
   12b72:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 3U;
   12b76:	bf48      	it	mi
   12b78:	1cef      	addmi	r7, r5, #3
    if (out < maxVal)
   12b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      outIndex = index + 4U;
   12b7e:	f105 0504 	add.w	r5, r5, #4
   12b82:	bf44      	itt	mi
   12b84:	462f      	movmi	r7, r5
      out = maxVal;
   12b86:	eef0 7a47 	vmovmi.f32	s15, s14
    blkCnt--;
   12b8a:	3610      	adds	r6, #16
   12b8c:	e7c2      	b.n	12b14 <arm_max_f32+0x18>
    maxVal = *pSrc++;
   12b8e:	ecb5 7a01 	vldmia	r5!, {s14}
    if (out < maxVal)
   12b92:	eef4 7ac7 	vcmpe.f32	s15, s14
   12b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12b9a:	bf54      	ite	pl
   12b9c:	eeb0 7a67 	vmovpl.f32	s14, s15
   12ba0:	4607      	movmi	r7, r0
   12ba2:	eef0 7a47 	vmov.f32	s15, s14
   12ba6:	3001      	adds	r0, #1
   12ba8:	e7bc      	b.n	12b24 <arm_max_f32+0x28>

00012baa <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
   12baa:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
   12bac:	edd0 7a00 	vldr	s15, [r0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
  /* Initialise index of maximum value. */
  index = 0U;

  /* Loop unrolling: Compute 4 outputs at a time */
  blkCnt = (blockSize - 1U) >> 2U;
   12bb0:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
   12bb2:	4606      	mov	r6, r0
  index = 0U;
   12bb4:	2500      	movs	r5, #0
  out = *pSrc++;
   12bb6:	3614      	adds	r6, #20
  blkCnt = (blockSize - 1U) >> 2U;
   12bb8:	ea4f 0c94 	mov.w	ip, r4, lsr #2

  while (blkCnt > 0U)
   12bbc:	f024 0e03 	bic.w	lr, r4, #3
  outIndex = 0U;
   12bc0:	462f      	mov	r7, r5
  while (blkCnt > 0U)
   12bc2:	4575      	cmp	r5, lr
   12bc4:	d10b      	bne.n	12bde <arm_min_f32+0x34>
   12bc6:	eb00 100c 	add.w	r0, r0, ip, lsl #4
   12bca:	1d05      	adds	r5, r0, #4
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Loop unrolling: Compute remaining outputs */
  blkCnt = (blockSize - 1U) % 4U;
   12bcc:	f004 0003 	and.w	r0, r4, #3
   12bd0:	1a08      	subs	r0, r1, r0
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   12bd2:	4281      	cmp	r1, r0
   12bd4:	d132      	bne.n	12c3c <arm_min_f32+0x92>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
   12bd6:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
   12bda:	601f      	str	r7, [r3, #0]
}
   12bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    minVal = *pSrc++;
   12bde:	ed16 7a04 	vldr	s14, [r6, #-16]
    if (out > minVal)
   12be2:	eef4 7ac7 	vcmpe.f32	s15, s14
   12be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal;
   12bea:	bfc8      	it	gt
   12bec:	eef0 7a47 	vmovgt.f32	s15, s14
    minVal = *pSrc++;
   12bf0:	ed16 7a03 	vldr	s14, [r6, #-12]
    if (out > minVal)
   12bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 1U;
   12bf8:	bfc8      	it	gt
   12bfa:	1c6f      	addgt	r7, r5, #1
    if (out > minVal)
   12bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal;
   12c00:	bfc8      	it	gt
   12c02:	eef0 7a47 	vmovgt.f32	s15, s14
    minVal = *pSrc++;
   12c06:	ed16 7a02 	vldr	s14, [r6, #-8]
    if (out > minVal)
   12c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 2U;
   12c0e:	bfc8      	it	gt
   12c10:	1caf      	addgt	r7, r5, #2
    if (out > minVal)
   12c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal;
   12c16:	bfc8      	it	gt
   12c18:	eef0 7a47 	vmovgt.f32	s15, s14
    minVal = *pSrc++;
   12c1c:	ed16 7a01 	vldr	s14, [r6, #-4]
    if (out > minVal)
   12c20:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = index + 3U;
   12c24:	bfc8      	it	gt
   12c26:	1cef      	addgt	r7, r5, #3
    if (out > minVal)
   12c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      outIndex = index + 4U;
   12c2c:	f105 0504 	add.w	r5, r5, #4
   12c30:	bfc4      	itt	gt
   12c32:	462f      	movgt	r7, r5
      out = minVal;
   12c34:	eef0 7a47 	vmovgt.f32	s15, s14
    blkCnt--;
   12c38:	3610      	adds	r6, #16
   12c3a:	e7c2      	b.n	12bc2 <arm_min_f32+0x18>
    minVal = *pSrc++;
   12c3c:	ecb5 7a01 	vldmia	r5!, {s14}
    if (out > minVal)
   12c40:	eef4 7ac7 	vcmpe.f32	s15, s14
   12c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12c48:	bfd4      	ite	le
   12c4a:	eeb0 7a67 	vmovle.f32	s14, s15
   12c4e:	4607      	movgt	r7, r0
   12c50:	eef0 7a47 	vmov.f32	s15, s14
   12c54:	3001      	adds	r0, #1
   12c56:	e7bc      	b.n	12bd2 <arm_min_f32+0x28>

00012c58 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
   12c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12c5c:	e9dd 840b 	ldrd	r8, r4, [sp, #44]	; 0x2c
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
   12c60:	68a5      	ldr	r5, [r4, #8]
   12c62:	07ac      	lsls	r4, r5, #30
{
   12c64:	e9dd 7e09 	ldrd	r7, lr, [sp, #36]	; 0x24
    if (output_dims->w % 4 != 0)
   12c68:	d103      	bne.n	12c72 <arm_convolve_1_x_n_s8+0x1a>
#endif

out:
    /* Return to application */
    return status;
}
   12c6a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status = arm_convolve_s8(ctx,
   12c6e:	f000 b83e 	b.w	12cee <arm_convolve_s8>
}
   12c72:	f06f 0002 	mvn.w	r0, #2
   12c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00012c7a <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   12c7a:	688b      	ldr	r3, [r1, #8]
   12c7c:	68c0      	ldr	r0, [r0, #12]
   12c7e:	4358      	muls	r0, r3
   12c80:	684b      	ldr	r3, [r1, #4]
   12c82:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   12c84:	0080      	lsls	r0, r0, #2
   12c86:	4770      	bx	lr

00012c88 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
   12c88:	b530      	push	{r4, r5, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   12c8a:	68d8      	ldr	r0, [r3, #12]
   12c8c:	0784      	lsls	r4, r0, #30
{
   12c8e:	b08b      	sub	sp, #44	; 0x2c
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
   12c90:	d128      	bne.n	12ce4 <arm_convolve_1x1_s8_fast+0x5c>
   12c92:	690c      	ldr	r4, [r1, #16]
   12c94:	bb34      	cbnz	r4, 12ce4 <arm_convolve_1x1_s8_fast+0x5c>
   12c96:	694c      	ldr	r4, [r1, #20]
   12c98:	bb24      	cbnz	r4, 12ce4 <arm_convolve_1x1_s8_fast+0x5c>
   12c9a:	688d      	ldr	r5, [r1, #8]
   12c9c:	2d01      	cmp	r5, #1
   12c9e:	d121      	bne.n	12ce4 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
   12ca0:	68cd      	ldr	r5, [r1, #12]
   12ca2:	2d01      	cmp	r5, #1
   12ca4:	d11e      	bne.n	12ce4 <arm_convolve_1x1_s8_fast+0x5c>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
   12ca6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   12ca8:	9508      	str	r5, [sp, #32]
   12caa:	6a0d      	ldr	r5, [r1, #32]
   12cac:	9507      	str	r5, [sp, #28]
   12cae:	684d      	ldr	r5, [r1, #4]
   12cb0:	9506      	str	r5, [sp, #24]
   12cb2:	6809      	ldr	r1, [r1, #0]
   12cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   12cb8:	9913      	ldr	r1, [sp, #76]	; 0x4c
   12cba:	68c9      	ldr	r1, [r1, #12]
   12cbc:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   12cbe:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   12cc2:	681b      	ldr	r3, [r3, #0]
   12cc4:	4341      	muls	r1, r0
   12cc6:	4359      	muls	r1, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
   12cc8:	9102      	str	r1, [sp, #8]
   12cca:	6853      	ldr	r3, [r2, #4]
   12ccc:	9301      	str	r3, [sp, #4]
   12cce:	6813      	ldr	r3, [r2, #0]
   12cd0:	9300      	str	r3, [sp, #0]
   12cd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12cd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12cd6:	9910      	ldr	r1, [sp, #64]	; 0x40
   12cd8:	980e      	ldr	r0, [sp, #56]	; 0x38
   12cda:	f000 fc82 	bl	135e2 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
   12cde:	4620      	mov	r0, r4
}
   12ce0:	b00b      	add	sp, #44	; 0x2c
   12ce2:	bd30      	pop	{r4, r5, pc}
        return ARM_MATH_SIZE_MISMATCH;
   12ce4:	f06f 0002 	mvn.w	r0, #2
   12ce8:	e7fa      	b.n	12ce0 <arm_convolve_1x1_s8_fast+0x58>

00012cea <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
   12cea:	2000      	movs	r0, #0
   12cec:	4770      	bx	lr

00012cee <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
   12cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf2:	ed2d 8b02 	vpush	{d8}
   12cf6:	b0b1      	sub	sp, #196	; 0xc4
   12cf8:	4694      	mov	ip, r2
   12cfa:	9c41      	ldr	r4, [sp, #260]	; 0x104
   12cfc:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    const uint16_t input_ch = input_dims->c;
    const uint16_t kernel_x = filter_dims->w;
    const uint16_t kernel_y = filter_dims->h;
    const uint16_t output_x = output_dims->w;
    const uint16_t output_y = output_dims->h;
    const uint16_t output_ch = output_dims->c;
   12cfe:	68e7      	ldr	r7, [r4, #12]
    q15_t *buffer_a = (q15_t *)ctx->buf;
   12d00:	f8d0 a000 	ldr.w	sl, [r0]
    const uint16_t input_batches = input_dims->n;
   12d04:	6818      	ldr	r0, [r3, #0]
    const uint16_t input_ch = input_dims->c;
   12d06:	68dd      	ldr	r5, [r3, #12]
    const uint16_t input_batches = input_dims->n;
   12d08:	901f      	str	r0, [sp, #124]	; 0x7c
    const uint16_t output_ch = output_dims->c;
   12d0a:	b2ba      	uxth	r2, r7
   12d0c:	ee08 2a10 	vmov	s16, r2

    const uint16_t pad_x = conv_params->padding.w;
   12d10:	690a      	ldr	r2, [r1, #16]
   12d12:	9220      	str	r2, [sp, #128]	; 0x80
    const uint16_t pad_y = conv_params->padding.h;
   12d14:	694a      	ldr	r2, [r1, #20]
   12d16:	9221      	str	r2, [sp, #132]	; 0x84
    const uint16_t stride_x = conv_params->stride.w;
   12d18:	688a      	ldr	r2, [r1, #8]
   12d1a:	9222      	str	r2, [sp, #136]	; 0x88
    const uint16_t stride_y = conv_params->stride.h;
   12d1c:	68ca      	ldr	r2, [r1, #12]
   12d1e:	9223      	str	r2, [sp, #140]	; 0x8c

    const int32_t input_offset = conv_params->input_offset;
    const int32_t out_offset = conv_params->output_offset;
   12d20:	684a      	ldr	r2, [r1, #4]
   12d22:	9214      	str	r2, [sp, #80]	; 0x50
    const int32_t out_activation_min = conv_params->activation.min;
   12d24:	6a0a      	ldr	r2, [r1, #32]
   12d26:	9215      	str	r2, [sp, #84]	; 0x54
    const int32_t out_activation_max = conv_params->activation.max;
   12d28:	6a4a      	ldr	r2, [r1, #36]	; 0x24
   12d2a:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t *output_mult = quant_params->multiplier;
   12d2c:	f8dc 2000 	ldr.w	r2, [ip]
   12d30:	9217      	str	r2, [sp, #92]	; 0x5c
    int32_t *output_shift = quant_params->shift;
   12d32:	f8dc 2004 	ldr.w	r2, [ip, #4]
   12d36:	9218      	str	r2, [sp, #96]	; 0x60
   12d38:	88a2      	ldrh	r2, [r4, #4]
   12d3a:	9219      	str	r2, [sp, #100]	; 0x64
   12d3c:	891a      	ldrh	r2, [r3, #8]
    const uint16_t kernel_y = filter_dims->h;
   12d3e:	e9d6 6001 	ldrd	r6, r0, [r6, #4]

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   12d42:	920b      	str	r2, [sp, #44]	; 0x2c
   12d44:	889b      	ldrh	r3, [r3, #4]
   12d46:	9313      	str	r3, [sp, #76]	; 0x4c
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   12d48:	4613      	mov	r3, r2
   12d4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12d4c:	fa1f fb85 	uxth.w	fp, r5
   12d50:	4353      	muls	r3, r2
   12d52:	fb0b f303 	mul.w	r3, fp, r3
   12d56:	9327      	str	r3, [sp, #156]	; 0x9c
   12d58:	8923      	ldrh	r3, [r4, #8]
   12d5a:	931a      	str	r3, [sp, #104]	; 0x68
   12d5c:	b2bb      	uxth	r3, r7
   12d5e:	931b      	str	r3, [sp, #108]	; 0x6c
        output_data += (output_x * output_y * output_ch);
   12d60:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
   12d64:	4353      	muls	r3, r2
   12d66:	ee18 2a10 	vmov	r2, s16
   12d6a:	4353      	muls	r3, r2
   12d6c:	9329      	str	r3, [sp, #164]	; 0xa4
   12d6e:	b2b3      	uxth	r3, r6
   12d70:	931c      	str	r3, [sp, #112]	; 0x70
   12d72:	b283      	uxth	r3, r0
   12d74:	9312      	str	r3, [sp, #72]	; 0x48
   12d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12d78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   12d7a:	fb10 f006 	smulbb	r0, r0, r6
   12d7e:	435a      	muls	r2, r3
   12d80:	fb10 f505 	smulbb	r5, r0, r5
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   12d84:	fb02 f30b 	mul.w	r3, r2, fp
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   12d88:	b2a8      	uxth	r0, r5
   12d8a:	9025      	str	r0, [sp, #148]	; 0x94
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   12d8c:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
   12d90:	9024      	str	r0, [sp, #144]	; 0x90
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   12d92:	ea4f 004b 	mov.w	r0, fp, lsl #1
   12d96:	9009      	str	r0, [sp, #36]	; 0x24
   12d98:	f3c3 038f 	ubfx	r3, r3, #2, #16
   12d9c:	f005 0003 	and.w	r0, r5, #3
   12da0:	901e      	str	r0, [sp, #120]	; 0x78
   12da2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12da6:	901d      	str	r0, [sp, #116]	; 0x74
   12da8:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12daa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12dae:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   12db2:	932d      	str	r3, [sp, #180]	; 0xb4
   12db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12db6:	902a      	str	r0, [sp, #168]	; 0xa8
   12db8:	fb0b f303 	mul.w	r3, fp, r3
   12dbc:	9326      	str	r3, [sp, #152]	; 0x98
   12dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12dc0:	4353      	muls	r3, r2
   12dc2:	932b      	str	r3, [sp, #172]	; 0xac
   12dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12dc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12dc8:	4353      	muls	r3, r2
   12dca:	932c      	str	r3, [sp, #176]	; 0xb0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   12dcc:	2300      	movs	r3, #0
   12dce:	930d      	str	r3, [sp, #52]	; 0x34
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   12dd0:	f9b1 3000 	ldrsh.w	r3, [r1]
   12dd4:	ee08 3a90 	vmov	s17, r3
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   12dd8:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
   12ddc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12dde:	429a      	cmp	r2, r3
   12de0:	f2c0 8086 	blt.w	12ef0 <arm_convolve_s8+0x202>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
   12de4:	2000      	movs	r0, #0
   12de6:	b031      	add	sp, #196	; 0xc4
   12de8:	ecbd 8b02 	vpop	{d8}
   12dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   12df0:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
   12df4:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   12df8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   12dfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   12dfe:	fb09 f303 	mul.w	r3, r9, r3
   12e02:	1a9b      	subs	r3, r3, r2
   12e04:	9311      	str	r3, [sp, #68]	; 0x44
   12e06:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12e08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   12e0a:	189c      	adds	r4, r3, r2
   12e0c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   12e0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   12e10:	fb0b 3304 	mla	r3, fp, r4, r3
   12e14:	930c      	str	r3, [sp, #48]	; 0x30
   12e16:	4633      	mov	r3, r6
   12e18:	4413      	add	r3, r2
   12e1a:	932f      	str	r3, [sp, #188]	; 0xbc
   12e1c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12e1e:	42b3      	cmp	r3, r6
   12e20:	dc5e      	bgt.n	12ee0 <arm_convolve_s8+0x1f2>
   12e22:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   12e24:	4498      	add	r8, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   12e26:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12e28:	4543      	cmp	r3, r8
   12e2a:	d118      	bne.n	12e5e <arm_convolve_s8+0x170>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   12e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12e2e:	9306      	str	r3, [sp, #24]
   12e30:	9b40      	ldr	r3, [sp, #256]	; 0x100
   12e32:	9305      	str	r3, [sp, #20]
   12e34:	9b25      	ldr	r3, [sp, #148]	; 0x94
   12e36:	9304      	str	r3, [sp, #16]
   12e38:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   12e3c:	9303      	str	r3, [sp, #12]
   12e3e:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   12e42:	9302      	str	r3, [sp, #8]
   12e44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12e46:	9301      	str	r3, [sp, #4]
   12e48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12e4a:	9300      	str	r3, [sp, #0]
   12e4c:	ee18 2a10 	vmov	r2, s16
   12e50:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12e52:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12e54:	4651      	mov	r1, sl
   12e56:	f000 f962 	bl	1311e <arm_nn_mat_mult_kernel_s8_s16>
    q15_t *buffer_a = (q15_t *)ctx->buf;
   12e5a:	46d0      	mov	r8, sl
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   12e5c:	900f      	str	r0, [sp, #60]	; 0x3c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   12e5e:	f109 0901 	add.w	r9, r9, #1
   12e62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12e64:	4599      	cmp	r9, r3
   12e66:	dbc3      	blt.n	12df0 <arm_convolve_s8+0x102>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   12e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12e6a:	3301      	adds	r3, #1
   12e6c:	930a      	str	r3, [sp, #40]	; 0x28
   12e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12e70:	9a19      	ldr	r2, [sp, #100]	; 0x64
   12e72:	4293      	cmp	r3, r2
   12e74:	da41      	bge.n	12efa <arm_convolve_s8+0x20c>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   12e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12e78:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
   12e7c:	4353      	muls	r3, r2
   12e7e:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
   12e82:	1a9b      	subs	r3, r3, r2
   12e84:	9310      	str	r3, [sp, #64]	; 0x40
   12e86:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12e8a:	4353      	muls	r3, r2
   12e8c:	9328      	str	r3, [sp, #160]	; 0xa0
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   12e8e:	f04f 0900 	mov.w	r9, #0
   12e92:	e7e6      	b.n	12e62 <arm_convolve_s8+0x174>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
   12e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12e96:	42b3      	cmp	r3, r6
   12e98:	d904      	bls.n	12ea4 <arm_convolve_s8+0x1b6>
   12e9a:	2d00      	cmp	r5, #0
   12e9c:	db02      	blt.n	12ea4 <arm_convolve_s8+0x1b6>
   12e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ea0:	429d      	cmp	r5, r3
   12ea2:	db15      	blt.n	12ed0 <arm_convolve_s8+0x1e2>
   12ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12ea6:	2100      	movs	r1, #0
   12ea8:	4638      	mov	r0, r7
   12eaa:	f002 fd86 	bl	159ba <memset>
                        two_column_buf += input_ch;
   12eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
                         i_ker_x++)
   12eb0:	3501      	adds	r5, #1
                        two_column_buf += input_ch;
   12eb2:	441f      	add	r7, r3
                         i_ker_x++)
   12eb4:	445c      	add	r4, fp
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   12eb6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   12eb8:	42ab      	cmp	r3, r5
   12eba:	dceb      	bgt.n	12e94 <arm_convolve_s8+0x1a6>
   12ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12ebe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   12ec0:	4413      	add	r3, r2
   12ec2:	930e      	str	r3, [sp, #56]	; 0x38
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
   12ec4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12ec8:	4413      	add	r3, r2
   12eca:	3601      	adds	r6, #1
   12ecc:	930c      	str	r3, [sp, #48]	; 0x30
   12ece:	e7a5      	b.n	12e1c <arm_convolve_s8+0x12e>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
   12ed0:	ee18 3a90 	vmov	r3, s17
   12ed4:	465a      	mov	r2, fp
   12ed6:	4639      	mov	r1, r7
   12ed8:	4620      	mov	r0, r4
   12eda:	f001 f924 	bl	14126 <arm_q7_to_q15_with_offset>
   12ede:	e7e6      	b.n	12eae <arm_convolve_s8+0x1c0>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   12ee0:	9d11      	ldr	r5, [sp, #68]	; 0x44
   12ee2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12ee4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   12ee6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   12ee8:	462b      	mov	r3, r5
   12eea:	4413      	add	r3, r2
   12eec:	932e      	str	r3, [sp, #184]	; 0xb8
   12eee:	e7e2      	b.n	12eb6 <arm_convolve_s8+0x1c8>
        q7_t *out = output_data;
   12ef0:	9b42      	ldr	r3, [sp, #264]	; 0x108
   12ef2:	930f      	str	r3, [sp, #60]	; 0x3c
    q15_t *buffer_a = (q15_t *)ctx->buf;
   12ef4:	46d0      	mov	r8, sl
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   12ef6:	2300      	movs	r3, #0
   12ef8:	e7b8      	b.n	12e6c <arm_convolve_s8+0x17e>
        if (two_column_buf != buffer_a)
   12efa:	45d0      	cmp	r8, sl
   12efc:	d171      	bne.n	12fe2 <arm_convolve_s8+0x2f4>
        input_data += (input_x * input_y * input_ch);
   12efe:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   12f00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   12f02:	4413      	add	r3, r2
   12f04:	933c      	str	r3, [sp, #240]	; 0xf0
        output_data += (output_x * output_y * output_ch);
   12f06:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   12f08:	9b42      	ldr	r3, [sp, #264]	; 0x108
   12f0a:	4413      	add	r3, r2
   12f0c:	9342      	str	r3, [sp, #264]	; 0x108
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   12f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12f10:	3301      	adds	r3, #1
   12f12:	930d      	str	r3, [sp, #52]	; 0x34
   12f14:	e760      	b.n	12dd8 <arm_convolve_s8+0xea>
                if (bias_data)
   12f16:	9b40      	ldr	r3, [sp, #256]	; 0x100
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d044      	beq.n	12fa6 <arm_convolve_s8+0x2b8>
                    sum = bias_data[i];
   12f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                while (col_count)
   12f20:	4654      	mov	r4, sl
   12f22:	462e      	mov	r6, r5
   12f24:	42b0      	cmp	r0, r6
   12f26:	4603      	mov	r3, r0
   12f28:	d13f      	bne.n	12faa <arm_convolve_s8+0x2bc>
                while (col_count)
   12f2a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   12f2c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   12f2e:	4406      	add	r6, r0
   12f30:	42b3      	cmp	r3, r6
   12f32:	d14f      	bne.n	12fd4 <arm_convolve_s8+0x2e6>
   12f34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   12f36:	441d      	add	r5, r3
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
   12f38:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12f3a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   12f3e:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   12f42:	4099      	lsls	r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   12f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   12f4a:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   12f4c:	464c      	mov	r4, r9
   12f4e:	46be      	mov	lr, r7
   12f50:	fbc1 4e03 	smlal	r4, lr, r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   12f54:	bfd4      	ite	le
   12f56:	4276      	negle	r6, r6
   12f58:	2600      	movgt	r6, #0
    result = (int32_t)(mult.long_long >> 31);
   12f5a:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   12f5c:	fa0c f306 	lsl.w	r3, ip, r6
    result = (int32_t)(mult.long_long >> 31);
   12f60:	ea44 0e4e 	orr.w	lr, r4, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   12f64:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   12f66:	ea0e 0103 	and.w	r1, lr, r3
    if (result < 0)
   12f6a:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
   12f6e:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   12f72:	bf48      	it	mi
   12f74:	3301      	addmi	r3, #1
    if (remainder > threshold)
   12f76:	4299      	cmp	r1, r3
                sum += out_offset;
   12f78:	9b14      	ldr	r3, [sp, #80]	; 0x50
        result++;
   12f7a:	bfc8      	it	gt
   12f7c:	f10e 0e01 	addgt.w	lr, lr, #1
   12f80:	449e      	add	lr, r3
                sum = MAX(sum, out_activation_min);
   12f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12f84:	459e      	cmp	lr, r3
   12f86:	bfb8      	it	lt
   12f88:	469e      	movlt	lr, r3
                sum = MIN(sum, out_activation_max);
   12f8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12f8c:	459e      	cmp	lr, r3
   12f8e:	bfa8      	it	ge
   12f90:	469e      	movge	lr, r3
                *out++ = (q7_t)sum;
   12f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12f94:	f803 e002 	strb.w	lr, [r3, r2]
            for (i = 0; i < output_ch; i++)
   12f98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   12f9a:	3201      	adds	r2, #1
   12f9c:	4418      	add	r0, r3
   12f9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12fa0:	429a      	cmp	r2, r3
   12fa2:	d1b8      	bne.n	12f16 <arm_convolve_s8+0x228>
   12fa4:	e7ab      	b.n	12efe <arm_convolve_s8+0x210>
                q31_t sum = 0;
   12fa6:	9940      	ldr	r1, [sp, #256]	; 0x100
   12fa8:	e7ba      	b.n	12f20 <arm_convolve_s8+0x232>
    memcpy(&val, *in_q7, 4);
   12faa:	f856 eb04 	ldr.w	lr, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
   12fae:	ea4f 233e 	mov.w	r3, lr, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   12fb2:	fa2f f883 	sxtb16	r8, r3
   12fb6:	fa2f f38e 	sxtb16	r3, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   12fba:	eac8 4e23 	pkhtb	lr, r8, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   12fbe:	eac3 4308 	pkhbt	r3, r3, r8, lsl #16

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   12fc2:	f8d4 8000 	ldr.w	r8, [r4]
   12fc6:	fb23 1308 	smlad	r3, r3, r8, r1
    memcpy(&val, *in_q15, 4);
   12fca:	6861      	ldr	r1, [r4, #4]
    *in_q15 += 2;
   12fcc:	3408      	adds	r4, #8
   12fce:	fb2e 3101 	smlad	r1, lr, r1, r3
                    col_count--;
   12fd2:	e7a7      	b.n	12f24 <arm_convolve_s8+0x236>
                    sum += ker_a1 * ip_b1;
   12fd4:	f913 eb01 	ldrsb.w	lr, [r3], #1
   12fd8:	f834 8b02 	ldrh.w	r8, [r4], #2
   12fdc:	fb18 110e 	smlabb	r1, r8, lr, r1
                    col_count--;
   12fe0:	e7a6      	b.n	12f30 <arm_convolve_s8+0x242>
            for (i = 0; i < output_ch; i++)
   12fe2:	2200      	movs	r2, #0
   12fe4:	982a      	ldr	r0, [sp, #168]	; 0xa8
            const q7_t *ker_a = filter_data;
   12fe6:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   12fe8:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
   12fec:	4617      	mov	r7, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
   12fee:	f04f 0c01 	mov.w	ip, #1
   12ff2:	e7d4      	b.n	12f9e <arm_convolve_s8+0x2b0>

00012ff4 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   12ff4:	688b      	ldr	r3, [r1, #8]
   12ff6:	68c0      	ldr	r0, [r0, #12]
   12ff8:	4358      	muls	r0, r3
   12ffa:	684b      	ldr	r3, [r1, #4]
   12ffc:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   12ffe:	0080      	lsls	r0, r0, #2
   13000:	4770      	bx	lr

00013002 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
   13002:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13006:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13008:	9600      	str	r6, [sp, #0]
   1300a:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
   1300e:	9701      	str	r7, [sp, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   13010:	690f      	ldr	r7, [r1, #16]
{
   13012:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
   13016:	e9dd c911 	ldrd	ip, r9, [sp, #68]	; 0x44
   1301a:	4686      	mov	lr, r0
   1301c:	460c      	mov	r4, r1
   1301e:	4690      	mov	r8, r2
   13020:	461d      	mov	r5, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   13022:	b9af      	cbnz	r7, 13050 <arm_convolve_wrapper_s8+0x4e>
   13024:	694f      	ldr	r7, [r1, #20]
   13026:	b99f      	cbnz	r7, 13050 <arm_convolve_wrapper_s8+0x4e>
   13028:	68df      	ldr	r7, [r3, #12]
   1302a:	07bf      	lsls	r7, r7, #30
   1302c:	d110      	bne.n	13050 <arm_convolve_wrapper_s8+0x4e>
   1302e:	688f      	ldr	r7, [r1, #8]
   13030:	2f01      	cmp	r7, #1
   13032:	d10d      	bne.n	13050 <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   13034:	68cf      	ldr	r7, [r1, #12]
   13036:	2f01      	cmp	r7, #1
   13038:	d10a      	bne.n	13050 <arm_convolve_wrapper_s8+0x4e>
   1303a:	68b7      	ldr	r7, [r6, #8]
   1303c:	2f01      	cmp	r7, #1
   1303e:	d107      	bne.n	13050 <arm_convolve_wrapper_s8+0x4e>
   13040:	6877      	ldr	r7, [r6, #4]
   13042:	2f01      	cmp	r7, #1
   13044:	d104      	bne.n	13050 <arm_convolve_wrapper_s8+0x4e>
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
   13046:	b003      	add	sp, #12
   13048:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
   1304c:	f7ff be1c 	b.w	12c88 <arm_convolve_1x1_s8_fast>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   13050:	f8dc 3004 	ldr.w	r3, [ip, #4]
   13054:	2b01      	cmp	r3, #1
   13056:	d11e      	bne.n	13096 <arm_convolve_wrapper_s8+0x94>
   13058:	686b      	ldr	r3, [r5, #4]
   1305a:	2b01      	cmp	r3, #1
   1305c:	d11b      	bne.n	13096 <arm_convolve_wrapper_s8+0x94>
   1305e:	6873      	ldr	r3, [r6, #4]
   13060:	2b01      	cmp	r3, #1
   13062:	d118      	bne.n	13096 <arm_convolve_wrapper_s8+0x94>
   13064:	f8dc 3008 	ldr.w	r3, [ip, #8]
   13068:	079b      	lsls	r3, r3, #30
   1306a:	d114      	bne.n	13096 <arm_convolve_wrapper_s8+0x94>
   1306c:	682b      	ldr	r3, [r5, #0]
   1306e:	2b01      	cmp	r3, #1
   13070:	d111      	bne.n	13096 <arm_convolve_wrapper_s8+0x94>
        return arm_convolve_1_x_n_s8(ctx,
   13072:	9b01      	ldr	r3, [sp, #4]
   13074:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
   13078:	9b00      	ldr	r3, [sp, #0]
   1307a:	930c      	str	r3, [sp, #48]	; 0x30
   1307c:	4642      	mov	r2, r8
   1307e:	462b      	mov	r3, r5
   13080:	4621      	mov	r1, r4
   13082:	4670      	mov	r0, lr
   13084:	e9cd c911 	strd	ip, r9, [sp, #68]	; 0x44
   13088:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   1308c:	b003      	add	sp, #12
   1308e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
   13092:	f7ff bde1 	b.w	12c58 <arm_convolve_1_x_n_s8>
        return arm_convolve_s8(ctx,
   13096:	9b01      	ldr	r3, [sp, #4]
   13098:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
   1309c:	9b00      	ldr	r3, [sp, #0]
   1309e:	930c      	str	r3, [sp, #48]	; 0x30
   130a0:	4642      	mov	r2, r8
   130a2:	462b      	mov	r3, r5
   130a4:	4621      	mov	r1, r4
   130a6:	4670      	mov	r0, lr
   130a8:	e9cd c911 	strd	ip, r9, [sp, #68]	; 0x44
   130ac:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
   130b0:	b003      	add	sp, #12
   130b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
   130b6:	f7ff be1a 	b.w	12cee <arm_convolve_s8>

000130ba <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
   130ba:	b410      	push	{r4}
   130bc:	4604      	mov	r4, r0
   130be:	4608      	mov	r0, r1
   130c0:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
   130c2:	6922      	ldr	r2, [r4, #16]
   130c4:	b9a2      	cbnz	r2, 130f0 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   130c6:	6962      	ldr	r2, [r4, #20]
   130c8:	b992      	cbnz	r2, 130f0 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   130ca:	68c2      	ldr	r2, [r0, #12]
   130cc:	0792      	lsls	r2, r2, #30
   130ce:	d10f      	bne.n	130f0 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   130d0:	68a2      	ldr	r2, [r4, #8]
   130d2:	2a01      	cmp	r2, #1
   130d4:	d10c      	bne.n	130f0 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
   130d6:	68e2      	ldr	r2, [r4, #12]
   130d8:	2a01      	cmp	r2, #1
   130da:	d109      	bne.n	130f0 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   130dc:	688a      	ldr	r2, [r1, #8]
   130de:	2a01      	cmp	r2, #1
   130e0:	d106      	bne.n	130f0 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
   130e2:	684a      	ldr	r2, [r1, #4]
   130e4:	2a01      	cmp	r2, #1
   130e6:	d103      	bne.n	130f0 <arm_convolve_wrapper_s8_get_buffer_size+0x36>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    }
}
   130e8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
   130ec:	f7ff bdfd 	b.w	12cea <arm_convolve_1x1_s8_fast_get_buffer_size>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
   130f0:	685a      	ldr	r2, [r3, #4]
   130f2:	2a01      	cmp	r2, #1
   130f4:	d10f      	bne.n	13116 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   130f6:	6842      	ldr	r2, [r0, #4]
   130f8:	2a01      	cmp	r2, #1
   130fa:	d10c      	bne.n	13116 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   130fc:	684a      	ldr	r2, [r1, #4]
   130fe:	2a01      	cmp	r2, #1
   13100:	d109      	bne.n	13116 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   13102:	689b      	ldr	r3, [r3, #8]
   13104:	079b      	lsls	r3, r3, #30
   13106:	d106      	bne.n	13116 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
   13108:	6803      	ldr	r3, [r0, #0]
   1310a:	2b01      	cmp	r3, #1
   1310c:	d103      	bne.n	13116 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
}
   1310e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
   13112:	f7ff bdb2 	b.w	12c7a <arm_convolve_1_x_n_s8_get_buffer_size>
}
   13116:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   1311a:	f7ff bf6b 	b.w	12ff4 <arm_convolve_s8_get_buffer_size>

0001311e <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
   1311e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13122:	b097      	sub	sp, #92	; 0x5c
   13124:	468b      	mov	fp, r1
   13126:	9303      	str	r3, [sp, #12]
   13128:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
   1312c:	9304      	str	r3, [sp, #16]
   1312e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
   13132:	9305      	str	r3, [sp, #20]
   13134:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   13138:	9301      	str	r3, [sp, #4]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
   1313a:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
   1313c:	9207      	str	r2, [sp, #28]
    q7_t *out_1 = out_0 + output_ch;
   1313e:	4413      	add	r3, r2
   13140:	9309      	str	r3, [sp, #36]	; 0x24
    /* this loop over rows in A */
    while (row_count)
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   13142:	9b01      	ldr	r3, [sp, #4]
{
   13144:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   13148:	900b      	str	r0, [sp, #44]	; 0x2c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1314a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1314e:	9302      	str	r3, [sp, #8]
   13150:	9b01      	ldr	r3, [sp, #4]
   13152:	f003 0303 	and.w	r3, r3, #3
   13156:	930f      	str	r3, [sp, #60]	; 0x3c
   13158:	9b01      	ldr	r3, [sp, #4]
   1315a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1315c:	089b      	lsrs	r3, r3, #2
   1315e:	009a      	lsls	r2, r3, #2
   13160:	9213      	str	r2, [sp, #76]	; 0x4c
   13162:	9a01      	ldr	r2, [sp, #4]
   13164:	1851      	adds	r1, r2, r1
   13166:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   1316a:	920a      	str	r2, [sp, #40]	; 0x28
   1316c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   13170:	9206      	str	r2, [sp, #24]
   13172:	9a07      	ldr	r2, [sp, #28]
   13174:	0852      	lsrs	r2, r2, #1
   13176:	9214      	str	r2, [sp, #80]	; 0x50
   13178:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   1317c:	920c      	str	r2, [sp, #48]	; 0x30
   1317e:	9a02      	ldr	r2, [sp, #8]
   13180:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13184:	9308      	str	r3, [sp, #32]
    const q7_t *ip_a0 = input_a;
   13186:	4606      	mov	r6, r0
    while (row_count)
   13188:	2201      	movs	r2, #1
   1318a:	2300      	movs	r3, #0
   1318c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1318e:	428b      	cmp	r3, r1
   13190:	f040 8086 	bne.w	132a0 <arm_nn_mat_mult_kernel_s8_s16+0x182>
   13194:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13196:	eb02 0043 	add.w	r0, r2, r3, lsl #1
   1319a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   1319e:	fb03 2101 	mla	r1, r3, r1, r2
        ip_a0 += num_col_a;
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
   131a2:	9a07      	ldr	r2, [sp, #28]
   131a4:	07d2      	lsls	r2, r2, #31
   131a6:	ea4f 04c3 	mov.w	r4, r3, lsl #3
   131aa:	ea4f 0843 	mov.w	r8, r3, lsl #1
   131ae:	d572      	bpl.n	13296 <arm_nn_mat_mult_kernel_s8_s16+0x178>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
   131b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   131b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
   131b6:	460e      	mov	r6, r1
        q31_t ch_0_out_1 = *bias++;
   131b8:	4694      	mov	ip, r2
        while (col_count)
   131ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   131bc:	455b      	cmp	r3, fp
   131be:	f040 81ae 	bne.w	1351e <arm_nn_mat_mult_kernel_s8_s16+0x400>
   131c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   131c4:	4419      	add	r1, r3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
   131c6:	9b01      	ldr	r3, [sp, #4]
   131c8:	f003 0303 	and.w	r3, r3, #3
   131cc:	440b      	add	r3, r1
   131ce:	428b      	cmp	r3, r1
   131d0:	f040 81c7 	bne.w	13562 <arm_nn_mat_mult_kernel_s8_s16+0x444>

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   131d4:	9b03      	ldr	r3, [sp, #12]
   131d6:	591f      	ldr	r7, [r3, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   131d8:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   131dc:	2600      	movs	r6, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   131de:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   131e0:	f85a 3004 	ldr.w	r3, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   131e4:	42b7      	cmp	r7, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   131e6:	46b6      	mov	lr, r6
   131e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   131ec:	fbc2 1e03 	smlal	r1, lr, r2, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   131f0:	bfd8      	it	le
   131f2:	427e      	negle	r6, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
   131f4:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   131f6:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   131f8:	40b3      	lsls	r3, r6
    result = (int32_t)(mult.long_long >> 31);
   131fa:	ea41 0e4e 	orr.w	lr, r1, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   131fe:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   13200:	ea0e 0203 	and.w	r2, lr, r3
    if (result < 0)
   13204:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
   13208:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1320c:	bf48      	it	mi
   1320e:	3301      	addmi	r3, #1
    if (remainder > threshold)
   13210:	429a      	cmp	r2, r3
        ch_0_out_0 += out_offset;
   13212:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
   13214:	bfc8      	it	gt
   13216:	f10e 0e01 	addgt.w	lr, lr, #1
   1321a:	449e      	add	lr, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1321c:	9b04      	ldr	r3, [sp, #16]
   1321e:	459e      	cmp	lr, r3
   13220:	bfb8      	it	lt
   13222:	469e      	movlt	lr, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   13224:	9b05      	ldr	r3, [sp, #20]
   13226:	459e      	cmp	lr, r3
   13228:	bfa8      	it	ge
   1322a:	469e      	movge	lr, r3
        *out_0++ = (q7_t)ch_0_out_0;
   1322c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1322e:	f803 e008 	strb.w	lr, [r3, r8]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   13232:	9b03      	ldr	r3, [sp, #12]
   13234:	591e      	ldr	r6, [r3, r4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13236:	f85a 4004 	ldr.w	r4, [sl, r4]
   1323a:	2200      	movs	r2, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1323c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13240:	4617      	mov	r7, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13242:	fa0c f303 	lsl.w	r3, ip, r3
   13246:	4296      	cmp	r6, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13248:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1324c:	fbc3 1704 	smlal	r1, r7, r3, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13250:	bfd8      	it	le
   13252:	4272      	negle	r2, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
   13254:	2301      	movs	r3, #1
   13256:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
   13258:	0fc9      	lsrs	r1, r1, #31
   1325a:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1325e:	3b01      	subs	r3, #1
    if (result < 0)
   13260:	fa51 f202 	asrs.w	r2, r1, r2
    int32_t remainder = remainder_mask & dividend;
   13264:	ea01 0403 	and.w	r4, r1, r3
    q31_t threshold = remainder_mask >> 1;
   13268:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1326c:	bf48      	it	mi
   1326e:	3301      	addmi	r3, #1
    if (remainder > threshold)
   13270:	429c      	cmp	r4, r3
        ch_0_out_1 += out_offset;
   13272:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
   13274:	bfc8      	it	gt
   13276:	3201      	addgt	r2, #1
   13278:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1327a:	9a04      	ldr	r2, [sp, #16]
   1327c:	429a      	cmp	r2, r3
   1327e:	bfb8      	it	lt
   13280:	461a      	movlt	r2, r3
   13282:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   13284:	9a05      	ldr	r2, [sp, #20]
   13286:	429a      	cmp	r2, r3
   13288:	bfa8      	it	ge
   1328a:	461a      	movge	r2, r3
   1328c:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
   1328e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13290:	f802 3008 	strb.w	r3, [r2, r8]
        *out_0++ = (q7_t)ch_0_out_0;
   13294:	3001      	adds	r0, #1
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   13296:	9b07      	ldr	r3, [sp, #28]
   13298:	4418      	add	r0, r3
   1329a:	b017      	add	sp, #92	; 0x5c
   1329c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   132a0:	9901      	ldr	r1, [sp, #4]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   132a2:	9f02      	ldr	r7, [sp, #8]
   132a4:	9615      	str	r6, [sp, #84]	; 0x54
   132a6:	1871      	adds	r1, r6, r1
   132a8:	910d      	str	r1, [sp, #52]	; 0x34
        q31_t ch_0_out_0 = *bias;
   132aa:	9925      	ldr	r1, [sp, #148]	; 0x94
        const q15_t *ip_b0 = input_b;
   132ac:	f8cd b000 	str.w	fp, [sp]
        q31_t ch_0_out_0 = *bias;
   132b0:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
        q31_t ch_1_out_0 = *bias;
   132b4:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
        q31_t ch_0_out_1 = *bias++;
   132b8:	4604      	mov	r4, r0
        q31_t ch_1_out_1 = *bias++;
   132ba:	46f0      	mov	r8, lr
        while (col_count)
   132bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   132be:	9d00      	ldr	r5, [sp, #0]
   132c0:	42a9      	cmp	r1, r5
   132c2:	f040 80d4 	bne.w	1346e <arm_nn_mat_mult_kernel_s8_s16+0x350>
   132c6:	9906      	ldr	r1, [sp, #24]
   132c8:	9d01      	ldr	r5, [sp, #4]
        while (col_count)
   132ca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   132cc:	440d      	add	r5, r1
   132ce:	950d      	str	r5, [sp, #52]	; 0x34
   132d0:	9d08      	ldr	r5, [sp, #32]
   132d2:	462f      	mov	r7, r5
   132d4:	460d      	mov	r5, r1
   132d6:	4435      	add	r5, r6
   132d8:	9510      	str	r5, [sp, #64]	; 0x40
   132da:	9d10      	ldr	r5, [sp, #64]	; 0x40
   132dc:	42a9      	cmp	r1, r5
   132de:	f040 8105 	bne.w	134ec <arm_nn_mat_mult_kernel_s8_s16+0x3ce>
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   132e2:	9903      	ldr	r1, [sp, #12]
   132e4:	f851 6033 	ldr.w	r6, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   132e8:	ea26 71e6 	bic.w	r1, r6, r6, asr #31
   132ec:	4088      	lsls	r0, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   132ee:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   132f2:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   132f4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   132f8:	f04f 0700 	mov.w	r7, #0
   132fc:	fbc0 5701 	smlal	r5, r7, r0, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13300:	bfd4      	ite	le
   13302:	4276      	negle	r6, r6
   13304:	2600      	movgt	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   13306:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   13308:	0fed      	lsrs	r5, r5, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1330a:	40b1      	lsls	r1, r6
    result = (int32_t)(mult.long_long >> 31);
   1330c:	ea45 0747 	orr.w	r7, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13310:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   13312:	ea07 0001 	and.w	r0, r7, r1
    if (result < 0)
   13316:	4137      	asrs	r7, r6
    q31_t threshold = remainder_mask >> 1;
   13318:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1331c:	bf48      	it	mi
   1331e:	3101      	addmi	r1, #1
    if (remainder > threshold)
   13320:	4288      	cmp	r0, r1
        ch_0_out_0 += out_offset;
   13322:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   13324:	bfc8      	it	gt
   13326:	3701      	addgt	r7, #1
   13328:	440f      	add	r7, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1332a:	9904      	ldr	r1, [sp, #16]
   1332c:	428f      	cmp	r7, r1
   1332e:	bfb8      	it	lt
   13330:	460f      	movlt	r7, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   13332:	9905      	ldr	r1, [sp, #20]
   13334:	428f      	cmp	r7, r1
   13336:	bfa8      	it	ge
   13338:	460f      	movge	r7, r1
        *out_0++ = (q7_t)ch_0_out_0;
   1333a:	9926      	ldr	r1, [sp, #152]	; 0x98
   1333c:	f801 7013 	strb.w	r7, [r1, r3, lsl #1]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   13340:	9903      	ldr	r1, [sp, #12]
   13342:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13346:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
   1334a:	408c      	lsls	r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1334c:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13350:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13352:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   13356:	f04f 0600 	mov.w	r6, #0
   1335a:	fbc4 0601 	smlal	r0, r6, r4, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1335e:	bfd4      	ite	le
   13360:	426d      	negle	r5, r5
   13362:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   13364:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   13366:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   13368:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
   1336a:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1336e:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   13370:	ea06 0401 	and.w	r4, r6, r1
    if (result < 0)
   13374:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
   13376:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1337a:	bf48      	it	mi
   1337c:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1337e:	428c      	cmp	r4, r1
        ch_0_out_1 += out_offset;
   13380:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   13382:	bfc8      	it	gt
   13384:	3601      	addgt	r6, #1
   13386:	440e      	add	r6, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   13388:	9904      	ldr	r1, [sp, #16]
   1338a:	428e      	cmp	r6, r1
   1338c:	bfb8      	it	lt
   1338e:	460e      	movlt	r6, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   13390:	9905      	ldr	r1, [sp, #20]
   13392:	428e      	cmp	r6, r1
   13394:	bfa8      	it	ge
   13396:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_0_out_1;
   13398:	9909      	ldr	r1, [sp, #36]	; 0x24
   1339a:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   1339e:	9903      	ldr	r1, [sp, #12]
   133a0:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   133a4:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   133a8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   133ac:	2c00      	cmp	r4, #0
   133ae:	fa0e fc0c 	lsl.w	ip, lr, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   133b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   133b6:	f04f 0500 	mov.w	r5, #0
   133ba:	fbcc 0501 	smlal	r0, r5, ip, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   133be:	bfd4      	ite	le
   133c0:	4264      	negle	r4, r4
   133c2:	2400      	movgt	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   133c4:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   133c6:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   133c8:	40a1      	lsls	r1, r4
    result = (int32_t)(mult.long_long >> 31);
   133ca:	ea40 0545 	orr.w	r5, r0, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   133ce:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   133d0:	ea05 0601 	and.w	r6, r5, r1
    if (result < 0)
   133d4:	4125      	asrs	r5, r4
    q31_t threshold = remainder_mask >> 1;
   133d6:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   133da:	bf48      	it	mi
   133dc:	3101      	addmi	r1, #1
    if (remainder > threshold)
   133de:	428e      	cmp	r6, r1
        ch_1_out_0 += out_offset;
   133e0:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   133e2:	bfc8      	it	gt
   133e4:	3501      	addgt	r5, #1
   133e6:	440d      	add	r5, r1
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   133e8:	9904      	ldr	r1, [sp, #16]
   133ea:	428d      	cmp	r5, r1
   133ec:	bfb8      	it	lt
   133ee:	460d      	movlt	r5, r1
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   133f0:	9905      	ldr	r1, [sp, #20]
   133f2:	428d      	cmp	r5, r1
   133f4:	bfa8      	it	ge
   133f6:	460d      	movge	r5, r1
        *out_0++ = (q7_t)ch_1_out_0;
   133f8:	9926      	ldr	r1, [sp, #152]	; 0x98
   133fa:	548d      	strb	r5, [r1, r2]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
   133fc:	9903      	ldr	r1, [sp, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   133fe:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   13402:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13406:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
   1340a:	2d00      	cmp	r5, #0
   1340c:	fa08 f101 	lsl.w	r1, r8, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13410:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   13414:	f04f 0600 	mov.w	r6, #0
   13418:	fbc1 4600 	smlal	r4, r6, r1, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1341c:	bfd4      	ite	le
   1341e:	426d      	negle	r5, r5
   13420:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   13422:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   13424:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   13426:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
   13428:	ea44 0646 	orr.w	r6, r4, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1342c:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1342e:	ea06 0001 	and.w	r0, r6, r1
    if (result < 0)
   13432:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
   13434:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   13438:	bf48      	it	mi
   1343a:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1343c:	4288      	cmp	r0, r1
        ch_1_out_1 += out_offset;
   1343e:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
   13440:	bfc8      	it	gt
   13442:	3601      	addgt	r6, #1
   13444:	440e      	add	r6, r1
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   13446:	9904      	ldr	r1, [sp, #16]
   13448:	428e      	cmp	r6, r1
   1344a:	bfb8      	it	lt
   1344c:	460e      	movlt	r6, r1
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   1344e:	9905      	ldr	r1, [sp, #20]
   13450:	428e      	cmp	r6, r1
   13452:	bfa8      	it	ge
   13454:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_1_out_1;
   13456:	9909      	ldr	r1, [sp, #36]	; 0x24
   13458:	548e      	strb	r6, [r1, r2]
        ip_a0 += num_col_a;
   1345a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1345c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1345e:	4401      	add	r1, r0
   13460:	460e      	mov	r6, r1
        row_count--;
   13462:	9906      	ldr	r1, [sp, #24]
   13464:	4401      	add	r1, r0
   13466:	3301      	adds	r3, #1
   13468:	9106      	str	r1, [sp, #24]
   1346a:	3202      	adds	r2, #2
   1346c:	e68e      	b.n	1318c <arm_nn_mat_mult_kernel_s8_s16+0x6e>
    memcpy(&val, *in_q15, 4);
   1346e:	9900      	ldr	r1, [sp, #0]
   13470:	f856 9b04 	ldr.w	r9, [r6], #4
   13474:	f8d1 c000 	ldr.w	ip, [r1]
   13478:	6839      	ldr	r1, [r7, #0]
   1347a:	910e      	str	r1, [sp, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
   1347c:	ea4f 2139 	mov.w	r1, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13480:	fa2f f989 	sxtb16	r9, r9
   13484:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   13488:	eac1 4529 	pkhtb	r5, r1, r9, asr #16
   1348c:	9510      	str	r5, [sp, #64]	; 0x40
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1348e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13490:	eac9 4901 	pkhbt	r9, r9, r1, lsl #16
    memcpy(&val, *in_q7, 4);
   13494:	f855 1b04 	ldr.w	r1, [r5], #4
   13498:	950d      	str	r5, [sp, #52]	; 0x34
  return (op1 >> op2) | (op1 << (32U - op2));
   1349a:	ea4f 2531 	mov.w	r5, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1349e:	fa2f f585 	sxtb16	r5, r5
   134a2:	9511      	str	r5, [sp, #68]	; 0x44
   134a4:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   134a8:	eac5 4521 	pkhtb	r5, r5, r1, asr #16
   134ac:	9512      	str	r5, [sp, #72]	; 0x48
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   134ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
   134b0:	eac1 4105 	pkhbt	r1, r1, r5, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   134b4:	fb29 000c 	smlad	r0, r9, ip, r0
   134b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   134ba:	fb29 4405 	smlad	r4, r9, r5, r4
   134be:	fb21 ec0c 	smlad	ip, r1, ip, lr
   134c2:	fb21 8105 	smlad	r1, r1, r5, r8
    memcpy(&val, *in_q15, 4);
   134c6:	9d00      	ldr	r5, [sp, #0]
   134c8:	f8d7 8004 	ldr.w	r8, [r7, #4]
   134cc:	f8d5 9004 	ldr.w	r9, [r5, #4]
    *in_q15 += 2;
   134d0:	3508      	adds	r5, #8
   134d2:	9500      	str	r5, [sp, #0]
   134d4:	3708      	adds	r7, #8
   134d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
   134d8:	fb25 0009 	smlad	r0, r5, r9, r0
   134dc:	fb25 4408 	smlad	r4, r5, r8, r4
   134e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
   134e2:	fb25 ce09 	smlad	lr, r5, r9, ip
   134e6:	fb25 1808 	smlad	r8, r5, r8, r1
            col_count--;
   134ea:	e6e7      	b.n	132bc <arm_nn_mat_mult_kernel_s8_s16+0x19e>
            q15_t b0 = *ip_b0++;
   134ec:	9e00      	ldr	r6, [sp, #0]
            q7_t a0 = *ip_a0++;
   134ee:	f911 9b01 	ldrsb.w	r9, [r1], #1
            q15_t b0 = *ip_b0++;
   134f2:	f936 5b02 	ldrsh.w	r5, [r6], #2
   134f6:	9600      	str	r6, [sp, #0]
   134f8:	462e      	mov	r6, r5
            q7_t a1 = *ip_a1++;
   134fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   134fc:	f915 cb01 	ldrsb.w	ip, [r5], #1
   13500:	950d      	str	r5, [sp, #52]	; 0x34
            q15_t b1 = *ip_b1++;
   13502:	f937 5b02 	ldrsh.w	r5, [r7], #2
   13506:	950e      	str	r5, [sp, #56]	; 0x38
            ch_0_out_1 += a0 * b1;
   13508:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1350a:	fb15 4409 	smlabb	r4, r5, r9, r4
            ch_1_out_1 += a1 * b1;
   1350e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
            ch_0_out_0 += a0 * b0;
   13510:	fb16 0009 	smlabb	r0, r6, r9, r0
            ch_1_out_0 += a1 * b0;
   13514:	fb16 ee0c 	smlabb	lr, r6, ip, lr
            ch_1_out_1 += a1 * b1;
   13518:	fb15 880c 	smlabb	r8, r5, ip, r8
            col_count--;
   1351c:	e6dd      	b.n	132da <arm_nn_mat_mult_kernel_s8_s16+0x1bc>
    memcpy(&val, *in_q7, 4);
   1351e:	f856 3b04 	ldr.w	r3, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
   13522:	ea4f 2e33 	mov.w	lr, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13526:	fa2f f383 	sxtb16	r3, r3
   1352a:	fa2f fe8e 	sxtb16	lr, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1352e:	eace 4723 	pkhtb	r7, lr, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   13532:	eac3 430e 	pkhbt	r3, r3, lr, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13536:	f8db e000 	ldr.w	lr, [fp]
   1353a:	fb23 220e 	smlad	r2, r3, lr, r2
   1353e:	9d02      	ldr	r5, [sp, #8]
   13540:	f8d5 e000 	ldr.w	lr, [r5]
   13544:	fb23 c30e 	smlad	r3, r3, lr, ip
    memcpy(&val, *in_q15, 4);
   13548:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1354c:	f8db e004 	ldr.w	lr, [fp, #4]
    *in_q15 += 2;
   13550:	3508      	adds	r5, #8
   13552:	f10b 0b08 	add.w	fp, fp, #8
   13556:	9502      	str	r5, [sp, #8]
   13558:	fb27 220e 	smlad	r2, r7, lr, r2
   1355c:	fb27 3c0c 	smlad	ip, r7, ip, r3
            col_count--;
   13560:	e62b      	b.n	131ba <arm_nn_mat_mult_kernel_s8_s16+0x9c>
            q7_t a0 = *ip_a0++;
   13562:	f911 6b01 	ldrsb.w	r6, [r1], #1
            ch_0_out_0 += a0 * b0;
   13566:	f83b 7b02 	ldrh.w	r7, [fp], #2
            ch_0_out_1 += a0 * b1;
   1356a:	9d08      	ldr	r5, [sp, #32]
            ch_0_out_0 += a0 * b0;
   1356c:	fb17 2206 	smlabb	r2, r7, r6, r2
            ch_0_out_1 += a0 * b1;
   13570:	f835 7b02 	ldrh.w	r7, [r5], #2
   13574:	9508      	str	r5, [sp, #32]
   13576:	fb17 cc06 	smlabb	ip, r7, r6, ip
            col_count--;
   1357a:	e628      	b.n	131ce <arm_nn_mat_mult_kernel_s8_s16+0xb0>

0001357c <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
   1357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13580:	b08a      	sub	sp, #40	; 0x28
   13582:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
   13586:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
   1358a:	681d      	ldr	r5, [r3, #0]
{
   1358c:	460c      	mov	r4, r1
   1358e:	4616      	mov	r6, r2

    while (batch_cnt)
   13590:	b91d      	cbnz	r5, 1359a <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
   13592:	4628      	mov	r0, r5
   13594:	b00a      	add	sp, #40	; 0x28
   13596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
   1359a:	6923      	ldr	r3, [r4, #16]
   1359c:	9308      	str	r3, [sp, #32]
   1359e:	68e3      	ldr	r3, [r4, #12]
   135a0:	9307      	str	r3, [sp, #28]
   135a2:	f8da 300c 	ldr.w	r3, [sl, #12]
   135a6:	9306      	str	r3, [sp, #24]
   135a8:	f8d9 3000 	ldr.w	r3, [r9]
   135ac:	9305      	str	r3, [sp, #20]
   135ae:	6873      	ldr	r3, [r6, #4]
   135b0:	9304      	str	r3, [sp, #16]
   135b2:	6833      	ldr	r3, [r6, #0]
   135b4:	9303      	str	r3, [sp, #12]
   135b6:	68a3      	ldr	r3, [r4, #8]
   135b8:	9302      	str	r3, [sp, #8]
   135ba:	6863      	ldr	r3, [r4, #4]
   135bc:	9301      	str	r3, [sp, #4]
   135be:	6823      	ldr	r3, [r4, #0]
   135c0:	9300      	str	r3, [sp, #0]
   135c2:	4638      	mov	r0, r7
   135c4:	4643      	mov	r3, r8
   135c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   135c8:	9914      	ldr	r1, [sp, #80]	; 0x50
   135ca:	f000 fb8d 	bl	13ce8 <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
   135ce:	f8d9 3000 	ldr.w	r3, [r9]
   135d2:	441f      	add	r7, r3
        output += output_dims->c;
   135d4:	f8da 300c 	ldr.w	r3, [sl, #12]
        batch_cnt--;
   135d8:	3d01      	subs	r5, #1
        output += output_dims->c;
   135da:	4498      	add	r8, r3
        batch_cnt--;
   135dc:	e7d8      	b.n	13590 <arm_fully_connected_s8+0x14>

000135de <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
   135de:	2000      	movs	r0, #0
   135e0:	4770      	bx	lr

000135e2 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
   135e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e6:	b09b      	sub	sp, #108	; 0x6c
   135e8:	930e      	str	r3, [sp, #56]	; 0x38
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
   135ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
   135ec:	9209      	str	r2, [sp, #36]	; 0x24
        int32_t lhs_rows_idx = lhs_rows >> 1;
   135ee:	105b      	asrs	r3, r3, #1
   135f0:	9311      	str	r3, [sp, #68]	; 0x44

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
   135f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   135f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
{
   135f6:	9112      	str	r1, [sp, #72]	; 0x48
        rhs += 2 * rhs_cols;
   135f8:	005b      	lsls	r3, r3, #1
   135fa:	9310      	str	r3, [sp, #64]	; 0x40
   135fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
{
   135fe:	900c      	str	r0, [sp, #48]	; 0x30
   13600:	4353      	muls	r3, r2
   13602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13604:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   13608:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   1360a:	930a      	str	r3, [sp, #40]	; 0x28
   1360c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1360e:	2a00      	cmp	r2, #0
   13610:	f023 030f 	bic.w	r3, r3, #15
   13614:	bfb8      	it	lt
   13616:	2300      	movlt	r3, #0
   13618:	9308      	str	r3, [sp, #32]
   1361a:	4613      	mov	r3, r2
   1361c:	9a08      	ldr	r2, [sp, #32]
   1361e:	9908      	ldr	r1, [sp, #32]
   13620:	1a9b      	subs	r3, r3, r2
   13622:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   13624:	428a      	cmp	r2, r1
   13626:	bfb8      	it	lt
   13628:	2300      	movlt	r3, #0
   1362a:	4413      	add	r3, r2
   1362c:	9316      	str	r3, [sp, #88]	; 0x58
   1362e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   13630:	005b      	lsls	r3, r3, #1
   13632:	9314      	str	r3, [sp, #80]	; 0x50
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   13634:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13636:	9300      	str	r3, [sp, #0]
   13638:	2304      	movs	r3, #4
   1363a:	9305      	str	r3, [sp, #20]
   1363c:	2300      	movs	r3, #0
   1363e:	9301      	str	r3, [sp, #4]
   13640:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   13642:	3b01      	subs	r3, #1
   13644:	9318      	str	r3, [sp, #96]	; 0x60
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13646:	f1a2 030f 	sub.w	r3, r2, #15
   1364a:	9313      	str	r3, [sp, #76]	; 0x4c
   1364c:	9a01      	ldr	r2, [sp, #4]
   1364e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13650:	4413      	add	r3, r2
   13652:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   13654:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13656:	4293      	cmp	r3, r2
   13658:	f340 82cd 	ble.w	13bf6 <arm_nn_mat_mult_nt_t_s8+0x614>
   1365c:	9b00      	ldr	r3, [sp, #0]
        for (int32_t x = 0; x < rhs_cols; ++x)
   1365e:	9800      	ldr	r0, [sp, #0]
   13660:	1e5a      	subs	r2, r3, #1
        q31_t lhs_offset_contribution1 = 0;
   13662:	2300      	movs	r3, #0
        q31_t lhs_offset_contribution0 = 0;
   13664:	4619      	mov	r1, r3
        for (int32_t x = 0; x < rhs_cols; ++x)
   13666:	f1c0 0001 	rsb	r0, r0, #1
   1366a:	e005      	b.n	13678 <arm_nn_mat_mult_nt_t_s8+0x96>
            lhs_offset_contribution0 += rhs[x];
   1366c:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
   13670:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   13672:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   13674:	5714      	ldrsb	r4, [r2, r4]
   13676:	4423      	add	r3, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
   13678:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   1367a:	1884      	adds	r4, r0, r2
   1367c:	42ac      	cmp	r4, r5
   1367e:	dbf5      	blt.n	1366c <arm_nn_mat_mult_nt_t_s8+0x8a>
        lhs_offset_contribution0 *= lhs_offset;
   13680:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   13682:	434a      	muls	r2, r1
   13684:	9202      	str	r2, [sp, #8]
        lhs_offset_contribution1 *= lhs_offset;
   13686:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   13688:	4353      	muls	r3, r2
   1368a:	9303      	str	r3, [sp, #12]
        if (bias)
   1368c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1368e:	b15b      	cbz	r3, 136a8 <arm_nn_mat_mult_nt_t_s8+0xc6>
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   13690:	9a01      	ldr	r2, [sp, #4]
   13692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13696:	9a02      	ldr	r2, [sp, #8]
   13698:	441a      	add	r2, r3
   1369a:	9202      	str	r2, [sp, #8]
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   1369c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1369e:	9a05      	ldr	r2, [sp, #20]
   136a0:	589b      	ldr	r3, [r3, r2]
   136a2:	9a03      	ldr	r2, [sp, #12]
   136a4:	441a      	add	r2, r3
   136a6:	9203      	str	r2, [sp, #12]
        while (lhs_rows_idx)
   136a8:	9b08      	ldr	r3, [sp, #32]
   136aa:	9a00      	ldr	r2, [sp, #0]
   136ac:	3b01      	subs	r3, #1
   136ae:	18d3      	adds	r3, r2, r3
   136b0:	930b      	str	r3, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
   136b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   136b4:	9304      	str	r3, [sp, #16]
        int32_t lhs_rows_idx = lhs_rows >> 1;
   136b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   136b8:	9306      	str	r3, [sp, #24]
            dst_ptr[1] = (q7_t)res11;
   136ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   136bc:	3301      	adds	r3, #1
   136be:	9319      	str	r3, [sp, #100]	; 0x64
        while (lhs_rows_idx)
   136c0:	9b06      	ldr	r3, [sp, #24]
   136c2:	2b00      	cmp	r3, #0
   136c4:	f000 8190 	beq.w	139e8 <arm_nn_mat_mult_nt_t_s8+0x406>
   136c8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   136ca:	9b00      	ldr	r3, [sp, #0]
            q31_t res10 = lhs_offset_contribution0;
   136cc:	e9dd b902 	ldrd	fp, r9, [sp, #8]
   136d0:	189e      	adds	r6, r3, r2
   136d2:	9b04      	ldr	r3, [sp, #16]
            q31_t res01 = lhs_offset_contribution1;
   136d4:	464f      	mov	r7, r9
   136d6:	189d      	adds	r5, r3, r2
            q31_t res00 = lhs_offset_contribution0;
   136d8:	465b      	mov	r3, fp
            int32_t rhs_cols_idx = 0;
   136da:	2200      	movs	r2, #0
   136dc:	e0a3      	b.n	13826 <arm_nn_mat_mult_nt_t_s8+0x244>
    memcpy(&val, *in_q7, 4);
   136de:	9900      	ldr	r1, [sp, #0]
   136e0:	5888      	ldr	r0, [r1, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   136e2:	9904      	ldr	r1, [sp, #16]
   136e4:	fa2f fe80 	sxtb16	lr, r0
   136e8:	588c      	ldr	r4, [r1, r2]
   136ea:	6831      	ldr	r1, [r6, #0]
   136ec:	fa2f f884 	sxtb16	r8, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   136f0:	fa2f f090 	sxtb16	r0, r0, ror #8
   136f4:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   136f8:	fb28 3c0e 	smlad	ip, r8, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   136fc:	fa2f f381 	sxtb16	r3, r1
   13700:	930f      	str	r3, [sp, #60]	; 0x3c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13702:	fb24 c300 	smlad	r3, r4, r0, ip
   13706:	9317      	str	r3, [sp, #92]	; 0x5c
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13708:	fa2f fc91 	sxtb16	ip, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1370c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1370e:	fb28 7701 	smlad	r7, r8, r1, r7
   13712:	fb24 740c 	smlad	r4, r4, ip, r7
    memcpy(&val, in_q7, 4);
   13716:	6829      	ldr	r1, [r5, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13718:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1371c:	fa2f f791 	sxtb16	r7, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13720:	fb28 be0e 	smlad	lr, r8, lr, fp
   13724:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13726:	fb28 9101 	smlad	r1, r8, r1, r9
   1372a:	fb27 e000 	smlad	r0, r7, r0, lr
    memcpy(&val, *in_q7, 4);
   1372e:	f8da 8004 	ldr.w	r8, [sl, #4]
   13732:	fb27 110c 	smlad	r1, r7, ip, r1
    memcpy(&val, in_q7, 4);
   13736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13738:	f8d6 e004 	ldr.w	lr, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1373c:	f8d3 9004 	ldr.w	r9, [r3, #4]
   13740:	fa2f f788 	sxtb16	r7, r8
   13744:	fa2f fc89 	sxtb16	ip, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13748:	fa2f f898 	sxtb16	r8, r8, ror #8
   1374c:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13752:	fb2c 3307 	smlad	r3, ip, r7, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13756:	fa2f fb8e 	sxtb16	fp, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1375a:	fb29 3308 	smlad	r3, r9, r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1375e:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13762:	fb2c 440b 	smlad	r4, ip, fp, r4
   13766:	fb29 490e 	smlad	r9, r9, lr, r4
   1376a:	686c      	ldr	r4, [r5, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1376c:	fa2f fc84 	sxtb16	ip, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13770:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13774:	fb2c 0007 	smlad	r0, ip, r7, r0
   13778:	fb2c 110b 	smlad	r1, ip, fp, r1
   1377c:	fb24 0808 	smlad	r8, r4, r8, r0
    memcpy(&val, *in_q7, 4);
   13780:	f8da b008 	ldr.w	fp, [sl, #8]
   13784:	fb24 1e0e 	smlad	lr, r4, lr, r1
    memcpy(&val, in_q7, 4);
   13788:	980d      	ldr	r0, [sp, #52]	; 0x34
   1378a:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1378e:	6880      	ldr	r0, [r0, #8]
   13790:	fa2f f18b 	sxtb16	r1, fp
   13794:	fa2f f480 	sxtb16	r4, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13798:	fa2f fb9b 	sxtb16	fp, fp, ror #8
   1379c:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   137a0:	fb24 3301 	smlad	r3, r4, r1, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   137a4:	fa2f f78c 	sxtb16	r7, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   137a8:	fb20 330b 	smlad	r3, r0, fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   137ac:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   137b0:	fb24 9907 	smlad	r9, r4, r7, r9
   137b4:	fb20 900c 	smlad	r0, r0, ip, r9
   137b8:	f8d5 9008 	ldr.w	r9, [r5, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   137bc:	fa2f f489 	sxtb16	r4, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   137c0:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   137c4:	fb24 8801 	smlad	r8, r4, r1, r8
   137c8:	fb24 e407 	smlad	r4, r4, r7, lr
   137cc:	fb29 8b0b 	smlad	fp, r9, fp, r8
    memcpy(&val, *in_q7, 4);
   137d0:	f8da e00c 	ldr.w	lr, [sl, #12]
   137d4:	fb29 4c0c 	smlad	ip, r9, ip, r4
    memcpy(&val, in_q7, 4);
   137d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   137da:	68f1      	ldr	r1, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   137dc:	68e7      	ldr	r7, [r4, #12]
   137de:	fa2f f88e 	sxtb16	r8, lr
   137e2:	fa2f fa87 	sxtb16	sl, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   137e6:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   137ea:	fa2f f497 	sxtb16	r4, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   137ee:	fb2a 3308 	smlad	r3, sl, r8, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   137f2:	fa2f f981 	sxtb16	r9, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   137f6:	fb24 330e 	smlad	r3, r4, lr, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   137fa:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   137fe:	fb2a 0009 	smlad	r0, sl, r9, r0
   13802:	fb24 0701 	smlad	r7, r4, r1, r0
   13806:	68ed      	ldr	r5, [r5, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13808:	fa2f f485 	sxtb16	r4, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1380c:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13810:	fb24 bb08 	smlad	fp, r4, r8, fp
   13814:	fb24 cc09 	smlad	ip, r4, r9, ip
   13818:	fb25 bb0e 	smlad	fp, r5, lr, fp
   1381c:	fb25 c901 	smlad	r9, r5, r1, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13820:	9d15      	ldr	r5, [sp, #84]	; 0x54
   13822:	3210      	adds	r2, #16
   13824:	3610      	adds	r6, #16
   13826:	9904      	ldr	r1, [sp, #16]
   13828:	4411      	add	r1, r2
   1382a:	910d      	str	r1, [sp, #52]	; 0x34
   1382c:	9900      	ldr	r1, [sp, #0]
   1382e:	eb01 0a02 	add.w	sl, r1, r2
   13832:	f105 0110 	add.w	r1, r5, #16
   13836:	9115      	str	r1, [sp, #84]	; 0x54
   13838:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1383a:	4291      	cmp	r1, r2
   1383c:	f73f af4f 	bgt.w	136de <arm_nn_mat_mult_nt_t_s8+0xfc>
   13840:	9908      	ldr	r1, [sp, #32]
   13842:	9a04      	ldr	r2, [sp, #16]
   13844:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13846:	440a      	add	r2, r1
   13848:	4614      	mov	r4, r2
   1384a:	1e51      	subs	r1, r2, #1
   1384c:	9a08      	ldr	r2, [sp, #32]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1384e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   13850:	42aa      	cmp	r2, r5
   13852:	f2c0 80b7 	blt.w	139c4 <arm_nn_mat_mult_nt_t_s8+0x3e2>
                lhs_value = lhs_ptr[rhs_cols];
   13856:	9a16      	ldr	r2, [sp, #88]	; 0x58
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   13858:	9901      	ldr	r1, [sp, #4]
                lhs_value = lhs_ptr[rhs_cols];
   1385a:	18a2      	adds	r2, r4, r2
   1385c:	9204      	str	r2, [sp, #16]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   1385e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13860:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   13864:	920d      	str	r2, [sp, #52]	; 0x34
   13866:	9a25      	ldr	r2, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13868:	980d      	ldr	r0, [sp, #52]	; 0x34
   1386a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1386e:	ea25 7ee5 	bic.w	lr, r5, r5, asr #31
   13872:	2d00      	cmp	r5, #0
   13874:	fa03 f30e 	lsl.w	r3, r3, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13878:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1387c:	f04f 0100 	mov.w	r1, #0
   13880:	fbc3 2100 	smlal	r2, r1, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13884:	bfd8      	it	le
   13886:	426d      	negle	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
   13888:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1388c:	bfc8      	it	gt
   1388e:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   13890:	fa03 fa05 	lsl.w	sl, r3, r5
    result = (int32_t)(mult.long_long >> 31);
   13894:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   13896:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult.long_long >> 31);
   1389a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1389e:	fa4a fc03 	asr.w	ip, sl, r3
    int32_t remainder = remainder_mask & dividend;
   138a2:	ea02 010a 	and.w	r1, r2, sl
    if (result < 0)
   138a6:	412a      	asrs	r2, r5
        threshold++;
   138a8:	bf4c      	ite	mi
   138aa:	4463      	addmi	r3, ip
    q31_t threshold = remainder_mask >> 1;
   138ac:	4663      	movpl	r3, ip
    if (remainder > threshold)
   138ae:	4299      	cmp	r1, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   138b0:	9905      	ldr	r1, [sp, #20]
   138b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   138b4:	585b      	ldr	r3, [r3, r1]
   138b6:	930f      	str	r3, [sp, #60]	; 0x3c
   138b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   138ba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   138bc:	585c      	ldr	r4, [r3, r1]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   138be:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
   138c2:	fa07 f701 	lsl.w	r7, r7, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   138c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   138ca:	f04f 0000 	mov.w	r0, #0
   138ce:	fbc7 3006 	smlal	r3, r0, r7, r6
        result++;
   138d2:	bfc8      	it	gt
   138d4:	3201      	addgt	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   138d6:	0fdb      	lsrs	r3, r3, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   138d8:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
   138da:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   138de:	bfd8      	it	le
   138e0:	4264      	negle	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
   138e2:	f04f 0001 	mov.w	r0, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   138e6:	bfc8      	it	gt
   138e8:	2400      	movgt	r4, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   138ea:	fa00 f604 	lsl.w	r6, r0, r4
   138ee:	3e01      	subs	r6, #1
    q31_t threshold = remainder_mask >> 1;
   138f0:	fa46 f700 	asr.w	r7, r6, r0
    int32_t remainder = remainder_mask & dividend;
   138f4:	ea03 0806 	and.w	r8, r3, r6
    if (result < 0)
   138f8:	4123      	asrs	r3, r4
        threshold++;
   138fa:	bf4c      	ite	mi
   138fc:	1838      	addmi	r0, r7, r0
    q31_t threshold = remainder_mask >> 1;
   138fe:	4638      	movpl	r0, r7
    if (remainder > threshold)
   13900:	4580      	cmp	r8, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13902:	980d      	ldr	r0, [sp, #52]	; 0x34
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13904:	fa0b fe0e 	lsl.w	lr, fp, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13908:	f04f 0800 	mov.w	r8, #0
   1390c:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
   13910:	fbce b800 	smlal	fp, r8, lr, r0
   13914:	4658      	mov	r0, fp
    result = (int32_t)(mult.long_long >> 31);
   13916:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   1391a:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
        result++;
   1391e:	bfc8      	it	gt
   13920:	3301      	addgt	r3, #1
    int32_t remainder = remainder_mask & dividend;
   13922:	ea00 0a0a 	and.w	sl, r0, sl
    if (result < 0)
   13926:	4128      	asrs	r0, r5
        threshold++;
   13928:	bf48      	it	mi
   1392a:	f10c 0c01 	addmi.w	ip, ip, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1392e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    if (remainder > threshold)
   13930:	45e2      	cmp	sl, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13932:	fa09 f101 	lsl.w	r1, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13936:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
   1393a:	f04f 0c00 	mov.w	ip, #0
   1393e:	fbc1 ec05 	smlal	lr, ip, r1, r5
   13942:	4675      	mov	r5, lr
    result = (int32_t)(mult.long_long >> 31);
   13944:	ea4f 75d5 	mov.w	r5, r5, lsr #31
   13948:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
        result++;
   1394c:	bfc8      	it	gt
   1394e:	3001      	addgt	r0, #1
    if (result < 0)
   13950:	fa55 f404 	asrs.w	r4, r5, r4
    int32_t remainder = remainder_mask & dividend;
   13954:	ea06 0605 	and.w	r6, r6, r5
        threshold++;
   13958:	bf48      	it	mi
   1395a:	3701      	addmi	r7, #1
            res00 += dst_offset;
   1395c:	992a      	ldr	r1, [sp, #168]	; 0xa8
    if (remainder > threshold)
   1395e:	42be      	cmp	r6, r7
        result++;
   13960:	bfc8      	it	gt
   13962:	3401      	addgt	r4, #1
   13964:	440a      	add	r2, r1
            res01 += dst_offset;
   13966:	440b      	add	r3, r1
            res10 += dst_offset;
   13968:	4408      	add	r0, r1
            res11 += dst_offset;
   1396a:	440c      	add	r4, r1
            res00 = MAX(res00, activation_min);
   1396c:	992b      	ldr	r1, [sp, #172]	; 0xac
   1396e:	428a      	cmp	r2, r1
   13970:	bfb8      	it	lt
   13972:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
   13974:	428b      	cmp	r3, r1
   13976:	bfb8      	it	lt
   13978:	460b      	movlt	r3, r1
            res10 = MAX(res10, activation_min);
   1397a:	4288      	cmp	r0, r1
   1397c:	bfb8      	it	lt
   1397e:	4608      	movlt	r0, r1
            res11 = MAX(res11, activation_min);
   13980:	428c      	cmp	r4, r1
   13982:	bfb8      	it	lt
   13984:	460c      	movlt	r4, r1
            res00 = MIN(res00, activation_max);
   13986:	992c      	ldr	r1, [sp, #176]	; 0xb0
   13988:	428a      	cmp	r2, r1
   1398a:	bfa8      	it	ge
   1398c:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
   1398e:	9907      	ldr	r1, [sp, #28]
   13990:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
   13992:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   13994:	4293      	cmp	r3, r2
   13996:	bfa8      	it	ge
   13998:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
   1399a:	704b      	strb	r3, [r1, #1]
            res10 = MIN(res10, activation_max);
   1399c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
   1399e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            res10 = MIN(res10, activation_max);
   139a0:	4298      	cmp	r0, r3
   139a2:	bfa8      	it	ge
   139a4:	4618      	movge	r0, r3
            res11 = MIN(res11, activation_max);
   139a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
   139a8:	5488      	strb	r0, [r1, r2]
            res11 = MIN(res11, activation_max);
   139aa:	429c      	cmp	r4, r3
            dst_ptr[1] = (q7_t)res11;
   139ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
            res11 = MIN(res11, activation_max);
   139ae:	bfa8      	it	ge
   139b0:	461c      	movge	r4, r3
            dst_ptr[1] = (q7_t)res11;
   139b2:	548c      	strb	r4, [r1, r2]
            dst_ptr += rhs_rows;
   139b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
            dst_ptr[1] = (q7_t)res11;
   139b6:	460b      	mov	r3, r1
   139b8:	4413      	add	r3, r2
   139ba:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
   139bc:	9b06      	ldr	r3, [sp, #24]
   139be:	3b01      	subs	r3, #1
   139c0:	9306      	str	r3, [sp, #24]
   139c2:	e67d      	b.n	136c0 <arm_nn_mat_mult_nt_t_s8+0xde>
                q7_t rhs_value0 = rhs_ptr[0];
   139c4:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   139c8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   139ca:	5746      	ldrsb	r6, [r0, r5]
                q7_t lhs_value = lhs_ptr[0];
   139cc:	f911 5f01 	ldrsb.w	r5, [r1, #1]!
                res00 += lhs_value * rhs_value0;
   139d0:	fb15 330c 	smlabb	r3, r5, ip, r3
                res01 += lhs_value * rhs_value1;
   139d4:	fb15 7706 	smlabb	r7, r5, r6, r7
                lhs_value = lhs_ptr[rhs_cols];
   139d8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   139da:	574d      	ldrsb	r5, [r1, r5]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   139dc:	3201      	adds	r2, #1
                res10 += lhs_value * rhs_value0;
   139de:	fb1c bb05 	smlabb	fp, ip, r5, fp
                res11 += lhs_value * rhs_value1;
   139e2:	fb16 9905 	smlabb	r9, r6, r5, r9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   139e6:	e732      	b.n	1384e <arm_nn_mat_mult_nt_t_s8+0x26c>
        if (lhs_rows % 2)
   139e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   139ea:	07d8      	lsls	r0, r3, #31
   139ec:	d579      	bpl.n	13ae2 <arm_nn_mat_mult_nt_t_s8+0x500>
   139ee:	9b00      	ldr	r3, [sp, #0]
   139f0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   139f2:	1898      	adds	r0, r3, r2
            int32_t rhs_cols_idx = 0;
   139f4:	9b06      	ldr	r3, [sp, #24]
   139f6:	9a04      	ldr	r2, [sp, #16]
   139f8:	18d6      	adds	r6, r2, r3
   139fa:	9a00      	ldr	r2, [sp, #0]
   139fc:	18d5      	adds	r5, r2, r3
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   139fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13a00:	429a      	cmp	r2, r3
   13a02:	dc7c      	bgt.n	13afe <arm_nn_mat_mult_nt_t_s8+0x51c>
   13a04:	9a08      	ldr	r2, [sp, #32]
   13a06:	9b04      	ldr	r3, [sp, #16]
   13a08:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   13a0a:	9a04      	ldr	r2, [sp, #16]
   13a0c:	4251      	negs	r1, r2
   13a0e:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13a10:	185a      	adds	r2, r3, r1
   13a12:	4290      	cmp	r0, r2
   13a14:	f300 80dd 	bgt.w	13bd2 <arm_nn_mat_mult_nt_t_s8+0x5f0>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   13a18:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13a1a:	9a01      	ldr	r2, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13a1c:	9901      	ldr	r1, [sp, #4]
   13a1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a22:	9b02      	ldr	r3, [sp, #8]
   13a24:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
   13a28:	40a3      	lsls	r3, r4
   13a2a:	461c      	mov	r4, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13a2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13a2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   13a32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   13a36:	2500      	movs	r5, #0
   13a38:	fbc4 0503 	smlal	r0, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
   13a3c:	0fc1      	lsrs	r1, r0, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a3e:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
   13a40:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13a44:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a48:	bfd4      	ite	le
   13a4a:	4251      	negle	r1, r2
   13a4c:	2100      	movgt	r1, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   13a4e:	408b      	lsls	r3, r1
   13a50:	3b01      	subs	r3, #1
    if (result < 0)
   13a52:	fa55 f101 	asrs.w	r1, r5, r1
    int32_t remainder = remainder_mask & dividend;
   13a56:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
   13a5a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   13a5e:	bf48      	it	mi
   13a60:	3301      	addmi	r3, #1
    if (remainder > threshold)
   13a62:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   13a64:	9a05      	ldr	r2, [sp, #20]
   13a66:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13a68:	589c      	ldr	r4, [r3, r2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a6a:	9b03      	ldr	r3, [sp, #12]
   13a6c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   13a70:	fa03 f300 	lsl.w	r3, r3, r0
   13a74:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13a76:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13a78:	589b      	ldr	r3, [r3, r2]
        result++;
   13a7a:	bfc8      	it	gt
   13a7c:	3101      	addgt	r1, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a82:	2c00      	cmp	r4, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13a84:	f04f 0500 	mov.w	r5, #0
   13a88:	fbc0 2503 	smlal	r2, r5, r0, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13a8c:	bfdc      	itt	le
   13a8e:	4263      	negle	r3, r4
   13a90:	9306      	strle	r3, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   13a92:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   13a94:	9b06      	ldr	r3, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   13a96:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13a9a:	2201      	movs	r2, #1
   13a9c:	fa02 f303 	lsl.w	r3, r2, r3
   13aa0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   13aa2:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
   13aa6:	4113      	asrs	r3, r2
    if (result < 0)
   13aa8:	9a06      	ldr	r2, [sp, #24]
   13aaa:	4115      	asrs	r5, r2
        threshold++;
   13aac:	bf48      	it	mi
   13aae:	3301      	addmi	r3, #1
    if (remainder > threshold)
   13ab0:	4298      	cmp	r0, r3
            res00 += dst_offset;
   13ab2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        result++;
   13ab4:	bfc8      	it	gt
   13ab6:	3501      	addgt	r5, #1
   13ab8:	4419      	add	r1, r3
            res01 += dst_offset;
   13aba:	441d      	add	r5, r3
            res00 = MAX(res00, activation_min);
   13abc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   13abe:	4299      	cmp	r1, r3
   13ac0:	bfb8      	it	lt
   13ac2:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
   13ac4:	429d      	cmp	r5, r3
   13ac6:	bfb8      	it	lt
   13ac8:	461d      	movlt	r5, r3
            res00 = MIN(res00, activation_max);
   13aca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   13acc:	4299      	cmp	r1, r3
   13ace:	bfa8      	it	ge
   13ad0:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
   13ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ad4:	7019      	strb	r1, [r3, #0]
            res01 = MIN(res01, activation_max);
   13ad6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   13ad8:	429d      	cmp	r5, r3
   13ada:	bfa8      	it	ge
   13adc:	461d      	movge	r5, r3
            dst_ptr[1] = (q7_t)res01;
   13ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ae0:	705d      	strb	r5, [r3, #1]
        rhs += 2 * rhs_cols;
   13ae2:	9b00      	ldr	r3, [sp, #0]
   13ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13ae6:	4413      	add	r3, r2
   13ae8:	9300      	str	r3, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   13aea:	9b01      	ldr	r3, [sp, #4]
   13aec:	3302      	adds	r3, #2
   13aee:	9301      	str	r3, [sp, #4]
   13af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13af2:	3302      	adds	r3, #2
   13af4:	930a      	str	r3, [sp, #40]	; 0x28
   13af6:	9b05      	ldr	r3, [sp, #20]
   13af8:	3308      	adds	r3, #8
   13afa:	9305      	str	r3, [sp, #20]
   13afc:	e5a6      	b.n	1364c <arm_nn_mat_mult_nt_t_s8+0x6a>
    memcpy(&val, *in_q7, 4);
   13afe:	9a00      	ldr	r2, [sp, #0]
   13b00:	6801      	ldr	r1, [r0, #0]
   13b02:	58d7      	ldr	r7, [r2, r3]
   13b04:	9a04      	ldr	r2, [sp, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13b06:	fa2f f887 	sxtb16	r8, r7
   13b0a:	58d2      	ldr	r2, [r2, r3]
   13b0c:	fa2f fe81 	sxtb16	lr, r1
   13b10:	fa2f fc82 	sxtb16	ip, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13b14:	fa2f f797 	sxtb16	r7, r7, ror #8
   13b18:	fa2f f292 	sxtb16	r2, r2, ror #8
   13b1c:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13b20:	9c02      	ldr	r4, [sp, #8]
   13b22:	fb2c 4808 	smlad	r8, ip, r8, r4
   13b26:	fb22 8707 	smlad	r7, r2, r7, r8
   13b2a:	9c03      	ldr	r4, [sp, #12]
   13b2c:	fb2c 4c0e 	smlad	ip, ip, lr, r4
   13b30:	fb22 c101 	smlad	r1, r2, r1, ip
   13b34:	686c      	ldr	r4, [r5, #4]
    memcpy(&val, in_q7, 4);
   13b36:	f8d0 c004 	ldr.w	ip, [r0, #4]
    memcpy(&val, *in_q7, 4);
   13b3a:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13b3c:	fa2f f984 	sxtb16	r9, r4
   13b40:	fa2f fe82 	sxtb16	lr, r2
   13b44:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13b48:	fa2f f494 	sxtb16	r4, r4, ror #8
   13b4c:	fa2f f292 	sxtb16	r2, r2, ror #8
   13b50:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13b54:	fb2e 7709 	smlad	r7, lr, r9, r7
   13b58:	fb22 7404 	smlad	r4, r2, r4, r7
   13b5c:	fb2e 1108 	smlad	r1, lr, r8, r1
   13b60:	fb22 120c 	smlad	r2, r2, ip, r1
   13b64:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy(&val, in_q7, 4);
   13b68:	f8d0 e008 	ldr.w	lr, [r0, #8]
    memcpy(&val, *in_q7, 4);
   13b6c:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13b70:	fa2f f788 	sxtb16	r7, r8
   13b74:	fa2f f18c 	sxtb16	r1, ip
   13b78:	fa2f f98e 	sxtb16	r9, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13b7c:	fa2f f898 	sxtb16	r8, r8, ror #8
   13b80:	fa2f fc9c 	sxtb16	ip, ip, ror #8
   13b84:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13b88:	fb21 4407 	smlad	r4, r1, r7, r4
   13b8c:	fb2c 4808 	smlad	r8, ip, r8, r4
   13b90:	fb21 2209 	smlad	r2, r1, r9, r2
   13b94:	fb2c 2e0e 	smlad	lr, ip, lr, r2
   13b98:	68ea      	ldr	r2, [r5, #12]
    memcpy(&val, in_q7, 4);
   13b9a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    memcpy(&val, *in_q7, 4);
   13b9e:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   13ba0:	fa2f f482 	sxtb16	r4, r2
   13ba4:	fa2f fc85 	sxtb16	ip, r5
   13ba8:	fa2f f18a 	sxtb16	r1, sl
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   13bac:	fa2f f292 	sxtb16	r2, r2, ror #8
   13bb0:	fa2f f595 	sxtb16	r5, r5, ror #8
   13bb4:	fa2f fa9a 	sxtb16	sl, sl, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13bb8:	fb2c 8804 	smlad	r8, ip, r4, r8
   13bbc:	fb25 8202 	smlad	r2, r5, r2, r8
   13bc0:	9202      	str	r2, [sp, #8]
   13bc2:	fb2c ee01 	smlad	lr, ip, r1, lr
   13bc6:	fb25 e20a 	smlad	r2, r5, sl, lr
   13bca:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13bcc:	3310      	adds	r3, #16
   13bce:	3010      	adds	r0, #16
   13bd0:	e711      	b.n	139f6 <arm_nn_mat_mult_nt_t_s8+0x414>
                res00 += lhs_value * rhs_value0;
   13bd2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                q7_t lhs_value = lhs_ptr[0];
   13bd4:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
   13bd8:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
   13bdc:	940b      	str	r4, [sp, #44]	; 0x2c
   13bde:	9c02      	ldr	r4, [sp, #8]
   13be0:	fb12 4000 	smlabb	r0, r2, r0, r4
   13be4:	9002      	str	r0, [sp, #8]
                res01 += lhs_value * rhs_value1;
   13be6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   13be8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13bea:	5700      	ldrsb	r0, [r0, r4]
   13bec:	9c03      	ldr	r4, [sp, #12]
   13bee:	fb12 4200 	smlabb	r2, r2, r0, r4
   13bf2:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   13bf4:	e70b      	b.n	13a0e <arm_nn_mat_mult_nt_t_s8+0x42c>
   13bf6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   13bf8:	9810      	ldr	r0, [sp, #64]	; 0x40
   13bfa:	2b00      	cmp	r3, #0
   13bfc:	ea4f 0253 	mov.w	r2, r3, lsr #1
   13c00:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13c02:	bfac      	ite	ge
   13c04:	4611      	movge	r1, r2
   13c06:	2100      	movlt	r1, #0
   13c08:	fb00 3301 	mla	r3, r0, r1, r3
   13c0c:	9300      	str	r3, [sp, #0]
   13c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13c10:	ea4f 0242 	mov.w	r2, r2, lsl #1
   13c14:	bfb8      	it	lt
   13c16:	2200      	movlt	r2, #0
   13c18:	4413      	add	r3, r2
   13c1a:	461a      	mov	r2, r3
        dst += 2;
    }

    if (rhs_rows % 2)
   13c1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   13c1e:	07d9      	lsls	r1, r3, #31
   13c20:	d517      	bpl.n	13c52 <arm_nn_mat_mult_nt_t_s8+0x670>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
   13c22:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   13c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13c28:	3c01      	subs	r4, #1
   13c2a:	eb03 0b84 	add.w	fp, r3, r4, lsl #2
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   13c2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13c30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   13c34:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13c36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   13c3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   13c3c:	2700      	movs	r7, #0
   13c3e:	ea23 7ee3 	bic.w	lr, r3, r3, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13c42:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
   13c46:	46b8      	mov	r8, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
   13c48:	f04f 0901 	mov.w	r9, #1
   13c4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   13c4e:	429f      	cmp	r7, r3
   13c50:	db03      	blt.n	13c5a <arm_nn_mat_mult_nt_t_s8+0x678>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
   13c52:	2000      	movs	r0, #0
   13c54:	b01b      	add	sp, #108	; 0x6c
   13c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (bias)
   13c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13c5c:	2b00      	cmp	r3, #0
   13c5e:	d037      	beq.n	13cd0 <arm_nn_mat_mult_nt_t_s8+0x6ee>
                res00 = bias[rhs_rows - 1];
   13c60:	f8db 5000 	ldr.w	r5, [fp]
            q31_t res00 = 0;
   13c64:	2300      	movs	r3, #0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   13c66:	9928      	ldr	r1, [sp, #160]	; 0xa0
   13c68:	428b      	cmp	r3, r1
   13c6a:	db33      	blt.n	13cd4 <arm_nn_mat_mult_nt_t_s8+0x6f2>
   13c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   13c6e:	6821      	ldr	r1, [r4, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13c70:	6806      	ldr	r6, [r0, #0]
   13c72:	4473      	add	r3, lr
   13c74:	930c      	str	r3, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13c76:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   13c7a:	409d      	lsls	r5, r3
   13c7c:	2900      	cmp	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13c7e:	4663      	mov	r3, ip
   13c80:	46c2      	mov	sl, r8
   13c82:	fbc5 3a06 	smlal	r3, sl, r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13c86:	bfd4      	ite	le
   13c88:	4249      	negle	r1, r1
   13c8a:	2100      	movgt	r1, #0
    result = (int32_t)(mult.long_long >> 31);
   13c8c:	0fdb      	lsrs	r3, r3, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   13c8e:	fa09 f501 	lsl.w	r5, r9, r1
    result = (int32_t)(mult.long_long >> 31);
   13c92:	ea43 0a4a 	orr.w	sl, r3, sl, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13c96:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
   13c98:	ea0a 0605 	and.w	r6, sl, r5
    if (result < 0)
   13c9c:	fa5a fa01 	asrs.w	sl, sl, r1
    q31_t threshold = remainder_mask >> 1;
   13ca0:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
   13ca4:	bf48      	it	mi
   13ca6:	3501      	addmi	r5, #1
            res00 += dst_offset;
   13ca8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    if (remainder > threshold)
   13caa:	42ae      	cmp	r6, r5
        result++;
   13cac:	bfc8      	it	gt
   13cae:	f10a 0a01 	addgt.w	sl, sl, #1
   13cb2:	449a      	add	sl, r3
            res00 = MAX(res00, activation_min);
   13cb4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   13cb6:	459a      	cmp	sl, r3
   13cb8:	bfb8      	it	lt
   13cba:	469a      	movlt	sl, r3
            res00 = MIN(res00, activation_max);
   13cbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   13cbe:	459a      	cmp	sl, r3
   13cc0:	bfa8      	it	ge
   13cc2:	469a      	movge	sl, r3
            dst_ptr += rhs_rows;
   13cc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            dst_ptr[0] = (q7_t)res00;
   13cc6:	f882 a000 	strb.w	sl, [r2]
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   13cca:	3701      	adds	r7, #1
            dst_ptr += rhs_rows;
   13ccc:	441a      	add	r2, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   13cce:	e7bd      	b.n	13c4c <arm_nn_mat_mult_nt_t_s8+0x66a>
            q31_t res00 = 0;
   13cd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   13cd2:	e7c7      	b.n	13c64 <arm_nn_mat_mult_nt_t_s8+0x682>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   13cd4:	990c      	ldr	r1, [sp, #48]	; 0x30
   13cd6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   13cd8:	56c9      	ldrsb	r1, [r1, r3]
   13cda:	4431      	add	r1, r6
                q31_t rhs_value = rhs_ptr[0];
   13cdc:	9e00      	ldr	r6, [sp, #0]
   13cde:	56f6      	ldrsb	r6, [r6, r3]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   13ce0:	3301      	adds	r3, #1
                res00 += lhs_value * rhs_value;
   13ce2:	fb06 5501 	mla	r5, r6, r1, r5
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   13ce6:	e7be      	b.n	13c66 <arm_nn_mat_mult_nt_t_s8+0x684>

00013ce8 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
   13ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cec:	b095      	sub	sp, #84	; 0x54
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   13cee:	9c22      	ldr	r4, [sp, #136]	; 0x88
{
   13cf0:	9001      	str	r0, [sp, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13cf2:	9822      	ldr	r0, [sp, #136]	; 0x88
   13cf4:	9308      	str	r3, [sp, #32]
   13cf6:	2c00      	cmp	r4, #0
   13cf8:	f1c0 0000 	rsb	r0, r0, #0
   13cfc:	bfc8      	it	gt
   13cfe:	2000      	movgt	r0, #0
   13d00:	9004      	str	r0, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   13d02:	9c04      	ldr	r4, [sp, #16]
   13d04:	910c      	str	r1, [sp, #48]	; 0x30
   13d06:	2001      	movs	r0, #1
   13d08:	40a0      	lsls	r0, r4
   13d0a:	3801      	subs	r0, #1
   13d0c:	9005      	str	r0, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   13d0e:	1040      	asrs	r0, r0, #1
   13d10:	9006      	str	r0, [sp, #24]
        threshold++;
   13d12:	3001      	adds	r0, #1
   13d14:	9009      	str	r0, [sp, #36]	; 0x24
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
   13d16:	9823      	ldr	r0, [sp, #140]	; 0x8c
   13d18:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   13d1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        rhs += 2 * rhs_cols;
   13d1c:	0040      	lsls	r0, r0, #1
   13d1e:	900a      	str	r0, [sp, #40]	; 0x28
   13d20:	9808      	ldr	r0, [sp, #32]
   13d22:	3002      	adds	r0, #2
   13d24:	9002      	str	r0, [sp, #8]
   13d26:	9823      	ldr	r0, [sp, #140]	; 0x8c
   13d28:	0900      	lsrs	r0, r0, #4
   13d2a:	900e      	str	r0, [sp, #56]	; 0x38
   13d2c:	9823      	ldr	r0, [sp, #140]	; 0x8c
   13d2e:	2c00      	cmp	r4, #0
   13d30:	f020 000f 	bic.w	r0, r0, #15
   13d34:	bfb8      	it	lt
   13d36:	2000      	movlt	r0, #0
   13d38:	9007      	str	r0, [sp, #28]
   13d3a:	9c07      	ldr	r4, [sp, #28]
   13d3c:	9801      	ldr	r0, [sp, #4]
   13d3e:	4420      	add	r0, r4
   13d40:	900b      	str	r0, [sp, #44]	; 0x2c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   13d42:	980c      	ldr	r0, [sp, #48]	; 0x30
   13d44:	9003      	str	r0, [sp, #12]
   13d46:	9824      	ldr	r0, [sp, #144]	; 0x90
   13d48:	3801      	subs	r0, #1
   13d4a:	900f      	str	r0, [sp, #60]	; 0x3c
   13d4c:	9808      	ldr	r0, [sp, #32]
   13d4e:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   13d52:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   13d56:	30fe      	adds	r0, #254	; 0xfe
   13d58:	9010      	str	r0, [sp, #64]	; 0x40
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13d5a:	9823      	ldr	r0, [sp, #140]	; 0x8c
   13d5c:	380f      	subs	r0, #15
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   13d5e:	b219      	sxth	r1, r3
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   13d60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13d62:	9011      	str	r0, [sp, #68]	; 0x44
   13d64:	1e60      	subs	r0, r4, #1
   13d66:	9012      	str	r0, [sp, #72]	; 0x48
   13d68:	9801      	ldr	r0, [sp, #4]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   13d6a:	eac1 4101 	pkhbt	r1, r1, r1, lsl #16
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
   13d6e:	4240      	negs	r0, r0
   13d70:	9013      	str	r0, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13d72:	9822      	ldr	r0, [sp, #136]	; 0x88
   13d74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   13d78:	900d      	str	r0, [sp, #52]	; 0x34
   13d7a:	b21b      	sxth	r3, r3
   13d7c:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   13d80:	9c02      	ldr	r4, [sp, #8]
   13d82:	9810      	ldr	r0, [sp, #64]	; 0x40
   13d84:	4420      	add	r0, r4
   13d86:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   13d88:	4284      	cmp	r4, r0
   13d8a:	dc66      	bgt.n	13e5a <arm_nn_vec_mat_mult_t_s8+0x172>
   13d8c:	9c24      	ldr	r4, [sp, #144]	; 0x90
   13d8e:	9824      	ldr	r0, [sp, #144]	; 0x90
   13d90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   13d92:	2c00      	cmp	r4, #0
   13d94:	ea4f 0050 	mov.w	r0, r0, lsr #1
   13d98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   13d9a:	bfac      	ite	ge
   13d9c:	4684      	movge	ip, r0
   13d9e:	f04f 0c00 	movlt.w	ip, #0
   13da2:	fb05 4c0c 	mla	ip, r5, ip, r4
   13da6:	9c08      	ldr	r4, [sp, #32]
   13da8:	ea4f 0040 	mov.w	r0, r0, lsl #1
   13dac:	bfb8      	it	lt
   13dae:	2000      	movlt	r0, #0
   13db0:	4404      	add	r4, r0
   13db2:	4620      	mov	r0, r4
    }

    if (rhs_rows % 2)
   13db4:	9c24      	ldr	r4, [sp, #144]	; 0x90
   13db6:	07e4      	lsls	r4, r4, #31
   13db8:	d54b      	bpl.n	13e52 <arm_nn_vec_mat_mult_t_s8+0x16a>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = 0;
        if (bias)
   13dba:	b102      	cbz	r2, 13dbe <arm_nn_vec_mat_mult_t_s8+0xd6>
        {
            res00 = *bias++;
   13dbc:	6812      	ldr	r2, [r2, #0]
        }

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13dbe:	9c23      	ldr	r4, [sp, #140]	; 0x8c
        q31_t res00 = 0;
   13dc0:	2500      	movs	r5, #0
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13dc2:	f1a4 090f 	sub.w	r9, r4, #15
   13dc6:	9c01      	ldr	r4, [sp, #4]
   13dc8:	45a9      	cmp	r9, r5
   13dca:	eb04 0805 	add.w	r8, r4, r5
   13dce:	eb0c 0e05 	add.w	lr, ip, r5
   13dd2:	f300 814b 	bgt.w	1406c <arm_nn_vec_mat_mult_t_s8+0x384>
   13dd6:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13dda:	2900      	cmp	r1, #0
   13ddc:	9907      	ldr	r1, [sp, #28]
   13dde:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   13de2:	448c      	add	ip, r1
   13de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13de6:	ea4f 1303 	mov.w	r3, r3, lsl #4
   13dea:	bfb8      	it	lt
   13dec:	2300      	movlt	r3, #0
   13dee:	1a5b      	subs	r3, r3, r1
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   13df0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
   13df2:	18cc      	adds	r4, r1, r3
   13df4:	42a5      	cmp	r5, r4
   13df6:	f300 818b 	bgt.w	14110 <arm_nn_vec_mat_mult_t_s8+0x428>
   13dfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13dfc:	9d21      	ldr	r5, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13dfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13e02:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13e04:	2300      	movs	r3, #0
   13e06:	461c      	mov	r4, r3
   13e08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13e0c:	fbc2 1405 	smlal	r1, r4, r2, r5
    result = (int32_t)(mult.long_long >> 31);
   13e10:	0fca      	lsrs	r2, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13e12:	9922      	ldr	r1, [sp, #136]	; 0x88
   13e14:	4299      	cmp	r1, r3
   13e16:	bfdc      	itt	le
   13e18:	460b      	movle	r3, r1
   13e1a:	425b      	negle	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
   13e1c:	2101      	movs	r1, #1
   13e1e:	4099      	lsls	r1, r3
    result = (int32_t)(mult.long_long >> 31);
   13e20:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   13e24:	3901      	subs	r1, #1
    if (result < 0)
   13e26:	fa52 f303 	asrs.w	r3, r2, r3
    int32_t remainder = remainder_mask & dividend;
   13e2a:	ea02 0401 	and.w	r4, r2, r1
    q31_t threshold = remainder_mask >> 1;
   13e2e:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   13e32:	bf48      	it	mi
   13e34:	3101      	addmi	r1, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
   13e36:	9a20      	ldr	r2, [sp, #128]	; 0x80
    if (remainder > threshold)
   13e38:	428c      	cmp	r4, r1
        result++;
   13e3a:	bfc8      	it	gt
   13e3c:	3301      	addgt	r3, #1
   13e3e:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
   13e40:	9a25      	ldr	r2, [sp, #148]	; 0x94
   13e42:	4293      	cmp	r3, r2
   13e44:	bfb8      	it	lt
   13e46:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
   13e48:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13e4a:	4293      	cmp	r3, r2
   13e4c:	bfa8      	it	ge
   13e4e:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
   13e50:	7003      	strb	r3, [r0, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
   13e52:	2000      	movs	r0, #0
   13e54:	b015      	add	sp, #84	; 0x54
   13e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
   13e5a:	2a00      	cmp	r2, #0
   13e5c:	d06c      	beq.n	13f38 <arm_nn_vec_mat_mult_t_s8+0x250>
            res00 = *bias++;
   13e5e:	4615      	mov	r5, r2
            res01 = *bias++;
   13e60:	6850      	ldr	r0, [r2, #4]
            res00 = *bias++;
   13e62:	f855 4b08 	ldr.w	r4, [r5], #8
            res01 = *bias++;
   13e66:	462a      	mov	r2, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13e68:	9d03      	ldr	r5, [sp, #12]
   13e6a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
        int32_t rhs_cols_idx = 0;
   13e6c:	f04f 0c00 	mov.w	ip, #0
   13e70:	19af      	adds	r7, r5, r6
   13e72:	9d01      	ldr	r5, [sp, #4]
   13e74:	eb05 080c 	add.w	r8, r5, ip
   13e78:	9d23      	ldr	r5, [sp, #140]	; 0x8c
   13e7a:	eba7 0e05 	sub.w	lr, r7, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   13e7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   13e80:	4565      	cmp	r5, ip
   13e82:	dc5c      	bgt.n	13f3e <arm_nn_vec_mat_mult_t_s8+0x256>
   13e84:	9d03      	ldr	r5, [sp, #12]
   13e86:	9e12      	ldr	r6, [sp, #72]	; 0x48
   13e88:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   13e8c:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   13e8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   13e90:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   13e92:	4475      	add	r5, lr
   13e94:	42ae      	cmp	r6, r5
   13e96:	f300 80d7 	bgt.w	14048 <arm_nn_vec_mat_mult_t_s8+0x360>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13e9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13e9c:	9f21      	ldr	r7, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13e9e:	40ac      	lsls	r4, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13ea0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   13ea4:	2500      	movs	r5, #0
   13ea6:	fbc4 6507 	smlal	r6, r5, r4, r7
    result = (int32_t)(mult.long_long >> 31);
   13eaa:	0ff4      	lsrs	r4, r6, #31
   13eac:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
   13eb0:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
   13eb2:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   13eb4:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
   13eb6:	4025      	ands	r5, r4
    q31_t threshold = remainder_mask >> 1;
   13eb8:	4134      	asrs	r4, r6
   13eba:	9e09      	ldr	r6, [sp, #36]	; 0x24
   13ebc:	bf58      	it	pl
   13ebe:	463e      	movpl	r6, r7
    if (remainder > threshold)
   13ec0:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13ec2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13ec4:	9f21      	ldr	r7, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   13ec6:	fa00 f605 	lsl.w	r6, r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   13eca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   13ece:	f04f 0500 	mov.w	r5, #0
   13ed2:	fbc6 0507 	smlal	r0, r5, r6, r7
    result = (int32_t)(mult.long_long >> 31);
   13ed6:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   13eda:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
   13ede:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
   13ee0:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   13ee2:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
   13ee4:	ea00 0505 	and.w	r5, r0, r5
        result++;
   13ee8:	bfc8      	it	gt
   13eea:	3401      	addgt	r4, #1
    q31_t threshold = remainder_mask >> 1;
   13eec:	4130      	asrs	r0, r6
   13eee:	9e09      	ldr	r6, [sp, #36]	; 0x24
   13ef0:	bf58      	it	pl
   13ef2:	463e      	movpl	r6, r7
    if (remainder > threshold)
   13ef4:	42b5      	cmp	r5, r6
        res00 += dst_offset;
   13ef6:	9d20      	ldr	r5, [sp, #128]	; 0x80
        result++;
   13ef8:	bfc8      	it	gt
   13efa:	3001      	addgt	r0, #1
   13efc:	442c      	add	r4, r5
        res01 += dst_offset;
   13efe:	4428      	add	r0, r5
        res00 = MAX(res00, activation_min);
   13f00:	9d25      	ldr	r5, [sp, #148]	; 0x94
   13f02:	42ac      	cmp	r4, r5
   13f04:	bfb8      	it	lt
   13f06:	462c      	movlt	r4, r5
        res01 = MAX(res01, activation_min);
   13f08:	42a8      	cmp	r0, r5
   13f0a:	bfb8      	it	lt
   13f0c:	4628      	movlt	r0, r5
        res00 = MIN(res00, activation_max);
   13f0e:	9d26      	ldr	r5, [sp, #152]	; 0x98
   13f10:	42ac      	cmp	r4, r5
   13f12:	bfa8      	it	ge
   13f14:	462c      	movge	r4, r5
        *dst++ = (q7_t)res00;
   13f16:	9d02      	ldr	r5, [sp, #8]
   13f18:	f805 4c02 	strb.w	r4, [r5, #-2]
        res01 = MIN(res01, activation_max);
   13f1c:	9c26      	ldr	r4, [sp, #152]	; 0x98
   13f1e:	42a0      	cmp	r0, r4
   13f20:	bfa8      	it	ge
   13f22:	4620      	movge	r0, r4
        *dst++ = (q7_t)res01;
   13f24:	f805 0c01 	strb.w	r0, [r5, #-1]
        rhs += 2 * rhs_cols;
   13f28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13f2a:	9803      	ldr	r0, [sp, #12]
   13f2c:	4420      	add	r0, r4
   13f2e:	9003      	str	r0, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   13f30:	4628      	mov	r0, r5
   13f32:	3002      	adds	r0, #2
   13f34:	9002      	str	r0, [sp, #8]
   13f36:	e723      	b.n	13d80 <arm_nn_vec_mat_mult_t_s8+0x98>
        q31_t res01 = 0;
   13f38:	4610      	mov	r0, r2
        q31_t res00 = 0;
   13f3a:	4614      	mov	r4, r2
   13f3c:	e794      	b.n	13e68 <arm_nn_vec_mat_mult_t_s8+0x180>
    memcpy(&val, *in_q7, 4);
   13f3e:	9d01      	ldr	r5, [sp, #4]
   13f40:	f8de b000 	ldr.w	fp, [lr]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13f44:	f855 500c 	ldr.w	r5, [r5, ip]
   13f48:	fa23 f68b 	sxtab16	r6, r3, fp
   13f4c:	fa21 fa85 	sxtab16	sl, r1, r5
   13f50:	f8d7 9000 	ldr.w	r9, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
   13f54:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   13f58:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13f5c:	fa23 fb8b 	sxtab16	fp, r3, fp
   13f60:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f64:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13f68:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f6c:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13f70:	f8de b004 	ldr.w	fp, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   13f74:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13f78:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13f7c:	fb2a 0006 	smlad	r0, sl, r6, r0
   13f80:	fb25 0009 	smlad	r0, r5, r9, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13f84:	f8d8 5004 	ldr.w	r5, [r8, #4]
   13f88:	fa23 f68b 	sxtab16	r6, r3, fp
   13f8c:	fa21 fa85 	sxtab16	sl, r1, r5
   13f90:	f8d7 9004 	ldr.w	r9, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
   13f94:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   13f98:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13f9c:	fa23 fb8b 	sxtab16	fp, r3, fp
   13fa0:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fa4:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13fa8:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fac:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13fb0:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   13fb4:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13fb8:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fbc:	fb2a 0606 	smlad	r6, sl, r6, r0
   13fc0:	fb25 6609 	smlad	r6, r5, r9, r6
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13fc4:	f8d8 5008 	ldr.w	r5, [r8, #8]
   13fc8:	fa23 f08b 	sxtab16	r0, r3, fp
   13fcc:	fa21 f985 	sxtab16	r9, r1, r5
   13fd0:	f8d7 a008 	ldr.w	sl, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
   13fd4:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   13fd8:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13fdc:	fa23 fb8b 	sxtab16	fp, r3, fp
   13fe0:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fe4:	fb29 4400 	smlad	r4, r9, r0, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13fe8:	fa23 f08a 	sxtab16	r0, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13fec:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13ff0:	f8de b00c 	ldr.w	fp, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
   13ff4:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   13ff8:	fa23 fa8a 	sxtab16	sl, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   13ffc:	fb29 6000 	smlad	r0, r9, r0, r6
   14000:	fb25 050a 	smlad	r5, r5, sl, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14004:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   14008:	fa23 f68b 	sxtab16	r6, r3, fp
   1400c:	fa21 fa8e 	sxtab16	sl, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
   14010:	ea4f 2b3b 	mov.w	fp, fp, ror #8
   14014:	f8d7 800c 	ldr.w	r8, [r7, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14018:	fa23 f98b 	sxtab16	r9, r3, fp
  return (op1 >> op2) | (op1 << (32U - op2));
   1401c:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14020:	fa21 fe8e 	sxtab16	lr, r1, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14024:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14028:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1402c:	fb2e 4409 	smlad	r4, lr, r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
   14030:	ea4f 2038 	mov.w	r0, r8, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14034:	fa23 f080 	sxtab16	r0, r3, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14038:	fb2a 550b 	smlad	r5, sl, fp, r5
   1403c:	fb2e 5000 	smlad	r0, lr, r0, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   14040:	f10c 0c10 	add.w	ip, ip, #16
   14044:	3710      	adds	r7, #16
   14046:	e714      	b.n	13e72 <arm_nn_vec_mat_mult_t_s8+0x18a>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   14048:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   1404a:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   1404e:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   14052:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   14054:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   14056:	44b4      	add	ip, r6
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   14058:	9e23      	ldr	r6, [sp, #140]	; 0x8c
            res00 += lhs_value * rhs_value0;
   1405a:	fb05 440c 	mla	r4, r5, ip, r4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
   1405e:	f917 c006 	ldrsb.w	ip, [r7, r6]
   14062:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   14064:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
   14066:	fb05 000c 	mla	r0, r5, ip, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1406a:	e710      	b.n	13e8e <arm_nn_vec_mat_mult_t_s8+0x1a6>
   1406c:	9c01      	ldr	r4, [sp, #4]
   1406e:	f85c 7005 	ldr.w	r7, [ip, r5]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14072:	5966      	ldr	r6, [r4, r5]
   14074:	fa23 fb87 	sxtab16	fp, r3, r7
   14078:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   1407c:	ea4f 2737 	mov.w	r7, r7, ror #8
   14080:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14084:	fa23 f787 	sxtab16	r7, r3, r7
   14088:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1408c:	fb2a 220b 	smlad	r2, sl, fp, r2
   14090:	fb26 2207 	smlad	r2, r6, r7, r2
   14094:	f8de 4004 	ldr.w	r4, [lr, #4]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14098:	f8d8 6004 	ldr.w	r6, [r8, #4]
   1409c:	fa23 fb84 	sxtab16	fp, r3, r4
   140a0:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   140a4:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   140a8:	fa23 f784 	sxtab16	r7, r3, r4
  return (op1 >> op2) | (op1 << (32U - op2));
   140ac:	ea4f 2436 	mov.w	r4, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   140b0:	fa21 f484 	sxtab16	r4, r1, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   140b4:	fb2a 220b 	smlad	r2, sl, fp, r2
   140b8:	fb24 2407 	smlad	r4, r4, r7, r2
   140bc:	f8de 7008 	ldr.w	r7, [lr, #8]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   140c0:	f8d8 6008 	ldr.w	r6, [r8, #8]
   140c4:	fa23 fb87 	sxtab16	fp, r3, r7
   140c8:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
   140cc:	ea4f 2737 	mov.w	r7, r7, ror #8
   140d0:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   140d4:	fa23 f787 	sxtab16	r7, r3, r7
   140d8:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   140dc:	fb2a 440b 	smlad	r4, sl, fp, r4
   140e0:	fb26 4607 	smlad	r6, r6, r7, r4
   140e4:	f8de 200c 	ldr.w	r2, [lr, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   140e8:	f8d8 e00c 	ldr.w	lr, [r8, #12]
   140ec:	fa23 f482 	sxtab16	r4, r3, r2
   140f0:	fa21 f78e 	sxtab16	r7, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
   140f4:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   140f8:	fa23 f882 	sxtab16	r8, r3, r2
  return (op1 >> op2) | (op1 << (32U - op2));
   140fc:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14100:	fa21 f282 	sxtab16	r2, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   14104:	fb27 6604 	smlad	r6, r7, r4, r6
   14108:	fb22 6208 	smlad	r2, r2, r8, r6
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1410c:	3510      	adds	r5, #16
   1410e:	e65a      	b.n	13dc6 <arm_nn_vec_mat_mult_t_s8+0xde>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   14110:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   14112:	f91c 4f01 	ldrsb.w	r4, [ip, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   14116:	9e1e      	ldr	r6, [sp, #120]	; 0x78
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
   14118:	442c      	add	r4, r5
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1411a:	f911 5b01 	ldrsb.w	r5, [r1], #1
   1411e:	4435      	add	r5, r6
            res00 += lhs_value * rhs_value0;
   14120:	fb05 2204 	mla	r2, r5, r4, r2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   14124:	e664      	b.n	13df0 <arm_nn_vec_mat_mult_t_s8+0x108>

00014126 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
   14126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
   1412a:	eac3 4c03 	pkhbt	ip, r3, r3, lsl #16
   1412e:	f022 0703 	bic.w	r7, r2, #3
    block_cnt = block_size >> 2;
   14132:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    while (block_cnt > 0)
   14136:	4407      	add	r7, r0
   14138:	460d      	mov	r5, r1
   1413a:	4287      	cmp	r7, r0
   1413c:	d108      	bne.n	14150 <arm_q7_to_q15_with_offset+0x2a>
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
   1413e:	f002 0203 	and.w	r2, r2, #3
   14142:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
   14146:	4402      	add	r2, r0
   14148:	4282      	cmp	r2, r0
   1414a:	d113      	bne.n	14174 <arm_q7_to_q15_with_offset+0x4e>
        *dst++ = (q15_t)*src++ + offset;

        /* Decrement the loop counter */
        block_cnt--;
    }
}
   1414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14150:	f850 4b04 	ldr.w	r4, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   14154:	3508      	adds	r5, #8
  return (op1 >> op2) | (op1 << (32U - op2));
   14156:	ea4f 2634 	mov.w	r6, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1415a:	fa2c f484 	sxtab16	r4, ip, r4
   1415e:	fa2c f686 	sxtab16	r6, ip, r6
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
   14162:	eac6 4824 	pkhtb	r8, r6, r4, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
   14166:	eac4 4406 	pkhbt	r4, r4, r6, lsl #16
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1416a:	f845 8c04 	str.w	r8, [r5, #-4]
   1416e:	f845 4c08 	str.w	r4, [r5, #-8]
        block_cnt--;
   14172:	e7e2      	b.n	1413a <arm_q7_to_q15_with_offset+0x14>
        *dst++ = (q15_t)*src++ + offset;
   14174:	f910 4b01 	ldrsb.w	r4, [r0], #1
   14178:	441c      	add	r4, r3
   1417a:	f821 4b02 	strh.w	r4, [r1], #2
        block_cnt--;
   1417e:	e7e3      	b.n	14148 <arm_q7_to_q15_with_offset+0x22>

00014180 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
   14180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14184:	b09b      	sub	sp, #108	; 0x6c
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
   14186:	6895      	ldr	r5, [r2, #8]
{
   14188:	9315      	str	r3, [sp, #84]	; 0x54
   1418a:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
    const int32_t input_x = input_dims->w;
   1418e:	9503      	str	r5, [sp, #12]
    const int32_t output_y = output_dims->h;
   14190:	6865      	ldr	r5, [r4, #4]
    const int32_t output_x = output_dims->w;
   14192:	68a4      	ldr	r4, [r4, #8]
   14194:	940d      	str	r4, [sp, #52]	; 0x34
    const int32_t stride_y = pool_params->stride.h;
   14196:	684c      	ldr	r4, [r1, #4]
   14198:	9404      	str	r4, [sp, #16]
    const int32_t stride_x = pool_params->stride.w;
   1419a:	680c      	ldr	r4, [r1, #0]
   1419c:	9405      	str	r4, [sp, #20]
    const int32_t kernel_y = filter_dims->h;
   1419e:	685c      	ldr	r4, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
   141a0:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
   141a2:	940f      	str	r4, [sp, #60]	; 0x3c
    const int32_t kernel_x = filter_dims->w;
   141a4:	9310      	str	r3, [sp, #64]	; 0x40
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
   141a6:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
   141aa:	9306      	str	r3, [sp, #24]
    const int32_t act_min = pool_params->activation.min;
   141ac:	690b      	ldr	r3, [r1, #16]
   141ae:	9311      	str	r3, [sp, #68]	; 0x44
    const int32_t act_max = pool_params->activation.max;
   141b0:	694b      	ldr	r3, [r1, #20]
   141b2:	9312      	str	r3, [sp, #72]	; 0x48
    const int32_t ch_src = input_dims->c;
   141b4:	68d3      	ldr	r3, [r2, #12]
   141b6:	6852      	ldr	r2, [r2, #4]
    q31_t *buffer = (q31_t *)ctx->buf;
   141b8:	6801      	ldr	r1, [r0, #0]
    const int32_t output_y = output_dims->h;
   141ba:	950e      	str	r5, [sp, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
   141bc:	18a2      	adds	r2, r4, r2
   141be:	920b      	str	r2, [sp, #44]	; 0x2c
   141c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   141c2:	9107      	str	r1, [sp, #28]

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
   141c4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   141c8:	435a      	muls	r2, r3
   141ca:	f1c4 0a00 	rsb	sl, r4, #0
   141ce:	46a1      	mov	r9, r4
   141d0:	9213      	str	r2, [sp, #76]	; 0x4c
   141d2:	f04f 0b00 	mov.w	fp, #0
   141d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   141d8:	4593      	cmp	fp, r2
   141da:	db03      	blt.n	141e4 <arm_avgpool_s8+0x64>
        }
    }

#endif
    return ARM_MATH_SUCCESS;
}
   141dc:	2000      	movs	r0, #0
   141de:	b01b      	add	sp, #108	; 0x6c
   141e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   141e4:	9a06      	ldr	r2, [sp, #24]
   141e6:	9906      	ldr	r1, [sp, #24]
   141e8:	f1ba 0f00 	cmp.w	sl, #0
   141ec:	f1c2 0500 	rsb	r5, r2, #0
   141f0:	bfd4      	ite	le
   141f2:	464a      	movle	r2, r9
   141f4:	2200      	movgt	r2, #0
   141f6:	920c      	str	r2, [sp, #48]	; 0x30
   141f8:	9a06      	ldr	r2, [sp, #24]
   141fa:	9209      	str	r2, [sp, #36]	; 0x24
   141fc:	9a03      	ldr	r2, [sp, #12]
   141fe:	440a      	add	r2, r1
   14200:	920a      	str	r2, [sp, #40]	; 0x28
   14202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14204:	9903      	ldr	r1, [sp, #12]
   14206:	4452      	add	r2, sl
   14208:	434a      	muls	r2, r1
   1420a:	9214      	str	r2, [sp, #80]	; 0x50
   1420c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1420e:	9200      	str	r2, [sp, #0]
   14210:	2200      	movs	r2, #0
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
   14212:	990f      	ldr	r1, [sp, #60]	; 0x3c
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   14214:	9201      	str	r2, [sp, #4]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
   14216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14218:	428a      	cmp	r2, r1
   1421a:	bfa8      	it	ge
   1421c:	460a      	movge	r2, r1
   1421e:	9219      	str	r2, [sp, #100]	; 0x64
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   14220:	9a01      	ldr	r2, [sp, #4]
   14222:	990d      	ldr	r1, [sp, #52]	; 0x34
   14224:	428a      	cmp	r2, r1
   14226:	db0e      	blt.n	14246 <arm_avgpool_s8+0xc6>
   14228:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1422a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1422c:	440a      	add	r2, r1
   1422e:	9226      	str	r2, [sp, #152]	; 0x98
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
   14230:	9a04      	ldr	r2, [sp, #16]
   14232:	9904      	ldr	r1, [sp, #16]
   14234:	4492      	add	sl, r2
   14236:	eba9 0902 	sub.w	r9, r9, r2
   1423a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1423c:	1a52      	subs	r2, r2, r1
   1423e:	f10b 0b01 	add.w	fp, fp, #1
   14242:	920b      	str	r2, [sp, #44]	; 0x2c
   14244:	e7c7      	b.n	141d6 <arm_avgpool_s8+0x56>
            const int32_t kernel_x_start = MAX(0, -idx_x);
   14246:	9a09      	ldr	r2, [sp, #36]	; 0x24
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   14248:	9910      	ldr	r1, [sp, #64]	; 0x40
            const int32_t kernel_x_start = MAX(0, -idx_x);
   1424a:	2d00      	cmp	r5, #0
   1424c:	bfd8      	it	le
   1424e:	4610      	movle	r0, r2
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   14250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            const int32_t kernel_x_start = MAX(0, -idx_x);
   14252:	bfc8      	it	gt
   14254:	2000      	movgt	r0, #0
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
   14256:	428a      	cmp	r2, r1
   14258:	bfa8      	it	ge
   1425a:	460a      	movge	r2, r1
   1425c:	4696      	mov	lr, r2
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   1425e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14260:	9208      	str	r2, [sp, #32]
   14262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14264:	9202      	str	r2, [sp, #8]
   14266:	182a      	adds	r2, r5, r0
            int count = 0;
   14268:	2100      	movs	r1, #0
   1426a:	9218      	str	r2, [sp, #96]	; 0x60
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   1426c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1426e:	9c02      	ldr	r4, [sp, #8]
   14270:	4294      	cmp	r4, r2
   14272:	da38      	bge.n	142e6 <arm_avgpool_s8+0x166>
   14274:	9c08      	ldr	r4, [sp, #32]
   14276:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14278:	4422      	add	r2, r4
   1427a:	9c15      	ldr	r4, [sp, #84]	; 0x54
                    if (count == 0)
   1427c:	1a0e      	subs	r6, r1, r0
   1427e:	fb03 4202 	mla	r2, r3, r2, r4
   14282:	9617      	str	r6, [sp, #92]	; 0x5c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
   14284:	4604      	mov	r4, r0
   14286:	e01e      	b.n	142c6 <arm_avgpool_s8+0x146>
                    if (count == 0)
   14288:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1428a:	1936      	adds	r6, r6, r4
   1428c:	d017      	beq.n	142be <arm_avgpool_s8+0x13e>
   1428e:	9e07      	ldr	r6, [sp, #28]
   14290:	f1a6 0804 	sub.w	r8, r6, #4
                        for (int i = 0; i < ch_src; i++)
   14294:	2600      	movs	r6, #0
   14296:	429e      	cmp	r6, r3
   14298:	da13      	bge.n	142c2 <arm_avgpool_s8+0x142>
                            buffer[i] = __QADD(start[i], buffer[i]);
   1429a:	5797      	ldrsb	r7, [r2, r6]
   1429c:	46bc      	mov	ip, r7

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1429e:	f858 7f04 	ldr.w	r7, [r8, #4]!
   142a2:	9716      	str	r7, [sp, #88]	; 0x58
   142a4:	9f16      	ldr	r7, [sp, #88]	; 0x58
   142a6:	fa87 f78c 	qadd	r7, ip, r7
   142aa:	f8c8 7000 	str.w	r7, [r8]
                        for (int i = 0; i < ch_src; i++)
   142ae:	3601      	adds	r6, #1
   142b0:	e7f1      	b.n	14296 <arm_avgpool_s8+0x116>
                            buffer[i] = start[i];
   142b2:	9f07      	ldr	r7, [sp, #28]
   142b4:	f912 8006 	ldrsb.w	r8, [r2, r6]
   142b8:	f847 8026 	str.w	r8, [r7, r6, lsl #2]
                        for (int i = 0; i < ch_src; i++)
   142bc:	3601      	adds	r6, #1
   142be:	429e      	cmp	r6, r3
   142c0:	dbf7      	blt.n	142b2 <arm_avgpool_s8+0x132>
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
   142c2:	3401      	adds	r4, #1
   142c4:	441a      	add	r2, r3
   142c6:	4574      	cmp	r4, lr
   142c8:	dbde      	blt.n	14288 <arm_avgpool_s8+0x108>
   142ca:	ebae 0200 	sub.w	r2, lr, r0
   142ce:	4570      	cmp	r0, lr
   142d0:	bfc8      	it	gt
   142d2:	2200      	movgt	r2, #0
   142d4:	4411      	add	r1, r2
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
   142d6:	9a02      	ldr	r2, [sp, #8]
   142d8:	9c08      	ldr	r4, [sp, #32]
   142da:	3201      	adds	r2, #1
   142dc:	9202      	str	r2, [sp, #8]
   142de:	9a03      	ldr	r2, [sp, #12]
   142e0:	4414      	add	r4, r2
   142e2:	9408      	str	r4, [sp, #32]
   142e4:	e7c2      	b.n	1426c <arm_avgpool_s8+0xec>
    const int half_count = count / 2;
   142e6:	104c      	asrs	r4, r1, #1
    for (int i = 0; i < length; i++)
   142e8:	2000      	movs	r0, #0
   142ea:	4283      	cmp	r3, r0
   142ec:	dc0f      	bgt.n	1430e <arm_avgpool_s8+0x18e>
            dst += ch_src;
   142ee:	9a00      	ldr	r2, [sp, #0]
   142f0:	9905      	ldr	r1, [sp, #20]
   142f2:	441a      	add	r2, r3
   142f4:	9200      	str	r2, [sp, #0]
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
   142f6:	9a05      	ldr	r2, [sp, #20]
   142f8:	4415      	add	r5, r2
   142fa:	9a01      	ldr	r2, [sp, #4]
   142fc:	3201      	adds	r2, #1
   142fe:	9201      	str	r2, [sp, #4]
   14300:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14302:	1a52      	subs	r2, r2, r1
   14304:	9209      	str	r2, [sp, #36]	; 0x24
   14306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14308:	1a52      	subs	r2, r2, r1
   1430a:	920a      	str	r2, [sp, #40]	; 0x28
   1430c:	e788      	b.n	14220 <arm_avgpool_s8+0xa0>
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
   1430e:	9a07      	ldr	r2, [sp, #28]
        sum = MAX(sum, act_min);
   14310:	9e11      	ldr	r6, [sp, #68]	; 0x44
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
   14312:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   14316:	2a00      	cmp	r2, #0
   14318:	bfcc      	ite	gt
   1431a:	1912      	addgt	r2, r2, r4
   1431c:	1b12      	suble	r2, r2, r4
        sum = sum / count;
   1431e:	fb92 f2f1 	sdiv	r2, r2, r1
        sum = MAX(sum, act_min);
   14322:	42b2      	cmp	r2, r6
   14324:	bfb8      	it	lt
   14326:	4632      	movlt	r2, r6
        sum = MIN(sum, act_max);
   14328:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1432a:	42b2      	cmp	r2, r6
   1432c:	bfa8      	it	ge
   1432e:	4632      	movge	r2, r6
        target[i] = (q7_t)sum;
   14330:	9e00      	ldr	r6, [sp, #0]
   14332:	5432      	strb	r2, [r6, r0]
    for (int i = 0; i < length; i++)
   14334:	3001      	adds	r0, #1
   14336:	e7d8      	b.n	142ea <arm_avgpool_s8+0x16a>

00014338 <arm_avgpool_s8_get_buffer_size>:
    return (ch_src * sizeof(int32_t));
#else
    (void)ch_src;
    return 0;
#endif
}
   14338:	0088      	lsls	r0, r1, #2
   1433a:	4770      	bx	lr

0001433c <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
   1433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14340:	b0a3      	sub	sp, #140	; 0x8c
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
   14342:	6894      	ldr	r4, [r2, #8]
{
   14344:	931f      	str	r3, [sp, #124]	; 0x7c
   14346:	e9dd 302c 	ldrd	r3, r0, [sp, #176]	; 0xb0
    const int32_t input_x = input_dims->w;
   1434a:	9409      	str	r4, [sp, #36]	; 0x24
    const int32_t output_y = output_dims->h;
   1434c:	6844      	ldr	r4, [r0, #4]
    const int32_t output_x = output_dims->w;
   1434e:	6880      	ldr	r0, [r0, #8]
   14350:	900a      	str	r0, [sp, #40]	; 0x28
    const int32_t stride_y = pool_params->stride.h;
   14352:	6848      	ldr	r0, [r1, #4]
   14354:	900b      	str	r0, [sp, #44]	; 0x2c
    const int32_t stride_x = pool_params->stride.w;
   14356:	6808      	ldr	r0, [r1, #0]
   14358:	900c      	str	r0, [sp, #48]	; 0x30
    const int32_t kernel_y = filter_dims->h;
   1435a:	6858      	ldr	r0, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
   1435c:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
   1435e:	9017      	str	r0, [sp, #92]	; 0x5c
    const int32_t kernel_x = filter_dims->w;
   14360:	9318      	str	r3, [sp, #96]	; 0x60
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
   14362:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
   14366:	9303      	str	r3, [sp, #12]
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
   14368:	e9d1 9a04 	ldrd	r9, sl, [r1, #16]
    const int32_t output_y = output_dims->h;
   1436c:	9413      	str	r4, [sp, #76]	; 0x4c
    const int32_t channel_in = input_dims->c;
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   1436e:	4259      	negs	r1, r3
    const int32_t channel_in = input_dims->c;
   14370:	68d4      	ldr	r4, [r2, #12]
   14372:	6853      	ldr	r3, [r2, #4]
   14374:	9a03      	ldr	r2, [sp, #12]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14376:	9101      	str	r1, [sp, #4]
   14378:	18d3      	adds	r3, r2, r3
   1437a:	9311      	str	r3, [sp, #68]	; 0x44
   1437c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    const int32_t pad_x = pool_params->padding.w;
   1437e:	900d      	str	r0, [sp, #52]	; 0x34
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14380:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    int32_t cnt = length >> 2;
   14384:	10a1      	asrs	r1, r4, #2
   14386:	4363      	muls	r3, r4
   14388:	931d      	str	r3, [sp, #116]	; 0x74
   1438a:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   1438e:	009b      	lsls	r3, r3, #2
   14390:	911b      	str	r1, [sp, #108]	; 0x6c
   14392:	9314      	str	r3, [sp, #80]	; 0x50
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14394:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   14396:	9304      	str	r3, [sp, #16]
   14398:	2300      	movs	r3, #0
   1439a:	9305      	str	r3, [sp, #20]
   1439c:	9b05      	ldr	r3, [sp, #20]
   1439e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   143a0:	4293      	cmp	r3, r2
   143a2:	db17      	blt.n	143d4 <arm_max_pool_s8+0x98>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
   143a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    while (cnt > 0l)
   143a6:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
   143a8:	435a      	muls	r2, r3
   143aa:	4354      	muls	r4, r2
    int32_t cnt = length >> 2;
   143ac:	10a1      	asrs	r1, r4, #2
   143ae:	4608      	mov	r0, r1
    while (cnt > 0l)
   143b0:	2800      	cmp	r0, #0
   143b2:	f300 80d6 	bgt.w	14562 <arm_max_pool_s8+0x226>
   143b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   143b8:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   143bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cnt = length & 0x3;
   143c0:	f004 0403 	and.w	r4, r4, #3
   143c4:	441c      	add	r4, r3
    while (cnt > 0l)
   143c6:	42a3      	cmp	r3, r4
   143c8:	f040 80fa 	bne.w	145c0 <arm_max_pool_s8+0x284>

    return ARM_MATH_SUCCESS;
}
   143cc:	2000      	movs	r0, #0
   143ce:	b023      	add	sp, #140	; 0x8c
   143d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   143d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   143d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   143d8:	9e04      	ldr	r6, [sp, #16]
   143da:	425b      	negs	r3, r3
   143dc:	9302      	str	r3, [sp, #8]
   143de:	9b01      	ldr	r3, [sp, #4]
   143e0:	2b00      	cmp	r3, #0
   143e2:	9b03      	ldr	r3, [sp, #12]
   143e4:	bfc8      	it	gt
   143e6:	2300      	movgt	r3, #0
   143e8:	9312      	str	r3, [sp, #72]	; 0x48
   143ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   143ec:	930f      	str	r3, [sp, #60]	; 0x3c
   143ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   143f0:	4413      	add	r3, r2
   143f2:	9310      	str	r3, [sp, #64]	; 0x40
   143f4:	9a01      	ldr	r2, [sp, #4]
   143f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   143f8:	4413      	add	r3, r2
   143fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   143fc:	4353      	muls	r3, r2
   143fe:	931e      	str	r3, [sp, #120]	; 0x78
   14400:	2300      	movs	r3, #0
   14402:	9306      	str	r3, [sp, #24]
   14404:	9b06      	ldr	r3, [sp, #24]
   14406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14408:	4293      	cmp	r3, r2
   1440a:	db11      	blt.n	14430 <arm_max_pool_s8+0xf4>
   1440c:	9b04      	ldr	r3, [sp, #16]
   1440e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14410:	4413      	add	r3, r2
   14412:	9304      	str	r3, [sp, #16]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
   14414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14416:	9b01      	ldr	r3, [sp, #4]
   14418:	4413      	add	r3, r2
   1441a:	9301      	str	r3, [sp, #4]
   1441c:	9b05      	ldr	r3, [sp, #20]
   1441e:	3301      	adds	r3, #1
   14420:	9305      	str	r3, [sp, #20]
   14422:	9b03      	ldr	r3, [sp, #12]
   14424:	1a9b      	subs	r3, r3, r2
   14426:	9303      	str	r3, [sp, #12]
   14428:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1442a:	1a9b      	subs	r3, r3, r2
   1442c:	9311      	str	r3, [sp, #68]	; 0x44
   1442e:	e7b5      	b.n	1439c <arm_max_pool_s8+0x60>
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   14430:	9b02      	ldr	r3, [sp, #8]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
   14432:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            const int32_t ker_x_start = MAX(0, -base_idx_x);
   14434:	2b00      	cmp	r3, #0
   14436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14438:	bfc8      	it	gt
   1443a:	2300      	movgt	r3, #0
   1443c:	9316      	str	r3, [sp, #88]	; 0x58
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
   1443e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14440:	9916      	ldr	r1, [sp, #88]	; 0x58
   14442:	4293      	cmp	r3, r2
   14444:	bfa8      	it	ge
   14446:	4613      	movge	r3, r2
   14448:	9319      	str	r3, [sp, #100]	; 0x64
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
   1444a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1444c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1444e:	4293      	cmp	r3, r2
   14450:	bfa8      	it	ge
   14452:	4613      	movge	r3, r2
   14454:	931a      	str	r3, [sp, #104]	; 0x68
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   14456:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14458:	18f3      	adds	r3, r6, r3
   1445a:	9315      	str	r3, [sp, #84]	; 0x54
   1445c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cnt = length & 0x3;
   1445e:	f004 0303 	and.w	r3, r4, #3
   14462:	18d3      	adds	r3, r2, r3
   14464:	9a02      	ldr	r2, [sp, #8]
   14466:	931c      	str	r3, [sp, #112]	; 0x70
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   14468:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1446a:	930e      	str	r3, [sp, #56]	; 0x38
   1446c:	440a      	add	r2, r1
   1446e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14470:	9307      	str	r3, [sp, #28]
   14472:	9221      	str	r2, [sp, #132]	; 0x84
            int count = 0;
   14474:	2300      	movs	r3, #0
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   14476:	9a07      	ldr	r2, [sp, #28]
   14478:	9919      	ldr	r1, [sp, #100]	; 0x64
   1447a:	428a      	cmp	r2, r1
   1447c:	da62      	bge.n	14544 <arm_max_pool_s8+0x208>
   1447e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   14480:	990e      	ldr	r1, [sp, #56]	; 0x38
   14482:	1855      	adds	r5, r2, r1
   14484:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   14486:	fb04 2505 	mla	r5, r4, r5, r2
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   1448a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1448c:	9208      	str	r2, [sp, #32]
   1448e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14490:	3a01      	subs	r2, #1
   14492:	9220      	str	r2, [sp, #128]	; 0x80
   14494:	e00b      	b.n	144ae <arm_max_pool_s8+0x172>
                    if (count == 0)
   14496:	2b00      	cmp	r3, #0
   14498:	d150      	bne.n	1453c <arm_max_pool_s8+0x200>
   1449a:	4622      	mov	r2, r4
   1449c:	4629      	mov	r1, r5
   1449e:	4630      	mov	r0, r6
   144a0:	f001 fa63 	bl	1596a <memcpy>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
   144a4:	9b08      	ldr	r3, [sp, #32]
   144a6:	3301      	adds	r3, #1
   144a8:	9308      	str	r3, [sp, #32]
   144aa:	4425      	add	r5, r4
   144ac:	2301      	movs	r3, #1
   144ae:	9a08      	ldr	r2, [sp, #32]
   144b0:	991a      	ldr	r1, [sp, #104]	; 0x68
   144b2:	428a      	cmp	r2, r1
   144b4:	dbef      	blt.n	14496 <arm_max_pool_s8+0x15a>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
   144b6:	9a07      	ldr	r2, [sp, #28]
   144b8:	9909      	ldr	r1, [sp, #36]	; 0x24
   144ba:	3201      	adds	r2, #1
   144bc:	9207      	str	r2, [sp, #28]
   144be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   144c0:	440a      	add	r2, r1
   144c2:	920e      	str	r2, [sp, #56]	; 0x38
   144c4:	e7d7      	b.n	14476 <arm_max_pool_s8+0x13a>
    memcpy(&val, in_q7, 4);
   144c6:	6803      	ldr	r3, [r0, #0]
    memcpy(&val, *in_q7, 4);
   144c8:	f85e 2b04 	ldr.w	r2, [lr], #4
        if (comp_max.bytes[0] > ref_max.bytes[0])
   144cc:	fa4f fc83 	sxtb.w	ip, r3
   144d0:	fa4f fb82 	sxtb.w	fp, r2
   144d4:	45dc      	cmp	ip, fp
   144d6:	bfb8      	it	lt
   144d8:	46dc      	movlt	ip, fp
   144da:	f36c 0807 	bfi	r8, ip, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
   144de:	f342 2b07 	sbfx	fp, r2, #8, #8
   144e2:	f343 2c07 	sbfx	ip, r3, #8, #8
   144e6:	45dc      	cmp	ip, fp
   144e8:	bfb8      	it	lt
   144ea:	46dc      	movlt	ip, fp
   144ec:	f36c 280f 	bfi	r8, ip, #8, #8
        if (comp_max.bytes[2] > ref_max.bytes[2])
   144f0:	f342 4b07 	sbfx	fp, r2, #16, #8
   144f4:	f343 4c07 	sbfx	ip, r3, #16, #8
   144f8:	45dc      	cmp	ip, fp
   144fa:	ea4f 6323 	mov.w	r3, r3, asr #24
   144fe:	ea4f 6222 	mov.w	r2, r2, asr #24
   14502:	bfb8      	it	lt
   14504:	46dc      	movlt	ip, fp
   14506:	4293      	cmp	r3, r2
   14508:	f36c 4817 	bfi	r8, ip, #16, #8
        if (comp_max.bytes[3] > ref_max.bytes[3])
   1450c:	bfb8      	it	lt
   1450e:	4613      	movlt	r3, r2
   14510:	f363 681f 	bfi	r8, r3, #24, #8
   14514:	f840 8b04 	str.w	r8, [r0], #4
        cnt--;
   14518:	3901      	subs	r1, #1
    while (cnt > 0l)
   1451a:	2900      	cmp	r1, #0
   1451c:	dcd3      	bgt.n	144c6 <arm_max_pool_s8+0x18a>
    while (cnt > 0l)
   1451e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   14520:	18ea      	adds	r2, r5, r3
   14522:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14524:	991c      	ldr	r1, [sp, #112]	; 0x70
   14526:	428b      	cmp	r3, r1
   14528:	d0bc      	beq.n	144a4 <arm_max_pool_s8+0x168>
        if (*src > *dst)
   1452a:	f993 0000 	ldrsb.w	r0, [r3]
   1452e:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
   14532:	4288      	cmp	r0, r1
            *dst = *src;
   14534:	bfb8      	it	lt
   14536:	7019      	strblt	r1, [r3, #0]
        dst++;
   14538:	3301      	adds	r3, #1
        cnt--;
   1453a:	e7f3      	b.n	14524 <arm_max_pool_s8+0x1e8>
    int32_t cnt = length >> 2;
   1453c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    const q7_t *src = target;
   1453e:	46ae      	mov	lr, r5
   14540:	4630      	mov	r0, r6
   14542:	e7ea      	b.n	1451a <arm_max_pool_s8+0x1de>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   14544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14546:	9b02      	ldr	r3, [sp, #8]
   14548:	4413      	add	r3, r2
   1454a:	9302      	str	r3, [sp, #8]
   1454c:	9b06      	ldr	r3, [sp, #24]
   1454e:	3301      	adds	r3, #1
   14550:	9306      	str	r3, [sp, #24]
   14552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14554:	1a9b      	subs	r3, r3, r2
   14556:	930f      	str	r3, [sp, #60]	; 0x3c
   14558:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1455a:	1a9b      	subs	r3, r3, r2
            dst += channel_in;
   1455c:	4426      	add	r6, r4
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
   1455e:	9310      	str	r3, [sp, #64]	; 0x40
   14560:	e750      	b.n	14404 <arm_max_pool_s8+0xc8>
    memcpy(&val, in_q7, 4);
   14562:	682b      	ldr	r3, [r5, #0]
        in.bytes[0] = MAX(in.bytes[0], act_min);
   14564:	b25a      	sxtb	r2, r3
   14566:	454a      	cmp	r2, r9
   14568:	bfb8      	it	lt
   1456a:	464a      	movlt	r2, r9
        in.bytes[0] = MIN(in.bytes[0], act_max);
   1456c:	b252      	sxtb	r2, r2
   1456e:	4552      	cmp	r2, sl
   14570:	bfa8      	it	ge
   14572:	4652      	movge	r2, sl
   14574:	f362 0707 	bfi	r7, r2, #0, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
   14578:	f343 2207 	sbfx	r2, r3, #8, #8
   1457c:	454a      	cmp	r2, r9
   1457e:	bfb8      	it	lt
   14580:	464a      	movlt	r2, r9
        in.bytes[1] = MIN(in.bytes[1], act_max);
   14582:	b252      	sxtb	r2, r2
   14584:	4552      	cmp	r2, sl
   14586:	bfa8      	it	ge
   14588:	4652      	movge	r2, sl
   1458a:	f362 270f 	bfi	r7, r2, #8, #8
        in.bytes[2] = MAX(in.bytes[2], act_min);
   1458e:	f343 4207 	sbfx	r2, r3, #16, #8
   14592:	454a      	cmp	r2, r9
   14594:	bfb8      	it	lt
   14596:	464a      	movlt	r2, r9
        in.bytes[2] = MIN(in.bytes[2], act_max);
   14598:	b252      	sxtb	r2, r2
        in.bytes[3] = MAX(in.bytes[3], act_min);
   1459a:	161b      	asrs	r3, r3, #24
        in.bytes[2] = MIN(in.bytes[2], act_max);
   1459c:	4552      	cmp	r2, sl
   1459e:	bfa8      	it	ge
   145a0:	4652      	movge	r2, sl
        in.bytes[3] = MAX(in.bytes[3], act_min);
   145a2:	454b      	cmp	r3, r9
   145a4:	bfb8      	it	lt
   145a6:	464b      	movlt	r3, r9
        in.bytes[3] = MIN(in.bytes[3], act_max);
   145a8:	b25b      	sxtb	r3, r3
   145aa:	4553      	cmp	r3, sl
        in.bytes[2] = MIN(in.bytes[2], act_max);
   145ac:	f362 4717 	bfi	r7, r2, #16, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
   145b0:	bfa8      	it	ge
   145b2:	4653      	movge	r3, sl
   145b4:	f363 671f 	bfi	r7, r3, #24, #8
   145b8:	f845 7b04 	str.w	r7, [r5], #4
        cnt--;
   145bc:	3801      	subs	r0, #1
   145be:	e6f7      	b.n	143b0 <arm_max_pool_s8+0x74>
        int32_t comp = *source;
   145c0:	f993 2000 	ldrsb.w	r2, [r3]
        comp = MAX(comp, act_min);
   145c4:	454a      	cmp	r2, r9
   145c6:	bfb8      	it	lt
   145c8:	464a      	movlt	r2, r9
        comp = MIN(comp, act_max);
   145ca:	4552      	cmp	r2, sl
   145cc:	bfa8      	it	ge
   145ce:	4652      	movge	r2, sl
        *source++ = (int8_t)comp;
   145d0:	f803 2b01 	strb.w	r2, [r3], #1
        cnt--;
   145d4:	e6f7      	b.n	143c6 <arm_max_pool_s8+0x8a>

000145d6 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   145d6:	b510      	push	{r4, lr}
   145d8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   145da:	6800      	ldr	r0, [r0, #0]
	if (__p)
   145dc:	b108      	cbz	r0, 145e2 <_ZNSt6vectorIPvSaIS0_EED1Ev+0xc>
	::operator delete(__p
   145de:	f001 f8f4 	bl	157ca <_ZdlPv>
      }
   145e2:	4620      	mov	r0, r4
   145e4:	bd10      	pop	{r4, pc}

000145e6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   145e6:	b510      	push	{r4, lr}
   145e8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   145ea:	6800      	ldr	r0, [r0, #0]
	if (__p)
   145ec:	b108      	cbz	r0, 145f2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev+0xc>
   145ee:	f001 f8ec 	bl	157ca <_ZdlPv>
      }
   145f2:	4620      	mov	r0, r4
   145f4:	bd10      	pop	{r4, pc}

000145f6 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0>:
    static int32_t calculate_no_of_stack_frames(
   145f6:	b530      	push	{r4, r5, lr}
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   145f8:	ee07 1a90 	vmov	s15, r1
    static int32_t calculate_no_of_stack_frames(
   145fc:	ed2d 8b02 	vpush	{d8}
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   14600:	eef8 8a67 	vcvt.f32.u32	s17, s15
        if (version == 1) {
   14604:	2a01      	cmp	r2, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   14606:	ee20 0a28 	vmul.f32	s0, s0, s17
    static int32_t calculate_no_of_stack_frames(
   1460a:	b083      	sub	sp, #12
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
   1460c:	ee60 8aa8 	vmul.f32	s17, s1, s17
    static int32_t calculate_no_of_stack_frames(
   14610:	4605      	mov	r5, r0
        if (version == 1) {
   14612:	d11b      	bne.n	1464c <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0+0x56>
  { return __builtin_roundf(__x); }
   14614:	f7fa fbe8 	bl	ede8 <roundf>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
   14618:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1461c:	eeb0 0a68 	vmov.f32	s0, s17
   14620:	ee17 4a90 	vmov	r4, s15
   14624:	f7fa fbe0 	bl	ede8 <roundf>
                floor(static_cast<float>(signal_size - length) / frame_stride));
   14628:	1b2c      	subs	r4, r5, r4
   1462a:	ee07 4a90 	vmov	s15, r4
   1462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
  { return __builtin_floorf(__x); }
   14632:	ee87 0a80 	vdiv.f32	s0, s15, s0
   14636:	f7fa fb6f 	bl	ed18 <floorf>
            numframes = static_cast<int>(
   1463a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1463e:	ed8d 0a01 	vstr	s0, [sp, #4]
        return numframes;
   14642:	9801      	ldr	r0, [sp, #4]
    }
   14644:	b003      	add	sp, #12
   14646:	ecbd 8b02 	vpop	{d8}
   1464a:	bd30      	pop	{r4, r5, pc}
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   1464c:	f7f5 fbc0 	bl	9dd0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
   14650:	eeb0 8a40 	vmov.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
   14654:	eeb0 0a68 	vmov.f32	s0, s17
   14658:	f7f5 fbba 	bl	9dd0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
   1465c:	eebd 8ac8 	vcvt.s32.f32	s16, s16
            length = (frame_sample_length - (int)frame_stride);
   14660:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   14664:	ee18 3a10 	vmov	r3, s16
   14668:	ee17 4a90 	vmov	r4, s15
   1466c:	1b1c      	subs	r4, r3, r4
   1466e:	e7db      	b.n	14628 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjjffbt.constprop.0+0x32>

00014670 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
   14670:	2a01      	cmp	r2, #1
   14672:	d102      	bne.n	1467a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   14674:	6001      	str	r1, [r0, #0]
      }
   14676:	2000      	movs	r0, #0
   14678:	4770      	bx	lr
	  switch (__op)
   1467a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   1467c:	bf04      	itt	eq
   1467e:	680b      	ldreq	r3, [r1, #0]
   14680:	6003      	streq	r3, [r0, #0]
	      break;
   14682:	e7f8      	b.n	14676 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

00014684 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   14684:	2a01      	cmp	r2, #1
   14686:	d102      	bne.n	1468e <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   14688:	6001      	str	r1, [r0, #0]
      }
   1468a:	2000      	movs	r0, #0
   1468c:	4770      	bx	lr
	  switch (__op)
   1468e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   14690:	bf04      	itt	eq
   14692:	680b      	ldreq	r3, [r1, #0]
   14694:	6003      	streq	r3, [r0, #0]
	      break;
   14696:	e7f8      	b.n	1468a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

00014698 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   14698:	b430      	push	{r4, r5}
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   1469a:	6804      	ldr	r4, [r0, #0]
   1469c:	460d      	mov	r5, r1
   1469e:	4611      	mov	r1, r2
   146a0:	6828      	ldr	r0, [r5, #0]
   146a2:	681a      	ldr	r2, [r3, #0]
   146a4:	6809      	ldr	r1, [r1, #0]
   146a6:	4623      	mov	r3, r4
      }
   146a8:	bc30      	pop	{r4, r5}
   146aa:	4718      	bx	r3

000146ac <_ZN2ei5numpy8linspaceEffjPf.isra.0>:
    static int linspace(float start, float stop, uint32_t number, float *out)
   146ac:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
   146ae:	b120      	cbz	r0, 146ba <_ZN2ei5numpy8linspaceEffjPf.isra.0+0xe>
   146b0:	b119      	cbz	r1, 146ba <_ZN2ei5numpy8linspaceEffjPf.isra.0+0xe>
        if (number == 1) {
   146b2:	2801      	cmp	r0, #1
   146b4:	d102      	bne.n	146bc <_ZN2ei5numpy8linspaceEffjPf.isra.0+0x10>
            out[0] = start;
   146b6:	ed81 0a00 	vstr	s0, [r1]
    }
   146ba:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
   146bc:	1e42      	subs	r2, r0, #1
   146be:	ee07 2a10 	vmov	s14, r2
   146c2:	ee70 7ac0 	vsub.f32	s15, s1, s0
   146c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   146ca:	460c      	mov	r4, r1
   146cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   146d0:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
   146d2:	ee07 3a90 	vmov	s15, r3
   146d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   146da:	eef0 7a40 	vmov.f32	s15, s0
   146de:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   146e2:	3301      	adds	r3, #1
   146e4:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
   146e6:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   146ea:	d8f2      	bhi.n	146d2 <_ZN2ei5numpy8linspaceEffjPf.isra.0+0x26>
        out[number - 1] = stop;
   146ec:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   146f0:	ed41 0a01 	vstr	s1, [r1, #-4]
        return EIDSP_OK;
   146f4:	e7e1      	b.n	146ba <_ZN2ei5numpy8linspaceEffjPf.isra.0+0xe>

000146f6 <_ZNSt14_Function_baseD1Ev>:
      if (_M_manager)
   146f6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   146f8:	b510      	push	{r4, lr}
   146fa:	4604      	mov	r4, r0
      if (_M_manager)
   146fc:	b113      	cbz	r3, 14704 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   146fe:	2203      	movs	r2, #3
   14700:	4601      	mov	r1, r0
   14702:	4798      	blx	r3
    }
   14704:	4620      	mov	r0, r4
   14706:	bd10      	pop	{r4, pc}

00014708 <_ZN2ei9ei_matrixC1EjjPf>:
    ei_matrix(
   14708:	b570      	push	{r4, r5, r6, lr}
   1470a:	4604      	mov	r4, r0
   1470c:	460e      	mov	r6, r1
   1470e:	4615      	mov	r5, r2
        if (a_buffer) {
   14710:	b133      	cbz	r3, 14720 <_ZN2ei9ei_matrixC1EjjPf+0x18>
            buffer = a_buffer;
   14712:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
   14714:	2300      	movs	r3, #0
        cols = n_cols;
   14716:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
   1471a:	7323      	strb	r3, [r4, #12]
    }
   1471c:	4620      	mov	r0, r4
   1471e:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   14720:	fb02 f001 	mul.w	r0, r2, r1
   14724:	0080      	lsls	r0, r0, #2
   14726:	2101      	movs	r1, #1
   14728:	f7fc fea2 	bl	11470 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   1472c:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   1472e:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
   14730:	e7f1      	b.n	14716 <_ZN2ei9ei_matrixC1EjjPf+0xe>

00014732 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   14732:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   14736:	4359      	muls	r1, r3
   14738:	2300      	movs	r3, #0
   1473a:	4299      	cmp	r1, r3
   1473c:	d00a      	beq.n	14754 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
   1473e:	6802      	ldr	r2, [r0, #0]
   14740:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14744:	edd2 7a00 	vldr	s15, [r2]
   14748:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1474c:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
   1474e:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   14752:	e7f2      	b.n	1473a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x8>
    }
   14754:	2000      	movs	r0, #0
   14756:	4770      	bx	lr

00014758 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
    ~ei_stack_frames_info() {
   14758:	b538      	push	{r3, r4, r5, lr}
        if (frame_ixs) {
   1475a:	6845      	ldr	r5, [r0, #4]
    ~ei_stack_frames_info() {
   1475c:	4604      	mov	r4, r0
        if (frame_ixs) {
   1475e:	b135      	cbz	r5, 1476e <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x16>
	_M_deallocate(_M_impl._M_start,
   14760:	6828      	ldr	r0, [r5, #0]
	if (__p)
   14762:	b108      	cbz	r0, 14768 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x10>
   14764:	f001 f831 	bl	157ca <_ZdlPv>
            delete frame_ixs;
   14768:	4628      	mov	r0, r5
   1476a:	f001 f82e 	bl	157ca <_ZdlPv>
    }
   1476e:	4620      	mov	r0, r4
   14770:	bd38      	pop	{r3, r4, r5, pc}

00014772 <_ZN2ei8speechpy10processing11preemphasisD1Ev>:
        ~preemphasis() {
   14772:	b510      	push	{r4, lr}
   14774:	4604      	mov	r4, r0
            if (_prev_buffer) {
   14776:	68c0      	ldr	r0, [r0, #12]
   14778:	b108      	cbz	r0, 1477e <_ZN2ei8speechpy10processing11preemphasisD1Ev+0xc>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
   1477a:	f7fc fe7b 	bl	11474 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
   1477e:	6920      	ldr	r0, [r4, #16]
   14780:	b108      	cbz	r0, 14786 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x14>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
   14782:	f7fc fe77 	bl	11474 <_Z7ei_freePv>
        }
   14786:	4620      	mov	r0, r4
   14788:	bd10      	pop	{r4, pc}

0001478a <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   1478a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1478c:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   1478e:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
   14790:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
   14794:	b90b      	cbnz	r3, 1479a <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
   14796:	f7fc fe27 	bl	113e8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1479a:	68c4      	ldr	r4, [r0, #12]
   1479c:	ab01      	add	r3, sp, #4
   1479e:	aa02      	add	r2, sp, #8
   147a0:	a903      	add	r1, sp, #12
   147a2:	47a0      	blx	r4
    }
   147a4:	b004      	add	sp, #16
   147a6:	bd10      	pop	{r4, pc}

000147a8 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   147a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   147aa:	0097      	lsls	r7, r2, #2
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   147ac:	4604      	mov	r4, r0
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
   147ae:	e9c0 1200 	strd	r1, r2, [r0]
   147b2:	7603      	strb	r3, [r0, #24]
   147b4:	ed80 0a02 	vstr	s0, [r0, #8]
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   147b8:	460e      	mov	r6, r1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   147ba:	4638      	mov	r0, r7
   147bc:	2101      	movs	r1, #1
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
   147be:	4615      	mov	r5, r2
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   147c0:	f7fc fe56 	bl	11470 <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   147c4:	2101      	movs	r1, #1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   147c6:	60e0      	str	r0, [r4, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   147c8:	4638      	mov	r0, r7
   147ca:	f7fc fe51 	bl	11470 <_Z9ei_callocjj>
            _next_offset_should_be = 0;
   147ce:	2300      	movs	r3, #0
            if (shift < 0) {
   147d0:	429d      	cmp	r5, r3
            _next_offset_should_be = 0;
   147d2:	6163      	str	r3, [r4, #20]
                _shift = signal->total_length + shift;
   147d4:	bfb8      	it	lt
   147d6:	6933      	ldrlt	r3, [r6, #16]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
   147d8:	6120      	str	r0, [r4, #16]
                _shift = signal->total_length + shift;
   147da:	bfbc      	itt	lt
   147dc:	195b      	addlt	r3, r3, r5
   147de:	6063      	strlt	r3, [r4, #4]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
   147e0:	68e3      	ldr	r3, [r4, #12]
   147e2:	b13b      	cbz	r3, 147f4 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
   147e4:	b130      	cbz	r0, 147f4 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
   147e6:	6931      	ldr	r1, [r6, #16]
   147e8:	4603      	mov	r3, r0
   147ea:	462a      	mov	r2, r5
   147ec:	1b49      	subs	r1, r1, r5
   147ee:	4630      	mov	r0, r6
   147f0:	f7ff ffcb 	bl	1478a <_ZNKSt8functionIFijjPfEEclEjjS0_>
        }
   147f4:	4620      	mov	r0, r4
   147f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000147f8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   147f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   147fc:	6807      	ldr	r7, [r0, #0]
   147fe:	f8d3 9000 	ldr.w	r9, [r3]

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   14802:	680c      	ldr	r4, [r1, #0]
   14804:	68bb      	ldr	r3, [r7, #8]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   14806:	6815      	ldr	r5, [r2, #0]

        size_t out_ptr_ix = 0;

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   14808:	fbb4 f4f3 	udiv	r4, r4, r3
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
   1480c:	fbb5 f5f3 	udiv	r5, r5, r3
        size_t out_ptr_ix = 0;
   14810:	f04f 0800 	mov.w	r8, #0
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   14814:	4425      	add	r5, r4
   14816:	42a5      	cmp	r5, r4
   14818:	d917      	bls.n	1484a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x52>
   1481a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   1481e:	2600      	movs	r6, #0
   14820:	68ba      	ldr	r2, [r7, #8]
   14822:	42b2      	cmp	r2, r6
   14824:	eb06 0308 	add.w	r3, r6, r8
   14828:	d90c      	bls.n	14844 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x4c>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   1482a:	687b      	ldr	r3, [r7, #4]
   1482c:	6838      	ldr	r0, [r7, #0]
   1482e:	5d99      	ldrb	r1, [r3, r6]
   14830:	2201      	movs	r2, #1
   14832:	4653      	mov	r3, sl
   14834:	4421      	add	r1, r4
   14836:	f7ff ffa8 	bl	1478a <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
   1483a:	f10a 0a04 	add.w	sl, sl, #4
   1483e:	b928      	cbnz	r0, 1484c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   14840:	3601      	adds	r6, #1
   14842:	e7ed      	b.n	14820 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x28>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
   14844:	3401      	adds	r4, #1
   14846:	4698      	mov	r8, r3
   14848:	e7e5      	b.n	14816 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x1e>
                    return r;
                }
            }
        }

        return 0;
   1484a:	2000      	movs	r0, #0
      }
   1484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00014850 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   14850:	b510      	push	{r4, lr}
   14852:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   14854:	6840      	ldr	r0, [r0, #4]
   14856:	b108      	cbz	r0, 1485c <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
   14858:	6823      	ldr	r3, [r4, #0]
   1485a:	4798      	blx	r3
	__ptr = pointer();
      }
   1485c:	4620      	mov	r0, r4
   1485e:	bd10      	pop	{r4, pc}

00014860 <run_inference>:
{
   14860:	b510      	push	{r4, lr}
    EI_IMPULSE_ERROR run_res = run_nn_inference(fmatrix, result, debug);
   14862:	f7f5 ffa5 	bl	a7b0 <_Z16run_nn_inferencePN2ei9ei_matrixEP19ei_impulse_result_tb>
    if (run_res != EI_IMPULSE_OK) {
   14866:	4604      	mov	r4, r0
   14868:	b928      	cbnz	r0, 14876 <run_inference+0x16>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   1486a:	f7fc fdeb 	bl	11444 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
   1486e:	3002      	adds	r0, #2
   14870:	bf08      	it	eq
   14872:	f06f 0401 	mvneq.w	r4, #1
}
   14876:	4620      	mov	r0, r4
   14878:	bd10      	pop	{r4, pc}

0001487a <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
   1487a:	b513      	push	{r0, r1, r4, lr}
   1487c:	460b      	mov	r3, r1
   1487e:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   14880:	e9d0 0100 	ldrd	r0, r1, [r0]
   14884:	466c      	mov	r4, sp
   14886:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   1488a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1488e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   14892:	e894 0003 	ldmia.w	r4, {r0, r1}
   14896:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   1489a:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   1489c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   1489e:	6090      	str	r0, [r2, #8]
   148a0:	68d8      	ldr	r0, [r3, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   148a2:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   148a4:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   148a6:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   148a8:	60d9      	str	r1, [r3, #12]
      }
   148aa:	b002      	add	sp, #8
   148ac:	bd10      	pop	{r4, pc}

000148ae <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>:
      operator=(const function& __x)
   148ae:	b530      	push	{r4, r5, lr}
   148b0:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   148b2:	2300      	movs	r3, #0
   148b4:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   148b6:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   148b8:	4605      	mov	r5, r0
   148ba:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   148bc:	b133      	cbz	r3, 148cc <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   148be:	2202      	movs	r2, #2
   148c0:	4668      	mov	r0, sp
   148c2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   148c4:	68e3      	ldr	r3, [r4, #12]
   148c6:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   148c8:	68a3      	ldr	r3, [r4, #8]
   148ca:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   148cc:	4629      	mov	r1, r5
   148ce:	4668      	mov	r0, sp
   148d0:	f7ff ffd3 	bl	1487a <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
   148d4:	4668      	mov	r0, sp
   148d6:	f7ff ff0e 	bl	146f6 <_ZNSt14_Function_baseD1Ev>
      }
   148da:	b005      	add	sp, #20
   148dc:	bd30      	pop	{r4, r5, pc}

000148de <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   148de:	b160      	cbz	r0, 148fa <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   148e0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   148e2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   148e6:	2b01      	cmp	r3, #1
   148e8:	d003      	beq.n	148f2 <sys_notify_validate+0x14>
   148ea:	2b03      	cmp	r3, #3
   148ec:	d105      	bne.n	148fa <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   148ee:	6803      	ldr	r3, [r0, #0]
   148f0:	b11b      	cbz	r3, 148fa <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   148f2:	2300      	movs	r3, #0
   148f4:	6083      	str	r3, [r0, #8]
   148f6:	4618      	mov	r0, r3
   148f8:	4770      	bx	lr
		return -EINVAL;
   148fa:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   148fe:	4770      	bx	lr

00014900 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   14900:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   14902:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   14904:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
   14908:	2b03      	cmp	r3, #3
   1490a:	f04f 0200 	mov.w	r2, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1490e:	bf0c      	ite	eq
   14910:	6803      	ldreq	r3, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   14912:	4613      	movne	r3, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   14914:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   14916:	4618      	mov	r0, r3
   14918:	4770      	bx	lr

0001491a <arch_printk_char_out>:
}
   1491a:	2000      	movs	r0, #0
   1491c:	4770      	bx	lr

0001491e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   1491e:	b40f      	push	{r0, r1, r2, r3}
   14920:	b507      	push	{r0, r1, r2, lr}
   14922:	a904      	add	r1, sp, #16
   14924:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14928:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1492a:	f7f6 fc47 	bl	b1bc <vprintk>

	va_end(ap);
}
   1492e:	b003      	add	sp, #12
   14930:	f85d eb04 	ldr.w	lr, [sp], #4
   14934:	b004      	add	sp, #16
   14936:	4770      	bx	lr

00014938 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14938:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1493a:	f013 0307 	ands.w	r3, r3, #7
   1493e:	d105      	bne.n	1494c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   14940:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   14942:	2b00      	cmp	r3, #0
   14944:	bf0c      	ite	eq
   14946:	2000      	moveq	r0, #0
   14948:	2003      	movne	r0, #3
   1494a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1494c:	2b02      	cmp	r3, #2
   1494e:	d105      	bne.n	1495c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   14950:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   14952:	2b00      	cmp	r3, #0
   14954:	bf14      	ite	ne
   14956:	2000      	movne	r0, #0
   14958:	2004      	moveq	r0, #4
   1495a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1495c:	2b01      	cmp	r3, #1
   1495e:	d105      	bne.n	1496c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   14960:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   14962:	2b00      	cmp	r3, #0
   14964:	bf0c      	ite	eq
   14966:	2000      	moveq	r0, #0
   14968:	2005      	movne	r0, #5
   1496a:	4770      	bx	lr
	int evt = EVT_NOP;
   1496c:	2000      	movs	r0, #0
}
   1496e:	4770      	bx	lr

00014970 <notify_one>:
{
   14970:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14972:	460d      	mov	r5, r1
   14974:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   14976:	4619      	mov	r1, r3
   14978:	1d28      	adds	r0, r5, #4
{
   1497a:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1497c:	9300      	str	r3, [sp, #0]
   1497e:	f7ff ffbf 	bl	14900 <sys_notify_finalize>
	if (cb) {
   14982:	4604      	mov	r4, r0
   14984:	b140      	cbz	r0, 14998 <notify_one+0x28>
		cb(mgr, cli, state, res);
   14986:	e9dd 3200 	ldrd	r3, r2, [sp]
   1498a:	4629      	mov	r1, r5
   1498c:	4630      	mov	r0, r6
   1498e:	46a4      	mov	ip, r4
}
   14990:	b002      	add	sp, #8
   14992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   14996:	4760      	bx	ip
}
   14998:	b002      	add	sp, #8
   1499a:	bd70      	pop	{r4, r5, r6, pc}

0001499c <transition_complete>:
{
   1499c:	b410      	push	{r4}
	__asm__ volatile(
   1499e:	f04f 0420 	mov.w	r4, #32
   149a2:	f3ef 8211 	mrs	r2, BASEPRI
   149a6:	f384 8812 	msr	BASEPRI_MAX, r4
   149aa:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   149ae:	6181      	str	r1, [r0, #24]
}
   149b0:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   149b4:	2101      	movs	r1, #1
   149b6:	f7f6 bc0f 	b.w	b1d8 <process_event>

000149ba <validate_args>:
{
   149ba:	b510      	push	{r4, lr}
   149bc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   149be:	b140      	cbz	r0, 149d2 <validate_args+0x18>
   149c0:	b139      	cbz	r1, 149d2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   149c2:	1d08      	adds	r0, r1, #4
   149c4:	f7ff ff8b 	bl	148de <sys_notify_validate>
	if ((rv == 0)
   149c8:	b928      	cbnz	r0, 149d6 <validate_args+0x1c>
	    && ((cli->notify.flags
   149ca:	68a3      	ldr	r3, [r4, #8]
   149cc:	f033 0303 	bics.w	r3, r3, #3
   149d0:	d001      	beq.n	149d6 <validate_args+0x1c>
		rv = -EINVAL;
   149d2:	f06f 0015 	mvn.w	r0, #21
}
   149d6:	bd10      	pop	{r4, pc}

000149d8 <onoff_manager_init>:
{
   149d8:	b538      	push	{r3, r4, r5, lr}
   149da:	460c      	mov	r4, r1
	if ((mgr == NULL)
   149dc:	4605      	mov	r5, r0
   149de:	b158      	cbz	r0, 149f8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   149e0:	b151      	cbz	r1, 149f8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   149e2:	680b      	ldr	r3, [r1, #0]
   149e4:	b143      	cbz	r3, 149f8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   149e6:	684b      	ldr	r3, [r1, #4]
   149e8:	b133      	cbz	r3, 149f8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   149ea:	2220      	movs	r2, #32
   149ec:	2100      	movs	r1, #0
   149ee:	f000 ffe4 	bl	159ba <memset>
   149f2:	612c      	str	r4, [r5, #16]
	return 0;
   149f4:	2000      	movs	r0, #0
}
   149f6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   149f8:	f06f 0015 	mvn.w	r0, #21
   149fc:	e7fb      	b.n	149f6 <onoff_manager_init+0x1e>

000149fe <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   149fe:	b570      	push	{r4, r5, r6, lr}
   14a00:	4604      	mov	r4, r0
   14a02:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   14a04:	f7ff ffd9 	bl	149ba <validate_args>

	if (rv < 0) {
   14a08:	1e05      	subs	r5, r0, #0
   14a0a:	db31      	blt.n	14a70 <onoff_request+0x72>
   14a0c:	f04f 0320 	mov.w	r3, #32
   14a10:	f3ef 8111 	mrs	r1, BASEPRI
   14a14:	f383 8812 	msr	BASEPRI_MAX, r3
   14a18:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   14a1c:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14a1e:	8ba0      	ldrh	r0, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   14a20:	f64f 75ff 	movw	r5, #65535	; 0xffff
   14a24:	42ab      	cmp	r3, r5
   14a26:	f000 0207 	and.w	r2, r0, #7
   14a2a:	d02e      	beq.n	14a8a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   14a2c:	2a02      	cmp	r2, #2
   14a2e:	d10e      	bne.n	14a4e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   14a30:	3301      	adds	r3, #1
   14a32:	83e3      	strh	r3, [r4, #30]
	rv = state;
   14a34:	4615      	mov	r5, r2
		notify = true;
   14a36:	2301      	movs	r3, #1
	__asm__ volatile(
   14a38:	f381 8811 	msr	BASEPRI, r1
   14a3c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   14a40:	b1b3      	cbz	r3, 14a70 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   14a42:	2300      	movs	r3, #0
   14a44:	4631      	mov	r1, r6
   14a46:	4620      	mov	r0, r4
   14a48:	f7ff ff92 	bl	14970 <notify_one>
   14a4c:	e010      	b.n	14a70 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   14a4e:	0783      	lsls	r3, r0, #30
   14a50:	d001      	beq.n	14a56 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   14a52:	2a06      	cmp	r2, #6
   14a54:	d10e      	bne.n	14a74 <onoff_request+0x76>
	parent->next = child;
   14a56:	2300      	movs	r3, #0
   14a58:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   14a5a:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   14a5c:	b993      	cbnz	r3, 14a84 <onoff_request+0x86>
	list->head = node;
   14a5e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   14a62:	4615      	mov	r5, r2
   14a64:	b962      	cbnz	r2, 14a80 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   14a66:	460a      	mov	r2, r1
   14a68:	4620      	mov	r0, r4
   14a6a:	2102      	movs	r1, #2
   14a6c:	f7f6 fbb4 	bl	b1d8 <process_event>
		}
	}

	return rv;
}
   14a70:	4628      	mov	r0, r5
   14a72:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   14a74:	2a05      	cmp	r2, #5
   14a76:	bf0c      	ite	eq
   14a78:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   14a7c:	f06f 0504 	mvnne.w	r5, #4
   14a80:	2300      	movs	r3, #0
   14a82:	e7d9      	b.n	14a38 <onoff_request+0x3a>
	parent->next = child;
   14a84:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14a86:	6066      	str	r6, [r4, #4]
}
   14a88:	e7eb      	b.n	14a62 <onoff_request+0x64>
		rv = -EAGAIN;
   14a8a:	f06f 050a 	mvn.w	r5, #10
   14a8e:	e7f7      	b.n	14a80 <onoff_request+0x82>

00014a90 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   14a90:	4604      	mov	r4, r0
   14a92:	b508      	push	{r3, lr}
   14a94:	4608      	mov	r0, r1
   14a96:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   14a98:	461a      	mov	r2, r3
   14a9a:	47a0      	blx	r4
	return z_impl_z_current_get();
   14a9c:	f7f9 fe5c 	bl	e758 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   14aa0:	f7f7 fa82 	bl	bfa8 <z_impl_k_thread_abort>

00014aa4 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   14aa4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   14aa8:	8848      	ldrh	r0, [r1, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   14aaa:	0840      	lsrs	r0, r0, #1
   14aac:	4770      	bx	lr

00014aae <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   14aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ab0:	460c      	mov	r4, r1
   14ab2:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   14ab4:	f7ff fff6 	bl	14aa4 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   14ab8:	fab0 f080 	clz	r0, r0
   14abc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   14ac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   14ac4:	00e2      	lsls	r2, r4, #3
   14ac6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   14aca:	1d17      	adds	r7, r2, #4
   14acc:	b2a5      	uxth	r5, r4
   14ace:	3206      	adds	r2, #6
   14ad0:	b956      	cbnz	r6, 14ae8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   14ad2:	2101      	movs	r1, #1
   14ad4:	fa01 f000 	lsl.w	r0, r1, r0
   14ad8:	68d9      	ldr	r1, [r3, #12]
   14ada:	4301      	orrs	r1, r0
   14adc:	60d9      	str	r1, [r3, #12]
		b->next = c;
   14ade:	f8cc 4010 	str.w	r4, [ip, #16]
   14ae2:	53dd      	strh	r5, [r3, r7]
   14ae4:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   14ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   14ae8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   14aea:	3104      	adds	r1, #4
   14aec:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   14aee:	53d8      	strh	r0, [r3, r7]
   14af0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   14af4:	529e      	strh	r6, [r3, r2]
   14af6:	80c5      	strh	r5, [r0, #6]
   14af8:	525d      	strh	r5, [r3, r1]
   14afa:	e7f4      	b.n	14ae6 <free_list_add+0x38>

00014afc <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   14afc:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   14afe:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   14b00:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   14b02:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   14b06:	f021 0107 	bic.w	r1, r1, #7
{
   14b0a:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   14b0c:	1acd      	subs	r5, r1, r3
   14b0e:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   14b10:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   14b12:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   14b16:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   14b1a:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   14b1c:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   14b1e:	2600      	movs	r6, #0
   14b20:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   14b22:	f1c0 0020 	rsb	r0, r0, #32
   14b26:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   14b2a:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   14b2c:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   14b2e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   14b32:	4284      	cmp	r4, r0
   14b34:	d118      	bne.n	14b68 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14b36:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   14b38:	f040 0001 	orr.w	r0, r0, #1
   14b3c:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   14b3e:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   14b42:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14b44:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   14b46:	801e      	strh	r6, [r3, #0]
   14b48:	8067      	strh	r7, [r4, #2]
   14b4a:	195c      	adds	r4, r3, r5
   14b4c:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   14b50:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   14b54:	8066      	strh	r6, [r4, #2]
   14b56:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   14b58:	8850      	ldrh	r0, [r2, #2]
   14b5a:	f040 0001 	orr.w	r0, r0, #1
   14b5e:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   14b60:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   14b62:	4618      	mov	r0, r3
   14b64:	f7ff bfa3 	b.w	14aae <free_list_add>
		h->buckets[i].next = 0;
   14b68:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   14b6c:	e7e1      	b.n	14b32 <sys_heap_init+0x36>

00014b6e <_ldiv5>:
	uint32_t v_lo = *v;
   14b6e:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   14b72:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   14b74:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   14b78:	fba2 2403 	umull	r2, r4, r2, r3
   14b7c:	18d5      	adds	r5, r2, r3
   14b7e:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   14b82:	fba1 1303 	umull	r1, r3, r1, r3
   14b86:	1852      	adds	r2, r2, r1
   14b88:	eb44 0403 	adc.w	r4, r4, r3
   14b8c:	1952      	adds	r2, r2, r5
   14b8e:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   14b92:	1889      	adds	r1, r1, r2
   14b94:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   14b98:	e9c0 1300 	strd	r1, r3, [r0]
}
   14b9c:	bd30      	pop	{r4, r5, pc}

00014b9e <_get_digit>:
	if (*digit_count > 0) {
   14b9e:	680b      	ldr	r3, [r1, #0]
   14ba0:	2b00      	cmp	r3, #0
{
   14ba2:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   14ba4:	dd10      	ble.n	14bc8 <_get_digit+0x2a>
		--*digit_count;
   14ba6:	3b01      	subs	r3, #1
   14ba8:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   14baa:	6803      	ldr	r3, [r0, #0]
   14bac:	6844      	ldr	r4, [r0, #4]
   14bae:	220a      	movs	r2, #10
   14bb0:	fba3 1302 	umull	r1, r3, r3, r2
   14bb4:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   14bb8:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   14bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   14bbe:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   14bc2:	3230      	adds	r2, #48	; 0x30
}
   14bc4:	4610      	mov	r0, r2
   14bc6:	bd10      	pop	{r4, pc}
		rval = '0';
   14bc8:	2230      	movs	r2, #48	; 0x30
   14bca:	e7fb      	b.n	14bc4 <_get_digit+0x26>

00014bcc <outs>:
{
   14bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14bd0:	4680      	mov	r8, r0
   14bd2:	4689      	mov	r9, r1
   14bd4:	4616      	mov	r6, r2
   14bd6:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14bd8:	4615      	mov	r5, r2
   14bda:	42bd      	cmp	r5, r7
   14bdc:	eba5 0406 	sub.w	r4, r5, r6
   14be0:	d305      	bcc.n	14bee <outs+0x22>
   14be2:	b10f      	cbz	r7, 14be8 <outs+0x1c>
	return (int)count;
   14be4:	4620      	mov	r0, r4
   14be6:	e008      	b.n	14bfa <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14be8:	782b      	ldrb	r3, [r5, #0]
   14bea:	2b00      	cmp	r3, #0
   14bec:	d0fa      	beq.n	14be4 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   14bee:	f815 0b01 	ldrb.w	r0, [r5], #1
   14bf2:	4649      	mov	r1, r9
   14bf4:	47c0      	blx	r8
		if (rc < 0) {
   14bf6:	2800      	cmp	r0, #0
   14bf8:	daef      	bge.n	14bda <outs+0xe>
}
   14bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014bfe <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   14bfe:	4770      	bx	lr

00014c00 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   14c00:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   14c02:	f7f6 fc51 	bl	b4a8 <__do_global_ctors_aux>
	__do_init_array_aux();
}
   14c06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
   14c0a:	f7f6 bc3f 	b.w	b48c <__do_init_array_aux>

00014c0e <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   14c0e:	2000      	movs	r0, #0
   14c10:	4770      	bx	lr

00014c12 <abort_function>:
{
   14c12:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   14c14:	2000      	movs	r0, #0
   14c16:	f7f6 fc25 	bl	b464 <sys_reboot>

00014c1a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14c1a:	f000 bc5e 	b.w	154da <z_fatal_error>

00014c1e <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14c1e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   14c20:	6800      	ldr	r0, [r0, #0]
   14c22:	f000 bc5a 	b.w	154da <z_fatal_error>

00014c26 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14c26:	2100      	movs	r1, #0
   14c28:	2001      	movs	r0, #1
   14c2a:	f7ff bff6 	b.w	14c1a <z_arm_fatal_error>

00014c2e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   14c2e:	b508      	push	{r3, lr}
	handler();
   14c30:	f7f6 fec4 	bl	b9bc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   14c34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   14c38:	f7f7 b82e 	b.w	bc98 <z_arm_exc_exit>

00014c3c <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   14c3c:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   14c3e:	4601      	mov	r1, r0
   14c40:	4618      	mov	r0, r3
   14c42:	f7ff bfe4 	b.w	14c0e <__cxa_atexit>

00014c46 <malloc_prepare>:
}
   14c46:	2000      	movs	r0, #0
   14c48:	4770      	bx	lr

00014c4a <_stdout_hook_default>:
}
   14c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c4e:	4770      	bx	lr

00014c50 <_stdin_hook_default>:
}
   14c50:	2000      	movs	r0, #0
   14c52:	4770      	bx	lr

00014c54 <_read>:
{
   14c54:	4608      	mov	r0, r1
   14c56:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   14c58:	f7f7 ba8e 	b.w	c178 <z_impl_zephyr_read_stdin>

00014c5c <_write>:
{
   14c5c:	4608      	mov	r0, r1
   14c5e:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   14c60:	f7f7 ba9e 	b.w	c1a0 <z_impl_zephyr_write_stdout>

00014c64 <_close>:
   14c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c68:	4770      	bx	lr

00014c6a <_lseek>:
}
   14c6a:	2000      	movs	r0, #0
   14c6c:	4770      	bx	lr

00014c6e <_isatty>:
}
   14c6e:	2802      	cmp	r0, #2
   14c70:	bfcc      	ite	gt
   14c72:	2000      	movgt	r0, #0
   14c74:	2001      	movle	r0, #1
   14c76:	4770      	bx	lr

00014c78 <_kill>:
}
   14c78:	2000      	movs	r0, #0
   14c7a:	4770      	bx	lr

00014c7c <_getpid>:
}
   14c7c:	2000      	movs	r0, #0
   14c7e:	4770      	bx	lr

00014c80 <_fstat>:
	st->st_mode = S_IFCHR;
   14c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   14c84:	604b      	str	r3, [r1, #4]
}
   14c86:	2000      	movs	r0, #0
   14c88:	4770      	bx	lr

00014c8a <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   14c8a:	b510      	push	{r4, lr}
   14c8c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   14c8e:	2014      	movs	r0, #20
   14c90:	f7fa fc5e 	bl	f550 <malloc>
   14c94:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   14c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   14c9a:	f000 bc98 	b.w	155ce <z_impl_k_mutex_init>

00014c9e <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   14c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ca6:	f7f9 b963 	b.w	df70 <z_impl_k_mutex_lock>

00014caa <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   14caa:	f7f9 b9d9 	b.w	e060 <z_impl_k_mutex_unlock>

00014cae <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   14cae:	f7f8 bf95 	b.w	dbdc <z_impl_z_errno>

00014cb2 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   14cb2:	2806      	cmp	r0, #6
   14cb4:	d108      	bne.n	14cc8 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   14cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14cba:	2201      	movs	r2, #1
   14cbc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   14cc0:	f3bf 8f4f 	dsb	sy
        __WFE();
   14cc4:	bf20      	wfe
    while (true)
   14cc6:	e7fd      	b.n	14cc4 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   14cc8:	4770      	bx	lr

00014cca <pm_state_exit_post_ops>:
   14cca:	2300      	movs	r3, #0
   14ccc:	f383 8811 	msr	BASEPRI, r3
   14cd0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   14cd4:	4770      	bx	lr

00014cd6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   14cd6:	6903      	ldr	r3, [r0, #16]
   14cd8:	b2c9      	uxtb	r1, r1
   14cda:	220c      	movs	r2, #12
   14cdc:	fb01 3302 	mla	r3, r1, r2, r3
   14ce0:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   14ce2:	f000 0007 	and.w	r0, r0, #7
   14ce6:	4770      	bx	lr

00014ce8 <set_on_state>:
	__asm__ volatile(
   14ce8:	f04f 0320 	mov.w	r3, #32
   14cec:	f3ef 8211 	mrs	r2, BASEPRI
   14cf0:	f383 8812 	msr	BASEPRI_MAX, r3
   14cf4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   14cf8:	6803      	ldr	r3, [r0, #0]
   14cfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14cfe:	f043 0302 	orr.w	r3, r3, #2
   14d02:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   14d04:	f382 8811 	msr	BASEPRI, r2
   14d08:	f3bf 8f6f 	isb	sy
}
   14d0c:	4770      	bx	lr

00014d0e <stop>:
{
   14d0e:	4603      	mov	r3, r0
   14d10:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   14d12:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   14d14:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   14d16:	f04f 0420 	mov.w	r4, #32
   14d1a:	f3ef 8611 	mrs	r6, BASEPRI
   14d1e:	f384 8812 	msr	BASEPRI_MAX, r4
   14d22:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14d26:	250c      	movs	r5, #12
   14d28:	fb05 0401 	mla	r4, r5, r1, r0
   14d2c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   14d2e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   14d32:	d001      	beq.n	14d38 <stop+0x2a>
   14d34:	42a2      	cmp	r2, r4
   14d36:	d110      	bne.n	14d5a <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   14d38:	fb05 0001 	mla	r0, r5, r1, r0
   14d3c:	2201      	movs	r2, #1
   14d3e:	6482      	str	r2, [r0, #72]	; 0x48
	int err = 0;
   14d40:	2000      	movs	r0, #0
	__asm__ volatile(
   14d42:	f386 8811 	msr	BASEPRI, r6
   14d46:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   14d4a:	b928      	cbnz	r0, 14d58 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   14d4c:	685b      	ldr	r3, [r3, #4]
   14d4e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   14d52:	684b      	ldr	r3, [r1, #4]
   14d54:	4798      	blx	r3
	return 0;
   14d56:	2000      	movs	r0, #0
}
   14d58:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   14d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d5e:	e7f0      	b.n	14d42 <stop+0x34>

00014d60 <api_stop>:
	return stop(dev, subsys, CTX_API);
   14d60:	2280      	movs	r2, #128	; 0x80
   14d62:	f7ff bfd4 	b.w	14d0e <stop>

00014d66 <async_start>:
{
   14d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d68:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   14d6a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   14d6c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   14d6e:	f04f 0520 	mov.w	r5, #32
   14d72:	f3ef 8c11 	mrs	ip, BASEPRI
   14d76:	f385 8812 	msr	BASEPRI_MAX, r5
   14d7a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14d7e:	260c      	movs	r6, #12
   14d80:	fb06 4601 	mla	r6, r6, r1, r4
   14d84:	6cb5      	ldr	r5, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   14d86:	f005 0e07 	and.w	lr, r5, #7
   14d8a:	f1be 0f01 	cmp.w	lr, #1
   14d8e:	d111      	bne.n	14db4 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   14d90:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   14d92:	2500      	movs	r5, #0
	__asm__ volatile(
   14d94:	f38c 8811 	msr	BASEPRI, ip
   14d98:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   14d9c:	b945      	cbnz	r5, 14db0 <async_start+0x4a>
	subdata->cb = cb;
   14d9e:	260c      	movs	r6, #12
   14da0:	fb06 4401 	mla	r4, r6, r1, r4
	subdata->user_data = user_data;
   14da4:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   14da8:	6843      	ldr	r3, [r0, #4]
   14daa:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   14dae:	4798      	blx	r3
}
   14db0:	4628      	mov	r0, r5
   14db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   14db4:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   14db8:	42af      	cmp	r7, r5
   14dba:	bf14      	ite	ne
   14dbc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   14dc0:	f06f 0577 	mvneq.w	r5, #119	; 0x77
   14dc4:	e7e6      	b.n	14d94 <async_start+0x2e>

00014dc6 <api_start>:
{
   14dc6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   14dc8:	2480      	movs	r4, #128	; 0x80
   14dca:	9400      	str	r4, [sp, #0]
   14dcc:	f7ff ffcb 	bl	14d66 <async_start>
}
   14dd0:	b002      	add	sp, #8
   14dd2:	bd10      	pop	{r4, pc}

00014dd4 <onoff_started_callback>:
	return &data->mgr[type];
   14dd4:	6900      	ldr	r0, [r0, #16]
   14dd6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   14dd8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   14ddc:	2100      	movs	r1, #0
   14dde:	4710      	bx	r2

00014de0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14de0:	2000      	movs	r0, #0
   14de2:	f000 bad3 	b.w	1538c <nrfx_clock_start>

00014de6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14de6:	2000      	movs	r0, #0
   14de8:	f000 bb0d 	b.w	15406 <nrfx_clock_stop>

00014dec <blocking_start_callback>:
{
   14dec:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14dee:	f7f9 b979 	b.w	e0e4 <z_impl_k_sem_give>

00014df2 <uart_poll_out>:
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   14df2:	6883      	ldr	r3, [r0, #8]
   14df4:	685b      	ldr	r3, [r3, #4]
   14df6:	4718      	bx	r3

00014df8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14df8:	6843      	ldr	r3, [r0, #4]
   14dfa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   14dfc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   14e00:	600b      	str	r3, [r1, #0]
}
   14e02:	2000      	movs	r0, #0
   14e04:	4770      	bx	lr

00014e06 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14e06:	6843      	ldr	r3, [r0, #4]
   14e08:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   14e0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   14e0e:	4042      	eors	r2, r0
   14e10:	400a      	ands	r2, r1
   14e12:	4042      	eors	r2, r0
    p_reg->OUT = value;
   14e14:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   14e18:	2000      	movs	r0, #0
   14e1a:	4770      	bx	lr

00014e1c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14e1c:	6843      	ldr	r3, [r0, #4]
   14e1e:	685b      	ldr	r3, [r3, #4]
}
   14e20:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   14e22:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   14e26:	4770      	bx	lr

00014e28 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14e28:	6843      	ldr	r3, [r0, #4]
   14e2a:	685b      	ldr	r3, [r3, #4]
}
   14e2c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   14e2e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   14e32:	4770      	bx	lr

00014e34 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14e34:	6843      	ldr	r3, [r0, #4]
   14e36:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   14e38:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   14e3c:	4059      	eors	r1, r3
    p_reg->OUT = value;
   14e3e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   14e42:	2000      	movs	r0, #0
   14e44:	4770      	bx	lr

00014e46 <gpio_nrfx_manage_callback>:
	return port->data;
   14e46:	6903      	ldr	r3, [r0, #16]
	return list->head;
   14e48:	6858      	ldr	r0, [r3, #4]
{
   14e4a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   14e4c:	b158      	cbz	r0, 14e66 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14e4e:	2400      	movs	r4, #0
   14e50:	4281      	cmp	r1, r0
   14e52:	d112      	bne.n	14e7a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   14e54:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   14e56:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   14e58:	b954      	cbnz	r4, 14e70 <gpio_nrfx_manage_callback+0x2a>
   14e5a:	428d      	cmp	r5, r1
	list->head = node;
   14e5c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   14e5e:	d100      	bne.n	14e62 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   14e60:	6098      	str	r0, [r3, #8]
	parent->next = child;
   14e62:	2000      	movs	r0, #0
   14e64:	6008      	str	r0, [r1, #0]
	if (set) {
   14e66:	b96a      	cbnz	r2, 14e84 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   14e68:	2000      	movs	r0, #0
}
   14e6a:	bd30      	pop	{r4, r5, pc}
   14e6c:	4628      	mov	r0, r5
   14e6e:	e7ef      	b.n	14e50 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   14e70:	428d      	cmp	r5, r1
	parent->next = child;
   14e72:	6020      	str	r0, [r4, #0]
	list->tail = node;
   14e74:	bf08      	it	eq
   14e76:	609c      	streq	r4, [r3, #8]
}
   14e78:	e7f3      	b.n	14e62 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   14e7a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14e7c:	4604      	mov	r4, r0
   14e7e:	2d00      	cmp	r5, #0
   14e80:	d1f4      	bne.n	14e6c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   14e82:	b13a      	cbz	r2, 14e94 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   14e84:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   14e86:	685a      	ldr	r2, [r3, #4]
   14e88:	600a      	str	r2, [r1, #0]
	list->head = node;
   14e8a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   14e8c:	2800      	cmp	r0, #0
   14e8e:	d1eb      	bne.n	14e68 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   14e90:	6099      	str	r1, [r3, #8]
}
   14e92:	e7ea      	b.n	14e6a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   14e94:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14e98:	e7e7      	b.n	14e6a <gpio_nrfx_manage_callback+0x24>

00014e9a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   14e9a:	6902      	ldr	r2, [r0, #16]
{
   14e9c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   14e9e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   14ea2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   14ea6:	2000      	movs	r0, #0
   14ea8:	4770      	bx	lr

00014eaa <uarte_nrfx_err_check>:
	return config->uarte_regs;
   14eaa:	6843      	ldr	r3, [r0, #4]
   14eac:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14eae:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14eb2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   14eb6:	4770      	bx	lr

00014eb8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   14eb8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   14eba:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   14ebc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ebe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14ec2:	b148      	cbz	r0, 14ed8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   14ec4:	7d52      	ldrb	r2, [r2, #21]
   14ec6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ec8:	2000      	movs	r0, #0
   14eca:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   14ece:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ed2:	2201      	movs	r2, #1
   14ed4:	601a      	str	r2, [r3, #0]
	return 0;
   14ed6:	4770      	bx	lr
		return -1;
   14ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14edc:	4770      	bx	lr

00014ede <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14ede:	2a00      	cmp	r2, #0
   14ee0:	dd0f      	ble.n	14f02 <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
   14ee2:	6843      	ldr	r3, [r0, #4]
   14ee4:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ee6:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14eea:	b153      	cbz	r3, 14f02 <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = dev->data;
   14eec:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14eee:	2000      	movs	r0, #0
   14ef0:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   14ef4:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   14ef8:	7d5b      	ldrb	r3, [r3, #21]
   14efa:	700b      	strb	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14efc:	2001      	movs	r0, #1
   14efe:	6010      	str	r0, [r2, #0]
}
   14f00:	4770      	bx	lr
	int num_rx = 0;
   14f02:	2000      	movs	r0, #0
   14f04:	4770      	bx	lr

00014f06 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   14f06:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   14f08:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   14f0a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   14f0c:	f04f 0020 	mov.w	r0, #32
   14f10:	f3ef 8311 	mrs	r3, BASEPRI
   14f14:	f380 8812 	msr	BASEPRI_MAX, r0
   14f18:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   14f1c:	68c9      	ldr	r1, [r1, #12]
   14f1e:	2000      	movs	r0, #0
   14f20:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   14f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14f26:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   14f2a:	f383 8811 	msr	BASEPRI, r3
   14f2e:	f3bf 8f6f 	isb	sy
}
   14f32:	4770      	bx	lr

00014f34 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   14f34:	6903      	ldr	r3, [r0, #16]
   14f36:	68db      	ldr	r3, [r3, #12]
   14f38:	2201      	movs	r2, #1
   14f3a:	739a      	strb	r2, [r3, #14]
}
   14f3c:	4770      	bx	lr

00014f3e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   14f3e:	6903      	ldr	r3, [r0, #16]
   14f40:	68db      	ldr	r3, [r3, #12]
   14f42:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14f44:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   14f48:	b962      	cbnz	r2, 14f64 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   14f4a:	6842      	ldr	r2, [r0, #4]
   14f4c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f4e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   14f52:	b140      	cbz	r0, 14f66 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   14f54:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   14f58:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   14f5c:	d003      	beq.n	14f66 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   14f5e:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14f60:	2001      	movs	r0, #1
   14f62:	4770      	bx	lr
   14f64:	2000      	movs	r0, #0
}
   14f66:	4770      	bx	lr

00014f68 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   14f68:	6843      	ldr	r3, [r0, #4]
   14f6a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f6c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   14f70:	3800      	subs	r0, #0
   14f72:	bf18      	it	ne
   14f74:	2001      	movne	r0, #1
   14f76:	4770      	bx	lr

00014f78 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   14f78:	6843      	ldr	r3, [r0, #4]
   14f7a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14f7c:	2210      	movs	r2, #16
   14f7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14f82:	4770      	bx	lr

00014f84 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   14f84:	6843      	ldr	r3, [r0, #4]
   14f86:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   14f88:	2210      	movs	r2, #16
   14f8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   14f8e:	4770      	bx	lr

00014f90 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   14f90:	6843      	ldr	r3, [r0, #4]
   14f92:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14f94:	f44f 7200 	mov.w	r2, #512	; 0x200
   14f98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14f9c:	4770      	bx	lr

00014f9e <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   14f9e:	6843      	ldr	r3, [r0, #4]
   14fa0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   14fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
   14fa6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   14faa:	4770      	bx	lr

00014fac <uarte_nrfx_irq_update>:
}
   14fac:	2001      	movs	r0, #1
   14fae:	4770      	bx	lr

00014fb0 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   14fb0:	6903      	ldr	r3, [r0, #16]
   14fb2:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   14fb4:	e9c3 1200 	strd	r1, r2, [r3]
}
   14fb8:	4770      	bx	lr

00014fba <uarte_nrfx_irq_is_pending>:
{
   14fba:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   14fbc:	6843      	ldr	r3, [r0, #4]
   14fbe:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   14fc0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   14fc4:	025b      	lsls	r3, r3, #9
{
   14fc6:	4604      	mov	r4, r0
		||
   14fc8:	d405      	bmi.n	14fd6 <uarte_nrfx_irq_is_pending+0x1c>
   14fca:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   14fce:	f010 0010 	ands.w	r0, r0, #16
   14fd2:	d106      	bne.n	14fe2 <uarte_nrfx_irq_is_pending+0x28>
}
   14fd4:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   14fd6:	f7ff ffb2 	bl	14f3e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   14fda:	2800      	cmp	r0, #0
   14fdc:	d0f5      	beq.n	14fca <uarte_nrfx_irq_is_pending+0x10>
		||
   14fde:	2001      	movs	r0, #1
   14fe0:	e7f8      	b.n	14fd4 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   14fe2:	4620      	mov	r0, r4
   14fe4:	f7ff ffc0 	bl	14f68 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   14fe8:	3800      	subs	r0, #0
   14fea:	bf18      	it	ne
   14fec:	2001      	movne	r0, #1
   14fee:	e7f1      	b.n	14fd4 <uarte_nrfx_irq_is_pending+0x1a>

00014ff0 <tx_start.isra.0>:
	return config->uarte_regs;
   14ff0:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14ff2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14ff6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ffa:	2200      	movs	r2, #0
   14ffc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15000:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   15004:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   15008:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1500c:	6842      	ldr	r2, [r0, #4]
   1500e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15010:	bf41      	itttt	mi
   15012:	2208      	movmi	r2, #8
   15014:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   15018:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1501c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15020:	2201      	movs	r2, #1
   15022:	609a      	str	r2, [r3, #8]
}
   15024:	4770      	bx	lr

00015026 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   15026:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15028:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1502c:	b943      	cbnz	r3, 15040 <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1502e:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   15030:	0789      	lsls	r1, r1, #30
   15032:	d407      	bmi.n	15044 <is_tx_ready.isra.0+0x1e>
   15034:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   15038:	3800      	subs	r0, #0
   1503a:	bf18      	it	ne
   1503c:	2001      	movne	r0, #1
   1503e:	4770      	bx	lr
   15040:	2001      	movs	r0, #1
   15042:	4770      	bx	lr
   15044:	4618      	mov	r0, r3
}
   15046:	4770      	bx	lr

00015048 <uarte_nrfx_fifo_fill>:
{
   15048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1504a:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   1504c:	68f3      	ldr	r3, [r6, #12]
   1504e:	899c      	ldrh	r4, [r3, #12]
   15050:	f3bf 8f5b 	dmb	ish
   15054:	4294      	cmp	r4, r2
   15056:	bfa8      	it	ge
   15058:	4614      	movge	r4, r2
{
   1505a:	4605      	mov	r5, r0
   1505c:	3310      	adds	r3, #16
   1505e:	2201      	movs	r2, #1
   15060:	e853 0f00 	ldrex	r0, [r3]
   15064:	2800      	cmp	r0, #0
   15066:	d103      	bne.n	15070 <uarte_nrfx_fifo_fill+0x28>
   15068:	e843 2700 	strex	r7, r2, [r3]
   1506c:	2f00      	cmp	r7, #0
   1506e:	d1f7      	bne.n	15060 <uarte_nrfx_fifo_fill+0x18>
   15070:	f3bf 8f5b 	dmb	ish
   15074:	bf0c      	ite	eq
   15076:	4613      	moveq	r3, r2
   15078:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1507a:	d01d      	beq.n	150b8 <uarte_nrfx_fifo_fill+0x70>
		return 0;
   1507c:	461c      	mov	r4, r3
}
   1507e:	4620      	mov	r0, r4
   15080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   15082:	68f2      	ldr	r2, [r6, #12]
   15084:	5cc8      	ldrb	r0, [r1, r3]
   15086:	6892      	ldr	r2, [r2, #8]
   15088:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   1508a:	3301      	adds	r3, #1
   1508c:	42a3      	cmp	r3, r4
   1508e:	dbf8      	blt.n	15082 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   15090:	f04f 0320 	mov.w	r3, #32
   15094:	f3ef 8711 	mrs	r7, BASEPRI
   15098:	f383 8812 	msr	BASEPRI_MAX, r3
   1509c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   150a0:	6868      	ldr	r0, [r5, #4]
   150a2:	f7ff ffc0 	bl	15026 <is_tx_ready.isra.0>
   150a6:	68f3      	ldr	r3, [r6, #12]
   150a8:	b940      	cbnz	r0, 150bc <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   150aa:	6118      	str	r0, [r3, #16]
		len = 0;
   150ac:	4604      	mov	r4, r0
	__asm__ volatile(
   150ae:	f387 8811 	msr	BASEPRI, r7
   150b2:	f3bf 8f6f 	isb	sy
	return len;
   150b6:	e7e2      	b.n	1507e <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   150b8:	2300      	movs	r3, #0
   150ba:	e7e7      	b.n	1508c <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   150bc:	6899      	ldr	r1, [r3, #8]
   150be:	6868      	ldr	r0, [r5, #4]
   150c0:	4622      	mov	r2, r4
   150c2:	f7ff ff95 	bl	14ff0 <tx_start.isra.0>
   150c6:	e7f2      	b.n	150ae <uarte_nrfx_fifo_fill+0x66>

000150c8 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   150c8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   150ca:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   150cc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   150d0:	05c9      	lsls	r1, r1, #23
{
   150d2:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   150d4:	d518      	bpl.n	15108 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150d6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   150da:	b1a9      	cbz	r1, 15108 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   150dc:	f04f 0420 	mov.w	r4, #32
   150e0:	f3ef 8111 	mrs	r1, BASEPRI
   150e4:	f384 8812 	msr	BASEPRI_MAX, r4
   150e8:	f3bf 8f6f 	isb	sy
   150ec:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   150f0:	b134      	cbz	r4, 15100 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   150f2:	2400      	movs	r4, #0
   150f4:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   150f8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   150fc:	2401      	movs	r4, #1
   150fe:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   15100:	f381 8811 	msr	BASEPRI, r1
   15104:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15108:	6852      	ldr	r2, [r2, #4]
   1510a:	06d2      	lsls	r2, r2, #27
   1510c:	d51a      	bpl.n	15144 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   1510e:	f04f 0220 	mov.w	r2, #32
   15112:	f3ef 8111 	mrs	r1, BASEPRI
   15116:	f382 8812 	msr	BASEPRI_MAX, r2
   1511a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1511e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   15122:	b112      	cbz	r2, 1512a <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15124:	2200      	movs	r2, #0
   15126:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1512a:	6902      	ldr	r2, [r0, #16]
   1512c:	68d2      	ldr	r2, [r2, #12]
   1512e:	b10a      	cbz	r2, 15134 <uarte_nrfx_isr_int+0x6c>
   15130:	6912      	ldr	r2, [r2, #16]
   15132:	b91a      	cbnz	r2, 1513c <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   15134:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   15138:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1513c:	f381 8811 	msr	BASEPRI, r1
   15140:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   15144:	6902      	ldr	r2, [r0, #16]
   15146:	68d2      	ldr	r2, [r2, #12]
   15148:	b15a      	cbz	r2, 15162 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1514a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1514e:	b159      	cbz	r1, 15168 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   15150:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   15152:	2100      	movs	r1, #0
   15154:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   15156:	b13c      	cbz	r4, 15168 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   15158:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1515c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   15160:	7391      	strb	r1, [r2, #14]
}
   15162:	f85d 4b04 	ldr.w	r4, [sp], #4
   15166:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15168:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1516c:	b121      	cbz	r1, 15178 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1516e:	2100      	movs	r1, #0
   15170:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   15174:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   15178:	6813      	ldr	r3, [r2, #0]
   1517a:	2b00      	cmp	r3, #0
   1517c:	d0f1      	beq.n	15162 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1517e:	6851      	ldr	r1, [r2, #4]
}
   15180:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   15184:	4718      	bx	r3

00015186 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   15186:	b510      	push	{r4, lr}
   15188:	2200      	movs	r2, #0
   1518a:	4604      	mov	r4, r0
   1518c:	2101      	movs	r1, #1
   1518e:	2028      	movs	r0, #40	; 0x28
   15190:	f7f6 fbfc 	bl	b98c <z_arm_irq_priority_set>
   15194:	2028      	movs	r0, #40	; 0x28
   15196:	f7f6 fbdb 	bl	b950 <arch_irq_enable>
   1519a:	4620      	mov	r0, r4
   1519c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   151a0:	f7f7 bc1e 	b.w	c9e0 <uarte_instance_init.constprop.0>

000151a4 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   151a4:	b510      	push	{r4, lr}
   151a6:	2200      	movs	r2, #0
   151a8:	4604      	mov	r4, r0
   151aa:	2101      	movs	r1, #1
   151ac:	2002      	movs	r0, #2
   151ae:	f7f6 fbed 	bl	b98c <z_arm_irq_priority_set>
   151b2:	2002      	movs	r0, #2
   151b4:	f7f6 fbcc 	bl	b950 <arch_irq_enable>
   151b8:	4620      	mov	r0, r4
   151ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   151be:	f7f7 bc0f 	b.w	c9e0 <uarte_instance_init.constprop.0>

000151c2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   151c2:	4770      	bx	lr

000151c4 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   151c4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   151c6:	6843      	ldr	r3, [r0, #4]
   151c8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   151ca:	7a03      	ldrb	r3, [r0, #8]
   151cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   151d0:	3b01      	subs	r3, #1
   151d2:	00db      	lsls	r3, r3, #3
   151d4:	6845      	ldr	r5, [r0, #4]
   151d6:	6814      	ldr	r4, [r2, #0]
   151d8:	441d      	add	r5, r3
   151da:	42ac      	cmp	r4, r5
   151dc:	d902      	bls.n	151e4 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   151de:	f06f 0001 	mvn.w	r0, #1
}
   151e2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   151e4:	7965      	ldrb	r5, [r4, #5]
   151e6:	428d      	cmp	r5, r1
   151e8:	d002      	beq.n	151f0 <pinctrl_lookup_state+0x2c>
		(*state)++;
   151ea:	3408      	adds	r4, #8
   151ec:	6014      	str	r4, [r2, #0]
   151ee:	e7f1      	b.n	151d4 <pinctrl_lookup_state+0x10>
			return 0;
   151f0:	2000      	movs	r0, #0
   151f2:	e7f6      	b.n	151e2 <pinctrl_lookup_state+0x1e>

000151f4 <nrf_gpio_pin_write>:
    if (value == 0)
   151f4:	b909      	cbnz	r1, 151fa <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   151f6:	f7f7 bf05 	b.w	d004 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   151fa:	f7f7 bf33 	b.w	d064 <nrf_gpio_pin_set>

000151fe <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   151fe:	b570      	push	{r4, r5, r6, lr}
   15200:	4615      	mov	r5, r2
   15202:	4604      	mov	r4, r0
   15204:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   15208:	42a6      	cmp	r6, r4
   1520a:	d101      	bne.n	15210 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   1520c:	2000      	movs	r0, #0
}
   1520e:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   15210:	6823      	ldr	r3, [r4, #0]
   15212:	0c1a      	lsrs	r2, r3, #16
   15214:	2a22      	cmp	r2, #34	; 0x22
   15216:	f200 808e 	bhi.w	15336 <pinctrl_configure_pins+0x138>
   1521a:	e8df f002 	tbb	[pc, r2]
   1521e:	1d12      	.short	0x1d12
   15220:	39294324 	.word	0x39294324
   15224:	8c8c8c43 	.word	0x8c8c8c43
   15228:	8c4d488c 	.word	0x8c4d488c
   1522c:	8c8c8c8c 	.word	0x8c8c8c8c
   15230:	8c8c8c8c 	.word	0x8c8c8c8c
   15234:	68635e52 	.word	0x68635e52
   15238:	6d8c8c8c 	.word	0x6d8c8c8c
   1523c:	827d7873 	.word	0x827d7873
   15240:	87          	.byte	0x87
   15241:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   15242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15246:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   1524a:	6820      	ldr	r0, [r4, #0]
   1524c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15250:	f7f7 ff08 	bl	d064 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   15254:	2201      	movs	r2, #1
   15256:	e015      	b.n	15284 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   15258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1525c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15260:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15262:	2100      	movs	r1, #0
   15264:	e00f      	b.n	15286 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   15266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1526a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   1526e:	e7ec      	b.n	1524a <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   15270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15274:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   15278:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   1527a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1527e:	f7f7 fec1 	bl	d004 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   15282:	2200      	movs	r2, #0
   15284:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15286:	6820      	ldr	r0, [r4, #0]
   15288:	f7f7 fecc 	bl	d024 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1528c:	3404      	adds	r4, #4
   1528e:	e7bb      	b.n	15208 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   15290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15294:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   15298:	6820      	ldr	r0, [r4, #0]
   1529a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1529e:	f7f7 feb1 	bl	d004 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   152a2:	e7d7      	b.n	15254 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   152a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   152a8:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   152ac:	e7d8      	b.n	15260 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   152ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   152b2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   152b6:	e7d3      	b.n	15260 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   152b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   152bc:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   152c0:	e7ce      	b.n	15260 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   152c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   152c6:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   152ca:	6820      	ldr	r0, [r4, #0]
   152cc:	f3c0 3140 	ubfx	r1, r0, #13, #1
   152d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   152d4:	f7ff ff8e 	bl	151f4 <nrf_gpio_pin_write>
   152d8:	e7bc      	b.n	15254 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   152da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   152de:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   152e2:	e7f2      	b.n	152ca <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   152e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   152e8:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   152ec:	e7ed      	b.n	152ca <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   152ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   152f2:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   152f6:	e7e8      	b.n	152ca <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   152f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   152fc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15300:	2201      	movs	r2, #1
   15302:	e7ae      	b.n	15262 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   15304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15308:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1530c:	e7f8      	b.n	15300 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   1530e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15312:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15316:	e7f3      	b.n	15300 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   15318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1531c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   15320:	e7ee      	b.n	15300 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   15322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15326:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1532a:	e7e9      	b.n	15300 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   1532c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15330:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
   15334:	e7e4      	b.n	15300 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   15336:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1533a:	e768      	b.n	1520e <pinctrl_configure_pins+0x10>

0001533c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1533c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1533e:	2000      	movs	r0, #0
   15340:	f7f6 ff92 	bl	c268 <sys_arch_reboot>

00015344 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   15344:	f7fb be6e 	b.w	11024 <nrf_cc3xx_platform_init_no_rng>

00015348 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   15348:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1534a:	f7f6 fa19 	bl	b780 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1534e:	f7f6 facb 	bl	b8e8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   15352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   15356:	f7fb be65 	b.w	11024 <nrf_cc3xx_platform_init_no_rng>

0001535a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1535a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1535e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   15362:	f1a0 0308 	sub.w	r3, r0, #8
   15366:	4258      	negs	r0, r3
   15368:	4158      	adcs	r0, r3
   1536a:	4770      	bx	lr

0001536c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1536c:	4700      	bx	r0

0001536e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1536e:	f000 ba1e 	b.w	157ae <z_impl_k_busy_wait>

00015372 <nrfx_clock_enable>:
{
   15372:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15374:	2000      	movs	r0, #0
   15376:	f7f6 fafb 	bl	b970 <arch_irq_is_enabled>
   1537a:	b908      	cbnz	r0, 15380 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1537c:	f7f6 fae8 	bl	b950 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15384:	2200      	movs	r2, #0
   15386:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1538a:	bd08      	pop	{r3, pc}

0001538c <nrfx_clock_start>:
{
   1538c:	b508      	push	{r3, lr}
    switch (domain)
   1538e:	b110      	cbz	r0, 15396 <nrfx_clock_start+0xa>
   15390:	2801      	cmp	r0, #1
   15392:	d02d      	beq.n	153f0 <nrfx_clock_start+0x64>
}
   15394:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1539a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1539e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   153a2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   153a6:	d10b      	bne.n	153c0 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   153a8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   153ac:	07c9      	lsls	r1, r1, #31
   153ae:	d510      	bpl.n	153d2 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   153b0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
   153b4:	079b      	lsls	r3, r3, #30
   153b6:	d408      	bmi.n	153ca <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
   153b8:	2302      	movs	r3, #2
   153ba:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   153be:	e7e9      	b.n	15394 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   153c0:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   153c4:	2b01      	cmp	r3, #1
   153c6:	d004      	beq.n	153d2 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
   153c8:	b11b      	cbz	r3, 153d2 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   153ca:	2000      	movs	r0, #0
   153cc:	f7f7 ffb0 	bl	d330 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   153d0:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   153d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   153d6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   153da:	2300      	movs	r3, #0
   153dc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   153e0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   153e4:	2302      	movs	r3, #2
   153e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   153ea:	2301      	movs	r3, #1
   153ec:	6093      	str	r3, [r2, #8]
}
   153ee:	e7d1      	b.n	15394 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   153f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   153f4:	2200      	movs	r2, #0
   153f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   153fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   153fe:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15402:	6018      	str	r0, [r3, #0]
}
   15404:	e7c6      	b.n	15394 <nrfx_clock_start+0x8>

00015406 <nrfx_clock_stop>:
    clock_stop(domain);
   15406:	f7f7 bf93 	b.w	d330 <clock_stop>

0001540a <nrf_gpio_reconfigure>:
{
   1540a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1540c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1540e:	a801      	add	r0, sp, #4
{
   15410:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   15414:	4617      	mov	r7, r2
   15416:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15418:	f7f8 f822 	bl	d460 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1541c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1541e:	2f00      	cmp	r7, #0
   15420:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15424:	bf14      	ite	ne
   15426:	2302      	movne	r3, #2
   15428:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1542a:	2900      	cmp	r1, #0
   1542c:	bf18      	it	ne
   1542e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   15432:	2d00      	cmp	r5, #0
   15434:	bf14      	ite	ne
   15436:	f04f 0c0c 	movne.w	ip, #12
   1543a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1543e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   15440:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   15444:	bf14      	ite	ne
   15446:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   1544a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1544e:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   15450:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   15454:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   15458:	bf14      	ite	ne
   1545a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1545e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   15462:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   15466:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1546a:	b101      	cbz	r1, 1546e <nrf_gpio_reconfigure+0x64>
   1546c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1546e:	b10f      	cbz	r7, 15474 <nrf_gpio_reconfigure+0x6a>
   15470:	783f      	ldrb	r7, [r7, #0]
   15472:	007f      	lsls	r7, r7, #1
   15474:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   15476:	b10d      	cbz	r5, 1547c <nrf_gpio_reconfigure+0x72>
   15478:	782d      	ldrb	r5, [r5, #0]
   1547a:	00ad      	lsls	r5, r5, #2
   1547c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1547e:	b10c      	cbz	r4, 15484 <nrf_gpio_reconfigure+0x7a>
   15480:	7822      	ldrb	r2, [r4, #0]
   15482:	0214      	lsls	r4, r2, #8
   15484:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   15486:	b10e      	cbz	r6, 1548c <nrf_gpio_reconfigure+0x82>
   15488:	7836      	ldrb	r6, [r6, #0]
   1548a:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1548c:	432c      	orrs	r4, r5
   1548e:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   15490:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   15494:	b003      	add	sp, #12
   15496:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015498 <nrf_gpio_cfg_sense_set>:
{
   15498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1549a:	f10d 030f 	add.w	r3, sp, #15
   1549e:	9301      	str	r3, [sp, #4]
   154a0:	2300      	movs	r3, #0
{
   154a2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   154a6:	9300      	str	r3, [sp, #0]
   154a8:	461a      	mov	r2, r3
   154aa:	4619      	mov	r1, r3
   154ac:	f7ff ffad 	bl	1540a <nrf_gpio_reconfigure>
}
   154b0:	b005      	add	sp, #20
   154b2:	f85d fb04 	ldr.w	pc, [sp], #4

000154b6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   154b6:	f7f8 bb3b 	b.w	db30 <_DoInit>

000154ba <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   154ba:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   154bc:	f7ff fffb 	bl	154b6 <SEGGER_RTT_Init>

	return 0;
}
   154c0:	2000      	movs	r0, #0
   154c2:	bd08      	pop	{r3, pc}

000154c4 <z_device_state_init>:
}
   154c4:	4770      	bx	lr

000154c6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   154c6:	b138      	cbz	r0, 154d8 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   154c8:	68c3      	ldr	r3, [r0, #12]
   154ca:	8818      	ldrh	r0, [r3, #0]
   154cc:	f3c0 0008 	ubfx	r0, r0, #0, #9
   154d0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   154d4:	4258      	negs	r0, r3
   154d6:	4158      	adcs	r0, r3
}
   154d8:	4770      	bx	lr

000154da <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   154da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   154dc:	4605      	mov	r5, r0
   154de:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   154e0:	f04f 0320 	mov.w	r3, #32
   154e4:	f3ef 8611 	mrs	r6, BASEPRI
   154e8:	f383 8812 	msr	BASEPRI_MAX, r3
   154ec:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   154f0:	f7f9 f932 	bl	e758 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   154f4:	9901      	ldr	r1, [sp, #4]
   154f6:	4604      	mov	r4, r0
   154f8:	4628      	mov	r0, r5
   154fa:	f7ff ff1f 	bl	1533c <k_sys_fatal_error_handler>
	__asm__ volatile(
   154fe:	f386 8811 	msr	BASEPRI, r6
   15502:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15506:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15508:	b002      	add	sp, #8
   1550a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1550e:	f7f6 bd4b 	b.w	bfa8 <z_impl_k_thread_abort>

00015512 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   15512:	f000 ba52 	b.w	159ba <memset>

00015516 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15516:	f000 ba28 	b.w	1596a <memcpy>

0001551a <k_mem_slab_init>:
{
   1551a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1551c:	2400      	movs	r4, #0
   1551e:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   15520:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15522:	ea41 0402 	orr.w	r4, r1, r2
   15526:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1552a:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   1552e:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15530:	d10c      	bne.n	1554c <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   15532:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15534:	42a3      	cmp	r3, r4
   15536:	d103      	bne.n	15540 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   15538:	e9c0 0000 	strd	r0, r0, [r0]
}
   1553c:	2000      	movs	r0, #0
}
   1553e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   15540:	6985      	ldr	r5, [r0, #24]
   15542:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   15544:	3401      	adds	r4, #1
		slab->free_list = p;
   15546:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   15548:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1554a:	e7f3      	b.n	15534 <k_mem_slab_init+0x1a>
		return -EINVAL;
   1554c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   15550:	e7f5      	b.n	1553e <k_mem_slab_init+0x24>

00015552 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   15552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15554:	4604      	mov	r4, r0
   15556:	460d      	mov	r5, r1
	__asm__ volatile(
   15558:	f04f 0320 	mov.w	r3, #32
   1555c:	f3ef 8611 	mrs	r6, BASEPRI
   15560:	f383 8812 	msr	BASEPRI_MAX, r3
   15564:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   15568:	6987      	ldr	r7, [r0, #24]
   1556a:	b977      	cbnz	r7, 1558a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1556c:	f000 f8c0 	bl	156f0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   15570:	b158      	cbz	r0, 1558a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   15572:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   15574:	6142      	str	r2, [r0, #20]
   15576:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   15578:	f000 f85e 	bl	15638 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1557c:	4631      	mov	r1, r6
   1557e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   15582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   15586:	f7f8 be3b 	b.w	e200 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1558a:	682b      	ldr	r3, [r5, #0]
   1558c:	69a2      	ldr	r2, [r4, #24]
   1558e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   15590:	682b      	ldr	r3, [r5, #0]
   15592:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   15594:	69e3      	ldr	r3, [r4, #28]
   15596:	3b01      	subs	r3, #1
   15598:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1559a:	f386 8811 	msr	BASEPRI, r6
   1559e:	f3bf 8f6f 	isb	sy
}
   155a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000155a4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   155a4:	f3ef 8005 	mrs	r0, IPSR
}
   155a8:	3800      	subs	r0, #0
   155aa:	bf18      	it	ne
   155ac:	2001      	movne	r0, #1
   155ae:	4770      	bx	lr

000155b0 <z_pm_save_idle_exit>:
{
   155b0:	b508      	push	{r3, lr}
	pm_system_resume();
   155b2:	f7f5 ffcd 	bl	b550 <pm_system_resume>
}
   155b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   155ba:	f7ff be02 	b.w	151c2 <sys_clock_idle_exit>

000155be <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   155be:	f990 300e 	ldrsb.w	r3, [r0, #14]
   155c2:	428b      	cmp	r3, r1
   155c4:	d001      	beq.n	155ca <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   155c6:	f7f8 bf83 	b.w	e4d0 <z_set_prio>
}
   155ca:	2000      	movs	r0, #0
   155cc:	4770      	bx	lr

000155ce <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   155ce:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
   155d0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   155d4:	e9c0 0000 	strd	r0, r0, [r0]
}
   155d8:	4618      	mov	r0, r3
   155da:	4770      	bx	lr

000155dc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   155dc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   155e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   155e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   155e4:	2300      	movs	r3, #0
	node->prev = NULL;
   155e6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   155ea:	4770      	bx	lr

000155ec <unpend_thread_no_timeout>:
{
   155ec:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   155ee:	f7ff fff5 	bl	155dc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   155f2:	7b43      	ldrb	r3, [r0, #13]
   155f4:	f023 0302 	bic.w	r3, r3, #2
   155f8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   155fa:	2300      	movs	r3, #0
   155fc:	6083      	str	r3, [r0, #8]
}
   155fe:	bd08      	pop	{r3, pc}

00015600 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15600:	4603      	mov	r3, r0
   15602:	b920      	cbnz	r0, 1560e <z_reschedule_irqlock+0xe>
   15604:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   15608:	b90a      	cbnz	r2, 1560e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1560a:	f7f6 ba09 	b.w	ba20 <arch_swap>
   1560e:	f383 8811 	msr	BASEPRI, r3
   15612:	f3bf 8f6f 	isb	sy
}
   15616:	4770      	bx	lr

00015618 <z_reschedule_unlocked>:
	__asm__ volatile(
   15618:	f04f 0320 	mov.w	r3, #32
   1561c:	f3ef 8011 	mrs	r0, BASEPRI
   15620:	f383 8812 	msr	BASEPRI_MAX, r3
   15624:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15628:	f7ff bfea 	b.w	15600 <z_reschedule_irqlock>

0001562c <z_priq_dumb_best>:
	return list->head == list;
   1562c:	6803      	ldr	r3, [r0, #0]
}
   1562e:	4298      	cmp	r0, r3
   15630:	bf14      	ite	ne
   15632:	4618      	movne	r0, r3
   15634:	2000      	moveq	r0, #0
   15636:	4770      	bx	lr

00015638 <z_ready_thread>:
{
   15638:	b510      	push	{r4, lr}
   1563a:	f04f 0320 	mov.w	r3, #32
   1563e:	f3ef 8411 	mrs	r4, BASEPRI
   15642:	f383 8812 	msr	BASEPRI_MAX, r3
   15646:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1564a:	f7f8 fe9b 	bl	e384 <ready_thread>
	__asm__ volatile(
   1564e:	f384 8811 	msr	BASEPRI, r4
   15652:	f3bf 8f6f 	isb	sy
}
   15656:	bd10      	pop	{r4, pc}

00015658 <z_thread_timeout>:
{
   15658:	b510      	push	{r4, lr}
   1565a:	4601      	mov	r1, r0
	__asm__ volatile(
   1565c:	f04f 0320 	mov.w	r3, #32
   15660:	f3ef 8411 	mrs	r4, BASEPRI
   15664:	f383 8812 	msr	BASEPRI_MAX, r3
   15668:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1566c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   15670:	f013 0f28 	tst.w	r3, #40	; 0x28
   15674:	d10d      	bne.n	15692 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   15676:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1567a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1567c:	b10b      	cbz	r3, 15682 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1567e:	f7ff ffb5 	bl	155ec <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   15682:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   15686:	f023 0314 	bic.w	r3, r3, #20
   1568a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1568e:	f7f8 fe79 	bl	e384 <ready_thread>
	__asm__ volatile(
   15692:	f384 8811 	msr	BASEPRI, r4
   15696:	f3bf 8f6f 	isb	sy
}
   1569a:	bd10      	pop	{r4, pc}

0001569c <add_to_waitq_locked>:
{
   1569c:	b538      	push	{r3, r4, r5, lr}
   1569e:	4604      	mov	r4, r0
   156a0:	460d      	mov	r5, r1
	unready_thread(thread);
   156a2:	f7f8 fec3 	bl	e42c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   156a6:	7b63      	ldrb	r3, [r4, #13]
   156a8:	f043 0302 	orr.w	r3, r3, #2
   156ac:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   156ae:	b195      	cbz	r5, 156d6 <add_to_waitq_locked+0x3a>
   156b0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   156b2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   156b4:	429d      	cmp	r5, r3
   156b6:	d015      	beq.n	156e4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   156b8:	b1a3      	cbz	r3, 156e4 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   156ba:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   156be:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   156c2:	4291      	cmp	r1, r2
   156c4:	d008      	beq.n	156d8 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   156c6:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   156c8:	2a00      	cmp	r2, #0
   156ca:	dd05      	ble.n	156d8 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   156cc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   156ce:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   156d2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   156d4:	605c      	str	r4, [r3, #4]
}
   156d6:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   156d8:	686a      	ldr	r2, [r5, #4]
   156da:	4293      	cmp	r3, r2
   156dc:	d002      	beq.n	156e4 <add_to_waitq_locked+0x48>
   156de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   156e0:	2b00      	cmp	r3, #0
   156e2:	d1ec      	bne.n	156be <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   156e4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   156e6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   156ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   156ec:	606c      	str	r4, [r5, #4]
}
   156ee:	e7f2      	b.n	156d6 <add_to_waitq_locked+0x3a>

000156f0 <z_unpend_first_thread>:
{
   156f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   156f2:	f04f 0320 	mov.w	r3, #32
   156f6:	f3ef 8511 	mrs	r5, BASEPRI
   156fa:	f383 8812 	msr	BASEPRI_MAX, r3
   156fe:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   15702:	f7ff ff93 	bl	1562c <z_priq_dumb_best>
		if (thread != NULL) {
   15706:	4604      	mov	r4, r0
   15708:	b120      	cbz	r0, 15714 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1570a:	f7ff ff6f 	bl	155ec <unpend_thread_no_timeout>
   1570e:	3018      	adds	r0, #24
   15710:	f000 f806 	bl	15720 <z_abort_timeout>
	__asm__ volatile(
   15714:	f385 8811 	msr	BASEPRI, r5
   15718:	f3bf 8f6f 	isb	sy
}
   1571c:	4620      	mov	r0, r4
   1571e:	bd38      	pop	{r3, r4, r5, pc}

00015720 <z_abort_timeout>:
{
   15720:	b510      	push	{r4, lr}
	__asm__ volatile(
   15722:	f04f 0220 	mov.w	r2, #32
   15726:	f3ef 8411 	mrs	r4, BASEPRI
   1572a:	f382 8812 	msr	BASEPRI_MAX, r2
   1572e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   15732:	6803      	ldr	r3, [r0, #0]
   15734:	b13b      	cbz	r3, 15746 <z_abort_timeout+0x26>
			remove_timeout(to);
   15736:	f7f9 f8b1 	bl	e89c <remove_timeout>
			ret = 0;
   1573a:	2000      	movs	r0, #0
	__asm__ volatile(
   1573c:	f384 8811 	msr	BASEPRI, r4
   15740:	f3bf 8f6f 	isb	sy
}
   15744:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   15746:	f06f 0015 	mvn.w	r0, #21
   1574a:	e7f7      	b.n	1573c <z_abort_timeout+0x1c>

0001574c <z_get_next_timeout_expiry>:
{
   1574c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1574e:	f04f 0320 	mov.w	r3, #32
   15752:	f3ef 8411 	mrs	r4, BASEPRI
   15756:	f383 8812 	msr	BASEPRI_MAX, r3
   1575a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1575e:	f7f9 f877 	bl	e850 <next_timeout>
	__asm__ volatile(
   15762:	f384 8811 	msr	BASEPRI, r4
   15766:	f3bf 8f6f 	isb	sy
}
   1576a:	bd10      	pop	{r4, pc}

0001576c <z_set_timeout_expiry>:
{
   1576c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1576e:	4604      	mov	r4, r0
   15770:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   15772:	f04f 0320 	mov.w	r3, #32
   15776:	f3ef 8511 	mrs	r5, BASEPRI
   1577a:	f383 8812 	msr	BASEPRI_MAX, r3
   1577e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   15782:	f7f9 f865 	bl	e850 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   15786:	2801      	cmp	r0, #1
   15788:	dd05      	ble.n	15796 <z_set_timeout_expiry+0x2a>
   1578a:	42a0      	cmp	r0, r4
   1578c:	9901      	ldr	r1, [sp, #4]
   1578e:	db02      	blt.n	15796 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   15790:	4620      	mov	r0, r4
   15792:	f7f7 fbfb 	bl	cf8c <sys_clock_set_timeout>
	__asm__ volatile(
   15796:	f385 8811 	msr	BASEPRI, r5
   1579a:	f3bf 8f6f 	isb	sy
}
   1579e:	b003      	add	sp, #12
   157a0:	bd30      	pop	{r4, r5, pc}

000157a2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   157a2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   157a4:	f7f9 f968 	bl	ea78 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   157a8:	bd08      	pop	{r3, pc}

000157aa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   157aa:	f7f9 b965 	b.w	ea78 <sys_clock_tick_get>

000157ae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   157ae:	b108      	cbz	r0, 157b4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   157b0:	f7f6 bd70 	b.w	c294 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   157b4:	4770      	bx	lr

000157b6 <k_heap_init>:
{
   157b6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   157b8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   157bc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   157c0:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   157c4:	f7ff b99a 	b.w	14afc <sys_heap_init>

000157c8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   157c8:	4770      	bx	lr

000157ca <_ZdlPv>:
   157ca:	f7f9 bec9 	b.w	f560 <free>

000157ce <_ZdaPv>:
   157ce:	f7ff bffc 	b.w	157ca <_ZdlPv>

000157d2 <_Znwj>:
   157d2:	2801      	cmp	r0, #1
   157d4:	bf38      	it	cc
   157d6:	2001      	movcc	r0, #1
   157d8:	b510      	push	{r4, lr}
   157da:	4604      	mov	r4, r0
   157dc:	4620      	mov	r0, r4
   157de:	f7f9 feb7 	bl	f550 <malloc>
   157e2:	b930      	cbnz	r0, 157f2 <_Znwj+0x20>
   157e4:	f7f9 f9d0 	bl	eb88 <_ZSt15get_new_handlerv>
   157e8:	b908      	cbnz	r0, 157ee <_Znwj+0x1c>
   157ea:	f000 f8b7 	bl	1595c <abort>
   157ee:	4780      	blx	r0
   157f0:	e7f4      	b.n	157dc <_Znwj+0xa>
   157f2:	bd10      	pop	{r4, pc}

000157f4 <_Znaj>:
   157f4:	f7ff bfed 	b.w	157d2 <_Znwj>

000157f8 <_ZSt19__throw_logic_errorPKc>:
   157f8:	b508      	push	{r3, lr}
   157fa:	f000 f8af 	bl	1595c <abort>

000157fe <_ZSt20__throw_length_errorPKc>:
   157fe:	b508      	push	{r3, lr}
   15800:	f000 f8ac 	bl	1595c <abort>

00015804 <_ZSt24__throw_out_of_range_fmtPKcz>:
   15804:	b40f      	push	{r0, r1, r2, r3}
   15806:	b580      	push	{r7, lr}
   15808:	b084      	sub	sp, #16
   1580a:	af00      	add	r7, sp, #0
   1580c:	f107 0418 	add.w	r4, r7, #24
   15810:	f854 2b04 	ldr.w	r2, [r4], #4
   15814:	607a      	str	r2, [r7, #4]
   15816:	4610      	mov	r0, r2
   15818:	f7eb fbc4 	bl	fa4 <strlen>
   1581c:	f200 2307 	addw	r3, r0, #519	; 0x207
   15820:	f023 0307 	bic.w	r3, r3, #7
   15824:	ebad 0d03 	sub.w	sp, sp, r3
   15828:	f500 7100 	add.w	r1, r0, #512	; 0x200
   1582c:	687a      	ldr	r2, [r7, #4]
   1582e:	60fc      	str	r4, [r7, #12]
   15830:	4623      	mov	r3, r4
   15832:	4668      	mov	r0, sp
   15834:	f000 f802 	bl	1583c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   15838:	f000 f890 	bl	1595c <abort>

0001583c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   1583c:	3901      	subs	r1, #1
   1583e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15842:	4607      	mov	r7, r0
   15844:	4615      	mov	r5, r2
   15846:	eb00 0801 	add.w	r8, r0, r1
   1584a:	4604      	mov	r4, r0
   1584c:	782a      	ldrb	r2, [r5, #0]
   1584e:	b392      	cbz	r2, 158b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   15850:	4544      	cmp	r4, r8
   15852:	d22a      	bcs.n	158aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   15854:	2a25      	cmp	r2, #37	; 0x25
   15856:	d107      	bne.n	15868 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   15858:	786a      	ldrb	r2, [r5, #1]
   1585a:	2a73      	cmp	r2, #115	; 0x73
   1585c:	d009      	beq.n	15872 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   1585e:	2a7a      	cmp	r2, #122	; 0x7a
   15860:	d012      	beq.n	15888 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   15862:	2a25      	cmp	r2, #37	; 0x25
   15864:	d100      	bne.n	15868 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   15866:	3501      	adds	r5, #1
   15868:	f815 2b01 	ldrb.w	r2, [r5], #1
   1586c:	f804 2b01 	strb.w	r2, [r4], #1
   15870:	e7ec      	b.n	1584c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   15872:	f853 2b04 	ldr.w	r2, [r3], #4
   15876:	3a01      	subs	r2, #1
   15878:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   1587c:	b1c9      	cbz	r1, 158b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   1587e:	4544      	cmp	r4, r8
   15880:	d013      	beq.n	158aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   15882:	f804 1b01 	strb.w	r1, [r4], #1
   15886:	e7f7      	b.n	15878 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   15888:	78aa      	ldrb	r2, [r5, #2]
   1588a:	2a75      	cmp	r2, #117	; 0x75
   1588c:	d1ec      	bne.n	15868 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   1588e:	461e      	mov	r6, r3
   15890:	eba8 0104 	sub.w	r1, r8, r4
   15894:	f856 2b04 	ldr.w	r2, [r6], #4
   15898:	4620      	mov	r0, r4
   1589a:	f7f9 f949 	bl	eb30 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   1589e:	2800      	cmp	r0, #0
   158a0:	dd03      	ble.n	158aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   158a2:	4404      	add	r4, r0
   158a4:	3503      	adds	r5, #3
   158a6:	4633      	mov	r3, r6
   158a8:	e7d0      	b.n	1584c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   158aa:	4621      	mov	r1, r4
   158ac:	4638      	mov	r0, r7
   158ae:	f7f9 f919 	bl	eae4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   158b2:	3502      	adds	r5, #2
   158b4:	e7ca      	b.n	1584c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   158b6:	7022      	strb	r2, [r4, #0]
   158b8:	1be0      	subs	r0, r4, r7
   158ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000158be <fabs>:
   158be:	ec51 0b10 	vmov	r0, r1, d0
   158c2:	ee10 2a10 	vmov	r2, s0
   158c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   158ca:	ec43 2b10 	vmov	d0, r2, r3
   158ce:	4770      	bx	lr

000158d0 <fabsf>:
   158d0:	ee10 3a10 	vmov	r3, s0
   158d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   158d8:	ee00 3a10 	vmov	s0, r3
   158dc:	4770      	bx	lr

000158de <fmaf>:
   158de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   158e0:	ee10 0a10 	vmov	r0, s0
   158e4:	ee10 7a90 	vmov	r7, s1
   158e8:	ee11 6a10 	vmov	r6, s2
   158ec:	f7ea fdbc 	bl	468 <__aeabi_f2d>
   158f0:	4604      	mov	r4, r0
   158f2:	4638      	mov	r0, r7
   158f4:	460d      	mov	r5, r1
   158f6:	f7ea fdb7 	bl	468 <__aeabi_f2d>
   158fa:	4602      	mov	r2, r0
   158fc:	460b      	mov	r3, r1
   158fe:	4620      	mov	r0, r4
   15900:	4629      	mov	r1, r5
   15902:	f7ea fe09 	bl	518 <__aeabi_dmul>
   15906:	4604      	mov	r4, r0
   15908:	4630      	mov	r0, r6
   1590a:	460d      	mov	r5, r1
   1590c:	f7ea fdac 	bl	468 <__aeabi_f2d>
   15910:	4602      	mov	r2, r0
   15912:	460b      	mov	r3, r1
   15914:	4620      	mov	r0, r4
   15916:	4629      	mov	r1, r5
   15918:	f7ea fc48 	bl	1ac <__adddf3>
   1591c:	f7eb f8be 	bl	a9c <__aeabi_d2f>
   15920:	ee00 0a10 	vmov	s0, r0
   15924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015926 <__ieee754_sqrtf>:
   15926:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1592a:	4770      	bx	lr

0001592c <finite>:
   1592c:	b082      	sub	sp, #8
   1592e:	ed8d 0b00 	vstr	d0, [sp]
   15932:	9801      	ldr	r0, [sp, #4]
   15934:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   15938:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   1593c:	0fc0      	lsrs	r0, r0, #31
   1593e:	b002      	add	sp, #8
   15940:	4770      	bx	lr

00015942 <finitef>:
   15942:	b082      	sub	sp, #8
   15944:	ed8d 0a01 	vstr	s0, [sp, #4]
   15948:	9801      	ldr	r0, [sp, #4]
   1594a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   1594e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   15952:	bfac      	ite	ge
   15954:	2000      	movge	r0, #0
   15956:	2001      	movlt	r0, #1
   15958:	b002      	add	sp, #8
   1595a:	4770      	bx	lr

0001595c <abort>:
   1595c:	b508      	push	{r3, lr}
   1595e:	2006      	movs	r0, #6
   15960:	f7fa fc26 	bl	101b0 <raise>
   15964:	2001      	movs	r0, #1
   15966:	f7f6 fc33 	bl	c1d0 <_exit>

0001596a <memcpy>:
   1596a:	440a      	add	r2, r1
   1596c:	4291      	cmp	r1, r2
   1596e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   15972:	d100      	bne.n	15976 <memcpy+0xc>
   15974:	4770      	bx	lr
   15976:	b510      	push	{r4, lr}
   15978:	f811 4b01 	ldrb.w	r4, [r1], #1
   1597c:	f803 4f01 	strb.w	r4, [r3, #1]!
   15980:	4291      	cmp	r1, r2
   15982:	d1f9      	bne.n	15978 <memcpy+0xe>
   15984:	bd10      	pop	{r4, pc}

00015986 <memmove>:
   15986:	4288      	cmp	r0, r1
   15988:	b510      	push	{r4, lr}
   1598a:	eb01 0402 	add.w	r4, r1, r2
   1598e:	d902      	bls.n	15996 <memmove+0x10>
   15990:	4284      	cmp	r4, r0
   15992:	4623      	mov	r3, r4
   15994:	d807      	bhi.n	159a6 <memmove+0x20>
   15996:	1e43      	subs	r3, r0, #1
   15998:	42a1      	cmp	r1, r4
   1599a:	d008      	beq.n	159ae <memmove+0x28>
   1599c:	f811 2b01 	ldrb.w	r2, [r1], #1
   159a0:	f803 2f01 	strb.w	r2, [r3, #1]!
   159a4:	e7f8      	b.n	15998 <memmove+0x12>
   159a6:	4402      	add	r2, r0
   159a8:	4601      	mov	r1, r0
   159aa:	428a      	cmp	r2, r1
   159ac:	d100      	bne.n	159b0 <memmove+0x2a>
   159ae:	bd10      	pop	{r4, pc}
   159b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   159b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   159b8:	e7f7      	b.n	159aa <memmove+0x24>

000159ba <memset>:
   159ba:	4402      	add	r2, r0
   159bc:	4603      	mov	r3, r0
   159be:	4293      	cmp	r3, r2
   159c0:	d100      	bne.n	159c4 <memset+0xa>
   159c2:	4770      	bx	lr
   159c4:	f803 1b01 	strb.w	r1, [r3], #1
   159c8:	e7f9      	b.n	159be <memset+0x4>

000159ca <_calloc_r>:
   159ca:	b513      	push	{r0, r1, r4, lr}
   159cc:	434a      	muls	r2, r1
   159ce:	4611      	mov	r1, r2
   159d0:	9201      	str	r2, [sp, #4]
   159d2:	f7f9 fe19 	bl	f608 <_malloc_r>
   159d6:	4604      	mov	r4, r0
   159d8:	b118      	cbz	r0, 159e2 <_calloc_r+0x18>
   159da:	9a01      	ldr	r2, [sp, #4]
   159dc:	2100      	movs	r1, #0
   159de:	f7ff ffec 	bl	159ba <memset>
   159e2:	4620      	mov	r0, r4
   159e4:	b002      	add	sp, #8
   159e6:	bd10      	pop	{r4, pc}

000159e8 <__sfputc_r>:
   159e8:	6893      	ldr	r3, [r2, #8]
   159ea:	3b01      	subs	r3, #1
   159ec:	2b00      	cmp	r3, #0
   159ee:	b410      	push	{r4}
   159f0:	6093      	str	r3, [r2, #8]
   159f2:	da08      	bge.n	15a06 <__sfputc_r+0x1e>
   159f4:	6994      	ldr	r4, [r2, #24]
   159f6:	42a3      	cmp	r3, r4
   159f8:	db01      	blt.n	159fe <__sfputc_r+0x16>
   159fa:	290a      	cmp	r1, #10
   159fc:	d103      	bne.n	15a06 <__sfputc_r+0x1e>
   159fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   15a02:	f7fa bbfd 	b.w	10200 <__swbuf_r>
   15a06:	6813      	ldr	r3, [r2, #0]
   15a08:	1c58      	adds	r0, r3, #1
   15a0a:	6010      	str	r0, [r2, #0]
   15a0c:	7019      	strb	r1, [r3, #0]
   15a0e:	4608      	mov	r0, r1
   15a10:	f85d 4b04 	ldr.w	r4, [sp], #4
   15a14:	4770      	bx	lr

00015a16 <__sfputs_r>:
   15a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a18:	4606      	mov	r6, r0
   15a1a:	460f      	mov	r7, r1
   15a1c:	4614      	mov	r4, r2
   15a1e:	18d5      	adds	r5, r2, r3
   15a20:	42ac      	cmp	r4, r5
   15a22:	d101      	bne.n	15a28 <__sfputs_r+0x12>
   15a24:	2000      	movs	r0, #0
   15a26:	e007      	b.n	15a38 <__sfputs_r+0x22>
   15a28:	f814 1b01 	ldrb.w	r1, [r4], #1
   15a2c:	463a      	mov	r2, r7
   15a2e:	4630      	mov	r0, r6
   15a30:	f7ff ffda 	bl	159e8 <__sfputc_r>
   15a34:	1c43      	adds	r3, r0, #1
   15a36:	d1f3      	bne.n	15a20 <__sfputs_r+0xa>
   15a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015a3a <__cvt>:
   15a3a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15a3e:	ec55 4b10 	vmov	r4, r5, d0
   15a42:	2d00      	cmp	r5, #0
   15a44:	460e      	mov	r6, r1
   15a46:	4619      	mov	r1, r3
   15a48:	462b      	mov	r3, r5
   15a4a:	bfbb      	ittet	lt
   15a4c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   15a50:	461d      	movlt	r5, r3
   15a52:	2300      	movge	r3, #0
   15a54:	232d      	movlt	r3, #45	; 0x2d
   15a56:	700b      	strb	r3, [r1, #0]
   15a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a5a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   15a5e:	4691      	mov	r9, r2
   15a60:	f023 0820 	bic.w	r8, r3, #32
   15a64:	bfbc      	itt	lt
   15a66:	4622      	movlt	r2, r4
   15a68:	4614      	movlt	r4, r2
   15a6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   15a6e:	d005      	beq.n	15a7c <__cvt+0x42>
   15a70:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   15a74:	d100      	bne.n	15a78 <__cvt+0x3e>
   15a76:	3601      	adds	r6, #1
   15a78:	2102      	movs	r1, #2
   15a7a:	e000      	b.n	15a7e <__cvt+0x44>
   15a7c:	2103      	movs	r1, #3
   15a7e:	ab03      	add	r3, sp, #12
   15a80:	9301      	str	r3, [sp, #4]
   15a82:	ab02      	add	r3, sp, #8
   15a84:	9300      	str	r3, [sp, #0]
   15a86:	ec45 4b10 	vmov	d0, r4, r5
   15a8a:	4653      	mov	r3, sl
   15a8c:	4632      	mov	r2, r6
   15a8e:	f7ef f833 	bl	4af8 <_dtoa_r>
   15a92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   15a96:	4607      	mov	r7, r0
   15a98:	d102      	bne.n	15aa0 <__cvt+0x66>
   15a9a:	f019 0f01 	tst.w	r9, #1
   15a9e:	d022      	beq.n	15ae6 <__cvt+0xac>
   15aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   15aa4:	eb07 0906 	add.w	r9, r7, r6
   15aa8:	d110      	bne.n	15acc <__cvt+0x92>
   15aaa:	783b      	ldrb	r3, [r7, #0]
   15aac:	2b30      	cmp	r3, #48	; 0x30
   15aae:	d10a      	bne.n	15ac6 <__cvt+0x8c>
   15ab0:	2200      	movs	r2, #0
   15ab2:	2300      	movs	r3, #0
   15ab4:	4620      	mov	r0, r4
   15ab6:	4629      	mov	r1, r5
   15ab8:	f7ea ff96 	bl	9e8 <__aeabi_dcmpeq>
   15abc:	b918      	cbnz	r0, 15ac6 <__cvt+0x8c>
   15abe:	f1c6 0601 	rsb	r6, r6, #1
   15ac2:	f8ca 6000 	str.w	r6, [sl]
   15ac6:	f8da 3000 	ldr.w	r3, [sl]
   15aca:	4499      	add	r9, r3
   15acc:	2200      	movs	r2, #0
   15ace:	2300      	movs	r3, #0
   15ad0:	4620      	mov	r0, r4
   15ad2:	4629      	mov	r1, r5
   15ad4:	f7ea ff88 	bl	9e8 <__aeabi_dcmpeq>
   15ad8:	b108      	cbz	r0, 15ade <__cvt+0xa4>
   15ada:	f8cd 900c 	str.w	r9, [sp, #12]
   15ade:	2230      	movs	r2, #48	; 0x30
   15ae0:	9b03      	ldr	r3, [sp, #12]
   15ae2:	454b      	cmp	r3, r9
   15ae4:	d307      	bcc.n	15af6 <__cvt+0xbc>
   15ae6:	9b03      	ldr	r3, [sp, #12]
   15ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15aea:	1bdb      	subs	r3, r3, r7
   15aec:	4638      	mov	r0, r7
   15aee:	6013      	str	r3, [r2, #0]
   15af0:	b004      	add	sp, #16
   15af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15af6:	1c59      	adds	r1, r3, #1
   15af8:	9103      	str	r1, [sp, #12]
   15afa:	701a      	strb	r2, [r3, #0]
   15afc:	e7f0      	b.n	15ae0 <__cvt+0xa6>

00015afe <__exponent>:
   15afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15b00:	4603      	mov	r3, r0
   15b02:	2900      	cmp	r1, #0
   15b04:	bfb8      	it	lt
   15b06:	4249      	neglt	r1, r1
   15b08:	f803 2b02 	strb.w	r2, [r3], #2
   15b0c:	bfb4      	ite	lt
   15b0e:	222d      	movlt	r2, #45	; 0x2d
   15b10:	222b      	movge	r2, #43	; 0x2b
   15b12:	2909      	cmp	r1, #9
   15b14:	7042      	strb	r2, [r0, #1]
   15b16:	dd2a      	ble.n	15b6e <__exponent+0x70>
   15b18:	f10d 0407 	add.w	r4, sp, #7
   15b1c:	46a4      	mov	ip, r4
   15b1e:	270a      	movs	r7, #10
   15b20:	46a6      	mov	lr, r4
   15b22:	460a      	mov	r2, r1
   15b24:	fb91 f6f7 	sdiv	r6, r1, r7
   15b28:	fb07 1516 	mls	r5, r7, r6, r1
   15b2c:	3530      	adds	r5, #48	; 0x30
   15b2e:	2a63      	cmp	r2, #99	; 0x63
   15b30:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   15b34:	f80e 5c01 	strb.w	r5, [lr, #-1]
   15b38:	4631      	mov	r1, r6
   15b3a:	dcf1      	bgt.n	15b20 <__exponent+0x22>
   15b3c:	3130      	adds	r1, #48	; 0x30
   15b3e:	f1ae 0502 	sub.w	r5, lr, #2
   15b42:	f804 1c01 	strb.w	r1, [r4, #-1]
   15b46:	1c44      	adds	r4, r0, #1
   15b48:	4629      	mov	r1, r5
   15b4a:	4561      	cmp	r1, ip
   15b4c:	d30a      	bcc.n	15b64 <__exponent+0x66>
   15b4e:	f10d 0209 	add.w	r2, sp, #9
   15b52:	eba2 020e 	sub.w	r2, r2, lr
   15b56:	4565      	cmp	r5, ip
   15b58:	bf88      	it	hi
   15b5a:	2200      	movhi	r2, #0
   15b5c:	4413      	add	r3, r2
   15b5e:	1a18      	subs	r0, r3, r0
   15b60:	b003      	add	sp, #12
   15b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b64:	f811 2b01 	ldrb.w	r2, [r1], #1
   15b68:	f804 2f01 	strb.w	r2, [r4, #1]!
   15b6c:	e7ed      	b.n	15b4a <__exponent+0x4c>
   15b6e:	2330      	movs	r3, #48	; 0x30
   15b70:	3130      	adds	r1, #48	; 0x30
   15b72:	7083      	strb	r3, [r0, #2]
   15b74:	70c1      	strb	r1, [r0, #3]
   15b76:	1d03      	adds	r3, r0, #4
   15b78:	e7f1      	b.n	15b5e <__exponent+0x60>

00015b7a <_printf_common>:
   15b7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b7e:	4616      	mov	r6, r2
   15b80:	4699      	mov	r9, r3
   15b82:	688a      	ldr	r2, [r1, #8]
   15b84:	690b      	ldr	r3, [r1, #16]
   15b86:	f8dd 8020 	ldr.w	r8, [sp, #32]
   15b8a:	4293      	cmp	r3, r2
   15b8c:	bfb8      	it	lt
   15b8e:	4613      	movlt	r3, r2
   15b90:	6033      	str	r3, [r6, #0]
   15b92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   15b96:	4607      	mov	r7, r0
   15b98:	460c      	mov	r4, r1
   15b9a:	b10a      	cbz	r2, 15ba0 <_printf_common+0x26>
   15b9c:	3301      	adds	r3, #1
   15b9e:	6033      	str	r3, [r6, #0]
   15ba0:	6823      	ldr	r3, [r4, #0]
   15ba2:	0699      	lsls	r1, r3, #26
   15ba4:	bf42      	ittt	mi
   15ba6:	6833      	ldrmi	r3, [r6, #0]
   15ba8:	3302      	addmi	r3, #2
   15baa:	6033      	strmi	r3, [r6, #0]
   15bac:	6825      	ldr	r5, [r4, #0]
   15bae:	f015 0506 	ands.w	r5, r5, #6
   15bb2:	d106      	bne.n	15bc2 <_printf_common+0x48>
   15bb4:	f104 0a19 	add.w	sl, r4, #25
   15bb8:	68e3      	ldr	r3, [r4, #12]
   15bba:	6832      	ldr	r2, [r6, #0]
   15bbc:	1a9b      	subs	r3, r3, r2
   15bbe:	42ab      	cmp	r3, r5
   15bc0:	dc26      	bgt.n	15c10 <_printf_common+0x96>
   15bc2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   15bc6:	1e13      	subs	r3, r2, #0
   15bc8:	6822      	ldr	r2, [r4, #0]
   15bca:	bf18      	it	ne
   15bcc:	2301      	movne	r3, #1
   15bce:	0692      	lsls	r2, r2, #26
   15bd0:	d42b      	bmi.n	15c2a <_printf_common+0xb0>
   15bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   15bd6:	4649      	mov	r1, r9
   15bd8:	4638      	mov	r0, r7
   15bda:	47c0      	blx	r8
   15bdc:	3001      	adds	r0, #1
   15bde:	d01e      	beq.n	15c1e <_printf_common+0xa4>
   15be0:	6823      	ldr	r3, [r4, #0]
   15be2:	68e5      	ldr	r5, [r4, #12]
   15be4:	6832      	ldr	r2, [r6, #0]
   15be6:	f003 0306 	and.w	r3, r3, #6
   15bea:	2b04      	cmp	r3, #4
   15bec:	bf08      	it	eq
   15bee:	1aad      	subeq	r5, r5, r2
   15bf0:	68a3      	ldr	r3, [r4, #8]
   15bf2:	6922      	ldr	r2, [r4, #16]
   15bf4:	bf0c      	ite	eq
   15bf6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   15bfa:	2500      	movne	r5, #0
   15bfc:	4293      	cmp	r3, r2
   15bfe:	bfc4      	itt	gt
   15c00:	1a9b      	subgt	r3, r3, r2
   15c02:	18ed      	addgt	r5, r5, r3
   15c04:	2600      	movs	r6, #0
   15c06:	341a      	adds	r4, #26
   15c08:	42b5      	cmp	r5, r6
   15c0a:	d11a      	bne.n	15c42 <_printf_common+0xc8>
   15c0c:	2000      	movs	r0, #0
   15c0e:	e008      	b.n	15c22 <_printf_common+0xa8>
   15c10:	2301      	movs	r3, #1
   15c12:	4652      	mov	r2, sl
   15c14:	4649      	mov	r1, r9
   15c16:	4638      	mov	r0, r7
   15c18:	47c0      	blx	r8
   15c1a:	3001      	adds	r0, #1
   15c1c:	d103      	bne.n	15c26 <_printf_common+0xac>
   15c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15c26:	3501      	adds	r5, #1
   15c28:	e7c6      	b.n	15bb8 <_printf_common+0x3e>
   15c2a:	18e1      	adds	r1, r4, r3
   15c2c:	1c5a      	adds	r2, r3, #1
   15c2e:	2030      	movs	r0, #48	; 0x30
   15c30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   15c34:	4422      	add	r2, r4
   15c36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   15c3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   15c3e:	3302      	adds	r3, #2
   15c40:	e7c7      	b.n	15bd2 <_printf_common+0x58>
   15c42:	2301      	movs	r3, #1
   15c44:	4622      	mov	r2, r4
   15c46:	4649      	mov	r1, r9
   15c48:	4638      	mov	r0, r7
   15c4a:	47c0      	blx	r8
   15c4c:	3001      	adds	r0, #1
   15c4e:	d0e6      	beq.n	15c1e <_printf_common+0xa4>
   15c50:	3601      	adds	r6, #1
   15c52:	e7d9      	b.n	15c08 <_printf_common+0x8e>

00015c54 <_raise_r>:
   15c54:	291f      	cmp	r1, #31
   15c56:	b538      	push	{r3, r4, r5, lr}
   15c58:	4604      	mov	r4, r0
   15c5a:	460d      	mov	r5, r1
   15c5c:	d904      	bls.n	15c68 <_raise_r+0x14>
   15c5e:	2316      	movs	r3, #22
   15c60:	6003      	str	r3, [r0, #0]
   15c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15c66:	bd38      	pop	{r3, r4, r5, pc}
   15c68:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15c6a:	b112      	cbz	r2, 15c72 <_raise_r+0x1e>
   15c6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   15c70:	b94b      	cbnz	r3, 15c86 <_raise_r+0x32>
   15c72:	4620      	mov	r0, r4
   15c74:	f000 f816 	bl	15ca4 <_getpid_r>
   15c78:	462a      	mov	r2, r5
   15c7a:	4601      	mov	r1, r0
   15c7c:	4620      	mov	r0, r4
   15c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15c82:	f7fa ba9d 	b.w	101c0 <_kill_r>
   15c86:	2b01      	cmp	r3, #1
   15c88:	d00a      	beq.n	15ca0 <_raise_r+0x4c>
   15c8a:	1c59      	adds	r1, r3, #1
   15c8c:	d103      	bne.n	15c96 <_raise_r+0x42>
   15c8e:	2316      	movs	r3, #22
   15c90:	6003      	str	r3, [r0, #0]
   15c92:	2001      	movs	r0, #1
   15c94:	e7e7      	b.n	15c66 <_raise_r+0x12>
   15c96:	2400      	movs	r4, #0
   15c98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   15c9c:	4628      	mov	r0, r5
   15c9e:	4798      	blx	r3
   15ca0:	2000      	movs	r0, #0
   15ca2:	e7e0      	b.n	15c66 <_raise_r+0x12>

00015ca4 <_getpid_r>:
   15ca4:	f7fe bfea 	b.w	14c7c <_getpid>

00015ca8 <strcpy>:
   15ca8:	4603      	mov	r3, r0
   15caa:	f811 2b01 	ldrb.w	r2, [r1], #1
   15cae:	f803 2b01 	strb.w	r2, [r3], #1
   15cb2:	2a00      	cmp	r2, #0
   15cb4:	d1f9      	bne.n	15caa <strcpy+0x2>
   15cb6:	4770      	bx	lr

00015cb8 <strnlen>:
   15cb8:	b510      	push	{r4, lr}
   15cba:	4602      	mov	r2, r0
   15cbc:	4401      	add	r1, r0
   15cbe:	428a      	cmp	r2, r1
   15cc0:	4613      	mov	r3, r2
   15cc2:	d003      	beq.n	15ccc <strnlen+0x14>
   15cc4:	781c      	ldrb	r4, [r3, #0]
   15cc6:	3201      	adds	r2, #1
   15cc8:	2c00      	cmp	r4, #0
   15cca:	d1f8      	bne.n	15cbe <strnlen+0x6>
   15ccc:	1a18      	subs	r0, r3, r0
   15cce:	bd10      	pop	{r4, pc}

00015cd0 <_vsniprintf_r>:
   15cd0:	b530      	push	{r4, r5, lr}
   15cd2:	4614      	mov	r4, r2
   15cd4:	2c00      	cmp	r4, #0
   15cd6:	b09b      	sub	sp, #108	; 0x6c
   15cd8:	4605      	mov	r5, r0
   15cda:	461a      	mov	r2, r3
   15cdc:	da05      	bge.n	15cea <_vsniprintf_r+0x1a>
   15cde:	238b      	movs	r3, #139	; 0x8b
   15ce0:	6003      	str	r3, [r0, #0]
   15ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ce6:	b01b      	add	sp, #108	; 0x6c
   15ce8:	bd30      	pop	{r4, r5, pc}
   15cea:	f44f 7302 	mov.w	r3, #520	; 0x208
   15cee:	f8ad 300c 	strh.w	r3, [sp, #12]
   15cf2:	bf14      	ite	ne
   15cf4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   15cf8:	4623      	moveq	r3, r4
   15cfa:	9302      	str	r3, [sp, #8]
   15cfc:	9305      	str	r3, [sp, #20]
   15cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15d02:	9100      	str	r1, [sp, #0]
   15d04:	9104      	str	r1, [sp, #16]
   15d06:	f8ad 300e 	strh.w	r3, [sp, #14]
   15d0a:	4669      	mov	r1, sp
   15d0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15d0e:	f7fb f821 	bl	10d54 <_svfiprintf_r>
   15d12:	1c43      	adds	r3, r0, #1
   15d14:	bfbc      	itt	lt
   15d16:	238b      	movlt	r3, #139	; 0x8b
   15d18:	602b      	strlt	r3, [r5, #0]
   15d1a:	2c00      	cmp	r4, #0
   15d1c:	d0e3      	beq.n	15ce6 <_vsniprintf_r+0x16>
   15d1e:	9b00      	ldr	r3, [sp, #0]
   15d20:	2200      	movs	r2, #0
   15d22:	701a      	strb	r2, [r3, #0]
   15d24:	e7df      	b.n	15ce6 <_vsniprintf_r+0x16>

00015d26 <quorem>:
   15d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d2a:	6903      	ldr	r3, [r0, #16]
   15d2c:	690c      	ldr	r4, [r1, #16]
   15d2e:	42a3      	cmp	r3, r4
   15d30:	4607      	mov	r7, r0
   15d32:	f2c0 8081 	blt.w	15e38 <quorem+0x112>
   15d36:	3c01      	subs	r4, #1
   15d38:	f101 0814 	add.w	r8, r1, #20
   15d3c:	f100 0514 	add.w	r5, r0, #20
   15d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   15d44:	9301      	str	r3, [sp, #4]
   15d46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   15d4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   15d4e:	3301      	adds	r3, #1
   15d50:	429a      	cmp	r2, r3
   15d52:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   15d56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   15d5a:	fbb2 f6f3 	udiv	r6, r2, r3
   15d5e:	d331      	bcc.n	15dc4 <quorem+0x9e>
   15d60:	f04f 0e00 	mov.w	lr, #0
   15d64:	4640      	mov	r0, r8
   15d66:	46ac      	mov	ip, r5
   15d68:	46f2      	mov	sl, lr
   15d6a:	f850 2b04 	ldr.w	r2, [r0], #4
   15d6e:	b293      	uxth	r3, r2
   15d70:	fb06 e303 	mla	r3, r6, r3, lr
   15d74:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   15d78:	b29b      	uxth	r3, r3
   15d7a:	ebaa 0303 	sub.w	r3, sl, r3
   15d7e:	0c12      	lsrs	r2, r2, #16
   15d80:	f8dc a000 	ldr.w	sl, [ip]
   15d84:	fb06 e202 	mla	r2, r6, r2, lr
   15d88:	fa13 f38a 	uxtah	r3, r3, sl
   15d8c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   15d90:	fa1f fa82 	uxth.w	sl, r2
   15d94:	f8dc 2000 	ldr.w	r2, [ip]
   15d98:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   15d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   15da0:	b29b      	uxth	r3, r3
   15da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   15da6:	4581      	cmp	r9, r0
   15da8:	f84c 3b04 	str.w	r3, [ip], #4
   15dac:	ea4f 4a22 	mov.w	sl, r2, asr #16
   15db0:	d2db      	bcs.n	15d6a <quorem+0x44>
   15db2:	f855 300b 	ldr.w	r3, [r5, fp]
   15db6:	b92b      	cbnz	r3, 15dc4 <quorem+0x9e>
   15db8:	9b01      	ldr	r3, [sp, #4]
   15dba:	3b04      	subs	r3, #4
   15dbc:	429d      	cmp	r5, r3
   15dbe:	461a      	mov	r2, r3
   15dc0:	d32e      	bcc.n	15e20 <quorem+0xfa>
   15dc2:	613c      	str	r4, [r7, #16]
   15dc4:	4638      	mov	r0, r7
   15dc6:	f000 f8e2 	bl	15f8e <__mcmp>
   15dca:	2800      	cmp	r0, #0
   15dcc:	db24      	blt.n	15e18 <quorem+0xf2>
   15dce:	3601      	adds	r6, #1
   15dd0:	4628      	mov	r0, r5
   15dd2:	f04f 0c00 	mov.w	ip, #0
   15dd6:	f858 2b04 	ldr.w	r2, [r8], #4
   15dda:	f8d0 e000 	ldr.w	lr, [r0]
   15dde:	b293      	uxth	r3, r2
   15de0:	ebac 0303 	sub.w	r3, ip, r3
   15de4:	0c12      	lsrs	r2, r2, #16
   15de6:	fa13 f38e 	uxtah	r3, r3, lr
   15dea:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   15dee:	eb02 4223 	add.w	r2, r2, r3, asr #16
   15df2:	b29b      	uxth	r3, r3
   15df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   15df8:	45c1      	cmp	r9, r8
   15dfa:	f840 3b04 	str.w	r3, [r0], #4
   15dfe:	ea4f 4c22 	mov.w	ip, r2, asr #16
   15e02:	d2e8      	bcs.n	15dd6 <quorem+0xb0>
   15e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   15e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   15e0c:	b922      	cbnz	r2, 15e18 <quorem+0xf2>
   15e0e:	3b04      	subs	r3, #4
   15e10:	429d      	cmp	r5, r3
   15e12:	461a      	mov	r2, r3
   15e14:	d30a      	bcc.n	15e2c <quorem+0x106>
   15e16:	613c      	str	r4, [r7, #16]
   15e18:	4630      	mov	r0, r6
   15e1a:	b003      	add	sp, #12
   15e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e20:	6812      	ldr	r2, [r2, #0]
   15e22:	3b04      	subs	r3, #4
   15e24:	2a00      	cmp	r2, #0
   15e26:	d1cc      	bne.n	15dc2 <quorem+0x9c>
   15e28:	3c01      	subs	r4, #1
   15e2a:	e7c7      	b.n	15dbc <quorem+0x96>
   15e2c:	6812      	ldr	r2, [r2, #0]
   15e2e:	3b04      	subs	r3, #4
   15e30:	2a00      	cmp	r2, #0
   15e32:	d1f0      	bne.n	15e16 <quorem+0xf0>
   15e34:	3c01      	subs	r4, #1
   15e36:	e7eb      	b.n	15e10 <quorem+0xea>
   15e38:	2000      	movs	r0, #0
   15e3a:	e7ee      	b.n	15e1a <quorem+0xf4>

00015e3c <__sfmoreglue>:
   15e3c:	b570      	push	{r4, r5, r6, lr}
   15e3e:	2268      	movs	r2, #104	; 0x68
   15e40:	1e4d      	subs	r5, r1, #1
   15e42:	4355      	muls	r5, r2
   15e44:	460e      	mov	r6, r1
   15e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
   15e4a:	f7f9 fbdd 	bl	f608 <_malloc_r>
   15e4e:	4604      	mov	r4, r0
   15e50:	b140      	cbz	r0, 15e64 <__sfmoreglue+0x28>
   15e52:	2100      	movs	r1, #0
   15e54:	e9c0 1600 	strd	r1, r6, [r0]
   15e58:	300c      	adds	r0, #12
   15e5a:	60a0      	str	r0, [r4, #8]
   15e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
   15e60:	f7ff fdab 	bl	159ba <memset>
   15e64:	4620      	mov	r0, r4
   15e66:	bd70      	pop	{r4, r5, r6, pc}

00015e68 <_fwalk_reent>:
   15e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15e6c:	4606      	mov	r6, r0
   15e6e:	4688      	mov	r8, r1
   15e70:	f100 0448 	add.w	r4, r0, #72	; 0x48
   15e74:	2700      	movs	r7, #0
   15e76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   15e7a:	f1b9 0901 	subs.w	r9, r9, #1
   15e7e:	d505      	bpl.n	15e8c <_fwalk_reent+0x24>
   15e80:	6824      	ldr	r4, [r4, #0]
   15e82:	2c00      	cmp	r4, #0
   15e84:	d1f7      	bne.n	15e76 <_fwalk_reent+0xe>
   15e86:	4638      	mov	r0, r7
   15e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15e8c:	89ab      	ldrh	r3, [r5, #12]
   15e8e:	2b01      	cmp	r3, #1
   15e90:	d907      	bls.n	15ea2 <_fwalk_reent+0x3a>
   15e92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   15e96:	3301      	adds	r3, #1
   15e98:	d003      	beq.n	15ea2 <_fwalk_reent+0x3a>
   15e9a:	4629      	mov	r1, r5
   15e9c:	4630      	mov	r0, r6
   15e9e:	47c0      	blx	r8
   15ea0:	4307      	orrs	r7, r0
   15ea2:	3568      	adds	r5, #104	; 0x68
   15ea4:	e7e9      	b.n	15e7a <_fwalk_reent+0x12>

00015ea6 <__swhatbuf_r>:
   15ea6:	b570      	push	{r4, r5, r6, lr}
   15ea8:	460e      	mov	r6, r1
   15eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   15eae:	2900      	cmp	r1, #0
   15eb0:	b096      	sub	sp, #88	; 0x58
   15eb2:	4614      	mov	r4, r2
   15eb4:	461d      	mov	r5, r3
   15eb6:	da08      	bge.n	15eca <__swhatbuf_r+0x24>
   15eb8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   15ebc:	2200      	movs	r2, #0
   15ebe:	602a      	str	r2, [r5, #0]
   15ec0:	061a      	lsls	r2, r3, #24
   15ec2:	d410      	bmi.n	15ee6 <__swhatbuf_r+0x40>
   15ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15ec8:	e00e      	b.n	15ee8 <__swhatbuf_r+0x42>
   15eca:	466a      	mov	r2, sp
   15ecc:	f7fb f864 	bl	10f98 <_fstat_r>
   15ed0:	2800      	cmp	r0, #0
   15ed2:	dbf1      	blt.n	15eb8 <__swhatbuf_r+0x12>
   15ed4:	9a01      	ldr	r2, [sp, #4]
   15ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   15eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   15ede:	425a      	negs	r2, r3
   15ee0:	415a      	adcs	r2, r3
   15ee2:	602a      	str	r2, [r5, #0]
   15ee4:	e7ee      	b.n	15ec4 <__swhatbuf_r+0x1e>
   15ee6:	2340      	movs	r3, #64	; 0x40
   15ee8:	2000      	movs	r0, #0
   15eea:	6023      	str	r3, [r4, #0]
   15eec:	b016      	add	sp, #88	; 0x58
   15eee:	bd70      	pop	{r4, r5, r6, pc}

00015ef0 <__hi0bits>:
   15ef0:	0c03      	lsrs	r3, r0, #16
   15ef2:	041b      	lsls	r3, r3, #16
   15ef4:	b9d3      	cbnz	r3, 15f2c <__hi0bits+0x3c>
   15ef6:	0400      	lsls	r0, r0, #16
   15ef8:	2310      	movs	r3, #16
   15efa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   15efe:	bf04      	itt	eq
   15f00:	0200      	lsleq	r0, r0, #8
   15f02:	3308      	addeq	r3, #8
   15f04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   15f08:	bf04      	itt	eq
   15f0a:	0100      	lsleq	r0, r0, #4
   15f0c:	3304      	addeq	r3, #4
   15f0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   15f12:	bf04      	itt	eq
   15f14:	0080      	lsleq	r0, r0, #2
   15f16:	3302      	addeq	r3, #2
   15f18:	2800      	cmp	r0, #0
   15f1a:	db05      	blt.n	15f28 <__hi0bits+0x38>
   15f1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   15f20:	f103 0301 	add.w	r3, r3, #1
   15f24:	bf08      	it	eq
   15f26:	2320      	moveq	r3, #32
   15f28:	4618      	mov	r0, r3
   15f2a:	4770      	bx	lr
   15f2c:	2300      	movs	r3, #0
   15f2e:	e7e4      	b.n	15efa <__hi0bits+0xa>

00015f30 <__lo0bits>:
   15f30:	6803      	ldr	r3, [r0, #0]
   15f32:	f013 0207 	ands.w	r2, r3, #7
   15f36:	4601      	mov	r1, r0
   15f38:	d00b      	beq.n	15f52 <__lo0bits+0x22>
   15f3a:	07da      	lsls	r2, r3, #31
   15f3c:	d423      	bmi.n	15f86 <__lo0bits+0x56>
   15f3e:	0798      	lsls	r0, r3, #30
   15f40:	bf49      	itett	mi
   15f42:	085b      	lsrmi	r3, r3, #1
   15f44:	089b      	lsrpl	r3, r3, #2
   15f46:	2001      	movmi	r0, #1
   15f48:	600b      	strmi	r3, [r1, #0]
   15f4a:	bf5c      	itt	pl
   15f4c:	600b      	strpl	r3, [r1, #0]
   15f4e:	2002      	movpl	r0, #2
   15f50:	4770      	bx	lr
   15f52:	b298      	uxth	r0, r3
   15f54:	b9a8      	cbnz	r0, 15f82 <__lo0bits+0x52>
   15f56:	0c1b      	lsrs	r3, r3, #16
   15f58:	2010      	movs	r0, #16
   15f5a:	b2da      	uxtb	r2, r3
   15f5c:	b90a      	cbnz	r2, 15f62 <__lo0bits+0x32>
   15f5e:	3008      	adds	r0, #8
   15f60:	0a1b      	lsrs	r3, r3, #8
   15f62:	071a      	lsls	r2, r3, #28
   15f64:	bf04      	itt	eq
   15f66:	091b      	lsreq	r3, r3, #4
   15f68:	3004      	addeq	r0, #4
   15f6a:	079a      	lsls	r2, r3, #30
   15f6c:	bf04      	itt	eq
   15f6e:	089b      	lsreq	r3, r3, #2
   15f70:	3002      	addeq	r0, #2
   15f72:	07da      	lsls	r2, r3, #31
   15f74:	d403      	bmi.n	15f7e <__lo0bits+0x4e>
   15f76:	085b      	lsrs	r3, r3, #1
   15f78:	f100 0001 	add.w	r0, r0, #1
   15f7c:	d005      	beq.n	15f8a <__lo0bits+0x5a>
   15f7e:	600b      	str	r3, [r1, #0]
   15f80:	4770      	bx	lr
   15f82:	4610      	mov	r0, r2
   15f84:	e7e9      	b.n	15f5a <__lo0bits+0x2a>
   15f86:	2000      	movs	r0, #0
   15f88:	4770      	bx	lr
   15f8a:	2020      	movs	r0, #32
   15f8c:	4770      	bx	lr

00015f8e <__mcmp>:
   15f8e:	b530      	push	{r4, r5, lr}
   15f90:	6902      	ldr	r2, [r0, #16]
   15f92:	690c      	ldr	r4, [r1, #16]
   15f94:	1b12      	subs	r2, r2, r4
   15f96:	d10e      	bne.n	15fb6 <__mcmp+0x28>
   15f98:	f100 0314 	add.w	r3, r0, #20
   15f9c:	3114      	adds	r1, #20
   15f9e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   15fa2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   15fa6:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   15faa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   15fae:	42a5      	cmp	r5, r4
   15fb0:	d003      	beq.n	15fba <__mcmp+0x2c>
   15fb2:	d305      	bcc.n	15fc0 <__mcmp+0x32>
   15fb4:	2201      	movs	r2, #1
   15fb6:	4610      	mov	r0, r2
   15fb8:	bd30      	pop	{r4, r5, pc}
   15fba:	4283      	cmp	r3, r0
   15fbc:	d3f3      	bcc.n	15fa6 <__mcmp+0x18>
   15fbe:	e7fa      	b.n	15fb6 <__mcmp+0x28>
   15fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15fc4:	e7f7      	b.n	15fb6 <__mcmp+0x28>

00015fc6 <_realloc_r>:
   15fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15fc8:	4607      	mov	r7, r0
   15fca:	4614      	mov	r4, r2
   15fcc:	460e      	mov	r6, r1
   15fce:	b921      	cbnz	r1, 15fda <_realloc_r+0x14>
   15fd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15fd4:	4611      	mov	r1, r2
   15fd6:	f7f9 bb17 	b.w	f608 <_malloc_r>
   15fda:	b922      	cbnz	r2, 15fe6 <_realloc_r+0x20>
   15fdc:	f7f9 fac8 	bl	f570 <_free_r>
   15fe0:	4625      	mov	r5, r4
   15fe2:	4628      	mov	r0, r5
   15fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15fe6:	f000 f8c4 	bl	16172 <_malloc_usable_size_r>
   15fea:	42a0      	cmp	r0, r4
   15fec:	d20f      	bcs.n	1600e <_realloc_r+0x48>
   15fee:	4621      	mov	r1, r4
   15ff0:	4638      	mov	r0, r7
   15ff2:	f7f9 fb09 	bl	f608 <_malloc_r>
   15ff6:	4605      	mov	r5, r0
   15ff8:	2800      	cmp	r0, #0
   15ffa:	d0f2      	beq.n	15fe2 <_realloc_r+0x1c>
   15ffc:	4631      	mov	r1, r6
   15ffe:	4622      	mov	r2, r4
   16000:	f7ff fcb3 	bl	1596a <memcpy>
   16004:	4631      	mov	r1, r6
   16006:	4638      	mov	r0, r7
   16008:	f7f9 fab2 	bl	f570 <_free_r>
   1600c:	e7e9      	b.n	15fe2 <_realloc_r+0x1c>
   1600e:	4635      	mov	r5, r6
   16010:	e7e7      	b.n	15fe2 <_realloc_r+0x1c>

00016012 <__ssputs_r>:
   16012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16016:	688e      	ldr	r6, [r1, #8]
   16018:	429e      	cmp	r6, r3
   1601a:	4682      	mov	sl, r0
   1601c:	460c      	mov	r4, r1
   1601e:	4690      	mov	r8, r2
   16020:	461f      	mov	r7, r3
   16022:	d838      	bhi.n	16096 <__ssputs_r+0x84>
   16024:	898a      	ldrh	r2, [r1, #12]
   16026:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1602a:	d032      	beq.n	16092 <__ssputs_r+0x80>
   1602c:	6825      	ldr	r5, [r4, #0]
   1602e:	6909      	ldr	r1, [r1, #16]
   16030:	eba5 0901 	sub.w	r9, r5, r1
   16034:	6965      	ldr	r5, [r4, #20]
   16036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1603a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1603e:	3301      	adds	r3, #1
   16040:	444b      	add	r3, r9
   16042:	106d      	asrs	r5, r5, #1
   16044:	429d      	cmp	r5, r3
   16046:	bf38      	it	cc
   16048:	461d      	movcc	r5, r3
   1604a:	0553      	lsls	r3, r2, #21
   1604c:	d531      	bpl.n	160b2 <__ssputs_r+0xa0>
   1604e:	4629      	mov	r1, r5
   16050:	f7f9 fada 	bl	f608 <_malloc_r>
   16054:	4606      	mov	r6, r0
   16056:	b950      	cbnz	r0, 1606e <__ssputs_r+0x5c>
   16058:	230c      	movs	r3, #12
   1605a:	f8ca 3000 	str.w	r3, [sl]
   1605e:	89a3      	ldrh	r3, [r4, #12]
   16060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16064:	81a3      	strh	r3, [r4, #12]
   16066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1606e:	6921      	ldr	r1, [r4, #16]
   16070:	464a      	mov	r2, r9
   16072:	f7ff fc7a 	bl	1596a <memcpy>
   16076:	89a3      	ldrh	r3, [r4, #12]
   16078:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16080:	81a3      	strh	r3, [r4, #12]
   16082:	6126      	str	r6, [r4, #16]
   16084:	6165      	str	r5, [r4, #20]
   16086:	444e      	add	r6, r9
   16088:	eba5 0509 	sub.w	r5, r5, r9
   1608c:	6026      	str	r6, [r4, #0]
   1608e:	60a5      	str	r5, [r4, #8]
   16090:	463e      	mov	r6, r7
   16092:	42be      	cmp	r6, r7
   16094:	d900      	bls.n	16098 <__ssputs_r+0x86>
   16096:	463e      	mov	r6, r7
   16098:	6820      	ldr	r0, [r4, #0]
   1609a:	4632      	mov	r2, r6
   1609c:	4641      	mov	r1, r8
   1609e:	f7ff fc72 	bl	15986 <memmove>
   160a2:	68a3      	ldr	r3, [r4, #8]
   160a4:	1b9b      	subs	r3, r3, r6
   160a6:	60a3      	str	r3, [r4, #8]
   160a8:	6823      	ldr	r3, [r4, #0]
   160aa:	4433      	add	r3, r6
   160ac:	6023      	str	r3, [r4, #0]
   160ae:	2000      	movs	r0, #0
   160b0:	e7db      	b.n	1606a <__ssputs_r+0x58>
   160b2:	462a      	mov	r2, r5
   160b4:	f7ff ff87 	bl	15fc6 <_realloc_r>
   160b8:	4606      	mov	r6, r0
   160ba:	2800      	cmp	r0, #0
   160bc:	d1e1      	bne.n	16082 <__ssputs_r+0x70>
   160be:	6921      	ldr	r1, [r4, #16]
   160c0:	4650      	mov	r0, sl
   160c2:	f7f9 fa55 	bl	f570 <_free_r>
   160c6:	e7c7      	b.n	16058 <__ssputs_r+0x46>

000160c8 <__sread>:
   160c8:	b510      	push	{r4, lr}
   160ca:	460c      	mov	r4, r1
   160cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   160d0:	f7fa ff96 	bl	11000 <_read_r>
   160d4:	2800      	cmp	r0, #0
   160d6:	bfab      	itete	ge
   160d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   160da:	89a3      	ldrhlt	r3, [r4, #12]
   160dc:	181b      	addge	r3, r3, r0
   160de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   160e2:	bfac      	ite	ge
   160e4:	6563      	strge	r3, [r4, #84]	; 0x54
   160e6:	81a3      	strhlt	r3, [r4, #12]
   160e8:	bd10      	pop	{r4, pc}

000160ea <__swrite>:
   160ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160ee:	461f      	mov	r7, r3
   160f0:	898b      	ldrh	r3, [r1, #12]
   160f2:	05db      	lsls	r3, r3, #23
   160f4:	4605      	mov	r5, r0
   160f6:	460c      	mov	r4, r1
   160f8:	4616      	mov	r6, r2
   160fa:	d505      	bpl.n	16108 <__swrite+0x1e>
   160fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16100:	2302      	movs	r3, #2
   16102:	2200      	movs	r2, #0
   16104:	f7fa ff6a 	bl	10fdc <_lseek_r>
   16108:	89a3      	ldrh	r3, [r4, #12]
   1610a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1610e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   16112:	81a3      	strh	r3, [r4, #12]
   16114:	4632      	mov	r2, r6
   16116:	463b      	mov	r3, r7
   16118:	4628      	mov	r0, r5
   1611a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1611e:	f7fa bf19 	b.w	10f54 <_write_r>

00016122 <__sseek>:
   16122:	b510      	push	{r4, lr}
   16124:	460c      	mov	r4, r1
   16126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1612a:	f7fa ff57 	bl	10fdc <_lseek_r>
   1612e:	1c43      	adds	r3, r0, #1
   16130:	89a3      	ldrh	r3, [r4, #12]
   16132:	bf15      	itete	ne
   16134:	6560      	strne	r0, [r4, #84]	; 0x54
   16136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1613a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1613e:	81a3      	strheq	r3, [r4, #12]
   16140:	bf18      	it	ne
   16142:	81a3      	strhne	r3, [r4, #12]
   16144:	bd10      	pop	{r4, pc}

00016146 <__sclose>:
   16146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1614a:	f7fa bf15 	b.w	10f78 <_close_r>

0001614e <__ascii_mbtowc>:
   1614e:	b082      	sub	sp, #8
   16150:	b901      	cbnz	r1, 16154 <__ascii_mbtowc+0x6>
   16152:	a901      	add	r1, sp, #4
   16154:	b142      	cbz	r2, 16168 <__ascii_mbtowc+0x1a>
   16156:	b14b      	cbz	r3, 1616c <__ascii_mbtowc+0x1e>
   16158:	7813      	ldrb	r3, [r2, #0]
   1615a:	600b      	str	r3, [r1, #0]
   1615c:	7812      	ldrb	r2, [r2, #0]
   1615e:	1e10      	subs	r0, r2, #0
   16160:	bf18      	it	ne
   16162:	2001      	movne	r0, #1
   16164:	b002      	add	sp, #8
   16166:	4770      	bx	lr
   16168:	4610      	mov	r0, r2
   1616a:	e7fb      	b.n	16164 <__ascii_mbtowc+0x16>
   1616c:	f06f 0001 	mvn.w	r0, #1
   16170:	e7f8      	b.n	16164 <__ascii_mbtowc+0x16>

00016172 <_malloc_usable_size_r>:
   16172:	f851 3c04 	ldr.w	r3, [r1, #-4]
   16176:	1f18      	subs	r0, r3, #4
   16178:	2b00      	cmp	r3, #0
   1617a:	bfbc      	itt	lt
   1617c:	580b      	ldrlt	r3, [r1, r0]
   1617e:	18c0      	addlt	r0, r0, r3
   16180:	4770      	bx	lr

00016182 <__ascii_wctomb>:
   16182:	b149      	cbz	r1, 16198 <__ascii_wctomb+0x16>
   16184:	2aff      	cmp	r2, #255	; 0xff
   16186:	bf85      	ittet	hi
   16188:	238a      	movhi	r3, #138	; 0x8a
   1618a:	6003      	strhi	r3, [r0, #0]
   1618c:	700a      	strbls	r2, [r1, #0]
   1618e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   16192:	bf98      	it	ls
   16194:	2001      	movls	r0, #1
   16196:	4770      	bx	lr
   16198:	4608      	mov	r0, r1
   1619a:	4770      	bx	lr

0001619c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1619c:	f7f6 bf8c 	b.w	d0b8 <SystemInit>
