
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 35 00 20 79 34 00 00 03 81 00 00 4d 34 00 00     .5. y4......M4..
  10:	4d 34 00 00 4d 34 00 00 4d 34 00 00 00 00 00 00     M4..M4..M4......
	...
  2c:	91 30 00 00 4d 34 00 00 00 00 00 00 01 30 00 00     .0..M4.......0..
  3c:	4d 34 00 00                                         M4..

00000040 <_irq_vector_table>:
  40:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  50:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  60:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  70:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  80:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  90:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  a0:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  b0:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  c0:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  d0:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  e0:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..
  f0:	05 32 00 00 05 32 00 00 05 32 00 00 05 32 00 00     .2...2...2...2..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__adddf3+0x240>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__adddf3+0x24e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__adddf3+0x212>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__adddf3+0x230>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__data_size+0x188>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__data_size+0x60>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__data_size+0x2c>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__data_size+0x8a>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__data_size+0x1e4>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__data_size+0x110>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__data_size+0xe0>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__data_size+0x16e>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__data_size+0x152>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__data_size+0x172>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__data_size+0x1b2>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__data_size+0x148>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__data_size+0x1f6>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__data_size+0x1ce>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__data_size+0x1f6>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__data_size+0x1e0>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__data_size+0x1f6>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__data_size+0x8a>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__data_size+0x8a>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__data_size+0x8a>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__data_size+0x1f6>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__data_size+0x1f6>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__data_size+0x1e0>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__data_size+0x1f6>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__data_size+0x1a4>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__data_size+0x1f6>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__data_size+0x148>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__data_size+0x1e0>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__data_size+0x1a4>
     93a:	e712      	b.n	762 <__data_size+0x1f6>

0000093c <__gedf2>:
     93c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     940:	e006      	b.n	950 <__cmpdf2+0x4>
     942:	bf00      	nop

00000944 <__ledf2>:
     944:	f04f 0c01 	mov.w	ip, #1
     948:	e002      	b.n	950 <__cmpdf2+0x4>
     94a:	bf00      	nop

0000094c <__cmpdf2>:
     94c:	f04f 0c01 	mov.w	ip, #1
     950:	f84d cd04 	str.w	ip, [sp, #-4]!
     954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     95c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     960:	bf18      	it	ne
     962:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     966:	d01b      	beq.n	9a0 <__cmpdf2+0x54>
     968:	b001      	add	sp, #4
     96a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     96e:	bf0c      	ite	eq
     970:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     974:	ea91 0f03 	teqne	r1, r3
     978:	bf02      	ittt	eq
     97a:	ea90 0f02 	teqeq	r0, r2
     97e:	2000      	moveq	r0, #0
     980:	4770      	bxeq	lr
     982:	f110 0f00 	cmn.w	r0, #0
     986:	ea91 0f03 	teq	r1, r3
     98a:	bf58      	it	pl
     98c:	4299      	cmppl	r1, r3
     98e:	bf08      	it	eq
     990:	4290      	cmpeq	r0, r2
     992:	bf2c      	ite	cs
     994:	17d8      	asrcs	r0, r3, #31
     996:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     99a:	f040 0001 	orr.w	r0, r0, #1
     99e:	4770      	bx	lr
     9a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9a8:	d102      	bne.n	9b0 <__cmpdf2+0x64>
     9aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9ae:	d107      	bne.n	9c0 <__cmpdf2+0x74>
     9b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9b8:	d1d6      	bne.n	968 <__cmpdf2+0x1c>
     9ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9be:	d0d3      	beq.n	968 <__cmpdf2+0x1c>
     9c0:	f85d 0b04 	ldr.w	r0, [sp], #4
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <__aeabi_cdrcmple>:
     9c8:	4684      	mov	ip, r0
     9ca:	4610      	mov	r0, r2
     9cc:	4662      	mov	r2, ip
     9ce:	468c      	mov	ip, r1
     9d0:	4619      	mov	r1, r3
     9d2:	4663      	mov	r3, ip
     9d4:	e000      	b.n	9d8 <__aeabi_cdcmpeq>
     9d6:	bf00      	nop

000009d8 <__aeabi_cdcmpeq>:
     9d8:	b501      	push	{r0, lr}
     9da:	f7ff ffb7 	bl	94c <__cmpdf2>
     9de:	2800      	cmp	r0, #0
     9e0:	bf48      	it	mi
     9e2:	f110 0f00 	cmnmi.w	r0, #0
     9e6:	bd01      	pop	{r0, pc}

000009e8 <__aeabi_dcmpeq>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff fff4 	bl	9d8 <__aeabi_cdcmpeq>
     9f0:	bf0c      	ite	eq
     9f2:	2001      	moveq	r0, #1
     9f4:	2000      	movne	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_dcmplt>:
     9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
     a00:	f7ff ffea 	bl	9d8 <__aeabi_cdcmpeq>
     a04:	bf34      	ite	cc
     a06:	2001      	movcc	r0, #1
     a08:	2000      	movcs	r0, #0
     a0a:	f85d fb08 	ldr.w	pc, [sp], #8
     a0e:	bf00      	nop

00000a10 <__aeabi_dcmple>:
     a10:	f84d ed08 	str.w	lr, [sp, #-8]!
     a14:	f7ff ffe0 	bl	9d8 <__aeabi_cdcmpeq>
     a18:	bf94      	ite	ls
     a1a:	2001      	movls	r0, #1
     a1c:	2000      	movhi	r0, #0
     a1e:	f85d fb08 	ldr.w	pc, [sp], #8
     a22:	bf00      	nop

00000a24 <__aeabi_dcmpge>:
     a24:	f84d ed08 	str.w	lr, [sp, #-8]!
     a28:	f7ff ffce 	bl	9c8 <__aeabi_cdrcmple>
     a2c:	bf94      	ite	ls
     a2e:	2001      	movls	r0, #1
     a30:	2000      	movhi	r0, #0
     a32:	f85d fb08 	ldr.w	pc, [sp], #8
     a36:	bf00      	nop

00000a38 <__aeabi_dcmpgt>:
     a38:	f84d ed08 	str.w	lr, [sp, #-8]!
     a3c:	f7ff ffc4 	bl	9c8 <__aeabi_cdrcmple>
     a40:	bf34      	ite	cc
     a42:	2001      	movcc	r0, #1
     a44:	2000      	movcs	r0, #0
     a46:	f85d fb08 	ldr.w	pc, [sp], #8
     a4a:	bf00      	nop

00000a4c <__aeabi_d2iz>:
     a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d215      	bcs.n	a82 <__aeabi_d2iz+0x36>
     a56:	d511      	bpl.n	a7c <__aeabi_d2iz+0x30>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d912      	bls.n	a88 <__aeabi_d2iz+0x3c>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a72:	fa23 f002 	lsr.w	r0, r3, r2
     a76:	bf18      	it	ne
     a78:	4240      	negne	r0, r0
     a7a:	4770      	bx	lr
     a7c:	f04f 0000 	mov.w	r0, #0
     a80:	4770      	bx	lr
     a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a86:	d105      	bne.n	a94 <__aeabi_d2iz+0x48>
     a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a8c:	bf08      	it	eq
     a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a92:	4770      	bx	lr
     a94:	f04f 0000 	mov.w	r0, #0
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_uldivmod>:
     a9c:	b953      	cbnz	r3, ab4 <__aeabi_uldivmod+0x18>
     a9e:	b94a      	cbnz	r2, ab4 <__aeabi_uldivmod+0x18>
     aa0:	2900      	cmp	r1, #0
     aa2:	bf08      	it	eq
     aa4:	2800      	cmpeq	r0, #0
     aa6:	bf1c      	itt	ne
     aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     ab0:	f000 b974 	b.w	d9c <__aeabi_idiv0>
     ab4:	f1ad 0c08 	sub.w	ip, sp, #8
     ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     abc:	f000 f806 	bl	acc <__udivmoddi4>
     ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
     ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ac8:	b004      	add	sp, #16
     aca:	4770      	bx	lr

00000acc <__udivmoddi4>:
     acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ad0:	9d08      	ldr	r5, [sp, #32]
     ad2:	4604      	mov	r4, r0
     ad4:	468e      	mov	lr, r1
     ad6:	2b00      	cmp	r3, #0
     ad8:	d14d      	bne.n	b76 <__udivmoddi4+0xaa>
     ada:	428a      	cmp	r2, r1
     adc:	4694      	mov	ip, r2
     ade:	d969      	bls.n	bb4 <__udivmoddi4+0xe8>
     ae0:	fab2 f282 	clz	r2, r2
     ae4:	b152      	cbz	r2, afc <__udivmoddi4+0x30>
     ae6:	fa01 f302 	lsl.w	r3, r1, r2
     aea:	f1c2 0120 	rsb	r1, r2, #32
     aee:	fa20 f101 	lsr.w	r1, r0, r1
     af2:	fa0c fc02 	lsl.w	ip, ip, r2
     af6:	ea41 0e03 	orr.w	lr, r1, r3
     afa:	4094      	lsls	r4, r2
     afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
     b00:	0c21      	lsrs	r1, r4, #16
     b02:	fbbe f6f8 	udiv	r6, lr, r8
     b06:	fa1f f78c 	uxth.w	r7, ip
     b0a:	fb08 e316 	mls	r3, r8, r6, lr
     b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     b12:	fb06 f107 	mul.w	r1, r6, r7
     b16:	4299      	cmp	r1, r3
     b18:	d90a      	bls.n	b30 <__udivmoddi4+0x64>
     b1a:	eb1c 0303 	adds.w	r3, ip, r3
     b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
     b22:	f080 811f 	bcs.w	d64 <__udivmoddi4+0x298>
     b26:	4299      	cmp	r1, r3
     b28:	f240 811c 	bls.w	d64 <__udivmoddi4+0x298>
     b2c:	3e02      	subs	r6, #2
     b2e:	4463      	add	r3, ip
     b30:	1a5b      	subs	r3, r3, r1
     b32:	b2a4      	uxth	r4, r4
     b34:	fbb3 f0f8 	udiv	r0, r3, r8
     b38:	fb08 3310 	mls	r3, r8, r0, r3
     b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b40:	fb00 f707 	mul.w	r7, r0, r7
     b44:	42a7      	cmp	r7, r4
     b46:	d90a      	bls.n	b5e <__udivmoddi4+0x92>
     b48:	eb1c 0404 	adds.w	r4, ip, r4
     b4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b50:	f080 810a 	bcs.w	d68 <__udivmoddi4+0x29c>
     b54:	42a7      	cmp	r7, r4
     b56:	f240 8107 	bls.w	d68 <__udivmoddi4+0x29c>
     b5a:	4464      	add	r4, ip
     b5c:	3802      	subs	r0, #2
     b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     b62:	1be4      	subs	r4, r4, r7
     b64:	2600      	movs	r6, #0
     b66:	b11d      	cbz	r5, b70 <__udivmoddi4+0xa4>
     b68:	40d4      	lsrs	r4, r2
     b6a:	2300      	movs	r3, #0
     b6c:	e9c5 4300 	strd	r4, r3, [r5]
     b70:	4631      	mov	r1, r6
     b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b76:	428b      	cmp	r3, r1
     b78:	d909      	bls.n	b8e <__udivmoddi4+0xc2>
     b7a:	2d00      	cmp	r5, #0
     b7c:	f000 80ef 	beq.w	d5e <__udivmoddi4+0x292>
     b80:	2600      	movs	r6, #0
     b82:	e9c5 0100 	strd	r0, r1, [r5]
     b86:	4630      	mov	r0, r6
     b88:	4631      	mov	r1, r6
     b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b8e:	fab3 f683 	clz	r6, r3
     b92:	2e00      	cmp	r6, #0
     b94:	d14a      	bne.n	c2c <__udivmoddi4+0x160>
     b96:	428b      	cmp	r3, r1
     b98:	d302      	bcc.n	ba0 <__udivmoddi4+0xd4>
     b9a:	4282      	cmp	r2, r0
     b9c:	f200 80f9 	bhi.w	d92 <__udivmoddi4+0x2c6>
     ba0:	1a84      	subs	r4, r0, r2
     ba2:	eb61 0303 	sbc.w	r3, r1, r3
     ba6:	2001      	movs	r0, #1
     ba8:	469e      	mov	lr, r3
     baa:	2d00      	cmp	r5, #0
     bac:	d0e0      	beq.n	b70 <__udivmoddi4+0xa4>
     bae:	e9c5 4e00 	strd	r4, lr, [r5]
     bb2:	e7dd      	b.n	b70 <__udivmoddi4+0xa4>
     bb4:	b902      	cbnz	r2, bb8 <__udivmoddi4+0xec>
     bb6:	deff      	udf	#255	; 0xff
     bb8:	fab2 f282 	clz	r2, r2
     bbc:	2a00      	cmp	r2, #0
     bbe:	f040 8092 	bne.w	ce6 <__udivmoddi4+0x21a>
     bc2:	eba1 010c 	sub.w	r1, r1, ip
     bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
     bca:	fa1f fe8c 	uxth.w	lr, ip
     bce:	2601      	movs	r6, #1
     bd0:	0c20      	lsrs	r0, r4, #16
     bd2:	fbb1 f3f7 	udiv	r3, r1, r7
     bd6:	fb07 1113 	mls	r1, r7, r3, r1
     bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     bde:	fb0e f003 	mul.w	r0, lr, r3
     be2:	4288      	cmp	r0, r1
     be4:	d908      	bls.n	bf8 <__udivmoddi4+0x12c>
     be6:	eb1c 0101 	adds.w	r1, ip, r1
     bea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     bee:	d202      	bcs.n	bf6 <__udivmoddi4+0x12a>
     bf0:	4288      	cmp	r0, r1
     bf2:	f200 80cb 	bhi.w	d8c <__udivmoddi4+0x2c0>
     bf6:	4643      	mov	r3, r8
     bf8:	1a09      	subs	r1, r1, r0
     bfa:	b2a4      	uxth	r4, r4
     bfc:	fbb1 f0f7 	udiv	r0, r1, r7
     c00:	fb07 1110 	mls	r1, r7, r0, r1
     c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
     c08:	fb0e fe00 	mul.w	lr, lr, r0
     c0c:	45a6      	cmp	lr, r4
     c0e:	d908      	bls.n	c22 <__udivmoddi4+0x156>
     c10:	eb1c 0404 	adds.w	r4, ip, r4
     c14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
     c18:	d202      	bcs.n	c20 <__udivmoddi4+0x154>
     c1a:	45a6      	cmp	lr, r4
     c1c:	f200 80bb 	bhi.w	d96 <__udivmoddi4+0x2ca>
     c20:	4608      	mov	r0, r1
     c22:	eba4 040e 	sub.w	r4, r4, lr
     c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     c2a:	e79c      	b.n	b66 <__udivmoddi4+0x9a>
     c2c:	f1c6 0720 	rsb	r7, r6, #32
     c30:	40b3      	lsls	r3, r6
     c32:	fa22 fc07 	lsr.w	ip, r2, r7
     c36:	ea4c 0c03 	orr.w	ip, ip, r3
     c3a:	fa20 f407 	lsr.w	r4, r0, r7
     c3e:	fa01 f306 	lsl.w	r3, r1, r6
     c42:	431c      	orrs	r4, r3
     c44:	40f9      	lsrs	r1, r7
     c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
     c4a:	fa00 f306 	lsl.w	r3, r0, r6
     c4e:	fbb1 f8f9 	udiv	r8, r1, r9
     c52:	0c20      	lsrs	r0, r4, #16
     c54:	fa1f fe8c 	uxth.w	lr, ip
     c58:	fb09 1118 	mls	r1, r9, r8, r1
     c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     c60:	fb08 f00e 	mul.w	r0, r8, lr
     c64:	4288      	cmp	r0, r1
     c66:	fa02 f206 	lsl.w	r2, r2, r6
     c6a:	d90b      	bls.n	c84 <__udivmoddi4+0x1b8>
     c6c:	eb1c 0101 	adds.w	r1, ip, r1
     c70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     c74:	f080 8088 	bcs.w	d88 <__udivmoddi4+0x2bc>
     c78:	4288      	cmp	r0, r1
     c7a:	f240 8085 	bls.w	d88 <__udivmoddi4+0x2bc>
     c7e:	f1a8 0802 	sub.w	r8, r8, #2
     c82:	4461      	add	r1, ip
     c84:	1a09      	subs	r1, r1, r0
     c86:	b2a4      	uxth	r4, r4
     c88:	fbb1 f0f9 	udiv	r0, r1, r9
     c8c:	fb09 1110 	mls	r1, r9, r0, r1
     c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     c94:	fb00 fe0e 	mul.w	lr, r0, lr
     c98:	458e      	cmp	lr, r1
     c9a:	d908      	bls.n	cae <__udivmoddi4+0x1e2>
     c9c:	eb1c 0101 	adds.w	r1, ip, r1
     ca0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     ca4:	d26c      	bcs.n	d80 <__udivmoddi4+0x2b4>
     ca6:	458e      	cmp	lr, r1
     ca8:	d96a      	bls.n	d80 <__udivmoddi4+0x2b4>
     caa:	3802      	subs	r0, #2
     cac:	4461      	add	r1, ip
     cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     cb2:	fba0 9402 	umull	r9, r4, r0, r2
     cb6:	eba1 010e 	sub.w	r1, r1, lr
     cba:	42a1      	cmp	r1, r4
     cbc:	46c8      	mov	r8, r9
     cbe:	46a6      	mov	lr, r4
     cc0:	d356      	bcc.n	d70 <__udivmoddi4+0x2a4>
     cc2:	d053      	beq.n	d6c <__udivmoddi4+0x2a0>
     cc4:	b15d      	cbz	r5, cde <__udivmoddi4+0x212>
     cc6:	ebb3 0208 	subs.w	r2, r3, r8
     cca:	eb61 010e 	sbc.w	r1, r1, lr
     cce:	fa01 f707 	lsl.w	r7, r1, r7
     cd2:	fa22 f306 	lsr.w	r3, r2, r6
     cd6:	40f1      	lsrs	r1, r6
     cd8:	431f      	orrs	r7, r3
     cda:	e9c5 7100 	strd	r7, r1, [r5]
     cde:	2600      	movs	r6, #0
     ce0:	4631      	mov	r1, r6
     ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ce6:	f1c2 0320 	rsb	r3, r2, #32
     cea:	40d8      	lsrs	r0, r3
     cec:	fa0c fc02 	lsl.w	ip, ip, r2
     cf0:	fa21 f303 	lsr.w	r3, r1, r3
     cf4:	4091      	lsls	r1, r2
     cf6:	4301      	orrs	r1, r0
     cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     cfc:	fa1f fe8c 	uxth.w	lr, ip
     d00:	fbb3 f0f7 	udiv	r0, r3, r7
     d04:	fb07 3610 	mls	r6, r7, r0, r3
     d08:	0c0b      	lsrs	r3, r1, #16
     d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     d0e:	fb00 f60e 	mul.w	r6, r0, lr
     d12:	429e      	cmp	r6, r3
     d14:	fa04 f402 	lsl.w	r4, r4, r2
     d18:	d908      	bls.n	d2c <__udivmoddi4+0x260>
     d1a:	eb1c 0303 	adds.w	r3, ip, r3
     d1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     d22:	d22f      	bcs.n	d84 <__udivmoddi4+0x2b8>
     d24:	429e      	cmp	r6, r3
     d26:	d92d      	bls.n	d84 <__udivmoddi4+0x2b8>
     d28:	3802      	subs	r0, #2
     d2a:	4463      	add	r3, ip
     d2c:	1b9b      	subs	r3, r3, r6
     d2e:	b289      	uxth	r1, r1
     d30:	fbb3 f6f7 	udiv	r6, r3, r7
     d34:	fb07 3316 	mls	r3, r7, r6, r3
     d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d3c:	fb06 f30e 	mul.w	r3, r6, lr
     d40:	428b      	cmp	r3, r1
     d42:	d908      	bls.n	d56 <__udivmoddi4+0x28a>
     d44:	eb1c 0101 	adds.w	r1, ip, r1
     d48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
     d4c:	d216      	bcs.n	d7c <__udivmoddi4+0x2b0>
     d4e:	428b      	cmp	r3, r1
     d50:	d914      	bls.n	d7c <__udivmoddi4+0x2b0>
     d52:	3e02      	subs	r6, #2
     d54:	4461      	add	r1, ip
     d56:	1ac9      	subs	r1, r1, r3
     d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     d5c:	e738      	b.n	bd0 <__udivmoddi4+0x104>
     d5e:	462e      	mov	r6, r5
     d60:	4628      	mov	r0, r5
     d62:	e705      	b.n	b70 <__udivmoddi4+0xa4>
     d64:	4606      	mov	r6, r0
     d66:	e6e3      	b.n	b30 <__udivmoddi4+0x64>
     d68:	4618      	mov	r0, r3
     d6a:	e6f8      	b.n	b5e <__udivmoddi4+0x92>
     d6c:	454b      	cmp	r3, r9
     d6e:	d2a9      	bcs.n	cc4 <__udivmoddi4+0x1f8>
     d70:	ebb9 0802 	subs.w	r8, r9, r2
     d74:	eb64 0e0c 	sbc.w	lr, r4, ip
     d78:	3801      	subs	r0, #1
     d7a:	e7a3      	b.n	cc4 <__udivmoddi4+0x1f8>
     d7c:	4646      	mov	r6, r8
     d7e:	e7ea      	b.n	d56 <__udivmoddi4+0x28a>
     d80:	4620      	mov	r0, r4
     d82:	e794      	b.n	cae <__udivmoddi4+0x1e2>
     d84:	4640      	mov	r0, r8
     d86:	e7d1      	b.n	d2c <__udivmoddi4+0x260>
     d88:	46d0      	mov	r8, sl
     d8a:	e77b      	b.n	c84 <__udivmoddi4+0x1b8>
     d8c:	3b02      	subs	r3, #2
     d8e:	4461      	add	r1, ip
     d90:	e732      	b.n	bf8 <__udivmoddi4+0x12c>
     d92:	4630      	mov	r0, r6
     d94:	e709      	b.n	baa <__udivmoddi4+0xde>
     d96:	4464      	add	r4, ip
     d98:	3802      	subs	r0, #2
     d9a:	e742      	b.n	c22 <__udivmoddi4+0x156>

00000d9c <__aeabi_idiv0>:
     d9c:	4770      	bx	lr
     d9e:	bf00      	nop

00000da0 <__aeabi_dcmpun>:
     da0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     da8:	d102      	bne.n	db0 <__aeabi_dcmpun+0x10>
     daa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     dae:	d10a      	bne.n	dc6 <__aeabi_dcmpun+0x26>
     db0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     db8:	d102      	bne.n	dc0 <__aeabi_dcmpun+0x20>
     dba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     dbe:	d102      	bne.n	dc6 <__aeabi_dcmpun+0x26>
     dc0:	f04f 0000 	mov.w	r0, #0
     dc4:	4770      	bx	lr
     dc6:	f04f 0001 	mov.w	r0, #1
     dca:	4770      	bx	lr

00000dcc <strlen>:
     dcc:	4603      	mov	r3, r0
     dce:	f813 2b01 	ldrb.w	r2, [r3], #1
     dd2:	2a00      	cmp	r2, #0
     dd4:	d1fb      	bne.n	dce <strlen+0x2>
     dd6:	1a18      	subs	r0, r3, r0
     dd8:	3801      	subs	r0, #1
     dda:	4770      	bx	lr
     ddc:	0000      	movs	r0, r0
	...

00000de0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de4:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
     de8:	ed9f 8bab 	vldr	d8, [pc, #684]	; 1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
{
     dec:	b09b      	sub	sp, #108	; 0x6c
     dee:	4681      	mov	r9, r0
     df0:	468a      	mov	sl, r1
     df2:	4615      	mov	r5, r2
     df4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     df6:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     df8:	7828      	ldrb	r0, [r5, #0]
     dfa:	b910      	cbnz	r0, e02 <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
     dfc:	4630      	mov	r0, r6
     dfe:	f000 bdcb 	b.w	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
			OUTC(*fp++);
     e02:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
     e04:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     e06:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
     e08:	d006      	beq.n	e18 <cbvprintf+0x38>
			OUTC(*fp++);
     e0a:	4651      	mov	r1, sl
			OUTC('%');
     e0c:	47c8      	blx	r9
     e0e:	2800      	cmp	r0, #0
     e10:	f2c0 85c2 	blt.w	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
     e14:	3601      	adds	r6, #1
		if (bps == NULL) {
     e16:	e22e      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
		} state = {
     e18:	2218      	movs	r2, #24
     e1a:	2100      	movs	r1, #0
     e1c:	a80c      	add	r0, sp, #48	; 0x30
     e1e:	f007 ff50 	bl	8cc2 <memset>
	if (*sp == '%') {
     e22:	786b      	ldrb	r3, [r5, #1]
     e24:	2b25      	cmp	r3, #37	; 0x25
     e26:	d059      	beq.n	edc <cbvprintf+0xfc>
     e28:	1c6a      	adds	r2, r5, #1
     e2a:	4617      	mov	r7, r2
		switch (*sp) {
     e2c:	f812 3b01 	ldrb.w	r3, [r2], #1
     e30:	2b2b      	cmp	r3, #43	; 0x2b
     e32:	f000 808b 	beq.w	f4c <cbvprintf+0x16c>
     e36:	d879      	bhi.n	f2c <cbvprintf+0x14c>
     e38:	2b20      	cmp	r3, #32
     e3a:	f000 808c 	beq.w	f56 <cbvprintf+0x176>
     e3e:	2b23      	cmp	r3, #35	; 0x23
     e40:	f000 808e 	beq.w	f60 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
     e44:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     e48:	f003 0244 	and.w	r2, r3, #68	; 0x44
     e4c:	2a44      	cmp	r2, #68	; 0x44
     e4e:	d103      	bne.n	e58 <cbvprintf+0x78>
		conv->flag_zero = false;
     e50:	f36f 1386 	bfc	r3, #6, #1
     e54:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
     e58:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     e5c:	970a      	str	r7, [sp, #40]	; 0x28
     e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     e62:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
     e66:	783b      	ldrb	r3, [r7, #0]
     e68:	2b2a      	cmp	r3, #42	; 0x2a
     e6a:	d17e      	bne.n	f6a <cbvprintf+0x18a>
		conv->width_star = true;
     e6c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     e70:	f043 0301 	orr.w	r3, r3, #1
     e74:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
     e78:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
     e7a:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
     e7c:	781a      	ldrb	r2, [r3, #0]
     e7e:	2a2e      	cmp	r2, #46	; 0x2e
     e80:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     e84:	bf0c      	ite	eq
     e86:	2101      	moveq	r1, #1
     e88:	2100      	movne	r1, #0
     e8a:	f361 0241 	bfi	r2, r1, #1, #1
     e8e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
     e92:	d10b      	bne.n	eac <cbvprintf+0xcc>
	++sp;
     e94:	1c5a      	adds	r2, r3, #1
     e96:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
     e98:	785a      	ldrb	r2, [r3, #1]
     e9a:	2a2a      	cmp	r2, #42	; 0x2a
     e9c:	d17b      	bne.n	f96 <cbvprintf+0x1b6>
		conv->prec_star = true;
     e9e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     ea2:	f042 0204 	orr.w	r2, r2, #4
     ea6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
     eaa:	3302      	adds	r3, #2
	switch (*sp) {
     eac:	4619      	mov	r1, r3
     eae:	f811 0b01 	ldrb.w	r0, [r1], #1
     eb2:	286c      	cmp	r0, #108	; 0x6c
     eb4:	f000 80cf 	beq.w	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
     eb8:	d87d      	bhi.n	fb6 <cbvprintf+0x1d6>
     eba:	2868      	cmp	r0, #104	; 0x68
     ebc:	f000 8084 	beq.w	fc8 <cbvprintf+0x1e8>
     ec0:	286a      	cmp	r0, #106	; 0x6a
     ec2:	f000 80d2 	beq.w	106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
     ec6:	284c      	cmp	r0, #76	; 0x4c
     ec8:	f000 80d6 	beq.w	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
		conv->length_mod = LENGTH_NONE;
     ecc:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     ed0:	f36f 02c6 	bfc	r2, #3, #4
     ed4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
     ed8:	4619      	mov	r1, r3
     eda:	e080      	b.n	fde <cbvprintf+0x1fe>
		conv->specifier = *sp++;
     edc:	1caa      	adds	r2, r5, #2
     ede:	9202      	str	r2, [sp, #8]
     ee0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
     ee4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     ee8:	07df      	lsls	r7, r3, #31
     eea:	f140 8178 	bpl.w	11de <CONFIG_FPROTECT_BLOCK_SIZE+0x1de>
			width = va_arg(ap, int);
     eee:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
     ef2:	f1bb 0f00 	cmp.w	fp, #0
     ef6:	da07      	bge.n	f08 <cbvprintf+0x128>
				conv->flag_dash = true;
     ef8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     efc:	f042 0204 	orr.w	r2, r2, #4
     f00:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
     f04:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
     f08:	0758      	lsls	r0, r3, #29
     f0a:	f140 8171 	bpl.w	11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>
			int arg = va_arg(ap, int);
     f0e:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     f12:	f1b8 0f00 	cmp.w	r8, #0
     f16:	f280 8170 	bge.w	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
				conv->prec_present = false;
     f1a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     f1e:	f36f 0341 	bfc	r3, #1, #1
     f22:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
     f26:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     f2a:	e166      	b.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
		switch (*sp) {
     f2c:	2b2d      	cmp	r3, #45	; 0x2d
     f2e:	d006      	beq.n	f3e <cbvprintf+0x15e>
     f30:	2b30      	cmp	r3, #48	; 0x30
     f32:	d187      	bne.n	e44 <cbvprintf+0x64>
			conv->flag_zero = true;
     f34:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f3c:	e003      	b.n	f46 <cbvprintf+0x166>
			conv->flag_dash = true;
     f3e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     f42:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
     f46:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
     f4a:	e76e      	b.n	e2a <cbvprintf+0x4a>
			conv->flag_plus = true;
     f4c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     f50:	f043 0308 	orr.w	r3, r3, #8
     f54:	e7f7      	b.n	f46 <cbvprintf+0x166>
			conv->flag_space = true;
     f56:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     f5a:	f043 0310 	orr.w	r3, r3, #16
     f5e:	e7f2      	b.n	f46 <cbvprintf+0x166>
			conv->flag_hash = true;
     f60:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     f64:	f043 0320 	orr.w	r3, r3, #32
     f68:	e7ed      	b.n	f46 <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
     f6a:	a80a      	add	r0, sp, #40	; 0x28
     f6c:	f001 fcee 	bl	294c <extract_decimal>
	if (sp != wp) {
     f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     f72:	42bb      	cmp	r3, r7
     f74:	d081      	beq.n	e7a <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
     f76:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
     f7a:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
     f7c:	f3c7 0140 	ubfx	r1, r7, #1, #1
     f80:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
     f84:	0052      	lsls	r2, r2, #1
     f86:	f062 027f 	orn	r2, r2, #127	; 0x7f
     f8a:	f007 017d 	and.w	r1, r7, #125	; 0x7d
     f8e:	430a      	orrs	r2, r1
     f90:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
     f94:	e771      	b.n	e7a <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
     f96:	a80a      	add	r0, sp, #40	; 0x28
     f98:	f001 fcd8 	bl	294c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
     f9c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
     fa0:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
     fa2:	f3c3 0240 	ubfx	r2, r3, #1, #1
     fa6:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
     faa:	f360 0341 	bfi	r3, r0, #1, #1
     fae:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
     fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     fb4:	e77a      	b.n	eac <cbvprintf+0xcc>
	switch (*sp) {
     fb6:	2874      	cmp	r0, #116	; 0x74
     fb8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     fbc:	d059      	beq.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
     fbe:	287a      	cmp	r0, #122	; 0x7a
     fc0:	d184      	bne.n	ecc <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
     fc2:	4613      	mov	r3, r2
     fc4:	2206      	movs	r2, #6
     fc6:	e041      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
		if (*++sp == 'h') {
     fc8:	785a      	ldrb	r2, [r3, #1]
     fca:	2a68      	cmp	r2, #104	; 0x68
     fcc:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     fd0:	d13a      	bne.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
			conv->length_mod = LENGTH_HH;
     fd2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     fd4:	f361 02c6 	bfi	r2, r1, #3, #4
     fd8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
     fdc:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
     fde:	460b      	mov	r3, r1
     fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
     fe4:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
     fe6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     fe8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
     fec:	f200 80cd 	bhi.w	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
     ff0:	2a57      	cmp	r2, #87	; 0x57
     ff2:	d855      	bhi.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
     ff4:	2a41      	cmp	r2, #65	; 0x41
     ff6:	d004      	beq.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     ff8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
     ffc:	2b02      	cmp	r3, #2
     ffe:	f200 80c4 	bhi.w	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
		conv->specifier_cat = SPECIFIER_FP;
    1002:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1006:	2104      	movs	r1, #4
    1008:	f361 0302 	bfi	r3, r1, #0, #3
    100c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    1010:	f002 03df 	and.w	r3, r2, #223	; 0xdf
    1014:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
    1018:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
    101c:	f1d8 0300 	rsbs	r3, r8, #0
    1020:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
    1024:	f363 12c7 	bfi	r2, r3, #7, #1
    1028:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
    102c:	b2d3      	uxtb	r3, r2
    102e:	0612      	lsls	r2, r2, #24
    1030:	f100 80d3 	bmi.w	11da <CONFIG_FPROTECT_BLOCK_SIZE+0x1da>
		if (conv->length_mod == LENGTH_L) {
    1034:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1038:	2a18      	cmp	r2, #24
    103a:	f040 80a3 	bne.w	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
			conv->length_mod = LENGTH_NONE;
    103e:	f36f 03c6 	bfc	r3, #3, #4
    1042:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    1046:	e08a      	b.n	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
			conv->length_mod = LENGTH_H;
    1048:	4613      	mov	r3, r2
    104a:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    104c:	f362 03c6 	bfi	r3, r2, #3, #4
    1050:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    1054:	e7c3      	b.n	fde <cbvprintf+0x1fe>
		if (*++sp == 'l') {
    1056:	785a      	ldrb	r2, [r3, #1]
    1058:	2a6c      	cmp	r2, #108	; 0x6c
    105a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    105e:	d101      	bne.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
			conv->length_mod = LENGTH_LL;
    1060:	2104      	movs	r1, #4
    1062:	e7b7      	b.n	fd4 <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
    1064:	4613      	mov	r3, r2
    1066:	2203      	movs	r2, #3
    1068:	e7f0      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
		conv->length_mod = LENGTH_J;
    106a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    106e:	2205      	movs	r2, #5
    1070:	e7ec      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
		conv->length_mod = LENGTH_T;
    1072:	4613      	mov	r3, r2
    1074:	2207      	movs	r2, #7
    1076:	e7e9      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
		conv->unsupported = true;
    1078:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    107c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1080:	f023 0302 	bic.w	r3, r3, #2
    1084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1088:	f043 0302 	orr.w	r3, r3, #2
    108c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    1090:	e7a5      	b.n	fde <cbvprintf+0x1fe>
    1092:	bf00      	nop
    1094:	f3af 8000 	nop.w
    1098:	00000000 	.word	0x00000000
    109c:	08000000 	.word	0x08000000
	switch (conv->specifier) {
    10a0:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    10a4:	2b20      	cmp	r3, #32
    10a6:	d870      	bhi.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    10a8:	a101      	add	r1, pc, #4	; (adr r1, 10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    10aa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    10ae:	bf00      	nop
    10b0:	00001163 	.word	0x00001163
    10b4:	0000118b 	.word	0x0000118b
    10b8:	0000118b 	.word	0x0000118b
    10bc:	0000118b 	.word	0x0000118b
    10c0:	0000118b 	.word	0x0000118b
    10c4:	0000118b 	.word	0x0000118b
    10c8:	0000118b 	.word	0x0000118b
    10cc:	0000118b 	.word	0x0000118b
    10d0:	0000118b 	.word	0x0000118b
    10d4:	00001003 	.word	0x00001003
    10d8:	0000118b 	.word	0x0000118b
    10dc:	00001163 	.word	0x00001163
    10e0:	00001135 	.word	0x00001135
    10e4:	00001003 	.word	0x00001003
    10e8:	00001003 	.word	0x00001003
    10ec:	00001003 	.word	0x00001003
    10f0:	0000118b 	.word	0x0000118b
    10f4:	00001135 	.word	0x00001135
    10f8:	0000118b 	.word	0x0000118b
    10fc:	0000118b 	.word	0x0000118b
    1100:	0000118b 	.word	0x0000118b
    1104:	0000118b 	.word	0x0000118b
    1108:	00001199 	.word	0x00001199
    110c:	00001163 	.word	0x00001163
    1110:	000011bd 	.word	0x000011bd
    1114:	0000118b 	.word	0x0000118b
    1118:	0000118b 	.word	0x0000118b
    111c:	000011bd 	.word	0x000011bd
    1120:	0000118b 	.word	0x0000118b
    1124:	00001163 	.word	0x00001163
    1128:	0000118b 	.word	0x0000118b
    112c:	0000118b 	.word	0x0000118b
    1130:	00001163 	.word	0x00001163
		conv->specifier_cat = SPECIFIER_SINT;
    1134:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1138:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    113a:	f361 0302 	bfi	r3, r1, #0, #3
    113e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1142:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1146:	f003 0378 	and.w	r3, r3, #120	; 0x78
    114a:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    114c:	bf02      	ittt	eq
    114e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    1152:	f041 0101 	orreq.w	r1, r1, #1
    1156:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    115a:	2a63      	cmp	r2, #99	; 0x63
    115c:	d005      	beq.n	116a <CONFIG_FPROTECT_BLOCK_SIZE+0x16a>
	bool unsupported = false;
    115e:	2300      	movs	r3, #0
    1160:	e006      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
		conv->specifier_cat = SPECIFIER_UINT;
    1162:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1166:	2102      	movs	r1, #2
    1168:	e7e7      	b.n	113a <CONFIG_FPROTECT_BLOCK_SIZE+0x13a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    116a:	3b00      	subs	r3, #0
    116c:	bf18      	it	ne
    116e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1170:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    1174:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1178:	430b      	orrs	r3, r1
    117a:	f363 0241 	bfi	r2, r3, #1, #1
    117e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    1182:	e6af      	b.n	ee4 <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
    1184:	f013 0f38 	tst.w	r3, #56	; 0x38
    1188:	d0e9      	beq.n	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
			conv->invalid = true;
    118a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    118e:	f043 0301 	orr.w	r3, r3, #1
    1192:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    1196:	e7e2      	b.n	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
		conv->specifier_cat = SPECIFIER_PTR;
    1198:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    119c:	2203      	movs	r2, #3
    119e:	f362 0302 	bfi	r3, r2, #0, #3
    11a2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    11a6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    11aa:	f003 0378 	and.w	r3, r3, #120	; 0x78
    11ae:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    11b2:	f1dc 0300 	rsbs	r3, ip, #0
    11b6:	eb43 030c 	adc.w	r3, r3, ip
    11ba:	e7d9      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
		conv->specifier_cat = SPECIFIER_PTR;
    11bc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    11c0:	2203      	movs	r2, #3
    11c2:	f362 0302 	bfi	r3, r2, #0, #3
    11c6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    11ca:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    11ce:	f013 0f78 	tst.w	r3, #120	; 0x78
    11d2:	bf14      	ite	ne
    11d4:	2301      	movne	r3, #1
    11d6:	2300      	moveq	r3, #0
    11d8:	e7ca      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
			unsupported = true;
    11da:	2301      	movs	r3, #1
    11dc:	e7c8      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
		} else if (conv->width_present) {
    11de:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    11e2:	2a00      	cmp	r2, #0
			width = conv->width_value;
    11e4:	bfb4      	ite	lt
    11e6:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    11ea:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    11ee:	e68b      	b.n	f08 <cbvprintf+0x128>
		} else if (conv->prec_present) {
    11f0:	0799      	lsls	r1, r3, #30
    11f2:	f57f ae98 	bpl.w	f26 <cbvprintf+0x146>
			precision = conv->prec_value;
    11f6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    11fa:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    11fe:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1200:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    1204:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1208:	f003 0207 	and.w	r2, r3, #7
    120c:	2a04      	cmp	r2, #4
    120e:	d109      	bne.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
		    && !conv->prec_present) {
    1210:	078a      	lsls	r2, r1, #30
    1212:	d407      	bmi.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
			if (conv->specifier_a) {
    1214:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    1218:	2a00      	cmp	r2, #0
    121a:	bfb4      	ite	lt
    121c:	f04f 080d 	movlt.w	r8, #13
    1220:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    1224:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1228:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    122a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    122e:	d137      	bne.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
			switch (length_mod) {
    1230:	1ecb      	subs	r3, r1, #3
    1232:	2b04      	cmp	r3, #4
    1234:	d821      	bhi.n	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
    1236:	e8df f003 	tbb	[pc, r3]
    123a:	0903      	.short	0x0903
    123c:	2009      	.short	0x2009
    123e:	20          	.byte	0x20
    123f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1240:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1244:	17da      	asrs	r2, r3, #31
    1246:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    124a:	e006      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
					(sint_value_type)va_arg(ap, intmax_t);
    124c:	3407      	adds	r4, #7
    124e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1252:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1256:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    125a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    125e:	07bb      	lsls	r3, r7, #30
    1260:	d056      	beq.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
			OUTS(sp, fp);
    1262:	9b02      	ldr	r3, [sp, #8]
    1264:	462a      	mov	r2, r5
    1266:	4651      	mov	r1, sl
    1268:	4648      	mov	r0, r9
    126a:	f006 ff19 	bl	80a0 <outs>
    126e:	2800      	cmp	r0, #0
    1270:	f2c0 8392 	blt.w	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    1274:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    1276:	9d02      	ldr	r5, [sp, #8]
    1278:	e5be      	b.n	df8 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    127a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    127e:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1280:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1284:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1288:	d105      	bne.n	1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
				value->uint = (unsigned char)value->uint;
    128a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    128e:	930c      	str	r3, [sp, #48]	; 0x30
    1290:	2300      	movs	r3, #0
    1292:	930d      	str	r3, [sp, #52]	; 0x34
    1294:	e7e1      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
			} else if (length_mod == LENGTH_H) {
    1296:	2902      	cmp	r1, #2
    1298:	d1df      	bne.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
				value->sint = (short)value->sint;
    129a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    129e:	e7d1      	b.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
		} else if (specifier_cat == SPECIFIER_UINT) {
    12a0:	2b02      	cmp	r3, #2
    12a2:	d123      	bne.n	12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
			switch (length_mod) {
    12a4:	1ecb      	subs	r3, r1, #3
    12a6:	2b04      	cmp	r3, #4
    12a8:	d813      	bhi.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    12aa:	e8df f003 	tbb	[pc, r3]
    12ae:	0a03      	.short	0x0a03
    12b0:	120a      	.short	0x120a
    12b2:	12          	.byte	0x12
    12b3:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    12b4:	6820      	ldr	r0, [r4, #0]
    12b6:	900c      	str	r0, [sp, #48]	; 0x30
    12b8:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
    12ba:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    12bc:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    12be:	461c      	mov	r4, r3
    12c0:	e7cb      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
					(uint_value_type)va_arg(ap,
    12c2:	1de3      	adds	r3, r4, #7
    12c4:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
    12c8:	ecb3 7b02 	vldmia	r3!, {d7}
    12cc:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
    12d0:	e7f5      	b.n	12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
					(uint_value_type)va_arg(ap, size_t);
    12d2:	f854 3b04 	ldr.w	r3, [r4], #4
    12d6:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    12d8:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    12da:	f04f 0300 	mov.w	r3, #0
    12de:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    12e0:	d0d3      	beq.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
			} else if (length_mod == LENGTH_H) {
    12e2:	2902      	cmp	r1, #2
    12e4:	d1b9      	bne.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
				value->uint = (unsigned short)value->uint;
    12e6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    12ea:	e7d0      	b.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
		} else if (specifier_cat == SPECIFIER_FP) {
    12ec:	2b04      	cmp	r3, #4
    12ee:	d109      	bne.n	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
					(sint_value_type)va_arg(ap, long long);
    12f0:	1de3      	adds	r3, r4, #7
    12f2:	f023 0307 	bic.w	r3, r3, #7
    12f6:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    12fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    12fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    1302:	e7aa      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1304:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1306:	bf04      	itt	eq
    1308:	f854 3b04 	ldreq.w	r3, [r4], #4
    130c:	930c      	streq	r3, [sp, #48]	; 0x30
    130e:	e7a4      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
		switch (conv->specifier) {
    1310:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    1314:	2a78      	cmp	r2, #120	; 0x78
    1316:	d8ae      	bhi.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
    1318:	2a57      	cmp	r2, #87	; 0x57
    131a:	f200 808c 	bhi.w	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
    131e:	2a25      	cmp	r2, #37	; 0x25
    1320:	f000 80d4 	beq.w	14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>
    1324:	2a24      	cmp	r2, #36	; 0x24
    1326:	d9a6      	bls.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
    1328:	2a41      	cmp	r2, #65	; 0x41
    132a:	d003      	beq.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    132c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1330:	2b02      	cmp	r3, #2
    1332:	d8a0      	bhi.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
	} u = {
    1334:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    1338:	2b00      	cmp	r3, #0
    133a:	f2c0 81b7 	blt.w	16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>
	} else if (conv->flag_plus) {
    133e:	0738      	lsls	r0, r7, #28
    1340:	f100 81b6 	bmi.w	16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>
		*sign = ' ';
    1344:	f017 0710 	ands.w	r7, r7, #16
    1348:	bf18      	it	ne
    134a:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    134c:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    1350:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1354:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    1358:	2d00      	cmp	r5, #0
    135a:	f040 81ab 	bne.w	16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>
    135e:	ea51 0003 	orrs.w	r0, r1, r3
    1362:	bf14      	ite	ne
    1364:	2001      	movne	r0, #1
    1366:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    1368:	02db      	lsls	r3, r3, #11
    136a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    136e:	02c9      	lsls	r1, r1, #11
		c = 'f';
    1370:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    1372:	ea45 0e01 	orr.w	lr, r5, r1
    1376:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    137a:	bf08      	it	eq
    137c:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    137e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    1382:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    1386:	f000 8203 	beq.w	1790 <CONFIG_FPROTECT_BLOCK_SIZE+0x790>
		if (is_subnormal) {
    138a:	2800      	cmp	r0, #0
    138c:	f040 81cb 	bne.w	1726 <CONFIG_FPROTECT_BLOCK_SIZE+0x726>
		fract |= BIT_63;
    1390:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1394:	f04f 0c00 	mov.w	ip, #0
    1398:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    139c:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    13a0:	9109      	str	r1, [sp, #36]	; 0x24
    13a2:	4663      	mov	r3, ip
		fract *= 5U;
    13a4:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    13a8:	f115 0f02 	cmn.w	r5, #2
    13ac:	f2c0 81c2 	blt.w	1734 <CONFIG_FPROTECT_BLOCK_SIZE+0x734>
    13b0:	f1bc 0f00 	cmp.w	ip, #0
    13b4:	d001      	beq.n	13ba <CONFIG_FPROTECT_BLOCK_SIZE+0x3ba>
    13b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    13ba:	2d00      	cmp	r5, #0
		fract += 2;
    13bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
    13c0:	f300 81cd 	bgt.w	175e <CONFIG_FPROTECT_BLOCK_SIZE+0x75e>
	fract >>= (4 - expo);
    13c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    13c6:	9908      	ldr	r1, [sp, #32]
    13c8:	f1c5 0c04 	rsb	ip, r5, #4
    13cc:	351c      	adds	r5, #28
    13ce:	fa00 f505 	lsl.w	r5, r0, r5
    13d2:	f1ac 0e20 	sub.w	lr, ip, #32
    13d6:	fa21 f10c 	lsr.w	r1, r1, ip
    13da:	fa20 fe0e 	lsr.w	lr, r0, lr
    13de:	4329      	orrs	r1, r5
    13e0:	ea41 010e 	orr.w	r1, r1, lr
    13e4:	fa20 f00c 	lsr.w	r0, r0, ip
    13e8:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    13ec:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    13f0:	2947      	cmp	r1, #71	; 0x47
    13f2:	f040 81d4 	bne.w	179e <CONFIG_FPROTECT_BLOCK_SIZE+0x79e>
		if (decexp < (-4 + 1) || decexp > precision) {
    13f6:	1cdd      	adds	r5, r3, #3
    13f8:	db02      	blt.n	1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>
    13fa:	4598      	cmp	r8, r3
    13fc:	f280 81cb 	bge.w	1796 <CONFIG_FPROTECT_BLOCK_SIZE+0x796>
			c += 'e' - 'g';  /* e or E */
    1400:	3a02      	subs	r2, #2
			if (precision > 0) {
    1402:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    1406:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    1408:	dd01      	ble.n	140e <CONFIG_FPROTECT_BLOCK_SIZE+0x40e>
				precision--;
    140a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    140e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1412:	0688      	lsls	r0, r1, #26
    1414:	f100 81c3 	bmi.w	179e <CONFIG_FPROTECT_BLOCK_SIZE+0x79e>
    1418:	f1b8 0f00 	cmp.w	r8, #0
    141c:	bfd4      	ite	le
    141e:	2100      	movle	r1, #0
    1420:	2101      	movgt	r1, #1
	if (c == 'f') {
    1422:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    1424:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    1426:	f040 81bc 	bne.w	17a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x7a2>
		if (decimals < 0) {
    142a:	eb13 0108 	adds.w	r1, r3, r8
    142e:	f140 81ba 	bpl.w	17a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7a6>
			decimals = 0;
    1432:	2100      	movs	r1, #0
    1434:	e1ba      	b.n	17ac <CONFIG_FPROTECT_BLOCK_SIZE+0x7ac>
		switch (conv->specifier) {
    1436:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    143a:	2b20      	cmp	r3, #32
    143c:	f63f af1b 	bhi.w	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
    1440:	a001      	add	r0, pc, #4	; (adr r0, 1448 <CONFIG_FPROTECT_BLOCK_SIZE+0x448>)
    1442:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    1446:	bf00      	nop
    1448:	0000164f 	.word	0x0000164f
    144c:	00001277 	.word	0x00001277
    1450:	00001277 	.word	0x00001277
    1454:	00001277 	.word	0x00001277
    1458:	00001277 	.word	0x00001277
    145c:	00001277 	.word	0x00001277
    1460:	00001277 	.word	0x00001277
    1464:	00001277 	.word	0x00001277
    1468:	00001277 	.word	0x00001277
    146c:	00001335 	.word	0x00001335
    1470:	00001277 	.word	0x00001277
    1474:	000014f9 	.word	0x000014f9
    1478:	000015ef 	.word	0x000015ef
    147c:	00001335 	.word	0x00001335
    1480:	00001335 	.word	0x00001335
    1484:	00001335 	.word	0x00001335
    1488:	00001277 	.word	0x00001277
    148c:	000015ef 	.word	0x000015ef
    1490:	00001277 	.word	0x00001277
    1494:	00001277 	.word	0x00001277
    1498:	00001277 	.word	0x00001277
    149c:	00001277 	.word	0x00001277
    14a0:	00001685 	.word	0x00001685
    14a4:	0000164f 	.word	0x0000164f
    14a8:	00001653 	.word	0x00001653
    14ac:	00001277 	.word	0x00001277
    14b0:	00001277 	.word	0x00001277
    14b4:	000014d3 	.word	0x000014d3
    14b8:	00001277 	.word	0x00001277
    14bc:	0000164f 	.word	0x0000164f
    14c0:	00001277 	.word	0x00001277
    14c4:	00001277 	.word	0x00001277
    14c8:	0000164f 	.word	0x0000164f
			OUTC('%');
    14cc:	4651      	mov	r1, sl
    14ce:	4610      	mov	r0, r2
    14d0:	e49c      	b.n	e0c <cbvprintf+0x2c>
			if (precision >= 0) {
    14d2:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    14d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    14d8:	db09      	blt.n	14ee <CONFIG_FPROTECT_BLOCK_SIZE+0x4ee>
				len = strnlen(bps, precision);
    14da:	4641      	mov	r1, r8
    14dc:	4610      	mov	r0, r2
    14de:	9203      	str	r2, [sp, #12]
    14e0:	f007 fd75 	bl	8fce <strnlen>
				len = strlen(bps);
    14e4:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    14e6:	2700      	movs	r7, #0
			bpe = bps + len;
    14e8:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    14ea:	b962      	cbnz	r2, 1506 <CONFIG_FPROTECT_BLOCK_SIZE+0x506>
    14ec:	e6c3      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
				len = strlen(bps);
    14ee:	4610      	mov	r0, r2
    14f0:	9203      	str	r2, [sp, #12]
    14f2:	f7ff fc6b 	bl	dcc <strlen>
    14f6:	e7f5      	b.n	14e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e4>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    14f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    14fa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    14fe:	2700      	movs	r7, #0
			bpe = buf + 1;
    1500:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    1504:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    1506:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    1508:	b107      	cbz	r7, 150c <CONFIG_FPROTECT_BLOCK_SIZE+0x50c>
			nj_len += 1U;
    150a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    150c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    1510:	06c1      	lsls	r1, r0, #27
    1512:	f140 8235 	bpl.w	1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>
			nj_len += 2U;
    1516:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    1518:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    151a:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    151c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    151e:	bf44      	itt	mi
    1520:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    1522:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    1524:	f1bb 0f00 	cmp.w	fp, #0
    1528:	dd23      	ble.n	1572 <CONFIG_FPROTECT_BLOCK_SIZE+0x572>
			width -= (int)nj_len;
    152a:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    152e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1532:	0759      	lsls	r1, r3, #29
    1534:	f3c3 0880 	ubfx	r8, r3, #2, #1
    1538:	d41b      	bmi.n	1572 <CONFIG_FPROTECT_BLOCK_SIZE+0x572>
				if (conv->flag_zero) {
    153a:	0658      	lsls	r0, r3, #25
    153c:	f140 8236 	bpl.w	19ac <CONFIG_FPROTECT_BLOCK_SIZE+0x9ac>
					if (sign != 0) {
    1540:	2f00      	cmp	r7, #0
    1542:	f000 8236 	beq.w	19b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x9b2>
						OUTC(sign);
    1546:	4651      	mov	r1, sl
    1548:	4638      	mov	r0, r7
    154a:	9203      	str	r2, [sp, #12]
    154c:	47c8      	blx	r9
    154e:	2800      	cmp	r0, #0
    1550:	f2c0 8222 	blt.w	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    1554:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    1556:	4647      	mov	r7, r8
						OUTC(sign);
    1558:	3601      	adds	r6, #1
					pad = '0';
    155a:	f04f 0830 	mov.w	r8, #48	; 0x30
    155e:	445e      	add	r6, fp
    1560:	465b      	mov	r3, fp
				while (width-- > 0) {
    1562:	2b00      	cmp	r3, #0
    1564:	eba6 000b 	sub.w	r0, r6, fp
    1568:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    156c:	f300 820c 	bgt.w	1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>
    1570:	4606      	mov	r6, r0
		if (sign != 0) {
    1572:	b147      	cbz	r7, 1586 <CONFIG_FPROTECT_BLOCK_SIZE+0x586>
			OUTC(sign);
    1574:	4651      	mov	r1, sl
    1576:	4638      	mov	r0, r7
    1578:	9203      	str	r2, [sp, #12]
    157a:	47c8      	blx	r9
    157c:	2800      	cmp	r0, #0
    157e:	f2c0 820b 	blt.w	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    1582:	9a03      	ldr	r2, [sp, #12]
    1584:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1586:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    158a:	0659      	lsls	r1, r3, #25
    158c:	f140 8265 	bpl.w	1a5a <CONFIG_FPROTECT_BLOCK_SIZE+0xa5a>
			if (conv->specifier_a) {
    1590:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    1594:	2b00      	cmp	r3, #0
    1596:	eba6 0602 	sub.w	r6, r6, r2
    159a:	f280 8219 	bge.w	19d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x9d0>
    159e:	4617      	mov	r7, r2
    15a0:	46b8      	mov	r8, r7
    15a2:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    15a4:	f817 0b01 	ldrb.w	r0, [r7], #1
    15a8:	2870      	cmp	r0, #112	; 0x70
    15aa:	f040 8205 	bne.w	19b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x9b8>
			while (pad_len-- > 0) {
    15ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
    15b0:	461e      	mov	r6, r3
    15b2:	441f      	add	r7, r3
    15b4:	1bbb      	subs	r3, r7, r6
    15b6:	2b00      	cmp	r3, #0
    15b8:	f300 8248 	bgt.w	1a4c <CONFIG_FPROTECT_BLOCK_SIZE+0xa4c>
			OUTS(cp, bpe);
    15bc:	462b      	mov	r3, r5
    15be:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    15c0:	4651      	mov	r1, sl
    15c2:	4648      	mov	r0, r9
    15c4:	f006 fd6c 	bl	80a0 <outs>
    15c8:	2800      	cmp	r0, #0
    15ca:	f2c0 81e5 	blt.w	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    15ce:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    15d0:	4606      	mov	r6, r0
    15d2:	4483      	add	fp, r0
		while (width > 0) {
    15d4:	ebab 0306 	sub.w	r3, fp, r6
    15d8:	2b00      	cmp	r3, #0
    15da:	f77f ae4c 	ble.w	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
			OUTC(' ');
    15de:	4651      	mov	r1, sl
    15e0:	2020      	movs	r0, #32
    15e2:	47c8      	blx	r9
    15e4:	2800      	cmp	r0, #0
    15e6:	f2c0 81d7 	blt.w	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    15ea:	3601      	adds	r6, #1
			--width;
    15ec:	e7f2      	b.n	15d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d4>
			if (conv->flag_plus) {
    15ee:	073d      	lsls	r5, r7, #28
    15f0:	d42b      	bmi.n	164a <CONFIG_FPROTECT_BLOCK_SIZE+0x64a>
				sign = ' ';
    15f2:	f017 0710 	ands.w	r7, r7, #16
    15f6:	bf18      	it	ne
    15f8:	2720      	movne	r7, #32
			sint = value->sint;
    15fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    15fe:	2b00      	cmp	r3, #0
    1600:	da05      	bge.n	160e <CONFIG_FPROTECT_BLOCK_SIZE+0x60e>
				value->uint = (uint_value_type)-sint;
    1602:	4252      	negs	r2, r2
    1604:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1608:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    160c:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    160e:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    1612:	9300      	str	r3, [sp, #0]
    1614:	aa0e      	add	r2, sp, #56	; 0x38
    1616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    161a:	ab13      	add	r3, sp, #76	; 0x4c
    161c:	f001 f9ac 	bl	2978 <encode_uint>
    1620:	4602      	mov	r2, r0
			if (precision >= 0) {
    1622:	f1b8 0f00 	cmp.w	r8, #0
    1626:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    162a:	f6ff af5e 	blt.w	14ea <CONFIG_FPROTECT_BLOCK_SIZE+0x4ea>
				conv->flag_zero = false;
    162e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    1632:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    1634:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1638:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    163a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    163e:	f67f af54 	bls.w	14ea <CONFIG_FPROTECT_BLOCK_SIZE+0x4ea>
					conv->pad0_value = precision - (int)len;
    1642:	eba8 0303 	sub.w	r3, r8, r3
    1646:	930f      	str	r3, [sp, #60]	; 0x3c
    1648:	e74f      	b.n	14ea <CONFIG_FPROTECT_BLOCK_SIZE+0x4ea>
				sign = '+';
    164a:	272b      	movs	r7, #43	; 0x2b
    164c:	e7d5      	b.n	15fa <CONFIG_FPROTECT_BLOCK_SIZE+0x5fa>
		switch (conv->specifier) {
    164e:	2700      	movs	r7, #0
    1650:	e7dd      	b.n	160e <CONFIG_FPROTECT_BLOCK_SIZE+0x60e>
			if (value->ptr != NULL) {
    1652:	980c      	ldr	r0, [sp, #48]	; 0x30
    1654:	2800      	cmp	r0, #0
    1656:	f000 818f 	beq.w	1978 <CONFIG_FPROTECT_BLOCK_SIZE+0x978>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    165a:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    165e:	9300      	str	r3, [sp, #0]
    1660:	aa0e      	add	r2, sp, #56	; 0x38
    1662:	ab13      	add	r3, sp, #76	; 0x4c
    1664:	2100      	movs	r1, #0
    1666:	f001 f987 	bl	2978 <encode_uint>
				conv->altform_0c = true;
    166a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    166e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1672:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1676:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    167a:	4602      	mov	r2, r0
				conv->altform_0c = true;
    167c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    1680:	2700      	movs	r7, #0
				goto prec_int_pad0;
    1682:	e7ce      	b.n	1622 <CONFIG_FPROTECT_BLOCK_SIZE+0x622>
				store_count(conv, value->ptr, count);
    1684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    1686:	2907      	cmp	r1, #7
    1688:	f63f adf5 	bhi.w	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
    168c:	e8df f001 	tbb	[pc, r1]
    1690:	0c06040c 	.word	0x0c06040c
    1694:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1698:	701e      	strb	r6, [r3, #0]
		break;
    169a:	e5ec      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
		*(short *)dp = (short)count;
    169c:	801e      	strh	r6, [r3, #0]
		break;
    169e:	e5ea      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
		*(intmax_t *)dp = (intmax_t)count;
    16a0:	17f2      	asrs	r2, r6, #31
    16a2:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    16a6:	e5e6      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    16a8:	601e      	str	r6, [r3, #0]
		break;
    16aa:	e5e4      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
		*sign = '-';
    16ac:	272d      	movs	r7, #45	; 0x2d
    16ae:	e64d      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
		*sign = '+';
    16b0:	272b      	movs	r7, #43	; 0x2b
    16b2:	e64b      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    16b4:	f240 70ff 	movw	r0, #2047	; 0x7ff
    16b8:	4285      	cmp	r5, r0
    16ba:	d131      	bne.n	1720 <CONFIG_FPROTECT_BLOCK_SIZE+0x720>
			if (isupper((int)c)) {
    16bc:	3201      	adds	r2, #1
    16be:	48b9      	ldr	r0, [pc, #740]	; (19a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x9a4>)
    16c0:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
    16c2:	430b      	orrs	r3, r1
    16c4:	5c12      	ldrb	r2, [r2, r0]
    16c6:	f002 0203 	and.w	r2, r2, #3
    16ca:	d11b      	bne.n	1704 <CONFIG_FPROTECT_BLOCK_SIZE+0x704>
			if (isupper((int)c)) {
    16cc:	2a01      	cmp	r2, #1
    16ce:	d111      	bne.n	16f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f4>
				*buf++ = 'I';
    16d0:	2349      	movs	r3, #73	; 0x49
    16d2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    16d6:	234e      	movs	r3, #78	; 0x4e
    16d8:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    16dc:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    16de:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    16e2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    16e6:	f36f 1386 	bfc	r3, #6, #1
    16ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    16ee:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    16f2:	e707      	b.n	1504 <CONFIG_FPROTECT_BLOCK_SIZE+0x504>
				*buf++ = 'i';
    16f4:	2369      	movs	r3, #105	; 0x69
    16f6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    16fa:	236e      	movs	r3, #110	; 0x6e
    16fc:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    1700:	2366      	movs	r3, #102	; 0x66
    1702:	e7ec      	b.n	16de <CONFIG_FPROTECT_BLOCK_SIZE+0x6de>
			if (isupper((int)c)) {
    1704:	2a01      	cmp	r2, #1
				*buf++ = 'N';
    1706:	bf07      	ittee	eq
    1708:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
    170a:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
    170c:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
    170e:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
    1710:	bf0c      	ite	eq
    1712:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    1716:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    171a:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    171e:	e7de      	b.n	16de <CONFIG_FPROTECT_BLOCK_SIZE+0x6de>
	bool is_subnormal = (expo == 0) && (fract != 0);
    1720:	2000      	movs	r0, #0
    1722:	e621      	b.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
				expo--;
    1724:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1726:	1849      	adds	r1, r1, r1
    1728:	415b      	adcs	r3, r3
    172a:	2b00      	cmp	r3, #0
    172c:	dafa      	bge.n	1724 <CONFIG_FPROTECT_BLOCK_SIZE+0x724>
    172e:	e9cd 1308 	strd	r1, r3, [sp, #32]
    1732:	e62d      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
			fract >>= 1;
    1734:	0840      	lsrs	r0, r0, #1
    1736:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    173a:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    173c:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    1740:	46ac      	mov	ip, r5
			expo++;
    1742:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1746:	d2f5      	bcs.n	1734 <CONFIG_FPROTECT_BLOCK_SIZE+0x734>
		fract *= 5U;
    1748:	fb0e f501 	mul.w	r5, lr, r1
    174c:	fba0 010e 	umull	r0, r1, r0, lr
    1750:	4429      	add	r1, r5
		decexp--;
    1752:	3b01      	subs	r3, #1
		expo++;
    1754:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    1758:	f04f 0c01 	mov.w	ip, #1
    175c:	e624      	b.n	13a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a8>
		fract += 2;
    175e:	3002      	adds	r0, #2
    1760:	f141 0100 	adc.w	r1, r1, #0
    1764:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
    1768:	a808      	add	r0, sp, #32
    176a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    176e:	f006 fc68 	bl	8042 <_ldiv5>
		decexp++;
    1772:	9b04      	ldr	r3, [sp, #16]
    1774:	9a03      	ldr	r2, [sp, #12]
    1776:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    177a:	3d01      	subs	r5, #1
		decexp++;
    177c:	3301      	adds	r3, #1
			fract <<= 1;
    177e:	1849      	adds	r1, r1, r1
    1780:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    1782:	2800      	cmp	r0, #0
			expo--;
    1784:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    1788:	daf9      	bge.n	177e <CONFIG_FPROTECT_BLOCK_SIZE+0x77e>
    178a:	e9cd 1008 	strd	r1, r0, [sp, #32]
    178e:	e614      	b.n	13ba <CONFIG_FPROTECT_BLOCK_SIZE+0x3ba>
    1790:	2300      	movs	r3, #0
    1792:	461d      	mov	r5, r3
    1794:	e616      	b.n	13c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c4>
			precision -= decexp;
    1796:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    179a:	2266      	movs	r2, #102	; 0x66
    179c:	e637      	b.n	140e <CONFIG_FPROTECT_BLOCK_SIZE+0x40e>
	bool prune_zero = false;
    179e:	2100      	movs	r1, #0
    17a0:	e63f      	b.n	1422 <CONFIG_FPROTECT_BLOCK_SIZE+0x422>
		decimals = precision + 1;
    17a2:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
    17a6:	2910      	cmp	r1, #16
    17a8:	bfa8      	it	ge
    17aa:	2110      	movge	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
    17ac:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
    17b0:	2010      	movs	r0, #16
    17b2:	9007      	str	r0, [sp, #28]
	while (decimals--) {
    17b4:	460d      	mov	r5, r1
	*v >>= 1;
    17b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
    17ba:	b9a5      	cbnz	r5, 17e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7e6>
	fract += round;
    17bc:	9d08      	ldr	r5, [sp, #32]
    17be:	1940      	adds	r0, r0, r5
    17c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    17c2:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
    17c6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    17ca:	d21b      	bcs.n	1804 <CONFIG_FPROTECT_BLOCK_SIZE+0x804>
	fract += round;
    17cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
    17d0:	2a66      	cmp	r2, #102	; 0x66
    17d2:	f040 8099 	bne.w	1908 <CONFIG_FPROTECT_BLOCK_SIZE+0x908>
		if (decexp > 0) {
    17d6:	2b00      	cmp	r3, #0
    17d8:	dc23      	bgt.n	1822 <CONFIG_FPROTECT_BLOCK_SIZE+0x822>
			*buf++ = '0';
    17da:	2130      	movs	r1, #48	; 0x30
    17dc:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    17e0:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    17e4:	e02f      	b.n	1846 <CONFIG_FPROTECT_BLOCK_SIZE+0x846>
	*v >>= 1;
    17e6:	0840      	lsrs	r0, r0, #1
    17e8:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    17ec:	0849      	lsrs	r1, r1, #1
    17ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
    17f2:	a80a      	add	r0, sp, #40	; 0x28
    17f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    17f8:	3d01      	subs	r5, #1
    17fa:	f006 fc22 	bl	8042 <_ldiv5>
    17fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    1802:	e7d8      	b.n	17b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7b6>
	*v >>= 1;
    1804:	0840      	lsrs	r0, r0, #1
    1806:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    180a:	0849      	lsrs	r1, r1, #1
    180c:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
    1810:	a808      	add	r0, sp, #32
    1812:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1816:	f006 fc14 	bl	8042 <_ldiv5>
		decexp++;
    181a:	9b05      	ldr	r3, [sp, #20]
    181c:	9a04      	ldr	r2, [sp, #16]
    181e:	3301      	adds	r3, #1
    1820:	e7d6      	b.n	17d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x7d0>
	char *buf = bps;
    1822:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    1824:	9907      	ldr	r1, [sp, #28]
    1826:	2900      	cmp	r1, #0
    1828:	dd0b      	ble.n	1842 <CONFIG_FPROTECT_BLOCK_SIZE+0x842>
				*buf++ = _get_digit(&fract, &digit_count);
    182a:	a907      	add	r1, sp, #28
    182c:	a808      	add	r0, sp, #32
    182e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1832:	f006 fc1e 	bl	8072 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1836:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    1838:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    183c:	3b01      	subs	r3, #1
    183e:	9a04      	ldr	r2, [sp, #16]
    1840:	d1f0      	bne.n	1824 <CONFIG_FPROTECT_BLOCK_SIZE+0x824>
			conv->pad0_value = decexp;
    1842:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    1844:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    1846:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    184a:	0689      	lsls	r1, r1, #26
    184c:	d402      	bmi.n	1854 <CONFIG_FPROTECT_BLOCK_SIZE+0x854>
    184e:	f1b8 0f00 	cmp.w	r8, #0
    1852:	dd1d      	ble.n	1890 <CONFIG_FPROTECT_BLOCK_SIZE+0x890>
			*buf++ = '.';
    1854:	212e      	movs	r1, #46	; 0x2e
    1856:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    185a:	b19b      	cbz	r3, 1884 <CONFIG_FPROTECT_BLOCK_SIZE+0x884>
    185c:	f1b8 0f00 	cmp.w	r8, #0
    1860:	dd16      	ble.n	1890 <CONFIG_FPROTECT_BLOCK_SIZE+0x890>
			conv->pad0_value = -decexp;
    1862:	4259      	negs	r1, r3
    1864:	4541      	cmp	r1, r8
    1866:	bfa8      	it	ge
    1868:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    186a:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    186e:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    1870:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    1872:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    1876:	bfd4      	ite	le
    1878:	2100      	movle	r1, #0
    187a:	2101      	movgt	r1, #1
    187c:	f361 1045 	bfi	r0, r1, #5, #1
    1880:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    1884:	f1b8 0f00 	cmp.w	r8, #0
    1888:	dd02      	ble.n	1890 <CONFIG_FPROTECT_BLOCK_SIZE+0x890>
    188a:	9907      	ldr	r1, [sp, #28]
    188c:	2900      	cmp	r1, #0
    188e:	dc56      	bgt.n	193e <CONFIG_FPROTECT_BLOCK_SIZE+0x93e>
	if (prune_zero) {
    1890:	9903      	ldr	r1, [sp, #12]
    1892:	2900      	cmp	r1, #0
    1894:	d163      	bne.n	195e <CONFIG_FPROTECT_BLOCK_SIZE+0x95e>
	conv->pad0_pre_exp = precision;
    1896:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    189a:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    189e:	2945      	cmp	r1, #69	; 0x45
    18a0:	d121      	bne.n	18e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e6>
		if (decexp < 0) {
    18a2:	2b00      	cmp	r3, #0
		*buf++ = c;
    18a4:	4629      	mov	r1, r5
			decexp = -decexp;
    18a6:	bfb8      	it	lt
    18a8:	425b      	neglt	r3, r3
		*buf++ = c;
    18aa:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    18ae:	bfb4      	ite	lt
    18b0:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    18b2:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    18b4:	2b63      	cmp	r3, #99	; 0x63
    18b6:	706a      	strb	r2, [r5, #1]
    18b8:	dd09      	ble.n	18ce <CONFIG_FPROTECT_BLOCK_SIZE+0x8ce>
			*buf++ = (decexp / 100) + '0';
    18ba:	2064      	movs	r0, #100	; 0x64
    18bc:	fbb3 f2f0 	udiv	r2, r3, r0
    18c0:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    18c4:	1ce9      	adds	r1, r5, #3
    18c6:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    18ca:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    18ce:	200a      	movs	r0, #10
    18d0:	460d      	mov	r5, r1
    18d2:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    18d6:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    18da:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    18de:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    18e0:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    18e4:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    18e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    18e8:	2b00      	cmp	r3, #0
    18ea:	dc43      	bgt.n	1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>
    18ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    18ee:	2b00      	cmp	r3, #0
    18f0:	bfd4      	ite	le
    18f2:	2300      	movle	r3, #0
    18f4:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    18f6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    18fa:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    18fe:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1900:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    1904:	702b      	strb	r3, [r5, #0]
	return bps;
    1906:	e5fd      	b.n	1504 <CONFIG_FPROTECT_BLOCK_SIZE+0x504>
		*buf = _get_digit(&fract, &digit_count);
    1908:	a907      	add	r1, sp, #28
    190a:	a808      	add	r0, sp, #32
    190c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1910:	f006 fbaf 	bl	8072 <_get_digit>
		if (*buf++ != '0') {
    1914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    1918:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    191c:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    1920:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1922:	bf18      	it	ne
    1924:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1928:	0688      	lsls	r0, r1, #26
    192a:	d402      	bmi.n	1932 <CONFIG_FPROTECT_BLOCK_SIZE+0x932>
    192c:	f1b8 0f00 	cmp.w	r8, #0
    1930:	dd12      	ble.n	1958 <CONFIG_FPROTECT_BLOCK_SIZE+0x958>
			*buf++ = '.';
    1932:	212e      	movs	r1, #46	; 0x2e
    1934:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    1938:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    193c:	e7a2      	b.n	1884 <CONFIG_FPROTECT_BLOCK_SIZE+0x884>
		*buf++ = _get_digit(&fract, &digit_count);
    193e:	a907      	add	r1, sp, #28
    1940:	a808      	add	r0, sp, #32
    1942:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1946:	f006 fb94 	bl	8072 <_get_digit>
		precision--;
    194a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    194e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    1952:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    1956:	e795      	b.n	1884 <CONFIG_FPROTECT_BLOCK_SIZE+0x884>
		if (*buf++ != '0') {
    1958:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    195c:	e798      	b.n	1890 <CONFIG_FPROTECT_BLOCK_SIZE+0x890>
		conv->pad0_pre_exp = 0;
    195e:	2100      	movs	r1, #0
    1960:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    1962:	4628      	mov	r0, r5
    1964:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    1968:	2930      	cmp	r1, #48	; 0x30
    196a:	d0fa      	beq.n	1962 <CONFIG_FPROTECT_BLOCK_SIZE+0x962>
		if (*buf != '.') {
    196c:	292e      	cmp	r1, #46	; 0x2e
    196e:	bf18      	it	ne
    1970:	4605      	movne	r5, r0
    1972:	e792      	b.n	189a <CONFIG_FPROTECT_BLOCK_SIZE+0x89a>
		|| (conv->pad0_pre_exp > 0);
    1974:	2301      	movs	r3, #1
    1976:	e7be      	b.n	18f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x8f6>
			bpe = bps + 5;
    1978:	4d0b      	ldr	r5, [pc, #44]	; (19a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x9a8>)
		char sign = 0;
    197a:	4607      	mov	r7, r0
			bps = "(nil)";
    197c:	1f6a      	subs	r2, r5, #5
    197e:	e5c2      	b.n	1506 <CONFIG_FPROTECT_BLOCK_SIZE+0x506>
		} else if (conv->altform_0) {
    1980:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    1982:	bf48      	it	mi
    1984:	3301      	addmi	r3, #1
    1986:	e5c7      	b.n	1518 <CONFIG_FPROTECT_BLOCK_SIZE+0x518>
					OUTC(pad);
    1988:	4651      	mov	r1, sl
    198a:	4640      	mov	r0, r8
    198c:	9203      	str	r2, [sp, #12]
    198e:	47c8      	blx	r9
    1990:	2800      	cmp	r0, #0
    1992:	9a03      	ldr	r2, [sp, #12]
    1994:	f6bf ade4 	bge.w	1560 <CONFIG_FPROTECT_BLOCK_SIZE+0x560>
#undef OUTS
#undef OUTC
}
    1998:	b01b      	add	sp, #108	; 0x6c
    199a:	ecbd 8b02 	vpop	{d8}
    199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19a2:	bf00      	nop
    19a4:	0000a9cb 	.word	0x0000a9cb
    19a8:	0000a87c 	.word	0x0000a87c
				char pad = ' ';
    19ac:	f04f 0820 	mov.w	r8, #32
    19b0:	e5d5      	b.n	155e <CONFIG_FPROTECT_BLOCK_SIZE+0x55e>
					pad = '0';
    19b2:	f04f 0830 	mov.w	r8, #48	; 0x30
    19b6:	e5d2      	b.n	155e <CONFIG_FPROTECT_BLOCK_SIZE+0x55e>
					OUTC(*cp++);
    19b8:	4651      	mov	r1, sl
    19ba:	47c8      	blx	r9
    19bc:	2800      	cmp	r0, #0
    19be:	f6bf adef 	bge.w	15a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a0>
    19c2:	e7e9      	b.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
					OUTC(*cp++);
    19c4:	4651      	mov	r1, sl
    19c6:	9203      	str	r2, [sp, #12]
    19c8:	47c8      	blx	r9
    19ca:	2800      	cmp	r0, #0
    19cc:	9a03      	ldr	r2, [sp, #12]
    19ce:	dbe3      	blt.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
				while (isdigit((int)*cp)) {
    19d0:	7810      	ldrb	r0, [r2, #0]
    19d2:	4b37      	ldr	r3, [pc, #220]	; (1ab0 <CONFIG_FPROTECT_BLOCK_SIZE+0xab0>)
    19d4:	5cc3      	ldrb	r3, [r0, r3]
    19d6:	075b      	lsls	r3, r3, #29
    19d8:	4617      	mov	r7, r2
    19da:	eb06 0802 	add.w	r8, r6, r2
    19de:	f102 0201 	add.w	r2, r2, #1
    19e2:	d4ef      	bmi.n	19c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x9c4>
				if (!conv->pad_postdp) {
    19e4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    19e8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    19ea:	0699      	lsls	r1, r3, #26
    19ec:	d407      	bmi.n	19fe <CONFIG_FPROTECT_BLOCK_SIZE+0x9fe>
    19ee:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    19f0:	2e00      	cmp	r6, #0
    19f2:	eba8 0206 	sub.w	r2, r8, r6
    19f6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    19fa:	dc0f      	bgt.n	1a1c <CONFIG_FPROTECT_BLOCK_SIZE+0xa1c>
    19fc:	4690      	mov	r8, r2
				if (*cp == '.') {
    19fe:	7838      	ldrb	r0, [r7, #0]
    1a00:	282e      	cmp	r0, #46	; 0x2e
    1a02:	d108      	bne.n	1a16 <CONFIG_FPROTECT_BLOCK_SIZE+0xa16>
					OUTC(*cp++);
    1a04:	4651      	mov	r1, sl
    1a06:	47c8      	blx	r9
						OUTC('0');
    1a08:	2800      	cmp	r0, #0
    1a0a:	dbc5      	blt.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
					while (pad_len-- > 0) {
    1a0c:	2e00      	cmp	r6, #0
						OUTC('0');
    1a0e:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    1a12:	dc09      	bgt.n	1a28 <CONFIG_FPROTECT_BLOCK_SIZE+0xa28>
					OUTC(*cp++);
    1a14:	3701      	adds	r7, #1
    1a16:	eba8 0607 	sub.w	r6, r8, r7
    1a1a:	e00e      	b.n	1a3a <CONFIG_FPROTECT_BLOCK_SIZE+0xa3a>
						OUTC('0');
    1a1c:	4651      	mov	r1, sl
    1a1e:	2030      	movs	r0, #48	; 0x30
    1a20:	47c8      	blx	r9
    1a22:	2800      	cmp	r0, #0
    1a24:	dae4      	bge.n	19f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x9f0>
    1a26:	e7b7      	b.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
						OUTC('0');
    1a28:	4651      	mov	r1, sl
    1a2a:	2030      	movs	r0, #48	; 0x30
    1a2c:	47c8      	blx	r9
    1a2e:	3e01      	subs	r6, #1
    1a30:	e7ea      	b.n	1a08 <CONFIG_FPROTECT_BLOCK_SIZE+0xa08>
					OUTC(*cp++);
    1a32:	4651      	mov	r1, sl
    1a34:	47c8      	blx	r9
    1a36:	2800      	cmp	r0, #0
    1a38:	dbae      	blt.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
				while (isdigit((int)*cp)) {
    1a3a:	4a1d      	ldr	r2, [pc, #116]	; (1ab0 <CONFIG_FPROTECT_BLOCK_SIZE+0xab0>)
    1a3c:	46b8      	mov	r8, r7
    1a3e:	19f3      	adds	r3, r6, r7
    1a40:	f817 0b01 	ldrb.w	r0, [r7], #1
    1a44:	5c12      	ldrb	r2, [r2, r0]
    1a46:	0752      	lsls	r2, r2, #29
    1a48:	d4f3      	bmi.n	1a32 <CONFIG_FPROTECT_BLOCK_SIZE+0xa32>
    1a4a:	e5b0      	b.n	15ae <CONFIG_FPROTECT_BLOCK_SIZE+0x5ae>
				OUTC('0');
    1a4c:	4651      	mov	r1, sl
    1a4e:	2030      	movs	r0, #48	; 0x30
    1a50:	47c8      	blx	r9
    1a52:	2800      	cmp	r0, #0
    1a54:	dba0      	blt.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    1a56:	3601      	adds	r6, #1
    1a58:	e5ac      	b.n	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
			if (conv->altform_0c | conv->altform_0) {
    1a5a:	06d8      	lsls	r0, r3, #27
    1a5c:	d401      	bmi.n	1a62 <CONFIG_FPROTECT_BLOCK_SIZE+0xa62>
    1a5e:	0719      	lsls	r1, r3, #28
    1a60:	d507      	bpl.n	1a72 <CONFIG_FPROTECT_BLOCK_SIZE+0xa72>
				OUTC('0');
    1a62:	4651      	mov	r1, sl
    1a64:	2030      	movs	r0, #48	; 0x30
    1a66:	9203      	str	r2, [sp, #12]
    1a68:	47c8      	blx	r9
    1a6a:	2800      	cmp	r0, #0
    1a6c:	db94      	blt.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    1a6e:	9a03      	ldr	r2, [sp, #12]
    1a70:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    1a72:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1a76:	06db      	lsls	r3, r3, #27
    1a78:	d508      	bpl.n	1a8c <CONFIG_FPROTECT_BLOCK_SIZE+0xa8c>
				OUTC(conv->specifier);
    1a7a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    1a7e:	9203      	str	r2, [sp, #12]
    1a80:	4651      	mov	r1, sl
    1a82:	47c8      	blx	r9
    1a84:	2800      	cmp	r0, #0
    1a86:	db87      	blt.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    1a88:	9a03      	ldr	r2, [sp, #12]
    1a8a:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    1a8c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    1a8e:	4437      	add	r7, r6
    1a90:	1bbb      	subs	r3, r7, r6
    1a92:	2b00      	cmp	r3, #0
    1a94:	dc01      	bgt.n	1a9a <CONFIG_FPROTECT_BLOCK_SIZE+0xa9a>
			OUTS(bps, bpe);
    1a96:	462b      	mov	r3, r5
    1a98:	e592      	b.n	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
				OUTC('0');
    1a9a:	4651      	mov	r1, sl
    1a9c:	2030      	movs	r0, #48	; 0x30
    1a9e:	9203      	str	r2, [sp, #12]
    1aa0:	47c8      	blx	r9
    1aa2:	2800      	cmp	r0, #0
    1aa4:	f6ff af78 	blt.w	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    1aa8:	9a03      	ldr	r2, [sp, #12]
    1aaa:	3601      	adds	r6, #1
    1aac:	e7f0      	b.n	1a90 <CONFIG_FPROTECT_BLOCK_SIZE+0xa90>
    1aae:	bf00      	nop
    1ab0:	0000a9cc 	.word	0x0000a9cc
    1ab4:	00000000 	.word	0x00000000

00001ab8 <_dtoa_r>:
    1ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1abc:	ed2d 8b04 	vpush	{d8-d9}
    1ac0:	ec57 6b10 	vmov	r6, r7, d0
    1ac4:	b093      	sub	sp, #76	; 0x4c
    1ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
    1ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    1acc:	9106      	str	r1, [sp, #24]
    1ace:	ee10 aa10 	vmov	sl, s0
    1ad2:	4604      	mov	r4, r0
    1ad4:	9209      	str	r2, [sp, #36]	; 0x24
    1ad6:	930c      	str	r3, [sp, #48]	; 0x30
    1ad8:	46bb      	mov	fp, r7
    1ada:	b975      	cbnz	r5, 1afa <_dtoa_r+0x42>
    1adc:	2010      	movs	r0, #16
    1ade:	f004 fb01 	bl	60e4 <malloc>
    1ae2:	4602      	mov	r2, r0
    1ae4:	6260      	str	r0, [r4, #36]	; 0x24
    1ae6:	b920      	cbnz	r0, 1af2 <_dtoa_r+0x3a>
    1ae8:	4ba7      	ldr	r3, [pc, #668]	; (1d88 <_dtoa_r+0x2d0>)
    1aea:	21ea      	movs	r1, #234	; 0xea
    1aec:	48a7      	ldr	r0, [pc, #668]	; (1d8c <_dtoa_r+0x2d4>)
    1aee:	f004 fac9 	bl	6084 <__assert_func>
    1af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
    1af6:	6005      	str	r5, [r0, #0]
    1af8:	60c5      	str	r5, [r0, #12]
    1afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1afc:	6819      	ldr	r1, [r3, #0]
    1afe:	b151      	cbz	r1, 1b16 <_dtoa_r+0x5e>
    1b00:	685a      	ldr	r2, [r3, #4]
    1b02:	604a      	str	r2, [r1, #4]
    1b04:	2301      	movs	r3, #1
    1b06:	4093      	lsls	r3, r2
    1b08:	608b      	str	r3, [r1, #8]
    1b0a:	4620      	mov	r0, r4
    1b0c:	f005 fc28 	bl	7360 <_Bfree>
    1b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b12:	2200      	movs	r2, #0
    1b14:	601a      	str	r2, [r3, #0]
    1b16:	1e3b      	subs	r3, r7, #0
    1b18:	bfaa      	itet	ge
    1b1a:	2300      	movge	r3, #0
    1b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
    1b20:	f8c8 3000 	strge.w	r3, [r8]
    1b24:	4b9a      	ldr	r3, [pc, #616]	; (1d90 <_dtoa_r+0x2d8>)
    1b26:	bfbc      	itt	lt
    1b28:	2201      	movlt	r2, #1
    1b2a:	f8c8 2000 	strlt.w	r2, [r8]
    1b2e:	ea33 030b 	bics.w	r3, r3, fp
    1b32:	d11b      	bne.n	1b6c <_dtoa_r+0xb4>
    1b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b36:	f242 730f 	movw	r3, #9999	; 0x270f
    1b3a:	6013      	str	r3, [r2, #0]
    1b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
    1b40:	4333      	orrs	r3, r6
    1b42:	f000 8592 	beq.w	266a <CONFIG_MAIN_STACK_SIZE+0x66a>
    1b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
    1b48:	b963      	cbnz	r3, 1b64 <_dtoa_r+0xac>
    1b4a:	4b92      	ldr	r3, [pc, #584]	; (1d94 <_dtoa_r+0x2dc>)
    1b4c:	e022      	b.n	1b94 <_dtoa_r+0xdc>
    1b4e:	4b92      	ldr	r3, [pc, #584]	; (1d98 <_dtoa_r+0x2e0>)
    1b50:	9301      	str	r3, [sp, #4]
    1b52:	3308      	adds	r3, #8
    1b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
    1b56:	6013      	str	r3, [r2, #0]
    1b58:	9801      	ldr	r0, [sp, #4]
    1b5a:	b013      	add	sp, #76	; 0x4c
    1b5c:	ecbd 8b04 	vpop	{d8-d9}
    1b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b64:	4b8b      	ldr	r3, [pc, #556]	; (1d94 <_dtoa_r+0x2dc>)
    1b66:	9301      	str	r3, [sp, #4]
    1b68:	3303      	adds	r3, #3
    1b6a:	e7f3      	b.n	1b54 <_dtoa_r+0x9c>
    1b6c:	2200      	movs	r2, #0
    1b6e:	2300      	movs	r3, #0
    1b70:	4650      	mov	r0, sl
    1b72:	4659      	mov	r1, fp
    1b74:	f7fe ff38 	bl	9e8 <__aeabi_dcmpeq>
    1b78:	ec4b ab19 	vmov	d9, sl, fp
    1b7c:	4680      	mov	r8, r0
    1b7e:	b158      	cbz	r0, 1b98 <_dtoa_r+0xe0>
    1b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b82:	2301      	movs	r3, #1
    1b84:	6013      	str	r3, [r2, #0]
    1b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
    1b88:	2b00      	cmp	r3, #0
    1b8a:	f000 856b 	beq.w	2664 <CONFIG_MAIN_STACK_SIZE+0x664>
    1b8e:	4883      	ldr	r0, [pc, #524]	; (1d9c <_dtoa_r+0x2e4>)
    1b90:	6018      	str	r0, [r3, #0]
    1b92:	1e43      	subs	r3, r0, #1
    1b94:	9301      	str	r3, [sp, #4]
    1b96:	e7df      	b.n	1b58 <_dtoa_r+0xa0>
    1b98:	ec4b ab10 	vmov	d0, sl, fp
    1b9c:	aa10      	add	r2, sp, #64	; 0x40
    1b9e:	a911      	add	r1, sp, #68	; 0x44
    1ba0:	4620      	mov	r0, r4
    1ba2:	f005 fe59 	bl	7858 <__d2b>
    1ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
    1baa:	ee08 0a10 	vmov	s16, r0
    1bae:	2d00      	cmp	r5, #0
    1bb0:	f000 8084 	beq.w	1cbc <_dtoa_r+0x204>
    1bb4:	ee19 3a90 	vmov	r3, s19
    1bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
    1bc0:	4656      	mov	r6, sl
    1bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
    1bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    1bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    1bce:	4b74      	ldr	r3, [pc, #464]	; (1da0 <_dtoa_r+0x2e8>)
    1bd0:	2200      	movs	r2, #0
    1bd2:	4630      	mov	r0, r6
    1bd4:	4639      	mov	r1, r7
    1bd6:	f7fe fae7 	bl	1a8 <__aeabi_dsub>
    1bda:	a365      	add	r3, pc, #404	; (adr r3, 1d70 <_dtoa_r+0x2b8>)
    1bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1be0:	f7fe fc9a 	bl	518 <__aeabi_dmul>
    1be4:	a364      	add	r3, pc, #400	; (adr r3, 1d78 <_dtoa_r+0x2c0>)
    1be6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bea:	f7fe fadf 	bl	1ac <__adddf3>
    1bee:	4606      	mov	r6, r0
    1bf0:	4628      	mov	r0, r5
    1bf2:	460f      	mov	r7, r1
    1bf4:	f7fe fc26 	bl	444 <__aeabi_i2d>
    1bf8:	a361      	add	r3, pc, #388	; (adr r3, 1d80 <_dtoa_r+0x2c8>)
    1bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bfe:	f7fe fc8b 	bl	518 <__aeabi_dmul>
    1c02:	4602      	mov	r2, r0
    1c04:	460b      	mov	r3, r1
    1c06:	4630      	mov	r0, r6
    1c08:	4639      	mov	r1, r7
    1c0a:	f7fe facf 	bl	1ac <__adddf3>
    1c0e:	4606      	mov	r6, r0
    1c10:	460f      	mov	r7, r1
    1c12:	f7fe ff1b 	bl	a4c <__aeabi_d2iz>
    1c16:	2200      	movs	r2, #0
    1c18:	9000      	str	r0, [sp, #0]
    1c1a:	2300      	movs	r3, #0
    1c1c:	4630      	mov	r0, r6
    1c1e:	4639      	mov	r1, r7
    1c20:	f7fe feec 	bl	9fc <__aeabi_dcmplt>
    1c24:	b150      	cbz	r0, 1c3c <_dtoa_r+0x184>
    1c26:	9800      	ldr	r0, [sp, #0]
    1c28:	f7fe fc0c 	bl	444 <__aeabi_i2d>
    1c2c:	4632      	mov	r2, r6
    1c2e:	463b      	mov	r3, r7
    1c30:	f7fe feda 	bl	9e8 <__aeabi_dcmpeq>
    1c34:	b910      	cbnz	r0, 1c3c <_dtoa_r+0x184>
    1c36:	9b00      	ldr	r3, [sp, #0]
    1c38:	3b01      	subs	r3, #1
    1c3a:	9300      	str	r3, [sp, #0]
    1c3c:	9b00      	ldr	r3, [sp, #0]
    1c3e:	2b16      	cmp	r3, #22
    1c40:	d85a      	bhi.n	1cf8 <_dtoa_r+0x240>
    1c42:	9a00      	ldr	r2, [sp, #0]
    1c44:	4b57      	ldr	r3, [pc, #348]	; (1da4 <_dtoa_r+0x2ec>)
    1c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c4e:	ec51 0b19 	vmov	r0, r1, d9
    1c52:	f7fe fed3 	bl	9fc <__aeabi_dcmplt>
    1c56:	2800      	cmp	r0, #0
    1c58:	d050      	beq.n	1cfc <_dtoa_r+0x244>
    1c5a:	9b00      	ldr	r3, [sp, #0]
    1c5c:	3b01      	subs	r3, #1
    1c5e:	9300      	str	r3, [sp, #0]
    1c60:	2300      	movs	r3, #0
    1c62:	930b      	str	r3, [sp, #44]	; 0x2c
    1c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c66:	1b5d      	subs	r5, r3, r5
    1c68:	1e6b      	subs	r3, r5, #1
    1c6a:	9305      	str	r3, [sp, #20]
    1c6c:	bf45      	ittet	mi
    1c6e:	f1c5 0301 	rsbmi	r3, r5, #1
    1c72:	9304      	strmi	r3, [sp, #16]
    1c74:	2300      	movpl	r3, #0
    1c76:	2300      	movmi	r3, #0
    1c78:	bf4c      	ite	mi
    1c7a:	9305      	strmi	r3, [sp, #20]
    1c7c:	9304      	strpl	r3, [sp, #16]
    1c7e:	9b00      	ldr	r3, [sp, #0]
    1c80:	2b00      	cmp	r3, #0
    1c82:	db3d      	blt.n	1d00 <_dtoa_r+0x248>
    1c84:	9b05      	ldr	r3, [sp, #20]
    1c86:	9a00      	ldr	r2, [sp, #0]
    1c88:	920a      	str	r2, [sp, #40]	; 0x28
    1c8a:	4413      	add	r3, r2
    1c8c:	9305      	str	r3, [sp, #20]
    1c8e:	2300      	movs	r3, #0
    1c90:	9307      	str	r3, [sp, #28]
    1c92:	9b06      	ldr	r3, [sp, #24]
    1c94:	2b09      	cmp	r3, #9
    1c96:	f200 8089 	bhi.w	1dac <_dtoa_r+0x2f4>
    1c9a:	2b05      	cmp	r3, #5
    1c9c:	bfc4      	itt	gt
    1c9e:	3b04      	subgt	r3, #4
    1ca0:	9306      	strgt	r3, [sp, #24]
    1ca2:	9b06      	ldr	r3, [sp, #24]
    1ca4:	f1a3 0302 	sub.w	r3, r3, #2
    1ca8:	bfcc      	ite	gt
    1caa:	2500      	movgt	r5, #0
    1cac:	2501      	movle	r5, #1
    1cae:	2b03      	cmp	r3, #3
    1cb0:	f200 8087 	bhi.w	1dc2 <_dtoa_r+0x30a>
    1cb4:	e8df f003 	tbb	[pc, r3]
    1cb8:	59383a2d 	.word	0x59383a2d
    1cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
    1cc0:	441d      	add	r5, r3
    1cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
    1cc6:	2b20      	cmp	r3, #32
    1cc8:	bfc1      	itttt	gt
    1cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
    1cd2:	fa0b f303 	lslgt.w	r3, fp, r3
    1cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
    1cda:	bfda      	itte	le
    1cdc:	f1c3 0320 	rsble	r3, r3, #32
    1ce0:	fa06 f003 	lslle.w	r0, r6, r3
    1ce4:	4318      	orrgt	r0, r3
    1ce6:	f7fe fb9d 	bl	424 <__aeabi_ui2d>
    1cea:	2301      	movs	r3, #1
    1cec:	4606      	mov	r6, r0
    1cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
    1cf2:	3d01      	subs	r5, #1
    1cf4:	930e      	str	r3, [sp, #56]	; 0x38
    1cf6:	e76a      	b.n	1bce <_dtoa_r+0x116>
    1cf8:	2301      	movs	r3, #1
    1cfa:	e7b2      	b.n	1c62 <_dtoa_r+0x1aa>
    1cfc:	900b      	str	r0, [sp, #44]	; 0x2c
    1cfe:	e7b1      	b.n	1c64 <_dtoa_r+0x1ac>
    1d00:	9b04      	ldr	r3, [sp, #16]
    1d02:	9a00      	ldr	r2, [sp, #0]
    1d04:	1a9b      	subs	r3, r3, r2
    1d06:	9304      	str	r3, [sp, #16]
    1d08:	4253      	negs	r3, r2
    1d0a:	9307      	str	r3, [sp, #28]
    1d0c:	2300      	movs	r3, #0
    1d0e:	930a      	str	r3, [sp, #40]	; 0x28
    1d10:	e7bf      	b.n	1c92 <_dtoa_r+0x1da>
    1d12:	2300      	movs	r3, #0
    1d14:	9308      	str	r3, [sp, #32]
    1d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d18:	2b00      	cmp	r3, #0
    1d1a:	dc55      	bgt.n	1dc8 <_dtoa_r+0x310>
    1d1c:	2301      	movs	r3, #1
    1d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    1d22:	461a      	mov	r2, r3
    1d24:	9209      	str	r2, [sp, #36]	; 0x24
    1d26:	e00c      	b.n	1d42 <_dtoa_r+0x28a>
    1d28:	2301      	movs	r3, #1
    1d2a:	e7f3      	b.n	1d14 <_dtoa_r+0x25c>
    1d2c:	2300      	movs	r3, #0
    1d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d30:	9308      	str	r3, [sp, #32]
    1d32:	9b00      	ldr	r3, [sp, #0]
    1d34:	4413      	add	r3, r2
    1d36:	9302      	str	r3, [sp, #8]
    1d38:	3301      	adds	r3, #1
    1d3a:	2b01      	cmp	r3, #1
    1d3c:	9303      	str	r3, [sp, #12]
    1d3e:	bfb8      	it	lt
    1d40:	2301      	movlt	r3, #1
    1d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d44:	2200      	movs	r2, #0
    1d46:	6042      	str	r2, [r0, #4]
    1d48:	2204      	movs	r2, #4
    1d4a:	f102 0614 	add.w	r6, r2, #20
    1d4e:	429e      	cmp	r6, r3
    1d50:	6841      	ldr	r1, [r0, #4]
    1d52:	d93d      	bls.n	1dd0 <_dtoa_r+0x318>
    1d54:	4620      	mov	r0, r4
    1d56:	f005 fac3 	bl	72e0 <_Balloc>
    1d5a:	9001      	str	r0, [sp, #4]
    1d5c:	2800      	cmp	r0, #0
    1d5e:	d13b      	bne.n	1dd8 <_dtoa_r+0x320>
    1d60:	4b11      	ldr	r3, [pc, #68]	; (1da8 <_dtoa_r+0x2f0>)
    1d62:	4602      	mov	r2, r0
    1d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    1d68:	e6c0      	b.n	1aec <_dtoa_r+0x34>
    1d6a:	2301      	movs	r3, #1
    1d6c:	e7df      	b.n	1d2e <_dtoa_r+0x276>
    1d6e:	bf00      	nop
    1d70:	636f4361 	.word	0x636f4361
    1d74:	3fd287a7 	.word	0x3fd287a7
    1d78:	8b60c8b3 	.word	0x8b60c8b3
    1d7c:	3fc68a28 	.word	0x3fc68a28
    1d80:	509f79fb 	.word	0x509f79fb
    1d84:	3fd34413 	.word	0x3fd34413
    1d88:	0000ab1c 	.word	0x0000ab1c
    1d8c:	0000ab33 	.word	0x0000ab33
    1d90:	7ff00000 	.word	0x7ff00000
    1d94:	0000ab18 	.word	0x0000ab18
    1d98:	0000ab0f 	.word	0x0000ab0f
    1d9c:	0000a906 	.word	0x0000a906
    1da0:	3ff80000 	.word	0x3ff80000
    1da4:	0000a008 	.word	0x0000a008
    1da8:	0000abb1 	.word	0x0000abb1
    1dac:	2501      	movs	r5, #1
    1dae:	2300      	movs	r3, #0
    1db0:	9306      	str	r3, [sp, #24]
    1db2:	9508      	str	r5, [sp, #32]
    1db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    1dbc:	2200      	movs	r2, #0
    1dbe:	2312      	movs	r3, #18
    1dc0:	e7b0      	b.n	1d24 <_dtoa_r+0x26c>
    1dc2:	2301      	movs	r3, #1
    1dc4:	9308      	str	r3, [sp, #32]
    1dc6:	e7f5      	b.n	1db4 <_dtoa_r+0x2fc>
    1dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
    1dce:	e7b8      	b.n	1d42 <_dtoa_r+0x28a>
    1dd0:	3101      	adds	r1, #1
    1dd2:	6041      	str	r1, [r0, #4]
    1dd4:	0052      	lsls	r2, r2, #1
    1dd6:	e7b8      	b.n	1d4a <_dtoa_r+0x292>
    1dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1dda:	9a01      	ldr	r2, [sp, #4]
    1ddc:	601a      	str	r2, [r3, #0]
    1dde:	9b03      	ldr	r3, [sp, #12]
    1de0:	2b0e      	cmp	r3, #14
    1de2:	f200 809d 	bhi.w	1f20 <_dtoa_r+0x468>
    1de6:	2d00      	cmp	r5, #0
    1de8:	f000 809a 	beq.w	1f20 <_dtoa_r+0x468>
    1dec:	9b00      	ldr	r3, [sp, #0]
    1dee:	2b00      	cmp	r3, #0
    1df0:	dd32      	ble.n	1e58 <_dtoa_r+0x3a0>
    1df2:	4ab7      	ldr	r2, [pc, #732]	; (20d0 <CONFIG_MAIN_STACK_SIZE+0xd0>)
    1df4:	f003 030f 	and.w	r3, r3, #15
    1df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
    1e00:	9b00      	ldr	r3, [sp, #0]
    1e02:	05d8      	lsls	r0, r3, #23
    1e04:	ea4f 1723 	mov.w	r7, r3, asr #4
    1e08:	d516      	bpl.n	1e38 <_dtoa_r+0x380>
    1e0a:	4bb2      	ldr	r3, [pc, #712]	; (20d4 <CONFIG_MAIN_STACK_SIZE+0xd4>)
    1e0c:	ec51 0b19 	vmov	r0, r1, d9
    1e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1e14:	f7fe fcaa 	bl	76c <__aeabi_ddiv>
    1e18:	f007 070f 	and.w	r7, r7, #15
    1e1c:	4682      	mov	sl, r0
    1e1e:	468b      	mov	fp, r1
    1e20:	2503      	movs	r5, #3
    1e22:	4eac      	ldr	r6, [pc, #688]	; (20d4 <CONFIG_MAIN_STACK_SIZE+0xd4>)
    1e24:	b957      	cbnz	r7, 1e3c <_dtoa_r+0x384>
    1e26:	4642      	mov	r2, r8
    1e28:	464b      	mov	r3, r9
    1e2a:	4650      	mov	r0, sl
    1e2c:	4659      	mov	r1, fp
    1e2e:	f7fe fc9d 	bl	76c <__aeabi_ddiv>
    1e32:	4682      	mov	sl, r0
    1e34:	468b      	mov	fp, r1
    1e36:	e028      	b.n	1e8a <_dtoa_r+0x3d2>
    1e38:	2502      	movs	r5, #2
    1e3a:	e7f2      	b.n	1e22 <_dtoa_r+0x36a>
    1e3c:	07f9      	lsls	r1, r7, #31
    1e3e:	d508      	bpl.n	1e52 <_dtoa_r+0x39a>
    1e40:	4640      	mov	r0, r8
    1e42:	4649      	mov	r1, r9
    1e44:	e9d6 2300 	ldrd	r2, r3, [r6]
    1e48:	f7fe fb66 	bl	518 <__aeabi_dmul>
    1e4c:	3501      	adds	r5, #1
    1e4e:	4680      	mov	r8, r0
    1e50:	4689      	mov	r9, r1
    1e52:	107f      	asrs	r7, r7, #1
    1e54:	3608      	adds	r6, #8
    1e56:	e7e5      	b.n	1e24 <_dtoa_r+0x36c>
    1e58:	f000 809b 	beq.w	1f92 <_dtoa_r+0x4da>
    1e5c:	9b00      	ldr	r3, [sp, #0]
    1e5e:	4f9d      	ldr	r7, [pc, #628]	; (20d4 <CONFIG_MAIN_STACK_SIZE+0xd4>)
    1e60:	425e      	negs	r6, r3
    1e62:	4b9b      	ldr	r3, [pc, #620]	; (20d0 <CONFIG_MAIN_STACK_SIZE+0xd0>)
    1e64:	f006 020f 	and.w	r2, r6, #15
    1e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e70:	ec51 0b19 	vmov	r0, r1, d9
    1e74:	f7fe fb50 	bl	518 <__aeabi_dmul>
    1e78:	1136      	asrs	r6, r6, #4
    1e7a:	4682      	mov	sl, r0
    1e7c:	468b      	mov	fp, r1
    1e7e:	2300      	movs	r3, #0
    1e80:	2502      	movs	r5, #2
    1e82:	2e00      	cmp	r6, #0
    1e84:	d17a      	bne.n	1f7c <_dtoa_r+0x4c4>
    1e86:	2b00      	cmp	r3, #0
    1e88:	d1d3      	bne.n	1e32 <_dtoa_r+0x37a>
    1e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	f000 8082 	beq.w	1f96 <_dtoa_r+0x4de>
    1e92:	4b91      	ldr	r3, [pc, #580]	; (20d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
    1e94:	2200      	movs	r2, #0
    1e96:	4650      	mov	r0, sl
    1e98:	4659      	mov	r1, fp
    1e9a:	f7fe fdaf 	bl	9fc <__aeabi_dcmplt>
    1e9e:	2800      	cmp	r0, #0
    1ea0:	d079      	beq.n	1f96 <_dtoa_r+0x4de>
    1ea2:	9b03      	ldr	r3, [sp, #12]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d076      	beq.n	1f96 <_dtoa_r+0x4de>
    1ea8:	9b02      	ldr	r3, [sp, #8]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	dd36      	ble.n	1f1c <_dtoa_r+0x464>
    1eae:	9b00      	ldr	r3, [sp, #0]
    1eb0:	4650      	mov	r0, sl
    1eb2:	4659      	mov	r1, fp
    1eb4:	1e5f      	subs	r7, r3, #1
    1eb6:	2200      	movs	r2, #0
    1eb8:	4b88      	ldr	r3, [pc, #544]	; (20dc <CONFIG_MAIN_STACK_SIZE+0xdc>)
    1eba:	f7fe fb2d 	bl	518 <__aeabi_dmul>
    1ebe:	9e02      	ldr	r6, [sp, #8]
    1ec0:	4682      	mov	sl, r0
    1ec2:	468b      	mov	fp, r1
    1ec4:	3501      	adds	r5, #1
    1ec6:	4628      	mov	r0, r5
    1ec8:	f7fe fabc 	bl	444 <__aeabi_i2d>
    1ecc:	4652      	mov	r2, sl
    1ece:	465b      	mov	r3, fp
    1ed0:	f7fe fb22 	bl	518 <__aeabi_dmul>
    1ed4:	4b82      	ldr	r3, [pc, #520]	; (20e0 <CONFIG_MAIN_STACK_SIZE+0xe0>)
    1ed6:	2200      	movs	r2, #0
    1ed8:	f7fe f968 	bl	1ac <__adddf3>
    1edc:	46d0      	mov	r8, sl
    1ede:	46d9      	mov	r9, fp
    1ee0:	4682      	mov	sl, r0
    1ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
    1ee6:	2e00      	cmp	r6, #0
    1ee8:	d158      	bne.n	1f9c <_dtoa_r+0x4e4>
    1eea:	4b7e      	ldr	r3, [pc, #504]	; (20e4 <CONFIG_MAIN_STACK_SIZE+0xe4>)
    1eec:	2200      	movs	r2, #0
    1eee:	4640      	mov	r0, r8
    1ef0:	4649      	mov	r1, r9
    1ef2:	f7fe f959 	bl	1a8 <__aeabi_dsub>
    1ef6:	4652      	mov	r2, sl
    1ef8:	465b      	mov	r3, fp
    1efa:	4680      	mov	r8, r0
    1efc:	4689      	mov	r9, r1
    1efe:	f7fe fd9b 	bl	a38 <__aeabi_dcmpgt>
    1f02:	2800      	cmp	r0, #0
    1f04:	f040 8295 	bne.w	2432 <CONFIG_MAIN_STACK_SIZE+0x432>
    1f08:	4652      	mov	r2, sl
    1f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
    1f0e:	4640      	mov	r0, r8
    1f10:	4649      	mov	r1, r9
    1f12:	f7fe fd73 	bl	9fc <__aeabi_dcmplt>
    1f16:	2800      	cmp	r0, #0
    1f18:	f040 8289 	bne.w	242e <CONFIG_MAIN_STACK_SIZE+0x42e>
    1f1c:	ec5b ab19 	vmov	sl, fp, d9
    1f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1f22:	2b00      	cmp	r3, #0
    1f24:	f2c0 8148 	blt.w	21b8 <CONFIG_MAIN_STACK_SIZE+0x1b8>
    1f28:	9a00      	ldr	r2, [sp, #0]
    1f2a:	2a0e      	cmp	r2, #14
    1f2c:	f300 8144 	bgt.w	21b8 <CONFIG_MAIN_STACK_SIZE+0x1b8>
    1f30:	4b67      	ldr	r3, [pc, #412]	; (20d0 <CONFIG_MAIN_STACK_SIZE+0xd0>)
    1f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1f36:	e9d3 8900 	ldrd	r8, r9, [r3]
    1f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	f280 80d5 	bge.w	20ec <CONFIG_MAIN_STACK_SIZE+0xec>
    1f42:	9b03      	ldr	r3, [sp, #12]
    1f44:	2b00      	cmp	r3, #0
    1f46:	f300 80d1 	bgt.w	20ec <CONFIG_MAIN_STACK_SIZE+0xec>
    1f4a:	f040 826f 	bne.w	242c <CONFIG_MAIN_STACK_SIZE+0x42c>
    1f4e:	4b65      	ldr	r3, [pc, #404]	; (20e4 <CONFIG_MAIN_STACK_SIZE+0xe4>)
    1f50:	2200      	movs	r2, #0
    1f52:	4640      	mov	r0, r8
    1f54:	4649      	mov	r1, r9
    1f56:	f7fe fadf 	bl	518 <__aeabi_dmul>
    1f5a:	4652      	mov	r2, sl
    1f5c:	465b      	mov	r3, fp
    1f5e:	f7fe fd61 	bl	a24 <__aeabi_dcmpge>
    1f62:	9e03      	ldr	r6, [sp, #12]
    1f64:	4637      	mov	r7, r6
    1f66:	2800      	cmp	r0, #0
    1f68:	f040 8245 	bne.w	23f6 <CONFIG_MAIN_STACK_SIZE+0x3f6>
    1f6c:	9d01      	ldr	r5, [sp, #4]
    1f6e:	2331      	movs	r3, #49	; 0x31
    1f70:	f805 3b01 	strb.w	r3, [r5], #1
    1f74:	9b00      	ldr	r3, [sp, #0]
    1f76:	3301      	adds	r3, #1
    1f78:	9300      	str	r3, [sp, #0]
    1f7a:	e240      	b.n	23fe <CONFIG_MAIN_STACK_SIZE+0x3fe>
    1f7c:	07f2      	lsls	r2, r6, #31
    1f7e:	d505      	bpl.n	1f8c <_dtoa_r+0x4d4>
    1f80:	e9d7 2300 	ldrd	r2, r3, [r7]
    1f84:	f7fe fac8 	bl	518 <__aeabi_dmul>
    1f88:	3501      	adds	r5, #1
    1f8a:	2301      	movs	r3, #1
    1f8c:	1076      	asrs	r6, r6, #1
    1f8e:	3708      	adds	r7, #8
    1f90:	e777      	b.n	1e82 <_dtoa_r+0x3ca>
    1f92:	2502      	movs	r5, #2
    1f94:	e779      	b.n	1e8a <_dtoa_r+0x3d2>
    1f96:	9f00      	ldr	r7, [sp, #0]
    1f98:	9e03      	ldr	r6, [sp, #12]
    1f9a:	e794      	b.n	1ec6 <_dtoa_r+0x40e>
    1f9c:	9901      	ldr	r1, [sp, #4]
    1f9e:	4b4c      	ldr	r3, [pc, #304]	; (20d0 <CONFIG_MAIN_STACK_SIZE+0xd0>)
    1fa0:	4431      	add	r1, r6
    1fa2:	910d      	str	r1, [sp, #52]	; 0x34
    1fa4:	9908      	ldr	r1, [sp, #32]
    1fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    1faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1fae:	2900      	cmp	r1, #0
    1fb0:	d043      	beq.n	203a <CONFIG_MAIN_STACK_SIZE+0x3a>
    1fb2:	494d      	ldr	r1, [pc, #308]	; (20e8 <CONFIG_MAIN_STACK_SIZE+0xe8>)
    1fb4:	2000      	movs	r0, #0
    1fb6:	f7fe fbd9 	bl	76c <__aeabi_ddiv>
    1fba:	4652      	mov	r2, sl
    1fbc:	465b      	mov	r3, fp
    1fbe:	f7fe f8f3 	bl	1a8 <__aeabi_dsub>
    1fc2:	9d01      	ldr	r5, [sp, #4]
    1fc4:	4682      	mov	sl, r0
    1fc6:	468b      	mov	fp, r1
    1fc8:	4649      	mov	r1, r9
    1fca:	4640      	mov	r0, r8
    1fcc:	f7fe fd3e 	bl	a4c <__aeabi_d2iz>
    1fd0:	4606      	mov	r6, r0
    1fd2:	f7fe fa37 	bl	444 <__aeabi_i2d>
    1fd6:	4602      	mov	r2, r0
    1fd8:	460b      	mov	r3, r1
    1fda:	4640      	mov	r0, r8
    1fdc:	4649      	mov	r1, r9
    1fde:	f7fe f8e3 	bl	1a8 <__aeabi_dsub>
    1fe2:	3630      	adds	r6, #48	; 0x30
    1fe4:	f805 6b01 	strb.w	r6, [r5], #1
    1fe8:	4652      	mov	r2, sl
    1fea:	465b      	mov	r3, fp
    1fec:	4680      	mov	r8, r0
    1fee:	4689      	mov	r9, r1
    1ff0:	f7fe fd04 	bl	9fc <__aeabi_dcmplt>
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d163      	bne.n	20c0 <CONFIG_MAIN_STACK_SIZE+0xc0>
    1ff8:	4642      	mov	r2, r8
    1ffa:	464b      	mov	r3, r9
    1ffc:	4936      	ldr	r1, [pc, #216]	; (20d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
    1ffe:	2000      	movs	r0, #0
    2000:	f7fe f8d2 	bl	1a8 <__aeabi_dsub>
    2004:	4652      	mov	r2, sl
    2006:	465b      	mov	r3, fp
    2008:	f7fe fcf8 	bl	9fc <__aeabi_dcmplt>
    200c:	2800      	cmp	r0, #0
    200e:	f040 80b5 	bne.w	217c <CONFIG_MAIN_STACK_SIZE+0x17c>
    2012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2014:	429d      	cmp	r5, r3
    2016:	d081      	beq.n	1f1c <_dtoa_r+0x464>
    2018:	4b30      	ldr	r3, [pc, #192]	; (20dc <CONFIG_MAIN_STACK_SIZE+0xdc>)
    201a:	2200      	movs	r2, #0
    201c:	4650      	mov	r0, sl
    201e:	4659      	mov	r1, fp
    2020:	f7fe fa7a 	bl	518 <__aeabi_dmul>
    2024:	4b2d      	ldr	r3, [pc, #180]	; (20dc <CONFIG_MAIN_STACK_SIZE+0xdc>)
    2026:	4682      	mov	sl, r0
    2028:	468b      	mov	fp, r1
    202a:	4640      	mov	r0, r8
    202c:	4649      	mov	r1, r9
    202e:	2200      	movs	r2, #0
    2030:	f7fe fa72 	bl	518 <__aeabi_dmul>
    2034:	4680      	mov	r8, r0
    2036:	4689      	mov	r9, r1
    2038:	e7c6      	b.n	1fc8 <_dtoa_r+0x510>
    203a:	4650      	mov	r0, sl
    203c:	4659      	mov	r1, fp
    203e:	f7fe fa6b 	bl	518 <__aeabi_dmul>
    2042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2044:	9d01      	ldr	r5, [sp, #4]
    2046:	930f      	str	r3, [sp, #60]	; 0x3c
    2048:	4682      	mov	sl, r0
    204a:	468b      	mov	fp, r1
    204c:	4649      	mov	r1, r9
    204e:	4640      	mov	r0, r8
    2050:	f7fe fcfc 	bl	a4c <__aeabi_d2iz>
    2054:	4606      	mov	r6, r0
    2056:	f7fe f9f5 	bl	444 <__aeabi_i2d>
    205a:	3630      	adds	r6, #48	; 0x30
    205c:	4602      	mov	r2, r0
    205e:	460b      	mov	r3, r1
    2060:	4640      	mov	r0, r8
    2062:	4649      	mov	r1, r9
    2064:	f7fe f8a0 	bl	1a8 <__aeabi_dsub>
    2068:	f805 6b01 	strb.w	r6, [r5], #1
    206c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    206e:	429d      	cmp	r5, r3
    2070:	4680      	mov	r8, r0
    2072:	4689      	mov	r9, r1
    2074:	f04f 0200 	mov.w	r2, #0
    2078:	d124      	bne.n	20c4 <CONFIG_MAIN_STACK_SIZE+0xc4>
    207a:	4b1b      	ldr	r3, [pc, #108]	; (20e8 <CONFIG_MAIN_STACK_SIZE+0xe8>)
    207c:	4650      	mov	r0, sl
    207e:	4659      	mov	r1, fp
    2080:	f7fe f894 	bl	1ac <__adddf3>
    2084:	4602      	mov	r2, r0
    2086:	460b      	mov	r3, r1
    2088:	4640      	mov	r0, r8
    208a:	4649      	mov	r1, r9
    208c:	f7fe fcd4 	bl	a38 <__aeabi_dcmpgt>
    2090:	2800      	cmp	r0, #0
    2092:	d173      	bne.n	217c <CONFIG_MAIN_STACK_SIZE+0x17c>
    2094:	4652      	mov	r2, sl
    2096:	465b      	mov	r3, fp
    2098:	4913      	ldr	r1, [pc, #76]	; (20e8 <CONFIG_MAIN_STACK_SIZE+0xe8>)
    209a:	2000      	movs	r0, #0
    209c:	f7fe f884 	bl	1a8 <__aeabi_dsub>
    20a0:	4602      	mov	r2, r0
    20a2:	460b      	mov	r3, r1
    20a4:	4640      	mov	r0, r8
    20a6:	4649      	mov	r1, r9
    20a8:	f7fe fca8 	bl	9fc <__aeabi_dcmplt>
    20ac:	2800      	cmp	r0, #0
    20ae:	f43f af35 	beq.w	1f1c <_dtoa_r+0x464>
    20b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    20b4:	1e6b      	subs	r3, r5, #1
    20b6:	930f      	str	r3, [sp, #60]	; 0x3c
    20b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    20bc:	2b30      	cmp	r3, #48	; 0x30
    20be:	d0f8      	beq.n	20b2 <CONFIG_MAIN_STACK_SIZE+0xb2>
    20c0:	9700      	str	r7, [sp, #0]
    20c2:	e049      	b.n	2158 <CONFIG_MAIN_STACK_SIZE+0x158>
    20c4:	4b05      	ldr	r3, [pc, #20]	; (20dc <CONFIG_MAIN_STACK_SIZE+0xdc>)
    20c6:	f7fe fa27 	bl	518 <__aeabi_dmul>
    20ca:	4680      	mov	r8, r0
    20cc:	4689      	mov	r9, r1
    20ce:	e7bd      	b.n	204c <CONFIG_MAIN_STACK_SIZE+0x4c>
    20d0:	0000a008 	.word	0x0000a008
    20d4:	00009fe0 	.word	0x00009fe0
    20d8:	3ff00000 	.word	0x3ff00000
    20dc:	40240000 	.word	0x40240000
    20e0:	401c0000 	.word	0x401c0000
    20e4:	40140000 	.word	0x40140000
    20e8:	3fe00000 	.word	0x3fe00000
    20ec:	9d01      	ldr	r5, [sp, #4]
    20ee:	4656      	mov	r6, sl
    20f0:	465f      	mov	r7, fp
    20f2:	4642      	mov	r2, r8
    20f4:	464b      	mov	r3, r9
    20f6:	4630      	mov	r0, r6
    20f8:	4639      	mov	r1, r7
    20fa:	f7fe fb37 	bl	76c <__aeabi_ddiv>
    20fe:	f7fe fca5 	bl	a4c <__aeabi_d2iz>
    2102:	4682      	mov	sl, r0
    2104:	f7fe f99e 	bl	444 <__aeabi_i2d>
    2108:	4642      	mov	r2, r8
    210a:	464b      	mov	r3, r9
    210c:	f7fe fa04 	bl	518 <__aeabi_dmul>
    2110:	4602      	mov	r2, r0
    2112:	460b      	mov	r3, r1
    2114:	4630      	mov	r0, r6
    2116:	4639      	mov	r1, r7
    2118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
    211c:	f7fe f844 	bl	1a8 <__aeabi_dsub>
    2120:	f805 6b01 	strb.w	r6, [r5], #1
    2124:	9e01      	ldr	r6, [sp, #4]
    2126:	9f03      	ldr	r7, [sp, #12]
    2128:	1bae      	subs	r6, r5, r6
    212a:	42b7      	cmp	r7, r6
    212c:	4602      	mov	r2, r0
    212e:	460b      	mov	r3, r1
    2130:	d135      	bne.n	219e <CONFIG_MAIN_STACK_SIZE+0x19e>
    2132:	f7fe f83b 	bl	1ac <__adddf3>
    2136:	4642      	mov	r2, r8
    2138:	464b      	mov	r3, r9
    213a:	4606      	mov	r6, r0
    213c:	460f      	mov	r7, r1
    213e:	f7fe fc7b 	bl	a38 <__aeabi_dcmpgt>
    2142:	b9d0      	cbnz	r0, 217a <CONFIG_MAIN_STACK_SIZE+0x17a>
    2144:	4642      	mov	r2, r8
    2146:	464b      	mov	r3, r9
    2148:	4630      	mov	r0, r6
    214a:	4639      	mov	r1, r7
    214c:	f7fe fc4c 	bl	9e8 <__aeabi_dcmpeq>
    2150:	b110      	cbz	r0, 2158 <CONFIG_MAIN_STACK_SIZE+0x158>
    2152:	f01a 0f01 	tst.w	sl, #1
    2156:	d110      	bne.n	217a <CONFIG_MAIN_STACK_SIZE+0x17a>
    2158:	4620      	mov	r0, r4
    215a:	ee18 1a10 	vmov	r1, s16
    215e:	f005 f8ff 	bl	7360 <_Bfree>
    2162:	2300      	movs	r3, #0
    2164:	9800      	ldr	r0, [sp, #0]
    2166:	702b      	strb	r3, [r5, #0]
    2168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    216a:	3001      	adds	r0, #1
    216c:	6018      	str	r0, [r3, #0]
    216e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2170:	2b00      	cmp	r3, #0
    2172:	f43f acf1 	beq.w	1b58 <_dtoa_r+0xa0>
    2176:	601d      	str	r5, [r3, #0]
    2178:	e4ee      	b.n	1b58 <_dtoa_r+0xa0>
    217a:	9f00      	ldr	r7, [sp, #0]
    217c:	462b      	mov	r3, r5
    217e:	461d      	mov	r5, r3
    2180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2184:	2a39      	cmp	r2, #57	; 0x39
    2186:	d106      	bne.n	2196 <CONFIG_MAIN_STACK_SIZE+0x196>
    2188:	9a01      	ldr	r2, [sp, #4]
    218a:	429a      	cmp	r2, r3
    218c:	d1f7      	bne.n	217e <CONFIG_MAIN_STACK_SIZE+0x17e>
    218e:	9901      	ldr	r1, [sp, #4]
    2190:	2230      	movs	r2, #48	; 0x30
    2192:	3701      	adds	r7, #1
    2194:	700a      	strb	r2, [r1, #0]
    2196:	781a      	ldrb	r2, [r3, #0]
    2198:	3201      	adds	r2, #1
    219a:	701a      	strb	r2, [r3, #0]
    219c:	e790      	b.n	20c0 <CONFIG_MAIN_STACK_SIZE+0xc0>
    219e:	4ba6      	ldr	r3, [pc, #664]	; (2438 <CONFIG_MAIN_STACK_SIZE+0x438>)
    21a0:	2200      	movs	r2, #0
    21a2:	f7fe f9b9 	bl	518 <__aeabi_dmul>
    21a6:	2200      	movs	r2, #0
    21a8:	2300      	movs	r3, #0
    21aa:	4606      	mov	r6, r0
    21ac:	460f      	mov	r7, r1
    21ae:	f7fe fc1b 	bl	9e8 <__aeabi_dcmpeq>
    21b2:	2800      	cmp	r0, #0
    21b4:	d09d      	beq.n	20f2 <CONFIG_MAIN_STACK_SIZE+0xf2>
    21b6:	e7cf      	b.n	2158 <CONFIG_MAIN_STACK_SIZE+0x158>
    21b8:	9a08      	ldr	r2, [sp, #32]
    21ba:	2a00      	cmp	r2, #0
    21bc:	f000 80d7 	beq.w	236e <CONFIG_MAIN_STACK_SIZE+0x36e>
    21c0:	9a06      	ldr	r2, [sp, #24]
    21c2:	2a01      	cmp	r2, #1
    21c4:	f300 80ba 	bgt.w	233c <CONFIG_MAIN_STACK_SIZE+0x33c>
    21c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    21ca:	2a00      	cmp	r2, #0
    21cc:	f000 80b2 	beq.w	2334 <CONFIG_MAIN_STACK_SIZE+0x334>
    21d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    21d4:	9e07      	ldr	r6, [sp, #28]
    21d6:	9d04      	ldr	r5, [sp, #16]
    21d8:	9a04      	ldr	r2, [sp, #16]
    21da:	441a      	add	r2, r3
    21dc:	9204      	str	r2, [sp, #16]
    21de:	9a05      	ldr	r2, [sp, #20]
    21e0:	2101      	movs	r1, #1
    21e2:	441a      	add	r2, r3
    21e4:	4620      	mov	r0, r4
    21e6:	9205      	str	r2, [sp, #20]
    21e8:	f005 f922 	bl	7430 <__i2b>
    21ec:	4607      	mov	r7, r0
    21ee:	2d00      	cmp	r5, #0
    21f0:	dd0c      	ble.n	220c <CONFIG_MAIN_STACK_SIZE+0x20c>
    21f2:	9b05      	ldr	r3, [sp, #20]
    21f4:	2b00      	cmp	r3, #0
    21f6:	dd09      	ble.n	220c <CONFIG_MAIN_STACK_SIZE+0x20c>
    21f8:	42ab      	cmp	r3, r5
    21fa:	9a04      	ldr	r2, [sp, #16]
    21fc:	bfa8      	it	ge
    21fe:	462b      	movge	r3, r5
    2200:	1ad2      	subs	r2, r2, r3
    2202:	9204      	str	r2, [sp, #16]
    2204:	9a05      	ldr	r2, [sp, #20]
    2206:	1aed      	subs	r5, r5, r3
    2208:	1ad3      	subs	r3, r2, r3
    220a:	9305      	str	r3, [sp, #20]
    220c:	9b07      	ldr	r3, [sp, #28]
    220e:	b31b      	cbz	r3, 2258 <CONFIG_MAIN_STACK_SIZE+0x258>
    2210:	9b08      	ldr	r3, [sp, #32]
    2212:	2b00      	cmp	r3, #0
    2214:	f000 80af 	beq.w	2376 <CONFIG_MAIN_STACK_SIZE+0x376>
    2218:	2e00      	cmp	r6, #0
    221a:	dd13      	ble.n	2244 <CONFIG_MAIN_STACK_SIZE+0x244>
    221c:	4639      	mov	r1, r7
    221e:	4632      	mov	r2, r6
    2220:	4620      	mov	r0, r4
    2222:	f005 f9c5 	bl	75b0 <__pow5mult>
    2226:	ee18 2a10 	vmov	r2, s16
    222a:	4601      	mov	r1, r0
    222c:	4607      	mov	r7, r0
    222e:	4620      	mov	r0, r4
    2230:	f005 f914 	bl	745c <__multiply>
    2234:	ee18 1a10 	vmov	r1, s16
    2238:	4680      	mov	r8, r0
    223a:	4620      	mov	r0, r4
    223c:	f005 f890 	bl	7360 <_Bfree>
    2240:	ee08 8a10 	vmov	s16, r8
    2244:	9b07      	ldr	r3, [sp, #28]
    2246:	1b9a      	subs	r2, r3, r6
    2248:	d006      	beq.n	2258 <CONFIG_MAIN_STACK_SIZE+0x258>
    224a:	ee18 1a10 	vmov	r1, s16
    224e:	4620      	mov	r0, r4
    2250:	f005 f9ae 	bl	75b0 <__pow5mult>
    2254:	ee08 0a10 	vmov	s16, r0
    2258:	2101      	movs	r1, #1
    225a:	4620      	mov	r0, r4
    225c:	f005 f8e8 	bl	7430 <__i2b>
    2260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2262:	2b00      	cmp	r3, #0
    2264:	4606      	mov	r6, r0
    2266:	f340 8088 	ble.w	237a <CONFIG_MAIN_STACK_SIZE+0x37a>
    226a:	461a      	mov	r2, r3
    226c:	4601      	mov	r1, r0
    226e:	4620      	mov	r0, r4
    2270:	f005 f99e 	bl	75b0 <__pow5mult>
    2274:	9b06      	ldr	r3, [sp, #24]
    2276:	2b01      	cmp	r3, #1
    2278:	4606      	mov	r6, r0
    227a:	f340 8081 	ble.w	2380 <CONFIG_MAIN_STACK_SIZE+0x380>
    227e:	f04f 0800 	mov.w	r8, #0
    2282:	6933      	ldr	r3, [r6, #16]
    2284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2288:	6918      	ldr	r0, [r3, #16]
    228a:	f006 ff91 	bl	91b0 <__hi0bits>
    228e:	f1c0 0020 	rsb	r0, r0, #32
    2292:	9b05      	ldr	r3, [sp, #20]
    2294:	4418      	add	r0, r3
    2296:	f010 001f 	ands.w	r0, r0, #31
    229a:	f000 8092 	beq.w	23c2 <CONFIG_MAIN_STACK_SIZE+0x3c2>
    229e:	f1c0 0320 	rsb	r3, r0, #32
    22a2:	2b04      	cmp	r3, #4
    22a4:	f340 808a 	ble.w	23bc <CONFIG_MAIN_STACK_SIZE+0x3bc>
    22a8:	f1c0 001c 	rsb	r0, r0, #28
    22ac:	9b04      	ldr	r3, [sp, #16]
    22ae:	4403      	add	r3, r0
    22b0:	9304      	str	r3, [sp, #16]
    22b2:	9b05      	ldr	r3, [sp, #20]
    22b4:	4403      	add	r3, r0
    22b6:	4405      	add	r5, r0
    22b8:	9305      	str	r3, [sp, #20]
    22ba:	9b04      	ldr	r3, [sp, #16]
    22bc:	2b00      	cmp	r3, #0
    22be:	dd07      	ble.n	22d0 <CONFIG_MAIN_STACK_SIZE+0x2d0>
    22c0:	ee18 1a10 	vmov	r1, s16
    22c4:	461a      	mov	r2, r3
    22c6:	4620      	mov	r0, r4
    22c8:	f005 f9cc 	bl	7664 <__lshift>
    22cc:	ee08 0a10 	vmov	s16, r0
    22d0:	9b05      	ldr	r3, [sp, #20]
    22d2:	2b00      	cmp	r3, #0
    22d4:	dd05      	ble.n	22e2 <CONFIG_MAIN_STACK_SIZE+0x2e2>
    22d6:	4631      	mov	r1, r6
    22d8:	461a      	mov	r2, r3
    22da:	4620      	mov	r0, r4
    22dc:	f005 f9c2 	bl	7664 <__lshift>
    22e0:	4606      	mov	r6, r0
    22e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    22e4:	2b00      	cmp	r3, #0
    22e6:	d06e      	beq.n	23c6 <CONFIG_MAIN_STACK_SIZE+0x3c6>
    22e8:	ee18 0a10 	vmov	r0, s16
    22ec:	4631      	mov	r1, r6
    22ee:	f006 ffae 	bl	924e <__mcmp>
    22f2:	2800      	cmp	r0, #0
    22f4:	da67      	bge.n	23c6 <CONFIG_MAIN_STACK_SIZE+0x3c6>
    22f6:	9b00      	ldr	r3, [sp, #0]
    22f8:	3b01      	subs	r3, #1
    22fa:	ee18 1a10 	vmov	r1, s16
    22fe:	9300      	str	r3, [sp, #0]
    2300:	220a      	movs	r2, #10
    2302:	2300      	movs	r3, #0
    2304:	4620      	mov	r0, r4
    2306:	f005 f84d 	bl	73a4 <__multadd>
    230a:	9b08      	ldr	r3, [sp, #32]
    230c:	ee08 0a10 	vmov	s16, r0
    2310:	2b00      	cmp	r3, #0
    2312:	f000 81b1 	beq.w	2678 <CONFIG_MAIN_STACK_SIZE+0x678>
    2316:	2300      	movs	r3, #0
    2318:	4639      	mov	r1, r7
    231a:	220a      	movs	r2, #10
    231c:	4620      	mov	r0, r4
    231e:	f005 f841 	bl	73a4 <__multadd>
    2322:	9b02      	ldr	r3, [sp, #8]
    2324:	2b00      	cmp	r3, #0
    2326:	4607      	mov	r7, r0
    2328:	f300 808e 	bgt.w	2448 <CONFIG_MAIN_STACK_SIZE+0x448>
    232c:	9b06      	ldr	r3, [sp, #24]
    232e:	2b02      	cmp	r3, #2
    2330:	dc51      	bgt.n	23d6 <CONFIG_MAIN_STACK_SIZE+0x3d6>
    2332:	e089      	b.n	2448 <CONFIG_MAIN_STACK_SIZE+0x448>
    2334:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    233a:	e74b      	b.n	21d4 <CONFIG_MAIN_STACK_SIZE+0x1d4>
    233c:	9b03      	ldr	r3, [sp, #12]
    233e:	1e5e      	subs	r6, r3, #1
    2340:	9b07      	ldr	r3, [sp, #28]
    2342:	42b3      	cmp	r3, r6
    2344:	bfbf      	itttt	lt
    2346:	9b07      	ldrlt	r3, [sp, #28]
    2348:	9607      	strlt	r6, [sp, #28]
    234a:	1af2      	sublt	r2, r6, r3
    234c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    234e:	bfb6      	itet	lt
    2350:	189b      	addlt	r3, r3, r2
    2352:	1b9e      	subge	r6, r3, r6
    2354:	930a      	strlt	r3, [sp, #40]	; 0x28
    2356:	9b03      	ldr	r3, [sp, #12]
    2358:	bfb8      	it	lt
    235a:	2600      	movlt	r6, #0
    235c:	2b00      	cmp	r3, #0
    235e:	bfb7      	itett	lt
    2360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
    2364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
    2368:	1a9d      	sublt	r5, r3, r2
    236a:	2300      	movlt	r3, #0
    236c:	e734      	b.n	21d8 <CONFIG_MAIN_STACK_SIZE+0x1d8>
    236e:	9e07      	ldr	r6, [sp, #28]
    2370:	9d04      	ldr	r5, [sp, #16]
    2372:	9f08      	ldr	r7, [sp, #32]
    2374:	e73b      	b.n	21ee <CONFIG_MAIN_STACK_SIZE+0x1ee>
    2376:	9a07      	ldr	r2, [sp, #28]
    2378:	e767      	b.n	224a <CONFIG_MAIN_STACK_SIZE+0x24a>
    237a:	9b06      	ldr	r3, [sp, #24]
    237c:	2b01      	cmp	r3, #1
    237e:	dc18      	bgt.n	23b2 <CONFIG_MAIN_STACK_SIZE+0x3b2>
    2380:	f1ba 0f00 	cmp.w	sl, #0
    2384:	d115      	bne.n	23b2 <CONFIG_MAIN_STACK_SIZE+0x3b2>
    2386:	f3cb 0313 	ubfx	r3, fp, #0, #20
    238a:	b993      	cbnz	r3, 23b2 <CONFIG_MAIN_STACK_SIZE+0x3b2>
    238c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    2390:	0d1b      	lsrs	r3, r3, #20
    2392:	051b      	lsls	r3, r3, #20
    2394:	b183      	cbz	r3, 23b8 <CONFIG_MAIN_STACK_SIZE+0x3b8>
    2396:	9b04      	ldr	r3, [sp, #16]
    2398:	3301      	adds	r3, #1
    239a:	9304      	str	r3, [sp, #16]
    239c:	9b05      	ldr	r3, [sp, #20]
    239e:	3301      	adds	r3, #1
    23a0:	9305      	str	r3, [sp, #20]
    23a2:	f04f 0801 	mov.w	r8, #1
    23a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    23a8:	2b00      	cmp	r3, #0
    23aa:	f47f af6a 	bne.w	2282 <CONFIG_MAIN_STACK_SIZE+0x282>
    23ae:	2001      	movs	r0, #1
    23b0:	e76f      	b.n	2292 <CONFIG_MAIN_STACK_SIZE+0x292>
    23b2:	f04f 0800 	mov.w	r8, #0
    23b6:	e7f6      	b.n	23a6 <CONFIG_MAIN_STACK_SIZE+0x3a6>
    23b8:	4698      	mov	r8, r3
    23ba:	e7f4      	b.n	23a6 <CONFIG_MAIN_STACK_SIZE+0x3a6>
    23bc:	f43f af7d 	beq.w	22ba <CONFIG_MAIN_STACK_SIZE+0x2ba>
    23c0:	4618      	mov	r0, r3
    23c2:	301c      	adds	r0, #28
    23c4:	e772      	b.n	22ac <CONFIG_MAIN_STACK_SIZE+0x2ac>
    23c6:	9b03      	ldr	r3, [sp, #12]
    23c8:	2b00      	cmp	r3, #0
    23ca:	dc37      	bgt.n	243c <CONFIG_MAIN_STACK_SIZE+0x43c>
    23cc:	9b06      	ldr	r3, [sp, #24]
    23ce:	2b02      	cmp	r3, #2
    23d0:	dd34      	ble.n	243c <CONFIG_MAIN_STACK_SIZE+0x43c>
    23d2:	9b03      	ldr	r3, [sp, #12]
    23d4:	9302      	str	r3, [sp, #8]
    23d6:	9b02      	ldr	r3, [sp, #8]
    23d8:	b96b      	cbnz	r3, 23f6 <CONFIG_MAIN_STACK_SIZE+0x3f6>
    23da:	4631      	mov	r1, r6
    23dc:	2205      	movs	r2, #5
    23de:	4620      	mov	r0, r4
    23e0:	f004 ffe0 	bl	73a4 <__multadd>
    23e4:	4601      	mov	r1, r0
    23e6:	4606      	mov	r6, r0
    23e8:	ee18 0a10 	vmov	r0, s16
    23ec:	f006 ff2f 	bl	924e <__mcmp>
    23f0:	2800      	cmp	r0, #0
    23f2:	f73f adbb 	bgt.w	1f6c <_dtoa_r+0x4b4>
    23f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    23f8:	9d01      	ldr	r5, [sp, #4]
    23fa:	43db      	mvns	r3, r3
    23fc:	9300      	str	r3, [sp, #0]
    23fe:	f04f 0800 	mov.w	r8, #0
    2402:	4631      	mov	r1, r6
    2404:	4620      	mov	r0, r4
    2406:	f004 ffab 	bl	7360 <_Bfree>
    240a:	2f00      	cmp	r7, #0
    240c:	f43f aea4 	beq.w	2158 <CONFIG_MAIN_STACK_SIZE+0x158>
    2410:	f1b8 0f00 	cmp.w	r8, #0
    2414:	d005      	beq.n	2422 <CONFIG_MAIN_STACK_SIZE+0x422>
    2416:	45b8      	cmp	r8, r7
    2418:	d003      	beq.n	2422 <CONFIG_MAIN_STACK_SIZE+0x422>
    241a:	4641      	mov	r1, r8
    241c:	4620      	mov	r0, r4
    241e:	f004 ff9f 	bl	7360 <_Bfree>
    2422:	4639      	mov	r1, r7
    2424:	4620      	mov	r0, r4
    2426:	f004 ff9b 	bl	7360 <_Bfree>
    242a:	e695      	b.n	2158 <CONFIG_MAIN_STACK_SIZE+0x158>
    242c:	2600      	movs	r6, #0
    242e:	4637      	mov	r7, r6
    2430:	e7e1      	b.n	23f6 <CONFIG_MAIN_STACK_SIZE+0x3f6>
    2432:	9700      	str	r7, [sp, #0]
    2434:	4637      	mov	r7, r6
    2436:	e599      	b.n	1f6c <_dtoa_r+0x4b4>
    2438:	40240000 	.word	0x40240000
    243c:	9b08      	ldr	r3, [sp, #32]
    243e:	2b00      	cmp	r3, #0
    2440:	f000 80ca 	beq.w	25d8 <CONFIG_MAIN_STACK_SIZE+0x5d8>
    2444:	9b03      	ldr	r3, [sp, #12]
    2446:	9302      	str	r3, [sp, #8]
    2448:	2d00      	cmp	r5, #0
    244a:	dd05      	ble.n	2458 <CONFIG_MAIN_STACK_SIZE+0x458>
    244c:	4639      	mov	r1, r7
    244e:	462a      	mov	r2, r5
    2450:	4620      	mov	r0, r4
    2452:	f005 f907 	bl	7664 <__lshift>
    2456:	4607      	mov	r7, r0
    2458:	f1b8 0f00 	cmp.w	r8, #0
    245c:	d05b      	beq.n	2516 <CONFIG_MAIN_STACK_SIZE+0x516>
    245e:	6879      	ldr	r1, [r7, #4]
    2460:	4620      	mov	r0, r4
    2462:	f004 ff3d 	bl	72e0 <_Balloc>
    2466:	4605      	mov	r5, r0
    2468:	b928      	cbnz	r0, 2476 <CONFIG_MAIN_STACK_SIZE+0x476>
    246a:	4b87      	ldr	r3, [pc, #540]	; (2688 <CONFIG_MAIN_STACK_SIZE+0x688>)
    246c:	4602      	mov	r2, r0
    246e:	f240 21ea 	movw	r1, #746	; 0x2ea
    2472:	f7ff bb3b 	b.w	1aec <_dtoa_r+0x34>
    2476:	693a      	ldr	r2, [r7, #16]
    2478:	3202      	adds	r2, #2
    247a:	0092      	lsls	r2, r2, #2
    247c:	f107 010c 	add.w	r1, r7, #12
    2480:	300c      	adds	r0, #12
    2482:	f006 fc10 	bl	8ca6 <memcpy>
    2486:	2201      	movs	r2, #1
    2488:	4629      	mov	r1, r5
    248a:	4620      	mov	r0, r4
    248c:	f005 f8ea 	bl	7664 <__lshift>
    2490:	9b01      	ldr	r3, [sp, #4]
    2492:	f103 0901 	add.w	r9, r3, #1
    2496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    249a:	4413      	add	r3, r2
    249c:	9305      	str	r3, [sp, #20]
    249e:	f00a 0301 	and.w	r3, sl, #1
    24a2:	46b8      	mov	r8, r7
    24a4:	9304      	str	r3, [sp, #16]
    24a6:	4607      	mov	r7, r0
    24a8:	4631      	mov	r1, r6
    24aa:	ee18 0a10 	vmov	r0, s16
    24ae:	f006 fd9a 	bl	8fe6 <quorem>
    24b2:	4641      	mov	r1, r8
    24b4:	9002      	str	r0, [sp, #8]
    24b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    24ba:	ee18 0a10 	vmov	r0, s16
    24be:	f006 fec6 	bl	924e <__mcmp>
    24c2:	463a      	mov	r2, r7
    24c4:	9003      	str	r0, [sp, #12]
    24c6:	4631      	mov	r1, r6
    24c8:	4620      	mov	r0, r4
    24ca:	f005 f93b 	bl	7744 <__mdiff>
    24ce:	68c2      	ldr	r2, [r0, #12]
    24d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    24d4:	4605      	mov	r5, r0
    24d6:	bb02      	cbnz	r2, 251a <CONFIG_MAIN_STACK_SIZE+0x51a>
    24d8:	4601      	mov	r1, r0
    24da:	ee18 0a10 	vmov	r0, s16
    24de:	f006 feb6 	bl	924e <__mcmp>
    24e2:	4602      	mov	r2, r0
    24e4:	4629      	mov	r1, r5
    24e6:	4620      	mov	r0, r4
    24e8:	9207      	str	r2, [sp, #28]
    24ea:	f004 ff39 	bl	7360 <_Bfree>
    24ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    24f2:	ea43 0102 	orr.w	r1, r3, r2
    24f6:	9b04      	ldr	r3, [sp, #16]
    24f8:	430b      	orrs	r3, r1
    24fa:	464d      	mov	r5, r9
    24fc:	d10f      	bne.n	251e <CONFIG_MAIN_STACK_SIZE+0x51e>
    24fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    2502:	d02a      	beq.n	255a <CONFIG_MAIN_STACK_SIZE+0x55a>
    2504:	9b03      	ldr	r3, [sp, #12]
    2506:	2b00      	cmp	r3, #0
    2508:	dd02      	ble.n	2510 <CONFIG_MAIN_STACK_SIZE+0x510>
    250a:	9b02      	ldr	r3, [sp, #8]
    250c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
    2510:	f88b a000 	strb.w	sl, [fp]
    2514:	e775      	b.n	2402 <CONFIG_MAIN_STACK_SIZE+0x402>
    2516:	4638      	mov	r0, r7
    2518:	e7ba      	b.n	2490 <CONFIG_MAIN_STACK_SIZE+0x490>
    251a:	2201      	movs	r2, #1
    251c:	e7e2      	b.n	24e4 <CONFIG_MAIN_STACK_SIZE+0x4e4>
    251e:	9b03      	ldr	r3, [sp, #12]
    2520:	2b00      	cmp	r3, #0
    2522:	db04      	blt.n	252e <CONFIG_MAIN_STACK_SIZE+0x52e>
    2524:	9906      	ldr	r1, [sp, #24]
    2526:	430b      	orrs	r3, r1
    2528:	9904      	ldr	r1, [sp, #16]
    252a:	430b      	orrs	r3, r1
    252c:	d122      	bne.n	2574 <CONFIG_MAIN_STACK_SIZE+0x574>
    252e:	2a00      	cmp	r2, #0
    2530:	ddee      	ble.n	2510 <CONFIG_MAIN_STACK_SIZE+0x510>
    2532:	ee18 1a10 	vmov	r1, s16
    2536:	2201      	movs	r2, #1
    2538:	4620      	mov	r0, r4
    253a:	f005 f893 	bl	7664 <__lshift>
    253e:	4631      	mov	r1, r6
    2540:	ee08 0a10 	vmov	s16, r0
    2544:	f006 fe83 	bl	924e <__mcmp>
    2548:	2800      	cmp	r0, #0
    254a:	dc03      	bgt.n	2554 <CONFIG_MAIN_STACK_SIZE+0x554>
    254c:	d1e0      	bne.n	2510 <CONFIG_MAIN_STACK_SIZE+0x510>
    254e:	f01a 0f01 	tst.w	sl, #1
    2552:	d0dd      	beq.n	2510 <CONFIG_MAIN_STACK_SIZE+0x510>
    2554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    2558:	d1d7      	bne.n	250a <CONFIG_MAIN_STACK_SIZE+0x50a>
    255a:	2339      	movs	r3, #57	; 0x39
    255c:	f88b 3000 	strb.w	r3, [fp]
    2560:	462b      	mov	r3, r5
    2562:	461d      	mov	r5, r3
    2564:	3b01      	subs	r3, #1
    2566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    256a:	2a39      	cmp	r2, #57	; 0x39
    256c:	d071      	beq.n	2652 <CONFIG_MAIN_STACK_SIZE+0x652>
    256e:	3201      	adds	r2, #1
    2570:	701a      	strb	r2, [r3, #0]
    2572:	e746      	b.n	2402 <CONFIG_MAIN_STACK_SIZE+0x402>
    2574:	2a00      	cmp	r2, #0
    2576:	dd07      	ble.n	2588 <CONFIG_MAIN_STACK_SIZE+0x588>
    2578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    257c:	d0ed      	beq.n	255a <CONFIG_MAIN_STACK_SIZE+0x55a>
    257e:	f10a 0301 	add.w	r3, sl, #1
    2582:	f88b 3000 	strb.w	r3, [fp]
    2586:	e73c      	b.n	2402 <CONFIG_MAIN_STACK_SIZE+0x402>
    2588:	9b05      	ldr	r3, [sp, #20]
    258a:	f809 ac01 	strb.w	sl, [r9, #-1]
    258e:	4599      	cmp	r9, r3
    2590:	d047      	beq.n	2622 <CONFIG_MAIN_STACK_SIZE+0x622>
    2592:	ee18 1a10 	vmov	r1, s16
    2596:	2300      	movs	r3, #0
    2598:	220a      	movs	r2, #10
    259a:	4620      	mov	r0, r4
    259c:	f004 ff02 	bl	73a4 <__multadd>
    25a0:	45b8      	cmp	r8, r7
    25a2:	ee08 0a10 	vmov	s16, r0
    25a6:	f04f 0300 	mov.w	r3, #0
    25aa:	f04f 020a 	mov.w	r2, #10
    25ae:	4641      	mov	r1, r8
    25b0:	4620      	mov	r0, r4
    25b2:	d106      	bne.n	25c2 <CONFIG_MAIN_STACK_SIZE+0x5c2>
    25b4:	f004 fef6 	bl	73a4 <__multadd>
    25b8:	4680      	mov	r8, r0
    25ba:	4607      	mov	r7, r0
    25bc:	f109 0901 	add.w	r9, r9, #1
    25c0:	e772      	b.n	24a8 <CONFIG_MAIN_STACK_SIZE+0x4a8>
    25c2:	f004 feef 	bl	73a4 <__multadd>
    25c6:	4639      	mov	r1, r7
    25c8:	4680      	mov	r8, r0
    25ca:	2300      	movs	r3, #0
    25cc:	220a      	movs	r2, #10
    25ce:	4620      	mov	r0, r4
    25d0:	f004 fee8 	bl	73a4 <__multadd>
    25d4:	4607      	mov	r7, r0
    25d6:	e7f1      	b.n	25bc <CONFIG_MAIN_STACK_SIZE+0x5bc>
    25d8:	9b03      	ldr	r3, [sp, #12]
    25da:	9302      	str	r3, [sp, #8]
    25dc:	9d01      	ldr	r5, [sp, #4]
    25de:	ee18 0a10 	vmov	r0, s16
    25e2:	4631      	mov	r1, r6
    25e4:	f006 fcff 	bl	8fe6 <quorem>
    25e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    25ec:	9b01      	ldr	r3, [sp, #4]
    25ee:	f805 ab01 	strb.w	sl, [r5], #1
    25f2:	1aea      	subs	r2, r5, r3
    25f4:	9b02      	ldr	r3, [sp, #8]
    25f6:	4293      	cmp	r3, r2
    25f8:	dd09      	ble.n	260e <CONFIG_MAIN_STACK_SIZE+0x60e>
    25fa:	ee18 1a10 	vmov	r1, s16
    25fe:	2300      	movs	r3, #0
    2600:	220a      	movs	r2, #10
    2602:	4620      	mov	r0, r4
    2604:	f004 fece 	bl	73a4 <__multadd>
    2608:	ee08 0a10 	vmov	s16, r0
    260c:	e7e7      	b.n	25de <CONFIG_MAIN_STACK_SIZE+0x5de>
    260e:	9b02      	ldr	r3, [sp, #8]
    2610:	2b00      	cmp	r3, #0
    2612:	bfc8      	it	gt
    2614:	461d      	movgt	r5, r3
    2616:	9b01      	ldr	r3, [sp, #4]
    2618:	bfd8      	it	le
    261a:	2501      	movle	r5, #1
    261c:	441d      	add	r5, r3
    261e:	f04f 0800 	mov.w	r8, #0
    2622:	ee18 1a10 	vmov	r1, s16
    2626:	2201      	movs	r2, #1
    2628:	4620      	mov	r0, r4
    262a:	f005 f81b 	bl	7664 <__lshift>
    262e:	4631      	mov	r1, r6
    2630:	ee08 0a10 	vmov	s16, r0
    2634:	f006 fe0b 	bl	924e <__mcmp>
    2638:	2800      	cmp	r0, #0
    263a:	dc91      	bgt.n	2560 <CONFIG_MAIN_STACK_SIZE+0x560>
    263c:	d102      	bne.n	2644 <CONFIG_MAIN_STACK_SIZE+0x644>
    263e:	f01a 0f01 	tst.w	sl, #1
    2642:	d18d      	bne.n	2560 <CONFIG_MAIN_STACK_SIZE+0x560>
    2644:	462b      	mov	r3, r5
    2646:	461d      	mov	r5, r3
    2648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    264c:	2a30      	cmp	r2, #48	; 0x30
    264e:	d0fa      	beq.n	2646 <CONFIG_MAIN_STACK_SIZE+0x646>
    2650:	e6d7      	b.n	2402 <CONFIG_MAIN_STACK_SIZE+0x402>
    2652:	9a01      	ldr	r2, [sp, #4]
    2654:	429a      	cmp	r2, r3
    2656:	d184      	bne.n	2562 <CONFIG_MAIN_STACK_SIZE+0x562>
    2658:	9b00      	ldr	r3, [sp, #0]
    265a:	3301      	adds	r3, #1
    265c:	9300      	str	r3, [sp, #0]
    265e:	2331      	movs	r3, #49	; 0x31
    2660:	7013      	strb	r3, [r2, #0]
    2662:	e6ce      	b.n	2402 <CONFIG_MAIN_STACK_SIZE+0x402>
    2664:	4b09      	ldr	r3, [pc, #36]	; (268c <CONFIG_MAIN_STACK_SIZE+0x68c>)
    2666:	f7ff ba95 	b.w	1b94 <_dtoa_r+0xdc>
    266a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    266c:	2b00      	cmp	r3, #0
    266e:	f47f aa6e 	bne.w	1b4e <_dtoa_r+0x96>
    2672:	4b07      	ldr	r3, [pc, #28]	; (2690 <CONFIG_MAIN_STACK_SIZE+0x690>)
    2674:	f7ff ba8e 	b.w	1b94 <_dtoa_r+0xdc>
    2678:	9b02      	ldr	r3, [sp, #8]
    267a:	2b00      	cmp	r3, #0
    267c:	dcae      	bgt.n	25dc <CONFIG_MAIN_STACK_SIZE+0x5dc>
    267e:	9b06      	ldr	r3, [sp, #24]
    2680:	2b02      	cmp	r3, #2
    2682:	f73f aea8 	bgt.w	23d6 <CONFIG_MAIN_STACK_SIZE+0x3d6>
    2686:	e7a9      	b.n	25dc <CONFIG_MAIN_STACK_SIZE+0x5dc>
    2688:	0000abb1 	.word	0x0000abb1
    268c:	0000a905 	.word	0x0000a905
    2690:	0000ab0f 	.word	0x0000ab0f

00002694 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
    2694:	4b19      	ldr	r3, [pc, #100]	; (26fc <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x68>)
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
    2696:	481a      	ldr	r0, [pc, #104]	; (2700 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x6c>)
    2698:	681a      	ldr	r2, [r3, #0]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
    269a:	4b1a      	ldr	r3, [pc, #104]	; (2704 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x70>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension0, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
    269c:	f502 6144 	add.w	r1, r2, #3136	; 0xc40
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
    26a0:	b510      	push	{r4, lr}
};const NodeInfo_t nodeData[] = {
    26a2:	6059      	str	r1, [r3, #4]
    26a4:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
    26a8:	f502 7144 	add.w	r1, r2, #784	; 0x310
    26ac:	2400      	movs	r4, #0
};const NodeInfo_t nodeData[] = {
    26ae:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
    26b2:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    26b6:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
    26ba:	f502 71c8 	add.w	r1, r2, #400	; 0x190
    26be:	e9c0 4400 	strd	r4, r4, [r0]
};const NodeInfo_t nodeData[] = {
    26c2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    26c6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    26ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    26ce:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    26d2:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    26d6:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
    26da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
static std::vector<void*> overflow_buffers;
    26de:	490a      	ldr	r1, [pc, #40]	; (2708 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x74>)
    26e0:	4a0a      	ldr	r2, [pc, #40]	; (270c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x78>)
    26e2:	6084      	str	r4, [r0, #8]
    26e4:	f005 fd14 	bl	8110 <__aeabi_atexit>
    26e8:	4809      	ldr	r0, [pc, #36]	; (2710 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x7c>)
static std::vector<scratch_buffer_t> scratch_buffers;
    26ea:	4a08      	ldr	r2, [pc, #32]	; (270c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x78>)
    26ec:	6084      	str	r4, [r0, #8]
    26ee:	e9c0 4400 	strd	r4, r4, [r0]
    26f2:	4908      	ldr	r1, [pc, #32]	; (2714 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE+0x80>)
}
    26f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static std::vector<scratch_buffer_t> scratch_buffers;
    26f8:	f005 bd0a 	b.w	8110 <__aeabi_atexit>
    26fc:	200007b8 	.word	0x200007b8
    2700:	200007c8 	.word	0x200007c8
    2704:	20000000 	.word	0x20000000
    2708:	00007d93 	.word	0x00007d93
    270c:	200007d4 	.word	0x200007d4
    2710:	200007bc 	.word	0x200007bc
    2714:	00007da3 	.word	0x00007da3

00002718 <main>:
int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features + offset, length * sizeof(float));
    return 0;
}

int main() {
    2718:	b508      	push	{r3, lr}
    // This is needed so that output of printf is output immediately without buffering
    setvbuf(stdout, NULL, _IONBF, 0);
    271a:	4b09      	ldr	r3, [pc, #36]	; (2740 <main+0x28>)
    271c:	6818      	ldr	r0, [r3, #0]
    271e:	2300      	movs	r3, #0
    2720:	4619      	mov	r1, r3
    2722:	2202      	movs	r2, #2
    2724:	6880      	ldr	r0, [r0, #8]
    2726:	f004 fa69 	bl	6bfc <setvbuf>
#ifdef CONFIG_SOC_NRF5340_CPUAPP
    // Switch CPU core clock to 128 MHz
    nrfx_clock_divider_set(NRF_CLOCK_DOMAIN_HFCLK, NRF_CLOCK_HFCLK_DIV_1);
#endif

    printk("Edge Impulse standalone inferencing (Zephyr)\n");
    272a:	4806      	ldr	r0, [pc, #24]	; (2744 <main+0x2c>)
    272c:	f005 fb61 	bl	7df2 <printk>

    if (sizeof(features) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        printk("The size of your 'features' array is not correct. Expected %d items, but had %u\n",
    2730:	4805      	ldr	r0, [pc, #20]	; (2748 <main+0x30>)
    2732:	2200      	movs	r2, #0
    2734:	f643 6170 	movw	r1, #15984	; 0x3e70
    2738:	f005 fb5b 	bl	7df2 <printk>
#endif
        printk("]\n");

        k_msleep(2000);
    }
}
    273c:	2001      	movs	r0, #1
    273e:	bd08      	pop	{r3, pc}
    2740:	2000033c 	.word	0x2000033c
    2744:	0000a7f8 	.word	0x0000a7f8
    2748:	0000a826 	.word	0x0000a826

0000274c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    274c:	680b      	ldr	r3, [r1, #0]
    274e:	3301      	adds	r3, #1
    2750:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2752:	4b01      	ldr	r3, [pc, #4]	; (2758 <char_out+0xc>)
    2754:	681b      	ldr	r3, [r3, #0]
    2756:	4718      	bx	r3
    2758:	20000228 	.word	0x20000228

0000275c <__printk_hook_install>:
	_char_out = fn;
    275c:	4b01      	ldr	r3, [pc, #4]	; (2764 <__printk_hook_install+0x8>)
    275e:	6018      	str	r0, [r3, #0]
}
    2760:	4770      	bx	lr
    2762:	bf00      	nop
    2764:	20000228 	.word	0x20000228

00002768 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    2768:	b507      	push	{r0, r1, r2, lr}
    276a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    276c:	2100      	movs	r1, #0
{
    276e:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    2770:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    2772:	4803      	ldr	r0, [pc, #12]	; (2780 <vprintk+0x18>)
    2774:	a901      	add	r1, sp, #4
    2776:	f7fe fb33 	bl	de0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    277a:	b003      	add	sp, #12
    277c:	f85d fb04 	ldr.w	pc, [sp], #4
    2780:	0000274d 	.word	0x0000274d

00002784 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2788:	f8b0 901c 	ldrh.w	r9, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    278c:	f019 0808 	ands.w	r8, r9, #8
{
    2790:	4604      	mov	r4, r0
    2792:	4693      	mov	fp, r2
	if (processing) {
    2794:	d00e      	beq.n	27b4 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    2796:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2798:	bf0c      	ite	eq
    279a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    279e:	f049 0920 	orrne.w	r9, r9, #32
    27a2:	f8a0 901c 	strh.w	r9, [r0, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    27a6:	f38b 8811 	msr	BASEPRI, fp
    27aa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    27ae:	b003      	add	sp, #12
    27b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    27b4:	f8df a190 	ldr.w	sl, [pc, #400]	; 2948 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    27b8:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    27bc:	2902      	cmp	r1, #2
    27be:	d107      	bne.n	27d0 <process_event+0x4c>
			evt = process_recheck(mgr);
    27c0:	4620      	mov	r0, r4
    27c2:	f005 fb23 	bl	7e0c <process_recheck>
		if (evt == EVT_NOP) {
    27c6:	2800      	cmp	r0, #0
    27c8:	d0ed      	beq.n	27a6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    27ca:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    27cc:	8ba3      	ldrh	r3, [r4, #28]
		if (evt == EVT_COMPLETE) {
    27ce:	d14b      	bne.n	2868 <process_event+0xe4>
			res = mgr->last_res;
    27d0:	69a7      	ldr	r7, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    27d2:	8ba1      	ldrh	r1, [r4, #28]
	if (res < 0) {
    27d4:	2f00      	cmp	r7, #0
    27d6:	da15      	bge.n	2804 <process_event+0x80>
		*clients = mgr->clients;
    27d8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    27da:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    27de:	e9c4 8800 	strd	r8, r8, [r4]
    27e2:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    27e6:	83a1      	strh	r1, [r4, #28]
		onoff_transition_fn transit = NULL;
    27e8:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    27ea:	8ba1      	ldrh	r1, [r4, #28]
    27ec:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    27f0:	454a      	cmp	r2, r9
    27f2:	d002      	beq.n	27fa <process_event+0x76>
		if (do_monitors
    27f4:	68a3      	ldr	r3, [r4, #8]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d157      	bne.n	28aa <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    27fa:	b90d      	cbnz	r5, 2800 <process_event+0x7c>
		    || (transit != NULL)) {
    27fc:	2e00      	cmp	r6, #0
    27fe:	d06f      	beq.n	28e0 <process_event+0x15c>
    2800:	2300      	movs	r3, #0
    2802:	e053      	b.n	28ac <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2804:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2808:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    280a:	2a01      	cmp	r2, #1
    280c:	d81d      	bhi.n	284a <process_event+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    280e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2812:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2814:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2816:	b289      	uxth	r1, r1
    2818:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    281c:	d10a      	bne.n	2834 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    281e:	b13d      	cbz	r5, 2830 <process_event+0xac>
    2820:	8be3      	ldrh	r3, [r4, #30]
    2822:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    2824:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    2826:	3301      	adds	r3, #1
    2828:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    282a:	2a00      	cmp	r2, #0
    282c:	d1fa      	bne.n	2824 <process_event+0xa0>
    282e:	83e3      	strh	r3, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2830:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2834:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2836:	4620      	mov	r0, r4
    2838:	f005 fae8 	bl	7e0c <process_recheck>
    283c:	2800      	cmp	r0, #0
    283e:	d0d3      	beq.n	27e8 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2840:	8ba3      	ldrh	r3, [r4, #28]
    2842:	f043 0320 	orr.w	r3, r3, #32
    2846:	83a3      	strh	r3, [r4, #28]
    2848:	e7ce      	b.n	27e8 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    284a:	2b04      	cmp	r3, #4
    284c:	d10a      	bne.n	2864 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    284e:	f021 0107 	bic.w	r1, r1, #7
    2852:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2854:	83a1      	strh	r1, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2856:	4620      	mov	r0, r4
    2858:	f005 fad8 	bl	7e0c <process_recheck>
    285c:	b110      	cbz	r0, 2864 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    285e:	f041 0120 	orr.w	r1, r1, #32
    2862:	83a1      	strh	r1, [r4, #28]
    2864:	2500      	movs	r5, #0
    2866:	e7bf      	b.n	27e8 <process_event+0x64>
		} else if (evt == EVT_START) {
    2868:	2803      	cmp	r0, #3
    286a:	d109      	bne.n	2880 <process_event+0xfc>
			transit = mgr->transitions->start;
    286c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    286e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    2872:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2874:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    2878:	83a3      	strh	r3, [r4, #28]
}
    287a:	2500      	movs	r5, #0
		res = 0;
    287c:	462f      	mov	r7, r5
    287e:	e7b4      	b.n	27ea <process_event+0x66>
		} else if (evt == EVT_STOP) {
    2880:	2804      	cmp	r0, #4
    2882:	d106      	bne.n	2892 <process_event+0x10e>
			transit = mgr->transitions->stop;
    2884:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2886:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    288a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    288c:	f043 0304 	orr.w	r3, r3, #4
    2890:	e7f2      	b.n	2878 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    2892:	2805      	cmp	r0, #5
    2894:	d106      	bne.n	28a4 <process_event+0x120>
			transit = mgr->transitions->reset;
    2896:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2898:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    289c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    289e:	f043 0305 	orr.w	r3, r3, #5
    28a2:	e7e9      	b.n	2878 <process_event+0xf4>
    28a4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    28a6:	462e      	mov	r6, r5
    28a8:	e7e8      	b.n	287c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    28aa:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    28ac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    28b0:	83a1      	strh	r1, [r4, #28]
    28b2:	f38b 8811 	msr	BASEPRI, fp
    28b6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    28ba:	bb03      	cbnz	r3, 28fe <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
    28bc:	2d00      	cmp	r5, #0
    28be:	d131      	bne.n	2924 <process_event+0x1a0>
			if (transit != NULL) {
    28c0:	b116      	cbz	r6, 28c8 <process_event+0x144>
				transit(mgr, transition_complete);
    28c2:	4651      	mov	r1, sl
    28c4:	4620      	mov	r0, r4
    28c6:	47b0      	blx	r6
	__asm__ volatile(
    28c8:	f04f 0320 	mov.w	r3, #32
    28cc:	f3ef 8b11 	mrs	fp, BASEPRI
    28d0:	f383 8812 	msr	BASEPRI_MAX, r3
    28d4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    28d8:	8ba3      	ldrh	r3, [r4, #28]
    28da:	f023 0308 	bic.w	r3, r3, #8
    28de:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    28e0:	8ba3      	ldrh	r3, [r4, #28]
    28e2:	06da      	lsls	r2, r3, #27
    28e4:	d527      	bpl.n	2936 <process_event+0x1b2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    28e6:	f023 0310 	bic.w	r3, r3, #16
    28ea:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    28ec:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    28ee:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    28f2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    28f6:	2900      	cmp	r1, #0
    28f8:	f47f af60 	bne.w	27bc <process_event+0x38>
out:
    28fc:	e753      	b.n	27a6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    28fe:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2900:	2900      	cmp	r1, #0
    2902:	d0db      	beq.n	28bc <process_event+0x138>
	return node->next;
    2904:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    2908:	f8d1 b004 	ldr.w	fp, [r1, #4]
    290c:	9201      	str	r2, [sp, #4]
    290e:	463b      	mov	r3, r7
    2910:	4620      	mov	r0, r4
    2912:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2914:	9a01      	ldr	r2, [sp, #4]
    2916:	f1b9 0f00 	cmp.w	r9, #0
    291a:	d0cf      	beq.n	28bc <process_event+0x138>
    291c:	4649      	mov	r1, r9
    291e:	f8d9 9000 	ldr.w	r9, [r9]
    2922:	e7f1      	b.n	2908 <process_event+0x184>
    2924:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    2926:	463b      	mov	r3, r7
    2928:	4620      	mov	r0, r4
    292a:	9201      	str	r2, [sp, #4]
    292c:	682d      	ldr	r5, [r5, #0]
    292e:	f005 fa89 	bl	7e44 <notify_one>
	while (!sys_slist_is_empty(list)) {
    2932:	9a01      	ldr	r2, [sp, #4]
    2934:	e7c2      	b.n	28bc <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2936:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    293a:	bf1e      	ittt	ne
    293c:	f023 0320 	bicne.w	r3, r3, #32
    2940:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    2942:	2102      	movne	r1, #2
    2944:	e7d3      	b.n	28ee <process_event+0x16a>
    2946:	bf00      	nop
    2948:	00007e71 	.word	0x00007e71

0000294c <extract_decimal>:
{
    294c:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
    294e:	4e09      	ldr	r6, [pc, #36]	; (2974 <extract_decimal+0x28>)
    2950:	6801      	ldr	r1, [r0, #0]
{
    2952:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    2954:	270a      	movs	r7, #10
	size_t val = 0;
    2956:	2000      	movs	r0, #0
    2958:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    295a:	3101      	adds	r1, #1
    295c:	7823      	ldrb	r3, [r4, #0]
    295e:	5d9d      	ldrb	r5, [r3, r6]
    2960:	076d      	lsls	r5, r5, #29
    2962:	d401      	bmi.n	2968 <extract_decimal+0x1c>
	*str = sp;
    2964:	6014      	str	r4, [r2, #0]
}
    2966:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    2968:	fb07 3300 	mla	r3, r7, r0, r3
    296c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    2970:	e7f2      	b.n	2958 <extract_decimal+0xc>
    2972:	bf00      	nop
    2974:	0000a9cc 	.word	0x0000a9cc

00002978 <encode_uint>:
{
    2978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    297c:	4615      	mov	r5, r2
    297e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    2980:	78d3      	ldrb	r3, [r2, #3]
    2982:	4a22      	ldr	r2, [pc, #136]	; (2a0c <encode_uint+0x94>)
    2984:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
    2988:	2b6f      	cmp	r3, #111	; 0x6f
{
    298a:	4680      	mov	r8, r0
    298c:	460f      	mov	r7, r1
    298e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    2992:	d029      	beq.n	29e8 <encode_uint+0x70>
    2994:	d824      	bhi.n	29e0 <encode_uint+0x68>
		return 16;
    2996:	2b58      	cmp	r3, #88	; 0x58
    2998:	bf14      	ite	ne
    299a:	260a      	movne	r6, #10
    299c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    299e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    29a2:	4632      	mov	r2, r6
    29a4:	2300      	movs	r3, #0
    29a6:	4640      	mov	r0, r8
    29a8:	4639      	mov	r1, r7
    29aa:	f7fe f877 	bl	a9c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    29ae:	2a09      	cmp	r2, #9
    29b0:	b2d4      	uxtb	r4, r2
    29b2:	d81e      	bhi.n	29f2 <encode_uint+0x7a>
    29b4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    29b6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    29b8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    29ba:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    29be:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    29c2:	d301      	bcc.n	29c8 <encode_uint+0x50>
    29c4:	45d1      	cmp	r9, sl
    29c6:	d811      	bhi.n	29ec <encode_uint+0x74>
	if (conv->flag_hash) {
    29c8:	782b      	ldrb	r3, [r5, #0]
    29ca:	069b      	lsls	r3, r3, #26
    29cc:	d505      	bpl.n	29da <encode_uint+0x62>
		if (radix == 8) {
    29ce:	2e08      	cmp	r6, #8
    29d0:	d115      	bne.n	29fe <encode_uint+0x86>
			conv->altform_0 = true;
    29d2:	78ab      	ldrb	r3, [r5, #2]
    29d4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    29d8:	70ab      	strb	r3, [r5, #2]
}
    29da:	4648      	mov	r0, r9
    29dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    29e0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    29e4:	2b70      	cmp	r3, #112	; 0x70
    29e6:	e7d7      	b.n	2998 <encode_uint+0x20>
	switch (specifier) {
    29e8:	2608      	movs	r6, #8
    29ea:	e7d8      	b.n	299e <encode_uint+0x26>
		value /= radix;
    29ec:	4680      	mov	r8, r0
    29ee:	460f      	mov	r7, r1
    29f0:	e7d7      	b.n	29a2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    29f2:	f1bb 0f01 	cmp.w	fp, #1
    29f6:	bf0c      	ite	eq
    29f8:	3437      	addeq	r4, #55	; 0x37
    29fa:	3457      	addne	r4, #87	; 0x57
    29fc:	e7db      	b.n	29b6 <encode_uint+0x3e>
		} else if (radix == 16) {
    29fe:	2e10      	cmp	r6, #16
    2a00:	d1eb      	bne.n	29da <encode_uint+0x62>
			conv->altform_0c = true;
    2a02:	78ab      	ldrb	r3, [r5, #2]
    2a04:	f043 0310 	orr.w	r3, r3, #16
    2a08:	e7e6      	b.n	29d8 <encode_uint+0x60>
    2a0a:	bf00      	nop
    2a0c:	0000a9cc 	.word	0x0000a9cc

00002a10 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2a10:	b508      	push	{r3, lr}
    2a12:	f04f 0220 	mov.w	r2, #32
    2a16:	f3ef 8311 	mrs	r3, BASEPRI
    2a1a:	f382 8812 	msr	BASEPRI_MAX, r2
    2a1e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2a22:	f000 fef7 	bl	3814 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2a26:	4803      	ldr	r0, [pc, #12]	; (2a34 <sys_reboot+0x24>)
    2a28:	f005 f9e3 	bl	7df2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2a2c:	f000 fa4e 	bl	2ecc <arch_cpu_idle>
    2a30:	e7fc      	b.n	2a2c <sys_reboot+0x1c>
    2a32:	bf00      	nop
    2a34:	0000a87d 	.word	0x0000a87d

00002a38 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    2a38:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
    2a3a:	4c04      	ldr	r4, [pc, #16]	; (2a4c <__do_init_array_aux+0x14>)
    2a3c:	4d04      	ldr	r5, [pc, #16]	; (2a50 <__do_init_array_aux+0x18>)
    2a3e:	42ac      	cmp	r4, r5
    2a40:	d300      	bcc.n	2a44 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
    2a42:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
    2a44:	f854 3b04 	ldr.w	r3, [r4], #4
    2a48:	4798      	blx	r3
		func++) {
    2a4a:	e7f8      	b.n	2a3e <__do_init_array_aux+0x6>
    2a4c:	000095c8 	.word	0x000095c8
    2a50:	000095cc 	.word	0x000095cc

00002a54 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    2a54:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    2a56:	4c05      	ldr	r4, [pc, #20]	; (2a6c <__do_global_ctors_aux+0x18>)
    2a58:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
    2a5a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    2a5e:	b905      	cbnz	r5, 2a62 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
    2a60:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
    2a62:	f854 3904 	ldr.w	r3, [r4], #-4
    2a66:	3d01      	subs	r5, #1
    2a68:	4798      	blx	r3
    2a6a:	e7f8      	b.n	2a5e <__do_global_ctors_aux+0xa>
    2a6c:	000095c0 	.word	0x000095c0

00002a70 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2a74:	4605      	mov	r5, r0
    2a76:	f04f 0320 	mov.w	r3, #32
    2a7a:	f3ef 8611 	mrs	r6, BASEPRI
    2a7e:	f383 8812 	msr	BASEPRI_MAX, r3
    2a82:	f3bf 8f6f 	isb	sy
	return list->head;
    2a86:	4b0e      	ldr	r3, [pc, #56]	; (2ac0 <pm_state_notify+0x50>)
    2a88:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2a8a:	b19c      	cbz	r4, 2ab4 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2a8c:	4f0d      	ldr	r7, [pc, #52]	; (2ac4 <pm_state_notify+0x54>)
    2a8e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2ac8 <pm_state_notify+0x58>
    2a92:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2a96:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2a9a:	2d00      	cmp	r5, #0
    2a9c:	bf08      	it	eq
    2a9e:	4613      	moveq	r3, r2
		if (callback) {
    2aa0:	b12b      	cbz	r3, 2aae <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2aa2:	f898 2014 	ldrb.w	r2, [r8, #20]
    2aa6:	fb09 f202 	mul.w	r2, r9, r2
    2aaa:	5cb8      	ldrb	r0, [r7, r2]
    2aac:	4798      	blx	r3
	return node->next;
    2aae:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2ab0:	2c00      	cmp	r4, #0
    2ab2:	d1f0      	bne.n	2a96 <pm_state_notify+0x26>
	__asm__ volatile(
    2ab4:	f386 8811 	msr	BASEPRI, r6
    2ab8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ac0:	200007d8 	.word	0x200007d8
    2ac4:	200007e0 	.word	0x200007e0
    2ac8:	20000e88 	.word	0x20000e88

00002acc <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2acc:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    2ace:	2301      	movs	r3, #1
    2ad0:	f000 001f 	and.w	r0, r0, #31
    2ad4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2ad8:	4b07      	ldr	r3, [pc, #28]	; (2af8 <atomic_clear_bit.constprop.0+0x2c>)
    2ada:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2ade:	43c0      	mvns	r0, r0
    2ae0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2ae4:	e853 2f00 	ldrex	r2, [r3]
    2ae8:	4002      	ands	r2, r0
    2aea:	e843 2100 	strex	r1, r2, [r3]
    2aee:	2900      	cmp	r1, #0
    2af0:	d1f8      	bne.n	2ae4 <atomic_clear_bit.constprop.0+0x18>
    2af2:	f3bf 8f5b 	dmb	ish
}
    2af6:	4770      	bx	lr
    2af8:	200007ec 	.word	0x200007ec

00002afc <pm_system_resume>:

void pm_system_resume(void)
{
    2afc:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2afe:	4b1a      	ldr	r3, [pc, #104]	; (2b68 <pm_system_resume+0x6c>)
    2b00:	7d1c      	ldrb	r4, [r3, #20]
    2b02:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2b06:	f004 031f 	and.w	r3, r4, #31
    2b0a:	2201      	movs	r2, #1
    2b0c:	409a      	lsls	r2, r3
    2b0e:	4b17      	ldr	r3, [pc, #92]	; (2b6c <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2b10:	0961      	lsrs	r1, r4, #5
    2b12:	43d0      	mvns	r0, r2
    2b14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2b18:	e853 1f00 	ldrex	r1, [r3]
    2b1c:	ea01 0500 	and.w	r5, r1, r0
    2b20:	e843 5c00 	strex	ip, r5, [r3]
    2b24:	f1bc 0f00 	cmp.w	ip, #0
    2b28:	d1f6      	bne.n	2b18 <pm_system_resume+0x1c>
    2b2a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2b2e:	4211      	tst	r1, r2
    2b30:	d013      	beq.n	2b5a <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    2b32:	4b0f      	ldr	r3, [pc, #60]	; (2b70 <pm_system_resume+0x74>)
    2b34:	4d0f      	ldr	r5, [pc, #60]	; (2b74 <pm_system_resume+0x78>)
    2b36:	b18b      	cbz	r3, 2b5c <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2b38:	230c      	movs	r3, #12
    2b3a:	4363      	muls	r3, r4
    2b3c:	18ea      	adds	r2, r5, r3
    2b3e:	5ce8      	ldrb	r0, [r5, r3]
    2b40:	7851      	ldrb	r1, [r2, #1]
    2b42:	f005 fb2a 	bl	819a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2b46:	2000      	movs	r0, #0
    2b48:	f7ff ff92 	bl	2a70 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2b4c:	230c      	movs	r3, #12
    2b4e:	435c      	muls	r4, r3
    2b50:	192a      	adds	r2, r5, r4
    2b52:	2300      	movs	r3, #0
    2b54:	512b      	str	r3, [r5, r4]
    2b56:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2b5a:	bd38      	pop	{r3, r4, r5, pc}
    2b5c:	f383 8811 	msr	BASEPRI, r3
    2b60:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2b64:	e7ef      	b.n	2b46 <pm_system_resume+0x4a>
    2b66:	bf00      	nop
    2b68:	20000e88 	.word	0x20000e88
    2b6c:	200007f0 	.word	0x200007f0
    2b70:	0000819b 	.word	0x0000819b
    2b74:	200007e0 	.word	0x200007e0

00002b78 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2b7c:	4b32      	ldr	r3, [pc, #200]	; (2c48 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2b7e:	4a33      	ldr	r2, [pc, #204]	; (2c4c <pm_system_suspend+0xd4>)
    2b80:	7d1c      	ldrb	r4, [r3, #20]
    2b82:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2b86:	0963      	lsrs	r3, r4, #5
    2b88:	ea4f 0983 	mov.w	r9, r3, lsl #2
    2b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b90:	4e2f      	ldr	r6, [pc, #188]	; (2c50 <pm_system_suspend+0xd8>)
    2b92:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2b96:	f004 081f 	and.w	r8, r4, #31
    2b9a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2b9e:	f013 0f01 	tst.w	r3, #1
{
    2ba2:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2ba4:	d10a      	bne.n	2bbc <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2ba6:	4601      	mov	r1, r0
    2ba8:	4620      	mov	r0, r4
    2baa:	f000 f869 	bl	2c80 <pm_policy_next_state>
		if (info != NULL) {
    2bae:	b128      	cbz	r0, 2bbc <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2bb0:	c807      	ldmia	r0, {r0, r1, r2}
    2bb2:	230c      	movs	r3, #12
    2bb4:	fb03 6304 	mla	r3, r3, r4, r6
    2bb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2bbc:	230c      	movs	r3, #12
    2bbe:	4363      	muls	r3, r4
    2bc0:	18f2      	adds	r2, r6, r3
    2bc2:	5cf5      	ldrb	r5, [r6, r3]
    2bc4:	b92d      	cbnz	r5, 2bd2 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2bc6:	4620      	mov	r0, r4
    2bc8:	f7ff ff80 	bl	2acc <atomic_clear_bit.constprop.0>
		ret = false;
    2bcc:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2bd2:	1c7b      	adds	r3, r7, #1
    2bd4:	d00f      	beq.n	2bf6 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2bd6:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2bda:	481e      	ldr	r0, [pc, #120]	; (2c54 <pm_system_suspend+0xdc>)
    2bdc:	4a1e      	ldr	r2, [pc, #120]	; (2c58 <pm_system_suspend+0xe0>)
    2bde:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2be2:	2100      	movs	r1, #0
    2be4:	2300      	movs	r3, #0
    2be6:	fbec 0105 	umlal	r0, r1, ip, r5
    2bea:	f7fd ff57 	bl	a9c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2bee:	2101      	movs	r1, #1
    2bf0:	1a38      	subs	r0, r7, r0
    2bf2:	f006 f823 	bl	8c3c <z_set_timeout_expiry>
	k_sched_lock();
    2bf6:	f002 fde5 	bl	57c4 <k_sched_lock>
	pm_state_notify(true);
    2bfa:	2001      	movs	r0, #1
    2bfc:	f7ff ff38 	bl	2a70 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2c00:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c04:	2301      	movs	r3, #1
    2c06:	fa03 f808 	lsl.w	r8, r3, r8
    2c0a:	4b14      	ldr	r3, [pc, #80]	; (2c5c <pm_system_suspend+0xe4>)
    2c0c:	4499      	add	r9, r3
    2c0e:	e859 3f00 	ldrex	r3, [r9]
    2c12:	ea43 0308 	orr.w	r3, r3, r8
    2c16:	e849 3200 	strex	r2, r3, [r9]
    2c1a:	2a00      	cmp	r2, #0
    2c1c:	d1f7      	bne.n	2c0e <pm_system_suspend+0x96>
    2c1e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2c22:	4b0f      	ldr	r3, [pc, #60]	; (2c60 <pm_system_suspend+0xe8>)
    2c24:	b133      	cbz	r3, 2c34 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    2c26:	230c      	movs	r3, #12
    2c28:	4363      	muls	r3, r4
    2c2a:	18f2      	adds	r2, r6, r3
    2c2c:	5cf0      	ldrb	r0, [r6, r3]
    2c2e:	7851      	ldrb	r1, [r2, #1]
    2c30:	f005 faa7 	bl	8182 <pm_state_set>
	pm_system_resume();
    2c34:	f7ff ff62 	bl	2afc <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2c38:	4620      	mov	r0, r4
    2c3a:	f7ff ff47 	bl	2acc <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    2c3e:	f002 ff91 	bl	5b64 <k_sched_unlock>
	bool ret = true;
    2c42:	2001      	movs	r0, #1
    2c44:	e7c3      	b.n	2bce <pm_system_suspend+0x56>
    2c46:	bf00      	nop
    2c48:	20000e88 	.word	0x20000e88
    2c4c:	200007ec 	.word	0x200007ec
    2c50:	200007e0 	.word	0x200007e0
    2c54:	000f423f 	.word	0x000f423f
    2c58:	000f4240 	.word	0x000f4240
    2c5c:	200007f0 	.word	0x200007f0
    2c60:	00008183 	.word	0x00008183

00002c64 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2c64:	4b05      	ldr	r3, [pc, #20]	; (2c7c <pm_policy_state_lock_is_active+0x18>)
    2c66:	f3bf 8f5b 	dmb	ish
    2c6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2c6e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2c72:	3800      	subs	r0, #0
    2c74:	bf18      	it	ne
    2c76:	2001      	movne	r0, #1
    2c78:	4770      	bx	lr
    2c7a:	bf00      	nop
    2c7c:	200007f4 	.word	0x200007f4

00002c80 <pm_policy_next_state>:
{
    2c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c84:	b085      	sub	sp, #20
    2c86:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2c88:	a903      	add	r1, sp, #12
    2c8a:	f000 f847 	bl	2d1c <pm_state_cpu_get_all>
    2c8e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2d14 <pm_policy_next_state+0x94>
    2c92:	f8df a084 	ldr.w	sl, [pc, #132]	; 2d18 <pm_policy_next_state+0x98>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2c96:	3801      	subs	r0, #1
    2c98:	b204      	sxth	r4, r0
    2c9a:	f04f 0b00 	mov.w	fp, #0
    2c9e:	1c63      	adds	r3, r4, #1
    2ca0:	d104      	bne.n	2cac <pm_policy_next_state+0x2c>
	return NULL;
    2ca2:	2600      	movs	r6, #0
}
    2ca4:	4630      	mov	r0, r6
    2ca6:	b005      	add	sp, #20
    2ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2cac:	9a03      	ldr	r2, [sp, #12]
    2cae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2cb2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2cb6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2cba:	f7ff ffd3 	bl	2c64 <pm_policy_state_lock_is_active>
    2cbe:	4605      	mov	r5, r0
    2cc0:	bb10      	cbnz	r0, 2d08 <pm_policy_next_state+0x88>
    2cc2:	6870      	ldr	r0, [r6, #4]
    2cc4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2cc8:	46c4      	mov	ip, r8
    2cca:	4629      	mov	r1, r5
    2ccc:	fbe0 c109 	umlal	ip, r1, r0, r9
    2cd0:	4652      	mov	r2, sl
    2cd2:	465b      	mov	r3, fp
    2cd4:	4660      	mov	r0, ip
    2cd6:	f7fd fee1 	bl	a9c <__aeabi_uldivmod>
    2cda:	9001      	str	r0, [sp, #4]
    2cdc:	68b0      	ldr	r0, [r6, #8]
    2cde:	46c4      	mov	ip, r8
    2ce0:	4629      	mov	r1, r5
    2ce2:	fbe0 c109 	umlal	ip, r1, r0, r9
    2ce6:	465b      	mov	r3, fp
    2ce8:	4652      	mov	r2, sl
    2cea:	4660      	mov	r0, ip
    2cec:	f7fd fed6 	bl	a9c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2cf0:	4b07      	ldr	r3, [pc, #28]	; (2d10 <pm_policy_next_state+0x90>)
    2cf2:	681b      	ldr	r3, [r3, #0]
    2cf4:	1c59      	adds	r1, r3, #1
    2cf6:	d001      	beq.n	2cfc <pm_policy_next_state+0x7c>
    2cf8:	4283      	cmp	r3, r0
    2cfa:	d905      	bls.n	2d08 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2cfc:	1c7a      	adds	r2, r7, #1
    2cfe:	d0d1      	beq.n	2ca4 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    2d00:	9b01      	ldr	r3, [sp, #4]
    2d02:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2d04:	42b8      	cmp	r0, r7
    2d06:	d9cd      	bls.n	2ca4 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2d08:	3c01      	subs	r4, #1
    2d0a:	b224      	sxth	r4, r4
    2d0c:	e7c7      	b.n	2c9e <pm_policy_next_state+0x1e>
    2d0e:	bf00      	nop
    2d10:	2000022c 	.word	0x2000022c
    2d14:	000f423f 	.word	0x000f423f
    2d18:	000f4240 	.word	0x000f4240

00002d1c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2d1c:	b908      	cbnz	r0, 2d22 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2d1e:	4b02      	ldr	r3, [pc, #8]	; (2d28 <pm_state_cpu_get_all+0xc>)
    2d20:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2d22:	2000      	movs	r0, #0
    2d24:	4770      	bx	lr
    2d26:	bf00      	nop
    2d28:	0000a56c 	.word	0x0000a56c

00002d2c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2d2c:	4801      	ldr	r0, [pc, #4]	; (2d34 <nrf_cc3xx_platform_abort_init+0x8>)
    2d2e:	f004 bea1 	b.w	7a74 <nrf_cc3xx_platform_set_abort>
    2d32:	bf00      	nop
    2d34:	0000a56c 	.word	0x0000a56c

00002d38 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2d38:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2d3a:	4604      	mov	r4, r0
    2d3c:	b918      	cbnz	r0, 2d46 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2d3e:	4b0d      	ldr	r3, [pc, #52]	; (2d74 <mutex_free_platform+0x3c>)
    2d40:	480d      	ldr	r0, [pc, #52]	; (2d78 <mutex_free_platform+0x40>)
    2d42:	685b      	ldr	r3, [r3, #4]
    2d44:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2d46:	6861      	ldr	r1, [r4, #4]
    2d48:	2908      	cmp	r1, #8
    2d4a:	d00d      	beq.n	2d68 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2d4c:	f031 0304 	bics.w	r3, r1, #4
    2d50:	d00a      	beq.n	2d68 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2d52:	f011 0102 	ands.w	r1, r1, #2
    2d56:	d008      	beq.n	2d6a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2d58:	4808      	ldr	r0, [pc, #32]	; (2d7c <mutex_free_platform+0x44>)
    2d5a:	4621      	mov	r1, r4
    2d5c:	f005 fe61 	bl	8a22 <k_mem_slab_free>
        mutex->mutex = NULL;
    2d60:	2300      	movs	r3, #0
    2d62:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2d64:	2300      	movs	r3, #0
    2d66:	6063      	str	r3, [r4, #4]
}
    2d68:	bd10      	pop	{r4, pc}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2d6a:	6820      	ldr	r0, [r4, #0]
    2d6c:	2214      	movs	r2, #20
    2d6e:	f005 ffa8 	bl	8cc2 <memset>
    2d72:	e7f7      	b.n	2d64 <mutex_free_platform+0x2c>
    2d74:	2000050c 	.word	0x2000050c
    2d78:	0000a8a6 	.word	0x0000a8a6
    2d7c:	20000810 	.word	0x20000810

00002d80 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2d80:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2d82:	b308      	cbz	r0, 2dc8 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2d84:	6843      	ldr	r3, [r0, #4]
    2d86:	2b04      	cmp	r3, #4
    2d88:	d110      	bne.n	2dac <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2d8a:	2201      	movs	r2, #1
    2d8c:	6803      	ldr	r3, [r0, #0]
    2d8e:	f3bf 8f5b 	dmb	ish
    2d92:	e853 1f00 	ldrex	r1, [r3]
    2d96:	2900      	cmp	r1, #0
    2d98:	d103      	bne.n	2da2 <mutex_lock_platform+0x22>
    2d9a:	e843 2000 	strex	r0, r2, [r3]
    2d9e:	2800      	cmp	r0, #0
    2da0:	d1f7      	bne.n	2d92 <mutex_lock_platform+0x12>
    2da2:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2da6:	d10b      	bne.n	2dc0 <mutex_lock_platform+0x40>
    2da8:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2daa:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2dac:	b153      	cbz	r3, 2dc4 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2dae:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    2db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2db8:	f002 fbaa 	bl	5510 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2dbc:	2800      	cmp	r0, #0
    2dbe:	d0f3      	beq.n	2da8 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2dc0:	4803      	ldr	r0, [pc, #12]	; (2dd0 <mutex_lock_platform+0x50>)
    2dc2:	e7f2      	b.n	2daa <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2dc4:	4803      	ldr	r0, [pc, #12]	; (2dd4 <mutex_lock_platform+0x54>)
    2dc6:	e7f0      	b.n	2daa <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2dc8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2dcc:	e7ed      	b.n	2daa <mutex_lock_platform+0x2a>
    2dce:	bf00      	nop
    2dd0:	ffff8fe9 	.word	0xffff8fe9
    2dd4:	ffff8fea 	.word	0xffff8fea

00002dd8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2dd8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2dda:	b1d0      	cbz	r0, 2e12 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2ddc:	6843      	ldr	r3, [r0, #4]
    2dde:	2b04      	cmp	r3, #4
    2de0:	d111      	bne.n	2e06 <mutex_unlock_platform+0x2e>
    2de2:	2200      	movs	r2, #0
    2de4:	6803      	ldr	r3, [r0, #0]
    2de6:	f3bf 8f5b 	dmb	ish
    2dea:	e853 1f00 	ldrex	r1, [r3]
    2dee:	2901      	cmp	r1, #1
    2df0:	d103      	bne.n	2dfa <mutex_unlock_platform+0x22>
    2df2:	e843 2000 	strex	r0, r2, [r3]
    2df6:	2800      	cmp	r0, #0
    2df8:	d1f7      	bne.n	2dea <mutex_unlock_platform+0x12>
    2dfa:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2dfe:	4807      	ldr	r0, [pc, #28]	; (2e1c <mutex_unlock_platform+0x44>)
    2e00:	bf08      	it	eq
    2e02:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2e04:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2e06:	b13b      	cbz	r3, 2e18 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2e08:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2e0a:	f002 fbf9 	bl	5600 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2e0e:	2000      	movs	r0, #0
    2e10:	e7f8      	b.n	2e04 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2e12:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2e16:	e7f5      	b.n	2e04 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2e18:	4801      	ldr	r0, [pc, #4]	; (2e20 <mutex_unlock_platform+0x48>)
    2e1a:	e7f3      	b.n	2e04 <mutex_unlock_platform+0x2c>
    2e1c:	ffff8fe9 	.word	0xffff8fe9
    2e20:	ffff8fea 	.word	0xffff8fea

00002e24 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2e24:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2e26:	4604      	mov	r4, r0
    2e28:	b918      	cbnz	r0, 2e32 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2e2a:	4b16      	ldr	r3, [pc, #88]	; (2e84 <mutex_init_platform+0x60>)
    2e2c:	4816      	ldr	r0, [pc, #88]	; (2e88 <mutex_init_platform+0x64>)
    2e2e:	685b      	ldr	r3, [r3, #4]
    2e30:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2e32:	6863      	ldr	r3, [r4, #4]
    2e34:	2b04      	cmp	r3, #4
    2e36:	d023      	beq.n	2e80 <mutex_init_platform+0x5c>
    2e38:	2b08      	cmp	r3, #8
    2e3a:	d021      	beq.n	2e80 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2e3c:	b9cb      	cbnz	r3, 2e72 <mutex_init_platform+0x4e>
    2e3e:	6823      	ldr	r3, [r4, #0]
    2e40:	b9bb      	cbnz	r3, 2e72 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2e42:	4812      	ldr	r0, [pc, #72]	; (2e8c <mutex_init_platform+0x68>)
    2e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e4c:	4621      	mov	r1, r4
    2e4e:	f002 fa87 	bl	5360 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2e52:	b908      	cbnz	r0, 2e58 <mutex_init_platform+0x34>
    2e54:	6823      	ldr	r3, [r4, #0]
    2e56:	b91b      	cbnz	r3, 2e60 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2e58:	4b0a      	ldr	r3, [pc, #40]	; (2e84 <mutex_init_platform+0x60>)
    2e5a:	480d      	ldr	r0, [pc, #52]	; (2e90 <mutex_init_platform+0x6c>)
    2e5c:	685b      	ldr	r3, [r3, #4]
    2e5e:	4798      	blx	r3
    2e60:	6820      	ldr	r0, [r4, #0]
    2e62:	2214      	movs	r2, #20
    2e64:	2100      	movs	r1, #0
    2e66:	f005 ff2c 	bl	8cc2 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2e6a:	6863      	ldr	r3, [r4, #4]
    2e6c:	f043 0302 	orr.w	r3, r3, #2
    2e70:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2e72:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2e74:	f005 fe13 	bl	8a9e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2e78:	6863      	ldr	r3, [r4, #4]
    2e7a:	f043 0301 	orr.w	r3, r3, #1
    2e7e:	6063      	str	r3, [r4, #4]
}
    2e80:	bd10      	pop	{r4, pc}
    2e82:	bf00      	nop
    2e84:	2000050c 	.word	0x2000050c
    2e88:	0000a8a6 	.word	0x0000a8a6
    2e8c:	20000810 	.word	0x20000810
    2e90:	0000a8cc 	.word	0x0000a8cc

00002e94 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2e94:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2e96:	4906      	ldr	r1, [pc, #24]	; (2eb0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2e98:	4806      	ldr	r0, [pc, #24]	; (2eb4 <nrf_cc3xx_platform_mutex_init+0x20>)
    2e9a:	2340      	movs	r3, #64	; 0x40
    2e9c:	2214      	movs	r2, #20
    2e9e:	f005 fda4 	bl	89ea <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2ea6:	4904      	ldr	r1, [pc, #16]	; (2eb8 <nrf_cc3xx_platform_mutex_init+0x24>)
    2ea8:	4804      	ldr	r0, [pc, #16]	; (2ebc <nrf_cc3xx_platform_mutex_init+0x28>)
    2eaa:	f004 be43 	b.w	7b34 <nrf_cc3xx_platform_set_mutexes>
    2eae:	bf00      	nop
    2eb0:	20000830 	.word	0x20000830
    2eb4:	20000810 	.word	0x20000810
    2eb8:	0000a584 	.word	0x0000a584
    2ebc:	0000a574 	.word	0x0000a574

00002ec0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2ec0:	4901      	ldr	r1, [pc, #4]	; (2ec8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2ec2:	2210      	movs	r2, #16
	str	r2, [r1]
    2ec4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2ec6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2ec8:	e000ed10 	.word	0xe000ed10

00002ecc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2ecc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2ece:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2ed0:	f380 8811 	msr	BASEPRI, r0
	isb
    2ed4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2ed8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2edc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2ede:	b662      	cpsie	i
	isb
    2ee0:	f3bf 8f6f 	isb	sy

	bx	lr
    2ee4:	4770      	bx	lr
    2ee6:	bf00      	nop

00002ee8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2ee8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2eea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2eec:	f381 8811 	msr	BASEPRI, r1

	wfe
    2ef0:	bf20      	wfe

	msr	BASEPRI, r0
    2ef2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2ef6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2ef8:	4770      	bx	lr
    2efa:	bf00      	nop

00002efc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2efc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2efe:	2b00      	cmp	r3, #0
    2f00:	db08      	blt.n	2f14 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f02:	2201      	movs	r2, #1
    2f04:	f000 001f 	and.w	r0, r0, #31
    2f08:	fa02 f000 	lsl.w	r0, r2, r0
    2f0c:	095b      	lsrs	r3, r3, #5
    2f0e:	4a02      	ldr	r2, [pc, #8]	; (2f18 <arch_irq_enable+0x1c>)
    2f10:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2f14:	4770      	bx	lr
    2f16:	bf00      	nop
    2f18:	e000e100 	.word	0xe000e100

00002f1c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2f1c:	4b05      	ldr	r3, [pc, #20]	; (2f34 <arch_irq_is_enabled+0x18>)
    2f1e:	0942      	lsrs	r2, r0, #5
    2f20:	f000 001f 	and.w	r0, r0, #31
    2f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f28:	2301      	movs	r3, #1
    2f2a:	fa03 f000 	lsl.w	r0, r3, r0
}
    2f2e:	4010      	ands	r0, r2
    2f30:	4770      	bx	lr
    2f32:	bf00      	nop
    2f34:	e000e100 	.word	0xe000e100

00002f38 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2f38:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2f3a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f3c:	bfa8      	it	ge
    2f3e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2f42:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f46:	bfb8      	it	lt
    2f48:	4b06      	ldrlt	r3, [pc, #24]	; (2f64 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f4a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2f4e:	bfac      	ite	ge
    2f50:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f54:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f58:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f5a:	bfb4      	ite	lt
    2f5c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f5e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2f62:	4770      	bx	lr
    2f64:	e000ed14 	.word	0xe000ed14

00002f68 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2f68:	bf30      	wfi
    b z_SysNmiOnReset
    2f6a:	f7ff bffd 	b.w	2f68 <z_SysNmiOnReset>
    2f6e:	bf00      	nop

00002f70 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2f70:	4a14      	ldr	r2, [pc, #80]	; (2fc4 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2f72:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2f74:	4b14      	ldr	r3, [pc, #80]	; (2fc8 <z_arm_prep_c+0x58>)
    2f76:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2f7a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2f7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f80:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2f84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2f88:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    2f90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2f94:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    2f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    2f9c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2fa0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    2fa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fa8:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    2fac:	2300      	movs	r3, #0
    2fae:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2fb2:	f002 f905 	bl	51c0 <z_bss_zero>
	z_data_copy();
    2fb6:	f002 fef7 	bl	5da8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2fba:	f000 fa51 	bl	3460 <z_arm_interrupt_init>
	z_cstart();
    2fbe:	f002 f943 	bl	5248 <z_cstart>
    2fc2:	bf00      	nop
    2fc4:	00000000 	.word	0x00000000
    2fc8:	e000ed00 	.word	0xe000ed00

00002fcc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2fcc:	4a09      	ldr	r2, [pc, #36]	; (2ff4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2fce:	490a      	ldr	r1, [pc, #40]	; (2ff8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2fd0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2fd2:	6809      	ldr	r1, [r1, #0]
    2fd4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2fd6:	4909      	ldr	r1, [pc, #36]	; (2ffc <arch_swap+0x30>)
	_current->arch.basepri = key;
    2fd8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2fda:	684b      	ldr	r3, [r1, #4]
    2fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2fe0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2fe2:	2300      	movs	r3, #0
    2fe4:	f383 8811 	msr	BASEPRI, r3
    2fe8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2fec:	6893      	ldr	r3, [r2, #8]
}
    2fee:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2ff0:	4770      	bx	lr
    2ff2:	bf00      	nop
    2ff4:	20000e88 	.word	0x20000e88
    2ff8:	0000a6fc 	.word	0x0000a6fc
    2ffc:	e000ed00 	.word	0xe000ed00

00003000 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3000:	4921      	ldr	r1, [pc, #132]	; (3088 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3002:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    3004:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3008:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    300c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    300e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3012:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    3016:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    301a:	d103      	bne.n	3024 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    301c:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    3020:	ec80 8a10 	vstmia	r0, {s16-s31}

00003024 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3024:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3026:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    302a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    302e:	4f17      	ldr	r7, [pc, #92]	; (308c <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3030:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3034:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3036:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3038:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    303a:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    303e:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3040:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3042:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3044:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    3048:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    304c:	d003      	beq.n	3056 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    304e:	2300      	movs	r3, #0
    vmsr fpscr, r3
    3050:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    3054:	e003      	b.n	305e <in_fp_endif>

00003056 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    3056:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    305a:	ec90 8a10 	vldmia	r0, {s16-s31}

0000305e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    305e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    3062:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    3066:	f383 8814 	msr	CONTROL, r3
    isb
    306a:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    306e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3070:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3072:	f000 fa91 	bl	3598 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3076:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    307a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    307e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3082:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3086:	4770      	bx	lr
    ldr r1, =_kernel
    3088:	20000e88 	.word	0x20000e88
    ldr v4, =_SCS_ICSR
    308c:	e000ed04 	.word	0xe000ed04

00003090 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3090:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3094:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3096:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    309a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    309e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    30a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    30a4:	2902      	cmp	r1, #2
    beq _oops
    30a6:	d0ff      	beq.n	30a8 <_oops>

000030a8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    30a8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    30aa:	f005 f822 	bl	80f2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    30ae:	bd01      	pop	{r0, pc}

000030b0 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    30b0:	7b01      	ldrb	r1, [r0, #12]
{
    30b2:	b510      	push	{r4, lr}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    30b4:	f011 0402 	ands.w	r4, r1, #2
    30b8:	d005      	beq.n	30c6 <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
    30ba:	6e41      	ldr	r1, [r0, #100]	; 0x64
    30bc:	3160      	adds	r1, #96	; 0x60
    30be:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
    30c0:	6e81      	ldr	r1, [r0, #104]	; 0x68
    30c2:	3960      	subs	r1, #96	; 0x60
    30c4:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    30c6:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    30ca:	9b02      	ldr	r3, [sp, #8]
    30cc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    30d0:	490f      	ldr	r1, [pc, #60]	; (3110 <arch_new_thread+0x60>)
	iframe->a3 = (uint32_t)p2;
    30d2:	9b03      	ldr	r3, [sp, #12]
    30d4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    30d8:	9b04      	ldr	r3, [sp, #16]
    30da:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    30de:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    30e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    30e6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    30ea:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    30ee:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    30f0:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    30f2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    30f4:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    30f6:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    30fa:	b91c      	cbnz	r4, 3104 <arch_new_thread+0x54>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
    30fc:	23fd      	movs	r3, #253	; 0xfd
    30fe:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3102:	bd10      	pop	{r4, pc}
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    3104:	f64f 5308 	movw	r3, #64776	; 0xfd08
    3108:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
    310c:	e7f9      	b.n	3102 <arch_new_thread+0x52>
    310e:	bf00      	nop
    3110:	00007f65 	.word	0x00007f65

00003114 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
    3114:	b530      	push	{r4, r5, lr}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    3116:	7b01      	ldrb	r1, [r0, #12]
		if ((thread->arch.mode &
    3118:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    311c:	4a17      	ldr	r2, [pc, #92]	; (317c <z_arm_mpu_stack_guard_and_fpu_adjust+0x68>)
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    311e:	f011 0f02 	tst.w	r1, #2
		if ((thread->arch.mode &
    3122:	f003 0508 	and.w	r5, r3, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    3126:	d103      	bne.n	3130 <z_arm_mpu_stack_guard_and_fpu_adjust+0x1c>
    3128:	f890 40bd 	ldrb.w	r4, [r0, #189]	; 0xbd
    312c:	06e4      	lsls	r4, r4, #27
    312e:	d413      	bmi.n	3158 <z_arm_mpu_stack_guard_and_fpu_adjust+0x44>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
    3130:	6b54      	ldr	r4, [r2, #52]	; 0x34
    3132:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3136:	6354      	str	r4, [r2, #52]	; 0x34
		if ((thread->arch.mode &
    3138:	b94d      	cbnz	r5, 314e <z_arm_mpu_stack_guard_and_fpu_adjust+0x3a>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    313a:	f043 0308 	orr.w	r3, r3, #8
    313e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
    3142:	6e43      	ldr	r3, [r0, #100]	; 0x64
    3144:	3360      	adds	r3, #96	; 0x60
    3146:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
    3148:	6e83      	ldr	r3, [r0, #104]	; 0x68
    314a:	3b60      	subs	r3, #96	; 0x60
    314c:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
    314e:	f041 0102 	orr.w	r1, r1, #2
    3152:	7301      	strb	r1, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
    3154:	2080      	movs	r0, #128	; 0x80
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
    3156:	bd30      	pop	{r4, r5, pc}
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
    3158:	6b51      	ldr	r1, [r2, #52]	; 0x34
    315a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
    315e:	6351      	str	r1, [r2, #52]	; 0x34
		if ((thread->arch.mode &
    3160:	b14d      	cbz	r5, 3176 <z_arm_mpu_stack_guard_and_fpu_adjust+0x62>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    3162:	f023 0308 	bic.w	r3, r3, #8
    3166:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
    316a:	6e43      	ldr	r3, [r0, #100]	; 0x64
    316c:	3b60      	subs	r3, #96	; 0x60
    316e:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
    3170:	6e83      	ldr	r3, [r0, #104]	; 0x68
    3172:	3360      	adds	r3, #96	; 0x60
    3174:	6683      	str	r3, [r0, #104]	; 0x68
	return MPU_GUARD_ALIGN_AND_SIZE;
    3176:	2020      	movs	r0, #32
    3178:	e7ed      	b.n	3156 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
    317a:	bf00      	nop
    317c:	e000ef00 	.word	0xe000ef00

00003180 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3180:	4b0d      	ldr	r3, [pc, #52]	; (31b8 <z_check_thread_stack_fail+0x38>)
{
    3182:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    3184:	6898      	ldr	r0, [r3, #8]
{
    3186:	b510      	push	{r4, lr}

	if (thread == NULL) {
    3188:	b190      	cbz	r0, 31b0 <z_check_thread_stack_fail+0x30>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
    318a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    318e:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
    3190:	f013 0f08 	tst.w	r3, #8
    3194:	bf14      	ite	ne
    3196:	2480      	movne	r4, #128	; 0x80
    3198:	2420      	moveq	r4, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    319a:	f112 0f16 	cmn.w	r2, #22
    319e:	d004      	beq.n	31aa <z_check_thread_stack_fail+0x2a>
    31a0:	1b03      	subs	r3, r0, r4
    31a2:	4293      	cmp	r3, r2
    31a4:	d805      	bhi.n	31b2 <z_check_thread_stack_fail+0x32>
    31a6:	4282      	cmp	r2, r0
    31a8:	d203      	bcs.n	31b2 <z_check_thread_stack_fail+0x32>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    31aa:	4281      	cmp	r1, r0
    31ac:	bf28      	it	cs
    31ae:	2000      	movcs	r0, #0
}
    31b0:	bd10      	pop	{r4, pc}
	return 0;
    31b2:	2000      	movs	r0, #0
    31b4:	e7fc      	b.n	31b0 <z_check_thread_stack_fail+0x30>
    31b6:	bf00      	nop
    31b8:	20000e88 	.word	0x20000e88

000031bc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    31bc:	b508      	push	{r3, lr}
    31be:	4614      	mov	r4, r2
    31c0:	460d      	mov	r5, r1
    31c2:	2200      	movs	r2, #0
    31c4:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    31c8:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    31cc:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    31d0:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
    31d4:	f3bf 8f6f 	isb	sy
    31d8:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    31dc:	4a08      	ldr	r2, [pc, #32]	; (3200 <arch_switch_to_main_thread+0x44>)
    31de:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    31e0:	f000 f9da 	bl	3598 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    31e4:	4620      	mov	r0, r4
    31e6:	f385 8809 	msr	PSP, r5
    31ea:	2100      	movs	r1, #0
    31ec:	b663      	cpsie	if
    31ee:	f381 8811 	msr	BASEPRI, r1
    31f2:	f3bf 8f6f 	isb	sy
    31f6:	2200      	movs	r2, #0
    31f8:	2300      	movs	r3, #0
    31fa:	f004 feb3 	bl	7f64 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    31fe:	bf00      	nop
    3200:	20000e88 	.word	0x20000e88

00003204 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3204:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3206:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3208:	4a0b      	ldr	r2, [pc, #44]	; (3238 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    320a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    320c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    320e:	bf1e      	ittt	ne
	movne	r1, #0
    3210:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3212:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3214:	f005 fc34 	blne	8a80 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3218:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    321a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    321e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3222:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3226:	4905      	ldr	r1, [pc, #20]	; (323c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3228:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    322a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    322c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    322e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3232:	4903      	ldr	r1, [pc, #12]	; (3240 <_isr_wrapper+0x3c>)
	bx r1
    3234:	4708      	bx	r1
    3236:	0000      	.short	0x0000
	ldr r2, =_kernel
    3238:	20000e88 	.word	0x20000e88
	ldr r1, =_sw_isr_table
    323c:	00009440 	.word	0x00009440
	ldr r1, =z_arm_int_exit
    3240:	00003245 	.word	0x00003245

00003244 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3244:	4b04      	ldr	r3, [pc, #16]	; (3258 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3246:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3248:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    324a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    324c:	d003      	beq.n	3256 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    324e:	4903      	ldr	r1, [pc, #12]	; (325c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3254:	600a      	str	r2, [r1, #0]

00003256 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3256:	4770      	bx	lr
	ldr r3, =_kernel
    3258:	20000e88 	.word	0x20000e88
	ldr r1, =_SCS_ICSR
    325c:	e000ed04 	.word	0xe000ed04

00003260 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3260:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3262:	4b1c      	ldr	r3, [pc, #112]	; (32d4 <mem_manage_fault+0x74>)
{
    3264:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    326a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    326c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    326e:	0790      	lsls	r0, r2, #30
    3270:	d520      	bpl.n	32b4 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3272:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3276:	0612      	lsls	r2, r2, #24
    3278:	d51c      	bpl.n	32b4 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    327a:	b119      	cbz	r1, 3284 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    327c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    327e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3282:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    328a:	06d2      	lsls	r2, r2, #27
    328c:	d415      	bmi.n	32ba <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3290:	079b      	lsls	r3, r3, #30
    3292:	d412      	bmi.n	32ba <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3294:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3296:	4b0f      	ldr	r3, [pc, #60]	; (32d4 <mem_manage_fault+0x74>)
    3298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    329a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    329c:	bf42      	ittt	mi
    329e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    32a0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    32a4:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    32a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32a8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    32ac:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    32ae:	2300      	movs	r3, #0
    32b0:	7023      	strb	r3, [r4, #0]

	return reason;
}
    32b2:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    32b4:	f06f 0015 	mvn.w	r0, #21
    32b8:	e7e4      	b.n	3284 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    32ba:	4b06      	ldr	r3, [pc, #24]	; (32d4 <mem_manage_fault+0x74>)
    32bc:	685b      	ldr	r3, [r3, #4]
    32be:	0519      	lsls	r1, r3, #20
    32c0:	d5e8      	bpl.n	3294 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    32c2:	4629      	mov	r1, r5
    32c4:	f7ff ff5c 	bl	3180 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    32c8:	2800      	cmp	r0, #0
    32ca:	d0e3      	beq.n	3294 <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    32cc:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    32d0:	2002      	movs	r0, #2
    32d2:	e7e0      	b.n	3296 <mem_manage_fault+0x36>
    32d4:	e000ed00 	.word	0xe000ed00

000032d8 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    32d8:	4b0d      	ldr	r3, [pc, #52]	; (3310 <bus_fault.constprop.0+0x38>)
    32da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    32dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    32de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32e0:	0592      	lsls	r2, r2, #22
    32e2:	d508      	bpl.n	32f6 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    32e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    32e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32e8:	0412      	lsls	r2, r2, #16
    32ea:	d504      	bpl.n	32f6 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    32ec:	b118      	cbz	r0, 32f6 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    32ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    32f4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    32f6:	4b06      	ldr	r3, [pc, #24]	; (3310 <bus_fault.constprop.0+0x38>)
    32f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    32fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32fc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    32fe:	bf58      	it	pl
    3300:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3302:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3304:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3306:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    330a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    330c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    330e:	4770      	bx	lr
    3310:	e000ed00 	.word	0xe000ed00

00003314 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3314:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3316:	4b48      	ldr	r3, [pc, #288]	; (3438 <z_arm_fault+0x124>)
    3318:	685b      	ldr	r3, [r3, #4]
{
    331a:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3320:	2600      	movs	r6, #0
    3322:	f386 8811 	msr	BASEPRI, r6
    3326:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    332a:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    332e:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    3332:	d112      	bne.n	335a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3334:	f002 040c 	and.w	r4, r2, #12
    3338:	2c08      	cmp	r4, #8
    333a:	d00e      	beq.n	335a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    333c:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    333e:	bf4e      	itee	mi
    3340:	460d      	movmi	r5, r1
			ptr_esf = (z_arch_esf_t *)msp;
    3342:	4605      	movpl	r5, r0
			*nested_exc = true;
    3344:	2601      	movpl	r6, #1
	*recoverable = false;
    3346:	2200      	movs	r2, #0
	switch (fault) {
    3348:	3b03      	subs	r3, #3
	*recoverable = false;
    334a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    334e:	2b03      	cmp	r3, #3
    3350:	d86b      	bhi.n	342a <z_arm_fault+0x116>
    3352:	e8df f003 	tbb	[pc, r3]
    3356:	5504      	.short	0x5504
    3358:	5d59      	.short	0x5d59
		return NULL;
    335a:	4635      	mov	r5, r6
    335c:	e7f3      	b.n	3346 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    335e:	4b36      	ldr	r3, [pc, #216]	; (3438 <z_arm_fault+0x124>)
    3360:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3362:	f014 0402 	ands.w	r4, r4, #2
    3366:	d160      	bne.n	342a <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    336a:	2a00      	cmp	r2, #0
    336c:	db15      	blt.n	339a <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3370:	0052      	lsls	r2, r2, #1
    3372:	d512      	bpl.n	339a <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    3374:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3376:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    337a:	f64d 7202 	movw	r2, #57090	; 0xdf02
    337e:	4291      	cmp	r1, r2
    3380:	d00a      	beq.n	3398 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    3382:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    3386:	b30a      	cbz	r2, 33cc <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    3388:	f10d 0207 	add.w	r2, sp, #7
    338c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    338e:	4628      	mov	r0, r5
    3390:	f7ff ff66 	bl	3260 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    3394:	4604      	mov	r4, r0
		break;
    3396:	e000      	b.n	339a <z_arm_fault+0x86>
			reason = esf->basic.r0;
    3398:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    339a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    339e:	b99b      	cbnz	r3, 33c8 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    33a0:	2268      	movs	r2, #104	; 0x68
    33a2:	4629      	mov	r1, r5
    33a4:	a802      	add	r0, sp, #8
    33a6:	f005 fc7e 	bl	8ca6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    33aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    33ac:	2e00      	cmp	r6, #0
    33ae:	d03e      	beq.n	342e <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    33b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    33b4:	b922      	cbnz	r2, 33c0 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    33b6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    33ba:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    33be:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    33c0:	a902      	add	r1, sp, #8
    33c2:	4620      	mov	r0, r4
    33c4:	f004 fe93 	bl	80ee <z_arm_fatal_error>
}
    33c8:	b01c      	add	sp, #112	; 0x70
    33ca:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    33cc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    33d0:	b12a      	cbz	r2, 33de <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    33d2:	f10d 0107 	add.w	r1, sp, #7
    33d6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    33d8:	f7ff ff7e 	bl	32d8 <bus_fault.constprop.0>
    33dc:	e7da      	b.n	3394 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    33de:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    33e0:	b292      	uxth	r2, r2
    33e2:	2a00      	cmp	r2, #0
    33e4:	d0d9      	beq.n	339a <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    33e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    33e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    33ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    33ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    33ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    33f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    33f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    33f4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    33f8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    33fc:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    33fe:	e7cc      	b.n	339a <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    3400:	f10d 0207 	add.w	r2, sp, #7
    3404:	2100      	movs	r1, #0
    3406:	e7c2      	b.n	338e <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    3408:	f10d 0107 	add.w	r1, sp, #7
    340c:	2000      	movs	r0, #0
    340e:	e7e3      	b.n	33d8 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3410:	4b09      	ldr	r3, [pc, #36]	; (3438 <z_arm_fault+0x124>)
    3412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    341a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    341c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    341e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3420:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3424:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3428:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    342a:	2400      	movs	r4, #0
    342c:	e7b5      	b.n	339a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    342e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3432:	f023 0301 	bic.w	r3, r3, #1
    3436:	e7c2      	b.n	33be <z_arm_fault+0xaa>
    3438:	e000ed00 	.word	0xe000ed00

0000343c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    343c:	4a02      	ldr	r2, [pc, #8]	; (3448 <z_arm_fault_init+0xc>)
    343e:	6953      	ldr	r3, [r2, #20]
    3440:	f043 0310 	orr.w	r3, r3, #16
    3444:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3446:	4770      	bx	lr
    3448:	e000ed00 	.word	0xe000ed00

0000344c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    344c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3450:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3454:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3456:	4672      	mov	r2, lr
	bl z_arm_fault
    3458:	f7ff ff5c 	bl	3314 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    345c:	bd01      	pop	{r0, pc}
    345e:	bf00      	nop

00003460 <z_arm_interrupt_init>:
    3460:	4804      	ldr	r0, [pc, #16]	; (3474 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3462:	2300      	movs	r3, #0
    3464:	2120      	movs	r1, #32
    3466:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3468:	3301      	adds	r3, #1
    346a:	2b30      	cmp	r3, #48	; 0x30
    346c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3470:	d1f9      	bne.n	3466 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3472:	4770      	bx	lr
    3474:	e000e100 	.word	0xe000e100

00003478 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3478:	2000      	movs	r0, #0
    msr CONTROL, r0
    347a:	f380 8814 	msr	CONTROL, r0
    isb
    347e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3482:	f005 ff63 	bl	934c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3486:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3488:	490d      	ldr	r1, [pc, #52]	; (34c0 <__start+0x48>)
    str r0, [r1]
    348a:	6008      	str	r0, [r1, #0]
    dsb
    348c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3490:	480c      	ldr	r0, [pc, #48]	; (34c4 <__start+0x4c>)
    msr msp, r0
    3492:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3496:	f000 f82b 	bl	34f0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    349a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    349c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    34a0:	4809      	ldr	r0, [pc, #36]	; (34c8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    34a2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    34a6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    34a8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    34ac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    34b0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    34b2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    34b4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    34b8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    34bc:	f7ff fd58 	bl	2f70 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    34c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    34c4:	20003500 	.word	0x20003500
    ldr r0, =z_interrupt_stacks
    34c8:	20003700 	.word	0x20003700

000034cc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    34cc:	4907      	ldr	r1, [pc, #28]	; (34ec <z_arm_clear_arm_mpu_config+0x20>)
    34ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    34d2:	2300      	movs	r3, #0
	int num_regions =
    34d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    34d8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    34da:	4293      	cmp	r3, r2
    34dc:	d100      	bne.n	34e0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    34de:	4770      	bx	lr
  MPU->RNR = rnr;
    34e0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    34e4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    34e8:	3301      	adds	r3, #1
    34ea:	e7f6      	b.n	34da <z_arm_clear_arm_mpu_config+0xe>
    34ec:	e000ed00 	.word	0xe000ed00

000034f0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    34f0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    34f2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    34f4:	2300      	movs	r3, #0
    34f6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    34fa:	f7ff ffe7 	bl	34cc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    34fe:	4b14      	ldr	r3, [pc, #80]	; (3550 <z_arm_init_arch_hw_at_boot+0x60>)
    3500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    350c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3518:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    351c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3520:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3524:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3528:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    352c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3530:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3534:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3538:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    353c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3540:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3544:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3546:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    354a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    354e:	bd08      	pop	{r3, pc}
    3550:	e000e100 	.word	0xe000e100

00003554 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3554:	4b08      	ldr	r3, [pc, #32]	; (3578 <z_impl_k_thread_abort+0x24>)
    3556:	689b      	ldr	r3, [r3, #8]
    3558:	4283      	cmp	r3, r0
    355a:	d10b      	bne.n	3574 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    355c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3560:	b143      	cbz	r3, 3574 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3562:	4b06      	ldr	r3, [pc, #24]	; (357c <z_impl_k_thread_abort+0x28>)
    3564:	685a      	ldr	r2, [r3, #4]
    3566:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    356a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    356c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    356e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3572:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3574:	f002 bbc6 	b.w	5d04 <z_thread_abort>
    3578:	20000e88 	.word	0x20000e88
    357c:	e000ed00 	.word	0xe000ed00

00003580 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3580:	4b02      	ldr	r3, [pc, #8]	; (358c <z_arm_configure_static_mpu_regions+0xc>)
    3582:	4a03      	ldr	r2, [pc, #12]	; (3590 <z_arm_configure_static_mpu_regions+0x10>)
    3584:	4803      	ldr	r0, [pc, #12]	; (3594 <z_arm_configure_static_mpu_regions+0x14>)
    3586:	2101      	movs	r1, #1
    3588:	f000 b874 	b.w	3674 <arm_core_mpu_configure_static_mpu_regions>
    358c:	20040000 	.word	0x20040000
    3590:	20000000 	.word	0x20000000
    3594:	0000a598 	.word	0x0000a598

00003598 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3598:	b510      	push	{r4, lr}
    359a:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    359c:	f7ff fdba 	bl	3114 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    35a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    35a2:	4b06      	ldr	r3, [pc, #24]	; (35bc <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
    35a4:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
    35a6:	e9c3 2000 	strd	r2, r0, [r3]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    35aa:	4a05      	ldr	r2, [pc, #20]	; (35c0 <z_arm_configure_dynamic_mpu_regions+0x28>)
    35ac:	609a      	str	r2, [r3, #8]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
    35ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    35b2:	2101      	movs	r1, #1
    35b4:	4618      	mov	r0, r3
    35b6:	f000 b867 	b.w	3688 <arm_core_mpu_configure_dynamic_mpu_regions>
    35ba:	bf00      	nop
    35bc:	20000d30 	.word	0x20000d30
    35c0:	150b0000 	.word	0x150b0000

000035c4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    35c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    35c6:	4f1f      	ldr	r7, [pc, #124]	; (3644 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    35c8:	2600      	movs	r6, #0
    35ca:	428e      	cmp	r6, r1
    35cc:	db01      	blt.n	35d2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    35ce:	4610      	mov	r0, r2
    35d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    35d2:	6844      	ldr	r4, [r0, #4]
    35d4:	b39c      	cbz	r4, 363e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    35d6:	b153      	cbz	r3, 35ee <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    35d8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    35dc:	ea14 0f0c 	tst.w	r4, ip
    35e0:	d118      	bne.n	3614 <mpu_configure_regions+0x50>
		&&
    35e2:	2c1f      	cmp	r4, #31
    35e4:	d916      	bls.n	3614 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    35e6:	6805      	ldr	r5, [r0, #0]
		&&
    35e8:	ea1c 0f05 	tst.w	ip, r5
    35ec:	d112      	bne.n	3614 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    35ee:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    35f0:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    35f2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    35f6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    35f8:	d90f      	bls.n	361a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    35fa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    35fe:	d80e      	bhi.n	361e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3600:	3c01      	subs	r4, #1
    3602:	fab4 f484 	clz	r4, r4
    3606:	f1c4 041f 	rsb	r4, r4, #31
    360a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    360c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    360e:	ea4c 0404 	orr.w	r4, ip, r4
    3612:	d906      	bls.n	3622 <mpu_configure_regions+0x5e>
			return -EINVAL;
    3614:	f06f 0215 	mvn.w	r2, #21
    3618:	e7d9      	b.n	35ce <mpu_configure_regions+0xa>
		return REGION_32B;
    361a:	2408      	movs	r4, #8
    361c:	e7f6      	b.n	360c <mpu_configure_regions+0x48>
		return REGION_4G;
    361e:	243e      	movs	r4, #62	; 0x3e
    3620:	e7f4      	b.n	360c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3622:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    3626:	4315      	orrs	r5, r2
    3628:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    362c:	f044 0401 	orr.w	r4, r4, #1
    3630:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3634:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    3638:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    363a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    363e:	3601      	adds	r6, #1
    3640:	300c      	adds	r0, #12
    3642:	e7c2      	b.n	35ca <mpu_configure_regions+0x6>
    3644:	e000ed00 	.word	0xe000ed00

00003648 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3648:	4b04      	ldr	r3, [pc, #16]	; (365c <arm_core_mpu_enable+0x14>)
    364a:	2205      	movs	r2, #5
    364c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3650:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3654:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3658:	4770      	bx	lr
    365a:	bf00      	nop
    365c:	e000ed00 	.word	0xe000ed00

00003660 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3660:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3664:	4b02      	ldr	r3, [pc, #8]	; (3670 <arm_core_mpu_disable+0x10>)
    3666:	2200      	movs	r2, #0
    3668:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    366c:	4770      	bx	lr
    366e:	bf00      	nop
    3670:	e000ed00 	.word	0xe000ed00

00003674 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3674:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3676:	4c03      	ldr	r4, [pc, #12]	; (3684 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3678:	2301      	movs	r3, #1
    367a:	7822      	ldrb	r2, [r4, #0]
    367c:	f7ff ffa2 	bl	35c4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3680:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3682:	bd10      	pop	{r4, pc}
    3684:	200010a8 	.word	0x200010a8

00003688 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3688:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    368a:	4a09      	ldr	r2, [pc, #36]	; (36b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    368c:	2300      	movs	r3, #0
    368e:	7812      	ldrb	r2, [r2, #0]
    3690:	f7ff ff98 	bl	35c4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3694:	f110 0f16 	cmn.w	r0, #22
    3698:	d002      	beq.n	36a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    369a:	4a06      	ldr	r2, [pc, #24]	; (36b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    369c:	2807      	cmp	r0, #7
    369e:	dd00      	ble.n	36a2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    36a0:	bd08      	pop	{r3, pc}
    36a2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    36a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    36aa:	3001      	adds	r0, #1
    36ac:	e7f6      	b.n	369c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    36ae:	bf00      	nop
    36b0:	200010a8 	.word	0x200010a8
    36b4:	e000ed00 	.word	0xe000ed00

000036b8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    36b8:	4914      	ldr	r1, [pc, #80]	; (370c <z_arm_mpu_init+0x54>)
    36ba:	6808      	ldr	r0, [r1, #0]
    36bc:	2808      	cmp	r0, #8
{
    36be:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    36c0:	d821      	bhi.n	3706 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    36c2:	f7ff ffcd 	bl	3660 <arm_core_mpu_disable>
    36c6:	4c12      	ldr	r4, [pc, #72]	; (3710 <z_arm_mpu_init+0x58>)
    36c8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    36ca:	2200      	movs	r2, #0
    36cc:	4290      	cmp	r0, r2
    36ce:	f101 010c 	add.w	r1, r1, #12
    36d2:	d105      	bne.n	36e0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    36d4:	4b0f      	ldr	r3, [pc, #60]	; (3714 <z_arm_mpu_init+0x5c>)
    36d6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    36d8:	f7ff ffb6 	bl	3648 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    36dc:	2000      	movs	r0, #0
}
    36de:	bd10      	pop	{r4, pc}
    36e0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36e4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    36e8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    36ec:	4313      	orrs	r3, r2
    36ee:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36f2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    36fa:	f043 0301 	orr.w	r3, r3, #1
    36fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3702:	3201      	adds	r2, #1
    3704:	e7e2      	b.n	36cc <z_arm_mpu_init+0x14>
		return -1;
    3706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    370a:	e7e8      	b.n	36de <z_arm_mpu_init+0x26>
    370c:	0000a5a4 	.word	0x0000a5a4
    3710:	e000ed00 	.word	0xe000ed00
    3714:	200010a8 	.word	0x200010a8

00003718 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3718:	4b01      	ldr	r3, [pc, #4]	; (3720 <__stdout_hook_install+0x8>)
    371a:	6018      	str	r0, [r3, #0]
}
    371c:	4770      	bx	lr
    371e:	bf00      	nop
    3720:	20000254 	.word	0x20000254

00003724 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    3724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    3726:	4f08      	ldr	r7, [pc, #32]	; (3748 <z_impl_zephyr_read_stdin+0x24>)
{
    3728:	4606      	mov	r6, r0
    372a:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    372c:	2400      	movs	r4, #0
    372e:	42ac      	cmp	r4, r5
    3730:	da08      	bge.n	3744 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    3732:	683b      	ldr	r3, [r7, #0]
    3734:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    3736:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    3738:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    373a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    373e:	d001      	beq.n	3744 <z_impl_zephyr_read_stdin+0x20>
    3740:	280d      	cmp	r0, #13
    3742:	d1f4      	bne.n	372e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    3744:	4620      	mov	r0, r4
    3746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3748:	20000250 	.word	0x20000250

0000374c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    374e:	4f0a      	ldr	r7, [pc, #40]	; (3778 <z_impl_zephyr_write_stdout+0x2c>)
    3750:	460d      	mov	r5, r1
    3752:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    3754:	f1c0 0401 	rsb	r4, r0, #1
    3758:	19a3      	adds	r3, r4, r6
    375a:	429d      	cmp	r5, r3
    375c:	dc01      	bgt.n	3762 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    375e:	4628      	mov	r0, r5
    3760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    3762:	7873      	ldrb	r3, [r6, #1]
    3764:	2b0a      	cmp	r3, #10
    3766:	d102      	bne.n	376e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    3768:	683b      	ldr	r3, [r7, #0]
    376a:	200d      	movs	r0, #13
    376c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    376e:	683b      	ldr	r3, [r7, #0]
    3770:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3774:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    3776:	e7ef      	b.n	3758 <z_impl_zephyr_write_stdout+0xc>
    3778:	20000254 	.word	0x20000254

0000377c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    377c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    377e:	4802      	ldr	r0, [pc, #8]	; (3788 <_exit+0xc>)
    3780:	2105      	movs	r1, #5
    3782:	f7ff ffe3 	bl	374c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    3786:	e7fe      	b.n	3786 <_exit+0xa>
    3788:	0000a8f9 	.word	0x0000a8f9

0000378c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    378c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    378e:	4c07      	ldr	r4, [pc, #28]	; (37ac <_sbrk+0x20>)
    3790:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    3792:	18c2      	adds	r2, r0, r3
    3794:	4806      	ldr	r0, [pc, #24]	; (37b0 <_sbrk+0x24>)
    3796:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    379a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    379e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    37a0:	bf3a      	itte	cc
    37a2:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    37a4:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    37a6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    37aa:	bd10      	pop	{r4, pc}
    37ac:	20000d3c 	.word	0x20000d3c
    37b0:	20003f80 	.word	0x20003f80

000037b4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    37b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    37b6:	f04f 0320 	mov.w	r3, #32
    37ba:	f3ef 8011 	mrs	r0, BASEPRI
    37be:	f383 8812 	msr	BASEPRI_MAX, r3
    37c2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    37c6:	4a11      	ldr	r2, [pc, #68]	; (380c <nordicsemi_nrf52_init+0x58>)
    37c8:	2301      	movs	r3, #1
    37ca:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    37ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    37d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    37d6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    37da:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    37de:	2c08      	cmp	r4, #8
    37e0:	d108      	bne.n	37f4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    37e2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    37e6:	2905      	cmp	r1, #5
    37e8:	d804      	bhi.n	37f4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    37ea:	4c09      	ldr	r4, [pc, #36]	; (3810 <nordicsemi_nrf52_init+0x5c>)
    37ec:	5c61      	ldrb	r1, [r4, r1]
    37ee:	b109      	cbz	r1, 37f4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    37f0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    37f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37f8:	2201      	movs	r2, #1
    37fa:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    37fe:	f380 8811 	msr	BASEPRI, r0
    3802:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3806:	2000      	movs	r0, #0
    3808:	bd10      	pop	{r4, pc}
    380a:	bf00      	nop
    380c:	4001e000 	.word	0x4001e000
    3810:	0000a90e 	.word	0x0000a90e

00003814 <sys_arch_reboot>:
    *p_gpregret = val;
    3814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3818:	b2c0      	uxtb	r0, r0
    381a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    381e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3822:	4905      	ldr	r1, [pc, #20]	; (3838 <sys_arch_reboot+0x24>)
    3824:	4b05      	ldr	r3, [pc, #20]	; (383c <sys_arch_reboot+0x28>)
    3826:	68ca      	ldr	r2, [r1, #12]
    3828:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    382c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    382e:	60cb      	str	r3, [r1, #12]
    3830:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3834:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3836:	e7fd      	b.n	3834 <sys_arch_reboot+0x20>
    3838:	e000ed00 	.word	0xe000ed00
    383c:	05fa0004 	.word	0x05fa0004

00003840 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3840:	b120      	cbz	r0, 384c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3842:	4b03      	ldr	r3, [pc, #12]	; (3850 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3844:	0180      	lsls	r0, r0, #6
    3846:	f043 0301 	orr.w	r3, r3, #1
    384a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    384c:	4770      	bx	lr
    384e:	bf00      	nop
    3850:	00009fc0 	.word	0x00009fc0

00003854 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3854:	b570      	push	{r4, r5, r6, lr}
    3856:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3858:	4906      	ldr	r1, [pc, #24]	; (3874 <onoff_stop+0x20>)
    385a:	1a41      	subs	r1, r0, r1
{
    385c:	4604      	mov	r4, r0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    385e:	1149      	asrs	r1, r1, #5
    3860:	4805      	ldr	r0, [pc, #20]	; (3878 <onoff_stop+0x24>)
    3862:	2240      	movs	r2, #64	; 0x40
    3864:	f004 fcbb 	bl	81de <stop>
	notify(mgr, res);
    3868:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    386a:	4601      	mov	r1, r0
	notify(mgr, res);
    386c:	4620      	mov	r0, r4
}
    386e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3872:	4718      	bx	r3
    3874:	20000d50 	.word	0x20000d50
    3878:	000093c8 	.word	0x000093c8

0000387c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    387c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    387e:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3880:	490a      	ldr	r1, [pc, #40]	; (38ac <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3882:	4a0b      	ldr	r2, [pc, #44]	; (38b0 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    3884:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3886:	2340      	movs	r3, #64	; 0x40
    3888:	9300      	str	r3, [sp, #0]
    388a:	1149      	asrs	r1, r1, #5
{
    388c:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    388e:	4623      	mov	r3, r4
    3890:	4808      	ldr	r0, [pc, #32]	; (38b4 <onoff_start+0x38>)
    3892:	f004 fcd0 	bl	8236 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3896:	1e01      	subs	r1, r0, #0
    3898:	da05      	bge.n	38a6 <onoff_start+0x2a>
		notify(mgr, err);
    389a:	4628      	mov	r0, r5
    389c:	4623      	mov	r3, r4
	}
}
    389e:	b003      	add	sp, #12
    38a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    38a4:	4718      	bx	r3
}
    38a6:	b003      	add	sp, #12
    38a8:	bd30      	pop	{r4, r5, pc}
    38aa:	bf00      	nop
    38ac:	20000d50 	.word	0x20000d50
    38b0:	000082a5 	.word	0x000082a5
    38b4:	000093c8 	.word	0x000093c8

000038b8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    38b8:	2200      	movs	r2, #0
{
    38ba:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    38bc:	2101      	movs	r1, #1
{
    38be:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    38c0:	4610      	mov	r0, r2
    38c2:	f7ff fb39 	bl	2f38 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    38c6:	480f      	ldr	r0, [pc, #60]	; (3904 <clk_init+0x4c>)
    38c8:	f001 f85c 	bl	4984 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    38cc:	4b0e      	ldr	r3, [pc, #56]	; (3908 <clk_init+0x50>)
    38ce:	4298      	cmp	r0, r3
    38d0:	d115      	bne.n	38fe <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    38d2:	f004 ffb6 	bl	8842 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    38d6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    38d8:	490c      	ldr	r1, [pc, #48]	; (390c <clk_init+0x54>)
    38da:	4630      	mov	r0, r6
    38dc:	f004 fae6 	bl	7eac <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    38e0:	2800      	cmp	r0, #0
    38e2:	db0b      	blt.n	38fc <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    38e4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    38e6:	4909      	ldr	r1, [pc, #36]	; (390c <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    38e8:	2501      	movs	r5, #1
    38ea:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    38ec:	f104 0020 	add.w	r0, r4, #32
    38f0:	f004 fadc 	bl	7eac <onoff_manager_init>
		if (err < 0) {
    38f4:	2800      	cmp	r0, #0
    38f6:	db01      	blt.n	38fc <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    38f8:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    38fa:	2000      	movs	r0, #0
}
    38fc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    38fe:	f06f 0004 	mvn.w	r0, #4
    3902:	e7fb      	b.n	38fc <clk_init+0x44>
    3904:	0000394d 	.word	0x0000394d
    3908:	0bad0000 	.word	0x0bad0000
    390c:	0000a5ec 	.word	0x0000a5ec

00003910 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3910:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3912:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    3914:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3916:	480b      	ldr	r0, [pc, #44]	; (3944 <clkstarted_handle.constprop.0+0x34>)
    3918:	434b      	muls	r3, r1
    391a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    391c:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3920:	2600      	movs	r6, #0
	set_on_state(&sub_data->flags);
    3922:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    3924:	6426      	str	r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    3926:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    3928:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    392a:	f004 fc45 	bl	81b8 <set_on_state>
	if (callback) {
    392e:	b135      	cbz	r5, 393e <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3930:	9a01      	ldr	r2, [sp, #4]
    3932:	4805      	ldr	r0, [pc, #20]	; (3948 <clkstarted_handle.constprop.0+0x38>)
    3934:	462b      	mov	r3, r5
}
    3936:	b002      	add	sp, #8
    3938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    393c:	4718      	bx	r3
}
    393e:	b002      	add	sp, #8
    3940:	bd70      	pop	{r4, r5, r6, pc}
    3942:	bf00      	nop
    3944:	20000d50 	.word	0x20000d50
    3948:	000093c8 	.word	0x000093c8

0000394c <clock_event_handler>:
	switch (event) {
    394c:	b110      	cbz	r0, 3954 <clock_event_handler+0x8>
    394e:	2801      	cmp	r0, #1
    3950:	d004      	beq.n	395c <clock_event_handler+0x10>
    3952:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3954:	4b03      	ldr	r3, [pc, #12]	; (3964 <clock_event_handler+0x18>)
    3956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3958:	075b      	lsls	r3, r3, #29
    395a:	d101      	bne.n	3960 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    395c:	f7ff bfd8 	b.w	3910 <clkstarted_handle.constprop.0>
}
    3960:	4770      	bx	lr
    3962:	bf00      	nop
    3964:	20000d50 	.word	0x20000d50

00003968 <generic_hfclk_start>:
{
    3968:	b508      	push	{r3, lr}
	__asm__ volatile(
    396a:	f04f 0320 	mov.w	r3, #32
    396e:	f3ef 8111 	mrs	r1, BASEPRI
    3972:	f383 8812 	msr	BASEPRI_MAX, r3
    3976:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    397a:	4a12      	ldr	r2, [pc, #72]	; (39c4 <generic_hfclk_start+0x5c>)
    397c:	6813      	ldr	r3, [r2, #0]
    397e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3982:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3986:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3988:	d00c      	beq.n	39a4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    398a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    398e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3992:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3996:	f013 0301 	ands.w	r3, r3, #1
    399a:	d003      	beq.n	39a4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    399c:	480a      	ldr	r0, [pc, #40]	; (39c8 <generic_hfclk_start+0x60>)
    399e:	f004 fc0b 	bl	81b8 <set_on_state>
			already_started = true;
    39a2:	2301      	movs	r3, #1
	__asm__ volatile(
    39a4:	f381 8811 	msr	BASEPRI, r1
    39a8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    39ac:	b123      	cbz	r3, 39b8 <generic_hfclk_start+0x50>
}
    39ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    39b2:	2000      	movs	r0, #0
    39b4:	f7ff bfac 	b.w	3910 <clkstarted_handle.constprop.0>
}
    39b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    39bc:	2001      	movs	r0, #1
    39be:	f004 bf4d 	b.w	885c <nrfx_clock_start>
    39c2:	bf00      	nop
    39c4:	20000da8 	.word	0x20000da8
    39c8:	20000d98 	.word	0x20000d98

000039cc <api_blocking_start>:
{
    39cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    39ce:	2200      	movs	r2, #0
    39d0:	2301      	movs	r3, #1
    39d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    39d6:	4a09      	ldr	r2, [pc, #36]	; (39fc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    39d8:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    39dc:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    39de:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    39e2:	f004 fc58 	bl	8296 <api_start>
	if (err < 0) {
    39e6:	2800      	cmp	r0, #0
    39e8:	db05      	blt.n	39f6 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    39ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    39ee:	2300      	movs	r3, #0
    39f0:	4668      	mov	r0, sp
    39f2:	f001 fe67 	bl	56c4 <z_impl_k_sem_take>
}
    39f6:	b005      	add	sp, #20
    39f8:	f85d fb04 	ldr.w	pc, [sp], #4
    39fc:	000082bd 	.word	0x000082bd

00003a00 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a00:	4b09      	ldr	r3, [pc, #36]	; (3a28 <generic_hfclk_stop+0x28>)
    3a02:	f3bf 8f5b 	dmb	ish
    3a06:	e853 2f00 	ldrex	r2, [r3]
    3a0a:	f022 0102 	bic.w	r1, r2, #2
    3a0e:	e843 1000 	strex	r0, r1, [r3]
    3a12:	2800      	cmp	r0, #0
    3a14:	d1f7      	bne.n	3a06 <generic_hfclk_stop+0x6>
    3a16:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3a1a:	07d3      	lsls	r3, r2, #31
    3a1c:	d402      	bmi.n	3a24 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3a1e:	2001      	movs	r0, #1
    3a20:	f004 bf59 	b.w	88d6 <nrfx_clock_stop>
}
    3a24:	4770      	bx	lr
    3a26:	bf00      	nop
    3a28:	20000da8 	.word	0x20000da8

00003a2c <z_nrf_clock_control_lf_on>:
{
    3a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3a30:	4939      	ldr	r1, [pc, #228]	; (3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>)
    3a32:	f3bf 8f5b 	dmb	ish
    3a36:	4607      	mov	r7, r0
    3a38:	2201      	movs	r2, #1
    3a3a:	e851 3f00 	ldrex	r3, [r1]
    3a3e:	e841 2000 	strex	r0, r2, [r1]
    3a42:	2800      	cmp	r0, #0
    3a44:	d1f9      	bne.n	3a3a <z_nrf_clock_control_lf_on+0xe>
    3a46:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3a4a:	b933      	cbnz	r3, 3a5a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3a4c:	4933      	ldr	r1, [pc, #204]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
		err = onoff_request(mgr, &cli);
    3a4e:	4834      	ldr	r0, [pc, #208]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3a50:	604b      	str	r3, [r1, #4]
    3a52:	60cb      	str	r3, [r1, #12]
    3a54:	608a      	str	r2, [r1, #8]
    3a56:	f004 fa3c 	bl	7ed2 <onoff_request>
	switch (start_mode) {
    3a5a:	1e7b      	subs	r3, r7, #1
    3a5c:	2b01      	cmp	r3, #1
    3a5e:	d82f      	bhi.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3a60:	2f01      	cmp	r7, #1
    3a62:	d107      	bne.n	3a74 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a68:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3a6c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3a70:	2b01      	cmp	r3, #1
    3a72:	d025      	beq.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3a74:	f004 fffe 	bl	8a74 <k_is_in_isr>
    3a78:	4604      	mov	r4, r0
    3a7a:	b918      	cbnz	r0, 3a84 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    3a7c:	4b29      	ldr	r3, [pc, #164]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
	int key = isr_mode ? irq_lock() : 0;
    3a7e:	781b      	ldrb	r3, [r3, #0]
    3a80:	2b00      	cmp	r3, #0
    3a82:	d141      	bne.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
	__asm__ volatile(
    3a84:	f04f 0320 	mov.w	r3, #32
    3a88:	f3ef 8611 	mrs	r6, BASEPRI
    3a8c:	f383 8812 	msr	BASEPRI_MAX, r3
    3a90:	f3bf 8f6f 	isb	sy
    3a94:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a96:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a9a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3a9e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3aa2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    3aa6:	03d2      	lsls	r2, r2, #15
    3aa8:	d50c      	bpl.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3aaa:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3aae:	2b01      	cmp	r3, #1
    3ab0:	d001      	beq.n	3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3ab2:	2f01      	cmp	r7, #1
    3ab4:	d106      	bne.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
	if (isr_mode) {
    3ab6:	b30c      	cbz	r4, 3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
	__asm__ volatile(
    3ab8:	f386 8811 	msr	BASEPRI, r6
    3abc:	f3bf 8f6f 	isb	sy
}
    3ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3ac4:	b1ac      	cbz	r4, 3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3ac6:	4630      	mov	r0, r6
    3ac8:	f7ff fa0e 	bl	2ee8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3acc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d1e4      	bne.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3ad4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3ad8:	2a00      	cmp	r2, #0
    3ada:	d0e0      	beq.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3adc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3ae0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3ae4:	2301      	movs	r3, #1
    3ae6:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    3aea:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3aee:	60ab      	str	r3, [r5, #8]
}
    3af0:	e7d5      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
	return z_impl_k_sleep(timeout);
    3af2:	2100      	movs	r1, #0
    3af4:	2021      	movs	r0, #33	; 0x21
    3af6:	f002 f8e5 	bl	5cc4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3afa:	e7e7      	b.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    p_reg->INTENSET = mask;
    3afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b00:	2202      	movs	r2, #2
    3b02:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3b06:	e7db      	b.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    p_reg->INTENCLR = mask;
    3b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b0c:	2202      	movs	r2, #2
    3b0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3b12:	4606      	mov	r6, r0
}
    3b14:	e7bf      	b.n	3a96 <z_nrf_clock_control_lf_on+0x6a>
    3b16:	bf00      	nop
    3b18:	20000dac 	.word	0x20000dac
    3b1c:	20000d40 	.word	0x20000d40
    3b20:	20000d70 	.word	0x20000d70
    3b24:	200014f9 	.word	0x200014f9
    3b28:	e000e100 	.word	0xe000e100

00003b2c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    3b2c:	280a      	cmp	r0, #10
{
    3b2e:	b538      	push	{r3, r4, r5, lr}
    3b30:	4d06      	ldr	r5, [pc, #24]	; (3b4c <console_out+0x20>)
    3b32:	4604      	mov	r4, r0
	if ('\n' == c) {
    3b34:	d103      	bne.n	3b3e <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
    3b36:	6828      	ldr	r0, [r5, #0]
    3b38:	210d      	movs	r1, #13
    3b3a:	f004 fbc2 	bl	82c2 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    3b3e:	6828      	ldr	r0, [r5, #0]
    3b40:	b2e1      	uxtb	r1, r4
    3b42:	f004 fbbe 	bl	82c2 <uart_poll_out>

	return c;
}
    3b46:	4620      	mov	r0, r4
    3b48:	bd38      	pop	{r3, r4, r5, pc}
    3b4a:	bf00      	nop
    3b4c:	20000db0 	.word	0x20000db0

00003b50 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3b50:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3b52:	4b08      	ldr	r3, [pc, #32]	; (3b74 <uart_console_init+0x24>)
    3b54:	4808      	ldr	r0, [pc, #32]	; (3b78 <uart_console_init+0x28>)
    3b56:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    3b58:	f004 ff1d 	bl	8996 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3b5c:	b138      	cbz	r0, 3b6e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    3b5e:	4807      	ldr	r0, [pc, #28]	; (3b7c <uart_console_init+0x2c>)
    3b60:	f7ff fdda 	bl	3718 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3b64:	4805      	ldr	r0, [pc, #20]	; (3b7c <uart_console_init+0x2c>)
    3b66:	f7fe fdf9 	bl	275c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3b6a:	2000      	movs	r0, #0
}
    3b6c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3b6e:	f06f 0012 	mvn.w	r0, #18
    3b72:	e7fb      	b.n	3b6c <uart_console_init+0x1c>
    3b74:	20000db0 	.word	0x20000db0
    3b78:	00009428 	.word	0x00009428
    3b7c:	00003b2d 	.word	0x00003b2d

00003b80 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3b80:	b530      	push	{r4, r5, lr}
	return port->config;
    3b82:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b84:	7b04      	ldrb	r4, [r0, #12]
    3b86:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3b8a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b8e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    3b92:	b085      	sub	sp, #20
    3b94:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    3b98:	d104      	bne.n	3ba4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    3b9a:	4628      	mov	r0, r5
    3b9c:	f001 f976 	bl	4e8c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    3ba0:	2000      	movs	r0, #0
    3ba2:	e032      	b.n	3c0a <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3ba4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3ba8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3bac:	d12f      	bne.n	3c0e <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3bb2:	bf0c      	ite	eq
    3bb4:	2304      	moveq	r3, #4
    3bb6:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3bb8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3bbc:	6883      	ldr	r3, [r0, #8]
    3bbe:	fa23 f101 	lsr.w	r1, r3, r1
    3bc2:	07c9      	lsls	r1, r1, #31
    3bc4:	d42f      	bmi.n	3c26 <gpio_nrfx_pin_interrupt_configure+0xa6>
    3bc6:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3bca:	d12c      	bne.n	3c26 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    3bcc:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    3bce:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    3bd0:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    3bd4:	4a1c      	ldr	r2, [pc, #112]	; (3c48 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3bd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    3bda:	bf18      	it	ne
    3bdc:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3be4:	07db      	lsls	r3, r3, #31
    3be6:	d41e      	bmi.n	3c26 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3be8:	f10d 0407 	add.w	r4, sp, #7
    3bec:	4621      	mov	r1, r4
    3bee:	4628      	mov	r0, r5
    3bf0:	f001 f8b0 	bl	4d54 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3bf4:	4b15      	ldr	r3, [pc, #84]	; (3c4c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    3bf6:	4298      	cmp	r0, r3
    3bf8:	d114      	bne.n	3c24 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    3bfa:	4620      	mov	r0, r4
    3bfc:	f001 f8f8 	bl	4df0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3c00:	4b13      	ldr	r3, [pc, #76]	; (3c50 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3c02:	4298      	cmp	r0, r3
    3c04:	d00e      	beq.n	3c24 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    3c06:	f06f 000b 	mvn.w	r0, #11
}
    3c0a:	b005      	add	sp, #20
    3c0c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3c0e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3c12:	d005      	beq.n	3c20 <gpio_nrfx_pin_interrupt_configure+0xa0>
    3c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3c18:	bf0c      	ite	eq
    3c1a:	2302      	moveq	r3, #2
    3c1c:	2301      	movne	r3, #1
    3c1e:	e7cb      	b.n	3bb8 <gpio_nrfx_pin_interrupt_configure+0x38>
    3c20:	2303      	movs	r3, #3
    3c22:	e7c9      	b.n	3bb8 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    3c24:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3c26:	2300      	movs	r3, #0
    3c28:	4619      	mov	r1, r3
    3c2a:	aa02      	add	r2, sp, #8
    3c2c:	4628      	mov	r0, r5
    3c2e:	f000 ff6b 	bl	4b08 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3c32:	4b07      	ldr	r3, [pc, #28]	; (3c50 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3c34:	4298      	cmp	r0, r3
    3c36:	d104      	bne.n	3c42 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3c38:	2101      	movs	r1, #1
    3c3a:	4628      	mov	r0, r5
    3c3c:	f001 f8de 	bl	4dfc <nrfx_gpiote_trigger_enable>
    3c40:	e7ae      	b.n	3ba0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    3c42:	f06f 0004 	mvn.w	r0, #4
    3c46:	e7e0      	b.n	3c0a <gpio_nrfx_pin_interrupt_configure+0x8a>
    3c48:	50000300 	.word	0x50000300
    3c4c:	0bad0004 	.word	0x0bad0004
    3c50:	0bad0000 	.word	0x0bad0000

00003c54 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3c54:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3c56:	f001 f8bb 	bl	4dd0 <nrfx_gpiote_is_init>
    3c5a:	4604      	mov	r4, r0
    3c5c:	b968      	cbnz	r0, 3c7a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3c5e:	f001 f88f 	bl	4d80 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3c62:	4b08      	ldr	r3, [pc, #32]	; (3c84 <gpio_nrfx_init+0x30>)
    3c64:	4298      	cmp	r0, r3
    3c66:	d10a      	bne.n	3c7e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3c68:	4807      	ldr	r0, [pc, #28]	; (3c88 <gpio_nrfx_init+0x34>)
    3c6a:	4621      	mov	r1, r4
    3c6c:	f001 f86c 	bl	4d48 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3c70:	4622      	mov	r2, r4
    3c72:	2105      	movs	r1, #5
    3c74:	2006      	movs	r0, #6
    3c76:	f7ff f95f 	bl	2f38 <z_arm_irq_priority_set>
		return 0;
    3c7a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3c7c:	bd10      	pop	{r4, pc}
		return -EIO;
    3c7e:	f06f 0004 	mvn.w	r0, #4
    3c82:	e7fb      	b.n	3c7c <gpio_nrfx_init+0x28>
    3c84:	0bad0000 	.word	0x0bad0000
    3c88:	00003c8d 	.word	0x00003c8d

00003c8c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c8c:	0943      	lsrs	r3, r0, #5
{
    3c8e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c90:	d002      	beq.n	3c98 <nrfx_gpio_handler+0xc>
    3c92:	2b01      	cmp	r3, #1
    3c94:	d015      	beq.n	3cc2 <nrfx_gpio_handler+0x36>
}
    3c96:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c98:	4e0b      	ldr	r6, [pc, #44]	; (3cc8 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    3c9a:	6933      	ldr	r3, [r6, #16]
    3c9c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3c9e:	2900      	cmp	r1, #0
    3ca0:	d0f9      	beq.n	3c96 <nrfx_gpio_handler+0xa>
    *p_pin = pin_number & 0x1F;
    3ca2:	f000 031f 	and.w	r3, r0, #31
    3ca6:	2501      	movs	r5, #1
    3ca8:	680c      	ldr	r4, [r1, #0]
    3caa:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    3cac:	688a      	ldr	r2, [r1, #8]
    3cae:	402a      	ands	r2, r5
    3cb0:	d002      	beq.n	3cb8 <nrfx_gpio_handler+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3cb2:	684b      	ldr	r3, [r1, #4]
    3cb4:	4630      	mov	r0, r6
    3cb6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3cb8:	2c00      	cmp	r4, #0
    3cba:	d0ec      	beq.n	3c96 <nrfx_gpio_handler+0xa>
    3cbc:	4621      	mov	r1, r4
    3cbe:	6824      	ldr	r4, [r4, #0]
    3cc0:	e7f4      	b.n	3cac <nrfx_gpio_handler+0x20>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3cc2:	4e02      	ldr	r6, [pc, #8]	; (3ccc <nrfx_gpio_handler+0x40>)
    3cc4:	e7e9      	b.n	3c9a <nrfx_gpio_handler+0xe>
    3cc6:	bf00      	nop
    3cc8:	000093e0 	.word	0x000093e0
    3ccc:	000093f8 	.word	0x000093f8

00003cd0 <gpio_nrfx_pin_configure>:
{
    3cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    3cd4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3cd6:	7b3b      	ldrb	r3, [r7, #12]
    3cd8:	f001 051f 	and.w	r5, r1, #31
{
    3cdc:	b085      	sub	sp, #20
    3cde:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3ce0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3ce4:	4614      	mov	r4, r2
    3ce6:	b9ca      	cbnz	r2, 3d1c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3ce8:	a902      	add	r1, sp, #8
    3cea:	4628      	mov	r0, r5
    3cec:	f001 f832 	bl	4d54 <nrfx_gpiote_channel_get>
    3cf0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3cf2:	4628      	mov	r0, r5
    3cf4:	f001 f8f2 	bl	4edc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3cf8:	4b4a      	ldr	r3, [pc, #296]	; (3e24 <gpio_nrfx_pin_configure+0x154>)
    3cfa:	4298      	cmp	r0, r3
    3cfc:	d004      	beq.n	3d08 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3cfe:	f06f 0004 	mvn.w	r0, #4
}
    3d02:	b005      	add	sp, #20
    3d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3d08:	4284      	cmp	r4, r0
    3d0a:	d105      	bne.n	3d18 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3d0c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3d10:	f001 f868 	bl	4de4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3d14:	42a0      	cmp	r0, r4
    3d16:	d1f2      	bne.n	3cfe <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3d18:	2000      	movs	r0, #0
    3d1a:	e7f2      	b.n	3d02 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3d1c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3d20:	f10d 0103 	add.w	r1, sp, #3
    3d24:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3d26:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3d2a:	f001 f813 	bl	4d54 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3d2e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3d30:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3d32:	aa02      	add	r2, sp, #8
    3d34:	4649      	mov	r1, r9
    3d36:	4628      	mov	r0, r5
    3d38:	f000 fee6 	bl	4b08 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3d3c:	4b39      	ldr	r3, [pc, #228]	; (3e24 <gpio_nrfx_pin_configure+0x154>)
    3d3e:	4298      	cmp	r0, r3
    3d40:	d002      	beq.n	3d48 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3d42:	f06f 0015 	mvn.w	r0, #21
    3d46:	e7dc      	b.n	3d02 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3d48:	4580      	cmp	r8, r0
    3d4a:	d103      	bne.n	3d54 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3d4c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3d50:	f001 f848 	bl	4de4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3d54:	03a3      	lsls	r3, r4, #14
    3d56:	d551      	bpl.n	3dfc <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3d58:	f240 6306 	movw	r3, #1542	; 0x606
    3d5c:	4023      	ands	r3, r4
    3d5e:	f240 2206 	movw	r2, #518	; 0x206
    3d62:	4293      	cmp	r3, r2
    3d64:	d03b      	beq.n	3dde <gpio_nrfx_pin_configure+0x10e>
    3d66:	d80c      	bhi.n	3d82 <gpio_nrfx_pin_configure+0xb2>
    3d68:	2b06      	cmp	r3, #6
    3d6a:	d015      	beq.n	3d98 <gpio_nrfx_pin_configure+0xc8>
    3d6c:	d804      	bhi.n	3d78 <gpio_nrfx_pin_configure+0xa8>
    3d6e:	b19b      	cbz	r3, 3d98 <gpio_nrfx_pin_configure+0xc8>
    3d70:	2b02      	cmp	r3, #2
    3d72:	d1e6      	bne.n	3d42 <gpio_nrfx_pin_configure+0x72>
    3d74:	2304      	movs	r3, #4
    3d76:	e00f      	b.n	3d98 <gpio_nrfx_pin_configure+0xc8>
    3d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3d7c:	d1e1      	bne.n	3d42 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3d7e:	2301      	movs	r3, #1
    3d80:	e00a      	b.n	3d98 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3d82:	f240 4202 	movw	r2, #1026	; 0x402
    3d86:	4293      	cmp	r3, r2
    3d88:	d02b      	beq.n	3de2 <gpio_nrfx_pin_configure+0x112>
    3d8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    3d8e:	d02a      	beq.n	3de6 <gpio_nrfx_pin_configure+0x116>
    3d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3d94:	d1d5      	bne.n	3d42 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3d96:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3d98:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3d9c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3da0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3da4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3da6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3daa:	bf54      	ite	pl
    3dac:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3db0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3db2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3db4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3db8:	d517      	bpl.n	3dea <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3dba:	687b      	ldr	r3, [r7, #4]
    3dbc:	2101      	movs	r1, #1
    3dbe:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3dc2:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3dc6:	2200      	movs	r2, #0
    3dc8:	a901      	add	r1, sp, #4
    3dca:	4628      	mov	r0, r5
    3dcc:	f000 ff4a 	bl	4c64 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3dd0:	4b14      	ldr	r3, [pc, #80]	; (3e24 <gpio_nrfx_pin_configure+0x154>)
    3dd2:	4298      	cmp	r0, r3
    3dd4:	bf14      	ite	ne
    3dd6:	f06f 0015 	mvnne.w	r0, #21
    3dda:	2000      	moveq	r0, #0
    3ddc:	e791      	b.n	3d02 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3dde:	2307      	movs	r3, #7
    3de0:	e7da      	b.n	3d98 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    3de2:	2305      	movs	r3, #5
    3de4:	e7d8      	b.n	3d98 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    3de6:	2303      	movs	r3, #3
    3de8:	e7d6      	b.n	3d98 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3dea:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3dec:	bf41      	itttt	mi
    3dee:	687b      	ldrmi	r3, [r7, #4]
    3df0:	2101      	movmi	r1, #1
    3df2:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3df6:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3dfa:	e7e4      	b.n	3dc6 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    3dfc:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3dfe:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3e02:	bf54      	ite	pl
    3e04:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3e08:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3e0a:	461a      	mov	r2, r3
    3e0c:	a901      	add	r1, sp, #4
    3e0e:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3e10:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3e14:	f000 fe78 	bl	4b08 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3e18:	4b02      	ldr	r3, [pc, #8]	; (3e24 <gpio_nrfx_pin_configure+0x154>)
    3e1a:	4298      	cmp	r0, r3
    3e1c:	f43f af7c 	beq.w	3d18 <gpio_nrfx_pin_configure+0x48>
    3e20:	e78f      	b.n	3d42 <gpio_nrfx_pin_configure+0x72>
    3e22:	bf00      	nop
    3e24:	0bad0000 	.word	0x0bad0000

00003e28 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3e28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3e2a:	794b      	ldrb	r3, [r1, #5]
    3e2c:	2b01      	cmp	r3, #1
    3e2e:	d026      	beq.n	3e7e <uarte_nrfx_configure+0x56>
    3e30:	2b03      	cmp	r3, #3
    3e32:	d121      	bne.n	3e78 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3e34:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3e36:	798b      	ldrb	r3, [r1, #6]
    3e38:	2b03      	cmp	r3, #3
    3e3a:	d11d      	bne.n	3e78 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3e3c:	79cc      	ldrb	r4, [r1, #7]
    3e3e:	b10c      	cbz	r4, 3e44 <uarte_nrfx_configure+0x1c>
    3e40:	2c01      	cmp	r4, #1
    3e42:	d119      	bne.n	3e78 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3e44:	790a      	ldrb	r2, [r1, #4]
    3e46:	b112      	cbz	r2, 3e4e <uarte_nrfx_configure+0x26>
    3e48:	2a02      	cmp	r2, #2
    3e4a:	d115      	bne.n	3e78 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3e4c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3e4e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3e50:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3e52:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3e56:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3e58:	d065      	beq.n	3f26 <uarte_nrfx_configure+0xfe>
    3e5a:	d82d      	bhi.n	3eb8 <uarte_nrfx_configure+0x90>
    3e5c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3e60:	d064      	beq.n	3f2c <uarte_nrfx_configure+0x104>
    3e62:	d816      	bhi.n	3e92 <uarte_nrfx_configure+0x6a>
    3e64:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3e68:	d062      	beq.n	3f30 <uarte_nrfx_configure+0x108>
    3e6a:	d80a      	bhi.n	3e82 <uarte_nrfx_configure+0x5a>
    3e6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3e70:	d061      	beq.n	3f36 <uarte_nrfx_configure+0x10e>
    3e72:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3e76:	d061      	beq.n	3f3c <uarte_nrfx_configure+0x114>
    3e78:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e7c:	e052      	b.n	3f24 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3e7e:	2600      	movs	r6, #0
    3e80:	e7d9      	b.n	3e36 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3e82:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3e86:	d05c      	beq.n	3f42 <uarte_nrfx_configure+0x11a>
    3e88:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3e8c:	d1f4      	bne.n	3e78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3e8e:	4b37      	ldr	r3, [pc, #220]	; (3f6c <uarte_nrfx_configure+0x144>)
    3e90:	e03c      	b.n	3f0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3e92:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3e96:	d057      	beq.n	3f48 <uarte_nrfx_configure+0x120>
    3e98:	d807      	bhi.n	3eaa <uarte_nrfx_configure+0x82>
    3e9a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3e9e:	d055      	beq.n	3f4c <uarte_nrfx_configure+0x124>
    3ea0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3ea4:	d1e8      	bne.n	3e78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3ea6:	4b32      	ldr	r3, [pc, #200]	; (3f70 <uarte_nrfx_configure+0x148>)
    3ea8:	e030      	b.n	3f0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3eaa:	f647 2712 	movw	r7, #31250	; 0x7a12
    3eae:	42bb      	cmp	r3, r7
    3eb0:	d1e2      	bne.n	3e78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3eb2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3eb6:	e029      	b.n	3f0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3eb8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3ebc:	d048      	beq.n	3f50 <uarte_nrfx_configure+0x128>
    3ebe:	d813      	bhi.n	3ee8 <uarte_nrfx_configure+0xc0>
    3ec0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3ec4:	d047      	beq.n	3f56 <uarte_nrfx_configure+0x12e>
    3ec6:	d809      	bhi.n	3edc <uarte_nrfx_configure+0xb4>
    3ec8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3ecc:	42bb      	cmp	r3, r7
    3ece:	d044      	beq.n	3f5a <uarte_nrfx_configure+0x132>
    3ed0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3ed4:	d1d0      	bne.n	3e78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3ed6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3eda:	e017      	b.n	3f0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3edc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3ee0:	d1ca      	bne.n	3e78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3ee2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3ee6:	e011      	b.n	3f0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3ee8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3eec:	d038      	beq.n	3f60 <uarte_nrfx_configure+0x138>
    3eee:	d808      	bhi.n	3f02 <uarte_nrfx_configure+0xda>
    3ef0:	4f20      	ldr	r7, [pc, #128]	; (3f74 <uarte_nrfx_configure+0x14c>)
    3ef2:	42bb      	cmp	r3, r7
    3ef4:	d037      	beq.n	3f66 <uarte_nrfx_configure+0x13e>
    3ef6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3efa:	d1bd      	bne.n	3e78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3efc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3f00:	e004      	b.n	3f0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f02:	4f1d      	ldr	r7, [pc, #116]	; (3f78 <uarte_nrfx_configure+0x150>)
    3f04:	42bb      	cmp	r3, r7
    3f06:	d1b7      	bne.n	3e78 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3f08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3f0c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3f0e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3f12:	1d03      	adds	r3, r0, #4
    3f14:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3f16:	4334      	orrs	r4, r6
    3f18:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3f1a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3f1e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3f22:	2000      	movs	r0, #0
}
    3f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3f26:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3f2a:	e7ef      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3f2c:	4b13      	ldr	r3, [pc, #76]	; (3f7c <uarte_nrfx_configure+0x154>)
    3f2e:	e7ed      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3f30:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3f34:	e7ea      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3f36:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3f3a:	e7e7      	b.n	3f0c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f3c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3f40:	e7e4      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3f42:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3f46:	e7e1      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3f48:	4b0d      	ldr	r3, [pc, #52]	; (3f80 <uarte_nrfx_configure+0x158>)
    3f4a:	e7df      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3f4c:	4b0d      	ldr	r3, [pc, #52]	; (3f84 <uarte_nrfx_configure+0x15c>)
    3f4e:	e7dd      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3f50:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3f54:	e7da      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3f56:	4b0c      	ldr	r3, [pc, #48]	; (3f88 <uarte_nrfx_configure+0x160>)
    3f58:	e7d8      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3f5a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3f5e:	e7d5      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3f60:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3f64:	e7d2      	b.n	3f0c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3f66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3f6a:	e7cf      	b.n	3f0c <uarte_nrfx_configure+0xe4>
    3f6c:	0013b000 	.word	0x0013b000
    3f70:	004ea000 	.word	0x004ea000
    3f74:	0003d090 	.word	0x0003d090
    3f78:	000f4240 	.word	0x000f4240
    3f7c:	00275000 	.word	0x00275000
    3f80:	0075c000 	.word	0x0075c000
    3f84:	003af000 	.word	0x003af000
    3f88:	013a9000 	.word	0x013a9000

00003f8c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    3f90:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    3f94:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    3f96:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3f9a:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3f9e:	2100      	movs	r1, #0
    3fa0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    3fa4:	4607      	mov	r7, r0
	data->dev = dev;
    3fa6:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3fa8:	aa01      	add	r2, sp, #4
    3faa:	4648      	mov	r0, r9
    3fac:	f004 fb72 	bl	8694 <pinctrl_lookup_state>
	if (ret < 0) {
    3fb0:	1e05      	subs	r5, r0, #0
    3fb2:	db56      	blt.n	4062 <uarte_instance_init.constprop.0+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3fb4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3fb6:	f8d9 2000 	ldr.w	r2, [r9]
    3fba:	7919      	ldrb	r1, [r3, #4]
    3fbc:	6818      	ldr	r0, [r3, #0]
    3fbe:	f004 fb86 	bl	86ce <pinctrl_configure_pins>
	if (err < 0) {
    3fc2:	1e05      	subs	r5, r0, #0
    3fc4:	db4d      	blt.n	4062 <uarte_instance_init.constprop.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    3fc6:	1d31      	adds	r1, r6, #4
    3fc8:	4638      	mov	r0, r7
    3fca:	f7ff ff2d 	bl	3e28 <uarte_nrfx_configure>
	if (err) {
    3fce:	4605      	mov	r5, r0
    3fd0:	2800      	cmp	r0, #0
    3fd2:	d146      	bne.n	4062 <uarte_instance_init.constprop.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3fd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3fd8:	0799      	lsls	r1, r3, #30
    3fda:	d519      	bpl.n	4010 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3fdc:	f106 0016 	add.w	r0, r6, #22
    3fe0:	f001 f876 	bl	50d0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3fe4:	4b22      	ldr	r3, [pc, #136]	; (4070 <uarte_instance_init.constprop.0+0xe4>)
    3fe6:	4298      	cmp	r0, r3
    3fe8:	d13f      	bne.n	406a <uarte_instance_init.constprop.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3fea:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3fec:	00c3      	lsls	r3, r0, #3
    3fee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ff2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3ff6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3ffa:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3ffe:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4002:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    4006:	4a1b      	ldr	r2, [pc, #108]	; (4074 <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4008:	2301      	movs	r3, #1
    400a:	4083      	lsls	r3, r0
    400c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4010:	2308      	movs	r3, #8
    4012:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    4016:	f898 3008 	ldrb.w	r3, [r8, #8]
    401a:	b95b      	cbnz	r3, 4034 <uarte_instance_init.constprop.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    401c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4020:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4024:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4028:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    402c:	2301      	movs	r3, #1
    402e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4032:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4034:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4038:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    403a:	bf5c      	itt	pl
    403c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4040:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4044:	06db      	lsls	r3, r3, #27
    4046:	bf44      	itt	mi
    4048:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    404c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4050:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    4052:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4054:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4058:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    405c:	2301      	movs	r3, #1
    405e:	60a3      	str	r3, [r4, #8]
    4060:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4062:	4628      	mov	r0, r5
    4064:	b003      	add	sp, #12
    4066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    406a:	f06f 0504 	mvn.w	r5, #4
    406e:	e7f8      	b.n	4062 <uarte_instance_init.constprop.0+0xd6>
    4070:	0bad0000 	.word	0x0bad0000
    4074:	4001f000 	.word	0x4001f000

00004078 <uarte_nrfx_poll_out>:
{
    4078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    407a:	6906      	ldr	r6, [r0, #16]
{
    407c:	4605      	mov	r5, r0
    407e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4080:	f004 fcf8 	bl	8a74 <k_is_in_isr>
    4084:	b910      	cbnz	r0, 408c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4086:	4b20      	ldr	r3, [pc, #128]	; (4108 <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
    4088:	781b      	ldrb	r3, [r3, #0]
    408a:	b983      	cbnz	r3, 40ae <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    408c:	f04f 0320 	mov.w	r3, #32
    4090:	f3ef 8411 	mrs	r4, BASEPRI
    4094:	f383 8812 	msr	BASEPRI_MAX, r3
    4098:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    409c:	6868      	ldr	r0, [r5, #4]
    409e:	f004 fa2a 	bl	84f6 <is_tx_ready.isra.0>
    40a2:	bb28      	cbnz	r0, 40f0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    40a4:	f384 8811 	msr	BASEPRI, r4
    40a8:	f3bf 8f6f 	isb	sy
}
    40ac:	e7ee      	b.n	408c <uarte_nrfx_poll_out+0x14>
{
    40ae:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    40b0:	6868      	ldr	r0, [r5, #4]
    40b2:	f004 fa20 	bl	84f6 <is_tx_ready.isra.0>
    40b6:	b970      	cbnz	r0, 40d6 <uarte_nrfx_poll_out+0x5e>
    40b8:	2001      	movs	r0, #1
    40ba:	f004 fbc0 	bl	883e <nrfx_busy_wait>
    40be:	3c01      	subs	r4, #1
    40c0:	d1f6      	bne.n	40b0 <uarte_nrfx_poll_out+0x38>
    40c2:	2100      	movs	r1, #0
    40c4:	2021      	movs	r0, #33	; 0x21
    40c6:	f001 fdfd 	bl	5cc4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    40ca:	e7f0      	b.n	40ae <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    40cc:	f384 8811 	msr	BASEPRI, r4
    40d0:	f3bf 8f6f 	isb	sy
}
    40d4:	e7f5      	b.n	40c2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    40d6:	f04f 0320 	mov.w	r3, #32
    40da:	f3ef 8411 	mrs	r4, BASEPRI
    40de:	f383 8812 	msr	BASEPRI_MAX, r3
    40e2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    40e6:	6868      	ldr	r0, [r5, #4]
    40e8:	f004 fa05 	bl	84f6 <is_tx_ready.isra.0>
    40ec:	2800      	cmp	r0, #0
    40ee:	d0ed      	beq.n	40cc <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    40f0:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    40f2:	2201      	movs	r2, #1
	data->char_out = c;
    40f4:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    40f8:	6868      	ldr	r0, [r5, #4]
    40fa:	f004 f9e1 	bl	84c0 <tx_start.isra.0>
	__asm__ volatile(
    40fe:	f384 8811 	msr	BASEPRI, r4
    4102:	f3bf 8f6f 	isb	sy
}
    4106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4108:	200014f9 	.word	0x200014f9

0000410c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    410c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    410e:	2301      	movs	r3, #1
    4110:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4112:	4a11      	ldr	r2, [pc, #68]	; (4158 <compare_int_lock+0x4c>)
    4114:	f3bf 8f5b 	dmb	ish
    4118:	43dc      	mvns	r4, r3
    411a:	e852 1f00 	ldrex	r1, [r2]
    411e:	ea01 0c04 	and.w	ip, r1, r4
    4122:	e842 ce00 	strex	lr, ip, [r2]
    4126:	f1be 0f00 	cmp.w	lr, #0
    412a:	d1f6      	bne.n	411a <compare_int_lock+0xe>
    412c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4130:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4134:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4138:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    413c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4140:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4144:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4148:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    414c:	420b      	tst	r3, r1
}
    414e:	bf14      	ite	ne
    4150:	2001      	movne	r0, #1
    4152:	2000      	moveq	r0, #0
    4154:	bd10      	pop	{r4, pc}
    4156:	bf00      	nop
    4158:	20000dd0 	.word	0x20000dd0

0000415c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    415c:	4919      	ldr	r1, [pc, #100]	; (41c4 <sys_clock_timeout_handler+0x68>)
{
    415e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4160:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4162:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4166:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4168:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    416c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4170:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4172:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4176:	d222      	bcs.n	41be <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4178:	4b13      	ldr	r3, [pc, #76]	; (41c8 <sys_clock_timeout_handler+0x6c>)
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	0a1a      	lsrs	r2, r3, #8
    417e:	061b      	lsls	r3, r3, #24
    4180:	195e      	adds	r6, r3, r5
    4182:	4b12      	ldr	r3, [pc, #72]	; (41cc <sys_clock_timeout_handler+0x70>)
    4184:	f142 0700 	adc.w	r7, r2, #0
    4188:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    418c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    418e:	f001 fee7 	bl	5f60 <sys_clock_announce>
    return p_reg->CC[ch];
    4192:	00a3      	lsls	r3, r4, #2
    4194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4198:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    419c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    41a0:	42aa      	cmp	r2, r5
    41a2:	d10b      	bne.n	41bc <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    41a4:	b91e      	cbnz	r6, 41ae <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    41a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    41aa:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    41ae:	4b08      	ldr	r3, [pc, #32]	; (41d0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    41b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    41b4:	fa00 f404 	lsl.w	r4, r0, r4
    41b8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    41bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    41be:	2600      	movs	r6, #0
    41c0:	e7e5      	b.n	418e <sys_clock_timeout_handler+0x32>
    41c2:	bf00      	nop
    41c4:	20000628 	.word	0x20000628
    41c8:	20000dd4 	.word	0x20000dd4
    41cc:	20000610 	.word	0x20000610
    41d0:	40011000 	.word	0x40011000

000041d4 <compare_int_unlock>:
	if (key) {
    41d4:	b319      	cbz	r1, 421e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    41d6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    41da:	2301      	movs	r3, #1
    41dc:	4a10      	ldr	r2, [pc, #64]	; (4220 <compare_int_unlock+0x4c>)
    41de:	4083      	lsls	r3, r0
    41e0:	e852 1f00 	ldrex	r1, [r2]
    41e4:	4319      	orrs	r1, r3
    41e6:	e842 1c00 	strex	ip, r1, [r2]
    41ea:	f1bc 0f00 	cmp.w	ip, #0
    41ee:	d1f7      	bne.n	41e0 <compare_int_unlock+0xc>
    41f0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    41f4:	4a0b      	ldr	r2, [pc, #44]	; (4224 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    41f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    41fa:	4083      	lsls	r3, r0
    41fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4200:	4b09      	ldr	r3, [pc, #36]	; (4228 <compare_int_unlock+0x54>)
    4202:	f3bf 8f5b 	dmb	ish
    4206:	681b      	ldr	r3, [r3, #0]
    4208:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    420c:	fa23 f000 	lsr.w	r0, r3, r0
    4210:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4212:	bf42      	ittt	mi
    4214:	4b05      	ldrmi	r3, [pc, #20]	; (422c <compare_int_unlock+0x58>)
    4216:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    421a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    421e:	4770      	bx	lr
    4220:	20000dd0 	.word	0x20000dd0
    4224:	40011000 	.word	0x40011000
    4228:	20000dcc 	.word	0x20000dcc
    422c:	e000e100 	.word	0xe000e100

00004230 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4230:	4b0d      	ldr	r3, [pc, #52]	; (4268 <z_nrf_rtc_timer_read+0x38>)
    4232:	6818      	ldr	r0, [r3, #0]
    4234:	0a01      	lsrs	r1, r0, #8
    4236:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4238:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    423c:	4b0b      	ldr	r3, [pc, #44]	; (426c <z_nrf_rtc_timer_read+0x3c>)
    423e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4242:	1818      	adds	r0, r3, r0
    4244:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    424c:	d20a      	bcs.n	4264 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    424e:	4b08      	ldr	r3, [pc, #32]	; (4270 <z_nrf_rtc_timer_read+0x40>)
    4250:	e9d3 2300 	ldrd	r2, r3, [r3]
    4254:	4290      	cmp	r0, r2
    4256:	eb71 0303 	sbcs.w	r3, r1, r3
    425a:	d203      	bcs.n	4264 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    425c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4260:	f141 0100 	adc.w	r1, r1, #0
}
    4264:	4770      	bx	lr
    4266:	bf00      	nop
    4268:	20000dd4 	.word	0x20000dd4
    426c:	40011000 	.word	0x40011000
    4270:	20000610 	.word	0x20000610

00004274 <compare_set>:
{
    4274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4278:	ed2d 8b02 	vpush	{d8}
    427c:	b085      	sub	sp, #20
    427e:	4616      	mov	r6, r2
    4280:	4698      	mov	r8, r3
    4282:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4284:	f7ff ff42 	bl	410c <compare_int_lock>
    4288:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    428c:	f7ff ffd0 	bl	4230 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4290:	42b0      	cmp	r0, r6
    4292:	eb71 0308 	sbcs.w	r3, r1, r8
    4296:	d27b      	bcs.n	4390 <compare_set+0x11c>
		if (target_time - curr_time > COUNTER_SPAN) {
    4298:	4b47      	ldr	r3, [pc, #284]	; (43b8 <compare_set+0x144>)
    429a:	1a30      	subs	r0, r6, r0
    429c:	eb68 0101 	sbc.w	r1, r8, r1
    42a0:	4298      	cmp	r0, r3
    42a2:	f171 0300 	sbcs.w	r3, r1, #0
    42a6:	f080 8084 	bcs.w	43b2 <compare_set+0x13e>
		if (target_time != cc_data[chan].target_time) {
    42aa:	4b44      	ldr	r3, [pc, #272]	; (43bc <compare_set+0x148>)
    42ac:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    42b0:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    42b4:	45d8      	cmp	r8, fp
    42b6:	bf08      	it	eq
    42b8:	4556      	cmpeq	r6, sl
    42ba:	d051      	beq.n	4360 <compare_set+0xec>
    42bc:	ea4f 0985 	mov.w	r9, r5, lsl #2
    42c0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    42c4:	f105 0750 	add.w	r7, r5, #80	; 0x50
    42c8:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    42cc:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    42ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    42d2:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    42d6:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    42d8:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    42dc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    42e0:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    42e2:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    42e6:	4b36      	ldr	r3, [pc, #216]	; (43c0 <compare_set+0x14c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    42e8:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    42ec:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    42ee:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    42f2:	1a40      	subs	r0, r0, r1
    42f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    42f8:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    42fc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    42fe:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    4302:	d107      	bne.n	4314 <compare_set+0xa0>
    4304:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    4308:	2013      	movs	r0, #19
    430a:	f004 fcb6 	bl	8c7a <z_impl_k_busy_wait>
    430e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    4312:	4b2b      	ldr	r3, [pc, #172]	; (43c0 <compare_set+0x14c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4314:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    4318:	eba4 000c 	sub.w	r0, r4, ip
    431c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4320:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4324:	bf88      	it	hi
    4326:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4328:	2000      	movs	r0, #0
    432a:	6038      	str	r0, [r7, #0]
    432c:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    432e:	9801      	ldr	r0, [sp, #4]
    4330:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4334:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4338:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    433c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4340:	4281      	cmp	r1, r0
    4342:	d006      	beq.n	4352 <compare_set+0xde>
	return (a - b) & COUNTER_MAX;
    4344:	1a20      	subs	r0, r4, r0
    4346:	3802      	subs	r0, #2
    4348:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    434c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4350:	d81c      	bhi.n	438c <compare_set+0x118>
	return (a - b) & COUNTER_MAX;
    4352:	1aa4      	subs	r4, r4, r2
    4354:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4358:	eb14 0a06 	adds.w	sl, r4, r6
    435c:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    4360:	4916      	ldr	r1, [pc, #88]	; (43bc <compare_set+0x148>)
	cc_data[chan].callback = handler;
    4362:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
    4364:	012b      	lsls	r3, r5, #4
    4366:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    436a:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    436e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4370:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4372:	6053      	str	r3, [r2, #4]
	return ret;
    4374:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    4376:	4628      	mov	r0, r5
    4378:	ee18 1a10 	vmov	r1, s16
    437c:	f7ff ff2a 	bl	41d4 <compare_int_unlock>
}
    4380:	4620      	mov	r0, r4
    4382:	b005      	add	sp, #20
    4384:	ecbd 8b02 	vpop	{d8}
    4388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    438c:	4620      	mov	r0, r4
    438e:	e7ae      	b.n	42ee <compare_set+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    4390:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4392:	4a0c      	ldr	r2, [pc, #48]	; (43c4 <compare_set+0x150>)
    4394:	f3bf 8f5b 	dmb	ish
    4398:	40ab      	lsls	r3, r5
    439a:	e852 1f00 	ldrex	r1, [r2]
    439e:	4319      	orrs	r1, r3
    43a0:	e842 1000 	strex	r0, r1, [r2]
    43a4:	2800      	cmp	r0, #0
    43a6:	d1f8      	bne.n	439a <compare_set+0x126>
    43a8:	f3bf 8f5b 	dmb	ish
    43ac:	46b2      	mov	sl, r6
    43ae:	46c3      	mov	fp, r8
    43b0:	e7d6      	b.n	4360 <compare_set+0xec>
			return -EINVAL;
    43b2:	f06f 0415 	mvn.w	r4, #21
    43b6:	e7de      	b.n	4376 <compare_set+0x102>
    43b8:	01000001 	.word	0x01000001
    43bc:	20000618 	.word	0x20000618
    43c0:	40011000 	.word	0x40011000
    43c4:	20000dcc 	.word	0x20000dcc

000043c8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    43c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    43ca:	4b19      	ldr	r3, [pc, #100]	; (4430 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    43cc:	4d19      	ldr	r5, [pc, #100]	; (4434 <sys_clock_driver_init+0x6c>)
    43ce:	2400      	movs	r4, #0
    43d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    43d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    43d8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    43dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    43e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    43e4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43e8:	4b13      	ldr	r3, [pc, #76]	; (4438 <sys_clock_driver_init+0x70>)
    43ea:	2602      	movs	r6, #2
    43ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    43f0:	2101      	movs	r1, #1
    43f2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    43f6:	2011      	movs	r0, #17
    43f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    43fc:	4622      	mov	r2, r4
    43fe:	f7fe fd9b 	bl	2f38 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4402:	2011      	movs	r0, #17
    4404:	f7fe fd7a 	bl	2efc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4408:	4a0c      	ldr	r2, [pc, #48]	; (443c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    440a:	2301      	movs	r3, #1
    440c:	60ab      	str	r3, [r5, #8]
    440e:	602b      	str	r3, [r5, #0]
    4410:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4412:	4b0b      	ldr	r3, [pc, #44]	; (4440 <sys_clock_driver_init+0x78>)
    4414:	4a0b      	ldr	r2, [pc, #44]	; (4444 <sys_clock_driver_init+0x7c>)
    4416:	9300      	str	r3, [sp, #0]
    4418:	9401      	str	r4, [sp, #4]
    441a:	2300      	movs	r3, #0
    441c:	4620      	mov	r0, r4
    441e:	f7ff ff29 	bl	4274 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4422:	4630      	mov	r0, r6
    4424:	f7ff fb02 	bl	3a2c <z_nrf_clock_control_lf_on>

	return 0;
}
    4428:	4620      	mov	r0, r4
    442a:	b002      	add	sp, #8
    442c:	bd70      	pop	{r4, r5, r6, pc}
    442e:	bf00      	nop
    4430:	20000618 	.word	0x20000618
    4434:	40011000 	.word	0x40011000
    4438:	e000e100 	.word	0xe000e100
    443c:	20000dd0 	.word	0x20000dd0
    4440:	0000415d 	.word	0x0000415d
    4444:	007fffff 	.word	0x007fffff

00004448 <rtc_nrf_isr>:
{
    4448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    444c:	4c36      	ldr	r4, [pc, #216]	; (4528 <rtc_nrf_isr+0xe0>)
    444e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4452:	079a      	lsls	r2, r3, #30
    4454:	d50b      	bpl.n	446e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4456:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    445a:	b143      	cbz	r3, 446e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    445c:	4a33      	ldr	r2, [pc, #204]	; (452c <rtc_nrf_isr+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    445e:	2300      	movs	r3, #0
    4460:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4464:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4468:	6813      	ldr	r3, [r2, #0]
    446a:	3301      	adds	r3, #1
    446c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    446e:	f04f 0320 	mov.w	r3, #32
    4472:	f3ef 8211 	mrs	r2, BASEPRI
    4476:	f383 8812 	msr	BASEPRI_MAX, r3
    447a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    447e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4482:	03db      	lsls	r3, r3, #15
    4484:	d512      	bpl.n	44ac <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4486:	f3bf 8f5b 	dmb	ish
    448a:	4b29      	ldr	r3, [pc, #164]	; (4530 <rtc_nrf_isr+0xe8>)
    448c:	e853 1f00 	ldrex	r1, [r3]
    4490:	f021 0001 	bic.w	r0, r1, #1
    4494:	e843 0600 	strex	r6, r0, [r3]
    4498:	2e00      	cmp	r6, #0
    449a:	d1f7      	bne.n	448c <rtc_nrf_isr+0x44>
    449c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    44a0:	2900      	cmp	r1, #0
    44a2:	d139      	bne.n	4518 <rtc_nrf_isr+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    44a4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    44a8:	2b00      	cmp	r3, #0
    44aa:	d135      	bne.n	4518 <rtc_nrf_isr+0xd0>
{
    44ac:	2300      	movs	r3, #0
	__asm__ volatile(
    44ae:	f382 8811 	msr	BASEPRI, r2
    44b2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    44b6:	b363      	cbz	r3, 4512 <rtc_nrf_isr+0xca>
		curr_time = z_nrf_rtc_timer_read();
    44b8:	f7ff feba 	bl	4230 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    44bc:	f04f 0320 	mov.w	r3, #32
    44c0:	f3ef 8c11 	mrs	ip, BASEPRI
    44c4:	f383 8812 	msr	BASEPRI_MAX, r3
    44c8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    44cc:	4b19      	ldr	r3, [pc, #100]	; (4534 <rtc_nrf_isr+0xec>)
    44ce:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    44d2:	42b0      	cmp	r0, r6
    44d4:	eb71 0207 	sbcs.w	r2, r1, r7
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    44d8:	bf28      	it	cs
    44da:	f04f 38ff 	movcs.w	r8, #4294967295	; 0xffffffff
    44de:	f04f 0200 	mov.w	r2, #0
    44e2:	bf21      	itttt	cs
    44e4:	f04f 39ff 	movcs.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    44e8:	e9d3 1500 	ldrdcs	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    44ec:	e9c3 8902 	strdcs	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    44f0:	601a      	strcs	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    44f2:	bf26      	itte	cs
    44f4:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
    44f8:	f8c4 3348 	strcs.w	r3, [r4, #840]	; 0x348
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    44fc:	4611      	movcc	r1, r2
	__asm__ volatile(
    44fe:	f38c 8811 	msr	BASEPRI, ip
    4502:	f3bf 8f6f 	isb	sy
		if (handler) {
    4506:	b121      	cbz	r1, 4512 <rtc_nrf_isr+0xca>
			handler(chan, expire_time, user_context);
    4508:	9500      	str	r5, [sp, #0]
    450a:	4632      	mov	r2, r6
    450c:	463b      	mov	r3, r7
    450e:	2000      	movs	r0, #0
    4510:	4788      	blx	r1
}
    4512:	b003      	add	sp, #12
    4514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4518:	2300      	movs	r3, #0
    451a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    451e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4522:	2301      	movs	r3, #1
}
    4524:	e7c3      	b.n	44ae <rtc_nrf_isr+0x66>
    4526:	bf00      	nop
    4528:	40011000 	.word	0x40011000
    452c:	20000dd4 	.word	0x20000dd4
    4530:	20000dcc 	.word	0x20000dcc
    4534:	20000618 	.word	0x20000618

00004538 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4538:	1c43      	adds	r3, r0, #1
{
    453a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    453c:	d021      	beq.n	4582 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    453e:	2801      	cmp	r0, #1
    4540:	dd21      	ble.n	4586 <sys_clock_set_timeout+0x4e>
    4542:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4546:	da20      	bge.n	458a <sys_clock_set_timeout+0x52>
    4548:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    454a:	f7ff fe71 	bl	4230 <z_nrf_rtc_timer_read>
    454e:	4b10      	ldr	r3, [pc, #64]	; (4590 <sys_clock_set_timeout+0x58>)
    4550:	e9d3 1300 	ldrd	r1, r3, [r3]
    4554:	1a40      	subs	r0, r0, r1
		ticks = 0;
    4556:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    455a:	bf28      	it	cs
    455c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    455e:	3001      	adds	r0, #1
    4560:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    4562:	480c      	ldr	r0, [pc, #48]	; (4594 <sys_clock_set_timeout+0x5c>)
    4564:	4282      	cmp	r2, r0
    4566:	bf28      	it	cs
    4568:	4602      	movcs	r2, r0
    456a:	1852      	adds	r2, r2, r1
    456c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4570:	4909      	ldr	r1, [pc, #36]	; (4598 <sys_clock_set_timeout+0x60>)
    4572:	9001      	str	r0, [sp, #4]
    4574:	9100      	str	r1, [sp, #0]
    4576:	f143 0300 	adc.w	r3, r3, #0
    457a:	f7ff fe7b 	bl	4274 <compare_set>
}
    457e:	b002      	add	sp, #8
    4580:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4582:	4804      	ldr	r0, [pc, #16]	; (4594 <sys_clock_set_timeout+0x5c>)
    4584:	e7e0      	b.n	4548 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4586:	2400      	movs	r4, #0
    4588:	e7df      	b.n	454a <sys_clock_set_timeout+0x12>
    458a:	4c02      	ldr	r4, [pc, #8]	; (4594 <sys_clock_set_timeout+0x5c>)
    458c:	e7dd      	b.n	454a <sys_clock_set_timeout+0x12>
    458e:	bf00      	nop
    4590:	20000628 	.word	0x20000628
    4594:	007fffff 	.word	0x007fffff
    4598:	0000415d 	.word	0x0000415d

0000459c <sys_clock_elapsed>:
{
    459c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    459e:	f7ff fe47 	bl	4230 <z_nrf_rtc_timer_read>
    45a2:	4b02      	ldr	r3, [pc, #8]	; (45ac <sys_clock_elapsed+0x10>)
    45a4:	681b      	ldr	r3, [r3, #0]
}
    45a6:	1ac0      	subs	r0, r0, r3
    45a8:	bd08      	pop	{r3, pc}
    45aa:	bf00      	nop
    45ac:	20000628 	.word	0x20000628

000045b0 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    45b0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    45b4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    45b6:	2801      	cmp	r0, #1
    45b8:	4b04      	ldr	r3, [pc, #16]	; (45cc <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    45ba:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    45be:	bf18      	it	ne
    45c0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    45c4:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    45c6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    45ca:	4770      	bx	lr
    45cc:	50000300 	.word	0x50000300

000045d0 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    45d0:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    45d4:	2b00      	cmp	r3, #0
{
    45d6:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    45d8:	bf1c      	itt	ne
    45da:	2100      	movne	r1, #0
    45dc:	2201      	movne	r2, #1
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    45de:	f3c0 1581 	ubfx	r5, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    45e2:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
    45e6:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    45ea:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    45ee:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
        case 1: return NRF_P1;
    45f2:	4b06      	ldr	r3, [pc, #24]	; (460c <nrf_pin_configure+0x3c>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    45f4:	ea40 0001 	orr.w	r0, r0, r1
        case 1: return NRF_P1;
    45f8:	bf08      	it	eq
    45fa:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    45fe:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4602:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    4606:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    460a:	bd30      	pop	{r4, r5, pc}
    460c:	50000300 	.word	0x50000300

00004610 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    4610:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    4614:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    4616:	2801      	cmp	r0, #1
    4618:	4b04      	ldr	r3, [pc, #16]	; (462c <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    461a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    461e:	bf18      	it	ne
    4620:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4624:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    4626:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    462a:	4770      	bx	lr
    462c:	50000300 	.word	0x50000300

00004630 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4630:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4634:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4638:	2a08      	cmp	r2, #8
    463a:	d106      	bne.n	464a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    463c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    4640:	2b05      	cmp	r3, #5
    4642:	d802      	bhi.n	464a <nrf52_errata_103+0x1a>
    4644:	4a02      	ldr	r2, [pc, #8]	; (4650 <nrf52_errata_103+0x20>)
    4646:	5cd0      	ldrb	r0, [r2, r3]
    4648:	4770      	bx	lr
        return false;
    464a:	2000      	movs	r0, #0
}
    464c:	4770      	bx	lr
    464e:	bf00      	nop
    4650:	0000a93c 	.word	0x0000a93c

00004654 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4654:	4a02      	ldr	r2, [pc, #8]	; (4660 <nvmc_wait+0xc>)
    4656:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    465a:	2b00      	cmp	r3, #0
    465c:	d0fb      	beq.n	4656 <nvmc_wait+0x2>
}
    465e:	4770      	bx	lr
    4660:	4001e000 	.word	0x4001e000

00004664 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4664:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4666:	f004 f8e0 	bl	882a <nrf52_errata_136>
    466a:	b140      	cbz	r0, 467e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    466c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4670:	2200      	movs	r2, #0
    4672:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4676:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    467a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    467e:	f004 f8d4 	bl	882a <nrf52_errata_136>
    4682:	2800      	cmp	r0, #0
    4684:	d046      	beq.n	4714 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    468a:	4b65      	ldr	r3, [pc, #404]	; (4820 <SystemInit+0x1bc>)
    468c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4690:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4694:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4698:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    469c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    46a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    46a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    46a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    46ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    46b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    46b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    46b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    46bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    46c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    46c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    46c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    46cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    46d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    46d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    46d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    46dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    46e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    46e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    46e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    46ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    46f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    46f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    46f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    46fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4700:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4704:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4708:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    470c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4710:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4714:	f7ff ff8c 	bl	4630 <nrf52_errata_103>
    4718:	b118      	cbz	r0, 4722 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    471a:	4b42      	ldr	r3, [pc, #264]	; (4824 <SystemInit+0x1c0>)
    471c:	4a42      	ldr	r2, [pc, #264]	; (4828 <SystemInit+0x1c4>)
    471e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4722:	f7ff ff85 	bl	4630 <nrf52_errata_103>
    4726:	b118      	cbz	r0, 4730 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4728:	4b40      	ldr	r3, [pc, #256]	; (482c <SystemInit+0x1c8>)
    472a:	22fb      	movs	r2, #251	; 0xfb
    472c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4730:	f7ff ff7e 	bl	4630 <nrf52_errata_103>
    4734:	b170      	cbz	r0, 4754 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4736:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    473a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    473e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    4742:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4746:	f022 020f 	bic.w	r2, r2, #15
    474a:	f003 030f 	and.w	r3, r3, #15
    474e:	4313      	orrs	r3, r2
    4750:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4754:	f7ff ff6c 	bl	4630 <nrf52_errata_103>
    4758:	b120      	cbz	r0, 4764 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    475a:	4b35      	ldr	r3, [pc, #212]	; (4830 <SystemInit+0x1cc>)
    475c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4760:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4764:	f004 f861 	bl	882a <nrf52_errata_136>
    4768:	b148      	cbz	r0, 477e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    476a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    476e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4772:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4774:	bf44      	itt	mi
    4776:	f06f 0201 	mvnmi.w	r2, #1
    477a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    477e:	4a2d      	ldr	r2, [pc, #180]	; (4834 <SystemInit+0x1d0>)
    4780:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    4784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    4788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    478c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4790:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4798:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    479c:	2a08      	cmp	r2, #8
    479e:	d10e      	bne.n	47be <SystemInit+0x15a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    47a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    47a4:	2b05      	cmp	r3, #5
    47a6:	d802      	bhi.n	47ae <SystemInit+0x14a>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    47a8:	4a23      	ldr	r2, [pc, #140]	; (4838 <SystemInit+0x1d4>)
    47aa:	5cd3      	ldrb	r3, [r2, r3]
    47ac:	b13b      	cbz	r3, 47be <SystemInit+0x15a>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    47ae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    47b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    47b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47ba:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    47be:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    47c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    47c6:	2a00      	cmp	r2, #0
    47c8:	db03      	blt.n	47d2 <SystemInit+0x16e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    47ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    47ce:	2b00      	cmp	r3, #0
    47d0:	da22      	bge.n	4818 <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    47d2:	491a      	ldr	r1, [pc, #104]	; (483c <SystemInit+0x1d8>)
    47d4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    47d6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    47da:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    47de:	2412      	movs	r4, #18
    nvmc_wait();
    47e0:	f7ff ff38 	bl	4654 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    47e4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    47e8:	f7ff ff34 	bl	4654 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    47ec:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    47f0:	f7ff ff30 	bl	4654 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    47f4:	2300      	movs	r3, #0
    47f6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    47fa:	f7ff ff2b 	bl	4654 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    47fe:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4802:	490c      	ldr	r1, [pc, #48]	; (4834 <SystemInit+0x1d0>)
    4804:	4b0e      	ldr	r3, [pc, #56]	; (4840 <SystemInit+0x1dc>)
    4806:	68ca      	ldr	r2, [r1, #12]
    4808:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    480c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    480e:	60cb      	str	r3, [r1, #12]
    4810:	f3bf 8f4f 	dsb	sy
    __NOP();
    4814:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4816:	e7fd      	b.n	4814 <SystemInit+0x1b0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4818:	4b0a      	ldr	r3, [pc, #40]	; (4844 <SystemInit+0x1e0>)
    481a:	4a0b      	ldr	r2, [pc, #44]	; (4848 <SystemInit+0x1e4>)
    481c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    481e:	bd10      	pop	{r4, pc}
    4820:	4000c000 	.word	0x4000c000
    4824:	40005000 	.word	0x40005000
    4828:	00038148 	.word	0x00038148
    482c:	4000f000 	.word	0x4000f000
    4830:	40029000 	.word	0x40029000
    4834:	e000ed00 	.word	0xe000ed00
    4838:	0000a936 	.word	0x0000a936
    483c:	4001e000 	.word	0x4001e000
    4840:	05fa0004 	.word	0x05fa0004
    4844:	200002b0 	.word	0x200002b0
    4848:	03d09000 	.word	0x03d09000

0000484c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    484c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    484e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4850:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4852:	fab2 f382 	clz	r3, r2
    4856:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    485a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    485c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    485e:	d014      	beq.n	488a <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4860:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4864:	fa05 f303 	lsl.w	r3, r5, r3
    4868:	ea22 0303 	bic.w	r3, r2, r3
    486c:	e850 6f00 	ldrex	r6, [r0]
    4870:	4296      	cmp	r6, r2
    4872:	d104      	bne.n	487e <nrfx_flag32_alloc+0x32>
    4874:	e840 3c00 	strex	ip, r3, [r0]
    4878:	f1bc 0f00 	cmp.w	ip, #0
    487c:	d1f6      	bne.n	486c <nrfx_flag32_alloc+0x20>
    487e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4882:	d1e5      	bne.n	4850 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    4884:	4802      	ldr	r0, [pc, #8]	; (4890 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    4886:	700c      	strb	r4, [r1, #0]
}
    4888:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    488a:	4802      	ldr	r0, [pc, #8]	; (4894 <nrfx_flag32_alloc+0x48>)
    488c:	e7fc      	b.n	4888 <nrfx_flag32_alloc+0x3c>
    488e:	bf00      	nop
    4890:	0bad0000 	.word	0x0bad0000
    4894:	0bad0002 	.word	0x0bad0002

00004898 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4898:	6803      	ldr	r3, [r0, #0]
    489a:	40cb      	lsrs	r3, r1
    489c:	07db      	lsls	r3, r3, #31
{
    489e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    48a0:	d415      	bmi.n	48ce <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    48a2:	2301      	movs	r3, #1
    48a4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    48a8:	6803      	ldr	r3, [r0, #0]
    48aa:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    48ae:	ea41 0203 	orr.w	r2, r1, r3
    48b2:	e850 4f00 	ldrex	r4, [r0]
    48b6:	429c      	cmp	r4, r3
    48b8:	d104      	bne.n	48c4 <nrfx_flag32_free+0x2c>
    48ba:	e840 2c00 	strex	ip, r2, [r0]
    48be:	f1bc 0f00 	cmp.w	ip, #0
    48c2:	d1f6      	bne.n	48b2 <nrfx_flag32_free+0x1a>
    48c4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    48c8:	d1ee      	bne.n	48a8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    48ca:	4802      	ldr	r0, [pc, #8]	; (48d4 <nrfx_flag32_free+0x3c>)
}
    48cc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    48ce:	4802      	ldr	r0, [pc, #8]	; (48d8 <nrfx_flag32_free+0x40>)
    48d0:	e7fc      	b.n	48cc <nrfx_flag32_free+0x34>
    48d2:	bf00      	nop
    48d4:	0bad0000 	.word	0x0bad0000
    48d8:	0bad0004 	.word	0x0bad0004

000048dc <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    48dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    48de:	4604      	mov	r4, r0
    48e0:	b118      	cbz	r0, 48ea <clock_stop+0xe>
    48e2:	2801      	cmp	r0, #1
    48e4:	d029      	beq.n	493a <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    48e6:	b003      	add	sp, #12
    48e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    48ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48ee:	2202      	movs	r2, #2
    48f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48f4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    48f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48fc:	2201      	movs	r2, #1
    48fe:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4900:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4902:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4904:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4908:	bf14      	ite	ne
    490a:	2500      	movne	r5, #0
    490c:	f10d 0507 	addeq.w	r5, sp, #7
    4910:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4914:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4918:	b1d4      	cbz	r4, 4950 <clock_stop+0x74>
    491a:	2c01      	cmp	r4, #1
    491c:	d1e3      	bne.n	48e6 <clock_stop+0xa>
            if (p_clk_src != NULL)
    491e:	b125      	cbz	r5, 492a <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4920:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4924:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4928:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    492a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    492e:	03db      	lsls	r3, r3, #15
    4930:	d418      	bmi.n	4964 <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    4932:	4b13      	ldr	r3, [pc, #76]	; (4980 <clock_stop+0xa4>)
    4934:	2200      	movs	r2, #0
    4936:	715a      	strb	r2, [r3, #5]
    4938:	e7d5      	b.n	48e6 <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    493a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    493e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4940:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4944:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4948:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    494c:	6058      	str	r0, [r3, #4]
}
    494e:	e7d7      	b.n	4900 <clock_stop+0x24>
            if (p_clk_src != NULL)
    4950:	b125      	cbz	r5, 495c <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4952:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4956:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    495a:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    495c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4960:	03da      	lsls	r2, r3, #15
    4962:	d5c0      	bpl.n	48e6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4964:	b92d      	cbnz	r5, 4972 <clock_stop+0x96>
    4966:	2001      	movs	r0, #1
    4968:	f003 ff69 	bl	883e <nrfx_busy_wait>
    496c:	3f01      	subs	r7, #1
    496e:	d1d3      	bne.n	4918 <clock_stop+0x3c>
    4970:	e003      	b.n	497a <clock_stop+0x9e>
    4972:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4976:	2b01      	cmp	r3, #1
    4978:	d0f5      	beq.n	4966 <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    497a:	2c01      	cmp	r4, #1
    497c:	d0d9      	beq.n	4932 <clock_stop+0x56>
    497e:	e7b2      	b.n	48e6 <clock_stop+0xa>
    4980:	20000dd8 	.word	0x20000dd8

00004984 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4984:	4b04      	ldr	r3, [pc, #16]	; (4998 <nrfx_clock_init+0x14>)
    4986:	791a      	ldrb	r2, [r3, #4]
    4988:	b922      	cbnz	r2, 4994 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    498a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    498c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    498e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4990:	4802      	ldr	r0, [pc, #8]	; (499c <nrfx_clock_init+0x18>)
    4992:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4994:	4802      	ldr	r0, [pc, #8]	; (49a0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4996:	4770      	bx	lr
    4998:	20000dd8 	.word	0x20000dd8
    499c:	0bad0000 	.word	0x0bad0000
    49a0:	0bad000c 	.word	0x0bad000c

000049a4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    49a8:	b510      	push	{r4, lr}
    49aa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    49ae:	b16a      	cbz	r2, 49cc <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49b0:	2200      	movs	r2, #0
    49b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    49b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    49ba:	2201      	movs	r2, #1
    49bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    49c0:	4b11      	ldr	r3, [pc, #68]	; (4a08 <nrfx_power_clock_irq_handler+0x64>)
    49c2:	7958      	ldrb	r0, [r3, #5]
    49c4:	b910      	cbnz	r0, 49cc <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    49c6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49d0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    49d4:	b172      	cbz	r2, 49f4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49d6:	2200      	movs	r2, #0
    49d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    49dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    49e0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    49e4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    49e8:	0792      	lsls	r2, r2, #30
    49ea:	d104      	bne.n	49f6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    49ec:	2201      	movs	r2, #1
    49ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49f2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    49f4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    49f6:	2202      	movs	r2, #2
    49f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    49fc:	4b02      	ldr	r3, [pc, #8]	; (4a08 <nrfx_power_clock_irq_handler+0x64>)
}
    49fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a02:	681b      	ldr	r3, [r3, #0]
    4a04:	2001      	movs	r0, #1
    4a06:	4718      	bx	r3
    4a08:	20000dd8 	.word	0x20000dd8

00004a0c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4a0c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4a0e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4a12:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    4a14:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4a16:	6002      	str	r2, [r0, #0]
}
    4a18:	4802      	ldr	r0, [pc, #8]	; (4a24 <nrf_gpio_pin_port_decode+0x18>)
    4a1a:	bf18      	it	ne
    4a1c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4a20:	4770      	bx	lr
    4a22:	bf00      	nop
    4a24:	50000300 	.word	0x50000300

00004a28 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4a28:	4b03      	ldr	r3, [pc, #12]	; (4a38 <pin_in_use_by_te+0x10>)
    4a2a:	3008      	adds	r0, #8
    4a2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4a30:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4a34:	4770      	bx	lr
    4a36:	bf00      	nop
    4a38:	200002b4 	.word	0x200002b4

00004a3c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4a3c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a3e:	f100 0308 	add.w	r3, r0, #8
    4a42:	4c0c      	ldr	r4, [pc, #48]	; (4a74 <call_handler+0x38>)
    4a44:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4a48:	05da      	lsls	r2, r3, #23
{
    4a4a:	4605      	mov	r5, r0
    4a4c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a4e:	d507      	bpl.n	4a60 <call_handler+0x24>
    4a50:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4a54:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4a58:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4a5c:	6852      	ldr	r2, [r2, #4]
    4a5e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4a60:	68a3      	ldr	r3, [r4, #8]
    4a62:	b12b      	cbz	r3, 4a70 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a64:	68e2      	ldr	r2, [r4, #12]
    4a66:	4631      	mov	r1, r6
    4a68:	4628      	mov	r0, r5
    }
}
    4a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a6e:	4718      	bx	r3
}
    4a70:	bd70      	pop	{r4, r5, r6, pc}
    4a72:	bf00      	nop
    4a74:	200002b4 	.word	0x200002b4

00004a78 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a78:	4a13      	ldr	r2, [pc, #76]	; (4ac8 <release_handler+0x50>)
    4a7a:	3008      	adds	r0, #8
{
    4a7c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a7e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4a82:	05d9      	lsls	r1, r3, #23
    4a84:	d51c      	bpl.n	4ac0 <release_handler+0x48>
    4a86:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4a8a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4a8e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4a92:	f102 0410 	add.w	r4, r2, #16
    4a96:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4a98:	f834 3b02 	ldrh.w	r3, [r4], #2
    4a9c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4aa0:	d003      	beq.n	4aaa <release_handler+0x32>
    4aa2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4aa6:	4299      	cmp	r1, r3
    4aa8:	d00a      	beq.n	4ac0 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4aaa:	3001      	adds	r0, #1
    4aac:	2830      	cmp	r0, #48	; 0x30
    4aae:	d1f3      	bne.n	4a98 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4ab0:	2300      	movs	r3, #0
    4ab2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4ab6:	4805      	ldr	r0, [pc, #20]	; (4acc <release_handler+0x54>)
}
    4ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4abc:	f7ff beec 	b.w	4898 <nrfx_flag32_free>
}
    4ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
    4ac4:	4770      	bx	lr
    4ac6:	bf00      	nop
    4ac8:	200002b4 	.word	0x200002b4
    4acc:	20000328 	.word	0x20000328

00004ad0 <pin_handler_trigger_uninit>:
{
    4ad0:	b538      	push	{r3, r4, r5, lr}
    4ad2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4ad4:	f7ff ffa8 	bl	4a28 <pin_in_use_by_te>
    4ad8:	4c09      	ldr	r4, [pc, #36]	; (4b00 <pin_handler_trigger_uninit+0x30>)
    4ada:	f102 0508 	add.w	r5, r2, #8
    4ade:	b140      	cbz	r0, 4af2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ae0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4ae4:	4907      	ldr	r1, [pc, #28]	; (4b04 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4ae6:	0b5b      	lsrs	r3, r3, #13
    4ae8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4aec:	2000      	movs	r0, #0
    4aee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4af2:	4610      	mov	r0, r2
    4af4:	f7ff ffc0 	bl	4a78 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4af8:	2300      	movs	r3, #0
    4afa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4afe:	bd38      	pop	{r3, r4, r5, pc}
    4b00:	200002b4 	.word	0x200002b4
    4b04:	40006000 	.word	0x40006000

00004b08 <nrfx_gpiote_input_configure>:
{
    4b08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4b0c:	4604      	mov	r4, r0
    4b0e:	4617      	mov	r7, r2
    4b10:	461d      	mov	r5, r3
    if (p_input_config)
    4b12:	b321      	cbz	r1, 4b5e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b14:	4e4e      	ldr	r6, [pc, #312]	; (4c50 <nrfx_gpiote_input_configure+0x148>)
    4b16:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4b1a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4b1e:	079b      	lsls	r3, r3, #30
    4b20:	d506      	bpl.n	4b30 <nrfx_gpiote_input_configure+0x28>
    4b22:	f7ff ff81 	bl	4a28 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4b26:	b118      	cbz	r0, 4b30 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    4b28:	484a      	ldr	r0, [pc, #296]	; (4c54 <nrfx_gpiote_input_configure+0x14c>)
}
    4b2a:	b004      	add	sp, #16
    4b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b30:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b32:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b36:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4b3a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b3e:	f10d 020f 	add.w	r2, sp, #15
    4b42:	460b      	mov	r3, r1
    4b44:	4620      	mov	r0, r4
    4b46:	f10d 010e 	add.w	r1, sp, #14
    4b4a:	f003 fec6 	bl	88da <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4b4e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4b52:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4b56:	f043 0301 	orr.w	r3, r3, #1
    4b5a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    4b5e:	b197      	cbz	r7, 4b86 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b60:	4b3b      	ldr	r3, [pc, #236]	; (4c50 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4b62:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4b64:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b66:	f104 0008 	add.w	r0, r4, #8
    4b6a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4b6e:	078f      	lsls	r7, r1, #30
    4b70:	d50c      	bpl.n	4b8c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    4b72:	2a00      	cmp	r2, #0
    4b74:	d1d8      	bne.n	4b28 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4b76:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4b7a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4b7e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    4b82:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    4b86:	bbcd      	cbnz	r5, 4bfc <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    4b88:	4833      	ldr	r0, [pc, #204]	; (4c58 <nrfx_gpiote_input_configure+0x150>)
    4b8a:	e7ce      	b.n	4b2a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4b8c:	f021 0120 	bic.w	r1, r1, #32
    4b90:	04c9      	lsls	r1, r1, #19
    4b92:	0cc9      	lsrs	r1, r1, #19
    4b94:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    4b98:	2a00      	cmp	r2, #0
    4b9a:	d0ec      	beq.n	4b76 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    4b9c:	2e03      	cmp	r6, #3
    4b9e:	d8c3      	bhi.n	4b28 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4ba0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4ba2:	b92e      	cbnz	r6, 4bb0 <nrfx_gpiote_input_configure+0xa8>
    4ba4:	4a2d      	ldr	r2, [pc, #180]	; (4c5c <nrfx_gpiote_input_configure+0x154>)
    4ba6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    4baa:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4bae:	e7e2      	b.n	4b76 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4bb0:	00ba      	lsls	r2, r7, #2
    4bb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4bb6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4bba:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4bbe:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4bc2:	f02c 0c03 	bic.w	ip, ip, #3
    4bc6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4bca:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4bce:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4bd2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4bd6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bda:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4bde:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4be2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4be6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4bea:	ea4c 0c0e 	orr.w	ip, ip, lr
    4bee:	f041 0120 	orr.w	r1, r1, #32
    4bf2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4bf6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4bfa:	e7bc      	b.n	4b76 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4bfc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c00:	4620      	mov	r0, r4
    4c02:	f7ff ff39 	bl	4a78 <release_handler>
    if (!handler)
    4c06:	2e00      	cmp	r6, #0
    4c08:	d0be      	beq.n	4b88 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c0a:	4d11      	ldr	r5, [pc, #68]	; (4c50 <nrfx_gpiote_input_configure+0x148>)
    4c0c:	682b      	ldr	r3, [r5, #0]
    4c0e:	429e      	cmp	r6, r3
    4c10:	d104      	bne.n	4c1c <nrfx_gpiote_input_configure+0x114>
    4c12:	686b      	ldr	r3, [r5, #4]
    4c14:	429f      	cmp	r7, r3
    4c16:	d101      	bne.n	4c1c <nrfx_gpiote_input_configure+0x114>
    4c18:	2200      	movs	r2, #0
    4c1a:	e00a      	b.n	4c32 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4c1c:	4810      	ldr	r0, [pc, #64]	; (4c60 <nrfx_gpiote_input_configure+0x158>)
    4c1e:	f10d 010f 	add.w	r1, sp, #15
    4c22:	f7ff fe13 	bl	484c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4c26:	4b0c      	ldr	r3, [pc, #48]	; (4c58 <nrfx_gpiote_input_configure+0x150>)
    4c28:	4298      	cmp	r0, r3
    4c2a:	f47f af7e 	bne.w	4b2a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    4c2e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4c32:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4c36:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c3a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4c3c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c3e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4c42:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4c4a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4c4e:	e79b      	b.n	4b88 <nrfx_gpiote_input_configure+0x80>
    4c50:	200002b4 	.word	0x200002b4
    4c54:	0bad0004 	.word	0x0bad0004
    4c58:	0bad0000 	.word	0x0bad0000
    4c5c:	40006000 	.word	0x40006000
    4c60:	20000328 	.word	0x20000328

00004c64 <nrfx_gpiote_output_configure>:
{
    4c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c66:	4604      	mov	r4, r0
    4c68:	b085      	sub	sp, #20
    4c6a:	4615      	mov	r5, r2
    if (p_config)
    4c6c:	b319      	cbz	r1, 4cb6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4c6e:	4e33      	ldr	r6, [pc, #204]	; (4d3c <nrfx_gpiote_output_configure+0xd8>)
    4c70:	f100 0708 	add.w	r7, r0, #8
    4c74:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4c78:	0793      	lsls	r3, r2, #30
    4c7a:	d403      	bmi.n	4c84 <nrfx_gpiote_output_configure+0x20>
    4c7c:	f7ff fed4 	bl	4a28 <pin_in_use_by_te>
    4c80:	2800      	cmp	r0, #0
    4c82:	d158      	bne.n	4d36 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4c84:	f012 0f1c 	tst.w	r2, #28
    4c88:	d002      	beq.n	4c90 <nrfx_gpiote_output_configure+0x2c>
    4c8a:	784b      	ldrb	r3, [r1, #1]
    4c8c:	2b01      	cmp	r3, #1
    4c8e:	d052      	beq.n	4d36 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4c90:	2301      	movs	r3, #1
    4c92:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4c96:	2300      	movs	r3, #0
    4c98:	e9cd 1300 	strd	r1, r3, [sp]
    4c9c:	1c4a      	adds	r2, r1, #1
    4c9e:	1c8b      	adds	r3, r1, #2
    4ca0:	4620      	mov	r0, r4
    4ca2:	f10d 010f 	add.w	r1, sp, #15
    4ca6:	f003 fe18 	bl	88da <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4caa:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4cae:	f043 0303 	orr.w	r3, r3, #3
    4cb2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4cb6:	b915      	cbnz	r5, 4cbe <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4cb8:	4821      	ldr	r0, [pc, #132]	; (4d40 <nrfx_gpiote_output_configure+0xdc>)
}
    4cba:	b005      	add	sp, #20
    4cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cbe:	4e1f      	ldr	r6, [pc, #124]	; (4d3c <nrfx_gpiote_output_configure+0xd8>)
    4cc0:	f104 0708 	add.w	r7, r4, #8
    4cc4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4cc8:	0783      	lsls	r3, r0, #30
    4cca:	d534      	bpl.n	4d36 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4ccc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4cd0:	4661      	mov	r1, ip
    4cd2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4cd4:	f020 0020 	bic.w	r0, r0, #32
    4cd8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4cdc:	04c0      	lsls	r0, r0, #19
    4cde:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4ce2:	0cc0      	lsrs	r0, r0, #19
    4ce4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4ce8:	2300      	movs	r3, #0
    4cea:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4cee:	786a      	ldrb	r2, [r5, #1]
    4cf0:	2a00      	cmp	r2, #0
    4cf2:	d0e1      	beq.n	4cb8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4cf4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4cf8:	78ad      	ldrb	r5, [r5, #2]
    4cfa:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4cfe:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d02:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d06:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4d0a:	0223      	lsls	r3, r4, #8
    4d0c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d10:	0412      	lsls	r2, r2, #16
    4d12:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d16:	ea43 030e 	orr.w	r3, r3, lr
    4d1a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4d1c:	052a      	lsls	r2, r5, #20
    4d1e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4d22:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d26:	4313      	orrs	r3, r2
    4d28:	f040 0020 	orr.w	r0, r0, #32
    4d2c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4d30:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d34:	e7c0      	b.n	4cb8 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    4d36:	4803      	ldr	r0, [pc, #12]	; (4d44 <nrfx_gpiote_output_configure+0xe0>)
    4d38:	e7bf      	b.n	4cba <nrfx_gpiote_output_configure+0x56>
    4d3a:	bf00      	nop
    4d3c:	200002b4 	.word	0x200002b4
    4d40:	0bad0000 	.word	0x0bad0000
    4d44:	0bad0004 	.word	0x0bad0004

00004d48 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4d48:	4b01      	ldr	r3, [pc, #4]	; (4d50 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4d4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4d4e:	4770      	bx	lr
    4d50:	200002b4 	.word	0x200002b4

00004d54 <nrfx_gpiote_channel_get>:
{
    4d54:	b508      	push	{r3, lr}
    4d56:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4d58:	f7ff fe66 	bl	4a28 <pin_in_use_by_te>
    4d5c:	b138      	cbz	r0, 4d6e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d5e:	4b05      	ldr	r3, [pc, #20]	; (4d74 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4d60:	4805      	ldr	r0, [pc, #20]	; (4d78 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d62:	3208      	adds	r2, #8
    4d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4d68:	0b5b      	lsrs	r3, r3, #13
    4d6a:	700b      	strb	r3, [r1, #0]
}
    4d6c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4d6e:	4803      	ldr	r0, [pc, #12]	; (4d7c <nrfx_gpiote_channel_get+0x28>)
    4d70:	e7fc      	b.n	4d6c <nrfx_gpiote_channel_get+0x18>
    4d72:	bf00      	nop
    4d74:	200002b4 	.word	0x200002b4
    4d78:	0bad0000 	.word	0x0bad0000
    4d7c:	0bad0004 	.word	0x0bad0004

00004d80 <nrfx_gpiote_init>:
{
    4d80:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4d82:	4c0f      	ldr	r4, [pc, #60]	; (4dc0 <nrfx_gpiote_init+0x40>)
    4d84:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4d88:	b9bd      	cbnz	r5, 4dba <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4d8a:	2260      	movs	r2, #96	; 0x60
    4d8c:	4629      	mov	r1, r5
    4d8e:	f104 0010 	add.w	r0, r4, #16
    4d92:	f003 ff96 	bl	8cc2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4d96:	2006      	movs	r0, #6
    4d98:	f7fe f8b0 	bl	2efc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d9c:	4b09      	ldr	r3, [pc, #36]	; (4dc4 <nrfx_gpiote_init+0x44>)
    return err_code;
    4d9e:	480a      	ldr	r0, [pc, #40]	; (4dc8 <nrfx_gpiote_init+0x48>)
    4da0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4da4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4da8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4dac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4db0:	2301      	movs	r3, #1
    4db2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4db6:	6763      	str	r3, [r4, #116]	; 0x74
}
    4db8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4dba:	4804      	ldr	r0, [pc, #16]	; (4dcc <nrfx_gpiote_init+0x4c>)
    4dbc:	e7fc      	b.n	4db8 <nrfx_gpiote_init+0x38>
    4dbe:	bf00      	nop
    4dc0:	200002b4 	.word	0x200002b4
    4dc4:	40006000 	.word	0x40006000
    4dc8:	0bad0000 	.word	0x0bad0000
    4dcc:	0bad0005 	.word	0x0bad0005

00004dd0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4dd0:	4b03      	ldr	r3, [pc, #12]	; (4de0 <nrfx_gpiote_is_init+0x10>)
    4dd2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4dd6:	3800      	subs	r0, #0
    4dd8:	bf18      	it	ne
    4dda:	2001      	movne	r0, #1
    4ddc:	4770      	bx	lr
    4dde:	bf00      	nop
    4de0:	200002b4 	.word	0x200002b4

00004de4 <nrfx_gpiote_channel_free>:
{
    4de4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4de6:	4801      	ldr	r0, [pc, #4]	; (4dec <nrfx_gpiote_channel_free+0x8>)
    4de8:	f7ff bd56 	b.w	4898 <nrfx_flag32_free>
    4dec:	20000324 	.word	0x20000324

00004df0 <nrfx_gpiote_channel_alloc>:
{
    4df0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4df2:	4801      	ldr	r0, [pc, #4]	; (4df8 <nrfx_gpiote_channel_alloc+0x8>)
    4df4:	f7ff bd2a 	b.w	484c <nrfx_flag32_alloc>
    4df8:	20000324 	.word	0x20000324

00004dfc <nrfx_gpiote_trigger_enable>:
{
    4dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4dfe:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e00:	f7ff fe12 	bl	4a28 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e04:	f104 0208 	add.w	r2, r4, #8
    4e08:	4b1e      	ldr	r3, [pc, #120]	; (4e84 <nrfx_gpiote_trigger_enable+0x88>)
    4e0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e0e:	b1e8      	cbz	r0, 4e4c <nrfx_gpiote_trigger_enable+0x50>
    4e10:	f013 0502 	ands.w	r5, r3, #2
    4e14:	d11a      	bne.n	4e4c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e16:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4e18:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4e1a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4e1e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4e22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4e26:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e2a:	6005      	str	r5, [r0, #0]
    4e2c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4e2e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4e32:	f040 0001 	orr.w	r0, r0, #1
    4e36:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4e3a:	b129      	cbz	r1, 4e48 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4e3c:	2201      	movs	r2, #1
    4e3e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4e42:	4a11      	ldr	r2, [pc, #68]	; (4e88 <nrfx_gpiote_trigger_enable+0x8c>)
    4e44:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4e48:	b003      	add	sp, #12
    4e4a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e4c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4e50:	2b04      	cmp	r3, #4
    4e52:	d012      	beq.n	4e7a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4e54:	2b05      	cmp	r3, #5
    4e56:	d012      	beq.n	4e7e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4e58:	a801      	add	r0, sp, #4
    4e5a:	9401      	str	r4, [sp, #4]
    4e5c:	f7ff fdd6 	bl	4a0c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e60:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4e62:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e66:	40d9      	lsrs	r1, r3
    4e68:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4e6c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4e6e:	4620      	mov	r0, r4
}
    4e70:	b003      	add	sp, #12
    4e72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4e76:	f003 bd77 	b.w	8968 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4e7a:	2103      	movs	r1, #3
    4e7c:	e7f7      	b.n	4e6e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4e7e:	2102      	movs	r1, #2
    4e80:	e7f5      	b.n	4e6e <nrfx_gpiote_trigger_enable+0x72>
    4e82:	bf00      	nop
    4e84:	200002b4 	.word	0x200002b4
    4e88:	40006000 	.word	0x40006000

00004e8c <nrfx_gpiote_trigger_disable>:
{
    4e8c:	b508      	push	{r3, lr}
    4e8e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e90:	f7ff fdca 	bl	4a28 <pin_in_use_by_te>
    4e94:	b1c0      	cbz	r0, 4ec8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e96:	f102 0108 	add.w	r1, r2, #8
    4e9a:	4b0e      	ldr	r3, [pc, #56]	; (4ed4 <nrfx_gpiote_trigger_disable+0x48>)
    4e9c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ea0:	0799      	lsls	r1, r3, #30
    4ea2:	d411      	bmi.n	4ec8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ea4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4ea6:	2201      	movs	r2, #1
    4ea8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4eaa:	009b      	lsls	r3, r3, #2
    4eac:	490a      	ldr	r1, [pc, #40]	; (4ed8 <nrfx_gpiote_trigger_disable+0x4c>)
    4eae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4eb2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4eb6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4eba:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4ebe:	f022 0203 	bic.w	r2, r2, #3
    4ec2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4ec6:	bd08      	pop	{r3, pc}
    4ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ecc:	2100      	movs	r1, #0
    4ece:	4610      	mov	r0, r2
    4ed0:	f003 bd4a 	b.w	8968 <nrf_gpio_cfg_sense_set>
    4ed4:	200002b4 	.word	0x200002b4
    4ed8:	40006000 	.word	0x40006000

00004edc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4edc:	4b0e      	ldr	r3, [pc, #56]	; (4f18 <nrfx_gpiote_pin_uninit+0x3c>)
    4ede:	f100 0208 	add.w	r2, r0, #8
{
    4ee2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4ee4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4ee8:	07db      	lsls	r3, r3, #31
{
    4eea:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4eec:	d511      	bpl.n	4f12 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4eee:	f7ff ffcd 	bl	4e8c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4ef2:	4620      	mov	r0, r4
    4ef4:	f7ff fdec 	bl	4ad0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ef8:	a801      	add	r0, sp, #4
    4efa:	9401      	str	r4, [sp, #4]
    4efc:	f7ff fd86 	bl	4a0c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4f00:	9b01      	ldr	r3, [sp, #4]
    4f02:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4f06:	2202      	movs	r2, #2
    4f08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4f0c:	4803      	ldr	r0, [pc, #12]	; (4f1c <nrfx_gpiote_pin_uninit+0x40>)
}
    4f0e:	b002      	add	sp, #8
    4f10:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f12:	4803      	ldr	r0, [pc, #12]	; (4f20 <nrfx_gpiote_pin_uninit+0x44>)
    4f14:	e7fb      	b.n	4f0e <nrfx_gpiote_pin_uninit+0x32>
    4f16:	bf00      	nop
    4f18:	200002b4 	.word	0x200002b4
    4f1c:	0bad0000 	.word	0x0bad0000
    4f20:	0bad0004 	.word	0x0bad0004

00004f24 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f28:	4b64      	ldr	r3, [pc, #400]	; (50bc <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    4f2a:	4865      	ldr	r0, [pc, #404]	; (50c0 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f2c:	4965      	ldr	r1, [pc, #404]	; (50c4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    4f2e:	2600      	movs	r6, #0
{
    4f30:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4f32:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f34:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f36:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4f38:	b135      	cbz	r5, 4f48 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4f3a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4f3e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f40:	bf1e      	ittt	ne
    4f42:	601c      	strne	r4, [r3, #0]
    4f44:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4f46:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f48:	3304      	adds	r3, #4
    4f4a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4f4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f50:	d1f1      	bne.n	4f36 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f52:	f8df 816c 	ldr.w	r8, [pc, #364]	; 50c0 <nrfx_gpiote_irq_handler+0x19c>
    4f56:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	f000 8091 	beq.w	5082 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    4f60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4f64:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4f68:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4f6a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4f6e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4f72:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4f74:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4f78:	2700      	movs	r7, #0
            while (latch[i])
    4f7a:	f10d 0910 	add.w	r9, sp, #16
    4f7e:	017b      	lsls	r3, r7, #5
    4f80:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4f82:	f04f 0a01 	mov.w	sl, #1
    4f86:	e049      	b.n	501c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    4f88:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4f8a:	4a4f      	ldr	r2, [pc, #316]	; (50c8 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4f8c:	fa94 f4a4 	rbit	r4, r4
    4f90:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4f94:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4f96:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4f9a:	08e0      	lsrs	r0, r4, #3
    4f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4fa0:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    4fa2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4fa6:	fa0a fc02 	lsl.w	ip, sl, r2
    4faa:	f819 2000 	ldrb.w	r2, [r9, r0]
    4fae:	ea22 020c 	bic.w	r2, r2, ip
    4fb2:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4fb6:	a803      	add	r0, sp, #12
    4fb8:	f3c3 0582 	ubfx	r5, r3, #2, #3
    4fbc:	0899      	lsrs	r1, r3, #2
    4fbe:	f7ff fd25 	bl	4a0c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4fc2:	9a03      	ldr	r2, [sp, #12]
    4fc4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    4fc8:	074b      	lsls	r3, r1, #29
    4fca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fce:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4fd0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4fd4:	d529      	bpl.n	502a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    4fd6:	4620      	mov	r0, r4
    4fd8:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4fda:	b2d5      	uxtb	r5, r2
    4fdc:	f7ff fd2e 	bl	4a3c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4fe0:	a803      	add	r0, sp, #12
    4fe2:	9403      	str	r4, [sp, #12]
    4fe4:	f7ff fd12 	bl	4a0c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4fe8:	9b03      	ldr	r3, [sp, #12]
    4fea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4fee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4ff2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4ff6:	429d      	cmp	r5, r3
    4ff8:	d107      	bne.n	500a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ffa:	2100      	movs	r1, #0
    4ffc:	4620      	mov	r0, r4
    4ffe:	f003 fcb3 	bl	8968 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5002:	4629      	mov	r1, r5
    5004:	4620      	mov	r0, r4
    5006:	f003 fcaf 	bl	8968 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    500a:	a803      	add	r0, sp, #12
    500c:	9403      	str	r4, [sp, #12]
    500e:	f7ff fcfd 	bl	4a0c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5012:	9b03      	ldr	r3, [sp, #12]
    5014:	fa0a f303 	lsl.w	r3, sl, r3
    5018:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    501c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    5020:	2c00      	cmp	r4, #0
    5022:	d1b1      	bne.n	4f88 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5024:	b9cf      	cbnz	r7, 505a <nrfx_gpiote_irq_handler+0x136>
    5026:	2701      	movs	r7, #1
    5028:	e7a9      	b.n	4f7e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    502a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    502c:	bf0c      	ite	eq
    502e:	2103      	moveq	r1, #3
    5030:	2102      	movne	r1, #2
    5032:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5034:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5036:	f003 fc97 	bl	8968 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    503a:	2d03      	cmp	r5, #3
    503c:	d004      	beq.n	5048 <nrfx_gpiote_irq_handler+0x124>
    503e:	9a01      	ldr	r2, [sp, #4]
    5040:	2a02      	cmp	r2, #2
    5042:	d106      	bne.n	5052 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5044:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5046:	d1e0      	bne.n	500a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    5048:	4659      	mov	r1, fp
    504a:	4620      	mov	r0, r4
    504c:	f7ff fcf6 	bl	4a3c <call_handler>
    5050:	e7db      	b.n	500a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5052:	2a03      	cmp	r2, #3
    5054:	d1d9      	bne.n	500a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5056:	2d02      	cmp	r5, #2
    5058:	e7f5      	b.n	5046 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    505a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    505e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    5062:	491a      	ldr	r1, [pc, #104]	; (50cc <nrfx_gpiote_irq_handler+0x1a8>)
    5064:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5068:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    506c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    506e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5072:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    5076:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5078:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    507c:	4313      	orrs	r3, r2
    507e:	f47f af7b 	bne.w	4f78 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    5082:	2401      	movs	r4, #1
    while (mask)
    5084:	b916      	cbnz	r6, 508c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5086:	b007      	add	sp, #28
    5088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    508c:	fa96 f3a6 	rbit	r3, r6
    5090:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5094:	fa04 f203 	lsl.w	r2, r4, r3
    5098:	009b      	lsls	r3, r3, #2
    509a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    509e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    50a2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    50a6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    50aa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    50ae:	f3c0 2005 	ubfx	r0, r0, #8, #6
    50b2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    50b6:	f7ff fcc1 	bl	4a3c <call_handler>
    50ba:	e7e3      	b.n	5084 <nrfx_gpiote_irq_handler+0x160>
    50bc:	40006100 	.word	0x40006100
    50c0:	40006000 	.word	0x40006000
    50c4:	40006120 	.word	0x40006120
    50c8:	200002b4 	.word	0x200002b4
    50cc:	50000300 	.word	0x50000300

000050d0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    50d0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    50d2:	4801      	ldr	r0, [pc, #4]	; (50d8 <nrfx_ppi_channel_alloc+0x8>)
    50d4:	f7ff bbba 	b.w	484c <nrfx_flag32_alloc>
    50d8:	20000330 	.word	0x20000330

000050dc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    50dc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    50de:	4c14      	ldr	r4, [pc, #80]	; (5130 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    50e0:	4a14      	ldr	r2, [pc, #80]	; (5134 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    50e2:	4915      	ldr	r1, [pc, #84]	; (5138 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    50e4:	2303      	movs	r3, #3
    50e6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    50e8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    50ea:	4b14      	ldr	r3, [pc, #80]	; (513c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    50ec:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    50ee:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    50f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    50f4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    50f6:	2300      	movs	r3, #0
    50f8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    50fa:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    50fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    50fe:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5100:	4a0f      	ldr	r2, [pc, #60]	; (5140 <_DoInit+0x64>)
    5102:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    5104:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5106:	2210      	movs	r2, #16
    5108:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    510a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    510c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    510e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5110:	f003 ff55 	bl	8fbe <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5114:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    5118:	490a      	ldr	r1, [pc, #40]	; (5144 <_DoInit+0x68>)
    511a:	4620      	mov	r0, r4
    511c:	f003 ff4f 	bl	8fbe <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5120:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    5124:	2320      	movs	r3, #32
    5126:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5128:	f3bf 8f5f 	dmb	sy
}
    512c:	bd10      	pop	{r4, pc}
    512e:	bf00      	nop
    5130:	20000de0 	.word	0x20000de0
    5134:	0000a942 	.word	0x0000a942
    5138:	0000a94b 	.word	0x0000a94b
    513c:	200010f9 	.word	0x200010f9
    5140:	200010e9 	.word	0x200010e9
    5144:	0000a94f 	.word	0x0000a94f

00005148 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5148:	4b0e      	ldr	r3, [pc, #56]	; (5184 <z_sys_init_run_level+0x3c>)
{
    514a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    514c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5150:	3001      	adds	r0, #1
    5152:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5156:	42a6      	cmp	r6, r4
    5158:	d800      	bhi.n	515c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    515a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    515c:	e9d4 3500 	ldrd	r3, r5, [r4]
    5160:	4628      	mov	r0, r5
    5162:	4798      	blx	r3
		if (dev != NULL) {
    5164:	b165      	cbz	r5, 5180 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    5166:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    5168:	b130      	cbz	r0, 5178 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    516a:	2800      	cmp	r0, #0
    516c:	bfb8      	it	lt
    516e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    5170:	28ff      	cmp	r0, #255	; 0xff
    5172:	bfa8      	it	ge
    5174:	20ff      	movge	r0, #255	; 0xff
    5176:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5178:	785a      	ldrb	r2, [r3, #1]
    517a:	f042 0201 	orr.w	r2, r2, #1
    517e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5180:	3408      	adds	r4, #8
    5182:	e7e8      	b.n	5156 <z_sys_init_run_level+0xe>
    5184:	0000a6e8 	.word	0x0000a6e8

00005188 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5188:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    518a:	4b0b      	ldr	r3, [pc, #44]	; (51b8 <bg_thread_main+0x30>)
    518c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    518e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5190:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5192:	f7ff ffd9 	bl	5148 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5196:	f000 ff57 	bl	6048 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    519a:	f002 ff9b 	bl	80d4 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    519e:	2003      	movs	r0, #3
    51a0:	f7ff ffd2 	bl	5148 <z_sys_init_run_level>

	z_init_static_threads();
    51a4:	f000 f93c 	bl	5420 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    51a8:	f7fd fab6 	bl	2718 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    51ac:	4a03      	ldr	r2, [pc, #12]	; (51bc <bg_thread_main+0x34>)
    51ae:	7b13      	ldrb	r3, [r2, #12]
    51b0:	f023 0301 	bic.w	r3, r3, #1
    51b4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    51b6:	bd08      	pop	{r3, pc}
    51b8:	200014f9 	.word	0x200014f9
    51bc:	200006f0 	.word	0x200006f0

000051c0 <z_bss_zero>:
{
    51c0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    51c2:	4803      	ldr	r0, [pc, #12]	; (51d0 <z_bss_zero+0x10>)
    51c4:	4a03      	ldr	r2, [pc, #12]	; (51d4 <z_bss_zero+0x14>)
    51c6:	2100      	movs	r1, #0
    51c8:	1a12      	subs	r2, r2, r0
    51ca:	f003 fc0a 	bl	89e2 <z_early_memset>
}
    51ce:	bd08      	pop	{r3, pc}
    51d0:	20000610 	.word	0x20000610
    51d4:	20001500 	.word	0x20001500

000051d8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    51d8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    51da:	4e16      	ldr	r6, [pc, #88]	; (5234 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    51dc:	4d16      	ldr	r5, [pc, #88]	; (5238 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    51de:	4917      	ldr	r1, [pc, #92]	; (523c <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
    51e0:	23c0      	movs	r3, #192	; 0xc0
{
    51e2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    51e4:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    51e8:	2201      	movs	r2, #1
    51ea:	2300      	movs	r3, #0
    51ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    51f0:	220f      	movs	r2, #15
    51f2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    51f6:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    51f8:	2318      	movs	r3, #24
    51fa:	fb03 5500 	mla	r5, r3, r0, r5
{
    51fe:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5200:	f44f 70c0 	mov.w	r0, #384	; 0x180
    5204:	fb00 1104 	mla	r1, r0, r4, r1
    5208:	4b0d      	ldr	r3, [pc, #52]	; (5240 <z_init_cpu+0x68>)
    520a:	9500      	str	r5, [sp, #0]
    520c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5210:	4630      	mov	r0, r6
    5212:	f000 f8d3 	bl	53bc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5216:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5218:	480a      	ldr	r0, [pc, #40]	; (5244 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    521a:	752c      	strb	r4, [r5, #20]
    521c:	f023 0304 	bic.w	r3, r3, #4
    5220:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5222:	f44f 6308 	mov.w	r3, #2176	; 0x880
    5226:	fb03 0404 	mla	r4, r3, r4, r0
    522a:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    522c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    522e:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5230:	b006      	add	sp, #24
    5232:	bd70      	pop	{r4, r5, r6, pc}
    5234:	20000630 	.word	0x20000630
    5238:	20000e88 	.word	0x20000e88
    523c:	20003580 	.word	0x20003580
    5240:	000054d9 	.word	0x000054d9
    5244:	20003700 	.word	0x20003700

00005248 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5248:	b500      	push	{lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    524a:	4b2d      	ldr	r3, [pc, #180]	; (5300 <z_cstart+0xb8>)
    524c:	b0b9      	sub	sp, #228	; 0xe4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    524e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5252:	4d2c      	ldr	r5, [pc, #176]	; (5304 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5254:	4e2c      	ldr	r6, [pc, #176]	; (5308 <z_cstart+0xc0>)
    5256:	696b      	ldr	r3, [r5, #20]
    5258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    525c:	2400      	movs	r4, #0
    525e:	616b      	str	r3, [r5, #20]
    5260:	23e0      	movs	r3, #224	; 0xe0
    5262:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5266:	77ec      	strb	r4, [r5, #31]
    5268:	762c      	strb	r4, [r5, #24]
    526a:	766c      	strb	r4, [r5, #25]
    526c:	76ac      	strb	r4, [r5, #26]
    526e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5274:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5278:	626b      	str	r3, [r5, #36]	; 0x24
    527a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    527e:	f7fe f8dd 	bl	343c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5282:	f7fd fe1d 	bl	2ec0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    528a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    528c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    528e:	f7fe fa13 	bl	36b8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5292:	f7fe f975 	bl	3580 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5296:	f240 1301 	movw	r3, #257	; 0x101
    529a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    529e:	ab08      	add	r3, sp, #32
    52a0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    52a2:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	dummy_thread->resource_pool = NULL;
    52a6:	9424      	str	r4, [sp, #144]	; 0x90
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    52a8:	f003 fb74 	bl	8994 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    52ac:	4620      	mov	r0, r4
	_kernel.ready_q.cache = &z_main_thread;
    52ae:	4d17      	ldr	r5, [pc, #92]	; (530c <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    52b0:	f7ff ff4a 	bl	5148 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    52b4:	2001      	movs	r0, #1
    52b6:	f7ff ff47 	bl	5148 <z_sys_init_run_level>
	z_sched_init();
    52ba:	f000 fc6f 	bl	5b9c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    52be:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    52c0:	4b13      	ldr	r3, [pc, #76]	; (5310 <z_cstart+0xc8>)
    52c2:	4e14      	ldr	r6, [pc, #80]	; (5314 <z_cstart+0xcc>)
    52c4:	9305      	str	r3, [sp, #20]
    52c6:	2301      	movs	r3, #1
    52c8:	4913      	ldr	r1, [pc, #76]	; (5318 <z_cstart+0xd0>)
    52ca:	9400      	str	r4, [sp, #0]
    52cc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    52d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    52d4:	4633      	mov	r3, r6
    52d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    52da:	4628      	mov	r0, r5
    52dc:	f000 f86e 	bl	53bc <z_setup_new_thread>
    52e0:	7b6a      	ldrb	r2, [r5, #13]
    52e2:	9007      	str	r0, [sp, #28]
    52e4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    52e8:	4628      	mov	r0, r5
    52ea:	736a      	strb	r2, [r5, #13]
    52ec:	f003 fc0c 	bl	8b08 <z_ready_thread>
	z_init_cpu(0);
    52f0:	4620      	mov	r0, r4
    52f2:	f7ff ff71 	bl	51d8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    52f6:	9907      	ldr	r1, [sp, #28]
    52f8:	4632      	mov	r2, r6
    52fa:	4628      	mov	r0, r5
    52fc:	f7fd ff5e 	bl	31bc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5300:	20003f80 	.word	0x20003f80
    5304:	e000ed00 	.word	0xe000ed00
    5308:	20000e88 	.word	0x20000e88
    530c:	200006f0 	.word	0x200006f0
    5310:	0000a956 	.word	0x0000a956
    5314:	00005189 	.word	0x00005189
    5318:	20001500 	.word	0x20001500

0000531c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    531c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    531e:	4b0e      	ldr	r3, [pc, #56]	; (5358 <init_mem_slab_module+0x3c>)
    5320:	4c0e      	ldr	r4, [pc, #56]	; (535c <init_mem_slab_module+0x40>)
    5322:	42a3      	cmp	r3, r4
    5324:	d301      	bcc.n	532a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5326:	2000      	movs	r0, #0
	return rc;
}
    5328:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    532a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    532e:	ea41 0200 	orr.w	r2, r1, r0
    5332:	f012 0203 	ands.w	r2, r2, #3
    5336:	d10b      	bne.n	5350 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    5338:	68dd      	ldr	r5, [r3, #12]
	slab->free_list = NULL;
    533a:	619a      	str	r2, [r3, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    533c:	42aa      	cmp	r2, r5
    533e:	d101      	bne.n	5344 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5340:	3320      	adds	r3, #32
    5342:	e7ee      	b.n	5322 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    5344:	699e      	ldr	r6, [r3, #24]
    5346:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5348:	3201      	adds	r2, #1
		slab->free_list = p;
    534a:	6199      	str	r1, [r3, #24]
		p += slab->block_size;
    534c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    534e:	e7f5      	b.n	533c <init_mem_slab_module+0x20>
	return rc;
    5350:	f06f 0015 	mvn.w	r0, #21
    5354:	e7e8      	b.n	5328 <init_mem_slab_module+0xc>
    5356:	bf00      	nop
    5358:	20000580 	.word	0x20000580
    535c:	20000580 	.word	0x20000580

00005360 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5360:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5362:	460c      	mov	r4, r1
	__asm__ volatile(
    5364:	f04f 0520 	mov.w	r5, #32
    5368:	f3ef 8111 	mrs	r1, BASEPRI
    536c:	f385 8812 	msr	BASEPRI_MAX, r5
    5370:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5374:	6985      	ldr	r5, [r0, #24]
    5376:	b15d      	cbz	r5, 5390 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    5378:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    537a:	682b      	ldr	r3, [r5, #0]
    537c:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    537e:	69c3      	ldr	r3, [r0, #28]
    5380:	3301      	adds	r3, #1
    5382:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5384:	2000      	movs	r0, #0
	__asm__ volatile(
    5386:	f381 8811 	msr	BASEPRI, r1
    538a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    538e:	e011      	b.n	53b4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5390:	ea52 0c03 	orrs.w	ip, r2, r3
    5394:	d103      	bne.n	539e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    5396:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    5398:	f06f 000b 	mvn.w	r0, #11
    539c:	e7f3      	b.n	5386 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    539e:	e9cd 2300 	strd	r2, r3, [sp]
    53a2:	4602      	mov	r2, r0
    53a4:	3008      	adds	r0, #8
    53a6:	f000 fb4f 	bl	5a48 <z_pend_curr>
		if (result == 0) {
    53aa:	b918      	cbnz	r0, 53b4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    53ac:	4b02      	ldr	r3, [pc, #8]	; (53b8 <k_mem_slab_alloc+0x58>)
    53ae:	689b      	ldr	r3, [r3, #8]
    53b0:	695b      	ldr	r3, [r3, #20]
    53b2:	6023      	str	r3, [r4, #0]
}
    53b4:	b003      	add	sp, #12
    53b6:	bd30      	pop	{r4, r5, pc}
    53b8:	20000e88 	.word	0x20000e88

000053bc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    53bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    53c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    53c2:	7306      	strb	r6, [r0, #12]
{
    53c4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    53c6:	3207      	adds	r2, #7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    53c8:	f100 0558 	add.w	r5, r0, #88	; 0x58
    53cc:	f022 0207 	bic.w	r2, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    53d0:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    53d2:	3720      	adds	r7, #32
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    53d4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
    53d8:	e9c0 7219 	strd	r7, r2, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    53dc:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
    53de:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    53e0:	f102 0820 	add.w	r8, r2, #32

	thread_base->prio = priority;
    53e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    53e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    53e8:	6085      	str	r5, [r0, #8]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    53ea:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
    53ee:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
    53f0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    53f2:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    53f4:	9202      	str	r2, [sp, #8]
    53f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    53f8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    53fa:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    53fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    53fe:	9200      	str	r2, [sp, #0]
    5400:	4642      	mov	r2, r8
{
    5402:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5404:	f7fd fe54 	bl	30b0 <arch_new_thread>
	if (!_current) {
    5408:	4b04      	ldr	r3, [pc, #16]	; (541c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    540a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    540c:	689b      	ldr	r3, [r3, #8]
    540e:	b103      	cbz	r3, 5412 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5412:	6723      	str	r3, [r4, #112]	; 0x70
}
    5414:	4640      	mov	r0, r8
    5416:	b004      	add	sp, #16
    5418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    541c:	20000e88 	.word	0x20000e88

00005420 <z_init_static_threads>:
{
    5420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5424:	4c29      	ldr	r4, [pc, #164]	; (54cc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5426:	4d2a      	ldr	r5, [pc, #168]	; (54d0 <z_init_static_threads+0xb0>)
{
    5428:	b087      	sub	sp, #28
    542a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    542c:	42ae      	cmp	r6, r5
    542e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5432:	d30f      	bcc.n	5454 <z_init_static_threads+0x34>
	k_sched_lock();
    5434:	f000 f9c6 	bl	57c4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5438:	4c24      	ldr	r4, [pc, #144]	; (54cc <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    543a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 54d4 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    543e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5442:	f240 37e7 	movw	r7, #999	; 0x3e7
    5446:	42ac      	cmp	r4, r5
    5448:	d320      	bcc.n	548c <z_init_static_threads+0x6c>
}
    544a:	b007      	add	sp, #28
    544c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5450:	f000 bb88 	b.w	5b64 <k_sched_unlock>
		z_setup_new_thread(
    5454:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5458:	9305      	str	r3, [sp, #20]
    545a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    545e:	9304      	str	r3, [sp, #16]
    5460:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5464:	9303      	str	r3, [sp, #12]
    5466:	f854 3c18 	ldr.w	r3, [r4, #-24]
    546a:	9302      	str	r3, [sp, #8]
    546c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5470:	9301      	str	r3, [sp, #4]
    5472:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5476:	9300      	str	r3, [sp, #0]
    5478:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    547c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5480:	f7ff ff9c 	bl	53bc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5484:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5488:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    548a:	e7ce      	b.n	542a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    548c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    548e:	1c5a      	adds	r2, r3, #1
    5490:	d00d      	beq.n	54ae <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    5492:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5496:	2100      	movs	r1, #0
    5498:	4638      	mov	r0, r7
    549a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    549e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    54a2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    54a6:	d104      	bne.n	54b2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    54a8:	4640      	mov	r0, r8
    54aa:	f000 fa71 	bl	5990 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    54ae:	3430      	adds	r4, #48	; 0x30
    54b0:	e7c9      	b.n	5446 <z_init_static_threads+0x26>
    54b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    54b6:	2300      	movs	r3, #0
    54b8:	f7fb faf0 	bl	a9c <__aeabi_uldivmod>
    54bc:	4602      	mov	r2, r0
    54be:	460b      	mov	r3, r1
    54c0:	f108 0018 	add.w	r0, r8, #24
    54c4:	4649      	mov	r1, r9
    54c6:	f000 fcd3 	bl	5e70 <z_add_timeout>
    54ca:	e7f0      	b.n	54ae <z_init_static_threads+0x8e>
    54cc:	20000580 	.word	0x20000580
    54d0:	20000580 	.word	0x20000580
    54d4:	00008b29 	.word	0x00008b29

000054d8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    54d8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    54da:	4c0b      	ldr	r4, [pc, #44]	; (5508 <idle+0x30>)
	return !z_sys_post_kernel;
    54dc:	4d0b      	ldr	r5, [pc, #44]	; (550c <idle+0x34>)
	__asm__ volatile(
    54de:	f04f 0220 	mov.w	r2, #32
    54e2:	f3ef 8311 	mrs	r3, BASEPRI
    54e6:	f382 8812 	msr	BASEPRI_MAX, r2
    54ea:	f3bf 8f6f 	isb	sy
    54ee:	f003 fb95 	bl	8c1c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    54f2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    54f4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    54f6:	b913      	cbnz	r3, 54fe <idle+0x26>
	arch_cpu_idle();
    54f8:	f7fd fce8 	bl	2ecc <arch_cpu_idle>
}
    54fc:	e7ef      	b.n	54de <idle+0x6>
    54fe:	f7fd fb3b 	bl	2b78 <pm_system_suspend>
    5502:	2800      	cmp	r0, #0
    5504:	d1eb      	bne.n	54de <idle+0x6>
    5506:	e7f7      	b.n	54f8 <idle+0x20>
    5508:	20000e88 	.word	0x20000e88
    550c:	200014f9 	.word	0x200014f9

00005510 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5514:	4604      	mov	r4, r0
    5516:	4617      	mov	r7, r2
    5518:	461e      	mov	r6, r3
    551a:	f04f 0320 	mov.w	r3, #32
    551e:	f3ef 8811 	mrs	r8, BASEPRI
    5522:	f383 8812 	msr	BASEPRI_MAX, r3
    5526:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    552a:	68c3      	ldr	r3, [r0, #12]
    552c:	4a32      	ldr	r2, [pc, #200]	; (55f8 <z_impl_k_mutex_lock+0xe8>)
    552e:	b16b      	cbz	r3, 554c <z_impl_k_mutex_lock+0x3c>
    5530:	6880      	ldr	r0, [r0, #8]
    5532:	6891      	ldr	r1, [r2, #8]
    5534:	4288      	cmp	r0, r1
    5536:	d019      	beq.n	556c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5538:	ea57 0306 	orrs.w	r3, r7, r6
    553c:	d118      	bne.n	5570 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    553e:	f388 8811 	msr	BASEPRI, r8
    5542:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5546:	f06f 000f 	mvn.w	r0, #15
    554a:	e00c      	b.n	5566 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    554c:	6891      	ldr	r1, [r2, #8]
    554e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5552:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5554:	3301      	adds	r3, #1
    5556:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5558:	6893      	ldr	r3, [r2, #8]
    555a:	60a3      	str	r3, [r4, #8]
    555c:	f388 8811 	msr	BASEPRI, r8
    5560:	f3bf 8f6f 	isb	sy
		return 0;
    5564:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5566:	b002      	add	sp, #8
    5568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    556c:	6921      	ldr	r1, [r4, #16]
    556e:	e7f0      	b.n	5552 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5570:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5574:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5578:	4299      	cmp	r1, r3
    557a:	bfa8      	it	ge
    557c:	4619      	movge	r1, r3
    557e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5582:	4291      	cmp	r1, r2
    5584:	bfb8      	it	lt
    5586:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5588:	428b      	cmp	r3, r1
    558a:	dd2e      	ble.n	55ea <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    558c:	f003 fa7f 	bl	8a8e <adjust_owner_prio.isra.0>
    5590:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5592:	e9cd 7600 	strd	r7, r6, [sp]
    5596:	4819      	ldr	r0, [pc, #100]	; (55fc <z_impl_k_mutex_lock+0xec>)
    5598:	4622      	mov	r2, r4
    559a:	4641      	mov	r1, r8
    559c:	f000 fa54 	bl	5a48 <z_pend_curr>
	if (got_mutex == 0) {
    55a0:	2800      	cmp	r0, #0
    55a2:	d0e0      	beq.n	5566 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    55a4:	f04f 0320 	mov.w	r3, #32
    55a8:	f3ef 8611 	mrs	r6, BASEPRI
    55ac:	f383 8812 	msr	BASEPRI_MAX, r3
    55b0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    55b4:	6823      	ldr	r3, [r4, #0]
    55b6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55b8:	429c      	cmp	r4, r3
    55ba:	d00a      	beq.n	55d2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    55bc:	b14b      	cbz	r3, 55d2 <z_impl_k_mutex_lock+0xc2>
    55be:	f993 300e 	ldrsb.w	r3, [r3, #14]
    55c2:	4299      	cmp	r1, r3
    55c4:	bfa8      	it	ge
    55c6:	4619      	movge	r1, r3
    55c8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    55cc:	4299      	cmp	r1, r3
    55ce:	bfb8      	it	lt
    55d0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    55d2:	68a0      	ldr	r0, [r4, #8]
    55d4:	f003 fa5b 	bl	8a8e <adjust_owner_prio.isra.0>
    55d8:	b900      	cbnz	r0, 55dc <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    55da:	b145      	cbz	r5, 55ee <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    55dc:	4807      	ldr	r0, [pc, #28]	; (55fc <z_impl_k_mutex_lock+0xec>)
    55de:	4631      	mov	r1, r6
    55e0:	f000 f8de 	bl	57a0 <z_reschedule>
	return -EAGAIN;
    55e4:	f06f 000a 	mvn.w	r0, #10
    55e8:	e7bd      	b.n	5566 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    55ea:	2500      	movs	r5, #0
    55ec:	e7d1      	b.n	5592 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    55ee:	f386 8811 	msr	BASEPRI, r6
    55f2:	f3bf 8f6f 	isb	sy
    55f6:	e7f5      	b.n	55e4 <z_impl_k_mutex_lock+0xd4>
    55f8:	20000e88 	.word	0x20000e88
    55fc:	200014fa 	.word	0x200014fa

00005600 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5600:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5602:	6883      	ldr	r3, [r0, #8]
{
    5604:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5606:	2b00      	cmp	r3, #0
    5608:	d032      	beq.n	5670 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    560a:	4a1c      	ldr	r2, [pc, #112]	; (567c <z_impl_k_mutex_unlock+0x7c>)
    560c:	6892      	ldr	r2, [r2, #8]
    560e:	4293      	cmp	r3, r2
    5610:	d131      	bne.n	5676 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5612:	7bda      	ldrb	r2, [r3, #15]
    5614:	3a01      	subs	r2, #1
    5616:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5618:	68c3      	ldr	r3, [r0, #12]
    561a:	2b01      	cmp	r3, #1
    561c:	d905      	bls.n	562a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    561e:	3b01      	subs	r3, #1
    5620:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5622:	f000 fa9f 	bl	5b64 <k_sched_unlock>

	return 0;
    5626:	2000      	movs	r0, #0
}
    5628:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    562a:	f04f 0320 	mov.w	r3, #32
    562e:	f3ef 8511 	mrs	r5, BASEPRI
    5632:	f383 8812 	msr	BASEPRI_MAX, r3
    5636:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    563a:	6901      	ldr	r1, [r0, #16]
    563c:	6880      	ldr	r0, [r0, #8]
    563e:	f003 fa26 	bl	8a8e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5642:	4620      	mov	r0, r4
    5644:	f003 fabc 	bl	8bc0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5648:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    564a:	b158      	cbz	r0, 5664 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    564c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5650:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5652:	2200      	movs	r2, #0
    5654:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5656:	f003 fa57 	bl	8b08 <z_ready_thread>
		z_reschedule(&lock, key);
    565a:	4809      	ldr	r0, [pc, #36]	; (5680 <z_impl_k_mutex_unlock+0x80>)
    565c:	4629      	mov	r1, r5
    565e:	f000 f89f 	bl	57a0 <z_reschedule>
    5662:	e7de      	b.n	5622 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5664:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5666:	f385 8811 	msr	BASEPRI, r5
    566a:	f3bf 8f6f 	isb	sy
    566e:	e7d8      	b.n	5622 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    5670:	f06f 0015 	mvn.w	r0, #21
    5674:	e7d8      	b.n	5628 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    5676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    567a:	e7d5      	b.n	5628 <z_impl_k_mutex_unlock+0x28>
    567c:	20000e88 	.word	0x20000e88
    5680:	200014fa 	.word	0x200014fa

00005684 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5684:	b538      	push	{r3, r4, r5, lr}
    5686:	4604      	mov	r4, r0
	__asm__ volatile(
    5688:	f04f 0320 	mov.w	r3, #32
    568c:	f3ef 8511 	mrs	r5, BASEPRI
    5690:	f383 8812 	msr	BASEPRI_MAX, r3
    5694:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5698:	f003 fa92 	bl	8bc0 <z_unpend_first_thread>

	if (thread != NULL) {
    569c:	b148      	cbz	r0, 56b2 <z_impl_k_sem_give+0x2e>
    569e:	2200      	movs	r2, #0
    56a0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    56a2:	f003 fa31 	bl	8b08 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    56a6:	4629      	mov	r1, r5
    56a8:	4805      	ldr	r0, [pc, #20]	; (56c0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    56aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    56ae:	f000 b877 	b.w	57a0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    56b2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    56b6:	429a      	cmp	r2, r3
    56b8:	bf18      	it	ne
    56ba:	3301      	addne	r3, #1
    56bc:	60a3      	str	r3, [r4, #8]
}
    56be:	e7f2      	b.n	56a6 <z_impl_k_sem_give+0x22>
    56c0:	200014fb 	.word	0x200014fb

000056c4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    56c4:	b513      	push	{r0, r1, r4, lr}
    56c6:	f04f 0420 	mov.w	r4, #32
    56ca:	f3ef 8111 	mrs	r1, BASEPRI
    56ce:	f384 8812 	msr	BASEPRI_MAX, r4
    56d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    56d6:	6884      	ldr	r4, [r0, #8]
    56d8:	b144      	cbz	r4, 56ec <z_impl_k_sem_take+0x28>
		sem->count--;
    56da:	3c01      	subs	r4, #1
    56dc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    56de:	f381 8811 	msr	BASEPRI, r1
    56e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    56e6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    56e8:	b002      	add	sp, #8
    56ea:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    56ec:	ea52 0403 	orrs.w	r4, r2, r3
    56f0:	d106      	bne.n	5700 <z_impl_k_sem_take+0x3c>
    56f2:	f381 8811 	msr	BASEPRI, r1
    56f6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    56fa:	f06f 000f 	mvn.w	r0, #15
    56fe:	e7f3      	b.n	56e8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5700:	e9cd 2300 	strd	r2, r3, [sp]
    5704:	4602      	mov	r2, r0
    5706:	4802      	ldr	r0, [pc, #8]	; (5710 <z_impl_k_sem_take+0x4c>)
    5708:	f000 f99e 	bl	5a48 <z_pend_curr>
	return ret;
    570c:	e7ec      	b.n	56e8 <z_impl_k_sem_take+0x24>
    570e:	bf00      	nop
    5710:	200014fb 	.word	0x200014fb

00005714 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5714:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5716:	4d07      	ldr	r5, [pc, #28]	; (5734 <z_reset_time_slice+0x20>)
    5718:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    571a:	b154      	cbz	r4, 5732 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    571c:	f7fe ff3e 	bl	459c <sys_clock_elapsed>
    5720:	4b05      	ldr	r3, [pc, #20]	; (5738 <z_reset_time_slice+0x24>)
    5722:	4420      	add	r0, r4
    5724:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5726:	2100      	movs	r1, #0
    5728:	6828      	ldr	r0, [r5, #0]
	}
}
    572a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    572e:	f003 ba85 	b.w	8c3c <z_set_timeout_expiry>
}
    5732:	bd38      	pop	{r3, r4, r5, pc}
    5734:	20000ebc 	.word	0x20000ebc
    5738:	20000e88 	.word	0x20000e88

0000573c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    573e:	4604      	mov	r4, r0
    5740:	460d      	mov	r5, r1
	__asm__ volatile(
    5742:	f04f 0320 	mov.w	r3, #32
    5746:	f3ef 8711 	mrs	r7, BASEPRI
    574a:	f383 8812 	msr	BASEPRI_MAX, r3
    574e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5752:	4e10      	ldr	r6, [pc, #64]	; (5794 <k_sched_time_slice_set+0x58>)
    5754:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5756:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    575a:	f240 30e7 	movw	r0, #999	; 0x3e7
    575e:	6131      	str	r1, [r6, #16]
    5760:	2300      	movs	r3, #0
    5762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5766:	fbe4 010c 	umlal	r0, r1, r4, ip
    576a:	f7fb f997 	bl	a9c <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    576e:	2c00      	cmp	r4, #0
    5770:	4b09      	ldr	r3, [pc, #36]	; (5798 <k_sched_time_slice_set+0x5c>)
    5772:	dc0a      	bgt.n	578a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    5774:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5776:	4b09      	ldr	r3, [pc, #36]	; (579c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5778:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    577a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    577c:	f7ff ffca 	bl	5714 <z_reset_time_slice>
	__asm__ volatile(
    5780:	f387 8811 	msr	BASEPRI, r7
    5784:	f3bf 8f6f 	isb	sy
	}
}
    5788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    578a:	2802      	cmp	r0, #2
    578c:	bfb8      	it	lt
    578e:	2002      	movlt	r0, #2
    5790:	e7f0      	b.n	5774 <k_sched_time_slice_set+0x38>
    5792:	bf00      	nop
    5794:	20000e88 	.word	0x20000e88
    5798:	20000ebc 	.word	0x20000ebc
    579c:	20000eb8 	.word	0x20000eb8

000057a0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    57a0:	b949      	cbnz	r1, 57b6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    57a2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    57a6:	b930      	cbnz	r0, 57b6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    57a8:	4b05      	ldr	r3, [pc, #20]	; (57c0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    57aa:	69da      	ldr	r2, [r3, #28]
    57ac:	689b      	ldr	r3, [r3, #8]
    57ae:	429a      	cmp	r2, r3
    57b0:	d001      	beq.n	57b6 <z_reschedule+0x16>
	ret = arch_swap(key);
    57b2:	f7fd bc0b 	b.w	2fcc <arch_swap>
    57b6:	f381 8811 	msr	BASEPRI, r1
    57ba:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    57be:	4770      	bx	lr
    57c0:	20000e88 	.word	0x20000e88

000057c4 <k_sched_lock>:
	__asm__ volatile(
    57c4:	f04f 0320 	mov.w	r3, #32
    57c8:	f3ef 8111 	mrs	r1, BASEPRI
    57cc:	f383 8812 	msr	BASEPRI_MAX, r3
    57d0:	f3bf 8f6f 	isb	sy
    57d4:	4b04      	ldr	r3, [pc, #16]	; (57e8 <k_sched_lock+0x24>)
    57d6:	689a      	ldr	r2, [r3, #8]
    57d8:	7bd3      	ldrb	r3, [r2, #15]
    57da:	3b01      	subs	r3, #1
    57dc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    57de:	f381 8811 	msr	BASEPRI, r1
    57e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    57e6:	4770      	bx	lr
    57e8:	20000e88 	.word	0x20000e88

000057ec <update_cache>:
{
    57ec:	b538      	push	{r3, r4, r5, lr}
    57ee:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    57f0:	480c      	ldr	r0, [pc, #48]	; (5824 <update_cache+0x38>)
    57f2:	4d0d      	ldr	r5, [pc, #52]	; (5828 <update_cache+0x3c>)
    57f4:	f003 f982 	bl	8afc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    57f8:	4604      	mov	r4, r0
    57fa:	b900      	cbnz	r0, 57fe <update_cache+0x12>
    57fc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    57fe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5800:	b94a      	cbnz	r2, 5816 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    5802:	7b5a      	ldrb	r2, [r3, #13]
    5804:	06d2      	lsls	r2, r2, #27
    5806:	d106      	bne.n	5816 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5808:	69a2      	ldr	r2, [r4, #24]
    580a:	b922      	cbnz	r2, 5816 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    580c:	89da      	ldrh	r2, [r3, #14]
    580e:	2a7f      	cmp	r2, #127	; 0x7f
    5810:	d901      	bls.n	5816 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    5812:	61eb      	str	r3, [r5, #28]
}
    5814:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5816:	429c      	cmp	r4, r3
    5818:	d002      	beq.n	5820 <update_cache+0x34>
			z_reset_time_slice(thread);
    581a:	4620      	mov	r0, r4
    581c:	f7ff ff7a 	bl	5714 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5820:	61ec      	str	r4, [r5, #28]
}
    5822:	e7f7      	b.n	5814 <update_cache+0x28>
    5824:	20000ea8 	.word	0x20000ea8
    5828:	20000e88 	.word	0x20000e88

0000582c <move_thread_to_end_of_prio_q>:
{
    582c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    582e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5832:	7b43      	ldrb	r3, [r0, #13]
    5834:	2a00      	cmp	r2, #0
{
    5836:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5838:	da04      	bge.n	5844 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    583a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    583e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5840:	f003 f934 	bl	8aac <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5844:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5846:	4a15      	ldr	r2, [pc, #84]	; (589c <move_thread_to_end_of_prio_q+0x70>)
    5848:	f063 037f 	orn	r3, r3, #127	; 0x7f
    584c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    584e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5852:	f102 0520 	add.w	r5, r2, #32
    5856:	42ab      	cmp	r3, r5
    5858:	d01b      	beq.n	5892 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    585a:	b1d3      	cbz	r3, 5892 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    585c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5860:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5864:	4286      	cmp	r6, r0
    5866:	d00f      	beq.n	5888 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    5868:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    586a:	2800      	cmp	r0, #0
    586c:	dd0c      	ble.n	5888 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    586e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5870:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5874:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5876:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5878:	6890      	ldr	r0, [r2, #8]
    587a:	1a43      	subs	r3, r0, r1
    587c:	4258      	negs	r0, r3
}
    587e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5882:	4158      	adcs	r0, r3
    5884:	f7ff bfb2 	b.w	57ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5888:	42a3      	cmp	r3, r4
    588a:	d002      	beq.n	5892 <move_thread_to_end_of_prio_q+0x66>
    588c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    588e:	2b00      	cmp	r3, #0
    5890:	d1e6      	bne.n	5860 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    5892:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    5896:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5898:	6251      	str	r1, [r2, #36]	; 0x24
}
    589a:	e7ed      	b.n	5878 <move_thread_to_end_of_prio_q+0x4c>
    589c:	20000e88 	.word	0x20000e88

000058a0 <z_time_slice>:
{
    58a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    58a2:	f04f 0320 	mov.w	r3, #32
    58a6:	f3ef 8511 	mrs	r5, BASEPRI
    58aa:	f383 8812 	msr	BASEPRI_MAX, r3
    58ae:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    58b2:	4b17      	ldr	r3, [pc, #92]	; (5910 <z_time_slice+0x70>)
    58b4:	4a17      	ldr	r2, [pc, #92]	; (5914 <z_time_slice+0x74>)
    58b6:	689c      	ldr	r4, [r3, #8]
    58b8:	6811      	ldr	r1, [r2, #0]
    58ba:	428c      	cmp	r4, r1
    58bc:	d107      	bne.n	58ce <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    58be:	4620      	mov	r0, r4
    58c0:	f7ff ff28 	bl	5714 <z_reset_time_slice>
	__asm__ volatile(
    58c4:	f385 8811 	msr	BASEPRI, r5
    58c8:	f3bf 8f6f 	isb	sy
}
    58cc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    58ce:	2100      	movs	r1, #0
    58d0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    58d2:	4a11      	ldr	r2, [pc, #68]	; (5918 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    58d4:	6812      	ldr	r2, [r2, #0]
    58d6:	b1c2      	cbz	r2, 590a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    58d8:	89e2      	ldrh	r2, [r4, #14]
    58da:	2a7f      	cmp	r2, #127	; 0x7f
    58dc:	d815      	bhi.n	590a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    58de:	7b62      	ldrb	r2, [r4, #13]
    58e0:	06d2      	lsls	r2, r2, #27
    58e2:	d112      	bne.n	590a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    58e4:	4a0d      	ldr	r2, [pc, #52]	; (591c <z_time_slice+0x7c>)
    58e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
    58ea:	6812      	ldr	r2, [r2, #0]
    58ec:	4291      	cmp	r1, r2
    58ee:	db0c      	blt.n	590a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    58f0:	4a0b      	ldr	r2, [pc, #44]	; (5920 <z_time_slice+0x80>)
    58f2:	4294      	cmp	r4, r2
    58f4:	d009      	beq.n	590a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    58f6:	691a      	ldr	r2, [r3, #16]
    58f8:	4282      	cmp	r2, r0
    58fa:	dc03      	bgt.n	5904 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    58fc:	4620      	mov	r0, r4
    58fe:	f7ff ff95 	bl	582c <move_thread_to_end_of_prio_q>
    5902:	e7dc      	b.n	58be <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5904:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5906:	611a      	str	r2, [r3, #16]
    5908:	e7dc      	b.n	58c4 <z_time_slice+0x24>
    590a:	2200      	movs	r2, #0
    590c:	e7fb      	b.n	5906 <z_time_slice+0x66>
    590e:	bf00      	nop
    5910:	20000e88 	.word	0x20000e88
    5914:	20000eb4 	.word	0x20000eb4
    5918:	20000ebc 	.word	0x20000ebc
    591c:	20000eb8 	.word	0x20000eb8
    5920:	20000630 	.word	0x20000630

00005924 <ready_thread>:
{
    5924:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5926:	f990 200d 	ldrsb.w	r2, [r0, #13]
    592a:	7b43      	ldrb	r3, [r0, #13]
    592c:	2a00      	cmp	r2, #0
    592e:	db2a      	blt.n	5986 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5930:	06da      	lsls	r2, r3, #27
    5932:	d128      	bne.n	5986 <ready_thread+0x62>
    5934:	6982      	ldr	r2, [r0, #24]
    5936:	bb32      	cbnz	r2, 5986 <ready_thread+0x62>
	return list->head == list;
    5938:	4a14      	ldr	r2, [pc, #80]	; (598c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    593a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    593e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5940:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5944:	f102 0520 	add.w	r5, r2, #32
    5948:	42ab      	cmp	r3, r5
    594a:	d017      	beq.n	597c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    594c:	b1b3      	cbz	r3, 597c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    594e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5952:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5956:	428e      	cmp	r6, r1
    5958:	d00b      	beq.n	5972 <ready_thread+0x4e>
		return b2 - b1;
    595a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    595c:	2900      	cmp	r1, #0
    595e:	dd08      	ble.n	5972 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    5960:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5962:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5966:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5968:	6058      	str	r0, [r3, #4]
}
    596a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    596c:	2000      	movs	r0, #0
    596e:	f7ff bf3d 	b.w	57ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5972:	42a3      	cmp	r3, r4
    5974:	d002      	beq.n	597c <ready_thread+0x58>
    5976:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5978:	2b00      	cmp	r3, #0
    597a:	d1ea      	bne.n	5952 <ready_thread+0x2e>
	node->prev = tail;
    597c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    5980:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5982:	6250      	str	r0, [r2, #36]	; 0x24
}
    5984:	e7f1      	b.n	596a <ready_thread+0x46>
}
    5986:	bc70      	pop	{r4, r5, r6}
    5988:	4770      	bx	lr
    598a:	bf00      	nop
    598c:	20000e88 	.word	0x20000e88

00005990 <z_sched_start>:
{
    5990:	b510      	push	{r4, lr}
	__asm__ volatile(
    5992:	f04f 0220 	mov.w	r2, #32
    5996:	f3ef 8411 	mrs	r4, BASEPRI
    599a:	f382 8812 	msr	BASEPRI_MAX, r2
    599e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    59a2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    59a4:	0751      	lsls	r1, r2, #29
    59a6:	d404      	bmi.n	59b2 <z_sched_start+0x22>
	__asm__ volatile(
    59a8:	f384 8811 	msr	BASEPRI, r4
    59ac:	f3bf 8f6f 	isb	sy
}
    59b0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    59b2:	f022 0204 	bic.w	r2, r2, #4
    59b6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    59b8:	f7ff ffb4 	bl	5924 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    59bc:	4621      	mov	r1, r4
    59be:	4802      	ldr	r0, [pc, #8]	; (59c8 <z_sched_start+0x38>)
}
    59c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    59c4:	f7ff beec 	b.w	57a0 <z_reschedule>
    59c8:	200014fc 	.word	0x200014fc

000059cc <unready_thread>:
{
    59cc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    59ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    59d2:	7b43      	ldrb	r3, [r0, #13]
    59d4:	2a00      	cmp	r2, #0
{
    59d6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    59d8:	da04      	bge.n	59e4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    59da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    59de:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    59e0:	f003 f864 	bl	8aac <sys_dlist_remove>
	update_cache(thread == _current);
    59e4:	4b04      	ldr	r3, [pc, #16]	; (59f8 <unready_thread+0x2c>)
    59e6:	6898      	ldr	r0, [r3, #8]
    59e8:	1a43      	subs	r3, r0, r1
    59ea:	4258      	negs	r0, r3
    59ec:	4158      	adcs	r0, r3
}
    59ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    59f2:	f7ff befb 	b.w	57ec <update_cache>
    59f6:	bf00      	nop
    59f8:	20000e88 	.word	0x20000e88

000059fc <pend>:
{
    59fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a00:	4606      	mov	r6, r0
    5a02:	4615      	mov	r5, r2
    5a04:	461c      	mov	r4, r3
	__asm__ volatile(
    5a06:	f04f 0320 	mov.w	r3, #32
    5a0a:	f3ef 8711 	mrs	r7, BASEPRI
    5a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a12:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5a16:	f003 f8a9 	bl	8b6c <add_to_waitq_locked>
	__asm__ volatile(
    5a1a:	f387 8811 	msr	BASEPRI, r7
    5a1e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5a22:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5a26:	bf08      	it	eq
    5a28:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5a2c:	d008      	beq.n	5a40 <pend+0x44>
    5a2e:	462a      	mov	r2, r5
    5a30:	4623      	mov	r3, r4
    5a32:	f106 0018 	add.w	r0, r6, #24
    5a36:	4903      	ldr	r1, [pc, #12]	; (5a44 <pend+0x48>)
}
    5a38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a3c:	f000 ba18 	b.w	5e70 <z_add_timeout>
    5a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a44:	00008b29 	.word	0x00008b29

00005a48 <z_pend_curr>:
{
    5a48:	b510      	push	{r4, lr}
	pending_current = _current;
    5a4a:	4b07      	ldr	r3, [pc, #28]	; (5a68 <z_pend_curr+0x20>)
    5a4c:	6898      	ldr	r0, [r3, #8]
    5a4e:	4b07      	ldr	r3, [pc, #28]	; (5a6c <z_pend_curr+0x24>)
{
    5a50:	460c      	mov	r4, r1
	pending_current = _current;
    5a52:	6018      	str	r0, [r3, #0]
{
    5a54:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5a5a:	f7ff ffcf 	bl	59fc <pend>
    5a5e:	4620      	mov	r0, r4
}
    5a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a64:	f7fd bab2 	b.w	2fcc <arch_swap>
    5a68:	20000e88 	.word	0x20000e88
    5a6c:	20000eb4 	.word	0x20000eb4

00005a70 <z_set_prio>:
{
    5a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a72:	4604      	mov	r4, r0
	__asm__ volatile(
    5a74:	f04f 0320 	mov.w	r3, #32
    5a78:	f3ef 8611 	mrs	r6, BASEPRI
    5a7c:	f383 8812 	msr	BASEPRI_MAX, r3
    5a80:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5a84:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5a86:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5a88:	b249      	sxtb	r1, r1
    5a8a:	d133      	bne.n	5af4 <z_set_prio+0x84>
		if (need_sched) {
    5a8c:	6982      	ldr	r2, [r0, #24]
    5a8e:	bb8a      	cbnz	r2, 5af4 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a94:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5a96:	f003 f809 	bl	8aac <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5a9a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5a9c:	4a17      	ldr	r2, [pc, #92]	; (5afc <z_set_prio+0x8c>)
				thread->base.prio = prio;
    5a9e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5aa4:	7343      	strb	r3, [r0, #13]
    5aa6:	4610      	mov	r0, r2
    5aa8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5aac:	4283      	cmp	r3, r0
    5aae:	d01b      	beq.n	5ae8 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ab0:	b1d3      	cbz	r3, 5ae8 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    5ab2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    5ab4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5ab8:	42a9      	cmp	r1, r5
    5aba:	d010      	beq.n	5ade <z_set_prio+0x6e>
		return b2 - b1;
    5abc:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5abe:	2d00      	cmp	r5, #0
    5ac0:	dd0d      	ble.n	5ade <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5ac2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5ac4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5ac8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5aca:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5acc:	2001      	movs	r0, #1
    5ace:	f7ff fe8d 	bl	57ec <update_cache>
    5ad2:	2001      	movs	r0, #1
	__asm__ volatile(
    5ad4:	f386 8811 	msr	BASEPRI, r6
    5ad8:	f3bf 8f6f 	isb	sy
}
    5adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5ade:	42bb      	cmp	r3, r7
    5ae0:	d002      	beq.n	5ae8 <z_set_prio+0x78>
    5ae2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d1e5      	bne.n	5ab4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    5ae8:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    5aea:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    5aee:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5af0:	6254      	str	r4, [r2, #36]	; 0x24
}
    5af2:	e7eb      	b.n	5acc <z_set_prio+0x5c>
			thread->base.prio = prio;
    5af4:	73a1      	strb	r1, [r4, #14]
    5af6:	2000      	movs	r0, #0
    5af8:	e7ec      	b.n	5ad4 <z_set_prio+0x64>
    5afa:	bf00      	nop
    5afc:	20000e88 	.word	0x20000e88

00005b00 <z_impl_k_thread_suspend>:
{
    5b00:	b570      	push	{r4, r5, r6, lr}
    5b02:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5b04:	3018      	adds	r0, #24
    5b06:	f003 f873 	bl	8bf0 <z_abort_timeout>
	__asm__ volatile(
    5b0a:	f04f 0320 	mov.w	r3, #32
    5b0e:	f3ef 8611 	mrs	r6, BASEPRI
    5b12:	f383 8812 	msr	BASEPRI_MAX, r3
    5b16:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5b1a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5b1e:	7b63      	ldrb	r3, [r4, #13]
    5b20:	2a00      	cmp	r2, #0
    5b22:	da05      	bge.n	5b30 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b28:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5b2a:	4620      	mov	r0, r4
    5b2c:	f002 ffbe 	bl	8aac <sys_dlist_remove>
		update_cache(thread == _current);
    5b30:	4d0b      	ldr	r5, [pc, #44]	; (5b60 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5b32:	7b63      	ldrb	r3, [r4, #13]
    5b34:	68a8      	ldr	r0, [r5, #8]
    5b36:	f043 0310 	orr.w	r3, r3, #16
    5b3a:	7363      	strb	r3, [r4, #13]
    5b3c:	1b03      	subs	r3, r0, r4
    5b3e:	4258      	negs	r0, r3
    5b40:	4158      	adcs	r0, r3
    5b42:	f7ff fe53 	bl	57ec <update_cache>
	__asm__ volatile(
    5b46:	f386 8811 	msr	BASEPRI, r6
    5b4a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5b4e:	68ab      	ldr	r3, [r5, #8]
    5b50:	42a3      	cmp	r3, r4
    5b52:	d103      	bne.n	5b5c <z_impl_k_thread_suspend+0x5c>
}
    5b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5b58:	f002 bfc6 	b.w	8ae8 <z_reschedule_unlocked>
}
    5b5c:	bd70      	pop	{r4, r5, r6, pc}
    5b5e:	bf00      	nop
    5b60:	20000e88 	.word	0x20000e88

00005b64 <k_sched_unlock>:
{
    5b64:	b510      	push	{r4, lr}
	__asm__ volatile(
    5b66:	f04f 0320 	mov.w	r3, #32
    5b6a:	f3ef 8411 	mrs	r4, BASEPRI
    5b6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5b72:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5b76:	4b08      	ldr	r3, [pc, #32]	; (5b98 <k_sched_unlock+0x34>)
    5b78:	689a      	ldr	r2, [r3, #8]
    5b7a:	7bd3      	ldrb	r3, [r2, #15]
    5b7c:	3301      	adds	r3, #1
    5b7e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5b80:	2000      	movs	r0, #0
    5b82:	f7ff fe33 	bl	57ec <update_cache>
	__asm__ volatile(
    5b86:	f384 8811 	msr	BASEPRI, r4
    5b8a:	f3bf 8f6f 	isb	sy
}
    5b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5b92:	f002 bfa9 	b.w	8ae8 <z_reschedule_unlocked>
    5b96:	bf00      	nop
    5b98:	20000e88 	.word	0x20000e88

00005b9c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5b9c:	4b04      	ldr	r3, [pc, #16]	; (5bb0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5b9e:	2100      	movs	r1, #0
    5ba0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5ba4:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5ba8:	4608      	mov	r0, r1
    5baa:	f7ff bdc7 	b.w	573c <k_sched_time_slice_set>
    5bae:	bf00      	nop
    5bb0:	20000e88 	.word	0x20000e88

00005bb4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5bb6:	f04f 0320 	mov.w	r3, #32
    5bba:	f3ef 8511 	mrs	r5, BASEPRI
    5bbe:	f383 8812 	msr	BASEPRI_MAX, r3
    5bc2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5bc6:	491a      	ldr	r1, [pc, #104]	; (5c30 <z_impl_k_yield+0x7c>)
    5bc8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5bca:	7b43      	ldrb	r3, [r0, #13]
    5bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5bd0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5bd2:	f002 ff6b 	bl	8aac <sys_dlist_remove>
	}
	queue_thread(_current);
    5bd6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5bd8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    5bda:	4608      	mov	r0, r1
    5bdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5be0:	735a      	strb	r2, [r3, #13]
    5be2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5be6:	4282      	cmp	r2, r0
    5be8:	d01c      	beq.n	5c24 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5bea:	b1da      	cbz	r2, 5c24 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    5bec:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    5bee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5bf2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5bf6:	42a6      	cmp	r6, r4
    5bf8:	d00f      	beq.n	5c1a <z_impl_k_yield+0x66>
		return b2 - b1;
    5bfa:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5bfc:	2c00      	cmp	r4, #0
    5bfe:	dd0c      	ble.n	5c1a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5c00:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5c02:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5c06:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5c08:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5c0a:	2001      	movs	r0, #1
    5c0c:	f7ff fdee 	bl	57ec <update_cache>
    5c10:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5c16:	f7fd b9d9 	b.w	2fcc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5c1a:	42ba      	cmp	r2, r7
    5c1c:	d002      	beq.n	5c24 <z_impl_k_yield+0x70>
    5c1e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c20:	2a00      	cmp	r2, #0
    5c22:	d1e6      	bne.n	5bf2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5c24:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5c26:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    5c2a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5c2c:	624b      	str	r3, [r1, #36]	; 0x24
}
    5c2e:	e7ec      	b.n	5c0a <z_impl_k_yield+0x56>
    5c30:	20000e88 	.word	0x20000e88

00005c34 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5c34:	ea50 0301 	orrs.w	r3, r0, r1
{
    5c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c3c:	4605      	mov	r5, r0
    5c3e:	460e      	mov	r6, r1
	if (ticks == 0) {
    5c40:	d103      	bne.n	5c4a <z_tick_sleep+0x16>
	z_impl_k_yield();
    5c42:	f7ff ffb7 	bl	5bb4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5c46:	2000      	movs	r0, #0
    5c48:	e033      	b.n	5cb2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    5c4a:	f06f 0401 	mvn.w	r4, #1
    5c4e:	1a24      	subs	r4, r4, r0
    5c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c54:	eb63 0301 	sbc.w	r3, r3, r1
    5c58:	2c01      	cmp	r4, #1
    5c5a:	f173 0300 	sbcs.w	r3, r3, #0
    5c5e:	da02      	bge.n	5c66 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5c60:	f003 f807 	bl	8c72 <sys_clock_tick_get_32>
    5c64:	1944      	adds	r4, r0, r5
    5c66:	f04f 0320 	mov.w	r3, #32
    5c6a:	f3ef 8811 	mrs	r8, BASEPRI
    5c6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c72:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5c76:	4f10      	ldr	r7, [pc, #64]	; (5cb8 <z_tick_sleep+0x84>)
    5c78:	4b10      	ldr	r3, [pc, #64]	; (5cbc <z_tick_sleep+0x88>)
    5c7a:	68b8      	ldr	r0, [r7, #8]
    5c7c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5c7e:	f7ff fea5 	bl	59cc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5c82:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5c84:	490e      	ldr	r1, [pc, #56]	; (5cc0 <z_tick_sleep+0x8c>)
    5c86:	462a      	mov	r2, r5
    5c88:	4633      	mov	r3, r6
    5c8a:	3018      	adds	r0, #24
    5c8c:	f000 f8f0 	bl	5e70 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5c90:	68ba      	ldr	r2, [r7, #8]
    5c92:	7b53      	ldrb	r3, [r2, #13]
    5c94:	f043 0310 	orr.w	r3, r3, #16
    5c98:	7353      	strb	r3, [r2, #13]
    5c9a:	4640      	mov	r0, r8
    5c9c:	f7fd f996 	bl	2fcc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5ca0:	f002 ffe7 	bl	8c72 <sys_clock_tick_get_32>
    5ca4:	1a20      	subs	r0, r4, r0
    5ca6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5caa:	2801      	cmp	r0, #1
    5cac:	f173 0300 	sbcs.w	r3, r3, #0
    5cb0:	dbc9      	blt.n	5c46 <z_tick_sleep+0x12>
}
    5cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cb6:	bf00      	nop
    5cb8:	20000e88 	.word	0x20000e88
    5cbc:	20000eb4 	.word	0x20000eb4
    5cc0:	00008b29 	.word	0x00008b29

00005cc4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5cc4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    5cc8:	bf08      	it	eq
    5cca:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    5cce:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5cd0:	d106      	bne.n	5ce0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5cd2:	4b08      	ldr	r3, [pc, #32]	; (5cf4 <z_impl_k_sleep+0x30>)
    5cd4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5cd6:	f7ff ff13 	bl	5b00 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5cde:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5ce0:	f7ff ffa8 	bl	5c34 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5ce8:	fb80 0303 	smull	r0, r3, r0, r3
    5cec:	0bc0      	lsrs	r0, r0, #15
    5cee:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5cf2:	e7f4      	b.n	5cde <z_impl_k_sleep+0x1a>
    5cf4:	20000e88 	.word	0x20000e88

00005cf8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5cf8:	4b01      	ldr	r3, [pc, #4]	; (5d00 <z_impl_z_current_get+0x8>)
    5cfa:	6898      	ldr	r0, [r3, #8]
    5cfc:	4770      	bx	lr
    5cfe:	bf00      	nop
    5d00:	20000e88 	.word	0x20000e88

00005d04 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d08:	4604      	mov	r4, r0
    5d0a:	f04f 0320 	mov.w	r3, #32
    5d0e:	f3ef 8611 	mrs	r6, BASEPRI
    5d12:	f383 8812 	msr	BASEPRI_MAX, r3
    5d16:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5d1a:	7b43      	ldrb	r3, [r0, #13]
    5d1c:	071a      	lsls	r2, r3, #28
    5d1e:	d505      	bpl.n	5d2c <z_thread_abort+0x28>
	__asm__ volatile(
    5d20:	f386 8811 	msr	BASEPRI, r6
    5d24:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5d2c:	f023 0220 	bic.w	r2, r3, #32
    5d30:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5d34:	09d2      	lsrs	r2, r2, #7
    5d36:	d120      	bne.n	5d7a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5d38:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5d3a:	68a3      	ldr	r3, [r4, #8]
    5d3c:	b113      	cbz	r3, 5d44 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    5d3e:	4620      	mov	r0, r4
    5d40:	f002 febc 	bl	8abc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5d44:	f104 0018 	add.w	r0, r4, #24
    5d48:	f002 ff52 	bl	8bf0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5d4c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5d50:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5d54:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d56:	42bd      	cmp	r5, r7
    5d58:	d000      	beq.n	5d5c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5d5a:	b9b5      	cbnz	r5, 5d8a <z_thread_abort+0x86>
		update_cache(1);
    5d5c:	2001      	movs	r0, #1
    5d5e:	f7ff fd45 	bl	57ec <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5d62:	4b10      	ldr	r3, [pc, #64]	; (5da4 <z_thread_abort+0xa0>)
    5d64:	689b      	ldr	r3, [r3, #8]
    5d66:	42a3      	cmp	r3, r4
    5d68:	d1da      	bne.n	5d20 <z_thread_abort+0x1c>
    5d6a:	f3ef 8305 	mrs	r3, IPSR
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d1d6      	bne.n	5d20 <z_thread_abort+0x1c>
    5d72:	4630      	mov	r0, r6
    5d74:	f7fd f92a 	bl	2fcc <arch_swap>
	return ret;
    5d78:	e7d2      	b.n	5d20 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5d7a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5d7e:	f043 0308 	orr.w	r3, r3, #8
    5d82:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5d84:	f002 fe92 	bl	8aac <sys_dlist_remove>
}
    5d88:	e7d7      	b.n	5d3a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    5d8a:	4628      	mov	r0, r5
    5d8c:	f002 fe96 	bl	8abc <unpend_thread_no_timeout>
    5d90:	f105 0018 	add.w	r0, r5, #24
    5d94:	f002 ff2c 	bl	8bf0 <z_abort_timeout>
    5d98:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5d9c:	4628      	mov	r0, r5
    5d9e:	f7ff fdc1 	bl	5924 <ready_thread>
    5da2:	e7d7      	b.n	5d54 <z_thread_abort+0x50>
    5da4:	20000e88 	.word	0x20000e88

00005da8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5da8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5daa:	4806      	ldr	r0, [pc, #24]	; (5dc4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5dac:	4a06      	ldr	r2, [pc, #24]	; (5dc8 <z_data_copy+0x20>)
    5dae:	4907      	ldr	r1, [pc, #28]	; (5dcc <z_data_copy+0x24>)
    5db0:	1a12      	subs	r2, r2, r0
    5db2:	f002 fe18 	bl	89e6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5dba:	4a05      	ldr	r2, [pc, #20]	; (5dd0 <z_data_copy+0x28>)
    5dbc:	4905      	ldr	r1, [pc, #20]	; (5dd4 <z_data_copy+0x2c>)
    5dbe:	4806      	ldr	r0, [pc, #24]	; (5dd8 <z_data_copy+0x30>)
    5dc0:	f002 be11 	b.w	89e6 <z_early_memcpy>
    5dc4:	20000000 	.word	0x20000000
    5dc8:	2000060c 	.word	0x2000060c
    5dcc:	0000ac4c 	.word	0x0000ac4c
    5dd0:	00000000 	.word	0x00000000
    5dd4:	0000ac4c 	.word	0x0000ac4c
    5dd8:	20000000 	.word	0x20000000

00005ddc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5ddc:	4b03      	ldr	r3, [pc, #12]	; (5dec <elapsed+0x10>)
    5dde:	681b      	ldr	r3, [r3, #0]
    5de0:	b90b      	cbnz	r3, 5de6 <elapsed+0xa>
    5de2:	f7fe bbdb 	b.w	459c <sys_clock_elapsed>
}
    5de6:	2000      	movs	r0, #0
    5de8:	4770      	bx	lr
    5dea:	bf00      	nop
    5dec:	20000ec0 	.word	0x20000ec0

00005df0 <next_timeout>:
	return list->head == list;
    5df0:	4b10      	ldr	r3, [pc, #64]	; (5e34 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5df2:	b510      	push	{r4, lr}
    5df4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5df6:	429c      	cmp	r4, r3
    5df8:	bf08      	it	eq
    5dfa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5dfc:	f7ff ffee 	bl	5ddc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5e00:	b1a4      	cbz	r4, 5e2c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5e02:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5e06:	1a1b      	subs	r3, r3, r0
    5e08:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5e10:	f170 0200 	sbcs.w	r2, r0, #0
    5e14:	da0a      	bge.n	5e2c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5e16:	2800      	cmp	r0, #0
    5e18:	bfac      	ite	ge
    5e1a:	4618      	movge	r0, r3
    5e1c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5e1e:	4b06      	ldr	r3, [pc, #24]	; (5e38 <next_timeout+0x48>)
    5e20:	691b      	ldr	r3, [r3, #16]
    5e22:	b113      	cbz	r3, 5e2a <next_timeout+0x3a>
    5e24:	4298      	cmp	r0, r3
    5e26:	bfa8      	it	ge
    5e28:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5e2a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5e2c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5e30:	e7f5      	b.n	5e1e <next_timeout+0x2e>
    5e32:	bf00      	nop
    5e34:	20000334 	.word	0x20000334
    5e38:	20000e88 	.word	0x20000e88

00005e3c <remove_timeout>:
{
    5e3c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5e3e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5e40:	b168      	cbz	r0, 5e5e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5e42:	4a0a      	ldr	r2, [pc, #40]	; (5e6c <remove_timeout+0x30>)
    5e44:	6852      	ldr	r2, [r2, #4]
    5e46:	4290      	cmp	r0, r2
    5e48:	d009      	beq.n	5e5e <remove_timeout+0x22>
	if (next(t) != NULL) {
    5e4a:	b143      	cbz	r3, 5e5e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5e4c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5e50:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5e54:	1912      	adds	r2, r2, r4
    5e56:	eb41 0105 	adc.w	r1, r1, r5
    5e5a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5e5e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5e60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5e62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5e64:	2300      	movs	r3, #0
	node->prev = NULL;
    5e66:	e9c0 3300 	strd	r3, r3, [r0]
}
    5e6a:	bd30      	pop	{r4, r5, pc}
    5e6c:	20000334 	.word	0x20000334

00005e70 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5e74:	bf08      	it	eq
    5e76:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e7c:	4604      	mov	r4, r0
    5e7e:	461f      	mov	r7, r3
    5e80:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5e82:	d065      	beq.n	5f50 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5e84:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5e86:	f04f 0320 	mov.w	r3, #32
    5e8a:	f3ef 8611 	mrs	r6, BASEPRI
    5e8e:	f383 8812 	msr	BASEPRI_MAX, r3
    5e92:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5e96:	f06f 0201 	mvn.w	r2, #1
    5e9a:	1b53      	subs	r3, r2, r5
    5e9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5ea0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	db1b      	blt.n	5ee0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5ea8:	4b2a      	ldr	r3, [pc, #168]	; (5f54 <z_add_timeout+0xe4>)
    5eaa:	e9d3 1300 	ldrd	r1, r3, [r3]
    5eae:	1a52      	subs	r2, r2, r1
    5eb0:	eb6c 0303 	sbc.w	r3, ip, r3
    5eb4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    5eb6:	eb63 0307 	sbc.w	r3, r3, r7
    5eba:	2d01      	cmp	r5, #1
    5ebc:	f173 0200 	sbcs.w	r2, r3, #0
    5ec0:	da01      	bge.n	5ec6 <z_add_timeout+0x56>
    5ec2:	2501      	movs	r5, #1
    5ec4:	2300      	movs	r3, #0
	return list->head == list;
    5ec6:	4824      	ldr	r0, [pc, #144]	; (5f58 <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5ec8:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
    5ecc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ed0:	4283      	cmp	r3, r0
    5ed2:	d116      	bne.n	5f02 <z_add_timeout+0x92>
	node->prev = tail;
    5ed4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5ed8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5edc:	6044      	str	r4, [r0, #4]
}
    5ede:	e024      	b.n	5f2a <z_add_timeout+0xba>
    5ee0:	f7ff ff7c 	bl	5ddc <elapsed>
    5ee4:	3501      	adds	r5, #1
    5ee6:	f147 0300 	adc.w	r3, r7, #0
    5eea:	182d      	adds	r5, r5, r0
    5eec:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    5ef0:	e7e9      	b.n	5ec6 <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5ef2:	1a52      	subs	r2, r2, r1
    5ef4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5ef8:	459c      	cmp	ip, r3
    5efa:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5efe:	d0e9      	beq.n	5ed4 <z_add_timeout+0x64>
    5f00:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5f02:	2b00      	cmp	r3, #0
    5f04:	d0e6      	beq.n	5ed4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5f06:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5f0a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5f0e:	428a      	cmp	r2, r1
    5f10:	eb75 0e07 	sbcs.w	lr, r5, r7
    5f14:	daed      	bge.n	5ef2 <z_add_timeout+0x82>
				t->dticks -= to->dticks;
    5f16:	1a8a      	subs	r2, r1, r2
    5f18:	eb67 0505 	sbc.w	r5, r7, r5
    5f1c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5f20:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5f22:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5f26:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5f28:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5f2a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f2c:	4283      	cmp	r3, r0
    5f2e:	d00b      	beq.n	5f48 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5f30:	429c      	cmp	r4, r3
    5f32:	d109      	bne.n	5f48 <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5f34:	f7ff ff5c 	bl	5df0 <next_timeout>

			if (next_time == 0 ||
    5f38:	b118      	cbz	r0, 5f42 <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
    5f3a:	4b08      	ldr	r3, [pc, #32]	; (5f5c <z_add_timeout+0xec>)
			if (next_time == 0 ||
    5f3c:	691b      	ldr	r3, [r3, #16]
    5f3e:	4283      	cmp	r3, r0
    5f40:	d002      	beq.n	5f48 <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
    5f42:	2100      	movs	r1, #0
    5f44:	f7fe faf8 	bl	4538 <sys_clock_set_timeout>
	__asm__ volatile(
    5f48:	f386 8811 	msr	BASEPRI, r6
    5f4c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f52:	bf00      	nop
    5f54:	200007b0 	.word	0x200007b0
    5f58:	20000334 	.word	0x20000334
    5f5c:	20000e88 	.word	0x20000e88

00005f60 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f64:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5f66:	f7ff fc9b 	bl	58a0 <z_time_slice>
	__asm__ volatile(
    5f6a:	f04f 0320 	mov.w	r3, #32
    5f6e:	f3ef 8411 	mrs	r4, BASEPRI
    5f72:	f383 8812 	msr	BASEPRI_MAX, r3
    5f76:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5f7a:	4e24      	ldr	r6, [pc, #144]	; (600c <sys_clock_announce+0xac>)
	return list->head == list;
    5f7c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6014 <sys_clock_announce+0xb4>
    5f80:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5f82:	4d23      	ldr	r5, [pc, #140]	; (6010 <sys_clock_announce+0xb0>)
    5f84:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5f88:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f8a:	4540      	cmp	r0, r8
		curr_tick += dt;
    5f8c:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5f90:	ea4f 77e2 	mov.w	r7, r2, asr #31
    5f94:	d00b      	beq.n	5fae <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5f96:	b150      	cbz	r0, 5fae <sys_clock_announce+0x4e>
    5f98:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5f9c:	429a      	cmp	r2, r3
    5f9e:	eb77 090c 	sbcs.w	r9, r7, ip
    5fa2:	da16      	bge.n	5fd2 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5fa4:	1a9b      	subs	r3, r3, r2
    5fa6:	eb6c 0c07 	sbc.w	ip, ip, r7
    5faa:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5fae:	1852      	adds	r2, r2, r1
    5fb0:	eb4e 0707 	adc.w	r7, lr, r7
    5fb4:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5fb8:	2500      	movs	r5, #0
    5fba:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5fbc:	f7ff ff18 	bl	5df0 <next_timeout>
    5fc0:	4629      	mov	r1, r5
    5fc2:	f7fe fab9 	bl	4538 <sys_clock_set_timeout>
	__asm__ volatile(
    5fc6:	f384 8811 	msr	BASEPRI, r4
    5fca:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5fd2:	1859      	adds	r1, r3, r1
    5fd4:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5fd8:	1ad3      	subs	r3, r2, r3
    5fda:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5fdc:	2200      	movs	r2, #0
    5fde:	2300      	movs	r3, #0
    5fe0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5fe4:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5fe8:	f7ff ff28 	bl	5e3c <remove_timeout>
    5fec:	f384 8811 	msr	BASEPRI, r4
    5ff0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5ff4:	6883      	ldr	r3, [r0, #8]
    5ff6:	4798      	blx	r3
	__asm__ volatile(
    5ff8:	f04f 0320 	mov.w	r3, #32
    5ffc:	f3ef 8411 	mrs	r4, BASEPRI
    6000:	f383 8812 	msr	BASEPRI_MAX, r3
    6004:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    6008:	e7bc      	b.n	5f84 <sys_clock_announce+0x24>
    600a:	bf00      	nop
    600c:	20000ec0 	.word	0x20000ec0
    6010:	200007b0 	.word	0x200007b0
    6014:	20000334 	.word	0x20000334

00006018 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6018:	b510      	push	{r4, lr}
    601a:	f04f 0320 	mov.w	r3, #32
    601e:	f3ef 8411 	mrs	r4, BASEPRI
    6022:	f383 8812 	msr	BASEPRI_MAX, r3
    6026:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    602a:	f7fe fab7 	bl	459c <sys_clock_elapsed>
    602e:	4a05      	ldr	r2, [pc, #20]	; (6044 <sys_clock_tick_get+0x2c>)
    6030:	e9d2 3100 	ldrd	r3, r1, [r2]
    6034:	18c0      	adds	r0, r0, r3
    6036:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    603a:	f384 8811 	msr	BASEPRI, r4
    603e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6042:	bd10      	pop	{r4, pc}
    6044:	200007b0 	.word	0x200007b0

00006048 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6048:	4a02      	ldr	r2, [pc, #8]	; (6054 <boot_banner+0xc>)
    604a:	4903      	ldr	r1, [pc, #12]	; (6058 <boot_banner+0x10>)
    604c:	4803      	ldr	r0, [pc, #12]	; (605c <boot_banner+0x14>)
    604e:	f001 bed0 	b.w	7df2 <printk>
    6052:	bf00      	nop
    6054:	0000a825 	.word	0x0000a825
    6058:	0000a95b 	.word	0x0000a95b
    605c:	0000a968 	.word	0x0000a968

00006060 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    6060:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6062:	4c06      	ldr	r4, [pc, #24]	; (607c <statics_init+0x1c>)
    6064:	4d06      	ldr	r5, [pc, #24]	; (6080 <statics_init+0x20>)
    6066:	42ac      	cmp	r4, r5
    6068:	d301      	bcc.n	606e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    606a:	2000      	movs	r0, #0
    606c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    606e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    6072:	4620      	mov	r0, r4
    6074:	f002 fe05 	bl	8c82 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6078:	3418      	adds	r4, #24
    607a:	e7f4      	b.n	6066 <statics_init+0x6>
    607c:	20000580 	.word	0x20000580
    6080:	20000580 	.word	0x20000580

00006084 <__assert_func>:
    6084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6086:	4614      	mov	r4, r2
    6088:	461a      	mov	r2, r3
    608a:	4b09      	ldr	r3, [pc, #36]	; (60b0 <__assert_func+0x2c>)
    608c:	681b      	ldr	r3, [r3, #0]
    608e:	4605      	mov	r5, r0
    6090:	68d8      	ldr	r0, [r3, #12]
    6092:	b14c      	cbz	r4, 60a8 <__assert_func+0x24>
    6094:	4b07      	ldr	r3, [pc, #28]	; (60b4 <__assert_func+0x30>)
    6096:	9100      	str	r1, [sp, #0]
    6098:	e9cd 3401 	strd	r3, r4, [sp, #4]
    609c:	4906      	ldr	r1, [pc, #24]	; (60b8 <__assert_func+0x34>)
    609e:	462b      	mov	r3, r5
    60a0:	f000 f80e 	bl	60c0 <fiprintf>
    60a4:	f002 fdf8 	bl	8c98 <abort>
    60a8:	4b04      	ldr	r3, [pc, #16]	; (60bc <__assert_func+0x38>)
    60aa:	461c      	mov	r4, r3
    60ac:	e7f3      	b.n	6096 <__assert_func+0x12>
    60ae:	bf00      	nop
    60b0:	2000033c 	.word	0x2000033c
    60b4:	0000a98f 	.word	0x0000a98f
    60b8:	0000a99c 	.word	0x0000a99c
    60bc:	0000a825 	.word	0x0000a825

000060c0 <fiprintf>:
    60c0:	b40e      	push	{r1, r2, r3}
    60c2:	b503      	push	{r0, r1, lr}
    60c4:	4601      	mov	r1, r0
    60c6:	ab03      	add	r3, sp, #12
    60c8:	4805      	ldr	r0, [pc, #20]	; (60e0 <fiprintf+0x20>)
    60ca:	f853 2b04 	ldr.w	r2, [r3], #4
    60ce:	6800      	ldr	r0, [r0, #0]
    60d0:	9301      	str	r3, [sp, #4]
    60d2:	f000 f8f7 	bl	62c4 <_vfiprintf_r>
    60d6:	b002      	add	sp, #8
    60d8:	f85d eb04 	ldr.w	lr, [sp], #4
    60dc:	b003      	add	sp, #12
    60de:	4770      	bx	lr
    60e0:	2000033c 	.word	0x2000033c

000060e4 <malloc>:
    60e4:	4b02      	ldr	r3, [pc, #8]	; (60f0 <malloc+0xc>)
    60e6:	4601      	mov	r1, r0
    60e8:	6818      	ldr	r0, [r3, #0]
    60ea:	f000 b877 	b.w	61dc <_malloc_r>
    60ee:	bf00      	nop
    60f0:	2000033c 	.word	0x2000033c

000060f4 <free>:
    60f4:	4b02      	ldr	r3, [pc, #8]	; (6100 <free+0xc>)
    60f6:	4601      	mov	r1, r0
    60f8:	6818      	ldr	r0, [r3, #0]
    60fa:	f000 b803 	b.w	6104 <_free_r>
    60fe:	bf00      	nop
    6100:	2000033c 	.word	0x2000033c

00006104 <_free_r>:
    6104:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6106:	2900      	cmp	r1, #0
    6108:	d044      	beq.n	6194 <_free_r+0x90>
    610a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    610e:	9001      	str	r0, [sp, #4]
    6110:	2b00      	cmp	r3, #0
    6112:	f1a1 0404 	sub.w	r4, r1, #4
    6116:	bfb8      	it	lt
    6118:	18e4      	addlt	r4, r4, r3
    611a:	f001 f8d5 	bl	72c8 <__malloc_lock>
    611e:	4a1e      	ldr	r2, [pc, #120]	; (6198 <_free_r+0x94>)
    6120:	9801      	ldr	r0, [sp, #4]
    6122:	6813      	ldr	r3, [r2, #0]
    6124:	b933      	cbnz	r3, 6134 <_free_r+0x30>
    6126:	6063      	str	r3, [r4, #4]
    6128:	6014      	str	r4, [r2, #0]
    612a:	b003      	add	sp, #12
    612c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6130:	f001 b8d0 	b.w	72d4 <__malloc_unlock>
    6134:	42a3      	cmp	r3, r4
    6136:	d908      	bls.n	614a <_free_r+0x46>
    6138:	6825      	ldr	r5, [r4, #0]
    613a:	1961      	adds	r1, r4, r5
    613c:	428b      	cmp	r3, r1
    613e:	bf01      	itttt	eq
    6140:	6819      	ldreq	r1, [r3, #0]
    6142:	685b      	ldreq	r3, [r3, #4]
    6144:	1949      	addeq	r1, r1, r5
    6146:	6021      	streq	r1, [r4, #0]
    6148:	e7ed      	b.n	6126 <_free_r+0x22>
    614a:	461a      	mov	r2, r3
    614c:	685b      	ldr	r3, [r3, #4]
    614e:	b10b      	cbz	r3, 6154 <_free_r+0x50>
    6150:	42a3      	cmp	r3, r4
    6152:	d9fa      	bls.n	614a <_free_r+0x46>
    6154:	6811      	ldr	r1, [r2, #0]
    6156:	1855      	adds	r5, r2, r1
    6158:	42a5      	cmp	r5, r4
    615a:	d10b      	bne.n	6174 <_free_r+0x70>
    615c:	6824      	ldr	r4, [r4, #0]
    615e:	4421      	add	r1, r4
    6160:	1854      	adds	r4, r2, r1
    6162:	42a3      	cmp	r3, r4
    6164:	6011      	str	r1, [r2, #0]
    6166:	d1e0      	bne.n	612a <_free_r+0x26>
    6168:	681c      	ldr	r4, [r3, #0]
    616a:	685b      	ldr	r3, [r3, #4]
    616c:	6053      	str	r3, [r2, #4]
    616e:	4421      	add	r1, r4
    6170:	6011      	str	r1, [r2, #0]
    6172:	e7da      	b.n	612a <_free_r+0x26>
    6174:	d902      	bls.n	617c <_free_r+0x78>
    6176:	230c      	movs	r3, #12
    6178:	6003      	str	r3, [r0, #0]
    617a:	e7d6      	b.n	612a <_free_r+0x26>
    617c:	6825      	ldr	r5, [r4, #0]
    617e:	1961      	adds	r1, r4, r5
    6180:	428b      	cmp	r3, r1
    6182:	bf04      	itt	eq
    6184:	6819      	ldreq	r1, [r3, #0]
    6186:	685b      	ldreq	r3, [r3, #4]
    6188:	6063      	str	r3, [r4, #4]
    618a:	bf04      	itt	eq
    618c:	1949      	addeq	r1, r1, r5
    618e:	6021      	streq	r1, [r4, #0]
    6190:	6054      	str	r4, [r2, #4]
    6192:	e7ca      	b.n	612a <_free_r+0x26>
    6194:	b003      	add	sp, #12
    6196:	bd30      	pop	{r4, r5, pc}
    6198:	20000ec4 	.word	0x20000ec4

0000619c <sbrk_aligned>:
    619c:	b570      	push	{r4, r5, r6, lr}
    619e:	4e0e      	ldr	r6, [pc, #56]	; (61d8 <sbrk_aligned+0x3c>)
    61a0:	460c      	mov	r4, r1
    61a2:	6831      	ldr	r1, [r6, #0]
    61a4:	4605      	mov	r5, r0
    61a6:	b911      	cbnz	r1, 61ae <sbrk_aligned+0x12>
    61a8:	f000 fd18 	bl	6bdc <_sbrk_r>
    61ac:	6030      	str	r0, [r6, #0]
    61ae:	4621      	mov	r1, r4
    61b0:	4628      	mov	r0, r5
    61b2:	f000 fd13 	bl	6bdc <_sbrk_r>
    61b6:	1c43      	adds	r3, r0, #1
    61b8:	d00a      	beq.n	61d0 <sbrk_aligned+0x34>
    61ba:	1cc4      	adds	r4, r0, #3
    61bc:	f024 0403 	bic.w	r4, r4, #3
    61c0:	42a0      	cmp	r0, r4
    61c2:	d007      	beq.n	61d4 <sbrk_aligned+0x38>
    61c4:	1a21      	subs	r1, r4, r0
    61c6:	4628      	mov	r0, r5
    61c8:	f000 fd08 	bl	6bdc <_sbrk_r>
    61cc:	3001      	adds	r0, #1
    61ce:	d101      	bne.n	61d4 <sbrk_aligned+0x38>
    61d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    61d4:	4620      	mov	r0, r4
    61d6:	bd70      	pop	{r4, r5, r6, pc}
    61d8:	20000ec8 	.word	0x20000ec8

000061dc <_malloc_r>:
    61dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61e0:	1ccd      	adds	r5, r1, #3
    61e2:	f025 0503 	bic.w	r5, r5, #3
    61e6:	3508      	adds	r5, #8
    61e8:	2d0c      	cmp	r5, #12
    61ea:	bf38      	it	cc
    61ec:	250c      	movcc	r5, #12
    61ee:	2d00      	cmp	r5, #0
    61f0:	4607      	mov	r7, r0
    61f2:	db01      	blt.n	61f8 <_malloc_r+0x1c>
    61f4:	42a9      	cmp	r1, r5
    61f6:	d905      	bls.n	6204 <_malloc_r+0x28>
    61f8:	230c      	movs	r3, #12
    61fa:	603b      	str	r3, [r7, #0]
    61fc:	2600      	movs	r6, #0
    61fe:	4630      	mov	r0, r6
    6200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6204:	4e2e      	ldr	r6, [pc, #184]	; (62c0 <_malloc_r+0xe4>)
    6206:	f001 f85f 	bl	72c8 <__malloc_lock>
    620a:	6833      	ldr	r3, [r6, #0]
    620c:	461c      	mov	r4, r3
    620e:	bb34      	cbnz	r4, 625e <_malloc_r+0x82>
    6210:	4629      	mov	r1, r5
    6212:	4638      	mov	r0, r7
    6214:	f7ff ffc2 	bl	619c <sbrk_aligned>
    6218:	1c43      	adds	r3, r0, #1
    621a:	4604      	mov	r4, r0
    621c:	d14d      	bne.n	62ba <_malloc_r+0xde>
    621e:	6834      	ldr	r4, [r6, #0]
    6220:	4626      	mov	r6, r4
    6222:	2e00      	cmp	r6, #0
    6224:	d140      	bne.n	62a8 <_malloc_r+0xcc>
    6226:	6823      	ldr	r3, [r4, #0]
    6228:	4631      	mov	r1, r6
    622a:	4638      	mov	r0, r7
    622c:	eb04 0803 	add.w	r8, r4, r3
    6230:	f000 fcd4 	bl	6bdc <_sbrk_r>
    6234:	4580      	cmp	r8, r0
    6236:	d13a      	bne.n	62ae <_malloc_r+0xd2>
    6238:	6821      	ldr	r1, [r4, #0]
    623a:	3503      	adds	r5, #3
    623c:	1a6d      	subs	r5, r5, r1
    623e:	f025 0503 	bic.w	r5, r5, #3
    6242:	3508      	adds	r5, #8
    6244:	2d0c      	cmp	r5, #12
    6246:	bf38      	it	cc
    6248:	250c      	movcc	r5, #12
    624a:	4629      	mov	r1, r5
    624c:	4638      	mov	r0, r7
    624e:	f7ff ffa5 	bl	619c <sbrk_aligned>
    6252:	3001      	adds	r0, #1
    6254:	d02b      	beq.n	62ae <_malloc_r+0xd2>
    6256:	6823      	ldr	r3, [r4, #0]
    6258:	442b      	add	r3, r5
    625a:	6023      	str	r3, [r4, #0]
    625c:	e00e      	b.n	627c <_malloc_r+0xa0>
    625e:	6822      	ldr	r2, [r4, #0]
    6260:	1b52      	subs	r2, r2, r5
    6262:	d41e      	bmi.n	62a2 <_malloc_r+0xc6>
    6264:	2a0b      	cmp	r2, #11
    6266:	d916      	bls.n	6296 <_malloc_r+0xba>
    6268:	1961      	adds	r1, r4, r5
    626a:	42a3      	cmp	r3, r4
    626c:	6025      	str	r5, [r4, #0]
    626e:	bf18      	it	ne
    6270:	6059      	strne	r1, [r3, #4]
    6272:	6863      	ldr	r3, [r4, #4]
    6274:	bf08      	it	eq
    6276:	6031      	streq	r1, [r6, #0]
    6278:	5162      	str	r2, [r4, r5]
    627a:	604b      	str	r3, [r1, #4]
    627c:	4638      	mov	r0, r7
    627e:	f104 060b 	add.w	r6, r4, #11
    6282:	f001 f827 	bl	72d4 <__malloc_unlock>
    6286:	f026 0607 	bic.w	r6, r6, #7
    628a:	1d23      	adds	r3, r4, #4
    628c:	1af2      	subs	r2, r6, r3
    628e:	d0b6      	beq.n	61fe <_malloc_r+0x22>
    6290:	1b9b      	subs	r3, r3, r6
    6292:	50a3      	str	r3, [r4, r2]
    6294:	e7b3      	b.n	61fe <_malloc_r+0x22>
    6296:	6862      	ldr	r2, [r4, #4]
    6298:	42a3      	cmp	r3, r4
    629a:	bf0c      	ite	eq
    629c:	6032      	streq	r2, [r6, #0]
    629e:	605a      	strne	r2, [r3, #4]
    62a0:	e7ec      	b.n	627c <_malloc_r+0xa0>
    62a2:	4623      	mov	r3, r4
    62a4:	6864      	ldr	r4, [r4, #4]
    62a6:	e7b2      	b.n	620e <_malloc_r+0x32>
    62a8:	4634      	mov	r4, r6
    62aa:	6876      	ldr	r6, [r6, #4]
    62ac:	e7b9      	b.n	6222 <_malloc_r+0x46>
    62ae:	230c      	movs	r3, #12
    62b0:	603b      	str	r3, [r7, #0]
    62b2:	4638      	mov	r0, r7
    62b4:	f001 f80e 	bl	72d4 <__malloc_unlock>
    62b8:	e7a1      	b.n	61fe <_malloc_r+0x22>
    62ba:	6025      	str	r5, [r4, #0]
    62bc:	e7de      	b.n	627c <_malloc_r+0xa0>
    62be:	bf00      	nop
    62c0:	20000ec4 	.word	0x20000ec4

000062c4 <_vfiprintf_r>:
    62c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62c8:	460d      	mov	r5, r1
    62ca:	b09d      	sub	sp, #116	; 0x74
    62cc:	4614      	mov	r4, r2
    62ce:	4698      	mov	r8, r3
    62d0:	4606      	mov	r6, r0
    62d2:	b118      	cbz	r0, 62dc <_vfiprintf_r+0x18>
    62d4:	6983      	ldr	r3, [r0, #24]
    62d6:	b90b      	cbnz	r3, 62dc <_vfiprintf_r+0x18>
    62d8:	f000 ff34 	bl	7144 <__sinit>
    62dc:	4b89      	ldr	r3, [pc, #548]	; (6504 <_vfiprintf_r+0x240>)
    62de:	429d      	cmp	r5, r3
    62e0:	d11b      	bne.n	631a <_vfiprintf_r+0x56>
    62e2:	6875      	ldr	r5, [r6, #4]
    62e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    62e6:	07d9      	lsls	r1, r3, #31
    62e8:	d405      	bmi.n	62f6 <_vfiprintf_r+0x32>
    62ea:	89ab      	ldrh	r3, [r5, #12]
    62ec:	059a      	lsls	r2, r3, #22
    62ee:	d402      	bmi.n	62f6 <_vfiprintf_r+0x32>
    62f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    62f2:	f001 ff3e 	bl	8172 <__retarget_lock_acquire_recursive>
    62f6:	89ab      	ldrh	r3, [r5, #12]
    62f8:	071b      	lsls	r3, r3, #28
    62fa:	d501      	bpl.n	6300 <_vfiprintf_r+0x3c>
    62fc:	692b      	ldr	r3, [r5, #16]
    62fe:	b9eb      	cbnz	r3, 633c <_vfiprintf_r+0x78>
    6300:	4629      	mov	r1, r5
    6302:	4630      	mov	r0, r6
    6304:	f000 fdac 	bl	6e60 <__swsetup_r>
    6308:	b1c0      	cbz	r0, 633c <_vfiprintf_r+0x78>
    630a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    630c:	07dc      	lsls	r4, r3, #31
    630e:	d50e      	bpl.n	632e <_vfiprintf_r+0x6a>
    6310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6314:	b01d      	add	sp, #116	; 0x74
    6316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    631a:	4b7b      	ldr	r3, [pc, #492]	; (6508 <_vfiprintf_r+0x244>)
    631c:	429d      	cmp	r5, r3
    631e:	d101      	bne.n	6324 <_vfiprintf_r+0x60>
    6320:	68b5      	ldr	r5, [r6, #8]
    6322:	e7df      	b.n	62e4 <_vfiprintf_r+0x20>
    6324:	4b79      	ldr	r3, [pc, #484]	; (650c <_vfiprintf_r+0x248>)
    6326:	429d      	cmp	r5, r3
    6328:	bf08      	it	eq
    632a:	68f5      	ldreq	r5, [r6, #12]
    632c:	e7da      	b.n	62e4 <_vfiprintf_r+0x20>
    632e:	89ab      	ldrh	r3, [r5, #12]
    6330:	0598      	lsls	r0, r3, #22
    6332:	d4ed      	bmi.n	6310 <_vfiprintf_r+0x4c>
    6334:	6da8      	ldr	r0, [r5, #88]	; 0x58
    6336:	f001 ff22 	bl	817e <__retarget_lock_release_recursive>
    633a:	e7e9      	b.n	6310 <_vfiprintf_r+0x4c>
    633c:	2300      	movs	r3, #0
    633e:	9309      	str	r3, [sp, #36]	; 0x24
    6340:	2320      	movs	r3, #32
    6342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    6346:	f8cd 800c 	str.w	r8, [sp, #12]
    634a:	2330      	movs	r3, #48	; 0x30
    634c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 6510 <_vfiprintf_r+0x24c>
    6350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    6354:	f04f 0901 	mov.w	r9, #1
    6358:	4623      	mov	r3, r4
    635a:	469a      	mov	sl, r3
    635c:	f813 2b01 	ldrb.w	r2, [r3], #1
    6360:	b10a      	cbz	r2, 6366 <_vfiprintf_r+0xa2>
    6362:	2a25      	cmp	r2, #37	; 0x25
    6364:	d1f9      	bne.n	635a <_vfiprintf_r+0x96>
    6366:	ebba 0b04 	subs.w	fp, sl, r4
    636a:	d00b      	beq.n	6384 <_vfiprintf_r+0xc0>
    636c:	465b      	mov	r3, fp
    636e:	4622      	mov	r2, r4
    6370:	4629      	mov	r1, r5
    6372:	4630      	mov	r0, r6
    6374:	f002 fcda 	bl	8d2c <__sfputs_r>
    6378:	3001      	adds	r0, #1
    637a:	f000 80aa 	beq.w	64d2 <_vfiprintf_r+0x20e>
    637e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6380:	445a      	add	r2, fp
    6382:	9209      	str	r2, [sp, #36]	; 0x24
    6384:	f89a 3000 	ldrb.w	r3, [sl]
    6388:	2b00      	cmp	r3, #0
    638a:	f000 80a2 	beq.w	64d2 <_vfiprintf_r+0x20e>
    638e:	2300      	movs	r3, #0
    6390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6394:	e9cd 2305 	strd	r2, r3, [sp, #20]
    6398:	f10a 0a01 	add.w	sl, sl, #1
    639c:	9304      	str	r3, [sp, #16]
    639e:	9307      	str	r3, [sp, #28]
    63a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    63a4:	931a      	str	r3, [sp, #104]	; 0x68
    63a6:	4654      	mov	r4, sl
    63a8:	2205      	movs	r2, #5
    63aa:	f814 1b01 	ldrb.w	r1, [r4], #1
    63ae:	4858      	ldr	r0, [pc, #352]	; (6510 <_vfiprintf_r+0x24c>)
    63b0:	f7f9 fea6 	bl	100 <memchr>
    63b4:	9a04      	ldr	r2, [sp, #16]
    63b6:	b9d8      	cbnz	r0, 63f0 <_vfiprintf_r+0x12c>
    63b8:	06d1      	lsls	r1, r2, #27
    63ba:	bf44      	itt	mi
    63bc:	2320      	movmi	r3, #32
    63be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    63c2:	0713      	lsls	r3, r2, #28
    63c4:	bf44      	itt	mi
    63c6:	232b      	movmi	r3, #43	; 0x2b
    63c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    63cc:	f89a 3000 	ldrb.w	r3, [sl]
    63d0:	2b2a      	cmp	r3, #42	; 0x2a
    63d2:	d015      	beq.n	6400 <_vfiprintf_r+0x13c>
    63d4:	9a07      	ldr	r2, [sp, #28]
    63d6:	4654      	mov	r4, sl
    63d8:	2000      	movs	r0, #0
    63da:	f04f 0c0a 	mov.w	ip, #10
    63de:	4621      	mov	r1, r4
    63e0:	f811 3b01 	ldrb.w	r3, [r1], #1
    63e4:	3b30      	subs	r3, #48	; 0x30
    63e6:	2b09      	cmp	r3, #9
    63e8:	d94e      	bls.n	6488 <_vfiprintf_r+0x1c4>
    63ea:	b1b0      	cbz	r0, 641a <_vfiprintf_r+0x156>
    63ec:	9207      	str	r2, [sp, #28]
    63ee:	e014      	b.n	641a <_vfiprintf_r+0x156>
    63f0:	eba0 0308 	sub.w	r3, r0, r8
    63f4:	fa09 f303 	lsl.w	r3, r9, r3
    63f8:	4313      	orrs	r3, r2
    63fa:	9304      	str	r3, [sp, #16]
    63fc:	46a2      	mov	sl, r4
    63fe:	e7d2      	b.n	63a6 <_vfiprintf_r+0xe2>
    6400:	9b03      	ldr	r3, [sp, #12]
    6402:	1d19      	adds	r1, r3, #4
    6404:	681b      	ldr	r3, [r3, #0]
    6406:	9103      	str	r1, [sp, #12]
    6408:	2b00      	cmp	r3, #0
    640a:	bfbb      	ittet	lt
    640c:	425b      	neglt	r3, r3
    640e:	f042 0202 	orrlt.w	r2, r2, #2
    6412:	9307      	strge	r3, [sp, #28]
    6414:	9307      	strlt	r3, [sp, #28]
    6416:	bfb8      	it	lt
    6418:	9204      	strlt	r2, [sp, #16]
    641a:	7823      	ldrb	r3, [r4, #0]
    641c:	2b2e      	cmp	r3, #46	; 0x2e
    641e:	d10c      	bne.n	643a <_vfiprintf_r+0x176>
    6420:	7863      	ldrb	r3, [r4, #1]
    6422:	2b2a      	cmp	r3, #42	; 0x2a
    6424:	d135      	bne.n	6492 <_vfiprintf_r+0x1ce>
    6426:	9b03      	ldr	r3, [sp, #12]
    6428:	1d1a      	adds	r2, r3, #4
    642a:	681b      	ldr	r3, [r3, #0]
    642c:	9203      	str	r2, [sp, #12]
    642e:	2b00      	cmp	r3, #0
    6430:	bfb8      	it	lt
    6432:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    6436:	3402      	adds	r4, #2
    6438:	9305      	str	r3, [sp, #20]
    643a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 6520 <_vfiprintf_r+0x25c>
    643e:	7821      	ldrb	r1, [r4, #0]
    6440:	2203      	movs	r2, #3
    6442:	4650      	mov	r0, sl
    6444:	f7f9 fe5c 	bl	100 <memchr>
    6448:	b140      	cbz	r0, 645c <_vfiprintf_r+0x198>
    644a:	2340      	movs	r3, #64	; 0x40
    644c:	eba0 000a 	sub.w	r0, r0, sl
    6450:	fa03 f000 	lsl.w	r0, r3, r0
    6454:	9b04      	ldr	r3, [sp, #16]
    6456:	4303      	orrs	r3, r0
    6458:	3401      	adds	r4, #1
    645a:	9304      	str	r3, [sp, #16]
    645c:	f814 1b01 	ldrb.w	r1, [r4], #1
    6460:	482c      	ldr	r0, [pc, #176]	; (6514 <_vfiprintf_r+0x250>)
    6462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6466:	2206      	movs	r2, #6
    6468:	f7f9 fe4a 	bl	100 <memchr>
    646c:	2800      	cmp	r0, #0
    646e:	d03f      	beq.n	64f0 <_vfiprintf_r+0x22c>
    6470:	4b29      	ldr	r3, [pc, #164]	; (6518 <_vfiprintf_r+0x254>)
    6472:	bb1b      	cbnz	r3, 64bc <_vfiprintf_r+0x1f8>
    6474:	9b03      	ldr	r3, [sp, #12]
    6476:	3307      	adds	r3, #7
    6478:	f023 0307 	bic.w	r3, r3, #7
    647c:	3308      	adds	r3, #8
    647e:	9303      	str	r3, [sp, #12]
    6480:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6482:	443b      	add	r3, r7
    6484:	9309      	str	r3, [sp, #36]	; 0x24
    6486:	e767      	b.n	6358 <_vfiprintf_r+0x94>
    6488:	fb0c 3202 	mla	r2, ip, r2, r3
    648c:	460c      	mov	r4, r1
    648e:	2001      	movs	r0, #1
    6490:	e7a5      	b.n	63de <_vfiprintf_r+0x11a>
    6492:	2300      	movs	r3, #0
    6494:	3401      	adds	r4, #1
    6496:	9305      	str	r3, [sp, #20]
    6498:	4619      	mov	r1, r3
    649a:	f04f 0c0a 	mov.w	ip, #10
    649e:	4620      	mov	r0, r4
    64a0:	f810 2b01 	ldrb.w	r2, [r0], #1
    64a4:	3a30      	subs	r2, #48	; 0x30
    64a6:	2a09      	cmp	r2, #9
    64a8:	d903      	bls.n	64b2 <_vfiprintf_r+0x1ee>
    64aa:	2b00      	cmp	r3, #0
    64ac:	d0c5      	beq.n	643a <_vfiprintf_r+0x176>
    64ae:	9105      	str	r1, [sp, #20]
    64b0:	e7c3      	b.n	643a <_vfiprintf_r+0x176>
    64b2:	fb0c 2101 	mla	r1, ip, r1, r2
    64b6:	4604      	mov	r4, r0
    64b8:	2301      	movs	r3, #1
    64ba:	e7f0      	b.n	649e <_vfiprintf_r+0x1da>
    64bc:	ab03      	add	r3, sp, #12
    64be:	9300      	str	r3, [sp, #0]
    64c0:	462a      	mov	r2, r5
    64c2:	4b16      	ldr	r3, [pc, #88]	; (651c <_vfiprintf_r+0x258>)
    64c4:	a904      	add	r1, sp, #16
    64c6:	4630      	mov	r0, r6
    64c8:	f000 f82c 	bl	6524 <_printf_float>
    64cc:	4607      	mov	r7, r0
    64ce:	1c78      	adds	r0, r7, #1
    64d0:	d1d6      	bne.n	6480 <_vfiprintf_r+0x1bc>
    64d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    64d4:	07d9      	lsls	r1, r3, #31
    64d6:	d405      	bmi.n	64e4 <_vfiprintf_r+0x220>
    64d8:	89ab      	ldrh	r3, [r5, #12]
    64da:	059a      	lsls	r2, r3, #22
    64dc:	d402      	bmi.n	64e4 <_vfiprintf_r+0x220>
    64de:	6da8      	ldr	r0, [r5, #88]	; 0x58
    64e0:	f001 fe4d 	bl	817e <__retarget_lock_release_recursive>
    64e4:	89ab      	ldrh	r3, [r5, #12]
    64e6:	065b      	lsls	r3, r3, #25
    64e8:	f53f af12 	bmi.w	6310 <_vfiprintf_r+0x4c>
    64ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    64ee:	e711      	b.n	6314 <_vfiprintf_r+0x50>
    64f0:	ab03      	add	r3, sp, #12
    64f2:	9300      	str	r3, [sp, #0]
    64f4:	462a      	mov	r2, r5
    64f6:	4b09      	ldr	r3, [pc, #36]	; (651c <_vfiprintf_r+0x258>)
    64f8:	a904      	add	r1, sp, #16
    64fa:	4630      	mov	r0, r6
    64fc:	f000 fa48 	bl	6990 <_printf_i>
    6500:	e7e4      	b.n	64cc <_vfiprintf_r+0x208>
    6502:	bf00      	nop
    6504:	0000a724 	.word	0x0000a724
    6508:	0000a744 	.word	0x0000a744
    650c:	0000a704 	.word	0x0000a704
    6510:	0000aacc 	.word	0x0000aacc
    6514:	0000aad6 	.word	0x0000aad6
    6518:	00006525 	.word	0x00006525
    651c:	00008d2d 	.word	0x00008d2d
    6520:	0000aad2 	.word	0x0000aad2

00006524 <_printf_float>:
    6524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6528:	ed2d 8b02 	vpush	{d8}
    652c:	b08d      	sub	sp, #52	; 0x34
    652e:	460c      	mov	r4, r1
    6530:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    6534:	4616      	mov	r6, r2
    6536:	461f      	mov	r7, r3
    6538:	4605      	mov	r5, r0
    653a:	f000 fe81 	bl	7240 <_localeconv_r>
    653e:	f8d0 a000 	ldr.w	sl, [r0]
    6542:	4650      	mov	r0, sl
    6544:	f7fa fc42 	bl	dcc <strlen>
    6548:	2300      	movs	r3, #0
    654a:	930a      	str	r3, [sp, #40]	; 0x28
    654c:	6823      	ldr	r3, [r4, #0]
    654e:	9305      	str	r3, [sp, #20]
    6550:	f8d8 3000 	ldr.w	r3, [r8]
    6554:	f894 b018 	ldrb.w	fp, [r4, #24]
    6558:	3307      	adds	r3, #7
    655a:	f023 0307 	bic.w	r3, r3, #7
    655e:	f103 0208 	add.w	r2, r3, #8
    6562:	f8c8 2000 	str.w	r2, [r8]
    6566:	e9d3 2300 	ldrd	r2, r3, [r3]
    656a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    656e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
    6572:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    6576:	9307      	str	r3, [sp, #28]
    6578:	f8cd 8018 	str.w	r8, [sp, #24]
    657c:	ee08 0a10 	vmov	s16, r0
    6580:	4b9f      	ldr	r3, [pc, #636]	; (6800 <_printf_float+0x2dc>)
    6582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    6586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    658a:	f7fa fc09 	bl	da0 <__aeabi_dcmpun>
    658e:	bb88      	cbnz	r0, 65f4 <_printf_float+0xd0>
    6590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    6594:	4b9a      	ldr	r3, [pc, #616]	; (6800 <_printf_float+0x2dc>)
    6596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    659a:	f7fa fa39 	bl	a10 <__aeabi_dcmple>
    659e:	bb48      	cbnz	r0, 65f4 <_printf_float+0xd0>
    65a0:	2200      	movs	r2, #0
    65a2:	2300      	movs	r3, #0
    65a4:	4640      	mov	r0, r8
    65a6:	4649      	mov	r1, r9
    65a8:	f7fa fa28 	bl	9fc <__aeabi_dcmplt>
    65ac:	b110      	cbz	r0, 65b4 <_printf_float+0x90>
    65ae:	232d      	movs	r3, #45	; 0x2d
    65b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    65b4:	4b93      	ldr	r3, [pc, #588]	; (6804 <_printf_float+0x2e0>)
    65b6:	4894      	ldr	r0, [pc, #592]	; (6808 <_printf_float+0x2e4>)
    65b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
    65bc:	bf94      	ite	ls
    65be:	4698      	movls	r8, r3
    65c0:	4680      	movhi	r8, r0
    65c2:	2303      	movs	r3, #3
    65c4:	6123      	str	r3, [r4, #16]
    65c6:	9b05      	ldr	r3, [sp, #20]
    65c8:	f023 0204 	bic.w	r2, r3, #4
    65cc:	6022      	str	r2, [r4, #0]
    65ce:	f04f 0900 	mov.w	r9, #0
    65d2:	9700      	str	r7, [sp, #0]
    65d4:	4633      	mov	r3, r6
    65d6:	aa0b      	add	r2, sp, #44	; 0x2c
    65d8:	4621      	mov	r1, r4
    65da:	4628      	mov	r0, r5
    65dc:	f002 fc58 	bl	8e90 <_printf_common>
    65e0:	3001      	adds	r0, #1
    65e2:	f040 8090 	bne.w	6706 <_printf_float+0x1e2>
    65e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    65ea:	b00d      	add	sp, #52	; 0x34
    65ec:	ecbd 8b02 	vpop	{d8}
    65f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65f4:	4642      	mov	r2, r8
    65f6:	464b      	mov	r3, r9
    65f8:	4640      	mov	r0, r8
    65fa:	4649      	mov	r1, r9
    65fc:	f7fa fbd0 	bl	da0 <__aeabi_dcmpun>
    6600:	b140      	cbz	r0, 6614 <_printf_float+0xf0>
    6602:	464b      	mov	r3, r9
    6604:	2b00      	cmp	r3, #0
    6606:	bfbc      	itt	lt
    6608:	232d      	movlt	r3, #45	; 0x2d
    660a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
    660e:	487f      	ldr	r0, [pc, #508]	; (680c <_printf_float+0x2e8>)
    6610:	4b7f      	ldr	r3, [pc, #508]	; (6810 <_printf_float+0x2ec>)
    6612:	e7d1      	b.n	65b8 <_printf_float+0x94>
    6614:	6863      	ldr	r3, [r4, #4]
    6616:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    661a:	9206      	str	r2, [sp, #24]
    661c:	1c5a      	adds	r2, r3, #1
    661e:	d13f      	bne.n	66a0 <_printf_float+0x17c>
    6620:	2306      	movs	r3, #6
    6622:	6063      	str	r3, [r4, #4]
    6624:	9b05      	ldr	r3, [sp, #20]
    6626:	6861      	ldr	r1, [r4, #4]
    6628:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    662c:	2300      	movs	r3, #0
    662e:	9303      	str	r3, [sp, #12]
    6630:	ab0a      	add	r3, sp, #40	; 0x28
    6632:	e9cd b301 	strd	fp, r3, [sp, #4]
    6636:	ab09      	add	r3, sp, #36	; 0x24
    6638:	ec49 8b10 	vmov	d0, r8, r9
    663c:	9300      	str	r3, [sp, #0]
    663e:	6022      	str	r2, [r4, #0]
    6640:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    6644:	4628      	mov	r0, r5
    6646:	f002 fb83 	bl	8d50 <__cvt>
    664a:	9b06      	ldr	r3, [sp, #24]
    664c:	9909      	ldr	r1, [sp, #36]	; 0x24
    664e:	2b47      	cmp	r3, #71	; 0x47
    6650:	4680      	mov	r8, r0
    6652:	d108      	bne.n	6666 <_printf_float+0x142>
    6654:	1cc8      	adds	r0, r1, #3
    6656:	db02      	blt.n	665e <_printf_float+0x13a>
    6658:	6863      	ldr	r3, [r4, #4]
    665a:	4299      	cmp	r1, r3
    665c:	dd41      	ble.n	66e2 <_printf_float+0x1be>
    665e:	f1ab 0b02 	sub.w	fp, fp, #2
    6662:	fa5f fb8b 	uxtb.w	fp, fp
    6666:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
    666a:	d820      	bhi.n	66ae <_printf_float+0x18a>
    666c:	3901      	subs	r1, #1
    666e:	465a      	mov	r2, fp
    6670:	f104 0050 	add.w	r0, r4, #80	; 0x50
    6674:	9109      	str	r1, [sp, #36]	; 0x24
    6676:	f002 fbcd 	bl	8e14 <__exponent>
    667a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    667c:	1813      	adds	r3, r2, r0
    667e:	2a01      	cmp	r2, #1
    6680:	4681      	mov	r9, r0
    6682:	6123      	str	r3, [r4, #16]
    6684:	dc02      	bgt.n	668c <_printf_float+0x168>
    6686:	6822      	ldr	r2, [r4, #0]
    6688:	07d2      	lsls	r2, r2, #31
    668a:	d501      	bpl.n	6690 <_printf_float+0x16c>
    668c:	3301      	adds	r3, #1
    668e:	6123      	str	r3, [r4, #16]
    6690:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    6694:	2b00      	cmp	r3, #0
    6696:	d09c      	beq.n	65d2 <_printf_float+0xae>
    6698:	232d      	movs	r3, #45	; 0x2d
    669a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    669e:	e798      	b.n	65d2 <_printf_float+0xae>
    66a0:	9a06      	ldr	r2, [sp, #24]
    66a2:	2a47      	cmp	r2, #71	; 0x47
    66a4:	d1be      	bne.n	6624 <_printf_float+0x100>
    66a6:	2b00      	cmp	r3, #0
    66a8:	d1bc      	bne.n	6624 <_printf_float+0x100>
    66aa:	2301      	movs	r3, #1
    66ac:	e7b9      	b.n	6622 <_printf_float+0xfe>
    66ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
    66b2:	d118      	bne.n	66e6 <_printf_float+0x1c2>
    66b4:	2900      	cmp	r1, #0
    66b6:	6863      	ldr	r3, [r4, #4]
    66b8:	dd0b      	ble.n	66d2 <_printf_float+0x1ae>
    66ba:	6121      	str	r1, [r4, #16]
    66bc:	b913      	cbnz	r3, 66c4 <_printf_float+0x1a0>
    66be:	6822      	ldr	r2, [r4, #0]
    66c0:	07d0      	lsls	r0, r2, #31
    66c2:	d502      	bpl.n	66ca <_printf_float+0x1a6>
    66c4:	3301      	adds	r3, #1
    66c6:	440b      	add	r3, r1
    66c8:	6123      	str	r3, [r4, #16]
    66ca:	65a1      	str	r1, [r4, #88]	; 0x58
    66cc:	f04f 0900 	mov.w	r9, #0
    66d0:	e7de      	b.n	6690 <_printf_float+0x16c>
    66d2:	b913      	cbnz	r3, 66da <_printf_float+0x1b6>
    66d4:	6822      	ldr	r2, [r4, #0]
    66d6:	07d2      	lsls	r2, r2, #31
    66d8:	d501      	bpl.n	66de <_printf_float+0x1ba>
    66da:	3302      	adds	r3, #2
    66dc:	e7f4      	b.n	66c8 <_printf_float+0x1a4>
    66de:	2301      	movs	r3, #1
    66e0:	e7f2      	b.n	66c8 <_printf_float+0x1a4>
    66e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
    66e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    66e8:	4299      	cmp	r1, r3
    66ea:	db05      	blt.n	66f8 <_printf_float+0x1d4>
    66ec:	6823      	ldr	r3, [r4, #0]
    66ee:	6121      	str	r1, [r4, #16]
    66f0:	07d8      	lsls	r0, r3, #31
    66f2:	d5ea      	bpl.n	66ca <_printf_float+0x1a6>
    66f4:	1c4b      	adds	r3, r1, #1
    66f6:	e7e7      	b.n	66c8 <_printf_float+0x1a4>
    66f8:	2900      	cmp	r1, #0
    66fa:	bfd4      	ite	le
    66fc:	f1c1 0202 	rsble	r2, r1, #2
    6700:	2201      	movgt	r2, #1
    6702:	4413      	add	r3, r2
    6704:	e7e0      	b.n	66c8 <_printf_float+0x1a4>
    6706:	6823      	ldr	r3, [r4, #0]
    6708:	055a      	lsls	r2, r3, #21
    670a:	d407      	bmi.n	671c <_printf_float+0x1f8>
    670c:	6923      	ldr	r3, [r4, #16]
    670e:	4642      	mov	r2, r8
    6710:	4631      	mov	r1, r6
    6712:	4628      	mov	r0, r5
    6714:	47b8      	blx	r7
    6716:	3001      	adds	r0, #1
    6718:	d12c      	bne.n	6774 <_printf_float+0x250>
    671a:	e764      	b.n	65e6 <_printf_float+0xc2>
    671c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
    6720:	f240 80e0 	bls.w	68e4 <_printf_float+0x3c0>
    6724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    6728:	2200      	movs	r2, #0
    672a:	2300      	movs	r3, #0
    672c:	f7fa f95c 	bl	9e8 <__aeabi_dcmpeq>
    6730:	2800      	cmp	r0, #0
    6732:	d034      	beq.n	679e <_printf_float+0x27a>
    6734:	4a37      	ldr	r2, [pc, #220]	; (6814 <_printf_float+0x2f0>)
    6736:	2301      	movs	r3, #1
    6738:	4631      	mov	r1, r6
    673a:	4628      	mov	r0, r5
    673c:	47b8      	blx	r7
    673e:	3001      	adds	r0, #1
    6740:	f43f af51 	beq.w	65e6 <_printf_float+0xc2>
    6744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    6748:	429a      	cmp	r2, r3
    674a:	db02      	blt.n	6752 <_printf_float+0x22e>
    674c:	6823      	ldr	r3, [r4, #0]
    674e:	07d8      	lsls	r0, r3, #31
    6750:	d510      	bpl.n	6774 <_printf_float+0x250>
    6752:	ee18 3a10 	vmov	r3, s16
    6756:	4652      	mov	r2, sl
    6758:	4631      	mov	r1, r6
    675a:	4628      	mov	r0, r5
    675c:	47b8      	blx	r7
    675e:	3001      	adds	r0, #1
    6760:	f43f af41 	beq.w	65e6 <_printf_float+0xc2>
    6764:	f04f 0800 	mov.w	r8, #0
    6768:	f104 091a 	add.w	r9, r4, #26
    676c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    676e:	3b01      	subs	r3, #1
    6770:	4543      	cmp	r3, r8
    6772:	dc09      	bgt.n	6788 <_printf_float+0x264>
    6774:	6823      	ldr	r3, [r4, #0]
    6776:	079b      	lsls	r3, r3, #30
    6778:	f100 8105 	bmi.w	6986 <_printf_float+0x462>
    677c:	68e0      	ldr	r0, [r4, #12]
    677e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6780:	4298      	cmp	r0, r3
    6782:	bfb8      	it	lt
    6784:	4618      	movlt	r0, r3
    6786:	e730      	b.n	65ea <_printf_float+0xc6>
    6788:	2301      	movs	r3, #1
    678a:	464a      	mov	r2, r9
    678c:	4631      	mov	r1, r6
    678e:	4628      	mov	r0, r5
    6790:	47b8      	blx	r7
    6792:	3001      	adds	r0, #1
    6794:	f43f af27 	beq.w	65e6 <_printf_float+0xc2>
    6798:	f108 0801 	add.w	r8, r8, #1
    679c:	e7e6      	b.n	676c <_printf_float+0x248>
    679e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    67a0:	2b00      	cmp	r3, #0
    67a2:	dc39      	bgt.n	6818 <_printf_float+0x2f4>
    67a4:	4a1b      	ldr	r2, [pc, #108]	; (6814 <_printf_float+0x2f0>)
    67a6:	2301      	movs	r3, #1
    67a8:	4631      	mov	r1, r6
    67aa:	4628      	mov	r0, r5
    67ac:	47b8      	blx	r7
    67ae:	3001      	adds	r0, #1
    67b0:	f43f af19 	beq.w	65e6 <_printf_float+0xc2>
    67b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    67b8:	4313      	orrs	r3, r2
    67ba:	d102      	bne.n	67c2 <_printf_float+0x29e>
    67bc:	6823      	ldr	r3, [r4, #0]
    67be:	07d9      	lsls	r1, r3, #31
    67c0:	d5d8      	bpl.n	6774 <_printf_float+0x250>
    67c2:	ee18 3a10 	vmov	r3, s16
    67c6:	4652      	mov	r2, sl
    67c8:	4631      	mov	r1, r6
    67ca:	4628      	mov	r0, r5
    67cc:	47b8      	blx	r7
    67ce:	3001      	adds	r0, #1
    67d0:	f43f af09 	beq.w	65e6 <_printf_float+0xc2>
    67d4:	f04f 0900 	mov.w	r9, #0
    67d8:	f104 0a1a 	add.w	sl, r4, #26
    67dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    67de:	425b      	negs	r3, r3
    67e0:	454b      	cmp	r3, r9
    67e2:	dc01      	bgt.n	67e8 <_printf_float+0x2c4>
    67e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    67e6:	e792      	b.n	670e <_printf_float+0x1ea>
    67e8:	2301      	movs	r3, #1
    67ea:	4652      	mov	r2, sl
    67ec:	4631      	mov	r1, r6
    67ee:	4628      	mov	r0, r5
    67f0:	47b8      	blx	r7
    67f2:	3001      	adds	r0, #1
    67f4:	f43f aef7 	beq.w	65e6 <_printf_float+0xc2>
    67f8:	f109 0901 	add.w	r9, r9, #1
    67fc:	e7ee      	b.n	67dc <_printf_float+0x2b8>
    67fe:	bf00      	nop
    6800:	7fefffff 	.word	0x7fefffff
    6804:	0000aadd 	.word	0x0000aadd
    6808:	0000aae1 	.word	0x0000aae1
    680c:	0000aae9 	.word	0x0000aae9
    6810:	0000aae5 	.word	0x0000aae5
    6814:	0000a905 	.word	0x0000a905
    6818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    681a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    681c:	429a      	cmp	r2, r3
    681e:	bfa8      	it	ge
    6820:	461a      	movge	r2, r3
    6822:	2a00      	cmp	r2, #0
    6824:	4691      	mov	r9, r2
    6826:	dc37      	bgt.n	6898 <_printf_float+0x374>
    6828:	f04f 0b00 	mov.w	fp, #0
    682c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    6830:	f104 021a 	add.w	r2, r4, #26
    6834:	6da3      	ldr	r3, [r4, #88]	; 0x58
    6836:	9305      	str	r3, [sp, #20]
    6838:	eba3 0309 	sub.w	r3, r3, r9
    683c:	455b      	cmp	r3, fp
    683e:	dc33      	bgt.n	68a8 <_printf_float+0x384>
    6840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    6844:	429a      	cmp	r2, r3
    6846:	db3b      	blt.n	68c0 <_printf_float+0x39c>
    6848:	6823      	ldr	r3, [r4, #0]
    684a:	07da      	lsls	r2, r3, #31
    684c:	d438      	bmi.n	68c0 <_printf_float+0x39c>
    684e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6850:	9a05      	ldr	r2, [sp, #20]
    6852:	9909      	ldr	r1, [sp, #36]	; 0x24
    6854:	1a9a      	subs	r2, r3, r2
    6856:	eba3 0901 	sub.w	r9, r3, r1
    685a:	4591      	cmp	r9, r2
    685c:	bfa8      	it	ge
    685e:	4691      	movge	r9, r2
    6860:	f1b9 0f00 	cmp.w	r9, #0
    6864:	dc35      	bgt.n	68d2 <_printf_float+0x3ae>
    6866:	f04f 0800 	mov.w	r8, #0
    686a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    686e:	f104 0a1a 	add.w	sl, r4, #26
    6872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    6876:	1a9b      	subs	r3, r3, r2
    6878:	eba3 0309 	sub.w	r3, r3, r9
    687c:	4543      	cmp	r3, r8
    687e:	f77f af79 	ble.w	6774 <_printf_float+0x250>
    6882:	2301      	movs	r3, #1
    6884:	4652      	mov	r2, sl
    6886:	4631      	mov	r1, r6
    6888:	4628      	mov	r0, r5
    688a:	47b8      	blx	r7
    688c:	3001      	adds	r0, #1
    688e:	f43f aeaa 	beq.w	65e6 <_printf_float+0xc2>
    6892:	f108 0801 	add.w	r8, r8, #1
    6896:	e7ec      	b.n	6872 <_printf_float+0x34e>
    6898:	4613      	mov	r3, r2
    689a:	4631      	mov	r1, r6
    689c:	4642      	mov	r2, r8
    689e:	4628      	mov	r0, r5
    68a0:	47b8      	blx	r7
    68a2:	3001      	adds	r0, #1
    68a4:	d1c0      	bne.n	6828 <_printf_float+0x304>
    68a6:	e69e      	b.n	65e6 <_printf_float+0xc2>
    68a8:	2301      	movs	r3, #1
    68aa:	4631      	mov	r1, r6
    68ac:	4628      	mov	r0, r5
    68ae:	9205      	str	r2, [sp, #20]
    68b0:	47b8      	blx	r7
    68b2:	3001      	adds	r0, #1
    68b4:	f43f ae97 	beq.w	65e6 <_printf_float+0xc2>
    68b8:	9a05      	ldr	r2, [sp, #20]
    68ba:	f10b 0b01 	add.w	fp, fp, #1
    68be:	e7b9      	b.n	6834 <_printf_float+0x310>
    68c0:	ee18 3a10 	vmov	r3, s16
    68c4:	4652      	mov	r2, sl
    68c6:	4631      	mov	r1, r6
    68c8:	4628      	mov	r0, r5
    68ca:	47b8      	blx	r7
    68cc:	3001      	adds	r0, #1
    68ce:	d1be      	bne.n	684e <_printf_float+0x32a>
    68d0:	e689      	b.n	65e6 <_printf_float+0xc2>
    68d2:	9a05      	ldr	r2, [sp, #20]
    68d4:	464b      	mov	r3, r9
    68d6:	4442      	add	r2, r8
    68d8:	4631      	mov	r1, r6
    68da:	4628      	mov	r0, r5
    68dc:	47b8      	blx	r7
    68de:	3001      	adds	r0, #1
    68e0:	d1c1      	bne.n	6866 <_printf_float+0x342>
    68e2:	e680      	b.n	65e6 <_printf_float+0xc2>
    68e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    68e6:	2a01      	cmp	r2, #1
    68e8:	dc01      	bgt.n	68ee <_printf_float+0x3ca>
    68ea:	07db      	lsls	r3, r3, #31
    68ec:	d538      	bpl.n	6960 <_printf_float+0x43c>
    68ee:	2301      	movs	r3, #1
    68f0:	4642      	mov	r2, r8
    68f2:	4631      	mov	r1, r6
    68f4:	4628      	mov	r0, r5
    68f6:	47b8      	blx	r7
    68f8:	3001      	adds	r0, #1
    68fa:	f43f ae74 	beq.w	65e6 <_printf_float+0xc2>
    68fe:	ee18 3a10 	vmov	r3, s16
    6902:	4652      	mov	r2, sl
    6904:	4631      	mov	r1, r6
    6906:	4628      	mov	r0, r5
    6908:	47b8      	blx	r7
    690a:	3001      	adds	r0, #1
    690c:	f43f ae6b 	beq.w	65e6 <_printf_float+0xc2>
    6910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    6914:	2200      	movs	r2, #0
    6916:	2300      	movs	r3, #0
    6918:	f7fa f866 	bl	9e8 <__aeabi_dcmpeq>
    691c:	b9d8      	cbnz	r0, 6956 <_printf_float+0x432>
    691e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6920:	f108 0201 	add.w	r2, r8, #1
    6924:	3b01      	subs	r3, #1
    6926:	4631      	mov	r1, r6
    6928:	4628      	mov	r0, r5
    692a:	47b8      	blx	r7
    692c:	3001      	adds	r0, #1
    692e:	d10e      	bne.n	694e <_printf_float+0x42a>
    6930:	e659      	b.n	65e6 <_printf_float+0xc2>
    6932:	2301      	movs	r3, #1
    6934:	4652      	mov	r2, sl
    6936:	4631      	mov	r1, r6
    6938:	4628      	mov	r0, r5
    693a:	47b8      	blx	r7
    693c:	3001      	adds	r0, #1
    693e:	f43f ae52 	beq.w	65e6 <_printf_float+0xc2>
    6942:	f108 0801 	add.w	r8, r8, #1
    6946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6948:	3b01      	subs	r3, #1
    694a:	4543      	cmp	r3, r8
    694c:	dcf1      	bgt.n	6932 <_printf_float+0x40e>
    694e:	464b      	mov	r3, r9
    6950:	f104 0250 	add.w	r2, r4, #80	; 0x50
    6954:	e6dc      	b.n	6710 <_printf_float+0x1ec>
    6956:	f04f 0800 	mov.w	r8, #0
    695a:	f104 0a1a 	add.w	sl, r4, #26
    695e:	e7f2      	b.n	6946 <_printf_float+0x422>
    6960:	2301      	movs	r3, #1
    6962:	4642      	mov	r2, r8
    6964:	e7df      	b.n	6926 <_printf_float+0x402>
    6966:	2301      	movs	r3, #1
    6968:	464a      	mov	r2, r9
    696a:	4631      	mov	r1, r6
    696c:	4628      	mov	r0, r5
    696e:	47b8      	blx	r7
    6970:	3001      	adds	r0, #1
    6972:	f43f ae38 	beq.w	65e6 <_printf_float+0xc2>
    6976:	f108 0801 	add.w	r8, r8, #1
    697a:	68e3      	ldr	r3, [r4, #12]
    697c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    697e:	1a5b      	subs	r3, r3, r1
    6980:	4543      	cmp	r3, r8
    6982:	dcf0      	bgt.n	6966 <_printf_float+0x442>
    6984:	e6fa      	b.n	677c <_printf_float+0x258>
    6986:	f04f 0800 	mov.w	r8, #0
    698a:	f104 0919 	add.w	r9, r4, #25
    698e:	e7f4      	b.n	697a <_printf_float+0x456>

00006990 <_printf_i>:
    6990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6994:	7e0f      	ldrb	r7, [r1, #24]
    6996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    6998:	2f78      	cmp	r7, #120	; 0x78
    699a:	4691      	mov	r9, r2
    699c:	4680      	mov	r8, r0
    699e:	460c      	mov	r4, r1
    69a0:	469a      	mov	sl, r3
    69a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
    69a6:	d807      	bhi.n	69b8 <_printf_i+0x28>
    69a8:	2f62      	cmp	r7, #98	; 0x62
    69aa:	d80a      	bhi.n	69c2 <_printf_i+0x32>
    69ac:	2f00      	cmp	r7, #0
    69ae:	f000 80d8 	beq.w	6b62 <_printf_i+0x1d2>
    69b2:	2f58      	cmp	r7, #88	; 0x58
    69b4:	f000 80a3 	beq.w	6afe <_printf_i+0x16e>
    69b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    69bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    69c0:	e03a      	b.n	6a38 <_printf_i+0xa8>
    69c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    69c6:	2b15      	cmp	r3, #21
    69c8:	d8f6      	bhi.n	69b8 <_printf_i+0x28>
    69ca:	a101      	add	r1, pc, #4	; (adr r1, 69d0 <_printf_i+0x40>)
    69cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    69d0:	00006a29 	.word	0x00006a29
    69d4:	00006a3d 	.word	0x00006a3d
    69d8:	000069b9 	.word	0x000069b9
    69dc:	000069b9 	.word	0x000069b9
    69e0:	000069b9 	.word	0x000069b9
    69e4:	000069b9 	.word	0x000069b9
    69e8:	00006a3d 	.word	0x00006a3d
    69ec:	000069b9 	.word	0x000069b9
    69f0:	000069b9 	.word	0x000069b9
    69f4:	000069b9 	.word	0x000069b9
    69f8:	000069b9 	.word	0x000069b9
    69fc:	00006b49 	.word	0x00006b49
    6a00:	00006a6d 	.word	0x00006a6d
    6a04:	00006b2b 	.word	0x00006b2b
    6a08:	000069b9 	.word	0x000069b9
    6a0c:	000069b9 	.word	0x000069b9
    6a10:	00006b6b 	.word	0x00006b6b
    6a14:	000069b9 	.word	0x000069b9
    6a18:	00006a6d 	.word	0x00006a6d
    6a1c:	000069b9 	.word	0x000069b9
    6a20:	000069b9 	.word	0x000069b9
    6a24:	00006b33 	.word	0x00006b33
    6a28:	682b      	ldr	r3, [r5, #0]
    6a2a:	1d1a      	adds	r2, r3, #4
    6a2c:	681b      	ldr	r3, [r3, #0]
    6a2e:	602a      	str	r2, [r5, #0]
    6a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
    6a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    6a38:	2301      	movs	r3, #1
    6a3a:	e0a3      	b.n	6b84 <_printf_i+0x1f4>
    6a3c:	6820      	ldr	r0, [r4, #0]
    6a3e:	6829      	ldr	r1, [r5, #0]
    6a40:	0606      	lsls	r6, r0, #24
    6a42:	f101 0304 	add.w	r3, r1, #4
    6a46:	d50a      	bpl.n	6a5e <_printf_i+0xce>
    6a48:	680e      	ldr	r6, [r1, #0]
    6a4a:	602b      	str	r3, [r5, #0]
    6a4c:	2e00      	cmp	r6, #0
    6a4e:	da03      	bge.n	6a58 <_printf_i+0xc8>
    6a50:	232d      	movs	r3, #45	; 0x2d
    6a52:	4276      	negs	r6, r6
    6a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    6a58:	485e      	ldr	r0, [pc, #376]	; (6bd4 <_printf_i+0x244>)
    6a5a:	230a      	movs	r3, #10
    6a5c:	e019      	b.n	6a92 <_printf_i+0x102>
    6a5e:	680e      	ldr	r6, [r1, #0]
    6a60:	602b      	str	r3, [r5, #0]
    6a62:	f010 0f40 	tst.w	r0, #64	; 0x40
    6a66:	bf18      	it	ne
    6a68:	b236      	sxthne	r6, r6
    6a6a:	e7ef      	b.n	6a4c <_printf_i+0xbc>
    6a6c:	682b      	ldr	r3, [r5, #0]
    6a6e:	6820      	ldr	r0, [r4, #0]
    6a70:	1d19      	adds	r1, r3, #4
    6a72:	6029      	str	r1, [r5, #0]
    6a74:	0601      	lsls	r1, r0, #24
    6a76:	d501      	bpl.n	6a7c <_printf_i+0xec>
    6a78:	681e      	ldr	r6, [r3, #0]
    6a7a:	e002      	b.n	6a82 <_printf_i+0xf2>
    6a7c:	0646      	lsls	r6, r0, #25
    6a7e:	d5fb      	bpl.n	6a78 <_printf_i+0xe8>
    6a80:	881e      	ldrh	r6, [r3, #0]
    6a82:	4854      	ldr	r0, [pc, #336]	; (6bd4 <_printf_i+0x244>)
    6a84:	2f6f      	cmp	r7, #111	; 0x6f
    6a86:	bf0c      	ite	eq
    6a88:	2308      	moveq	r3, #8
    6a8a:	230a      	movne	r3, #10
    6a8c:	2100      	movs	r1, #0
    6a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    6a92:	6865      	ldr	r5, [r4, #4]
    6a94:	60a5      	str	r5, [r4, #8]
    6a96:	2d00      	cmp	r5, #0
    6a98:	bfa2      	ittt	ge
    6a9a:	6821      	ldrge	r1, [r4, #0]
    6a9c:	f021 0104 	bicge.w	r1, r1, #4
    6aa0:	6021      	strge	r1, [r4, #0]
    6aa2:	b90e      	cbnz	r6, 6aa8 <_printf_i+0x118>
    6aa4:	2d00      	cmp	r5, #0
    6aa6:	d04d      	beq.n	6b44 <_printf_i+0x1b4>
    6aa8:	4615      	mov	r5, r2
    6aaa:	fbb6 f1f3 	udiv	r1, r6, r3
    6aae:	fb03 6711 	mls	r7, r3, r1, r6
    6ab2:	5dc7      	ldrb	r7, [r0, r7]
    6ab4:	f805 7d01 	strb.w	r7, [r5, #-1]!
    6ab8:	4637      	mov	r7, r6
    6aba:	42bb      	cmp	r3, r7
    6abc:	460e      	mov	r6, r1
    6abe:	d9f4      	bls.n	6aaa <_printf_i+0x11a>
    6ac0:	2b08      	cmp	r3, #8
    6ac2:	d10b      	bne.n	6adc <_printf_i+0x14c>
    6ac4:	6823      	ldr	r3, [r4, #0]
    6ac6:	07de      	lsls	r6, r3, #31
    6ac8:	d508      	bpl.n	6adc <_printf_i+0x14c>
    6aca:	6923      	ldr	r3, [r4, #16]
    6acc:	6861      	ldr	r1, [r4, #4]
    6ace:	4299      	cmp	r1, r3
    6ad0:	bfde      	ittt	le
    6ad2:	2330      	movle	r3, #48	; 0x30
    6ad4:	f805 3c01 	strble.w	r3, [r5, #-1]
    6ad8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    6adc:	1b52      	subs	r2, r2, r5
    6ade:	6122      	str	r2, [r4, #16]
    6ae0:	f8cd a000 	str.w	sl, [sp]
    6ae4:	464b      	mov	r3, r9
    6ae6:	aa03      	add	r2, sp, #12
    6ae8:	4621      	mov	r1, r4
    6aea:	4640      	mov	r0, r8
    6aec:	f002 f9d0 	bl	8e90 <_printf_common>
    6af0:	3001      	adds	r0, #1
    6af2:	d14c      	bne.n	6b8e <_printf_i+0x1fe>
    6af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6af8:	b004      	add	sp, #16
    6afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6afe:	4835      	ldr	r0, [pc, #212]	; (6bd4 <_printf_i+0x244>)
    6b00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    6b04:	6829      	ldr	r1, [r5, #0]
    6b06:	6823      	ldr	r3, [r4, #0]
    6b08:	f851 6b04 	ldr.w	r6, [r1], #4
    6b0c:	6029      	str	r1, [r5, #0]
    6b0e:	061d      	lsls	r5, r3, #24
    6b10:	d514      	bpl.n	6b3c <_printf_i+0x1ac>
    6b12:	07df      	lsls	r7, r3, #31
    6b14:	bf44      	itt	mi
    6b16:	f043 0320 	orrmi.w	r3, r3, #32
    6b1a:	6023      	strmi	r3, [r4, #0]
    6b1c:	b91e      	cbnz	r6, 6b26 <_printf_i+0x196>
    6b1e:	6823      	ldr	r3, [r4, #0]
    6b20:	f023 0320 	bic.w	r3, r3, #32
    6b24:	6023      	str	r3, [r4, #0]
    6b26:	2310      	movs	r3, #16
    6b28:	e7b0      	b.n	6a8c <_printf_i+0xfc>
    6b2a:	6823      	ldr	r3, [r4, #0]
    6b2c:	f043 0320 	orr.w	r3, r3, #32
    6b30:	6023      	str	r3, [r4, #0]
    6b32:	2378      	movs	r3, #120	; 0x78
    6b34:	4828      	ldr	r0, [pc, #160]	; (6bd8 <_printf_i+0x248>)
    6b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    6b3a:	e7e3      	b.n	6b04 <_printf_i+0x174>
    6b3c:	0659      	lsls	r1, r3, #25
    6b3e:	bf48      	it	mi
    6b40:	b2b6      	uxthmi	r6, r6
    6b42:	e7e6      	b.n	6b12 <_printf_i+0x182>
    6b44:	4615      	mov	r5, r2
    6b46:	e7bb      	b.n	6ac0 <_printf_i+0x130>
    6b48:	682b      	ldr	r3, [r5, #0]
    6b4a:	6826      	ldr	r6, [r4, #0]
    6b4c:	6961      	ldr	r1, [r4, #20]
    6b4e:	1d18      	adds	r0, r3, #4
    6b50:	6028      	str	r0, [r5, #0]
    6b52:	0635      	lsls	r5, r6, #24
    6b54:	681b      	ldr	r3, [r3, #0]
    6b56:	d501      	bpl.n	6b5c <_printf_i+0x1cc>
    6b58:	6019      	str	r1, [r3, #0]
    6b5a:	e002      	b.n	6b62 <_printf_i+0x1d2>
    6b5c:	0670      	lsls	r0, r6, #25
    6b5e:	d5fb      	bpl.n	6b58 <_printf_i+0x1c8>
    6b60:	8019      	strh	r1, [r3, #0]
    6b62:	2300      	movs	r3, #0
    6b64:	6123      	str	r3, [r4, #16]
    6b66:	4615      	mov	r5, r2
    6b68:	e7ba      	b.n	6ae0 <_printf_i+0x150>
    6b6a:	682b      	ldr	r3, [r5, #0]
    6b6c:	1d1a      	adds	r2, r3, #4
    6b6e:	602a      	str	r2, [r5, #0]
    6b70:	681d      	ldr	r5, [r3, #0]
    6b72:	6862      	ldr	r2, [r4, #4]
    6b74:	2100      	movs	r1, #0
    6b76:	4628      	mov	r0, r5
    6b78:	f7f9 fac2 	bl	100 <memchr>
    6b7c:	b108      	cbz	r0, 6b82 <_printf_i+0x1f2>
    6b7e:	1b40      	subs	r0, r0, r5
    6b80:	6060      	str	r0, [r4, #4]
    6b82:	6863      	ldr	r3, [r4, #4]
    6b84:	6123      	str	r3, [r4, #16]
    6b86:	2300      	movs	r3, #0
    6b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    6b8c:	e7a8      	b.n	6ae0 <_printf_i+0x150>
    6b8e:	6923      	ldr	r3, [r4, #16]
    6b90:	462a      	mov	r2, r5
    6b92:	4649      	mov	r1, r9
    6b94:	4640      	mov	r0, r8
    6b96:	47d0      	blx	sl
    6b98:	3001      	adds	r0, #1
    6b9a:	d0ab      	beq.n	6af4 <_printf_i+0x164>
    6b9c:	6823      	ldr	r3, [r4, #0]
    6b9e:	079b      	lsls	r3, r3, #30
    6ba0:	d413      	bmi.n	6bca <_printf_i+0x23a>
    6ba2:	68e0      	ldr	r0, [r4, #12]
    6ba4:	9b03      	ldr	r3, [sp, #12]
    6ba6:	4298      	cmp	r0, r3
    6ba8:	bfb8      	it	lt
    6baa:	4618      	movlt	r0, r3
    6bac:	e7a4      	b.n	6af8 <_printf_i+0x168>
    6bae:	2301      	movs	r3, #1
    6bb0:	4632      	mov	r2, r6
    6bb2:	4649      	mov	r1, r9
    6bb4:	4640      	mov	r0, r8
    6bb6:	47d0      	blx	sl
    6bb8:	3001      	adds	r0, #1
    6bba:	d09b      	beq.n	6af4 <_printf_i+0x164>
    6bbc:	3501      	adds	r5, #1
    6bbe:	68e3      	ldr	r3, [r4, #12]
    6bc0:	9903      	ldr	r1, [sp, #12]
    6bc2:	1a5b      	subs	r3, r3, r1
    6bc4:	42ab      	cmp	r3, r5
    6bc6:	dcf2      	bgt.n	6bae <_printf_i+0x21e>
    6bc8:	e7eb      	b.n	6ba2 <_printf_i+0x212>
    6bca:	2500      	movs	r5, #0
    6bcc:	f104 0619 	add.w	r6, r4, #25
    6bd0:	e7f5      	b.n	6bbe <_printf_i+0x22e>
    6bd2:	bf00      	nop
    6bd4:	0000aaed 	.word	0x0000aaed
    6bd8:	0000aafe 	.word	0x0000aafe

00006bdc <_sbrk_r>:
    6bdc:	b538      	push	{r3, r4, r5, lr}
    6bde:	4d06      	ldr	r5, [pc, #24]	; (6bf8 <_sbrk_r+0x1c>)
    6be0:	2300      	movs	r3, #0
    6be2:	4604      	mov	r4, r0
    6be4:	4608      	mov	r0, r1
    6be6:	602b      	str	r3, [r5, #0]
    6be8:	f7fc fdd0 	bl	378c <_sbrk>
    6bec:	1c43      	adds	r3, r0, #1
    6bee:	d102      	bne.n	6bf6 <_sbrk_r+0x1a>
    6bf0:	682b      	ldr	r3, [r5, #0]
    6bf2:	b103      	cbz	r3, 6bf6 <_sbrk_r+0x1a>
    6bf4:	6023      	str	r3, [r4, #0]
    6bf6:	bd38      	pop	{r3, r4, r5, pc}
    6bf8:	20000ecc 	.word	0x20000ecc

00006bfc <setvbuf>:
    6bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6c00:	461d      	mov	r5, r3
    6c02:	4b5d      	ldr	r3, [pc, #372]	; (6d78 <setvbuf+0x17c>)
    6c04:	681f      	ldr	r7, [r3, #0]
    6c06:	4604      	mov	r4, r0
    6c08:	460e      	mov	r6, r1
    6c0a:	4690      	mov	r8, r2
    6c0c:	b127      	cbz	r7, 6c18 <setvbuf+0x1c>
    6c0e:	69bb      	ldr	r3, [r7, #24]
    6c10:	b913      	cbnz	r3, 6c18 <setvbuf+0x1c>
    6c12:	4638      	mov	r0, r7
    6c14:	f000 fa96 	bl	7144 <__sinit>
    6c18:	4b58      	ldr	r3, [pc, #352]	; (6d7c <setvbuf+0x180>)
    6c1a:	429c      	cmp	r4, r3
    6c1c:	d167      	bne.n	6cee <setvbuf+0xf2>
    6c1e:	687c      	ldr	r4, [r7, #4]
    6c20:	f1b8 0f02 	cmp.w	r8, #2
    6c24:	d006      	beq.n	6c34 <setvbuf+0x38>
    6c26:	f1b8 0f01 	cmp.w	r8, #1
    6c2a:	f200 809f 	bhi.w	6d6c <setvbuf+0x170>
    6c2e:	2d00      	cmp	r5, #0
    6c30:	f2c0 809c 	blt.w	6d6c <setvbuf+0x170>
    6c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6c36:	07db      	lsls	r3, r3, #31
    6c38:	d405      	bmi.n	6c46 <setvbuf+0x4a>
    6c3a:	89a3      	ldrh	r3, [r4, #12]
    6c3c:	0598      	lsls	r0, r3, #22
    6c3e:	d402      	bmi.n	6c46 <setvbuf+0x4a>
    6c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6c42:	f001 fa96 	bl	8172 <__retarget_lock_acquire_recursive>
    6c46:	4621      	mov	r1, r4
    6c48:	4638      	mov	r0, r7
    6c4a:	f000 f9fd 	bl	7048 <_fflush_r>
    6c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c50:	b141      	cbz	r1, 6c64 <setvbuf+0x68>
    6c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6c56:	4299      	cmp	r1, r3
    6c58:	d002      	beq.n	6c60 <setvbuf+0x64>
    6c5a:	4638      	mov	r0, r7
    6c5c:	f7ff fa52 	bl	6104 <_free_r>
    6c60:	2300      	movs	r3, #0
    6c62:	6363      	str	r3, [r4, #52]	; 0x34
    6c64:	2300      	movs	r3, #0
    6c66:	61a3      	str	r3, [r4, #24]
    6c68:	6063      	str	r3, [r4, #4]
    6c6a:	89a3      	ldrh	r3, [r4, #12]
    6c6c:	0619      	lsls	r1, r3, #24
    6c6e:	d503      	bpl.n	6c78 <setvbuf+0x7c>
    6c70:	6921      	ldr	r1, [r4, #16]
    6c72:	4638      	mov	r0, r7
    6c74:	f7ff fa46 	bl	6104 <_free_r>
    6c78:	89a3      	ldrh	r3, [r4, #12]
    6c7a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    6c7e:	f023 0303 	bic.w	r3, r3, #3
    6c82:	f1b8 0f02 	cmp.w	r8, #2
    6c86:	81a3      	strh	r3, [r4, #12]
    6c88:	d06c      	beq.n	6d64 <setvbuf+0x168>
    6c8a:	ab01      	add	r3, sp, #4
    6c8c:	466a      	mov	r2, sp
    6c8e:	4621      	mov	r1, r4
    6c90:	4638      	mov	r0, r7
    6c92:	f002 fa68 	bl	9166 <__swhatbuf_r>
    6c96:	89a3      	ldrh	r3, [r4, #12]
    6c98:	4318      	orrs	r0, r3
    6c9a:	81a0      	strh	r0, [r4, #12]
    6c9c:	2d00      	cmp	r5, #0
    6c9e:	d130      	bne.n	6d02 <setvbuf+0x106>
    6ca0:	9d00      	ldr	r5, [sp, #0]
    6ca2:	4628      	mov	r0, r5
    6ca4:	f7ff fa1e 	bl	60e4 <malloc>
    6ca8:	4606      	mov	r6, r0
    6caa:	2800      	cmp	r0, #0
    6cac:	d155      	bne.n	6d5a <setvbuf+0x15e>
    6cae:	f8dd 9000 	ldr.w	r9, [sp]
    6cb2:	45a9      	cmp	r9, r5
    6cb4:	d14a      	bne.n	6d4c <setvbuf+0x150>
    6cb6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6cba:	2200      	movs	r2, #0
    6cbc:	60a2      	str	r2, [r4, #8]
    6cbe:	f104 0247 	add.w	r2, r4, #71	; 0x47
    6cc2:	6022      	str	r2, [r4, #0]
    6cc4:	6122      	str	r2, [r4, #16]
    6cc6:	2201      	movs	r2, #1
    6cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    6ccc:	6162      	str	r2, [r4, #20]
    6cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6cd0:	f043 0302 	orr.w	r3, r3, #2
    6cd4:	07d2      	lsls	r2, r2, #31
    6cd6:	81a3      	strh	r3, [r4, #12]
    6cd8:	d405      	bmi.n	6ce6 <setvbuf+0xea>
    6cda:	f413 7f00 	tst.w	r3, #512	; 0x200
    6cde:	d102      	bne.n	6ce6 <setvbuf+0xea>
    6ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ce2:	f001 fa4c 	bl	817e <__retarget_lock_release_recursive>
    6ce6:	4628      	mov	r0, r5
    6ce8:	b003      	add	sp, #12
    6cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6cee:	4b24      	ldr	r3, [pc, #144]	; (6d80 <setvbuf+0x184>)
    6cf0:	429c      	cmp	r4, r3
    6cf2:	d101      	bne.n	6cf8 <setvbuf+0xfc>
    6cf4:	68bc      	ldr	r4, [r7, #8]
    6cf6:	e793      	b.n	6c20 <setvbuf+0x24>
    6cf8:	4b22      	ldr	r3, [pc, #136]	; (6d84 <setvbuf+0x188>)
    6cfa:	429c      	cmp	r4, r3
    6cfc:	bf08      	it	eq
    6cfe:	68fc      	ldreq	r4, [r7, #12]
    6d00:	e78e      	b.n	6c20 <setvbuf+0x24>
    6d02:	2e00      	cmp	r6, #0
    6d04:	d0cd      	beq.n	6ca2 <setvbuf+0xa6>
    6d06:	69bb      	ldr	r3, [r7, #24]
    6d08:	b913      	cbnz	r3, 6d10 <setvbuf+0x114>
    6d0a:	4638      	mov	r0, r7
    6d0c:	f000 fa1a 	bl	7144 <__sinit>
    6d10:	f1b8 0f01 	cmp.w	r8, #1
    6d14:	bf08      	it	eq
    6d16:	89a3      	ldrheq	r3, [r4, #12]
    6d18:	6026      	str	r6, [r4, #0]
    6d1a:	bf04      	itt	eq
    6d1c:	f043 0301 	orreq.w	r3, r3, #1
    6d20:	81a3      	strheq	r3, [r4, #12]
    6d22:	89a2      	ldrh	r2, [r4, #12]
    6d24:	f012 0308 	ands.w	r3, r2, #8
    6d28:	e9c4 6504 	strd	r6, r5, [r4, #16]
    6d2c:	d01c      	beq.n	6d68 <setvbuf+0x16c>
    6d2e:	07d3      	lsls	r3, r2, #31
    6d30:	bf41      	itttt	mi
    6d32:	2300      	movmi	r3, #0
    6d34:	426d      	negmi	r5, r5
    6d36:	60a3      	strmi	r3, [r4, #8]
    6d38:	61a5      	strmi	r5, [r4, #24]
    6d3a:	bf58      	it	pl
    6d3c:	60a5      	strpl	r5, [r4, #8]
    6d3e:	6e65      	ldr	r5, [r4, #100]	; 0x64
    6d40:	f015 0501 	ands.w	r5, r5, #1
    6d44:	d115      	bne.n	6d72 <setvbuf+0x176>
    6d46:	f412 7f00 	tst.w	r2, #512	; 0x200
    6d4a:	e7c8      	b.n	6cde <setvbuf+0xe2>
    6d4c:	4648      	mov	r0, r9
    6d4e:	f7ff f9c9 	bl	60e4 <malloc>
    6d52:	4606      	mov	r6, r0
    6d54:	2800      	cmp	r0, #0
    6d56:	d0ae      	beq.n	6cb6 <setvbuf+0xba>
    6d58:	464d      	mov	r5, r9
    6d5a:	89a3      	ldrh	r3, [r4, #12]
    6d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6d60:	81a3      	strh	r3, [r4, #12]
    6d62:	e7d0      	b.n	6d06 <setvbuf+0x10a>
    6d64:	2500      	movs	r5, #0
    6d66:	e7a8      	b.n	6cba <setvbuf+0xbe>
    6d68:	60a3      	str	r3, [r4, #8]
    6d6a:	e7e8      	b.n	6d3e <setvbuf+0x142>
    6d6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6d70:	e7b9      	b.n	6ce6 <setvbuf+0xea>
    6d72:	2500      	movs	r5, #0
    6d74:	e7b7      	b.n	6ce6 <setvbuf+0xea>
    6d76:	bf00      	nop
    6d78:	2000033c 	.word	0x2000033c
    6d7c:	0000a724 	.word	0x0000a724
    6d80:	0000a744 	.word	0x0000a744
    6d84:	0000a704 	.word	0x0000a704

00006d88 <raise>:
    6d88:	4b02      	ldr	r3, [pc, #8]	; (6d94 <raise+0xc>)
    6d8a:	4601      	mov	r1, r0
    6d8c:	6818      	ldr	r0, [r3, #0]
    6d8e:	f002 b8ec 	b.w	8f6a <_raise_r>
    6d92:	bf00      	nop
    6d94:	2000033c 	.word	0x2000033c

00006d98 <_kill_r>:
    6d98:	b538      	push	{r3, r4, r5, lr}
    6d9a:	4d07      	ldr	r5, [pc, #28]	; (6db8 <_kill_r+0x20>)
    6d9c:	2300      	movs	r3, #0
    6d9e:	4604      	mov	r4, r0
    6da0:	4608      	mov	r0, r1
    6da2:	4611      	mov	r1, r2
    6da4:	602b      	str	r3, [r5, #0]
    6da6:	f001 f9d1 	bl	814c <_kill>
    6daa:	1c43      	adds	r3, r0, #1
    6dac:	d102      	bne.n	6db4 <_kill_r+0x1c>
    6dae:	682b      	ldr	r3, [r5, #0]
    6db0:	b103      	cbz	r3, 6db4 <_kill_r+0x1c>
    6db2:	6023      	str	r3, [r4, #0]
    6db4:	bd38      	pop	{r3, r4, r5, pc}
    6db6:	bf00      	nop
    6db8:	20000ecc 	.word	0x20000ecc

00006dbc <__swbuf_r>:
    6dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dbe:	460e      	mov	r6, r1
    6dc0:	4614      	mov	r4, r2
    6dc2:	4605      	mov	r5, r0
    6dc4:	b118      	cbz	r0, 6dce <__swbuf_r+0x12>
    6dc6:	6983      	ldr	r3, [r0, #24]
    6dc8:	b90b      	cbnz	r3, 6dce <__swbuf_r+0x12>
    6dca:	f000 f9bb 	bl	7144 <__sinit>
    6dce:	4b21      	ldr	r3, [pc, #132]	; (6e54 <__swbuf_r+0x98>)
    6dd0:	429c      	cmp	r4, r3
    6dd2:	d12b      	bne.n	6e2c <__swbuf_r+0x70>
    6dd4:	686c      	ldr	r4, [r5, #4]
    6dd6:	69a3      	ldr	r3, [r4, #24]
    6dd8:	60a3      	str	r3, [r4, #8]
    6dda:	89a3      	ldrh	r3, [r4, #12]
    6ddc:	071a      	lsls	r2, r3, #28
    6dde:	d52f      	bpl.n	6e40 <__swbuf_r+0x84>
    6de0:	6923      	ldr	r3, [r4, #16]
    6de2:	b36b      	cbz	r3, 6e40 <__swbuf_r+0x84>
    6de4:	6923      	ldr	r3, [r4, #16]
    6de6:	6820      	ldr	r0, [r4, #0]
    6de8:	1ac0      	subs	r0, r0, r3
    6dea:	6963      	ldr	r3, [r4, #20]
    6dec:	b2f6      	uxtb	r6, r6
    6dee:	4283      	cmp	r3, r0
    6df0:	4637      	mov	r7, r6
    6df2:	dc04      	bgt.n	6dfe <__swbuf_r+0x42>
    6df4:	4621      	mov	r1, r4
    6df6:	4628      	mov	r0, r5
    6df8:	f000 f926 	bl	7048 <_fflush_r>
    6dfc:	bb30      	cbnz	r0, 6e4c <__swbuf_r+0x90>
    6dfe:	68a3      	ldr	r3, [r4, #8]
    6e00:	3b01      	subs	r3, #1
    6e02:	60a3      	str	r3, [r4, #8]
    6e04:	6823      	ldr	r3, [r4, #0]
    6e06:	1c5a      	adds	r2, r3, #1
    6e08:	6022      	str	r2, [r4, #0]
    6e0a:	701e      	strb	r6, [r3, #0]
    6e0c:	6963      	ldr	r3, [r4, #20]
    6e0e:	3001      	adds	r0, #1
    6e10:	4283      	cmp	r3, r0
    6e12:	d004      	beq.n	6e1e <__swbuf_r+0x62>
    6e14:	89a3      	ldrh	r3, [r4, #12]
    6e16:	07db      	lsls	r3, r3, #31
    6e18:	d506      	bpl.n	6e28 <__swbuf_r+0x6c>
    6e1a:	2e0a      	cmp	r6, #10
    6e1c:	d104      	bne.n	6e28 <__swbuf_r+0x6c>
    6e1e:	4621      	mov	r1, r4
    6e20:	4628      	mov	r0, r5
    6e22:	f000 f911 	bl	7048 <_fflush_r>
    6e26:	b988      	cbnz	r0, 6e4c <__swbuf_r+0x90>
    6e28:	4638      	mov	r0, r7
    6e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e2c:	4b0a      	ldr	r3, [pc, #40]	; (6e58 <__swbuf_r+0x9c>)
    6e2e:	429c      	cmp	r4, r3
    6e30:	d101      	bne.n	6e36 <__swbuf_r+0x7a>
    6e32:	68ac      	ldr	r4, [r5, #8]
    6e34:	e7cf      	b.n	6dd6 <__swbuf_r+0x1a>
    6e36:	4b09      	ldr	r3, [pc, #36]	; (6e5c <__swbuf_r+0xa0>)
    6e38:	429c      	cmp	r4, r3
    6e3a:	bf08      	it	eq
    6e3c:	68ec      	ldreq	r4, [r5, #12]
    6e3e:	e7ca      	b.n	6dd6 <__swbuf_r+0x1a>
    6e40:	4621      	mov	r1, r4
    6e42:	4628      	mov	r0, r5
    6e44:	f000 f80c 	bl	6e60 <__swsetup_r>
    6e48:	2800      	cmp	r0, #0
    6e4a:	d0cb      	beq.n	6de4 <__swbuf_r+0x28>
    6e4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    6e50:	e7ea      	b.n	6e28 <__swbuf_r+0x6c>
    6e52:	bf00      	nop
    6e54:	0000a724 	.word	0x0000a724
    6e58:	0000a744 	.word	0x0000a744
    6e5c:	0000a704 	.word	0x0000a704

00006e60 <__swsetup_r>:
    6e60:	4b32      	ldr	r3, [pc, #200]	; (6f2c <__swsetup_r+0xcc>)
    6e62:	b570      	push	{r4, r5, r6, lr}
    6e64:	681d      	ldr	r5, [r3, #0]
    6e66:	4606      	mov	r6, r0
    6e68:	460c      	mov	r4, r1
    6e6a:	b125      	cbz	r5, 6e76 <__swsetup_r+0x16>
    6e6c:	69ab      	ldr	r3, [r5, #24]
    6e6e:	b913      	cbnz	r3, 6e76 <__swsetup_r+0x16>
    6e70:	4628      	mov	r0, r5
    6e72:	f000 f967 	bl	7144 <__sinit>
    6e76:	4b2e      	ldr	r3, [pc, #184]	; (6f30 <__swsetup_r+0xd0>)
    6e78:	429c      	cmp	r4, r3
    6e7a:	d10f      	bne.n	6e9c <__swsetup_r+0x3c>
    6e7c:	686c      	ldr	r4, [r5, #4]
    6e7e:	89a3      	ldrh	r3, [r4, #12]
    6e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    6e84:	0719      	lsls	r1, r3, #28
    6e86:	d42c      	bmi.n	6ee2 <__swsetup_r+0x82>
    6e88:	06dd      	lsls	r5, r3, #27
    6e8a:	d411      	bmi.n	6eb0 <__swsetup_r+0x50>
    6e8c:	2309      	movs	r3, #9
    6e8e:	6033      	str	r3, [r6, #0]
    6e90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    6e94:	81a3      	strh	r3, [r4, #12]
    6e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6e9a:	e03e      	b.n	6f1a <__swsetup_r+0xba>
    6e9c:	4b25      	ldr	r3, [pc, #148]	; (6f34 <__swsetup_r+0xd4>)
    6e9e:	429c      	cmp	r4, r3
    6ea0:	d101      	bne.n	6ea6 <__swsetup_r+0x46>
    6ea2:	68ac      	ldr	r4, [r5, #8]
    6ea4:	e7eb      	b.n	6e7e <__swsetup_r+0x1e>
    6ea6:	4b24      	ldr	r3, [pc, #144]	; (6f38 <__swsetup_r+0xd8>)
    6ea8:	429c      	cmp	r4, r3
    6eaa:	bf08      	it	eq
    6eac:	68ec      	ldreq	r4, [r5, #12]
    6eae:	e7e6      	b.n	6e7e <__swsetup_r+0x1e>
    6eb0:	0758      	lsls	r0, r3, #29
    6eb2:	d512      	bpl.n	6eda <__swsetup_r+0x7a>
    6eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6eb6:	b141      	cbz	r1, 6eca <__swsetup_r+0x6a>
    6eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6ebc:	4299      	cmp	r1, r3
    6ebe:	d002      	beq.n	6ec6 <__swsetup_r+0x66>
    6ec0:	4630      	mov	r0, r6
    6ec2:	f7ff f91f 	bl	6104 <_free_r>
    6ec6:	2300      	movs	r3, #0
    6ec8:	6363      	str	r3, [r4, #52]	; 0x34
    6eca:	89a3      	ldrh	r3, [r4, #12]
    6ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    6ed0:	81a3      	strh	r3, [r4, #12]
    6ed2:	2300      	movs	r3, #0
    6ed4:	6063      	str	r3, [r4, #4]
    6ed6:	6923      	ldr	r3, [r4, #16]
    6ed8:	6023      	str	r3, [r4, #0]
    6eda:	89a3      	ldrh	r3, [r4, #12]
    6edc:	f043 0308 	orr.w	r3, r3, #8
    6ee0:	81a3      	strh	r3, [r4, #12]
    6ee2:	6923      	ldr	r3, [r4, #16]
    6ee4:	b94b      	cbnz	r3, 6efa <__swsetup_r+0x9a>
    6ee6:	89a3      	ldrh	r3, [r4, #12]
    6ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
    6eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6ef0:	d003      	beq.n	6efa <__swsetup_r+0x9a>
    6ef2:	4621      	mov	r1, r4
    6ef4:	4630      	mov	r0, r6
    6ef6:	f000 f9a7 	bl	7248 <__smakebuf_r>
    6efa:	89a0      	ldrh	r0, [r4, #12]
    6efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    6f00:	f010 0301 	ands.w	r3, r0, #1
    6f04:	d00a      	beq.n	6f1c <__swsetup_r+0xbc>
    6f06:	2300      	movs	r3, #0
    6f08:	60a3      	str	r3, [r4, #8]
    6f0a:	6963      	ldr	r3, [r4, #20]
    6f0c:	425b      	negs	r3, r3
    6f0e:	61a3      	str	r3, [r4, #24]
    6f10:	6923      	ldr	r3, [r4, #16]
    6f12:	b943      	cbnz	r3, 6f26 <__swsetup_r+0xc6>
    6f14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    6f18:	d1ba      	bne.n	6e90 <__swsetup_r+0x30>
    6f1a:	bd70      	pop	{r4, r5, r6, pc}
    6f1c:	0781      	lsls	r1, r0, #30
    6f1e:	bf58      	it	pl
    6f20:	6963      	ldrpl	r3, [r4, #20]
    6f22:	60a3      	str	r3, [r4, #8]
    6f24:	e7f4      	b.n	6f10 <__swsetup_r+0xb0>
    6f26:	2000      	movs	r0, #0
    6f28:	e7f7      	b.n	6f1a <__swsetup_r+0xba>
    6f2a:	bf00      	nop
    6f2c:	2000033c 	.word	0x2000033c
    6f30:	0000a724 	.word	0x0000a724
    6f34:	0000a744 	.word	0x0000a744
    6f38:	0000a704 	.word	0x0000a704

00006f3c <__sflush_r>:
    6f3c:	898a      	ldrh	r2, [r1, #12]
    6f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f42:	4605      	mov	r5, r0
    6f44:	0710      	lsls	r0, r2, #28
    6f46:	460c      	mov	r4, r1
    6f48:	d458      	bmi.n	6ffc <__sflush_r+0xc0>
    6f4a:	684b      	ldr	r3, [r1, #4]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	dc05      	bgt.n	6f5c <__sflush_r+0x20>
    6f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6f52:	2b00      	cmp	r3, #0
    6f54:	dc02      	bgt.n	6f5c <__sflush_r+0x20>
    6f56:	2000      	movs	r0, #0
    6f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    6f5e:	2e00      	cmp	r6, #0
    6f60:	d0f9      	beq.n	6f56 <__sflush_r+0x1a>
    6f62:	2300      	movs	r3, #0
    6f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    6f68:	682f      	ldr	r7, [r5, #0]
    6f6a:	602b      	str	r3, [r5, #0]
    6f6c:	d032      	beq.n	6fd4 <__sflush_r+0x98>
    6f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6f70:	89a3      	ldrh	r3, [r4, #12]
    6f72:	075a      	lsls	r2, r3, #29
    6f74:	d505      	bpl.n	6f82 <__sflush_r+0x46>
    6f76:	6863      	ldr	r3, [r4, #4]
    6f78:	1ac0      	subs	r0, r0, r3
    6f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6f7c:	b10b      	cbz	r3, 6f82 <__sflush_r+0x46>
    6f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6f80:	1ac0      	subs	r0, r0, r3
    6f82:	2300      	movs	r3, #0
    6f84:	4602      	mov	r2, r0
    6f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    6f88:	6a21      	ldr	r1, [r4, #32]
    6f8a:	4628      	mov	r0, r5
    6f8c:	47b0      	blx	r6
    6f8e:	1c43      	adds	r3, r0, #1
    6f90:	89a3      	ldrh	r3, [r4, #12]
    6f92:	d106      	bne.n	6fa2 <__sflush_r+0x66>
    6f94:	6829      	ldr	r1, [r5, #0]
    6f96:	291d      	cmp	r1, #29
    6f98:	d82c      	bhi.n	6ff4 <__sflush_r+0xb8>
    6f9a:	4a2a      	ldr	r2, [pc, #168]	; (7044 <__sflush_r+0x108>)
    6f9c:	40ca      	lsrs	r2, r1
    6f9e:	07d6      	lsls	r6, r2, #31
    6fa0:	d528      	bpl.n	6ff4 <__sflush_r+0xb8>
    6fa2:	2200      	movs	r2, #0
    6fa4:	6062      	str	r2, [r4, #4]
    6fa6:	04d9      	lsls	r1, r3, #19
    6fa8:	6922      	ldr	r2, [r4, #16]
    6faa:	6022      	str	r2, [r4, #0]
    6fac:	d504      	bpl.n	6fb8 <__sflush_r+0x7c>
    6fae:	1c42      	adds	r2, r0, #1
    6fb0:	d101      	bne.n	6fb6 <__sflush_r+0x7a>
    6fb2:	682b      	ldr	r3, [r5, #0]
    6fb4:	b903      	cbnz	r3, 6fb8 <__sflush_r+0x7c>
    6fb6:	6560      	str	r0, [r4, #84]	; 0x54
    6fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6fba:	602f      	str	r7, [r5, #0]
    6fbc:	2900      	cmp	r1, #0
    6fbe:	d0ca      	beq.n	6f56 <__sflush_r+0x1a>
    6fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6fc4:	4299      	cmp	r1, r3
    6fc6:	d002      	beq.n	6fce <__sflush_r+0x92>
    6fc8:	4628      	mov	r0, r5
    6fca:	f7ff f89b 	bl	6104 <_free_r>
    6fce:	2000      	movs	r0, #0
    6fd0:	6360      	str	r0, [r4, #52]	; 0x34
    6fd2:	e7c1      	b.n	6f58 <__sflush_r+0x1c>
    6fd4:	6a21      	ldr	r1, [r4, #32]
    6fd6:	2301      	movs	r3, #1
    6fd8:	4628      	mov	r0, r5
    6fda:	47b0      	blx	r6
    6fdc:	1c41      	adds	r1, r0, #1
    6fde:	d1c7      	bne.n	6f70 <__sflush_r+0x34>
    6fe0:	682b      	ldr	r3, [r5, #0]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d0c4      	beq.n	6f70 <__sflush_r+0x34>
    6fe6:	2b1d      	cmp	r3, #29
    6fe8:	d001      	beq.n	6fee <__sflush_r+0xb2>
    6fea:	2b16      	cmp	r3, #22
    6fec:	d101      	bne.n	6ff2 <__sflush_r+0xb6>
    6fee:	602f      	str	r7, [r5, #0]
    6ff0:	e7b1      	b.n	6f56 <__sflush_r+0x1a>
    6ff2:	89a3      	ldrh	r3, [r4, #12]
    6ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6ff8:	81a3      	strh	r3, [r4, #12]
    6ffa:	e7ad      	b.n	6f58 <__sflush_r+0x1c>
    6ffc:	690f      	ldr	r7, [r1, #16]
    6ffe:	2f00      	cmp	r7, #0
    7000:	d0a9      	beq.n	6f56 <__sflush_r+0x1a>
    7002:	0793      	lsls	r3, r2, #30
    7004:	680e      	ldr	r6, [r1, #0]
    7006:	bf08      	it	eq
    7008:	694b      	ldreq	r3, [r1, #20]
    700a:	600f      	str	r7, [r1, #0]
    700c:	bf18      	it	ne
    700e:	2300      	movne	r3, #0
    7010:	eba6 0807 	sub.w	r8, r6, r7
    7014:	608b      	str	r3, [r1, #8]
    7016:	f1b8 0f00 	cmp.w	r8, #0
    701a:	dd9c      	ble.n	6f56 <__sflush_r+0x1a>
    701c:	6a21      	ldr	r1, [r4, #32]
    701e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7020:	4643      	mov	r3, r8
    7022:	463a      	mov	r2, r7
    7024:	4628      	mov	r0, r5
    7026:	47b0      	blx	r6
    7028:	2800      	cmp	r0, #0
    702a:	dc06      	bgt.n	703a <__sflush_r+0xfe>
    702c:	89a3      	ldrh	r3, [r4, #12]
    702e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7032:	81a3      	strh	r3, [r4, #12]
    7034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7038:	e78e      	b.n	6f58 <__sflush_r+0x1c>
    703a:	4407      	add	r7, r0
    703c:	eba8 0800 	sub.w	r8, r8, r0
    7040:	e7e9      	b.n	7016 <__sflush_r+0xda>
    7042:	bf00      	nop
    7044:	20400001 	.word	0x20400001

00007048 <_fflush_r>:
    7048:	b538      	push	{r3, r4, r5, lr}
    704a:	690b      	ldr	r3, [r1, #16]
    704c:	4605      	mov	r5, r0
    704e:	460c      	mov	r4, r1
    7050:	b913      	cbnz	r3, 7058 <_fflush_r+0x10>
    7052:	2500      	movs	r5, #0
    7054:	4628      	mov	r0, r5
    7056:	bd38      	pop	{r3, r4, r5, pc}
    7058:	b118      	cbz	r0, 7062 <_fflush_r+0x1a>
    705a:	6983      	ldr	r3, [r0, #24]
    705c:	b90b      	cbnz	r3, 7062 <_fflush_r+0x1a>
    705e:	f000 f871 	bl	7144 <__sinit>
    7062:	4b14      	ldr	r3, [pc, #80]	; (70b4 <_fflush_r+0x6c>)
    7064:	429c      	cmp	r4, r3
    7066:	d11b      	bne.n	70a0 <_fflush_r+0x58>
    7068:	686c      	ldr	r4, [r5, #4]
    706a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    706e:	2b00      	cmp	r3, #0
    7070:	d0ef      	beq.n	7052 <_fflush_r+0xa>
    7072:	6e62      	ldr	r2, [r4, #100]	; 0x64
    7074:	07d0      	lsls	r0, r2, #31
    7076:	d404      	bmi.n	7082 <_fflush_r+0x3a>
    7078:	0599      	lsls	r1, r3, #22
    707a:	d402      	bmi.n	7082 <_fflush_r+0x3a>
    707c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    707e:	f001 f878 	bl	8172 <__retarget_lock_acquire_recursive>
    7082:	4628      	mov	r0, r5
    7084:	4621      	mov	r1, r4
    7086:	f7ff ff59 	bl	6f3c <__sflush_r>
    708a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    708c:	07da      	lsls	r2, r3, #31
    708e:	4605      	mov	r5, r0
    7090:	d4e0      	bmi.n	7054 <_fflush_r+0xc>
    7092:	89a3      	ldrh	r3, [r4, #12]
    7094:	059b      	lsls	r3, r3, #22
    7096:	d4dd      	bmi.n	7054 <_fflush_r+0xc>
    7098:	6da0      	ldr	r0, [r4, #88]	; 0x58
    709a:	f001 f870 	bl	817e <__retarget_lock_release_recursive>
    709e:	e7d9      	b.n	7054 <_fflush_r+0xc>
    70a0:	4b05      	ldr	r3, [pc, #20]	; (70b8 <_fflush_r+0x70>)
    70a2:	429c      	cmp	r4, r3
    70a4:	d101      	bne.n	70aa <_fflush_r+0x62>
    70a6:	68ac      	ldr	r4, [r5, #8]
    70a8:	e7df      	b.n	706a <_fflush_r+0x22>
    70aa:	4b04      	ldr	r3, [pc, #16]	; (70bc <_fflush_r+0x74>)
    70ac:	429c      	cmp	r4, r3
    70ae:	bf08      	it	eq
    70b0:	68ec      	ldreq	r4, [r5, #12]
    70b2:	e7da      	b.n	706a <_fflush_r+0x22>
    70b4:	0000a724 	.word	0x0000a724
    70b8:	0000a744 	.word	0x0000a744
    70bc:	0000a704 	.word	0x0000a704

000070c0 <std>:
    70c0:	2300      	movs	r3, #0
    70c2:	b510      	push	{r4, lr}
    70c4:	4604      	mov	r4, r0
    70c6:	e9c0 3300 	strd	r3, r3, [r0]
    70ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
    70ce:	6083      	str	r3, [r0, #8]
    70d0:	8181      	strh	r1, [r0, #12]
    70d2:	6643      	str	r3, [r0, #100]	; 0x64
    70d4:	81c2      	strh	r2, [r0, #14]
    70d6:	6183      	str	r3, [r0, #24]
    70d8:	4619      	mov	r1, r3
    70da:	2208      	movs	r2, #8
    70dc:	305c      	adds	r0, #92	; 0x5c
    70de:	f001 fdf0 	bl	8cc2 <memset>
    70e2:	4b05      	ldr	r3, [pc, #20]	; (70f8 <std+0x38>)
    70e4:	6263      	str	r3, [r4, #36]	; 0x24
    70e6:	4b05      	ldr	r3, [pc, #20]	; (70fc <std+0x3c>)
    70e8:	62a3      	str	r3, [r4, #40]	; 0x28
    70ea:	4b05      	ldr	r3, [pc, #20]	; (7100 <std+0x40>)
    70ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    70ee:	4b05      	ldr	r3, [pc, #20]	; (7104 <std+0x44>)
    70f0:	6224      	str	r4, [r4, #32]
    70f2:	6323      	str	r3, [r4, #48]	; 0x30
    70f4:	bd10      	pop	{r4, pc}
    70f6:	bf00      	nop
    70f8:	00009287 	.word	0x00009287
    70fc:	000092a9 	.word	0x000092a9
    7100:	000092e1 	.word	0x000092e1
    7104:	00009305 	.word	0x00009305

00007108 <_cleanup_r>:
    7108:	4901      	ldr	r1, [pc, #4]	; (7110 <_cleanup_r+0x8>)
    710a:	f002 b80d 	b.w	9128 <_fwalk_reent>
    710e:	bf00      	nop
    7110:	00007049 	.word	0x00007049

00007114 <__sfp_lock_acquire>:
    7114:	4801      	ldr	r0, [pc, #4]	; (711c <__sfp_lock_acquire+0x8>)
    7116:	f001 b82c 	b.w	8172 <__retarget_lock_acquire_recursive>
    711a:	bf00      	nop
    711c:	20000594 	.word	0x20000594

00007120 <__sfp_lock_release>:
    7120:	4801      	ldr	r0, [pc, #4]	; (7128 <__sfp_lock_release+0x8>)
    7122:	f001 b82c 	b.w	817e <__retarget_lock_release_recursive>
    7126:	bf00      	nop
    7128:	20000594 	.word	0x20000594

0000712c <__sinit_lock_acquire>:
    712c:	4801      	ldr	r0, [pc, #4]	; (7134 <__sinit_lock_acquire+0x8>)
    712e:	f001 b820 	b.w	8172 <__retarget_lock_acquire_recursive>
    7132:	bf00      	nop
    7134:	200005a8 	.word	0x200005a8

00007138 <__sinit_lock_release>:
    7138:	4801      	ldr	r0, [pc, #4]	; (7140 <__sinit_lock_release+0x8>)
    713a:	f001 b820 	b.w	817e <__retarget_lock_release_recursive>
    713e:	bf00      	nop
    7140:	200005a8 	.word	0x200005a8

00007144 <__sinit>:
    7144:	b510      	push	{r4, lr}
    7146:	4604      	mov	r4, r0
    7148:	f7ff fff0 	bl	712c <__sinit_lock_acquire>
    714c:	69a3      	ldr	r3, [r4, #24]
    714e:	b11b      	cbz	r3, 7158 <__sinit+0x14>
    7150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7154:	f7ff bff0 	b.w	7138 <__sinit_lock_release>
    7158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    715c:	6523      	str	r3, [r4, #80]	; 0x50
    715e:	4b13      	ldr	r3, [pc, #76]	; (71ac <__sinit+0x68>)
    7160:	4a13      	ldr	r2, [pc, #76]	; (71b0 <__sinit+0x6c>)
    7162:	681b      	ldr	r3, [r3, #0]
    7164:	62a2      	str	r2, [r4, #40]	; 0x28
    7166:	42a3      	cmp	r3, r4
    7168:	bf04      	itt	eq
    716a:	2301      	moveq	r3, #1
    716c:	61a3      	streq	r3, [r4, #24]
    716e:	4620      	mov	r0, r4
    7170:	f000 f820 	bl	71b4 <__sfp>
    7174:	6060      	str	r0, [r4, #4]
    7176:	4620      	mov	r0, r4
    7178:	f000 f81c 	bl	71b4 <__sfp>
    717c:	60a0      	str	r0, [r4, #8]
    717e:	4620      	mov	r0, r4
    7180:	f000 f818 	bl	71b4 <__sfp>
    7184:	2200      	movs	r2, #0
    7186:	60e0      	str	r0, [r4, #12]
    7188:	2104      	movs	r1, #4
    718a:	6860      	ldr	r0, [r4, #4]
    718c:	f7ff ff98 	bl	70c0 <std>
    7190:	68a0      	ldr	r0, [r4, #8]
    7192:	2201      	movs	r2, #1
    7194:	2109      	movs	r1, #9
    7196:	f7ff ff93 	bl	70c0 <std>
    719a:	68e0      	ldr	r0, [r4, #12]
    719c:	2202      	movs	r2, #2
    719e:	2112      	movs	r1, #18
    71a0:	f7ff ff8e 	bl	70c0 <std>
    71a4:	2301      	movs	r3, #1
    71a6:	61a3      	str	r3, [r4, #24]
    71a8:	e7d2      	b.n	7150 <__sinit+0xc>
    71aa:	bf00      	nop
    71ac:	0000a700 	.word	0x0000a700
    71b0:	00007109 	.word	0x00007109

000071b4 <__sfp>:
    71b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71b6:	4607      	mov	r7, r0
    71b8:	f7ff ffac 	bl	7114 <__sfp_lock_acquire>
    71bc:	4b1e      	ldr	r3, [pc, #120]	; (7238 <__sfp+0x84>)
    71be:	681e      	ldr	r6, [r3, #0]
    71c0:	69b3      	ldr	r3, [r6, #24]
    71c2:	b913      	cbnz	r3, 71ca <__sfp+0x16>
    71c4:	4630      	mov	r0, r6
    71c6:	f7ff ffbd 	bl	7144 <__sinit>
    71ca:	3648      	adds	r6, #72	; 0x48
    71cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    71d0:	3b01      	subs	r3, #1
    71d2:	d503      	bpl.n	71dc <__sfp+0x28>
    71d4:	6833      	ldr	r3, [r6, #0]
    71d6:	b30b      	cbz	r3, 721c <__sfp+0x68>
    71d8:	6836      	ldr	r6, [r6, #0]
    71da:	e7f7      	b.n	71cc <__sfp+0x18>
    71dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    71e0:	b9d5      	cbnz	r5, 7218 <__sfp+0x64>
    71e2:	4b16      	ldr	r3, [pc, #88]	; (723c <__sfp+0x88>)
    71e4:	60e3      	str	r3, [r4, #12]
    71e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    71ea:	6665      	str	r5, [r4, #100]	; 0x64
    71ec:	f000 ffb7 	bl	815e <__retarget_lock_init_recursive>
    71f0:	f7ff ff96 	bl	7120 <__sfp_lock_release>
    71f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
    71f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
    71fc:	6025      	str	r5, [r4, #0]
    71fe:	61a5      	str	r5, [r4, #24]
    7200:	2208      	movs	r2, #8
    7202:	4629      	mov	r1, r5
    7204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7208:	f001 fd5b 	bl	8cc2 <memset>
    720c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    7210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    7214:	4620      	mov	r0, r4
    7216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7218:	3468      	adds	r4, #104	; 0x68
    721a:	e7d9      	b.n	71d0 <__sfp+0x1c>
    721c:	2104      	movs	r1, #4
    721e:	4638      	mov	r0, r7
    7220:	f001 ff6c 	bl	90fc <__sfmoreglue>
    7224:	4604      	mov	r4, r0
    7226:	6030      	str	r0, [r6, #0]
    7228:	2800      	cmp	r0, #0
    722a:	d1d5      	bne.n	71d8 <__sfp+0x24>
    722c:	f7ff ff78 	bl	7120 <__sfp_lock_release>
    7230:	230c      	movs	r3, #12
    7232:	603b      	str	r3, [r7, #0]
    7234:	e7ee      	b.n	7214 <__sfp+0x60>
    7236:	bf00      	nop
    7238:	0000a700 	.word	0x0000a700
    723c:	ffff0001 	.word	0xffff0001

00007240 <_localeconv_r>:
    7240:	4800      	ldr	r0, [pc, #0]	; (7244 <_localeconv_r+0x4>)
    7242:	4770      	bx	lr
    7244:	20000490 	.word	0x20000490

00007248 <__smakebuf_r>:
    7248:	898b      	ldrh	r3, [r1, #12]
    724a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    724c:	079d      	lsls	r5, r3, #30
    724e:	4606      	mov	r6, r0
    7250:	460c      	mov	r4, r1
    7252:	d507      	bpl.n	7264 <__smakebuf_r+0x1c>
    7254:	f104 0347 	add.w	r3, r4, #71	; 0x47
    7258:	6023      	str	r3, [r4, #0]
    725a:	6123      	str	r3, [r4, #16]
    725c:	2301      	movs	r3, #1
    725e:	6163      	str	r3, [r4, #20]
    7260:	b002      	add	sp, #8
    7262:	bd70      	pop	{r4, r5, r6, pc}
    7264:	ab01      	add	r3, sp, #4
    7266:	466a      	mov	r2, sp
    7268:	f001 ff7d 	bl	9166 <__swhatbuf_r>
    726c:	9900      	ldr	r1, [sp, #0]
    726e:	4605      	mov	r5, r0
    7270:	4630      	mov	r0, r6
    7272:	f7fe ffb3 	bl	61dc <_malloc_r>
    7276:	b948      	cbnz	r0, 728c <__smakebuf_r+0x44>
    7278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    727c:	059a      	lsls	r2, r3, #22
    727e:	d4ef      	bmi.n	7260 <__smakebuf_r+0x18>
    7280:	f023 0303 	bic.w	r3, r3, #3
    7284:	f043 0302 	orr.w	r3, r3, #2
    7288:	81a3      	strh	r3, [r4, #12]
    728a:	e7e3      	b.n	7254 <__smakebuf_r+0xc>
    728c:	4b0d      	ldr	r3, [pc, #52]	; (72c4 <__smakebuf_r+0x7c>)
    728e:	62b3      	str	r3, [r6, #40]	; 0x28
    7290:	89a3      	ldrh	r3, [r4, #12]
    7292:	6020      	str	r0, [r4, #0]
    7294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7298:	81a3      	strh	r3, [r4, #12]
    729a:	9b00      	ldr	r3, [sp, #0]
    729c:	6163      	str	r3, [r4, #20]
    729e:	9b01      	ldr	r3, [sp, #4]
    72a0:	6120      	str	r0, [r4, #16]
    72a2:	b15b      	cbz	r3, 72bc <__smakebuf_r+0x74>
    72a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    72a8:	4630      	mov	r0, r6
    72aa:	f000 fb65 	bl	7978 <_isatty_r>
    72ae:	b128      	cbz	r0, 72bc <__smakebuf_r+0x74>
    72b0:	89a3      	ldrh	r3, [r4, #12]
    72b2:	f023 0303 	bic.w	r3, r3, #3
    72b6:	f043 0301 	orr.w	r3, r3, #1
    72ba:	81a3      	strh	r3, [r4, #12]
    72bc:	89a0      	ldrh	r0, [r4, #12]
    72be:	4305      	orrs	r5, r0
    72c0:	81a5      	strh	r5, [r4, #12]
    72c2:	e7cd      	b.n	7260 <__smakebuf_r+0x18>
    72c4:	00007109 	.word	0x00007109

000072c8 <__malloc_lock>:
    72c8:	4801      	ldr	r0, [pc, #4]	; (72d0 <__malloc_lock+0x8>)
    72ca:	f000 bf52 	b.w	8172 <__retarget_lock_acquire_recursive>
    72ce:	bf00      	nop
    72d0:	20000580 	.word	0x20000580

000072d4 <__malloc_unlock>:
    72d4:	4801      	ldr	r0, [pc, #4]	; (72dc <__malloc_unlock+0x8>)
    72d6:	f000 bf52 	b.w	817e <__retarget_lock_release_recursive>
    72da:	bf00      	nop
    72dc:	20000580 	.word	0x20000580

000072e0 <_Balloc>:
    72e0:	b570      	push	{r4, r5, r6, lr}
    72e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
    72e4:	4604      	mov	r4, r0
    72e6:	460d      	mov	r5, r1
    72e8:	b976      	cbnz	r6, 7308 <_Balloc+0x28>
    72ea:	2010      	movs	r0, #16
    72ec:	f7fe fefa 	bl	60e4 <malloc>
    72f0:	4602      	mov	r2, r0
    72f2:	6260      	str	r0, [r4, #36]	; 0x24
    72f4:	b920      	cbnz	r0, 7300 <_Balloc+0x20>
    72f6:	4b18      	ldr	r3, [pc, #96]	; (7358 <_Balloc+0x78>)
    72f8:	4818      	ldr	r0, [pc, #96]	; (735c <_Balloc+0x7c>)
    72fa:	2166      	movs	r1, #102	; 0x66
    72fc:	f7fe fec2 	bl	6084 <__assert_func>
    7300:	e9c0 6601 	strd	r6, r6, [r0, #4]
    7304:	6006      	str	r6, [r0, #0]
    7306:	60c6      	str	r6, [r0, #12]
    7308:	6a66      	ldr	r6, [r4, #36]	; 0x24
    730a:	68f3      	ldr	r3, [r6, #12]
    730c:	b183      	cbz	r3, 7330 <_Balloc+0x50>
    730e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7310:	68db      	ldr	r3, [r3, #12]
    7312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    7316:	b9b8      	cbnz	r0, 7348 <_Balloc+0x68>
    7318:	2101      	movs	r1, #1
    731a:	fa01 f605 	lsl.w	r6, r1, r5
    731e:	1d72      	adds	r2, r6, #5
    7320:	0092      	lsls	r2, r2, #2
    7322:	4620      	mov	r0, r4
    7324:	f001 fcd5 	bl	8cd2 <_calloc_r>
    7328:	b160      	cbz	r0, 7344 <_Balloc+0x64>
    732a:	e9c0 5601 	strd	r5, r6, [r0, #4]
    732e:	e00e      	b.n	734e <_Balloc+0x6e>
    7330:	2221      	movs	r2, #33	; 0x21
    7332:	2104      	movs	r1, #4
    7334:	4620      	mov	r0, r4
    7336:	f001 fccc 	bl	8cd2 <_calloc_r>
    733a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    733c:	60f0      	str	r0, [r6, #12]
    733e:	68db      	ldr	r3, [r3, #12]
    7340:	2b00      	cmp	r3, #0
    7342:	d1e4      	bne.n	730e <_Balloc+0x2e>
    7344:	2000      	movs	r0, #0
    7346:	bd70      	pop	{r4, r5, r6, pc}
    7348:	6802      	ldr	r2, [r0, #0]
    734a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    734e:	2300      	movs	r3, #0
    7350:	e9c0 3303 	strd	r3, r3, [r0, #12]
    7354:	e7f7      	b.n	7346 <_Balloc+0x66>
    7356:	bf00      	nop
    7358:	0000ab1c 	.word	0x0000ab1c
    735c:	0000abc2 	.word	0x0000abc2

00007360 <_Bfree>:
    7360:	b570      	push	{r4, r5, r6, lr}
    7362:	6a46      	ldr	r6, [r0, #36]	; 0x24
    7364:	4605      	mov	r5, r0
    7366:	460c      	mov	r4, r1
    7368:	b976      	cbnz	r6, 7388 <_Bfree+0x28>
    736a:	2010      	movs	r0, #16
    736c:	f7fe feba 	bl	60e4 <malloc>
    7370:	4602      	mov	r2, r0
    7372:	6268      	str	r0, [r5, #36]	; 0x24
    7374:	b920      	cbnz	r0, 7380 <_Bfree+0x20>
    7376:	4b09      	ldr	r3, [pc, #36]	; (739c <_Bfree+0x3c>)
    7378:	4809      	ldr	r0, [pc, #36]	; (73a0 <_Bfree+0x40>)
    737a:	218a      	movs	r1, #138	; 0x8a
    737c:	f7fe fe82 	bl	6084 <__assert_func>
    7380:	e9c0 6601 	strd	r6, r6, [r0, #4]
    7384:	6006      	str	r6, [r0, #0]
    7386:	60c6      	str	r6, [r0, #12]
    7388:	b13c      	cbz	r4, 739a <_Bfree+0x3a>
    738a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    738c:	6862      	ldr	r2, [r4, #4]
    738e:	68db      	ldr	r3, [r3, #12]
    7390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7394:	6021      	str	r1, [r4, #0]
    7396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    739a:	bd70      	pop	{r4, r5, r6, pc}
    739c:	0000ab1c 	.word	0x0000ab1c
    73a0:	0000abc2 	.word	0x0000abc2

000073a4 <__multadd>:
    73a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73a8:	690d      	ldr	r5, [r1, #16]
    73aa:	4607      	mov	r7, r0
    73ac:	460c      	mov	r4, r1
    73ae:	461e      	mov	r6, r3
    73b0:	f101 0c14 	add.w	ip, r1, #20
    73b4:	2000      	movs	r0, #0
    73b6:	f8dc 3000 	ldr.w	r3, [ip]
    73ba:	b299      	uxth	r1, r3
    73bc:	fb02 6101 	mla	r1, r2, r1, r6
    73c0:	0c1e      	lsrs	r6, r3, #16
    73c2:	0c0b      	lsrs	r3, r1, #16
    73c4:	fb02 3306 	mla	r3, r2, r6, r3
    73c8:	b289      	uxth	r1, r1
    73ca:	3001      	adds	r0, #1
    73cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    73d0:	4285      	cmp	r5, r0
    73d2:	f84c 1b04 	str.w	r1, [ip], #4
    73d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
    73da:	dcec      	bgt.n	73b6 <__multadd+0x12>
    73dc:	b30e      	cbz	r6, 7422 <__multadd+0x7e>
    73de:	68a3      	ldr	r3, [r4, #8]
    73e0:	42ab      	cmp	r3, r5
    73e2:	dc19      	bgt.n	7418 <__multadd+0x74>
    73e4:	6861      	ldr	r1, [r4, #4]
    73e6:	4638      	mov	r0, r7
    73e8:	3101      	adds	r1, #1
    73ea:	f7ff ff79 	bl	72e0 <_Balloc>
    73ee:	4680      	mov	r8, r0
    73f0:	b928      	cbnz	r0, 73fe <__multadd+0x5a>
    73f2:	4602      	mov	r2, r0
    73f4:	4b0c      	ldr	r3, [pc, #48]	; (7428 <__multadd+0x84>)
    73f6:	480d      	ldr	r0, [pc, #52]	; (742c <__multadd+0x88>)
    73f8:	21b5      	movs	r1, #181	; 0xb5
    73fa:	f7fe fe43 	bl	6084 <__assert_func>
    73fe:	6922      	ldr	r2, [r4, #16]
    7400:	3202      	adds	r2, #2
    7402:	f104 010c 	add.w	r1, r4, #12
    7406:	0092      	lsls	r2, r2, #2
    7408:	300c      	adds	r0, #12
    740a:	f001 fc4c 	bl	8ca6 <memcpy>
    740e:	4621      	mov	r1, r4
    7410:	4638      	mov	r0, r7
    7412:	f7ff ffa5 	bl	7360 <_Bfree>
    7416:	4644      	mov	r4, r8
    7418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    741c:	3501      	adds	r5, #1
    741e:	615e      	str	r6, [r3, #20]
    7420:	6125      	str	r5, [r4, #16]
    7422:	4620      	mov	r0, r4
    7424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7428:	0000abb1 	.word	0x0000abb1
    742c:	0000abc2 	.word	0x0000abc2

00007430 <__i2b>:
    7430:	b510      	push	{r4, lr}
    7432:	460c      	mov	r4, r1
    7434:	2101      	movs	r1, #1
    7436:	f7ff ff53 	bl	72e0 <_Balloc>
    743a:	4602      	mov	r2, r0
    743c:	b928      	cbnz	r0, 744a <__i2b+0x1a>
    743e:	4b05      	ldr	r3, [pc, #20]	; (7454 <__i2b+0x24>)
    7440:	4805      	ldr	r0, [pc, #20]	; (7458 <__i2b+0x28>)
    7442:	f44f 71a0 	mov.w	r1, #320	; 0x140
    7446:	f7fe fe1d 	bl	6084 <__assert_func>
    744a:	2301      	movs	r3, #1
    744c:	6144      	str	r4, [r0, #20]
    744e:	6103      	str	r3, [r0, #16]
    7450:	bd10      	pop	{r4, pc}
    7452:	bf00      	nop
    7454:	0000abb1 	.word	0x0000abb1
    7458:	0000abc2 	.word	0x0000abc2

0000745c <__multiply>:
    745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7460:	4691      	mov	r9, r2
    7462:	690a      	ldr	r2, [r1, #16]
    7464:	f8d9 3010 	ldr.w	r3, [r9, #16]
    7468:	429a      	cmp	r2, r3
    746a:	bfb8      	it	lt
    746c:	460b      	movlt	r3, r1
    746e:	460c      	mov	r4, r1
    7470:	bfbc      	itt	lt
    7472:	464c      	movlt	r4, r9
    7474:	4699      	movlt	r9, r3
    7476:	6927      	ldr	r7, [r4, #16]
    7478:	f8d9 a010 	ldr.w	sl, [r9, #16]
    747c:	68a3      	ldr	r3, [r4, #8]
    747e:	6861      	ldr	r1, [r4, #4]
    7480:	eb07 060a 	add.w	r6, r7, sl
    7484:	42b3      	cmp	r3, r6
    7486:	b085      	sub	sp, #20
    7488:	bfb8      	it	lt
    748a:	3101      	addlt	r1, #1
    748c:	f7ff ff28 	bl	72e0 <_Balloc>
    7490:	b930      	cbnz	r0, 74a0 <__multiply+0x44>
    7492:	4602      	mov	r2, r0
    7494:	4b44      	ldr	r3, [pc, #272]	; (75a8 <__multiply+0x14c>)
    7496:	4845      	ldr	r0, [pc, #276]	; (75ac <__multiply+0x150>)
    7498:	f240 115d 	movw	r1, #349	; 0x15d
    749c:	f7fe fdf2 	bl	6084 <__assert_func>
    74a0:	f100 0514 	add.w	r5, r0, #20
    74a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    74a8:	462b      	mov	r3, r5
    74aa:	2200      	movs	r2, #0
    74ac:	4543      	cmp	r3, r8
    74ae:	d321      	bcc.n	74f4 <__multiply+0x98>
    74b0:	f104 0314 	add.w	r3, r4, #20
    74b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    74b8:	f109 0314 	add.w	r3, r9, #20
    74bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    74c0:	9202      	str	r2, [sp, #8]
    74c2:	1b3a      	subs	r2, r7, r4
    74c4:	3a15      	subs	r2, #21
    74c6:	f022 0203 	bic.w	r2, r2, #3
    74ca:	3204      	adds	r2, #4
    74cc:	f104 0115 	add.w	r1, r4, #21
    74d0:	428f      	cmp	r7, r1
    74d2:	bf38      	it	cc
    74d4:	2204      	movcc	r2, #4
    74d6:	9201      	str	r2, [sp, #4]
    74d8:	9a02      	ldr	r2, [sp, #8]
    74da:	9303      	str	r3, [sp, #12]
    74dc:	429a      	cmp	r2, r3
    74de:	d80c      	bhi.n	74fa <__multiply+0x9e>
    74e0:	2e00      	cmp	r6, #0
    74e2:	dd03      	ble.n	74ec <__multiply+0x90>
    74e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    74e8:	2b00      	cmp	r3, #0
    74ea:	d05a      	beq.n	75a2 <__multiply+0x146>
    74ec:	6106      	str	r6, [r0, #16]
    74ee:	b005      	add	sp, #20
    74f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74f4:	f843 2b04 	str.w	r2, [r3], #4
    74f8:	e7d8      	b.n	74ac <__multiply+0x50>
    74fa:	f8b3 a000 	ldrh.w	sl, [r3]
    74fe:	f1ba 0f00 	cmp.w	sl, #0
    7502:	d024      	beq.n	754e <__multiply+0xf2>
    7504:	f104 0e14 	add.w	lr, r4, #20
    7508:	46a9      	mov	r9, r5
    750a:	f04f 0c00 	mov.w	ip, #0
    750e:	f85e 2b04 	ldr.w	r2, [lr], #4
    7512:	f8d9 1000 	ldr.w	r1, [r9]
    7516:	fa1f fb82 	uxth.w	fp, r2
    751a:	b289      	uxth	r1, r1
    751c:	fb0a 110b 	mla	r1, sl, fp, r1
    7520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
    7524:	f8d9 2000 	ldr.w	r2, [r9]
    7528:	4461      	add	r1, ip
    752a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    752e:	fb0a c20b 	mla	r2, sl, fp, ip
    7532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    7536:	b289      	uxth	r1, r1
    7538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    753c:	4577      	cmp	r7, lr
    753e:	f849 1b04 	str.w	r1, [r9], #4
    7542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    7546:	d8e2      	bhi.n	750e <__multiply+0xb2>
    7548:	9a01      	ldr	r2, [sp, #4]
    754a:	f845 c002 	str.w	ip, [r5, r2]
    754e:	9a03      	ldr	r2, [sp, #12]
    7550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    7554:	3304      	adds	r3, #4
    7556:	f1b9 0f00 	cmp.w	r9, #0
    755a:	d020      	beq.n	759e <__multiply+0x142>
    755c:	6829      	ldr	r1, [r5, #0]
    755e:	f104 0c14 	add.w	ip, r4, #20
    7562:	46ae      	mov	lr, r5
    7564:	f04f 0a00 	mov.w	sl, #0
    7568:	f8bc b000 	ldrh.w	fp, [ip]
    756c:	f8be 2002 	ldrh.w	r2, [lr, #2]
    7570:	fb09 220b 	mla	r2, r9, fp, r2
    7574:	4492      	add	sl, r2
    7576:	b289      	uxth	r1, r1
    7578:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    757c:	f84e 1b04 	str.w	r1, [lr], #4
    7580:	f85c 2b04 	ldr.w	r2, [ip], #4
    7584:	f8be 1000 	ldrh.w	r1, [lr]
    7588:	0c12      	lsrs	r2, r2, #16
    758a:	fb09 1102 	mla	r1, r9, r2, r1
    758e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
    7592:	4567      	cmp	r7, ip
    7594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
    7598:	d8e6      	bhi.n	7568 <__multiply+0x10c>
    759a:	9a01      	ldr	r2, [sp, #4]
    759c:	50a9      	str	r1, [r5, r2]
    759e:	3504      	adds	r5, #4
    75a0:	e79a      	b.n	74d8 <__multiply+0x7c>
    75a2:	3e01      	subs	r6, #1
    75a4:	e79c      	b.n	74e0 <__multiply+0x84>
    75a6:	bf00      	nop
    75a8:	0000abb1 	.word	0x0000abb1
    75ac:	0000abc2 	.word	0x0000abc2

000075b0 <__pow5mult>:
    75b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    75b4:	4615      	mov	r5, r2
    75b6:	f012 0203 	ands.w	r2, r2, #3
    75ba:	4606      	mov	r6, r0
    75bc:	460f      	mov	r7, r1
    75be:	d007      	beq.n	75d0 <__pow5mult+0x20>
    75c0:	4c25      	ldr	r4, [pc, #148]	; (7658 <__pow5mult+0xa8>)
    75c2:	3a01      	subs	r2, #1
    75c4:	2300      	movs	r3, #0
    75c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    75ca:	f7ff feeb 	bl	73a4 <__multadd>
    75ce:	4607      	mov	r7, r0
    75d0:	10ad      	asrs	r5, r5, #2
    75d2:	d03d      	beq.n	7650 <__pow5mult+0xa0>
    75d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
    75d6:	b97c      	cbnz	r4, 75f8 <__pow5mult+0x48>
    75d8:	2010      	movs	r0, #16
    75da:	f7fe fd83 	bl	60e4 <malloc>
    75de:	4602      	mov	r2, r0
    75e0:	6270      	str	r0, [r6, #36]	; 0x24
    75e2:	b928      	cbnz	r0, 75f0 <__pow5mult+0x40>
    75e4:	4b1d      	ldr	r3, [pc, #116]	; (765c <__pow5mult+0xac>)
    75e6:	481e      	ldr	r0, [pc, #120]	; (7660 <__pow5mult+0xb0>)
    75e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    75ec:	f7fe fd4a 	bl	6084 <__assert_func>
    75f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
    75f4:	6004      	str	r4, [r0, #0]
    75f6:	60c4      	str	r4, [r0, #12]
    75f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    75fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
    7600:	b94c      	cbnz	r4, 7616 <__pow5mult+0x66>
    7602:	f240 2171 	movw	r1, #625	; 0x271
    7606:	4630      	mov	r0, r6
    7608:	f7ff ff12 	bl	7430 <__i2b>
    760c:	2300      	movs	r3, #0
    760e:	f8c8 0008 	str.w	r0, [r8, #8]
    7612:	4604      	mov	r4, r0
    7614:	6003      	str	r3, [r0, #0]
    7616:	f04f 0900 	mov.w	r9, #0
    761a:	07eb      	lsls	r3, r5, #31
    761c:	d50a      	bpl.n	7634 <__pow5mult+0x84>
    761e:	4639      	mov	r1, r7
    7620:	4622      	mov	r2, r4
    7622:	4630      	mov	r0, r6
    7624:	f7ff ff1a 	bl	745c <__multiply>
    7628:	4639      	mov	r1, r7
    762a:	4680      	mov	r8, r0
    762c:	4630      	mov	r0, r6
    762e:	f7ff fe97 	bl	7360 <_Bfree>
    7632:	4647      	mov	r7, r8
    7634:	106d      	asrs	r5, r5, #1
    7636:	d00b      	beq.n	7650 <__pow5mult+0xa0>
    7638:	6820      	ldr	r0, [r4, #0]
    763a:	b938      	cbnz	r0, 764c <__pow5mult+0x9c>
    763c:	4622      	mov	r2, r4
    763e:	4621      	mov	r1, r4
    7640:	4630      	mov	r0, r6
    7642:	f7ff ff0b 	bl	745c <__multiply>
    7646:	6020      	str	r0, [r4, #0]
    7648:	f8c0 9000 	str.w	r9, [r0]
    764c:	4604      	mov	r4, r0
    764e:	e7e4      	b.n	761a <__pow5mult+0x6a>
    7650:	4638      	mov	r0, r7
    7652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7656:	bf00      	nop
    7658:	0000a764 	.word	0x0000a764
    765c:	0000ab1c 	.word	0x0000ab1c
    7660:	0000abc2 	.word	0x0000abc2

00007664 <__lshift>:
    7664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7668:	460c      	mov	r4, r1
    766a:	6849      	ldr	r1, [r1, #4]
    766c:	6923      	ldr	r3, [r4, #16]
    766e:	eb03 1862 	add.w	r8, r3, r2, asr #5
    7672:	68a3      	ldr	r3, [r4, #8]
    7674:	4607      	mov	r7, r0
    7676:	4691      	mov	r9, r2
    7678:	ea4f 1a62 	mov.w	sl, r2, asr #5
    767c:	f108 0601 	add.w	r6, r8, #1
    7680:	42b3      	cmp	r3, r6
    7682:	db0b      	blt.n	769c <__lshift+0x38>
    7684:	4638      	mov	r0, r7
    7686:	f7ff fe2b 	bl	72e0 <_Balloc>
    768a:	4605      	mov	r5, r0
    768c:	b948      	cbnz	r0, 76a2 <__lshift+0x3e>
    768e:	4602      	mov	r2, r0
    7690:	4b2a      	ldr	r3, [pc, #168]	; (773c <__lshift+0xd8>)
    7692:	482b      	ldr	r0, [pc, #172]	; (7740 <__lshift+0xdc>)
    7694:	f240 11d9 	movw	r1, #473	; 0x1d9
    7698:	f7fe fcf4 	bl	6084 <__assert_func>
    769c:	3101      	adds	r1, #1
    769e:	005b      	lsls	r3, r3, #1
    76a0:	e7ee      	b.n	7680 <__lshift+0x1c>
    76a2:	2300      	movs	r3, #0
    76a4:	f100 0114 	add.w	r1, r0, #20
    76a8:	f100 0210 	add.w	r2, r0, #16
    76ac:	4618      	mov	r0, r3
    76ae:	4553      	cmp	r3, sl
    76b0:	db37      	blt.n	7722 <__lshift+0xbe>
    76b2:	6920      	ldr	r0, [r4, #16]
    76b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    76b8:	f104 0314 	add.w	r3, r4, #20
    76bc:	f019 091f 	ands.w	r9, r9, #31
    76c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
    76c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    76c8:	d02f      	beq.n	772a <__lshift+0xc6>
    76ca:	f1c9 0e20 	rsb	lr, r9, #32
    76ce:	468a      	mov	sl, r1
    76d0:	f04f 0c00 	mov.w	ip, #0
    76d4:	681a      	ldr	r2, [r3, #0]
    76d6:	fa02 f209 	lsl.w	r2, r2, r9
    76da:	ea42 020c 	orr.w	r2, r2, ip
    76de:	f84a 2b04 	str.w	r2, [sl], #4
    76e2:	f853 2b04 	ldr.w	r2, [r3], #4
    76e6:	4298      	cmp	r0, r3
    76e8:	fa22 fc0e 	lsr.w	ip, r2, lr
    76ec:	d8f2      	bhi.n	76d4 <__lshift+0x70>
    76ee:	1b03      	subs	r3, r0, r4
    76f0:	3b15      	subs	r3, #21
    76f2:	f023 0303 	bic.w	r3, r3, #3
    76f6:	3304      	adds	r3, #4
    76f8:	f104 0215 	add.w	r2, r4, #21
    76fc:	4290      	cmp	r0, r2
    76fe:	bf38      	it	cc
    7700:	2304      	movcc	r3, #4
    7702:	f841 c003 	str.w	ip, [r1, r3]
    7706:	f1bc 0f00 	cmp.w	ip, #0
    770a:	d001      	beq.n	7710 <__lshift+0xac>
    770c:	f108 0602 	add.w	r6, r8, #2
    7710:	3e01      	subs	r6, #1
    7712:	4638      	mov	r0, r7
    7714:	612e      	str	r6, [r5, #16]
    7716:	4621      	mov	r1, r4
    7718:	f7ff fe22 	bl	7360 <_Bfree>
    771c:	4628      	mov	r0, r5
    771e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7722:	f842 0f04 	str.w	r0, [r2, #4]!
    7726:	3301      	adds	r3, #1
    7728:	e7c1      	b.n	76ae <__lshift+0x4a>
    772a:	3904      	subs	r1, #4
    772c:	f853 2b04 	ldr.w	r2, [r3], #4
    7730:	f841 2f04 	str.w	r2, [r1, #4]!
    7734:	4298      	cmp	r0, r3
    7736:	d8f9      	bhi.n	772c <__lshift+0xc8>
    7738:	e7ea      	b.n	7710 <__lshift+0xac>
    773a:	bf00      	nop
    773c:	0000abb1 	.word	0x0000abb1
    7740:	0000abc2 	.word	0x0000abc2

00007744 <__mdiff>:
    7744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7748:	460c      	mov	r4, r1
    774a:	4606      	mov	r6, r0
    774c:	4611      	mov	r1, r2
    774e:	4620      	mov	r0, r4
    7750:	4690      	mov	r8, r2
    7752:	f001 fd7c 	bl	924e <__mcmp>
    7756:	1e05      	subs	r5, r0, #0
    7758:	d110      	bne.n	777c <__mdiff+0x38>
    775a:	4629      	mov	r1, r5
    775c:	4630      	mov	r0, r6
    775e:	f7ff fdbf 	bl	72e0 <_Balloc>
    7762:	b930      	cbnz	r0, 7772 <__mdiff+0x2e>
    7764:	4b3a      	ldr	r3, [pc, #232]	; (7850 <__mdiff+0x10c>)
    7766:	4602      	mov	r2, r0
    7768:	f240 2132 	movw	r1, #562	; 0x232
    776c:	4839      	ldr	r0, [pc, #228]	; (7854 <__mdiff+0x110>)
    776e:	f7fe fc89 	bl	6084 <__assert_func>
    7772:	2301      	movs	r3, #1
    7774:	e9c0 3504 	strd	r3, r5, [r0, #16]
    7778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    777c:	bfa4      	itt	ge
    777e:	4643      	movge	r3, r8
    7780:	46a0      	movge	r8, r4
    7782:	4630      	mov	r0, r6
    7784:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7788:	bfa6      	itte	ge
    778a:	461c      	movge	r4, r3
    778c:	2500      	movge	r5, #0
    778e:	2501      	movlt	r5, #1
    7790:	f7ff fda6 	bl	72e0 <_Balloc>
    7794:	b920      	cbnz	r0, 77a0 <__mdiff+0x5c>
    7796:	4b2e      	ldr	r3, [pc, #184]	; (7850 <__mdiff+0x10c>)
    7798:	4602      	mov	r2, r0
    779a:	f44f 7110 	mov.w	r1, #576	; 0x240
    779e:	e7e5      	b.n	776c <__mdiff+0x28>
    77a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
    77a4:	6926      	ldr	r6, [r4, #16]
    77a6:	60c5      	str	r5, [r0, #12]
    77a8:	f104 0914 	add.w	r9, r4, #20
    77ac:	f108 0514 	add.w	r5, r8, #20
    77b0:	f100 0e14 	add.w	lr, r0, #20
    77b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
    77b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
    77bc:	f108 0210 	add.w	r2, r8, #16
    77c0:	46f2      	mov	sl, lr
    77c2:	2100      	movs	r1, #0
    77c4:	f859 3b04 	ldr.w	r3, [r9], #4
    77c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
    77cc:	fa1f f883 	uxth.w	r8, r3
    77d0:	fa11 f18b 	uxtah	r1, r1, fp
    77d4:	0c1b      	lsrs	r3, r3, #16
    77d6:	eba1 0808 	sub.w	r8, r1, r8
    77da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
    77de:	eb03 4328 	add.w	r3, r3, r8, asr #16
    77e2:	fa1f f888 	uxth.w	r8, r8
    77e6:	1419      	asrs	r1, r3, #16
    77e8:	454e      	cmp	r6, r9
    77ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    77ee:	f84a 3b04 	str.w	r3, [sl], #4
    77f2:	d8e7      	bhi.n	77c4 <__mdiff+0x80>
    77f4:	1b33      	subs	r3, r6, r4
    77f6:	3b15      	subs	r3, #21
    77f8:	f023 0303 	bic.w	r3, r3, #3
    77fc:	3304      	adds	r3, #4
    77fe:	3415      	adds	r4, #21
    7800:	42a6      	cmp	r6, r4
    7802:	bf38      	it	cc
    7804:	2304      	movcc	r3, #4
    7806:	441d      	add	r5, r3
    7808:	4473      	add	r3, lr
    780a:	469e      	mov	lr, r3
    780c:	462e      	mov	r6, r5
    780e:	4566      	cmp	r6, ip
    7810:	d30e      	bcc.n	7830 <__mdiff+0xec>
    7812:	f10c 0203 	add.w	r2, ip, #3
    7816:	1b52      	subs	r2, r2, r5
    7818:	f022 0203 	bic.w	r2, r2, #3
    781c:	3d03      	subs	r5, #3
    781e:	45ac      	cmp	ip, r5
    7820:	bf38      	it	cc
    7822:	2200      	movcc	r2, #0
    7824:	441a      	add	r2, r3
    7826:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    782a:	b17b      	cbz	r3, 784c <__mdiff+0x108>
    782c:	6107      	str	r7, [r0, #16]
    782e:	e7a3      	b.n	7778 <__mdiff+0x34>
    7830:	f856 8b04 	ldr.w	r8, [r6], #4
    7834:	fa11 f288 	uxtah	r2, r1, r8
    7838:	1414      	asrs	r4, r2, #16
    783a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
    783e:	b292      	uxth	r2, r2
    7840:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    7844:	f84e 2b04 	str.w	r2, [lr], #4
    7848:	1421      	asrs	r1, r4, #16
    784a:	e7e0      	b.n	780e <__mdiff+0xca>
    784c:	3f01      	subs	r7, #1
    784e:	e7ea      	b.n	7826 <__mdiff+0xe2>
    7850:	0000abb1 	.word	0x0000abb1
    7854:	0000abc2 	.word	0x0000abc2

00007858 <__d2b>:
    7858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    785c:	4689      	mov	r9, r1
    785e:	2101      	movs	r1, #1
    7860:	ec57 6b10 	vmov	r6, r7, d0
    7864:	4690      	mov	r8, r2
    7866:	f7ff fd3b 	bl	72e0 <_Balloc>
    786a:	4604      	mov	r4, r0
    786c:	b930      	cbnz	r0, 787c <__d2b+0x24>
    786e:	4602      	mov	r2, r0
    7870:	4b25      	ldr	r3, [pc, #148]	; (7908 <__d2b+0xb0>)
    7872:	4826      	ldr	r0, [pc, #152]	; (790c <__d2b+0xb4>)
    7874:	f240 310a 	movw	r1, #778	; 0x30a
    7878:	f7fe fc04 	bl	6084 <__assert_func>
    787c:	f3c7 550a 	ubfx	r5, r7, #20, #11
    7880:	f3c7 0313 	ubfx	r3, r7, #0, #20
    7884:	bb35      	cbnz	r5, 78d4 <__d2b+0x7c>
    7886:	2e00      	cmp	r6, #0
    7888:	9301      	str	r3, [sp, #4]
    788a:	d028      	beq.n	78de <__d2b+0x86>
    788c:	4668      	mov	r0, sp
    788e:	9600      	str	r6, [sp, #0]
    7890:	f001 fcae 	bl	91f0 <__lo0bits>
    7894:	9900      	ldr	r1, [sp, #0]
    7896:	b300      	cbz	r0, 78da <__d2b+0x82>
    7898:	9a01      	ldr	r2, [sp, #4]
    789a:	f1c0 0320 	rsb	r3, r0, #32
    789e:	fa02 f303 	lsl.w	r3, r2, r3
    78a2:	430b      	orrs	r3, r1
    78a4:	40c2      	lsrs	r2, r0
    78a6:	6163      	str	r3, [r4, #20]
    78a8:	9201      	str	r2, [sp, #4]
    78aa:	9b01      	ldr	r3, [sp, #4]
    78ac:	61a3      	str	r3, [r4, #24]
    78ae:	2b00      	cmp	r3, #0
    78b0:	bf14      	ite	ne
    78b2:	2202      	movne	r2, #2
    78b4:	2201      	moveq	r2, #1
    78b6:	6122      	str	r2, [r4, #16]
    78b8:	b1d5      	cbz	r5, 78f0 <__d2b+0x98>
    78ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    78be:	4405      	add	r5, r0
    78c0:	f8c9 5000 	str.w	r5, [r9]
    78c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    78c8:	f8c8 0000 	str.w	r0, [r8]
    78cc:	4620      	mov	r0, r4
    78ce:	b003      	add	sp, #12
    78d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    78d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    78d8:	e7d5      	b.n	7886 <__d2b+0x2e>
    78da:	6161      	str	r1, [r4, #20]
    78dc:	e7e5      	b.n	78aa <__d2b+0x52>
    78de:	a801      	add	r0, sp, #4
    78e0:	f001 fc86 	bl	91f0 <__lo0bits>
    78e4:	9b01      	ldr	r3, [sp, #4]
    78e6:	6163      	str	r3, [r4, #20]
    78e8:	2201      	movs	r2, #1
    78ea:	6122      	str	r2, [r4, #16]
    78ec:	3020      	adds	r0, #32
    78ee:	e7e3      	b.n	78b8 <__d2b+0x60>
    78f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    78f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    78f8:	f8c9 0000 	str.w	r0, [r9]
    78fc:	6918      	ldr	r0, [r3, #16]
    78fe:	f001 fc57 	bl	91b0 <__hi0bits>
    7902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
    7906:	e7df      	b.n	78c8 <__d2b+0x70>
    7908:	0000abb1 	.word	0x0000abb1
    790c:	0000abc2 	.word	0x0000abc2

00007910 <_write_r>:
    7910:	b538      	push	{r3, r4, r5, lr}
    7912:	4d07      	ldr	r5, [pc, #28]	; (7930 <_write_r+0x20>)
    7914:	4604      	mov	r4, r0
    7916:	4608      	mov	r0, r1
    7918:	4611      	mov	r1, r2
    791a:	2200      	movs	r2, #0
    791c:	602a      	str	r2, [r5, #0]
    791e:	461a      	mov	r2, r3
    7920:	f000 fc06 	bl	8130 <_write>
    7924:	1c43      	adds	r3, r0, #1
    7926:	d102      	bne.n	792e <_write_r+0x1e>
    7928:	682b      	ldr	r3, [r5, #0]
    792a:	b103      	cbz	r3, 792e <_write_r+0x1e>
    792c:	6023      	str	r3, [r4, #0]
    792e:	bd38      	pop	{r3, r4, r5, pc}
    7930:	20000ecc 	.word	0x20000ecc

00007934 <_close_r>:
    7934:	b538      	push	{r3, r4, r5, lr}
    7936:	4d06      	ldr	r5, [pc, #24]	; (7950 <_close_r+0x1c>)
    7938:	2300      	movs	r3, #0
    793a:	4604      	mov	r4, r0
    793c:	4608      	mov	r0, r1
    793e:	602b      	str	r3, [r5, #0]
    7940:	f000 fbfa 	bl	8138 <_close>
    7944:	1c43      	adds	r3, r0, #1
    7946:	d102      	bne.n	794e <_close_r+0x1a>
    7948:	682b      	ldr	r3, [r5, #0]
    794a:	b103      	cbz	r3, 794e <_close_r+0x1a>
    794c:	6023      	str	r3, [r4, #0]
    794e:	bd38      	pop	{r3, r4, r5, pc}
    7950:	20000ecc 	.word	0x20000ecc

00007954 <_fstat_r>:
    7954:	b538      	push	{r3, r4, r5, lr}
    7956:	4d07      	ldr	r5, [pc, #28]	; (7974 <_fstat_r+0x20>)
    7958:	2300      	movs	r3, #0
    795a:	4604      	mov	r4, r0
    795c:	4608      	mov	r0, r1
    795e:	4611      	mov	r1, r2
    7960:	602b      	str	r3, [r5, #0]
    7962:	f000 fbf7 	bl	8154 <_fstat>
    7966:	1c43      	adds	r3, r0, #1
    7968:	d102      	bne.n	7970 <_fstat_r+0x1c>
    796a:	682b      	ldr	r3, [r5, #0]
    796c:	b103      	cbz	r3, 7970 <_fstat_r+0x1c>
    796e:	6023      	str	r3, [r4, #0]
    7970:	bd38      	pop	{r3, r4, r5, pc}
    7972:	bf00      	nop
    7974:	20000ecc 	.word	0x20000ecc

00007978 <_isatty_r>:
    7978:	b538      	push	{r3, r4, r5, lr}
    797a:	4d06      	ldr	r5, [pc, #24]	; (7994 <_isatty_r+0x1c>)
    797c:	2300      	movs	r3, #0
    797e:	4604      	mov	r4, r0
    7980:	4608      	mov	r0, r1
    7982:	602b      	str	r3, [r5, #0]
    7984:	f000 fbdd 	bl	8142 <_isatty>
    7988:	1c43      	adds	r3, r0, #1
    798a:	d102      	bne.n	7992 <_isatty_r+0x1a>
    798c:	682b      	ldr	r3, [r5, #0]
    798e:	b103      	cbz	r3, 7992 <_isatty_r+0x1a>
    7990:	6023      	str	r3, [r4, #0]
    7992:	bd38      	pop	{r3, r4, r5, pc}
    7994:	20000ecc 	.word	0x20000ecc

00007998 <_lseek_r>:
    7998:	b538      	push	{r3, r4, r5, lr}
    799a:	4d07      	ldr	r5, [pc, #28]	; (79b8 <_lseek_r+0x20>)
    799c:	4604      	mov	r4, r0
    799e:	4608      	mov	r0, r1
    79a0:	4611      	mov	r1, r2
    79a2:	2200      	movs	r2, #0
    79a4:	602a      	str	r2, [r5, #0]
    79a6:	461a      	mov	r2, r3
    79a8:	f000 fbc9 	bl	813e <_lseek>
    79ac:	1c43      	adds	r3, r0, #1
    79ae:	d102      	bne.n	79b6 <_lseek_r+0x1e>
    79b0:	682b      	ldr	r3, [r5, #0]
    79b2:	b103      	cbz	r3, 79b6 <_lseek_r+0x1e>
    79b4:	6023      	str	r3, [r4, #0]
    79b6:	bd38      	pop	{r3, r4, r5, pc}
    79b8:	20000ecc 	.word	0x20000ecc

000079bc <_read_r>:
    79bc:	b538      	push	{r3, r4, r5, lr}
    79be:	4d07      	ldr	r5, [pc, #28]	; (79dc <_read_r+0x20>)
    79c0:	4604      	mov	r4, r0
    79c2:	4608      	mov	r0, r1
    79c4:	4611      	mov	r1, r2
    79c6:	2200      	movs	r2, #0
    79c8:	602a      	str	r2, [r5, #0]
    79ca:	461a      	mov	r2, r3
    79cc:	f000 fbac 	bl	8128 <_read>
    79d0:	1c43      	adds	r3, r0, #1
    79d2:	d102      	bne.n	79da <_read_r+0x1e>
    79d4:	682b      	ldr	r3, [r5, #0]
    79d6:	b103      	cbz	r3, 79da <_read_r+0x1e>
    79d8:	6023      	str	r3, [r4, #0]
    79da:	bd38      	pop	{r3, r4, r5, pc}
    79dc:	20000ecc 	.word	0x20000ecc

000079e0 <nrf_cc3xx_platform_init_no_rng>:
    79e0:	b510      	push	{r4, lr}
    79e2:	4c0a      	ldr	r4, [pc, #40]	; (7a0c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    79e4:	6823      	ldr	r3, [r4, #0]
    79e6:	b11b      	cbz	r3, 79f0 <nrf_cc3xx_platform_init_no_rng+0x10>
    79e8:	2301      	movs	r3, #1
    79ea:	6023      	str	r3, [r4, #0]
    79ec:	2000      	movs	r0, #0
    79ee:	bd10      	pop	{r4, pc}
    79f0:	f000 f8d0 	bl	7b94 <CC_LibInitNoRng>
    79f4:	2800      	cmp	r0, #0
    79f6:	d0f7      	beq.n	79e8 <nrf_cc3xx_platform_init_no_rng+0x8>
    79f8:	3801      	subs	r0, #1
    79fa:	2806      	cmp	r0, #6
    79fc:	d803      	bhi.n	7a06 <nrf_cc3xx_platform_init_no_rng+0x26>
    79fe:	4b04      	ldr	r3, [pc, #16]	; (7a10 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7a00:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7a04:	bd10      	pop	{r4, pc}
    7a06:	4803      	ldr	r0, [pc, #12]	; (7a14 <nrf_cc3xx_platform_init_no_rng+0x34>)
    7a08:	bd10      	pop	{r4, pc}
    7a0a:	bf00      	nop
    7a0c:	20000ed0 	.word	0x20000ed0
    7a10:	0000a770 	.word	0x0000a770
    7a14:	ffff8ffe 	.word	0xffff8ffe

00007a18 <nrf_cc3xx_platform_abort>:
    7a18:	f3bf 8f4f 	dsb	sy
    7a1c:	4905      	ldr	r1, [pc, #20]	; (7a34 <nrf_cc3xx_platform_abort+0x1c>)
    7a1e:	4b06      	ldr	r3, [pc, #24]	; (7a38 <nrf_cc3xx_platform_abort+0x20>)
    7a20:	68ca      	ldr	r2, [r1, #12]
    7a22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7a26:	4313      	orrs	r3, r2
    7a28:	60cb      	str	r3, [r1, #12]
    7a2a:	f3bf 8f4f 	dsb	sy
    7a2e:	bf00      	nop
    7a30:	e7fd      	b.n	7a2e <nrf_cc3xx_platform_abort+0x16>
    7a32:	bf00      	nop
    7a34:	e000ed00 	.word	0xe000ed00
    7a38:	05fa0004 	.word	0x05fa0004

00007a3c <CC_PalAbort>:
    7a3c:	b410      	push	{r4}
    7a3e:	4b0a      	ldr	r3, [pc, #40]	; (7a68 <CC_PalAbort+0x2c>)
    7a40:	490a      	ldr	r1, [pc, #40]	; (7a6c <CC_PalAbort+0x30>)
    7a42:	4c0b      	ldr	r4, [pc, #44]	; (7a70 <CC_PalAbort+0x34>)
    7a44:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    7a48:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    7a4c:	6849      	ldr	r1, [r1, #4]
    7a4e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    7a52:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    7a56:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    7a5a:	2300      	movs	r3, #0
    7a5c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    7a60:	f85d 4b04 	ldr.w	r4, [sp], #4
    7a64:	4708      	bx	r1
    7a66:	bf00      	nop
    7a68:	5002b000 	.word	0x5002b000
    7a6c:	2000050c 	.word	0x2000050c
    7a70:	5002a000 	.word	0x5002a000

00007a74 <nrf_cc3xx_platform_set_abort>:
    7a74:	e9d0 1200 	ldrd	r1, r2, [r0]
    7a78:	4b01      	ldr	r3, [pc, #4]	; (7a80 <nrf_cc3xx_platform_set_abort+0xc>)
    7a7a:	e9c3 1200 	strd	r1, r2, [r3]
    7a7e:	4770      	bx	lr
    7a80:	2000050c 	.word	0x2000050c

00007a84 <mutex_free>:
    7a84:	b510      	push	{r4, lr}
    7a86:	4604      	mov	r4, r0
    7a88:	b130      	cbz	r0, 7a98 <mutex_free+0x14>
    7a8a:	6863      	ldr	r3, [r4, #4]
    7a8c:	06db      	lsls	r3, r3, #27
    7a8e:	d502      	bpl.n	7a96 <mutex_free+0x12>
    7a90:	2300      	movs	r3, #0
    7a92:	6023      	str	r3, [r4, #0]
    7a94:	6063      	str	r3, [r4, #4]
    7a96:	bd10      	pop	{r4, pc}
    7a98:	4b02      	ldr	r3, [pc, #8]	; (7aa4 <mutex_free+0x20>)
    7a9a:	4803      	ldr	r0, [pc, #12]	; (7aa8 <mutex_free+0x24>)
    7a9c:	685b      	ldr	r3, [r3, #4]
    7a9e:	4798      	blx	r3
    7aa0:	e7f3      	b.n	7a8a <mutex_free+0x6>
    7aa2:	bf00      	nop
    7aa4:	2000050c 	.word	0x2000050c
    7aa8:	0000a78c 	.word	0x0000a78c

00007aac <mutex_lock>:
    7aac:	b1b0      	cbz	r0, 7adc <mutex_lock+0x30>
    7aae:	6843      	ldr	r3, [r0, #4]
    7ab0:	b193      	cbz	r3, 7ad8 <mutex_lock+0x2c>
    7ab2:	06db      	lsls	r3, r3, #27
    7ab4:	d50e      	bpl.n	7ad4 <mutex_lock+0x28>
    7ab6:	2301      	movs	r3, #1
    7ab8:	e850 2f00 	ldrex	r2, [r0]
    7abc:	4619      	mov	r1, r3
    7abe:	e840 1c00 	strex	ip, r1, [r0]
    7ac2:	f09c 0f00 	teq	ip, #0
    7ac6:	d1f7      	bne.n	7ab8 <mutex_lock+0xc>
    7ac8:	2a01      	cmp	r2, #1
    7aca:	d0f5      	beq.n	7ab8 <mutex_lock+0xc>
    7acc:	f3bf 8f5f 	dmb	sy
    7ad0:	2000      	movs	r0, #0
    7ad2:	4770      	bx	lr
    7ad4:	4803      	ldr	r0, [pc, #12]	; (7ae4 <mutex_lock+0x38>)
    7ad6:	4770      	bx	lr
    7ad8:	4803      	ldr	r0, [pc, #12]	; (7ae8 <mutex_lock+0x3c>)
    7ada:	4770      	bx	lr
    7adc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7ae0:	4770      	bx	lr
    7ae2:	bf00      	nop
    7ae4:	ffff8fe9 	.word	0xffff8fe9
    7ae8:	ffff8fea 	.word	0xffff8fea

00007aec <mutex_unlock>:
    7aec:	b168      	cbz	r0, 7b0a <mutex_unlock+0x1e>
    7aee:	6843      	ldr	r3, [r0, #4]
    7af0:	b13b      	cbz	r3, 7b02 <mutex_unlock+0x16>
    7af2:	06db      	lsls	r3, r3, #27
    7af4:	d507      	bpl.n	7b06 <mutex_unlock+0x1a>
    7af6:	f3bf 8f5f 	dmb	sy
    7afa:	2300      	movs	r3, #0
    7afc:	6003      	str	r3, [r0, #0]
    7afe:	4618      	mov	r0, r3
    7b00:	4770      	bx	lr
    7b02:	4803      	ldr	r0, [pc, #12]	; (7b10 <mutex_unlock+0x24>)
    7b04:	4770      	bx	lr
    7b06:	4803      	ldr	r0, [pc, #12]	; (7b14 <mutex_unlock+0x28>)
    7b08:	4770      	bx	lr
    7b0a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7b0e:	4770      	bx	lr
    7b10:	ffff8fea 	.word	0xffff8fea
    7b14:	ffff8fe9 	.word	0xffff8fe9

00007b18 <mutex_init>:
    7b18:	b510      	push	{r4, lr}
    7b1a:	4604      	mov	r4, r0
    7b1c:	b120      	cbz	r0, 7b28 <mutex_init+0x10>
    7b1e:	2200      	movs	r2, #0
    7b20:	2311      	movs	r3, #17
    7b22:	6022      	str	r2, [r4, #0]
    7b24:	6063      	str	r3, [r4, #4]
    7b26:	bd10      	pop	{r4, pc}
    7b28:	4801      	ldr	r0, [pc, #4]	; (7b30 <mutex_init+0x18>)
    7b2a:	f7ff ff87 	bl	7a3c <CC_PalAbort>
    7b2e:	e7f6      	b.n	7b1e <mutex_init+0x6>
    7b30:	0000a7b4 	.word	0x0000a7b4

00007b34 <nrf_cc3xx_platform_set_mutexes>:
    7b34:	b570      	push	{r4, r5, r6, lr}
    7b36:	e9d0 2300 	ldrd	r2, r3, [r0]
    7b3a:	4c13      	ldr	r4, [pc, #76]	; (7b88 <nrf_cc3xx_platform_set_mutexes+0x54>)
    7b3c:	4d13      	ldr	r5, [pc, #76]	; (7b8c <nrf_cc3xx_platform_set_mutexes+0x58>)
    7b3e:	6063      	str	r3, [r4, #4]
    7b40:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    7b44:	e9c4 3002 	strd	r3, r0, [r4, #8]
    7b48:	6022      	str	r2, [r4, #0]
    7b4a:	4b11      	ldr	r3, [pc, #68]	; (7b90 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7b4c:	6808      	ldr	r0, [r1, #0]
    7b4e:	6018      	str	r0, [r3, #0]
    7b50:	6848      	ldr	r0, [r1, #4]
    7b52:	6058      	str	r0, [r3, #4]
    7b54:	6888      	ldr	r0, [r1, #8]
    7b56:	6098      	str	r0, [r3, #8]
    7b58:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    7b5c:	60d8      	str	r0, [r3, #12]
    7b5e:	6119      	str	r1, [r3, #16]
    7b60:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    7b64:	06db      	lsls	r3, r3, #27
    7b66:	d50d      	bpl.n	7b84 <nrf_cc3xx_platform_set_mutexes+0x50>
    7b68:	2300      	movs	r3, #0
    7b6a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    7b6e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    7b72:	f505 708a 	add.w	r0, r5, #276	; 0x114
    7b76:	4790      	blx	r2
    7b78:	6823      	ldr	r3, [r4, #0]
    7b7a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    7b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b82:	4718      	bx	r3
    7b84:	bd70      	pop	{r4, r5, r6, pc}
    7b86:	bf00      	nop
    7b88:	2000051c 	.word	0x2000051c
    7b8c:	20000ee8 	.word	0x20000ee8
    7b90:	2000052c 	.word	0x2000052c

00007b94 <CC_LibInitNoRng>:
    7b94:	b538      	push	{r3, r4, r5, lr}
    7b96:	f000 f82f 	bl	7bf8 <CC_HalInit>
    7b9a:	b120      	cbz	r0, 7ba6 <CC_LibInitNoRng+0x12>
    7b9c:	2403      	movs	r4, #3
    7b9e:	f000 f863 	bl	7c68 <CC_PalTerminate>
    7ba2:	4620      	mov	r0, r4
    7ba4:	bd38      	pop	{r3, r4, r5, pc}
    7ba6:	f000 f831 	bl	7c0c <CC_PalInit>
    7baa:	b998      	cbnz	r0, 7bd4 <CC_LibInitNoRng+0x40>
    7bac:	f000 f8ac 	bl	7d08 <CC_PalPowerSaveModeSelect>
    7bb0:	b998      	cbnz	r0, 7bda <CC_LibInitNoRng+0x46>
    7bb2:	4d0f      	ldr	r5, [pc, #60]	; (7bf0 <CC_LibInitNoRng+0x5c>)
    7bb4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    7bb8:	0e1b      	lsrs	r3, r3, #24
    7bba:	2bf0      	cmp	r3, #240	; 0xf0
    7bbc:	d108      	bne.n	7bd0 <CC_LibInitNoRng+0x3c>
    7bbe:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    7bc2:	4b0c      	ldr	r3, [pc, #48]	; (7bf4 <CC_LibInitNoRng+0x60>)
    7bc4:	429a      	cmp	r2, r3
    7bc6:	d00a      	beq.n	7bde <CC_LibInitNoRng+0x4a>
    7bc8:	2407      	movs	r4, #7
    7bca:	f000 f817 	bl	7bfc <CC_HalTerminate>
    7bce:	e7e6      	b.n	7b9e <CC_LibInitNoRng+0xa>
    7bd0:	2406      	movs	r4, #6
    7bd2:	e7fa      	b.n	7bca <CC_LibInitNoRng+0x36>
    7bd4:	2404      	movs	r4, #4
    7bd6:	4620      	mov	r0, r4
    7bd8:	bd38      	pop	{r3, r4, r5, pc}
    7bda:	2400      	movs	r4, #0
    7bdc:	e7f5      	b.n	7bca <CC_LibInitNoRng+0x36>
    7bde:	2001      	movs	r0, #1
    7be0:	f000 f892 	bl	7d08 <CC_PalPowerSaveModeSelect>
    7be4:	4604      	mov	r4, r0
    7be6:	2800      	cmp	r0, #0
    7be8:	d1f7      	bne.n	7bda <CC_LibInitNoRng+0x46>
    7bea:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    7bee:	e7d8      	b.n	7ba2 <CC_LibInitNoRng+0xe>
    7bf0:	5002b000 	.word	0x5002b000
    7bf4:	20e00000 	.word	0x20e00000

00007bf8 <CC_HalInit>:
    7bf8:	2000      	movs	r0, #0
    7bfa:	4770      	bx	lr

00007bfc <CC_HalTerminate>:
    7bfc:	2000      	movs	r0, #0
    7bfe:	4770      	bx	lr

00007c00 <CC_HalMaskInterrupt>:
    7c00:	4b01      	ldr	r3, [pc, #4]	; (7c08 <CC_HalMaskInterrupt+0x8>)
    7c02:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    7c06:	4770      	bx	lr
    7c08:	5002b000 	.word	0x5002b000

00007c0c <CC_PalInit>:
    7c0c:	b510      	push	{r4, lr}
    7c0e:	4811      	ldr	r0, [pc, #68]	; (7c54 <CC_PalInit+0x48>)
    7c10:	f000 f848 	bl	7ca4 <CC_PalMutexCreate>
    7c14:	b100      	cbz	r0, 7c18 <CC_PalInit+0xc>
    7c16:	bd10      	pop	{r4, pc}
    7c18:	480f      	ldr	r0, [pc, #60]	; (7c58 <CC_PalInit+0x4c>)
    7c1a:	f000 f843 	bl	7ca4 <CC_PalMutexCreate>
    7c1e:	2800      	cmp	r0, #0
    7c20:	d1f9      	bne.n	7c16 <CC_PalInit+0xa>
    7c22:	4c0e      	ldr	r4, [pc, #56]	; (7c5c <CC_PalInit+0x50>)
    7c24:	4620      	mov	r0, r4
    7c26:	f000 f83d 	bl	7ca4 <CC_PalMutexCreate>
    7c2a:	2800      	cmp	r0, #0
    7c2c:	d1f3      	bne.n	7c16 <CC_PalInit+0xa>
    7c2e:	4b0c      	ldr	r3, [pc, #48]	; (7c60 <CC_PalInit+0x54>)
    7c30:	480c      	ldr	r0, [pc, #48]	; (7c64 <CC_PalInit+0x58>)
    7c32:	601c      	str	r4, [r3, #0]
    7c34:	f000 f836 	bl	7ca4 <CC_PalMutexCreate>
    7c38:	4601      	mov	r1, r0
    7c3a:	2800      	cmp	r0, #0
    7c3c:	d1eb      	bne.n	7c16 <CC_PalInit+0xa>
    7c3e:	f000 f82d 	bl	7c9c <CC_PalDmaInit>
    7c42:	4604      	mov	r4, r0
    7c44:	b108      	cbz	r0, 7c4a <CC_PalInit+0x3e>
    7c46:	4620      	mov	r0, r4
    7c48:	bd10      	pop	{r4, pc}
    7c4a:	f000 f83f 	bl	7ccc <CC_PalPowerSaveModeInit>
    7c4e:	4620      	mov	r0, r4
    7c50:	e7fa      	b.n	7c48 <CC_PalInit+0x3c>
    7c52:	bf00      	nop
    7c54:	20000564 	.word	0x20000564
    7c58:	20000558 	.word	0x20000558
    7c5c:	20000560 	.word	0x20000560
    7c60:	20000568 	.word	0x20000568
    7c64:	2000055c 	.word	0x2000055c

00007c68 <CC_PalTerminate>:
    7c68:	b508      	push	{r3, lr}
    7c6a:	4808      	ldr	r0, [pc, #32]	; (7c8c <CC_PalTerminate+0x24>)
    7c6c:	f000 f824 	bl	7cb8 <CC_PalMutexDestroy>
    7c70:	4807      	ldr	r0, [pc, #28]	; (7c90 <CC_PalTerminate+0x28>)
    7c72:	f000 f821 	bl	7cb8 <CC_PalMutexDestroy>
    7c76:	4807      	ldr	r0, [pc, #28]	; (7c94 <CC_PalTerminate+0x2c>)
    7c78:	f000 f81e 	bl	7cb8 <CC_PalMutexDestroy>
    7c7c:	4806      	ldr	r0, [pc, #24]	; (7c98 <CC_PalTerminate+0x30>)
    7c7e:	f000 f81b 	bl	7cb8 <CC_PalMutexDestroy>
    7c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7c86:	f000 b80b 	b.w	7ca0 <CC_PalDmaTerminate>
    7c8a:	bf00      	nop
    7c8c:	20000564 	.word	0x20000564
    7c90:	20000558 	.word	0x20000558
    7c94:	20000560 	.word	0x20000560
    7c98:	2000055c 	.word	0x2000055c

00007c9c <CC_PalDmaInit>:
    7c9c:	2000      	movs	r0, #0
    7c9e:	4770      	bx	lr

00007ca0 <CC_PalDmaTerminate>:
    7ca0:	4770      	bx	lr
    7ca2:	bf00      	nop

00007ca4 <CC_PalMutexCreate>:
    7ca4:	b508      	push	{r3, lr}
    7ca6:	4b03      	ldr	r3, [pc, #12]	; (7cb4 <CC_PalMutexCreate+0x10>)
    7ca8:	6802      	ldr	r2, [r0, #0]
    7caa:	681b      	ldr	r3, [r3, #0]
    7cac:	6810      	ldr	r0, [r2, #0]
    7cae:	4798      	blx	r3
    7cb0:	2000      	movs	r0, #0
    7cb2:	bd08      	pop	{r3, pc}
    7cb4:	2000051c 	.word	0x2000051c

00007cb8 <CC_PalMutexDestroy>:
    7cb8:	b508      	push	{r3, lr}
    7cba:	4b03      	ldr	r3, [pc, #12]	; (7cc8 <CC_PalMutexDestroy+0x10>)
    7cbc:	6802      	ldr	r2, [r0, #0]
    7cbe:	685b      	ldr	r3, [r3, #4]
    7cc0:	6810      	ldr	r0, [r2, #0]
    7cc2:	4798      	blx	r3
    7cc4:	2000      	movs	r0, #0
    7cc6:	bd08      	pop	{r3, pc}
    7cc8:	2000051c 	.word	0x2000051c

00007ccc <CC_PalPowerSaveModeInit>:
    7ccc:	b570      	push	{r4, r5, r6, lr}
    7cce:	4c09      	ldr	r4, [pc, #36]	; (7cf4 <CC_PalPowerSaveModeInit+0x28>)
    7cd0:	4d09      	ldr	r5, [pc, #36]	; (7cf8 <CC_PalPowerSaveModeInit+0x2c>)
    7cd2:	6920      	ldr	r0, [r4, #16]
    7cd4:	68ab      	ldr	r3, [r5, #8]
    7cd6:	4798      	blx	r3
    7cd8:	b118      	cbz	r0, 7ce2 <CC_PalPowerSaveModeInit+0x16>
    7cda:	4b08      	ldr	r3, [pc, #32]	; (7cfc <CC_PalPowerSaveModeInit+0x30>)
    7cdc:	4808      	ldr	r0, [pc, #32]	; (7d00 <CC_PalPowerSaveModeInit+0x34>)
    7cde:	685b      	ldr	r3, [r3, #4]
    7ce0:	4798      	blx	r3
    7ce2:	4a08      	ldr	r2, [pc, #32]	; (7d04 <CC_PalPowerSaveModeInit+0x38>)
    7ce4:	68eb      	ldr	r3, [r5, #12]
    7ce6:	6920      	ldr	r0, [r4, #16]
    7ce8:	2100      	movs	r1, #0
    7cea:	6011      	str	r1, [r2, #0]
    7cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7cf0:	4718      	bx	r3
    7cf2:	bf00      	nop
    7cf4:	2000052c 	.word	0x2000052c
    7cf8:	2000051c 	.word	0x2000051c
    7cfc:	2000050c 	.word	0x2000050c
    7d00:	0000a7d8 	.word	0x0000a7d8
    7d04:	20000ee4 	.word	0x20000ee4

00007d08 <CC_PalPowerSaveModeSelect>:
    7d08:	b570      	push	{r4, r5, r6, lr}
    7d0a:	4d1b      	ldr	r5, [pc, #108]	; (7d78 <CC_PalPowerSaveModeSelect+0x70>)
    7d0c:	4e1b      	ldr	r6, [pc, #108]	; (7d7c <CC_PalPowerSaveModeSelect+0x74>)
    7d0e:	4604      	mov	r4, r0
    7d10:	68b2      	ldr	r2, [r6, #8]
    7d12:	6928      	ldr	r0, [r5, #16]
    7d14:	4790      	blx	r2
    7d16:	b9f8      	cbnz	r0, 7d58 <CC_PalPowerSaveModeSelect+0x50>
    7d18:	b15c      	cbz	r4, 7d32 <CC_PalPowerSaveModeSelect+0x2a>
    7d1a:	4c19      	ldr	r4, [pc, #100]	; (7d80 <CC_PalPowerSaveModeSelect+0x78>)
    7d1c:	6823      	ldr	r3, [r4, #0]
    7d1e:	b1b3      	cbz	r3, 7d4e <CC_PalPowerSaveModeSelect+0x46>
    7d20:	2b01      	cmp	r3, #1
    7d22:	d01b      	beq.n	7d5c <CC_PalPowerSaveModeSelect+0x54>
    7d24:	3b01      	subs	r3, #1
    7d26:	6023      	str	r3, [r4, #0]
    7d28:	6928      	ldr	r0, [r5, #16]
    7d2a:	68f3      	ldr	r3, [r6, #12]
    7d2c:	4798      	blx	r3
    7d2e:	2000      	movs	r0, #0
    7d30:	bd70      	pop	{r4, r5, r6, pc}
    7d32:	4c13      	ldr	r4, [pc, #76]	; (7d80 <CC_PalPowerSaveModeSelect+0x78>)
    7d34:	6821      	ldr	r1, [r4, #0]
    7d36:	b941      	cbnz	r1, 7d4a <CC_PalPowerSaveModeSelect+0x42>
    7d38:	4b12      	ldr	r3, [pc, #72]	; (7d84 <CC_PalPowerSaveModeSelect+0x7c>)
    7d3a:	2201      	movs	r2, #1
    7d3c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7d40:	4a11      	ldr	r2, [pc, #68]	; (7d88 <CC_PalPowerSaveModeSelect+0x80>)
    7d42:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    7d46:	2b00      	cmp	r3, #0
    7d48:	d1fb      	bne.n	7d42 <CC_PalPowerSaveModeSelect+0x3a>
    7d4a:	3101      	adds	r1, #1
    7d4c:	6021      	str	r1, [r4, #0]
    7d4e:	68f3      	ldr	r3, [r6, #12]
    7d50:	6928      	ldr	r0, [r5, #16]
    7d52:	4798      	blx	r3
    7d54:	2000      	movs	r0, #0
    7d56:	bd70      	pop	{r4, r5, r6, pc}
    7d58:	480c      	ldr	r0, [pc, #48]	; (7d8c <CC_PalPowerSaveModeSelect+0x84>)
    7d5a:	bd70      	pop	{r4, r5, r6, pc}
    7d5c:	4a0a      	ldr	r2, [pc, #40]	; (7d88 <CC_PalPowerSaveModeSelect+0x80>)
    7d5e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    7d62:	2b00      	cmp	r3, #0
    7d64:	d1fb      	bne.n	7d5e <CC_PalPowerSaveModeSelect+0x56>
    7d66:	4a07      	ldr	r2, [pc, #28]	; (7d84 <CC_PalPowerSaveModeSelect+0x7c>)
    7d68:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7d6c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7d70:	f7ff ff46 	bl	7c00 <CC_HalMaskInterrupt>
    7d74:	6823      	ldr	r3, [r4, #0]
    7d76:	e7d5      	b.n	7d24 <CC_PalPowerSaveModeSelect+0x1c>
    7d78:	2000052c 	.word	0x2000052c
    7d7c:	2000051c 	.word	0x2000051c
    7d80:	20000ee4 	.word	0x20000ee4
    7d84:	5002a000 	.word	0x5002a000
    7d88:	5002b000 	.word	0x5002b000
    7d8c:	ffff8fe9 	.word	0xffff8fe9

00007d90 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7d90:	4770      	bx	lr

00007d92 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
    7d92:	b510      	push	{r4, lr}
    7d94:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    7d96:	6800      	ldr	r0, [r0, #0]
	if (__p)
    7d98:	b108      	cbz	r0, 7d9e <_ZNSt6vectorIPvSaIS0_EED1Ev+0xc>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
    7d9a:	f000 ff7b 	bl	8c94 <_ZdlPv>
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
    7d9e:	4620      	mov	r0, r4
    7da0:	bd10      	pop	{r4, pc}

00007da2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
    7da2:	b510      	push	{r4, lr}
    7da4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
    7da6:	6800      	ldr	r0, [r0, #0]
	if (__p)
    7da8:	b108      	cbz	r0, 7dae <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev+0xc>
    7daa:	f000 ff73 	bl	8c94 <_ZdlPv>
      }
    7dae:	4620      	mov	r0, r4
    7db0:	bd10      	pop	{r4, pc}

00007db2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7db2:	b160      	cbz	r0, 7dce <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7db4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7db6:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7dba:	2b01      	cmp	r3, #1
    7dbc:	d003      	beq.n	7dc6 <sys_notify_validate+0x14>
    7dbe:	2b03      	cmp	r3, #3
    7dc0:	d105      	bne.n	7dce <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    7dc2:	6803      	ldr	r3, [r0, #0]
    7dc4:	b11b      	cbz	r3, 7dce <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    7dc6:	2300      	movs	r3, #0
    7dc8:	6083      	str	r3, [r0, #8]
    7dca:	4618      	mov	r0, r3
    7dcc:	4770      	bx	lr
		return -EINVAL;
    7dce:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7dd2:	4770      	bx	lr

00007dd4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7dd4:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7dd6:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    7dd8:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    7ddc:	2b03      	cmp	r3, #3
    7dde:	f04f 0200 	mov.w	r2, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7de2:	bf0c      	ite	eq
    7de4:	6803      	ldreq	r3, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    7de6:	4613      	movne	r3, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7de8:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7dea:	4618      	mov	r0, r3
    7dec:	4770      	bx	lr

00007dee <arch_printk_char_out>:
}
    7dee:	2000      	movs	r0, #0
    7df0:	4770      	bx	lr

00007df2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    7df2:	b40f      	push	{r0, r1, r2, r3}
    7df4:	b507      	push	{r0, r1, r2, lr}
    7df6:	a904      	add	r1, sp, #16
    7df8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7dfc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    7dfe:	f7fa fcb3 	bl	2768 <vprintk>

	va_end(ap);
}
    7e02:	b003      	add	sp, #12
    7e04:	f85d eb04 	ldr.w	lr, [sp], #4
    7e08:	b004      	add	sp, #16
    7e0a:	4770      	bx	lr

00007e0c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7e0c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    7e0e:	f013 0307 	ands.w	r3, r3, #7
    7e12:	d105      	bne.n	7e20 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7e14:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    7e16:	2b00      	cmp	r3, #0
    7e18:	bf0c      	ite	eq
    7e1a:	2000      	moveq	r0, #0
    7e1c:	2003      	movne	r0, #3
    7e1e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7e20:	2b02      	cmp	r3, #2
    7e22:	d105      	bne.n	7e30 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7e24:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
    7e26:	2b00      	cmp	r3, #0
    7e28:	bf14      	ite	ne
    7e2a:	2000      	movne	r0, #0
    7e2c:	2004      	moveq	r0, #4
    7e2e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7e30:	2b01      	cmp	r3, #1
    7e32:	d105      	bne.n	7e40 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7e34:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    7e36:	2b00      	cmp	r3, #0
    7e38:	bf0c      	ite	eq
    7e3a:	2000      	moveq	r0, #0
    7e3c:	2005      	movne	r0, #5
    7e3e:	4770      	bx	lr
	int evt = EVT_NOP;
    7e40:	2000      	movs	r0, #0
}
    7e42:	4770      	bx	lr

00007e44 <notify_one>:
{
    7e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7e46:	460d      	mov	r5, r1
    7e48:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7e4a:	4619      	mov	r1, r3
    7e4c:	1d28      	adds	r0, r5, #4
{
    7e4e:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7e50:	9300      	str	r3, [sp, #0]
    7e52:	f7ff ffbf 	bl	7dd4 <sys_notify_finalize>
	if (cb) {
    7e56:	4604      	mov	r4, r0
    7e58:	b140      	cbz	r0, 7e6c <notify_one+0x28>
		cb(mgr, cli, state, res);
    7e5a:	e9dd 3200 	ldrd	r3, r2, [sp]
    7e5e:	4629      	mov	r1, r5
    7e60:	4630      	mov	r0, r6
    7e62:	46a4      	mov	ip, r4
}
    7e64:	b002      	add	sp, #8
    7e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    7e6a:	4760      	bx	ip
}
    7e6c:	b002      	add	sp, #8
    7e6e:	bd70      	pop	{r4, r5, r6, pc}

00007e70 <transition_complete>:
{
    7e70:	b410      	push	{r4}
	__asm__ volatile(
    7e72:	f04f 0420 	mov.w	r4, #32
    7e76:	f3ef 8211 	mrs	r2, BASEPRI
    7e7a:	f384 8812 	msr	BASEPRI_MAX, r4
    7e7e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7e82:	6181      	str	r1, [r0, #24]
}
    7e84:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    7e88:	2101      	movs	r1, #1
    7e8a:	f7fa bc7b 	b.w	2784 <process_event>

00007e8e <validate_args>:
{
    7e8e:	b510      	push	{r4, lr}
    7e90:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7e92:	b140      	cbz	r0, 7ea6 <validate_args+0x18>
    7e94:	b139      	cbz	r1, 7ea6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    7e96:	1d08      	adds	r0, r1, #4
    7e98:	f7ff ff8b 	bl	7db2 <sys_notify_validate>
	if ((rv == 0)
    7e9c:	b928      	cbnz	r0, 7eaa <validate_args+0x1c>
	    && ((cli->notify.flags
    7e9e:	68a3      	ldr	r3, [r4, #8]
    7ea0:	f033 0303 	bics.w	r3, r3, #3
    7ea4:	d001      	beq.n	7eaa <validate_args+0x1c>
		rv = -EINVAL;
    7ea6:	f06f 0015 	mvn.w	r0, #21
}
    7eaa:	bd10      	pop	{r4, pc}

00007eac <onoff_manager_init>:
{
    7eac:	b538      	push	{r3, r4, r5, lr}
    7eae:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7eb0:	4605      	mov	r5, r0
    7eb2:	b158      	cbz	r0, 7ecc <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7eb4:	b151      	cbz	r1, 7ecc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7eb6:	680b      	ldr	r3, [r1, #0]
    7eb8:	b143      	cbz	r3, 7ecc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7eba:	684b      	ldr	r3, [r1, #4]
    7ebc:	b133      	cbz	r3, 7ecc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7ebe:	2220      	movs	r2, #32
    7ec0:	2100      	movs	r1, #0
    7ec2:	f000 fefe 	bl	8cc2 <memset>
    7ec6:	612c      	str	r4, [r5, #16]
	return 0;
    7ec8:	2000      	movs	r0, #0
}
    7eca:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7ecc:	f06f 0015 	mvn.w	r0, #21
    7ed0:	e7fb      	b.n	7eca <onoff_manager_init+0x1e>

00007ed2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7ed2:	b570      	push	{r4, r5, r6, lr}
    7ed4:	4604      	mov	r4, r0
    7ed6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7ed8:	f7ff ffd9 	bl	7e8e <validate_args>

	if (rv < 0) {
    7edc:	1e05      	subs	r5, r0, #0
    7ede:	db31      	blt.n	7f44 <onoff_request+0x72>
    7ee0:	f04f 0320 	mov.w	r3, #32
    7ee4:	f3ef 8111 	mrs	r1, BASEPRI
    7ee8:	f383 8812 	msr	BASEPRI_MAX, r3
    7eec:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7ef0:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7ef2:	8ba0      	ldrh	r0, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    7ef4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7ef8:	42ab      	cmp	r3, r5
    7efa:	f000 0207 	and.w	r2, r0, #7
    7efe:	d02e      	beq.n	7f5e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    7f00:	2a02      	cmp	r2, #2
    7f02:	d10e      	bne.n	7f22 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    7f04:	3301      	adds	r3, #1
    7f06:	83e3      	strh	r3, [r4, #30]
	rv = state;
    7f08:	4615      	mov	r5, r2
		notify = true;
    7f0a:	2301      	movs	r3, #1
	__asm__ volatile(
    7f0c:	f381 8811 	msr	BASEPRI, r1
    7f10:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    7f14:	b1b3      	cbz	r3, 7f44 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    7f16:	2300      	movs	r3, #0
    7f18:	4631      	mov	r1, r6
    7f1a:	4620      	mov	r0, r4
    7f1c:	f7ff ff92 	bl	7e44 <notify_one>
    7f20:	e010      	b.n	7f44 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    7f22:	0783      	lsls	r3, r0, #30
    7f24:	d001      	beq.n	7f2a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    7f26:	2a06      	cmp	r2, #6
    7f28:	d10e      	bne.n	7f48 <onoff_request+0x76>
	parent->next = child;
    7f2a:	2300      	movs	r3, #0
    7f2c:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    7f2e:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    7f30:	b993      	cbnz	r3, 7f58 <onoff_request+0x86>
	list->head = node;
    7f32:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    7f36:	4615      	mov	r5, r2
    7f38:	b962      	cbnz	r2, 7f54 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    7f3a:	460a      	mov	r2, r1
    7f3c:	4620      	mov	r0, r4
    7f3e:	2102      	movs	r1, #2
    7f40:	f7fa fc20 	bl	2784 <process_event>
		}
	}

	return rv;
}
    7f44:	4628      	mov	r0, r5
    7f46:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    7f48:	2a05      	cmp	r2, #5
    7f4a:	bf0c      	ite	eq
    7f4c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    7f50:	f06f 0504 	mvnne.w	r5, #4
    7f54:	2300      	movs	r3, #0
    7f56:	e7d9      	b.n	7f0c <onoff_request+0x3a>
	parent->next = child;
    7f58:	601e      	str	r6, [r3, #0]
	list->tail = node;
    7f5a:	6066      	str	r6, [r4, #4]
}
    7f5c:	e7eb      	b.n	7f36 <onoff_request+0x64>
		rv = -EAGAIN;
    7f5e:	f06f 050a 	mvn.w	r5, #10
    7f62:	e7f7      	b.n	7f54 <onoff_request+0x82>

00007f64 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7f64:	4604      	mov	r4, r0
    7f66:	b508      	push	{r3, lr}
    7f68:	4608      	mov	r0, r1
    7f6a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7f6c:	461a      	mov	r2, r3
    7f6e:	47a0      	blx	r4
	return z_impl_z_current_get();
    7f70:	f7fd fec2 	bl	5cf8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7f74:	f7fb faee 	bl	3554 <z_impl_k_thread_abort>

00007f78 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    7f78:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    7f7c:	8848      	ldrh	r0, [r1, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    7f7e:	0840      	lsrs	r0, r0, #1
    7f80:	4770      	bx	lr

00007f82 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    7f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f84:	460c      	mov	r4, r1
    7f86:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    7f88:	f7ff fff6 	bl	7f78 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    7f8c:	fab0 f080 	clz	r0, r0
    7f90:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    7f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    7f98:	00e2      	lsls	r2, r4, #3
    7f9a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    7f9e:	1d17      	adds	r7, r2, #4
    7fa0:	b2a5      	uxth	r5, r4
    7fa2:	3206      	adds	r2, #6
    7fa4:	b956      	cbnz	r6, 7fbc <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    7fa6:	2101      	movs	r1, #1
    7fa8:	fa01 f000 	lsl.w	r0, r1, r0
    7fac:	68d9      	ldr	r1, [r3, #12]
    7fae:	4301      	orrs	r1, r0
    7fb0:	60d9      	str	r1, [r3, #12]
		b->next = c;
    7fb2:	f8cc 4010 	str.w	r4, [ip, #16]
    7fb6:	53dd      	strh	r5, [r3, r7]
    7fb8:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    7fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    7fbc:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    7fbe:	3104      	adds	r1, #4
    7fc0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    7fc2:	53d8      	strh	r0, [r3, r7]
    7fc4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7fc8:	529e      	strh	r6, [r3, r2]
    7fca:	80c5      	strh	r5, [r0, #6]
    7fcc:	525d      	strh	r5, [r3, r1]
    7fce:	e7f4      	b.n	7fba <free_list_add+0x38>

00007fd0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    7fd0:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    7fd2:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    7fd4:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    7fd6:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    7fda:	f021 0107 	bic.w	r1, r1, #7
{
    7fde:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    7fe0:	1acd      	subs	r5, r1, r3
    7fe2:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    7fe4:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    7fe6:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    7fea:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    7fee:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    7ff0:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    7ff2:	2600      	movs	r6, #0
    7ff4:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    7ff6:	f1c0 0020 	rsb	r0, r0, #32
    7ffa:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    7ffe:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    8000:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    8002:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8006:	4284      	cmp	r4, r0
    8008:	d118      	bne.n	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    800a:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    800c:	f040 0001 	orr.w	r0, r0, #1
    8010:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    8012:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    8016:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8018:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    801a:	801e      	strh	r6, [r3, #0]
    801c:	8067      	strh	r7, [r4, #2]
    801e:	195c      	adds	r4, r3, r5
    8020:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    8024:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    8028:	8066      	strh	r6, [r4, #2]
    802a:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    802c:	8850      	ldrh	r0, [r2, #2]
    802e:	f040 0001 	orr.w	r0, r0, #1
    8032:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    8034:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    8036:	4618      	mov	r0, r3
    8038:	f7ff bfa3 	b.w	7f82 <free_list_add>
		h->buckets[i].next = 0;
    803c:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    8040:	e7e1      	b.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>

00008042 <_ldiv5>:
	uint32_t v_lo = *v;
    8042:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    8046:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    8048:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    804c:	fba2 2403 	umull	r2, r4, r2, r3
    8050:	18d5      	adds	r5, r2, r3
    8052:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    8056:	fba1 1303 	umull	r1, r3, r1, r3
    805a:	1852      	adds	r2, r2, r1
    805c:	eb44 0403 	adc.w	r4, r4, r3
    8060:	1952      	adds	r2, r2, r5
    8062:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    8066:	1889      	adds	r1, r1, r2
    8068:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    806c:	e9c0 1300 	strd	r1, r3, [r0]
}
    8070:	bd30      	pop	{r4, r5, pc}

00008072 <_get_digit>:
	if (*digit_count > 0) {
    8072:	680b      	ldr	r3, [r1, #0]
    8074:	2b00      	cmp	r3, #0
{
    8076:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    8078:	dd10      	ble.n	809c <_get_digit+0x2a>
		--*digit_count;
    807a:	3b01      	subs	r3, #1
    807c:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    807e:	6803      	ldr	r3, [r0, #0]
    8080:	6844      	ldr	r4, [r0, #4]
    8082:	220a      	movs	r2, #10
    8084:	fba3 1302 	umull	r1, r3, r3, r2
    8088:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
    808c:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
    808e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    8092:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    8096:	3230      	adds	r2, #48	; 0x30
}
    8098:	4610      	mov	r0, r2
    809a:	bd10      	pop	{r4, pc}
		rval = '0';
    809c:	2230      	movs	r2, #48	; 0x30
    809e:	e7fb      	b.n	8098 <_get_digit+0x26>

000080a0 <outs>:
{
    80a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    80a4:	4680      	mov	r8, r0
    80a6:	4689      	mov	r9, r1
    80a8:	4616      	mov	r6, r2
    80aa:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    80ac:	4615      	mov	r5, r2
    80ae:	42bd      	cmp	r5, r7
    80b0:	eba5 0406 	sub.w	r4, r5, r6
    80b4:	d305      	bcc.n	80c2 <outs+0x22>
    80b6:	b10f      	cbz	r7, 80bc <outs+0x1c>
	return (int)count;
    80b8:	4620      	mov	r0, r4
    80ba:	e008      	b.n	80ce <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    80bc:	782b      	ldrb	r3, [r5, #0]
    80be:	2b00      	cmp	r3, #0
    80c0:	d0fa      	beq.n	80b8 <outs+0x18>
		int rc = out((int)*sp++, ctx);
    80c2:	f815 0b01 	ldrb.w	r0, [r5], #1
    80c6:	4649      	mov	r1, r9
    80c8:	47c0      	blx	r8
		if (rc < 0) {
    80ca:	2800      	cmp	r0, #0
    80cc:	daef      	bge.n	80ae <outs+0xe>
}
    80ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000080d2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    80d2:	4770      	bx	lr

000080d4 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    80d4:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
    80d6:	f7fa fcbd 	bl	2a54 <__do_global_ctors_aux>
	__do_init_array_aux();
}
    80da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
    80de:	f7fa bcab 	b.w	2a38 <__do_init_array_aux>

000080e2 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
    80e2:	2000      	movs	r0, #0
    80e4:	4770      	bx	lr

000080e6 <abort_function>:
{
    80e6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    80e8:	2000      	movs	r0, #0
    80ea:	f7fa fc91 	bl	2a10 <sys_reboot>

000080ee <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    80ee:	f000 bc5c 	b.w	89aa <z_fatal_error>

000080f2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    80f2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    80f4:	6800      	ldr	r0, [r0, #0]
    80f6:	f000 bc58 	b.w	89aa <z_fatal_error>

000080fa <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    80fa:	2100      	movs	r1, #0
    80fc:	2001      	movs	r0, #1
    80fe:	f7ff bff6 	b.w	80ee <z_arm_fatal_error>

00008102 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    8102:	b508      	push	{r3, lr}
	handler();
    8104:	f7fa ff30 	bl	2f68 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    810c:	f7fb b89a 	b.w	3244 <z_arm_exc_exit>

00008110 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
    8110:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
    8112:	4601      	mov	r1, r0
    8114:	4618      	mov	r0, r3
    8116:	f7ff bfe4 	b.w	80e2 <__cxa_atexit>

0000811a <malloc_prepare>:
}
    811a:	2000      	movs	r0, #0
    811c:	4770      	bx	lr

0000811e <_stdout_hook_default>:
}
    811e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8122:	4770      	bx	lr

00008124 <_stdin_hook_default>:
}
    8124:	2000      	movs	r0, #0
    8126:	4770      	bx	lr

00008128 <_read>:
{
    8128:	4608      	mov	r0, r1
    812a:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
    812c:	f7fb bafa 	b.w	3724 <z_impl_zephyr_read_stdin>

00008130 <_write>:
{
    8130:	4608      	mov	r0, r1
    8132:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
    8134:	f7fb bb0a 	b.w	374c <z_impl_zephyr_write_stdout>

00008138 <_close>:
    8138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    813c:	4770      	bx	lr

0000813e <_lseek>:
}
    813e:	2000      	movs	r0, #0
    8140:	4770      	bx	lr

00008142 <_isatty>:
}
    8142:	2802      	cmp	r0, #2
    8144:	bfcc      	ite	gt
    8146:	2000      	movgt	r0, #0
    8148:	2001      	movle	r0, #1
    814a:	4770      	bx	lr

0000814c <_kill>:
}
    814c:	2000      	movs	r0, #0
    814e:	4770      	bx	lr

00008150 <_getpid>:
}
    8150:	2000      	movs	r0, #0
    8152:	4770      	bx	lr

00008154 <_fstat>:
	st->st_mode = S_IFCHR;
    8154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8158:	604b      	str	r3, [r1, #4]
}
    815a:	2000      	movs	r0, #0
    815c:	4770      	bx	lr

0000815e <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    815e:	b510      	push	{r4, lr}
    8160:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    8162:	2014      	movs	r0, #20
    8164:	f7fd ffbe 	bl	60e4 <malloc>
    8168:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
    816a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
    816e:	f000 bc96 	b.w	8a9e <z_impl_k_mutex_init>

00008172 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    8172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    817a:	f7fd b9c9 	b.w	5510 <z_impl_k_mutex_lock>

0000817e <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    817e:	f7fd ba3f 	b.w	5600 <z_impl_k_mutex_unlock>

00008182 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    8182:	2806      	cmp	r0, #6
    8184:	d108      	bne.n	8198 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    818a:	2201      	movs	r2, #1
    818c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8190:	f3bf 8f4f 	dsb	sy
        __WFE();
    8194:	bf20      	wfe
    while (true)
    8196:	e7fd      	b.n	8194 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    8198:	4770      	bx	lr

0000819a <pm_state_exit_post_ops>:
    819a:	2300      	movs	r3, #0
    819c:	f383 8811 	msr	BASEPRI, r3
    81a0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    81a4:	4770      	bx	lr

000081a6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    81a6:	6903      	ldr	r3, [r0, #16]
    81a8:	b2c9      	uxtb	r1, r1
    81aa:	220c      	movs	r2, #12
    81ac:	fb01 3302 	mla	r3, r1, r2, r3
    81b0:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    81b2:	f000 0007 	and.w	r0, r0, #7
    81b6:	4770      	bx	lr

000081b8 <set_on_state>:
	__asm__ volatile(
    81b8:	f04f 0320 	mov.w	r3, #32
    81bc:	f3ef 8211 	mrs	r2, BASEPRI
    81c0:	f383 8812 	msr	BASEPRI_MAX, r3
    81c4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    81c8:	6803      	ldr	r3, [r0, #0]
    81ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    81ce:	f043 0302 	orr.w	r3, r3, #2
    81d2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    81d4:	f382 8811 	msr	BASEPRI, r2
    81d8:	f3bf 8f6f 	isb	sy
}
    81dc:	4770      	bx	lr

000081de <stop>:
{
    81de:	4603      	mov	r3, r0
    81e0:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    81e2:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    81e4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    81e6:	f04f 0420 	mov.w	r4, #32
    81ea:	f3ef 8611 	mrs	r6, BASEPRI
    81ee:	f384 8812 	msr	BASEPRI_MAX, r4
    81f2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    81f6:	250c      	movs	r5, #12
    81f8:	fb05 0401 	mla	r4, r5, r1, r0
    81fc:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    81fe:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    8202:	d001      	beq.n	8208 <stop+0x2a>
    8204:	42a2      	cmp	r2, r4
    8206:	d110      	bne.n	822a <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    8208:	fb05 0001 	mla	r0, r5, r1, r0
    820c:	2201      	movs	r2, #1
    820e:	6482      	str	r2, [r0, #72]	; 0x48
	int err = 0;
    8210:	2000      	movs	r0, #0
	__asm__ volatile(
    8212:	f386 8811 	msr	BASEPRI, r6
    8216:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    821a:	b928      	cbnz	r0, 8228 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    821c:	685b      	ldr	r3, [r3, #4]
    821e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    8222:	684b      	ldr	r3, [r1, #4]
    8224:	4798      	blx	r3
	return 0;
    8226:	2000      	movs	r0, #0
}
    8228:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    822a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    822e:	e7f0      	b.n	8212 <stop+0x34>

00008230 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8230:	2280      	movs	r2, #128	; 0x80
    8232:	f7ff bfd4 	b.w	81de <stop>

00008236 <async_start>:
{
    8236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8238:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    823a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    823c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    823e:	f04f 0520 	mov.w	r5, #32
    8242:	f3ef 8c11 	mrs	ip, BASEPRI
    8246:	f385 8812 	msr	BASEPRI_MAX, r5
    824a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    824e:	260c      	movs	r6, #12
    8250:	fb06 4601 	mla	r6, r6, r1, r4
    8254:	6cb5      	ldr	r5, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8256:	f005 0e07 	and.w	lr, r5, #7
    825a:	f1be 0f01 	cmp.w	lr, #1
    825e:	d111      	bne.n	8284 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8260:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    8262:	2500      	movs	r5, #0
	__asm__ volatile(
    8264:	f38c 8811 	msr	BASEPRI, ip
    8268:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    826c:	b945      	cbnz	r5, 8280 <async_start+0x4a>
	subdata->cb = cb;
    826e:	260c      	movs	r6, #12
    8270:	fb06 4401 	mla	r4, r6, r1, r4
	subdata->user_data = user_data;
    8274:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8278:	6843      	ldr	r3, [r0, #4]
    827a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    827e:	4798      	blx	r3
}
    8280:	4628      	mov	r0, r5
    8282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8284:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
    8288:	42af      	cmp	r7, r5
    828a:	bf14      	ite	ne
    828c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    8290:	f06f 0577 	mvneq.w	r5, #119	; 0x77
    8294:	e7e6      	b.n	8264 <async_start+0x2e>

00008296 <api_start>:
{
    8296:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8298:	2480      	movs	r4, #128	; 0x80
    829a:	9400      	str	r4, [sp, #0]
    829c:	f7ff ffcb 	bl	8236 <async_start>
}
    82a0:	b002      	add	sp, #8
    82a2:	bd10      	pop	{r4, pc}

000082a4 <onoff_started_callback>:
	return &data->mgr[type];
    82a4:	6900      	ldr	r0, [r0, #16]
    82a6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    82a8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    82ac:	2100      	movs	r1, #0
    82ae:	4710      	bx	r2

000082b0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    82b0:	2000      	movs	r0, #0
    82b2:	f000 bad3 	b.w	885c <nrfx_clock_start>

000082b6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    82b6:	2000      	movs	r0, #0
    82b8:	f000 bb0d 	b.w	88d6 <nrfx_clock_stop>

000082bc <blocking_start_callback>:
{
    82bc:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    82be:	f7fd b9e1 	b.w	5684 <z_impl_k_sem_give>

000082c2 <uart_poll_out>:
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    82c2:	6883      	ldr	r3, [r0, #8]
    82c4:	685b      	ldr	r3, [r3, #4]
    82c6:	4718      	bx	r3

000082c8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82c8:	6843      	ldr	r3, [r0, #4]
    82ca:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    82cc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    82d0:	600b      	str	r3, [r1, #0]
}
    82d2:	2000      	movs	r0, #0
    82d4:	4770      	bx	lr

000082d6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82d6:	6843      	ldr	r3, [r0, #4]
    82d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    82da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    82de:	4042      	eors	r2, r0
    82e0:	400a      	ands	r2, r1
    82e2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    82e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    82e8:	2000      	movs	r0, #0
    82ea:	4770      	bx	lr

000082ec <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82ec:	6843      	ldr	r3, [r0, #4]
    82ee:	685b      	ldr	r3, [r3, #4]
}
    82f0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    82f2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    82f6:	4770      	bx	lr

000082f8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82f8:	6843      	ldr	r3, [r0, #4]
    82fa:	685b      	ldr	r3, [r3, #4]
}
    82fc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    82fe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    8302:	4770      	bx	lr

00008304 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8304:	6843      	ldr	r3, [r0, #4]
    8306:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8308:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    830c:	4059      	eors	r1, r3
    p_reg->OUT = value;
    830e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
    8312:	2000      	movs	r0, #0
    8314:	4770      	bx	lr

00008316 <gpio_nrfx_manage_callback>:
	return port->data;
    8316:	6903      	ldr	r3, [r0, #16]
	return list->head;
    8318:	6858      	ldr	r0, [r3, #4]
{
    831a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    831c:	b158      	cbz	r0, 8336 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    831e:	2400      	movs	r4, #0
    8320:	4281      	cmp	r1, r0
    8322:	d112      	bne.n	834a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    8324:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    8326:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    8328:	b954      	cbnz	r4, 8340 <gpio_nrfx_manage_callback+0x2a>
    832a:	428d      	cmp	r5, r1
	list->head = node;
    832c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    832e:	d100      	bne.n	8332 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    8330:	6098      	str	r0, [r3, #8]
	parent->next = child;
    8332:	2000      	movs	r0, #0
    8334:	6008      	str	r0, [r1, #0]
	if (set) {
    8336:	b96a      	cbnz	r2, 8354 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    8338:	2000      	movs	r0, #0
}
    833a:	bd30      	pop	{r4, r5, pc}
    833c:	4628      	mov	r0, r5
    833e:	e7ef      	b.n	8320 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    8340:	428d      	cmp	r5, r1
	parent->next = child;
    8342:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8344:	bf08      	it	eq
    8346:	609c      	streq	r4, [r3, #8]
}
    8348:	e7f3      	b.n	8332 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    834a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    834c:	4604      	mov	r4, r0
    834e:	2d00      	cmp	r5, #0
    8350:	d1f4      	bne.n	833c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    8352:	b13a      	cbz	r2, 8364 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    8354:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    8356:	685a      	ldr	r2, [r3, #4]
    8358:	600a      	str	r2, [r1, #0]
	list->head = node;
    835a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    835c:	2800      	cmp	r0, #0
    835e:	d1eb      	bne.n	8338 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    8360:	6099      	str	r1, [r3, #8]
}
    8362:	e7ea      	b.n	833a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    8364:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    8368:	e7e7      	b.n	833a <gpio_nrfx_manage_callback+0x24>

0000836a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    836a:	6902      	ldr	r2, [r0, #16]
{
    836c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    836e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8372:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8376:	2000      	movs	r0, #0
    8378:	4770      	bx	lr

0000837a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    837a:	6843      	ldr	r3, [r0, #4]
    837c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    837e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8382:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8386:	4770      	bx	lr

00008388 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8388:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    838a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    838c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    838e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8392:	b148      	cbz	r0, 83a8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    8394:	7d52      	ldrb	r2, [r2, #21]
    8396:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8398:	2000      	movs	r0, #0
    839a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    839e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    83a2:	2201      	movs	r2, #1
    83a4:	601a      	str	r2, [r3, #0]
	return 0;
    83a6:	4770      	bx	lr
		return -1;
    83a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    83ac:	4770      	bx	lr

000083ae <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    83ae:	2a00      	cmp	r2, #0
    83b0:	dd0f      	ble.n	83d2 <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
    83b2:	6843      	ldr	r3, [r0, #4]
    83b4:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83b6:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    83ba:	b153      	cbz	r3, 83d2 <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = dev->data;
    83bc:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    83be:	2000      	movs	r0, #0
    83c0:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    83c4:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    83c8:	7d5b      	ldrb	r3, [r3, #21]
    83ca:	700b      	strb	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    83cc:	2001      	movs	r0, #1
    83ce:	6010      	str	r0, [r2, #0]
}
    83d0:	4770      	bx	lr
	int num_rx = 0;
    83d2:	2000      	movs	r0, #0
    83d4:	4770      	bx	lr

000083d6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    83d6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    83d8:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    83da:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    83dc:	f04f 0020 	mov.w	r0, #32
    83e0:	f3ef 8311 	mrs	r3, BASEPRI
    83e4:	f380 8812 	msr	BASEPRI_MAX, r0
    83e8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    83ec:	68c9      	ldr	r1, [r1, #12]
    83ee:	2000      	movs	r0, #0
    83f0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    83f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    83f6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    83fa:	f383 8811 	msr	BASEPRI, r3
    83fe:	f3bf 8f6f 	isb	sy
}
    8402:	4770      	bx	lr

00008404 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    8404:	6903      	ldr	r3, [r0, #16]
    8406:	68db      	ldr	r3, [r3, #12]
    8408:	2201      	movs	r2, #1
    840a:	739a      	strb	r2, [r3, #14]
}
    840c:	4770      	bx	lr

0000840e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    840e:	6903      	ldr	r3, [r0, #16]
    8410:	68db      	ldr	r3, [r3, #12]
    8412:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8414:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    8418:	b962      	cbnz	r2, 8434 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    841a:	6842      	ldr	r2, [r0, #4]
    841c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    841e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    8422:	b140      	cbz	r0, 8436 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    8424:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    8428:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    842c:	d003      	beq.n	8436 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    842e:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8430:	2001      	movs	r0, #1
    8432:	4770      	bx	lr
    8434:	2000      	movs	r0, #0
}
    8436:	4770      	bx	lr

00008438 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    8438:	6843      	ldr	r3, [r0, #4]
    843a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    843c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    8440:	3800      	subs	r0, #0
    8442:	bf18      	it	ne
    8444:	2001      	movne	r0, #1
    8446:	4770      	bx	lr

00008448 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    8448:	6843      	ldr	r3, [r0, #4]
    844a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    844c:	2210      	movs	r2, #16
    844e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8452:	4770      	bx	lr

00008454 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    8454:	6843      	ldr	r3, [r0, #4]
    8456:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    8458:	2210      	movs	r2, #16
    845a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    845e:	4770      	bx	lr

00008460 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    8460:	6843      	ldr	r3, [r0, #4]
    8462:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    8464:	f44f 7200 	mov.w	r2, #512	; 0x200
    8468:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    846c:	4770      	bx	lr

0000846e <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    846e:	6843      	ldr	r3, [r0, #4]
    8470:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    8472:	f44f 7200 	mov.w	r2, #512	; 0x200
    8476:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    847a:	4770      	bx	lr

0000847c <uarte_nrfx_irq_update>:
}
    847c:	2001      	movs	r0, #1
    847e:	4770      	bx	lr

00008480 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    8480:	6903      	ldr	r3, [r0, #16]
    8482:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    8484:	e9c3 1200 	strd	r1, r2, [r3]
}
    8488:	4770      	bx	lr

0000848a <uarte_nrfx_irq_is_pending>:
{
    848a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    848c:	6843      	ldr	r3, [r0, #4]
    848e:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    8490:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    8494:	025b      	lsls	r3, r3, #9
{
    8496:	4604      	mov	r4, r0
		||
    8498:	d405      	bmi.n	84a6 <uarte_nrfx_irq_is_pending+0x1c>
    849a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    849e:	f010 0010 	ands.w	r0, r0, #16
    84a2:	d106      	bne.n	84b2 <uarte_nrfx_irq_is_pending+0x28>
}
    84a4:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    84a6:	f7ff ffb2 	bl	840e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    84aa:	2800      	cmp	r0, #0
    84ac:	d0f5      	beq.n	849a <uarte_nrfx_irq_is_pending+0x10>
		||
    84ae:	2001      	movs	r0, #1
    84b0:	e7f8      	b.n	84a4 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    84b2:	4620      	mov	r0, r4
    84b4:	f7ff ffc0 	bl	8438 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    84b8:	3800      	subs	r0, #0
    84ba:	bf18      	it	ne
    84bc:	2001      	movne	r0, #1
    84be:	e7f1      	b.n	84a4 <uarte_nrfx_irq_is_pending+0x1a>

000084c0 <tx_start.isra.0>:
	return config->uarte_regs;
    84c0:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    84c2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    84c6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84ca:	2200      	movs	r2, #0
    84cc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    84d0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    84d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    84d8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    84dc:	6842      	ldr	r2, [r0, #4]
    84de:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    84e0:	bf41      	itttt	mi
    84e2:	2208      	movmi	r2, #8
    84e4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    84e8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    84ec:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84f0:	2201      	movs	r2, #1
    84f2:	609a      	str	r2, [r3, #8]
}
    84f4:	4770      	bx	lr

000084f6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    84f6:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    84f8:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    84fc:	b943      	cbnz	r3, 8510 <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    84fe:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8500:	0789      	lsls	r1, r1, #30
    8502:	d407      	bmi.n	8514 <is_tx_ready.isra.0+0x1e>
    8504:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    8508:	3800      	subs	r0, #0
    850a:	bf18      	it	ne
    850c:	2001      	movne	r0, #1
    850e:	4770      	bx	lr
    8510:	2001      	movs	r0, #1
    8512:	4770      	bx	lr
    8514:	4618      	mov	r0, r3
}
    8516:	4770      	bx	lr

00008518 <uarte_nrfx_fifo_fill>:
{
    8518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    851a:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    851c:	68f3      	ldr	r3, [r6, #12]
    851e:	899c      	ldrh	r4, [r3, #12]
    8520:	f3bf 8f5b 	dmb	ish
    8524:	4294      	cmp	r4, r2
    8526:	bfa8      	it	ge
    8528:	4614      	movge	r4, r2
{
    852a:	4605      	mov	r5, r0
    852c:	3310      	adds	r3, #16
    852e:	2201      	movs	r2, #1
    8530:	e853 0f00 	ldrex	r0, [r3]
    8534:	2800      	cmp	r0, #0
    8536:	d103      	bne.n	8540 <uarte_nrfx_fifo_fill+0x28>
    8538:	e843 2700 	strex	r7, r2, [r3]
    853c:	2f00      	cmp	r7, #0
    853e:	d1f7      	bne.n	8530 <uarte_nrfx_fifo_fill+0x18>
    8540:	f3bf 8f5b 	dmb	ish
    8544:	bf0c      	ite	eq
    8546:	4613      	moveq	r3, r2
    8548:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    854a:	d01d      	beq.n	8588 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    854c:	461c      	mov	r4, r3
}
    854e:	4620      	mov	r0, r4
    8550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    8552:	68f2      	ldr	r2, [r6, #12]
    8554:	5cc8      	ldrb	r0, [r1, r3]
    8556:	6892      	ldr	r2, [r2, #8]
    8558:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    855a:	3301      	adds	r3, #1
    855c:	42a3      	cmp	r3, r4
    855e:	dbf8      	blt.n	8552 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    8560:	f04f 0320 	mov.w	r3, #32
    8564:	f3ef 8711 	mrs	r7, BASEPRI
    8568:	f383 8812 	msr	BASEPRI_MAX, r3
    856c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    8570:	6868      	ldr	r0, [r5, #4]
    8572:	f7ff ffc0 	bl	84f6 <is_tx_ready.isra.0>
    8576:	68f3      	ldr	r3, [r6, #12]
    8578:	b940      	cbnz	r0, 858c <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    857a:	6118      	str	r0, [r3, #16]
		len = 0;
    857c:	4604      	mov	r4, r0
	__asm__ volatile(
    857e:	f387 8811 	msr	BASEPRI, r7
    8582:	f3bf 8f6f 	isb	sy
	return len;
    8586:	e7e2      	b.n	854e <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    8588:	2300      	movs	r3, #0
    858a:	e7e7      	b.n	855c <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    858c:	6899      	ldr	r1, [r3, #8]
    858e:	6868      	ldr	r0, [r5, #4]
    8590:	4622      	mov	r2, r4
    8592:	f7ff ff95 	bl	84c0 <tx_start.isra.0>
    8596:	e7f2      	b.n	857e <uarte_nrfx_fifo_fill+0x66>

00008598 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    8598:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    859a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    859c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    85a0:	05c9      	lsls	r1, r1, #23
{
    85a2:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    85a4:	d518      	bpl.n	85d8 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85a6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    85aa:	b1a9      	cbz	r1, 85d8 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    85ac:	f04f 0420 	mov.w	r4, #32
    85b0:	f3ef 8111 	mrs	r1, BASEPRI
    85b4:	f384 8812 	msr	BASEPRI_MAX, r4
    85b8:	f3bf 8f6f 	isb	sy
    85bc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    85c0:	b134      	cbz	r4, 85d0 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85c2:	2400      	movs	r4, #0
    85c4:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    85c8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85cc:	2401      	movs	r4, #1
    85ce:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    85d0:	f381 8811 	msr	BASEPRI, r1
    85d4:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    85d8:	6852      	ldr	r2, [r2, #4]
    85da:	06d2      	lsls	r2, r2, #27
    85dc:	d51a      	bpl.n	8614 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    85de:	f04f 0220 	mov.w	r2, #32
    85e2:	f3ef 8111 	mrs	r1, BASEPRI
    85e6:	f382 8812 	msr	BASEPRI_MAX, r2
    85ea:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85ee:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    85f2:	b112      	cbz	r2, 85fa <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    85f4:	2200      	movs	r2, #0
    85f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    85fa:	6902      	ldr	r2, [r0, #16]
    85fc:	68d2      	ldr	r2, [r2, #12]
    85fe:	b10a      	cbz	r2, 8604 <uarte_nrfx_isr_int+0x6c>
    8600:	6912      	ldr	r2, [r2, #16]
    8602:	b91a      	cbnz	r2, 860c <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    8604:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8608:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    860c:	f381 8811 	msr	BASEPRI, r1
    8610:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    8614:	6902      	ldr	r2, [r0, #16]
    8616:	68d2      	ldr	r2, [r2, #12]
    8618:	b15a      	cbz	r2, 8632 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    861a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    861e:	b159      	cbz	r1, 8638 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
    8620:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    8622:	2100      	movs	r1, #0
    8624:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    8626:	b13c      	cbz	r4, 8638 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    8628:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    862c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    8630:	7391      	strb	r1, [r2, #14]
}
    8632:	f85d 4b04 	ldr.w	r4, [sp], #4
    8636:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8638:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    863c:	b121      	cbz	r1, 8648 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    863e:	2100      	movs	r1, #0
    8640:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    8644:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    8648:	6813      	ldr	r3, [r2, #0]
    864a:	2b00      	cmp	r3, #0
    864c:	d0f1      	beq.n	8632 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    864e:	6851      	ldr	r1, [r2, #4]
}
    8650:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
    8654:	4718      	bx	r3

00008656 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    8656:	b510      	push	{r4, lr}
    8658:	2200      	movs	r2, #0
    865a:	4604      	mov	r4, r0
    865c:	2101      	movs	r1, #1
    865e:	2028      	movs	r0, #40	; 0x28
    8660:	f7fa fc6a 	bl	2f38 <z_arm_irq_priority_set>
    8664:	2028      	movs	r0, #40	; 0x28
    8666:	f7fa fc49 	bl	2efc <arch_irq_enable>
    866a:	4620      	mov	r0, r4
    866c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8670:	f7fb bc8c 	b.w	3f8c <uarte_instance_init.constprop.0>

00008674 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    8674:	b510      	push	{r4, lr}
    8676:	2200      	movs	r2, #0
    8678:	4604      	mov	r4, r0
    867a:	2101      	movs	r1, #1
    867c:	2002      	movs	r0, #2
    867e:	f7fa fc5b 	bl	2f38 <z_arm_irq_priority_set>
    8682:	2002      	movs	r0, #2
    8684:	f7fa fc3a 	bl	2efc <arch_irq_enable>
    8688:	4620      	mov	r0, r4
    868a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    868e:	f7fb bc7d 	b.w	3f8c <uarte_instance_init.constprop.0>

00008692 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8692:	4770      	bx	lr

00008694 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    8694:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    8696:	6843      	ldr	r3, [r0, #4]
    8698:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    869a:	7a03      	ldrb	r3, [r0, #8]
    869c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    86a0:	3b01      	subs	r3, #1
    86a2:	00db      	lsls	r3, r3, #3
    86a4:	6845      	ldr	r5, [r0, #4]
    86a6:	6814      	ldr	r4, [r2, #0]
    86a8:	441d      	add	r5, r3
    86aa:	42ac      	cmp	r4, r5
    86ac:	d902      	bls.n	86b4 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    86ae:	f06f 0001 	mvn.w	r0, #1
}
    86b2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    86b4:	7965      	ldrb	r5, [r4, #5]
    86b6:	428d      	cmp	r5, r1
    86b8:	d002      	beq.n	86c0 <pinctrl_lookup_state+0x2c>
		(*state)++;
    86ba:	3408      	adds	r4, #8
    86bc:	6014      	str	r4, [r2, #0]
    86be:	e7f1      	b.n	86a4 <pinctrl_lookup_state+0x10>
			return 0;
    86c0:	2000      	movs	r0, #0
    86c2:	e7f6      	b.n	86b2 <pinctrl_lookup_state+0x1e>

000086c4 <nrf_gpio_pin_write>:
    if (value == 0)
    86c4:	b909      	cbnz	r1, 86ca <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    86c6:	f7fb bf73 	b.w	45b0 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    86ca:	f7fb bfa1 	b.w	4610 <nrf_gpio_pin_set>

000086ce <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    86ce:	b570      	push	{r4, r5, r6, lr}
    86d0:	4615      	mov	r5, r2
    86d2:	4604      	mov	r4, r0
    86d4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    86d8:	42a6      	cmp	r6, r4
    86da:	d101      	bne.n	86e0 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    86dc:	2000      	movs	r0, #0
}
    86de:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    86e0:	6823      	ldr	r3, [r4, #0]
    86e2:	0c1a      	lsrs	r2, r3, #16
    86e4:	2a22      	cmp	r2, #34	; 0x22
    86e6:	f200 808e 	bhi.w	8806 <pinctrl_configure_pins+0x138>
    86ea:	e8df f002 	tbb	[pc, r2]
    86ee:	1d12      	.short	0x1d12
    86f0:	39294324 	.word	0x39294324
    86f4:	8c8c8c43 	.word	0x8c8c8c43
    86f8:	8c4d488c 	.word	0x8c4d488c
    86fc:	8c8c8c8c 	.word	0x8c8c8c8c
    8700:	8c8c8c8c 	.word	0x8c8c8c8c
    8704:	68635e52 	.word	0x68635e52
    8708:	6d8c8c8c 	.word	0x6d8c8c8c
    870c:	827d7873 	.word	0x827d7873
    8710:	87          	.byte	0x87
    8711:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    8712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8716:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    871a:	6820      	ldr	r0, [r4, #0]
    871c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8720:	f7fb ff76 	bl	4610 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8724:	2201      	movs	r2, #1
    8726:	e015      	b.n	8754 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    8728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    872c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8730:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8732:	2100      	movs	r1, #0
    8734:	e00f      	b.n	8756 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    8736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    873a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    873e:	e7ec      	b.n	871a <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    8740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8744:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    8748:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    874a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    874e:	f7fb ff2f 	bl	45b0 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8752:	2200      	movs	r2, #0
    8754:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8756:	6820      	ldr	r0, [r4, #0]
    8758:	f7fb ff3a 	bl	45d0 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    875c:	3404      	adds	r4, #4
    875e:	e7bb      	b.n	86d8 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    8760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8764:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    8768:	6820      	ldr	r0, [r4, #0]
    876a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    876e:	f7fb ff1f 	bl	45b0 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8772:	e7d7      	b.n	8724 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    8774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8778:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    877c:	e7d8      	b.n	8730 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    877e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8782:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8786:	e7d3      	b.n	8730 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    8788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    878c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    8790:	e7ce      	b.n	8730 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    8792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8796:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    879a:	6820      	ldr	r0, [r4, #0]
    879c:	f3c0 3140 	ubfx	r1, r0, #13, #1
    87a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    87a4:	f7ff ff8e 	bl	86c4 <nrf_gpio_pin_write>
    87a8:	e7bc      	b.n	8724 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    87aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87ae:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    87b2:	e7f2      	b.n	879a <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    87b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87b8:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    87bc:	e7ed      	b.n	879a <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    87be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87c2:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    87c6:	e7e8      	b.n	879a <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    87c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87cc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    87d0:	2201      	movs	r2, #1
    87d2:	e7ae      	b.n	8732 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    87d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87d8:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    87dc:	e7f8      	b.n	87d0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    87de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87e2:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    87e6:	e7f3      	b.n	87d0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    87e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87ec:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    87f0:	e7ee      	b.n	87d0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    87f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87f6:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    87fa:	e7e9      	b.n	87d0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    87fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8800:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    8804:	e7e4      	b.n	87d0 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    8806:	f06f 0085 	mvn.w	r0, #133	; 0x85
    880a:	e768      	b.n	86de <pinctrl_configure_pins+0x10>

0000880c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    880c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    880e:	2000      	movs	r0, #0
    8810:	f7fb f800 	bl	3814 <sys_arch_reboot>

00008814 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8814:	f7ff b8e4 	b.w	79e0 <nrf_cc3xx_platform_init_no_rng>

00008818 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8818:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    881a:	f7fa fa87 	bl	2d2c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    881e:	f7fa fb39 	bl	2e94 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8826:	f7ff b8db 	b.w	79e0 <nrf_cc3xx_platform_init_no_rng>

0000882a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    882a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    882e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    8832:	f1a0 0308 	sub.w	r3, r0, #8
    8836:	4258      	negs	r0, r3
    8838:	4158      	adcs	r0, r3
    883a:	4770      	bx	lr

0000883c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    883c:	4700      	bx	r0

0000883e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    883e:	f000 ba1c 	b.w	8c7a <z_impl_k_busy_wait>

00008842 <nrfx_clock_enable>:
{
    8842:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8844:	2000      	movs	r0, #0
    8846:	f7fa fb69 	bl	2f1c <arch_irq_is_enabled>
    884a:	b908      	cbnz	r0, 8850 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    884c:	f7fa fb56 	bl	2efc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8854:	2200      	movs	r2, #0
    8856:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    885a:	bd08      	pop	{r3, pc}

0000885c <nrfx_clock_start>:
{
    885c:	b508      	push	{r3, lr}
    switch (domain)
    885e:	b110      	cbz	r0, 8866 <nrfx_clock_start+0xa>
    8860:	2801      	cmp	r0, #1
    8862:	d02d      	beq.n	88c0 <nrfx_clock_start+0x64>
}
    8864:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    886a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    886e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    8872:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    8876:	d10b      	bne.n	8890 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    8878:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    887c:	07c9      	lsls	r1, r1, #31
    887e:	d510      	bpl.n	88a2 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8880:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    8884:	079b      	lsls	r3, r3, #30
    8886:	d408      	bmi.n	889a <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    8888:	2302      	movs	r3, #2
    888a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    888e:	e7e9      	b.n	8864 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8890:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    8894:	2b01      	cmp	r3, #1
    8896:	d004      	beq.n	88a2 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    8898:	b11b      	cbz	r3, 88a2 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    889a:	2000      	movs	r0, #0
    889c:	f7fc f81e 	bl	48dc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    88a0:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    88a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    88a6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88aa:	2300      	movs	r3, #0
    88ac:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    88b0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    88b4:	2302      	movs	r3, #2
    88b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88ba:	2301      	movs	r3, #1
    88bc:	6093      	str	r3, [r2, #8]
}
    88be:	e7d1      	b.n	8864 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88c4:	2200      	movs	r2, #0
    88c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    88ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    88ce:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88d2:	6018      	str	r0, [r3, #0]
}
    88d4:	e7c6      	b.n	8864 <nrfx_clock_start+0x8>

000088d6 <nrfx_clock_stop>:
    clock_stop(domain);
    88d6:	f7fc b801 	b.w	48dc <clock_stop>

000088da <nrf_gpio_reconfigure>:
{
    88da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    88dc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    88de:	a801      	add	r0, sp, #4
{
    88e0:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    88e4:	4617      	mov	r7, r2
    88e6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    88e8:	f7fc f890 	bl	4a0c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    88ec:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    88ee:	2f00      	cmp	r7, #0
    88f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    88f4:	bf14      	ite	ne
    88f6:	2302      	movne	r3, #2
    88f8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    88fa:	2900      	cmp	r1, #0
    88fc:	bf18      	it	ne
    88fe:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8902:	2d00      	cmp	r5, #0
    8904:	bf14      	ite	ne
    8906:	f04f 0c0c 	movne.w	ip, #12
    890a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    890e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8910:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8914:	bf14      	ite	ne
    8916:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    891a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    891e:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8920:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8924:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8928:	bf14      	ite	ne
    892a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    892e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8932:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    8936:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    893a:	b101      	cbz	r1, 893e <nrf_gpio_reconfigure+0x64>
    893c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    893e:	b10f      	cbz	r7, 8944 <nrf_gpio_reconfigure+0x6a>
    8940:	783f      	ldrb	r7, [r7, #0]
    8942:	007f      	lsls	r7, r7, #1
    8944:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8946:	b10d      	cbz	r5, 894c <nrf_gpio_reconfigure+0x72>
    8948:	782d      	ldrb	r5, [r5, #0]
    894a:	00ad      	lsls	r5, r5, #2
    894c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    894e:	b10c      	cbz	r4, 8954 <nrf_gpio_reconfigure+0x7a>
    8950:	7822      	ldrb	r2, [r4, #0]
    8952:	0214      	lsls	r4, r2, #8
    8954:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8956:	b10e      	cbz	r6, 895c <nrf_gpio_reconfigure+0x82>
    8958:	7836      	ldrb	r6, [r6, #0]
    895a:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    895c:	432c      	orrs	r4, r5
    895e:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    8960:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    8964:	b003      	add	sp, #12
    8966:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008968 <nrf_gpio_cfg_sense_set>:
{
    8968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    896a:	f10d 030f 	add.w	r3, sp, #15
    896e:	9301      	str	r3, [sp, #4]
    8970:	2300      	movs	r3, #0
{
    8972:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8976:	9300      	str	r3, [sp, #0]
    8978:	461a      	mov	r2, r3
    897a:	4619      	mov	r1, r3
    897c:	f7ff ffad 	bl	88da <nrf_gpio_reconfigure>
}
    8980:	b005      	add	sp, #20
    8982:	f85d fb04 	ldr.w	pc, [sp], #4

00008986 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    8986:	f7fc bba9 	b.w	50dc <_DoInit>

0000898a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    898a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    898c:	f7ff fffb 	bl	8986 <SEGGER_RTT_Init>

	return 0;
}
    8990:	2000      	movs	r0, #0
    8992:	bd08      	pop	{r3, pc}

00008994 <z_device_state_init>:
}
    8994:	4770      	bx	lr

00008996 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8996:	b138      	cbz	r0, 89a8 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8998:	68c3      	ldr	r3, [r0, #12]
    899a:	8818      	ldrh	r0, [r3, #0]
    899c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    89a0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    89a4:	4258      	negs	r0, r3
    89a6:	4158      	adcs	r0, r3
}
    89a8:	4770      	bx	lr

000089aa <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    89aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    89ac:	4605      	mov	r5, r0
    89ae:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    89b0:	f04f 0320 	mov.w	r3, #32
    89b4:	f3ef 8611 	mrs	r6, BASEPRI
    89b8:	f383 8812 	msr	BASEPRI_MAX, r3
    89bc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    89c0:	f7fd f99a 	bl	5cf8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    89c4:	9901      	ldr	r1, [sp, #4]
    89c6:	4604      	mov	r4, r0
    89c8:	4628      	mov	r0, r5
    89ca:	f7ff ff1f 	bl	880c <k_sys_fatal_error_handler>
	__asm__ volatile(
    89ce:	f386 8811 	msr	BASEPRI, r6
    89d2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    89d6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    89d8:	b002      	add	sp, #8
    89da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89de:	f7fa bdb9 	b.w	3554 <z_impl_k_thread_abort>

000089e2 <z_early_memset>:
    89e2:	f000 b96e 	b.w	8cc2 <memset>

000089e6 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    89e6:	f000 b95e 	b.w	8ca6 <memcpy>

000089ea <k_mem_slab_init>:
{
    89ea:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    89ec:	2400      	movs	r4, #0
    89ee:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    89f0:	7204      	strb	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    89f2:	ea41 0402 	orr.w	r4, r1, r2
    89f6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    89fa:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    89fe:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8a00:	d10c      	bne.n	8a1c <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    8a02:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8a04:	42a3      	cmp	r3, r4
    8a06:	d103      	bne.n	8a10 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    8a08:	e9c0 0000 	strd	r0, r0, [r0]
}
    8a0c:	2000      	movs	r0, #0
}
    8a0e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8a10:	6985      	ldr	r5, [r0, #24]
    8a12:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8a14:	3401      	adds	r4, #1
		slab->free_list = p;
    8a16:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8a18:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8a1a:	e7f3      	b.n	8a04 <k_mem_slab_init+0x1a>
		return -EINVAL;
    8a1c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8a20:	e7f5      	b.n	8a0e <k_mem_slab_init+0x24>

00008a22 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    8a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a24:	4604      	mov	r4, r0
    8a26:	460d      	mov	r5, r1
	__asm__ volatile(
    8a28:	f04f 0320 	mov.w	r3, #32
    8a2c:	f3ef 8611 	mrs	r6, BASEPRI
    8a30:	f383 8812 	msr	BASEPRI_MAX, r3
    8a34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8a38:	6987      	ldr	r7, [r0, #24]
    8a3a:	b977      	cbnz	r7, 8a5a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8a3c:	f000 f8c0 	bl	8bc0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    8a40:	b158      	cbz	r0, 8a5a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8a42:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8a44:	6142      	str	r2, [r0, #20]
    8a46:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    8a48:	f000 f85e 	bl	8b08 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8a4c:	4631      	mov	r1, r6
    8a4e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8a52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    8a56:	f7fc bea3 	b.w	57a0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    8a5a:	682b      	ldr	r3, [r5, #0]
    8a5c:	69a2      	ldr	r2, [r4, #24]
    8a5e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    8a60:	682b      	ldr	r3, [r5, #0]
    8a62:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    8a64:	69e3      	ldr	r3, [r4, #28]
    8a66:	3b01      	subs	r3, #1
    8a68:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8a6a:	f386 8811 	msr	BASEPRI, r6
    8a6e:	f3bf 8f6f 	isb	sy
}
    8a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008a74 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8a74:	f3ef 8005 	mrs	r0, IPSR
}
    8a78:	3800      	subs	r0, #0
    8a7a:	bf18      	it	ne
    8a7c:	2001      	movne	r0, #1
    8a7e:	4770      	bx	lr

00008a80 <z_pm_save_idle_exit>:
{
    8a80:	b508      	push	{r3, lr}
	pm_system_resume();
    8a82:	f7fa f83b 	bl	2afc <pm_system_resume>
}
    8a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8a8a:	f7ff be02 	b.w	8692 <sys_clock_idle_exit>

00008a8e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    8a8e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8a92:	428b      	cmp	r3, r1
    8a94:	d001      	beq.n	8a9a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    8a96:	f7fc bfeb 	b.w	5a70 <z_set_prio>
}
    8a9a:	2000      	movs	r0, #0
    8a9c:	4770      	bx	lr

00008a9e <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    8a9e:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
    8aa0:	e9c0 3302 	strd	r3, r3, [r0, #8]
    8aa4:	e9c0 0000 	strd	r0, r0, [r0]
}
    8aa8:	4618      	mov	r0, r3
    8aaa:	4770      	bx	lr

00008aac <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    8aac:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8ab0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8ab2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8ab4:	2300      	movs	r3, #0
	node->prev = NULL;
    8ab6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    8aba:	4770      	bx	lr

00008abc <unpend_thread_no_timeout>:
{
    8abc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    8abe:	f7ff fff5 	bl	8aac <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8ac2:	7b43      	ldrb	r3, [r0, #13]
    8ac4:	f023 0302 	bic.w	r3, r3, #2
    8ac8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    8aca:	2300      	movs	r3, #0
    8acc:	6083      	str	r3, [r0, #8]
}
    8ace:	bd08      	pop	{r3, pc}

00008ad0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8ad0:	4603      	mov	r3, r0
    8ad2:	b920      	cbnz	r0, 8ade <z_reschedule_irqlock+0xe>
    8ad4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8ad8:	b90a      	cbnz	r2, 8ade <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8ada:	f7fa ba77 	b.w	2fcc <arch_swap>
    8ade:	f383 8811 	msr	BASEPRI, r3
    8ae2:	f3bf 8f6f 	isb	sy
}
    8ae6:	4770      	bx	lr

00008ae8 <z_reschedule_unlocked>:
	__asm__ volatile(
    8ae8:	f04f 0320 	mov.w	r3, #32
    8aec:	f3ef 8011 	mrs	r0, BASEPRI
    8af0:	f383 8812 	msr	BASEPRI_MAX, r3
    8af4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8af8:	f7ff bfea 	b.w	8ad0 <z_reschedule_irqlock>

00008afc <z_priq_dumb_best>:
	return list->head == list;
    8afc:	6803      	ldr	r3, [r0, #0]
}
    8afe:	4298      	cmp	r0, r3
    8b00:	bf14      	ite	ne
    8b02:	4618      	movne	r0, r3
    8b04:	2000      	moveq	r0, #0
    8b06:	4770      	bx	lr

00008b08 <z_ready_thread>:
{
    8b08:	b510      	push	{r4, lr}
    8b0a:	f04f 0320 	mov.w	r3, #32
    8b0e:	f3ef 8411 	mrs	r4, BASEPRI
    8b12:	f383 8812 	msr	BASEPRI_MAX, r3
    8b16:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    8b1a:	f7fc ff03 	bl	5924 <ready_thread>
	__asm__ volatile(
    8b1e:	f384 8811 	msr	BASEPRI, r4
    8b22:	f3bf 8f6f 	isb	sy
}
    8b26:	bd10      	pop	{r4, pc}

00008b28 <z_thread_timeout>:
{
    8b28:	b510      	push	{r4, lr}
    8b2a:	4601      	mov	r1, r0
	__asm__ volatile(
    8b2c:	f04f 0320 	mov.w	r3, #32
    8b30:	f3ef 8411 	mrs	r4, BASEPRI
    8b34:	f383 8812 	msr	BASEPRI_MAX, r3
    8b38:	f3bf 8f6f 	isb	sy
		if (!killed) {
    8b3c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    8b40:	f013 0f28 	tst.w	r3, #40	; 0x28
    8b44:	d10d      	bne.n	8b62 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    8b46:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    8b4a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    8b4c:	b10b      	cbz	r3, 8b52 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    8b4e:	f7ff ffb5 	bl	8abc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8b52:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    8b56:	f023 0314 	bic.w	r3, r3, #20
    8b5a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    8b5e:	f7fc fee1 	bl	5924 <ready_thread>
	__asm__ volatile(
    8b62:	f384 8811 	msr	BASEPRI, r4
    8b66:	f3bf 8f6f 	isb	sy
}
    8b6a:	bd10      	pop	{r4, pc}

00008b6c <add_to_waitq_locked>:
{
    8b6c:	b538      	push	{r3, r4, r5, lr}
    8b6e:	4604      	mov	r4, r0
    8b70:	460d      	mov	r5, r1
	unready_thread(thread);
    8b72:	f7fc ff2b 	bl	59cc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8b76:	7b63      	ldrb	r3, [r4, #13]
    8b78:	f043 0302 	orr.w	r3, r3, #2
    8b7c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8b7e:	b195      	cbz	r5, 8ba6 <add_to_waitq_locked+0x3a>
    8b80:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    8b82:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b84:	429d      	cmp	r5, r3
    8b86:	d015      	beq.n	8bb4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b88:	b1a3      	cbz	r3, 8bb4 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    8b8a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8b8e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    8b92:	4291      	cmp	r1, r2
    8b94:	d008      	beq.n	8ba8 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    8b96:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b98:	2a00      	cmp	r2, #0
    8b9a:	dd05      	ble.n	8ba8 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    8b9c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8b9e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8ba2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8ba4:	605c      	str	r4, [r3, #4]
}
    8ba6:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    8ba8:	686a      	ldr	r2, [r5, #4]
    8baa:	4293      	cmp	r3, r2
    8bac:	d002      	beq.n	8bb4 <add_to_waitq_locked+0x48>
    8bae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d1ec      	bne.n	8b8e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    8bb4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8bb6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8bba:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8bbc:	606c      	str	r4, [r5, #4]
}
    8bbe:	e7f2      	b.n	8ba6 <add_to_waitq_locked+0x3a>

00008bc0 <z_unpend_first_thread>:
{
    8bc0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8bc2:	f04f 0320 	mov.w	r3, #32
    8bc6:	f3ef 8511 	mrs	r5, BASEPRI
    8bca:	f383 8812 	msr	BASEPRI_MAX, r3
    8bce:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8bd2:	f7ff ff93 	bl	8afc <z_priq_dumb_best>
		if (thread != NULL) {
    8bd6:	4604      	mov	r4, r0
    8bd8:	b120      	cbz	r0, 8be4 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    8bda:	f7ff ff6f 	bl	8abc <unpend_thread_no_timeout>
    8bde:	3018      	adds	r0, #24
    8be0:	f000 f806 	bl	8bf0 <z_abort_timeout>
	__asm__ volatile(
    8be4:	f385 8811 	msr	BASEPRI, r5
    8be8:	f3bf 8f6f 	isb	sy
}
    8bec:	4620      	mov	r0, r4
    8bee:	bd38      	pop	{r3, r4, r5, pc}

00008bf0 <z_abort_timeout>:
{
    8bf0:	b510      	push	{r4, lr}
	__asm__ volatile(
    8bf2:	f04f 0220 	mov.w	r2, #32
    8bf6:	f3ef 8411 	mrs	r4, BASEPRI
    8bfa:	f382 8812 	msr	BASEPRI_MAX, r2
    8bfe:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    8c02:	6803      	ldr	r3, [r0, #0]
    8c04:	b13b      	cbz	r3, 8c16 <z_abort_timeout+0x26>
			remove_timeout(to);
    8c06:	f7fd f919 	bl	5e3c <remove_timeout>
			ret = 0;
    8c0a:	2000      	movs	r0, #0
	__asm__ volatile(
    8c0c:	f384 8811 	msr	BASEPRI, r4
    8c10:	f3bf 8f6f 	isb	sy
}
    8c14:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    8c16:	f06f 0015 	mvn.w	r0, #21
    8c1a:	e7f7      	b.n	8c0c <z_abort_timeout+0x1c>

00008c1c <z_get_next_timeout_expiry>:
{
    8c1c:	b510      	push	{r4, lr}
	__asm__ volatile(
    8c1e:	f04f 0320 	mov.w	r3, #32
    8c22:	f3ef 8411 	mrs	r4, BASEPRI
    8c26:	f383 8812 	msr	BASEPRI_MAX, r3
    8c2a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    8c2e:	f7fd f8df 	bl	5df0 <next_timeout>
	__asm__ volatile(
    8c32:	f384 8811 	msr	BASEPRI, r4
    8c36:	f3bf 8f6f 	isb	sy
}
    8c3a:	bd10      	pop	{r4, pc}

00008c3c <z_set_timeout_expiry>:
{
    8c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8c3e:	4604      	mov	r4, r0
    8c40:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    8c42:	f04f 0320 	mov.w	r3, #32
    8c46:	f3ef 8511 	mrs	r5, BASEPRI
    8c4a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c4e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    8c52:	f7fd f8cd 	bl	5df0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8c56:	2801      	cmp	r0, #1
    8c58:	dd05      	ble.n	8c66 <z_set_timeout_expiry+0x2a>
    8c5a:	42a0      	cmp	r0, r4
    8c5c:	9901      	ldr	r1, [sp, #4]
    8c5e:	db02      	blt.n	8c66 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8c60:	4620      	mov	r0, r4
    8c62:	f7fb fc69 	bl	4538 <sys_clock_set_timeout>
	__asm__ volatile(
    8c66:	f385 8811 	msr	BASEPRI, r5
    8c6a:	f3bf 8f6f 	isb	sy
}
    8c6e:	b003      	add	sp, #12
    8c70:	bd30      	pop	{r4, r5, pc}

00008c72 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8c72:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8c74:	f7fd f9d0 	bl	6018 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8c78:	bd08      	pop	{r3, pc}

00008c7a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8c7a:	b108      	cbz	r0, 8c80 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8c7c:	f7fa bde0 	b.w	3840 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8c80:	4770      	bx	lr

00008c82 <k_heap_init>:
{
    8c82:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    8c84:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    8c88:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    8c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    8c90:	f7ff b99e 	b.w	7fd0 <sys_heap_init>

00008c94 <_ZdlPv>:
    8c94:	f7fd ba2e 	b.w	60f4 <free>

00008c98 <abort>:
    8c98:	b508      	push	{r3, lr}
    8c9a:	2006      	movs	r0, #6
    8c9c:	f7fe f874 	bl	6d88 <raise>
    8ca0:	2001      	movs	r0, #1
    8ca2:	f7fa fd6b 	bl	377c <_exit>

00008ca6 <memcpy>:
    8ca6:	440a      	add	r2, r1
    8ca8:	4291      	cmp	r1, r2
    8caa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    8cae:	d100      	bne.n	8cb2 <memcpy+0xc>
    8cb0:	4770      	bx	lr
    8cb2:	b510      	push	{r4, lr}
    8cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
    8cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
    8cbc:	4291      	cmp	r1, r2
    8cbe:	d1f9      	bne.n	8cb4 <memcpy+0xe>
    8cc0:	bd10      	pop	{r4, pc}

00008cc2 <memset>:
    8cc2:	4402      	add	r2, r0
    8cc4:	4603      	mov	r3, r0
    8cc6:	4293      	cmp	r3, r2
    8cc8:	d100      	bne.n	8ccc <memset+0xa>
    8cca:	4770      	bx	lr
    8ccc:	f803 1b01 	strb.w	r1, [r3], #1
    8cd0:	e7f9      	b.n	8cc6 <memset+0x4>

00008cd2 <_calloc_r>:
    8cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8cd4:	fba1 2402 	umull	r2, r4, r1, r2
    8cd8:	b94c      	cbnz	r4, 8cee <_calloc_r+0x1c>
    8cda:	4611      	mov	r1, r2
    8cdc:	9201      	str	r2, [sp, #4]
    8cde:	f7fd fa7d 	bl	61dc <_malloc_r>
    8ce2:	9a01      	ldr	r2, [sp, #4]
    8ce4:	4605      	mov	r5, r0
    8ce6:	b930      	cbnz	r0, 8cf6 <_calloc_r+0x24>
    8ce8:	4628      	mov	r0, r5
    8cea:	b003      	add	sp, #12
    8cec:	bd30      	pop	{r4, r5, pc}
    8cee:	220c      	movs	r2, #12
    8cf0:	6002      	str	r2, [r0, #0]
    8cf2:	2500      	movs	r5, #0
    8cf4:	e7f8      	b.n	8ce8 <_calloc_r+0x16>
    8cf6:	4621      	mov	r1, r4
    8cf8:	f7ff ffe3 	bl	8cc2 <memset>
    8cfc:	e7f4      	b.n	8ce8 <_calloc_r+0x16>

00008cfe <__sfputc_r>:
    8cfe:	6893      	ldr	r3, [r2, #8]
    8d00:	3b01      	subs	r3, #1
    8d02:	2b00      	cmp	r3, #0
    8d04:	b410      	push	{r4}
    8d06:	6093      	str	r3, [r2, #8]
    8d08:	da08      	bge.n	8d1c <__sfputc_r+0x1e>
    8d0a:	6994      	ldr	r4, [r2, #24]
    8d0c:	42a3      	cmp	r3, r4
    8d0e:	db01      	blt.n	8d14 <__sfputc_r+0x16>
    8d10:	290a      	cmp	r1, #10
    8d12:	d103      	bne.n	8d1c <__sfputc_r+0x1e>
    8d14:	f85d 4b04 	ldr.w	r4, [sp], #4
    8d18:	f7fe b850 	b.w	6dbc <__swbuf_r>
    8d1c:	6813      	ldr	r3, [r2, #0]
    8d1e:	1c58      	adds	r0, r3, #1
    8d20:	6010      	str	r0, [r2, #0]
    8d22:	7019      	strb	r1, [r3, #0]
    8d24:	4608      	mov	r0, r1
    8d26:	f85d 4b04 	ldr.w	r4, [sp], #4
    8d2a:	4770      	bx	lr

00008d2c <__sfputs_r>:
    8d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d2e:	4606      	mov	r6, r0
    8d30:	460f      	mov	r7, r1
    8d32:	4614      	mov	r4, r2
    8d34:	18d5      	adds	r5, r2, r3
    8d36:	42ac      	cmp	r4, r5
    8d38:	d101      	bne.n	8d3e <__sfputs_r+0x12>
    8d3a:	2000      	movs	r0, #0
    8d3c:	e007      	b.n	8d4e <__sfputs_r+0x22>
    8d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
    8d42:	463a      	mov	r2, r7
    8d44:	4630      	mov	r0, r6
    8d46:	f7ff ffda 	bl	8cfe <__sfputc_r>
    8d4a:	1c43      	adds	r3, r0, #1
    8d4c:	d1f3      	bne.n	8d36 <__sfputs_r+0xa>
    8d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008d50 <__cvt>:
    8d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    8d54:	ec55 4b10 	vmov	r4, r5, d0
    8d58:	2d00      	cmp	r5, #0
    8d5a:	460e      	mov	r6, r1
    8d5c:	4619      	mov	r1, r3
    8d5e:	462b      	mov	r3, r5
    8d60:	bfbb      	ittet	lt
    8d62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
    8d66:	461d      	movlt	r5, r3
    8d68:	2300      	movge	r3, #0
    8d6a:	232d      	movlt	r3, #45	; 0x2d
    8d6c:	700b      	strb	r3, [r1, #0]
    8d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    8d74:	4691      	mov	r9, r2
    8d76:	f023 0820 	bic.w	r8, r3, #32
    8d7a:	bfbc      	itt	lt
    8d7c:	4622      	movlt	r2, r4
    8d7e:	4614      	movlt	r4, r2
    8d80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    8d84:	d005      	beq.n	8d92 <__cvt+0x42>
    8d86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
    8d8a:	d100      	bne.n	8d8e <__cvt+0x3e>
    8d8c:	3601      	adds	r6, #1
    8d8e:	2102      	movs	r1, #2
    8d90:	e000      	b.n	8d94 <__cvt+0x44>
    8d92:	2103      	movs	r1, #3
    8d94:	ab03      	add	r3, sp, #12
    8d96:	9301      	str	r3, [sp, #4]
    8d98:	ab02      	add	r3, sp, #8
    8d9a:	9300      	str	r3, [sp, #0]
    8d9c:	ec45 4b10 	vmov	d0, r4, r5
    8da0:	4653      	mov	r3, sl
    8da2:	4632      	mov	r2, r6
    8da4:	f7f8 fe88 	bl	1ab8 <_dtoa_r>
    8da8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    8dac:	4607      	mov	r7, r0
    8dae:	d102      	bne.n	8db6 <__cvt+0x66>
    8db0:	f019 0f01 	tst.w	r9, #1
    8db4:	d022      	beq.n	8dfc <__cvt+0xac>
    8db6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    8dba:	eb07 0906 	add.w	r9, r7, r6
    8dbe:	d110      	bne.n	8de2 <__cvt+0x92>
    8dc0:	783b      	ldrb	r3, [r7, #0]
    8dc2:	2b30      	cmp	r3, #48	; 0x30
    8dc4:	d10a      	bne.n	8ddc <__cvt+0x8c>
    8dc6:	2200      	movs	r2, #0
    8dc8:	2300      	movs	r3, #0
    8dca:	4620      	mov	r0, r4
    8dcc:	4629      	mov	r1, r5
    8dce:	f7f7 fe0b 	bl	9e8 <__aeabi_dcmpeq>
    8dd2:	b918      	cbnz	r0, 8ddc <__cvt+0x8c>
    8dd4:	f1c6 0601 	rsb	r6, r6, #1
    8dd8:	f8ca 6000 	str.w	r6, [sl]
    8ddc:	f8da 3000 	ldr.w	r3, [sl]
    8de0:	4499      	add	r9, r3
    8de2:	2200      	movs	r2, #0
    8de4:	2300      	movs	r3, #0
    8de6:	4620      	mov	r0, r4
    8de8:	4629      	mov	r1, r5
    8dea:	f7f7 fdfd 	bl	9e8 <__aeabi_dcmpeq>
    8dee:	b108      	cbz	r0, 8df4 <__cvt+0xa4>
    8df0:	f8cd 900c 	str.w	r9, [sp, #12]
    8df4:	2230      	movs	r2, #48	; 0x30
    8df6:	9b03      	ldr	r3, [sp, #12]
    8df8:	454b      	cmp	r3, r9
    8dfa:	d307      	bcc.n	8e0c <__cvt+0xbc>
    8dfc:	9b03      	ldr	r3, [sp, #12]
    8dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8e00:	1bdb      	subs	r3, r3, r7
    8e02:	4638      	mov	r0, r7
    8e04:	6013      	str	r3, [r2, #0]
    8e06:	b004      	add	sp, #16
    8e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e0c:	1c59      	adds	r1, r3, #1
    8e0e:	9103      	str	r1, [sp, #12]
    8e10:	701a      	strb	r2, [r3, #0]
    8e12:	e7f0      	b.n	8df6 <__cvt+0xa6>

00008e14 <__exponent>:
    8e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8e16:	4603      	mov	r3, r0
    8e18:	2900      	cmp	r1, #0
    8e1a:	bfb8      	it	lt
    8e1c:	4249      	neglt	r1, r1
    8e1e:	f803 2b02 	strb.w	r2, [r3], #2
    8e22:	bfb4      	ite	lt
    8e24:	222d      	movlt	r2, #45	; 0x2d
    8e26:	222b      	movge	r2, #43	; 0x2b
    8e28:	2909      	cmp	r1, #9
    8e2a:	7042      	strb	r2, [r0, #1]
    8e2c:	dd2a      	ble.n	8e84 <__exponent+0x70>
    8e2e:	f10d 0407 	add.w	r4, sp, #7
    8e32:	46a4      	mov	ip, r4
    8e34:	270a      	movs	r7, #10
    8e36:	46a6      	mov	lr, r4
    8e38:	460a      	mov	r2, r1
    8e3a:	fb91 f6f7 	sdiv	r6, r1, r7
    8e3e:	fb07 1516 	mls	r5, r7, r6, r1
    8e42:	3530      	adds	r5, #48	; 0x30
    8e44:	2a63      	cmp	r2, #99	; 0x63
    8e46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    8e4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
    8e4e:	4631      	mov	r1, r6
    8e50:	dcf1      	bgt.n	8e36 <__exponent+0x22>
    8e52:	3130      	adds	r1, #48	; 0x30
    8e54:	f1ae 0502 	sub.w	r5, lr, #2
    8e58:	f804 1c01 	strb.w	r1, [r4, #-1]
    8e5c:	1c44      	adds	r4, r0, #1
    8e5e:	4629      	mov	r1, r5
    8e60:	4561      	cmp	r1, ip
    8e62:	d30a      	bcc.n	8e7a <__exponent+0x66>
    8e64:	f10d 0209 	add.w	r2, sp, #9
    8e68:	eba2 020e 	sub.w	r2, r2, lr
    8e6c:	4565      	cmp	r5, ip
    8e6e:	bf88      	it	hi
    8e70:	2200      	movhi	r2, #0
    8e72:	4413      	add	r3, r2
    8e74:	1a18      	subs	r0, r3, r0
    8e76:	b003      	add	sp, #12
    8e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
    8e7e:	f804 2f01 	strb.w	r2, [r4, #1]!
    8e82:	e7ed      	b.n	8e60 <__exponent+0x4c>
    8e84:	2330      	movs	r3, #48	; 0x30
    8e86:	3130      	adds	r1, #48	; 0x30
    8e88:	7083      	strb	r3, [r0, #2]
    8e8a:	70c1      	strb	r1, [r0, #3]
    8e8c:	1d03      	adds	r3, r0, #4
    8e8e:	e7f1      	b.n	8e74 <__exponent+0x60>

00008e90 <_printf_common>:
    8e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e94:	4616      	mov	r6, r2
    8e96:	4699      	mov	r9, r3
    8e98:	688a      	ldr	r2, [r1, #8]
    8e9a:	690b      	ldr	r3, [r1, #16]
    8e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    8ea0:	4293      	cmp	r3, r2
    8ea2:	bfb8      	it	lt
    8ea4:	4613      	movlt	r3, r2
    8ea6:	6033      	str	r3, [r6, #0]
    8ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    8eac:	4607      	mov	r7, r0
    8eae:	460c      	mov	r4, r1
    8eb0:	b10a      	cbz	r2, 8eb6 <_printf_common+0x26>
    8eb2:	3301      	adds	r3, #1
    8eb4:	6033      	str	r3, [r6, #0]
    8eb6:	6823      	ldr	r3, [r4, #0]
    8eb8:	0699      	lsls	r1, r3, #26
    8eba:	bf42      	ittt	mi
    8ebc:	6833      	ldrmi	r3, [r6, #0]
    8ebe:	3302      	addmi	r3, #2
    8ec0:	6033      	strmi	r3, [r6, #0]
    8ec2:	6825      	ldr	r5, [r4, #0]
    8ec4:	f015 0506 	ands.w	r5, r5, #6
    8ec8:	d106      	bne.n	8ed8 <_printf_common+0x48>
    8eca:	f104 0a19 	add.w	sl, r4, #25
    8ece:	68e3      	ldr	r3, [r4, #12]
    8ed0:	6832      	ldr	r2, [r6, #0]
    8ed2:	1a9b      	subs	r3, r3, r2
    8ed4:	42ab      	cmp	r3, r5
    8ed6:	dc26      	bgt.n	8f26 <_printf_common+0x96>
    8ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    8edc:	1e13      	subs	r3, r2, #0
    8ede:	6822      	ldr	r2, [r4, #0]
    8ee0:	bf18      	it	ne
    8ee2:	2301      	movne	r3, #1
    8ee4:	0692      	lsls	r2, r2, #26
    8ee6:	d42b      	bmi.n	8f40 <_printf_common+0xb0>
    8ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
    8eec:	4649      	mov	r1, r9
    8eee:	4638      	mov	r0, r7
    8ef0:	47c0      	blx	r8
    8ef2:	3001      	adds	r0, #1
    8ef4:	d01e      	beq.n	8f34 <_printf_common+0xa4>
    8ef6:	6823      	ldr	r3, [r4, #0]
    8ef8:	68e5      	ldr	r5, [r4, #12]
    8efa:	6832      	ldr	r2, [r6, #0]
    8efc:	f003 0306 	and.w	r3, r3, #6
    8f00:	2b04      	cmp	r3, #4
    8f02:	bf08      	it	eq
    8f04:	1aad      	subeq	r5, r5, r2
    8f06:	68a3      	ldr	r3, [r4, #8]
    8f08:	6922      	ldr	r2, [r4, #16]
    8f0a:	bf0c      	ite	eq
    8f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    8f10:	2500      	movne	r5, #0
    8f12:	4293      	cmp	r3, r2
    8f14:	bfc4      	itt	gt
    8f16:	1a9b      	subgt	r3, r3, r2
    8f18:	18ed      	addgt	r5, r5, r3
    8f1a:	2600      	movs	r6, #0
    8f1c:	341a      	adds	r4, #26
    8f1e:	42b5      	cmp	r5, r6
    8f20:	d11a      	bne.n	8f58 <_printf_common+0xc8>
    8f22:	2000      	movs	r0, #0
    8f24:	e008      	b.n	8f38 <_printf_common+0xa8>
    8f26:	2301      	movs	r3, #1
    8f28:	4652      	mov	r2, sl
    8f2a:	4649      	mov	r1, r9
    8f2c:	4638      	mov	r0, r7
    8f2e:	47c0      	blx	r8
    8f30:	3001      	adds	r0, #1
    8f32:	d103      	bne.n	8f3c <_printf_common+0xac>
    8f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f3c:	3501      	adds	r5, #1
    8f3e:	e7c6      	b.n	8ece <_printf_common+0x3e>
    8f40:	18e1      	adds	r1, r4, r3
    8f42:	1c5a      	adds	r2, r3, #1
    8f44:	2030      	movs	r0, #48	; 0x30
    8f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    8f4a:	4422      	add	r2, r4
    8f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    8f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    8f54:	3302      	adds	r3, #2
    8f56:	e7c7      	b.n	8ee8 <_printf_common+0x58>
    8f58:	2301      	movs	r3, #1
    8f5a:	4622      	mov	r2, r4
    8f5c:	4649      	mov	r1, r9
    8f5e:	4638      	mov	r0, r7
    8f60:	47c0      	blx	r8
    8f62:	3001      	adds	r0, #1
    8f64:	d0e6      	beq.n	8f34 <_printf_common+0xa4>
    8f66:	3601      	adds	r6, #1
    8f68:	e7d9      	b.n	8f1e <_printf_common+0x8e>

00008f6a <_raise_r>:
    8f6a:	291f      	cmp	r1, #31
    8f6c:	b538      	push	{r3, r4, r5, lr}
    8f6e:	4604      	mov	r4, r0
    8f70:	460d      	mov	r5, r1
    8f72:	d904      	bls.n	8f7e <_raise_r+0x14>
    8f74:	2316      	movs	r3, #22
    8f76:	6003      	str	r3, [r0, #0]
    8f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f7c:	bd38      	pop	{r3, r4, r5, pc}
    8f7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8f80:	b112      	cbz	r2, 8f88 <_raise_r+0x1e>
    8f82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8f86:	b94b      	cbnz	r3, 8f9c <_raise_r+0x32>
    8f88:	4620      	mov	r0, r4
    8f8a:	f000 f816 	bl	8fba <_getpid_r>
    8f8e:	462a      	mov	r2, r5
    8f90:	4601      	mov	r1, r0
    8f92:	4620      	mov	r0, r4
    8f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f98:	f7fd befe 	b.w	6d98 <_kill_r>
    8f9c:	2b01      	cmp	r3, #1
    8f9e:	d00a      	beq.n	8fb6 <_raise_r+0x4c>
    8fa0:	1c59      	adds	r1, r3, #1
    8fa2:	d103      	bne.n	8fac <_raise_r+0x42>
    8fa4:	2316      	movs	r3, #22
    8fa6:	6003      	str	r3, [r0, #0]
    8fa8:	2001      	movs	r0, #1
    8faa:	e7e7      	b.n	8f7c <_raise_r+0x12>
    8fac:	2400      	movs	r4, #0
    8fae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    8fb2:	4628      	mov	r0, r5
    8fb4:	4798      	blx	r3
    8fb6:	2000      	movs	r0, #0
    8fb8:	e7e0      	b.n	8f7c <_raise_r+0x12>

00008fba <_getpid_r>:
    8fba:	f7ff b8c9 	b.w	8150 <_getpid>

00008fbe <strcpy>:
    8fbe:	4603      	mov	r3, r0
    8fc0:	f811 2b01 	ldrb.w	r2, [r1], #1
    8fc4:	f803 2b01 	strb.w	r2, [r3], #1
    8fc8:	2a00      	cmp	r2, #0
    8fca:	d1f9      	bne.n	8fc0 <strcpy+0x2>
    8fcc:	4770      	bx	lr

00008fce <strnlen>:
    8fce:	b510      	push	{r4, lr}
    8fd0:	4602      	mov	r2, r0
    8fd2:	4401      	add	r1, r0
    8fd4:	428a      	cmp	r2, r1
    8fd6:	4613      	mov	r3, r2
    8fd8:	d003      	beq.n	8fe2 <strnlen+0x14>
    8fda:	781c      	ldrb	r4, [r3, #0]
    8fdc:	3201      	adds	r2, #1
    8fde:	2c00      	cmp	r4, #0
    8fe0:	d1f8      	bne.n	8fd4 <strnlen+0x6>
    8fe2:	1a18      	subs	r0, r3, r0
    8fe4:	bd10      	pop	{r4, pc}

00008fe6 <quorem>:
    8fe6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fea:	6903      	ldr	r3, [r0, #16]
    8fec:	690c      	ldr	r4, [r1, #16]
    8fee:	42a3      	cmp	r3, r4
    8ff0:	4607      	mov	r7, r0
    8ff2:	f2c0 8081 	blt.w	90f8 <quorem+0x112>
    8ff6:	3c01      	subs	r4, #1
    8ff8:	f101 0814 	add.w	r8, r1, #20
    8ffc:	f100 0514 	add.w	r5, r0, #20
    9000:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    9004:	9301      	str	r3, [sp, #4]
    9006:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    900a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    900e:	3301      	adds	r3, #1
    9010:	429a      	cmp	r2, r3
    9012:	ea4f 0b84 	mov.w	fp, r4, lsl #2
    9016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
    901a:	fbb2 f6f3 	udiv	r6, r2, r3
    901e:	d331      	bcc.n	9084 <quorem+0x9e>
    9020:	f04f 0e00 	mov.w	lr, #0
    9024:	4640      	mov	r0, r8
    9026:	46ac      	mov	ip, r5
    9028:	46f2      	mov	sl, lr
    902a:	f850 2b04 	ldr.w	r2, [r0], #4
    902e:	b293      	uxth	r3, r2
    9030:	fb06 e303 	mla	r3, r6, r3, lr
    9034:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    9038:	b29b      	uxth	r3, r3
    903a:	ebaa 0303 	sub.w	r3, sl, r3
    903e:	f8dc a000 	ldr.w	sl, [ip]
    9042:	0c12      	lsrs	r2, r2, #16
    9044:	fa13 f38a 	uxtah	r3, r3, sl
    9048:	fb06 e202 	mla	r2, r6, r2, lr
    904c:	9300      	str	r3, [sp, #0]
    904e:	9b00      	ldr	r3, [sp, #0]
    9050:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    9054:	b292      	uxth	r2, r2
    9056:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
    905a:	eb02 4223 	add.w	r2, r2, r3, asr #16
    905e:	f8bd 3000 	ldrh.w	r3, [sp]
    9062:	4581      	cmp	r9, r0
    9064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    9068:	f84c 3b04 	str.w	r3, [ip], #4
    906c:	ea4f 4a22 	mov.w	sl, r2, asr #16
    9070:	d2db      	bcs.n	902a <quorem+0x44>
    9072:	f855 300b 	ldr.w	r3, [r5, fp]
    9076:	b92b      	cbnz	r3, 9084 <quorem+0x9e>
    9078:	9b01      	ldr	r3, [sp, #4]
    907a:	3b04      	subs	r3, #4
    907c:	429d      	cmp	r5, r3
    907e:	461a      	mov	r2, r3
    9080:	d32e      	bcc.n	90e0 <quorem+0xfa>
    9082:	613c      	str	r4, [r7, #16]
    9084:	4638      	mov	r0, r7
    9086:	f000 f8e2 	bl	924e <__mcmp>
    908a:	2800      	cmp	r0, #0
    908c:	db24      	blt.n	90d8 <quorem+0xf2>
    908e:	3601      	adds	r6, #1
    9090:	4628      	mov	r0, r5
    9092:	f04f 0c00 	mov.w	ip, #0
    9096:	f858 2b04 	ldr.w	r2, [r8], #4
    909a:	f8d0 e000 	ldr.w	lr, [r0]
    909e:	b293      	uxth	r3, r2
    90a0:	ebac 0303 	sub.w	r3, ip, r3
    90a4:	0c12      	lsrs	r2, r2, #16
    90a6:	fa13 f38e 	uxtah	r3, r3, lr
    90aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
    90ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
    90b2:	b29b      	uxth	r3, r3
    90b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    90b8:	45c1      	cmp	r9, r8
    90ba:	f840 3b04 	str.w	r3, [r0], #4
    90be:	ea4f 4c22 	mov.w	ip, r2, asr #16
    90c2:	d2e8      	bcs.n	9096 <quorem+0xb0>
    90c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    90c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    90cc:	b922      	cbnz	r2, 90d8 <quorem+0xf2>
    90ce:	3b04      	subs	r3, #4
    90d0:	429d      	cmp	r5, r3
    90d2:	461a      	mov	r2, r3
    90d4:	d30a      	bcc.n	90ec <quorem+0x106>
    90d6:	613c      	str	r4, [r7, #16]
    90d8:	4630      	mov	r0, r6
    90da:	b003      	add	sp, #12
    90dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90e0:	6812      	ldr	r2, [r2, #0]
    90e2:	3b04      	subs	r3, #4
    90e4:	2a00      	cmp	r2, #0
    90e6:	d1cc      	bne.n	9082 <quorem+0x9c>
    90e8:	3c01      	subs	r4, #1
    90ea:	e7c7      	b.n	907c <quorem+0x96>
    90ec:	6812      	ldr	r2, [r2, #0]
    90ee:	3b04      	subs	r3, #4
    90f0:	2a00      	cmp	r2, #0
    90f2:	d1f0      	bne.n	90d6 <quorem+0xf0>
    90f4:	3c01      	subs	r4, #1
    90f6:	e7eb      	b.n	90d0 <quorem+0xea>
    90f8:	2000      	movs	r0, #0
    90fa:	e7ee      	b.n	90da <quorem+0xf4>

000090fc <__sfmoreglue>:
    90fc:	b570      	push	{r4, r5, r6, lr}
    90fe:	2268      	movs	r2, #104	; 0x68
    9100:	1e4d      	subs	r5, r1, #1
    9102:	4355      	muls	r5, r2
    9104:	460e      	mov	r6, r1
    9106:	f105 0174 	add.w	r1, r5, #116	; 0x74
    910a:	f7fd f867 	bl	61dc <_malloc_r>
    910e:	4604      	mov	r4, r0
    9110:	b140      	cbz	r0, 9124 <__sfmoreglue+0x28>
    9112:	2100      	movs	r1, #0
    9114:	e9c0 1600 	strd	r1, r6, [r0]
    9118:	300c      	adds	r0, #12
    911a:	60a0      	str	r0, [r4, #8]
    911c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    9120:	f7ff fdcf 	bl	8cc2 <memset>
    9124:	4620      	mov	r0, r4
    9126:	bd70      	pop	{r4, r5, r6, pc}

00009128 <_fwalk_reent>:
    9128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    912c:	4606      	mov	r6, r0
    912e:	4688      	mov	r8, r1
    9130:	f100 0448 	add.w	r4, r0, #72	; 0x48
    9134:	2700      	movs	r7, #0
    9136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    913a:	f1b9 0901 	subs.w	r9, r9, #1
    913e:	d505      	bpl.n	914c <_fwalk_reent+0x24>
    9140:	6824      	ldr	r4, [r4, #0]
    9142:	2c00      	cmp	r4, #0
    9144:	d1f7      	bne.n	9136 <_fwalk_reent+0xe>
    9146:	4638      	mov	r0, r7
    9148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    914c:	89ab      	ldrh	r3, [r5, #12]
    914e:	2b01      	cmp	r3, #1
    9150:	d907      	bls.n	9162 <_fwalk_reent+0x3a>
    9152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    9156:	3301      	adds	r3, #1
    9158:	d003      	beq.n	9162 <_fwalk_reent+0x3a>
    915a:	4629      	mov	r1, r5
    915c:	4630      	mov	r0, r6
    915e:	47c0      	blx	r8
    9160:	4307      	orrs	r7, r0
    9162:	3568      	adds	r5, #104	; 0x68
    9164:	e7e9      	b.n	913a <_fwalk_reent+0x12>

00009166 <__swhatbuf_r>:
    9166:	b570      	push	{r4, r5, r6, lr}
    9168:	460e      	mov	r6, r1
    916a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    916e:	2900      	cmp	r1, #0
    9170:	b096      	sub	sp, #88	; 0x58
    9172:	4614      	mov	r4, r2
    9174:	461d      	mov	r5, r3
    9176:	da08      	bge.n	918a <__swhatbuf_r+0x24>
    9178:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
    917c:	2200      	movs	r2, #0
    917e:	602a      	str	r2, [r5, #0]
    9180:	061a      	lsls	r2, r3, #24
    9182:	d410      	bmi.n	91a6 <__swhatbuf_r+0x40>
    9184:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9188:	e00e      	b.n	91a8 <__swhatbuf_r+0x42>
    918a:	466a      	mov	r2, sp
    918c:	f7fe fbe2 	bl	7954 <_fstat_r>
    9190:	2800      	cmp	r0, #0
    9192:	dbf1      	blt.n	9178 <__swhatbuf_r+0x12>
    9194:	9a01      	ldr	r2, [sp, #4]
    9196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    919a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    919e:	425a      	negs	r2, r3
    91a0:	415a      	adcs	r2, r3
    91a2:	602a      	str	r2, [r5, #0]
    91a4:	e7ee      	b.n	9184 <__swhatbuf_r+0x1e>
    91a6:	2340      	movs	r3, #64	; 0x40
    91a8:	2000      	movs	r0, #0
    91aa:	6023      	str	r3, [r4, #0]
    91ac:	b016      	add	sp, #88	; 0x58
    91ae:	bd70      	pop	{r4, r5, r6, pc}

000091b0 <__hi0bits>:
    91b0:	0c03      	lsrs	r3, r0, #16
    91b2:	041b      	lsls	r3, r3, #16
    91b4:	b9d3      	cbnz	r3, 91ec <__hi0bits+0x3c>
    91b6:	0400      	lsls	r0, r0, #16
    91b8:	2310      	movs	r3, #16
    91ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    91be:	bf04      	itt	eq
    91c0:	0200      	lsleq	r0, r0, #8
    91c2:	3308      	addeq	r3, #8
    91c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    91c8:	bf04      	itt	eq
    91ca:	0100      	lsleq	r0, r0, #4
    91cc:	3304      	addeq	r3, #4
    91ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    91d2:	bf04      	itt	eq
    91d4:	0080      	lsleq	r0, r0, #2
    91d6:	3302      	addeq	r3, #2
    91d8:	2800      	cmp	r0, #0
    91da:	db05      	blt.n	91e8 <__hi0bits+0x38>
    91dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    91e0:	f103 0301 	add.w	r3, r3, #1
    91e4:	bf08      	it	eq
    91e6:	2320      	moveq	r3, #32
    91e8:	4618      	mov	r0, r3
    91ea:	4770      	bx	lr
    91ec:	2300      	movs	r3, #0
    91ee:	e7e4      	b.n	91ba <__hi0bits+0xa>

000091f0 <__lo0bits>:
    91f0:	6803      	ldr	r3, [r0, #0]
    91f2:	f013 0207 	ands.w	r2, r3, #7
    91f6:	4601      	mov	r1, r0
    91f8:	d00b      	beq.n	9212 <__lo0bits+0x22>
    91fa:	07da      	lsls	r2, r3, #31
    91fc:	d423      	bmi.n	9246 <__lo0bits+0x56>
    91fe:	0798      	lsls	r0, r3, #30
    9200:	bf49      	itett	mi
    9202:	085b      	lsrmi	r3, r3, #1
    9204:	089b      	lsrpl	r3, r3, #2
    9206:	2001      	movmi	r0, #1
    9208:	600b      	strmi	r3, [r1, #0]
    920a:	bf5c      	itt	pl
    920c:	600b      	strpl	r3, [r1, #0]
    920e:	2002      	movpl	r0, #2
    9210:	4770      	bx	lr
    9212:	b298      	uxth	r0, r3
    9214:	b9a8      	cbnz	r0, 9242 <__lo0bits+0x52>
    9216:	0c1b      	lsrs	r3, r3, #16
    9218:	2010      	movs	r0, #16
    921a:	b2da      	uxtb	r2, r3
    921c:	b90a      	cbnz	r2, 9222 <__lo0bits+0x32>
    921e:	3008      	adds	r0, #8
    9220:	0a1b      	lsrs	r3, r3, #8
    9222:	071a      	lsls	r2, r3, #28
    9224:	bf04      	itt	eq
    9226:	091b      	lsreq	r3, r3, #4
    9228:	3004      	addeq	r0, #4
    922a:	079a      	lsls	r2, r3, #30
    922c:	bf04      	itt	eq
    922e:	089b      	lsreq	r3, r3, #2
    9230:	3002      	addeq	r0, #2
    9232:	07da      	lsls	r2, r3, #31
    9234:	d403      	bmi.n	923e <__lo0bits+0x4e>
    9236:	085b      	lsrs	r3, r3, #1
    9238:	f100 0001 	add.w	r0, r0, #1
    923c:	d005      	beq.n	924a <__lo0bits+0x5a>
    923e:	600b      	str	r3, [r1, #0]
    9240:	4770      	bx	lr
    9242:	4610      	mov	r0, r2
    9244:	e7e9      	b.n	921a <__lo0bits+0x2a>
    9246:	2000      	movs	r0, #0
    9248:	4770      	bx	lr
    924a:	2020      	movs	r0, #32
    924c:	4770      	bx	lr

0000924e <__mcmp>:
    924e:	b530      	push	{r4, r5, lr}
    9250:	6902      	ldr	r2, [r0, #16]
    9252:	690c      	ldr	r4, [r1, #16]
    9254:	1b12      	subs	r2, r2, r4
    9256:	d10e      	bne.n	9276 <__mcmp+0x28>
    9258:	f100 0314 	add.w	r3, r0, #20
    925c:	3114      	adds	r1, #20
    925e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    9262:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    9266:	f850 5d04 	ldr.w	r5, [r0, #-4]!
    926a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    926e:	42a5      	cmp	r5, r4
    9270:	d003      	beq.n	927a <__mcmp+0x2c>
    9272:	d305      	bcc.n	9280 <__mcmp+0x32>
    9274:	2201      	movs	r2, #1
    9276:	4610      	mov	r0, r2
    9278:	bd30      	pop	{r4, r5, pc}
    927a:	4283      	cmp	r3, r0
    927c:	d3f3      	bcc.n	9266 <__mcmp+0x18>
    927e:	e7fa      	b.n	9276 <__mcmp+0x28>
    9280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9284:	e7f7      	b.n	9276 <__mcmp+0x28>

00009286 <__sread>:
    9286:	b510      	push	{r4, lr}
    9288:	460c      	mov	r4, r1
    928a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    928e:	f7fe fb95 	bl	79bc <_read_r>
    9292:	2800      	cmp	r0, #0
    9294:	bfab      	itete	ge
    9296:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    9298:	89a3      	ldrhlt	r3, [r4, #12]
    929a:	181b      	addge	r3, r3, r0
    929c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    92a0:	bfac      	ite	ge
    92a2:	6563      	strge	r3, [r4, #84]	; 0x54
    92a4:	81a3      	strhlt	r3, [r4, #12]
    92a6:	bd10      	pop	{r4, pc}

000092a8 <__swrite>:
    92a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92ac:	461f      	mov	r7, r3
    92ae:	898b      	ldrh	r3, [r1, #12]
    92b0:	05db      	lsls	r3, r3, #23
    92b2:	4605      	mov	r5, r0
    92b4:	460c      	mov	r4, r1
    92b6:	4616      	mov	r6, r2
    92b8:	d505      	bpl.n	92c6 <__swrite+0x1e>
    92ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    92be:	2302      	movs	r3, #2
    92c0:	2200      	movs	r2, #0
    92c2:	f7fe fb69 	bl	7998 <_lseek_r>
    92c6:	89a3      	ldrh	r3, [r4, #12]
    92c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    92cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    92d0:	81a3      	strh	r3, [r4, #12]
    92d2:	4632      	mov	r2, r6
    92d4:	463b      	mov	r3, r7
    92d6:	4628      	mov	r0, r5
    92d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    92dc:	f7fe bb18 	b.w	7910 <_write_r>

000092e0 <__sseek>:
    92e0:	b510      	push	{r4, lr}
    92e2:	460c      	mov	r4, r1
    92e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    92e8:	f7fe fb56 	bl	7998 <_lseek_r>
    92ec:	1c43      	adds	r3, r0, #1
    92ee:	89a3      	ldrh	r3, [r4, #12]
    92f0:	bf15      	itete	ne
    92f2:	6560      	strne	r0, [r4, #84]	; 0x54
    92f4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    92f8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    92fc:	81a3      	strheq	r3, [r4, #12]
    92fe:	bf18      	it	ne
    9300:	81a3      	strhne	r3, [r4, #12]
    9302:	bd10      	pop	{r4, pc}

00009304 <__sclose>:
    9304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9308:	f7fe bb14 	b.w	7934 <_close_r>

0000930c <__ascii_mbtowc>:
    930c:	b082      	sub	sp, #8
    930e:	b901      	cbnz	r1, 9312 <__ascii_mbtowc+0x6>
    9310:	a901      	add	r1, sp, #4
    9312:	b142      	cbz	r2, 9326 <__ascii_mbtowc+0x1a>
    9314:	b14b      	cbz	r3, 932a <__ascii_mbtowc+0x1e>
    9316:	7813      	ldrb	r3, [r2, #0]
    9318:	600b      	str	r3, [r1, #0]
    931a:	7812      	ldrb	r2, [r2, #0]
    931c:	1e10      	subs	r0, r2, #0
    931e:	bf18      	it	ne
    9320:	2001      	movne	r0, #1
    9322:	b002      	add	sp, #8
    9324:	4770      	bx	lr
    9326:	4610      	mov	r0, r2
    9328:	e7fb      	b.n	9322 <__ascii_mbtowc+0x16>
    932a:	f06f 0001 	mvn.w	r0, #1
    932e:	e7f8      	b.n	9322 <__ascii_mbtowc+0x16>

00009330 <__ascii_wctomb>:
    9330:	b149      	cbz	r1, 9346 <__ascii_wctomb+0x16>
    9332:	2aff      	cmp	r2, #255	; 0xff
    9334:	bf85      	ittet	hi
    9336:	238a      	movhi	r3, #138	; 0x8a
    9338:	6003      	strhi	r3, [r0, #0]
    933a:	700a      	strbls	r2, [r1, #0]
    933c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    9340:	bf98      	it	ls
    9342:	2001      	movls	r0, #1
    9344:	4770      	bx	lr
    9346:	4608      	mov	r0, r1
    9348:	4770      	bx	lr
	...

0000934c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    934c:	f7fb b98a 	b.w	4664 <SystemInit>
