
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_table>:
    c200:	48 26 00 20 d1 e1 00 00 59 4e 01 00 a5 e1 00 00     H&. ....YN......
    c210:	a5 e1 00 00 a5 e1 00 00 a5 e1 00 00 a5 e1 00 00     ................
	...
    c22c:	9d db 00 00 a5 e1 00 00 00 00 00 00 45 db 00 00     ............E...
    c23c:	3d f2 00 00                                         =...

0000c240 <_irq_vector_table>:
    c240:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c250:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c260:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c270:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c280:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c290:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c2a0:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c2b0:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c2c0:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c2d0:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c2e0:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c2f0:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c300:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c310:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c320:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c330:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
    c340:	1d dc 00 00                                         ....

0000c344 <_vector_end>:
	...

0000c400 <m_firmware_info>:
    c400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
    c410:	00 be 00 00 01 00 00 00 00 c2 00 00 00 c2 00 00     ................
    c420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0000c43c <__aeabi_uldivmod>:
    c43c:	b953      	cbnz	r3, c454 <__aeabi_uldivmod+0x18>
    c43e:	b94a      	cbnz	r2, c454 <__aeabi_uldivmod+0x18>
    c440:	2900      	cmp	r1, #0
    c442:	bf08      	it	eq
    c444:	2800      	cmpeq	r0, #0
    c446:	bf1c      	itt	ne
    c448:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c44c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c450:	f000 b980 	b.w	c754 <__aeabi_idiv0>
    c454:	f1ad 0c08 	sub.w	ip, sp, #8
    c458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c45c:	f000 f806 	bl	c46c <__udivmoddi4>
    c460:	f8dd e004 	ldr.w	lr, [sp, #4]
    c464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c468:	b004      	add	sp, #16
    c46a:	4770      	bx	lr

0000c46c <__udivmoddi4>:
    c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c470:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c472:	460d      	mov	r5, r1
    c474:	4604      	mov	r4, r0
    c476:	460f      	mov	r7, r1
    c478:	2b00      	cmp	r3, #0
    c47a:	d147      	bne.n	c50c <__udivmoddi4+0xa0>
    c47c:	428a      	cmp	r2, r1
    c47e:	4694      	mov	ip, r2
    c480:	d95f      	bls.n	c542 <__udivmoddi4+0xd6>
    c482:	fab2 f382 	clz	r3, r2
    c486:	b143      	cbz	r3, c49a <__udivmoddi4+0x2e>
    c488:	f1c3 0120 	rsb	r1, r3, #32
    c48c:	409f      	lsls	r7, r3
    c48e:	fa02 fc03 	lsl.w	ip, r2, r3
    c492:	409c      	lsls	r4, r3
    c494:	fa20 f101 	lsr.w	r1, r0, r1
    c498:	430f      	orrs	r7, r1
    c49a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    c49e:	fa1f fe8c 	uxth.w	lr, ip
    c4a2:	0c22      	lsrs	r2, r4, #16
    c4a4:	fbb7 f1f5 	udiv	r1, r7, r5
    c4a8:	fb05 7711 	mls	r7, r5, r1, r7
    c4ac:	fb01 f00e 	mul.w	r0, r1, lr
    c4b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    c4b4:	4290      	cmp	r0, r2
    c4b6:	d908      	bls.n	c4ca <__udivmoddi4+0x5e>
    c4b8:	eb1c 0202 	adds.w	r2, ip, r2
    c4bc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
    c4c0:	d202      	bcs.n	c4c8 <__udivmoddi4+0x5c>
    c4c2:	4290      	cmp	r0, r2
    c4c4:	f200 8134 	bhi.w	c730 <__udivmoddi4+0x2c4>
    c4c8:	4639      	mov	r1, r7
    c4ca:	1a12      	subs	r2, r2, r0
    c4cc:	b2a4      	uxth	r4, r4
    c4ce:	fbb2 f0f5 	udiv	r0, r2, r5
    c4d2:	fb05 2210 	mls	r2, r5, r0, r2
    c4d6:	fb00 fe0e 	mul.w	lr, r0, lr
    c4da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    c4de:	45a6      	cmp	lr, r4
    c4e0:	d908      	bls.n	c4f4 <__udivmoddi4+0x88>
    c4e2:	eb1c 0404 	adds.w	r4, ip, r4
    c4e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    c4ea:	d202      	bcs.n	c4f2 <__udivmoddi4+0x86>
    c4ec:	45a6      	cmp	lr, r4
    c4ee:	f200 8119 	bhi.w	c724 <__udivmoddi4+0x2b8>
    c4f2:	4610      	mov	r0, r2
    c4f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    c4f8:	eba4 040e 	sub.w	r4, r4, lr
    c4fc:	2100      	movs	r1, #0
    c4fe:	b11e      	cbz	r6, c508 <__udivmoddi4+0x9c>
    c500:	40dc      	lsrs	r4, r3
    c502:	2300      	movs	r3, #0
    c504:	e9c6 4300 	strd	r4, r3, [r6]
    c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c50c:	428b      	cmp	r3, r1
    c50e:	d908      	bls.n	c522 <__udivmoddi4+0xb6>
    c510:	2e00      	cmp	r6, #0
    c512:	f000 80fb 	beq.w	c70c <__udivmoddi4+0x2a0>
    c516:	2100      	movs	r1, #0
    c518:	e9c6 0500 	strd	r0, r5, [r6]
    c51c:	4608      	mov	r0, r1
    c51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c522:	fab3 f183 	clz	r1, r3
    c526:	2900      	cmp	r1, #0
    c528:	d14b      	bne.n	c5c2 <__udivmoddi4+0x156>
    c52a:	42ab      	cmp	r3, r5
    c52c:	f0c0 80f1 	bcc.w	c712 <__udivmoddi4+0x2a6>
    c530:	4282      	cmp	r2, r0
    c532:	f240 80ee 	bls.w	c712 <__udivmoddi4+0x2a6>
    c536:	4608      	mov	r0, r1
    c538:	2e00      	cmp	r6, #0
    c53a:	d0e5      	beq.n	c508 <__udivmoddi4+0x9c>
    c53c:	e9c6 4700 	strd	r4, r7, [r6]
    c540:	e7e2      	b.n	c508 <__udivmoddi4+0x9c>
    c542:	b902      	cbnz	r2, c546 <__udivmoddi4+0xda>
    c544:	deff      	udf	#255	; 0xff
    c546:	fab2 f382 	clz	r3, r2
    c54a:	2b00      	cmp	r3, #0
    c54c:	f040 809d 	bne.w	c68a <__udivmoddi4+0x21e>
    c550:	1a8d      	subs	r5, r1, r2
    c552:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    c556:	b297      	uxth	r7, r2
    c558:	2101      	movs	r1, #1
    c55a:	fbb5 f2fe 	udiv	r2, r5, lr
    c55e:	fb0e 5012 	mls	r0, lr, r2, r5
    c562:	0c25      	lsrs	r5, r4, #16
    c564:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    c568:	fb07 f002 	mul.w	r0, r7, r2
    c56c:	42a8      	cmp	r0, r5
    c56e:	d90f      	bls.n	c590 <__udivmoddi4+0x124>
    c570:	eb1c 0505 	adds.w	r5, ip, r5
    c574:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
    c578:	bf2c      	ite	cs
    c57a:	f04f 0901 	movcs.w	r9, #1
    c57e:	f04f 0900 	movcc.w	r9, #0
    c582:	42a8      	cmp	r0, r5
    c584:	d903      	bls.n	c58e <__udivmoddi4+0x122>
    c586:	f1b9 0f00 	cmp.w	r9, #0
    c58a:	f000 80ce 	beq.w	c72a <__udivmoddi4+0x2be>
    c58e:	4642      	mov	r2, r8
    c590:	1a2d      	subs	r5, r5, r0
    c592:	b2a4      	uxth	r4, r4
    c594:	fbb5 f0fe 	udiv	r0, r5, lr
    c598:	fb0e 5510 	mls	r5, lr, r0, r5
    c59c:	fb00 f707 	mul.w	r7, r0, r7
    c5a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    c5a4:	42a7      	cmp	r7, r4
    c5a6:	d908      	bls.n	c5ba <__udivmoddi4+0x14e>
    c5a8:	eb1c 0404 	adds.w	r4, ip, r4
    c5ac:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    c5b0:	d202      	bcs.n	c5b8 <__udivmoddi4+0x14c>
    c5b2:	42a7      	cmp	r7, r4
    c5b4:	f200 80b3 	bhi.w	c71e <__udivmoddi4+0x2b2>
    c5b8:	4628      	mov	r0, r5
    c5ba:	1be4      	subs	r4, r4, r7
    c5bc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    c5c0:	e79d      	b.n	c4fe <__udivmoddi4+0x92>
    c5c2:	f1c1 0720 	rsb	r7, r1, #32
    c5c6:	408b      	lsls	r3, r1
    c5c8:	fa05 f401 	lsl.w	r4, r5, r1
    c5cc:	fa22 fc07 	lsr.w	ip, r2, r7
    c5d0:	40fd      	lsrs	r5, r7
    c5d2:	408a      	lsls	r2, r1
    c5d4:	ea4c 0c03 	orr.w	ip, ip, r3
    c5d8:	fa20 f307 	lsr.w	r3, r0, r7
    c5dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    c5e0:	431c      	orrs	r4, r3
    c5e2:	fa1f fe8c 	uxth.w	lr, ip
    c5e6:	fa00 f301 	lsl.w	r3, r0, r1
    c5ea:	0c20      	lsrs	r0, r4, #16
    c5ec:	fbb5 f8f9 	udiv	r8, r5, r9
    c5f0:	fb09 5518 	mls	r5, r9, r8, r5
    c5f4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    c5f8:	fb08 f00e 	mul.w	r0, r8, lr
    c5fc:	42a8      	cmp	r0, r5
    c5fe:	d90f      	bls.n	c620 <__udivmoddi4+0x1b4>
    c600:	eb1c 0505 	adds.w	r5, ip, r5
    c604:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    c608:	bf2c      	ite	cs
    c60a:	f04f 0b01 	movcs.w	fp, #1
    c60e:	f04f 0b00 	movcc.w	fp, #0
    c612:	42a8      	cmp	r0, r5
    c614:	d903      	bls.n	c61e <__udivmoddi4+0x1b2>
    c616:	f1bb 0f00 	cmp.w	fp, #0
    c61a:	f000 808c 	beq.w	c736 <__udivmoddi4+0x2ca>
    c61e:	46d0      	mov	r8, sl
    c620:	1a2d      	subs	r5, r5, r0
    c622:	b2a4      	uxth	r4, r4
    c624:	fbb5 f0f9 	udiv	r0, r5, r9
    c628:	fb09 5510 	mls	r5, r9, r0, r5
    c62c:	fb00 fe0e 	mul.w	lr, r0, lr
    c630:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    c634:	45ae      	cmp	lr, r5
    c636:	d907      	bls.n	c648 <__udivmoddi4+0x1dc>
    c638:	eb1c 0505 	adds.w	r5, ip, r5
    c63c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
    c640:	d201      	bcs.n	c646 <__udivmoddi4+0x1da>
    c642:	45ae      	cmp	lr, r5
    c644:	d87e      	bhi.n	c744 <__udivmoddi4+0x2d8>
    c646:	4620      	mov	r0, r4
    c648:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    c64c:	eba5 050e 	sub.w	r5, r5, lr
    c650:	fba0 9802 	umull	r9, r8, r0, r2
    c654:	4545      	cmp	r5, r8
    c656:	464c      	mov	r4, r9
    c658:	46c6      	mov	lr, r8
    c65a:	d302      	bcc.n	c662 <__udivmoddi4+0x1f6>
    c65c:	d106      	bne.n	c66c <__udivmoddi4+0x200>
    c65e:	454b      	cmp	r3, r9
    c660:	d204      	bcs.n	c66c <__udivmoddi4+0x200>
    c662:	3801      	subs	r0, #1
    c664:	ebb9 0402 	subs.w	r4, r9, r2
    c668:	eb68 0e0c 	sbc.w	lr, r8, ip
    c66c:	2e00      	cmp	r6, #0
    c66e:	d06f      	beq.n	c750 <__udivmoddi4+0x2e4>
    c670:	1b1a      	subs	r2, r3, r4
    c672:	eb65 050e 	sbc.w	r5, r5, lr
    c676:	fa22 f301 	lsr.w	r3, r2, r1
    c67a:	fa05 f707 	lsl.w	r7, r5, r7
    c67e:	40cd      	lsrs	r5, r1
    c680:	2100      	movs	r1, #0
    c682:	431f      	orrs	r7, r3
    c684:	e9c6 7500 	strd	r7, r5, [r6]
    c688:	e73e      	b.n	c508 <__udivmoddi4+0x9c>
    c68a:	fa02 fc03 	lsl.w	ip, r2, r3
    c68e:	f1c3 0020 	rsb	r0, r3, #32
    c692:	fa01 f203 	lsl.w	r2, r1, r3
    c696:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    c69a:	40c1      	lsrs	r1, r0
    c69c:	fa24 f500 	lsr.w	r5, r4, r0
    c6a0:	fa1f f78c 	uxth.w	r7, ip
    c6a4:	409c      	lsls	r4, r3
    c6a6:	4315      	orrs	r5, r2
    c6a8:	fbb1 f0fe 	udiv	r0, r1, lr
    c6ac:	0c2a      	lsrs	r2, r5, #16
    c6ae:	fb0e 1110 	mls	r1, lr, r0, r1
    c6b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    c6b6:	fb00 f107 	mul.w	r1, r0, r7
    c6ba:	4291      	cmp	r1, r2
    c6bc:	d90e      	bls.n	c6dc <__udivmoddi4+0x270>
    c6be:	eb1c 0202 	adds.w	r2, ip, r2
    c6c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    c6c6:	bf2c      	ite	cs
    c6c8:	f04f 0901 	movcs.w	r9, #1
    c6cc:	f04f 0900 	movcc.w	r9, #0
    c6d0:	4291      	cmp	r1, r2
    c6d2:	d902      	bls.n	c6da <__udivmoddi4+0x26e>
    c6d4:	f1b9 0f00 	cmp.w	r9, #0
    c6d8:	d031      	beq.n	c73e <__udivmoddi4+0x2d2>
    c6da:	4640      	mov	r0, r8
    c6dc:	1a52      	subs	r2, r2, r1
    c6de:	b2ad      	uxth	r5, r5
    c6e0:	fbb2 f1fe 	udiv	r1, r2, lr
    c6e4:	fb0e 2211 	mls	r2, lr, r1, r2
    c6e8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    c6ec:	fb01 f207 	mul.w	r2, r1, r7
    c6f0:	42aa      	cmp	r2, r5
    c6f2:	d907      	bls.n	c704 <__udivmoddi4+0x298>
    c6f4:	eb1c 0505 	adds.w	r5, ip, r5
    c6f8:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    c6fc:	d201      	bcs.n	c702 <__udivmoddi4+0x296>
    c6fe:	42aa      	cmp	r2, r5
    c700:	d823      	bhi.n	c74a <__udivmoddi4+0x2de>
    c702:	4641      	mov	r1, r8
    c704:	1aad      	subs	r5, r5, r2
    c706:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c70a:	e726      	b.n	c55a <__udivmoddi4+0xee>
    c70c:	4631      	mov	r1, r6
    c70e:	4630      	mov	r0, r6
    c710:	e6fa      	b.n	c508 <__udivmoddi4+0x9c>
    c712:	1a84      	subs	r4, r0, r2
    c714:	eb65 0303 	sbc.w	r3, r5, r3
    c718:	2001      	movs	r0, #1
    c71a:	461f      	mov	r7, r3
    c71c:	e70c      	b.n	c538 <__udivmoddi4+0xcc>
    c71e:	4464      	add	r4, ip
    c720:	3802      	subs	r0, #2
    c722:	e74a      	b.n	c5ba <__udivmoddi4+0x14e>
    c724:	4464      	add	r4, ip
    c726:	3802      	subs	r0, #2
    c728:	e6e4      	b.n	c4f4 <__udivmoddi4+0x88>
    c72a:	3a02      	subs	r2, #2
    c72c:	4465      	add	r5, ip
    c72e:	e72f      	b.n	c590 <__udivmoddi4+0x124>
    c730:	3902      	subs	r1, #2
    c732:	4462      	add	r2, ip
    c734:	e6c9      	b.n	c4ca <__udivmoddi4+0x5e>
    c736:	f1a8 0802 	sub.w	r8, r8, #2
    c73a:	4465      	add	r5, ip
    c73c:	e770      	b.n	c620 <__udivmoddi4+0x1b4>
    c73e:	3802      	subs	r0, #2
    c740:	4462      	add	r2, ip
    c742:	e7cb      	b.n	c6dc <__udivmoddi4+0x270>
    c744:	3802      	subs	r0, #2
    c746:	4465      	add	r5, ip
    c748:	e77e      	b.n	c648 <__udivmoddi4+0x1dc>
    c74a:	3902      	subs	r1, #2
    c74c:	4465      	add	r5, ip
    c74e:	e7d9      	b.n	c704 <__udivmoddi4+0x298>
    c750:	4631      	mov	r1, r6
    c752:	e6d9      	b.n	c508 <__udivmoddi4+0x9c>

0000c754 <__aeabi_idiv0>:
    c754:	4770      	bx	lr
    c756:	bf00      	nop

0000c758 <__gnu_cmse_nonsecure_call>:
    c758:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
    c75c:	4627      	mov	r7, r4
    c75e:	46a0      	mov	r8, r4
    c760:	46a1      	mov	r9, r4
    c762:	46a2      	mov	sl, r4
    c764:	46a3      	mov	fp, r4
    c766:	46a4      	mov	ip, r4
    c768:	b0a2      	sub	sp, #136	; 0x88
    c76a:	ec2d 0a00 	vlstm	sp
    c76e:	f384 8800 	msr	CPSR_f, r4
    c772:	4625      	mov	r5, r4
    c774:	4626      	mov	r6, r4
    c776:	47a4      	blxns	r4
    c778:	f3ef 8514 	mrs	r5, CONTROL
    c77c:	f015 0f08 	tst.w	r5, #8
    c780:	bf18      	it	ne
    c782:	eeb0 0a40 	vmovne.f32	s0, s0
    c786:	ec3d 0a00 	vlldm	sp
    c78a:	b022      	add	sp, #136	; 0x88
    c78c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0000c790 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c790:	680b      	ldr	r3, [r1, #0]
    c792:	3301      	adds	r3, #1
    c794:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c796:	4b01      	ldr	r3, [pc, #4]	; (c79c <char_out+0xc>)
    c798:	681b      	ldr	r3, [r3, #0]
    c79a:	4718      	bx	r3
    c79c:	20000000 	.word	0x20000000

0000c7a0 <__printk_hook_install>:
	_char_out = fn;
    c7a0:	4b01      	ldr	r3, [pc, #4]	; (c7a8 <__printk_hook_install+0x8>)
    c7a2:	6018      	str	r0, [r3, #0]
}
    c7a4:	4770      	bx	lr
    c7a6:	bf00      	nop
    c7a8:	20000000 	.word	0x20000000

0000c7ac <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    c7ac:	b507      	push	{r0, r1, r2, lr}
    c7ae:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    c7b0:	2100      	movs	r1, #0
{
    c7b2:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    c7b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    c7b6:	4803      	ldr	r0, [pc, #12]	; (c7c4 <vprintk+0x18>)
    c7b8:	a901      	add	r1, sp, #4
    c7ba:	f000 f805 	bl	c7c8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    c7be:	b003      	add	sp, #12
    c7c0:	f85d fb04 	ldr.w	pc, [sp], #4
    c7c4:	0000c791 	.word	0x0000c791

0000c7c8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7cc:	468b      	mov	fp, r1
    c7ce:	4692      	mov	sl, r2
    c7d0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    c7d2:	2500      	movs	r5, #0
{
    c7d4:	b091      	sub	sp, #68	; 0x44
    c7d6:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    c7d8:	f89a 0000 	ldrb.w	r0, [sl]
    c7dc:	b908      	cbnz	r0, c7e2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    c7de:	4628      	mov	r0, r5
    c7e0:	e35f      	b.n	cea2 <cbvprintf+0x6da>
		if (*fp != '%') {
    c7e2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    c7e4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    c7e8:	d007      	beq.n	c7fa <cbvprintf+0x32>
			OUTC('%');
    c7ea:	4659      	mov	r1, fp
    c7ec:	9b02      	ldr	r3, [sp, #8]
    c7ee:	4798      	blx	r3
    c7f0:	2800      	cmp	r0, #0
    c7f2:	f2c0 8356 	blt.w	cea2 <cbvprintf+0x6da>
    c7f6:	3501      	adds	r5, #1
			break;
    c7f8:	e212      	b.n	cc20 <cbvprintf+0x458>
		} state = {
    c7fa:	2218      	movs	r2, #24
    c7fc:	2100      	movs	r1, #0
    c7fe:	a80a      	add	r0, sp, #40	; 0x28
    c800:	f008 fb93 	bl	14f2a <memset>
	if (*sp == '%') {
    c804:	f89a 3001 	ldrb.w	r3, [sl, #1]
    c808:	2b25      	cmp	r3, #37	; 0x25
    c80a:	d078      	beq.n	c8fe <cbvprintf+0x136>
    c80c:	2200      	movs	r2, #0
    c80e:	4610      	mov	r0, r2
    c810:	4696      	mov	lr, r2
    c812:	4694      	mov	ip, r2
    c814:	4616      	mov	r6, r2
    c816:	4639      	mov	r1, r7
		switch (*sp) {
    c818:	f817 3b01 	ldrb.w	r3, [r7], #1
    c81c:	2b2b      	cmp	r3, #43	; 0x2b
    c81e:	f000 809d 	beq.w	c95c <cbvprintf+0x194>
    c822:	f200 8094 	bhi.w	c94e <cbvprintf+0x186>
    c826:	2b20      	cmp	r3, #32
    c828:	f000 809b 	beq.w	c962 <cbvprintf+0x19a>
    c82c:	2b23      	cmp	r3, #35	; 0x23
    c82e:	f000 809b 	beq.w	c968 <cbvprintf+0x1a0>
    c832:	b12e      	cbz	r6, c840 <cbvprintf+0x78>
    c834:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    c838:	f046 0604 	orr.w	r6, r6, #4
    c83c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    c840:	f1bc 0f00 	cmp.w	ip, #0
    c844:	d005      	beq.n	c852 <cbvprintf+0x8a>
    c846:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    c84a:	f046 0608 	orr.w	r6, r6, #8
    c84e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    c852:	f1be 0f00 	cmp.w	lr, #0
    c856:	d005      	beq.n	c864 <cbvprintf+0x9c>
    c858:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    c85c:	f046 0610 	orr.w	r6, r6, #16
    c860:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    c864:	b128      	cbz	r0, c872 <cbvprintf+0xaa>
    c866:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c86a:	f040 0020 	orr.w	r0, r0, #32
    c86e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c872:	b12a      	cbz	r2, c880 <cbvprintf+0xb8>
    c874:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    c878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c87c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    c880:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    c884:	f002 0044 	and.w	r0, r2, #68	; 0x44
    c888:	2844      	cmp	r0, #68	; 0x44
    c88a:	d103      	bne.n	c894 <cbvprintf+0xcc>
		conv->flag_zero = false;
    c88c:	f36f 1286 	bfc	r2, #6, #1
    c890:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    c894:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    c898:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    c89a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c89e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    c8a2:	d17b      	bne.n	c99c <cbvprintf+0x1d4>
		conv->width_star = true;
    c8a4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    c8a8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    c8aa:	f042 0201 	orr.w	r2, r2, #1
    c8ae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    c8b2:	781a      	ldrb	r2, [r3, #0]
    c8b4:	2a2e      	cmp	r2, #46	; 0x2e
    c8b6:	bf0c      	ite	eq
    c8b8:	2101      	moveq	r1, #1
    c8ba:	2100      	movne	r1, #0
    c8bc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    c8c0:	f361 0241 	bfi	r2, r1, #1, #1
    c8c4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    c8c8:	d174      	bne.n	c9b4 <cbvprintf+0x1ec>
	if (*sp == '*') {
    c8ca:	785a      	ldrb	r2, [r3, #1]
    c8cc:	2a2a      	cmp	r2, #42	; 0x2a
    c8ce:	d06a      	beq.n	c9a6 <cbvprintf+0x1de>
	size_t val = 0;
    c8d0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    c8d2:	260a      	movs	r6, #10
	++sp;
    c8d4:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c8d6:	4618      	mov	r0, r3
    c8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
    c8dc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c8e0:	2f09      	cmp	r7, #9
    c8e2:	f240 808e 	bls.w	ca02 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    c8e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    c8ea:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    c8ec:	f3c2 0040 	ubfx	r0, r2, #1, #1
    c8f0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    c8f4:	f361 0241 	bfi	r2, r1, #1, #1
    c8f8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    c8fc:	e05a      	b.n	c9b4 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    c8fe:	f10a 0702 	add.w	r7, sl, #2
    c902:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    c906:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    c90a:	07d9      	lsls	r1, r3, #31
    c90c:	f140 8149 	bpl.w	cba2 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    c910:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    c914:	f1b9 0f00 	cmp.w	r9, #0
    c918:	da07      	bge.n	c92a <cbvprintf+0x162>
				conv->flag_dash = true;
    c91a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    c91e:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    c922:	f042 0204 	orr.w	r2, r2, #4
    c926:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    c92a:	075a      	lsls	r2, r3, #29
    c92c:	f140 8142 	bpl.w	cbb4 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    c930:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    c934:	f1b8 0f00 	cmp.w	r8, #0
    c938:	f280 8141 	bge.w	cbbe <cbvprintf+0x3f6>
				conv->prec_present = false;
    c93c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    c940:	f36f 0341 	bfc	r3, #1, #1
    c944:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    c948:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    c94c:	e137      	b.n	cbbe <cbvprintf+0x3f6>
		switch (*sp) {
    c94e:	2b2d      	cmp	r3, #45	; 0x2d
    c950:	d00c      	beq.n	c96c <cbvprintf+0x1a4>
    c952:	2b30      	cmp	r3, #48	; 0x30
    c954:	f47f af6d 	bne.w	c832 <cbvprintf+0x6a>
			conv->flag_zero = true;
    c958:	2201      	movs	r2, #1
	} while (loop);
    c95a:	e75c      	b.n	c816 <cbvprintf+0x4e>
			conv->flag_plus = true;
    c95c:	f04f 0c01 	mov.w	ip, #1
    c960:	e759      	b.n	c816 <cbvprintf+0x4e>
			conv->flag_space = true;
    c962:	f04f 0e01 	mov.w	lr, #1
    c966:	e756      	b.n	c816 <cbvprintf+0x4e>
			conv->flag_hash = true;
    c968:	2001      	movs	r0, #1
    c96a:	e754      	b.n	c816 <cbvprintf+0x4e>
		switch (*sp) {
    c96c:	2601      	movs	r6, #1
    c96e:	e752      	b.n	c816 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    c970:	4633      	mov	r3, r6
    c972:	fb0c 0202 	mla	r2, ip, r2, r0
    c976:	3a30      	subs	r2, #48	; 0x30
    c978:	461e      	mov	r6, r3
    c97a:	f816 0b01 	ldrb.w	r0, [r6], #1
    c97e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c982:	2f09      	cmp	r7, #9
    c984:	d9f4      	bls.n	c970 <cbvprintf+0x1a8>
	if (sp != wp) {
    c986:	4299      	cmp	r1, r3
    c988:	d093      	beq.n	c8b2 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    c98a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    c98e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    c990:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    c992:	f362 0141 	bfi	r1, r2, #1, #1
    c996:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    c99a:	e78a      	b.n	c8b2 <cbvprintf+0xea>
    c99c:	460b      	mov	r3, r1
	size_t val = 0;
    c99e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    c9a0:	f04f 0c0a 	mov.w	ip, #10
    c9a4:	e7e8      	b.n	c978 <cbvprintf+0x1b0>
		conv->prec_star = true;
    c9a6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    c9aa:	3302      	adds	r3, #2
		conv->prec_star = true;
    c9ac:	f042 0204 	orr.w	r2, r2, #4
    c9b0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    c9b4:	461f      	mov	r7, r3
    c9b6:	f817 2b01 	ldrb.w	r2, [r7], #1
    c9ba:	2a6c      	cmp	r2, #108	; 0x6c
    c9bc:	d041      	beq.n	ca42 <cbvprintf+0x27a>
    c9be:	d825      	bhi.n	ca0c <cbvprintf+0x244>
    c9c0:	2a68      	cmp	r2, #104	; 0x68
    c9c2:	d02b      	beq.n	ca1c <cbvprintf+0x254>
    c9c4:	2a6a      	cmp	r2, #106	; 0x6a
    c9c6:	d046      	beq.n	ca56 <cbvprintf+0x28e>
    c9c8:	2a4c      	cmp	r2, #76	; 0x4c
    c9ca:	d04c      	beq.n	ca66 <cbvprintf+0x29e>
    c9cc:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    c9ce:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    c9d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    c9d6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    c9d8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    c9dc:	f200 80d9 	bhi.w	cb92 <cbvprintf+0x3ca>
    c9e0:	2a57      	cmp	r2, #87	; 0x57
    c9e2:	d84d      	bhi.n	ca80 <cbvprintf+0x2b8>
    c9e4:	2a41      	cmp	r2, #65	; 0x41
    c9e6:	d003      	beq.n	c9f0 <cbvprintf+0x228>
    c9e8:	3a45      	subs	r2, #69	; 0x45
    c9ea:	2a02      	cmp	r2, #2
    c9ec:	f200 80d1 	bhi.w	cb92 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    c9f0:	2204      	movs	r2, #4
    c9f2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    c9f6:	f362 0302 	bfi	r3, r2, #0, #3
    c9fa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    c9fe:	2301      	movs	r3, #1
			break;
    ca00:	e09e      	b.n	cb40 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    ca02:	fb06 2101 	mla	r1, r6, r1, r2
    ca06:	4603      	mov	r3, r0
    ca08:	3930      	subs	r1, #48	; 0x30
    ca0a:	e764      	b.n	c8d6 <cbvprintf+0x10e>
	switch (*sp) {
    ca0c:	2a74      	cmp	r2, #116	; 0x74
    ca0e:	d026      	beq.n	ca5e <cbvprintf+0x296>
    ca10:	2a7a      	cmp	r2, #122	; 0x7a
    ca12:	d1db      	bne.n	c9cc <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    ca14:	2206      	movs	r2, #6
    ca16:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ca1a:	e00d      	b.n	ca38 <cbvprintf+0x270>
		if (*++sp == 'h') {
    ca1c:	785a      	ldrb	r2, [r3, #1]
    ca1e:	2a68      	cmp	r2, #104	; 0x68
    ca20:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ca24:	d106      	bne.n	ca34 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    ca26:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    ca28:	f361 02c6 	bfi	r2, r1, #3, #4
    ca2c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    ca30:	1c9f      	adds	r7, r3, #2
    ca32:	e7cc      	b.n	c9ce <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    ca34:	4613      	mov	r3, r2
    ca36:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    ca38:	f362 03c6 	bfi	r3, r2, #3, #4
    ca3c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    ca40:	e7c5      	b.n	c9ce <cbvprintf+0x206>
		if (*++sp == 'l') {
    ca42:	785a      	ldrb	r2, [r3, #1]
    ca44:	2a6c      	cmp	r2, #108	; 0x6c
    ca46:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ca4a:	d101      	bne.n	ca50 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    ca4c:	2104      	movs	r1, #4
    ca4e:	e7eb      	b.n	ca28 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    ca50:	4613      	mov	r3, r2
    ca52:	2203      	movs	r2, #3
    ca54:	e7f0      	b.n	ca38 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    ca56:	2205      	movs	r2, #5
    ca58:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ca5c:	e7ec      	b.n	ca38 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    ca5e:	2207      	movs	r2, #7
    ca60:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ca64:	e7e8      	b.n	ca38 <cbvprintf+0x270>
		conv->unsupported = true;
    ca66:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ca6a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    ca6e:	f023 0302 	bic.w	r3, r3, #2
    ca72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    ca76:	f043 0302 	orr.w	r3, r3, #2
    ca7a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    ca7e:	e7a6      	b.n	c9ce <cbvprintf+0x206>
	switch (conv->specifier) {
    ca80:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    ca84:	2920      	cmp	r1, #32
    ca86:	f200 8084 	bhi.w	cb92 <cbvprintf+0x3ca>
    ca8a:	a001      	add	r0, pc, #4	; (adr r0, ca90 <cbvprintf+0x2c8>)
    ca8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    ca90:	0000cb55 	.word	0x0000cb55
    ca94:	0000cb93 	.word	0x0000cb93
    ca98:	0000cb93 	.word	0x0000cb93
    ca9c:	0000cb93 	.word	0x0000cb93
    caa0:	0000cb93 	.word	0x0000cb93
    caa4:	0000cb93 	.word	0x0000cb93
    caa8:	0000cb93 	.word	0x0000cb93
    caac:	0000cb93 	.word	0x0000cb93
    cab0:	0000cb93 	.word	0x0000cb93
    cab4:	0000c9f1 	.word	0x0000c9f1
    cab8:	0000cb93 	.word	0x0000cb93
    cabc:	0000cb55 	.word	0x0000cb55
    cac0:	0000cb15 	.word	0x0000cb15
    cac4:	0000c9f1 	.word	0x0000c9f1
    cac8:	0000c9f1 	.word	0x0000c9f1
    cacc:	0000c9f1 	.word	0x0000c9f1
    cad0:	0000cb93 	.word	0x0000cb93
    cad4:	0000cb15 	.word	0x0000cb15
    cad8:	0000cb93 	.word	0x0000cb93
    cadc:	0000cb93 	.word	0x0000cb93
    cae0:	0000cb93 	.word	0x0000cb93
    cae4:	0000cb93 	.word	0x0000cb93
    cae8:	0000cb5d 	.word	0x0000cb5d
    caec:	0000cb55 	.word	0x0000cb55
    caf0:	0000cb79 	.word	0x0000cb79
    caf4:	0000cb93 	.word	0x0000cb93
    caf8:	0000cb93 	.word	0x0000cb93
    cafc:	0000cb79 	.word	0x0000cb79
    cb00:	0000cb93 	.word	0x0000cb93
    cb04:	0000cb55 	.word	0x0000cb55
    cb08:	0000cb93 	.word	0x0000cb93
    cb0c:	0000cb93 	.word	0x0000cb93
    cb10:	0000cb55 	.word	0x0000cb55
		conv->specifier_cat = SPECIFIER_SINT;
    cb14:	2001      	movs	r0, #1
    cb16:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb1a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    cb1e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb22:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    cb24:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    cb28:	bf02      	ittt	eq
    cb2a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    cb2e:	f041 0101 	orreq.w	r1, r1, #1
    cb32:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    cb36:	2a63      	cmp	r2, #99	; 0x63
    cb38:	d131      	bne.n	cb9e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    cb3a:	3b00      	subs	r3, #0
    cb3c:	bf18      	it	ne
    cb3e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    cb40:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cb44:	f3c2 0140 	ubfx	r1, r2, #1, #1
    cb48:	430b      	orrs	r3, r1
    cb4a:	f363 0241 	bfi	r2, r3, #1, #1
    cb4e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    cb52:	e6d8      	b.n	c906 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    cb54:	2002      	movs	r0, #2
    cb56:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    cb5a:	e7de      	b.n	cb1a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    cb5c:	2103      	movs	r1, #3
    cb5e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb62:	f003 0378 	and.w	r3, r3, #120	; 0x78
    cb66:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    cb6a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb6e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    cb70:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb74:	4143      	adcs	r3, r0
    cb76:	e7e3      	b.n	cb40 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    cb78:	2103      	movs	r1, #3
    cb7a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    cb7e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    cb82:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    cb86:	bf14      	ite	ne
    cb88:	2301      	movne	r3, #1
    cb8a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    cb8c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    cb90:	e7d6      	b.n	cb40 <cbvprintf+0x378>
		conv->invalid = true;
    cb92:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    cb96:	f043 0301 	orr.w	r3, r3, #1
    cb9a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    cb9e:	2300      	movs	r3, #0
    cba0:	e7ce      	b.n	cb40 <cbvprintf+0x378>
		} else if (conv->width_present) {
    cba2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    cba6:	2a00      	cmp	r2, #0
		int width = -1;
    cba8:	bfac      	ite	ge
    cbaa:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
    cbae:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    cbb2:	e6ba      	b.n	c92a <cbvprintf+0x162>
		} else if (conv->prec_present) {
    cbb4:	079b      	lsls	r3, r3, #30
    cbb6:	f57f aec7 	bpl.w	c948 <cbvprintf+0x180>
			precision = conv->prec_value;
    cbba:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    cbbe:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    cbc0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    cbc4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    cbc8:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    cbcc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    cbd0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    cbd2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    cbd6:	d138      	bne.n	cc4a <cbvprintf+0x482>
			switch (length_mod) {
    cbd8:	1ecb      	subs	r3, r1, #3
    cbda:	2b04      	cmp	r3, #4
    cbdc:	d822      	bhi.n	cc24 <cbvprintf+0x45c>
    cbde:	e8df f003 	tbb	[pc, r3]
    cbe2:	0903      	.short	0x0903
    cbe4:	2109      	.short	0x2109
    cbe6:	21          	.byte	0x21
    cbe7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    cbe8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    cbec:	17da      	asrs	r2, r3, #31
    cbee:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    cbf2:	e006      	b.n	cc02 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    cbf4:	3407      	adds	r4, #7
    cbf6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    cbfa:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    cbfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    cc02:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    cc06:	f013 0603 	ands.w	r6, r3, #3
    cc0a:	d056      	beq.n	ccba <cbvprintf+0x4f2>
			OUTS(sp, fp);
    cc0c:	463b      	mov	r3, r7
    cc0e:	4652      	mov	r2, sl
    cc10:	4659      	mov	r1, fp
    cc12:	9802      	ldr	r0, [sp, #8]
    cc14:	f008 f886 	bl	14d24 <outs>
    cc18:	2800      	cmp	r0, #0
    cc1a:	f2c0 8142 	blt.w	cea2 <cbvprintf+0x6da>
    cc1e:	4405      	add	r5, r0
			continue;
    cc20:	46ba      	mov	sl, r7
    cc22:	e5d9      	b.n	c7d8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cc24:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    cc28:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cc2a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    cc2e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    cc32:	d105      	bne.n	cc40 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    cc34:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    cc38:	930a      	str	r3, [sp, #40]	; 0x28
    cc3a:	2300      	movs	r3, #0
    cc3c:	930b      	str	r3, [sp, #44]	; 0x2c
    cc3e:	e7e0      	b.n	cc02 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    cc40:	2902      	cmp	r1, #2
    cc42:	d1de      	bne.n	cc02 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    cc44:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    cc48:	e7d0      	b.n	cbec <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    cc4a:	2b02      	cmp	r3, #2
    cc4c:	d123      	bne.n	cc96 <cbvprintf+0x4ce>
			switch (length_mod) {
    cc4e:	1ecb      	subs	r3, r1, #3
    cc50:	2b04      	cmp	r3, #4
    cc52:	d813      	bhi.n	cc7c <cbvprintf+0x4b4>
    cc54:	e8df f003 	tbb	[pc, r3]
    cc58:	120a0a03 	.word	0x120a0a03
    cc5c:	12          	.byte	0x12
    cc5d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    cc5e:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    cc60:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    cc62:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    cc64:	920a      	str	r2, [sp, #40]	; 0x28
    cc66:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    cc68:	4604      	mov	r4, r0
    cc6a:	e7ca      	b.n	cc02 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    cc6c:	1de0      	adds	r0, r4, #7
    cc6e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    cc72:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    cc76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    cc7a:	e7f5      	b.n	cc68 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    cc7c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    cc80:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    cc82:	930a      	str	r3, [sp, #40]	; 0x28
    cc84:	f04f 0300 	mov.w	r3, #0
    cc88:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    cc8a:	d0d3      	beq.n	cc34 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    cc8c:	2902      	cmp	r1, #2
    cc8e:	d1b8      	bne.n	cc02 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    cc90:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    cc94:	e7d0      	b.n	cc38 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    cc96:	2b04      	cmp	r3, #4
    cc98:	d109      	bne.n	ccae <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    cc9a:	1de3      	adds	r3, r4, #7
    cc9c:	f023 0307 	bic.w	r3, r3, #7
    cca0:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cca8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ccac:	e7a9      	b.n	cc02 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ccae:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    ccb0:	bf04      	itt	eq
    ccb2:	f854 3b04 	ldreq.w	r3, [r4], #4
    ccb6:	930a      	streq	r3, [sp, #40]	; 0x28
    ccb8:	e7a3      	b.n	cc02 <cbvprintf+0x43a>
		switch (conv->specifier) {
    ccba:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ccbe:	2878      	cmp	r0, #120	; 0x78
    ccc0:	d8ae      	bhi.n	cc20 <cbvprintf+0x458>
    ccc2:	2862      	cmp	r0, #98	; 0x62
    ccc4:	d822      	bhi.n	cd0c <cbvprintf+0x544>
    ccc6:	2825      	cmp	r0, #37	; 0x25
    ccc8:	f43f ad8f 	beq.w	c7ea <cbvprintf+0x22>
    cccc:	2858      	cmp	r0, #88	; 0x58
    ccce:	d1a7      	bne.n	cc20 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    ccd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    ccd4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ccd8:	9300      	str	r3, [sp, #0]
    ccda:	aa0c      	add	r2, sp, #48	; 0x30
    ccdc:	ab04      	add	r3, sp, #16
    ccde:	f007 ffdb 	bl	14c98 <encode_uint>
    cce2:	4682      	mov	sl, r0
			if (precision >= 0) {
    cce4:	f1b8 0f00 	cmp.w	r8, #0
    cce8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    ccec:	db0c      	blt.n	cd08 <cbvprintf+0x540>
				conv->flag_zero = false;
    ccee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    ccf2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    ccf6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ccfa:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    ccfc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    cd00:	d902      	bls.n	cd08 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    cd02:	eba8 0303 	sub.w	r3, r8, r3
    cd06:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    cd08:	4680      	mov	r8, r0
    cd0a:	e03d      	b.n	cd88 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    cd0c:	3863      	subs	r0, #99	; 0x63
    cd0e:	2815      	cmp	r0, #21
    cd10:	d886      	bhi.n	cc20 <cbvprintf+0x458>
    cd12:	a201      	add	r2, pc, #4	; (adr r2, cd18 <cbvprintf+0x550>)
    cd14:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    cd18:	0000cd99 	.word	0x0000cd99
    cd1c:	0000cdfd 	.word	0x0000cdfd
    cd20:	0000cc21 	.word	0x0000cc21
    cd24:	0000cc21 	.word	0x0000cc21
    cd28:	0000cc21 	.word	0x0000cc21
    cd2c:	0000cc21 	.word	0x0000cc21
    cd30:	0000cdfd 	.word	0x0000cdfd
    cd34:	0000cc21 	.word	0x0000cc21
    cd38:	0000cc21 	.word	0x0000cc21
    cd3c:	0000cc21 	.word	0x0000cc21
    cd40:	0000cc21 	.word	0x0000cc21
    cd44:	0000ce57 	.word	0x0000ce57
    cd48:	0000ce25 	.word	0x0000ce25
    cd4c:	0000ce29 	.word	0x0000ce29
    cd50:	0000cc21 	.word	0x0000cc21
    cd54:	0000cc21 	.word	0x0000cc21
    cd58:	0000cd71 	.word	0x0000cd71
    cd5c:	0000cc21 	.word	0x0000cc21
    cd60:	0000ce25 	.word	0x0000ce25
    cd64:	0000cc21 	.word	0x0000cc21
    cd68:	0000cc21 	.word	0x0000cc21
    cd6c:	0000ce25 	.word	0x0000ce25
			if (precision >= 0) {
    cd70:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    cd74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    cd78:	db0a      	blt.n	cd90 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    cd7a:	4641      	mov	r1, r8
    cd7c:	4650      	mov	r0, sl
    cd7e:	f008 f88b 	bl	14e98 <strnlen>
		char sign = 0;
    cd82:	2600      	movs	r6, #0
			bpe = bps + len;
    cd84:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    cd88:	f1ba 0f00 	cmp.w	sl, #0
    cd8c:	d10c      	bne.n	cda8 <cbvprintf+0x5e0>
    cd8e:	e747      	b.n	cc20 <cbvprintf+0x458>
				len = strlen(bps);
    cd90:	4650      	mov	r0, sl
    cd92:	f008 f87a 	bl	14e8a <strlen>
    cd96:	e7f4      	b.n	cd82 <cbvprintf+0x5ba>
			break;
    cd98:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    cd9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    cd9c:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    cda0:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    cda4:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    cda8:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    cdac:	b106      	cbz	r6, cdb0 <cbvprintf+0x5e8>
			nj_len += 1U;
    cdae:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    cdb0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    cdb4:	06d0      	lsls	r0, r2, #27
    cdb6:	d568      	bpl.n	ce8a <cbvprintf+0x6c2>
			nj_len += 2U;
    cdb8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    cdba:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    cdbc:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    cdbe:	bf48      	it	mi
    cdc0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    cdc2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    cdc4:	bf48      	it	mi
    cdc6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    cdc8:	f1b9 0f00 	cmp.w	r9, #0
    cdcc:	dd76      	ble.n	cebc <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    cdce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    cdd2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    cdd6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    cdda:	9303      	str	r3, [sp, #12]
    cddc:	0753      	lsls	r3, r2, #29
    cdde:	d46d      	bmi.n	cebc <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    cde0:	0650      	lsls	r0, r2, #25
    cde2:	d561      	bpl.n	cea8 <cbvprintf+0x6e0>
					if (sign != 0) {
    cde4:	b146      	cbz	r6, cdf8 <cbvprintf+0x630>
						OUTC(sign);
    cde6:	4659      	mov	r1, fp
    cde8:	4630      	mov	r0, r6
    cdea:	9b02      	ldr	r3, [sp, #8]
    cdec:	4798      	blx	r3
    cdee:	2800      	cmp	r0, #0
    cdf0:	db57      	blt.n	cea2 <cbvprintf+0x6da>
						sign = 0;
    cdf2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    cdf4:	3501      	adds	r5, #1
						sign = 0;
    cdf6:	461e      	mov	r6, r3
					pad = '0';
    cdf8:	2330      	movs	r3, #48	; 0x30
    cdfa:	e056      	b.n	ceaa <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    cdfc:	071e      	lsls	r6, r3, #28
    cdfe:	d40f      	bmi.n	ce20 <cbvprintf+0x658>
				sign = ' ';
    ce00:	f013 0610 	ands.w	r6, r3, #16
    ce04:	bf18      	it	ne
    ce06:	2620      	movne	r6, #32
			sint = value->sint;
    ce08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	f6bf af5f 	bge.w	ccd0 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    ce12:	4252      	negs	r2, r2
    ce14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ce18:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    ce1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ce1e:	e757      	b.n	ccd0 <cbvprintf+0x508>
				sign = '+';
    ce20:	262b      	movs	r6, #43	; 0x2b
    ce22:	e7f1      	b.n	ce08 <cbvprintf+0x640>
		switch (conv->specifier) {
    ce24:	2600      	movs	r6, #0
    ce26:	e753      	b.n	ccd0 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    ce28:	980a      	ldr	r0, [sp, #40]	; 0x28
    ce2a:	b340      	cbz	r0, ce7e <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ce2c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ce30:	9300      	str	r3, [sp, #0]
    ce32:	2100      	movs	r1, #0
    ce34:	ab04      	add	r3, sp, #16
    ce36:	aa0c      	add	r2, sp, #48	; 0x30
    ce38:	f007 ff2e 	bl	14c98 <encode_uint>
				conv->altform_0c = true;
    ce3c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ce40:	4682      	mov	sl, r0
				conv->altform_0c = true;
    ce42:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ce46:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ce4a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ce4e:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ce50:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ce54:	e746      	b.n	cce4 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    ce56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    ce58:	2907      	cmp	r1, #7
    ce5a:	f63f aee1 	bhi.w	cc20 <cbvprintf+0x458>
    ce5e:	e8df f001 	tbb	[pc, r1]
    ce62:	040c      	.short	0x040c
    ce64:	08080c06 	.word	0x08080c06
    ce68:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    ce6a:	701d      	strb	r5, [r3, #0]
		break;
    ce6c:	e6d8      	b.n	cc20 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    ce6e:	801d      	strh	r5, [r3, #0]
		break;
    ce70:	e6d6      	b.n	cc20 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    ce72:	17ea      	asrs	r2, r5, #31
    ce74:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    ce78:	e6d2      	b.n	cc20 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ce7a:	601d      	str	r5, [r3, #0]
		break;
    ce7c:	e6d0      	b.n	cc20 <cbvprintf+0x458>
			bps = "(nil)";
    ce7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; cf48 <cbvprintf+0x780>
    ce82:	4606      	mov	r6, r0
			bpe = bps + 5;
    ce84:	f10a 0805 	add.w	r8, sl, #5
    ce88:	e78e      	b.n	cda8 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    ce8a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    ce8c:	bf48      	it	mi
    ce8e:	3301      	addmi	r3, #1
    ce90:	e793      	b.n	cdba <cbvprintf+0x5f2>
					OUTC(pad);
    ce92:	4618      	mov	r0, r3
    ce94:	9303      	str	r3, [sp, #12]
    ce96:	4659      	mov	r1, fp
    ce98:	9b02      	ldr	r3, [sp, #8]
    ce9a:	4798      	blx	r3
    ce9c:	2800      	cmp	r0, #0
    ce9e:	9b03      	ldr	r3, [sp, #12]
    cea0:	da04      	bge.n	ceac <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    cea2:	b011      	add	sp, #68	; 0x44
    cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    cea8:	2320      	movs	r3, #32
    ceaa:	444d      	add	r5, r9
    ceac:	464a      	mov	r2, r9
				while (width-- > 0) {
    ceae:	2a00      	cmp	r2, #0
    ceb0:	eba5 0109 	sub.w	r1, r5, r9
    ceb4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ceb8:	dceb      	bgt.n	ce92 <cbvprintf+0x6ca>
    ceba:	460d      	mov	r5, r1
		if (sign != 0) {
    cebc:	b136      	cbz	r6, cecc <cbvprintf+0x704>
			OUTC(sign);
    cebe:	4659      	mov	r1, fp
    cec0:	4630      	mov	r0, r6
    cec2:	9b02      	ldr	r3, [sp, #8]
    cec4:	4798      	blx	r3
    cec6:	2800      	cmp	r0, #0
    cec8:	dbeb      	blt.n	cea2 <cbvprintf+0x6da>
    ceca:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    cecc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ced0:	06d9      	lsls	r1, r3, #27
    ced2:	d401      	bmi.n	ced8 <cbvprintf+0x710>
    ced4:	071a      	lsls	r2, r3, #28
    ced6:	d506      	bpl.n	cee6 <cbvprintf+0x71e>
				OUTC('0');
    ced8:	4659      	mov	r1, fp
    ceda:	2030      	movs	r0, #48	; 0x30
    cedc:	9b02      	ldr	r3, [sp, #8]
    cede:	4798      	blx	r3
    cee0:	2800      	cmp	r0, #0
    cee2:	dbde      	blt.n	cea2 <cbvprintf+0x6da>
    cee4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    cee6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ceea:	06db      	lsls	r3, r3, #27
    ceec:	d507      	bpl.n	cefe <cbvprintf+0x736>
				OUTC(conv->specifier);
    ceee:	4659      	mov	r1, fp
    cef0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    cef4:	9b02      	ldr	r3, [sp, #8]
    cef6:	4798      	blx	r3
    cef8:	2800      	cmp	r0, #0
    cefa:	dbd2      	blt.n	cea2 <cbvprintf+0x6da>
    cefc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    cefe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    cf00:	442e      	add	r6, r5
    cf02:	1b73      	subs	r3, r6, r5
    cf04:	2b00      	cmp	r3, #0
    cf06:	dc16      	bgt.n	cf36 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    cf08:	4643      	mov	r3, r8
    cf0a:	4652      	mov	r2, sl
    cf0c:	4659      	mov	r1, fp
    cf0e:	9802      	ldr	r0, [sp, #8]
    cf10:	f007 ff08 	bl	14d24 <outs>
    cf14:	2800      	cmp	r0, #0
    cf16:	dbc4      	blt.n	cea2 <cbvprintf+0x6da>
    cf18:	4405      	add	r5, r0
		while (width > 0) {
    cf1a:	44a9      	add	r9, r5
    cf1c:	eba9 0305 	sub.w	r3, r9, r5
    cf20:	2b00      	cmp	r3, #0
    cf22:	f77f ae7d 	ble.w	cc20 <cbvprintf+0x458>
			OUTC(' ');
    cf26:	4659      	mov	r1, fp
    cf28:	2020      	movs	r0, #32
    cf2a:	9b02      	ldr	r3, [sp, #8]
    cf2c:	4798      	blx	r3
    cf2e:	2800      	cmp	r0, #0
    cf30:	dbb7      	blt.n	cea2 <cbvprintf+0x6da>
    cf32:	3501      	adds	r5, #1
			--width;
    cf34:	e7f2      	b.n	cf1c <cbvprintf+0x754>
				OUTC('0');
    cf36:	4659      	mov	r1, fp
    cf38:	2030      	movs	r0, #48	; 0x30
    cf3a:	9b02      	ldr	r3, [sp, #8]
    cf3c:	4798      	blx	r3
    cf3e:	2800      	cmp	r0, #0
    cf40:	dbaf      	blt.n	cea2 <cbvprintf+0x6da>
    cf42:	3501      	adds	r5, #1
    cf44:	e7dd      	b.n	cf02 <cbvprintf+0x73a>
    cf46:	bf00      	nop
    cf48:	00015b8c 	.word	0x00015b8c

0000cf4c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    cf4c:	4604      	mov	r4, r0
    cf4e:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    cf50:	f04f 0220 	mov.w	r2, #32
    cf54:	f3ef 8311 	mrs	r3, BASEPRI
    cf58:	f382 8812 	msr	BASEPRI_MAX, r2
    cf5c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();
    cf60:	f008 f981 	bl	15266 <sys_clock_disable>

	sys_arch_reboot(type);
    cf64:	4620      	mov	r0, r4
    cf66:	f001 f963 	bl	e230 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    cf6a:	4803      	ldr	r0, [pc, #12]	; (cf78 <sys_reboot+0x2c>)
    cf6c:	f007 fe6a 	bl	14c44 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    cf70:	f000 fd1a 	bl	d9a8 <arch_cpu_idle>
    cf74:	e7fc      	b.n	cf70 <sys_reboot+0x24>
    cf76:	bf00      	nop
    cf78:	00015b92 	.word	0x00015b92

0000cf7c <nordicsemi_nrf91_init>:
    cf7c:	f04f 0220 	mov.w	r2, #32
    cf80:	f3ef 8311 	mrs	r3, BASEPRI
    cf84:	f382 8812 	msr	BASEPRI_MAX, r2
    cf88:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    cf8c:	2101      	movs	r1, #1
    cf8e:	4a04      	ldr	r2, [pc, #16]	; (cfa0 <nordicsemi_nrf91_init+0x24>)
    cf90:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cf94:	f383 8811 	msr	BASEPRI, r3
    cf98:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    cf9c:	2000      	movs	r0, #0
    cf9e:	4770      	bx	lr
    cfa0:	50039000 	.word	0x50039000

0000cfa4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    cfa4:	b120      	cbz	r0, cfb0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    cfa6:	4b03      	ldr	r3, [pc, #12]	; (cfb4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    cfa8:	0180      	lsls	r0, r0, #6
    cfaa:	f043 0301 	orr.w	r3, r3, #1
    cfae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    cfb0:	4770      	bx	lr
    cfb2:	bf00      	nop
    cfb4:	000157a0 	.word	0x000157a0

0000cfb8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    cfb8:	2806      	cmp	r0, #6
    cfba:	d107      	bne.n	cfcc <pm_state_set+0x14>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    cfbc:	2201      	movs	r2, #1
    cfbe:	4b04      	ldr	r3, [pc, #16]	; (cfd0 <pm_state_set+0x18>)
    cfc0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cfc4:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    cfc8:	bf20      	wfe
    while (true)
    cfca:	e7fd      	b.n	cfc8 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    cfcc:	4770      	bx	lr
    cfce:	bf00      	nop
    cfd0:	50004000 	.word	0x50004000

0000cfd4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    cfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cfd8:	4605      	mov	r5, r0
	__asm__ volatile(
    cfda:	f04f 0320 	mov.w	r3, #32
    cfde:	f3ef 8611 	mrs	r6, BASEPRI
    cfe2:	f383 8812 	msr	BASEPRI_MAX, r3
    cfe6:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cfea:	481d      	ldr	r0, [pc, #116]	; (d060 <pm_state_notify+0x8c>)
    cfec:	f003 fc0c 	bl	10808 <z_spin_lock_valid>
    cff0:	b940      	cbnz	r0, d004 <pm_state_notify+0x30>
    cff2:	491c      	ldr	r1, [pc, #112]	; (d064 <pm_state_notify+0x90>)
    cff4:	481c      	ldr	r0, [pc, #112]	; (d068 <pm_state_notify+0x94>)
    cff6:	228e      	movs	r2, #142	; 0x8e
    cff8:	f007 fe24 	bl	14c44 <printk>
    cffc:	218e      	movs	r1, #142	; 0x8e
    cffe:	4819      	ldr	r0, [pc, #100]	; (d064 <pm_state_notify+0x90>)
    d000:	f007 fea6 	bl	14d50 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    d004:	4816      	ldr	r0, [pc, #88]	; (d060 <pm_state_notify+0x8c>)
    d006:	f003 fc1b 	bl	10840 <z_spin_lock_set_owner>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    d00a:	4b18      	ldr	r3, [pc, #96]	; (d06c <pm_state_notify+0x98>)
    d00c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    d00e:	b19c      	cbz	r4, d038 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    d010:	f04f 090c 	mov.w	r9, #12
    d014:	4f16      	ldr	r7, [pc, #88]	; (d070 <pm_state_notify+0x9c>)
    d016:	f8df 805c 	ldr.w	r8, [pc, #92]	; d074 <pm_state_notify+0xa0>
			callback = notifier->state_exit;
    d01a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    d01e:	2d00      	cmp	r5, #0
    d020:	bf08      	it	eq
    d022:	4613      	moveq	r3, r2
		if (callback) {
    d024:	b12b      	cbz	r3, d032 <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    d026:	f898 2014 	ldrb.w	r2, [r8, #20]
    d02a:	fb09 f202 	mul.w	r2, r9, r2
    d02e:	5cb8      	ldrb	r0, [r7, r2]
    d030:	4798      	blx	r3
	return node->next;
    d032:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    d034:	2c00      	cmp	r4, #0
    d036:	d1f0      	bne.n	d01a <pm_state_notify+0x46>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d038:	4809      	ldr	r0, [pc, #36]	; (d060 <pm_state_notify+0x8c>)
    d03a:	f003 fbf3 	bl	10824 <z_spin_unlock_valid>
    d03e:	b940      	cbnz	r0, d052 <pm_state_notify+0x7e>
    d040:	4908      	ldr	r1, [pc, #32]	; (d064 <pm_state_notify+0x90>)
    d042:	4809      	ldr	r0, [pc, #36]	; (d068 <pm_state_notify+0x94>)
    d044:	22b9      	movs	r2, #185	; 0xb9
    d046:	f007 fdfd 	bl	14c44 <printk>
    d04a:	21b9      	movs	r1, #185	; 0xb9
    d04c:	4805      	ldr	r0, [pc, #20]	; (d064 <pm_state_notify+0x90>)
    d04e:	f007 fe7f 	bl	14d50 <assert_post_action>
	__asm__ volatile(
    d052:	f386 8811 	msr	BASEPRI, r6
    d056:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    d05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d05e:	bf00      	nop
    d060:	20000278 	.word	0x20000278
    d064:	00015bbf 	.word	0x00015bbf
    d068:	00015be5 	.word	0x00015be5
    d06c:	2000027c 	.word	0x2000027c
    d070:	20000284 	.word	0x20000284
    d074:	20000a58 	.word	0x20000a58

0000d078 <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d078:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d07a:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    d07c:	f000 001f 	and.w	r0, r0, #31
    d080:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d084:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d086:	4b05      	ldr	r3, [pc, #20]	; (d09c <atomic_clear_bit.constprop.0+0x24>)
    d088:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    d08c:	e8d3 2fef 	ldaex	r2, [r3]
    d090:	4002      	ands	r2, r0
    d092:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d096:	2900      	cmp	r1, #0
    d098:	d1f8      	bne.n	d08c <atomic_clear_bit.constprop.0+0x14>
}
    d09a:	4770      	bx	lr
    d09c:	20000290 	.word	0x20000290

0000d0a0 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    d0a0:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    d0a2:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    d0a4:	4b17      	ldr	r3, [pc, #92]	; (d104 <pm_system_resume+0x64>)
    d0a6:	7d1c      	ldrb	r4, [r3, #20]
    d0a8:	f004 031f 	and.w	r3, r4, #31
    d0ac:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d0ae:	43d0      	mvns	r0, r2
    d0b0:	4b15      	ldr	r3, [pc, #84]	; (d108 <pm_system_resume+0x68>)
    d0b2:	0961      	lsrs	r1, r4, #5
    d0b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d0b8:	e8d3 1fef 	ldaex	r1, [r3]
    d0bc:	ea01 0500 	and.w	r5, r1, r0
    d0c0:	e8c3 5fec 	stlex	ip, r5, [r3]
    d0c4:	f1bc 0f00 	cmp.w	ip, #0
    d0c8:	d1f6      	bne.n	d0b8 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    d0ca:	4211      	tst	r1, r2
    d0cc:	d013      	beq.n	d0f6 <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
    d0ce:	4b0f      	ldr	r3, [pc, #60]	; (d10c <pm_system_resume+0x6c>)
    d0d0:	4d0f      	ldr	r5, [pc, #60]	; (d110 <pm_system_resume+0x70>)
    d0d2:	b18b      	cbz	r3, d0f8 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
    d0d4:	230c      	movs	r3, #12
    d0d6:	4363      	muls	r3, r4
    d0d8:	18ea      	adds	r2, r5, r3
    d0da:	7851      	ldrb	r1, [r2, #1]
    d0dc:	5ce8      	ldrb	r0, [r5, r3]
    d0de:	f007 fe3f 	bl	14d60 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    d0e2:	2000      	movs	r0, #0
    d0e4:	f7ff ff76 	bl	cfd4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    d0e8:	230c      	movs	r3, #12
    d0ea:	435c      	muls	r4, r3
    d0ec:	2300      	movs	r3, #0
    d0ee:	192a      	adds	r2, r5, r4
    d0f0:	512b      	str	r3, [r5, r4]
    d0f2:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    d0f6:	bd38      	pop	{r3, r4, r5, pc}
    d0f8:	f383 8811 	msr	BASEPRI, r3
    d0fc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    d100:	e7ef      	b.n	d0e2 <pm_system_resume+0x42>
    d102:	bf00      	nop
    d104:	20000a58 	.word	0x20000a58
    d108:	20000294 	.word	0x20000294
    d10c:	00014d61 	.word	0x00014d61
    d110:	20000284 	.word	0x20000284

0000d114 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    d114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    d118:	4b2f      	ldr	r3, [pc, #188]	; (d1d8 <pm_system_suspend+0xc4>)
{
    d11a:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
    d11c:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    d11e:	ea4f 1854 	mov.w	r8, r4, lsr #5
    d122:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d126:	4b2d      	ldr	r3, [pc, #180]	; (d1dc <pm_system_suspend+0xc8>)
    d128:	4443      	add	r3, r8
    d12a:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d12e:	f004 091f 	and.w	r9, r4, #31
    d132:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    d136:	f013 0f01 	tst.w	r3, #1
    d13a:	4e29      	ldr	r6, [pc, #164]	; (d1e0 <pm_system_suspend+0xcc>)
    d13c:	d10a      	bne.n	d154 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    d13e:	4601      	mov	r1, r0
    d140:	4620      	mov	r0, r4
    d142:	f000 f87b 	bl	d23c <pm_policy_next_state>
		if (info != NULL) {
    d146:	b128      	cbz	r0, d154 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
    d148:	c807      	ldmia	r0, {r0, r1, r2}
    d14a:	230c      	movs	r3, #12
    d14c:	fb03 6304 	mla	r3, r3, r4, r6
    d150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    d154:	230c      	movs	r3, #12
    d156:	4363      	muls	r3, r4
    d158:	5cf5      	ldrb	r5, [r6, r3]
    d15a:	18f2      	adds	r2, r6, r3
    d15c:	b92d      	cbnz	r5, d16a <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    d15e:	4620      	mov	r0, r4
    d160:	f7ff ff8a 	bl	d078 <atomic_clear_bit.constprop.0>
		ret = false;
    d164:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    d166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    d16a:	1c7b      	adds	r3, r7, #1
    d16c:	d00f      	beq.n	d18e <pm_system_suspend+0x7a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    d16e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    d172:	2100      	movs	r1, #0
    d174:	f8d2 c008 	ldr.w	ip, [r2, #8]
    d178:	481a      	ldr	r0, [pc, #104]	; (d1e4 <pm_system_suspend+0xd0>)
    d17a:	2300      	movs	r3, #0
    d17c:	fbec 0105 	umlal	r0, r1, ip, r5
    d180:	4a19      	ldr	r2, [pc, #100]	; (d1e8 <pm_system_suspend+0xd4>)
    d182:	f7ff f95b 	bl	c43c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    d186:	2101      	movs	r1, #1
    d188:	1a38      	subs	r0, r7, r0
    d18a:	f004 fe5d 	bl	11e48 <z_set_timeout_expiry>
	k_sched_lock();
    d18e:	f003 fe37 	bl	10e00 <k_sched_lock>
	pm_state_notify(true);
    d192:	2001      	movs	r0, #1
    d194:	f7ff ff1e 	bl	cfd4 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d198:	2301      	movs	r3, #1
    d19a:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d19e:	4b13      	ldr	r3, [pc, #76]	; (d1ec <pm_system_suspend+0xd8>)
    d1a0:	4498      	add	r8, r3
    d1a2:	e8d8 3fef 	ldaex	r3, [r8]
    d1a6:	ea43 0309 	orr.w	r3, r3, r9
    d1aa:	e8c8 3fe2 	stlex	r2, r3, [r8]
    d1ae:	2a00      	cmp	r2, #0
    d1b0:	d1f7      	bne.n	d1a2 <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
    d1b2:	4b0f      	ldr	r3, [pc, #60]	; (d1f0 <pm_system_suspend+0xdc>)
    d1b4:	b133      	cbz	r3, d1c4 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
    d1b6:	230c      	movs	r3, #12
    d1b8:	4363      	muls	r3, r4
    d1ba:	18f2      	adds	r2, r6, r3
    d1bc:	7851      	ldrb	r1, [r2, #1]
    d1be:	5cf0      	ldrb	r0, [r6, r3]
    d1c0:	f7ff fefa 	bl	cfb8 <pm_state_set>
	pm_system_resume();
    d1c4:	f7ff ff6c 	bl	d0a0 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    d1c8:	4620      	mov	r0, r4
    d1ca:	f7ff ff55 	bl	d078 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    d1ce:	f004 fa39 	bl	11644 <k_sched_unlock>
	bool ret = true;
    d1d2:	2001      	movs	r0, #1
    d1d4:	e7c7      	b.n	d166 <pm_system_suspend+0x52>
    d1d6:	bf00      	nop
    d1d8:	20000a58 	.word	0x20000a58
    d1dc:	20000290 	.word	0x20000290
    d1e0:	20000284 	.word	0x20000284
    d1e4:	000f423f 	.word	0x000f423f
    d1e8:	000f4240 	.word	0x000f4240
    d1ec:	20000294 	.word	0x20000294
    d1f0:	0000cfb9 	.word	0x0000cfb9

0000d1f4 <pm_constraint_get>:
	(void)(v);
}

bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");
    d1f4:	2806      	cmp	r0, #6
{
    d1f6:	b510      	push	{r4, lr}
    d1f8:	4604      	mov	r4, r0
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");
    d1fa:	d908      	bls.n	d20e <pm_constraint_get+0x1a>
    d1fc:	4908      	ldr	r1, [pc, #32]	; (d220 <pm_constraint_get+0x2c>)
    d1fe:	4809      	ldr	r0, [pc, #36]	; (d224 <pm_constraint_get+0x30>)
    d200:	222c      	movs	r2, #44	; 0x2c
    d202:	f007 fd1f 	bl	14c44 <printk>
    d206:	212c      	movs	r1, #44	; 0x2c
    d208:	4805      	ldr	r0, [pc, #20]	; (d220 <pm_constraint_get+0x2c>)
    d20a:	f007 fda1 	bl	14d50 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d20e:	4806      	ldr	r0, [pc, #24]	; (d228 <pm_constraint_get+0x34>)
    d210:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    d214:	e8d4 0faf 	lda	r0, [r4]

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    d218:	fab0 f080 	clz	r0, r0
    d21c:	0940      	lsrs	r0, r0, #5
    d21e:	bd10      	pop	{r4, pc}
    d220:	00015c00 	.word	0x00015c00
    d224:	00015be5 	.word	0x00015be5
    d228:	20000298 	.word	0x20000298

0000d22c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    d22c:	b908      	cbnz	r0, d232 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    d22e:	4b02      	ldr	r3, [pc, #8]	; (d238 <pm_state_cpu_get_all+0xc>)
    d230:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    d232:	2000      	movs	r0, #0
    d234:	4770      	bx	lr
    d236:	bf00      	nop
    d238:	000157a8 	.word	0x000157a8

0000d23c <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    d23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d240:	b085      	sub	sp, #20
    d242:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    d244:	a903      	add	r1, sp, #12
    d246:	f7ff fff1 	bl	d22c <pm_state_cpu_get_all>
    d24a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    d24e:	f04f 0900 	mov.w	r9, #0

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    d252:	1e44      	subs	r4, r0, #1
    d254:	f8df a068 	ldr.w	sl, [pc, #104]	; d2c0 <pm_policy_next_state+0x84>
    d258:	f8df 8068 	ldr.w	r8, [pc, #104]	; d2c4 <pm_policy_next_state+0x88>
    d25c:	b224      	sxth	r4, r4
    d25e:	1c63      	adds	r3, r4, #1
    d260:	d104      	bne.n	d26c <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    d262:	2500      	movs	r5, #0
}
    d264:	4628      	mov	r0, r5
    d266:	b005      	add	sp, #20
    d268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    d26c:	9a03      	ldr	r2, [sp, #12]
    d26e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (!pm_constraint_get(state->state)) {
    d272:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
    d276:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    d27a:	f7ff ffbb 	bl	d1f4 <pm_constraint_get>
    d27e:	b1e0      	cbz	r0, d2ba <pm_policy_next_state+0x7e>
    d280:	f04f 0b00 	mov.w	fp, #0
    d284:	46d4      	mov	ip, sl
    d286:	4659      	mov	r1, fp
    d288:	6868      	ldr	r0, [r5, #4]
    d28a:	4642      	mov	r2, r8
    d28c:	fbe0 c107 	umlal	ip, r1, r0, r7
    d290:	464b      	mov	r3, r9
    d292:	4660      	mov	r0, ip
    d294:	f7ff f8d2 	bl	c43c <__aeabi_uldivmod>
    d298:	46d4      	mov	ip, sl
    d29a:	4659      	mov	r1, fp
    d29c:	9001      	str	r0, [sp, #4]
    d29e:	68a8      	ldr	r0, [r5, #8]
    d2a0:	4642      	mov	r2, r8
    d2a2:	fbe0 c107 	umlal	ip, r1, r0, r7
    d2a6:	464b      	mov	r3, r9
    d2a8:	4660      	mov	r0, ip
    d2aa:	f7ff f8c7 	bl	c43c <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    d2ae:	1c72      	adds	r2, r6, #1
    d2b0:	d0d8      	beq.n	d264 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    d2b2:	9b01      	ldr	r3, [sp, #4]
    d2b4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    d2b6:	42b0      	cmp	r0, r6
    d2b8:	d9d4      	bls.n	d264 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    d2ba:	3c01      	subs	r4, #1
    d2bc:	b224      	sxth	r4, r4
    d2be:	e7ce      	b.n	d25e <pm_policy_next_state+0x22>
    d2c0:	000f423f 	.word	0x000f423f
    d2c4:	000f4240 	.word	0x000f4240

0000d2c8 <adp536x_reg_read>:


static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
    d2c8:	4603      	mov	r3, r0
    d2ca:	b510      	push	{r4, lr}
    d2cc:	b088      	sub	sp, #32
    d2ce:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    d2d2:	f10d 0307 	add.w	r3, sp, #7
    d2d6:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    d2d8:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
    d2da:	4a09      	ldr	r2, [pc, #36]	; (d300 <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
    d2dc:	e9cd 1305 	strd	r1, r3, [sp, #20]
    d2e0:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
    d2e2:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    d2e4:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    d2e6:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    d2e8:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    d2ec:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    d2f0:	6883      	ldr	r3, [r0, #8]
    d2f2:	2202      	movs	r2, #2
    d2f4:	689c      	ldr	r4, [r3, #8]
    d2f6:	a902      	add	r1, sp, #8
    d2f8:	2346      	movs	r3, #70	; 0x46
    d2fa:	47a0      	blx	r4
}
    d2fc:	b008      	add	sp, #32
    d2fe:	bd10      	pop	{r4, pc}
    d300:	200002b4 	.word	0x200002b4

0000d304 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
    d304:	b570      	push	{r4, r5, r6, lr}
    d306:	b086      	sub	sp, #24
    d308:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
    d30a:	f10d 0107 	add.w	r1, sp, #7
{
    d30e:	4605      	mov	r5, r0
    d310:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
    d312:	f7ff ffd9 	bl	d2c8 <adp536x_reg_read>
	if (err) {
    d316:	b9c0      	cbnz	r0, d34a <adp536x_reg_write_mask+0x46>
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    d318:	4b0d      	ldr	r3, [pc, #52]	; (d350 <adp536x_reg_write_mask+0x4c>)
		return err;
	}

	tmp &= ~mask;
    d31a:	f89d 2007 	ldrb.w	r2, [sp, #7]
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    d31e:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
    d320:	ab02      	add	r3, sp, #8
    d322:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
    d324:	2302      	movs	r3, #2
	tmp &= ~mask;
    d326:	ea22 0206 	bic.w	r2, r2, r6
	tmp |= data;
    d32a:	4322      	orrs	r2, r4
    d32c:	f88d 2007 	strb.w	r2, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    d330:	f88d 5008 	strb.w	r5, [sp, #8]
    d334:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
    d338:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    d33a:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    d33e:	6883      	ldr	r3, [r0, #8]
    d340:	2201      	movs	r2, #1
    d342:	689c      	ldr	r4, [r3, #8]
    d344:	a903      	add	r1, sp, #12
    d346:	2346      	movs	r3, #70	; 0x46
    d348:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
    d34a:	b006      	add	sp, #24
    d34c:	bd70      	pop	{r4, r5, r6, pc}
    d34e:	bf00      	nop
    d350:	200002b4 	.word	0x200002b4

0000d354 <adp536x_init>:

	return 0;
}

int adp536x_init(const char *dev_name)
{
    d354:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d356:	f002 ff53 	bl	10200 <z_impl_device_get_binding>
	i2c_dev = device_get_binding(dev_name);
    d35a:	4b04      	ldr	r3, [pc, #16]	; (d36c <adp536x_init+0x18>)
	if (i2c_dev == NULL) {
		return -ENODEV;
    d35c:	2800      	cmp	r0, #0
	i2c_dev = device_get_binding(dev_name);
    d35e:	6018      	str	r0, [r3, #0]
	}

	return 0;
}
    d360:	bf0c      	ite	eq
    d362:	f06f 0012 	mvneq.w	r0, #18
    d366:	2000      	movne	r0, #0
    d368:	bd08      	pop	{r3, pc}
    d36a:	bf00      	nop
    d36c:	200002b4 	.word	0x200002b4

0000d370 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    d370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    d372:	2800      	cmp	r0, #0
{
    d374:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    d376:	bf14      	ite	ne
    d378:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    d37c:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
    d380:	428a      	cmp	r2, r1
    d382:	d20b      	bcs.n	d39c <config_regions+0x2c>
    d384:	2294      	movs	r2, #148	; 0x94
    d386:	4921      	ldr	r1, [pc, #132]	; (d40c <config_regions+0x9c>)
    d388:	4821      	ldr	r0, [pc, #132]	; (d410 <config_regions+0xa0>)
    d38a:	f007 fc5b 	bl	14c44 <printk>
    d38e:	2194      	movs	r1, #148	; 0x94
    d390:	481e      	ldr	r0, [pc, #120]	; (d40c <config_regions+0x9c>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    d392:	b003      	add	sp, #12
    d394:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    d398:	f007 bcda 	b.w	14d50 <assert_post_action>
	if (end <= start) {
    d39c:	d033      	beq.n	d406 <config_regions+0x96>
    d39e:	460d      	mov	r5, r1
    d3a0:	4e1c      	ldr	r6, [pc, #112]	; (d414 <config_regions+0xa4>)
		if (ram) {
    d3a2:	b368      	cbz	r0, d400 <config_regions+0x90>
			NRF_SPU->RAMREGION[i].PERM = perm;
    d3a4:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    d3a8:	3501      	adds	r5, #1
    d3aa:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    d3ac:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    d3b0:	d8f7      	bhi.n	d3a2 <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    d3b2:	fb02 f003 	mul.w	r0, r2, r3
    d3b6:	3a01      	subs	r2, #1
    d3b8:	434b      	muls	r3, r1
    d3ba:	9000      	str	r0, [sp, #0]
    d3bc:	4816      	ldr	r0, [pc, #88]	; (d418 <config_regions+0xa8>)
    d3be:	f007 fc41 	bl	14c44 <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    d3c2:	4b16      	ldr	r3, [pc, #88]	; (d41c <config_regions+0xac>)
    d3c4:	f014 0f10 	tst.w	r4, #16
    d3c8:	4915      	ldr	r1, [pc, #84]	; (d420 <config_regions+0xb0>)
    d3ca:	4816      	ldr	r0, [pc, #88]	; (d424 <config_regions+0xb4>)
    d3cc:	bf08      	it	eq
    d3ce:	4619      	moveq	r1, r3
    d3d0:	f007 fc38 	bl	14c44 <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    d3d4:	2172      	movs	r1, #114	; 0x72
    d3d6:	4814      	ldr	r0, [pc, #80]	; (d428 <config_regions+0xb8>)
    d3d8:	f007 fc34 	bl	14c44 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    d3dc:	2177      	movs	r1, #119	; 0x77
    d3de:	4812      	ldr	r0, [pc, #72]	; (d428 <config_regions+0xb8>)
    d3e0:	f007 fc30 	bl	14c44 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    d3e4:	2178      	movs	r1, #120	; 0x78
    d3e6:	4810      	ldr	r0, [pc, #64]	; (d428 <config_regions+0xb8>)
    d3e8:	f007 fc2c 	bl	14c44 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    d3ec:	216c      	movs	r1, #108	; 0x6c
    d3ee:	480e      	ldr	r0, [pc, #56]	; (d428 <config_regions+0xb8>)
    d3f0:	f007 fc28 	bl	14c44 <printk>
	PRINT("\n");
    d3f4:	480d      	ldr	r0, [pc, #52]	; (d42c <config_regions+0xbc>)
}
    d3f6:	b003      	add	sp, #12
    d3f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    d3fc:	f007 bc22 	b.w	14c44 <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    d400:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    d404:	e7d0      	b.n	d3a8 <config_regions+0x38>
}
    d406:	b003      	add	sp, #12
    d408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d40a:	bf00      	nop
    d40c:	00015c3f 	.word	0x00015c3f
    d410:	00015be5 	.word	0x00015be5
    d414:	50003000 	.word	0x50003000
    d418:	00015c60 	.word	0x00015c60
    d41c:	00015c33 	.word	0x00015c33
    d420:	00015c2a 	.word	0x00015c2a
    d424:	00015e11 	.word	0x00015e11
    d428:	00015c7a 	.word	0x00015c7a
    d42c:	00016805 	.word	0x00016805

0000d430 <config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int config_peripheral(uint8_t id, bool dma_present, bool lock)
    d430:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
    d432:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    d434:	2b00      	cmp	r3, #0
    d436:	db0c      	blt.n	d452 <config_peripheral.constprop.0+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d438:	2201      	movs	r2, #1
    d43a:	f000 011f 	and.w	r1, r0, #31
    d43e:	408a      	lsls	r2, r1
    d440:	095b      	lsrs	r3, r3, #5
    d442:	4910      	ldr	r1, [pc, #64]	; (d484 <config_peripheral.constprop.0+0x54>)
    d444:	3320      	adds	r3, #32
    d446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    d44a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d44e:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d452:	0083      	lsls	r3, r0, #2
    d454:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    d458:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    d45c:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d45e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    d462:	d006      	beq.n	d472 <config_peripheral.constprop.0+0x42>
	return present && (usel || split);
    d464:	2a00      	cmp	r2, #0
    d466:	da07      	bge.n	d478 <config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    d468:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    d46c:	3a02      	subs	r2, #2
    d46e:	2a01      	cmp	r2, #1
    d470:	d802      	bhi.n	d478 <config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    d472:	4a05      	ldr	r2, [pc, #20]	; (d488 <config_peripheral.constprop.0+0x58>)
    d474:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    d478:	2101      	movs	r1, #1
    d47a:	f007 fcbe 	bl	14dfa <irq_target_state_set>
	return 0;
}
    d47e:	2000      	movs	r0, #0
    d480:	bd08      	pop	{r3, pc}
    d482:	bf00      	nop
    d484:	e000e100 	.word	0xe000e100
    d488:	80000100 	.word	0x80000100

0000d48c <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    d48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    d48e:	f44f 34c0 	mov.w	r4, #98304	; 0x18000
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    d492:	f44f 31c1 	mov.w	r1, #98816	; 0x18200
    d496:	4820      	ldr	r0, [pc, #128]	; (d518 <spm_jump+0x8c>)
    d498:	f007 fbd4 	bl	14c44 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    d49c:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    d4a0:	481e      	ldr	r0, [pc, #120]	; (d51c <spm_jump+0x90>)
    d4a2:	f007 fbcf 	bl	14c44 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    d4a6:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
    d4aa:	481d      	ldr	r0, [pc, #116]	; (d520 <spm_jump+0x94>)
    d4ac:	f007 fbca 	bl	14c44 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    d4b0:	2210      	movs	r2, #16
    d4b2:	2100      	movs	r1, #0
    d4b4:	4668      	mov	r0, sp
    d4b6:	f007 fd38 	bl	14f2a <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    d4ba:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	tz_nonsecure_state_setup(spm_ns_conf);
    d4be:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    d4c0:	9300      	str	r3, [sp, #0]
    d4c2:	f44f 33c1 	mov.w	r3, #98816	; 0x18200
    d4c6:	9302      	str	r3, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    d4c8:	f000 ff0c 	bl	e2e4 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    d4cc:	2001      	movs	r0, #1
    d4ce:	f000 ff3b 	bl	e348 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    d4d2:	2000      	movs	r0, #0
    d4d4:	f000 ff24 	bl	e320 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    d4d8:	2000      	movs	r0, #0
    d4da:	f000 ff49 	bl	e370 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    d4de:	2101      	movs	r1, #1
    d4e0:	2000      	movs	r0, #0
    d4e2:	f000 ff63 	bl	e3ac <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    d4e6:	f000 ff57 	bl	e398 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    d4ea:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    d4ee:	480d      	ldr	r0, [pc, #52]	; (d524 <spm_jump+0x98>)
    d4f0:	f007 fba8 	bl	14c44 <printk>
	return config_peripheral(id, dma_present, true);
    d4f4:	2008      	movs	r0, #8
    d4f6:	f7ff ff9b 	bl	d430 <config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    d4fa:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
    d4fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d502:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    d506:	0864      	lsrs	r4, r4, #1
    d508:	0064      	lsls	r4, r4, #1
    d50a:	4620      	mov	r0, r4
    d50c:	4621      	mov	r1, r4
    d50e:	4622      	mov	r2, r4
    d510:	4623      	mov	r3, r4
    d512:	f7ff f921 	bl	c758 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    d516:	bf00      	nop
    d518:	00015c7d 	.word	0x00015c7d
    d51c:	00015c94 	.word	0x00015c94
    d520:	00015ca9 	.word	0x00015ca9
    d524:	00015cc7 	.word	0x00015cc7

0000d528 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    d528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    d52c:	4852      	ldr	r0, [pc, #328]	; (d678 <spm_config+0x150>)
    d52e:	f007 fb89 	bl	14c44 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    d532:	2100      	movs	r1, #0
    d534:	f240 1317 	movw	r3, #279	; 0x117
    d538:	4608      	mov	r0, r1
    d53a:	2203      	movs	r2, #3
    d53c:	f7ff ff18 	bl	d370 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d540:	4d4e      	ldr	r5, [pc, #312]	; (d67c <spm_config+0x154>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    d542:	f240 1307 	movw	r3, #263	; 0x107
    d546:	2220      	movs	r2, #32
    d548:	2103      	movs	r1, #3
    d54a:	2000      	movs	r0, #0
    d54c:	f7ff ff10 	bl	d370 <config_regions>
	PRINT("\n");
    d550:	484b      	ldr	r0, [pc, #300]	; (d680 <spm_config+0x158>)
    d552:	f007 fb77 	bl	14c44 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d556:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    d55a:	4b4a      	ldr	r3, [pc, #296]	; (d684 <spm_config+0x15c>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d55c:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    d560:	429c      	cmp	r4, r3
    d562:	d208      	bcs.n	d576 <spm_config+0x4e>
    d564:	4948      	ldr	r1, [pc, #288]	; (d688 <spm_config+0x160>)
    d566:	4849      	ldr	r0, [pc, #292]	; (d68c <spm_config+0x164>)
    d568:	2282      	movs	r2, #130	; 0x82
    d56a:	f007 fb6b 	bl	14c44 <printk>
    d56e:	2182      	movs	r1, #130	; 0x82
    d570:	4845      	ldr	r0, [pc, #276]	; (d688 <spm_config+0x160>)
    d572:	f007 fbed 	bl	14d50 <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    d576:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    d57a:	4e45      	ldr	r6, [pc, #276]	; (d690 <spm_config+0x168>)
    d57c:	f1c4 041b 	rsb	r4, r4, #27
    d580:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
    d584:	b2e4      	uxtb	r4, r4
    d586:	05da      	lsls	r2, r3, #23
    d588:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    d58c:	d50a      	bpl.n	d5a4 <spm_config+0x7c>
    d58e:	4941      	ldr	r1, [pc, #260]	; (d694 <spm_config+0x16c>)
    d590:	483e      	ldr	r0, [pc, #248]	; (d68c <spm_config+0x164>)
    d592:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    d596:	f007 fb55 	bl	14c44 <printk>
    d59a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    d59e:	483d      	ldr	r0, [pc, #244]	; (d694 <spm_config+0x16c>)
    d5a0:	f007 fbd6 	bl	14d50 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    d5a4:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    d5a8:	05db      	lsls	r3, r3, #23
    d5aa:	d50a      	bpl.n	d5c2 <spm_config+0x9a>
    d5ac:	4939      	ldr	r1, [pc, #228]	; (d694 <spm_config+0x16c>)
    d5ae:	4837      	ldr	r0, [pc, #220]	; (d68c <spm_config+0x164>)
    d5b0:	f240 127b 	movw	r2, #379	; 0x17b
    d5b4:	f007 fb46 	bl	14c44 <printk>
    d5b8:	f240 117b 	movw	r1, #379	; 0x17b
    d5bc:	4835      	ldr	r0, [pc, #212]	; (d694 <spm_config+0x16c>)
    d5be:	f007 fbc7 	bl	14d50 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    d5c2:	4b33      	ldr	r3, [pc, #204]	; (d690 <spm_config+0x168>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    d5c4:	4834      	ldr	r0, [pc, #208]	; (d698 <spm_config+0x170>)
    d5c6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    d5ca:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    d5ce:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    d5d2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    d5d6:	0152      	lsls	r2, r2, #5
    d5d8:	f007 fb34 	bl	14c44 <printk>
	PRINT("\n");
    d5dc:	4828      	ldr	r0, [pc, #160]	; (d680 <spm_config+0x158>)
    d5de:	f007 fb31 	bl	14c44 <printk>
	int err = spm_secure_services_init();
    d5e2:	f000 f86f 	bl	d6c4 <spm_secure_services_init>
	if (err != 0) {
    d5e6:	4601      	mov	r1, r0
    d5e8:	b110      	cbz	r0, d5f0 <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
    d5ea:	482c      	ldr	r0, [pc, #176]	; (d69c <spm_config+0x174>)
    d5ec:	f007 fb2a 	bl	14c44 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    d5f0:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    d5f2:	482b      	ldr	r0, [pc, #172]	; (d6a0 <spm_config+0x178>)
    d5f4:	f007 fb26 	bl	14c44 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    d5f8:	f240 1317 	movw	r3, #279	; 0x117
    d5fc:	2204      	movs	r2, #4
    d5fe:	2100      	movs	r1, #0
    d600:	2001      	movs	r0, #1
    d602:	f7ff feb5 	bl	d370 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    d606:	4d22      	ldr	r5, [pc, #136]	; (d690 <spm_config+0x168>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    d608:	f240 1307 	movw	r3, #263	; 0x107
    d60c:	2220      	movs	r2, #32
    d60e:	2104      	movs	r1, #4
    d610:	2001      	movs	r0, #1
    d612:	f7ff fead 	bl	d370 <config_regions>
	PRINT("\n");
    d616:	481a      	ldr	r0, [pc, #104]	; (d680 <spm_config+0x158>)
    d618:	f007 fb14 	bl	14c44 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    d61c:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    d620:	4820      	ldr	r0, [pc, #128]	; (d6a4 <spm_config+0x17c>)
    d622:	f007 fb0f 	bl	14c44 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    d626:	4f20      	ldr	r7, [pc, #128]	; (d6a8 <spm_config+0x180>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    d628:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    d62c:	f8df 807c 	ldr.w	r8, [pc, #124]	; d6ac <spm_config+0x184>
    d630:	4d1f      	ldr	r5, [pc, #124]	; (d6b0 <spm_config+0x188>)
    d632:	f8df 9080 	ldr.w	r9, [pc, #128]	; d6b4 <spm_config+0x18c>
    d636:	796e      	ldrb	r6, [r5, #5]
    d638:	4621      	mov	r1, r4
    d63a:	2e00      	cmp	r6, #0
    d63c:	bf14      	ite	ne
    d63e:	463b      	movne	r3, r7
    d640:	4643      	moveq	r3, r8
    d642:	4648      	mov	r0, r9
    d644:	682a      	ldr	r2, [r5, #0]
    d646:	f007 fafd 	bl	14c44 <printk>
		if (!periph[i].nonsecure) {
    d64a:	b966      	cbnz	r6, d666 <spm_config+0x13e>
			PRINT("\tSKIP\n");
    d64c:	481a      	ldr	r0, [pc, #104]	; (d6b8 <spm_config+0x190>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    d64e:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    d650:	f007 faf8 	bl	14c44 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    d654:	2c20      	cmp	r4, #32
    d656:	f105 0508 	add.w	r5, r5, #8
    d65a:	d1ec      	bne.n	d636 <spm_config+0x10e>
	PRINT("\n");
    d65c:	4808      	ldr	r0, [pc, #32]	; (d680 <spm_config+0x158>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    d65e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    d662:	f007 baef 	b.w	14c44 <printk>
	return config_peripheral(id, dma_present, true);
    d666:	7928      	ldrb	r0, [r5, #4]
    d668:	f7ff fee2 	bl	d430 <config_peripheral.constprop.0>
		if (err) {
    d66c:	b108      	cbz	r0, d672 <spm_config+0x14a>
			PRINT("\tERROR\n");
    d66e:	4813      	ldr	r0, [pc, #76]	; (d6bc <spm_config+0x194>)
    d670:	e7ed      	b.n	d64e <spm_config+0x126>
			PRINT("\tOK\n");
    d672:	4813      	ldr	r0, [pc, #76]	; (d6c0 <spm_config+0x198>)
    d674:	e7eb      	b.n	d64e <spm_config+0x126>
    d676:	bf00      	nop
    d678:	00015cfd 	.word	0x00015cfd
    d67c:	00017fe0 	.word	0x00017fe0
    d680:	00016805 	.word	0x00016805
    d684:	00000020 	.word	0x00000020
    d688:	00015c3f 	.word	0x00015c3f
    d68c:	00015be5 	.word	0x00015be5
    d690:	50003000 	.word	0x50003000
    d694:	00015d21 	.word	0x00015d21
    d698:	00015d53 	.word	0x00015d53
    d69c:	00015d99 	.word	0x00015d99
    d6a0:	00015dc9 	.word	0x00015dc9
    d6a4:	00015deb 	.word	0x00015deb
    d6a8:	00015cf2 	.word	0x00015cf2
    d6ac:	00015c37 	.word	0x00015c37
    d6b0:	000157a8 	.word	0x000157a8
    d6b4:	00015e07 	.word	0x00015e07
    d6b8:	00015e14 	.word	0x00015e14
    d6bc:	00015e1b 	.word	0x00015e1b
    d6c0:	00015e23 	.word	0x00015e23

0000d6c4 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    d6c4:	2200      	movs	r2, #0
    d6c6:	4802      	ldr	r0, [pc, #8]	; (d6d0 <spm_secure_services_init+0xc>)
    d6c8:	4611      	mov	r1, r2
    d6ca:	f004 bd3b 	b.w	12144 <nrf_cc3xx_platform_ctr_drbg_init>
    d6ce:	bf00      	nop
    d6d0:	200002b8 	.word	0x200002b8

0000d6d4 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    d6d4:	b570      	push	{r4, r5, r6, lr}
    d6d6:	460c      	mov	r4, r1
    d6d8:	4615      	mov	r5, r2
#endif
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    d6da:	4606      	mov	r6, r0
    d6dc:	b950      	cbnz	r0, d6f4 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    d6de:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    d6e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d6e6:	4671      	mov	r1, lr
    d6e8:	4672      	mov	r2, lr
    d6ea:	4673      	mov	r3, lr
    d6ec:	46f4      	mov	ip, lr
    d6ee:	f38e 8c00 	msr	CPSR_fs, lr
    d6f2:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    d6f4:	2a00      	cmp	r2, #0
    d6f6:	d0f2      	beq.n	d6de <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d6f8:	f007 fbc2 	bl	14e80 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    d6fc:	2801      	cmp	r0, #1
    d6fe:	d0ee      	beq.n	d6de <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    d700:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
    d704:	d316      	bcc.n	d734 <__acle_se_spm_request_read_nse+0x60>
    d706:	192b      	adds	r3, r5, r4
    d708:	f5b3 4f42 	cmp.w	r3, #49664	; 0xc200
    d70c:	d905      	bls.n	d71a <__acle_se_spm_request_read_nse+0x46>
    d70e:	4a0b      	ldr	r2, [pc, #44]	; (d73c <__acle_se_spm_request_read_nse+0x68>)
    d710:	4294      	cmp	r4, r2
    d712:	d909      	bls.n	d728 <__acle_se_spm_request_read_nse+0x54>
    d714:	322d      	adds	r2, #45	; 0x2d
    d716:	4293      	cmp	r3, r2
    d718:	d809      	bhi.n	d72e <__acle_se_spm_request_read_nse+0x5a>
			memcpy(destination, (const void *)addr, len);
    d71a:	462a      	mov	r2, r5
    d71c:	4621      	mov	r1, r4
    d71e:	4630      	mov	r0, r6
    d720:	f007 fbf8 	bl	14f14 <memcpy>
			return 0;
    d724:	2000      	movs	r0, #0
    d726:	e7dc      	b.n	d6e2 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    d728:	4a05      	ldr	r2, [pc, #20]	; (d740 <__acle_se_spm_request_read_nse+0x6c>)
    d72a:	4294      	cmp	r4, r2
    d72c:	d902      	bls.n	d734 <__acle_se_spm_request_read_nse+0x60>
    d72e:	4a05      	ldr	r2, [pc, #20]	; (d744 <__acle_se_spm_request_read_nse+0x70>)
    d730:	4293      	cmp	r3, r2
    d732:	d9f2      	bls.n	d71a <__acle_se_spm_request_read_nse+0x46>
	return -EPERM;
    d734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d738:	e7d3      	b.n	d6e2 <__acle_se_spm_request_read_nse+0xe>
    d73a:	bf00      	nop
    d73c:	00ff01ff 	.word	0x00ff01ff
    d740:	00ff012f 	.word	0x00ff012f
    d744:	00ff0138 	.word	0x00ff0138

0000d748 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    d748:	b570      	push	{r4, r5, r6, lr}
    d74a:	4606      	mov	r6, r0
    d74c:	460d      	mov	r5, r1
    d74e:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    d750:	f007 fb96 	bl	14e80 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    d754:	2801      	cmp	r0, #1
    d756:	d00d      	beq.n	d774 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d758:	4620      	mov	r0, r4
    d75a:	f007 fb91 	bl	14e80 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    d75e:	2801      	cmp	r0, #1
    d760:	d008      	beq.n	d774 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    d762:	4623      	mov	r3, r4
    d764:	462a      	mov	r2, r5
    d766:	4631      	mov	r1, r6
    d768:	4808      	ldr	r0, [pc, #32]	; (d78c <__acle_se_spm_request_random_number_nse+0x44>)
    d76a:	f004 fd1f 	bl	121ac <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    d76e:	6823      	ldr	r3, [r4, #0]
    d770:	42ab      	cmp	r3, r5
    d772:	d001      	beq.n	d778 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    d774:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    d778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d77c:	4671      	mov	r1, lr
    d77e:	4672      	mov	r2, lr
    d780:	4673      	mov	r3, lr
    d782:	46f4      	mov	ip, lr
    d784:	f38e 8c00 	msr	CPSR_fs, lr
    d788:	4774      	bxns	lr
    d78a:	bf00      	nop
    d78c:	200002b8 	.word	0x200002b8

0000d790 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d794:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    d796:	460d      	mov	r5, r1
{
    d798:	b085      	sub	sp, #20
	if (info == NULL) {
    d79a:	b381      	cbz	r1, d7fe <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d79c:	f007 fb70 	bl	14e80 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    d7a0:	2801      	cmp	r0, #1
    d7a2:	d12c      	bne.n	d7fe <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d7a4:	4628      	mov	r0, r5
    d7a6:	f007 fb6b 	bl	14e80 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    d7aa:	2801      	cmp	r0, #1
    d7ac:	d027      	beq.n	d7fe <__acle_se_spm_firmware_info_nse+0x6e>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    d7ae:	f04f 0800 	mov.w	r8, #0
    d7b2:	f8df b05c 	ldr.w	fp, [pc, #92]	; d810 <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d7b6:	f8df a05c 	ldr.w	sl, [pc, #92]	; d814 <__acle_se_spm_firmware_info_nse+0x84>
    d7ba:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    d7bc:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d7c0:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    d7c4:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d7c6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    d7ca:	220c      	movs	r2, #12
    d7cc:	4639      	mov	r1, r7
    d7ce:	4630      	mov	r0, r6
    d7d0:	f007 fb77 	bl	14ec2 <memcmp>
    d7d4:	4604      	mov	r4, r0
    d7d6:	b900      	cbnz	r0, d7da <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    d7d8:	b9a6      	cbnz	r6, d804 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    d7da:	f108 0801 	add.w	r8, r8, #1
    d7de:	f1b8 0f05 	cmp.w	r8, #5
    d7e2:	d1eb      	bne.n	d7bc <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    d7e4:	f06f 040d 	mvn.w	r4, #13
}
    d7e8:	4620      	mov	r0, r4
    d7ea:	b005      	add	sp, #20
    d7ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7f0:	4671      	mov	r1, lr
    d7f2:	4672      	mov	r2, lr
    d7f4:	4673      	mov	r3, lr
    d7f6:	46f4      	mov	ip, lr
    d7f8:	f38e 8c00 	msr	CPSR_fs, lr
    d7fc:	4774      	bxns	lr
		return -EINVAL;
    d7fe:	f06f 0415 	mvn.w	r4, #21
    d802:	e7f1      	b.n	d7e8 <__acle_se_spm_firmware_info_nse+0x58>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    d804:	223c      	movs	r2, #60	; 0x3c
    d806:	4631      	mov	r1, r6
    d808:	4628      	mov	r0, r5
    d80a:	f007 fb83 	bl	14f14 <memcpy>
		return 0;
    d80e:	e7eb      	b.n	d7e8 <__acle_se_spm_firmware_info_nse+0x58>
    d810:	000158a8 	.word	0x000158a8
    d814:	00015770 	.word	0x00015770

0000d818 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    d818:	4801      	ldr	r0, [pc, #4]	; (d820 <nrf_cc3xx_platform_abort_init+0x8>)
    d81a:	f004 bc8b 	b.w	12134 <nrf_cc3xx_platform_set_abort>
    d81e:	bf00      	nop
    d820:	000158bc 	.word	0x000158bc

0000d824 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d824:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    d826:	4604      	mov	r4, r0
    d828:	b918      	cbnz	r0, d832 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    d82a:	4b0d      	ldr	r3, [pc, #52]	; (d860 <mutex_free_platform+0x3c>)
    d82c:	480d      	ldr	r0, [pc, #52]	; (d864 <mutex_free_platform+0x40>)
    d82e:	685b      	ldr	r3, [r3, #4]
    d830:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    d832:	6861      	ldr	r1, [r4, #4]
    d834:	2908      	cmp	r1, #8
    d836:	d00d      	beq.n	d854 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    d838:	f031 0304 	bics.w	r3, r1, #4
    d83c:	d00a      	beq.n	d854 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    d83e:	f011 0102 	ands.w	r1, r1, #2
    d842:	d008      	beq.n	d856 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    d844:	4621      	mov	r1, r4
    d846:	4808      	ldr	r0, [pc, #32]	; (d868 <mutex_free_platform+0x44>)
    d848:	f002 febc 	bl	105c4 <k_mem_slab_free>
        mutex->mutex = NULL;
    d84c:	2300      	movs	r3, #0
    d84e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    d850:	2300      	movs	r3, #0
    d852:	6063      	str	r3, [r4, #4]
}
    d854:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    d856:	2214      	movs	r2, #20
    d858:	6820      	ldr	r0, [r4, #0]
    d85a:	f007 fb66 	bl	14f2a <memset>
    d85e:	e7f7      	b.n	d850 <mutex_free_platform+0x2c>
    d860:	20000098 	.word	0x20000098
    d864:	00015f58 	.word	0x00015f58
    d868:	20000474 	.word	0x20000474

0000d86c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d86c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    d86e:	b1e8      	cbz	r0, d8ac <mutex_lock_platform+0x40>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    d870:	6843      	ldr	r3, [r0, #4]
    d872:	2b04      	cmp	r3, #4
    d874:	d10c      	bne.n	d890 <mutex_lock_platform+0x24>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d876:	2201      	movs	r2, #1
    d878:	6803      	ldr	r3, [r0, #0]
    d87a:	e8d3 1fef 	ldaex	r1, [r3]
    d87e:	2900      	cmp	r1, #0
    d880:	d103      	bne.n	d88a <mutex_lock_platform+0x1e>
    d882:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d886:	2800      	cmp	r0, #0
    d888:	d1f7      	bne.n	d87a <mutex_lock_platform+0xe>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d88a:	d10b      	bne.n	d8a4 <mutex_lock_platform+0x38>
    d88c:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    d88e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    d890:	b153      	cbz	r3, d8a8 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    d892:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    d894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d89c:	f003 f806 	bl	108ac <z_impl_k_mutex_lock>
        if (ret == 0) {
    d8a0:	2800      	cmp	r0, #0
    d8a2:	d0f3      	beq.n	d88c <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d8a4:	4803      	ldr	r0, [pc, #12]	; (d8b4 <mutex_lock_platform+0x48>)
    d8a6:	e7f2      	b.n	d88e <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    d8a8:	4803      	ldr	r0, [pc, #12]	; (d8b8 <mutex_lock_platform+0x4c>)
    d8aa:	e7f0      	b.n	d88e <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    d8ac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d8b0:	e7ed      	b.n	d88e <mutex_lock_platform+0x22>
    d8b2:	bf00      	nop
    d8b4:	ffff8fe9 	.word	0xffff8fe9
    d8b8:	ffff8fea 	.word	0xffff8fea

0000d8bc <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d8bc:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    d8be:	b1b0      	cbz	r0, d8ee <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    d8c0:	6843      	ldr	r3, [r0, #4]
    d8c2:	2b04      	cmp	r3, #4
    d8c4:	d10d      	bne.n	d8e2 <mutex_unlock_platform+0x26>
    d8c6:	2200      	movs	r2, #0
    d8c8:	6803      	ldr	r3, [r0, #0]
    d8ca:	e8d3 1fef 	ldaex	r1, [r3]
    d8ce:	2901      	cmp	r1, #1
    d8d0:	d103      	bne.n	d8da <mutex_unlock_platform+0x1e>
    d8d2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d8d6:	2800      	cmp	r0, #0
    d8d8:	d1f7      	bne.n	d8ca <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d8da:	4807      	ldr	r0, [pc, #28]	; (d8f8 <mutex_unlock_platform+0x3c>)
    d8dc:	bf08      	it	eq
    d8de:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    d8e0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    d8e2:	b13b      	cbz	r3, d8f4 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    d8e4:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    d8e6:	f003 f8b3 	bl	10a50 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    d8ea:	2000      	movs	r0, #0
    d8ec:	e7f8      	b.n	d8e0 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    d8ee:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d8f2:	e7f5      	b.n	d8e0 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    d8f4:	4801      	ldr	r0, [pc, #4]	; (d8fc <mutex_unlock_platform+0x40>)
    d8f6:	e7f3      	b.n	d8e0 <mutex_unlock_platform+0x24>
    d8f8:	ffff8fe9 	.word	0xffff8fe9
    d8fc:	ffff8fea 	.word	0xffff8fea

0000d900 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d900:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    d902:	4604      	mov	r4, r0
    d904:	b918      	cbnz	r0, d90e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    d906:	4b16      	ldr	r3, [pc, #88]	; (d960 <mutex_init_platform+0x60>)
    d908:	4816      	ldr	r0, [pc, #88]	; (d964 <mutex_init_platform+0x64>)
    d90a:	685b      	ldr	r3, [r3, #4]
    d90c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    d90e:	6863      	ldr	r3, [r4, #4]
    d910:	2b04      	cmp	r3, #4
    d912:	d023      	beq.n	d95c <mutex_init_platform+0x5c>
    d914:	2b08      	cmp	r3, #8
    d916:	d021      	beq.n	d95c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    d918:	b9cb      	cbnz	r3, d94e <mutex_init_platform+0x4e>
    d91a:	6823      	ldr	r3, [r4, #0]
    d91c:	b9bb      	cbnz	r3, d94e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    d91e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d926:	4621      	mov	r1, r4
    d928:	480f      	ldr	r0, [pc, #60]	; (d968 <mutex_init_platform+0x68>)
    d92a:	f002 fdf1 	bl	10510 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    d92e:	b908      	cbnz	r0, d934 <mutex_init_platform+0x34>
    d930:	6823      	ldr	r3, [r4, #0]
    d932:	b91b      	cbnz	r3, d93c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    d934:	4b0a      	ldr	r3, [pc, #40]	; (d960 <mutex_init_platform+0x60>)
    d936:	480d      	ldr	r0, [pc, #52]	; (d96c <mutex_init_platform+0x6c>)
    d938:	685b      	ldr	r3, [r3, #4]
    d93a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    d93c:	2214      	movs	r2, #20
    d93e:	2100      	movs	r1, #0
    d940:	6820      	ldr	r0, [r4, #0]
    d942:	f007 faf2 	bl	14f2a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    d946:	6863      	ldr	r3, [r4, #4]
    d948:	f043 0302 	orr.w	r3, r3, #2
    d94c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    d94e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    d950:	f007 fd2c 	bl	153ac <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    d954:	6863      	ldr	r3, [r4, #4]
    d956:	f043 0301 	orr.w	r3, r3, #1
    d95a:	6063      	str	r3, [r4, #4]
}
    d95c:	bd10      	pop	{r4, pc}
    d95e:	bf00      	nop
    d960:	20000098 	.word	0x20000098
    d964:	00015f58 	.word	0x00015f58
    d968:	20000474 	.word	0x20000474
    d96c:	00015f7e 	.word	0x00015f7e

0000d970 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    d970:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    d972:	4906      	ldr	r1, [pc, #24]	; (d98c <nrf_cc3xx_platform_mutex_init+0x1c>)
    d974:	2340      	movs	r3, #64	; 0x40
    d976:	2214      	movs	r2, #20
    d978:	4805      	ldr	r0, [pc, #20]	; (d990 <nrf_cc3xx_platform_mutex_init+0x20>)
    d97a:	f007 fce4 	bl	15346 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    d97e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    d982:	4904      	ldr	r1, [pc, #16]	; (d994 <nrf_cc3xx_platform_mutex_init+0x24>)
    d984:	4804      	ldr	r0, [pc, #16]	; (d998 <nrf_cc3xx_platform_mutex_init+0x28>)
    d986:	f004 bc89 	b.w	1229c <nrf_cc3xx_platform_set_mutexes>
    d98a:	bf00      	nop
    d98c:	20000494 	.word	0x20000494
    d990:	20000474 	.word	0x20000474
    d994:	000158d4 	.word	0x000158d4
    d998:	000158c4 	.word	0x000158c4

0000d99c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d99c:	4901      	ldr	r1, [pc, #4]	; (d9a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d99e:	2210      	movs	r2, #16
	str	r2, [r1]
    d9a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d9a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d9a4:	e000ed10 	.word	0xe000ed10

0000d9a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d9a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d9aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d9ac:	f380 8811 	msr	BASEPRI, r0
	isb
    d9b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d9b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d9b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d9ba:	b662      	cpsie	i
	isb
    d9bc:	f3bf 8f6f 	isb	sy

	bx	lr
    d9c0:	4770      	bx	lr
    d9c2:	bf00      	nop

0000d9c4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d9c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d9c6:	4605      	mov	r5, r0

	if (esf != NULL) {
    d9c8:	460c      	mov	r4, r1
    d9ca:	b1c9      	cbz	r1, da00 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d9cc:	688b      	ldr	r3, [r1, #8]
    d9ce:	4810      	ldr	r0, [pc, #64]	; (da10 <z_arm_fatal_error+0x4c>)
    d9d0:	9300      	str	r3, [sp, #0]
    d9d2:	e9d1 2300 	ldrd	r2, r3, [r1]
    d9d6:	2145      	movs	r1, #69	; 0x45
    d9d8:	f007 f9c8 	bl	14d6c <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d9dc:	6963      	ldr	r3, [r4, #20]
    d9de:	2145      	movs	r1, #69	; 0x45
    d9e0:	9300      	str	r3, [sp, #0]
    d9e2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    d9e6:	480b      	ldr	r0, [pc, #44]	; (da14 <z_arm_fatal_error+0x50>)
    d9e8:	f007 f9c0 	bl	14d6c <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d9ec:	2145      	movs	r1, #69	; 0x45
    d9ee:	69e2      	ldr	r2, [r4, #28]
    d9f0:	4809      	ldr	r0, [pc, #36]	; (da18 <z_arm_fatal_error+0x54>)
    d9f2:	f007 f9bb 	bl	14d6c <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d9f6:	2145      	movs	r1, #69	; 0x45
    d9f8:	69a2      	ldr	r2, [r4, #24]
    d9fa:	4808      	ldr	r0, [pc, #32]	; (da1c <z_arm_fatal_error+0x58>)
    d9fc:	f007 f9b6 	bl	14d6c <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    da00:	4621      	mov	r1, r4
    da02:	4628      	mov	r0, r5
}
    da04:	b003      	add	sp, #12
    da06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    da0a:	f002 bc23 	b.w	10254 <z_fatal_error>
    da0e:	bf00      	nop
    da10:	00015fab 	.word	0x00015fab
    da14:	00015fdf 	.word	0x00015fdf
    da18:	00016013 	.word	0x00016013
    da1c:	00016027 	.word	0x00016027

0000da20 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    da20:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    da22:	2b00      	cmp	r3, #0
    da24:	db08      	blt.n	da38 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    da26:	2201      	movs	r2, #1
    da28:	f000 001f 	and.w	r0, r0, #31
    da2c:	fa02 f000 	lsl.w	r0, r2, r0
    da30:	4a02      	ldr	r2, [pc, #8]	; (da3c <arch_irq_enable+0x1c>)
    da32:	095b      	lsrs	r3, r3, #5
    da34:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    da38:	4770      	bx	lr
    da3a:	bf00      	nop
    da3c:	e000e100 	.word	0xe000e100

0000da40 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    da40:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    da42:	2b00      	cmp	r3, #0
    da44:	db0d      	blt.n	da62 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    da46:	2201      	movs	r2, #1
    da48:	f000 001f 	and.w	r0, r0, #31
    da4c:	fa02 f000 	lsl.w	r0, r2, r0
    da50:	095b      	lsrs	r3, r3, #5
    da52:	4a04      	ldr	r2, [pc, #16]	; (da64 <arch_irq_disable+0x24>)
    da54:	3320      	adds	r3, #32
    da56:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    da5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    da5e:	f3bf 8f6f 	isb	sy
}
    da62:	4770      	bx	lr
    da64:	e000e100 	.word	0xe000e100

0000da68 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    da68:	4b05      	ldr	r3, [pc, #20]	; (da80 <arch_irq_is_enabled+0x18>)
    da6a:	0942      	lsrs	r2, r0, #5
    da6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    da70:	2301      	movs	r3, #1
    da72:	f000 001f 	and.w	r0, r0, #31
    da76:	fa03 f000 	lsl.w	r0, r3, r0
}
    da7a:	4010      	ands	r0, r2
    da7c:	4770      	bx	lr
    da7e:	bf00      	nop
    da80:	e000e100 	.word	0xe000e100

0000da84 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    da84:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    da86:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    da88:	2c07      	cmp	r4, #7
{
    da8a:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    da8c:	d908      	bls.n	daa0 <z_arm_irq_priority_set+0x1c>
    da8e:	490d      	ldr	r1, [pc, #52]	; (dac4 <z_arm_irq_priority_set+0x40>)
    da90:	480d      	ldr	r0, [pc, #52]	; (dac8 <z_arm_irq_priority_set+0x44>)
    da92:	2257      	movs	r2, #87	; 0x57
    da94:	f007 f8d6 	bl	14c44 <printk>
    da98:	2157      	movs	r1, #87	; 0x57
    da9a:	480a      	ldr	r0, [pc, #40]	; (dac4 <z_arm_irq_priority_set+0x40>)
    da9c:	f007 f958 	bl	14d50 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    daa0:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    daa2:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    daa4:	bfac      	ite	ge
    daa6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    daaa:	4b08      	ldrlt	r3, [pc, #32]	; (dacc <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    daac:	ea4f 1444 	mov.w	r4, r4, lsl #5
    dab0:	b2e4      	uxtb	r4, r4
    dab2:	bfab      	itete	ge
    dab4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dab8:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dabc:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dac0:	555c      	strblt	r4, [r3, r5]
}
    dac2:	bd38      	pop	{r3, r4, r5, pc}
    dac4:	0001605a 	.word	0x0001605a
    dac8:	00015be5 	.word	0x00015be5
    dacc:	e000ed14 	.word	0xe000ed14

0000dad0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dad0:	bf30      	wfi
    b z_SysNmiOnReset
    dad2:	f7ff bffd 	b.w	dad0 <z_SysNmiOnReset>
    dad6:	bf00      	nop

0000dad8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dad8:	4a0b      	ldr	r2, [pc, #44]	; (db08 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    dada:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    dadc:	4b0b      	ldr	r3, [pc, #44]	; (db0c <z_arm_prep_c+0x34>)
    dade:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    dae2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    dae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    dae8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    daec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    daf0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    daf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    daf8:	f002 fc22 	bl	10340 <z_bss_zero>
	z_data_copy();
    dafc:	f004 f820 	bl	11b40 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    db00:	f000 fb5a 	bl	e1b8 <z_arm_interrupt_init>
	z_cstart();
    db04:	f002 fc5c 	bl	103c0 <z_cstart>
    db08:	0000c200 	.word	0x0000c200
    db0c:	e000ed00 	.word	0xe000ed00

0000db10 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    db10:	4a09      	ldr	r2, [pc, #36]	; (db38 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    db12:	490a      	ldr	r1, [pc, #40]	; (db3c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    db14:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    db16:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    db18:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    db1a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    db1c:	4908      	ldr	r1, [pc, #32]	; (db40 <arch_swap+0x30>)
    db1e:	684b      	ldr	r3, [r1, #4]
    db20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    db24:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    db26:	2300      	movs	r3, #0
    db28:	f383 8811 	msr	BASEPRI, r3
    db2c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    db30:	6893      	ldr	r3, [r2, #8]
}
    db32:	6f98      	ldr	r0, [r3, #120]	; 0x78
    db34:	4770      	bx	lr
    db36:	bf00      	nop
    db38:	20000a58 	.word	0x20000a58
    db3c:	000159ec 	.word	0x000159ec
    db40:	e000ed00 	.word	0xe000ed00

0000db44 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    db44:	4913      	ldr	r1, [pc, #76]	; (db94 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    db46:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    db48:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    db4c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    db4e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    db52:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    db56:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    db58:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    db5c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    db60:	4f0d      	ldr	r7, [pc, #52]	; (db98 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    db62:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    db66:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    db68:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    db6a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    db6c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    db6e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    db70:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    db72:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    db76:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    db7a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    db7e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    db82:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    db86:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    db88:	f007 f96d 	bl	14e66 <configure_builtin_stack_guard>
    pop {r2, lr}
    db8c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    db90:	4770      	bx	lr
    db92:	0000      	.short	0x0000
    ldr r1, =_kernel
    db94:	20000a58 	.word	0x20000a58
    ldr v4, =_SCS_ICSR
    db98:	e000ed04 	.word	0xe000ed04

0000db9c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    db9c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    dba0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    dba2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    dba6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    dbaa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    dbac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    dbb0:	2902      	cmp	r1, #2
    beq _oops
    dbb2:	d0ff      	beq.n	dbb4 <_oops>

0000dbb4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    dbb4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    dbb6:	f007 f918 	bl	14dea <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    dbba:	bd01      	pop	{r0, pc}

0000dbbc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    dbbc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    dbc0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    dbc2:	490b      	ldr	r1, [pc, #44]	; (dbf0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    dbc4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    dbc8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    dbca:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    dbce:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    dbd2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    dbd4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    dbd8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    dbdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    dbe0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    dbe4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    dbe6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    dbe8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    dbea:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dbec:	4770      	bx	lr
    dbee:	bf00      	nop
    dbf0:	00014c85 	.word	0x00014c85

0000dbf4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    dbf4:	4b08      	ldr	r3, [pc, #32]	; (dc18 <arch_switch_to_main_thread+0x24>)
    dbf6:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dbf8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    dbfa:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dbfe:	4610      	mov	r0, r2
    dc00:	f381 8809 	msr	PSP, r1
    dc04:	2100      	movs	r1, #0
    dc06:	b663      	cpsie	if
    dc08:	f381 8811 	msr	BASEPRI, r1
    dc0c:	f3bf 8f6f 	isb	sy
    dc10:	2200      	movs	r2, #0
    dc12:	2300      	movs	r3, #0
    dc14:	f007 f836 	bl	14c84 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dc18:	20000a58 	.word	0x20000a58

0000dc1c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dc1c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    dc1e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dc20:	4a0b      	ldr	r2, [pc, #44]	; (dc50 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dc22:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    dc24:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dc26:	bf1e      	ittt	ne
	movne	r1, #0
    dc28:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dc2a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    dc2c:	f007 fbaf 	blne	1538e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dc30:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dc32:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dc36:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dc3a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    dc3e:	4905      	ldr	r1, [pc, #20]	; (dc54 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dc40:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dc42:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    dc44:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dc46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dc4a:	4903      	ldr	r1, [pc, #12]	; (dc58 <_isr_wrapper+0x3c>)
	bx r1
    dc4c:	4708      	bx	r1
    dc4e:	0000      	.short	0x0000
	ldr r2, =_kernel
    dc50:	20000a58 	.word	0x20000a58
	ldr r1, =_sw_isr_table
    dc54:	000154f0 	.word	0x000154f0
	ldr r1, =z_arm_int_exit
    dc58:	0000dc5d 	.word	0x0000dc5d

0000dc5c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    dc5c:	4b04      	ldr	r3, [pc, #16]	; (dc70 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    dc5e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    dc60:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    dc62:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    dc64:	d003      	beq.n	dc6e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    dc66:	4903      	ldr	r1, [pc, #12]	; (dc74 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    dc68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    dc6c:	600a      	str	r2, [r1, #0]

0000dc6e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    dc6e:	4770      	bx	lr
	ldr r3, =_kernel
    dc70:	20000a58 	.word	0x20000a58
	ldr r1, =_SCS_ICSR
    dc74:	e000ed04 	.word	0xe000ed04

0000dc78 <secure_fault.constprop.0>:
 * @brief Dump SecureFault information
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void secure_fault(const z_arch_esf_t *esf)
    dc78:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    dc7a:	4c24      	ldr	r4, [pc, #144]	; (dd0c <secure_fault.constprop.0+0x94>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    dc7c:	4824      	ldr	r0, [pc, #144]	; (dd10 <secure_fault.constprop.0+0x98>)
    dc7e:	2145      	movs	r1, #69	; 0x45
    dc80:	f007 f874 	bl	14d6c <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    dc84:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    dc88:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dc8c:	0658      	lsls	r0, r3, #25
    dc8e:	d503      	bpl.n	dc98 <secure_fault.constprop.0+0x20>
		PR_EXC("  Address: 0x%x", sfar);
    dc90:	2145      	movs	r1, #69	; 0x45
    dc92:	4820      	ldr	r0, [pc, #128]	; (dd14 <secure_fault.constprop.0+0x9c>)
    dc94:	f007 f86a 	bl	14d6c <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    dc98:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dc9c:	07d9      	lsls	r1, r3, #31
    dc9e:	d50b      	bpl.n	dcb8 <secure_fault.constprop.0+0x40>
		PR_FAULT_INFO("  Invalid entry point");
    dca0:	2145      	movs	r1, #69	; 0x45
    dca2:	481d      	ldr	r0, [pc, #116]	; (dd18 <secure_fault.constprop.0+0xa0>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    dca4:	f007 f862 	bl	14d6c <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    dca8:	4a18      	ldr	r2, [pc, #96]	; (dd0c <secure_fault.constprop.0+0x94>)
    dcaa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dcae:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    dcb2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
}
    dcb6:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    dcb8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dcbc:	079a      	lsls	r2, r3, #30
    dcbe:	d502      	bpl.n	dcc6 <secure_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Invalid integrity signature");
    dcc0:	2145      	movs	r1, #69	; 0x45
    dcc2:	4816      	ldr	r0, [pc, #88]	; (dd1c <secure_fault.constprop.0+0xa4>)
    dcc4:	e7ee      	b.n	dca4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    dcc6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dcca:	075b      	lsls	r3, r3, #29
    dccc:	d502      	bpl.n	dcd4 <secure_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Invalid exception return");
    dcce:	2145      	movs	r1, #69	; 0x45
    dcd0:	4813      	ldr	r0, [pc, #76]	; (dd20 <secure_fault.constprop.0+0xa8>)
    dcd2:	e7e7      	b.n	dca4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    dcd4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dcd8:	0718      	lsls	r0, r3, #28
    dcda:	d502      	bpl.n	dce2 <secure_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Attribution unit violation");
    dcdc:	2145      	movs	r1, #69	; 0x45
    dcde:	4811      	ldr	r0, [pc, #68]	; (dd24 <secure_fault.constprop.0+0xac>)
    dce0:	e7e0      	b.n	dca4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    dce2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dce6:	06d9      	lsls	r1, r3, #27
    dce8:	d502      	bpl.n	dcf0 <secure_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Invalid transition");
    dcea:	2145      	movs	r1, #69	; 0x45
    dcec:	480e      	ldr	r0, [pc, #56]	; (dd28 <secure_fault.constprop.0+0xb0>)
    dcee:	e7d9      	b.n	dca4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    dcf0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dcf4:	069a      	lsls	r2, r3, #26
    dcf6:	d502      	bpl.n	dcfe <secure_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Lazy state preservation");
    dcf8:	2145      	movs	r1, #69	; 0x45
    dcfa:	480c      	ldr	r0, [pc, #48]	; (dd2c <secure_fault.constprop.0+0xb4>)
    dcfc:	e7d2      	b.n	dca4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    dcfe:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    dd02:	061b      	lsls	r3, r3, #24
    dd04:	d5d0      	bpl.n	dca8 <secure_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Lazy state error");
    dd06:	2145      	movs	r1, #69	; 0x45
    dd08:	4809      	ldr	r0, [pc, #36]	; (dd30 <secure_fault.constprop.0+0xb8>)
    dd0a:	e7cb      	b.n	dca4 <secure_fault.constprop.0+0x2c>
    dd0c:	e000ed00 	.word	0xe000ed00
    dd10:	00016090 	.word	0x00016090
    dd14:	000160ae 	.word	0x000160ae
    dd18:	000160c3 	.word	0x000160c3
    dd1c:	000160de 	.word	0x000160de
    dd20:	00016101 	.word	0x00016101
    dd24:	00016121 	.word	0x00016121
    dd28:	00016143 	.word	0x00016143
    dd2c:	0001615d 	.word	0x0001615d
    dd30:	0001617c 	.word	0x0001617c

0000dd34 <usage_fault.constprop.0>:
static uint32_t usage_fault(const z_arch_esf_t *esf)
    dd34:	b538      	push	{r3, r4, r5, lr}
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dd36:	4c21      	ldr	r4, [pc, #132]	; (ddbc <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dd38:	2145      	movs	r1, #69	; 0x45
    dd3a:	4821      	ldr	r0, [pc, #132]	; (ddc0 <usage_fault.constprop.0+0x8c>)
    dd3c:	f007 f816 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dd40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd42:	019d      	lsls	r5, r3, #6
    dd44:	d503      	bpl.n	dd4e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    dd46:	2145      	movs	r1, #69	; 0x45
    dd48:	481e      	ldr	r0, [pc, #120]	; (ddc4 <usage_fault.constprop.0+0x90>)
    dd4a:	f007 f80f 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dd4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd50:	01dc      	lsls	r4, r3, #7
    dd52:	d503      	bpl.n	dd5c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    dd54:	2145      	movs	r1, #69	; 0x45
    dd56:	481c      	ldr	r0, [pc, #112]	; (ddc8 <usage_fault.constprop.0+0x94>)
    dd58:	f007 f808 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dd5c:	4d17      	ldr	r5, [pc, #92]	; (ddbc <usage_fault.constprop.0+0x88>)
    dd5e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    dd60:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    dd64:	d004      	beq.n	dd70 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dd66:	2145      	movs	r1, #69	; 0x45
    dd68:	4818      	ldr	r0, [pc, #96]	; (ddcc <usage_fault.constprop.0+0x98>)
    dd6a:	f006 ffff 	bl	14d6c <z_log_minimal_printk>
		reason = K_ERR_STACK_CHK_FAIL;
    dd6e:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dd70:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd72:	0318      	lsls	r0, r3, #12
    dd74:	d503      	bpl.n	dd7e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    dd76:	2145      	movs	r1, #69	; 0x45
    dd78:	4815      	ldr	r0, [pc, #84]	; (ddd0 <usage_fault.constprop.0+0x9c>)
    dd7a:	f006 fff7 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dd7e:	4d0f      	ldr	r5, [pc, #60]	; (ddbc <usage_fault.constprop.0+0x88>)
    dd80:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd82:	0359      	lsls	r1, r3, #13
    dd84:	d503      	bpl.n	dd8e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dd86:	2145      	movs	r1, #69	; 0x45
    dd88:	4812      	ldr	r0, [pc, #72]	; (ddd4 <usage_fault.constprop.0+0xa0>)
    dd8a:	f006 ffef 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dd8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd90:	039a      	lsls	r2, r3, #14
    dd92:	d503      	bpl.n	dd9c <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dd94:	2145      	movs	r1, #69	; 0x45
    dd96:	4810      	ldr	r0, [pc, #64]	; (ddd8 <usage_fault.constprop.0+0xa4>)
    dd98:	f006 ffe8 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dd9c:	4d07      	ldr	r5, [pc, #28]	; (ddbc <usage_fault.constprop.0+0x88>)
    dd9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dda0:	03db      	lsls	r3, r3, #15
    dda2:	d503      	bpl.n	ddac <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dda4:	2145      	movs	r1, #69	; 0x45
    dda6:	480d      	ldr	r0, [pc, #52]	; (dddc <usage_fault.constprop.0+0xa8>)
    dda8:	f006 ffe0 	bl	14d6c <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ddac:	6aab      	ldr	r3, [r5, #40]	; 0x28
}
    ddae:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ddb0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ddb4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ddb8:	62ab      	str	r3, [r5, #40]	; 0x28
}
    ddba:	bd38      	pop	{r3, r4, r5, pc}
    ddbc:	e000ed00 	.word	0xe000ed00
    ddc0:	00016194 	.word	0x00016194
    ddc4:	000161b1 	.word	0x000161b1
    ddc8:	000161c9 	.word	0x000161c9
    ddcc:	000161e8 	.word	0x000161e8
    ddd0:	00016217 	.word	0x00016217
    ddd4:	0001623a 	.word	0x0001623a
    ddd8:	00016264 	.word	0x00016264
    dddc:	00016283 	.word	0x00016283

0000dde0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dde0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dde2:	4c23      	ldr	r4, [pc, #140]	; (de70 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dde4:	4606      	mov	r6, r0
    dde6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dde8:	4822      	ldr	r0, [pc, #136]	; (de74 <bus_fault.constprop.0+0x94>)
    ddea:	2145      	movs	r1, #69	; 0x45
    ddec:	f006 ffbe 	bl	14d6c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ddf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddf2:	04d9      	lsls	r1, r3, #19
    ddf4:	d503      	bpl.n	ddfe <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    ddf6:	2145      	movs	r1, #69	; 0x45
    ddf8:	481f      	ldr	r0, [pc, #124]	; (de78 <bus_fault.constprop.0+0x98>)
    ddfa:	f006 ffb7 	bl	14d6c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    ddfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de00:	051a      	lsls	r2, r3, #20
    de02:	d503      	bpl.n	de0c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    de04:	2145      	movs	r1, #69	; 0x45
    de06:	481d      	ldr	r0, [pc, #116]	; (de7c <bus_fault.constprop.0+0x9c>)
    de08:	f006 ffb0 	bl	14d6c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    de0c:	4c18      	ldr	r4, [pc, #96]	; (de70 <bus_fault.constprop.0+0x90>)
    de0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de10:	059b      	lsls	r3, r3, #22
    de12:	d510      	bpl.n	de36 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    de14:	481a      	ldr	r0, [pc, #104]	; (de80 <bus_fault.constprop.0+0xa0>)
    de16:	2145      	movs	r1, #69	; 0x45
    de18:	f006 ffa8 	bl	14d6c <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    de1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    de1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de20:	0418      	lsls	r0, r3, #16
    de22:	d508      	bpl.n	de36 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    de24:	2145      	movs	r1, #69	; 0x45
    de26:	4817      	ldr	r0, [pc, #92]	; (de84 <bus_fault.constprop.0+0xa4>)
    de28:	f006 ffa0 	bl	14d6c <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    de2c:	b11e      	cbz	r6, de36 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    de2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    de34:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    de36:	4c0e      	ldr	r4, [pc, #56]	; (de70 <bus_fault.constprop.0+0x90>)
    de38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de3a:	0559      	lsls	r1, r3, #21
    de3c:	d503      	bpl.n	de46 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    de3e:	2145      	movs	r1, #69	; 0x45
    de40:	4811      	ldr	r0, [pc, #68]	; (de88 <bus_fault.constprop.0+0xa8>)
    de42:	f006 ff93 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    de46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de48:	05da      	lsls	r2, r3, #23
    de4a:	d50b      	bpl.n	de64 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    de4c:	2145      	movs	r1, #69	; 0x45
    de4e:	480f      	ldr	r0, [pc, #60]	; (de8c <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    de50:	f006 ff8c 	bl	14d6c <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    de54:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    de56:	4a06      	ldr	r2, [pc, #24]	; (de70 <bus_fault.constprop.0+0x90>)
    de58:	6a93      	ldr	r3, [r2, #40]	; 0x28
    de5a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    de5e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    de60:	7028      	strb	r0, [r5, #0]
}
    de62:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    de64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de66:	049b      	lsls	r3, r3, #18
    de68:	d5f4      	bpl.n	de54 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    de6a:	2145      	movs	r1, #69	; 0x45
    de6c:	4808      	ldr	r0, [pc, #32]	; (de90 <bus_fault.constprop.0+0xb0>)
    de6e:	e7ef      	b.n	de50 <bus_fault.constprop.0+0x70>
    de70:	e000ed00 	.word	0xe000ed00
    de74:	000162b3 	.word	0x000162b3
    de78:	000162ce 	.word	0x000162ce
    de7c:	000162e4 	.word	0x000162e4
    de80:	000162fc 	.word	0x000162fc
    de84:	0001631a 	.word	0x0001631a
    de88:	00016334 	.word	0x00016334
    de8c:	00016354 	.word	0x00016354
    de90:	00016371 	.word	0x00016371

0000de94 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    de94:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    de96:	4c2b      	ldr	r4, [pc, #172]	; (df44 <mem_manage_fault.constprop.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    de98:	4606      	mov	r6, r0
    de9a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    de9c:	482a      	ldr	r0, [pc, #168]	; (df48 <mem_manage_fault.constprop.0+0xb4>)
    de9e:	2145      	movs	r1, #69	; 0x45
    dea0:	f006 ff64 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dea6:	06d8      	lsls	r0, r3, #27
    dea8:	d503      	bpl.n	deb2 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    deaa:	2145      	movs	r1, #69	; 0x45
    deac:	4827      	ldr	r0, [pc, #156]	; (df4c <mem_manage_fault.constprop.0+0xb8>)
    deae:	f006 ff5d 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    deb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    deb4:	0719      	lsls	r1, r3, #28
    deb6:	d503      	bpl.n	dec0 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    deb8:	2145      	movs	r1, #69	; 0x45
    deba:	4825      	ldr	r0, [pc, #148]	; (df50 <mem_manage_fault.constprop.0+0xbc>)
    debc:	f006 ff56 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dec0:	4c20      	ldr	r4, [pc, #128]	; (df44 <mem_manage_fault.constprop.0+0xb0>)
    dec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dec4:	079a      	lsls	r2, r3, #30
    dec6:	d510      	bpl.n	deea <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    dec8:	2145      	movs	r1, #69	; 0x45
    deca:	4822      	ldr	r0, [pc, #136]	; (df54 <mem_manage_fault.constprop.0+0xc0>)
    decc:	f006 ff4e 	bl	14d6c <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    ded0:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ded2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ded4:	061b      	lsls	r3, r3, #24
    ded6:	d508      	bpl.n	deea <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ded8:	2145      	movs	r1, #69	; 0x45
    deda:	481f      	ldr	r0, [pc, #124]	; (df58 <mem_manage_fault.constprop.0+0xc4>)
    dedc:	f006 ff46 	bl	14d6c <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    dee0:	b11e      	cbz	r6, deea <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dee2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dee8:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    deea:	4c16      	ldr	r4, [pc, #88]	; (df44 <mem_manage_fault.constprop.0+0xb0>)
    deec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    deee:	07de      	lsls	r6, r3, #31
    def0:	d503      	bpl.n	defa <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    def2:	2145      	movs	r1, #69	; 0x45
    def4:	4819      	ldr	r0, [pc, #100]	; (df5c <mem_manage_fault.constprop.0+0xc8>)
    def6:	f006 ff39 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    defa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    defc:	0698      	lsls	r0, r3, #26
    defe:	d503      	bpl.n	df08 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    df00:	2145      	movs	r1, #69	; 0x45
    df02:	4817      	ldr	r0, [pc, #92]	; (df60 <mem_manage_fault.constprop.0+0xcc>)
    df04:	f006 ff32 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    df08:	4b0e      	ldr	r3, [pc, #56]	; (df44 <mem_manage_fault.constprop.0+0xb0>)
    df0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df0c:	06d1      	lsls	r1, r2, #27
    df0e:	d402      	bmi.n	df16 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    df10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    df12:	0792      	lsls	r2, r2, #30
    df14:	d50d      	bpl.n	df32 <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    df16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df18:	06db      	lsls	r3, r3, #27
    df1a:	d50a      	bpl.n	df32 <mem_manage_fault.constprop.0+0x9e>
    df1c:	4911      	ldr	r1, [pc, #68]	; (df64 <mem_manage_fault.constprop.0+0xd0>)
    df1e:	4812      	ldr	r0, [pc, #72]	; (df68 <mem_manage_fault.constprop.0+0xd4>)
    df20:	f240 124f 	movw	r2, #335	; 0x14f
    df24:	f006 fe8e 	bl	14c44 <printk>
    df28:	f240 114f 	movw	r1, #335	; 0x14f
    df2c:	480d      	ldr	r0, [pc, #52]	; (df64 <mem_manage_fault.constprop.0+0xd0>)
    df2e:	f006 ff0f 	bl	14d50 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
    df32:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    df34:	4a03      	ldr	r2, [pc, #12]	; (df44 <mem_manage_fault.constprop.0+0xb0>)
    df36:	6a93      	ldr	r3, [r2, #40]	; 0x28
    df38:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    df3c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    df3e:	7028      	strb	r0, [r5, #0]
}
    df40:	bd70      	pop	{r4, r5, r6, pc}
    df42:	bf00      	nop
    df44:	e000ed00 	.word	0xe000ed00
    df48:	000163a5 	.word	0x000163a5
    df4c:	000163c0 	.word	0x000163c0
    df50:	000162e4 	.word	0x000162e4
    df54:	000163f8 	.word	0x000163f8
    df58:	00016415 	.word	0x00016415
    df5c:	00016430 	.word	0x00016430
    df60:	00016371 	.word	0x00016371
    df64:	00016454 	.word	0x00016454
    df68:	00015be5 	.word	0x00015be5

0000df6c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    df6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df70:	4b78      	ldr	r3, [pc, #480]	; (e154 <z_arm_fault+0x1e8>)
{
    df72:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df74:	685c      	ldr	r4, [r3, #4]
    df76:	2600      	movs	r6, #0
{
    df78:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    df7a:	f3c4 0708 	ubfx	r7, r4, #0, #9
    df7e:	f386 8811 	msr	BASEPRI, r6
    df82:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    df86:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    df8a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    df8e:	d11e      	bne.n	dfce <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    df90:	f012 0301 	ands.w	r3, r2, #1
    df94:	d039      	beq.n	e00a <z_arm_fault+0x9e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    df96:	f012 0340 	ands.w	r3, r2, #64	; 0x40
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    df9a:	f002 0808 	and.w	r8, r2, #8
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    df9e:	f040 80d1 	bne.w	e144 <z_arm_fault+0x1d8>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    dfa2:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    dfa4:	bf54      	ite	pl
    dfa6:	4605      	movpl	r5, r0
	*nested_exc = false;
    dfa8:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    dfaa:	682a      	ldr	r2, [r5, #0]
    dfac:	4b6a      	ldr	r3, [pc, #424]	; (e158 <z_arm_fault+0x1ec>)
			*nested_exc = true;
    dfae:	bf58      	it	pl
    dfb0:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    dfb2:	4413      	add	r3, r2
    dfb4:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    dfb6:	bf98      	it	ls
    dfb8:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    dfba:	2145      	movs	r1, #69	; 0x45
    dfbc:	4867      	ldr	r0, [pc, #412]	; (e15c <z_arm_fault+0x1f0>)
    dfbe:	f006 fed5 	bl	14d6c <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    dfc2:	f1b8 0f00 	cmp.w	r8, #0
    dfc6:	d01d      	beq.n	e004 <z_arm_fault+0x98>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    dfc8:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    dfcc:	b95d      	cbnz	r5, dfe6 <z_arm_fault+0x7a>
    dfce:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
    dfd2:	4963      	ldr	r1, [pc, #396]	; (e160 <z_arm_fault+0x1f4>)
    dfd4:	4863      	ldr	r0, [pc, #396]	; (e164 <z_arm_fault+0x1f8>)
    dfd6:	f006 fe35 	bl	14c44 <printk>
    dfda:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
    dfde:	4860      	ldr	r0, [pc, #384]	; (e160 <z_arm_fault+0x1f4>)
    dfe0:	f006 feb6 	bl	14d50 <assert_post_action>
    dfe4:	2500      	movs	r5, #0
	*recoverable = false;
    dfe6:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    dfea:	1efb      	subs	r3, r7, #3
	*recoverable = false;
    dfec:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    dff0:	2b09      	cmp	r3, #9
    dff2:	f200 8095 	bhi.w	e120 <z_arm_fault+0x1b4>
    dff6:	e8df f003 	tbb	[pc, r3]
    dffa:	840a      	.short	0x840a
    dffc:	938c6688 	.word	0x938c6688
    e000:	90939393 	.word	0x90939393
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    e004:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    e008:	e7e0      	b.n	dfcc <z_arm_fault+0x60>
	*nested_exc = false;
    e00a:	461e      	mov	r6, r3
    e00c:	e7df      	b.n	dfce <z_arm_fault+0x62>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e00e:	4f51      	ldr	r7, [pc, #324]	; (e154 <z_arm_fault+0x1e8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    e010:	2145      	movs	r1, #69	; 0x45
    e012:	4855      	ldr	r0, [pc, #340]	; (e168 <z_arm_fault+0x1fc>)
    e014:	f006 feaa 	bl	14d6c <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e018:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	*recoverable = false;
    e01a:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e01e:	f014 0402 	ands.w	r4, r4, #2
    e022:	d004      	beq.n	e02e <z_arm_fault+0xc2>
		PR_EXC("  Bus fault on vector table read");
    e024:	2145      	movs	r1, #69	; 0x45
    e026:	4851      	ldr	r0, [pc, #324]	; (e16c <z_arm_fault+0x200>)
	PR_FAULT_INFO(
    e028:	f006 fea0 	bl	14d6c <z_log_minimal_printk>
    e02c:	e073      	b.n	e116 <z_arm_fault+0x1aa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e030:	2b00      	cmp	r3, #0
    e032:	da1d      	bge.n	e070 <z_arm_fault+0x104>
		PR_EXC("  Debug event");
    e034:	2145      	movs	r1, #69	; 0x45
    e036:	484e      	ldr	r0, [pc, #312]	; (e170 <z_arm_fault+0x204>)
    e038:	f006 fe98 	bl	14d6c <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e03c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e040:	b99b      	cbnz	r3, e06a <z_arm_fault+0xfe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e042:	2220      	movs	r2, #32
    e044:	4629      	mov	r1, r5
    e046:	a802      	add	r0, sp, #8
    e048:	f006 ff64 	bl	14f14 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e04e:	2e00      	cmp	r6, #0
    e050:	d073      	beq.n	e13a <z_arm_fault+0x1ce>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e052:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e056:	b922      	cbnz	r2, e062 <z_arm_fault+0xf6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e058:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e05c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e060:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e062:	4620      	mov	r0, r4
    e064:	a902      	add	r1, sp, #8
    e066:	f7ff fcad 	bl	d9c4 <z_arm_fatal_error>
}
    e06a:	b00a      	add	sp, #40	; 0x28
    e06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e072:	005b      	lsls	r3, r3, #1
    e074:	d53c      	bpl.n	e0f0 <z_arm_fault+0x184>
		PR_EXC("  Fault escalation (see below)");
    e076:	2145      	movs	r1, #69	; 0x45
    e078:	483e      	ldr	r0, [pc, #248]	; (e174 <z_arm_fault+0x208>)
    e07a:	f006 fe77 	bl	14d6c <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    e07e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    e080:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    e084:	f64d 7302 	movw	r3, #57090	; 0xdf02
    e088:	429a      	cmp	r2, r3
    e08a:	d106      	bne.n	e09a <z_arm_fault+0x12e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    e08c:	2145      	movs	r1, #69	; 0x45
    e08e:	682a      	ldr	r2, [r5, #0]
    e090:	4839      	ldr	r0, [pc, #228]	; (e178 <z_arm_fault+0x20c>)
    e092:	f006 fe6b 	bl	14d6c <z_log_minimal_printk>
			reason = esf->basic.r0;
    e096:	682c      	ldr	r4, [r5, #0]
    e098:	e7d0      	b.n	e03c <z_arm_fault+0xd0>
		} else if (SCB_MMFSR != 0) {
    e09a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    e09e:	b133      	cbz	r3, e0ae <z_arm_fault+0x142>
			reason = mem_manage_fault(esf, 1, recoverable);
    e0a0:	2001      	movs	r0, #1
    e0a2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e0a6:	f7ff fef5 	bl	de94 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    e0aa:	4604      	mov	r4, r0
		break;
    e0ac:	e7c6      	b.n	e03c <z_arm_fault+0xd0>
		} else if (SCB_BFSR != 0) {
    e0ae:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e0b2:	b12b      	cbz	r3, e0c0 <z_arm_fault+0x154>
			reason = bus_fault(esf, 1, recoverable);
    e0b4:	2001      	movs	r0, #1
    e0b6:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e0ba:	f7ff fe91 	bl	dde0 <bus_fault.constprop.0>
    e0be:	e7f4      	b.n	e0aa <z_arm_fault+0x13e>
		} else if (SCB_UFSR != 0) {
    e0c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    e0c2:	b29b      	uxth	r3, r3
    e0c4:	b113      	cbz	r3, e0cc <z_arm_fault+0x160>
		reason = usage_fault(esf);
    e0c6:	f7ff fe35 	bl	dd34 <usage_fault.constprop.0>
    e0ca:	e7ee      	b.n	e0aa <z_arm_fault+0x13e>
		} else if (SAU->SFSR != 0) {
    e0cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    e0d0:	b113      	cbz	r3, e0d8 <z_arm_fault+0x16c>
			secure_fault(esf);
    e0d2:	f7ff fdd1 	bl	dc78 <secure_fault.constprop.0>
    e0d6:	e7b1      	b.n	e03c <z_arm_fault+0xd0>
			__ASSERT(0,
    e0d8:	4921      	ldr	r1, [pc, #132]	; (e160 <z_arm_fault+0x1f4>)
    e0da:	f240 22c2 	movw	r2, #706	; 0x2c2
    e0de:	4821      	ldr	r0, [pc, #132]	; (e164 <z_arm_fault+0x1f8>)
    e0e0:	f006 fdb0 	bl	14c44 <printk>
    e0e4:	f240 21c2 	movw	r1, #706	; 0x2c2
		__ASSERT(0,
    e0e8:	481d      	ldr	r0, [pc, #116]	; (e160 <z_arm_fault+0x1f4>)
    e0ea:	f006 fe31 	bl	14d50 <assert_post_action>
    e0ee:	e7a5      	b.n	e03c <z_arm_fault+0xd0>
    e0f0:	491b      	ldr	r1, [pc, #108]	; (e160 <z_arm_fault+0x1f4>)
    e0f2:	f240 22c6 	movw	r2, #710	; 0x2c6
    e0f6:	481b      	ldr	r0, [pc, #108]	; (e164 <z_arm_fault+0x1f8>)
    e0f8:	f006 fda4 	bl	14c44 <printk>
    e0fc:	f240 21c6 	movw	r1, #710	; 0x2c6
    e100:	e7f2      	b.n	e0e8 <z_arm_fault+0x17c>
		reason = mem_manage_fault(esf, 0, recoverable);
    e102:	2000      	movs	r0, #0
    e104:	f10d 0107 	add.w	r1, sp, #7
    e108:	e7cd      	b.n	e0a6 <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
    e10a:	2000      	movs	r0, #0
    e10c:	f10d 0107 	add.w	r1, sp, #7
    e110:	e7d3      	b.n	e0ba <z_arm_fault+0x14e>
		secure_fault(esf);
    e112:	f7ff fdb1 	bl	dc78 <secure_fault.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e116:	2400      	movs	r4, #0
}
    e118:	e790      	b.n	e03c <z_arm_fault+0xd0>
	PR_FAULT_INFO(
    e11a:	2145      	movs	r1, #69	; 0x45
    e11c:	4817      	ldr	r0, [pc, #92]	; (e17c <z_arm_fault+0x210>)
    e11e:	e783      	b.n	e028 <z_arm_fault+0xbc>
	PR_FAULT_INFO("***** %s %d) *****",
    e120:	4917      	ldr	r1, [pc, #92]	; (e180 <z_arm_fault+0x214>)
    e122:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    e126:	4a17      	ldr	r2, [pc, #92]	; (e184 <z_arm_fault+0x218>)
    e128:	4817      	ldr	r0, [pc, #92]	; (e188 <z_arm_fault+0x21c>)
    e12a:	bf08      	it	eq
    e12c:	460a      	moveq	r2, r1
    e12e:	f1a7 0310 	sub.w	r3, r7, #16
    e132:	2145      	movs	r1, #69	; 0x45
    e134:	f006 fe1a 	bl	14d6c <z_log_minimal_printk>
    e138:	e7ed      	b.n	e116 <z_arm_fault+0x1aa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e13a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e13e:	f023 0301 	bic.w	r3, r3, #1
    e142:	e78d      	b.n	e060 <z_arm_fault+0xf4>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e144:	f1b8 0f00 	cmp.w	r8, #0
    e148:	f47f af40 	bne.w	dfcc <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    e14c:	4605      	mov	r5, r0
			*nested_exc = true;
    e14e:	2601      	movs	r6, #1
    e150:	e73c      	b.n	dfcc <z_arm_fault+0x60>
    e152:	bf00      	nop
    e154:	e000ed00 	.word	0xe000ed00
    e158:	0105eda6 	.word	0x0105eda6
    e15c:	000164bc 	.word	0x000164bc
    e160:	00016454 	.word	0x00016454
    e164:	00015be5 	.word	0x00015be5
    e168:	000164e0 	.word	0x000164e0
    e16c:	000164fc 	.word	0x000164fc
    e170:	00016522 	.word	0x00016522
    e174:	00016535 	.word	0x00016535
    e178:	00016559 	.word	0x00016559
    e17c:	0001657a 	.word	0x0001657a
    e180:	0001648e 	.word	0x0001648e
    e184:	000164a3 	.word	0x000164a3
    e188:	000165a3 	.word	0x000165a3

0000e18c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e18c:	4b04      	ldr	r3, [pc, #16]	; (e1a0 <z_arm_fault_init+0x14>)
    e18e:	695a      	ldr	r2, [r3, #20]
    e190:	f042 0210 	orr.w	r2, r2, #16
    e194:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e196:	695a      	ldr	r2, [r3, #20]
    e198:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e19c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e19e:	4770      	bx	lr
    e1a0:	e000ed00 	.word	0xe000ed00

0000e1a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    e1a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    e1a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    e1ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    e1ae:	4672      	mov	r2, lr
	bl z_arm_fault
    e1b0:	f7ff fedc 	bl	df6c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    e1b4:	bd01      	pop	{r0, pc}
    e1b6:	bf00      	nop

0000e1b8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e1b8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e1ba:	2120      	movs	r1, #32
    e1bc:	4803      	ldr	r0, [pc, #12]	; (e1cc <z_arm_interrupt_init+0x14>)
    e1be:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e1c0:	3301      	adds	r3, #1
    e1c2:	2b41      	cmp	r3, #65	; 0x41
    e1c4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e1c8:	d1f9      	bne.n	e1be <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e1ca:	4770      	bx	lr
    e1cc:	e000e100 	.word	0xe000e100

0000e1d0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    e1d0:	2000      	movs	r0, #0
    msr CONTROL, r0
    e1d2:	f380 8814 	msr	CONTROL, r0
    isb
    e1d6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    e1da:	2000      	movs	r0, #0
    msr MSPLIM, r0
    e1dc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    e1e0:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    e1e4:	f007 f90e 	bl	15404 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    e1e8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    e1ea:	490e      	ldr	r1, [pc, #56]	; (e224 <__start+0x54>)
    str r0, [r1]
    e1ec:	6008      	str	r0, [r1, #0]
    dsb
    e1ee:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e1f2:	480d      	ldr	r0, [pc, #52]	; (e228 <__start+0x58>)
    msr msp, r0
    e1f4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    e1f8:	f000 f83e 	bl	e278 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e1fc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    e1fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    e202:	480a      	ldr	r0, [pc, #40]	; (e22c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    e204:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    e208:	1840      	adds	r0, r0, r1
    msr PSP, r0
    e20a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    e20e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    e212:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    e214:	4308      	orrs	r0, r1
    msr CONTROL, r0
    e216:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    e21a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    e21e:	f7ff fc5b 	bl	dad8 <z_arm_prep_c>
    e222:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    e224:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e228:	20002648 	.word	0x20002648
    ldr r0, =z_interrupt_stacks
    e22c:	20002788 	.word	0x20002788

0000e230 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e230:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e234:	4905      	ldr	r1, [pc, #20]	; (e24c <sys_arch_reboot+0x1c>)
    e236:	4b06      	ldr	r3, [pc, #24]	; (e250 <sys_arch_reboot+0x20>)
    e238:	68ca      	ldr	r2, [r1, #12]
    e23a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e23e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e240:	60cb      	str	r3, [r1, #12]
    e242:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e246:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e248:	e7fd      	b.n	e246 <sys_arch_reboot+0x16>
    e24a:	bf00      	nop
    e24c:	e000ed00 	.word	0xe000ed00
    e250:	05fa0004 	.word	0x05fa0004

0000e254 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    e254:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    e256:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    e258:	4906      	ldr	r1, [pc, #24]	; (e274 <z_arm_clear_arm_mpu_config+0x20>)
    e25a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    e25e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    e262:	4293      	cmp	r3, r2
    e264:	d100      	bne.n	e268 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    e266:	4770      	bx	lr
  mpu->RNR = rnr;
    e268:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    e26c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    e270:	3301      	adds	r3, #1
    e272:	e7f6      	b.n	e262 <z_arm_clear_arm_mpu_config+0xe>
    e274:	e000ed00 	.word	0xe000ed00

0000e278 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    e278:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    e27a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    e27c:	2400      	movs	r4, #0
    e27e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    e282:	f7ff ffe7 	bl	e254 <z_arm_clear_arm_mpu_config>
    e286:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    e288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e28c:	4a0b      	ldr	r2, [pc, #44]	; (e2bc <z_arm_init_arch_hw_at_boot+0x44>)
    e28e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e292:	3301      	adds	r3, #1
    e294:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    e296:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e29a:	d1f8      	bne.n	e28e <z_arm_init_arch_hw_at_boot+0x16>
    e29c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e29e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e2a2:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e2a6:	3301      	adds	r3, #1
    e2a8:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e2aa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e2ae:	d1f8      	bne.n	e2a2 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    e2b0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    e2b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e2b6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    e2ba:	bd10      	pop	{r4, pc}
    e2bc:	e000e100 	.word	0xe000e100

0000e2c0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    e2c0:	4b06      	ldr	r3, [pc, #24]	; (e2dc <z_impl_k_thread_abort+0x1c>)
    e2c2:	689b      	ldr	r3, [r3, #8]
    e2c4:	4283      	cmp	r3, r0
    e2c6:	d107      	bne.n	e2d8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e2c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e2cc:	b123      	cbz	r3, e2d8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e2ce:	4a04      	ldr	r2, [pc, #16]	; (e2e0 <z_impl_k_thread_abort+0x20>)
    e2d0:	6853      	ldr	r3, [r2, #4]
    e2d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e2d6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    e2d8:	f003 bb9e 	b.w	11a18 <z_thread_abort>
    e2dc:	20000a58 	.word	0x20000a58
    e2e0:	e000ed00 	.word	0xe000ed00

0000e2e4 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    e2e4:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    e2e6:	4b0d      	ldr	r3, [pc, #52]	; (e31c <tz_nonsecure_state_setup+0x38>)
    e2e8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    e2ea:	6803      	ldr	r3, [r0, #0]
    e2ec:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    e2f0:	6843      	ldr	r3, [r0, #4]
    e2f2:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    e2f6:	7b02      	ldrb	r2, [r0, #12]
    e2f8:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    e2fc:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    e300:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    e304:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    e306:	bf48      	it	mi
    e308:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    e30c:	b109      	cbz	r1, e312 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    e30e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    e312:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
    e316:	f3bf 8f6f 	isb	sy
}
    e31a:	4770      	bx	lr
    e31c:	e002ed00 	.word	0xe002ed00

0000e320 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e320:	4a08      	ldr	r2, [pc, #32]	; (e344 <tz_nbanked_exception_target_state_set+0x24>)
    e322:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    e324:	b148      	cbz	r0, e33a <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    e326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e32a:	041b      	lsls	r3, r3, #16
    e32c:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e32e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    e336:	60d3      	str	r3, [r2, #12]
}
    e338:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e33a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    e33c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e340:	e7f5      	b.n	e32e <tz_nbanked_exception_target_state_set+0xe>
    e342:	bf00      	nop
    e344:	e000ed00 	.word	0xe000ed00

0000e348 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e348:	4a08      	ldr	r2, [pc, #32]	; (e36c <tz_nonsecure_exception_prio_config+0x24>)
    e34a:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    e34c:	b140      	cbz	r0, e360 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e34e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    e350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    e35c:	60d3      	str	r3, [r2, #12]
}
    e35e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    e360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e364:	041b      	lsls	r3, r3, #16
    e366:	0c1b      	lsrs	r3, r3, #16
    e368:	e7f4      	b.n	e354 <tz_nonsecure_exception_prio_config+0xc>
    e36a:	bf00      	nop
    e36c:	e000ed00 	.word	0xe000ed00

0000e370 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e370:	4a08      	ldr	r2, [pc, #32]	; (e394 <tz_nonsecure_system_reset_req_block+0x24>)
    e372:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    e374:	b140      	cbz	r0, e388 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e376:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    e378:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e37c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    e384:	60d3      	str	r3, [r2, #12]
}
    e386:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    e388:	f023 0308 	bic.w	r3, r3, #8
    e38c:	041b      	lsls	r3, r3, #16
    e38e:	0c1b      	lsrs	r3, r3, #16
    e390:	e7f4      	b.n	e37c <tz_nonsecure_system_reset_req_block+0xc>
    e392:	bf00      	nop
    e394:	e000ed00 	.word	0xe000ed00

0000e398 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    e398:	4a03      	ldr	r2, [pc, #12]	; (e3a8 <tz_nonsecure_fpu_access_enable+0x10>)
    e39a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    e39e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    e3a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    e3a6:	4770      	bx	lr
    e3a8:	e000ed00 	.word	0xe000ed00

0000e3ac <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    e3ac:	4b0a      	ldr	r3, [pc, #40]	; (e3d8 <tz_sau_configure+0x2c>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    e3ae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    e3b2:	b120      	cbz	r0, e3be <tz_sau_configure+0x12>
    e3b4:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    e3b8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}
	}
}
    e3bc:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    e3be:	f022 0201 	bic.w	r2, r2, #1
    e3c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    e3c6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		if (allns) {
    e3ca:	b111      	cbz	r1, e3d2 <tz_sau_configure+0x26>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    e3cc:	f042 0202 	orr.w	r2, r2, #2
    e3d0:	e7f2      	b.n	e3b8 <tz_sau_configure+0xc>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    e3d2:	f022 0202 	bic.w	r2, r2, #2
    e3d6:	e7ef      	b.n	e3b8 <tz_sau_configure+0xc>
    e3d8:	e000ed00 	.word	0xe000ed00

0000e3dc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e3dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e3de:	4c09      	ldr	r4, [pc, #36]	; (e404 <z_arm_configure_static_mpu_regions+0x28>)
    e3e0:	4a09      	ldr	r2, [pc, #36]	; (e408 <z_arm_configure_static_mpu_regions+0x2c>)
    e3e2:	4623      	mov	r3, r4
    e3e4:	2101      	movs	r1, #1
    e3e6:	4809      	ldr	r0, [pc, #36]	; (e40c <z_arm_configure_static_mpu_regions+0x30>)
    e3e8:	f000 f92c 	bl	e644 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e3ec:	2300      	movs	r3, #0
    e3ee:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e3f0:	4b07      	ldr	r3, [pc, #28]	; (e410 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e3f2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e3f4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e3f6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e3f8:	9301      	str	r3, [sp, #4]
    e3fa:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e3fc:	f000 f93e 	bl	e67c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e400:	b004      	add	sp, #16
    e402:	bd10      	pop	{r4, pc}
    e404:	20008000 	.word	0x20008000
    e408:	20000000 	.word	0x20000000
    e40c:	000158e8 	.word	0x000158e8
    e410:	20000170 	.word	0x20000170

0000e414 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e414:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e416:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e418:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e41a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e41e:	f004 031f 	and.w	r3, r4, #31
    e422:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e424:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e426:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e428:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e42c:	4905      	ldr	r1, [pc, #20]	; (e444 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e42e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e432:	f043 0301 	orr.w	r3, r3, #1
    e436:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    e43a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    e43e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e442:	bd10      	pop	{r4, pc}
    e444:	e000ed00 	.word	0xe000ed00

0000e448 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    e448:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e44a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    e44c:	680c      	ldr	r4, [r1, #0]
{
    e44e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    e450:	890a      	ldrh	r2, [r1, #8]
    e452:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    e454:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e456:	3b01      	subs	r3, #1
    e458:	f024 041f 	bic.w	r4, r4, #31
    e45c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    e45e:	f002 021f 	and.w	r2, r2, #31
    e462:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e466:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e46a:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e46c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    e46e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e472:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    e474:	d909      	bls.n	e48a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e476:	4602      	mov	r2, r0
    e478:	2145      	movs	r1, #69	; 0x45
    e47a:	4806      	ldr	r0, [pc, #24]	; (e494 <mpu_configure_region+0x4c>)
    e47c:	f006 fc76 	bl	14d6c <z_log_minimal_printk>
    e480:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    e484:	4620      	mov	r0, r4
    e486:	b005      	add	sp, #20
    e488:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    e48a:	4669      	mov	r1, sp
    e48c:	f7ff ffc2 	bl	e414 <region_init>
	return region_allocate_and_init(index,
    e490:	e7f8      	b.n	e484 <mpu_configure_region+0x3c>
    e492:	bf00      	nop
    e494:	000165bf 	.word	0x000165bf

0000e498 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e49c:	4689      	mov	r9, r1
    e49e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e4a0:	4606      	mov	r6, r0
    e4a2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    e4a6:	4d58      	ldr	r5, [pc, #352]	; (e608 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e4a8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e4aa:	45c8      	cmp	r8, r9
    e4ac:	da27      	bge.n	e4fe <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    e4ae:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e4b2:	f1ba 0f00 	cmp.w	sl, #0
    e4b6:	d044      	beq.n	e542 <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
    e4b8:	f1ba 0f1f 	cmp.w	sl, #31
    e4bc:	d918      	bls.n	e4f0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    e4be:	f01a 0f1f 	tst.w	sl, #31
    e4c2:	d115      	bne.n	e4f0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    e4c4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e4c8:	f01b 0f1f 	tst.w	fp, #31
    e4cc:	d110      	bne.n	e4f0 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e4ce:	4658      	mov	r0, fp
    e4d0:	f006 fccd 	bl	14e6e <arm_cmse_mpu_region_get>
    e4d4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e4d6:	eb0a 000b 	add.w	r0, sl, fp
    e4da:	3801      	subs	r0, #1
    e4dc:	f006 fcc7 	bl	14e6e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e4e0:	4287      	cmp	r7, r0
    e4e2:	d010      	beq.n	e506 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    e4e4:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e4e8:	463a      	mov	r2, r7
    e4ea:	2145      	movs	r1, #69	; 0x45
    e4ec:	4847      	ldr	r0, [pc, #284]	; (e60c <mpu_configure_regions_and_partition.constprop.0+0x174>)
    e4ee:	e002      	b.n	e4f6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e4f0:	4642      	mov	r2, r8
    e4f2:	2145      	movs	r1, #69	; 0x45
    e4f4:	4846      	ldr	r0, [pc, #280]	; (e610 <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e4f6:	f006 fc39 	bl	14d6c <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e4fa:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e4fe:	4620      	mov	r0, r4
    e500:	b005      	add	sp, #20
    e502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e506:	f117 0f16 	cmn.w	r7, #22
    e50a:	d0ed      	beq.n	e4e8 <mpu_configure_regions_and_partition.constprop.0+0x50>
    e50c:	42bc      	cmp	r4, r7
    e50e:	ddeb      	ble.n	e4e8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    e510:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e514:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    e518:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e51c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e520:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e524:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e528:	e9d6 3200 	ldrd	r3, r2, [r6]
    e52c:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e52e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e530:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    e534:	d11d      	bne.n	e572 <mpu_configure_regions_and_partition.constprop.0+0xda>
    e536:	45d3      	cmp	fp, sl
    e538:	d107      	bne.n	e54a <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
    e53a:	4631      	mov	r1, r6
    e53c:	b2f8      	uxtb	r0, r7
    e53e:	f7ff ff83 	bl	e448 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e542:	f108 0801 	add.w	r8, r8, #1
    e546:	360c      	adds	r6, #12
    e548:	e7af      	b.n	e4aa <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e54a:	4631      	mov	r1, r6
	MPU->RNR = index;
    e54c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e550:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e554:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e558:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e55c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e55e:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e562:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e564:	f7ff ff70 	bl	e448 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e568:	f110 0f16 	cmn.w	r0, #22
    e56c:	d0c5      	beq.n	e4fa <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e56e:	1c44      	adds	r4, r0, #1
    e570:	e7e7      	b.n	e542 <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
    e572:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e574:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e576:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e578:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e57c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e580:	d108      	bne.n	e594 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e582:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e586:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e588:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e58c:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e58e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e592:	e7e7      	b.n	e564 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e594:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e598:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e59c:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e59e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e5a2:	4631      	mov	r1, r6
    e5a4:	f7ff ff50 	bl	e448 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e5a8:	f110 0f16 	cmn.w	r0, #22
    e5ac:	d0a5      	beq.n	e4fa <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e5ae:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e5b2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e5b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e5ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    e5be:	f362 0304 	bfi	r3, r2, #0, #5
    e5c2:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e5c6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e5ca:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e5ce:	085b      	lsrs	r3, r3, #1
    e5d0:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e5d4:	e9d6 3100 	ldrd	r3, r1, [r6]
    e5d8:	440b      	add	r3, r1
    e5da:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e5dc:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e5e0:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e5e2:	445b      	add	r3, fp
    e5e4:	eba3 030a 	sub.w	r3, r3, sl
    e5e8:	b2c0      	uxtb	r0, r0
    e5ea:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e5ee:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e5f0:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e5f4:	9303      	str	r3, [sp, #12]
    e5f6:	d903      	bls.n	e600 <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e5f8:	4602      	mov	r2, r0
    e5fa:	2145      	movs	r1, #69	; 0x45
    e5fc:	4805      	ldr	r0, [pc, #20]	; (e614 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
    e5fe:	e77a      	b.n	e4f6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e600:	4669      	mov	r1, sp
    e602:	f7ff ff07 	bl	e414 <region_init>
    e606:	e7b2      	b.n	e56e <mpu_configure_regions_and_partition.constprop.0+0xd6>
    e608:	e000ed00 	.word	0xe000ed00
    e60c:	00016612 	.word	0x00016612
    e610:	000165ea 	.word	0x000165ea
    e614:	000165bf 	.word	0x000165bf

0000e618 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e618:	2205      	movs	r2, #5
    e61a:	4b04      	ldr	r3, [pc, #16]	; (e62c <arm_core_mpu_enable+0x14>)
    e61c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e620:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e624:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e628:	4770      	bx	lr
    e62a:	bf00      	nop
    e62c:	e000ed00 	.word	0xe000ed00

0000e630 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    e630:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e634:	2200      	movs	r2, #0
    e636:	4b02      	ldr	r3, [pc, #8]	; (e640 <arm_core_mpu_disable+0x10>)
    e638:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e63c:	4770      	bx	lr
    e63e:	bf00      	nop
    e640:	e000ed00 	.word	0xe000ed00

0000e644 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    e644:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e646:	4c0a      	ldr	r4, [pc, #40]	; (e670 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e648:	7822      	ldrb	r2, [r4, #0]
    e64a:	f7ff ff25 	bl	e498 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e64e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e650:	3016      	adds	r0, #22
    e652:	d10c      	bne.n	e66e <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e654:	4907      	ldr	r1, [pc, #28]	; (e674 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e656:	4808      	ldr	r0, [pc, #32]	; (e678 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e658:	f240 1211 	movw	r2, #273	; 0x111
    e65c:	f006 faf2 	bl	14c44 <printk>
			regions_num);
	}
}
    e660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e664:	f240 1111 	movw	r1, #273	; 0x111
    e668:	4802      	ldr	r0, [pc, #8]	; (e674 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e66a:	f006 bb71 	b.w	14d50 <assert_post_action>
}
    e66e:	bd10      	pop	{r4, pc}
    e670:	20001478 	.word	0x20001478
    e674:	0001663a 	.word	0x0001663a
    e678:	00015be5 	.word	0x00015be5

0000e67c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    e67c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e680:	4d30      	ldr	r5, [pc, #192]	; (e744 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e682:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e684:	4606      	mov	r6, r0
    e686:	f04f 0800 	mov.w	r8, #0
    e68a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e68c:	4f2e      	ldr	r7, [pc, #184]	; (e748 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e68e:	45d0      	cmp	r8, sl
    e690:	db02      	blt.n	e698 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    e692:	b003      	add	sp, #12
    e694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e698:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e69c:	f1b9 0f00 	cmp.w	r9, #0
    e6a0:	d04a      	beq.n	e738 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e6a2:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e6a4:	4608      	mov	r0, r1
    e6a6:	9101      	str	r1, [sp, #4]
    e6a8:	f006 fbe1 	bl	14e6e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e6ac:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e6ae:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e6b0:	eb09 0001 	add.w	r0, r9, r1
    e6b4:	3801      	subs	r0, #1
    e6b6:	f006 fbda 	bl	14e6e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e6ba:	4284      	cmp	r4, r0
    e6bc:	f04f 0214 	mov.w	r2, #20
    e6c0:	4b22      	ldr	r3, [pc, #136]	; (e74c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e6c2:	d013      	beq.n	e6ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e6c4:	f06f 0315 	mvn.w	r3, #21
    e6c8:	fb02 f808 	mul.w	r8, r2, r8
    e6cc:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e6d0:	f240 1221 	movw	r2, #289	; 0x121
    e6d4:	491e      	ldr	r1, [pc, #120]	; (e750 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e6d6:	481f      	ldr	r0, [pc, #124]	; (e754 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e6d8:	f006 fab4 	bl	14c44 <printk>
    e6dc:	f240 1121 	movw	r1, #289	; 0x121
    e6e0:	481b      	ldr	r0, [pc, #108]	; (e750 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e6e2:	b003      	add	sp, #12
    e6e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e6e8:	f006 bb32 	b.w	14d50 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e6ec:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e6f0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e6f2:	d0ed      	beq.n	e6d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e6f4:	7819      	ldrb	r1, [r3, #0]
    e6f6:	42a1      	cmp	r1, r4
    e6f8:	ddea      	ble.n	e6d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e6fa:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e6fe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e702:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e706:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e70a:	f100 0108 	add.w	r1, r0, #8
    e70e:	7b00      	ldrb	r0, [r0, #12]
    e710:	f364 0004 	bfi	r0, r4, #0, #5
    e714:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e716:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e71a:	790c      	ldrb	r4, [r1, #4]
    e71c:	0840      	lsrs	r0, r0, #1
    e71e:	f360 1447 	bfi	r4, r0, #5, #3
    e722:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e724:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e728:	f021 011f 	bic.w	r1, r1, #31
    e72c:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e72e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e732:	f021 011f 	bic.w	r1, r1, #31
    e736:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e738:	f108 0801 	add.w	r8, r8, #1
    e73c:	3514      	adds	r5, #20
    e73e:	360c      	adds	r6, #12
    e740:	e7a5      	b.n	e68e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e742:	bf00      	nop
    e744:	20000994 	.word	0x20000994
    e748:	e000ed00 	.word	0xe000ed00
    e74c:	20001478 	.word	0x20001478
    e750:	0001663a 	.word	0x0001663a
    e754:	00015be5 	.word	0x00015be5

0000e758 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    e758:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e75a:	4d1d      	ldr	r5, [pc, #116]	; (e7d0 <z_arm_mpu_init+0x78>)
    e75c:	682c      	ldr	r4, [r5, #0]
    e75e:	2c10      	cmp	r4, #16
    e760:	d90d      	bls.n	e77e <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e762:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e766:	491b      	ldr	r1, [pc, #108]	; (e7d4 <z_arm_mpu_init+0x7c>)
    e768:	481b      	ldr	r0, [pc, #108]	; (e7d8 <z_arm_mpu_init+0x80>)
    e76a:	f006 fa6b 	bl	14c44 <printk>
    e76e:	4819      	ldr	r0, [pc, #100]	; (e7d4 <z_arm_mpu_init+0x7c>)
    e770:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e774:	f006 faec 	bl	14d50 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    e77c:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e77e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e780:	f7ff ff56 	bl	e630 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e784:	4b15      	ldr	r3, [pc, #84]	; (e7dc <z_arm_mpu_init+0x84>)
    e786:	4a16      	ldr	r2, [pc, #88]	; (e7e0 <z_arm_mpu_init+0x88>)
    e788:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e78c:	4284      	cmp	r4, r0
    e78e:	d117      	bne.n	e7c0 <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e790:	4b14      	ldr	r3, [pc, #80]	; (e7e4 <z_arm_mpu_init+0x8c>)
    e792:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e794:	f7ff ff40 	bl	e618 <arm_core_mpu_enable>
	__ASSERT(
    e798:	4b10      	ldr	r3, [pc, #64]	; (e7dc <z_arm_mpu_init+0x84>)
    e79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e79e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e7a2:	2b10      	cmp	r3, #16
    e7a4:	d00a      	beq.n	e7bc <z_arm_mpu_init+0x64>
    e7a6:	490b      	ldr	r1, [pc, #44]	; (e7d4 <z_arm_mpu_init+0x7c>)
    e7a8:	480b      	ldr	r0, [pc, #44]	; (e7d8 <z_arm_mpu_init+0x80>)
    e7aa:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
    e7ae:	f006 fa49 	bl	14c44 <printk>
    e7b2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    e7b6:	4807      	ldr	r0, [pc, #28]	; (e7d4 <z_arm_mpu_init+0x7c>)
    e7b8:	f006 faca 	bl	14d50 <assert_post_action>
	return 0;
    e7bc:	2000      	movs	r0, #0
    e7be:	e7dd      	b.n	e77c <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e7c0:	6869      	ldr	r1, [r5, #4]
    e7c2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e7c6:	f7ff fe25 	bl	e414 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e7ca:	3001      	adds	r0, #1
    e7cc:	e7de      	b.n	e78c <z_arm_mpu_init+0x34>
    e7ce:	bf00      	nop
    e7d0:	000158f4 	.word	0x000158f4
    e7d4:	0001663a 	.word	0x0001663a
    e7d8:	00015be5 	.word	0x00015be5
    e7dc:	e000ed00 	.word	0xe000ed00
    e7e0:	0044ffaa 	.word	0x0044ffaa
    e7e4:	20001478 	.word	0x20001478

0000e7e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e7e8:	4b01      	ldr	r3, [pc, #4]	; (e7f0 <__stdout_hook_install+0x8>)
    e7ea:	6018      	str	r0, [r3, #0]
}
    e7ec:	4770      	bx	lr
    e7ee:	bf00      	nop
    e7f0:	20000024 	.word	0x20000024

0000e7f4 <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
    e7f4:	b510      	push	{r4, lr}
	err = adp536x_init(ADP536X_I2C_DEV_NAME);
    e7f6:	482a      	ldr	r0, [pc, #168]	; (e8a0 <thingy91_board_init+0xac>)
    e7f8:	f7fe fdac 	bl	d354 <adp536x_init>
	if (err) {
    e7fc:	4604      	mov	r4, r0
    e7fe:	b158      	cbz	r0, e818 <thingy91_board_init+0x24>
		LOG_ERR("ADP536X failed to initialize, error: %d\n", err);
    e800:	2145      	movs	r1, #69	; 0x45
    e802:	4602      	mov	r2, r0
    e804:	4827      	ldr	r0, [pc, #156]	; (e8a4 <thingy91_board_init+0xb0>)
		LOG_ERR("Could not enable charging: %d\n", err);
    e806:	f006 fab1 	bl	14d6c <z_log_minimal_printk>
	int err;

	err = power_mgmt_init();
	if (err) {
		LOG_ERR("power_mgmt_init failed with error: %d", err);
    e80a:	4622      	mov	r2, r4
    e80c:	2145      	movs	r1, #69	; 0x45
    e80e:	4826      	ldr	r0, [pc, #152]	; (e8a8 <thingy91_board_init+0xb4>)
    e810:	f006 faac 	bl	14d6c <z_log_minimal_printk>
		return err;
	}

	return 0;
}
    e814:	4620      	mov	r0, r4
    e816:	bd10      	pop	{r4, pc}
	err = adp536x_buck_1v8_set();
    e818:	f006 facd 	bl	14db6 <adp536x_buck_1v8_set>
	if (err) {
    e81c:	4604      	mov	r4, r0
    e81e:	b118      	cbz	r0, e828 <thingy91_board_init+0x34>
		LOG_ERR("Could not set buck to 1.8 V, error: %d\n", err);
    e820:	4602      	mov	r2, r0
    e822:	2145      	movs	r1, #69	; 0x45
    e824:	4821      	ldr	r0, [pc, #132]	; (e8ac <thingy91_board_init+0xb8>)
    e826:	e7ee      	b.n	e806 <thingy91_board_init+0x12>
	err = adp536x_buckbst_3v3_set();
    e828:	f006 fad1 	bl	14dce <adp536x_buckbst_3v3_set>
	if (err) {
    e82c:	4604      	mov	r4, r0
    e82e:	b118      	cbz	r0, e838 <thingy91_board_init+0x44>
		LOG_ERR("Could not set buck/boost to 3.3 V, error: %d\n", err);
    e830:	4602      	mov	r2, r0
    e832:	2145      	movs	r1, #69	; 0x45
    e834:	481e      	ldr	r0, [pc, #120]	; (e8b0 <thingy91_board_init+0xbc>)
    e836:	e7e6      	b.n	e806 <thingy91_board_init+0x12>
	err = adp536x_buckbst_enable(true);
    e838:	2001      	movs	r0, #1
    e83a:	f006 facd 	bl	14dd8 <adp536x_buckbst_enable>
	if (err) {
    e83e:	4604      	mov	r4, r0
    e840:	b118      	cbz	r0, e84a <thingy91_board_init+0x56>
		LOG_ERR("Could not enable buck/boost output, error: %d\n", err);
    e842:	4602      	mov	r2, r0
    e844:	2145      	movs	r1, #69	; 0x45
    e846:	481b      	ldr	r0, [pc, #108]	; (e8b4 <thingy91_board_init+0xc0>)
    e848:	e7dd      	b.n	e806 <thingy91_board_init+0x12>
	err = adp536x_buck_discharge_set(true);
    e84a:	2001      	movs	r0, #1
    e84c:	f006 fab8 	bl	14dc0 <adp536x_buck_discharge_set>
	if (err) {
    e850:	4604      	mov	r4, r0
    e852:	2800      	cmp	r0, #0
    e854:	d1d9      	bne.n	e80a <thingy91_board_init+0x16>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
    e856:	2007      	movs	r0, #7
    e858:	f006 fa9b 	bl	14d92 <adp536x_vbus_current_set>
	if (err) {
    e85c:	4604      	mov	r4, r0
    e85e:	b118      	cbz	r0, e868 <thingy91_board_init+0x74>
		LOG_ERR("Could not set VBUS current limit, error: %d\n", err);
    e860:	4602      	mov	r2, r0
    e862:	2145      	movs	r1, #69	; 0x45
    e864:	4814      	ldr	r0, [pc, #80]	; (e8b8 <thingy91_board_init+0xc4>)
    e866:	e7ce      	b.n	e806 <thingy91_board_init+0x12>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
    e868:	201f      	movs	r0, #31
    e86a:	f006 fa8c 	bl	14d86 <adp536x_charger_current_set>
	if (err) {
    e86e:	4604      	mov	r4, r0
    e870:	b118      	cbz	r0, e87a <thingy91_board_init+0x86>
		LOG_ERR("Could not set charging current, error: %d\n", err);
    e872:	4602      	mov	r2, r0
    e874:	2145      	movs	r1, #69	; 0x45
    e876:	4811      	ldr	r0, [pc, #68]	; (e8bc <thingy91_board_init+0xc8>)
    e878:	e7c5      	b.n	e806 <thingy91_board_init+0x12>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
    e87a:	2007      	movs	r0, #7
    e87c:	f006 fa94 	bl	14da8 <adp536x_oc_chg_current_set>
	if (err) {
    e880:	4604      	mov	r4, r0
    e882:	b118      	cbz	r0, e88c <thingy91_board_init+0x98>
		LOG_ERR("Could not set charge current protection, error: %d\n",
    e884:	4602      	mov	r2, r0
    e886:	2145      	movs	r1, #69	; 0x45
    e888:	480d      	ldr	r0, [pc, #52]	; (e8c0 <thingy91_board_init+0xcc>)
    e88a:	e7bc      	b.n	e806 <thingy91_board_init+0x12>
	err = adp536x_charging_enable(true);
    e88c:	2001      	movs	r0, #1
    e88e:	f006 fa86 	bl	14d9e <adp536x_charging_enable>
	if (err) {
    e892:	4604      	mov	r4, r0
    e894:	2800      	cmp	r0, #0
    e896:	d0bd      	beq.n	e814 <thingy91_board_init+0x20>
		LOG_ERR("Could not enable charging: %d\n", err);
    e898:	4602      	mov	r2, r0
    e89a:	2145      	movs	r1, #69	; 0x45
    e89c:	4809      	ldr	r0, [pc, #36]	; (e8c4 <thingy91_board_init+0xd0>)
    e89e:	e7b2      	b.n	e806 <thingy91_board_init+0x12>
    e8a0:	00016680 	.word	0x00016680
    e8a4:	00016686 	.word	0x00016686
    e8a8:	00016807 	.word	0x00016807
    e8ac:	000166b4 	.word	0x000166b4
    e8b0:	000166e1 	.word	0x000166e1
    e8b4:	00016714 	.word	0x00016714
    e8b8:	00016748 	.word	0x00016748
    e8bc:	0001677a 	.word	0x0001677a
    e8c0:	000167aa 	.word	0x000167aa
    e8c4:	000167e3 	.word	0x000167e3

0000e8c8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e8ca:	2340      	movs	r3, #64	; 0x40
{
    e8cc:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    e8ce:	490a      	ldr	r1, [pc, #40]	; (e8f8 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e8d0:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    e8d2:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e8d4:	1149      	asrs	r1, r1, #5
{
    e8d6:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e8d8:	4623      	mov	r3, r4
    e8da:	4a08      	ldr	r2, [pc, #32]	; (e8fc <onoff_start+0x34>)
    e8dc:	4808      	ldr	r0, [pc, #32]	; (e900 <onoff_start+0x38>)
    e8de:	f006 fb43 	bl	14f68 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    e8e2:	1e01      	subs	r1, r0, #0
    e8e4:	da05      	bge.n	e8f2 <onoff_start+0x2a>
		notify(mgr, err);
    e8e6:	4628      	mov	r0, r5
    e8e8:	4623      	mov	r3, r4
	}
}
    e8ea:	b003      	add	sp, #12
    e8ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    e8f0:	4718      	bx	r3
}
    e8f2:	b003      	add	sp, #12
    e8f4:	bd30      	pop	{r4, r5, pc}
    e8f6:	bf00      	nop
    e8f8:	200009a8 	.word	0x200009a8
    e8fc:	00014fd7 	.word	0x00014fd7
    e900:	00015478 	.word	0x00015478

0000e904 <get_status>:
{
    e904:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e906:	b2cc      	uxtb	r4, r1
    e908:	2c01      	cmp	r4, #1
{
    e90a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e90c:	d908      	bls.n	e920 <get_status+0x1c>
    e90e:	4908      	ldr	r1, [pc, #32]	; (e930 <get_status+0x2c>)
    e910:	4808      	ldr	r0, [pc, #32]	; (e934 <get_status+0x30>)
    e912:	2279      	movs	r2, #121	; 0x79
    e914:	f006 f996 	bl	14c44 <printk>
    e918:	2179      	movs	r1, #121	; 0x79
    e91a:	4805      	ldr	r0, [pc, #20]	; (e930 <get_status+0x2c>)
    e91c:	f006 fa18 	bl	14d50 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e920:	230c      	movs	r3, #12
    e922:	6929      	ldr	r1, [r5, #16]
    e924:	fb04 1403 	mla	r4, r4, r3, r1
    e928:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    e92a:	f000 0007 	and.w	r0, r0, #7
    e92e:	bd38      	pop	{r3, r4, r5, pc}
    e930:	0001683f 	.word	0x0001683f
    e934:	00015be5 	.word	0x00015be5

0000e938 <stop>:
{
    e938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e93a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e93c:	2c01      	cmp	r4, #1
{
    e93e:	4605      	mov	r5, r0
    e940:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    e942:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e944:	d90a      	bls.n	e95c <stop+0x24>
    e946:	4918      	ldr	r1, [pc, #96]	; (e9a8 <stop+0x70>)
    e948:	4818      	ldr	r0, [pc, #96]	; (e9ac <stop+0x74>)
    e94a:	f240 124d 	movw	r2, #333	; 0x14d
    e94e:	f006 f979 	bl	14c44 <printk>
    e952:	f240 114d 	movw	r1, #333	; 0x14d
    e956:	4814      	ldr	r0, [pc, #80]	; (e9a8 <stop+0x70>)
    e958:	f006 f9fa 	bl	14d50 <assert_post_action>
	__asm__ volatile(
    e95c:	f04f 0320 	mov.w	r3, #32
    e960:	f3ef 8111 	mrs	r1, BASEPRI
    e964:	f383 8812 	msr	BASEPRI_MAX, r3
    e968:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e96c:	220c      	movs	r2, #12
    e96e:	fb02 6304 	mla	r3, r2, r4, r6
    e972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e974:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    e978:	d001      	beq.n	e97e <stop+0x46>
    e97a:	429f      	cmp	r7, r3
    e97c:	d111      	bne.n	e9a2 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e97e:	2301      	movs	r3, #1
	int err = 0;
    e980:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e982:	fb02 6604 	mla	r6, r2, r4, r6
    e986:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
    e988:	f381 8811 	msr	BASEPRI, r1
    e98c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    e990:	b930      	cbnz	r0, e9a0 <stop+0x68>
	get_sub_config(dev, type)->stop();
    e992:	230c      	movs	r3, #12
    e994:	6869      	ldr	r1, [r5, #4]
    e996:	fb03 1404 	mla	r4, r3, r4, r1
    e99a:	6863      	ldr	r3, [r4, #4]
    e99c:	4798      	blx	r3
	return 0;
    e99e:	2000      	movs	r0, #0
}
    e9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    e9a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e9a6:	e7ef      	b.n	e988 <stop+0x50>
    e9a8:	0001683f 	.word	0x0001683f
    e9ac:	00015be5 	.word	0x00015be5

0000e9b0 <onoff_stop>:
{
    e9b0:	b570      	push	{r4, r5, r6, lr}
    e9b2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    e9b4:	4906      	ldr	r1, [pc, #24]	; (e9d0 <onoff_stop+0x20>)
{
    e9b6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    e9b8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e9ba:	1149      	asrs	r1, r1, #5
    e9bc:	2240      	movs	r2, #64	; 0x40
    e9be:	4805      	ldr	r0, [pc, #20]	; (e9d4 <onoff_stop+0x24>)
    e9c0:	f7ff ffba 	bl	e938 <stop>
	notify(mgr, res);
    e9c4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e9c6:	4601      	mov	r1, r0
	notify(mgr, res);
    e9c8:	4620      	mov	r0, r4
}
    e9ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    e9ce:	4718      	bx	r3
    e9d0:	200009a8 	.word	0x200009a8
    e9d4:	00015478 	.word	0x00015478

0000e9d8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    e9d8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e9da:	2200      	movs	r2, #0
    e9dc:	2101      	movs	r1, #1
{
    e9de:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e9e0:	2005      	movs	r0, #5
    e9e2:	f7ff f84f 	bl	da84 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    e9e6:	2005      	movs	r0, #5
    e9e8:	f7ff f81a 	bl	da20 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    e9ec:	480f      	ldr	r0, [pc, #60]	; (ea2c <clk_init+0x54>)
    e9ee:	f000 fe33 	bl	f658 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    e9f2:	4b0f      	ldr	r3, [pc, #60]	; (ea30 <clk_init+0x58>)
    e9f4:	4298      	cmp	r0, r3
    e9f6:	d115      	bne.n	ea24 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    e9f8:	f000 fe4e 	bl	f698 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    e9fc:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    e9fe:	490d      	ldr	r1, [pc, #52]	; (ea34 <clk_init+0x5c>)
    ea00:	4630      	mov	r0, r6
    ea02:	f006 f92c 	bl	14c5e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    ea06:	2800      	cmp	r0, #0
    ea08:	db0b      	blt.n	ea22 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ea0a:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    ea0c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    ea0e:	4909      	ldr	r1, [pc, #36]	; (ea34 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ea10:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    ea12:	f104 0020 	add.w	r0, r4, #32
    ea16:	f006 f922 	bl	14c5e <onoff_manager_init>
		if (err < 0) {
    ea1a:	2800      	cmp	r0, #0
    ea1c:	db01      	blt.n	ea22 <clk_init+0x4a>
	}

	return 0;
    ea1e:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ea20:	6565      	str	r5, [r4, #84]	; 0x54
}
    ea22:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ea24:	f06f 0004 	mvn.w	r0, #4
    ea28:	e7fb      	b.n	ea22 <clk_init+0x4a>
    ea2a:	bf00      	nop
    ea2c:	0000ea6d 	.word	0x0000ea6d
    ea30:	0bad0000 	.word	0x0bad0000
    ea34:	0001594c 	.word	0x0001594c

0000ea38 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    ea38:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    ea3a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    ea3c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    ea3e:	434b      	muls	r3, r1
    ea40:	4808      	ldr	r0, [pc, #32]	; (ea64 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    ea42:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    ea44:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    ea46:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
    ea48:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    ea4c:	4418      	add	r0, r3
	sub_data->cb = NULL;
    ea4e:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    ea50:	f006 fa77 	bl	14f42 <set_on_state>
	if (callback) {
    ea54:	b12d      	cbz	r5, ea62 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    ea56:	4632      	mov	r2, r6
    ea58:	462b      	mov	r3, r5
}
    ea5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    ea5e:	4802      	ldr	r0, [pc, #8]	; (ea68 <clkstarted_handle.constprop.0+0x30>)
    ea60:	4718      	bx	r3
}
    ea62:	bd70      	pop	{r4, r5, r6, pc}
    ea64:	200009a8 	.word	0x200009a8
    ea68:	00015478 	.word	0x00015478

0000ea6c <clock_event_handler>:
	switch (event) {
    ea6c:	2801      	cmp	r0, #1
{
    ea6e:	b508      	push	{r3, lr}
	switch (event) {
    ea70:	d006      	beq.n	ea80 <clock_event_handler+0x14>
    ea72:	2803      	cmp	r0, #3
    ea74:	d008      	beq.n	ea88 <clock_event_handler+0x1c>
    ea76:	b9a0      	cbnz	r0, eaa2 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    ea78:	4b0f      	ldr	r3, [pc, #60]	; (eab8 <clock_event_handler+0x4c>)
    ea7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ea7c:	075b      	lsls	r3, r3, #29
    ea7e:	d119      	bne.n	eab4 <clock_event_handler+0x48>
}
    ea80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    ea84:	f7ff bfd8 	b.w	ea38 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    ea88:	490c      	ldr	r1, [pc, #48]	; (eabc <clock_event_handler+0x50>)
    ea8a:	f240 225e 	movw	r2, #606	; 0x25e
    ea8e:	480c      	ldr	r0, [pc, #48]	; (eac0 <clock_event_handler+0x54>)
    ea90:	f006 f8d8 	bl	14c44 <printk>
    ea94:	f240 215e 	movw	r1, #606	; 0x25e
}
    ea98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    ea9c:	4807      	ldr	r0, [pc, #28]	; (eabc <clock_event_handler+0x50>)
    ea9e:	f006 b957 	b.w	14d50 <assert_post_action>
    eaa2:	4906      	ldr	r1, [pc, #24]	; (eabc <clock_event_handler+0x50>)
    eaa4:	f240 2262 	movw	r2, #610	; 0x262
    eaa8:	4805      	ldr	r0, [pc, #20]	; (eac0 <clock_event_handler+0x54>)
    eaaa:	f006 f8cb 	bl	14c44 <printk>
    eaae:	f240 2162 	movw	r1, #610	; 0x262
    eab2:	e7f1      	b.n	ea98 <clock_event_handler+0x2c>
}
    eab4:	bd08      	pop	{r3, pc}
    eab6:	bf00      	nop
    eab8:	200009a8 	.word	0x200009a8
    eabc:	0001683f 	.word	0x0001683f
    eac0:	00015be5 	.word	0x00015be5

0000eac4 <generic_hfclk_start>:
{
    eac4:	b508      	push	{r3, lr}
	__asm__ volatile(
    eac6:	f04f 0320 	mov.w	r3, #32
    eaca:	f3ef 8111 	mrs	r1, BASEPRI
    eace:	f383 8812 	msr	BASEPRI_MAX, r3
    ead2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    ead6:	4a12      	ldr	r2, [pc, #72]	; (eb20 <generic_hfclk_start+0x5c>)
    ead8:	6813      	ldr	r3, [r2, #0]
    eada:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    eade:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    eae2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    eae4:	d00c      	beq.n	eb00 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    eae6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    eaea:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    eaee:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    eaf2:	f013 0301 	ands.w	r3, r3, #1
    eaf6:	d003      	beq.n	eb00 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    eaf8:	480a      	ldr	r0, [pc, #40]	; (eb24 <generic_hfclk_start+0x60>)
    eafa:	f006 fa22 	bl	14f42 <set_on_state>
			already_started = true;
    eafe:	2301      	movs	r3, #1
	__asm__ volatile(
    eb00:	f381 8811 	msr	BASEPRI, r1
    eb04:	f3bf 8f6f 	isb	sy
	if (already_started) {
    eb08:	b123      	cbz	r3, eb14 <generic_hfclk_start+0x50>
}
    eb0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    eb0e:	2000      	movs	r0, #0
    eb10:	f7ff bf92 	b.w	ea38 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    eb14:	2001      	movs	r0, #1
}
    eb16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    eb1a:	f000 bddb 	b.w	f6d4 <nrfx_clock_start>
    eb1e:	bf00      	nop
    eb20:	20000a00 	.word	0x20000a00
    eb24:	200009f0 	.word	0x200009f0

0000eb28 <api_blocking_start>:
{
    eb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    eb2a:	2200      	movs	r2, #0
    eb2c:	2301      	movs	r3, #1
    eb2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    eb32:	466b      	mov	r3, sp
    eb34:	4a08      	ldr	r2, [pc, #32]	; (eb58 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    eb36:	f8cd d000 	str.w	sp, [sp]
    eb3a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    eb3e:	f006 fa43 	bl	14fc8 <api_start>
	if (err < 0) {
    eb42:	2800      	cmp	r0, #0
    eb44:	db05      	blt.n	eb52 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    eb46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    eb4a:	2300      	movs	r3, #0
    eb4c:	4668      	mov	r0, sp
    eb4e:	f002 f84d 	bl	10bec <z_impl_k_sem_take>
}
    eb52:	b005      	add	sp, #20
    eb54:	f85d fb04 	ldr.w	pc, [sp], #4
    eb58:	00014ff5 	.word	0x00014ff5

0000eb5c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    eb5c:	4b07      	ldr	r3, [pc, #28]	; (eb7c <generic_hfclk_stop+0x20>)
    eb5e:	e8d3 2fef 	ldaex	r2, [r3]
    eb62:	f022 0102 	bic.w	r1, r2, #2
    eb66:	e8c3 1fe0 	stlex	r0, r1, [r3]
    eb6a:	2800      	cmp	r0, #0
    eb6c:	d1f7      	bne.n	eb5e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    eb6e:	07d3      	lsls	r3, r2, #31
    eb70:	d402      	bmi.n	eb78 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    eb72:	2001      	movs	r0, #1
    eb74:	f000 be00 	b.w	f778 <nrfx_clock_stop>
}
    eb78:	4770      	bx	lr
    eb7a:	bf00      	nop
    eb7c:	20000a00 	.word	0x20000a00

0000eb80 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    eb80:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    eb82:	4808      	ldr	r0, [pc, #32]	; (eba4 <uart_console_init+0x24>)
    eb84:	4b08      	ldr	r3, [pc, #32]	; (eba8 <uart_console_init+0x28>)
    eb86:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    eb88:	f006 fbcf 	bl	1532a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    eb8c:	b138      	cbz	r0, eb9e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    eb8e:	4807      	ldr	r0, [pc, #28]	; (ebac <uart_console_init+0x2c>)
    eb90:	f7ff fe2a 	bl	e7e8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    eb94:	4805      	ldr	r0, [pc, #20]	; (ebac <uart_console_init+0x2c>)
    eb96:	f7fd fe03 	bl	c7a0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    eb9a:	2000      	movs	r0, #0
}
    eb9c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    eb9e:	f06f 0012 	mvn.w	r0, #18
    eba2:	e7fb      	b.n	eb9c <uart_console_init+0x1c>
    eba4:	000154c0 	.word	0x000154c0
    eba8:	20000a04 	.word	0x20000a04
    ebac:	0000ebb1 	.word	0x0000ebb1

0000ebb0 <console_out>:
	if ('\n' == c) {
    ebb0:	280a      	cmp	r0, #10
{
    ebb2:	b538      	push	{r3, r4, r5, lr}
    ebb4:	4604      	mov	r4, r0
    ebb6:	4d07      	ldr	r5, [pc, #28]	; (ebd4 <console_out+0x24>)
	if ('\n' == c) {
    ebb8:	d104      	bne.n	ebc4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    ebba:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    ebbc:	6883      	ldr	r3, [r0, #8]
    ebbe:	210d      	movs	r1, #13
    ebc0:	685b      	ldr	r3, [r3, #4]
    ebc2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    ebc4:	6828      	ldr	r0, [r5, #0]
    ebc6:	6883      	ldr	r3, [r0, #8]
    ebc8:	b2e1      	uxtb	r1, r4
    ebca:	685b      	ldr	r3, [r3, #4]
    ebcc:	4798      	blx	r3
}
    ebce:	4620      	mov	r0, r4
    ebd0:	bd38      	pop	{r3, r4, r5, pc}
    ebd2:	bf00      	nop
    ebd4:	20000a04 	.word	0x20000a04

0000ebd8 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    ebd8:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    ebda:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    ebdc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
    ebe0:	f001 fa90 	bl	10104 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    ebe4:	4b03      	ldr	r3, [pc, #12]	; (ebf4 <i2c_nrfx_twim_recover_bus+0x1c>)
    ebe6:	4298      	cmp	r0, r3
}
    ebe8:	bf14      	ite	ne
    ebea:	f06f 000f 	mvnne.w	r0, #15
    ebee:	2000      	moveq	r0, #0
    ebf0:	bd08      	pop	{r3, pc}
    ebf2:	bf00      	nop
    ebf4:	0bad0000 	.word	0x0bad0000

0000ebf8 <init_twim>:
{
    ebf8:	b538      	push	{r3, r4, r5, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    ebfa:	6905      	ldr	r5, [r0, #16]
{
    ebfc:	4604      	mov	r4, r0
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    ebfe:	462b      	mov	r3, r5
    ec00:	4a0a      	ldr	r2, [pc, #40]	; (ec2c <init_twim+0x34>)
    ec02:	6840      	ldr	r0, [r0, #4]
    ec04:	f105 0120 	add.w	r1, r5, #32
    ec08:	f000 fe74 	bl	f8f4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    ec0c:	4b08      	ldr	r3, [pc, #32]	; (ec30 <init_twim+0x38>)
    ec0e:	4298      	cmp	r0, r3
    ec10:	d007      	beq.n	ec22 <init_twim+0x2a>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    ec12:	4808      	ldr	r0, [pc, #32]	; (ec34 <init_twim+0x3c>)
    ec14:	2145      	movs	r1, #69	; 0x45
    ec16:	6822      	ldr	r2, [r4, #0]
    ec18:	f006 f8a8 	bl	14d6c <z_log_minimal_printk>
    ec1c:	f06f 0004 	mvn.w	r0, #4
}
    ec20:	bd38      	pop	{r3, r4, r5, pc}
	dev_data->twim_initialized = true;
    ec22:	2301      	movs	r3, #1
	return 0;
    ec24:	2000      	movs	r0, #0
	dev_data->twim_initialized = true;
    ec26:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	return 0;
    ec2a:	e7f9      	b.n	ec20 <init_twim+0x28>
    ec2c:	0000ec95 	.word	0x0000ec95
    ec30:	0bad0000 	.word	0x0bad0000
    ec34:	0001689a 	.word	0x0001689a

0000ec38 <i2c_nrfx_twim_configure>:
{
    ec38:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    ec3a:	07cb      	lsls	r3, r1, #31
{
    ec3c:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
    ec3e:	d409      	bmi.n	ec54 <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(i2c_config)) {
    ec40:	f3c1 0142 	ubfx	r1, r1, #1, #3
    ec44:	2901      	cmp	r1, #1
    ec46:	d008      	beq.n	ec5a <i2c_nrfx_twim_configure+0x22>
    ec48:	2902      	cmp	r1, #2
    ec4a:	d01b      	beq.n	ec84 <i2c_nrfx_twim_configure+0x4c>
		LOG_ERR("unsupported speed");
    ec4c:	2145      	movs	r1, #69	; 0x45
    ec4e:	4810      	ldr	r0, [pc, #64]	; (ec90 <i2c_nrfx_twim_configure+0x58>)
    ec50:	f006 f88c 	bl	14d6c <z_log_minimal_printk>
		return -EINVAL;
    ec54:	f06f 0015 	mvn.w	r0, #21
}
    ec58:	bd38      	pop	{r3, r4, r5, pc}
		frequency = NRF_TWIM_FREQ_100K;
    ec5a:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    ec5e:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
    ec60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ec62:	4293      	cmp	r3, r2
    ec64:	d011      	beq.n	ec8a <i2c_nrfx_twim_configure+0x52>
		dev_data->twim_config.frequency = frequency;
    ec66:	62ab      	str	r3, [r5, #40]	; 0x28
	if (dev_data->twim_initialized) {
    ec68:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    ec6c:	b12b      	cbz	r3, ec7a <i2c_nrfx_twim_configure+0x42>
		nrfx_twim_uninit(&dev_config->twim);
    ec6e:	6860      	ldr	r0, [r4, #4]
    ec70:	f000 ff0c 	bl	fa8c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
    ec74:	2300      	movs	r3, #0
    ec76:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
		return init_twim(dev);
    ec7a:	4620      	mov	r0, r4
}
    ec7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
    ec80:	f7ff bfba 	b.w	ebf8 <init_twim>
	switch (I2C_SPEED_GET(i2c_config)) {
    ec84:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
    ec88:	e7e9      	b.n	ec5e <i2c_nrfx_twim_configure+0x26>
	return 0;
    ec8a:	2000      	movs	r0, #0
    ec8c:	e7e4      	b.n	ec58 <i2c_nrfx_twim_configure+0x20>
    ec8e:	bf00      	nop
    ec90:	000168bf 	.word	0x000168bf

0000ec94 <event_handler>:
	switch (p_event->type) {
    ec94:	7803      	ldrb	r3, [r0, #0]
    ec96:	2b01      	cmp	r3, #1
    ec98:	d008      	beq.n	ecac <event_handler+0x18>
    ec9a:	2b02      	cmp	r3, #2
    ec9c:	d008      	beq.n	ecb0 <event_handler+0x1c>
    ec9e:	b94b      	cbnz	r3, ecb4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    eca0:	4b05      	ldr	r3, [pc, #20]	; (ecb8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    eca2:	634b      	str	r3, [r1, #52]	; 0x34
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    eca4:	f101 0010 	add.w	r0, r1, #16
    eca8:	f001 bf6a 	b.w	10b80 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    ecac:	4b03      	ldr	r3, [pc, #12]	; (ecbc <event_handler+0x28>)
    ecae:	e7f8      	b.n	eca2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    ecb0:	4b03      	ldr	r3, [pc, #12]	; (ecc0 <event_handler+0x2c>)
    ecb2:	e7f6      	b.n	eca2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    ecb4:	4b03      	ldr	r3, [pc, #12]	; (ecc4 <event_handler+0x30>)
    ecb6:	e7f4      	b.n	eca2 <event_handler+0xe>
    ecb8:	0bad0000 	.word	0x0bad0000
    ecbc:	0bae0001 	.word	0x0bae0001
    ecc0:	0bae0002 	.word	0x0bae0002
    ecc4:	0bad0001 	.word	0x0bad0001

0000ecc8 <i2c_nrfx_twim_transfer>:
{
    ecc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eccc:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    ecce:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    ecd2:	b08d      	sub	sp, #52	; 0x34
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    ecd4:	6906      	ldr	r6, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    ecd6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
{
    ecda:	9203      	str	r2, [sp, #12]
    ecdc:	4607      	mov	r7, r0
    ecde:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    ece0:	2214      	movs	r2, #20
    ece2:	2100      	movs	r1, #0
    ece4:	a807      	add	r0, sp, #28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    ece6:	9302      	str	r3, [sp, #8]
	uint8_t *msg_buf = dev_data->msg_buf;
    ece8:	f8d6 a038 	ldr.w	sl, [r6, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
    ecec:	f006 f91d 	bl	14f2a <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    ecf0:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
	nrfx_twim_xfer_desc_t cur_xfer = {
    ecf4:	f88d 501d 	strb.w	r5, [sp, #29]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    ecf8:	b1c3      	cbz	r3, ed2c <i2c_nrfx_twim_transfer+0x64>
	return z_impl_k_sem_take(sem, timeout);
    ecfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ecfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ed02:	4630      	mov	r0, r6
    ed04:	f001 ff72 	bl	10bec <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    ed08:	f106 0b10 	add.w	fp, r6, #16
	for (size_t i = 0; i < num_msgs; i++) {
    ed0c:	f04f 0900 	mov.w	r9, #0
    ed10:	2200      	movs	r2, #0
    ed12:	2300      	movs	r3, #0
    ed14:	4658      	mov	r0, fp
    ed16:	f001 ff69 	bl	10bec <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    ed1a:	4640      	mov	r0, r8
    ed1c:	f000 fe5a 	bl	f9d4 <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
    ed20:	464d      	mov	r5, r9
	for (size_t i = 0; i < num_msgs; i++) {
    ed22:	9b03      	ldr	r3, [sp, #12]
    ed24:	4599      	cmp	r9, r3
    ed26:	d309      	bcc.n	ed3c <i2c_nrfx_twim_transfer+0x74>
    ed28:	2400      	movs	r4, #0
    ed2a:	e030      	b.n	ed8e <i2c_nrfx_twim_transfer+0xc6>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    ed2c:	4638      	mov	r0, r7
    ed2e:	f7ff ff63 	bl	ebf8 <init_twim>
    ed32:	2800      	cmp	r0, #0
    ed34:	dae1      	bge.n	ecfa <i2c_nrfx_twim_transfer+0x32>
		return -EIO;
    ed36:	f06f 0404 	mvn.w	r4, #4
    ed3a:	e02e      	b.n	ed9a <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    ed3c:	7a21      	ldrb	r1, [r4, #8]
    ed3e:	070b      	lsls	r3, r1, #28
    ed40:	f100 80b9 	bmi.w	eeb6 <i2c_nrfx_twim_transfer+0x1ee>
				&& ((msgs[i].flags & I2C_MSG_READ)
    ed44:	9a03      	ldr	r2, [sp, #12]
		bool concat_next = ((i + 1) < num_msgs)
    ed46:	f109 0301 	add.w	r3, r9, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    ed4a:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
    ed4c:	9304      	str	r3, [sp, #16]
				&& ((msgs[i].flags & I2C_MSG_READ)
    ed4e:	d20a      	bcs.n	ed66 <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    ed50:	0788      	lsls	r0, r1, #30
    ed52:	d408      	bmi.n	ed66 <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    ed54:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    ed56:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    ed5a:	f002 0201 	and.w	r2, r2, #1
    ed5e:	f003 0304 	and.w	r3, r3, #4
    ed62:	4313      	orrs	r3, r2
    ed64:	d01d      	beq.n	eda2 <i2c_nrfx_twim_transfer+0xda>
		if (concat_next || (msg_buf_used != 0)) {
    ed66:	b385      	cbz	r5, edca <i2c_nrfx_twim_transfer+0x102>
				&& ((msgs[i].flags & I2C_MSG_READ)
    ed68:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    ed6a:	6862      	ldr	r2, [r4, #4]
    ed6c:	f8dd c008 	ldr.w	ip, [sp, #8]
    ed70:	18a8      	adds	r0, r5, r2
    ed72:	4560      	cmp	r0, ip
    ed74:	d917      	bls.n	eda6 <i2c_nrfx_twim_transfer+0xde>
				LOG_ERR("Need to use concatenation buffer and "
    ed76:	683b      	ldr	r3, [r7, #0]
    ed78:	2145      	movs	r1, #69	; 0x45
    ed7a:	9301      	str	r3, [sp, #4]
    ed7c:	484f      	ldr	r0, [pc, #316]	; (eebc <i2c_nrfx_twim_transfer+0x1f4>)
    ed7e:	4613      	mov	r3, r2
    ed80:	f8cd c000 	str.w	ip, [sp]
    ed84:	462a      	mov	r2, r5
    ed86:	f005 fff1 	bl	14d6c <z_log_minimal_printk>
				ret = -ENOSPC;
    ed8a:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
    ed8e:	4640      	mov	r0, r8
    ed90:	f000 fe48 	bl	fa24 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    ed94:	4630      	mov	r0, r6
    ed96:	f001 fef3 	bl	10b80 <z_impl_k_sem_give>
}
    ed9a:	4620      	mov	r0, r4
    ed9c:	b00d      	add	sp, #52	; 0x34
    ed9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
    eda2:	2301      	movs	r3, #1
    eda4:	e7e1      	b.n	ed6a <i2c_nrfx_twim_transfer+0xa2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    eda6:	07c9      	lsls	r1, r1, #31
    eda8:	d406      	bmi.n	edb8 <i2c_nrfx_twim_transfer+0xf0>
				memcpy(msg_buf + msg_buf_used,
    edaa:	6821      	ldr	r1, [r4, #0]
    edac:	eb0a 0005 	add.w	r0, sl, r5
    edb0:	9305      	str	r3, [sp, #20]
    edb2:	f006 f8af 	bl	14f14 <memcpy>
    edb6:	9b05      	ldr	r3, [sp, #20]
			msg_buf_used += msgs[i].len;
    edb8:	6862      	ldr	r2, [r4, #4]
    edba:	4415      	add	r5, r2
    edbc:	b2ad      	uxth	r5, r5
		if (concat_next) {
    edbe:	2b00      	cmp	r3, #0
    edc0:	d03a      	beq.n	ee38 <i2c_nrfx_twim_transfer+0x170>
		bool concat_next = ((i + 1) < num_msgs)
    edc2:	f8dd 9010 	ldr.w	r9, [sp, #16]
    edc6:	340c      	adds	r4, #12
    edc8:	e7ab      	b.n	ed22 <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    edca:	07ca      	lsls	r2, r1, #31
    edcc:	d51d      	bpl.n	ee0a <i2c_nrfx_twim_transfer+0x142>
			cur_xfer.p_primary_buf = msgs[i].buf;
    edce:	2500      	movs	r5, #0
    edd0:	6823      	ldr	r3, [r4, #0]
    edd2:	930a      	str	r3, [sp, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
    edd4:	6863      	ldr	r3, [r4, #4]
    edd6:	9308      	str	r3, [sp, #32]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    edd8:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    edda:	4640      	mov	r0, r8
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    eddc:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ede0:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    ede4:	f88d 201c 	strb.w	r2, [sp, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ede8:	a907      	add	r1, sp, #28
    edea:	bf0c      	ite	eq
    edec:	2220      	moveq	r2, #32
    edee:	2200      	movne	r2, #0
    edf0:	f000 fe9c 	bl	fb2c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    edf4:	4b32      	ldr	r3, [pc, #200]	; (eec0 <i2c_nrfx_twim_transfer+0x1f8>)
    edf6:	4298      	cmp	r0, r3
    edf8:	d024      	beq.n	ee44 <i2c_nrfx_twim_transfer+0x17c>
			if (res == NRFX_ERROR_BUSY) {
    edfa:	330b      	adds	r3, #11
				ret = -EIO;
    edfc:	4298      	cmp	r0, r3
    edfe:	bf0c      	ite	eq
    ee00:	f06f 040f 	mvneq.w	r4, #15
    ee04:	f06f 0404 	mvnne.w	r4, #4
    ee08:	e7c1      	b.n	ed8e <i2c_nrfx_twim_transfer+0xc6>
			   !nrfx_is_in_ram(msgs[i].buf)) {
    ee0a:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    ee0c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    ee10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ee14:	d0db      	beq.n	edce <i2c_nrfx_twim_transfer+0x106>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    ee16:	6862      	ldr	r2, [r4, #4]
    ee18:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    ee1c:	4293      	cmp	r3, r2
    ee1e:	d207      	bcs.n	ee30 <i2c_nrfx_twim_transfer+0x168>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    ee20:	2145      	movs	r1, #69	; 0x45
    ee22:	683b      	ldr	r3, [r7, #0]
    ee24:	4827      	ldr	r0, [pc, #156]	; (eec4 <i2c_nrfx_twim_transfer+0x1fc>)
    ee26:	f005 ffa1 	bl	14d6c <z_log_minimal_printk>
				ret = -EINVAL;
    ee2a:	f06f 0415 	mvn.w	r4, #21
				break;
    ee2e:	e7ae      	b.n	ed8e <i2c_nrfx_twim_transfer+0xc6>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    ee30:	4650      	mov	r0, sl
    ee32:	f006 f86f 	bl	14f14 <memcpy>
			msg_buf_used = msgs[i].len;
    ee36:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    ee38:	2d00      	cmp	r5, #0
    ee3a:	d0c8      	beq.n	edce <i2c_nrfx_twim_transfer+0x106>
			cur_xfer.p_primary_buf = msg_buf;
    ee3c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
    ee40:	9508      	str	r5, [sp, #32]
    ee42:	e7c9      	b.n	edd8 <i2c_nrfx_twim_transfer+0x110>
	return z_impl_k_sem_take(sem, timeout);
    ee44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ee48:	2300      	movs	r3, #0
    ee4a:	4658      	mov	r0, fp
    ee4c:	f001 fece 	bl	10bec <z_impl_k_sem_take>
		if (ret != 0) {
    ee50:	b170      	cbz	r0, ee70 <i2c_nrfx_twim_transfer+0x1a8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    ee52:	2145      	movs	r1, #69	; 0x45
    ee54:	464a      	mov	r2, r9
    ee56:	481c      	ldr	r0, [pc, #112]	; (eec8 <i2c_nrfx_twim_transfer+0x200>)
    ee58:	f005 ff88 	bl	14d6c <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
    ee5c:	4640      	mov	r0, r8
    ee5e:	f000 fde1 	bl	fa24 <nrfx_twim_disable>
    ee62:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
    ee66:	f001 f94d 	bl	10104 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
    ee6a:	f06f 0404 	mvn.w	r4, #4
			break;
    ee6e:	e78e      	b.n	ed8e <i2c_nrfx_twim_transfer+0xc6>
		res = dev_data->res;
    ee70:	6b72      	ldr	r2, [r6, #52]	; 0x34
		if (res != NRFX_SUCCESS) {
    ee72:	4b13      	ldr	r3, [pc, #76]	; (eec0 <i2c_nrfx_twim_transfer+0x1f8>)
    ee74:	429a      	cmp	r2, r3
    ee76:	d005      	beq.n	ee84 <i2c_nrfx_twim_transfer+0x1bc>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    ee78:	464b      	mov	r3, r9
    ee7a:	2145      	movs	r1, #69	; 0x45
    ee7c:	4813      	ldr	r0, [pc, #76]	; (eecc <i2c_nrfx_twim_transfer+0x204>)
    ee7e:	f005 ff75 	bl	14d6c <z_log_minimal_printk>
    ee82:	e7f2      	b.n	ee6a <i2c_nrfx_twim_transfer+0x1a2>
		if ((msgs[i].flags & I2C_MSG_READ)
    ee84:	7a23      	ldrb	r3, [r4, #8]
    ee86:	07db      	lsls	r3, r3, #31
    ee88:	d401      	bmi.n	ee8e <i2c_nrfx_twim_transfer+0x1c6>
		msg_buf_used = 0;
    ee8a:	2500      	movs	r5, #0
    ee8c:	e799      	b.n	edc2 <i2c_nrfx_twim_transfer+0xfa>
		    && cur_xfer.p_primary_buf == msg_buf) {
    ee8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee90:	459a      	cmp	sl, r3
    ee92:	d1fa      	bne.n	ee8a <i2c_nrfx_twim_transfer+0x1c2>
    ee94:	46a1      	mov	r9, r4
    ee96:	e007      	b.n	eea8 <i2c_nrfx_twim_transfer+0x1e0>
				msg_buf_used -= msgs[j].len;
    ee98:	1aa9      	subs	r1, r5, r2
    ee9a:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    ee9c:	f8d9 000c 	ldr.w	r0, [r9, #12]
    eea0:	fa1a f181 	uxtah	r1, sl, r1
    eea4:	f006 f836 	bl	14f14 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
    eea8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    eeac:	f1a9 090c 	sub.w	r9, r9, #12
    eeb0:	4295      	cmp	r5, r2
    eeb2:	d2f1      	bcs.n	ee98 <i2c_nrfx_twim_transfer+0x1d0>
    eeb4:	e7e9      	b.n	ee8a <i2c_nrfx_twim_transfer+0x1c2>
			ret = -ENOTSUP;
    eeb6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    eeba:	e768      	b.n	ed8e <i2c_nrfx_twim_transfer+0xc6>
    eebc:	000168d6 	.word	0x000168d6
    eec0:	0bad0000 	.word	0x0bad0000
    eec4:	0001696b 	.word	0x0001696b
    eec8:	000169d6 	.word	0x000169d6
    eecc:	00016a05 	.word	0x00016a05

0000eed0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    eed0:	6803      	ldr	r3, [r0, #0]
{
    eed2:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    eed4:	095a      	lsrs	r2, r3, #5
    eed6:	bf0c      	ite	eq
    eed8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    eedc:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    eede:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
    eee2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    eee6:	07db      	lsls	r3, r3, #31
{
    eee8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    eeea:	d40a      	bmi.n	ef02 <nrf_gpio_pin_port_decode+0x32>
    eeec:	490e      	ldr	r1, [pc, #56]	; (ef28 <nrf_gpio_pin_port_decode+0x58>)
    eeee:	480f      	ldr	r0, [pc, #60]	; (ef2c <nrf_gpio_pin_port_decode+0x5c>)
    eef0:	f240 2229 	movw	r2, #553	; 0x229
    eef4:	f005 fea6 	bl	14c44 <printk>
    eef8:	f240 2129 	movw	r1, #553	; 0x229
    eefc:	480a      	ldr	r0, [pc, #40]	; (ef28 <nrf_gpio_pin_port_decode+0x58>)
    eefe:	f005 ff27 	bl	14d50 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    ef02:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    ef04:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ef08:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    ef0a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ef0c:	d00a      	beq.n	ef24 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    ef0e:	4906      	ldr	r1, [pc, #24]	; (ef28 <nrf_gpio_pin_port_decode+0x58>)
    ef10:	4806      	ldr	r0, [pc, #24]	; (ef2c <nrf_gpio_pin_port_decode+0x5c>)
    ef12:	f240 222e 	movw	r2, #558	; 0x22e
    ef16:	f005 fe95 	bl	14c44 <printk>
    ef1a:	f240 212e 	movw	r1, #558	; 0x22e
    ef1e:	4802      	ldr	r0, [pc, #8]	; (ef28 <nrf_gpio_pin_port_decode+0x58>)
    ef20:	f005 ff16 	bl	14d50 <assert_post_action>
}
    ef24:	4802      	ldr	r0, [pc, #8]	; (ef30 <nrf_gpio_pin_port_decode+0x60>)
    ef26:	bd10      	pop	{r4, pc}
    ef28:	00016a3d 	.word	0x00016a3d
    ef2c:	00015be5 	.word	0x00015be5
    ef30:	50842500 	.word	0x50842500

0000ef34 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    ef34:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    ef36:	794b      	ldrb	r3, [r1, #5]
    ef38:	2b01      	cmp	r3, #1
    ef3a:	d026      	beq.n	ef8a <uarte_nrfx_configure+0x56>
    ef3c:	2b03      	cmp	r3, #3
    ef3e:	d121      	bne.n	ef84 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    ef40:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    ef42:	798b      	ldrb	r3, [r1, #6]
    ef44:	2b03      	cmp	r3, #3
    ef46:	d11d      	bne.n	ef84 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    ef48:	79cc      	ldrb	r4, [r1, #7]
    ef4a:	b10c      	cbz	r4, ef50 <uarte_nrfx_configure+0x1c>
    ef4c:	2c01      	cmp	r4, #1
    ef4e:	d119      	bne.n	ef84 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    ef50:	790a      	ldrb	r2, [r1, #4]
    ef52:	b112      	cbz	r2, ef5a <uarte_nrfx_configure+0x26>
    ef54:	2a02      	cmp	r2, #2
    ef56:	d115      	bne.n	ef84 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ef58:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    ef5a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    ef5c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    ef5e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    ef62:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    ef64:	d065      	beq.n	f032 <uarte_nrfx_configure+0xfe>
    ef66:	d82d      	bhi.n	efc4 <uarte_nrfx_configure+0x90>
    ef68:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    ef6c:	d064      	beq.n	f038 <uarte_nrfx_configure+0x104>
    ef6e:	d816      	bhi.n	ef9e <uarte_nrfx_configure+0x6a>
    ef70:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    ef74:	d062      	beq.n	f03c <uarte_nrfx_configure+0x108>
    ef76:	d80a      	bhi.n	ef8e <uarte_nrfx_configure+0x5a>
    ef78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    ef7c:	d061      	beq.n	f042 <uarte_nrfx_configure+0x10e>
    ef7e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    ef82:	d061      	beq.n	f048 <uarte_nrfx_configure+0x114>
    ef84:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ef88:	e052      	b.n	f030 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    ef8a:	2600      	movs	r6, #0
    ef8c:	e7d9      	b.n	ef42 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    ef8e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    ef92:	d05c      	beq.n	f04e <uarte_nrfx_configure+0x11a>
    ef94:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    ef98:	d1f4      	bne.n	ef84 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    ef9a:	4b37      	ldr	r3, [pc, #220]	; (f078 <uarte_nrfx_configure+0x144>)
    ef9c:	e03c      	b.n	f018 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ef9e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    efa2:	d057      	beq.n	f054 <uarte_nrfx_configure+0x120>
    efa4:	d807      	bhi.n	efb6 <uarte_nrfx_configure+0x82>
    efa6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    efaa:	d055      	beq.n	f058 <uarte_nrfx_configure+0x124>
    efac:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    efb0:	d1e8      	bne.n	ef84 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    efb2:	4b32      	ldr	r3, [pc, #200]	; (f07c <uarte_nrfx_configure+0x148>)
    efb4:	e030      	b.n	f018 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    efb6:	f647 2712 	movw	r7, #31250	; 0x7a12
    efba:	42bb      	cmp	r3, r7
    efbc:	d1e2      	bne.n	ef84 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    efbe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    efc2:	e029      	b.n	f018 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    efc4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    efc8:	d048      	beq.n	f05c <uarte_nrfx_configure+0x128>
    efca:	d813      	bhi.n	eff4 <uarte_nrfx_configure+0xc0>
    efcc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    efd0:	d047      	beq.n	f062 <uarte_nrfx_configure+0x12e>
    efd2:	d809      	bhi.n	efe8 <uarte_nrfx_configure+0xb4>
    efd4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    efd8:	42bb      	cmp	r3, r7
    efda:	d044      	beq.n	f066 <uarte_nrfx_configure+0x132>
    efdc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    efe0:	d1d0      	bne.n	ef84 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    efe2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    efe6:	e017      	b.n	f018 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    efe8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    efec:	d1ca      	bne.n	ef84 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    efee:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    eff2:	e011      	b.n	f018 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    eff4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    eff8:	d038      	beq.n	f06c <uarte_nrfx_configure+0x138>
    effa:	d808      	bhi.n	f00e <uarte_nrfx_configure+0xda>
    effc:	4f20      	ldr	r7, [pc, #128]	; (f080 <uarte_nrfx_configure+0x14c>)
    effe:	42bb      	cmp	r3, r7
    f000:	d037      	beq.n	f072 <uarte_nrfx_configure+0x13e>
    f002:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f006:	d1bd      	bne.n	ef84 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f008:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f00c:	e004      	b.n	f018 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f00e:	4f1d      	ldr	r7, [pc, #116]	; (f084 <uarte_nrfx_configure+0x150>)
    f010:	42bb      	cmp	r3, r7
    f012:	d1b7      	bne.n	ef84 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f014:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    f018:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
    f01a:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f01c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    f020:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    f022:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f024:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    f028:	c903      	ldmia	r1, {r0, r1}
    f02a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f02e:	2000      	movs	r0, #0
}
    f030:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f032:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f036:	e7ef      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f038:	4b13      	ldr	r3, [pc, #76]	; (f088 <uarte_nrfx_configure+0x154>)
    f03a:	e7ed      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f03c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f040:	e7ea      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    f042:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f046:	e7e7      	b.n	f018 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    f048:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f04c:	e7e4      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f04e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f052:	e7e1      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f054:	4b0d      	ldr	r3, [pc, #52]	; (f08c <uarte_nrfx_configure+0x158>)
    f056:	e7df      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f058:	4b0d      	ldr	r3, [pc, #52]	; (f090 <uarte_nrfx_configure+0x15c>)
    f05a:	e7dd      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f05c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f060:	e7da      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f062:	4b0c      	ldr	r3, [pc, #48]	; (f094 <uarte_nrfx_configure+0x160>)
    f064:	e7d8      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f066:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f06a:	e7d5      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f06c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f070:	e7d2      	b.n	f018 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f072:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f076:	e7cf      	b.n	f018 <uarte_nrfx_configure+0xe4>
    f078:	0013b000 	.word	0x0013b000
    f07c:	004ea000 	.word	0x004ea000
    f080:	0003d090 	.word	0x0003d090
    f084:	000f4240 	.word	0x000f4240
    f088:	00275000 	.word	0x00275000
    f08c:	0075c000 	.word	0x0075c000
    f090:	003af000 	.word	0x003af000
    f094:	013a9000 	.word	0x013a9000

0000f098 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    f098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f09a:	4605      	mov	r5, r0
    f09c:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    f09e:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f0a0:	f006 f96d 	bl	1537e <k_is_in_isr>
    f0a4:	b910      	cbnz	r0, f0ac <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    f0a6:	4b2c      	ldr	r3, [pc, #176]	; (f158 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    f0a8:	781b      	ldrb	r3, [r3, #0]
    f0aa:	b983      	cbnz	r3, f0ce <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    f0ac:	f04f 0320 	mov.w	r3, #32
    f0b0:	f3ef 8411 	mrs	r4, BASEPRI
    f0b4:	f383 8812 	msr	BASEPRI_MAX, r3
    f0b8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    f0bc:	6868      	ldr	r0, [r5, #4]
    f0be:	f005 ffd7 	bl	15070 <is_tx_ready.isra.0>
    f0c2:	bb28      	cbnz	r0, f110 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    f0c4:	f384 8811 	msr	BASEPRI, r4
    f0c8:	f3bf 8f6f 	isb	sy
}
    f0cc:	e7ee      	b.n	f0ac <uarte_nrfx_poll_out+0x14>
{
    f0ce:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    f0d0:	6868      	ldr	r0, [r5, #4]
    f0d2:	f005 ffcd 	bl	15070 <is_tx_ready.isra.0>
    f0d6:	b970      	cbnz	r0, f0f6 <uarte_nrfx_poll_out+0x5e>
    f0d8:	2001      	movs	r0, #1
    f0da:	f006 f8e7 	bl	152ac <nrfx_busy_wait>
    f0de:	3c01      	subs	r4, #1
    f0e0:	d1f6      	bne.n	f0d0 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    f0e2:	2100      	movs	r1, #0
    f0e4:	2021      	movs	r0, #33	; 0x21
    f0e6:	f002 fc61 	bl	119ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    f0ea:	e7f0      	b.n	f0ce <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    f0ec:	f384 8811 	msr	BASEPRI, r4
    f0f0:	f3bf 8f6f 	isb	sy
}
    f0f4:	e7f5      	b.n	f0e2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    f0f6:	f04f 0320 	mov.w	r3, #32
    f0fa:	f3ef 8411 	mrs	r4, BASEPRI
    f0fe:	f383 8812 	msr	BASEPRI_MAX, r3
    f102:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    f106:	6868      	ldr	r0, [r5, #4]
    f108:	f005 ffb2 	bl	15070 <is_tx_ready.isra.0>
    f10c:	2800      	cmp	r0, #0
    f10e:	d0ed      	beq.n	f0ec <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    f110:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    f112:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    f116:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    f118:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f11a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f11e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f122:	2200      	movs	r2, #0
    f124:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    f128:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    f12c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    f130:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f134:	684a      	ldr	r2, [r1, #4]
    f136:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f138:	bf41      	itttt	mi
    f13a:	2208      	movmi	r2, #8
    f13c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    f140:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    f144:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f148:	2201      	movs	r2, #1
    f14a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    f14c:	f384 8811 	msr	BASEPRI, r4
    f150:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    f154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f156:	bf00      	nop
    f158:	20001489 	.word	0x20001489

0000f15c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
    f15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f15e:	460f      	mov	r7, r1
    f160:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
    f162:	b940      	cbnz	r0, f176 <entropy_cc3xx_rng_get_entropy+0x1a>
    f164:	4918      	ldr	r1, [pc, #96]	; (f1c8 <entropy_cc3xx_rng_get_entropy+0x6c>)
    f166:	4819      	ldr	r0, [pc, #100]	; (f1cc <entropy_cc3xx_rng_get_entropy+0x70>)
    f168:	2220      	movs	r2, #32
    f16a:	f005 fd6b 	bl	14c44 <printk>
    f16e:	2120      	movs	r1, #32
    f170:	4815      	ldr	r0, [pc, #84]	; (f1c8 <entropy_cc3xx_rng_get_entropy+0x6c>)
    f172:	f005 fded 	bl	14d50 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    f176:	b947      	cbnz	r7, f18a <entropy_cc3xx_rng_get_entropy+0x2e>
    f178:	4913      	ldr	r1, [pc, #76]	; (f1c8 <entropy_cc3xx_rng_get_entropy+0x6c>)
    f17a:	4814      	ldr	r0, [pc, #80]	; (f1cc <entropy_cc3xx_rng_get_entropy+0x70>)
    f17c:	2221      	movs	r2, #33	; 0x21
    f17e:	f005 fd61 	bl	14c44 <printk>
    f182:	2121      	movs	r1, #33	; 0x21
    f184:	4810      	ldr	r0, [pc, #64]	; (f1c8 <entropy_cc3xx_rng_get_entropy+0x6c>)
    f186:	f005 fde3 	bl	14d50 <assert_post_action>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    f18a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    f18e:	2400      	movs	r4, #0
	while (offset < length) {
    f190:	42a6      	cmp	r6, r4
    f192:	d803      	bhi.n	f19c <entropy_cc3xx_rng_get_entropy+0x40>
		}

		offset += chunk_size;
	}

	if (offset == length) {
    f194:	d116      	bne.n	f1c4 <entropy_cc3xx_rng_get_entropy+0x68>
		err = 0;
    f196:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
    f198:	b003      	add	sp, #12
    f19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    f19c:	1b33      	subs	r3, r6, r4
    f19e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f1a2:	bf38      	it	cc
    f1a4:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
    f1a6:	2000      	movs	r0, #0
    f1a8:	462a      	mov	r2, r5
    f1aa:	ab01      	add	r3, sp, #4
    f1ac:	1939      	adds	r1, r7, r4
    f1ae:	f002 fffd 	bl	121ac <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
    f1b2:	b920      	cbnz	r0, f1be <entropy_cc3xx_rng_get_entropy+0x62>
		if (olen != chunk_size) {
    f1b4:	9b01      	ldr	r3, [sp, #4]
    f1b6:	42ab      	cmp	r3, r5
    f1b8:	d101      	bne.n	f1be <entropy_cc3xx_rng_get_entropy+0x62>
		offset += chunk_size;
    f1ba:	442c      	add	r4, r5
    f1bc:	e7e8      	b.n	f190 <entropy_cc3xx_rng_get_entropy+0x34>
			return -EINVAL;
    f1be:	f06f 0015 	mvn.w	r0, #21
    f1c2:	e7e9      	b.n	f198 <entropy_cc3xx_rng_get_entropy+0x3c>
	int err = EINVAL;
    f1c4:	2016      	movs	r0, #22
    f1c6:	e7e7      	b.n	f198 <entropy_cc3xx_rng_get_entropy+0x3c>
    f1c8:	00016a8e 	.word	0x00016a8e
    f1cc:	00015be5 	.word	0x00015be5

0000f1d0 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    f1d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f1d4:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    f1d6:	6919      	ldr	r1, [r3, #16]
{
    f1d8:	b510      	push	{r4, lr}
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    f1da:	f411 3f80 	tst.w	r1, #65536	; 0x10000
	uint32_t val2 = SysTick->VAL;	/* C */
    f1de:	6998      	ldr	r0, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    f1e0:	4908      	ldr	r1, [pc, #32]	; (f204 <elapsed+0x34>)
    f1e2:	4b09      	ldr	r3, [pc, #36]	; (f208 <elapsed+0x38>)
    f1e4:	d101      	bne.n	f1ea <elapsed+0x1a>
	    || (val1 < val2)) {
    f1e6:	4282      	cmp	r2, r0
    f1e8:	d206      	bcs.n	f1f8 <elapsed+0x28>
		overflow_cyc += last_load;
    f1ea:	681a      	ldr	r2, [r3, #0]
    f1ec:	680c      	ldr	r4, [r1, #0]
    f1ee:	4422      	add	r2, r4
    f1f0:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    f1f2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    f1f6:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
    f1f8:	681b      	ldr	r3, [r3, #0]
    f1fa:	680a      	ldr	r2, [r1, #0]
    f1fc:	4413      	add	r3, r2
}
    f1fe:	1a18      	subs	r0, r3, r0
    f200:	bd10      	pop	{r4, pc}
    f202:	bf00      	nop
    f204:	20000a10 	.word	0x20000a10
    f208:	20000a18 	.word	0x20000a18

0000f20c <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f20c:	2220      	movs	r2, #32
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
    f20e:	2000      	movs	r0, #0
    f210:	4b07      	ldr	r3, [pc, #28]	; (f230 <sys_clock_driver_init+0x24>)
    f212:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    f216:	4b07      	ldr	r3, [pc, #28]	; (f234 <sys_clock_driver_init+0x28>)
    f218:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
    f21a:	4b07      	ldr	r3, [pc, #28]	; (f238 <sys_clock_driver_init+0x2c>)
    f21c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    f21e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f222:	6158      	str	r0, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    f224:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    f226:	691a      	ldr	r2, [r3, #16]
    f228:	f042 0207 	orr.w	r2, r2, #7
    f22c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    f22e:	4770      	bx	lr
    f230:	e000ed00 	.word	0xe000ed00
    f234:	20000a10 	.word	0x20000a10
    f238:	20000a18 	.word	0x20000a18

0000f23c <sys_clock_isr>:
{
    f23c:	b508      	push	{r3, lr}
	elapsed();
    f23e:	f7ff ffc7 	bl	f1d0 <elapsed>
	cycle_count += overflow_cyc;
    f242:	4a09      	ldr	r2, [pc, #36]	; (f268 <sys_clock_isr+0x2c>)
    f244:	4909      	ldr	r1, [pc, #36]	; (f26c <sys_clock_isr+0x30>)
    f246:	6813      	ldr	r3, [r2, #0]
    f248:	6808      	ldr	r0, [r1, #0]
    f24a:	4403      	add	r3, r0
    f24c:	600b      	str	r3, [r1, #0]
	overflow_cyc = 0;
    f24e:	2100      	movs	r1, #0
    f250:	6011      	str	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    f252:	4a07      	ldr	r2, [pc, #28]	; (f270 <sys_clock_isr+0x34>)
    f254:	6810      	ldr	r0, [r2, #0]
		announced_cycles += dticks * CYC_PER_TICK;
    f256:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    f258:	1a18      	subs	r0, r3, r0
    f25a:	f002 fe33 	bl	11ec4 <sys_clock_announce>
}
    f25e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    f262:	f7fe bcfb 	b.w	dc5c <z_arm_exc_exit>
    f266:	bf00      	nop
    f268:	20000a18 	.word	0x20000a18
    f26c:	20000a0c 	.word	0x20000a0c
    f270:	20000a08 	.word	0x20000a08

0000f274 <sys_clock_set_timeout>:
{
    f274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f276:	4f3a      	ldr	r7, [pc, #232]	; (f360 <sys_clock_set_timeout+0xec>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    f278:	b159      	cbz	r1, f292 <sys_clock_set_timeout+0x1e>
    f27a:	1c42      	adds	r2, r0, #1
    f27c:	d109      	bne.n	f292 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    f27e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    f282:	6913      	ldr	r3, [r2, #16]
    f284:	f023 0301 	bic.w	r3, r3, #1
    f288:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
    f28a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    f28e:	603b      	str	r3, [r7, #0]
}
    f290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f292:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
    f294:	683e      	ldr	r6, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f296:	d056      	beq.n	f346 <sys_clock_set_timeout+0xd2>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    f298:	2801      	cmp	r0, #1
    f29a:	dd56      	ble.n	f34a <sys_clock_set_timeout+0xd6>
    f29c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    f2a0:	4298      	cmp	r0, r3
    f2a2:	da54      	bge.n	f34e <sys_clock_set_timeout+0xda>
    f2a4:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
    f2a6:	f04f 0320 	mov.w	r3, #32
    f2aa:	f3ef 8511 	mrs	r5, BASEPRI
    f2ae:	f383 8812 	msr	BASEPRI_MAX, r3
    f2b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f2b6:	482b      	ldr	r0, [pc, #172]	; (f364 <sys_clock_set_timeout+0xf0>)
    f2b8:	f001 faa6 	bl	10808 <z_spin_lock_valid>
    f2bc:	b940      	cbnz	r0, f2d0 <sys_clock_set_timeout+0x5c>
    f2be:	492a      	ldr	r1, [pc, #168]	; (f368 <sys_clock_set_timeout+0xf4>)
    f2c0:	482a      	ldr	r0, [pc, #168]	; (f36c <sys_clock_set_timeout+0xf8>)
    f2c2:	228e      	movs	r2, #142	; 0x8e
    f2c4:	f005 fcbe 	bl	14c44 <printk>
    f2c8:	218e      	movs	r1, #142	; 0x8e
    f2ca:	4827      	ldr	r0, [pc, #156]	; (f368 <sys_clock_set_timeout+0xf4>)
    f2cc:	f005 fd40 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
    f2d0:	4824      	ldr	r0, [pc, #144]	; (f364 <sys_clock_set_timeout+0xf0>)
    f2d2:	f001 fab5 	bl	10840 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    f2d6:	f7ff ff7b 	bl	f1d0 <elapsed>
	overflow_cyc = 0U;
    f2da:	f04f 0e00 	mov.w	lr, #0
	val1 = SysTick->VAL;
    f2de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	cycle_count += pending;
    f2e2:	f8df c08c 	ldr.w	ip, [pc, #140]	; f370 <sys_clock_set_timeout+0xfc>
	val1 = SysTick->VAL;
    f2e6:	698b      	ldr	r3, [r1, #24]
	cycle_count += pending;
    f2e8:	f8dc 2000 	ldr.w	r2, [ip]
    f2ec:	4402      	add	r2, r0
	overflow_cyc = 0U;
    f2ee:	4821      	ldr	r0, [pc, #132]	; (f374 <sys_clock_set_timeout+0x100>)
	cycle_count += pending;
    f2f0:	f8cc 2000 	str.w	r2, [ip]
	overflow_cyc = 0U;
    f2f4:	f8c0 e000 	str.w	lr, [r0]
	uint32_t unannounced = cycle_count - announced_cycles;
    f2f8:	481f      	ldr	r0, [pc, #124]	; (f378 <sys_clock_set_timeout+0x104>)
    f2fa:	6800      	ldr	r0, [r0, #0]
    f2fc:	1a10      	subs	r0, r2, r0
	if ((int32_t)unannounced < 0) {
    f2fe:	4570      	cmp	r0, lr
    f300:	da27      	bge.n	f352 <sys_clock_set_timeout+0xde>
		last_load = MIN_DELAY;
    f302:	f44f 6080 	mov.w	r0, #1024	; 0x400
    f306:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
    f308:	683c      	ldr	r4, [r7, #0]
	val2 = SysTick->VAL;
    f30a:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
    f30c:	3c01      	subs	r4, #1
    f30e:	614c      	str	r4, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    f310:	2400      	movs	r4, #0
	if (val1 < val2) {
    f312:	4283      	cmp	r3, r0
		cycle_count += (val1 + (last_load_ - val2));
    f314:	bf38      	it	cc
    f316:	199b      	addcc	r3, r3, r6
		cycle_count += (val1 - val2);
    f318:	1a1b      	subs	r3, r3, r0
	SysTick->VAL = 0; /* resets timer to last_load */
    f31a:	618c      	str	r4, [r1, #24]
		cycle_count += (val1 - val2);
    f31c:	4413      	add	r3, r2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f31e:	4811      	ldr	r0, [pc, #68]	; (f364 <sys_clock_set_timeout+0xf0>)
    f320:	f8cc 3000 	str.w	r3, [ip]
    f324:	f001 fa7e 	bl	10824 <z_spin_unlock_valid>
    f328:	b940      	cbnz	r0, f33c <sys_clock_set_timeout+0xc8>
    f32a:	490f      	ldr	r1, [pc, #60]	; (f368 <sys_clock_set_timeout+0xf4>)
    f32c:	480f      	ldr	r0, [pc, #60]	; (f36c <sys_clock_set_timeout+0xf8>)
    f32e:	22b9      	movs	r2, #185	; 0xb9
    f330:	f005 fc88 	bl	14c44 <printk>
    f334:	21b9      	movs	r1, #185	; 0xb9
    f336:	480c      	ldr	r0, [pc, #48]	; (f368 <sys_clock_set_timeout+0xf4>)
    f338:	f005 fd0a 	bl	14d50 <assert_post_action>
	__asm__ volatile(
    f33c:	f385 8811 	msr	BASEPRI, r5
    f340:	f3bf 8f6f 	isb	sy
    f344:	e7a4      	b.n	f290 <sys_clock_set_timeout+0x1c>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f346:	480d      	ldr	r0, [pc, #52]	; (f37c <sys_clock_set_timeout+0x108>)
    f348:	e7ac      	b.n	f2a4 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    f34a:	2400      	movs	r4, #0
    f34c:	e7ab      	b.n	f2a6 <sys_clock_set_timeout+0x32>
    f34e:	4c0b      	ldr	r4, [pc, #44]	; (f37c <sys_clock_set_timeout+0x108>)
    f350:	e7a9      	b.n	f2a6 <sys_clock_set_timeout+0x32>
			last_load = delay;
    f352:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    f356:	bfb8      	it	lt
    f358:	f44f 6480 	movlt.w	r4, #1024	; 0x400
    f35c:	603c      	str	r4, [r7, #0]
    f35e:	e7d3      	b.n	f308 <sys_clock_set_timeout+0x94>
    f360:	20000a10 	.word	0x20000a10
    f364:	20000a14 	.word	0x20000a14
    f368:	00015bbf 	.word	0x00015bbf
    f36c:	00015be5 	.word	0x00015be5
    f370:	20000a0c 	.word	0x20000a0c
    f374:	20000a18 	.word	0x20000a18
    f378:	20000a08 	.word	0x20000a08
    f37c:	00fffffe 	.word	0x00fffffe

0000f380 <sys_clock_elapsed>:
{
    f380:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f382:	f04f 0320 	mov.w	r3, #32
    f386:	f3ef 8511 	mrs	r5, BASEPRI
    f38a:	f383 8812 	msr	BASEPRI_MAX, r3
    f38e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f392:	4815      	ldr	r0, [pc, #84]	; (f3e8 <sys_clock_elapsed+0x68>)
    f394:	f001 fa38 	bl	10808 <z_spin_lock_valid>
    f398:	b940      	cbnz	r0, f3ac <sys_clock_elapsed+0x2c>
    f39a:	4914      	ldr	r1, [pc, #80]	; (f3ec <sys_clock_elapsed+0x6c>)
    f39c:	4814      	ldr	r0, [pc, #80]	; (f3f0 <sys_clock_elapsed+0x70>)
    f39e:	228e      	movs	r2, #142	; 0x8e
    f3a0:	f005 fc50 	bl	14c44 <printk>
    f3a4:	218e      	movs	r1, #142	; 0x8e
    f3a6:	4811      	ldr	r0, [pc, #68]	; (f3ec <sys_clock_elapsed+0x6c>)
    f3a8:	f005 fcd2 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
    f3ac:	480e      	ldr	r0, [pc, #56]	; (f3e8 <sys_clock_elapsed+0x68>)
    f3ae:	f001 fa47 	bl	10840 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    f3b2:	f7ff ff0d 	bl	f1d0 <elapsed>
    f3b6:	4b0f      	ldr	r3, [pc, #60]	; (f3f4 <sys_clock_elapsed+0x74>)
    f3b8:	681c      	ldr	r4, [r3, #0]
    f3ba:	4b0f      	ldr	r3, [pc, #60]	; (f3f8 <sys_clock_elapsed+0x78>)
    f3bc:	681b      	ldr	r3, [r3, #0]
    f3be:	1ae4      	subs	r4, r4, r3
    f3c0:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f3c2:	4809      	ldr	r0, [pc, #36]	; (f3e8 <sys_clock_elapsed+0x68>)
    f3c4:	f001 fa2e 	bl	10824 <z_spin_unlock_valid>
    f3c8:	b940      	cbnz	r0, f3dc <sys_clock_elapsed+0x5c>
    f3ca:	4908      	ldr	r1, [pc, #32]	; (f3ec <sys_clock_elapsed+0x6c>)
    f3cc:	4808      	ldr	r0, [pc, #32]	; (f3f0 <sys_clock_elapsed+0x70>)
    f3ce:	22b9      	movs	r2, #185	; 0xb9
    f3d0:	f005 fc38 	bl	14c44 <printk>
    f3d4:	21b9      	movs	r1, #185	; 0xb9
    f3d6:	4805      	ldr	r0, [pc, #20]	; (f3ec <sys_clock_elapsed+0x6c>)
    f3d8:	f005 fcba 	bl	14d50 <assert_post_action>
	__asm__ volatile(
    f3dc:	f385 8811 	msr	BASEPRI, r5
    f3e0:	f3bf 8f6f 	isb	sy
}
    f3e4:	4620      	mov	r0, r4
    f3e6:	bd38      	pop	{r3, r4, r5, pc}
    f3e8:	20000a14 	.word	0x20000a14
    f3ec:	00015bbf 	.word	0x00015bbf
    f3f0:	00015be5 	.word	0x00015be5
    f3f4:	20000a0c 	.word	0x20000a0c
    f3f8:	20000a08 	.word	0x20000a08

0000f3fc <sys_clock_idle_exit>:
	if (last_load == TIMER_STOPPED) {
    f3fc:	4b05      	ldr	r3, [pc, #20]	; (f414 <sys_clock_idle_exit+0x18>)
    f3fe:	681b      	ldr	r3, [r3, #0]
    f400:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
    f404:	bf01      	itttt	eq
    f406:	f04f 22e0 	moveq.w	r2, #3758153728	; 0xe000e000
    f40a:	6913      	ldreq	r3, [r2, #16]
    f40c:	f043 0301 	orreq.w	r3, r3, #1
    f410:	6113      	streq	r3, [r2, #16]
}
    f412:	4770      	bx	lr
    f414:	20000a10 	.word	0x20000a10

0000f418 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    f418:	4803      	ldr	r0, [pc, #12]	; (f428 <k_sys_fatal_error_handler+0x10>)
    f41a:	2145      	movs	r1, #69	; 0x45
{
    f41c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    f41e:	f005 fca5 	bl	14d6c <z_log_minimal_printk>
		sys_arch_reboot(0);
    f422:	2000      	movs	r0, #0
    f424:	f7fe ff04 	bl	e230 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    f428:	00016ac9 	.word	0x00016ac9

0000f42c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    f42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f430:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    f432:	4c21      	ldr	r4, [pc, #132]	; (f4b8 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    f434:	4e21      	ldr	r6, [pc, #132]	; (f4bc <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f436:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    f43a:	f8df 9084 	ldr.w	r9, [pc, #132]	; f4c0 <check_ext_api_requests+0x94>
{
    f43e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f440:	45a8      	cmp	r8, r5
    f442:	d803      	bhi.n	f44c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    f444:	2000      	movs	r0, #0
    f446:	b005      	add	sp, #20
    f448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    f44c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f44e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    f452:	681f      	ldr	r7, [r3, #0]
    f454:	ab01      	add	r3, sp, #4
    f456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    f45a:	220c      	movs	r2, #12
    f45c:	4619      	mov	r1, r3
    f45e:	4638      	mov	r0, r7
    f460:	f005 fd2f 	bl	14ec2 <memcmp>
    f464:	b990      	cbnz	r0, f48c <check_ext_api_requests+0x60>
    f466:	b18f      	cbz	r7, f48c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f468:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    f46a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f46c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    f46e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f470:	4291      	cmp	r1, r2
    f472:	d10b      	bne.n	f48c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    f474:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    f476:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    f478:	4291      	cmp	r1, r2
    f47a:	d807      	bhi.n	f48c <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    f47c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    f47e:	4291      	cmp	r1, r2
    f480:	d904      	bls.n	f48c <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    f482:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f484:	695b      	ldr	r3, [r3, #20]
    f486:	ea32 0303 	bics.w	r3, r2, r3
    f48a:	d00a      	beq.n	f4a2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    f48c:	6a27      	ldr	r7, [r4, #32]
    f48e:	b167      	cbz	r7, f4aa <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    f490:	480c      	ldr	r0, [pc, #48]	; (f4c4 <check_ext_api_requests+0x98>)
    f492:	f005 fbd7 	bl	14c44 <printk>
			k_panic();
    f496:	4040      	eors	r0, r0
    f498:	f380 8811 	msr	BASEPRI, r0
    f49c:	f04f 0004 	mov.w	r0, #4
    f4a0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    f4a2:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f4a4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    f4a6:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f4a8:	e7ca      	b.n	f440 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    f4aa:	4648      	mov	r0, r9
    f4ac:	f005 fbca 	bl	14c44 <printk>
			*ext_api_req->ext_api = NULL;
    f4b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f4b2:	601f      	str	r7, [r3, #0]
    f4b4:	e7f5      	b.n	f4a2 <check_ext_api_requests+0x76>
    f4b6:	bf00      	nop
    f4b8:	0000c43c 	.word	0x0000c43c
    f4bc:	0001577c 	.word	0x0001577c
    f4c0:	00016b14 	.word	0x00016b14
    f4c4:	00016aeb 	.word	0x00016aeb

0000f4c8 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    f4c8:	4a5b      	ldr	r2, [pc, #364]	; (f638 <SystemInit+0x170>)
{
    f4ca:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    f4cc:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    f4d0:	f043 0302 	orr.w	r3, r3, #2
    f4d4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f4d8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f4dc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f4e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    f4e4:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    f4e8:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    f4ea:	bf01      	itttt	eq
    f4ec:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    f4f0:	2200      	moveq	r2, #0
    f4f2:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    f4f6:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    f4fa:	f005 fec6 	bl	1528a <nrf91_errata_14>
    f4fe:	b128      	cbz	r0, f50c <SystemInit+0x44>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    f500:	2201      	movs	r2, #1
    f502:	4b4e      	ldr	r3, [pc, #312]	; (f63c <SystemInit+0x174>)
    f504:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    f508:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f50c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f510:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f514:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    f518:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    f51c:	2a09      	cmp	r2, #9
    f51e:	d105      	bne.n	f52c <SystemInit+0x64>
            {
                switch(var2)
    f520:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    f522:	bf1e      	ittt	ne
    f524:	2201      	movne	r2, #1
    f526:	4b45      	ldrne	r3, [pc, #276]	; (f63c <SystemInit+0x174>)
    f528:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    f52c:	f005 fead 	bl	1528a <nrf91_errata_14>
    f530:	b118      	cbz	r0, f53a <SystemInit+0x72>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    f532:	220e      	movs	r2, #14
    f534:	4b42      	ldr	r3, [pc, #264]	; (f640 <SystemInit+0x178>)
    f536:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f53a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    f53e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f542:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    f546:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    f54a:	2a09      	cmp	r2, #9
    f54c:	d106      	bne.n	f55c <SystemInit+0x94>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    f54e:	2200      	movs	r2, #0
    f550:	4b3a      	ldr	r3, [pc, #232]	; (f63c <SystemInit+0x174>)
    f552:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    f556:	2201      	movs	r2, #1
    f558:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    f55c:	2200      	movs	r2, #0
    f55e:	00d3      	lsls	r3, r2, #3
    f560:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    f564:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    f568:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f56c:	3101      	adds	r1, #1
    f56e:	d008      	beq.n	f582 <SystemInit+0xba>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f570:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f574:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f576:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f57a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f57e:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f580:	d1ed      	bne.n	f55e <SystemInit+0x96>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    f582:	4b30      	ldr	r3, [pc, #192]	; (f644 <SystemInit+0x17c>)
    f584:	69da      	ldr	r2, [r3, #28]
    f586:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    f58a:	07d1      	lsls	r1, r2, #31
    f58c:	d543      	bpl.n	f616 <SystemInit+0x14e>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f58e:	4b2e      	ldr	r3, [pc, #184]	; (f648 <SystemInit+0x180>)
    f590:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    f594:	2a01      	cmp	r2, #1
    f596:	d1fb      	bne.n	f590 <SystemInit+0xc8>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    f598:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f59c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    f5a0:	2a01      	cmp	r2, #1
    f5a2:	d1fb      	bne.n	f59c <SystemInit+0xd4>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    f5a4:	4b27      	ldr	r3, [pc, #156]	; (f644 <SystemInit+0x17c>)
    f5a6:	69da      	ldr	r2, [r3, #28]
    f5a8:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    f5ac:	07d2      	lsls	r2, r2, #31
    f5ae:	d50a      	bpl.n	f5c6 <SystemInit+0xfe>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    f5b0:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    f5b2:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    f5b6:	61da      	str	r2, [r3, #28]
    f5b8:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f5bc:	4a22      	ldr	r2, [pc, #136]	; (f648 <SystemInit+0x180>)
    f5be:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    f5c2:	2b01      	cmp	r3, #1
    f5c4:	d1fb      	bne.n	f5be <SystemInit+0xf6>
        uint32_t val = *word;
    f5c6:	4a1f      	ldr	r2, [pc, #124]	; (f644 <SystemInit+0x17c>)
    f5c8:	6a13      	ldr	r3, [r2, #32]
    f5ca:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    f5ce:	3301      	adds	r3, #1
    f5d0:	d10c      	bne.n	f5ec <SystemInit+0x124>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    f5d2:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    f5d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f5d8:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    f5dc:	6213      	str	r3, [r2, #32]
    f5de:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f5e2:	4a19      	ldr	r2, [pc, #100]	; (f648 <SystemInit+0x180>)
    f5e4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    f5e8:	2b01      	cmp	r3, #1
    f5ea:	d1fb      	bne.n	f5e4 <SystemInit+0x11c>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    f5ec:	2200      	movs	r2, #0
    f5ee:	4b16      	ldr	r3, [pc, #88]	; (f648 <SystemInit+0x180>)
    f5f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f5f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    f5f8:	2a01      	cmp	r2, #1
    f5fa:	d1fb      	bne.n	f5f4 <SystemInit+0x12c>
    f5fc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f600:	490d      	ldr	r1, [pc, #52]	; (f638 <SystemInit+0x170>)
    f602:	4b12      	ldr	r3, [pc, #72]	; (f64c <SystemInit+0x184>)
    f604:	68ca      	ldr	r2, [r1, #12]
    f606:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f60a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f60c:	60cb      	str	r3, [r1, #12]
    f60e:	f3bf 8f4f 	dsb	sy
    __NOP();
    f612:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f614:	e7fd      	b.n	f612 <SystemInit+0x14a>
        uint32_t val = *word;
    f616:	6a1b      	ldr	r3, [r3, #32]
    f618:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    f61c:	3301      	adds	r3, #1
    f61e:	d0b6      	beq.n	f58e <SystemInit+0xc6>
        SCB->NSACR |= (3UL << 10);
    f620:	4a05      	ldr	r2, [pc, #20]	; (f638 <SystemInit+0x170>)
    f622:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    f626:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    f62a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    f62e:	4b08      	ldr	r3, [pc, #32]	; (f650 <SystemInit+0x188>)
    f630:	4a08      	ldr	r2, [pc, #32]	; (f654 <SystemInit+0x18c>)
    f632:	601a      	str	r2, [r3, #0]
}
    f634:	bd08      	pop	{r3, pc}
    f636:	bf00      	nop
    f638:	e000ed00 	.word	0xe000ed00
    f63c:	50004000 	.word	0x50004000
    f640:	5003a000 	.word	0x5003a000
    f644:	00ff8000 	.word	0x00ff8000
    f648:	50039000 	.word	0x50039000
    f64c:	05fa0004 	.word	0x05fa0004
    f650:	2000008c 	.word	0x2000008c
    f654:	03d09000 	.word	0x03d09000

0000f658 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    f658:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    f65a:	4604      	mov	r4, r0
    f65c:	b940      	cbnz	r0, f670 <nrfx_clock_init+0x18>
    f65e:	4909      	ldr	r1, [pc, #36]	; (f684 <nrfx_clock_init+0x2c>)
    f660:	4809      	ldr	r0, [pc, #36]	; (f688 <nrfx_clock_init+0x30>)
    f662:	22bd      	movs	r2, #189	; 0xbd
    f664:	f005 faee 	bl	14c44 <printk>
    f668:	21bd      	movs	r1, #189	; 0xbd
    f66a:	4806      	ldr	r0, [pc, #24]	; (f684 <nrfx_clock_init+0x2c>)
    f66c:	f005 fb70 	bl	14d50 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    f670:	4b06      	ldr	r3, [pc, #24]	; (f68c <nrfx_clock_init+0x34>)
    f672:	791a      	ldrb	r2, [r3, #4]
    f674:	b922      	cbnz	r2, f680 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    f676:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    f678:	4805      	ldr	r0, [pc, #20]	; (f690 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    f67a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    f67c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f67e:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    f680:	4804      	ldr	r0, [pc, #16]	; (f694 <nrfx_clock_init+0x3c>)
    return err_code;
    f682:	e7fc      	b.n	f67e <nrfx_clock_init+0x26>
    f684:	00016b47 	.word	0x00016b47
    f688:	00015be5 	.word	0x00015be5
    f68c:	20000a1c 	.word	0x20000a1c
    f690:	0bad0000 	.word	0x0bad0000
    f694:	0bad000c 	.word	0x0bad000c

0000f698 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    f698:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f69a:	4b0b      	ldr	r3, [pc, #44]	; (f6c8 <nrfx_clock_enable+0x30>)
    f69c:	791b      	ldrb	r3, [r3, #4]
    f69e:	b943      	cbnz	r3, f6b2 <nrfx_clock_enable+0x1a>
    f6a0:	490a      	ldr	r1, [pc, #40]	; (f6cc <nrfx_clock_enable+0x34>)
    f6a2:	480b      	ldr	r0, [pc, #44]	; (f6d0 <nrfx_clock_enable+0x38>)
    f6a4:	22d6      	movs	r2, #214	; 0xd6
    f6a6:	f005 facd 	bl	14c44 <printk>
    f6aa:	21d6      	movs	r1, #214	; 0xd6
    f6ac:	4807      	ldr	r0, [pc, #28]	; (f6cc <nrfx_clock_enable+0x34>)
    f6ae:	f005 fb4f 	bl	14d50 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    f6b2:	2005      	movs	r0, #5
    f6b4:	f7fe f9d8 	bl	da68 <arch_irq_is_enabled>
    f6b8:	b920      	cbnz	r0, f6c4 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    f6ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    f6be:	2005      	movs	r0, #5
    f6c0:	f7fe b9ae 	b.w	da20 <arch_irq_enable>
    f6c4:	bd08      	pop	{r3, pc}
    f6c6:	bf00      	nop
    f6c8:	20000a1c 	.word	0x20000a1c
    f6cc:	00016b47 	.word	0x00016b47
    f6d0:	00015be5 	.word	0x00015be5

0000f6d4 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f6d4:	4b25      	ldr	r3, [pc, #148]	; (f76c <nrfx_clock_start+0x98>)
{
    f6d6:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f6d8:	791b      	ldrb	r3, [r3, #4]
{
    f6da:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f6dc:	b953      	cbnz	r3, f6f4 <nrfx_clock_start+0x20>
    f6de:	4924      	ldr	r1, [pc, #144]	; (f770 <nrfx_clock_start+0x9c>)
    f6e0:	4824      	ldr	r0, [pc, #144]	; (f774 <nrfx_clock_start+0xa0>)
    f6e2:	f44f 7289 	mov.w	r2, #274	; 0x112
    f6e6:	f005 faad 	bl	14c44 <printk>
    f6ea:	f44f 7189 	mov.w	r1, #274	; 0x112
    f6ee:	4820      	ldr	r0, [pc, #128]	; (f770 <nrfx_clock_start+0x9c>)
    f6f0:	f005 fb2e 	bl	14d50 <assert_post_action>
    switch (domain)
    f6f4:	b174      	cbz	r4, f714 <nrfx_clock_start+0x40>
    f6f6:	2c01      	cmp	r4, #1
    f6f8:	d02d      	beq.n	f756 <nrfx_clock_start+0x82>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    f6fa:	491d      	ldr	r1, [pc, #116]	; (f770 <nrfx_clock_start+0x9c>)
    f6fc:	481d      	ldr	r0, [pc, #116]	; (f774 <nrfx_clock_start+0xa0>)
    f6fe:	f44f 72a2 	mov.w	r2, #324	; 0x144
    f702:	f005 fa9f 	bl	14c44 <printk>
            break;
    }
}
    f706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    f70a:	f44f 71a2 	mov.w	r1, #324	; 0x144
    f70e:	4818      	ldr	r0, [pc, #96]	; (f770 <nrfx_clock_start+0x9c>)
    f710:	f005 bb1e 	b.w	14d50 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f714:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    f718:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f71c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    f720:	03c9      	lsls	r1, r1, #15
    f722:	d512      	bpl.n	f74a <nrfx_clock_start+0x76>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    f724:	f003 0303 	and.w	r3, r3, #3
    f728:	2b02      	cmp	r3, #2
    f72a:	d10e      	bne.n	f74a <nrfx_clock_start+0x76>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    f72c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f730:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f734:	2200      	movs	r2, #0
    f736:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    f73a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    f73e:	2202      	movs	r2, #2
    f740:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f744:	2201      	movs	r2, #1
    f746:	609a      	str	r2, [r3, #8]
}
    f748:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    f74a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f74e:	2201      	movs	r2, #1
    f750:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    f754:	e7ec      	b.n	f730 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f756:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f75a:	2200      	movs	r2, #0
    f75c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f760:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    f764:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f768:	601c      	str	r4, [r3, #0]
}
    f76a:	e7ed      	b.n	f748 <nrfx_clock_start+0x74>
    f76c:	20000a1c 	.word	0x20000a1c
    f770:	00016b47 	.word	0x00016b47
    f774:	00015be5 	.word	0x00015be5

0000f778 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    f778:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f77a:	4b28      	ldr	r3, [pc, #160]	; (f81c <nrfx_clock_stop+0xa4>)
{
    f77c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f77e:	791b      	ldrb	r3, [r3, #4]
    f780:	b953      	cbnz	r3, f798 <nrfx_clock_stop+0x20>
    f782:	4927      	ldr	r1, [pc, #156]	; (f820 <nrfx_clock_stop+0xa8>)
    f784:	4827      	ldr	r0, [pc, #156]	; (f824 <nrfx_clock_stop+0xac>)
    f786:	f240 124b 	movw	r2, #331	; 0x14b
    f78a:	f005 fa5b 	bl	14c44 <printk>
    f78e:	f240 114b 	movw	r1, #331	; 0x14b
    f792:	4823      	ldr	r0, [pc, #140]	; (f820 <nrfx_clock_stop+0xa8>)
    f794:	f005 fadc 	bl	14d50 <assert_post_action>
    switch (domain)
    f798:	b174      	cbz	r4, f7b8 <nrfx_clock_stop+0x40>
    f79a:	2c01      	cmp	r4, #1
    f79c:	d023      	beq.n	f7e6 <nrfx_clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    f79e:	4920      	ldr	r1, [pc, #128]	; (f820 <nrfx_clock_stop+0xa8>)
    f7a0:	4820      	ldr	r0, [pc, #128]	; (f824 <nrfx_clock_stop+0xac>)
    f7a2:	f240 1267 	movw	r2, #359	; 0x167
    f7a6:	f005 fa4d 	bl	14c44 <printk>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    f7aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            NRFX_ASSERT(0);
    f7ae:	f240 1167 	movw	r1, #359	; 0x167
    f7b2:	481b      	ldr	r0, [pc, #108]	; (f820 <nrfx_clock_stop+0xa8>)
    f7b4:	f005 bacc 	b.w	14d50 <assert_post_action>
    p_reg->INTENCLR = mask;
    f7b8:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    f7bc:	2302      	movs	r3, #2
    f7be:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f7c2:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    f7c6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f7ca:	2301      	movs	r3, #1
    f7cc:	f242 7410 	movw	r4, #10000	; 0x2710
    f7d0:	60eb      	str	r3, [r5, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f7d2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
    f7d6:	03db      	lsls	r3, r3, #15
    f7d8:	d51f      	bpl.n	f81a <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    f7da:	2001      	movs	r0, #1
    f7dc:	f005 fd66 	bl	152ac <nrfx_busy_wait>
    f7e0:	3c01      	subs	r4, #1
    f7e2:	d1f6      	bne.n	f7d2 <nrfx_clock_stop+0x5a>
    f7e4:	e019      	b.n	f81a <nrfx_clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    f7e6:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f7ea:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    f7ec:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f7f0:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    f7f4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f7f8:	606c      	str	r4, [r5, #4]
    f7fa:	f242 7410 	movw	r4, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f7fe:	f8d5 340c 	ldr.w	r3, [r5, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f802:	f8d5 240c 	ldr.w	r2, [r5, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f806:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f80a:	03d2      	lsls	r2, r2, #15
    f80c:	d505      	bpl.n	f81a <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    f80e:	b123      	cbz	r3, f81a <nrfx_clock_stop+0xa2>
    f810:	2001      	movs	r0, #1
    f812:	f005 fd4b 	bl	152ac <nrfx_busy_wait>
    f816:	3c01      	subs	r4, #1
    f818:	d1f1      	bne.n	f7fe <nrfx_clock_stop+0x86>
}
    f81a:	bd38      	pop	{r3, r4, r5, pc}
    f81c:	20000a1c 	.word	0x20000a1c
    f820:	00016b47 	.word	0x00016b47
    f824:	00015be5 	.word	0x00015be5

0000f828 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f828:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f82c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    f830:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    f832:	b152      	cbz	r2, f84a <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f834:	2000      	movs	r0, #0
    f836:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    f83a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    f83e:	2201      	movs	r2, #1
    f840:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f844:	4b11      	ldr	r3, [pc, #68]	; (f88c <nrfx_power_clock_irq_handler+0x64>)
    f846:	681b      	ldr	r3, [r3, #0]
    f848:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f84a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f84e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    f852:	b18a      	cbz	r2, f878 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f854:	2200      	movs	r2, #0
    f856:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    f85a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f85e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f862:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    f866:	f002 0203 	and.w	r2, r2, #3
    f86a:	2a01      	cmp	r2, #1
    f86c:	f04f 0102 	mov.w	r1, #2
    f870:	d103      	bne.n	f87a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f872:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f876:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    f878:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    f87a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f87e:	4b03      	ldr	r3, [pc, #12]	; (f88c <nrfx_power_clock_irq_handler+0x64>)
    f880:	2001      	movs	r0, #1
}
    f882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f886:	681b      	ldr	r3, [r3, #0]
    f888:	4718      	bx	r3
    f88a:	bf00      	nop
    f88c:	20000a1c 	.word	0x20000a1c

0000f890 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    f890:	6803      	ldr	r3, [r0, #0]
{
    f892:	b510      	push	{r4, lr}
    switch (port)
    f894:	095a      	lsrs	r2, r3, #5
    f896:	bf0c      	ite	eq
    f898:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    f89c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    f89e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    f8a2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    f8a6:	07db      	lsls	r3, r3, #31
{
    f8a8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    f8aa:	d40a      	bmi.n	f8c2 <nrf_gpio_pin_port_decode+0x32>
    f8ac:	490e      	ldr	r1, [pc, #56]	; (f8e8 <nrf_gpio_pin_port_decode+0x58>)
    f8ae:	480f      	ldr	r0, [pc, #60]	; (f8ec <nrf_gpio_pin_port_decode+0x5c>)
    f8b0:	f240 2229 	movw	r2, #553	; 0x229
    f8b4:	f005 f9c6 	bl	14c44 <printk>
    f8b8:	f240 2129 	movw	r1, #553	; 0x229
    f8bc:	480a      	ldr	r0, [pc, #40]	; (f8e8 <nrf_gpio_pin_port_decode+0x58>)
    f8be:	f005 fa47 	bl	14d50 <assert_post_action>
    uint32_t pin_number = *p_pin;
    f8c2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    f8c4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    f8c8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    f8ca:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    f8cc:	d00a      	beq.n	f8e4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    f8ce:	4906      	ldr	r1, [pc, #24]	; (f8e8 <nrf_gpio_pin_port_decode+0x58>)
    f8d0:	4806      	ldr	r0, [pc, #24]	; (f8ec <nrf_gpio_pin_port_decode+0x5c>)
    f8d2:	f240 222e 	movw	r2, #558	; 0x22e
    f8d6:	f005 f9b5 	bl	14c44 <printk>
    f8da:	f240 212e 	movw	r1, #558	; 0x22e
    f8de:	4802      	ldr	r0, [pc, #8]	; (f8e8 <nrf_gpio_pin_port_decode+0x58>)
    f8e0:	f005 fa36 	bl	14d50 <assert_post_action>
}
    f8e4:	4802      	ldr	r0, [pc, #8]	; (f8f0 <nrf_gpio_pin_port_decode+0x60>)
    f8e6:	bd10      	pop	{r4, pc}
    f8e8:	00016a3d 	.word	0x00016a3d
    f8ec:	00015be5 	.word	0x00015be5
    f8f0:	50842500 	.word	0x50842500

0000f8f4 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    f8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8f8:	4606      	mov	r6, r0
    f8fa:	4690      	mov	r8, r2
    f8fc:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
    f8fe:	460c      	mov	r4, r1
    f900:	b951      	cbnz	r1, f918 <nrfx_twim_init+0x24>
    f902:	492f      	ldr	r1, [pc, #188]	; (f9c0 <nrfx_twim_init+0xcc>)
    f904:	482f      	ldr	r0, [pc, #188]	; (f9c4 <nrfx_twim_init+0xd0>)
    f906:	f240 1215 	movw	r2, #277	; 0x115
    f90a:	f005 f99b 	bl	14c44 <printk>
    f90e:	f240 1115 	movw	r1, #277	; 0x115
    f912:	482b      	ldr	r0, [pc, #172]	; (f9c0 <nrfx_twim_init+0xcc>)
    f914:	f005 fa1c 	bl	14d50 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f918:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    f91a:	f896 a004 	ldrb.w	sl, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f91e:	4d2a      	ldr	r5, [pc, #168]	; (f9c8 <nrfx_twim_init+0xd4>)
    f920:	fb07 f70a 	mul.w	r7, r7, sl
    f924:	19e9      	adds	r1, r5, r7
    f926:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    f92a:	2800      	cmp	r0, #0
    f92c:	d145      	bne.n	f9ba <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    f92e:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    f930:	f8d6 b000 	ldr.w	fp, [r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    f934:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    f938:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
    f93a:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
    f93c:	f845 8007 	str.w	r8, [r5, r7]
    p_cb->p_context       = p_context;
    f940:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
    f944:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
    f948:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    f94c:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    f950:	b1f3      	cbz	r3, f990 <nrfx_twim_init+0x9c>
    f952:	7be3      	ldrb	r3, [r4, #15]
    f954:	b92b      	cbnz	r3, f962 <nrfx_twim_init+0x6e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    f956:	e9d4 2300 	ldrd	r2, r3, [r4]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    f95a:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    f95e:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    f962:	68a3      	ldr	r3, [r4, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    f964:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524

    if (p_cb->handler)
    f968:	2334      	movs	r3, #52	; 0x34
    f96a:	fb03 f30a 	mul.w	r3, r3, sl
    f96e:	58eb      	ldr	r3, [r5, r3]
    f970:	b123      	cbz	r3, f97c <nrfx_twim_init+0x88>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    f972:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    f974:	f340 3007 	sbfx	r0, r0, #12, #8
    f978:	f7fe f852 	bl	da20 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f97c:	2334      	movs	r3, #52	; 0x34
    f97e:	fb03 550a 	mla	r5, r3, sl, r5
    f982:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    f984:	4811      	ldr	r0, [pc, #68]	; (f9cc <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f986:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    f98a:	b003      	add	sp, #12
    f98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    f990:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f992:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
    f994:	f240 670c 	movw	r7, #1548	; 0x60c
    f998:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f99a:	f7ff ff79 	bl	f890 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    f99e:	9b01      	ldr	r3, [sp, #4]
    f9a0:	3380      	adds	r3, #128	; 0x80
    f9a2:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    f9a6:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f9a8:	a801      	add	r0, sp, #4
    f9aa:	9301      	str	r3, [sp, #4]
    f9ac:	f7ff ff70 	bl	f890 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    f9b0:	9b01      	ldr	r3, [sp, #4]
    f9b2:	3380      	adds	r3, #128	; 0x80
    f9b4:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    f9b8:	e7cb      	b.n	f952 <nrfx_twim_init+0x5e>
        return err_code;
    f9ba:	4805      	ldr	r0, [pc, #20]	; (f9d0 <nrfx_twim_init+0xdc>)
    f9bc:	e7e5      	b.n	f98a <nrfx_twim_init+0x96>
    f9be:	bf00      	nop
    f9c0:	00016b84 	.word	0x00016b84
    f9c4:	00015be5 	.word	0x00015be5
    f9c8:	20000a24 	.word	0x20000a24
    f9cc:	0bad0000 	.word	0x0bad0000
    f9d0:	0bad0005 	.word	0x0bad0005

0000f9d4 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f9d4:	2334      	movs	r3, #52	; 0x34
{
    f9d6:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f9d8:	4c0f      	ldr	r4, [pc, #60]	; (fa18 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f9da:	7906      	ldrb	r6, [r0, #4]
{
    f9dc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f9de:	fb03 4306 	mla	r3, r3, r6, r4
    f9e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    f9e6:	2b01      	cmp	r3, #1
    f9e8:	d00a      	beq.n	fa00 <nrfx_twim_enable+0x2c>
    f9ea:	490c      	ldr	r1, [pc, #48]	; (fa1c <nrfx_twim_enable+0x48>)
    f9ec:	480c      	ldr	r0, [pc, #48]	; (fa20 <nrfx_twim_enable+0x4c>)
    f9ee:	f240 1279 	movw	r2, #377	; 0x179
    f9f2:	f005 f927 	bl	14c44 <printk>
    f9f6:	f240 1179 	movw	r1, #377	; 0x179
    f9fa:	4808      	ldr	r0, [pc, #32]	; (fa1c <nrfx_twim_enable+0x48>)
    f9fc:	f005 f9a8 	bl	14d50 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    fa00:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
    fa02:	682b      	ldr	r3, [r5, #0]
    fa04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    fa08:	2334      	movs	r3, #52	; 0x34
    fa0a:	fb03 4406 	mla	r4, r3, r6, r4
    fa0e:	2302      	movs	r3, #2
    fa10:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    fa14:	bd70      	pop	{r4, r5, r6, pc}
    fa16:	bf00      	nop
    fa18:	20000a24 	.word	0x20000a24
    fa1c:	00016b84 	.word	0x00016b84
    fa20:	00015be5 	.word	0x00015be5

0000fa24 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    fa24:	2234      	movs	r2, #52	; 0x34
{
    fa26:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    fa28:	4c14      	ldr	r4, [pc, #80]	; (fa7c <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fa2a:	7906      	ldrb	r6, [r0, #4]
{
    fa2c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    fa2e:	fb02 4206 	mla	r2, r2, r6, r4
    fa32:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
    fa36:	b953      	cbnz	r3, fa4e <nrfx_twim_disable+0x2a>
    fa38:	4911      	ldr	r1, [pc, #68]	; (fa80 <nrfx_twim_disable+0x5c>)
    fa3a:	4812      	ldr	r0, [pc, #72]	; (fa84 <nrfx_twim_disable+0x60>)
    fa3c:	f44f 72c2 	mov.w	r2, #388	; 0x184
    fa40:	f005 f900 	bl	14c44 <printk>
    fa44:	f44f 71c2 	mov.w	r1, #388	; 0x184
    fa48:	480d      	ldr	r0, [pc, #52]	; (fa80 <nrfx_twim_disable+0x5c>)
    fa4a:	f005 f981 	bl	14d50 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    fa4e:	2334      	movs	r3, #52	; 0x34
    fa50:	2100      	movs	r1, #0
    fa52:	fb03 4306 	mla	r3, r3, r6, r4
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    fa56:	682a      	ldr	r2, [r5, #0]
    p_reg->INTENCLR = mask;
    fa58:	480b      	ldr	r0, [pc, #44]	; (fa88 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
    fa5a:	6099      	str	r1, [r3, #8]
    fa5c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    fa60:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    fa64:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    fa68:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    fa6c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    fa70:	2201      	movs	r2, #1
    p_cb->busy = false;
    fa72:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    fa76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    fa7a:	bd70      	pop	{r4, r5, r6, pc}
    fa7c:	20000a24 	.word	0x20000a24
    fa80:	00016b84 	.word	0x00016b84
    fa84:	00015be5 	.word	0x00015be5
    fa88:	019c0202 	.word	0x019c0202

0000fa8c <nrfx_twim_uninit>:
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    fa8c:	2334      	movs	r3, #52	; 0x34
{
    fa8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    fa90:	4d23      	ldr	r5, [pc, #140]	; (fb20 <nrfx_twim_uninit+0x94>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fa92:	7906      	ldrb	r6, [r0, #4]
{
    fa94:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    fa96:	fb03 5306 	mla	r3, r3, r6, r5
    fa9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    fa9e:	b953      	cbnz	r3, fab6 <nrfx_twim_uninit+0x2a>
    faa0:	4920      	ldr	r1, [pc, #128]	; (fb24 <nrfx_twim_uninit+0x98>)
    faa2:	4821      	ldr	r0, [pc, #132]	; (fb28 <nrfx_twim_uninit+0x9c>)
    faa4:	f44f 72b0 	mov.w	r2, #352	; 0x160
    faa8:	f005 f8cc 	bl	14c44 <printk>
    faac:	f44f 71b0 	mov.w	r1, #352	; 0x160
    fab0:	481c      	ldr	r0, [pc, #112]	; (fb24 <nrfx_twim_uninit+0x98>)
    fab2:	f005 f94d 	bl	14d50 <assert_post_action>
    if (p_cb->handler)
    fab6:	2334      	movs	r3, #52	; 0x34
    fab8:	4373      	muls	r3, r6
    faba:	58eb      	ldr	r3, [r5, r3]
    fabc:	b123      	cbz	r3, fac8 <nrfx_twim_uninit+0x3c>
    fabe:	6820      	ldr	r0, [r4, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
    fac0:	f340 3007 	sbfx	r0, r0, #12, #8
    fac4:	f7fd ffbc 	bl	da40 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
    fac8:	4620      	mov	r0, r4
    faca:	f7ff ffab 	bl	fa24 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
    face:	2334      	movs	r3, #52	; 0x34
    fad0:	fb03 5306 	mla	r3, r3, r6, r5
    fad4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    fad8:	b9ca      	cbnz	r2, fb0e <nrfx_twim_uninit+0x82>
    fada:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    fade:	b9b3      	cbnz	r3, fb0e <nrfx_twim_uninit+0x82>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
    fae0:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    fae2:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SCL;
    fae4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    fae8:	2702      	movs	r7, #2
    faea:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    faec:	f7ff fed0 	bl	f890 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    faf0:	9b01      	ldr	r3, [sp, #4]
    faf2:	3380      	adds	r3, #128	; 0x80
    faf4:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
    faf8:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    fafa:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SDA;
    fafc:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
    nrf_gpio_cfg(
    fb00:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    fb02:	f7ff fec5 	bl	f890 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    fb06:	9b01      	ldr	r3, [sp, #4]
    fb08:	3380      	adds	r3, #128	; 0x80
    fb0a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    fb0e:	2334      	movs	r3, #52	; 0x34
    fb10:	fb03 5506 	mla	r5, r3, r6, r5
    fb14:	2300      	movs	r3, #0
    fb16:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    fb1a:	b003      	add	sp, #12
    fb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb1e:	bf00      	nop
    fb20:	20000a24 	.word	0x20000a24
    fb24:	00016b84 	.word	0x00016b84
    fb28:	00015be5 	.word	0x00015be5

0000fb2c <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    fb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    fb30:	7903      	ldrb	r3, [r0, #4]
{
    fb32:	4604      	mov	r4, r0
    fb34:	460d      	mov	r5, r1
    fb36:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    fb38:	b93b      	cbnz	r3, fb4a <nrfx_twim_xfer+0x1e>
    fb3a:	684b      	ldr	r3, [r1, #4]
    fb3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    fb40:	d203      	bcs.n	fb4a <nrfx_twim_xfer+0x1e>
    fb42:	688b      	ldr	r3, [r1, #8]
    fb44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    fb48:	d30a      	bcc.n	fb60 <nrfx_twim_xfer+0x34>
    fb4a:	49ba      	ldr	r1, [pc, #744]	; (fe34 <nrfx_twim_xfer+0x308>)
    fb4c:	48ba      	ldr	r0, [pc, #744]	; (fe38 <nrfx_twim_xfer+0x30c>)
    fb4e:	f240 2299 	movw	r2, #665	; 0x299
    fb52:	f005 f877 	bl	14c44 <printk>
    fb56:	f240 2199 	movw	r1, #665	; 0x299
    fb5a:	48b6      	ldr	r0, [pc, #728]	; (fe34 <nrfx_twim_xfer+0x308>)
    fb5c:	f005 f8f8 	bl	14d50 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    fb60:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fb62:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    fb66:	f8df 82d4 	ldr.w	r8, [pc, #724]	; fe3c <nrfx_twim_xfer+0x310>
    fb6a:	fb07 f709 	mul.w	r7, r7, r9
    fb6e:	f858 3007 	ldr.w	r3, [r8, r7]
    fb72:	bb03      	cbnz	r3, fbb6 <nrfx_twim_xfer+0x8a>
    fb74:	782b      	ldrb	r3, [r5, #0]
    fb76:	2b02      	cmp	r3, #2
    fb78:	d00e      	beq.n	fb98 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    fb7a:	782b      	ldrb	r3, [r5, #0]
    fb7c:	2b03      	cmp	r3, #3
    fb7e:	d11a      	bne.n	fbb6 <nrfx_twim_xfer+0x8a>
    fb80:	f240 22a2 	movw	r2, #674	; 0x2a2
    fb84:	49ab      	ldr	r1, [pc, #684]	; (fe34 <nrfx_twim_xfer+0x308>)
    fb86:	48ac      	ldr	r0, [pc, #688]	; (fe38 <nrfx_twim_xfer+0x30c>)
    fb88:	f005 f85c 	bl	14c44 <printk>
    fb8c:	f240 21a2 	movw	r1, #674	; 0x2a2
    fb90:	48a8      	ldr	r0, [pc, #672]	; (fe34 <nrfx_twim_xfer+0x308>)
    fb92:	f005 f8dd 	bl	14d50 <assert_post_action>
    fb96:	e00e      	b.n	fbb6 <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    fb98:	f240 22a1 	movw	r2, #673	; 0x2a1
    fb9c:	49a5      	ldr	r1, [pc, #660]	; (fe34 <nrfx_twim_xfer+0x308>)
    fb9e:	48a6      	ldr	r0, [pc, #664]	; (fe38 <nrfx_twim_xfer+0x30c>)
    fba0:	f005 f850 	bl	14c44 <printk>
    fba4:	f240 21a1 	movw	r1, #673	; 0x2a1
    fba8:	48a2      	ldr	r0, [pc, #648]	; (fe34 <nrfx_twim_xfer+0x308>)
    fbaa:	f005 f8d1 	bl	14d50 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    fbae:	f858 3007 	ldr.w	r3, [r8, r7]
    fbb2:	2b00      	cmp	r3, #0
    fbb4:	d0e1      	beq.n	fb7a <nrfx_twim_xfer+0x4e>
    p_cb->error = false;
    fbb6:	2334      	movs	r3, #52	; 0x34
    fbb8:	2200      	movs	r2, #0
    fbba:	fb03 8309 	mla	r3, r3, r9, r8
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    fbbe:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
    fbc0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    fbc4:	686b      	ldr	r3, [r5, #4]
    fbc6:	b14b      	cbz	r3, fbdc <nrfx_twim_xfer+0xb0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    fbc8:	68eb      	ldr	r3, [r5, #12]
    fbca:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    fbce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fbd2:	d003      	beq.n	fbdc <nrfx_twim_xfer+0xb0>
        return err_code;
    fbd4:	4f9a      	ldr	r7, [pc, #616]	; (fe40 <nrfx_twim_xfer+0x314>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    fbd6:	4638      	mov	r0, r7
    fbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    fbdc:	2734      	movs	r7, #52	; 0x34
    fbde:	fb07 8709 	mla	r7, r7, r9, r8
    p_reg->INTENCLR = mask;
    fbe2:	4b98      	ldr	r3, [pc, #608]	; (fe44 <nrfx_twim_xfer+0x318>)
    fbe4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    fbe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    fbec:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    fbf0:	b123      	cbz	r3, fbfc <nrfx_twim_xfer+0xd0>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    fbf2:	68bb      	ldr	r3, [r7, #8]
        return err_code;
    fbf4:	4f94      	ldr	r7, [pc, #592]	; (fe48 <nrfx_twim_xfer+0x31c>)
    p_reg->INTENSET = mask;
    fbf6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    fbfa:	e7ec      	b.n	fbd6 <nrfx_twim_xfer+0xaa>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    fbfc:	f016 0f14 	tst.w	r6, #20
    fc00:	bf0c      	ite	eq
    fc02:	2301      	moveq	r3, #1
    fc04:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    fc06:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    fc08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    fc0c:	f107 0c0c 	add.w	ip, r7, #12
    fc10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fc14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fc18:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
    fc1c:	623e      	str	r6, [r7, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    fc1e:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    fc22:	f3c6 1300 	ubfx	r3, r6, #4, #1
    fc26:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    fc2a:	786b      	ldrb	r3, [r5, #1]
    fc2c:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc30:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    fc34:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    fc38:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    fc3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fc40:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    fc44:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    fc48:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    fc4c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    fc50:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    fc54:	bf18      	it	ne
    fc56:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    fc58:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    fc5c:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    fc60:	bf18      	it	ne
    fc62:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    fc64:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    fc68:	782b      	ldrb	r3, [r5, #0]
    fc6a:	2b03      	cmp	r3, #3
    fc6c:	f200 80df 	bhi.w	fe2e <nrfx_twim_xfer+0x302>
    fc70:	e8df f003 	tbb	[pc, r3]
    fc74:	0293caae 	.word	0x0293caae
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    fc78:	06f3      	lsls	r3, r6, #27
    fc7a:	d50a      	bpl.n	fc92 <nrfx_twim_xfer+0x166>
    fc7c:	496d      	ldr	r1, [pc, #436]	; (fe34 <nrfx_twim_xfer+0x308>)
    fc7e:	486e      	ldr	r0, [pc, #440]	; (fe38 <nrfx_twim_xfer+0x30c>)
    fc80:	f240 12dd 	movw	r2, #477	; 0x1dd
    fc84:	f004 ffde 	bl	14c44 <printk>
    fc88:	f240 11dd 	movw	r1, #477	; 0x1dd
    fc8c:	4869      	ldr	r0, [pc, #420]	; (fe34 <nrfx_twim_xfer+0x308>)
    fc8e:	f005 f85f 	bl	14d50 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    fc92:	0737      	lsls	r7, r6, #28
    fc94:	d50a      	bpl.n	fcac <nrfx_twim_xfer+0x180>
    fc96:	4967      	ldr	r1, [pc, #412]	; (fe34 <nrfx_twim_xfer+0x308>)
    fc98:	4867      	ldr	r0, [pc, #412]	; (fe38 <nrfx_twim_xfer+0x30c>)
    fc9a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
    fc9e:	f004 ffd1 	bl	14c44 <printk>
    fca2:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    fca6:	4863      	ldr	r0, [pc, #396]	; (fe34 <nrfx_twim_xfer+0x308>)
    fca8:	f005 f852 	bl	14d50 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    fcac:	0770      	lsls	r0, r6, #29
    fcae:	d50a      	bpl.n	fcc6 <nrfx_twim_xfer+0x19a>
    fcb0:	4960      	ldr	r1, [pc, #384]	; (fe34 <nrfx_twim_xfer+0x308>)
    fcb2:	4861      	ldr	r0, [pc, #388]	; (fe38 <nrfx_twim_xfer+0x30c>)
    fcb4:	f240 12df 	movw	r2, #479	; 0x1df
    fcb8:	f004 ffc4 	bl	14c44 <printk>
    fcbc:	f240 11df 	movw	r1, #479	; 0x1df
    fcc0:	485c      	ldr	r0, [pc, #368]	; (fe34 <nrfx_twim_xfer+0x308>)
    fcc2:	f005 f845 	bl	14d50 <assert_post_action>
    fcc6:	692b      	ldr	r3, [r5, #16]
    fcc8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    fccc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    fcd0:	d180      	bne.n	fbd4 <nrfx_twim_xfer+0xa8>
    p_reg->SHORTS = mask;
    fcd2:	f44f 7280 	mov.w	r2, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fcd6:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
    fcd8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fcdc:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fcde:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fce2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fce6:	2200      	movs	r2, #0
    fce8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
    fcec:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fcf0:	2101      	movs	r1, #1
    fcf2:	6221      	str	r1, [r4, #32]
    fcf4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fcf6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    fcfa:	2900      	cmp	r1, #0
    fcfc:	d0fb      	beq.n	fcf6 <nrfx_twim_xfer+0x1ca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fcfe:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
    fd02:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    fd06:	68aa      	ldr	r2, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fd08:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    fd0c:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
    fd0e:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    fd12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    fd16:	fb03 8309 	mla	r3, r3, r9, r8
    fd1a:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    fd1c:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    fd1e:	4f4b      	ldr	r7, [pc, #300]	; (fe4c <nrfx_twim_xfer+0x320>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    fd20:	0731      	lsls	r1, r6, #28
    fd22:	d407      	bmi.n	fd34 <nrfx_twim_xfer+0x208>
    fd24:	782a      	ldrb	r2, [r5, #0]
    fd26:	2a03      	cmp	r2, #3
    fd28:	d004      	beq.n	fd34 <nrfx_twim_xfer+0x208>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd2a:	2201      	movs	r2, #1
    fd2c:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    fd2e:	686b      	ldr	r3, [r5, #4]
    fd30:	b903      	cbnz	r3, fd34 <nrfx_twim_xfer+0x208>
    fd32:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    fd34:	2334      	movs	r3, #52	; 0x34
    fd36:	fb03 f309 	mul.w	r3, r3, r9
    fd3a:	f858 2003 	ldr.w	r2, [r8, r3]
    fd3e:	eb08 0103 	add.w	r1, r8, r3
    fd42:	2a00      	cmp	r2, #0
    fd44:	f040 8086 	bne.w	fe54 <nrfx_twim_xfer+0x328>
                transmission_finished = true;
    fd48:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd4a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    fd4e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    fd52:	2800      	cmp	r0, #0
    fd54:	f040 8099 	bne.w	fe8a <nrfx_twim_xfer+0x35e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    fd58:	3b00      	subs	r3, #0
    fd5a:	bf18      	it	ne
    fd5c:	2301      	movne	r3, #1
    fd5e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    fd62:	2800      	cmp	r0, #0
    fd64:	f000 8097 	beq.w	fe96 <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd68:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    fd6c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd70:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    fd74:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    fd78:	b115      	cbz	r5, fd80 <nrfx_twim_xfer+0x254>
    fd7a:	f410 7f00 	tst.w	r0, #512	; 0x200
    fd7e:	d104      	bne.n	fd8a <nrfx_twim_xfer+0x25e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd80:	6221      	str	r1, [r4, #32]
    fd82:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    fd84:	2d00      	cmp	r5, #0
    fd86:	d0e0      	beq.n	fd4a <nrfx_twim_xfer+0x21e>
                    transmission_finished = false;
    fd88:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    fd8a:	05c0      	lsls	r0, r0, #23
    fd8c:	f140 8083 	bpl.w	fe96 <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd90:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    fd94:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    fd98:	e7d7      	b.n	fd4a <nrfx_twim_xfer+0x21e>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fd9a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fd9c:	68ea      	ldr	r2, [r5, #12]
    fd9e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fda2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    fda6:	692b      	ldr	r3, [r5, #16]
    fda8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    fdac:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    fdb0:	f47f af10 	bne.w	fbd4 <nrfx_twim_xfer+0xa8>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    fdb4:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fdb6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    fdba:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    fdbe:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    fdc2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fdc6:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fdc8:	2202      	movs	r2, #2
    fdca:	fb03 8309 	mla	r3, r3, r9, r8
    fdce:	e012      	b.n	fdf6 <nrfx_twim_xfer+0x2ca>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fdd0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fdd2:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    fdd4:	f016 0f20 	tst.w	r6, #32
    fdd8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fddc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    fde0:	f04f 0334 	mov.w	r3, #52	; 0x34
    fde4:	d00b      	beq.n	fdfe <nrfx_twim_xfer+0x2d2>
    p_reg->SHORTS = mask;
    fde6:	f44f 7280 	mov.w	r2, #256	; 0x100
    fdea:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    fdee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    fdf2:	fb03 8309 	mla	r3, r3, r9, r8
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fdf6:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fdf8:	2301      	movs	r3, #1
    fdfa:	6223      	str	r3, [r4, #32]
    fdfc:	e78e      	b.n	fd1c <nrfx_twim_xfer+0x1f0>
    p_reg->SHORTS = mask;
    fdfe:	f44f 7200 	mov.w	r2, #512	; 0x200
    fe02:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    fe06:	e7df      	b.n	fdc8 <nrfx_twim_xfer+0x29c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fe08:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fe0a:	68ea      	ldr	r2, [r5, #12]
    fe0c:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fe10:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    fe14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    fe18:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fe1c:	2334      	movs	r3, #52	; 0x34
    fe1e:	2202      	movs	r2, #2
    fe20:	fb03 8309 	mla	r3, r3, r9, r8
    fe24:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fe26:	2301      	movs	r3, #1
    fe28:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    fe2a:	2300      	movs	r3, #0
    fe2c:	e777      	b.n	fd1e <nrfx_twim_xfer+0x1f2>
    switch (p_xfer_desc->type)
    fe2e:	2308      	movs	r3, #8
    fe30:	4f07      	ldr	r7, [pc, #28]	; (fe50 <nrfx_twim_xfer+0x324>)
    fe32:	e775      	b.n	fd20 <nrfx_twim_xfer+0x1f4>
    fe34:	00016b84 	.word	0x00016b84
    fe38:	00015be5 	.word	0x00015be5
    fe3c:	20000a24 	.word	0x20000a24
    fe40:	0bad000a 	.word	0x0bad000a
    fe44:	019c0202 	.word	0x019c0202
    fe48:	0bad000b 	.word	0x0bad000b
    fe4c:	0bad0000 	.word	0x0bad0000
    fe50:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    fe54:	0772      	lsls	r2, r6, #29
            p_cb->int_mask = 0;
    fe56:	bf44      	itt	mi
    fe58:	2300      	movmi	r3, #0
    fe5a:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    fe5c:	0673      	lsls	r3, r6, #25
    fe5e:	d406      	bmi.n	fe6e <nrfx_twim_xfer+0x342>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    fe60:	2334      	movs	r3, #52	; 0x34
    fe62:	fb03 8309 	mla	r3, r3, r9, r8
    fe66:	689a      	ldr	r2, [r3, #8]
    fe68:	f042 0202 	orr.w	r2, r2, #2
    fe6c:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    fe6e:	2334      	movs	r3, #52	; 0x34
    fe70:	fb03 8809 	mla	r8, r3, r9, r8
    fe74:	f8d8 3008 	ldr.w	r3, [r8, #8]
    fe78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fe7c:	f8c8 3008 	str.w	r3, [r8, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    fe80:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->INTENSET = mask;
    fe84:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    fe88:	e6a5      	b.n	fbd6 <nrfx_twim_xfer+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fe8a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    fe8e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    fe92:	2301      	movs	r3, #1
    fe94:	e763      	b.n	fd5e <nrfx_twim_xfer+0x232>
        } while (!transmission_finished);
    fe96:	2b00      	cmp	r3, #0
    fe98:	f43f af57 	beq.w	fd4a <nrfx_twim_xfer+0x21e>
        p_cb->busy = false;
    fe9c:	2134      	movs	r1, #52	; 0x34
    fe9e:	2000      	movs	r0, #0
    fea0:	fb01 8209 	mla	r2, r1, r9, r8
    uint32_t error_source = p_reg->ERRORSRC;
    fea4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    fea8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    feac:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    feb0:	b18b      	cbz	r3, fed6 <nrfx_twim_xfer+0x3aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    feb2:	4a0f      	ldr	r2, [pc, #60]	; (fef0 <nrfx_twim_xfer+0x3c4>)
    feb4:	f013 0f01 	tst.w	r3, #1
    feb8:	4f0e      	ldr	r7, [pc, #56]	; (fef4 <nrfx_twim_xfer+0x3c8>)
    feba:	bf18      	it	ne
    febc:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    febe:	f013 0f02 	tst.w	r3, #2
    fec2:	f102 0201 	add.w	r2, r2, #1
    fec6:	bf18      	it	ne
    fec8:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    feca:	f013 0f04 	tst.w	r3, #4
    fece:	4b0a      	ldr	r3, [pc, #40]	; (fef8 <nrfx_twim_xfer+0x3cc>)
    fed0:	bf18      	it	ne
    fed2:	461f      	movne	r7, r3
    fed4:	e67f      	b.n	fbd6 <nrfx_twim_xfer+0xaa>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    fed6:	0673      	lsls	r3, r6, #25
    fed8:	f53f ae7d 	bmi.w	fbd6 <nrfx_twim_xfer+0xaa>
                !xfer_completeness_check(p_twim, p_cb))
    fedc:	4620      	mov	r0, r4
    fede:	fb09 8101 	mla	r1, r9, r1, r8
    fee2:	f005 f9e5 	bl	152b0 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    fee6:	4b03      	ldr	r3, [pc, #12]	; (fef4 <nrfx_twim_xfer+0x3c8>)
    fee8:	2800      	cmp	r0, #0
    feea:	bf08      	it	eq
    feec:	461f      	moveq	r7, r3
    feee:	e672      	b.n	fbd6 <nrfx_twim_xfer+0xaa>
    fef0:	0bae0000 	.word	0x0bae0000
    fef4:	0bad0001 	.word	0x0bad0001
    fef8:	0bae0002 	.word	0x0bae0002

0000fefc <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
    fefc:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
    fefe:	4c61      	ldr	r4, [pc, #388]	; (10084 <CONFIG_PM_PARTITION_SIZE_SPM+0x84>)
{
    ff00:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
    ff02:	6823      	ldr	r3, [r4, #0]
    ff04:	b953      	cbnz	r3, ff1c <nrfx_twim_2_irq_handler+0x20>
    ff06:	4960      	ldr	r1, [pc, #384]	; (10088 <CONFIG_PM_PARTITION_SIZE_SPM+0x88>)
    ff08:	4860      	ldr	r0, [pc, #384]	; (1008c <CONFIG_PM_PARTITION_SIZE_SPM+0x8c>)
    ff0a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
    ff0e:	f004 fe99 	bl	14c44 <printk>
    ff12:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    ff16:	485c      	ldr	r0, [pc, #368]	; (10088 <CONFIG_PM_PARTITION_SIZE_SPM+0x88>)
    ff18:	f004 ff1a 	bl	14d50 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ff1c:	4d5c      	ldr	r5, [pc, #368]	; (10090 <CONFIG_PM_PARTITION_SIZE_SPM+0x90>)
    ff1e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    ff22:	b1fb      	cbz	r3, ff64 <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ff24:	2300      	movs	r3, #0
    ff26:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    ff2a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ff2e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    ff32:	b9bb      	cbnz	r3, ff64 <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    ff34:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    ff36:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    ff3a:	2302      	movs	r3, #2
    ff3c:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    ff3e:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    ff40:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ff44:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    ff48:	b11b      	cbz	r3, ff52 <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
    ff4a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    ff4e:	059e      	lsls	r6, r3, #22
    ff50:	d403      	bmi.n	ff5a <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ff52:	2201      	movs	r2, #1
    ff54:	4b4e      	ldr	r3, [pc, #312]	; (10090 <CONFIG_PM_PARTITION_SIZE_SPM+0x90>)
    ff56:	621a      	str	r2, [r3, #32]
    ff58:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    ff5a:	2301      	movs	r3, #1
    ff5c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
    ff60:	b007      	add	sp, #28
    ff62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ff64:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    ff68:	2b00      	cmp	r3, #0
    ff6a:	d054      	beq.n	10016 <CONFIG_PM_PARTITION_SIZE_SPM+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ff6c:	2300      	movs	r3, #0
    ff6e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    ff72:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    ff76:	6a23      	ldr	r3, [r4, #32]
    ff78:	065d      	lsls	r5, r3, #25
    ff7a:	d40a      	bmi.n	ff92 <nrfx_twim_2_irq_handler+0x96>
    ff7c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    ff80:	b93b      	cbnz	r3, ff92 <nrfx_twim_2_irq_handler+0x96>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    ff82:	4940      	ldr	r1, [pc, #256]	; (10084 <CONFIG_PM_PARTITION_SIZE_SPM+0x84>)
    ff84:	4842      	ldr	r0, [pc, #264]	; (10090 <CONFIG_PM_PARTITION_SIZE_SPM+0x90>)
    ff86:	f005 f993 	bl	152b0 <xfer_completeness_check>
    ff8a:	f080 0001 	eor.w	r0, r0, #1
    ff8e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    ff92:	6a23      	ldr	r3, [r4, #32]
    ff94:	f013 0704 	ands.w	r7, r3, #4
    ff98:	d122      	bne.n	ffe0 <nrfx_twim_2_irq_handler+0xe4>
            event.xfer_desc = p_cb->xfer_desc;
    ff9a:	4e3e      	ldr	r6, [pc, #248]	; (10094 <CONFIG_PM_PARTITION_SIZE_SPM+0x94>)
    ff9c:	ad01      	add	r5, sp, #4
    ff9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ffa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ffa2:	6833      	ldr	r3, [r6, #0]
            if (!p_cb->repeated || p_cb->error)
    ffa4:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    ffa8:	602b      	str	r3, [r5, #0]
    ffaa:	4b39      	ldr	r3, [pc, #228]	; (10090 <CONFIG_PM_PARTITION_SIZE_SPM+0x90>)
    ffac:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    ffb0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    ffb4:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    ffb8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    ffbc:	f1bc 0f00 	cmp.w	ip, #0
    ffc0:	d002      	beq.n	ffc8 <nrfx_twim_2_irq_handler+0xcc>
    ffc2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    ffc6:	b15a      	cbz	r2, ffe0 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
    ffc8:	2200      	movs	r2, #0
    ffca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    ffce:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    ffd0:	4a31      	ldr	r2, [pc, #196]	; (10098 <CONFIG_PM_PARTITION_SIZE_SPM+0x98>)
    ffd2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ffd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ffda:	4b30      	ldr	r3, [pc, #192]	; (1009c <CONFIG_PM_PARTITION_SIZE_SPM+0x9c>)
    ffdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    ffe0:	4a2b      	ldr	r2, [pc, #172]	; (10090 <CONFIG_PM_PARTITION_SIZE_SPM+0x90>)
    ffe2:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    ffe6:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    ffe8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    ffec:	d53c      	bpl.n	10068 <CONFIG_PM_PARTITION_SIZE_SPM+0x68>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    ffee:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    fff0:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    fff4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    fff8:	b90b      	cbnz	r3, fffe <nrfx_twim_2_irq_handler+0x102>
        p_cb->busy = false;
    fffa:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    fffe:	6a23      	ldr	r3, [r4, #32]
   10000:	075b      	lsls	r3, r3, #29
   10002:	d503      	bpl.n	1000c <CONFIG_PM_PARTITION_SIZE_SPM+0xc>
   10004:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   10008:	2b00      	cmp	r3, #0
   1000a:	d0a9      	beq.n	ff60 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
   1000c:	e9d4 3100 	ldrd	r3, r1, [r4]
   10010:	4668      	mov	r0, sp
   10012:	4798      	blx	r3
}
   10014:	e7a4      	b.n	ff60 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10016:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   1001a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   1001e:	7b23      	ldrb	r3, [r4, #12]
   10020:	b983      	cbnz	r3, 10044 <CONFIG_PM_PARTITION_SIZE_SPM+0x44>
            event.xfer_desc = p_cb->xfer_desc;
   10022:	4f1c      	ldr	r7, [pc, #112]	; (10094 <CONFIG_PM_PARTITION_SIZE_SPM+0x94>)
   10024:	ae01      	add	r6, sp, #4
   10026:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10028:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1002a:	683b      	ldr	r3, [r7, #0]
   1002c:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1002e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   10032:	2b00      	cmp	r3, #0
   10034:	d1d4      	bne.n	ffe0 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   10036:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   1003a:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1003c:	4b16      	ldr	r3, [pc, #88]	; (10098 <CONFIG_PM_PARTITION_SIZE_SPM+0x98>)
   1003e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   10042:	e7c8      	b.n	ffd6 <nrfx_twim_2_irq_handler+0xda>
    p_reg->SHORTS = mask;
   10044:	f44f 7300 	mov.w	r3, #512	; 0x200
   10048:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1004c:	f240 2302 	movw	r3, #514	; 0x202
   10050:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   10052:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   10056:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1005a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1005c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10060:	2301      	movs	r3, #1
   10062:	60ab      	str	r3, [r5, #8]
   10064:	622b      	str	r3, [r5, #32]
            return;
   10066:	e77b      	b.n	ff60 <nrfx_twim_2_irq_handler+0x64>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   10068:	0759      	lsls	r1, r3, #29
   1006a:	d501      	bpl.n	10070 <CONFIG_PM_PARTITION_SIZE_SPM+0x70>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   1006c:	2302      	movs	r3, #2
   1006e:	e7bf      	b.n	fff0 <nrfx_twim_2_irq_handler+0xf4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   10070:	07da      	lsls	r2, r3, #31
   10072:	d501      	bpl.n	10078 <CONFIG_PM_PARTITION_SIZE_SPM+0x78>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   10074:	2303      	movs	r3, #3
   10076:	e7bb      	b.n	fff0 <nrfx_twim_2_irq_handler+0xf4>
    else if (p_cb->error)
   10078:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1007c:	2b00      	cmp	r3, #0
   1007e:	d0b7      	beq.n	fff0 <nrfx_twim_2_irq_handler+0xf4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   10080:	2304      	movs	r3, #4
   10082:	e7b5      	b.n	fff0 <nrfx_twim_2_irq_handler+0xf4>
   10084:	20000a24 	.word	0x20000a24
   10088:	00016b84 	.word	0x00016b84
   1008c:	00015be5 	.word	0x00015be5
   10090:	5000a000 	.word	0x5000a000
   10094:	20000a30 	.word	0x20000a30
   10098:	019c0202 	.word	0x019c0202
   1009c:	e000e100 	.word	0xe000e100

000100a0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   100a0:	6803      	ldr	r3, [r0, #0]
{
   100a2:	b510      	push	{r4, lr}
    switch (port)
   100a4:	095a      	lsrs	r2, r3, #5
   100a6:	bf0c      	ite	eq
   100a8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   100ac:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   100ae:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   100b2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   100b6:	07db      	lsls	r3, r3, #31
{
   100b8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   100ba:	d40a      	bmi.n	100d2 <nrf_gpio_pin_port_decode+0x32>
   100bc:	490e      	ldr	r1, [pc, #56]	; (100f8 <nrf_gpio_pin_port_decode+0x58>)
   100be:	480f      	ldr	r0, [pc, #60]	; (100fc <nrf_gpio_pin_port_decode+0x5c>)
   100c0:	f240 2229 	movw	r2, #553	; 0x229
   100c4:	f004 fdbe 	bl	14c44 <printk>
   100c8:	f240 2129 	movw	r1, #553	; 0x229
   100cc:	480a      	ldr	r0, [pc, #40]	; (100f8 <nrf_gpio_pin_port_decode+0x58>)
   100ce:	f004 fe3f 	bl	14d50 <assert_post_action>
    uint32_t pin_number = *p_pin;
   100d2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   100d4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   100d8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   100da:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   100dc:	d00a      	beq.n	100f4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   100de:	4906      	ldr	r1, [pc, #24]	; (100f8 <nrf_gpio_pin_port_decode+0x58>)
   100e0:	4806      	ldr	r0, [pc, #24]	; (100fc <nrf_gpio_pin_port_decode+0x5c>)
   100e2:	f240 222e 	movw	r2, #558	; 0x22e
   100e6:	f004 fdad 	bl	14c44 <printk>
   100ea:	f240 212e 	movw	r1, #558	; 0x22e
   100ee:	4802      	ldr	r0, [pc, #8]	; (100f8 <nrf_gpio_pin_port_decode+0x58>)
   100f0:	f004 fe2e 	bl	14d50 <assert_post_action>
}
   100f4:	4802      	ldr	r0, [pc, #8]	; (10100 <nrf_gpio_pin_port_decode+0x60>)
   100f6:	bd10      	pop	{r4, pc}
   100f8:	00016a3d 	.word	0x00016a3d
   100fc:	00015be5 	.word	0x00015be5
   10100:	50842500 	.word	0x50842500

00010104 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   10104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10106:	460c      	mov	r4, r1
   10108:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1010a:	f005 f901 	bl	15310 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1010e:	4620      	mov	r0, r4
   10110:	f005 f8fe 	bl	15310 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10114:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   10116:	f240 650d 	movw	r5, #1549	; 0x60d
   1011a:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1011c:	f7ff ffc0 	bl	100a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10120:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   10122:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   10124:	3380      	adds	r3, #128	; 0x80
   10126:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1012a:	a801      	add	r0, sp, #4
   1012c:	9401      	str	r4, [sp, #4]
   1012e:	f7ff ffb7 	bl	100a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10132:	9b01      	ldr	r3, [sp, #4]
   10134:	3380      	adds	r3, #128	; 0x80
   10136:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1013a:	2004      	movs	r0, #4
   1013c:	f005 f8b6 	bl	152ac <nrfx_busy_wait>
   10140:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10142:	a801      	add	r0, sp, #4
   10144:	9401      	str	r4, [sp, #4]
   10146:	f7ff ffab 	bl	100a0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1014a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1014c:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1014e:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   10150:	07db      	lsls	r3, r3, #31
   10152:	d414      	bmi.n	1017e <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10154:	a801      	add	r0, sp, #4
   10156:	9601      	str	r6, [sp, #4]
   10158:	f7ff ffa2 	bl	100a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1015c:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
   1015e:	3d01      	subs	r5, #1
   10160:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   10164:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   10166:	2004      	movs	r0, #4
   10168:	f005 f8a0 	bl	152ac <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1016c:	4630      	mov	r0, r6
   1016e:	f005 f8cf 	bl	15310 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   10172:	2004      	movs	r0, #4
   10174:	f005 f89a 	bl	152ac <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   10178:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1017c:	d1e1      	bne.n	10142 <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1017e:	a801      	add	r0, sp, #4
   10180:	9401      	str	r4, [sp, #4]
   10182:	f7ff ff8d 	bl	100a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   10186:	2301      	movs	r3, #1
   10188:	9a01      	ldr	r2, [sp, #4]
   1018a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1018c:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1018e:	2004      	movs	r0, #4
   10190:	f005 f88c 	bl	152ac <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   10194:	4620      	mov	r0, r4
   10196:	f005 f8bb 	bl	15310 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   1019a:	2004      	movs	r0, #4
   1019c:	f005 f886 	bl	152ac <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   101a0:	a801      	add	r0, sp, #4
   101a2:	9401      	str	r4, [sp, #4]
   101a4:	f7ff ff7c 	bl	100a0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   101a8:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   101aa:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   101ac:	4803      	ldr	r0, [pc, #12]	; (101bc <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   101ae:	40d3      	lsrs	r3, r2
   101b0:	f003 0301 	and.w	r3, r3, #1
   101b4:	1ac0      	subs	r0, r0, r3
   101b6:	b003      	add	sp, #12
   101b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ba:	bf00      	nop
   101bc:	0bad0001 	.word	0x0bad0001

000101c0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   101c0:	4b0e      	ldr	r3, [pc, #56]	; (101fc <z_sys_init_run_level+0x3c>)
{
   101c2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   101c4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   101c8:	3001      	adds	r0, #1
   101ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   101ce:	42a6      	cmp	r6, r4
   101d0:	d800      	bhi.n	101d4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   101d2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   101d4:	e9d4 3500 	ldrd	r3, r5, [r4]
   101d8:	4628      	mov	r0, r5
   101da:	4798      	blx	r3
		if (dev != NULL) {
   101dc:	b165      	cbz	r5, 101f8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   101de:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   101e0:	b130      	cbz	r0, 101f0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   101e2:	2800      	cmp	r0, #0
   101e4:	bfb8      	it	lt
   101e6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   101e8:	28ff      	cmp	r0, #255	; 0xff
   101ea:	bfa8      	it	ge
   101ec:	20ff      	movge	r0, #255	; 0xff
   101ee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   101f0:	785a      	ldrb	r2, [r3, #1]
   101f2:	f042 0201 	orr.w	r2, r2, #1
   101f6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   101f8:	3408      	adds	r4, #8
   101fa:	e7e8      	b.n	101ce <z_sys_init_run_level+0xe>
   101fc:	000159d8 	.word	0x000159d8

00010200 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   10200:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   10202:	4605      	mov	r5, r0
   10204:	b910      	cbnz	r0, 1020c <z_impl_device_get_binding+0xc>
		return NULL;
   10206:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   10208:	4620      	mov	r0, r4
   1020a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1020c:	7803      	ldrb	r3, [r0, #0]
   1020e:	2b00      	cmp	r3, #0
   10210:	d0f9      	beq.n	10206 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   10212:	4c0e      	ldr	r4, [pc, #56]	; (1024c <z_impl_device_get_binding+0x4c>)
   10214:	4e0e      	ldr	r6, [pc, #56]	; (10250 <z_impl_device_get_binding+0x50>)
   10216:	42b4      	cmp	r4, r6
   10218:	d108      	bne.n	1022c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1021a:	4c0c      	ldr	r4, [pc, #48]	; (1024c <z_impl_device_get_binding+0x4c>)
   1021c:	42b4      	cmp	r4, r6
   1021e:	d0f2      	beq.n	10206 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   10220:	4620      	mov	r0, r4
   10222:	f005 f882 	bl	1532a <z_device_is_ready>
   10226:	b950      	cbnz	r0, 1023e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   10228:	3418      	adds	r4, #24
   1022a:	e7f7      	b.n	1021c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1022c:	4620      	mov	r0, r4
   1022e:	f005 f87c 	bl	1532a <z_device_is_ready>
   10232:	b110      	cbz	r0, 1023a <z_impl_device_get_binding+0x3a>
   10234:	6823      	ldr	r3, [r4, #0]
   10236:	42ab      	cmp	r3, r5
   10238:	d0e6      	beq.n	10208 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1023a:	3418      	adds	r4, #24
   1023c:	e7eb      	b.n	10216 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1023e:	4628      	mov	r0, r5
   10240:	6821      	ldr	r1, [r4, #0]
   10242:	f004 fe32 	bl	14eaa <strcmp>
   10246:	2800      	cmp	r0, #0
   10248:	d1ee      	bne.n	10228 <z_impl_device_get_binding+0x28>
   1024a:	e7dd      	b.n	10208 <z_impl_device_get_binding+0x8>
   1024c:	00015478 	.word	0x00015478
   10250:	000154f0 	.word	0x000154f0

00010254 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10256:	4604      	mov	r4, r0
   10258:	460e      	mov	r6, r1
	__asm__ volatile(
   1025a:	f04f 0320 	mov.w	r3, #32
   1025e:	f3ef 8711 	mrs	r7, BASEPRI
   10262:	f383 8812 	msr	BASEPRI_MAX, r3
   10266:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1026a:	f001 fbcf 	bl	11a0c <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1026e:	2200      	movs	r2, #0
   10270:	2c04      	cmp	r4, #4
   10272:	bf98      	it	ls
   10274:	4b1d      	ldrls	r3, [pc, #116]	; (102ec <z_fatal_error+0x98>)
   10276:	4605      	mov	r5, r0
	switch (reason) {
   10278:	bf94      	ite	ls
   1027a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   1027e:	4b1c      	ldrhi	r3, [pc, #112]	; (102f0 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   10280:	9200      	str	r2, [sp, #0]
   10282:	2145      	movs	r1, #69	; 0x45
   10284:	4622      	mov	r2, r4
   10286:	481b      	ldr	r0, [pc, #108]	; (102f4 <z_fatal_error+0xa0>)
   10288:	f004 fd70 	bl	14d6c <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1028c:	b13e      	cbz	r6, 1029e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1028e:	69f3      	ldr	r3, [r6, #28]
   10290:	f3c3 0308 	ubfx	r3, r3, #0, #9
   10294:	b11b      	cbz	r3, 1029e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   10296:	2145      	movs	r1, #69	; 0x45
   10298:	4817      	ldr	r0, [pc, #92]	; (102f8 <z_fatal_error+0xa4>)
   1029a:	f004 fd67 	bl	14d6c <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1029e:	b135      	cbz	r5, 102ae <z_fatal_error+0x5a>
   102a0:	4628      	mov	r0, r5
   102a2:	f005 f872 	bl	1538a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   102a6:	4603      	mov	r3, r0
   102a8:	b108      	cbz	r0, 102ae <z_fatal_error+0x5a>
   102aa:	7802      	ldrb	r2, [r0, #0]
   102ac:	b902      	cbnz	r2, 102b0 <z_fatal_error+0x5c>
		thread_name = "unknown";
   102ae:	4b13      	ldr	r3, [pc, #76]	; (102fc <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   102b0:	462a      	mov	r2, r5
   102b2:	2145      	movs	r1, #69	; 0x45
   102b4:	4812      	ldr	r0, [pc, #72]	; (10300 <z_fatal_error+0xac>)
   102b6:	f004 fd59 	bl	14d6c <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   102ba:	4631      	mov	r1, r6
   102bc:	4620      	mov	r0, r4
   102be:	f7ff f8ab 	bl	f418 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   102c2:	2c04      	cmp	r4, #4
   102c4:	d108      	bne.n	102d8 <z_fatal_error+0x84>
   102c6:	490f      	ldr	r1, [pc, #60]	; (10304 <z_fatal_error+0xb0>)
   102c8:	480f      	ldr	r0, [pc, #60]	; (10308 <z_fatal_error+0xb4>)
   102ca:	228f      	movs	r2, #143	; 0x8f
   102cc:	f004 fcba 	bl	14c44 <printk>
   102d0:	218f      	movs	r1, #143	; 0x8f
   102d2:	480c      	ldr	r0, [pc, #48]	; (10304 <z_fatal_error+0xb0>)
   102d4:	f004 fd3c 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   102d8:	f387 8811 	msr	BASEPRI, r7
   102dc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   102e0:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   102e2:	b003      	add	sp, #12
   102e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   102e8:	f7fd bfea 	b.w	e2c0 <z_impl_k_thread_abort>
   102ec:	000159f0 	.word	0x000159f0
   102f0:	00016bc0 	.word	0x00016bc0
   102f4:	00016bd6 	.word	0x00016bd6
   102f8:	00016c03 	.word	0x00016c03
   102fc:	00016bce 	.word	0x00016bce
   10300:	00016c29 	.word	0x00016c29
   10304:	00016c46 	.word	0x00016c46
   10308:	00015be5 	.word	0x00015be5

0001030c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1030c:	2201      	movs	r2, #1
{
   1030e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   10310:	4b09      	ldr	r3, [pc, #36]	; (10338 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10312:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   10314:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10316:	f7ff ff53 	bl	101c0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1031a:	f001 feaf 	bl	1207c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1031e:	2003      	movs	r0, #3
   10320:	f7ff ff4e 	bl	101c0 <z_sys_init_run_level>

	z_init_static_threads();
   10324:	f000 f9f4 	bl	10710 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   10328:	f004 fc83 	bl	14c32 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1032c:	4a03      	ldr	r2, [pc, #12]	; (1033c <bg_thread_main+0x30>)
   1032e:	7b13      	ldrb	r3, [r2, #12]
   10330:	f023 0301 	bic.w	r3, r3, #1
   10334:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10336:	bd08      	pop	{r3, pc}
   10338:	20001489 	.word	0x20001489
   1033c:	200001f0 	.word	0x200001f0

00010340 <z_bss_zero>:
{
   10340:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   10342:	4803      	ldr	r0, [pc, #12]	; (10350 <z_bss_zero+0x10>)
   10344:	4a03      	ldr	r2, [pc, #12]	; (10354 <z_bss_zero+0x14>)
   10346:	2100      	movs	r1, #0
   10348:	1a12      	subs	r2, r2, r0
   1034a:	f004 fff8 	bl	1533e <z_early_memset>
}
   1034e:	bd08      	pop	{r3, pc}
   10350:	20000170 	.word	0x20000170
   10354:	20001648 	.word	0x20001648

00010358 <z_init_cpu>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   10358:	2300      	movs	r3, #0
   1035a:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1035c:	b570      	push	{r4, r5, r6, lr}
   1035e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   10360:	e9cd 2304 	strd	r2, r3, [sp, #16]
   10364:	220f      	movs	r2, #15
   10366:	9301      	str	r3, [sp, #4]
   10368:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1036c:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   1036e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10372:	4d0e      	ldr	r5, [pc, #56]	; (103ac <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
   10374:	4e0e      	ldr	r6, [pc, #56]	; (103b0 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10376:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
   1037a:	490e      	ldr	r1, [pc, #56]	; (103b4 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
   1037c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   10380:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   10382:	fb02 1100 	mla	r1, r2, r0, r1
   10386:	4b0c      	ldr	r3, [pc, #48]	; (103b8 <z_init_cpu+0x60>)
   10388:	4630      	mov	r0, r6
   1038a:	9500      	str	r5, [sp, #0]
   1038c:	f000 f96c 	bl	10668 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10390:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   10392:	480a      	ldr	r0, [pc, #40]	; (103bc <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   10394:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   10396:	3401      	adds	r4, #1
   10398:	f023 0304 	bic.w	r3, r3, #4
   1039c:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   103a0:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   103a2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   103a4:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   103a6:	b006      	add	sp, #24
   103a8:	bd70      	pop	{r4, r5, r6, pc}
   103aa:	bf00      	nop
   103ac:	20000a58 	.word	0x20000a58
   103b0:	20000170 	.word	0x20000170
   103b4:	20002648 	.word	0x20002648
   103b8:	00010851 	.word	0x00010851
   103bc:	20002788 	.word	0x20002788

000103c0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   103c0:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   103c2:	4b33      	ldr	r3, [pc, #204]	; (10490 <z_cstart+0xd0>)
   103c4:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   103c6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   103ca:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   103ce:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   103d2:	2400      	movs	r4, #0
   103d4:	23e0      	movs	r3, #224	; 0xe0
   103d6:	4d2f      	ldr	r5, [pc, #188]	; (10494 <z_cstart+0xd4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   103d8:	4e2f      	ldr	r6, [pc, #188]	; (10498 <z_cstart+0xd8>)
   103da:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   103de:	77ec      	strb	r4, [r5, #31]
   103e0:	762c      	strb	r4, [r5, #24]
   103e2:	766c      	strb	r4, [r5, #25]
   103e4:	76ac      	strb	r4, [r5, #26]
   103e6:	f885 4020 	strb.w	r4, [r5, #32]
   103ea:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   103ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   103ee:	4f2b      	ldr	r7, [pc, #172]	; (1049c <z_cstart+0xdc>)
   103f0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   103f4:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   103f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   103f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   103fc:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   103fe:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
   10400:	68eb      	ldr	r3, [r5, #12]
   10402:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
   10404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   10408:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
   1040c:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1040e:	f7fd febd 	bl	e18c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   10412:	f7fd fac3 	bl	d99c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1041a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1041c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1041e:	f7fe f99b 	bl	e758 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   10422:	f7fd ffdb 	bl	e3dc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   10426:	f240 1301 	movw	r3, #257	; 0x101
   1042a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1042e:	ab06      	add	r3, sp, #24
   10430:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   10432:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
   10436:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10438:	f004 ff76 	bl	15328 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1043c:	4620      	mov	r0, r4
   1043e:	f7ff febf 	bl	101c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10442:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   10444:	4d16      	ldr	r5, [pc, #88]	; (104a0 <z_cstart+0xe0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10446:	f7ff febb 	bl	101c0 <z_sys_init_run_level>
	z_sched_init();
   1044a:	f001 f995 	bl	11778 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1044e:	4b15      	ldr	r3, [pc, #84]	; (104a4 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   10450:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10452:	9305      	str	r3, [sp, #20]
   10454:	2301      	movs	r3, #1
   10456:	4914      	ldr	r1, [pc, #80]	; (104a8 <z_cstart+0xe8>)
   10458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1045c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   10460:	4628      	mov	r0, r5
   10462:	463b      	mov	r3, r7
   10464:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10468:	9400      	str	r4, [sp, #0]
   1046a:	f000 f8fd 	bl	10668 <z_setup_new_thread>
   1046e:	4606      	mov	r6, r0
   10470:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   10472:	4628      	mov	r0, r5
   10474:	f022 0204 	bic.w	r2, r2, #4
   10478:	736a      	strb	r2, [r5, #13]
   1047a:	f000 fe7f 	bl	1117c <z_ready_thread>
	z_init_cpu(0);
   1047e:	4620      	mov	r0, r4
   10480:	f7ff ff6a 	bl	10358 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10484:	463a      	mov	r2, r7
   10486:	4631      	mov	r1, r6
   10488:	4628      	mov	r0, r5
   1048a:	f7fd fbb3 	bl	dbf4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1048e:	bf00      	nop
   10490:	20002788 	.word	0x20002788
   10494:	e000ed00 	.word	0xe000ed00
   10498:	20000a58 	.word	0x20000a58
   1049c:	0001030d 	.word	0x0001030d
   104a0:	200001f0 	.word	0x200001f0
   104a4:	00016cb2 	.word	0x00016cb2
   104a8:	20001648 	.word	0x20001648

000104ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   104ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   104ae:	4c14      	ldr	r4, [pc, #80]	; (10500 <init_mem_slab_module+0x54>)
   104b0:	4d14      	ldr	r5, [pc, #80]	; (10504 <init_mem_slab_module+0x58>)
   104b2:	4e15      	ldr	r6, [pc, #84]	; (10508 <init_mem_slab_module+0x5c>)
   104b4:	42ac      	cmp	r4, r5
   104b6:	d908      	bls.n	104ca <init_mem_slab_module+0x1e>
   104b8:	4631      	mov	r1, r6
   104ba:	4814      	ldr	r0, [pc, #80]	; (1050c <init_mem_slab_module+0x60>)
   104bc:	223d      	movs	r2, #61	; 0x3d
   104be:	f004 fbc1 	bl	14c44 <printk>
   104c2:	213d      	movs	r1, #61	; 0x3d
   104c4:	4630      	mov	r0, r6
   104c6:	f004 fc43 	bl	14d50 <assert_post_action>
   104ca:	42ac      	cmp	r4, r5
   104cc:	d301      	bcc.n	104d2 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   104ce:	2000      	movs	r0, #0
	return rc;
}
   104d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   104d2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   104d6:	ea42 0301 	orr.w	r3, r2, r1
   104da:	f013 0303 	ands.w	r3, r3, #3
   104de:	d10b      	bne.n	104f8 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   104e0:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   104e2:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   104e4:	4283      	cmp	r3, r0
   104e6:	d101      	bne.n	104ec <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   104e8:	3420      	adds	r4, #32
   104ea:	e7e3      	b.n	104b4 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   104ec:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   104ee:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   104f0:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   104f2:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   104f4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   104f6:	e7f5      	b.n	104e4 <init_mem_slab_module+0x38>
	return rc;
   104f8:	f06f 0015 	mvn.w	r0, #21
   104fc:	e7e8      	b.n	104d0 <init_mem_slab_module+0x24>
   104fe:	bf00      	nop
   10500:	2000011c 	.word	0x2000011c
   10504:	2000011c 	.word	0x2000011c
   10508:	00016cba 	.word	0x00016cba
   1050c:	00015be5 	.word	0x00015be5

00010510 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   10510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10514:	4604      	mov	r4, r0
   10516:	460d      	mov	r5, r1
   10518:	4690      	mov	r8, r2
   1051a:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1051c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   10520:	f04f 0320 	mov.w	r3, #32
   10524:	f3ef 8911 	mrs	r9, BASEPRI
   10528:	f383 8812 	msr	BASEPRI_MAX, r3
   1052c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10530:	4630      	mov	r0, r6
   10532:	f000 f969 	bl	10808 <z_spin_lock_valid>
   10536:	b940      	cbnz	r0, 1054a <k_mem_slab_alloc+0x3a>
   10538:	491f      	ldr	r1, [pc, #124]	; (105b8 <k_mem_slab_alloc+0xa8>)
   1053a:	4820      	ldr	r0, [pc, #128]	; (105bc <k_mem_slab_alloc+0xac>)
   1053c:	228e      	movs	r2, #142	; 0x8e
   1053e:	f004 fb81 	bl	14c44 <printk>
   10542:	218e      	movs	r1, #142	; 0x8e
   10544:	481c      	ldr	r0, [pc, #112]	; (105b8 <k_mem_slab_alloc+0xa8>)
   10546:	f004 fc03 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   1054a:	4630      	mov	r0, r6
   1054c:	f000 f978 	bl	10840 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   10550:	69a3      	ldr	r3, [r4, #24]
   10552:	b1c3      	cbz	r3, 10586 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   10554:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   10556:	681b      	ldr	r3, [r3, #0]
   10558:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1055a:	69e3      	ldr	r3, [r4, #28]
   1055c:	3301      	adds	r3, #1
   1055e:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   10560:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10562:	4630      	mov	r0, r6
   10564:	f000 f95e 	bl	10824 <z_spin_unlock_valid>
   10568:	b940      	cbnz	r0, 1057c <k_mem_slab_alloc+0x6c>
   1056a:	4913      	ldr	r1, [pc, #76]	; (105b8 <k_mem_slab_alloc+0xa8>)
   1056c:	4813      	ldr	r0, [pc, #76]	; (105bc <k_mem_slab_alloc+0xac>)
   1056e:	22b9      	movs	r2, #185	; 0xb9
   10570:	f004 fb68 	bl	14c44 <printk>
   10574:	21b9      	movs	r1, #185	; 0xb9
   10576:	4810      	ldr	r0, [pc, #64]	; (105b8 <k_mem_slab_alloc+0xa8>)
   10578:	f004 fbea 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   1057c:	f389 8811 	msr	BASEPRI, r9
   10580:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   10584:	e013      	b.n	105ae <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   10586:	ea58 0207 	orrs.w	r2, r8, r7
   1058a:	d103      	bne.n	10594 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
   1058c:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   10590:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   10592:	e7e6      	b.n	10562 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   10594:	4622      	mov	r2, r4
   10596:	4649      	mov	r1, r9
   10598:	4630      	mov	r0, r6
   1059a:	e9cd 8700 	strd	r8, r7, [sp]
   1059e:	f000 ff51 	bl	11444 <z_pend_curr>
		if (result == 0) {
   105a2:	4604      	mov	r4, r0
   105a4:	b918      	cbnz	r0, 105ae <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   105a6:	4b06      	ldr	r3, [pc, #24]	; (105c0 <k_mem_slab_alloc+0xb0>)
   105a8:	689b      	ldr	r3, [r3, #8]
   105aa:	695b      	ldr	r3, [r3, #20]
   105ac:	602b      	str	r3, [r5, #0]
}
   105ae:	4620      	mov	r0, r4
   105b0:	b003      	add	sp, #12
   105b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   105b6:	bf00      	nop
   105b8:	00015bbf 	.word	0x00015bbf
   105bc:	00015be5 	.word	0x00015be5
   105c0:	20000a58 	.word	0x20000a58

000105c4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   105c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105c8:	4604      	mov	r4, r0
   105ca:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   105cc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   105d0:	f04f 0320 	mov.w	r3, #32
   105d4:	f3ef 8711 	mrs	r7, BASEPRI
   105d8:	f383 8812 	msr	BASEPRI_MAX, r3
   105dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   105e0:	4630      	mov	r0, r6
   105e2:	f000 f911 	bl	10808 <z_spin_lock_valid>
   105e6:	b940      	cbnz	r0, 105fa <k_mem_slab_free+0x36>
   105e8:	491d      	ldr	r1, [pc, #116]	; (10660 <k_mem_slab_free+0x9c>)
   105ea:	481e      	ldr	r0, [pc, #120]	; (10664 <k_mem_slab_free+0xa0>)
   105ec:	228e      	movs	r2, #142	; 0x8e
   105ee:	f004 fb29 	bl	14c44 <printk>
   105f2:	218e      	movs	r1, #142	; 0x8e
   105f4:	481a      	ldr	r0, [pc, #104]	; (10660 <k_mem_slab_free+0x9c>)
   105f6:	f004 fbab 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   105fa:	4630      	mov	r0, r6
   105fc:	f000 f920 	bl	10840 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   10600:	f8d4 8018 	ldr.w	r8, [r4, #24]
   10604:	f1b8 0f00 	cmp.w	r8, #0
   10608:	d10f      	bne.n	1062a <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1060a:	4620      	mov	r0, r4
   1060c:	f001 f876 	bl	116fc <z_unpend_first_thread>

		if (pending_thread != NULL) {
   10610:	b158      	cbz	r0, 1062a <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   10612:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10614:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   10618:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1061a:	f000 fdaf 	bl	1117c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1061e:	4639      	mov	r1, r7
   10620:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   10622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   10626:	f000 bbb5 	b.w	10d94 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1062a:	682b      	ldr	r3, [r5, #0]
   1062c:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1062e:	4630      	mov	r0, r6
   10630:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   10632:	682b      	ldr	r3, [r5, #0]
   10634:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   10636:	69e3      	ldr	r3, [r4, #28]
   10638:	3b01      	subs	r3, #1
   1063a:	61e3      	str	r3, [r4, #28]
   1063c:	f000 f8f2 	bl	10824 <z_spin_unlock_valid>
   10640:	b940      	cbnz	r0, 10654 <k_mem_slab_free+0x90>
   10642:	4907      	ldr	r1, [pc, #28]	; (10660 <k_mem_slab_free+0x9c>)
   10644:	4807      	ldr	r0, [pc, #28]	; (10664 <k_mem_slab_free+0xa0>)
   10646:	22b9      	movs	r2, #185	; 0xb9
   10648:	f004 fafc 	bl	14c44 <printk>
   1064c:	21b9      	movs	r1, #185	; 0xb9
   1064e:	4804      	ldr	r0, [pc, #16]	; (10660 <k_mem_slab_free+0x9c>)
   10650:	f004 fb7e 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   10654:	f387 8811 	msr	BASEPRI, r7
   10658:	f3bf 8f6f 	isb	sy
}
   1065c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10660:	00015bbf 	.word	0x00015bbf
   10664:	00015be5 	.word	0x00015be5

00010668 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   10668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1066c:	b085      	sub	sp, #20
   1066e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   10672:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   10674:	f1b9 0f0f 	cmp.w	r9, #15
{
   10678:	460f      	mov	r7, r1
   1067a:	4615      	mov	r5, r2
   1067c:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   1067e:	d12e      	bne.n	106de <z_setup_new_thread+0x76>
   10680:	4b1f      	ldr	r3, [pc, #124]	; (10700 <z_setup_new_thread+0x98>)
   10682:	4598      	cmp	r8, r3
   10684:	d12f      	bne.n	106e6 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   10686:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1068a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1068e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   10690:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   10692:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   10694:	2304      	movs	r3, #4
   10696:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1069a:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1069c:	9302      	str	r3, [sp, #8]
   1069e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   106a0:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   106a4:	9301      	str	r3, [sp, #4]
   106a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   106a8:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   106aa:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   106ae:	9300      	str	r3, [sp, #0]
   106b0:	462a      	mov	r2, r5
   106b2:	4643      	mov	r3, r8
   106b4:	4639      	mov	r1, r7
   106b6:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   106b8:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   106bc:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   106be:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   106c2:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   106c4:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   106c6:	f7fd fa79 	bl	dbbc <arch_new_thread>
	if (!_current) {
   106ca:	4b0e      	ldr	r3, [pc, #56]	; (10704 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   106cc:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   106ce:	689b      	ldr	r3, [r3, #8]
   106d0:	b103      	cbz	r3, 106d4 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   106d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   106d4:	4628      	mov	r0, r5
   106d6:	6723      	str	r3, [r4, #112]	; 0x70
   106d8:	b005      	add	sp, #20
   106da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   106de:	f109 0310 	add.w	r3, r9, #16
   106e2:	2b1e      	cmp	r3, #30
   106e4:	d9cf      	bls.n	10686 <z_setup_new_thread+0x1e>
   106e6:	f240 12ff 	movw	r2, #511	; 0x1ff
   106ea:	4907      	ldr	r1, [pc, #28]	; (10708 <z_setup_new_thread+0xa0>)
   106ec:	4807      	ldr	r0, [pc, #28]	; (1070c <z_setup_new_thread+0xa4>)
   106ee:	f004 faa9 	bl	14c44 <printk>
   106f2:	f240 11ff 	movw	r1, #511	; 0x1ff
   106f6:	4804      	ldr	r0, [pc, #16]	; (10708 <z_setup_new_thread+0xa0>)
   106f8:	f004 fb2a 	bl	14d50 <assert_post_action>
   106fc:	e7c3      	b.n	10686 <z_setup_new_thread+0x1e>
   106fe:	bf00      	nop
   10700:	00010851 	.word	0x00010851
   10704:	20000a58 	.word	0x20000a58
   10708:	00016cdf 	.word	0x00016cdf
   1070c:	00015be5 	.word	0x00015be5

00010710 <z_init_static_threads>:
{
   10710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10714:	4c37      	ldr	r4, [pc, #220]	; (107f4 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   10716:	4d38      	ldr	r5, [pc, #224]	; (107f8 <z_init_static_threads+0xe8>)
   10718:	4f38      	ldr	r7, [pc, #224]	; (107fc <z_init_static_threads+0xec>)
{
   1071a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1071c:	42ac      	cmp	r4, r5
   1071e:	4626      	mov	r6, r4
   10720:	d90a      	bls.n	10738 <z_init_static_threads+0x28>
   10722:	4639      	mov	r1, r7
   10724:	4836      	ldr	r0, [pc, #216]	; (10800 <z_init_static_threads+0xf0>)
   10726:	f240 22d5 	movw	r2, #725	; 0x2d5
   1072a:	f004 fa8b 	bl	14c44 <printk>
   1072e:	f240 21d5 	movw	r1, #725	; 0x2d5
   10732:	4638      	mov	r0, r7
   10734:	f004 fb0c 	bl	14d50 <assert_post_action>
   10738:	42ae      	cmp	r6, r5
   1073a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1073e:	d31b      	bcc.n	10778 <z_init_static_threads+0x68>
	k_sched_lock();
   10740:	f000 fb5e 	bl	10e00 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   10744:	4c2b      	ldr	r4, [pc, #172]	; (107f4 <z_init_static_threads+0xe4>)
   10746:	4e2d      	ldr	r6, [pc, #180]	; (107fc <z_init_static_threads+0xec>)
   10748:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 10800 <z_init_static_threads+0xf0>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1074c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 10804 <z_init_static_threads+0xf4>
   10750:	42ac      	cmp	r4, r5
   10752:	d90a      	bls.n	1076a <z_init_static_threads+0x5a>
   10754:	4631      	mov	r1, r6
   10756:	4640      	mov	r0, r8
   10758:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   1075c:	f004 fa72 	bl	14c44 <printk>
   10760:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   10764:	4630      	mov	r0, r6
   10766:	f004 faf3 	bl	14d50 <assert_post_action>
   1076a:	42ac      	cmp	r4, r5
   1076c:	d320      	bcc.n	107b0 <z_init_static_threads+0xa0>
}
   1076e:	b007      	add	sp, #28
   10770:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   10774:	f000 bf66 	b.w	11644 <k_sched_unlock>
		z_setup_new_thread(
   10778:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1077c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10780:	9305      	str	r3, [sp, #20]
   10782:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10786:	9304      	str	r3, [sp, #16]
   10788:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1078c:	9303      	str	r3, [sp, #12]
   1078e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   10792:	9302      	str	r3, [sp, #8]
   10794:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10798:	9301      	str	r3, [sp, #4]
   1079a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1079e:	9300      	str	r3, [sp, #0]
   107a0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   107a4:	f7ff ff60 	bl	10668 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   107a8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   107ac:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   107ae:	e7b5      	b.n	1071c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   107b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   107b2:	1c5a      	adds	r2, r3, #1
   107b4:	d00f      	beq.n	107d6 <z_init_static_threads+0xc6>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   107b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   107ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   107be:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   107c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   107c4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   107c8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   107cc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   107ce:	d104      	bne.n	107da <z_init_static_threads+0xca>
	z_sched_start(thread);
   107d0:	4638      	mov	r0, r7
   107d2:	f000 fd09 	bl	111e8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   107d6:	3430      	adds	r4, #48	; 0x30
   107d8:	e7ba      	b.n	10750 <z_init_static_threads+0x40>
   107da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107de:	2300      	movs	r3, #0
   107e0:	f7fb fe2c 	bl	c43c <__aeabi_uldivmod>
   107e4:	4602      	mov	r2, r0
   107e6:	460b      	mov	r3, r1
   107e8:	f107 0018 	add.w	r0, r7, #24
   107ec:	4649      	mov	r1, r9
   107ee:	f001 fa0b 	bl	11c08 <z_add_timeout>
   107f2:	e7f0      	b.n	107d6 <z_init_static_threads+0xc6>
   107f4:	2000011c 	.word	0x2000011c
   107f8:	2000011c 	.word	0x2000011c
   107fc:	00016cdf 	.word	0x00016cdf
   10800:	00015be5 	.word	0x00015be5
   10804:	0001126d 	.word	0x0001126d

00010808 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   10808:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1080a:	b138      	cbz	r0, 1081c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1080c:	4b04      	ldr	r3, [pc, #16]	; (10820 <z_spin_lock_valid+0x18>)
   1080e:	f000 0003 	and.w	r0, r0, #3
   10812:	7d1b      	ldrb	r3, [r3, #20]
   10814:	1ac0      	subs	r0, r0, r3
   10816:	bf18      	it	ne
   10818:	2001      	movne	r0, #1
   1081a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1081c:	2001      	movs	r0, #1
}
   1081e:	4770      	bx	lr
   10820:	20000a58 	.word	0x20000a58

00010824 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10824:	4905      	ldr	r1, [pc, #20]	; (1083c <z_spin_unlock_valid+0x18>)
{
   10826:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10828:	688a      	ldr	r2, [r1, #8]
   1082a:	7d08      	ldrb	r0, [r1, #20]
   1082c:	6819      	ldr	r1, [r3, #0]
   1082e:	4302      	orrs	r2, r0
   10830:	2000      	movs	r0, #0
   10832:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   10834:	bf04      	itt	eq
   10836:	6018      	streq	r0, [r3, #0]
	return true;
   10838:	2001      	moveq	r0, #1
}
   1083a:	4770      	bx	lr
   1083c:	20000a58 	.word	0x20000a58

00010840 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   10840:	4a02      	ldr	r2, [pc, #8]	; (1084c <z_spin_lock_set_owner+0xc>)
   10842:	7d11      	ldrb	r1, [r2, #20]
   10844:	6893      	ldr	r3, [r2, #8]
   10846:	430b      	orrs	r3, r1
   10848:	6003      	str	r3, [r0, #0]
}
   1084a:	4770      	bx	lr
   1084c:	20000a58 	.word	0x20000a58

00010850 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   10850:	4c12      	ldr	r4, [pc, #72]	; (1089c <idle+0x4c>)
{
   10852:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   10854:	68a3      	ldr	r3, [r4, #8]
   10856:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1085a:	2b00      	cmp	r3, #0
   1085c:	da08      	bge.n	10870 <idle+0x20>
   1085e:	4910      	ldr	r1, [pc, #64]	; (108a0 <idle+0x50>)
   10860:	4810      	ldr	r0, [pc, #64]	; (108a4 <idle+0x54>)
   10862:	2227      	movs	r2, #39	; 0x27
   10864:	f004 f9ee 	bl	14c44 <printk>
   10868:	2127      	movs	r1, #39	; 0x27
   1086a:	480d      	ldr	r0, [pc, #52]	; (108a0 <idle+0x50>)
   1086c:	f004 fa70 	bl	14d50 <assert_post_action>
	return !z_sys_post_kernel;
   10870:	4d0d      	ldr	r5, [pc, #52]	; (108a8 <idle+0x58>)
	__asm__ volatile(
   10872:	f04f 0220 	mov.w	r2, #32
   10876:	f3ef 8311 	mrs	r3, BASEPRI
   1087a:	f382 8812 	msr	BASEPRI_MAX, r2
   1087e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   10882:	f001 faab 	bl	11ddc <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   10886:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   10888:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1088a:	b913      	cbnz	r3, 10892 <idle+0x42>
	arch_cpu_idle();
   1088c:	f7fd f88c 	bl	d9a8 <arch_cpu_idle>
}
   10890:	e7ef      	b.n	10872 <idle+0x22>
   10892:	f7fc fc3f 	bl	d114 <pm_system_suspend>
   10896:	2800      	cmp	r0, #0
   10898:	d1eb      	bne.n	10872 <idle+0x22>
   1089a:	e7f7      	b.n	1088c <idle+0x3c>
   1089c:	20000a58 	.word	0x20000a58
   108a0:	00016d02 	.word	0x00016d02
   108a4:	00015be5 	.word	0x00015be5
   108a8:	20001489 	.word	0x20001489

000108ac <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   108ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   108b0:	4604      	mov	r4, r0
   108b2:	4617      	mov	r7, r2
   108b4:	461e      	mov	r6, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   108b6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   108ba:	b143      	cbz	r3, 108ce <z_impl_k_mutex_lock+0x22>
   108bc:	495f      	ldr	r1, [pc, #380]	; (10a3c <z_impl_k_mutex_lock+0x190>)
   108be:	4860      	ldr	r0, [pc, #384]	; (10a40 <z_impl_k_mutex_lock+0x194>)
   108c0:	2265      	movs	r2, #101	; 0x65
   108c2:	f004 f9bf 	bl	14c44 <printk>
   108c6:	2165      	movs	r1, #101	; 0x65
   108c8:	485c      	ldr	r0, [pc, #368]	; (10a3c <z_impl_k_mutex_lock+0x190>)
   108ca:	f004 fa41 	bl	14d50 <assert_post_action>
   108ce:	f04f 0320 	mov.w	r3, #32
   108d2:	f3ef 8811 	mrs	r8, BASEPRI
   108d6:	f383 8812 	msr	BASEPRI_MAX, r3
   108da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   108de:	4859      	ldr	r0, [pc, #356]	; (10a44 <z_impl_k_mutex_lock+0x198>)
   108e0:	f7ff ff92 	bl	10808 <z_spin_lock_valid>
   108e4:	b940      	cbnz	r0, 108f8 <z_impl_k_mutex_lock+0x4c>
   108e6:	4958      	ldr	r1, [pc, #352]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   108e8:	4855      	ldr	r0, [pc, #340]	; (10a40 <z_impl_k_mutex_lock+0x194>)
   108ea:	228e      	movs	r2, #142	; 0x8e
   108ec:	f004 f9aa 	bl	14c44 <printk>
   108f0:	218e      	movs	r1, #142	; 0x8e
   108f2:	4855      	ldr	r0, [pc, #340]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   108f4:	f004 fa2c 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   108f8:	4852      	ldr	r0, [pc, #328]	; (10a44 <z_impl_k_mutex_lock+0x198>)
   108fa:	f7ff ffa1 	bl	10840 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   108fe:	68e3      	ldr	r3, [r4, #12]
   10900:	4a52      	ldr	r2, [pc, #328]	; (10a4c <z_impl_k_mutex_lock+0x1a0>)
   10902:	b1d3      	cbz	r3, 1093a <z_impl_k_mutex_lock+0x8e>
   10904:	68a0      	ldr	r0, [r4, #8]
   10906:	6891      	ldr	r1, [r2, #8]
   10908:	4288      	cmp	r0, r1
   1090a:	d033      	beq.n	10974 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1090c:	ea57 0306 	orrs.w	r3, r7, r6
   10910:	d132      	bne.n	10978 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10912:	484c      	ldr	r0, [pc, #304]	; (10a44 <z_impl_k_mutex_lock+0x198>)
   10914:	f7ff ff86 	bl	10824 <z_spin_unlock_valid>
   10918:	b940      	cbnz	r0, 1092c <z_impl_k_mutex_lock+0x80>
   1091a:	494b      	ldr	r1, [pc, #300]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   1091c:	4848      	ldr	r0, [pc, #288]	; (10a40 <z_impl_k_mutex_lock+0x194>)
   1091e:	22b9      	movs	r2, #185	; 0xb9
   10920:	f004 f990 	bl	14c44 <printk>
   10924:	21b9      	movs	r1, #185	; 0xb9
   10926:	4848      	ldr	r0, [pc, #288]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   10928:	f004 fa12 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   1092c:	f388 8811 	msr	BASEPRI, r8
   10930:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   10934:	f06f 000f 	mvn.w	r0, #15
   10938:	e019      	b.n	1096e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   1093a:	6891      	ldr	r1, [r2, #8]
   1093c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   10940:	3301      	adds	r3, #1
   10942:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   10944:	6893      	ldr	r3, [r2, #8]
   10946:	483f      	ldr	r0, [pc, #252]	; (10a44 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   10948:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1094a:	60a3      	str	r3, [r4, #8]
   1094c:	f7ff ff6a 	bl	10824 <z_spin_unlock_valid>
   10950:	b940      	cbnz	r0, 10964 <z_impl_k_mutex_lock+0xb8>
   10952:	493d      	ldr	r1, [pc, #244]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   10954:	483a      	ldr	r0, [pc, #232]	; (10a40 <z_impl_k_mutex_lock+0x194>)
   10956:	22b9      	movs	r2, #185	; 0xb9
   10958:	f004 f974 	bl	14c44 <printk>
   1095c:	21b9      	movs	r1, #185	; 0xb9
   1095e:	483a      	ldr	r0, [pc, #232]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   10960:	f004 f9f6 	bl	14d50 <assert_post_action>
   10964:	f388 8811 	msr	BASEPRI, r8
   10968:	f3bf 8f6f 	isb	sy
		return 0;
   1096c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1096e:	b002      	add	sp, #8
   10970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   10974:	6921      	ldr	r1, [r4, #16]
   10976:	e7e3      	b.n	10940 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   10978:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1097c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   10980:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   10984:	4299      	cmp	r1, r3
   10986:	bfa8      	it	ge
   10988:	4619      	movge	r1, r3
   1098a:	4291      	cmp	r1, r2
   1098c:	bfb8      	it	lt
   1098e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   10990:	428b      	cmp	r3, r1
   10992:	dd3e      	ble.n	10a12 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   10994:	f004 fd02 	bl	1539c <adjust_owner_prio.isra.0>
   10998:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1099a:	4622      	mov	r2, r4
   1099c:	4641      	mov	r1, r8
   1099e:	e9cd 7600 	strd	r7, r6, [sp]
   109a2:	4828      	ldr	r0, [pc, #160]	; (10a44 <z_impl_k_mutex_lock+0x198>)
   109a4:	f000 fd4e 	bl	11444 <z_pend_curr>
	if (got_mutex == 0) {
   109a8:	2800      	cmp	r0, #0
   109aa:	d0e0      	beq.n	1096e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   109ac:	f04f 0320 	mov.w	r3, #32
   109b0:	f3ef 8611 	mrs	r6, BASEPRI
   109b4:	f383 8812 	msr	BASEPRI_MAX, r3
   109b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   109bc:	4821      	ldr	r0, [pc, #132]	; (10a44 <z_impl_k_mutex_lock+0x198>)
   109be:	f7ff ff23 	bl	10808 <z_spin_lock_valid>
   109c2:	b940      	cbnz	r0, 109d6 <z_impl_k_mutex_lock+0x12a>
   109c4:	4920      	ldr	r1, [pc, #128]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   109c6:	481e      	ldr	r0, [pc, #120]	; (10a40 <z_impl_k_mutex_lock+0x194>)
   109c8:	228e      	movs	r2, #142	; 0x8e
   109ca:	f004 f93b 	bl	14c44 <printk>
   109ce:	218e      	movs	r1, #142	; 0x8e
   109d0:	481d      	ldr	r0, [pc, #116]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   109d2:	f004 f9bd 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   109d6:	481b      	ldr	r0, [pc, #108]	; (10a44 <z_impl_k_mutex_lock+0x198>)
   109d8:	f7ff ff32 	bl	10840 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   109dc:	6823      	ldr	r3, [r4, #0]
   109de:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   109e0:	429c      	cmp	r4, r3
   109e2:	d00a      	beq.n	109fa <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   109e4:	b14b      	cbz	r3, 109fa <z_impl_k_mutex_lock+0x14e>
   109e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   109ea:	4299      	cmp	r1, r3
   109ec:	bfa8      	it	ge
   109ee:	4619      	movge	r1, r3
   109f0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   109f4:	4299      	cmp	r1, r3
   109f6:	bfb8      	it	lt
   109f8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   109fa:	68a0      	ldr	r0, [r4, #8]
   109fc:	f004 fcce 	bl	1539c <adjust_owner_prio.isra.0>
   10a00:	b900      	cbnz	r0, 10a04 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   10a02:	b145      	cbz	r5, 10a16 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   10a04:	4631      	mov	r1, r6
   10a06:	480f      	ldr	r0, [pc, #60]	; (10a44 <z_impl_k_mutex_lock+0x198>)
   10a08:	f000 f9c4 	bl	10d94 <z_reschedule>
	return -EAGAIN;
   10a0c:	f06f 000a 	mvn.w	r0, #10
   10a10:	e7ad      	b.n	1096e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   10a12:	2500      	movs	r5, #0
   10a14:	e7c1      	b.n	1099a <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10a16:	480b      	ldr	r0, [pc, #44]	; (10a44 <z_impl_k_mutex_lock+0x198>)
   10a18:	f7ff ff04 	bl	10824 <z_spin_unlock_valid>
   10a1c:	b940      	cbnz	r0, 10a30 <z_impl_k_mutex_lock+0x184>
   10a1e:	490a      	ldr	r1, [pc, #40]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   10a20:	4807      	ldr	r0, [pc, #28]	; (10a40 <z_impl_k_mutex_lock+0x194>)
   10a22:	22b9      	movs	r2, #185	; 0xb9
   10a24:	f004 f90e 	bl	14c44 <printk>
   10a28:	21b9      	movs	r1, #185	; 0xb9
   10a2a:	4807      	ldr	r0, [pc, #28]	; (10a48 <z_impl_k_mutex_lock+0x19c>)
   10a2c:	f004 f990 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   10a30:	f386 8811 	msr	BASEPRI, r6
   10a34:	f3bf 8f6f 	isb	sy
   10a38:	e7e8      	b.n	10a0c <z_impl_k_mutex_lock+0x160>
   10a3a:	bf00      	nop
   10a3c:	00016d23 	.word	0x00016d23
   10a40:	00015be5 	.word	0x00015be5
   10a44:	20000a80 	.word	0x20000a80
   10a48:	00015bbf 	.word	0x00015bbf
   10a4c:	20000a58 	.word	0x20000a58

00010a50 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   10a50:	b538      	push	{r3, r4, r5, lr}
   10a52:	4604      	mov	r4, r0
   10a54:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   10a58:	b143      	cbz	r3, 10a6c <z_impl_k_mutex_unlock+0x1c>
   10a5a:	4943      	ldr	r1, [pc, #268]	; (10b68 <z_impl_k_mutex_unlock+0x118>)
   10a5c:	4843      	ldr	r0, [pc, #268]	; (10b6c <z_impl_k_mutex_unlock+0x11c>)
   10a5e:	22c7      	movs	r2, #199	; 0xc7
   10a60:	f004 f8f0 	bl	14c44 <printk>
   10a64:	21c7      	movs	r1, #199	; 0xc7
   10a66:	4840      	ldr	r0, [pc, #256]	; (10b68 <z_impl_k_mutex_unlock+0x118>)
   10a68:	f004 f972 	bl	14d50 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10a6c:	68a3      	ldr	r3, [r4, #8]
   10a6e:	2b00      	cmp	r3, #0
   10a70:	d074      	beq.n	10b5c <z_impl_k_mutex_unlock+0x10c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10a72:	4d3f      	ldr	r5, [pc, #252]	; (10b70 <z_impl_k_mutex_unlock+0x120>)
   10a74:	68aa      	ldr	r2, [r5, #8]
   10a76:	4293      	cmp	r3, r2
   10a78:	d173      	bne.n	10b62 <z_impl_k_mutex_unlock+0x112>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   10a7a:	68e3      	ldr	r3, [r4, #12]
   10a7c:	b943      	cbnz	r3, 10a90 <z_impl_k_mutex_unlock+0x40>
   10a7e:	493a      	ldr	r1, [pc, #232]	; (10b68 <z_impl_k_mutex_unlock+0x118>)
   10a80:	483a      	ldr	r0, [pc, #232]	; (10b6c <z_impl_k_mutex_unlock+0x11c>)
   10a82:	22df      	movs	r2, #223	; 0xdf
   10a84:	f004 f8de 	bl	14c44 <printk>
   10a88:	21df      	movs	r1, #223	; 0xdf
   10a8a:	4837      	ldr	r0, [pc, #220]	; (10b68 <z_impl_k_mutex_unlock+0x118>)
   10a8c:	f004 f960 	bl	14d50 <assert_post_action>
   10a90:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   10a94:	b143      	cbz	r3, 10aa8 <z_impl_k_mutex_unlock+0x58>
   10a96:	4937      	ldr	r1, [pc, #220]	; (10b74 <z_impl_k_mutex_unlock+0x124>)
   10a98:	4834      	ldr	r0, [pc, #208]	; (10b6c <z_impl_k_mutex_unlock+0x11c>)
   10a9a:	22fd      	movs	r2, #253	; 0xfd
   10a9c:	f004 f8d2 	bl	14c44 <printk>
   10aa0:	21fd      	movs	r1, #253	; 0xfd
   10aa2:	4834      	ldr	r0, [pc, #208]	; (10b74 <z_impl_k_mutex_unlock+0x124>)
   10aa4:	f004 f954 	bl	14d50 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   10aa8:	68ab      	ldr	r3, [r5, #8]
   10aaa:	7bdb      	ldrb	r3, [r3, #15]
   10aac:	2b01      	cmp	r3, #1
   10aae:	d108      	bne.n	10ac2 <z_impl_k_mutex_unlock+0x72>
   10ab0:	4930      	ldr	r1, [pc, #192]	; (10b74 <z_impl_k_mutex_unlock+0x124>)
   10ab2:	482e      	ldr	r0, [pc, #184]	; (10b6c <z_impl_k_mutex_unlock+0x11c>)
   10ab4:	22fe      	movs	r2, #254	; 0xfe
   10ab6:	f004 f8c5 	bl	14c44 <printk>
   10aba:	21fe      	movs	r1, #254	; 0xfe
   10abc:	482d      	ldr	r0, [pc, #180]	; (10b74 <z_impl_k_mutex_unlock+0x124>)
   10abe:	f004 f947 	bl	14d50 <assert_post_action>

	--_current->base.sched_locked;
   10ac2:	68aa      	ldr	r2, [r5, #8]
   10ac4:	7bd3      	ldrb	r3, [r2, #15]
   10ac6:	3b01      	subs	r3, #1
   10ac8:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   10aca:	68e3      	ldr	r3, [r4, #12]
   10acc:	2b01      	cmp	r3, #1
   10ace:	d905      	bls.n	10adc <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   10ad0:	3b01      	subs	r3, #1
   10ad2:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   10ad4:	f000 fdb6 	bl	11644 <k_sched_unlock>

	return 0;
   10ad8:	2000      	movs	r0, #0
}
   10ada:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   10adc:	f04f 0320 	mov.w	r3, #32
   10ae0:	f3ef 8511 	mrs	r5, BASEPRI
   10ae4:	f383 8812 	msr	BASEPRI_MAX, r3
   10ae8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10aec:	4822      	ldr	r0, [pc, #136]	; (10b78 <z_impl_k_mutex_unlock+0x128>)
   10aee:	f7ff fe8b 	bl	10808 <z_spin_lock_valid>
   10af2:	b940      	cbnz	r0, 10b06 <z_impl_k_mutex_unlock+0xb6>
   10af4:	4921      	ldr	r1, [pc, #132]	; (10b7c <z_impl_k_mutex_unlock+0x12c>)
   10af6:	481d      	ldr	r0, [pc, #116]	; (10b6c <z_impl_k_mutex_unlock+0x11c>)
   10af8:	228e      	movs	r2, #142	; 0x8e
   10afa:	f004 f8a3 	bl	14c44 <printk>
   10afe:	218e      	movs	r1, #142	; 0x8e
   10b00:	481e      	ldr	r0, [pc, #120]	; (10b7c <z_impl_k_mutex_unlock+0x12c>)
   10b02:	f004 f925 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   10b06:	481c      	ldr	r0, [pc, #112]	; (10b78 <z_impl_k_mutex_unlock+0x128>)
   10b08:	f7ff fe9a 	bl	10840 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   10b0c:	6921      	ldr	r1, [r4, #16]
   10b0e:	68a0      	ldr	r0, [r4, #8]
   10b10:	f004 fc44 	bl	1539c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10b14:	4620      	mov	r0, r4
   10b16:	f000 fdf1 	bl	116fc <z_unpend_first_thread>
	mutex->owner = new_owner;
   10b1a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   10b1c:	b158      	cbz	r0, 10b36 <z_impl_k_mutex_unlock+0xe6>
		mutex->owner_orig_prio = new_owner->base.prio;
   10b1e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10b22:	6122      	str	r2, [r4, #16]
   10b24:	2200      	movs	r2, #0
   10b26:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   10b28:	f000 fb28 	bl	1117c <z_ready_thread>
		z_reschedule(&lock, key);
   10b2c:	4629      	mov	r1, r5
   10b2e:	4812      	ldr	r0, [pc, #72]	; (10b78 <z_impl_k_mutex_unlock+0x128>)
   10b30:	f000 f930 	bl	10d94 <z_reschedule>
   10b34:	e7ce      	b.n	10ad4 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   10b36:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10b38:	480f      	ldr	r0, [pc, #60]	; (10b78 <z_impl_k_mutex_unlock+0x128>)
   10b3a:	f7ff fe73 	bl	10824 <z_spin_unlock_valid>
   10b3e:	b940      	cbnz	r0, 10b52 <z_impl_k_mutex_unlock+0x102>
   10b40:	490e      	ldr	r1, [pc, #56]	; (10b7c <z_impl_k_mutex_unlock+0x12c>)
   10b42:	480a      	ldr	r0, [pc, #40]	; (10b6c <z_impl_k_mutex_unlock+0x11c>)
   10b44:	22b9      	movs	r2, #185	; 0xb9
   10b46:	f004 f87d 	bl	14c44 <printk>
   10b4a:	21b9      	movs	r1, #185	; 0xb9
   10b4c:	480b      	ldr	r0, [pc, #44]	; (10b7c <z_impl_k_mutex_unlock+0x12c>)
   10b4e:	f004 f8ff 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   10b52:	f385 8811 	msr	BASEPRI, r5
   10b56:	f3bf 8f6f 	isb	sy
   10b5a:	e7bb      	b.n	10ad4 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   10b5c:	f06f 0015 	mvn.w	r0, #21
   10b60:	e7bb      	b.n	10ada <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   10b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10b66:	e7b8      	b.n	10ada <z_impl_k_mutex_unlock+0x8a>
   10b68:	00016d23 	.word	0x00016d23
   10b6c:	00015be5 	.word	0x00015be5
   10b70:	20000a58 	.word	0x20000a58
   10b74:	00016d45 	.word	0x00016d45
   10b78:	20000a80 	.word	0x20000a80
   10b7c:	00015bbf 	.word	0x00015bbf

00010b80 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10b80:	b538      	push	{r3, r4, r5, lr}
   10b82:	4604      	mov	r4, r0
	__asm__ volatile(
   10b84:	f04f 0320 	mov.w	r3, #32
   10b88:	f3ef 8511 	mrs	r5, BASEPRI
   10b8c:	f383 8812 	msr	BASEPRI_MAX, r3
   10b90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10b94:	4812      	ldr	r0, [pc, #72]	; (10be0 <z_impl_k_sem_give+0x60>)
   10b96:	f7ff fe37 	bl	10808 <z_spin_lock_valid>
   10b9a:	b940      	cbnz	r0, 10bae <z_impl_k_sem_give+0x2e>
   10b9c:	4911      	ldr	r1, [pc, #68]	; (10be4 <z_impl_k_sem_give+0x64>)
   10b9e:	4812      	ldr	r0, [pc, #72]	; (10be8 <z_impl_k_sem_give+0x68>)
   10ba0:	228e      	movs	r2, #142	; 0x8e
   10ba2:	f004 f84f 	bl	14c44 <printk>
   10ba6:	218e      	movs	r1, #142	; 0x8e
   10ba8:	480e      	ldr	r0, [pc, #56]	; (10be4 <z_impl_k_sem_give+0x64>)
   10baa:	f004 f8d1 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   10bae:	480c      	ldr	r0, [pc, #48]	; (10be0 <z_impl_k_sem_give+0x60>)
   10bb0:	f7ff fe46 	bl	10840 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10bb4:	4620      	mov	r0, r4
   10bb6:	f000 fda1 	bl	116fc <z_unpend_first_thread>

	if (thread != NULL) {
   10bba:	b148      	cbz	r0, 10bd0 <z_impl_k_sem_give+0x50>
   10bbc:	2200      	movs	r2, #0
   10bbe:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10bc0:	f000 fadc 	bl	1117c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10bc4:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10bca:	4805      	ldr	r0, [pc, #20]	; (10be0 <z_impl_k_sem_give+0x60>)
   10bcc:	f000 b8e2 	b.w	10d94 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10bd0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10bd4:	429a      	cmp	r2, r3
   10bd6:	bf18      	it	ne
   10bd8:	3301      	addne	r3, #1
   10bda:	60a3      	str	r3, [r4, #8]
}
   10bdc:	e7f2      	b.n	10bc4 <z_impl_k_sem_give+0x44>
   10bde:	bf00      	nop
   10be0:	20000a84 	.word	0x20000a84
   10be4:	00015bbf 	.word	0x00015bbf
   10be8:	00015be5 	.word	0x00015be5

00010bec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bee:	4604      	mov	r4, r0
   10bf0:	4616      	mov	r6, r2
   10bf2:	461d      	mov	r5, r3
   10bf4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   10bf8:	b15b      	cbz	r3, 10c12 <z_impl_k_sem_take+0x26>
   10bfa:	ea52 0305 	orrs.w	r3, r2, r5
   10bfe:	d008      	beq.n	10c12 <z_impl_k_sem_take+0x26>
   10c00:	492b      	ldr	r1, [pc, #172]	; (10cb0 <z_impl_k_sem_take+0xc4>)
   10c02:	482c      	ldr	r0, [pc, #176]	; (10cb4 <z_impl_k_sem_take+0xc8>)
   10c04:	2279      	movs	r2, #121	; 0x79
   10c06:	f004 f81d 	bl	14c44 <printk>
   10c0a:	2179      	movs	r1, #121	; 0x79
   10c0c:	4828      	ldr	r0, [pc, #160]	; (10cb0 <z_impl_k_sem_take+0xc4>)
   10c0e:	f004 f89f 	bl	14d50 <assert_post_action>
   10c12:	f04f 0320 	mov.w	r3, #32
   10c16:	f3ef 8711 	mrs	r7, BASEPRI
   10c1a:	f383 8812 	msr	BASEPRI_MAX, r3
   10c1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10c22:	4825      	ldr	r0, [pc, #148]	; (10cb8 <z_impl_k_sem_take+0xcc>)
   10c24:	f7ff fdf0 	bl	10808 <z_spin_lock_valid>
   10c28:	b940      	cbnz	r0, 10c3c <z_impl_k_sem_take+0x50>
   10c2a:	4924      	ldr	r1, [pc, #144]	; (10cbc <z_impl_k_sem_take+0xd0>)
   10c2c:	4821      	ldr	r0, [pc, #132]	; (10cb4 <z_impl_k_sem_take+0xc8>)
   10c2e:	228e      	movs	r2, #142	; 0x8e
   10c30:	f004 f808 	bl	14c44 <printk>
   10c34:	218e      	movs	r1, #142	; 0x8e
   10c36:	4821      	ldr	r0, [pc, #132]	; (10cbc <z_impl_k_sem_take+0xd0>)
   10c38:	f004 f88a 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   10c3c:	481e      	ldr	r0, [pc, #120]	; (10cb8 <z_impl_k_sem_take+0xcc>)
   10c3e:	f7ff fdff 	bl	10840 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10c42:	68a3      	ldr	r3, [r4, #8]
   10c44:	b1ab      	cbz	r3, 10c72 <z_impl_k_sem_take+0x86>
		sem->count--;
   10c46:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c48:	481b      	ldr	r0, [pc, #108]	; (10cb8 <z_impl_k_sem_take+0xcc>)
   10c4a:	60a3      	str	r3, [r4, #8]
   10c4c:	f7ff fdea 	bl	10824 <z_spin_unlock_valid>
   10c50:	b940      	cbnz	r0, 10c64 <z_impl_k_sem_take+0x78>
   10c52:	491a      	ldr	r1, [pc, #104]	; (10cbc <z_impl_k_sem_take+0xd0>)
   10c54:	4817      	ldr	r0, [pc, #92]	; (10cb4 <z_impl_k_sem_take+0xc8>)
   10c56:	22b9      	movs	r2, #185	; 0xb9
   10c58:	f003 fff4 	bl	14c44 <printk>
   10c5c:	21b9      	movs	r1, #185	; 0xb9
   10c5e:	4817      	ldr	r0, [pc, #92]	; (10cbc <z_impl_k_sem_take+0xd0>)
   10c60:	f004 f876 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   10c64:	f387 8811 	msr	BASEPRI, r7
   10c68:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10c6c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10c6e:	b003      	add	sp, #12
   10c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10c72:	ea56 0305 	orrs.w	r3, r6, r5
   10c76:	d113      	bne.n	10ca0 <z_impl_k_sem_take+0xb4>
   10c78:	480f      	ldr	r0, [pc, #60]	; (10cb8 <z_impl_k_sem_take+0xcc>)
   10c7a:	f7ff fdd3 	bl	10824 <z_spin_unlock_valid>
   10c7e:	b940      	cbnz	r0, 10c92 <z_impl_k_sem_take+0xa6>
   10c80:	490e      	ldr	r1, [pc, #56]	; (10cbc <z_impl_k_sem_take+0xd0>)
   10c82:	480c      	ldr	r0, [pc, #48]	; (10cb4 <z_impl_k_sem_take+0xc8>)
   10c84:	22b9      	movs	r2, #185	; 0xb9
   10c86:	f003 ffdd 	bl	14c44 <printk>
   10c8a:	21b9      	movs	r1, #185	; 0xb9
   10c8c:	480b      	ldr	r0, [pc, #44]	; (10cbc <z_impl_k_sem_take+0xd0>)
   10c8e:	f004 f85f 	bl	14d50 <assert_post_action>
   10c92:	f387 8811 	msr	BASEPRI, r7
   10c96:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10c9a:	f06f 000f 	mvn.w	r0, #15
   10c9e:	e7e6      	b.n	10c6e <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10ca0:	4622      	mov	r2, r4
   10ca2:	4639      	mov	r1, r7
   10ca4:	e9cd 6500 	strd	r6, r5, [sp]
   10ca8:	4803      	ldr	r0, [pc, #12]	; (10cb8 <z_impl_k_sem_take+0xcc>)
   10caa:	f000 fbcb 	bl	11444 <z_pend_curr>
	return ret;
   10cae:	e7de      	b.n	10c6e <z_impl_k_sem_take+0x82>
   10cb0:	00016d70 	.word	0x00016d70
   10cb4:	00015be5 	.word	0x00015be5
   10cb8:	20000a84 	.word	0x20000a84
   10cbc:	00015bbf 	.word	0x00015bbf

00010cc0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   10cc0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   10cc2:	4c08      	ldr	r4, [pc, #32]	; (10ce4 <z_reset_time_slice+0x24>)
   10cc4:	6823      	ldr	r3, [r4, #0]
   10cc6:	b15b      	cbz	r3, 10ce0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   10cc8:	f7fe fb5a 	bl	f380 <sys_clock_elapsed>
   10ccc:	4603      	mov	r3, r0
   10cce:	6820      	ldr	r0, [r4, #0]
   10cd0:	4a05      	ldr	r2, [pc, #20]	; (10ce8 <z_reset_time_slice+0x28>)
   10cd2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   10cd4:	2100      	movs	r1, #0
	}
}
   10cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   10cda:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   10cdc:	f001 b8b4 	b.w	11e48 <z_set_timeout_expiry>
}
   10ce0:	bd10      	pop	{r4, pc}
   10ce2:	bf00      	nop
   10ce4:	20000a94 	.word	0x20000a94
   10ce8:	20000a58 	.word	0x20000a58

00010cec <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   10cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cee:	4604      	mov	r4, r0
   10cf0:	460d      	mov	r5, r1
	__asm__ volatile(
   10cf2:	f04f 0320 	mov.w	r3, #32
   10cf6:	f3ef 8611 	mrs	r6, BASEPRI
   10cfa:	f383 8812 	msr	BASEPRI_MAX, r3
   10cfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10d02:	481e      	ldr	r0, [pc, #120]	; (10d7c <k_sched_time_slice_set+0x90>)
   10d04:	f7ff fd80 	bl	10808 <z_spin_lock_valid>
   10d08:	b940      	cbnz	r0, 10d1c <k_sched_time_slice_set+0x30>
   10d0a:	491d      	ldr	r1, [pc, #116]	; (10d80 <k_sched_time_slice_set+0x94>)
   10d0c:	481d      	ldr	r0, [pc, #116]	; (10d84 <k_sched_time_slice_set+0x98>)
   10d0e:	228e      	movs	r2, #142	; 0x8e
   10d10:	f003 ff98 	bl	14c44 <printk>
   10d14:	218e      	movs	r1, #142	; 0x8e
   10d16:	481a      	ldr	r0, [pc, #104]	; (10d80 <k_sched_time_slice_set+0x94>)
   10d18:	f004 f81a 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   10d1c:	4817      	ldr	r0, [pc, #92]	; (10d7c <k_sched_time_slice_set+0x90>)
   10d1e:	f7ff fd8f 	bl	10840 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10d22:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   10d26:	2100      	movs	r1, #0
   10d28:	f240 30e7 	movw	r0, #999	; 0x3e7
   10d2c:	4b16      	ldr	r3, [pc, #88]	; (10d88 <k_sched_time_slice_set+0x9c>)
   10d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10d32:	6119      	str	r1, [r3, #16]
   10d34:	2300      	movs	r3, #0
   10d36:	fbe4 0107 	umlal	r0, r1, r4, r7
   10d3a:	f7fb fb7f 	bl	c43c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   10d3e:	2c00      	cmp	r4, #0
   10d40:	4b12      	ldr	r3, [pc, #72]	; (10d8c <k_sched_time_slice_set+0xa0>)
   10d42:	dc16      	bgt.n	10d72 <k_sched_time_slice_set+0x86>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   10d44:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   10d46:	4b12      	ldr	r3, [pc, #72]	; (10d90 <k_sched_time_slice_set+0xa4>)
   10d48:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   10d4a:	f7ff ffb9 	bl	10cc0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d4e:	480b      	ldr	r0, [pc, #44]	; (10d7c <k_sched_time_slice_set+0x90>)
   10d50:	f7ff fd68 	bl	10824 <z_spin_unlock_valid>
   10d54:	b940      	cbnz	r0, 10d68 <k_sched_time_slice_set+0x7c>
   10d56:	490a      	ldr	r1, [pc, #40]	; (10d80 <k_sched_time_slice_set+0x94>)
   10d58:	480a      	ldr	r0, [pc, #40]	; (10d84 <k_sched_time_slice_set+0x98>)
   10d5a:	22b9      	movs	r2, #185	; 0xb9
   10d5c:	f003 ff72 	bl	14c44 <printk>
   10d60:	21b9      	movs	r1, #185	; 0xb9
   10d62:	4807      	ldr	r0, [pc, #28]	; (10d80 <k_sched_time_slice_set+0x94>)
   10d64:	f003 fff4 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   10d68:	f386 8811 	msr	BASEPRI, r6
   10d6c:	f3bf 8f6f 	isb	sy
	}
}
   10d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   10d72:	2802      	cmp	r0, #2
   10d74:	bfb8      	it	lt
   10d76:	2002      	movlt	r0, #2
   10d78:	e7e4      	b.n	10d44 <k_sched_time_slice_set+0x58>
   10d7a:	bf00      	nop
   10d7c:	20000a8c 	.word	0x20000a8c
   10d80:	00015bbf 	.word	0x00015bbf
   10d84:	00015be5 	.word	0x00015be5
   10d88:	20000a58 	.word	0x20000a58
   10d8c:	20000a94 	.word	0x20000a94
   10d90:	20000a90 	.word	0x20000a90

00010d94 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   10d94:	b510      	push	{r4, lr}
   10d96:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10d98:	460c      	mov	r4, r1
   10d9a:	b9c1      	cbnz	r1, 10dce <z_reschedule+0x3a>
   10d9c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   10da0:	b9aa      	cbnz	r2, 10dce <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   10da2:	4a14      	ldr	r2, [pc, #80]	; (10df4 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   10da4:	69d1      	ldr	r1, [r2, #28]
   10da6:	6892      	ldr	r2, [r2, #8]
   10da8:	4291      	cmp	r1, r2
   10daa:	d010      	beq.n	10dce <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10dac:	f7ff fd3a 	bl	10824 <z_spin_unlock_valid>
   10db0:	b940      	cbnz	r0, 10dc4 <z_reschedule+0x30>
   10db2:	4911      	ldr	r1, [pc, #68]	; (10df8 <z_reschedule+0x64>)
   10db4:	4811      	ldr	r0, [pc, #68]	; (10dfc <z_reschedule+0x68>)
   10db6:	22d0      	movs	r2, #208	; 0xd0
   10db8:	f003 ff44 	bl	14c44 <printk>
   10dbc:	21d0      	movs	r1, #208	; 0xd0
   10dbe:	480e      	ldr	r0, [pc, #56]	; (10df8 <z_reschedule+0x64>)
   10dc0:	f003 ffc6 	bl	14d50 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   10dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   10dc8:	2000      	movs	r0, #0
   10dca:	f7fc bea1 	b.w	db10 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10dce:	4618      	mov	r0, r3
   10dd0:	f7ff fd28 	bl	10824 <z_spin_unlock_valid>
   10dd4:	b940      	cbnz	r0, 10de8 <z_reschedule+0x54>
   10dd6:	4908      	ldr	r1, [pc, #32]	; (10df8 <z_reschedule+0x64>)
   10dd8:	4808      	ldr	r0, [pc, #32]	; (10dfc <z_reschedule+0x68>)
   10dda:	22b9      	movs	r2, #185	; 0xb9
   10ddc:	f003 ff32 	bl	14c44 <printk>
   10de0:	21b9      	movs	r1, #185	; 0xb9
   10de2:	4805      	ldr	r0, [pc, #20]	; (10df8 <z_reschedule+0x64>)
   10de4:	f003 ffb4 	bl	14d50 <assert_post_action>
   10de8:	f384 8811 	msr	BASEPRI, r4
   10dec:	f3bf 8f6f 	isb	sy
   10df0:	bd10      	pop	{r4, pc}
   10df2:	bf00      	nop
   10df4:	20000a58 	.word	0x20000a58
   10df8:	00015bbf 	.word	0x00015bbf
   10dfc:	00015be5 	.word	0x00015be5

00010e00 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   10e00:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10e02:	f04f 0320 	mov.w	r3, #32
   10e06:	f3ef 8511 	mrs	r5, BASEPRI
   10e0a:	f383 8812 	msr	BASEPRI_MAX, r3
   10e0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10e12:	4820      	ldr	r0, [pc, #128]	; (10e94 <k_sched_lock+0x94>)
   10e14:	f7ff fcf8 	bl	10808 <z_spin_lock_valid>
   10e18:	b940      	cbnz	r0, 10e2c <k_sched_lock+0x2c>
   10e1a:	491f      	ldr	r1, [pc, #124]	; (10e98 <k_sched_lock+0x98>)
   10e1c:	481f      	ldr	r0, [pc, #124]	; (10e9c <k_sched_lock+0x9c>)
   10e1e:	228e      	movs	r2, #142	; 0x8e
   10e20:	f003 ff10 	bl	14c44 <printk>
   10e24:	218e      	movs	r1, #142	; 0x8e
   10e26:	481c      	ldr	r0, [pc, #112]	; (10e98 <k_sched_lock+0x98>)
   10e28:	f003 ff92 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   10e2c:	4819      	ldr	r0, [pc, #100]	; (10e94 <k_sched_lock+0x94>)
   10e2e:	f7ff fd07 	bl	10840 <z_spin_lock_set_owner>
   10e32:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   10e36:	b143      	cbz	r3, 10e4a <k_sched_lock+0x4a>
   10e38:	4919      	ldr	r1, [pc, #100]	; (10ea0 <k_sched_lock+0xa0>)
   10e3a:	4818      	ldr	r0, [pc, #96]	; (10e9c <k_sched_lock+0x9c>)
   10e3c:	22fd      	movs	r2, #253	; 0xfd
   10e3e:	f003 ff01 	bl	14c44 <printk>
   10e42:	21fd      	movs	r1, #253	; 0xfd
   10e44:	4816      	ldr	r0, [pc, #88]	; (10ea0 <k_sched_lock+0xa0>)
   10e46:	f003 ff83 	bl	14d50 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   10e4a:	4c16      	ldr	r4, [pc, #88]	; (10ea4 <k_sched_lock+0xa4>)
   10e4c:	68a3      	ldr	r3, [r4, #8]
   10e4e:	7bdb      	ldrb	r3, [r3, #15]
   10e50:	2b01      	cmp	r3, #1
   10e52:	d108      	bne.n	10e66 <k_sched_lock+0x66>
   10e54:	4912      	ldr	r1, [pc, #72]	; (10ea0 <k_sched_lock+0xa0>)
   10e56:	4811      	ldr	r0, [pc, #68]	; (10e9c <k_sched_lock+0x9c>)
   10e58:	22fe      	movs	r2, #254	; 0xfe
   10e5a:	f003 fef3 	bl	14c44 <printk>
   10e5e:	21fe      	movs	r1, #254	; 0xfe
   10e60:	480f      	ldr	r0, [pc, #60]	; (10ea0 <k_sched_lock+0xa0>)
   10e62:	f003 ff75 	bl	14d50 <assert_post_action>
	--_current->base.sched_locked;
   10e66:	68a2      	ldr	r2, [r4, #8]
   10e68:	7bd3      	ldrb	r3, [r2, #15]
   10e6a:	3b01      	subs	r3, #1
   10e6c:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10e6e:	4809      	ldr	r0, [pc, #36]	; (10e94 <k_sched_lock+0x94>)
   10e70:	f7ff fcd8 	bl	10824 <z_spin_unlock_valid>
   10e74:	b940      	cbnz	r0, 10e88 <k_sched_lock+0x88>
   10e76:	4908      	ldr	r1, [pc, #32]	; (10e98 <k_sched_lock+0x98>)
   10e78:	4808      	ldr	r0, [pc, #32]	; (10e9c <k_sched_lock+0x9c>)
   10e7a:	22b9      	movs	r2, #185	; 0xb9
   10e7c:	f003 fee2 	bl	14c44 <printk>
   10e80:	21b9      	movs	r1, #185	; 0xb9
   10e82:	4805      	ldr	r0, [pc, #20]	; (10e98 <k_sched_lock+0x98>)
   10e84:	f003 ff64 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   10e88:	f385 8811 	msr	BASEPRI, r5
   10e8c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   10e90:	bd38      	pop	{r3, r4, r5, pc}
   10e92:	bf00      	nop
   10e94:	20000a8c 	.word	0x20000a8c
   10e98:	00015bbf 	.word	0x00015bbf
   10e9c:	00015be5 	.word	0x00015be5
   10ea0:	00016d45 	.word	0x00016d45
   10ea4:	20000a58 	.word	0x20000a58

00010ea8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10ea8:	4b0b      	ldr	r3, [pc, #44]	; (10ed8 <z_priq_dumb_remove+0x30>)
{
   10eaa:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10eac:	4299      	cmp	r1, r3
{
   10eae:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10eb0:	d10a      	bne.n	10ec8 <z_priq_dumb_remove+0x20>
   10eb2:	490a      	ldr	r1, [pc, #40]	; (10edc <z_priq_dumb_remove+0x34>)
   10eb4:	480a      	ldr	r0, [pc, #40]	; (10ee0 <z_priq_dumb_remove+0x38>)
   10eb6:	f240 32e7 	movw	r2, #999	; 0x3e7
   10eba:	f003 fec3 	bl	14c44 <printk>
   10ebe:	f240 31e7 	movw	r1, #999	; 0x3e7
   10ec2:	4806      	ldr	r0, [pc, #24]	; (10edc <z_priq_dumb_remove+0x34>)
   10ec4:	f003 ff44 	bl	14d50 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   10ec8:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   10ecc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10ece:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10ed0:	2300      	movs	r3, #0
	node->prev = NULL;
   10ed2:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   10ed6:	bd10      	pop	{r4, pc}
   10ed8:	20000170 	.word	0x20000170
   10edc:	00016d90 	.word	0x00016d90
   10ee0:	00015be5 	.word	0x00015be5

00010ee4 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   10ee4:	6883      	ldr	r3, [r0, #8]
{
   10ee6:	b510      	push	{r4, lr}
   10ee8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   10eea:	b953      	cbnz	r3, 10f02 <unpend_thread_no_timeout+0x1e>
   10eec:	490a      	ldr	r1, [pc, #40]	; (10f18 <unpend_thread_no_timeout+0x34>)
   10eee:	480b      	ldr	r0, [pc, #44]	; (10f1c <unpend_thread_no_timeout+0x38>)
   10ef0:	f240 2283 	movw	r2, #643	; 0x283
   10ef4:	f003 fea6 	bl	14c44 <printk>
   10ef8:	f240 2183 	movw	r1, #643	; 0x283
   10efc:	4806      	ldr	r0, [pc, #24]	; (10f18 <unpend_thread_no_timeout+0x34>)
   10efe:	f003 ff27 	bl	14d50 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   10f02:	4621      	mov	r1, r4
   10f04:	68a0      	ldr	r0, [r4, #8]
   10f06:	f7ff ffcf 	bl	10ea8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10f0a:	7b63      	ldrb	r3, [r4, #13]
   10f0c:	f023 0302 	bic.w	r3, r3, #2
   10f10:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   10f12:	2300      	movs	r3, #0
   10f14:	60a3      	str	r3, [r4, #8]
}
   10f16:	bd10      	pop	{r4, pc}
   10f18:	00016d90 	.word	0x00016d90
   10f1c:	00015be5 	.word	0x00015be5

00010f20 <update_cache>:
{
   10f20:	b538      	push	{r3, r4, r5, lr}
   10f22:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   10f24:	4812      	ldr	r0, [pc, #72]	; (10f70 <update_cache+0x50>)
   10f26:	f004 fa5e 	bl	153e6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10f2a:	4d12      	ldr	r5, [pc, #72]	; (10f74 <update_cache+0x54>)
   10f2c:	4604      	mov	r4, r0
   10f2e:	b900      	cbnz	r0, 10f32 <update_cache+0x12>
   10f30:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   10f32:	b9aa      	cbnz	r2, 10f60 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   10f34:	68ab      	ldr	r3, [r5, #8]
   10f36:	b943      	cbnz	r3, 10f4a <update_cache+0x2a>
   10f38:	490f      	ldr	r1, [pc, #60]	; (10f78 <update_cache+0x58>)
   10f3a:	4810      	ldr	r0, [pc, #64]	; (10f7c <update_cache+0x5c>)
   10f3c:	2289      	movs	r2, #137	; 0x89
   10f3e:	f003 fe81 	bl	14c44 <printk>
   10f42:	2189      	movs	r1, #137	; 0x89
   10f44:	480c      	ldr	r0, [pc, #48]	; (10f78 <update_cache+0x58>)
   10f46:	f003 ff03 	bl	14d50 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   10f4a:	68ab      	ldr	r3, [r5, #8]
   10f4c:	7b5a      	ldrb	r2, [r3, #13]
   10f4e:	06d2      	lsls	r2, r2, #27
   10f50:	d106      	bne.n	10f60 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10f52:	69a2      	ldr	r2, [r4, #24]
   10f54:	b922      	cbnz	r2, 10f60 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   10f56:	89da      	ldrh	r2, [r3, #14]
   10f58:	2a7f      	cmp	r2, #127	; 0x7f
   10f5a:	d901      	bls.n	10f60 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   10f5c:	61eb      	str	r3, [r5, #28]
}
   10f5e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   10f60:	68ab      	ldr	r3, [r5, #8]
   10f62:	42a3      	cmp	r3, r4
   10f64:	d001      	beq.n	10f6a <update_cache+0x4a>
			z_reset_time_slice();
   10f66:	f7ff feab 	bl	10cc0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   10f6a:	61ec      	str	r4, [r5, #28]
}
   10f6c:	e7f7      	b.n	10f5e <update_cache+0x3e>
   10f6e:	bf00      	nop
   10f70:	20000a78 	.word	0x20000a78
   10f74:	20000a58 	.word	0x20000a58
   10f78:	00016d90 	.word	0x00016d90
   10f7c:	00015be5 	.word	0x00015be5

00010f80 <move_thread_to_end_of_prio_q>:
{
   10f80:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   10f82:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   10f86:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   10f88:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   10f8a:	7b43      	ldrb	r3, [r0, #13]
   10f8c:	da06      	bge.n	10f9c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   10f92:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10f94:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   10f96:	481d      	ldr	r0, [pc, #116]	; (1100c <move_thread_to_end_of_prio_q+0x8c>)
   10f98:	f7ff ff86 	bl	10ea8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10f9c:	7b63      	ldrb	r3, [r4, #13]
   10f9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10fa2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10fa4:	4b1a      	ldr	r3, [pc, #104]	; (11010 <move_thread_to_end_of_prio_q+0x90>)
   10fa6:	429c      	cmp	r4, r3
   10fa8:	d108      	bne.n	10fbc <move_thread_to_end_of_prio_q+0x3c>
   10faa:	491a      	ldr	r1, [pc, #104]	; (11014 <move_thread_to_end_of_prio_q+0x94>)
   10fac:	481a      	ldr	r0, [pc, #104]	; (11018 <move_thread_to_end_of_prio_q+0x98>)
   10fae:	22ba      	movs	r2, #186	; 0xba
   10fb0:	f003 fe48 	bl	14c44 <printk>
   10fb4:	21ba      	movs	r1, #186	; 0xba
   10fb6:	4817      	ldr	r0, [pc, #92]	; (11014 <move_thread_to_end_of_prio_q+0x94>)
   10fb8:	f003 feca 	bl	14d50 <assert_post_action>
	return list->head == list;
   10fbc:	4a17      	ldr	r2, [pc, #92]	; (1101c <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10fbe:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   10fc2:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10fc6:	42ab      	cmp	r3, r5
   10fc8:	d01b      	beq.n	11002 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10fca:	b1d3      	cbz	r3, 11002 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   10fcc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   10fd0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   10fd4:	428e      	cmp	r6, r1
   10fd6:	d00f      	beq.n	10ff8 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   10fd8:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   10fda:	2900      	cmp	r1, #0
   10fdc:	dd0c      	ble.n	10ff8 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   10fde:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   10fe0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   10fe4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   10fe6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   10fe8:	6890      	ldr	r0, [r2, #8]
   10fea:	1b03      	subs	r3, r0, r4
   10fec:	4258      	negs	r0, r3
   10fee:	4158      	adcs	r0, r3
}
   10ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   10ff4:	f7ff bf94 	b.w	10f20 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10ff8:	4283      	cmp	r3, r0
   10ffa:	d002      	beq.n	11002 <move_thread_to_end_of_prio_q+0x82>
   10ffc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10ffe:	2b00      	cmp	r3, #0
   11000:	d1e6      	bne.n	10fd0 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   11002:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   11006:	6004      	str	r4, [r0, #0]
	list->tail = node;
   11008:	6254      	str	r4, [r2, #36]	; 0x24
}
   1100a:	e7ed      	b.n	10fe8 <move_thread_to_end_of_prio_q+0x68>
   1100c:	20000a78 	.word	0x20000a78
   11010:	20000170 	.word	0x20000170
   11014:	00016d90 	.word	0x00016d90
   11018:	00015be5 	.word	0x00015be5
   1101c:	20000a58 	.word	0x20000a58

00011020 <z_time_slice>:
{
   11020:	b538      	push	{r3, r4, r5, lr}
   11022:	4604      	mov	r4, r0
	__asm__ volatile(
   11024:	f04f 0320 	mov.w	r3, #32
   11028:	f3ef 8511 	mrs	r5, BASEPRI
   1102c:	f383 8812 	msr	BASEPRI_MAX, r3
   11030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11034:	4824      	ldr	r0, [pc, #144]	; (110c8 <z_time_slice+0xa8>)
   11036:	f7ff fbe7 	bl	10808 <z_spin_lock_valid>
   1103a:	b940      	cbnz	r0, 1104e <z_time_slice+0x2e>
   1103c:	4923      	ldr	r1, [pc, #140]	; (110cc <z_time_slice+0xac>)
   1103e:	4824      	ldr	r0, [pc, #144]	; (110d0 <z_time_slice+0xb0>)
   11040:	228e      	movs	r2, #142	; 0x8e
   11042:	f003 fdff 	bl	14c44 <printk>
   11046:	218e      	movs	r1, #142	; 0x8e
   11048:	4820      	ldr	r0, [pc, #128]	; (110cc <z_time_slice+0xac>)
   1104a:	f003 fe81 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   1104e:	481e      	ldr	r0, [pc, #120]	; (110c8 <z_time_slice+0xa8>)
   11050:	f7ff fbf6 	bl	10840 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   11054:	4b1f      	ldr	r3, [pc, #124]	; (110d4 <z_time_slice+0xb4>)
   11056:	4a20      	ldr	r2, [pc, #128]	; (110d8 <z_time_slice+0xb8>)
   11058:	6898      	ldr	r0, [r3, #8]
   1105a:	6811      	ldr	r1, [r2, #0]
   1105c:	4288      	cmp	r0, r1
   1105e:	d113      	bne.n	11088 <z_time_slice+0x68>
			z_reset_time_slice();
   11060:	f7ff fe2e 	bl	10cc0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11064:	4818      	ldr	r0, [pc, #96]	; (110c8 <z_time_slice+0xa8>)
   11066:	f7ff fbdd 	bl	10824 <z_spin_unlock_valid>
   1106a:	b940      	cbnz	r0, 1107e <z_time_slice+0x5e>
   1106c:	4917      	ldr	r1, [pc, #92]	; (110cc <z_time_slice+0xac>)
   1106e:	4818      	ldr	r0, [pc, #96]	; (110d0 <z_time_slice+0xb0>)
   11070:	22b9      	movs	r2, #185	; 0xb9
   11072:	f003 fde7 	bl	14c44 <printk>
   11076:	21b9      	movs	r1, #185	; 0xb9
   11078:	4814      	ldr	r0, [pc, #80]	; (110cc <z_time_slice+0xac>)
   1107a:	f003 fe69 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   1107e:	f385 8811 	msr	BASEPRI, r5
   11082:	f3bf 8f6f 	isb	sy
}
   11086:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   11088:	2100      	movs	r1, #0
   1108a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1108c:	4a13      	ldr	r2, [pc, #76]	; (110dc <z_time_slice+0xbc>)
   1108e:	6812      	ldr	r2, [r2, #0]
   11090:	b1ba      	cbz	r2, 110c2 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   11092:	89c2      	ldrh	r2, [r0, #14]
   11094:	2a7f      	cmp	r2, #127	; 0x7f
   11096:	d814      	bhi.n	110c2 <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   11098:	7b42      	ldrb	r2, [r0, #13]
   1109a:	06d2      	lsls	r2, r2, #27
   1109c:	d111      	bne.n	110c2 <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1109e:	4a10      	ldr	r2, [pc, #64]	; (110e0 <z_time_slice+0xc0>)
   110a0:	f990 100e 	ldrsb.w	r1, [r0, #14]
   110a4:	6812      	ldr	r2, [r2, #0]
   110a6:	4291      	cmp	r1, r2
   110a8:	db0b      	blt.n	110c2 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   110aa:	4a0e      	ldr	r2, [pc, #56]	; (110e4 <z_time_slice+0xc4>)
   110ac:	4290      	cmp	r0, r2
   110ae:	d008      	beq.n	110c2 <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   110b0:	691a      	ldr	r2, [r3, #16]
   110b2:	42a2      	cmp	r2, r4
   110b4:	dc02      	bgt.n	110bc <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   110b6:	f7ff ff63 	bl	10f80 <move_thread_to_end_of_prio_q>
   110ba:	e7d1      	b.n	11060 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   110bc:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   110be:	611a      	str	r2, [r3, #16]
   110c0:	e7d0      	b.n	11064 <z_time_slice+0x44>
   110c2:	2200      	movs	r2, #0
   110c4:	e7fb      	b.n	110be <z_time_slice+0x9e>
   110c6:	bf00      	nop
   110c8:	20000a8c 	.word	0x20000a8c
   110cc:	00015bbf 	.word	0x00015bbf
   110d0:	00015be5 	.word	0x00015be5
   110d4:	20000a58 	.word	0x20000a58
   110d8:	20000a88 	.word	0x20000a88
   110dc:	20000a94 	.word	0x20000a94
   110e0:	20000a90 	.word	0x20000a90
   110e4:	20000170 	.word	0x20000170

000110e8 <ready_thread>:
{
   110e8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   110ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   110ee:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   110f0:	2a00      	cmp	r2, #0
   110f2:	7b43      	ldrb	r3, [r0, #13]
   110f4:	db38      	blt.n	11168 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   110f6:	06da      	lsls	r2, r3, #27
   110f8:	d136      	bne.n	11168 <ready_thread+0x80>
   110fa:	6982      	ldr	r2, [r0, #24]
   110fc:	2a00      	cmp	r2, #0
   110fe:	d133      	bne.n	11168 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   11100:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11104:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11106:	4b19      	ldr	r3, [pc, #100]	; (1116c <ready_thread+0x84>)
   11108:	4298      	cmp	r0, r3
   1110a:	d108      	bne.n	1111e <ready_thread+0x36>
   1110c:	4918      	ldr	r1, [pc, #96]	; (11170 <ready_thread+0x88>)
   1110e:	4819      	ldr	r0, [pc, #100]	; (11174 <ready_thread+0x8c>)
   11110:	22ba      	movs	r2, #186	; 0xba
   11112:	f003 fd97 	bl	14c44 <printk>
   11116:	21ba      	movs	r1, #186	; 0xba
   11118:	4815      	ldr	r0, [pc, #84]	; (11170 <ready_thread+0x88>)
   1111a:	f003 fe19 	bl	14d50 <assert_post_action>
	return list->head == list;
   1111e:	4a16      	ldr	r2, [pc, #88]	; (11178 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11120:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   11124:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11128:	42ab      	cmp	r3, r5
   1112a:	d018      	beq.n	1115e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1112c:	b1bb      	cbz	r3, 1115e <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   1112e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11132:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   11136:	428e      	cmp	r6, r1
   11138:	d00c      	beq.n	11154 <ready_thread+0x6c>
		return b2 - b1;
   1113a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1113c:	2900      	cmp	r1, #0
   1113e:	dd09      	ble.n	11154 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   11140:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11142:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11146:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11148:	605c      	str	r4, [r3, #4]
		update_cache(0);
   1114a:	2000      	movs	r0, #0
}
   1114c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   11150:	f7ff bee6 	b.w	10f20 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   11154:	4298      	cmp	r0, r3
   11156:	d002      	beq.n	1115e <ready_thread+0x76>
   11158:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1115a:	2b00      	cmp	r3, #0
   1115c:	d1e9      	bne.n	11132 <ready_thread+0x4a>
	node->prev = tail;
   1115e:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   11162:	6004      	str	r4, [r0, #0]
	list->tail = node;
   11164:	6254      	str	r4, [r2, #36]	; 0x24
}
   11166:	e7f0      	b.n	1114a <ready_thread+0x62>
}
   11168:	bd70      	pop	{r4, r5, r6, pc}
   1116a:	bf00      	nop
   1116c:	20000170 	.word	0x20000170
   11170:	00016d90 	.word	0x00016d90
   11174:	00015be5 	.word	0x00015be5
   11178:	20000a58 	.word	0x20000a58

0001117c <z_ready_thread>:
{
   1117c:	b538      	push	{r3, r4, r5, lr}
   1117e:	4604      	mov	r4, r0
	__asm__ volatile(
   11180:	f04f 0320 	mov.w	r3, #32
   11184:	f3ef 8511 	mrs	r5, BASEPRI
   11188:	f383 8812 	msr	BASEPRI_MAX, r3
   1118c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11190:	4812      	ldr	r0, [pc, #72]	; (111dc <z_ready_thread+0x60>)
   11192:	f7ff fb39 	bl	10808 <z_spin_lock_valid>
   11196:	b940      	cbnz	r0, 111aa <z_ready_thread+0x2e>
   11198:	4911      	ldr	r1, [pc, #68]	; (111e0 <z_ready_thread+0x64>)
   1119a:	4812      	ldr	r0, [pc, #72]	; (111e4 <z_ready_thread+0x68>)
   1119c:	228e      	movs	r2, #142	; 0x8e
   1119e:	f003 fd51 	bl	14c44 <printk>
   111a2:	218e      	movs	r1, #142	; 0x8e
   111a4:	480e      	ldr	r0, [pc, #56]	; (111e0 <z_ready_thread+0x64>)
   111a6:	f003 fdd3 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   111aa:	480c      	ldr	r0, [pc, #48]	; (111dc <z_ready_thread+0x60>)
   111ac:	f7ff fb48 	bl	10840 <z_spin_lock_set_owner>
			ready_thread(thread);
   111b0:	4620      	mov	r0, r4
   111b2:	f7ff ff99 	bl	110e8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   111b6:	4809      	ldr	r0, [pc, #36]	; (111dc <z_ready_thread+0x60>)
   111b8:	f7ff fb34 	bl	10824 <z_spin_unlock_valid>
   111bc:	b940      	cbnz	r0, 111d0 <z_ready_thread+0x54>
   111be:	4908      	ldr	r1, [pc, #32]	; (111e0 <z_ready_thread+0x64>)
   111c0:	4808      	ldr	r0, [pc, #32]	; (111e4 <z_ready_thread+0x68>)
   111c2:	22b9      	movs	r2, #185	; 0xb9
   111c4:	f003 fd3e 	bl	14c44 <printk>
   111c8:	21b9      	movs	r1, #185	; 0xb9
   111ca:	4805      	ldr	r0, [pc, #20]	; (111e0 <z_ready_thread+0x64>)
   111cc:	f003 fdc0 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   111d0:	f385 8811 	msr	BASEPRI, r5
   111d4:	f3bf 8f6f 	isb	sy
}
   111d8:	bd38      	pop	{r3, r4, r5, pc}
   111da:	bf00      	nop
   111dc:	20000a8c 	.word	0x20000a8c
   111e0:	00015bbf 	.word	0x00015bbf
   111e4:	00015be5 	.word	0x00015be5

000111e8 <z_sched_start>:
{
   111e8:	b538      	push	{r3, r4, r5, lr}
   111ea:	4604      	mov	r4, r0
	__asm__ volatile(
   111ec:	f04f 0320 	mov.w	r3, #32
   111f0:	f3ef 8511 	mrs	r5, BASEPRI
   111f4:	f383 8812 	msr	BASEPRI_MAX, r3
   111f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   111fc:	4818      	ldr	r0, [pc, #96]	; (11260 <z_sched_start+0x78>)
   111fe:	f7ff fb03 	bl	10808 <z_spin_lock_valid>
   11202:	b940      	cbnz	r0, 11216 <z_sched_start+0x2e>
   11204:	4917      	ldr	r1, [pc, #92]	; (11264 <z_sched_start+0x7c>)
   11206:	4818      	ldr	r0, [pc, #96]	; (11268 <z_sched_start+0x80>)
   11208:	228e      	movs	r2, #142	; 0x8e
   1120a:	f003 fd1b 	bl	14c44 <printk>
   1120e:	218e      	movs	r1, #142	; 0x8e
   11210:	4814      	ldr	r0, [pc, #80]	; (11264 <z_sched_start+0x7c>)
   11212:	f003 fd9d 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   11216:	4812      	ldr	r0, [pc, #72]	; (11260 <z_sched_start+0x78>)
   11218:	f7ff fb12 	bl	10840 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1121c:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   1121e:	075a      	lsls	r2, r3, #29
   11220:	d411      	bmi.n	11246 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11222:	480f      	ldr	r0, [pc, #60]	; (11260 <z_sched_start+0x78>)
   11224:	f7ff fafe 	bl	10824 <z_spin_unlock_valid>
   11228:	b940      	cbnz	r0, 1123c <z_sched_start+0x54>
   1122a:	490e      	ldr	r1, [pc, #56]	; (11264 <z_sched_start+0x7c>)
   1122c:	480e      	ldr	r0, [pc, #56]	; (11268 <z_sched_start+0x80>)
   1122e:	22b9      	movs	r2, #185	; 0xb9
   11230:	f003 fd08 	bl	14c44 <printk>
   11234:	21b9      	movs	r1, #185	; 0xb9
   11236:	480b      	ldr	r0, [pc, #44]	; (11264 <z_sched_start+0x7c>)
   11238:	f003 fd8a 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   1123c:	f385 8811 	msr	BASEPRI, r5
   11240:	f3bf 8f6f 	isb	sy
}
   11244:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11246:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1124a:	4620      	mov	r0, r4
   1124c:	7363      	strb	r3, [r4, #13]
   1124e:	f7ff ff4b 	bl	110e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11252:	4629      	mov	r1, r5
}
   11254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   11258:	4801      	ldr	r0, [pc, #4]	; (11260 <z_sched_start+0x78>)
   1125a:	f7ff bd9b 	b.w	10d94 <z_reschedule>
   1125e:	bf00      	nop
   11260:	20000a8c 	.word	0x20000a8c
   11264:	00015bbf 	.word	0x00015bbf
   11268:	00015be5 	.word	0x00015be5

0001126c <z_thread_timeout>:
{
   1126c:	b570      	push	{r4, r5, r6, lr}
   1126e:	4604      	mov	r4, r0
	__asm__ volatile(
   11270:	f04f 0320 	mov.w	r3, #32
   11274:	f3ef 8611 	mrs	r6, BASEPRI
   11278:	f383 8812 	msr	BASEPRI_MAX, r3
   1127c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11280:	481b      	ldr	r0, [pc, #108]	; (112f0 <z_thread_timeout+0x84>)
   11282:	f7ff fac1 	bl	10808 <z_spin_lock_valid>
   11286:	b940      	cbnz	r0, 1129a <z_thread_timeout+0x2e>
   11288:	491a      	ldr	r1, [pc, #104]	; (112f4 <z_thread_timeout+0x88>)
   1128a:	481b      	ldr	r0, [pc, #108]	; (112f8 <z_thread_timeout+0x8c>)
   1128c:	228e      	movs	r2, #142	; 0x8e
   1128e:	f003 fcd9 	bl	14c44 <printk>
   11292:	218e      	movs	r1, #142	; 0x8e
   11294:	4817      	ldr	r0, [pc, #92]	; (112f4 <z_thread_timeout+0x88>)
   11296:	f003 fd5b 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   1129a:	4815      	ldr	r0, [pc, #84]	; (112f0 <z_thread_timeout+0x84>)
   1129c:	f7ff fad0 	bl	10840 <z_spin_lock_set_owner>
		if (!killed) {
   112a0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   112a4:	f013 0f28 	tst.w	r3, #40	; 0x28
   112a8:	d110      	bne.n	112cc <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   112aa:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   112ae:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   112b2:	b113      	cbz	r3, 112ba <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   112b4:	4628      	mov	r0, r5
   112b6:	f7ff fe15 	bl	10ee4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   112ba:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   112be:	4628      	mov	r0, r5
   112c0:	f023 0314 	bic.w	r3, r3, #20
   112c4:	f804 3c0b 	strb.w	r3, [r4, #-11]
   112c8:	f7ff ff0e 	bl	110e8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   112cc:	4808      	ldr	r0, [pc, #32]	; (112f0 <z_thread_timeout+0x84>)
   112ce:	f7ff faa9 	bl	10824 <z_spin_unlock_valid>
   112d2:	b940      	cbnz	r0, 112e6 <z_thread_timeout+0x7a>
   112d4:	4907      	ldr	r1, [pc, #28]	; (112f4 <z_thread_timeout+0x88>)
   112d6:	4808      	ldr	r0, [pc, #32]	; (112f8 <z_thread_timeout+0x8c>)
   112d8:	22b9      	movs	r2, #185	; 0xb9
   112da:	f003 fcb3 	bl	14c44 <printk>
   112de:	21b9      	movs	r1, #185	; 0xb9
   112e0:	4804      	ldr	r0, [pc, #16]	; (112f4 <z_thread_timeout+0x88>)
   112e2:	f003 fd35 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   112e6:	f386 8811 	msr	BASEPRI, r6
   112ea:	f3bf 8f6f 	isb	sy
}
   112ee:	bd70      	pop	{r4, r5, r6, pc}
   112f0:	20000a8c 	.word	0x20000a8c
   112f4:	00015bbf 	.word	0x00015bbf
   112f8:	00015be5 	.word	0x00015be5

000112fc <unready_thread>:
{
   112fc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   112fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   11302:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   11304:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   11306:	7b43      	ldrb	r3, [r0, #13]
   11308:	da06      	bge.n	11318 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1130a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   1130e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11310:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11312:	4806      	ldr	r0, [pc, #24]	; (1132c <unready_thread+0x30>)
   11314:	f7ff fdc8 	bl	10ea8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   11318:	4b05      	ldr	r3, [pc, #20]	; (11330 <unready_thread+0x34>)
   1131a:	6898      	ldr	r0, [r3, #8]
   1131c:	1b03      	subs	r3, r0, r4
   1131e:	4258      	negs	r0, r3
   11320:	4158      	adcs	r0, r3
}
   11322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   11326:	f7ff bdfb 	b.w	10f20 <update_cache>
   1132a:	bf00      	nop
   1132c:	20000a78 	.word	0x20000a78
   11330:	20000a58 	.word	0x20000a58

00011334 <add_to_waitq_locked>:
{
   11334:	b538      	push	{r3, r4, r5, lr}
   11336:	4604      	mov	r4, r0
   11338:	460d      	mov	r5, r1
	unready_thread(thread);
   1133a:	f7ff ffdf 	bl	112fc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1133e:	7b63      	ldrb	r3, [r4, #13]
   11340:	f043 0302 	orr.w	r3, r3, #2
   11344:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   11346:	b1f5      	cbz	r5, 11386 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11348:	4b15      	ldr	r3, [pc, #84]	; (113a0 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1134a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1134c:	429c      	cmp	r4, r3
   1134e:	d108      	bne.n	11362 <add_to_waitq_locked+0x2e>
   11350:	4914      	ldr	r1, [pc, #80]	; (113a4 <add_to_waitq_locked+0x70>)
   11352:	4815      	ldr	r0, [pc, #84]	; (113a8 <add_to_waitq_locked+0x74>)
   11354:	22ba      	movs	r2, #186	; 0xba
   11356:	f003 fc75 	bl	14c44 <printk>
   1135a:	21ba      	movs	r1, #186	; 0xba
   1135c:	4811      	ldr	r0, [pc, #68]	; (113a4 <add_to_waitq_locked+0x70>)
   1135e:	f003 fcf7 	bl	14d50 <assert_post_action>
	return list->head == list;
   11362:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11364:	429d      	cmp	r5, r3
   11366:	d015      	beq.n	11394 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11368:	b1a3      	cbz	r3, 11394 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   1136a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1136e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   11372:	4291      	cmp	r1, r2
   11374:	d008      	beq.n	11388 <add_to_waitq_locked+0x54>
		return b2 - b1;
   11376:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   11378:	2a00      	cmp	r2, #0
   1137a:	dd05      	ble.n	11388 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   1137c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1137e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11382:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11384:	605c      	str	r4, [r3, #4]
}
   11386:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   11388:	686a      	ldr	r2, [r5, #4]
   1138a:	4293      	cmp	r3, r2
   1138c:	d002      	beq.n	11394 <add_to_waitq_locked+0x60>
   1138e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11390:	2b00      	cmp	r3, #0
   11392:	d1ec      	bne.n	1136e <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   11394:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   11396:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1139a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1139c:	606c      	str	r4, [r5, #4]
}
   1139e:	e7f2      	b.n	11386 <add_to_waitq_locked+0x52>
   113a0:	20000170 	.word	0x20000170
   113a4:	00016d90 	.word	0x00016d90
   113a8:	00015be5 	.word	0x00015be5

000113ac <pend>:
{
   113ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113b0:	4604      	mov	r4, r0
   113b2:	4688      	mov	r8, r1
   113b4:	4616      	mov	r6, r2
   113b6:	461d      	mov	r5, r3
	__asm__ volatile(
   113b8:	f04f 0320 	mov.w	r3, #32
   113bc:	f3ef 8711 	mrs	r7, BASEPRI
   113c0:	f383 8812 	msr	BASEPRI_MAX, r3
   113c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   113c8:	481a      	ldr	r0, [pc, #104]	; (11434 <pend+0x88>)
   113ca:	f7ff fa1d 	bl	10808 <z_spin_lock_valid>
   113ce:	b940      	cbnz	r0, 113e2 <pend+0x36>
   113d0:	4919      	ldr	r1, [pc, #100]	; (11438 <pend+0x8c>)
   113d2:	481a      	ldr	r0, [pc, #104]	; (1143c <pend+0x90>)
   113d4:	228e      	movs	r2, #142	; 0x8e
   113d6:	f003 fc35 	bl	14c44 <printk>
   113da:	218e      	movs	r1, #142	; 0x8e
   113dc:	4816      	ldr	r0, [pc, #88]	; (11438 <pend+0x8c>)
   113de:	f003 fcb7 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   113e2:	4814      	ldr	r0, [pc, #80]	; (11434 <pend+0x88>)
   113e4:	f7ff fa2c 	bl	10840 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   113e8:	4620      	mov	r0, r4
   113ea:	4641      	mov	r1, r8
   113ec:	f7ff ffa2 	bl	11334 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   113f0:	4810      	ldr	r0, [pc, #64]	; (11434 <pend+0x88>)
   113f2:	f7ff fa17 	bl	10824 <z_spin_unlock_valid>
   113f6:	b940      	cbnz	r0, 1140a <pend+0x5e>
   113f8:	490f      	ldr	r1, [pc, #60]	; (11438 <pend+0x8c>)
   113fa:	4810      	ldr	r0, [pc, #64]	; (1143c <pend+0x90>)
   113fc:	22b9      	movs	r2, #185	; 0xb9
   113fe:	f003 fc21 	bl	14c44 <printk>
   11402:	21b9      	movs	r1, #185	; 0xb9
   11404:	480c      	ldr	r0, [pc, #48]	; (11438 <pend+0x8c>)
   11406:	f003 fca3 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   1140a:	f387 8811 	msr	BASEPRI, r7
   1140e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11412:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   11416:	bf08      	it	eq
   11418:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1141c:	d008      	beq.n	11430 <pend+0x84>
   1141e:	4632      	mov	r2, r6
   11420:	462b      	mov	r3, r5
   11422:	f104 0018 	add.w	r0, r4, #24
   11426:	4906      	ldr	r1, [pc, #24]	; (11440 <pend+0x94>)
}
   11428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1142c:	f000 bbec 	b.w	11c08 <z_add_timeout>
   11430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11434:	20000a8c 	.word	0x20000a8c
   11438:	00015bbf 	.word	0x00015bbf
   1143c:	00015be5 	.word	0x00015be5
   11440:	0001126d 	.word	0x0001126d

00011444 <z_pend_curr>:
{
   11444:	b538      	push	{r3, r4, r5, lr}
   11446:	4605      	mov	r5, r0
	pending_current = _current;
   11448:	4b0d      	ldr	r3, [pc, #52]	; (11480 <z_pend_curr+0x3c>)
{
   1144a:	460c      	mov	r4, r1
	pending_current = _current;
   1144c:	6898      	ldr	r0, [r3, #8]
   1144e:	4b0d      	ldr	r3, [pc, #52]	; (11484 <z_pend_curr+0x40>)
{
   11450:	4611      	mov	r1, r2
	pending_current = _current;
   11452:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   11454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11458:	f7ff ffa8 	bl	113ac <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1145c:	4628      	mov	r0, r5
   1145e:	f7ff f9e1 	bl	10824 <z_spin_unlock_valid>
   11462:	b940      	cbnz	r0, 11476 <z_pend_curr+0x32>
   11464:	4908      	ldr	r1, [pc, #32]	; (11488 <z_pend_curr+0x44>)
   11466:	4809      	ldr	r0, [pc, #36]	; (1148c <z_pend_curr+0x48>)
   11468:	22d0      	movs	r2, #208	; 0xd0
   1146a:	f003 fbeb 	bl	14c44 <printk>
   1146e:	21d0      	movs	r1, #208	; 0xd0
   11470:	4805      	ldr	r0, [pc, #20]	; (11488 <z_pend_curr+0x44>)
   11472:	f003 fc6d 	bl	14d50 <assert_post_action>
   11476:	4620      	mov	r0, r4
}
   11478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1147c:	f7fc bb48 	b.w	db10 <arch_swap>
   11480:	20000a58 	.word	0x20000a58
   11484:	20000a88 	.word	0x20000a88
   11488:	00015bbf 	.word	0x00015bbf
   1148c:	00015be5 	.word	0x00015be5

00011490 <z_set_prio>:
{
   11490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11492:	4604      	mov	r4, r0
   11494:	460d      	mov	r5, r1
	__asm__ volatile(
   11496:	f04f 0320 	mov.w	r3, #32
   1149a:	f3ef 8611 	mrs	r6, BASEPRI
   1149e:	f383 8812 	msr	BASEPRI_MAX, r3
   114a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114a6:	4834      	ldr	r0, [pc, #208]	; (11578 <z_set_prio+0xe8>)
   114a8:	f7ff f9ae 	bl	10808 <z_spin_lock_valid>
   114ac:	b940      	cbnz	r0, 114c0 <z_set_prio+0x30>
   114ae:	4933      	ldr	r1, [pc, #204]	; (1157c <z_set_prio+0xec>)
   114b0:	4833      	ldr	r0, [pc, #204]	; (11580 <z_set_prio+0xf0>)
   114b2:	228e      	movs	r2, #142	; 0x8e
   114b4:	f003 fbc6 	bl	14c44 <printk>
   114b8:	218e      	movs	r1, #142	; 0x8e
   114ba:	4830      	ldr	r0, [pc, #192]	; (1157c <z_set_prio+0xec>)
   114bc:	f003 fc48 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   114c0:	482d      	ldr	r0, [pc, #180]	; (11578 <z_set_prio+0xe8>)
   114c2:	f7ff f9bd 	bl	10840 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   114c6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   114c8:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   114ca:	06da      	lsls	r2, r3, #27
   114cc:	d151      	bne.n	11572 <z_set_prio+0xe2>
		if (need_sched) {
   114ce:	69a2      	ldr	r2, [r4, #24]
   114d0:	2a00      	cmp	r2, #0
   114d2:	d14e      	bne.n	11572 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   114d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   114d8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   114da:	4621      	mov	r1, r4
   114dc:	4829      	ldr	r0, [pc, #164]	; (11584 <z_set_prio+0xf4>)
   114de:	f7ff fce3 	bl	10ea8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   114e2:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   114e4:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   114e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   114ea:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   114ec:	4b26      	ldr	r3, [pc, #152]	; (11588 <z_set_prio+0xf8>)
   114ee:	429c      	cmp	r4, r3
   114f0:	d108      	bne.n	11504 <z_set_prio+0x74>
   114f2:	4926      	ldr	r1, [pc, #152]	; (1158c <z_set_prio+0xfc>)
   114f4:	4822      	ldr	r0, [pc, #136]	; (11580 <z_set_prio+0xf0>)
   114f6:	22ba      	movs	r2, #186	; 0xba
   114f8:	f003 fba4 	bl	14c44 <printk>
   114fc:	21ba      	movs	r1, #186	; 0xba
   114fe:	4823      	ldr	r0, [pc, #140]	; (1158c <z_set_prio+0xfc>)
   11500:	f003 fc26 	bl	14d50 <assert_post_action>
	return list->head == list;
   11504:	4a22      	ldr	r2, [pc, #136]	; (11590 <z_set_prio+0x100>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11506:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   1150a:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1150e:	42ab      	cmp	r3, r5
   11510:	d02a      	beq.n	11568 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11512:	b34b      	cbz	r3, 11568 <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   11514:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11518:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1151c:	428f      	cmp	r7, r1
   1151e:	d01e      	beq.n	1155e <z_set_prio+0xce>
		return b2 - b1;
   11520:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   11522:	2900      	cmp	r1, #0
   11524:	dd1b      	ble.n	1155e <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   11526:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11528:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1152c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1152e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   11530:	2001      	movs	r0, #1
   11532:	f7ff fcf5 	bl	10f20 <update_cache>
   11536:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11538:	480f      	ldr	r0, [pc, #60]	; (11578 <z_set_prio+0xe8>)
   1153a:	f7ff f973 	bl	10824 <z_spin_unlock_valid>
   1153e:	b940      	cbnz	r0, 11552 <z_set_prio+0xc2>
   11540:	490e      	ldr	r1, [pc, #56]	; (1157c <z_set_prio+0xec>)
   11542:	480f      	ldr	r0, [pc, #60]	; (11580 <z_set_prio+0xf0>)
   11544:	22b9      	movs	r2, #185	; 0xb9
   11546:	f003 fb7d 	bl	14c44 <printk>
   1154a:	21b9      	movs	r1, #185	; 0xb9
   1154c:	480b      	ldr	r0, [pc, #44]	; (1157c <z_set_prio+0xec>)
   1154e:	f003 fbff 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11552:	f386 8811 	msr	BASEPRI, r6
   11556:	f3bf 8f6f 	isb	sy
}
   1155a:	4620      	mov	r0, r4
   1155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1155e:	4283      	cmp	r3, r0
   11560:	d002      	beq.n	11568 <z_set_prio+0xd8>
   11562:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11564:	2b00      	cmp	r3, #0
   11566:	d1d7      	bne.n	11518 <z_set_prio+0x88>
	node->prev = tail;
   11568:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   1156c:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1156e:	6254      	str	r4, [r2, #36]	; 0x24
}
   11570:	e7de      	b.n	11530 <z_set_prio+0xa0>
			thread->base.prio = prio;
   11572:	73a5      	strb	r5, [r4, #14]
   11574:	2400      	movs	r4, #0
   11576:	e7df      	b.n	11538 <z_set_prio+0xa8>
   11578:	20000a8c 	.word	0x20000a8c
   1157c:	00015bbf 	.word	0x00015bbf
   11580:	00015be5 	.word	0x00015be5
   11584:	20000a78 	.word	0x20000a78
   11588:	20000170 	.word	0x20000170
   1158c:	00016d90 	.word	0x00016d90
   11590:	20000a58 	.word	0x20000a58

00011594 <z_impl_k_thread_suspend>:
{
   11594:	b570      	push	{r4, r5, r6, lr}
   11596:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   11598:	3018      	adds	r0, #24
   1159a:	f000 fbe3 	bl	11d64 <z_abort_timeout>
	__asm__ volatile(
   1159e:	f04f 0320 	mov.w	r3, #32
   115a2:	f3ef 8611 	mrs	r6, BASEPRI
   115a6:	f383 8812 	msr	BASEPRI_MAX, r3
   115aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   115ae:	4820      	ldr	r0, [pc, #128]	; (11630 <z_impl_k_thread_suspend+0x9c>)
   115b0:	f7ff f92a 	bl	10808 <z_spin_lock_valid>
   115b4:	b940      	cbnz	r0, 115c8 <z_impl_k_thread_suspend+0x34>
   115b6:	491f      	ldr	r1, [pc, #124]	; (11634 <z_impl_k_thread_suspend+0xa0>)
   115b8:	481f      	ldr	r0, [pc, #124]	; (11638 <z_impl_k_thread_suspend+0xa4>)
   115ba:	228e      	movs	r2, #142	; 0x8e
   115bc:	f003 fb42 	bl	14c44 <printk>
   115c0:	218e      	movs	r1, #142	; 0x8e
   115c2:	481c      	ldr	r0, [pc, #112]	; (11634 <z_impl_k_thread_suspend+0xa0>)
   115c4:	f003 fbc4 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   115c8:	4819      	ldr	r0, [pc, #100]	; (11630 <z_impl_k_thread_suspend+0x9c>)
   115ca:	f7ff f939 	bl	10840 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   115ce:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   115d2:	7b63      	ldrb	r3, [r4, #13]
   115d4:	2a00      	cmp	r2, #0
   115d6:	da06      	bge.n	115e6 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   115d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   115dc:	4621      	mov	r1, r4
   115de:	4817      	ldr	r0, [pc, #92]	; (1163c <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   115e0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   115e2:	f7ff fc61 	bl	10ea8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   115e6:	4d16      	ldr	r5, [pc, #88]	; (11640 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   115e8:	7b63      	ldrb	r3, [r4, #13]
   115ea:	68a8      	ldr	r0, [r5, #8]
   115ec:	f043 0310 	orr.w	r3, r3, #16
   115f0:	7363      	strb	r3, [r4, #13]
   115f2:	1b03      	subs	r3, r0, r4
   115f4:	4258      	negs	r0, r3
   115f6:	4158      	adcs	r0, r3
   115f8:	f7ff fc92 	bl	10f20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   115fc:	480c      	ldr	r0, [pc, #48]	; (11630 <z_impl_k_thread_suspend+0x9c>)
   115fe:	f7ff f911 	bl	10824 <z_spin_unlock_valid>
   11602:	b940      	cbnz	r0, 11616 <z_impl_k_thread_suspend+0x82>
   11604:	490b      	ldr	r1, [pc, #44]	; (11634 <z_impl_k_thread_suspend+0xa0>)
   11606:	480c      	ldr	r0, [pc, #48]	; (11638 <z_impl_k_thread_suspend+0xa4>)
   11608:	22b9      	movs	r2, #185	; 0xb9
   1160a:	f003 fb1b 	bl	14c44 <printk>
   1160e:	21b9      	movs	r1, #185	; 0xb9
   11610:	4808      	ldr	r0, [pc, #32]	; (11634 <z_impl_k_thread_suspend+0xa0>)
   11612:	f003 fb9d 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11616:	f386 8811 	msr	BASEPRI, r6
   1161a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1161e:	68ab      	ldr	r3, [r5, #8]
   11620:	42a3      	cmp	r3, r4
   11622:	d103      	bne.n	1162c <z_impl_k_thread_suspend+0x98>
}
   11624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   11628:	f003 bed3 	b.w	153d2 <z_reschedule_unlocked>
}
   1162c:	bd70      	pop	{r4, r5, r6, pc}
   1162e:	bf00      	nop
   11630:	20000a8c 	.word	0x20000a8c
   11634:	00015bbf 	.word	0x00015bbf
   11638:	00015be5 	.word	0x00015be5
   1163c:	20000a78 	.word	0x20000a78
   11640:	20000a58 	.word	0x20000a58

00011644 <k_sched_unlock>:
{
   11644:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11646:	f04f 0320 	mov.w	r3, #32
   1164a:	f3ef 8511 	mrs	r5, BASEPRI
   1164e:	f383 8812 	msr	BASEPRI_MAX, r3
   11652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11656:	4824      	ldr	r0, [pc, #144]	; (116e8 <k_sched_unlock+0xa4>)
   11658:	f7ff f8d6 	bl	10808 <z_spin_lock_valid>
   1165c:	b940      	cbnz	r0, 11670 <k_sched_unlock+0x2c>
   1165e:	4923      	ldr	r1, [pc, #140]	; (116ec <k_sched_unlock+0xa8>)
   11660:	4823      	ldr	r0, [pc, #140]	; (116f0 <k_sched_unlock+0xac>)
   11662:	228e      	movs	r2, #142	; 0x8e
   11664:	f003 faee 	bl	14c44 <printk>
   11668:	218e      	movs	r1, #142	; 0x8e
   1166a:	4820      	ldr	r0, [pc, #128]	; (116ec <k_sched_unlock+0xa8>)
   1166c:	f003 fb70 	bl	14d50 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   11670:	4c20      	ldr	r4, [pc, #128]	; (116f4 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   11672:	481d      	ldr	r0, [pc, #116]	; (116e8 <k_sched_unlock+0xa4>)
   11674:	f7ff f8e4 	bl	10840 <z_spin_lock_set_owner>
   11678:	68a3      	ldr	r3, [r4, #8]
   1167a:	7bdb      	ldrb	r3, [r3, #15]
   1167c:	b953      	cbnz	r3, 11694 <k_sched_unlock+0x50>
   1167e:	491e      	ldr	r1, [pc, #120]	; (116f8 <k_sched_unlock+0xb4>)
   11680:	481b      	ldr	r0, [pc, #108]	; (116f0 <k_sched_unlock+0xac>)
   11682:	f240 3285 	movw	r2, #901	; 0x385
   11686:	f003 fadd 	bl	14c44 <printk>
   1168a:	f240 3185 	movw	r1, #901	; 0x385
   1168e:	481a      	ldr	r0, [pc, #104]	; (116f8 <k_sched_unlock+0xb4>)
   11690:	f003 fb5e 	bl	14d50 <assert_post_action>
   11694:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   11698:	b153      	cbz	r3, 116b0 <k_sched_unlock+0x6c>
   1169a:	4917      	ldr	r1, [pc, #92]	; (116f8 <k_sched_unlock+0xb4>)
   1169c:	4814      	ldr	r0, [pc, #80]	; (116f0 <k_sched_unlock+0xac>)
   1169e:	f240 3286 	movw	r2, #902	; 0x386
   116a2:	f003 facf 	bl	14c44 <printk>
   116a6:	f240 3186 	movw	r1, #902	; 0x386
   116aa:	4813      	ldr	r0, [pc, #76]	; (116f8 <k_sched_unlock+0xb4>)
   116ac:	f003 fb50 	bl	14d50 <assert_post_action>
		++_current->base.sched_locked;
   116b0:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   116b2:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   116b4:	7bd3      	ldrb	r3, [r2, #15]
   116b6:	3301      	adds	r3, #1
   116b8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   116ba:	f7ff fc31 	bl	10f20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   116be:	480a      	ldr	r0, [pc, #40]	; (116e8 <k_sched_unlock+0xa4>)
   116c0:	f7ff f8b0 	bl	10824 <z_spin_unlock_valid>
   116c4:	b940      	cbnz	r0, 116d8 <k_sched_unlock+0x94>
   116c6:	4909      	ldr	r1, [pc, #36]	; (116ec <k_sched_unlock+0xa8>)
   116c8:	4809      	ldr	r0, [pc, #36]	; (116f0 <k_sched_unlock+0xac>)
   116ca:	22b9      	movs	r2, #185	; 0xb9
   116cc:	f003 faba 	bl	14c44 <printk>
   116d0:	21b9      	movs	r1, #185	; 0xb9
   116d2:	4806      	ldr	r0, [pc, #24]	; (116ec <k_sched_unlock+0xa8>)
   116d4:	f003 fb3c 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   116d8:	f385 8811 	msr	BASEPRI, r5
   116dc:	f3bf 8f6f 	isb	sy
}
   116e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   116e4:	f003 be75 	b.w	153d2 <z_reschedule_unlocked>
   116e8:	20000a8c 	.word	0x20000a8c
   116ec:	00015bbf 	.word	0x00015bbf
   116f0:	00015be5 	.word	0x00015be5
   116f4:	20000a58 	.word	0x20000a58
   116f8:	00016d90 	.word	0x00016d90

000116fc <z_unpend_first_thread>:
{
   116fc:	b538      	push	{r3, r4, r5, lr}
   116fe:	4604      	mov	r4, r0
	__asm__ volatile(
   11700:	f04f 0320 	mov.w	r3, #32
   11704:	f3ef 8511 	mrs	r5, BASEPRI
   11708:	f383 8812 	msr	BASEPRI_MAX, r3
   1170c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11710:	4816      	ldr	r0, [pc, #88]	; (1176c <z_unpend_first_thread+0x70>)
   11712:	f7ff f879 	bl	10808 <z_spin_lock_valid>
   11716:	b940      	cbnz	r0, 1172a <z_unpend_first_thread+0x2e>
   11718:	4915      	ldr	r1, [pc, #84]	; (11770 <z_unpend_first_thread+0x74>)
   1171a:	4816      	ldr	r0, [pc, #88]	; (11774 <z_unpend_first_thread+0x78>)
   1171c:	228e      	movs	r2, #142	; 0x8e
   1171e:	f003 fa91 	bl	14c44 <printk>
   11722:	218e      	movs	r1, #142	; 0x8e
   11724:	4812      	ldr	r0, [pc, #72]	; (11770 <z_unpend_first_thread+0x74>)
   11726:	f003 fb13 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   1172a:	4810      	ldr	r0, [pc, #64]	; (1176c <z_unpend_first_thread+0x70>)
   1172c:	f7ff f888 	bl	10840 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   11730:	4620      	mov	r0, r4
   11732:	f003 fe58 	bl	153e6 <z_priq_dumb_best>
		if (thread != NULL) {
   11736:	4604      	mov	r4, r0
   11738:	b128      	cbz	r0, 11746 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   1173a:	f7ff fbd3 	bl	10ee4 <unpend_thread_no_timeout>
   1173e:	f104 0018 	add.w	r0, r4, #24
   11742:	f000 fb0f 	bl	11d64 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11746:	4809      	ldr	r0, [pc, #36]	; (1176c <z_unpend_first_thread+0x70>)
   11748:	f7ff f86c 	bl	10824 <z_spin_unlock_valid>
   1174c:	b940      	cbnz	r0, 11760 <z_unpend_first_thread+0x64>
   1174e:	4908      	ldr	r1, [pc, #32]	; (11770 <z_unpend_first_thread+0x74>)
   11750:	4808      	ldr	r0, [pc, #32]	; (11774 <z_unpend_first_thread+0x78>)
   11752:	22b9      	movs	r2, #185	; 0xb9
   11754:	f003 fa76 	bl	14c44 <printk>
   11758:	21b9      	movs	r1, #185	; 0xb9
   1175a:	4805      	ldr	r0, [pc, #20]	; (11770 <z_unpend_first_thread+0x74>)
   1175c:	f003 faf8 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11760:	f385 8811 	msr	BASEPRI, r5
   11764:	f3bf 8f6f 	isb	sy
}
   11768:	4620      	mov	r0, r4
   1176a:	bd38      	pop	{r3, r4, r5, pc}
   1176c:	20000a8c 	.word	0x20000a8c
   11770:	00015bbf 	.word	0x00015bbf
   11774:	00015be5 	.word	0x00015be5

00011778 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   11778:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1177a:	4b04      	ldr	r3, [pc, #16]	; (1178c <z_sched_init+0x14>)
   1177c:	4608      	mov	r0, r1
   1177e:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   11782:	e9c3 2208 	strd	r2, r2, [r3, #32]
   11786:	f7ff bab1 	b.w	10cec <k_sched_time_slice_set>
   1178a:	bf00      	nop
   1178c:	20000a58 	.word	0x20000a58

00011790 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   11790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11792:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   11796:	b153      	cbz	r3, 117ae <z_impl_k_yield+0x1e>
   11798:	4938      	ldr	r1, [pc, #224]	; (1187c <z_impl_k_yield+0xec>)
   1179a:	4839      	ldr	r0, [pc, #228]	; (11880 <z_impl_k_yield+0xf0>)
   1179c:	f240 42dc 	movw	r2, #1244	; 0x4dc
   117a0:	f003 fa50 	bl	14c44 <printk>
   117a4:	f240 41dc 	movw	r1, #1244	; 0x4dc
   117a8:	4834      	ldr	r0, [pc, #208]	; (1187c <z_impl_k_yield+0xec>)
   117aa:	f003 fad1 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   117ae:	f04f 0320 	mov.w	r3, #32
   117b2:	f3ef 8611 	mrs	r6, BASEPRI
   117b6:	f383 8812 	msr	BASEPRI_MAX, r3
   117ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   117be:	4831      	ldr	r0, [pc, #196]	; (11884 <z_impl_k_yield+0xf4>)
   117c0:	f7ff f822 	bl	10808 <z_spin_lock_valid>
   117c4:	b940      	cbnz	r0, 117d8 <z_impl_k_yield+0x48>
   117c6:	4930      	ldr	r1, [pc, #192]	; (11888 <z_impl_k_yield+0xf8>)
   117c8:	482d      	ldr	r0, [pc, #180]	; (11880 <z_impl_k_yield+0xf0>)
   117ca:	228e      	movs	r2, #142	; 0x8e
   117cc:	f003 fa3a 	bl	14c44 <printk>
   117d0:	218e      	movs	r1, #142	; 0x8e
   117d2:	482d      	ldr	r0, [pc, #180]	; (11888 <z_impl_k_yield+0xf8>)
   117d4:	f003 fabc 	bl	14d50 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   117d8:	4d2c      	ldr	r5, [pc, #176]	; (1188c <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   117da:	482a      	ldr	r0, [pc, #168]	; (11884 <z_impl_k_yield+0xf4>)
   117dc:	f7ff f830 	bl	10840 <z_spin_lock_set_owner>
   117e0:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   117e2:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   117e6:	7b4b      	ldrb	r3, [r1, #13]
   117e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   117ec:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   117ee:	f7ff fb5b 	bl	10ea8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   117f2:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   117f4:	7b63      	ldrb	r3, [r4, #13]
   117f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   117fa:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   117fc:	4b24      	ldr	r3, [pc, #144]	; (11890 <z_impl_k_yield+0x100>)
   117fe:	429c      	cmp	r4, r3
   11800:	d108      	bne.n	11814 <z_impl_k_yield+0x84>
   11802:	491e      	ldr	r1, [pc, #120]	; (1187c <z_impl_k_yield+0xec>)
   11804:	481e      	ldr	r0, [pc, #120]	; (11880 <z_impl_k_yield+0xf0>)
   11806:	22ba      	movs	r2, #186	; 0xba
   11808:	f003 fa1c 	bl	14c44 <printk>
   1180c:	21ba      	movs	r1, #186	; 0xba
   1180e:	481b      	ldr	r0, [pc, #108]	; (1187c <z_impl_k_yield+0xec>)
   11810:	f003 fa9e 	bl	14d50 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   11814:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11818:	481e      	ldr	r0, [pc, #120]	; (11894 <z_impl_k_yield+0x104>)
   1181a:	4283      	cmp	r3, r0
   1181c:	d028      	beq.n	11870 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1181e:	b33b      	cbz	r3, 11870 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   11820:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11824:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   11828:	4297      	cmp	r7, r2
   1182a:	d01c      	beq.n	11866 <z_impl_k_yield+0xd6>
		return b2 - b1;
   1182c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1182e:	2a00      	cmp	r2, #0
   11830:	dd19      	ble.n	11866 <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   11832:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11834:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11838:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1183a:	605c      	str	r4, [r3, #4]
	update_cache(1);
   1183c:	2001      	movs	r0, #1
   1183e:	f7ff fb6f 	bl	10f20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11842:	4810      	ldr	r0, [pc, #64]	; (11884 <z_impl_k_yield+0xf4>)
   11844:	f7fe ffee 	bl	10824 <z_spin_unlock_valid>
   11848:	b940      	cbnz	r0, 1185c <z_impl_k_yield+0xcc>
   1184a:	490f      	ldr	r1, [pc, #60]	; (11888 <z_impl_k_yield+0xf8>)
   1184c:	480c      	ldr	r0, [pc, #48]	; (11880 <z_impl_k_yield+0xf0>)
   1184e:	22d0      	movs	r2, #208	; 0xd0
   11850:	f003 f9f8 	bl	14c44 <printk>
   11854:	21d0      	movs	r1, #208	; 0xd0
   11856:	480c      	ldr	r0, [pc, #48]	; (11888 <z_impl_k_yield+0xf8>)
   11858:	f003 fa7a 	bl	14d50 <assert_post_action>
   1185c:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1185e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11862:	f7fc b955 	b.w	db10 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   11866:	428b      	cmp	r3, r1
   11868:	d002      	beq.n	11870 <z_impl_k_yield+0xe0>
   1186a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1186c:	2b00      	cmp	r3, #0
   1186e:	d1d9      	bne.n	11824 <z_impl_k_yield+0x94>
	node->prev = tail;
   11870:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   11874:	600c      	str	r4, [r1, #0]
	list->tail = node;
   11876:	626c      	str	r4, [r5, #36]	; 0x24
}
   11878:	e7e0      	b.n	1183c <z_impl_k_yield+0xac>
   1187a:	bf00      	nop
   1187c:	00016d90 	.word	0x00016d90
   11880:	00015be5 	.word	0x00015be5
   11884:	20000a8c 	.word	0x20000a8c
   11888:	00015bbf 	.word	0x00015bbf
   1188c:	20000a58 	.word	0x20000a58
   11890:	20000170 	.word	0x20000170
   11894:	20000a78 	.word	0x20000a78

00011898 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   11898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1189c:	4605      	mov	r5, r0
   1189e:	460e      	mov	r6, r1
   118a0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   118a4:	b153      	cbz	r3, 118bc <z_tick_sleep+0x24>
   118a6:	493a      	ldr	r1, [pc, #232]	; (11990 <z_tick_sleep+0xf8>)
   118a8:	483a      	ldr	r0, [pc, #232]	; (11994 <z_tick_sleep+0xfc>)
   118aa:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
   118ae:	f003 f9c9 	bl	14c44 <printk>
   118b2:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   118b6:	4836      	ldr	r0, [pc, #216]	; (11990 <z_tick_sleep+0xf8>)
   118b8:	f003 fa4a 	bl	14d50 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   118bc:	ea55 0306 	orrs.w	r3, r5, r6
   118c0:	d103      	bne.n	118ca <z_tick_sleep+0x32>
	z_impl_k_yield();
   118c2:	f7ff ff65 	bl	11790 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   118c6:	2000      	movs	r0, #0
   118c8:	e05f      	b.n	1198a <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   118ca:	f06f 0401 	mvn.w	r4, #1
   118ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   118d2:	1b64      	subs	r4, r4, r5
   118d4:	eb63 0306 	sbc.w	r3, r3, r6
   118d8:	2c01      	cmp	r4, #1
   118da:	f173 0300 	sbcs.w	r3, r3, #0
   118de:	da02      	bge.n	118e6 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   118e0:	f003 fd87 	bl	153f2 <sys_clock_tick_get_32>
   118e4:	1944      	adds	r4, r0, r5
   118e6:	f04f 0320 	mov.w	r3, #32
   118ea:	f3ef 8811 	mrs	r8, BASEPRI
   118ee:	f383 8812 	msr	BASEPRI_MAX, r3
   118f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   118f6:	4828      	ldr	r0, [pc, #160]	; (11998 <z_tick_sleep+0x100>)
   118f8:	f7fe ff86 	bl	10808 <z_spin_lock_valid>
   118fc:	b940      	cbnz	r0, 11910 <z_tick_sleep+0x78>
   118fe:	4927      	ldr	r1, [pc, #156]	; (1199c <z_tick_sleep+0x104>)
   11900:	4824      	ldr	r0, [pc, #144]	; (11994 <z_tick_sleep+0xfc>)
   11902:	228e      	movs	r2, #142	; 0x8e
   11904:	f003 f99e 	bl	14c44 <printk>
   11908:	218e      	movs	r1, #142	; 0x8e
   1190a:	4824      	ldr	r0, [pc, #144]	; (1199c <z_tick_sleep+0x104>)
   1190c:	f003 fa20 	bl	14d50 <assert_post_action>
	pending_current = _current;
   11910:	4f23      	ldr	r7, [pc, #140]	; (119a0 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   11912:	4821      	ldr	r0, [pc, #132]	; (11998 <z_tick_sleep+0x100>)
   11914:	f7fe ff94 	bl	10840 <z_spin_lock_set_owner>
   11918:	68b8      	ldr	r0, [r7, #8]
   1191a:	4b22      	ldr	r3, [pc, #136]	; (119a4 <z_tick_sleep+0x10c>)
   1191c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1191e:	f7ff fced 	bl	112fc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   11922:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11924:	462a      	mov	r2, r5
   11926:	4633      	mov	r3, r6
   11928:	3018      	adds	r0, #24
   1192a:	491f      	ldr	r1, [pc, #124]	; (119a8 <z_tick_sleep+0x110>)
   1192c:	f000 f96c 	bl	11c08 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   11930:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11932:	4819      	ldr	r0, [pc, #100]	; (11998 <z_tick_sleep+0x100>)
   11934:	7b53      	ldrb	r3, [r2, #13]
   11936:	f043 0310 	orr.w	r3, r3, #16
   1193a:	7353      	strb	r3, [r2, #13]
   1193c:	f7fe ff72 	bl	10824 <z_spin_unlock_valid>
   11940:	b940      	cbnz	r0, 11954 <z_tick_sleep+0xbc>
   11942:	4916      	ldr	r1, [pc, #88]	; (1199c <z_tick_sleep+0x104>)
   11944:	4813      	ldr	r0, [pc, #76]	; (11994 <z_tick_sleep+0xfc>)
   11946:	22d0      	movs	r2, #208	; 0xd0
   11948:	f003 f97c 	bl	14c44 <printk>
   1194c:	21d0      	movs	r1, #208	; 0xd0
   1194e:	4813      	ldr	r0, [pc, #76]	; (1199c <z_tick_sleep+0x104>)
   11950:	f003 f9fe 	bl	14d50 <assert_post_action>
   11954:	4640      	mov	r0, r8
   11956:	f7fc f8db 	bl	db10 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1195a:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1195c:	7b5b      	ldrb	r3, [r3, #13]
   1195e:	06db      	lsls	r3, r3, #27
   11960:	d50a      	bpl.n	11978 <z_tick_sleep+0xe0>
   11962:	490b      	ldr	r1, [pc, #44]	; (11990 <z_tick_sleep+0xf8>)
   11964:	480b      	ldr	r0, [pc, #44]	; (11994 <z_tick_sleep+0xfc>)
   11966:	f240 5219 	movw	r2, #1305	; 0x519
   1196a:	f003 f96b 	bl	14c44 <printk>
   1196e:	f240 5119 	movw	r1, #1305	; 0x519
   11972:	4807      	ldr	r0, [pc, #28]	; (11990 <z_tick_sleep+0xf8>)
   11974:	f003 f9ec 	bl	14d50 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   11978:	f003 fd3b 	bl	153f2 <sys_clock_tick_get_32>
   1197c:	1a20      	subs	r0, r4, r0
   1197e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   11982:	2801      	cmp	r0, #1
   11984:	f173 0300 	sbcs.w	r3, r3, #0
   11988:	db9d      	blt.n	118c6 <z_tick_sleep+0x2e>
}
   1198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1198e:	bf00      	nop
   11990:	00016d90 	.word	0x00016d90
   11994:	00015be5 	.word	0x00015be5
   11998:	20000a8c 	.word	0x20000a8c
   1199c:	00015bbf 	.word	0x00015bbf
   119a0:	20000a58 	.word	0x20000a58
   119a4:	20000a88 	.word	0x20000a88
   119a8:	0001126d 	.word	0x0001126d

000119ac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   119ac:	b538      	push	{r3, r4, r5, lr}
   119ae:	4605      	mov	r5, r0
   119b0:	460c      	mov	r4, r1
   119b2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   119b6:	b153      	cbz	r3, 119ce <z_impl_k_sleep+0x22>
   119b8:	4911      	ldr	r1, [pc, #68]	; (11a00 <z_impl_k_sleep+0x54>)
   119ba:	4812      	ldr	r0, [pc, #72]	; (11a04 <z_impl_k_sleep+0x58>)
   119bc:	f44f 62a5 	mov.w	r2, #1320	; 0x528
   119c0:	f003 f940 	bl	14c44 <printk>
   119c4:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   119c8:	480d      	ldr	r0, [pc, #52]	; (11a00 <z_impl_k_sleep+0x54>)
   119ca:	f003 f9c1 	bl	14d50 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   119ce:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   119d2:	bf08      	it	eq
   119d4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   119d8:	d106      	bne.n	119e8 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   119da:	4b0b      	ldr	r3, [pc, #44]	; (11a08 <z_impl_k_sleep+0x5c>)
   119dc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   119de:	f7ff fdd9 	bl	11594 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   119e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   119e6:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   119e8:	4628      	mov	r0, r5
   119ea:	4621      	mov	r1, r4
   119ec:	f7ff ff54 	bl	11898 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   119f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   119f4:	fb80 0303 	smull	r0, r3, r0, r3
   119f8:	0bc0      	lsrs	r0, r0, #15
   119fa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   119fe:	e7f2      	b.n	119e6 <z_impl_k_sleep+0x3a>
   11a00:	00016d90 	.word	0x00016d90
   11a04:	00015be5 	.word	0x00015be5
   11a08:	20000a58 	.word	0x20000a58

00011a0c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   11a0c:	4b01      	ldr	r3, [pc, #4]	; (11a14 <z_impl_z_current_get+0x8>)
   11a0e:	6898      	ldr	r0, [r3, #8]
   11a10:	4770      	bx	lr
   11a12:	bf00      	nop
   11a14:	20000a58 	.word	0x20000a58

00011a18 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   11a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a1c:	4604      	mov	r4, r0
   11a1e:	f04f 0320 	mov.w	r3, #32
   11a22:	f3ef 8611 	mrs	r6, BASEPRI
   11a26:	f383 8812 	msr	BASEPRI_MAX, r3
   11a2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11a2e:	483e      	ldr	r0, [pc, #248]	; (11b28 <z_thread_abort+0x110>)
   11a30:	f7fe feea 	bl	10808 <z_spin_lock_valid>
   11a34:	b940      	cbnz	r0, 11a48 <z_thread_abort+0x30>
   11a36:	493d      	ldr	r1, [pc, #244]	; (11b2c <z_thread_abort+0x114>)
   11a38:	483d      	ldr	r0, [pc, #244]	; (11b30 <z_thread_abort+0x118>)
   11a3a:	228e      	movs	r2, #142	; 0x8e
   11a3c:	f003 f902 	bl	14c44 <printk>
   11a40:	218e      	movs	r1, #142	; 0x8e
   11a42:	483a      	ldr	r0, [pc, #232]	; (11b2c <z_thread_abort+0x114>)
   11a44:	f003 f984 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   11a48:	4837      	ldr	r0, [pc, #220]	; (11b28 <z_thread_abort+0x110>)
   11a4a:	f7fe fef9 	bl	10840 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11a4e:	7b63      	ldrb	r3, [r4, #13]
   11a50:	071a      	lsls	r2, r3, #28
   11a52:	d512      	bpl.n	11a7a <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11a54:	4834      	ldr	r0, [pc, #208]	; (11b28 <z_thread_abort+0x110>)
   11a56:	f7fe fee5 	bl	10824 <z_spin_unlock_valid>
   11a5a:	b940      	cbnz	r0, 11a6e <z_thread_abort+0x56>
   11a5c:	4933      	ldr	r1, [pc, #204]	; (11b2c <z_thread_abort+0x114>)
   11a5e:	4834      	ldr	r0, [pc, #208]	; (11b30 <z_thread_abort+0x118>)
   11a60:	22b9      	movs	r2, #185	; 0xb9
   11a62:	f003 f8ef 	bl	14c44 <printk>
   11a66:	21b9      	movs	r1, #185	; 0xb9
   11a68:	4830      	ldr	r0, [pc, #192]	; (11b2c <z_thread_abort+0x114>)
   11a6a:	f003 f971 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11a6e:	f386 8811 	msr	BASEPRI, r6
   11a72:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11a7a:	f023 0220 	bic.w	r2, r3, #32
   11a7e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   11a82:	09d2      	lsrs	r2, r2, #7
   11a84:	d138      	bne.n	11af8 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11a86:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   11a88:	68a3      	ldr	r3, [r4, #8]
   11a8a:	b113      	cbz	r3, 11a92 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   11a8c:	4620      	mov	r0, r4
   11a8e:	f7ff fa29 	bl	10ee4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   11a92:	f104 0018 	add.w	r0, r4, #24
   11a96:	f000 f965 	bl	11d64 <z_abort_timeout>
   11a9a:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   11a9e:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   11aa2:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11aa4:	42bd      	cmp	r5, r7
   11aa6:	d000      	beq.n	11aaa <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11aa8:	bb85      	cbnz	r5, 11b0c <z_thread_abort+0xf4>
		update_cache(1);
   11aaa:	2001      	movs	r0, #1
   11aac:	f7ff fa38 	bl	10f20 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   11ab0:	4b20      	ldr	r3, [pc, #128]	; (11b34 <z_thread_abort+0x11c>)
   11ab2:	689b      	ldr	r3, [r3, #8]
   11ab4:	42a3      	cmp	r3, r4
   11ab6:	d1cd      	bne.n	11a54 <z_thread_abort+0x3c>
   11ab8:	f3ef 8305 	mrs	r3, IPSR
   11abc:	2b00      	cmp	r3, #0
   11abe:	d1c9      	bne.n	11a54 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ac0:	4819      	ldr	r0, [pc, #100]	; (11b28 <z_thread_abort+0x110>)
   11ac2:	f7fe feaf 	bl	10824 <z_spin_unlock_valid>
   11ac6:	b940      	cbnz	r0, 11ada <z_thread_abort+0xc2>
   11ac8:	4918      	ldr	r1, [pc, #96]	; (11b2c <z_thread_abort+0x114>)
   11aca:	4819      	ldr	r0, [pc, #100]	; (11b30 <z_thread_abort+0x118>)
   11acc:	22d0      	movs	r2, #208	; 0xd0
   11ace:	f003 f8b9 	bl	14c44 <printk>
   11ad2:	21d0      	movs	r1, #208	; 0xd0
   11ad4:	4815      	ldr	r0, [pc, #84]	; (11b2c <z_thread_abort+0x114>)
   11ad6:	f003 f93b 	bl	14d50 <assert_post_action>
   11ada:	4630      	mov	r0, r6
   11adc:	f7fc f818 	bl	db10 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   11ae0:	f240 624b 	movw	r2, #1611	; 0x64b
   11ae4:	4914      	ldr	r1, [pc, #80]	; (11b38 <z_thread_abort+0x120>)
   11ae6:	4812      	ldr	r0, [pc, #72]	; (11b30 <z_thread_abort+0x118>)
   11ae8:	f003 f8ac 	bl	14c44 <printk>
   11aec:	f240 614b 	movw	r1, #1611	; 0x64b
   11af0:	4811      	ldr	r0, [pc, #68]	; (11b38 <z_thread_abort+0x120>)
   11af2:	f003 f92d 	bl	14d50 <assert_post_action>
   11af6:	e7ad      	b.n	11a54 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11af8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   11afc:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   11b00:	4621      	mov	r1, r4
   11b02:	480e      	ldr	r0, [pc, #56]	; (11b3c <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11b04:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11b06:	f7ff f9cf 	bl	10ea8 <z_priq_dumb_remove>
}
   11b0a:	e7bd      	b.n	11a88 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   11b0c:	4628      	mov	r0, r5
   11b0e:	f7ff f9e9 	bl	10ee4 <unpend_thread_no_timeout>
   11b12:	f105 0018 	add.w	r0, r5, #24
   11b16:	f000 f925 	bl	11d64 <z_abort_timeout>
		ready_thread(thread);
   11b1a:	4628      	mov	r0, r5
   11b1c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   11b20:	f7ff fae2 	bl	110e8 <ready_thread>
   11b24:	e7bd      	b.n	11aa2 <z_thread_abort+0x8a>
   11b26:	bf00      	nop
   11b28:	20000a8c 	.word	0x20000a8c
   11b2c:	00015bbf 	.word	0x00015bbf
   11b30:	00015be5 	.word	0x00015be5
   11b34:	20000a58 	.word	0x20000a58
   11b38:	00016d90 	.word	0x00016d90
   11b3c:	20000a78 	.word	0x20000a78

00011b40 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   11b40:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   11b42:	4806      	ldr	r0, [pc, #24]	; (11b5c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   11b44:	4a06      	ldr	r2, [pc, #24]	; (11b60 <z_data_copy+0x20>)
   11b46:	4907      	ldr	r1, [pc, #28]	; (11b64 <z_data_copy+0x24>)
   11b48:	1a12      	subs	r2, r2, r0
   11b4a:	f003 fbfa 	bl	15342 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   11b52:	4a05      	ldr	r2, [pc, #20]	; (11b68 <z_data_copy+0x28>)
   11b54:	4905      	ldr	r1, [pc, #20]	; (11b6c <z_data_copy+0x2c>)
   11b56:	4806      	ldr	r0, [pc, #24]	; (11b70 <z_data_copy+0x30>)
   11b58:	f003 bbf3 	b.w	15342 <z_early_memcpy>
   11b5c:	20000000 	.word	0x20000000
   11b60:	2000016c 	.word	0x2000016c
   11b64:	00016e24 	.word	0x00016e24
   11b68:	00000000 	.word	0x00000000
   11b6c:	00016e24 	.word	0x00016e24
   11b70:	20000000 	.word	0x20000000

00011b74 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11b74:	4b03      	ldr	r3, [pc, #12]	; (11b84 <elapsed+0x10>)
   11b76:	681b      	ldr	r3, [r3, #0]
   11b78:	b90b      	cbnz	r3, 11b7e <elapsed+0xa>
   11b7a:	f7fd bc01 	b.w	f380 <sys_clock_elapsed>
}
   11b7e:	2000      	movs	r0, #0
   11b80:	4770      	bx	lr
   11b82:	bf00      	nop
   11b84:	20000a98 	.word	0x20000a98

00011b88 <next_timeout>:
	return list->head == list;
   11b88:	4b10      	ldr	r3, [pc, #64]	; (11bcc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   11b8a:	b510      	push	{r4, lr}
   11b8c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b8e:	429c      	cmp	r4, r3
   11b90:	bf08      	it	eq
   11b92:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   11b94:	f7ff ffee 	bl	11b74 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   11b98:	b1a4      	cbz	r4, 11bc4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   11b9a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   11b9e:	1a1b      	subs	r3, r3, r0
   11ba0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   11ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   11ba8:	f170 0200 	sbcs.w	r2, r0, #0
   11bac:	da0a      	bge.n	11bc4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   11bae:	2800      	cmp	r0, #0
   11bb0:	bfac      	ite	ge
   11bb2:	4618      	movge	r0, r3
   11bb4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   11bb6:	4b06      	ldr	r3, [pc, #24]	; (11bd0 <next_timeout+0x48>)
   11bb8:	691b      	ldr	r3, [r3, #16]
   11bba:	b113      	cbz	r3, 11bc2 <next_timeout+0x3a>
   11bbc:	4298      	cmp	r0, r3
   11bbe:	bfa8      	it	ge
   11bc0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   11bc2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   11bc4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11bc8:	e7f5      	b.n	11bb6 <next_timeout+0x2e>
   11bca:	bf00      	nop
   11bcc:	20000090 	.word	0x20000090
   11bd0:	20000a58 	.word	0x20000a58

00011bd4 <remove_timeout>:
{
   11bd4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   11bd6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11bd8:	b168      	cbz	r0, 11bf6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   11bda:	4a0a      	ldr	r2, [pc, #40]	; (11c04 <remove_timeout+0x30>)
   11bdc:	6852      	ldr	r2, [r2, #4]
   11bde:	4290      	cmp	r0, r2
   11be0:	d009      	beq.n	11bf6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   11be2:	b143      	cbz	r3, 11bf6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   11be4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   11be8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   11bec:	1912      	adds	r2, r2, r4
   11bee:	eb41 0105 	adc.w	r1, r1, r5
   11bf2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   11bf6:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   11bf8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11bfa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11bfc:	2300      	movs	r3, #0
	node->prev = NULL;
   11bfe:	e9c0 3300 	strd	r3, r3, [r0]
}
   11c02:	bd30      	pop	{r4, r5, pc}
   11c04:	20000090 	.word	0x20000090

00011c08 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11c0c:	bf08      	it	eq
   11c0e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   11c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c16:	4604      	mov	r4, r0
   11c18:	460e      	mov	r6, r1
   11c1a:	4698      	mov	r8, r3
   11c1c:	4615      	mov	r5, r2
   11c1e:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11c20:	f000 8090 	beq.w	11d44 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   11c24:	6803      	ldr	r3, [r0, #0]
   11c26:	b143      	cbz	r3, 11c3a <z_add_timeout+0x32>
   11c28:	4947      	ldr	r1, [pc, #284]	; (11d48 <z_add_timeout+0x140>)
   11c2a:	4848      	ldr	r0, [pc, #288]	; (11d4c <z_add_timeout+0x144>)
   11c2c:	2263      	movs	r2, #99	; 0x63
   11c2e:	f003 f809 	bl	14c44 <printk>
   11c32:	2163      	movs	r1, #99	; 0x63
   11c34:	4844      	ldr	r0, [pc, #272]	; (11d48 <z_add_timeout+0x140>)
   11c36:	f003 f88b 	bl	14d50 <assert_post_action>
	to->fn = fn;
   11c3a:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   11c3c:	f04f 0320 	mov.w	r3, #32
   11c40:	f3ef 8611 	mrs	r6, BASEPRI
   11c44:	f383 8812 	msr	BASEPRI_MAX, r3
   11c48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11c4c:	4840      	ldr	r0, [pc, #256]	; (11d50 <z_add_timeout+0x148>)
   11c4e:	f7fe fddb 	bl	10808 <z_spin_lock_valid>
   11c52:	b940      	cbnz	r0, 11c66 <z_add_timeout+0x5e>
   11c54:	493f      	ldr	r1, [pc, #252]	; (11d54 <z_add_timeout+0x14c>)
   11c56:	483d      	ldr	r0, [pc, #244]	; (11d4c <z_add_timeout+0x144>)
   11c58:	228e      	movs	r2, #142	; 0x8e
   11c5a:	f002 fff3 	bl	14c44 <printk>
   11c5e:	218e      	movs	r1, #142	; 0x8e
   11c60:	483c      	ldr	r0, [pc, #240]	; (11d54 <z_add_timeout+0x14c>)
   11c62:	f003 f875 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   11c66:	483a      	ldr	r0, [pc, #232]	; (11d50 <z_add_timeout+0x148>)
   11c68:	f7fe fdea 	bl	10840 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11c6c:	f06f 0201 	mvn.w	r2, #1
   11c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11c74:	1b53      	subs	r3, r2, r5
   11c76:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11c7a:	2b00      	cmp	r3, #0
   11c7c:	db1b      	blt.n	11cb6 <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   11c7e:	4b36      	ldr	r3, [pc, #216]	; (11d58 <z_add_timeout+0x150>)
   11c80:	e9d3 1300 	ldrd	r1, r3, [r3]
   11c84:	1a52      	subs	r2, r2, r1
   11c86:	eb60 0303 	sbc.w	r3, r0, r3
   11c8a:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   11c8c:	eb63 0707 	sbc.w	r7, r3, r7
   11c90:	2d01      	cmp	r5, #1
   11c92:	f177 0300 	sbcs.w	r3, r7, #0
   11c96:	bfbc      	itt	lt
   11c98:	2501      	movlt	r5, #1
   11c9a:	2700      	movlt	r7, #0
   11c9c:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   11ca0:	4a2e      	ldr	r2, [pc, #184]	; (11d5c <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   11ca2:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11ca6:	4293      	cmp	r3, r2
   11ca8:	d118      	bne.n	11cdc <z_add_timeout+0xd4>
	node->prev = tail;
   11caa:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   11cae:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   11cb2:	6054      	str	r4, [r2, #4]
}
   11cb4:	e026      	b.n	11d04 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   11cb6:	f7ff ff5d 	bl	11b74 <elapsed>
   11cba:	3501      	adds	r5, #1
   11cbc:	f148 0800 	adc.w	r8, r8, #0
   11cc0:	182d      	adds	r5, r5, r0
   11cc2:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   11cc6:	e9c4 5004 	strd	r5, r0, [r4, #16]
   11cca:	e7e9      	b.n	11ca0 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   11ccc:	1a09      	subs	r1, r1, r0
   11cce:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   11cd2:	459c      	cmp	ip, r3
   11cd4:	e9c4 1504 	strd	r1, r5, [r4, #16]
   11cd8:	d0e7      	beq.n	11caa <z_add_timeout+0xa2>
   11cda:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   11cdc:	2b00      	cmp	r3, #0
   11cde:	d0e4      	beq.n	11caa <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   11ce0:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   11ce4:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   11ce8:	4281      	cmp	r1, r0
   11cea:	eb75 0e07 	sbcs.w	lr, r5, r7
   11cee:	daed      	bge.n	11ccc <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   11cf0:	1a41      	subs	r1, r0, r1
   11cf2:	eb67 0505 	sbc.w	r5, r7, r5
   11cf6:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   11cfa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   11cfc:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   11d00:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   11d02:	605c      	str	r4, [r3, #4]
	return list->head == list;
   11d04:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11d06:	4293      	cmp	r3, r2
   11d08:	d00b      	beq.n	11d22 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11d0a:	429c      	cmp	r4, r3
   11d0c:	d109      	bne.n	11d22 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   11d0e:	f7ff ff3b 	bl	11b88 <next_timeout>

			if (next_time == 0 ||
   11d12:	b118      	cbz	r0, 11d1c <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   11d14:	4b12      	ldr	r3, [pc, #72]	; (11d60 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   11d16:	691b      	ldr	r3, [r3, #16]
   11d18:	4283      	cmp	r3, r0
   11d1a:	d002      	beq.n	11d22 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   11d1c:	2100      	movs	r1, #0
   11d1e:	f7fd faa9 	bl	f274 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d22:	480b      	ldr	r0, [pc, #44]	; (11d50 <z_add_timeout+0x148>)
   11d24:	f7fe fd7e 	bl	10824 <z_spin_unlock_valid>
   11d28:	b940      	cbnz	r0, 11d3c <z_add_timeout+0x134>
   11d2a:	490a      	ldr	r1, [pc, #40]	; (11d54 <z_add_timeout+0x14c>)
   11d2c:	4807      	ldr	r0, [pc, #28]	; (11d4c <z_add_timeout+0x144>)
   11d2e:	22b9      	movs	r2, #185	; 0xb9
   11d30:	f002 ff88 	bl	14c44 <printk>
   11d34:	21b9      	movs	r1, #185	; 0xb9
   11d36:	4807      	ldr	r0, [pc, #28]	; (11d54 <z_add_timeout+0x14c>)
   11d38:	f003 f80a 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11d3c:	f386 8811 	msr	BASEPRI, r6
   11d40:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   11d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d48:	00016db2 	.word	0x00016db2
   11d4c:	00015be5 	.word	0x00015be5
   11d50:	20000a9c 	.word	0x20000a9c
   11d54:	00015bbf 	.word	0x00015bbf
   11d58:	20000270 	.word	0x20000270
   11d5c:	20000090 	.word	0x20000090
   11d60:	20000a58 	.word	0x20000a58

00011d64 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   11d64:	b538      	push	{r3, r4, r5, lr}
   11d66:	4604      	mov	r4, r0
	__asm__ volatile(
   11d68:	f04f 0320 	mov.w	r3, #32
   11d6c:	f3ef 8511 	mrs	r5, BASEPRI
   11d70:	f383 8812 	msr	BASEPRI_MAX, r3
   11d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11d78:	4815      	ldr	r0, [pc, #84]	; (11dd0 <z_abort_timeout+0x6c>)
   11d7a:	f7fe fd45 	bl	10808 <z_spin_lock_valid>
   11d7e:	b940      	cbnz	r0, 11d92 <z_abort_timeout+0x2e>
   11d80:	4914      	ldr	r1, [pc, #80]	; (11dd4 <z_abort_timeout+0x70>)
   11d82:	4815      	ldr	r0, [pc, #84]	; (11dd8 <z_abort_timeout+0x74>)
   11d84:	228e      	movs	r2, #142	; 0x8e
   11d86:	f002 ff5d 	bl	14c44 <printk>
   11d8a:	218e      	movs	r1, #142	; 0x8e
   11d8c:	4811      	ldr	r0, [pc, #68]	; (11dd4 <z_abort_timeout+0x70>)
   11d8e:	f002 ffdf 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   11d92:	480f      	ldr	r0, [pc, #60]	; (11dd0 <z_abort_timeout+0x6c>)
   11d94:	f7fe fd54 	bl	10840 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   11d98:	6823      	ldr	r3, [r4, #0]
   11d9a:	b1b3      	cbz	r3, 11dca <z_abort_timeout+0x66>
			remove_timeout(to);
   11d9c:	4620      	mov	r0, r4
   11d9e:	f7ff ff19 	bl	11bd4 <remove_timeout>
			ret = 0;
   11da2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11da4:	480a      	ldr	r0, [pc, #40]	; (11dd0 <z_abort_timeout+0x6c>)
   11da6:	f7fe fd3d 	bl	10824 <z_spin_unlock_valid>
   11daa:	b940      	cbnz	r0, 11dbe <z_abort_timeout+0x5a>
   11dac:	4909      	ldr	r1, [pc, #36]	; (11dd4 <z_abort_timeout+0x70>)
   11dae:	480a      	ldr	r0, [pc, #40]	; (11dd8 <z_abort_timeout+0x74>)
   11db0:	22b9      	movs	r2, #185	; 0xb9
   11db2:	f002 ff47 	bl	14c44 <printk>
   11db6:	21b9      	movs	r1, #185	; 0xb9
   11db8:	4806      	ldr	r0, [pc, #24]	; (11dd4 <z_abort_timeout+0x70>)
   11dba:	f002 ffc9 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11dbe:	f385 8811 	msr	BASEPRI, r5
   11dc2:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   11dc6:	4620      	mov	r0, r4
   11dc8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   11dca:	f06f 0415 	mvn.w	r4, #21
   11dce:	e7e9      	b.n	11da4 <z_abort_timeout+0x40>
   11dd0:	20000a9c 	.word	0x20000a9c
   11dd4:	00015bbf 	.word	0x00015bbf
   11dd8:	00015be5 	.word	0x00015be5

00011ddc <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   11ddc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11dde:	f04f 0320 	mov.w	r3, #32
   11de2:	f3ef 8511 	mrs	r5, BASEPRI
   11de6:	f383 8812 	msr	BASEPRI_MAX, r3
   11dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11dee:	4813      	ldr	r0, [pc, #76]	; (11e3c <z_get_next_timeout_expiry+0x60>)
   11df0:	f7fe fd0a 	bl	10808 <z_spin_lock_valid>
   11df4:	b940      	cbnz	r0, 11e08 <z_get_next_timeout_expiry+0x2c>
   11df6:	4912      	ldr	r1, [pc, #72]	; (11e40 <z_get_next_timeout_expiry+0x64>)
   11df8:	4812      	ldr	r0, [pc, #72]	; (11e44 <z_get_next_timeout_expiry+0x68>)
   11dfa:	228e      	movs	r2, #142	; 0x8e
   11dfc:	f002 ff22 	bl	14c44 <printk>
   11e00:	218e      	movs	r1, #142	; 0x8e
   11e02:	480f      	ldr	r0, [pc, #60]	; (11e40 <z_get_next_timeout_expiry+0x64>)
   11e04:	f002 ffa4 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   11e08:	480c      	ldr	r0, [pc, #48]	; (11e3c <z_get_next_timeout_expiry+0x60>)
   11e0a:	f7fe fd19 	bl	10840 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   11e0e:	f7ff febb 	bl	11b88 <next_timeout>
   11e12:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11e14:	4809      	ldr	r0, [pc, #36]	; (11e3c <z_get_next_timeout_expiry+0x60>)
   11e16:	f7fe fd05 	bl	10824 <z_spin_unlock_valid>
   11e1a:	b940      	cbnz	r0, 11e2e <z_get_next_timeout_expiry+0x52>
   11e1c:	4908      	ldr	r1, [pc, #32]	; (11e40 <z_get_next_timeout_expiry+0x64>)
   11e1e:	4809      	ldr	r0, [pc, #36]	; (11e44 <z_get_next_timeout_expiry+0x68>)
   11e20:	22b9      	movs	r2, #185	; 0xb9
   11e22:	f002 ff0f 	bl	14c44 <printk>
   11e26:	21b9      	movs	r1, #185	; 0xb9
   11e28:	4805      	ldr	r0, [pc, #20]	; (11e40 <z_get_next_timeout_expiry+0x64>)
   11e2a:	f002 ff91 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11e2e:	f385 8811 	msr	BASEPRI, r5
   11e32:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   11e36:	4620      	mov	r0, r4
   11e38:	bd38      	pop	{r3, r4, r5, pc}
   11e3a:	bf00      	nop
   11e3c:	20000a9c 	.word	0x20000a9c
   11e40:	00015bbf 	.word	0x00015bbf
   11e44:	00015be5 	.word	0x00015be5

00011e48 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   11e48:	b570      	push	{r4, r5, r6, lr}
   11e4a:	4604      	mov	r4, r0
   11e4c:	460d      	mov	r5, r1
	__asm__ volatile(
   11e4e:	f04f 0320 	mov.w	r3, #32
   11e52:	f3ef 8611 	mrs	r6, BASEPRI
   11e56:	f383 8812 	msr	BASEPRI_MAX, r3
   11e5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11e5e:	4816      	ldr	r0, [pc, #88]	; (11eb8 <z_set_timeout_expiry+0x70>)
   11e60:	f7fe fcd2 	bl	10808 <z_spin_lock_valid>
   11e64:	b940      	cbnz	r0, 11e78 <z_set_timeout_expiry+0x30>
   11e66:	4915      	ldr	r1, [pc, #84]	; (11ebc <z_set_timeout_expiry+0x74>)
   11e68:	4815      	ldr	r0, [pc, #84]	; (11ec0 <z_set_timeout_expiry+0x78>)
   11e6a:	228e      	movs	r2, #142	; 0x8e
   11e6c:	f002 feea 	bl	14c44 <printk>
   11e70:	218e      	movs	r1, #142	; 0x8e
   11e72:	4812      	ldr	r0, [pc, #72]	; (11ebc <z_set_timeout_expiry+0x74>)
   11e74:	f002 ff6c 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   11e78:	480f      	ldr	r0, [pc, #60]	; (11eb8 <z_set_timeout_expiry+0x70>)
   11e7a:	f7fe fce1 	bl	10840 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   11e7e:	f7ff fe83 	bl	11b88 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   11e82:	2801      	cmp	r0, #1
   11e84:	dd05      	ble.n	11e92 <z_set_timeout_expiry+0x4a>
   11e86:	42a0      	cmp	r0, r4
   11e88:	db03      	blt.n	11e92 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   11e8a:	4629      	mov	r1, r5
   11e8c:	4620      	mov	r0, r4
   11e8e:	f7fd f9f1 	bl	f274 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11e92:	4809      	ldr	r0, [pc, #36]	; (11eb8 <z_set_timeout_expiry+0x70>)
   11e94:	f7fe fcc6 	bl	10824 <z_spin_unlock_valid>
   11e98:	b940      	cbnz	r0, 11eac <z_set_timeout_expiry+0x64>
   11e9a:	4908      	ldr	r1, [pc, #32]	; (11ebc <z_set_timeout_expiry+0x74>)
   11e9c:	4808      	ldr	r0, [pc, #32]	; (11ec0 <z_set_timeout_expiry+0x78>)
   11e9e:	22b9      	movs	r2, #185	; 0xb9
   11ea0:	f002 fed0 	bl	14c44 <printk>
   11ea4:	21b9      	movs	r1, #185	; 0xb9
   11ea6:	4805      	ldr	r0, [pc, #20]	; (11ebc <z_set_timeout_expiry+0x74>)
   11ea8:	f002 ff52 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11eac:	f386 8811 	msr	BASEPRI, r6
   11eb0:	f3bf 8f6f 	isb	sy
		}
	}
}
   11eb4:	bd70      	pop	{r4, r5, r6, pc}
   11eb6:	bf00      	nop
   11eb8:	20000a9c 	.word	0x20000a9c
   11ebc:	00015bbf 	.word	0x00015bbf
   11ec0:	00015be5 	.word	0x00015be5

00011ec4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   11ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11ec8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   11eca:	f7ff f8a9 	bl	11020 <z_time_slice>
	__asm__ volatile(
   11ece:	f04f 0320 	mov.w	r3, #32
   11ed2:	f3ef 8511 	mrs	r5, BASEPRI
   11ed6:	f383 8812 	msr	BASEPRI_MAX, r3
   11eda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11ede:	4842      	ldr	r0, [pc, #264]	; (11fe8 <sys_clock_announce+0x124>)
   11ee0:	f7fe fc92 	bl	10808 <z_spin_lock_valid>
   11ee4:	b940      	cbnz	r0, 11ef8 <sys_clock_announce+0x34>
   11ee6:	4941      	ldr	r1, [pc, #260]	; (11fec <sys_clock_announce+0x128>)
   11ee8:	4841      	ldr	r0, [pc, #260]	; (11ff0 <sys_clock_announce+0x12c>)
   11eea:	228e      	movs	r2, #142	; 0x8e
   11eec:	f002 feaa 	bl	14c44 <printk>
   11ef0:	218e      	movs	r1, #142	; 0x8e
   11ef2:	483e      	ldr	r0, [pc, #248]	; (11fec <sys_clock_announce+0x128>)
   11ef4:	f002 ff2c 	bl	14d50 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   11ef8:	4f3e      	ldr	r7, [pc, #248]	; (11ff4 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   11efa:	483b      	ldr	r0, [pc, #236]	; (11fe8 <sys_clock_announce+0x124>)
	return list->head == list;
   11efc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 11ff8 <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   11f00:	4e3e      	ldr	r6, [pc, #248]	; (11ffc <sys_clock_announce+0x138>)
   11f02:	f7fe fc9d 	bl	10840 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   11f06:	603c      	str	r4, [r7, #0]
   11f08:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   11f0c:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11f0e:	4544      	cmp	r4, r8
   11f10:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   11f14:	e9d6 1e00 	ldrd	r1, lr, [r6]
   11f18:	d00b      	beq.n	11f32 <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   11f1a:	b154      	cbz	r4, 11f32 <sys_clock_announce+0x6e>
   11f1c:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   11f20:	429a      	cmp	r2, r3
   11f22:	eb70 090c 	sbcs.w	r9, r0, ip
   11f26:	da23      	bge.n	11f70 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   11f28:	1a9b      	subs	r3, r3, r2
   11f2a:	eb6c 0c00 	sbc.w	ip, ip, r0
   11f2e:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   11f32:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   11f34:	1852      	adds	r2, r2, r1
   11f36:	eb4e 0000 	adc.w	r0, lr, r0
   11f3a:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   11f3e:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   11f40:	f7ff fe22 	bl	11b88 <next_timeout>
   11f44:	4621      	mov	r1, r4
   11f46:	f7fd f995 	bl	f274 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11f4a:	4827      	ldr	r0, [pc, #156]	; (11fe8 <sys_clock_announce+0x124>)
   11f4c:	f7fe fc6a 	bl	10824 <z_spin_unlock_valid>
   11f50:	b940      	cbnz	r0, 11f64 <sys_clock_announce+0xa0>
   11f52:	4926      	ldr	r1, [pc, #152]	; (11fec <sys_clock_announce+0x128>)
   11f54:	4826      	ldr	r0, [pc, #152]	; (11ff0 <sys_clock_announce+0x12c>)
   11f56:	22b9      	movs	r2, #185	; 0xb9
   11f58:	f002 fe74 	bl	14c44 <printk>
   11f5c:	21b9      	movs	r1, #185	; 0xb9
   11f5e:	4823      	ldr	r0, [pc, #140]	; (11fec <sys_clock_announce+0x128>)
   11f60:	f002 fef6 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   11f64:	f385 8811 	msr	BASEPRI, r5
   11f68:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   11f70:	1859      	adds	r1, r3, r1
   11f72:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   11f76:	1ad3      	subs	r3, r2, r3
   11f78:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   11f7a:	2200      	movs	r2, #0
   11f7c:	2300      	movs	r3, #0
		curr_tick += dt;
   11f7e:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   11f82:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   11f86:	4620      	mov	r0, r4
   11f88:	f7ff fe24 	bl	11bd4 <remove_timeout>
   11f8c:	4816      	ldr	r0, [pc, #88]	; (11fe8 <sys_clock_announce+0x124>)
   11f8e:	f7fe fc49 	bl	10824 <z_spin_unlock_valid>
   11f92:	b940      	cbnz	r0, 11fa6 <sys_clock_announce+0xe2>
   11f94:	4915      	ldr	r1, [pc, #84]	; (11fec <sys_clock_announce+0x128>)
   11f96:	4816      	ldr	r0, [pc, #88]	; (11ff0 <sys_clock_announce+0x12c>)
   11f98:	22b9      	movs	r2, #185	; 0xb9
   11f9a:	f002 fe53 	bl	14c44 <printk>
   11f9e:	21b9      	movs	r1, #185	; 0xb9
   11fa0:	4812      	ldr	r0, [pc, #72]	; (11fec <sys_clock_announce+0x128>)
   11fa2:	f002 fed5 	bl	14d50 <assert_post_action>
   11fa6:	f385 8811 	msr	BASEPRI, r5
   11faa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   11fae:	4620      	mov	r0, r4
   11fb0:	68a3      	ldr	r3, [r4, #8]
   11fb2:	4798      	blx	r3
	__asm__ volatile(
   11fb4:	f04f 0320 	mov.w	r3, #32
   11fb8:	f3ef 8511 	mrs	r5, BASEPRI
   11fbc:	f383 8812 	msr	BASEPRI_MAX, r3
   11fc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11fc4:	4808      	ldr	r0, [pc, #32]	; (11fe8 <sys_clock_announce+0x124>)
   11fc6:	f7fe fc1f 	bl	10808 <z_spin_lock_valid>
   11fca:	b940      	cbnz	r0, 11fde <sys_clock_announce+0x11a>
   11fcc:	4907      	ldr	r1, [pc, #28]	; (11fec <sys_clock_announce+0x128>)
   11fce:	4808      	ldr	r0, [pc, #32]	; (11ff0 <sys_clock_announce+0x12c>)
   11fd0:	228e      	movs	r2, #142	; 0x8e
   11fd2:	f002 fe37 	bl	14c44 <printk>
   11fd6:	218e      	movs	r1, #142	; 0x8e
   11fd8:	4804      	ldr	r0, [pc, #16]	; (11fec <sys_clock_announce+0x128>)
   11fda:	f002 feb9 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   11fde:	4802      	ldr	r0, [pc, #8]	; (11fe8 <sys_clock_announce+0x124>)
   11fe0:	f7fe fc2e 	bl	10840 <z_spin_lock_set_owner>
	return k;
   11fe4:	e790      	b.n	11f08 <sys_clock_announce+0x44>
   11fe6:	bf00      	nop
   11fe8:	20000a9c 	.word	0x20000a9c
   11fec:	00015bbf 	.word	0x00015bbf
   11ff0:	00015be5 	.word	0x00015be5
   11ff4:	20000a98 	.word	0x20000a98
   11ff8:	20000090 	.word	0x20000090
   11ffc:	20000270 	.word	0x20000270

00012000 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   12000:	b570      	push	{r4, r5, r6, lr}
   12002:	f04f 0320 	mov.w	r3, #32
   12006:	f3ef 8611 	mrs	r6, BASEPRI
   1200a:	f383 8812 	msr	BASEPRI_MAX, r3
   1200e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12012:	4816      	ldr	r0, [pc, #88]	; (1206c <sys_clock_tick_get+0x6c>)
   12014:	f7fe fbf8 	bl	10808 <z_spin_lock_valid>
   12018:	b940      	cbnz	r0, 1202c <sys_clock_tick_get+0x2c>
   1201a:	4915      	ldr	r1, [pc, #84]	; (12070 <sys_clock_tick_get+0x70>)
   1201c:	4815      	ldr	r0, [pc, #84]	; (12074 <sys_clock_tick_get+0x74>)
   1201e:	228e      	movs	r2, #142	; 0x8e
   12020:	f002 fe10 	bl	14c44 <printk>
   12024:	218e      	movs	r1, #142	; 0x8e
   12026:	4812      	ldr	r0, [pc, #72]	; (12070 <sys_clock_tick_get+0x70>)
   12028:	f002 fe92 	bl	14d50 <assert_post_action>
	z_spin_lock_set_owner(l);
   1202c:	480f      	ldr	r0, [pc, #60]	; (1206c <sys_clock_tick_get+0x6c>)
   1202e:	f7fe fc07 	bl	10840 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   12032:	f7fd f9a5 	bl	f380 <sys_clock_elapsed>
   12036:	4b10      	ldr	r3, [pc, #64]	; (12078 <sys_clock_tick_get+0x78>)
   12038:	e9d3 4500 	ldrd	r4, r5, [r3]
   1203c:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1203e:	480b      	ldr	r0, [pc, #44]	; (1206c <sys_clock_tick_get+0x6c>)
   12040:	f145 0500 	adc.w	r5, r5, #0
   12044:	f7fe fbee 	bl	10824 <z_spin_unlock_valid>
   12048:	b940      	cbnz	r0, 1205c <sys_clock_tick_get+0x5c>
   1204a:	4909      	ldr	r1, [pc, #36]	; (12070 <sys_clock_tick_get+0x70>)
   1204c:	4809      	ldr	r0, [pc, #36]	; (12074 <sys_clock_tick_get+0x74>)
   1204e:	22b9      	movs	r2, #185	; 0xb9
   12050:	f002 fdf8 	bl	14c44 <printk>
   12054:	21b9      	movs	r1, #185	; 0xb9
   12056:	4806      	ldr	r0, [pc, #24]	; (12070 <sys_clock_tick_get+0x70>)
   12058:	f002 fe7a 	bl	14d50 <assert_post_action>
	__asm__ volatile(
   1205c:	f386 8811 	msr	BASEPRI, r6
   12060:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   12064:	4620      	mov	r0, r4
   12066:	4629      	mov	r1, r5
   12068:	bd70      	pop	{r4, r5, r6, pc}
   1206a:	bf00      	nop
   1206c:	20000a9c 	.word	0x20000a9c
   12070:	00015bbf 	.word	0x00015bbf
   12074:	00015be5 	.word	0x00015be5
   12078:	20000270 	.word	0x20000270

0001207c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1207c:	4a02      	ldr	r2, [pc, #8]	; (12088 <boot_banner+0xc>)
   1207e:	4903      	ldr	r1, [pc, #12]	; (1208c <boot_banner+0x10>)
   12080:	4803      	ldr	r0, [pc, #12]	; (12090 <boot_banner+0x14>)
   12082:	f002 bddf 	b.w	14c44 <printk>
   12086:	bf00      	nop
   12088:	00015c32 	.word	0x00015c32
   1208c:	00016dd6 	.word	0x00016dd6
   12090:	00016df6 	.word	0x00016df6

00012094 <nrf_cc3xx_platform_init>:
   12094:	b510      	push	{r4, lr}
   12096:	4c0c      	ldr	r4, [pc, #48]	; (120c8 <nrf_cc3xx_platform_init+0x34>)
   12098:	6823      	ldr	r3, [r4, #0]
   1209a:	b113      	cbz	r3, 120a2 <nrf_cc3xx_platform_init+0xe>
   1209c:	4b0b      	ldr	r3, [pc, #44]	; (120cc <nrf_cc3xx_platform_init+0x38>)
   1209e:	681b      	ldr	r3, [r3, #0]
   120a0:	b92b      	cbnz	r3, 120ae <nrf_cc3xx_platform_init+0x1a>
   120a2:	f000 fe73 	bl	12d8c <CC_LibInit>
   120a6:	b930      	cbnz	r0, 120b6 <nrf_cc3xx_platform_init+0x22>
   120a8:	2201      	movs	r2, #1
   120aa:	4b08      	ldr	r3, [pc, #32]	; (120cc <nrf_cc3xx_platform_init+0x38>)
   120ac:	601a      	str	r2, [r3, #0]
   120ae:	2301      	movs	r3, #1
   120b0:	2000      	movs	r0, #0
   120b2:	6023      	str	r3, [r4, #0]
   120b4:	bd10      	pop	{r4, pc}
   120b6:	3801      	subs	r0, #1
   120b8:	2806      	cmp	r0, #6
   120ba:	d901      	bls.n	120c0 <nrf_cc3xx_platform_init+0x2c>
   120bc:	4804      	ldr	r0, [pc, #16]	; (120d0 <nrf_cc3xx_platform_init+0x3c>)
   120be:	bd10      	pop	{r4, pc}
   120c0:	4b04      	ldr	r3, [pc, #16]	; (120d4 <nrf_cc3xx_platform_init+0x40>)
   120c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   120c6:	bd10      	pop	{r4, pc}
   120c8:	20000aa0 	.word	0x20000aa0
   120cc:	20000aa4 	.word	0x20000aa4
   120d0:	ffff8ffe 	.word	0xffff8ffe
   120d4:	00015a04 	.word	0x00015a04

000120d8 <nrf_cc3xx_platform_abort>:
   120d8:	f3bf 8f4f 	dsb	sy
   120dc:	4905      	ldr	r1, [pc, #20]	; (120f4 <nrf_cc3xx_platform_abort+0x1c>)
   120de:	4b06      	ldr	r3, [pc, #24]	; (120f8 <nrf_cc3xx_platform_abort+0x20>)
   120e0:	68ca      	ldr	r2, [r1, #12]
   120e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   120e6:	4313      	orrs	r3, r2
   120e8:	60cb      	str	r3, [r1, #12]
   120ea:	f3bf 8f4f 	dsb	sy
   120ee:	bf00      	nop
   120f0:	e7fd      	b.n	120ee <nrf_cc3xx_platform_abort+0x16>
   120f2:	bf00      	nop
   120f4:	e000ed00 	.word	0xe000ed00
   120f8:	05fa0004 	.word	0x05fa0004

000120fc <CC_PalAbort>:
   120fc:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   12100:	2100      	movs	r1, #0
   12102:	b430      	push	{r4, r5}
   12104:	4a06      	ldr	r2, [pc, #24]	; (12120 <CC_PalAbort+0x24>)
   12106:	4d07      	ldr	r5, [pc, #28]	; (12124 <CC_PalAbort+0x28>)
   12108:	4c07      	ldr	r4, [pc, #28]	; (12128 <CC_PalAbort+0x2c>)
   1210a:	602b      	str	r3, [r5, #0]
   1210c:	6013      	str	r3, [r2, #0]
   1210e:	6023      	str	r3, [r4, #0]
   12110:	4a06      	ldr	r2, [pc, #24]	; (1212c <CC_PalAbort+0x30>)
   12112:	4c07      	ldr	r4, [pc, #28]	; (12130 <CC_PalAbort+0x34>)
   12114:	60eb      	str	r3, [r5, #12]
   12116:	6863      	ldr	r3, [r4, #4]
   12118:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1211c:	bc30      	pop	{r4, r5}
   1211e:	4718      	bx	r3
   12120:	50841404 	.word	0x50841404
   12124:	50841400 	.word	0x50841400
   12128:	50841408 	.word	0x50841408
   1212c:	50840000 	.word	0x50840000
   12130:	20000098 	.word	0x20000098

00012134 <nrf_cc3xx_platform_set_abort>:
   12134:	4b02      	ldr	r3, [pc, #8]	; (12140 <nrf_cc3xx_platform_set_abort+0xc>)
   12136:	e9d0 1200 	ldrd	r1, r2, [r0]
   1213a:	e9c3 1200 	strd	r1, r2, [r3]
   1213e:	4770      	bx	lr
   12140:	20000098 	.word	0x20000098

00012144 <nrf_cc3xx_platform_ctr_drbg_init>:
   12144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12148:	4c15      	ldr	r4, [pc, #84]	; (121a0 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1214a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 121a8 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1214e:	2800      	cmp	r0, #0
   12150:	bf18      	it	ne
   12152:	4604      	movne	r4, r0
   12154:	6820      	ldr	r0, [r4, #0]
   12156:	b083      	sub	sp, #12
   12158:	4540      	cmp	r0, r8
   1215a:	d01d      	beq.n	12198 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1215c:	4616      	mov	r6, r2
   1215e:	460d      	mov	r5, r1
   12160:	4620      	mov	r0, r4
   12162:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   12166:	f104 0904 	add.w	r9, r4, #4
   1216a:	f000 f8d3 	bl	12314 <mbedtls_platform_zeroize>
   1216e:	f504 778c 	add.w	r7, r4, #280	; 0x118
   12172:	4648      	mov	r0, r9
   12174:	f000 fcf2 	bl	12b5c <cc_mbedtls_entropy_init>
   12178:	4638      	mov	r0, r7
   1217a:	f000 fb1d 	bl	127b8 <cc_mbedtls_ctr_drbg_init>
   1217e:	464a      	mov	r2, r9
   12180:	4638      	mov	r0, r7
   12182:	462b      	mov	r3, r5
   12184:	4907      	ldr	r1, [pc, #28]	; (121a4 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   12186:	9600      	str	r6, [sp, #0]
   12188:	f000 fb2c 	bl	127e4 <cc_mbedtls_ctr_drbg_seed>
   1218c:	b908      	cbnz	r0, 12192 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1218e:	f8c4 8000 	str.w	r8, [r4]
   12192:	b003      	add	sp, #12
   12194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12198:	2000      	movs	r0, #0
   1219a:	b003      	add	sp, #12
   1219c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   121a0:	2000148c 	.word	0x2000148c
   121a4:	00012bdd 	.word	0x00012bdd
   121a8:	5ac9bca5 	.word	0x5ac9bca5

000121ac <nrf_cc3xx_platform_ctr_drbg_get>:
   121ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   121ae:	4c0d      	ldr	r4, [pc, #52]	; (121e4 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   121b0:	4e0d      	ldr	r6, [pc, #52]	; (121e8 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   121b2:	2800      	cmp	r0, #0
   121b4:	bf08      	it	eq
   121b6:	4620      	moveq	r0, r4
   121b8:	6807      	ldr	r7, [r0, #0]
   121ba:	b083      	sub	sp, #12
   121bc:	42b7      	cmp	r7, r6
   121be:	d10e      	bne.n	121de <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   121c0:	2600      	movs	r6, #0
   121c2:	461d      	mov	r5, r3
   121c4:	f500 708c 	add.w	r0, r0, #280	; 0x118
   121c8:	4633      	mov	r3, r6
   121ca:	9600      	str	r6, [sp, #0]
   121cc:	4614      	mov	r4, r2
   121ce:	f000 fb57 	bl	12880 <cc_mbedtls_ctr_drbg_random_with_add>
   121d2:	2800      	cmp	r0, #0
   121d4:	bf18      	it	ne
   121d6:	4634      	movne	r4, r6
   121d8:	602c      	str	r4, [r5, #0]
   121da:	b003      	add	sp, #12
   121dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   121de:	4803      	ldr	r0, [pc, #12]	; (121ec <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   121e0:	e7fb      	b.n	121da <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   121e2:	bf00      	nop
   121e4:	2000148c 	.word	0x2000148c
   121e8:	5ac9bca5 	.word	0x5ac9bca5
   121ec:	ffff8fe8 	.word	0xffff8fe8

000121f0 <mutex_free>:
   121f0:	b510      	push	{r4, lr}
   121f2:	4604      	mov	r4, r0
   121f4:	b130      	cbz	r0, 12204 <mutex_free+0x14>
   121f6:	6863      	ldr	r3, [r4, #4]
   121f8:	06db      	lsls	r3, r3, #27
   121fa:	d502      	bpl.n	12202 <mutex_free+0x12>
   121fc:	2300      	movs	r3, #0
   121fe:	6023      	str	r3, [r4, #0]
   12200:	6063      	str	r3, [r4, #4]
   12202:	bd10      	pop	{r4, pc}
   12204:	4b02      	ldr	r3, [pc, #8]	; (12210 <mutex_free+0x20>)
   12206:	4803      	ldr	r0, [pc, #12]	; (12214 <mutex_free+0x24>)
   12208:	685b      	ldr	r3, [r3, #4]
   1220a:	4798      	blx	r3
   1220c:	e7f3      	b.n	121f6 <mutex_free+0x6>
   1220e:	bf00      	nop
   12210:	20000098 	.word	0x20000098
   12214:	00015a20 	.word	0x00015a20

00012218 <mutex_unlock>:
   12218:	b168      	cbz	r0, 12236 <mutex_unlock+0x1e>
   1221a:	6843      	ldr	r3, [r0, #4]
   1221c:	b13b      	cbz	r3, 1222e <mutex_unlock+0x16>
   1221e:	06db      	lsls	r3, r3, #27
   12220:	d507      	bpl.n	12232 <mutex_unlock+0x1a>
   12222:	f3bf 8f5f 	dmb	sy
   12226:	2300      	movs	r3, #0
   12228:	6003      	str	r3, [r0, #0]
   1222a:	4618      	mov	r0, r3
   1222c:	4770      	bx	lr
   1222e:	4803      	ldr	r0, [pc, #12]	; (1223c <mutex_unlock+0x24>)
   12230:	4770      	bx	lr
   12232:	4803      	ldr	r0, [pc, #12]	; (12240 <mutex_unlock+0x28>)
   12234:	4770      	bx	lr
   12236:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1223a:	4770      	bx	lr
   1223c:	ffff8fea 	.word	0xffff8fea
   12240:	ffff8fe9 	.word	0xffff8fe9

00012244 <mutex_init>:
   12244:	b510      	push	{r4, lr}
   12246:	4604      	mov	r4, r0
   12248:	b120      	cbz	r0, 12254 <mutex_init+0x10>
   1224a:	2200      	movs	r2, #0
   1224c:	2311      	movs	r3, #17
   1224e:	6022      	str	r2, [r4, #0]
   12250:	6063      	str	r3, [r4, #4]
   12252:	bd10      	pop	{r4, pc}
   12254:	4801      	ldr	r0, [pc, #4]	; (1225c <mutex_init+0x18>)
   12256:	f7ff ff51 	bl	120fc <CC_PalAbort>
   1225a:	e7f6      	b.n	1224a <mutex_init+0x6>
   1225c:	00015a48 	.word	0x00015a48

00012260 <mutex_lock>:
   12260:	b1a0      	cbz	r0, 1228c <mutex_lock+0x2c>
   12262:	6843      	ldr	r3, [r0, #4]
   12264:	b183      	cbz	r3, 12288 <mutex_lock+0x28>
   12266:	06db      	lsls	r3, r3, #27
   12268:	d50c      	bpl.n	12284 <mutex_lock+0x24>
   1226a:	2201      	movs	r2, #1
   1226c:	e8d0 3fef 	ldaex	r3, [r0]
   12270:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12274:	2900      	cmp	r1, #0
   12276:	d1f9      	bne.n	1226c <mutex_lock+0xc>
   12278:	2b01      	cmp	r3, #1
   1227a:	d0f7      	beq.n	1226c <mutex_lock+0xc>
   1227c:	f3bf 8f5f 	dmb	sy
   12280:	2000      	movs	r0, #0
   12282:	4770      	bx	lr
   12284:	4803      	ldr	r0, [pc, #12]	; (12294 <mutex_lock+0x34>)
   12286:	4770      	bx	lr
   12288:	4803      	ldr	r0, [pc, #12]	; (12298 <mutex_lock+0x38>)
   1228a:	4770      	bx	lr
   1228c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12290:	4770      	bx	lr
   12292:	bf00      	nop
   12294:	ffff8fe9 	.word	0xffff8fe9
   12298:	ffff8fea 	.word	0xffff8fea

0001229c <nrf_cc3xx_platform_set_mutexes>:
   1229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122a0:	4c14      	ldr	r4, [pc, #80]	; (122f4 <nrf_cc3xx_platform_set_mutexes+0x58>)
   122a2:	6802      	ldr	r2, [r0, #0]
   122a4:	68c3      	ldr	r3, [r0, #12]
   122a6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   122aa:	e9c4 6302 	strd	r6, r3, [r4, #8]
   122ae:	e9c4 2500 	strd	r2, r5, [r4]
   122b2:	4b11      	ldr	r3, [pc, #68]	; (122f8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   122b4:	680e      	ldr	r6, [r1, #0]
   122b6:	6848      	ldr	r0, [r1, #4]
   122b8:	4d10      	ldr	r5, [pc, #64]	; (122fc <nrf_cc3xx_platform_set_mutexes+0x60>)
   122ba:	e9c3 6000 	strd	r6, r0, [r3]
   122be:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   122c2:	6908      	ldr	r0, [r1, #16]
   122c4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   122c8:	e9c3 7602 	strd	r7, r6, [r3, #8]
   122cc:	6118      	str	r0, [r3, #16]
   122ce:	06cb      	lsls	r3, r1, #27
   122d0:	d50d      	bpl.n	122ee <nrf_cc3xx_platform_set_mutexes+0x52>
   122d2:	2300      	movs	r3, #0
   122d4:	f505 7088 	add.w	r0, r5, #272	; 0x110
   122d8:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   122dc:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   122e0:	4790      	blx	r2
   122e2:	6823      	ldr	r3, [r4, #0]
   122e4:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   122e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   122ec:	4718      	bx	r3
   122ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122f2:	bf00      	nop
   122f4:	200000a8 	.word	0x200000a8
   122f8:	200000b8 	.word	0x200000b8
   122fc:	2000148c 	.word	0x2000148c

00012300 <mbedtls_zeroize_internal>:
   12300:	b138      	cbz	r0, 12312 <mbedtls_zeroize_internal+0x12>
   12302:	b131      	cbz	r1, 12312 <mbedtls_zeroize_internal+0x12>
   12304:	2200      	movs	r2, #0
   12306:	4401      	add	r1, r0
   12308:	4603      	mov	r3, r0
   1230a:	3001      	adds	r0, #1
   1230c:	4281      	cmp	r1, r0
   1230e:	701a      	strb	r2, [r3, #0]
   12310:	d1fa      	bne.n	12308 <mbedtls_zeroize_internal+0x8>
   12312:	4770      	bx	lr

00012314 <mbedtls_platform_zeroize>:
   12314:	b138      	cbz	r0, 12326 <mbedtls_platform_zeroize+0x12>
   12316:	b131      	cbz	r1, 12326 <mbedtls_platform_zeroize+0x12>
   12318:	2200      	movs	r2, #0
   1231a:	4401      	add	r1, r0
   1231c:	4603      	mov	r3, r0
   1231e:	3001      	adds	r0, #1
   12320:	4288      	cmp	r0, r1
   12322:	701a      	strb	r2, [r3, #0]
   12324:	d1fa      	bne.n	1231c <mbedtls_platform_zeroize+0x8>
   12326:	4770      	bx	lr

00012328 <block_cipher_df>:
   12328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1232c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   12330:	b0af      	sub	sp, #188	; 0xbc
   12332:	f200 812c 	bhi.w	1258e <block_cipher_df+0x266>
   12336:	f8df 926c 	ldr.w	r9, [pc, #620]	; 125a4 <block_cipher_df+0x27c>
   1233a:	4690      	mov	r8, r2
   1233c:	460c      	mov	r4, r1
   1233e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   12342:	2100      	movs	r1, #0
   12344:	4682      	mov	sl, r0
   12346:	4648      	mov	r0, r9
   12348:	f002 fdef 	bl	14f2a <memset>
   1234c:	a811      	add	r0, sp, #68	; 0x44
   1234e:	f001 f9e9 	bl	13724 <cc_mbedtls_aes_init>
   12352:	2200      	movs	r2, #0
   12354:	2320      	movs	r3, #32
   12356:	4621      	mov	r1, r4
   12358:	f8a9 2010 	strh.w	r2, [r9, #16]
   1235c:	fa98 f498 	rev16.w	r4, r8
   12360:	4642      	mov	r2, r8
   12362:	f109 0018 	add.w	r0, r9, #24
   12366:	f8a9 4012 	strh.w	r4, [r9, #18]
   1236a:	f889 3017 	strb.w	r3, [r9, #23]
   1236e:	f002 fdd1 	bl	14f14 <memcpy>
   12372:	2280      	movs	r2, #128	; 0x80
   12374:	4b87      	ldr	r3, [pc, #540]	; (12594 <block_cipher_df+0x26c>)
   12376:	4988      	ldr	r1, [pc, #544]	; (12598 <block_cipher_df+0x270>)
   12378:	4c88      	ldr	r4, [pc, #544]	; (1259c <block_cipher_df+0x274>)
   1237a:	eb09 0008 	add.w	r0, r9, r8
   1237e:	e9cd 4102 	strd	r4, r1, [sp, #8]
   12382:	7602      	strb	r2, [r0, #24]
   12384:	9301      	str	r3, [sp, #4]
   12386:	a811      	add	r0, sp, #68	; 0x44
   12388:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
   1238c:	a901      	add	r1, sp, #4
   1238e:	9304      	str	r3, [sp, #16]
   12390:	f001 f9de 	bl	13750 <cc_mbedtls_aes_setkey_enc>
   12394:	4607      	mov	r7, r0
   12396:	2800      	cmp	r0, #0
   12398:	f040 80d8 	bne.w	1254c <block_cipher_df+0x224>
   1239c:	f108 0819 	add.w	r8, r8, #25
   123a0:	ae05      	add	r6, sp, #20
   123a2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
   123a6:	2210      	movs	r2, #16
   123a8:	2100      	movs	r1, #0
   123aa:	4630      	mov	r0, r6
   123ac:	f002 fdbd 	bl	14f2a <memset>
   123b0:	4645      	mov	r5, r8
   123b2:	4c7b      	ldr	r4, [pc, #492]	; (125a0 <block_cipher_df+0x278>)
   123b4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   123b8:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   123bc:	f89d c015 	ldrb.w	ip, [sp, #21]
   123c0:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   123c4:	f89d 0016 	ldrb.w	r0, [sp, #22]
   123c8:	4053      	eors	r3, r2
   123ca:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   123ce:	ea8c 0c01 	eor.w	ip, ip, r1
   123d2:	4050      	eors	r0, r2
   123d4:	f89d 1017 	ldrb.w	r1, [sp, #23]
   123d8:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
   123dc:	f89d e018 	ldrb.w	lr, [sp, #24]
   123e0:	4051      	eors	r1, r2
   123e2:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
   123e6:	f88d 3014 	strb.w	r3, [sp, #20]
   123ea:	ea8e 0202 	eor.w	r2, lr, r2
   123ee:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   123f2:	f89d e019 	ldrb.w	lr, [sp, #25]
   123f6:	f88d c015 	strb.w	ip, [sp, #21]
   123fa:	ea8e 0303 	eor.w	r3, lr, r3
   123fe:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
   12402:	f89d e01a 	ldrb.w	lr, [sp, #26]
   12406:	f88d 0016 	strb.w	r0, [sp, #22]
   1240a:	ea8e 0c0c 	eor.w	ip, lr, ip
   1240e:	f814 0c09 	ldrb.w	r0, [r4, #-9]
   12412:	f89d e01b 	ldrb.w	lr, [sp, #27]
   12416:	f88d 1017 	strb.w	r1, [sp, #23]
   1241a:	ea8e 0000 	eor.w	r0, lr, r0
   1241e:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   12422:	f89d e01c 	ldrb.w	lr, [sp, #28]
   12426:	f88d 2018 	strb.w	r2, [sp, #24]
   1242a:	ea8e 0101 	eor.w	r1, lr, r1
   1242e:	f814 2c07 	ldrb.w	r2, [r4, #-7]
   12432:	f89d e01d 	ldrb.w	lr, [sp, #29]
   12436:	f88d 3019 	strb.w	r3, [sp, #25]
   1243a:	ea8e 0202 	eor.w	r2, lr, r2
   1243e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12442:	f814 ec06 	ldrb.w	lr, [r4, #-6]
   12446:	f88d c01a 	strb.w	ip, [sp, #26]
   1244a:	ea83 030e 	eor.w	r3, r3, lr
   1244e:	f88d 001b 	strb.w	r0, [sp, #27]
   12452:	f88d 101c 	strb.w	r1, [sp, #28]
   12456:	f88d 201d 	strb.w	r2, [sp, #29]
   1245a:	f88d 301e 	strb.w	r3, [sp, #30]
   1245e:	f89d 101f 	ldrb.w	r1, [sp, #31]
   12462:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   12466:	f89d c020 	ldrb.w	ip, [sp, #32]
   1246a:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   1246e:	404b      	eors	r3, r1
   12470:	f814 2c04 	ldrb.w	r2, [r4, #-4]
   12474:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   12478:	ea8c 0202 	eor.w	r2, ip, r2
   1247c:	4041      	eors	r1, r0
   1247e:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   12482:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   12486:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
   1248a:	ea8c 0000 	eor.w	r0, ip, r0
   1248e:	f814 cc01 	ldrb.w	ip, [r4, #-1]
   12492:	f88d 301f 	strb.w	r3, [sp, #31]
   12496:	ea8e 0c0c 	eor.w	ip, lr, ip
   1249a:	f88d 2020 	strb.w	r2, [sp, #32]
   1249e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   124a2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   124a6:	4633      	mov	r3, r6
   124a8:	4632      	mov	r2, r6
   124aa:	2101      	movs	r1, #1
   124ac:	a811      	add	r0, sp, #68	; 0x44
   124ae:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
   124b2:	f001 f967 	bl	13784 <cc_mbedtls_aes_crypt_ecb>
   124b6:	2d10      	cmp	r5, #16
   124b8:	bf94      	ite	ls
   124ba:	1b6d      	subls	r5, r5, r5
   124bc:	3d10      	subhi	r5, #16
   124be:	2800      	cmp	r0, #0
   124c0:	d163      	bne.n	1258a <block_cipher_df+0x262>
   124c2:	3410      	adds	r4, #16
   124c4:	2d00      	cmp	r5, #0
   124c6:	f47f af75 	bne.w	123b4 <block_cipher_df+0x8c>
   124ca:	eb0b 0007 	add.w	r0, fp, r7
   124ce:	2210      	movs	r2, #16
   124d0:	4631      	mov	r1, r6
   124d2:	f002 fd1f 	bl	14f14 <memcpy>
   124d6:	f899 3003 	ldrb.w	r3, [r9, #3]
   124da:	3710      	adds	r7, #16
   124dc:	3301      	adds	r3, #1
   124de:	2f20      	cmp	r7, #32
   124e0:	f889 3003 	strb.w	r3, [r9, #3]
   124e4:	f47f af5f 	bne.w	123a6 <block_cipher_df+0x7e>
   124e8:	2280      	movs	r2, #128	; 0x80
   124ea:	4659      	mov	r1, fp
   124ec:	a811      	add	r0, sp, #68	; 0x44
   124ee:	f001 f92f 	bl	13750 <cc_mbedtls_aes_setkey_enc>
   124f2:	4607      	mov	r7, r0
   124f4:	bb68      	cbnz	r0, 12552 <block_cipher_df+0x22a>
   124f6:	4654      	mov	r4, sl
   124f8:	f10a 0520 	add.w	r5, sl, #32
   124fc:	ab0d      	add	r3, sp, #52	; 0x34
   124fe:	461a      	mov	r2, r3
   12500:	2101      	movs	r1, #1
   12502:	a811      	add	r0, sp, #68	; 0x44
   12504:	f001 f93e 	bl	13784 <cc_mbedtls_aes_crypt_ecb>
   12508:	4607      	mov	r7, r0
   1250a:	bb10      	cbnz	r0, 12552 <block_cipher_df+0x22a>
   1250c:	2210      	movs	r2, #16
   1250e:	4620      	mov	r0, r4
   12510:	a90d      	add	r1, sp, #52	; 0x34
   12512:	4414      	add	r4, r2
   12514:	f002 fcfe 	bl	14f14 <memcpy>
   12518:	42ac      	cmp	r4, r5
   1251a:	d1ef      	bne.n	124fc <block_cipher_df+0x1d4>
   1251c:	a811      	add	r0, sp, #68	; 0x44
   1251e:	f001 f911 	bl	13744 <cc_mbedtls_aes_free>
   12522:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   12526:	481f      	ldr	r0, [pc, #124]	; (125a4 <block_cipher_df+0x27c>)
   12528:	f7ff fef4 	bl	12314 <mbedtls_platform_zeroize>
   1252c:	4658      	mov	r0, fp
   1252e:	2120      	movs	r1, #32
   12530:	f7ff fef0 	bl	12314 <mbedtls_platform_zeroize>
   12534:	a801      	add	r0, sp, #4
   12536:	2110      	movs	r1, #16
   12538:	f7ff feec 	bl	12314 <mbedtls_platform_zeroize>
   1253c:	4630      	mov	r0, r6
   1253e:	2110      	movs	r1, #16
   12540:	f7ff fee8 	bl	12314 <mbedtls_platform_zeroize>
   12544:	4638      	mov	r0, r7
   12546:	b02f      	add	sp, #188	; 0xbc
   12548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1254c:	ae05      	add	r6, sp, #20
   1254e:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
   12552:	a811      	add	r0, sp, #68	; 0x44
   12554:	f001 f8f6 	bl	13744 <cc_mbedtls_aes_free>
   12558:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1255c:	4811      	ldr	r0, [pc, #68]	; (125a4 <block_cipher_df+0x27c>)
   1255e:	f7ff fed9 	bl	12314 <mbedtls_platform_zeroize>
   12562:	4658      	mov	r0, fp
   12564:	2120      	movs	r1, #32
   12566:	f7ff fed5 	bl	12314 <mbedtls_platform_zeroize>
   1256a:	2110      	movs	r1, #16
   1256c:	a801      	add	r0, sp, #4
   1256e:	f7ff fed1 	bl	12314 <mbedtls_platform_zeroize>
   12572:	4630      	mov	r0, r6
   12574:	2110      	movs	r1, #16
   12576:	f7ff fecd 	bl	12314 <mbedtls_platform_zeroize>
   1257a:	4650      	mov	r0, sl
   1257c:	2120      	movs	r1, #32
   1257e:	f7ff fec9 	bl	12314 <mbedtls_platform_zeroize>
   12582:	4638      	mov	r0, r7
   12584:	b02f      	add	sp, #188	; 0xbc
   12586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1258a:	4607      	mov	r7, r0
   1258c:	e7e1      	b.n	12552 <block_cipher_df+0x22a>
   1258e:	f06f 0737 	mvn.w	r7, #55	; 0x37
   12592:	e7f6      	b.n	12582 <block_cipher_df+0x25a>
   12594:	03020100 	.word	0x03020100
   12598:	0b0a0908 	.word	0x0b0a0908
   1259c:	07060504 	.word	0x07060504
   125a0:	20000ac8 	.word	0x20000ac8
   125a4:	20000ab8 	.word	0x20000ab8

000125a8 <ctr_drbg_update_internal>:
   125a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125ac:	2220      	movs	r2, #32
   125ae:	4604      	mov	r4, r0
   125b0:	b088      	sub	sp, #32
   125b2:	460d      	mov	r5, r1
   125b4:	4668      	mov	r0, sp
   125b6:	2100      	movs	r1, #0
   125b8:	18a6      	adds	r6, r4, r2
   125ba:	466f      	mov	r7, sp
   125bc:	f002 fcb5 	bl	14f2a <memset>
   125c0:	7be2      	ldrb	r2, [r4, #15]
   125c2:	3201      	adds	r2, #1
   125c4:	b2d2      	uxtb	r2, r2
   125c6:	73e2      	strb	r2, [r4, #15]
   125c8:	2a00      	cmp	r2, #0
   125ca:	d14d      	bne.n	12668 <ctr_drbg_update_internal+0xc0>
   125cc:	7ba2      	ldrb	r2, [r4, #14]
   125ce:	3201      	adds	r2, #1
   125d0:	b2d2      	uxtb	r2, r2
   125d2:	73a2      	strb	r2, [r4, #14]
   125d4:	2a00      	cmp	r2, #0
   125d6:	d147      	bne.n	12668 <ctr_drbg_update_internal+0xc0>
   125d8:	7b63      	ldrb	r3, [r4, #13]
   125da:	3301      	adds	r3, #1
   125dc:	b2db      	uxtb	r3, r3
   125de:	7363      	strb	r3, [r4, #13]
   125e0:	2b00      	cmp	r3, #0
   125e2:	d141      	bne.n	12668 <ctr_drbg_update_internal+0xc0>
   125e4:	7b23      	ldrb	r3, [r4, #12]
   125e6:	3301      	adds	r3, #1
   125e8:	b2db      	uxtb	r3, r3
   125ea:	7323      	strb	r3, [r4, #12]
   125ec:	2b00      	cmp	r3, #0
   125ee:	d13b      	bne.n	12668 <ctr_drbg_update_internal+0xc0>
   125f0:	7ae3      	ldrb	r3, [r4, #11]
   125f2:	3301      	adds	r3, #1
   125f4:	b2db      	uxtb	r3, r3
   125f6:	72e3      	strb	r3, [r4, #11]
   125f8:	2b00      	cmp	r3, #0
   125fa:	d135      	bne.n	12668 <ctr_drbg_update_internal+0xc0>
   125fc:	7aa3      	ldrb	r3, [r4, #10]
   125fe:	3301      	adds	r3, #1
   12600:	b2db      	uxtb	r3, r3
   12602:	72a3      	strb	r3, [r4, #10]
   12604:	2b00      	cmp	r3, #0
   12606:	d12f      	bne.n	12668 <ctr_drbg_update_internal+0xc0>
   12608:	7a63      	ldrb	r3, [r4, #9]
   1260a:	3301      	adds	r3, #1
   1260c:	b2db      	uxtb	r3, r3
   1260e:	7263      	strb	r3, [r4, #9]
   12610:	bb53      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   12612:	7a23      	ldrb	r3, [r4, #8]
   12614:	3301      	adds	r3, #1
   12616:	b2db      	uxtb	r3, r3
   12618:	7223      	strb	r3, [r4, #8]
   1261a:	bb2b      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   1261c:	79e3      	ldrb	r3, [r4, #7]
   1261e:	3301      	adds	r3, #1
   12620:	b2db      	uxtb	r3, r3
   12622:	71e3      	strb	r3, [r4, #7]
   12624:	bb03      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   12626:	79a3      	ldrb	r3, [r4, #6]
   12628:	3301      	adds	r3, #1
   1262a:	b2db      	uxtb	r3, r3
   1262c:	71a3      	strb	r3, [r4, #6]
   1262e:	b9db      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   12630:	7963      	ldrb	r3, [r4, #5]
   12632:	3301      	adds	r3, #1
   12634:	b2db      	uxtb	r3, r3
   12636:	7163      	strb	r3, [r4, #5]
   12638:	b9b3      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   1263a:	7923      	ldrb	r3, [r4, #4]
   1263c:	3301      	adds	r3, #1
   1263e:	b2db      	uxtb	r3, r3
   12640:	7123      	strb	r3, [r4, #4]
   12642:	b98b      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   12644:	78e3      	ldrb	r3, [r4, #3]
   12646:	3301      	adds	r3, #1
   12648:	b2db      	uxtb	r3, r3
   1264a:	70e3      	strb	r3, [r4, #3]
   1264c:	b963      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   1264e:	78a3      	ldrb	r3, [r4, #2]
   12650:	3301      	adds	r3, #1
   12652:	b2db      	uxtb	r3, r3
   12654:	70a3      	strb	r3, [r4, #2]
   12656:	b93b      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   12658:	7863      	ldrb	r3, [r4, #1]
   1265a:	3301      	adds	r3, #1
   1265c:	b2db      	uxtb	r3, r3
   1265e:	7063      	strb	r3, [r4, #1]
   12660:	b913      	cbnz	r3, 12668 <ctr_drbg_update_internal+0xc0>
   12662:	7823      	ldrb	r3, [r4, #0]
   12664:	3301      	adds	r3, #1
   12666:	7023      	strb	r3, [r4, #0]
   12668:	463b      	mov	r3, r7
   1266a:	4622      	mov	r2, r4
   1266c:	2101      	movs	r1, #1
   1266e:	4630      	mov	r0, r6
   12670:	f001 f888 	bl	13784 <cc_mbedtls_aes_crypt_ecb>
   12674:	4680      	mov	r8, r0
   12676:	2800      	cmp	r0, #0
   12678:	d12a      	bne.n	126d0 <ctr_drbg_update_internal+0x128>
   1267a:	3710      	adds	r7, #16
   1267c:	ab08      	add	r3, sp, #32
   1267e:	429f      	cmp	r7, r3
   12680:	d19e      	bne.n	125c0 <ctr_drbg_update_internal+0x18>
   12682:	9900      	ldr	r1, [sp, #0]
   12684:	682b      	ldr	r3, [r5, #0]
   12686:	686a      	ldr	r2, [r5, #4]
   12688:	404b      	eors	r3, r1
   1268a:	9901      	ldr	r1, [sp, #4]
   1268c:	4630      	mov	r0, r6
   1268e:	404a      	eors	r2, r1
   12690:	68ae      	ldr	r6, [r5, #8]
   12692:	9902      	ldr	r1, [sp, #8]
   12694:	9300      	str	r3, [sp, #0]
   12696:	4071      	eors	r1, r6
   12698:	68eb      	ldr	r3, [r5, #12]
   1269a:	9e03      	ldr	r6, [sp, #12]
   1269c:	9201      	str	r2, [sp, #4]
   1269e:	4073      	eors	r3, r6
   126a0:	692a      	ldr	r2, [r5, #16]
   126a2:	9e04      	ldr	r6, [sp, #16]
   126a4:	9102      	str	r1, [sp, #8]
   126a6:	4056      	eors	r6, r2
   126a8:	9905      	ldr	r1, [sp, #20]
   126aa:	696a      	ldr	r2, [r5, #20]
   126ac:	9303      	str	r3, [sp, #12]
   126ae:	4051      	eors	r1, r2
   126b0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   126b4:	9d06      	ldr	r5, [sp, #24]
   126b6:	9105      	str	r1, [sp, #20]
   126b8:	4055      	eors	r5, r2
   126ba:	9a07      	ldr	r2, [sp, #28]
   126bc:	4669      	mov	r1, sp
   126be:	4053      	eors	r3, r2
   126c0:	2280      	movs	r2, #128	; 0x80
   126c2:	e9cd 5306 	strd	r5, r3, [sp, #24]
   126c6:	9604      	str	r6, [sp, #16]
   126c8:	f001 f842 	bl	13750 <cc_mbedtls_aes_setkey_enc>
   126cc:	4680      	mov	r8, r0
   126ce:	b138      	cbz	r0, 126e0 <ctr_drbg_update_internal+0x138>
   126d0:	4668      	mov	r0, sp
   126d2:	2120      	movs	r1, #32
   126d4:	f7ff fe1e 	bl	12314 <mbedtls_platform_zeroize>
   126d8:	4640      	mov	r0, r8
   126da:	b008      	add	sp, #32
   126dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   126e0:	2210      	movs	r2, #16
   126e2:	4620      	mov	r0, r4
   126e4:	eb0d 0102 	add.w	r1, sp, r2
   126e8:	f002 fc14 	bl	14f14 <memcpy>
   126ec:	e7f0      	b.n	126d0 <ctr_drbg_update_internal+0x128>
   126ee:	bf00      	nop

000126f0 <mbedtls_ctr_drbg_reseed_internal>:
   126f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   126f4:	4604      	mov	r4, r0
   126f6:	6980      	ldr	r0, [r0, #24]
   126f8:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   126fc:	d854      	bhi.n	127a8 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   126fe:	461d      	mov	r5, r3
   12700:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   12704:	42ab      	cmp	r3, r5
   12706:	d34f      	bcc.n	127a8 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   12708:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1270c:	1a18      	subs	r0, r3, r0
   1270e:	4290      	cmp	r0, r2
   12710:	4616      	mov	r6, r2
   12712:	d349      	bcc.n	127a8 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   12714:	f8df 909c 	ldr.w	r9, [pc, #156]	; 127b4 <mbedtls_ctr_drbg_reseed_internal+0xc4>
   12718:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1271c:	460f      	mov	r7, r1
   1271e:	4648      	mov	r0, r9
   12720:	2100      	movs	r1, #0
   12722:	f002 fc02 	bl	14f2a <memset>
   12726:	4649      	mov	r1, r9
   12728:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1272c:	69a2      	ldr	r2, [r4, #24]
   1272e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   12732:	4798      	blx	r3
   12734:	2800      	cmp	r0, #0
   12736:	d13a      	bne.n	127ae <mbedtls_ctr_drbg_reseed_internal+0xbe>
   12738:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1273c:	b14d      	cbz	r5, 12752 <mbedtls_ctr_drbg_reseed_internal+0x62>
   1273e:	462a      	mov	r2, r5
   12740:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   12744:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   12748:	eb09 0108 	add.w	r1, r9, r8
   1274c:	4798      	blx	r3
   1274e:	bb70      	cbnz	r0, 127ae <mbedtls_ctr_drbg_reseed_internal+0xbe>
   12750:	44a8      	add	r8, r5
   12752:	b107      	cbz	r7, 12756 <mbedtls_ctr_drbg_reseed_internal+0x66>
   12754:	b9c6      	cbnz	r6, 12788 <mbedtls_ctr_drbg_reseed_internal+0x98>
   12756:	4917      	ldr	r1, [pc, #92]	; (127b4 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   12758:	4642      	mov	r2, r8
   1275a:	4608      	mov	r0, r1
   1275c:	f7ff fde4 	bl	12328 <block_cipher_df>
   12760:	4605      	mov	r5, r0
   12762:	b138      	cbz	r0, 12774 <mbedtls_ctr_drbg_reseed_internal+0x84>
   12764:	f44f 71c0 	mov.w	r1, #384	; 0x180
   12768:	4812      	ldr	r0, [pc, #72]	; (127b4 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   1276a:	f7ff fdd3 	bl	12314 <mbedtls_platform_zeroize>
   1276e:	4628      	mov	r0, r5
   12770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12774:	4620      	mov	r0, r4
   12776:	490f      	ldr	r1, [pc, #60]	; (127b4 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   12778:	f7ff ff16 	bl	125a8 <ctr_drbg_update_internal>
   1277c:	4605      	mov	r5, r0
   1277e:	2800      	cmp	r0, #0
   12780:	d1f0      	bne.n	12764 <mbedtls_ctr_drbg_reseed_internal+0x74>
   12782:	2301      	movs	r3, #1
   12784:	6123      	str	r3, [r4, #16]
   12786:	e7ed      	b.n	12764 <mbedtls_ctr_drbg_reseed_internal+0x74>
   12788:	4639      	mov	r1, r7
   1278a:	4632      	mov	r2, r6
   1278c:	eb09 0008 	add.w	r0, r9, r8
   12790:	f002 fbc0 	bl	14f14 <memcpy>
   12794:	4907      	ldr	r1, [pc, #28]	; (127b4 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   12796:	44b0      	add	r8, r6
   12798:	4642      	mov	r2, r8
   1279a:	4608      	mov	r0, r1
   1279c:	f7ff fdc4 	bl	12328 <block_cipher_df>
   127a0:	4605      	mov	r5, r0
   127a2:	2800      	cmp	r0, #0
   127a4:	d1de      	bne.n	12764 <mbedtls_ctr_drbg_reseed_internal+0x74>
   127a6:	e7e5      	b.n	12774 <mbedtls_ctr_drbg_reseed_internal+0x84>
   127a8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   127ac:	e7df      	b.n	1276e <mbedtls_ctr_drbg_reseed_internal+0x7e>
   127ae:	f06f 0533 	mvn.w	r5, #51	; 0x33
   127b2:	e7dc      	b.n	1276e <mbedtls_ctr_drbg_reseed_internal+0x7e>
   127b4:	20000c58 	.word	0x20000c58

000127b8 <cc_mbedtls_ctr_drbg_init>:
   127b8:	b510      	push	{r4, lr}
   127ba:	22a4      	movs	r2, #164	; 0xa4
   127bc:	2100      	movs	r1, #0
   127be:	4604      	mov	r4, r0
   127c0:	f002 fbb3 	bl	14f2a <memset>
   127c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   127c8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   127cc:	4b04      	ldr	r3, [pc, #16]	; (127e0 <cc_mbedtls_ctr_drbg_init+0x28>)
   127ce:	6121      	str	r1, [r4, #16]
   127d0:	61e2      	str	r2, [r4, #28]
   127d2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   127d6:	681b      	ldr	r3, [r3, #0]
   127d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   127dc:	4718      	bx	r3
   127de:	bf00      	nop
   127e0:	200000fc 	.word	0x200000fc

000127e4 <cc_mbedtls_ctr_drbg_seed>:
   127e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   127e8:	4605      	mov	r5, r0
   127ea:	b085      	sub	sp, #20
   127ec:	460f      	mov	r7, r1
   127ee:	4616      	mov	r6, r2
   127f0:	4668      	mov	r0, sp
   127f2:	2210      	movs	r2, #16
   127f4:	2100      	movs	r1, #0
   127f6:	4699      	mov	r9, r3
   127f8:	f002 fb97 	bl	14f2a <memset>
   127fc:	4b1e      	ldr	r3, [pc, #120]	; (12878 <cc_mbedtls_ctr_drbg_seed+0x94>)
   127fe:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   12802:	4640      	mov	r0, r8
   12804:	681b      	ldr	r3, [r3, #0]
   12806:	4798      	blx	r3
   12808:	b120      	cbz	r0, 12814 <cc_mbedtls_ctr_drbg_seed+0x30>
   1280a:	4604      	mov	r4, r0
   1280c:	4620      	mov	r0, r4
   1280e:	b005      	add	sp, #20
   12810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12814:	f105 0420 	add.w	r4, r5, #32
   12818:	4620      	mov	r0, r4
   1281a:	f000 ff83 	bl	13724 <cc_mbedtls_aes_init>
   1281e:	69aa      	ldr	r2, [r5, #24]
   12820:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   12824:	b9ea      	cbnz	r2, 12862 <cc_mbedtls_ctr_drbg_seed+0x7e>
   12826:	2220      	movs	r2, #32
   12828:	692e      	ldr	r6, [r5, #16]
   1282a:	61aa      	str	r2, [r5, #24]
   1282c:	2e00      	cmp	r6, #0
   1282e:	db20      	blt.n	12872 <cc_mbedtls_ctr_drbg_seed+0x8e>
   12830:	4620      	mov	r0, r4
   12832:	4669      	mov	r1, sp
   12834:	2280      	movs	r2, #128	; 0x80
   12836:	f000 ff8b 	bl	13750 <cc_mbedtls_aes_setkey_enc>
   1283a:	4604      	mov	r4, r0
   1283c:	b930      	cbnz	r0, 1284c <cc_mbedtls_ctr_drbg_seed+0x68>
   1283e:	4633      	mov	r3, r6
   12840:	4649      	mov	r1, r9
   12842:	4628      	mov	r0, r5
   12844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12846:	f7ff ff53 	bl	126f0 <mbedtls_ctr_drbg_reseed_internal>
   1284a:	4604      	mov	r4, r0
   1284c:	4b0b      	ldr	r3, [pc, #44]	; (1287c <cc_mbedtls_ctr_drbg_seed+0x98>)
   1284e:	4640      	mov	r0, r8
   12850:	681b      	ldr	r3, [r3, #0]
   12852:	4798      	blx	r3
   12854:	2800      	cmp	r0, #0
   12856:	bf18      	it	ne
   12858:	4604      	movne	r4, r0
   1285a:	4620      	mov	r0, r4
   1285c:	b005      	add	sp, #20
   1285e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12862:	692e      	ldr	r6, [r5, #16]
   12864:	2e00      	cmp	r6, #0
   12866:	dae3      	bge.n	12830 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12868:	2a17      	cmp	r2, #23
   1286a:	d802      	bhi.n	12872 <cc_mbedtls_ctr_drbg_seed+0x8e>
   1286c:	1c53      	adds	r3, r2, #1
   1286e:	085e      	lsrs	r6, r3, #1
   12870:	e7de      	b.n	12830 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12872:	2600      	movs	r6, #0
   12874:	e7dc      	b.n	12830 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12876:	bf00      	nop
   12878:	20000100 	.word	0x20000100
   1287c:	20000104 	.word	0x20000104

00012880 <cc_mbedtls_ctr_drbg_random_with_add>:
   12880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12884:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   12888:	b08d      	sub	sp, #52	; 0x34
   1288a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1288e:	f200 80e4 	bhi.w	12a5a <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   12892:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   12896:	f200 80dd 	bhi.w	12a54 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1289a:	4604      	mov	r4, r0
   1289c:	4615      	mov	r5, r2
   1289e:	460e      	mov	r6, r1
   128a0:	2220      	movs	r2, #32
   128a2:	2100      	movs	r1, #0
   128a4:	a804      	add	r0, sp, #16
   128a6:	461f      	mov	r7, r3
   128a8:	f002 fb3f 	bl	14f2a <memset>
   128ac:	4b6c      	ldr	r3, [pc, #432]	; (12a60 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   128ae:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   128b2:	4648      	mov	r0, r9
   128b4:	681b      	ldr	r3, [r3, #0]
   128b6:	4798      	blx	r3
   128b8:	4683      	mov	fp, r0
   128ba:	2800      	cmp	r0, #0
   128bc:	f040 8093 	bne.w	129e6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   128c0:	6922      	ldr	r2, [r4, #16]
   128c2:	69e3      	ldr	r3, [r4, #28]
   128c4:	429a      	cmp	r2, r3
   128c6:	f300 8092 	bgt.w	129ee <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   128ca:	6963      	ldr	r3, [r4, #20]
   128cc:	2b00      	cmp	r3, #0
   128ce:	f040 808e 	bne.w	129ee <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   128d2:	f1b8 0f00 	cmp.w	r8, #0
   128d6:	f040 80a9 	bne.w	12a2c <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   128da:	f8df a188 	ldr.w	sl, [pc, #392]	; 12a64 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   128de:	466f      	mov	r7, sp
   128e0:	2d00      	cmp	r5, #0
   128e2:	f000 8098 	beq.w	12a16 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   128e6:	466f      	mov	r7, sp
   128e8:	f104 0820 	add.w	r8, r4, #32
   128ec:	e00e      	b.n	1290c <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   128ee:	2d10      	cmp	r5, #16
   128f0:	46ab      	mov	fp, r5
   128f2:	bf28      	it	cs
   128f4:	f04f 0b10 	movcs.w	fp, #16
   128f8:	4630      	mov	r0, r6
   128fa:	4639      	mov	r1, r7
   128fc:	465a      	mov	r2, fp
   128fe:	f002 fb09 	bl	14f14 <memcpy>
   12902:	ebb5 050b 	subs.w	r5, r5, fp
   12906:	445e      	add	r6, fp
   12908:	f000 8085 	beq.w	12a16 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1290c:	7be3      	ldrb	r3, [r4, #15]
   1290e:	3301      	adds	r3, #1
   12910:	b2db      	uxtb	r3, r3
   12912:	73e3      	strb	r3, [r4, #15]
   12914:	2b00      	cmp	r3, #0
   12916:	d14d      	bne.n	129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12918:	7ba3      	ldrb	r3, [r4, #14]
   1291a:	3301      	adds	r3, #1
   1291c:	b2db      	uxtb	r3, r3
   1291e:	73a3      	strb	r3, [r4, #14]
   12920:	2b00      	cmp	r3, #0
   12922:	d147      	bne.n	129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12924:	7b63      	ldrb	r3, [r4, #13]
   12926:	3301      	adds	r3, #1
   12928:	b2db      	uxtb	r3, r3
   1292a:	7363      	strb	r3, [r4, #13]
   1292c:	2b00      	cmp	r3, #0
   1292e:	d141      	bne.n	129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12930:	7b23      	ldrb	r3, [r4, #12]
   12932:	3301      	adds	r3, #1
   12934:	b2db      	uxtb	r3, r3
   12936:	7323      	strb	r3, [r4, #12]
   12938:	2b00      	cmp	r3, #0
   1293a:	d13b      	bne.n	129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1293c:	7ae3      	ldrb	r3, [r4, #11]
   1293e:	3301      	adds	r3, #1
   12940:	b2db      	uxtb	r3, r3
   12942:	72e3      	strb	r3, [r4, #11]
   12944:	2b00      	cmp	r3, #0
   12946:	d135      	bne.n	129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12948:	7aa3      	ldrb	r3, [r4, #10]
   1294a:	3301      	adds	r3, #1
   1294c:	b2db      	uxtb	r3, r3
   1294e:	72a3      	strb	r3, [r4, #10]
   12950:	2b00      	cmp	r3, #0
   12952:	d12f      	bne.n	129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12954:	7a63      	ldrb	r3, [r4, #9]
   12956:	3301      	adds	r3, #1
   12958:	b2db      	uxtb	r3, r3
   1295a:	7263      	strb	r3, [r4, #9]
   1295c:	bb53      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1295e:	7a23      	ldrb	r3, [r4, #8]
   12960:	3301      	adds	r3, #1
   12962:	b2db      	uxtb	r3, r3
   12964:	7223      	strb	r3, [r4, #8]
   12966:	bb2b      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12968:	79e3      	ldrb	r3, [r4, #7]
   1296a:	3301      	adds	r3, #1
   1296c:	b2db      	uxtb	r3, r3
   1296e:	71e3      	strb	r3, [r4, #7]
   12970:	bb03      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12972:	79a3      	ldrb	r3, [r4, #6]
   12974:	3301      	adds	r3, #1
   12976:	b2db      	uxtb	r3, r3
   12978:	71a3      	strb	r3, [r4, #6]
   1297a:	b9db      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1297c:	7963      	ldrb	r3, [r4, #5]
   1297e:	3301      	adds	r3, #1
   12980:	b2db      	uxtb	r3, r3
   12982:	7163      	strb	r3, [r4, #5]
   12984:	b9b3      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12986:	7923      	ldrb	r3, [r4, #4]
   12988:	3301      	adds	r3, #1
   1298a:	b2db      	uxtb	r3, r3
   1298c:	7123      	strb	r3, [r4, #4]
   1298e:	b98b      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12990:	78e3      	ldrb	r3, [r4, #3]
   12992:	3301      	adds	r3, #1
   12994:	b2db      	uxtb	r3, r3
   12996:	70e3      	strb	r3, [r4, #3]
   12998:	b963      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1299a:	78a3      	ldrb	r3, [r4, #2]
   1299c:	3301      	adds	r3, #1
   1299e:	b2db      	uxtb	r3, r3
   129a0:	70a3      	strb	r3, [r4, #2]
   129a2:	b93b      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   129a4:	7863      	ldrb	r3, [r4, #1]
   129a6:	3301      	adds	r3, #1
   129a8:	b2db      	uxtb	r3, r3
   129aa:	7063      	strb	r3, [r4, #1]
   129ac:	b913      	cbnz	r3, 129b4 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   129ae:	7823      	ldrb	r3, [r4, #0]
   129b0:	3301      	adds	r3, #1
   129b2:	7023      	strb	r3, [r4, #0]
   129b4:	463b      	mov	r3, r7
   129b6:	4622      	mov	r2, r4
   129b8:	2101      	movs	r1, #1
   129ba:	4640      	mov	r0, r8
   129bc:	f000 fee2 	bl	13784 <cc_mbedtls_aes_crypt_ecb>
   129c0:	4683      	mov	fp, r0
   129c2:	2800      	cmp	r0, #0
   129c4:	d093      	beq.n	128ee <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   129c6:	f8da 3000 	ldr.w	r3, [sl]
   129ca:	4648      	mov	r0, r9
   129cc:	4798      	blx	r3
   129ce:	4603      	mov	r3, r0
   129d0:	2120      	movs	r1, #32
   129d2:	a804      	add	r0, sp, #16
   129d4:	2b00      	cmp	r3, #0
   129d6:	bf18      	it	ne
   129d8:	469b      	movne	fp, r3
   129da:	f7ff fc9b 	bl	12314 <mbedtls_platform_zeroize>
   129de:	4638      	mov	r0, r7
   129e0:	2110      	movs	r1, #16
   129e2:	f7ff fc97 	bl	12314 <mbedtls_platform_zeroize>
   129e6:	4658      	mov	r0, fp
   129e8:	b00d      	add	sp, #52	; 0x34
   129ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ee:	4642      	mov	r2, r8
   129f0:	4639      	mov	r1, r7
   129f2:	2300      	movs	r3, #0
   129f4:	4620      	mov	r0, r4
   129f6:	f7ff fe7b 	bl	126f0 <mbedtls_ctr_drbg_reseed_internal>
   129fa:	f8df a068 	ldr.w	sl, [pc, #104]	; 12a64 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   129fe:	2800      	cmp	r0, #0
   12a00:	f43f af6d 	beq.w	128de <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   12a04:	4648      	mov	r0, r9
   12a06:	f8da 3000 	ldr.w	r3, [sl]
   12a0a:	4798      	blx	r3
   12a0c:	4683      	mov	fp, r0
   12a0e:	2800      	cmp	r0, #0
   12a10:	f43f af65 	beq.w	128de <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   12a14:	e7e7      	b.n	129e6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   12a16:	4620      	mov	r0, r4
   12a18:	a904      	add	r1, sp, #16
   12a1a:	f7ff fdc5 	bl	125a8 <ctr_drbg_update_internal>
   12a1e:	4683      	mov	fp, r0
   12a20:	2800      	cmp	r0, #0
   12a22:	d1d0      	bne.n	129c6 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   12a24:	6923      	ldr	r3, [r4, #16]
   12a26:	3301      	adds	r3, #1
   12a28:	6123      	str	r3, [r4, #16]
   12a2a:	e7cc      	b.n	129c6 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   12a2c:	4642      	mov	r2, r8
   12a2e:	4639      	mov	r1, r7
   12a30:	a804      	add	r0, sp, #16
   12a32:	f7ff fc79 	bl	12328 <block_cipher_df>
   12a36:	4683      	mov	fp, r0
   12a38:	b118      	cbz	r0, 12a42 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   12a3a:	466f      	mov	r7, sp
   12a3c:	f8df a024 	ldr.w	sl, [pc, #36]	; 12a64 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   12a40:	e7c1      	b.n	129c6 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   12a42:	4620      	mov	r0, r4
   12a44:	a904      	add	r1, sp, #16
   12a46:	f7ff fdaf 	bl	125a8 <ctr_drbg_update_internal>
   12a4a:	4683      	mov	fp, r0
   12a4c:	2800      	cmp	r0, #0
   12a4e:	f43f af44 	beq.w	128da <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   12a52:	e7f2      	b.n	12a3a <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   12a54:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   12a58:	e7c5      	b.n	129e6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   12a5a:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   12a5e:	e7c2      	b.n	129e6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   12a60:	20000100 	.word	0x20000100
   12a64:	20000104 	.word	0x20000104

00012a68 <entropy_update>:
   12a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a6c:	2b20      	cmp	r3, #32
   12a6e:	461d      	mov	r5, r3
   12a70:	4606      	mov	r6, r0
   12a72:	4689      	mov	r9, r1
   12a74:	4690      	mov	r8, r2
   12a76:	b08b      	sub	sp, #44	; 0x2c
   12a78:	d826      	bhi.n	12ac8 <entropy_update+0x60>
   12a7a:	b2db      	uxtb	r3, r3
   12a7c:	af02      	add	r7, sp, #8
   12a7e:	6831      	ldr	r1, [r6, #0]
   12a80:	f88d 9004 	strb.w	r9, [sp, #4]
   12a84:	f88d 3005 	strb.w	r3, [sp, #5]
   12a88:	f106 0904 	add.w	r9, r6, #4
   12a8c:	b921      	cbnz	r1, 12a98 <entropy_update+0x30>
   12a8e:	4648      	mov	r0, r9
   12a90:	f000 febc 	bl	1380c <cc_mbedtls_sha256_starts>
   12a94:	4604      	mov	r4, r0
   12a96:	b940      	cbnz	r0, 12aaa <entropy_update+0x42>
   12a98:	2301      	movs	r3, #1
   12a9a:	2202      	movs	r2, #2
   12a9c:	4648      	mov	r0, r9
   12a9e:	6033      	str	r3, [r6, #0]
   12aa0:	a901      	add	r1, sp, #4
   12aa2:	f000 fec7 	bl	13834 <cc_mbedtls_sha256_update>
   12aa6:	4604      	mov	r4, r0
   12aa8:	b138      	cbz	r0, 12aba <entropy_update+0x52>
   12aaa:	4638      	mov	r0, r7
   12aac:	2120      	movs	r1, #32
   12aae:	f7ff fc31 	bl	12314 <mbedtls_platform_zeroize>
   12ab2:	4620      	mov	r0, r4
   12ab4:	b00b      	add	sp, #44	; 0x2c
   12ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12aba:	462a      	mov	r2, r5
   12abc:	4641      	mov	r1, r8
   12abe:	4648      	mov	r0, r9
   12ac0:	f000 feb8 	bl	13834 <cc_mbedtls_sha256_update>
   12ac4:	4604      	mov	r4, r0
   12ac6:	e7f0      	b.n	12aaa <entropy_update+0x42>
   12ac8:	af02      	add	r7, sp, #8
   12aca:	4619      	mov	r1, r3
   12acc:	4610      	mov	r0, r2
   12ace:	2300      	movs	r3, #0
   12ad0:	463a      	mov	r2, r7
   12ad2:	f000 ffb1 	bl	13a38 <cc_mbedtls_sha256>
   12ad6:	4604      	mov	r4, r0
   12ad8:	2800      	cmp	r0, #0
   12ada:	d1e6      	bne.n	12aaa <entropy_update+0x42>
   12adc:	2320      	movs	r3, #32
   12ade:	46b8      	mov	r8, r7
   12ae0:	461d      	mov	r5, r3
   12ae2:	e7cc      	b.n	12a7e <entropy_update+0x16>

00012ae4 <entropy_gather_internal.part.0>:
   12ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ae6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   12aea:	b0a7      	sub	sp, #156	; 0x9c
   12aec:	2b00      	cmp	r3, #0
   12aee:	bfd8      	it	le
   12af0:	ae02      	addle	r6, sp, #8
   12af2:	dd2c      	ble.n	12b4e <entropy_gather_internal.part.0+0x6a>
   12af4:	4605      	mov	r5, r0
   12af6:	2300      	movs	r3, #0
   12af8:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   12afc:	ae02      	add	r6, sp, #8
   12afe:	9301      	str	r3, [sp, #4]
   12b00:	f1a4 0701 	sub.w	r7, r4, #1
   12b04:	4631      	mov	r1, r6
   12b06:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   12b0a:	2290      	movs	r2, #144	; 0x90
   12b0c:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   12b10:	ab01      	add	r3, sp, #4
   12b12:	fab7 f787 	clz	r7, r7
   12b16:	47a0      	blx	r4
   12b18:	097f      	lsrs	r7, r7, #5
   12b1a:	4604      	mov	r4, r0
   12b1c:	b910      	cbnz	r0, 12b24 <entropy_gather_internal.part.0+0x40>
   12b1e:	9b01      	ldr	r3, [sp, #4]
   12b20:	b93b      	cbnz	r3, 12b32 <entropy_gather_internal.part.0+0x4e>
   12b22:	b1a7      	cbz	r7, 12b4e <entropy_gather_internal.part.0+0x6a>
   12b24:	4630      	mov	r0, r6
   12b26:	2190      	movs	r1, #144	; 0x90
   12b28:	f7ff fbf4 	bl	12314 <mbedtls_platform_zeroize>
   12b2c:	4620      	mov	r0, r4
   12b2e:	b027      	add	sp, #156	; 0x9c
   12b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b32:	4601      	mov	r1, r0
   12b34:	4632      	mov	r2, r6
   12b36:	4628      	mov	r0, r5
   12b38:	f7ff ff96 	bl	12a68 <entropy_update>
   12b3c:	b950      	cbnz	r0, 12b54 <entropy_gather_internal.part.0+0x70>
   12b3e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   12b42:	9a01      	ldr	r2, [sp, #4]
   12b44:	4413      	add	r3, r2
   12b46:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   12b4a:	2f00      	cmp	r7, #0
   12b4c:	d1ea      	bne.n	12b24 <entropy_gather_internal.part.0+0x40>
   12b4e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   12b52:	e7e7      	b.n	12b24 <entropy_gather_internal.part.0+0x40>
   12b54:	4604      	mov	r4, r0
   12b56:	4620      	mov	r0, r4
   12b58:	b027      	add	sp, #156	; 0x9c
   12b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012b5c <cc_mbedtls_entropy_init>:
   12b5c:	b570      	push	{r4, r5, r6, lr}
   12b5e:	2500      	movs	r5, #0
   12b60:	4604      	mov	r4, r0
   12b62:	4629      	mov	r1, r5
   12b64:	2214      	movs	r2, #20
   12b66:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   12b6a:	30f8      	adds	r0, #248	; 0xf8
   12b6c:	f002 f9dd 	bl	14f2a <memset>
   12b70:	4b16      	ldr	r3, [pc, #88]	; (12bcc <cc_mbedtls_entropy_init+0x70>)
   12b72:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   12b76:	681b      	ldr	r3, [r3, #0]
   12b78:	4630      	mov	r0, r6
   12b7a:	4798      	blx	r3
   12b7c:	4620      	mov	r0, r4
   12b7e:	f840 5b04 	str.w	r5, [r0], #4
   12b82:	f000 fe29 	bl	137d8 <cc_mbedtls_sha256_init>
   12b86:	4b12      	ldr	r3, [pc, #72]	; (12bd0 <cc_mbedtls_entropy_init+0x74>)
   12b88:	4630      	mov	r0, r6
   12b8a:	681b      	ldr	r3, [r3, #0]
   12b8c:	4798      	blx	r3
   12b8e:	b9d8      	cbnz	r0, 12bc8 <cc_mbedtls_entropy_init+0x6c>
   12b90:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12b94:	42ab      	cmp	r3, r5
   12b96:	dc11      	bgt.n	12bbc <cc_mbedtls_entropy_init+0x60>
   12b98:	2101      	movs	r1, #1
   12b9a:	2520      	movs	r5, #32
   12b9c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12ba0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   12ba4:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   12ba8:	480a      	ldr	r0, [pc, #40]	; (12bd4 <cc_mbedtls_entropy_init+0x78>)
   12baa:	440b      	add	r3, r1
   12bac:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
   12bb0:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
   12bb4:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   12bb8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   12bbc:	4b06      	ldr	r3, [pc, #24]	; (12bd8 <cc_mbedtls_entropy_init+0x7c>)
   12bbe:	4630      	mov	r0, r6
   12bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12bc4:	681b      	ldr	r3, [r3, #0]
   12bc6:	4718      	bx	r3
   12bc8:	bd70      	pop	{r4, r5, r6, pc}
   12bca:	bf00      	nop
   12bcc:	200000fc 	.word	0x200000fc
   12bd0:	20000100 	.word	0x20000100
   12bd4:	00013621 	.word	0x00013621
   12bd8:	20000104 	.word	0x20000104

00012bdc <cc_mbedtls_entropy_func>:
   12bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12be0:	2a20      	cmp	r2, #32
   12be2:	b088      	sub	sp, #32
   12be4:	d878      	bhi.n	12cd8 <cc_mbedtls_entropy_func+0xfc>
   12be6:	4b3e      	ldr	r3, [pc, #248]	; (12ce0 <cc_mbedtls_entropy_func+0x104>)
   12be8:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   12bec:	4604      	mov	r4, r0
   12bee:	681b      	ldr	r3, [r3, #0]
   12bf0:	4648      	mov	r0, r9
   12bf2:	4617      	mov	r7, r2
   12bf4:	4688      	mov	r8, r1
   12bf6:	4798      	blx	r3
   12bf8:	4605      	mov	r5, r0
   12bfa:	bb40      	cbnz	r0, 12c4e <cc_mbedtls_entropy_func+0x72>
   12bfc:	f240 1601 	movw	r6, #257	; 0x101
   12c00:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12c04:	2b00      	cmp	r3, #0
   12c06:	d063      	beq.n	12cd0 <cc_mbedtls_entropy_func+0xf4>
   12c08:	4620      	mov	r0, r4
   12c0a:	f7ff ff6b 	bl	12ae4 <entropy_gather_internal.part.0>
   12c0e:	4605      	mov	r5, r0
   12c10:	2800      	cmp	r0, #0
   12c12:	d15f      	bne.n	12cd4 <cc_mbedtls_entropy_func+0xf8>
   12c14:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12c18:	2b00      	cmp	r3, #0
   12c1a:	dd07      	ble.n	12c2c <cc_mbedtls_entropy_func+0x50>
   12c1c:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   12c20:	4290      	cmp	r0, r2
   12c22:	d303      	bcc.n	12c2c <cc_mbedtls_entropy_func+0x50>
   12c24:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   12c28:	2a01      	cmp	r2, #1
   12c2a:	d014      	beq.n	12c56 <cc_mbedtls_entropy_func+0x7a>
   12c2c:	3e01      	subs	r6, #1
   12c2e:	d1e9      	bne.n	12c04 <cc_mbedtls_entropy_func+0x28>
   12c30:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   12c34:	466e      	mov	r6, sp
   12c36:	4630      	mov	r0, r6
   12c38:	2120      	movs	r1, #32
   12c3a:	f7ff fb6b 	bl	12314 <mbedtls_platform_zeroize>
   12c3e:	4b29      	ldr	r3, [pc, #164]	; (12ce4 <cc_mbedtls_entropy_func+0x108>)
   12c40:	4648      	mov	r0, r9
   12c42:	681b      	ldr	r3, [r3, #0]
   12c44:	4798      	blx	r3
   12c46:	2800      	cmp	r0, #0
   12c48:	bf18      	it	ne
   12c4a:	f06f 051d 	mvnne.w	r5, #29
   12c4e:	4628      	mov	r0, r5
   12c50:	b008      	add	sp, #32
   12c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c56:	281f      	cmp	r0, #31
   12c58:	d9e8      	bls.n	12c2c <cc_mbedtls_entropy_func+0x50>
   12c5a:	466e      	mov	r6, sp
   12c5c:	4629      	mov	r1, r5
   12c5e:	2220      	movs	r2, #32
   12c60:	4630      	mov	r0, r6
   12c62:	f104 0a04 	add.w	sl, r4, #4
   12c66:	f002 f960 	bl	14f2a <memset>
   12c6a:	4631      	mov	r1, r6
   12c6c:	4650      	mov	r0, sl
   12c6e:	f000 fe0b 	bl	13888 <cc_mbedtls_sha256_finish>
   12c72:	4605      	mov	r5, r0
   12c74:	2800      	cmp	r0, #0
   12c76:	d1de      	bne.n	12c36 <cc_mbedtls_entropy_func+0x5a>
   12c78:	4650      	mov	r0, sl
   12c7a:	f000 fdc1 	bl	13800 <cc_mbedtls_sha256_free>
   12c7e:	4650      	mov	r0, sl
   12c80:	f000 fdaa 	bl	137d8 <cc_mbedtls_sha256_init>
   12c84:	4629      	mov	r1, r5
   12c86:	4650      	mov	r0, sl
   12c88:	f000 fdc0 	bl	1380c <cc_mbedtls_sha256_starts>
   12c8c:	4605      	mov	r5, r0
   12c8e:	2800      	cmp	r0, #0
   12c90:	d1d1      	bne.n	12c36 <cc_mbedtls_entropy_func+0x5a>
   12c92:	4650      	mov	r0, sl
   12c94:	2220      	movs	r2, #32
   12c96:	4631      	mov	r1, r6
   12c98:	f000 fdcc 	bl	13834 <cc_mbedtls_sha256_update>
   12c9c:	4605      	mov	r5, r0
   12c9e:	2800      	cmp	r0, #0
   12ca0:	d1c9      	bne.n	12c36 <cc_mbedtls_entropy_func+0x5a>
   12ca2:	4603      	mov	r3, r0
   12ca4:	4632      	mov	r2, r6
   12ca6:	2120      	movs	r1, #32
   12ca8:	4630      	mov	r0, r6
   12caa:	f000 fec5 	bl	13a38 <cc_mbedtls_sha256>
   12cae:	4605      	mov	r5, r0
   12cb0:	2800      	cmp	r0, #0
   12cb2:	d1c0      	bne.n	12c36 <cc_mbedtls_entropy_func+0x5a>
   12cb4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12cb8:	463a      	mov	r2, r7
   12cba:	2b00      	cmp	r3, #0
   12cbc:	bfc8      	it	gt
   12cbe:	2300      	movgt	r3, #0
   12cc0:	4640      	mov	r0, r8
   12cc2:	4631      	mov	r1, r6
   12cc4:	bfc8      	it	gt
   12cc6:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   12cca:	f002 f923 	bl	14f14 <memcpy>
   12cce:	e7b2      	b.n	12c36 <cc_mbedtls_entropy_func+0x5a>
   12cd0:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   12cd4:	466e      	mov	r6, sp
   12cd6:	e7ae      	b.n	12c36 <cc_mbedtls_entropy_func+0x5a>
   12cd8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   12cdc:	e7b7      	b.n	12c4e <cc_mbedtls_entropy_func+0x72>
   12cde:	bf00      	nop
   12ce0:	20000100 	.word	0x20000100
   12ce4:	20000104 	.word	0x20000104

00012ce8 <RndStartupTest.constprop.0>:
   12ce8:	b530      	push	{r4, r5, lr}
   12cea:	b0c3      	sub	sp, #268	; 0x10c
   12cec:	22dc      	movs	r2, #220	; 0xdc
   12cee:	2100      	movs	r1, #0
   12cf0:	a80b      	add	r0, sp, #44	; 0x2c
   12cf2:	f002 f91a 	bl	14f2a <memset>
   12cf6:	2228      	movs	r2, #40	; 0x28
   12cf8:	2100      	movs	r1, #0
   12cfa:	a801      	add	r0, sp, #4
   12cfc:	f002 f915 	bl	14f2a <memset>
   12d00:	a801      	add	r0, sp, #4
   12d02:	f000 fec1 	bl	13a88 <RNG_PLAT_SetUserRngParameters>
   12d06:	4604      	mov	r4, r0
   12d08:	b110      	cbz	r0, 12d10 <RndStartupTest.constprop.0+0x28>
   12d0a:	4620      	mov	r0, r4
   12d0c:	b043      	add	sp, #268	; 0x10c
   12d0e:	bd30      	pop	{r4, r5, pc}
   12d10:	4d18      	ldr	r5, [pc, #96]	; (12d74 <RndStartupTest.constprop.0+0x8c>)
   12d12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12d16:	6828      	ldr	r0, [r5, #0]
   12d18:	f000 f93a 	bl	12f90 <CC_PalMutexLock>
   12d1c:	4604      	mov	r4, r0
   12d1e:	b9c0      	cbnz	r0, 12d52 <RndStartupTest.constprop.0+0x6a>
   12d20:	2000      	movs	r0, #0
   12d22:	f000 f965 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   12d26:	bb00      	cbnz	r0, 12d6a <RndStartupTest.constprop.0+0x82>
   12d28:	4a13      	ldr	r2, [pc, #76]	; (12d78 <RndStartupTest.constprop.0+0x90>)
   12d2a:	a901      	add	r1, sp, #4
   12d2c:	a80b      	add	r0, sp, #44	; 0x2c
   12d2e:	f000 fc69 	bl	13604 <LLF_RND_RunTrngStartupTest>
   12d32:	4604      	mov	r4, r0
   12d34:	2001      	movs	r0, #1
   12d36:	f000 f95b 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   12d3a:	b990      	cbnz	r0, 12d62 <RndStartupTest.constprop.0+0x7a>
   12d3c:	6828      	ldr	r0, [r5, #0]
   12d3e:	f000 f92f 	bl	12fa0 <CC_PalMutexUnlock>
   12d42:	2800      	cmp	r0, #0
   12d44:	d0e1      	beq.n	12d0a <RndStartupTest.constprop.0+0x22>
   12d46:	480d      	ldr	r0, [pc, #52]	; (12d7c <RndStartupTest.constprop.0+0x94>)
   12d48:	f7ff f9d8 	bl	120fc <CC_PalAbort>
   12d4c:	4620      	mov	r0, r4
   12d4e:	b043      	add	sp, #268	; 0x10c
   12d50:	bd30      	pop	{r4, r5, pc}
   12d52:	480b      	ldr	r0, [pc, #44]	; (12d80 <RndStartupTest.constprop.0+0x98>)
   12d54:	f7ff f9d2 	bl	120fc <CC_PalAbort>
   12d58:	2c01      	cmp	r4, #1
   12d5a:	bf08      	it	eq
   12d5c:	2405      	moveq	r4, #5
   12d5e:	d0ed      	beq.n	12d3c <RndStartupTest.constprop.0+0x54>
   12d60:	e7de      	b.n	12d20 <RndStartupTest.constprop.0+0x38>
   12d62:	4808      	ldr	r0, [pc, #32]	; (12d84 <RndStartupTest.constprop.0+0x9c>)
   12d64:	f7ff f9ca 	bl	120fc <CC_PalAbort>
   12d68:	e7e8      	b.n	12d3c <RndStartupTest.constprop.0+0x54>
   12d6a:	4807      	ldr	r0, [pc, #28]	; (12d88 <RndStartupTest.constprop.0+0xa0>)
   12d6c:	f7ff f9c6 	bl	120fc <CC_PalAbort>
   12d70:	e7da      	b.n	12d28 <RndStartupTest.constprop.0+0x40>
   12d72:	bf00      	nop
   12d74:	200000f8 	.word	0x200000f8
   12d78:	20000e40 	.word	0x20000e40
   12d7c:	00015ac4 	.word	0x00015ac4
   12d80:	00015a6c 	.word	0x00015a6c
   12d84:	00015aa4 	.word	0x00015aa4
   12d88:	00015a84 	.word	0x00015a84

00012d8c <CC_LibInit>:
   12d8c:	b510      	push	{r4, lr}
   12d8e:	b082      	sub	sp, #8
   12d90:	f000 f854 	bl	12e3c <CC_HalInit>
   12d94:	b128      	cbz	r0, 12da2 <CC_LibInit+0x16>
   12d96:	f000 f8a3 	bl	12ee0 <CC_PalTerminate>
   12d9a:	2403      	movs	r4, #3
   12d9c:	4620      	mov	r0, r4
   12d9e:	b002      	add	sp, #8
   12da0:	bd10      	pop	{r4, pc}
   12da2:	f000 f86f 	bl	12e84 <CC_PalInit>
   12da6:	b9d0      	cbnz	r0, 12dde <CC_LibInit+0x52>
   12da8:	f000 f922 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   12dac:	b9d8      	cbnz	r0, 12de6 <CC_LibInit+0x5a>
   12dae:	4b1e      	ldr	r3, [pc, #120]	; (12e28 <CC_LibInit+0x9c>)
   12db0:	681b      	ldr	r3, [r3, #0]
   12db2:	0e1b      	lsrs	r3, r3, #24
   12db4:	2bf0      	cmp	r3, #240	; 0xf0
   12db6:	d10a      	bne.n	12dce <CC_LibInit+0x42>
   12db8:	4a1c      	ldr	r2, [pc, #112]	; (12e2c <CC_LibInit+0xa0>)
   12dba:	4b1d      	ldr	r3, [pc, #116]	; (12e30 <CC_LibInit+0xa4>)
   12dbc:	6812      	ldr	r2, [r2, #0]
   12dbe:	429a      	cmp	r2, r3
   12dc0:	d029      	beq.n	12e16 <CC_LibInit+0x8a>
   12dc2:	f000 f83d 	bl	12e40 <CC_HalTerminate>
   12dc6:	2407      	movs	r4, #7
   12dc8:	f000 f88a 	bl	12ee0 <CC_PalTerminate>
   12dcc:	e7e6      	b.n	12d9c <CC_LibInit+0x10>
   12dce:	2406      	movs	r4, #6
   12dd0:	f000 f836 	bl	12e40 <CC_HalTerminate>
   12dd4:	f000 f884 	bl	12ee0 <CC_PalTerminate>
   12dd8:	4620      	mov	r0, r4
   12dda:	b002      	add	sp, #8
   12ddc:	bd10      	pop	{r4, pc}
   12dde:	2404      	movs	r4, #4
   12de0:	4620      	mov	r0, r4
   12de2:	b002      	add	sp, #8
   12de4:	bd10      	pop	{r4, pc}
   12de6:	f000 f82b 	bl	12e40 <CC_HalTerminate>
   12dea:	f000 f879 	bl	12ee0 <CC_PalTerminate>
   12dee:	f7ff ff7b 	bl	12ce8 <RndStartupTest.constprop.0>
   12df2:	4604      	mov	r4, r0
   12df4:	b958      	cbnz	r0, 12e0e <CC_LibInit+0x82>
   12df6:	4602      	mov	r2, r0
   12df8:	4601      	mov	r1, r0
   12dfa:	f7ff f9a3 	bl	12144 <nrf_cc3xx_platform_ctr_drbg_init>
   12dfe:	b930      	cbnz	r0, 12e0e <CC_LibInit+0x82>
   12e00:	2268      	movs	r2, #104	; 0x68
   12e02:	490c      	ldr	r1, [pc, #48]	; (12e34 <CC_LibInit+0xa8>)
   12e04:	ab01      	add	r3, sp, #4
   12e06:	f7ff f9d1 	bl	121ac <nrf_cc3xx_platform_ctr_drbg_get>
   12e0a:	2800      	cmp	r0, #0
   12e0c:	d0c6      	beq.n	12d9c <CC_LibInit+0x10>
   12e0e:	2405      	movs	r4, #5
   12e10:	4620      	mov	r0, r4
   12e12:	b002      	add	sp, #8
   12e14:	bd10      	pop	{r4, pc}
   12e16:	2001      	movs	r0, #1
   12e18:	f000 f8ea 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   12e1c:	2800      	cmp	r0, #0
   12e1e:	d1e2      	bne.n	12de6 <CC_LibInit+0x5a>
   12e20:	4b05      	ldr	r3, [pc, #20]	; (12e38 <CC_LibInit+0xac>)
   12e22:	6018      	str	r0, [r3, #0]
   12e24:	e7e3      	b.n	12dee <CC_LibInit+0x62>
   12e26:	bf00      	nop
   12e28:	50841928 	.word	0x50841928
   12e2c:	50841a24 	.word	0x50841a24
   12e30:	20e00000 	.word	0x20e00000
   12e34:	20000dd8 	.word	0x20000dd8
   12e38:	50841a0c 	.word	0x50841a0c

00012e3c <CC_HalInit>:
   12e3c:	2000      	movs	r0, #0
   12e3e:	4770      	bx	lr

00012e40 <CC_HalTerminate>:
   12e40:	2000      	movs	r0, #0
   12e42:	4770      	bx	lr

00012e44 <CC_HalClearInterruptBit>:
   12e44:	0543      	lsls	r3, r0, #21
   12e46:	d503      	bpl.n	12e50 <CC_HalClearInterruptBit+0xc>
   12e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12e4c:	4b02      	ldr	r3, [pc, #8]	; (12e58 <CC_HalClearInterruptBit+0x14>)
   12e4e:	601a      	str	r2, [r3, #0]
   12e50:	4b02      	ldr	r3, [pc, #8]	; (12e5c <CC_HalClearInterruptBit+0x18>)
   12e52:	6018      	str	r0, [r3, #0]
   12e54:	4770      	bx	lr
   12e56:	bf00      	nop
   12e58:	50841108 	.word	0x50841108
   12e5c:	50841a08 	.word	0x50841a08

00012e60 <CC_HalMaskInterrupt>:
   12e60:	4b01      	ldr	r3, [pc, #4]	; (12e68 <CC_HalMaskInterrupt+0x8>)
   12e62:	6018      	str	r0, [r3, #0]
   12e64:	4770      	bx	lr
   12e66:	bf00      	nop
   12e68:	50841a04 	.word	0x50841a04

00012e6c <CC_HalWaitInterrupt>:
   12e6c:	b108      	cbz	r0, 12e72 <CC_HalWaitInterrupt+0x6>
   12e6e:	f000 b86d 	b.w	12f4c <CC_PalWaitInterrupt>
   12e72:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   12e76:	4770      	bx	lr

00012e78 <CC_HalWaitInterruptRND>:
   12e78:	b108      	cbz	r0, 12e7e <CC_HalWaitInterruptRND+0x6>
   12e7a:	f000 b84f 	b.w	12f1c <CC_PalWaitInterruptRND>
   12e7e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   12e82:	4770      	bx	lr

00012e84 <CC_PalInit>:
   12e84:	b510      	push	{r4, lr}
   12e86:	4811      	ldr	r0, [pc, #68]	; (12ecc <CC_PalInit+0x48>)
   12e88:	f000 f86e 	bl	12f68 <CC_PalMutexCreate>
   12e8c:	b100      	cbz	r0, 12e90 <CC_PalInit+0xc>
   12e8e:	bd10      	pop	{r4, pc}
   12e90:	480f      	ldr	r0, [pc, #60]	; (12ed0 <CC_PalInit+0x4c>)
   12e92:	f000 f869 	bl	12f68 <CC_PalMutexCreate>
   12e96:	2800      	cmp	r0, #0
   12e98:	d1f9      	bne.n	12e8e <CC_PalInit+0xa>
   12e9a:	4c0e      	ldr	r4, [pc, #56]	; (12ed4 <CC_PalInit+0x50>)
   12e9c:	4620      	mov	r0, r4
   12e9e:	f000 f863 	bl	12f68 <CC_PalMutexCreate>
   12ea2:	2800      	cmp	r0, #0
   12ea4:	d1f3      	bne.n	12e8e <CC_PalInit+0xa>
   12ea6:	4b0c      	ldr	r3, [pc, #48]	; (12ed8 <CC_PalInit+0x54>)
   12ea8:	480c      	ldr	r0, [pc, #48]	; (12edc <CC_PalInit+0x58>)
   12eaa:	601c      	str	r4, [r3, #0]
   12eac:	f000 f85c 	bl	12f68 <CC_PalMutexCreate>
   12eb0:	4601      	mov	r1, r0
   12eb2:	2800      	cmp	r0, #0
   12eb4:	d1eb      	bne.n	12e8e <CC_PalInit+0xa>
   12eb6:	f000 f82d 	bl	12f14 <CC_PalDmaInit>
   12eba:	4604      	mov	r4, r0
   12ebc:	b108      	cbz	r0, 12ec2 <CC_PalInit+0x3e>
   12ebe:	4620      	mov	r0, r4
   12ec0:	bd10      	pop	{r4, pc}
   12ec2:	f000 f877 	bl	12fb4 <CC_PalPowerSaveModeInit>
   12ec6:	4620      	mov	r0, r4
   12ec8:	e7fa      	b.n	12ec0 <CC_PalInit+0x3c>
   12eca:	bf00      	nop
   12ecc:	200000f4 	.word	0x200000f4
   12ed0:	200000e8 	.word	0x200000e8
   12ed4:	200000f0 	.word	0x200000f0
   12ed8:	200000f8 	.word	0x200000f8
   12edc:	200000ec 	.word	0x200000ec

00012ee0 <CC_PalTerminate>:
   12ee0:	b508      	push	{r3, lr}
   12ee2:	4808      	ldr	r0, [pc, #32]	; (12f04 <CC_PalTerminate+0x24>)
   12ee4:	f000 f84a 	bl	12f7c <CC_PalMutexDestroy>
   12ee8:	4807      	ldr	r0, [pc, #28]	; (12f08 <CC_PalTerminate+0x28>)
   12eea:	f000 f847 	bl	12f7c <CC_PalMutexDestroy>
   12eee:	4807      	ldr	r0, [pc, #28]	; (12f0c <CC_PalTerminate+0x2c>)
   12ef0:	f000 f844 	bl	12f7c <CC_PalMutexDestroy>
   12ef4:	4806      	ldr	r0, [pc, #24]	; (12f10 <CC_PalTerminate+0x30>)
   12ef6:	f000 f841 	bl	12f7c <CC_PalMutexDestroy>
   12efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12efe:	f000 b80b 	b.w	12f18 <CC_PalDmaTerminate>
   12f02:	bf00      	nop
   12f04:	200000f4 	.word	0x200000f4
   12f08:	200000e8 	.word	0x200000e8
   12f0c:	200000f0 	.word	0x200000f0
   12f10:	200000ec 	.word	0x200000ec

00012f14 <CC_PalDmaInit>:
   12f14:	2000      	movs	r0, #0
   12f16:	4770      	bx	lr

00012f18 <CC_PalDmaTerminate>:
   12f18:	4770      	bx	lr
   12f1a:	bf00      	nop

00012f1c <CC_PalWaitInterruptRND>:
   12f1c:	4602      	mov	r2, r0
   12f1e:	4807      	ldr	r0, [pc, #28]	; (12f3c <CC_PalWaitInterruptRND+0x20>)
   12f20:	6803      	ldr	r3, [r0, #0]
   12f22:	4213      	tst	r3, r2
   12f24:	d0fc      	beq.n	12f20 <CC_PalWaitInterruptRND+0x4>
   12f26:	b121      	cbz	r1, 12f32 <CC_PalWaitInterruptRND+0x16>
   12f28:	4b05      	ldr	r3, [pc, #20]	; (12f40 <CC_PalWaitInterruptRND+0x24>)
   12f2a:	4806      	ldr	r0, [pc, #24]	; (12f44 <CC_PalWaitInterruptRND+0x28>)
   12f2c:	681b      	ldr	r3, [r3, #0]
   12f2e:	600b      	str	r3, [r1, #0]
   12f30:	6003      	str	r3, [r0, #0]
   12f32:	4b05      	ldr	r3, [pc, #20]	; (12f48 <CC_PalWaitInterruptRND+0x2c>)
   12f34:	2000      	movs	r0, #0
   12f36:	601a      	str	r2, [r3, #0]
   12f38:	4770      	bx	lr
   12f3a:	bf00      	nop
   12f3c:	50841a00 	.word	0x50841a00
   12f40:	50841104 	.word	0x50841104
   12f44:	50841108 	.word	0x50841108
   12f48:	50841a08 	.word	0x50841a08

00012f4c <CC_PalWaitInterrupt>:
   12f4c:	4602      	mov	r2, r0
   12f4e:	4904      	ldr	r1, [pc, #16]	; (12f60 <CC_PalWaitInterrupt+0x14>)
   12f50:	680b      	ldr	r3, [r1, #0]
   12f52:	421a      	tst	r2, r3
   12f54:	d0fc      	beq.n	12f50 <CC_PalWaitInterrupt+0x4>
   12f56:	4b03      	ldr	r3, [pc, #12]	; (12f64 <CC_PalWaitInterrupt+0x18>)
   12f58:	2000      	movs	r0, #0
   12f5a:	601a      	str	r2, [r3, #0]
   12f5c:	4770      	bx	lr
   12f5e:	bf00      	nop
   12f60:	50841a00 	.word	0x50841a00
   12f64:	50841a08 	.word	0x50841a08

00012f68 <CC_PalMutexCreate>:
   12f68:	b508      	push	{r3, lr}
   12f6a:	4b03      	ldr	r3, [pc, #12]	; (12f78 <CC_PalMutexCreate+0x10>)
   12f6c:	6802      	ldr	r2, [r0, #0]
   12f6e:	681b      	ldr	r3, [r3, #0]
   12f70:	6810      	ldr	r0, [r2, #0]
   12f72:	4798      	blx	r3
   12f74:	2000      	movs	r0, #0
   12f76:	bd08      	pop	{r3, pc}
   12f78:	200000a8 	.word	0x200000a8

00012f7c <CC_PalMutexDestroy>:
   12f7c:	b508      	push	{r3, lr}
   12f7e:	4b03      	ldr	r3, [pc, #12]	; (12f8c <CC_PalMutexDestroy+0x10>)
   12f80:	6802      	ldr	r2, [r0, #0]
   12f82:	685b      	ldr	r3, [r3, #4]
   12f84:	6810      	ldr	r0, [r2, #0]
   12f86:	4798      	blx	r3
   12f88:	2000      	movs	r0, #0
   12f8a:	bd08      	pop	{r3, pc}
   12f8c:	200000a8 	.word	0x200000a8

00012f90 <CC_PalMutexLock>:
   12f90:	4b02      	ldr	r3, [pc, #8]	; (12f9c <CC_PalMutexLock+0xc>)
   12f92:	6802      	ldr	r2, [r0, #0]
   12f94:	689b      	ldr	r3, [r3, #8]
   12f96:	6810      	ldr	r0, [r2, #0]
   12f98:	4718      	bx	r3
   12f9a:	bf00      	nop
   12f9c:	200000a8 	.word	0x200000a8

00012fa0 <CC_PalMutexUnlock>:
   12fa0:	b508      	push	{r3, lr}
   12fa2:	4b03      	ldr	r3, [pc, #12]	; (12fb0 <CC_PalMutexUnlock+0x10>)
   12fa4:	6802      	ldr	r2, [r0, #0]
   12fa6:	68db      	ldr	r3, [r3, #12]
   12fa8:	6810      	ldr	r0, [r2, #0]
   12faa:	4798      	blx	r3
   12fac:	2000      	movs	r0, #0
   12fae:	bd08      	pop	{r3, pc}
   12fb0:	200000a8 	.word	0x200000a8

00012fb4 <CC_PalPowerSaveModeInit>:
   12fb4:	b570      	push	{r4, r5, r6, lr}
   12fb6:	4c09      	ldr	r4, [pc, #36]	; (12fdc <CC_PalPowerSaveModeInit+0x28>)
   12fb8:	4d09      	ldr	r5, [pc, #36]	; (12fe0 <CC_PalPowerSaveModeInit+0x2c>)
   12fba:	6920      	ldr	r0, [r4, #16]
   12fbc:	68ab      	ldr	r3, [r5, #8]
   12fbe:	4798      	blx	r3
   12fc0:	b118      	cbz	r0, 12fca <CC_PalPowerSaveModeInit+0x16>
   12fc2:	4b08      	ldr	r3, [pc, #32]	; (12fe4 <CC_PalPowerSaveModeInit+0x30>)
   12fc4:	4808      	ldr	r0, [pc, #32]	; (12fe8 <CC_PalPowerSaveModeInit+0x34>)
   12fc6:	685b      	ldr	r3, [r3, #4]
   12fc8:	4798      	blx	r3
   12fca:	2100      	movs	r1, #0
   12fcc:	4a07      	ldr	r2, [pc, #28]	; (12fec <CC_PalPowerSaveModeInit+0x38>)
   12fce:	68eb      	ldr	r3, [r5, #12]
   12fd0:	6011      	str	r1, [r2, #0]
   12fd2:	6920      	ldr	r0, [r4, #16]
   12fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12fd8:	4718      	bx	r3
   12fda:	bf00      	nop
   12fdc:	200000b8 	.word	0x200000b8
   12fe0:	200000a8 	.word	0x200000a8
   12fe4:	20000098 	.word	0x20000098
   12fe8:	00015adc 	.word	0x00015adc
   12fec:	20001060 	.word	0x20001060

00012ff0 <CC_PalPowerSaveModeSelect>:
   12ff0:	b570      	push	{r4, r5, r6, lr}
   12ff2:	4d1a      	ldr	r5, [pc, #104]	; (1305c <CC_PalPowerSaveModeSelect+0x6c>)
   12ff4:	4e1a      	ldr	r6, [pc, #104]	; (13060 <CC_PalPowerSaveModeSelect+0x70>)
   12ff6:	4604      	mov	r4, r0
   12ff8:	68b2      	ldr	r2, [r6, #8]
   12ffa:	6928      	ldr	r0, [r5, #16]
   12ffc:	4790      	blx	r2
   12ffe:	b9f0      	cbnz	r0, 1303e <CC_PalPowerSaveModeSelect+0x4e>
   13000:	b15c      	cbz	r4, 1301a <CC_PalPowerSaveModeSelect+0x2a>
   13002:	4c18      	ldr	r4, [pc, #96]	; (13064 <CC_PalPowerSaveModeSelect+0x74>)
   13004:	6823      	ldr	r3, [r4, #0]
   13006:	b1ab      	cbz	r3, 13034 <CC_PalPowerSaveModeSelect+0x44>
   13008:	2b01      	cmp	r3, #1
   1300a:	d01a      	beq.n	13042 <CC_PalPowerSaveModeSelect+0x52>
   1300c:	3b01      	subs	r3, #1
   1300e:	6023      	str	r3, [r4, #0]
   13010:	6928      	ldr	r0, [r5, #16]
   13012:	68f3      	ldr	r3, [r6, #12]
   13014:	4798      	blx	r3
   13016:	2000      	movs	r0, #0
   13018:	bd70      	pop	{r4, r5, r6, pc}
   1301a:	4c12      	ldr	r4, [pc, #72]	; (13064 <CC_PalPowerSaveModeSelect+0x74>)
   1301c:	6821      	ldr	r1, [r4, #0]
   1301e:	b939      	cbnz	r1, 13030 <CC_PalPowerSaveModeSelect+0x40>
   13020:	2001      	movs	r0, #1
   13022:	4b11      	ldr	r3, [pc, #68]	; (13068 <CC_PalPowerSaveModeSelect+0x78>)
   13024:	4a11      	ldr	r2, [pc, #68]	; (1306c <CC_PalPowerSaveModeSelect+0x7c>)
   13026:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1302a:	6813      	ldr	r3, [r2, #0]
   1302c:	2b00      	cmp	r3, #0
   1302e:	d1fc      	bne.n	1302a <CC_PalPowerSaveModeSelect+0x3a>
   13030:	3101      	adds	r1, #1
   13032:	6021      	str	r1, [r4, #0]
   13034:	68f3      	ldr	r3, [r6, #12]
   13036:	6928      	ldr	r0, [r5, #16]
   13038:	4798      	blx	r3
   1303a:	2000      	movs	r0, #0
   1303c:	bd70      	pop	{r4, r5, r6, pc}
   1303e:	480c      	ldr	r0, [pc, #48]	; (13070 <CC_PalPowerSaveModeSelect+0x80>)
   13040:	bd70      	pop	{r4, r5, r6, pc}
   13042:	4a0a      	ldr	r2, [pc, #40]	; (1306c <CC_PalPowerSaveModeSelect+0x7c>)
   13044:	6813      	ldr	r3, [r2, #0]
   13046:	2b00      	cmp	r3, #0
   13048:	d1fc      	bne.n	13044 <CC_PalPowerSaveModeSelect+0x54>
   1304a:	4a07      	ldr	r2, [pc, #28]	; (13068 <CC_PalPowerSaveModeSelect+0x78>)
   1304c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   13050:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   13054:	f7ff ff04 	bl	12e60 <CC_HalMaskInterrupt>
   13058:	6823      	ldr	r3, [r4, #0]
   1305a:	e7d7      	b.n	1300c <CC_PalPowerSaveModeSelect+0x1c>
   1305c:	200000b8 	.word	0x200000b8
   13060:	200000a8 	.word	0x200000a8
   13064:	20001060 	.word	0x20001060
   13068:	50840000 	.word	0x50840000
   1306c:	50841910 	.word	0x50841910
   13070:	ffff8fe9 	.word	0xffff8fe9

00013074 <mutex_init>:
   13074:	4b01      	ldr	r3, [pc, #4]	; (1307c <mutex_init+0x8>)
   13076:	681b      	ldr	r3, [r3, #0]
   13078:	4718      	bx	r3
   1307a:	bf00      	nop
   1307c:	200000a8 	.word	0x200000a8

00013080 <mutex_lock>:
   13080:	4b01      	ldr	r3, [pc, #4]	; (13088 <mutex_lock+0x8>)
   13082:	689b      	ldr	r3, [r3, #8]
   13084:	4718      	bx	r3
   13086:	bf00      	nop
   13088:	200000a8 	.word	0x200000a8

0001308c <mutex_unlock>:
   1308c:	4b01      	ldr	r3, [pc, #4]	; (13094 <mutex_unlock+0x8>)
   1308e:	68db      	ldr	r3, [r3, #12]
   13090:	4718      	bx	r3
   13092:	bf00      	nop
   13094:	200000a8 	.word	0x200000a8

00013098 <startTrngHW>:
   13098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1309c:	2800      	cmp	r0, #0
   1309e:	d07c      	beq.n	1319a <startTrngHW+0x102>
   130a0:	460c      	mov	r4, r1
   130a2:	2900      	cmp	r1, #0
   130a4:	d079      	beq.n	1319a <startTrngHW+0x102>
   130a6:	461d      	mov	r5, r3
   130a8:	2b00      	cmp	r3, #0
   130aa:	d076      	beq.n	1319a <startTrngHW+0x102>
   130ac:	4606      	mov	r6, r0
   130ae:	b122      	cbz	r2, 130ba <startTrngHW+0x22>
   130b0:	2201      	movs	r2, #1
   130b2:	2300      	movs	r3, #0
   130b4:	602a      	str	r2, [r5, #0]
   130b6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   130ba:	682b      	ldr	r3, [r5, #0]
   130bc:	2b00      	cmp	r3, #0
   130be:	d068      	beq.n	13192 <startTrngHW+0xfa>
   130c0:	4629      	mov	r1, r5
   130c2:	4620      	mov	r0, r4
   130c4:	f000 fddc 	bl	13c80 <LLF_RND_GetFastestRosc>
   130c8:	4607      	mov	r7, r0
   130ca:	2800      	cmp	r0, #0
   130cc:	d162      	bne.n	13194 <startTrngHW+0xfc>
   130ce:	4621      	mov	r1, r4
   130d0:	6828      	ldr	r0, [r5, #0]
   130d2:	f000 fdb7 	bl	13c44 <LLF_RND_GetRoscSampleCnt>
   130d6:	4607      	mov	r7, r0
   130d8:	2800      	cmp	r0, #0
   130da:	d15b      	bne.n	13194 <startTrngHW+0xfc>
   130dc:	682b      	ldr	r3, [r5, #0]
   130de:	2b08      	cmp	r3, #8
   130e0:	d06a      	beq.n	131b8 <startTrngHW+0x120>
   130e2:	2b04      	cmp	r3, #4
   130e4:	d06b      	beq.n	131be <startTrngHW+0x126>
   130e6:	f1a3 0802 	sub.w	r8, r3, #2
   130ea:	fab8 f888 	clz	r8, r8
   130ee:	ea4f 1858 	mov.w	r8, r8, lsr #5
   130f2:	2301      	movs	r3, #1
   130f4:	469c      	mov	ip, r3
   130f6:	4a33      	ldr	r2, [pc, #204]	; (131c4 <startTrngHW+0x12c>)
   130f8:	4933      	ldr	r1, [pc, #204]	; (131c8 <startTrngHW+0x130>)
   130fa:	6013      	str	r3, [r2, #0]
   130fc:	4610      	mov	r0, r2
   130fe:	600b      	str	r3, [r1, #0]
   13100:	3a94      	subs	r2, #148	; 0x94
   13102:	f8c0 c000 	str.w	ip, [r0]
   13106:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13108:	6013      	str	r3, [r2, #0]
   1310a:	6811      	ldr	r1, [r2, #0]
   1310c:	428b      	cmp	r3, r1
   1310e:	d1f8      	bne.n	13102 <startTrngHW+0x6a>
   13110:	f04f 0900 	mov.w	r9, #0
   13114:	4b2d      	ldr	r3, [pc, #180]	; (131cc <startTrngHW+0x134>)
   13116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1311a:	f8c3 9000 	str.w	r9, [r3]
   1311e:	f7ff fe91 	bl	12e44 <CC_HalClearInterruptBit>
   13122:	f06f 021b 	mvn.w	r2, #27
   13126:	4b2a      	ldr	r3, [pc, #168]	; (131d0 <startTrngHW+0x138>)
   13128:	4648      	mov	r0, r9
   1312a:	601a      	str	r2, [r3, #0]
   1312c:	f7ff fe98 	bl	12e60 <CC_HalMaskInterrupt>
   13130:	4a28      	ldr	r2, [pc, #160]	; (131d4 <startTrngHW+0x13c>)
   13132:	4b29      	ldr	r3, [pc, #164]	; (131d8 <startTrngHW+0x140>)
   13134:	f8c2 8000 	str.w	r8, [r2]
   13138:	6818      	ldr	r0, [r3, #0]
   1313a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1313e:	f7ff fe8f 	bl	12e60 <CC_HalMaskInterrupt>
   13142:	220a      	movs	r2, #10
   13144:	4b25      	ldr	r3, [pc, #148]	; (131dc <startTrngHW+0x144>)
   13146:	601a      	str	r2, [r3, #0]
   13148:	9a08      	ldr	r2, [sp, #32]
   1314a:	6923      	ldr	r3, [r4, #16]
   1314c:	2a01      	cmp	r2, #1
   1314e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13150:	d027      	beq.n	131a2 <startTrngHW+0x10a>
   13152:	4a23      	ldr	r2, [pc, #140]	; (131e0 <startTrngHW+0x148>)
   13154:	fba2 2303 	umull	r2, r3, r2, r3
   13158:	091b      	lsrs	r3, r3, #4
   1315a:	2201      	movs	r2, #1
   1315c:	fb03 f301 	mul.w	r3, r3, r1
   13160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13164:	491f      	ldr	r1, [pc, #124]	; (131e4 <startTrngHW+0x14c>)
   13166:	03db      	lsls	r3, r3, #15
   13168:	099b      	lsrs	r3, r3, #6
   1316a:	600b      	str	r3, [r1, #0]
   1316c:	4b17      	ldr	r3, [pc, #92]	; (131cc <startTrngHW+0x134>)
   1316e:	4638      	mov	r0, r7
   13170:	601a      	str	r2, [r3, #0]
   13172:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   13176:	682a      	ldr	r2, [r5, #0]
   13178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1317c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   13180:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   13184:	682a      	ldr	r2, [r5, #0]
   13186:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1318a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1318e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13192:	4f15      	ldr	r7, [pc, #84]	; (131e8 <startTrngHW+0x150>)
   13194:	4638      	mov	r0, r7
   13196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1319a:	4f14      	ldr	r7, [pc, #80]	; (131ec <startTrngHW+0x154>)
   1319c:	4638      	mov	r0, r7
   1319e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   131a2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   131a6:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   131aa:	3201      	adds	r2, #1
   131ac:	d002      	beq.n	131b4 <startTrngHW+0x11c>
   131ae:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   131b2:	e7ce      	b.n	13152 <startTrngHW+0xba>
   131b4:	2316      	movs	r3, #22
   131b6:	e7d0      	b.n	1315a <startTrngHW+0xc2>
   131b8:	f04f 0803 	mov.w	r8, #3
   131bc:	e799      	b.n	130f2 <startTrngHW+0x5a>
   131be:	f04f 0802 	mov.w	r8, #2
   131c2:	e796      	b.n	130f2 <startTrngHW+0x5a>
   131c4:	508411c4 	.word	0x508411c4
   131c8:	50841140 	.word	0x50841140
   131cc:	5084112c 	.word	0x5084112c
   131d0:	50841100 	.word	0x50841100
   131d4:	5084110c 	.word	0x5084110c
   131d8:	50841a04 	.word	0x50841a04
   131dc:	50841138 	.word	0x50841138
   131e0:	aaaaaaab 	.word	0xaaaaaaab
   131e4:	508411d8 	.word	0x508411d8
   131e8:	00f10c31 	.word	0x00f10c31
   131ec:	00f10c35 	.word	0x00f10c35

000131f0 <LLF_RND_RepetitionCounterTest.part.0>:
   131f0:	b4f0      	push	{r4, r5, r6, r7}
   131f2:	2400      	movs	r4, #0
   131f4:	00c9      	lsls	r1, r1, #3
   131f6:	4626      	mov	r6, r4
   131f8:	4627      	mov	r7, r4
   131fa:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   131fe:	e006      	b.n	1320e <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   13200:	429f      	cmp	r7, r3
   13202:	d015      	beq.n	13230 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   13204:	2601      	movs	r6, #1
   13206:	4565      	cmp	r5, ip
   13208:	d818      	bhi.n	1323c <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   1320a:	462c      	mov	r4, r5
   1320c:	461f      	mov	r7, r3
   1320e:	0963      	lsrs	r3, r4, #5
   13210:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13214:	f004 011f 	and.w	r1, r4, #31
   13218:	40cb      	lsrs	r3, r1
   1321a:	291f      	cmp	r1, #31
   1321c:	f104 0501 	add.w	r5, r4, #1
   13220:	bf18      	it	ne
   13222:	f003 0301 	andne.w	r3, r3, #1
   13226:	2c00      	cmp	r4, #0
   13228:	d1ea      	bne.n	13200 <LLF_RND_RepetitionCounterTest.part.0+0x10>
   1322a:	2601      	movs	r6, #1
   1322c:	4635      	mov	r5, r6
   1322e:	e7ec      	b.n	1320a <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   13230:	3601      	adds	r6, #1
   13232:	4296      	cmp	r6, r2
   13234:	d1e7      	bne.n	13206 <LLF_RND_RepetitionCounterTest.part.0+0x16>
   13236:	4803      	ldr	r0, [pc, #12]	; (13244 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   13238:	bcf0      	pop	{r4, r5, r6, r7}
   1323a:	4770      	bx	lr
   1323c:	2000      	movs	r0, #0
   1323e:	bcf0      	pop	{r4, r5, r6, r7}
   13240:	4770      	bx	lr
   13242:	bf00      	nop
   13244:	00f10c36 	.word	0x00f10c36

00013248 <LLF_RND_AdaptiveProportionTest>:
   13248:	2800      	cmp	r0, #0
   1324a:	d05f      	beq.n	1330c <LLF_RND_AdaptiveProportionTest+0xc4>
   1324c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13250:	1e4c      	subs	r4, r1, #1
   13252:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   13256:	d226      	bcs.n	132a6 <LLF_RND_AdaptiveProportionTest+0x5e>
   13258:	b32b      	cbz	r3, 132a6 <LLF_RND_AdaptiveProportionTest+0x5e>
   1325a:	b322      	cbz	r2, 132a6 <LLF_RND_AdaptiveProportionTest+0x5e>
   1325c:	00cc      	lsls	r4, r1, #3
   1325e:	2b01      	cmp	r3, #1
   13260:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   13264:	d02f      	beq.n	132c6 <LLF_RND_AdaptiveProportionTest+0x7e>
   13266:	2100      	movs	r1, #0
   13268:	468c      	mov	ip, r1
   1326a:	460f      	mov	r7, r1
   1326c:	460d      	mov	r5, r1
   1326e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   13272:	094c      	lsrs	r4, r1, #5
   13274:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   13278:	f001 061f 	and.w	r6, r1, #31
   1327c:	40f4      	lsrs	r4, r6
   1327e:	2e1f      	cmp	r6, #31
   13280:	bf18      	it	ne
   13282:	f004 0401 	andne.w	r4, r4, #1
   13286:	b921      	cbnz	r1, 13292 <LLF_RND_AdaptiveProportionTest+0x4a>
   13288:	2501      	movs	r5, #1
   1328a:	46ac      	mov	ip, r5
   1328c:	4629      	mov	r1, r5
   1328e:	4627      	mov	r7, r4
   13290:	e7ef      	b.n	13272 <LLF_RND_AdaptiveProportionTest+0x2a>
   13292:	42ab      	cmp	r3, r5
   13294:	d013      	beq.n	132be <LLF_RND_AdaptiveProportionTest+0x76>
   13296:	42a7      	cmp	r7, r4
   13298:	d101      	bne.n	1329e <LLF_RND_AdaptiveProportionTest+0x56>
   1329a:	f10c 0c01 	add.w	ip, ip, #1
   1329e:	4545      	cmp	r5, r8
   132a0:	d104      	bne.n	132ac <LLF_RND_AdaptiveProportionTest+0x64>
   132a2:	4562      	cmp	r2, ip
   132a4:	d202      	bcs.n	132ac <LLF_RND_AdaptiveProportionTest+0x64>
   132a6:	481a      	ldr	r0, [pc, #104]	; (13310 <LLF_RND_AdaptiveProportionTest+0xc8>)
   132a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132ac:	463c      	mov	r4, r7
   132ae:	3101      	adds	r1, #1
   132b0:	458e      	cmp	lr, r1
   132b2:	f105 0501 	add.w	r5, r5, #1
   132b6:	d2ea      	bcs.n	1328e <LLF_RND_AdaptiveProportionTest+0x46>
   132b8:	2000      	movs	r0, #0
   132ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   132be:	2500      	movs	r5, #0
   132c0:	f04f 0c01 	mov.w	ip, #1
   132c4:	e7f3      	b.n	132ae <LLF_RND_AdaptiveProportionTest+0x66>
   132c6:	2600      	movs	r6, #0
   132c8:	46b4      	mov	ip, r6
   132ca:	4637      	mov	r7, r6
   132cc:	4631      	mov	r1, r6
   132ce:	094b      	lsrs	r3, r1, #5
   132d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   132d4:	f001 051f 	and.w	r5, r1, #31
   132d8:	40eb      	lsrs	r3, r5
   132da:	2d1f      	cmp	r5, #31
   132dc:	bf18      	it	ne
   132de:	f003 0301 	andne.w	r3, r3, #1
   132e2:	b139      	cbz	r1, 132f4 <LLF_RND_AdaptiveProportionTest+0xac>
   132e4:	b95f      	cbnz	r7, 132fe <LLF_RND_AdaptiveProportionTest+0xb6>
   132e6:	459c      	cmp	ip, r3
   132e8:	d001      	beq.n	132ee <LLF_RND_AdaptiveProportionTest+0xa6>
   132ea:	4663      	mov	r3, ip
   132ec:	e008      	b.n	13300 <LLF_RND_AdaptiveProportionTest+0xb8>
   132ee:	4663      	mov	r3, ip
   132f0:	3601      	adds	r6, #1
   132f2:	e005      	b.n	13300 <LLF_RND_AdaptiveProportionTest+0xb8>
   132f4:	2601      	movs	r6, #1
   132f6:	4631      	mov	r1, r6
   132f8:	469c      	mov	ip, r3
   132fa:	2701      	movs	r7, #1
   132fc:	e7e7      	b.n	132ce <LLF_RND_AdaptiveProportionTest+0x86>
   132fe:	463e      	mov	r6, r7
   13300:	42b2      	cmp	r2, r6
   13302:	d3d0      	bcc.n	132a6 <LLF_RND_AdaptiveProportionTest+0x5e>
   13304:	3101      	adds	r1, #1
   13306:	42a1      	cmp	r1, r4
   13308:	d1f6      	bne.n	132f8 <LLF_RND_AdaptiveProportionTest+0xb0>
   1330a:	e7d5      	b.n	132b8 <LLF_RND_AdaptiveProportionTest+0x70>
   1330c:	4800      	ldr	r0, [pc, #0]	; (13310 <LLF_RND_AdaptiveProportionTest+0xc8>)
   1330e:	4770      	bx	lr
   13310:	00f10c37 	.word	0x00f10c37

00013314 <getTrngSource>:
   13314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13318:	b08d      	sub	sp, #52	; 0x34
   1331a:	9e18      	ldr	r6, [sp, #96]	; 0x60
   1331c:	4607      	mov	r7, r0
   1331e:	460c      	mov	r4, r1
   13320:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   13322:	2e00      	cmp	r6, #0
   13324:	d14d      	bne.n	133c2 <getTrngSource+0xae>
   13326:	f8d1 b010 	ldr.w	fp, [r1, #16]
   1332a:	2100      	movs	r1, #0
   1332c:	601d      	str	r5, [r3, #0]
   1332e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13330:	6019      	str	r1, [r3, #0]
   13332:	2a00      	cmp	r2, #0
   13334:	f000 8123 	beq.w	1357e <getTrngSource+0x26a>
   13338:	4a9d      	ldr	r2, [pc, #628]	; (135b0 <getTrngSource+0x29c>)
   1333a:	4b9e      	ldr	r3, [pc, #632]	; (135b4 <getTrngSource+0x2a0>)
   1333c:	6811      	ldr	r1, [r2, #0]
   1333e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13340:	681b      	ldr	r3, [r3, #0]
   13342:	429a      	cmp	r2, r3
   13344:	d148      	bne.n	133d8 <getTrngSource+0xc4>
   13346:	290a      	cmp	r1, #10
   13348:	d146      	bne.n	133d8 <getTrngSource+0xc4>
   1334a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   1334e:	9304      	str	r3, [sp, #16]
   13350:	2304      	movs	r3, #4
   13352:	46b8      	mov	r8, r7
   13354:	9302      	str	r3, [sp, #8]
   13356:	4b98      	ldr	r3, [pc, #608]	; (135b8 <getTrngSource+0x2a4>)
   13358:	fba3 230b 	umull	r2, r3, r3, fp
   1335c:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   13360:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   13364:	f105 0208 	add.w	r2, r5, #8
   13368:	9203      	str	r2, [sp, #12]
   1336a:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   1336e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13370:	f8c3 b000 	str.w	fp, [r3]
   13374:	f1bb 0f00 	cmp.w	fp, #0
   13378:	f000 80c7 	beq.w	1350a <getTrngSource+0x1f6>
   1337c:	465d      	mov	r5, fp
   1337e:	f04f 0900 	mov.w	r9, #0
   13382:	9e03      	ldr	r6, [sp, #12]
   13384:	f000 fc8c 	bl	13ca0 <LLF_RND_TurnOffTrng>
   13388:	2300      	movs	r3, #0
   1338a:	9305      	str	r3, [sp, #20]
   1338c:	f1b8 0f00 	cmp.w	r8, #0
   13390:	f000 80e9 	beq.w	13566 <getTrngSource+0x252>
   13394:	2c00      	cmp	r4, #0
   13396:	f000 80e6 	beq.w	13566 <getTrngSource+0x252>
   1339a:	9b04      	ldr	r3, [sp, #16]
   1339c:	2b00      	cmp	r3, #0
   1339e:	f000 80e0 	beq.w	13562 <getTrngSource+0x24e>
   133a2:	4620      	mov	r0, r4
   133a4:	a904      	add	r1, sp, #16
   133a6:	f000 fc6b 	bl	13c80 <LLF_RND_GetFastestRosc>
   133aa:	b1b8      	cbz	r0, 133dc <getTrngSource+0xc8>
   133ac:	4b83      	ldr	r3, [pc, #524]	; (135bc <getTrngSource+0x2a8>)
   133ae:	4298      	cmp	r0, r3
   133b0:	f040 80ab 	bne.w	1350a <getTrngSource+0x1f6>
   133b4:	9002      	str	r0, [sp, #8]
   133b6:	f000 fc73 	bl	13ca0 <LLF_RND_TurnOffTrng>
   133ba:	9802      	ldr	r0, [sp, #8]
   133bc:	b00d      	add	sp, #52	; 0x34
   133be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133c2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   133c6:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   133ca:	3001      	adds	r0, #1
   133cc:	bf0c      	ite	eq
   133ce:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   133d2:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   133d6:	e7a8      	b.n	1332a <getTrngSource+0x16>
   133d8:	4879      	ldr	r0, [pc, #484]	; (135c0 <getTrngSource+0x2ac>)
   133da:	e7eb      	b.n	133b4 <getTrngSource+0xa0>
   133dc:	4621      	mov	r1, r4
   133de:	9804      	ldr	r0, [sp, #16]
   133e0:	f000 fc30 	bl	13c44 <LLF_RND_GetRoscSampleCnt>
   133e4:	2800      	cmp	r0, #0
   133e6:	d1e1      	bne.n	133ac <getTrngSource+0x98>
   133e8:	9f04      	ldr	r7, [sp, #16]
   133ea:	2f08      	cmp	r7, #8
   133ec:	f000 80bd 	beq.w	1356a <getTrngSource+0x256>
   133f0:	2f04      	cmp	r7, #4
   133f2:	f000 80bc 	beq.w	1356e <getTrngSource+0x25a>
   133f6:	f1a7 0702 	sub.w	r7, r7, #2
   133fa:	fab7 f787 	clz	r7, r7
   133fe:	097f      	lsrs	r7, r7, #5
   13400:	2301      	movs	r3, #1
   13402:	4619      	mov	r1, r3
   13404:	486f      	ldr	r0, [pc, #444]	; (135c4 <getTrngSource+0x2b0>)
   13406:	6003      	str	r3, [r0, #0]
   13408:	f840 3c84 	str.w	r3, [r0, #-132]
   1340c:	4b6d      	ldr	r3, [pc, #436]	; (135c4 <getTrngSource+0x2b0>)
   1340e:	4869      	ldr	r0, [pc, #420]	; (135b4 <getTrngSource+0x2a0>)
   13410:	6019      	str	r1, [r3, #0]
   13412:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13414:	6003      	str	r3, [r0, #0]
   13416:	6800      	ldr	r0, [r0, #0]
   13418:	4283      	cmp	r3, r0
   1341a:	d1f7      	bne.n	1340c <getTrngSource+0xf8>
   1341c:	2300      	movs	r3, #0
   1341e:	4a6a      	ldr	r2, [pc, #424]	; (135c8 <getTrngSource+0x2b4>)
   13420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13424:	6013      	str	r3, [r2, #0]
   13426:	f7ff fd0d 	bl	12e44 <CC_HalClearInterruptBit>
   1342a:	2300      	movs	r3, #0
   1342c:	f06f 011b 	mvn.w	r1, #27
   13430:	4618      	mov	r0, r3
   13432:	4b66      	ldr	r3, [pc, #408]	; (135cc <getTrngSource+0x2b8>)
   13434:	6019      	str	r1, [r3, #0]
   13436:	f7ff fd13 	bl	12e60 <CC_HalMaskInterrupt>
   1343a:	4965      	ldr	r1, [pc, #404]	; (135d0 <getTrngSource+0x2bc>)
   1343c:	4b65      	ldr	r3, [pc, #404]	; (135d4 <getTrngSource+0x2c0>)
   1343e:	600f      	str	r7, [r1, #0]
   13440:	6818      	ldr	r0, [r3, #0]
   13442:	4f5d      	ldr	r7, [pc, #372]	; (135b8 <getTrngSource+0x2a4>)
   13444:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   13448:	f7ff fd0a 	bl	12e60 <CC_HalMaskInterrupt>
   1344c:	210a      	movs	r1, #10
   1344e:	2201      	movs	r2, #1
   13450:	4b57      	ldr	r3, [pc, #348]	; (135b0 <getTrngSource+0x29c>)
   13452:	4861      	ldr	r0, [pc, #388]	; (135d8 <getTrngSource+0x2c4>)
   13454:	6019      	str	r1, [r3, #0]
   13456:	6921      	ldr	r1, [r4, #16]
   13458:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1345a:	fba7 c101 	umull	ip, r1, r7, r1
   1345e:	0909      	lsrs	r1, r1, #4
   13460:	fb03 f301 	mul.w	r3, r3, r1
   13464:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13468:	03db      	lsls	r3, r3, #15
   1346a:	099b      	lsrs	r3, r3, #6
   1346c:	6003      	str	r3, [r0, #0]
   1346e:	4b56      	ldr	r3, [pc, #344]	; (135c8 <getTrngSource+0x2b4>)
   13470:	a805      	add	r0, sp, #20
   13472:	601a      	str	r2, [r3, #0]
   13474:	9904      	ldr	r1, [sp, #16]
   13476:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1347a:	020b      	lsls	r3, r1, #8
   1347c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   13480:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13484:	4313      	orrs	r3, r2
   13486:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1348a:	f000 fbcb 	bl	13c24 <LLF_RND_WaitRngInterrupt>
   1348e:	9b05      	ldr	r3, [sp, #20]
   13490:	f003 031a 	and.w	r3, r3, #26
   13494:	4303      	orrs	r3, r0
   13496:	d138      	bne.n	1350a <getTrngSource+0x1f6>
   13498:	4b50      	ldr	r3, [pc, #320]	; (135dc <getTrngSource+0x2c8>)
   1349a:	fba7 2705 	umull	r2, r7, r7, r5
   1349e:	681a      	ldr	r2, [r3, #0]
   134a0:	3314      	adds	r3, #20
   134a2:	9206      	str	r2, [sp, #24]
   134a4:	f853 2c10 	ldr.w	r2, [r3, #-16]
   134a8:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   134ac:	9207      	str	r2, [sp, #28]
   134ae:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   134b2:	9208      	str	r2, [sp, #32]
   134b4:	f853 2c08 	ldr.w	r2, [r3, #-8]
   134b8:	9209      	str	r2, [sp, #36]	; 0x24
   134ba:	f853 2c04 	ldr.w	r2, [r3, #-4]
   134be:	920a      	str	r2, [sp, #40]	; 0x28
   134c0:	681b      	ldr	r3, [r3, #0]
   134c2:	930b      	str	r3, [sp, #44]	; 0x2c
   134c4:	d102      	bne.n	134cc <getTrngSource+0x1b8>
   134c6:	f1ba 0f00 	cmp.w	sl, #0
   134ca:	d141      	bne.n	13550 <getTrngSource+0x23c>
   134cc:	2218      	movs	r2, #24
   134ce:	4630      	mov	r0, r6
   134d0:	eb0d 0102 	add.w	r1, sp, r2
   134d4:	f000 fb16 	bl	13b04 <CC_PalMemCopyPlat>
   134d8:	3d18      	subs	r5, #24
   134da:	3618      	adds	r6, #24
   134dc:	f109 0901 	add.w	r9, r9, #1
   134e0:	2d00      	cmp	r5, #0
   134e2:	f47f af4f 	bne.w	13384 <getTrngSource+0x70>
   134e6:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   134ea:	d85d      	bhi.n	135a8 <getTrngSource+0x294>
   134ec:	9d03      	ldr	r5, [sp, #12]
   134ee:	4659      	mov	r1, fp
   134f0:	4628      	mov	r0, r5
   134f2:	6962      	ldr	r2, [r4, #20]
   134f4:	f7ff fe7c 	bl	131f0 <LLF_RND_RepetitionCounterTest.part.0>
   134f8:	2800      	cmp	r0, #0
   134fa:	d04b      	beq.n	13594 <getTrngSource+0x280>
   134fc:	2300      	movs	r3, #0
   134fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13500:	6013      	str	r3, [r2, #0]
   13502:	4b2e      	ldr	r3, [pc, #184]	; (135bc <getTrngSource+0x2a8>)
   13504:	4298      	cmp	r0, r3
   13506:	f43f af55 	beq.w	133b4 <getTrngSource+0xa0>
   1350a:	9d04      	ldr	r5, [sp, #16]
   1350c:	2d08      	cmp	r5, #8
   1350e:	d034      	beq.n	1357a <getTrngSource+0x266>
   13510:	2200      	movs	r2, #0
   13512:	ab04      	add	r3, sp, #16
   13514:	4621      	mov	r1, r4
   13516:	4640      	mov	r0, r8
   13518:	006d      	lsls	r5, r5, #1
   1351a:	9200      	str	r2, [sp, #0]
   1351c:	9504      	str	r5, [sp, #16]
   1351e:	f7ff fdbb 	bl	13098 <startTrngHW>
   13522:	4b2f      	ldr	r3, [pc, #188]	; (135e0 <getTrngSource+0x2cc>)
   13524:	4298      	cmp	r0, r3
   13526:	d024      	beq.n	13572 <getTrngSource+0x25e>
   13528:	2800      	cmp	r0, #0
   1352a:	f47f af43 	bne.w	133b4 <getTrngSource+0xa0>
   1352e:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   13532:	0a13      	lsrs	r3, r2, #8
   13534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   13538:	4313      	orrs	r3, r2
   1353a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1353e:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   13542:	9b02      	ldr	r3, [sp, #8]
   13544:	3b01      	subs	r3, #1
   13546:	9302      	str	r3, [sp, #8]
   13548:	f47f af11 	bne.w	1336e <getTrngSource+0x5a>
   1354c:	2000      	movs	r0, #0
   1354e:	e731      	b.n	133b4 <getTrngSource+0xa0>
   13550:	4630      	mov	r0, r6
   13552:	4652      	mov	r2, sl
   13554:	a906      	add	r1, sp, #24
   13556:	f000 fad5 	bl	13b04 <CC_PalMemCopyPlat>
   1355a:	eba5 050a 	sub.w	r5, r5, sl
   1355e:	4456      	add	r6, sl
   13560:	e7bc      	b.n	134dc <getTrngSource+0x1c8>
   13562:	481f      	ldr	r0, [pc, #124]	; (135e0 <getTrngSource+0x2cc>)
   13564:	e722      	b.n	133ac <getTrngSource+0x98>
   13566:	481f      	ldr	r0, [pc, #124]	; (135e4 <getTrngSource+0x2d0>)
   13568:	e720      	b.n	133ac <getTrngSource+0x98>
   1356a:	2703      	movs	r7, #3
   1356c:	e748      	b.n	13400 <getTrngSource+0xec>
   1356e:	2702      	movs	r7, #2
   13570:	e746      	b.n	13400 <getTrngSource+0xec>
   13572:	6a23      	ldr	r3, [r4, #32]
   13574:	2b00      	cmp	r3, #0
   13576:	f43f af1d 	beq.w	133b4 <getTrngSource+0xa0>
   1357a:	481b      	ldr	r0, [pc, #108]	; (135e8 <getTrngSource+0x2d4>)
   1357c:	e71a      	b.n	133b4 <getTrngSource+0xa0>
   1357e:	2201      	movs	r2, #1
   13580:	4621      	mov	r1, r4
   13582:	4638      	mov	r0, r7
   13584:	9600      	str	r6, [sp, #0]
   13586:	ab04      	add	r3, sp, #16
   13588:	f7ff fd86 	bl	13098 <startTrngHW>
   1358c:	2800      	cmp	r0, #0
   1358e:	f43f aedf 	beq.w	13350 <getTrngSource+0x3c>
   13592:	e70f      	b.n	133b4 <getTrngSource+0xa0>
   13594:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13598:	4659      	mov	r1, fp
   1359a:	4628      	mov	r0, r5
   1359c:	69a2      	ldr	r2, [r4, #24]
   1359e:	f7ff fe53 	bl	13248 <LLF_RND_AdaptiveProportionTest>
   135a2:	2800      	cmp	r0, #0
   135a4:	d1aa      	bne.n	134fc <getTrngSource+0x1e8>
   135a6:	e7d1      	b.n	1354c <getTrngSource+0x238>
   135a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   135aa:	601d      	str	r5, [r3, #0]
   135ac:	e7ad      	b.n	1350a <getTrngSource+0x1f6>
   135ae:	bf00      	nop
   135b0:	50841138 	.word	0x50841138
   135b4:	50841130 	.word	0x50841130
   135b8:	aaaaaaab 	.word	0xaaaaaaab
   135bc:	00f10c02 	.word	0x00f10c02
   135c0:	00f10c30 	.word	0x00f10c30
   135c4:	508411c4 	.word	0x508411c4
   135c8:	5084112c 	.word	0x5084112c
   135cc:	50841100 	.word	0x50841100
   135d0:	5084110c 	.word	0x5084110c
   135d4:	50841a04 	.word	0x50841a04
   135d8:	508411d8 	.word	0x508411d8
   135dc:	50841114 	.word	0x50841114
   135e0:	00f10c31 	.word	0x00f10c31
   135e4:	00f10c35 	.word	0x00f10c35
   135e8:	00f10c32 	.word	0x00f10c32

000135ec <LLF_RND_GetTrngSource>:
   135ec:	2300      	movs	r3, #0
   135ee:	b430      	push	{r4, r5}
   135f0:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
   135f4:	9304      	str	r3, [sp, #16]
   135f6:	9b02      	ldr	r3, [sp, #8]
   135f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
   135fc:	bc30      	pop	{r4, r5}
   135fe:	f7ff be89 	b.w	13314 <getTrngSource>
   13602:	bf00      	nop

00013604 <LLF_RND_RunTrngStartupTest>:
   13604:	b510      	push	{r4, lr}
   13606:	2401      	movs	r4, #1
   13608:	b086      	sub	sp, #24
   1360a:	ab05      	add	r3, sp, #20
   1360c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   13610:	9300      	str	r3, [sp, #0]
   13612:	2200      	movs	r2, #0
   13614:	ab04      	add	r3, sp, #16
   13616:	f7ff fe7d 	bl	13314 <getTrngSource>
   1361a:	b006      	add	sp, #24
   1361c:	bd10      	pop	{r4, pc}
   1361e:	bf00      	nop

00013620 <mbedtls_hardware_poll>:
   13620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13624:	b088      	sub	sp, #32
   13626:	9205      	str	r2, [sp, #20]
   13628:	2900      	cmp	r1, #0
   1362a:	d068      	beq.n	136fe <mbedtls_hardware_poll+0xde>
   1362c:	461c      	mov	r4, r3
   1362e:	2b00      	cmp	r3, #0
   13630:	d065      	beq.n	136fe <mbedtls_hardware_poll+0xde>
   13632:	4615      	mov	r5, r2
   13634:	2a00      	cmp	r2, #0
   13636:	d062      	beq.n	136fe <mbedtls_hardware_poll+0xde>
   13638:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 13720 <mbedtls_hardware_poll+0x100>
   1363c:	460e      	mov	r6, r1
   1363e:	f8d8 0000 	ldr.w	r0, [r8]
   13642:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13646:	f7ff fca3 	bl	12f90 <CC_PalMutexLock>
   1364a:	2800      	cmp	r0, #0
   1364c:	d14c      	bne.n	136e8 <mbedtls_hardware_poll+0xc8>
   1364e:	2000      	movs	r0, #0
   13650:	f7ff fcce 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   13654:	2800      	cmp	r0, #0
   13656:	d143      	bne.n	136e0 <mbedtls_hardware_poll+0xc0>
   13658:	482a      	ldr	r0, [pc, #168]	; (13704 <mbedtls_hardware_poll+0xe4>)
   1365a:	f000 fa15 	bl	13a88 <RNG_PLAT_SetUserRngParameters>
   1365e:	b1e8      	cbz	r0, 1369c <mbedtls_hardware_poll+0x7c>
   13660:	2001      	movs	r0, #1
   13662:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13666:	f7ff fcc3 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   1366a:	2800      	cmp	r0, #0
   1366c:	d134      	bne.n	136d8 <mbedtls_hardware_poll+0xb8>
   1366e:	f44f 7108 	mov.w	r1, #544	; 0x220
   13672:	4825      	ldr	r0, [pc, #148]	; (13708 <mbedtls_hardware_poll+0xe8>)
   13674:	f7fe fe44 	bl	12300 <mbedtls_zeroize_internal>
   13678:	21dc      	movs	r1, #220	; 0xdc
   1367a:	4824      	ldr	r0, [pc, #144]	; (1370c <mbedtls_hardware_poll+0xec>)
   1367c:	f7fe fe40 	bl	12300 <mbedtls_zeroize_internal>
   13680:	4820      	ldr	r0, [pc, #128]	; (13704 <mbedtls_hardware_poll+0xe4>)
   13682:	2128      	movs	r1, #40	; 0x28
   13684:	f7fe fe3c 	bl	12300 <mbedtls_zeroize_internal>
   13688:	f8d8 0000 	ldr.w	r0, [r8]
   1368c:	f7ff fc88 	bl	12fa0 <CC_PalMutexUnlock>
   13690:	2800      	cmp	r0, #0
   13692:	d12d      	bne.n	136f0 <mbedtls_hardware_poll+0xd0>
   13694:	4638      	mov	r0, r7
   13696:	b008      	add	sp, #32
   13698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1369c:	491a      	ldr	r1, [pc, #104]	; (13708 <mbedtls_hardware_poll+0xe8>)
   1369e:	ab07      	add	r3, sp, #28
   136a0:	4602      	mov	r2, r0
   136a2:	9003      	str	r0, [sp, #12]
   136a4:	9102      	str	r1, [sp, #8]
   136a6:	9300      	str	r3, [sp, #0]
   136a8:	4916      	ldr	r1, [pc, #88]	; (13704 <mbedtls_hardware_poll+0xe4>)
   136aa:	4818      	ldr	r0, [pc, #96]	; (1370c <mbedtls_hardware_poll+0xec>)
   136ac:	9401      	str	r4, [sp, #4]
   136ae:	ab05      	add	r3, sp, #20
   136b0:	f7ff ff9c 	bl	135ec <LLF_RND_GetTrngSource>
   136b4:	2800      	cmp	r0, #0
   136b6:	d1d3      	bne.n	13660 <mbedtls_hardware_poll+0x40>
   136b8:	6823      	ldr	r3, [r4, #0]
   136ba:	42ab      	cmp	r3, r5
   136bc:	d3d0      	bcc.n	13660 <mbedtls_hardware_poll+0x40>
   136be:	9907      	ldr	r1, [sp, #28]
   136c0:	4607      	mov	r7, r0
   136c2:	462a      	mov	r2, r5
   136c4:	4630      	mov	r0, r6
   136c6:	3108      	adds	r1, #8
   136c8:	f000 fa1c 	bl	13b04 <CC_PalMemCopyPlat>
   136cc:	2001      	movs	r0, #1
   136ce:	6025      	str	r5, [r4, #0]
   136d0:	f7ff fc8e 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   136d4:	2800      	cmp	r0, #0
   136d6:	d0ca      	beq.n	1366e <mbedtls_hardware_poll+0x4e>
   136d8:	480d      	ldr	r0, [pc, #52]	; (13710 <mbedtls_hardware_poll+0xf0>)
   136da:	f7fe fd0f 	bl	120fc <CC_PalAbort>
   136de:	e7c6      	b.n	1366e <mbedtls_hardware_poll+0x4e>
   136e0:	480c      	ldr	r0, [pc, #48]	; (13714 <mbedtls_hardware_poll+0xf4>)
   136e2:	f7fe fd0b 	bl	120fc <CC_PalAbort>
   136e6:	e7b7      	b.n	13658 <mbedtls_hardware_poll+0x38>
   136e8:	480b      	ldr	r0, [pc, #44]	; (13718 <mbedtls_hardware_poll+0xf8>)
   136ea:	f7fe fd07 	bl	120fc <CC_PalAbort>
   136ee:	e7ae      	b.n	1364e <mbedtls_hardware_poll+0x2e>
   136f0:	480a      	ldr	r0, [pc, #40]	; (1371c <mbedtls_hardware_poll+0xfc>)
   136f2:	f7fe fd03 	bl	120fc <CC_PalAbort>
   136f6:	4638      	mov	r0, r7
   136f8:	b008      	add	sp, #32
   136fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13702:	e7c7      	b.n	13694 <mbedtls_hardware_poll+0x74>
   13704:	20001360 	.word	0x20001360
   13708:	20001140 	.word	0x20001140
   1370c:	20001064 	.word	0x20001064
   13710:	00015aa4 	.word	0x00015aa4
   13714:	00015a84 	.word	0x00015a84
   13718:	00015a6c 	.word	0x00015a6c
   1371c:	00015afc 	.word	0x00015afc
   13720:	200000f8 	.word	0x200000f8

00013724 <cc_mbedtls_aes_init>:
   13724:	b510      	push	{r4, lr}
   13726:	4604      	mov	r4, r0
   13728:	b130      	cbz	r0, 13738 <cc_mbedtls_aes_init+0x14>
   1372a:	2200      	movs	r2, #0
   1372c:	2301      	movs	r3, #1
   1372e:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   13732:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   13736:	bd10      	pop	{r4, pc}
   13738:	4801      	ldr	r0, [pc, #4]	; (13740 <cc_mbedtls_aes_init+0x1c>)
   1373a:	f7fe fcdf 	bl	120fc <CC_PalAbort>
   1373e:	e7f4      	b.n	1372a <cc_mbedtls_aes_init+0x6>
   13740:	00015b14 	.word	0x00015b14

00013744 <cc_mbedtls_aes_free>:
   13744:	b118      	cbz	r0, 1374e <cc_mbedtls_aes_free+0xa>
   13746:	2274      	movs	r2, #116	; 0x74
   13748:	2100      	movs	r1, #0
   1374a:	f000 b9dd 	b.w	13b08 <CC_PalMemSetPlat>
   1374e:	4770      	bx	lr

00013750 <cc_mbedtls_aes_setkey_enc>:
   13750:	b188      	cbz	r0, 13776 <cc_mbedtls_aes_setkey_enc+0x26>
   13752:	b199      	cbz	r1, 1377c <cc_mbedtls_aes_setkey_enc+0x2c>
   13754:	b510      	push	{r4, lr}
   13756:	2400      	movs	r4, #0
   13758:	2a80      	cmp	r2, #128	; 0x80
   1375a:	6384      	str	r4, [r0, #56]	; 0x38
   1375c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   13760:	d106      	bne.n	13770 <cc_mbedtls_aes_setkey_enc+0x20>
   13762:	6304      	str	r4, [r0, #48]	; 0x30
   13764:	2210      	movs	r2, #16
   13766:	3010      	adds	r0, #16
   13768:	f000 f9cc 	bl	13b04 <CC_PalMemCopyPlat>
   1376c:	4620      	mov	r0, r4
   1376e:	bd10      	pop	{r4, pc}
   13770:	f06f 001f 	mvn.w	r0, #31
   13774:	bd10      	pop	{r4, pc}
   13776:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1377a:	4770      	bx	lr
   1377c:	f06f 001f 	mvn.w	r0, #31
   13780:	4770      	bx	lr
   13782:	bf00      	nop

00013784 <cc_mbedtls_aes_crypt_ecb>:
   13784:	b328      	cbz	r0, 137d2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   13786:	b322      	cbz	r2, 137d2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   13788:	b31b      	cbz	r3, 137d2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1378a:	2901      	cmp	r1, #1
   1378c:	d821      	bhi.n	137d2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1378e:	b570      	push	{r4, r5, r6, lr}
   13790:	4604      	mov	r4, r0
   13792:	6b81      	ldr	r1, [r0, #56]	; 0x38
   13794:	b086      	sub	sp, #24
   13796:	d017      	beq.n	137c8 <cc_mbedtls_aes_crypt_ecb+0x44>
   13798:	2901      	cmp	r1, #1
   1379a:	d117      	bne.n	137cc <cc_mbedtls_aes_crypt_ecb+0x48>
   1379c:	2510      	movs	r5, #16
   1379e:	2100      	movs	r1, #0
   137a0:	eb0d 0605 	add.w	r6, sp, r5
   137a4:	6361      	str	r1, [r4, #52]	; 0x34
   137a6:	4610      	mov	r0, r2
   137a8:	4629      	mov	r1, r5
   137aa:	9500      	str	r5, [sp, #0]
   137ac:	aa02      	add	r2, sp, #8
   137ae:	9601      	str	r6, [sp, #4]
   137b0:	f000 fa84 	bl	13cbc <SetDataBuffersInfo>
   137b4:	b950      	cbnz	r0, 137cc <cc_mbedtls_aes_crypt_ecb+0x48>
   137b6:	462b      	mov	r3, r5
   137b8:	4632      	mov	r2, r6
   137ba:	4620      	mov	r0, r4
   137bc:	a902      	add	r1, sp, #8
   137be:	f000 fd37 	bl	14230 <ProcessAesDrv>
   137c2:	b918      	cbnz	r0, 137cc <cc_mbedtls_aes_crypt_ecb+0x48>
   137c4:	b006      	add	sp, #24
   137c6:	bd70      	pop	{r4, r5, r6, pc}
   137c8:	2900      	cmp	r1, #0
   137ca:	d0e7      	beq.n	1379c <cc_mbedtls_aes_crypt_ecb+0x18>
   137cc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   137d0:	e7f8      	b.n	137c4 <cc_mbedtls_aes_crypt_ecb+0x40>
   137d2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   137d6:	4770      	bx	lr

000137d8 <cc_mbedtls_sha256_init>:
   137d8:	b510      	push	{r4, lr}
   137da:	4604      	mov	r4, r0
   137dc:	b128      	cbz	r0, 137ea <cc_mbedtls_sha256_init+0x12>
   137de:	4620      	mov	r0, r4
   137e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   137e4:	21f0      	movs	r1, #240	; 0xf0
   137e6:	f000 b991 	b.w	13b0c <CC_PalMemSetZeroPlat>
   137ea:	4804      	ldr	r0, [pc, #16]	; (137fc <cc_mbedtls_sha256_init+0x24>)
   137ec:	f7fe fc86 	bl	120fc <CC_PalAbort>
   137f0:	4620      	mov	r0, r4
   137f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   137f6:	21f0      	movs	r1, #240	; 0xf0
   137f8:	f000 b988 	b.w	13b0c <CC_PalMemSetZeroPlat>
   137fc:	00015b28 	.word	0x00015b28

00013800 <cc_mbedtls_sha256_free>:
   13800:	b110      	cbz	r0, 13808 <cc_mbedtls_sha256_free+0x8>
   13802:	21f0      	movs	r1, #240	; 0xf0
   13804:	f7fe bd7c 	b.w	12300 <mbedtls_zeroize_internal>
   13808:	4770      	bx	lr
   1380a:	bf00      	nop

0001380c <cc_mbedtls_sha256_starts>:
   1380c:	b508      	push	{r3, lr}
   1380e:	b161      	cbz	r1, 1382a <cc_mbedtls_sha256_starts+0x1e>
   13810:	2901      	cmp	r1, #1
   13812:	d107      	bne.n	13824 <cc_mbedtls_sha256_starts+0x18>
   13814:	2102      	movs	r1, #2
   13816:	f000 f85b 	bl	138d0 <mbedtls_sha_starts_internal>
   1381a:	2800      	cmp	r0, #0
   1381c:	bf18      	it	ne
   1381e:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   13822:	bd08      	pop	{r3, pc}
   13824:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13828:	bd08      	pop	{r3, pc}
   1382a:	2101      	movs	r1, #1
   1382c:	f000 f850 	bl	138d0 <mbedtls_sha_starts_internal>
   13830:	e7f3      	b.n	1381a <cc_mbedtls_sha256_starts+0xe>
   13832:	bf00      	nop

00013834 <cc_mbedtls_sha256_update>:
   13834:	b570      	push	{r4, r5, r6, lr}
   13836:	188e      	adds	r6, r1, r2
   13838:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1383c:	460b      	mov	r3, r1
   1383e:	4614      	mov	r4, r2
   13840:	4605      	mov	r5, r0
   13842:	b0a0      	sub	sp, #128	; 0x80
   13844:	d801      	bhi.n	1384a <cc_mbedtls_sha256_update+0x16>
   13846:	2a80      	cmp	r2, #128	; 0x80
   13848:	d90c      	bls.n	13864 <cc_mbedtls_sha256_update+0x30>
   1384a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1384e:	d917      	bls.n	13880 <cc_mbedtls_sha256_update+0x4c>
   13850:	4622      	mov	r2, r4
   13852:	4619      	mov	r1, r3
   13854:	4628      	mov	r0, r5
   13856:	f000 f87d 	bl	13954 <mbedtls_sha_update_internal>
   1385a:	4604      	mov	r4, r0
   1385c:	b984      	cbnz	r4, 13880 <cc_mbedtls_sha256_update+0x4c>
   1385e:	4620      	mov	r0, r4
   13860:	b020      	add	sp, #128	; 0x80
   13862:	bd70      	pop	{r4, r5, r6, pc}
   13864:	4668      	mov	r0, sp
   13866:	f000 f94d 	bl	13b04 <CC_PalMemCopyPlat>
   1386a:	4622      	mov	r2, r4
   1386c:	4669      	mov	r1, sp
   1386e:	4628      	mov	r0, r5
   13870:	f000 f870 	bl	13954 <mbedtls_sha_update_internal>
   13874:	2180      	movs	r1, #128	; 0x80
   13876:	4604      	mov	r4, r0
   13878:	4668      	mov	r0, sp
   1387a:	f000 f947 	bl	13b0c <CC_PalMemSetZeroPlat>
   1387e:	e7ed      	b.n	1385c <cc_mbedtls_sha256_update+0x28>
   13880:	f06f 0436 	mvn.w	r4, #54	; 0x36
   13884:	e7eb      	b.n	1385e <cc_mbedtls_sha256_update+0x2a>
   13886:	bf00      	nop

00013888 <cc_mbedtls_sha256_finish>:
   13888:	b570      	push	{r4, r5, r6, lr}
   1388a:	b1e8      	cbz	r0, 138c8 <cc_mbedtls_sha256_finish+0x40>
   1388c:	460e      	mov	r6, r1
   1388e:	b1d9      	cbz	r1, 138c8 <cc_mbedtls_sha256_finish+0x40>
   13890:	4604      	mov	r4, r0
   13892:	f000 f831 	bl	138f8 <mbedtls_sha_finish_internal>
   13896:	4605      	mov	r5, r0
   13898:	b9b0      	cbnz	r0, 138c8 <cc_mbedtls_sha256_finish+0x40>
   1389a:	6823      	ldr	r3, [r4, #0]
   1389c:	2b01      	cmp	r3, #1
   1389e:	d00b      	beq.n	138b8 <cc_mbedtls_sha256_finish+0x30>
   138a0:	2b02      	cmp	r3, #2
   138a2:	d001      	beq.n	138a8 <cc_mbedtls_sha256_finish+0x20>
   138a4:	4628      	mov	r0, r5
   138a6:	bd70      	pop	{r4, r5, r6, pc}
   138a8:	4630      	mov	r0, r6
   138aa:	221c      	movs	r2, #28
   138ac:	f104 0108 	add.w	r1, r4, #8
   138b0:	f000 f928 	bl	13b04 <CC_PalMemCopyPlat>
   138b4:	4628      	mov	r0, r5
   138b6:	bd70      	pop	{r4, r5, r6, pc}
   138b8:	4630      	mov	r0, r6
   138ba:	2220      	movs	r2, #32
   138bc:	f104 0108 	add.w	r1, r4, #8
   138c0:	f000 f920 	bl	13b04 <CC_PalMemCopyPlat>
   138c4:	4628      	mov	r0, r5
   138c6:	bd70      	pop	{r4, r5, r6, pc}
   138c8:	f06f 0536 	mvn.w	r5, #54	; 0x36
   138cc:	e7ea      	b.n	138a4 <cc_mbedtls_sha256_finish+0x1c>
   138ce:	bf00      	nop

000138d0 <mbedtls_sha_starts_internal>:
   138d0:	b178      	cbz	r0, 138f2 <mbedtls_sha_starts_internal+0x22>
   138d2:	b538      	push	{r3, r4, r5, lr}
   138d4:	460d      	mov	r5, r1
   138d6:	21f0      	movs	r1, #240	; 0xf0
   138d8:	4604      	mov	r4, r0
   138da:	f000 f917 	bl	13b0c <CC_PalMemSetZeroPlat>
   138de:	2340      	movs	r3, #64	; 0x40
   138e0:	4620      	mov	r0, r4
   138e2:	6025      	str	r5, [r4, #0]
   138e4:	65e3      	str	r3, [r4, #92]	; 0x5c
   138e6:	f000 fa21 	bl	13d2c <InitHashDrv>
   138ea:	3800      	subs	r0, #0
   138ec:	bf18      	it	ne
   138ee:	2001      	movne	r0, #1
   138f0:	bd38      	pop	{r3, r4, r5, pc}
   138f2:	2001      	movs	r0, #1
   138f4:	4770      	bx	lr
   138f6:	bf00      	nop

000138f8 <mbedtls_sha_finish_internal>:
   138f8:	b570      	push	{r4, r5, r6, lr}
   138fa:	6e05      	ldr	r5, [r0, #96]	; 0x60
   138fc:	b0a4      	sub	sp, #144	; 0x90
   138fe:	4604      	mov	r4, r0
   13900:	ae04      	add	r6, sp, #16
   13902:	b9e5      	cbnz	r5, 1393e <mbedtls_sha_finish_internal+0x46>
   13904:	2201      	movs	r2, #1
   13906:	2300      	movs	r3, #0
   13908:	6062      	str	r2, [r4, #4]
   1390a:	4630      	mov	r0, r6
   1390c:	4629      	mov	r1, r5
   1390e:	e9cd 3300 	strd	r3, r3, [sp]
   13912:	aa02      	add	r2, sp, #8
   13914:	f000 f9d2 	bl	13cbc <SetDataBuffersInfo>
   13918:	b110      	cbz	r0, 13920 <mbedtls_sha_finish_internal+0x28>
   1391a:	2001      	movs	r0, #1
   1391c:	b024      	add	sp, #144	; 0x90
   1391e:	bd70      	pop	{r4, r5, r6, pc}
   13920:	462a      	mov	r2, r5
   13922:	4620      	mov	r0, r4
   13924:	a902      	add	r1, sp, #8
   13926:	f000 fa2b 	bl	13d80 <ProcessHashDrv>
   1392a:	2800      	cmp	r0, #0
   1392c:	d1f5      	bne.n	1391a <mbedtls_sha_finish_internal+0x22>
   1392e:	4620      	mov	r0, r4
   13930:	f000 fb50 	bl	13fd4 <FinishHashDrv>
   13934:	2800      	cmp	r0, #0
   13936:	d1f0      	bne.n	1391a <mbedtls_sha_finish_internal+0x22>
   13938:	6620      	str	r0, [r4, #96]	; 0x60
   1393a:	b024      	add	sp, #144	; 0x90
   1393c:	bd70      	pop	{r4, r5, r6, pc}
   1393e:	2d80      	cmp	r5, #128	; 0x80
   13940:	462a      	mov	r2, r5
   13942:	4630      	mov	r0, r6
   13944:	bf28      	it	cs
   13946:	2280      	movcs	r2, #128	; 0x80
   13948:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1394c:	f000 f8da 	bl	13b04 <CC_PalMemCopyPlat>
   13950:	6e25      	ldr	r5, [r4, #96]	; 0x60
   13952:	e7d7      	b.n	13904 <mbedtls_sha_finish_internal+0xc>

00013954 <mbedtls_sha_update_internal>:
   13954:	2800      	cmp	r0, #0
   13956:	d055      	beq.n	13a04 <mbedtls_sha_update_internal+0xb0>
   13958:	b5f0      	push	{r4, r5, r6, r7, lr}
   1395a:	4615      	mov	r5, r2
   1395c:	b0a5      	sub	sp, #148	; 0x94
   1395e:	b1b2      	cbz	r2, 1398e <mbedtls_sha_update_internal+0x3a>
   13960:	460e      	mov	r6, r1
   13962:	b351      	cbz	r1, 139ba <mbedtls_sha_update_internal+0x66>
   13964:	4604      	mov	r4, r0
   13966:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1396a:	1a1a      	subs	r2, r3, r0
   1396c:	fbb2 f7f3 	udiv	r7, r2, r3
   13970:	fb03 2717 	mls	r7, r3, r7, r2
   13974:	42af      	cmp	r7, r5
   13976:	bf28      	it	cs
   13978:	462f      	movcs	r7, r5
   1397a:	2f00      	cmp	r7, #0
   1397c:	d144      	bne.n	13a08 <mbedtls_sha_update_internal+0xb4>
   1397e:	4283      	cmp	r3, r0
   13980:	d008      	beq.n	13994 <mbedtls_sha_update_internal+0x40>
   13982:	fbb5 f7f3 	udiv	r7, r5, r3
   13986:	fb03 f707 	mul.w	r7, r3, r7
   1398a:	b9cf      	cbnz	r7, 139c0 <mbedtls_sha_update_internal+0x6c>
   1398c:	bb6d      	cbnz	r5, 139ea <mbedtls_sha_update_internal+0x96>
   1398e:	4628      	mov	r0, r5
   13990:	b025      	add	sp, #148	; 0x94
   13992:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13994:	2b80      	cmp	r3, #128	; 0x80
   13996:	bf28      	it	cs
   13998:	2380      	movcs	r3, #128	; 0x80
   1399a:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1399e:	461a      	mov	r2, r3
   139a0:	a804      	add	r0, sp, #16
   139a2:	f000 f8af 	bl	13b04 <CC_PalMemCopyPlat>
   139a6:	2300      	movs	r3, #0
   139a8:	e9cd 3300 	strd	r3, r3, [sp]
   139ac:	a804      	add	r0, sp, #16
   139ae:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   139b0:	aa02      	add	r2, sp, #8
   139b2:	f000 f983 	bl	13cbc <SetDataBuffersInfo>
   139b6:	2800      	cmp	r0, #0
   139b8:	d033      	beq.n	13a22 <mbedtls_sha_update_internal+0xce>
   139ba:	2001      	movs	r0, #1
   139bc:	b025      	add	sp, #148	; 0x94
   139be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139c0:	2300      	movs	r3, #0
   139c2:	4639      	mov	r1, r7
   139c4:	4630      	mov	r0, r6
   139c6:	e9cd 3300 	strd	r3, r3, [sp]
   139ca:	aa02      	add	r2, sp, #8
   139cc:	f000 f976 	bl	13cbc <SetDataBuffersInfo>
   139d0:	2800      	cmp	r0, #0
   139d2:	d1f2      	bne.n	139ba <mbedtls_sha_update_internal+0x66>
   139d4:	463a      	mov	r2, r7
   139d6:	4620      	mov	r0, r4
   139d8:	a902      	add	r1, sp, #8
   139da:	f000 f9d1 	bl	13d80 <ProcessHashDrv>
   139de:	2800      	cmp	r0, #0
   139e0:	d1eb      	bne.n	139ba <mbedtls_sha_update_internal+0x66>
   139e2:	1bed      	subs	r5, r5, r7
   139e4:	443e      	add	r6, r7
   139e6:	2d00      	cmp	r5, #0
   139e8:	d0d1      	beq.n	1398e <mbedtls_sha_update_internal+0x3a>
   139ea:	6e20      	ldr	r0, [r4, #96]	; 0x60
   139ec:	462a      	mov	r2, r5
   139ee:	3019      	adds	r0, #25
   139f0:	4631      	mov	r1, r6
   139f2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   139f6:	f000 f885 	bl	13b04 <CC_PalMemCopyPlat>
   139fa:	6e22      	ldr	r2, [r4, #96]	; 0x60
   139fc:	2000      	movs	r0, #0
   139fe:	442a      	add	r2, r5
   13a00:	6622      	str	r2, [r4, #96]	; 0x60
   13a02:	e7c5      	b.n	13990 <mbedtls_sha_update_internal+0x3c>
   13a04:	2001      	movs	r0, #1
   13a06:	4770      	bx	lr
   13a08:	f104 0364 	add.w	r3, r4, #100	; 0x64
   13a0c:	4418      	add	r0, r3
   13a0e:	463a      	mov	r2, r7
   13a10:	f000 f878 	bl	13b04 <CC_PalMemCopyPlat>
   13a14:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
   13a18:	4438      	add	r0, r7
   13a1a:	443e      	add	r6, r7
   13a1c:	1bed      	subs	r5, r5, r7
   13a1e:	6620      	str	r0, [r4, #96]	; 0x60
   13a20:	e7ad      	b.n	1397e <mbedtls_sha_update_internal+0x2a>
   13a22:	4620      	mov	r0, r4
   13a24:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   13a26:	a902      	add	r1, sp, #8
   13a28:	f000 f9aa 	bl	13d80 <ProcessHashDrv>
   13a2c:	2800      	cmp	r0, #0
   13a2e:	d1c4      	bne.n	139ba <mbedtls_sha_update_internal+0x66>
   13a30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   13a32:	6620      	str	r0, [r4, #96]	; 0x60
   13a34:	e7a5      	b.n	13982 <mbedtls_sha_update_internal+0x2e>
   13a36:	bf00      	nop

00013a38 <cc_mbedtls_sha256>:
   13a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a3a:	461c      	mov	r4, r3
   13a3c:	4605      	mov	r5, r0
   13a3e:	4811      	ldr	r0, [pc, #68]	; (13a84 <cc_mbedtls_sha256+0x4c>)
   13a40:	460e      	mov	r6, r1
   13a42:	4617      	mov	r7, r2
   13a44:	f7ff fec8 	bl	137d8 <cc_mbedtls_sha256_init>
   13a48:	4621      	mov	r1, r4
   13a4a:	480e      	ldr	r0, [pc, #56]	; (13a84 <cc_mbedtls_sha256+0x4c>)
   13a4c:	f7ff fede 	bl	1380c <cc_mbedtls_sha256_starts>
   13a50:	4604      	mov	r4, r0
   13a52:	b120      	cbz	r0, 13a5e <cc_mbedtls_sha256+0x26>
   13a54:	480b      	ldr	r0, [pc, #44]	; (13a84 <cc_mbedtls_sha256+0x4c>)
   13a56:	f7ff fed3 	bl	13800 <cc_mbedtls_sha256_free>
   13a5a:	4620      	mov	r0, r4
   13a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a5e:	4632      	mov	r2, r6
   13a60:	4629      	mov	r1, r5
   13a62:	4808      	ldr	r0, [pc, #32]	; (13a84 <cc_mbedtls_sha256+0x4c>)
   13a64:	f7ff fee6 	bl	13834 <cc_mbedtls_sha256_update>
   13a68:	4604      	mov	r4, r0
   13a6a:	2800      	cmp	r0, #0
   13a6c:	d1f2      	bne.n	13a54 <cc_mbedtls_sha256+0x1c>
   13a6e:	4639      	mov	r1, r7
   13a70:	4804      	ldr	r0, [pc, #16]	; (13a84 <cc_mbedtls_sha256+0x4c>)
   13a72:	f7ff ff09 	bl	13888 <cc_mbedtls_sha256_finish>
   13a76:	4604      	mov	r4, r0
   13a78:	4802      	ldr	r0, [pc, #8]	; (13a84 <cc_mbedtls_sha256+0x4c>)
   13a7a:	f7ff fec1 	bl	13800 <cc_mbedtls_sha256_free>
   13a7e:	4620      	mov	r0, r4
   13a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a82:	bf00      	nop
   13a84:	20001388 	.word	0x20001388

00013a88 <RNG_PLAT_SetUserRngParameters>:
   13a88:	231c      	movs	r3, #28
   13a8a:	b530      	push	{r4, r5, lr}
   13a8c:	b083      	sub	sp, #12
   13a8e:	a901      	add	r1, sp, #4
   13a90:	4604      	mov	r4, r0
   13a92:	9301      	str	r3, [sp, #4]
   13a94:	f000 f83e 	bl	13b14 <CC_PalTrngParamGet>
   13a98:	4605      	mov	r5, r0
   13a9a:	b938      	cbnz	r0, 13aac <RNG_PLAT_SetUserRngParameters+0x24>
   13a9c:	9b01      	ldr	r3, [sp, #4]
   13a9e:	2b1c      	cmp	r3, #28
   13aa0:	d007      	beq.n	13ab2 <RNG_PLAT_SetUserRngParameters+0x2a>
   13aa2:	4d16      	ldr	r5, [pc, #88]	; (13afc <RNG_PLAT_SetUserRngParameters+0x74>)
   13aa4:	4620      	mov	r0, r4
   13aa6:	211c      	movs	r1, #28
   13aa8:	f000 f830 	bl	13b0c <CC_PalMemSetZeroPlat>
   13aac:	4628      	mov	r0, r5
   13aae:	b003      	add	sp, #12
   13ab0:	bd30      	pop	{r4, r5, pc}
   13ab2:	2101      	movs	r1, #1
   13ab4:	e9d4 3200 	ldrd	r3, r2, [r4]
   13ab8:	3b00      	subs	r3, #0
   13aba:	bf18      	it	ne
   13abc:	2301      	movne	r3, #1
   13abe:	61e1      	str	r1, [r4, #28]
   13ac0:	b10a      	cbz	r2, 13ac6 <RNG_PLAT_SetUserRngParameters+0x3e>
   13ac2:	f043 0302 	orr.w	r3, r3, #2
   13ac6:	68a2      	ldr	r2, [r4, #8]
   13ac8:	b932      	cbnz	r2, 13ad8 <RNG_PLAT_SetUserRngParameters+0x50>
   13aca:	68e2      	ldr	r2, [r4, #12]
   13acc:	b942      	cbnz	r2, 13ae0 <RNG_PLAT_SetUserRngParameters+0x58>
   13ace:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13ad2:	b98b      	cbnz	r3, 13af8 <RNG_PLAT_SetUserRngParameters+0x70>
   13ad4:	4d0a      	ldr	r5, [pc, #40]	; (13b00 <RNG_PLAT_SetUserRngParameters+0x78>)
   13ad6:	e7e5      	b.n	13aa4 <RNG_PLAT_SetUserRngParameters+0x1c>
   13ad8:	68e2      	ldr	r2, [r4, #12]
   13ada:	f043 0304 	orr.w	r3, r3, #4
   13ade:	b13a      	cbz	r2, 13af0 <RNG_PLAT_SetUserRngParameters+0x68>
   13ae0:	2200      	movs	r2, #0
   13ae2:	4628      	mov	r0, r5
   13ae4:	f043 0308 	orr.w	r3, r3, #8
   13ae8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13aec:	b003      	add	sp, #12
   13aee:	bd30      	pop	{r4, r5, pc}
   13af0:	4615      	mov	r5, r2
   13af2:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13af6:	e7d9      	b.n	13aac <RNG_PLAT_SetUserRngParameters+0x24>
   13af8:	4615      	mov	r5, r2
   13afa:	e7d7      	b.n	13aac <RNG_PLAT_SetUserRngParameters+0x24>
   13afc:	00f00c37 	.word	0x00f00c37
   13b00:	00f00c0e 	.word	0x00f00c0e

00013b04 <CC_PalMemCopyPlat>:
   13b04:	f001 b9ee 	b.w	14ee4 <memmove>

00013b08 <CC_PalMemSetPlat>:
   13b08:	f001 ba0f 	b.w	14f2a <memset>

00013b0c <CC_PalMemSetZeroPlat>:
   13b0c:	460a      	mov	r2, r1
   13b0e:	2100      	movs	r1, #0
   13b10:	f001 ba0b 	b.w	14f2a <memset>

00013b14 <CC_PalTrngParamGet>:
   13b14:	2800      	cmp	r0, #0
   13b16:	d066      	beq.n	13be6 <CC_PalTrngParamGet+0xd2>
   13b18:	2900      	cmp	r1, #0
   13b1a:	d064      	beq.n	13be6 <CC_PalTrngParamGet+0xd2>
   13b1c:	680b      	ldr	r3, [r1, #0]
   13b1e:	2b1c      	cmp	r3, #28
   13b20:	d161      	bne.n	13be6 <CC_PalTrngParamGet+0xd2>
   13b22:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b26:	4a3b      	ldr	r2, [pc, #236]	; (13c14 <CC_PalTrngParamGet+0x100>)
   13b28:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   13b2c:	4291      	cmp	r1, r2
   13b2e:	d05c      	beq.n	13bea <CC_PalTrngParamGet+0xd6>
   13b30:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13b34:	3201      	adds	r2, #1
   13b36:	d058      	beq.n	13bea <CC_PalTrngParamGet+0xd6>
   13b38:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13b3c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b40:	6002      	str	r2, [r0, #0]
   13b42:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   13b46:	4a34      	ldr	r2, [pc, #208]	; (13c18 <CC_PalTrngParamGet+0x104>)
   13b48:	4291      	cmp	r1, r2
   13b4a:	d060      	beq.n	13c0e <CC_PalTrngParamGet+0xfa>
   13b4c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13b50:	3201      	adds	r2, #1
   13b52:	d05c      	beq.n	13c0e <CC_PalTrngParamGet+0xfa>
   13b54:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13b58:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b5c:	6042      	str	r2, [r0, #4]
   13b5e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13b62:	f512 7f94 	cmn.w	r2, #296	; 0x128
   13b66:	d04f      	beq.n	13c08 <CC_PalTrngParamGet+0xf4>
   13b68:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13b6c:	3201      	adds	r2, #1
   13b6e:	d04b      	beq.n	13c08 <CC_PalTrngParamGet+0xf4>
   13b70:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13b74:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b78:	6082      	str	r2, [r0, #8]
   13b7a:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   13b7e:	4a27      	ldr	r2, [pc, #156]	; (13c1c <CC_PalTrngParamGet+0x108>)
   13b80:	4291      	cmp	r1, r2
   13b82:	d03e      	beq.n	13c02 <CC_PalTrngParamGet+0xee>
   13b84:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13b88:	3201      	adds	r2, #1
   13b8a:	d03a      	beq.n	13c02 <CC_PalTrngParamGet+0xee>
   13b8c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13b90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b94:	60c2      	str	r2, [r0, #12]
   13b96:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13b9a:	3270      	adds	r2, #112	; 0x70
   13b9c:	d02f      	beq.n	13bfe <CC_PalTrngParamGet+0xea>
   13b9e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13ba2:	3201      	adds	r2, #1
   13ba4:	d02b      	beq.n	13bfe <CC_PalTrngParamGet+0xea>
   13ba6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13baa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13bae:	6102      	str	r2, [r0, #16]
   13bb0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13bb4:	32af      	adds	r2, #175	; 0xaf
   13bb6:	d020      	beq.n	13bfa <CC_PalTrngParamGet+0xe6>
   13bb8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13bbc:	3201      	adds	r2, #1
   13bbe:	d01c      	beq.n	13bfa <CC_PalTrngParamGet+0xe6>
   13bc0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13bc4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13bc8:	6142      	str	r2, [r0, #20]
   13bca:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   13bce:	4a14      	ldr	r2, [pc, #80]	; (13c20 <CC_PalTrngParamGet+0x10c>)
   13bd0:	4291      	cmp	r1, r2
   13bd2:	d00d      	beq.n	13bf0 <CC_PalTrngParamGet+0xdc>
   13bd4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   13bd8:	3201      	adds	r2, #1
   13bda:	d009      	beq.n	13bf0 <CC_PalTrngParamGet+0xdc>
   13bdc:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   13be0:	6183      	str	r3, [r0, #24]
   13be2:	2000      	movs	r0, #0
   13be4:	4770      	bx	lr
   13be6:	2001      	movs	r0, #1
   13be8:	4770      	bx	lr
   13bea:	f640 02fc 	movw	r2, #2300	; 0x8fc
   13bee:	e7a5      	b.n	13b3c <CC_PalTrngParamGet+0x28>
   13bf0:	f240 3337 	movw	r3, #823	; 0x337
   13bf4:	6183      	str	r3, [r0, #24]
   13bf6:	2000      	movs	r0, #0
   13bf8:	4770      	bx	lr
   13bfa:	2251      	movs	r2, #81	; 0x51
   13bfc:	e7e2      	b.n	13bc4 <CC_PalTrngParamGet+0xb0>
   13bfe:	2290      	movs	r2, #144	; 0x90
   13c00:	e7d3      	b.n	13baa <CC_PalTrngParamGet+0x96>
   13c02:	f642 1204 	movw	r2, #10500	; 0x2904
   13c06:	e7c3      	b.n	13b90 <CC_PalTrngParamGet+0x7c>
   13c08:	f640 62d8 	movw	r2, #3800	; 0xed8
   13c0c:	e7b2      	b.n	13b74 <CC_PalTrngParamGet+0x60>
   13c0e:	f242 02d0 	movw	r2, #8400	; 0x20d0
   13c12:	e7a1      	b.n	13b58 <CC_PalTrngParamGet+0x44>
   13c14:	fffff8fc 	.word	0xfffff8fc
   13c18:	ffff20d0 	.word	0xffff20d0
   13c1c:	ffff2904 	.word	0xffff2904
   13c20:	fffff337 	.word	0xfffff337

00013c24 <LLF_RND_WaitRngInterrupt>:
   13c24:	4601      	mov	r1, r0
   13c26:	b508      	push	{r3, lr}
   13c28:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13c2c:	f7ff f924 	bl	12e78 <CC_HalWaitInterruptRND>
   13c30:	2300      	movs	r3, #0
   13c32:	4902      	ldr	r1, [pc, #8]	; (13c3c <LLF_RND_WaitRngInterrupt+0x18>)
   13c34:	4a02      	ldr	r2, [pc, #8]	; (13c40 <LLF_RND_WaitRngInterrupt+0x1c>)
   13c36:	600b      	str	r3, [r1, #0]
   13c38:	6013      	str	r3, [r2, #0]
   13c3a:	bd08      	pop	{r3, pc}
   13c3c:	508411c8 	.word	0x508411c8
   13c40:	5084112c 	.word	0x5084112c

00013c44 <LLF_RND_GetRoscSampleCnt>:
   13c44:	3801      	subs	r0, #1
   13c46:	2807      	cmp	r0, #7
   13c48:	d805      	bhi.n	13c56 <LLF_RND_GetRoscSampleCnt+0x12>
   13c4a:	e8df f000 	tbb	[pc, r0]
   13c4e:	0e0a      	.short	0x0e0a
   13c50:	04041204 	.word	0x04041204
   13c54:	0604      	.short	0x0604
   13c56:	4809      	ldr	r0, [pc, #36]	; (13c7c <LLF_RND_GetRoscSampleCnt+0x38>)
   13c58:	4770      	bx	lr
   13c5a:	68cb      	ldr	r3, [r1, #12]
   13c5c:	2000      	movs	r0, #0
   13c5e:	624b      	str	r3, [r1, #36]	; 0x24
   13c60:	4770      	bx	lr
   13c62:	680b      	ldr	r3, [r1, #0]
   13c64:	2000      	movs	r0, #0
   13c66:	624b      	str	r3, [r1, #36]	; 0x24
   13c68:	4770      	bx	lr
   13c6a:	684b      	ldr	r3, [r1, #4]
   13c6c:	2000      	movs	r0, #0
   13c6e:	624b      	str	r3, [r1, #36]	; 0x24
   13c70:	4770      	bx	lr
   13c72:	688b      	ldr	r3, [r1, #8]
   13c74:	2000      	movs	r0, #0
   13c76:	624b      	str	r3, [r1, #36]	; 0x24
   13c78:	4770      	bx	lr
   13c7a:	bf00      	nop
   13c7c:	00f10c31 	.word	0x00f10c31

00013c80 <LLF_RND_GetFastestRosc>:
   13c80:	680b      	ldr	r3, [r1, #0]
   13c82:	e002      	b.n	13c8a <LLF_RND_GetFastestRosc+0xa>
   13c84:	2b08      	cmp	r3, #8
   13c86:	600b      	str	r3, [r1, #0]
   13c88:	d806      	bhi.n	13c98 <LLF_RND_GetFastestRosc+0x18>
   13c8a:	6a02      	ldr	r2, [r0, #32]
   13c8c:	4213      	tst	r3, r2
   13c8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13c92:	d0f7      	beq.n	13c84 <LLF_RND_GetFastestRosc+0x4>
   13c94:	2000      	movs	r0, #0
   13c96:	4770      	bx	lr
   13c98:	4800      	ldr	r0, [pc, #0]	; (13c9c <LLF_RND_GetFastestRosc+0x1c>)
   13c9a:	4770      	bx	lr
   13c9c:	00f10c31 	.word	0x00f10c31

00013ca0 <LLF_RND_TurnOffTrng>:
   13ca0:	2300      	movs	r3, #0
   13ca2:	4904      	ldr	r1, [pc, #16]	; (13cb4 <LLF_RND_TurnOffTrng+0x14>)
   13ca4:	4a04      	ldr	r2, [pc, #16]	; (13cb8 <LLF_RND_TurnOffTrng+0x18>)
   13ca6:	600b      	str	r3, [r1, #0]
   13ca8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13cac:	6013      	str	r3, [r2, #0]
   13cae:	f7ff b8c9 	b.w	12e44 <CC_HalClearInterruptBit>
   13cb2:	bf00      	nop
   13cb4:	5084112c 	.word	0x5084112c
   13cb8:	508411c4 	.word	0x508411c4

00013cbc <SetDataBuffersInfo>:
   13cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13cc0:	2600      	movs	r6, #0
   13cc2:	b082      	sub	sp, #8
   13cc4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   13cc8:	f88d 6007 	strb.w	r6, [sp, #7]
   13ccc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   13cce:	d327      	bcc.n	13d20 <SetDataBuffersInfo+0x64>
   13cd0:	460c      	mov	r4, r1
   13cd2:	4404      	add	r4, r0
   13cd4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   13cd8:	4605      	mov	r5, r0
   13cda:	d821      	bhi.n	13d20 <SetDataBuffersInfo+0x64>
   13cdc:	4617      	mov	r7, r2
   13cde:	4698      	mov	r8, r3
   13ce0:	2201      	movs	r2, #1
   13ce2:	f10d 0307 	add.w	r3, sp, #7
   13ce6:	f000 ff9f 	bl	14c28 <CC_PalDataBufferAttrGet>
   13cea:	4604      	mov	r4, r0
   13cec:	b9c0      	cbnz	r0, 13d20 <SetDataBuffersInfo+0x64>
   13cee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13cf2:	603d      	str	r5, [r7, #0]
   13cf4:	713b      	strb	r3, [r7, #4]
   13cf6:	b1ae      	cbz	r6, 13d24 <SetDataBuffersInfo+0x68>
   13cf8:	f1b8 0f00 	cmp.w	r8, #0
   13cfc:	d009      	beq.n	13d12 <SetDataBuffersInfo+0x56>
   13cfe:	4602      	mov	r2, r0
   13d00:	9908      	ldr	r1, [sp, #32]
   13d02:	4640      	mov	r0, r8
   13d04:	f10d 0307 	add.w	r3, sp, #7
   13d08:	f000 ff8e 	bl	14c28 <CC_PalDataBufferAttrGet>
   13d0c:	b940      	cbnz	r0, 13d20 <SetDataBuffersInfo+0x64>
   13d0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13d12:	4620      	mov	r0, r4
   13d14:	f8c6 8000 	str.w	r8, [r6]
   13d18:	7133      	strb	r3, [r6, #4]
   13d1a:	b002      	add	sp, #8
   13d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13d20:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   13d24:	4620      	mov	r0, r4
   13d26:	b002      	add	sp, #8
   13d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013d2c <InitHashDrv>:
   13d2c:	b1e8      	cbz	r0, 13d6a <InitHashDrv+0x3e>
   13d2e:	b510      	push	{r4, lr}
   13d30:	6804      	ldr	r4, [r0, #0]
   13d32:	2c01      	cmp	r4, #1
   13d34:	d004      	beq.n	13d40 <InitHashDrv+0x14>
   13d36:	2c02      	cmp	r4, #2
   13d38:	d010      	beq.n	13d5c <InitHashDrv+0x30>
   13d3a:	b144      	cbz	r4, 13d4e <InitHashDrv+0x22>
   13d3c:	480c      	ldr	r0, [pc, #48]	; (13d70 <InitHashDrv+0x44>)
   13d3e:	bd10      	pop	{r4, pc}
   13d40:	2220      	movs	r2, #32
   13d42:	490c      	ldr	r1, [pc, #48]	; (13d74 <InitHashDrv+0x48>)
   13d44:	3008      	adds	r0, #8
   13d46:	f7ff fedd 	bl	13b04 <CC_PalMemCopyPlat>
   13d4a:	2000      	movs	r0, #0
   13d4c:	bd10      	pop	{r4, pc}
   13d4e:	2214      	movs	r2, #20
   13d50:	4909      	ldr	r1, [pc, #36]	; (13d78 <InitHashDrv+0x4c>)
   13d52:	3008      	adds	r0, #8
   13d54:	f7ff fed6 	bl	13b04 <CC_PalMemCopyPlat>
   13d58:	4620      	mov	r0, r4
   13d5a:	bd10      	pop	{r4, pc}
   13d5c:	2220      	movs	r2, #32
   13d5e:	4907      	ldr	r1, [pc, #28]	; (13d7c <InitHashDrv+0x50>)
   13d60:	3008      	adds	r0, #8
   13d62:	f7ff fecf 	bl	13b04 <CC_PalMemCopyPlat>
   13d66:	2000      	movs	r0, #0
   13d68:	bd10      	pop	{r4, pc}
   13d6a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   13d6e:	4770      	bx	lr
   13d70:	00f30001 	.word	0x00f30001
   13d74:	00015b6c 	.word	0x00015b6c
   13d78:	00015b38 	.word	0x00015b38
   13d7c:	00015b4c 	.word	0x00015b4c

00013d80 <ProcessHashDrv>:
   13d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d84:	2900      	cmp	r1, #0
   13d86:	f000 80ef 	beq.w	13f68 <ProcessHashDrv+0x1e8>
   13d8a:	4604      	mov	r4, r0
   13d8c:	2800      	cmp	r0, #0
   13d8e:	f000 80ef 	beq.w	13f70 <ProcessHashDrv+0x1f0>
   13d92:	6803      	ldr	r3, [r0, #0]
   13d94:	4617      	mov	r7, r2
   13d96:	460e      	mov	r6, r1
   13d98:	2b00      	cmp	r3, #0
   13d9a:	f000 80b9 	beq.w	13f10 <ProcessHashDrv+0x190>
   13d9e:	3b01      	subs	r3, #1
   13da0:	2b01      	cmp	r3, #1
   13da2:	f200 80cd 	bhi.w	13f40 <ProcessHashDrv+0x1c0>
   13da6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13daa:	4873      	ldr	r0, [pc, #460]	; (13f78 <ProcessHashDrv+0x1f8>)
   13dac:	f04f 0802 	mov.w	r8, #2
   13db0:	f7ff f8ee 	bl	12f90 <CC_PalMutexLock>
   13db4:	2800      	cmp	r0, #0
   13db6:	f040 80b5 	bne.w	13f24 <ProcessHashDrv+0x1a4>
   13dba:	2000      	movs	r0, #0
   13dbc:	f7ff f918 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   13dc0:	4605      	mov	r5, r0
   13dc2:	2800      	cmp	r0, #0
   13dc4:	f040 80b8 	bne.w	13f38 <ProcessHashDrv+0x1b8>
   13dc8:	4a6c      	ldr	r2, [pc, #432]	; (13f7c <ProcessHashDrv+0x1fc>)
   13dca:	6813      	ldr	r3, [r2, #0]
   13dcc:	2b00      	cmp	r3, #0
   13dce:	d1fc      	bne.n	13dca <ProcessHashDrv+0x4a>
   13dd0:	486b      	ldr	r0, [pc, #428]	; (13f80 <ProcessHashDrv+0x200>)
   13dd2:	6803      	ldr	r3, [r0, #0]
   13dd4:	2b00      	cmp	r3, #0
   13dd6:	d1fc      	bne.n	13dd2 <ProcessHashDrv+0x52>
   13dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ddc:	f7ff f832 	bl	12e44 <CC_HalClearInterruptBit>
   13de0:	4b68      	ldr	r3, [pc, #416]	; (13f84 <ProcessHashDrv+0x204>)
   13de2:	6818      	ldr	r0, [r3, #0]
   13de4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   13de8:	f7ff f83a 	bl	12e60 <CC_HalMaskInterrupt>
   13dec:	2301      	movs	r3, #1
   13dee:	2007      	movs	r0, #7
   13df0:	4a65      	ldr	r2, [pc, #404]	; (13f88 <ProcessHashDrv+0x208>)
   13df2:	4966      	ldr	r1, [pc, #408]	; (13f8c <ProcessHashDrv+0x20c>)
   13df4:	6013      	str	r3, [r2, #0]
   13df6:	6008      	str	r0, [r1, #0]
   13df8:	f842 3c54 	str.w	r3, [r2, #-84]
   13dfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   13dfe:	4b64      	ldr	r3, [pc, #400]	; (13f90 <ProcessHashDrv+0x210>)
   13e00:	3a48      	subs	r2, #72	; 0x48
   13e02:	6019      	str	r1, [r3, #0]
   13e04:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   13e06:	6011      	str	r1, [r2, #0]
   13e08:	f843 8c0c 	str.w	r8, [r3, #-12]
   13e0c:	6823      	ldr	r3, [r4, #0]
   13e0e:	b163      	cbz	r3, 13e2a <ProcessHashDrv+0xaa>
   13e10:	3b01      	subs	r3, #1
   13e12:	2b01      	cmp	r3, #1
   13e14:	d818      	bhi.n	13e48 <ProcessHashDrv+0xc8>
   13e16:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13e18:	4b5e      	ldr	r3, [pc, #376]	; (13f94 <ProcessHashDrv+0x214>)
   13e1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
   13e1e:	6019      	str	r1, [r3, #0]
   13e20:	6a21      	ldr	r1, [r4, #32]
   13e22:	6011      	str	r1, [r2, #0]
   13e24:	69e2      	ldr	r2, [r4, #28]
   13e26:	f843 2c08 	str.w	r2, [r3, #-8]
   13e2a:	69a1      	ldr	r1, [r4, #24]
   13e2c:	4b5a      	ldr	r3, [pc, #360]	; (13f98 <ProcessHashDrv+0x218>)
   13e2e:	4a5b      	ldr	r2, [pc, #364]	; (13f9c <ProcessHashDrv+0x21c>)
   13e30:	6019      	str	r1, [r3, #0]
   13e32:	6961      	ldr	r1, [r4, #20]
   13e34:	6011      	str	r1, [r2, #0]
   13e36:	6921      	ldr	r1, [r4, #16]
   13e38:	f843 1c08 	str.w	r1, [r3, #-8]
   13e3c:	68e1      	ldr	r1, [r4, #12]
   13e3e:	f842 1c08 	str.w	r1, [r2, #-8]
   13e42:	68a2      	ldr	r2, [r4, #8]
   13e44:	f843 2c10 	str.w	r2, [r3, #-16]
   13e48:	4a55      	ldr	r2, [pc, #340]	; (13fa0 <ProcessHashDrv+0x220>)
   13e4a:	6813      	ldr	r3, [r2, #0]
   13e4c:	2b00      	cmp	r3, #0
   13e4e:	d1fc      	bne.n	13e4a <ProcessHashDrv+0xca>
   13e50:	2f00      	cmp	r7, #0
   13e52:	d059      	beq.n	13f08 <ProcessHashDrv+0x188>
   13e54:	6863      	ldr	r3, [r4, #4]
   13e56:	2040      	movs	r0, #64	; 0x40
   13e58:	2b01      	cmp	r3, #1
   13e5a:	bf04      	itt	eq
   13e5c:	4a51      	ldreq	r2, [pc, #324]	; (13fa4 <ProcessHashDrv+0x224>)
   13e5e:	6013      	streq	r3, [r2, #0]
   13e60:	6831      	ldr	r1, [r6, #0]
   13e62:	4a51      	ldr	r2, [pc, #324]	; (13fa8 <ProcessHashDrv+0x228>)
   13e64:	4b51      	ldr	r3, [pc, #324]	; (13fac <ProcessHashDrv+0x22c>)
   13e66:	6011      	str	r1, [r2, #0]
   13e68:	601f      	str	r7, [r3, #0]
   13e6a:	f7fe ffff 	bl	12e6c <CC_HalWaitInterrupt>
   13e6e:	4605      	mov	r5, r0
   13e70:	4a4b      	ldr	r2, [pc, #300]	; (13fa0 <ProcessHashDrv+0x220>)
   13e72:	6813      	ldr	r3, [r2, #0]
   13e74:	2b00      	cmp	r3, #0
   13e76:	d1fc      	bne.n	13e72 <ProcessHashDrv+0xf2>
   13e78:	4a41      	ldr	r2, [pc, #260]	; (13f80 <ProcessHashDrv+0x200>)
   13e7a:	6813      	ldr	r3, [r2, #0]
   13e7c:	2b00      	cmp	r3, #0
   13e7e:	d1fc      	bne.n	13e7a <ProcessHashDrv+0xfa>
   13e80:	6823      	ldr	r3, [r4, #0]
   13e82:	b15b      	cbz	r3, 13e9c <ProcessHashDrv+0x11c>
   13e84:	3b01      	subs	r3, #1
   13e86:	2b01      	cmp	r3, #1
   13e88:	d816      	bhi.n	13eb8 <ProcessHashDrv+0x138>
   13e8a:	4b42      	ldr	r3, [pc, #264]	; (13f94 <ProcessHashDrv+0x214>)
   13e8c:	4a48      	ldr	r2, [pc, #288]	; (13fb0 <ProcessHashDrv+0x230>)
   13e8e:	6819      	ldr	r1, [r3, #0]
   13e90:	3b08      	subs	r3, #8
   13e92:	6261      	str	r1, [r4, #36]	; 0x24
   13e94:	6812      	ldr	r2, [r2, #0]
   13e96:	6222      	str	r2, [r4, #32]
   13e98:	681b      	ldr	r3, [r3, #0]
   13e9a:	61e3      	str	r3, [r4, #28]
   13e9c:	4b3e      	ldr	r3, [pc, #248]	; (13f98 <ProcessHashDrv+0x218>)
   13e9e:	4a3f      	ldr	r2, [pc, #252]	; (13f9c <ProcessHashDrv+0x21c>)
   13ea0:	6819      	ldr	r1, [r3, #0]
   13ea2:	3a08      	subs	r2, #8
   13ea4:	61a1      	str	r1, [r4, #24]
   13ea6:	6891      	ldr	r1, [r2, #8]
   13ea8:	3b10      	subs	r3, #16
   13eaa:	6161      	str	r1, [r4, #20]
   13eac:	6899      	ldr	r1, [r3, #8]
   13eae:	6121      	str	r1, [r4, #16]
   13eb0:	6812      	ldr	r2, [r2, #0]
   13eb2:	60e2      	str	r2, [r4, #12]
   13eb4:	681b      	ldr	r3, [r3, #0]
   13eb6:	60a3      	str	r3, [r4, #8]
   13eb8:	2101      	movs	r1, #1
   13eba:	2300      	movs	r3, #0
   13ebc:	4834      	ldr	r0, [pc, #208]	; (13f90 <ProcessHashDrv+0x210>)
   13ebe:	4a3d      	ldr	r2, [pc, #244]	; (13fb4 <ProcessHashDrv+0x234>)
   13ec0:	6800      	ldr	r0, [r0, #0]
   13ec2:	64a0      	str	r0, [r4, #72]	; 0x48
   13ec4:	6810      	ldr	r0, [r2, #0]
   13ec6:	64e0      	str	r0, [r4, #76]	; 0x4c
   13ec8:	f842 1c0c 	str.w	r1, [r2, #-12]
   13ecc:	4835      	ldr	r0, [pc, #212]	; (13fa4 <ProcessHashDrv+0x224>)
   13ece:	493a      	ldr	r1, [pc, #232]	; (13fb8 <ProcessHashDrv+0x238>)
   13ed0:	6003      	str	r3, [r0, #0]
   13ed2:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   13ed6:	600b      	str	r3, [r1, #0]
   13ed8:	6813      	ldr	r3, [r2, #0]
   13eda:	2b00      	cmp	r3, #0
   13edc:	d1fc      	bne.n	13ed8 <ProcessHashDrv+0x158>
   13ede:	4a2a      	ldr	r2, [pc, #168]	; (13f88 <ProcessHashDrv+0x208>)
   13ee0:	6013      	str	r3, [r2, #0]
   13ee2:	2d00      	cmp	r5, #0
   13ee4:	d13a      	bne.n	13f5c <ProcessHashDrv+0x1dc>
   13ee6:	4b27      	ldr	r3, [pc, #156]	; (13f84 <ProcessHashDrv+0x204>)
   13ee8:	6818      	ldr	r0, [r3, #0]
   13eea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   13eee:	f7fe ffb7 	bl	12e60 <CC_HalMaskInterrupt>
   13ef2:	2001      	movs	r0, #1
   13ef4:	f7ff f87c 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   13ef8:	bb60      	cbnz	r0, 13f54 <ProcessHashDrv+0x1d4>
   13efa:	481f      	ldr	r0, [pc, #124]	; (13f78 <ProcessHashDrv+0x1f8>)
   13efc:	f7ff f850 	bl	12fa0 <CC_PalMutexUnlock>
   13f00:	bb10      	cbnz	r0, 13f48 <ProcessHashDrv+0x1c8>
   13f02:	4628      	mov	r0, r5
   13f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f08:	2204      	movs	r2, #4
   13f0a:	4b2b      	ldr	r3, [pc, #172]	; (13fb8 <ProcessHashDrv+0x238>)
   13f0c:	601a      	str	r2, [r3, #0]
   13f0e:	e7af      	b.n	13e70 <ProcessHashDrv+0xf0>
   13f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13f14:	4818      	ldr	r0, [pc, #96]	; (13f78 <ProcessHashDrv+0x1f8>)
   13f16:	f04f 0801 	mov.w	r8, #1
   13f1a:	f7ff f839 	bl	12f90 <CC_PalMutexLock>
   13f1e:	2800      	cmp	r0, #0
   13f20:	f43f af4b 	beq.w	13dba <ProcessHashDrv+0x3a>
   13f24:	4825      	ldr	r0, [pc, #148]	; (13fbc <ProcessHashDrv+0x23c>)
   13f26:	f7fe f8e9 	bl	120fc <CC_PalAbort>
   13f2a:	2000      	movs	r0, #0
   13f2c:	f7ff f860 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   13f30:	4605      	mov	r5, r0
   13f32:	2800      	cmp	r0, #0
   13f34:	f43f af48 	beq.w	13dc8 <ProcessHashDrv+0x48>
   13f38:	4821      	ldr	r0, [pc, #132]	; (13fc0 <ProcessHashDrv+0x240>)
   13f3a:	f7fe f8df 	bl	120fc <CC_PalAbort>
   13f3e:	e743      	b.n	13dc8 <ProcessHashDrv+0x48>
   13f40:	4d20      	ldr	r5, [pc, #128]	; (13fc4 <ProcessHashDrv+0x244>)
   13f42:	4628      	mov	r0, r5
   13f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f48:	481f      	ldr	r0, [pc, #124]	; (13fc8 <ProcessHashDrv+0x248>)
   13f4a:	f7fe f8d7 	bl	120fc <CC_PalAbort>
   13f4e:	4628      	mov	r0, r5
   13f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f54:	481d      	ldr	r0, [pc, #116]	; (13fcc <ProcessHashDrv+0x24c>)
   13f56:	f7fe f8d1 	bl	120fc <CC_PalAbort>
   13f5a:	e7ce      	b.n	13efa <ProcessHashDrv+0x17a>
   13f5c:	2110      	movs	r1, #16
   13f5e:	f104 0008 	add.w	r0, r4, #8
   13f62:	f7ff fdd3 	bl	13b0c <CC_PalMemSetZeroPlat>
   13f66:	e7be      	b.n	13ee6 <ProcessHashDrv+0x166>
   13f68:	4d19      	ldr	r5, [pc, #100]	; (13fd0 <ProcessHashDrv+0x250>)
   13f6a:	4628      	mov	r0, r5
   13f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f70:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   13f74:	e7c5      	b.n	13f02 <ProcessHashDrv+0x182>
   13f76:	bf00      	nop
   13f78:	200000f4 	.word	0x200000f4
   13f7c:	5084191c 	.word	0x5084191c
   13f80:	50841c20 	.word	0x50841c20
   13f84:	50841a04 	.word	0x50841a04
   13f88:	50841818 	.word	0x50841818
   13f8c:	50841900 	.word	0x50841900
   13f90:	508417cc 	.word	0x508417cc
   13f94:	5084165c 	.word	0x5084165c
   13f98:	50841650 	.word	0x50841650
   13f9c:	5084164c 	.word	0x5084164c
   13fa0:	50841910 	.word	0x50841910
   13fa4:	50841684 	.word	0x50841684
   13fa8:	50841c28 	.word	0x50841c28
   13fac:	50841c2c 	.word	0x50841c2c
   13fb0:	50841658 	.word	0x50841658
   13fb4:	508417d0 	.word	0x508417d0
   13fb8:	508417c8 	.word	0x508417c8
   13fbc:	00015a6c 	.word	0x00015a6c
   13fc0:	00015a84 	.word	0x00015a84
   13fc4:	00f30001 	.word	0x00f30001
   13fc8:	00015ac4 	.word	0x00015ac4
   13fcc:	00015aa4 	.word	0x00015aa4
   13fd0:	00f30003 	.word	0x00f30003

00013fd4 <FinishHashDrv>:
   13fd4:	2800      	cmp	r0, #0
   13fd6:	d03a      	beq.n	1404e <FinishHashDrv+0x7a>
   13fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fdc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   13fe0:	fa92 f882 	rev.w	r8, r2
   13fe4:	fa93 fe83 	rev.w	lr, r3
   13fe8:	6a02      	ldr	r2, [r0, #32]
   13fea:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13fec:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
   13ff0:	ba12      	rev	r2, r2
   13ff2:	ba24      	rev	r4, r4
   13ff4:	ba1b      	rev	r3, r3
   13ff6:	6104      	str	r4, [r0, #16]
   13ff8:	6202      	str	r2, [r0, #32]
   13ffa:	6a84      	ldr	r4, [r0, #40]	; 0x28
   13ffc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   13ffe:	6243      	str	r3, [r0, #36]	; 0x24
   14000:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   14002:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
   14006:	ba09      	rev	r1, r1
   14008:	ba36      	rev	r6, r6
   1400a:	ba2d      	rev	r5, r5
   1400c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1400e:	6086      	str	r6, [r0, #8]
   14010:	60c5      	str	r5, [r0, #12]
   14012:	6b06      	ldr	r6, [r0, #48]	; 0x30
   14014:	6b45      	ldr	r5, [r0, #52]	; 0x34
   14016:	6141      	str	r1, [r0, #20]
   14018:	fa94 fc84 	rev.w	ip, r4
   1401c:	ba19      	rev	r1, r3
   1401e:	ba14      	rev	r4, r2
   14020:	6c43      	ldr	r3, [r0, #68]	; 0x44
   14022:	6c02      	ldr	r2, [r0, #64]	; 0x40
   14024:	ba3f      	rev	r7, r7
   14026:	ba36      	rev	r6, r6
   14028:	ba2d      	rev	r5, r5
   1402a:	ba12      	rev	r2, r2
   1402c:	ba1b      	rev	r3, r3
   1402e:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   14032:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   14036:	f8c0 8018 	str.w	r8, [r0, #24]
   1403a:	f8c0 e01c 	str.w	lr, [r0, #28]
   1403e:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   14042:	62c7      	str	r7, [r0, #44]	; 0x2c
   14044:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   14048:	2000      	movs	r0, #0
   1404a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1404e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   14052:	4770      	bx	lr

00014054 <LoadAesKey>:
   14054:	2800      	cmp	r0, #0
   14056:	d060      	beq.n	1411a <LoadAesKey+0xc6>
   14058:	b538      	push	{r3, r4, r5, lr}
   1405a:	4604      	mov	r4, r0
   1405c:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   14060:	2802      	cmp	r0, #2
   14062:	d016      	beq.n	14092 <LoadAesKey+0x3e>
   14064:	2803      	cmp	r0, #3
   14066:	d03c      	beq.n	140e2 <LoadAesKey+0x8e>
   14068:	2800      	cmp	r0, #0
   1406a:	d02f      	beq.n	140cc <LoadAesKey+0x78>
   1406c:	482c      	ldr	r0, [pc, #176]	; (14120 <LoadAesKey+0xcc>)
   1406e:	4d2d      	ldr	r5, [pc, #180]	; (14124 <LoadAesKey+0xd0>)
   14070:	682a      	ldr	r2, [r5, #0]
   14072:	4b2d      	ldr	r3, [pc, #180]	; (14128 <LoadAesKey+0xd4>)
   14074:	6812      	ldr	r2, [r2, #0]
   14076:	492d      	ldr	r1, [pc, #180]	; (1412c <LoadAesKey+0xd8>)
   14078:	601a      	str	r2, [r3, #0]
   1407a:	682b      	ldr	r3, [r5, #0]
   1407c:	4a2c      	ldr	r2, [pc, #176]	; (14130 <LoadAesKey+0xdc>)
   1407e:	685c      	ldr	r4, [r3, #4]
   14080:	4b2c      	ldr	r3, [pc, #176]	; (14134 <LoadAesKey+0xe0>)
   14082:	600c      	str	r4, [r1, #0]
   14084:	6829      	ldr	r1, [r5, #0]
   14086:	6889      	ldr	r1, [r1, #8]
   14088:	6011      	str	r1, [r2, #0]
   1408a:	682a      	ldr	r2, [r5, #0]
   1408c:	68d2      	ldr	r2, [r2, #12]
   1408e:	601a      	str	r2, [r3, #0]
   14090:	bd38      	pop	{r3, r4, r5, pc}
   14092:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14094:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14096:	f000 fbdd 	bl	14854 <kmu_validate_slot_and_size_no_kdr>
   1409a:	4d22      	ldr	r5, [pc, #136]	; (14124 <LoadAesKey+0xd0>)
   1409c:	2800      	cmp	r0, #0
   1409e:	d1e7      	bne.n	14070 <LoadAesKey+0x1c>
   140a0:	682a      	ldr	r2, [r5, #0]
   140a2:	4b21      	ldr	r3, [pc, #132]	; (14128 <LoadAesKey+0xd4>)
   140a4:	6810      	ldr	r0, [r2, #0]
   140a6:	4921      	ldr	r1, [pc, #132]	; (1412c <LoadAesKey+0xd8>)
   140a8:	6018      	str	r0, [r3, #0]
   140aa:	6828      	ldr	r0, [r5, #0]
   140ac:	4a20      	ldr	r2, [pc, #128]	; (14130 <LoadAesKey+0xdc>)
   140ae:	6840      	ldr	r0, [r0, #4]
   140b0:	6008      	str	r0, [r1, #0]
   140b2:	6829      	ldr	r1, [r5, #0]
   140b4:	6889      	ldr	r1, [r1, #8]
   140b6:	6011      	str	r1, [r2, #0]
   140b8:	682a      	ldr	r2, [r5, #0]
   140ba:	68d2      	ldr	r2, [r2, #12]
   140bc:	60da      	str	r2, [r3, #12]
   140be:	6b21      	ldr	r1, [r4, #48]	; 0x30
   140c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   140c2:	f000 fc3b 	bl	1493c <kmu_load_key_aes>
   140c6:	2800      	cmp	r0, #0
   140c8:	d025      	beq.n	14116 <LoadAesKey+0xc2>
   140ca:	e7d1      	b.n	14070 <LoadAesKey+0x1c>
   140cc:	6921      	ldr	r1, [r4, #16]
   140ce:	4a16      	ldr	r2, [pc, #88]	; (14128 <LoadAesKey+0xd4>)
   140d0:	4b16      	ldr	r3, [pc, #88]	; (1412c <LoadAesKey+0xd8>)
   140d2:	6011      	str	r1, [r2, #0]
   140d4:	6961      	ldr	r1, [r4, #20]
   140d6:	6019      	str	r1, [r3, #0]
   140d8:	69a1      	ldr	r1, [r4, #24]
   140da:	6091      	str	r1, [r2, #8]
   140dc:	69e2      	ldr	r2, [r4, #28]
   140de:	609a      	str	r2, [r3, #8]
   140e0:	bd38      	pop	{r3, r4, r5, pc}
   140e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   140e4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   140e6:	f000 fbf9 	bl	148dc <kmu_validate_kdr_slot_and_size>
   140ea:	4d0e      	ldr	r5, [pc, #56]	; (14124 <LoadAesKey+0xd0>)
   140ec:	2800      	cmp	r0, #0
   140ee:	d1bf      	bne.n	14070 <LoadAesKey+0x1c>
   140f0:	682a      	ldr	r2, [r5, #0]
   140f2:	4b0d      	ldr	r3, [pc, #52]	; (14128 <LoadAesKey+0xd4>)
   140f4:	6810      	ldr	r0, [r2, #0]
   140f6:	490d      	ldr	r1, [pc, #52]	; (1412c <LoadAesKey+0xd8>)
   140f8:	6018      	str	r0, [r3, #0]
   140fa:	6828      	ldr	r0, [r5, #0]
   140fc:	4a0c      	ldr	r2, [pc, #48]	; (14130 <LoadAesKey+0xdc>)
   140fe:	6840      	ldr	r0, [r0, #4]
   14100:	6008      	str	r0, [r1, #0]
   14102:	6829      	ldr	r1, [r5, #0]
   14104:	6889      	ldr	r1, [r1, #8]
   14106:	6011      	str	r1, [r2, #0]
   14108:	682a      	ldr	r2, [r5, #0]
   1410a:	68d2      	ldr	r2, [r2, #12]
   1410c:	60da      	str	r2, [r3, #12]
   1410e:	f000 fc09 	bl	14924 <kmu_use_kdr_key>
   14112:	2800      	cmp	r0, #0
   14114:	d1ac      	bne.n	14070 <LoadAesKey+0x1c>
   14116:	2000      	movs	r0, #0
   14118:	bd38      	pop	{r3, r4, r5, pc}
   1411a:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1411e:	4770      	bx	lr
   14120:	00f10009 	.word	0x00f10009
   14124:	200000e4 	.word	0x200000e4
   14128:	50841400 	.word	0x50841400
   1412c:	50841404 	.word	0x50841404
   14130:	50841408 	.word	0x50841408
   14134:	5084140c 	.word	0x5084140c

00014138 <InitAes.part.0>:
   14138:	b510      	push	{r4, lr}
   1413a:	4604      	mov	r4, r0
   1413c:	4a31      	ldr	r2, [pc, #196]	; (14204 <InitAes.part.0+0xcc>)
   1413e:	6813      	ldr	r3, [r2, #0]
   14140:	2b00      	cmp	r3, #0
   14142:	d1fc      	bne.n	1413e <InitAes.part.0+0x6>
   14144:	4a30      	ldr	r2, [pc, #192]	; (14208 <InitAes.part.0+0xd0>)
   14146:	6813      	ldr	r3, [r2, #0]
   14148:	2b00      	cmp	r3, #0
   1414a:	d1fc      	bne.n	14146 <InitAes.part.0+0xe>
   1414c:	4a2f      	ldr	r2, [pc, #188]	; (1420c <InitAes.part.0+0xd4>)
   1414e:	6813      	ldr	r3, [r2, #0]
   14150:	2b00      	cmp	r3, #0
   14152:	d1fc      	bne.n	1414e <InitAes.part.0+0x16>
   14154:	4a2e      	ldr	r2, [pc, #184]	; (14210 <InitAes.part.0+0xd8>)
   14156:	6813      	ldr	r3, [r2, #0]
   14158:	2b00      	cmp	r3, #0
   1415a:	d1fc      	bne.n	14156 <InitAes.part.0+0x1e>
   1415c:	4a2d      	ldr	r2, [pc, #180]	; (14214 <InitAes.part.0+0xdc>)
   1415e:	6813      	ldr	r3, [r2, #0]
   14160:	2b00      	cmp	r3, #0
   14162:	d1fc      	bne.n	1415e <InitAes.part.0+0x26>
   14164:	4a2c      	ldr	r2, [pc, #176]	; (14218 <InitAes.part.0+0xe0>)
   14166:	6813      	ldr	r3, [r2, #0]
   14168:	2b00      	cmp	r3, #0
   1416a:	d1fc      	bne.n	14166 <InitAes.part.0+0x2e>
   1416c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14170:	f7fe fe68 	bl	12e44 <CC_HalClearInterruptBit>
   14174:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14176:	f023 0304 	bic.w	r3, r3, #4
   1417a:	2b03      	cmp	r3, #3
   1417c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1417e:	d036      	beq.n	141ee <InitAes.part.0+0xb6>
   14180:	2b01      	cmp	r3, #1
   14182:	4b26      	ldr	r3, [pc, #152]	; (1421c <InitAes.part.0+0xe4>)
   14184:	6818      	ldr	r0, [r3, #0]
   14186:	bf0c      	ite	eq
   14188:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1418c:	f020 0020 	bicne.w	r0, r0, #32
   14190:	f7fe fe66 	bl	12e60 <CC_HalMaskInterrupt>
   14194:	2101      	movs	r1, #1
   14196:	4b22      	ldr	r3, [pc, #136]	; (14220 <InitAes.part.0+0xe8>)
   14198:	4a1a      	ldr	r2, [pc, #104]	; (14204 <InitAes.part.0+0xcc>)
   1419a:	6019      	str	r1, [r3, #0]
   1419c:	6813      	ldr	r3, [r2, #0]
   1419e:	2b00      	cmp	r3, #0
   141a0:	d1fc      	bne.n	1419c <InitAes.part.0+0x64>
   141a2:	4a19      	ldr	r2, [pc, #100]	; (14208 <InitAes.part.0+0xd0>)
   141a4:	6813      	ldr	r3, [r2, #0]
   141a6:	2b00      	cmp	r3, #0
   141a8:	d1fc      	bne.n	141a4 <InitAes.part.0+0x6c>
   141aa:	491e      	ldr	r1, [pc, #120]	; (14224 <InitAes.part.0+0xec>)
   141ac:	4a15      	ldr	r2, [pc, #84]	; (14204 <InitAes.part.0+0xcc>)
   141ae:	600b      	str	r3, [r1, #0]
   141b0:	6813      	ldr	r3, [r2, #0]
   141b2:	2b00      	cmp	r3, #0
   141b4:	d1fc      	bne.n	141b0 <InitAes.part.0+0x78>
   141b6:	4a14      	ldr	r2, [pc, #80]	; (14208 <InitAes.part.0+0xd0>)
   141b8:	6813      	ldr	r3, [r2, #0]
   141ba:	2b00      	cmp	r3, #0
   141bc:	d1fc      	bne.n	141b8 <InitAes.part.0+0x80>
   141be:	6b62      	ldr	r2, [r4, #52]	; 0x34
   141c0:	f022 0104 	bic.w	r1, r2, #4
   141c4:	2903      	cmp	r1, #3
   141c6:	bf18      	it	ne
   141c8:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   141ca:	ea4f 0282 	mov.w	r2, r2, lsl #2
   141ce:	bf18      	it	ne
   141d0:	f003 0301 	andne.w	r3, r3, #1
   141d4:	4914      	ldr	r1, [pc, #80]	; (14228 <InitAes.part.0+0xf0>)
   141d6:	f002 021c 	and.w	r2, r2, #28
   141da:	4313      	orrs	r3, r2
   141dc:	600b      	str	r3, [r1, #0]
   141de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   141e0:	2b07      	cmp	r3, #7
   141e2:	d102      	bne.n	141ea <InitAes.part.0+0xb2>
   141e4:	2201      	movs	r2, #1
   141e6:	4b11      	ldr	r3, [pc, #68]	; (1422c <InitAes.part.0+0xf4>)
   141e8:	601a      	str	r2, [r3, #0]
   141ea:	2000      	movs	r0, #0
   141ec:	bd10      	pop	{r4, pc}
   141ee:	2b01      	cmp	r3, #1
   141f0:	4b0a      	ldr	r3, [pc, #40]	; (1421c <InitAes.part.0+0xe4>)
   141f2:	6818      	ldr	r0, [r3, #0]
   141f4:	bf0c      	ite	eq
   141f6:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   141fa:	f020 0010 	bicne.w	r0, r0, #16
   141fe:	f7fe fe2f 	bl	12e60 <CC_HalMaskInterrupt>
   14202:	e7c7      	b.n	14194 <InitAes.part.0+0x5c>
   14204:	50841910 	.word	0x50841910
   14208:	50841470 	.word	0x50841470
   1420c:	50841d20 	.word	0x50841d20
   14210:	50841c20 	.word	0x50841c20
   14214:	50841d38 	.word	0x50841d38
   14218:	50841c38 	.word	0x50841c38
   1421c:	50841a04 	.word	0x50841a04
   14220:	50841900 	.word	0x50841900
   14224:	508414bc 	.word	0x508414bc
   14228:	508414c0 	.word	0x508414c0
   1422c:	5084147c 	.word	0x5084147c

00014230 <ProcessAesDrv>:
   14230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14234:	b087      	sub	sp, #28
   14236:	2900      	cmp	r1, #0
   14238:	f000 80a5 	beq.w	14386 <ProcessAesDrv+0x156>
   1423c:	4616      	mov	r6, r2
   1423e:	2a00      	cmp	r2, #0
   14240:	f000 80a1 	beq.w	14386 <ProcessAesDrv+0x156>
   14244:	4604      	mov	r4, r0
   14246:	2800      	cmp	r0, #0
   14248:	f000 8141 	beq.w	144ce <ProcessAesDrv+0x29e>
   1424c:	461f      	mov	r7, r3
   1424e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   14250:	460d      	mov	r5, r1
   14252:	2b00      	cmp	r3, #0
   14254:	d150      	bne.n	142f8 <ProcessAesDrv+0xc8>
   14256:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1425a:	d252      	bcs.n	14302 <ProcessAesDrv+0xd2>
   1425c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   14260:	2b04      	cmp	r3, #4
   14262:	f000 810b 	beq.w	1447c <ProcessAesDrv+0x24c>
   14266:	f04f 0800 	mov.w	r8, #0
   1426a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1426e:	48a9      	ldr	r0, [pc, #676]	; (14514 <ProcessAesDrv+0x2e4>)
   14270:	f7fe fe8e 	bl	12f90 <CC_PalMutexLock>
   14274:	2800      	cmp	r0, #0
   14276:	f040 80e0 	bne.w	1443a <ProcessAesDrv+0x20a>
   1427a:	2000      	movs	r0, #0
   1427c:	f7fe feb8 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   14280:	2800      	cmp	r0, #0
   14282:	f040 80e3 	bne.w	1444c <ProcessAesDrv+0x21c>
   14286:	2101      	movs	r1, #1
   14288:	4ba3      	ldr	r3, [pc, #652]	; (14518 <ProcessAesDrv+0x2e8>)
   1428a:	4aa4      	ldr	r2, [pc, #656]	; (1451c <ProcessAesDrv+0x2ec>)
   1428c:	6019      	str	r1, [r3, #0]
   1428e:	6813      	ldr	r3, [r2, #0]
   14290:	2b00      	cmp	r3, #0
   14292:	d1fc      	bne.n	1428e <ProcessAesDrv+0x5e>
   14294:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14296:	2b03      	cmp	r3, #3
   14298:	dc39      	bgt.n	1430e <ProcessAesDrv+0xde>
   1429a:	2b00      	cmp	r3, #0
   1429c:	da3a      	bge.n	14314 <ProcessAesDrv+0xe4>
   1429e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 14568 <ProcessAesDrv+0x338>
   142a2:	4a9e      	ldr	r2, [pc, #632]	; (1451c <ProcessAesDrv+0x2ec>)
   142a4:	6813      	ldr	r3, [r2, #0]
   142a6:	2b00      	cmp	r3, #0
   142a8:	d1fc      	bne.n	142a4 <ProcessAesDrv+0x74>
   142aa:	f1b8 0f00 	cmp.w	r8, #0
   142ae:	f040 80dc 	bne.w	1446a <ProcessAesDrv+0x23a>
   142b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   142b4:	f023 0304 	bic.w	r3, r3, #4
   142b8:	2b03      	cmp	r3, #3
   142ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   142bc:	d058      	beq.n	14370 <ProcessAesDrv+0x140>
   142be:	2b01      	cmp	r3, #1
   142c0:	4b97      	ldr	r3, [pc, #604]	; (14520 <ProcessAesDrv+0x2f0>)
   142c2:	6818      	ldr	r0, [r3, #0]
   142c4:	bf0c      	ite	eq
   142c6:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   142ca:	f040 0020 	orrne.w	r0, r0, #32
   142ce:	f7fe fdc7 	bl	12e60 <CC_HalMaskInterrupt>
   142d2:	2200      	movs	r2, #0
   142d4:	4b90      	ldr	r3, [pc, #576]	; (14518 <ProcessAesDrv+0x2e8>)
   142d6:	2001      	movs	r0, #1
   142d8:	601a      	str	r2, [r3, #0]
   142da:	f7fe fe89 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   142de:	2800      	cmp	r0, #0
   142e0:	f040 80bf 	bne.w	14462 <ProcessAesDrv+0x232>
   142e4:	488b      	ldr	r0, [pc, #556]	; (14514 <ProcessAesDrv+0x2e4>)
   142e6:	f7fe fe5b 	bl	12fa0 <CC_PalMutexUnlock>
   142ea:	2800      	cmp	r0, #0
   142ec:	f040 80b2 	bne.w	14454 <ProcessAesDrv+0x224>
   142f0:	4648      	mov	r0, r9
   142f2:	b007      	add	sp, #28
   142f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f8:	2b01      	cmp	r3, #1
   142fa:	d1af      	bne.n	1425c <ProcessAesDrv+0x2c>
   142fc:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   14300:	d3ac      	bcc.n	1425c <ProcessAesDrv+0x2c>
   14302:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1456c <ProcessAesDrv+0x33c>
   14306:	4648      	mov	r0, r9
   14308:	b007      	add	sp, #28
   1430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1430e:	3b06      	subs	r3, #6
   14310:	2b01      	cmp	r3, #1
   14312:	d8c4      	bhi.n	1429e <ProcessAesDrv+0x6e>
   14314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14316:	2b01      	cmp	r3, #1
   14318:	f200 80d6 	bhi.w	144c8 <ProcessAesDrv+0x298>
   1431c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1431e:	2b01      	cmp	r3, #1
   14320:	d837      	bhi.n	14392 <ProcessAesDrv+0x162>
   14322:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14324:	2b01      	cmp	r3, #1
   14326:	f200 8134 	bhi.w	14592 <ProcessAesDrv+0x362>
   1432a:	4620      	mov	r0, r4
   1432c:	f7ff ff04 	bl	14138 <InitAes.part.0>
   14330:	4681      	mov	r9, r0
   14332:	2800      	cmp	r0, #0
   14334:	d1b5      	bne.n	142a2 <ProcessAesDrv+0x72>
   14336:	4620      	mov	r0, r4
   14338:	f7ff fe8c 	bl	14054 <LoadAesKey>
   1433c:	4681      	mov	r9, r0
   1433e:	2800      	cmp	r0, #0
   14340:	d1af      	bne.n	142a2 <ProcessAesDrv+0x72>
   14342:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14344:	2b07      	cmp	r3, #7
   14346:	d8aa      	bhi.n	1429e <ProcessAesDrv+0x6e>
   14348:	a201      	add	r2, pc, #4	; (adr r2, 14350 <ProcessAesDrv+0x120>)
   1434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1434e:	bf00      	nop
   14350:	000143af 	.word	0x000143af
   14354:	00014399 	.word	0x00014399
   14358:	0001450b 	.word	0x0001450b
   1435c:	00014399 	.word	0x00014399
   14360:	0001429f 	.word	0x0001429f
   14364:	0001429f 	.word	0x0001429f
   14368:	0001450b 	.word	0x0001450b
   1436c:	00014399 	.word	0x00014399
   14370:	2b01      	cmp	r3, #1
   14372:	4b6b      	ldr	r3, [pc, #428]	; (14520 <ProcessAesDrv+0x2f0>)
   14374:	6818      	ldr	r0, [r3, #0]
   14376:	bf0c      	ite	eq
   14378:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1437c:	f040 0010 	orrne.w	r0, r0, #16
   14380:	f7fe fd6e 	bl	12e60 <CC_HalMaskInterrupt>
   14384:	e7a5      	b.n	142d2 <ProcessAesDrv+0xa2>
   14386:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 14570 <ProcessAesDrv+0x340>
   1438a:	4648      	mov	r0, r9
   1438c:	b007      	add	sp, #28
   1438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14392:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 14574 <ProcessAesDrv+0x344>
   14396:	e784      	b.n	142a2 <ProcessAesDrv+0x72>
   14398:	6821      	ldr	r1, [r4, #0]
   1439a:	4a62      	ldr	r2, [pc, #392]	; (14524 <ProcessAesDrv+0x2f4>)
   1439c:	4b62      	ldr	r3, [pc, #392]	; (14528 <ProcessAesDrv+0x2f8>)
   1439e:	6011      	str	r1, [r2, #0]
   143a0:	6861      	ldr	r1, [r4, #4]
   143a2:	6019      	str	r1, [r3, #0]
   143a4:	68a1      	ldr	r1, [r4, #8]
   143a6:	6091      	str	r1, [r2, #8]
   143a8:	68e2      	ldr	r2, [r4, #12]
   143aa:	609a      	str	r2, [r3, #8]
   143ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   143ae:	f023 0304 	bic.w	r3, r3, #4
   143b2:	2b03      	cmp	r3, #3
   143b4:	682a      	ldr	r2, [r5, #0]
   143b6:	d009      	beq.n	143cc <ProcessAesDrv+0x19c>
   143b8:	6e21      	ldr	r1, [r4, #96]	; 0x60
   143ba:	6833      	ldr	r3, [r6, #0]
   143bc:	2901      	cmp	r1, #1
   143be:	bf07      	ittee	eq
   143c0:	485a      	ldreq	r0, [pc, #360]	; (1452c <ProcessAesDrv+0x2fc>)
   143c2:	495b      	ldreq	r1, [pc, #364]	; (14530 <ProcessAesDrv+0x300>)
   143c4:	485b      	ldrne	r0, [pc, #364]	; (14534 <ProcessAesDrv+0x304>)
   143c6:	495c      	ldrne	r1, [pc, #368]	; (14538 <ProcessAesDrv+0x308>)
   143c8:	6003      	str	r3, [r0, #0]
   143ca:	600f      	str	r7, [r1, #0]
   143cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   143ce:	2b01      	cmp	r3, #1
   143d0:	bf0b      	itete	eq
   143d2:	4b5a      	ldreq	r3, [pc, #360]	; (1453c <ProcessAesDrv+0x30c>)
   143d4:	4b5a      	ldrne	r3, [pc, #360]	; (14540 <ProcessAesDrv+0x310>)
   143d6:	495b      	ldreq	r1, [pc, #364]	; (14544 <ProcessAesDrv+0x314>)
   143d8:	495b      	ldrne	r1, [pc, #364]	; (14548 <ProcessAesDrv+0x318>)
   143da:	600a      	str	r2, [r1, #0]
   143dc:	601f      	str	r7, [r3, #0]
   143de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   143e0:	f023 0304 	bic.w	r3, r3, #4
   143e4:	2b03      	cmp	r3, #3
   143e6:	d075      	beq.n	144d4 <ProcessAesDrv+0x2a4>
   143e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   143ea:	2b01      	cmp	r3, #1
   143ec:	bf0c      	ite	eq
   143ee:	2080      	moveq	r0, #128	; 0x80
   143f0:	2020      	movne	r0, #32
   143f2:	f7fe fd3b 	bl	12e6c <CC_HalWaitInterrupt>
   143f6:	4681      	mov	r9, r0
   143f8:	2800      	cmp	r0, #0
   143fa:	f47f af52 	bne.w	142a2 <ProcessAesDrv+0x72>
   143fe:	4b47      	ldr	r3, [pc, #284]	; (1451c <ProcessAesDrv+0x2ec>)
   14400:	681a      	ldr	r2, [r3, #0]
   14402:	2a00      	cmp	r2, #0
   14404:	d1fc      	bne.n	14400 <ProcessAesDrv+0x1d0>
   14406:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14408:	4691      	mov	r9, r2
   1440a:	3b01      	subs	r3, #1
   1440c:	2b06      	cmp	r3, #6
   1440e:	d811      	bhi.n	14434 <ProcessAesDrv+0x204>
   14410:	e8df f003 	tbb	[pc, r3]
   14414:	1004bc04 	.word	0x1004bc04
   14418:	bc10      	.short	0xbc10
   1441a:	04          	.byte	0x04
   1441b:	00          	.byte	0x00
   1441c:	4a41      	ldr	r2, [pc, #260]	; (14524 <ProcessAesDrv+0x2f4>)
   1441e:	4b42      	ldr	r3, [pc, #264]	; (14528 <ProcessAesDrv+0x2f8>)
   14420:	6811      	ldr	r1, [r2, #0]
   14422:	3208      	adds	r2, #8
   14424:	6021      	str	r1, [r4, #0]
   14426:	6819      	ldr	r1, [r3, #0]
   14428:	3308      	adds	r3, #8
   1442a:	6061      	str	r1, [r4, #4]
   1442c:	6812      	ldr	r2, [r2, #0]
   1442e:	60a2      	str	r2, [r4, #8]
   14430:	681b      	ldr	r3, [r3, #0]
   14432:	60e3      	str	r3, [r4, #12]
   14434:	2301      	movs	r3, #1
   14436:	65a3      	str	r3, [r4, #88]	; 0x58
   14438:	e733      	b.n	142a2 <ProcessAesDrv+0x72>
   1443a:	4844      	ldr	r0, [pc, #272]	; (1454c <ProcessAesDrv+0x31c>)
   1443c:	f7fd fe5e 	bl	120fc <CC_PalAbort>
   14440:	2000      	movs	r0, #0
   14442:	f7fe fdd5 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   14446:	2800      	cmp	r0, #0
   14448:	f43f af1d 	beq.w	14286 <ProcessAesDrv+0x56>
   1444c:	4840      	ldr	r0, [pc, #256]	; (14550 <ProcessAesDrv+0x320>)
   1444e:	f7fd fe55 	bl	120fc <CC_PalAbort>
   14452:	e718      	b.n	14286 <ProcessAesDrv+0x56>
   14454:	483f      	ldr	r0, [pc, #252]	; (14554 <ProcessAesDrv+0x324>)
   14456:	f7fd fe51 	bl	120fc <CC_PalAbort>
   1445a:	4648      	mov	r0, r9
   1445c:	b007      	add	sp, #28
   1445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14462:	483d      	ldr	r0, [pc, #244]	; (14558 <ProcessAesDrv+0x328>)
   14464:	f7fd fe4a 	bl	120fc <CC_PalAbort>
   14468:	e73c      	b.n	142e4 <ProcessAesDrv+0xb4>
   1446a:	2304      	movs	r3, #4
   1446c:	2120      	movs	r1, #32
   1446e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   14472:	f104 0010 	add.w	r0, r4, #16
   14476:	f7ff fb49 	bl	13b0c <CC_PalMemSetZeroPlat>
   1447a:	e71a      	b.n	142b2 <ProcessAesDrv+0x82>
   1447c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1447e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14480:	f000 f9d2 	bl	14828 <kmu_validate_slot_and_size>
   14484:	b9e8      	cbnz	r0, 144c2 <ProcessAesDrv+0x292>
   14486:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 14578 <ProcessAesDrv+0x348>
   1448a:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 1457c <ProcessAesDrv+0x34c>
   1448e:	f8d8 3000 	ldr.w	r3, [r8]
   14492:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 14580 <ProcessAesDrv+0x350>
   14496:	681b      	ldr	r3, [r3, #0]
   14498:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 14584 <ProcessAesDrv+0x354>
   1449c:	f8cb 3000 	str.w	r3, [fp]
   144a0:	f8d8 3000 	ldr.w	r3, [r8]
   144a4:	4a2d      	ldr	r2, [pc, #180]	; (1455c <ProcessAesDrv+0x32c>)
   144a6:	685b      	ldr	r3, [r3, #4]
   144a8:	f8ca 3000 	str.w	r3, [sl]
   144ac:	f8d8 3000 	ldr.w	r3, [r8]
   144b0:	689b      	ldr	r3, [r3, #8]
   144b2:	f8c9 3000 	str.w	r3, [r9]
   144b6:	f8d8 3000 	ldr.w	r3, [r8]
   144ba:	68db      	ldr	r3, [r3, #12]
   144bc:	6013      	str	r3, [r2, #0]
   144be:	6b21      	ldr	r1, [r4, #48]	; 0x30
   144c0:	b171      	cbz	r1, 144e0 <ProcessAesDrv+0x2b0>
   144c2:	f04f 0801 	mov.w	r8, #1
   144c6:	e6d0      	b.n	1426a <ProcessAesDrv+0x3a>
   144c8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 14588 <ProcessAesDrv+0x358>
   144cc:	e6e9      	b.n	142a2 <ProcessAesDrv+0x72>
   144ce:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   144d2:	e70d      	b.n	142f0 <ProcessAesDrv+0xc0>
   144d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   144d6:	2b01      	cmp	r3, #1
   144d8:	bf0c      	ite	eq
   144da:	2040      	moveq	r0, #64	; 0x40
   144dc:	2010      	movne	r0, #16
   144de:	e788      	b.n	143f2 <ProcessAesDrv+0x1c2>
   144e0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   144e4:	9300      	str	r3, [sp, #0]
   144e6:	2310      	movs	r3, #16
   144e8:	f104 0010 	add.w	r0, r4, #16
   144ec:	e9cd 2001 	strd	r2, r0, [sp, #4]
   144f0:	9303      	str	r3, [sp, #12]
   144f2:	9005      	str	r0, [sp, #20]
   144f4:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   144f8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   144fa:	f000 fa93 	bl	14a24 <kmu_derive_cmac>
   144fe:	2800      	cmp	r0, #0
   14500:	d14a      	bne.n	14598 <ProcessAesDrv+0x368>
   14502:	2300      	movs	r3, #0
   14504:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   14508:	e7db      	b.n	144c2 <ProcessAesDrv+0x292>
   1450a:	6821      	ldr	r1, [r4, #0]
   1450c:	4a14      	ldr	r2, [pc, #80]	; (14560 <ProcessAesDrv+0x330>)
   1450e:	4b15      	ldr	r3, [pc, #84]	; (14564 <ProcessAesDrv+0x334>)
   14510:	e745      	b.n	1439e <ProcessAesDrv+0x16e>
   14512:	bf00      	nop
   14514:	200000f4 	.word	0x200000f4
   14518:	50841810 	.word	0x50841810
   1451c:	50841910 	.word	0x50841910
   14520:	50841a04 	.word	0x50841a04
   14524:	50841440 	.word	0x50841440
   14528:	50841444 	.word	0x50841444
   1452c:	50841d28 	.word	0x50841d28
   14530:	50841d2c 	.word	0x50841d2c
   14534:	50841d30 	.word	0x50841d30
   14538:	50841d34 	.word	0x50841d34
   1453c:	50841c2c 	.word	0x50841c2c
   14540:	50841c34 	.word	0x50841c34
   14544:	50841c28 	.word	0x50841c28
   14548:	50841c30 	.word	0x50841c30
   1454c:	00015a6c 	.word	0x00015a6c
   14550:	00015a84 	.word	0x00015a84
   14554:	00015ac4 	.word	0x00015ac4
   14558:	00015aa4 	.word	0x00015aa4
   1455c:	5084140c 	.word	0x5084140c
   14560:	50841460 	.word	0x50841460
   14564:	50841464 	.word	0x50841464
   14568:	00f10001 	.word	0x00f10001
   1456c:	00f10005 	.word	0x00f10005
   14570:	00f1000b 	.word	0x00f1000b
   14574:	00f10003 	.word	0x00f10003
   14578:	200000e4 	.word	0x200000e4
   1457c:	50841400 	.word	0x50841400
   14580:	50841404 	.word	0x50841404
   14584:	50841408 	.word	0x50841408
   14588:	00f10002 	.word	0x00f10002
   1458c:	4a0f      	ldr	r2, [pc, #60]	; (145cc <ProcessAesDrv+0x39c>)
   1458e:	4b10      	ldr	r3, [pc, #64]	; (145d0 <ProcessAesDrv+0x3a0>)
   14590:	e746      	b.n	14420 <ProcessAesDrv+0x1f0>
   14592:	f8df 9044 	ldr.w	r9, [pc, #68]	; 145d8 <ProcessAesDrv+0x3a8>
   14596:	e684      	b.n	142a2 <ProcessAesDrv+0x72>
   14598:	f8d8 3000 	ldr.w	r3, [r8]
   1459c:	9805      	ldr	r0, [sp, #20]
   1459e:	681b      	ldr	r3, [r3, #0]
   145a0:	4a0c      	ldr	r2, [pc, #48]	; (145d4 <ProcessAesDrv+0x3a4>)
   145a2:	f8cb 3000 	str.w	r3, [fp]
   145a6:	f8d8 3000 	ldr.w	r3, [r8]
   145aa:	2110      	movs	r1, #16
   145ac:	685b      	ldr	r3, [r3, #4]
   145ae:	f8ca 3000 	str.w	r3, [sl]
   145b2:	f8d8 3000 	ldr.w	r3, [r8]
   145b6:	689b      	ldr	r3, [r3, #8]
   145b8:	f8c9 3000 	str.w	r3, [r9]
   145bc:	f8d8 3000 	ldr.w	r3, [r8]
   145c0:	68db      	ldr	r3, [r3, #12]
   145c2:	6013      	str	r3, [r2, #0]
   145c4:	f7ff faa2 	bl	13b0c <CC_PalMemSetZeroPlat>
   145c8:	e79b      	b.n	14502 <ProcessAesDrv+0x2d2>
   145ca:	bf00      	nop
   145cc:	50841460 	.word	0x50841460
   145d0:	50841464 	.word	0x50841464
   145d4:	5084140c 	.word	0x5084140c
   145d8:	00f10004 	.word	0x00f10004

000145dc <FinishAesDrv>:
   145dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145e0:	b301      	cbz	r1, 14624 <FinishAesDrv+0x48>
   145e2:	b1fa      	cbz	r2, 14624 <FinishAesDrv+0x48>
   145e4:	4604      	mov	r4, r0
   145e6:	2800      	cmp	r0, #0
   145e8:	d07a      	beq.n	146e0 <FinishAesDrv+0x104>
   145ea:	461d      	mov	r5, r3
   145ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
   145ee:	460e      	mov	r6, r1
   145f0:	2b07      	cmp	r3, #7
   145f2:	d01b      	beq.n	1462c <FinishAesDrv+0x50>
   145f4:	b95d      	cbnz	r5, 1460e <FinishAesDrv+0x32>
   145f6:	2b03      	cmp	r3, #3
   145f8:	d110      	bne.n	1461c <FinishAesDrv+0x40>
   145fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
   145fc:	b973      	cbnz	r3, 1461c <FinishAesDrv+0x40>
   145fe:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   14602:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   14606:	2510      	movs	r5, #16
   14608:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1460c:	600b      	str	r3, [r1, #0]
   1460e:	462b      	mov	r3, r5
   14610:	4631      	mov	r1, r6
   14612:	4620      	mov	r0, r4
   14614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14618:	f7ff be0a 	b.w	14230 <ProcessAesDrv>
   1461c:	462f      	mov	r7, r5
   1461e:	4638      	mov	r0, r7
   14620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14624:	4f68      	ldr	r7, [pc, #416]	; (147c8 <FinishAesDrv+0x1ec>)
   14626:	4638      	mov	r0, r7
   14628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1462c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1462e:	2b00      	cmp	r3, #0
   14630:	d159      	bne.n	146e6 <FinishAesDrv+0x10a>
   14632:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   14636:	d25b      	bcs.n	146f0 <FinishAesDrv+0x114>
   14638:	b915      	cbnz	r5, 14640 <FinishAesDrv+0x64>
   1463a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1463c:	2b00      	cmp	r3, #0
   1463e:	d157      	bne.n	146f0 <FinishAesDrv+0x114>
   14640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14644:	4861      	ldr	r0, [pc, #388]	; (147cc <FinishAesDrv+0x1f0>)
   14646:	f7fe fca3 	bl	12f90 <CC_PalMutexLock>
   1464a:	2800      	cmp	r0, #0
   1464c:	f040 809a 	bne.w	14784 <FinishAesDrv+0x1a8>
   14650:	2000      	movs	r0, #0
   14652:	f7fe fccd 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   14656:	2800      	cmp	r0, #0
   14658:	f040 8090 	bne.w	1477c <FinishAesDrv+0x1a0>
   1465c:	2101      	movs	r1, #1
   1465e:	4b5c      	ldr	r3, [pc, #368]	; (147d0 <FinishAesDrv+0x1f4>)
   14660:	4a5c      	ldr	r2, [pc, #368]	; (147d4 <FinishAesDrv+0x1f8>)
   14662:	6019      	str	r1, [r3, #0]
   14664:	6813      	ldr	r3, [r2, #0]
   14666:	2b00      	cmp	r3, #0
   14668:	d1fc      	bne.n	14664 <FinishAesDrv+0x88>
   1466a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1466c:	2b03      	cmp	r3, #3
   1466e:	dd20      	ble.n	146b2 <FinishAesDrv+0xd6>
   14670:	3b06      	subs	r3, #6
   14672:	2b01      	cmp	r3, #1
   14674:	d81f      	bhi.n	146b6 <FinishAesDrv+0xda>
   14676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14678:	2b01      	cmp	r3, #1
   1467a:	d83b      	bhi.n	146f4 <FinishAesDrv+0x118>
   1467c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1467e:	2b01      	cmp	r3, #1
   14680:	f200 8088 	bhi.w	14794 <FinishAesDrv+0x1b8>
   14684:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14686:	2b01      	cmp	r3, #1
   14688:	f200 8086 	bhi.w	14798 <FinishAesDrv+0x1bc>
   1468c:	4620      	mov	r0, r4
   1468e:	f7ff fd53 	bl	14138 <InitAes.part.0>
   14692:	4607      	mov	r7, r0
   14694:	b980      	cbnz	r0, 146b8 <FinishAesDrv+0xdc>
   14696:	4620      	mov	r0, r4
   14698:	f7ff fcdc 	bl	14054 <LoadAesKey>
   1469c:	4607      	mov	r7, r0
   1469e:	b958      	cbnz	r0, 146b8 <FinishAesDrv+0xdc>
   146a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   146a2:	2b07      	cmp	r3, #7
   146a4:	d807      	bhi.n	146b6 <FinishAesDrv+0xda>
   146a6:	e8df f003 	tbb	[pc, r3]
   146aa:	2731      	.short	0x2731
   146ac:	06062755 	.word	0x06062755
   146b0:	2755      	.short	0x2755
   146b2:	2b00      	cmp	r3, #0
   146b4:	dadf      	bge.n	14676 <FinishAesDrv+0x9a>
   146b6:	4f48      	ldr	r7, [pc, #288]	; (147d8 <FinishAesDrv+0x1fc>)
   146b8:	4a46      	ldr	r2, [pc, #280]	; (147d4 <FinishAesDrv+0x1f8>)
   146ba:	6813      	ldr	r3, [r2, #0]
   146bc:	2b00      	cmp	r3, #0
   146be:	d1fc      	bne.n	146ba <FinishAesDrv+0xde>
   146c0:	4a43      	ldr	r2, [pc, #268]	; (147d0 <FinishAesDrv+0x1f4>)
   146c2:	2001      	movs	r0, #1
   146c4:	6013      	str	r3, [r2, #0]
   146c6:	f7fe fc93 	bl	12ff0 <CC_PalPowerSaveModeSelect>
   146ca:	2800      	cmp	r0, #0
   146cc:	d15e      	bne.n	1478c <FinishAesDrv+0x1b0>
   146ce:	483f      	ldr	r0, [pc, #252]	; (147cc <FinishAesDrv+0x1f0>)
   146d0:	f7fe fc66 	bl	12fa0 <CC_PalMutexUnlock>
   146d4:	2800      	cmp	r0, #0
   146d6:	d0a2      	beq.n	1461e <FinishAesDrv+0x42>
   146d8:	4840      	ldr	r0, [pc, #256]	; (147dc <FinishAesDrv+0x200>)
   146da:	f7fd fd0f 	bl	120fc <CC_PalAbort>
   146de:	e79e      	b.n	1461e <FinishAesDrv+0x42>
   146e0:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   146e4:	e79b      	b.n	1461e <FinishAesDrv+0x42>
   146e6:	2b01      	cmp	r3, #1
   146e8:	d1a6      	bne.n	14638 <FinishAesDrv+0x5c>
   146ea:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   146ee:	d3a3      	bcc.n	14638 <FinishAesDrv+0x5c>
   146f0:	4f3b      	ldr	r7, [pc, #236]	; (147e0 <FinishAesDrv+0x204>)
   146f2:	e794      	b.n	1461e <FinishAesDrv+0x42>
   146f4:	4f3b      	ldr	r7, [pc, #236]	; (147e4 <FinishAesDrv+0x208>)
   146f6:	e7df      	b.n	146b8 <FinishAesDrv+0xdc>
   146f8:	6821      	ldr	r1, [r4, #0]
   146fa:	4a3b      	ldr	r2, [pc, #236]	; (147e8 <FinishAesDrv+0x20c>)
   146fc:	4b3b      	ldr	r3, [pc, #236]	; (147ec <FinishAesDrv+0x210>)
   146fe:	6011      	str	r1, [r2, #0]
   14700:	6861      	ldr	r1, [r4, #4]
   14702:	6019      	str	r1, [r3, #0]
   14704:	68a1      	ldr	r1, [r4, #8]
   14706:	6091      	str	r1, [r2, #8]
   14708:	68e2      	ldr	r2, [r4, #12]
   1470a:	609a      	str	r2, [r3, #8]
   1470c:	2301      	movs	r3, #1
   1470e:	4938      	ldr	r1, [pc, #224]	; (147f0 <FinishAesDrv+0x214>)
   14710:	4a38      	ldr	r2, [pc, #224]	; (147f4 <FinishAesDrv+0x218>)
   14712:	600b      	str	r3, [r1, #0]
   14714:	6015      	str	r5, [r2, #0]
   14716:	2d00      	cmp	r5, #0
   14718:	d140      	bne.n	1479c <FinishAesDrv+0x1c0>
   1471a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1471c:	b90a      	cbnz	r2, 14722 <FinishAesDrv+0x146>
   1471e:	4a36      	ldr	r2, [pc, #216]	; (147f8 <FinishAesDrv+0x21c>)
   14720:	6013      	str	r3, [r2, #0]
   14722:	4b2c      	ldr	r3, [pc, #176]	; (147d4 <FinishAesDrv+0x1f8>)
   14724:	681f      	ldr	r7, [r3, #0]
   14726:	2f00      	cmp	r7, #0
   14728:	d1fc      	bne.n	14724 <FinishAesDrv+0x148>
   1472a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1472c:	3b01      	subs	r3, #1
   1472e:	2b06      	cmp	r3, #6
   14730:	d8c2      	bhi.n	146b8 <FinishAesDrv+0xdc>
   14732:	a201      	add	r2, pc, #4	; (adr r2, 14738 <FinishAesDrv+0x15c>)
   14734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14738:	0001475d 	.word	0x0001475d
   1473c:	00014777 	.word	0x00014777
   14740:	0001475d 	.word	0x0001475d
   14744:	000146b9 	.word	0x000146b9
   14748:	000146b9 	.word	0x000146b9
   1474c:	00014777 	.word	0x00014777
   14750:	0001475d 	.word	0x0001475d
   14754:	6821      	ldr	r1, [r4, #0]
   14756:	4a29      	ldr	r2, [pc, #164]	; (147fc <FinishAesDrv+0x220>)
   14758:	4b29      	ldr	r3, [pc, #164]	; (14800 <FinishAesDrv+0x224>)
   1475a:	e7d0      	b.n	146fe <FinishAesDrv+0x122>
   1475c:	4a22      	ldr	r2, [pc, #136]	; (147e8 <FinishAesDrv+0x20c>)
   1475e:	4b23      	ldr	r3, [pc, #140]	; (147ec <FinishAesDrv+0x210>)
   14760:	6811      	ldr	r1, [r2, #0]
   14762:	3208      	adds	r2, #8
   14764:	6021      	str	r1, [r4, #0]
   14766:	6819      	ldr	r1, [r3, #0]
   14768:	3308      	adds	r3, #8
   1476a:	6061      	str	r1, [r4, #4]
   1476c:	6812      	ldr	r2, [r2, #0]
   1476e:	60a2      	str	r2, [r4, #8]
   14770:	681b      	ldr	r3, [r3, #0]
   14772:	60e3      	str	r3, [r4, #12]
   14774:	e7a0      	b.n	146b8 <FinishAesDrv+0xdc>
   14776:	4a21      	ldr	r2, [pc, #132]	; (147fc <FinishAesDrv+0x220>)
   14778:	4b21      	ldr	r3, [pc, #132]	; (14800 <FinishAesDrv+0x224>)
   1477a:	e7f1      	b.n	14760 <FinishAesDrv+0x184>
   1477c:	4821      	ldr	r0, [pc, #132]	; (14804 <FinishAesDrv+0x228>)
   1477e:	f7fd fcbd 	bl	120fc <CC_PalAbort>
   14782:	e76b      	b.n	1465c <FinishAesDrv+0x80>
   14784:	4820      	ldr	r0, [pc, #128]	; (14808 <FinishAesDrv+0x22c>)
   14786:	f7fd fcb9 	bl	120fc <CC_PalAbort>
   1478a:	e761      	b.n	14650 <FinishAesDrv+0x74>
   1478c:	481f      	ldr	r0, [pc, #124]	; (1480c <FinishAesDrv+0x230>)
   1478e:	f7fd fcb5 	bl	120fc <CC_PalAbort>
   14792:	e79c      	b.n	146ce <FinishAesDrv+0xf2>
   14794:	4f1e      	ldr	r7, [pc, #120]	; (14810 <FinishAesDrv+0x234>)
   14796:	e78f      	b.n	146b8 <FinishAesDrv+0xdc>
   14798:	4f1e      	ldr	r7, [pc, #120]	; (14814 <FinishAesDrv+0x238>)
   1479a:	e78d      	b.n	146b8 <FinishAesDrv+0xdc>
   1479c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1479e:	6833      	ldr	r3, [r6, #0]
   147a0:	2a01      	cmp	r2, #1
   147a2:	d00a      	beq.n	147ba <FinishAesDrv+0x1de>
   147a4:	2010      	movs	r0, #16
   147a6:	491c      	ldr	r1, [pc, #112]	; (14818 <FinishAesDrv+0x23c>)
   147a8:	4a1c      	ldr	r2, [pc, #112]	; (1481c <FinishAesDrv+0x240>)
   147aa:	600b      	str	r3, [r1, #0]
   147ac:	6015      	str	r5, [r2, #0]
   147ae:	f7fe fb5d 	bl	12e6c <CC_HalWaitInterrupt>
   147b2:	4607      	mov	r7, r0
   147b4:	2800      	cmp	r0, #0
   147b6:	d0b4      	beq.n	14722 <FinishAesDrv+0x146>
   147b8:	e77e      	b.n	146b8 <FinishAesDrv+0xdc>
   147ba:	4919      	ldr	r1, [pc, #100]	; (14820 <FinishAesDrv+0x244>)
   147bc:	4a19      	ldr	r2, [pc, #100]	; (14824 <FinishAesDrv+0x248>)
   147be:	600b      	str	r3, [r1, #0]
   147c0:	2040      	movs	r0, #64	; 0x40
   147c2:	6015      	str	r5, [r2, #0]
   147c4:	e7f3      	b.n	147ae <FinishAesDrv+0x1d2>
   147c6:	bf00      	nop
   147c8:	00f1000b 	.word	0x00f1000b
   147cc:	200000f4 	.word	0x200000f4
   147d0:	50841810 	.word	0x50841810
   147d4:	50841910 	.word	0x50841910
   147d8:	00f10001 	.word	0x00f10001
   147dc:	00015ac4 	.word	0x00015ac4
   147e0:	00f10005 	.word	0x00f10005
   147e4:	00f10002 	.word	0x00f10002
   147e8:	50841440 	.word	0x50841440
   147ec:	50841444 	.word	0x50841444
   147f0:	5084147c 	.word	0x5084147c
   147f4:	508414bc 	.word	0x508414bc
   147f8:	50841524 	.word	0x50841524
   147fc:	50841460 	.word	0x50841460
   14800:	50841464 	.word	0x50841464
   14804:	00015a84 	.word	0x00015a84
   14808:	00015a6c 	.word	0x00015a6c
   1480c:	00015aa4 	.word	0x00015aa4
   14810:	00f10003 	.word	0x00f10003
   14814:	00f10004 	.word	0x00f10004
   14818:	50841c30 	.word	0x50841c30
   1481c:	50841c34 	.word	0x50841c34
   14820:	50841c28 	.word	0x50841c28
   14824:	50841c2c 	.word	0x50841c2c

00014828 <kmu_validate_slot_and_size>:
   14828:	287f      	cmp	r0, #127	; 0x7f
   1482a:	d80c      	bhi.n	14846 <kmu_validate_slot_and_size+0x1e>
   1482c:	b149      	cbz	r1, 14842 <kmu_validate_slot_and_size+0x1a>
   1482e:	2903      	cmp	r1, #3
   14830:	d001      	beq.n	14836 <kmu_validate_slot_and_size+0xe>
   14832:	4806      	ldr	r0, [pc, #24]	; (1484c <kmu_validate_slot_and_size+0x24>)
   14834:	4770      	bx	lr
   14836:	4906      	ldr	r1, [pc, #24]	; (14850 <kmu_validate_slot_and_size+0x28>)
   14838:	287f      	cmp	r0, #127	; 0x7f
   1483a:	bf0c      	ite	eq
   1483c:	4608      	moveq	r0, r1
   1483e:	2000      	movne	r0, #0
   14840:	4770      	bx	lr
   14842:	4608      	mov	r0, r1
   14844:	4770      	bx	lr
   14846:	4802      	ldr	r0, [pc, #8]	; (14850 <kmu_validate_slot_and_size+0x28>)
   14848:	4770      	bx	lr
   1484a:	bf00      	nop
   1484c:	00f70003 	.word	0x00f70003
   14850:	00f70001 	.word	0x00f70001

00014854 <kmu_validate_slot_and_size_no_kdr>:
   14854:	b4f0      	push	{r4, r5, r6, r7}
   14856:	4a1c      	ldr	r2, [pc, #112]	; (148c8 <kmu_validate_slot_and_size_no_kdr+0x74>)
   14858:	00c5      	lsls	r5, r0, #3
   1485a:	1c44      	adds	r4, r0, #1
   1485c:	f505 037f 	add.w	r3, r5, #16711680	; 0xff0000
   14860:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   14864:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   14868:	681c      	ldr	r4, [r3, #0]
   1486a:	b082      	sub	sp, #8
   1486c:	f3bf 8f4f 	dsb	sy
   14870:	2300      	movs	r3, #0
   14872:	9400      	str	r4, [sp, #0]
   14874:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14878:	9e00      	ldr	r6, [sp, #0]
   1487a:	4c14      	ldr	r4, [pc, #80]	; (148cc <kmu_validate_slot_and_size_no_kdr+0x78>)
   1487c:	42a6      	cmp	r6, r4
   1487e:	d018      	beq.n	148b2 <kmu_validate_slot_and_size_no_kdr+0x5e>
   14880:	b1a9      	cbz	r1, 148ae <kmu_validate_slot_and_size_no_kdr+0x5a>
   14882:	4e13      	ldr	r6, [pc, #76]	; (148d0 <kmu_validate_slot_and_size_no_kdr+0x7c>)
   14884:	1c87      	adds	r7, r0, #2
   14886:	442e      	add	r6, r5
   14888:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
   1488c:	6835      	ldr	r5, [r6, #0]
   1488e:	f3bf 8f4f 	dsb	sy
   14892:	9501      	str	r5, [sp, #4]
   14894:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14898:	9a01      	ldr	r2, [sp, #4]
   1489a:	42a2      	cmp	r2, r4
   1489c:	d009      	beq.n	148b2 <kmu_validate_slot_and_size_no_kdr+0x5e>
   1489e:	287f      	cmp	r0, #127	; 0x7f
   148a0:	d807      	bhi.n	148b2 <kmu_validate_slot_and_size_no_kdr+0x5e>
   148a2:	2903      	cmp	r1, #3
   148a4:	d10b      	bne.n	148be <kmu_validate_slot_and_size_no_kdr+0x6a>
   148a6:	287f      	cmp	r0, #127	; 0x7f
   148a8:	d003      	beq.n	148b2 <kmu_validate_slot_and_size_no_kdr+0x5e>
   148aa:	4618      	mov	r0, r3
   148ac:	e002      	b.n	148b4 <kmu_validate_slot_and_size_no_kdr+0x60>
   148ae:	287f      	cmp	r0, #127	; 0x7f
   148b0:	d903      	bls.n	148ba <kmu_validate_slot_and_size_no_kdr+0x66>
   148b2:	4808      	ldr	r0, [pc, #32]	; (148d4 <kmu_validate_slot_and_size_no_kdr+0x80>)
   148b4:	b002      	add	sp, #8
   148b6:	bcf0      	pop	{r4, r5, r6, r7}
   148b8:	4770      	bx	lr
   148ba:	4608      	mov	r0, r1
   148bc:	e7fa      	b.n	148b4 <kmu_validate_slot_and_size_no_kdr+0x60>
   148be:	4806      	ldr	r0, [pc, #24]	; (148d8 <kmu_validate_slot_and_size_no_kdr+0x84>)
   148c0:	b002      	add	sp, #8
   148c2:	bcf0      	pop	{r4, r5, r6, r7}
   148c4:	4770      	bx	lr
   148c6:	bf00      	nop
   148c8:	50039000 	.word	0x50039000
   148cc:	50841a50 	.word	0x50841a50
   148d0:	00ff8408 	.word	0x00ff8408
   148d4:	00f70001 	.word	0x00f70001
   148d8:	00f70003 	.word	0x00f70003

000148dc <kmu_validate_kdr_slot_and_size>:
   148dc:	b9b9      	cbnz	r1, 1490e <kmu_validate_kdr_slot_and_size+0x32>
   148de:	4a0d      	ldr	r2, [pc, #52]	; (14914 <kmu_validate_kdr_slot_and_size+0x38>)
   148e0:	00c3      	lsls	r3, r0, #3
   148e2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   148e6:	3001      	adds	r0, #1
   148e8:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   148ec:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   148f0:	b082      	sub	sp, #8
   148f2:	681b      	ldr	r3, [r3, #0]
   148f4:	f3bf 8f4f 	dsb	sy
   148f8:	9301      	str	r3, [sp, #4]
   148fa:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   148fe:	9a01      	ldr	r2, [sp, #4]
   14900:	4b05      	ldr	r3, [pc, #20]	; (14918 <kmu_validate_kdr_slot_and_size+0x3c>)
   14902:	4806      	ldr	r0, [pc, #24]	; (1491c <kmu_validate_kdr_slot_and_size+0x40>)
   14904:	429a      	cmp	r2, r3
   14906:	bf08      	it	eq
   14908:	2000      	moveq	r0, #0
   1490a:	b002      	add	sp, #8
   1490c:	4770      	bx	lr
   1490e:	4804      	ldr	r0, [pc, #16]	; (14920 <kmu_validate_kdr_slot_and_size+0x44>)
   14910:	4770      	bx	lr
   14912:	bf00      	nop
   14914:	50039000 	.word	0x50039000
   14918:	50841a50 	.word	0x50841a50
   1491c:	00f70001 	.word	0x00f70001
   14920:	00f70003 	.word	0x00f70003

00014924 <kmu_use_kdr_key>:
   14924:	2000      	movs	r0, #0
   14926:	2201      	movs	r2, #1
   14928:	4902      	ldr	r1, [pc, #8]	; (14934 <kmu_use_kdr_key+0x10>)
   1492a:	4b03      	ldr	r3, [pc, #12]	; (14938 <kmu_use_kdr_key+0x14>)
   1492c:	6008      	str	r0, [r1, #0]
   1492e:	601a      	str	r2, [r3, #0]
   14930:	4770      	bx	lr
   14932:	bf00      	nop
   14934:	50841a38 	.word	0x50841a38
   14938:	50841478 	.word	0x50841478

0001493c <kmu_load_key_aes>:
   1493c:	b109      	cbz	r1, 14942 <kmu_load_key_aes+0x6>
   1493e:	4832      	ldr	r0, [pc, #200]	; (14a08 <kmu_load_key_aes+0xcc>)
   14940:	4770      	bx	lr
   14942:	b430      	push	{r4, r5}
   14944:	2401      	movs	r4, #1
   14946:	4b31      	ldr	r3, [pc, #196]	; (14a0c <kmu_load_key_aes+0xd0>)
   14948:	4a31      	ldr	r2, [pc, #196]	; (14a10 <kmu_load_key_aes+0xd4>)
   1494a:	b084      	sub	sp, #16
   1494c:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   14950:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   14954:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   14958:	00c2      	lsls	r2, r0, #3
   1495a:	9502      	str	r5, [sp, #8]
   1495c:	9d02      	ldr	r5, [sp, #8]
   1495e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   14962:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   14966:	4420      	add	r0, r4
   14968:	9502      	str	r5, [sp, #8]
   1496a:	9d02      	ldr	r5, [sp, #8]
   1496c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   14970:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   14974:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   14978:	9102      	str	r1, [sp, #8]
   1497a:	9902      	ldr	r1, [sp, #8]
   1497c:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
   14980:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   14984:	6812      	ldr	r2, [r2, #0]
   14986:	f3bf 8f4f 	dsb	sy
   1498a:	9203      	str	r2, [sp, #12]
   1498c:	9903      	ldr	r1, [sp, #12]
   1498e:	4a21      	ldr	r2, [pc, #132]	; (14a14 <kmu_load_key_aes+0xd8>)
   14990:	4291      	cmp	r1, r2
   14992:	d132      	bne.n	149fa <kmu_load_key_aes+0xbe>
   14994:	461a      	mov	r2, r3
   14996:	601c      	str	r4, [r3, #0]
   14998:	e005      	b.n	149a6 <kmu_load_key_aes+0x6a>
   1499a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1499e:	b9db      	cbnz	r3, 149d8 <kmu_load_key_aes+0x9c>
   149a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149a4:	b9c3      	cbnz	r3, 149d8 <kmu_load_key_aes+0x9c>
   149a6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   149aa:	3b00      	subs	r3, #0
   149ac:	bf18      	it	ne
   149ae:	2301      	movne	r3, #1
   149b0:	f88d 3005 	strb.w	r3, [sp, #5]
   149b4:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   149b8:	3b00      	subs	r3, #0
   149ba:	bf18      	it	ne
   149bc:	2301      	movne	r3, #1
   149be:	f88d 3006 	strb.w	r3, [sp, #6]
   149c2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   149c6:	3b00      	subs	r3, #0
   149c8:	bf18      	it	ne
   149ca:	2301      	movne	r3, #1
   149cc:	f88d 3007 	strb.w	r3, [sp, #7]
   149d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   149d4:	2b00      	cmp	r3, #0
   149d6:	d0e0      	beq.n	1499a <kmu_load_key_aes+0x5e>
   149d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   149dc:	b98b      	cbnz	r3, 14a02 <kmu_load_key_aes+0xc6>
   149de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   149e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   149e6:	b933      	cbnz	r3, 149f6 <kmu_load_key_aes+0xba>
   149e8:	4610      	mov	r0, r2
   149ea:	4b08      	ldr	r3, [pc, #32]	; (14a0c <kmu_load_key_aes+0xd0>)
   149ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   149f0:	b004      	add	sp, #16
   149f2:	bc30      	pop	{r4, r5}
   149f4:	4770      	bx	lr
   149f6:	4808      	ldr	r0, [pc, #32]	; (14a18 <kmu_load_key_aes+0xdc>)
   149f8:	e7fa      	b.n	149f0 <kmu_load_key_aes+0xb4>
   149fa:	4808      	ldr	r0, [pc, #32]	; (14a1c <kmu_load_key_aes+0xe0>)
   149fc:	b004      	add	sp, #16
   149fe:	bc30      	pop	{r4, r5}
   14a00:	4770      	bx	lr
   14a02:	4807      	ldr	r0, [pc, #28]	; (14a20 <kmu_load_key_aes+0xe4>)
   14a04:	e7f4      	b.n	149f0 <kmu_load_key_aes+0xb4>
   14a06:	bf00      	nop
   14a08:	00f1000c 	.word	0x00f1000c
   14a0c:	50039000 	.word	0x50039000
   14a10:	50840000 	.word	0x50840000
   14a14:	50841400 	.word	0x50841400
   14a18:	00f70002 	.word	0x00f70002
   14a1c:	00f70006 	.word	0x00f70006
   14a20:	00f70001 	.word	0x00f70001

00014a24 <kmu_derive_cmac>:
   14a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14a28:	2400      	movs	r4, #0
   14a2a:	b0ce      	sub	sp, #312	; 0x138
   14a2c:	4605      	mov	r5, r0
   14a2e:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
   14a32:	468a      	mov	sl, r1
   14a34:	4617      	mov	r7, r2
   14a36:	4621      	mov	r1, r4
   14a38:	2274      	movs	r2, #116	; 0x74
   14a3a:	a810      	add	r0, sp, #64	; 0x40
   14a3c:	4698      	mov	r8, r3
   14a3e:	f000 fa74 	bl	14f2a <memset>
   14a42:	4621      	mov	r1, r4
   14a44:	2280      	movs	r2, #128	; 0x80
   14a46:	a82e      	add	r0, sp, #184	; 0xb8
   14a48:	942d      	str	r4, [sp, #180]	; 0xb4
   14a4a:	f000 fa6e 	bl	14f2a <memset>
   14a4e:	2384      	movs	r3, #132	; 0x84
   14a50:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
   14a54:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   14a58:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
   14a5c:	9306      	str	r3, [sp, #24]
   14a5e:	d873      	bhi.n	14b48 <kmu_derive_cmac+0x124>
   14a60:	ab06      	add	r3, sp, #24
   14a62:	ac2d      	add	r4, sp, #180	; 0xb4
   14a64:	9301      	str	r3, [sp, #4]
   14a66:	4641      	mov	r1, r8
   14a68:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   14a6c:	4638      	mov	r0, r7
   14a6e:	9602      	str	r6, [sp, #8]
   14a70:	9400      	str	r4, [sp, #0]
   14a72:	f000 f87d 	bl	14b70 <UtilCmacBuildDataForDerivation>
   14a76:	2800      	cmp	r0, #0
   14a78:	d16d      	bne.n	14b56 <kmu_derive_cmac+0x132>
   14a7a:	2200      	movs	r2, #0
   14a7c:	2301      	movs	r3, #1
   14a7e:	2101      	movs	r1, #1
   14a80:	2707      	movs	r7, #7
   14a82:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
   14a86:	4a36      	ldr	r2, [pc, #216]	; (14b60 <kmu_derive_cmac+0x13c>)
   14a88:	00eb      	lsls	r3, r5, #3
   14a8a:	9520      	str	r5, [sp, #128]	; 0x80
   14a8c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   14a90:	440d      	add	r5, r1
   14a92:	e9cd a71c 	strd	sl, r7, [sp, #112]	; 0x70
   14a96:	901e      	str	r0, [sp, #120]	; 0x78
   14a98:	9128      	str	r1, [sp, #160]	; 0xa0
   14a9a:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   14a9e:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
   14aa2:	681b      	ldr	r3, [r3, #0]
   14aa4:	f3bf 8f4f 	dsb	sy
   14aa8:	9307      	str	r3, [sp, #28]
   14aaa:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   14aae:	9a07      	ldr	r2, [sp, #28]
   14ab0:	4b2c      	ldr	r3, [pc, #176]	; (14b64 <kmu_derive_cmac+0x140>)
   14ab2:	429a      	cmp	r2, r3
   14ab4:	d142      	bne.n	14b3c <kmu_derive_cmac+0x118>
   14ab6:	2203      	movs	r2, #3
   14ab8:	f10d 0317 	add.w	r3, sp, #23
   14abc:	701a      	strb	r2, [r3, #0]
   14abe:	781b      	ldrb	r3, [r3, #0]
   14ac0:	2110      	movs	r1, #16
   14ac2:	a810      	add	r0, sp, #64	; 0x40
   14ac4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   14ac8:	f7ff f820 	bl	13b0c <CC_PalMemSetZeroPlat>
   14acc:	2210      	movs	r2, #16
   14ace:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   14ad2:	9200      	str	r2, [sp, #0]
   14ad4:	4620      	mov	r0, r4
   14ad6:	9906      	ldr	r1, [sp, #24]
   14ad8:	ab0c      	add	r3, sp, #48	; 0x30
   14ada:	aa08      	add	r2, sp, #32
   14adc:	f8cd 8004 	str.w	r8, [sp, #4]
   14ae0:	f7ff f8ec 	bl	13cbc <SetDataBuffersInfo>
   14ae4:	4607      	mov	r7, r0
   14ae6:	bb00      	cbnz	r0, 14b2a <kmu_derive_cmac+0x106>
   14ae8:	2401      	movs	r4, #1
   14aea:	e010      	b.n	14b0e <kmu_derive_cmac+0xea>
   14aec:	2e10      	cmp	r6, #16
   14aee:	4635      	mov	r5, r6
   14af0:	bf28      	it	cs
   14af2:	2510      	movcs	r5, #16
   14af4:	a910      	add	r1, sp, #64	; 0x40
   14af6:	462a      	mov	r2, r5
   14af8:	f7ff f804 	bl	13b04 <CC_PalMemCopyPlat>
   14afc:	2110      	movs	r1, #16
   14afe:	a810      	add	r0, sp, #64	; 0x40
   14b00:	f7ff f804 	bl	13b0c <CC_PalMemSetZeroPlat>
   14b04:	3401      	adds	r4, #1
   14b06:	1b76      	subs	r6, r6, r5
   14b08:	442f      	add	r7, r5
   14b0a:	b2e4      	uxtb	r4, r4
   14b0c:	d021      	beq.n	14b52 <kmu_derive_cmac+0x12e>
   14b0e:	9b06      	ldr	r3, [sp, #24]
   14b10:	4642      	mov	r2, r8
   14b12:	a908      	add	r1, sp, #32
   14b14:	a810      	add	r0, sp, #64	; 0x40
   14b16:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
   14b1a:	f7ff fd5f 	bl	145dc <FinishAesDrv>
   14b1e:	4603      	mov	r3, r0
   14b20:	eb09 0007 	add.w	r0, r9, r7
   14b24:	2b00      	cmp	r3, #0
   14b26:	d0e1      	beq.n	14aec <kmu_derive_cmac+0xc8>
   14b28:	461f      	mov	r7, r3
   14b2a:	a810      	add	r0, sp, #64	; 0x40
   14b2c:	2274      	movs	r2, #116	; 0x74
   14b2e:	2100      	movs	r1, #0
   14b30:	f7fe ffea 	bl	13b08 <CC_PalMemSetPlat>
   14b34:	4638      	mov	r0, r7
   14b36:	b04e      	add	sp, #312	; 0x138
   14b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b3c:	2202      	movs	r2, #2
   14b3e:	f10d 0317 	add.w	r3, sp, #23
   14b42:	f88d 2017 	strb.w	r2, [sp, #23]
   14b46:	e7ba      	b.n	14abe <kmu_derive_cmac+0x9a>
   14b48:	4f07      	ldr	r7, [pc, #28]	; (14b68 <kmu_derive_cmac+0x144>)
   14b4a:	4638      	mov	r0, r7
   14b4c:	b04e      	add	sp, #312	; 0x138
   14b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b52:	4637      	mov	r7, r6
   14b54:	e7e9      	b.n	14b2a <kmu_derive_cmac+0x106>
   14b56:	4f05      	ldr	r7, [pc, #20]	; (14b6c <kmu_derive_cmac+0x148>)
   14b58:	4638      	mov	r0, r7
   14b5a:	b04e      	add	sp, #312	; 0x138
   14b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b60:	50039000 	.word	0x50039000
   14b64:	50841a50 	.word	0x50841a50
   14b68:	00f1000f 	.word	0x00f1000f
   14b6c:	00f1000e 	.word	0x00f1000e

00014b70 <UtilCmacBuildDataForDerivation>:
   14b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b74:	2600      	movs	r6, #0
   14b76:	b082      	sub	sp, #8
   14b78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14b7a:	9601      	str	r6, [sp, #4]
   14b7c:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   14b80:	d83b      	bhi.n	14bfa <UtilCmacBuildDataForDerivation+0x8a>
   14b82:	00ee      	lsls	r6, r5, #3
   14b84:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   14b88:	461f      	mov	r7, r3
   14b8a:	bf34      	ite	cc
   14b8c:	2303      	movcc	r3, #3
   14b8e:	2304      	movcs	r3, #4
   14b90:	1e4d      	subs	r5, r1, #1
   14b92:	2d3f      	cmp	r5, #63	; 0x3f
   14b94:	460c      	mov	r4, r1
   14b96:	9300      	str	r3, [sp, #0]
   14b98:	d82f      	bhi.n	14bfa <UtilCmacBuildDataForDerivation+0x8a>
   14b9a:	b370      	cbz	r0, 14bfa <UtilCmacBuildDataForDerivation+0x8a>
   14b9c:	4690      	mov	r8, r2
   14b9e:	b117      	cbz	r7, 14ba6 <UtilCmacBuildDataForDerivation+0x36>
   14ba0:	b35a      	cbz	r2, 14bfa <UtilCmacBuildDataForDerivation+0x8a>
   14ba2:	2f40      	cmp	r7, #64	; 0x40
   14ba4:	d829      	bhi.n	14bfa <UtilCmacBuildDataForDerivation+0x8a>
   14ba6:	9a08      	ldr	r2, [sp, #32]
   14ba8:	b33a      	cbz	r2, 14bfa <UtilCmacBuildDataForDerivation+0x8a>
   14baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14bac:	6811      	ldr	r1, [r2, #0]
   14bae:	b321      	cbz	r1, 14bfa <UtilCmacBuildDataForDerivation+0x8a>
   14bb0:	19e2      	adds	r2, r4, r7
   14bb2:	4413      	add	r3, r2
   14bb4:	4299      	cmp	r1, r3
   14bb6:	d320      	bcc.n	14bfa <UtilCmacBuildDataForDerivation+0x8a>
   14bb8:	9b08      	ldr	r3, [sp, #32]
   14bba:	4622      	mov	r2, r4
   14bbc:	4601      	mov	r1, r0
   14bbe:	1c58      	adds	r0, r3, #1
   14bc0:	f7fe ffa0 	bl	13b04 <CC_PalMemCopyPlat>
   14bc4:	2200      	movs	r2, #0
   14bc6:	9b08      	ldr	r3, [sp, #32]
   14bc8:	4423      	add	r3, r4
   14bca:	705a      	strb	r2, [r3, #1]
   14bcc:	3402      	adds	r4, #2
   14bce:	bb07      	cbnz	r7, 14c12 <UtilCmacBuildDataForDerivation+0xa2>
   14bd0:	2eff      	cmp	r6, #255	; 0xff
   14bd2:	9600      	str	r6, [sp, #0]
   14bd4:	d915      	bls.n	14c02 <UtilCmacBuildDataForDerivation+0x92>
   14bd6:	9b08      	ldr	r3, [sp, #32]
   14bd8:	0235      	lsls	r5, r6, #8
   14bda:	b2ad      	uxth	r5, r5
   14bdc:	1918      	adds	r0, r3, r4
   14bde:	2202      	movs	r2, #2
   14be0:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   14be4:	a901      	add	r1, sp, #4
   14be6:	9501      	str	r5, [sp, #4]
   14be8:	f7fe ff8c 	bl	13b04 <CC_PalMemCopyPlat>
   14bec:	3402      	adds	r4, #2
   14bee:	2000      	movs	r0, #0
   14bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14bf2:	601c      	str	r4, [r3, #0]
   14bf4:	b002      	add	sp, #8
   14bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14bfa:	480a      	ldr	r0, [pc, #40]	; (14c24 <UtilCmacBuildDataForDerivation+0xb4>)
   14bfc:	b002      	add	sp, #8
   14bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c02:	9b08      	ldr	r3, [sp, #32]
   14c04:	2201      	movs	r2, #1
   14c06:	1918      	adds	r0, r3, r4
   14c08:	4669      	mov	r1, sp
   14c0a:	f7fe ff7b 	bl	13b04 <CC_PalMemCopyPlat>
   14c0e:	3401      	adds	r4, #1
   14c10:	e7ed      	b.n	14bee <UtilCmacBuildDataForDerivation+0x7e>
   14c12:	9b08      	ldr	r3, [sp, #32]
   14c14:	4641      	mov	r1, r8
   14c16:	1918      	adds	r0, r3, r4
   14c18:	463a      	mov	r2, r7
   14c1a:	f7fe ff73 	bl	13b04 <CC_PalMemCopyPlat>
   14c1e:	443c      	add	r4, r7
   14c20:	e7d6      	b.n	14bd0 <UtilCmacBuildDataForDerivation+0x60>
   14c22:	bf00      	nop
   14c24:	80000006 	.word	0x80000006

00014c28 <CC_PalDataBufferAttrGet>:
   14c28:	2000      	movs	r0, #0
   14c2a:	7018      	strb	r0, [r3, #0]
   14c2c:	4770      	bx	lr
   14c2e:	bf00      	nop

00014c30 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   14c30:	4770      	bx	lr

00014c32 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   14c32:	b508      	push	{r3, lr}
	spm_config();
   14c34:	f7f8 fc78 	bl	d528 <spm_config>
	spm_jump();
}
   14c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   14c3c:	f7f8 bc26 	b.w	d48c <spm_jump>

00014c40 <arch_printk_char_out>:
}
   14c40:	2000      	movs	r0, #0
   14c42:	4770      	bx	lr

00014c44 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   14c44:	b40f      	push	{r0, r1, r2, r3}
   14c46:	b507      	push	{r0, r1, r2, lr}
   14c48:	a904      	add	r1, sp, #16
   14c4a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14c4e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   14c50:	f7f7 fdac 	bl	c7ac <vprintk>

	va_end(ap);
}
   14c54:	b003      	add	sp, #12
   14c56:	f85d eb04 	ldr.w	lr, [sp], #4
   14c5a:	b004      	add	sp, #16
   14c5c:	4770      	bx	lr

00014c5e <onoff_manager_init>:
	return rv;
}

int onoff_manager_init(struct onoff_manager *mgr,
		       const struct onoff_transitions *transitions)
{
   14c5e:	b538      	push	{r3, r4, r5, lr}
   14c60:	460c      	mov	r4, r1
	if ((mgr == NULL)
   14c62:	4605      	mov	r5, r0
   14c64:	b158      	cbz	r0, 14c7e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   14c66:	b151      	cbz	r1, 14c7e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   14c68:	680b      	ldr	r3, [r1, #0]
   14c6a:	b143      	cbz	r3, 14c7e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   14c6c:	684b      	ldr	r3, [r1, #4]
   14c6e:	b133      	cbz	r3, 14c7e <onoff_manager_init+0x20>
		return -EINVAL;
	}

	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14c70:	2220      	movs	r2, #32
   14c72:	2100      	movs	r1, #0
   14c74:	f000 f959 	bl	14f2a <memset>

	return 0;
   14c78:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14c7a:	612c      	str	r4, [r5, #16]
}
   14c7c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14c7e:	f06f 0015 	mvn.w	r0, #21
   14c82:	e7fb      	b.n	14c7c <onoff_manager_init+0x1e>

00014c84 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   14c84:	4604      	mov	r4, r0
   14c86:	b508      	push	{r3, lr}
   14c88:	4608      	mov	r0, r1
   14c8a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   14c8c:	461a      	mov	r2, r3
   14c8e:	47a0      	blx	r4
	return z_impl_z_current_get();
   14c90:	f7fc febc 	bl	11a0c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   14c94:	f7f9 fb14 	bl	e2c0 <z_impl_k_thread_abort>

00014c98 <encode_uint>:
{
   14c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c9c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   14c9e:	78d3      	ldrb	r3, [r2, #3]
{
   14ca0:	4680      	mov	r8, r0
	switch (specifier) {
   14ca2:	2b6f      	cmp	r3, #111	; 0x6f
{
   14ca4:	460f      	mov	r7, r1
   14ca6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   14ca8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   14cac:	d029      	beq.n	14d02 <encode_uint+0x6a>
   14cae:	d824      	bhi.n	14cfa <encode_uint+0x62>
		return 16;
   14cb0:	2b58      	cmp	r3, #88	; 0x58
   14cb2:	bf14      	ite	ne
   14cb4:	260a      	movne	r6, #10
   14cb6:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   14cb8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   14cbc:	4632      	mov	r2, r6
   14cbe:	2300      	movs	r3, #0
   14cc0:	4640      	mov	r0, r8
   14cc2:	4639      	mov	r1, r7
   14cc4:	f7f7 fbba 	bl	c43c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14cc8:	2a09      	cmp	r2, #9
   14cca:	b2d4      	uxtb	r4, r2
   14ccc:	d81e      	bhi.n	14d0c <encode_uint+0x74>
   14cce:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   14cd0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14cd2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   14cd4:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14cd8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   14cdc:	d301      	bcc.n	14ce2 <encode_uint+0x4a>
   14cde:	45d1      	cmp	r9, sl
   14ce0:	d811      	bhi.n	14d06 <encode_uint+0x6e>
	if (conv->flag_hash) {
   14ce2:	782b      	ldrb	r3, [r5, #0]
   14ce4:	069b      	lsls	r3, r3, #26
   14ce6:	d505      	bpl.n	14cf4 <encode_uint+0x5c>
		if (radix == 8) {
   14ce8:	2e08      	cmp	r6, #8
   14cea:	d115      	bne.n	14d18 <encode_uint+0x80>
			conv->altform_0 = true;
   14cec:	78ab      	ldrb	r3, [r5, #2]
   14cee:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   14cf2:	70ab      	strb	r3, [r5, #2]
}
   14cf4:	4648      	mov	r0, r9
   14cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   14cfa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   14cfe:	2b70      	cmp	r3, #112	; 0x70
   14d00:	e7d7      	b.n	14cb2 <encode_uint+0x1a>
	switch (specifier) {
   14d02:	2608      	movs	r6, #8
   14d04:	e7d8      	b.n	14cb8 <encode_uint+0x20>
		value /= radix;
   14d06:	4680      	mov	r8, r0
   14d08:	460f      	mov	r7, r1
   14d0a:	e7d7      	b.n	14cbc <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14d0c:	f1bb 0f19 	cmp.w	fp, #25
   14d10:	bf94      	ite	ls
   14d12:	3437      	addls	r4, #55	; 0x37
   14d14:	3457      	addhi	r4, #87	; 0x57
   14d16:	e7db      	b.n	14cd0 <encode_uint+0x38>
		} else if (radix == 16) {
   14d18:	2e10      	cmp	r6, #16
   14d1a:	d1eb      	bne.n	14cf4 <encode_uint+0x5c>
			conv->altform_0c = true;
   14d1c:	78ab      	ldrb	r3, [r5, #2]
   14d1e:	f043 0310 	orr.w	r3, r3, #16
   14d22:	e7e6      	b.n	14cf2 <encode_uint+0x5a>

00014d24 <outs>:
{
   14d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d28:	4607      	mov	r7, r0
   14d2a:	4688      	mov	r8, r1
   14d2c:	4615      	mov	r5, r2
   14d2e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14d30:	4614      	mov	r4, r2
   14d32:	42b4      	cmp	r4, r6
   14d34:	eba4 0005 	sub.w	r0, r4, r5
   14d38:	d302      	bcc.n	14d40 <outs+0x1c>
   14d3a:	b93e      	cbnz	r6, 14d4c <outs+0x28>
   14d3c:	7823      	ldrb	r3, [r4, #0]
   14d3e:	b12b      	cbz	r3, 14d4c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   14d40:	4641      	mov	r1, r8
   14d42:	f814 0b01 	ldrb.w	r0, [r4], #1
   14d46:	47b8      	blx	r7
		if (rc < 0) {
   14d48:	2800      	cmp	r0, #0
   14d4a:	daf2      	bge.n	14d32 <outs+0xe>
}
   14d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014d50 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   14d50:	4040      	eors	r0, r0
   14d52:	f380 8811 	msr	BASEPRI, r0
   14d56:	f04f 0004 	mov.w	r0, #4
   14d5a:	df02      	svc	2
}
   14d5c:	4770      	bx	lr

00014d5e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   14d5e:	4770      	bx	lr

00014d60 <pm_state_exit_post_ops>:
   14d60:	2300      	movs	r3, #0
   14d62:	f383 8811 	msr	BASEPRI, r3
   14d66:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   14d6a:	4770      	bx	lr

00014d6c <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   14d6c:	b40f      	push	{r0, r1, r2, r3}
   14d6e:	b507      	push	{r0, r1, r2, lr}
   14d70:	a904      	add	r1, sp, #16
   14d72:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14d76:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   14d78:	f7f7 fd18 	bl	c7ac <vprintk>
	va_end(ap);
}
   14d7c:	b003      	add	sp, #12
   14d7e:	f85d eb04 	ldr.w	lr, [sp], #4
   14d82:	b004      	add	sp, #16
   14d84:	4770      	bx	lr

00014d86 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   14d86:	f000 021f 	and.w	r2, r0, #31
   14d8a:	211f      	movs	r1, #31
   14d8c:	2004      	movs	r0, #4
   14d8e:	f7f8 bab9 	b.w	d304 <adp536x_reg_write_mask>

00014d92 <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   14d92:	f000 0207 	and.w	r2, r0, #7
   14d96:	2107      	movs	r1, #7
   14d98:	2002      	movs	r0, #2
   14d9a:	f7f8 bab3 	b.w	d304 <adp536x_reg_write_mask>

00014d9e <adp536x_charging_enable>:
{
   14d9e:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   14da0:	2101      	movs	r1, #1
   14da2:	2007      	movs	r0, #7
   14da4:	f7f8 baae 	b.w	d304 <adp536x_reg_write_mask>

00014da8 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   14da8:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   14daa:	21e0      	movs	r1, #224	; 0xe0
   14dac:	2015      	movs	r0, #21
   14dae:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   14db2:	f7f8 baa7 	b.w	d304 <adp536x_reg_write_mask>

00014db6 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   14db6:	2218      	movs	r2, #24
   14db8:	213f      	movs	r1, #63	; 0x3f
   14dba:	202a      	movs	r0, #42	; 0x2a
   14dbc:	f7f8 baa2 	b.w	d304 <adp536x_reg_write_mask>

00014dc0 <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   14dc0:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   14dc2:	2102      	movs	r1, #2
   14dc4:	2029      	movs	r0, #41	; 0x29
   14dc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   14dca:	f7f8 ba9b 	b.w	d304 <adp536x_reg_write_mask>

00014dce <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   14dce:	2213      	movs	r2, #19
   14dd0:	213f      	movs	r1, #63	; 0x3f
   14dd2:	202c      	movs	r0, #44	; 0x2c
   14dd4:	f7f8 ba96 	b.w	d304 <adp536x_reg_write_mask>

00014dd8 <adp536x_buckbst_enable>:
{
   14dd8:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   14dda:	2101      	movs	r1, #1
   14ddc:	202b      	movs	r0, #43	; 0x2b
   14dde:	f7f8 ba91 	b.w	d304 <adp536x_reg_write_mask>

00014de2 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   14de2:	2000      	movs	r0, #0
{
   14de4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   14de6:	f7f8 f8b1 	bl	cf4c <sys_reboot>

00014dea <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14dea:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   14dec:	6800      	ldr	r0, [r0, #0]
   14dee:	f7f8 bde9 	b.w	d9c4 <z_arm_fatal_error>

00014df2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14df2:	2100      	movs	r1, #0
   14df4:	2001      	movs	r0, #1
   14df6:	f7f8 bde5 	b.w	d9c4 <z_arm_fatal_error>

00014dfa <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
   14dfa:	4602      	mov	r2, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
		/* Set target to Secure */
		result = NVIC_ClearTargetState(irq);
   14dfc:	b243      	sxtb	r3, r0
	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   14dfe:	4608      	mov	r0, r1
   14e00:	b9c1      	cbnz	r1, 14e34 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
   14e02:	2b00      	cmp	r3, #0
   14e04:	db27      	blt.n	14e56 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14e06:	2001      	movs	r0, #1
   14e08:	095b      	lsrs	r3, r3, #5
   14e0a:	009b      	lsls	r3, r3, #2
   14e0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14e10:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14e14:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   14e18:	f002 021f 	and.w	r2, r2, #31
   14e1c:	4090      	lsls	r0, r2
   14e1e:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14e22:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   14e26:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   14e2a:	40d0      	lsrs	r0, r2
   14e2c:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   14e30:	b2c0      	uxtb	r0, r0
   14e32:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   14e34:	2b00      	cmp	r3, #0
   14e36:	db0d      	blt.n	14e54 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14e38:	2101      	movs	r1, #1
   14e3a:	095b      	lsrs	r3, r3, #5
   14e3c:	009b      	lsls	r3, r3, #2
   14e3e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14e42:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14e46:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   14e4a:	f002 021f 	and.w	r2, r2, #31
   14e4e:	4091      	lsls	r1, r2
   14e50:	4301      	orrs	r1, r0
   14e52:	e7e6      	b.n	14e22 <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
   14e54:	2000      	movs	r0, #0
	}
}
   14e56:	4770      	bx	lr

00014e58 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   14e58:	b508      	push	{r3, lr}
	handler();
   14e5a:	f7f8 fe39 	bl	dad0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   14e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   14e62:	f7f8 befb 	b.w	dc5c <z_arm_exc_exit>

00014e66 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   14e66:	6e43      	ldr	r3, [r0, #100]	; 0x64
   14e68:	f383 880b 	msr	PSPLIM, r3
}
   14e6c:	4770      	bx	lr

00014e6e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   14e6e:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   14e72:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   14e76:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   14e78:	bf08      	it	eq
   14e7a:	f06f 0015 	mvneq.w	r0, #21
   14e7e:	4770      	bx	lr

00014e80 <arm_cmse_addr_is_secure>:
   14e80:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
   14e84:	f3c0 5080 	ubfx	r0, r0, #22, #1
   14e88:	4770      	bx	lr

00014e8a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   14e8a:	4603      	mov	r3, r0
	size_t n = 0;
   14e8c:	2000      	movs	r0, #0

	while (*s != '\0') {
   14e8e:	5c1a      	ldrb	r2, [r3, r0]
   14e90:	b902      	cbnz	r2, 14e94 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   14e92:	4770      	bx	lr
		n++;
   14e94:	3001      	adds	r0, #1
   14e96:	e7fa      	b.n	14e8e <strlen+0x4>

00014e98 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   14e98:	4603      	mov	r3, r0
	size_t n = 0;
   14e9a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   14e9c:	5c1a      	ldrb	r2, [r3, r0]
   14e9e:	b10a      	cbz	r2, 14ea4 <strnlen+0xc>
   14ea0:	4288      	cmp	r0, r1
   14ea2:	d100      	bne.n	14ea6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   14ea4:	4770      	bx	lr
		n++;
   14ea6:	3001      	adds	r0, #1
   14ea8:	e7f8      	b.n	14e9c <strnlen+0x4>

00014eaa <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   14eaa:	1e43      	subs	r3, r0, #1
   14eac:	3901      	subs	r1, #1
   14eae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14eb2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   14eb6:	4282      	cmp	r2, r0
   14eb8:	d101      	bne.n	14ebe <strcmp+0x14>
   14eba:	2a00      	cmp	r2, #0
   14ebc:	d1f7      	bne.n	14eae <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   14ebe:	1a10      	subs	r0, r2, r0
   14ec0:	4770      	bx	lr

00014ec2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   14ec2:	4603      	mov	r3, r0
   14ec4:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   14ec6:	b15a      	cbz	r2, 14ee0 <memcmp+0x1e>
   14ec8:	3901      	subs	r1, #1
   14eca:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   14ecc:	f813 0b01 	ldrb.w	r0, [r3], #1
   14ed0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   14ed4:	42a3      	cmp	r3, r4
   14ed6:	d001      	beq.n	14edc <memcmp+0x1a>
   14ed8:	4290      	cmp	r0, r2
   14eda:	d0f7      	beq.n	14ecc <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   14edc:	1a80      	subs	r0, r0, r2
}
   14ede:	bd10      	pop	{r4, pc}
		return 0;
   14ee0:	4610      	mov	r0, r2
   14ee2:	e7fc      	b.n	14ede <memcmp+0x1c>

00014ee4 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   14ee4:	1a43      	subs	r3, r0, r1
   14ee6:	4293      	cmp	r3, r2
{
   14ee8:	b510      	push	{r4, lr}
   14eea:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   14eee:	d308      	bcc.n	14f02 <memmove+0x1e>
	char *dest = d;
   14ef0:	4602      	mov	r2, r0
   14ef2:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   14ef4:	429a      	cmp	r2, r3
   14ef6:	d007      	beq.n	14f08 <memmove+0x24>
			*dest = *src;
   14ef8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14efc:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   14f00:	e7f8      	b.n	14ef4 <memmove+0x10>
   14f02:	440a      	add	r2, r1
		while (n > 0) {
   14f04:	428a      	cmp	r2, r1
   14f06:	d100      	bne.n	14f0a <memmove+0x26>
		}
	}

	return d;
}
   14f08:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
   14f0a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   14f0e:	f803 4d01 	strb.w	r4, [r3, #-1]!
   14f12:	e7f7      	b.n	14f04 <memmove+0x20>

00014f14 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   14f14:	b510      	push	{r4, lr}
   14f16:	1e43      	subs	r3, r0, #1
   14f18:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   14f1a:	4291      	cmp	r1, r2
   14f1c:	d100      	bne.n	14f20 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   14f1e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   14f20:	f811 4b01 	ldrb.w	r4, [r1], #1
   14f24:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   14f28:	e7f7      	b.n	14f1a <memcpy+0x6>

00014f2a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   14f2a:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   14f2c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   14f2e:	4402      	add	r2, r0
   14f30:	4293      	cmp	r3, r2
   14f32:	d100      	bne.n	14f36 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   14f34:	4770      	bx	lr
		*(d_byte++) = c_byte;
   14f36:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   14f3a:	e7f9      	b.n	14f30 <memset+0x6>

00014f3c <_stdout_hook_default>:
}
   14f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14f40:	4770      	bx	lr

00014f42 <set_on_state>:
	__asm__ volatile(
   14f42:	f04f 0320 	mov.w	r3, #32
   14f46:	f3ef 8211 	mrs	r2, BASEPRI
   14f4a:	f383 8812 	msr	BASEPRI_MAX, r3
   14f4e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   14f52:	6803      	ldr	r3, [r0, #0]
   14f54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14f58:	f043 0302 	orr.w	r3, r3, #2
   14f5c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   14f5e:	f382 8811 	msr	BASEPRI, r2
   14f62:	f3bf 8f6f 	isb	sy
}
   14f66:	4770      	bx	lr

00014f68 <async_start>:
{
   14f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f6a:	9f06      	ldr	r7, [sp, #24]
   14f6c:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   14f6e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   14f70:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   14f72:	f04f 0020 	mov.w	r0, #32
   14f76:	f3ef 8c11 	mrs	ip, BASEPRI
   14f7a:	f380 8812 	msr	BASEPRI_MAX, r0
   14f7e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14f82:	260c      	movs	r6, #12
   14f84:	fb06 4601 	mla	r6, r6, r1, r4
   14f88:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   14f8a:	f000 0e07 	and.w	lr, r0, #7
   14f8e:	f1be 0f01 	cmp.w	lr, #1
   14f92:	d110      	bne.n	14fb6 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   14f94:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   14f96:	2600      	movs	r6, #0
	__asm__ volatile(
   14f98:	f38c 8811 	msr	BASEPRI, ip
   14f9c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   14fa0:	b93e      	cbnz	r6, 14fb2 <async_start+0x4a>
	subdata->cb = cb;
   14fa2:	200c      	movs	r0, #12
   14fa4:	4341      	muls	r1, r0
   14fa6:	440c      	add	r4, r1
	subdata->user_data = user_data;
   14fa8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   14fac:	686b      	ldr	r3, [r5, #4]
   14fae:	585b      	ldr	r3, [r3, r1]
   14fb0:	4798      	blx	r3
}
   14fb2:	4630      	mov	r0, r6
   14fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   14fb6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   14fba:	4287      	cmp	r7, r0
   14fbc:	bf14      	ite	ne
   14fbe:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   14fc2:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   14fc6:	e7e7      	b.n	14f98 <async_start+0x30>

00014fc8 <api_start>:
{
   14fc8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   14fca:	2480      	movs	r4, #128	; 0x80
   14fcc:	9400      	str	r4, [sp, #0]
   14fce:	f7ff ffcb 	bl	14f68 <async_start>
}
   14fd2:	b002      	add	sp, #8
   14fd4:	bd10      	pop	{r4, pc}

00014fd6 <onoff_started_callback>:
	return &data->mgr[type];
   14fd6:	6900      	ldr	r0, [r0, #16]
   14fd8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   14fda:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   14fde:	2100      	movs	r1, #0
   14fe0:	4710      	bx	r2

00014fe2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14fe2:	2000      	movs	r0, #0
   14fe4:	f7fa bb76 	b.w	f6d4 <nrfx_clock_start>

00014fe8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14fe8:	2000      	movs	r0, #0
   14fea:	f7fa bbc5 	b.w	f778 <nrfx_clock_stop>

00014fee <api_stop>:
	return stop(dev, subsys, CTX_API);
   14fee:	2280      	movs	r2, #128	; 0x80
   14ff0:	f7f9 bca2 	b.w	e938 <stop>

00014ff4 <blocking_start_callback>:
{
   14ff4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   14ff6:	f7fb bdc3 	b.w	10b80 <z_impl_k_sem_give>

00014ffa <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   14ffa:	b510      	push	{r4, lr}
   14ffc:	4604      	mov	r4, r0
   14ffe:	2200      	movs	r2, #0
   15000:	200a      	movs	r0, #10
   15002:	2101      	movs	r1, #1
   15004:	f7f8 fd3e 	bl	da84 <z_arm_irq_priority_set>
   15008:	4620      	mov	r0, r4
   1500a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1500e:	f7f9 bdf3 	b.w	ebf8 <init_twim>

00015012 <uarte_nrfx_config_get>:
{
   15012:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   15014:	6902      	ldr	r2, [r0, #16]
   15016:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1501a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1501e:	2000      	movs	r0, #0
   15020:	4770      	bx	lr

00015022 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   15022:	6843      	ldr	r3, [r0, #4]
   15024:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   15026:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1502a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1502e:	4770      	bx	lr

00015030 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   15030:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   15032:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   15034:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15036:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1503a:	b148      	cbz	r0, 15050 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1503c:	2000      	movs	r0, #0
	*c = data->rx_data;
   1503e:	7c52      	ldrb	r2, [r2, #17]
   15040:	700a      	strb	r2, [r1, #0]
   15042:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   15046:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1504a:	2201      	movs	r2, #1
   1504c:	601a      	str	r2, [r3, #0]
	return 0;
   1504e:	4770      	bx	lr
		return -1;
   15050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   15054:	4770      	bx	lr

00015056 <nrf_gpio_cfg_input>:
{
   15056:	b513      	push	{r0, r1, r4, lr}
   15058:	460c      	mov	r4, r1
   1505a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1505c:	a801      	add	r0, sp, #4
   1505e:	f7f9 ff37 	bl	eed0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   15062:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15064:	00a4      	lsls	r4, r4, #2
    reg->PIN_CNF[pin_number] = cnf;
   15066:	3380      	adds	r3, #128	; 0x80
   15068:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
   1506c:	b002      	add	sp, #8
   1506e:	bd10      	pop	{r4, pc}

00015070 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   15070:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   15072:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15074:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   15078:	b940      	cbnz	r0, 1508c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1507a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1507c:	079b      	lsls	r3, r3, #30
   1507e:	d406      	bmi.n	1508e <is_tx_ready.isra.0+0x1e>
   15080:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   15084:	3800      	subs	r0, #0
   15086:	bf18      	it	ne
   15088:	2001      	movne	r0, #1
   1508a:	4770      	bx	lr
   1508c:	2001      	movs	r0, #1
}
   1508e:	4770      	bx	lr

00015090 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   15090:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   15092:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   15094:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   15098:	05c9      	lsls	r1, r1, #23
   1509a:	d518      	bpl.n	150ce <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1509c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   150a0:	b1a9      	cbz	r1, 150ce <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   150a2:	f04f 0020 	mov.w	r0, #32
   150a6:	f3ef 8111 	mrs	r1, BASEPRI
   150aa:	f380 8812 	msr	BASEPRI_MAX, r0
   150ae:	f3bf 8f6f 	isb	sy
   150b2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   150b6:	b130      	cbz	r0, 150c6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   150b8:	2000      	movs	r0, #0
   150ba:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   150be:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   150c2:	2001      	movs	r0, #1
   150c4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   150c6:	f381 8811 	msr	BASEPRI, r1
   150ca:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   150ce:	6852      	ldr	r2, [r2, #4]
   150d0:	06d2      	lsls	r2, r2, #27
   150d2:	d515      	bpl.n	15100 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   150d4:	f04f 0120 	mov.w	r1, #32
   150d8:	f3ef 8211 	mrs	r2, BASEPRI
   150dc:	f381 8812 	msr	BASEPRI_MAX, r1
   150e0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150e4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   150e8:	b111      	cbz	r1, 150f0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   150ea:	2100      	movs	r1, #0
   150ec:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   150f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   150f4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   150f8:	f382 8811 	msr	BASEPRI, r2
   150fc:	f3bf 8f6f 	isb	sy
}
   15100:	4770      	bx	lr

00015102 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15102:	2300      	movs	r3, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   15104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   15108:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1510c:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   1510e:	f8d8 4000 	ldr.w	r4, [r8]
static int uarte_instance_init(const struct device *dev,
   15112:	4606      	mov	r6, r0
   15114:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   15118:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   1511a:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1511c:	68eb      	ldr	r3, [r5, #12]
   1511e:	1c5a      	adds	r2, r3, #1
   15120:	d011      	beq.n	15146 <uarte_instance_init.constprop.0+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15122:	a801      	add	r0, sp, #4
   15124:	9301      	str	r3, [sp, #4]
   15126:	f7f9 fed3 	bl	eed0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1512a:	2301      	movs	r3, #1
   1512c:	9a01      	ldr	r2, [sp, #4]
   1512e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   15130:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   15132:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15134:	a801      	add	r0, sp, #4
   15136:	9301      	str	r3, [sp, #4]
   15138:	f7f9 feca 	bl	eed0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1513c:	2203      	movs	r2, #3
   1513e:	9b01      	ldr	r3, [sp, #4]
   15140:	3380      	adds	r3, #128	; 0x80
   15142:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15146:	6928      	ldr	r0, [r5, #16]
   15148:	1c43      	adds	r3, r0, #1
   1514a:	d006      	beq.n	1515a <uarte_instance_init.constprop.0+0x58>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1514c:	7f2b      	ldrb	r3, [r5, #28]
   1514e:	2b00      	cmp	r3, #0
   15150:	bf14      	ite	ne
   15152:	2103      	movne	r1, #3
   15154:	2100      	moveq	r1, #0
   15156:	f7ff ff7e 	bl	15056 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1515a:	696b      	ldr	r3, [r5, #20]
   1515c:	1c5a      	adds	r2, r3, #1
   1515e:	d011      	beq.n	15184 <uarte_instance_init.constprop.0+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15160:	a801      	add	r0, sp, #4
   15162:	9301      	str	r3, [sp, #4]
   15164:	f7f9 feb4 	bl	eed0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15168:	2301      	movs	r3, #1
   1516a:	9a01      	ldr	r2, [sp, #4]
   1516c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1516e:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   15170:	696b      	ldr	r3, [r5, #20]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15172:	a801      	add	r0, sp, #4
   15174:	9301      	str	r3, [sp, #4]
   15176:	f7f9 feab 	bl	eed0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1517a:	2203      	movs	r2, #3
   1517c:	9b01      	ldr	r3, [sp, #4]
   1517e:	3380      	adds	r3, #128	; 0x80
   15180:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15184:	69a8      	ldr	r0, [r5, #24]
   15186:	1c43      	adds	r3, r0, #1
   15188:	d006      	beq.n	15198 <uarte_instance_init.constprop.0+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1518a:	7f6b      	ldrb	r3, [r5, #29]
   1518c:	2b00      	cmp	r3, #0
   1518e:	bf14      	ite	ne
   15190:	2103      	movne	r1, #3
   15192:	2100      	moveq	r1, #0
   15194:	f7ff ff5f 	bl	15056 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   15198:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   1519c:	682b      	ldr	r3, [r5, #0]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1519e:	4630      	mov	r0, r6
    p_reg->PSEL.TXD = pseltxd;
   151a0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   151a4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   151a8:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   151ac:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   151b0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	err = uarte_nrfx_configure(dev, &data->uart_config);
   151b4:	1d39      	adds	r1, r7, #4
   151b6:	f7f9 febd 	bl	ef34 <uarte_nrfx_configure>
	if (err) {
   151ba:	bb40      	cbnz	r0, 1520e <uarte_instance_init.constprop.0+0x10c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   151bc:	2308      	movs	r3, #8
   151be:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   151c2:	f898 3008 	ldrb.w	r3, [r8, #8]
   151c6:	b95b      	cbnz	r3, 151e0 <uarte_instance_init.constprop.0+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151c8:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   151cc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   151d0:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   151d4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   151d8:	2301      	movs	r3, #1
   151da:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151de:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   151e0:	f8d8 3004 	ldr.w	r3, [r8, #4]

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   151e4:	3710      	adds	r7, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   151e6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   151e8:	bf5c      	itt	pl
   151ea:	f44f 7280 	movpl.w	r2, #256	; 0x100
   151ee:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   151f2:	06db      	lsls	r3, r3, #27
   151f4:	bf44      	itt	mi
   151f6:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   151fa:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   151fe:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15200:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15204:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15208:	2301      	movs	r3, #1
   1520a:	60a3      	str	r3, [r4, #8]
   1520c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1520e:	b002      	add	sp, #8
   15210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015214 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   15214:	b510      	push	{r4, lr}
   15216:	4604      	mov	r4, r0
   15218:	2200      	movs	r2, #0
   1521a:	2101      	movs	r1, #1
   1521c:	2009      	movs	r0, #9
   1521e:	f7f8 fc31 	bl	da84 <z_arm_irq_priority_set>
   15222:	2009      	movs	r0, #9
   15224:	f7f8 fbfc 	bl	da20 <arch_irq_enable>
   15228:	4620      	mov	r0, r4
   1522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1522e:	f7ff bf68 	b.w	15102 <uarte_instance_init.constprop.0>

00015232 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   15232:	b510      	push	{r4, lr}
   15234:	4604      	mov	r4, r0
   15236:	2200      	movs	r2, #0
   15238:	2101      	movs	r1, #1
   1523a:	2008      	movs	r0, #8
   1523c:	f7f8 fc22 	bl	da84 <z_arm_irq_priority_set>
   15240:	2008      	movs	r0, #8
   15242:	f7f8 fbed 	bl	da20 <arch_irq_enable>
   15246:	4620      	mov	r0, r4
   15248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1524c:	f7ff bf59 	b.w	15102 <uarte_instance_init.constprop.0>

00015250 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   15250:	2200      	movs	r2, #0
{
   15252:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   15254:	4611      	mov	r1, r2
   15256:	4610      	mov	r0, r2
   15258:	f7fc ff74 	bl	12144 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   1525c:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   1525e:	bf18      	it	ne
   15260:	f06f 0015 	mvnne.w	r0, #21
   15264:	bd08      	pop	{r3, pc}

00015266 <sys_clock_disable>:
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
   15266:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1526a:	6913      	ldr	r3, [r2, #16]
   1526c:	f023 0301 	bic.w	r3, r3, #1
   15270:	6113      	str	r3, [r2, #16]
}
   15272:	4770      	bx	lr

00015274 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   15274:	f7fc bf0e 	b.w	12094 <nrf_cc3xx_platform_init>

00015278 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   15278:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1527a:	f7f8 facd 	bl	d818 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1527e:	f7f8 fb77 	bl	d970 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   15282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   15286:	f7fc bf05 	b.w	12094 <nrf_cc3xx_platform_init>

0001528a <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1528a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1528e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   15292:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
   15296:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
   1529a:	2a09      	cmp	r2, #9
   1529c:	d103      	bne.n	152a6 <nrf91_errata_14+0x1c>
                switch(var2)
   1529e:	1e43      	subs	r3, r0, #1
   152a0:	4258      	negs	r0, r3
   152a2:	4158      	adcs	r0, r3
   152a4:	4770      	bx	lr
        return false;
   152a6:	2000      	movs	r0, #0
}
   152a8:	4770      	bx	lr

000152aa <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   152aa:	4700      	bx	r0

000152ac <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   152ac:	f000 b8a5 	b.w	153fa <z_impl_k_busy_wait>

000152b0 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   152b0:	7b0a      	ldrb	r2, [r1, #12]
{
   152b2:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   152b4:	2a03      	cmp	r2, #3
   152b6:	d829      	bhi.n	1530c <xfer_completeness_check+0x5c>
   152b8:	e8df f002 	tbb	[pc, r2]
   152bc:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   152c0:	688a      	ldr	r2, [r1, #8]
   152c2:	0350      	lsls	r0, r2, #13
   152c4:	d504      	bpl.n	152d0 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   152c6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   152ca:	6908      	ldr	r0, [r1, #16]
   152cc:	4290      	cmp	r0, r2
   152ce:	d107      	bne.n	152e0 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   152d0:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   152d2:	0352      	lsls	r2, r2, #13
   152d4:	d41a      	bmi.n	1530c <xfer_completeness_check+0x5c>
   152d6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   152da:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   152dc:	4291      	cmp	r1, r2
   152de:	d015      	beq.n	1530c <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   152e0:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   152e2:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   152e4:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   152e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   152ec:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   152ee:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   152f2:	6908      	ldr	r0, [r1, #16]
   152f4:	4290      	cmp	r0, r2
   152f6:	d1f3      	bne.n	152e0 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   152f8:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   152fc:	e7ed      	b.n	152da <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   152fe:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   15302:	6909      	ldr	r1, [r1, #16]
   15304:	e7ea      	b.n	152dc <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   15306:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1530a:	e7fa      	b.n	15302 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1530c:	2001      	movs	r0, #1
}
   1530e:	4770      	bx	lr

00015310 <nrf_gpio_pin_set>:
{
   15310:	b507      	push	{r0, r1, r2, lr}
   15312:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15314:	a801      	add	r0, sp, #4
   15316:	f7fa fec3 	bl	100a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1531a:	2301      	movs	r3, #1
   1531c:	9a01      	ldr	r2, [sp, #4]
   1531e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   15320:	6083      	str	r3, [r0, #8]
}
   15322:	b003      	add	sp, #12
   15324:	f85d fb04 	ldr.w	pc, [sp], #4

00015328 <z_device_state_init>:
}
   15328:	4770      	bx	lr

0001532a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1532a:	b138      	cbz	r0, 1533c <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1532c:	68c3      	ldr	r3, [r0, #12]
   1532e:	8818      	ldrh	r0, [r3, #0]
   15330:	f3c0 0008 	ubfx	r0, r0, #0, #9
   15334:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   15338:	4258      	negs	r0, r3
   1533a:	4158      	adcs	r0, r3
}
   1533c:	4770      	bx	lr

0001533e <z_early_memset>:
	(void) memset(dst, c, n);
   1533e:	f7ff bdf4 	b.w	14f2a <memset>

00015342 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   15342:	f7ff bde7 	b.w	14f14 <memcpy>

00015346 <k_mem_slab_init>:
{
   15346:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   15348:	2400      	movs	r4, #0
   1534a:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1534c:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1534e:	ea41 0402 	orr.w	r4, r1, r2
   15352:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   15356:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   1535a:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1535c:	d10c      	bne.n	15378 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   1535e:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15360:	42a3      	cmp	r3, r4
   15362:	d103      	bne.n	1536c <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   15364:	e9c0 0000 	strd	r0, r0, [r0]
}
   15368:	2000      	movs	r0, #0
}
   1536a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1536c:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1536e:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   15370:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   15372:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   15374:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   15376:	e7f3      	b.n	15360 <k_mem_slab_init+0x1a>
		return -EINVAL;
   15378:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1537c:	e7f5      	b.n	1536a <k_mem_slab_init+0x24>

0001537e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1537e:	f3ef 8005 	mrs	r0, IPSR
}
   15382:	3800      	subs	r0, #0
   15384:	bf18      	it	ne
   15386:	2001      	movne	r0, #1
   15388:	4770      	bx	lr

0001538a <k_thread_name_get>:
}
   1538a:	2000      	movs	r0, #0
   1538c:	4770      	bx	lr

0001538e <z_pm_save_idle_exit>:
{
   1538e:	b508      	push	{r3, lr}
	pm_system_resume();
   15390:	f7f7 fe86 	bl	d0a0 <pm_system_resume>
}
   15394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   15398:	f7fa b830 	b.w	f3fc <sys_clock_idle_exit>

0001539c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1539c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   153a0:	428b      	cmp	r3, r1
   153a2:	d001      	beq.n	153a8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   153a4:	f7fc b874 	b.w	11490 <z_set_prio>
}
   153a8:	2000      	movs	r0, #0
   153aa:	4770      	bx	lr

000153ac <z_impl_k_mutex_init>:
{
   153ac:	4603      	mov	r3, r0
	mutex->owner = NULL;
   153ae:	2000      	movs	r0, #0
   153b0:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   153b4:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   153b8:	4770      	bx	lr

000153ba <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   153ba:	4603      	mov	r3, r0
   153bc:	b920      	cbnz	r0, 153c8 <z_reschedule_irqlock+0xe>
   153be:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   153c2:	b90a      	cbnz	r2, 153c8 <z_reschedule_irqlock+0xe>
   153c4:	f7f8 bba4 	b.w	db10 <arch_swap>
   153c8:	f383 8811 	msr	BASEPRI, r3
   153cc:	f3bf 8f6f 	isb	sy
}
   153d0:	4770      	bx	lr

000153d2 <z_reschedule_unlocked>:
	__asm__ volatile(
   153d2:	f04f 0320 	mov.w	r3, #32
   153d6:	f3ef 8011 	mrs	r0, BASEPRI
   153da:	f383 8812 	msr	BASEPRI_MAX, r3
   153de:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   153e2:	f7ff bfea 	b.w	153ba <z_reschedule_irqlock>

000153e6 <z_priq_dumb_best>:
{
   153e6:	4603      	mov	r3, r0
	return list->head == list;
   153e8:	6800      	ldr	r0, [r0, #0]
}
   153ea:	4283      	cmp	r3, r0
   153ec:	bf08      	it	eq
   153ee:	2000      	moveq	r0, #0
   153f0:	4770      	bx	lr

000153f2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   153f2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   153f4:	f7fc fe04 	bl	12000 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   153f8:	bd08      	pop	{r3, pc}

000153fa <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   153fa:	b108      	cbz	r0, 15400 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   153fc:	f7f7 bdd2 	b.w	cfa4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   15400:	4770      	bx	lr
	...

00015404 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   15404:	f7fa b860 	b.w	f4c8 <SystemInit>

Disassembly of section .gnu.sgstubs:

00016fa0 <spm_firmware_info_nse-0x1040>:
	...

00017fe0 <spm_firmware_info_nse>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7f5 bbd4 	b.w	d790 <__acle_se_spm_firmware_info_nse>

00017fe8 <spm_request_random_number_nse>:
   17fe8:	e97f e97f 	sg
   17fec:	f7f5 bbac 	b.w	d748 <__acle_se_spm_request_random_number_nse>

00017ff0 <spm_request_read_nse>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7f5 bb6e 	b.w	d6d4 <__acle_se_spm_request_read_nse>
	...
