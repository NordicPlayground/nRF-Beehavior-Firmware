
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_start>:
    c200:	20002620 	.word	0x20002620
    c204:	0000e115 	.word	0x0000e115
    c208:	00014e17 	.word	0x00014e17
    c20c:	0000e0e9 	.word	0x0000e0e9
    c210:	0000e0e9 	.word	0x0000e0e9
    c214:	0000e0e9 	.word	0x0000e0e9
    c218:	0000e0e9 	.word	0x0000e0e9
    c21c:	0000e0e9 	.word	0x0000e0e9
	...
    c22c:	0000dae5 	.word	0x0000dae5
    c230:	0000e0e9 	.word	0x0000e0e9
    c234:	00000000 	.word	0x00000000
    c238:	0000da8d 	.word	0x0000da8d
    c23c:	0000f125 	.word	0x0000f125

0000c240 <_irq_vector_table>:
    c240:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c250:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c260:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c270:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c280:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c290:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c2a0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c2b0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c2c0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c2d0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c2e0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c2f0:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c300:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c310:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c320:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c330:	0000db65 0000db65 0000db65 0000db65     e...e...e...e...
    c340:	0000db65                                e...

0000c344 <_vector_end>:
	...

0000c400 <m_firmware_info>:
    c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c410:	0000be00 00000001 0000c200 0000c200     ................
    c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c43c <__aeabi_uldivmod>:
    c43c:	b953      	cbnz	r3, c454 <__aeabi_uldivmod+0x18>
    c43e:	b94a      	cbnz	r2, c454 <__aeabi_uldivmod+0x18>
    c440:	2900      	cmp	r1, #0
    c442:	bf08      	it	eq
    c444:	2800      	cmpeq	r0, #0
    c446:	bf1c      	itt	ne
    c448:	f04f 31ff 	movne.w	r1, #4294967295
    c44c:	f04f 30ff 	movne.w	r0, #4294967295
    c450:	f000 b970 	b.w	c734 <__aeabi_idiv0>
    c454:	f1ad 0c08 	sub.w	ip, sp, #8
    c458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c45c:	f000 f806 	bl	c46c <__udivmoddi4>
    c460:	f8dd e004 	ldr.w	lr, [sp, #4]
    c464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c468:	b004      	add	sp, #16
    c46a:	4770      	bx	lr

0000c46c <__udivmoddi4>:
    c46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c470:	9e08      	ldr	r6, [sp, #32]
    c472:	460d      	mov	r5, r1
    c474:	4604      	mov	r4, r0
    c476:	468a      	mov	sl, r1
    c478:	2b00      	cmp	r3, #0
    c47a:	d17f      	bne.n	c57c <__udivmoddi4+0x110>
    c47c:	428a      	cmp	r2, r1
    c47e:	4617      	mov	r7, r2
    c480:	d941      	bls.n	c506 <__udivmoddi4+0x9a>
    c482:	fab2 f282 	clz	r2, r2
    c486:	b14a      	cbz	r2, c49c <__udivmoddi4+0x30>
    c488:	f1c2 0120 	rsb	r1, r2, #32
    c48c:	fa05 f302 	lsl.w	r3, r5, r2
    c490:	4097      	lsls	r7, r2
    c492:	4094      	lsls	r4, r2
    c494:	fa20 f101 	lsr.w	r1, r0, r1
    c498:	ea41 0a03 	orr.w	sl, r1, r3
    c49c:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c4a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c4a4:	fa1f f987 	uxth.w	r9, r7
    c4a8:	fbba fef8 	udiv	lr, sl, r8
    c4ac:	fb08 a31e 	mls	r3, r8, lr, sl
    c4b0:	fb0e f109 	mul.w	r1, lr, r9
    c4b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    c4b8:	4299      	cmp	r1, r3
    c4ba:	d906      	bls.n	c4ca <__udivmoddi4+0x5e>
    c4bc:	18fb      	adds	r3, r7, r3
    c4be:	d202      	bcs.n	c4c6 <__udivmoddi4+0x5a>
    c4c0:	4299      	cmp	r1, r3
    c4c2:	f200 8124 	bhi.w	c70e <__udivmoddi4+0x2a2>
    c4c6:	f10e 3eff 	add.w	lr, lr, #4294967295
    c4ca:	1a59      	subs	r1, r3, r1
    c4cc:	b2a3      	uxth	r3, r4
    c4ce:	fbb1 f0f8 	udiv	r0, r1, r8
    c4d2:	fb08 1110 	mls	r1, r8, r0, r1
    c4d6:	fb00 f909 	mul.w	r9, r0, r9
    c4da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c4de:	45a1      	cmp	r9, r4
    c4e0:	d905      	bls.n	c4ee <__udivmoddi4+0x82>
    c4e2:	193c      	adds	r4, r7, r4
    c4e4:	d202      	bcs.n	c4ec <__udivmoddi4+0x80>
    c4e6:	45a1      	cmp	r9, r4
    c4e8:	f200 810e 	bhi.w	c708 <__udivmoddi4+0x29c>
    c4ec:	3801      	subs	r0, #1
    c4ee:	eba4 0409 	sub.w	r4, r4, r9
    c4f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c4f6:	2100      	movs	r1, #0
    c4f8:	b11e      	cbz	r6, c502 <__udivmoddi4+0x96>
    c4fa:	40d4      	lsrs	r4, r2
    c4fc:	2300      	movs	r3, #0
    c4fe:	e9c6 4300 	strd	r4, r3, [r6]
    c502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c506:	b902      	cbnz	r2, c50a <__udivmoddi4+0x9e>
    c508:	deff      	udf	#255	; 0xff
    c50a:	fab2 f282 	clz	r2, r2
    c50e:	2a00      	cmp	r2, #0
    c510:	d14f      	bne.n	c5b2 <__udivmoddi4+0x146>
    c512:	1bcb      	subs	r3, r1, r7
    c514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c518:	fa1f f887 	uxth.w	r8, r7
    c51c:	2101      	movs	r1, #1
    c51e:	0c25      	lsrs	r5, r4, #16
    c520:	fbb3 fcfe 	udiv	ip, r3, lr
    c524:	fb0e 301c 	mls	r0, lr, ip, r3
    c528:	462b      	mov	r3, r5
    c52a:	fb08 f90c 	mul.w	r9, r8, ip
    c52e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    c532:	45a9      	cmp	r9, r5
    c534:	d90a      	bls.n	c54c <__udivmoddi4+0xe0>
    c536:	197d      	adds	r5, r7, r5
    c538:	bf2c      	ite	cs
    c53a:	2301      	movcs	r3, #1
    c53c:	2300      	movcc	r3, #0
    c53e:	45a9      	cmp	r9, r5
    c540:	d902      	bls.n	c548 <__udivmoddi4+0xdc>
    c542:	2b00      	cmp	r3, #0
    c544:	f000 80d9 	beq.w	c6fa <__udivmoddi4+0x28e>
    c548:	f10c 3cff 	add.w	ip, ip, #4294967295
    c54c:	eba5 0509 	sub.w	r5, r5, r9
    c550:	b2a3      	uxth	r3, r4
    c552:	fbb5 f0fe 	udiv	r0, r5, lr
    c556:	fb0e 5510 	mls	r5, lr, r0, r5
    c55a:	fb08 f800 	mul.w	r8, r8, r0
    c55e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    c562:	45a0      	cmp	r8, r4
    c564:	d905      	bls.n	c572 <__udivmoddi4+0x106>
    c566:	193c      	adds	r4, r7, r4
    c568:	d202      	bcs.n	c570 <__udivmoddi4+0x104>
    c56a:	45a0      	cmp	r8, r4
    c56c:	f200 80c9 	bhi.w	c702 <__udivmoddi4+0x296>
    c570:	3801      	subs	r0, #1
    c572:	eba4 0408 	sub.w	r4, r4, r8
    c576:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c57a:	e7bd      	b.n	c4f8 <__udivmoddi4+0x8c>
    c57c:	428b      	cmp	r3, r1
    c57e:	d908      	bls.n	c592 <__udivmoddi4+0x126>
    c580:	2e00      	cmp	r6, #0
    c582:	f000 80b1 	beq.w	c6e8 <__udivmoddi4+0x27c>
    c586:	2100      	movs	r1, #0
    c588:	e9c6 0500 	strd	r0, r5, [r6]
    c58c:	4608      	mov	r0, r1
    c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c592:	fab3 f183 	clz	r1, r3
    c596:	2900      	cmp	r1, #0
    c598:	d146      	bne.n	c628 <__udivmoddi4+0x1bc>
    c59a:	42ab      	cmp	r3, r5
    c59c:	f0c0 80a7 	bcc.w	c6ee <__udivmoddi4+0x282>
    c5a0:	4282      	cmp	r2, r0
    c5a2:	f240 80a4 	bls.w	c6ee <__udivmoddi4+0x282>
    c5a6:	4608      	mov	r0, r1
    c5a8:	2e00      	cmp	r6, #0
    c5aa:	d0aa      	beq.n	c502 <__udivmoddi4+0x96>
    c5ac:	e9c6 4a00 	strd	r4, sl, [r6]
    c5b0:	e7a7      	b.n	c502 <__udivmoddi4+0x96>
    c5b2:	f1c2 0020 	rsb	r0, r2, #32
    c5b6:	4097      	lsls	r7, r2
    c5b8:	fa01 f302 	lsl.w	r3, r1, r2
    c5bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c5c0:	40c1      	lsrs	r1, r0
    c5c2:	fa24 f500 	lsr.w	r5, r4, r0
    c5c6:	fa1f f887 	uxth.w	r8, r7
    c5ca:	4094      	lsls	r4, r2
    c5cc:	431d      	orrs	r5, r3
    c5ce:	fbb1 f0fe 	udiv	r0, r1, lr
    c5d2:	0c2b      	lsrs	r3, r5, #16
    c5d4:	fb0e 1110 	mls	r1, lr, r0, r1
    c5d8:	fb00 fc08 	mul.w	ip, r0, r8
    c5dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c5e0:	459c      	cmp	ip, r3
    c5e2:	d909      	bls.n	c5f8 <__udivmoddi4+0x18c>
    c5e4:	18fb      	adds	r3, r7, r3
    c5e6:	bf2c      	ite	cs
    c5e8:	2101      	movcs	r1, #1
    c5ea:	2100      	movcc	r1, #0
    c5ec:	459c      	cmp	ip, r3
    c5ee:	d902      	bls.n	c5f6 <__udivmoddi4+0x18a>
    c5f0:	2900      	cmp	r1, #0
    c5f2:	f000 8095 	beq.w	c720 <__udivmoddi4+0x2b4>
    c5f6:	3801      	subs	r0, #1
    c5f8:	eba3 030c 	sub.w	r3, r3, ip
    c5fc:	b2ad      	uxth	r5, r5
    c5fe:	fbb3 f1fe 	udiv	r1, r3, lr
    c602:	fb0e 3311 	mls	r3, lr, r1, r3
    c606:	fb01 fc08 	mul.w	ip, r1, r8
    c60a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    c60e:	45ac      	cmp	ip, r5
    c610:	d905      	bls.n	c61e <__udivmoddi4+0x1b2>
    c612:	197d      	adds	r5, r7, r5
    c614:	d202      	bcs.n	c61c <__udivmoddi4+0x1b0>
    c616:	45ac      	cmp	ip, r5
    c618:	f200 8089 	bhi.w	c72e <__udivmoddi4+0x2c2>
    c61c:	3901      	subs	r1, #1
    c61e:	eba5 030c 	sub.w	r3, r5, ip
    c622:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c626:	e77a      	b.n	c51e <__udivmoddi4+0xb2>
    c628:	f1c1 0420 	rsb	r4, r1, #32
    c62c:	408b      	lsls	r3, r1
    c62e:	fa02 f701 	lsl.w	r7, r2, r1
    c632:	fa05 fc01 	lsl.w	ip, r5, r1
    c636:	40e2      	lsrs	r2, r4
    c638:	fa20 f804 	lsr.w	r8, r0, r4
    c63c:	40e5      	lsrs	r5, r4
    c63e:	fa00 fe01 	lsl.w	lr, r0, r1
    c642:	4313      	orrs	r3, r2
    c644:	ea48 020c 	orr.w	r2, r8, ip
    c648:	ea4f 4813 	mov.w	r8, r3, lsr #16
    c64c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    c650:	fa1f f983 	uxth.w	r9, r3
    c654:	fbb5 faf8 	udiv	sl, r5, r8
    c658:	fb08 551a 	mls	r5, r8, sl, r5
    c65c:	fb0a f009 	mul.w	r0, sl, r9
    c660:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    c664:	4560      	cmp	r0, ip
    c666:	d90a      	bls.n	c67e <__udivmoddi4+0x212>
    c668:	eb13 0c0c 	adds.w	ip, r3, ip
    c66c:	bf2c      	ite	cs
    c66e:	2501      	movcs	r5, #1
    c670:	2500      	movcc	r5, #0
    c672:	4560      	cmp	r0, ip
    c674:	d901      	bls.n	c67a <__udivmoddi4+0x20e>
    c676:	2d00      	cmp	r5, #0
    c678:	d055      	beq.n	c726 <__udivmoddi4+0x2ba>
    c67a:	f10a 3aff 	add.w	sl, sl, #4294967295
    c67e:	ebac 0c00 	sub.w	ip, ip, r0
    c682:	b292      	uxth	r2, r2
    c684:	fbbc f0f8 	udiv	r0, ip, r8
    c688:	fb08 cc10 	mls	ip, r8, r0, ip
    c68c:	fb00 f909 	mul.w	r9, r0, r9
    c690:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c694:	45e1      	cmp	r9, ip
    c696:	d905      	bls.n	c6a4 <__udivmoddi4+0x238>
    c698:	eb13 0c0c 	adds.w	ip, r3, ip
    c69c:	d201      	bcs.n	c6a2 <__udivmoddi4+0x236>
    c69e:	45e1      	cmp	r9, ip
    c6a0:	d83b      	bhi.n	c71a <__udivmoddi4+0x2ae>
    c6a2:	3801      	subs	r0, #1
    c6a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c6a8:	ebac 0c09 	sub.w	ip, ip, r9
    c6ac:	fba0 8907 	umull	r8, r9, r0, r7
    c6b0:	45cc      	cmp	ip, r9
    c6b2:	4645      	mov	r5, r8
    c6b4:	464a      	mov	r2, r9
    c6b6:	d302      	bcc.n	c6be <__udivmoddi4+0x252>
    c6b8:	d106      	bne.n	c6c8 <__udivmoddi4+0x25c>
    c6ba:	45c6      	cmp	lr, r8
    c6bc:	d204      	bcs.n	c6c8 <__udivmoddi4+0x25c>
    c6be:	3801      	subs	r0, #1
    c6c0:	ebb8 0507 	subs.w	r5, r8, r7
    c6c4:	eb69 0203 	sbc.w	r2, r9, r3
    c6c8:	b32e      	cbz	r6, c716 <__udivmoddi4+0x2aa>
    c6ca:	ebbe 0305 	subs.w	r3, lr, r5
    c6ce:	eb6c 0c02 	sbc.w	ip, ip, r2
    c6d2:	fa23 f201 	lsr.w	r2, r3, r1
    c6d6:	fa0c f404 	lsl.w	r4, ip, r4
    c6da:	fa2c f301 	lsr.w	r3, ip, r1
    c6de:	2100      	movs	r1, #0
    c6e0:	4314      	orrs	r4, r2
    c6e2:	e9c6 4300 	strd	r4, r3, [r6]
    c6e6:	e70c      	b.n	c502 <__udivmoddi4+0x96>
    c6e8:	4631      	mov	r1, r6
    c6ea:	4630      	mov	r0, r6
    c6ec:	e709      	b.n	c502 <__udivmoddi4+0x96>
    c6ee:	1a84      	subs	r4, r0, r2
    c6f0:	eb65 0303 	sbc.w	r3, r5, r3
    c6f4:	2001      	movs	r0, #1
    c6f6:	469a      	mov	sl, r3
    c6f8:	e756      	b.n	c5a8 <__udivmoddi4+0x13c>
    c6fa:	f1ac 0c02 	sub.w	ip, ip, #2
    c6fe:	443d      	add	r5, r7
    c700:	e724      	b.n	c54c <__udivmoddi4+0xe0>
    c702:	3802      	subs	r0, #2
    c704:	443c      	add	r4, r7
    c706:	e734      	b.n	c572 <__udivmoddi4+0x106>
    c708:	3802      	subs	r0, #2
    c70a:	443c      	add	r4, r7
    c70c:	e6ef      	b.n	c4ee <__udivmoddi4+0x82>
    c70e:	f1ae 0e02 	sub.w	lr, lr, #2
    c712:	443b      	add	r3, r7
    c714:	e6d9      	b.n	c4ca <__udivmoddi4+0x5e>
    c716:	4631      	mov	r1, r6
    c718:	e6f3      	b.n	c502 <__udivmoddi4+0x96>
    c71a:	3802      	subs	r0, #2
    c71c:	449c      	add	ip, r3
    c71e:	e7c1      	b.n	c6a4 <__udivmoddi4+0x238>
    c720:	3802      	subs	r0, #2
    c722:	443b      	add	r3, r7
    c724:	e768      	b.n	c5f8 <__udivmoddi4+0x18c>
    c726:	f1aa 0a02 	sub.w	sl, sl, #2
    c72a:	449c      	add	ip, r3
    c72c:	e7a7      	b.n	c67e <__udivmoddi4+0x212>
    c72e:	3902      	subs	r1, #2
    c730:	443d      	add	r5, r7
    c732:	e774      	b.n	c61e <__udivmoddi4+0x1b2>

0000c734 <__aeabi_idiv0>:
    c734:	4770      	bx	lr
    c736:	bf00      	nop

0000c738 <__gnu_cmse_nonsecure_call>:
    c738:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
    c73c:	4627      	mov	r7, r4
    c73e:	46a0      	mov	r8, r4
    c740:	46a1      	mov	r9, r4
    c742:	46a2      	mov	sl, r4
    c744:	46a3      	mov	fp, r4
    c746:	46a4      	mov	ip, r4
    c748:	b0a2      	sub	sp, #136	; 0x88
    c74a:	ec2d 0a00 	vlstm	sp
    c74e:	f384 8800 	msr	CPSR_f, r4
    c752:	4625      	mov	r5, r4
    c754:	4626      	mov	r6, r4
    c756:	47a4      	blxns	r4
    c758:	ec3d 0a00 	vlldm	sp
    c75c:	b022      	add	sp, #136	; 0x88
    c75e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

0000c764 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c764:	680b      	ldr	r3, [r1, #0]
    c766:	3301      	adds	r3, #1
    c768:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c76a:	4b01      	ldr	r3, [pc, #4]	; (c770 <char_out+0xc>)
    c76c:	681b      	ldr	r3, [r3, #0]
    c76e:	4718      	bx	r3
    c770:	20000000 	.word	0x20000000

0000c774 <__printk_hook_install>:
	_char_out = fn;
    c774:	4b01      	ldr	r3, [pc, #4]	; (c77c <__printk_hook_install+0x8>)
    c776:	6018      	str	r0, [r3, #0]
}
    c778:	4770      	bx	lr
    c77a:	bf00      	nop
    c77c:	20000000 	.word	0x20000000

0000c780 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    c780:	b507      	push	{r0, r1, r2, lr}
    c782:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    c784:	2100      	movs	r1, #0
{
    c786:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    c788:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    c78a:	4803      	ldr	r0, [pc, #12]	; (c798 <vprintk+0x18>)
    c78c:	a901      	add	r1, sp, #4
    c78e:	f000 f805 	bl	c79c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    c792:	b003      	add	sp, #12
    c794:	f85d fb04 	ldr.w	pc, [sp], #4
    c798:	0000c765 	.word	0x0000c765

0000c79c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7a0:	468b      	mov	fp, r1
    c7a2:	4692      	mov	sl, r2
    c7a4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    c7a6:	2500      	movs	r5, #0
{
    c7a8:	b091      	sub	sp, #68	; 0x44
    c7aa:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    c7ac:	f89a 0000 	ldrb.w	r0, [sl]
    c7b0:	b908      	cbnz	r0, c7b6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    c7b2:	4628      	mov	r0, r5
    c7b4:	e35e      	b.n	ce74 <cbvprintf+0x6d8>
		if (*fp != '%') {
    c7b6:	2825      	cmp	r0, #37	; 0x25
    c7b8:	f10a 0701 	add.w	r7, sl, #1
    c7bc:	d007      	beq.n	c7ce <cbvprintf+0x32>
			OUTC('%');
    c7be:	4659      	mov	r1, fp
    c7c0:	9b02      	ldr	r3, [sp, #8]
    c7c2:	4798      	blx	r3
    c7c4:	2800      	cmp	r0, #0
    c7c6:	f2c0 8355 	blt.w	ce74 <cbvprintf+0x6d8>
    c7ca:	3501      	adds	r5, #1
			break;
    c7cc:	e210      	b.n	cbf0 <cbvprintf+0x454>
		} state = {
    c7ce:	2218      	movs	r2, #24
    c7d0:	2100      	movs	r1, #0
    c7d2:	a80a      	add	r0, sp, #40	; 0x28
    c7d4:	f008 fb86 	bl	14ee4 <memset>
	if (*sp == '%') {
    c7d8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    c7dc:	2b25      	cmp	r3, #37	; 0x25
    c7de:	d078      	beq.n	c8d2 <cbvprintf+0x136>
    c7e0:	2200      	movs	r2, #0
    c7e2:	4694      	mov	ip, r2
    c7e4:	4616      	mov	r6, r2
    c7e6:	4696      	mov	lr, r2
    c7e8:	4610      	mov	r0, r2
    c7ea:	4639      	mov	r1, r7
		switch (*sp) {
    c7ec:	f817 3b01 	ldrb.w	r3, [r7], #1
    c7f0:	2b2b      	cmp	r3, #43	; 0x2b
    c7f2:	f000 809d 	beq.w	c930 <cbvprintf+0x194>
    c7f6:	f200 8094 	bhi.w	c922 <cbvprintf+0x186>
    c7fa:	2b20      	cmp	r3, #32
    c7fc:	f000 809b 	beq.w	c936 <cbvprintf+0x19a>
    c800:	2b23      	cmp	r3, #35	; 0x23
    c802:	f000 809a 	beq.w	c93a <cbvprintf+0x19e>
    c806:	b128      	cbz	r0, c814 <cbvprintf+0x78>
    c808:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c80c:	f040 0004 	orr.w	r0, r0, #4
    c810:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c814:	f1be 0f00 	cmp.w	lr, #0
    c818:	d005      	beq.n	c826 <cbvprintf+0x8a>
    c81a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c81e:	f040 0008 	orr.w	r0, r0, #8
    c822:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c826:	b12e      	cbz	r6, c834 <cbvprintf+0x98>
    c828:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c82c:	f040 0010 	orr.w	r0, r0, #16
    c830:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c834:	f1bc 0f00 	cmp.w	ip, #0
    c838:	d005      	beq.n	c846 <cbvprintf+0xaa>
    c83a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c83e:	f040 0020 	orr.w	r0, r0, #32
    c842:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    c846:	b12a      	cbz	r2, c854 <cbvprintf+0xb8>
    c848:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    c84c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c850:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    c854:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    c858:	f002 0044 	and.w	r0, r2, #68	; 0x44
    c85c:	2844      	cmp	r0, #68	; 0x44
    c85e:	d103      	bne.n	c868 <cbvprintf+0xcc>
		conv->flag_zero = false;
    c860:	f36f 1286 	bfc	r2, #6, #1
    c864:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    c868:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    c86c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    c86e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c872:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    c876:	d17b      	bne.n	c970 <cbvprintf+0x1d4>
		conv->width_star = true;
    c878:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    c87c:	1c4b      	adds	r3, r1, #1
    c87e:	f042 0201 	orr.w	r2, r2, #1
    c882:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    c886:	781a      	ldrb	r2, [r3, #0]
    c888:	2a2e      	cmp	r2, #46	; 0x2e
    c88a:	bf0c      	ite	eq
    c88c:	2101      	moveq	r1, #1
    c88e:	2100      	movne	r1, #0
    c890:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    c894:	f361 0241 	bfi	r2, r1, #1, #1
    c898:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    c89c:	d174      	bne.n	c988 <cbvprintf+0x1ec>
	if (*sp == '*') {
    c89e:	785a      	ldrb	r2, [r3, #1]
    c8a0:	2a2a      	cmp	r2, #42	; 0x2a
    c8a2:	d06a      	beq.n	c97a <cbvprintf+0x1de>
	size_t val = 0;
    c8a4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    c8a6:	260a      	movs	r6, #10
    c8a8:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c8aa:	4618      	mov	r0, r3
    c8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
    c8b0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c8b4:	2f09      	cmp	r7, #9
    c8b6:	f240 808e 	bls.w	c9d6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    c8ba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    c8be:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    c8c0:	f3c2 0040 	ubfx	r0, r2, #1, #1
    c8c4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    c8c8:	f361 0241 	bfi	r2, r1, #1, #1
    c8cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    c8d0:	e05a      	b.n	c988 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    c8d2:	f10a 0702 	add.w	r7, sl, #2
    c8d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    c8da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    c8de:	07d9      	lsls	r1, r3, #31
    c8e0:	f140 8149 	bpl.w	cb76 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    c8e4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    c8e8:	f1b9 0f00 	cmp.w	r9, #0
    c8ec:	da07      	bge.n	c8fe <cbvprintf+0x162>
				conv->flag_dash = true;
    c8ee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    c8f2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    c8f6:	f042 0204 	orr.w	r2, r2, #4
    c8fa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    c8fe:	075a      	lsls	r2, r3, #29
    c900:	f140 8142 	bpl.w	cb88 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    c904:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    c908:	f1b8 0f00 	cmp.w	r8, #0
    c90c:	f280 8141 	bge.w	cb92 <cbvprintf+0x3f6>
				conv->prec_present = false;
    c910:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    c914:	f36f 0341 	bfc	r3, #1, #1
    c918:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    c91c:	f04f 38ff 	mov.w	r8, #4294967295
    c920:	e137      	b.n	cb92 <cbvprintf+0x3f6>
		switch (*sp) {
    c922:	2b2d      	cmp	r3, #45	; 0x2d
    c924:	d00c      	beq.n	c940 <cbvprintf+0x1a4>
    c926:	2b30      	cmp	r3, #48	; 0x30
    c928:	f47f af6d 	bne.w	c806 <cbvprintf+0x6a>
			conv->flag_zero = true;
    c92c:	2201      	movs	r2, #1
	} while (loop);
    c92e:	e75c      	b.n	c7ea <cbvprintf+0x4e>
			conv->flag_plus = true;
    c930:	f04f 0e01 	mov.w	lr, #1
    c934:	e759      	b.n	c7ea <cbvprintf+0x4e>
			conv->flag_space = true;
    c936:	2601      	movs	r6, #1
    c938:	e757      	b.n	c7ea <cbvprintf+0x4e>
			conv->flag_hash = true;
    c93a:	f04f 0c01 	mov.w	ip, #1
    c93e:	e754      	b.n	c7ea <cbvprintf+0x4e>
		switch (*sp) {
    c940:	2001      	movs	r0, #1
    c942:	e752      	b.n	c7ea <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    c944:	4633      	mov	r3, r6
    c946:	fb0c 0202 	mla	r2, ip, r2, r0
    c94a:	3a30      	subs	r2, #48	; 0x30
    c94c:	461e      	mov	r6, r3
    c94e:	f816 0b01 	ldrb.w	r0, [r6], #1
    c952:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c956:	2f09      	cmp	r7, #9
    c958:	d9f4      	bls.n	c944 <cbvprintf+0x1a8>
	if (sp != wp) {
    c95a:	4299      	cmp	r1, r3
    c95c:	d093      	beq.n	c886 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    c95e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    c962:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    c964:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    c966:	f362 0141 	bfi	r1, r2, #1, #1
    c96a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    c96e:	e78a      	b.n	c886 <cbvprintf+0xea>
    c970:	460b      	mov	r3, r1
	size_t val = 0;
    c972:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    c974:	f04f 0c0a 	mov.w	ip, #10
    c978:	e7e8      	b.n	c94c <cbvprintf+0x1b0>
		conv->prec_star = true;
    c97a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    c97e:	3302      	adds	r3, #2
		conv->prec_star = true;
    c980:	f042 0204 	orr.w	r2, r2, #4
    c984:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    c988:	461f      	mov	r7, r3
    c98a:	f817 2b01 	ldrb.w	r2, [r7], #1
    c98e:	2a6c      	cmp	r2, #108	; 0x6c
    c990:	d041      	beq.n	ca16 <cbvprintf+0x27a>
    c992:	d825      	bhi.n	c9e0 <cbvprintf+0x244>
    c994:	2a68      	cmp	r2, #104	; 0x68
    c996:	d02b      	beq.n	c9f0 <cbvprintf+0x254>
    c998:	2a6a      	cmp	r2, #106	; 0x6a
    c99a:	d046      	beq.n	ca2a <cbvprintf+0x28e>
    c99c:	2a4c      	cmp	r2, #76	; 0x4c
    c99e:	d04c      	beq.n	ca3a <cbvprintf+0x29e>
    c9a0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    c9a2:	f817 2b01 	ldrb.w	r2, [r7], #1
    c9a6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    c9aa:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    c9ac:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    c9b0:	f200 80d9 	bhi.w	cb66 <cbvprintf+0x3ca>
    c9b4:	2a57      	cmp	r2, #87	; 0x57
    c9b6:	d84d      	bhi.n	ca54 <cbvprintf+0x2b8>
    c9b8:	2a41      	cmp	r2, #65	; 0x41
    c9ba:	d003      	beq.n	c9c4 <cbvprintf+0x228>
    c9bc:	3a45      	subs	r2, #69	; 0x45
    c9be:	2a02      	cmp	r2, #2
    c9c0:	f200 80d1 	bhi.w	cb66 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    c9c4:	2204      	movs	r2, #4
    c9c6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    c9ca:	f362 0302 	bfi	r3, r2, #0, #3
    c9ce:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    c9d2:	2301      	movs	r3, #1
			break;
    c9d4:	e09e      	b.n	cb14 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    c9d6:	fb06 2101 	mla	r1, r6, r1, r2
    c9da:	4603      	mov	r3, r0
    c9dc:	3930      	subs	r1, #48	; 0x30
    c9de:	e764      	b.n	c8aa <cbvprintf+0x10e>
	switch (*sp) {
    c9e0:	2a74      	cmp	r2, #116	; 0x74
    c9e2:	d026      	beq.n	ca32 <cbvprintf+0x296>
    c9e4:	2a7a      	cmp	r2, #122	; 0x7a
    c9e6:	d1db      	bne.n	c9a0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    c9e8:	2206      	movs	r2, #6
    c9ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    c9ee:	e00d      	b.n	ca0c <cbvprintf+0x270>
		if (*++sp == 'h') {
    c9f0:	785a      	ldrb	r2, [r3, #1]
    c9f2:	2a68      	cmp	r2, #104	; 0x68
    c9f4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    c9f8:	d106      	bne.n	ca08 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    c9fa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    c9fc:	f361 02c6 	bfi	r2, r1, #3, #4
    ca00:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    ca04:	1c9f      	adds	r7, r3, #2
    ca06:	e7cc      	b.n	c9a2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    ca08:	4613      	mov	r3, r2
    ca0a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    ca0c:	f362 03c6 	bfi	r3, r2, #3, #4
    ca10:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    ca14:	e7c5      	b.n	c9a2 <cbvprintf+0x206>
		if (*++sp == 'l') {
    ca16:	785a      	ldrb	r2, [r3, #1]
    ca18:	2a6c      	cmp	r2, #108	; 0x6c
    ca1a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ca1e:	d101      	bne.n	ca24 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    ca20:	2104      	movs	r1, #4
    ca22:	e7eb      	b.n	c9fc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    ca24:	4613      	mov	r3, r2
    ca26:	2203      	movs	r2, #3
    ca28:	e7f0      	b.n	ca0c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    ca2a:	2205      	movs	r2, #5
    ca2c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ca30:	e7ec      	b.n	ca0c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    ca32:	2207      	movs	r2, #7
    ca34:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ca38:	e7e8      	b.n	ca0c <cbvprintf+0x270>
		conv->unsupported = true;
    ca3a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ca3e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    ca42:	f023 0302 	bic.w	r3, r3, #2
    ca46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    ca4a:	f043 0302 	orr.w	r3, r3, #2
    ca4e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    ca52:	e7a6      	b.n	c9a2 <cbvprintf+0x206>
    ca54:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    ca58:	2920      	cmp	r1, #32
    ca5a:	f200 8084 	bhi.w	cb66 <cbvprintf+0x3ca>
    ca5e:	a001      	add	r0, pc, #4	; (adr r0, ca64 <cbvprintf+0x2c8>)
    ca60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    ca64:	0000cb29 	.word	0x0000cb29
    ca68:	0000cb67 	.word	0x0000cb67
    ca6c:	0000cb67 	.word	0x0000cb67
    ca70:	0000cb67 	.word	0x0000cb67
    ca74:	0000cb67 	.word	0x0000cb67
    ca78:	0000cb67 	.word	0x0000cb67
    ca7c:	0000cb67 	.word	0x0000cb67
    ca80:	0000cb67 	.word	0x0000cb67
    ca84:	0000cb67 	.word	0x0000cb67
    ca88:	0000c9c5 	.word	0x0000c9c5
    ca8c:	0000cb67 	.word	0x0000cb67
    ca90:	0000cb29 	.word	0x0000cb29
    ca94:	0000cae9 	.word	0x0000cae9
    ca98:	0000c9c5 	.word	0x0000c9c5
    ca9c:	0000c9c5 	.word	0x0000c9c5
    caa0:	0000c9c5 	.word	0x0000c9c5
    caa4:	0000cb67 	.word	0x0000cb67
    caa8:	0000cae9 	.word	0x0000cae9
    caac:	0000cb67 	.word	0x0000cb67
    cab0:	0000cb67 	.word	0x0000cb67
    cab4:	0000cb67 	.word	0x0000cb67
    cab8:	0000cb67 	.word	0x0000cb67
    cabc:	0000cb31 	.word	0x0000cb31
    cac0:	0000cb29 	.word	0x0000cb29
    cac4:	0000cb4d 	.word	0x0000cb4d
    cac8:	0000cb67 	.word	0x0000cb67
    cacc:	0000cb67 	.word	0x0000cb67
    cad0:	0000cb4d 	.word	0x0000cb4d
    cad4:	0000cb67 	.word	0x0000cb67
    cad8:	0000cb29 	.word	0x0000cb29
    cadc:	0000cb67 	.word	0x0000cb67
    cae0:	0000cb67 	.word	0x0000cb67
    cae4:	0000cb29 	.word	0x0000cb29
		conv->specifier_cat = SPECIFIER_SINT;
    cae8:	2001      	movs	r0, #1
    caea:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    caee:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    caf2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    caf6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    caf8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    cafc:	bf02      	ittt	eq
    cafe:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    cb02:	f041 0101 	orreq.w	r1, r1, #1
    cb06:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    cb0a:	2a63      	cmp	r2, #99	; 0x63
    cb0c:	d131      	bne.n	cb72 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    cb0e:	3b00      	subs	r3, #0
    cb10:	bf18      	it	ne
    cb12:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    cb14:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cb18:	f3c2 0140 	ubfx	r1, r2, #1, #1
    cb1c:	430b      	orrs	r3, r1
    cb1e:	f363 0241 	bfi	r2, r3, #1, #1
    cb22:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    cb26:	e6d8      	b.n	c8da <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    cb28:	2002      	movs	r0, #2
    cb2a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    cb2e:	e7de      	b.n	caee <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    cb30:	2103      	movs	r1, #3
    cb32:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb36:	f003 0378 	and.w	r3, r3, #120	; 0x78
    cb3a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    cb3e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb42:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    cb44:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cb48:	4143      	adcs	r3, r0
    cb4a:	e7e3      	b.n	cb14 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    cb4c:	2103      	movs	r1, #3
    cb4e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    cb52:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    cb56:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    cb5a:	bf14      	ite	ne
    cb5c:	2301      	movne	r3, #1
    cb5e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    cb60:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    cb64:	e7d6      	b.n	cb14 <cbvprintf+0x378>
		conv->invalid = true;
    cb66:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    cb6a:	f043 0301 	orr.w	r3, r3, #1
    cb6e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    cb72:	2300      	movs	r3, #0
    cb74:	e7ce      	b.n	cb14 <cbvprintf+0x378>
		} else if (conv->width_present) {
    cb76:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    cb7a:	2a00      	cmp	r2, #0
		int width = -1;
    cb7c:	bfac      	ite	ge
    cb7e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    cb82:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    cb86:	e6ba      	b.n	c8fe <cbvprintf+0x162>
		} else if (conv->prec_present) {
    cb88:	079b      	lsls	r3, r3, #30
    cb8a:	f57f aec7 	bpl.w	c91c <cbvprintf+0x180>
			precision = conv->prec_value;
    cb8e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    cb92:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    cb94:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    cb98:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    cb9c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    cba0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    cba4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    cba6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    cbaa:	d136      	bne.n	cc1a <cbvprintf+0x47e>
			switch (length_mod) {
    cbac:	1ed3      	subs	r3, r2, #3
    cbae:	2b04      	cmp	r3, #4
    cbb0:	d820      	bhi.n	cbf4 <cbvprintf+0x458>
    cbb2:	e8df f003 	tbb	[pc, r3]
    cbb6:	0703      	.short	0x0703
    cbb8:	1f07      	.short	0x1f07
    cbba:	1f          	.byte	0x1f
    cbbb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    cbbc:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    cbc0:	17c1      	asrs	r1, r0, #31
    cbc2:	e004      	b.n	cbce <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    cbc4:	3407      	adds	r4, #7
    cbc6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    cbca:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    cbce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    cbd2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    cbd6:	f013 0603 	ands.w	r6, r3, #3
    cbda:	d054      	beq.n	cc86 <cbvprintf+0x4ea>
			OUTS(sp, fp);
    cbdc:	463b      	mov	r3, r7
    cbde:	4652      	mov	r2, sl
    cbe0:	4659      	mov	r1, fp
    cbe2:	9802      	ldr	r0, [sp, #8]
    cbe4:	f008 f873 	bl	14cce <outs>
    cbe8:	2800      	cmp	r0, #0
    cbea:	f2c0 8143 	blt.w	ce74 <cbvprintf+0x6d8>
    cbee:	4405      	add	r5, r0
			continue;
    cbf0:	46ba      	mov	sl, r7
    cbf2:	e5db      	b.n	c7ac <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cbf4:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    cbf8:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cbfa:	ea4f 71e0 	mov.w	r1, r0, asr #31
    cbfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    cc02:	d105      	bne.n	cc10 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    cc04:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    cc08:	930a      	str	r3, [sp, #40]	; 0x28
    cc0a:	2300      	movs	r3, #0
    cc0c:	930b      	str	r3, [sp, #44]	; 0x2c
    cc0e:	e7e0      	b.n	cbd2 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    cc10:	2a02      	cmp	r2, #2
    cc12:	d1de      	bne.n	cbd2 <cbvprintf+0x436>
				value->sint = (short)value->sint;
    cc14:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    cc18:	e7d2      	b.n	cbc0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    cc1a:	2b02      	cmp	r3, #2
    cc1c:	d123      	bne.n	cc66 <cbvprintf+0x4ca>
			switch (length_mod) {
    cc1e:	1ed3      	subs	r3, r2, #3
    cc20:	2b04      	cmp	r3, #4
    cc22:	d813      	bhi.n	cc4c <cbvprintf+0x4b0>
    cc24:	e8df f003 	tbb	[pc, r3]
    cc28:	120a0a03 	.word	0x120a0a03
    cc2c:	12          	.byte	0x12
    cc2d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    cc2e:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
    cc30:	6820      	ldr	r0, [r4, #0]
    cc32:	1d23      	adds	r3, r4, #4
    cc34:	900a      	str	r0, [sp, #40]	; 0x28
    cc36:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    cc38:	461c      	mov	r4, r3
    cc3a:	e7ca      	b.n	cbd2 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    cc3c:	3407      	adds	r4, #7
    cc3e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    cc42:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    cc46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    cc4a:	e7f5      	b.n	cc38 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    cc4c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    cc50:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    cc52:	930a      	str	r3, [sp, #40]	; 0x28
    cc54:	f04f 0300 	mov.w	r3, #0
    cc58:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    cc5a:	d0d3      	beq.n	cc04 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    cc5c:	2a02      	cmp	r2, #2
    cc5e:	d1b8      	bne.n	cbd2 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    cc60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    cc64:	e7d0      	b.n	cc08 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    cc66:	2b04      	cmp	r3, #4
    cc68:	d107      	bne.n	cc7a <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    cc6a:	3407      	adds	r4, #7
    cc6c:	f024 0407 	bic.w	r4, r4, #7
    cc70:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    cc74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    cc78:	e7ab      	b.n	cbd2 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    cc7a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    cc7c:	bf04      	itt	eq
    cc7e:	f854 3b04 	ldreq.w	r3, [r4], #4
    cc82:	930a      	streq	r3, [sp, #40]	; 0x28
    cc84:	e7a5      	b.n	cbd2 <cbvprintf+0x436>
		switch (conv->specifier) {
    cc86:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    cc8a:	2878      	cmp	r0, #120	; 0x78
    cc8c:	d8b0      	bhi.n	cbf0 <cbvprintf+0x454>
    cc8e:	2862      	cmp	r0, #98	; 0x62
    cc90:	d822      	bhi.n	ccd8 <cbvprintf+0x53c>
    cc92:	2825      	cmp	r0, #37	; 0x25
    cc94:	f43f ad93 	beq.w	c7be <cbvprintf+0x22>
    cc98:	2858      	cmp	r0, #88	; 0x58
    cc9a:	d1a9      	bne.n	cbf0 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    cc9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    cca0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    cca4:	9300      	str	r3, [sp, #0]
    cca6:	aa0c      	add	r2, sp, #48	; 0x30
    cca8:	ab04      	add	r3, sp, #16
    ccaa:	f007 ffc5 	bl	14c38 <encode_uint>
    ccae:	4682      	mov	sl, r0
			if (precision >= 0) {
    ccb0:	f1b8 0f00 	cmp.w	r8, #0
    ccb4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    ccb8:	db0c      	blt.n	ccd4 <cbvprintf+0x538>
				conv->flag_zero = false;
    ccba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    ccbe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    ccc2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ccc6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    ccc8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    cccc:	d902      	bls.n	ccd4 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    ccce:	eba8 0303 	sub.w	r3, r8, r3
    ccd2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    ccd4:	4680      	mov	r8, r0
    ccd6:	e03d      	b.n	cd54 <cbvprintf+0x5b8>
    ccd8:	3863      	subs	r0, #99	; 0x63
    ccda:	2815      	cmp	r0, #21
    ccdc:	d888      	bhi.n	cbf0 <cbvprintf+0x454>
    ccde:	a101      	add	r1, pc, #4	; (adr r1, cce4 <cbvprintf+0x548>)
    cce0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    cce4:	0000cd65 	.word	0x0000cd65
    cce8:	0000cdc9 	.word	0x0000cdc9
    ccec:	0000cbf1 	.word	0x0000cbf1
    ccf0:	0000cbf1 	.word	0x0000cbf1
    ccf4:	0000cbf1 	.word	0x0000cbf1
    ccf8:	0000cbf1 	.word	0x0000cbf1
    ccfc:	0000cdc9 	.word	0x0000cdc9
    cd00:	0000cbf1 	.word	0x0000cbf1
    cd04:	0000cbf1 	.word	0x0000cbf1
    cd08:	0000cbf1 	.word	0x0000cbf1
    cd0c:	0000cbf1 	.word	0x0000cbf1
    cd10:	0000ce27 	.word	0x0000ce27
    cd14:	0000cdf5 	.word	0x0000cdf5
    cd18:	0000cdf9 	.word	0x0000cdf9
    cd1c:	0000cbf1 	.word	0x0000cbf1
    cd20:	0000cbf1 	.word	0x0000cbf1
    cd24:	0000cd3d 	.word	0x0000cd3d
    cd28:	0000cbf1 	.word	0x0000cbf1
    cd2c:	0000cdf5 	.word	0x0000cdf5
    cd30:	0000cbf1 	.word	0x0000cbf1
    cd34:	0000cbf1 	.word	0x0000cbf1
    cd38:	0000cdf5 	.word	0x0000cdf5
			if (precision >= 0) {
    cd3c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    cd40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    cd44:	db0a      	blt.n	cd5c <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    cd46:	4641      	mov	r1, r8
    cd48:	4650      	mov	r0, sl
    cd4a:	f008 f884 	bl	14e56 <strnlen>
		char sign = 0;
    cd4e:	2600      	movs	r6, #0
			bpe = bps + len;
    cd50:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    cd54:	f1ba 0f00 	cmp.w	sl, #0
    cd58:	d10c      	bne.n	cd74 <cbvprintf+0x5d8>
    cd5a:	e749      	b.n	cbf0 <cbvprintf+0x454>
				len = strlen(bps);
    cd5c:	4650      	mov	r0, sl
    cd5e:	f008 f873 	bl	14e48 <strlen>
    cd62:	e7f4      	b.n	cd4e <cbvprintf+0x5b2>
			break;
    cd64:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    cd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    cd68:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    cd6c:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    cd70:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    cd74:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    cd78:	b106      	cbz	r6, cd7c <cbvprintf+0x5e0>
			nj_len += 1U;
    cd7a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    cd7c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    cd80:	06d0      	lsls	r0, r2, #27
    cd82:	d56b      	bpl.n	ce5c <cbvprintf+0x6c0>
			nj_len += 2U;
    cd84:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    cd86:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    cd88:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    cd8a:	bf48      	it	mi
    cd8c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    cd8e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    cd90:	bf48      	it	mi
    cd92:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    cd94:	f1b9 0f00 	cmp.w	r9, #0
    cd98:	dd79      	ble.n	ce8e <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    cd9a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    cd9e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    cda2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    cda6:	9303      	str	r3, [sp, #12]
    cda8:	0753      	lsls	r3, r2, #29
    cdaa:	d470      	bmi.n	ce8e <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    cdac:	0650      	lsls	r0, r2, #25
    cdae:	d564      	bpl.n	ce7a <cbvprintf+0x6de>
					if (sign != 0) {
    cdb0:	b146      	cbz	r6, cdc4 <cbvprintf+0x628>
						OUTC(sign);
    cdb2:	4659      	mov	r1, fp
    cdb4:	4630      	mov	r0, r6
    cdb6:	9b02      	ldr	r3, [sp, #8]
    cdb8:	4798      	blx	r3
    cdba:	2800      	cmp	r0, #0
    cdbc:	db5a      	blt.n	ce74 <cbvprintf+0x6d8>
						sign = 0;
    cdbe:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    cdc0:	3501      	adds	r5, #1
						sign = 0;
    cdc2:	461e      	mov	r6, r3
					pad = '0';
    cdc4:	2330      	movs	r3, #48	; 0x30
    cdc6:	e059      	b.n	ce7c <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    cdc8:	071e      	lsls	r6, r3, #28
    cdca:	d411      	bmi.n	cdf0 <cbvprintf+0x654>
				sign = ' ';
    cdcc:	f013 0610 	ands.w	r6, r3, #16
    cdd0:	bf18      	it	ne
    cdd2:	2620      	movne	r6, #32
			sint = value->sint;
    cdd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    cdd8:	2a00      	cmp	r2, #0
    cdda:	f173 0100 	sbcs.w	r1, r3, #0
    cdde:	f6bf af5d 	bge.w	cc9c <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    cde2:	4252      	negs	r2, r2
    cde4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    cde8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    cdea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    cdee:	e755      	b.n	cc9c <cbvprintf+0x500>
				sign = '+';
    cdf0:	262b      	movs	r6, #43	; 0x2b
    cdf2:	e7ef      	b.n	cdd4 <cbvprintf+0x638>
		switch (conv->specifier) {
    cdf4:	2600      	movs	r6, #0
    cdf6:	e751      	b.n	cc9c <cbvprintf+0x500>
			if (value->ptr != NULL) {
    cdf8:	980a      	ldr	r0, [sp, #40]	; 0x28
    cdfa:	b348      	cbz	r0, ce50 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    cdfc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ce00:	9300      	str	r3, [sp, #0]
    ce02:	2100      	movs	r1, #0
    ce04:	ab04      	add	r3, sp, #16
    ce06:	aa0c      	add	r2, sp, #48	; 0x30
    ce08:	f007 ff16 	bl	14c38 <encode_uint>
				conv->altform_0c = true;
    ce0c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ce10:	4682      	mov	sl, r0
				conv->altform_0c = true;
    ce12:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ce16:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ce1a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ce1e:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ce20:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ce24:	e744      	b.n	ccb0 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    ce26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    ce28:	2a07      	cmp	r2, #7
    ce2a:	f63f aee1 	bhi.w	cbf0 <cbvprintf+0x454>
    ce2e:	e8df f002 	tbb	[pc, r2]
    ce32:	040d      	.short	0x040d
    ce34:	08080d06 	.word	0x08080d06
    ce38:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    ce3a:	701d      	strb	r5, [r3, #0]
		break;
    ce3c:	e6d8      	b.n	cbf0 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    ce3e:	801d      	strh	r5, [r3, #0]
		break;
    ce40:	e6d6      	b.n	cbf0 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    ce42:	4628      	mov	r0, r5
    ce44:	17e9      	asrs	r1, r5, #31
    ce46:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    ce4a:	e6d1      	b.n	cbf0 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ce4c:	601d      	str	r5, [r3, #0]
		break;
    ce4e:	e6cf      	b.n	cbf0 <cbvprintf+0x454>
			bpe = bps + 5;
    ce50:	f8df 80c4 	ldr.w	r8, [pc, #196]	; cf18 <cbvprintf+0x77c>
    ce54:	4606      	mov	r6, r0
			bps = "(nil)";
    ce56:	f1a8 0a05 	sub.w	sl, r8, #5
    ce5a:	e78b      	b.n	cd74 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    ce5c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    ce5e:	bf48      	it	mi
    ce60:	3301      	addmi	r3, #1
    ce62:	e790      	b.n	cd86 <cbvprintf+0x5ea>
					OUTC(pad);
    ce64:	4618      	mov	r0, r3
    ce66:	9303      	str	r3, [sp, #12]
    ce68:	4659      	mov	r1, fp
    ce6a:	9b02      	ldr	r3, [sp, #8]
    ce6c:	4798      	blx	r3
    ce6e:	2800      	cmp	r0, #0
    ce70:	9b03      	ldr	r3, [sp, #12]
    ce72:	da04      	bge.n	ce7e <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    ce74:	b011      	add	sp, #68	; 0x44
    ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ce7a:	2320      	movs	r3, #32
    ce7c:	444d      	add	r5, r9
    ce7e:	464a      	mov	r2, r9
				while (width-- > 0) {
    ce80:	2a00      	cmp	r2, #0
    ce82:	eba5 0109 	sub.w	r1, r5, r9
    ce86:	f109 39ff 	add.w	r9, r9, #4294967295
    ce8a:	dceb      	bgt.n	ce64 <cbvprintf+0x6c8>
    ce8c:	460d      	mov	r5, r1
		if (sign != 0) {
    ce8e:	b136      	cbz	r6, ce9e <cbvprintf+0x702>
			OUTC(sign);
    ce90:	4659      	mov	r1, fp
    ce92:	4630      	mov	r0, r6
    ce94:	9b02      	ldr	r3, [sp, #8]
    ce96:	4798      	blx	r3
    ce98:	2800      	cmp	r0, #0
    ce9a:	dbeb      	blt.n	ce74 <cbvprintf+0x6d8>
    ce9c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ce9e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    cea2:	06d9      	lsls	r1, r3, #27
    cea4:	d401      	bmi.n	ceaa <cbvprintf+0x70e>
    cea6:	071a      	lsls	r2, r3, #28
    cea8:	d506      	bpl.n	ceb8 <cbvprintf+0x71c>
				OUTC('0');
    ceaa:	4659      	mov	r1, fp
    ceac:	2030      	movs	r0, #48	; 0x30
    ceae:	9b02      	ldr	r3, [sp, #8]
    ceb0:	4798      	blx	r3
    ceb2:	2800      	cmp	r0, #0
    ceb4:	dbde      	blt.n	ce74 <cbvprintf+0x6d8>
    ceb6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ceb8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    cebc:	06db      	lsls	r3, r3, #27
    cebe:	d507      	bpl.n	ced0 <cbvprintf+0x734>
				OUTC(conv->specifier);
    cec0:	4659      	mov	r1, fp
    cec2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    cec6:	9b02      	ldr	r3, [sp, #8]
    cec8:	4798      	blx	r3
    ceca:	2800      	cmp	r0, #0
    cecc:	dbd2      	blt.n	ce74 <cbvprintf+0x6d8>
    cece:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ced0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    ced2:	442e      	add	r6, r5
    ced4:	1b73      	subs	r3, r6, r5
    ced6:	2b00      	cmp	r3, #0
    ced8:	dc16      	bgt.n	cf08 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    ceda:	4643      	mov	r3, r8
    cedc:	4652      	mov	r2, sl
    cede:	4659      	mov	r1, fp
    cee0:	9802      	ldr	r0, [sp, #8]
    cee2:	f007 fef4 	bl	14cce <outs>
    cee6:	2800      	cmp	r0, #0
    cee8:	dbc4      	blt.n	ce74 <cbvprintf+0x6d8>
    ceea:	4405      	add	r5, r0
		while (width > 0) {
    ceec:	44a9      	add	r9, r5
    ceee:	eba9 0305 	sub.w	r3, r9, r5
    cef2:	2b00      	cmp	r3, #0
    cef4:	f77f ae7c 	ble.w	cbf0 <cbvprintf+0x454>
			OUTC(' ');
    cef8:	4659      	mov	r1, fp
    cefa:	2020      	movs	r0, #32
    cefc:	9b02      	ldr	r3, [sp, #8]
    cefe:	4798      	blx	r3
    cf00:	2800      	cmp	r0, #0
    cf02:	dbb7      	blt.n	ce74 <cbvprintf+0x6d8>
    cf04:	3501      	adds	r5, #1
			--width;
    cf06:	e7f2      	b.n	ceee <cbvprintf+0x752>
				OUTC('0');
    cf08:	4659      	mov	r1, fp
    cf0a:	2030      	movs	r0, #48	; 0x30
    cf0c:	9b02      	ldr	r3, [sp, #8]
    cf0e:	4798      	blx	r3
    cf10:	2800      	cmp	r0, #0
    cf12:	dbaf      	blt.n	ce74 <cbvprintf+0x6d8>
    cf14:	3501      	adds	r5, #1
    cf16:	e7dd      	b.n	ced4 <cbvprintf+0x738>
    cf18:	00015b11 	.word	0x00015b11

0000cf1c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    cf1c:	4604      	mov	r4, r0
    cf1e:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    cf20:	f04f 0220 	mov.w	r2, #32
    cf24:	f3ef 8311 	mrs	r3, BASEPRI
    cf28:	f382 8812 	msr	BASEPRI_MAX, r2
    cf2c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();
    cf30:	f002 f9ea 	bl	f308 <sys_clock_disable>

	sys_arch_reboot(type);
    cf34:	4620      	mov	r0, r4
    cf36:	f001 f91d 	bl	e174 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    cf3a:	4803      	ldr	r0, [pc, #12]	; (cf48 <sys_reboot+0x2c>)
    cf3c:	f007 fe52 	bl	14be4 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    cf40:	f000 fcea 	bl	d918 <arch_cpu_idle>
    cf44:	e7fc      	b.n	cf40 <sys_reboot+0x24>
    cf46:	bf00      	nop
    cf48:	00015b12 	.word	0x00015b12

0000cf4c <nordicsemi_nrf91_init>:
    cf4c:	f04f 0220 	mov.w	r2, #32
    cf50:	f3ef 8311 	mrs	r3, BASEPRI
    cf54:	f382 8812 	msr	BASEPRI_MAX, r2
    cf58:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    cf5c:	2101      	movs	r1, #1
    cf5e:	4a04      	ldr	r2, [pc, #16]	; (cf70 <nordicsemi_nrf91_init+0x24>)
    cf60:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cf64:	f383 8811 	msr	BASEPRI, r3
    cf68:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    cf6c:	2000      	movs	r0, #0
    cf6e:	4770      	bx	lr
    cf70:	50039000 	.word	0x50039000

0000cf74 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    cf74:	b120      	cbz	r0, cf80 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    cf76:	4b03      	ldr	r3, [pc, #12]	; (cf84 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    cf78:	0180      	lsls	r0, r0, #6
    cf7a:	f043 0301 	orr.w	r3, r3, #1
    cf7e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    cf80:	4770      	bx	lr
    cf82:	bf00      	nop
    cf84:	00015710 	.word	0x00015710

0000cf88 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    cf88:	b084      	sub	sp, #16
    cf8a:	ab04      	add	r3, sp, #16
    cf8c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    cf90:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cf94:	2b06      	cmp	r3, #6
    cf96:	d107      	bne.n	cfa8 <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    cf98:	2201      	movs	r2, #1
    cf9a:	4b04      	ldr	r3, [pc, #16]	; (cfac <pm_power_state_set+0x24>)
    cf9c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cfa0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    cfa4:	bf20      	wfe
    while (true)
    cfa6:	e7fd      	b.n	cfa4 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    cfa8:	b004      	add	sp, #16
    cfaa:	4770      	bx	lr
    cfac:	50004000 	.word	0x50004000

0000cfb0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    cfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cfb4:	4605      	mov	r5, r0
	__asm__ volatile(
    cfb6:	f04f 0320 	mov.w	r3, #32
    cfba:	f3ef 8611 	mrs	r6, BASEPRI
    cfbe:	f383 8812 	msr	BASEPRI_MAX, r3
    cfc2:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cfc6:	481e      	ldr	r0, [pc, #120]	; (d040 <pm_state_notify+0x90>)
    cfc8:	f003 fba8 	bl	1071c <z_spin_lock_valid>
    cfcc:	b940      	cbnz	r0, cfe0 <pm_state_notify+0x30>
    cfce:	491d      	ldr	r1, [pc, #116]	; (d044 <pm_state_notify+0x94>)
    cfd0:	481d      	ldr	r0, [pc, #116]	; (d048 <pm_state_notify+0x98>)
    cfd2:	2281      	movs	r2, #129	; 0x81
    cfd4:	f007 fe06 	bl	14be4 <printk>
    cfd8:	2181      	movs	r1, #129	; 0x81
    cfda:	481a      	ldr	r0, [pc, #104]	; (d044 <pm_state_notify+0x94>)
    cfdc:	f007 fe8d 	bl	14cfa <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    cfe0:	4817      	ldr	r0, [pc, #92]	; (d040 <pm_state_notify+0x90>)
    cfe2:	f003 fbb7 	bl	10754 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    cfe6:	4b19      	ldr	r3, [pc, #100]	; (d04c <pm_state_notify+0x9c>)
    cfe8:	681c      	ldr	r4, [r3, #0]
    cfea:	2c00      	cmp	r4, #0
    cfec:	bf38      	it	cc
    cfee:	2400      	movcc	r4, #0
    cff0:	b19c      	cbz	r4, d01a <pm_state_notify+0x6a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    cff2:	f04f 090c 	mov.w	r9, #12
    cff6:	4f16      	ldr	r7, [pc, #88]	; (d050 <pm_state_notify+0xa0>)
    cff8:	f8df 8058 	ldr.w	r8, [pc, #88]	; d054 <pm_state_notify+0xa4>
			callback = notifier->state_exit;
    cffc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    d000:	2d00      	cmp	r5, #0
    d002:	bf08      	it	eq
    d004:	4613      	moveq	r3, r2
		if (callback) {
    d006:	b12b      	cbz	r3, d014 <pm_state_notify+0x64>
			callback(z_power_states[_current_cpu->id].state);
    d008:	f898 2014 	ldrb.w	r2, [r8, #20]
    d00c:	fb09 f202 	mul.w	r2, r9, r2
    d010:	5cb8      	ldrb	r0, [r7, r2]
    d012:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d014:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    d016:	2c00      	cmp	r4, #0
    d018:	d1f0      	bne.n	cffc <pm_state_notify+0x4c>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d01a:	4809      	ldr	r0, [pc, #36]	; (d040 <pm_state_notify+0x90>)
    d01c:	f003 fb8c 	bl	10738 <z_spin_unlock_valid>
    d020:	b940      	cbnz	r0, d034 <pm_state_notify+0x84>
    d022:	4908      	ldr	r1, [pc, #32]	; (d044 <pm_state_notify+0x94>)
    d024:	4808      	ldr	r0, [pc, #32]	; (d048 <pm_state_notify+0x98>)
    d026:	22ac      	movs	r2, #172	; 0xac
    d028:	f007 fddc 	bl	14be4 <printk>
    d02c:	21ac      	movs	r1, #172	; 0xac
    d02e:	4805      	ldr	r0, [pc, #20]	; (d044 <pm_state_notify+0x94>)
    d030:	f007 fe63 	bl	14cfa <assert_post_action>
	__asm__ volatile(
    d034:	f386 8811 	msr	BASEPRI, r6
    d038:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    d03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d040:	20000268 	.word	0x20000268
    d044:	00015b3f 	.word	0x00015b3f
    d048:	00015b65 	.word	0x00015b65
    d04c:	2000026c 	.word	0x2000026c
    d050:	20000278 	.word	0x20000278
    d054:	20000a2c 	.word	0x20000a2c

0000d058 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d058:	2201      	movs	r2, #1
    d05a:	f000 031f 	and.w	r3, r0, #31
    d05e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d060:	4b08      	ldr	r3, [pc, #32]	; (d084 <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d062:	0940      	lsrs	r0, r0, #5
    d064:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    d068:	e8d0 3fef 	ldaex	r3, [r0]
    d06c:	ea43 0102 	orr.w	r1, r3, r2
    d070:	e8c0 1fec 	stlex	ip, r1, [r0]
    d074:	f1bc 0f00 	cmp.w	ip, #0
    d078:	d1f6      	bne.n	d068 <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
    d07a:	421a      	tst	r2, r3
}
    d07c:	bf14      	ite	ne
    d07e:	2001      	movne	r0, #1
    d080:	2000      	moveq	r0, #0
    d082:	4770      	bx	lr
    d084:	20000284 	.word	0x20000284

0000d088 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
    d088:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    d08a:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    d08c:	4b1a      	ldr	r3, [pc, #104]	; (d0f8 <pm_system_resume+0x70>)
{
    d08e:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
    d090:	7d1d      	ldrb	r5, [r3, #20]
    d092:	f005 031f 	and.w	r3, r5, #31
    d096:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d098:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d09a:	4b18      	ldr	r3, [pc, #96]	; (d0fc <pm_system_resume+0x74>)
    d09c:	0969      	lsrs	r1, r5, #5
    d09e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d0a2:	e8d3 1fef 	ldaex	r1, [r3]
    d0a6:	ea01 0400 	and.w	r4, r1, r0
    d0aa:	e8c3 4fec 	stlex	ip, r4, [r3]
    d0ae:	f1bc 0f00 	cmp.w	ip, #0
    d0b2:	d1f6      	bne.n	d0a2 <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    d0b4:	4211      	tst	r1, r2
    d0b6:	d017      	beq.n	d0e8 <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
    d0b8:	220c      	movs	r2, #12
    d0ba:	4c11      	ldr	r4, [pc, #68]	; (d100 <pm_system_resume+0x78>)
    d0bc:	ab01      	add	r3, sp, #4
    d0be:	fb02 4205 	mla	r2, r2, r5, r4
    d0c2:	ca07      	ldmia	r2, {r0, r1, r2}
    d0c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    d0c8:	4a0e      	ldr	r2, [pc, #56]	; (d104 <pm_system_resume+0x7c>)
    d0ca:	b17a      	cbz	r2, d0ec <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
    d0cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d0d0:	f007 fe1b 	bl	14d0a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    d0d4:	2000      	movs	r0, #0
    d0d6:	f7ff ff6b 	bl	cfb0 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    d0da:	230c      	movs	r3, #12
    d0dc:	2200      	movs	r2, #0
    d0de:	436b      	muls	r3, r5
    d0e0:	18e1      	adds	r1, r4, r3
    d0e2:	50e2      	str	r2, [r4, r3]
    d0e4:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    d0e8:	b005      	add	sp, #20
    d0ea:	bd30      	pop	{r4, r5, pc}
    d0ec:	f382 8811 	msr	BASEPRI, r2
    d0f0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    d0f4:	e7ee      	b.n	d0d4 <pm_system_resume+0x4c>
    d0f6:	bf00      	nop
    d0f8:	20000a2c 	.word	0x20000a2c
    d0fc:	20000274 	.word	0x20000274
    d100:	20000278 	.word	0x20000278
    d104:	00014d0b 	.word	0x00014d0b

0000d108 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    d108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    d10c:	4b33      	ldr	r3, [pc, #204]	; (d1dc <pm_system_suspend+0xd4>)
{
    d10e:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
    d110:	7d1c      	ldrb	r4, [r3, #20]
{
    d112:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    d114:	4620      	mov	r0, r4
    d116:	f7ff ff9f 	bl	d058 <atomic_test_and_set_bit.constprop.0>
    d11a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; d1f4 <pm_system_suspend+0xec>
    d11e:	b960      	cbnz	r0, d13a <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    d120:	250c      	movs	r5, #12
    d122:	466e      	mov	r6, sp
    d124:	fb05 8504 	mla	r5, r5, r4, r8
    d128:	463a      	mov	r2, r7
    d12a:	4621      	mov	r1, r4
    d12c:	4630      	mov	r0, r6
    d12e:	f007 fe04 	bl	14d3a <pm_policy_next_state>
    d132:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d136:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    d13a:	230c      	movs	r3, #12
    d13c:	4363      	muls	r3, r4
    d13e:	f818 0003 	ldrb.w	r0, [r8, r3]
    d142:	eb08 0203 	add.w	r2, r8, r3
    d146:	0965      	lsrs	r5, r4, #5
    d148:	f004 061f 	and.w	r6, r4, #31
    d14c:	b3a8      	cbz	r0, d1ba <pm_system_suspend+0xb2>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    d14e:	1c7b      	adds	r3, r7, #1
    d150:	d00f      	beq.n	d172 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    d152:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    d156:	2100      	movs	r1, #0
    d158:	f8d2 e008 	ldr.w	lr, [r2, #8]
    d15c:	4820      	ldr	r0, [pc, #128]	; (d1e0 <pm_system_suspend+0xd8>)
    d15e:	2300      	movs	r3, #0
    d160:	fbec 010e 	umlal	r0, r1, ip, lr
    d164:	4a1f      	ldr	r2, [pc, #124]	; (d1e4 <pm_system_suspend+0xdc>)
    d166:	f7ff f969 	bl	c43c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    d16a:	2101      	movs	r1, #1
    d16c:	1a38      	subs	r0, r7, r0
    d16e:	f004 fe25 	bl	11dbc <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    d172:	f003 fdd3 	bl	10d1c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    d176:	2001      	movs	r0, #1
    d178:	f7ff ff1a 	bl	cfb0 <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d17c:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d17e:	4b1a      	ldr	r3, [pc, #104]	; (d1e8 <pm_system_suspend+0xe0>)
    d180:	40b2      	lsls	r2, r6
    d182:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    d186:	e8d3 1fef 	ldaex	r1, [r3]
    d18a:	4311      	orrs	r1, r2
    d18c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d190:	2800      	cmp	r0, #0
    d192:	d1f8      	bne.n	d186 <pm_system_suspend+0x7e>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    d194:	230c      	movs	r3, #12
    d196:	fb03 8404 	mla	r4, r3, r4, r8
    d19a:	ab05      	add	r3, sp, #20
    d19c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    d1a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    d1a4:	4a11      	ldr	r2, [pc, #68]	; (d1ec <pm_system_suspend+0xe4>)
    d1a6:	b11a      	cbz	r2, d1b0 <pm_system_suspend+0xa8>
		pm_power_state_set(info);
    d1a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d1ac:	f7ff feec 	bl	cf88 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    d1b0:	f7ff ff6a 	bl	d088 <pm_system_resume>
	k_sched_unlock();
    d1b4:	f004 f9e8 	bl	11588 <k_sched_unlock>
	bool ret = true;
    d1b8:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    d1ba:	2301      	movs	r3, #1
    d1bc:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d1be:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d1c0:	4a0b      	ldr	r2, [pc, #44]	; (d1f0 <pm_system_suspend+0xe8>)
    d1c2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    d1c6:	e8d5 2fef 	ldaex	r2, [r5]
    d1ca:	401a      	ands	r2, r3
    d1cc:	e8c5 2fe1 	stlex	r1, r2, [r5]
    d1d0:	2900      	cmp	r1, #0
    d1d2:	d1f8      	bne.n	d1c6 <pm_system_suspend+0xbe>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    d1d4:	b008      	add	sp, #32
    d1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1da:	bf00      	nop
    d1dc:	20000a2c 	.word	0x20000a2c
    d1e0:	000f423f 	.word	0x000f423f
    d1e4:	000f4240 	.word	0x000f4240
    d1e8:	20000274 	.word	0x20000274
    d1ec:	0000cf89 	.word	0x0000cf89
    d1f0:	20000284 	.word	0x20000284
    d1f4:	20000278 	.word	0x20000278

0000d1f8 <adp536x_reg_read>:


static const struct device *i2c_dev;

static int adp536x_reg_read(uint8_t reg, uint8_t *buff)
{
    d1f8:	4603      	mov	r3, r0
    d1fa:	b510      	push	{r4, lr}
    d1fc:	b088      	sub	sp, #32
    d1fe:	f88d 3007 	strb.w	r3, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    d202:	f10d 0307 	add.w	r3, sp, #7
    d206:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    d208:	2301      	movs	r3, #1
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
    d20a:	4a09      	ldr	r2, [pc, #36]	; (d230 <adp536x_reg_read+0x38>)
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
    d20c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    d210:	6810      	ldr	r0, [r2, #0]
	msg[0].len = num_write;
    d212:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    d214:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    d216:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    d218:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    d21c:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    d220:	6883      	ldr	r3, [r0, #8]
    d222:	2202      	movs	r2, #2
    d224:	689c      	ldr	r4, [r3, #8]
    d226:	a902      	add	r1, sp, #8
    d228:	2346      	movs	r3, #70	; 0x46
    d22a:	47a0      	blx	r4
}
    d22c:	b008      	add	sp, #32
    d22e:	bd10      	pop	{r4, pc}
    d230:	20000288 	.word	0x20000288

0000d234 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(uint8_t reg_addr,
			       uint32_t mask,
			       uint8_t data)
{
    d234:	b570      	push	{r4, r5, r6, lr}
    d236:	b086      	sub	sp, #24
    d238:	460e      	mov	r6, r1
	int err;
	uint8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
    d23a:	f10d 0107 	add.w	r1, sp, #7
{
    d23e:	4605      	mov	r5, r0
    d240:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
    d242:	f7ff ffd9 	bl	d1f8 <adp536x_reg_read>
	if (err) {
    d246:	b9c0      	cbnz	r0, d27a <adp536x_reg_write_mask+0x46>
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    d248:	4b0d      	ldr	r3, [pc, #52]	; (d280 <adp536x_reg_write_mask+0x4c>)
		return err;
	}

	tmp &= ~mask;
    d24a:	f89d 2007 	ldrb.w	r2, [sp, #7]
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
    d24e:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
    d250:	ab02      	add	r3, sp, #8
    d252:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
    d254:	2302      	movs	r3, #2
	tmp &= ~mask;
    d256:	ea22 0206 	bic.w	r2, r2, r6
	tmp |= data;
    d25a:	4322      	orrs	r2, r4
    d25c:	f88d 2007 	strb.w	r2, [sp, #7]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    d260:	f88d 5008 	strb.w	r5, [sp, #8]
    d264:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
    d268:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    d26a:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    d26e:	6883      	ldr	r3, [r0, #8]
    d270:	2201      	movs	r2, #1
    d272:	689c      	ldr	r4, [r3, #8]
    d274:	a903      	add	r1, sp, #12
    d276:	2346      	movs	r3, #70	; 0x46
    d278:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
    d27a:	b006      	add	sp, #24
    d27c:	bd70      	pop	{r4, r5, r6, pc}
    d27e:	bf00      	nop
    d280:	20000288 	.word	0x20000288

0000d284 <adp536x_init>:

	return 0;
}

int adp536x_init(const char *dev_name)
{
    d284:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d286:	f002 ff43 	bl	10110 <z_impl_device_get_binding>
	i2c_dev = device_get_binding(dev_name);
    d28a:	4b04      	ldr	r3, [pc, #16]	; (d29c <adp536x_init+0x18>)
	if (i2c_dev == NULL) {
    d28c:	2800      	cmp	r0, #0
	i2c_dev = device_get_binding(dev_name);
    d28e:	6018      	str	r0, [r3, #0]
		return -ENODEV;
	}

	return 0;
}
    d290:	bf0c      	ite	eq
    d292:	f06f 0012 	mvneq.w	r0, #18
    d296:	2000      	movne	r0, #0
    d298:	bd08      	pop	{r3, pc}
    d29a:	bf00      	nop
    d29c:	20000288 	.word	0x20000288

0000d2a0 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    d2a0:	2800      	cmp	r0, #0
    d2a2:	db0d      	blt.n	d2c0 <__NVIC_DisableIRQ+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d2a4:	2201      	movs	r2, #1
    d2a6:	0943      	lsrs	r3, r0, #5
    d2a8:	f000 001f 	and.w	r0, r0, #31
    d2ac:	fa02 f000 	lsl.w	r0, r2, r0
    d2b0:	4a04      	ldr	r2, [pc, #16]	; (d2c4 <__NVIC_DisableIRQ+0x24>)
    d2b2:	3320      	adds	r3, #32
    d2b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    d2b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d2bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    d2c0:	4770      	bx	lr
    d2c2:	bf00      	nop
    d2c4:	e000e100 	.word	0xe000e100

0000d2c8 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    d2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    d2ca:	2800      	cmp	r0, #0
{
    d2cc:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    d2ce:	bf14      	ite	ne
    d2d0:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    d2d4:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
    d2d8:	428a      	cmp	r2, r1
    d2da:	d20b      	bcs.n	d2f4 <config_regions+0x2c>
    d2dc:	2294      	movs	r2, #148	; 0x94
    d2de:	4927      	ldr	r1, [pc, #156]	; (d37c <config_regions+0xb4>)
    d2e0:	4827      	ldr	r0, [pc, #156]	; (d380 <config_regions+0xb8>)
    d2e2:	f007 fc7f 	bl	14be4 <printk>
    d2e6:	2194      	movs	r1, #148	; 0x94
    d2e8:	4824      	ldr	r0, [pc, #144]	; (d37c <config_regions+0xb4>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    d2ea:	b003      	add	sp, #12
    d2ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    d2f0:	f007 bd03 	b.w	14cfa <assert_post_action>
	if (end <= start) {
    d2f4:	d040      	beq.n	d378 <config_regions+0xb0>
    d2f6:	460d      	mov	r5, r1
    d2f8:	4e22      	ldr	r6, [pc, #136]	; (d384 <config_regions+0xbc>)
		if (ram) {
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d039      	beq.n	d372 <config_regions+0xaa>
			NRF_SPU->RAMREGION[i].PERM = perm;
    d2fe:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    d302:	3501      	adds	r5, #1
    d304:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    d306:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    d30a:	d8f6      	bhi.n	d2fa <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    d30c:	fb02 f003 	mul.w	r0, r2, r3
    d310:	3a01      	subs	r2, #1
    d312:	434b      	muls	r3, r1
    d314:	9000      	str	r0, [sp, #0]
    d316:	481c      	ldr	r0, [pc, #112]	; (d388 <config_regions+0xc0>)
    d318:	f007 fc64 	bl	14be4 <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    d31c:	4b1b      	ldr	r3, [pc, #108]	; (d38c <config_regions+0xc4>)
    d31e:	f014 0f10 	tst.w	r4, #16
    d322:	491b      	ldr	r1, [pc, #108]	; (d390 <config_regions+0xc8>)
    d324:	481b      	ldr	r0, [pc, #108]	; (d394 <config_regions+0xcc>)
    d326:	bf08      	it	eq
    d328:	4619      	moveq	r1, r3
    d32a:	f007 fc5b 	bl	14be4 <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    d32e:	f014 0f04 	tst.w	r4, #4
    d332:	bf14      	ite	ne
    d334:	2172      	movne	r1, #114	; 0x72
    d336:	212d      	moveq	r1, #45	; 0x2d
    d338:	4817      	ldr	r0, [pc, #92]	; (d398 <config_regions+0xd0>)
    d33a:	f007 fc53 	bl	14be4 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    d33e:	f014 0f02 	tst.w	r4, #2
    d342:	bf14      	ite	ne
    d344:	2177      	movne	r1, #119	; 0x77
    d346:	212d      	moveq	r1, #45	; 0x2d
    d348:	4813      	ldr	r0, [pc, #76]	; (d398 <config_regions+0xd0>)
    d34a:	f007 fc4b 	bl	14be4 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    d34e:	f014 0f01 	tst.w	r4, #1
    d352:	bf0c      	ite	eq
    d354:	212d      	moveq	r1, #45	; 0x2d
    d356:	2178      	movne	r1, #120	; 0x78
    d358:	480f      	ldr	r0, [pc, #60]	; (d398 <config_regions+0xd0>)
    d35a:	f007 fc43 	bl	14be4 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    d35e:	216c      	movs	r1, #108	; 0x6c
    d360:	480d      	ldr	r0, [pc, #52]	; (d398 <config_regions+0xd0>)
    d362:	f007 fc3f 	bl	14be4 <printk>
	PRINT("\n");
    d366:	480d      	ldr	r0, [pc, #52]	; (d39c <config_regions+0xd4>)
}
    d368:	b003      	add	sp, #12
    d36a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    d36e:	f007 bc39 	b.w	14be4 <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    d372:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    d376:	e7c4      	b.n	d302 <config_regions+0x3a>
}
    d378:	b003      	add	sp, #12
    d37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d37c:	00015b95 	.word	0x00015b95
    d380:	00015b65 	.word	0x00015b65
    d384:	50003000 	.word	0x50003000
    d388:	00015bb6 	.word	0x00015bb6
    d38c:	00015b89 	.word	0x00015b89
    d390:	00015b80 	.word	0x00015b80
    d394:	00015d67 	.word	0x00015d67
    d398:	00015bd0 	.word	0x00015bd0
    d39c:	00016753 	.word	0x00016753

0000d3a0 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    d3a0:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    d3a2:	f44f 34c1 	mov.w	r4, #98816	; 0x18200
{
    d3a6:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    d3a8:	f44f 31c1 	mov.w	r1, #98816	; 0x18200
    d3ac:	4825      	ldr	r0, [pc, #148]	; (d444 <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    d3ae:	4d26      	ldr	r5, [pc, #152]	; (d448 <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    d3b0:	f007 fc18 	bl	14be4 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    d3b4:	6821      	ldr	r1, [r4, #0]
    d3b6:	4825      	ldr	r0, [pc, #148]	; (d44c <spm_jump+0xac>)
    d3b8:	f007 fc14 	bl	14be4 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    d3bc:	6829      	ldr	r1, [r5, #0]
    d3be:	4824      	ldr	r0, [pc, #144]	; (d450 <spm_jump+0xb0>)
    d3c0:	f007 fc10 	bl	14be4 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    d3c4:	2210      	movs	r2, #16
    d3c6:	2100      	movs	r1, #0
    d3c8:	4668      	mov	r0, sp
    d3ca:	f007 fd8b 	bl	14ee4 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    d3ce:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    d3d0:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    d3d2:	9300      	str	r3, [sp, #0]
    d3d4:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    d3d6:	f000 ff27 	bl	e228 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    d3da:	2001      	movs	r0, #1
    d3dc:	f000 ff56 	bl	e28c <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    d3e0:	2000      	movs	r0, #0
    d3e2:	f000 ff3f 	bl	e264 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    d3e6:	2000      	movs	r0, #0
    d3e8:	f000 ff64 	bl	e2b4 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    d3ec:	2101      	movs	r1, #1
    d3ee:	2000      	movs	r0, #0
    d3f0:	f000 ff7e 	bl	e2f0 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    d3f4:	f000 ff72 	bl	e2dc <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    d3f8:	4816      	ldr	r0, [pc, #88]	; (d454 <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    d3fa:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    d3fc:	f007 fbf2 	bl	14be4 <printk>
	NVIC_DisableIRQ(id);
    d400:	2008      	movs	r0, #8
    d402:	f7ff ff4d 	bl	d2a0 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d406:	4a14      	ldr	r2, [pc, #80]	; (d458 <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    d408:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d40c:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
    d410:	2b00      	cmp	r3, #0
    d412:	da07      	bge.n	d424 <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    d414:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    d418:	3b02      	subs	r3, #2
    d41a:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    d41c:	bf9c      	itt	ls
    d41e:	4b0f      	ldrls	r3, [pc, #60]	; (d45c <spm_jump+0xbc>)
    d420:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    d424:	2101      	movs	r1, #1
    d426:	2008      	movs	r0, #8
    d428:	f007 fcc6 	bl	14db8 <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
    d42c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d430:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    d434:	0864      	lsrs	r4, r4, #1
    d436:	0064      	lsls	r4, r4, #1
    d438:	4620      	mov	r0, r4
    d43a:	4621      	mov	r1, r4
    d43c:	4622      	mov	r2, r4
    d43e:	4623      	mov	r3, r4
    d440:	f7ff f97a 	bl	c738 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    d444:	00015bd3 	.word	0x00015bd3
    d448:	00018204 	.word	0x00018204
    d44c:	00015bea 	.word	0x00015bea
    d450:	00015bff 	.word	0x00015bff
    d454:	00015c1d 	.word	0x00015c1d
    d458:	50003000 	.word	0x50003000
    d45c:	80000100 	.word	0x80000100

0000d460 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    d460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    d464:	4860      	ldr	r0, [pc, #384]	; (d5e8 <spm_config+0x188>)
    d466:	f007 fbbd 	bl	14be4 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    d46a:	2100      	movs	r1, #0
    d46c:	f240 1317 	movw	r3, #279	; 0x117
    d470:	4608      	mov	r0, r1
    d472:	2203      	movs	r2, #3
    d474:	f7ff ff28 	bl	d2c8 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d478:	4d5c      	ldr	r5, [pc, #368]	; (d5ec <spm_config+0x18c>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    d47a:	f240 1307 	movw	r3, #263	; 0x107
    d47e:	2220      	movs	r2, #32
    d480:	2103      	movs	r1, #3
    d482:	2000      	movs	r0, #0
    d484:	f7ff ff20 	bl	d2c8 <config_regions>
	PRINT("\n");
    d488:	4859      	ldr	r0, [pc, #356]	; (d5f0 <spm_config+0x190>)
    d48a:	f007 fbab 	bl	14be4 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d48e:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    d492:	4b58      	ldr	r3, [pc, #352]	; (d5f4 <spm_config+0x194>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    d494:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    d498:	429c      	cmp	r4, r3
    d49a:	d208      	bcs.n	d4ae <spm_config+0x4e>
    d49c:	4956      	ldr	r1, [pc, #344]	; (d5f8 <spm_config+0x198>)
    d49e:	4857      	ldr	r0, [pc, #348]	; (d5fc <spm_config+0x19c>)
    d4a0:	2282      	movs	r2, #130	; 0x82
    d4a2:	f007 fb9f 	bl	14be4 <printk>
    d4a6:	2182      	movs	r1, #130	; 0x82
    d4a8:	4853      	ldr	r0, [pc, #332]	; (d5f8 <spm_config+0x198>)
    d4aa:	f007 fc26 	bl	14cfa <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    d4ae:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    d4b2:	4e53      	ldr	r6, [pc, #332]	; (d600 <spm_config+0x1a0>)
    d4b4:	f1c4 041b 	rsb	r4, r4, #27
    d4b8:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    d4bc:	b2e4      	uxtb	r4, r4
    d4be:	05d2      	lsls	r2, r2, #23
    d4c0:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    d4c4:	d50a      	bpl.n	d4dc <spm_config+0x7c>
    d4c6:	494f      	ldr	r1, [pc, #316]	; (d604 <spm_config+0x1a4>)
    d4c8:	484c      	ldr	r0, [pc, #304]	; (d5fc <spm_config+0x19c>)
    d4ca:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    d4ce:	f007 fb89 	bl	14be4 <printk>
    d4d2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    d4d6:	484b      	ldr	r0, [pc, #300]	; (d604 <spm_config+0x1a4>)
    d4d8:	f007 fc0f 	bl	14cfa <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    d4dc:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    d4e0:	05db      	lsls	r3, r3, #23
    d4e2:	d50a      	bpl.n	d4fa <spm_config+0x9a>
    d4e4:	4947      	ldr	r1, [pc, #284]	; (d604 <spm_config+0x1a4>)
    d4e6:	4845      	ldr	r0, [pc, #276]	; (d5fc <spm_config+0x19c>)
    d4e8:	f240 127b 	movw	r2, #379	; 0x17b
    d4ec:	f007 fb7a 	bl	14be4 <printk>
    d4f0:	f240 117b 	movw	r1, #379	; 0x17b
    d4f4:	4843      	ldr	r0, [pc, #268]	; (d604 <spm_config+0x1a4>)
    d4f6:	f007 fc00 	bl	14cfa <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    d4fa:	4b41      	ldr	r3, [pc, #260]	; (d600 <spm_config+0x1a0>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    d4fc:	4842      	ldr	r0, [pc, #264]	; (d608 <spm_config+0x1a8>)
    d4fe:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    d502:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    d506:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    d50a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    d50e:	0152      	lsls	r2, r2, #5
    d510:	f007 fb68 	bl	14be4 <printk>
	PRINT("\n");
    d514:	4836      	ldr	r0, [pc, #216]	; (d5f0 <spm_config+0x190>)
    d516:	f007 fb65 	bl	14be4 <printk>
	int err = spm_secure_services_init();
    d51a:	f000 f88b 	bl	d634 <spm_secure_services_init>
	if (err != 0) {
    d51e:	4601      	mov	r1, r0
    d520:	b110      	cbz	r0, d528 <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
    d522:	483a      	ldr	r0, [pc, #232]	; (d60c <spm_config+0x1ac>)
    d524:	f007 fb5e 	bl	14be4 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    d528:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    d52a:	4839      	ldr	r0, [pc, #228]	; (d610 <spm_config+0x1b0>)
    d52c:	f007 fb5a 	bl	14be4 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    d530:	f240 1317 	movw	r3, #279	; 0x117
    d534:	2204      	movs	r2, #4
    d536:	2100      	movs	r1, #0
    d538:	2001      	movs	r0, #1
    d53a:	f7ff fec5 	bl	d2c8 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    d53e:	4d30      	ldr	r5, [pc, #192]	; (d600 <spm_config+0x1a0>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    d540:	f240 1307 	movw	r3, #263	; 0x107
    d544:	2220      	movs	r2, #32
    d546:	2104      	movs	r1, #4
    d548:	2001      	movs	r0, #1
    d54a:	f7ff febd 	bl	d2c8 <config_regions>
	PRINT("\n");
    d54e:	4828      	ldr	r0, [pc, #160]	; (d5f0 <spm_config+0x190>)
    d550:	f007 fb48 	bl	14be4 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    d554:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    d558:	482e      	ldr	r0, [pc, #184]	; (d614 <spm_config+0x1b4>)
    d55a:	f007 fb43 	bl	14be4 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    d55e:	4e2e      	ldr	r6, [pc, #184]	; (d618 <spm_config+0x1b8>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    d560:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    d564:	4f2d      	ldr	r7, [pc, #180]	; (d61c <spm_config+0x1bc>)
    d566:	4d2e      	ldr	r5, [pc, #184]	; (d620 <spm_config+0x1c0>)
    d568:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d630 <spm_config+0x1d0>
    d56c:	f895 9005 	ldrb.w	r9, [r5, #5]
    d570:	4621      	mov	r1, r4
    d572:	f1b9 0f00 	cmp.w	r9, #0
    d576:	bf14      	ite	ne
    d578:	4633      	movne	r3, r6
    d57a:	463b      	moveq	r3, r7
    d57c:	4640      	mov	r0, r8
    d57e:	682a      	ldr	r2, [r5, #0]
    d580:	f007 fb30 	bl	14be4 <printk>
		if (!periph[i].nonsecure) {
    d584:	f1b9 0f00 	cmp.w	r9, #0
    d588:	d10c      	bne.n	d5a4 <spm_config+0x144>
			PRINT("\tSKIP\n");
    d58a:	4826      	ldr	r0, [pc, #152]	; (d624 <spm_config+0x1c4>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    d58c:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    d58e:	f007 fb29 	bl	14be4 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    d592:	2c20      	cmp	r4, #32
    d594:	f105 0508 	add.w	r5, r5, #8
    d598:	d1e8      	bne.n	d56c <spm_config+0x10c>
	PRINT("\n");
    d59a:	4815      	ldr	r0, [pc, #84]	; (d5f0 <spm_config+0x190>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    d59c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    d5a0:	f007 bb20 	b.w	14be4 <printk>
		err = spm_config_peripheral(periph[i].id, false);
    d5a4:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
    d5a8:	f995 0004 	ldrsb.w	r0, [r5, #4]
    d5ac:	f7ff fe78 	bl	d2a0 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d5b0:	ea4f 0389 	mov.w	r3, r9, lsl #2
    d5b4:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    d5b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    d5bc:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    d5c0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    d5c4:	d006      	beq.n	d5d4 <spm_config+0x174>
	return present && (usel || split);
    d5c6:	2a00      	cmp	r2, #0
    d5c8:	da07      	bge.n	d5da <spm_config+0x17a>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    d5ca:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    d5ce:	3a02      	subs	r2, #2
    d5d0:	2a01      	cmp	r2, #1
    d5d2:	d802      	bhi.n	d5da <spm_config+0x17a>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    d5d4:	4a14      	ldr	r2, [pc, #80]	; (d628 <spm_config+0x1c8>)
    d5d6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    d5da:	2101      	movs	r1, #1
    d5dc:	4648      	mov	r0, r9
    d5de:	f007 fbeb 	bl	14db8 <irq_target_state_set>
			PRINT("\tOK\n");
    d5e2:	4812      	ldr	r0, [pc, #72]	; (d62c <spm_config+0x1cc>)
    d5e4:	e7d2      	b.n	d58c <spm_config+0x12c>
    d5e6:	bf00      	nop
    d5e8:	00015c53 	.word	0x00015c53
    d5ec:	00017fe0 	.word	0x00017fe0
    d5f0:	00016753 	.word	0x00016753
    d5f4:	00000020 	.word	0x00000020
    d5f8:	00015b95 	.word	0x00015b95
    d5fc:	00015b65 	.word	0x00015b65
    d600:	50003000 	.word	0x50003000
    d604:	00015c77 	.word	0x00015c77
    d608:	00015ca9 	.word	0x00015ca9
    d60c:	00015cef 	.word	0x00015cef
    d610:	00015d1f 	.word	0x00015d1f
    d614:	00015d41 	.word	0x00015d41
    d618:	00015c48 	.word	0x00015c48
    d61c:	00015b8d 	.word	0x00015b8d
    d620:	00015718 	.word	0x00015718
    d624:	00015d6a 	.word	0x00015d6a
    d628:	80000100 	.word	0x80000100
    d62c:	00015d71 	.word	0x00015d71
    d630:	00015d5d 	.word	0x00015d5d

0000d634 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    d634:	2200      	movs	r2, #0
    d636:	4802      	ldr	r0, [pc, #8]	; (d640 <spm_secure_services_init+0xc>)
    d638:	4611      	mov	r1, r2
    d63a:	f004 bd53 	b.w	120e4 <nrf_cc3xx_platform_ctr_drbg_init>
    d63e:	bf00      	nop
    d640:	2000028c 	.word	0x2000028c

0000d644 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    d644:	b570      	push	{r4, r5, r6, lr}
    d646:	460c      	mov	r4, r1
    d648:	4615      	mov	r5, r2
#endif
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    d64a:	4606      	mov	r6, r0
    d64c:	b950      	cbnz	r0, d664 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    d64e:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    d652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d656:	4671      	mov	r1, lr
    d658:	4672      	mov	r2, lr
    d65a:	4673      	mov	r3, lr
    d65c:	46f4      	mov	ip, lr
    d65e:	f38e 8c00 	msr	CPSR_fs, lr
    d662:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    d664:	2a00      	cmp	r2, #0
    d666:	d0f2      	beq.n	d64e <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d668:	f007 fbe9 	bl	14e3e <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    d66c:	2801      	cmp	r0, #1
    d66e:	d0ee      	beq.n	d64e <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    d670:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
    d674:	d316      	bcc.n	d6a4 <__acle_se_spm_request_read_nse+0x60>
    d676:	192b      	adds	r3, r5, r4
    d678:	f5b3 4f42 	cmp.w	r3, #49664	; 0xc200
    d67c:	d905      	bls.n	d68a <__acle_se_spm_request_read_nse+0x46>
    d67e:	4a0b      	ldr	r2, [pc, #44]	; (d6ac <__acle_se_spm_request_read_nse+0x68>)
    d680:	4294      	cmp	r4, r2
    d682:	d909      	bls.n	d698 <__acle_se_spm_request_read_nse+0x54>
    d684:	322d      	adds	r2, #45	; 0x2d
    d686:	4293      	cmp	r3, r2
    d688:	d809      	bhi.n	d69e <__acle_se_spm_request_read_nse+0x5a>
			memcpy(destination, (const void *)addr, len);
    d68a:	462a      	mov	r2, r5
    d68c:	4621      	mov	r1, r4
    d68e:	4630      	mov	r0, r6
    d690:	f007 fc1d 	bl	14ece <memcpy>
			return 0;
    d694:	2000      	movs	r0, #0
    d696:	e7dc      	b.n	d652 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    d698:	4a05      	ldr	r2, [pc, #20]	; (d6b0 <__acle_se_spm_request_read_nse+0x6c>)
    d69a:	4294      	cmp	r4, r2
    d69c:	d902      	bls.n	d6a4 <__acle_se_spm_request_read_nse+0x60>
    d69e:	4a05      	ldr	r2, [pc, #20]	; (d6b4 <__acle_se_spm_request_read_nse+0x70>)
    d6a0:	4293      	cmp	r3, r2
    d6a2:	d9f2      	bls.n	d68a <__acle_se_spm_request_read_nse+0x46>
	return -EPERM;
    d6a4:	f04f 30ff 	mov.w	r0, #4294967295
    d6a8:	e7d3      	b.n	d652 <__acle_se_spm_request_read_nse+0xe>
    d6aa:	bf00      	nop
    d6ac:	00ff01ff 	.word	0x00ff01ff
    d6b0:	00ff012f 	.word	0x00ff012f
    d6b4:	00ff0138 	.word	0x00ff0138

0000d6b8 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    d6b8:	b570      	push	{r4, r5, r6, lr}
    d6ba:	4606      	mov	r6, r0
    d6bc:	460d      	mov	r5, r1
    d6be:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    d6c0:	f007 fbbd 	bl	14e3e <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    d6c4:	2801      	cmp	r0, #1
    d6c6:	d00d      	beq.n	d6e4 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d6c8:	4620      	mov	r0, r4
    d6ca:	f007 fbb8 	bl	14e3e <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    d6ce:	2801      	cmp	r0, #1
    d6d0:	d008      	beq.n	d6e4 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    d6d2:	4623      	mov	r3, r4
    d6d4:	462a      	mov	r2, r5
    d6d6:	4631      	mov	r1, r6
    d6d8:	4808      	ldr	r0, [pc, #32]	; (d6fc <__acle_se_spm_request_random_number_nse+0x44>)
    d6da:	f004 fd37 	bl	1214c <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    d6de:	6823      	ldr	r3, [r4, #0]
    d6e0:	42ab      	cmp	r3, r5
    d6e2:	d001      	beq.n	d6e8 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    d6e4:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    d6e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d6ec:	4671      	mov	r1, lr
    d6ee:	4672      	mov	r2, lr
    d6f0:	4673      	mov	r3, lr
    d6f2:	46f4      	mov	ip, lr
    d6f4:	f38e 8c00 	msr	CPSR_fs, lr
    d6f8:	4774      	bxns	lr
    d6fa:	bf00      	nop
    d6fc:	2000028c 	.word	0x2000028c

0000d700 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d704:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    d706:	460d      	mov	r5, r1
{
    d708:	b085      	sub	sp, #20
	if (info == NULL) {
    d70a:	b381      	cbz	r1, d76e <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d70c:	f007 fb97 	bl	14e3e <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    d710:	2801      	cmp	r0, #1
    d712:	d12c      	bne.n	d76e <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    d714:	4628      	mov	r0, r5
    d716:	f007 fb92 	bl	14e3e <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    d71a:	2801      	cmp	r0, #1
    d71c:	d027      	beq.n	d76e <__acle_se_spm_firmware_info_nse+0x6e>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    d71e:	f04f 0800 	mov.w	r8, #0
    d722:	f8df b05c 	ldr.w	fp, [pc, #92]	; d780 <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d726:	f8df a05c 	ldr.w	sl, [pc, #92]	; d784 <__acle_se_spm_firmware_info_nse+0x84>
    d72a:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    d72c:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d730:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    d734:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    d736:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    d73a:	220c      	movs	r2, #12
    d73c:	4639      	mov	r1, r7
    d73e:	4630      	mov	r0, r6
    d740:	f007 fb9e 	bl	14e80 <memcmp>
    d744:	4604      	mov	r4, r0
    d746:	b900      	cbnz	r0, d74a <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    d748:	b9a6      	cbnz	r6, d774 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    d74a:	f108 0801 	add.w	r8, r8, #1
    d74e:	f1b8 0f05 	cmp.w	r8, #5
    d752:	d1eb      	bne.n	d72c <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    d754:	f06f 040d 	mvn.w	r4, #13
}
    d758:	4620      	mov	r0, r4
    d75a:	b005      	add	sp, #20
    d75c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d760:	4671      	mov	r1, lr
    d762:	4672      	mov	r2, lr
    d764:	4673      	mov	r3, lr
    d766:	46f4      	mov	ip, lr
    d768:	f38e 8c00 	msr	CPSR_fs, lr
    d76c:	4774      	bxns	lr
		return -EINVAL;
    d76e:	f06f 0415 	mvn.w	r4, #21
    d772:	e7f1      	b.n	d758 <__acle_se_spm_firmware_info_nse+0x58>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    d774:	223c      	movs	r2, #60	; 0x3c
    d776:	4631      	mov	r1, r6
    d778:	4628      	mov	r0, r5
    d77a:	f007 fba8 	bl	14ece <memcpy>
		return 0;
    d77e:	e7eb      	b.n	d758 <__acle_se_spm_firmware_info_nse+0x58>
    d780:	00015818 	.word	0x00015818
    d784:	000156e0 	.word	0x000156e0

0000d788 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    d788:	4801      	ldr	r0, [pc, #4]	; (d790 <nrf_cc3xx_platform_abort_init+0x8>)
    d78a:	f004 bca3 	b.w	120d4 <nrf_cc3xx_platform_set_abort>
    d78e:	bf00      	nop
    d790:	0001582c 	.word	0x0001582c

0000d794 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d794:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    d796:	b1b0      	cbz	r0, d7c6 <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    d798:	6843      	ldr	r3, [r0, #4]
    d79a:	2b04      	cmp	r3, #4
    d79c:	d10d      	bne.n	d7ba <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d79e:	2200      	movs	r2, #0
    d7a0:	6803      	ldr	r3, [r0, #0]
    d7a2:	e8d3 1fef 	ldaex	r1, [r3]
    d7a6:	2901      	cmp	r1, #1
    d7a8:	d103      	bne.n	d7b2 <mutex_unlock_platform+0x1e>
    d7aa:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d7ae:	2800      	cmp	r0, #0
    d7b0:	d1f7      	bne.n	d7a2 <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d7b2:	4807      	ldr	r0, [pc, #28]	; (d7d0 <mutex_unlock_platform+0x3c>)
    d7b4:	bf08      	it	eq
    d7b6:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    d7b8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    d7ba:	b13b      	cbz	r3, d7cc <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    d7bc:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    d7be:	f003 f8d1 	bl	10964 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    d7c2:	2000      	movs	r0, #0
    d7c4:	e7f8      	b.n	d7b8 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    d7c6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d7ca:	e7f5      	b.n	d7b8 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    d7cc:	4801      	ldr	r0, [pc, #4]	; (d7d4 <mutex_unlock_platform+0x40>)
    d7ce:	e7f3      	b.n	d7b8 <mutex_unlock_platform+0x24>
    d7d0:	ffff8fe9 	.word	0xffff8fe9
    d7d4:	ffff8fea 	.word	0xffff8fea

0000d7d8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d7d8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    d7da:	4604      	mov	r4, r0
    d7dc:	b918      	cbnz	r0, d7e6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    d7de:	4b0d      	ldr	r3, [pc, #52]	; (d814 <mutex_free_platform+0x3c>)
    d7e0:	480d      	ldr	r0, [pc, #52]	; (d818 <mutex_free_platform+0x40>)
    d7e2:	685b      	ldr	r3, [r3, #4]
    d7e4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    d7e6:	6861      	ldr	r1, [r4, #4]
    d7e8:	2908      	cmp	r1, #8
    d7ea:	d00d      	beq.n	d808 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    d7ec:	f031 0304 	bics.w	r3, r1, #4
    d7f0:	d00a      	beq.n	d808 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    d7f2:	f011 0102 	ands.w	r1, r1, #2
    d7f6:	d008      	beq.n	d80a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    d7f8:	4621      	mov	r1, r4
    d7fa:	4808      	ldr	r0, [pc, #32]	; (d81c <mutex_free_platform+0x44>)
    d7fc:	f002 fe68 	bl	104d0 <k_mem_slab_free>
        mutex->mutex = NULL;
    d800:	2300      	movs	r3, #0
    d802:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    d804:	2300      	movs	r3, #0
    d806:	6063      	str	r3, [r4, #4]
}
    d808:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    d80a:	2214      	movs	r2, #20
    d80c:	6820      	ldr	r0, [r4, #0]
    d80e:	f007 fb69 	bl	14ee4 <memset>
    d812:	e7f7      	b.n	d804 <mutex_free_platform+0x2c>
    d814:	20000088 	.word	0x20000088
    d818:	00015ea6 	.word	0x00015ea6
    d81c:	20000448 	.word	0x20000448

0000d820 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d820:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    d822:	4604      	mov	r4, r0
    d824:	b918      	cbnz	r0, d82e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    d826:	4b16      	ldr	r3, [pc, #88]	; (d880 <mutex_init_platform+0x60>)
    d828:	4816      	ldr	r0, [pc, #88]	; (d884 <mutex_init_platform+0x64>)
    d82a:	685b      	ldr	r3, [r3, #4]
    d82c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    d82e:	6863      	ldr	r3, [r4, #4]
    d830:	2b04      	cmp	r3, #4
    d832:	d023      	beq.n	d87c <mutex_init_platform+0x5c>
    d834:	2b08      	cmp	r3, #8
    d836:	d021      	beq.n	d87c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    d838:	b9cb      	cbnz	r3, d86e <mutex_init_platform+0x4e>
    d83a:	6823      	ldr	r3, [r4, #0]
    d83c:	b9bb      	cbnz	r3, d86e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    d83e:	f04f 32ff 	mov.w	r2, #4294967295
    d842:	f04f 33ff 	mov.w	r3, #4294967295
    d846:	4621      	mov	r1, r4
    d848:	480f      	ldr	r0, [pc, #60]	; (d888 <mutex_init_platform+0x68>)
    d84a:	f002 fde7 	bl	1041c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    d84e:	b908      	cbnz	r0, d854 <mutex_init_platform+0x34>
    d850:	6823      	ldr	r3, [r4, #0]
    d852:	b91b      	cbnz	r3, d85c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    d854:	4b0a      	ldr	r3, [pc, #40]	; (d880 <mutex_init_platform+0x60>)
    d856:	480d      	ldr	r0, [pc, #52]	; (d88c <mutex_init_platform+0x6c>)
    d858:	685b      	ldr	r3, [r3, #4]
    d85a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    d85c:	2214      	movs	r2, #20
    d85e:	2100      	movs	r1, #0
    d860:	6820      	ldr	r0, [r4, #0]
    d862:	f007 fb3f 	bl	14ee4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    d866:	6863      	ldr	r3, [r4, #4]
    d868:	f043 0302 	orr.w	r3, r3, #2
    d86c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    d86e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    d870:	f007 fd54 	bl	1531c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    d874:	6863      	ldr	r3, [r4, #4]
    d876:	f043 0301 	orr.w	r3, r3, #1
    d87a:	6063      	str	r3, [r4, #4]
}
    d87c:	bd10      	pop	{r4, pc}
    d87e:	bf00      	nop
    d880:	20000088 	.word	0x20000088
    d884:	00015ea6 	.word	0x00015ea6
    d888:	20000448 	.word	0x20000448
    d88c:	00015ecc 	.word	0x00015ecc

0000d890 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    d890:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    d892:	b1e8      	cbz	r0, d8d0 <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    d894:	6843      	ldr	r3, [r0, #4]
    d896:	2b04      	cmp	r3, #4
    d898:	d10c      	bne.n	d8b4 <mutex_lock_platform+0x24>
    d89a:	2201      	movs	r2, #1
    d89c:	6803      	ldr	r3, [r0, #0]
    d89e:	e8d3 1fef 	ldaex	r1, [r3]
    d8a2:	2900      	cmp	r1, #0
    d8a4:	d103      	bne.n	d8ae <mutex_lock_platform+0x1e>
    d8a6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d8aa:	2800      	cmp	r0, #0
    d8ac:	d1f7      	bne.n	d89e <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d8ae:	d10b      	bne.n	d8c8 <mutex_lock_platform+0x38>
    d8b0:	2000      	movs	r0, #0
}
    d8b2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    d8b4:	b153      	cbz	r3, d8cc <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    d8b6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    d8b8:	f04f 32ff 	mov.w	r2, #4294967295
    d8bc:	f04f 33ff 	mov.w	r3, #4294967295
    d8c0:	f002 ff78 	bl	107b4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    d8c4:	2800      	cmp	r0, #0
    d8c6:	d0f3      	beq.n	d8b0 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    d8c8:	4803      	ldr	r0, [pc, #12]	; (d8d8 <mutex_lock_platform+0x48>)
    d8ca:	e7f2      	b.n	d8b2 <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    d8cc:	4803      	ldr	r0, [pc, #12]	; (d8dc <mutex_lock_platform+0x4c>)
    d8ce:	e7f0      	b.n	d8b2 <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    d8d0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d8d4:	e7ed      	b.n	d8b2 <mutex_lock_platform+0x22>
    d8d6:	bf00      	nop
    d8d8:	ffff8fe9 	.word	0xffff8fe9
    d8dc:	ffff8fea 	.word	0xffff8fea

0000d8e0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    d8e0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    d8e2:	4906      	ldr	r1, [pc, #24]	; (d8fc <nrf_cc3xx_platform_mutex_init+0x1c>)
    d8e4:	2340      	movs	r3, #64	; 0x40
    d8e6:	2214      	movs	r2, #20
    d8e8:	4805      	ldr	r0, [pc, #20]	; (d900 <nrf_cc3xx_platform_mutex_init+0x20>)
    d8ea:	f007 fcec 	bl	152c6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    d8ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    d8f2:	4904      	ldr	r1, [pc, #16]	; (d904 <nrf_cc3xx_platform_mutex_init+0x24>)
    d8f4:	4804      	ldr	r0, [pc, #16]	; (d908 <nrf_cc3xx_platform_mutex_init+0x28>)
    d8f6:	f004 bca1 	b.w	1223c <nrf_cc3xx_platform_set_mutexes>
    d8fa:	bf00      	nop
    d8fc:	20000468 	.word	0x20000468
    d900:	20000448 	.word	0x20000448
    d904:	00015844 	.word	0x00015844
    d908:	00015834 	.word	0x00015834

0000d90c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d90c:	4901      	ldr	r1, [pc, #4]	; (d914 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d90e:	2210      	movs	r2, #16
	str	r2, [r1]
    d910:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d912:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d914:	e000ed10 	.word	0xe000ed10

0000d918 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d918:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d91a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d91c:	f380 8811 	msr	BASEPRI, r0
	isb
    d920:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d924:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d928:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d92a:	b662      	cpsie	i
	isb
    d92c:	f3bf 8f6f 	isb	sy

	bx	lr
    d930:	4770      	bx	lr
    d932:	bf00      	nop

0000d934 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d934:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d936:	4605      	mov	r5, r0

	if (esf != NULL) {
    d938:	460c      	mov	r4, r1
    d93a:	b1c9      	cbz	r1, d970 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d93c:	688b      	ldr	r3, [r1, #8]
    d93e:	4810      	ldr	r0, [pc, #64]	; (d980 <z_arm_fatal_error+0x4c>)
    d940:	9300      	str	r3, [sp, #0]
    d942:	e9d1 2300 	ldrd	r2, r3, [r1]
    d946:	2145      	movs	r1, #69	; 0x45
    d948:	f007 f9ea 	bl	14d20 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d94c:	6963      	ldr	r3, [r4, #20]
    d94e:	2145      	movs	r1, #69	; 0x45
    d950:	9300      	str	r3, [sp, #0]
    d952:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    d956:	480b      	ldr	r0, [pc, #44]	; (d984 <z_arm_fatal_error+0x50>)
    d958:	f007 f9e2 	bl	14d20 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d95c:	2145      	movs	r1, #69	; 0x45
    d95e:	69e2      	ldr	r2, [r4, #28]
    d960:	4809      	ldr	r0, [pc, #36]	; (d988 <z_arm_fatal_error+0x54>)
    d962:	f007 f9dd 	bl	14d20 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d966:	2145      	movs	r1, #69	; 0x45
    d968:	69a2      	ldr	r2, [r4, #24]
    d96a:	4808      	ldr	r0, [pc, #32]	; (d98c <z_arm_fatal_error+0x58>)
    d96c:	f007 f9d8 	bl	14d20 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d970:	4621      	mov	r1, r4
    d972:	4628      	mov	r0, r5
}
    d974:	b003      	add	sp, #12
    d976:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    d97a:	f002 bbf5 	b.w	10168 <z_fatal_error>
    d97e:	bf00      	nop
    d980:	00015ef9 	.word	0x00015ef9
    d984:	00015f2d 	.word	0x00015f2d
    d988:	00015f61 	.word	0x00015f61
    d98c:	00015f75 	.word	0x00015f75

0000d990 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d990:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d992:	2b00      	cmp	r3, #0
    d994:	db08      	blt.n	d9a8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d996:	2201      	movs	r2, #1
    d998:	f000 001f 	and.w	r0, r0, #31
    d99c:	fa02 f000 	lsl.w	r0, r2, r0
    d9a0:	4a02      	ldr	r2, [pc, #8]	; (d9ac <arch_irq_enable+0x1c>)
    d9a2:	095b      	lsrs	r3, r3, #5
    d9a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d9a8:	4770      	bx	lr
    d9aa:	bf00      	nop
    d9ac:	e000e100 	.word	0xe000e100

0000d9b0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d9b0:	4b05      	ldr	r3, [pc, #20]	; (d9c8 <arch_irq_is_enabled+0x18>)
    d9b2:	0942      	lsrs	r2, r0, #5
    d9b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d9b8:	2301      	movs	r3, #1
    d9ba:	f000 001f 	and.w	r0, r0, #31
    d9be:	fa03 f000 	lsl.w	r0, r3, r0
}
    d9c2:	4010      	ands	r0, r2
    d9c4:	4770      	bx	lr
    d9c6:	bf00      	nop
    d9c8:	e000e100 	.word	0xe000e100

0000d9cc <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    d9cc:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    d9ce:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d9d0:	2c07      	cmp	r4, #7
{
    d9d2:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d9d4:	d908      	bls.n	d9e8 <z_arm_irq_priority_set+0x1c>
    d9d6:	490d      	ldr	r1, [pc, #52]	; (da0c <z_arm_irq_priority_set+0x40>)
    d9d8:	480d      	ldr	r0, [pc, #52]	; (da10 <z_arm_irq_priority_set+0x44>)
    d9da:	2259      	movs	r2, #89	; 0x59
    d9dc:	f007 f902 	bl	14be4 <printk>
    d9e0:	2159      	movs	r1, #89	; 0x59
    d9e2:	480a      	ldr	r0, [pc, #40]	; (da0c <z_arm_irq_priority_set+0x40>)
    d9e4:	f007 f989 	bl	14cfa <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d9e8:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d9ea:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9ec:	bfac      	ite	ge
    d9ee:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9f2:	4b08      	ldrlt	r3, [pc, #32]	; (da14 <z_arm_irq_priority_set+0x48>)
    d9f4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    d9f8:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d9fa:	bfab      	itete	ge
    d9fc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da00:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da04:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da08:	555c      	strblt	r4, [r3, r5]
}
    da0a:	bd38      	pop	{r3, r4, r5, pc}
    da0c:	00015fa8 	.word	0x00015fa8
    da10:	00015b65 	.word	0x00015b65
    da14:	e000ed14 	.word	0xe000ed14

0000da18 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    da18:	bf30      	wfi
    b z_SysNmiOnReset
    da1a:	f7ff bffd 	b.w	da18 <z_SysNmiOnReset>
    da1e:	bf00      	nop

0000da20 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    da20:	4a0b      	ldr	r2, [pc, #44]	; (da50 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    da22:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    da24:	4b0b      	ldr	r3, [pc, #44]	; (da54 <z_arm_prep_c+0x34>)
    da26:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    da2a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    da2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    da30:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    da34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    da38:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    da3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    da40:	f002 fc32 	bl	102a8 <z_bss_zero>
	z_data_copy();
    da44:	f004 f824 	bl	11a90 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    da48:	f000 fb58 	bl	e0fc <z_arm_interrupt_init>
	z_cstart();
    da4c:	f002 fc36 	bl	102bc <z_cstart>
    da50:	0000c200 	.word	0x0000c200
    da54:	e000ed00 	.word	0xe000ed00

0000da58 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    da58:	4a09      	ldr	r2, [pc, #36]	; (da80 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    da5a:	490a      	ldr	r1, [pc, #40]	; (da84 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    da5c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    da5e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    da60:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    da62:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    da64:	4908      	ldr	r1, [pc, #32]	; (da88 <arch_swap+0x30>)
    da66:	684b      	ldr	r3, [r1, #4]
    da68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    da6c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    da6e:	2300      	movs	r3, #0
    da70:	f383 8811 	msr	BASEPRI, r3
    da74:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    da78:	6893      	ldr	r3, [r2, #8]
}
    da7a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    da7c:	4770      	bx	lr
    da7e:	bf00      	nop
    da80:	20000a2c 	.word	0x20000a2c
    da84:	0001596c 	.word	0x0001596c
    da88:	e000ed00 	.word	0xe000ed00

0000da8c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    da8c:	4913      	ldr	r1, [pc, #76]	; (dadc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    da8e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    da90:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    da94:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    da96:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    da9a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    da9e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    daa0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    daa4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    daa8:	4f0d      	ldr	r7, [pc, #52]	; (dae0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    daaa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    daae:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    dab0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    dab2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    dab4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    dab6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    dab8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    daba:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    dabe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    dac2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    dac6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    daca:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    dace:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    dad0:	f007 f9a8 	bl	14e24 <configure_builtin_stack_guard>
    pop {r2, lr}
    dad4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    dad8:	4770      	bx	lr
    dada:	0000      	.short	0x0000
    ldr r1, =_kernel
    dadc:	20000a2c 	.word	0x20000a2c
    ldr v4, =_SCS_ICSR
    dae0:	e000ed04 	.word	0xe000ed04

0000dae4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    dae4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    dae8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    daea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    daee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    daf2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    daf4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    daf8:	2902      	cmp	r1, #2
    beq _oops
    dafa:	d0ff      	beq.n	dafc <_oops>

0000dafc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    dafc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    dafe:	f007 f953 	bl	14da8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    db02:	bd01      	pop	{r0, pc}

0000db04 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    db04:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    db08:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    db0a:	490b      	ldr	r1, [pc, #44]	; (db38 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    db0c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    db10:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    db12:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    db16:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    db1a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    db1c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    db20:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    db24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    db28:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    db2c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    db2e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    db30:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    db32:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    db34:	4770      	bx	lr
    db36:	bf00      	nop
    db38:	00014c25 	.word	0x00014c25

0000db3c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    db3c:	4b08      	ldr	r3, [pc, #32]	; (db60 <arch_switch_to_main_thread+0x24>)
    db3e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    db40:	6e43      	ldr	r3, [r0, #100]	; 0x64
    db42:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    db46:	4610      	mov	r0, r2
    db48:	f381 8809 	msr	PSP, r1
    db4c:	2100      	movs	r1, #0
    db4e:	b663      	cpsie	if
    db50:	f381 8811 	msr	BASEPRI, r1
    db54:	f3bf 8f6f 	isb	sy
    db58:	2200      	movs	r2, #0
    db5a:	2300      	movs	r3, #0
    db5c:	f007 f862 	bl	14c24 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    db60:	20000a2c 	.word	0x20000a2c

0000db64 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    db64:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    db66:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    db68:	4a0b      	ldr	r2, [pc, #44]	; (db98 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    db6a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    db6c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    db6e:	bf1e      	ittt	ne
	movne	r1, #0
    db70:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    db72:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    db74:	f007 fbcb 	blne	1530e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    db78:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    db7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    db7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    db82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    db86:	4905      	ldr	r1, [pc, #20]	; (db9c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    db88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    db8a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    db8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    db8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    db92:	4903      	ldr	r1, [pc, #12]	; (dba0 <_isr_wrapper+0x3c>)
	bx r1
    db94:	4708      	bx	r1
    db96:	0000      	.short	0x0000
	ldr r2, =_kernel
    db98:	20000a2c 	.word	0x20000a2c
	ldr r1, =_sw_isr_table
    db9c:	00015468 	.word	0x00015468
	ldr r1, =z_arm_int_exit
    dba0:	0000dba5 	.word	0x0000dba5

0000dba4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    dba4:	4b04      	ldr	r3, [pc, #16]	; (dbb8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    dba6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    dba8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    dbaa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    dbac:	d003      	beq.n	dbb6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    dbae:	4903      	ldr	r1, [pc, #12]	; (dbbc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    dbb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    dbb4:	600a      	str	r2, [r1, #0]

0000dbb6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    dbb6:	4770      	bx	lr
	ldr r3, =_kernel
    dbb8:	20000a2c 	.word	0x20000a2c
	ldr r1, =_SCS_ICSR
    dbbc:	e000ed04 	.word	0xe000ed04

0000dbc0 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dbc0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dbc2:	4c2b      	ldr	r4, [pc, #172]	; (dc70 <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dbc4:	4606      	mov	r6, r0
    dbc6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dbc8:	482a      	ldr	r0, [pc, #168]	; (dc74 <mem_manage_fault.isra.0+0xb4>)
    dbca:	2145      	movs	r1, #69	; 0x45
    dbcc:	f007 f8a8 	bl	14d20 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dbd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dbd2:	06d0      	lsls	r0, r2, #27
    dbd4:	d503      	bpl.n	dbde <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dbd6:	2145      	movs	r1, #69	; 0x45
    dbd8:	4827      	ldr	r0, [pc, #156]	; (dc78 <mem_manage_fault.isra.0+0xb8>)
    dbda:	f007 f8a1 	bl	14d20 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dbde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbe0:	0719      	lsls	r1, r3, #28
    dbe2:	d503      	bpl.n	dbec <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dbe4:	2145      	movs	r1, #69	; 0x45
    dbe6:	4825      	ldr	r0, [pc, #148]	; (dc7c <mem_manage_fault.isra.0+0xbc>)
    dbe8:	f007 f89a 	bl	14d20 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dbec:	4c20      	ldr	r4, [pc, #128]	; (dc70 <mem_manage_fault.isra.0+0xb0>)
    dbee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbf0:	079a      	lsls	r2, r3, #30
    dbf2:	d510      	bpl.n	dc16 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    dbf4:	2145      	movs	r1, #69	; 0x45
    dbf6:	4822      	ldr	r0, [pc, #136]	; (dc80 <mem_manage_fault.isra.0+0xc0>)
    dbf8:	f007 f892 	bl	14d20 <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    dbfc:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dbfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc00:	061b      	lsls	r3, r3, #24
    dc02:	d508      	bpl.n	dc16 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dc04:	2145      	movs	r1, #69	; 0x45
    dc06:	481f      	ldr	r0, [pc, #124]	; (dc84 <mem_manage_fault.isra.0+0xc4>)
    dc08:	f007 f88a 	bl	14d20 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    dc0c:	b11e      	cbz	r6, dc16 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dc0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dc14:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dc16:	4c16      	ldr	r4, [pc, #88]	; (dc70 <mem_manage_fault.isra.0+0xb0>)
    dc18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dc1a:	07d6      	lsls	r6, r2, #31
    dc1c:	d503      	bpl.n	dc26 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    dc1e:	2145      	movs	r1, #69	; 0x45
    dc20:	4819      	ldr	r0, [pc, #100]	; (dc88 <mem_manage_fault.isra.0+0xc8>)
    dc22:	f007 f87d 	bl	14d20 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dc26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc28:	0698      	lsls	r0, r3, #26
    dc2a:	d503      	bpl.n	dc34 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    dc2c:	2145      	movs	r1, #69	; 0x45
    dc2e:	4817      	ldr	r0, [pc, #92]	; (dc8c <mem_manage_fault.isra.0+0xcc>)
    dc30:	f007 f876 	bl	14d20 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dc34:	4b0e      	ldr	r3, [pc, #56]	; (dc70 <mem_manage_fault.isra.0+0xb0>)
    dc36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc38:	06d1      	lsls	r1, r2, #27
    dc3a:	d402      	bmi.n	dc42 <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    dc3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dc3e:	0792      	lsls	r2, r2, #30
    dc40:	d50d      	bpl.n	dc5e <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    dc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dc44:	06db      	lsls	r3, r3, #27
    dc46:	d50a      	bpl.n	dc5e <mem_manage_fault.isra.0+0x9e>
    dc48:	4911      	ldr	r1, [pc, #68]	; (dc90 <mem_manage_fault.isra.0+0xd0>)
    dc4a:	4812      	ldr	r0, [pc, #72]	; (dc94 <mem_manage_fault.isra.0+0xd4>)
    dc4c:	f240 124f 	movw	r2, #335	; 0x14f
    dc50:	f006 ffc8 	bl	14be4 <printk>
    dc54:	f240 114f 	movw	r1, #335	; 0x14f
    dc58:	480d      	ldr	r0, [pc, #52]	; (dc90 <mem_manage_fault.isra.0+0xd0>)
    dc5a:	f007 f84e 	bl	14cfa <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    dc5e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dc60:	4a03      	ldr	r2, [pc, #12]	; (dc70 <mem_manage_fault.isra.0+0xb0>)
    dc62:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dc64:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    dc68:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    dc6a:	7028      	strb	r0, [r5, #0]

	return reason;
}
    dc6c:	bd70      	pop	{r4, r5, r6, pc}
    dc6e:	bf00      	nop
    dc70:	e000ed00 	.word	0xe000ed00
    dc74:	00015fde 	.word	0x00015fde
    dc78:	00015ff9 	.word	0x00015ff9
    dc7c:	00016031 	.word	0x00016031
    dc80:	00016049 	.word	0x00016049
    dc84:	00016066 	.word	0x00016066
    dc88:	00016081 	.word	0x00016081
    dc8c:	000160a5 	.word	0x000160a5
    dc90:	000160d9 	.word	0x000160d9
    dc94:	00015b65 	.word	0x00015b65

0000dc98 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dc98:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dc9a:	4c23      	ldr	r4, [pc, #140]	; (dd28 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dc9c:	4606      	mov	r6, r0
    dc9e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dca0:	4822      	ldr	r0, [pc, #136]	; (dd2c <bus_fault.isra.0+0x94>)
    dca2:	2145      	movs	r1, #69	; 0x45
    dca4:	f007 f83c 	bl	14d20 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dca8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dcaa:	04d1      	lsls	r1, r2, #19
    dcac:	d503      	bpl.n	dcb6 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    dcae:	2145      	movs	r1, #69	; 0x45
    dcb0:	481f      	ldr	r0, [pc, #124]	; (dd30 <bus_fault.isra.0+0x98>)
    dcb2:	f007 f835 	bl	14d20 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    dcb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcb8:	051a      	lsls	r2, r3, #20
    dcba:	d503      	bpl.n	dcc4 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dcbc:	2145      	movs	r1, #69	; 0x45
    dcbe:	481d      	ldr	r0, [pc, #116]	; (dd34 <bus_fault.isra.0+0x9c>)
    dcc0:	f007 f82e 	bl	14d20 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    dcc4:	4c18      	ldr	r4, [pc, #96]	; (dd28 <bus_fault.isra.0+0x90>)
    dcc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcc8:	059b      	lsls	r3, r3, #22
    dcca:	d510      	bpl.n	dcee <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    dccc:	481a      	ldr	r0, [pc, #104]	; (dd38 <bus_fault.isra.0+0xa0>)
    dcce:	2145      	movs	r1, #69	; 0x45
    dcd0:	f007 f826 	bl	14d20 <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    dcd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    dcd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcd8:	0418      	lsls	r0, r3, #16
    dcda:	d508      	bpl.n	dcee <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    dcdc:	2145      	movs	r1, #69	; 0x45
    dcde:	4817      	ldr	r0, [pc, #92]	; (dd3c <bus_fault.isra.0+0xa4>)
    dce0:	f007 f81e 	bl	14d20 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    dce4:	b11e      	cbz	r6, dcee <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dce8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    dcec:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    dcee:	4c0e      	ldr	r4, [pc, #56]	; (dd28 <bus_fault.isra.0+0x90>)
    dcf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcf2:	0559      	lsls	r1, r3, #21
    dcf4:	d503      	bpl.n	dcfe <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    dcf6:	2145      	movs	r1, #69	; 0x45
    dcf8:	4811      	ldr	r0, [pc, #68]	; (dd40 <bus_fault.isra.0+0xa8>)
    dcfa:	f007 f811 	bl	14d20 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    dcfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd00:	05da      	lsls	r2, r3, #23
    dd02:	d50b      	bpl.n	dd1c <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    dd04:	2145      	movs	r1, #69	; 0x45
    dd06:	480f      	ldr	r0, [pc, #60]	; (dd44 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dd08:	f007 f80a 	bl	14d20 <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    dd0c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    dd0e:	4a06      	ldr	r2, [pc, #24]	; (dd28 <bus_fault.isra.0+0x90>)
    dd10:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dd12:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    dd16:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    dd18:	7028      	strb	r0, [r5, #0]

	return reason;
}
    dd1a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dd1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd1e:	049b      	lsls	r3, r3, #18
    dd20:	d5f4      	bpl.n	dd0c <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dd22:	2145      	movs	r1, #69	; 0x45
    dd24:	4808      	ldr	r0, [pc, #32]	; (dd48 <bus_fault.isra.0+0xb0>)
    dd26:	e7ef      	b.n	dd08 <bus_fault.isra.0+0x70>
    dd28:	e000ed00 	.word	0xe000ed00
    dd2c:	00016113 	.word	0x00016113
    dd30:	0001612e 	.word	0x0001612e
    dd34:	00016031 	.word	0x00016031
    dd38:	00016144 	.word	0x00016144
    dd3c:	00016162 	.word	0x00016162
    dd40:	0001617c 	.word	0x0001617c
    dd44:	0001619c 	.word	0x0001619c
    dd48:	000160a5 	.word	0x000160a5

0000dd4c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    dd4c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dd4e:	4c21      	ldr	r4, [pc, #132]	; (ddd4 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dd50:	2145      	movs	r1, #69	; 0x45
    dd52:	4821      	ldr	r0, [pc, #132]	; (ddd8 <usage_fault.isra.0+0x8c>)
    dd54:	f006 ffe4 	bl	14d20 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dd58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dd5a:	0195      	lsls	r5, r2, #6
    dd5c:	d503      	bpl.n	dd66 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    dd5e:	2145      	movs	r1, #69	; 0x45
    dd60:	481e      	ldr	r0, [pc, #120]	; (dddc <usage_fault.isra.0+0x90>)
    dd62:	f006 ffdd 	bl	14d20 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dd66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd68:	01dc      	lsls	r4, r3, #7
    dd6a:	d503      	bpl.n	dd74 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    dd6c:	2145      	movs	r1, #69	; 0x45
    dd6e:	481c      	ldr	r0, [pc, #112]	; (dde0 <usage_fault.isra.0+0x94>)
    dd70:	f006 ffd6 	bl	14d20 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dd74:	4d17      	ldr	r5, [pc, #92]	; (ddd4 <usage_fault.isra.0+0x88>)
    dd76:	6aac      	ldr	r4, [r5, #40]	; 0x28
    dd78:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    dd7c:	d004      	beq.n	dd88 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dd7e:	2145      	movs	r1, #69	; 0x45
    dd80:	4818      	ldr	r0, [pc, #96]	; (dde4 <usage_fault.isra.0+0x98>)
    dd82:	f006 ffcd 	bl	14d20 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    dd86:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dd88:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dd8a:	0318      	lsls	r0, r3, #12
    dd8c:	d503      	bpl.n	dd96 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    dd8e:	2145      	movs	r1, #69	; 0x45
    dd90:	4815      	ldr	r0, [pc, #84]	; (dde8 <usage_fault.isra.0+0x9c>)
    dd92:	f006 ffc5 	bl	14d20 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dd96:	4d0f      	ldr	r5, [pc, #60]	; (ddd4 <usage_fault.isra.0+0x88>)
    dd98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    dd9a:	0351      	lsls	r1, r2, #13
    dd9c:	d503      	bpl.n	dda6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dd9e:	2145      	movs	r1, #69	; 0x45
    dda0:	4812      	ldr	r0, [pc, #72]	; (ddec <usage_fault.isra.0+0xa0>)
    dda2:	f006 ffbd 	bl	14d20 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dda6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dda8:	039a      	lsls	r2, r3, #14
    ddaa:	d503      	bpl.n	ddb4 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    ddac:	2145      	movs	r1, #69	; 0x45
    ddae:	4810      	ldr	r0, [pc, #64]	; (ddf0 <usage_fault.isra.0+0xa4>)
    ddb0:	f006 ffb6 	bl	14d20 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    ddb4:	4d07      	ldr	r5, [pc, #28]	; (ddd4 <usage_fault.isra.0+0x88>)
    ddb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ddb8:	03db      	lsls	r3, r3, #15
    ddba:	d503      	bpl.n	ddc4 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    ddbc:	2145      	movs	r1, #69	; 0x45
    ddbe:	480d      	ldr	r0, [pc, #52]	; (ddf4 <usage_fault.isra.0+0xa8>)
    ddc0:	f006 ffae 	bl	14d20 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ddc4:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    ddc6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ddc8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ddcc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ddd0:	62ab      	str	r3, [r5, #40]	; 0x28
}
    ddd2:	bd38      	pop	{r3, r4, r5, pc}
    ddd4:	e000ed00 	.word	0xe000ed00
    ddd8:	000161b9 	.word	0x000161b9
    dddc:	000161d6 	.word	0x000161d6
    dde0:	000161ee 	.word	0x000161ee
    dde4:	0001620d 	.word	0x0001620d
    dde8:	0001623c 	.word	0x0001623c
    ddec:	0001625f 	.word	0x0001625f
    ddf0:	00016289 	.word	0x00016289
    ddf4:	000162a8 	.word	0x000162a8

0000ddf8 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    ddf8:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    ddfa:	4c1e      	ldr	r4, [pc, #120]	; (de74 <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    ddfc:	481e      	ldr	r0, [pc, #120]	; (de78 <secure_fault.isra.0+0x80>)
    ddfe:	2145      	movs	r1, #69	; 0x45
    de00:	f006 ff8e 	bl	14d20 <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    de04:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    de06:	6963      	ldr	r3, [r4, #20]
    de08:	0658      	lsls	r0, r3, #25
    de0a:	d503      	bpl.n	de14 <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    de0c:	2145      	movs	r1, #69	; 0x45
    de0e:	481b      	ldr	r0, [pc, #108]	; (de7c <secure_fault.isra.0+0x84>)
    de10:	f006 ff86 	bl	14d20 <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    de14:	6963      	ldr	r3, [r4, #20]
    de16:	07d9      	lsls	r1, r3, #31
    de18:	d508      	bpl.n	de2c <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    de1a:	2145      	movs	r1, #69	; 0x45
    de1c:	4818      	ldr	r0, [pc, #96]	; (de80 <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    de1e:	f006 ff7f 	bl	14d20 <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    de22:	6963      	ldr	r3, [r4, #20]
    de24:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    de28:	6163      	str	r3, [r4, #20]
}
    de2a:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    de2c:	6963      	ldr	r3, [r4, #20]
    de2e:	079a      	lsls	r2, r3, #30
    de30:	d502      	bpl.n	de38 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    de32:	2145      	movs	r1, #69	; 0x45
    de34:	4813      	ldr	r0, [pc, #76]	; (de84 <secure_fault.isra.0+0x8c>)
    de36:	e7f2      	b.n	de1e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    de38:	6963      	ldr	r3, [r4, #20]
    de3a:	075b      	lsls	r3, r3, #29
    de3c:	d502      	bpl.n	de44 <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    de3e:	2145      	movs	r1, #69	; 0x45
    de40:	4811      	ldr	r0, [pc, #68]	; (de88 <secure_fault.isra.0+0x90>)
    de42:	e7ec      	b.n	de1e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    de44:	6963      	ldr	r3, [r4, #20]
    de46:	0718      	lsls	r0, r3, #28
    de48:	d502      	bpl.n	de50 <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    de4a:	2145      	movs	r1, #69	; 0x45
    de4c:	480f      	ldr	r0, [pc, #60]	; (de8c <secure_fault.isra.0+0x94>)
    de4e:	e7e6      	b.n	de1e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    de50:	6963      	ldr	r3, [r4, #20]
    de52:	06d9      	lsls	r1, r3, #27
    de54:	d502      	bpl.n	de5c <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    de56:	2145      	movs	r1, #69	; 0x45
    de58:	480d      	ldr	r0, [pc, #52]	; (de90 <secure_fault.isra.0+0x98>)
    de5a:	e7e0      	b.n	de1e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    de5c:	6963      	ldr	r3, [r4, #20]
    de5e:	069a      	lsls	r2, r3, #26
    de60:	d502      	bpl.n	de68 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    de62:	2145      	movs	r1, #69	; 0x45
    de64:	480b      	ldr	r0, [pc, #44]	; (de94 <secure_fault.isra.0+0x9c>)
    de66:	e7da      	b.n	de1e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    de68:	6963      	ldr	r3, [r4, #20]
    de6a:	061b      	lsls	r3, r3, #24
    de6c:	d5d9      	bpl.n	de22 <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    de6e:	2145      	movs	r1, #69	; 0x45
    de70:	4809      	ldr	r0, [pc, #36]	; (de98 <secure_fault.isra.0+0xa0>)
    de72:	e7d4      	b.n	de1e <secure_fault.isra.0+0x26>
    de74:	e000edd0 	.word	0xe000edd0
    de78:	000162d8 	.word	0x000162d8
    de7c:	000162f6 	.word	0x000162f6
    de80:	0001630b 	.word	0x0001630b
    de84:	00016326 	.word	0x00016326
    de88:	00016349 	.word	0x00016349
    de8c:	00016369 	.word	0x00016369
    de90:	0001638b 	.word	0x0001638b
    de94:	000163a5 	.word	0x000163a5
    de98:	000163c4 	.word	0x000163c4

0000de9c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    de9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dea0:	4b7a      	ldr	r3, [pc, #488]	; (e08c <z_arm_fault+0x1f0>)
{
    dea2:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dea4:	685c      	ldr	r4, [r3, #4]
    dea6:	2600      	movs	r6, #0
{
    dea8:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    deaa:	f3c4 0708 	ubfx	r7, r4, #0, #9
    deae:	f386 8811 	msr	BASEPRI, r6
    deb2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    deb6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    deba:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    debe:	d11e      	bne.n	defe <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    dec0:	f012 0301 	ands.w	r3, r2, #1
    dec4:	d03a      	beq.n	df3c <z_arm_fault+0xa0>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    dec6:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    deca:	f002 0808 	and.w	r8, r2, #8
    dece:	f040 80d6 	bne.w	e07e <z_arm_fault+0x1e2>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    ded2:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    ded4:	bf54      	ite	pl
    ded6:	4605      	movpl	r5, r0
	*nested_exc = false;
    ded8:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    deda:	682a      	ldr	r2, [r5, #0]
    dedc:	4b6c      	ldr	r3, [pc, #432]	; (e090 <z_arm_fault+0x1f4>)
			*nested_exc = true;
    dede:	bf58      	it	pl
    dee0:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    dee2:	4413      	add	r3, r2
    dee4:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    dee6:	bf98      	it	ls
    dee8:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    deea:	2145      	movs	r1, #69	; 0x45
    deec:	4869      	ldr	r0, [pc, #420]	; (e094 <z_arm_fault+0x1f8>)
    deee:	f006 ff17 	bl	14d20 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    def2:	f1b8 0f00 	cmp.w	r8, #0
    def6:	d01e      	beq.n	df36 <z_arm_fault+0x9a>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    def8:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    defc:	b95d      	cbnz	r5, df16 <z_arm_fault+0x7a>
    defe:	f240 32f2 	movw	r2, #1010	; 0x3f2
    df02:	4965      	ldr	r1, [pc, #404]	; (e098 <z_arm_fault+0x1fc>)
    df04:	4865      	ldr	r0, [pc, #404]	; (e09c <z_arm_fault+0x200>)
    df06:	f006 fe6d 	bl	14be4 <printk>
    df0a:	f240 31f2 	movw	r1, #1010	; 0x3f2
    df0e:	4862      	ldr	r0, [pc, #392]	; (e098 <z_arm_fault+0x1fc>)
    df10:	f006 fef3 	bl	14cfa <assert_post_action>
    df14:	2500      	movs	r5, #0
	*recoverable = false;
    df16:	2300      	movs	r3, #0
    df18:	1efa      	subs	r2, r7, #3
    df1a:	4698      	mov	r8, r3
    df1c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    df20:	4613      	mov	r3, r2
    df22:	2b09      	cmp	r3, #9
    df24:	f200 8099 	bhi.w	e05a <z_arm_fault+0x1be>
    df28:	e8df f003 	tbb	[pc, r3]
    df2c:	6a8c880a 	.word	0x6a8c880a
    df30:	97979790 	.word	0x97979790
    df34:	9497      	.short	0x9497
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    df36:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    df3a:	e7df      	b.n	defc <z_arm_fault+0x60>
	*nested_exc = false;
    df3c:	461e      	mov	r6, r3
    df3e:	e7de      	b.n	defe <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
    df40:	2145      	movs	r1, #69	; 0x45
    df42:	4857      	ldr	r0, [pc, #348]	; (e0a0 <z_arm_fault+0x204>)
    df44:	f006 feec 	bl	14d20 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    df48:	4b50      	ldr	r3, [pc, #320]	; (e08c <z_arm_fault+0x1f0>)
	*recoverable = false;
    df4a:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    df4e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    df50:	f014 0402 	ands.w	r4, r4, #2
    df54:	d004      	beq.n	df60 <z_arm_fault+0xc4>
		PR_EXC("  Bus fault on vector table read");
    df56:	2145      	movs	r1, #69	; 0x45
    df58:	4852      	ldr	r0, [pc, #328]	; (e0a4 <z_arm_fault+0x208>)
	PR_FAULT_INFO(
    df5a:	f006 fee1 	bl	14d20 <z_log_minimal_printk>
    df5e:	e077      	b.n	e050 <z_arm_fault+0x1b4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    df60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    df62:	2a00      	cmp	r2, #0
    df64:	da1d      	bge.n	dfa2 <z_arm_fault+0x106>
		PR_EXC("  Debug event");
    df66:	2145      	movs	r1, #69	; 0x45
    df68:	484f      	ldr	r0, [pc, #316]	; (e0a8 <z_arm_fault+0x20c>)
    df6a:	f006 fed9 	bl	14d20 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    df6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df72:	b99b      	cbnz	r3, df9c <z_arm_fault+0x100>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    df74:	2220      	movs	r2, #32
    df76:	4629      	mov	r1, r5
    df78:	a802      	add	r0, sp, #8
    df7a:	f006 ffa8 	bl	14ece <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    df7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df80:	2e00      	cmp	r6, #0
    df82:	d077      	beq.n	e074 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    df84:	f3c3 0208 	ubfx	r2, r3, #0, #9
    df88:	b922      	cbnz	r2, df94 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    df8a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    df8e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    df92:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    df94:	4620      	mov	r0, r4
    df96:	a902      	add	r1, sp, #8
    df98:	f7ff fccc 	bl	d934 <z_arm_fatal_error>
}
    df9c:	b00a      	add	sp, #40	; 0x28
    df9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dfa4:	005b      	lsls	r3, r3, #1
    dfa6:	d540      	bpl.n	e02a <z_arm_fault+0x18e>
		PR_EXC("  Fault escalation (see below)");
    dfa8:	2145      	movs	r1, #69	; 0x45
    dfaa:	4840      	ldr	r0, [pc, #256]	; (e0ac <z_arm_fault+0x210>)
    dfac:	f006 feb8 	bl	14d20 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    dfb0:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    dfb2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    dfb6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    dfba:	429a      	cmp	r2, r3
    dfbc:	d00c      	beq.n	dfd8 <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
    dfbe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    dfc2:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    dfc6:	781b      	ldrb	r3, [r3, #0]
    dfc8:	b16b      	cbz	r3, dfe6 <z_arm_fault+0x14a>
			reason = mem_manage_fault(esf, 1, recoverable);
    dfca:	2001      	movs	r0, #1
    dfcc:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dfd0:	f7ff fdf6 	bl	dbc0 <mem_manage_fault.isra.0>
		reason = bus_fault(esf, 0, recoverable);
    dfd4:	4604      	mov	r4, r0
		break;
    dfd6:	e7ca      	b.n	df6e <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    dfd8:	2145      	movs	r1, #69	; 0x45
    dfda:	682a      	ldr	r2, [r5, #0]
    dfdc:	4834      	ldr	r0, [pc, #208]	; (e0b0 <z_arm_fault+0x214>)
    dfde:	f006 fe9f 	bl	14d20 <z_log_minimal_printk>
			reason = esf->basic.r0;
    dfe2:	682c      	ldr	r4, [r5, #0]
    dfe4:	e7c3      	b.n	df6e <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    dfe6:	4b33      	ldr	r3, [pc, #204]	; (e0b4 <z_arm_fault+0x218>)
    dfe8:	781b      	ldrb	r3, [r3, #0]
    dfea:	b12b      	cbz	r3, dff8 <z_arm_fault+0x15c>
			reason = bus_fault(esf, 1, recoverable);
    dfec:	2001      	movs	r0, #1
    dfee:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dff2:	f7ff fe51 	bl	dc98 <bus_fault.isra.0>
    dff6:	e7ed      	b.n	dfd4 <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
    dff8:	4b2f      	ldr	r3, [pc, #188]	; (e0b8 <z_arm_fault+0x21c>)
    dffa:	881b      	ldrh	r3, [r3, #0]
    dffc:	b29b      	uxth	r3, r3
    dffe:	b113      	cbz	r3, e006 <z_arm_fault+0x16a>
		reason = usage_fault(esf);
    e000:	f7ff fea4 	bl	dd4c <usage_fault.isra.0>
    e004:	e7e6      	b.n	dfd4 <z_arm_fault+0x138>
		} else if (SAU->SFSR != 0) {
    e006:	4b2d      	ldr	r3, [pc, #180]	; (e0bc <z_arm_fault+0x220>)
    e008:	695b      	ldr	r3, [r3, #20]
    e00a:	b113      	cbz	r3, e012 <z_arm_fault+0x176>
			secure_fault(esf);
    e00c:	f7ff fef4 	bl	ddf8 <secure_fault.isra.0>
    e010:	e7ad      	b.n	df6e <z_arm_fault+0xd2>
			__ASSERT(0,
    e012:	4921      	ldr	r1, [pc, #132]	; (e098 <z_arm_fault+0x1fc>)
    e014:	f240 22c3 	movw	r2, #707	; 0x2c3
    e018:	4820      	ldr	r0, [pc, #128]	; (e09c <z_arm_fault+0x200>)
    e01a:	f006 fde3 	bl	14be4 <printk>
    e01e:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    e022:	481d      	ldr	r0, [pc, #116]	; (e098 <z_arm_fault+0x1fc>)
    e024:	f006 fe69 	bl	14cfa <assert_post_action>
    e028:	e7a1      	b.n	df6e <z_arm_fault+0xd2>
    e02a:	491b      	ldr	r1, [pc, #108]	; (e098 <z_arm_fault+0x1fc>)
    e02c:	f240 22c7 	movw	r2, #711	; 0x2c7
    e030:	481a      	ldr	r0, [pc, #104]	; (e09c <z_arm_fault+0x200>)
    e032:	f006 fdd7 	bl	14be4 <printk>
    e036:	f240 21c7 	movw	r1, #711	; 0x2c7
    e03a:	e7f2      	b.n	e022 <z_arm_fault+0x186>
		reason = mem_manage_fault(esf, 0, recoverable);
    e03c:	2000      	movs	r0, #0
    e03e:	f10d 0107 	add.w	r1, sp, #7
    e042:	e7c5      	b.n	dfd0 <z_arm_fault+0x134>
		reason = bus_fault(esf, 0, recoverable);
    e044:	2000      	movs	r0, #0
    e046:	f10d 0107 	add.w	r1, sp, #7
    e04a:	e7d2      	b.n	dff2 <z_arm_fault+0x156>
		secure_fault(esf);
    e04c:	f7ff fed4 	bl	ddf8 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e050:	2400      	movs	r4, #0
}
    e052:	e78c      	b.n	df6e <z_arm_fault+0xd2>
	PR_FAULT_INFO(
    e054:	2145      	movs	r1, #69	; 0x45
    e056:	481a      	ldr	r0, [pc, #104]	; (e0c0 <z_arm_fault+0x224>)
    e058:	e77f      	b.n	df5a <z_arm_fault+0xbe>
	PR_FAULT_INFO("***** %s %d) *****",
    e05a:	491a      	ldr	r1, [pc, #104]	; (e0c4 <z_arm_fault+0x228>)
    e05c:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    e060:	4a19      	ldr	r2, [pc, #100]	; (e0c8 <z_arm_fault+0x22c>)
    e062:	481a      	ldr	r0, [pc, #104]	; (e0cc <z_arm_fault+0x230>)
    e064:	bf08      	it	eq
    e066:	460a      	moveq	r2, r1
    e068:	f1a7 0310 	sub.w	r3, r7, #16
    e06c:	2145      	movs	r1, #69	; 0x45
    e06e:	f006 fe57 	bl	14d20 <z_log_minimal_printk>
    e072:	e7ed      	b.n	e050 <z_arm_fault+0x1b4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e074:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e078:	f023 0301 	bic.w	r3, r3, #1
    e07c:	e789      	b.n	df92 <z_arm_fault+0xf6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e07e:	f1b8 0f00 	cmp.w	r8, #0
    e082:	f47f af3b 	bne.w	defc <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    e086:	4605      	mov	r5, r0
			*nested_exc = true;
    e088:	2601      	movs	r6, #1
    e08a:	e737      	b.n	defc <z_arm_fault+0x60>
    e08c:	e000ed00 	.word	0xe000ed00
    e090:	0105eda6 	.word	0x0105eda6
    e094:	0001640a 	.word	0x0001640a
    e098:	000160d9 	.word	0x000160d9
    e09c:	00015b65 	.word	0x00015b65
    e0a0:	0001642e 	.word	0x0001642e
    e0a4:	0001644a 	.word	0x0001644a
    e0a8:	00016470 	.word	0x00016470
    e0ac:	00016483 	.word	0x00016483
    e0b0:	000164a7 	.word	0x000164a7
    e0b4:	e000ed29 	.word	0xe000ed29
    e0b8:	e000ed2a 	.word	0xe000ed2a
    e0bc:	e000edd0 	.word	0xe000edd0
    e0c0:	000164c8 	.word	0x000164c8
    e0c4:	000163dc 	.word	0x000163dc
    e0c8:	000163f1 	.word	0x000163f1
    e0cc:	000164f1 	.word	0x000164f1

0000e0d0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e0d0:	4b04      	ldr	r3, [pc, #16]	; (e0e4 <z_arm_fault_init+0x14>)
    e0d2:	695a      	ldr	r2, [r3, #20]
    e0d4:	f042 0210 	orr.w	r2, r2, #16
    e0d8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e0da:	695a      	ldr	r2, [r3, #20]
    e0dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e0e0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e0e2:	4770      	bx	lr
    e0e4:	e000ed00 	.word	0xe000ed00

0000e0e8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    e0e8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    e0ec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    e0f0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    e0f2:	4672      	mov	r2, lr
	bl z_arm_fault
    e0f4:	f7ff fed2 	bl	de9c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    e0f8:	bd01      	pop	{r0, pc}
    e0fa:	bf00      	nop

0000e0fc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e0fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e0fe:	2120      	movs	r1, #32
    e100:	4803      	ldr	r0, [pc, #12]	; (e110 <z_arm_interrupt_init+0x14>)
    e102:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e104:	3301      	adds	r3, #1
    e106:	2b41      	cmp	r3, #65	; 0x41
    e108:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e10c:	d1f9      	bne.n	e102 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e10e:	4770      	bx	lr
    e110:	e000e100 	.word	0xe000e100

0000e114 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    e114:	2000      	movs	r0, #0
    msr CONTROL, r0
    e116:	f380 8814 	msr	CONTROL, r0
    isb
    e11a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    e11e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    e120:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    e124:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    e128:	f007 f928 	bl	1537c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    e12c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    e12e:	490e      	ldr	r1, [pc, #56]	; (e168 <__start+0x54>)
    str r0, [r1]
    e130:	6008      	str	r0, [r1, #0]
    dsb
    e132:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e136:	480d      	ldr	r0, [pc, #52]	; (e16c <__start+0x58>)
    msr msp, r0
    e138:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    e13c:	f000 f83c 	bl	e1b8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    e140:	2020      	movs	r0, #32
    msr BASEPRI, r0
    e142:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    e146:	480a      	ldr	r0, [pc, #40]	; (e170 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    e148:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    e14c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    e14e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    e152:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    e156:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    e158:	4308      	orrs	r0, r1
    msr CONTROL, r0
    e15a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    e15e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    e162:	f7ff fc5d 	bl	da20 <z_arm_prep_c>
    e166:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    e168:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    e16c:	20002620 	.word	0x20002620
    ldr r0, =z_interrupt_stacks
    e170:	20002760 	.word	0x20002760

0000e174 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e174:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e178:	4905      	ldr	r1, [pc, #20]	; (e190 <sys_arch_reboot+0x1c>)
    e17a:	4b06      	ldr	r3, [pc, #24]	; (e194 <sys_arch_reboot+0x20>)
    e17c:	68ca      	ldr	r2, [r1, #12]
    e17e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e182:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e184:	60cb      	str	r3, [r1, #12]
    e186:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e18a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e18c:	e7fd      	b.n	e18a <sys_arch_reboot+0x16>
    e18e:	bf00      	nop
    e190:	e000ed00 	.word	0xe000ed00
    e194:	05fa0004 	.word	0x05fa0004

0000e198 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    e198:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    e19a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    e19c:	4a05      	ldr	r2, [pc, #20]	; (e1b4 <z_arm_clear_arm_mpu_config+0x1c>)
    e19e:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    e1a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    e1a4:	428b      	cmp	r3, r1
    e1a6:	d100      	bne.n	e1aa <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    e1a8:	4770      	bx	lr
  mpu->RNR = rnr;
    e1aa:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    e1ac:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    e1ae:	3301      	adds	r3, #1
    e1b0:	e7f8      	b.n	e1a4 <z_arm_clear_arm_mpu_config+0xc>
    e1b2:	bf00      	nop
    e1b4:	e000ed90 	.word	0xe000ed90

0000e1b8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    e1b8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    e1ba:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    e1bc:	2400      	movs	r4, #0
    e1be:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    e1c2:	f7ff ffe9 	bl	e198 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    e1c6:	4a0e      	ldr	r2, [pc, #56]	; (e200 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    e1c8:	4623      	mov	r3, r4
    e1ca:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    e1cc:	f04f 34ff 	mov.w	r4, #4294967295
    e1d0:	f103 0020 	add.w	r0, r3, #32
    e1d4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e1d6:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    e1d8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    e1dc:	d1f8      	bne.n	e1d0 <z_arm_init_arch_hw_at_boot+0x18>
    e1de:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e1e0:	f04f 30ff 	mov.w	r0, #4294967295
    e1e4:	f103 0260 	add.w	r2, r3, #96	; 0x60
    e1e8:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e1ea:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    e1ec:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    e1f0:	d1f8      	bne.n	e1e4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    e1f2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    e1f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e1f8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    e1fc:	bd10      	pop	{r4, pc}
    e1fe:	bf00      	nop
    e200:	e000e100 	.word	0xe000e100

0000e204 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    e204:	4b06      	ldr	r3, [pc, #24]	; (e220 <z_impl_k_thread_abort+0x1c>)
    e206:	689b      	ldr	r3, [r3, #8]
    e208:	4283      	cmp	r3, r0
    e20a:	d107      	bne.n	e21c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e20c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e210:	b123      	cbz	r3, e21c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e212:	4a04      	ldr	r2, [pc, #16]	; (e224 <z_impl_k_thread_abort+0x20>)
    e214:	6853      	ldr	r3, [r2, #4]
    e216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e21a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    e21c:	f003 bba4 	b.w	11968 <z_thread_abort>
    e220:	20000a2c 	.word	0x20000a2c
    e224:	e000ed00 	.word	0xe000ed00

0000e228 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    e228:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    e22a:	4b0d      	ldr	r3, [pc, #52]	; (e260 <tz_nonsecure_state_setup+0x38>)
    e22c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    e22e:	6803      	ldr	r3, [r0, #0]
    e230:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    e234:	6843      	ldr	r3, [r0, #4]
    e236:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    e23a:	7b02      	ldrb	r2, [r0, #12]
    e23c:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    e240:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    e244:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    e248:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    e24a:	bf48      	it	mi
    e24c:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    e250:	b109      	cbz	r1, e256 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    e252:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    e256:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
    e25a:	f3bf 8f6f 	isb	sy
}
    e25e:	4770      	bx	lr
    e260:	e002ed00 	.word	0xe002ed00

0000e264 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e264:	4a08      	ldr	r2, [pc, #32]	; (e288 <tz_nbanked_exception_target_state_set+0x24>)
    e266:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    e268:	b148      	cbz	r0, e27e <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    e26a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e26e:	041b      	lsls	r3, r3, #16
    e270:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e272:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    e27a:	60d3      	str	r3, [r2, #12]
}
    e27c:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e27e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    e280:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e284:	e7f5      	b.n	e272 <tz_nbanked_exception_target_state_set+0xe>
    e286:	bf00      	nop
    e288:	e000ed00 	.word	0xe000ed00

0000e28c <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e28c:	4a08      	ldr	r2, [pc, #32]	; (e2b0 <tz_nonsecure_exception_prio_config+0x24>)
    e28e:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    e290:	b140      	cbz	r0, e2a4 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e292:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    e294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e29c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    e2a0:	60d3      	str	r3, [r2, #12]
}
    e2a2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    e2a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    e2a8:	041b      	lsls	r3, r3, #16
    e2aa:	0c1b      	lsrs	r3, r3, #16
    e2ac:	e7f4      	b.n	e298 <tz_nonsecure_exception_prio_config+0xc>
    e2ae:	bf00      	nop
    e2b0:	e000ed00 	.word	0xe000ed00

0000e2b4 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e2b4:	4a08      	ldr	r2, [pc, #32]	; (e2d8 <tz_nonsecure_system_reset_req_block+0x24>)
    e2b6:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    e2b8:	b140      	cbz	r0, e2cc <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    e2ba:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    e2bc:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    e2c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    e2c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    e2c8:	60d3      	str	r3, [r2, #12]
}
    e2ca:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    e2cc:	f023 0308 	bic.w	r3, r3, #8
    e2d0:	041b      	lsls	r3, r3, #16
    e2d2:	0c1b      	lsrs	r3, r3, #16
    e2d4:	e7f4      	b.n	e2c0 <tz_nonsecure_system_reset_req_block+0xc>
    e2d6:	bf00      	nop
    e2d8:	e000ed00 	.word	0xe000ed00

0000e2dc <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    e2dc:	4a03      	ldr	r2, [pc, #12]	; (e2ec <tz_nonsecure_fpu_access_enable+0x10>)
    e2de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    e2e2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    e2e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    e2ea:	4770      	bx	lr
    e2ec:	e000ed00 	.word	0xe000ed00

0000e2f0 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    e2f0:	4b08      	ldr	r3, [pc, #32]	; (e314 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    e2f2:	681a      	ldr	r2, [r3, #0]
    e2f4:	b118      	cbz	r0, e2fe <tz_sau_configure+0xe>
    e2f6:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    e2fa:	601a      	str	r2, [r3, #0]
		}
	}
}
    e2fc:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    e2fe:	f022 0201 	bic.w	r2, r2, #1
    e302:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    e304:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    e306:	b111      	cbz	r1, e30e <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    e308:	f042 0202 	orr.w	r2, r2, #2
    e30c:	e7f5      	b.n	e2fa <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    e30e:	f022 0202 	bic.w	r2, r2, #2
    e312:	e7f2      	b.n	e2fa <tz_sau_configure+0xa>
    e314:	e000edd0 	.word	0xe000edd0

0000e318 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e31a:	4c09      	ldr	r4, [pc, #36]	; (e340 <z_arm_configure_static_mpu_regions+0x28>)
    e31c:	4a09      	ldr	r2, [pc, #36]	; (e344 <z_arm_configure_static_mpu_regions+0x2c>)
    e31e:	4623      	mov	r3, r4
    e320:	2101      	movs	r1, #1
    e322:	4809      	ldr	r0, [pc, #36]	; (e348 <z_arm_configure_static_mpu_regions+0x30>)
    e324:	f000 f91a 	bl	e55c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e328:	2300      	movs	r3, #0
    e32a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e32c:	4b07      	ldr	r3, [pc, #28]	; (e34c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e32e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e330:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e332:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e334:	9301      	str	r3, [sp, #4]
    e336:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e338:	f000 f92c 	bl	e594 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e33c:	b004      	add	sp, #16
    e33e:	bd10      	pop	{r4, pc}
    e340:	20008000 	.word	0x20008000
    e344:	20000000 	.word	0x20000000
    e348:	00015858 	.word	0x00015858
    e34c:	20000160 	.word	0x20000160

0000e350 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e350:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e352:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e354:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e356:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e35a:	f004 031f 	and.w	r3, r4, #31
    e35e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e360:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e362:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e364:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e368:	4904      	ldr	r1, [pc, #16]	; (e37c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e36a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e36e:	f043 0301 	orr.w	r3, r3, #1
    e372:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e374:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e376:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e378:	bd10      	pop	{r4, pc}
    e37a:	bf00      	nop
    e37c:	e000ed90 	.word	0xe000ed90

0000e380 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    e380:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e382:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    e384:	680c      	ldr	r4, [r1, #0]
{
    e386:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    e388:	890a      	ldrh	r2, [r1, #8]
    e38a:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    e38c:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e38e:	3b01      	subs	r3, #1
    e390:	f024 041f 	bic.w	r4, r4, #31
    e394:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    e396:	f002 021f 	and.w	r2, r2, #31
    e39a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e39e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e3a2:	280f      	cmp	r0, #15
    e3a4:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    e3a6:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e3aa:	9303      	str	r3, [sp, #12]
    e3ac:	d909      	bls.n	e3c2 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e3ae:	4602      	mov	r2, r0
    e3b0:	2145      	movs	r1, #69	; 0x45
    e3b2:	4806      	ldr	r0, [pc, #24]	; (e3cc <mpu_configure_region+0x4c>)
    e3b4:	f006 fcb4 	bl	14d20 <z_log_minimal_printk>
    e3b8:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    e3bc:	4620      	mov	r0, r4
    e3be:	b005      	add	sp, #20
    e3c0:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    e3c2:	4669      	mov	r1, sp
    e3c4:	f7ff ffc4 	bl	e350 <region_init>
	return region_allocate_and_init(index,
    e3c8:	e7f8      	b.n	e3bc <mpu_configure_region+0x3c>
    e3ca:	bf00      	nop
    e3cc:	0001650d 	.word	0x0001650d

0000e3d0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3d4:	4689      	mov	r9, r1
    e3d6:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e3d8:	4606      	mov	r6, r0
    e3da:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    e3de:	4d52      	ldr	r5, [pc, #328]	; (e528 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e3e0:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e3e2:	45c8      	cmp	r8, r9
    e3e4:	da23      	bge.n	e42e <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    e3e6:	6877      	ldr	r7, [r6, #4]
    e3e8:	2f00      	cmp	r7, #0
    e3ea:	d042      	beq.n	e472 <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    e3ec:	2f1f      	cmp	r7, #31
    e3ee:	d917      	bls.n	e420 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    e3f0:	06fb      	lsls	r3, r7, #27
    e3f2:	d115      	bne.n	e420 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    e3f4:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    e3f8:	f01a 0f1f 	tst.w	sl, #31
    e3fc:	d110      	bne.n	e420 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3fe:	4650      	mov	r0, sl
    e400:	f006 fd14 	bl	14e2c <arm_cmse_mpu_region_get>
    e404:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e406:	eb07 000a 	add.w	r0, r7, sl
    e40a:	3801      	subs	r0, #1
    e40c:	f006 fd0e 	bl	14e2c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e410:	4583      	cmp	fp, r0
    e412:	d010      	beq.n	e436 <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    e414:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e418:	465a      	mov	r2, fp
    e41a:	2145      	movs	r1, #69	; 0x45
    e41c:	4843      	ldr	r0, [pc, #268]	; (e52c <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    e41e:	e002      	b.n	e426 <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e420:	4642      	mov	r2, r8
    e422:	2145      	movs	r1, #69	; 0x45
    e424:	4842      	ldr	r0, [pc, #264]	; (e530 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e426:	f006 fc7b 	bl	14d20 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e42a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e42e:	4620      	mov	r0, r4
    e430:	b005      	add	sp, #20
    e432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e436:	f11b 0f16 	cmn.w	fp, #22
    e43a:	d0ed      	beq.n	e418 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    e43c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e43e:	455b      	cmp	r3, fp
    e440:	dbea      	blt.n	e418 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    e442:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e446:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    e448:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e44c:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e44e:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e452:	e9d6 3200 	ldrd	r3, r2, [r6]
    e456:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e458:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e45a:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e45e:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e462:	d11c      	bne.n	e49e <mpu_configure_regions_and_partition.constprop.0+0xce>
    e464:	4557      	cmp	r7, sl
    e466:	d108      	bne.n	e47a <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    e468:	4631      	mov	r1, r6
    e46a:	fa5f f08b 	uxtb.w	r0, fp
    e46e:	f7ff ff87 	bl	e380 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e472:	f108 0801 	add.w	r8, r8, #1
    e476:	360c      	adds	r6, #12
    e478:	e7b3      	b.n	e3e2 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e47a:	4631      	mov	r1, r6
	MPU->RNR = index;
    e47c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e480:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e482:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e486:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e48a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e48c:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    e48e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e490:	f7ff ff76 	bl	e380 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e494:	f110 0f16 	cmn.w	r0, #22
    e498:	d0c7      	beq.n	e42a <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    e49a:	1c44      	adds	r4, r0, #1
    e49c:	e7e9      	b.n	e472 <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    e49e:	3b01      	subs	r3, #1
    e4a0:	4557      	cmp	r7, sl
    e4a2:	b2e0      	uxtb	r0, r4
    e4a4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e4a8:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    e4ac:	d106      	bne.n	e4bc <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e4ae:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    e4b0:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e4b2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e4b6:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e4b8:	612b      	str	r3, [r5, #16]
			reg_index =
    e4ba:	e7e9      	b.n	e490 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e4bc:	6929      	ldr	r1, [r5, #16]
    e4be:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e4c2:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e4c4:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    e4c6:	4631      	mov	r1, r6
    e4c8:	f7ff ff5a 	bl	e380 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e4cc:	f110 0f16 	cmn.w	r0, #22
    e4d0:	d0ab      	beq.n	e42a <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    e4d2:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e4d6:	68ea      	ldr	r2, [r5, #12]
    e4d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e4dc:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    e4de:	f362 0304 	bfi	r3, r2, #0, #5
    e4e2:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e4e6:	692b      	ldr	r3, [r5, #16]
    e4e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e4ec:	085b      	lsrs	r3, r3, #1
    e4ee:	f363 1247 	bfi	r2, r3, #5, #3
    e4f2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    e4f6:	e9d6 3200 	ldrd	r3, r2, [r6]
    e4fa:	4413      	add	r3, r2
    e4fc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e4fe:	f023 031f 	bic.w	r3, r3, #31
    e502:	443b      	add	r3, r7
			reg_index++;
    e504:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e506:	eba3 0a0a 	sub.w	sl, r3, sl
    e50a:	b2e0      	uxtb	r0, r4
    e50c:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    e510:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    e512:	9303      	str	r3, [sp, #12]
    e514:	d903      	bls.n	e51e <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e516:	4602      	mov	r2, r0
    e518:	2145      	movs	r1, #69	; 0x45
    e51a:	4806      	ldr	r0, [pc, #24]	; (e534 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    e51c:	e783      	b.n	e426 <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    e51e:	4669      	mov	r1, sp
    e520:	f7ff ff16 	bl	e350 <region_init>
    e524:	e7b9      	b.n	e49a <mpu_configure_regions_and_partition.constprop.0+0xca>
    e526:	bf00      	nop
    e528:	e000ed90 	.word	0xe000ed90
    e52c:	00016560 	.word	0x00016560
    e530:	00016538 	.word	0x00016538
    e534:	0001650d 	.word	0x0001650d

0000e538 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e538:	2205      	movs	r2, #5
    e53a:	4b03      	ldr	r3, [pc, #12]	; (e548 <arm_core_mpu_enable+0x10>)
    e53c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    e53e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e542:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e546:	4770      	bx	lr
    e548:	e000ed90 	.word	0xe000ed90

0000e54c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    e54c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e550:	2200      	movs	r2, #0
    e552:	4b01      	ldr	r3, [pc, #4]	; (e558 <arm_core_mpu_disable+0xc>)
    e554:	605a      	str	r2, [r3, #4]
}
    e556:	4770      	bx	lr
    e558:	e000ed90 	.word	0xe000ed90

0000e55c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    e55c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e55e:	4c0a      	ldr	r4, [pc, #40]	; (e588 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e560:	7822      	ldrb	r2, [r4, #0]
    e562:	f7ff ff35 	bl	e3d0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e566:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e568:	3016      	adds	r0, #22
    e56a:	d10c      	bne.n	e586 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e56c:	4907      	ldr	r1, [pc, #28]	; (e58c <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e56e:	4808      	ldr	r0, [pc, #32]	; (e590 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e570:	f240 1211 	movw	r2, #273	; 0x111
    e574:	f006 fb36 	bl	14be4 <printk>
			regions_num);
	}
}
    e578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e57c:	f240 1111 	movw	r1, #273	; 0x111
    e580:	4802      	ldr	r0, [pc, #8]	; (e58c <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e582:	f006 bbba 	b.w	14cfa <assert_post_action>
}
    e586:	bd10      	pop	{r4, pc}
    e588:	2000144c 	.word	0x2000144c
    e58c:	00016588 	.word	0x00016588
    e590:	00015b65 	.word	0x00015b65

0000e594 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    e594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e598:	4d2d      	ldr	r5, [pc, #180]	; (e650 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    e59a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e59c:	4606      	mov	r6, r0
    e59e:	f04f 0800 	mov.w	r8, #0
    e5a2:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e5a4:	4f2b      	ldr	r7, [pc, #172]	; (e654 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e5a6:	45d0      	cmp	r8, sl
    e5a8:	db02      	blt.n	e5b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    e5aa:	b003      	add	sp, #12
    e5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e5b0:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e5b4:	f1b9 0f00 	cmp.w	r9, #0
    e5b8:	d044      	beq.n	e644 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e5ba:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5bc:	4608      	mov	r0, r1
    e5be:	9101      	str	r1, [sp, #4]
    e5c0:	f006 fc34 	bl	14e2c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e5c4:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e5c6:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e5c8:	eb09 0001 	add.w	r0, r9, r1
    e5cc:	3801      	subs	r0, #1
    e5ce:	f006 fc2d 	bl	14e2c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e5d2:	4284      	cmp	r4, r0
    e5d4:	f04f 0214 	mov.w	r2, #20
    e5d8:	4b1f      	ldr	r3, [pc, #124]	; (e658 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    e5da:	d013      	beq.n	e604 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e5dc:	f06f 0315 	mvn.w	r3, #21
    e5e0:	fb02 f808 	mul.w	r8, r2, r8
    e5e4:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e5e8:	f240 1221 	movw	r2, #289	; 0x121
    e5ec:	491b      	ldr	r1, [pc, #108]	; (e65c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e5ee:	481c      	ldr	r0, [pc, #112]	; (e660 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    e5f0:	f006 faf8 	bl	14be4 <printk>
    e5f4:	f240 1121 	movw	r1, #289	; 0x121
    e5f8:	4818      	ldr	r0, [pc, #96]	; (e65c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    e5fa:	b003      	add	sp, #12
    e5fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e600:	f006 bb7b 	b.w	14cfa <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e604:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e608:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e60a:	d0ed      	beq.n	e5e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e60c:	7819      	ldrb	r1, [r3, #0]
    e60e:	42a1      	cmp	r1, r4
    e610:	ddea      	ble.n	e5e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e612:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e616:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    e618:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    e61a:	68fc      	ldr	r4, [r7, #12]
    e61c:	f100 0108 	add.w	r1, r0, #8
    e620:	7b00      	ldrb	r0, [r0, #12]
    e622:	f364 0004 	bfi	r0, r4, #0, #5
    e626:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e628:	6938      	ldr	r0, [r7, #16]
    e62a:	790c      	ldrb	r4, [r1, #4]
    e62c:	0840      	lsrs	r0, r0, #1
    e62e:	f360 1447 	bfi	r4, r0, #5, #3
    e632:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e634:	68f9      	ldr	r1, [r7, #12]
    e636:	f021 011f 	bic.w	r1, r1, #31
    e63a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e63c:	6939      	ldr	r1, [r7, #16]
    e63e:	f021 011f 	bic.w	r1, r1, #31
    e642:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e644:	f108 0801 	add.w	r8, r8, #1
    e648:	3514      	adds	r5, #20
    e64a:	360c      	adds	r6, #12
    e64c:	e7ab      	b.n	e5a6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e64e:	bf00      	nop
    e650:	20000968 	.word	0x20000968
    e654:	e000ed90 	.word	0xe000ed90
    e658:	2000144c 	.word	0x2000144c
    e65c:	00016588 	.word	0x00016588
    e660:	00015b65 	.word	0x00015b65

0000e664 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    e664:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e666:	4d1b      	ldr	r5, [pc, #108]	; (e6d4 <z_arm_mpu_init+0x70>)
    e668:	682e      	ldr	r6, [r5, #0]
    e66a:	2e10      	cmp	r6, #16
    e66c:	d90d      	bls.n	e68a <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e66e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e672:	4919      	ldr	r1, [pc, #100]	; (e6d8 <z_arm_mpu_init+0x74>)
    e674:	4819      	ldr	r0, [pc, #100]	; (e6dc <z_arm_mpu_init+0x78>)
    e676:	f006 fab5 	bl	14be4 <printk>
    e67a:	4817      	ldr	r0, [pc, #92]	; (e6d8 <z_arm_mpu_init+0x74>)
    e67c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e680:	f006 fb3b 	bl	14cfa <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e684:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    e688:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    e68a:	f7ff ff5f 	bl	e54c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e68e:	2000      	movs	r0, #0
	MPU->MAIR0 =
    e690:	4c13      	ldr	r4, [pc, #76]	; (e6e0 <z_arm_mpu_init+0x7c>)
    e692:	4a14      	ldr	r2, [pc, #80]	; (e6e4 <z_arm_mpu_init+0x80>)
    e694:	6322      	str	r2, [r4, #48]	; 0x30
    e696:	4286      	cmp	r6, r0
    e698:	d115      	bne.n	e6c6 <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
    e69a:	4b13      	ldr	r3, [pc, #76]	; (e6e8 <z_arm_mpu_init+0x84>)
    e69c:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    e69e:	f7ff ff4b 	bl	e538 <arm_core_mpu_enable>
	__ASSERT(
    e6a2:	6823      	ldr	r3, [r4, #0]
    e6a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e6a8:	2b10      	cmp	r3, #16
    e6aa:	d00a      	beq.n	e6c2 <z_arm_mpu_init+0x5e>
    e6ac:	490a      	ldr	r1, [pc, #40]	; (e6d8 <z_arm_mpu_init+0x74>)
    e6ae:	480b      	ldr	r0, [pc, #44]	; (e6dc <z_arm_mpu_init+0x78>)
    e6b0:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
    e6b4:	f006 fa96 	bl	14be4 <printk>
    e6b8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    e6bc:	4806      	ldr	r0, [pc, #24]	; (e6d8 <z_arm_mpu_init+0x74>)
    e6be:	f006 fb1c 	bl	14cfa <assert_post_action>
	return 0;
    e6c2:	2000      	movs	r0, #0
    e6c4:	e7e0      	b.n	e688 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e6c6:	6869      	ldr	r1, [r5, #4]
    e6c8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e6cc:	f7ff fe40 	bl	e350 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e6d0:	3001      	adds	r0, #1
    e6d2:	e7e0      	b.n	e696 <z_arm_mpu_init+0x32>
    e6d4:	00015864 	.word	0x00015864
    e6d8:	00016588 	.word	0x00016588
    e6dc:	00015b65 	.word	0x00015b65
    e6e0:	e000ed90 	.word	0xe000ed90
    e6e4:	0044ffaa 	.word	0x0044ffaa
    e6e8:	2000144c 	.word	0x2000144c

0000e6ec <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e6ec:	4b01      	ldr	r3, [pc, #4]	; (e6f4 <__stdout_hook_install+0x8>)
    e6ee:	6018      	str	r0, [r3, #0]
}
    e6f0:	4770      	bx	lr
    e6f2:	bf00      	nop
    e6f4:	20000024 	.word	0x20000024

0000e6f8 <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
    e6f8:	b510      	push	{r4, lr}
	err = adp536x_init(ADP536X_I2C_DEV_NAME);
    e6fa:	482a      	ldr	r0, [pc, #168]	; (e7a4 <thingy91_board_init+0xac>)
    e6fc:	f7fe fdc2 	bl	d284 <adp536x_init>
	if (err) {
    e700:	4604      	mov	r4, r0
    e702:	b158      	cbz	r0, e71c <thingy91_board_init+0x24>
		LOG_ERR("ADP536X failed to initialize, error: %d\n", err);
    e704:	2145      	movs	r1, #69	; 0x45
    e706:	4602      	mov	r2, r0
    e708:	4827      	ldr	r0, [pc, #156]	; (e7a8 <thingy91_board_init+0xb0>)
		LOG_ERR("Could not enable charging: %d\n", err);
    e70a:	f006 fb09 	bl	14d20 <z_log_minimal_printk>
	int err;

	err = power_mgmt_init();
	if (err) {
		LOG_ERR("power_mgmt_init failed with error: %d", err);
    e70e:	4622      	mov	r2, r4
    e710:	2145      	movs	r1, #69	; 0x45
    e712:	4826      	ldr	r0, [pc, #152]	; (e7ac <thingy91_board_init+0xb4>)
    e714:	f006 fb04 	bl	14d20 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
    e718:	4620      	mov	r0, r4
    e71a:	bd10      	pop	{r4, pc}
	err = adp536x_buck_1v8_set();
    e71c:	f006 fb2a 	bl	14d74 <adp536x_buck_1v8_set>
	if (err) {
    e720:	4604      	mov	r4, r0
    e722:	b118      	cbz	r0, e72c <thingy91_board_init+0x34>
		LOG_ERR("Could not set buck to 1.8 V, error: %d\n", err);
    e724:	4602      	mov	r2, r0
    e726:	2145      	movs	r1, #69	; 0x45
    e728:	4821      	ldr	r0, [pc, #132]	; (e7b0 <thingy91_board_init+0xb8>)
    e72a:	e7ee      	b.n	e70a <thingy91_board_init+0x12>
	err = adp536x_buckbst_3v3_set();
    e72c:	f006 fb2e 	bl	14d8c <adp536x_buckbst_3v3_set>
	if (err) {
    e730:	4604      	mov	r4, r0
    e732:	b118      	cbz	r0, e73c <thingy91_board_init+0x44>
		LOG_ERR("Could not set buck/boost to 3.3 V, error: %d\n", err);
    e734:	4602      	mov	r2, r0
    e736:	2145      	movs	r1, #69	; 0x45
    e738:	481e      	ldr	r0, [pc, #120]	; (e7b4 <thingy91_board_init+0xbc>)
    e73a:	e7e6      	b.n	e70a <thingy91_board_init+0x12>
	err = adp536x_buckbst_enable(true);
    e73c:	2001      	movs	r0, #1
    e73e:	f006 fb2a 	bl	14d96 <adp536x_buckbst_enable>
	if (err) {
    e742:	4604      	mov	r4, r0
    e744:	b118      	cbz	r0, e74e <thingy91_board_init+0x56>
		LOG_ERR("Could not enable buck/boost output, error: %d\n", err);
    e746:	4602      	mov	r2, r0
    e748:	2145      	movs	r1, #69	; 0x45
    e74a:	481b      	ldr	r0, [pc, #108]	; (e7b8 <thingy91_board_init+0xc0>)
    e74c:	e7dd      	b.n	e70a <thingy91_board_init+0x12>
	err = adp536x_buck_discharge_set(true);
    e74e:	2001      	movs	r0, #1
    e750:	f006 fb15 	bl	14d7e <adp536x_buck_discharge_set>
	if (err) {
    e754:	4604      	mov	r4, r0
    e756:	2800      	cmp	r0, #0
    e758:	d1d9      	bne.n	e70e <thingy91_board_init+0x16>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
    e75a:	2007      	movs	r0, #7
    e75c:	f006 faf8 	bl	14d50 <adp536x_vbus_current_set>
	if (err) {
    e760:	4604      	mov	r4, r0
    e762:	b118      	cbz	r0, e76c <thingy91_board_init+0x74>
		LOG_ERR("Could not set VBUS current limit, error: %d\n", err);
    e764:	4602      	mov	r2, r0
    e766:	2145      	movs	r1, #69	; 0x45
    e768:	4814      	ldr	r0, [pc, #80]	; (e7bc <thingy91_board_init+0xc4>)
    e76a:	e7ce      	b.n	e70a <thingy91_board_init+0x12>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
    e76c:	201f      	movs	r0, #31
    e76e:	f006 fae9 	bl	14d44 <adp536x_charger_current_set>
	if (err) {
    e772:	4604      	mov	r4, r0
    e774:	b118      	cbz	r0, e77e <thingy91_board_init+0x86>
		LOG_ERR("Could not set charging current, error: %d\n", err);
    e776:	4602      	mov	r2, r0
    e778:	2145      	movs	r1, #69	; 0x45
    e77a:	4811      	ldr	r0, [pc, #68]	; (e7c0 <thingy91_board_init+0xc8>)
    e77c:	e7c5      	b.n	e70a <thingy91_board_init+0x12>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
    e77e:	2007      	movs	r0, #7
    e780:	f006 faf1 	bl	14d66 <adp536x_oc_chg_current_set>
	if (err) {
    e784:	4604      	mov	r4, r0
    e786:	b118      	cbz	r0, e790 <thingy91_board_init+0x98>
		LOG_ERR("Could not set charge current protection, error: %d\n",
    e788:	4602      	mov	r2, r0
    e78a:	2145      	movs	r1, #69	; 0x45
    e78c:	480d      	ldr	r0, [pc, #52]	; (e7c4 <thingy91_board_init+0xcc>)
    e78e:	e7bc      	b.n	e70a <thingy91_board_init+0x12>
	err = adp536x_charging_enable(true);
    e790:	2001      	movs	r0, #1
    e792:	f006 fae3 	bl	14d5c <adp536x_charging_enable>
	if (err) {
    e796:	4604      	mov	r4, r0
    e798:	2800      	cmp	r0, #0
    e79a:	d0bd      	beq.n	e718 <thingy91_board_init+0x20>
		LOG_ERR("Could not enable charging: %d\n", err);
    e79c:	4602      	mov	r2, r0
    e79e:	2145      	movs	r1, #69	; 0x45
    e7a0:	4809      	ldr	r0, [pc, #36]	; (e7c8 <thingy91_board_init+0xd0>)
    e7a2:	e7b2      	b.n	e70a <thingy91_board_init+0x12>
    e7a4:	000165ce 	.word	0x000165ce
    e7a8:	000165d4 	.word	0x000165d4
    e7ac:	00016755 	.word	0x00016755
    e7b0:	00016602 	.word	0x00016602
    e7b4:	0001662f 	.word	0x0001662f
    e7b8:	00016662 	.word	0x00016662
    e7bc:	00016696 	.word	0x00016696
    e7c0:	000166c8 	.word	0x000166c8
    e7c4:	000166f8 	.word	0x000166f8
    e7c8:	00016731 	.word	0x00016731

0000e7cc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    e7d0:	4c0e      	ldr	r4, [pc, #56]	; (e80c <onoff_start+0x40>)
{
    e7d2:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    e7d4:	1b05      	subs	r5, r0, r4
    e7d6:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    e7da:	250c      	movs	r5, #12
    e7dc:	435d      	muls	r5, r3
    e7de:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    e7e2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    e7e4:	4420      	add	r0, r4
    e7e6:	2140      	movs	r1, #64	; 0x40
    e7e8:	f006 fb88 	bl	14efc <set_starting_state>
	if (err < 0) {
    e7ec:	1e01      	subs	r1, r0, #0
    e7ee:	db08      	blt.n	e802 <onoff_start+0x36>
	subdata->cb = cb;
    e7f0:	4b07      	ldr	r3, [pc, #28]	; (e810 <onoff_start+0x44>)
    e7f2:	442c      	add	r4, r5
	subdata->user_data = user_data;
    e7f4:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    e7f8:	4b06      	ldr	r3, [pc, #24]	; (e814 <onoff_start+0x48>)
    e7fa:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    e7fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    e800:	4718      	bx	r3
		notify(mgr, err);
    e802:	4638      	mov	r0, r7
    e804:	4633      	mov	r3, r6
}
    e806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    e80a:	4718      	bx	r3
    e80c:	2000097c 	.word	0x2000097c
    e810:	00014f5f 	.word	0x00014f5f
    e814:	000158a4 	.word	0x000158a4

0000e818 <get_status>:
{
    e818:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e81a:	b2cc      	uxtb	r4, r1
    e81c:	2c01      	cmp	r4, #1
{
    e81e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e820:	d908      	bls.n	e834 <get_status+0x1c>
    e822:	4908      	ldr	r1, [pc, #32]	; (e844 <get_status+0x2c>)
    e824:	4808      	ldr	r0, [pc, #32]	; (e848 <get_status+0x30>)
    e826:	2279      	movs	r2, #121	; 0x79
    e828:	f006 f9dc 	bl	14be4 <printk>
    e82c:	2179      	movs	r1, #121	; 0x79
    e82e:	4805      	ldr	r0, [pc, #20]	; (e844 <get_status+0x2c>)
    e830:	f006 fa63 	bl	14cfa <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e834:	210c      	movs	r1, #12
    e836:	692b      	ldr	r3, [r5, #16]
    e838:	fb04 3401 	mla	r4, r4, r1, r3
    e83c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    e83e:	f000 0007 	and.w	r0, r0, #7
    e842:	bd38      	pop	{r3, r4, r5, pc}
    e844:	0001678d 	.word	0x0001678d
    e848:	00015b65 	.word	0x00015b65

0000e84c <stop>:
{
    e84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e84e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e850:	2c01      	cmp	r4, #1
{
    e852:	4605      	mov	r5, r0
    e854:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e856:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e858:	d90a      	bls.n	e870 <stop+0x24>
    e85a:	4918      	ldr	r1, [pc, #96]	; (e8bc <stop+0x70>)
    e85c:	4818      	ldr	r0, [pc, #96]	; (e8c0 <stop+0x74>)
    e85e:	f240 124d 	movw	r2, #333	; 0x14d
    e862:	f006 f9bf 	bl	14be4 <printk>
    e866:	f240 114d 	movw	r1, #333	; 0x14d
    e86a:	4814      	ldr	r0, [pc, #80]	; (e8bc <stop+0x70>)
    e86c:	f006 fa45 	bl	14cfa <assert_post_action>
	__asm__ volatile(
    e870:	f04f 0320 	mov.w	r3, #32
    e874:	f3ef 8211 	mrs	r2, BASEPRI
    e878:	f383 8812 	msr	BASEPRI_MAX, r3
    e87c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e880:	230c      	movs	r3, #12
    e882:	fb03 7104 	mla	r1, r3, r4, r7
    e886:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e888:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    e88c:	d001      	beq.n	e892 <stop+0x46>
    e88e:	428e      	cmp	r6, r1
    e890:	d111      	bne.n	e8b6 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e892:	2101      	movs	r1, #1
	int err = 0;
    e894:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e896:	fb03 7304 	mla	r3, r3, r4, r7
    e89a:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
    e89c:	f382 8811 	msr	BASEPRI, r2
    e8a0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    e8a4:	b930      	cbnz	r0, e8b4 <stop+0x68>
	get_sub_config(dev, type)->stop();
    e8a6:	230c      	movs	r3, #12
    e8a8:	6869      	ldr	r1, [r5, #4]
    e8aa:	fb03 1404 	mla	r4, r3, r4, r1
    e8ae:	6863      	ldr	r3, [r4, #4]
    e8b0:	4798      	blx	r3
	return 0;
    e8b2:	2000      	movs	r0, #0
}
    e8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    e8b6:	f04f 30ff 	mov.w	r0, #4294967295
    e8ba:	e7ef      	b.n	e89c <stop+0x50>
    e8bc:	0001678d 	.word	0x0001678d
    e8c0:	00015b65 	.word	0x00015b65

0000e8c4 <onoff_stop>:
{
    e8c4:	b570      	push	{r4, r5, r6, lr}
    e8c6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    e8c8:	4906      	ldr	r1, [pc, #24]	; (e8e4 <onoff_stop+0x20>)
{
    e8ca:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    e8cc:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e8ce:	1149      	asrs	r1, r1, #5
    e8d0:	2240      	movs	r2, #64	; 0x40
    e8d2:	4805      	ldr	r0, [pc, #20]	; (e8e8 <onoff_stop+0x24>)
    e8d4:	f7ff ffba 	bl	e84c <stop>
	notify(mgr, res);
    e8d8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e8da:	4601      	mov	r1, r0
	notify(mgr, res);
    e8dc:	4620      	mov	r0, r4
}
    e8de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    e8e2:	4718      	bx	r3
    e8e4:	2000097c 	.word	0x2000097c
    e8e8:	000153f0 	.word	0x000153f0

0000e8ec <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    e8ec:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e8ee:	2200      	movs	r2, #0
    e8f0:	2101      	movs	r1, #1
{
    e8f2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e8f4:	2005      	movs	r0, #5
    e8f6:	f7ff f869 	bl	d9cc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    e8fa:	2005      	movs	r0, #5
    e8fc:	f7ff f848 	bl	d990 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    e900:	480f      	ldr	r0, [pc, #60]	; (e940 <clk_init+0x54>)
    e902:	f000 fe71 	bl	f5e8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    e906:	4b0f      	ldr	r3, [pc, #60]	; (e944 <clk_init+0x58>)
    e908:	4298      	cmp	r0, r3
    e90a:	d115      	bne.n	e938 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    e90c:	f000 fe8c 	bl	f628 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    e910:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    e912:	490d      	ldr	r1, [pc, #52]	; (e948 <clk_init+0x5c>)
    e914:	4630      	mov	r0, r6
    e916:	f006 f972 	bl	14bfe <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    e91a:	2800      	cmp	r0, #0
    e91c:	db0b      	blt.n	e936 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e91e:	2501      	movs	r5, #1
    e920:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    e922:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    e924:	4908      	ldr	r1, [pc, #32]	; (e948 <clk_init+0x5c>)
    e926:	f104 0020 	add.w	r0, r4, #32
    e92a:	f006 f968 	bl	14bfe <onoff_manager_init>
		if (err < 0) {
    e92e:	2800      	cmp	r0, #0
    e930:	db01      	blt.n	e936 <clk_init+0x4a>
	}

	return 0;
    e932:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e934:	6565      	str	r5, [r4, #84]	; 0x54
}
    e936:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    e938:	f06f 0004 	mvn.w	r0, #4
    e93c:	e7fb      	b.n	e936 <clk_init+0x4a>
    e93e:	bf00      	nop
    e940:	0000e981 	.word	0x0000e981
    e944:	0bad0000 	.word	0x0bad0000
    e948:	000158bc 	.word	0x000158bc

0000e94c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    e94c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    e94e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    e950:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    e952:	434b      	muls	r3, r1
    e954:	4808      	ldr	r0, [pc, #32]	; (e978 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    e956:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    e958:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    e95a:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
    e95c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    e960:	4418      	add	r0, r3
	sub_data->cb = NULL;
    e962:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    e964:	f006 fae8 	bl	14f38 <set_on_state>
	if (callback) {
    e968:	b12d      	cbz	r5, e976 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e96a:	4632      	mov	r2, r6
    e96c:	462b      	mov	r3, r5
}
    e96e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    e972:	4802      	ldr	r0, [pc, #8]	; (e97c <clkstarted_handle.constprop.0+0x30>)
    e974:	4718      	bx	r3
}
    e976:	bd70      	pop	{r4, r5, r6, pc}
    e978:	2000097c 	.word	0x2000097c
    e97c:	000153f0 	.word	0x000153f0

0000e980 <clock_event_handler>:
	switch (event) {
    e980:	2801      	cmp	r0, #1
{
    e982:	b508      	push	{r3, lr}
	switch (event) {
    e984:	d006      	beq.n	e994 <clock_event_handler+0x14>
    e986:	2803      	cmp	r0, #3
    e988:	d008      	beq.n	e99c <clock_event_handler+0x1c>
    e98a:	b9a0      	cbnz	r0, e9b6 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    e98c:	4b0f      	ldr	r3, [pc, #60]	; (e9cc <clock_event_handler+0x4c>)
    e98e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e990:	075b      	lsls	r3, r3, #29
    e992:	d119      	bne.n	e9c8 <clock_event_handler+0x48>
}
    e994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    e998:	f7ff bfd8 	b.w	e94c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    e99c:	490c      	ldr	r1, [pc, #48]	; (e9d0 <clock_event_handler+0x50>)
    e99e:	f240 225e 	movw	r2, #606	; 0x25e
    e9a2:	480c      	ldr	r0, [pc, #48]	; (e9d4 <clock_event_handler+0x54>)
    e9a4:	f006 f91e 	bl	14be4 <printk>
    e9a8:	f240 215e 	movw	r1, #606	; 0x25e
}
    e9ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    e9b0:	4807      	ldr	r0, [pc, #28]	; (e9d0 <clock_event_handler+0x50>)
    e9b2:	f006 b9a2 	b.w	14cfa <assert_post_action>
    e9b6:	4906      	ldr	r1, [pc, #24]	; (e9d0 <clock_event_handler+0x50>)
    e9b8:	f240 2262 	movw	r2, #610	; 0x262
    e9bc:	4805      	ldr	r0, [pc, #20]	; (e9d4 <clock_event_handler+0x54>)
    e9be:	f006 f911 	bl	14be4 <printk>
    e9c2:	f240 2162 	movw	r1, #610	; 0x262
    e9c6:	e7f1      	b.n	e9ac <clock_event_handler+0x2c>
}
    e9c8:	bd08      	pop	{r3, pc}
    e9ca:	bf00      	nop
    e9cc:	2000097c 	.word	0x2000097c
    e9d0:	0001678d 	.word	0x0001678d
    e9d4:	00015b65 	.word	0x00015b65

0000e9d8 <generic_hfclk_start>:
{
    e9d8:	b508      	push	{r3, lr}
	__asm__ volatile(
    e9da:	f04f 0320 	mov.w	r3, #32
    e9de:	f3ef 8111 	mrs	r1, BASEPRI
    e9e2:	f383 8812 	msr	BASEPRI_MAX, r3
    e9e6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    e9ea:	4a12      	ldr	r2, [pc, #72]	; (ea34 <generic_hfclk_start+0x5c>)
    e9ec:	6813      	ldr	r3, [r2, #0]
    e9ee:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    e9f2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    e9f6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    e9f8:	d00c      	beq.n	ea14 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e9fa:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    e9fe:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ea02:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    ea06:	f013 0301 	ands.w	r3, r3, #1
    ea0a:	d003      	beq.n	ea14 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    ea0c:	480a      	ldr	r0, [pc, #40]	; (ea38 <generic_hfclk_start+0x60>)
    ea0e:	f006 fa93 	bl	14f38 <set_on_state>
			already_started = true;
    ea12:	2301      	movs	r3, #1
	__asm__ volatile(
    ea14:	f381 8811 	msr	BASEPRI, r1
    ea18:	f3bf 8f6f 	isb	sy
	if (already_started) {
    ea1c:	b123      	cbz	r3, ea28 <generic_hfclk_start+0x50>
}
    ea1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    ea22:	2000      	movs	r0, #0
    ea24:	f7ff bf92 	b.w	e94c <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ea28:	2001      	movs	r0, #1
}
    ea2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ea2e:	f000 be19 	b.w	f664 <nrfx_clock_start>
    ea32:	bf00      	nop
    ea34:	200009d4 	.word	0x200009d4
    ea38:	200009c4 	.word	0x200009c4

0000ea3c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ea3c:	4b07      	ldr	r3, [pc, #28]	; (ea5c <generic_hfclk_stop+0x20>)
    ea3e:	e8d3 2fef 	ldaex	r2, [r3]
    ea42:	f022 0102 	bic.w	r1, r2, #2
    ea46:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ea4a:	2800      	cmp	r0, #0
    ea4c:	d1f7      	bne.n	ea3e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    ea4e:	07d3      	lsls	r3, r2, #31
    ea50:	d402      	bmi.n	ea58 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    ea52:	2001      	movs	r0, #1
    ea54:	f000 be56 	b.w	f704 <nrfx_clock_stop>
}
    ea58:	4770      	bx	lr
    ea5a:	bf00      	nop
    ea5c:	200009d4 	.word	0x200009d4

0000ea60 <api_blocking_start>:
{
    ea60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ea62:	2200      	movs	r2, #0
    ea64:	2301      	movs	r3, #1
    ea66:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ea6a:	466b      	mov	r3, sp
    ea6c:	4a08      	ldr	r2, [pc, #32]	; (ea90 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    ea6e:	f8cd d000 	str.w	sp, [sp]
    ea72:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    ea76:	f006 fa84 	bl	14f82 <api_start>
	if (err < 0) {
    ea7a:	2800      	cmp	r0, #0
    ea7c:	db05      	blt.n	ea8a <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    ea7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ea82:	2300      	movs	r3, #0
    ea84:	4668      	mov	r0, sp
    ea86:	f002 f83f 	bl	10b08 <z_impl_k_sem_take>
}
    ea8a:	b005      	add	sp, #20
    ea8c:	f85d fb04 	ldr.w	pc, [sp], #4
    ea90:	00014f7d 	.word	0x00014f7d

0000ea94 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    ea94:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    ea96:	4808      	ldr	r0, [pc, #32]	; (eab8 <uart_console_init+0x24>)
    ea98:	4b08      	ldr	r3, [pc, #32]	; (eabc <uart_console_init+0x28>)
    ea9a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    ea9c:	f006 fc09 	bl	152b2 <z_device_ready>
    eaa0:	b138      	cbz	r0, eab2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    eaa2:	4807      	ldr	r0, [pc, #28]	; (eac0 <uart_console_init+0x2c>)
    eaa4:	f7ff fe22 	bl	e6ec <__stdout_hook_install>
	__printk_hook_install(console_out);
    eaa8:	4805      	ldr	r0, [pc, #20]	; (eac0 <uart_console_init+0x2c>)
    eaaa:	f7fd fe63 	bl	c774 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    eaae:	2000      	movs	r0, #0
}
    eab0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    eab2:	f06f 0012 	mvn.w	r0, #18
    eab6:	e7fb      	b.n	eab0 <uart_console_init+0x1c>
    eab8:	00015438 	.word	0x00015438
    eabc:	200009d8 	.word	0x200009d8
    eac0:	0000eac5 	.word	0x0000eac5

0000eac4 <console_out>:
	if ('\n' == c) {
    eac4:	280a      	cmp	r0, #10
{
    eac6:	b538      	push	{r3, r4, r5, lr}
    eac8:	4604      	mov	r4, r0
    eaca:	4d07      	ldr	r5, [pc, #28]	; (eae8 <console_out+0x24>)
	if ('\n' == c) {
    eacc:	d104      	bne.n	ead8 <console_out+0x14>
    eace:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    ead0:	6883      	ldr	r3, [r0, #8]
    ead2:	210d      	movs	r1, #13
    ead4:	685b      	ldr	r3, [r3, #4]
    ead6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    ead8:	6828      	ldr	r0, [r5, #0]
    eada:	6883      	ldr	r3, [r0, #8]
    eadc:	b2e1      	uxtb	r1, r4
    eade:	685b      	ldr	r3, [r3, #4]
    eae0:	4798      	blx	r3
}
    eae2:	4620      	mov	r0, r4
    eae4:	bd38      	pop	{r3, r4, r5, pc}
    eae6:	bf00      	nop
    eae8:	200009d8 	.word	0x200009d8

0000eaec <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    eaec:	b508      	push	{r3, lr}
	nrfx_err_t err = nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
    eaee:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    eaf0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    eaf4:	f001 fa8e 	bl	10014 <nrfx_twi_twim_bus_recover>
					       get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    eaf8:	4b03      	ldr	r3, [pc, #12]	; (eb08 <i2c_nrfx_twim_recover_bus+0x1c>)
    eafa:	4298      	cmp	r0, r3
}
    eafc:	bf14      	ite	ne
    eafe:	f06f 000f 	mvnne.w	r0, #15
    eb02:	2000      	moveq	r0, #0
    eb04:	bd08      	pop	{r3, pc}
    eb06:	bf00      	nop
    eb08:	0bad0000 	.word	0x0bad0000

0000eb0c <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
    eb0c:	b510      	push	{r4, lr}
    eb0e:	4604      	mov	r4, r0
    eb10:	2200      	movs	r2, #0
    eb12:	2101      	movs	r1, #1
    eb14:	200a      	movs	r0, #10
    eb16:	f7fe ff59 	bl	d9cc <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    eb1a:	6860      	ldr	r0, [r4, #4]
    eb1c:	6923      	ldr	r3, [r4, #16]
    eb1e:	4a09      	ldr	r2, [pc, #36]	; (eb44 <twim_2_init+0x38>)
    eb20:	f100 0108 	add.w	r1, r0, #8
    eb24:	f000 feba 	bl	f89c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    eb28:	4b07      	ldr	r3, [pc, #28]	; (eb48 <twim_2_init+0x3c>)
    eb2a:	4298      	cmp	r0, r3
    eb2c:	d007      	beq.n	eb3e <twim_2_init+0x32>
		LOG_ERR("Failed to initialize device: %s",
    eb2e:	4807      	ldr	r0, [pc, #28]	; (eb4c <twim_2_init+0x40>)
    eb30:	2145      	movs	r1, #69	; 0x45
    eb32:	6822      	ldr	r2, [r4, #0]
    eb34:	f006 f8f4 	bl	14d20 <z_log_minimal_printk>
		return -EBUSY;
    eb38:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
    eb3c:	bd10      	pop	{r4, pc}
	return 0;
    eb3e:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
    eb40:	e7fc      	b.n	eb3c <twim_2_init+0x30>
    eb42:	bf00      	nop
    eb44:	0000eb91 	.word	0x0000eb91
    eb48:	0bad0000 	.word	0x0bad0000
    eb4c:	000167e8 	.word	0x000167e8

0000eb50 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    eb50:	07ca      	lsls	r2, r1, #31
{
    eb52:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
    eb54:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    eb56:	d409      	bmi.n	eb6c <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(dev_config)) {
    eb58:	f3c1 0242 	ubfx	r2, r1, #1, #3
    eb5c:	2a01      	cmp	r2, #1
    eb5e:	d008      	beq.n	eb72 <i2c_nrfx_twim_configure+0x22>
    eb60:	2a02      	cmp	r2, #2
    eb62:	d00f      	beq.n	eb84 <i2c_nrfx_twim_configure+0x34>
		LOG_ERR("unsupported speed");
    eb64:	2145      	movs	r1, #69	; 0x45
    eb66:	4809      	ldr	r0, [pc, #36]	; (eb8c <i2c_nrfx_twim_configure+0x3c>)
    eb68:	f006 f8da 	bl	14d20 <z_log_minimal_printk>
		return -EINVAL;
    eb6c:	f06f 0015 	mvn.w	r0, #21
    eb70:	e007      	b.n	eb82 <i2c_nrfx_twim_configure+0x32>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    eb72:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    eb76:	681b      	ldr	r3, [r3, #0]
    eb78:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    eb7c:	6903      	ldr	r3, [r0, #16]
	return 0;
    eb7e:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    eb80:	6259      	str	r1, [r3, #36]	; 0x24
}
    eb82:	bd08      	pop	{r3, pc}
    eb84:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    eb88:	681b      	ldr	r3, [r3, #0]
    eb8a:	e7f5      	b.n	eb78 <i2c_nrfx_twim_configure+0x28>
    eb8c:	0001680d 	.word	0x0001680d

0000eb90 <event_handler>:
	switch (p_event->type) {
    eb90:	7803      	ldrb	r3, [r0, #0]
    eb92:	2b01      	cmp	r3, #1
    eb94:	d008      	beq.n	eba8 <event_handler+0x18>
    eb96:	2b02      	cmp	r3, #2
    eb98:	d008      	beq.n	ebac <event_handler+0x1c>
    eb9a:	b94b      	cbnz	r3, ebb0 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    eb9c:	4b05      	ldr	r3, [pc, #20]	; (ebb4 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    eb9e:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    eba0:	f101 0010 	add.w	r0, r1, #16
    eba4:	f001 bf7a 	b.w	10a9c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    eba8:	4b03      	ldr	r3, [pc, #12]	; (ebb8 <event_handler+0x28>)
    ebaa:	e7f8      	b.n	eb9e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    ebac:	4b03      	ldr	r3, [pc, #12]	; (ebbc <event_handler+0x2c>)
    ebae:	e7f6      	b.n	eb9e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    ebb0:	4b03      	ldr	r3, [pc, #12]	; (ebc0 <event_handler+0x30>)
    ebb2:	e7f4      	b.n	eb9e <event_handler+0xe>
    ebb4:	0bad0000 	.word	0x0bad0000
    ebb8:	0bae0001 	.word	0x0bae0001
    ebbc:	0bae0002 	.word	0x0bae0002
    ebc0:	0bad0001 	.word	0x0bad0001

0000ebc4 <i2c_nrfx_twim_transfer>:
{
    ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebc8:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = get_dev_config(dev);
    ebca:	6846      	ldr	r6, [r0, #4]
{
    ebcc:	b08f      	sub	sp, #60	; 0x3c
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
    ebce:	f8d0 9010 	ldr.w	r9, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    ebd2:	8b33      	ldrh	r3, [r6, #24]
	nrfx_twim_xfer_desc_t cur_xfer = {
    ebd4:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
{
    ebd8:	9205      	str	r2, [sp, #20]
    ebda:	4680      	mov	r8, r0
    ebdc:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    ebde:	2214      	movs	r2, #20
    ebe0:	2100      	movs	r1, #0
    ebe2:	4658      	mov	r0, fp
	uint8_t *msg_buf = dev_data->msg_buf;
    ebe4:	f8d9 a028 	ldr.w	sl, [r9, #40]	; 0x28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    ebe8:	9304      	str	r3, [sp, #16]
	nrfx_twim_xfer_desc_t cur_xfer = {
    ebea:	f006 f97b 	bl	14ee4 <memset>
    ebee:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
	return z_impl_k_sem_take(sem, timeout);
    ebf2:	f04f 32ff 	mov.w	r2, #4294967295
    ebf6:	f04f 33ff 	mov.w	r3, #4294967295
    ebfa:	4648      	mov	r0, r9
    ebfc:	f001 ff84 	bl	10b08 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    ec00:	f109 0310 	add.w	r3, r9, #16
    ec04:	9303      	str	r3, [sp, #12]
	for (size_t i = 0; i < num_msgs; i++) {
    ec06:	2700      	movs	r7, #0
	uint16_t msg_buf_used = 0;
    ec08:	463d      	mov	r5, r7
    ec0a:	2200      	movs	r2, #0
    ec0c:	2300      	movs	r3, #0
    ec0e:	9803      	ldr	r0, [sp, #12]
    ec10:	f001 ff7a 	bl	10b08 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    ec14:	4630      	mov	r0, r6
    ec16:	f000 feb1 	bl	f97c <nrfx_twim_enable>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ec1a:	f8cd b018 	str.w	fp, [sp, #24]
	for (size_t i = 0; i < num_msgs; i++) {
    ec1e:	9b05      	ldr	r3, [sp, #20]
    ec20:	429f      	cmp	r7, r3
    ec22:	d301      	bcc.n	ec28 <i2c_nrfx_twim_transfer+0x64>
    ec24:	2400      	movs	r4, #0
    ec26:	e027      	b.n	ec78 <i2c_nrfx_twim_transfer+0xb4>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    ec28:	7a21      	ldrb	r1, [r4, #8]
    ec2a:	070b      	lsls	r3, r1, #28
    ec2c:	f100 80b5 	bmi.w	ed9a <i2c_nrfx_twim_transfer+0x1d6>
				&& ((msgs[i].flags & I2C_MSG_READ)
    ec30:	9b05      	ldr	r3, [sp, #20]
		bool concat_next = ((i + 1) < num_msgs)
    ec32:	f107 0b01 	add.w	fp, r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    ec36:	459b      	cmp	fp, r3
    ec38:	d20a      	bcs.n	ec50 <i2c_nrfx_twim_transfer+0x8c>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    ec3a:	0788      	lsls	r0, r1, #30
    ec3c:	d408      	bmi.n	ec50 <i2c_nrfx_twim_transfer+0x8c>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    ec3e:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    ec40:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    ec44:	f002 0201 	and.w	r2, r2, #1
    ec48:	f003 0304 	and.w	r3, r3, #4
    ec4c:	4313      	orrs	r3, r2
    ec4e:	d01d      	beq.n	ec8c <i2c_nrfx_twim_transfer+0xc8>
		if (concat_next || (msg_buf_used != 0)) {
    ec50:	b37d      	cbz	r5, ecb2 <i2c_nrfx_twim_transfer+0xee>
				&& ((msgs[i].flags & I2C_MSG_READ)
    ec52:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    ec54:	6862      	ldr	r2, [r4, #4]
    ec56:	9804      	ldr	r0, [sp, #16]
    ec58:	eb05 0c02 	add.w	ip, r5, r2
    ec5c:	4584      	cmp	ip, r0
    ec5e:	d917      	bls.n	ec90 <i2c_nrfx_twim_transfer+0xcc>
				LOG_ERR("Need to use concatenation buffer and "
    ec60:	f8d8 3000 	ldr.w	r3, [r8]
    ec64:	9000      	str	r0, [sp, #0]
    ec66:	9301      	str	r3, [sp, #4]
    ec68:	2145      	movs	r1, #69	; 0x45
    ec6a:	4613      	mov	r3, r2
    ec6c:	484c      	ldr	r0, [pc, #304]	; (eda0 <i2c_nrfx_twim_transfer+0x1dc>)
    ec6e:	462a      	mov	r2, r5
    ec70:	f006 f856 	bl	14d20 <z_log_minimal_printk>
				ret = -ENOSPC;
    ec74:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
    ec78:	4630      	mov	r0, r6
    ec7a:	f000 fea7 	bl	f9cc <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    ec7e:	4648      	mov	r0, r9
    ec80:	f001 ff0c 	bl	10a9c <z_impl_k_sem_give>
}
    ec84:	4620      	mov	r0, r4
    ec86:	b00f      	add	sp, #60	; 0x3c
    ec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
    ec8c:	2301      	movs	r3, #1
    ec8e:	e7e1      	b.n	ec54 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    ec90:	07c9      	lsls	r1, r1, #31
    ec92:	d406      	bmi.n	eca2 <i2c_nrfx_twim_transfer+0xde>
				memcpy(msg_buf + msg_buf_used,
    ec94:	6821      	ldr	r1, [r4, #0]
    ec96:	eb0a 0005 	add.w	r0, sl, r5
    ec9a:	9307      	str	r3, [sp, #28]
    ec9c:	f006 f917 	bl	14ece <memcpy>
    eca0:	9b07      	ldr	r3, [sp, #28]
			msg_buf_used += msgs[i].len;
    eca2:	6862      	ldr	r2, [r4, #4]
    eca4:	4415      	add	r5, r2
    eca6:	b2ad      	uxth	r5, r5
		if (concat_next) {
    eca8:	2b00      	cmp	r3, #0
    ecaa:	d039      	beq.n	ed20 <i2c_nrfx_twim_transfer+0x15c>
		bool concat_next = ((i + 1) < num_msgs)
    ecac:	465f      	mov	r7, fp
    ecae:	340c      	adds	r4, #12
    ecb0:	e7b5      	b.n	ec1e <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    ecb2:	07ca      	lsls	r2, r1, #31
    ecb4:	d51d      	bpl.n	ecf2 <i2c_nrfx_twim_transfer+0x12e>
			cur_xfer.p_primary_buf = msgs[i].buf;
    ecb6:	2500      	movs	r5, #0
    ecb8:	6823      	ldr	r3, [r4, #0]
    ecba:	930c      	str	r3, [sp, #48]	; 0x30
			cur_xfer.primary_length = msgs[i].len;
    ecbc:	6863      	ldr	r3, [r4, #4]
    ecbe:	930a      	str	r3, [sp, #40]	; 0x28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    ecc0:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ecc2:	4630      	mov	r0, r6
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    ecc4:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ecc8:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    eccc:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ecd0:	9906      	ldr	r1, [sp, #24]
    ecd2:	bf0c      	ite	eq
    ecd4:	2220      	moveq	r2, #32
    ecd6:	2200      	movne	r2, #0
    ecd8:	f000 feac 	bl	fa34 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    ecdc:	4b31      	ldr	r3, [pc, #196]	; (eda4 <i2c_nrfx_twim_transfer+0x1e0>)
    ecde:	4298      	cmp	r0, r3
    ece0:	d024      	beq.n	ed2c <i2c_nrfx_twim_transfer+0x168>
			if (res == NRFX_ERROR_BUSY) {
    ece2:	330b      	adds	r3, #11
				ret = -EIO;
    ece4:	4298      	cmp	r0, r3
    ece6:	bf0c      	ite	eq
    ece8:	f06f 040f 	mvneq.w	r4, #15
    ecec:	f06f 0404 	mvnne.w	r4, #4
    ecf0:	e7c2      	b.n	ec78 <i2c_nrfx_twim_transfer+0xb4>
    ecf2:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    ecf4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    ecf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ecfc:	d0db      	beq.n	ecb6 <i2c_nrfx_twim_transfer+0xf2>
    ecfe:	6862      	ldr	r2, [r4, #4]
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    ed00:	8b73      	ldrh	r3, [r6, #26]
    ed02:	4293      	cmp	r3, r2
    ed04:	d208      	bcs.n	ed18 <i2c_nrfx_twim_transfer+0x154>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    ed06:	2145      	movs	r1, #69	; 0x45
    ed08:	f8d8 3000 	ldr.w	r3, [r8]
    ed0c:	4826      	ldr	r0, [pc, #152]	; (eda8 <i2c_nrfx_twim_transfer+0x1e4>)
    ed0e:	f006 f807 	bl	14d20 <z_log_minimal_printk>
				ret = -EINVAL;
    ed12:	f06f 0415 	mvn.w	r4, #21
				break;
    ed16:	e7af      	b.n	ec78 <i2c_nrfx_twim_transfer+0xb4>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    ed18:	4650      	mov	r0, sl
    ed1a:	f006 f8d8 	bl	14ece <memcpy>
			msg_buf_used = msgs[i].len;
    ed1e:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    ed20:	2d00      	cmp	r5, #0
    ed22:	d0c8      	beq.n	ecb6 <i2c_nrfx_twim_transfer+0xf2>
			cur_xfer.p_primary_buf = msg_buf;
    ed24:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
			cur_xfer.primary_length = msg_buf_used;
    ed28:	950a      	str	r5, [sp, #40]	; 0x28
    ed2a:	e7c9      	b.n	ecc0 <i2c_nrfx_twim_transfer+0xfc>
	return z_impl_k_sem_take(sem, timeout);
    ed2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ed30:	2300      	movs	r3, #0
    ed32:	9803      	ldr	r0, [sp, #12]
    ed34:	f001 fee8 	bl	10b08 <z_impl_k_sem_take>
		if (ret != 0) {
    ed38:	b170      	cbz	r0, ed58 <i2c_nrfx_twim_transfer+0x194>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    ed3a:	2145      	movs	r1, #69	; 0x45
    ed3c:	463a      	mov	r2, r7
    ed3e:	481b      	ldr	r0, [pc, #108]	; (edac <i2c_nrfx_twim_transfer+0x1e8>)
    ed40:	f005 ffee 	bl	14d20 <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
    ed44:	4630      	mov	r0, r6
    ed46:	f000 fe41 	bl	f9cc <nrfx_twim_disable>
    ed4a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
    ed4e:	f001 f961 	bl	10014 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
    ed52:	f06f 0404 	mvn.w	r4, #4
			break;
    ed56:	e78f      	b.n	ec78 <i2c_nrfx_twim_transfer+0xb4>
		res = dev_data->res;
    ed58:	f8d9 2020 	ldr.w	r2, [r9, #32]
		if (res != NRFX_SUCCESS) {
    ed5c:	4b11      	ldr	r3, [pc, #68]	; (eda4 <i2c_nrfx_twim_transfer+0x1e0>)
    ed5e:	429a      	cmp	r2, r3
    ed60:	d005      	beq.n	ed6e <i2c_nrfx_twim_transfer+0x1aa>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    ed62:	463b      	mov	r3, r7
    ed64:	2145      	movs	r1, #69	; 0x45
    ed66:	4812      	ldr	r0, [pc, #72]	; (edb0 <i2c_nrfx_twim_transfer+0x1ec>)
    ed68:	f005 ffda 	bl	14d20 <z_log_minimal_printk>
    ed6c:	e7f1      	b.n	ed52 <i2c_nrfx_twim_transfer+0x18e>
		if ((msgs[i].flags & I2C_MSG_READ)
    ed6e:	7a23      	ldrb	r3, [r4, #8]
    ed70:	07db      	lsls	r3, r3, #31
    ed72:	d401      	bmi.n	ed78 <i2c_nrfx_twim_transfer+0x1b4>
		msg_buf_used = 0;
    ed74:	2500      	movs	r5, #0
    ed76:	e799      	b.n	ecac <i2c_nrfx_twim_transfer+0xe8>
		    && cur_xfer.p_primary_buf == msg_buf) {
    ed78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed7a:	459a      	cmp	sl, r3
    ed7c:	d1fa      	bne.n	ed74 <i2c_nrfx_twim_transfer+0x1b0>
    ed7e:	4627      	mov	r7, r4
    ed80:	e006      	b.n	ed90 <i2c_nrfx_twim_transfer+0x1cc>
				msg_buf_used -= msgs[j].len;
    ed82:	1aa9      	subs	r1, r5, r2
    ed84:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    ed86:	68f8      	ldr	r0, [r7, #12]
    ed88:	fa1a f181 	uxtah	r1, sl, r1
    ed8c:	f006 f89f 	bl	14ece <memcpy>
			while (msg_buf_used >= msgs[j].len) {
    ed90:	687a      	ldr	r2, [r7, #4]
    ed92:	3f0c      	subs	r7, #12
    ed94:	4295      	cmp	r5, r2
    ed96:	d2f4      	bcs.n	ed82 <i2c_nrfx_twim_transfer+0x1be>
    ed98:	e7ec      	b.n	ed74 <i2c_nrfx_twim_transfer+0x1b0>
			ret = -ENOTSUP;
    ed9a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ed9e:	e76b      	b.n	ec78 <i2c_nrfx_twim_transfer+0xb4>
    eda0:	00016824 	.word	0x00016824
    eda4:	0bad0000 	.word	0x0bad0000
    eda8:	000168b9 	.word	0x000168b9
    edac:	00016924 	.word	0x00016924
    edb0:	00016953 	.word	0x00016953

0000edb4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    edb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    edb6:	794b      	ldrb	r3, [r1, #5]
    edb8:	2b01      	cmp	r3, #1
    edba:	d026      	beq.n	ee0a <uarte_nrfx_configure+0x56>
    edbc:	2b03      	cmp	r3, #3
    edbe:	d121      	bne.n	ee04 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    edc0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    edc2:	798b      	ldrb	r3, [r1, #6]
    edc4:	2b03      	cmp	r3, #3
    edc6:	d11d      	bne.n	ee04 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    edc8:	79cc      	ldrb	r4, [r1, #7]
    edca:	b10c      	cbz	r4, edd0 <uarte_nrfx_configure+0x1c>
    edcc:	2c01      	cmp	r4, #1
    edce:	d119      	bne.n	ee04 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    edd0:	790a      	ldrb	r2, [r1, #4]
    edd2:	b112      	cbz	r2, edda <uarte_nrfx_configure+0x26>
    edd4:	2a02      	cmp	r2, #2
    edd6:	d115      	bne.n	ee04 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    edd8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    edda:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    eddc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    edde:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    ede2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    ede4:	d065      	beq.n	eeb2 <uarte_nrfx_configure+0xfe>
    ede6:	d82d      	bhi.n	ee44 <uarte_nrfx_configure+0x90>
    ede8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    edec:	d064      	beq.n	eeb8 <uarte_nrfx_configure+0x104>
    edee:	d816      	bhi.n	ee1e <uarte_nrfx_configure+0x6a>
    edf0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    edf4:	d062      	beq.n	eebc <uarte_nrfx_configure+0x108>
    edf6:	d80a      	bhi.n	ee0e <uarte_nrfx_configure+0x5a>
    edf8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    edfc:	d061      	beq.n	eec2 <uarte_nrfx_configure+0x10e>
    edfe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    ee02:	d061      	beq.n	eec8 <uarte_nrfx_configure+0x114>
    ee04:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ee08:	e052      	b.n	eeb0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    ee0a:	2600      	movs	r6, #0
    ee0c:	e7d9      	b.n	edc2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    ee0e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    ee12:	d05c      	beq.n	eece <uarte_nrfx_configure+0x11a>
    ee14:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    ee18:	d1f4      	bne.n	ee04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    ee1a:	4b37      	ldr	r3, [pc, #220]	; (eef8 <uarte_nrfx_configure+0x144>)
    ee1c:	e03c      	b.n	ee98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee1e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    ee22:	d057      	beq.n	eed4 <uarte_nrfx_configure+0x120>
    ee24:	d807      	bhi.n	ee36 <uarte_nrfx_configure+0x82>
    ee26:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    ee2a:	d055      	beq.n	eed8 <uarte_nrfx_configure+0x124>
    ee2c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    ee30:	d1e8      	bne.n	ee04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    ee32:	4b32      	ldr	r3, [pc, #200]	; (eefc <uarte_nrfx_configure+0x148>)
    ee34:	e030      	b.n	ee98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee36:	f647 2712 	movw	r7, #31250	; 0x7a12
    ee3a:	42bb      	cmp	r3, r7
    ee3c:	d1e2      	bne.n	ee04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    ee3e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ee42:	e029      	b.n	ee98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee44:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    ee48:	d048      	beq.n	eedc <uarte_nrfx_configure+0x128>
    ee4a:	d813      	bhi.n	ee74 <uarte_nrfx_configure+0xc0>
    ee4c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    ee50:	d047      	beq.n	eee2 <uarte_nrfx_configure+0x12e>
    ee52:	d809      	bhi.n	ee68 <uarte_nrfx_configure+0xb4>
    ee54:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    ee58:	42bb      	cmp	r3, r7
    ee5a:	d044      	beq.n	eee6 <uarte_nrfx_configure+0x132>
    ee5c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    ee60:	d1d0      	bne.n	ee04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    ee62:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    ee66:	e017      	b.n	ee98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee68:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    ee6c:	d1ca      	bne.n	ee04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    ee6e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    ee72:	e011      	b.n	ee98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee74:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    ee78:	d038      	beq.n	eeec <uarte_nrfx_configure+0x138>
    ee7a:	d808      	bhi.n	ee8e <uarte_nrfx_configure+0xda>
    ee7c:	4f20      	ldr	r7, [pc, #128]	; (ef00 <uarte_nrfx_configure+0x14c>)
    ee7e:	42bb      	cmp	r3, r7
    ee80:	d037      	beq.n	eef2 <uarte_nrfx_configure+0x13e>
    ee82:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    ee86:	d1bd      	bne.n	ee04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    ee88:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    ee8c:	e004      	b.n	ee98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    ee8e:	4f1d      	ldr	r7, [pc, #116]	; (ef04 <uarte_nrfx_configure+0x150>)
    ee90:	42bb      	cmp	r3, r7
    ee92:	d1b7      	bne.n	ee04 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    ee94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    ee98:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    ee9c:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    ee9e:	4334      	orrs	r4, r6
    eea0:	4322      	orrs	r2, r4
    eea2:	3304      	adds	r3, #4
    eea4:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    eea6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    eeaa:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    eeae:	2000      	movs	r0, #0
}
    eeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    eeb2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    eeb6:	e7ef      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    eeb8:	4b13      	ldr	r3, [pc, #76]	; (ef08 <uarte_nrfx_configure+0x154>)
    eeba:	e7ed      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    eebc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    eec0:	e7ea      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    eec2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    eec6:	e7e7      	b.n	ee98 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    eec8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    eecc:	e7e4      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    eece:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    eed2:	e7e1      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    eed4:	4b0d      	ldr	r3, [pc, #52]	; (ef0c <uarte_nrfx_configure+0x158>)
    eed6:	e7df      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    eed8:	4b0d      	ldr	r3, [pc, #52]	; (ef10 <uarte_nrfx_configure+0x15c>)
    eeda:	e7dd      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    eedc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    eee0:	e7da      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    eee2:	4b0c      	ldr	r3, [pc, #48]	; (ef14 <uarte_nrfx_configure+0x160>)
    eee4:	e7d8      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    eee6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    eeea:	e7d5      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    eeec:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    eef0:	e7d2      	b.n	ee98 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    eef2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    eef6:	e7cf      	b.n	ee98 <uarte_nrfx_configure+0xe4>
    eef8:	0013b000 	.word	0x0013b000
    eefc:	004ea000 	.word	0x004ea000
    ef00:	0003d090 	.word	0x0003d090
    ef04:	000f4240 	.word	0x000f4240
    ef08:	00275000 	.word	0x00275000
    ef0c:	0075c000 	.word	0x0075c000
    ef10:	003af000 	.word	0x003af000
    ef14:	013a9000 	.word	0x013a9000

0000ef18 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ef18:	6803      	ldr	r3, [r0, #0]
{
    ef1a:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    ef1c:	095a      	lsrs	r2, r3, #5
    ef1e:	bf0c      	ite	eq
    ef20:	f04f 32ff 	moveq.w	r2, #4294967295
    ef24:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    ef26:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
    ef2a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ef2e:	07db      	lsls	r3, r3, #31
{
    ef30:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ef32:	d40a      	bmi.n	ef4a <nrf_gpio_pin_port_decode+0x32>
    ef34:	490e      	ldr	r1, [pc, #56]	; (ef70 <nrf_gpio_pin_port_decode+0x58>)
    ef36:	480f      	ldr	r0, [pc, #60]	; (ef74 <nrf_gpio_pin_port_decode+0x5c>)
    ef38:	f240 2229 	movw	r2, #553	; 0x229
    ef3c:	f005 fe52 	bl	14be4 <printk>
    ef40:	f240 2129 	movw	r1, #553	; 0x229
    ef44:	480a      	ldr	r0, [pc, #40]	; (ef70 <nrf_gpio_pin_port_decode+0x58>)
    ef46:	f005 fed8 	bl	14cfa <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    ef4a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    ef4c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ef50:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    ef52:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ef54:	d00a      	beq.n	ef6c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    ef56:	4906      	ldr	r1, [pc, #24]	; (ef70 <nrf_gpio_pin_port_decode+0x58>)
    ef58:	4806      	ldr	r0, [pc, #24]	; (ef74 <nrf_gpio_pin_port_decode+0x5c>)
    ef5a:	f240 222e 	movw	r2, #558	; 0x22e
    ef5e:	f005 fe41 	bl	14be4 <printk>
    ef62:	f240 212e 	movw	r1, #558	; 0x22e
    ef66:	4802      	ldr	r0, [pc, #8]	; (ef70 <nrf_gpio_pin_port_decode+0x58>)
    ef68:	f005 fec7 	bl	14cfa <assert_post_action>
}
    ef6c:	4802      	ldr	r0, [pc, #8]	; (ef78 <nrf_gpio_pin_port_decode+0x60>)
    ef6e:	bd10      	pop	{r4, pc}
    ef70:	0001698b 	.word	0x0001698b
    ef74:	00015b65 	.word	0x00015b65
    ef78:	50842500 	.word	0x50842500

0000ef7c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef7e:	4605      	mov	r5, r0
    ef80:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    ef82:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    ef84:	f006 f9bb 	bl	152fe <k_is_in_isr>
    ef88:	b910      	cbnz	r0, ef90 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    ef8a:	4b2c      	ldr	r3, [pc, #176]	; (f03c <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    ef8c:	781b      	ldrb	r3, [r3, #0]
    ef8e:	b983      	cbnz	r3, efb2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    ef90:	f04f 0320 	mov.w	r3, #32
    ef94:	f3ef 8411 	mrs	r4, BASEPRI
    ef98:	f383 8812 	msr	BASEPRI_MAX, r3
    ef9c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    efa0:	4628      	mov	r0, r5
    efa2:	f006 f851 	bl	15048 <is_tx_ready>
    efa6:	bb28      	cbnz	r0, eff4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    efa8:	f384 8811 	msr	BASEPRI, r4
    efac:	f3bf 8f6f 	isb	sy
}
    efb0:	e7ee      	b.n	ef90 <uarte_nrfx_poll_out+0x14>
{
    efb2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    efb4:	4628      	mov	r0, r5
    efb6:	f006 f847 	bl	15048 <is_tx_ready>
    efba:	b970      	cbnz	r0, efda <uarte_nrfx_poll_out+0x5e>
    efbc:	2001      	movs	r0, #1
    efbe:	f006 f939 	bl	15234 <nrfx_busy_wait>
    efc2:	3c01      	subs	r4, #1
    efc4:	d1f6      	bne.n	efb4 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    efc6:	2100      	movs	r1, #0
    efc8:	2021      	movs	r0, #33	; 0x21
    efca:	f002 fc97 	bl	118fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    efce:	e7f0      	b.n	efb2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    efd0:	f384 8811 	msr	BASEPRI, r4
    efd4:	f3bf 8f6f 	isb	sy
}
    efd8:	e7f5      	b.n	efc6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    efda:	f04f 0320 	mov.w	r3, #32
    efde:	f3ef 8411 	mrs	r4, BASEPRI
    efe2:	f383 8812 	msr	BASEPRI_MAX, r3
    efe6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    efea:	4628      	mov	r0, r5
    efec:	f006 f82c 	bl	15048 <is_tx_ready>
    eff0:	2800      	cmp	r0, #0
    eff2:	d0ed      	beq.n	efd0 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    eff4:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    eff6:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    effa:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    effc:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    effe:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f002:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f006:	2200      	movs	r2, #0
    f008:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    f00c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    f010:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    f014:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f018:	684a      	ldr	r2, [r1, #4]
    f01a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f01c:	bf41      	itttt	mi
    f01e:	2208      	movmi	r2, #8
    f020:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    f024:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    f028:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f02c:	2201      	movs	r2, #1
    f02e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    f030:	f384 8811 	msr	BASEPRI, r4
    f034:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    f038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f03a:	bf00      	nop
    f03c:	2000145d 	.word	0x2000145d

0000f040 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    f040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f042:	460f      	mov	r7, r1
    f044:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    f046:	b940      	cbnz	r0, f05a <entropy_cc3xx_rng_get_entropy+0x1a>
    f048:	4918      	ldr	r1, [pc, #96]	; (f0ac <entropy_cc3xx_rng_get_entropy+0x6c>)
    f04a:	4819      	ldr	r0, [pc, #100]	; (f0b0 <entropy_cc3xx_rng_get_entropy+0x70>)
    f04c:	2224      	movs	r2, #36	; 0x24
    f04e:	f005 fdc9 	bl	14be4 <printk>
    f052:	2124      	movs	r1, #36	; 0x24
    f054:	4815      	ldr	r0, [pc, #84]	; (f0ac <entropy_cc3xx_rng_get_entropy+0x6c>)
    f056:	f005 fe50 	bl	14cfa <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    f05a:	b947      	cbnz	r7, f06e <entropy_cc3xx_rng_get_entropy+0x2e>
    f05c:	4913      	ldr	r1, [pc, #76]	; (f0ac <entropy_cc3xx_rng_get_entropy+0x6c>)
    f05e:	4814      	ldr	r0, [pc, #80]	; (f0b0 <entropy_cc3xx_rng_get_entropy+0x70>)
    f060:	2225      	movs	r2, #37	; 0x25
    f062:	f005 fdbf 	bl	14be4 <printk>
    f066:	2125      	movs	r1, #37	; 0x25
    f068:	4810      	ldr	r0, [pc, #64]	; (f0ac <entropy_cc3xx_rng_get_entropy+0x6c>)
    f06a:	f005 fe46 	bl	14cfa <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    f06e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    f072:	2400      	movs	r4, #0
    f074:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
    f078:	42a6      	cmp	r6, r4
    f07a:	d801      	bhi.n	f080 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
    f07c:	b003      	add	sp, #12
    f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    f080:	1b33      	subs	r3, r6, r4
    f082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    f086:	bf38      	it	cc
    f088:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
    f08a:	2000      	movs	r0, #0
    f08c:	ab01      	add	r3, sp, #4
    f08e:	462a      	mov	r2, r5
    f090:	1939      	adds	r1, r7, r4
    f092:	f003 f85b 	bl	1214c <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    f096:	9b01      	ldr	r3, [sp, #4]
    f098:	42ab      	cmp	r3, r5
    f09a:	d103      	bne.n	f0a4 <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
    f09c:	2800      	cmp	r0, #0
    f09e:	d1ed      	bne.n	f07c <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
    f0a0:	442c      	add	r4, r5
    f0a2:	e7e9      	b.n	f078 <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
    f0a4:	f06f 0015 	mvn.w	r0, #21
    f0a8:	e7e8      	b.n	f07c <entropy_cc3xx_rng_get_entropy+0x3c>
    f0aa:	bf00      	nop
    f0ac:	000169dc 	.word	0x000169dc
    f0b0:	00015b65 	.word	0x00015b65

0000f0b4 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    f0b4:	4b0b      	ldr	r3, [pc, #44]	; (f0e4 <elapsed+0x30>)
{
    f0b6:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
    f0b8:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    f0ba:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
    f0bc:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    f0be:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    f0c2:	4b09      	ldr	r3, [pc, #36]	; (f0e8 <elapsed+0x34>)
    f0c4:	4909      	ldr	r1, [pc, #36]	; (f0ec <elapsed+0x38>)
    f0c6:	d101      	bne.n	f0cc <elapsed+0x18>
	    || (val1 < val2)) {
    f0c8:	4282      	cmp	r2, r0
    f0ca:	d205      	bcs.n	f0d8 <elapsed+0x24>
		overflow_cyc += last_load;
    f0cc:	681a      	ldr	r2, [r3, #0]
    f0ce:	680c      	ldr	r4, [r1, #0]
    f0d0:	4422      	add	r2, r4
    f0d2:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    f0d4:	4a03      	ldr	r2, [pc, #12]	; (f0e4 <elapsed+0x30>)
    f0d6:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
    f0d8:	681b      	ldr	r3, [r3, #0]
    f0da:	680a      	ldr	r2, [r1, #0]
    f0dc:	4413      	add	r3, r2
}
    f0de:	1a18      	subs	r0, r3, r0
    f0e0:	bd10      	pop	{r4, pc}
    f0e2:	bf00      	nop
    f0e4:	e000e010 	.word	0xe000e010
    f0e8:	200009ec 	.word	0x200009ec
    f0ec:	200009e4 	.word	0x200009e4

0000f0f0 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f0f0:	2220      	movs	r2, #32
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
    f0f2:	2000      	movs	r0, #0
    f0f4:	4b07      	ldr	r3, [pc, #28]	; (f114 <sys_clock_driver_init+0x24>)
    f0f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    f0fa:	4b07      	ldr	r3, [pc, #28]	; (f118 <sys_clock_driver_init+0x28>)
    f0fc:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
    f0fe:	4b07      	ldr	r3, [pc, #28]	; (f11c <sys_clock_driver_init+0x2c>)
    f100:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    f102:	4b07      	ldr	r3, [pc, #28]	; (f120 <sys_clock_driver_init+0x30>)
    f104:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    f106:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    f108:	681a      	ldr	r2, [r3, #0]
    f10a:	f042 0207 	orr.w	r2, r2, #7
    f10e:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    f110:	4770      	bx	lr
    f112:	bf00      	nop
    f114:	e000ed00 	.word	0xe000ed00
    f118:	200009e4 	.word	0x200009e4
    f11c:	200009ec 	.word	0x200009ec
    f120:	e000e010 	.word	0xe000e010

0000f124 <sys_clock_isr>:
{
    f124:	b508      	push	{r3, lr}
	elapsed();
    f126:	f7ff ffc5 	bl	f0b4 <elapsed>
	cycle_count += overflow_cyc;
    f12a:	4a09      	ldr	r2, [pc, #36]	; (f150 <sys_clock_isr+0x2c>)
    f12c:	4909      	ldr	r1, [pc, #36]	; (f154 <sys_clock_isr+0x30>)
    f12e:	6813      	ldr	r3, [r2, #0]
    f130:	6808      	ldr	r0, [r1, #0]
    f132:	4403      	add	r3, r0
    f134:	600b      	str	r3, [r1, #0]
	overflow_cyc = 0;
    f136:	2100      	movs	r1, #0
    f138:	6011      	str	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    f13a:	4a07      	ldr	r2, [pc, #28]	; (f158 <sys_clock_isr+0x34>)
    f13c:	6810      	ldr	r0, [r2, #0]
		announced_cycles += dticks * CYC_PER_TICK;
    f13e:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    f140:	1a18      	subs	r0, r3, r0
    f142:	f002 fe79 	bl	11e38 <sys_clock_announce>
}
    f146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    f14a:	f7fe bd2b 	b.w	dba4 <z_arm_exc_exit>
    f14e:	bf00      	nop
    f150:	200009ec 	.word	0x200009ec
    f154:	200009e0 	.word	0x200009e0
    f158:	200009dc 	.word	0x200009dc

0000f15c <sys_clock_set_timeout>:
{
    f15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f160:	4f39      	ldr	r7, [pc, #228]	; (f248 <sys_clock_set_timeout+0xec>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    f162:	b159      	cbz	r1, f17c <sys_clock_set_timeout+0x20>
    f164:	1c43      	adds	r3, r0, #1
    f166:	d109      	bne.n	f17c <sys_clock_set_timeout+0x20>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    f168:	4a38      	ldr	r2, [pc, #224]	; (f24c <sys_clock_set_timeout+0xf0>)
    f16a:	6813      	ldr	r3, [r2, #0]
    f16c:	f023 0301 	bic.w	r3, r3, #1
    f170:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
    f172:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    f176:	603b      	str	r3, [r7, #0]
}
    f178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f17c:	4b34      	ldr	r3, [pc, #208]	; (f250 <sys_clock_set_timeout+0xf4>)
	uint32_t last_load_ = last_load;
    f17e:	683d      	ldr	r5, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f180:	f1b0 3fff 	cmp.w	r0, #4294967295
    f184:	bf08      	it	eq
    f186:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    f188:	1e44      	subs	r4, r0, #1
    f18a:	2c00      	cmp	r4, #0
    f18c:	dd54      	ble.n	f238 <sys_clock_set_timeout+0xdc>
    f18e:	429c      	cmp	r4, r3
    f190:	bfa8      	it	ge
    f192:	461c      	movge	r4, r3
	__asm__ volatile(
    f194:	f04f 0320 	mov.w	r3, #32
    f198:	f3ef 8611 	mrs	r6, BASEPRI
    f19c:	f383 8812 	msr	BASEPRI_MAX, r3
    f1a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f1a4:	482b      	ldr	r0, [pc, #172]	; (f254 <sys_clock_set_timeout+0xf8>)
    f1a6:	f001 fab9 	bl	1071c <z_spin_lock_valid>
    f1aa:	b940      	cbnz	r0, f1be <sys_clock_set_timeout+0x62>
    f1ac:	492a      	ldr	r1, [pc, #168]	; (f258 <sys_clock_set_timeout+0xfc>)
    f1ae:	482b      	ldr	r0, [pc, #172]	; (f25c <sys_clock_set_timeout+0x100>)
    f1b0:	2281      	movs	r2, #129	; 0x81
    f1b2:	f005 fd17 	bl	14be4 <printk>
    f1b6:	2181      	movs	r1, #129	; 0x81
    f1b8:	4827      	ldr	r0, [pc, #156]	; (f258 <sys_clock_set_timeout+0xfc>)
    f1ba:	f005 fd9e 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
    f1be:	4825      	ldr	r0, [pc, #148]	; (f254 <sys_clock_set_timeout+0xf8>)
    f1c0:	f001 fac8 	bl	10754 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    f1c4:	f7ff ff76 	bl	f0b4 <elapsed>
	overflow_cyc = 0U;
    f1c8:	f04f 0e00 	mov.w	lr, #0
	val1 = SysTick->VAL;
    f1cc:	f8df 807c 	ldr.w	r8, [pc, #124]	; f24c <sys_clock_set_timeout+0xf0>
	overflow_cyc = 0U;
    f1d0:	f8df c090 	ldr.w	ip, [pc, #144]	; f264 <sys_clock_set_timeout+0x108>
	cycle_count += pending;
    f1d4:	4a22      	ldr	r2, [pc, #136]	; (f260 <sys_clock_set_timeout+0x104>)
	val1 = SysTick->VAL;
    f1d6:	f8d8 1008 	ldr.w	r1, [r8, #8]
	overflow_cyc = 0U;
    f1da:	f8cc e000 	str.w	lr, [ip]
	uint32_t unannounced = cycle_count - announced_cycles;
    f1de:	f8df c088 	ldr.w	ip, [pc, #136]	; f268 <sys_clock_set_timeout+0x10c>
	cycle_count += pending;
    f1e2:	6813      	ldr	r3, [r2, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    f1e4:	f8dc c000 	ldr.w	ip, [ip]
	cycle_count += pending;
    f1e8:	4418      	add	r0, r3
	uint32_t unannounced = cycle_count - announced_cycles;
    f1ea:	eba0 0c0c 	sub.w	ip, r0, ip
	if ((int32_t)unannounced < 0) {
    f1ee:	45f4      	cmp	ip, lr
    f1f0:	4643      	mov	r3, r8
	cycle_count += pending;
    f1f2:	6010      	str	r0, [r2, #0]
	if ((int32_t)unannounced < 0) {
    f1f4:	da22      	bge.n	f23c <sys_clock_set_timeout+0xe0>
		last_load = MIN_DELAY;
    f1f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
			last_load = delay;
    f1fa:	603c      	str	r4, [r7, #0]
	SysTick->LOAD = last_load - 1;
    f1fc:	683f      	ldr	r7, [r7, #0]
	val2 = SysTick->VAL;
    f1fe:	689c      	ldr	r4, [r3, #8]
	SysTick->LOAD = last_load - 1;
    f200:	3f01      	subs	r7, #1
    f202:	605f      	str	r7, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    f204:	2700      	movs	r7, #0
	if (val1 < val2) {
    f206:	42a1      	cmp	r1, r4
		cycle_count += (val1 + (last_load_ - val2));
    f208:	bf38      	it	cc
    f20a:	1949      	addcc	r1, r1, r5
		cycle_count += (val1 - val2);
    f20c:	1b09      	subs	r1, r1, r4
    f20e:	4408      	add	r0, r1
	SysTick->VAL = 0; /* resets timer to last_load */
    f210:	609f      	str	r7, [r3, #8]
		cycle_count += (val1 - val2);
    f212:	6010      	str	r0, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f214:	480f      	ldr	r0, [pc, #60]	; (f254 <sys_clock_set_timeout+0xf8>)
    f216:	f001 fa8f 	bl	10738 <z_spin_unlock_valid>
    f21a:	b940      	cbnz	r0, f22e <sys_clock_set_timeout+0xd2>
    f21c:	490e      	ldr	r1, [pc, #56]	; (f258 <sys_clock_set_timeout+0xfc>)
    f21e:	480f      	ldr	r0, [pc, #60]	; (f25c <sys_clock_set_timeout+0x100>)
    f220:	22ac      	movs	r2, #172	; 0xac
    f222:	f005 fcdf 	bl	14be4 <printk>
    f226:	21ac      	movs	r1, #172	; 0xac
    f228:	480b      	ldr	r0, [pc, #44]	; (f258 <sys_clock_set_timeout+0xfc>)
    f22a:	f005 fd66 	bl	14cfa <assert_post_action>
	__asm__ volatile(
    f22e:	f386 8811 	msr	BASEPRI, r6
    f232:	f3bf 8f6f 	isb	sy
    f236:	e79f      	b.n	f178 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    f238:	2400      	movs	r4, #0
    f23a:	e7ab      	b.n	f194 <sys_clock_set_timeout+0x38>
			last_load = delay;
    f23c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    f240:	bfb8      	it	lt
    f242:	f44f 6480 	movlt.w	r4, #1024	; 0x400
    f246:	e7d8      	b.n	f1fa <sys_clock_set_timeout+0x9e>
    f248:	200009e4 	.word	0x200009e4
    f24c:	e000e010 	.word	0xe000e010
    f250:	00fffffe 	.word	0x00fffffe
    f254:	200009e8 	.word	0x200009e8
    f258:	00015b3f 	.word	0x00015b3f
    f25c:	00015b65 	.word	0x00015b65
    f260:	200009e0 	.word	0x200009e0
    f264:	200009ec 	.word	0x200009ec
    f268:	200009dc 	.word	0x200009dc

0000f26c <sys_clock_elapsed>:
{
    f26c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f26e:	f04f 0320 	mov.w	r3, #32
    f272:	f3ef 8511 	mrs	r5, BASEPRI
    f276:	f383 8812 	msr	BASEPRI_MAX, r3
    f27a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f27e:	4815      	ldr	r0, [pc, #84]	; (f2d4 <sys_clock_elapsed+0x68>)
    f280:	f001 fa4c 	bl	1071c <z_spin_lock_valid>
    f284:	b940      	cbnz	r0, f298 <sys_clock_elapsed+0x2c>
    f286:	4914      	ldr	r1, [pc, #80]	; (f2d8 <sys_clock_elapsed+0x6c>)
    f288:	4814      	ldr	r0, [pc, #80]	; (f2dc <sys_clock_elapsed+0x70>)
    f28a:	2281      	movs	r2, #129	; 0x81
    f28c:	f005 fcaa 	bl	14be4 <printk>
    f290:	2181      	movs	r1, #129	; 0x81
    f292:	4811      	ldr	r0, [pc, #68]	; (f2d8 <sys_clock_elapsed+0x6c>)
    f294:	f005 fd31 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
    f298:	480e      	ldr	r0, [pc, #56]	; (f2d4 <sys_clock_elapsed+0x68>)
    f29a:	f001 fa5b 	bl	10754 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    f29e:	f7ff ff09 	bl	f0b4 <elapsed>
    f2a2:	4b0f      	ldr	r3, [pc, #60]	; (f2e0 <sys_clock_elapsed+0x74>)
    f2a4:	681c      	ldr	r4, [r3, #0]
    f2a6:	4b0f      	ldr	r3, [pc, #60]	; (f2e4 <sys_clock_elapsed+0x78>)
    f2a8:	681b      	ldr	r3, [r3, #0]
    f2aa:	1ae4      	subs	r4, r4, r3
    f2ac:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f2ae:	4809      	ldr	r0, [pc, #36]	; (f2d4 <sys_clock_elapsed+0x68>)
    f2b0:	f001 fa42 	bl	10738 <z_spin_unlock_valid>
    f2b4:	b940      	cbnz	r0, f2c8 <sys_clock_elapsed+0x5c>
    f2b6:	4908      	ldr	r1, [pc, #32]	; (f2d8 <sys_clock_elapsed+0x6c>)
    f2b8:	4808      	ldr	r0, [pc, #32]	; (f2dc <sys_clock_elapsed+0x70>)
    f2ba:	22ac      	movs	r2, #172	; 0xac
    f2bc:	f005 fc92 	bl	14be4 <printk>
    f2c0:	21ac      	movs	r1, #172	; 0xac
    f2c2:	4805      	ldr	r0, [pc, #20]	; (f2d8 <sys_clock_elapsed+0x6c>)
    f2c4:	f005 fd19 	bl	14cfa <assert_post_action>
	__asm__ volatile(
    f2c8:	f385 8811 	msr	BASEPRI, r5
    f2cc:	f3bf 8f6f 	isb	sy
}
    f2d0:	4620      	mov	r0, r4
    f2d2:	bd38      	pop	{r3, r4, r5, pc}
    f2d4:	200009e8 	.word	0x200009e8
    f2d8:	00015b3f 	.word	0x00015b3f
    f2dc:	00015b65 	.word	0x00015b65
    f2e0:	200009e0 	.word	0x200009e0
    f2e4:	200009dc 	.word	0x200009dc

0000f2e8 <sys_clock_idle_exit>:
	if (last_load == TIMER_STOPPED) {
    f2e8:	4b05      	ldr	r3, [pc, #20]	; (f300 <sys_clock_idle_exit+0x18>)
    f2ea:	681b      	ldr	r3, [r3, #0]
    f2ec:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
    f2f0:	bf01      	itttt	eq
    f2f2:	4a04      	ldreq	r2, [pc, #16]	; (f304 <sys_clock_idle_exit+0x1c>)
    f2f4:	6813      	ldreq	r3, [r2, #0]
    f2f6:	f043 0301 	orreq.w	r3, r3, #1
    f2fa:	6013      	streq	r3, [r2, #0]
}
    f2fc:	4770      	bx	lr
    f2fe:	bf00      	nop
    f300:	200009e4 	.word	0x200009e4
    f304:	e000e010 	.word	0xe000e010

0000f308 <sys_clock_disable>:
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    f308:	4a02      	ldr	r2, [pc, #8]	; (f314 <sys_clock_disable+0xc>)
    f30a:	6813      	ldr	r3, [r2, #0]
    f30c:	f023 0301 	bic.w	r3, r3, #1
    f310:	6013      	str	r3, [r2, #0]
}
    f312:	4770      	bx	lr
    f314:	e000e010 	.word	0xe000e010

0000f318 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    f318:	4803      	ldr	r0, [pc, #12]	; (f328 <k_sys_fatal_error_handler+0x10>)
    f31a:	2145      	movs	r1, #69	; 0x45
{
    f31c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    f31e:	f005 fcff 	bl	14d20 <z_log_minimal_printk>
		sys_arch_reboot(0);
    f322:	2000      	movs	r0, #0
    f324:	f7fe ff26 	bl	e174 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    f328:	00016a17 	.word	0x00016a17

0000f32c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    f32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f330:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    f332:	4c21      	ldr	r4, [pc, #132]	; (f3b8 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    f334:	4e21      	ldr	r6, [pc, #132]	; (f3bc <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f336:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    f33a:	f8df 9088 	ldr.w	r9, [pc, #136]	; f3c4 <check_ext_api_requests+0x98>
{
    f33e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f340:	45a8      	cmp	r8, r5
    f342:	d803      	bhi.n	f34c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    f344:	2000      	movs	r0, #0
    f346:	b005      	add	sp, #20
    f348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    f34c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f34e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    f352:	681f      	ldr	r7, [r3, #0]
    f354:	ab01      	add	r3, sp, #4
    f356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    f35a:	220c      	movs	r2, #12
    f35c:	4619      	mov	r1, r3
    f35e:	4638      	mov	r0, r7
    f360:	f005 fd8e 	bl	14e80 <memcmp>
    f364:	b990      	cbnz	r0, f38c <check_ext_api_requests+0x60>
    f366:	b18f      	cbz	r7, f38c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f368:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    f36a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    f36c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    f36e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f370:	4291      	cmp	r1, r2
    f372:	d10b      	bne.n	f38c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    f374:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    f376:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    f378:	4291      	cmp	r1, r2
    f37a:	d807      	bhi.n	f38c <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    f37c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    f37e:	4291      	cmp	r1, r2
    f380:	d904      	bls.n	f38c <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    f382:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    f384:	695b      	ldr	r3, [r3, #20]
    f386:	ea32 0303 	bics.w	r3, r2, r3
    f38a:	d00a      	beq.n	f3a2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    f38c:	6a27      	ldr	r7, [r4, #32]
    f38e:	b167      	cbz	r7, f3aa <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    f390:	480b      	ldr	r0, [pc, #44]	; (f3c0 <check_ext_api_requests+0x94>)
    f392:	f005 fc27 	bl	14be4 <printk>
			k_panic();
    f396:	4040      	eors	r0, r0
    f398:	f380 8811 	msr	BASEPRI, r0
    f39c:	f04f 0004 	mov.w	r0, #4
    f3a0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    f3a2:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f3a4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    f3a6:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    f3a8:	e7ca      	b.n	f340 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    f3aa:	4648      	mov	r0, r9
    f3ac:	f005 fc1a 	bl	14be4 <printk>
			*ext_api_req->ext_api = NULL;
    f3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f3b2:	601f      	str	r7, [r3, #0]
    f3b4:	e7f5      	b.n	f3a2 <check_ext_api_requests+0x76>
    f3b6:	bf00      	nop
    f3b8:	0000c43c 	.word	0x0000c43c
    f3bc:	000156ec 	.word	0x000156ec
    f3c0:	00016a39 	.word	0x00016a39
    f3c4:	00016a62 	.word	0x00016a62

0000f3c8 <nrf91_errata_14>:
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f3c8:	4a06      	ldr	r2, [pc, #24]	; (f3e4 <nrf91_errata_14+0x1c>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f3ca:	4b07      	ldr	r3, [pc, #28]	; (f3e8 <nrf91_errata_14+0x20>)
    f3cc:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f3ce:	6810      	ldr	r0, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    f3d0:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    f3d4:	2b09      	cmp	r3, #9
    f3d6:	d103      	bne.n	f3e0 <nrf91_errata_14+0x18>
            {
                switch(var2)
    f3d8:	1e43      	subs	r3, r0, #1
    f3da:	4258      	negs	r0, r3
    f3dc:	4158      	adcs	r0, r3
    f3de:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    f3e0:	2000      	movs	r0, #0
    #endif
}
    f3e2:	4770      	bx	lr
    f3e4:	00ff0134 	.word	0x00ff0134
    f3e8:	00ff0130 	.word	0x00ff0130

0000f3ec <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    f3ec:	4a57      	ldr	r2, [pc, #348]	; (f54c <SystemInit+0x160>)
{
    f3ee:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    f3f0:	6813      	ldr	r3, [r2, #0]
    f3f2:	f043 0302 	orr.w	r3, r3, #2
    f3f6:	6013      	str	r3, [r2, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f3f8:	4b55      	ldr	r3, [pc, #340]	; (f550 <SystemInit+0x164>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f3fa:	4a56      	ldr	r2, [pc, #344]	; (f554 <SystemInit+0x168>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f3fc:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f3fe:	6812      	ldr	r2, [r2, #0]
    f400:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    f404:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    f406:	bf01      	itttt	eq
    f408:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    f40c:	2200      	moveq	r2, #0
    f40e:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    f412:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    f416:	f7ff ffd7 	bl	f3c8 <nrf91_errata_14>
    f41a:	b130      	cbz	r0, f42a <SystemInit+0x3e>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    f41c:	2301      	movs	r3, #1
    f41e:	4a4e      	ldr	r2, [pc, #312]	; (f558 <SystemInit+0x16c>)
    f420:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    f422:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    f426:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f42a:	4b49      	ldr	r3, [pc, #292]	; (f550 <SystemInit+0x164>)
    f42c:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f42e:	3304      	adds	r3, #4
    f430:	681b      	ldr	r3, [r3, #0]
    f432:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    f436:	2a09      	cmp	r2, #9
    f438:	d105      	bne.n	f446 <SystemInit+0x5a>
            {
                switch(var2)
    f43a:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    f43c:	bf1e      	ittt	ne
    f43e:	2201      	movne	r2, #1
    f440:	4b46      	ldrne	r3, [pc, #280]	; (f55c <SystemInit+0x170>)
    f442:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    f446:	f7ff ffbf 	bl	f3c8 <nrf91_errata_14>
    f44a:	b110      	cbz	r0, f452 <SystemInit+0x66>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    f44c:	220e      	movs	r2, #14
    f44e:	4b44      	ldr	r3, [pc, #272]	; (f560 <SystemInit+0x174>)
    f450:	601a      	str	r2, [r3, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f452:	4b3f      	ldr	r3, [pc, #252]	; (f550 <SystemInit+0x164>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f454:	4a3f      	ldr	r2, [pc, #252]	; (f554 <SystemInit+0x168>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    f456:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    f458:	6812      	ldr	r2, [r2, #0]
    f45a:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    f45e:	2b09      	cmp	r3, #9
    f460:	d104      	bne.n	f46c <SystemInit+0x80>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    f462:	2200      	movs	r2, #0
    f464:	4b3f      	ldr	r3, [pc, #252]	; (f564 <SystemInit+0x178>)
    f466:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    f468:	2201      	movs	r2, #1
    f46a:	605a      	str	r2, [r3, #4]
{
    f46c:	2200      	movs	r2, #0
    f46e:	00d3      	lsls	r3, r2, #3
    f470:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    f474:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    f478:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f47c:	3101      	adds	r1, #1
    f47e:	d008      	beq.n	f492 <SystemInit+0xa6>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f480:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f484:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f486:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f48a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    f48e:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    f490:	d1ed      	bne.n	f46e <SystemInit+0x82>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    f492:	4b35      	ldr	r3, [pc, #212]	; (f568 <SystemInit+0x17c>)
    f494:	69db      	ldr	r3, [r3, #28]
    f496:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    f49a:	07d9      	lsls	r1, r3, #31
    f49c:	d545      	bpl.n	f52a <SystemInit+0x13e>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f49e:	4b33      	ldr	r3, [pc, #204]	; (f56c <SystemInit+0x180>)
    f4a0:	4619      	mov	r1, r3
    f4a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    f4a6:	2a01      	cmp	r2, #1
    f4a8:	d1fb      	bne.n	f4a2 <SystemInit+0xb6>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    f4aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f4ae:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    f4b2:	2b01      	cmp	r3, #1
    f4b4:	d1fb      	bne.n	f4ae <SystemInit+0xc2>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    f4b6:	4b2c      	ldr	r3, [pc, #176]	; (f568 <SystemInit+0x17c>)
    f4b8:	69da      	ldr	r2, [r3, #28]
    f4ba:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    f4be:	07d2      	lsls	r2, r2, #31
    f4c0:	d50a      	bpl.n	f4d8 <SystemInit+0xec>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    f4c2:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    f4c4:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    f4c8:	61da      	str	r2, [r3, #28]
    f4ca:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f4ce:	4a27      	ldr	r2, [pc, #156]	; (f56c <SystemInit+0x180>)
    f4d0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    f4d4:	2b01      	cmp	r3, #1
    f4d6:	d1fb      	bne.n	f4d0 <SystemInit+0xe4>
        uint32_t val = *word;
    f4d8:	4b25      	ldr	r3, [pc, #148]	; (f570 <SystemInit+0x184>)
    f4da:	681b      	ldr	r3, [r3, #0]
    f4dc:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    f4e0:	3301      	adds	r3, #1
    f4e2:	d10d      	bne.n	f500 <SystemInit+0x114>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    f4e4:	4a20      	ldr	r2, [pc, #128]	; (f568 <SystemInit+0x17c>)
    f4e6:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    f4e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f4ec:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    f4f0:	6213      	str	r3, [r2, #32]
    f4f2:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f4f6:	4a1d      	ldr	r2, [pc, #116]	; (f56c <SystemInit+0x180>)
    f4f8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    f4fc:	2b01      	cmp	r3, #1
    f4fe:	d1fb      	bne.n	f4f8 <SystemInit+0x10c>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    f500:	2200      	movs	r2, #0
    f502:	4b1a      	ldr	r3, [pc, #104]	; (f56c <SystemInit+0x180>)
    f504:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    f508:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    f50c:	2a01      	cmp	r2, #1
    f50e:	d1fb      	bne.n	f508 <SystemInit+0x11c>
    f510:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f514:	4917      	ldr	r1, [pc, #92]	; (f574 <SystemInit+0x188>)
    f516:	4b18      	ldr	r3, [pc, #96]	; (f578 <SystemInit+0x18c>)
    f518:	68ca      	ldr	r2, [r1, #12]
    f51a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f51e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f520:	60cb      	str	r3, [r1, #12]
    f522:	f3bf 8f4f 	dsb	sy
    __NOP();
    f526:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f528:	e7fd      	b.n	f526 <SystemInit+0x13a>
        uint32_t val = *word;
    f52a:	4b11      	ldr	r3, [pc, #68]	; (f570 <SystemInit+0x184>)
    f52c:	681b      	ldr	r3, [r3, #0]
    f52e:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    f532:	3301      	adds	r3, #1
    f534:	d0b3      	beq.n	f49e <SystemInit+0xb2>
        SCB->NSACR |= (3UL << 10);
    f536:	4a0f      	ldr	r2, [pc, #60]	; (f574 <SystemInit+0x188>)
    f538:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    f53c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    f540:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    f544:	4b0d      	ldr	r3, [pc, #52]	; (f57c <SystemInit+0x190>)
    f546:	4a0e      	ldr	r2, [pc, #56]	; (f580 <SystemInit+0x194>)
    f548:	601a      	str	r2, [r3, #0]
}
    f54a:	bd08      	pop	{r3, pc}
    f54c:	e000edd0 	.word	0xe000edd0
    f550:	00ff0130 	.word	0x00ff0130
    f554:	00ff0134 	.word	0x00ff0134
    f558:	50004a38 	.word	0x50004a38
    f55c:	50004000 	.word	0x50004000
    f560:	5003aee4 	.word	0x5003aee4
    f564:	5000470c 	.word	0x5000470c
    f568:	00ff8000 	.word	0x00ff8000
    f56c:	50039000 	.word	0x50039000
    f570:	00ff8020 	.word	0x00ff8020
    f574:	e000ed00 	.word	0xe000ed00
    f578:	05fa0004 	.word	0x05fa0004
    f57c:	2000007c 	.word	0x2000007c
    f580:	03d09000 	.word	0x03d09000

0000f584 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    f584:	b508      	push	{r3, lr}
    switch (domain)
    f586:	b170      	cbz	r0, f5a6 <nrf_clock_is_running.constprop.0+0x22>
    f588:	2801      	cmp	r0, #1
    f58a:	d01b      	beq.n	f5c4 <nrf_clock_is_running.constprop.0+0x40>
        case NRF_CLOCK_DOMAIN_HFCLKAUDIO:
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
                   CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
#endif
        default:
            NRFX_ASSERT(0);
    f58c:	f44f 724f 	mov.w	r2, #828	; 0x33c
    f590:	4913      	ldr	r1, [pc, #76]	; (f5e0 <nrf_clock_is_running.constprop.0+0x5c>)
    f592:	4814      	ldr	r0, [pc, #80]	; (f5e4 <nrf_clock_is_running.constprop.0+0x60>)
    f594:	f005 fb26 	bl	14be4 <printk>
    f598:	4811      	ldr	r0, [pc, #68]	; (f5e0 <nrf_clock_is_running.constprop.0+0x5c>)
    f59a:	f44f 714f 	mov.w	r1, #828	; 0x33c
    f59e:	f005 fbac 	bl	14cfa <assert_post_action>
            return false;
    f5a2:	2000      	movs	r0, #0
    f5a4:	e00d      	b.n	f5c2 <nrf_clock_is_running.constprop.0+0x3e>
            if (p_clk_src != NULL)
    f5a6:	b131      	cbz	r1, f5b6 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f5a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5ac:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    f5b0:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    f5b4:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f5b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5ba:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f5be:	f3c0 4000 	ubfx	r0, r0, #16, #1
    }
    return false;
}
    f5c2:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    f5c4:	b131      	cbz	r1, f5d4 <nrf_clock_is_running.constprop.0+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f5c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    f5ce:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    f5d2:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f5d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5d8:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    f5dc:	e7ef      	b.n	f5be <nrf_clock_is_running.constprop.0+0x3a>
    f5de:	bf00      	nop
    f5e0:	00016a95 	.word	0x00016a95
    f5e4:	00015b65 	.word	0x00015b65

0000f5e8 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    f5e8:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    f5ea:	4604      	mov	r4, r0
    f5ec:	b940      	cbnz	r0, f600 <nrfx_clock_init+0x18>
    f5ee:	4909      	ldr	r1, [pc, #36]	; (f614 <nrfx_clock_init+0x2c>)
    f5f0:	4809      	ldr	r0, [pc, #36]	; (f618 <nrfx_clock_init+0x30>)
    f5f2:	22bd      	movs	r2, #189	; 0xbd
    f5f4:	f005 faf6 	bl	14be4 <printk>
    f5f8:	21bd      	movs	r1, #189	; 0xbd
    f5fa:	4806      	ldr	r0, [pc, #24]	; (f614 <nrfx_clock_init+0x2c>)
    f5fc:	f005 fb7d 	bl	14cfa <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    f600:	4b06      	ldr	r3, [pc, #24]	; (f61c <nrfx_clock_init+0x34>)
    f602:	791a      	ldrb	r2, [r3, #4]
    f604:	b922      	cbnz	r2, f610 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    f606:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    f608:	4805      	ldr	r0, [pc, #20]	; (f620 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    f60a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    f60c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    f60e:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    f610:	4804      	ldr	r0, [pc, #16]	; (f624 <nrfx_clock_init+0x3c>)
    return err_code;
    f612:	e7fc      	b.n	f60e <nrfx_clock_init+0x26>
    f614:	00016ac9 	.word	0x00016ac9
    f618:	00015b65 	.word	0x00015b65
    f61c:	200009f0 	.word	0x200009f0
    f620:	0bad0000 	.word	0x0bad0000
    f624:	0bad000c 	.word	0x0bad000c

0000f628 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    f628:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f62a:	4b0b      	ldr	r3, [pc, #44]	; (f658 <nrfx_clock_enable+0x30>)
    f62c:	791b      	ldrb	r3, [r3, #4]
    f62e:	b943      	cbnz	r3, f642 <nrfx_clock_enable+0x1a>
    f630:	490a      	ldr	r1, [pc, #40]	; (f65c <nrfx_clock_enable+0x34>)
    f632:	480b      	ldr	r0, [pc, #44]	; (f660 <nrfx_clock_enable+0x38>)
    f634:	22d6      	movs	r2, #214	; 0xd6
    f636:	f005 fad5 	bl	14be4 <printk>
    f63a:	21d6      	movs	r1, #214	; 0xd6
    f63c:	4807      	ldr	r0, [pc, #28]	; (f65c <nrfx_clock_enable+0x34>)
    f63e:	f005 fb5c 	bl	14cfa <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    f642:	2005      	movs	r0, #5
    f644:	f7fe f9b4 	bl	d9b0 <arch_irq_is_enabled>
    f648:	b920      	cbnz	r0, f654 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    f64a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    f64e:	2005      	movs	r0, #5
    f650:	f7fe b99e 	b.w	d990 <arch_irq_enable>
    f654:	bd08      	pop	{r3, pc}
    f656:	bf00      	nop
    f658:	200009f0 	.word	0x200009f0
    f65c:	00016ac9 	.word	0x00016ac9
    f660:	00015b65 	.word	0x00015b65

0000f664 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f664:	4b22      	ldr	r3, [pc, #136]	; (f6f0 <nrfx_clock_start+0x8c>)
{
    f666:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f668:	791b      	ldrb	r3, [r3, #4]
{
    f66a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f66c:	b953      	cbnz	r3, f684 <nrfx_clock_start+0x20>
    f66e:	4921      	ldr	r1, [pc, #132]	; (f6f4 <nrfx_clock_start+0x90>)
    f670:	4821      	ldr	r0, [pc, #132]	; (f6f8 <nrfx_clock_start+0x94>)
    f672:	f44f 7289 	mov.w	r2, #274	; 0x112
    f676:	f005 fab5 	bl	14be4 <printk>
    f67a:	f44f 7189 	mov.w	r1, #274	; 0x112
    f67e:	481d      	ldr	r0, [pc, #116]	; (f6f4 <nrfx_clock_start+0x90>)
    f680:	f005 fb3b 	bl	14cfa <assert_post_action>
    switch (domain)
    f684:	b16c      	cbz	r4, f6a2 <nrfx_clock_start+0x3e>
    f686:	2c01      	cmp	r4, #1
    f688:	d028      	beq.n	f6dc <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    f68a:	f44f 72a2 	mov.w	r2, #324	; 0x144
    f68e:	4919      	ldr	r1, [pc, #100]	; (f6f4 <nrfx_clock_start+0x90>)
    f690:	4819      	ldr	r0, [pc, #100]	; (f6f8 <nrfx_clock_start+0x94>)
    f692:	f005 faa7 	bl	14be4 <printk>
    f696:	f44f 71a2 	mov.w	r1, #324	; 0x144
    f69a:	4816      	ldr	r0, [pc, #88]	; (f6f4 <nrfx_clock_start+0x90>)
    f69c:	f005 fb2d 	bl	14cfa <assert_post_action>
            break;
    }
}
    f6a0:	e018      	b.n	f6d4 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    f6a2:	4620      	mov	r0, r4
    f6a4:	f10d 0107 	add.w	r1, sp, #7
    f6a8:	f7ff ff6c 	bl	f584 <nrf_clock_is_running.constprop.0>
    f6ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f6b0:	b190      	cbz	r0, f6d8 <nrfx_clock_start+0x74>
    f6b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f6b6:	2a02      	cmp	r2, #2
    f6b8:	d10e      	bne.n	f6d8 <nrfx_clock_start+0x74>

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    f6ba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6be:	2200      	movs	r2, #0
    f6c0:	4b0e      	ldr	r3, [pc, #56]	; (f6fc <nrfx_clock_start+0x98>)
    f6c2:	601a      	str	r2, [r3, #0]
    f6c4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f6c6:	2202      	movs	r2, #2
    f6c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f6cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f6d0:	2201      	movs	r2, #1
    f6d2:	609a      	str	r2, [r3, #8]
}
    f6d4:	b002      	add	sp, #8
    f6d6:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    f6d8:	2201      	movs	r2, #1
    f6da:	e7ee      	b.n	f6ba <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f6dc:	2200      	movs	r2, #0
    f6de:	4b08      	ldr	r3, [pc, #32]	; (f700 <nrfx_clock_start+0x9c>)
    f6e0:	601a      	str	r2, [r3, #0]
    f6e2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f6e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f6e8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f6ec:	601c      	str	r4, [r3, #0]
}
    f6ee:	e7f1      	b.n	f6d4 <nrfx_clock_start+0x70>
    f6f0:	200009f0 	.word	0x200009f0
    f6f4:	00016ac9 	.word	0x00016ac9
    f6f8:	00015b65 	.word	0x00015b65
    f6fc:	50005104 	.word	0x50005104
    f700:	50005100 	.word	0x50005100

0000f704 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f704:	4b2d      	ldr	r3, [pc, #180]	; (f7bc <nrfx_clock_stop+0xb8>)
{
    f706:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f708:	791b      	ldrb	r3, [r3, #4]
{
    f70a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    f70c:	b953      	cbnz	r3, f724 <nrfx_clock_stop+0x20>
    f70e:	492c      	ldr	r1, [pc, #176]	; (f7c0 <nrfx_clock_stop+0xbc>)
    f710:	482c      	ldr	r0, [pc, #176]	; (f7c4 <nrfx_clock_stop+0xc0>)
    f712:	f240 124b 	movw	r2, #331	; 0x14b
    f716:	f005 fa65 	bl	14be4 <printk>
    f71a:	f240 114b 	movw	r1, #331	; 0x14b
    f71e:	4828      	ldr	r0, [pc, #160]	; (f7c0 <nrfx_clock_stop+0xbc>)
    f720:	f005 faeb 	bl	14cfa <assert_post_action>
    switch (domain)
    f724:	b174      	cbz	r4, f744 <nrfx_clock_stop+0x40>
    f726:	2c01      	cmp	r4, #1
    f728:	d027      	beq.n	f77a <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    f72a:	4925      	ldr	r1, [pc, #148]	; (f7c0 <nrfx_clock_stop+0xbc>)
    f72c:	4825      	ldr	r0, [pc, #148]	; (f7c4 <nrfx_clock_stop+0xc0>)
    f72e:	f240 1267 	movw	r2, #359	; 0x167
    f732:	f005 fa57 	bl	14be4 <printk>
    f736:	f240 1167 	movw	r1, #359	; 0x167
    f73a:	4821      	ldr	r0, [pc, #132]	; (f7c0 <nrfx_clock_stop+0xbc>)
    f73c:	f005 fadd 	bl	14cfa <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    f740:	b002      	add	sp, #8
    f742:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    f744:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f748:	2202      	movs	r2, #2
    f74a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f74e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f750:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f754:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f758:	f503 7382 	add.w	r3, r3, #260	; 0x104
    f75c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f75e:	4b1a      	ldr	r3, [pc, #104]	; (f7c8 <nrfx_clock_stop+0xc4>)
    f760:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    f762:	2100      	movs	r1, #0
    f764:	4608      	mov	r0, r1
    f766:	f7ff ff0d 	bl	f584 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    f76a:	2800      	cmp	r0, #0
    f76c:	d0e8      	beq.n	f740 <nrfx_clock_stop+0x3c>
    f76e:	2001      	movs	r0, #1
    f770:	f005 fd60 	bl	15234 <nrfx_busy_wait>
    f774:	3c01      	subs	r4, #1
    f776:	d1f4      	bne.n	f762 <nrfx_clock_stop+0x5e>
    f778:	e7e2      	b.n	f740 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
    f77a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f77e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    f780:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f784:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f788:	f503 7380 	add.w	r3, r3, #256	; 0x100
    f78c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f78e:	4b0f      	ldr	r3, [pc, #60]	; (f7cc <nrfx_clock_stop+0xc8>)
    f790:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    f792:	f88d 4007 	strb.w	r4, [sp, #7]
    f796:	f242 7410 	movw	r4, #10000	; 0x2710
    f79a:	2001      	movs	r0, #1
    f79c:	f10d 0107 	add.w	r1, sp, #7
    f7a0:	f7ff fef0 	bl	f584 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    f7a4:	2800      	cmp	r0, #0
    f7a6:	d0cb      	beq.n	f740 <nrfx_clock_stop+0x3c>
    f7a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f7ac:	2801      	cmp	r0, #1
    f7ae:	d1c7      	bne.n	f740 <nrfx_clock_stop+0x3c>
    f7b0:	f005 fd40 	bl	15234 <nrfx_busy_wait>
    f7b4:	3c01      	subs	r4, #1
    f7b6:	d1f0      	bne.n	f79a <nrfx_clock_stop+0x96>
    f7b8:	e7c2      	b.n	f740 <nrfx_clock_stop+0x3c>
    f7ba:	bf00      	nop
    f7bc:	200009f0 	.word	0x200009f0
    f7c0:	00016ac9 	.word	0x00016ac9
    f7c4:	00015b65 	.word	0x00015b65
    f7c8:	5000500c 	.word	0x5000500c
    f7cc:	50005004 	.word	0x50005004

0000f7d0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f7d0:	4b16      	ldr	r3, [pc, #88]	; (f82c <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    f7d2:	b507      	push	{r0, r1, r2, lr}
    f7d4:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    f7d6:	b152      	cbz	r2, f7ee <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f7d8:	2000      	movs	r0, #0
    f7da:	6018      	str	r0, [r3, #0]
    f7dc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    f7de:	2201      	movs	r2, #1
    f7e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f7e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    f7e8:	4b11      	ldr	r3, [pc, #68]	; (f830 <nrfx_power_clock_irq_handler+0x60>)
    f7ea:	681b      	ldr	r3, [r3, #0]
    f7ec:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f7ee:	4b11      	ldr	r3, [pc, #68]	; (f834 <nrfx_power_clock_irq_handler+0x64>)
    f7f0:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    f7f2:	b18a      	cbz	r2, f818 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f7f4:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    f7f6:	f10d 0107 	add.w	r1, sp, #7
    f7fa:	6018      	str	r0, [r3, #0]
    f7fc:	681b      	ldr	r3, [r3, #0]
    f7fe:	f7ff fec1 	bl	f584 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    f802:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f806:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f80a:	2901      	cmp	r1, #1
    f80c:	f04f 0202 	mov.w	r2, #2
    f810:	d105      	bne.n	f81e <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    f812:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f816:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    f818:	b003      	add	sp, #12
    f81a:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    f81e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    f822:	4b03      	ldr	r3, [pc, #12]	; (f830 <nrfx_power_clock_irq_handler+0x60>)
    f824:	2001      	movs	r0, #1
    f826:	681b      	ldr	r3, [r3, #0]
    f828:	4798      	blx	r3
}
    f82a:	e7f5      	b.n	f818 <nrfx_power_clock_irq_handler+0x48>
    f82c:	50005100 	.word	0x50005100
    f830:	200009f0 	.word	0x200009f0
    f834:	50005104 	.word	0x50005104

0000f838 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    f838:	6803      	ldr	r3, [r0, #0]
{
    f83a:	b510      	push	{r4, lr}
    switch (port)
    f83c:	095a      	lsrs	r2, r3, #5
    f83e:	bf0c      	ite	eq
    f840:	f04f 32ff 	moveq.w	r2, #4294967295
    f844:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    f846:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    f84a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    f84e:	07db      	lsls	r3, r3, #31
{
    f850:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    f852:	d40a      	bmi.n	f86a <nrf_gpio_pin_port_decode+0x32>
    f854:	490e      	ldr	r1, [pc, #56]	; (f890 <nrf_gpio_pin_port_decode+0x58>)
    f856:	480f      	ldr	r0, [pc, #60]	; (f894 <nrf_gpio_pin_port_decode+0x5c>)
    f858:	f240 2229 	movw	r2, #553	; 0x229
    f85c:	f005 f9c2 	bl	14be4 <printk>
    f860:	f240 2129 	movw	r1, #553	; 0x229
    f864:	480a      	ldr	r0, [pc, #40]	; (f890 <nrf_gpio_pin_port_decode+0x58>)
    f866:	f005 fa48 	bl	14cfa <assert_post_action>
    uint32_t pin_number = *p_pin;
    f86a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    f86c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    f870:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    f872:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    f874:	d00a      	beq.n	f88c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    f876:	4906      	ldr	r1, [pc, #24]	; (f890 <nrf_gpio_pin_port_decode+0x58>)
    f878:	4806      	ldr	r0, [pc, #24]	; (f894 <nrf_gpio_pin_port_decode+0x5c>)
    f87a:	f240 222e 	movw	r2, #558	; 0x22e
    f87e:	f005 f9b1 	bl	14be4 <printk>
    f882:	f240 212e 	movw	r1, #558	; 0x22e
    f886:	4802      	ldr	r0, [pc, #8]	; (f890 <nrf_gpio_pin_port_decode+0x58>)
    f888:	f005 fa37 	bl	14cfa <assert_post_action>
}
    f88c:	4802      	ldr	r0, [pc, #8]	; (f898 <nrf_gpio_pin_port_decode+0x60>)
    f88e:	bd10      	pop	{r4, pc}
    f890:	0001698b 	.word	0x0001698b
    f894:	00015b65 	.word	0x00015b65
    f898:	50842500 	.word	0x50842500

0000f89c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    f89c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f8a0:	4607      	mov	r7, r0
    f8a2:	4690      	mov	r8, r2
    f8a4:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
    f8a6:	460c      	mov	r4, r1
    f8a8:	b951      	cbnz	r1, f8c0 <nrfx_twim_init+0x24>
    f8aa:	492f      	ldr	r1, [pc, #188]	; (f968 <nrfx_twim_init+0xcc>)
    f8ac:	482f      	ldr	r0, [pc, #188]	; (f96c <nrfx_twim_init+0xd0>)
    f8ae:	f240 1215 	movw	r2, #277	; 0x115
    f8b2:	f005 f997 	bl	14be4 <printk>
    f8b6:	f240 1115 	movw	r1, #277	; 0x115
    f8ba:	482b      	ldr	r0, [pc, #172]	; (f968 <nrfx_twim_init+0xcc>)
    f8bc:	f005 fa1d 	bl	14cfa <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f8c0:	f04f 0c34 	mov.w	ip, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    f8c4:	793e      	ldrb	r6, [r7, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    f8c6:	4d2a      	ldr	r5, [pc, #168]	; (f970 <nrfx_twim_init+0xd4>)
    f8c8:	fb0c fc06 	mul.w	ip, ip, r6
    f8cc:	eb05 010c 	add.w	r1, r5, ip
    f8d0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    f8d4:	2800      	cmp	r0, #0
    f8d6:	d144      	bne.n	f962 <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    f8d8:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    f8da:	f8d7 a000 	ldr.w	sl, [r7]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    f8de:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    f8e2:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
    f8e4:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
    f8e6:	f845 800c 	str.w	r8, [r5, ip]
    p_cb->p_context       = p_context;
    f8ea:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
    f8ee:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
    f8f2:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    f8f6:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    f8fa:	b1eb      	cbz	r3, f938 <nrfx_twim_init+0x9c>
    f8fc:	7be3      	ldrb	r3, [r4, #15]
    f8fe:	b92b      	cbnz	r3, f90c <nrfx_twim_init+0x70>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    f900:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
    f904:	f8ca 2508 	str.w	r2, [sl, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    f908:	f8ca 350c 	str.w	r3, [sl, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    f90c:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
    f90e:	f8ca 3524 	str.w	r3, [sl, #1316]	; 0x524

    if (p_cb->handler)
    f912:	2334      	movs	r3, #52	; 0x34
    f914:	4373      	muls	r3, r6
    f916:	58eb      	ldr	r3, [r5, r3]
    f918:	b123      	cbz	r3, f924 <nrfx_twim_init+0x88>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    f91a:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    f91c:	f340 3007 	sbfx	r0, r0, #12, #8
    f920:	f7fe f836 	bl	d990 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f924:	2334      	movs	r3, #52	; 0x34
    f926:	fb03 5506 	mla	r5, r3, r6, r5
    f92a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    f92c:	4811      	ldr	r0, [pc, #68]	; (f974 <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    f92e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    f932:	b002      	add	sp, #8
    f934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    f938:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f93a:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
    f93c:	f240 680c 	movw	r8, #1548	; 0x60c
    f940:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f942:	f7ff ff79 	bl	f838 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    f946:	9b01      	ldr	r3, [sp, #4]
    f948:	3380      	adds	r3, #128	; 0x80
    f94a:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    f94e:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    f950:	a801      	add	r0, sp, #4
    f952:	9301      	str	r3, [sp, #4]
    f954:	f7ff ff70 	bl	f838 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    f958:	9b01      	ldr	r3, [sp, #4]
    f95a:	3380      	adds	r3, #128	; 0x80
    f95c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    f960:	e7cc      	b.n	f8fc <nrfx_twim_init+0x60>
        return err_code;
    f962:	4805      	ldr	r0, [pc, #20]	; (f978 <nrfx_twim_init+0xdc>)
    f964:	e7e5      	b.n	f932 <nrfx_twim_init+0x96>
    f966:	bf00      	nop
    f968:	00016b06 	.word	0x00016b06
    f96c:	00015b65 	.word	0x00015b65
    f970:	200009f8 	.word	0x200009f8
    f974:	0bad0000 	.word	0x0bad0000
    f978:	0bad0005 	.word	0x0bad0005

0000f97c <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f97c:	2234      	movs	r2, #52	; 0x34
{
    f97e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f980:	4d0f      	ldr	r5, [pc, #60]	; (f9c0 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f982:	7904      	ldrb	r4, [r0, #4]
{
    f984:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    f986:	fb02 5204 	mla	r2, r2, r4, r5
    f98a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
    f98e:	2a01      	cmp	r2, #1
    f990:	d00a      	beq.n	f9a8 <nrfx_twim_enable+0x2c>
    f992:	490c      	ldr	r1, [pc, #48]	; (f9c4 <nrfx_twim_enable+0x48>)
    f994:	480c      	ldr	r0, [pc, #48]	; (f9c8 <nrfx_twim_enable+0x4c>)
    f996:	f240 1279 	movw	r2, #377	; 0x179
    f99a:	f005 f923 	bl	14be4 <printk>
    f99e:	f240 1179 	movw	r1, #377	; 0x179
    f9a2:	4808      	ldr	r0, [pc, #32]	; (f9c4 <nrfx_twim_enable+0x48>)
    f9a4:	f005 f9a9 	bl	14cfa <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    f9a8:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
    f9aa:	6833      	ldr	r3, [r6, #0]
    f9ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    f9b0:	2334      	movs	r3, #52	; 0x34
    f9b2:	fb03 5404 	mla	r4, r3, r4, r5
    f9b6:	2302      	movs	r3, #2
    f9b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    f9bc:	bd70      	pop	{r4, r5, r6, pc}
    f9be:	bf00      	nop
    f9c0:	200009f8 	.word	0x200009f8
    f9c4:	00016b06 	.word	0x00016b06
    f9c8:	00015b65 	.word	0x00015b65

0000f9cc <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    f9cc:	2234      	movs	r2, #52	; 0x34
{
    f9ce:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    f9d0:	4d14      	ldr	r5, [pc, #80]	; (fa24 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    f9d2:	7904      	ldrb	r4, [r0, #4]
{
    f9d4:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    f9d6:	fb02 5204 	mla	r2, r2, r4, r5
    f9da:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
    f9de:	b952      	cbnz	r2, f9f6 <nrfx_twim_disable+0x2a>
    f9e0:	4911      	ldr	r1, [pc, #68]	; (fa28 <nrfx_twim_disable+0x5c>)
    f9e2:	4812      	ldr	r0, [pc, #72]	; (fa2c <nrfx_twim_disable+0x60>)
    f9e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
    f9e8:	f005 f8fc 	bl	14be4 <printk>
    f9ec:	f44f 71c2 	mov.w	r1, #388	; 0x184
    f9f0:	480d      	ldr	r0, [pc, #52]	; (fa28 <nrfx_twim_disable+0x5c>)
    f9f2:	f005 f982 	bl	14cfa <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    f9f6:	2334      	movs	r3, #52	; 0x34
    f9f8:	2100      	movs	r1, #0
    f9fa:	fb03 5304 	mla	r3, r3, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    f9fe:	6832      	ldr	r2, [r6, #0]
    p_reg->INTENCLR = mask;
    fa00:	480b      	ldr	r0, [pc, #44]	; (fa30 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
    fa02:	6099      	str	r1, [r3, #8]
    fa04:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    fa08:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    fa0c:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    fa10:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    fa14:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    fa18:	2201      	movs	r2, #1
    p_cb->busy = false;
    fa1a:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    fa1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    fa22:	bd70      	pop	{r4, r5, r6, pc}
    fa24:	200009f8 	.word	0x200009f8
    fa28:	00016b06 	.word	0x00016b06
    fa2c:	00015b65 	.word	0x00015b65
    fa30:	019c0202 	.word	0x019c0202

0000fa34 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    fa34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    fa38:	7903      	ldrb	r3, [r0, #4]
{
    fa3a:	4680      	mov	r8, r0
    fa3c:	460d      	mov	r5, r1
    fa3e:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    fa40:	b93b      	cbnz	r3, fa52 <nrfx_twim_xfer+0x1e>
    fa42:	684b      	ldr	r3, [r1, #4]
    fa44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    fa48:	d203      	bcs.n	fa52 <nrfx_twim_xfer+0x1e>
    fa4a:	688b      	ldr	r3, [r1, #8]
    fa4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    fa50:	d30a      	bcc.n	fa68 <nrfx_twim_xfer+0x34>
    fa52:	49bc      	ldr	r1, [pc, #752]	; (fd44 <nrfx_twim_xfer+0x310>)
    fa54:	48bc      	ldr	r0, [pc, #752]	; (fd48 <nrfx_twim_xfer+0x314>)
    fa56:	f240 2299 	movw	r2, #665	; 0x299
    fa5a:	f005 f8c3 	bl	14be4 <printk>
    fa5e:	f240 2199 	movw	r1, #665	; 0x299
    fa62:	48b8      	ldr	r0, [pc, #736]	; (fd44 <nrfx_twim_xfer+0x310>)
    fa64:	f005 f949 	bl	14cfa <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    fa68:	2434      	movs	r4, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fa6a:	f898 9004 	ldrb.w	r9, [r8, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    fa6e:	4eb7      	ldr	r6, [pc, #732]	; (fd4c <nrfx_twim_xfer+0x318>)
    fa70:	fb04 f409 	mul.w	r4, r4, r9
    fa74:	5933      	ldr	r3, [r6, r4]
    fa76:	b9fb      	cbnz	r3, fab8 <nrfx_twim_xfer+0x84>
    fa78:	782b      	ldrb	r3, [r5, #0]
    fa7a:	2b02      	cmp	r3, #2
    fa7c:	d00e      	beq.n	fa9c <nrfx_twim_xfer+0x68>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    fa7e:	782b      	ldrb	r3, [r5, #0]
    fa80:	2b03      	cmp	r3, #3
    fa82:	d119      	bne.n	fab8 <nrfx_twim_xfer+0x84>
    fa84:	f240 22a2 	movw	r2, #674	; 0x2a2
    fa88:	49ae      	ldr	r1, [pc, #696]	; (fd44 <nrfx_twim_xfer+0x310>)
    fa8a:	48af      	ldr	r0, [pc, #700]	; (fd48 <nrfx_twim_xfer+0x314>)
    fa8c:	f005 f8aa 	bl	14be4 <printk>
    fa90:	f240 21a2 	movw	r1, #674	; 0x2a2
    fa94:	48ab      	ldr	r0, [pc, #684]	; (fd44 <nrfx_twim_xfer+0x310>)
    fa96:	f005 f930 	bl	14cfa <assert_post_action>
    fa9a:	e00d      	b.n	fab8 <nrfx_twim_xfer+0x84>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    fa9c:	f240 22a1 	movw	r2, #673	; 0x2a1
    faa0:	49a8      	ldr	r1, [pc, #672]	; (fd44 <nrfx_twim_xfer+0x310>)
    faa2:	48a9      	ldr	r0, [pc, #676]	; (fd48 <nrfx_twim_xfer+0x314>)
    faa4:	f005 f89e 	bl	14be4 <printk>
    faa8:	f240 21a1 	movw	r1, #673	; 0x2a1
    faac:	48a5      	ldr	r0, [pc, #660]	; (fd44 <nrfx_twim_xfer+0x310>)
    faae:	f005 f924 	bl	14cfa <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    fab2:	5933      	ldr	r3, [r6, r4]
    fab4:	2b00      	cmp	r3, #0
    fab6:	d0e2      	beq.n	fa7e <nrfx_twim_xfer+0x4a>
    p_cb->error = false;
    fab8:	2334      	movs	r3, #52	; 0x34
    faba:	2200      	movs	r2, #0
    fabc:	fb03 6309 	mla	r3, r3, r9, r6
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    fac0:	f8d8 4000 	ldr.w	r4, [r8]
    p_cb->error = false;
    fac4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    fac8:	686b      	ldr	r3, [r5, #4]
    faca:	b153      	cbz	r3, fae2 <nrfx_twim_xfer+0xae>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    facc:	68eb      	ldr	r3, [r5, #12]
    face:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    fad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fad6:	d004      	beq.n	fae2 <nrfx_twim_xfer+0xae>
        return err_code;
    fad8:	f8df 8278 	ldr.w	r8, [pc, #632]	; fd54 <nrfx_twim_xfer+0x320>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    fadc:	4640      	mov	r0, r8
    fade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    fae2:	f04f 0c34 	mov.w	ip, #52	; 0x34
    fae6:	fb0c 6c09 	mla	ip, ip, r9, r6
    p_reg->INTENCLR = mask;
    faea:	4b99      	ldr	r3, [pc, #612]	; (fd50 <nrfx_twim_xfer+0x31c>)
    faec:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    faf0:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
    faf4:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    faf8:	b133      	cbz	r3, fb08 <nrfx_twim_xfer+0xd4>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    fafa:	f8dc 3008 	ldr.w	r3, [ip, #8]
        return err_code;
    fafe:	f8df 8258 	ldr.w	r8, [pc, #600]	; fd58 <nrfx_twim_xfer+0x324>
    p_reg->INTENSET = mask;
    fb02:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    fb06:	e7e9      	b.n	fadc <nrfx_twim_xfer+0xa8>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    fb08:	f017 0f14 	tst.w	r7, #20
    fb0c:	bf0c      	ite	eq
    fb0e:	2301      	moveq	r3, #1
    fb10:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    fb12:	46a8      	mov	r8, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    fb14:	f88c 302f 	strb.w	r3, [ip, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    fb18:	f10c 0e0c 	add.w	lr, ip, #12
    fb1c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    fb20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    fb24:	f8d8 3000 	ldr.w	r3, [r8]
    p_cb->flags = flags;
    fb28:	f8cc 7020 	str.w	r7, [ip, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    fb2c:	f8ce 3000 	str.w	r3, [lr]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    fb30:	f3c7 1300 	ubfx	r3, r7, #4, #1
    fb34:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    fb38:	786b      	ldrb	r3, [r5, #1]
    fb3a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb3e:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    fb42:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    fb46:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    fb4a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    fb4e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    fb52:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    fb56:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    fb5a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    fb5e:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    fb62:	bf18      	it	ne
    fb64:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    fb66:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    fb6a:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    fb6e:	bf18      	it	ne
    fb70:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    fb72:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    fb76:	782b      	ldrb	r3, [r5, #0]
    fb78:	2b03      	cmp	r3, #3
    fb7a:	f200 80df 	bhi.w	fd3c <nrfx_twim_xfer+0x308>
    fb7e:	e8df f003 	tbb	[pc, r3]
    fb82:	caae      	.short	0xcaae
    fb84:	0293      	.short	0x0293
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    fb86:	06f9      	lsls	r1, r7, #27
    fb88:	d50a      	bpl.n	fba0 <nrfx_twim_xfer+0x16c>
    fb8a:	496e      	ldr	r1, [pc, #440]	; (fd44 <nrfx_twim_xfer+0x310>)
    fb8c:	486e      	ldr	r0, [pc, #440]	; (fd48 <nrfx_twim_xfer+0x314>)
    fb8e:	f240 12dd 	movw	r2, #477	; 0x1dd
    fb92:	f005 f827 	bl	14be4 <printk>
    fb96:	f240 11dd 	movw	r1, #477	; 0x1dd
    fb9a:	486a      	ldr	r0, [pc, #424]	; (fd44 <nrfx_twim_xfer+0x310>)
    fb9c:	f005 f8ad 	bl	14cfa <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    fba0:	073a      	lsls	r2, r7, #28
    fba2:	d50a      	bpl.n	fbba <nrfx_twim_xfer+0x186>
    fba4:	4967      	ldr	r1, [pc, #412]	; (fd44 <nrfx_twim_xfer+0x310>)
    fba6:	4868      	ldr	r0, [pc, #416]	; (fd48 <nrfx_twim_xfer+0x314>)
    fba8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
    fbac:	f005 f81a 	bl	14be4 <printk>
    fbb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    fbb4:	4863      	ldr	r0, [pc, #396]	; (fd44 <nrfx_twim_xfer+0x310>)
    fbb6:	f005 f8a0 	bl	14cfa <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    fbba:	077b      	lsls	r3, r7, #29
    fbbc:	d50a      	bpl.n	fbd4 <nrfx_twim_xfer+0x1a0>
    fbbe:	4961      	ldr	r1, [pc, #388]	; (fd44 <nrfx_twim_xfer+0x310>)
    fbc0:	4861      	ldr	r0, [pc, #388]	; (fd48 <nrfx_twim_xfer+0x314>)
    fbc2:	f240 12df 	movw	r2, #479	; 0x1df
    fbc6:	f005 f80d 	bl	14be4 <printk>
    fbca:	f240 11df 	movw	r1, #479	; 0x1df
    fbce:	485d      	ldr	r0, [pc, #372]	; (fd44 <nrfx_twim_xfer+0x310>)
    fbd0:	f005 f893 	bl	14cfa <assert_post_action>
    fbd4:	692a      	ldr	r2, [r5, #16]
    fbd6:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    fbda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fbde:	f47f af7b 	bne.w	fad8 <nrfx_twim_xfer+0xa4>
    p_reg->SHORTS = mask;
    fbe2:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fbe6:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
    fbe8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fbec:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fbee:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fbf2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fbf6:	2300      	movs	r3, #0
    fbf8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    fbfc:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc00:	2101      	movs	r1, #1
    fc02:	6221      	str	r1, [r4, #32]
    fc04:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fc06:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    fc0a:	2900      	cmp	r1, #0
    fc0c:	d0fb      	beq.n	fc06 <nrfx_twim_xfer+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc0e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    fc12:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    fc16:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fc18:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fc1c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    fc20:	2334      	movs	r3, #52	; 0x34
    fc22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    fc26:	fb03 6309 	mla	r3, r3, r9, r6
    fc2a:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    fc2c:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    fc2e:	f8df 812c 	ldr.w	r8, [pc, #300]	; fd5c <nrfx_twim_xfer+0x328>
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    fc32:	0738      	lsls	r0, r7, #28
    fc34:	d407      	bmi.n	fc46 <nrfx_twim_xfer+0x212>
    fc36:	782a      	ldrb	r2, [r5, #0]
    fc38:	2a03      	cmp	r2, #3
    fc3a:	d004      	beq.n	fc46 <nrfx_twim_xfer+0x212>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc3c:	2201      	movs	r2, #1
    fc3e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    fc40:	686b      	ldr	r3, [r5, #4]
    fc42:	b903      	cbnz	r3, fc46 <nrfx_twim_xfer+0x212>
    fc44:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    fc46:	2334      	movs	r3, #52	; 0x34
    fc48:	fb03 f309 	mul.w	r3, r3, r9
    fc4c:	18f2      	adds	r2, r6, r3
    fc4e:	58f3      	ldr	r3, [r6, r3]
    fc50:	2b00      	cmp	r3, #0
    fc52:	f040 8087 	bne.w	fd64 <nrfx_twim_xfer+0x330>
                transmission_finished = true;
    fc56:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fc58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    fc5c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    fc60:	2900      	cmp	r1, #0
    fc62:	f040 8097 	bne.w	fd94 <nrfx_twim_xfer+0x360>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    fc66:	3a00      	subs	r2, #0
    fc68:	bf18      	it	ne
    fc6a:	2201      	movne	r2, #1
    fc6c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    fc70:	2900      	cmp	r1, #0
    fc72:	f000 8095 	beq.w	fda0 <nrfx_twim_xfer+0x36c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    fc7a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fc7e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    fc82:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    fc86:	b110      	cbz	r0, fc8e <nrfx_twim_xfer+0x25a>
    fc88:	f411 7f00 	tst.w	r1, #512	; 0x200
    fc8c:	d104      	bne.n	fc98 <nrfx_twim_xfer+0x264>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc8e:	6225      	str	r5, [r4, #32]
    fc90:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    fc92:	2800      	cmp	r0, #0
    fc94:	d0e0      	beq.n	fc58 <nrfx_twim_xfer+0x224>
                    transmission_finished = false;
    fc96:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    fc98:	05c9      	lsls	r1, r1, #23
    fc9a:	f140 8081 	bpl.w	fda0 <nrfx_twim_xfer+0x36c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fc9e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    fca2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
    fca6:	e7d7      	b.n	fc58 <nrfx_twim_xfer+0x224>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fca8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fcaa:	68ea      	ldr	r2, [r5, #12]
    fcac:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fcb0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    fcb4:	692b      	ldr	r3, [r5, #16]
    fcb6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    fcba:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    fcbe:	f47f af0b 	bne.w	fad8 <nrfx_twim_xfer+0xa4>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    fcc2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fcc4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    fcc8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    fccc:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    fcd0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fcd4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fcd6:	2202      	movs	r2, #2
    fcd8:	fb03 6309 	mla	r3, r3, r9, r6
    fcdc:	e012      	b.n	fd04 <nrfx_twim_xfer+0x2d0>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fcde:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fce0:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    fce2:	f017 0f20 	tst.w	r7, #32
    fce6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fcea:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    fcee:	f04f 0334 	mov.w	r3, #52	; 0x34
    fcf2:	d00b      	beq.n	fd0c <nrfx_twim_xfer+0x2d8>
    p_reg->SHORTS = mask;
    fcf4:	f44f 7280 	mov.w	r2, #256	; 0x100
    fcf8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    fcfc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    fd00:	fb03 6309 	mla	r3, r3, r9, r6
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fd04:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd06:	2301      	movs	r3, #1
    fd08:	6223      	str	r3, [r4, #32]
    fd0a:	e78f      	b.n	fc2c <nrfx_twim_xfer+0x1f8>
    p_reg->SHORTS = mask;
    fd0c:	f44f 7200 	mov.w	r2, #512	; 0x200
    fd10:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    fd14:	e7df      	b.n	fcd6 <nrfx_twim_xfer+0x2a2>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    fd16:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fd18:	68ea      	ldr	r2, [r5, #12]
    fd1a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fd1e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    fd22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    fd26:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fd2a:	2334      	movs	r3, #52	; 0x34
    fd2c:	2202      	movs	r2, #2
    fd2e:	fb03 6309 	mla	r3, r3, r9, r6
    fd32:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd34:	2301      	movs	r3, #1
    fd36:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    fd38:	2300      	movs	r3, #0
    fd3a:	e778      	b.n	fc2e <nrfx_twim_xfer+0x1fa>
    switch (p_xfer_desc->type)
    fd3c:	2308      	movs	r3, #8
    fd3e:	f8df 8020 	ldr.w	r8, [pc, #32]	; fd60 <nrfx_twim_xfer+0x32c>
    fd42:	e776      	b.n	fc32 <nrfx_twim_xfer+0x1fe>
    fd44:	00016b06 	.word	0x00016b06
    fd48:	00015b65 	.word	0x00015b65
    fd4c:	200009f8 	.word	0x200009f8
    fd50:	019c0202 	.word	0x019c0202
    fd54:	0bad000a 	.word	0x0bad000a
    fd58:	0bad000b 	.word	0x0bad000b
    fd5c:	0bad0000 	.word	0x0bad0000
    fd60:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    fd64:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    fd66:	bf44      	itt	mi
    fd68:	2300      	movmi	r3, #0
    fd6a:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    fd6c:	067b      	lsls	r3, r7, #25
    fd6e:	d406      	bmi.n	fd7e <nrfx_twim_xfer+0x34a>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    fd70:	2334      	movs	r3, #52	; 0x34
    fd72:	fb03 6309 	mla	r3, r3, r9, r6
    fd76:	689a      	ldr	r2, [r3, #8]
    fd78:	f042 0202 	orr.w	r2, r2, #2
    fd7c:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    fd7e:	2334      	movs	r3, #52	; 0x34
    fd80:	fb03 6609 	mla	r6, r3, r9, r6
    fd84:	68b3      	ldr	r3, [r6, #8]
    fd86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fd8a:	60b3      	str	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    fd8c:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    fd8e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    fd92:	e6a3      	b.n	fadc <nrfx_twim_xfer+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd94:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    fd98:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
    fd9c:	2201      	movs	r2, #1
    fd9e:	e765      	b.n	fc6c <nrfx_twim_xfer+0x238>
        } while (!transmission_finished);
    fda0:	2a00      	cmp	r2, #0
    fda2:	f43f af59 	beq.w	fc58 <nrfx_twim_xfer+0x224>
        p_cb->busy = false;
    fda6:	2134      	movs	r1, #52	; 0x34
    fda8:	2000      	movs	r0, #0
    fdaa:	fb01 6209 	mla	r2, r1, r9, r6
    uint32_t error_source = p_reg->ERRORSRC;
    fdae:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    fdb2:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    fdb6:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    fdba:	b18b      	cbz	r3, fde0 <nrfx_twim_xfer+0x3ac>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    fdbc:	4a0f      	ldr	r2, [pc, #60]	; (fdfc <nrfx_twim_xfer+0x3c8>)
    fdbe:	4910      	ldr	r1, [pc, #64]	; (fe00 <nrfx_twim_xfer+0x3cc>)
    fdc0:	f013 0f01 	tst.w	r3, #1
    fdc4:	bf14      	ite	ne
    fdc6:	4690      	movne	r8, r2
    fdc8:	4688      	moveq	r8, r1
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    fdca:	3201      	adds	r2, #1
    fdcc:	f013 0f02 	tst.w	r3, #2
    fdd0:	bf18      	it	ne
    fdd2:	4690      	movne	r8, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    fdd4:	f013 0f04 	tst.w	r3, #4
    fdd8:	4b0a      	ldr	r3, [pc, #40]	; (fe04 <nrfx_twim_xfer+0x3d0>)
    fdda:	bf18      	it	ne
    fddc:	4698      	movne	r8, r3
    fdde:	e67d      	b.n	fadc <nrfx_twim_xfer+0xa8>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    fde0:	067b      	lsls	r3, r7, #25
    fde2:	f53f ae7b 	bmi.w	fadc <nrfx_twim_xfer+0xa8>
                !xfer_completeness_check(p_twim, p_cb))
    fde6:	4620      	mov	r0, r4
    fde8:	fb09 6101 	mla	r1, r9, r1, r6
    fdec:	f005 fa24 	bl	15238 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    fdf0:	4b03      	ldr	r3, [pc, #12]	; (fe00 <nrfx_twim_xfer+0x3cc>)
    fdf2:	2800      	cmp	r0, #0
    fdf4:	bf08      	it	eq
    fdf6:	4698      	moveq	r8, r3
    fdf8:	e670      	b.n	fadc <nrfx_twim_xfer+0xa8>
    fdfa:	bf00      	nop
    fdfc:	0bae0000 	.word	0x0bae0000
    fe00:	0bad0001 	.word	0x0bad0001
    fe04:	0bae0002 	.word	0x0bae0002

0000fe08 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
    fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
    fe0a:	4c62      	ldr	r4, [pc, #392]	; (ff94 <nrfx_twim_2_irq_handler+0x18c>)
{
    fe0c:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
    fe0e:	6823      	ldr	r3, [r4, #0]
    fe10:	b953      	cbnz	r3, fe28 <nrfx_twim_2_irq_handler+0x20>
    fe12:	4961      	ldr	r1, [pc, #388]	; (ff98 <nrfx_twim_2_irq_handler+0x190>)
    fe14:	4861      	ldr	r0, [pc, #388]	; (ff9c <nrfx_twim_2_irq_handler+0x194>)
    fe16:	f44f 7237 	mov.w	r2, #732	; 0x2dc
    fe1a:	f004 fee3 	bl	14be4 <printk>
    fe1e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    fe22:	485d      	ldr	r0, [pc, #372]	; (ff98 <nrfx_twim_2_irq_handler+0x190>)
    fe24:	f004 ff69 	bl	14cfa <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fe28:	4b5d      	ldr	r3, [pc, #372]	; (ffa0 <nrfx_twim_2_irq_handler+0x198>)
    fe2a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    fe2e:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    fe30:	b1fa      	cbz	r2, fe72 <nrfx_twim_2_irq_handler+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fe32:	2200      	movs	r2, #0
    fe34:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    fe38:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fe3c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    fe40:	b9ba      	cbnz	r2, fe72 <nrfx_twim_2_irq_handler+0x6a>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    fe42:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    fe44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    fe48:	2202      	movs	r2, #2
    fe4a:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    fe4c:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    fe4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fe52:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    fe56:	b11a      	cbz	r2, fe60 <nrfx_twim_2_irq_handler+0x58>
    return p_reg->SHORTS;
    fe58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    fe5c:	059e      	lsls	r6, r3, #22
    fe5e:	d403      	bmi.n	fe68 <nrfx_twim_2_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fe60:	2201      	movs	r2, #1
    fe62:	4b4f      	ldr	r3, [pc, #316]	; (ffa0 <nrfx_twim_2_irq_handler+0x198>)
    fe64:	621a      	str	r2, [r3, #32]
    fe66:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    fe68:	2301      	movs	r3, #1
    fe6a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
    fe6e:	b007      	add	sp, #28
    fe70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fe72:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    fe76:	2b00      	cmp	r3, #0
    fe78:	d054      	beq.n	ff24 <nrfx_twim_2_irq_handler+0x11c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fe7a:	2300      	movs	r3, #0
    fe7c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    fe80:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    fe84:	6a23      	ldr	r3, [r4, #32]
    fe86:	065d      	lsls	r5, r3, #25
    fe88:	d40a      	bmi.n	fea0 <nrfx_twim_2_irq_handler+0x98>
    fe8a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    fe8e:	b93b      	cbnz	r3, fea0 <nrfx_twim_2_irq_handler+0x98>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    fe90:	4940      	ldr	r1, [pc, #256]	; (ff94 <nrfx_twim_2_irq_handler+0x18c>)
    fe92:	4843      	ldr	r0, [pc, #268]	; (ffa0 <nrfx_twim_2_irq_handler+0x198>)
    fe94:	f005 f9d0 	bl	15238 <xfer_completeness_check>
    fe98:	f080 0001 	eor.w	r0, r0, #1
    fe9c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    fea0:	6a23      	ldr	r3, [r4, #32]
    fea2:	f013 0704 	ands.w	r7, r3, #4
    fea6:	d122      	bne.n	feee <nrfx_twim_2_irq_handler+0xe6>
            event.xfer_desc = p_cb->xfer_desc;
    fea8:	4e3e      	ldr	r6, [pc, #248]	; (ffa4 <nrfx_twim_2_irq_handler+0x19c>)
    feaa:	ad01      	add	r5, sp, #4
    feac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    feae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    feb0:	6833      	ldr	r3, [r6, #0]
    feb2:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
    feb6:	602b      	str	r3, [r5, #0]
    feb8:	4b39      	ldr	r3, [pc, #228]	; (ffa0 <nrfx_twim_2_irq_handler+0x198>)
    feba:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    febe:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    fec2:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    fec6:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    feca:	f1bc 0f00 	cmp.w	ip, #0
    fece:	d002      	beq.n	fed6 <nrfx_twim_2_irq_handler+0xce>
    fed0:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    fed4:	b15a      	cbz	r2, feee <nrfx_twim_2_irq_handler+0xe6>
    p_reg->SHORTS = mask;
    fed6:	2200      	movs	r2, #0
    fed8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    fedc:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    fede:	4a32      	ldr	r2, [pc, #200]	; (ffa8 <nrfx_twim_2_irq_handler+0x1a0>)
    fee0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fee8:	4b30      	ldr	r3, [pc, #192]	; (ffac <nrfx_twim_2_irq_handler+0x1a4>)
    feea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    feee:	4a2c      	ldr	r2, [pc, #176]	; (ffa0 <nrfx_twim_2_irq_handler+0x198>)
    fef0:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    fef4:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    fef6:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    fefa:	d53c      	bpl.n	ff76 <nrfx_twim_2_irq_handler+0x16e>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    fefc:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    fefe:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    ff02:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ff06:	b90b      	cbnz	r3, ff0c <nrfx_twim_2_irq_handler+0x104>
        p_cb->busy = false;
    ff08:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    ff0c:	6a23      	ldr	r3, [r4, #32]
    ff0e:	075b      	lsls	r3, r3, #29
    ff10:	d503      	bpl.n	ff1a <nrfx_twim_2_irq_handler+0x112>
    ff12:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    ff16:	2b00      	cmp	r3, #0
    ff18:	d0a9      	beq.n	fe6e <nrfx_twim_2_irq_handler+0x66>
        p_cb->handler(&event, p_cb->p_context);
    ff1a:	e9d4 3100 	ldrd	r3, r1, [r4]
    ff1e:	4668      	mov	r0, sp
    ff20:	4798      	blx	r3
}
    ff22:	e7a4      	b.n	fe6e <nrfx_twim_2_irq_handler+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ff24:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    ff28:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    ff2c:	7b23      	ldrb	r3, [r4, #12]
    ff2e:	b983      	cbnz	r3, ff52 <nrfx_twim_2_irq_handler+0x14a>
            event.xfer_desc = p_cb->xfer_desc;
    ff30:	4f1c      	ldr	r7, [pc, #112]	; (ffa4 <nrfx_twim_2_irq_handler+0x19c>)
    ff32:	ae01      	add	r6, sp, #4
    ff34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    ff36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    ff38:	683b      	ldr	r3, [r7, #0]
    ff3a:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    ff3c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ff40:	2b00      	cmp	r3, #0
    ff42:	d1d4      	bne.n	feee <nrfx_twim_2_irq_handler+0xe6>
    p_reg->SHORTS = mask;
    ff44:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    ff48:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    ff4a:	4b17      	ldr	r3, [pc, #92]	; (ffa8 <nrfx_twim_2_irq_handler+0x1a0>)
    ff4c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    ff50:	e7c8      	b.n	fee4 <nrfx_twim_2_irq_handler+0xdc>
    p_reg->SHORTS = mask;
    ff52:	f44f 7300 	mov.w	r3, #512	; 0x200
    ff56:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    ff5a:	f240 2302 	movw	r3, #514	; 0x202
    ff5e:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    ff60:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    ff64:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    ff68:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    ff6a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ff6e:	2301      	movs	r3, #1
    ff70:	60ab      	str	r3, [r5, #8]
    ff72:	622b      	str	r3, [r5, #32]
            return;
    ff74:	e77b      	b.n	fe6e <nrfx_twim_2_irq_handler+0x66>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    ff76:	0759      	lsls	r1, r3, #29
    ff78:	d501      	bpl.n	ff7e <nrfx_twim_2_irq_handler+0x176>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    ff7a:	2302      	movs	r3, #2
    ff7c:	e7bf      	b.n	fefe <nrfx_twim_2_irq_handler+0xf6>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    ff7e:	07da      	lsls	r2, r3, #31
    ff80:	d501      	bpl.n	ff86 <nrfx_twim_2_irq_handler+0x17e>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    ff82:	2303      	movs	r3, #3
    ff84:	e7bb      	b.n	fefe <nrfx_twim_2_irq_handler+0xf6>
    else if (p_cb->error)
    ff86:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    ff8a:	2b00      	cmp	r3, #0
    ff8c:	d0b7      	beq.n	fefe <nrfx_twim_2_irq_handler+0xf6>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    ff8e:	2304      	movs	r3, #4
    ff90:	e7b5      	b.n	fefe <nrfx_twim_2_irq_handler+0xf6>
    ff92:	bf00      	nop
    ff94:	200009f8 	.word	0x200009f8
    ff98:	00016b06 	.word	0x00016b06
    ff9c:	00015b65 	.word	0x00015b65
    ffa0:	5000a000 	.word	0x5000a000
    ffa4:	20000a04 	.word	0x20000a04
    ffa8:	019c0202 	.word	0x019c0202
    ffac:	e000e100 	.word	0xe000e100

0000ffb0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ffb0:	6803      	ldr	r3, [r0, #0]
{
    ffb2:	b510      	push	{r4, lr}
    switch (port)
    ffb4:	095a      	lsrs	r2, r3, #5
    ffb6:	bf0c      	ite	eq
    ffb8:	f04f 32ff 	moveq.w	r2, #4294967295
    ffbc:	2200      	movne	r2, #0
    pin_number &= 0x1F;
    ffbe:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    ffc2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ffc6:	07db      	lsls	r3, r3, #31
{
    ffc8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    ffca:	d40a      	bmi.n	ffe2 <nrf_gpio_pin_port_decode+0x32>
    ffcc:	490e      	ldr	r1, [pc, #56]	; (10008 <CONFIG_PM_PARTITION_SIZE_SPM+0x8>)
    ffce:	480f      	ldr	r0, [pc, #60]	; (1000c <CONFIG_PM_PARTITION_SIZE_SPM+0xc>)
    ffd0:	f240 2229 	movw	r2, #553	; 0x229
    ffd4:	f004 fe06 	bl	14be4 <printk>
    ffd8:	f240 2129 	movw	r1, #553	; 0x229
    ffdc:	480a      	ldr	r0, [pc, #40]	; (10008 <CONFIG_PM_PARTITION_SIZE_SPM+0x8>)
    ffde:	f004 fe8c 	bl	14cfa <assert_post_action>
    uint32_t pin_number = *p_pin;
    ffe2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    ffe4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ffe8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    ffea:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ffec:	d00a      	beq.n	10004 <CONFIG_PM_PARTITION_SIZE_SPM+0x4>
            NRFX_ASSERT(0);
    ffee:	4906      	ldr	r1, [pc, #24]	; (10008 <CONFIG_PM_PARTITION_SIZE_SPM+0x8>)
    fff0:	4806      	ldr	r0, [pc, #24]	; (1000c <CONFIG_PM_PARTITION_SIZE_SPM+0xc>)
    fff2:	f240 222e 	movw	r2, #558	; 0x22e
    fff6:	f004 fdf5 	bl	14be4 <printk>
    fffa:	f240 212e 	movw	r1, #558	; 0x22e
    fffe:	4802      	ldr	r0, [pc, #8]	; (10008 <CONFIG_PM_PARTITION_SIZE_SPM+0x8>)
   10000:	f004 fe7b 	bl	14cfa <assert_post_action>
}
   10004:	4802      	ldr	r0, [pc, #8]	; (10010 <CONFIG_PM_PARTITION_SIZE_SPM+0x10>)
   10006:	bd10      	pop	{r4, pc}
   10008:	0001698b 	.word	0x0001698b
   1000c:	00015b65 	.word	0x00015b65
   10010:	50842500 	.word	0x50842500

00010014 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   10014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10016:	460c      	mov	r4, r1
   10018:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1001a:	f005 f93d 	bl	15298 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1001e:	4620      	mov	r0, r4
   10020:	f005 f93a 	bl	15298 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10024:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   10026:	f240 650d 	movw	r5, #1549	; 0x60d
   1002a:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1002c:	f7ff ffc0 	bl	ffb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10030:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   10032:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   10034:	3380      	adds	r3, #128	; 0x80
   10036:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1003a:	a801      	add	r0, sp, #4
   1003c:	9401      	str	r4, [sp, #4]
   1003e:	f7ff ffb7 	bl	ffb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10042:	9b01      	ldr	r3, [sp, #4]
   10044:	3380      	adds	r3, #128	; 0x80
   10046:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1004a:	2004      	movs	r0, #4
   1004c:	f005 f8f2 	bl	15234 <nrfx_busy_wait>
   10050:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10052:	a801      	add	r0, sp, #4
   10054:	9401      	str	r4, [sp, #4]
   10056:	f7ff ffab 	bl	ffb0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1005a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1005c:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1005e:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   10060:	07db      	lsls	r3, r3, #31
   10062:	d414      	bmi.n	1008e <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10064:	a801      	add	r0, sp, #4
   10066:	9601      	str	r6, [sp, #4]
   10068:	f7ff ffa2 	bl	ffb0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1006c:	9b01      	ldr	r3, [sp, #4]
   1006e:	3d01      	subs	r5, #1
   10070:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   10074:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   10076:	2004      	movs	r0, #4
   10078:	f005 f8dc 	bl	15234 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1007c:	4630      	mov	r0, r6
   1007e:	f005 f90b 	bl	15298 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   10082:	2004      	movs	r0, #4
   10084:	f005 f8d6 	bl	15234 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   10088:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1008c:	d1e1      	bne.n	10052 <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1008e:	a801      	add	r0, sp, #4
   10090:	9401      	str	r4, [sp, #4]
   10092:	f7ff ff8d 	bl	ffb0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   10096:	2301      	movs	r3, #1
   10098:	9a01      	ldr	r2, [sp, #4]
   1009a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1009c:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1009e:	2004      	movs	r0, #4
   100a0:	f005 f8c8 	bl	15234 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   100a4:	4620      	mov	r0, r4
   100a6:	f005 f8f7 	bl	15298 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   100aa:	2004      	movs	r0, #4
   100ac:	f005 f8c2 	bl	15234 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   100b0:	a801      	add	r0, sp, #4
   100b2:	9401      	str	r4, [sp, #4]
   100b4:	f7ff ff7c 	bl	ffb0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   100b8:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   100ba:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   100bc:	4803      	ldr	r0, [pc, #12]	; (100cc <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   100be:	40d3      	lsrs	r3, r2
   100c0:	f003 0301 	and.w	r3, r3, #1
   100c4:	1ac0      	subs	r0, r0, r3
   100c6:	b003      	add	sp, #12
   100c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ca:	bf00      	nop
   100cc:	0bad0001 	.word	0x0bad0001

000100d0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   100d0:	4b0e      	ldr	r3, [pc, #56]	; (1010c <z_sys_init_run_level+0x3c>)
{
   100d2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   100d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   100d8:	3001      	adds	r0, #1
   100da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   100de:	42a6      	cmp	r6, r4
   100e0:	d800      	bhi.n	100e4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   100e2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   100e4:	e9d4 3500 	ldrd	r3, r5, [r4]
   100e8:	4628      	mov	r0, r5
   100ea:	4798      	blx	r3
		if (dev != NULL) {
   100ec:	b165      	cbz	r5, 10108 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   100ee:	68eb      	ldr	r3, [r5, #12]
   100f0:	b130      	cbz	r0, 10100 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   100f2:	2800      	cmp	r0, #0
   100f4:	bfb8      	it	lt
   100f6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   100f8:	28ff      	cmp	r0, #255	; 0xff
   100fa:	bfa8      	it	ge
   100fc:	20ff      	movge	r0, #255	; 0xff
   100fe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   10100:	785a      	ldrb	r2, [r3, #1]
   10102:	f042 0201 	orr.w	r2, r2, #1
   10106:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10108:	3408      	adds	r4, #8
   1010a:	e7e8      	b.n	100de <z_sys_init_run_level+0xe>
   1010c:	00015958 	.word	0x00015958

00010110 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   10110:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   10112:	4605      	mov	r5, r0
   10114:	b910      	cbnz	r0, 1011c <z_impl_device_get_binding+0xc>
		return NULL;
   10116:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   10118:	4620      	mov	r0, r4
   1011a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1011c:	7803      	ldrb	r3, [r0, #0]
   1011e:	2b00      	cmp	r3, #0
   10120:	d0f9      	beq.n	10116 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   10122:	4a0f      	ldr	r2, [pc, #60]	; (10160 <z_impl_device_get_binding+0x50>)
   10124:	4c0f      	ldr	r4, [pc, #60]	; (10164 <z_impl_device_get_binding+0x54>)
   10126:	4616      	mov	r6, r2
   10128:	4294      	cmp	r4, r2
   1012a:	d108      	bne.n	1013e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1012c:	4c0d      	ldr	r4, [pc, #52]	; (10164 <z_impl_device_get_binding+0x54>)
   1012e:	42b4      	cmp	r4, r6
   10130:	d0f1      	beq.n	10116 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   10132:	4620      	mov	r0, r4
   10134:	f005 f8bd 	bl	152b2 <z_device_ready>
   10138:	b950      	cbnz	r0, 10150 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1013a:	3418      	adds	r4, #24
   1013c:	e7f7      	b.n	1012e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1013e:	4620      	mov	r0, r4
   10140:	f005 f8b7 	bl	152b2 <z_device_ready>
   10144:	b110      	cbz	r0, 1014c <z_impl_device_get_binding+0x3c>
   10146:	6823      	ldr	r3, [r4, #0]
   10148:	42ab      	cmp	r3, r5
   1014a:	d0e5      	beq.n	10118 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1014c:	3418      	adds	r4, #24
   1014e:	e7eb      	b.n	10128 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   10150:	4628      	mov	r0, r5
   10152:	6821      	ldr	r1, [r4, #0]
   10154:	f004 fe88 	bl	14e68 <strcmp>
   10158:	2800      	cmp	r0, #0
   1015a:	d1ee      	bne.n	1013a <z_impl_device_get_binding+0x2a>
   1015c:	e7dc      	b.n	10118 <z_impl_device_get_binding+0x8>
   1015e:	bf00      	nop
   10160:	00015468 	.word	0x00015468
   10164:	000153f0 	.word	0x000153f0

00010168 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1016a:	4604      	mov	r4, r0
   1016c:	460e      	mov	r6, r1
	__asm__ volatile(
   1016e:	f04f 0320 	mov.w	r3, #32
   10172:	f3ef 8711 	mrs	r7, BASEPRI
   10176:	f383 8812 	msr	BASEPRI_MAX, r3
   1017a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1017e:	f001 fbed 	bl	1195c <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   10182:	2200      	movs	r2, #0
   10184:	2c04      	cmp	r4, #4
   10186:	bf98      	it	ls
   10188:	4b1d      	ldrls	r3, [pc, #116]	; (10200 <z_fatal_error+0x98>)
   1018a:	4605      	mov	r5, r0
	switch (reason) {
   1018c:	bf94      	ite	ls
   1018e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   10192:	4b1c      	ldrhi	r3, [pc, #112]	; (10204 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   10194:	9200      	str	r2, [sp, #0]
   10196:	2145      	movs	r1, #69	; 0x45
   10198:	4622      	mov	r2, r4
   1019a:	481b      	ldr	r0, [pc, #108]	; (10208 <z_fatal_error+0xa0>)
   1019c:	f004 fdc0 	bl	14d20 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   101a0:	b13e      	cbz	r6, 101b2 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   101a2:	69f3      	ldr	r3, [r6, #28]
   101a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   101a8:	b11b      	cbz	r3, 101b2 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   101aa:	2145      	movs	r1, #69	; 0x45
   101ac:	4817      	ldr	r0, [pc, #92]	; (1020c <z_fatal_error+0xa4>)
   101ae:	f004 fdb7 	bl	14d20 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   101b2:	b135      	cbz	r5, 101c2 <z_fatal_error+0x5a>
   101b4:	4628      	mov	r0, r5
   101b6:	f005 f8a8 	bl	1530a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   101ba:	4603      	mov	r3, r0
   101bc:	b108      	cbz	r0, 101c2 <z_fatal_error+0x5a>
   101be:	7802      	ldrb	r2, [r0, #0]
   101c0:	b902      	cbnz	r2, 101c4 <z_fatal_error+0x5c>
		thread_name = "unknown";
   101c2:	4b13      	ldr	r3, [pc, #76]	; (10210 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   101c4:	462a      	mov	r2, r5
   101c6:	2145      	movs	r1, #69	; 0x45
   101c8:	4812      	ldr	r0, [pc, #72]	; (10214 <z_fatal_error+0xac>)
   101ca:	f004 fda9 	bl	14d20 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   101ce:	4631      	mov	r1, r6
   101d0:	4620      	mov	r0, r4
   101d2:	f7ff f8a1 	bl	f318 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   101d6:	2c04      	cmp	r4, #4
   101d8:	d108      	bne.n	101ec <z_fatal_error+0x84>
   101da:	490f      	ldr	r1, [pc, #60]	; (10218 <z_fatal_error+0xb0>)
   101dc:	480f      	ldr	r0, [pc, #60]	; (1021c <z_fatal_error+0xb4>)
   101de:	228f      	movs	r2, #143	; 0x8f
   101e0:	f004 fd00 	bl	14be4 <printk>
   101e4:	218f      	movs	r1, #143	; 0x8f
   101e6:	480c      	ldr	r0, [pc, #48]	; (10218 <z_fatal_error+0xb0>)
   101e8:	f004 fd87 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   101ec:	f387 8811 	msr	BASEPRI, r7
   101f0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   101f4:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   101f6:	b003      	add	sp, #12
   101f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   101fc:	f7fe b802 	b.w	e204 <z_impl_k_thread_abort>
   10200:	00015970 	.word	0x00015970
   10204:	00016b42 	.word	0x00016b42
   10208:	00016b58 	.word	0x00016b58
   1020c:	00016b85 	.word	0x00016b85
   10210:	00016b50 	.word	0x00016b50
   10214:	00016bab 	.word	0x00016bab
   10218:	00016bc8 	.word	0x00016bc8
   1021c:	00015b65 	.word	0x00015b65

00010220 <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   10220:	2300      	movs	r3, #0
   10222:	2201      	movs	r2, #1
{
   10224:	b510      	push	{r4, lr}
   10226:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   10228:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1022c:	220f      	movs	r2, #15
   1022e:	9301      	str	r3, [sp, #4]
   10230:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   10234:	2318      	movs	r3, #24
   10236:	4a0b      	ldr	r2, [pc, #44]	; (10264 <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
   10238:	4c0b      	ldr	r4, [pc, #44]	; (10268 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1023a:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   1023e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   10242:	490a      	ldr	r1, [pc, #40]	; (1026c <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
   10244:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
   10248:	fb02 1100 	mla	r1, r2, r0, r1
   1024c:	9300      	str	r3, [sp, #0]
   1024e:	4620      	mov	r0, r4
   10250:	4b07      	ldr	r3, [pc, #28]	; (10270 <init_idle_thread+0x50>)
   10252:	f000 f98f 	bl	10574 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10256:	7b63      	ldrb	r3, [r4, #13]
   10258:	f023 0304 	bic.w	r3, r3, #4
   1025c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1025e:	b006      	add	sp, #24
   10260:	bd10      	pop	{r4, pc}
   10262:	bf00      	nop
   10264:	20000a2c 	.word	0x20000a2c
   10268:	20000160 	.word	0x20000160
   1026c:	20002620 	.word	0x20002620
   10270:	00010765 	.word	0x00010765

00010274 <bg_thread_main>:
	z_sys_post_kernel = true;
   10274:	2201      	movs	r2, #1
{
   10276:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   10278:	4b09      	ldr	r3, [pc, #36]	; (102a0 <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1027a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1027c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1027e:	f7ff ff27 	bl	100d0 <z_sys_init_run_level>
	boot_banner();
   10282:	f001 fecb 	bl	1201c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   10286:	2003      	movs	r0, #3
   10288:	f7ff ff22 	bl	100d0 <z_sys_init_run_level>
	z_init_static_threads();
   1028c:	f000 f9c6 	bl	1061c <z_init_static_threads>
	main();
   10290:	f004 fc9f 	bl	14bd2 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   10294:	4a03      	ldr	r2, [pc, #12]	; (102a4 <bg_thread_main+0x30>)
   10296:	7b13      	ldrb	r3, [r2, #12]
   10298:	f023 0301 	bic.w	r3, r3, #1
   1029c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1029e:	bd08      	pop	{r3, pc}
   102a0:	2000145d 	.word	0x2000145d
   102a4:	200001e0 	.word	0x200001e0

000102a8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   102a8:	4802      	ldr	r0, [pc, #8]	; (102b4 <z_bss_zero+0xc>)
   102aa:	4a03      	ldr	r2, [pc, #12]	; (102b8 <z_bss_zero+0x10>)
   102ac:	2100      	movs	r1, #0
   102ae:	1a12      	subs	r2, r2, r0
   102b0:	f004 be18 	b.w	14ee4 <memset>
   102b4:	20000160 	.word	0x20000160
   102b8:	2000161c 	.word	0x2000161c

000102bc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   102bc:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   102be:	4b35      	ldr	r3, [pc, #212]	; (10394 <z_cstart+0xd8>)
   102c0:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   102c2:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   102c6:	f387 8808 	msr	MSP, r7
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   102ca:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   102ce:	2400      	movs	r4, #0
   102d0:	23e0      	movs	r3, #224	; 0xe0
   102d2:	4d31      	ldr	r5, [pc, #196]	; (10398 <z_cstart+0xdc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   102d4:	4e31      	ldr	r6, [pc, #196]	; (1039c <z_cstart+0xe0>)
   102d6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   102da:	77ec      	strb	r4, [r5, #31]
   102dc:	762c      	strb	r4, [r5, #24]
   102de:	766c      	strb	r4, [r5, #25]
   102e0:	76ac      	strb	r4, [r5, #26]
   102e2:	f885 4020 	strb.w	r4, [r5, #32]
   102e6:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   102e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   102ea:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 103b0 <z_cstart+0xf4>
   102ee:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   102f2:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   102f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   102f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   102fa:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   102fc:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
   102fe:	68eb      	ldr	r3, [r5, #12]
   10300:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
   10302:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   10306:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
   1030a:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1030c:	f7fd fee0 	bl	e0d0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   10310:	f7fd fafc 	bl	d90c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10314:	f04f 33ff 	mov.w	r3, #4294967295
   10318:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1031a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1031c:	f7fe f9a2 	bl	e664 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   10320:	f7fd fffa 	bl	e318 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   10324:	f240 1301 	movw	r3, #257	; 0x101
   10328:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1032c:	ab06      	add	r3, sp, #24
   1032e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   10330:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10334:	f004 ffbc 	bl	152b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10338:	4620      	mov	r0, r4
   1033a:	f7ff fec9 	bl	100d0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1033e:	2001      	movs	r0, #1
   10340:	f7ff fec6 	bl	100d0 <z_sys_init_run_level>
	z_sched_init();
   10344:	f001 f9ba 	bl	116bc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10348:	4b15      	ldr	r3, [pc, #84]	; (103a0 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1034a:	4d16      	ldr	r5, [pc, #88]	; (103a4 <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1034c:	9305      	str	r3, [sp, #20]
   1034e:	2301      	movs	r3, #1
   10350:	4915      	ldr	r1, [pc, #84]	; (103a8 <z_cstart+0xec>)
   10352:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10356:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1035a:	4628      	mov	r0, r5
   1035c:	464b      	mov	r3, r9
   1035e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10362:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
   10364:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10366:	f000 f905 	bl	10574 <z_setup_new_thread>
   1036a:	4680      	mov	r8, r0
   1036c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1036e:	4628      	mov	r0, r5
   10370:	f022 0204 	bic.w	r2, r2, #4
   10374:	736a      	strb	r2, [r5, #13]
   10376:	f000 fe99 	bl	110ac <z_ready_thread>
		init_idle_thread(i);
   1037a:	4620      	mov	r0, r4
   1037c:	f7ff ff50 	bl	10220 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   10380:	4b0a      	ldr	r3, [pc, #40]	; (103ac <z_cstart+0xf0>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10382:	464a      	mov	r2, r9
   10384:	4641      	mov	r1, r8
   10386:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   10388:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
   1038a:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1038c:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1038e:	f7fd fbd5 	bl	db3c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   10392:	bf00      	nop
   10394:	20002760 	.word	0x20002760
   10398:	e000ed00 	.word	0xe000ed00
   1039c:	20000a2c 	.word	0x20000a2c
   103a0:	00016c34 	.word	0x00016c34
   103a4:	200001e0 	.word	0x200001e0
   103a8:	20001620 	.word	0x20001620
   103ac:	20000160 	.word	0x20000160
   103b0:	00010275 	.word	0x00010275

000103b4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   103b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   103b8:	4d14      	ldr	r5, [pc, #80]	; (1040c <init_mem_slab_module+0x58>)
   103ba:	4c15      	ldr	r4, [pc, #84]	; (10410 <init_mem_slab_module+0x5c>)
   103bc:	46a8      	mov	r8, r5
   103be:	4e15      	ldr	r6, [pc, #84]	; (10414 <init_mem_slab_module+0x60>)
   103c0:	42ac      	cmp	r4, r5
   103c2:	d908      	bls.n	103d6 <init_mem_slab_module+0x22>
   103c4:	4631      	mov	r1, r6
   103c6:	4814      	ldr	r0, [pc, #80]	; (10418 <init_mem_slab_module+0x64>)
   103c8:	223c      	movs	r2, #60	; 0x3c
   103ca:	f004 fc0b 	bl	14be4 <printk>
   103ce:	213c      	movs	r1, #60	; 0x3c
   103d0:	4630      	mov	r0, r6
   103d2:	f004 fc92 	bl	14cfa <assert_post_action>
   103d6:	4544      	cmp	r4, r8
   103d8:	d302      	bcc.n	103e0 <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
   103da:	2000      	movs	r0, #0
	return rc;
}
   103dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   103e0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   103e4:	ea42 0301 	orr.w	r3, r2, r1
   103e8:	f013 0303 	ands.w	r3, r3, #3
   103ec:	d10b      	bne.n	10406 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   103ee:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   103f0:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   103f2:	4283      	cmp	r3, r0
   103f4:	d101      	bne.n	103fa <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   103f6:	3420      	adds	r4, #32
   103f8:	e7e2      	b.n	103c0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   103fa:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   103fc:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   103fe:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   10400:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   10402:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   10404:	e7f5      	b.n	103f2 <init_mem_slab_module+0x3e>
		return -EINVAL;
   10406:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1040a:	e7e7      	b.n	103dc <init_mem_slab_module+0x28>
   1040c:	2000010c 	.word	0x2000010c
   10410:	2000010c 	.word	0x2000010c
   10414:	00016c3c 	.word	0x00016c3c
   10418:	00015b65 	.word	0x00015b65

0001041c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1041c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10420:	4604      	mov	r4, r0
   10422:	460d      	mov	r5, r1
   10424:	4690      	mov	r8, r2
   10426:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   10428:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1042c:	f04f 0320 	mov.w	r3, #32
   10430:	f3ef 8711 	mrs	r7, BASEPRI
   10434:	f383 8812 	msr	BASEPRI_MAX, r3
   10438:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1043c:	4630      	mov	r0, r6
   1043e:	f000 f96d 	bl	1071c <z_spin_lock_valid>
   10442:	b940      	cbnz	r0, 10456 <k_mem_slab_alloc+0x3a>
   10444:	491f      	ldr	r1, [pc, #124]	; (104c4 <k_mem_slab_alloc+0xa8>)
   10446:	4820      	ldr	r0, [pc, #128]	; (104c8 <k_mem_slab_alloc+0xac>)
   10448:	2281      	movs	r2, #129	; 0x81
   1044a:	f004 fbcb 	bl	14be4 <printk>
   1044e:	2181      	movs	r1, #129	; 0x81
   10450:	481c      	ldr	r0, [pc, #112]	; (104c4 <k_mem_slab_alloc+0xa8>)
   10452:	f004 fc52 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10456:	4630      	mov	r0, r6
   10458:	f000 f97c 	bl	10754 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1045c:	69a3      	ldr	r3, [r4, #24]
   1045e:	b1c3      	cbz	r3, 10492 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   10460:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   10462:	681b      	ldr	r3, [r3, #0]
   10464:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   10466:	69e3      	ldr	r3, [r4, #28]
   10468:	3301      	adds	r3, #1
   1046a:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1046c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1046e:	4630      	mov	r0, r6
   10470:	f000 f962 	bl	10738 <z_spin_unlock_valid>
   10474:	b940      	cbnz	r0, 10488 <k_mem_slab_alloc+0x6c>
   10476:	4913      	ldr	r1, [pc, #76]	; (104c4 <k_mem_slab_alloc+0xa8>)
   10478:	4813      	ldr	r0, [pc, #76]	; (104c8 <k_mem_slab_alloc+0xac>)
   1047a:	22ac      	movs	r2, #172	; 0xac
   1047c:	f004 fbb2 	bl	14be4 <printk>
   10480:	21ac      	movs	r1, #172	; 0xac
   10482:	4810      	ldr	r0, [pc, #64]	; (104c4 <k_mem_slab_alloc+0xa8>)
   10484:	f004 fc39 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10488:	f387 8811 	msr	BASEPRI, r7
   1048c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   10490:	e013      	b.n	104ba <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   10492:	ea58 0209 	orrs.w	r2, r8, r9
   10496:	d103      	bne.n	104a0 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
   10498:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   1049c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1049e:	e7e6      	b.n	1046e <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   104a0:	4622      	mov	r2, r4
   104a2:	4639      	mov	r1, r7
   104a4:	4630      	mov	r0, r6
   104a6:	e9cd 8900 	strd	r8, r9, [sp]
   104aa:	f000 ff67 	bl	1137c <z_pend_curr>
		if (result == 0) {
   104ae:	4604      	mov	r4, r0
   104b0:	b918      	cbnz	r0, 104ba <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   104b2:	4b06      	ldr	r3, [pc, #24]	; (104cc <k_mem_slab_alloc+0xb0>)
   104b4:	689b      	ldr	r3, [r3, #8]
   104b6:	695b      	ldr	r3, [r3, #20]
   104b8:	602b      	str	r3, [r5, #0]
}
   104ba:	4620      	mov	r0, r4
   104bc:	b003      	add	sp, #12
   104be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   104c2:	bf00      	nop
   104c4:	00015b3f 	.word	0x00015b3f
   104c8:	00015b65 	.word	0x00015b65
   104cc:	20000a2c 	.word	0x20000a2c

000104d0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   104d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104d4:	4604      	mov	r4, r0
   104d6:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   104d8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   104dc:	f04f 0320 	mov.w	r3, #32
   104e0:	f3ef 8711 	mrs	r7, BASEPRI
   104e4:	f383 8812 	msr	BASEPRI_MAX, r3
   104e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   104ec:	4630      	mov	r0, r6
   104ee:	f000 f915 	bl	1071c <z_spin_lock_valid>
   104f2:	b940      	cbnz	r0, 10506 <k_mem_slab_free+0x36>
   104f4:	491d      	ldr	r1, [pc, #116]	; (1056c <k_mem_slab_free+0x9c>)
   104f6:	481e      	ldr	r0, [pc, #120]	; (10570 <k_mem_slab_free+0xa0>)
   104f8:	2281      	movs	r2, #129	; 0x81
   104fa:	f004 fb73 	bl	14be4 <printk>
   104fe:	2181      	movs	r1, #129	; 0x81
   10500:	481a      	ldr	r0, [pc, #104]	; (1056c <k_mem_slab_free+0x9c>)
   10502:	f004 fbfa 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10506:	4630      	mov	r0, r6
   10508:	f000 f924 	bl	10754 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1050c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   10510:	f1b8 0f00 	cmp.w	r8, #0
   10514:	d10f      	bne.n	10536 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   10516:	4620      	mov	r0, r4
   10518:	f001 f892 	bl	11640 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1051c:	b158      	cbz	r0, 10536 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1051e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10520:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   10524:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   10526:	f000 fdc1 	bl	110ac <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1052a:	4639      	mov	r1, r7
   1052c:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1052e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   10532:	f000 bbbd 	b.w	10cb0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   10536:	682b      	ldr	r3, [r5, #0]
   10538:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1053a:	4630      	mov	r0, r6
   1053c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1053e:	682b      	ldr	r3, [r5, #0]
   10540:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   10542:	69e3      	ldr	r3, [r4, #28]
   10544:	3b01      	subs	r3, #1
   10546:	61e3      	str	r3, [r4, #28]
   10548:	f000 f8f6 	bl	10738 <z_spin_unlock_valid>
   1054c:	b940      	cbnz	r0, 10560 <k_mem_slab_free+0x90>
   1054e:	4907      	ldr	r1, [pc, #28]	; (1056c <k_mem_slab_free+0x9c>)
   10550:	4807      	ldr	r0, [pc, #28]	; (10570 <k_mem_slab_free+0xa0>)
   10552:	22ac      	movs	r2, #172	; 0xac
   10554:	f004 fb46 	bl	14be4 <printk>
   10558:	21ac      	movs	r1, #172	; 0xac
   1055a:	4804      	ldr	r0, [pc, #16]	; (1056c <k_mem_slab_free+0x9c>)
   1055c:	f004 fbcd 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10560:	f387 8811 	msr	BASEPRI, r7
   10564:	f3bf 8f6f 	isb	sy
}
   10568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1056c:	00015b3f 	.word	0x00015b3f
   10570:	00015b65 	.word	0x00015b65

00010574 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   10574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10578:	b085      	sub	sp, #20
   1057a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1057e:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   10580:	f1b9 0f0f 	cmp.w	r9, #15
{
   10584:	460f      	mov	r7, r1
   10586:	4615      	mov	r5, r2
   10588:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   1058a:	d12e      	bne.n	105ea <z_setup_new_thread+0x76>
   1058c:	4b1f      	ldr	r3, [pc, #124]	; (1060c <z_setup_new_thread+0x98>)
   1058e:	4598      	cmp	r8, r3
   10590:	d12f      	bne.n	105f2 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   10592:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   10596:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1059a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   1059c:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   1059e:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   105a0:	2304      	movs	r3, #4
   105a2:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   105a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   105a6:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   105a8:	9302      	str	r3, [sp, #8]
   105aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   105ac:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   105b0:	9301      	str	r3, [sp, #4]
   105b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   105b4:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   105b6:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   105ba:	9300      	str	r3, [sp, #0]
   105bc:	462a      	mov	r2, r5
   105be:	4643      	mov	r3, r8
   105c0:	4639      	mov	r1, r7
   105c2:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   105c4:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   105c8:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   105ca:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   105ce:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   105d0:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   105d2:	f7fd fa97 	bl	db04 <arch_new_thread>
	if (!_current) {
   105d6:	4b0e      	ldr	r3, [pc, #56]	; (10610 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   105d8:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   105da:	689b      	ldr	r3, [r3, #8]
   105dc:	b103      	cbz	r3, 105e0 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   105de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   105e0:	4628      	mov	r0, r5
   105e2:	6723      	str	r3, [r4, #112]	; 0x70
   105e4:	b005      	add	sp, #20
   105e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   105ea:	f109 0310 	add.w	r3, r9, #16
   105ee:	2b1e      	cmp	r3, #30
   105f0:	d9cf      	bls.n	10592 <z_setup_new_thread+0x1e>
   105f2:	f240 12ff 	movw	r2, #511	; 0x1ff
   105f6:	4907      	ldr	r1, [pc, #28]	; (10614 <z_setup_new_thread+0xa0>)
   105f8:	4807      	ldr	r0, [pc, #28]	; (10618 <z_setup_new_thread+0xa4>)
   105fa:	f004 faf3 	bl	14be4 <printk>
   105fe:	f240 11ff 	movw	r1, #511	; 0x1ff
   10602:	4804      	ldr	r0, [pc, #16]	; (10614 <z_setup_new_thread+0xa0>)
   10604:	f004 fb79 	bl	14cfa <assert_post_action>
   10608:	e7c3      	b.n	10592 <z_setup_new_thread+0x1e>
   1060a:	bf00      	nop
   1060c:	00010765 	.word	0x00010765
   10610:	20000a2c 	.word	0x20000a2c
   10614:	00016c61 	.word	0x00016c61
   10618:	00015b65 	.word	0x00015b65

0001061c <z_init_static_threads>:
{
   1061c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   10620:	4f39      	ldr	r7, [pc, #228]	; (10708 <z_init_static_threads+0xec>)
   10622:	4d3a      	ldr	r5, [pc, #232]	; (1070c <z_init_static_threads+0xf0>)
   10624:	463e      	mov	r6, r7
   10626:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 10714 <z_init_static_threads+0xf8>
{
   1062a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1062c:	42bd      	cmp	r5, r7
   1062e:	d90a      	bls.n	10646 <z_init_static_threads+0x2a>
   10630:	4641      	mov	r1, r8
   10632:	4837      	ldr	r0, [pc, #220]	; (10710 <z_init_static_threads+0xf4>)
   10634:	f240 22cf 	movw	r2, #719	; 0x2cf
   10638:	f004 fad4 	bl	14be4 <printk>
   1063c:	f240 21cf 	movw	r1, #719	; 0x2cf
   10640:	4640      	mov	r0, r8
   10642:	f004 fb5a 	bl	14cfa <assert_post_action>
   10646:	42b5      	cmp	r5, r6
   10648:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1064c:	d31d      	bcc.n	1068a <z_init_static_threads+0x6e>
	k_sched_lock();
   1064e:	f000 fb65 	bl	10d1c <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
   10652:	f240 38e7 	movw	r8, #999	; 0x3e7
   10656:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1065a:	4c2c      	ldr	r4, [pc, #176]	; (1070c <z_init_static_threads+0xf0>)
   1065c:	4d2d      	ldr	r5, [pc, #180]	; (10714 <z_init_static_threads+0xf8>)
   1065e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 10710 <z_init_static_threads+0xf4>
   10662:	42b4      	cmp	r4, r6
   10664:	d90a      	bls.n	1067c <z_init_static_threads+0x60>
   10666:	4629      	mov	r1, r5
   10668:	4650      	mov	r0, sl
   1066a:	f240 22ee 	movw	r2, #750	; 0x2ee
   1066e:	f004 fab9 	bl	14be4 <printk>
   10672:	f240 21ee 	movw	r1, #750	; 0x2ee
   10676:	4628      	mov	r0, r5
   10678:	f004 fb3f 	bl	14cfa <assert_post_action>
   1067c:	42b4      	cmp	r4, r6
   1067e:	d321      	bcc.n	106c4 <z_init_static_threads+0xa8>
}
   10680:	b006      	add	sp, #24
   10682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   10686:	f000 bf7f 	b.w	11588 <k_sched_unlock>
		z_setup_new_thread(
   1068a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1068e:	9305      	str	r3, [sp, #20]
   10690:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10694:	9304      	str	r3, [sp, #16]
   10696:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1069a:	9303      	str	r3, [sp, #12]
   1069c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   106a0:	9302      	str	r3, [sp, #8]
   106a2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   106a6:	9301      	str	r3, [sp, #4]
   106a8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   106ac:	9300      	str	r3, [sp, #0]
   106ae:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   106b2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   106b6:	f7ff ff5d 	bl	10574 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   106ba:	f854 3c30 	ldr.w	r3, [r4, #-48]
   106be:	655d      	str	r5, [r3, #84]	; 0x54
   106c0:	4625      	mov	r5, r4
   106c2:	e7b3      	b.n	1062c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   106c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   106c6:	1c5a      	adds	r2, r3, #1
   106c8:	d00f      	beq.n	106ea <z_init_static_threads+0xce>
   106ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   106ce:	4640      	mov	r0, r8
   106d0:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
   106d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   106d6:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   106da:	4549      	cmp	r1, r9
   106dc:	bf08      	it	eq
   106de:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   106e0:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   106e2:	d104      	bne.n	106ee <z_init_static_threads+0xd2>
	z_sched_start(thread);
   106e4:	4638      	mov	r0, r7
   106e6:	f000 fd17 	bl	11118 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   106ea:	3430      	adds	r4, #48	; 0x30
   106ec:	e7b9      	b.n	10662 <z_init_static_threads+0x46>
   106ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   106f2:	2300      	movs	r3, #0
   106f4:	f7fb fea2 	bl	c43c <__aeabi_uldivmod>
   106f8:	4602      	mov	r2, r0
   106fa:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   106fc:	f107 0018 	add.w	r0, r7, #24
   10700:	4905      	ldr	r1, [pc, #20]	; (10718 <z_init_static_threads+0xfc>)
   10702:	f001 fa2f 	bl	11b64 <z_add_timeout>
   10706:	e7f0      	b.n	106ea <z_init_static_threads+0xce>
   10708:	2000010c 	.word	0x2000010c
   1070c:	2000010c 	.word	0x2000010c
   10710:	00015b65 	.word	0x00015b65
   10714:	00016c61 	.word	0x00016c61
   10718:	0001119d 	.word	0x0001119d

0001071c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1071c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1071e:	b138      	cbz	r0, 10730 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   10720:	4b04      	ldr	r3, [pc, #16]	; (10734 <z_spin_lock_valid+0x18>)
   10722:	f000 0003 	and.w	r0, r0, #3
   10726:	7d1b      	ldrb	r3, [r3, #20]
   10728:	1ac0      	subs	r0, r0, r3
   1072a:	bf18      	it	ne
   1072c:	2001      	movne	r0, #1
   1072e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   10730:	2001      	movs	r0, #1
}
   10732:	4770      	bx	lr
   10734:	20000a2c 	.word	0x20000a2c

00010738 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10738:	4905      	ldr	r1, [pc, #20]	; (10750 <z_spin_unlock_valid+0x18>)
{
   1073a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1073c:	688a      	ldr	r2, [r1, #8]
   1073e:	7d08      	ldrb	r0, [r1, #20]
   10740:	6819      	ldr	r1, [r3, #0]
   10742:	4302      	orrs	r2, r0
   10744:	2000      	movs	r0, #0
   10746:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   10748:	bf04      	itt	eq
   1074a:	6018      	streq	r0, [r3, #0]
	return true;
   1074c:	2001      	moveq	r0, #1
}
   1074e:	4770      	bx	lr
   10750:	20000a2c 	.word	0x20000a2c

00010754 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   10754:	4a02      	ldr	r2, [pc, #8]	; (10760 <z_spin_lock_set_owner+0xc>)
   10756:	7d11      	ldrb	r1, [r2, #20]
   10758:	6893      	ldr	r3, [r2, #8]
   1075a:	430b      	orrs	r3, r1
   1075c:	6003      	str	r3, [r0, #0]
}
   1075e:	4770      	bx	lr
   10760:	20000a2c 	.word	0x20000a2c

00010764 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   10764:	4c10      	ldr	r4, [pc, #64]	; (107a8 <idle+0x44>)
{
   10766:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   10768:	68a2      	ldr	r2, [r4, #8]
   1076a:	f992 200e 	ldrsb.w	r2, [r2, #14]
   1076e:	2a00      	cmp	r2, #0
   10770:	da08      	bge.n	10784 <idle+0x20>
   10772:	490e      	ldr	r1, [pc, #56]	; (107ac <idle+0x48>)
   10774:	480e      	ldr	r0, [pc, #56]	; (107b0 <idle+0x4c>)
   10776:	2227      	movs	r2, #39	; 0x27
   10778:	f004 fa34 	bl	14be4 <printk>
   1077c:	2127      	movs	r1, #39	; 0x27
   1077e:	480b      	ldr	r0, [pc, #44]	; (107ac <idle+0x48>)
   10780:	f004 fabb 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10784:	f04f 0220 	mov.w	r2, #32
   10788:	f3ef 8311 	mrs	r3, BASEPRI
   1078c:	f382 8812 	msr	BASEPRI_MAX, r2
   10790:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   10794:	f001 fadc 	bl	11d50 <z_get_next_timeout_expiry>
   10798:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1079a:	f7fc fcb5 	bl	d108 <pm_system_suspend>
   1079e:	2800      	cmp	r0, #0
   107a0:	d1f0      	bne.n	10784 <idle+0x20>
	arch_cpu_idle();
   107a2:	f7fd f8b9 	bl	d918 <arch_cpu_idle>
}
   107a6:	e7ed      	b.n	10784 <idle+0x20>
   107a8:	20000a2c 	.word	0x20000a2c
   107ac:	00016c84 	.word	0x00016c84
   107b0:	00015b65 	.word	0x00015b65

000107b4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   107b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   107b8:	4604      	mov	r4, r0
   107ba:	4616      	mov	r6, r2
   107bc:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   107be:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   107c2:	b143      	cbz	r3, 107d6 <z_impl_k_mutex_lock+0x22>
   107c4:	4962      	ldr	r1, [pc, #392]	; (10950 <z_impl_k_mutex_lock+0x19c>)
   107c6:	4863      	ldr	r0, [pc, #396]	; (10954 <z_impl_k_mutex_lock+0x1a0>)
   107c8:	2265      	movs	r2, #101	; 0x65
   107ca:	f004 fa0b 	bl	14be4 <printk>
   107ce:	2165      	movs	r1, #101	; 0x65
   107d0:	485f      	ldr	r0, [pc, #380]	; (10950 <z_impl_k_mutex_lock+0x19c>)
   107d2:	f004 fa92 	bl	14cfa <assert_post_action>
   107d6:	f04f 0320 	mov.w	r3, #32
   107da:	f3ef 8811 	mrs	r8, BASEPRI
   107de:	f383 8812 	msr	BASEPRI_MAX, r3
   107e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   107e6:	485c      	ldr	r0, [pc, #368]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
   107e8:	f7ff ff98 	bl	1071c <z_spin_lock_valid>
   107ec:	b940      	cbnz	r0, 10800 <z_impl_k_mutex_lock+0x4c>
   107ee:	495b      	ldr	r1, [pc, #364]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   107f0:	4858      	ldr	r0, [pc, #352]	; (10954 <z_impl_k_mutex_lock+0x1a0>)
   107f2:	2281      	movs	r2, #129	; 0x81
   107f4:	f004 f9f6 	bl	14be4 <printk>
   107f8:	2181      	movs	r1, #129	; 0x81
   107fa:	4858      	ldr	r0, [pc, #352]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   107fc:	f004 fa7d 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10800:	4855      	ldr	r0, [pc, #340]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
   10802:	f7ff ffa7 	bl	10754 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   10806:	68e3      	ldr	r3, [r4, #12]
   10808:	4a55      	ldr	r2, [pc, #340]	; (10960 <z_impl_k_mutex_lock+0x1ac>)
   1080a:	b1d3      	cbz	r3, 10842 <z_impl_k_mutex_lock+0x8e>
   1080c:	68a0      	ldr	r0, [r4, #8]
   1080e:	6891      	ldr	r1, [r2, #8]
   10810:	4288      	cmp	r0, r1
   10812:	d033      	beq.n	1087c <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   10814:	ea56 0307 	orrs.w	r3, r6, r7
   10818:	d132      	bne.n	10880 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1081a:	484f      	ldr	r0, [pc, #316]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
   1081c:	f7ff ff8c 	bl	10738 <z_spin_unlock_valid>
   10820:	b940      	cbnz	r0, 10834 <z_impl_k_mutex_lock+0x80>
   10822:	494e      	ldr	r1, [pc, #312]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   10824:	484b      	ldr	r0, [pc, #300]	; (10954 <z_impl_k_mutex_lock+0x1a0>)
   10826:	22ac      	movs	r2, #172	; 0xac
   10828:	f004 f9dc 	bl	14be4 <printk>
   1082c:	21ac      	movs	r1, #172	; 0xac
   1082e:	484b      	ldr	r0, [pc, #300]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   10830:	f004 fa63 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10834:	f388 8811 	msr	BASEPRI, r8
   10838:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1083c:	f06f 000f 	mvn.w	r0, #15
   10840:	e019      	b.n	10876 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   10842:	6891      	ldr	r1, [r2, #8]
   10844:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   10848:	3301      	adds	r3, #1
   1084a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1084c:	6893      	ldr	r3, [r2, #8]
   1084e:	4842      	ldr	r0, [pc, #264]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   10850:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   10852:	60a3      	str	r3, [r4, #8]
   10854:	f7ff ff70 	bl	10738 <z_spin_unlock_valid>
   10858:	b940      	cbnz	r0, 1086c <z_impl_k_mutex_lock+0xb8>
   1085a:	4940      	ldr	r1, [pc, #256]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   1085c:	483d      	ldr	r0, [pc, #244]	; (10954 <z_impl_k_mutex_lock+0x1a0>)
   1085e:	22ac      	movs	r2, #172	; 0xac
   10860:	f004 f9c0 	bl	14be4 <printk>
   10864:	21ac      	movs	r1, #172	; 0xac
   10866:	483d      	ldr	r0, [pc, #244]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   10868:	f004 fa47 	bl	14cfa <assert_post_action>
   1086c:	f388 8811 	msr	BASEPRI, r8
   10870:	f3bf 8f6f 	isb	sy
		return 0;
   10874:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   10876:	b002      	add	sp, #8
   10878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1087c:	6921      	ldr	r1, [r4, #16]
   1087e:	e7e3      	b.n	10848 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   10880:	f991 100e 	ldrsb.w	r1, [r1, #14]
   10884:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   10888:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1088c:	4299      	cmp	r1, r3
   1088e:	bfa8      	it	ge
   10890:	4619      	movge	r1, r3
   10892:	4291      	cmp	r1, r2
   10894:	bfb8      	it	lt
   10896:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   10898:	428b      	cmp	r3, r1
   1089a:	dd3f      	ble.n	1091c <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
   1089c:	f000 fd94 	bl	113c8 <z_set_prio>
   108a0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   108a2:	4622      	mov	r2, r4
   108a4:	4641      	mov	r1, r8
   108a6:	e9cd 6700 	strd	r6, r7, [sp]
   108aa:	482b      	ldr	r0, [pc, #172]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
   108ac:	f000 fd66 	bl	1137c <z_pend_curr>
	if (got_mutex == 0) {
   108b0:	2800      	cmp	r0, #0
   108b2:	d0e0      	beq.n	10876 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   108b4:	f04f 0320 	mov.w	r3, #32
   108b8:	f3ef 8611 	mrs	r6, BASEPRI
   108bc:	f383 8812 	msr	BASEPRI_MAX, r3
   108c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   108c4:	4824      	ldr	r0, [pc, #144]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
   108c6:	f7ff ff29 	bl	1071c <z_spin_lock_valid>
   108ca:	b940      	cbnz	r0, 108de <z_impl_k_mutex_lock+0x12a>
   108cc:	4923      	ldr	r1, [pc, #140]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   108ce:	4821      	ldr	r0, [pc, #132]	; (10954 <z_impl_k_mutex_lock+0x1a0>)
   108d0:	2281      	movs	r2, #129	; 0x81
   108d2:	f004 f987 	bl	14be4 <printk>
   108d6:	2181      	movs	r1, #129	; 0x81
   108d8:	4820      	ldr	r0, [pc, #128]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   108da:	f004 fa0e 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   108de:	481e      	ldr	r0, [pc, #120]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
   108e0:	f7ff ff38 	bl	10754 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   108e4:	6823      	ldr	r3, [r4, #0]
   108e6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   108e8:	429c      	cmp	r4, r3
   108ea:	d00a      	beq.n	10902 <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   108ec:	b14b      	cbz	r3, 10902 <z_impl_k_mutex_lock+0x14e>
   108ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
   108f2:	4299      	cmp	r1, r3
   108f4:	bfa8      	it	ge
   108f6:	4619      	movge	r1, r3
   108f8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   108fc:	4299      	cmp	r1, r3
   108fe:	bfb8      	it	lt
   10900:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   10902:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   10904:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10908:	4299      	cmp	r1, r3
   1090a:	d109      	bne.n	10920 <z_impl_k_mutex_lock+0x16c>
	if (resched) {
   1090c:	b16d      	cbz	r5, 1092a <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
   1090e:	4631      	mov	r1, r6
   10910:	4811      	ldr	r0, [pc, #68]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
   10912:	f000 f9cd 	bl	10cb0 <z_reschedule>
	return -EAGAIN;
   10916:	f06f 000a 	mvn.w	r0, #10
   1091a:	e7ac      	b.n	10876 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   1091c:	2500      	movs	r5, #0
   1091e:	e7c0      	b.n	108a2 <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
   10920:	f000 fd52 	bl	113c8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   10924:	2800      	cmp	r0, #0
   10926:	d1f2      	bne.n	1090e <z_impl_k_mutex_lock+0x15a>
   10928:	e7f0      	b.n	1090c <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1092a:	480b      	ldr	r0, [pc, #44]	; (10958 <z_impl_k_mutex_lock+0x1a4>)
   1092c:	f7ff ff04 	bl	10738 <z_spin_unlock_valid>
   10930:	b940      	cbnz	r0, 10944 <z_impl_k_mutex_lock+0x190>
   10932:	490a      	ldr	r1, [pc, #40]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   10934:	4807      	ldr	r0, [pc, #28]	; (10954 <z_impl_k_mutex_lock+0x1a0>)
   10936:	22ac      	movs	r2, #172	; 0xac
   10938:	f004 f954 	bl	14be4 <printk>
   1093c:	21ac      	movs	r1, #172	; 0xac
   1093e:	4807      	ldr	r0, [pc, #28]	; (1095c <z_impl_k_mutex_lock+0x1a8>)
   10940:	f004 f9db 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10944:	f386 8811 	msr	BASEPRI, r6
   10948:	f3bf 8f6f 	isb	sy
   1094c:	e7e3      	b.n	10916 <z_impl_k_mutex_lock+0x162>
   1094e:	bf00      	nop
   10950:	00016ca5 	.word	0x00016ca5
   10954:	00015b65 	.word	0x00015b65
   10958:	20000a54 	.word	0x20000a54
   1095c:	00015b3f 	.word	0x00015b3f
   10960:	20000a2c 	.word	0x20000a2c

00010964 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   10964:	b538      	push	{r3, r4, r5, lr}
   10966:	4604      	mov	r4, r0
   10968:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1096c:	b143      	cbz	r3, 10980 <z_impl_k_mutex_unlock+0x1c>
   1096e:	4945      	ldr	r1, [pc, #276]	; (10a84 <z_impl_k_mutex_unlock+0x120>)
   10970:	4845      	ldr	r0, [pc, #276]	; (10a88 <z_impl_k_mutex_unlock+0x124>)
   10972:	22c7      	movs	r2, #199	; 0xc7
   10974:	f004 f936 	bl	14be4 <printk>
   10978:	21c7      	movs	r1, #199	; 0xc7
   1097a:	4842      	ldr	r0, [pc, #264]	; (10a84 <z_impl_k_mutex_unlock+0x120>)
   1097c:	f004 f9bd 	bl	14cfa <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10980:	68a3      	ldr	r3, [r4, #8]
   10982:	2b00      	cmp	r3, #0
   10984:	d078      	beq.n	10a78 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10986:	4d41      	ldr	r5, [pc, #260]	; (10a8c <z_impl_k_mutex_unlock+0x128>)
   10988:	68aa      	ldr	r2, [r5, #8]
   1098a:	4293      	cmp	r3, r2
   1098c:	d177      	bne.n	10a7e <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1098e:	68e3      	ldr	r3, [r4, #12]
   10990:	b943      	cbnz	r3, 109a4 <z_impl_k_mutex_unlock+0x40>
   10992:	493c      	ldr	r1, [pc, #240]	; (10a84 <z_impl_k_mutex_unlock+0x120>)
   10994:	483c      	ldr	r0, [pc, #240]	; (10a88 <z_impl_k_mutex_unlock+0x124>)
   10996:	22df      	movs	r2, #223	; 0xdf
   10998:	f004 f924 	bl	14be4 <printk>
   1099c:	21df      	movs	r1, #223	; 0xdf
   1099e:	4839      	ldr	r0, [pc, #228]	; (10a84 <z_impl_k_mutex_unlock+0x120>)
   109a0:	f004 f9ab 	bl	14cfa <assert_post_action>
   109a4:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   109a8:	b143      	cbz	r3, 109bc <z_impl_k_mutex_unlock+0x58>
   109aa:	4939      	ldr	r1, [pc, #228]	; (10a90 <z_impl_k_mutex_unlock+0x12c>)
   109ac:	4836      	ldr	r0, [pc, #216]	; (10a88 <z_impl_k_mutex_unlock+0x124>)
   109ae:	22fd      	movs	r2, #253	; 0xfd
   109b0:	f004 f918 	bl	14be4 <printk>
   109b4:	21fd      	movs	r1, #253	; 0xfd
   109b6:	4836      	ldr	r0, [pc, #216]	; (10a90 <z_impl_k_mutex_unlock+0x12c>)
   109b8:	f004 f99f 	bl	14cfa <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   109bc:	68ab      	ldr	r3, [r5, #8]
   109be:	7bdb      	ldrb	r3, [r3, #15]
   109c0:	2b01      	cmp	r3, #1
   109c2:	d108      	bne.n	109d6 <z_impl_k_mutex_unlock+0x72>
   109c4:	4932      	ldr	r1, [pc, #200]	; (10a90 <z_impl_k_mutex_unlock+0x12c>)
   109c6:	4830      	ldr	r0, [pc, #192]	; (10a88 <z_impl_k_mutex_unlock+0x124>)
   109c8:	22fe      	movs	r2, #254	; 0xfe
   109ca:	f004 f90b 	bl	14be4 <printk>
   109ce:	21fe      	movs	r1, #254	; 0xfe
   109d0:	482f      	ldr	r0, [pc, #188]	; (10a90 <z_impl_k_mutex_unlock+0x12c>)
   109d2:	f004 f992 	bl	14cfa <assert_post_action>

	--_current->base.sched_locked;
   109d6:	68aa      	ldr	r2, [r5, #8]
   109d8:	7bd3      	ldrb	r3, [r2, #15]
   109da:	3b01      	subs	r3, #1
   109dc:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   109de:	68e3      	ldr	r3, [r4, #12]
   109e0:	2b01      	cmp	r3, #1
   109e2:	d905      	bls.n	109f0 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   109e4:	3b01      	subs	r3, #1
   109e6:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   109e8:	f000 fdce 	bl	11588 <k_sched_unlock>

	return 0;
   109ec:	2000      	movs	r0, #0
}
   109ee:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   109f0:	f04f 0320 	mov.w	r3, #32
   109f4:	f3ef 8511 	mrs	r5, BASEPRI
   109f8:	f383 8812 	msr	BASEPRI_MAX, r3
   109fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10a00:	4824      	ldr	r0, [pc, #144]	; (10a94 <z_impl_k_mutex_unlock+0x130>)
   10a02:	f7ff fe8b 	bl	1071c <z_spin_lock_valid>
   10a06:	b940      	cbnz	r0, 10a1a <z_impl_k_mutex_unlock+0xb6>
   10a08:	4923      	ldr	r1, [pc, #140]	; (10a98 <z_impl_k_mutex_unlock+0x134>)
   10a0a:	481f      	ldr	r0, [pc, #124]	; (10a88 <z_impl_k_mutex_unlock+0x124>)
   10a0c:	2281      	movs	r2, #129	; 0x81
   10a0e:	f004 f8e9 	bl	14be4 <printk>
   10a12:	2181      	movs	r1, #129	; 0x81
   10a14:	4820      	ldr	r0, [pc, #128]	; (10a98 <z_impl_k_mutex_unlock+0x134>)
   10a16:	f004 f970 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10a1a:	481e      	ldr	r0, [pc, #120]	; (10a94 <z_impl_k_mutex_unlock+0x130>)
   10a1c:	f7ff fe9a 	bl	10754 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   10a20:	68a0      	ldr	r0, [r4, #8]
   10a22:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   10a24:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10a28:	4299      	cmp	r1, r3
   10a2a:	d001      	beq.n	10a30 <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
   10a2c:	f000 fccc 	bl	113c8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10a30:	4620      	mov	r0, r4
   10a32:	f000 fe05 	bl	11640 <z_unpend_first_thread>
	mutex->owner = new_owner;
   10a36:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   10a38:	b158      	cbz	r0, 10a52 <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
   10a3a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10a3e:	6122      	str	r2, [r4, #16]
   10a40:	2200      	movs	r2, #0
   10a42:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   10a44:	f000 fb32 	bl	110ac <z_ready_thread>
		z_reschedule(&lock, key);
   10a48:	4629      	mov	r1, r5
   10a4a:	4812      	ldr	r0, [pc, #72]	; (10a94 <z_impl_k_mutex_unlock+0x130>)
   10a4c:	f000 f930 	bl	10cb0 <z_reschedule>
   10a50:	e7ca      	b.n	109e8 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   10a52:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10a54:	480f      	ldr	r0, [pc, #60]	; (10a94 <z_impl_k_mutex_unlock+0x130>)
   10a56:	f7ff fe6f 	bl	10738 <z_spin_unlock_valid>
   10a5a:	b940      	cbnz	r0, 10a6e <z_impl_k_mutex_unlock+0x10a>
   10a5c:	490e      	ldr	r1, [pc, #56]	; (10a98 <z_impl_k_mutex_unlock+0x134>)
   10a5e:	480a      	ldr	r0, [pc, #40]	; (10a88 <z_impl_k_mutex_unlock+0x124>)
   10a60:	22ac      	movs	r2, #172	; 0xac
   10a62:	f004 f8bf 	bl	14be4 <printk>
   10a66:	21ac      	movs	r1, #172	; 0xac
   10a68:	480b      	ldr	r0, [pc, #44]	; (10a98 <z_impl_k_mutex_unlock+0x134>)
   10a6a:	f004 f946 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10a6e:	f385 8811 	msr	BASEPRI, r5
   10a72:	f3bf 8f6f 	isb	sy
   10a76:	e7b7      	b.n	109e8 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   10a78:	f06f 0015 	mvn.w	r0, #21
   10a7c:	e7b7      	b.n	109ee <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   10a7e:	f04f 30ff 	mov.w	r0, #4294967295
   10a82:	e7b4      	b.n	109ee <z_impl_k_mutex_unlock+0x8a>
   10a84:	00016ca5 	.word	0x00016ca5
   10a88:	00015b65 	.word	0x00015b65
   10a8c:	20000a2c 	.word	0x20000a2c
   10a90:	00016cc7 	.word	0x00016cc7
   10a94:	20000a54 	.word	0x20000a54
   10a98:	00015b3f 	.word	0x00015b3f

00010a9c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10a9c:	b538      	push	{r3, r4, r5, lr}
   10a9e:	4604      	mov	r4, r0
	__asm__ volatile(
   10aa0:	f04f 0320 	mov.w	r3, #32
   10aa4:	f3ef 8511 	mrs	r5, BASEPRI
   10aa8:	f383 8812 	msr	BASEPRI_MAX, r3
   10aac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10ab0:	4812      	ldr	r0, [pc, #72]	; (10afc <z_impl_k_sem_give+0x60>)
   10ab2:	f7ff fe33 	bl	1071c <z_spin_lock_valid>
   10ab6:	b940      	cbnz	r0, 10aca <z_impl_k_sem_give+0x2e>
   10ab8:	4911      	ldr	r1, [pc, #68]	; (10b00 <z_impl_k_sem_give+0x64>)
   10aba:	4812      	ldr	r0, [pc, #72]	; (10b04 <z_impl_k_sem_give+0x68>)
   10abc:	2281      	movs	r2, #129	; 0x81
   10abe:	f004 f891 	bl	14be4 <printk>
   10ac2:	2181      	movs	r1, #129	; 0x81
   10ac4:	480e      	ldr	r0, [pc, #56]	; (10b00 <z_impl_k_sem_give+0x64>)
   10ac6:	f004 f918 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10aca:	480c      	ldr	r0, [pc, #48]	; (10afc <z_impl_k_sem_give+0x60>)
   10acc:	f7ff fe42 	bl	10754 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10ad0:	4620      	mov	r0, r4
   10ad2:	f000 fdb5 	bl	11640 <z_unpend_first_thread>

	if (thread != NULL) {
   10ad6:	b148      	cbz	r0, 10aec <z_impl_k_sem_give+0x50>
   10ad8:	2200      	movs	r2, #0
   10ada:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10adc:	f000 fae6 	bl	110ac <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10ae0:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10ae6:	4805      	ldr	r0, [pc, #20]	; (10afc <z_impl_k_sem_give+0x60>)
   10ae8:	f000 b8e2 	b.w	10cb0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10aec:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10af0:	429a      	cmp	r2, r3
   10af2:	bf18      	it	ne
   10af4:	3301      	addne	r3, #1
   10af6:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   10af8:	e7f2      	b.n	10ae0 <z_impl_k_sem_give+0x44>
   10afa:	bf00      	nop
   10afc:	20000a58 	.word	0x20000a58
   10b00:	00015b3f 	.word	0x00015b3f
   10b04:	00015b65 	.word	0x00015b65

00010b08 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10b0a:	4604      	mov	r4, r0
   10b0c:	4616      	mov	r6, r2
   10b0e:	461f      	mov	r7, r3
   10b10:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   10b14:	b15b      	cbz	r3, 10b2e <z_impl_k_sem_take+0x26>
   10b16:	ea56 0307 	orrs.w	r3, r6, r7
   10b1a:	d008      	beq.n	10b2e <z_impl_k_sem_take+0x26>
   10b1c:	492b      	ldr	r1, [pc, #172]	; (10bcc <z_impl_k_sem_take+0xc4>)
   10b1e:	482c      	ldr	r0, [pc, #176]	; (10bd0 <z_impl_k_sem_take+0xc8>)
   10b20:	2279      	movs	r2, #121	; 0x79
   10b22:	f004 f85f 	bl	14be4 <printk>
   10b26:	2179      	movs	r1, #121	; 0x79
   10b28:	4828      	ldr	r0, [pc, #160]	; (10bcc <z_impl_k_sem_take+0xc4>)
   10b2a:	f004 f8e6 	bl	14cfa <assert_post_action>
   10b2e:	f04f 0320 	mov.w	r3, #32
   10b32:	f3ef 8511 	mrs	r5, BASEPRI
   10b36:	f383 8812 	msr	BASEPRI_MAX, r3
   10b3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10b3e:	4825      	ldr	r0, [pc, #148]	; (10bd4 <z_impl_k_sem_take+0xcc>)
   10b40:	f7ff fdec 	bl	1071c <z_spin_lock_valid>
   10b44:	b940      	cbnz	r0, 10b58 <z_impl_k_sem_take+0x50>
   10b46:	4924      	ldr	r1, [pc, #144]	; (10bd8 <z_impl_k_sem_take+0xd0>)
   10b48:	4821      	ldr	r0, [pc, #132]	; (10bd0 <z_impl_k_sem_take+0xc8>)
   10b4a:	2281      	movs	r2, #129	; 0x81
   10b4c:	f004 f84a 	bl	14be4 <printk>
   10b50:	2181      	movs	r1, #129	; 0x81
   10b52:	4821      	ldr	r0, [pc, #132]	; (10bd8 <z_impl_k_sem_take+0xd0>)
   10b54:	f004 f8d1 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10b58:	481e      	ldr	r0, [pc, #120]	; (10bd4 <z_impl_k_sem_take+0xcc>)
   10b5a:	f7ff fdfb 	bl	10754 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10b5e:	68a3      	ldr	r3, [r4, #8]
   10b60:	b1ab      	cbz	r3, 10b8e <z_impl_k_sem_take+0x86>
		sem->count--;
   10b62:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10b64:	481b      	ldr	r0, [pc, #108]	; (10bd4 <z_impl_k_sem_take+0xcc>)
   10b66:	60a3      	str	r3, [r4, #8]
   10b68:	f7ff fde6 	bl	10738 <z_spin_unlock_valid>
   10b6c:	b940      	cbnz	r0, 10b80 <z_impl_k_sem_take+0x78>
   10b6e:	491a      	ldr	r1, [pc, #104]	; (10bd8 <z_impl_k_sem_take+0xd0>)
   10b70:	4817      	ldr	r0, [pc, #92]	; (10bd0 <z_impl_k_sem_take+0xc8>)
   10b72:	22ac      	movs	r2, #172	; 0xac
   10b74:	f004 f836 	bl	14be4 <printk>
   10b78:	21ac      	movs	r1, #172	; 0xac
   10b7a:	4817      	ldr	r0, [pc, #92]	; (10bd8 <z_impl_k_sem_take+0xd0>)
   10b7c:	f004 f8bd 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10b80:	f385 8811 	msr	BASEPRI, r5
   10b84:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10b88:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10b8a:	b003      	add	sp, #12
   10b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10b8e:	ea56 0307 	orrs.w	r3, r6, r7
   10b92:	d113      	bne.n	10bbc <z_impl_k_sem_take+0xb4>
   10b94:	480f      	ldr	r0, [pc, #60]	; (10bd4 <z_impl_k_sem_take+0xcc>)
   10b96:	f7ff fdcf 	bl	10738 <z_spin_unlock_valid>
   10b9a:	b940      	cbnz	r0, 10bae <z_impl_k_sem_take+0xa6>
   10b9c:	490e      	ldr	r1, [pc, #56]	; (10bd8 <z_impl_k_sem_take+0xd0>)
   10b9e:	480c      	ldr	r0, [pc, #48]	; (10bd0 <z_impl_k_sem_take+0xc8>)
   10ba0:	22ac      	movs	r2, #172	; 0xac
   10ba2:	f004 f81f 	bl	14be4 <printk>
   10ba6:	21ac      	movs	r1, #172	; 0xac
   10ba8:	480b      	ldr	r0, [pc, #44]	; (10bd8 <z_impl_k_sem_take+0xd0>)
   10baa:	f004 f8a6 	bl	14cfa <assert_post_action>
   10bae:	f385 8811 	msr	BASEPRI, r5
   10bb2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10bb6:	f06f 000f 	mvn.w	r0, #15
   10bba:	e7e6      	b.n	10b8a <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10bbc:	4622      	mov	r2, r4
   10bbe:	4629      	mov	r1, r5
   10bc0:	e9cd 6700 	strd	r6, r7, [sp]
   10bc4:	4803      	ldr	r0, [pc, #12]	; (10bd4 <z_impl_k_sem_take+0xcc>)
   10bc6:	f000 fbd9 	bl	1137c <z_pend_curr>
	return ret;
   10bca:	e7de      	b.n	10b8a <z_impl_k_sem_take+0x82>
   10bcc:	00016cf2 	.word	0x00016cf2
   10bd0:	00015b65 	.word	0x00015b65
   10bd4:	20000a58 	.word	0x20000a58
   10bd8:	00015b3f 	.word	0x00015b3f

00010bdc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   10bdc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   10bde:	4c08      	ldr	r4, [pc, #32]	; (10c00 <z_reset_time_slice+0x24>)
   10be0:	6823      	ldr	r3, [r4, #0]
   10be2:	b15b      	cbz	r3, 10bfc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   10be4:	f7fe fb42 	bl	f26c <sys_clock_elapsed>
   10be8:	4603      	mov	r3, r0
   10bea:	6820      	ldr	r0, [r4, #0]
   10bec:	4a05      	ldr	r2, [pc, #20]	; (10c04 <z_reset_time_slice+0x28>)
   10bee:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   10bf0:	2100      	movs	r1, #0
	}
}
   10bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   10bf6:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   10bf8:	f001 b8e0 	b.w	11dbc <z_set_timeout_expiry>
}
   10bfc:	bd10      	pop	{r4, pc}
   10bfe:	bf00      	nop
   10c00:	20000a68 	.word	0x20000a68
   10c04:	20000a2c 	.word	0x20000a2c

00010c08 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   10c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c0a:	4604      	mov	r4, r0
   10c0c:	460d      	mov	r5, r1
	__asm__ volatile(
   10c0e:	f04f 0320 	mov.w	r3, #32
   10c12:	f3ef 8611 	mrs	r6, BASEPRI
   10c16:	f383 8812 	msr	BASEPRI_MAX, r3
   10c1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10c1e:	481e      	ldr	r0, [pc, #120]	; (10c98 <k_sched_time_slice_set+0x90>)
   10c20:	f7ff fd7c 	bl	1071c <z_spin_lock_valid>
   10c24:	b940      	cbnz	r0, 10c38 <k_sched_time_slice_set+0x30>
   10c26:	491d      	ldr	r1, [pc, #116]	; (10c9c <k_sched_time_slice_set+0x94>)
   10c28:	481d      	ldr	r0, [pc, #116]	; (10ca0 <k_sched_time_slice_set+0x98>)
   10c2a:	2281      	movs	r2, #129	; 0x81
   10c2c:	f003 ffda 	bl	14be4 <printk>
   10c30:	2181      	movs	r1, #129	; 0x81
   10c32:	481a      	ldr	r0, [pc, #104]	; (10c9c <k_sched_time_slice_set+0x94>)
   10c34:	f004 f861 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10c38:	4817      	ldr	r0, [pc, #92]	; (10c98 <k_sched_time_slice_set+0x90>)
   10c3a:	f7ff fd8b 	bl	10754 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10c3e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   10c42:	2200      	movs	r2, #0
   10c44:	f240 30e7 	movw	r0, #999	; 0x3e7
   10c48:	2100      	movs	r1, #0
   10c4a:	4b16      	ldr	r3, [pc, #88]	; (10ca4 <k_sched_time_slice_set+0x9c>)
   10c4c:	fbe7 0104 	umlal	r0, r1, r7, r4
   10c50:	611a      	str	r2, [r3, #16]
   10c52:	2300      	movs	r3, #0
   10c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c58:	f7fb fbf0 	bl	c43c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   10c5c:	2c00      	cmp	r4, #0
   10c5e:	4b12      	ldr	r3, [pc, #72]	; (10ca8 <k_sched_time_slice_set+0xa0>)
   10c60:	dc16      	bgt.n	10c90 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   10c62:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   10c64:	4b11      	ldr	r3, [pc, #68]	; (10cac <k_sched_time_slice_set+0xa4>)
   10c66:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   10c68:	f7ff ffb8 	bl	10bdc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c6c:	480a      	ldr	r0, [pc, #40]	; (10c98 <k_sched_time_slice_set+0x90>)
   10c6e:	f7ff fd63 	bl	10738 <z_spin_unlock_valid>
   10c72:	b940      	cbnz	r0, 10c86 <k_sched_time_slice_set+0x7e>
   10c74:	4909      	ldr	r1, [pc, #36]	; (10c9c <k_sched_time_slice_set+0x94>)
   10c76:	480a      	ldr	r0, [pc, #40]	; (10ca0 <k_sched_time_slice_set+0x98>)
   10c78:	22ac      	movs	r2, #172	; 0xac
   10c7a:	f003 ffb3 	bl	14be4 <printk>
   10c7e:	21ac      	movs	r1, #172	; 0xac
   10c80:	4806      	ldr	r0, [pc, #24]	; (10c9c <k_sched_time_slice_set+0x94>)
   10c82:	f004 f83a 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10c86:	f386 8811 	msr	BASEPRI, r6
   10c8a:	f3bf 8f6f 	isb	sy
	}
}
   10c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   10c90:	2802      	cmp	r0, #2
   10c92:	bfb8      	it	lt
   10c94:	2002      	movlt	r0, #2
   10c96:	e7e4      	b.n	10c62 <k_sched_time_slice_set+0x5a>
   10c98:	20000a60 	.word	0x20000a60
   10c9c:	00015b3f 	.word	0x00015b3f
   10ca0:	00015b65 	.word	0x00015b65
   10ca4:	20000a2c 	.word	0x20000a2c
   10ca8:	20000a68 	.word	0x20000a68
   10cac:	20000a64 	.word	0x20000a64

00010cb0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   10cb0:	b510      	push	{r4, lr}
   10cb2:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10cb4:	460c      	mov	r4, r1
   10cb6:	b9c1      	cbnz	r1, 10cea <z_reschedule+0x3a>
   10cb8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   10cbc:	b9aa      	cbnz	r2, 10cea <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   10cbe:	4a14      	ldr	r2, [pc, #80]	; (10d10 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   10cc0:	69d1      	ldr	r1, [r2, #28]
   10cc2:	6892      	ldr	r2, [r2, #8]
   10cc4:	4291      	cmp	r1, r2
   10cc6:	d010      	beq.n	10cea <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10cc8:	f7ff fd36 	bl	10738 <z_spin_unlock_valid>
   10ccc:	b940      	cbnz	r0, 10ce0 <z_reschedule+0x30>
   10cce:	4911      	ldr	r1, [pc, #68]	; (10d14 <z_reschedule+0x64>)
   10cd0:	4811      	ldr	r0, [pc, #68]	; (10d18 <z_reschedule+0x68>)
   10cd2:	22c3      	movs	r2, #195	; 0xc3
   10cd4:	f003 ff86 	bl	14be4 <printk>
   10cd8:	21c3      	movs	r1, #195	; 0xc3
   10cda:	480e      	ldr	r0, [pc, #56]	; (10d14 <z_reschedule+0x64>)
   10cdc:	f004 f80d 	bl	14cfa <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   10ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   10ce4:	2000      	movs	r0, #0
   10ce6:	f7fc beb7 	b.w	da58 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10cea:	4618      	mov	r0, r3
   10cec:	f7ff fd24 	bl	10738 <z_spin_unlock_valid>
   10cf0:	b940      	cbnz	r0, 10d04 <z_reschedule+0x54>
   10cf2:	4908      	ldr	r1, [pc, #32]	; (10d14 <z_reschedule+0x64>)
   10cf4:	4808      	ldr	r0, [pc, #32]	; (10d18 <z_reschedule+0x68>)
   10cf6:	22ac      	movs	r2, #172	; 0xac
   10cf8:	f003 ff74 	bl	14be4 <printk>
   10cfc:	21ac      	movs	r1, #172	; 0xac
   10cfe:	4805      	ldr	r0, [pc, #20]	; (10d14 <z_reschedule+0x64>)
   10d00:	f003 fffb 	bl	14cfa <assert_post_action>
   10d04:	f384 8811 	msr	BASEPRI, r4
   10d08:	f3bf 8f6f 	isb	sy
   10d0c:	bd10      	pop	{r4, pc}
   10d0e:	bf00      	nop
   10d10:	20000a2c 	.word	0x20000a2c
   10d14:	00015b3f 	.word	0x00015b3f
   10d18:	00015b65 	.word	0x00015b65

00010d1c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   10d1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10d1e:	f04f 0320 	mov.w	r3, #32
   10d22:	f3ef 8511 	mrs	r5, BASEPRI
   10d26:	f383 8812 	msr	BASEPRI_MAX, r3
   10d2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10d2e:	4820      	ldr	r0, [pc, #128]	; (10db0 <k_sched_lock+0x94>)
   10d30:	f7ff fcf4 	bl	1071c <z_spin_lock_valid>
   10d34:	b940      	cbnz	r0, 10d48 <k_sched_lock+0x2c>
   10d36:	491f      	ldr	r1, [pc, #124]	; (10db4 <k_sched_lock+0x98>)
   10d38:	481f      	ldr	r0, [pc, #124]	; (10db8 <k_sched_lock+0x9c>)
   10d3a:	2281      	movs	r2, #129	; 0x81
   10d3c:	f003 ff52 	bl	14be4 <printk>
   10d40:	2181      	movs	r1, #129	; 0x81
   10d42:	481c      	ldr	r0, [pc, #112]	; (10db4 <k_sched_lock+0x98>)
   10d44:	f003 ffd9 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10d48:	4819      	ldr	r0, [pc, #100]	; (10db0 <k_sched_lock+0x94>)
   10d4a:	f7ff fd03 	bl	10754 <z_spin_lock_set_owner>
   10d4e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   10d52:	b143      	cbz	r3, 10d66 <k_sched_lock+0x4a>
   10d54:	4919      	ldr	r1, [pc, #100]	; (10dbc <k_sched_lock+0xa0>)
   10d56:	4818      	ldr	r0, [pc, #96]	; (10db8 <k_sched_lock+0x9c>)
   10d58:	22fd      	movs	r2, #253	; 0xfd
   10d5a:	f003 ff43 	bl	14be4 <printk>
   10d5e:	21fd      	movs	r1, #253	; 0xfd
   10d60:	4816      	ldr	r0, [pc, #88]	; (10dbc <k_sched_lock+0xa0>)
   10d62:	f003 ffca 	bl	14cfa <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   10d66:	4c16      	ldr	r4, [pc, #88]	; (10dc0 <k_sched_lock+0xa4>)
   10d68:	68a2      	ldr	r2, [r4, #8]
   10d6a:	7bd2      	ldrb	r2, [r2, #15]
   10d6c:	2a01      	cmp	r2, #1
   10d6e:	d108      	bne.n	10d82 <k_sched_lock+0x66>
   10d70:	4912      	ldr	r1, [pc, #72]	; (10dbc <k_sched_lock+0xa0>)
   10d72:	4811      	ldr	r0, [pc, #68]	; (10db8 <k_sched_lock+0x9c>)
   10d74:	22fe      	movs	r2, #254	; 0xfe
   10d76:	f003 ff35 	bl	14be4 <printk>
   10d7a:	21fe      	movs	r1, #254	; 0xfe
   10d7c:	480f      	ldr	r0, [pc, #60]	; (10dbc <k_sched_lock+0xa0>)
   10d7e:	f003 ffbc 	bl	14cfa <assert_post_action>
	--_current->base.sched_locked;
   10d82:	68a2      	ldr	r2, [r4, #8]
   10d84:	7bd3      	ldrb	r3, [r2, #15]
   10d86:	3b01      	subs	r3, #1
   10d88:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d8a:	4809      	ldr	r0, [pc, #36]	; (10db0 <k_sched_lock+0x94>)
   10d8c:	f7ff fcd4 	bl	10738 <z_spin_unlock_valid>
   10d90:	b940      	cbnz	r0, 10da4 <k_sched_lock+0x88>
   10d92:	4908      	ldr	r1, [pc, #32]	; (10db4 <k_sched_lock+0x98>)
   10d94:	4808      	ldr	r0, [pc, #32]	; (10db8 <k_sched_lock+0x9c>)
   10d96:	22ac      	movs	r2, #172	; 0xac
   10d98:	f003 ff24 	bl	14be4 <printk>
   10d9c:	21ac      	movs	r1, #172	; 0xac
   10d9e:	4805      	ldr	r0, [pc, #20]	; (10db4 <k_sched_lock+0x98>)
   10da0:	f003 ffab 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10da4:	f385 8811 	msr	BASEPRI, r5
   10da8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   10dac:	bd38      	pop	{r3, r4, r5, pc}
   10dae:	bf00      	nop
   10db0:	20000a60 	.word	0x20000a60
   10db4:	00015b3f 	.word	0x00015b3f
   10db8:	00015b65 	.word	0x00015b65
   10dbc:	00016cc7 	.word	0x00016cc7
   10dc0:	20000a2c 	.word	0x20000a2c

00010dc4 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10dc4:	4b0b      	ldr	r3, [pc, #44]	; (10df4 <z_priq_dumb_remove+0x30>)
{
   10dc6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10dc8:	4299      	cmp	r1, r3
{
   10dca:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10dcc:	d10a      	bne.n	10de4 <z_priq_dumb_remove+0x20>
   10dce:	490a      	ldr	r1, [pc, #40]	; (10df8 <z_priq_dumb_remove+0x34>)
   10dd0:	480a      	ldr	r0, [pc, #40]	; (10dfc <z_priq_dumb_remove+0x38>)
   10dd2:	f240 32e7 	movw	r2, #999	; 0x3e7
   10dd6:	f003 ff05 	bl	14be4 <printk>
   10dda:	f240 31e7 	movw	r1, #999	; 0x3e7
   10dde:	4806      	ldr	r0, [pc, #24]	; (10df8 <z_priq_dumb_remove+0x34>)
   10de0:	f003 ff8b 	bl	14cfa <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   10de4:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   10de8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10dea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10dec:	2300      	movs	r3, #0
	node->prev = NULL;
   10dee:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   10df2:	bd10      	pop	{r4, pc}
   10df4:	20000160 	.word	0x20000160
   10df8:	00016d12 	.word	0x00016d12
   10dfc:	00015b65 	.word	0x00015b65

00010e00 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   10e00:	6883      	ldr	r3, [r0, #8]
{
   10e02:	b510      	push	{r4, lr}
   10e04:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   10e06:	b953      	cbnz	r3, 10e1e <unpend_thread_no_timeout+0x1e>
   10e08:	490a      	ldr	r1, [pc, #40]	; (10e34 <unpend_thread_no_timeout+0x34>)
   10e0a:	480b      	ldr	r0, [pc, #44]	; (10e38 <unpend_thread_no_timeout+0x38>)
   10e0c:	f240 2283 	movw	r2, #643	; 0x283
   10e10:	f003 fee8 	bl	14be4 <printk>
   10e14:	f240 2183 	movw	r1, #643	; 0x283
   10e18:	4806      	ldr	r0, [pc, #24]	; (10e34 <unpend_thread_no_timeout+0x34>)
   10e1a:	f003 ff6e 	bl	14cfa <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   10e1e:	4621      	mov	r1, r4
   10e20:	68a0      	ldr	r0, [r4, #8]
   10e22:	f7ff ffcf 	bl	10dc4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10e26:	7b63      	ldrb	r3, [r4, #13]
   10e28:	f023 0302 	bic.w	r3, r3, #2
   10e2c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   10e2e:	2300      	movs	r3, #0
   10e30:	60a3      	str	r3, [r4, #8]
}
   10e32:	bd10      	pop	{r4, pc}
   10e34:	00016d12 	.word	0x00016d12
   10e38:	00015b65 	.word	0x00015b65

00010e3c <update_cache>:
{
   10e3c:	b538      	push	{r3, r4, r5, lr}
   10e3e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   10e40:	4812      	ldr	r0, [pc, #72]	; (10e8c <update_cache+0x50>)
   10e42:	f004 fa88 	bl	15356 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10e46:	4d12      	ldr	r5, [pc, #72]	; (10e90 <update_cache+0x54>)
   10e48:	4604      	mov	r4, r0
   10e4a:	b900      	cbnz	r0, 10e4e <update_cache+0x12>
   10e4c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   10e4e:	b9aa      	cbnz	r2, 10e7c <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   10e50:	68ab      	ldr	r3, [r5, #8]
   10e52:	b943      	cbnz	r3, 10e66 <update_cache+0x2a>
   10e54:	490f      	ldr	r1, [pc, #60]	; (10e94 <update_cache+0x58>)
   10e56:	4810      	ldr	r0, [pc, #64]	; (10e98 <update_cache+0x5c>)
   10e58:	2289      	movs	r2, #137	; 0x89
   10e5a:	f003 fec3 	bl	14be4 <printk>
   10e5e:	2189      	movs	r1, #137	; 0x89
   10e60:	480c      	ldr	r0, [pc, #48]	; (10e94 <update_cache+0x58>)
   10e62:	f003 ff4a 	bl	14cfa <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   10e66:	68ab      	ldr	r3, [r5, #8]
   10e68:	7b5a      	ldrb	r2, [r3, #13]
   10e6a:	06d2      	lsls	r2, r2, #27
   10e6c:	d106      	bne.n	10e7c <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   10e6e:	69a2      	ldr	r2, [r4, #24]
   10e70:	b922      	cbnz	r2, 10e7c <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   10e72:	89da      	ldrh	r2, [r3, #14]
   10e74:	2a7f      	cmp	r2, #127	; 0x7f
   10e76:	d901      	bls.n	10e7c <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   10e78:	61eb      	str	r3, [r5, #28]
}
   10e7a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   10e7c:	68ab      	ldr	r3, [r5, #8]
   10e7e:	42a3      	cmp	r3, r4
   10e80:	d001      	beq.n	10e86 <update_cache+0x4a>
			z_reset_time_slice();
   10e82:	f7ff feab 	bl	10bdc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   10e86:	61ec      	str	r4, [r5, #28]
}
   10e88:	e7f7      	b.n	10e7a <update_cache+0x3e>
   10e8a:	bf00      	nop
   10e8c:	20000a4c 	.word	0x20000a4c
   10e90:	20000a2c 	.word	0x20000a2c
   10e94:	00016d12 	.word	0x00016d12
   10e98:	00015b65 	.word	0x00015b65

00010e9c <move_thread_to_end_of_prio_q>:
{
   10e9c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   10e9e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   10ea2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   10ea4:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   10ea6:	7b43      	ldrb	r3, [r0, #13]
   10ea8:	da06      	bge.n	10eb8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   10eae:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10eb0:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   10eb2:	481f      	ldr	r0, [pc, #124]	; (10f30 <move_thread_to_end_of_prio_q+0x94>)
   10eb4:	f7ff ff86 	bl	10dc4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   10eb8:	7b63      	ldrb	r3, [r4, #13]
   10eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10ebe:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   10ec0:	4b1c      	ldr	r3, [pc, #112]	; (10f34 <move_thread_to_end_of_prio_q+0x98>)
   10ec2:	429c      	cmp	r4, r3
   10ec4:	d108      	bne.n	10ed8 <move_thread_to_end_of_prio_q+0x3c>
   10ec6:	491c      	ldr	r1, [pc, #112]	; (10f38 <move_thread_to_end_of_prio_q+0x9c>)
   10ec8:	481c      	ldr	r0, [pc, #112]	; (10f3c <move_thread_to_end_of_prio_q+0xa0>)
   10eca:	22ba      	movs	r2, #186	; 0xba
   10ecc:	f003 fe8a 	bl	14be4 <printk>
   10ed0:	21ba      	movs	r1, #186	; 0xba
   10ed2:	4819      	ldr	r0, [pc, #100]	; (10f38 <move_thread_to_end_of_prio_q+0x9c>)
   10ed4:	f003 ff11 	bl	14cfa <assert_post_action>
	return list->head == list;
   10ed8:	4a19      	ldr	r2, [pc, #100]	; (10f40 <move_thread_to_end_of_prio_q+0xa4>)
   10eda:	4611      	mov	r1, r2
   10edc:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10ee0:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10ee2:	428b      	cmp	r3, r1
   10ee4:	bf08      	it	eq
   10ee6:	2300      	moveq	r3, #0
   10ee8:	2b00      	cmp	r3, #0
   10eea:	bf38      	it	cc
   10eec:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10eee:	b1cb      	cbz	r3, 10f24 <move_thread_to_end_of_prio_q+0x88>
	int32_t b1 = thread_1->base.prio;
   10ef0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   10ef4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   10ef8:	4286      	cmp	r6, r0
   10efa:	d00f      	beq.n	10f1c <move_thread_to_end_of_prio_q+0x80>
		return b2 - b1;
   10efc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   10efe:	2800      	cmp	r0, #0
   10f00:	dd0c      	ble.n	10f1c <move_thread_to_end_of_prio_q+0x80>
	sys_dnode_t *const prev = successor->prev;
   10f02:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   10f04:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   10f08:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   10f0a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   10f0c:	6890      	ldr	r0, [r2, #8]
   10f0e:	1b03      	subs	r3, r0, r4
   10f10:	4258      	negs	r0, r3
   10f12:	4158      	adcs	r0, r3
}
   10f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   10f18:	f7ff bf90 	b.w	10e3c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   10f1c:	42ab      	cmp	r3, r5
   10f1e:	d001      	beq.n	10f24 <move_thread_to_end_of_prio_q+0x88>
   10f20:	681b      	ldr	r3, [r3, #0]
   10f22:	e7e4      	b.n	10eee <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
   10f24:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   10f28:	602c      	str	r4, [r5, #0]
	list->tail = node;
   10f2a:	6254      	str	r4, [r2, #36]	; 0x24
}
   10f2c:	e7ee      	b.n	10f0c <move_thread_to_end_of_prio_q+0x70>
   10f2e:	bf00      	nop
   10f30:	20000a4c 	.word	0x20000a4c
   10f34:	20000160 	.word	0x20000160
   10f38:	00016d12 	.word	0x00016d12
   10f3c:	00015b65 	.word	0x00015b65
   10f40:	20000a2c 	.word	0x20000a2c

00010f44 <z_time_slice>:
{
   10f44:	b570      	push	{r4, r5, r6, lr}
   10f46:	4604      	mov	r4, r0
	__asm__ volatile(
   10f48:	f04f 0320 	mov.w	r3, #32
   10f4c:	f3ef 8511 	mrs	r5, BASEPRI
   10f50:	f383 8812 	msr	BASEPRI_MAX, r3
   10f54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10f58:	4825      	ldr	r0, [pc, #148]	; (10ff0 <z_time_slice+0xac>)
   10f5a:	f7ff fbdf 	bl	1071c <z_spin_lock_valid>
   10f5e:	b940      	cbnz	r0, 10f72 <z_time_slice+0x2e>
   10f60:	4924      	ldr	r1, [pc, #144]	; (10ff4 <z_time_slice+0xb0>)
   10f62:	4825      	ldr	r0, [pc, #148]	; (10ff8 <z_time_slice+0xb4>)
   10f64:	2281      	movs	r2, #129	; 0x81
   10f66:	f003 fe3d 	bl	14be4 <printk>
   10f6a:	2181      	movs	r1, #129	; 0x81
   10f6c:	4821      	ldr	r0, [pc, #132]	; (10ff4 <z_time_slice+0xb0>)
   10f6e:	f003 fec4 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   10f72:	481f      	ldr	r0, [pc, #124]	; (10ff0 <z_time_slice+0xac>)
   10f74:	f7ff fbee 	bl	10754 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   10f78:	4b20      	ldr	r3, [pc, #128]	; (10ffc <z_time_slice+0xb8>)
   10f7a:	4a21      	ldr	r2, [pc, #132]	; (11000 <z_time_slice+0xbc>)
   10f7c:	6898      	ldr	r0, [r3, #8]
   10f7e:	6811      	ldr	r1, [r2, #0]
   10f80:	4288      	cmp	r0, r1
   10f82:	4619      	mov	r1, r3
   10f84:	d113      	bne.n	10fae <z_time_slice+0x6a>
			z_reset_time_slice();
   10f86:	f7ff fe29 	bl	10bdc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10f8a:	4819      	ldr	r0, [pc, #100]	; (10ff0 <z_time_slice+0xac>)
   10f8c:	f7ff fbd4 	bl	10738 <z_spin_unlock_valid>
   10f90:	b940      	cbnz	r0, 10fa4 <z_time_slice+0x60>
   10f92:	4918      	ldr	r1, [pc, #96]	; (10ff4 <z_time_slice+0xb0>)
   10f94:	4818      	ldr	r0, [pc, #96]	; (10ff8 <z_time_slice+0xb4>)
   10f96:	22ac      	movs	r2, #172	; 0xac
   10f98:	f003 fe24 	bl	14be4 <printk>
   10f9c:	21ac      	movs	r1, #172	; 0xac
   10f9e:	4815      	ldr	r0, [pc, #84]	; (10ff4 <z_time_slice+0xb0>)
   10fa0:	f003 feab 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   10fa4:	f385 8811 	msr	BASEPRI, r5
   10fa8:	f3bf 8f6f 	isb	sy
}
   10fac:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   10fae:	2600      	movs	r6, #0
   10fb0:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   10fb2:	4a14      	ldr	r2, [pc, #80]	; (11004 <z_time_slice+0xc0>)
   10fb4:	6812      	ldr	r2, [r2, #0]
   10fb6:	b1ba      	cbz	r2, 10fe8 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   10fb8:	89c2      	ldrh	r2, [r0, #14]
   10fba:	2a7f      	cmp	r2, #127	; 0x7f
   10fbc:	d814      	bhi.n	10fe8 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   10fbe:	7b42      	ldrb	r2, [r0, #13]
   10fc0:	06d2      	lsls	r2, r2, #27
   10fc2:	d111      	bne.n	10fe8 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   10fc4:	4a10      	ldr	r2, [pc, #64]	; (11008 <z_time_slice+0xc4>)
   10fc6:	f990 600e 	ldrsb.w	r6, [r0, #14]
   10fca:	6812      	ldr	r2, [r2, #0]
   10fcc:	4296      	cmp	r6, r2
   10fce:	db0b      	blt.n	10fe8 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   10fd0:	4a0e      	ldr	r2, [pc, #56]	; (1100c <z_time_slice+0xc8>)
   10fd2:	4290      	cmp	r0, r2
   10fd4:	d008      	beq.n	10fe8 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   10fd6:	691a      	ldr	r2, [r3, #16]
   10fd8:	42a2      	cmp	r2, r4
   10fda:	dc02      	bgt.n	10fe2 <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   10fdc:	f7ff ff5e 	bl	10e9c <move_thread_to_end_of_prio_q>
   10fe0:	e7d1      	b.n	10f86 <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   10fe2:	1b12      	subs	r2, r2, r4
   10fe4:	611a      	str	r2, [r3, #16]
   10fe6:	e7d0      	b.n	10f8a <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   10fe8:	2300      	movs	r3, #0
   10fea:	610b      	str	r3, [r1, #16]
   10fec:	e7cd      	b.n	10f8a <z_time_slice+0x46>
   10fee:	bf00      	nop
   10ff0:	20000a60 	.word	0x20000a60
   10ff4:	00015b3f 	.word	0x00015b3f
   10ff8:	00015b65 	.word	0x00015b65
   10ffc:	20000a2c 	.word	0x20000a2c
   11000:	20000a5c 	.word	0x20000a5c
   11004:	20000a68 	.word	0x20000a68
   11008:	20000a64 	.word	0x20000a64
   1100c:	20000160 	.word	0x20000160

00011010 <ready_thread>:
{
   11010:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   11012:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   11016:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   11018:	2a00      	cmp	r2, #0
   1101a:	7b43      	ldrb	r3, [r0, #13]
   1101c:	db3d      	blt.n	1109a <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1101e:	06da      	lsls	r2, r3, #27
   11020:	d13b      	bne.n	1109a <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
   11022:	6985      	ldr	r5, [r0, #24]
   11024:	2d00      	cmp	r5, #0
   11026:	d138      	bne.n	1109a <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
   11028:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1102c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1102e:	4b1b      	ldr	r3, [pc, #108]	; (1109c <ready_thread+0x8c>)
   11030:	4298      	cmp	r0, r3
   11032:	d108      	bne.n	11046 <ready_thread+0x36>
   11034:	491a      	ldr	r1, [pc, #104]	; (110a0 <ready_thread+0x90>)
   11036:	481b      	ldr	r0, [pc, #108]	; (110a4 <ready_thread+0x94>)
   11038:	22ba      	movs	r2, #186	; 0xba
   1103a:	f003 fdd3 	bl	14be4 <printk>
   1103e:	21ba      	movs	r1, #186	; 0xba
   11040:	4817      	ldr	r0, [pc, #92]	; (110a0 <ready_thread+0x90>)
   11042:	f003 fe5a 	bl	14cfa <assert_post_action>
	return list->head == list;
   11046:	4918      	ldr	r1, [pc, #96]	; (110a8 <ready_thread+0x98>)
   11048:	460b      	mov	r3, r1
   1104a:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1104e:	4298      	cmp	r0, r3
   11050:	bf18      	it	ne
   11052:	4605      	movne	r5, r0
   11054:	2d00      	cmp	r5, #0
   11056:	461a      	mov	r2, r3
   11058:	462b      	mov	r3, r5
   1105a:	bf38      	it	cc
   1105c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1105e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11060:	b1b3      	cbz	r3, 11090 <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
   11062:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11066:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1106a:	4286      	cmp	r6, r0
   1106c:	d00c      	beq.n	11088 <ready_thread+0x78>
		return b2 - b1;
   1106e:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   11070:	2800      	cmp	r0, #0
   11072:	dd09      	ble.n	11088 <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
   11074:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11076:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1107a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1107c:	605c      	str	r4, [r3, #4]
		update_cache(0);
   1107e:	2000      	movs	r0, #0
}
   11080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   11084:	f7ff beda 	b.w	10e3c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   11088:	42ab      	cmp	r3, r5
   1108a:	d001      	beq.n	11090 <ready_thread+0x80>
   1108c:	681b      	ldr	r3, [r3, #0]
   1108e:	e7e7      	b.n	11060 <ready_thread+0x50>
	node->prev = tail;
   11090:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   11094:	602c      	str	r4, [r5, #0]
	list->tail = node;
   11096:	624c      	str	r4, [r1, #36]	; 0x24
}
   11098:	e7f1      	b.n	1107e <ready_thread+0x6e>
}
   1109a:	bd70      	pop	{r4, r5, r6, pc}
   1109c:	20000160 	.word	0x20000160
   110a0:	00016d12 	.word	0x00016d12
   110a4:	00015b65 	.word	0x00015b65
   110a8:	20000a2c 	.word	0x20000a2c

000110ac <z_ready_thread>:
{
   110ac:	b538      	push	{r3, r4, r5, lr}
   110ae:	4604      	mov	r4, r0
	__asm__ volatile(
   110b0:	f04f 0320 	mov.w	r3, #32
   110b4:	f3ef 8511 	mrs	r5, BASEPRI
   110b8:	f383 8812 	msr	BASEPRI_MAX, r3
   110bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   110c0:	4812      	ldr	r0, [pc, #72]	; (1110c <z_ready_thread+0x60>)
   110c2:	f7ff fb2b 	bl	1071c <z_spin_lock_valid>
   110c6:	b940      	cbnz	r0, 110da <z_ready_thread+0x2e>
   110c8:	4911      	ldr	r1, [pc, #68]	; (11110 <z_ready_thread+0x64>)
   110ca:	4812      	ldr	r0, [pc, #72]	; (11114 <z_ready_thread+0x68>)
   110cc:	2281      	movs	r2, #129	; 0x81
   110ce:	f003 fd89 	bl	14be4 <printk>
   110d2:	2181      	movs	r1, #129	; 0x81
   110d4:	480e      	ldr	r0, [pc, #56]	; (11110 <z_ready_thread+0x64>)
   110d6:	f003 fe10 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   110da:	480c      	ldr	r0, [pc, #48]	; (1110c <z_ready_thread+0x60>)
   110dc:	f7ff fb3a 	bl	10754 <z_spin_lock_set_owner>
			ready_thread(thread);
   110e0:	4620      	mov	r0, r4
   110e2:	f7ff ff95 	bl	11010 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   110e6:	4809      	ldr	r0, [pc, #36]	; (1110c <z_ready_thread+0x60>)
   110e8:	f7ff fb26 	bl	10738 <z_spin_unlock_valid>
   110ec:	b940      	cbnz	r0, 11100 <z_ready_thread+0x54>
   110ee:	4908      	ldr	r1, [pc, #32]	; (11110 <z_ready_thread+0x64>)
   110f0:	4808      	ldr	r0, [pc, #32]	; (11114 <z_ready_thread+0x68>)
   110f2:	22ac      	movs	r2, #172	; 0xac
   110f4:	f003 fd76 	bl	14be4 <printk>
   110f8:	21ac      	movs	r1, #172	; 0xac
   110fa:	4805      	ldr	r0, [pc, #20]	; (11110 <z_ready_thread+0x64>)
   110fc:	f003 fdfd 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11100:	f385 8811 	msr	BASEPRI, r5
   11104:	f3bf 8f6f 	isb	sy
}
   11108:	bd38      	pop	{r3, r4, r5, pc}
   1110a:	bf00      	nop
   1110c:	20000a60 	.word	0x20000a60
   11110:	00015b3f 	.word	0x00015b3f
   11114:	00015b65 	.word	0x00015b65

00011118 <z_sched_start>:
{
   11118:	b538      	push	{r3, r4, r5, lr}
   1111a:	4604      	mov	r4, r0
	__asm__ volatile(
   1111c:	f04f 0320 	mov.w	r3, #32
   11120:	f3ef 8511 	mrs	r5, BASEPRI
   11124:	f383 8812 	msr	BASEPRI_MAX, r3
   11128:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1112c:	4818      	ldr	r0, [pc, #96]	; (11190 <z_sched_start+0x78>)
   1112e:	f7ff faf5 	bl	1071c <z_spin_lock_valid>
   11132:	b940      	cbnz	r0, 11146 <z_sched_start+0x2e>
   11134:	4917      	ldr	r1, [pc, #92]	; (11194 <z_sched_start+0x7c>)
   11136:	4818      	ldr	r0, [pc, #96]	; (11198 <z_sched_start+0x80>)
   11138:	2281      	movs	r2, #129	; 0x81
   1113a:	f003 fd53 	bl	14be4 <printk>
   1113e:	2181      	movs	r1, #129	; 0x81
   11140:	4814      	ldr	r0, [pc, #80]	; (11194 <z_sched_start+0x7c>)
   11142:	f003 fdda 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11146:	4812      	ldr	r0, [pc, #72]	; (11190 <z_sched_start+0x78>)
   11148:	f7ff fb04 	bl	10754 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1114c:	7b63      	ldrb	r3, [r4, #13]
   1114e:	075a      	lsls	r2, r3, #29
   11150:	d411      	bmi.n	11176 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11152:	480f      	ldr	r0, [pc, #60]	; (11190 <z_sched_start+0x78>)
   11154:	f7ff faf0 	bl	10738 <z_spin_unlock_valid>
   11158:	b940      	cbnz	r0, 1116c <z_sched_start+0x54>
   1115a:	490e      	ldr	r1, [pc, #56]	; (11194 <z_sched_start+0x7c>)
   1115c:	480e      	ldr	r0, [pc, #56]	; (11198 <z_sched_start+0x80>)
   1115e:	22ac      	movs	r2, #172	; 0xac
   11160:	f003 fd40 	bl	14be4 <printk>
   11164:	21ac      	movs	r1, #172	; 0xac
   11166:	480b      	ldr	r0, [pc, #44]	; (11194 <z_sched_start+0x7c>)
   11168:	f003 fdc7 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   1116c:	f385 8811 	msr	BASEPRI, r5
   11170:	f3bf 8f6f 	isb	sy
}
   11174:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11176:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1117a:	4620      	mov	r0, r4
   1117c:	7363      	strb	r3, [r4, #13]
   1117e:	f7ff ff47 	bl	11010 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11182:	4629      	mov	r1, r5
}
   11184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   11188:	4801      	ldr	r0, [pc, #4]	; (11190 <z_sched_start+0x78>)
   1118a:	f7ff bd91 	b.w	10cb0 <z_reschedule>
   1118e:	bf00      	nop
   11190:	20000a60 	.word	0x20000a60
   11194:	00015b3f 	.word	0x00015b3f
   11198:	00015b65 	.word	0x00015b65

0001119c <z_thread_timeout>:
{
   1119c:	b570      	push	{r4, r5, r6, lr}
   1119e:	4604      	mov	r4, r0
	__asm__ volatile(
   111a0:	f04f 0320 	mov.w	r3, #32
   111a4:	f3ef 8611 	mrs	r6, BASEPRI
   111a8:	f383 8812 	msr	BASEPRI_MAX, r3
   111ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   111b0:	481b      	ldr	r0, [pc, #108]	; (11220 <z_thread_timeout+0x84>)
   111b2:	f7ff fab3 	bl	1071c <z_spin_lock_valid>
   111b6:	b940      	cbnz	r0, 111ca <z_thread_timeout+0x2e>
   111b8:	491a      	ldr	r1, [pc, #104]	; (11224 <z_thread_timeout+0x88>)
   111ba:	481b      	ldr	r0, [pc, #108]	; (11228 <z_thread_timeout+0x8c>)
   111bc:	2281      	movs	r2, #129	; 0x81
   111be:	f003 fd11 	bl	14be4 <printk>
   111c2:	2181      	movs	r1, #129	; 0x81
   111c4:	4817      	ldr	r0, [pc, #92]	; (11224 <z_thread_timeout+0x88>)
   111c6:	f003 fd98 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   111ca:	4815      	ldr	r0, [pc, #84]	; (11220 <z_thread_timeout+0x84>)
   111cc:	f7ff fac2 	bl	10754 <z_spin_lock_set_owner>
		if (!killed) {
   111d0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   111d4:	f013 0f28 	tst.w	r3, #40	; 0x28
   111d8:	d110      	bne.n	111fc <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   111da:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   111de:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   111e2:	b113      	cbz	r3, 111ea <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   111e4:	4628      	mov	r0, r5
   111e6:	f7ff fe0b 	bl	10e00 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   111ea:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   111ee:	4628      	mov	r0, r5
   111f0:	f023 0314 	bic.w	r3, r3, #20
   111f4:	f804 3c0b 	strb.w	r3, [r4, #-11]
   111f8:	f7ff ff0a 	bl	11010 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   111fc:	4808      	ldr	r0, [pc, #32]	; (11220 <z_thread_timeout+0x84>)
   111fe:	f7ff fa9b 	bl	10738 <z_spin_unlock_valid>
   11202:	b940      	cbnz	r0, 11216 <z_thread_timeout+0x7a>
   11204:	4907      	ldr	r1, [pc, #28]	; (11224 <z_thread_timeout+0x88>)
   11206:	4808      	ldr	r0, [pc, #32]	; (11228 <z_thread_timeout+0x8c>)
   11208:	22ac      	movs	r2, #172	; 0xac
   1120a:	f003 fceb 	bl	14be4 <printk>
   1120e:	21ac      	movs	r1, #172	; 0xac
   11210:	4804      	ldr	r0, [pc, #16]	; (11224 <z_thread_timeout+0x88>)
   11212:	f003 fd72 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11216:	f386 8811 	msr	BASEPRI, r6
   1121a:	f3bf 8f6f 	isb	sy
}
   1121e:	bd70      	pop	{r4, r5, r6, pc}
   11220:	20000a60 	.word	0x20000a60
   11224:	00015b3f 	.word	0x00015b3f
   11228:	00015b65 	.word	0x00015b65

0001122c <unready_thread>:
{
   1122c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1122e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   11232:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   11234:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   11236:	7b43      	ldrb	r3, [r0, #13]
   11238:	da06      	bge.n	11248 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1123a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   1123e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11240:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11242:	4806      	ldr	r0, [pc, #24]	; (1125c <unready_thread+0x30>)
   11244:	f7ff fdbe 	bl	10dc4 <z_priq_dumb_remove>
	update_cache(thread == _current);
   11248:	4b05      	ldr	r3, [pc, #20]	; (11260 <unready_thread+0x34>)
   1124a:	6898      	ldr	r0, [r3, #8]
   1124c:	1b03      	subs	r3, r0, r4
   1124e:	4258      	negs	r0, r3
   11250:	4158      	adcs	r0, r3
}
   11252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   11256:	f7ff bdf1 	b.w	10e3c <update_cache>
   1125a:	bf00      	nop
   1125c:	20000a4c 	.word	0x20000a4c
   11260:	20000a2c 	.word	0x20000a2c

00011264 <add_to_waitq_locked>:
{
   11264:	b538      	push	{r3, r4, r5, lr}
   11266:	4604      	mov	r4, r0
   11268:	460d      	mov	r5, r1
	unready_thread(thread);
   1126a:	f7ff ffdf 	bl	1122c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1126e:	7b63      	ldrb	r3, [r4, #13]
   11270:	f043 0302 	orr.w	r3, r3, #2
   11274:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   11276:	b315      	cbz	r5, 112be <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11278:	4b17      	ldr	r3, [pc, #92]	; (112d8 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   1127a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1127c:	429c      	cmp	r4, r3
   1127e:	d108      	bne.n	11292 <add_to_waitq_locked+0x2e>
   11280:	4916      	ldr	r1, [pc, #88]	; (112dc <add_to_waitq_locked+0x78>)
   11282:	4817      	ldr	r0, [pc, #92]	; (112e0 <add_to_waitq_locked+0x7c>)
   11284:	22ba      	movs	r2, #186	; 0xba
   11286:	f003 fcad 	bl	14be4 <printk>
   1128a:	21ba      	movs	r1, #186	; 0xba
   1128c:	4813      	ldr	r0, [pc, #76]	; (112dc <add_to_waitq_locked+0x78>)
   1128e:	f003 fd34 	bl	14cfa <assert_post_action>
	return list->head == list;
   11292:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11294:	429d      	cmp	r5, r3
   11296:	bf08      	it	eq
   11298:	2300      	moveq	r3, #0
   1129a:	2b00      	cmp	r3, #0
   1129c:	bf38      	it	cc
   1129e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   112a0:	b19b      	cbz	r3, 112ca <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
   112a2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   112a6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   112aa:	4291      	cmp	r1, r2
   112ac:	d008      	beq.n	112c0 <add_to_waitq_locked+0x5c>
		return b2 - b1;
   112ae:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   112b0:	2a00      	cmp	r2, #0
   112b2:	dd05      	ble.n	112c0 <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
   112b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   112b6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   112ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   112bc:	605c      	str	r4, [r3, #4]
}
   112be:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   112c0:	686a      	ldr	r2, [r5, #4]
   112c2:	4293      	cmp	r3, r2
   112c4:	d001      	beq.n	112ca <add_to_waitq_locked+0x66>
   112c6:	681b      	ldr	r3, [r3, #0]
   112c8:	e7ea      	b.n	112a0 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
   112ca:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   112cc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   112d0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   112d2:	606c      	str	r4, [r5, #4]
   112d4:	e7f3      	b.n	112be <add_to_waitq_locked+0x5a>
   112d6:	bf00      	nop
   112d8:	20000160 	.word	0x20000160
   112dc:	00016d12 	.word	0x00016d12
   112e0:	00015b65 	.word	0x00015b65

000112e4 <pend>:
{
   112e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112e8:	4604      	mov	r4, r0
   112ea:	460d      	mov	r5, r1
   112ec:	4616      	mov	r6, r2
   112ee:	461f      	mov	r7, r3
	__asm__ volatile(
   112f0:	f04f 0320 	mov.w	r3, #32
   112f4:	f3ef 8811 	mrs	r8, BASEPRI
   112f8:	f383 8812 	msr	BASEPRI_MAX, r3
   112fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11300:	481a      	ldr	r0, [pc, #104]	; (1136c <pend+0x88>)
   11302:	f7ff fa0b 	bl	1071c <z_spin_lock_valid>
   11306:	b940      	cbnz	r0, 1131a <pend+0x36>
   11308:	4919      	ldr	r1, [pc, #100]	; (11370 <pend+0x8c>)
   1130a:	481a      	ldr	r0, [pc, #104]	; (11374 <pend+0x90>)
   1130c:	2281      	movs	r2, #129	; 0x81
   1130e:	f003 fc69 	bl	14be4 <printk>
   11312:	2181      	movs	r1, #129	; 0x81
   11314:	4816      	ldr	r0, [pc, #88]	; (11370 <pend+0x8c>)
   11316:	f003 fcf0 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   1131a:	4814      	ldr	r0, [pc, #80]	; (1136c <pend+0x88>)
   1131c:	f7ff fa1a 	bl	10754 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   11320:	4620      	mov	r0, r4
   11322:	4629      	mov	r1, r5
   11324:	f7ff ff9e 	bl	11264 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11328:	4810      	ldr	r0, [pc, #64]	; (1136c <pend+0x88>)
   1132a:	f7ff fa05 	bl	10738 <z_spin_unlock_valid>
   1132e:	b940      	cbnz	r0, 11342 <pend+0x5e>
   11330:	490f      	ldr	r1, [pc, #60]	; (11370 <pend+0x8c>)
   11332:	4810      	ldr	r0, [pc, #64]	; (11374 <pend+0x90>)
   11334:	22ac      	movs	r2, #172	; 0xac
   11336:	f003 fc55 	bl	14be4 <printk>
   1133a:	21ac      	movs	r1, #172	; 0xac
   1133c:	480c      	ldr	r0, [pc, #48]	; (11370 <pend+0x8c>)
   1133e:	f003 fcdc 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11342:	f388 8811 	msr	BASEPRI, r8
   11346:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1134a:	1c7b      	adds	r3, r7, #1
   1134c:	bf08      	it	eq
   1134e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   11352:	d008      	beq.n	11366 <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11354:	4632      	mov	r2, r6
   11356:	463b      	mov	r3, r7
   11358:	f104 0018 	add.w	r0, r4, #24
   1135c:	4906      	ldr	r1, [pc, #24]	; (11378 <pend+0x94>)
}
   1135e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11362:	f000 bbff 	b.w	11b64 <z_add_timeout>
   11366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1136a:	bf00      	nop
   1136c:	20000a60 	.word	0x20000a60
   11370:	00015b3f 	.word	0x00015b3f
   11374:	00015b65 	.word	0x00015b65
   11378:	0001119d 	.word	0x0001119d

0001137c <z_pend_curr>:
{
   1137c:	b538      	push	{r3, r4, r5, lr}
   1137e:	4605      	mov	r5, r0
	pending_current = _current;
   11380:	4b0d      	ldr	r3, [pc, #52]	; (113b8 <z_pend_curr+0x3c>)
{
   11382:	460c      	mov	r4, r1
	pending_current = _current;
   11384:	6898      	ldr	r0, [r3, #8]
   11386:	4b0d      	ldr	r3, [pc, #52]	; (113bc <z_pend_curr+0x40>)
{
   11388:	4611      	mov	r1, r2
	pending_current = _current;
   1138a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1138c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11390:	f7ff ffa8 	bl	112e4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11394:	4628      	mov	r0, r5
   11396:	f7ff f9cf 	bl	10738 <z_spin_unlock_valid>
   1139a:	b940      	cbnz	r0, 113ae <z_pend_curr+0x32>
   1139c:	4908      	ldr	r1, [pc, #32]	; (113c0 <z_pend_curr+0x44>)
   1139e:	4809      	ldr	r0, [pc, #36]	; (113c4 <z_pend_curr+0x48>)
   113a0:	22c3      	movs	r2, #195	; 0xc3
   113a2:	f003 fc1f 	bl	14be4 <printk>
   113a6:	21c3      	movs	r1, #195	; 0xc3
   113a8:	4805      	ldr	r0, [pc, #20]	; (113c0 <z_pend_curr+0x44>)
   113aa:	f003 fca6 	bl	14cfa <assert_post_action>
   113ae:	4620      	mov	r0, r4
}
   113b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   113b4:	f7fc bb50 	b.w	da58 <arch_swap>
   113b8:	20000a2c 	.word	0x20000a2c
   113bc:	20000a5c 	.word	0x20000a5c
   113c0:	00015b3f 	.word	0x00015b3f
   113c4:	00015b65 	.word	0x00015b65

000113c8 <z_set_prio>:
{
   113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113ca:	4604      	mov	r4, r0
   113cc:	460e      	mov	r6, r1
	__asm__ volatile(
   113ce:	f04f 0320 	mov.w	r3, #32
   113d2:	f3ef 8711 	mrs	r7, BASEPRI
   113d6:	f383 8812 	msr	BASEPRI_MAX, r3
   113da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   113de:	4837      	ldr	r0, [pc, #220]	; (114bc <z_set_prio+0xf4>)
   113e0:	f7ff f99c 	bl	1071c <z_spin_lock_valid>
   113e4:	b940      	cbnz	r0, 113f8 <z_set_prio+0x30>
   113e6:	4936      	ldr	r1, [pc, #216]	; (114c0 <z_set_prio+0xf8>)
   113e8:	4836      	ldr	r0, [pc, #216]	; (114c4 <z_set_prio+0xfc>)
   113ea:	2281      	movs	r2, #129	; 0x81
   113ec:	f003 fbfa 	bl	14be4 <printk>
   113f0:	2181      	movs	r1, #129	; 0x81
   113f2:	4833      	ldr	r0, [pc, #204]	; (114c0 <z_set_prio+0xf8>)
   113f4:	f003 fc81 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   113f8:	4830      	ldr	r0, [pc, #192]	; (114bc <z_set_prio+0xf4>)
   113fa:	f7ff f9ab 	bl	10754 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   113fe:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   11400:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11402:	06da      	lsls	r2, r3, #27
   11404:	d156      	bne.n	114b4 <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
   11406:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   11408:	2d00      	cmp	r5, #0
   1140a:	d153      	bne.n	114b4 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1140c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11410:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11412:	4621      	mov	r1, r4
   11414:	482c      	ldr	r0, [pc, #176]	; (114c8 <z_set_prio+0x100>)
   11416:	f7ff fcd5 	bl	10dc4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1141a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1141c:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1141e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11422:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11424:	4b29      	ldr	r3, [pc, #164]	; (114cc <z_set_prio+0x104>)
   11426:	429c      	cmp	r4, r3
   11428:	d108      	bne.n	1143c <z_set_prio+0x74>
   1142a:	4929      	ldr	r1, [pc, #164]	; (114d0 <z_set_prio+0x108>)
   1142c:	4825      	ldr	r0, [pc, #148]	; (114c4 <z_set_prio+0xfc>)
   1142e:	22ba      	movs	r2, #186	; 0xba
   11430:	f003 fbd8 	bl	14be4 <printk>
   11434:	21ba      	movs	r1, #186	; 0xba
   11436:	4826      	ldr	r0, [pc, #152]	; (114d0 <z_set_prio+0x108>)
   11438:	f003 fc5f 	bl	14cfa <assert_post_action>
	return list->head == list;
   1143c:	4925      	ldr	r1, [pc, #148]	; (114d4 <z_set_prio+0x10c>)
   1143e:	460b      	mov	r3, r1
   11440:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11444:	4298      	cmp	r0, r3
   11446:	bf18      	it	ne
   11448:	4605      	movne	r5, r0
   1144a:	2d00      	cmp	r5, #0
   1144c:	461a      	mov	r2, r3
   1144e:	462b      	mov	r3, r5
   11450:	bf38      	it	cc
   11452:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11454:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11456:	b343      	cbz	r3, 114aa <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
   11458:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1145c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   11460:	4286      	cmp	r6, r0
   11462:	d01e      	beq.n	114a2 <z_set_prio+0xda>
		return b2 - b1;
   11464:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   11466:	2800      	cmp	r0, #0
   11468:	dd1b      	ble.n	114a2 <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
   1146a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1146c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11470:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11472:	605c      	str	r4, [r3, #4]
			update_cache(1);
   11474:	2001      	movs	r0, #1
   11476:	f7ff fce1 	bl	10e3c <update_cache>
   1147a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1147c:	480f      	ldr	r0, [pc, #60]	; (114bc <z_set_prio+0xf4>)
   1147e:	f7ff f95b 	bl	10738 <z_spin_unlock_valid>
   11482:	b940      	cbnz	r0, 11496 <z_set_prio+0xce>
   11484:	490e      	ldr	r1, [pc, #56]	; (114c0 <z_set_prio+0xf8>)
   11486:	480f      	ldr	r0, [pc, #60]	; (114c4 <z_set_prio+0xfc>)
   11488:	22ac      	movs	r2, #172	; 0xac
   1148a:	f003 fbab 	bl	14be4 <printk>
   1148e:	21ac      	movs	r1, #172	; 0xac
   11490:	480b      	ldr	r0, [pc, #44]	; (114c0 <z_set_prio+0xf8>)
   11492:	f003 fc32 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11496:	f387 8811 	msr	BASEPRI, r7
   1149a:	f3bf 8f6f 	isb	sy
}
   1149e:	4620      	mov	r0, r4
   114a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   114a2:	42ab      	cmp	r3, r5
   114a4:	d001      	beq.n	114aa <z_set_prio+0xe2>
   114a6:	681b      	ldr	r3, [r3, #0]
   114a8:	e7d5      	b.n	11456 <z_set_prio+0x8e>
	node->prev = tail;
   114aa:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   114ae:	602c      	str	r4, [r5, #0]
	list->tail = node;
   114b0:	624c      	str	r4, [r1, #36]	; 0x24
}
   114b2:	e7df      	b.n	11474 <z_set_prio+0xac>
			thread->base.prio = prio;
   114b4:	73a6      	strb	r6, [r4, #14]
   114b6:	2400      	movs	r4, #0
   114b8:	e7e0      	b.n	1147c <z_set_prio+0xb4>
   114ba:	bf00      	nop
   114bc:	20000a60 	.word	0x20000a60
   114c0:	00015b3f 	.word	0x00015b3f
   114c4:	00015b65 	.word	0x00015b65
   114c8:	20000a4c 	.word	0x20000a4c
   114cc:	20000160 	.word	0x20000160
   114d0:	00016d12 	.word	0x00016d12
   114d4:	20000a2c 	.word	0x20000a2c

000114d8 <z_impl_k_thread_suspend>:
{
   114d8:	b570      	push	{r4, r5, r6, lr}
   114da:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   114dc:	3018      	adds	r0, #24
   114de:	f000 fbfb 	bl	11cd8 <z_abort_timeout>
	__asm__ volatile(
   114e2:	f04f 0320 	mov.w	r3, #32
   114e6:	f3ef 8611 	mrs	r6, BASEPRI
   114ea:	f383 8812 	msr	BASEPRI_MAX, r3
   114ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114f2:	4820      	ldr	r0, [pc, #128]	; (11574 <z_impl_k_thread_suspend+0x9c>)
   114f4:	f7ff f912 	bl	1071c <z_spin_lock_valid>
   114f8:	b940      	cbnz	r0, 1150c <z_impl_k_thread_suspend+0x34>
   114fa:	491f      	ldr	r1, [pc, #124]	; (11578 <z_impl_k_thread_suspend+0xa0>)
   114fc:	481f      	ldr	r0, [pc, #124]	; (1157c <z_impl_k_thread_suspend+0xa4>)
   114fe:	2281      	movs	r2, #129	; 0x81
   11500:	f003 fb70 	bl	14be4 <printk>
   11504:	2181      	movs	r1, #129	; 0x81
   11506:	481c      	ldr	r0, [pc, #112]	; (11578 <z_impl_k_thread_suspend+0xa0>)
   11508:	f003 fbf7 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   1150c:	4819      	ldr	r0, [pc, #100]	; (11574 <z_impl_k_thread_suspend+0x9c>)
   1150e:	f7ff f921 	bl	10754 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   11512:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   11516:	7b63      	ldrb	r3, [r4, #13]
   11518:	2a00      	cmp	r2, #0
   1151a:	da06      	bge.n	1152a <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1151c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   11520:	4621      	mov	r1, r4
   11522:	4817      	ldr	r0, [pc, #92]	; (11580 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11524:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11526:	f7ff fc4d 	bl	10dc4 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1152a:	4d16      	ldr	r5, [pc, #88]	; (11584 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1152c:	7b63      	ldrb	r3, [r4, #13]
   1152e:	68a8      	ldr	r0, [r5, #8]
   11530:	f043 0310 	orr.w	r3, r3, #16
   11534:	7363      	strb	r3, [r4, #13]
   11536:	1b03      	subs	r3, r0, r4
   11538:	4258      	negs	r0, r3
   1153a:	4158      	adcs	r0, r3
   1153c:	f7ff fc7e 	bl	10e3c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11540:	480c      	ldr	r0, [pc, #48]	; (11574 <z_impl_k_thread_suspend+0x9c>)
   11542:	f7ff f8f9 	bl	10738 <z_spin_unlock_valid>
   11546:	b940      	cbnz	r0, 1155a <z_impl_k_thread_suspend+0x82>
   11548:	490b      	ldr	r1, [pc, #44]	; (11578 <z_impl_k_thread_suspend+0xa0>)
   1154a:	480c      	ldr	r0, [pc, #48]	; (1157c <z_impl_k_thread_suspend+0xa4>)
   1154c:	22ac      	movs	r2, #172	; 0xac
   1154e:	f003 fb49 	bl	14be4 <printk>
   11552:	21ac      	movs	r1, #172	; 0xac
   11554:	4808      	ldr	r0, [pc, #32]	; (11578 <z_impl_k_thread_suspend+0xa0>)
   11556:	f003 fbd0 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   1155a:	f386 8811 	msr	BASEPRI, r6
   1155e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   11562:	68ab      	ldr	r3, [r5, #8]
   11564:	42a3      	cmp	r3, r4
   11566:	d103      	bne.n	11570 <z_impl_k_thread_suspend+0x98>
}
   11568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1156c:	f003 bee9 	b.w	15342 <z_reschedule_unlocked>
}
   11570:	bd70      	pop	{r4, r5, r6, pc}
   11572:	bf00      	nop
   11574:	20000a60 	.word	0x20000a60
   11578:	00015b3f 	.word	0x00015b3f
   1157c:	00015b65 	.word	0x00015b65
   11580:	20000a4c 	.word	0x20000a4c
   11584:	20000a2c 	.word	0x20000a2c

00011588 <k_sched_unlock>:
{
   11588:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1158a:	f04f 0320 	mov.w	r3, #32
   1158e:	f3ef 8511 	mrs	r5, BASEPRI
   11592:	f383 8812 	msr	BASEPRI_MAX, r3
   11596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1159a:	4824      	ldr	r0, [pc, #144]	; (1162c <k_sched_unlock+0xa4>)
   1159c:	f7ff f8be 	bl	1071c <z_spin_lock_valid>
   115a0:	b940      	cbnz	r0, 115b4 <k_sched_unlock+0x2c>
   115a2:	4923      	ldr	r1, [pc, #140]	; (11630 <k_sched_unlock+0xa8>)
   115a4:	4823      	ldr	r0, [pc, #140]	; (11634 <k_sched_unlock+0xac>)
   115a6:	2281      	movs	r2, #129	; 0x81
   115a8:	f003 fb1c 	bl	14be4 <printk>
   115ac:	2181      	movs	r1, #129	; 0x81
   115ae:	4820      	ldr	r0, [pc, #128]	; (11630 <k_sched_unlock+0xa8>)
   115b0:	f003 fba3 	bl	14cfa <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   115b4:	4c20      	ldr	r4, [pc, #128]	; (11638 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   115b6:	481d      	ldr	r0, [pc, #116]	; (1162c <k_sched_unlock+0xa4>)
   115b8:	f7ff f8cc 	bl	10754 <z_spin_lock_set_owner>
   115bc:	68a2      	ldr	r2, [r4, #8]
   115be:	7bd2      	ldrb	r2, [r2, #15]
   115c0:	b952      	cbnz	r2, 115d8 <k_sched_unlock+0x50>
   115c2:	491e      	ldr	r1, [pc, #120]	; (1163c <k_sched_unlock+0xb4>)
   115c4:	481b      	ldr	r0, [pc, #108]	; (11634 <k_sched_unlock+0xac>)
   115c6:	f240 3285 	movw	r2, #901	; 0x385
   115ca:	f003 fb0b 	bl	14be4 <printk>
   115ce:	f240 3185 	movw	r1, #901	; 0x385
   115d2:	481a      	ldr	r0, [pc, #104]	; (1163c <k_sched_unlock+0xb4>)
   115d4:	f003 fb91 	bl	14cfa <assert_post_action>
   115d8:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   115dc:	b153      	cbz	r3, 115f4 <k_sched_unlock+0x6c>
   115de:	4917      	ldr	r1, [pc, #92]	; (1163c <k_sched_unlock+0xb4>)
   115e0:	4814      	ldr	r0, [pc, #80]	; (11634 <k_sched_unlock+0xac>)
   115e2:	f240 3286 	movw	r2, #902	; 0x386
   115e6:	f003 fafd 	bl	14be4 <printk>
   115ea:	f240 3186 	movw	r1, #902	; 0x386
   115ee:	4813      	ldr	r0, [pc, #76]	; (1163c <k_sched_unlock+0xb4>)
   115f0:	f003 fb83 	bl	14cfa <assert_post_action>
		++_current->base.sched_locked;
   115f4:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   115f6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   115f8:	7bd3      	ldrb	r3, [r2, #15]
   115fa:	3301      	adds	r3, #1
   115fc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   115fe:	f7ff fc1d 	bl	10e3c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11602:	480a      	ldr	r0, [pc, #40]	; (1162c <k_sched_unlock+0xa4>)
   11604:	f7ff f898 	bl	10738 <z_spin_unlock_valid>
   11608:	b940      	cbnz	r0, 1161c <k_sched_unlock+0x94>
   1160a:	4909      	ldr	r1, [pc, #36]	; (11630 <k_sched_unlock+0xa8>)
   1160c:	4809      	ldr	r0, [pc, #36]	; (11634 <k_sched_unlock+0xac>)
   1160e:	22ac      	movs	r2, #172	; 0xac
   11610:	f003 fae8 	bl	14be4 <printk>
   11614:	21ac      	movs	r1, #172	; 0xac
   11616:	4806      	ldr	r0, [pc, #24]	; (11630 <k_sched_unlock+0xa8>)
   11618:	f003 fb6f 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   1161c:	f385 8811 	msr	BASEPRI, r5
   11620:	f3bf 8f6f 	isb	sy
}
   11624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   11628:	f003 be8b 	b.w	15342 <z_reschedule_unlocked>
   1162c:	20000a60 	.word	0x20000a60
   11630:	00015b3f 	.word	0x00015b3f
   11634:	00015b65 	.word	0x00015b65
   11638:	20000a2c 	.word	0x20000a2c
   1163c:	00016d12 	.word	0x00016d12

00011640 <z_unpend_first_thread>:
{
   11640:	b538      	push	{r3, r4, r5, lr}
   11642:	4604      	mov	r4, r0
	__asm__ volatile(
   11644:	f04f 0320 	mov.w	r3, #32
   11648:	f3ef 8511 	mrs	r5, BASEPRI
   1164c:	f383 8812 	msr	BASEPRI_MAX, r3
   11650:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11654:	4816      	ldr	r0, [pc, #88]	; (116b0 <z_unpend_first_thread+0x70>)
   11656:	f7ff f861 	bl	1071c <z_spin_lock_valid>
   1165a:	b940      	cbnz	r0, 1166e <z_unpend_first_thread+0x2e>
   1165c:	4915      	ldr	r1, [pc, #84]	; (116b4 <z_unpend_first_thread+0x74>)
   1165e:	4816      	ldr	r0, [pc, #88]	; (116b8 <z_unpend_first_thread+0x78>)
   11660:	2281      	movs	r2, #129	; 0x81
   11662:	f003 fabf 	bl	14be4 <printk>
   11666:	2181      	movs	r1, #129	; 0x81
   11668:	4812      	ldr	r0, [pc, #72]	; (116b4 <z_unpend_first_thread+0x74>)
   1166a:	f003 fb46 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   1166e:	4810      	ldr	r0, [pc, #64]	; (116b0 <z_unpend_first_thread+0x70>)
   11670:	f7ff f870 	bl	10754 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   11674:	4620      	mov	r0, r4
   11676:	f003 fe6e 	bl	15356 <z_priq_dumb_best>
		if (thread != NULL) {
   1167a:	4604      	mov	r4, r0
   1167c:	b128      	cbz	r0, 1168a <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   1167e:	f7ff fbbf 	bl	10e00 <unpend_thread_no_timeout>
   11682:	f104 0018 	add.w	r0, r4, #24
   11686:	f000 fb27 	bl	11cd8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1168a:	4809      	ldr	r0, [pc, #36]	; (116b0 <z_unpend_first_thread+0x70>)
   1168c:	f7ff f854 	bl	10738 <z_spin_unlock_valid>
   11690:	b940      	cbnz	r0, 116a4 <z_unpend_first_thread+0x64>
   11692:	4908      	ldr	r1, [pc, #32]	; (116b4 <z_unpend_first_thread+0x74>)
   11694:	4808      	ldr	r0, [pc, #32]	; (116b8 <z_unpend_first_thread+0x78>)
   11696:	22ac      	movs	r2, #172	; 0xac
   11698:	f003 faa4 	bl	14be4 <printk>
   1169c:	21ac      	movs	r1, #172	; 0xac
   1169e:	4805      	ldr	r0, [pc, #20]	; (116b4 <z_unpend_first_thread+0x74>)
   116a0:	f003 fb2b 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   116a4:	f385 8811 	msr	BASEPRI, r5
   116a8:	f3bf 8f6f 	isb	sy
}
   116ac:	4620      	mov	r0, r4
   116ae:	bd38      	pop	{r3, r4, r5, pc}
   116b0:	20000a60 	.word	0x20000a60
   116b4:	00015b3f 	.word	0x00015b3f
   116b8:	00015b65 	.word	0x00015b65

000116bc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   116bc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   116be:	4b04      	ldr	r3, [pc, #16]	; (116d0 <z_sched_init+0x14>)
   116c0:	4608      	mov	r0, r1
   116c2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   116c6:	e9c3 2208 	strd	r2, r2, [r3, #32]
   116ca:	f7ff ba9d 	b.w	10c08 <k_sched_time_slice_set>
   116ce:	bf00      	nop
   116d0:	20000a2c 	.word	0x20000a2c

000116d4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   116d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116d6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   116da:	b153      	cbz	r3, 116f2 <z_impl_k_yield+0x1e>
   116dc:	4939      	ldr	r1, [pc, #228]	; (117c4 <z_impl_k_yield+0xf0>)
   116de:	483a      	ldr	r0, [pc, #232]	; (117c8 <z_impl_k_yield+0xf4>)
   116e0:	f240 42dc 	movw	r2, #1244	; 0x4dc
   116e4:	f003 fa7e 	bl	14be4 <printk>
   116e8:	f240 41dc 	movw	r1, #1244	; 0x4dc
   116ec:	4835      	ldr	r0, [pc, #212]	; (117c4 <z_impl_k_yield+0xf0>)
   116ee:	f003 fb04 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   116f2:	f04f 0320 	mov.w	r3, #32
   116f6:	f3ef 8611 	mrs	r6, BASEPRI
   116fa:	f383 8812 	msr	BASEPRI_MAX, r3
   116fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11702:	4832      	ldr	r0, [pc, #200]	; (117cc <z_impl_k_yield+0xf8>)
   11704:	f7ff f80a 	bl	1071c <z_spin_lock_valid>
   11708:	b940      	cbnz	r0, 1171c <z_impl_k_yield+0x48>
   1170a:	4931      	ldr	r1, [pc, #196]	; (117d0 <z_impl_k_yield+0xfc>)
   1170c:	482e      	ldr	r0, [pc, #184]	; (117c8 <z_impl_k_yield+0xf4>)
   1170e:	2281      	movs	r2, #129	; 0x81
   11710:	f003 fa68 	bl	14be4 <printk>
   11714:	2181      	movs	r1, #129	; 0x81
   11716:	482e      	ldr	r0, [pc, #184]	; (117d0 <z_impl_k_yield+0xfc>)
   11718:	f003 faef 	bl	14cfa <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1171c:	4d2d      	ldr	r5, [pc, #180]	; (117d4 <z_impl_k_yield+0x100>)
	z_spin_lock_set_owner(l);
   1171e:	482b      	ldr	r0, [pc, #172]	; (117cc <z_impl_k_yield+0xf8>)
   11720:	f7ff f818 	bl	10754 <z_spin_lock_set_owner>
   11724:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   11726:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1172a:	7b4b      	ldrb	r3, [r1, #13]
   1172c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11730:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11732:	f7ff fb47 	bl	10dc4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   11736:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11738:	7b63      	ldrb	r3, [r4, #13]
   1173a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1173e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11740:	4b25      	ldr	r3, [pc, #148]	; (117d8 <z_impl_k_yield+0x104>)
   11742:	429c      	cmp	r4, r3
   11744:	d108      	bne.n	11758 <z_impl_k_yield+0x84>
   11746:	491f      	ldr	r1, [pc, #124]	; (117c4 <z_impl_k_yield+0xf0>)
   11748:	481f      	ldr	r0, [pc, #124]	; (117c8 <z_impl_k_yield+0xf4>)
   1174a:	22ba      	movs	r2, #186	; 0xba
   1174c:	f003 fa4a 	bl	14be4 <printk>
   11750:	21ba      	movs	r1, #186	; 0xba
   11752:	481c      	ldr	r0, [pc, #112]	; (117c4 <z_impl_k_yield+0xf0>)
   11754:	f003 fad1 	bl	14cfa <assert_post_action>
	return list->head == list;
   11758:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1175a:	4820      	ldr	r0, [pc, #128]	; (117dc <z_impl_k_yield+0x108>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1175c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1175e:	4283      	cmp	r3, r0
   11760:	bf08      	it	eq
   11762:	2300      	moveq	r3, #0
   11764:	2b00      	cmp	r3, #0
   11766:	bf38      	it	cc
   11768:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1176a:	b333      	cbz	r3, 117ba <z_impl_k_yield+0xe6>
	int32_t b1 = thread_1->base.prio;
   1176c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11770:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   11774:	4297      	cmp	r7, r2
   11776:	d01c      	beq.n	117b2 <z_impl_k_yield+0xde>
		return b2 - b1;
   11778:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1177a:	2a00      	cmp	r2, #0
   1177c:	dd19      	ble.n	117b2 <z_impl_k_yield+0xde>
	sys_dnode_t *const prev = successor->prev;
   1177e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11780:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11784:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11786:	605c      	str	r4, [r3, #4]
	update_cache(1);
   11788:	2001      	movs	r0, #1
   1178a:	f7ff fb57 	bl	10e3c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1178e:	480f      	ldr	r0, [pc, #60]	; (117cc <z_impl_k_yield+0xf8>)
   11790:	f7fe ffd2 	bl	10738 <z_spin_unlock_valid>
   11794:	b940      	cbnz	r0, 117a8 <z_impl_k_yield+0xd4>
   11796:	490e      	ldr	r1, [pc, #56]	; (117d0 <z_impl_k_yield+0xfc>)
   11798:	480b      	ldr	r0, [pc, #44]	; (117c8 <z_impl_k_yield+0xf4>)
   1179a:	22c3      	movs	r2, #195	; 0xc3
   1179c:	f003 fa22 	bl	14be4 <printk>
   117a0:	21c3      	movs	r1, #195	; 0xc3
   117a2:	480b      	ldr	r0, [pc, #44]	; (117d0 <z_impl_k_yield+0xfc>)
   117a4:	f003 faa9 	bl	14cfa <assert_post_action>
   117a8:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   117aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   117ae:	f7fc b953 	b.w	da58 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   117b2:	428b      	cmp	r3, r1
   117b4:	d001      	beq.n	117ba <z_impl_k_yield+0xe6>
   117b6:	681b      	ldr	r3, [r3, #0]
   117b8:	e7d7      	b.n	1176a <z_impl_k_yield+0x96>
	node->prev = tail;
   117ba:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   117be:	600c      	str	r4, [r1, #0]
	list->tail = node;
   117c0:	626c      	str	r4, [r5, #36]	; 0x24
}
   117c2:	e7e1      	b.n	11788 <z_impl_k_yield+0xb4>
   117c4:	00016d12 	.word	0x00016d12
   117c8:	00015b65 	.word	0x00015b65
   117cc:	20000a60 	.word	0x20000a60
   117d0:	00015b3f 	.word	0x00015b3f
   117d4:	20000a2c 	.word	0x20000a2c
   117d8:	20000160 	.word	0x20000160
   117dc:	20000a4c 	.word	0x20000a4c

000117e0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   117e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117e4:	4604      	mov	r4, r0
   117e6:	460d      	mov	r5, r1
   117e8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   117ec:	b153      	cbz	r3, 11804 <z_tick_sleep+0x24>
   117ee:	493c      	ldr	r1, [pc, #240]	; (118e0 <z_tick_sleep+0x100>)
   117f0:	483c      	ldr	r0, [pc, #240]	; (118e4 <z_tick_sleep+0x104>)
   117f2:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
   117f6:	f003 f9f5 	bl	14be4 <printk>
   117fa:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   117fe:	4838      	ldr	r0, [pc, #224]	; (118e0 <z_tick_sleep+0x100>)
   11800:	f003 fa7b 	bl	14cfa <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   11804:	ea54 0305 	orrs.w	r3, r4, r5
   11808:	d104      	bne.n	11814 <z_tick_sleep+0x34>
	z_impl_k_yield();
   1180a:	f7ff ff63 	bl	116d4 <z_impl_k_yield>
		k_yield();
		return 0;
   1180e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   11810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   11814:	f06f 0301 	mvn.w	r3, #1
   11818:	1b1e      	subs	r6, r3, r4
   1181a:	f04f 33ff 	mov.w	r3, #4294967295
   1181e:	eb63 0705 	sbc.w	r7, r3, r5
   11822:	2e01      	cmp	r6, #1
   11824:	f177 0300 	sbcs.w	r3, r7, #0
   11828:	da56      	bge.n	118d8 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1182a:	f003 fd9e 	bl	1536a <sys_clock_tick_get_32>
   1182e:	1906      	adds	r6, r0, r4
   11830:	f04f 0320 	mov.w	r3, #32
   11834:	f3ef 8811 	mrs	r8, BASEPRI
   11838:	f383 8812 	msr	BASEPRI_MAX, r3
   1183c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11840:	4829      	ldr	r0, [pc, #164]	; (118e8 <z_tick_sleep+0x108>)
   11842:	f7fe ff6b 	bl	1071c <z_spin_lock_valid>
   11846:	b940      	cbnz	r0, 1185a <z_tick_sleep+0x7a>
   11848:	4928      	ldr	r1, [pc, #160]	; (118ec <z_tick_sleep+0x10c>)
   1184a:	4826      	ldr	r0, [pc, #152]	; (118e4 <z_tick_sleep+0x104>)
   1184c:	2281      	movs	r2, #129	; 0x81
   1184e:	f003 f9c9 	bl	14be4 <printk>
   11852:	2181      	movs	r1, #129	; 0x81
   11854:	4825      	ldr	r0, [pc, #148]	; (118ec <z_tick_sleep+0x10c>)
   11856:	f003 fa50 	bl	14cfa <assert_post_action>
	pending_current = _current;
   1185a:	4f25      	ldr	r7, [pc, #148]	; (118f0 <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
   1185c:	4822      	ldr	r0, [pc, #136]	; (118e8 <z_tick_sleep+0x108>)
   1185e:	f7fe ff79 	bl	10754 <z_spin_lock_set_owner>
   11862:	68b8      	ldr	r0, [r7, #8]
   11864:	4b23      	ldr	r3, [pc, #140]	; (118f4 <z_tick_sleep+0x114>)
   11866:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   11868:	f7ff fce0 	bl	1122c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1186c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1186e:	4622      	mov	r2, r4
   11870:	462b      	mov	r3, r5
   11872:	3018      	adds	r0, #24
   11874:	4920      	ldr	r1, [pc, #128]	; (118f8 <z_tick_sleep+0x118>)
   11876:	f000 f975 	bl	11b64 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1187a:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1187c:	481a      	ldr	r0, [pc, #104]	; (118e8 <z_tick_sleep+0x108>)
   1187e:	7b53      	ldrb	r3, [r2, #13]
   11880:	f043 0310 	orr.w	r3, r3, #16
   11884:	7353      	strb	r3, [r2, #13]
   11886:	f7fe ff57 	bl	10738 <z_spin_unlock_valid>
   1188a:	b940      	cbnz	r0, 1189e <z_tick_sleep+0xbe>
   1188c:	4917      	ldr	r1, [pc, #92]	; (118ec <z_tick_sleep+0x10c>)
   1188e:	4815      	ldr	r0, [pc, #84]	; (118e4 <z_tick_sleep+0x104>)
   11890:	22c3      	movs	r2, #195	; 0xc3
   11892:	f003 f9a7 	bl	14be4 <printk>
   11896:	21c3      	movs	r1, #195	; 0xc3
   11898:	4814      	ldr	r0, [pc, #80]	; (118ec <z_tick_sleep+0x10c>)
   1189a:	f003 fa2e 	bl	14cfa <assert_post_action>
   1189e:	4640      	mov	r0, r8
   118a0:	f7fc f8da 	bl	da58 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   118a4:	68bb      	ldr	r3, [r7, #8]
   118a6:	7b5b      	ldrb	r3, [r3, #13]
   118a8:	06db      	lsls	r3, r3, #27
   118aa:	d50a      	bpl.n	118c2 <z_tick_sleep+0xe2>
   118ac:	490c      	ldr	r1, [pc, #48]	; (118e0 <z_tick_sleep+0x100>)
   118ae:	480d      	ldr	r0, [pc, #52]	; (118e4 <z_tick_sleep+0x104>)
   118b0:	f240 5219 	movw	r2, #1305	; 0x519
   118b4:	f003 f996 	bl	14be4 <printk>
   118b8:	f240 5119 	movw	r1, #1305	; 0x519
   118bc:	4808      	ldr	r0, [pc, #32]	; (118e0 <z_tick_sleep+0x100>)
   118be:	f003 fa1c 	bl	14cfa <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   118c2:	f003 fd52 	bl	1536a <sys_clock_tick_get_32>
   118c6:	1a30      	subs	r0, r6, r0
   118c8:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   118cc:	2801      	cmp	r0, #1
   118ce:	f171 0300 	sbcs.w	r3, r1, #0
   118d2:	bfb8      	it	lt
   118d4:	2000      	movlt	r0, #0
   118d6:	e79b      	b.n	11810 <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   118d8:	f06f 0601 	mvn.w	r6, #1
   118dc:	1b36      	subs	r6, r6, r4
   118de:	e7a7      	b.n	11830 <z_tick_sleep+0x50>
   118e0:	00016d12 	.word	0x00016d12
   118e4:	00015b65 	.word	0x00015b65
   118e8:	20000a60 	.word	0x20000a60
   118ec:	00015b3f 	.word	0x00015b3f
   118f0:	20000a2c 	.word	0x20000a2c
   118f4:	20000a5c 	.word	0x20000a5c
   118f8:	0001119d 	.word	0x0001119d

000118fc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   118fc:	b538      	push	{r3, r4, r5, lr}
   118fe:	4604      	mov	r4, r0
   11900:	460d      	mov	r5, r1
   11902:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   11906:	b153      	cbz	r3, 1191e <z_impl_k_sleep+0x22>
   11908:	4911      	ldr	r1, [pc, #68]	; (11950 <z_impl_k_sleep+0x54>)
   1190a:	4812      	ldr	r0, [pc, #72]	; (11954 <z_impl_k_sleep+0x58>)
   1190c:	f44f 62a5 	mov.w	r2, #1320	; 0x528
   11910:	f003 f968 	bl	14be4 <printk>
   11914:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   11918:	480d      	ldr	r0, [pc, #52]	; (11950 <z_impl_k_sleep+0x54>)
   1191a:	f003 f9ee 	bl	14cfa <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1191e:	1c6b      	adds	r3, r5, #1
   11920:	bf08      	it	eq
   11922:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   11926:	d106      	bne.n	11936 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   11928:	4b0b      	ldr	r3, [pc, #44]	; (11958 <z_impl_k_sleep+0x5c>)
   1192a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1192c:	f7ff fdd4 	bl	114d8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   11930:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   11934:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   11936:	4620      	mov	r0, r4
   11938:	4629      	mov	r1, r5
   1193a:	f7ff ff51 	bl	117e0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11942:	fb80 3403 	smull	r3, r4, r0, r3
   11946:	0bd8      	lsrs	r0, r3, #15
   11948:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   1194c:	e7f2      	b.n	11934 <z_impl_k_sleep+0x38>
   1194e:	bf00      	nop
   11950:	00016d12 	.word	0x00016d12
   11954:	00015b65 	.word	0x00015b65
   11958:	20000a2c 	.word	0x20000a2c

0001195c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1195c:	4b01      	ldr	r3, [pc, #4]	; (11964 <z_impl_z_current_get+0x8>)
   1195e:	6898      	ldr	r0, [r3, #8]
   11960:	4770      	bx	lr
   11962:	bf00      	nop
   11964:	20000a2c 	.word	0x20000a2c

00011968 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   11968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1196c:	4604      	mov	r4, r0
   1196e:	f04f 0320 	mov.w	r3, #32
   11972:	f3ef 8611 	mrs	r6, BASEPRI
   11976:	f383 8812 	msr	BASEPRI_MAX, r3
   1197a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1197e:	483e      	ldr	r0, [pc, #248]	; (11a78 <z_thread_abort+0x110>)
   11980:	f7fe fecc 	bl	1071c <z_spin_lock_valid>
   11984:	b940      	cbnz	r0, 11998 <z_thread_abort+0x30>
   11986:	493d      	ldr	r1, [pc, #244]	; (11a7c <z_thread_abort+0x114>)
   11988:	483d      	ldr	r0, [pc, #244]	; (11a80 <z_thread_abort+0x118>)
   1198a:	2281      	movs	r2, #129	; 0x81
   1198c:	f003 f92a 	bl	14be4 <printk>
   11990:	2181      	movs	r1, #129	; 0x81
   11992:	483a      	ldr	r0, [pc, #232]	; (11a7c <z_thread_abort+0x114>)
   11994:	f003 f9b1 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11998:	4837      	ldr	r0, [pc, #220]	; (11a78 <z_thread_abort+0x110>)
   1199a:	f7fe fedb 	bl	10754 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1199e:	7b63      	ldrb	r3, [r4, #13]
   119a0:	071a      	lsls	r2, r3, #28
   119a2:	d512      	bpl.n	119ca <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   119a4:	4834      	ldr	r0, [pc, #208]	; (11a78 <z_thread_abort+0x110>)
   119a6:	f7fe fec7 	bl	10738 <z_spin_unlock_valid>
   119aa:	b940      	cbnz	r0, 119be <z_thread_abort+0x56>
   119ac:	4933      	ldr	r1, [pc, #204]	; (11a7c <z_thread_abort+0x114>)
   119ae:	4834      	ldr	r0, [pc, #208]	; (11a80 <z_thread_abort+0x118>)
   119b0:	22ac      	movs	r2, #172	; 0xac
   119b2:	f003 f917 	bl	14be4 <printk>
   119b6:	21ac      	movs	r1, #172	; 0xac
   119b8:	4830      	ldr	r0, [pc, #192]	; (11a7c <z_thread_abort+0x114>)
   119ba:	f003 f99e 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   119be:	f386 8811 	msr	BASEPRI, r6
   119c2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   119c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   119ca:	f023 0220 	bic.w	r2, r3, #32
   119ce:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   119d2:	09d2      	lsrs	r2, r2, #7
   119d4:	d138      	bne.n	11a48 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   119d6:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   119d8:	68a3      	ldr	r3, [r4, #8]
   119da:	b113      	cbz	r3, 119e2 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   119dc:	4620      	mov	r0, r4
   119de:	f7ff fa0f 	bl	10e00 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   119e2:	f104 0018 	add.w	r0, r4, #24
   119e6:	f000 f977 	bl	11cd8 <z_abort_timeout>
   119ea:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   119ee:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   119f2:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   119f4:	42bd      	cmp	r5, r7
   119f6:	d000      	beq.n	119fa <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   119f8:	bb85      	cbnz	r5, 11a5c <z_thread_abort+0xf4>
		update_cache(1);
   119fa:	2001      	movs	r0, #1
   119fc:	f7ff fa1e 	bl	10e3c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   11a00:	4b20      	ldr	r3, [pc, #128]	; (11a84 <z_thread_abort+0x11c>)
   11a02:	689b      	ldr	r3, [r3, #8]
   11a04:	42a3      	cmp	r3, r4
   11a06:	d1cd      	bne.n	119a4 <z_thread_abort+0x3c>
   11a08:	f3ef 8305 	mrs	r3, IPSR
   11a0c:	2b00      	cmp	r3, #0
   11a0e:	d1c9      	bne.n	119a4 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11a10:	4819      	ldr	r0, [pc, #100]	; (11a78 <z_thread_abort+0x110>)
   11a12:	f7fe fe91 	bl	10738 <z_spin_unlock_valid>
   11a16:	b940      	cbnz	r0, 11a2a <z_thread_abort+0xc2>
   11a18:	4918      	ldr	r1, [pc, #96]	; (11a7c <z_thread_abort+0x114>)
   11a1a:	4819      	ldr	r0, [pc, #100]	; (11a80 <z_thread_abort+0x118>)
   11a1c:	22c3      	movs	r2, #195	; 0xc3
   11a1e:	f003 f8e1 	bl	14be4 <printk>
   11a22:	21c3      	movs	r1, #195	; 0xc3
   11a24:	4815      	ldr	r0, [pc, #84]	; (11a7c <z_thread_abort+0x114>)
   11a26:	f003 f968 	bl	14cfa <assert_post_action>
   11a2a:	4630      	mov	r0, r6
   11a2c:	f7fc f814 	bl	da58 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   11a30:	f240 624b 	movw	r2, #1611	; 0x64b
   11a34:	4914      	ldr	r1, [pc, #80]	; (11a88 <z_thread_abort+0x120>)
   11a36:	4812      	ldr	r0, [pc, #72]	; (11a80 <z_thread_abort+0x118>)
   11a38:	f003 f8d4 	bl	14be4 <printk>
   11a3c:	f240 614b 	movw	r1, #1611	; 0x64b
   11a40:	4811      	ldr	r0, [pc, #68]	; (11a88 <z_thread_abort+0x120>)
   11a42:	f003 f95a 	bl	14cfa <assert_post_action>
   11a46:	e7ad      	b.n	119a4 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11a48:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   11a4c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   11a50:	4621      	mov	r1, r4
   11a52:	480e      	ldr	r0, [pc, #56]	; (11a8c <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11a54:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   11a56:	f7ff f9b5 	bl	10dc4 <z_priq_dumb_remove>
}
   11a5a:	e7bd      	b.n	119d8 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   11a5c:	4628      	mov	r0, r5
   11a5e:	f7ff f9cf 	bl	10e00 <unpend_thread_no_timeout>
   11a62:	f105 0018 	add.w	r0, r5, #24
   11a66:	f000 f937 	bl	11cd8 <z_abort_timeout>
		ready_thread(thread);
   11a6a:	4628      	mov	r0, r5
   11a6c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   11a70:	f7ff face 	bl	11010 <ready_thread>
   11a74:	e7bd      	b.n	119f2 <z_thread_abort+0x8a>
   11a76:	bf00      	nop
   11a78:	20000a60 	.word	0x20000a60
   11a7c:	00015b3f 	.word	0x00015b3f
   11a80:	00015b65 	.word	0x00015b65
   11a84:	20000a2c 	.word	0x20000a2c
   11a88:	00016d12 	.word	0x00016d12
   11a8c:	20000a4c 	.word	0x20000a4c

00011a90 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   11a90:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   11a92:	4806      	ldr	r0, [pc, #24]	; (11aac <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   11a94:	4a06      	ldr	r2, [pc, #24]	; (11ab0 <z_data_copy+0x20>)
   11a96:	4907      	ldr	r1, [pc, #28]	; (11ab4 <z_data_copy+0x24>)
   11a98:	1a12      	subs	r2, r2, r0
   11a9a:	f003 fa18 	bl	14ece <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   11aa2:	4a05      	ldr	r2, [pc, #20]	; (11ab8 <z_data_copy+0x28>)
   11aa4:	4905      	ldr	r1, [pc, #20]	; (11abc <z_data_copy+0x2c>)
   11aa6:	4806      	ldr	r0, [pc, #24]	; (11ac0 <z_data_copy+0x30>)
   11aa8:	f003 ba11 	b.w	14ece <memcpy>
   11aac:	20000000 	.word	0x20000000
   11ab0:	2000015c 	.word	0x2000015c
   11ab4:	00016d90 	.word	0x00016d90
   11ab8:	00000000 	.word	0x00000000
   11abc:	00016d90 	.word	0x00016d90
   11ac0:	20000000 	.word	0x20000000

00011ac4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11ac4:	4b03      	ldr	r3, [pc, #12]	; (11ad4 <elapsed+0x10>)
   11ac6:	681b      	ldr	r3, [r3, #0]
   11ac8:	b90b      	cbnz	r3, 11ace <elapsed+0xa>
   11aca:	f7fd bbcf 	b.w	f26c <sys_clock_elapsed>
}
   11ace:	2000      	movs	r0, #0
   11ad0:	4770      	bx	lr
   11ad2:	bf00      	nop
   11ad4:	20000a6c 	.word	0x20000a6c

00011ad8 <remove_timeout>:
{
   11ad8:	b530      	push	{r4, r5, lr}
   11ada:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11adc:	b168      	cbz	r0, 11afa <remove_timeout+0x22>
   11ade:	4a0a      	ldr	r2, [pc, #40]	; (11b08 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   11ae0:	6852      	ldr	r2, [r2, #4]
   11ae2:	4290      	cmp	r0, r2
   11ae4:	d009      	beq.n	11afa <remove_timeout+0x22>
	if (next(t) != NULL) {
   11ae6:	b143      	cbz	r3, 11afa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   11ae8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   11aec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   11af0:	1912      	adds	r2, r2, r4
   11af2:	eb45 0101 	adc.w	r1, r5, r1
   11af6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   11afa:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   11afc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11afe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11b00:	2300      	movs	r3, #0
	node->prev = NULL;
   11b02:	e9c0 3300 	strd	r3, r3, [r0]
}
   11b06:	bd30      	pop	{r4, r5, pc}
   11b08:	20000080 	.word	0x20000080

00011b0c <next_timeout>:

static int32_t next_timeout(void)
{
   11b0c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   11b0e:	4b13      	ldr	r3, [pc, #76]	; (11b5c <next_timeout+0x50>)
   11b10:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b12:	429c      	cmp	r4, r3
   11b14:	bf08      	it	eq
   11b16:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   11b18:	f7ff ffd4 	bl	11ac4 <elapsed>
   11b1c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   11b1e:	b1bc      	cbz	r4, 11b50 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11b20:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   11b24:	1b40      	subs	r0, r0, r5
   11b26:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   11b2a:	2801      	cmp	r0, #1
   11b2c:	f171 0300 	sbcs.w	r3, r1, #0
   11b30:	db11      	blt.n	11b56 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11b32:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   11b36:	2300      	movs	r3, #0
   11b38:	4282      	cmp	r2, r0
   11b3a:	eb73 0401 	sbcs.w	r4, r3, r1
   11b3e:	da00      	bge.n	11b42 <next_timeout+0x36>
   11b40:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   11b42:	4b07      	ldr	r3, [pc, #28]	; (11b60 <next_timeout+0x54>)
   11b44:	691b      	ldr	r3, [r3, #16]
   11b46:	b113      	cbz	r3, 11b4e <next_timeout+0x42>
   11b48:	4298      	cmp	r0, r3
   11b4a:	bfa8      	it	ge
   11b4c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   11b4e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   11b50:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11b54:	e7f5      	b.n	11b42 <next_timeout+0x36>
   11b56:	2000      	movs	r0, #0
   11b58:	e7f3      	b.n	11b42 <next_timeout+0x36>
   11b5a:	bf00      	nop
   11b5c:	20000080 	.word	0x20000080
   11b60:	20000a2c 	.word	0x20000a2c

00011b64 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   11b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b68:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11b6a:	1c6b      	adds	r3, r5, #1
   11b6c:	bf08      	it	eq
   11b6e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   11b72:	4682      	mov	sl, r0
   11b74:	468b      	mov	fp, r1
   11b76:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11b78:	f000 809c 	beq.w	11cb4 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   11b7c:	6803      	ldr	r3, [r0, #0]
   11b7e:	b143      	cbz	r3, 11b92 <z_add_timeout+0x2e>
   11b80:	494e      	ldr	r1, [pc, #312]	; (11cbc <z_add_timeout+0x158>)
   11b82:	484f      	ldr	r0, [pc, #316]	; (11cc0 <z_add_timeout+0x15c>)
   11b84:	225d      	movs	r2, #93	; 0x5d
   11b86:	f003 f82d 	bl	14be4 <printk>
   11b8a:	215d      	movs	r1, #93	; 0x5d
   11b8c:	484b      	ldr	r0, [pc, #300]	; (11cbc <z_add_timeout+0x158>)
   11b8e:	f003 f8b4 	bl	14cfa <assert_post_action>
	to->fn = fn;
   11b92:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   11b96:	f04f 0320 	mov.w	r3, #32
   11b9a:	f3ef 8b11 	mrs	fp, BASEPRI
   11b9e:	f383 8812 	msr	BASEPRI_MAX, r3
   11ba2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11ba6:	4847      	ldr	r0, [pc, #284]	; (11cc4 <z_add_timeout+0x160>)
   11ba8:	f7fe fdb8 	bl	1071c <z_spin_lock_valid>
   11bac:	b940      	cbnz	r0, 11bc0 <z_add_timeout+0x5c>
   11bae:	4946      	ldr	r1, [pc, #280]	; (11cc8 <z_add_timeout+0x164>)
   11bb0:	4843      	ldr	r0, [pc, #268]	; (11cc0 <z_add_timeout+0x15c>)
   11bb2:	2281      	movs	r2, #129	; 0x81
   11bb4:	f003 f816 	bl	14be4 <printk>
   11bb8:	2181      	movs	r1, #129	; 0x81
   11bba:	4843      	ldr	r0, [pc, #268]	; (11cc8 <z_add_timeout+0x164>)
   11bbc:	f003 f89d 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11bc0:	4840      	ldr	r0, [pc, #256]	; (11cc4 <z_add_timeout+0x160>)
   11bc2:	f7fe fdc7 	bl	10754 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11bc6:	f06f 0301 	mvn.w	r3, #1
   11bca:	f04f 32ff 	mov.w	r2, #4294967295
   11bce:	ebb3 0804 	subs.w	r8, r3, r4
   11bd2:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11bd6:	f1b8 0f00 	cmp.w	r8, #0
   11bda:	f179 0100 	sbcs.w	r1, r9, #0
   11bde:	db1c      	blt.n	11c1a <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   11be0:	483a      	ldr	r0, [pc, #232]	; (11ccc <z_add_timeout+0x168>)
   11be2:	e9d0 1000 	ldrd	r1, r0, [r0]
   11be6:	1a5b      	subs	r3, r3, r1
   11be8:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   11bec:	1b1e      	subs	r6, r3, r4
   11bee:	eb62 0705 	sbc.w	r7, r2, r5
   11bf2:	2e01      	cmp	r6, #1
   11bf4:	f177 0300 	sbcs.w	r3, r7, #0
   11bf8:	bfbc      	itt	lt
   11bfa:	2601      	movlt	r6, #1
   11bfc:	2700      	movlt	r7, #0
   11bfe:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   11c02:	4a33      	ldr	r2, [pc, #204]	; (11cd0 <z_add_timeout+0x16c>)
   11c04:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11c08:	4293      	cmp	r3, r2
   11c0a:	d11d      	bne.n	11c48 <z_add_timeout+0xe4>
	node->prev = tail;
   11c0c:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   11c10:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   11c14:	f8c2 a004 	str.w	sl, [r2, #4]
}
   11c18:	e02c      	b.n	11c74 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   11c1a:	f7ff ff53 	bl	11ac4 <elapsed>
   11c1e:	1c63      	adds	r3, r4, #1
   11c20:	9300      	str	r3, [sp, #0]
   11c22:	f145 0300 	adc.w	r3, r5, #0
   11c26:	9301      	str	r3, [sp, #4]
   11c28:	e9dd 2300 	ldrd	r2, r3, [sp]
   11c2c:	1812      	adds	r2, r2, r0
   11c2e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   11c32:	e9ca 2304 	strd	r2, r3, [sl, #16]
   11c36:	e7e4      	b.n	11c02 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   11c38:	1be0      	subs	r0, r4, r7
   11c3a:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   11c3e:	42b3      	cmp	r3, r6
   11c40:	e9ca 0104 	strd	r0, r1, [sl, #16]
   11c44:	d0e2      	beq.n	11c0c <z_add_timeout+0xa8>
   11c46:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   11c48:	2b00      	cmp	r3, #0
   11c4a:	d0df      	beq.n	11c0c <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
   11c4c:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   11c50:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   11c54:	42bc      	cmp	r4, r7
   11c56:	eb75 0108 	sbcs.w	r1, r5, r8
   11c5a:	daed      	bge.n	11c38 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
   11c5c:	1b38      	subs	r0, r7, r4
   11c5e:	eb68 0105 	sbc.w	r1, r8, r5
   11c62:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   11c66:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   11c68:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   11c6c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   11c70:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   11c74:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11c76:	4293      	cmp	r3, r2
   11c78:	d00b      	beq.n	11c92 <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11c7a:	459a      	cmp	sl, r3
   11c7c:	d109      	bne.n	11c92 <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   11c7e:	f7ff ff45 	bl	11b0c <next_timeout>

			if (next_time == 0 ||
   11c82:	b118      	cbz	r0, 11c8c <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
   11c84:	4b13      	ldr	r3, [pc, #76]	; (11cd4 <z_add_timeout+0x170>)
			if (next_time == 0 ||
   11c86:	691b      	ldr	r3, [r3, #16]
   11c88:	4283      	cmp	r3, r0
   11c8a:	d002      	beq.n	11c92 <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
   11c8c:	2100      	movs	r1, #0
   11c8e:	f7fd fa65 	bl	f15c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11c92:	480c      	ldr	r0, [pc, #48]	; (11cc4 <z_add_timeout+0x160>)
   11c94:	f7fe fd50 	bl	10738 <z_spin_unlock_valid>
   11c98:	b940      	cbnz	r0, 11cac <z_add_timeout+0x148>
   11c9a:	490b      	ldr	r1, [pc, #44]	; (11cc8 <z_add_timeout+0x164>)
   11c9c:	4808      	ldr	r0, [pc, #32]	; (11cc0 <z_add_timeout+0x15c>)
   11c9e:	22ac      	movs	r2, #172	; 0xac
   11ca0:	f002 ffa0 	bl	14be4 <printk>
   11ca4:	21ac      	movs	r1, #172	; 0xac
   11ca6:	4808      	ldr	r0, [pc, #32]	; (11cc8 <z_add_timeout+0x164>)
   11ca8:	f003 f827 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11cac:	f38b 8811 	msr	BASEPRI, fp
   11cb0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   11cb4:	b003      	add	sp, #12
   11cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cba:	bf00      	nop
   11cbc:	00016d34 	.word	0x00016d34
   11cc0:	00015b65 	.word	0x00015b65
   11cc4:	20000a70 	.word	0x20000a70
   11cc8:	00015b3f 	.word	0x00015b3f
   11ccc:	20000260 	.word	0x20000260
   11cd0:	20000080 	.word	0x20000080
   11cd4:	20000a2c 	.word	0x20000a2c

00011cd8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   11cd8:	b538      	push	{r3, r4, r5, lr}
   11cda:	4604      	mov	r4, r0
	__asm__ volatile(
   11cdc:	f04f 0320 	mov.w	r3, #32
   11ce0:	f3ef 8511 	mrs	r5, BASEPRI
   11ce4:	f383 8812 	msr	BASEPRI_MAX, r3
   11ce8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11cec:	4815      	ldr	r0, [pc, #84]	; (11d44 <z_abort_timeout+0x6c>)
   11cee:	f7fe fd15 	bl	1071c <z_spin_lock_valid>
   11cf2:	b940      	cbnz	r0, 11d06 <z_abort_timeout+0x2e>
   11cf4:	4914      	ldr	r1, [pc, #80]	; (11d48 <z_abort_timeout+0x70>)
   11cf6:	4815      	ldr	r0, [pc, #84]	; (11d4c <z_abort_timeout+0x74>)
   11cf8:	2281      	movs	r2, #129	; 0x81
   11cfa:	f002 ff73 	bl	14be4 <printk>
   11cfe:	2181      	movs	r1, #129	; 0x81
   11d00:	4811      	ldr	r0, [pc, #68]	; (11d48 <z_abort_timeout+0x70>)
   11d02:	f002 fffa 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11d06:	480f      	ldr	r0, [pc, #60]	; (11d44 <z_abort_timeout+0x6c>)
   11d08:	f7fe fd24 	bl	10754 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   11d0c:	6823      	ldr	r3, [r4, #0]
   11d0e:	b1b3      	cbz	r3, 11d3e <z_abort_timeout+0x66>
			remove_timeout(to);
   11d10:	4620      	mov	r0, r4
   11d12:	f7ff fee1 	bl	11ad8 <remove_timeout>
			ret = 0;
   11d16:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d18:	480a      	ldr	r0, [pc, #40]	; (11d44 <z_abort_timeout+0x6c>)
   11d1a:	f7fe fd0d 	bl	10738 <z_spin_unlock_valid>
   11d1e:	b940      	cbnz	r0, 11d32 <z_abort_timeout+0x5a>
   11d20:	4909      	ldr	r1, [pc, #36]	; (11d48 <z_abort_timeout+0x70>)
   11d22:	480a      	ldr	r0, [pc, #40]	; (11d4c <z_abort_timeout+0x74>)
   11d24:	22ac      	movs	r2, #172	; 0xac
   11d26:	f002 ff5d 	bl	14be4 <printk>
   11d2a:	21ac      	movs	r1, #172	; 0xac
   11d2c:	4806      	ldr	r0, [pc, #24]	; (11d48 <z_abort_timeout+0x70>)
   11d2e:	f002 ffe4 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11d32:	f385 8811 	msr	BASEPRI, r5
   11d36:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   11d3a:	4620      	mov	r0, r4
   11d3c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   11d3e:	f06f 0415 	mvn.w	r4, #21
   11d42:	e7e9      	b.n	11d18 <z_abort_timeout+0x40>
   11d44:	20000a70 	.word	0x20000a70
   11d48:	00015b3f 	.word	0x00015b3f
   11d4c:	00015b65 	.word	0x00015b65

00011d50 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   11d50:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11d52:	f04f 0320 	mov.w	r3, #32
   11d56:	f3ef 8511 	mrs	r5, BASEPRI
   11d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   11d5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11d62:	4813      	ldr	r0, [pc, #76]	; (11db0 <z_get_next_timeout_expiry+0x60>)
   11d64:	f7fe fcda 	bl	1071c <z_spin_lock_valid>
   11d68:	b940      	cbnz	r0, 11d7c <z_get_next_timeout_expiry+0x2c>
   11d6a:	4912      	ldr	r1, [pc, #72]	; (11db4 <z_get_next_timeout_expiry+0x64>)
   11d6c:	4812      	ldr	r0, [pc, #72]	; (11db8 <z_get_next_timeout_expiry+0x68>)
   11d6e:	2281      	movs	r2, #129	; 0x81
   11d70:	f002 ff38 	bl	14be4 <printk>
   11d74:	2181      	movs	r1, #129	; 0x81
   11d76:	480f      	ldr	r0, [pc, #60]	; (11db4 <z_get_next_timeout_expiry+0x64>)
   11d78:	f002 ffbf 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11d7c:	480c      	ldr	r0, [pc, #48]	; (11db0 <z_get_next_timeout_expiry+0x60>)
   11d7e:	f7fe fce9 	bl	10754 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   11d82:	f7ff fec3 	bl	11b0c <next_timeout>
   11d86:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d88:	4809      	ldr	r0, [pc, #36]	; (11db0 <z_get_next_timeout_expiry+0x60>)
   11d8a:	f7fe fcd5 	bl	10738 <z_spin_unlock_valid>
   11d8e:	b940      	cbnz	r0, 11da2 <z_get_next_timeout_expiry+0x52>
   11d90:	4908      	ldr	r1, [pc, #32]	; (11db4 <z_get_next_timeout_expiry+0x64>)
   11d92:	4809      	ldr	r0, [pc, #36]	; (11db8 <z_get_next_timeout_expiry+0x68>)
   11d94:	22ac      	movs	r2, #172	; 0xac
   11d96:	f002 ff25 	bl	14be4 <printk>
   11d9a:	21ac      	movs	r1, #172	; 0xac
   11d9c:	4805      	ldr	r0, [pc, #20]	; (11db4 <z_get_next_timeout_expiry+0x64>)
   11d9e:	f002 ffac 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11da2:	f385 8811 	msr	BASEPRI, r5
   11da6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   11daa:	4620      	mov	r0, r4
   11dac:	bd38      	pop	{r3, r4, r5, pc}
   11dae:	bf00      	nop
   11db0:	20000a70 	.word	0x20000a70
   11db4:	00015b3f 	.word	0x00015b3f
   11db8:	00015b65 	.word	0x00015b65

00011dbc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   11dbc:	b570      	push	{r4, r5, r6, lr}
   11dbe:	4604      	mov	r4, r0
   11dc0:	460d      	mov	r5, r1
	__asm__ volatile(
   11dc2:	f04f 0320 	mov.w	r3, #32
   11dc6:	f3ef 8611 	mrs	r6, BASEPRI
   11dca:	f383 8812 	msr	BASEPRI_MAX, r3
   11dce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11dd2:	4816      	ldr	r0, [pc, #88]	; (11e2c <z_set_timeout_expiry+0x70>)
   11dd4:	f7fe fca2 	bl	1071c <z_spin_lock_valid>
   11dd8:	b940      	cbnz	r0, 11dec <z_set_timeout_expiry+0x30>
   11dda:	4915      	ldr	r1, [pc, #84]	; (11e30 <z_set_timeout_expiry+0x74>)
   11ddc:	4815      	ldr	r0, [pc, #84]	; (11e34 <z_set_timeout_expiry+0x78>)
   11dde:	2281      	movs	r2, #129	; 0x81
   11de0:	f002 ff00 	bl	14be4 <printk>
   11de4:	2181      	movs	r1, #129	; 0x81
   11de6:	4812      	ldr	r0, [pc, #72]	; (11e30 <z_set_timeout_expiry+0x74>)
   11de8:	f002 ff87 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11dec:	480f      	ldr	r0, [pc, #60]	; (11e2c <z_set_timeout_expiry+0x70>)
   11dee:	f7fe fcb1 	bl	10754 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   11df2:	f7ff fe8b 	bl	11b0c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   11df6:	2801      	cmp	r0, #1
   11df8:	dd05      	ble.n	11e06 <z_set_timeout_expiry+0x4a>
   11dfa:	42a0      	cmp	r0, r4
   11dfc:	db03      	blt.n	11e06 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   11dfe:	4629      	mov	r1, r5
   11e00:	4620      	mov	r0, r4
   11e02:	f7fd f9ab 	bl	f15c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11e06:	4809      	ldr	r0, [pc, #36]	; (11e2c <z_set_timeout_expiry+0x70>)
   11e08:	f7fe fc96 	bl	10738 <z_spin_unlock_valid>
   11e0c:	b940      	cbnz	r0, 11e20 <z_set_timeout_expiry+0x64>
   11e0e:	4908      	ldr	r1, [pc, #32]	; (11e30 <z_set_timeout_expiry+0x74>)
   11e10:	4808      	ldr	r0, [pc, #32]	; (11e34 <z_set_timeout_expiry+0x78>)
   11e12:	22ac      	movs	r2, #172	; 0xac
   11e14:	f002 fee6 	bl	14be4 <printk>
   11e18:	21ac      	movs	r1, #172	; 0xac
   11e1a:	4805      	ldr	r0, [pc, #20]	; (11e30 <z_set_timeout_expiry+0x74>)
   11e1c:	f002 ff6d 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11e20:	f386 8811 	msr	BASEPRI, r6
   11e24:	f3bf 8f6f 	isb	sy
		}
	}
}
   11e28:	bd70      	pop	{r4, r5, r6, pc}
   11e2a:	bf00      	nop
   11e2c:	20000a70 	.word	0x20000a70
   11e30:	00015b3f 	.word	0x00015b3f
   11e34:	00015b65 	.word	0x00015b65

00011e38 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   11e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e3c:	b085      	sub	sp, #20
   11e3e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   11e40:	f7ff f880 	bl	10f44 <z_time_slice>
	__asm__ volatile(
   11e44:	f04f 0320 	mov.w	r3, #32
   11e48:	f3ef 8911 	mrs	r9, BASEPRI
   11e4c:	f383 8812 	msr	BASEPRI_MAX, r3
   11e50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11e54:	484c      	ldr	r0, [pc, #304]	; (11f88 <sys_clock_announce+0x150>)
   11e56:	f7fe fc61 	bl	1071c <z_spin_lock_valid>
   11e5a:	b940      	cbnz	r0, 11e6e <sys_clock_announce+0x36>
   11e5c:	494b      	ldr	r1, [pc, #300]	; (11f8c <sys_clock_announce+0x154>)
   11e5e:	484c      	ldr	r0, [pc, #304]	; (11f90 <sys_clock_announce+0x158>)
   11e60:	2281      	movs	r2, #129	; 0x81
   11e62:	f002 febf 	bl	14be4 <printk>
   11e66:	2181      	movs	r1, #129	; 0x81
   11e68:	4848      	ldr	r0, [pc, #288]	; (11f8c <sys_clock_announce+0x154>)
   11e6a:	f002 ff46 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11e6e:	4f49      	ldr	r7, [pc, #292]	; (11f94 <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   11e70:	4e49      	ldr	r6, [pc, #292]	; (11f98 <sys_clock_announce+0x160>)
   11e72:	46bb      	mov	fp, r7
   11e74:	4844      	ldr	r0, [pc, #272]	; (11f88 <sys_clock_announce+0x150>)
	return list->head == list;
   11e76:	f8df a124 	ldr.w	sl, [pc, #292]	; 11f9c <sys_clock_announce+0x164>
   11e7a:	f7fe fc6b 	bl	10754 <z_spin_lock_set_owner>
   11e7e:	6034      	str	r4, [r6, #0]
   11e80:	f8d6 c000 	ldr.w	ip, [r6]
   11e84:	f8da 8000 	ldr.w	r8, [sl]
   11e88:	4662      	mov	r2, ip
   11e8a:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e8e:	45d0      	cmp	r8, sl
   11e90:	e9cd 3402 	strd	r3, r4, [sp, #8]
   11e94:	ea4f 73e2 	mov.w	r3, r2, asr #31
   11e98:	e9cd 2300 	strd	r2, r3, [sp]
   11e9c:	d011      	beq.n	11ec2 <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   11e9e:	f1b8 0f00 	cmp.w	r8, #0
   11ea2:	d00e      	beq.n	11ec2 <sys_clock_announce+0x8a>
   11ea4:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   11ea8:	e9dd 3400 	ldrd	r3, r4, [sp]
   11eac:	428b      	cmp	r3, r1
   11eae:	eb74 0302 	sbcs.w	r3, r4, r2
   11eb2:	da2a      	bge.n	11f0a <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   11eb4:	9b00      	ldr	r3, [sp, #0]
   11eb6:	1ac8      	subs	r0, r1, r3
   11eb8:	9b01      	ldr	r3, [sp, #4]
   11eba:	eb62 0103 	sbc.w	r1, r2, r3
   11ebe:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   11ec2:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   11ec4:	9b00      	ldr	r3, [sp, #0]
   11ec6:	9a02      	ldr	r2, [sp, #8]
   11ec8:	9903      	ldr	r1, [sp, #12]
   11eca:	189a      	adds	r2, r3, r2
   11ecc:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   11ece:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
   11ed0:	eb41 0303 	adc.w	r3, r1, r3
   11ed4:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   11ed8:	f7ff fe18 	bl	11b0c <next_timeout>
   11edc:	4621      	mov	r1, r4
   11ede:	f7fd f93d 	bl	f15c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ee2:	4829      	ldr	r0, [pc, #164]	; (11f88 <sys_clock_announce+0x150>)
   11ee4:	f7fe fc28 	bl	10738 <z_spin_unlock_valid>
   11ee8:	b940      	cbnz	r0, 11efc <sys_clock_announce+0xc4>
   11eea:	4928      	ldr	r1, [pc, #160]	; (11f8c <sys_clock_announce+0x154>)
   11eec:	4828      	ldr	r0, [pc, #160]	; (11f90 <sys_clock_announce+0x158>)
   11eee:	22ac      	movs	r2, #172	; 0xac
   11ef0:	f002 fe78 	bl	14be4 <printk>
   11ef4:	21ac      	movs	r1, #172	; 0xac
   11ef6:	4825      	ldr	r0, [pc, #148]	; (11f8c <sys_clock_announce+0x154>)
   11ef8:	f002 feff 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11efc:	f389 8811 	msr	BASEPRI, r9
   11f00:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11f04:	b005      	add	sp, #20
   11f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   11f0a:	2200      	movs	r2, #0
		curr_tick += dt;
   11f0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
   11f10:	2300      	movs	r3, #0
		curr_tick += dt;
   11f12:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
   11f14:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   11f18:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   11f1c:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   11f1e:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   11f22:	4640      	mov	r0, r8
		curr_tick += dt;
   11f24:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   11f28:	f7ff fdd6 	bl	11ad8 <remove_timeout>
   11f2c:	4816      	ldr	r0, [pc, #88]	; (11f88 <sys_clock_announce+0x150>)
   11f2e:	f7fe fc03 	bl	10738 <z_spin_unlock_valid>
   11f32:	b940      	cbnz	r0, 11f46 <sys_clock_announce+0x10e>
   11f34:	4915      	ldr	r1, [pc, #84]	; (11f8c <sys_clock_announce+0x154>)
   11f36:	4816      	ldr	r0, [pc, #88]	; (11f90 <sys_clock_announce+0x158>)
   11f38:	22ac      	movs	r2, #172	; 0xac
   11f3a:	f002 fe53 	bl	14be4 <printk>
   11f3e:	21ac      	movs	r1, #172	; 0xac
   11f40:	4812      	ldr	r0, [pc, #72]	; (11f8c <sys_clock_announce+0x154>)
   11f42:	f002 feda 	bl	14cfa <assert_post_action>
   11f46:	f389 8811 	msr	BASEPRI, r9
   11f4a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   11f4e:	4640      	mov	r0, r8
   11f50:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11f54:	4798      	blx	r3
	__asm__ volatile(
   11f56:	f04f 0320 	mov.w	r3, #32
   11f5a:	f3ef 8911 	mrs	r9, BASEPRI
   11f5e:	f383 8812 	msr	BASEPRI_MAX, r3
   11f62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11f66:	4808      	ldr	r0, [pc, #32]	; (11f88 <sys_clock_announce+0x150>)
   11f68:	f7fe fbd8 	bl	1071c <z_spin_lock_valid>
   11f6c:	b940      	cbnz	r0, 11f80 <sys_clock_announce+0x148>
   11f6e:	4907      	ldr	r1, [pc, #28]	; (11f8c <sys_clock_announce+0x154>)
   11f70:	4807      	ldr	r0, [pc, #28]	; (11f90 <sys_clock_announce+0x158>)
   11f72:	2281      	movs	r2, #129	; 0x81
   11f74:	f002 fe36 	bl	14be4 <printk>
   11f78:	2181      	movs	r1, #129	; 0x81
   11f7a:	4804      	ldr	r0, [pc, #16]	; (11f8c <sys_clock_announce+0x154>)
   11f7c:	f002 febd 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11f80:	4801      	ldr	r0, [pc, #4]	; (11f88 <sys_clock_announce+0x150>)
   11f82:	f7fe fbe7 	bl	10754 <z_spin_lock_set_owner>
	return k;
   11f86:	e77b      	b.n	11e80 <sys_clock_announce+0x48>
   11f88:	20000a70 	.word	0x20000a70
   11f8c:	00015b3f 	.word	0x00015b3f
   11f90:	00015b65 	.word	0x00015b65
   11f94:	20000260 	.word	0x20000260
   11f98:	20000a6c 	.word	0x20000a6c
   11f9c:	20000080 	.word	0x20000080

00011fa0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   11fa0:	b570      	push	{r4, r5, r6, lr}
   11fa2:	f04f 0320 	mov.w	r3, #32
   11fa6:	f3ef 8611 	mrs	r6, BASEPRI
   11faa:	f383 8812 	msr	BASEPRI_MAX, r3
   11fae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11fb2:	4816      	ldr	r0, [pc, #88]	; (1200c <sys_clock_tick_get+0x6c>)
   11fb4:	f7fe fbb2 	bl	1071c <z_spin_lock_valid>
   11fb8:	b940      	cbnz	r0, 11fcc <sys_clock_tick_get+0x2c>
   11fba:	4915      	ldr	r1, [pc, #84]	; (12010 <sys_clock_tick_get+0x70>)
   11fbc:	4815      	ldr	r0, [pc, #84]	; (12014 <sys_clock_tick_get+0x74>)
   11fbe:	2281      	movs	r2, #129	; 0x81
   11fc0:	f002 fe10 	bl	14be4 <printk>
   11fc4:	2181      	movs	r1, #129	; 0x81
   11fc6:	4812      	ldr	r0, [pc, #72]	; (12010 <sys_clock_tick_get+0x70>)
   11fc8:	f002 fe97 	bl	14cfa <assert_post_action>
	z_spin_lock_set_owner(l);
   11fcc:	480f      	ldr	r0, [pc, #60]	; (1200c <sys_clock_tick_get+0x6c>)
   11fce:	f7fe fbc1 	bl	10754 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   11fd2:	f7fd f94b 	bl	f26c <sys_clock_elapsed>
   11fd6:	4b10      	ldr	r3, [pc, #64]	; (12018 <sys_clock_tick_get+0x78>)
   11fd8:	e9d3 4500 	ldrd	r4, r5, [r3]
   11fdc:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11fde:	480b      	ldr	r0, [pc, #44]	; (1200c <sys_clock_tick_get+0x6c>)
   11fe0:	f145 0500 	adc.w	r5, r5, #0
   11fe4:	f7fe fba8 	bl	10738 <z_spin_unlock_valid>
   11fe8:	b940      	cbnz	r0, 11ffc <sys_clock_tick_get+0x5c>
   11fea:	4909      	ldr	r1, [pc, #36]	; (12010 <sys_clock_tick_get+0x70>)
   11fec:	4809      	ldr	r0, [pc, #36]	; (12014 <sys_clock_tick_get+0x74>)
   11fee:	22ac      	movs	r2, #172	; 0xac
   11ff0:	f002 fdf8 	bl	14be4 <printk>
   11ff4:	21ac      	movs	r1, #172	; 0xac
   11ff6:	4806      	ldr	r0, [pc, #24]	; (12010 <sys_clock_tick_get+0x70>)
   11ff8:	f002 fe7f 	bl	14cfa <assert_post_action>
	__asm__ volatile(
   11ffc:	f386 8811 	msr	BASEPRI, r6
   12000:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   12004:	4620      	mov	r0, r4
   12006:	4629      	mov	r1, r5
   12008:	bd70      	pop	{r4, r5, r6, pc}
   1200a:	bf00      	nop
   1200c:	20000a70 	.word	0x20000a70
   12010:	00015b3f 	.word	0x00015b3f
   12014:	00015b65 	.word	0x00015b65
   12018:	20000260 	.word	0x20000260

0001201c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1201c:	4a02      	ldr	r2, [pc, #8]	; (12028 <boot_banner+0xc>)
   1201e:	4903      	ldr	r1, [pc, #12]	; (1202c <boot_banner+0x10>)
   12020:	4803      	ldr	r0, [pc, #12]	; (12030 <boot_banner+0x14>)
   12022:	f002 bddf 	b.w	14be4 <printk>
   12026:	bf00      	nop
   12028:	00015b88 	.word	0x00015b88
   1202c:	00016d58 	.word	0x00016d58
   12030:	00016d65 	.word	0x00016d65

00012034 <nrf_cc3xx_platform_init>:
   12034:	b510      	push	{r4, lr}
   12036:	4c0c      	ldr	r4, [pc, #48]	; (12068 <nrf_cc3xx_platform_init+0x34>)
   12038:	6823      	ldr	r3, [r4, #0]
   1203a:	b113      	cbz	r3, 12042 <nrf_cc3xx_platform_init+0xe>
   1203c:	4b0b      	ldr	r3, [pc, #44]	; (1206c <nrf_cc3xx_platform_init+0x38>)
   1203e:	681b      	ldr	r3, [r3, #0]
   12040:	b92b      	cbnz	r3, 1204e <nrf_cc3xx_platform_init+0x1a>
   12042:	f000 fe73 	bl	12d2c <CC_LibInit>
   12046:	b930      	cbnz	r0, 12056 <nrf_cc3xx_platform_init+0x22>
   12048:	2201      	movs	r2, #1
   1204a:	4b08      	ldr	r3, [pc, #32]	; (1206c <nrf_cc3xx_platform_init+0x38>)
   1204c:	601a      	str	r2, [r3, #0]
   1204e:	2301      	movs	r3, #1
   12050:	2000      	movs	r0, #0
   12052:	6023      	str	r3, [r4, #0]
   12054:	bd10      	pop	{r4, pc}
   12056:	3801      	subs	r0, #1
   12058:	2806      	cmp	r0, #6
   1205a:	d901      	bls.n	12060 <nrf_cc3xx_platform_init+0x2c>
   1205c:	4804      	ldr	r0, [pc, #16]	; (12070 <nrf_cc3xx_platform_init+0x3c>)
   1205e:	bd10      	pop	{r4, pc}
   12060:	4b04      	ldr	r3, [pc, #16]	; (12074 <nrf_cc3xx_platform_init+0x40>)
   12062:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12066:	bd10      	pop	{r4, pc}
   12068:	20000a74 	.word	0x20000a74
   1206c:	20000a78 	.word	0x20000a78
   12070:	ffff8ffe 	.word	0xffff8ffe
   12074:	00015984 	.word	0x00015984

00012078 <nrf_cc3xx_platform_abort>:
   12078:	f3bf 8f4f 	dsb	sy
   1207c:	4905      	ldr	r1, [pc, #20]	; (12094 <nrf_cc3xx_platform_abort+0x1c>)
   1207e:	4b06      	ldr	r3, [pc, #24]	; (12098 <nrf_cc3xx_platform_abort+0x20>)
   12080:	68ca      	ldr	r2, [r1, #12]
   12082:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12086:	4313      	orrs	r3, r2
   12088:	60cb      	str	r3, [r1, #12]
   1208a:	f3bf 8f4f 	dsb	sy
   1208e:	bf00      	nop
   12090:	e7fd      	b.n	1208e <nrf_cc3xx_platform_abort+0x16>
   12092:	bf00      	nop
   12094:	e000ed00 	.word	0xe000ed00
   12098:	05fa0004 	.word	0x05fa0004

0001209c <CC_PalAbort>:
   1209c:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   120a0:	2100      	movs	r1, #0
   120a2:	b430      	push	{r4, r5}
   120a4:	4a06      	ldr	r2, [pc, #24]	; (120c0 <CC_PalAbort+0x24>)
   120a6:	4d07      	ldr	r5, [pc, #28]	; (120c4 <CC_PalAbort+0x28>)
   120a8:	4c07      	ldr	r4, [pc, #28]	; (120c8 <CC_PalAbort+0x2c>)
   120aa:	602b      	str	r3, [r5, #0]
   120ac:	6013      	str	r3, [r2, #0]
   120ae:	6023      	str	r3, [r4, #0]
   120b0:	4a06      	ldr	r2, [pc, #24]	; (120cc <CC_PalAbort+0x30>)
   120b2:	4c07      	ldr	r4, [pc, #28]	; (120d0 <CC_PalAbort+0x34>)
   120b4:	60eb      	str	r3, [r5, #12]
   120b6:	6863      	ldr	r3, [r4, #4]
   120b8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   120bc:	bc30      	pop	{r4, r5}
   120be:	4718      	bx	r3
   120c0:	50841404 	.word	0x50841404
   120c4:	50841400 	.word	0x50841400
   120c8:	50841408 	.word	0x50841408
   120cc:	50840000 	.word	0x50840000
   120d0:	20000088 	.word	0x20000088

000120d4 <nrf_cc3xx_platform_set_abort>:
   120d4:	4b02      	ldr	r3, [pc, #8]	; (120e0 <nrf_cc3xx_platform_set_abort+0xc>)
   120d6:	e9d0 1200 	ldrd	r1, r2, [r0]
   120da:	e9c3 1200 	strd	r1, r2, [r3]
   120de:	4770      	bx	lr
   120e0:	20000088 	.word	0x20000088

000120e4 <nrf_cc3xx_platform_ctr_drbg_init>:
   120e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   120e8:	4c15      	ldr	r4, [pc, #84]	; (12140 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   120ea:	f8df 805c 	ldr.w	r8, [pc, #92]	; 12148 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   120ee:	2800      	cmp	r0, #0
   120f0:	bf18      	it	ne
   120f2:	4604      	movne	r4, r0
   120f4:	6820      	ldr	r0, [r4, #0]
   120f6:	b083      	sub	sp, #12
   120f8:	4540      	cmp	r0, r8
   120fa:	d01d      	beq.n	12138 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   120fc:	4616      	mov	r6, r2
   120fe:	460d      	mov	r5, r1
   12100:	4620      	mov	r0, r4
   12102:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   12106:	f104 0904 	add.w	r9, r4, #4
   1210a:	f000 f8d3 	bl	122b4 <mbedtls_platform_zeroize>
   1210e:	f504 778c 	add.w	r7, r4, #280	; 0x118
   12112:	4648      	mov	r0, r9
   12114:	f000 fcf2 	bl	12afc <cc_mbedtls_entropy_init>
   12118:	4638      	mov	r0, r7
   1211a:	f000 fb1d 	bl	12758 <cc_mbedtls_ctr_drbg_init>
   1211e:	464a      	mov	r2, r9
   12120:	4638      	mov	r0, r7
   12122:	462b      	mov	r3, r5
   12124:	4907      	ldr	r1, [pc, #28]	; (12144 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   12126:	9600      	str	r6, [sp, #0]
   12128:	f000 fb2c 	bl	12784 <cc_mbedtls_ctr_drbg_seed>
   1212c:	b908      	cbnz	r0, 12132 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1212e:	f8c4 8000 	str.w	r8, [r4]
   12132:	b003      	add	sp, #12
   12134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12138:	2000      	movs	r0, #0
   1213a:	b003      	add	sp, #12
   1213c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12140:	20001460 	.word	0x20001460
   12144:	00012b7d 	.word	0x00012b7d
   12148:	5ac9bca5 	.word	0x5ac9bca5

0001214c <nrf_cc3xx_platform_ctr_drbg_get>:
   1214c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1214e:	4c0d      	ldr	r4, [pc, #52]	; (12184 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   12150:	4e0d      	ldr	r6, [pc, #52]	; (12188 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   12152:	2800      	cmp	r0, #0
   12154:	bf08      	it	eq
   12156:	4620      	moveq	r0, r4
   12158:	6807      	ldr	r7, [r0, #0]
   1215a:	b083      	sub	sp, #12
   1215c:	42b7      	cmp	r7, r6
   1215e:	d10e      	bne.n	1217e <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   12160:	2600      	movs	r6, #0
   12162:	461d      	mov	r5, r3
   12164:	f500 708c 	add.w	r0, r0, #280	; 0x118
   12168:	4633      	mov	r3, r6
   1216a:	9600      	str	r6, [sp, #0]
   1216c:	4614      	mov	r4, r2
   1216e:	f000 fb57 	bl	12820 <cc_mbedtls_ctr_drbg_random_with_add>
   12172:	2800      	cmp	r0, #0
   12174:	bf18      	it	ne
   12176:	4634      	movne	r4, r6
   12178:	602c      	str	r4, [r5, #0]
   1217a:	b003      	add	sp, #12
   1217c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1217e:	4803      	ldr	r0, [pc, #12]	; (1218c <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   12180:	e7fb      	b.n	1217a <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   12182:	bf00      	nop
   12184:	20001460 	.word	0x20001460
   12188:	5ac9bca5 	.word	0x5ac9bca5
   1218c:	ffff8fe8 	.word	0xffff8fe8

00012190 <mutex_free>:
   12190:	b510      	push	{r4, lr}
   12192:	4604      	mov	r4, r0
   12194:	b130      	cbz	r0, 121a4 <mutex_free+0x14>
   12196:	6863      	ldr	r3, [r4, #4]
   12198:	06db      	lsls	r3, r3, #27
   1219a:	d502      	bpl.n	121a2 <mutex_free+0x12>
   1219c:	2300      	movs	r3, #0
   1219e:	6023      	str	r3, [r4, #0]
   121a0:	6063      	str	r3, [r4, #4]
   121a2:	bd10      	pop	{r4, pc}
   121a4:	4b02      	ldr	r3, [pc, #8]	; (121b0 <mutex_free+0x20>)
   121a6:	4803      	ldr	r0, [pc, #12]	; (121b4 <mutex_free+0x24>)
   121a8:	685b      	ldr	r3, [r3, #4]
   121aa:	4798      	blx	r3
   121ac:	e7f3      	b.n	12196 <mutex_free+0x6>
   121ae:	bf00      	nop
   121b0:	20000088 	.word	0x20000088
   121b4:	000159a0 	.word	0x000159a0

000121b8 <mutex_unlock>:
   121b8:	b168      	cbz	r0, 121d6 <mutex_unlock+0x1e>
   121ba:	6843      	ldr	r3, [r0, #4]
   121bc:	b13b      	cbz	r3, 121ce <mutex_unlock+0x16>
   121be:	06db      	lsls	r3, r3, #27
   121c0:	d507      	bpl.n	121d2 <mutex_unlock+0x1a>
   121c2:	f3bf 8f5f 	dmb	sy
   121c6:	2300      	movs	r3, #0
   121c8:	6003      	str	r3, [r0, #0]
   121ca:	4618      	mov	r0, r3
   121cc:	4770      	bx	lr
   121ce:	4803      	ldr	r0, [pc, #12]	; (121dc <mutex_unlock+0x24>)
   121d0:	4770      	bx	lr
   121d2:	4803      	ldr	r0, [pc, #12]	; (121e0 <mutex_unlock+0x28>)
   121d4:	4770      	bx	lr
   121d6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   121da:	4770      	bx	lr
   121dc:	ffff8fea 	.word	0xffff8fea
   121e0:	ffff8fe9 	.word	0xffff8fe9

000121e4 <mutex_init>:
   121e4:	b510      	push	{r4, lr}
   121e6:	4604      	mov	r4, r0
   121e8:	b120      	cbz	r0, 121f4 <mutex_init+0x10>
   121ea:	2200      	movs	r2, #0
   121ec:	2311      	movs	r3, #17
   121ee:	6022      	str	r2, [r4, #0]
   121f0:	6063      	str	r3, [r4, #4]
   121f2:	bd10      	pop	{r4, pc}
   121f4:	4801      	ldr	r0, [pc, #4]	; (121fc <mutex_init+0x18>)
   121f6:	f7ff ff51 	bl	1209c <CC_PalAbort>
   121fa:	e7f6      	b.n	121ea <mutex_init+0x6>
   121fc:	000159c8 	.word	0x000159c8

00012200 <mutex_lock>:
   12200:	b1a0      	cbz	r0, 1222c <mutex_lock+0x2c>
   12202:	6843      	ldr	r3, [r0, #4]
   12204:	b183      	cbz	r3, 12228 <mutex_lock+0x28>
   12206:	06db      	lsls	r3, r3, #27
   12208:	d50c      	bpl.n	12224 <mutex_lock+0x24>
   1220a:	2201      	movs	r2, #1
   1220c:	e8d0 3fef 	ldaex	r3, [r0]
   12210:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12214:	2900      	cmp	r1, #0
   12216:	d1f9      	bne.n	1220c <mutex_lock+0xc>
   12218:	2b01      	cmp	r3, #1
   1221a:	d0f7      	beq.n	1220c <mutex_lock+0xc>
   1221c:	f3bf 8f5f 	dmb	sy
   12220:	2000      	movs	r0, #0
   12222:	4770      	bx	lr
   12224:	4803      	ldr	r0, [pc, #12]	; (12234 <mutex_lock+0x34>)
   12226:	4770      	bx	lr
   12228:	4803      	ldr	r0, [pc, #12]	; (12238 <mutex_lock+0x38>)
   1222a:	4770      	bx	lr
   1222c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12230:	4770      	bx	lr
   12232:	bf00      	nop
   12234:	ffff8fe9 	.word	0xffff8fe9
   12238:	ffff8fea 	.word	0xffff8fea

0001223c <nrf_cc3xx_platform_set_mutexes>:
   1223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12240:	4c14      	ldr	r4, [pc, #80]	; (12294 <nrf_cc3xx_platform_set_mutexes+0x58>)
   12242:	6802      	ldr	r2, [r0, #0]
   12244:	68c3      	ldr	r3, [r0, #12]
   12246:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   1224a:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1224e:	e9c4 2500 	strd	r2, r5, [r4]
   12252:	4b11      	ldr	r3, [pc, #68]	; (12298 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   12254:	680e      	ldr	r6, [r1, #0]
   12256:	6848      	ldr	r0, [r1, #4]
   12258:	4d10      	ldr	r5, [pc, #64]	; (1229c <nrf_cc3xx_platform_set_mutexes+0x60>)
   1225a:	e9c3 6000 	strd	r6, r0, [r3]
   1225e:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   12262:	6908      	ldr	r0, [r1, #16]
   12264:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   12268:	e9c3 7602 	strd	r7, r6, [r3, #8]
   1226c:	6118      	str	r0, [r3, #16]
   1226e:	06cb      	lsls	r3, r1, #27
   12270:	d50d      	bpl.n	1228e <nrf_cc3xx_platform_set_mutexes+0x52>
   12272:	2300      	movs	r3, #0
   12274:	f505 7088 	add.w	r0, r5, #272	; 0x110
   12278:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1227c:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   12280:	4790      	blx	r2
   12282:	6823      	ldr	r3, [r4, #0]
   12284:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   12288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1228c:	4718      	bx	r3
   1228e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12292:	bf00      	nop
   12294:	20000098 	.word	0x20000098
   12298:	200000a8 	.word	0x200000a8
   1229c:	20001460 	.word	0x20001460

000122a0 <mbedtls_zeroize_internal>:
   122a0:	b138      	cbz	r0, 122b2 <mbedtls_zeroize_internal+0x12>
   122a2:	b131      	cbz	r1, 122b2 <mbedtls_zeroize_internal+0x12>
   122a4:	2200      	movs	r2, #0
   122a6:	4401      	add	r1, r0
   122a8:	4603      	mov	r3, r0
   122aa:	3001      	adds	r0, #1
   122ac:	4281      	cmp	r1, r0
   122ae:	701a      	strb	r2, [r3, #0]
   122b0:	d1fa      	bne.n	122a8 <mbedtls_zeroize_internal+0x8>
   122b2:	4770      	bx	lr

000122b4 <mbedtls_platform_zeroize>:
   122b4:	b138      	cbz	r0, 122c6 <mbedtls_platform_zeroize+0x12>
   122b6:	b131      	cbz	r1, 122c6 <mbedtls_platform_zeroize+0x12>
   122b8:	2200      	movs	r2, #0
   122ba:	4401      	add	r1, r0
   122bc:	4603      	mov	r3, r0
   122be:	3001      	adds	r0, #1
   122c0:	4288      	cmp	r0, r1
   122c2:	701a      	strb	r2, [r3, #0]
   122c4:	d1fa      	bne.n	122bc <mbedtls_platform_zeroize+0x8>
   122c6:	4770      	bx	lr

000122c8 <block_cipher_df>:
   122c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122cc:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   122d0:	b0af      	sub	sp, #188	; 0xbc
   122d2:	f200 812c 	bhi.w	1252e <block_cipher_df+0x266>
   122d6:	f8df 926c 	ldr.w	r9, [pc, #620]	; 12544 <block_cipher_df+0x27c>
   122da:	4690      	mov	r8, r2
   122dc:	460c      	mov	r4, r1
   122de:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   122e2:	2100      	movs	r1, #0
   122e4:	4682      	mov	sl, r0
   122e6:	4648      	mov	r0, r9
   122e8:	f002 fdfc 	bl	14ee4 <memset>
   122ec:	a811      	add	r0, sp, #68	; 0x44
   122ee:	f001 f9e9 	bl	136c4 <cc_mbedtls_aes_init>
   122f2:	2200      	movs	r2, #0
   122f4:	2320      	movs	r3, #32
   122f6:	4621      	mov	r1, r4
   122f8:	f8a9 2010 	strh.w	r2, [r9, #16]
   122fc:	fa98 f498 	rev16.w	r4, r8
   12300:	4642      	mov	r2, r8
   12302:	f109 0018 	add.w	r0, r9, #24
   12306:	f8a9 4012 	strh.w	r4, [r9, #18]
   1230a:	f889 3017 	strb.w	r3, [r9, #23]
   1230e:	f002 fdde 	bl	14ece <memcpy>
   12312:	2280      	movs	r2, #128	; 0x80
   12314:	4b87      	ldr	r3, [pc, #540]	; (12534 <block_cipher_df+0x26c>)
   12316:	4988      	ldr	r1, [pc, #544]	; (12538 <block_cipher_df+0x270>)
   12318:	4c88      	ldr	r4, [pc, #544]	; (1253c <block_cipher_df+0x274>)
   1231a:	eb09 0008 	add.w	r0, r9, r8
   1231e:	e9cd 4102 	strd	r4, r1, [sp, #8]
   12322:	7602      	strb	r2, [r0, #24]
   12324:	9301      	str	r3, [sp, #4]
   12326:	a811      	add	r0, sp, #68	; 0x44
   12328:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
   1232c:	a901      	add	r1, sp, #4
   1232e:	9304      	str	r3, [sp, #16]
   12330:	f001 f9de 	bl	136f0 <cc_mbedtls_aes_setkey_enc>
   12334:	4607      	mov	r7, r0
   12336:	2800      	cmp	r0, #0
   12338:	f040 80d8 	bne.w	124ec <block_cipher_df+0x224>
   1233c:	f108 0819 	add.w	r8, r8, #25
   12340:	ae05      	add	r6, sp, #20
   12342:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
   12346:	2210      	movs	r2, #16
   12348:	2100      	movs	r1, #0
   1234a:	4630      	mov	r0, r6
   1234c:	f002 fdca 	bl	14ee4 <memset>
   12350:	4645      	mov	r5, r8
   12352:	4c7b      	ldr	r4, [pc, #492]	; (12540 <block_cipher_df+0x278>)
   12354:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12358:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1235c:	f89d c015 	ldrb.w	ip, [sp, #21]
   12360:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   12364:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12368:	4053      	eors	r3, r2
   1236a:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1236e:	ea8c 0c01 	eor.w	ip, ip, r1
   12372:	4050      	eors	r0, r2
   12374:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12378:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
   1237c:	f89d e018 	ldrb.w	lr, [sp, #24]
   12380:	4051      	eors	r1, r2
   12382:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
   12386:	f88d 3014 	strb.w	r3, [sp, #20]
   1238a:	ea8e 0202 	eor.w	r2, lr, r2
   1238e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   12392:	f89d e019 	ldrb.w	lr, [sp, #25]
   12396:	f88d c015 	strb.w	ip, [sp, #21]
   1239a:	ea8e 0303 	eor.w	r3, lr, r3
   1239e:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
   123a2:	f89d e01a 	ldrb.w	lr, [sp, #26]
   123a6:	f88d 0016 	strb.w	r0, [sp, #22]
   123aa:	ea8e 0c0c 	eor.w	ip, lr, ip
   123ae:	f814 0c09 	ldrb.w	r0, [r4, #-9]
   123b2:	f89d e01b 	ldrb.w	lr, [sp, #27]
   123b6:	f88d 1017 	strb.w	r1, [sp, #23]
   123ba:	ea8e 0000 	eor.w	r0, lr, r0
   123be:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   123c2:	f89d e01c 	ldrb.w	lr, [sp, #28]
   123c6:	f88d 2018 	strb.w	r2, [sp, #24]
   123ca:	ea8e 0101 	eor.w	r1, lr, r1
   123ce:	f814 2c07 	ldrb.w	r2, [r4, #-7]
   123d2:	f89d e01d 	ldrb.w	lr, [sp, #29]
   123d6:	f88d 3019 	strb.w	r3, [sp, #25]
   123da:	ea8e 0202 	eor.w	r2, lr, r2
   123de:	f89d 301e 	ldrb.w	r3, [sp, #30]
   123e2:	f814 ec06 	ldrb.w	lr, [r4, #-6]
   123e6:	f88d c01a 	strb.w	ip, [sp, #26]
   123ea:	ea83 030e 	eor.w	r3, r3, lr
   123ee:	f88d 001b 	strb.w	r0, [sp, #27]
   123f2:	f88d 101c 	strb.w	r1, [sp, #28]
   123f6:	f88d 201d 	strb.w	r2, [sp, #29]
   123fa:	f88d 301e 	strb.w	r3, [sp, #30]
   123fe:	f89d 101f 	ldrb.w	r1, [sp, #31]
   12402:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   12406:	f89d c020 	ldrb.w	ip, [sp, #32]
   1240a:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   1240e:	404b      	eors	r3, r1
   12410:	f814 2c04 	ldrb.w	r2, [r4, #-4]
   12414:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   12418:	ea8c 0202 	eor.w	r2, ip, r2
   1241c:	4041      	eors	r1, r0
   1241e:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   12422:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   12426:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
   1242a:	ea8c 0000 	eor.w	r0, ip, r0
   1242e:	f814 cc01 	ldrb.w	ip, [r4, #-1]
   12432:	f88d 301f 	strb.w	r3, [sp, #31]
   12436:	ea8e 0c0c 	eor.w	ip, lr, ip
   1243a:	f88d 2020 	strb.w	r2, [sp, #32]
   1243e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   12442:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   12446:	4633      	mov	r3, r6
   12448:	4632      	mov	r2, r6
   1244a:	2101      	movs	r1, #1
   1244c:	a811      	add	r0, sp, #68	; 0x44
   1244e:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
   12452:	f001 f967 	bl	13724 <cc_mbedtls_aes_crypt_ecb>
   12456:	2d10      	cmp	r5, #16
   12458:	bf94      	ite	ls
   1245a:	1b6d      	subls	r5, r5, r5
   1245c:	3d10      	subhi	r5, #16
   1245e:	2800      	cmp	r0, #0
   12460:	d163      	bne.n	1252a <block_cipher_df+0x262>
   12462:	3410      	adds	r4, #16
   12464:	2d00      	cmp	r5, #0
   12466:	f47f af75 	bne.w	12354 <block_cipher_df+0x8c>
   1246a:	eb0b 0007 	add.w	r0, fp, r7
   1246e:	2210      	movs	r2, #16
   12470:	4631      	mov	r1, r6
   12472:	f002 fd2c 	bl	14ece <memcpy>
   12476:	f899 3003 	ldrb.w	r3, [r9, #3]
   1247a:	3710      	adds	r7, #16
   1247c:	3301      	adds	r3, #1
   1247e:	2f20      	cmp	r7, #32
   12480:	f889 3003 	strb.w	r3, [r9, #3]
   12484:	f47f af5f 	bne.w	12346 <block_cipher_df+0x7e>
   12488:	2280      	movs	r2, #128	; 0x80
   1248a:	4659      	mov	r1, fp
   1248c:	a811      	add	r0, sp, #68	; 0x44
   1248e:	f001 f92f 	bl	136f0 <cc_mbedtls_aes_setkey_enc>
   12492:	4607      	mov	r7, r0
   12494:	bb68      	cbnz	r0, 124f2 <block_cipher_df+0x22a>
   12496:	4654      	mov	r4, sl
   12498:	f10a 0520 	add.w	r5, sl, #32
   1249c:	ab0d      	add	r3, sp, #52	; 0x34
   1249e:	461a      	mov	r2, r3
   124a0:	2101      	movs	r1, #1
   124a2:	a811      	add	r0, sp, #68	; 0x44
   124a4:	f001 f93e 	bl	13724 <cc_mbedtls_aes_crypt_ecb>
   124a8:	4607      	mov	r7, r0
   124aa:	bb10      	cbnz	r0, 124f2 <block_cipher_df+0x22a>
   124ac:	2210      	movs	r2, #16
   124ae:	4620      	mov	r0, r4
   124b0:	a90d      	add	r1, sp, #52	; 0x34
   124b2:	4414      	add	r4, r2
   124b4:	f002 fd0b 	bl	14ece <memcpy>
   124b8:	42ac      	cmp	r4, r5
   124ba:	d1ef      	bne.n	1249c <block_cipher_df+0x1d4>
   124bc:	a811      	add	r0, sp, #68	; 0x44
   124be:	f001 f911 	bl	136e4 <cc_mbedtls_aes_free>
   124c2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   124c6:	481f      	ldr	r0, [pc, #124]	; (12544 <block_cipher_df+0x27c>)
   124c8:	f7ff fef4 	bl	122b4 <mbedtls_platform_zeroize>
   124cc:	4658      	mov	r0, fp
   124ce:	2120      	movs	r1, #32
   124d0:	f7ff fef0 	bl	122b4 <mbedtls_platform_zeroize>
   124d4:	a801      	add	r0, sp, #4
   124d6:	2110      	movs	r1, #16
   124d8:	f7ff feec 	bl	122b4 <mbedtls_platform_zeroize>
   124dc:	4630      	mov	r0, r6
   124de:	2110      	movs	r1, #16
   124e0:	f7ff fee8 	bl	122b4 <mbedtls_platform_zeroize>
   124e4:	4638      	mov	r0, r7
   124e6:	b02f      	add	sp, #188	; 0xbc
   124e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124ec:	ae05      	add	r6, sp, #20
   124ee:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
   124f2:	a811      	add	r0, sp, #68	; 0x44
   124f4:	f001 f8f6 	bl	136e4 <cc_mbedtls_aes_free>
   124f8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   124fc:	4811      	ldr	r0, [pc, #68]	; (12544 <block_cipher_df+0x27c>)
   124fe:	f7ff fed9 	bl	122b4 <mbedtls_platform_zeroize>
   12502:	4658      	mov	r0, fp
   12504:	2120      	movs	r1, #32
   12506:	f7ff fed5 	bl	122b4 <mbedtls_platform_zeroize>
   1250a:	2110      	movs	r1, #16
   1250c:	a801      	add	r0, sp, #4
   1250e:	f7ff fed1 	bl	122b4 <mbedtls_platform_zeroize>
   12512:	4630      	mov	r0, r6
   12514:	2110      	movs	r1, #16
   12516:	f7ff fecd 	bl	122b4 <mbedtls_platform_zeroize>
   1251a:	4650      	mov	r0, sl
   1251c:	2120      	movs	r1, #32
   1251e:	f7ff fec9 	bl	122b4 <mbedtls_platform_zeroize>
   12522:	4638      	mov	r0, r7
   12524:	b02f      	add	sp, #188	; 0xbc
   12526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1252a:	4607      	mov	r7, r0
   1252c:	e7e1      	b.n	124f2 <block_cipher_df+0x22a>
   1252e:	f06f 0737 	mvn.w	r7, #55	; 0x37
   12532:	e7f6      	b.n	12522 <block_cipher_df+0x25a>
   12534:	03020100 	.word	0x03020100
   12538:	0b0a0908 	.word	0x0b0a0908
   1253c:	07060504 	.word	0x07060504
   12540:	20000a9c 	.word	0x20000a9c
   12544:	20000a8c 	.word	0x20000a8c

00012548 <ctr_drbg_update_internal>:
   12548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1254c:	2220      	movs	r2, #32
   1254e:	4604      	mov	r4, r0
   12550:	b088      	sub	sp, #32
   12552:	460d      	mov	r5, r1
   12554:	4668      	mov	r0, sp
   12556:	2100      	movs	r1, #0
   12558:	18a6      	adds	r6, r4, r2
   1255a:	466f      	mov	r7, sp
   1255c:	f002 fcc2 	bl	14ee4 <memset>
   12560:	7be2      	ldrb	r2, [r4, #15]
   12562:	3201      	adds	r2, #1
   12564:	b2d2      	uxtb	r2, r2
   12566:	73e2      	strb	r2, [r4, #15]
   12568:	2a00      	cmp	r2, #0
   1256a:	d14d      	bne.n	12608 <ctr_drbg_update_internal+0xc0>
   1256c:	7ba2      	ldrb	r2, [r4, #14]
   1256e:	3201      	adds	r2, #1
   12570:	b2d2      	uxtb	r2, r2
   12572:	73a2      	strb	r2, [r4, #14]
   12574:	2a00      	cmp	r2, #0
   12576:	d147      	bne.n	12608 <ctr_drbg_update_internal+0xc0>
   12578:	7b63      	ldrb	r3, [r4, #13]
   1257a:	3301      	adds	r3, #1
   1257c:	b2db      	uxtb	r3, r3
   1257e:	7363      	strb	r3, [r4, #13]
   12580:	2b00      	cmp	r3, #0
   12582:	d141      	bne.n	12608 <ctr_drbg_update_internal+0xc0>
   12584:	7b23      	ldrb	r3, [r4, #12]
   12586:	3301      	adds	r3, #1
   12588:	b2db      	uxtb	r3, r3
   1258a:	7323      	strb	r3, [r4, #12]
   1258c:	2b00      	cmp	r3, #0
   1258e:	d13b      	bne.n	12608 <ctr_drbg_update_internal+0xc0>
   12590:	7ae3      	ldrb	r3, [r4, #11]
   12592:	3301      	adds	r3, #1
   12594:	b2db      	uxtb	r3, r3
   12596:	72e3      	strb	r3, [r4, #11]
   12598:	2b00      	cmp	r3, #0
   1259a:	d135      	bne.n	12608 <ctr_drbg_update_internal+0xc0>
   1259c:	7aa3      	ldrb	r3, [r4, #10]
   1259e:	3301      	adds	r3, #1
   125a0:	b2db      	uxtb	r3, r3
   125a2:	72a3      	strb	r3, [r4, #10]
   125a4:	2b00      	cmp	r3, #0
   125a6:	d12f      	bne.n	12608 <ctr_drbg_update_internal+0xc0>
   125a8:	7a63      	ldrb	r3, [r4, #9]
   125aa:	3301      	adds	r3, #1
   125ac:	b2db      	uxtb	r3, r3
   125ae:	7263      	strb	r3, [r4, #9]
   125b0:	bb53      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   125b2:	7a23      	ldrb	r3, [r4, #8]
   125b4:	3301      	adds	r3, #1
   125b6:	b2db      	uxtb	r3, r3
   125b8:	7223      	strb	r3, [r4, #8]
   125ba:	bb2b      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   125bc:	79e3      	ldrb	r3, [r4, #7]
   125be:	3301      	adds	r3, #1
   125c0:	b2db      	uxtb	r3, r3
   125c2:	71e3      	strb	r3, [r4, #7]
   125c4:	bb03      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   125c6:	79a3      	ldrb	r3, [r4, #6]
   125c8:	3301      	adds	r3, #1
   125ca:	b2db      	uxtb	r3, r3
   125cc:	71a3      	strb	r3, [r4, #6]
   125ce:	b9db      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   125d0:	7963      	ldrb	r3, [r4, #5]
   125d2:	3301      	adds	r3, #1
   125d4:	b2db      	uxtb	r3, r3
   125d6:	7163      	strb	r3, [r4, #5]
   125d8:	b9b3      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   125da:	7923      	ldrb	r3, [r4, #4]
   125dc:	3301      	adds	r3, #1
   125de:	b2db      	uxtb	r3, r3
   125e0:	7123      	strb	r3, [r4, #4]
   125e2:	b98b      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   125e4:	78e3      	ldrb	r3, [r4, #3]
   125e6:	3301      	adds	r3, #1
   125e8:	b2db      	uxtb	r3, r3
   125ea:	70e3      	strb	r3, [r4, #3]
   125ec:	b963      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   125ee:	78a3      	ldrb	r3, [r4, #2]
   125f0:	3301      	adds	r3, #1
   125f2:	b2db      	uxtb	r3, r3
   125f4:	70a3      	strb	r3, [r4, #2]
   125f6:	b93b      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   125f8:	7863      	ldrb	r3, [r4, #1]
   125fa:	3301      	adds	r3, #1
   125fc:	b2db      	uxtb	r3, r3
   125fe:	7063      	strb	r3, [r4, #1]
   12600:	b913      	cbnz	r3, 12608 <ctr_drbg_update_internal+0xc0>
   12602:	7823      	ldrb	r3, [r4, #0]
   12604:	3301      	adds	r3, #1
   12606:	7023      	strb	r3, [r4, #0]
   12608:	463b      	mov	r3, r7
   1260a:	4622      	mov	r2, r4
   1260c:	2101      	movs	r1, #1
   1260e:	4630      	mov	r0, r6
   12610:	f001 f888 	bl	13724 <cc_mbedtls_aes_crypt_ecb>
   12614:	4680      	mov	r8, r0
   12616:	2800      	cmp	r0, #0
   12618:	d12a      	bne.n	12670 <ctr_drbg_update_internal+0x128>
   1261a:	3710      	adds	r7, #16
   1261c:	ab08      	add	r3, sp, #32
   1261e:	429f      	cmp	r7, r3
   12620:	d19e      	bne.n	12560 <ctr_drbg_update_internal+0x18>
   12622:	9900      	ldr	r1, [sp, #0]
   12624:	682b      	ldr	r3, [r5, #0]
   12626:	686a      	ldr	r2, [r5, #4]
   12628:	404b      	eors	r3, r1
   1262a:	9901      	ldr	r1, [sp, #4]
   1262c:	4630      	mov	r0, r6
   1262e:	404a      	eors	r2, r1
   12630:	68ae      	ldr	r6, [r5, #8]
   12632:	9902      	ldr	r1, [sp, #8]
   12634:	9300      	str	r3, [sp, #0]
   12636:	4071      	eors	r1, r6
   12638:	68eb      	ldr	r3, [r5, #12]
   1263a:	9e03      	ldr	r6, [sp, #12]
   1263c:	9201      	str	r2, [sp, #4]
   1263e:	4073      	eors	r3, r6
   12640:	692a      	ldr	r2, [r5, #16]
   12642:	9e04      	ldr	r6, [sp, #16]
   12644:	9102      	str	r1, [sp, #8]
   12646:	4056      	eors	r6, r2
   12648:	9905      	ldr	r1, [sp, #20]
   1264a:	696a      	ldr	r2, [r5, #20]
   1264c:	9303      	str	r3, [sp, #12]
   1264e:	4051      	eors	r1, r2
   12650:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   12654:	9d06      	ldr	r5, [sp, #24]
   12656:	9105      	str	r1, [sp, #20]
   12658:	4055      	eors	r5, r2
   1265a:	9a07      	ldr	r2, [sp, #28]
   1265c:	4669      	mov	r1, sp
   1265e:	4053      	eors	r3, r2
   12660:	2280      	movs	r2, #128	; 0x80
   12662:	e9cd 5306 	strd	r5, r3, [sp, #24]
   12666:	9604      	str	r6, [sp, #16]
   12668:	f001 f842 	bl	136f0 <cc_mbedtls_aes_setkey_enc>
   1266c:	4680      	mov	r8, r0
   1266e:	b138      	cbz	r0, 12680 <ctr_drbg_update_internal+0x138>
   12670:	4668      	mov	r0, sp
   12672:	2120      	movs	r1, #32
   12674:	f7ff fe1e 	bl	122b4 <mbedtls_platform_zeroize>
   12678:	4640      	mov	r0, r8
   1267a:	b008      	add	sp, #32
   1267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12680:	2210      	movs	r2, #16
   12682:	4620      	mov	r0, r4
   12684:	eb0d 0102 	add.w	r1, sp, r2
   12688:	f002 fc21 	bl	14ece <memcpy>
   1268c:	e7f0      	b.n	12670 <ctr_drbg_update_internal+0x128>
   1268e:	bf00      	nop

00012690 <mbedtls_ctr_drbg_reseed_internal>:
   12690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12694:	4604      	mov	r4, r0
   12696:	6980      	ldr	r0, [r0, #24]
   12698:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1269c:	d854      	bhi.n	12748 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1269e:	461d      	mov	r5, r3
   126a0:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   126a4:	42ab      	cmp	r3, r5
   126a6:	d34f      	bcc.n	12748 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   126a8:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   126ac:	1a18      	subs	r0, r3, r0
   126ae:	4290      	cmp	r0, r2
   126b0:	4616      	mov	r6, r2
   126b2:	d349      	bcc.n	12748 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   126b4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 12754 <mbedtls_ctr_drbg_reseed_internal+0xc4>
   126b8:	f44f 72c0 	mov.w	r2, #384	; 0x180
   126bc:	460f      	mov	r7, r1
   126be:	4648      	mov	r0, r9
   126c0:	2100      	movs	r1, #0
   126c2:	f002 fc0f 	bl	14ee4 <memset>
   126c6:	4649      	mov	r1, r9
   126c8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   126cc:	69a2      	ldr	r2, [r4, #24]
   126ce:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   126d2:	4798      	blx	r3
   126d4:	2800      	cmp	r0, #0
   126d6:	d13a      	bne.n	1274e <mbedtls_ctr_drbg_reseed_internal+0xbe>
   126d8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   126dc:	b14d      	cbz	r5, 126f2 <mbedtls_ctr_drbg_reseed_internal+0x62>
   126de:	462a      	mov	r2, r5
   126e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   126e4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   126e8:	eb09 0108 	add.w	r1, r9, r8
   126ec:	4798      	blx	r3
   126ee:	bb70      	cbnz	r0, 1274e <mbedtls_ctr_drbg_reseed_internal+0xbe>
   126f0:	44a8      	add	r8, r5
   126f2:	b107      	cbz	r7, 126f6 <mbedtls_ctr_drbg_reseed_internal+0x66>
   126f4:	b9c6      	cbnz	r6, 12728 <mbedtls_ctr_drbg_reseed_internal+0x98>
   126f6:	4917      	ldr	r1, [pc, #92]	; (12754 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   126f8:	4642      	mov	r2, r8
   126fa:	4608      	mov	r0, r1
   126fc:	f7ff fde4 	bl	122c8 <block_cipher_df>
   12700:	4605      	mov	r5, r0
   12702:	b138      	cbz	r0, 12714 <mbedtls_ctr_drbg_reseed_internal+0x84>
   12704:	f44f 71c0 	mov.w	r1, #384	; 0x180
   12708:	4812      	ldr	r0, [pc, #72]	; (12754 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   1270a:	f7ff fdd3 	bl	122b4 <mbedtls_platform_zeroize>
   1270e:	4628      	mov	r0, r5
   12710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12714:	4620      	mov	r0, r4
   12716:	490f      	ldr	r1, [pc, #60]	; (12754 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   12718:	f7ff ff16 	bl	12548 <ctr_drbg_update_internal>
   1271c:	4605      	mov	r5, r0
   1271e:	2800      	cmp	r0, #0
   12720:	d1f0      	bne.n	12704 <mbedtls_ctr_drbg_reseed_internal+0x74>
   12722:	2301      	movs	r3, #1
   12724:	6123      	str	r3, [r4, #16]
   12726:	e7ed      	b.n	12704 <mbedtls_ctr_drbg_reseed_internal+0x74>
   12728:	4639      	mov	r1, r7
   1272a:	4632      	mov	r2, r6
   1272c:	eb09 0008 	add.w	r0, r9, r8
   12730:	f002 fbcd 	bl	14ece <memcpy>
   12734:	4907      	ldr	r1, [pc, #28]	; (12754 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   12736:	44b0      	add	r8, r6
   12738:	4642      	mov	r2, r8
   1273a:	4608      	mov	r0, r1
   1273c:	f7ff fdc4 	bl	122c8 <block_cipher_df>
   12740:	4605      	mov	r5, r0
   12742:	2800      	cmp	r0, #0
   12744:	d1de      	bne.n	12704 <mbedtls_ctr_drbg_reseed_internal+0x74>
   12746:	e7e5      	b.n	12714 <mbedtls_ctr_drbg_reseed_internal+0x84>
   12748:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1274c:	e7df      	b.n	1270e <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1274e:	f06f 0533 	mvn.w	r5, #51	; 0x33
   12752:	e7dc      	b.n	1270e <mbedtls_ctr_drbg_reseed_internal+0x7e>
   12754:	20000c2c 	.word	0x20000c2c

00012758 <cc_mbedtls_ctr_drbg_init>:
   12758:	b510      	push	{r4, lr}
   1275a:	22a4      	movs	r2, #164	; 0xa4
   1275c:	2100      	movs	r1, #0
   1275e:	4604      	mov	r4, r0
   12760:	f002 fbc0 	bl	14ee4 <memset>
   12764:	f04f 31ff 	mov.w	r1, #4294967295
   12768:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1276c:	4b04      	ldr	r3, [pc, #16]	; (12780 <cc_mbedtls_ctr_drbg_init+0x28>)
   1276e:	6121      	str	r1, [r4, #16]
   12770:	61e2      	str	r2, [r4, #28]
   12772:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   12776:	681b      	ldr	r3, [r3, #0]
   12778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1277c:	4718      	bx	r3
   1277e:	bf00      	nop
   12780:	200000ec 	.word	0x200000ec

00012784 <cc_mbedtls_ctr_drbg_seed>:
   12784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12788:	4605      	mov	r5, r0
   1278a:	b085      	sub	sp, #20
   1278c:	460f      	mov	r7, r1
   1278e:	4616      	mov	r6, r2
   12790:	4668      	mov	r0, sp
   12792:	2210      	movs	r2, #16
   12794:	2100      	movs	r1, #0
   12796:	4699      	mov	r9, r3
   12798:	f002 fba4 	bl	14ee4 <memset>
   1279c:	4b1e      	ldr	r3, [pc, #120]	; (12818 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1279e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   127a2:	4640      	mov	r0, r8
   127a4:	681b      	ldr	r3, [r3, #0]
   127a6:	4798      	blx	r3
   127a8:	b120      	cbz	r0, 127b4 <cc_mbedtls_ctr_drbg_seed+0x30>
   127aa:	4604      	mov	r4, r0
   127ac:	4620      	mov	r0, r4
   127ae:	b005      	add	sp, #20
   127b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   127b4:	f105 0420 	add.w	r4, r5, #32
   127b8:	4620      	mov	r0, r4
   127ba:	f000 ff83 	bl	136c4 <cc_mbedtls_aes_init>
   127be:	69aa      	ldr	r2, [r5, #24]
   127c0:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   127c4:	b9ea      	cbnz	r2, 12802 <cc_mbedtls_ctr_drbg_seed+0x7e>
   127c6:	2220      	movs	r2, #32
   127c8:	692e      	ldr	r6, [r5, #16]
   127ca:	61aa      	str	r2, [r5, #24]
   127cc:	2e00      	cmp	r6, #0
   127ce:	db20      	blt.n	12812 <cc_mbedtls_ctr_drbg_seed+0x8e>
   127d0:	4620      	mov	r0, r4
   127d2:	4669      	mov	r1, sp
   127d4:	2280      	movs	r2, #128	; 0x80
   127d6:	f000 ff8b 	bl	136f0 <cc_mbedtls_aes_setkey_enc>
   127da:	4604      	mov	r4, r0
   127dc:	b930      	cbnz	r0, 127ec <cc_mbedtls_ctr_drbg_seed+0x68>
   127de:	4633      	mov	r3, r6
   127e0:	4649      	mov	r1, r9
   127e2:	4628      	mov	r0, r5
   127e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   127e6:	f7ff ff53 	bl	12690 <mbedtls_ctr_drbg_reseed_internal>
   127ea:	4604      	mov	r4, r0
   127ec:	4b0b      	ldr	r3, [pc, #44]	; (1281c <cc_mbedtls_ctr_drbg_seed+0x98>)
   127ee:	4640      	mov	r0, r8
   127f0:	681b      	ldr	r3, [r3, #0]
   127f2:	4798      	blx	r3
   127f4:	2800      	cmp	r0, #0
   127f6:	bf18      	it	ne
   127f8:	4604      	movne	r4, r0
   127fa:	4620      	mov	r0, r4
   127fc:	b005      	add	sp, #20
   127fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12802:	692e      	ldr	r6, [r5, #16]
   12804:	2e00      	cmp	r6, #0
   12806:	dae3      	bge.n	127d0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12808:	2a17      	cmp	r2, #23
   1280a:	d802      	bhi.n	12812 <cc_mbedtls_ctr_drbg_seed+0x8e>
   1280c:	1c53      	adds	r3, r2, #1
   1280e:	085e      	lsrs	r6, r3, #1
   12810:	e7de      	b.n	127d0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12812:	2600      	movs	r6, #0
   12814:	e7dc      	b.n	127d0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12816:	bf00      	nop
   12818:	200000f0 	.word	0x200000f0
   1281c:	200000f4 	.word	0x200000f4

00012820 <cc_mbedtls_ctr_drbg_random_with_add>:
   12820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12824:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   12828:	b08d      	sub	sp, #52	; 0x34
   1282a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1282e:	f200 80e4 	bhi.w	129fa <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   12832:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   12836:	f200 80dd 	bhi.w	129f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1283a:	4604      	mov	r4, r0
   1283c:	4615      	mov	r5, r2
   1283e:	460e      	mov	r6, r1
   12840:	2220      	movs	r2, #32
   12842:	2100      	movs	r1, #0
   12844:	a804      	add	r0, sp, #16
   12846:	461f      	mov	r7, r3
   12848:	f002 fb4c 	bl	14ee4 <memset>
   1284c:	4b6c      	ldr	r3, [pc, #432]	; (12a00 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1284e:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   12852:	4648      	mov	r0, r9
   12854:	681b      	ldr	r3, [r3, #0]
   12856:	4798      	blx	r3
   12858:	4683      	mov	fp, r0
   1285a:	2800      	cmp	r0, #0
   1285c:	f040 8093 	bne.w	12986 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   12860:	6922      	ldr	r2, [r4, #16]
   12862:	69e3      	ldr	r3, [r4, #28]
   12864:	429a      	cmp	r2, r3
   12866:	f300 8092 	bgt.w	1298e <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1286a:	6963      	ldr	r3, [r4, #20]
   1286c:	2b00      	cmp	r3, #0
   1286e:	f040 808e 	bne.w	1298e <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   12872:	f1b8 0f00 	cmp.w	r8, #0
   12876:	f040 80a9 	bne.w	129cc <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1287a:	f8df a188 	ldr.w	sl, [pc, #392]	; 12a04 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1287e:	466f      	mov	r7, sp
   12880:	2d00      	cmp	r5, #0
   12882:	f000 8098 	beq.w	129b6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   12886:	466f      	mov	r7, sp
   12888:	f104 0820 	add.w	r8, r4, #32
   1288c:	e00e      	b.n	128ac <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1288e:	2d10      	cmp	r5, #16
   12890:	46ab      	mov	fp, r5
   12892:	bf28      	it	cs
   12894:	f04f 0b10 	movcs.w	fp, #16
   12898:	4630      	mov	r0, r6
   1289a:	4639      	mov	r1, r7
   1289c:	465a      	mov	r2, fp
   1289e:	f002 fb16 	bl	14ece <memcpy>
   128a2:	ebb5 050b 	subs.w	r5, r5, fp
   128a6:	445e      	add	r6, fp
   128a8:	f000 8085 	beq.w	129b6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   128ac:	7be3      	ldrb	r3, [r4, #15]
   128ae:	3301      	adds	r3, #1
   128b0:	b2db      	uxtb	r3, r3
   128b2:	73e3      	strb	r3, [r4, #15]
   128b4:	2b00      	cmp	r3, #0
   128b6:	d14d      	bne.n	12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   128b8:	7ba3      	ldrb	r3, [r4, #14]
   128ba:	3301      	adds	r3, #1
   128bc:	b2db      	uxtb	r3, r3
   128be:	73a3      	strb	r3, [r4, #14]
   128c0:	2b00      	cmp	r3, #0
   128c2:	d147      	bne.n	12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   128c4:	7b63      	ldrb	r3, [r4, #13]
   128c6:	3301      	adds	r3, #1
   128c8:	b2db      	uxtb	r3, r3
   128ca:	7363      	strb	r3, [r4, #13]
   128cc:	2b00      	cmp	r3, #0
   128ce:	d141      	bne.n	12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   128d0:	7b23      	ldrb	r3, [r4, #12]
   128d2:	3301      	adds	r3, #1
   128d4:	b2db      	uxtb	r3, r3
   128d6:	7323      	strb	r3, [r4, #12]
   128d8:	2b00      	cmp	r3, #0
   128da:	d13b      	bne.n	12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   128dc:	7ae3      	ldrb	r3, [r4, #11]
   128de:	3301      	adds	r3, #1
   128e0:	b2db      	uxtb	r3, r3
   128e2:	72e3      	strb	r3, [r4, #11]
   128e4:	2b00      	cmp	r3, #0
   128e6:	d135      	bne.n	12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   128e8:	7aa3      	ldrb	r3, [r4, #10]
   128ea:	3301      	adds	r3, #1
   128ec:	b2db      	uxtb	r3, r3
   128ee:	72a3      	strb	r3, [r4, #10]
   128f0:	2b00      	cmp	r3, #0
   128f2:	d12f      	bne.n	12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   128f4:	7a63      	ldrb	r3, [r4, #9]
   128f6:	3301      	adds	r3, #1
   128f8:	b2db      	uxtb	r3, r3
   128fa:	7263      	strb	r3, [r4, #9]
   128fc:	bb53      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   128fe:	7a23      	ldrb	r3, [r4, #8]
   12900:	3301      	adds	r3, #1
   12902:	b2db      	uxtb	r3, r3
   12904:	7223      	strb	r3, [r4, #8]
   12906:	bb2b      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12908:	79e3      	ldrb	r3, [r4, #7]
   1290a:	3301      	adds	r3, #1
   1290c:	b2db      	uxtb	r3, r3
   1290e:	71e3      	strb	r3, [r4, #7]
   12910:	bb03      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12912:	79a3      	ldrb	r3, [r4, #6]
   12914:	3301      	adds	r3, #1
   12916:	b2db      	uxtb	r3, r3
   12918:	71a3      	strb	r3, [r4, #6]
   1291a:	b9db      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1291c:	7963      	ldrb	r3, [r4, #5]
   1291e:	3301      	adds	r3, #1
   12920:	b2db      	uxtb	r3, r3
   12922:	7163      	strb	r3, [r4, #5]
   12924:	b9b3      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12926:	7923      	ldrb	r3, [r4, #4]
   12928:	3301      	adds	r3, #1
   1292a:	b2db      	uxtb	r3, r3
   1292c:	7123      	strb	r3, [r4, #4]
   1292e:	b98b      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12930:	78e3      	ldrb	r3, [r4, #3]
   12932:	3301      	adds	r3, #1
   12934:	b2db      	uxtb	r3, r3
   12936:	70e3      	strb	r3, [r4, #3]
   12938:	b963      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1293a:	78a3      	ldrb	r3, [r4, #2]
   1293c:	3301      	adds	r3, #1
   1293e:	b2db      	uxtb	r3, r3
   12940:	70a3      	strb	r3, [r4, #2]
   12942:	b93b      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   12944:	7863      	ldrb	r3, [r4, #1]
   12946:	3301      	adds	r3, #1
   12948:	b2db      	uxtb	r3, r3
   1294a:	7063      	strb	r3, [r4, #1]
   1294c:	b913      	cbnz	r3, 12954 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1294e:	7823      	ldrb	r3, [r4, #0]
   12950:	3301      	adds	r3, #1
   12952:	7023      	strb	r3, [r4, #0]
   12954:	463b      	mov	r3, r7
   12956:	4622      	mov	r2, r4
   12958:	2101      	movs	r1, #1
   1295a:	4640      	mov	r0, r8
   1295c:	f000 fee2 	bl	13724 <cc_mbedtls_aes_crypt_ecb>
   12960:	4683      	mov	fp, r0
   12962:	2800      	cmp	r0, #0
   12964:	d093      	beq.n	1288e <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   12966:	f8da 3000 	ldr.w	r3, [sl]
   1296a:	4648      	mov	r0, r9
   1296c:	4798      	blx	r3
   1296e:	4603      	mov	r3, r0
   12970:	2120      	movs	r1, #32
   12972:	a804      	add	r0, sp, #16
   12974:	2b00      	cmp	r3, #0
   12976:	bf18      	it	ne
   12978:	469b      	movne	fp, r3
   1297a:	f7ff fc9b 	bl	122b4 <mbedtls_platform_zeroize>
   1297e:	4638      	mov	r0, r7
   12980:	2110      	movs	r1, #16
   12982:	f7ff fc97 	bl	122b4 <mbedtls_platform_zeroize>
   12986:	4658      	mov	r0, fp
   12988:	b00d      	add	sp, #52	; 0x34
   1298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1298e:	4642      	mov	r2, r8
   12990:	4639      	mov	r1, r7
   12992:	2300      	movs	r3, #0
   12994:	4620      	mov	r0, r4
   12996:	f7ff fe7b 	bl	12690 <mbedtls_ctr_drbg_reseed_internal>
   1299a:	f8df a068 	ldr.w	sl, [pc, #104]	; 12a04 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1299e:	2800      	cmp	r0, #0
   129a0:	f43f af6d 	beq.w	1287e <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   129a4:	4648      	mov	r0, r9
   129a6:	f8da 3000 	ldr.w	r3, [sl]
   129aa:	4798      	blx	r3
   129ac:	4683      	mov	fp, r0
   129ae:	2800      	cmp	r0, #0
   129b0:	f43f af65 	beq.w	1287e <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   129b4:	e7e7      	b.n	12986 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   129b6:	4620      	mov	r0, r4
   129b8:	a904      	add	r1, sp, #16
   129ba:	f7ff fdc5 	bl	12548 <ctr_drbg_update_internal>
   129be:	4683      	mov	fp, r0
   129c0:	2800      	cmp	r0, #0
   129c2:	d1d0      	bne.n	12966 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   129c4:	6923      	ldr	r3, [r4, #16]
   129c6:	3301      	adds	r3, #1
   129c8:	6123      	str	r3, [r4, #16]
   129ca:	e7cc      	b.n	12966 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   129cc:	4642      	mov	r2, r8
   129ce:	4639      	mov	r1, r7
   129d0:	a804      	add	r0, sp, #16
   129d2:	f7ff fc79 	bl	122c8 <block_cipher_df>
   129d6:	4683      	mov	fp, r0
   129d8:	b118      	cbz	r0, 129e2 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   129da:	466f      	mov	r7, sp
   129dc:	f8df a024 	ldr.w	sl, [pc, #36]	; 12a04 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   129e0:	e7c1      	b.n	12966 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   129e2:	4620      	mov	r0, r4
   129e4:	a904      	add	r1, sp, #16
   129e6:	f7ff fdaf 	bl	12548 <ctr_drbg_update_internal>
   129ea:	4683      	mov	fp, r0
   129ec:	2800      	cmp	r0, #0
   129ee:	f43f af44 	beq.w	1287a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   129f2:	e7f2      	b.n	129da <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   129f4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   129f8:	e7c5      	b.n	12986 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   129fa:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   129fe:	e7c2      	b.n	12986 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   12a00:	200000f0 	.word	0x200000f0
   12a04:	200000f4 	.word	0x200000f4

00012a08 <entropy_update>:
   12a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a0c:	2b20      	cmp	r3, #32
   12a0e:	461d      	mov	r5, r3
   12a10:	4606      	mov	r6, r0
   12a12:	4689      	mov	r9, r1
   12a14:	4690      	mov	r8, r2
   12a16:	b08b      	sub	sp, #44	; 0x2c
   12a18:	d826      	bhi.n	12a68 <entropy_update+0x60>
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	af02      	add	r7, sp, #8
   12a1e:	6831      	ldr	r1, [r6, #0]
   12a20:	f88d 9004 	strb.w	r9, [sp, #4]
   12a24:	f88d 3005 	strb.w	r3, [sp, #5]
   12a28:	f106 0904 	add.w	r9, r6, #4
   12a2c:	b921      	cbnz	r1, 12a38 <entropy_update+0x30>
   12a2e:	4648      	mov	r0, r9
   12a30:	f000 febc 	bl	137ac <cc_mbedtls_sha256_starts>
   12a34:	4604      	mov	r4, r0
   12a36:	b940      	cbnz	r0, 12a4a <entropy_update+0x42>
   12a38:	2301      	movs	r3, #1
   12a3a:	2202      	movs	r2, #2
   12a3c:	4648      	mov	r0, r9
   12a3e:	6033      	str	r3, [r6, #0]
   12a40:	a901      	add	r1, sp, #4
   12a42:	f000 fec7 	bl	137d4 <cc_mbedtls_sha256_update>
   12a46:	4604      	mov	r4, r0
   12a48:	b138      	cbz	r0, 12a5a <entropy_update+0x52>
   12a4a:	4638      	mov	r0, r7
   12a4c:	2120      	movs	r1, #32
   12a4e:	f7ff fc31 	bl	122b4 <mbedtls_platform_zeroize>
   12a52:	4620      	mov	r0, r4
   12a54:	b00b      	add	sp, #44	; 0x2c
   12a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12a5a:	462a      	mov	r2, r5
   12a5c:	4641      	mov	r1, r8
   12a5e:	4648      	mov	r0, r9
   12a60:	f000 feb8 	bl	137d4 <cc_mbedtls_sha256_update>
   12a64:	4604      	mov	r4, r0
   12a66:	e7f0      	b.n	12a4a <entropy_update+0x42>
   12a68:	af02      	add	r7, sp, #8
   12a6a:	4619      	mov	r1, r3
   12a6c:	4610      	mov	r0, r2
   12a6e:	2300      	movs	r3, #0
   12a70:	463a      	mov	r2, r7
   12a72:	f000 ffb1 	bl	139d8 <cc_mbedtls_sha256>
   12a76:	4604      	mov	r4, r0
   12a78:	2800      	cmp	r0, #0
   12a7a:	d1e6      	bne.n	12a4a <entropy_update+0x42>
   12a7c:	2320      	movs	r3, #32
   12a7e:	46b8      	mov	r8, r7
   12a80:	461d      	mov	r5, r3
   12a82:	e7cc      	b.n	12a1e <entropy_update+0x16>

00012a84 <entropy_gather_internal.part.0>:
   12a84:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a86:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   12a8a:	b0a7      	sub	sp, #156	; 0x9c
   12a8c:	2b00      	cmp	r3, #0
   12a8e:	bfd8      	it	le
   12a90:	ae02      	addle	r6, sp, #8
   12a92:	dd2c      	ble.n	12aee <entropy_gather_internal.part.0+0x6a>
   12a94:	4605      	mov	r5, r0
   12a96:	2300      	movs	r3, #0
   12a98:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   12a9c:	ae02      	add	r6, sp, #8
   12a9e:	9301      	str	r3, [sp, #4]
   12aa0:	f1a4 0701 	sub.w	r7, r4, #1
   12aa4:	4631      	mov	r1, r6
   12aa6:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   12aaa:	2290      	movs	r2, #144	; 0x90
   12aac:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   12ab0:	ab01      	add	r3, sp, #4
   12ab2:	fab7 f787 	clz	r7, r7
   12ab6:	47a0      	blx	r4
   12ab8:	097f      	lsrs	r7, r7, #5
   12aba:	4604      	mov	r4, r0
   12abc:	b910      	cbnz	r0, 12ac4 <entropy_gather_internal.part.0+0x40>
   12abe:	9b01      	ldr	r3, [sp, #4]
   12ac0:	b93b      	cbnz	r3, 12ad2 <entropy_gather_internal.part.0+0x4e>
   12ac2:	b1a7      	cbz	r7, 12aee <entropy_gather_internal.part.0+0x6a>
   12ac4:	4630      	mov	r0, r6
   12ac6:	2190      	movs	r1, #144	; 0x90
   12ac8:	f7ff fbf4 	bl	122b4 <mbedtls_platform_zeroize>
   12acc:	4620      	mov	r0, r4
   12ace:	b027      	add	sp, #156	; 0x9c
   12ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ad2:	4601      	mov	r1, r0
   12ad4:	4632      	mov	r2, r6
   12ad6:	4628      	mov	r0, r5
   12ad8:	f7ff ff96 	bl	12a08 <entropy_update>
   12adc:	b950      	cbnz	r0, 12af4 <entropy_gather_internal.part.0+0x70>
   12ade:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   12ae2:	9a01      	ldr	r2, [sp, #4]
   12ae4:	4413      	add	r3, r2
   12ae6:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   12aea:	2f00      	cmp	r7, #0
   12aec:	d1ea      	bne.n	12ac4 <entropy_gather_internal.part.0+0x40>
   12aee:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   12af2:	e7e7      	b.n	12ac4 <entropy_gather_internal.part.0+0x40>
   12af4:	4604      	mov	r4, r0
   12af6:	4620      	mov	r0, r4
   12af8:	b027      	add	sp, #156	; 0x9c
   12afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012afc <cc_mbedtls_entropy_init>:
   12afc:	b570      	push	{r4, r5, r6, lr}
   12afe:	2500      	movs	r5, #0
   12b00:	4604      	mov	r4, r0
   12b02:	4629      	mov	r1, r5
   12b04:	2214      	movs	r2, #20
   12b06:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   12b0a:	30f8      	adds	r0, #248	; 0xf8
   12b0c:	f002 f9ea 	bl	14ee4 <memset>
   12b10:	4b16      	ldr	r3, [pc, #88]	; (12b6c <cc_mbedtls_entropy_init+0x70>)
   12b12:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   12b16:	681b      	ldr	r3, [r3, #0]
   12b18:	4630      	mov	r0, r6
   12b1a:	4798      	blx	r3
   12b1c:	4620      	mov	r0, r4
   12b1e:	f840 5b04 	str.w	r5, [r0], #4
   12b22:	f000 fe29 	bl	13778 <cc_mbedtls_sha256_init>
   12b26:	4b12      	ldr	r3, [pc, #72]	; (12b70 <cc_mbedtls_entropy_init+0x74>)
   12b28:	4630      	mov	r0, r6
   12b2a:	681b      	ldr	r3, [r3, #0]
   12b2c:	4798      	blx	r3
   12b2e:	b9d8      	cbnz	r0, 12b68 <cc_mbedtls_entropy_init+0x6c>
   12b30:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12b34:	42ab      	cmp	r3, r5
   12b36:	dc11      	bgt.n	12b5c <cc_mbedtls_entropy_init+0x60>
   12b38:	2101      	movs	r1, #1
   12b3a:	2520      	movs	r5, #32
   12b3c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12b40:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   12b44:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   12b48:	480a      	ldr	r0, [pc, #40]	; (12b74 <cc_mbedtls_entropy_init+0x78>)
   12b4a:	440b      	add	r3, r1
   12b4c:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
   12b50:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
   12b54:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   12b58:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   12b5c:	4b06      	ldr	r3, [pc, #24]	; (12b78 <cc_mbedtls_entropy_init+0x7c>)
   12b5e:	4630      	mov	r0, r6
   12b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12b64:	681b      	ldr	r3, [r3, #0]
   12b66:	4718      	bx	r3
   12b68:	bd70      	pop	{r4, r5, r6, pc}
   12b6a:	bf00      	nop
   12b6c:	200000ec 	.word	0x200000ec
   12b70:	200000f0 	.word	0x200000f0
   12b74:	000135c1 	.word	0x000135c1
   12b78:	200000f4 	.word	0x200000f4

00012b7c <cc_mbedtls_entropy_func>:
   12b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b80:	2a20      	cmp	r2, #32
   12b82:	b088      	sub	sp, #32
   12b84:	d878      	bhi.n	12c78 <cc_mbedtls_entropy_func+0xfc>
   12b86:	4b3e      	ldr	r3, [pc, #248]	; (12c80 <cc_mbedtls_entropy_func+0x104>)
   12b88:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   12b8c:	4604      	mov	r4, r0
   12b8e:	681b      	ldr	r3, [r3, #0]
   12b90:	4648      	mov	r0, r9
   12b92:	4617      	mov	r7, r2
   12b94:	4688      	mov	r8, r1
   12b96:	4798      	blx	r3
   12b98:	4605      	mov	r5, r0
   12b9a:	bb40      	cbnz	r0, 12bee <cc_mbedtls_entropy_func+0x72>
   12b9c:	f240 1601 	movw	r6, #257	; 0x101
   12ba0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12ba4:	2b00      	cmp	r3, #0
   12ba6:	d063      	beq.n	12c70 <cc_mbedtls_entropy_func+0xf4>
   12ba8:	4620      	mov	r0, r4
   12baa:	f7ff ff6b 	bl	12a84 <entropy_gather_internal.part.0>
   12bae:	4605      	mov	r5, r0
   12bb0:	2800      	cmp	r0, #0
   12bb2:	d15f      	bne.n	12c74 <cc_mbedtls_entropy_func+0xf8>
   12bb4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12bb8:	2b00      	cmp	r3, #0
   12bba:	dd07      	ble.n	12bcc <cc_mbedtls_entropy_func+0x50>
   12bbc:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   12bc0:	4290      	cmp	r0, r2
   12bc2:	d303      	bcc.n	12bcc <cc_mbedtls_entropy_func+0x50>
   12bc4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   12bc8:	2a01      	cmp	r2, #1
   12bca:	d014      	beq.n	12bf6 <cc_mbedtls_entropy_func+0x7a>
   12bcc:	3e01      	subs	r6, #1
   12bce:	d1e9      	bne.n	12ba4 <cc_mbedtls_entropy_func+0x28>
   12bd0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   12bd4:	466e      	mov	r6, sp
   12bd6:	4630      	mov	r0, r6
   12bd8:	2120      	movs	r1, #32
   12bda:	f7ff fb6b 	bl	122b4 <mbedtls_platform_zeroize>
   12bde:	4b29      	ldr	r3, [pc, #164]	; (12c84 <cc_mbedtls_entropy_func+0x108>)
   12be0:	4648      	mov	r0, r9
   12be2:	681b      	ldr	r3, [r3, #0]
   12be4:	4798      	blx	r3
   12be6:	2800      	cmp	r0, #0
   12be8:	bf18      	it	ne
   12bea:	f06f 051d 	mvnne.w	r5, #29
   12bee:	4628      	mov	r0, r5
   12bf0:	b008      	add	sp, #32
   12bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12bf6:	281f      	cmp	r0, #31
   12bf8:	d9e8      	bls.n	12bcc <cc_mbedtls_entropy_func+0x50>
   12bfa:	466e      	mov	r6, sp
   12bfc:	4629      	mov	r1, r5
   12bfe:	2220      	movs	r2, #32
   12c00:	4630      	mov	r0, r6
   12c02:	f104 0a04 	add.w	sl, r4, #4
   12c06:	f002 f96d 	bl	14ee4 <memset>
   12c0a:	4631      	mov	r1, r6
   12c0c:	4650      	mov	r0, sl
   12c0e:	f000 fe0b 	bl	13828 <cc_mbedtls_sha256_finish>
   12c12:	4605      	mov	r5, r0
   12c14:	2800      	cmp	r0, #0
   12c16:	d1de      	bne.n	12bd6 <cc_mbedtls_entropy_func+0x5a>
   12c18:	4650      	mov	r0, sl
   12c1a:	f000 fdc1 	bl	137a0 <cc_mbedtls_sha256_free>
   12c1e:	4650      	mov	r0, sl
   12c20:	f000 fdaa 	bl	13778 <cc_mbedtls_sha256_init>
   12c24:	4629      	mov	r1, r5
   12c26:	4650      	mov	r0, sl
   12c28:	f000 fdc0 	bl	137ac <cc_mbedtls_sha256_starts>
   12c2c:	4605      	mov	r5, r0
   12c2e:	2800      	cmp	r0, #0
   12c30:	d1d1      	bne.n	12bd6 <cc_mbedtls_entropy_func+0x5a>
   12c32:	4650      	mov	r0, sl
   12c34:	2220      	movs	r2, #32
   12c36:	4631      	mov	r1, r6
   12c38:	f000 fdcc 	bl	137d4 <cc_mbedtls_sha256_update>
   12c3c:	4605      	mov	r5, r0
   12c3e:	2800      	cmp	r0, #0
   12c40:	d1c9      	bne.n	12bd6 <cc_mbedtls_entropy_func+0x5a>
   12c42:	4603      	mov	r3, r0
   12c44:	4632      	mov	r2, r6
   12c46:	2120      	movs	r1, #32
   12c48:	4630      	mov	r0, r6
   12c4a:	f000 fec5 	bl	139d8 <cc_mbedtls_sha256>
   12c4e:	4605      	mov	r5, r0
   12c50:	2800      	cmp	r0, #0
   12c52:	d1c0      	bne.n	12bd6 <cc_mbedtls_entropy_func+0x5a>
   12c54:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12c58:	463a      	mov	r2, r7
   12c5a:	2b00      	cmp	r3, #0
   12c5c:	bfc8      	it	gt
   12c5e:	2300      	movgt	r3, #0
   12c60:	4640      	mov	r0, r8
   12c62:	4631      	mov	r1, r6
   12c64:	bfc8      	it	gt
   12c66:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   12c6a:	f002 f930 	bl	14ece <memcpy>
   12c6e:	e7b2      	b.n	12bd6 <cc_mbedtls_entropy_func+0x5a>
   12c70:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   12c74:	466e      	mov	r6, sp
   12c76:	e7ae      	b.n	12bd6 <cc_mbedtls_entropy_func+0x5a>
   12c78:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   12c7c:	e7b7      	b.n	12bee <cc_mbedtls_entropy_func+0x72>
   12c7e:	bf00      	nop
   12c80:	200000f0 	.word	0x200000f0
   12c84:	200000f4 	.word	0x200000f4

00012c88 <RndStartupTest.constprop.0>:
   12c88:	b530      	push	{r4, r5, lr}
   12c8a:	b0c3      	sub	sp, #268	; 0x10c
   12c8c:	22dc      	movs	r2, #220	; 0xdc
   12c8e:	2100      	movs	r1, #0
   12c90:	a80b      	add	r0, sp, #44	; 0x2c
   12c92:	f002 f927 	bl	14ee4 <memset>
   12c96:	2228      	movs	r2, #40	; 0x28
   12c98:	2100      	movs	r1, #0
   12c9a:	a801      	add	r0, sp, #4
   12c9c:	f002 f922 	bl	14ee4 <memset>
   12ca0:	a801      	add	r0, sp, #4
   12ca2:	f000 fec1 	bl	13a28 <RNG_PLAT_SetUserRngParameters>
   12ca6:	4604      	mov	r4, r0
   12ca8:	b110      	cbz	r0, 12cb0 <RndStartupTest.constprop.0+0x28>
   12caa:	4620      	mov	r0, r4
   12cac:	b043      	add	sp, #268	; 0x10c
   12cae:	bd30      	pop	{r4, r5, pc}
   12cb0:	4d18      	ldr	r5, [pc, #96]	; (12d14 <RndStartupTest.constprop.0+0x8c>)
   12cb2:	f04f 31ff 	mov.w	r1, #4294967295
   12cb6:	6828      	ldr	r0, [r5, #0]
   12cb8:	f000 f93a 	bl	12f30 <CC_PalMutexLock>
   12cbc:	4604      	mov	r4, r0
   12cbe:	b9c0      	cbnz	r0, 12cf2 <RndStartupTest.constprop.0+0x6a>
   12cc0:	2000      	movs	r0, #0
   12cc2:	f000 f965 	bl	12f90 <CC_PalPowerSaveModeSelect>
   12cc6:	bb00      	cbnz	r0, 12d0a <RndStartupTest.constprop.0+0x82>
   12cc8:	4a13      	ldr	r2, [pc, #76]	; (12d18 <RndStartupTest.constprop.0+0x90>)
   12cca:	a901      	add	r1, sp, #4
   12ccc:	a80b      	add	r0, sp, #44	; 0x2c
   12cce:	f000 fc69 	bl	135a4 <LLF_RND_RunTrngStartupTest>
   12cd2:	4604      	mov	r4, r0
   12cd4:	2001      	movs	r0, #1
   12cd6:	f000 f95b 	bl	12f90 <CC_PalPowerSaveModeSelect>
   12cda:	b990      	cbnz	r0, 12d02 <RndStartupTest.constprop.0+0x7a>
   12cdc:	6828      	ldr	r0, [r5, #0]
   12cde:	f000 f92f 	bl	12f40 <CC_PalMutexUnlock>
   12ce2:	2800      	cmp	r0, #0
   12ce4:	d0e1      	beq.n	12caa <RndStartupTest.constprop.0+0x22>
   12ce6:	480d      	ldr	r0, [pc, #52]	; (12d1c <RndStartupTest.constprop.0+0x94>)
   12ce8:	f7ff f9d8 	bl	1209c <CC_PalAbort>
   12cec:	4620      	mov	r0, r4
   12cee:	b043      	add	sp, #268	; 0x10c
   12cf0:	bd30      	pop	{r4, r5, pc}
   12cf2:	480b      	ldr	r0, [pc, #44]	; (12d20 <RndStartupTest.constprop.0+0x98>)
   12cf4:	f7ff f9d2 	bl	1209c <CC_PalAbort>
   12cf8:	2c01      	cmp	r4, #1
   12cfa:	bf08      	it	eq
   12cfc:	2405      	moveq	r4, #5
   12cfe:	d0ed      	beq.n	12cdc <RndStartupTest.constprop.0+0x54>
   12d00:	e7de      	b.n	12cc0 <RndStartupTest.constprop.0+0x38>
   12d02:	4808      	ldr	r0, [pc, #32]	; (12d24 <RndStartupTest.constprop.0+0x9c>)
   12d04:	f7ff f9ca 	bl	1209c <CC_PalAbort>
   12d08:	e7e8      	b.n	12cdc <RndStartupTest.constprop.0+0x54>
   12d0a:	4807      	ldr	r0, [pc, #28]	; (12d28 <RndStartupTest.constprop.0+0xa0>)
   12d0c:	f7ff f9c6 	bl	1209c <CC_PalAbort>
   12d10:	e7da      	b.n	12cc8 <RndStartupTest.constprop.0+0x40>
   12d12:	bf00      	nop
   12d14:	200000e8 	.word	0x200000e8
   12d18:	20000e14 	.word	0x20000e14
   12d1c:	00015a44 	.word	0x00015a44
   12d20:	000159ec 	.word	0x000159ec
   12d24:	00015a24 	.word	0x00015a24
   12d28:	00015a04 	.word	0x00015a04

00012d2c <CC_LibInit>:
   12d2c:	b510      	push	{r4, lr}
   12d2e:	b082      	sub	sp, #8
   12d30:	f000 f854 	bl	12ddc <CC_HalInit>
   12d34:	b128      	cbz	r0, 12d42 <CC_LibInit+0x16>
   12d36:	f000 f8a3 	bl	12e80 <CC_PalTerminate>
   12d3a:	2403      	movs	r4, #3
   12d3c:	4620      	mov	r0, r4
   12d3e:	b002      	add	sp, #8
   12d40:	bd10      	pop	{r4, pc}
   12d42:	f000 f86f 	bl	12e24 <CC_PalInit>
   12d46:	b9d0      	cbnz	r0, 12d7e <CC_LibInit+0x52>
   12d48:	f000 f922 	bl	12f90 <CC_PalPowerSaveModeSelect>
   12d4c:	b9d8      	cbnz	r0, 12d86 <CC_LibInit+0x5a>
   12d4e:	4b1e      	ldr	r3, [pc, #120]	; (12dc8 <CC_LibInit+0x9c>)
   12d50:	681b      	ldr	r3, [r3, #0]
   12d52:	0e1b      	lsrs	r3, r3, #24
   12d54:	2bf0      	cmp	r3, #240	; 0xf0
   12d56:	d10a      	bne.n	12d6e <CC_LibInit+0x42>
   12d58:	4a1c      	ldr	r2, [pc, #112]	; (12dcc <CC_LibInit+0xa0>)
   12d5a:	4b1d      	ldr	r3, [pc, #116]	; (12dd0 <CC_LibInit+0xa4>)
   12d5c:	6812      	ldr	r2, [r2, #0]
   12d5e:	429a      	cmp	r2, r3
   12d60:	d029      	beq.n	12db6 <CC_LibInit+0x8a>
   12d62:	f000 f83d 	bl	12de0 <CC_HalTerminate>
   12d66:	2407      	movs	r4, #7
   12d68:	f000 f88a 	bl	12e80 <CC_PalTerminate>
   12d6c:	e7e6      	b.n	12d3c <CC_LibInit+0x10>
   12d6e:	2406      	movs	r4, #6
   12d70:	f000 f836 	bl	12de0 <CC_HalTerminate>
   12d74:	f000 f884 	bl	12e80 <CC_PalTerminate>
   12d78:	4620      	mov	r0, r4
   12d7a:	b002      	add	sp, #8
   12d7c:	bd10      	pop	{r4, pc}
   12d7e:	2404      	movs	r4, #4
   12d80:	4620      	mov	r0, r4
   12d82:	b002      	add	sp, #8
   12d84:	bd10      	pop	{r4, pc}
   12d86:	f000 f82b 	bl	12de0 <CC_HalTerminate>
   12d8a:	f000 f879 	bl	12e80 <CC_PalTerminate>
   12d8e:	f7ff ff7b 	bl	12c88 <RndStartupTest.constprop.0>
   12d92:	4604      	mov	r4, r0
   12d94:	b958      	cbnz	r0, 12dae <CC_LibInit+0x82>
   12d96:	4602      	mov	r2, r0
   12d98:	4601      	mov	r1, r0
   12d9a:	f7ff f9a3 	bl	120e4 <nrf_cc3xx_platform_ctr_drbg_init>
   12d9e:	b930      	cbnz	r0, 12dae <CC_LibInit+0x82>
   12da0:	2268      	movs	r2, #104	; 0x68
   12da2:	490c      	ldr	r1, [pc, #48]	; (12dd4 <CC_LibInit+0xa8>)
   12da4:	ab01      	add	r3, sp, #4
   12da6:	f7ff f9d1 	bl	1214c <nrf_cc3xx_platform_ctr_drbg_get>
   12daa:	2800      	cmp	r0, #0
   12dac:	d0c6      	beq.n	12d3c <CC_LibInit+0x10>
   12dae:	2405      	movs	r4, #5
   12db0:	4620      	mov	r0, r4
   12db2:	b002      	add	sp, #8
   12db4:	bd10      	pop	{r4, pc}
   12db6:	2001      	movs	r0, #1
   12db8:	f000 f8ea 	bl	12f90 <CC_PalPowerSaveModeSelect>
   12dbc:	2800      	cmp	r0, #0
   12dbe:	d1e2      	bne.n	12d86 <CC_LibInit+0x5a>
   12dc0:	4b05      	ldr	r3, [pc, #20]	; (12dd8 <CC_LibInit+0xac>)
   12dc2:	6018      	str	r0, [r3, #0]
   12dc4:	e7e3      	b.n	12d8e <CC_LibInit+0x62>
   12dc6:	bf00      	nop
   12dc8:	50841928 	.word	0x50841928
   12dcc:	50841a24 	.word	0x50841a24
   12dd0:	20e00000 	.word	0x20e00000
   12dd4:	20000dac 	.word	0x20000dac
   12dd8:	50841a0c 	.word	0x50841a0c

00012ddc <CC_HalInit>:
   12ddc:	2000      	movs	r0, #0
   12dde:	4770      	bx	lr

00012de0 <CC_HalTerminate>:
   12de0:	2000      	movs	r0, #0
   12de2:	4770      	bx	lr

00012de4 <CC_HalClearInterruptBit>:
   12de4:	0543      	lsls	r3, r0, #21
   12de6:	d503      	bpl.n	12df0 <CC_HalClearInterruptBit+0xc>
   12de8:	f04f 32ff 	mov.w	r2, #4294967295
   12dec:	4b02      	ldr	r3, [pc, #8]	; (12df8 <CC_HalClearInterruptBit+0x14>)
   12dee:	601a      	str	r2, [r3, #0]
   12df0:	4b02      	ldr	r3, [pc, #8]	; (12dfc <CC_HalClearInterruptBit+0x18>)
   12df2:	6018      	str	r0, [r3, #0]
   12df4:	4770      	bx	lr
   12df6:	bf00      	nop
   12df8:	50841108 	.word	0x50841108
   12dfc:	50841a08 	.word	0x50841a08

00012e00 <CC_HalMaskInterrupt>:
   12e00:	4b01      	ldr	r3, [pc, #4]	; (12e08 <CC_HalMaskInterrupt+0x8>)
   12e02:	6018      	str	r0, [r3, #0]
   12e04:	4770      	bx	lr
   12e06:	bf00      	nop
   12e08:	50841a04 	.word	0x50841a04

00012e0c <CC_HalWaitInterrupt>:
   12e0c:	b108      	cbz	r0, 12e12 <CC_HalWaitInterrupt+0x6>
   12e0e:	f000 b86d 	b.w	12eec <CC_PalWaitInterrupt>
   12e12:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   12e16:	4770      	bx	lr

00012e18 <CC_HalWaitInterruptRND>:
   12e18:	b108      	cbz	r0, 12e1e <CC_HalWaitInterruptRND+0x6>
   12e1a:	f000 b84f 	b.w	12ebc <CC_PalWaitInterruptRND>
   12e1e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   12e22:	4770      	bx	lr

00012e24 <CC_PalInit>:
   12e24:	b510      	push	{r4, lr}
   12e26:	4811      	ldr	r0, [pc, #68]	; (12e6c <CC_PalInit+0x48>)
   12e28:	f000 f86e 	bl	12f08 <CC_PalMutexCreate>
   12e2c:	b100      	cbz	r0, 12e30 <CC_PalInit+0xc>
   12e2e:	bd10      	pop	{r4, pc}
   12e30:	480f      	ldr	r0, [pc, #60]	; (12e70 <CC_PalInit+0x4c>)
   12e32:	f000 f869 	bl	12f08 <CC_PalMutexCreate>
   12e36:	2800      	cmp	r0, #0
   12e38:	d1f9      	bne.n	12e2e <CC_PalInit+0xa>
   12e3a:	4c0e      	ldr	r4, [pc, #56]	; (12e74 <CC_PalInit+0x50>)
   12e3c:	4620      	mov	r0, r4
   12e3e:	f000 f863 	bl	12f08 <CC_PalMutexCreate>
   12e42:	2800      	cmp	r0, #0
   12e44:	d1f3      	bne.n	12e2e <CC_PalInit+0xa>
   12e46:	4b0c      	ldr	r3, [pc, #48]	; (12e78 <CC_PalInit+0x54>)
   12e48:	480c      	ldr	r0, [pc, #48]	; (12e7c <CC_PalInit+0x58>)
   12e4a:	601c      	str	r4, [r3, #0]
   12e4c:	f000 f85c 	bl	12f08 <CC_PalMutexCreate>
   12e50:	4601      	mov	r1, r0
   12e52:	2800      	cmp	r0, #0
   12e54:	d1eb      	bne.n	12e2e <CC_PalInit+0xa>
   12e56:	f000 f82d 	bl	12eb4 <CC_PalDmaInit>
   12e5a:	4604      	mov	r4, r0
   12e5c:	b108      	cbz	r0, 12e62 <CC_PalInit+0x3e>
   12e5e:	4620      	mov	r0, r4
   12e60:	bd10      	pop	{r4, pc}
   12e62:	f000 f877 	bl	12f54 <CC_PalPowerSaveModeInit>
   12e66:	4620      	mov	r0, r4
   12e68:	e7fa      	b.n	12e60 <CC_PalInit+0x3c>
   12e6a:	bf00      	nop
   12e6c:	200000e4 	.word	0x200000e4
   12e70:	200000d8 	.word	0x200000d8
   12e74:	200000e0 	.word	0x200000e0
   12e78:	200000e8 	.word	0x200000e8
   12e7c:	200000dc 	.word	0x200000dc

00012e80 <CC_PalTerminate>:
   12e80:	b508      	push	{r3, lr}
   12e82:	4808      	ldr	r0, [pc, #32]	; (12ea4 <CC_PalTerminate+0x24>)
   12e84:	f000 f84a 	bl	12f1c <CC_PalMutexDestroy>
   12e88:	4807      	ldr	r0, [pc, #28]	; (12ea8 <CC_PalTerminate+0x28>)
   12e8a:	f000 f847 	bl	12f1c <CC_PalMutexDestroy>
   12e8e:	4807      	ldr	r0, [pc, #28]	; (12eac <CC_PalTerminate+0x2c>)
   12e90:	f000 f844 	bl	12f1c <CC_PalMutexDestroy>
   12e94:	4806      	ldr	r0, [pc, #24]	; (12eb0 <CC_PalTerminate+0x30>)
   12e96:	f000 f841 	bl	12f1c <CC_PalMutexDestroy>
   12e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12e9e:	f000 b80b 	b.w	12eb8 <CC_PalDmaTerminate>
   12ea2:	bf00      	nop
   12ea4:	200000e4 	.word	0x200000e4
   12ea8:	200000d8 	.word	0x200000d8
   12eac:	200000e0 	.word	0x200000e0
   12eb0:	200000dc 	.word	0x200000dc

00012eb4 <CC_PalDmaInit>:
   12eb4:	2000      	movs	r0, #0
   12eb6:	4770      	bx	lr

00012eb8 <CC_PalDmaTerminate>:
   12eb8:	4770      	bx	lr
   12eba:	bf00      	nop

00012ebc <CC_PalWaitInterruptRND>:
   12ebc:	4602      	mov	r2, r0
   12ebe:	4807      	ldr	r0, [pc, #28]	; (12edc <CC_PalWaitInterruptRND+0x20>)
   12ec0:	6803      	ldr	r3, [r0, #0]
   12ec2:	4213      	tst	r3, r2
   12ec4:	d0fc      	beq.n	12ec0 <CC_PalWaitInterruptRND+0x4>
   12ec6:	b121      	cbz	r1, 12ed2 <CC_PalWaitInterruptRND+0x16>
   12ec8:	4b05      	ldr	r3, [pc, #20]	; (12ee0 <CC_PalWaitInterruptRND+0x24>)
   12eca:	4806      	ldr	r0, [pc, #24]	; (12ee4 <CC_PalWaitInterruptRND+0x28>)
   12ecc:	681b      	ldr	r3, [r3, #0]
   12ece:	600b      	str	r3, [r1, #0]
   12ed0:	6003      	str	r3, [r0, #0]
   12ed2:	4b05      	ldr	r3, [pc, #20]	; (12ee8 <CC_PalWaitInterruptRND+0x2c>)
   12ed4:	2000      	movs	r0, #0
   12ed6:	601a      	str	r2, [r3, #0]
   12ed8:	4770      	bx	lr
   12eda:	bf00      	nop
   12edc:	50841a00 	.word	0x50841a00
   12ee0:	50841104 	.word	0x50841104
   12ee4:	50841108 	.word	0x50841108
   12ee8:	50841a08 	.word	0x50841a08

00012eec <CC_PalWaitInterrupt>:
   12eec:	4602      	mov	r2, r0
   12eee:	4904      	ldr	r1, [pc, #16]	; (12f00 <CC_PalWaitInterrupt+0x14>)
   12ef0:	680b      	ldr	r3, [r1, #0]
   12ef2:	421a      	tst	r2, r3
   12ef4:	d0fc      	beq.n	12ef0 <CC_PalWaitInterrupt+0x4>
   12ef6:	4b03      	ldr	r3, [pc, #12]	; (12f04 <CC_PalWaitInterrupt+0x18>)
   12ef8:	2000      	movs	r0, #0
   12efa:	601a      	str	r2, [r3, #0]
   12efc:	4770      	bx	lr
   12efe:	bf00      	nop
   12f00:	50841a00 	.word	0x50841a00
   12f04:	50841a08 	.word	0x50841a08

00012f08 <CC_PalMutexCreate>:
   12f08:	b508      	push	{r3, lr}
   12f0a:	4b03      	ldr	r3, [pc, #12]	; (12f18 <CC_PalMutexCreate+0x10>)
   12f0c:	6802      	ldr	r2, [r0, #0]
   12f0e:	681b      	ldr	r3, [r3, #0]
   12f10:	6810      	ldr	r0, [r2, #0]
   12f12:	4798      	blx	r3
   12f14:	2000      	movs	r0, #0
   12f16:	bd08      	pop	{r3, pc}
   12f18:	20000098 	.word	0x20000098

00012f1c <CC_PalMutexDestroy>:
   12f1c:	b508      	push	{r3, lr}
   12f1e:	4b03      	ldr	r3, [pc, #12]	; (12f2c <CC_PalMutexDestroy+0x10>)
   12f20:	6802      	ldr	r2, [r0, #0]
   12f22:	685b      	ldr	r3, [r3, #4]
   12f24:	6810      	ldr	r0, [r2, #0]
   12f26:	4798      	blx	r3
   12f28:	2000      	movs	r0, #0
   12f2a:	bd08      	pop	{r3, pc}
   12f2c:	20000098 	.word	0x20000098

00012f30 <CC_PalMutexLock>:
   12f30:	4b02      	ldr	r3, [pc, #8]	; (12f3c <CC_PalMutexLock+0xc>)
   12f32:	6802      	ldr	r2, [r0, #0]
   12f34:	689b      	ldr	r3, [r3, #8]
   12f36:	6810      	ldr	r0, [r2, #0]
   12f38:	4718      	bx	r3
   12f3a:	bf00      	nop
   12f3c:	20000098 	.word	0x20000098

00012f40 <CC_PalMutexUnlock>:
   12f40:	b508      	push	{r3, lr}
   12f42:	4b03      	ldr	r3, [pc, #12]	; (12f50 <CC_PalMutexUnlock+0x10>)
   12f44:	6802      	ldr	r2, [r0, #0]
   12f46:	68db      	ldr	r3, [r3, #12]
   12f48:	6810      	ldr	r0, [r2, #0]
   12f4a:	4798      	blx	r3
   12f4c:	2000      	movs	r0, #0
   12f4e:	bd08      	pop	{r3, pc}
   12f50:	20000098 	.word	0x20000098

00012f54 <CC_PalPowerSaveModeInit>:
   12f54:	b570      	push	{r4, r5, r6, lr}
   12f56:	4c09      	ldr	r4, [pc, #36]	; (12f7c <CC_PalPowerSaveModeInit+0x28>)
   12f58:	4d09      	ldr	r5, [pc, #36]	; (12f80 <CC_PalPowerSaveModeInit+0x2c>)
   12f5a:	6920      	ldr	r0, [r4, #16]
   12f5c:	68ab      	ldr	r3, [r5, #8]
   12f5e:	4798      	blx	r3
   12f60:	b118      	cbz	r0, 12f6a <CC_PalPowerSaveModeInit+0x16>
   12f62:	4b08      	ldr	r3, [pc, #32]	; (12f84 <CC_PalPowerSaveModeInit+0x30>)
   12f64:	4808      	ldr	r0, [pc, #32]	; (12f88 <CC_PalPowerSaveModeInit+0x34>)
   12f66:	685b      	ldr	r3, [r3, #4]
   12f68:	4798      	blx	r3
   12f6a:	2100      	movs	r1, #0
   12f6c:	4a07      	ldr	r2, [pc, #28]	; (12f8c <CC_PalPowerSaveModeInit+0x38>)
   12f6e:	68eb      	ldr	r3, [r5, #12]
   12f70:	6011      	str	r1, [r2, #0]
   12f72:	6920      	ldr	r0, [r4, #16]
   12f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12f78:	4718      	bx	r3
   12f7a:	bf00      	nop
   12f7c:	200000a8 	.word	0x200000a8
   12f80:	20000098 	.word	0x20000098
   12f84:	20000088 	.word	0x20000088
   12f88:	00015a5c 	.word	0x00015a5c
   12f8c:	20001034 	.word	0x20001034

00012f90 <CC_PalPowerSaveModeSelect>:
   12f90:	b570      	push	{r4, r5, r6, lr}
   12f92:	4d1a      	ldr	r5, [pc, #104]	; (12ffc <CC_PalPowerSaveModeSelect+0x6c>)
   12f94:	4e1a      	ldr	r6, [pc, #104]	; (13000 <CC_PalPowerSaveModeSelect+0x70>)
   12f96:	4604      	mov	r4, r0
   12f98:	68b2      	ldr	r2, [r6, #8]
   12f9a:	6928      	ldr	r0, [r5, #16]
   12f9c:	4790      	blx	r2
   12f9e:	b9f0      	cbnz	r0, 12fde <CC_PalPowerSaveModeSelect+0x4e>
   12fa0:	b15c      	cbz	r4, 12fba <CC_PalPowerSaveModeSelect+0x2a>
   12fa2:	4c18      	ldr	r4, [pc, #96]	; (13004 <CC_PalPowerSaveModeSelect+0x74>)
   12fa4:	6823      	ldr	r3, [r4, #0]
   12fa6:	b1ab      	cbz	r3, 12fd4 <CC_PalPowerSaveModeSelect+0x44>
   12fa8:	2b01      	cmp	r3, #1
   12faa:	d01a      	beq.n	12fe2 <CC_PalPowerSaveModeSelect+0x52>
   12fac:	3b01      	subs	r3, #1
   12fae:	6023      	str	r3, [r4, #0]
   12fb0:	6928      	ldr	r0, [r5, #16]
   12fb2:	68f3      	ldr	r3, [r6, #12]
   12fb4:	4798      	blx	r3
   12fb6:	2000      	movs	r0, #0
   12fb8:	bd70      	pop	{r4, r5, r6, pc}
   12fba:	4c12      	ldr	r4, [pc, #72]	; (13004 <CC_PalPowerSaveModeSelect+0x74>)
   12fbc:	6821      	ldr	r1, [r4, #0]
   12fbe:	b939      	cbnz	r1, 12fd0 <CC_PalPowerSaveModeSelect+0x40>
   12fc0:	2001      	movs	r0, #1
   12fc2:	4b11      	ldr	r3, [pc, #68]	; (13008 <CC_PalPowerSaveModeSelect+0x78>)
   12fc4:	4a11      	ldr	r2, [pc, #68]	; (1300c <CC_PalPowerSaveModeSelect+0x7c>)
   12fc6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   12fca:	6813      	ldr	r3, [r2, #0]
   12fcc:	2b00      	cmp	r3, #0
   12fce:	d1fc      	bne.n	12fca <CC_PalPowerSaveModeSelect+0x3a>
   12fd0:	3101      	adds	r1, #1
   12fd2:	6021      	str	r1, [r4, #0]
   12fd4:	68f3      	ldr	r3, [r6, #12]
   12fd6:	6928      	ldr	r0, [r5, #16]
   12fd8:	4798      	blx	r3
   12fda:	2000      	movs	r0, #0
   12fdc:	bd70      	pop	{r4, r5, r6, pc}
   12fde:	480c      	ldr	r0, [pc, #48]	; (13010 <CC_PalPowerSaveModeSelect+0x80>)
   12fe0:	bd70      	pop	{r4, r5, r6, pc}
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <CC_PalPowerSaveModeSelect+0x7c>)
   12fe4:	6813      	ldr	r3, [r2, #0]
   12fe6:	2b00      	cmp	r3, #0
   12fe8:	d1fc      	bne.n	12fe4 <CC_PalPowerSaveModeSelect+0x54>
   12fea:	4a07      	ldr	r2, [pc, #28]	; (13008 <CC_PalPowerSaveModeSelect+0x78>)
   12fec:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   12ff0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12ff4:	f7ff ff04 	bl	12e00 <CC_HalMaskInterrupt>
   12ff8:	6823      	ldr	r3, [r4, #0]
   12ffa:	e7d7      	b.n	12fac <CC_PalPowerSaveModeSelect+0x1c>
   12ffc:	200000a8 	.word	0x200000a8
   13000:	20000098 	.word	0x20000098
   13004:	20001034 	.word	0x20001034
   13008:	50840000 	.word	0x50840000
   1300c:	50841910 	.word	0x50841910
   13010:	ffff8fe9 	.word	0xffff8fe9

00013014 <mutex_init>:
   13014:	4b01      	ldr	r3, [pc, #4]	; (1301c <mutex_init+0x8>)
   13016:	681b      	ldr	r3, [r3, #0]
   13018:	4718      	bx	r3
   1301a:	bf00      	nop
   1301c:	20000098 	.word	0x20000098

00013020 <mutex_lock>:
   13020:	4b01      	ldr	r3, [pc, #4]	; (13028 <mutex_lock+0x8>)
   13022:	689b      	ldr	r3, [r3, #8]
   13024:	4718      	bx	r3
   13026:	bf00      	nop
   13028:	20000098 	.word	0x20000098

0001302c <mutex_unlock>:
   1302c:	4b01      	ldr	r3, [pc, #4]	; (13034 <mutex_unlock+0x8>)
   1302e:	68db      	ldr	r3, [r3, #12]
   13030:	4718      	bx	r3
   13032:	bf00      	nop
   13034:	20000098 	.word	0x20000098

00013038 <startTrngHW>:
   13038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1303c:	2800      	cmp	r0, #0
   1303e:	d07c      	beq.n	1313a <startTrngHW+0x102>
   13040:	460c      	mov	r4, r1
   13042:	2900      	cmp	r1, #0
   13044:	d079      	beq.n	1313a <startTrngHW+0x102>
   13046:	461d      	mov	r5, r3
   13048:	2b00      	cmp	r3, #0
   1304a:	d076      	beq.n	1313a <startTrngHW+0x102>
   1304c:	4606      	mov	r6, r0
   1304e:	b122      	cbz	r2, 1305a <startTrngHW+0x22>
   13050:	2201      	movs	r2, #1
   13052:	2300      	movs	r3, #0
   13054:	602a      	str	r2, [r5, #0]
   13056:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   1305a:	682b      	ldr	r3, [r5, #0]
   1305c:	2b00      	cmp	r3, #0
   1305e:	d068      	beq.n	13132 <startTrngHW+0xfa>
   13060:	4629      	mov	r1, r5
   13062:	4620      	mov	r0, r4
   13064:	f000 fddc 	bl	13c20 <LLF_RND_GetFastestRosc>
   13068:	4607      	mov	r7, r0
   1306a:	2800      	cmp	r0, #0
   1306c:	d162      	bne.n	13134 <startTrngHW+0xfc>
   1306e:	4621      	mov	r1, r4
   13070:	6828      	ldr	r0, [r5, #0]
   13072:	f000 fdb7 	bl	13be4 <LLF_RND_GetRoscSampleCnt>
   13076:	4607      	mov	r7, r0
   13078:	2800      	cmp	r0, #0
   1307a:	d15b      	bne.n	13134 <startTrngHW+0xfc>
   1307c:	682b      	ldr	r3, [r5, #0]
   1307e:	2b08      	cmp	r3, #8
   13080:	d06a      	beq.n	13158 <startTrngHW+0x120>
   13082:	2b04      	cmp	r3, #4
   13084:	d06b      	beq.n	1315e <startTrngHW+0x126>
   13086:	f1a3 0802 	sub.w	r8, r3, #2
   1308a:	fab8 f888 	clz	r8, r8
   1308e:	ea4f 1858 	mov.w	r8, r8, lsr #5
   13092:	2301      	movs	r3, #1
   13094:	469c      	mov	ip, r3
   13096:	4a33      	ldr	r2, [pc, #204]	; (13164 <startTrngHW+0x12c>)
   13098:	4933      	ldr	r1, [pc, #204]	; (13168 <startTrngHW+0x130>)
   1309a:	6013      	str	r3, [r2, #0]
   1309c:	4610      	mov	r0, r2
   1309e:	600b      	str	r3, [r1, #0]
   130a0:	3a94      	subs	r2, #148	; 0x94
   130a2:	f8c0 c000 	str.w	ip, [r0]
   130a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   130a8:	6013      	str	r3, [r2, #0]
   130aa:	6811      	ldr	r1, [r2, #0]
   130ac:	428b      	cmp	r3, r1
   130ae:	d1f8      	bne.n	130a2 <startTrngHW+0x6a>
   130b0:	f04f 0900 	mov.w	r9, #0
   130b4:	4b2d      	ldr	r3, [pc, #180]	; (1316c <startTrngHW+0x134>)
   130b6:	f04f 30ff 	mov.w	r0, #4294967295
   130ba:	f8c3 9000 	str.w	r9, [r3]
   130be:	f7ff fe91 	bl	12de4 <CC_HalClearInterruptBit>
   130c2:	f06f 021b 	mvn.w	r2, #27
   130c6:	4b2a      	ldr	r3, [pc, #168]	; (13170 <startTrngHW+0x138>)
   130c8:	4648      	mov	r0, r9
   130ca:	601a      	str	r2, [r3, #0]
   130cc:	f7ff fe98 	bl	12e00 <CC_HalMaskInterrupt>
   130d0:	4a28      	ldr	r2, [pc, #160]	; (13174 <startTrngHW+0x13c>)
   130d2:	4b29      	ldr	r3, [pc, #164]	; (13178 <startTrngHW+0x140>)
   130d4:	f8c2 8000 	str.w	r8, [r2]
   130d8:	6818      	ldr	r0, [r3, #0]
   130da:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   130de:	f7ff fe8f 	bl	12e00 <CC_HalMaskInterrupt>
   130e2:	220a      	movs	r2, #10
   130e4:	4b25      	ldr	r3, [pc, #148]	; (1317c <startTrngHW+0x144>)
   130e6:	601a      	str	r2, [r3, #0]
   130e8:	9a08      	ldr	r2, [sp, #32]
   130ea:	6923      	ldr	r3, [r4, #16]
   130ec:	2a01      	cmp	r2, #1
   130ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
   130f0:	d027      	beq.n	13142 <startTrngHW+0x10a>
   130f2:	4a23      	ldr	r2, [pc, #140]	; (13180 <startTrngHW+0x148>)
   130f4:	fba2 2303 	umull	r2, r3, r2, r3
   130f8:	091b      	lsrs	r3, r3, #4
   130fa:	2201      	movs	r2, #1
   130fc:	fb03 f301 	mul.w	r3, r3, r1
   13100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13104:	491f      	ldr	r1, [pc, #124]	; (13184 <startTrngHW+0x14c>)
   13106:	03db      	lsls	r3, r3, #15
   13108:	099b      	lsrs	r3, r3, #6
   1310a:	600b      	str	r3, [r1, #0]
   1310c:	4b17      	ldr	r3, [pc, #92]	; (1316c <startTrngHW+0x134>)
   1310e:	4638      	mov	r0, r7
   13110:	601a      	str	r2, [r3, #0]
   13112:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   13116:	682a      	ldr	r2, [r5, #0]
   13118:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1311c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   13120:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   13124:	682a      	ldr	r2, [r5, #0]
   13126:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1312a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1312e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13132:	4f15      	ldr	r7, [pc, #84]	; (13188 <startTrngHW+0x150>)
   13134:	4638      	mov	r0, r7
   13136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1313a:	4f14      	ldr	r7, [pc, #80]	; (1318c <startTrngHW+0x154>)
   1313c:	4638      	mov	r0, r7
   1313e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13142:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13146:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   1314a:	3201      	adds	r2, #1
   1314c:	d002      	beq.n	13154 <startTrngHW+0x11c>
   1314e:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   13152:	e7ce      	b.n	130f2 <startTrngHW+0xba>
   13154:	2316      	movs	r3, #22
   13156:	e7d0      	b.n	130fa <startTrngHW+0xc2>
   13158:	f04f 0803 	mov.w	r8, #3
   1315c:	e799      	b.n	13092 <startTrngHW+0x5a>
   1315e:	f04f 0802 	mov.w	r8, #2
   13162:	e796      	b.n	13092 <startTrngHW+0x5a>
   13164:	508411c4 	.word	0x508411c4
   13168:	50841140 	.word	0x50841140
   1316c:	5084112c 	.word	0x5084112c
   13170:	50841100 	.word	0x50841100
   13174:	5084110c 	.word	0x5084110c
   13178:	50841a04 	.word	0x50841a04
   1317c:	50841138 	.word	0x50841138
   13180:	aaaaaaab 	.word	0xaaaaaaab
   13184:	508411d8 	.word	0x508411d8
   13188:	00f10c31 	.word	0x00f10c31
   1318c:	00f10c35 	.word	0x00f10c35

00013190 <LLF_RND_RepetitionCounterTest.part.0>:
   13190:	b4f0      	push	{r4, r5, r6, r7}
   13192:	2400      	movs	r4, #0
   13194:	00c9      	lsls	r1, r1, #3
   13196:	4626      	mov	r6, r4
   13198:	4627      	mov	r7, r4
   1319a:	f101 3cff 	add.w	ip, r1, #4294967295
   1319e:	e006      	b.n	131ae <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   131a0:	429f      	cmp	r7, r3
   131a2:	d015      	beq.n	131d0 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   131a4:	2601      	movs	r6, #1
   131a6:	4565      	cmp	r5, ip
   131a8:	d818      	bhi.n	131dc <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   131aa:	462c      	mov	r4, r5
   131ac:	461f      	mov	r7, r3
   131ae:	0963      	lsrs	r3, r4, #5
   131b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   131b4:	f004 011f 	and.w	r1, r4, #31
   131b8:	40cb      	lsrs	r3, r1
   131ba:	291f      	cmp	r1, #31
   131bc:	f104 0501 	add.w	r5, r4, #1
   131c0:	bf18      	it	ne
   131c2:	f003 0301 	andne.w	r3, r3, #1
   131c6:	2c00      	cmp	r4, #0
   131c8:	d1ea      	bne.n	131a0 <LLF_RND_RepetitionCounterTest.part.0+0x10>
   131ca:	2601      	movs	r6, #1
   131cc:	4635      	mov	r5, r6
   131ce:	e7ec      	b.n	131aa <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   131d0:	3601      	adds	r6, #1
   131d2:	4296      	cmp	r6, r2
   131d4:	d1e7      	bne.n	131a6 <LLF_RND_RepetitionCounterTest.part.0+0x16>
   131d6:	4803      	ldr	r0, [pc, #12]	; (131e4 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   131d8:	bcf0      	pop	{r4, r5, r6, r7}
   131da:	4770      	bx	lr
   131dc:	2000      	movs	r0, #0
   131de:	bcf0      	pop	{r4, r5, r6, r7}
   131e0:	4770      	bx	lr
   131e2:	bf00      	nop
   131e4:	00f10c36 	.word	0x00f10c36

000131e8 <LLF_RND_AdaptiveProportionTest>:
   131e8:	2800      	cmp	r0, #0
   131ea:	d05f      	beq.n	132ac <LLF_RND_AdaptiveProportionTest+0xc4>
   131ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131f0:	1e4c      	subs	r4, r1, #1
   131f2:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   131f6:	d226      	bcs.n	13246 <LLF_RND_AdaptiveProportionTest+0x5e>
   131f8:	b32b      	cbz	r3, 13246 <LLF_RND_AdaptiveProportionTest+0x5e>
   131fa:	b322      	cbz	r2, 13246 <LLF_RND_AdaptiveProportionTest+0x5e>
   131fc:	00cc      	lsls	r4, r1, #3
   131fe:	2b01      	cmp	r3, #1
   13200:	f104 3eff 	add.w	lr, r4, #4294967295
   13204:	d02f      	beq.n	13266 <LLF_RND_AdaptiveProportionTest+0x7e>
   13206:	2100      	movs	r1, #0
   13208:	468c      	mov	ip, r1
   1320a:	460f      	mov	r7, r1
   1320c:	460d      	mov	r5, r1
   1320e:	f103 38ff 	add.w	r8, r3, #4294967295
   13212:	094c      	lsrs	r4, r1, #5
   13214:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   13218:	f001 061f 	and.w	r6, r1, #31
   1321c:	40f4      	lsrs	r4, r6
   1321e:	2e1f      	cmp	r6, #31
   13220:	bf18      	it	ne
   13222:	f004 0401 	andne.w	r4, r4, #1
   13226:	b921      	cbnz	r1, 13232 <LLF_RND_AdaptiveProportionTest+0x4a>
   13228:	2501      	movs	r5, #1
   1322a:	46ac      	mov	ip, r5
   1322c:	4629      	mov	r1, r5
   1322e:	4627      	mov	r7, r4
   13230:	e7ef      	b.n	13212 <LLF_RND_AdaptiveProportionTest+0x2a>
   13232:	42ab      	cmp	r3, r5
   13234:	d013      	beq.n	1325e <LLF_RND_AdaptiveProportionTest+0x76>
   13236:	42a7      	cmp	r7, r4
   13238:	d101      	bne.n	1323e <LLF_RND_AdaptiveProportionTest+0x56>
   1323a:	f10c 0c01 	add.w	ip, ip, #1
   1323e:	4545      	cmp	r5, r8
   13240:	d104      	bne.n	1324c <LLF_RND_AdaptiveProportionTest+0x64>
   13242:	4562      	cmp	r2, ip
   13244:	d202      	bcs.n	1324c <LLF_RND_AdaptiveProportionTest+0x64>
   13246:	481a      	ldr	r0, [pc, #104]	; (132b0 <LLF_RND_AdaptiveProportionTest+0xc8>)
   13248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1324c:	463c      	mov	r4, r7
   1324e:	3101      	adds	r1, #1
   13250:	458e      	cmp	lr, r1
   13252:	f105 0501 	add.w	r5, r5, #1
   13256:	d2ea      	bcs.n	1322e <LLF_RND_AdaptiveProportionTest+0x46>
   13258:	2000      	movs	r0, #0
   1325a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1325e:	2500      	movs	r5, #0
   13260:	f04f 0c01 	mov.w	ip, #1
   13264:	e7f3      	b.n	1324e <LLF_RND_AdaptiveProportionTest+0x66>
   13266:	2600      	movs	r6, #0
   13268:	46b4      	mov	ip, r6
   1326a:	4637      	mov	r7, r6
   1326c:	4631      	mov	r1, r6
   1326e:	094b      	lsrs	r3, r1, #5
   13270:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13274:	f001 051f 	and.w	r5, r1, #31
   13278:	40eb      	lsrs	r3, r5
   1327a:	2d1f      	cmp	r5, #31
   1327c:	bf18      	it	ne
   1327e:	f003 0301 	andne.w	r3, r3, #1
   13282:	b139      	cbz	r1, 13294 <LLF_RND_AdaptiveProportionTest+0xac>
   13284:	b95f      	cbnz	r7, 1329e <LLF_RND_AdaptiveProportionTest+0xb6>
   13286:	459c      	cmp	ip, r3
   13288:	d001      	beq.n	1328e <LLF_RND_AdaptiveProportionTest+0xa6>
   1328a:	4663      	mov	r3, ip
   1328c:	e008      	b.n	132a0 <LLF_RND_AdaptiveProportionTest+0xb8>
   1328e:	4663      	mov	r3, ip
   13290:	3601      	adds	r6, #1
   13292:	e005      	b.n	132a0 <LLF_RND_AdaptiveProportionTest+0xb8>
   13294:	2601      	movs	r6, #1
   13296:	4631      	mov	r1, r6
   13298:	469c      	mov	ip, r3
   1329a:	2701      	movs	r7, #1
   1329c:	e7e7      	b.n	1326e <LLF_RND_AdaptiveProportionTest+0x86>
   1329e:	463e      	mov	r6, r7
   132a0:	42b2      	cmp	r2, r6
   132a2:	d3d0      	bcc.n	13246 <LLF_RND_AdaptiveProportionTest+0x5e>
   132a4:	3101      	adds	r1, #1
   132a6:	42a1      	cmp	r1, r4
   132a8:	d1f6      	bne.n	13298 <LLF_RND_AdaptiveProportionTest+0xb0>
   132aa:	e7d5      	b.n	13258 <LLF_RND_AdaptiveProportionTest+0x70>
   132ac:	4800      	ldr	r0, [pc, #0]	; (132b0 <LLF_RND_AdaptiveProportionTest+0xc8>)
   132ae:	4770      	bx	lr
   132b0:	00f10c37 	.word	0x00f10c37

000132b4 <getTrngSource>:
   132b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132b8:	b08d      	sub	sp, #52	; 0x34
   132ba:	9e18      	ldr	r6, [sp, #96]	; 0x60
   132bc:	4607      	mov	r7, r0
   132be:	460c      	mov	r4, r1
   132c0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   132c2:	2e00      	cmp	r6, #0
   132c4:	d14d      	bne.n	13362 <getTrngSource+0xae>
   132c6:	f8d1 b010 	ldr.w	fp, [r1, #16]
   132ca:	2100      	movs	r1, #0
   132cc:	601d      	str	r5, [r3, #0]
   132ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
   132d0:	6019      	str	r1, [r3, #0]
   132d2:	2a00      	cmp	r2, #0
   132d4:	f000 8123 	beq.w	1351e <getTrngSource+0x26a>
   132d8:	4a9d      	ldr	r2, [pc, #628]	; (13550 <getTrngSource+0x29c>)
   132da:	4b9e      	ldr	r3, [pc, #632]	; (13554 <getTrngSource+0x2a0>)
   132dc:	6811      	ldr	r1, [r2, #0]
   132de:	6a62      	ldr	r2, [r4, #36]	; 0x24
   132e0:	681b      	ldr	r3, [r3, #0]
   132e2:	429a      	cmp	r2, r3
   132e4:	d148      	bne.n	13378 <getTrngSource+0xc4>
   132e6:	290a      	cmp	r1, #10
   132e8:	d146      	bne.n	13378 <getTrngSource+0xc4>
   132ea:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   132ee:	9304      	str	r3, [sp, #16]
   132f0:	2304      	movs	r3, #4
   132f2:	46b8      	mov	r8, r7
   132f4:	9302      	str	r3, [sp, #8]
   132f6:	4b98      	ldr	r3, [pc, #608]	; (13558 <getTrngSource+0x2a4>)
   132f8:	fba3 230b 	umull	r2, r3, r3, fp
   132fc:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   13300:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   13304:	f105 0208 	add.w	r2, r5, #8
   13308:	9203      	str	r2, [sp, #12]
   1330a:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   1330e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13310:	f8c3 b000 	str.w	fp, [r3]
   13314:	f1bb 0f00 	cmp.w	fp, #0
   13318:	f000 80c7 	beq.w	134aa <getTrngSource+0x1f6>
   1331c:	465d      	mov	r5, fp
   1331e:	f04f 0900 	mov.w	r9, #0
   13322:	9e03      	ldr	r6, [sp, #12]
   13324:	f000 fc8c 	bl	13c40 <LLF_RND_TurnOffTrng>
   13328:	2300      	movs	r3, #0
   1332a:	9305      	str	r3, [sp, #20]
   1332c:	f1b8 0f00 	cmp.w	r8, #0
   13330:	f000 80e9 	beq.w	13506 <getTrngSource+0x252>
   13334:	2c00      	cmp	r4, #0
   13336:	f000 80e6 	beq.w	13506 <getTrngSource+0x252>
   1333a:	9b04      	ldr	r3, [sp, #16]
   1333c:	2b00      	cmp	r3, #0
   1333e:	f000 80e0 	beq.w	13502 <getTrngSource+0x24e>
   13342:	4620      	mov	r0, r4
   13344:	a904      	add	r1, sp, #16
   13346:	f000 fc6b 	bl	13c20 <LLF_RND_GetFastestRosc>
   1334a:	b1b8      	cbz	r0, 1337c <getTrngSource+0xc8>
   1334c:	4b83      	ldr	r3, [pc, #524]	; (1355c <getTrngSource+0x2a8>)
   1334e:	4298      	cmp	r0, r3
   13350:	f040 80ab 	bne.w	134aa <getTrngSource+0x1f6>
   13354:	9002      	str	r0, [sp, #8]
   13356:	f000 fc73 	bl	13c40 <LLF_RND_TurnOffTrng>
   1335a:	9802      	ldr	r0, [sp, #8]
   1335c:	b00d      	add	sp, #52	; 0x34
   1335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13362:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   13366:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1336a:	3001      	adds	r0, #1
   1336c:	bf0c      	ite	eq
   1336e:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   13372:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   13376:	e7a8      	b.n	132ca <getTrngSource+0x16>
   13378:	4879      	ldr	r0, [pc, #484]	; (13560 <getTrngSource+0x2ac>)
   1337a:	e7eb      	b.n	13354 <getTrngSource+0xa0>
   1337c:	4621      	mov	r1, r4
   1337e:	9804      	ldr	r0, [sp, #16]
   13380:	f000 fc30 	bl	13be4 <LLF_RND_GetRoscSampleCnt>
   13384:	2800      	cmp	r0, #0
   13386:	d1e1      	bne.n	1334c <getTrngSource+0x98>
   13388:	9f04      	ldr	r7, [sp, #16]
   1338a:	2f08      	cmp	r7, #8
   1338c:	f000 80bd 	beq.w	1350a <getTrngSource+0x256>
   13390:	2f04      	cmp	r7, #4
   13392:	f000 80bc 	beq.w	1350e <getTrngSource+0x25a>
   13396:	f1a7 0702 	sub.w	r7, r7, #2
   1339a:	fab7 f787 	clz	r7, r7
   1339e:	097f      	lsrs	r7, r7, #5
   133a0:	2301      	movs	r3, #1
   133a2:	4619      	mov	r1, r3
   133a4:	486f      	ldr	r0, [pc, #444]	; (13564 <getTrngSource+0x2b0>)
   133a6:	6003      	str	r3, [r0, #0]
   133a8:	f840 3c84 	str.w	r3, [r0, #-132]
   133ac:	4b6d      	ldr	r3, [pc, #436]	; (13564 <getTrngSource+0x2b0>)
   133ae:	4869      	ldr	r0, [pc, #420]	; (13554 <getTrngSource+0x2a0>)
   133b0:	6019      	str	r1, [r3, #0]
   133b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   133b4:	6003      	str	r3, [r0, #0]
   133b6:	6800      	ldr	r0, [r0, #0]
   133b8:	4283      	cmp	r3, r0
   133ba:	d1f7      	bne.n	133ac <getTrngSource+0xf8>
   133bc:	2300      	movs	r3, #0
   133be:	4a6a      	ldr	r2, [pc, #424]	; (13568 <getTrngSource+0x2b4>)
   133c0:	f04f 30ff 	mov.w	r0, #4294967295
   133c4:	6013      	str	r3, [r2, #0]
   133c6:	f7ff fd0d 	bl	12de4 <CC_HalClearInterruptBit>
   133ca:	2300      	movs	r3, #0
   133cc:	f06f 011b 	mvn.w	r1, #27
   133d0:	4618      	mov	r0, r3
   133d2:	4b66      	ldr	r3, [pc, #408]	; (1356c <getTrngSource+0x2b8>)
   133d4:	6019      	str	r1, [r3, #0]
   133d6:	f7ff fd13 	bl	12e00 <CC_HalMaskInterrupt>
   133da:	4965      	ldr	r1, [pc, #404]	; (13570 <getTrngSource+0x2bc>)
   133dc:	4b65      	ldr	r3, [pc, #404]	; (13574 <getTrngSource+0x2c0>)
   133de:	600f      	str	r7, [r1, #0]
   133e0:	6818      	ldr	r0, [r3, #0]
   133e2:	4f5d      	ldr	r7, [pc, #372]	; (13558 <getTrngSource+0x2a4>)
   133e4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   133e8:	f7ff fd0a 	bl	12e00 <CC_HalMaskInterrupt>
   133ec:	210a      	movs	r1, #10
   133ee:	2201      	movs	r2, #1
   133f0:	4b57      	ldr	r3, [pc, #348]	; (13550 <getTrngSource+0x29c>)
   133f2:	4861      	ldr	r0, [pc, #388]	; (13578 <getTrngSource+0x2c4>)
   133f4:	6019      	str	r1, [r3, #0]
   133f6:	6921      	ldr	r1, [r4, #16]
   133f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   133fa:	fba7 c101 	umull	ip, r1, r7, r1
   133fe:	0909      	lsrs	r1, r1, #4
   13400:	fb03 f301 	mul.w	r3, r3, r1
   13404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13408:	03db      	lsls	r3, r3, #15
   1340a:	099b      	lsrs	r3, r3, #6
   1340c:	6003      	str	r3, [r0, #0]
   1340e:	4b56      	ldr	r3, [pc, #344]	; (13568 <getTrngSource+0x2b4>)
   13410:	a805      	add	r0, sp, #20
   13412:	601a      	str	r2, [r3, #0]
   13414:	9904      	ldr	r1, [sp, #16]
   13416:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1341a:	020b      	lsls	r3, r1, #8
   1341c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   13420:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13424:	4313      	orrs	r3, r2
   13426:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1342a:	f000 fbcb 	bl	13bc4 <LLF_RND_WaitRngInterrupt>
   1342e:	9b05      	ldr	r3, [sp, #20]
   13430:	f003 031a 	and.w	r3, r3, #26
   13434:	4303      	orrs	r3, r0
   13436:	d138      	bne.n	134aa <getTrngSource+0x1f6>
   13438:	4b50      	ldr	r3, [pc, #320]	; (1357c <getTrngSource+0x2c8>)
   1343a:	fba7 2705 	umull	r2, r7, r7, r5
   1343e:	681a      	ldr	r2, [r3, #0]
   13440:	3314      	adds	r3, #20
   13442:	9206      	str	r2, [sp, #24]
   13444:	f853 2c10 	ldr.w	r2, [r3, #-16]
   13448:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1344c:	9207      	str	r2, [sp, #28]
   1344e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   13452:	9208      	str	r2, [sp, #32]
   13454:	f853 2c08 	ldr.w	r2, [r3, #-8]
   13458:	9209      	str	r2, [sp, #36]	; 0x24
   1345a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1345e:	920a      	str	r2, [sp, #40]	; 0x28
   13460:	681b      	ldr	r3, [r3, #0]
   13462:	930b      	str	r3, [sp, #44]	; 0x2c
   13464:	d102      	bne.n	1346c <getTrngSource+0x1b8>
   13466:	f1ba 0f00 	cmp.w	sl, #0
   1346a:	d141      	bne.n	134f0 <getTrngSource+0x23c>
   1346c:	2218      	movs	r2, #24
   1346e:	4630      	mov	r0, r6
   13470:	eb0d 0102 	add.w	r1, sp, r2
   13474:	f000 fb16 	bl	13aa4 <CC_PalMemCopyPlat>
   13478:	3d18      	subs	r5, #24
   1347a:	3618      	adds	r6, #24
   1347c:	f109 0901 	add.w	r9, r9, #1
   13480:	2d00      	cmp	r5, #0
   13482:	f47f af4f 	bne.w	13324 <getTrngSource+0x70>
   13486:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   1348a:	d85d      	bhi.n	13548 <getTrngSource+0x294>
   1348c:	9d03      	ldr	r5, [sp, #12]
   1348e:	4659      	mov	r1, fp
   13490:	4628      	mov	r0, r5
   13492:	6962      	ldr	r2, [r4, #20]
   13494:	f7ff fe7c 	bl	13190 <LLF_RND_RepetitionCounterTest.part.0>
   13498:	2800      	cmp	r0, #0
   1349a:	d04b      	beq.n	13534 <getTrngSource+0x280>
   1349c:	2300      	movs	r3, #0
   1349e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   134a0:	6013      	str	r3, [r2, #0]
   134a2:	4b2e      	ldr	r3, [pc, #184]	; (1355c <getTrngSource+0x2a8>)
   134a4:	4298      	cmp	r0, r3
   134a6:	f43f af55 	beq.w	13354 <getTrngSource+0xa0>
   134aa:	9d04      	ldr	r5, [sp, #16]
   134ac:	2d08      	cmp	r5, #8
   134ae:	d034      	beq.n	1351a <getTrngSource+0x266>
   134b0:	2200      	movs	r2, #0
   134b2:	ab04      	add	r3, sp, #16
   134b4:	4621      	mov	r1, r4
   134b6:	4640      	mov	r0, r8
   134b8:	006d      	lsls	r5, r5, #1
   134ba:	9200      	str	r2, [sp, #0]
   134bc:	9504      	str	r5, [sp, #16]
   134be:	f7ff fdbb 	bl	13038 <startTrngHW>
   134c2:	4b2f      	ldr	r3, [pc, #188]	; (13580 <getTrngSource+0x2cc>)
   134c4:	4298      	cmp	r0, r3
   134c6:	d024      	beq.n	13512 <getTrngSource+0x25e>
   134c8:	2800      	cmp	r0, #0
   134ca:	f47f af43 	bne.w	13354 <getTrngSource+0xa0>
   134ce:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   134d2:	0a13      	lsrs	r3, r2, #8
   134d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   134d8:	4313      	orrs	r3, r2
   134da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   134de:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   134e2:	9b02      	ldr	r3, [sp, #8]
   134e4:	3b01      	subs	r3, #1
   134e6:	9302      	str	r3, [sp, #8]
   134e8:	f47f af11 	bne.w	1330e <getTrngSource+0x5a>
   134ec:	2000      	movs	r0, #0
   134ee:	e731      	b.n	13354 <getTrngSource+0xa0>
   134f0:	4630      	mov	r0, r6
   134f2:	4652      	mov	r2, sl
   134f4:	a906      	add	r1, sp, #24
   134f6:	f000 fad5 	bl	13aa4 <CC_PalMemCopyPlat>
   134fa:	eba5 050a 	sub.w	r5, r5, sl
   134fe:	4456      	add	r6, sl
   13500:	e7bc      	b.n	1347c <getTrngSource+0x1c8>
   13502:	481f      	ldr	r0, [pc, #124]	; (13580 <getTrngSource+0x2cc>)
   13504:	e722      	b.n	1334c <getTrngSource+0x98>
   13506:	481f      	ldr	r0, [pc, #124]	; (13584 <getTrngSource+0x2d0>)
   13508:	e720      	b.n	1334c <getTrngSource+0x98>
   1350a:	2703      	movs	r7, #3
   1350c:	e748      	b.n	133a0 <getTrngSource+0xec>
   1350e:	2702      	movs	r7, #2
   13510:	e746      	b.n	133a0 <getTrngSource+0xec>
   13512:	6a23      	ldr	r3, [r4, #32]
   13514:	2b00      	cmp	r3, #0
   13516:	f43f af1d 	beq.w	13354 <getTrngSource+0xa0>
   1351a:	481b      	ldr	r0, [pc, #108]	; (13588 <getTrngSource+0x2d4>)
   1351c:	e71a      	b.n	13354 <getTrngSource+0xa0>
   1351e:	2201      	movs	r2, #1
   13520:	4621      	mov	r1, r4
   13522:	4638      	mov	r0, r7
   13524:	9600      	str	r6, [sp, #0]
   13526:	ab04      	add	r3, sp, #16
   13528:	f7ff fd86 	bl	13038 <startTrngHW>
   1352c:	2800      	cmp	r0, #0
   1352e:	f43f aedf 	beq.w	132f0 <getTrngSource+0x3c>
   13532:	e70f      	b.n	13354 <getTrngSource+0xa0>
   13534:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13538:	4659      	mov	r1, fp
   1353a:	4628      	mov	r0, r5
   1353c:	69a2      	ldr	r2, [r4, #24]
   1353e:	f7ff fe53 	bl	131e8 <LLF_RND_AdaptiveProportionTest>
   13542:	2800      	cmp	r0, #0
   13544:	d1aa      	bne.n	1349c <getTrngSource+0x1e8>
   13546:	e7d1      	b.n	134ec <getTrngSource+0x238>
   13548:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1354a:	601d      	str	r5, [r3, #0]
   1354c:	e7ad      	b.n	134aa <getTrngSource+0x1f6>
   1354e:	bf00      	nop
   13550:	50841138 	.word	0x50841138
   13554:	50841130 	.word	0x50841130
   13558:	aaaaaaab 	.word	0xaaaaaaab
   1355c:	00f10c02 	.word	0x00f10c02
   13560:	00f10c30 	.word	0x00f10c30
   13564:	508411c4 	.word	0x508411c4
   13568:	5084112c 	.word	0x5084112c
   1356c:	50841100 	.word	0x50841100
   13570:	5084110c 	.word	0x5084110c
   13574:	50841a04 	.word	0x50841a04
   13578:	508411d8 	.word	0x508411d8
   1357c:	50841114 	.word	0x50841114
   13580:	00f10c31 	.word	0x00f10c31
   13584:	00f10c35 	.word	0x00f10c35
   13588:	00f10c32 	.word	0x00f10c32

0001358c <LLF_RND_GetTrngSource>:
   1358c:	2300      	movs	r3, #0
   1358e:	b430      	push	{r4, r5}
   13590:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
   13594:	9304      	str	r3, [sp, #16]
   13596:	9b02      	ldr	r3, [sp, #8]
   13598:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1359c:	bc30      	pop	{r4, r5}
   1359e:	f7ff be89 	b.w	132b4 <getTrngSource>
   135a2:	bf00      	nop

000135a4 <LLF_RND_RunTrngStartupTest>:
   135a4:	b510      	push	{r4, lr}
   135a6:	2401      	movs	r4, #1
   135a8:	b086      	sub	sp, #24
   135aa:	ab05      	add	r3, sp, #20
   135ac:	e9cd 2401 	strd	r2, r4, [sp, #4]
   135b0:	9300      	str	r3, [sp, #0]
   135b2:	2200      	movs	r2, #0
   135b4:	ab04      	add	r3, sp, #16
   135b6:	f7ff fe7d 	bl	132b4 <getTrngSource>
   135ba:	b006      	add	sp, #24
   135bc:	bd10      	pop	{r4, pc}
   135be:	bf00      	nop

000135c0 <mbedtls_hardware_poll>:
   135c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135c4:	b088      	sub	sp, #32
   135c6:	9205      	str	r2, [sp, #20]
   135c8:	2900      	cmp	r1, #0
   135ca:	d068      	beq.n	1369e <mbedtls_hardware_poll+0xde>
   135cc:	461c      	mov	r4, r3
   135ce:	2b00      	cmp	r3, #0
   135d0:	d065      	beq.n	1369e <mbedtls_hardware_poll+0xde>
   135d2:	4615      	mov	r5, r2
   135d4:	2a00      	cmp	r2, #0
   135d6:	d062      	beq.n	1369e <mbedtls_hardware_poll+0xde>
   135d8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 136c0 <mbedtls_hardware_poll+0x100>
   135dc:	460e      	mov	r6, r1
   135de:	f8d8 0000 	ldr.w	r0, [r8]
   135e2:	f04f 31ff 	mov.w	r1, #4294967295
   135e6:	f7ff fca3 	bl	12f30 <CC_PalMutexLock>
   135ea:	2800      	cmp	r0, #0
   135ec:	d14c      	bne.n	13688 <mbedtls_hardware_poll+0xc8>
   135ee:	2000      	movs	r0, #0
   135f0:	f7ff fcce 	bl	12f90 <CC_PalPowerSaveModeSelect>
   135f4:	2800      	cmp	r0, #0
   135f6:	d143      	bne.n	13680 <mbedtls_hardware_poll+0xc0>
   135f8:	482a      	ldr	r0, [pc, #168]	; (136a4 <mbedtls_hardware_poll+0xe4>)
   135fa:	f000 fa15 	bl	13a28 <RNG_PLAT_SetUserRngParameters>
   135fe:	b1e8      	cbz	r0, 1363c <mbedtls_hardware_poll+0x7c>
   13600:	2001      	movs	r0, #1
   13602:	f04f 37ff 	mov.w	r7, #4294967295
   13606:	f7ff fcc3 	bl	12f90 <CC_PalPowerSaveModeSelect>
   1360a:	2800      	cmp	r0, #0
   1360c:	d134      	bne.n	13678 <mbedtls_hardware_poll+0xb8>
   1360e:	f44f 7108 	mov.w	r1, #544	; 0x220
   13612:	4825      	ldr	r0, [pc, #148]	; (136a8 <mbedtls_hardware_poll+0xe8>)
   13614:	f7fe fe44 	bl	122a0 <mbedtls_zeroize_internal>
   13618:	21dc      	movs	r1, #220	; 0xdc
   1361a:	4824      	ldr	r0, [pc, #144]	; (136ac <mbedtls_hardware_poll+0xec>)
   1361c:	f7fe fe40 	bl	122a0 <mbedtls_zeroize_internal>
   13620:	4820      	ldr	r0, [pc, #128]	; (136a4 <mbedtls_hardware_poll+0xe4>)
   13622:	2128      	movs	r1, #40	; 0x28
   13624:	f7fe fe3c 	bl	122a0 <mbedtls_zeroize_internal>
   13628:	f8d8 0000 	ldr.w	r0, [r8]
   1362c:	f7ff fc88 	bl	12f40 <CC_PalMutexUnlock>
   13630:	2800      	cmp	r0, #0
   13632:	d12d      	bne.n	13690 <mbedtls_hardware_poll+0xd0>
   13634:	4638      	mov	r0, r7
   13636:	b008      	add	sp, #32
   13638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1363c:	491a      	ldr	r1, [pc, #104]	; (136a8 <mbedtls_hardware_poll+0xe8>)
   1363e:	ab07      	add	r3, sp, #28
   13640:	4602      	mov	r2, r0
   13642:	9003      	str	r0, [sp, #12]
   13644:	9102      	str	r1, [sp, #8]
   13646:	9300      	str	r3, [sp, #0]
   13648:	4916      	ldr	r1, [pc, #88]	; (136a4 <mbedtls_hardware_poll+0xe4>)
   1364a:	4818      	ldr	r0, [pc, #96]	; (136ac <mbedtls_hardware_poll+0xec>)
   1364c:	9401      	str	r4, [sp, #4]
   1364e:	ab05      	add	r3, sp, #20
   13650:	f7ff ff9c 	bl	1358c <LLF_RND_GetTrngSource>
   13654:	2800      	cmp	r0, #0
   13656:	d1d3      	bne.n	13600 <mbedtls_hardware_poll+0x40>
   13658:	6823      	ldr	r3, [r4, #0]
   1365a:	42ab      	cmp	r3, r5
   1365c:	d3d0      	bcc.n	13600 <mbedtls_hardware_poll+0x40>
   1365e:	9907      	ldr	r1, [sp, #28]
   13660:	4607      	mov	r7, r0
   13662:	462a      	mov	r2, r5
   13664:	4630      	mov	r0, r6
   13666:	3108      	adds	r1, #8
   13668:	f000 fa1c 	bl	13aa4 <CC_PalMemCopyPlat>
   1366c:	2001      	movs	r0, #1
   1366e:	6025      	str	r5, [r4, #0]
   13670:	f7ff fc8e 	bl	12f90 <CC_PalPowerSaveModeSelect>
   13674:	2800      	cmp	r0, #0
   13676:	d0ca      	beq.n	1360e <mbedtls_hardware_poll+0x4e>
   13678:	480d      	ldr	r0, [pc, #52]	; (136b0 <mbedtls_hardware_poll+0xf0>)
   1367a:	f7fe fd0f 	bl	1209c <CC_PalAbort>
   1367e:	e7c6      	b.n	1360e <mbedtls_hardware_poll+0x4e>
   13680:	480c      	ldr	r0, [pc, #48]	; (136b4 <mbedtls_hardware_poll+0xf4>)
   13682:	f7fe fd0b 	bl	1209c <CC_PalAbort>
   13686:	e7b7      	b.n	135f8 <mbedtls_hardware_poll+0x38>
   13688:	480b      	ldr	r0, [pc, #44]	; (136b8 <mbedtls_hardware_poll+0xf8>)
   1368a:	f7fe fd07 	bl	1209c <CC_PalAbort>
   1368e:	e7ae      	b.n	135ee <mbedtls_hardware_poll+0x2e>
   13690:	480a      	ldr	r0, [pc, #40]	; (136bc <mbedtls_hardware_poll+0xfc>)
   13692:	f7fe fd03 	bl	1209c <CC_PalAbort>
   13696:	4638      	mov	r0, r7
   13698:	b008      	add	sp, #32
   1369a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1369e:	f04f 37ff 	mov.w	r7, #4294967295
   136a2:	e7c7      	b.n	13634 <mbedtls_hardware_poll+0x74>
   136a4:	20001334 	.word	0x20001334
   136a8:	20001114 	.word	0x20001114
   136ac:	20001038 	.word	0x20001038
   136b0:	00015a24 	.word	0x00015a24
   136b4:	00015a04 	.word	0x00015a04
   136b8:	000159ec 	.word	0x000159ec
   136bc:	00015a7c 	.word	0x00015a7c
   136c0:	200000e8 	.word	0x200000e8

000136c4 <cc_mbedtls_aes_init>:
   136c4:	b510      	push	{r4, lr}
   136c6:	4604      	mov	r4, r0
   136c8:	b130      	cbz	r0, 136d8 <cc_mbedtls_aes_init+0x14>
   136ca:	2200      	movs	r2, #0
   136cc:	2301      	movs	r3, #1
   136ce:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   136d2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   136d6:	bd10      	pop	{r4, pc}
   136d8:	4801      	ldr	r0, [pc, #4]	; (136e0 <cc_mbedtls_aes_init+0x1c>)
   136da:	f7fe fcdf 	bl	1209c <CC_PalAbort>
   136de:	e7f4      	b.n	136ca <cc_mbedtls_aes_init+0x6>
   136e0:	00015a94 	.word	0x00015a94

000136e4 <cc_mbedtls_aes_free>:
   136e4:	b118      	cbz	r0, 136ee <cc_mbedtls_aes_free+0xa>
   136e6:	2274      	movs	r2, #116	; 0x74
   136e8:	2100      	movs	r1, #0
   136ea:	f000 b9dd 	b.w	13aa8 <CC_PalMemSetPlat>
   136ee:	4770      	bx	lr

000136f0 <cc_mbedtls_aes_setkey_enc>:
   136f0:	b188      	cbz	r0, 13716 <cc_mbedtls_aes_setkey_enc+0x26>
   136f2:	b199      	cbz	r1, 1371c <cc_mbedtls_aes_setkey_enc+0x2c>
   136f4:	b510      	push	{r4, lr}
   136f6:	2400      	movs	r4, #0
   136f8:	2a80      	cmp	r2, #128	; 0x80
   136fa:	6384      	str	r4, [r0, #56]	; 0x38
   136fc:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   13700:	d106      	bne.n	13710 <cc_mbedtls_aes_setkey_enc+0x20>
   13702:	6304      	str	r4, [r0, #48]	; 0x30
   13704:	2210      	movs	r2, #16
   13706:	3010      	adds	r0, #16
   13708:	f000 f9cc 	bl	13aa4 <CC_PalMemCopyPlat>
   1370c:	4620      	mov	r0, r4
   1370e:	bd10      	pop	{r4, pc}
   13710:	f06f 001f 	mvn.w	r0, #31
   13714:	bd10      	pop	{r4, pc}
   13716:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1371a:	4770      	bx	lr
   1371c:	f06f 001f 	mvn.w	r0, #31
   13720:	4770      	bx	lr
   13722:	bf00      	nop

00013724 <cc_mbedtls_aes_crypt_ecb>:
   13724:	b328      	cbz	r0, 13772 <cc_mbedtls_aes_crypt_ecb+0x4e>
   13726:	b322      	cbz	r2, 13772 <cc_mbedtls_aes_crypt_ecb+0x4e>
   13728:	b31b      	cbz	r3, 13772 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1372a:	2901      	cmp	r1, #1
   1372c:	d821      	bhi.n	13772 <cc_mbedtls_aes_crypt_ecb+0x4e>
   1372e:	b570      	push	{r4, r5, r6, lr}
   13730:	4604      	mov	r4, r0
   13732:	6b81      	ldr	r1, [r0, #56]	; 0x38
   13734:	b086      	sub	sp, #24
   13736:	d017      	beq.n	13768 <cc_mbedtls_aes_crypt_ecb+0x44>
   13738:	2901      	cmp	r1, #1
   1373a:	d117      	bne.n	1376c <cc_mbedtls_aes_crypt_ecb+0x48>
   1373c:	2510      	movs	r5, #16
   1373e:	2100      	movs	r1, #0
   13740:	eb0d 0605 	add.w	r6, sp, r5
   13744:	6361      	str	r1, [r4, #52]	; 0x34
   13746:	4610      	mov	r0, r2
   13748:	4629      	mov	r1, r5
   1374a:	9500      	str	r5, [sp, #0]
   1374c:	aa02      	add	r2, sp, #8
   1374e:	9601      	str	r6, [sp, #4]
   13750:	f000 fa84 	bl	13c5c <SetDataBuffersInfo>
   13754:	b950      	cbnz	r0, 1376c <cc_mbedtls_aes_crypt_ecb+0x48>
   13756:	462b      	mov	r3, r5
   13758:	4632      	mov	r2, r6
   1375a:	4620      	mov	r0, r4
   1375c:	a902      	add	r1, sp, #8
   1375e:	f000 fd37 	bl	141d0 <ProcessAesDrv>
   13762:	b918      	cbnz	r0, 1376c <cc_mbedtls_aes_crypt_ecb+0x48>
   13764:	b006      	add	sp, #24
   13766:	bd70      	pop	{r4, r5, r6, pc}
   13768:	2900      	cmp	r1, #0
   1376a:	d0e7      	beq.n	1373c <cc_mbedtls_aes_crypt_ecb+0x18>
   1376c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   13770:	e7f8      	b.n	13764 <cc_mbedtls_aes_crypt_ecb+0x40>
   13772:	f06f 0021 	mvn.w	r0, #33	; 0x21
   13776:	4770      	bx	lr

00013778 <cc_mbedtls_sha256_init>:
   13778:	b510      	push	{r4, lr}
   1377a:	4604      	mov	r4, r0
   1377c:	b128      	cbz	r0, 1378a <cc_mbedtls_sha256_init+0x12>
   1377e:	4620      	mov	r0, r4
   13780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13784:	21f0      	movs	r1, #240	; 0xf0
   13786:	f000 b991 	b.w	13aac <CC_PalMemSetZeroPlat>
   1378a:	4804      	ldr	r0, [pc, #16]	; (1379c <cc_mbedtls_sha256_init+0x24>)
   1378c:	f7fe fc86 	bl	1209c <CC_PalAbort>
   13790:	4620      	mov	r0, r4
   13792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13796:	21f0      	movs	r1, #240	; 0xf0
   13798:	f000 b988 	b.w	13aac <CC_PalMemSetZeroPlat>
   1379c:	00015aa8 	.word	0x00015aa8

000137a0 <cc_mbedtls_sha256_free>:
   137a0:	b110      	cbz	r0, 137a8 <cc_mbedtls_sha256_free+0x8>
   137a2:	21f0      	movs	r1, #240	; 0xf0
   137a4:	f7fe bd7c 	b.w	122a0 <mbedtls_zeroize_internal>
   137a8:	4770      	bx	lr
   137aa:	bf00      	nop

000137ac <cc_mbedtls_sha256_starts>:
   137ac:	b508      	push	{r3, lr}
   137ae:	b161      	cbz	r1, 137ca <cc_mbedtls_sha256_starts+0x1e>
   137b0:	2901      	cmp	r1, #1
   137b2:	d107      	bne.n	137c4 <cc_mbedtls_sha256_starts+0x18>
   137b4:	2102      	movs	r1, #2
   137b6:	f000 f85b 	bl	13870 <mbedtls_sha_starts_internal>
   137ba:	2800      	cmp	r0, #0
   137bc:	bf18      	it	ne
   137be:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   137c2:	bd08      	pop	{r3, pc}
   137c4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   137c8:	bd08      	pop	{r3, pc}
   137ca:	2101      	movs	r1, #1
   137cc:	f000 f850 	bl	13870 <mbedtls_sha_starts_internal>
   137d0:	e7f3      	b.n	137ba <cc_mbedtls_sha256_starts+0xe>
   137d2:	bf00      	nop

000137d4 <cc_mbedtls_sha256_update>:
   137d4:	b570      	push	{r4, r5, r6, lr}
   137d6:	188e      	adds	r6, r1, r2
   137d8:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   137dc:	460b      	mov	r3, r1
   137de:	4614      	mov	r4, r2
   137e0:	4605      	mov	r5, r0
   137e2:	b0a0      	sub	sp, #128	; 0x80
   137e4:	d801      	bhi.n	137ea <cc_mbedtls_sha256_update+0x16>
   137e6:	2a80      	cmp	r2, #128	; 0x80
   137e8:	d90c      	bls.n	13804 <cc_mbedtls_sha256_update+0x30>
   137ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   137ee:	d917      	bls.n	13820 <cc_mbedtls_sha256_update+0x4c>
   137f0:	4622      	mov	r2, r4
   137f2:	4619      	mov	r1, r3
   137f4:	4628      	mov	r0, r5
   137f6:	f000 f87d 	bl	138f4 <mbedtls_sha_update_internal>
   137fa:	4604      	mov	r4, r0
   137fc:	b984      	cbnz	r4, 13820 <cc_mbedtls_sha256_update+0x4c>
   137fe:	4620      	mov	r0, r4
   13800:	b020      	add	sp, #128	; 0x80
   13802:	bd70      	pop	{r4, r5, r6, pc}
   13804:	4668      	mov	r0, sp
   13806:	f000 f94d 	bl	13aa4 <CC_PalMemCopyPlat>
   1380a:	4622      	mov	r2, r4
   1380c:	4669      	mov	r1, sp
   1380e:	4628      	mov	r0, r5
   13810:	f000 f870 	bl	138f4 <mbedtls_sha_update_internal>
   13814:	2180      	movs	r1, #128	; 0x80
   13816:	4604      	mov	r4, r0
   13818:	4668      	mov	r0, sp
   1381a:	f000 f947 	bl	13aac <CC_PalMemSetZeroPlat>
   1381e:	e7ed      	b.n	137fc <cc_mbedtls_sha256_update+0x28>
   13820:	f06f 0436 	mvn.w	r4, #54	; 0x36
   13824:	e7eb      	b.n	137fe <cc_mbedtls_sha256_update+0x2a>
   13826:	bf00      	nop

00013828 <cc_mbedtls_sha256_finish>:
   13828:	b570      	push	{r4, r5, r6, lr}
   1382a:	b1e8      	cbz	r0, 13868 <cc_mbedtls_sha256_finish+0x40>
   1382c:	460e      	mov	r6, r1
   1382e:	b1d9      	cbz	r1, 13868 <cc_mbedtls_sha256_finish+0x40>
   13830:	4604      	mov	r4, r0
   13832:	f000 f831 	bl	13898 <mbedtls_sha_finish_internal>
   13836:	4605      	mov	r5, r0
   13838:	b9b0      	cbnz	r0, 13868 <cc_mbedtls_sha256_finish+0x40>
   1383a:	6823      	ldr	r3, [r4, #0]
   1383c:	2b01      	cmp	r3, #1
   1383e:	d00b      	beq.n	13858 <cc_mbedtls_sha256_finish+0x30>
   13840:	2b02      	cmp	r3, #2
   13842:	d001      	beq.n	13848 <cc_mbedtls_sha256_finish+0x20>
   13844:	4628      	mov	r0, r5
   13846:	bd70      	pop	{r4, r5, r6, pc}
   13848:	4630      	mov	r0, r6
   1384a:	221c      	movs	r2, #28
   1384c:	f104 0108 	add.w	r1, r4, #8
   13850:	f000 f928 	bl	13aa4 <CC_PalMemCopyPlat>
   13854:	4628      	mov	r0, r5
   13856:	bd70      	pop	{r4, r5, r6, pc}
   13858:	4630      	mov	r0, r6
   1385a:	2220      	movs	r2, #32
   1385c:	f104 0108 	add.w	r1, r4, #8
   13860:	f000 f920 	bl	13aa4 <CC_PalMemCopyPlat>
   13864:	4628      	mov	r0, r5
   13866:	bd70      	pop	{r4, r5, r6, pc}
   13868:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1386c:	e7ea      	b.n	13844 <cc_mbedtls_sha256_finish+0x1c>
   1386e:	bf00      	nop

00013870 <mbedtls_sha_starts_internal>:
   13870:	b178      	cbz	r0, 13892 <mbedtls_sha_starts_internal+0x22>
   13872:	b538      	push	{r3, r4, r5, lr}
   13874:	460d      	mov	r5, r1
   13876:	21f0      	movs	r1, #240	; 0xf0
   13878:	4604      	mov	r4, r0
   1387a:	f000 f917 	bl	13aac <CC_PalMemSetZeroPlat>
   1387e:	2340      	movs	r3, #64	; 0x40
   13880:	4620      	mov	r0, r4
   13882:	6025      	str	r5, [r4, #0]
   13884:	65e3      	str	r3, [r4, #92]	; 0x5c
   13886:	f000 fa21 	bl	13ccc <InitHashDrv>
   1388a:	3800      	subs	r0, #0
   1388c:	bf18      	it	ne
   1388e:	2001      	movne	r0, #1
   13890:	bd38      	pop	{r3, r4, r5, pc}
   13892:	2001      	movs	r0, #1
   13894:	4770      	bx	lr
   13896:	bf00      	nop

00013898 <mbedtls_sha_finish_internal>:
   13898:	b570      	push	{r4, r5, r6, lr}
   1389a:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1389c:	b0a4      	sub	sp, #144	; 0x90
   1389e:	4604      	mov	r4, r0
   138a0:	ae04      	add	r6, sp, #16
   138a2:	b9e5      	cbnz	r5, 138de <mbedtls_sha_finish_internal+0x46>
   138a4:	2201      	movs	r2, #1
   138a6:	2300      	movs	r3, #0
   138a8:	6062      	str	r2, [r4, #4]
   138aa:	4630      	mov	r0, r6
   138ac:	4629      	mov	r1, r5
   138ae:	e9cd 3300 	strd	r3, r3, [sp]
   138b2:	aa02      	add	r2, sp, #8
   138b4:	f000 f9d2 	bl	13c5c <SetDataBuffersInfo>
   138b8:	b110      	cbz	r0, 138c0 <mbedtls_sha_finish_internal+0x28>
   138ba:	2001      	movs	r0, #1
   138bc:	b024      	add	sp, #144	; 0x90
   138be:	bd70      	pop	{r4, r5, r6, pc}
   138c0:	462a      	mov	r2, r5
   138c2:	4620      	mov	r0, r4
   138c4:	a902      	add	r1, sp, #8
   138c6:	f000 fa2b 	bl	13d20 <ProcessHashDrv>
   138ca:	2800      	cmp	r0, #0
   138cc:	d1f5      	bne.n	138ba <mbedtls_sha_finish_internal+0x22>
   138ce:	4620      	mov	r0, r4
   138d0:	f000 fb50 	bl	13f74 <FinishHashDrv>
   138d4:	2800      	cmp	r0, #0
   138d6:	d1f0      	bne.n	138ba <mbedtls_sha_finish_internal+0x22>
   138d8:	6620      	str	r0, [r4, #96]	; 0x60
   138da:	b024      	add	sp, #144	; 0x90
   138dc:	bd70      	pop	{r4, r5, r6, pc}
   138de:	2d80      	cmp	r5, #128	; 0x80
   138e0:	462a      	mov	r2, r5
   138e2:	4630      	mov	r0, r6
   138e4:	bf28      	it	cs
   138e6:	2280      	movcs	r2, #128	; 0x80
   138e8:	f104 0164 	add.w	r1, r4, #100	; 0x64
   138ec:	f000 f8da 	bl	13aa4 <CC_PalMemCopyPlat>
   138f0:	6e25      	ldr	r5, [r4, #96]	; 0x60
   138f2:	e7d7      	b.n	138a4 <mbedtls_sha_finish_internal+0xc>

000138f4 <mbedtls_sha_update_internal>:
   138f4:	2800      	cmp	r0, #0
   138f6:	d055      	beq.n	139a4 <mbedtls_sha_update_internal+0xb0>
   138f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   138fa:	4615      	mov	r5, r2
   138fc:	b0a5      	sub	sp, #148	; 0x94
   138fe:	b1b2      	cbz	r2, 1392e <mbedtls_sha_update_internal+0x3a>
   13900:	460e      	mov	r6, r1
   13902:	b351      	cbz	r1, 1395a <mbedtls_sha_update_internal+0x66>
   13904:	4604      	mov	r4, r0
   13906:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1390a:	1a1a      	subs	r2, r3, r0
   1390c:	fbb2 f7f3 	udiv	r7, r2, r3
   13910:	fb03 2717 	mls	r7, r3, r7, r2
   13914:	42af      	cmp	r7, r5
   13916:	bf28      	it	cs
   13918:	462f      	movcs	r7, r5
   1391a:	2f00      	cmp	r7, #0
   1391c:	d144      	bne.n	139a8 <mbedtls_sha_update_internal+0xb4>
   1391e:	4283      	cmp	r3, r0
   13920:	d008      	beq.n	13934 <mbedtls_sha_update_internal+0x40>
   13922:	fbb5 f7f3 	udiv	r7, r5, r3
   13926:	fb03 f707 	mul.w	r7, r3, r7
   1392a:	b9cf      	cbnz	r7, 13960 <mbedtls_sha_update_internal+0x6c>
   1392c:	bb6d      	cbnz	r5, 1398a <mbedtls_sha_update_internal+0x96>
   1392e:	4628      	mov	r0, r5
   13930:	b025      	add	sp, #148	; 0x94
   13932:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13934:	2b80      	cmp	r3, #128	; 0x80
   13936:	bf28      	it	cs
   13938:	2380      	movcs	r3, #128	; 0x80
   1393a:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1393e:	461a      	mov	r2, r3
   13940:	a804      	add	r0, sp, #16
   13942:	f000 f8af 	bl	13aa4 <CC_PalMemCopyPlat>
   13946:	2300      	movs	r3, #0
   13948:	e9cd 3300 	strd	r3, r3, [sp]
   1394c:	a804      	add	r0, sp, #16
   1394e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   13950:	aa02      	add	r2, sp, #8
   13952:	f000 f983 	bl	13c5c <SetDataBuffersInfo>
   13956:	2800      	cmp	r0, #0
   13958:	d033      	beq.n	139c2 <mbedtls_sha_update_internal+0xce>
   1395a:	2001      	movs	r0, #1
   1395c:	b025      	add	sp, #148	; 0x94
   1395e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13960:	2300      	movs	r3, #0
   13962:	4639      	mov	r1, r7
   13964:	4630      	mov	r0, r6
   13966:	e9cd 3300 	strd	r3, r3, [sp]
   1396a:	aa02      	add	r2, sp, #8
   1396c:	f000 f976 	bl	13c5c <SetDataBuffersInfo>
   13970:	2800      	cmp	r0, #0
   13972:	d1f2      	bne.n	1395a <mbedtls_sha_update_internal+0x66>
   13974:	463a      	mov	r2, r7
   13976:	4620      	mov	r0, r4
   13978:	a902      	add	r1, sp, #8
   1397a:	f000 f9d1 	bl	13d20 <ProcessHashDrv>
   1397e:	2800      	cmp	r0, #0
   13980:	d1eb      	bne.n	1395a <mbedtls_sha_update_internal+0x66>
   13982:	1bed      	subs	r5, r5, r7
   13984:	443e      	add	r6, r7
   13986:	2d00      	cmp	r5, #0
   13988:	d0d1      	beq.n	1392e <mbedtls_sha_update_internal+0x3a>
   1398a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1398c:	462a      	mov	r2, r5
   1398e:	3019      	adds	r0, #25
   13990:	4631      	mov	r1, r6
   13992:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   13996:	f000 f885 	bl	13aa4 <CC_PalMemCopyPlat>
   1399a:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1399c:	2000      	movs	r0, #0
   1399e:	442a      	add	r2, r5
   139a0:	6622      	str	r2, [r4, #96]	; 0x60
   139a2:	e7c5      	b.n	13930 <mbedtls_sha_update_internal+0x3c>
   139a4:	2001      	movs	r0, #1
   139a6:	4770      	bx	lr
   139a8:	f104 0364 	add.w	r3, r4, #100	; 0x64
   139ac:	4418      	add	r0, r3
   139ae:	463a      	mov	r2, r7
   139b0:	f000 f878 	bl	13aa4 <CC_PalMemCopyPlat>
   139b4:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
   139b8:	4438      	add	r0, r7
   139ba:	443e      	add	r6, r7
   139bc:	1bed      	subs	r5, r5, r7
   139be:	6620      	str	r0, [r4, #96]	; 0x60
   139c0:	e7ad      	b.n	1391e <mbedtls_sha_update_internal+0x2a>
   139c2:	4620      	mov	r0, r4
   139c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   139c6:	a902      	add	r1, sp, #8
   139c8:	f000 f9aa 	bl	13d20 <ProcessHashDrv>
   139cc:	2800      	cmp	r0, #0
   139ce:	d1c4      	bne.n	1395a <mbedtls_sha_update_internal+0x66>
   139d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   139d2:	6620      	str	r0, [r4, #96]	; 0x60
   139d4:	e7a5      	b.n	13922 <mbedtls_sha_update_internal+0x2e>
   139d6:	bf00      	nop

000139d8 <cc_mbedtls_sha256>:
   139d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139da:	461c      	mov	r4, r3
   139dc:	4605      	mov	r5, r0
   139de:	4811      	ldr	r0, [pc, #68]	; (13a24 <cc_mbedtls_sha256+0x4c>)
   139e0:	460e      	mov	r6, r1
   139e2:	4617      	mov	r7, r2
   139e4:	f7ff fec8 	bl	13778 <cc_mbedtls_sha256_init>
   139e8:	4621      	mov	r1, r4
   139ea:	480e      	ldr	r0, [pc, #56]	; (13a24 <cc_mbedtls_sha256+0x4c>)
   139ec:	f7ff fede 	bl	137ac <cc_mbedtls_sha256_starts>
   139f0:	4604      	mov	r4, r0
   139f2:	b120      	cbz	r0, 139fe <cc_mbedtls_sha256+0x26>
   139f4:	480b      	ldr	r0, [pc, #44]	; (13a24 <cc_mbedtls_sha256+0x4c>)
   139f6:	f7ff fed3 	bl	137a0 <cc_mbedtls_sha256_free>
   139fa:	4620      	mov	r0, r4
   139fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   139fe:	4632      	mov	r2, r6
   13a00:	4629      	mov	r1, r5
   13a02:	4808      	ldr	r0, [pc, #32]	; (13a24 <cc_mbedtls_sha256+0x4c>)
   13a04:	f7ff fee6 	bl	137d4 <cc_mbedtls_sha256_update>
   13a08:	4604      	mov	r4, r0
   13a0a:	2800      	cmp	r0, #0
   13a0c:	d1f2      	bne.n	139f4 <cc_mbedtls_sha256+0x1c>
   13a0e:	4639      	mov	r1, r7
   13a10:	4804      	ldr	r0, [pc, #16]	; (13a24 <cc_mbedtls_sha256+0x4c>)
   13a12:	f7ff ff09 	bl	13828 <cc_mbedtls_sha256_finish>
   13a16:	4604      	mov	r4, r0
   13a18:	4802      	ldr	r0, [pc, #8]	; (13a24 <cc_mbedtls_sha256+0x4c>)
   13a1a:	f7ff fec1 	bl	137a0 <cc_mbedtls_sha256_free>
   13a1e:	4620      	mov	r0, r4
   13a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a22:	bf00      	nop
   13a24:	2000135c 	.word	0x2000135c

00013a28 <RNG_PLAT_SetUserRngParameters>:
   13a28:	231c      	movs	r3, #28
   13a2a:	b530      	push	{r4, r5, lr}
   13a2c:	b083      	sub	sp, #12
   13a2e:	a901      	add	r1, sp, #4
   13a30:	4604      	mov	r4, r0
   13a32:	9301      	str	r3, [sp, #4]
   13a34:	f000 f83e 	bl	13ab4 <CC_PalTrngParamGet>
   13a38:	4605      	mov	r5, r0
   13a3a:	b938      	cbnz	r0, 13a4c <RNG_PLAT_SetUserRngParameters+0x24>
   13a3c:	9b01      	ldr	r3, [sp, #4]
   13a3e:	2b1c      	cmp	r3, #28
   13a40:	d007      	beq.n	13a52 <RNG_PLAT_SetUserRngParameters+0x2a>
   13a42:	4d16      	ldr	r5, [pc, #88]	; (13a9c <RNG_PLAT_SetUserRngParameters+0x74>)
   13a44:	4620      	mov	r0, r4
   13a46:	211c      	movs	r1, #28
   13a48:	f000 f830 	bl	13aac <CC_PalMemSetZeroPlat>
   13a4c:	4628      	mov	r0, r5
   13a4e:	b003      	add	sp, #12
   13a50:	bd30      	pop	{r4, r5, pc}
   13a52:	2101      	movs	r1, #1
   13a54:	e9d4 3200 	ldrd	r3, r2, [r4]
   13a58:	3b00      	subs	r3, #0
   13a5a:	bf18      	it	ne
   13a5c:	2301      	movne	r3, #1
   13a5e:	61e1      	str	r1, [r4, #28]
   13a60:	b10a      	cbz	r2, 13a66 <RNG_PLAT_SetUserRngParameters+0x3e>
   13a62:	f043 0302 	orr.w	r3, r3, #2
   13a66:	68a2      	ldr	r2, [r4, #8]
   13a68:	b932      	cbnz	r2, 13a78 <RNG_PLAT_SetUserRngParameters+0x50>
   13a6a:	68e2      	ldr	r2, [r4, #12]
   13a6c:	b942      	cbnz	r2, 13a80 <RNG_PLAT_SetUserRngParameters+0x58>
   13a6e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13a72:	b98b      	cbnz	r3, 13a98 <RNG_PLAT_SetUserRngParameters+0x70>
   13a74:	4d0a      	ldr	r5, [pc, #40]	; (13aa0 <RNG_PLAT_SetUserRngParameters+0x78>)
   13a76:	e7e5      	b.n	13a44 <RNG_PLAT_SetUserRngParameters+0x1c>
   13a78:	68e2      	ldr	r2, [r4, #12]
   13a7a:	f043 0304 	orr.w	r3, r3, #4
   13a7e:	b13a      	cbz	r2, 13a90 <RNG_PLAT_SetUserRngParameters+0x68>
   13a80:	2200      	movs	r2, #0
   13a82:	4628      	mov	r0, r5
   13a84:	f043 0308 	orr.w	r3, r3, #8
   13a88:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13a8c:	b003      	add	sp, #12
   13a8e:	bd30      	pop	{r4, r5, pc}
   13a90:	4615      	mov	r5, r2
   13a92:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13a96:	e7d9      	b.n	13a4c <RNG_PLAT_SetUserRngParameters+0x24>
   13a98:	4615      	mov	r5, r2
   13a9a:	e7d7      	b.n	13a4c <RNG_PLAT_SetUserRngParameters+0x24>
   13a9c:	00f00c37 	.word	0x00f00c37
   13aa0:	00f00c0e 	.word	0x00f00c0e

00013aa4 <CC_PalMemCopyPlat>:
   13aa4:	f001 b9fc 	b.w	14ea0 <memmove>

00013aa8 <CC_PalMemSetPlat>:
   13aa8:	f001 ba1c 	b.w	14ee4 <memset>

00013aac <CC_PalMemSetZeroPlat>:
   13aac:	460a      	mov	r2, r1
   13aae:	2100      	movs	r1, #0
   13ab0:	f001 ba18 	b.w	14ee4 <memset>

00013ab4 <CC_PalTrngParamGet>:
   13ab4:	2800      	cmp	r0, #0
   13ab6:	d066      	beq.n	13b86 <CC_PalTrngParamGet+0xd2>
   13ab8:	2900      	cmp	r1, #0
   13aba:	d064      	beq.n	13b86 <CC_PalTrngParamGet+0xd2>
   13abc:	680b      	ldr	r3, [r1, #0]
   13abe:	2b1c      	cmp	r3, #28
   13ac0:	d161      	bne.n	13b86 <CC_PalTrngParamGet+0xd2>
   13ac2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13ac6:	4a3b      	ldr	r2, [pc, #236]	; (13bb4 <CC_PalTrngParamGet+0x100>)
   13ac8:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   13acc:	4291      	cmp	r1, r2
   13ace:	d05c      	beq.n	13b8a <CC_PalTrngParamGet+0xd6>
   13ad0:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13ad4:	3201      	adds	r2, #1
   13ad6:	d058      	beq.n	13b8a <CC_PalTrngParamGet+0xd6>
   13ad8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13adc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13ae0:	6002      	str	r2, [r0, #0]
   13ae2:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   13ae6:	4a34      	ldr	r2, [pc, #208]	; (13bb8 <CC_PalTrngParamGet+0x104>)
   13ae8:	4291      	cmp	r1, r2
   13aea:	d060      	beq.n	13bae <CC_PalTrngParamGet+0xfa>
   13aec:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13af0:	3201      	adds	r2, #1
   13af2:	d05c      	beq.n	13bae <CC_PalTrngParamGet+0xfa>
   13af4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13af8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13afc:	6042      	str	r2, [r0, #4]
   13afe:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13b02:	f512 7f94 	cmn.w	r2, #296	; 0x128
   13b06:	d04f      	beq.n	13ba8 <CC_PalTrngParamGet+0xf4>
   13b08:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13b0c:	3201      	adds	r2, #1
   13b0e:	d04b      	beq.n	13ba8 <CC_PalTrngParamGet+0xf4>
   13b10:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13b14:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b18:	6082      	str	r2, [r0, #8]
   13b1a:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   13b1e:	4a27      	ldr	r2, [pc, #156]	; (13bbc <CC_PalTrngParamGet+0x108>)
   13b20:	4291      	cmp	r1, r2
   13b22:	d03e      	beq.n	13ba2 <CC_PalTrngParamGet+0xee>
   13b24:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13b28:	3201      	adds	r2, #1
   13b2a:	d03a      	beq.n	13ba2 <CC_PalTrngParamGet+0xee>
   13b2c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13b30:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b34:	60c2      	str	r2, [r0, #12]
   13b36:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13b3a:	3270      	adds	r2, #112	; 0x70
   13b3c:	d02f      	beq.n	13b9e <CC_PalTrngParamGet+0xea>
   13b3e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13b42:	3201      	adds	r2, #1
   13b44:	d02b      	beq.n	13b9e <CC_PalTrngParamGet+0xea>
   13b46:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13b4a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b4e:	6102      	str	r2, [r0, #16]
   13b50:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13b54:	32af      	adds	r2, #175	; 0xaf
   13b56:	d020      	beq.n	13b9a <CC_PalTrngParamGet+0xe6>
   13b58:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13b5c:	3201      	adds	r2, #1
   13b5e:	d01c      	beq.n	13b9a <CC_PalTrngParamGet+0xe6>
   13b60:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13b64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b68:	6142      	str	r2, [r0, #20]
   13b6a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   13b6e:	4a14      	ldr	r2, [pc, #80]	; (13bc0 <CC_PalTrngParamGet+0x10c>)
   13b70:	4291      	cmp	r1, r2
   13b72:	d00d      	beq.n	13b90 <CC_PalTrngParamGet+0xdc>
   13b74:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   13b78:	3201      	adds	r2, #1
   13b7a:	d009      	beq.n	13b90 <CC_PalTrngParamGet+0xdc>
   13b7c:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   13b80:	6183      	str	r3, [r0, #24]
   13b82:	2000      	movs	r0, #0
   13b84:	4770      	bx	lr
   13b86:	2001      	movs	r0, #1
   13b88:	4770      	bx	lr
   13b8a:	f640 02fc 	movw	r2, #2300	; 0x8fc
   13b8e:	e7a5      	b.n	13adc <CC_PalTrngParamGet+0x28>
   13b90:	f240 3337 	movw	r3, #823	; 0x337
   13b94:	6183      	str	r3, [r0, #24]
   13b96:	2000      	movs	r0, #0
   13b98:	4770      	bx	lr
   13b9a:	2251      	movs	r2, #81	; 0x51
   13b9c:	e7e2      	b.n	13b64 <CC_PalTrngParamGet+0xb0>
   13b9e:	2290      	movs	r2, #144	; 0x90
   13ba0:	e7d3      	b.n	13b4a <CC_PalTrngParamGet+0x96>
   13ba2:	f642 1204 	movw	r2, #10500	; 0x2904
   13ba6:	e7c3      	b.n	13b30 <CC_PalTrngParamGet+0x7c>
   13ba8:	f640 62d8 	movw	r2, #3800	; 0xed8
   13bac:	e7b2      	b.n	13b14 <CC_PalTrngParamGet+0x60>
   13bae:	f242 02d0 	movw	r2, #8400	; 0x20d0
   13bb2:	e7a1      	b.n	13af8 <CC_PalTrngParamGet+0x44>
   13bb4:	fffff8fc 	.word	0xfffff8fc
   13bb8:	ffff20d0 	.word	0xffff20d0
   13bbc:	ffff2904 	.word	0xffff2904
   13bc0:	fffff337 	.word	0xfffff337

00013bc4 <LLF_RND_WaitRngInterrupt>:
   13bc4:	4601      	mov	r1, r0
   13bc6:	b508      	push	{r3, lr}
   13bc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13bcc:	f7ff f924 	bl	12e18 <CC_HalWaitInterruptRND>
   13bd0:	2300      	movs	r3, #0
   13bd2:	4902      	ldr	r1, [pc, #8]	; (13bdc <LLF_RND_WaitRngInterrupt+0x18>)
   13bd4:	4a02      	ldr	r2, [pc, #8]	; (13be0 <LLF_RND_WaitRngInterrupt+0x1c>)
   13bd6:	600b      	str	r3, [r1, #0]
   13bd8:	6013      	str	r3, [r2, #0]
   13bda:	bd08      	pop	{r3, pc}
   13bdc:	508411c8 	.word	0x508411c8
   13be0:	5084112c 	.word	0x5084112c

00013be4 <LLF_RND_GetRoscSampleCnt>:
   13be4:	3801      	subs	r0, #1
   13be6:	2807      	cmp	r0, #7
   13be8:	d805      	bhi.n	13bf6 <LLF_RND_GetRoscSampleCnt+0x12>
   13bea:	e8df f000 	tbb	[pc, r0]
   13bee:	0e0a      	.short	0x0e0a
   13bf0:	04041204 	.word	0x04041204
   13bf4:	0604      	.short	0x0604
   13bf6:	4809      	ldr	r0, [pc, #36]	; (13c1c <LLF_RND_GetRoscSampleCnt+0x38>)
   13bf8:	4770      	bx	lr
   13bfa:	68cb      	ldr	r3, [r1, #12]
   13bfc:	2000      	movs	r0, #0
   13bfe:	624b      	str	r3, [r1, #36]	; 0x24
   13c00:	4770      	bx	lr
   13c02:	680b      	ldr	r3, [r1, #0]
   13c04:	2000      	movs	r0, #0
   13c06:	624b      	str	r3, [r1, #36]	; 0x24
   13c08:	4770      	bx	lr
   13c0a:	684b      	ldr	r3, [r1, #4]
   13c0c:	2000      	movs	r0, #0
   13c0e:	624b      	str	r3, [r1, #36]	; 0x24
   13c10:	4770      	bx	lr
   13c12:	688b      	ldr	r3, [r1, #8]
   13c14:	2000      	movs	r0, #0
   13c16:	624b      	str	r3, [r1, #36]	; 0x24
   13c18:	4770      	bx	lr
   13c1a:	bf00      	nop
   13c1c:	00f10c31 	.word	0x00f10c31

00013c20 <LLF_RND_GetFastestRosc>:
   13c20:	680b      	ldr	r3, [r1, #0]
   13c22:	e002      	b.n	13c2a <LLF_RND_GetFastestRosc+0xa>
   13c24:	2b08      	cmp	r3, #8
   13c26:	600b      	str	r3, [r1, #0]
   13c28:	d806      	bhi.n	13c38 <LLF_RND_GetFastestRosc+0x18>
   13c2a:	6a02      	ldr	r2, [r0, #32]
   13c2c:	4213      	tst	r3, r2
   13c2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13c32:	d0f7      	beq.n	13c24 <LLF_RND_GetFastestRosc+0x4>
   13c34:	2000      	movs	r0, #0
   13c36:	4770      	bx	lr
   13c38:	4800      	ldr	r0, [pc, #0]	; (13c3c <LLF_RND_GetFastestRosc+0x1c>)
   13c3a:	4770      	bx	lr
   13c3c:	00f10c31 	.word	0x00f10c31

00013c40 <LLF_RND_TurnOffTrng>:
   13c40:	2300      	movs	r3, #0
   13c42:	4904      	ldr	r1, [pc, #16]	; (13c54 <LLF_RND_TurnOffTrng+0x14>)
   13c44:	4a04      	ldr	r2, [pc, #16]	; (13c58 <LLF_RND_TurnOffTrng+0x18>)
   13c46:	600b      	str	r3, [r1, #0]
   13c48:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13c4c:	6013      	str	r3, [r2, #0]
   13c4e:	f7ff b8c9 	b.w	12de4 <CC_HalClearInterruptBit>
   13c52:	bf00      	nop
   13c54:	5084112c 	.word	0x5084112c
   13c58:	508411c4 	.word	0x508411c4

00013c5c <SetDataBuffersInfo>:
   13c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c60:	2600      	movs	r6, #0
   13c62:	b082      	sub	sp, #8
   13c64:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   13c68:	f88d 6007 	strb.w	r6, [sp, #7]
   13c6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   13c6e:	d327      	bcc.n	13cc0 <SetDataBuffersInfo+0x64>
   13c70:	460c      	mov	r4, r1
   13c72:	4404      	add	r4, r0
   13c74:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   13c78:	4605      	mov	r5, r0
   13c7a:	d821      	bhi.n	13cc0 <SetDataBuffersInfo+0x64>
   13c7c:	4617      	mov	r7, r2
   13c7e:	4698      	mov	r8, r3
   13c80:	2201      	movs	r2, #1
   13c82:	f10d 0307 	add.w	r3, sp, #7
   13c86:	f000 ff9f 	bl	14bc8 <CC_PalDataBufferAttrGet>
   13c8a:	4604      	mov	r4, r0
   13c8c:	b9c0      	cbnz	r0, 13cc0 <SetDataBuffersInfo+0x64>
   13c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13c92:	603d      	str	r5, [r7, #0]
   13c94:	713b      	strb	r3, [r7, #4]
   13c96:	b1ae      	cbz	r6, 13cc4 <SetDataBuffersInfo+0x68>
   13c98:	f1b8 0f00 	cmp.w	r8, #0
   13c9c:	d009      	beq.n	13cb2 <SetDataBuffersInfo+0x56>
   13c9e:	4602      	mov	r2, r0
   13ca0:	9908      	ldr	r1, [sp, #32]
   13ca2:	4640      	mov	r0, r8
   13ca4:	f10d 0307 	add.w	r3, sp, #7
   13ca8:	f000 ff8e 	bl	14bc8 <CC_PalDataBufferAttrGet>
   13cac:	b940      	cbnz	r0, 13cc0 <SetDataBuffersInfo+0x64>
   13cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13cb2:	4620      	mov	r0, r4
   13cb4:	f8c6 8000 	str.w	r8, [r6]
   13cb8:	7133      	strb	r3, [r6, #4]
   13cba:	b002      	add	sp, #8
   13cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cc0:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   13cc4:	4620      	mov	r0, r4
   13cc6:	b002      	add	sp, #8
   13cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013ccc <InitHashDrv>:
   13ccc:	b1e8      	cbz	r0, 13d0a <InitHashDrv+0x3e>
   13cce:	b510      	push	{r4, lr}
   13cd0:	6804      	ldr	r4, [r0, #0]
   13cd2:	2c01      	cmp	r4, #1
   13cd4:	d004      	beq.n	13ce0 <InitHashDrv+0x14>
   13cd6:	2c02      	cmp	r4, #2
   13cd8:	d010      	beq.n	13cfc <InitHashDrv+0x30>
   13cda:	b144      	cbz	r4, 13cee <InitHashDrv+0x22>
   13cdc:	480c      	ldr	r0, [pc, #48]	; (13d10 <InitHashDrv+0x44>)
   13cde:	bd10      	pop	{r4, pc}
   13ce0:	2220      	movs	r2, #32
   13ce2:	490c      	ldr	r1, [pc, #48]	; (13d14 <InitHashDrv+0x48>)
   13ce4:	3008      	adds	r0, #8
   13ce6:	f7ff fedd 	bl	13aa4 <CC_PalMemCopyPlat>
   13cea:	2000      	movs	r0, #0
   13cec:	bd10      	pop	{r4, pc}
   13cee:	2214      	movs	r2, #20
   13cf0:	4909      	ldr	r1, [pc, #36]	; (13d18 <InitHashDrv+0x4c>)
   13cf2:	3008      	adds	r0, #8
   13cf4:	f7ff fed6 	bl	13aa4 <CC_PalMemCopyPlat>
   13cf8:	4620      	mov	r0, r4
   13cfa:	bd10      	pop	{r4, pc}
   13cfc:	2220      	movs	r2, #32
   13cfe:	4907      	ldr	r1, [pc, #28]	; (13d1c <InitHashDrv+0x50>)
   13d00:	3008      	adds	r0, #8
   13d02:	f7ff fecf 	bl	13aa4 <CC_PalMemCopyPlat>
   13d06:	2000      	movs	r0, #0
   13d08:	bd10      	pop	{r4, pc}
   13d0a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   13d0e:	4770      	bx	lr
   13d10:	00f30001 	.word	0x00f30001
   13d14:	00015aec 	.word	0x00015aec
   13d18:	00015ab8 	.word	0x00015ab8
   13d1c:	00015acc 	.word	0x00015acc

00013d20 <ProcessHashDrv>:
   13d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d24:	2900      	cmp	r1, #0
   13d26:	f000 80ef 	beq.w	13f08 <ProcessHashDrv+0x1e8>
   13d2a:	4604      	mov	r4, r0
   13d2c:	2800      	cmp	r0, #0
   13d2e:	f000 80ef 	beq.w	13f10 <ProcessHashDrv+0x1f0>
   13d32:	6803      	ldr	r3, [r0, #0]
   13d34:	4617      	mov	r7, r2
   13d36:	460e      	mov	r6, r1
   13d38:	2b00      	cmp	r3, #0
   13d3a:	f000 80b9 	beq.w	13eb0 <ProcessHashDrv+0x190>
   13d3e:	3b01      	subs	r3, #1
   13d40:	2b01      	cmp	r3, #1
   13d42:	f200 80cd 	bhi.w	13ee0 <ProcessHashDrv+0x1c0>
   13d46:	f04f 31ff 	mov.w	r1, #4294967295
   13d4a:	4873      	ldr	r0, [pc, #460]	; (13f18 <ProcessHashDrv+0x1f8>)
   13d4c:	f04f 0802 	mov.w	r8, #2
   13d50:	f7ff f8ee 	bl	12f30 <CC_PalMutexLock>
   13d54:	2800      	cmp	r0, #0
   13d56:	f040 80b5 	bne.w	13ec4 <ProcessHashDrv+0x1a4>
   13d5a:	2000      	movs	r0, #0
   13d5c:	f7ff f918 	bl	12f90 <CC_PalPowerSaveModeSelect>
   13d60:	4605      	mov	r5, r0
   13d62:	2800      	cmp	r0, #0
   13d64:	f040 80b8 	bne.w	13ed8 <ProcessHashDrv+0x1b8>
   13d68:	4a6c      	ldr	r2, [pc, #432]	; (13f1c <ProcessHashDrv+0x1fc>)
   13d6a:	6813      	ldr	r3, [r2, #0]
   13d6c:	2b00      	cmp	r3, #0
   13d6e:	d1fc      	bne.n	13d6a <ProcessHashDrv+0x4a>
   13d70:	486b      	ldr	r0, [pc, #428]	; (13f20 <ProcessHashDrv+0x200>)
   13d72:	6803      	ldr	r3, [r0, #0]
   13d74:	2b00      	cmp	r3, #0
   13d76:	d1fc      	bne.n	13d72 <ProcessHashDrv+0x52>
   13d78:	f04f 30ff 	mov.w	r0, #4294967295
   13d7c:	f7ff f832 	bl	12de4 <CC_HalClearInterruptBit>
   13d80:	4b68      	ldr	r3, [pc, #416]	; (13f24 <ProcessHashDrv+0x204>)
   13d82:	6818      	ldr	r0, [r3, #0]
   13d84:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   13d88:	f7ff f83a 	bl	12e00 <CC_HalMaskInterrupt>
   13d8c:	2301      	movs	r3, #1
   13d8e:	2007      	movs	r0, #7
   13d90:	4a65      	ldr	r2, [pc, #404]	; (13f28 <ProcessHashDrv+0x208>)
   13d92:	4966      	ldr	r1, [pc, #408]	; (13f2c <ProcessHashDrv+0x20c>)
   13d94:	6013      	str	r3, [r2, #0]
   13d96:	6008      	str	r0, [r1, #0]
   13d98:	f842 3c54 	str.w	r3, [r2, #-84]
   13d9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   13d9e:	4b64      	ldr	r3, [pc, #400]	; (13f30 <ProcessHashDrv+0x210>)
   13da0:	3a48      	subs	r2, #72	; 0x48
   13da2:	6019      	str	r1, [r3, #0]
   13da4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   13da6:	6011      	str	r1, [r2, #0]
   13da8:	f843 8c0c 	str.w	r8, [r3, #-12]
   13dac:	6823      	ldr	r3, [r4, #0]
   13dae:	b163      	cbz	r3, 13dca <ProcessHashDrv+0xaa>
   13db0:	3b01      	subs	r3, #1
   13db2:	2b01      	cmp	r3, #1
   13db4:	d818      	bhi.n	13de8 <ProcessHashDrv+0xc8>
   13db6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13db8:	4b5e      	ldr	r3, [pc, #376]	; (13f34 <ProcessHashDrv+0x214>)
   13dba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
   13dbe:	6019      	str	r1, [r3, #0]
   13dc0:	6a21      	ldr	r1, [r4, #32]
   13dc2:	6011      	str	r1, [r2, #0]
   13dc4:	69e2      	ldr	r2, [r4, #28]
   13dc6:	f843 2c08 	str.w	r2, [r3, #-8]
   13dca:	69a1      	ldr	r1, [r4, #24]
   13dcc:	4b5a      	ldr	r3, [pc, #360]	; (13f38 <ProcessHashDrv+0x218>)
   13dce:	4a5b      	ldr	r2, [pc, #364]	; (13f3c <ProcessHashDrv+0x21c>)
   13dd0:	6019      	str	r1, [r3, #0]
   13dd2:	6961      	ldr	r1, [r4, #20]
   13dd4:	6011      	str	r1, [r2, #0]
   13dd6:	6921      	ldr	r1, [r4, #16]
   13dd8:	f843 1c08 	str.w	r1, [r3, #-8]
   13ddc:	68e1      	ldr	r1, [r4, #12]
   13dde:	f842 1c08 	str.w	r1, [r2, #-8]
   13de2:	68a2      	ldr	r2, [r4, #8]
   13de4:	f843 2c10 	str.w	r2, [r3, #-16]
   13de8:	4a55      	ldr	r2, [pc, #340]	; (13f40 <ProcessHashDrv+0x220>)
   13dea:	6813      	ldr	r3, [r2, #0]
   13dec:	2b00      	cmp	r3, #0
   13dee:	d1fc      	bne.n	13dea <ProcessHashDrv+0xca>
   13df0:	2f00      	cmp	r7, #0
   13df2:	d059      	beq.n	13ea8 <ProcessHashDrv+0x188>
   13df4:	6863      	ldr	r3, [r4, #4]
   13df6:	2040      	movs	r0, #64	; 0x40
   13df8:	2b01      	cmp	r3, #1
   13dfa:	bf04      	itt	eq
   13dfc:	4a51      	ldreq	r2, [pc, #324]	; (13f44 <ProcessHashDrv+0x224>)
   13dfe:	6013      	streq	r3, [r2, #0]
   13e00:	6831      	ldr	r1, [r6, #0]
   13e02:	4a51      	ldr	r2, [pc, #324]	; (13f48 <ProcessHashDrv+0x228>)
   13e04:	4b51      	ldr	r3, [pc, #324]	; (13f4c <ProcessHashDrv+0x22c>)
   13e06:	6011      	str	r1, [r2, #0]
   13e08:	601f      	str	r7, [r3, #0]
   13e0a:	f7fe ffff 	bl	12e0c <CC_HalWaitInterrupt>
   13e0e:	4605      	mov	r5, r0
   13e10:	4a4b      	ldr	r2, [pc, #300]	; (13f40 <ProcessHashDrv+0x220>)
   13e12:	6813      	ldr	r3, [r2, #0]
   13e14:	2b00      	cmp	r3, #0
   13e16:	d1fc      	bne.n	13e12 <ProcessHashDrv+0xf2>
   13e18:	4a41      	ldr	r2, [pc, #260]	; (13f20 <ProcessHashDrv+0x200>)
   13e1a:	6813      	ldr	r3, [r2, #0]
   13e1c:	2b00      	cmp	r3, #0
   13e1e:	d1fc      	bne.n	13e1a <ProcessHashDrv+0xfa>
   13e20:	6823      	ldr	r3, [r4, #0]
   13e22:	b15b      	cbz	r3, 13e3c <ProcessHashDrv+0x11c>
   13e24:	3b01      	subs	r3, #1
   13e26:	2b01      	cmp	r3, #1
   13e28:	d816      	bhi.n	13e58 <ProcessHashDrv+0x138>
   13e2a:	4b42      	ldr	r3, [pc, #264]	; (13f34 <ProcessHashDrv+0x214>)
   13e2c:	4a48      	ldr	r2, [pc, #288]	; (13f50 <ProcessHashDrv+0x230>)
   13e2e:	6819      	ldr	r1, [r3, #0]
   13e30:	3b08      	subs	r3, #8
   13e32:	6261      	str	r1, [r4, #36]	; 0x24
   13e34:	6812      	ldr	r2, [r2, #0]
   13e36:	6222      	str	r2, [r4, #32]
   13e38:	681b      	ldr	r3, [r3, #0]
   13e3a:	61e3      	str	r3, [r4, #28]
   13e3c:	4b3e      	ldr	r3, [pc, #248]	; (13f38 <ProcessHashDrv+0x218>)
   13e3e:	4a3f      	ldr	r2, [pc, #252]	; (13f3c <ProcessHashDrv+0x21c>)
   13e40:	6819      	ldr	r1, [r3, #0]
   13e42:	3a08      	subs	r2, #8
   13e44:	61a1      	str	r1, [r4, #24]
   13e46:	6891      	ldr	r1, [r2, #8]
   13e48:	3b10      	subs	r3, #16
   13e4a:	6161      	str	r1, [r4, #20]
   13e4c:	6899      	ldr	r1, [r3, #8]
   13e4e:	6121      	str	r1, [r4, #16]
   13e50:	6812      	ldr	r2, [r2, #0]
   13e52:	60e2      	str	r2, [r4, #12]
   13e54:	681b      	ldr	r3, [r3, #0]
   13e56:	60a3      	str	r3, [r4, #8]
   13e58:	2101      	movs	r1, #1
   13e5a:	2300      	movs	r3, #0
   13e5c:	4834      	ldr	r0, [pc, #208]	; (13f30 <ProcessHashDrv+0x210>)
   13e5e:	4a3d      	ldr	r2, [pc, #244]	; (13f54 <ProcessHashDrv+0x234>)
   13e60:	6800      	ldr	r0, [r0, #0]
   13e62:	64a0      	str	r0, [r4, #72]	; 0x48
   13e64:	6810      	ldr	r0, [r2, #0]
   13e66:	64e0      	str	r0, [r4, #76]	; 0x4c
   13e68:	f842 1c0c 	str.w	r1, [r2, #-12]
   13e6c:	4835      	ldr	r0, [pc, #212]	; (13f44 <ProcessHashDrv+0x224>)
   13e6e:	493a      	ldr	r1, [pc, #232]	; (13f58 <ProcessHashDrv+0x238>)
   13e70:	6003      	str	r3, [r0, #0]
   13e72:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   13e76:	600b      	str	r3, [r1, #0]
   13e78:	6813      	ldr	r3, [r2, #0]
   13e7a:	2b00      	cmp	r3, #0
   13e7c:	d1fc      	bne.n	13e78 <ProcessHashDrv+0x158>
   13e7e:	4a2a      	ldr	r2, [pc, #168]	; (13f28 <ProcessHashDrv+0x208>)
   13e80:	6013      	str	r3, [r2, #0]
   13e82:	2d00      	cmp	r5, #0
   13e84:	d13a      	bne.n	13efc <ProcessHashDrv+0x1dc>
   13e86:	4b27      	ldr	r3, [pc, #156]	; (13f24 <ProcessHashDrv+0x204>)
   13e88:	6818      	ldr	r0, [r3, #0]
   13e8a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   13e8e:	f7fe ffb7 	bl	12e00 <CC_HalMaskInterrupt>
   13e92:	2001      	movs	r0, #1
   13e94:	f7ff f87c 	bl	12f90 <CC_PalPowerSaveModeSelect>
   13e98:	bb60      	cbnz	r0, 13ef4 <ProcessHashDrv+0x1d4>
   13e9a:	481f      	ldr	r0, [pc, #124]	; (13f18 <ProcessHashDrv+0x1f8>)
   13e9c:	f7ff f850 	bl	12f40 <CC_PalMutexUnlock>
   13ea0:	bb10      	cbnz	r0, 13ee8 <ProcessHashDrv+0x1c8>
   13ea2:	4628      	mov	r0, r5
   13ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ea8:	2204      	movs	r2, #4
   13eaa:	4b2b      	ldr	r3, [pc, #172]	; (13f58 <ProcessHashDrv+0x238>)
   13eac:	601a      	str	r2, [r3, #0]
   13eae:	e7af      	b.n	13e10 <ProcessHashDrv+0xf0>
   13eb0:	f04f 31ff 	mov.w	r1, #4294967295
   13eb4:	4818      	ldr	r0, [pc, #96]	; (13f18 <ProcessHashDrv+0x1f8>)
   13eb6:	f04f 0801 	mov.w	r8, #1
   13eba:	f7ff f839 	bl	12f30 <CC_PalMutexLock>
   13ebe:	2800      	cmp	r0, #0
   13ec0:	f43f af4b 	beq.w	13d5a <ProcessHashDrv+0x3a>
   13ec4:	4825      	ldr	r0, [pc, #148]	; (13f5c <ProcessHashDrv+0x23c>)
   13ec6:	f7fe f8e9 	bl	1209c <CC_PalAbort>
   13eca:	2000      	movs	r0, #0
   13ecc:	f7ff f860 	bl	12f90 <CC_PalPowerSaveModeSelect>
   13ed0:	4605      	mov	r5, r0
   13ed2:	2800      	cmp	r0, #0
   13ed4:	f43f af48 	beq.w	13d68 <ProcessHashDrv+0x48>
   13ed8:	4821      	ldr	r0, [pc, #132]	; (13f60 <ProcessHashDrv+0x240>)
   13eda:	f7fe f8df 	bl	1209c <CC_PalAbort>
   13ede:	e743      	b.n	13d68 <ProcessHashDrv+0x48>
   13ee0:	4d20      	ldr	r5, [pc, #128]	; (13f64 <ProcessHashDrv+0x244>)
   13ee2:	4628      	mov	r0, r5
   13ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ee8:	481f      	ldr	r0, [pc, #124]	; (13f68 <ProcessHashDrv+0x248>)
   13eea:	f7fe f8d7 	bl	1209c <CC_PalAbort>
   13eee:	4628      	mov	r0, r5
   13ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ef4:	481d      	ldr	r0, [pc, #116]	; (13f6c <ProcessHashDrv+0x24c>)
   13ef6:	f7fe f8d1 	bl	1209c <CC_PalAbort>
   13efa:	e7ce      	b.n	13e9a <ProcessHashDrv+0x17a>
   13efc:	2110      	movs	r1, #16
   13efe:	f104 0008 	add.w	r0, r4, #8
   13f02:	f7ff fdd3 	bl	13aac <CC_PalMemSetZeroPlat>
   13f06:	e7be      	b.n	13e86 <ProcessHashDrv+0x166>
   13f08:	4d19      	ldr	r5, [pc, #100]	; (13f70 <ProcessHashDrv+0x250>)
   13f0a:	4628      	mov	r0, r5
   13f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f10:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   13f14:	e7c5      	b.n	13ea2 <ProcessHashDrv+0x182>
   13f16:	bf00      	nop
   13f18:	200000e4 	.word	0x200000e4
   13f1c:	5084191c 	.word	0x5084191c
   13f20:	50841c20 	.word	0x50841c20
   13f24:	50841a04 	.word	0x50841a04
   13f28:	50841818 	.word	0x50841818
   13f2c:	50841900 	.word	0x50841900
   13f30:	508417cc 	.word	0x508417cc
   13f34:	5084165c 	.word	0x5084165c
   13f38:	50841650 	.word	0x50841650
   13f3c:	5084164c 	.word	0x5084164c
   13f40:	50841910 	.word	0x50841910
   13f44:	50841684 	.word	0x50841684
   13f48:	50841c28 	.word	0x50841c28
   13f4c:	50841c2c 	.word	0x50841c2c
   13f50:	50841658 	.word	0x50841658
   13f54:	508417d0 	.word	0x508417d0
   13f58:	508417c8 	.word	0x508417c8
   13f5c:	000159ec 	.word	0x000159ec
   13f60:	00015a04 	.word	0x00015a04
   13f64:	00f30001 	.word	0x00f30001
   13f68:	00015a44 	.word	0x00015a44
   13f6c:	00015a24 	.word	0x00015a24
   13f70:	00f30003 	.word	0x00f30003

00013f74 <FinishHashDrv>:
   13f74:	2800      	cmp	r0, #0
   13f76:	d03a      	beq.n	13fee <FinishHashDrv+0x7a>
   13f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f7c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   13f80:	fa92 f882 	rev.w	r8, r2
   13f84:	fa93 fe83 	rev.w	lr, r3
   13f88:	6a02      	ldr	r2, [r0, #32]
   13f8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13f8c:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
   13f90:	ba12      	rev	r2, r2
   13f92:	ba24      	rev	r4, r4
   13f94:	ba1b      	rev	r3, r3
   13f96:	6104      	str	r4, [r0, #16]
   13f98:	6202      	str	r2, [r0, #32]
   13f9a:	6a84      	ldr	r4, [r0, #40]	; 0x28
   13f9c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   13f9e:	6243      	str	r3, [r0, #36]	; 0x24
   13fa0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   13fa2:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
   13fa6:	ba09      	rev	r1, r1
   13fa8:	ba36      	rev	r6, r6
   13faa:	ba2d      	rev	r5, r5
   13fac:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   13fae:	6086      	str	r6, [r0, #8]
   13fb0:	60c5      	str	r5, [r0, #12]
   13fb2:	6b06      	ldr	r6, [r0, #48]	; 0x30
   13fb4:	6b45      	ldr	r5, [r0, #52]	; 0x34
   13fb6:	6141      	str	r1, [r0, #20]
   13fb8:	fa94 fc84 	rev.w	ip, r4
   13fbc:	ba19      	rev	r1, r3
   13fbe:	ba14      	rev	r4, r2
   13fc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13fc2:	6c02      	ldr	r2, [r0, #64]	; 0x40
   13fc4:	ba3f      	rev	r7, r7
   13fc6:	ba36      	rev	r6, r6
   13fc8:	ba2d      	rev	r5, r5
   13fca:	ba12      	rev	r2, r2
   13fcc:	ba1b      	rev	r3, r3
   13fce:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   13fd2:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   13fd6:	f8c0 8018 	str.w	r8, [r0, #24]
   13fda:	f8c0 e01c 	str.w	lr, [r0, #28]
   13fde:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   13fe2:	62c7      	str	r7, [r0, #44]	; 0x2c
   13fe4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   13fe8:	2000      	movs	r0, #0
   13fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fee:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   13ff2:	4770      	bx	lr

00013ff4 <LoadAesKey>:
   13ff4:	2800      	cmp	r0, #0
   13ff6:	d060      	beq.n	140ba <LoadAesKey+0xc6>
   13ff8:	b538      	push	{r3, r4, r5, lr}
   13ffa:	4604      	mov	r4, r0
   13ffc:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   14000:	2802      	cmp	r0, #2
   14002:	d016      	beq.n	14032 <LoadAesKey+0x3e>
   14004:	2803      	cmp	r0, #3
   14006:	d03c      	beq.n	14082 <LoadAesKey+0x8e>
   14008:	2800      	cmp	r0, #0
   1400a:	d02f      	beq.n	1406c <LoadAesKey+0x78>
   1400c:	482c      	ldr	r0, [pc, #176]	; (140c0 <LoadAesKey+0xcc>)
   1400e:	4d2d      	ldr	r5, [pc, #180]	; (140c4 <LoadAesKey+0xd0>)
   14010:	682a      	ldr	r2, [r5, #0]
   14012:	4b2d      	ldr	r3, [pc, #180]	; (140c8 <LoadAesKey+0xd4>)
   14014:	6812      	ldr	r2, [r2, #0]
   14016:	492d      	ldr	r1, [pc, #180]	; (140cc <LoadAesKey+0xd8>)
   14018:	601a      	str	r2, [r3, #0]
   1401a:	682b      	ldr	r3, [r5, #0]
   1401c:	4a2c      	ldr	r2, [pc, #176]	; (140d0 <LoadAesKey+0xdc>)
   1401e:	685c      	ldr	r4, [r3, #4]
   14020:	4b2c      	ldr	r3, [pc, #176]	; (140d4 <LoadAesKey+0xe0>)
   14022:	600c      	str	r4, [r1, #0]
   14024:	6829      	ldr	r1, [r5, #0]
   14026:	6889      	ldr	r1, [r1, #8]
   14028:	6011      	str	r1, [r2, #0]
   1402a:	682a      	ldr	r2, [r5, #0]
   1402c:	68d2      	ldr	r2, [r2, #12]
   1402e:	601a      	str	r2, [r3, #0]
   14030:	bd38      	pop	{r3, r4, r5, pc}
   14032:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14034:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14036:	f000 fbdd 	bl	147f4 <kmu_validate_slot_and_size_no_kdr>
   1403a:	4d22      	ldr	r5, [pc, #136]	; (140c4 <LoadAesKey+0xd0>)
   1403c:	2800      	cmp	r0, #0
   1403e:	d1e7      	bne.n	14010 <LoadAesKey+0x1c>
   14040:	682a      	ldr	r2, [r5, #0]
   14042:	4b21      	ldr	r3, [pc, #132]	; (140c8 <LoadAesKey+0xd4>)
   14044:	6810      	ldr	r0, [r2, #0]
   14046:	4921      	ldr	r1, [pc, #132]	; (140cc <LoadAesKey+0xd8>)
   14048:	6018      	str	r0, [r3, #0]
   1404a:	6828      	ldr	r0, [r5, #0]
   1404c:	4a20      	ldr	r2, [pc, #128]	; (140d0 <LoadAesKey+0xdc>)
   1404e:	6840      	ldr	r0, [r0, #4]
   14050:	6008      	str	r0, [r1, #0]
   14052:	6829      	ldr	r1, [r5, #0]
   14054:	6889      	ldr	r1, [r1, #8]
   14056:	6011      	str	r1, [r2, #0]
   14058:	682a      	ldr	r2, [r5, #0]
   1405a:	68d2      	ldr	r2, [r2, #12]
   1405c:	60da      	str	r2, [r3, #12]
   1405e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14060:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14062:	f000 fc3b 	bl	148dc <kmu_load_key_aes>
   14066:	2800      	cmp	r0, #0
   14068:	d025      	beq.n	140b6 <LoadAesKey+0xc2>
   1406a:	e7d1      	b.n	14010 <LoadAesKey+0x1c>
   1406c:	6921      	ldr	r1, [r4, #16]
   1406e:	4a16      	ldr	r2, [pc, #88]	; (140c8 <LoadAesKey+0xd4>)
   14070:	4b16      	ldr	r3, [pc, #88]	; (140cc <LoadAesKey+0xd8>)
   14072:	6011      	str	r1, [r2, #0]
   14074:	6961      	ldr	r1, [r4, #20]
   14076:	6019      	str	r1, [r3, #0]
   14078:	69a1      	ldr	r1, [r4, #24]
   1407a:	6091      	str	r1, [r2, #8]
   1407c:	69e2      	ldr	r2, [r4, #28]
   1407e:	609a      	str	r2, [r3, #8]
   14080:	bd38      	pop	{r3, r4, r5, pc}
   14082:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14084:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14086:	f000 fbf9 	bl	1487c <kmu_validate_kdr_slot_and_size>
   1408a:	4d0e      	ldr	r5, [pc, #56]	; (140c4 <LoadAesKey+0xd0>)
   1408c:	2800      	cmp	r0, #0
   1408e:	d1bf      	bne.n	14010 <LoadAesKey+0x1c>
   14090:	682a      	ldr	r2, [r5, #0]
   14092:	4b0d      	ldr	r3, [pc, #52]	; (140c8 <LoadAesKey+0xd4>)
   14094:	6810      	ldr	r0, [r2, #0]
   14096:	490d      	ldr	r1, [pc, #52]	; (140cc <LoadAesKey+0xd8>)
   14098:	6018      	str	r0, [r3, #0]
   1409a:	6828      	ldr	r0, [r5, #0]
   1409c:	4a0c      	ldr	r2, [pc, #48]	; (140d0 <LoadAesKey+0xdc>)
   1409e:	6840      	ldr	r0, [r0, #4]
   140a0:	6008      	str	r0, [r1, #0]
   140a2:	6829      	ldr	r1, [r5, #0]
   140a4:	6889      	ldr	r1, [r1, #8]
   140a6:	6011      	str	r1, [r2, #0]
   140a8:	682a      	ldr	r2, [r5, #0]
   140aa:	68d2      	ldr	r2, [r2, #12]
   140ac:	60da      	str	r2, [r3, #12]
   140ae:	f000 fc09 	bl	148c4 <kmu_use_kdr_key>
   140b2:	2800      	cmp	r0, #0
   140b4:	d1ac      	bne.n	14010 <LoadAesKey+0x1c>
   140b6:	2000      	movs	r0, #0
   140b8:	bd38      	pop	{r3, r4, r5, pc}
   140ba:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   140be:	4770      	bx	lr
   140c0:	00f10009 	.word	0x00f10009
   140c4:	200000d4 	.word	0x200000d4
   140c8:	50841400 	.word	0x50841400
   140cc:	50841404 	.word	0x50841404
   140d0:	50841408 	.word	0x50841408
   140d4:	5084140c 	.word	0x5084140c

000140d8 <InitAes.part.0>:
   140d8:	b510      	push	{r4, lr}
   140da:	4604      	mov	r4, r0
   140dc:	4a31      	ldr	r2, [pc, #196]	; (141a4 <InitAes.part.0+0xcc>)
   140de:	6813      	ldr	r3, [r2, #0]
   140e0:	2b00      	cmp	r3, #0
   140e2:	d1fc      	bne.n	140de <InitAes.part.0+0x6>
   140e4:	4a30      	ldr	r2, [pc, #192]	; (141a8 <InitAes.part.0+0xd0>)
   140e6:	6813      	ldr	r3, [r2, #0]
   140e8:	2b00      	cmp	r3, #0
   140ea:	d1fc      	bne.n	140e6 <InitAes.part.0+0xe>
   140ec:	4a2f      	ldr	r2, [pc, #188]	; (141ac <InitAes.part.0+0xd4>)
   140ee:	6813      	ldr	r3, [r2, #0]
   140f0:	2b00      	cmp	r3, #0
   140f2:	d1fc      	bne.n	140ee <InitAes.part.0+0x16>
   140f4:	4a2e      	ldr	r2, [pc, #184]	; (141b0 <InitAes.part.0+0xd8>)
   140f6:	6813      	ldr	r3, [r2, #0]
   140f8:	2b00      	cmp	r3, #0
   140fa:	d1fc      	bne.n	140f6 <InitAes.part.0+0x1e>
   140fc:	4a2d      	ldr	r2, [pc, #180]	; (141b4 <InitAes.part.0+0xdc>)
   140fe:	6813      	ldr	r3, [r2, #0]
   14100:	2b00      	cmp	r3, #0
   14102:	d1fc      	bne.n	140fe <InitAes.part.0+0x26>
   14104:	4a2c      	ldr	r2, [pc, #176]	; (141b8 <InitAes.part.0+0xe0>)
   14106:	6813      	ldr	r3, [r2, #0]
   14108:	2b00      	cmp	r3, #0
   1410a:	d1fc      	bne.n	14106 <InitAes.part.0+0x2e>
   1410c:	f04f 30ff 	mov.w	r0, #4294967295
   14110:	f7fe fe68 	bl	12de4 <CC_HalClearInterruptBit>
   14114:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14116:	f023 0304 	bic.w	r3, r3, #4
   1411a:	2b03      	cmp	r3, #3
   1411c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1411e:	d036      	beq.n	1418e <InitAes.part.0+0xb6>
   14120:	2b01      	cmp	r3, #1
   14122:	4b26      	ldr	r3, [pc, #152]	; (141bc <InitAes.part.0+0xe4>)
   14124:	6818      	ldr	r0, [r3, #0]
   14126:	bf0c      	ite	eq
   14128:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1412c:	f020 0020 	bicne.w	r0, r0, #32
   14130:	f7fe fe66 	bl	12e00 <CC_HalMaskInterrupt>
   14134:	2101      	movs	r1, #1
   14136:	4b22      	ldr	r3, [pc, #136]	; (141c0 <InitAes.part.0+0xe8>)
   14138:	4a1a      	ldr	r2, [pc, #104]	; (141a4 <InitAes.part.0+0xcc>)
   1413a:	6019      	str	r1, [r3, #0]
   1413c:	6813      	ldr	r3, [r2, #0]
   1413e:	2b00      	cmp	r3, #0
   14140:	d1fc      	bne.n	1413c <InitAes.part.0+0x64>
   14142:	4a19      	ldr	r2, [pc, #100]	; (141a8 <InitAes.part.0+0xd0>)
   14144:	6813      	ldr	r3, [r2, #0]
   14146:	2b00      	cmp	r3, #0
   14148:	d1fc      	bne.n	14144 <InitAes.part.0+0x6c>
   1414a:	491e      	ldr	r1, [pc, #120]	; (141c4 <InitAes.part.0+0xec>)
   1414c:	4a15      	ldr	r2, [pc, #84]	; (141a4 <InitAes.part.0+0xcc>)
   1414e:	600b      	str	r3, [r1, #0]
   14150:	6813      	ldr	r3, [r2, #0]
   14152:	2b00      	cmp	r3, #0
   14154:	d1fc      	bne.n	14150 <InitAes.part.0+0x78>
   14156:	4a14      	ldr	r2, [pc, #80]	; (141a8 <InitAes.part.0+0xd0>)
   14158:	6813      	ldr	r3, [r2, #0]
   1415a:	2b00      	cmp	r3, #0
   1415c:	d1fc      	bne.n	14158 <InitAes.part.0+0x80>
   1415e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   14160:	f022 0104 	bic.w	r1, r2, #4
   14164:	2903      	cmp	r1, #3
   14166:	bf18      	it	ne
   14168:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1416a:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1416e:	bf18      	it	ne
   14170:	f003 0301 	andne.w	r3, r3, #1
   14174:	4914      	ldr	r1, [pc, #80]	; (141c8 <InitAes.part.0+0xf0>)
   14176:	f002 021c 	and.w	r2, r2, #28
   1417a:	4313      	orrs	r3, r2
   1417c:	600b      	str	r3, [r1, #0]
   1417e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14180:	2b07      	cmp	r3, #7
   14182:	d102      	bne.n	1418a <InitAes.part.0+0xb2>
   14184:	2201      	movs	r2, #1
   14186:	4b11      	ldr	r3, [pc, #68]	; (141cc <InitAes.part.0+0xf4>)
   14188:	601a      	str	r2, [r3, #0]
   1418a:	2000      	movs	r0, #0
   1418c:	bd10      	pop	{r4, pc}
   1418e:	2b01      	cmp	r3, #1
   14190:	4b0a      	ldr	r3, [pc, #40]	; (141bc <InitAes.part.0+0xe4>)
   14192:	6818      	ldr	r0, [r3, #0]
   14194:	bf0c      	ite	eq
   14196:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1419a:	f020 0010 	bicne.w	r0, r0, #16
   1419e:	f7fe fe2f 	bl	12e00 <CC_HalMaskInterrupt>
   141a2:	e7c7      	b.n	14134 <InitAes.part.0+0x5c>
   141a4:	50841910 	.word	0x50841910
   141a8:	50841470 	.word	0x50841470
   141ac:	50841d20 	.word	0x50841d20
   141b0:	50841c20 	.word	0x50841c20
   141b4:	50841d38 	.word	0x50841d38
   141b8:	50841c38 	.word	0x50841c38
   141bc:	50841a04 	.word	0x50841a04
   141c0:	50841900 	.word	0x50841900
   141c4:	508414bc 	.word	0x508414bc
   141c8:	508414c0 	.word	0x508414c0
   141cc:	5084147c 	.word	0x5084147c

000141d0 <ProcessAesDrv>:
   141d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d4:	b087      	sub	sp, #28
   141d6:	2900      	cmp	r1, #0
   141d8:	f000 80a5 	beq.w	14326 <ProcessAesDrv+0x156>
   141dc:	4616      	mov	r6, r2
   141de:	2a00      	cmp	r2, #0
   141e0:	f000 80a1 	beq.w	14326 <ProcessAesDrv+0x156>
   141e4:	4604      	mov	r4, r0
   141e6:	2800      	cmp	r0, #0
   141e8:	f000 8141 	beq.w	1446e <ProcessAesDrv+0x29e>
   141ec:	461f      	mov	r7, r3
   141ee:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   141f0:	460d      	mov	r5, r1
   141f2:	2b00      	cmp	r3, #0
   141f4:	d150      	bne.n	14298 <ProcessAesDrv+0xc8>
   141f6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   141fa:	d252      	bcs.n	142a2 <ProcessAesDrv+0xd2>
   141fc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   14200:	2b04      	cmp	r3, #4
   14202:	f000 810b 	beq.w	1441c <ProcessAesDrv+0x24c>
   14206:	f04f 0800 	mov.w	r8, #0
   1420a:	f04f 31ff 	mov.w	r1, #4294967295
   1420e:	48a9      	ldr	r0, [pc, #676]	; (144b4 <ProcessAesDrv+0x2e4>)
   14210:	f7fe fe8e 	bl	12f30 <CC_PalMutexLock>
   14214:	2800      	cmp	r0, #0
   14216:	f040 80e0 	bne.w	143da <ProcessAesDrv+0x20a>
   1421a:	2000      	movs	r0, #0
   1421c:	f7fe feb8 	bl	12f90 <CC_PalPowerSaveModeSelect>
   14220:	2800      	cmp	r0, #0
   14222:	f040 80e3 	bne.w	143ec <ProcessAesDrv+0x21c>
   14226:	2101      	movs	r1, #1
   14228:	4ba3      	ldr	r3, [pc, #652]	; (144b8 <ProcessAesDrv+0x2e8>)
   1422a:	4aa4      	ldr	r2, [pc, #656]	; (144bc <ProcessAesDrv+0x2ec>)
   1422c:	6019      	str	r1, [r3, #0]
   1422e:	6813      	ldr	r3, [r2, #0]
   14230:	2b00      	cmp	r3, #0
   14232:	d1fc      	bne.n	1422e <ProcessAesDrv+0x5e>
   14234:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14236:	2b03      	cmp	r3, #3
   14238:	dc39      	bgt.n	142ae <ProcessAesDrv+0xde>
   1423a:	2b00      	cmp	r3, #0
   1423c:	da3a      	bge.n	142b4 <ProcessAesDrv+0xe4>
   1423e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 14508 <ProcessAesDrv+0x338>
   14242:	4a9e      	ldr	r2, [pc, #632]	; (144bc <ProcessAesDrv+0x2ec>)
   14244:	6813      	ldr	r3, [r2, #0]
   14246:	2b00      	cmp	r3, #0
   14248:	d1fc      	bne.n	14244 <ProcessAesDrv+0x74>
   1424a:	f1b8 0f00 	cmp.w	r8, #0
   1424e:	f040 80dc 	bne.w	1440a <ProcessAesDrv+0x23a>
   14252:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14254:	f023 0304 	bic.w	r3, r3, #4
   14258:	2b03      	cmp	r3, #3
   1425a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1425c:	d058      	beq.n	14310 <ProcessAesDrv+0x140>
   1425e:	2b01      	cmp	r3, #1
   14260:	4b97      	ldr	r3, [pc, #604]	; (144c0 <ProcessAesDrv+0x2f0>)
   14262:	6818      	ldr	r0, [r3, #0]
   14264:	bf0c      	ite	eq
   14266:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1426a:	f040 0020 	orrne.w	r0, r0, #32
   1426e:	f7fe fdc7 	bl	12e00 <CC_HalMaskInterrupt>
   14272:	2200      	movs	r2, #0
   14274:	4b90      	ldr	r3, [pc, #576]	; (144b8 <ProcessAesDrv+0x2e8>)
   14276:	2001      	movs	r0, #1
   14278:	601a      	str	r2, [r3, #0]
   1427a:	f7fe fe89 	bl	12f90 <CC_PalPowerSaveModeSelect>
   1427e:	2800      	cmp	r0, #0
   14280:	f040 80bf 	bne.w	14402 <ProcessAesDrv+0x232>
   14284:	488b      	ldr	r0, [pc, #556]	; (144b4 <ProcessAesDrv+0x2e4>)
   14286:	f7fe fe5b 	bl	12f40 <CC_PalMutexUnlock>
   1428a:	2800      	cmp	r0, #0
   1428c:	f040 80b2 	bne.w	143f4 <ProcessAesDrv+0x224>
   14290:	4648      	mov	r0, r9
   14292:	b007      	add	sp, #28
   14294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14298:	2b01      	cmp	r3, #1
   1429a:	d1af      	bne.n	141fc <ProcessAesDrv+0x2c>
   1429c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   142a0:	d3ac      	bcc.n	141fc <ProcessAesDrv+0x2c>
   142a2:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1450c <ProcessAesDrv+0x33c>
   142a6:	4648      	mov	r0, r9
   142a8:	b007      	add	sp, #28
   142aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ae:	3b06      	subs	r3, #6
   142b0:	2b01      	cmp	r3, #1
   142b2:	d8c4      	bhi.n	1423e <ProcessAesDrv+0x6e>
   142b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   142b6:	2b01      	cmp	r3, #1
   142b8:	f200 80d6 	bhi.w	14468 <ProcessAesDrv+0x298>
   142bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   142be:	2b01      	cmp	r3, #1
   142c0:	d837      	bhi.n	14332 <ProcessAesDrv+0x162>
   142c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   142c4:	2b01      	cmp	r3, #1
   142c6:	f200 8134 	bhi.w	14532 <ProcessAesDrv+0x362>
   142ca:	4620      	mov	r0, r4
   142cc:	f7ff ff04 	bl	140d8 <InitAes.part.0>
   142d0:	4681      	mov	r9, r0
   142d2:	2800      	cmp	r0, #0
   142d4:	d1b5      	bne.n	14242 <ProcessAesDrv+0x72>
   142d6:	4620      	mov	r0, r4
   142d8:	f7ff fe8c 	bl	13ff4 <LoadAesKey>
   142dc:	4681      	mov	r9, r0
   142de:	2800      	cmp	r0, #0
   142e0:	d1af      	bne.n	14242 <ProcessAesDrv+0x72>
   142e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   142e4:	2b07      	cmp	r3, #7
   142e6:	d8aa      	bhi.n	1423e <ProcessAesDrv+0x6e>
   142e8:	a201      	add	r2, pc, #4	; (adr r2, 142f0 <ProcessAesDrv+0x120>)
   142ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   142ee:	bf00      	nop
   142f0:	0001434f 	.word	0x0001434f
   142f4:	00014339 	.word	0x00014339
   142f8:	000144ab 	.word	0x000144ab
   142fc:	00014339 	.word	0x00014339
   14300:	0001423f 	.word	0x0001423f
   14304:	0001423f 	.word	0x0001423f
   14308:	000144ab 	.word	0x000144ab
   1430c:	00014339 	.word	0x00014339
   14310:	2b01      	cmp	r3, #1
   14312:	4b6b      	ldr	r3, [pc, #428]	; (144c0 <ProcessAesDrv+0x2f0>)
   14314:	6818      	ldr	r0, [r3, #0]
   14316:	bf0c      	ite	eq
   14318:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1431c:	f040 0010 	orrne.w	r0, r0, #16
   14320:	f7fe fd6e 	bl	12e00 <CC_HalMaskInterrupt>
   14324:	e7a5      	b.n	14272 <ProcessAesDrv+0xa2>
   14326:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 14510 <ProcessAesDrv+0x340>
   1432a:	4648      	mov	r0, r9
   1432c:	b007      	add	sp, #28
   1432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14332:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 14514 <ProcessAesDrv+0x344>
   14336:	e784      	b.n	14242 <ProcessAesDrv+0x72>
   14338:	6821      	ldr	r1, [r4, #0]
   1433a:	4a62      	ldr	r2, [pc, #392]	; (144c4 <ProcessAesDrv+0x2f4>)
   1433c:	4b62      	ldr	r3, [pc, #392]	; (144c8 <ProcessAesDrv+0x2f8>)
   1433e:	6011      	str	r1, [r2, #0]
   14340:	6861      	ldr	r1, [r4, #4]
   14342:	6019      	str	r1, [r3, #0]
   14344:	68a1      	ldr	r1, [r4, #8]
   14346:	6091      	str	r1, [r2, #8]
   14348:	68e2      	ldr	r2, [r4, #12]
   1434a:	609a      	str	r2, [r3, #8]
   1434c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1434e:	f023 0304 	bic.w	r3, r3, #4
   14352:	2b03      	cmp	r3, #3
   14354:	682a      	ldr	r2, [r5, #0]
   14356:	d009      	beq.n	1436c <ProcessAesDrv+0x19c>
   14358:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1435a:	6833      	ldr	r3, [r6, #0]
   1435c:	2901      	cmp	r1, #1
   1435e:	bf07      	ittee	eq
   14360:	485a      	ldreq	r0, [pc, #360]	; (144cc <ProcessAesDrv+0x2fc>)
   14362:	495b      	ldreq	r1, [pc, #364]	; (144d0 <ProcessAesDrv+0x300>)
   14364:	485b      	ldrne	r0, [pc, #364]	; (144d4 <ProcessAesDrv+0x304>)
   14366:	495c      	ldrne	r1, [pc, #368]	; (144d8 <ProcessAesDrv+0x308>)
   14368:	6003      	str	r3, [r0, #0]
   1436a:	600f      	str	r7, [r1, #0]
   1436c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1436e:	2b01      	cmp	r3, #1
   14370:	bf0b      	itete	eq
   14372:	4b5a      	ldreq	r3, [pc, #360]	; (144dc <ProcessAesDrv+0x30c>)
   14374:	4b5a      	ldrne	r3, [pc, #360]	; (144e0 <ProcessAesDrv+0x310>)
   14376:	495b      	ldreq	r1, [pc, #364]	; (144e4 <ProcessAesDrv+0x314>)
   14378:	495b      	ldrne	r1, [pc, #364]	; (144e8 <ProcessAesDrv+0x318>)
   1437a:	600a      	str	r2, [r1, #0]
   1437c:	601f      	str	r7, [r3, #0]
   1437e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14380:	f023 0304 	bic.w	r3, r3, #4
   14384:	2b03      	cmp	r3, #3
   14386:	d075      	beq.n	14474 <ProcessAesDrv+0x2a4>
   14388:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1438a:	2b01      	cmp	r3, #1
   1438c:	bf0c      	ite	eq
   1438e:	2080      	moveq	r0, #128	; 0x80
   14390:	2020      	movne	r0, #32
   14392:	f7fe fd3b 	bl	12e0c <CC_HalWaitInterrupt>
   14396:	4681      	mov	r9, r0
   14398:	2800      	cmp	r0, #0
   1439a:	f47f af52 	bne.w	14242 <ProcessAesDrv+0x72>
   1439e:	4b47      	ldr	r3, [pc, #284]	; (144bc <ProcessAesDrv+0x2ec>)
   143a0:	681a      	ldr	r2, [r3, #0]
   143a2:	2a00      	cmp	r2, #0
   143a4:	d1fc      	bne.n	143a0 <ProcessAesDrv+0x1d0>
   143a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   143a8:	4691      	mov	r9, r2
   143aa:	3b01      	subs	r3, #1
   143ac:	2b06      	cmp	r3, #6
   143ae:	d811      	bhi.n	143d4 <ProcessAesDrv+0x204>
   143b0:	e8df f003 	tbb	[pc, r3]
   143b4:	1004bc04 	.word	0x1004bc04
   143b8:	bc10      	.short	0xbc10
   143ba:	04          	.byte	0x04
   143bb:	00          	.byte	0x00
   143bc:	4a41      	ldr	r2, [pc, #260]	; (144c4 <ProcessAesDrv+0x2f4>)
   143be:	4b42      	ldr	r3, [pc, #264]	; (144c8 <ProcessAesDrv+0x2f8>)
   143c0:	6811      	ldr	r1, [r2, #0]
   143c2:	3208      	adds	r2, #8
   143c4:	6021      	str	r1, [r4, #0]
   143c6:	6819      	ldr	r1, [r3, #0]
   143c8:	3308      	adds	r3, #8
   143ca:	6061      	str	r1, [r4, #4]
   143cc:	6812      	ldr	r2, [r2, #0]
   143ce:	60a2      	str	r2, [r4, #8]
   143d0:	681b      	ldr	r3, [r3, #0]
   143d2:	60e3      	str	r3, [r4, #12]
   143d4:	2301      	movs	r3, #1
   143d6:	65a3      	str	r3, [r4, #88]	; 0x58
   143d8:	e733      	b.n	14242 <ProcessAesDrv+0x72>
   143da:	4844      	ldr	r0, [pc, #272]	; (144ec <ProcessAesDrv+0x31c>)
   143dc:	f7fd fe5e 	bl	1209c <CC_PalAbort>
   143e0:	2000      	movs	r0, #0
   143e2:	f7fe fdd5 	bl	12f90 <CC_PalPowerSaveModeSelect>
   143e6:	2800      	cmp	r0, #0
   143e8:	f43f af1d 	beq.w	14226 <ProcessAesDrv+0x56>
   143ec:	4840      	ldr	r0, [pc, #256]	; (144f0 <ProcessAesDrv+0x320>)
   143ee:	f7fd fe55 	bl	1209c <CC_PalAbort>
   143f2:	e718      	b.n	14226 <ProcessAesDrv+0x56>
   143f4:	483f      	ldr	r0, [pc, #252]	; (144f4 <ProcessAesDrv+0x324>)
   143f6:	f7fd fe51 	bl	1209c <CC_PalAbort>
   143fa:	4648      	mov	r0, r9
   143fc:	b007      	add	sp, #28
   143fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14402:	483d      	ldr	r0, [pc, #244]	; (144f8 <ProcessAesDrv+0x328>)
   14404:	f7fd fe4a 	bl	1209c <CC_PalAbort>
   14408:	e73c      	b.n	14284 <ProcessAesDrv+0xb4>
   1440a:	2304      	movs	r3, #4
   1440c:	2120      	movs	r1, #32
   1440e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   14412:	f104 0010 	add.w	r0, r4, #16
   14416:	f7ff fb49 	bl	13aac <CC_PalMemSetZeroPlat>
   1441a:	e71a      	b.n	14252 <ProcessAesDrv+0x82>
   1441c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1441e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14420:	f000 f9d2 	bl	147c8 <kmu_validate_slot_and_size>
   14424:	b9e8      	cbnz	r0, 14462 <ProcessAesDrv+0x292>
   14426:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 14518 <ProcessAesDrv+0x348>
   1442a:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 1451c <ProcessAesDrv+0x34c>
   1442e:	f8d8 3000 	ldr.w	r3, [r8]
   14432:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 14520 <ProcessAesDrv+0x350>
   14436:	681b      	ldr	r3, [r3, #0]
   14438:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 14524 <ProcessAesDrv+0x354>
   1443c:	f8cb 3000 	str.w	r3, [fp]
   14440:	f8d8 3000 	ldr.w	r3, [r8]
   14444:	4a2d      	ldr	r2, [pc, #180]	; (144fc <ProcessAesDrv+0x32c>)
   14446:	685b      	ldr	r3, [r3, #4]
   14448:	f8ca 3000 	str.w	r3, [sl]
   1444c:	f8d8 3000 	ldr.w	r3, [r8]
   14450:	689b      	ldr	r3, [r3, #8]
   14452:	f8c9 3000 	str.w	r3, [r9]
   14456:	f8d8 3000 	ldr.w	r3, [r8]
   1445a:	68db      	ldr	r3, [r3, #12]
   1445c:	6013      	str	r3, [r2, #0]
   1445e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14460:	b171      	cbz	r1, 14480 <ProcessAesDrv+0x2b0>
   14462:	f04f 0801 	mov.w	r8, #1
   14466:	e6d0      	b.n	1420a <ProcessAesDrv+0x3a>
   14468:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 14528 <ProcessAesDrv+0x358>
   1446c:	e6e9      	b.n	14242 <ProcessAesDrv+0x72>
   1446e:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   14472:	e70d      	b.n	14290 <ProcessAesDrv+0xc0>
   14474:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14476:	2b01      	cmp	r3, #1
   14478:	bf0c      	ite	eq
   1447a:	2040      	moveq	r0, #64	; 0x40
   1447c:	2010      	movne	r0, #16
   1447e:	e788      	b.n	14392 <ProcessAesDrv+0x1c2>
   14480:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   14484:	9300      	str	r3, [sp, #0]
   14486:	2310      	movs	r3, #16
   14488:	f104 0010 	add.w	r0, r4, #16
   1448c:	e9cd 2001 	strd	r2, r0, [sp, #4]
   14490:	9303      	str	r3, [sp, #12]
   14492:	9005      	str	r0, [sp, #20]
   14494:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   14498:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1449a:	f000 fa93 	bl	149c4 <kmu_derive_cmac>
   1449e:	2800      	cmp	r0, #0
   144a0:	d14a      	bne.n	14538 <ProcessAesDrv+0x368>
   144a2:	2300      	movs	r3, #0
   144a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   144a8:	e7db      	b.n	14462 <ProcessAesDrv+0x292>
   144aa:	6821      	ldr	r1, [r4, #0]
   144ac:	4a14      	ldr	r2, [pc, #80]	; (14500 <ProcessAesDrv+0x330>)
   144ae:	4b15      	ldr	r3, [pc, #84]	; (14504 <ProcessAesDrv+0x334>)
   144b0:	e745      	b.n	1433e <ProcessAesDrv+0x16e>
   144b2:	bf00      	nop
   144b4:	200000e4 	.word	0x200000e4
   144b8:	50841810 	.word	0x50841810
   144bc:	50841910 	.word	0x50841910
   144c0:	50841a04 	.word	0x50841a04
   144c4:	50841440 	.word	0x50841440
   144c8:	50841444 	.word	0x50841444
   144cc:	50841d28 	.word	0x50841d28
   144d0:	50841d2c 	.word	0x50841d2c
   144d4:	50841d30 	.word	0x50841d30
   144d8:	50841d34 	.word	0x50841d34
   144dc:	50841c2c 	.word	0x50841c2c
   144e0:	50841c34 	.word	0x50841c34
   144e4:	50841c28 	.word	0x50841c28
   144e8:	50841c30 	.word	0x50841c30
   144ec:	000159ec 	.word	0x000159ec
   144f0:	00015a04 	.word	0x00015a04
   144f4:	00015a44 	.word	0x00015a44
   144f8:	00015a24 	.word	0x00015a24
   144fc:	5084140c 	.word	0x5084140c
   14500:	50841460 	.word	0x50841460
   14504:	50841464 	.word	0x50841464
   14508:	00f10001 	.word	0x00f10001
   1450c:	00f10005 	.word	0x00f10005
   14510:	00f1000b 	.word	0x00f1000b
   14514:	00f10003 	.word	0x00f10003
   14518:	200000d4 	.word	0x200000d4
   1451c:	50841400 	.word	0x50841400
   14520:	50841404 	.word	0x50841404
   14524:	50841408 	.word	0x50841408
   14528:	00f10002 	.word	0x00f10002
   1452c:	4a0f      	ldr	r2, [pc, #60]	; (1456c <ProcessAesDrv+0x39c>)
   1452e:	4b10      	ldr	r3, [pc, #64]	; (14570 <ProcessAesDrv+0x3a0>)
   14530:	e746      	b.n	143c0 <ProcessAesDrv+0x1f0>
   14532:	f8df 9044 	ldr.w	r9, [pc, #68]	; 14578 <ProcessAesDrv+0x3a8>
   14536:	e684      	b.n	14242 <ProcessAesDrv+0x72>
   14538:	f8d8 3000 	ldr.w	r3, [r8]
   1453c:	9805      	ldr	r0, [sp, #20]
   1453e:	681b      	ldr	r3, [r3, #0]
   14540:	4a0c      	ldr	r2, [pc, #48]	; (14574 <ProcessAesDrv+0x3a4>)
   14542:	f8cb 3000 	str.w	r3, [fp]
   14546:	f8d8 3000 	ldr.w	r3, [r8]
   1454a:	2110      	movs	r1, #16
   1454c:	685b      	ldr	r3, [r3, #4]
   1454e:	f8ca 3000 	str.w	r3, [sl]
   14552:	f8d8 3000 	ldr.w	r3, [r8]
   14556:	689b      	ldr	r3, [r3, #8]
   14558:	f8c9 3000 	str.w	r3, [r9]
   1455c:	f8d8 3000 	ldr.w	r3, [r8]
   14560:	68db      	ldr	r3, [r3, #12]
   14562:	6013      	str	r3, [r2, #0]
   14564:	f7ff faa2 	bl	13aac <CC_PalMemSetZeroPlat>
   14568:	e79b      	b.n	144a2 <ProcessAesDrv+0x2d2>
   1456a:	bf00      	nop
   1456c:	50841460 	.word	0x50841460
   14570:	50841464 	.word	0x50841464
   14574:	5084140c 	.word	0x5084140c
   14578:	00f10004 	.word	0x00f10004

0001457c <FinishAesDrv>:
   1457c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14580:	b301      	cbz	r1, 145c4 <FinishAesDrv+0x48>
   14582:	b1fa      	cbz	r2, 145c4 <FinishAesDrv+0x48>
   14584:	4604      	mov	r4, r0
   14586:	2800      	cmp	r0, #0
   14588:	d07a      	beq.n	14680 <FinishAesDrv+0x104>
   1458a:	461d      	mov	r5, r3
   1458c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1458e:	460e      	mov	r6, r1
   14590:	2b07      	cmp	r3, #7
   14592:	d01b      	beq.n	145cc <FinishAesDrv+0x50>
   14594:	b95d      	cbnz	r5, 145ae <FinishAesDrv+0x32>
   14596:	2b03      	cmp	r3, #3
   14598:	d110      	bne.n	145bc <FinishAesDrv+0x40>
   1459a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1459c:	b973      	cbnz	r3, 145bc <FinishAesDrv+0x40>
   1459e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   145a2:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   145a6:	2510      	movs	r5, #16
   145a8:	f100 0364 	add.w	r3, r0, #100	; 0x64
   145ac:	600b      	str	r3, [r1, #0]
   145ae:	462b      	mov	r3, r5
   145b0:	4631      	mov	r1, r6
   145b2:	4620      	mov	r0, r4
   145b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   145b8:	f7ff be0a 	b.w	141d0 <ProcessAesDrv>
   145bc:	462f      	mov	r7, r5
   145be:	4638      	mov	r0, r7
   145c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145c4:	4f68      	ldr	r7, [pc, #416]	; (14768 <FinishAesDrv+0x1ec>)
   145c6:	4638      	mov	r0, r7
   145c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145cc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   145ce:	2b00      	cmp	r3, #0
   145d0:	d159      	bne.n	14686 <FinishAesDrv+0x10a>
   145d2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   145d6:	d25b      	bcs.n	14690 <FinishAesDrv+0x114>
   145d8:	b915      	cbnz	r5, 145e0 <FinishAesDrv+0x64>
   145da:	6da3      	ldr	r3, [r4, #88]	; 0x58
   145dc:	2b00      	cmp	r3, #0
   145de:	d157      	bne.n	14690 <FinishAesDrv+0x114>
   145e0:	f04f 31ff 	mov.w	r1, #4294967295
   145e4:	4861      	ldr	r0, [pc, #388]	; (1476c <FinishAesDrv+0x1f0>)
   145e6:	f7fe fca3 	bl	12f30 <CC_PalMutexLock>
   145ea:	2800      	cmp	r0, #0
   145ec:	f040 809a 	bne.w	14724 <FinishAesDrv+0x1a8>
   145f0:	2000      	movs	r0, #0
   145f2:	f7fe fccd 	bl	12f90 <CC_PalPowerSaveModeSelect>
   145f6:	2800      	cmp	r0, #0
   145f8:	f040 8090 	bne.w	1471c <FinishAesDrv+0x1a0>
   145fc:	2101      	movs	r1, #1
   145fe:	4b5c      	ldr	r3, [pc, #368]	; (14770 <FinishAesDrv+0x1f4>)
   14600:	4a5c      	ldr	r2, [pc, #368]	; (14774 <FinishAesDrv+0x1f8>)
   14602:	6019      	str	r1, [r3, #0]
   14604:	6813      	ldr	r3, [r2, #0]
   14606:	2b00      	cmp	r3, #0
   14608:	d1fc      	bne.n	14604 <FinishAesDrv+0x88>
   1460a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1460c:	2b03      	cmp	r3, #3
   1460e:	dd20      	ble.n	14652 <FinishAesDrv+0xd6>
   14610:	3b06      	subs	r3, #6
   14612:	2b01      	cmp	r3, #1
   14614:	d81f      	bhi.n	14656 <FinishAesDrv+0xda>
   14616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14618:	2b01      	cmp	r3, #1
   1461a:	d83b      	bhi.n	14694 <FinishAesDrv+0x118>
   1461c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1461e:	2b01      	cmp	r3, #1
   14620:	f200 8088 	bhi.w	14734 <FinishAesDrv+0x1b8>
   14624:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14626:	2b01      	cmp	r3, #1
   14628:	f200 8086 	bhi.w	14738 <FinishAesDrv+0x1bc>
   1462c:	4620      	mov	r0, r4
   1462e:	f7ff fd53 	bl	140d8 <InitAes.part.0>
   14632:	4607      	mov	r7, r0
   14634:	b980      	cbnz	r0, 14658 <FinishAesDrv+0xdc>
   14636:	4620      	mov	r0, r4
   14638:	f7ff fcdc 	bl	13ff4 <LoadAesKey>
   1463c:	4607      	mov	r7, r0
   1463e:	b958      	cbnz	r0, 14658 <FinishAesDrv+0xdc>
   14640:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14642:	2b07      	cmp	r3, #7
   14644:	d807      	bhi.n	14656 <FinishAesDrv+0xda>
   14646:	e8df f003 	tbb	[pc, r3]
   1464a:	2731      	.short	0x2731
   1464c:	06062755 	.word	0x06062755
   14650:	2755      	.short	0x2755
   14652:	2b00      	cmp	r3, #0
   14654:	dadf      	bge.n	14616 <FinishAesDrv+0x9a>
   14656:	4f48      	ldr	r7, [pc, #288]	; (14778 <FinishAesDrv+0x1fc>)
   14658:	4a46      	ldr	r2, [pc, #280]	; (14774 <FinishAesDrv+0x1f8>)
   1465a:	6813      	ldr	r3, [r2, #0]
   1465c:	2b00      	cmp	r3, #0
   1465e:	d1fc      	bne.n	1465a <FinishAesDrv+0xde>
   14660:	4a43      	ldr	r2, [pc, #268]	; (14770 <FinishAesDrv+0x1f4>)
   14662:	2001      	movs	r0, #1
   14664:	6013      	str	r3, [r2, #0]
   14666:	f7fe fc93 	bl	12f90 <CC_PalPowerSaveModeSelect>
   1466a:	2800      	cmp	r0, #0
   1466c:	d15e      	bne.n	1472c <FinishAesDrv+0x1b0>
   1466e:	483f      	ldr	r0, [pc, #252]	; (1476c <FinishAesDrv+0x1f0>)
   14670:	f7fe fc66 	bl	12f40 <CC_PalMutexUnlock>
   14674:	2800      	cmp	r0, #0
   14676:	d0a2      	beq.n	145be <FinishAesDrv+0x42>
   14678:	4840      	ldr	r0, [pc, #256]	; (1477c <FinishAesDrv+0x200>)
   1467a:	f7fd fd0f 	bl	1209c <CC_PalAbort>
   1467e:	e79e      	b.n	145be <FinishAesDrv+0x42>
   14680:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   14684:	e79b      	b.n	145be <FinishAesDrv+0x42>
   14686:	2b01      	cmp	r3, #1
   14688:	d1a6      	bne.n	145d8 <FinishAesDrv+0x5c>
   1468a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1468e:	d3a3      	bcc.n	145d8 <FinishAesDrv+0x5c>
   14690:	4f3b      	ldr	r7, [pc, #236]	; (14780 <FinishAesDrv+0x204>)
   14692:	e794      	b.n	145be <FinishAesDrv+0x42>
   14694:	4f3b      	ldr	r7, [pc, #236]	; (14784 <FinishAesDrv+0x208>)
   14696:	e7df      	b.n	14658 <FinishAesDrv+0xdc>
   14698:	6821      	ldr	r1, [r4, #0]
   1469a:	4a3b      	ldr	r2, [pc, #236]	; (14788 <FinishAesDrv+0x20c>)
   1469c:	4b3b      	ldr	r3, [pc, #236]	; (1478c <FinishAesDrv+0x210>)
   1469e:	6011      	str	r1, [r2, #0]
   146a0:	6861      	ldr	r1, [r4, #4]
   146a2:	6019      	str	r1, [r3, #0]
   146a4:	68a1      	ldr	r1, [r4, #8]
   146a6:	6091      	str	r1, [r2, #8]
   146a8:	68e2      	ldr	r2, [r4, #12]
   146aa:	609a      	str	r2, [r3, #8]
   146ac:	2301      	movs	r3, #1
   146ae:	4938      	ldr	r1, [pc, #224]	; (14790 <FinishAesDrv+0x214>)
   146b0:	4a38      	ldr	r2, [pc, #224]	; (14794 <FinishAesDrv+0x218>)
   146b2:	600b      	str	r3, [r1, #0]
   146b4:	6015      	str	r5, [r2, #0]
   146b6:	2d00      	cmp	r5, #0
   146b8:	d140      	bne.n	1473c <FinishAesDrv+0x1c0>
   146ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
   146bc:	b90a      	cbnz	r2, 146c2 <FinishAesDrv+0x146>
   146be:	4a36      	ldr	r2, [pc, #216]	; (14798 <FinishAesDrv+0x21c>)
   146c0:	6013      	str	r3, [r2, #0]
   146c2:	4b2c      	ldr	r3, [pc, #176]	; (14774 <FinishAesDrv+0x1f8>)
   146c4:	681f      	ldr	r7, [r3, #0]
   146c6:	2f00      	cmp	r7, #0
   146c8:	d1fc      	bne.n	146c4 <FinishAesDrv+0x148>
   146ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   146cc:	3b01      	subs	r3, #1
   146ce:	2b06      	cmp	r3, #6
   146d0:	d8c2      	bhi.n	14658 <FinishAesDrv+0xdc>
   146d2:	a201      	add	r2, pc, #4	; (adr r2, 146d8 <FinishAesDrv+0x15c>)
   146d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   146d8:	000146fd 	.word	0x000146fd
   146dc:	00014717 	.word	0x00014717
   146e0:	000146fd 	.word	0x000146fd
   146e4:	00014659 	.word	0x00014659
   146e8:	00014659 	.word	0x00014659
   146ec:	00014717 	.word	0x00014717
   146f0:	000146fd 	.word	0x000146fd
   146f4:	6821      	ldr	r1, [r4, #0]
   146f6:	4a29      	ldr	r2, [pc, #164]	; (1479c <FinishAesDrv+0x220>)
   146f8:	4b29      	ldr	r3, [pc, #164]	; (147a0 <FinishAesDrv+0x224>)
   146fa:	e7d0      	b.n	1469e <FinishAesDrv+0x122>
   146fc:	4a22      	ldr	r2, [pc, #136]	; (14788 <FinishAesDrv+0x20c>)
   146fe:	4b23      	ldr	r3, [pc, #140]	; (1478c <FinishAesDrv+0x210>)
   14700:	6811      	ldr	r1, [r2, #0]
   14702:	3208      	adds	r2, #8
   14704:	6021      	str	r1, [r4, #0]
   14706:	6819      	ldr	r1, [r3, #0]
   14708:	3308      	adds	r3, #8
   1470a:	6061      	str	r1, [r4, #4]
   1470c:	6812      	ldr	r2, [r2, #0]
   1470e:	60a2      	str	r2, [r4, #8]
   14710:	681b      	ldr	r3, [r3, #0]
   14712:	60e3      	str	r3, [r4, #12]
   14714:	e7a0      	b.n	14658 <FinishAesDrv+0xdc>
   14716:	4a21      	ldr	r2, [pc, #132]	; (1479c <FinishAesDrv+0x220>)
   14718:	4b21      	ldr	r3, [pc, #132]	; (147a0 <FinishAesDrv+0x224>)
   1471a:	e7f1      	b.n	14700 <FinishAesDrv+0x184>
   1471c:	4821      	ldr	r0, [pc, #132]	; (147a4 <FinishAesDrv+0x228>)
   1471e:	f7fd fcbd 	bl	1209c <CC_PalAbort>
   14722:	e76b      	b.n	145fc <FinishAesDrv+0x80>
   14724:	4820      	ldr	r0, [pc, #128]	; (147a8 <FinishAesDrv+0x22c>)
   14726:	f7fd fcb9 	bl	1209c <CC_PalAbort>
   1472a:	e761      	b.n	145f0 <FinishAesDrv+0x74>
   1472c:	481f      	ldr	r0, [pc, #124]	; (147ac <FinishAesDrv+0x230>)
   1472e:	f7fd fcb5 	bl	1209c <CC_PalAbort>
   14732:	e79c      	b.n	1466e <FinishAesDrv+0xf2>
   14734:	4f1e      	ldr	r7, [pc, #120]	; (147b0 <FinishAesDrv+0x234>)
   14736:	e78f      	b.n	14658 <FinishAesDrv+0xdc>
   14738:	4f1e      	ldr	r7, [pc, #120]	; (147b4 <FinishAesDrv+0x238>)
   1473a:	e78d      	b.n	14658 <FinishAesDrv+0xdc>
   1473c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1473e:	6833      	ldr	r3, [r6, #0]
   14740:	2a01      	cmp	r2, #1
   14742:	d00a      	beq.n	1475a <FinishAesDrv+0x1de>
   14744:	2010      	movs	r0, #16
   14746:	491c      	ldr	r1, [pc, #112]	; (147b8 <FinishAesDrv+0x23c>)
   14748:	4a1c      	ldr	r2, [pc, #112]	; (147bc <FinishAesDrv+0x240>)
   1474a:	600b      	str	r3, [r1, #0]
   1474c:	6015      	str	r5, [r2, #0]
   1474e:	f7fe fb5d 	bl	12e0c <CC_HalWaitInterrupt>
   14752:	4607      	mov	r7, r0
   14754:	2800      	cmp	r0, #0
   14756:	d0b4      	beq.n	146c2 <FinishAesDrv+0x146>
   14758:	e77e      	b.n	14658 <FinishAesDrv+0xdc>
   1475a:	4919      	ldr	r1, [pc, #100]	; (147c0 <FinishAesDrv+0x244>)
   1475c:	4a19      	ldr	r2, [pc, #100]	; (147c4 <FinishAesDrv+0x248>)
   1475e:	600b      	str	r3, [r1, #0]
   14760:	2040      	movs	r0, #64	; 0x40
   14762:	6015      	str	r5, [r2, #0]
   14764:	e7f3      	b.n	1474e <FinishAesDrv+0x1d2>
   14766:	bf00      	nop
   14768:	00f1000b 	.word	0x00f1000b
   1476c:	200000e4 	.word	0x200000e4
   14770:	50841810 	.word	0x50841810
   14774:	50841910 	.word	0x50841910
   14778:	00f10001 	.word	0x00f10001
   1477c:	00015a44 	.word	0x00015a44
   14780:	00f10005 	.word	0x00f10005
   14784:	00f10002 	.word	0x00f10002
   14788:	50841440 	.word	0x50841440
   1478c:	50841444 	.word	0x50841444
   14790:	5084147c 	.word	0x5084147c
   14794:	508414bc 	.word	0x508414bc
   14798:	50841524 	.word	0x50841524
   1479c:	50841460 	.word	0x50841460
   147a0:	50841464 	.word	0x50841464
   147a4:	00015a04 	.word	0x00015a04
   147a8:	000159ec 	.word	0x000159ec
   147ac:	00015a24 	.word	0x00015a24
   147b0:	00f10003 	.word	0x00f10003
   147b4:	00f10004 	.word	0x00f10004
   147b8:	50841c30 	.word	0x50841c30
   147bc:	50841c34 	.word	0x50841c34
   147c0:	50841c28 	.word	0x50841c28
   147c4:	50841c2c 	.word	0x50841c2c

000147c8 <kmu_validate_slot_and_size>:
   147c8:	287f      	cmp	r0, #127	; 0x7f
   147ca:	d80c      	bhi.n	147e6 <kmu_validate_slot_and_size+0x1e>
   147cc:	b149      	cbz	r1, 147e2 <kmu_validate_slot_and_size+0x1a>
   147ce:	2903      	cmp	r1, #3
   147d0:	d001      	beq.n	147d6 <kmu_validate_slot_and_size+0xe>
   147d2:	4806      	ldr	r0, [pc, #24]	; (147ec <kmu_validate_slot_and_size+0x24>)
   147d4:	4770      	bx	lr
   147d6:	4906      	ldr	r1, [pc, #24]	; (147f0 <kmu_validate_slot_and_size+0x28>)
   147d8:	287f      	cmp	r0, #127	; 0x7f
   147da:	bf0c      	ite	eq
   147dc:	4608      	moveq	r0, r1
   147de:	2000      	movne	r0, #0
   147e0:	4770      	bx	lr
   147e2:	4608      	mov	r0, r1
   147e4:	4770      	bx	lr
   147e6:	4802      	ldr	r0, [pc, #8]	; (147f0 <kmu_validate_slot_and_size+0x28>)
   147e8:	4770      	bx	lr
   147ea:	bf00      	nop
   147ec:	00f70003 	.word	0x00f70003
   147f0:	00f70001 	.word	0x00f70001

000147f4 <kmu_validate_slot_and_size_no_kdr>:
   147f4:	b4f0      	push	{r4, r5, r6, r7}
   147f6:	4a1c      	ldr	r2, [pc, #112]	; (14868 <kmu_validate_slot_and_size_no_kdr+0x74>)
   147f8:	00c5      	lsls	r5, r0, #3
   147fa:	1c44      	adds	r4, r0, #1
   147fc:	f505 037f 	add.w	r3, r5, #16711680	; 0xff0000
   14800:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   14804:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   14808:	681c      	ldr	r4, [r3, #0]
   1480a:	b082      	sub	sp, #8
   1480c:	f3bf 8f4f 	dsb	sy
   14810:	2300      	movs	r3, #0
   14812:	9400      	str	r4, [sp, #0]
   14814:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14818:	9e00      	ldr	r6, [sp, #0]
   1481a:	4c14      	ldr	r4, [pc, #80]	; (1486c <kmu_validate_slot_and_size_no_kdr+0x78>)
   1481c:	42a6      	cmp	r6, r4
   1481e:	d018      	beq.n	14852 <kmu_validate_slot_and_size_no_kdr+0x5e>
   14820:	b1a9      	cbz	r1, 1484e <kmu_validate_slot_and_size_no_kdr+0x5a>
   14822:	4e13      	ldr	r6, [pc, #76]	; (14870 <kmu_validate_slot_and_size_no_kdr+0x7c>)
   14824:	1c87      	adds	r7, r0, #2
   14826:	442e      	add	r6, r5
   14828:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
   1482c:	6835      	ldr	r5, [r6, #0]
   1482e:	f3bf 8f4f 	dsb	sy
   14832:	9501      	str	r5, [sp, #4]
   14834:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14838:	9a01      	ldr	r2, [sp, #4]
   1483a:	42a2      	cmp	r2, r4
   1483c:	d009      	beq.n	14852 <kmu_validate_slot_and_size_no_kdr+0x5e>
   1483e:	287f      	cmp	r0, #127	; 0x7f
   14840:	d807      	bhi.n	14852 <kmu_validate_slot_and_size_no_kdr+0x5e>
   14842:	2903      	cmp	r1, #3
   14844:	d10b      	bne.n	1485e <kmu_validate_slot_and_size_no_kdr+0x6a>
   14846:	287f      	cmp	r0, #127	; 0x7f
   14848:	d003      	beq.n	14852 <kmu_validate_slot_and_size_no_kdr+0x5e>
   1484a:	4618      	mov	r0, r3
   1484c:	e002      	b.n	14854 <kmu_validate_slot_and_size_no_kdr+0x60>
   1484e:	287f      	cmp	r0, #127	; 0x7f
   14850:	d903      	bls.n	1485a <kmu_validate_slot_and_size_no_kdr+0x66>
   14852:	4808      	ldr	r0, [pc, #32]	; (14874 <kmu_validate_slot_and_size_no_kdr+0x80>)
   14854:	b002      	add	sp, #8
   14856:	bcf0      	pop	{r4, r5, r6, r7}
   14858:	4770      	bx	lr
   1485a:	4608      	mov	r0, r1
   1485c:	e7fa      	b.n	14854 <kmu_validate_slot_and_size_no_kdr+0x60>
   1485e:	4806      	ldr	r0, [pc, #24]	; (14878 <kmu_validate_slot_and_size_no_kdr+0x84>)
   14860:	b002      	add	sp, #8
   14862:	bcf0      	pop	{r4, r5, r6, r7}
   14864:	4770      	bx	lr
   14866:	bf00      	nop
   14868:	50039000 	.word	0x50039000
   1486c:	50841a50 	.word	0x50841a50
   14870:	00ff8408 	.word	0x00ff8408
   14874:	00f70001 	.word	0x00f70001
   14878:	00f70003 	.word	0x00f70003

0001487c <kmu_validate_kdr_slot_and_size>:
   1487c:	b9b9      	cbnz	r1, 148ae <kmu_validate_kdr_slot_and_size+0x32>
   1487e:	4a0d      	ldr	r2, [pc, #52]	; (148b4 <kmu_validate_kdr_slot_and_size+0x38>)
   14880:	00c3      	lsls	r3, r0, #3
   14882:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   14886:	3001      	adds	r0, #1
   14888:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   1488c:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   14890:	b082      	sub	sp, #8
   14892:	681b      	ldr	r3, [r3, #0]
   14894:	f3bf 8f4f 	dsb	sy
   14898:	9301      	str	r3, [sp, #4]
   1489a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   1489e:	9a01      	ldr	r2, [sp, #4]
   148a0:	4b05      	ldr	r3, [pc, #20]	; (148b8 <kmu_validate_kdr_slot_and_size+0x3c>)
   148a2:	4806      	ldr	r0, [pc, #24]	; (148bc <kmu_validate_kdr_slot_and_size+0x40>)
   148a4:	429a      	cmp	r2, r3
   148a6:	bf08      	it	eq
   148a8:	2000      	moveq	r0, #0
   148aa:	b002      	add	sp, #8
   148ac:	4770      	bx	lr
   148ae:	4804      	ldr	r0, [pc, #16]	; (148c0 <kmu_validate_kdr_slot_and_size+0x44>)
   148b0:	4770      	bx	lr
   148b2:	bf00      	nop
   148b4:	50039000 	.word	0x50039000
   148b8:	50841a50 	.word	0x50841a50
   148bc:	00f70001 	.word	0x00f70001
   148c0:	00f70003 	.word	0x00f70003

000148c4 <kmu_use_kdr_key>:
   148c4:	2000      	movs	r0, #0
   148c6:	2201      	movs	r2, #1
   148c8:	4902      	ldr	r1, [pc, #8]	; (148d4 <kmu_use_kdr_key+0x10>)
   148ca:	4b03      	ldr	r3, [pc, #12]	; (148d8 <kmu_use_kdr_key+0x14>)
   148cc:	6008      	str	r0, [r1, #0]
   148ce:	601a      	str	r2, [r3, #0]
   148d0:	4770      	bx	lr
   148d2:	bf00      	nop
   148d4:	50841a38 	.word	0x50841a38
   148d8:	50841478 	.word	0x50841478

000148dc <kmu_load_key_aes>:
   148dc:	b109      	cbz	r1, 148e2 <kmu_load_key_aes+0x6>
   148de:	4832      	ldr	r0, [pc, #200]	; (149a8 <kmu_load_key_aes+0xcc>)
   148e0:	4770      	bx	lr
   148e2:	b430      	push	{r4, r5}
   148e4:	2401      	movs	r4, #1
   148e6:	4b31      	ldr	r3, [pc, #196]	; (149ac <kmu_load_key_aes+0xd0>)
   148e8:	4a31      	ldr	r2, [pc, #196]	; (149b0 <kmu_load_key_aes+0xd4>)
   148ea:	b084      	sub	sp, #16
   148ec:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   148f0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   148f4:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   148f8:	00c2      	lsls	r2, r0, #3
   148fa:	9502      	str	r5, [sp, #8]
   148fc:	9d02      	ldr	r5, [sp, #8]
   148fe:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   14902:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   14906:	4420      	add	r0, r4
   14908:	9502      	str	r5, [sp, #8]
   1490a:	9d02      	ldr	r5, [sp, #8]
   1490c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   14910:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   14914:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   14918:	9102      	str	r1, [sp, #8]
   1491a:	9902      	ldr	r1, [sp, #8]
   1491c:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
   14920:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   14924:	6812      	ldr	r2, [r2, #0]
   14926:	f3bf 8f4f 	dsb	sy
   1492a:	9203      	str	r2, [sp, #12]
   1492c:	9903      	ldr	r1, [sp, #12]
   1492e:	4a21      	ldr	r2, [pc, #132]	; (149b4 <kmu_load_key_aes+0xd8>)
   14930:	4291      	cmp	r1, r2
   14932:	d132      	bne.n	1499a <kmu_load_key_aes+0xbe>
   14934:	461a      	mov	r2, r3
   14936:	601c      	str	r4, [r3, #0]
   14938:	e005      	b.n	14946 <kmu_load_key_aes+0x6a>
   1493a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1493e:	b9db      	cbnz	r3, 14978 <kmu_load_key_aes+0x9c>
   14940:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14944:	b9c3      	cbnz	r3, 14978 <kmu_load_key_aes+0x9c>
   14946:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   1494a:	3b00      	subs	r3, #0
   1494c:	bf18      	it	ne
   1494e:	2301      	movne	r3, #1
   14950:	f88d 3005 	strb.w	r3, [sp, #5]
   14954:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   14958:	3b00      	subs	r3, #0
   1495a:	bf18      	it	ne
   1495c:	2301      	movne	r3, #1
   1495e:	f88d 3006 	strb.w	r3, [sp, #6]
   14962:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   14966:	3b00      	subs	r3, #0
   14968:	bf18      	it	ne
   1496a:	2301      	movne	r3, #1
   1496c:	f88d 3007 	strb.w	r3, [sp, #7]
   14970:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14974:	2b00      	cmp	r3, #0
   14976:	d0e0      	beq.n	1493a <kmu_load_key_aes+0x5e>
   14978:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1497c:	b98b      	cbnz	r3, 149a2 <kmu_load_key_aes+0xc6>
   1497e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14982:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   14986:	b933      	cbnz	r3, 14996 <kmu_load_key_aes+0xba>
   14988:	4610      	mov	r0, r2
   1498a:	4b08      	ldr	r3, [pc, #32]	; (149ac <kmu_load_key_aes+0xd0>)
   1498c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   14990:	b004      	add	sp, #16
   14992:	bc30      	pop	{r4, r5}
   14994:	4770      	bx	lr
   14996:	4808      	ldr	r0, [pc, #32]	; (149b8 <kmu_load_key_aes+0xdc>)
   14998:	e7fa      	b.n	14990 <kmu_load_key_aes+0xb4>
   1499a:	4808      	ldr	r0, [pc, #32]	; (149bc <kmu_load_key_aes+0xe0>)
   1499c:	b004      	add	sp, #16
   1499e:	bc30      	pop	{r4, r5}
   149a0:	4770      	bx	lr
   149a2:	4807      	ldr	r0, [pc, #28]	; (149c0 <kmu_load_key_aes+0xe4>)
   149a4:	e7f4      	b.n	14990 <kmu_load_key_aes+0xb4>
   149a6:	bf00      	nop
   149a8:	00f1000c 	.word	0x00f1000c
   149ac:	50039000 	.word	0x50039000
   149b0:	50840000 	.word	0x50840000
   149b4:	50841400 	.word	0x50841400
   149b8:	00f70002 	.word	0x00f70002
   149bc:	00f70006 	.word	0x00f70006
   149c0:	00f70001 	.word	0x00f70001

000149c4 <kmu_derive_cmac>:
   149c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   149c8:	2400      	movs	r4, #0
   149ca:	b0ce      	sub	sp, #312	; 0x138
   149cc:	4605      	mov	r5, r0
   149ce:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
   149d2:	468a      	mov	sl, r1
   149d4:	4617      	mov	r7, r2
   149d6:	4621      	mov	r1, r4
   149d8:	2274      	movs	r2, #116	; 0x74
   149da:	a810      	add	r0, sp, #64	; 0x40
   149dc:	4698      	mov	r8, r3
   149de:	f000 fa81 	bl	14ee4 <memset>
   149e2:	4621      	mov	r1, r4
   149e4:	2280      	movs	r2, #128	; 0x80
   149e6:	a82e      	add	r0, sp, #184	; 0xb8
   149e8:	942d      	str	r4, [sp, #180]	; 0xb4
   149ea:	f000 fa7b 	bl	14ee4 <memset>
   149ee:	2384      	movs	r3, #132	; 0x84
   149f0:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
   149f4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   149f8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
   149fc:	9306      	str	r3, [sp, #24]
   149fe:	d873      	bhi.n	14ae8 <kmu_derive_cmac+0x124>
   14a00:	ab06      	add	r3, sp, #24
   14a02:	ac2d      	add	r4, sp, #180	; 0xb4
   14a04:	9301      	str	r3, [sp, #4]
   14a06:	4641      	mov	r1, r8
   14a08:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   14a0c:	4638      	mov	r0, r7
   14a0e:	9602      	str	r6, [sp, #8]
   14a10:	9400      	str	r4, [sp, #0]
   14a12:	f000 f87d 	bl	14b10 <UtilCmacBuildDataForDerivation>
   14a16:	2800      	cmp	r0, #0
   14a18:	d16d      	bne.n	14af6 <kmu_derive_cmac+0x132>
   14a1a:	2200      	movs	r2, #0
   14a1c:	2301      	movs	r3, #1
   14a1e:	2101      	movs	r1, #1
   14a20:	2707      	movs	r7, #7
   14a22:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
   14a26:	4a36      	ldr	r2, [pc, #216]	; (14b00 <kmu_derive_cmac+0x13c>)
   14a28:	00eb      	lsls	r3, r5, #3
   14a2a:	9520      	str	r5, [sp, #128]	; 0x80
   14a2c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   14a30:	440d      	add	r5, r1
   14a32:	e9cd a71c 	strd	sl, r7, [sp, #112]	; 0x70
   14a36:	901e      	str	r0, [sp, #120]	; 0x78
   14a38:	9128      	str	r1, [sp, #160]	; 0xa0
   14a3a:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
   14a3e:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
   14a42:	681b      	ldr	r3, [r3, #0]
   14a44:	f3bf 8f4f 	dsb	sy
   14a48:	9307      	str	r3, [sp, #28]
   14a4a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   14a4e:	9a07      	ldr	r2, [sp, #28]
   14a50:	4b2c      	ldr	r3, [pc, #176]	; (14b04 <kmu_derive_cmac+0x140>)
   14a52:	429a      	cmp	r2, r3
   14a54:	d142      	bne.n	14adc <kmu_derive_cmac+0x118>
   14a56:	2203      	movs	r2, #3
   14a58:	f10d 0317 	add.w	r3, sp, #23
   14a5c:	701a      	strb	r2, [r3, #0]
   14a5e:	781b      	ldrb	r3, [r3, #0]
   14a60:	2110      	movs	r1, #16
   14a62:	a810      	add	r0, sp, #64	; 0x40
   14a64:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   14a68:	f7ff f820 	bl	13aac <CC_PalMemSetZeroPlat>
   14a6c:	2210      	movs	r2, #16
   14a6e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   14a72:	9200      	str	r2, [sp, #0]
   14a74:	4620      	mov	r0, r4
   14a76:	9906      	ldr	r1, [sp, #24]
   14a78:	ab0c      	add	r3, sp, #48	; 0x30
   14a7a:	aa08      	add	r2, sp, #32
   14a7c:	f8cd 8004 	str.w	r8, [sp, #4]
   14a80:	f7ff f8ec 	bl	13c5c <SetDataBuffersInfo>
   14a84:	4607      	mov	r7, r0
   14a86:	bb00      	cbnz	r0, 14aca <kmu_derive_cmac+0x106>
   14a88:	2401      	movs	r4, #1
   14a8a:	e010      	b.n	14aae <kmu_derive_cmac+0xea>
   14a8c:	2e10      	cmp	r6, #16
   14a8e:	4635      	mov	r5, r6
   14a90:	bf28      	it	cs
   14a92:	2510      	movcs	r5, #16
   14a94:	a910      	add	r1, sp, #64	; 0x40
   14a96:	462a      	mov	r2, r5
   14a98:	f7ff f804 	bl	13aa4 <CC_PalMemCopyPlat>
   14a9c:	2110      	movs	r1, #16
   14a9e:	a810      	add	r0, sp, #64	; 0x40
   14aa0:	f7ff f804 	bl	13aac <CC_PalMemSetZeroPlat>
   14aa4:	3401      	adds	r4, #1
   14aa6:	1b76      	subs	r6, r6, r5
   14aa8:	442f      	add	r7, r5
   14aaa:	b2e4      	uxtb	r4, r4
   14aac:	d021      	beq.n	14af2 <kmu_derive_cmac+0x12e>
   14aae:	9b06      	ldr	r3, [sp, #24]
   14ab0:	4642      	mov	r2, r8
   14ab2:	a908      	add	r1, sp, #32
   14ab4:	a810      	add	r0, sp, #64	; 0x40
   14ab6:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
   14aba:	f7ff fd5f 	bl	1457c <FinishAesDrv>
   14abe:	4603      	mov	r3, r0
   14ac0:	eb09 0007 	add.w	r0, r9, r7
   14ac4:	2b00      	cmp	r3, #0
   14ac6:	d0e1      	beq.n	14a8c <kmu_derive_cmac+0xc8>
   14ac8:	461f      	mov	r7, r3
   14aca:	a810      	add	r0, sp, #64	; 0x40
   14acc:	2274      	movs	r2, #116	; 0x74
   14ace:	2100      	movs	r1, #0
   14ad0:	f7fe ffea 	bl	13aa8 <CC_PalMemSetPlat>
   14ad4:	4638      	mov	r0, r7
   14ad6:	b04e      	add	sp, #312	; 0x138
   14ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14adc:	2202      	movs	r2, #2
   14ade:	f10d 0317 	add.w	r3, sp, #23
   14ae2:	f88d 2017 	strb.w	r2, [sp, #23]
   14ae6:	e7ba      	b.n	14a5e <kmu_derive_cmac+0x9a>
   14ae8:	4f07      	ldr	r7, [pc, #28]	; (14b08 <kmu_derive_cmac+0x144>)
   14aea:	4638      	mov	r0, r7
   14aec:	b04e      	add	sp, #312	; 0x138
   14aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14af2:	4637      	mov	r7, r6
   14af4:	e7e9      	b.n	14aca <kmu_derive_cmac+0x106>
   14af6:	4f05      	ldr	r7, [pc, #20]	; (14b0c <kmu_derive_cmac+0x148>)
   14af8:	4638      	mov	r0, r7
   14afa:	b04e      	add	sp, #312	; 0x138
   14afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b00:	50039000 	.word	0x50039000
   14b04:	50841a50 	.word	0x50841a50
   14b08:	00f1000f 	.word	0x00f1000f
   14b0c:	00f1000e 	.word	0x00f1000e

00014b10 <UtilCmacBuildDataForDerivation>:
   14b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b14:	2600      	movs	r6, #0
   14b16:	b082      	sub	sp, #8
   14b18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14b1a:	9601      	str	r6, [sp, #4]
   14b1c:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   14b20:	d83b      	bhi.n	14b9a <UtilCmacBuildDataForDerivation+0x8a>
   14b22:	00ee      	lsls	r6, r5, #3
   14b24:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   14b28:	461f      	mov	r7, r3
   14b2a:	bf34      	ite	cc
   14b2c:	2303      	movcc	r3, #3
   14b2e:	2304      	movcs	r3, #4
   14b30:	1e4d      	subs	r5, r1, #1
   14b32:	2d3f      	cmp	r5, #63	; 0x3f
   14b34:	460c      	mov	r4, r1
   14b36:	9300      	str	r3, [sp, #0]
   14b38:	d82f      	bhi.n	14b9a <UtilCmacBuildDataForDerivation+0x8a>
   14b3a:	b370      	cbz	r0, 14b9a <UtilCmacBuildDataForDerivation+0x8a>
   14b3c:	4690      	mov	r8, r2
   14b3e:	b117      	cbz	r7, 14b46 <UtilCmacBuildDataForDerivation+0x36>
   14b40:	b35a      	cbz	r2, 14b9a <UtilCmacBuildDataForDerivation+0x8a>
   14b42:	2f40      	cmp	r7, #64	; 0x40
   14b44:	d829      	bhi.n	14b9a <UtilCmacBuildDataForDerivation+0x8a>
   14b46:	9a08      	ldr	r2, [sp, #32]
   14b48:	b33a      	cbz	r2, 14b9a <UtilCmacBuildDataForDerivation+0x8a>
   14b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14b4c:	6811      	ldr	r1, [r2, #0]
   14b4e:	b321      	cbz	r1, 14b9a <UtilCmacBuildDataForDerivation+0x8a>
   14b50:	19e2      	adds	r2, r4, r7
   14b52:	4413      	add	r3, r2
   14b54:	4299      	cmp	r1, r3
   14b56:	d320      	bcc.n	14b9a <UtilCmacBuildDataForDerivation+0x8a>
   14b58:	9b08      	ldr	r3, [sp, #32]
   14b5a:	4622      	mov	r2, r4
   14b5c:	4601      	mov	r1, r0
   14b5e:	1c58      	adds	r0, r3, #1
   14b60:	f7fe ffa0 	bl	13aa4 <CC_PalMemCopyPlat>
   14b64:	2200      	movs	r2, #0
   14b66:	9b08      	ldr	r3, [sp, #32]
   14b68:	4423      	add	r3, r4
   14b6a:	705a      	strb	r2, [r3, #1]
   14b6c:	3402      	adds	r4, #2
   14b6e:	bb07      	cbnz	r7, 14bb2 <UtilCmacBuildDataForDerivation+0xa2>
   14b70:	2eff      	cmp	r6, #255	; 0xff
   14b72:	9600      	str	r6, [sp, #0]
   14b74:	d915      	bls.n	14ba2 <UtilCmacBuildDataForDerivation+0x92>
   14b76:	9b08      	ldr	r3, [sp, #32]
   14b78:	0235      	lsls	r5, r6, #8
   14b7a:	b2ad      	uxth	r5, r5
   14b7c:	1918      	adds	r0, r3, r4
   14b7e:	2202      	movs	r2, #2
   14b80:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   14b84:	a901      	add	r1, sp, #4
   14b86:	9501      	str	r5, [sp, #4]
   14b88:	f7fe ff8c 	bl	13aa4 <CC_PalMemCopyPlat>
   14b8c:	3402      	adds	r4, #2
   14b8e:	2000      	movs	r0, #0
   14b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14b92:	601c      	str	r4, [r3, #0]
   14b94:	b002      	add	sp, #8
   14b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b9a:	480a      	ldr	r0, [pc, #40]	; (14bc4 <UtilCmacBuildDataForDerivation+0xb4>)
   14b9c:	b002      	add	sp, #8
   14b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ba2:	9b08      	ldr	r3, [sp, #32]
   14ba4:	2201      	movs	r2, #1
   14ba6:	1918      	adds	r0, r3, r4
   14ba8:	4669      	mov	r1, sp
   14baa:	f7fe ff7b 	bl	13aa4 <CC_PalMemCopyPlat>
   14bae:	3401      	adds	r4, #1
   14bb0:	e7ed      	b.n	14b8e <UtilCmacBuildDataForDerivation+0x7e>
   14bb2:	9b08      	ldr	r3, [sp, #32]
   14bb4:	4641      	mov	r1, r8
   14bb6:	1918      	adds	r0, r3, r4
   14bb8:	463a      	mov	r2, r7
   14bba:	f7fe ff73 	bl	13aa4 <CC_PalMemCopyPlat>
   14bbe:	443c      	add	r4, r7
   14bc0:	e7d6      	b.n	14b70 <UtilCmacBuildDataForDerivation+0x60>
   14bc2:	bf00      	nop
   14bc4:	80000006 	.word	0x80000006

00014bc8 <CC_PalDataBufferAttrGet>:
   14bc8:	2000      	movs	r0, #0
   14bca:	7018      	strb	r0, [r3, #0]
   14bcc:	4770      	bx	lr
   14bce:	bf00      	nop

00014bd0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   14bd0:	4770      	bx	lr

00014bd2 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   14bd2:	b508      	push	{r3, lr}
	spm_config();
   14bd4:	f7f8 fc44 	bl	d460 <spm_config>
	spm_jump();
}
   14bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   14bdc:	f7f8 bbe0 	b.w	d3a0 <spm_jump>

00014be0 <arch_printk_char_out>:
}
   14be0:	2000      	movs	r0, #0
   14be2:	4770      	bx	lr

00014be4 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   14be4:	b40f      	push	{r0, r1, r2, r3}
   14be6:	b507      	push	{r0, r1, r2, lr}
   14be8:	a904      	add	r1, sp, #16
   14bea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14bee:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   14bf0:	f7f7 fdc6 	bl	c780 <vprintk>
	}
	va_end(ap);
}
   14bf4:	b003      	add	sp, #12
   14bf6:	f85d eb04 	ldr.w	lr, [sp], #4
   14bfa:	b004      	add	sp, #16
   14bfc:	4770      	bx	lr

00014bfe <onoff_manager_init>:
	return rv;
}

int onoff_manager_init(struct onoff_manager *mgr,
		       const struct onoff_transitions *transitions)
{
   14bfe:	b538      	push	{r3, r4, r5, lr}
   14c00:	460c      	mov	r4, r1
	if ((mgr == NULL)
   14c02:	4605      	mov	r5, r0
   14c04:	b158      	cbz	r0, 14c1e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   14c06:	b151      	cbz	r1, 14c1e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   14c08:	680b      	ldr	r3, [r1, #0]
   14c0a:	b143      	cbz	r3, 14c1e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   14c0c:	684b      	ldr	r3, [r1, #4]
   14c0e:	b133      	cbz	r3, 14c1e <onoff_manager_init+0x20>
		return -EINVAL;
	}

	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14c10:	2220      	movs	r2, #32
   14c12:	2100      	movs	r1, #0
   14c14:	f000 f966 	bl	14ee4 <memset>

	return 0;
   14c18:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14c1a:	612c      	str	r4, [r5, #16]
}
   14c1c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14c1e:	f06f 0015 	mvn.w	r0, #21
   14c22:	e7fb      	b.n	14c1c <onoff_manager_init+0x1e>

00014c24 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   14c24:	4604      	mov	r4, r0
   14c26:	b508      	push	{r3, lr}
   14c28:	4608      	mov	r0, r1
   14c2a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   14c2c:	461a      	mov	r2, r3
   14c2e:	47a0      	blx	r4
	return z_impl_z_current_get();
   14c30:	f7fc fe94 	bl	1195c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   14c34:	f7f9 fae6 	bl	e204 <z_impl_k_thread_abort>

00014c38 <encode_uint>:
{
   14c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c3c:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   14c3e:	78d3      	ldrb	r3, [r2, #3]
{
   14c40:	4614      	mov	r4, r2
	switch (specifier) {
   14c42:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   14c44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   14c48:	4606      	mov	r6, r0
   14c4a:	460f      	mov	r7, r1
   14c4c:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   14c4e:	d02d      	beq.n	14cac <encode_uint+0x74>
   14c50:	d828      	bhi.n	14ca4 <encode_uint+0x6c>
		return 16;
   14c52:	2b58      	cmp	r3, #88	; 0x58
   14c54:	bf14      	ite	ne
   14c56:	250a      	movne	r5, #10
   14c58:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   14c5a:	46aa      	mov	sl, r5
   14c5c:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   14c60:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   14c64:	4652      	mov	r2, sl
   14c66:	465b      	mov	r3, fp
   14c68:	4630      	mov	r0, r6
   14c6a:	4639      	mov	r1, r7
   14c6c:	f7f7 fbe6 	bl	c43c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14c70:	2a09      	cmp	r2, #9
   14c72:	b2d3      	uxtb	r3, r2
   14c74:	d81f      	bhi.n	14cb6 <encode_uint+0x7e>
   14c76:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   14c78:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14c7a:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   14c7c:	bf08      	it	eq
   14c7e:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14c80:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   14c84:	d301      	bcc.n	14c8a <encode_uint+0x52>
   14c86:	45c8      	cmp	r8, r9
   14c88:	d812      	bhi.n	14cb0 <encode_uint+0x78>
	if (conv->flag_hash) {
   14c8a:	7823      	ldrb	r3, [r4, #0]
   14c8c:	069b      	lsls	r3, r3, #26
   14c8e:	d505      	bpl.n	14c9c <encode_uint+0x64>
		if (radix == 8) {
   14c90:	2d08      	cmp	r5, #8
   14c92:	d116      	bne.n	14cc2 <encode_uint+0x8a>
			conv->altform_0 = true;
   14c94:	78a3      	ldrb	r3, [r4, #2]
   14c96:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   14c9a:	70a3      	strb	r3, [r4, #2]
}
   14c9c:	4640      	mov	r0, r8
   14c9e:	b003      	add	sp, #12
   14ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   14ca4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   14ca8:	2b70      	cmp	r3, #112	; 0x70
   14caa:	e7d3      	b.n	14c54 <encode_uint+0x1c>
	switch (specifier) {
   14cac:	2508      	movs	r5, #8
   14cae:	e7d4      	b.n	14c5a <encode_uint+0x22>
		value /= radix;
   14cb0:	4606      	mov	r6, r0
   14cb2:	460f      	mov	r7, r1
   14cb4:	e7d6      	b.n	14c64 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14cb6:	9a01      	ldr	r2, [sp, #4]
   14cb8:	2a19      	cmp	r2, #25
   14cba:	bf94      	ite	ls
   14cbc:	3337      	addls	r3, #55	; 0x37
   14cbe:	3357      	addhi	r3, #87	; 0x57
   14cc0:	e7da      	b.n	14c78 <encode_uint+0x40>
		} else if (radix == 16) {
   14cc2:	2d10      	cmp	r5, #16
   14cc4:	d1ea      	bne.n	14c9c <encode_uint+0x64>
			conv->altform_0c = true;
   14cc6:	78a3      	ldrb	r3, [r4, #2]
   14cc8:	f043 0310 	orr.w	r3, r3, #16
   14ccc:	e7e5      	b.n	14c9a <encode_uint+0x62>

00014cce <outs>:
{
   14cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14cd2:	4607      	mov	r7, r0
   14cd4:	4688      	mov	r8, r1
   14cd6:	4615      	mov	r5, r2
   14cd8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14cda:	4614      	mov	r4, r2
   14cdc:	42b4      	cmp	r4, r6
   14cde:	eba4 0005 	sub.w	r0, r4, r5
   14ce2:	d302      	bcc.n	14cea <outs+0x1c>
   14ce4:	b93e      	cbnz	r6, 14cf6 <outs+0x28>
   14ce6:	7823      	ldrb	r3, [r4, #0]
   14ce8:	b12b      	cbz	r3, 14cf6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   14cea:	4641      	mov	r1, r8
   14cec:	f814 0b01 	ldrb.w	r0, [r4], #1
   14cf0:	47b8      	blx	r7
		if (rc < 0) {
   14cf2:	2800      	cmp	r0, #0
   14cf4:	daf2      	bge.n	14cdc <outs+0xe>
}
   14cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014cfa <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   14cfa:	4040      	eors	r0, r0
   14cfc:	f380 8811 	msr	BASEPRI, r0
   14d00:	f04f 0004 	mov.w	r0, #4
   14d04:	df02      	svc	2
}
   14d06:	4770      	bx	lr

00014d08 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   14d08:	4770      	bx	lr

00014d0a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   14d0a:	b084      	sub	sp, #16
   14d0c:	ab04      	add	r3, sp, #16
   14d0e:	e903 0007 	stmdb	r3, {r0, r1, r2}
   14d12:	2300      	movs	r3, #0
   14d14:	f383 8811 	msr	BASEPRI, r3
   14d18:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   14d1c:	b004      	add	sp, #16
   14d1e:	4770      	bx	lr

00014d20 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   14d20:	b40f      	push	{r0, r1, r2, r3}
   14d22:	b507      	push	{r0, r1, r2, lr}
   14d24:	a904      	add	r1, sp, #16
   14d26:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14d2a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   14d2c:	f7f7 fd28 	bl	c780 <vprintk>
	va_end(ap);
}
   14d30:	b003      	add	sp, #12
   14d32:	f85d eb04 	ldr.w	lr, [sp], #4
   14d36:	b004      	add	sp, #16
   14d38:	4770      	bx	lr

00014d3a <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   14d3a:	2200      	movs	r2, #0
   14d3c:	e9c0 2200 	strd	r2, r2, [r0]
   14d40:	6082      	str	r2, [r0, #8]
}
   14d42:	4770      	bx	lr

00014d44 <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
   14d44:	f000 021f 	and.w	r2, r0, #31
   14d48:	211f      	movs	r1, #31
   14d4a:	2004      	movs	r0, #4
   14d4c:	f7f8 ba72 	b.w	d234 <adp536x_reg_write_mask>

00014d50 <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
   14d50:	f000 0207 	and.w	r2, r0, #7
   14d54:	2107      	movs	r1, #7
   14d56:	2002      	movs	r0, #2
   14d58:	f7f8 ba6c 	b.w	d234 <adp536x_reg_write_mask>

00014d5c <adp536x_charging_enable>:
{
   14d5c:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
   14d5e:	2101      	movs	r1, #1
   14d60:	2007      	movs	r0, #7
   14d62:	f7f8 ba67 	b.w	d234 <adp536x_reg_write_mask>

00014d66 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
   14d66:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
   14d68:	21e0      	movs	r1, #224	; 0xe0
   14d6a:	2015      	movs	r0, #21
   14d6c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   14d70:	f7f8 ba60 	b.w	d234 <adp536x_reg_write_mask>

00014d74 <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
   14d74:	2218      	movs	r2, #24
   14d76:	213f      	movs	r1, #63	; 0x3f
   14d78:	202a      	movs	r0, #42	; 0x2a
   14d7a:	f7f8 ba5b 	b.w	d234 <adp536x_reg_write_mask>

00014d7e <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
   14d7e:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
   14d80:	2102      	movs	r1, #2
   14d82:	2029      	movs	r0, #41	; 0x29
   14d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   14d88:	f7f8 ba54 	b.w	d234 <adp536x_reg_write_mask>

00014d8c <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
   14d8c:	2213      	movs	r2, #19
   14d8e:	213f      	movs	r1, #63	; 0x3f
   14d90:	202c      	movs	r0, #44	; 0x2c
   14d92:	f7f8 ba4f 	b.w	d234 <adp536x_reg_write_mask>

00014d96 <adp536x_buckbst_enable>:
{
   14d96:	4602      	mov	r2, r0
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
   14d98:	2101      	movs	r1, #1
   14d9a:	202b      	movs	r0, #43	; 0x2b
   14d9c:	f7f8 ba4a 	b.w	d234 <adp536x_reg_write_mask>

00014da0 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   14da0:	2000      	movs	r0, #0
{
   14da2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   14da4:	f7f8 f8ba 	bl	cf1c <sys_reboot>

00014da8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14da8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   14daa:	6800      	ldr	r0, [r0, #0]
   14dac:	f7f8 bdc2 	b.w	d934 <z_arm_fatal_error>

00014db0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14db0:	2100      	movs	r1, #0
   14db2:	2001      	movs	r0, #1
   14db4:	f7f8 bdbe 	b.w	d934 <z_arm_fatal_error>

00014db8 <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
   14db8:	4602      	mov	r2, r0
   14dba:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   14dbc:	4608      	mov	r0, r1
   14dbe:	b9c1      	cbnz	r1, 14df2 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
   14dc0:	2b00      	cmp	r3, #0
   14dc2:	db27      	blt.n	14e14 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14dc4:	2001      	movs	r0, #1
   14dc6:	095b      	lsrs	r3, r3, #5
   14dc8:	009b      	lsls	r3, r3, #2
   14dca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14dce:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14dd2:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   14dd6:	f002 021f 	and.w	r2, r2, #31
   14dda:	4090      	lsls	r0, r2
   14ddc:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14de0:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   14de4:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   14de8:	40d0      	lsrs	r0, r2
   14dea:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   14dee:	b2c0      	uxtb	r0, r0
   14df0:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   14df2:	2b00      	cmp	r3, #0
   14df4:	db0d      	blt.n	14e12 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14df6:	2101      	movs	r1, #1
   14df8:	095b      	lsrs	r3, r3, #5
   14dfa:	009b      	lsls	r3, r3, #2
   14dfc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14e00:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14e04:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   14e08:	f002 021f 	and.w	r2, r2, #31
   14e0c:	4091      	lsls	r1, r2
   14e0e:	4301      	orrs	r1, r0
   14e10:	e7e6      	b.n	14de0 <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
   14e12:	2000      	movs	r0, #0
	}
}
   14e14:	4770      	bx	lr

00014e16 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   14e16:	b508      	push	{r3, lr}
	handler();
   14e18:	f7f8 fdfe 	bl	da18 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   14e1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   14e20:	f7f8 bec0 	b.w	dba4 <z_arm_exc_exit>

00014e24 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   14e24:	6e43      	ldr	r3, [r0, #100]	; 0x64
   14e26:	f383 880b 	msr	PSPLIM, r3
}
   14e2a:	4770      	bx	lr

00014e2c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   14e2c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   14e30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   14e34:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   14e36:	bf08      	it	eq
   14e38:	f06f 0015 	mvneq.w	r0, #21
   14e3c:	4770      	bx	lr

00014e3e <arm_cmse_addr_is_secure>:
   14e3e:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
   14e42:	f3c0 5080 	ubfx	r0, r0, #22, #1
   14e46:	4770      	bx	lr

00014e48 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   14e48:	4603      	mov	r3, r0
	size_t n = 0;
   14e4a:	2000      	movs	r0, #0

	while (*s != '\0') {
   14e4c:	5c1a      	ldrb	r2, [r3, r0]
   14e4e:	b902      	cbnz	r2, 14e52 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   14e50:	4770      	bx	lr
		n++;
   14e52:	3001      	adds	r0, #1
   14e54:	e7fa      	b.n	14e4c <strlen+0x4>

00014e56 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   14e56:	4603      	mov	r3, r0
	size_t n = 0;
   14e58:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   14e5a:	5c1a      	ldrb	r2, [r3, r0]
   14e5c:	b10a      	cbz	r2, 14e62 <strnlen+0xc>
   14e5e:	4288      	cmp	r0, r1
   14e60:	d100      	bne.n	14e64 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   14e62:	4770      	bx	lr
		n++;
   14e64:	3001      	adds	r0, #1
   14e66:	e7f8      	b.n	14e5a <strnlen+0x4>

00014e68 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   14e68:	1e43      	subs	r3, r0, #1
   14e6a:	3901      	subs	r1, #1
   14e6c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14e70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   14e74:	4282      	cmp	r2, r0
   14e76:	d101      	bne.n	14e7c <strcmp+0x14>
   14e78:	2a00      	cmp	r2, #0
   14e7a:	d1f7      	bne.n	14e6c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   14e7c:	1a10      	subs	r0, r2, r0
   14e7e:	4770      	bx	lr

00014e80 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   14e80:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   14e82:	b15a      	cbz	r2, 14e9c <memcmp+0x1c>
   14e84:	3901      	subs	r1, #1
   14e86:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   14e88:	f810 2b01 	ldrb.w	r2, [r0], #1
   14e8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   14e90:	42a0      	cmp	r0, r4
   14e92:	d001      	beq.n	14e98 <memcmp+0x18>
   14e94:	429a      	cmp	r2, r3
   14e96:	d0f7      	beq.n	14e88 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   14e98:	1ad0      	subs	r0, r2, r3
}
   14e9a:	bd10      	pop	{r4, pc}
		return 0;
   14e9c:	4610      	mov	r0, r2
   14e9e:	e7fc      	b.n	14e9a <memcmp+0x1a>

00014ea0 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   14ea0:	1a43      	subs	r3, r0, r1
   14ea2:	4293      	cmp	r3, r2
{
   14ea4:	b510      	push	{r4, lr}
   14ea6:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   14eaa:	d308      	bcc.n	14ebe <memmove+0x1e>
	char *dest = d;
   14eac:	4602      	mov	r2, r0
   14eae:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   14eb0:	429a      	cmp	r2, r3
   14eb2:	d00b      	beq.n	14ecc <memmove+0x2c>
			*dest = *src;
   14eb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14eb8:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   14ebc:	e7f8      	b.n	14eb0 <memmove+0x10>
   14ebe:	440a      	add	r2, r1
			dest[n] = src[n];
   14ec0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   14ec4:	428a      	cmp	r2, r1
			dest[n] = src[n];
   14ec6:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   14eca:	d1f9      	bne.n	14ec0 <memmove+0x20>
		}
	}

	return d;
}
   14ecc:	bd10      	pop	{r4, pc}

00014ece <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   14ece:	b510      	push	{r4, lr}
   14ed0:	1e43      	subs	r3, r0, #1
   14ed2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   14ed4:	4291      	cmp	r1, r2
   14ed6:	d100      	bne.n	14eda <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   14ed8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   14eda:	f811 4b01 	ldrb.w	r4, [r1], #1
   14ede:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   14ee2:	e7f7      	b.n	14ed4 <memcpy+0x6>

00014ee4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   14ee4:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   14ee6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   14ee8:	4402      	add	r2, r0
   14eea:	4293      	cmp	r3, r2
   14eec:	d100      	bne.n	14ef0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   14eee:	4770      	bx	lr
		*(d_byte++) = c_byte;
   14ef0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   14ef4:	e7f9      	b.n	14eea <memset+0x6>

00014ef6 <_stdout_hook_default>:
}
   14ef6:	f04f 30ff 	mov.w	r0, #4294967295
   14efa:	4770      	bx	lr

00014efc <set_starting_state>:
{
   14efc:	b510      	push	{r4, lr}
	__asm__ volatile(
   14efe:	f04f 0320 	mov.w	r3, #32
   14f02:	f3ef 8211 	mrs	r2, BASEPRI
   14f06:	f383 8812 	msr	BASEPRI_MAX, r3
   14f0a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14f0e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   14f10:	f003 0407 	and.w	r4, r3, #7
   14f14:	2c01      	cmp	r4, #1
   14f16:	d106      	bne.n	14f26 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   14f18:	6001      	str	r1, [r0, #0]
	int err = 0;
   14f1a:	2000      	movs	r0, #0
	__asm__ volatile(
   14f1c:	f382 8811 	msr	BASEPRI, r2
   14f20:	f3bf 8f6f 	isb	sy
}
   14f24:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   14f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   14f2a:	428b      	cmp	r3, r1
		err = -EALREADY;
   14f2c:	bf14      	ite	ne
   14f2e:	f04f 30ff 	movne.w	r0, #4294967295
   14f32:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   14f36:	e7f1      	b.n	14f1c <set_starting_state+0x20>

00014f38 <set_on_state>:
	__asm__ volatile(
   14f38:	f04f 0320 	mov.w	r3, #32
   14f3c:	f3ef 8211 	mrs	r2, BASEPRI
   14f40:	f383 8812 	msr	BASEPRI_MAX, r3
   14f44:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   14f48:	6803      	ldr	r3, [r0, #0]
   14f4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14f4e:	f043 0302 	orr.w	r3, r3, #2
   14f52:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   14f54:	f382 8811 	msr	BASEPRI, r2
   14f58:	f3bf 8f6f 	isb	sy
}
   14f5c:	4770      	bx	lr

00014f5e <onoff_started_callback>:
	return &data->mgr[type];
   14f5e:	6900      	ldr	r0, [r0, #16]
   14f60:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   14f62:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   14f66:	2100      	movs	r1, #0
   14f68:	4710      	bx	r2

00014f6a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14f6a:	2000      	movs	r0, #0
   14f6c:	f7fa bb7a 	b.w	f664 <nrfx_clock_start>

00014f70 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14f70:	2000      	movs	r0, #0
   14f72:	f7fa bbc7 	b.w	f704 <nrfx_clock_stop>

00014f76 <api_stop>:
	return stop(dev, subsys, CTX_API);
   14f76:	2280      	movs	r2, #128	; 0x80
   14f78:	f7f9 bc68 	b.w	e84c <stop>

00014f7c <blocking_start_callback>:
{
   14f7c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   14f7e:	f7fb bd8d 	b.w	10a9c <z_impl_k_sem_give>

00014f82 <api_start>:
{
   14f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   14f86:	240c      	movs	r4, #12
   14f88:	b2c9      	uxtb	r1, r1
   14f8a:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14f8c:	6905      	ldr	r5, [r0, #16]
{
   14f8e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   14f90:	f104 0048 	add.w	r0, r4, #72	; 0x48
   14f94:	2180      	movs	r1, #128	; 0x80
   14f96:	4428      	add	r0, r5
{
   14f98:	4690      	mov	r8, r2
   14f9a:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   14f9c:	f7ff ffae 	bl	14efc <set_starting_state>
	if (err < 0) {
   14fa0:	2800      	cmp	r0, #0
   14fa2:	db06      	blt.n	14fb2 <api_start+0x30>
	subdata->cb = cb;
   14fa4:	4425      	add	r5, r4
	subdata->user_data = user_data;
   14fa6:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   14faa:	6873      	ldr	r3, [r6, #4]
   14fac:	591b      	ldr	r3, [r3, r4]
   14fae:	4798      	blx	r3
	return 0;
   14fb0:	2000      	movs	r0, #0
}
   14fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014fb6 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   14fb6:	6843      	ldr	r3, [r0, #4]
   14fb8:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   14fba:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   14fbe:	05d1      	lsls	r1, r2, #23
   14fc0:	d518      	bpl.n	14ff4 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14fc2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   14fc6:	b1aa      	cbz	r2, 14ff4 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   14fc8:	f04f 0120 	mov.w	r1, #32
   14fcc:	f3ef 8211 	mrs	r2, BASEPRI
   14fd0:	f381 8812 	msr	BASEPRI_MAX, r1
   14fd4:	f3bf 8f6f 	isb	sy
   14fd8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   14fdc:	b131      	cbz	r1, 14fec <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14fde:	2100      	movs	r1, #0
   14fe0:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   14fe4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14fe8:	2101      	movs	r1, #1
   14fea:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   14fec:	f382 8811 	msr	BASEPRI, r2
   14ff0:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14ff4:	6842      	ldr	r2, [r0, #4]
   14ff6:	6852      	ldr	r2, [r2, #4]
   14ff8:	06d2      	lsls	r2, r2, #27
   14ffa:	d515      	bpl.n	15028 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   14ffc:	f04f 0120 	mov.w	r1, #32
   15000:	f3ef 8211 	mrs	r2, BASEPRI
   15004:	f381 8812 	msr	BASEPRI_MAX, r1
   15008:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1500c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   15010:	b111      	cbz	r1, 15018 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15012:	2100      	movs	r1, #0
   15014:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   15018:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1501c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   15020:	f382 8811 	msr	BASEPRI, r2
   15024:	f3bf 8f6f 	isb	sy
}
   15028:	4770      	bx	lr

0001502a <uarte_nrfx_config_get>:
{
   1502a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1502c:	6902      	ldr	r2, [r0, #16]
   1502e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   15032:	e883 0003 	stmia.w	r3, {r0, r1}
}
   15036:	2000      	movs	r0, #0
   15038:	4770      	bx	lr

0001503a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1503a:	6843      	ldr	r3, [r0, #4]
   1503c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1503e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   15042:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   15046:	4770      	bx	lr

00015048 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   15048:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1504a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1504c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   15050:	b940      	cbnz	r0, 15064 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   15052:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   15054:	0792      	lsls	r2, r2, #30
   15056:	d406      	bmi.n	15066 <is_tx_ready+0x1e>
   15058:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1505c:	3800      	subs	r0, #0
   1505e:	bf18      	it	ne
   15060:	2001      	movne	r0, #1
   15062:	4770      	bx	lr
   15064:	2001      	movs	r0, #1
}
   15066:	4770      	bx	lr

00015068 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   15068:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1506a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1506c:	681b      	ldr	r3, [r3, #0]
   1506e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   15072:	b148      	cbz	r0, 15088 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15074:	2000      	movs	r0, #0
	*c = data->rx_data;
   15076:	7c52      	ldrb	r2, [r2, #17]
   15078:	700a      	strb	r2, [r1, #0]
   1507a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1507e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15082:	2201      	movs	r2, #1
   15084:	601a      	str	r2, [r3, #0]
	return 0;
   15086:	4770      	bx	lr
		return -1;
   15088:	f04f 30ff 	mov.w	r0, #4294967295
}
   1508c:	4770      	bx	lr

0001508e <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1508e:	2300      	movs	r3, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   15090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   15094:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15098:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   1509a:	f8d8 4000 	ldr.w	r4, [r8]
static int uarte_instance_init(const struct device *dev,
   1509e:	4606      	mov	r6, r0
   150a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   150a4:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   150a6:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   150a8:	68eb      	ldr	r3, [r5, #12]
   150aa:	1c59      	adds	r1, r3, #1
   150ac:	d011      	beq.n	150d2 <uarte_instance_init.isra.0+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   150ae:	a801      	add	r0, sp, #4
   150b0:	9301      	str	r3, [sp, #4]
   150b2:	f7f9 ff31 	bl	ef18 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   150b6:	2301      	movs	r3, #1
   150b8:	9a01      	ldr	r2, [sp, #4]
   150ba:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   150bc:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   150be:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   150c0:	a801      	add	r0, sp, #4
   150c2:	9301      	str	r3, [sp, #4]
   150c4:	f7f9 ff28 	bl	ef18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   150c8:	2203      	movs	r2, #3
   150ca:	9b01      	ldr	r3, [sp, #4]
   150cc:	3380      	adds	r3, #128	; 0x80
   150ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   150d2:	692b      	ldr	r3, [r5, #16]
   150d4:	1c5a      	adds	r2, r3, #1
   150d6:	d010      	beq.n	150fa <uarte_instance_init.isra.0+0x6c>
			nrf_gpio_cfg_input(cfg->rx_pin,
   150d8:	7f2a      	ldrb	r2, [r5, #28]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   150da:	a801      	add	r0, sp, #4
   150dc:	2a00      	cmp	r2, #0
   150de:	bf14      	ite	ne
   150e0:	f04f 0903 	movne.w	r9, #3
   150e4:	f04f 0900 	moveq.w	r9, #0
    nrf_gpio_cfg(
   150e8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   150ea:	f7f9 ff15 	bl	ef18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   150ee:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   150f0:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   150f4:	3380      	adds	r3, #128	; 0x80
   150f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   150fa:	696b      	ldr	r3, [r5, #20]
   150fc:	1c58      	adds	r0, r3, #1
   150fe:	d011      	beq.n	15124 <uarte_instance_init.isra.0+0x96>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15100:	a801      	add	r0, sp, #4
   15102:	9301      	str	r3, [sp, #4]
   15104:	f7f9 ff08 	bl	ef18 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15108:	2301      	movs	r3, #1
   1510a:	9a01      	ldr	r2, [sp, #4]
   1510c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1510e:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   15110:	696b      	ldr	r3, [r5, #20]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15112:	a801      	add	r0, sp, #4
   15114:	9301      	str	r3, [sp, #4]
   15116:	f7f9 feff 	bl	ef18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1511a:	2203      	movs	r2, #3
   1511c:	9b01      	ldr	r3, [sp, #4]
   1511e:	3380      	adds	r3, #128	; 0x80
   15120:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15124:	69ab      	ldr	r3, [r5, #24]
   15126:	1c59      	adds	r1, r3, #1
   15128:	d010      	beq.n	1514c <uarte_instance_init.isra.0+0xbe>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1512a:	7f6a      	ldrb	r2, [r5, #29]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1512c:	a801      	add	r0, sp, #4
   1512e:	2a00      	cmp	r2, #0
   15130:	bf14      	ite	ne
   15132:	f04f 0903 	movne.w	r9, #3
   15136:	f04f 0900 	moveq.w	r9, #0
    nrf_gpio_cfg(
   1513a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1513c:	f7f9 feec 	bl	ef18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   15140:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15142:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   15146:	3380      	adds	r3, #128	; 0x80
   15148:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1514c:	682b      	ldr	r3, [r5, #0]
   1514e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    p_reg->PSEL.TXD = pseltxd;
   15152:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15156:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1515a:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   1515e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15162:	6931      	ldr	r1, [r6, #16]
   15164:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
   15166:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1516a:	3104      	adds	r1, #4
   1516c:	f7f9 fe22 	bl	edb4 <uarte_nrfx_configure>
	if (err) {
   15170:	bb40      	cbnz	r0, 151c4 <uarte_instance_init.isra.0+0x136>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15172:	2308      	movs	r3, #8
   15174:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   15178:	f898 3008 	ldrb.w	r3, [r8, #8]
   1517c:	b95b      	cbnz	r3, 15196 <uarte_instance_init.isra.0+0x108>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1517e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   15182:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   15186:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1518a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1518e:	2301      	movs	r3, #1
   15190:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15194:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   15196:	f8d8 3004 	ldr.w	r3, [r8, #4]

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1519a:	3710      	adds	r7, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1519c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1519e:	bf5c      	itt	pl
   151a0:	f44f 7280 	movpl.w	r2, #256	; 0x100
   151a4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   151a8:	06db      	lsls	r3, r3, #27
   151aa:	bf44      	itt	mi
   151ac:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   151b0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   151b4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   151b6:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   151ba:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151be:	2301      	movs	r3, #1
   151c0:	60a3      	str	r3, [r4, #8]
   151c2:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   151c4:	b003      	add	sp, #12
   151c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000151ca <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   151ca:	b510      	push	{r4, lr}
   151cc:	4604      	mov	r4, r0
   151ce:	2200      	movs	r2, #0
   151d0:	2101      	movs	r1, #1
   151d2:	2008      	movs	r0, #8
   151d4:	f7f8 fbfa 	bl	d9cc <z_arm_irq_priority_set>
   151d8:	2008      	movs	r0, #8
   151da:	f7f8 fbd9 	bl	d990 <arch_irq_enable>
   151de:	4620      	mov	r0, r4
   151e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   151e4:	f7ff bf53 	b.w	1508e <uarte_instance_init.isra.0>

000151e8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   151e8:	b510      	push	{r4, lr}
   151ea:	4604      	mov	r4, r0
   151ec:	2200      	movs	r2, #0
   151ee:	2101      	movs	r1, #1
   151f0:	2009      	movs	r0, #9
   151f2:	f7f8 fbeb 	bl	d9cc <z_arm_irq_priority_set>
   151f6:	2009      	movs	r0, #9
   151f8:	f7f8 fbca 	bl	d990 <arch_irq_enable>
   151fc:	4620      	mov	r0, r4
   151fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15202:	f7ff bf44 	b.w	1508e <uarte_instance_init.isra.0>

00015206 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   15206:	2200      	movs	r2, #0
{
   15208:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1520a:	4611      	mov	r1, r2
   1520c:	4610      	mov	r0, r2
   1520e:	f7fc ff69 	bl	120e4 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   15212:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   15214:	bf18      	it	ne
   15216:	f06f 0015 	mvnne.w	r0, #21
   1521a:	bd08      	pop	{r3, pc}

0001521c <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1521c:	f7fc bf0a 	b.w	12034 <nrf_cc3xx_platform_init>

00015220 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   15220:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   15222:	f7f8 fab1 	bl	d788 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   15226:	f7f8 fb5b 	bl	d8e0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1522a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1522e:	f7fc bf01 	b.w	12034 <nrf_cc3xx_platform_init>

00015232 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   15232:	4700      	bx	r0

00015234 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   15234:	f000 b89d 	b.w	15372 <z_impl_k_busy_wait>

00015238 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   15238:	7b0a      	ldrb	r2, [r1, #12]
{
   1523a:	4603      	mov	r3, r0
   1523c:	2a03      	cmp	r2, #3
   1523e:	d829      	bhi.n	15294 <xfer_completeness_check+0x5c>
   15240:	e8df f002 	tbb	[pc, r2]
   15244:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   15248:	688a      	ldr	r2, [r1, #8]
   1524a:	0350      	lsls	r0, r2, #13
   1524c:	d504      	bpl.n	15258 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1524e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   15252:	6908      	ldr	r0, [r1, #16]
   15254:	4290      	cmp	r0, r2
   15256:	d107      	bne.n	15268 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   15258:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1525a:	0352      	lsls	r2, r2, #13
   1525c:	d41a      	bmi.n	15294 <xfer_completeness_check+0x5c>
   1525e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   15262:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   15264:	4291      	cmp	r1, r2
   15266:	d015      	beq.n	15294 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   15268:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1526a:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1526c:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   15270:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   15274:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   15276:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1527a:	6908      	ldr	r0, [r1, #16]
   1527c:	4290      	cmp	r0, r2
   1527e:	d1f3      	bne.n	15268 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   15280:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   15284:	e7ed      	b.n	15262 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   15286:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1528a:	6909      	ldr	r1, [r1, #16]
   1528c:	e7ea      	b.n	15264 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1528e:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   15292:	e7fa      	b.n	1528a <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   15294:	2001      	movs	r0, #1
}
   15296:	4770      	bx	lr

00015298 <nrf_gpio_pin_set>:
{
   15298:	b507      	push	{r0, r1, r2, lr}
   1529a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1529c:	a801      	add	r0, sp, #4
   1529e:	f7fa fe87 	bl	ffb0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   152a2:	2301      	movs	r3, #1
   152a4:	9a01      	ldr	r2, [sp, #4]
   152a6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   152a8:	6083      	str	r3, [r0, #8]
}
   152aa:	b003      	add	sp, #12
   152ac:	f85d fb04 	ldr.w	pc, [sp], #4

000152b0 <z_device_state_init>:
}
   152b0:	4770      	bx	lr

000152b2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   152b2:	b138      	cbz	r0, 152c4 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   152b4:	68c3      	ldr	r3, [r0, #12]
   152b6:	8818      	ldrh	r0, [r3, #0]
   152b8:	f3c0 0008 	ubfx	r0, r0, #0, #9
   152bc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   152c0:	4258      	negs	r0, r3
   152c2:	4158      	adcs	r0, r3
}
   152c4:	4770      	bx	lr

000152c6 <k_mem_slab_init>:
{
   152c6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   152c8:	2400      	movs	r4, #0
   152ca:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   152cc:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   152ce:	ea41 0402 	orr.w	r4, r1, r2
   152d2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   152d6:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   152da:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   152dc:	d10c      	bne.n	152f8 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   152de:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   152e0:	42a3      	cmp	r3, r4
   152e2:	d103      	bne.n	152ec <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   152e4:	e9c0 0000 	strd	r0, r0, [r0]
}
   152e8:	2000      	movs	r0, #0
}
   152ea:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   152ec:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   152ee:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   152f0:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   152f2:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   152f4:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   152f6:	e7f3      	b.n	152e0 <k_mem_slab_init+0x1a>
		return -EINVAL;
   152f8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   152fc:	e7f5      	b.n	152ea <k_mem_slab_init+0x24>

000152fe <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   152fe:	f3ef 8005 	mrs	r0, IPSR
}
   15302:	3800      	subs	r0, #0
   15304:	bf18      	it	ne
   15306:	2001      	movne	r0, #1
   15308:	4770      	bx	lr

0001530a <k_thread_name_get>:
}
   1530a:	2000      	movs	r0, #0
   1530c:	4770      	bx	lr

0001530e <z_pm_save_idle_exit>:
{
   1530e:	b508      	push	{r3, lr}
	pm_system_resume();
   15310:	f7f7 feba 	bl	d088 <pm_system_resume>
}
   15314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   15318:	f7f9 bfe6 	b.w	f2e8 <sys_clock_idle_exit>

0001531c <z_impl_k_mutex_init>:
{
   1531c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1531e:	2000      	movs	r0, #0
   15320:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   15324:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   15328:	4770      	bx	lr

0001532a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1532a:	4603      	mov	r3, r0
   1532c:	b920      	cbnz	r0, 15338 <z_reschedule_irqlock+0xe>
   1532e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   15332:	b90a      	cbnz	r2, 15338 <z_reschedule_irqlock+0xe>
   15334:	f7f8 bb90 	b.w	da58 <arch_swap>
   15338:	f383 8811 	msr	BASEPRI, r3
   1533c:	f3bf 8f6f 	isb	sy
}
   15340:	4770      	bx	lr

00015342 <z_reschedule_unlocked>:
	__asm__ volatile(
   15342:	f04f 0320 	mov.w	r3, #32
   15346:	f3ef 8011 	mrs	r0, BASEPRI
   1534a:	f383 8812 	msr	BASEPRI_MAX, r3
   1534e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15352:	f7ff bfea 	b.w	1532a <z_reschedule_irqlock>

00015356 <z_priq_dumb_best>:
{
   15356:	4603      	mov	r3, r0
	return list->head == list;
   15358:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1535a:	4283      	cmp	r3, r0
   1535c:	d003      	beq.n	15366 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1535e:	2800      	cmp	r0, #0
   15360:	bf38      	it	cc
   15362:	2000      	movcc	r0, #0
   15364:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15366:	2000      	movs	r0, #0
}
   15368:	4770      	bx	lr

0001536a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1536a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1536c:	f7fc fe18 	bl	11fa0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   15370:	bd08      	pop	{r3, pc}

00015372 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   15372:	b108      	cbz	r0, 15378 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   15374:	f7f7 bdfe 	b.w	cf74 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   15378:	4770      	bx	lr
	...

0001537c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1537c:	f7fa b836 	b.w	f3ec <SystemInit>

Disassembly of section .gnu.sgstubs:

00016f00 <spm_firmware_info_nse-0x10e0>:
	...

00017fe0 <spm_firmware_info_nse>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7f5 bb8c 	b.w	d700 <__acle_se_spm_firmware_info_nse>

00017fe8 <spm_request_random_number_nse>:
   17fe8:	e97f e97f 	sg
   17fec:	f7f5 bb64 	b.w	d6b8 <__acle_se_spm_request_random_number_nse>

00017ff0 <spm_request_read_nse>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7f5 bb26 	b.w	d644 <__acle_se_spm_request_read_nse>
	...
